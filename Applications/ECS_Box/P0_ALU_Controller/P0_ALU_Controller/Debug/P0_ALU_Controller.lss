
P0_ALU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001aa2c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001aa2c  0001aa2c  0002aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000061c  20000000  0001aa34  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003061c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003061c  2**0
                  CONTENTS
  5 .bss          00009334  20000620  0001b058  00030620  2**3
                  ALLOC
  6 .stack        00010004  20009954  0002438c  00030620  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003064a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000fda04  00000000  00000000  000306a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001518c  00000000  00000000  0012e0a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002b756  00000000  00000000  00143233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004760  00000000  00000000  0016e989  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004480  00000000  00000000  001730e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00068589  00000000  00000000  00177569  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006bcb6  00000000  00000000  001dfaf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014e580  00000000  00000000  0024b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011b30  00000000  00000000  00399d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 99 01 20 31 09 00 00 2d 09 00 00 2d 09 00 00     X.. 1...-...-...
      10:	2d 09 00 00 2d 09 00 00 2d 09 00 00 00 00 00 00     -...-...-.......
	...
      2c:	2d 09 00 00 2d 09 00 00 00 00 00 00 2d 09 00 00     -...-.......-...
      3c:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      4c:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      5c:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      6c:	1d 80 00 00 c1 6a 00 00 d1 6a 00 00 2d 09 00 00     .....j...j..-...
      7c:	e1 6a 00 00 f1 6a 00 00 01 6b 00 00 11 6b 00 00     .j...j...k...k..
      8c:	21 6b 00 00 31 6b 00 00 41 6b 00 00 2d 09 00 00     !k..1k..Ak..-...
      9c:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      ac:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      bc:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      cc:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
      dc:	2d 09 00 00 2d 09 00 00 2d 09 00 00 00 00 00 00     -...-...-.......
	...
      f4:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     104:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     114:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     124:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     134:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     144:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     154:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     164:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     174:	2d 09 00 00 2d 09 00 00 ad 5c 00 00 3d d0 00 00     -...-....\..=...
     184:	4d d0 00 00 5d d0 00 00 6d d0 00 00 2d 09 00 00     M...]...m...-...
     194:	59 9a 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     Y...-...-...-...
     1a4:	2d 09 00 00 2d 09 00 00 2d 09 00 00 75 9a 00 00     -...-...-...u...
     1b4:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     1c4:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     1d4:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     1e4:	2d 09 00 00 2d 09 00 00 39 a7 00 00 2d 09 00 00     -...-...9...-...
     1f4:	55 a7 00 00 2d 09 00 00 71 a7 00 00 8d a7 00 00     U...-...q.......
     204:	a9 a7 00 00 c5 a7 00 00 2d 09 00 00 2d 09 00 00     ........-...-...
     214:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     224:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     234:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     244:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...
     254:	2d 09 00 00 2d 09 00 00 2d 09 00 00 2d 09 00 00     -...-...-...-...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000620 	.word	0x20000620
     280:	00000000 	.word	0x00000000
     284:	0001aa34 	.word	0x0001aa34

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001aa34 	.word	0x0001aa34
     2c4:	20000624 	.word	0x20000624
     2c8:	0001aa34 	.word	0x0001aa34
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZL11ARINCTimeUpPK10timer_task>:

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
	ptrALUClass->arincTXTimeUP=true;
     2d0:	4b02      	ldr	r3, [pc, #8]	; (2dc <_ZL11ARINCTimeUpPK10timer_task+0xc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	2201      	movs	r2, #1
     2d6:	f883 2020 	strb.w	r2, [r3, #32]
     2da:	4770      	bx	lr
     2dc:	2000063c 	.word	0x2000063c

000002e0 <_ZN9ALU_ClassD1Ev>:
	clk_rate       = 1000;
	timeout_period = 4096*1024;
} //ALU_Class

// default destructor
ALU_Class::~ALU_Class()
     2e0:	b510      	push	{r4, lr}
     2e2:	4604      	mov	r4, r0
     2e4:	4b01      	ldr	r3, [pc, #4]	; (2ec <_ZN9ALU_ClassD1Ev+0xc>)
     2e6:	4798      	blx	r3
{
} //~ALU_Class
     2e8:	4620      	mov	r0, r4
     2ea:	bd10      	pop	{r4, pc}
     2ec:	00001fb5 	.word	0x00001fb5

000002f0 <_ZN9ALU_Class17CheckPeriodicTaskEv>:
		hvac.Stop(0);
		break;
	}
}

void ALU_Class::CheckPeriodicTask(void){
     2f0:	b500      	push	{lr}
     2f2:	b083      	sub	sp, #12
	interfaces.CheckCommunication();
     2f4:	4903      	ldr	r1, [pc, #12]	; (304 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x14>)
     2f6:	4668      	mov	r0, sp
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     2fa:	4798      	blx	r3
}
     2fc:	b003      	add	sp, #12
     2fe:	f85d fb04 	ldr.w	pc, [sp], #4
     302:	bf00      	nop
     304:	200007e8 	.word	0x200007e8
     308:	00000e2d 	.word	0x00000e2d

0000030c <_ZN9ALU_ClassC1Ev>:
ALU_Class::ALU_Class()
     30c:	b510      	push	{r4, lr}
     30e:	4604      	mov	r4, r0
     310:	4b06      	ldr	r3, [pc, #24]	; (32c <_ZN9ALU_ClassC1Ev+0x20>)
     312:	4798      	blx	r3
	ptrALUClass=this;
     314:	4b06      	ldr	r3, [pc, #24]	; (330 <_ZN9ALU_ClassC1Ev+0x24>)
     316:	601c      	str	r4, [r3, #0]
	clk_rate       = 1000;
     318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     31c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	timeout_period = 4096*1024;
     320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
     324:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
} //ALU_Class
     328:	4620      	mov	r0, r4
     32a:	bd10      	pop	{r4, pc}
     32c:	00001fa9 	.word	0x00001fa9
     330:	2000063c 	.word	0x2000063c

00000334 <_ZN9ALU_Class21HandleControllerEventER5event>:
{
     334:	b510      	push	{r4, lr}
     336:	b084      	sub	sp, #16
	alu.callingTask = alu.currentTask;
     338:	4c20      	ldr	r4, [pc, #128]	; (3bc <_ZN9ALU_Class21HandleControllerEventER5event+0x88>)
     33a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
     33e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
	alu.currentTask = e.data.wordData[0];
     342:	890b      	ldrh	r3, [r1, #8]
     344:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	alu.taskEntryTime= hvacTimer.Get_ticks();
     348:	481d      	ldr	r0, [pc, #116]	; (3c0 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>)
     34a:	4b1e      	ldr	r3, [pc, #120]	; (3c4 <_ZN9ALU_Class21HandleControllerEventER5event+0x90>)
     34c:	4798      	blx	r3
     34e:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
	switch (alu.currentTask)
     352:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
     356:	f240 1205 	movw	r2, #261	; 0x105
     35a:	4293      	cmp	r3, r2
     35c:	d023      	beq.n	3a6 <_ZN9ALU_Class21HandleControllerEventER5event+0x72>
     35e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     362:	d20a      	bcs.n	37a <_ZN9ALU_Class21HandleControllerEventER5event+0x46>
     364:	2b03      	cmp	r3, #3
     366:	d019      	beq.n	39c <_ZN9ALU_Class21HandleControllerEventER5event+0x68>
     368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     36c:	d120      	bne.n	3b0 <_ZN9ALU_Class21HandleControllerEventER5event+0x7c>
			hvac.Start(1);
     36e:	2101      	movs	r1, #1
     370:	4815      	ldr	r0, [pc, #84]	; (3c8 <_ZN9ALU_Class21HandleControllerEventER5event+0x94>)
     372:	4b16      	ldr	r3, [pc, #88]	; (3cc <_ZN9ALU_Class21HandleControllerEventER5event+0x98>)
     374:	4798      	blx	r3
}
     376:	b004      	add	sp, #16
     378:	bd10      	pop	{r4, pc}
	switch (alu.currentTask)
     37a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     37e:	d008      	beq.n	392 <_ZN9ALU_Class21HandleControllerEventER5event+0x5e>
     380:	f240 1207 	movw	r2, #263	; 0x107
     384:	4293      	cmp	r3, r2
     386:	d113      	bne.n	3b0 <_ZN9ALU_Class21HandleControllerEventER5event+0x7c>
			hvac.ControllerResume(1);
     388:	2101      	movs	r1, #1
     38a:	480f      	ldr	r0, [pc, #60]	; (3c8 <_ZN9ALU_Class21HandleControllerEventER5event+0x94>)
     38c:	4b10      	ldr	r3, [pc, #64]	; (3d0 <_ZN9ALU_Class21HandleControllerEventER5event+0x9c>)
     38e:	4798      	blx	r3
		break;
     390:	e7f1      	b.n	376 <_ZN9ALU_Class21HandleControllerEventER5event+0x42>
			hvac.Stop(0);
     392:	2100      	movs	r1, #0
     394:	480c      	ldr	r0, [pc, #48]	; (3c8 <_ZN9ALU_Class21HandleControllerEventER5event+0x94>)
     396:	4b0f      	ldr	r3, [pc, #60]	; (3d4 <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>)
     398:	4798      	blx	r3
		break;
     39a:	e7ec      	b.n	376 <_ZN9ALU_Class21HandleControllerEventER5event+0x42>
			interfaces.CheckCommunication();
     39c:	490e      	ldr	r1, [pc, #56]	; (3d8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>)
     39e:	4668      	mov	r0, sp
     3a0:	4b0e      	ldr	r3, [pc, #56]	; (3dc <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     3a2:	4798      	blx	r3
		break;
     3a4:	e7e7      	b.n	376 <_ZN9ALU_Class21HandleControllerEventER5event+0x42>
			interfaces.CheckCommunication();
     3a6:	490c      	ldr	r1, [pc, #48]	; (3d8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>)
     3a8:	a802      	add	r0, sp, #8
     3aa:	4b0c      	ldr	r3, [pc, #48]	; (3dc <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     3ac:	4798      	blx	r3
		break;
     3ae:	e7e2      	b.n	376 <_ZN9ALU_Class21HandleControllerEventER5event+0x42>
			hvac.Stop(0);
     3b0:	2100      	movs	r1, #0
     3b2:	4805      	ldr	r0, [pc, #20]	; (3c8 <_ZN9ALU_Class21HandleControllerEventER5event+0x94>)
     3b4:	4b07      	ldr	r3, [pc, #28]	; (3d4 <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>)
     3b6:	4798      	blx	r3
}
     3b8:	e7dd      	b.n	376 <_ZN9ALU_Class21HandleControllerEventER5event+0x42>
     3ba:	bf00      	nop
     3bc:	2000063c 	.word	0x2000063c
     3c0:	20002708 	.word	0x20002708
     3c4:	000114f5 	.word	0x000114f5
     3c8:	20000918 	.word	0x20000918
     3cc:	00001e91 	.word	0x00001e91
     3d0:	00001d71 	.word	0x00001d71
     3d4:	000016ed 	.word	0x000016ed
     3d8:	200007e8 	.word	0x200007e8
     3dc:	00000e2d 	.word	0x00000e2d

000003e0 <_ZN9ALU_Class15GetSelectedAMMCEv>:
uint8_t	ALU_Class::GetSelectedAMMC(void){
     3e0:	b510      	push	{r4, lr}
     3e2:	4604      	mov	r4, r0
	activeLine=arinc.ar->GetActiveLine();
     3e4:	4b0d      	ldr	r3, [pc, #52]	; (41c <_ZN9ALU_Class15GetSelectedAMMCEv+0x3c>)
     3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     3ea:	681a      	ldr	r2, [r3, #0]
     3ec:	f852 0c10 	ldr.w	r0, [r2, #-16]
     3f0:	4418      	add	r0, r3
     3f2:	4b0b      	ldr	r3, [pc, #44]	; (420 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>)
     3f4:	4798      	blx	r3
     3f6:	f884 0146 	strb.w	r0, [r4, #326]	; 0x146
		switch (activeLine)
     3fa:	2801      	cmp	r0, #1
     3fc:	d005      	beq.n	40a <_ZN9ALU_Class15GetSelectedAMMCEv+0x2a>
     3fe:	2802      	cmp	r0, #2
     400:	d007      	beq.n	412 <_ZN9ALU_Class15GetSelectedAMMCEv+0x32>
			ammc=&ammc1;
     402:	4a08      	ldr	r2, [pc, #32]	; (424 <_ZN9ALU_Class15GetSelectedAMMCEv+0x44>)
     404:	4b08      	ldr	r3, [pc, #32]	; (428 <_ZN9ALU_Class15GetSelectedAMMCEv+0x48>)
     406:	601a      	str	r2, [r3, #0]
}
     408:	bd10      	pop	{r4, pc}
			ammc=&ammc1;
     40a:	4a06      	ldr	r2, [pc, #24]	; (424 <_ZN9ALU_Class15GetSelectedAMMCEv+0x44>)
     40c:	4b06      	ldr	r3, [pc, #24]	; (428 <_ZN9ALU_Class15GetSelectedAMMCEv+0x48>)
     40e:	601a      	str	r2, [r3, #0]
			break;
     410:	bd10      	pop	{r4, pc}
			ammc=&ammc2;
     412:	4a06      	ldr	r2, [pc, #24]	; (42c <_ZN9ALU_Class15GetSelectedAMMCEv+0x4c>)
     414:	4b04      	ldr	r3, [pc, #16]	; (428 <_ZN9ALU_Class15GetSelectedAMMCEv+0x48>)
     416:	601a      	str	r2, [r3, #0]
			break;
     418:	bd10      	pop	{r4, pc}
     41a:	bf00      	nop
     41c:	20001920 	.word	0x20001920
     420:	000106f3 	.word	0x000106f3
     424:	200014dc 	.word	0x200014dc
     428:	200014e4 	.word	0x200014e4
     42c:	200014e0 	.word	0x200014e0

00000430 <_ZN9ALU_Class14EnableWatchDogEv>:
int32_t	ALU_Class::EnableWatchDog(void){
     430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     434:	f8d0 7160 	ldr.w	r7, [r0, #352]	; 0x160
     438:	f8b0 8164 	ldrh.w	r8, [r0, #356]	; 0x164
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
     43c:	4e0d      	ldr	r6, [pc, #52]	; (474 <_ZN9ALU_Class14EnableWatchDogEv+0x44>)
     43e:	4c0e      	ldr	r4, [pc, #56]	; (478 <_ZN9ALU_Class14EnableWatchDogEv+0x48>)
     440:	6820      	ldr	r0, [r4, #0]
     442:	226f      	movs	r2, #111	; 0x6f
     444:	4631      	mov	r1, r6
     446:	3000      	adds	r0, #0
     448:	bf18      	it	ne
     44a:	2001      	movne	r0, #1
     44c:	4d0b      	ldr	r5, [pc, #44]	; (47c <_ZN9ALU_Class14EnableWatchDogEv+0x4c>)
     44e:	47a8      	blx	r5

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     450:	4642      	mov	r2, r8
     452:	4639      	mov	r1, r7
     454:	4620      	mov	r0, r4
     456:	4b0a      	ldr	r3, [pc, #40]	; (480 <_ZN9ALU_Class14EnableWatchDogEv+0x50>)
     458:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     45a:	6820      	ldr	r0, [r4, #0]
     45c:	228c      	movs	r2, #140	; 0x8c
     45e:	4631      	mov	r1, r6
     460:	3000      	adds	r0, #0
     462:	bf18      	it	ne
     464:	2001      	movne	r0, #1
     466:	47a8      	blx	r5

	return _wdt_enable(&wdt->dev);
     468:	4620      	mov	r0, r4
     46a:	4b06      	ldr	r3, [pc, #24]	; (484 <_ZN9ALU_Class14EnableWatchDogEv+0x54>)
     46c:	4798      	blx	r3
}
     46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     472:	bf00      	nop
     474:	0001957c 	.word	0x0001957c
     478:	20009894 	.word	0x20009894
     47c:	00005565 	.word	0x00005565
     480:	0000d259 	.word	0x0000d259
     484:	0000d3e9 	.word	0x0000d3e9

00000488 <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     488:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     48a:	4c06      	ldr	r4, [pc, #24]	; (4a4 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     48c:	6820      	ldr	r0, [r4, #0]
     48e:	22a9      	movs	r2, #169	; 0xa9
     490:	4905      	ldr	r1, [pc, #20]	; (4a8 <_ZN9ALU_Class12FeedWatchDogEv+0x20>)
     492:	3000      	adds	r0, #0
     494:	bf18      	it	ne
     496:	2001      	movne	r0, #1
     498:	4b04      	ldr	r3, [pc, #16]	; (4ac <_ZN9ALU_Class12FeedWatchDogEv+0x24>)
     49a:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     49c:	4620      	mov	r0, r4
     49e:	4b04      	ldr	r3, [pc, #16]	; (4b0 <_ZN9ALU_Class12FeedWatchDogEv+0x28>)
     4a0:	4798      	blx	r3
}
     4a2:	bd10      	pop	{r4, pc}
     4a4:	20009894 	.word	0x20009894
     4a8:	0001957c 	.word	0x0001957c
     4ac:	00005565 	.word	0x00005565
     4b0:	0000d435 	.word	0x0000d435

000004b4 <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     4b4:	b538      	push	{r3, r4, r5, lr}
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     4b6:	4d06      	ldr	r5, [pc, #24]	; (4d0 <_ZN9ALU_Class14StartLivePulseEv+0x1c>)
     4b8:	4906      	ldr	r1, [pc, #24]	; (4d4 <_ZN9ALU_Class14StartLivePulseEv+0x20>)
     4ba:	4628      	mov	r0, r5
     4bc:	4c06      	ldr	r4, [pc, #24]	; (4d8 <_ZN9ALU_Class14StartLivePulseEv+0x24>)
     4be:	47a0      	blx	r4
     4c0:	4906      	ldr	r1, [pc, #24]	; (4dc <_ZN9ALU_Class14StartLivePulseEv+0x28>)
     4c2:	4628      	mov	r0, r5
     4c4:	47a0      	blx	r4
	uint32_t p=pwm_enable(&LIVE_PULSE);
     4c6:	4806      	ldr	r0, [pc, #24]	; (4e0 <_ZN9ALU_Class14StartLivePulseEv+0x2c>)
     4c8:	4b06      	ldr	r3, [pc, #24]	; (4e4 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     4ca:	4798      	blx	r3
}
     4cc:	b2c0      	uxtb	r0, r0
     4ce:	bd38      	pop	{r3, r4, r5, pc}
     4d0:	20002760 	.word	0x20002760
     4d4:	000195b4 	.word	0x000195b4
     4d8:	00011d51 	.word	0x00011d51
     4dc:	000195d4 	.word	0x000195d4
     4e0:	200097b0 	.word	0x200097b0
     4e4:	00004325 	.word	0x00004325

000004e8 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
     4e8:	b508      	push	{r3, lr}
	task.id=newTask;
     4ea:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	task.prio=(uint8_t)newTask;
     4ee:	f880 1159 	strb.w	r1, [r0, #345]	; 0x159
	AddTask(task);
     4f2:	f500 71aa 	add.w	r1, r0, #340	; 0x154
     4f6:	4b01      	ldr	r3, [pc, #4]	; (4fc <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x14>)
     4f8:	4798      	blx	r3
     4fa:	bd08      	pop	{r3, pc}
     4fc:	000020fd 	.word	0x000020fd

00000500 <_ZN9ALU_Class15PrepareNewEventEtt>:
{
     500:	b500      	push	{lr}
     502:	b085      	sub	sp, #20
		
		
	};

inline event::event()
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     504:	2300      	movs	r3, #0
     506:	9301      	str	r3, [sp, #4]
     508:	9303      	str	r3, [sp, #12]
	e.eventClass =(EventClass)kALUEventClass;
     50a:	f44f 7340 	mov.w	r3, #768	; 0x300
     50e:	f8ad 3000 	strh.w	r3, [sp]
	e.eventType = (EventType)kALUControllerEvent;
     512:	2302      	movs	r3, #2
     514:	f8ad 3002 	strh.w	r3, [sp, #2]
	e.data.wordData[0] = newState;
     518:	f8ad 1008 	strh.w	r1, [sp, #8]
	e.data.wordData[1] = data;
     51c:	f8ad 200a 	strh.w	r2, [sp, #10]
	listener.SendEventSelf(e);
     520:	4669      	mov	r1, sp
     522:	4803      	ldr	r0, [pc, #12]	; (530 <_ZN9ALU_Class15PrepareNewEventEtt+0x30>)
     524:	4b03      	ldr	r3, [pc, #12]	; (534 <_ZN9ALU_Class15PrepareNewEventEtt+0x34>)
     526:	4798      	blx	r3
}
     528:	b005      	add	sp, #20
     52a:	f85d fb04 	ldr.w	pc, [sp], #4
     52e:	bf00      	nop
     530:	2000245c 	.word	0x2000245c
     534:	00010bc9 	.word	0x00010bc9

00000538 <_ZN9ALU_Class4InitEv>:
uint32_t	ALU_Class::Init(void){
     538:	b510      	push	{r4, lr}
     53a:	4604      	mov	r4, r0
	ptrPbit=&pBit;
     53c:	4b17      	ldr	r3, [pc, #92]	; (59c <_ZN9ALU_Class4InitEv+0x64>)
     53e:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
	StartLivePulse();
     542:	4b17      	ldr	r3, [pc, #92]	; (5a0 <_ZN9ALU_Class4InitEv+0x68>)
     544:	4798      	blx	r3
	if (hvac.Init())
     546:	4817      	ldr	r0, [pc, #92]	; (5a4 <_ZN9ALU_Class4InitEv+0x6c>)
     548:	4b17      	ldr	r3, [pc, #92]	; (5a8 <_ZN9ALU_Class4InitEv+0x70>)
     54a:	4798      	blx	r3
     54c:	b918      	cbnz	r0, 556 <_ZN9ALU_Class4InitEv+0x1e>
	return isOK;
     54e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
     552:	b2c0      	uxtb	r0, r0
     554:	bd10      	pop	{r4, pc}
		cBit.isOK=true;
     556:	2201      	movs	r2, #1
     558:	4b14      	ldr	r3, [pc, #80]	; (5ac <_ZN9ALU_Class4InitEv+0x74>)
     55a:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
		listener.Init();
     55e:	4814      	ldr	r0, [pc, #80]	; (5b0 <_ZN9ALU_Class4InitEv+0x78>)
     560:	4b14      	ldr	r3, [pc, #80]	; (5b4 <_ZN9ALU_Class4InitEv+0x7c>)
     562:	4798      	blx	r3
		if (!(interfaces.Init()))
     564:	4814      	ldr	r0, [pc, #80]	; (5b8 <_ZN9ALU_Class4InitEv+0x80>)
     566:	4b15      	ldr	r3, [pc, #84]	; (5bc <_ZN9ALU_Class4InitEv+0x84>)
     568:	4798      	blx	r3
     56a:	b908      	cbnz	r0, 570 <_ZN9ALU_Class4InitEv+0x38>
			return false;
     56c:	2000      	movs	r0, #0
}
     56e:	bd10      	pop	{r4, pc}
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     574:	4912      	ldr	r1, [pc, #72]	; (5c0 <_ZN9ALU_Class4InitEv+0x88>)
     576:	4813      	ldr	r0, [pc, #76]	; (5c4 <_ZN9ALU_Class4InitEv+0x8c>)
     578:	4b13      	ldr	r3, [pc, #76]	; (5c8 <_ZN9ALU_Class4InitEv+0x90>)
     57a:	4798      	blx	r3
				InitTaskArray();
     57c:	4620      	mov	r0, r4
     57e:	4b13      	ldr	r3, [pc, #76]	; (5cc <_ZN9ALU_Class4InitEv+0x94>)
     580:	4798      	blx	r3
				EnableWatchDog();
     582:	4620      	mov	r0, r4
     584:	4b12      	ldr	r3, [pc, #72]	; (5d0 <_ZN9ALU_Class4InitEv+0x98>)
     586:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     588:	2200      	movs	r2, #0
     58a:	f44f 7182 	mov.w	r1, #260	; 0x104
     58e:	4620      	mov	r0, r4
     590:	4b10      	ldr	r3, [pc, #64]	; (5d4 <_ZN9ALU_Class4InitEv+0x9c>)
     592:	4798      	blx	r3
				isOK=true;
     594:	2301      	movs	r3, #1
     596:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     59a:	e7d8      	b.n	54e <_ZN9ALU_Class4InitEv+0x16>
     59c:	200007ac 	.word	0x200007ac
     5a0:	000004b5 	.word	0x000004b5
     5a4:	20000918 	.word	0x20000918
     5a8:	000011e1 	.word	0x000011e1
     5ac:	2000063c 	.word	0x2000063c
     5b0:	2000245c 	.word	0x2000245c
     5b4:	00010925 	.word	0x00010925
     5b8:	200007e8 	.word	0x200007e8
     5bc:	00000cbd 	.word	0x00000cbd
     5c0:	000002d1 	.word	0x000002d1
     5c4:	20002740 	.word	0x20002740
     5c8:	00011429 	.word	0x00011429
     5cc:	00001fb9 	.word	0x00001fb9
     5d0:	00000431 	.word	0x00000431
     5d4:	00000501 	.word	0x00000501

000005d8 <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
{
     5d8:	b530      	push	{r4, r5, lr}
     5da:	b083      	sub	sp, #12
     5dc:	4605      	mov	r5, r0
     5de:	460c      	mov	r4, r1
	taskEntryTime= hvacTimer.Get_ticks();
     5e0:	4821      	ldr	r0, [pc, #132]	; (668 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x90>)
     5e2:	4b22      	ldr	r3, [pc, #136]	; (66c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x94>)
     5e4:	4798      	blx	r3
     5e6:	f8c5 0150 	str.w	r0, [r5, #336]	; 0x150
	switch (ct.id)
     5ea:	7923      	ldrb	r3, [r4, #4]
     5ec:	3b02      	subs	r3, #2
     5ee:	2b09      	cmp	r3, #9
     5f0:	d835      	bhi.n	65e <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x86>
     5f2:	e8df f003 	tbb	[pc, r3]
     5f6:	101c      	.short	0x101c
     5f8:	34343415 	.word	0x34343415
     5fc:	2822050b 	.word	0x2822050b
			hvac.ControllerResume(0);
     600:	2100      	movs	r1, #0
     602:	481b      	ldr	r0, [pc, #108]	; (670 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x98>)
     604:	4b1b      	ldr	r3, [pc, #108]	; (674 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     606:	4798      	blx	r3
}
     608:	b003      	add	sp, #12
     60a:	bd30      	pop	{r4, r5, pc}
			hvac.Stop(0);
     60c:	2100      	movs	r1, #0
     60e:	4818      	ldr	r0, [pc, #96]	; (670 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x98>)
     610:	4b19      	ldr	r3, [pc, #100]	; (678 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa0>)
     612:	4798      	blx	r3
		break;
     614:	e7f8      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
			interfaces.CheckCommunication();
     616:	4919      	ldr	r1, [pc, #100]	; (67c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     618:	4668      	mov	r0, sp
     61a:	4b19      	ldr	r3, [pc, #100]	; (680 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     61c:	4798      	blx	r3
		break;
     61e:	e7f3      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
			arinc.ar->ReadRXBuffer(1);			
     620:	2101      	movs	r1, #1
     622:	4b18      	ldr	r3, [pc, #96]	; (684 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     624:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
     628:	4b17      	ldr	r3, [pc, #92]	; (688 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     62a:	4798      	blx	r3
		break;
     62c:	e7ec      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
			arinc.ar->TransmitTXBuffer();
     62e:	4b15      	ldr	r3, [pc, #84]	; (684 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     630:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
     634:	4b15      	ldr	r3, [pc, #84]	; (68c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     636:	4798      	blx	r3
		break;
     638:	e7e6      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
			arinc.ar->SaveTemperature();		
     63a:	4b12      	ldr	r3, [pc, #72]	; (684 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     63c:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
     640:	4b13      	ldr	r3, [pc, #76]	; (690 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     642:	4798      	blx	r3
		break;
     644:	e7e0      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
			arinc.ar->SaveFlapperValveAngle(fvc.fv->ReadActualPosition());
     646:	4b0f      	ldr	r3, [pc, #60]	; (684 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     648:	f8d3 42b0 	ldr.w	r4, [r3, #688]	; 0x2b0
     64c:	4b11      	ldr	r3, [pc, #68]	; (694 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     64e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     650:	4b11      	ldr	r3, [pc, #68]	; (698 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     652:	4798      	blx	r3
     654:	4601      	mov	r1, r0
     656:	4620      	mov	r0, r4
     658:	4b10      	ldr	r3, [pc, #64]	; (69c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     65a:	4798      	blx	r3
		break;
     65c:	e7d4      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
		hvac.Stop(0);
     65e:	2100      	movs	r1, #0
     660:	4803      	ldr	r0, [pc, #12]	; (670 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x98>)
     662:	4b05      	ldr	r3, [pc, #20]	; (678 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa0>)
     664:	4798      	blx	r3
}
     666:	e7cf      	b.n	608 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x30>
     668:	20002708 	.word	0x20002708
     66c:	000114f5 	.word	0x000114f5
     670:	20000918 	.word	0x20000918
     674:	00001d71 	.word	0x00001d71
     678:	000016ed 	.word	0x000016ed
     67c:	200007e8 	.word	0x200007e8
     680:	00000e2d 	.word	0x00000e2d
     684:	20001920 	.word	0x20001920
     688:	000100cd 	.word	0x000100cd
     68c:	0001022d 	.word	0x0001022d
     690:	0000f9b5 	.word	0x0000f9b5
     694:	20002ac0 	.word	0x20002ac0
     698:	0001402d 	.word	0x0001402d
     69c:	0000f945 	.word	0x0000f945

000006a0 <_ZN9ALU_Class18ExecutePendingTaskEv>:
bool	ALU_Class::ExecutePendingTask(void){
     6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6a4:	b084      	sub	sp, #16
     6a6:	4606      	mov	r6, r0
	allTasksDone=false;
     6a8:	2300      	movs	r3, #0
     6aa:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	tk=GetHighPrioTask();
     6ae:	4680      	mov	r8, r0
     6b0:	4601      	mov	r1, r0
     6b2:	4668      	mov	r0, sp
     6b4:	4b1f      	ldr	r3, [pc, #124]	; (734 <_ZN9ALU_Class18ExecutePendingTaskEv+0x94>)
     6b6:	4798      	blx	r3
     6b8:	e89d 0003 	ldmia.w	sp, {r0, r1}
     6bc:	ab04      	add	r3, sp, #16
     6be:	e903 0003 	stmdb	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     6c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
     6c6:	2b02      	cmp	r3, #2
     6c8:	d009      	beq.n	6de <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	task.id=newTask;
     6ca:	2302      	movs	r3, #2
     6cc:	f886 3158 	strb.w	r3, [r6, #344]	; 0x158
	task.prio=(uint8_t)newTask;
     6d0:	f886 3159 	strb.w	r3, [r6, #345]	; 0x159
	AddTask(task);
     6d4:	f506 71aa 	add.w	r1, r6, #340	; 0x154
     6d8:	4630      	mov	r0, r6
     6da:	4b17      	ldr	r3, [pc, #92]	; (738 <_ZN9ALU_Class18ExecutePendingTaskEv+0x98>)
     6dc:	4798      	blx	r3
	while (taskList->head){
     6de:	6833      	ldr	r3, [r6, #0]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	b1b3      	cbz	r3, 712 <_ZN9ALU_Class18ExecutePendingTaskEv+0x72>
		tk=GetHighPrioTask();
     6e4:	f8df a04c 	ldr.w	sl, [pc, #76]	; 734 <_ZN9ALU_Class18ExecutePendingTaskEv+0x94>
		HandleTasks(tk);
     6e8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 748 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa8>
		RemoveTask(tk);
     6ec:	4f13      	ldr	r7, [pc, #76]	; (73c <_ZN9ALU_Class18ExecutePendingTaskEv+0x9c>)
		tk=GetHighPrioTask();
     6ee:	4641      	mov	r1, r8
     6f0:	4668      	mov	r0, sp
     6f2:	47d0      	blx	sl
     6f4:	ac02      	add	r4, sp, #8
     6f6:	e89d 0003 	ldmia.w	sp, {r0, r1}
     6fa:	e884 0003 	stmia.w	r4, {r0, r1}
		HandleTasks(tk);
     6fe:	4621      	mov	r1, r4
     700:	4630      	mov	r0, r6
     702:	47c8      	blx	r9
		RemoveTask(tk);
     704:	4621      	mov	r1, r4
     706:	4640      	mov	r0, r8
     708:	47b8      	blx	r7
	while (taskList->head){
     70a:	6833      	ldr	r3, [r6, #0]
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	2b00      	cmp	r3, #0
     710:	d1ed      	bne.n	6ee <_ZN9ALU_Class18ExecutePendingTaskEv+0x4e>

void	ALU_Class::RunPeriodicTasks(void){
	FeedWatchDog();
     712:	4630      	mov	r0, r6
     714:	4b0a      	ldr	r3, [pc, #40]	; (740 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa0>)
     716:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     718:	2301      	movs	r3, #1
     71a:	f886 315c 	strb.w	r3, [r6, #348]	; 0x15c
		PrepareNewEvent(kALUEventSimpleResume);
     71e:	2200      	movs	r2, #0
     720:	f240 1107 	movw	r1, #263	; 0x107
     724:	4630      	mov	r0, r6
     726:	4b07      	ldr	r3, [pc, #28]	; (744 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa4>)
     728:	4798      	blx	r3
}
     72a:	f896 015c 	ldrb.w	r0, [r6, #348]	; 0x15c
     72e:	b004      	add	sp, #16
     730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     734:	0000203d 	.word	0x0000203d
     738:	000020fd 	.word	0x000020fd
     73c:	00002175 	.word	0x00002175
     740:	00000489 	.word	0x00000489
     744:	00000501 	.word	0x00000501
     748:	000005d9 	.word	0x000005d9

0000074c <_ZN9ALU_Class13RunControllerEv>:
uint32_t	ALU_Class::RunController(void){
     74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     750:	b086      	sub	sp, #24
     752:	4604      	mov	r4, r0
     754:	f64f 73ff 	movw	r3, #65535	; 0xffff
     758:	f8ad 3008 	strh.w	r3, [sp, #8]
     75c:	f8ad 300a 	strh.w	r3, [sp, #10]
     760:	2300      	movs	r3, #0
     762:	9303      	str	r3, [sp, #12]
	data = v;
     764:	9304      	str	r3, [sp, #16]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     766:	9305      	str	r3, [sp, #20]
	   while (pBit)
     768:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7f0 <_ZN9ALU_Class13RunControllerEv+0xa4>
     76c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7f4 <_ZN9ALU_Class13RunControllerEv+0xa8>
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     770:	f8df a084 	ldr.w	sl, [pc, #132]	; 7f8 <_ZN9ALU_Class13RunControllerEv+0xac>
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     774:	4e19      	ldr	r6, [pc, #100]	; (7dc <_ZN9ALU_Class13RunControllerEv+0x90>)
     776:	4655      	mov	r5, sl
     778:	e025      	b.n	7c6 <_ZN9ALU_Class13RunControllerEv+0x7a>
				   }else if(listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,4)){
     77a:	2304      	movs	r3, #4
     77c:	9300      	str	r3, [sp, #0]
     77e:	2303      	movs	r3, #3
     780:	f44f 7200 	mov.w	r2, #512	; 0x200
     784:	a902      	add	r1, sp, #8
     786:	4628      	mov	r0, r5
     788:	47b0      	blx	r6
     78a:	b9b0      	cbnz	r0, 7ba <_ZN9ALU_Class13RunControllerEv+0x6e>
						PrepareNewEvent(kALUEventSimpleResume);
     78c:	2200      	movs	r2, #0
     78e:	f240 1107 	movw	r1, #263	; 0x107
     792:	4620      	mov	r0, r4
     794:	47b8      	blx	r7
		   while (!arincTXTimeUP)
     796:	f894 3020 	ldrb.w	r3, [r4, #32]
     79a:	b973      	cbnz	r3, 7ba <_ZN9ALU_Class13RunControllerEv+0x6e>
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     79c:	2308      	movs	r3, #8
     79e:	9300      	str	r3, [sp, #0]
     7a0:	2302      	movs	r3, #2
     7a2:	f44f 7240 	mov.w	r2, #768	; 0x300
     7a6:	a902      	add	r1, sp, #8
     7a8:	4628      	mov	r0, r5
     7aa:	47b0      	blx	r6
     7ac:	2800      	cmp	r0, #0
     7ae:	d0e4      	beq.n	77a <_ZN9ALU_Class13RunControllerEv+0x2e>
					   HandleControllerEvent(e);
     7b0:	a902      	add	r1, sp, #8
     7b2:	4620      	mov	r0, r4
     7b4:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <_ZN9ALU_Class13RunControllerEv+0x94>)
     7b6:	4798      	blx	r3
     7b8:	e7ed      	b.n	796 <_ZN9ALU_Class13RunControllerEv+0x4a>
			ExecutePendingTask();
     7ba:	4620      	mov	r0, r4
     7bc:	4b09      	ldr	r3, [pc, #36]	; (7e4 <_ZN9ALU_Class13RunControllerEv+0x98>)
     7be:	4798      	blx	r3
			arincTXTimeUP=false;
     7c0:	2300      	movs	r3, #0
     7c2:	f884 3020 	strb.w	r3, [r4, #32]
	   while (pBit)
     7c6:	4648      	mov	r0, r9
     7c8:	47c0      	blx	r8
     7ca:	b120      	cbz	r0, 7d6 <_ZN9ALU_Class13RunControllerEv+0x8a>
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <_ZN9ALU_Class13RunControllerEv+0x9c>)
     7ce:	f8ca 3014 	str.w	r3, [sl, #20]
						PrepareNewEvent(kALUEventSimpleResume);
     7d2:	4f06      	ldr	r7, [pc, #24]	; (7ec <_ZN9ALU_Class13RunControllerEv+0xa0>)
     7d4:	e7df      	b.n	796 <_ZN9ALU_Class13RunControllerEv+0x4a>
}
     7d6:	b006      	add	sp, #24
     7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     7dc:	00010a05 	.word	0x00010a05
     7e0:	00000335 	.word	0x00000335
     7e4:	000006a1 	.word	0x000006a1
     7e8:	000002f1 	.word	0x000002f1
     7ec:	00000501 	.word	0x00000501
     7f0:	200007ac 	.word	0x200007ac
     7f4:	0000108d 	.word	0x0000108d
     7f8:	2000245c 	.word	0x2000245c

000007fc <_GLOBAL__sub_I_ptrALUClass>:
}




     7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     7fe:	4c0f      	ldr	r4, [pc, #60]	; (83c <_GLOBAL__sub_I_ptrALUClass+0x40>)
     800:	f504 75b8 	add.w	r5, r4, #368	; 0x170
     804:	4628      	mov	r0, r5
     806:	4b0e      	ldr	r3, [pc, #56]	; (840 <_GLOBAL__sub_I_ptrALUClass+0x44>)
     808:	4798      	blx	r3
     80a:	4e0e      	ldr	r6, [pc, #56]	; (844 <_GLOBAL__sub_I_ptrALUClass+0x48>)
     80c:	4632      	mov	r2, r6
     80e:	490e      	ldr	r1, [pc, #56]	; (848 <_GLOBAL__sub_I_ptrALUClass+0x4c>)
     810:	4628      	mov	r0, r5
     812:	4d0e      	ldr	r5, [pc, #56]	; (84c <_GLOBAL__sub_I_ptrALUClass+0x50>)
     814:	47a8      	blx	r5
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     816:	f504 77c2 	add.w	r7, r4, #388	; 0x184
     81a:	4638      	mov	r0, r7
     81c:	4b0c      	ldr	r3, [pc, #48]	; (850 <_GLOBAL__sub_I_ptrALUClass+0x54>)
     81e:	4798      	blx	r3
     820:	4632      	mov	r2, r6
     822:	490c      	ldr	r1, [pc, #48]	; (854 <_GLOBAL__sub_I_ptrALUClass+0x58>)
     824:	4638      	mov	r0, r7
     826:	47a8      	blx	r5
     828:	3404      	adds	r4, #4
     82a:	4620      	mov	r0, r4
     82c:	4b0a      	ldr	r3, [pc, #40]	; (858 <_GLOBAL__sub_I_ptrALUClass+0x5c>)
     82e:	4798      	blx	r3
     830:	4632      	mov	r2, r6
     832:	490a      	ldr	r1, [pc, #40]	; (85c <_GLOBAL__sub_I_ptrALUClass+0x60>)
     834:	4620      	mov	r0, r4
     836:	47a8      	blx	r5
     838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     83a:	bf00      	nop
     83c:	2000063c 	.word	0x2000063c
     840:	00001087 	.word	0x00001087
     844:	20000000 	.word	0x20000000
     848:	00001085 	.word	0x00001085
     84c:	000170d1 	.word	0x000170d1
     850:	00000863 	.word	0x00000863
     854:	00000861 	.word	0x00000861
     858:	0000030d 	.word	0x0000030d
     85c:	000002e1 	.word	0x000002e1

00000860 <_ZN10CBIT_ClassD1Ev>:
} //CBIT_Class

// default destructor
CBIT_Class::~CBIT_Class()
{
} //~CBIT_Class
     860:	4770      	bx	lr

00000862 <_ZN10CBIT_ClassC1Ev>:
	isOK=true;
     862:	2201      	movs	r2, #1
     864:	7002      	strb	r2, [r0, #0]
} //CBIT_Class
     866:	4770      	bx	lr

00000868 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
	return	isOK;
     868:	7800      	ldrb	r0, [r0, #0]
}
     86a:	4770      	bx	lr

0000086c <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
CBIT_Class::operator bool(){
	return	isOK;
}
     86c:	b508      	push	{r3, lr}
	isOK=true;
     86e:	4804      	ldr	r0, [pc, #16]	; (880 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x14>)
     870:	2301      	movs	r3, #1
     872:	7003      	strb	r3, [r0, #0]
     874:	4a03      	ldr	r2, [pc, #12]	; (884 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x18>)
     876:	4904      	ldr	r1, [pc, #16]	; (888 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x1c>)
     878:	4b04      	ldr	r3, [pc, #16]	; (88c <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x20>)
     87a:	4798      	blx	r3
     87c:	bd08      	pop	{r3, pc}
     87e:	bf00      	nop
     880:	200007c4 	.word	0x200007c4
     884:	20000000 	.word	0x20000000
     888:	00000861 	.word	0x00000861
     88c:	000170d1 	.word	0x000170d1

00000890 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
     890:	4a07      	ldr	r2, [pc, #28]	; (8b0 <_ZN17ConfigState_ClassC1Ev+0x20>)
     892:	6002      	str	r2, [r0, #0]
{
	defaultState.currentState = kHVACStateReset;
     894:	f240 122d 	movw	r2, #301	; 0x12d
     898:	6282      	str	r2, [r0, #40]	; 0x28
	defaultState.callingState = kHVACStateReset;
     89a:	62c2      	str	r2, [r0, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     89c:	2200      	movs	r2, #0
     89e:	6302      	str	r2, [r0, #48]	; 0x30
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     8a0:	6442      	str	r2, [r0, #68]	; 0x44
	defaultState.inStateTime = 0;
     8a2:	63c2      	str	r2, [r0, #60]	; 0x3c
	defaultState.remainingTime = 0;
     8a4:	6482      	str	r2, [r0, #72]	; 0x48
	defaultState.waitingExceededTime = 0;
     8a6:	6502      	str	r2, [r0, #80]	; 0x50
	defaultState.magic=0xCAFEBABE;
     8a8:	4a02      	ldr	r2, [pc, #8]	; (8b4 <_ZN17ConfigState_ClassC1Ev+0x24>)
     8aa:	6042      	str	r2, [r0, #4]
} //ConfigState_Class
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop
     8b0:	000195e0 	.word	0x000195e0
     8b4:	cafebabe 	.word	0xcafebabe

000008b8 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
{
} //~ConfigState_Class
     8b8:	4770      	bx	lr
	...

000008bc <_ZN17ConfigState_Class22UpdateStatusArincLabelEv>:
// 		}

		return r;
	};
	
uint32_t	ConfigState_Class::UpdateStatusArincLabel(void){
     8bc:	b410      	push	{r4}
	uint32_t s=0;
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
     8be:	4b11      	ldr	r3, [pc, #68]	; (904 <_ZN17ConfigState_Class22UpdateStatusArincLabelEv+0x48>)
     8c0:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
     8c4:	7f4a      	ldrb	r2, [r1, #29]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     8c6:	f002 0401 	and.w	r4, r2, #1
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
     8ca:	f3c2 0340 	ubfx	r3, r2, #1, #1
     8ce:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     8d0:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
     8d4:	7f0c      	ldrb	r4, [r1, #28]
     8d6:	4323      	orrs	r3, r4
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
     8d8:	f3c2 0280 	ubfx	r2, r2, #2, #1
     8dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
     8e0:	7f8a      	ldrb	r2, [r1, #30]
     8e2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
     8e6:	7fca      	ldrb	r2, [r1, #31]
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
     8e8:	f002 0201 	and.w	r2, r2, #1
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     8ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	lastAcknowledgeStatus=acknowledgeStatus;
     8f0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
     8f4:	f8c0 229c 	str.w	r2, [r0, #668]	; 0x29c
	acknowledgeStatus=s;
     8f8:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
	return s;
}	
     8fc:	4618      	mov	r0, r3
     8fe:	bc10      	pop	{r4}
     900:	4770      	bx	lr
     902:	bf00      	nop
     904:	20000918 	.word	0x20000918

00000908 <_ZN17ConfigState_Class20GetAcknowledgeStatusEv>:

uint32_t ConfigState_Class::GetAcknowledgeStatus(void){
	
	return acknowledgeStatus;
}
     908:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
     90c:	4770      	bx	lr
	...

00000910 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv>:
bool  ConfigState_Class::IsStatusArinclabelChanged(void){
     910:	b510      	push	{r4, lr}
     912:	4604      	mov	r4, r0
	UpdateStatusArincLabel();
     914:	4b04      	ldr	r3, [pc, #16]	; (928 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv+0x18>)
     916:	4798      	blx	r3
	return lastAcknowledgeStatus!=acknowledgeStatus;
     918:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
     91c:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
}
     920:	1ac0      	subs	r0, r0, r3
     922:	bf18      	it	ne
     924:	2001      	movne	r0, #1
     926:	bd10      	pop	{r4, pc}
     928:	000008bd 	.word	0x000008bd

0000092c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     92c:	e7fe      	b.n	92c <Dummy_Handler>
	...

00000930 <Reset_Handler>:
{
     930:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     932:	4b17      	ldr	r3, [pc, #92]	; (990 <Reset_Handler+0x60>)
     934:	4a17      	ldr	r2, [pc, #92]	; (994 <Reset_Handler+0x64>)
     936:	429a      	cmp	r2, r3
     938:	d010      	beq.n	95c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     93a:	4b17      	ldr	r3, [pc, #92]	; (998 <Reset_Handler+0x68>)
     93c:	4a14      	ldr	r2, [pc, #80]	; (990 <Reset_Handler+0x60>)
     93e:	429a      	cmp	r2, r3
     940:	d20c      	bcs.n	95c <Reset_Handler+0x2c>
     942:	3b01      	subs	r3, #1
     944:	1a9b      	subs	r3, r3, r2
     946:	f023 0303 	bic.w	r3, r3, #3
     94a:	3304      	adds	r3, #4
     94c:	4413      	add	r3, r2
     94e:	4911      	ldr	r1, [pc, #68]	; (994 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     950:	f851 0b04 	ldr.w	r0, [r1], #4
     954:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     958:	429a      	cmp	r2, r3
     95a:	d1f9      	bne.n	950 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     95c:	4b0f      	ldr	r3, [pc, #60]	; (99c <Reset_Handler+0x6c>)
     95e:	4a10      	ldr	r2, [pc, #64]	; (9a0 <Reset_Handler+0x70>)
     960:	429a      	cmp	r2, r3
     962:	d20a      	bcs.n	97a <Reset_Handler+0x4a>
     964:	3b01      	subs	r3, #1
     966:	1a9b      	subs	r3, r3, r2
     968:	f023 0303 	bic.w	r3, r3, #3
     96c:	3304      	adds	r3, #4
     96e:	4413      	add	r3, r2
                *pDest++ = 0;
     970:	2100      	movs	r1, #0
     972:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     976:	4293      	cmp	r3, r2
     978:	d1fb      	bne.n	972 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     97a:	4a0a      	ldr	r2, [pc, #40]	; (9a4 <Reset_Handler+0x74>)
     97c:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <Reset_Handler+0x78>)
     97e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     982:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     984:	4b09      	ldr	r3, [pc, #36]	; (9ac <Reset_Handler+0x7c>)
     986:	4798      	blx	r3
        main();
     988:	4b09      	ldr	r3, [pc, #36]	; (9b0 <Reset_Handler+0x80>)
     98a:	4798      	blx	r3
     98c:	e7fe      	b.n	98c <Reset_Handler+0x5c>
     98e:	bf00      	nop
     990:	20000000 	.word	0x20000000
     994:	0001aa34 	.word	0x0001aa34
     998:	2000061c 	.word	0x2000061c
     99c:	20009954 	.word	0x20009954
     9a0:	20000620 	.word	0x20000620
     9a4:	e000ed00 	.word	0xe000ed00
     9a8:	00000000 	.word	0x00000000
     9ac:	00019159 	.word	0x00019159
     9b0:	00000f05 	.word	0x00000f05

000009b4 <_ZN19HVAC_Commando_ClassC2Ev>:
#include "ARINC_Handler_Class.h"
#include "EventHandler_Class.h"
#include "States_Class.h"

// default constructor
HVAC_Commando_Class::HVAC_Commando_Class()
     9b4:	680a      	ldr	r2, [r1, #0]
     9b6:	6002      	str	r2, [r0, #0]
     9b8:	6849      	ldr	r1, [r1, #4]
     9ba:	f852 2c0c 	ldr.w	r2, [r2, #-12]
     9be:	5081      	str	r1, [r0, r2]
{
} //HVAC_Commando_Class
     9c0:	4770      	bx	lr

000009c2 <_ZN19HVAC_Commando_ClassD2Ev>:

// default destructor
HVAC_Commando_Class::~HVAC_Commando_Class()
     9c2:	680a      	ldr	r2, [r1, #0]
     9c4:	6002      	str	r2, [r0, #0]
     9c6:	6849      	ldr	r1, [r1, #4]
     9c8:	f852 2c0c 	ldr.w	r2, [r2, #-12]
     9cc:	5081      	str	r1, [r0, r2]
{
} //~HVAC_Commando_Class
     9ce:	4770      	bx	lr

000009d0 <_ZN19HVAC_Commando_Class14UpdateCommandoEv>:
	
	}
	return true;
}

uint32_t HVAC_Commando_Class::UpdateCommando(void){
     9d0:	b510      	push	{r4, lr}
     9d2:	4604      	mov	r4, r0
	lastCommando=actualCommando;
     9d4:	6883      	ldr	r3, [r0, #8]
     9d6:	60c3      	str	r3, [r0, #12]
	uint32_t value=arinc.ar->ReadBufferLabel((uint32_t)270);
     9d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
     9dc:	4b09      	ldr	r3, [pc, #36]	; (a04 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x34>)
     9de:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
     9e2:	4b09      	ldr	r3, [pc, #36]	; (a08 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x38>)
     9e4:	4798      	blx	r3
	commando270.AC_CMD=(bool)((value>>12)&0x01);
     9e6:	f3c0 3100 	ubfx	r1, r0, #12, #1
     9ea:	7962      	ldrb	r2, [r4, #5]
     9ec:	f361 0200 	bfi	r2, r1, #0, #1
     9f0:	7162      	strb	r2, [r4, #5]
	commando270.statusArinc=(StatusHVACARINC)((value>>10)&0x03);
     9f2:	f3c0 2281 	ubfx	r2, r0, #10, #2
     9f6:	7122      	strb	r2, [r4, #4]
	commando270.statusFV=(FlapperValveMode)((value>>15)&0x03);
     9f8:	f3c0 32c1 	ubfx	r2, r0, #15, #2
     9fc:	71a2      	strb	r2, [r4, #6]
	actualCommando=value;
     9fe:	60a0      	str	r0, [r4, #8]
	return actualCommando;
}
     a00:	bd10      	pop	{r4, pc}
     a02:	bf00      	nop
     a04:	20001920 	.word	0x20001920
     a08:	000101ad 	.word	0x000101ad

00000a0c <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv>:
bool HVAC_Commando_Class::IsCommando270Changed(void){
     a0c:	b510      	push	{r4, lr}
	if (lastCommando==UpdateCommando())
     a0e:	68c4      	ldr	r4, [r0, #12]
     a10:	4b02      	ldr	r3, [pc, #8]	; (a1c <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x10>)
     a12:	4798      	blx	r3
}
     a14:	1a20      	subs	r0, r4, r0
     a16:	bf18      	it	ne
     a18:	2001      	movne	r0, #1
     a1a:	bd10      	pop	{r4, pc}
     a1c:	000009d1 	.word	0x000009d1

00000a20 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv>:
uint32_t HVAC_Commando_Class::GetCommando270(void){
	return actualCommando;
}
float HVAC_Commando_Class::UpadateTemperatureSetpoint(void){
     a20:	b510      	push	{r4, lr}
     a22:	4604      	mov	r4, r0
	lastTemperatureSetpoint=temperatureSetpoint;
     a24:	6983      	ldr	r3, [r0, #24]
     a26:	6143      	str	r3, [r0, #20]
	uint32_t value=arinc.ar->ReadBufferLabel((uint32_t)204);
     a28:	21cc      	movs	r1, #204	; 0xcc
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x20>)
     a2c:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
     a30:	4b04      	ldr	r3, [pc, #16]	; (a44 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x24>)
     a32:	4798      	blx	r3
	uint16_t temp16=(uint16_t)((value>>12)&0xffff);
	temperatureSetpoint=temp16;
     a34:	f3c0 300f 	ubfx	r0, r0, #12, #16
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x28>)
     a3a:	4798      	blx	r3
     a3c:	61a0      	str	r0, [r4, #24]
	return temperatureSetpoint;
}
     a3e:	bd10      	pop	{r4, pc}
     a40:	20001920 	.word	0x20001920
     a44:	000101ad 	.word	0x000101ad
     a48:	00018ca9 	.word	0x00018ca9

00000a4c <_ZN19HVAC_Commando_Class14HandleCommandsEv>:
			
		}
		return true;
}

void	HVAC_Commando_Class::HandleCommands(void){
     a4c:	b510      	push	{r4, lr}
     a4e:	b084      	sub	sp, #16
     a50:	4604      	mov	r4, r0
	if (IsCommando270Changed())
     a52:	4b18      	ldr	r3, [pc, #96]	; (ab4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x68>)
     a54:	4798      	blx	r3
     a56:	b908      	cbnz	r0, a5c <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x10>
	//	arinc.ar->SaveStatus(actualCommando);
		
		

	}
     a58:	b004      	add	sp, #16
     a5a:	bd10      	pop	{r4, pc}
		hvac.OperateFlapperValve(commando270.statusFV);
     a5c:	79a1      	ldrb	r1, [r4, #6]
     a5e:	4816      	ldr	r0, [pc, #88]	; (ab8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x6c>)
     a60:	4b16      	ldr	r3, [pc, #88]	; (abc <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x70>)
     a62:	4798      	blx	r3
		switch(commando270.statusArinc)
     a64:	7923      	ldrb	r3, [r4, #4]
     a66:	2b01      	cmp	r3, #1
     a68:	d00d      	beq.n	a86 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x3a>
     a6a:	b1bb      	cbz	r3, a9c <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x50>
     a6c:	2b02      	cmp	r3, #2
     a6e:	d1f3      	bne.n	a58 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc>
	integerData = v;
     a70:	ab04      	add	r3, sp, #16
     a72:	2200      	movs	r2, #0
     a74:	f843 2d0c 	str.w	r2, [r3, #-12]!
				listener.SendEventSelf(kInterfaceEventClass,k_AC_AUTO_Event);
     a78:	2206      	movs	r2, #6
     a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     a7e:	4810      	ldr	r0, [pc, #64]	; (ac0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x74>)
     a80:	4c10      	ldr	r4, [pc, #64]	; (ac4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x78>)
     a82:	47a0      	blx	r4
			break;
     a84:	e7e8      	b.n	a58 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc>
     a86:	ab04      	add	r3, sp, #16
     a88:	2200      	movs	r2, #0
     a8a:	f843 2d08 	str.w	r2, [r3, #-8]!
				listener.SendEventSelf(kInterfaceEventClass,k_AC_VENT_Event);
     a8e:	2207      	movs	r2, #7
     a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
     a94:	480a      	ldr	r0, [pc, #40]	; (ac0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x74>)
     a96:	4c0b      	ldr	r4, [pc, #44]	; (ac4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x78>)
     a98:	47a0      	blx	r4
			break;
     a9a:	e7dd      	b.n	a58 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc>
     a9c:	ab04      	add	r3, sp, #16
     a9e:	2200      	movs	r2, #0
     aa0:	f843 2d04 	str.w	r2, [r3, #-4]!
				listener.SendEventSelf(kInterfaceEventClass,k_AC_OFF_Event);
     aa4:	2209      	movs	r2, #9
     aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
     aaa:	4805      	ldr	r0, [pc, #20]	; (ac0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x74>)
     aac:	4c05      	ldr	r4, [pc, #20]	; (ac4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x78>)
     aae:	47a0      	blx	r4
     ab0:	e7d2      	b.n	a58 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc>
     ab2:	bf00      	nop
     ab4:	00000a0d 	.word	0x00000a0d
     ab8:	20000918 	.word	0x20000918
     abc:	00000c0d 	.word	0x00000c0d
     ac0:	2000245c 	.word	0x2000245c
     ac4:	00010c85 	.word	0x00010c85

00000ac8 <_ZL22HeaterTemperingTimeoutPK10timer_task>:
#include "States_Class.h"
#include "Timer_Class.h"

static bool staticTemperingTimeout=true;
static void  HeaterTemperingTimeout(const struct timer_task *const timer_task){
	hvac.temperingTimeout=true;
     ac8:	2301      	movs	r3, #1
     aca:	4a03      	ldr	r2, [pc, #12]	; (ad8 <_ZL22HeaterTemperingTimeoutPK10timer_task+0x10>)
     acc:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
	staticTemperingTimeout=true;
     ad0:	4a02      	ldr	r2, [pc, #8]	; (adc <_ZL22HeaterTemperingTimeoutPK10timer_task+0x14>)
     ad2:	7013      	strb	r3, [r2, #0]
     ad4:	4770      	bx	lr
     ad6:	bf00      	nop
     ad8:	20000918 	.word	0x20000918
     adc:	20000004 	.word	0x20000004

00000ae0 <_ZN15HVAC_Controller15SetHeaterDriverEh>:
// default destructor
HVAC_Controller::~HVAC_Controller()
{
} //~HVAC_Controller

uint8_t HVAC_Controller::SetHeaterDriver(uint8_t heatPower){
     ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ae4:	4604      	mov	r4, r0
     ae6:	460d      	mov	r5, r1
	if (staticTemperingTimeout)
     ae8:	4b16      	ldr	r3, [pc, #88]	; (b44 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x64>)
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	b92b      	cbnz	r3, afa <_ZN15HVAC_Controller15SetHeaterDriverEh+0x1a>
			{
			}
	} 
	else
	{
		temperingTimeout=staticTemperingTimeout;
     aee:	2300      	movs	r3, #0
     af0:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	}

	return heatPower;
}
     af4:	4628      	mov	r0, r5
     af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (AdjustFanSpeed(heatPower))
     afa:	6803      	ldr	r3, [r0, #0]
     afc:	685b      	ldr	r3, [r3, #4]
     afe:	4798      	blx	r3
     b00:	2800      	cmp	r0, #0
     b02:	d0f7      	beq.n	af4 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x14>
				timeoutValueTempering=automaticHeatingMode?10000:5000;
     b04:	7921      	ldrb	r1, [r4, #4]
     b06:	f241 3388 	movw	r3, #5000	; 0x1388
     b0a:	f242 7210 	movw	r2, #10000	; 0x2710
     b0e:	2900      	cmp	r1, #0
     b10:	bf08      	it	eq
     b12:	461a      	moveq	r2, r3
     b14:	6422      	str	r2, [r4, #64]	; 0x40
				staticTemperingTimeout=false;
     b16:	2400      	movs	r4, #0
     b18:	4b0a      	ldr	r3, [pc, #40]	; (b44 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x64>)
     b1a:	701c      	strb	r4, [r3, #0]
				hvacTimer.Start_oneShot_task(FUNC_PTR(HeaterTemperingTimeout),timeoutValueTempering);
     b1c:	490a      	ldr	r1, [pc, #40]	; (b48 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x68>)
     b1e:	480b      	ldr	r0, [pc, #44]	; (b4c <_ZN15HVAC_Controller15SetHeaterDriverEh+0x6c>)
     b20:	4b0b      	ldr	r3, [pc, #44]	; (b50 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x70>)
     b22:	4798      	blx	r3
						heater.DisableIndex(i);
     b24:	4e0b      	ldr	r6, [pc, #44]	; (b54 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x74>)
     b26:	f8df 8034 	ldr.w	r8, [pc, #52]	; b5c <_ZN15HVAC_Controller15SetHeaterDriverEh+0x7c>
						heater.EnableIndex(i);
     b2a:	4f0b      	ldr	r7, [pc, #44]	; (b58 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x78>)
     b2c:	e004      	b.n	b38 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x58>
						heater.DisableIndex(i);
     b2e:	4630      	mov	r0, r6
     b30:	47c0      	blx	r8
     b32:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     b34:	2c04      	cmp	r4, #4
     b36:	d0dd      	beq.n	af4 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x14>
     b38:	b2e1      	uxtb	r1, r4
					if (i<heatPower)
     b3a:	42a5      	cmp	r5, r4
     b3c:	ddf7      	ble.n	b2e <_ZN15HVAC_Controller15SetHeaterDriverEh+0x4e>
						heater.EnableIndex(i);
     b3e:	4630      	mov	r0, r6
     b40:	47b8      	blx	r7
     b42:	e7f6      	b.n	b32 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x52>
     b44:	20000004 	.word	0x20000004
     b48:	00000ac9 	.word	0x00000ac9
     b4c:	20002708 	.word	0x20002708
     b50:	0001150d 	.word	0x0001150d
     b54:	20002c5c 	.word	0x20002c5c
     b58:	0001438d 	.word	0x0001438d
     b5c:	000143fd 	.word	0x000143fd

00000b60 <_ZThn32_N15HVAC_Controller15SetHeaterDriverEh>:
	uint32_t timeoutValueTempering;
//functions
public:
	HVAC_Controller();
	~HVAC_Controller();
		 uint8_t SetHeaterDriver(uint8_t);
     b60:	f1a0 0020 	sub.w	r0, r0, #32
     b64:	f7ff bfbc 	b.w	ae0 <_ZN15HVAC_Controller15SetHeaterDriverEh>

00000b68 <_ZN15HVAC_Controller14AdjustFanSpeedEh>:

bool	HVAC_Controller::AdjustFanSpeed(uint8_t heatPower){
     b68:	b510      	push	{r4, lr}
	if (heatPower>0)
     b6a:	b179      	cbz	r1, b8c <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x24>
	{
		//	fans.evaporator[0]->SetPWM(heatersPower*64-1);
		fans.condesator->SetPWM(heatPower*64-1);
     b6c:	0189      	lsls	r1, r1, #6
     b6e:	3901      	subs	r1, #1
     b70:	b2c9      	uxtb	r1, r1
     b72:	4b09      	ldr	r3, [pc, #36]	; (b98 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x30>)
     b74:	6e58      	ldr	r0, [r3, #100]	; 0x64
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x34>)
     b78:	4798      	blx	r3
	{
		//fans.evaporator[0]->SetPWM(MINIMUN_FLOW_AIR);
		fans.condesator->SetPWM(MINIMUN_FLOW_AIR);
	}
	//fans.evaporator[0]->ReadStatus();
	fans.condesator->ReadStatus();
     b7a:	4c07      	ldr	r4, [pc, #28]	; (b98 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x30>)
     b7c:	6e60      	ldr	r0, [r4, #100]	; 0x64
     b7e:	4b08      	ldr	r3, [pc, #32]	; (ba0 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x38>)
     b80:	4798      	blx	r3
	//return fans.evaporator[0]->evaporatorFansStatus.inputs->iAlcEvaFanPwmFault;
	return fans.condesator->condesatorStatus.niAlcCdsFanExtFault;
     b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
     b84:	78d8      	ldrb	r0, [r3, #3]
}
     b86:	f3c0 0080 	ubfx	r0, r0, #2, #1
     b8a:	bd10      	pop	{r4, pc}
		fans.condesator->SetPWM(MINIMUN_FLOW_AIR);
     b8c:	2120      	movs	r1, #32
     b8e:	4b02      	ldr	r3, [pc, #8]	; (b98 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x30>)
     b90:	6e58      	ldr	r0, [r3, #100]	; 0x64
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x34>)
     b94:	4798      	blx	r3
     b96:	e7f0      	b.n	b7a <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x12>
     b98:	200029b8 	.word	0x200029b8
     b9c:	00012531 	.word	0x00012531
     ba0:	000124d1 	.word	0x000124d1

00000ba4 <_ZThn32_N15HVAC_Controller14AdjustFanSpeedEh>:
		 bool	AdjustFanSpeed(uint8_t);
     ba4:	f1a0 0020 	sub.w	r0, r0, #32
     ba8:	f7ff bfde 	b.w	b68 <_ZN15HVAC_Controller14AdjustFanSpeedEh>

00000bac <_ZN15HVAC_ControllerC1Ev>:
HVAC_Controller::HVAC_Controller()
     bac:	b510      	push	{r4, lr}
     bae:	4604      	mov	r4, r0
     bb0:	4b08      	ldr	r3, [pc, #32]	; (bd4 <_ZN15HVAC_ControllerC1Ev+0x28>)
     bb2:	4798      	blx	r3
     bb4:	f104 0020 	add.w	r0, r4, #32
     bb8:	4b07      	ldr	r3, [pc, #28]	; (bd8 <_ZN15HVAC_ControllerC1Ev+0x2c>)
     bba:	4798      	blx	r3
     bbc:	4b07      	ldr	r3, [pc, #28]	; (bdc <_ZN15HVAC_ControllerC1Ev+0x30>)
     bbe:	f103 0208 	add.w	r2, r3, #8
     bc2:	6022      	str	r2, [r4, #0]
     bc4:	3318      	adds	r3, #24
     bc6:	6223      	str	r3, [r4, #32]
	temperingTimeout=true;
     bc8:	2301      	movs	r3, #1
     bca:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
} //HVAC_Controller
     bce:	4620      	mov	r0, r4
     bd0:	bd10      	pop	{r4, pc}
     bd2:	bf00      	nop
     bd4:	00002209 	.word	0x00002209
     bd8:	00002381 	.word	0x00002381
     bdc:	000195e4 	.word	0x000195e4

00000be0 <_ZN15HVAC_ControllerD1Ev>:
HVAC_Controller::~HVAC_Controller()
     be0:	b510      	push	{r4, lr}
     be2:	4604      	mov	r4, r0
     be4:	4b06      	ldr	r3, [pc, #24]	; (c00 <_ZN15HVAC_ControllerD1Ev+0x20>)
     be6:	f103 0208 	add.w	r2, r3, #8
     bea:	6002      	str	r2, [r0, #0]
     bec:	3318      	adds	r3, #24
     bee:	f840 3f20 	str.w	r3, [r0, #32]!
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <_ZN15HVAC_ControllerD1Ev+0x24>)
     bf4:	4798      	blx	r3
     bf6:	4620      	mov	r0, r4
     bf8:	4b03      	ldr	r3, [pc, #12]	; (c08 <_ZN15HVAC_ControllerD1Ev+0x28>)
     bfa:	4798      	blx	r3
} //~HVAC_Controller
     bfc:	4620      	mov	r0, r4
     bfe:	bd10      	pop	{r4, pc}
     c00:	000195e4 	.word	0x000195e4
     c04:	00002391 	.word	0x00002391
     c08:	00002219 	.word	0x00002219

00000c0c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode>:

uint8_t	HVAC_Controller::OperateFlapperValve(FlapperValveMode fvm){
     c0c:	b510      	push	{r4, lr}
     c0e:	4604      	mov	r4, r0
	
	if (lastFlapperValveMode!=fvm)
     c10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
     c14:	428b      	cmp	r3, r1
     c16:	d033      	beq.n	c80 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x74>
	{
		lastFlapperValveMode=flapperValveMode;
     c18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
     c1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		flapperValveMode=fvm;
     c20:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
		if (fvc.IsNBCMode())
     c24:	481d      	ldr	r0, [pc, #116]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c26:	4b1e      	ldr	r3, [pc, #120]	; (ca0 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x94>)
     c28:	4798      	blx	r3
     c2a:	b140      	cbz	r0, c3e <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x32>
		{
			if (flapperValveMode==NBC_MODE)
     c2c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
     c30:	2b03      	cmp	r3, #3
     c32:	d02a      	beq.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
			{
			} 
			else
			{
				fvc.SetRemoteNBCMode(false);
     c34:	2100      	movs	r1, #0
     c36:	4819      	ldr	r0, [pc, #100]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c38:	4b1a      	ldr	r3, [pc, #104]	; (ca4 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x98>)
     c3a:	4798      	blx	r3
     c3c:	e025      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
			}
		} 
		else
		{
			switch (flapperValveMode)
     c3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
     c42:	2b03      	cmp	r3, #3
     c44:	d817      	bhi.n	c76 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x6a>
     c46:	e8df f003 	tbb	[pc, r3]
     c4a:	0702      	.short	0x0702
     c4c:	110c      	.short	0x110c
			{
				case FRESHAIR_MODE:
				fvc.StartControlling(0);
     c4e:	2100      	movs	r1, #0
     c50:	4812      	ldr	r0, [pc, #72]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c52:	4b15      	ldr	r3, [pc, #84]	; (ca8 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x9c>)
     c54:	4798      	blx	r3
				
				break;
     c56:	e018      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
				case INTERM_MODE:
				fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR/2);
     c58:	216d      	movs	r1, #109	; 0x6d
     c5a:	4810      	ldr	r0, [pc, #64]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c5c:	4b12      	ldr	r3, [pc, #72]	; (ca8 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x9c>)
     c5e:	4798      	blx	r3
				break;
     c60:	e013      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
				case RECYCLE_MODE:
				fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR);
     c62:	21da      	movs	r1, #218	; 0xda
     c64:	480d      	ldr	r0, [pc, #52]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c66:	4b10      	ldr	r3, [pc, #64]	; (ca8 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x9c>)
     c68:	4798      	blx	r3
				break;
     c6a:	e00e      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
				case NBC_MODE:
				fvc.SetRemoteNBCMode(true);
     c6c:	2101      	movs	r1, #1
     c6e:	480b      	ldr	r0, [pc, #44]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x98>)
     c72:	4798      	blx	r3
				break;
     c74:	e009      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
				default:
				fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR);
     c76:	21da      	movs	r1, #218	; 0xda
     c78:	4808      	ldr	r0, [pc, #32]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c7a:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x9c>)
     c7c:	4798      	blx	r3
				break;
     c7e:	e004      	b.n	c8a <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x7e>
			}
		}
		
		
	}else{
		flapperValveAngle=fvc.GetCurrentPosition();
     c80:	4806      	ldr	r0, [pc, #24]	; (c9c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0xa0>)
     c84:	4798      	blx	r3
     c86:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	}
	hvac.hvacState->arincStatus.statusFV=flapperValveMode;
     c8a:	4b09      	ldr	r3, [pc, #36]	; (cb0 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0xa4>)
     c8c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
     c90:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     c94:	779a      	strb	r2, [r3, #30]
	return flapperValveAngle;
     c96:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
     c9a:	bd10      	pop	{r4, pc}
     c9c:	20002ac0 	.word	0x20002ac0
     ca0:	0001346d 	.word	0x0001346d
     ca4:	000134b5 	.word	0x000134b5
     ca8:	000136d5 	.word	0x000136d5
     cac:	0001398d 	.word	0x0001398d
     cb0:	20000918 	.word	0x20000918

00000cb4 <_ZN16Interfaces_ClassD1Ev>:
} //Interfaces_Class

// default destructor
Interfaces_Class::~Interfaces_Class()
{
} //~Interfaces_Class
     cb4:	4770      	bx	lr

00000cb6 <_ZN16Interfaces_ClassC1Ev>:
	isOK=false;
     cb6:	2200      	movs	r2, #0
     cb8:	7002      	strb	r2, [r0, #0]
} //Interfaces_Class
     cba:	4770      	bx	lr

00000cbc <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
     cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cbe:	4606      	mov	r6, r0
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     cc4:	4b16      	ldr	r3, [pc, #88]	; (d20 <_ZN16Interfaces_Class4InitEv+0x64>)
     cc6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	gpio_set_pin_level(LED0,true);
	size=sizeof(CommunicationRequest);
     cca:	2305      	movs	r3, #5
     ccc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
	while (!arinc.Init_ARINC())
     cd0:	4d14      	ldr	r5, [pc, #80]	; (d24 <_ZN16Interfaces_Class4InitEv+0x68>)
     cd2:	4c15      	ldr	r4, [pc, #84]	; (d28 <_ZN16Interfaces_Class4InitEv+0x6c>)
	{
		delay_ms(200);
     cd4:	4f15      	ldr	r7, [pc, #84]	; (d2c <_ZN16Interfaces_Class4InitEv+0x70>)
	while (!arinc.Init_ARINC())
     cd6:	4628      	mov	r0, r5
     cd8:	47a0      	blx	r4
     cda:	b938      	cbnz	r0, cec <_ZN16Interfaces_Class4InitEv+0x30>
		delay_ms(200);
     cdc:	20c8      	movs	r0, #200	; 0xc8
     cde:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     ce4:	4b0e      	ldr	r3, [pc, #56]	; (d20 <_ZN16Interfaces_Class4InitEv+0x64>)
     ce6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     cea:	e7f4      	b.n	cd6 <_ZN16Interfaces_Class4InitEv+0x1a>
		gpio_toggle_pin_level(LED0);
	}
	
	while (!toolApp.Init())
     cec:	4d10      	ldr	r5, [pc, #64]	; (d30 <_ZN16Interfaces_Class4InitEv+0x74>)
     cee:	4c11      	ldr	r4, [pc, #68]	; (d34 <_ZN16Interfaces_Class4InitEv+0x78>)
	{
		delay_ms(200);
     cf0:	4f0e      	ldr	r7, [pc, #56]	; (d2c <_ZN16Interfaces_Class4InitEv+0x70>)
	while (!toolApp.Init())
     cf2:	4628      	mov	r0, r5
     cf4:	47a0      	blx	r4
     cf6:	b938      	cbnz	r0, d08 <_ZN16Interfaces_Class4InitEv+0x4c>
		delay_ms(200);
     cf8:	20c8      	movs	r0, #200	; 0xc8
     cfa:	47b8      	blx	r7
     cfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <_ZN16Interfaces_Class4InitEv+0x64>)
     d02:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d06:	e7f4      	b.n	cf2 <_ZN16Interfaces_Class4InitEv+0x36>
		gpio_toggle_pin_level(LED0);
	}
	isOK=arinc.isOK;
     d08:	4b06      	ldr	r3, [pc, #24]	; (d24 <_ZN16Interfaces_Class4InitEv+0x68>)
     d0a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
     d0e:	b2db      	uxtb	r3, r3
     d10:	7033      	strb	r3, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d16:	4b02      	ldr	r3, [pc, #8]	; (d20 <_ZN16Interfaces_Class4InitEv+0x64>)
     d18:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	else
	{
		//alu.NotifyError(kARINCINnterfaceError,result);
	}
	gpio_set_pin_level(LED0,true);
	return isOK;
     d1c:	7830      	ldrb	r0, [r6, #0]
}
     d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d20:	41008000 	.word	0x41008000
     d24:	20001920 	.word	0x20001920
     d28:	0000fd5d 	.word	0x0000fd5d
     d2c:	00003ed5 	.word	0x00003ed5
     d30:	20002cc4 	.word	0x20002cc4
     d34:	00014965 	.word	0x00014965

00000d38 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
//	request.internRequest.flapperValvesMessage=CheckFlapperValveInterface(1);
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
	return	0;
}
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
     d38:	b508      	push	{r3, lr}
	uint32_t	r=0;


	if (arinc.ar->newMessageR1)
     d3a:	4b14      	ldr	r3, [pc, #80]	; (d8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x54>)
     d3c:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     d40:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
     d44:	b95b      	cbnz	r3, d5e <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x26>
	{
		request.externRequest.arinc1GotMessage=true;
		alu.PrepareNewTask(kALUTaskReadARINCR1);
	}
	if (arinc.ar->newMessageR2)
     d46:	4b11      	ldr	r3, [pc, #68]	; (d8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x54>)
     d48:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     d4c:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
     d50:	b973      	cbnz	r3, d70 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x38>
	{
		request.externRequest.arinc2GotMessage=true;
		alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	if (toolApp.IsAppConnected())
     d52:	480f      	ldr	r0, [pc, #60]	; (d90 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x58>)
     d54:	4b0f      	ldr	r3, [pc, #60]	; (d94 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x5c>)
     d56:	4798      	blx	r3
     d58:	b998      	cbnz	r0, d82 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x4a>
		
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
}
     d5a:	2000      	movs	r0, #0
     d5c:	bd08      	pop	{r3, pc}
		request.externRequest.arinc1GotMessage=true;
     d5e:	2201      	movs	r2, #1
     d60:	4b0d      	ldr	r3, [pc, #52]	; (d98 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
     d62:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
     d64:	2200      	movs	r2, #0
     d66:	2104      	movs	r1, #4
     d68:	480c      	ldr	r0, [pc, #48]	; (d9c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
     d6a:	4b0d      	ldr	r3, [pc, #52]	; (da0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
     d6c:	4798      	blx	r3
     d6e:	e7ea      	b.n	d46 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0xe>
		request.externRequest.arinc2GotMessage=true;
     d70:	2201      	movs	r2, #1
     d72:	4b09      	ldr	r3, [pc, #36]	; (d98 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
     d74:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
     d76:	2200      	movs	r2, #0
     d78:	2105      	movs	r1, #5
     d7a:	4808      	ldr	r0, [pc, #32]	; (d9c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
     d7c:	4b08      	ldr	r3, [pc, #32]	; (da0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
     d7e:	4798      	blx	r3
     d80:	e7e7      	b.n	d52 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x1a>
		toolApp.handleCommunication();
     d82:	4803      	ldr	r0, [pc, #12]	; (d90 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x58>)
     d84:	4b07      	ldr	r3, [pc, #28]	; (da4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
     d86:	4798      	blx	r3
     d88:	e7e7      	b.n	d5a <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x22>
     d8a:	bf00      	nop
     d8c:	20001920 	.word	0x20001920
     d90:	20002cc4 	.word	0x20002cc4
     d94:	000146f1 	.word	0x000146f1
     d98:	200007c8 	.word	0x200007c8
     d9c:	20000640 	.word	0x20000640
     da0:	000004e9 	.word	0x000004e9
     da4:	00014d79 	.word	0x00014d79

00000da8 <_ZN16Interfaces_Class17CheckTemperaturesEv>:
						
		}
		return	usb.rxReady;
}

bool	Interfaces_Class::CheckTemperatures(void){
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	4606      	mov	r6, r0
	bool result(false);
	if (temperatures.IsConversionFinished())
     dac:	4812      	ldr	r0, [pc, #72]	; (df8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x50>)
     dae:	4b13      	ldr	r3, [pc, #76]	; (dfc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x54>)
     db0:	4798      	blx	r3
     db2:	4604      	mov	r4, r0
     db4:	b908      	cbnz	r0, dba <_ZN16Interfaces_Class17CheckTemperaturesEv+0x12>
	} 
	else
	{
	}
	return	result;
}
     db6:	4620      	mov	r0, r4
     db8:	bd70      	pop	{r4, r5, r6, pc}
		temperatures.GetConversionResult();
     dba:	4d0f      	ldr	r5, [pc, #60]	; (df8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x50>)
     dbc:	4628      	mov	r0, r5
     dbe:	4b10      	ldr	r3, [pc, #64]	; (e00 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x58>)
     dc0:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
     dc2:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
     dc6:	2b01      	cmp	r3, #1
     dc8:	d005      	beq.n	dd6 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x2e>
	bool result(false);
     dca:	2400      	movs	r4, #0
			temperatures.StartOneConversion();
     dcc:	480a      	ldr	r0, [pc, #40]	; (df8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x50>)
     dce:	4b0d      	ldr	r3, [pc, #52]	; (e04 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5c>)
     dd0:	4798      	blx	r3
			asm("nop");
     dd2:	bf00      	nop
     dd4:	e7ef      	b.n	db6 <_ZN16Interfaces_Class17CheckTemperaturesEv+0xe>
			if (lastTemperature!=temperatures.values[0][1])
     dd6:	6f2d      	ldr	r5, [r5, #112]	; 0x70
     dd8:	4629      	mov	r1, r5
     dda:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
     dde:	4b0a      	ldr	r3, [pc, #40]	; (e08 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x60>)
     de0:	4798      	blx	r3
     de2:	b108      	cbz	r0, de8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x40>
	bool result(false);
     de4:	2400      	movs	r4, #0
     de6:	e7f1      	b.n	dcc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x24>
				lastTemperature=temperatures.values[0][1];
     de8:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
     dec:	2200      	movs	r2, #0
     dee:	210a      	movs	r1, #10
     df0:	4806      	ldr	r0, [pc, #24]	; (e0c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
     df2:	4b07      	ldr	r3, [pc, #28]	; (e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
     df4:	4798      	blx	r3
     df6:	e7e9      	b.n	dcc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x24>
     df8:	200091dc 	.word	0x200091dc
     dfc:	00015561 	.word	0x00015561
     e00:	000154cd 	.word	0x000154cd
     e04:	00015485 	.word	0x00015485
     e08:	00019081 	.word	0x00019081
     e0c:	20000640 	.word	0x20000640
     e10:	000004e9 	.word	0x000004e9

00000e14 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:
{
     e14:	b508      	push	{r3, lr}
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
     e16:	4b03      	ldr	r3, [pc, #12]	; (e24 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x10>)
     e18:	4798      	blx	r3
     e1a:	4b03      	ldr	r3, [pc, #12]	; (e28 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x14>)
     e1c:	7018      	strb	r0, [r3, #0]
}
     e1e:	2000      	movs	r0, #0
     e20:	bd08      	pop	{r3, pc}
     e22:	bf00      	nop
     e24:	00000da9 	.word	0x00000da9
     e28:	200007c8 	.word	0x200007c8

00000e2c <_ZN16Interfaces_Class18CheckCommunicationEv>:
{
     e2c:	b538      	push	{r3, r4, r5, lr}
     e2e:	4604      	mov	r4, r0
     e30:	460d      	mov	r5, r1
	CheckInternalCommunication();
     e32:	4608      	mov	r0, r1
     e34:	4b05      	ldr	r3, [pc, #20]	; (e4c <_ZN16Interfaces_Class18CheckCommunicationEv+0x20>)
     e36:	4798      	blx	r3
	CheckExternalCommunication();
     e38:	4628      	mov	r0, r5
     e3a:	4b05      	ldr	r3, [pc, #20]	; (e50 <_ZN16Interfaces_Class18CheckCommunicationEv+0x24>)
     e3c:	4798      	blx	r3
	r=request;
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <_ZN16Interfaces_Class18CheckCommunicationEv+0x28>)
     e40:	6818      	ldr	r0, [r3, #0]
     e42:	6020      	str	r0, [r4, #0]
     e44:	791b      	ldrb	r3, [r3, #4]
     e46:	7123      	strb	r3, [r4, #4]
}
     e48:	4620      	mov	r0, r4
     e4a:	bd38      	pop	{r3, r4, r5, pc}
     e4c:	00000e15 	.word	0x00000e15
     e50:	00000d39 	.word	0x00000d39
     e54:	200007c8 	.word	0x200007c8

00000e58 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:
bool	Interfaces_Class::IsCommunicationRequest(void){
     e58:	b510      	push	{r4, lr}
     e5a:	b084      	sub	sp, #16
     e5c:	4604      	mov	r4, r0
	CommunicationRequest r=CheckCommunication();
     e5e:	4601      	mov	r1, r0
     e60:	4668      	mov	r0, sp
     e62:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x48>)
     e64:	4798      	blx	r3
	memcpy((void*)arr,(void*)&r,size);
     e66:	f894 407c 	ldrb.w	r4, [r4, #124]	; 0x7c
     e6a:	4622      	mov	r2, r4
     e6c:	4669      	mov	r1, sp
     e6e:	a802      	add	r0, sp, #8
     e70:	4b0c      	ldr	r3, [pc, #48]	; (ea4 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x4c>)
     e72:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
     e74:	b194      	cbz	r4, e9c <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x44>
     e76:	4621      	mov	r1, r4
     e78:	2200      	movs	r2, #0
     e7a:	4613      	mov	r3, r2
     e7c:	4610      	mov	r0, r2
		result|=arr[ii];
     e7e:	ac04      	add	r4, sp, #16
     e80:	4422      	add	r2, r4
     e82:	f812 2c08 	ldrb.w	r2, [r2, #-8]
     e86:	4310      	orrs	r0, r2
	for (uint8_t ii = 0; ii < size; ii++)
     e88:	3301      	adds	r3, #1
     e8a:	b2db      	uxtb	r3, r3
     e8c:	461a      	mov	r2, r3
     e8e:	428b      	cmp	r3, r1
     e90:	dbf5      	blt.n	e7e <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x26>
}
     e92:	3000      	adds	r0, #0
     e94:	bf18      	it	ne
     e96:	2001      	movne	r0, #1
     e98:	b004      	add	sp, #16
     e9a:	bd10      	pop	{r4, pc}
	uint8_t result=0;
     e9c:	2000      	movs	r0, #0
     e9e:	e7f8      	b.n	e92 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x3a>
     ea0:	00000e2d 	.word	0x00000e2d
     ea4:	000191a9 	.word	0x000191a9

00000ea8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
		s.rawStatus+=(*p)&(0x01<<i);
		p++;
	}
	return	status.rawStatus;
}
Interfaces_Class	interfaces;
     ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eaa:	4c0e      	ldr	r4, [pc, #56]	; (ee4 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x3c>)
     eac:	f104 0508 	add.w	r5, r4, #8
     eb0:	4628      	mov	r0, r5
     eb2:	4b0d      	ldr	r3, [pc, #52]	; (ee8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x40>)
     eb4:	4798      	blx	r3
     eb6:	4e0d      	ldr	r6, [pc, #52]	; (eec <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x44>)
     eb8:	4632      	mov	r2, r6
     eba:	490d      	ldr	r1, [pc, #52]	; (ef0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x48>)
     ebc:	4628      	mov	r0, r5
     ebe:	4d0d      	ldr	r5, [pc, #52]	; (ef4 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x4c>)
     ec0:	47a8      	blx	r5
     ec2:	f104 071c 	add.w	r7, r4, #28
     ec6:	4638      	mov	r0, r7
     ec8:	4b0b      	ldr	r3, [pc, #44]	; (ef8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x50>)
     eca:	4798      	blx	r3
     ecc:	4632      	mov	r2, r6
     ece:	490b      	ldr	r1, [pc, #44]	; (efc <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x54>)
     ed0:	4638      	mov	r0, r7
     ed2:	47a8      	blx	r5
	isOK=false;
     ed4:	4620      	mov	r0, r4
     ed6:	2300      	movs	r3, #0
     ed8:	f800 3f20 	strb.w	r3, [r0, #32]!
Interfaces_Class	interfaces;
     edc:	4632      	mov	r2, r6
     ede:	4908      	ldr	r1, [pc, #32]	; (f00 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x58>)
     ee0:	47a8      	blx	r5
     ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ee4:	200007c8 	.word	0x200007c8
     ee8:	00001087 	.word	0x00001087
     eec:	20000000 	.word	0x20000000
     ef0:	00001085 	.word	0x00001085
     ef4:	000170d1 	.word	0x000170d1
     ef8:	00000863 	.word	0x00000863
     efc:	00000861 	.word	0x00000861
     f00:	00000cb5 	.word	0x00000cb5

00000f04 <main>:

#include "main.h"


int main(void)
{
     f04:	b580      	push	{r7, lr}
    /* Replace with your application code */
	atmel_start_init();
     f06:	4b34      	ldr	r3, [pc, #208]	; (fd8 <main+0xd4>)
     f08:	4798      	blx	r3
	//  	uint32_t p=pwm_enable(&LIVE_PULSE);
	//  	while (1);

	usb.Init();
     f0a:	4c34      	ldr	r4, [pc, #208]	; (fdc <main+0xd8>)
     f0c:	4620      	mov	r0, r4
     f0e:	4b34      	ldr	r3, [pc, #208]	; (fe0 <main+0xdc>)
     f10:	4798      	blx	r3
	delay_ms(100);
     f12:	2064      	movs	r0, #100	; 0x64
     f14:	4b33      	ldr	r3, [pc, #204]	; (fe4 <main+0xe0>)
     f16:	4798      	blx	r3
     f18:	4e33      	ldr	r6, [pc, #204]	; (fe8 <main+0xe4>)
     f1a:	4631      	mov	r1, r6
     f1c:	4620      	mov	r0, r4
     f1e:	4d33      	ldr	r5, [pc, #204]	; (fec <main+0xe8>)
     f20:	47a8      	blx	r5
     f22:	4631      	mov	r1, r6
     f24:	4620      	mov	r0, r4
     f26:	47a8      	blx	r5
     f28:	4931      	ldr	r1, [pc, #196]	; (ff0 <main+0xec>)
     f2a:	4620      	mov	r0, r4
     f2c:	47a8      	blx	r5
     f2e:	4631      	mov	r1, r6
     f30:	4620      	mov	r0, r4
     f32:	47a8      	blx	r5
     f34:	492f      	ldr	r1, [pc, #188]	; (ff4 <main+0xf0>)
     f36:	4620      	mov	r0, r4
     f38:	47a8      	blx	r5
     f3a:	492f      	ldr	r1, [pc, #188]	; (ff8 <main+0xf4>)
     f3c:	4620      	mov	r0, r4
     f3e:	47a8      	blx	r5
     f40:	492e      	ldr	r1, [pc, #184]	; (ffc <main+0xf8>)
     f42:	4620      	mov	r0, r4
     f44:	47a8      	blx	r5
     f46:	492e      	ldr	r1, [pc, #184]	; (1000 <main+0xfc>)
     f48:	4620      	mov	r0, r4
     f4a:	47a8      	blx	r5
     f4c:	4631      	mov	r1, r6
     f4e:	4620      	mov	r0, r4
     f50:	47a8      	blx	r5
     f52:	4631      	mov	r1, r6
     f54:	4620      	mov	r0, r4
     f56:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;

	memory.Init();
     f58:	4f2a      	ldr	r7, [pc, #168]	; (1004 <main+0x100>)
     f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     f5e:	4638      	mov	r0, r7
     f60:	4b29      	ldr	r3, [pc, #164]	; (1008 <main+0x104>)
     f62:	4798      	blx	r3
	memory.WriteDefaultParameters();
     f64:	4638      	mov	r0, r7
     f66:	4b29      	ldr	r3, [pc, #164]	; (100c <main+0x108>)
     f68:	4798      	blx	r3
	alu.Init();
     f6a:	4f29      	ldr	r7, [pc, #164]	; (1010 <main+0x10c>)
     f6c:	4638      	mov	r0, r7
     f6e:	4b29      	ldr	r3, [pc, #164]	; (1014 <main+0x110>)
     f70:	4798      	blx	r3
	alu.RunController();
     f72:	4638      	mov	r0, r7
     f74:	4b28      	ldr	r3, [pc, #160]	; (1018 <main+0x114>)
     f76:	4798      	blx	r3
     f78:	4928      	ldr	r1, [pc, #160]	; (101c <main+0x118>)
     f7a:	4620      	mov	r0, r4
     f7c:	47a8      	blx	r5
     f7e:	4631      	mov	r1, r6
     f80:	4620      	mov	r0, r4
     f82:	47a8      	blx	r5
	usb<<"*** ALU initiated ***"<<NEWLINE;
	uint8_t	line= alu.GetSelectedAMMC();
     f84:	4638      	mov	r0, r7
     f86:	4b26      	ldr	r3, [pc, #152]	; (1020 <main+0x11c>)
     f88:	4798      	blx	r3
     f8a:	4607      	mov	r7, r0
     f8c:	4925      	ldr	r1, [pc, #148]	; (1024 <main+0x120>)
     f8e:	4620      	mov	r0, r4
     f90:	47a8      	blx	r5
     f92:	220a      	movs	r2, #10
     f94:	4639      	mov	r1, r7
     f96:	4620      	mov	r0, r4
     f98:	4b23      	ldr	r3, [pc, #140]	; (1028 <main+0x124>)
     f9a:	4798      	blx	r3
     f9c:	4631      	mov	r1, r6
     f9e:	4620      	mov	r0, r4
     fa0:	47a8      	blx	r5
	usb<<"Active line: "<<line<<NEWLINE;
	if (!pBit)
     fa2:	4822      	ldr	r0, [pc, #136]	; (102c <main+0x128>)
     fa4:	4b22      	ldr	r3, [pc, #136]	; (1030 <main+0x12c>)
     fa6:	4798      	blx	r3
     fa8:	b988      	cbnz	r0, fce <main+0xca>
	{
		hvac.Stop(0);
     faa:	2100      	movs	r1, #0
     fac:	4821      	ldr	r0, [pc, #132]	; (1034 <main+0x130>)
     fae:	4b22      	ldr	r3, [pc, #136]	; (1038 <main+0x134>)
     fb0:	4798      	blx	r3
		hvac.Start(0);
	}
	/* Replace with your application code */
	while (1)
	{
		delay_ms(1000);
     fb2:	4f0c      	ldr	r7, [pc, #48]	; (fe4 <main+0xe0>)
     fb4:	4e0e      	ldr	r6, [pc, #56]	; (ff0 <main+0xec>)
     fb6:	4d09      	ldr	r5, [pc, #36]	; (fdc <main+0xd8>)
     fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     fbc:	47b8      	blx	r7
     fbe:	4631      	mov	r1, r6
     fc0:	4628      	mov	r0, r5
     fc2:	4c0a      	ldr	r4, [pc, #40]	; (fec <main+0xe8>)
     fc4:	47a0      	blx	r4
     fc6:	4908      	ldr	r1, [pc, #32]	; (fe8 <main+0xe4>)
     fc8:	4628      	mov	r0, r5
     fca:	47a0      	blx	r4
     fcc:	e7f4      	b.n	fb8 <main+0xb4>
		hvac.Start(0);
     fce:	2100      	movs	r1, #0
     fd0:	4818      	ldr	r0, [pc, #96]	; (1034 <main+0x130>)
     fd2:	4b1a      	ldr	r3, [pc, #104]	; (103c <main+0x138>)
     fd4:	4798      	blx	r3
     fd6:	e7ec      	b.n	fb2 <main+0xae>
     fd8:	00002481 	.word	0x00002481
     fdc:	20002760 	.word	0x20002760
     fe0:	000118bd 	.word	0x000118bd
     fe4:	00003ed5 	.word	0x00003ed5
     fe8:	000195d4 	.word	0x000195d4
     fec:	00011d51 	.word	0x00011d51
     ff0:	00019604 	.word	0x00019604
     ff4:	00019628 	.word	0x00019628
     ff8:	00019634 	.word	0x00019634
     ffc:	00019640 	.word	0x00019640
    1000:	00019648 	.word	0x00019648
    1004:	20003e0c 	.word	0x20003e0c
    1008:	00015175 	.word	0x00015175
    100c:	000150a1 	.word	0x000150a1
    1010:	20000640 	.word	0x20000640
    1014:	00000539 	.word	0x00000539
    1018:	0000074d 	.word	0x0000074d
    101c:	00019654 	.word	0x00019654
    1020:	000003e1 	.word	0x000003e1
    1024:	0001966c 	.word	0x0001966c
    1028:	00011d71 	.word	0x00011d71
    102c:	2000086c 	.word	0x2000086c
    1030:	0000108d 	.word	0x0000108d
    1034:	20000918 	.word	0x20000918
    1038:	000016ed 	.word	0x000016ed
    103c:	00001e91 	.word	0x00001e91

00001040 <_GLOBAL__sub_I_main>:
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	}
}
    1040:	b570      	push	{r4, r5, r6, lr}
    1042:	4c09      	ldr	r4, [pc, #36]	; (1068 <_GLOBAL__sub_I_main+0x28>)
    1044:	4620      	mov	r0, r4
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <_GLOBAL__sub_I_main+0x2c>)
    1048:	4798      	blx	r3
    104a:	4e09      	ldr	r6, [pc, #36]	; (1070 <_GLOBAL__sub_I_main+0x30>)
    104c:	4632      	mov	r2, r6
    104e:	4909      	ldr	r1, [pc, #36]	; (1074 <_GLOBAL__sub_I_main+0x34>)
    1050:	4620      	mov	r0, r4
    1052:	4d09      	ldr	r5, [pc, #36]	; (1078 <_GLOBAL__sub_I_main+0x38>)
    1054:	47a8      	blx	r5
    1056:	3414      	adds	r4, #20
    1058:	4620      	mov	r0, r4
    105a:	4b08      	ldr	r3, [pc, #32]	; (107c <_GLOBAL__sub_I_main+0x3c>)
    105c:	4798      	blx	r3
    105e:	4632      	mov	r2, r6
    1060:	4907      	ldr	r1, [pc, #28]	; (1080 <_GLOBAL__sub_I_main+0x40>)
    1062:	4620      	mov	r0, r4
    1064:	47a8      	blx	r5
    1066:	bd70      	pop	{r4, r5, r6, pc}
    1068:	2000086c 	.word	0x2000086c
    106c:	00001087 	.word	0x00001087
    1070:	20000000 	.word	0x20000000
    1074:	00001085 	.word	0x00001085
    1078:	000170d1 	.word	0x000170d1
    107c:	00000863 	.word	0x00000863
    1080:	00000861 	.word	0x00000861

00001084 <_ZN10PBIT_ClassD1Ev>:
} //PBIT_Class

// default destructor
PBIT_Class::~PBIT_Class()
{
} //~PBIT_Class
    1084:	4770      	bx	lr

00001086 <_ZN10PBIT_ClassC1Ev>:
	isOK=true;
    1086:	2201      	movs	r2, #1
    1088:	7002      	strb	r2, [r0, #0]
} //PBIT_Class
    108a:	4770      	bx	lr

0000108c <_ZN10PBIT_ClasscvbEv>:
	}
	return isOK;
}

PBIT_Class::operator bool(){
	return	isOK;
    108c:	7800      	ldrb	r0, [r0, #0]
}
    108e:	4770      	bx	lr

00001090 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
	if (v==0)
	{
		isOK=true;
	}
	return	v;
}
    1090:	b508      	push	{r3, lr}
	isOK=true;
    1092:	4804      	ldr	r0, [pc, #16]	; (10a4 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x14>)
    1094:	2301      	movs	r3, #1
    1096:	7003      	strb	r3, [r0, #0]
    1098:	4a03      	ldr	r2, [pc, #12]	; (10a8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x18>)
    109a:	4904      	ldr	r1, [pc, #16]	; (10ac <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x1c>)
    109c:	4b04      	ldr	r3, [pc, #16]	; (10b0 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x20>)
    109e:	4798      	blx	r3
    10a0:	bd08      	pop	{r3, pc}
    10a2:	bf00      	nop
    10a4:	20000884 	.word	0x20000884
    10a8:	20000000 	.word	0x20000000
    10ac:	00001085 	.word	0x00001085
    10b0:	000170d1 	.word	0x000170d1

000010b4 <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "ARINC_Handler_Class.h"


States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
	ptrStatesClass->timeElapsed=true;
    10b4:	4b02      	ldr	r3, [pc, #8]	; (10c0 <_ZL24HVACOperationTimeElapsedPK10timer_task+0xc>)
    10b6:	681b      	ldr	r3, [r3, #0]
    10b8:	2201      	movs	r2, #1
    10ba:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    10be:	4770      	bx	lr
    10c0:	20000898 	.word	0x20000898

000010c4 <_ZL14HVACTimerTicksPK10timer_task>:
}
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
	hvacTimer.ticks++;
    10c4:	4a02      	ldr	r2, [pc, #8]	; (10d0 <_ZL14HVACTimerTicksPK10timer_task+0xc>)
    10c6:	6893      	ldr	r3, [r2, #8]
    10c8:	3301      	adds	r3, #1
    10ca:	6093      	str	r3, [r2, #8]
    10cc:	4770      	bx	lr
    10ce:	bf00      	nop
    10d0:	20002708 	.word	0x20002708

000010d4 <_ZN12States_Class15SetCurrentStateER9HVACState>:
	hs=*hvacState;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
	configuration=cd;
}
void	States_Class::SetCurrentState(HVACState& hs){
    10d4:	b508      	push	{r3, lr}
	staticCurrentState=hs;
    10d6:	2268      	movs	r2, #104	; 0x68
    10d8:	4801      	ldr	r0, [pc, #4]	; (10e0 <_ZN12States_Class15SetCurrentStateER9HVACState+0xc>)
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <_ZN12States_Class15SetCurrentStateER9HVACState+0x10>)
    10dc:	4798      	blx	r3
    10de:	bd08      	pop	{r3, pc}
    10e0:	2000089c 	.word	0x2000089c
    10e4:	000191a9 	.word	0x000191a9

000010e8 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState>:
    10e8:	b508      	push	{r3, lr}
    10ea:	6803      	ldr	r3, [r0, #0]
    10ec:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    10f0:	4418      	add	r0, r3
    10f2:	4b01      	ldr	r3, [pc, #4]	; (10f8 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState+0x10>)
    10f4:	4798      	blx	r3
    10f6:	bd08      	pop	{r3, pc}
    10f8:	000010d5 	.word	0x000010d5

000010fc <_ZN12States_ClassD1Ev>:
States_Class::~States_Class()
    10fc:	b538      	push	{r3, r4, r5, lr}
    10fe:	4604      	mov	r4, r0
    1100:	4d10      	ldr	r5, [pc, #64]	; (1144 <_ZN12States_ClassD1Ev+0x48>)
    1102:	f105 0310 	add.w	r3, r5, #16
    1106:	6003      	str	r3, [r0, #0]
    1108:	f105 0338 	add.w	r3, r5, #56	; 0x38
    110c:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
    1110:	f105 0348 	add.w	r3, r5, #72	; 0x48
    1114:	f8c0 34fc 	str.w	r3, [r0, #1276]	; 0x4fc
    1118:	f105 0324 	add.w	r3, r5, #36	; 0x24
    111c:	6203      	str	r3, [r0, #32]
    111e:	4b0a      	ldr	r3, [pc, #40]	; (1148 <_ZN12States_ClassD1Ev+0x4c>)
    1120:	4798      	blx	r3
    1122:	f104 0044 	add.w	r0, r4, #68	; 0x44
    1126:	4b09      	ldr	r3, [pc, #36]	; (114c <_ZN12States_ClassD1Ev+0x50>)
    1128:	4798      	blx	r3
    112a:	f105 0154 	add.w	r1, r5, #84	; 0x54
    112e:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
    1132:	4b07      	ldr	r3, [pc, #28]	; (1150 <_ZN12States_ClassD1Ev+0x54>)
    1134:	4798      	blx	r3
    1136:	f504 7017 	add.w	r0, r4, #604	; 0x25c
    113a:	4b06      	ldr	r3, [pc, #24]	; (1154 <_ZN12States_ClassD1Ev+0x58>)
    113c:	4798      	blx	r3
} //~States_Class
    113e:	4620      	mov	r0, r4
    1140:	bd38      	pop	{r3, r4, r5, pc}
    1142:	bf00      	nop
    1144:	0001967c 	.word	0x0001967c
    1148:	00000be1 	.word	0x00000be1
    114c:	00000cb5 	.word	0x00000cb5
    1150:	000009c3 	.word	0x000009c3
    1154:	000008b9 	.word	0x000008b9

00001158 <_ZN12States_ClassC1Ev>:
States_Class::States_Class(void)
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	4604      	mov	r4, r0
    115c:	f500 7017 	add.w	r0, r0, #604	; 0x25c
    1160:	4b17      	ldr	r3, [pc, #92]	; (11c0 <_ZN12States_ClassC1Ev+0x68>)
    1162:	4798      	blx	r3
    1164:	4d17      	ldr	r5, [pc, #92]	; (11c4 <_ZN12States_ClassC1Ev+0x6c>)
    1166:	f105 0648 	add.w	r6, r5, #72	; 0x48
    116a:	f105 0154 	add.w	r1, r5, #84	; 0x54
    116e:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
    1172:	4b15      	ldr	r3, [pc, #84]	; (11c8 <_ZN12States_ClassC1Ev+0x70>)
    1174:	4798      	blx	r3
    1176:	f104 0044 	add.w	r0, r4, #68	; 0x44
    117a:	4b14      	ldr	r3, [pc, #80]	; (11cc <_ZN12States_ClassC1Ev+0x74>)
    117c:	4798      	blx	r3
    117e:	4620      	mov	r0, r4
    1180:	4b13      	ldr	r3, [pc, #76]	; (11d0 <_ZN12States_ClassC1Ev+0x78>)
    1182:	4798      	blx	r3
    1184:	f105 0310 	add.w	r3, r5, #16
    1188:	6023      	str	r3, [r4, #0]
    118a:	f105 0338 	add.w	r3, r5, #56	; 0x38
    118e:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
    1192:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
    1196:	3524      	adds	r5, #36	; 0x24
    1198:	6225      	str	r5, [r4, #32]
	ptrStatesClass=this;
    119a:	4d0e      	ldr	r5, [pc, #56]	; (11d4 <_ZN12States_ClassC1Ev+0x7c>)
    119c:	f845 4b04 	str.w	r4, [r5], #4
	listener.eventHandler = NULL;
    11a0:	2600      	movs	r6, #0
    11a2:	4b0d      	ldr	r3, [pc, #52]	; (11d8 <_ZN12States_ClassC1Ev+0x80>)
    11a4:	615e      	str	r6, [r3, #20]
	staticCurrentState=defaultState;
    11a6:	2268      	movs	r2, #104	; 0x68
    11a8:	f504 7118 	add.w	r1, r4, #608	; 0x260
    11ac:	4628      	mov	r0, r5
    11ae:	4b0b      	ldr	r3, [pc, #44]	; (11dc <_ZN12States_ClassC1Ev+0x84>)
    11b0:	4798      	blx	r3
	isOK=false;
    11b2:	f884 6124 	strb.w	r6, [r4, #292]	; 0x124
	hvacState=&staticCurrentState;
    11b6:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
}
    11ba:	4620      	mov	r0, r4
    11bc:	bd70      	pop	{r4, r5, r6, pc}
    11be:	bf00      	nop
    11c0:	00000891 	.word	0x00000891
    11c4:	0001967c 	.word	0x0001967c
    11c8:	000009b5 	.word	0x000009b5
    11cc:	00000cb7 	.word	0x00000cb7
    11d0:	00000bad 	.word	0x00000bad
    11d4:	20000898 	.word	0x20000898
    11d8:	2000245c 	.word	0x2000245c
    11dc:	000191a9 	.word	0x000191a9

000011e0 <_ZN12States_Class4InitEv>:
bool States_Class::Init(void){
    11e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11e2:	4604      	mov	r4, r0
    11e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    11e8:	4b29      	ldr	r3, [pc, #164]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    11ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (hvacTimer.Init())
    11ee:	4829      	ldr	r0, [pc, #164]	; (1294 <_ZN12States_Class4InitEv+0xb4>)
    11f0:	4b29      	ldr	r3, [pc, #164]	; (1298 <_ZN12States_Class4InitEv+0xb8>)
    11f2:	4798      	blx	r3
    11f4:	b968      	cbnz	r0, 1212 <_ZN12States_Class4InitEv+0x32>
	while(!fans.Init()){
    11f6:	4e29      	ldr	r6, [pc, #164]	; (129c <_ZN12States_Class4InitEv+0xbc>)
    11f8:	4d29      	ldr	r5, [pc, #164]	; (12a0 <_ZN12States_Class4InitEv+0xc0>)
		delay_ms(200);
    11fa:	4f2a      	ldr	r7, [pc, #168]	; (12a4 <_ZN12States_Class4InitEv+0xc4>)
	while(!fans.Init()){
    11fc:	4630      	mov	r0, r6
    11fe:	47a8      	blx	r5
    1200:	b968      	cbnz	r0, 121e <_ZN12States_Class4InitEv+0x3e>
		delay_ms(200);
    1202:	20c8      	movs	r0, #200	; 0xc8
    1204:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1206:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    120a:	4b21      	ldr	r3, [pc, #132]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    120c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    1210:	e7f4      	b.n	11fc <_ZN12States_Class4InitEv+0x1c>
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    1212:	2201      	movs	r2, #1
    1214:	4924      	ldr	r1, [pc, #144]	; (12a8 <_ZN12States_Class4InitEv+0xc8>)
    1216:	481f      	ldr	r0, [pc, #124]	; (1294 <_ZN12States_Class4InitEv+0xb4>)
    1218:	4b24      	ldr	r3, [pc, #144]	; (12ac <_ZN12States_Class4InitEv+0xcc>)
    121a:	4798      	blx	r3
    121c:	e7eb      	b.n	11f6 <_ZN12States_Class4InitEv+0x16>
	while (!fvc.InitController())
    121e:	4e24      	ldr	r6, [pc, #144]	; (12b0 <_ZN12States_Class4InitEv+0xd0>)
    1220:	4d24      	ldr	r5, [pc, #144]	; (12b4 <_ZN12States_Class4InitEv+0xd4>)
		delay_ms(200);
    1222:	4f20      	ldr	r7, [pc, #128]	; (12a4 <_ZN12States_Class4InitEv+0xc4>)
	while (!fvc.InitController())
    1224:	4630      	mov	r0, r6
    1226:	47a8      	blx	r5
    1228:	b938      	cbnz	r0, 123a <_ZN12States_Class4InitEv+0x5a>
		delay_ms(200);
    122a:	20c8      	movs	r0, #200	; 0xc8
    122c:	47b8      	blx	r7
    122e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1232:	4b17      	ldr	r3, [pc, #92]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    1234:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    1238:	e7f4      	b.n	1224 <_ZN12States_Class4InitEv+0x44>
	fvc.StartControlling();
    123a:	481d      	ldr	r0, [pc, #116]	; (12b0 <_ZN12States_Class4InitEv+0xd0>)
    123c:	4b1e      	ldr	r3, [pc, #120]	; (12b8 <_ZN12States_Class4InitEv+0xd8>)
    123e:	4798      	blx	r3
	while (!temperatures.Init())
    1240:	4e1e      	ldr	r6, [pc, #120]	; (12bc <_ZN12States_Class4InitEv+0xdc>)
    1242:	4d1f      	ldr	r5, [pc, #124]	; (12c0 <_ZN12States_Class4InitEv+0xe0>)
		delay_ms(200);
    1244:	4f17      	ldr	r7, [pc, #92]	; (12a4 <_ZN12States_Class4InitEv+0xc4>)
	while (!temperatures.Init())
    1246:	4630      	mov	r0, r6
    1248:	47a8      	blx	r5
    124a:	b938      	cbnz	r0, 125c <_ZN12States_Class4InitEv+0x7c>
		delay_ms(200);
    124c:	20c8      	movs	r0, #200	; 0xc8
    124e:	47b8      	blx	r7
    1250:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1254:	4b0e      	ldr	r3, [pc, #56]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    1256:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    125a:	e7f4      	b.n	1246 <_ZN12States_Class4InitEv+0x66>
	temperatures.StartOneConversion();
    125c:	4817      	ldr	r0, [pc, #92]	; (12bc <_ZN12States_Class4InitEv+0xdc>)
    125e:	4b19      	ldr	r3, [pc, #100]	; (12c4 <_ZN12States_Class4InitEv+0xe4>)
    1260:	4798      	blx	r3
	while(!heater.Init()){
    1262:	4e19      	ldr	r6, [pc, #100]	; (12c8 <_ZN12States_Class4InitEv+0xe8>)
    1264:	4d19      	ldr	r5, [pc, #100]	; (12cc <_ZN12States_Class4InitEv+0xec>)
		delay_ms(200);
    1266:	4f0f      	ldr	r7, [pc, #60]	; (12a4 <_ZN12States_Class4InitEv+0xc4>)
	while(!heater.Init()){
    1268:	4630      	mov	r0, r6
    126a:	47a8      	blx	r5
    126c:	b938      	cbnz	r0, 127e <_ZN12States_Class4InitEv+0x9e>
		delay_ms(200);
    126e:	20c8      	movs	r0, #200	; 0xc8
    1270:	47b8      	blx	r7
    1272:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1276:	4b06      	ldr	r3, [pc, #24]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    1278:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    127c:	e7f4      	b.n	1268 <_ZN12States_Class4InitEv+0x88>
	temperingTimeout=true;
    127e:	2001      	movs	r0, #1
    1280:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1284:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1288:	4b01      	ldr	r3, [pc, #4]	; (1290 <_ZN12States_Class4InitEv+0xb0>)
    128a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
    128e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1290:	41008000 	.word	0x41008000
    1294:	20002708 	.word	0x20002708
    1298:	00011365 	.word	0x00011365
    129c:	200029b8 	.word	0x200029b8
    12a0:	00012681 	.word	0x00012681
    12a4:	00003ed5 	.word	0x00003ed5
    12a8:	000010c5 	.word	0x000010c5
    12ac:	00011429 	.word	0x00011429
    12b0:	20002ac0 	.word	0x20002ac0
    12b4:	00012ca9 	.word	0x00012ca9
    12b8:	00013859 	.word	0x00013859
    12bc:	200091dc 	.word	0x200091dc
    12c0:	00015409 	.word	0x00015409
    12c4:	00015485 	.word	0x00015485
    12c8:	20002c5c 	.word	0x20002c5c
    12cc:	000141e1 	.word	0x000141e1

000012d0 <_ZN12States_Class20handleStateStandbyONEm>:
	{
    12d0:	b510      	push	{r4, lr}
    12d2:	b084      	sub	sp, #16
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    12d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12d8:	f8ad 3000 	strh.w	r3, [sp]
    12dc:	f8ad 3002 	strh.w	r3, [sp, #2]
    12e0:	2300      	movs	r3, #0
    12e2:	9301      	str	r3, [sp, #4]
	data = v;
    12e4:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    12e6:	9303      	str	r3, [sp, #12]
	hvacState->latchClosedConfirmPending = false;
    12e8:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    12ec:	f892 1064 	ldrb.w	r1, [r2, #100]	; 0x64
    12f0:	f363 1145 	bfi	r1, r3, #5, #1
    12f4:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    12f8:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    12fc:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    1300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1304:	fb02 f204 	mul.w	r2, r2, r4
    1308:	644a      	str	r2, [r1, #68]	; 0x44
	hvacState->reedRelayOpen = false;
    130a:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    130e:	f892 1064 	ldrb.w	r1, [r2, #100]	; 0x64
    1312:	f363 1104 	bfi	r1, r3, #4, #1
    1316:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
	listener.SendEventSelf(e);
    131a:	4669      	mov	r1, sp
    131c:	4802      	ldr	r0, [pc, #8]	; (1328 <_ZN12States_Class20handleStateStandbyONEm+0x58>)
    131e:	4b03      	ldr	r3, [pc, #12]	; (132c <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    1320:	4798      	blx	r3
	}
    1322:	b004      	add	sp, #16
    1324:	bd10      	pop	{r4, pc}
    1326:	bf00      	nop
    1328:	2000245c 	.word	0x2000245c
    132c:	00010bc9 	.word	0x00010bc9

00001330 <_ZN12States_Class23handleStateStandbyReadyEm>:
	{
    1330:	b500      	push	{lr}
    1332:	b085      	sub	sp, #20
    1334:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1338:	f8ad 3000 	strh.w	r3, [sp]
    133c:	f8ad 3002 	strh.w	r3, [sp, #2]
    1340:	2300      	movs	r3, #0
    1342:	9301      	str	r3, [sp, #4]
	data = v;
    1344:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1346:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1348:	4669      	mov	r1, sp
    134a:	4803      	ldr	r0, [pc, #12]	; (1358 <_ZN12States_Class23handleStateStandbyReadyEm+0x28>)
    134c:	4b03      	ldr	r3, [pc, #12]	; (135c <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    134e:	4798      	blx	r3
	}
    1350:	b005      	add	sp, #20
    1352:	f85d fb04 	ldr.w	pc, [sp], #4
    1356:	bf00      	nop
    1358:	2000245c 	.word	0x2000245c
    135c:	00010bc9 	.word	0x00010bc9

00001360 <_ZN12States_Class13handleStateONEm>:
	{
    1360:	b500      	push	{lr}
    1362:	b085      	sub	sp, #20
    1364:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1368:	f8ad 3000 	strh.w	r3, [sp]
    136c:	f8ad 3002 	strh.w	r3, [sp, #2]
    1370:	2300      	movs	r3, #0
    1372:	9301      	str	r3, [sp, #4]
	data = v;
    1374:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1376:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1378:	4669      	mov	r1, sp
    137a:	4803      	ldr	r0, [pc, #12]	; (1388 <_ZN12States_Class13handleStateONEm+0x28>)
    137c:	4b03      	ldr	r3, [pc, #12]	; (138c <_ZN12States_Class13handleStateONEm+0x2c>)
    137e:	4798      	blx	r3
	}
    1380:	b005      	add	sp, #20
    1382:	f85d fb04 	ldr.w	pc, [sp], #4
    1386:	bf00      	nop
    1388:	2000245c 	.word	0x2000245c
    138c:	00010bc9 	.word	0x00010bc9

00001390 <_ZN12States_Class19handleStateFinishedEm>:
	{
    1390:	b500      	push	{lr}
    1392:	b085      	sub	sp, #20
    1394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1398:	f8ad 3000 	strh.w	r3, [sp]
    139c:	f8ad 3002 	strh.w	r3, [sp, #2]
    13a0:	2300      	movs	r3, #0
    13a2:	9301      	str	r3, [sp, #4]
	data = v;
    13a4:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    13a6:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    13a8:	4669      	mov	r1, sp
    13aa:	4803      	ldr	r0, [pc, #12]	; (13b8 <_ZN12States_Class19handleStateFinishedEm+0x28>)
    13ac:	4b03      	ldr	r3, [pc, #12]	; (13bc <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    13ae:	4798      	blx	r3
	}
    13b0:	b005      	add	sp, #20
    13b2:	f85d fb04 	ldr.w	pc, [sp], #4
    13b6:	bf00      	nop
    13b8:	2000245c 	.word	0x2000245c
    13bc:	00010bc9 	.word	0x00010bc9

000013c0 <_ZN12States_Class19StateStoppedProcessEm>:
	{
    13c0:	b500      	push	{lr}
    13c2:	b085      	sub	sp, #20
    13c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13c8:	f8ad 3000 	strh.w	r3, [sp]
    13cc:	f8ad 3002 	strh.w	r3, [sp, #2]
    13d0:	2300      	movs	r3, #0
    13d2:	9301      	str	r3, [sp, #4]
	data = v;
    13d4:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    13d6:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    13d8:	4669      	mov	r1, sp
    13da:	4803      	ldr	r0, [pc, #12]	; (13e8 <_ZN12States_Class19StateStoppedProcessEm+0x28>)
    13dc:	4b03      	ldr	r3, [pc, #12]	; (13ec <_ZN12States_Class19StateStoppedProcessEm+0x2c>)
    13de:	4798      	blx	r3
	}
    13e0:	b005      	add	sp, #20
    13e2:	f85d fb04 	ldr.w	pc, [sp], #4
    13e6:	bf00      	nop
    13e8:	2000245c 	.word	0x2000245c
    13ec:	00010bc9 	.word	0x00010bc9

000013f0 <_ZN12States_Class22handleStateSelfProtectEm>:
	{
    13f0:	b500      	push	{lr}
    13f2:	b085      	sub	sp, #20
    13f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13f8:	f8ad 3000 	strh.w	r3, [sp]
    13fc:	f8ad 3002 	strh.w	r3, [sp, #2]
    1400:	2300      	movs	r3, #0
    1402:	9301      	str	r3, [sp, #4]
	data = v;
    1404:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1406:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1408:	4669      	mov	r1, sp
    140a:	4803      	ldr	r0, [pc, #12]	; (1418 <_ZN12States_Class22handleStateSelfProtectEm+0x28>)
    140c:	4b03      	ldr	r3, [pc, #12]	; (141c <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    140e:	4798      	blx	r3
	}
    1410:	b005      	add	sp, #20
    1412:	f85d fb04 	ldr.w	pc, [sp], #4
    1416:	bf00      	nop
    1418:	2000245c 	.word	0x2000245c
    141c:	00010bc9 	.word	0x00010bc9

00001420 <_ZN12States_Class16handleStateErrorEm>:
	{
    1420:	b500      	push	{lr}
    1422:	b085      	sub	sp, #20
    1424:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1428:	f8ad 3000 	strh.w	r3, [sp]
    142c:	f8ad 3002 	strh.w	r3, [sp, #2]
    1430:	2300      	movs	r3, #0
    1432:	9301      	str	r3, [sp, #4]
	data = v;
    1434:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1436:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1438:	4669      	mov	r1, sp
    143a:	4803      	ldr	r0, [pc, #12]	; (1448 <_ZN12States_Class16handleStateErrorEm+0x28>)
    143c:	4b03      	ldr	r3, [pc, #12]	; (144c <_ZN12States_Class16handleStateErrorEm+0x2c>)
    143e:	4798      	blx	r3
	}
    1440:	b005      	add	sp, #20
    1442:	f85d fb04 	ldr.w	pc, [sp], #4
    1446:	bf00      	nop
    1448:	2000245c 	.word	0x2000245c
    144c:	00010bc9 	.word	0x00010bc9

00001450 <_ZN12States_Class22handleStateMaintenanceEm>:
	{
    1450:	b500      	push	{lr}
    1452:	b085      	sub	sp, #20
    1454:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1458:	f8ad 3000 	strh.w	r3, [sp]
    145c:	f8ad 3002 	strh.w	r3, [sp, #2]
    1460:	2300      	movs	r3, #0
    1462:	9301      	str	r3, [sp, #4]
	data = v;
    1464:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1466:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1468:	4669      	mov	r1, sp
    146a:	4803      	ldr	r0, [pc, #12]	; (1478 <_ZN12States_Class22handleStateMaintenanceEm+0x28>)
    146c:	4b03      	ldr	r3, [pc, #12]	; (147c <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    146e:	4798      	blx	r3
	}
    1470:	b005      	add	sp, #20
    1472:	f85d fb04 	ldr.w	pc, [sp], #4
    1476:	bf00      	nop
    1478:	2000245c 	.word	0x2000245c
    147c:	00010bc9 	.word	0x00010bc9

00001480 <_ZN12States_Class12InStateEventER5eventl>:
bool States_Class::InStateEvent(event& e, tick_t t){
    1480:	b510      	push	{r4, lr}
    1482:	b082      	sub	sp, #8
	bool result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
    1484:	9200      	str	r2, [sp, #0]
    1486:	f64f 73ff 	movw	r3, #65535	; 0xffff
    148a:	461a      	mov	r2, r3
    148c:	4802      	ldr	r0, [pc, #8]	; (1498 <_ZN12States_Class12InStateEventER5eventl+0x18>)
    148e:	4c03      	ldr	r4, [pc, #12]	; (149c <_ZN12States_Class12InStateEventER5eventl+0x1c>)
    1490:	47a0      	blx	r4
}
    1492:	b002      	add	sp, #8
    1494:	bd10      	pop	{r4, pc}
    1496:	bf00      	nop
    1498:	2000245c 	.word	0x2000245c
    149c:	00010a05 	.word	0x00010a05

000014a0 <_ZN12States_Class23prepareStateChangeEventEtt>:
	{
    14a0:	b500      	push	{lr}
    14a2:	b085      	sub	sp, #20
    14a4:	2300      	movs	r3, #0
    14a6:	9301      	str	r3, [sp, #4]
    14a8:	9303      	str	r3, [sp, #12]
	e.eventClass =(EventClass)kHVACEventClass;
    14aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    14ae:	f8ad 3000 	strh.w	r3, [sp]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    14b2:	f8ad 3002 	strh.w	r3, [sp, #2]
	e.data.wordData[0] = newState;
    14b6:	f8ad 1008 	strh.w	r1, [sp, #8]
	e.data.wordData[1] = data;
    14ba:	f8ad 200a 	strh.w	r2, [sp, #10]
	listener.SendEventSelf(e);
    14be:	4669      	mov	r1, sp
    14c0:	4802      	ldr	r0, [pc, #8]	; (14cc <_ZN12States_Class23prepareStateChangeEventEtt+0x2c>)
    14c2:	4b03      	ldr	r3, [pc, #12]	; (14d0 <_ZN12States_Class23prepareStateChangeEventEtt+0x30>)
    14c4:	4798      	blx	r3
	}
    14c6:	b005      	add	sp, #20
    14c8:	f85d fb04 	ldr.w	pc, [sp], #4
    14cc:	2000245c 	.word	0x2000245c
    14d0:	00010bc9 	.word	0x00010bc9

000014d4 <_ZN12States_Class11StateResumeEm>:
	{
    14d4:	b530      	push	{r4, r5, lr}
    14d6:	b085      	sub	sp, #20
    14d8:	4605      	mov	r5, r0
    14da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    14de:	f8ad 3000 	strh.w	r3, [sp]
    14e2:	f8ad 3002 	strh.w	r3, [sp, #2]
    14e6:	2300      	movs	r3, #0
    14e8:	9301      	str	r3, [sp, #4]
	data = v;
    14ea:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    14ec:	9303      	str	r3, [sp, #12]
	uint8	currentState(hvacState->currentState);
    14ee:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    14f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        switch (hvacState->currentState)
    14f4:	f240 1339 	movw	r3, #313	; 0x139
    14f8:	429c      	cmp	r4, r3
    14fa:	d007      	beq.n	150c <_ZN12States_Class11StateResumeEm+0x38>
    14fc:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
    1500:	d017      	beq.n	1532 <_ZN12States_Class11StateResumeEm+0x5e>
            prepareStateChangeEvent( hvacState->currentState);
    1502:	2200      	movs	r2, #0
    1504:	b2a1      	uxth	r1, r4
    1506:	4b0e      	ldr	r3, [pc, #56]	; (1540 <_ZN12States_Class11StateResumeEm+0x6c>)
    1508:	4798      	blx	r3
            break;
    150a:	e004      	b.n	1516 <_ZN12States_Class11StateResumeEm+0x42>
            prepareStateChangeEvent( hvacState->currentState, true);
    150c:	2201      	movs	r2, #1
    150e:	f240 1139 	movw	r1, #313	; 0x139
    1512:	4b0b      	ldr	r3, [pc, #44]	; (1540 <_ZN12States_Class11StateResumeEm+0x6c>)
    1514:	4798      	blx	r3
	hvacState->currentState = currentState;
    1516:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    151a:	b2e4      	uxtb	r4, r4
    151c:	625c      	str	r4, [r3, #36]	; 0x24
	listener.CheckEvent();
    151e:	4c09      	ldr	r4, [pc, #36]	; (1544 <_ZN12States_Class11StateResumeEm+0x70>)
    1520:	4620      	mov	r0, r4
    1522:	4b09      	ldr	r3, [pc, #36]	; (1548 <_ZN12States_Class11StateResumeEm+0x74>)
    1524:	4798      	blx	r3
	listener.SendEventSelf(e);
    1526:	4669      	mov	r1, sp
    1528:	4620      	mov	r0, r4
    152a:	4b08      	ldr	r3, [pc, #32]	; (154c <_ZN12States_Class11StateResumeEm+0x78>)
    152c:	4798      	blx	r3
	}
    152e:	b005      	add	sp, #20
    1530:	bd30      	pop	{r4, r5, pc}
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    1532:	2200      	movs	r2, #0
    1534:	f44f 719d 	mov.w	r1, #314	; 0x13a
    1538:	4b01      	ldr	r3, [pc, #4]	; (1540 <_ZN12States_Class11StateResumeEm+0x6c>)
    153a:	4798      	blx	r3
            break;
    153c:	e7eb      	b.n	1516 <_ZN12States_Class11StateResumeEm+0x42>
    153e:	bf00      	nop
    1540:	000014a1 	.word	0x000014a1
    1544:	2000245c 	.word	0x2000245c
    1548:	00010ccd 	.word	0x00010ccd
    154c:	00010bc9 	.word	0x00010bc9

00001550 <_ZN12States_Class15StateStandbyOFFEm>:
{
    1550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1554:	b084      	sub	sp, #16
    1556:	4607      	mov	r7, r0
    1558:	f64f 73ff 	movw	r3, #65535	; 0xffff
    155c:	f8ad 3000 	strh.w	r3, [sp]
    1560:	f8ad 3002 	strh.w	r3, [sp, #2]
    1564:	2300      	movs	r3, #0
    1566:	9301      	str	r3, [sp, #4]
	data = v;
    1568:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    156a:	9303      	str	r3, [sp, #12]
	hvacState->currentState=kHVACStateStandbyOFF;
    156c:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    1570:	f44f 7199 	mov.w	r1, #306	; 0x132
    1574:	6251      	str	r1, [r2, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_OFF;
    1576:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    157a:	7713      	strb	r3, [r2, #28]
	hvacState->arincStatus.AC_CMD=false;
    157c:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    1580:	7f51      	ldrb	r1, [r2, #29]
    1582:	f363 0100 	bfi	r1, r3, #0, #1
    1586:	7751      	strb	r1, [r2, #29]
	listener.eventHandler=&States_Class::CheckEvents;
    1588:	4a31      	ldr	r2, [pc, #196]	; (1650 <_ZN12States_Class15StateStandbyOFFEm+0x100>)
    158a:	4b32      	ldr	r3, [pc, #200]	; (1654 <_ZN12States_Class15StateStandbyOFFEm+0x104>)
    158c:	615a      	str	r2, [r3, #20]
		if (fvc.fv->IsPositionChanged())
    158e:	4c32      	ldr	r4, [pc, #200]	; (1658 <_ZN12States_Class15StateStandbyOFFEm+0x108>)
    1590:	4d32      	ldr	r5, [pc, #200]	; (165c <_ZN12States_Class15StateStandbyOFFEm+0x10c>)
			if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    1592:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1670 <_ZN12States_Class15StateStandbyOFFEm+0x120>
		if (fvc.fv->IsPositionChanged())
    1596:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    1598:	47a8      	blx	r5
    159a:	b150      	cbz	r0, 15b2 <_ZN12States_Class15StateStandbyOFFEm+0x62>
			arinc.ar->SaveFlapperValveAngle(fvc.fv->ReadActualPosition());
    159c:	4b30      	ldr	r3, [pc, #192]	; (1660 <_ZN12States_Class15StateStandbyOFFEm+0x110>)
    159e:	f8d3 62b0 	ldr.w	r6, [r3, #688]	; 0x2b0
    15a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    15a4:	4b2f      	ldr	r3, [pc, #188]	; (1664 <_ZN12States_Class15StateStandbyOFFEm+0x114>)
    15a6:	4798      	blx	r3
    15a8:	4601      	mov	r1, r0
    15aa:	4630      	mov	r0, r6
    15ac:	4b2e      	ldr	r3, [pc, #184]	; (1668 <_ZN12States_Class15StateStandbyOFFEm+0x118>)
    15ae:	4798      	blx	r3
    15b0:	e7f1      	b.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
			if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    15b2:	2208      	movs	r2, #8
    15b4:	4669      	mov	r1, sp
    15b6:	4638      	mov	r0, r7
    15b8:	47c0      	blx	r8
    15ba:	2800      	cmp	r0, #0
    15bc:	d0eb      	beq.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
				switch(e.eventClass){
    15be:	f8bd 3000 	ldrh.w	r3, [sp]
    15c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    15c6:	d010      	beq.n	15ea <_ZN12States_Class15StateStandbyOFFEm+0x9a>
    15c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    15cc:	d01a      	beq.n	1604 <_ZN12States_Class15StateStandbyOFFEm+0xb4>
    15ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15d2:	d1e0      	bne.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
					switch (e.eventType){
    15d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    15d8:	2b03      	cmp	r3, #3
    15da:	d1dc      	bne.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
							prepareStateChangeEvent(kHVACStateLeaving);
    15dc:	2200      	movs	r2, #0
    15de:	f240 1143 	movw	r1, #323	; 0x143
    15e2:	4638      	mov	r0, r7
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    15e6:	4798      	blx	r3
							break;
    15e8:	e009      	b.n	15fe <_ZN12States_Class15StateStandbyOFFEm+0xae>
						switch (e.eventType){
    15ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    15ee:	2b03      	cmp	r3, #3
    15f0:	d1d1      	bne.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
							prepareStateChangeEvent(kHVACStateLeaving);
    15f2:	2200      	movs	r2, #0
    15f4:	f240 1143 	movw	r1, #323	; 0x143
    15f8:	4638      	mov	r0, r7
    15fa:	4b1c      	ldr	r3, [pc, #112]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    15fc:	4798      	blx	r3
}
    15fe:	b004      	add	sp, #16
    1600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					switch (e.eventType){
    1604:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1608:	3b04      	subs	r3, #4
    160a:	2b03      	cmp	r3, #3
    160c:	d8c3      	bhi.n	1596 <_ZN12States_Class15StateStandbyOFFEm+0x46>
    160e:	e8df f003 	tbb	[pc, r3]
    1612:	0902      	.short	0x0902
    1614:	1710      	.short	0x1710
							prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    1616:	2200      	movs	r2, #0
    1618:	f44f 719a 	mov.w	r1, #308	; 0x134
    161c:	4638      	mov	r0, r7
    161e:	4b13      	ldr	r3, [pc, #76]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    1620:	4798      	blx	r3
							break;
    1622:	e7ec      	b.n	15fe <_ZN12States_Class15StateStandbyOFFEm+0xae>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    1624:	2200      	movs	r2, #0
    1626:	f240 1133 	movw	r1, #307	; 0x133
    162a:	4638      	mov	r0, r7
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    162e:	4798      	blx	r3
							break;
    1630:	e7e5      	b.n	15fe <_ZN12States_Class15StateStandbyOFFEm+0xae>
							prepareStateChangeEvent(kHVACStateStandbyAUTO);
    1632:	2200      	movs	r2, #0
    1634:	f240 1131 	movw	r1, #305	; 0x131
    1638:	4638      	mov	r0, r7
    163a:	4b0c      	ldr	r3, [pc, #48]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    163c:	4798      	blx	r3
							break;
    163e:	e7de      	b.n	15fe <_ZN12States_Class15StateStandbyOFFEm+0xae>
							prepareStateChangeEvent(kHVACStateStandbyVENT);
    1640:	2200      	movs	r2, #0
    1642:	f44f 7198 	mov.w	r1, #304	; 0x130
    1646:	4638      	mov	r0, r7
    1648:	4b08      	ldr	r3, [pc, #32]	; (166c <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    164a:	4798      	blx	r3
							break;
    164c:	e7d7      	b.n	15fe <_ZN12States_Class15StateStandbyOFFEm+0xae>
    164e:	bf00      	nop
    1650:	000017e5 	.word	0x000017e5
    1654:	2000245c 	.word	0x2000245c
    1658:	20002ac0 	.word	0x20002ac0
    165c:	000140ad 	.word	0x000140ad
    1660:	20001920 	.word	0x20001920
    1664:	0001402d 	.word	0x0001402d
    1668:	0000f945 	.word	0x0000f945
    166c:	000014a1 	.word	0x000014a1
    1670:	00001481 	.word	0x00001481

00001674 <_ZN12States_Class21StatePrepareStandbyONEm>:
	{
    1674:	b508      	push	{r3, lr}
	hvacState->lastState=hvacState->currentState;
    1676:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    167c:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStatePrepareStandbyON;
    167e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1682:	f44f 729a 	mov.w	r2, #308	; 0x134
    1686:	625a      	str	r2, [r3, #36]	; 0x24
		switch (commando270.statusArinc)
    1688:	6803      	ldr	r3, [r0, #0]
    168a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    168e:	4403      	add	r3, r0
    1690:	791b      	ldrb	r3, [r3, #4]
    1692:	2b01      	cmp	r3, #1
    1694:	d00e      	beq.n	16b4 <_ZN12States_Class21StatePrepareStandbyONEm+0x40>
    1696:	b13b      	cbz	r3, 16a8 <_ZN12States_Class21StatePrepareStandbyONEm+0x34>
    1698:	2b02      	cmp	r3, #2
    169a:	d011      	beq.n	16c0 <_ZN12States_Class21StatePrepareStandbyONEm+0x4c>
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    169c:	2200      	movs	r2, #0
    169e:	f240 1133 	movw	r1, #307	; 0x133
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <_ZN12States_Class21StatePrepareStandbyONEm+0x58>)
    16a4:	4798      	blx	r3
    16a6:	bd08      	pop	{r3, pc}
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    16a8:	2200      	movs	r2, #0
    16aa:	f240 1133 	movw	r1, #307	; 0x133
    16ae:	4b07      	ldr	r3, [pc, #28]	; (16cc <_ZN12States_Class21StatePrepareStandbyONEm+0x58>)
    16b0:	4798      	blx	r3
			break;
    16b2:	bd08      	pop	{r3, pc}
				prepareStateChangeEvent(kHVACStateStandbyVENT);
    16b4:	2200      	movs	r2, #0
    16b6:	f44f 7198 	mov.w	r1, #304	; 0x130
    16ba:	4b04      	ldr	r3, [pc, #16]	; (16cc <_ZN12States_Class21StatePrepareStandbyONEm+0x58>)
    16bc:	4798      	blx	r3
			break;
    16be:	bd08      	pop	{r3, pc}
				prepareStateChangeEvent(kHVACStateStandbyAUTO);
    16c0:	2200      	movs	r2, #0
    16c2:	f240 1131 	movw	r1, #305	; 0x131
    16c6:	4b01      	ldr	r3, [pc, #4]	; (16cc <_ZN12States_Class21StatePrepareStandbyONEm+0x58>)
    16c8:	4798      	blx	r3
			break;
    16ca:	bd08      	pop	{r3, pc}
    16cc:	000014a1 	.word	0x000014a1

000016d0 <_ZN12States_Class22StatePrepareStandbyOFFEm>:
{
    16d0:	b508      	push	{r3, lr}
	hvacState->currentState=kHVACStatePrepareStandbyOFF;
    16d2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    16d6:	f240 1233 	movw	r2, #307	; 0x133
    16da:	625a      	str	r2, [r3, #36]	; 0x24
	prepareStateChangeEvent(kHVACStateStandbyOFF);
    16dc:	2200      	movs	r2, #0
    16de:	f44f 7199 	mov.w	r1, #306	; 0x132
    16e2:	4b01      	ldr	r3, [pc, #4]	; (16e8 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x18>)
    16e4:	4798      	blx	r3
    16e6:	bd08      	pop	{r3, pc}
    16e8:	000014a1 	.word	0x000014a1

000016ec <_ZN12States_Class4StopEh>:
uint8_t	States_Class::Stop(uint8_t	layer){
    16ec:	b570      	push	{r4, r5, r6, lr}
		if (layer==0)
    16ee:	460c      	mov	r4, r1
    16f0:	b109      	cbz	r1, 16f6 <_ZN12States_Class4StopEh+0xa>
}
    16f2:	4620      	mov	r0, r4
    16f4:	bd70      	pop	{r4, r5, r6, pc}
    16f6:	4e06      	ldr	r6, [pc, #24]	; (1710 <_ZN12States_Class4StopEh+0x24>)
    16f8:	4906      	ldr	r1, [pc, #24]	; (1714 <_ZN12States_Class4StopEh+0x28>)
    16fa:	4630      	mov	r0, r6
    16fc:	4d06      	ldr	r5, [pc, #24]	; (1718 <_ZN12States_Class4StopEh+0x2c>)
    16fe:	47a8      	blx	r5
    1700:	4906      	ldr	r1, [pc, #24]	; (171c <_ZN12States_Class4StopEh+0x30>)
    1702:	4630      	mov	r0, r6
    1704:	47a8      	blx	r5
			delay_ms(100);
    1706:	2064      	movs	r0, #100	; 0x64
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <_ZN12States_Class4StopEh+0x34>)
    170a:	4798      	blx	r3
			return layer;
    170c:	e7f1      	b.n	16f2 <_ZN12States_Class4StopEh+0x6>
    170e:	bf00      	nop
    1710:	20002760 	.word	0x20002760
    1714:	000196f4 	.word	0x000196f4
    1718:	00011d51 	.word	0x00011d51
    171c:	000195d4 	.word	0x000195d4
    1720:	00003ed5 	.word	0x00003ed5

00001724 <_ZN12States_Class15StateInitializeEm>:
	{
    1724:	b508      	push	{r3, lr}
	hvacState->currentState=kHVACStateInitialize;
    1726:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    172a:	f44f 7297 	mov.w	r2, #302	; 0x12e
    172e:	625a      	str	r2, [r3, #36]	; 0x24
	if (pBit.isOK)
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <_ZN12States_Class15StateInitializeEm+0x28>)
    1732:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    1736:	b12b      	cbz	r3, 1744 <_ZN12States_Class15StateInitializeEm+0x20>
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    1738:	2200      	movs	r2, #0
    173a:	f44f 7199 	mov.w	r1, #306	; 0x132
    173e:	4b04      	ldr	r3, [pc, #16]	; (1750 <_ZN12States_Class15StateInitializeEm+0x2c>)
    1740:	4798      	blx	r3
    1742:	bd08      	pop	{r3, pc}
		Stop(0);
    1744:	2100      	movs	r1, #0
    1746:	4b03      	ldr	r3, [pc, #12]	; (1754 <_ZN12States_Class15StateInitializeEm+0x30>)
    1748:	4798      	blx	r3
    174a:	bd08      	pop	{r3, pc}
    174c:	20000898 	.word	0x20000898
    1750:	000014a1 	.word	0x000014a1
    1754:	000016ed 	.word	0x000016ed

00001758 <_ZN12States_Class19ExecutePeriodicTaskEv>:
}
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    1758:	b538      	push	{r3, r4, r5, lr}
    175a:	4604      	mov	r4, r0
	fvc.Control_NBC_StandAlone_Reset();
    175c:	4d17      	ldr	r5, [pc, #92]	; (17bc <_ZN12States_Class19ExecutePeriodicTaskEv+0x64>)
    175e:	4628      	mov	r0, r5
    1760:	4b17      	ldr	r3, [pc, #92]	; (17c0 <_ZN12States_Class19ExecutePeriodicTaskEv+0x68>)
    1762:	4798      	blx	r3
	
	if (fvc.fv->IsPositionChanged())
    1764:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    1766:	4b17      	ldr	r3, [pc, #92]	; (17c4 <_ZN12States_Class19ExecutePeriodicTaskEv+0x6c>)
    1768:	4798      	blx	r3
    176a:	b968      	cbnz	r0, 1788 <_ZN12States_Class19ExecutePeriodicTaskEv+0x30>
	{
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
		hvacState->arincStatus.statusFV=fvc.fv->statusFlapperValve;
		
	}
	if (IsStatusArinclabelChanged())
    176c:	6823      	ldr	r3, [r4, #0]
    176e:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    1772:	4420      	add	r0, r4
    1774:	4b14      	ldr	r3, [pc, #80]	; (17c8 <_ZN12States_Class19ExecutePeriodicTaskEv+0x70>)
    1776:	4798      	blx	r3
    1778:	b990      	cbnz	r0, 17a0 <_ZN12States_Class19ExecutePeriodicTaskEv+0x48>
 	{
		arinc.ar->SaveStatus(GetAcknowledgeStatus());
	}
	HandleCommands();
    177a:	6823      	ldr	r3, [r4, #0]
    177c:	f853 0c10 	ldr.w	r0, [r3, #-16]
    1780:	4420      	add	r0, r4
    1782:	4b12      	ldr	r3, [pc, #72]	; (17cc <_ZN12States_Class19ExecutePeriodicTaskEv+0x74>)
    1784:	4798      	blx	r3
    1786:	bd38      	pop	{r3, r4, r5, pc}
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    1788:	2200      	movs	r2, #0
    178a:	210b      	movs	r1, #11
    178c:	4810      	ldr	r0, [pc, #64]	; (17d0 <_ZN12States_Class19ExecutePeriodicTaskEv+0x78>)
    178e:	4b11      	ldr	r3, [pc, #68]	; (17d4 <_ZN12States_Class19ExecutePeriodicTaskEv+0x7c>)
    1790:	4798      	blx	r3
		hvacState->arincStatus.statusFV=fvc.fv->statusFlapperValve;
    1792:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    1796:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    1798:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
    179c:	779a      	strb	r2, [r3, #30]
    179e:	e7e5      	b.n	176c <_ZN12States_Class19ExecutePeriodicTaskEv+0x14>
		arinc.ar->SaveStatus(GetAcknowledgeStatus());
    17a0:	4b0d      	ldr	r3, [pc, #52]	; (17d8 <_ZN12States_Class19ExecutePeriodicTaskEv+0x80>)
    17a2:	f8d3 52b0 	ldr.w	r5, [r3, #688]	; 0x2b0
    17a6:	6823      	ldr	r3, [r4, #0]
    17a8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    17ac:	4420      	add	r0, r4
    17ae:	4b0b      	ldr	r3, [pc, #44]	; (17dc <_ZN12States_Class19ExecutePeriodicTaskEv+0x84>)
    17b0:	4798      	blx	r3
    17b2:	4601      	mov	r1, r0
    17b4:	4628      	mov	r0, r5
    17b6:	4b0a      	ldr	r3, [pc, #40]	; (17e0 <_ZN12States_Class19ExecutePeriodicTaskEv+0x88>)
    17b8:	4798      	blx	r3
    17ba:	e7de      	b.n	177a <_ZN12States_Class19ExecutePeriodicTaskEv+0x22>
    17bc:	20002ac0 	.word	0x20002ac0
    17c0:	00012eb1 	.word	0x00012eb1
    17c4:	000140ad 	.word	0x000140ad
    17c8:	00000911 	.word	0x00000911
    17cc:	00000a4d 	.word	0x00000a4d
    17d0:	20000640 	.word	0x20000640
    17d4:	000004e9 	.word	0x000004e9
    17d8:	20001920 	.word	0x20001920
    17dc:	00000909 	.word	0x00000909
    17e0:	0000fa39 	.word	0x0000fa39

000017e4 <_ZN12States_Class11CheckEventsEv>:
}

void States_Class::CheckEvents(void){
    17e4:	b510      	push	{r4, lr}
    17e6:	b082      	sub	sp, #8
	event e;
	hvac.ExecutePeriodicTask();
    17e8:	4c21      	ldr	r4, [pc, #132]	; (1870 <_ZN12States_Class11CheckEventsEv+0x8c>)
    17ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
    17ee:	4b21      	ldr	r3, [pc, #132]	; (1874 <_ZN12States_Class11CheckEventsEv+0x90>)
    17f0:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    17f2:	4821      	ldr	r0, [pc, #132]	; (1878 <_ZN12States_Class11CheckEventsEv+0x94>)
    17f4:	4b21      	ldr	r3, [pc, #132]	; (187c <_ZN12States_Class11CheckEventsEv+0x98>)
    17f6:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    17f8:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    17fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    1802:	d005      	beq.n	1810 <_ZN12States_Class11CheckEventsEv+0x2c>
		fvc.fv->ReadActualPosition();
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);

	}
	if (alu.arincTXTimeUP){
    1804:	4b1e      	ldr	r3, [pc, #120]	; (1880 <_ZN12States_Class11CheckEventsEv+0x9c>)
    1806:	f893 3020 	ldrb.w	r3, [r3, #32]
    180a:	b9d3      	cbnz	r3, 1842 <_ZN12States_Class11CheckEventsEv+0x5e>
		}
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
	}
		

}
    180c:	b002      	add	sp, #8
    180e:	bd10      	pop	{r4, pc}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    1810:	4b1b      	ldr	r3, [pc, #108]	; (1880 <_ZN12States_Class11CheckEventsEv+0x9c>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d0f4      	beq.n	1804 <_ZN12States_Class11CheckEventsEv+0x20>
		fvc.fv->ReadActualPosition();
    181a:	4b1a      	ldr	r3, [pc, #104]	; (1884 <_ZN12States_Class11CheckEventsEv+0xa0>)
    181c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    181e:	4b1a      	ldr	r3, [pc, #104]	; (1888 <_ZN12States_Class11CheckEventsEv+0xa4>)
    1820:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    1822:	2200      	movs	r2, #0
    1824:	210b      	movs	r1, #11
    1826:	4816      	ldr	r0, [pc, #88]	; (1880 <_ZN12States_Class11CheckEventsEv+0x9c>)
    1828:	4b18      	ldr	r3, [pc, #96]	; (188c <_ZN12States_Class11CheckEventsEv+0xa8>)
    182a:	4798      	blx	r3
	integerData = v;
    182c:	ab02      	add	r3, sp, #8
    182e:	2200      	movs	r2, #0
    1830:	f843 2d08 	str.w	r2, [r3, #-8]!
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);
    1834:	2203      	movs	r2, #3
    1836:	f44f 7100 	mov.w	r1, #512	; 0x200
    183a:	4815      	ldr	r0, [pc, #84]	; (1890 <_ZN12States_Class11CheckEventsEv+0xac>)
    183c:	4c15      	ldr	r4, [pc, #84]	; (1894 <_ZN12States_Class11CheckEventsEv+0xb0>)
    183e:	47a0      	blx	r4
    1840:	e7e0      	b.n	1804 <_ZN12States_Class11CheckEventsEv+0x20>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    1842:	2102      	movs	r1, #2
    1844:	480e      	ldr	r0, [pc, #56]	; (1880 <_ZN12States_Class11CheckEventsEv+0x9c>)
    1846:	4b14      	ldr	r3, [pc, #80]	; (1898 <_ZN12States_Class11CheckEventsEv+0xb4>)
    1848:	4798      	blx	r3
    184a:	b150      	cbz	r0, 1862 <_ZN12States_Class11CheckEventsEv+0x7e>
    184c:	ab02      	add	r3, sp, #8
    184e:	2200      	movs	r2, #0
    1850:	f843 2d04 	str.w	r2, [r3, #-4]!
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
    1854:	2203      	movs	r2, #3
    1856:	f44f 7140 	mov.w	r1, #768	; 0x300
    185a:	480d      	ldr	r0, [pc, #52]	; (1890 <_ZN12States_Class11CheckEventsEv+0xac>)
    185c:	4c0d      	ldr	r4, [pc, #52]	; (1894 <_ZN12States_Class11CheckEventsEv+0xb0>)
    185e:	47a0      	blx	r4
}
    1860:	e7d4      	b.n	180c <_ZN12States_Class11CheckEventsEv+0x28>
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    1862:	2200      	movs	r2, #0
    1864:	2102      	movs	r1, #2
    1866:	4806      	ldr	r0, [pc, #24]	; (1880 <_ZN12States_Class11CheckEventsEv+0x9c>)
    1868:	4b08      	ldr	r3, [pc, #32]	; (188c <_ZN12States_Class11CheckEventsEv+0xa8>)
    186a:	4798      	blx	r3
    186c:	e7ee      	b.n	184c <_ZN12States_Class11CheckEventsEv+0x68>
    186e:	bf00      	nop
    1870:	20000898 	.word	0x20000898
    1874:	00001759 	.word	0x00001759
    1878:	200007e8 	.word	0x200007e8
    187c:	00000e59 	.word	0x00000e59
    1880:	20000640 	.word	0x20000640
    1884:	20002ac0 	.word	0x20002ac0
    1888:	0001402d 	.word	0x0001402d
    188c:	000004e9 	.word	0x000004e9
    1890:	2000245c 	.word	0x2000245c
    1894:	00010c85 	.word	0x00010c85
    1898:	000021d1 	.word	0x000021d1

0000189c <_GLOBAL__sub_I_ptrStatesClass>:


    189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    189e:	4c0f      	ldr	r4, [pc, #60]	; (18dc <_GLOBAL__sub_I_ptrStatesClass+0x40>)
    18a0:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    18a4:	4628      	mov	r0, r5
    18a6:	4b0e      	ldr	r3, [pc, #56]	; (18e0 <_GLOBAL__sub_I_ptrStatesClass+0x44>)
    18a8:	4798      	blx	r3
    18aa:	4e0e      	ldr	r6, [pc, #56]	; (18e4 <_GLOBAL__sub_I_ptrStatesClass+0x48>)
    18ac:	4632      	mov	r2, r6
    18ae:	490e      	ldr	r1, [pc, #56]	; (18e8 <_GLOBAL__sub_I_ptrStatesClass+0x4c>)
    18b0:	4628      	mov	r0, r5
    18b2:	4d0e      	ldr	r5, [pc, #56]	; (18ec <_GLOBAL__sub_I_ptrStatesClass+0x50>)
    18b4:	47a8      	blx	r5
    18b6:	f204 579c 	addw	r7, r4, #1436	; 0x59c
    18ba:	4638      	mov	r0, r7
    18bc:	4b0c      	ldr	r3, [pc, #48]	; (18f0 <_GLOBAL__sub_I_ptrStatesClass+0x54>)
    18be:	4798      	blx	r3
    18c0:	4632      	mov	r2, r6
    18c2:	490c      	ldr	r1, [pc, #48]	; (18f4 <_GLOBAL__sub_I_ptrStatesClass+0x58>)
    18c4:	4638      	mov	r0, r7
    18c6:	47a8      	blx	r5
    18c8:	3480      	adds	r4, #128	; 0x80
    18ca:	4620      	mov	r0, r4
    18cc:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <_GLOBAL__sub_I_ptrStatesClass+0x5c>)
    18ce:	4798      	blx	r3
    18d0:	4632      	mov	r2, r6
    18d2:	490a      	ldr	r1, [pc, #40]	; (18fc <_GLOBAL__sub_I_ptrStatesClass+0x60>)
    18d4:	4620      	mov	r0, r4
    18d6:	47a8      	blx	r5
    18d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18da:	bf00      	nop
    18dc:	20000898 	.word	0x20000898
    18e0:	00001087 	.word	0x00001087
    18e4:	20000000 	.word	0x20000000
    18e8:	00001085 	.word	0x00001085
    18ec:	000170d1 	.word	0x000170d1
    18f0:	00000863 	.word	0x00000863
    18f4:	00000861 	.word	0x00000861
    18f8:	00001159 	.word	0x00001159
    18fc:	000010fd 	.word	0x000010fd

00001900 <_ZN12States_Class16saveCurrentStateEv>:
void States_Class::saveCurrentState(void){
    1900:	b5f0      	push	{r4, r5, r6, r7, lr}
    1902:	b083      	sub	sp, #12
    1904:	4605      	mov	r5, r0
		calendar.GetDateTime(&cdt);
    1906:	4e0f      	ldr	r6, [pc, #60]	; (1944 <_ZN12States_Class16saveCurrentStateEv+0x44>)
    1908:	4669      	mov	r1, sp
    190a:	4630      	mov	r0, r6
    190c:	4b0e      	ldr	r3, [pc, #56]	; (1948 <_ZN12States_Class16saveCurrentStateEv+0x48>)
    190e:	4798      	blx	r3
		hvacState->dateTime=cdt;
    1910:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    1914:	3308      	adds	r3, #8
    1916:	e89d 0003 	ldmia.w	sp, {r0, r1}
    191a:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    191e:	f8d5 7128 	ldr.w	r7, [r5, #296]	; 0x128
    1922:	4669      	mov	r1, sp
    1924:	4630      	mov	r0, r6
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <_ZN12States_Class16saveCurrentStateEv+0x4c>)
    1928:	4798      	blx	r3
    192a:	6078      	str	r0, [r7, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    192c:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
		if (hvacState->currentState==0)
    1930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1932:	b10b      	cbz	r3, 1938 <_ZN12States_Class16saveCurrentStateEv+0x38>
}
    1934:	b003      	add	sp, #12
    1936:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memory.SaveApplicationState(staticCurrentState);
    1938:	4905      	ldr	r1, [pc, #20]	; (1950 <_ZN12States_Class16saveCurrentStateEv+0x50>)
    193a:	4806      	ldr	r0, [pc, #24]	; (1954 <_ZN12States_Class16saveCurrentStateEv+0x54>)
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <_ZN12States_Class16saveCurrentStateEv+0x58>)
    193e:	4798      	blx	r3
}
    1940:	e7f8      	b.n	1934 <_ZN12States_Class16saveCurrentStateEv+0x34>
    1942:	bf00      	nop
    1944:	200024e0 	.word	0x200024e0
    1948:	00010fb1 	.word	0x00010fb1
    194c:	00011001 	.word	0x00011001
    1950:	2000089c 	.word	0x2000089c
    1954:	20003e0c 	.word	0x20003e0c
    1958:	00015289 	.word	0x00015289

0000195c <_ZN12States_Class9StateAUTOEm>:
{
    195c:	b5f0      	push	{r4, r5, r6, r7, lr}
    195e:	b085      	sub	sp, #20
    1960:	4604      	mov	r4, r0
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1962:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1966:	f8ad 3000 	strh.w	r3, [sp]
    196a:	f8ad 3002 	strh.w	r3, [sp, #2]
    196e:	2300      	movs	r3, #0
    1970:	9301      	str	r3, [sp, #4]
	data = v;
    1972:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1974:	9303      	str	r3, [sp, #12]
	hvacState->currentState=kHVACStateStandbyAUTO;
    1976:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    197a:	f240 1131 	movw	r1, #305	; 0x131
    197e:	6251      	str	r1, [r2, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_AUTO;
    1980:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    1984:	2002      	movs	r0, #2
    1986:	7710      	strb	r0, [r2, #28]
	hvacState->arincStatus.AC_CMD=true;
    1988:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    198c:	7f42      	ldrb	r2, [r0, #29]
    198e:	f042 0201 	orr.w	r2, r2, #1
    1992:	7742      	strb	r2, [r0, #29]
	gotAluEvent=false;
    1994:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	gotHVACEvent=false;
    1998:	f884 31a2 	strb.w	r3, [r4, #418]	; 0x1a2
	if (hvacState->lastState!=kHVACStateStandbyAUTO)
    199c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    19a0:	6a1b      	ldr	r3, [r3, #32]
    19a2:	428b      	cmp	r3, r1
    19a4:	d008      	beq.n	19b8 <_ZN12States_Class9StateAUTOEm+0x5c>
		fans.condesator->SetPWM(MINIMUN_FLOW_AIR);
    19a6:	4d36      	ldr	r5, [pc, #216]	; (1a80 <_ZN12States_Class9StateAUTOEm+0x124>)
    19a8:	2120      	movs	r1, #32
    19aa:	6e68      	ldr	r0, [r5, #100]	; 0x64
    19ac:	4b35      	ldr	r3, [pc, #212]	; (1a84 <_ZN12States_Class9StateAUTOEm+0x128>)
    19ae:	4798      	blx	r3
		fans.condesator->SetEnable(true);
    19b0:	2101      	movs	r1, #1
    19b2:	6e68      	ldr	r0, [r5, #100]	; 0x64
    19b4:	4b34      	ldr	r3, [pc, #208]	; (1a88 <_ZN12States_Class9StateAUTOEm+0x12c>)
    19b6:	4798      	blx	r3
	listener.eventHandler=&States_Class::CheckEvents;
    19b8:	4a34      	ldr	r2, [pc, #208]	; (1a8c <_ZN12States_Class9StateAUTOEm+0x130>)
    19ba:	4b35      	ldr	r3, [pc, #212]	; (1a90 <_ZN12States_Class9StateAUTOEm+0x134>)
    19bc:	615a      	str	r2, [r3, #20]
		ControlTemperatureSetpoint(0);
    19be:	2700      	movs	r7, #0
    19c0:	4e34      	ldr	r6, [pc, #208]	; (1a94 <_ZN12States_Class9StateAUTOEm+0x138>)
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    19c2:	4d35      	ldr	r5, [pc, #212]	; (1a98 <_ZN12States_Class9StateAUTOEm+0x13c>)
		ControlTemperatureSetpoint(0);
    19c4:	4639      	mov	r1, r7
    19c6:	4620      	mov	r0, r4
    19c8:	47b0      	blx	r6
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    19ca:	2208      	movs	r2, #8
    19cc:	4669      	mov	r1, sp
    19ce:	4620      	mov	r0, r4
    19d0:	47a8      	blx	r5
    19d2:	2800      	cmp	r0, #0
    19d4:	d0f6      	beq.n	19c4 <_ZN12States_Class9StateAUTOEm+0x68>
			switch(e.eventClass){
    19d6:	f8bd 3000 	ldrh.w	r3, [sp]
    19da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    19de:	d013      	beq.n	1a08 <_ZN12States_Class9StateAUTOEm+0xac>
    19e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    19e4:	d025      	beq.n	1a32 <_ZN12States_Class9StateAUTOEm+0xd6>
    19e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    19ea:	d1eb      	bne.n	19c4 <_ZN12States_Class9StateAUTOEm+0x68>
					switch (e.eventType){
    19ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    19f0:	2b03      	cmp	r3, #3
    19f2:	d1e7      	bne.n	19c4 <_ZN12States_Class9StateAUTOEm+0x68>
							saveCurrentState();
    19f4:	4620      	mov	r0, r4
    19f6:	4b29      	ldr	r3, [pc, #164]	; (1a9c <_ZN12States_Class9StateAUTOEm+0x140>)
    19f8:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    19fa:	2200      	movs	r2, #0
    19fc:	f240 1143 	movw	r1, #323	; 0x143
    1a00:	4620      	mov	r0, r4
    1a02:	4b27      	ldr	r3, [pc, #156]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a04:	4798      	blx	r3
						break;
    1a06:	e00c      	b.n	1a22 <_ZN12States_Class9StateAUTOEm+0xc6>
					switch (e.eventType){
    1a08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1a0c:	2b03      	cmp	r3, #3
    1a0e:	d1d9      	bne.n	19c4 <_ZN12States_Class9StateAUTOEm+0x68>
							saveCurrentState();
    1a10:	4620      	mov	r0, r4
    1a12:	4b22      	ldr	r3, [pc, #136]	; (1a9c <_ZN12States_Class9StateAUTOEm+0x140>)
    1a14:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    1a16:	2200      	movs	r2, #0
    1a18:	f240 1143 	movw	r1, #323	; 0x143
    1a1c:	4620      	mov	r0, r4
    1a1e:	4b20      	ldr	r3, [pc, #128]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a20:	4798      	blx	r3
	prepareStateChangeEvent(kHVACStateLeaving);
    1a22:	2200      	movs	r2, #0
    1a24:	f240 1143 	movw	r1, #323	; 0x143
    1a28:	4620      	mov	r0, r4
    1a2a:	4b1d      	ldr	r3, [pc, #116]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a2c:	4798      	blx	r3
}
    1a2e:	b005      	add	sp, #20
    1a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
				switch (e.eventType){
    1a32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1a36:	2b07      	cmp	r3, #7
    1a38:	d00f      	beq.n	1a5a <_ZN12States_Class9StateAUTOEm+0xfe>
    1a3a:	2b09      	cmp	r3, #9
    1a3c:	d014      	beq.n	1a68 <_ZN12States_Class9StateAUTOEm+0x10c>
    1a3e:	2b05      	cmp	r3, #5
    1a40:	d1c0      	bne.n	19c4 <_ZN12States_Class9StateAUTOEm+0x68>
					prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    1a42:	2200      	movs	r2, #0
    1a44:	f240 1133 	movw	r1, #307	; 0x133
    1a48:	4620      	mov	r0, r4
    1a4a:	4b15      	ldr	r3, [pc, #84]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a4c:	4798      	blx	r3
					fans.condesator->SetEnable(false);
    1a4e:	2100      	movs	r1, #0
    1a50:	4b0b      	ldr	r3, [pc, #44]	; (1a80 <_ZN12States_Class9StateAUTOEm+0x124>)
    1a52:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1a54:	4b0c      	ldr	r3, [pc, #48]	; (1a88 <_ZN12States_Class9StateAUTOEm+0x12c>)
    1a56:	4798      	blx	r3
					break;
    1a58:	e7e3      	b.n	1a22 <_ZN12States_Class9StateAUTOEm+0xc6>
					prepareStateChangeEvent(kHVACStateStandbyVENT);
    1a5a:	2200      	movs	r2, #0
    1a5c:	f44f 7198 	mov.w	r1, #304	; 0x130
    1a60:	4620      	mov	r0, r4
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a64:	4798      	blx	r3
					break;
    1a66:	e7dc      	b.n	1a22 <_ZN12States_Class9StateAUTOEm+0xc6>
					prepareStateChangeEvent(kHVACStateStandbyOFF);
    1a68:	2200      	movs	r2, #0
    1a6a:	f44f 7199 	mov.w	r1, #306	; 0x132
    1a6e:	4620      	mov	r0, r4
    1a70:	4b0b      	ldr	r3, [pc, #44]	; (1aa0 <_ZN12States_Class9StateAUTOEm+0x144>)
    1a72:	4798      	blx	r3
					fans.condesator->SetEnable(false);
    1a74:	2100      	movs	r1, #0
    1a76:	4b02      	ldr	r3, [pc, #8]	; (1a80 <_ZN12States_Class9StateAUTOEm+0x124>)
    1a78:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1a7a:	4b03      	ldr	r3, [pc, #12]	; (1a88 <_ZN12States_Class9StateAUTOEm+0x12c>)
    1a7c:	4798      	blx	r3
					break;
    1a7e:	e7d0      	b.n	1a22 <_ZN12States_Class9StateAUTOEm+0xc6>
    1a80:	200029b8 	.word	0x200029b8
    1a84:	00012531 	.word	0x00012531
    1a88:	000124fd 	.word	0x000124fd
    1a8c:	000017e5 	.word	0x000017e5
    1a90:	2000245c 	.word	0x2000245c
    1a94:	00002261 	.word	0x00002261
    1a98:	00001481 	.word	0x00001481
    1a9c:	00001901 	.word	0x00001901
    1aa0:	000014a1 	.word	0x000014a1

00001aa4 <_ZN12States_Class9StateVENTEm>:
{
    1aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa6:	b085      	sub	sp, #20
    1aa8:	4604      	mov	r4, r0
    1aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aae:	f8ad 3000 	strh.w	r3, [sp]
    1ab2:	f8ad 3002 	strh.w	r3, [sp, #2]
    1ab6:	2300      	movs	r3, #0
    1ab8:	9301      	str	r3, [sp, #4]
	data = v;
    1aba:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1abc:	9303      	str	r3, [sp, #12]
	hvacState->currentState=kHVACStateStandbyVENT;
    1abe:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1ac2:	f44f 7298 	mov.w	r2, #304	; 0x130
    1ac6:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_VENT;
    1ac8:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1acc:	2201      	movs	r2, #1
    1ace:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    1ad0:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    1ad4:	7f53      	ldrb	r3, [r2, #29]
    1ad6:	f043 0301 	orr.w	r3, r3, #1
    1ada:	7753      	strb	r3, [r2, #29]
	listener.eventHandler=&States_Class::CheckEvents;
    1adc:	4a3b      	ldr	r2, [pc, #236]	; (1bcc <_ZN12States_Class9StateVENTEm+0x128>)
    1ade:	4b3c      	ldr	r3, [pc, #240]	; (1bd0 <_ZN12States_Class9StateVENTEm+0x12c>)
    1ae0:	615a      	str	r2, [r3, #20]
	fans.condesator->ReadStatus();
    1ae2:	4d3c      	ldr	r5, [pc, #240]	; (1bd4 <_ZN12States_Class9StateVENTEm+0x130>)
    1ae4:	6e68      	ldr	r0, [r5, #100]	; 0x64
    1ae6:	4b3c      	ldr	r3, [pc, #240]	; (1bd8 <_ZN12States_Class9StateVENTEm+0x134>)
    1ae8:	4798      	blx	r3
	if ((fans.condesator->condesatorStatus.niAlcCdsFanExtFault))
    1aea:	6e68      	ldr	r0, [r5, #100]	; 0x64
    1aec:	78c3      	ldrb	r3, [r0, #3]
    1aee:	f013 0f04 	tst.w	r3, #4
    1af2:	d125      	bne.n	1b40 <_ZN12States_Class9StateVENTEm+0x9c>
		 OperateTemperatureBySetpoint(0);
    1af4:	f104 0720 	add.w	r7, r4, #32
    1af8:	4e38      	ldr	r6, [pc, #224]	; (1bdc <_ZN12States_Class9StateVENTEm+0x138>)
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    1afa:	4d39      	ldr	r5, [pc, #228]	; (1be0 <_ZN12States_Class9StateVENTEm+0x13c>)
		 OperateTemperatureBySetpoint(0);
    1afc:	2100      	movs	r1, #0
    1afe:	4638      	mov	r0, r7
    1b00:	47b0      	blx	r6
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    1b02:	2208      	movs	r2, #8
    1b04:	4669      	mov	r1, sp
    1b06:	4620      	mov	r0, r4
    1b08:	47a8      	blx	r5
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0f6      	beq.n	1afc <_ZN12States_Class9StateVENTEm+0x58>
			switch(e.eventClass){
    1b0e:	f8bd 3000 	ldrh.w	r3, [sp]
    1b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1b16:	d01c      	beq.n	1b52 <_ZN12States_Class9StateVENTEm+0xae>
    1b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1b1c:	d02e      	beq.n	1b7c <_ZN12States_Class9StateVENTEm+0xd8>
    1b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1b22:	d1eb      	bne.n	1afc <_ZN12States_Class9StateVENTEm+0x58>
					switch (e.eventType){
    1b24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1b28:	2b03      	cmp	r3, #3
    1b2a:	d1e7      	bne.n	1afc <_ZN12States_Class9StateVENTEm+0x58>
						saveCurrentState();
    1b2c:	4620      	mov	r0, r4
    1b2e:	4b2d      	ldr	r3, [pc, #180]	; (1be4 <_ZN12States_Class9StateVENTEm+0x140>)
    1b30:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    1b32:	2200      	movs	r2, #0
    1b34:	f240 1143 	movw	r1, #323	; 0x143
    1b38:	4620      	mov	r0, r4
    1b3a:	4b2b      	ldr	r3, [pc, #172]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1b3c:	4798      	blx	r3
						break;
    1b3e:	e015      	b.n	1b6c <_ZN12States_Class9StateVENTEm+0xc8>
			if (fans.condesator->IsEnabled())
    1b40:	4b2a      	ldr	r3, [pc, #168]	; (1bec <_ZN12States_Class9StateVENTEm+0x148>)
    1b42:	4798      	blx	r3
    1b44:	2800      	cmp	r0, #0
    1b46:	d1d5      	bne.n	1af4 <_ZN12States_Class9StateVENTEm+0x50>
				fans.condesator->SetEnable(true);
    1b48:	2101      	movs	r1, #1
    1b4a:	6e68      	ldr	r0, [r5, #100]	; 0x64
    1b4c:	4b28      	ldr	r3, [pc, #160]	; (1bf0 <_ZN12States_Class9StateVENTEm+0x14c>)
    1b4e:	4798      	blx	r3
    1b50:	e7d0      	b.n	1af4 <_ZN12States_Class9StateVENTEm+0x50>
					switch (e.eventType){
    1b52:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1b56:	2b03      	cmp	r3, #3
    1b58:	d1d0      	bne.n	1afc <_ZN12States_Class9StateVENTEm+0x58>
						saveCurrentState();
    1b5a:	4620      	mov	r0, r4
    1b5c:	4b21      	ldr	r3, [pc, #132]	; (1be4 <_ZN12States_Class9StateVENTEm+0x140>)
    1b5e:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    1b60:	2200      	movs	r2, #0
    1b62:	f240 1143 	movw	r1, #323	; 0x143
    1b66:	4620      	mov	r0, r4
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1b6a:	4798      	blx	r3
	prepareStateChangeEvent(kHVACStateLeaving);
    1b6c:	2200      	movs	r2, #0
    1b6e:	f240 1143 	movw	r1, #323	; 0x143
    1b72:	4620      	mov	r0, r4
    1b74:	4b1c      	ldr	r3, [pc, #112]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1b76:	4798      	blx	r3
}
    1b78:	b005      	add	sp, #20
    1b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					switch (e.eventType){
    1b7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1b80:	2b06      	cmp	r3, #6
    1b82:	d00f      	beq.n	1ba4 <_ZN12States_Class9StateVENTEm+0x100>
    1b84:	2b09      	cmp	r3, #9
    1b86:	d014      	beq.n	1bb2 <_ZN12States_Class9StateVENTEm+0x10e>
    1b88:	2b05      	cmp	r3, #5
    1b8a:	d1b7      	bne.n	1afc <_ZN12States_Class9StateVENTEm+0x58>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    1b8c:	2200      	movs	r2, #0
    1b8e:	f240 1133 	movw	r1, #307	; 0x133
    1b92:	4620      	mov	r0, r4
    1b94:	4b14      	ldr	r3, [pc, #80]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1b96:	4798      	blx	r3
							fans.condesator->SetEnable(false);
    1b98:	2100      	movs	r1, #0
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <_ZN12States_Class9StateVENTEm+0x130>)
    1b9c:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1b9e:	4b14      	ldr	r3, [pc, #80]	; (1bf0 <_ZN12States_Class9StateVENTEm+0x14c>)
    1ba0:	4798      	blx	r3
							break;
    1ba2:	e7e3      	b.n	1b6c <_ZN12States_Class9StateVENTEm+0xc8>
							prepareStateChangeEvent(kHVACStateStandbyAUTO);
    1ba4:	2200      	movs	r2, #0
    1ba6:	f240 1131 	movw	r1, #305	; 0x131
    1baa:	4620      	mov	r0, r4
    1bac:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1bae:	4798      	blx	r3
							break;
    1bb0:	e7dc      	b.n	1b6c <_ZN12States_Class9StateVENTEm+0xc8>
							fans.condesator->SetEnable(false);
    1bb2:	2100      	movs	r1, #0
    1bb4:	4b07      	ldr	r3, [pc, #28]	; (1bd4 <_ZN12States_Class9StateVENTEm+0x130>)
    1bb6:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1bb8:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <_ZN12States_Class9StateVENTEm+0x14c>)
    1bba:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateStandbyOFF);
    1bbc:	2200      	movs	r2, #0
    1bbe:	f44f 7199 	mov.w	r1, #306	; 0x132
    1bc2:	4620      	mov	r0, r4
    1bc4:	4b08      	ldr	r3, [pc, #32]	; (1be8 <_ZN12States_Class9StateVENTEm+0x144>)
    1bc6:	4798      	blx	r3
							break;
    1bc8:	e7d0      	b.n	1b6c <_ZN12States_Class9StateVENTEm+0xc8>
    1bca:	bf00      	nop
    1bcc:	000017e5 	.word	0x000017e5
    1bd0:	2000245c 	.word	0x2000245c
    1bd4:	200029b8 	.word	0x200029b8
    1bd8:	000124d1 	.word	0x000124d1
    1bdc:	00002395 	.word	0x00002395
    1be0:	00001481 	.word	0x00001481
    1be4:	00001901 	.word	0x00001901
    1be8:	000014a1 	.word	0x000014a1
    1bec:	00012515 	.word	0x00012515
    1bf0:	000124fd 	.word	0x000124fd

00001bf4 <_ZN12States_Class12StateLeavingEm>:
{
    1bf4:	b508      	push	{r3, lr}
	hvacState->lastState=hvacState->callingState;
    1bf6:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
    1bfa:	6a91      	ldr	r1, [r2, #40]	; 0x28
    1bfc:	6211      	str	r1, [r2, #32]
	hvacState->currentState=kHVACStateLeaving;
    1bfe:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1c02:	f240 1243 	movw	r2, #323	; 0x143
    1c06:	625a      	str	r2, [r3, #36]	; 0x24
	saveCurrentState();
    1c08:	4b01      	ldr	r3, [pc, #4]	; (1c10 <_ZN12States_Class12StateLeavingEm+0x1c>)
    1c0a:	4798      	blx	r3
    1c0c:	bd08      	pop	{r3, pc}
    1c0e:	bf00      	nop
    1c10:	00001901 	.word	0x00001901

00001c14 <_ZN12States_Class15handleHVACEventER5event>:
	{
    1c14:	b538      	push	{r3, r4, r5, lr}
    1c16:	4604      	mov	r4, r0
		hvacState->callingState = hvacState->currentState;
    1c18:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1c1e:	629a      	str	r2, [r3, #40]	; 0x28
	if (hvacState->currentState != kHVACStateResume){
    1c20:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1c24:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1c26:	f240 122f 	movw	r2, #303	; 0x12f
    1c2a:	4290      	cmp	r0, r2
    1c2c:	d022      	beq.n	1c74 <_ZN12States_Class15handleHVACEventER5event+0x60>
		hvacState->currentState = e.data.wordData[0];
    1c2e:	890a      	ldrh	r2, [r1, #8]
    1c30:	625a      	str	r2, [r3, #36]	; 0x24
		hvacState->stateFlags = e.data.wordData[1];
    1c32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    1c36:	894a      	ldrh	r2, [r1, #10]
    1c38:	631a      	str	r2, [r3, #48]	; 0x30
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    1c3a:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
    1c3e:	4839      	ldr	r0, [pc, #228]	; (1d24 <_ZN12States_Class15handleHVACEventER5event+0x110>)
    1c40:	4b39      	ldr	r3, [pc, #228]	; (1d28 <_ZN12States_Class15handleHVACEventER5event+0x114>)
    1c42:	4798      	blx	r3
    1c44:	6368      	str	r0, [r5, #52]	; 0x34
	saveCurrentState();
    1c46:	4620      	mov	r0, r4
    1c48:	4b38      	ldr	r3, [pc, #224]	; (1d2c <_ZN12States_Class15handleHVACEventER5event+0x118>)
    1c4a:	4798      	blx	r3
	switch (hvacState->currentState)
    1c4c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    1c50:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1c52:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    1c56:	2b15      	cmp	r3, #21
    1c58:	d85f      	bhi.n	1d1a <_ZN12States_Class15handleHVACEventER5event+0x106>
    1c5a:	e8df f003 	tbb	[pc, r3]
    1c5e:	130e      	.short	0x130e
    1c60:	3618272c 	.word	0x3618272c
    1c64:	5e31221d 	.word	0x5e31221d
    1c68:	5e453b5e 	.word	0x5e453b5e
    1c6c:	4f4a5e40 	.word	0x4f4a5e40
    1c70:	595e5e54 	.word	0x595e5e54
		hvacState->currentState=hvacState->lastState;
    1c74:	6a1a      	ldr	r2, [r3, #32]
    1c76:	625a      	str	r2, [r3, #36]	; 0x24
    1c78:	e7df      	b.n	1c3a <_ZN12States_Class15handleHVACEventER5event+0x26>
			StateInitialize(hvacState->stateFlags);
    1c7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1c7c:	4620      	mov	r0, r4
    1c7e:	4b2c      	ldr	r3, [pc, #176]	; (1d30 <_ZN12States_Class15handleHVACEventER5event+0x11c>)
    1c80:	4798      	blx	r3
			break;
    1c82:	bd38      	pop	{r3, r4, r5, pc}
			StateResume(hvacState->stateFlags);
    1c84:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1c86:	4620      	mov	r0, r4
    1c88:	4b2a      	ldr	r3, [pc, #168]	; (1d34 <_ZN12States_Class15handleHVACEventER5event+0x120>)
    1c8a:	4798      	blx	r3
			break;
    1c8c:	bd38      	pop	{r3, r4, r5, pc}
			StateStandbyOFF(hvacState->stateFlags);
    1c8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1c90:	4620      	mov	r0, r4
    1c92:	4b29      	ldr	r3, [pc, #164]	; (1d38 <_ZN12States_Class15handleHVACEventER5event+0x124>)
    1c94:	4798      	blx	r3
			break;
    1c96:	bd38      	pop	{r3, r4, r5, pc}
			StatePrepareStandbyON(hvacState->stateFlags);
    1c98:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1c9a:	4620      	mov	r0, r4
    1c9c:	4b27      	ldr	r3, [pc, #156]	; (1d3c <_ZN12States_Class15handleHVACEventER5event+0x128>)
    1c9e:	4798      	blx	r3
			break;
    1ca0:	bd38      	pop	{r3, r4, r5, pc}
			handleStateStandbyON(hvacState->stateFlags);
    1ca2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1ca4:	4620      	mov	r0, r4
    1ca6:	4b26      	ldr	r3, [pc, #152]	; (1d40 <_ZN12States_Class15handleHVACEventER5event+0x12c>)
    1ca8:	4798      	blx	r3
			break;
    1caa:	bd38      	pop	{r3, r4, r5, pc}
			StateAUTO(hvacState->stateFlags);
    1cac:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cae:	4620      	mov	r0, r4
    1cb0:	4b24      	ldr	r3, [pc, #144]	; (1d44 <_ZN12States_Class15handleHVACEventER5event+0x130>)
    1cb2:	4798      	blx	r3
			break;
    1cb4:	bd38      	pop	{r3, r4, r5, pc}
			StateVENT(hvacState->stateFlags);
    1cb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cb8:	4620      	mov	r0, r4
    1cba:	4b23      	ldr	r3, [pc, #140]	; (1d48 <_ZN12States_Class15handleHVACEventER5event+0x134>)
    1cbc:	4798      	blx	r3
			break;
    1cbe:	bd38      	pop	{r3, r4, r5, pc}
			handleStateStandbyReady(hvacState->stateFlags);
    1cc0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cc2:	4620      	mov	r0, r4
    1cc4:	4b21      	ldr	r3, [pc, #132]	; (1d4c <_ZN12States_Class15handleHVACEventER5event+0x138>)
    1cc6:	4798      	blx	r3
			break;
    1cc8:	bd38      	pop	{r3, r4, r5, pc}
			StatePrepareStandbyOFF(hvacState->stateFlags);
    1cca:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1ccc:	4620      	mov	r0, r4
    1cce:	4b20      	ldr	r3, [pc, #128]	; (1d50 <_ZN12States_Class15handleHVACEventER5event+0x13c>)
    1cd0:	4798      	blx	r3
			break;
    1cd2:	bd38      	pop	{r3, r4, r5, pc}
			handleStateON(hvacState->stateFlags);
    1cd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cd6:	4620      	mov	r0, r4
    1cd8:	4b1e      	ldr	r3, [pc, #120]	; (1d54 <_ZN12States_Class15handleHVACEventER5event+0x140>)
    1cda:	4798      	blx	r3
			break;
    1cdc:	bd38      	pop	{r3, r4, r5, pc}
			handleStateFinished(hvacState->stateFlags);
    1cde:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1ce0:	4620      	mov	r0, r4
    1ce2:	4b1d      	ldr	r3, [pc, #116]	; (1d58 <_ZN12States_Class15handleHVACEventER5event+0x144>)
    1ce4:	4798      	blx	r3
			break;
    1ce6:	bd38      	pop	{r3, r4, r5, pc}
			StateStoppedProcess(hvacState->stateFlags);
    1ce8:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cea:	4620      	mov	r0, r4
    1cec:	4b1b      	ldr	r3, [pc, #108]	; (1d5c <_ZN12States_Class15handleHVACEventER5event+0x148>)
    1cee:	4798      	blx	r3
			break;
    1cf0:	bd38      	pop	{r3, r4, r5, pc}
			handleStateSelfProtect(hvacState->stateFlags);
    1cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cf4:	4620      	mov	r0, r4
    1cf6:	4b1a      	ldr	r3, [pc, #104]	; (1d60 <_ZN12States_Class15handleHVACEventER5event+0x14c>)
    1cf8:	4798      	blx	r3
			break;
    1cfa:	bd38      	pop	{r3, r4, r5, pc}
			handleStateError(hvacState->stateFlags);
    1cfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1cfe:	4620      	mov	r0, r4
    1d00:	4b18      	ldr	r3, [pc, #96]	; (1d64 <_ZN12States_Class15handleHVACEventER5event+0x150>)
    1d02:	4798      	blx	r3
			break;
    1d04:	bd38      	pop	{r3, r4, r5, pc}
			handleStateMaintenance(hvacState->stateFlags);
    1d06:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1d08:	4620      	mov	r0, r4
    1d0a:	4b17      	ldr	r3, [pc, #92]	; (1d68 <_ZN12States_Class15handleHVACEventER5event+0x154>)
    1d0c:	4798      	blx	r3
			break;
    1d0e:	bd38      	pop	{r3, r4, r5, pc}
			StateLeaving(hvacState->stateFlags);
    1d10:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1d12:	4620      	mov	r0, r4
    1d14:	4b15      	ldr	r3, [pc, #84]	; (1d6c <_ZN12States_Class15handleHVACEventER5event+0x158>)
    1d16:	4798      	blx	r3
		break;
    1d18:	bd38      	pop	{r3, r4, r5, pc}
			handleStateError(kHVACErrorIllegalStateTransition);
    1d1a:	2102      	movs	r1, #2
    1d1c:	4620      	mov	r0, r4
    1d1e:	4b11      	ldr	r3, [pc, #68]	; (1d64 <_ZN12States_Class15handleHVACEventER5event+0x150>)
    1d20:	4798      	blx	r3
    1d22:	bd38      	pop	{r3, r4, r5, pc}
    1d24:	20002708 	.word	0x20002708
    1d28:	000114f5 	.word	0x000114f5
    1d2c:	00001901 	.word	0x00001901
    1d30:	00001725 	.word	0x00001725
    1d34:	000014d5 	.word	0x000014d5
    1d38:	00001551 	.word	0x00001551
    1d3c:	00001675 	.word	0x00001675
    1d40:	000012d1 	.word	0x000012d1
    1d44:	0000195d 	.word	0x0000195d
    1d48:	00001aa5 	.word	0x00001aa5
    1d4c:	00001331 	.word	0x00001331
    1d50:	000016d1 	.word	0x000016d1
    1d54:	00001361 	.word	0x00001361
    1d58:	00001391 	.word	0x00001391
    1d5c:	000013c1 	.word	0x000013c1
    1d60:	000013f1 	.word	0x000013f1
    1d64:	00001421 	.word	0x00001421
    1d68:	00001451 	.word	0x00001451
    1d6c:	00001bf5 	.word	0x00001bf5

00001d70 <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    1d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d74:	b087      	sub	sp, #28
    1d76:	4607      	mov	r7, r0
		if (operationMode==0)
    1d78:	460c      	mov	r4, r1
    1d7a:	b911      	cbnz	r1, 1d82 <_ZN12States_Class16ControllerResumeEh+0x12>
			if (timeElapsed)
    1d7c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
    1d80:	bb13      	cbnz	r3, 1dc8 <_ZN12States_Class16ControllerResumeEh+0x58>
		if (hvacState->currentState==kHVACStateLeaving)
    1d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
    1d86:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1d88:	f240 1243 	movw	r2, #323	; 0x143
    1d8c:	4291      	cmp	r1, r2
			prepareStateChangeEvent(hvacState->lastState);
    1d8e:	f04f 0200 	mov.w	r2, #0
    1d92:	bf0c      	ite	eq
    1d94:	8c19      	ldrheq	r1, [r3, #32]
			prepareStateChangeEvent(kHVACStateInitialize);
    1d96:	f44f 7197 	movne.w	r1, #302	; 0x12e
    1d9a:	4638      	mov	r0, r7
    1d9c:	4b2d      	ldr	r3, [pc, #180]	; (1e54 <_ZN12States_Class16ControllerResumeEh+0xe4>)
    1d9e:	4798      	blx	r3
		if (operationMode>0)
    1da0:	2c00      	cmp	r4, #0
    1da2:	d04e      	beq.n	1e42 <_ZN12States_Class16ControllerResumeEh+0xd2>
    1da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1da8:	f8ad 3008 	strh.w	r3, [sp, #8]
    1dac:	f8ad 300a 	strh.w	r3, [sp, #10]
    1db0:	2600      	movs	r6, #0
    1db2:	9603      	str	r6, [sp, #12]
	data = v;
    1db4:	9604      	str	r6, [sp, #16]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1db6:	9605      	str	r6, [sp, #20]
			listener.eventHandler=&States_Class::CheckEvents;
    1db8:	4a27      	ldr	r2, [pc, #156]	; (1e58 <_ZN12States_Class16ControllerResumeEh+0xe8>)
    1dba:	4b28      	ldr	r3, [pc, #160]	; (1e5c <_ZN12States_Class16ControllerResumeEh+0xec>)
    1dbc:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    1dbe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1e8c <_ZN12States_Class16ControllerResumeEh+0x11c>
    1dc2:	4d27      	ldr	r5, [pc, #156]	; (1e60 <_ZN12States_Class16ControllerResumeEh+0xf0>)
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    1dc4:	4698      	mov	r8, r3
    1dc6:	e019      	b.n	1dfc <_ZN12States_Class16ControllerResumeEh+0x8c>
    1dc8:	4e26      	ldr	r6, [pc, #152]	; (1e64 <_ZN12States_Class16ControllerResumeEh+0xf4>)
    1dca:	4927      	ldr	r1, [pc, #156]	; (1e68 <_ZN12States_Class16ControllerResumeEh+0xf8>)
    1dcc:	4630      	mov	r0, r6
    1dce:	4d27      	ldr	r5, [pc, #156]	; (1e6c <_ZN12States_Class16ControllerResumeEh+0xfc>)
    1dd0:	47a8      	blx	r5
    1dd2:	4927      	ldr	r1, [pc, #156]	; (1e70 <_ZN12States_Class16ControllerResumeEh+0x100>)
    1dd4:	4630      	mov	r0, r6
    1dd6:	47a8      	blx	r5
				timeElapsed=false;
    1dd8:	2300      	movs	r3, #0
    1dda:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
				delay_ms(10);
    1dde:	200a      	movs	r0, #10
    1de0:	4b24      	ldr	r3, [pc, #144]	; (1e74 <_ZN12States_Class16ControllerResumeEh+0x104>)
    1de2:	4798      	blx	r3
    1de4:	e7cd      	b.n	1d82 <_ZN12States_Class16ControllerResumeEh+0x12>
					handleHVACEvent(e);
    1de6:	a902      	add	r1, sp, #8
    1de8:	4638      	mov	r0, r7
    1dea:	4b23      	ldr	r3, [pc, #140]	; (1e78 <_ZN12States_Class16ControllerResumeEh+0x108>)
    1dec:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    1dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
    1df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1df4:	f240 1343 	movw	r3, #323	; 0x143
    1df8:	429a      	cmp	r2, r3
    1dfa:	d028      	beq.n	1e4e <_ZN12States_Class16ControllerResumeEh+0xde>
			while ((cBit.IsOK())&&(!done))
    1dfc:	4648      	mov	r0, r9
    1dfe:	47a8      	blx	r5
    1e00:	b328      	cbz	r0, 1e4e <_ZN12States_Class16ControllerResumeEh+0xde>
    1e02:	bb26      	cbnz	r6, 1e4e <_ZN12States_Class16ControllerResumeEh+0xde>
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    1e04:	2308      	movs	r3, #8
    1e06:	9300      	str	r3, [sp, #0]
    1e08:	f44f 7300 	mov.w	r3, #512	; 0x200
    1e0c:	461a      	mov	r2, r3
    1e0e:	a902      	add	r1, sp, #8
    1e10:	4640      	mov	r0, r8
    1e12:	4c1a      	ldr	r4, [pc, #104]	; (1e7c <_ZN12States_Class16ControllerResumeEh+0x10c>)
    1e14:	47a0      	blx	r4
    1e16:	2800      	cmp	r0, #0
    1e18:	d1e5      	bne.n	1de6 <_ZN12States_Class16ControllerResumeEh+0x76>
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    1e1a:	2304      	movs	r3, #4
    1e1c:	9300      	str	r3, [sp, #0]
    1e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1e22:	f44f 7240 	mov.w	r2, #768	; 0x300
    1e26:	a902      	add	r1, sp, #8
    1e28:	4640      	mov	r0, r8
    1e2a:	4c15      	ldr	r4, [pc, #84]	; (1e80 <_ZN12States_Class16ControllerResumeEh+0x110>)
    1e2c:	47a0      	blx	r4
    1e2e:	4606      	mov	r6, r0
    1e30:	2800      	cmp	r0, #0
    1e32:	d0e3      	beq.n	1dfc <_ZN12States_Class16ControllerResumeEh+0x8c>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    1e34:	2200      	movs	r2, #0
    1e36:	f240 1105 	movw	r1, #261	; 0x105
    1e3a:	4812      	ldr	r0, [pc, #72]	; (1e84 <_ZN12States_Class16ControllerResumeEh+0x114>)
    1e3c:	4b12      	ldr	r3, [pc, #72]	; (1e88 <_ZN12States_Class16ControllerResumeEh+0x118>)
    1e3e:	4798      	blx	r3
    1e40:	e7dc      	b.n	1dfc <_ZN12States_Class16ControllerResumeEh+0x8c>
			alu.PrepareNewEvent(kALUEventSimpleStart);
    1e42:	2200      	movs	r2, #0
    1e44:	f44f 7182 	mov.w	r1, #260	; 0x104
    1e48:	480e      	ldr	r0, [pc, #56]	; (1e84 <_ZN12States_Class16ControllerResumeEh+0x114>)
    1e4a:	4b0f      	ldr	r3, [pc, #60]	; (1e88 <_ZN12States_Class16ControllerResumeEh+0x118>)
    1e4c:	4798      	blx	r3
}
    1e4e:	b007      	add	sp, #28
    1e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e54:	000014a1 	.word	0x000014a1
    1e58:	000017e5 	.word	0x000017e5
    1e5c:	2000245c 	.word	0x2000245c
    1e60:	00000869 	.word	0x00000869
    1e64:	20002760 	.word	0x20002760
    1e68:	00019714 	.word	0x00019714
    1e6c:	00011d51 	.word	0x00011d51
    1e70:	000195d4 	.word	0x000195d4
    1e74:	00003ed5 	.word	0x00003ed5
    1e78:	00001c15 	.word	0x00001c15
    1e7c:	000109cd 	.word	0x000109cd
    1e80:	00010a05 	.word	0x00010a05
    1e84:	20000640 	.word	0x20000640
    1e88:	00000501 	.word	0x00000501
    1e8c:	20000e34 	.word	0x20000e34

00001e90 <_ZN12States_Class5StartEh>:
	{
    1e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e94:	b087      	sub	sp, #28
	hvacState->currentState = kHVACStateStart;
    1e96:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    1e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
    1e9e:	625a      	str	r2, [r3, #36]	; 0x24
	if (operationMode==0)
    1ea0:	b9a1      	cbnz	r1, 1ecc <_ZN12States_Class5StartEh+0x3c>
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    1ea2:	2264      	movs	r2, #100	; 0x64
    1ea4:	492d      	ldr	r1, [pc, #180]	; (1f5c <_ZN12States_Class5StartEh+0xcc>)
    1ea6:	482e      	ldr	r0, [pc, #184]	; (1f60 <_ZN12States_Class5StartEh+0xd0>)
    1ea8:	4b2e      	ldr	r3, [pc, #184]	; (1f64 <_ZN12States_Class5StartEh+0xd4>)
    1eaa:	4798      	blx	r3
    1eac:	4d2e      	ldr	r5, [pc, #184]	; (1f68 <_ZN12States_Class5StartEh+0xd8>)
    1eae:	492f      	ldr	r1, [pc, #188]	; (1f6c <_ZN12States_Class5StartEh+0xdc>)
    1eb0:	4628      	mov	r0, r5
    1eb2:	4c2f      	ldr	r4, [pc, #188]	; (1f70 <_ZN12States_Class5StartEh+0xe0>)
    1eb4:	47a0      	blx	r4
    1eb6:	492f      	ldr	r1, [pc, #188]	; (1f74 <_ZN12States_Class5StartEh+0xe4>)
    1eb8:	4628      	mov	r0, r5
    1eba:	47a0      	blx	r4
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    1ebc:	2200      	movs	r2, #0
    1ebe:	2103      	movs	r1, #3
    1ec0:	482d      	ldr	r0, [pc, #180]	; (1f78 <_ZN12States_Class5StartEh+0xe8>)
    1ec2:	4b2e      	ldr	r3, [pc, #184]	; (1f7c <_ZN12States_Class5StartEh+0xec>)
    1ec4:	4798      	blx	r3
}
    1ec6:	b007      	add	sp, #28
    1ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ecc:	4604      	mov	r4, r0
	readResult=0;
    1ece:	2500      	movs	r5, #0
    1ed0:	f8c0 5254 	str.w	r5, [r0, #596]	; 0x254
		prepareStateChangeEvent(kHVACStateInitialize);
    1ed4:	462a      	mov	r2, r5
    1ed6:	f44f 7197 	mov.w	r1, #302	; 0x12e
    1eda:	4b29      	ldr	r3, [pc, #164]	; (1f80 <_ZN12States_Class5StartEh+0xf0>)
    1edc:	4798      	blx	r3
    1ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ee2:	f8ad 3008 	strh.w	r3, [sp, #8]
    1ee6:	f8ad 300a 	strh.w	r3, [sp, #10]
    1eea:	9503      	str	r5, [sp, #12]
	data = v;
    1eec:	9504      	str	r5, [sp, #16]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1eee:	9505      	str	r5, [sp, #20]
		listener.eventHandler=&States_Class::CheckEvents;
    1ef0:	4a24      	ldr	r2, [pc, #144]	; (1f84 <_ZN12States_Class5StartEh+0xf4>)
    1ef2:	4b25      	ldr	r3, [pc, #148]	; (1f88 <_ZN12States_Class5StartEh+0xf8>)
    1ef4:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    1ef6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1fa0 <_ZN12States_Class5StartEh+0x110>
    1efa:	4f24      	ldr	r7, [pc, #144]	; (1f8c <_ZN12States_Class5StartEh+0xfc>)
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    1efc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1fa4 <_ZN12States_Class5StartEh+0x114>
    1f00:	e008      	b.n	1f14 <_ZN12States_Class5StartEh+0x84>
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    1f02:	9500      	str	r5, [sp, #0]
    1f04:	2303      	movs	r3, #3
    1f06:	f44f 7240 	mov.w	r2, #768	; 0x300
    1f0a:	a902      	add	r1, sp, #8
    1f0c:	481e      	ldr	r0, [pc, #120]	; (1f88 <_ZN12States_Class5StartEh+0xf8>)
    1f0e:	4d20      	ldr	r5, [pc, #128]	; (1f90 <_ZN12States_Class5StartEh+0x100>)
    1f10:	47a8      	blx	r5
    1f12:	b9d8      	cbnz	r0, 1f4c <_ZN12States_Class5StartEh+0xbc>
		while ((cBit.IsOK())&&(!done))
    1f14:	4640      	mov	r0, r8
    1f16:	47b8      	blx	r7
    1f18:	2800      	cmp	r0, #0
    1f1a:	d0d4      	beq.n	1ec6 <_ZN12States_Class5StartEh+0x36>
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    1f1c:	f8d9 5000 	ldr.w	r5, [r9]
    1f20:	9500      	str	r5, [sp, #0]
    1f22:	f44f 7300 	mov.w	r3, #512	; 0x200
    1f26:	461a      	mov	r2, r3
    1f28:	a902      	add	r1, sp, #8
    1f2a:	4817      	ldr	r0, [pc, #92]	; (1f88 <_ZN12States_Class5StartEh+0xf8>)
    1f2c:	4e19      	ldr	r6, [pc, #100]	; (1f94 <_ZN12States_Class5StartEh+0x104>)
    1f2e:	47b0      	blx	r6
    1f30:	2800      	cmp	r0, #0
    1f32:	d0e6      	beq.n	1f02 <_ZN12States_Class5StartEh+0x72>
				handleHVACEvent(e);
    1f34:	a902      	add	r1, sp, #8
    1f36:	4620      	mov	r0, r4
    1f38:	4b17      	ldr	r3, [pc, #92]	; (1f98 <_ZN12States_Class5StartEh+0x108>)
    1f3a:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    1f3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    1f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1f42:	f240 1343 	movw	r3, #323	; 0x143
    1f46:	429a      	cmp	r2, r3
    1f48:	d1e4      	bne.n	1f14 <_ZN12States_Class5StartEh+0x84>
    1f4a:	e7bc      	b.n	1ec6 <_ZN12States_Class5StartEh+0x36>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    1f4c:	2200      	movs	r2, #0
    1f4e:	f44f 7182 	mov.w	r1, #260	; 0x104
    1f52:	4809      	ldr	r0, [pc, #36]	; (1f78 <_ZN12States_Class5StartEh+0xe8>)
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <_ZN12States_Class5StartEh+0x10c>)
    1f56:	4798      	blx	r3
					break;
    1f58:	e7b5      	b.n	1ec6 <_ZN12States_Class5StartEh+0x36>
    1f5a:	bf00      	nop
    1f5c:	000010b5 	.word	0x000010b5
    1f60:	20002708 	.word	0x20002708
    1f64:	00011429 	.word	0x00011429
    1f68:	20002760 	.word	0x20002760
    1f6c:	00019738 	.word	0x00019738
    1f70:	00011d51 	.word	0x00011d51
    1f74:	000195d4 	.word	0x000195d4
    1f78:	20000640 	.word	0x20000640
    1f7c:	000004e9 	.word	0x000004e9
    1f80:	000014a1 	.word	0x000014a1
    1f84:	000017e5 	.word	0x000017e5
    1f88:	2000245c 	.word	0x2000245c
    1f8c:	00000869 	.word	0x00000869
    1f90:	00010a05 	.word	0x00010a05
    1f94:	000109cd 	.word	0x000109cd
    1f98:	00001c15 	.word	0x00001c15
    1f9c:	00000501 	.word	0x00000501
    1fa0:	20000e34 	.word	0x20000e34
    1fa4:	0001a830 	.word	0x0001a830

00001fa8 <_ZN17TaskHandler_ClassC1Ev>:
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
{
	taskListPrivate=(list_descriptor*)listElements;
    1fa8:	4b01      	ldr	r3, [pc, #4]	; (1fb0 <_ZN17TaskHandler_ClassC1Ev+0x8>)
    1faa:	60c3      	str	r3, [r0, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    1fac:	4770      	bx	lr
    1fae:	bf00      	nop
    1fb0:	20000e38 	.word	0x20000e38

00001fb4 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
{
} //~TaskHandler_Class
    1fb4:	4770      	bx	lr
	...

00001fb8 <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    1fb8:	b430      	push	{r4, r5}
	for (i=1; i<MAXIMUM_TASKS; i++)
    1fba:	2101      	movs	r1, #1
    1fbc:	7201      	strb	r1, [r0, #8]
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    1fbe:	4a16      	ldr	r2, [pc, #88]	; (2018 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x60>)
    1fc0:	2400      	movs	r4, #0
		taskStorage[i].id=kALUNotTaskEvent;
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    1fc2:	f102 0530 	add.w	r5, r2, #48	; 0x30
		taskStorage[i].elem.next = (list_element*)NULL;
    1fc6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    1fca:	630c      	str	r4, [r1, #48]	; 0x30
		taskStorage[i].id=kALUNotTaskEvent;
    1fcc:	7a03      	ldrb	r3, [r0, #8]
    1fce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1fd2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    1fd6:	7a03      	ldrb	r3, [r0, #8]
    1fd8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    1fdc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    1fe0:	628b      	str	r3, [r1, #40]	; 0x28
		listElements[i].next = (list_element*)NULL;
    1fe2:	7a03      	ldrb	r3, [r0, #8]
    1fe4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		listElements[i-1].next = &listElements[i];
    1fe8:	7a03      	ldrb	r3, [r0, #8]
    1fea:	1e59      	subs	r1, r3, #1
    1fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ff0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    1ff4:	7a03      	ldrb	r3, [r0, #8]
    1ff6:	3301      	adds	r3, #1
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	7203      	strb	r3, [r0, #8]
    1ffc:	4619      	mov	r1, r3
    1ffe:	2b0b      	cmp	r3, #11
    2000:	dde1      	ble.n	1fc6 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    2002:	68c3      	ldr	r3, [r0, #12]
    2004:	681a      	ldr	r2, [r3, #0]
    2006:	2300      	movs	r3, #0
    2008:	6013      	str	r3, [r2, #0]
	taskListPrivate->head=NULL;
    200a:	68c2      	ldr	r2, [r0, #12]
    200c:	6013      	str	r3, [r2, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    200e:	68c3      	ldr	r3, [r0, #12]
    2010:	6003      	str	r3, [r0, #0]
}
    2012:	bc30      	pop	{r4, r5}
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	20000e38 	.word	0x20000e38

0000201c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	
}

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    201c:	b508      	push	{r3, lr}
    201e:	4608      	mov	r0, r1
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);

	if (!head) {
    2020:	680b      	ldr	r3, [r1, #0]
    2022:	b11b      	cbz	r3, 202c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x10>
		list_insert_as_head(list, pct);
		return;
		}else{
		list_insert_at_end(list,pct);
    2024:	4611      	mov	r1, r2
    2026:	4b03      	ldr	r3, [pc, #12]	; (2034 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x18>)
    2028:	4798      	blx	r3
    202a:	bd08      	pop	{r3, pc}
		list_insert_as_head(list, pct);
    202c:	4611      	mov	r1, r2
    202e:	4b02      	ldr	r3, [pc, #8]	; (2038 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x1c>)
    2030:	4798      	blx	r3
		return;
    2032:	bd08      	pop	{r3, pc}
    2034:	00005641 	.word	0x00005641
    2038:	000055c5 	.word	0x000055c5

0000203c <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:
	}

	return ERR_NOT_FOUND;
}

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    203c:	b410      	push	{r4}
    203e:	4604      	mov	r4, r0
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
		
	for (it = taskListPrivate->head; it; it = it->next) {
    2040:	68cb      	ldr	r3, [r1, #12]
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	b143      	cbz	r3, 2058 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x1c>
    2046:	200c      	movs	r0, #12
		ct=(ControllerTask*)it;
		if ((ct->prio)<(highPrio)) {
    2048:	795a      	ldrb	r2, [r3, #5]
    204a:	4282      	cmp	r2, r0
			highPrio=ct->prio;
			task=ct;
    204c:	bfbc      	itt	lt
    204e:	604b      	strlt	r3, [r1, #4]
			highPrio=ct->prio;
    2050:	4610      	movlt	r0, r2
	for (it = taskListPrivate->head; it; it = it->next) {
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	2b00      	cmp	r3, #0
    2056:	d1f7      	bne.n	2048 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0xc>
			
		}
	}
	return (ControllerTask)(*task);
    2058:	684b      	ldr	r3, [r1, #4]
    205a:	e893 0003 	ldmia.w	r3, {r0, r1}
    205e:	e884 0003 	stmia.w	r4, {r0, r1}
}
    2062:	4620      	mov	r0, r4
    2064:	bc10      	pop	{r4}
    2066:	4770      	bx	lr

00002068 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
	{
	
		if (taskStorage[ii].id==kALUNotTaskEvent)
    2068:	4b10      	ldr	r3, [pc, #64]	; (20ac <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    206a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    206e:	b18b      	cbz	r3, 2094 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x2c>
void	TaskHandler_Class::ChooseAvailableTask(void){
    2070:	b410      	push	{r4}
		if (taskStorage[ii].id==kALUNotTaskEvent)
    2072:	2301      	movs	r3, #1
    2074:	461a      	mov	r2, r3
    2076:	4c0d      	ldr	r4, [pc, #52]	; (20ac <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    2078:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    207c:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    2080:	b171      	cbz	r1, 20a0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x38>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    2082:	3301      	adds	r3, #1
    2084:	b2db      	uxtb	r3, r3
    2086:	461a      	mov	r2, r3
    2088:	2b0b      	cmp	r3, #11
    208a:	ddf5      	ble.n	2078 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x10>
			task=&taskStorage[ii];
			return;
			
		}
	}
	task=&taskStorage[0];
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x48>)
    208e:	6043      	str	r3, [r0, #4]

}
    2090:	bc10      	pop	{r4}
    2092:	4770      	bx	lr
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    2094:	2200      	movs	r2, #0
			task=&taskStorage[ii];
    2096:	4b06      	ldr	r3, [pc, #24]	; (20b0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x48>)
    2098:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    209c:	6042      	str	r2, [r0, #4]
    209e:	4770      	bx	lr
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x48>)
    20a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    20a6:	6042      	str	r2, [r0, #4]
			return;
    20a8:	e7f2      	b.n	2090 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x28>
    20aa:	bf00      	nop
    20ac:	20000e38 	.word	0x20000e38
    20b0:	20000e68 	.word	0x20000e68

000020b4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    20b4:	b430      	push	{r4, r5}
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
	{
		if (taskStorage[ii].id==tk.id)
    20b6:	790c      	ldrb	r4, [r1, #4]
    20b8:	4b0e      	ldr	r3, [pc, #56]	; (20f4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>)
    20ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    20be:	42a3      	cmp	r3, r4
    20c0:	d010      	beq.n	20e4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x30>
    20c2:	2301      	movs	r3, #1
    20c4:	461a      	mov	r2, r3
    20c6:	4d0b      	ldr	r5, [pc, #44]	; (20f4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>)
    20c8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
    20cc:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    20d0:	42a1      	cmp	r1, r4
    20d2:	d008      	beq.n	20e6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x32>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    20d4:	3301      	adds	r3, #1
    20d6:	b2db      	uxtb	r3, r3
    20d8:	461a      	mov	r2, r3
    20da:	2b0b      	cmp	r3, #11
    20dc:	ddf4      	ble.n	20c8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x14>
			task=&taskStorage[ii];
			return false;
			
		}
	}
	return true;
    20de:	2001      	movs	r0, #1


}
    20e0:	bc30      	pop	{r4, r5}
    20e2:	4770      	bx	lr
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    20e4:	2200      	movs	r2, #0
			task=&taskStorage[ii];
    20e6:	4b04      	ldr	r3, [pc, #16]	; (20f8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x44>)
    20e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    20ec:	6042      	str	r2, [r0, #4]
			return false;
    20ee:	2000      	movs	r0, #0
    20f0:	e7f6      	b.n	20e0 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x2c>
    20f2:	bf00      	nop
    20f4:	20000e38 	.word	0x20000e38
    20f8:	20000e68 	.word	0x20000e68

000020fc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    20fc:	b538      	push	{r3, r4, r5, lr}
    20fe:	4604      	mov	r4, r0
    2100:	460d      	mov	r5, r1
	if (IsNotDeclaredTask(tk))
    2102:	4b16      	ldr	r3, [pc, #88]	; (215c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x60>)
    2104:	4798      	blx	r3
    2106:	b318      	cbz	r0, 2150 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x54>
		ChooseAvailableTask();
    2108:	4620      	mov	r0, r4
    210a:	4b15      	ldr	r3, [pc, #84]	; (2160 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x64>)
    210c:	4798      	blx	r3
		task->elem=tk.elem;
    210e:	6863      	ldr	r3, [r4, #4]
    2110:	682a      	ldr	r2, [r5, #0]
    2112:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    2114:	6863      	ldr	r3, [r4, #4]
    2116:	792a      	ldrb	r2, [r5, #4]
    2118:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    211a:	6863      	ldr	r3, [r4, #4]
    211c:	796a      	ldrb	r2, [r5, #5]
    211e:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    2120:	68e3      	ldr	r3, [r4, #12]
    2122:	b19b      	cbz	r3, 214c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    2124:	6860      	ldr	r0, [r4, #4]
    2126:	3000      	adds	r0, #0
    2128:	bf18      	it	ne
    212a:	2001      	movne	r0, #1
    212c:	2242      	movs	r2, #66	; 0x42
    212e:	490d      	ldr	r1, [pc, #52]	; (2164 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x68>)
    2130:	4b0d      	ldr	r3, [pc, #52]	; (2168 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x6c>)
    2132:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    2134:	6861      	ldr	r1, [r4, #4]
    2136:	68e0      	ldr	r0, [r4, #12]
    2138:	4b0c      	ldr	r3, [pc, #48]	; (216c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x70>)
    213a:	4798      	blx	r3
    213c:	b958      	cbnz	r0, 2156 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x5a>
		AddALUTask(taskListPrivate,task);
    213e:	6862      	ldr	r2, [r4, #4]
    2140:	68e1      	ldr	r1, [r4, #12]
    2142:	4620      	mov	r0, r4
    2144:	4b0a      	ldr	r3, [pc, #40]	; (2170 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x74>)
    2146:	4798      	blx	r3
		return ERR_NONE;
    2148:	2000      	movs	r0, #0
    214a:	bd38      	pop	{r3, r4, r5, pc}
		ASSERT((taskListPrivate)&&(task));
    214c:	2000      	movs	r0, #0
    214e:	e7ed      	b.n	212c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x30>
		return ERR_ALREADY_INITIALIZED;
    2150:	f06f 0011 	mvn.w	r0, #17
    2154:	bd38      	pop	{r3, r4, r5, pc}
			return ERR_ALREADY_INITIALIZED;
    2156:	f06f 0011 	mvn.w	r0, #17
}
    215a:	bd38      	pop	{r3, r4, r5, pc}
    215c:	000020b5 	.word	0x000020b5
    2160:	00002069 	.word	0x00002069
    2164:	00019758 	.word	0x00019758
    2168:	00005565 	.word	0x00005565
    216c:	0000558d 	.word	0x0000558d
    2170:	0000201d 	.word	0x0000201d

00002174 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    2174:	b538      	push	{r3, r4, r5, lr}
    2176:	4604      	mov	r4, r0
    2178:	460d      	mov	r5, r1
	ASSERT(taskListPrivate && (&tk));
    217a:	68c0      	ldr	r0, [r0, #12]
    217c:	226f      	movs	r2, #111	; 0x6f
    217e:	490f      	ldr	r1, [pc, #60]	; (21bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x48>)
    2180:	3000      	adds	r0, #0
    2182:	bf18      	it	ne
    2184:	2001      	movne	r0, #1
    2186:	4b0e      	ldr	r3, [pc, #56]	; (21c0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x4c>)
    2188:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    218a:	4629      	mov	r1, r5
    218c:	4620      	mov	r0, r4
    218e:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x50>)
    2190:	4798      	blx	r3
    2192:	b960      	cbnz	r0, 21ae <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3a>
		if (!is_list_element(taskListPrivate, task)) {
    2194:	6861      	ldr	r1, [r4, #4]
    2196:	68e0      	ldr	r0, [r4, #12]
    2198:	4b0b      	ldr	r3, [pc, #44]	; (21c8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x54>)
    219a:	4798      	blx	r3
    219c:	b150      	cbz	r0, 21b4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x40>
		list_delete_element(taskListPrivate, task);
    219e:	6861      	ldr	r1, [r4, #4]
    21a0:	68e0      	ldr	r0, [r4, #12]
    21a2:	4b0a      	ldr	r3, [pc, #40]	; (21cc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x58>)
    21a4:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    21a6:	6863      	ldr	r3, [r4, #4]
    21a8:	2000      	movs	r0, #0
    21aa:	7118      	strb	r0, [r3, #4]
		return ERR_NONE;
    21ac:	bd38      	pop	{r3, r4, r5, pc}
			return ERR_NOT_FOUND;
    21ae:	f06f 0009 	mvn.w	r0, #9
    21b2:	bd38      	pop	{r3, r4, r5, pc}
			return ERR_NOT_FOUND;
    21b4:	f06f 0009 	mvn.w	r0, #9
}
    21b8:	bd38      	pop	{r3, r4, r5, pc}
    21ba:	bf00      	nop
    21bc:	00019758 	.word	0x00019758
    21c0:	00005565 	.word	0x00005565
    21c4:	000020b5 	.word	0x000020b5
    21c8:	0000558d 	.word	0x0000558d
    21cc:	000056ef 	.word	0x000056ef

000021d0 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
	{
		if (taskStorage[ii].id==at)
    21d0:	4b0c      	ldr	r3, [pc, #48]	; (2204 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>)
    21d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    21d6:	428b      	cmp	r3, r1
    21d8:	d00f      	beq.n	21fa <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
    21da:	2301      	movs	r3, #1
    21dc:	461a      	mov	r2, r3
    21de:	4809      	ldr	r0, [pc, #36]	; (2204 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>)
    21e0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    21e4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    21e8:	428a      	cmp	r2, r1
    21ea:	d008      	beq.n	21fe <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2e>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    21ec:	3301      	adds	r3, #1
    21ee:	b2db      	uxtb	r3, r3
    21f0:	461a      	mov	r2, r3
    21f2:	2b0b      	cmp	r3, #11
    21f4:	ddf4      	ble.n	21e0 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
		//	task=&taskStorage[ii];
			return true;
			
		}
	}
	return false;
    21f6:	2000      	movs	r0, #0
    21f8:	4770      	bx	lr
			return true;
    21fa:	2001      	movs	r0, #1
    21fc:	4770      	bx	lr
    21fe:	2001      	movs	r0, #1


    2200:	4770      	bx	lr
    2202:	bf00      	nop
    2204:	20000e38 	.word	0x20000e38

00002208 <_ZN20AUTO_MODE_ControllerC1Ev>:
#include "SingleHeater_Class.h"
#include "FlapperValveController.h"
#include "States_Class.h"

// default constructor
AUTO_MODE_Controller::AUTO_MODE_Controller()
    2208:	4a02      	ldr	r2, [pc, #8]	; (2214 <_ZN20AUTO_MODE_ControllerC1Ev+0xc>)
    220a:	6002      	str	r2, [r0, #0]
{
	heatersPower=0;
    220c:	2200      	movs	r2, #0
    220e:	7602      	strb	r2, [r0, #24]
	evaFanSpeed=0;
    2210:	7642      	strb	r2, [r0, #25]
	
} //VENT_MODE_Controller
    2212:	4770      	bx	lr
    2214:	0001977c 	.word	0x0001977c

00002218 <_ZN20AUTO_MODE_ControllerD1Ev>:

// default destructor
AUTO_MODE_Controller::~AUTO_MODE_Controller()
{
} //~VENT_MODE_Controller
    2218:	4770      	bx	lr
	...

0000221c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi>:
	
}



uint8_t AUTO_MODE_Controller::StepFlapperValve(int dir){
    221c:	b538      	push	{r3, r4, r5, lr}
    221e:	4605      	mov	r5, r0
    2220:	460c      	mov	r4, r1
	currentAngle=fvc.GetCurrentPosition();
    2222:	480c      	ldr	r0, [pc, #48]	; (2254 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x38>)
    2224:	4b0c      	ldr	r3, [pc, #48]	; (2258 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x3c>)
    2226:	4798      	blx	r3
    2228:	76a8      	strb	r0, [r5, #26]
	if (dir>0)
    222a:	2c00      	cmp	r4, #0
    222c:	dd09      	ble.n	2242 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x26>
	{
		if (currentAngle<(0xff-FLAPPER_VALVE_STEP))
    222e:	28f6      	cmp	r0, #246	; 0xf6
    2230:	dd00      	ble.n	2234 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x18>
		{
			fvc.StartControlling(currentAngle-FLAPPER_VALVE_STEP);
		}
	}
	
    2232:	bd38      	pop	{r3, r4, r5, pc}
			fvc.StartControlling(currentAngle+FLAPPER_VALVE_STEP);
    2234:	f100 0108 	add.w	r1, r0, #8
    2238:	b2c9      	uxtb	r1, r1
    223a:	4806      	ldr	r0, [pc, #24]	; (2254 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x38>)
    223c:	4b07      	ldr	r3, [pc, #28]	; (225c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x40>)
    223e:	4798      	blx	r3
    2240:	bd38      	pop	{r3, r4, r5, pc}
		if (currentAngle<(FLAPPER_VALVE_STEP+1))
    2242:	2808      	cmp	r0, #8
    2244:	ddf5      	ble.n	2232 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x16>
			fvc.StartControlling(currentAngle-FLAPPER_VALVE_STEP);
    2246:	f1a0 0108 	sub.w	r1, r0, #8
    224a:	b2c9      	uxtb	r1, r1
    224c:	4801      	ldr	r0, [pc, #4]	; (2254 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x38>)
    224e:	4b03      	ldr	r3, [pc, #12]	; (225c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x40>)
    2250:	4798      	blx	r3
    2252:	e7ee      	b.n	2232 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x16>
    2254:	20002ac0 	.word	0x20002ac0
    2258:	0001398d 	.word	0x0001398d
    225c:	000136d5 	.word	0x000136d5

00002260 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh>:
void AUTO_MODE_Controller::ControlTemperatureSetpoint(uint8_t opt){
    2260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hvac.temperingTimeout)
    2262:	4b3c      	ldr	r3, [pc, #240]	; (2354 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xf4>)
    2264:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    2268:	2b00      	cmp	r3, #0
    226a:	d046      	beq.n	22fa <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x9a>
    226c:	460e      	mov	r6, r1
    226e:	4604      	mov	r4, r0
		cabinCurrentTemperature=temperatures.values[0][3];
    2270:	4b39      	ldr	r3, [pc, #228]	; (2358 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xf8>)
    2272:	6f9d      	ldr	r5, [r3, #120]	; 0x78
    2274:	6085      	str	r5, [r0, #8]
		if (abs(lastCabinTemperature-cabinCurrentTemperature)>1/2)
    2276:	4629      	mov	r1, r5
    2278:	6940      	ldr	r0, [r0, #20]
    227a:	4b38      	ldr	r3, [pc, #224]	; (235c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xfc>)
    227c:	4798      	blx	r3
    227e:	4607      	mov	r7, r0
    2280:	2100      	movs	r1, #0
    2282:	4b37      	ldr	r3, [pc, #220]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    2284:	4798      	blx	r3
    2286:	2800      	cmp	r0, #0
    2288:	d031      	beq.n	22ee <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x8e>
			lastCabinTemperature=cabinCurrentTemperature;
    228a:	6165      	str	r5, [r4, #20]
			if (cabinCurrentTemperature>0)
    228c:	2100      	movs	r1, #0
    228e:	4628      	mov	r0, r5
    2290:	4b33      	ldr	r3, [pc, #204]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    2292:	4798      	blx	r3
    2294:	2800      	cmp	r0, #0
    2296:	d030      	beq.n	22fa <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x9a>
				setpointTemperature=hvac.UpadateTemperatureSetpoint();
    2298:	4832      	ldr	r0, [pc, #200]	; (2364 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x104>)
    229a:	4b33      	ldr	r3, [pc, #204]	; (2368 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x108>)
    229c:	4798      	blx	r3
    229e:	60e0      	str	r0, [r4, #12]
				errorTemperature=setpointTemperature-cabinCurrentTemperature;
    22a0:	68a1      	ldr	r1, [r4, #8]
    22a2:	4b2e      	ldr	r3, [pc, #184]	; (235c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xfc>)
    22a4:	4798      	blx	r3
    22a6:	4605      	mov	r5, r0
    22a8:	6120      	str	r0, [r4, #16]
				tolerance=errorTemperature>0?1:2;
    22aa:	2100      	movs	r1, #0
    22ac:	4b2c      	ldr	r3, [pc, #176]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    22ae:	4798      	blx	r3
    22b0:	b320      	cbz	r0, 22fc <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x9c>
    22b2:	2001      	movs	r0, #1
    22b4:	7720      	strb	r0, [r4, #28]
				if (abs(errorTemperature)>tolerance)
    22b6:	4b2d      	ldr	r3, [pc, #180]	; (236c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x10c>)
    22b8:	4798      	blx	r3
    22ba:	4601      	mov	r1, r0
    22bc:	4628      	mov	r0, r5
    22be:	4b28      	ldr	r3, [pc, #160]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    22c0:	4798      	blx	r3
    22c2:	b1d0      	cbz	r0, 22fa <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x9a>
					heatersPower=heater.GetHeaterPowerLevel();
    22c4:	482a      	ldr	r0, [pc, #168]	; (2370 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x110>)
    22c6:	4b2b      	ldr	r3, [pc, #172]	; (2374 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x114>)
    22c8:	4798      	blx	r3
    22ca:	4605      	mov	r5, r0
    22cc:	7620      	strb	r0, [r4, #24]
					if (errorTemperature>0)
    22ce:	2100      	movs	r1, #0
    22d0:	6920      	ldr	r0, [r4, #16]
    22d2:	4b23      	ldr	r3, [pc, #140]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    22d4:	4798      	blx	r3
    22d6:	b360      	cbz	r0, 2332 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xd2>
						if (heatersPower>3)
    22d8:	2d03      	cmp	r5, #3
    22da:	dd1c      	ble.n	2316 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xb6>
							heatersPower=4;
    22dc:	2304      	movs	r3, #4
    22de:	7623      	strb	r3, [r4, #24]
							if (opt==1)
    22e0:	2e01      	cmp	r6, #1
    22e2:	d11c      	bne.n	231e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xbe>
								StepFlapperValve(1);
    22e4:	2101      	movs	r1, #1
    22e6:	4620      	mov	r0, r4
    22e8:	4b23      	ldr	r3, [pc, #140]	; (2378 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x118>)
    22ea:	4798      	blx	r3
    22ec:	e017      	b.n	231e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xbe>
		if (abs(lastCabinTemperature-cabinCurrentTemperature)>1/2)
    22ee:	2100      	movs	r1, #0
    22f0:	4638      	mov	r0, r7
    22f2:	4b22      	ldr	r3, [pc, #136]	; (237c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x11c>)
    22f4:	4798      	blx	r3
    22f6:	2800      	cmp	r0, #0
    22f8:	d1c7      	bne.n	228a <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x2a>
    22fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				tolerance=errorTemperature>0?1:2;
    22fc:	2302      	movs	r3, #2
    22fe:	7723      	strb	r3, [r4, #28]
				if (abs(errorTemperature)>tolerance)
    2300:	2100      	movs	r1, #0
    2302:	4628      	mov	r0, r5
    2304:	4b16      	ldr	r3, [pc, #88]	; (2360 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x100>)
    2306:	4798      	blx	r3
    2308:	b918      	cbnz	r0, 2312 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xb2>
    230a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
				tolerance=errorTemperature>0?1:2;
    230e:	2002      	movs	r0, #2
    2310:	e7d1      	b.n	22b6 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x56>
    2312:	2002      	movs	r0, #2
    2314:	e7cf      	b.n	22b6 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x56>
							heatersPower++;
    2316:	3501      	adds	r5, #1
    2318:	7625      	strb	r5, [r4, #24]
							automaticHeatingMode=true;
    231a:	2301      	movs	r3, #1
    231c:	7123      	strb	r3, [r4, #4]
					if (lastPower!=heatersPower)
    231e:	7e21      	ldrb	r1, [r4, #24]
    2320:	7ee3      	ldrb	r3, [r4, #27]
    2322:	428b      	cmp	r3, r1
    2324:	d0e9      	beq.n	22fa <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x9a>
						lastPower=heatersPower;
    2326:	76e1      	strb	r1, [r4, #27]
						SetHeaterDriver(heatersPower);
    2328:	6823      	ldr	r3, [r4, #0]
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	4620      	mov	r0, r4
    232e:	4798      	blx	r3
}
    2330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if (heatersPower<1)
    2332:	b125      	cbz	r5, 233e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xde>
							heatersPower--;
    2334:	3d01      	subs	r5, #1
    2336:	7625      	strb	r5, [r4, #24]
							automaticHeatingMode=false;
    2338:	2300      	movs	r3, #0
    233a:	7123      	strb	r3, [r4, #4]
    233c:	e7ef      	b.n	231e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xbe>
							heatersPower=0;
    233e:	2300      	movs	r3, #0
    2340:	7623      	strb	r3, [r4, #24]
							if (opt==1)
    2342:	2e01      	cmp	r6, #1
    2344:	d1eb      	bne.n	231e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xbe>
								StepFlapperValve(-1);
    2346:	f04f 31ff 	mov.w	r1, #4294967295
    234a:	4620      	mov	r0, r4
    234c:	4b0a      	ldr	r3, [pc, #40]	; (2378 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x118>)
    234e:	4798      	blx	r3
    2350:	e7e5      	b.n	231e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xbe>
    2352:	bf00      	nop
    2354:	20000918 	.word	0x20000918
    2358:	200091dc 	.word	0x200091dc
    235c:	00018b45 	.word	0x00018b45
    2360:	000190d1 	.word	0x000190d1
    2364:	20000e14 	.word	0x20000e14
    2368:	00000a21 	.word	0x00000a21
    236c:	00018cb1 	.word	0x00018cb1
    2370:	20002c5c 	.word	0x20002c5c
    2374:	00014439 	.word	0x00014439
    2378:	0000221d 	.word	0x0000221d
    237c:	00019095 	.word	0x00019095

00002380 <_ZN9VENT_ModeC1Ev>:
#include "TemperatureSensors_Class.h"
#include "fastmath.h"
#include "States_Class.h"

// default constructor
VENT_Mode::VENT_Mode()
    2380:	4a02      	ldr	r2, [pc, #8]	; (238c <_ZN9VENT_ModeC1Ev+0xc>)
    2382:	6002      	str	r2, [r0, #0]
{
	heatersPower=0;
    2384:	2200      	movs	r2, #0
    2386:	7602      	strb	r2, [r0, #24]
	evaFanSpeed=0;
    2388:	7642      	strb	r2, [r0, #25]
} //VENT_Mode
    238a:	4770      	bx	lr
    238c:	0001978c 	.word	0x0001978c

00002390 <_ZN9VENT_ModeD1Ev>:

// default destructor
VENT_Mode::~VENT_Mode()
{
} //~VENT_Mode
    2390:	4770      	bx	lr
	...

00002394 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh>:

void VENT_Mode::OperateTemperatureBySetpoint(uint8_t opt){
    2394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2396:	4604      	mov	r4, r0
	cabinCurrentTemperature=temperatures.values[0][3];
    2398:	4b32      	ldr	r3, [pc, #200]	; (2464 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd0>)
    239a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    239c:	6060      	str	r0, [r4, #4]
	if (cabinCurrentTemperature>0)
    239e:	2100      	movs	r1, #0
    23a0:	4b31      	ldr	r3, [pc, #196]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    23a2:	4798      	blx	r3
    23a4:	2800      	cmp	r0, #0
    23a6:	d03b      	beq.n	2420 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x8c>
	{
		currentSetpointTemperature=hvac.UpadateTemperatureSetpoint();
    23a8:	4830      	ldr	r0, [pc, #192]	; (246c <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd8>)
    23aa:	4b31      	ldr	r3, [pc, #196]	; (2470 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xdc>)
    23ac:	4798      	blx	r3
    23ae:	4605      	mov	r5, r0
    23b0:	60a0      	str	r0, [r4, #8]
		if (currentSetpointTemperature>0)
    23b2:	2100      	movs	r1, #0
    23b4:	4b2c      	ldr	r3, [pc, #176]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    23b6:	4798      	blx	r3
    23b8:	2800      	cmp	r0, #0
    23ba:	d031      	beq.n	2420 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x8c>
		{
			if (abs(lastSetpoint-currentSetpointTemperature)>VENT_MODE_TEMPERATURE_STEP)
    23bc:	4629      	mov	r1, r5
    23be:	68e0      	ldr	r0, [r4, #12]
    23c0:	4b2c      	ldr	r3, [pc, #176]	; (2474 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xe0>)
    23c2:	4798      	blx	r3
    23c4:	4607      	mov	r7, r0
    23c6:	2100      	movs	r1, #0
    23c8:	4b27      	ldr	r3, [pc, #156]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    23ca:	4798      	blx	r3
    23cc:	2800      	cmp	r0, #0
    23ce:	d028      	beq.n	2422 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x8e>
    23d0:	f04f 0601 	mov.w	r6, #1
    23d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    23d8:	4638      	mov	r0, r7
    23da:	4b23      	ldr	r3, [pc, #140]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    23dc:	4798      	blx	r3
    23de:	b908      	cbnz	r0, 23e4 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x50>
    23e0:	f04f 0600 	mov.w	r6, #0
    23e4:	b2f6      	uxtb	r6, r6
    23e6:	b1de      	cbz	r6, 2420 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x8c>
			{
				lastSetpoint=currentSetpointTemperature;
    23e8:	60e5      	str	r5, [r4, #12]
				
				
				
				errorTemperature=currentSetpointTemperature-cabinCurrentTemperature;
    23ea:	6861      	ldr	r1, [r4, #4]
    23ec:	4628      	mov	r0, r5
    23ee:	4b21      	ldr	r3, [pc, #132]	; (2474 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xe0>)
    23f0:	4798      	blx	r3
    23f2:	4605      	mov	r5, r0
    23f4:	6120      	str	r0, [r4, #16]
				if (abs(errorTemperature)>2*VENT_MODE_TEMPERATURE_STEP)
    23f6:	2100      	movs	r1, #0
    23f8:	4b1b      	ldr	r3, [pc, #108]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    23fa:	4798      	blx	r3
    23fc:	b1e8      	cbz	r0, 243a <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xa6>
    23fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2402:	4628      	mov	r0, r5
    2404:	4b18      	ldr	r3, [pc, #96]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    2406:	4798      	blx	r3
    2408:	b1b0      	cbz	r0, 2438 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xa4>
				{
					if (errorTemperature>0)
					{
						if (heatersPower>3)
    240a:	7e23      	ldrb	r3, [r4, #24]
    240c:	2b03      	cmp	r3, #3
						{
							heatersPower=4;
    240e:	bfcc      	ite	gt
    2410:	2304      	movgt	r3, #4
							}
							
						}
						else
						{
							heatersPower++;
    2412:	3301      	addle	r3, #1
    2414:	7623      	strb	r3, [r4, #24]
						{
							heatersPower--;
						}
						
					}
					SetHeaterDriver(heatersPower);
    2416:	6823      	ldr	r3, [r4, #0]
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	7e21      	ldrb	r1, [r4, #24]
    241c:	4620      	mov	r0, r4
    241e:	4798      	blx	r3
    2420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (abs(lastSetpoint-currentSetpointTemperature)>VENT_MODE_TEMPERATURE_STEP)
    2422:	f04f 0601 	mov.w	r6, #1
    2426:	4914      	ldr	r1, [pc, #80]	; (2478 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xe4>)
    2428:	4638      	mov	r0, r7
    242a:	4b14      	ldr	r3, [pc, #80]	; (247c <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xe8>)
    242c:	4798      	blx	r3
    242e:	b908      	cbnz	r0, 2434 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xa0>
    2430:	f04f 0600 	mov.w	r6, #0
    2434:	b2f6      	uxtb	r6, r6
    2436:	e7d6      	b.n	23e6 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x52>
    2438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (abs(errorTemperature)>2*VENT_MODE_TEMPERATURE_STEP)
    243a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    243e:	4628      	mov	r0, r5
    2440:	4b0e      	ldr	r3, [pc, #56]	; (247c <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xe8>)
    2442:	4798      	blx	r3
    2444:	2800      	cmp	r0, #0
    2446:	d0eb      	beq.n	2420 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x8c>
					if (errorTemperature>0)
    2448:	2100      	movs	r1, #0
    244a:	4628      	mov	r0, r5
    244c:	4b06      	ldr	r3, [pc, #24]	; (2468 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xd4>)
    244e:	4798      	blx	r3
    2450:	2800      	cmp	r0, #0
    2452:	d1da      	bne.n	240a <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x76>
						if (heatersPower<1)
    2454:	7e23      	ldrb	r3, [r4, #24]
    2456:	b113      	cbz	r3, 245e <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xca>
							heatersPower--;
    2458:	3b01      	subs	r3, #1
    245a:	7623      	strb	r3, [r4, #24]
    245c:	e7db      	b.n	2416 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x82>
							heatersPower=0;
    245e:	7623      	strb	r3, [r4, #24]
    2460:	e7d9      	b.n	2416 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x82>
    2462:	bf00      	nop
    2464:	200091dc 	.word	0x200091dc
    2468:	000190d1 	.word	0x000190d1
    246c:	20000e14 	.word	0x20000e14
    2470:	00000a21 	.word	0x00000a21
    2474:	00018b45 	.word	0x00018b45
    2478:	bf800000 	.word	0xbf800000
    247c:	00019095 	.word	0x00019095

00002480 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2480:	b580      	push	{r7, lr}
    2482:	af00      	add	r7, sp, #0
	system_init();
    2484:	4b03      	ldr	r3, [pc, #12]	; (2494 <atmel_start_init+0x14>)
    2486:	4798      	blx	r3
	usb_init();
    2488:	4b03      	ldr	r3, [pc, #12]	; (2498 <atmel_start_init+0x18>)
    248a:	4798      	blx	r3
	spi_nor_flash_init();
    248c:	4b03      	ldr	r3, [pc, #12]	; (249c <atmel_start_init+0x1c>)
    248e:	4798      	blx	r3
}
    2490:	bf00      	nop
    2492:	bd80      	pop	{r7, pc}
    2494:	00003809 	.word	0x00003809
    2498:	0000d9c1 	.word	0x0000d9c1
    249c:	0000d955 	.word	0x0000d955

000024a0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    24a0:	b480      	push	{r7}
    24a2:	b085      	sub	sp, #20
    24a4:	af00      	add	r7, sp, #0
    24a6:	60f8      	str	r0, [r7, #12]
    24a8:	460b      	mov	r3, r1
    24aa:	607a      	str	r2, [r7, #4]
    24ac:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    24ae:	7afa      	ldrb	r2, [r7, #11]
    24b0:	68fb      	ldr	r3, [r7, #12]
    24b2:	3220      	adds	r2, #32
    24b4:	6879      	ldr	r1, [r7, #4]
    24b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    24ba:	bf00      	nop
    24bc:	3714      	adds	r7, #20
    24be:	46bd      	mov	sp, r7
    24c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c4:	4770      	bx	lr

000024c6 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    24c6:	b480      	push	{r7}
    24c8:	b083      	sub	sp, #12
    24ca:	af00      	add	r7, sp, #0
    24cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	691b      	ldr	r3, [r3, #16]
    24d2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24da:	bf00      	nop
    24dc:	370c      	adds	r7, #12
    24de:	46bd      	mov	sp, r7
    24e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e4:	4770      	bx	lr

000024e6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    24e6:	b480      	push	{r7}
    24e8:	b083      	sub	sp, #12
    24ea:	af00      	add	r7, sp, #0
    24ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	691b      	ldr	r3, [r3, #16]
    24f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24fa:	bf00      	nop
    24fc:	370c      	adds	r7, #12
    24fe:	46bd      	mov	sp, r7
    2500:	f85d 7b04 	ldr.w	r7, [sp], #4
    2504:	4770      	bx	lr

00002506 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2506:	b480      	push	{r7}
    2508:	b083      	sub	sp, #12
    250a:	af00      	add	r7, sp, #0
    250c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	691b      	ldr	r3, [r3, #16]
    2512:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    251a:	bf00      	nop
    251c:	370c      	adds	r7, #12
    251e:	46bd      	mov	sp, r7
    2520:	f85d 7b04 	ldr.w	r7, [sp], #4
    2524:	4770      	bx	lr

00002526 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2526:	b480      	push	{r7}
    2528:	b083      	sub	sp, #12
    252a:	af00      	add	r7, sp, #0
    252c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	691b      	ldr	r3, [r3, #16]
    2532:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    253a:	bf00      	nop
    253c:	370c      	adds	r7, #12
    253e:	46bd      	mov	sp, r7
    2540:	f85d 7b04 	ldr.w	r7, [sp], #4
    2544:	4770      	bx	lr

00002546 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2546:	b480      	push	{r7}
    2548:	b083      	sub	sp, #12
    254a:	af00      	add	r7, sp, #0
    254c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	695b      	ldr	r3, [r3, #20]
    2552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    255a:	bf00      	nop
    255c:	370c      	adds	r7, #12
    255e:	46bd      	mov	sp, r7
    2560:	f85d 7b04 	ldr.w	r7, [sp], #4
    2564:	4770      	bx	lr

00002566 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2566:	b480      	push	{r7}
    2568:	b083      	sub	sp, #12
    256a:	af00      	add	r7, sp, #0
    256c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    256e:	687b      	ldr	r3, [r7, #4]
    2570:	695b      	ldr	r3, [r3, #20]
    2572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    257a:	bf00      	nop
    257c:	370c      	adds	r7, #12
    257e:	46bd      	mov	sp, r7
    2580:	f85d 7b04 	ldr.w	r7, [sp], #4
    2584:	4770      	bx	lr

00002586 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2586:	b480      	push	{r7}
    2588:	b083      	sub	sp, #12
    258a:	af00      	add	r7, sp, #0
    258c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	695b      	ldr	r3, [r3, #20]
    2592:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2596:	687b      	ldr	r3, [r7, #4]
    2598:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    259a:	bf00      	nop
    259c:	370c      	adds	r7, #12
    259e:	46bd      	mov	sp, r7
    25a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a4:	4770      	bx	lr

000025a6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    25a6:	b480      	push	{r7}
    25a8:	b083      	sub	sp, #12
    25aa:	af00      	add	r7, sp, #0
    25ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	695b      	ldr	r3, [r3, #20]
    25b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25ba:	bf00      	nop
    25bc:	370c      	adds	r7, #12
    25be:	46bd      	mov	sp, r7
    25c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25c4:	4770      	bx	lr

000025c6 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    25c6:	b480      	push	{r7}
    25c8:	b083      	sub	sp, #12
    25ca:	af00      	add	r7, sp, #0
    25cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	695b      	ldr	r3, [r3, #20]
    25d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25da:	bf00      	nop
    25dc:	370c      	adds	r7, #12
    25de:	46bd      	mov	sp, r7
    25e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e4:	4770      	bx	lr

000025e6 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    25e6:	b480      	push	{r7}
    25e8:	b083      	sub	sp, #12
    25ea:	af00      	add	r7, sp, #0
    25ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    25ee:	687b      	ldr	r3, [r7, #4]
    25f0:	699b      	ldr	r3, [r3, #24]
    25f2:	f043 0201 	orr.w	r2, r3, #1
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25fa:	bf00      	nop
    25fc:	370c      	adds	r7, #12
    25fe:	46bd      	mov	sp, r7
    2600:	f85d 7b04 	ldr.w	r7, [sp], #4
    2604:	4770      	bx	lr

00002606 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2606:	b480      	push	{r7}
    2608:	b083      	sub	sp, #12
    260a:	af00      	add	r7, sp, #0
    260c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	699b      	ldr	r3, [r3, #24]
    2612:	f043 0202 	orr.w	r2, r3, #2
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    261a:	bf00      	nop
    261c:	370c      	adds	r7, #12
    261e:	46bd      	mov	sp, r7
    2620:	f85d 7b04 	ldr.w	r7, [sp], #4
    2624:	4770      	bx	lr

00002626 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2626:	b480      	push	{r7}
    2628:	b083      	sub	sp, #12
    262a:	af00      	add	r7, sp, #0
    262c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	699b      	ldr	r3, [r3, #24]
    2632:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2636:	687b      	ldr	r3, [r7, #4]
    2638:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    263a:	bf00      	nop
    263c:	370c      	adds	r7, #12
    263e:	46bd      	mov	sp, r7
    2640:	f85d 7b04 	ldr.w	r7, [sp], #4
    2644:	4770      	bx	lr

00002646 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    2646:	b480      	push	{r7}
    2648:	b083      	sub	sp, #12
    264a:	af00      	add	r7, sp, #0
    264c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    264e:	687b      	ldr	r3, [r7, #4]
    2650:	699b      	ldr	r3, [r3, #24]
    2652:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    265a:	bf00      	nop
    265c:	370c      	adds	r7, #12
    265e:	46bd      	mov	sp, r7
    2660:	f85d 7b04 	ldr.w	r7, [sp], #4
    2664:	4770      	bx	lr

00002666 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    2666:	b480      	push	{r7}
    2668:	b083      	sub	sp, #12
    266a:	af00      	add	r7, sp, #0
    266c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	699b      	ldr	r3, [r3, #24]
    2672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    267a:	bf00      	nop
    267c:	370c      	adds	r7, #12
    267e:	46bd      	mov	sp, r7
    2680:	f85d 7b04 	ldr.w	r7, [sp], #4
    2684:	4770      	bx	lr

00002686 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2686:	b480      	push	{r7}
    2688:	b083      	sub	sp, #12
    268a:	af00      	add	r7, sp, #0
    268c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	699b      	ldr	r3, [r3, #24]
    2692:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    269a:	bf00      	nop
    269c:	370c      	adds	r7, #12
    269e:	46bd      	mov	sp, r7
    26a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26a4:	4770      	bx	lr

000026a6 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    26a6:	b480      	push	{r7}
    26a8:	b083      	sub	sp, #12
    26aa:	af00      	add	r7, sp, #0
    26ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	69db      	ldr	r3, [r3, #28]
    26b2:	f043 0220 	orr.w	r2, r3, #32
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26ba:	bf00      	nop
    26bc:	370c      	adds	r7, #12
    26be:	46bd      	mov	sp, r7
    26c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26c4:	4770      	bx	lr

000026c6 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    26c6:	b480      	push	{r7}
    26c8:	b083      	sub	sp, #12
    26ca:	af00      	add	r7, sp, #0
    26cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    26ce:	687b      	ldr	r3, [r7, #4]
    26d0:	69db      	ldr	r3, [r3, #28]
    26d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26da:	bf00      	nop
    26dc:	370c      	adds	r7, #12
    26de:	46bd      	mov	sp, r7
    26e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e4:	4770      	bx	lr

000026e6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    26e6:	b480      	push	{r7}
    26e8:	b083      	sub	sp, #12
    26ea:	af00      	add	r7, sp, #0
    26ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	69db      	ldr	r3, [r3, #28]
    26f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26fa:	bf00      	nop
    26fc:	370c      	adds	r7, #12
    26fe:	46bd      	mov	sp, r7
    2700:	f85d 7b04 	ldr.w	r7, [sp], #4
    2704:	4770      	bx	lr

00002706 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2706:	b480      	push	{r7}
    2708:	b083      	sub	sp, #12
    270a:	af00      	add	r7, sp, #0
    270c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	6a1b      	ldr	r3, [r3, #32]
    2712:	f043 0201 	orr.w	r2, r3, #1
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    271a:	bf00      	nop
    271c:	370c      	adds	r7, #12
    271e:	46bd      	mov	sp, r7
    2720:	f85d 7b04 	ldr.w	r7, [sp], #4
    2724:	4770      	bx	lr

00002726 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2726:	b480      	push	{r7}
    2728:	b083      	sub	sp, #12
    272a:	af00      	add	r7, sp, #0
    272c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	6a1b      	ldr	r3, [r3, #32]
    2732:	f043 0202 	orr.w	r2, r3, #2
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    273a:	bf00      	nop
    273c:	370c      	adds	r7, #12
    273e:	46bd      	mov	sp, r7
    2740:	f85d 7b04 	ldr.w	r7, [sp], #4
    2744:	4770      	bx	lr

00002746 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2746:	b480      	push	{r7}
    2748:	b083      	sub	sp, #12
    274a:	af00      	add	r7, sp, #0
    274c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	6a1b      	ldr	r3, [r3, #32]
    2752:	f043 0204 	orr.w	r2, r3, #4
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    275a:	bf00      	nop
    275c:	370c      	adds	r7, #12
    275e:	46bd      	mov	sp, r7
    2760:	f85d 7b04 	ldr.w	r7, [sp], #4
    2764:	4770      	bx	lr

00002766 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2766:	b480      	push	{r7}
    2768:	b083      	sub	sp, #12
    276a:	af00      	add	r7, sp, #0
    276c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	6a1b      	ldr	r3, [r3, #32]
    2772:	f043 0208 	orr.w	r2, r3, #8
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    277a:	bf00      	nop
    277c:	370c      	adds	r7, #12
    277e:	46bd      	mov	sp, r7
    2780:	f85d 7b04 	ldr.w	r7, [sp], #4
    2784:	4770      	bx	lr

00002786 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    2786:	b480      	push	{r7}
    2788:	b083      	sub	sp, #12
    278a:	af00      	add	r7, sp, #0
    278c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	6a1b      	ldr	r3, [r3, #32]
    2792:	f043 0220 	orr.w	r2, r3, #32
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    279a:	bf00      	nop
    279c:	370c      	adds	r7, #12
    279e:	46bd      	mov	sp, r7
    27a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    27a4:	4770      	bx	lr

000027a6 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    27a6:	b480      	push	{r7}
    27a8:	b083      	sub	sp, #12
    27aa:	af00      	add	r7, sp, #0
    27ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	6a1b      	ldr	r3, [r3, #32]
    27b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    27ba:	bf00      	nop
    27bc:	370c      	adds	r7, #12
    27be:	46bd      	mov	sp, r7
    27c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c4:	4770      	bx	lr

000027c6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    27c6:	b480      	push	{r7}
    27c8:	b085      	sub	sp, #20
    27ca:	af00      	add	r7, sp, #0
    27cc:	60f8      	str	r0, [r7, #12]
    27ce:	460b      	mov	r3, r1
    27d0:	607a      	str	r2, [r7, #4]
    27d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    27d4:	7afb      	ldrb	r3, [r7, #11]
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	01db      	lsls	r3, r3, #7
    27da:	4413      	add	r3, r2
    27dc:	3308      	adds	r3, #8
    27de:	687a      	ldr	r2, [r7, #4]
    27e0:	601a      	str	r2, [r3, #0]
}
    27e2:	bf00      	nop
    27e4:	3714      	adds	r7, #20
    27e6:	46bd      	mov	sp, r7
    27e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ec:	4770      	bx	lr

000027ee <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    27ee:	b480      	push	{r7}
    27f0:	b085      	sub	sp, #20
    27f2:	af00      	add	r7, sp, #0
    27f4:	60f8      	str	r0, [r7, #12]
    27f6:	460b      	mov	r3, r1
    27f8:	607a      	str	r2, [r7, #4]
    27fa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    27fc:	7afb      	ldrb	r3, [r7, #11]
    27fe:	68fa      	ldr	r2, [r7, #12]
    2800:	01db      	lsls	r3, r3, #7
    2802:	4413      	add	r3, r2
    2804:	3304      	adds	r3, #4
    2806:	687a      	ldr	r2, [r7, #4]
    2808:	601a      	str	r2, [r3, #0]
}
    280a:	bf00      	nop
    280c:	3714      	adds	r7, #20
    280e:	46bd      	mov	sp, r7
    2810:	f85d 7b04 	ldr.w	r7, [sp], #4
    2814:	4770      	bx	lr

00002816 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2816:	b480      	push	{r7}
    2818:	b085      	sub	sp, #20
    281a:	af00      	add	r7, sp, #0
    281c:	60f8      	str	r0, [r7, #12]
    281e:	460b      	mov	r3, r1
    2820:	607a      	str	r2, [r7, #4]
    2822:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2824:	7afb      	ldrb	r3, [r7, #11]
    2826:	68fa      	ldr	r2, [r7, #12]
    2828:	01db      	lsls	r3, r3, #7
    282a:	4413      	add	r3, r2
    282c:	3318      	adds	r3, #24
    282e:	687a      	ldr	r2, [r7, #4]
    2830:	601a      	str	r2, [r3, #0]
}
    2832:	bf00      	nop
    2834:	3714      	adds	r7, #20
    2836:	46bd      	mov	sp, r7
    2838:	f85d 7b04 	ldr.w	r7, [sp], #4
    283c:	4770      	bx	lr

0000283e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    283e:	b480      	push	{r7}
    2840:	b085      	sub	sp, #20
    2842:	af00      	add	r7, sp, #0
    2844:	60f8      	str	r0, [r7, #12]
    2846:	460b      	mov	r3, r1
    2848:	607a      	str	r2, [r7, #4]
    284a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    284c:	7afb      	ldrb	r3, [r7, #11]
    284e:	68fa      	ldr	r2, [r7, #12]
    2850:	01db      	lsls	r3, r3, #7
    2852:	4413      	add	r3, r2
    2854:	3314      	adds	r3, #20
    2856:	687a      	ldr	r2, [r7, #4]
    2858:	601a      	str	r2, [r3, #0]
}
    285a:	bf00      	nop
    285c:	3714      	adds	r7, #20
    285e:	46bd      	mov	sp, r7
    2860:	f85d 7b04 	ldr.w	r7, [sp], #4
    2864:	4770      	bx	lr

00002866 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2866:	b480      	push	{r7}
    2868:	b085      	sub	sp, #20
    286a:	af00      	add	r7, sp, #0
    286c:	6078      	str	r0, [r7, #4]
    286e:	4608      	mov	r0, r1
    2870:	4611      	mov	r1, r2
    2872:	461a      	mov	r2, r3
    2874:	4603      	mov	r3, r0
    2876:	70fb      	strb	r3, [r7, #3]
    2878:	460b      	mov	r3, r1
    287a:	70bb      	strb	r3, [r7, #2]
    287c:	4613      	mov	r3, r2
    287e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2880:	78fa      	ldrb	r2, [r7, #3]
    2882:	78bb      	ldrb	r3, [r7, #2]
    2884:	6879      	ldr	r1, [r7, #4]
    2886:	01d2      	lsls	r2, r2, #7
    2888:	440a      	add	r2, r1
    288a:	4413      	add	r3, r2
    288c:	3330      	adds	r3, #48	; 0x30
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2892:	7bfb      	ldrb	r3, [r7, #15]
    2894:	f023 030f 	bic.w	r3, r3, #15
    2898:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    289a:	787b      	ldrb	r3, [r7, #1]
    289c:	f003 030f 	and.w	r3, r3, #15
    28a0:	b2da      	uxtb	r2, r3
    28a2:	7bfb      	ldrb	r3, [r7, #15]
    28a4:	4313      	orrs	r3, r2
    28a6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    28a8:	78fa      	ldrb	r2, [r7, #3]
    28aa:	78bb      	ldrb	r3, [r7, #2]
    28ac:	6879      	ldr	r1, [r7, #4]
    28ae:	01d2      	lsls	r2, r2, #7
    28b0:	440a      	add	r2, r1
    28b2:	4413      	add	r3, r2
    28b4:	3330      	adds	r3, #48	; 0x30
    28b6:	7bfa      	ldrb	r2, [r7, #15]
    28b8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    28ba:	bf00      	nop
    28bc:	3714      	adds	r7, #20
    28be:	46bd      	mov	sp, r7
    28c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    28c4:	4770      	bx	lr

000028c6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    28c6:	b480      	push	{r7}
    28c8:	b085      	sub	sp, #20
    28ca:	af00      	add	r7, sp, #0
    28cc:	6078      	str	r0, [r7, #4]
    28ce:	4608      	mov	r0, r1
    28d0:	4611      	mov	r1, r2
    28d2:	461a      	mov	r2, r3
    28d4:	4603      	mov	r3, r0
    28d6:	70fb      	strb	r3, [r7, #3]
    28d8:	460b      	mov	r3, r1
    28da:	70bb      	strb	r3, [r7, #2]
    28dc:	4613      	mov	r3, r2
    28de:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    28e0:	78fa      	ldrb	r2, [r7, #3]
    28e2:	78bb      	ldrb	r3, [r7, #2]
    28e4:	6879      	ldr	r1, [r7, #4]
    28e6:	01d2      	lsls	r2, r2, #7
    28e8:	440a      	add	r2, r1
    28ea:	4413      	add	r3, r2
    28ec:	3330      	adds	r3, #48	; 0x30
    28ee:	781b      	ldrb	r3, [r3, #0]
    28f0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    28f2:	7bfb      	ldrb	r3, [r7, #15]
    28f4:	f003 030f 	and.w	r3, r3, #15
    28f8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    28fa:	787b      	ldrb	r3, [r7, #1]
    28fc:	011b      	lsls	r3, r3, #4
    28fe:	b2da      	uxtb	r2, r3
    2900:	7bfb      	ldrb	r3, [r7, #15]
    2902:	4313      	orrs	r3, r2
    2904:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2906:	78fa      	ldrb	r2, [r7, #3]
    2908:	78bb      	ldrb	r3, [r7, #2]
    290a:	6879      	ldr	r1, [r7, #4]
    290c:	01d2      	lsls	r2, r2, #7
    290e:	440a      	add	r2, r1
    2910:	4413      	add	r3, r2
    2912:	3330      	adds	r3, #48	; 0x30
    2914:	7bfa      	ldrb	r2, [r7, #15]
    2916:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2918:	bf00      	nop
    291a:	3714      	adds	r7, #20
    291c:	46bd      	mov	sp, r7
    291e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2922:	4770      	bx	lr

00002924 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2924:	b480      	push	{r7}
    2926:	b085      	sub	sp, #20
    2928:	af00      	add	r7, sp, #0
    292a:	6078      	str	r0, [r7, #4]
    292c:	4608      	mov	r0, r1
    292e:	4611      	mov	r1, r2
    2930:	461a      	mov	r2, r3
    2932:	4603      	mov	r3, r0
    2934:	70fb      	strb	r3, [r7, #3]
    2936:	460b      	mov	r3, r1
    2938:	70bb      	strb	r3, [r7, #2]
    293a:	4613      	mov	r3, r2
    293c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    293e:	78fa      	ldrb	r2, [r7, #3]
    2940:	78bb      	ldrb	r3, [r7, #2]
    2942:	6879      	ldr	r1, [r7, #4]
    2944:	01d2      	lsls	r2, r2, #7
    2946:	440a      	add	r2, r1
    2948:	4413      	add	r3, r2
    294a:	3340      	adds	r3, #64	; 0x40
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2950:	7bfb      	ldrb	r3, [r7, #15]
    2952:	f023 0301 	bic.w	r3, r3, #1
    2956:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2958:	787a      	ldrb	r2, [r7, #1]
    295a:	7bfb      	ldrb	r3, [r7, #15]
    295c:	4313      	orrs	r3, r2
    295e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2960:	78fa      	ldrb	r2, [r7, #3]
    2962:	78bb      	ldrb	r3, [r7, #2]
    2964:	6879      	ldr	r1, [r7, #4]
    2966:	01d2      	lsls	r2, r2, #7
    2968:	440a      	add	r2, r1
    296a:	4413      	add	r3, r2
    296c:	3340      	adds	r3, #64	; 0x40
    296e:	7bfa      	ldrb	r2, [r7, #15]
    2970:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2972:	bf00      	nop
    2974:	3714      	adds	r7, #20
    2976:	46bd      	mov	sp, r7
    2978:	f85d 7b04 	ldr.w	r7, [sp], #4
    297c:	4770      	bx	lr

0000297e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    297e:	b490      	push	{r4, r7}
    2980:	b082      	sub	sp, #8
    2982:	af00      	add	r7, sp, #0
    2984:	6078      	str	r0, [r7, #4]
    2986:	460b      	mov	r3, r1
    2988:	70fb      	strb	r3, [r7, #3]
    298a:	4613      	mov	r3, r2
    298c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    298e:	78fa      	ldrb	r2, [r7, #3]
    2990:	78bb      	ldrb	r3, [r7, #2]
    2992:	78f8      	ldrb	r0, [r7, #3]
    2994:	78b9      	ldrb	r1, [r7, #2]
    2996:	687c      	ldr	r4, [r7, #4]
    2998:	01c0      	lsls	r0, r0, #7
    299a:	4420      	add	r0, r4
    299c:	4401      	add	r1, r0
    299e:	3140      	adds	r1, #64	; 0x40
    29a0:	7809      	ldrb	r1, [r1, #0]
    29a2:	b2c9      	uxtb	r1, r1
    29a4:	f041 0104 	orr.w	r1, r1, #4
    29a8:	b2c8      	uxtb	r0, r1
    29aa:	6879      	ldr	r1, [r7, #4]
    29ac:	01d2      	lsls	r2, r2, #7
    29ae:	440a      	add	r2, r1
    29b0:	4413      	add	r3, r2
    29b2:	3340      	adds	r3, #64	; 0x40
    29b4:	4602      	mov	r2, r0
    29b6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    29b8:	bf00      	nop
    29ba:	3708      	adds	r7, #8
    29bc:	46bd      	mov	sp, r7
    29be:	bc90      	pop	{r4, r7}
    29c0:	4770      	bx	lr

000029c2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    29c2:	b490      	push	{r4, r7}
    29c4:	b082      	sub	sp, #8
    29c6:	af00      	add	r7, sp, #0
    29c8:	6078      	str	r0, [r7, #4]
    29ca:	460b      	mov	r3, r1
    29cc:	70fb      	strb	r3, [r7, #3]
    29ce:	4613      	mov	r3, r2
    29d0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    29d2:	78fa      	ldrb	r2, [r7, #3]
    29d4:	78bb      	ldrb	r3, [r7, #2]
    29d6:	78f8      	ldrb	r0, [r7, #3]
    29d8:	78b9      	ldrb	r1, [r7, #2]
    29da:	687c      	ldr	r4, [r7, #4]
    29dc:	01c0      	lsls	r0, r0, #7
    29de:	4420      	add	r0, r4
    29e0:	4401      	add	r1, r0
    29e2:	3140      	adds	r1, #64	; 0x40
    29e4:	7809      	ldrb	r1, [r1, #0]
    29e6:	b2c9      	uxtb	r1, r1
    29e8:	f021 0104 	bic.w	r1, r1, #4
    29ec:	b2c8      	uxtb	r0, r1
    29ee:	6879      	ldr	r1, [r7, #4]
    29f0:	01d2      	lsls	r2, r2, #7
    29f2:	440a      	add	r2, r1
    29f4:	4413      	add	r3, r2
    29f6:	3340      	adds	r3, #64	; 0x40
    29f8:	4602      	mov	r2, r0
    29fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    29fc:	bf00      	nop
    29fe:	3708      	adds	r7, #8
    2a00:	46bd      	mov	sp, r7
    2a02:	bc90      	pop	{r4, r7}
    2a04:	4770      	bx	lr

00002a06 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2a06:	b480      	push	{r7}
    2a08:	b085      	sub	sp, #20
    2a0a:	af00      	add	r7, sp, #0
    2a0c:	60f8      	str	r0, [r7, #12]
    2a0e:	460b      	mov	r3, r1
    2a10:	607a      	str	r2, [r7, #4]
    2a12:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a14:	7afb      	ldrb	r3, [r7, #11]
    2a16:	68fa      	ldr	r2, [r7, #12]
    2a18:	01db      	lsls	r3, r3, #7
    2a1a:	4413      	add	r3, r2
    2a1c:	3328      	adds	r3, #40	; 0x28
    2a1e:	687a      	ldr	r2, [r7, #4]
    2a20:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2a22:	bf00      	nop
    2a24:	3714      	adds	r7, #20
    2a26:	46bd      	mov	sp, r7
    2a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a2c:	4770      	bx	lr
	...

00002a30 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2a30:	b580      	push	{r7, lr}
    2a32:	b082      	sub	sp, #8
    2a34:	af00      	add	r7, sp, #0
    2a36:	4603      	mov	r3, r0
    2a38:	6039      	str	r1, [r7, #0]
    2a3a:	71fb      	strb	r3, [r7, #7]
    2a3c:	4613      	mov	r3, r2
    2a3e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    2a40:	79bb      	ldrb	r3, [r7, #6]
    2a42:	2b01      	cmp	r3, #1
    2a44:	d01c      	beq.n	2a80 <_gpio_set_direction+0x50>
    2a46:	2b02      	cmp	r3, #2
    2a48:	d037      	beq.n	2aba <_gpio_set_direction+0x8a>
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d14e      	bne.n	2aec <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2a4e:	79fb      	ldrb	r3, [r7, #7]
    2a50:	683a      	ldr	r2, [r7, #0]
    2a52:	4619      	mov	r1, r3
    2a54:	482a      	ldr	r0, [pc, #168]	; (2b00 <_gpio_set_direction+0xd0>)
    2a56:	4b2b      	ldr	r3, [pc, #172]	; (2b04 <_gpio_set_direction+0xd4>)
    2a58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2a5a:	683b      	ldr	r3, [r7, #0]
    2a5c:	b29b      	uxth	r3, r3
    2a5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2a62:	79fb      	ldrb	r3, [r7, #7]
    2a64:	4619      	mov	r1, r3
    2a66:	4826      	ldr	r0, [pc, #152]	; (2b00 <_gpio_set_direction+0xd0>)
    2a68:	4b27      	ldr	r3, [pc, #156]	; (2b08 <_gpio_set_direction+0xd8>)
    2a6a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2a6c:	683b      	ldr	r3, [r7, #0]
    2a6e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2a70:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2a74:	79fb      	ldrb	r3, [r7, #7]
    2a76:	4619      	mov	r1, r3
    2a78:	4821      	ldr	r0, [pc, #132]	; (2b00 <_gpio_set_direction+0xd0>)
    2a7a:	4b23      	ldr	r3, [pc, #140]	; (2b08 <_gpio_set_direction+0xd8>)
    2a7c:	4798      	blx	r3
		break;
    2a7e:	e03a      	b.n	2af6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2a80:	79fb      	ldrb	r3, [r7, #7]
    2a82:	683a      	ldr	r2, [r7, #0]
    2a84:	4619      	mov	r1, r3
    2a86:	481e      	ldr	r0, [pc, #120]	; (2b00 <_gpio_set_direction+0xd0>)
    2a88:	4b1e      	ldr	r3, [pc, #120]	; (2b04 <_gpio_set_direction+0xd4>)
    2a8a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2a8c:	683b      	ldr	r3, [r7, #0]
    2a8e:	b29b      	uxth	r3, r3
    2a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2a98:	79f9      	ldrb	r1, [r7, #7]
    2a9a:	461a      	mov	r2, r3
    2a9c:	4818      	ldr	r0, [pc, #96]	; (2b00 <_gpio_set_direction+0xd0>)
    2a9e:	4b1a      	ldr	r3, [pc, #104]	; (2b08 <_gpio_set_direction+0xd8>)
    2aa0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2aa2:	683b      	ldr	r3, [r7, #0]
    2aa4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2aae:	79f9      	ldrb	r1, [r7, #7]
    2ab0:	461a      	mov	r2, r3
    2ab2:	4813      	ldr	r0, [pc, #76]	; (2b00 <_gpio_set_direction+0xd0>)
    2ab4:	4b14      	ldr	r3, [pc, #80]	; (2b08 <_gpio_set_direction+0xd8>)
    2ab6:	4798      	blx	r3
		break;
    2ab8:	e01d      	b.n	2af6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2aba:	79fb      	ldrb	r3, [r7, #7]
    2abc:	683a      	ldr	r2, [r7, #0]
    2abe:	4619      	mov	r1, r3
    2ac0:	480f      	ldr	r0, [pc, #60]	; (2b00 <_gpio_set_direction+0xd0>)
    2ac2:	4b12      	ldr	r3, [pc, #72]	; (2b0c <_gpio_set_direction+0xdc>)
    2ac4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2ac6:	683b      	ldr	r3, [r7, #0]
    2ac8:	b29b      	uxth	r3, r3
    2aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2ace:	79fb      	ldrb	r3, [r7, #7]
    2ad0:	4619      	mov	r1, r3
    2ad2:	480b      	ldr	r0, [pc, #44]	; (2b00 <_gpio_set_direction+0xd0>)
    2ad4:	4b0c      	ldr	r3, [pc, #48]	; (2b08 <_gpio_set_direction+0xd8>)
    2ad6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2ad8:	683b      	ldr	r3, [r7, #0]
    2ada:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2adc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2ae0:	79fb      	ldrb	r3, [r7, #7]
    2ae2:	4619      	mov	r1, r3
    2ae4:	4806      	ldr	r0, [pc, #24]	; (2b00 <_gpio_set_direction+0xd0>)
    2ae6:	4b08      	ldr	r3, [pc, #32]	; (2b08 <_gpio_set_direction+0xd8>)
    2ae8:	4798      	blx	r3
		break;
    2aea:	e004      	b.n	2af6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2aec:	2246      	movs	r2, #70	; 0x46
    2aee:	4908      	ldr	r1, [pc, #32]	; (2b10 <_gpio_set_direction+0xe0>)
    2af0:	2000      	movs	r0, #0
    2af2:	4b08      	ldr	r3, [pc, #32]	; (2b14 <_gpio_set_direction+0xe4>)
    2af4:	4798      	blx	r3
	}
}
    2af6:	bf00      	nop
    2af8:	3708      	adds	r7, #8
    2afa:	46bd      	mov	sp, r7
    2afc:	bd80      	pop	{r7, pc}
    2afe:	bf00      	nop
    2b00:	41008000 	.word	0x41008000
    2b04:	000027ef 	.word	0x000027ef
    2b08:	00002a07 	.word	0x00002a07
    2b0c:	000027c7 	.word	0x000027c7
    2b10:	00019794 	.word	0x00019794
    2b14:	00005565 	.word	0x00005565

00002b18 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	b082      	sub	sp, #8
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	4603      	mov	r3, r0
    2b20:	6039      	str	r1, [r7, #0]
    2b22:	71fb      	strb	r3, [r7, #7]
    2b24:	4613      	mov	r3, r2
    2b26:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2b28:	79bb      	ldrb	r3, [r7, #6]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d006      	beq.n	2b3c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    2b2e:	79fb      	ldrb	r3, [r7, #7]
    2b30:	683a      	ldr	r2, [r7, #0]
    2b32:	4619      	mov	r1, r3
    2b34:	4806      	ldr	r0, [pc, #24]	; (2b50 <_gpio_set_level+0x38>)
    2b36:	4b07      	ldr	r3, [pc, #28]	; (2b54 <_gpio_set_level+0x3c>)
    2b38:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    2b3a:	e005      	b.n	2b48 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2b3c:	79fb      	ldrb	r3, [r7, #7]
    2b3e:	683a      	ldr	r2, [r7, #0]
    2b40:	4619      	mov	r1, r3
    2b42:	4803      	ldr	r0, [pc, #12]	; (2b50 <_gpio_set_level+0x38>)
    2b44:	4b04      	ldr	r3, [pc, #16]	; (2b58 <_gpio_set_level+0x40>)
    2b46:	4798      	blx	r3
}
    2b48:	bf00      	nop
    2b4a:	3708      	adds	r7, #8
    2b4c:	46bd      	mov	sp, r7
    2b4e:	bd80      	pop	{r7, pc}
    2b50:	41008000 	.word	0x41008000
    2b54:	00002817 	.word	0x00002817
    2b58:	0000283f 	.word	0x0000283f

00002b5c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b082      	sub	sp, #8
    2b60:	af00      	add	r7, sp, #0
    2b62:	4603      	mov	r3, r0
    2b64:	71fb      	strb	r3, [r7, #7]
    2b66:	460b      	mov	r3, r1
    2b68:	71bb      	strb	r3, [r7, #6]
    2b6a:	4613      	mov	r3, r2
    2b6c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    2b6e:	797b      	ldrb	r3, [r7, #5]
    2b70:	2b01      	cmp	r3, #1
    2b72:	d00a      	beq.n	2b8a <_gpio_set_pin_pull_mode+0x2e>
    2b74:	2b02      	cmp	r3, #2
    2b76:	d01f      	beq.n	2bb8 <_gpio_set_pin_pull_mode+0x5c>
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d134      	bne.n	2be6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2b7c:	79ba      	ldrb	r2, [r7, #6]
    2b7e:	79fb      	ldrb	r3, [r7, #7]
    2b80:	4619      	mov	r1, r3
    2b82:	481e      	ldr	r0, [pc, #120]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2b84:	4b1e      	ldr	r3, [pc, #120]	; (2c00 <_gpio_set_pin_pull_mode+0xa4>)
    2b86:	4798      	blx	r3
		break;
    2b88:	e033      	b.n	2bf2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2b8a:	79bb      	ldrb	r3, [r7, #6]
    2b8c:	2201      	movs	r2, #1
    2b8e:	409a      	lsls	r2, r3
    2b90:	79fb      	ldrb	r3, [r7, #7]
    2b92:	4619      	mov	r1, r3
    2b94:	4819      	ldr	r0, [pc, #100]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2b96:	4b1b      	ldr	r3, [pc, #108]	; (2c04 <_gpio_set_pin_pull_mode+0xa8>)
    2b98:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2b9a:	79ba      	ldrb	r2, [r7, #6]
    2b9c:	79fb      	ldrb	r3, [r7, #7]
    2b9e:	4619      	mov	r1, r3
    2ba0:	4816      	ldr	r0, [pc, #88]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2ba2:	4b19      	ldr	r3, [pc, #100]	; (2c08 <_gpio_set_pin_pull_mode+0xac>)
    2ba4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    2ba6:	79bb      	ldrb	r3, [r7, #6]
    2ba8:	2201      	movs	r2, #1
    2baa:	409a      	lsls	r2, r3
    2bac:	79fb      	ldrb	r3, [r7, #7]
    2bae:	4619      	mov	r1, r3
    2bb0:	4812      	ldr	r0, [pc, #72]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2bb2:	4b16      	ldr	r3, [pc, #88]	; (2c0c <_gpio_set_pin_pull_mode+0xb0>)
    2bb4:	4798      	blx	r3
		break;
    2bb6:	e01c      	b.n	2bf2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2bb8:	79bb      	ldrb	r3, [r7, #6]
    2bba:	2201      	movs	r2, #1
    2bbc:	409a      	lsls	r2, r3
    2bbe:	79fb      	ldrb	r3, [r7, #7]
    2bc0:	4619      	mov	r1, r3
    2bc2:	480e      	ldr	r0, [pc, #56]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2bc4:	4b0f      	ldr	r3, [pc, #60]	; (2c04 <_gpio_set_pin_pull_mode+0xa8>)
    2bc6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2bc8:	79ba      	ldrb	r2, [r7, #6]
    2bca:	79fb      	ldrb	r3, [r7, #7]
    2bcc:	4619      	mov	r1, r3
    2bce:	480b      	ldr	r0, [pc, #44]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2bd0:	4b0d      	ldr	r3, [pc, #52]	; (2c08 <_gpio_set_pin_pull_mode+0xac>)
    2bd2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2bd4:	79bb      	ldrb	r3, [r7, #6]
    2bd6:	2201      	movs	r2, #1
    2bd8:	409a      	lsls	r2, r3
    2bda:	79fb      	ldrb	r3, [r7, #7]
    2bdc:	4619      	mov	r1, r3
    2bde:	4807      	ldr	r0, [pc, #28]	; (2bfc <_gpio_set_pin_pull_mode+0xa0>)
    2be0:	4b0b      	ldr	r3, [pc, #44]	; (2c10 <_gpio_set_pin_pull_mode+0xb4>)
    2be2:	4798      	blx	r3
		break;
    2be4:	e005      	b.n	2bf2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    2be6:	2289      	movs	r2, #137	; 0x89
    2be8:	490a      	ldr	r1, [pc, #40]	; (2c14 <_gpio_set_pin_pull_mode+0xb8>)
    2bea:	2000      	movs	r0, #0
    2bec:	4b0a      	ldr	r3, [pc, #40]	; (2c18 <_gpio_set_pin_pull_mode+0xbc>)
    2bee:	4798      	blx	r3
		break;
    2bf0:	bf00      	nop
	}
}
    2bf2:	bf00      	nop
    2bf4:	3708      	adds	r7, #8
    2bf6:	46bd      	mov	sp, r7
    2bf8:	bd80      	pop	{r7, pc}
    2bfa:	bf00      	nop
    2bfc:	41008000 	.word	0x41008000
    2c00:	000029c3 	.word	0x000029c3
    2c04:	000027ef 	.word	0x000027ef
    2c08:	0000297f 	.word	0x0000297f
    2c0c:	00002817 	.word	0x00002817
    2c10:	0000283f 	.word	0x0000283f
    2c14:	00019794 	.word	0x00019794
    2c18:	00005565 	.word	0x00005565

00002c1c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2c1c:	b590      	push	{r4, r7, lr}
    2c1e:	b085      	sub	sp, #20
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
    2c24:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	095b      	lsrs	r3, r3, #5
    2c2a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	b2db      	uxtb	r3, r3
    2c30:	f003 031f 	and.w	r3, r3, #31
    2c34:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2c36:	683b      	ldr	r3, [r7, #0]
    2c38:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c3c:	d106      	bne.n	2c4c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    2c3e:	7bba      	ldrb	r2, [r7, #14]
    2c40:	7bf9      	ldrb	r1, [r7, #15]
    2c42:	2300      	movs	r3, #0
    2c44:	4812      	ldr	r0, [pc, #72]	; (2c90 <_gpio_set_pin_function+0x74>)
    2c46:	4c13      	ldr	r4, [pc, #76]	; (2c94 <_gpio_set_pin_function+0x78>)
    2c48:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2c4a:	e01d      	b.n	2c88 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2c4c:	7bba      	ldrb	r2, [r7, #14]
    2c4e:	7bf9      	ldrb	r1, [r7, #15]
    2c50:	2301      	movs	r3, #1
    2c52:	480f      	ldr	r0, [pc, #60]	; (2c90 <_gpio_set_pin_function+0x74>)
    2c54:	4c0f      	ldr	r4, [pc, #60]	; (2c94 <_gpio_set_pin_function+0x78>)
    2c56:	47a0      	blx	r4
		if (pin & 1) {
    2c58:	7bbb      	ldrb	r3, [r7, #14]
    2c5a:	f003 0301 	and.w	r3, r3, #1
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d009      	beq.n	2c76 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2c62:	7bbb      	ldrb	r3, [r7, #14]
    2c64:	085b      	lsrs	r3, r3, #1
    2c66:	b2da      	uxtb	r2, r3
    2c68:	683b      	ldr	r3, [r7, #0]
    2c6a:	b2db      	uxtb	r3, r3
    2c6c:	7bf9      	ldrb	r1, [r7, #15]
    2c6e:	4808      	ldr	r0, [pc, #32]	; (2c90 <_gpio_set_pin_function+0x74>)
    2c70:	4c09      	ldr	r4, [pc, #36]	; (2c98 <_gpio_set_pin_function+0x7c>)
    2c72:	47a0      	blx	r4
}
    2c74:	e008      	b.n	2c88 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2c76:	7bbb      	ldrb	r3, [r7, #14]
    2c78:	085b      	lsrs	r3, r3, #1
    2c7a:	b2da      	uxtb	r2, r3
    2c7c:	683b      	ldr	r3, [r7, #0]
    2c7e:	b2db      	uxtb	r3, r3
    2c80:	7bf9      	ldrb	r1, [r7, #15]
    2c82:	4803      	ldr	r0, [pc, #12]	; (2c90 <_gpio_set_pin_function+0x74>)
    2c84:	4c05      	ldr	r4, [pc, #20]	; (2c9c <_gpio_set_pin_function+0x80>)
    2c86:	47a0      	blx	r4
}
    2c88:	bf00      	nop
    2c8a:	3714      	adds	r7, #20
    2c8c:	46bd      	mov	sp, r7
    2c8e:	bd90      	pop	{r4, r7, pc}
    2c90:	41008000 	.word	0x41008000
    2c94:	00002925 	.word	0x00002925
    2c98:	000028c7 	.word	0x000028c7
    2c9c:	00002867 	.word	0x00002867

00002ca0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	b082      	sub	sp, #8
    2ca4:	af00      	add	r7, sp, #0
    2ca6:	4603      	mov	r3, r0
    2ca8:	460a      	mov	r2, r1
    2caa:	71fb      	strb	r3, [r7, #7]
    2cac:	4613      	mov	r3, r2
    2cae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2cb0:	79fb      	ldrb	r3, [r7, #7]
    2cb2:	095b      	lsrs	r3, r3, #5
    2cb4:	b2d8      	uxtb	r0, r3
    2cb6:	79fb      	ldrb	r3, [r7, #7]
    2cb8:	f003 031f 	and.w	r3, r3, #31
    2cbc:	b2db      	uxtb	r3, r3
    2cbe:	79ba      	ldrb	r2, [r7, #6]
    2cc0:	4619      	mov	r1, r3
    2cc2:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <gpio_set_pin_pull_mode+0x30>)
    2cc4:	4798      	blx	r3
}
    2cc6:	bf00      	nop
    2cc8:	3708      	adds	r7, #8
    2cca:	46bd      	mov	sp, r7
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	bf00      	nop
    2cd0:	00002b5d 	.word	0x00002b5d

00002cd4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b082      	sub	sp, #8
    2cd8:	af00      	add	r7, sp, #0
    2cda:	6078      	str	r0, [r7, #4]
    2cdc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2cde:	6839      	ldr	r1, [r7, #0]
    2ce0:	6878      	ldr	r0, [r7, #4]
    2ce2:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <gpio_set_pin_function+0x1c>)
    2ce4:	4798      	blx	r3
}
    2ce6:	bf00      	nop
    2ce8:	3708      	adds	r7, #8
    2cea:	46bd      	mov	sp, r7
    2cec:	bd80      	pop	{r7, pc}
    2cee:	bf00      	nop
    2cf0:	00002c1d 	.word	0x00002c1d

00002cf4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	4603      	mov	r3, r0
    2cfc:	460a      	mov	r2, r1
    2cfe:	71fb      	strb	r3, [r7, #7]
    2d00:	4613      	mov	r3, r2
    2d02:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    2d04:	79fb      	ldrb	r3, [r7, #7]
    2d06:	095b      	lsrs	r3, r3, #5
    2d08:	b2d8      	uxtb	r0, r3
    2d0a:	79fb      	ldrb	r3, [r7, #7]
    2d0c:	f003 031f 	and.w	r3, r3, #31
    2d10:	2201      	movs	r2, #1
    2d12:	fa02 f303 	lsl.w	r3, r2, r3
    2d16:	79ba      	ldrb	r2, [r7, #6]
    2d18:	4619      	mov	r1, r3
    2d1a:	4b03      	ldr	r3, [pc, #12]	; (2d28 <gpio_set_pin_direction+0x34>)
    2d1c:	4798      	blx	r3
}
    2d1e:	bf00      	nop
    2d20:	3708      	adds	r7, #8
    2d22:	46bd      	mov	sp, r7
    2d24:	bd80      	pop	{r7, pc}
    2d26:	bf00      	nop
    2d28:	00002a31 	.word	0x00002a31

00002d2c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    2d2c:	b580      	push	{r7, lr}
    2d2e:	b082      	sub	sp, #8
    2d30:	af00      	add	r7, sp, #0
    2d32:	4603      	mov	r3, r0
    2d34:	460a      	mov	r2, r1
    2d36:	71fb      	strb	r3, [r7, #7]
    2d38:	4613      	mov	r3, r2
    2d3a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2d3c:	79fb      	ldrb	r3, [r7, #7]
    2d3e:	095b      	lsrs	r3, r3, #5
    2d40:	b2d8      	uxtb	r0, r3
    2d42:	79fb      	ldrb	r3, [r7, #7]
    2d44:	f003 031f 	and.w	r3, r3, #31
    2d48:	2201      	movs	r2, #1
    2d4a:	fa02 f303 	lsl.w	r3, r2, r3
    2d4e:	79ba      	ldrb	r2, [r7, #6]
    2d50:	4619      	mov	r1, r3
    2d52:	4b03      	ldr	r3, [pc, #12]	; (2d60 <gpio_set_pin_level+0x34>)
    2d54:	4798      	blx	r3
}
    2d56:	bf00      	nop
    2d58:	3708      	adds	r7, #8
    2d5a:	46bd      	mov	sp, r7
    2d5c:	bd80      	pop	{r7, pc}
    2d5e:	bf00      	nop
    2d60:	00002b19 	.word	0x00002b19

00002d64 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	af00      	add	r7, sp, #0
	_init_chip();
    2d68:	4b01      	ldr	r3, [pc, #4]	; (2d70 <init_mcu+0xc>)
    2d6a:	4798      	blx	r3
}
    2d6c:	bf00      	nop
    2d6e:	bd80      	pop	{r7, pc}
    2d70:	00006175 	.word	0x00006175

00002d74 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d004      	beq.n	2d8e <wdt_init+0x1a>
    2d84:	683b      	ldr	r3, [r7, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d001      	beq.n	2d8e <wdt_init+0x1a>
    2d8a:	2301      	movs	r3, #1
    2d8c:	e000      	b.n	2d90 <wdt_init+0x1c>
    2d8e:	2300      	movs	r3, #0
    2d90:	f003 0301 	and.w	r3, r3, #1
    2d94:	b2db      	uxtb	r3, r3
    2d96:	2248      	movs	r2, #72	; 0x48
    2d98:	4907      	ldr	r1, [pc, #28]	; (2db8 <wdt_init+0x44>)
    2d9a:	4618      	mov	r0, r3
    2d9c:	4b07      	ldr	r3, [pc, #28]	; (2dbc <wdt_init+0x48>)
    2d9e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	683a      	ldr	r2, [r7, #0]
    2da4:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	4618      	mov	r0, r3
    2daa:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <wdt_init+0x4c>)
    2dac:	4798      	blx	r3
    2dae:	4603      	mov	r3, r0
}
    2db0:	4618      	mov	r0, r3
    2db2:	3708      	adds	r7, #8
    2db4:	46bd      	mov	sp, r7
    2db6:	bd80      	pop	{r7, pc}
    2db8:	000197b0 	.word	0x000197b0
    2dbc:	00005565 	.word	0x00005565
    2dc0:	0000d1cd 	.word	0x0000d1cd

00002dc4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    2dc8:	4804      	ldr	r0, [pc, #16]	; (2ddc <CRC_CALC_init+0x18>)
    2dca:	4b05      	ldr	r3, [pc, #20]	; (2de0 <CRC_CALC_init+0x1c>)
    2dcc:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2dce:	4905      	ldr	r1, [pc, #20]	; (2de4 <CRC_CALC_init+0x20>)
    2dd0:	4805      	ldr	r0, [pc, #20]	; (2de8 <CRC_CALC_init+0x24>)
    2dd2:	4b06      	ldr	r3, [pc, #24]	; (2dec <CRC_CALC_init+0x28>)
    2dd4:	4798      	blx	r3
}
    2dd6:	bf00      	nop
    2dd8:	bd80      	pop	{r7, pc}
    2dda:	bf00      	nop
    2ddc:	40000800 	.word	0x40000800
    2de0:	00002607 	.word	0x00002607
    2de4:	41002000 	.word	0x41002000
    2de8:	20009898 	.word	0x20009898
    2dec:	00003db9 	.word	0x00003db9

00002df0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2df4:	2244      	movs	r2, #68	; 0x44
    2df6:	2104      	movs	r1, #4
    2df8:	483f      	ldr	r0, [pc, #252]	; (2ef8 <EXTERNAL_IRQ_0_init+0x108>)
    2dfa:	4b40      	ldr	r3, [pc, #256]	; (2efc <EXTERNAL_IRQ_0_init+0x10c>)
    2dfc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    2dfe:	4840      	ldr	r0, [pc, #256]	; (2f00 <EXTERNAL_IRQ_0_init+0x110>)
    2e00:	4b40      	ldr	r3, [pc, #256]	; (2f04 <EXTERNAL_IRQ_0_init+0x114>)
    2e02:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    2e04:	2101      	movs	r1, #1
    2e06:	2040      	movs	r0, #64	; 0x40
    2e08:	4b3f      	ldr	r3, [pc, #252]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e0a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    2e0c:	2100      	movs	r1, #0
    2e0e:	2040      	movs	r0, #64	; 0x40
    2e10:	4b3e      	ldr	r3, [pc, #248]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    2e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    2e18:	2040      	movs	r0, #64	; 0x40
    2e1a:	4b3d      	ldr	r3, [pc, #244]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e1c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    2e1e:	2101      	movs	r1, #1
    2e20:	2021      	movs	r0, #33	; 0x21
    2e22:	4b39      	ldr	r3, [pc, #228]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e24:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    2e26:	2100      	movs	r1, #0
    2e28:	2021      	movs	r0, #33	; 0x21
    2e2a:	4b38      	ldr	r3, [pc, #224]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e2c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    2e2e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    2e32:	2021      	movs	r0, #33	; 0x21
    2e34:	4b36      	ldr	r3, [pc, #216]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e36:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    2e38:	2101      	movs	r1, #1
    2e3a:	2003      	movs	r0, #3
    2e3c:	4b32      	ldr	r3, [pc, #200]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    2e40:	2102      	movs	r1, #2
    2e42:	2003      	movs	r0, #3
    2e44:	4b31      	ldr	r3, [pc, #196]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    2e48:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    2e4c:	2003      	movs	r0, #3
    2e4e:	4b30      	ldr	r3, [pc, #192]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e50:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    2e52:	2101      	movs	r1, #1
    2e54:	2004      	movs	r0, #4
    2e56:	4b2c      	ldr	r3, [pc, #176]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e58:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    2e5a:	2102      	movs	r1, #2
    2e5c:	2004      	movs	r0, #4
    2e5e:	4b2b      	ldr	r3, [pc, #172]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e60:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    2e62:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2e66:	2004      	movs	r0, #4
    2e68:	4b29      	ldr	r3, [pc, #164]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e6a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2e6c:	2101      	movs	r1, #1
    2e6e:	2005      	movs	r0, #5
    2e70:	4b25      	ldr	r3, [pc, #148]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e72:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2e74:	2102      	movs	r1, #2
    2e76:	2005      	movs	r0, #5
    2e78:	4b24      	ldr	r3, [pc, #144]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2e7c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2e80:	2005      	movs	r0, #5
    2e82:	4b23      	ldr	r3, [pc, #140]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e84:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    2e86:	2101      	movs	r1, #1
    2e88:	2056      	movs	r0, #86	; 0x56
    2e8a:	4b1f      	ldr	r3, [pc, #124]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2e8c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    2e8e:	2102      	movs	r1, #2
    2e90:	2056      	movs	r0, #86	; 0x56
    2e92:	4b1e      	ldr	r3, [pc, #120]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2e94:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    2e96:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    2e9a:	2056      	movs	r0, #86	; 0x56
    2e9c:	4b1c      	ldr	r3, [pc, #112]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2e9e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    2ea0:	2101      	movs	r1, #1
    2ea2:	2057      	movs	r0, #87	; 0x57
    2ea4:	4b18      	ldr	r3, [pc, #96]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2ea6:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    2ea8:	2102      	movs	r1, #2
    2eaa:	2057      	movs	r0, #87	; 0x57
    2eac:	4b17      	ldr	r3, [pc, #92]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2eae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    2eb0:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2eb4:	2057      	movs	r0, #87	; 0x57
    2eb6:	4b16      	ldr	r3, [pc, #88]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2eb8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    2eba:	2101      	movs	r1, #1
    2ebc:	2028      	movs	r0, #40	; 0x28
    2ebe:	4b12      	ldr	r3, [pc, #72]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2ec0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    2ec2:	2100      	movs	r1, #0
    2ec4:	2028      	movs	r0, #40	; 0x28
    2ec6:	4b11      	ldr	r3, [pc, #68]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2ec8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    2eca:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2ece:	2028      	movs	r0, #40	; 0x28
    2ed0:	4b0f      	ldr	r3, [pc, #60]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2ed2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    2ed4:	2101      	movs	r1, #1
    2ed6:	2029      	movs	r0, #41	; 0x29
    2ed8:	4b0b      	ldr	r3, [pc, #44]	; (2f08 <EXTERNAL_IRQ_0_init+0x118>)
    2eda:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    2edc:	2100      	movs	r1, #0
    2ede:	2029      	movs	r0, #41	; 0x29
    2ee0:	4b0a      	ldr	r3, [pc, #40]	; (2f0c <EXTERNAL_IRQ_0_init+0x11c>)
    2ee2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    2ee4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    2ee8:	2029      	movs	r0, #41	; 0x29
    2eea:	4b09      	ldr	r3, [pc, #36]	; (2f10 <EXTERNAL_IRQ_0_init+0x120>)
    2eec:	4798      	blx	r3

	ext_irq_init();
    2eee:	4b09      	ldr	r3, [pc, #36]	; (2f14 <EXTERNAL_IRQ_0_init+0x124>)
    2ef0:	4798      	blx	r3
}
    2ef2:	bf00      	nop
    2ef4:	bd80      	pop	{r7, pc}
    2ef6:	bf00      	nop
    2ef8:	40001c00 	.word	0x40001c00
    2efc:	000024a1 	.word	0x000024a1
    2f00:	40000800 	.word	0x40000800
    2f04:	00002587 	.word	0x00002587
    2f08:	00002cf5 	.word	0x00002cf5
    2f0c:	00002ca1 	.word	0x00002ca1
    2f10:	00002cd5 	.word	0x00002cd5
    2f14:	00003f1d 	.word	0x00003f1d

00002f18 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2f1c:	2244      	movs	r2, #68	; 0x44
    2f1e:	210b      	movs	r1, #11
    2f20:	4807      	ldr	r0, [pc, #28]	; (2f40 <EVENT_SYSTEM_0_init+0x28>)
    2f22:	4b08      	ldr	r3, [pc, #32]	; (2f44 <EVENT_SYSTEM_0_init+0x2c>)
    2f24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2f26:	2244      	movs	r2, #68	; 0x44
    2f28:	210c      	movs	r1, #12
    2f2a:	4805      	ldr	r0, [pc, #20]	; (2f40 <EVENT_SYSTEM_0_init+0x28>)
    2f2c:	4b05      	ldr	r3, [pc, #20]	; (2f44 <EVENT_SYSTEM_0_init+0x2c>)
    2f2e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2f30:	4805      	ldr	r0, [pc, #20]	; (2f48 <EVENT_SYSTEM_0_init+0x30>)
    2f32:	4b06      	ldr	r3, [pc, #24]	; (2f4c <EVENT_SYSTEM_0_init+0x34>)
    2f34:	4798      	blx	r3

	event_system_init();
    2f36:	4b06      	ldr	r3, [pc, #24]	; (2f50 <EVENT_SYSTEM_0_init+0x38>)
    2f38:	4798      	blx	r3
}
    2f3a:	bf00      	nop
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	bf00      	nop
    2f40:	40001c00 	.word	0x40001c00
    2f44:	000024a1 	.word	0x000024a1
    2f48:	40000800 	.word	0x40000800
    2f4c:	00002627 	.word	0x00002627
    2f50:	00003f09 	.word	0x00003f09

00002f54 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2f58:	2101      	movs	r1, #1
    2f5a:	202b      	movs	r0, #43	; 0x2b
    2f5c:	4b2b      	ldr	r3, [pc, #172]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2f5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2f60:	2100      	movs	r1, #0
    2f62:	202b      	movs	r0, #43	; 0x2b
    2f64:	4b2a      	ldr	r3, [pc, #168]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2f66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2f68:	492a      	ldr	r1, [pc, #168]	; (3014 <QSPI_N25Q256_PORT_init+0xc0>)
    2f6a:	202b      	movs	r0, #43	; 0x2b
    2f6c:	4b2a      	ldr	r3, [pc, #168]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    2f6e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2f70:	2102      	movs	r1, #2
    2f72:	2008      	movs	r0, #8
    2f74:	4b25      	ldr	r3, [pc, #148]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2f76:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2f78:	2100      	movs	r1, #0
    2f7a:	2008      	movs	r0, #8
    2f7c:	4b27      	ldr	r3, [pc, #156]	; (301c <QSPI_N25Q256_PORT_init+0xc8>)
    2f7e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2f80:	2100      	movs	r1, #0
    2f82:	2008      	movs	r0, #8
    2f84:	4b22      	ldr	r3, [pc, #136]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2f86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2f88:	4925      	ldr	r1, [pc, #148]	; (3020 <QSPI_N25Q256_PORT_init+0xcc>)
    2f8a:	2008      	movs	r0, #8
    2f8c:	4b22      	ldr	r3, [pc, #136]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    2f8e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2f90:	2102      	movs	r1, #2
    2f92:	2009      	movs	r0, #9
    2f94:	4b1d      	ldr	r3, [pc, #116]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2f96:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2f98:	2100      	movs	r1, #0
    2f9a:	2009      	movs	r0, #9
    2f9c:	4b1f      	ldr	r3, [pc, #124]	; (301c <QSPI_N25Q256_PORT_init+0xc8>)
    2f9e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2fa0:	2100      	movs	r1, #0
    2fa2:	2009      	movs	r0, #9
    2fa4:	4b1a      	ldr	r3, [pc, #104]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2fa6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2fa8:	491e      	ldr	r1, [pc, #120]	; (3024 <QSPI_N25Q256_PORT_init+0xd0>)
    2faa:	2009      	movs	r0, #9
    2fac:	4b1a      	ldr	r3, [pc, #104]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    2fae:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2fb0:	2102      	movs	r1, #2
    2fb2:	200a      	movs	r0, #10
    2fb4:	4b15      	ldr	r3, [pc, #84]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2fb6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2fb8:	2100      	movs	r1, #0
    2fba:	200a      	movs	r0, #10
    2fbc:	4b17      	ldr	r3, [pc, #92]	; (301c <QSPI_N25Q256_PORT_init+0xc8>)
    2fbe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    2fc0:	2100      	movs	r1, #0
    2fc2:	200a      	movs	r0, #10
    2fc4:	4b12      	ldr	r3, [pc, #72]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2fc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2fc8:	4917      	ldr	r1, [pc, #92]	; (3028 <QSPI_N25Q256_PORT_init+0xd4>)
    2fca:	200a      	movs	r0, #10
    2fcc:	4b12      	ldr	r3, [pc, #72]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    2fce:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    2fd0:	2102      	movs	r1, #2
    2fd2:	200b      	movs	r0, #11
    2fd4:	4b0d      	ldr	r3, [pc, #52]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2fd6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    2fd8:	2100      	movs	r1, #0
    2fda:	200b      	movs	r0, #11
    2fdc:	4b0f      	ldr	r3, [pc, #60]	; (301c <QSPI_N25Q256_PORT_init+0xc8>)
    2fde:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    2fe0:	2100      	movs	r1, #0
    2fe2:	200b      	movs	r0, #11
    2fe4:	4b0a      	ldr	r3, [pc, #40]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2fe6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    2fe8:	4910      	ldr	r1, [pc, #64]	; (302c <QSPI_N25Q256_PORT_init+0xd8>)
    2fea:	200b      	movs	r0, #11
    2fec:	4b0a      	ldr	r3, [pc, #40]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    2fee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    2ff0:	2101      	movs	r1, #1
    2ff2:	202a      	movs	r0, #42	; 0x2a
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <QSPI_N25Q256_PORT_init+0xb8>)
    2ff6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    2ff8:	2100      	movs	r1, #0
    2ffa:	202a      	movs	r0, #42	; 0x2a
    2ffc:	4b04      	ldr	r3, [pc, #16]	; (3010 <QSPI_N25Q256_PORT_init+0xbc>)
    2ffe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    3000:	490b      	ldr	r1, [pc, #44]	; (3030 <QSPI_N25Q256_PORT_init+0xdc>)
    3002:	202a      	movs	r0, #42	; 0x2a
    3004:	4b04      	ldr	r3, [pc, #16]	; (3018 <QSPI_N25Q256_PORT_init+0xc4>)
    3006:	4798      	blx	r3
}
    3008:	bf00      	nop
    300a:	bd80      	pop	{r7, pc}
    300c:	00002cf5 	.word	0x00002cf5
    3010:	00002ca1 	.word	0x00002ca1
    3014:	002b0007 	.word	0x002b0007
    3018:	00002cd5 	.word	0x00002cd5
    301c:	00002d2d 	.word	0x00002d2d
    3020:	00080007 	.word	0x00080007
    3024:	00090007 	.word	0x00090007
    3028:	000a0007 	.word	0x000a0007
    302c:	000b0007 	.word	0x000b0007
    3030:	002a0007 	.word	0x002a0007

00003034 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3034:	b580      	push	{r7, lr}
    3036:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    3038:	4805      	ldr	r0, [pc, #20]	; (3050 <QSPI_N25Q256_CLOCK_init+0x1c>)
    303a:	4b06      	ldr	r3, [pc, #24]	; (3054 <QSPI_N25Q256_CLOCK_init+0x20>)
    303c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    303e:	4804      	ldr	r0, [pc, #16]	; (3050 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3040:	4b05      	ldr	r3, [pc, #20]	; (3058 <QSPI_N25Q256_CLOCK_init+0x24>)
    3042:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3044:	4802      	ldr	r0, [pc, #8]	; (3050 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3046:	4b05      	ldr	r3, [pc, #20]	; (305c <QSPI_N25Q256_CLOCK_init+0x28>)
    3048:	4798      	blx	r3
}
    304a:	bf00      	nop
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop
    3050:	40000800 	.word	0x40000800
    3054:	000024e7 	.word	0x000024e7
    3058:	00002527 	.word	0x00002527
    305c:	000026e7 	.word	0x000026e7

00003060 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3060:	b580      	push	{r7, lr}
    3062:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3064:	4b04      	ldr	r3, [pc, #16]	; (3078 <QSPI_N25Q256_init+0x18>)
    3066:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3068:	4904      	ldr	r1, [pc, #16]	; (307c <QSPI_N25Q256_init+0x1c>)
    306a:	4805      	ldr	r0, [pc, #20]	; (3080 <QSPI_N25Q256_init+0x20>)
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <QSPI_N25Q256_init+0x24>)
    306e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3070:	4b05      	ldr	r3, [pc, #20]	; (3088 <QSPI_N25Q256_init+0x28>)
    3072:	4798      	blx	r3
}
    3074:	bf00      	nop
    3076:	bd80      	pop	{r7, pc}
    3078:	00003035 	.word	0x00003035
    307c:	42003400 	.word	0x42003400
    3080:	2000974c 	.word	0x2000974c
    3084:	000043c1 	.word	0x000043c1
    3088:	00002f55 	.word	0x00002f55

0000308c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    308c:	b580      	push	{r7, lr}
    308e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3090:	4802      	ldr	r0, [pc, #8]	; (309c <DATETIME_CLOCK_CLOCK_init+0x10>)
    3092:	4b03      	ldr	r3, [pc, #12]	; (30a0 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3094:	4798      	blx	r3
}
    3096:	bf00      	nop
    3098:	bd80      	pop	{r7, pc}
    309a:	bf00      	nop
    309c:	40000800 	.word	0x40000800
    30a0:	00002567 	.word	0x00002567

000030a4 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    30a4:	b580      	push	{r7, lr}
    30a6:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    30a8:	4b03      	ldr	r3, [pc, #12]	; (30b8 <DATETIME_CLOCK_init+0x14>)
    30aa:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    30ac:	4903      	ldr	r1, [pc, #12]	; (30bc <DATETIME_CLOCK_init+0x18>)
    30ae:	4804      	ldr	r0, [pc, #16]	; (30c0 <DATETIME_CLOCK_init+0x1c>)
    30b0:	4b04      	ldr	r3, [pc, #16]	; (30c4 <DATETIME_CLOCK_init+0x20>)
    30b2:	4798      	blx	r3
}
    30b4:	bf00      	nop
    30b6:	bd80      	pop	{r7, pc}
    30b8:	0000308d 	.word	0x0000308d
    30bc:	40002400 	.word	0x40002400
    30c0:	20009874 	.word	0x20009874
    30c4:	00003c0d 	.word	0x00003c0d

000030c8 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    30cc:	2101      	movs	r1, #1
    30ce:	2010      	movs	r0, #16
    30d0:	4b07      	ldr	r3, [pc, #28]	; (30f0 <I2C_HEATERS_PORT_init+0x28>)
    30d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    30d4:	4907      	ldr	r1, [pc, #28]	; (30f4 <I2C_HEATERS_PORT_init+0x2c>)
    30d6:	2010      	movs	r0, #16
    30d8:	4b07      	ldr	r3, [pc, #28]	; (30f8 <I2C_HEATERS_PORT_init+0x30>)
    30da:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    30dc:	2101      	movs	r1, #1
    30de:	2011      	movs	r0, #17
    30e0:	4b03      	ldr	r3, [pc, #12]	; (30f0 <I2C_HEATERS_PORT_init+0x28>)
    30e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    30e4:	4905      	ldr	r1, [pc, #20]	; (30fc <I2C_HEATERS_PORT_init+0x34>)
    30e6:	2011      	movs	r0, #17
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <I2C_HEATERS_PORT_init+0x30>)
    30ea:	4798      	blx	r3
}
    30ec:	bf00      	nop
    30ee:	bd80      	pop	{r7, pc}
    30f0:	00002ca1 	.word	0x00002ca1
    30f4:	00100002 	.word	0x00100002
    30f8:	00002cd5 	.word	0x00002cd5
    30fc:	00110002 	.word	0x00110002

00003100 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    3100:	b580      	push	{r7, lr}
    3102:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3104:	2242      	movs	r2, #66	; 0x42
    3106:	2108      	movs	r1, #8
    3108:	4806      	ldr	r0, [pc, #24]	; (3124 <I2C_HEATERS_CLOCK_init+0x24>)
    310a:	4b07      	ldr	r3, [pc, #28]	; (3128 <I2C_HEATERS_CLOCK_init+0x28>)
    310c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    310e:	224a      	movs	r2, #74	; 0x4a
    3110:	2103      	movs	r1, #3
    3112:	4804      	ldr	r0, [pc, #16]	; (3124 <I2C_HEATERS_CLOCK_init+0x24>)
    3114:	4b04      	ldr	r3, [pc, #16]	; (3128 <I2C_HEATERS_CLOCK_init+0x28>)
    3116:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    3118:	4804      	ldr	r0, [pc, #16]	; (312c <I2C_HEATERS_CLOCK_init+0x2c>)
    311a:	4b05      	ldr	r3, [pc, #20]	; (3130 <I2C_HEATERS_CLOCK_init+0x30>)
    311c:	4798      	blx	r3
}
    311e:	bf00      	nop
    3120:	bd80      	pop	{r7, pc}
    3122:	bf00      	nop
    3124:	40001c00 	.word	0x40001c00
    3128:	000024a1 	.word	0x000024a1
    312c:	40000800 	.word	0x40000800
    3130:	000025a7 	.word	0x000025a7

00003134 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    3134:	b580      	push	{r7, lr}
    3136:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    3138:	4b04      	ldr	r3, [pc, #16]	; (314c <I2C_HEATERS_init+0x18>)
    313a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    313c:	4904      	ldr	r1, [pc, #16]	; (3150 <I2C_HEATERS_init+0x1c>)
    313e:	4805      	ldr	r0, [pc, #20]	; (3154 <I2C_HEATERS_init+0x20>)
    3140:	4b05      	ldr	r3, [pc, #20]	; (3158 <I2C_HEATERS_init+0x24>)
    3142:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    3144:	4b05      	ldr	r3, [pc, #20]	; (315c <I2C_HEATERS_init+0x28>)
    3146:	4798      	blx	r3
}
    3148:	bf00      	nop
    314a:	bd80      	pop	{r7, pc}
    314c:	00003101 	.word	0x00003101
    3150:	40003400 	.word	0x40003400
    3154:	200097cc 	.word	0x200097cc
    3158:	000041e5 	.word	0x000041e5
    315c:	000030c9 	.word	0x000030c9

00003160 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3160:	b580      	push	{r7, lr}
    3162:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3164:	2100      	movs	r1, #0
    3166:	203b      	movs	r0, #59	; 0x3b
    3168:	4b11      	ldr	r3, [pc, #68]	; (31b0 <SPI_TEMP_PORT_init+0x50>)
    316a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    316c:	2102      	movs	r1, #2
    316e:	203b      	movs	r0, #59	; 0x3b
    3170:	4b10      	ldr	r3, [pc, #64]	; (31b4 <SPI_TEMP_PORT_init+0x54>)
    3172:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3174:	4910      	ldr	r1, [pc, #64]	; (31b8 <SPI_TEMP_PORT_init+0x58>)
    3176:	203b      	movs	r0, #59	; 0x3b
    3178:	4b10      	ldr	r3, [pc, #64]	; (31bc <SPI_TEMP_PORT_init+0x5c>)
    317a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    317c:	2100      	movs	r1, #0
    317e:	203a      	movs	r0, #58	; 0x3a
    3180:	4b0b      	ldr	r3, [pc, #44]	; (31b0 <SPI_TEMP_PORT_init+0x50>)
    3182:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3184:	2102      	movs	r1, #2
    3186:	203a      	movs	r0, #58	; 0x3a
    3188:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <SPI_TEMP_PORT_init+0x54>)
    318a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    318c:	490c      	ldr	r1, [pc, #48]	; (31c0 <SPI_TEMP_PORT_init+0x60>)
    318e:	203a      	movs	r0, #58	; 0x3a
    3190:	4b0a      	ldr	r3, [pc, #40]	; (31bc <SPI_TEMP_PORT_init+0x5c>)
    3192:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3194:	2101      	movs	r1, #1
    3196:	203c      	movs	r0, #60	; 0x3c
    3198:	4b06      	ldr	r3, [pc, #24]	; (31b4 <SPI_TEMP_PORT_init+0x54>)
    319a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    319c:	2100      	movs	r1, #0
    319e:	203c      	movs	r0, #60	; 0x3c
    31a0:	4b08      	ldr	r3, [pc, #32]	; (31c4 <SPI_TEMP_PORT_init+0x64>)
    31a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    31a4:	4908      	ldr	r1, [pc, #32]	; (31c8 <SPI_TEMP_PORT_init+0x68>)
    31a6:	203c      	movs	r0, #60	; 0x3c
    31a8:	4b04      	ldr	r3, [pc, #16]	; (31bc <SPI_TEMP_PORT_init+0x5c>)
    31aa:	4798      	blx	r3
}
    31ac:	bf00      	nop
    31ae:	bd80      	pop	{r7, pc}
    31b0:	00002d2d 	.word	0x00002d2d
    31b4:	00002cf5 	.word	0x00002cf5
    31b8:	003b0003 	.word	0x003b0003
    31bc:	00002cd5 	.word	0x00002cd5
    31c0:	003a0003 	.word	0x003a0003
    31c4:	00002ca1 	.word	0x00002ca1
    31c8:	003c0003 	.word	0x003c0003

000031cc <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    31d0:	2245      	movs	r2, #69	; 0x45
    31d2:	2122      	movs	r1, #34	; 0x22
    31d4:	4806      	ldr	r0, [pc, #24]	; (31f0 <SPI_TEMP_CLOCK_init+0x24>)
    31d6:	4b07      	ldr	r3, [pc, #28]	; (31f4 <SPI_TEMP_CLOCK_init+0x28>)
    31d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    31da:	224a      	movs	r2, #74	; 0x4a
    31dc:	2103      	movs	r1, #3
    31de:	4804      	ldr	r0, [pc, #16]	; (31f0 <SPI_TEMP_CLOCK_init+0x24>)
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <SPI_TEMP_CLOCK_init+0x28>)
    31e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    31e4:	4804      	ldr	r0, [pc, #16]	; (31f8 <SPI_TEMP_CLOCK_init+0x2c>)
    31e6:	4b05      	ldr	r3, [pc, #20]	; (31fc <SPI_TEMP_CLOCK_init+0x30>)
    31e8:	4798      	blx	r3
}
    31ea:	bf00      	nop
    31ec:	bd80      	pop	{r7, pc}
    31ee:	bf00      	nop
    31f0:	40001c00 	.word	0x40001c00
    31f4:	000024a1 	.word	0x000024a1
    31f8:	40000800 	.word	0x40000800
    31fc:	00002707 	.word	0x00002707

00003200 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    3200:	b580      	push	{r7, lr}
    3202:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3204:	4b05      	ldr	r3, [pc, #20]	; (321c <SPI_TEMP_init+0x1c>)
    3206:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    3208:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    320c:	4804      	ldr	r0, [pc, #16]	; (3220 <SPI_TEMP_init+0x20>)
    320e:	4b05      	ldr	r3, [pc, #20]	; (3224 <SPI_TEMP_init+0x24>)
    3210:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    3212:	4b05      	ldr	r3, [pc, #20]	; (3228 <SPI_TEMP_init+0x28>)
    3214:	4798      	blx	r3
}
    3216:	bf00      	nop
    3218:	bd80      	pop	{r7, pc}
    321a:	bf00      	nop
    321c:	000031cd 	.word	0x000031cd
    3220:	200096f4 	.word	0x200096f4
    3224:	000044d1 	.word	0x000044d1
    3228:	00003161 	.word	0x00003161

0000322c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    322c:	b580      	push	{r7, lr}
    322e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3230:	2100      	movs	r1, #0
    3232:	2017      	movs	r0, #23
    3234:	4b07      	ldr	r3, [pc, #28]	; (3254 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    3236:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    3238:	4907      	ldr	r1, [pc, #28]	; (3258 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    323a:	2017      	movs	r0, #23
    323c:	4b07      	ldr	r3, [pc, #28]	; (325c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    323e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3240:	2100      	movs	r1, #0
    3242:	2016      	movs	r0, #22
    3244:	4b03      	ldr	r3, [pc, #12]	; (3254 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    3246:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3248:	4905      	ldr	r1, [pc, #20]	; (3260 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    324a:	2016      	movs	r0, #22
    324c:	4b03      	ldr	r3, [pc, #12]	; (325c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    324e:	4798      	blx	r3
}
    3250:	bf00      	nop
    3252:	bd80      	pop	{r7, pc}
    3254:	00002ca1 	.word	0x00002ca1
    3258:	00170003 	.word	0x00170003
    325c:	00002cd5 	.word	0x00002cd5
    3260:	00160003 	.word	0x00160003

00003264 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    3264:	b580      	push	{r7, lr}
    3266:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3268:	2244      	movs	r2, #68	; 0x44
    326a:	2123      	movs	r1, #35	; 0x23
    326c:	4806      	ldr	r0, [pc, #24]	; (3288 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    326e:	4b07      	ldr	r3, [pc, #28]	; (328c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    3270:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3272:	224a      	movs	r2, #74	; 0x4a
    3274:	2103      	movs	r1, #3
    3276:	4804      	ldr	r0, [pc, #16]	; (3288 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    3278:	4b04      	ldr	r3, [pc, #16]	; (328c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    327a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    327c:	4804      	ldr	r0, [pc, #16]	; (3290 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    327e:	4b05      	ldr	r3, [pc, #20]	; (3294 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    3280:	4798      	blx	r3
}
    3282:	bf00      	nop
    3284:	bd80      	pop	{r7, pc}
    3286:	bf00      	nop
    3288:	40001c00 	.word	0x40001c00
    328c:	000024a1 	.word	0x000024a1
    3290:	40000800 	.word	0x40000800
    3294:	00002727 	.word	0x00002727

00003298 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    3298:	b580      	push	{r7, lr}
    329a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    329c:	4b04      	ldr	r3, [pc, #16]	; (32b0 <I2C_FLAPPER_VALVE_init+0x18>)
    329e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    32a0:	4904      	ldr	r1, [pc, #16]	; (32b4 <I2C_FLAPPER_VALVE_init+0x1c>)
    32a2:	4805      	ldr	r0, [pc, #20]	; (32b8 <I2C_FLAPPER_VALVE_init+0x20>)
    32a4:	4b05      	ldr	r3, [pc, #20]	; (32bc <I2C_FLAPPER_VALVE_init+0x24>)
    32a6:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <I2C_FLAPPER_VALVE_init+0x28>)
    32aa:	4798      	blx	r3
}
    32ac:	bf00      	nop
    32ae:	bd80      	pop	{r7, pc}
    32b0:	00003265 	.word	0x00003265
    32b4:	43000400 	.word	0x43000400
    32b8:	20009790 	.word	0x20009790
    32bc:	000041e5 	.word	0x000041e5
    32c0:	0000322d 	.word	0x0000322d

000032c4 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    32c8:	2100      	movs	r1, #0
    32ca:	2044      	movs	r0, #68	; 0x44
    32cc:	4b11      	ldr	r3, [pc, #68]	; (3314 <SPI_HI3593_PORT_init+0x50>)
    32ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    32d0:	2102      	movs	r1, #2
    32d2:	2044      	movs	r0, #68	; 0x44
    32d4:	4b10      	ldr	r3, [pc, #64]	; (3318 <SPI_HI3593_PORT_init+0x54>)
    32d6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    32d8:	4910      	ldr	r1, [pc, #64]	; (331c <SPI_HI3593_PORT_init+0x58>)
    32da:	2044      	movs	r0, #68	; 0x44
    32dc:	4b10      	ldr	r3, [pc, #64]	; (3320 <SPI_HI3593_PORT_init+0x5c>)
    32de:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    32e0:	2100      	movs	r1, #0
    32e2:	2045      	movs	r0, #69	; 0x45
    32e4:	4b0b      	ldr	r3, [pc, #44]	; (3314 <SPI_HI3593_PORT_init+0x50>)
    32e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    32e8:	2102      	movs	r1, #2
    32ea:	2045      	movs	r0, #69	; 0x45
    32ec:	4b0a      	ldr	r3, [pc, #40]	; (3318 <SPI_HI3593_PORT_init+0x54>)
    32ee:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    32f0:	490c      	ldr	r1, [pc, #48]	; (3324 <SPI_HI3593_PORT_init+0x60>)
    32f2:	2045      	movs	r0, #69	; 0x45
    32f4:	4b0a      	ldr	r3, [pc, #40]	; (3320 <SPI_HI3593_PORT_init+0x5c>)
    32f6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    32f8:	2101      	movs	r1, #1
    32fa:	2047      	movs	r0, #71	; 0x47
    32fc:	4b06      	ldr	r3, [pc, #24]	; (3318 <SPI_HI3593_PORT_init+0x54>)
    32fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    3300:	2100      	movs	r1, #0
    3302:	2047      	movs	r0, #71	; 0x47
    3304:	4b08      	ldr	r3, [pc, #32]	; (3328 <SPI_HI3593_PORT_init+0x64>)
    3306:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    3308:	4908      	ldr	r1, [pc, #32]	; (332c <SPI_HI3593_PORT_init+0x68>)
    330a:	2047      	movs	r0, #71	; 0x47
    330c:	4b04      	ldr	r3, [pc, #16]	; (3320 <SPI_HI3593_PORT_init+0x5c>)
    330e:	4798      	blx	r3
}
    3310:	bf00      	nop
    3312:	bd80      	pop	{r7, pc}
    3314:	00002d2d 	.word	0x00002d2d
    3318:	00002cf5 	.word	0x00002cf5
    331c:	00440002 	.word	0x00440002
    3320:	00002cd5 	.word	0x00002cd5
    3324:	00450002 	.word	0x00450002
    3328:	00002ca1 	.word	0x00002ca1
    332c:	00470002 	.word	0x00470002

00003330 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3330:	b580      	push	{r7, lr}
    3332:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3334:	2242      	movs	r2, #66	; 0x42
    3336:	2124      	movs	r1, #36	; 0x24
    3338:	4806      	ldr	r0, [pc, #24]	; (3354 <SPI_HI3593_CLOCK_init+0x24>)
    333a:	4b07      	ldr	r3, [pc, #28]	; (3358 <SPI_HI3593_CLOCK_init+0x28>)
    333c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    333e:	224a      	movs	r2, #74	; 0x4a
    3340:	2103      	movs	r1, #3
    3342:	4804      	ldr	r0, [pc, #16]	; (3354 <SPI_HI3593_CLOCK_init+0x24>)
    3344:	4b04      	ldr	r3, [pc, #16]	; (3358 <SPI_HI3593_CLOCK_init+0x28>)
    3346:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3348:	4804      	ldr	r0, [pc, #16]	; (335c <SPI_HI3593_CLOCK_init+0x2c>)
    334a:	4b05      	ldr	r3, [pc, #20]	; (3360 <SPI_HI3593_CLOCK_init+0x30>)
    334c:	4798      	blx	r3
}
    334e:	bf00      	nop
    3350:	bd80      	pop	{r7, pc}
    3352:	bf00      	nop
    3354:	40001c00 	.word	0x40001c00
    3358:	000024a1 	.word	0x000024a1
    335c:	40000800 	.word	0x40000800
    3360:	00002747 	.word	0x00002747

00003364 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3368:	4b04      	ldr	r3, [pc, #16]	; (337c <SPI_HI3593_init+0x18>)
    336a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    336c:	4904      	ldr	r1, [pc, #16]	; (3380 <SPI_HI3593_init+0x1c>)
    336e:	4805      	ldr	r0, [pc, #20]	; (3384 <SPI_HI3593_init+0x20>)
    3370:	4b05      	ldr	r3, [pc, #20]	; (3388 <SPI_HI3593_init+0x24>)
    3372:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3374:	4b05      	ldr	r3, [pc, #20]	; (338c <SPI_HI3593_init+0x28>)
    3376:	4798      	blx	r3
}
    3378:	bf00      	nop
    337a:	bd80      	pop	{r7, pc}
    337c:	00003331 	.word	0x00003331
    3380:	43000800 	.word	0x43000800
    3384:	200096dc 	.word	0x200096dc
    3388:	000044d1 	.word	0x000044d1
    338c:	000032c5 	.word	0x000032c5

00003390 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    3390:	b580      	push	{r7, lr}
    3392:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3394:	2100      	movs	r1, #0
    3396:	2068      	movs	r0, #104	; 0x68
    3398:	4b07      	ldr	r3, [pc, #28]	; (33b8 <I2C_FANS_PORT_init+0x28>)
    339a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    339c:	4907      	ldr	r1, [pc, #28]	; (33bc <I2C_FANS_PORT_init+0x2c>)
    339e:	2068      	movs	r0, #104	; 0x68
    33a0:	4b07      	ldr	r3, [pc, #28]	; (33c0 <I2C_FANS_PORT_init+0x30>)
    33a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    33a4:	2100      	movs	r1, #0
    33a6:	2069      	movs	r0, #105	; 0x69
    33a8:	4b03      	ldr	r3, [pc, #12]	; (33b8 <I2C_FANS_PORT_init+0x28>)
    33aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    33ac:	4905      	ldr	r1, [pc, #20]	; (33c4 <I2C_FANS_PORT_init+0x34>)
    33ae:	2069      	movs	r0, #105	; 0x69
    33b0:	4b03      	ldr	r3, [pc, #12]	; (33c0 <I2C_FANS_PORT_init+0x30>)
    33b2:	4798      	blx	r3
}
    33b4:	bf00      	nop
    33b6:	bd80      	pop	{r7, pc}
    33b8:	00002ca1 	.word	0x00002ca1
    33bc:	00680002 	.word	0x00680002
    33c0:	00002cd5 	.word	0x00002cd5
    33c4:	00690002 	.word	0x00690002

000033c8 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    33c8:	b580      	push	{r7, lr}
    33ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33cc:	2244      	movs	r2, #68	; 0x44
    33ce:	2125      	movs	r1, #37	; 0x25
    33d0:	4806      	ldr	r0, [pc, #24]	; (33ec <I2C_FANS_CLOCK_init+0x24>)
    33d2:	4b07      	ldr	r3, [pc, #28]	; (33f0 <I2C_FANS_CLOCK_init+0x28>)
    33d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33d6:	224a      	movs	r2, #74	; 0x4a
    33d8:	2103      	movs	r1, #3
    33da:	4804      	ldr	r0, [pc, #16]	; (33ec <I2C_FANS_CLOCK_init+0x24>)
    33dc:	4b04      	ldr	r3, [pc, #16]	; (33f0 <I2C_FANS_CLOCK_init+0x28>)
    33de:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    33e0:	4804      	ldr	r0, [pc, #16]	; (33f4 <I2C_FANS_CLOCK_init+0x2c>)
    33e2:	4b05      	ldr	r3, [pc, #20]	; (33f8 <I2C_FANS_CLOCK_init+0x30>)
    33e4:	4798      	blx	r3
}
    33e6:	bf00      	nop
    33e8:	bd80      	pop	{r7, pc}
    33ea:	bf00      	nop
    33ec:	40001c00 	.word	0x40001c00
    33f0:	000024a1 	.word	0x000024a1
    33f4:	40000800 	.word	0x40000800
    33f8:	00002767 	.word	0x00002767

000033fc <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    3400:	4b04      	ldr	r3, [pc, #16]	; (3414 <I2C_FANS_init+0x18>)
    3402:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    3404:	4904      	ldr	r1, [pc, #16]	; (3418 <I2C_FANS_init+0x1c>)
    3406:	4805      	ldr	r0, [pc, #20]	; (341c <I2C_FANS_init+0x20>)
    3408:	4b05      	ldr	r3, [pc, #20]	; (3420 <I2C_FANS_init+0x24>)
    340a:	4798      	blx	r3
	I2C_FANS_PORT_init();
    340c:	4b05      	ldr	r3, [pc, #20]	; (3424 <I2C_FANS_init+0x28>)
    340e:	4798      	blx	r3
}
    3410:	bf00      	nop
    3412:	bd80      	pop	{r7, pc}
    3414:	000033c9 	.word	0x000033c9
    3418:	43000c00 	.word	0x43000c00
    341c:	2000970c 	.word	0x2000970c
    3420:	000041e5 	.word	0x000041e5
    3424:	00003391 	.word	0x00003391

00003428 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    3428:	b580      	push	{r7, lr}
    342a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    342c:	4808      	ldr	r0, [pc, #32]	; (3450 <TIMER_USB_init+0x28>)
    342e:	4b09      	ldr	r3, [pc, #36]	; (3454 <TIMER_USB_init+0x2c>)
    3430:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3432:	2243      	movs	r2, #67	; 0x43
    3434:	2109      	movs	r1, #9
    3436:	4808      	ldr	r0, [pc, #32]	; (3458 <TIMER_USB_init+0x30>)
    3438:	4b08      	ldr	r3, [pc, #32]	; (345c <TIMER_USB_init+0x34>)
    343a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    343c:	4b08      	ldr	r3, [pc, #32]	; (3460 <TIMER_USB_init+0x38>)
    343e:	4798      	blx	r3
    3440:	4603      	mov	r3, r0
    3442:	461a      	mov	r2, r3
    3444:	4907      	ldr	r1, [pc, #28]	; (3464 <TIMER_USB_init+0x3c>)
    3446:	4808      	ldr	r0, [pc, #32]	; (3468 <TIMER_USB_init+0x40>)
    3448:	4b08      	ldr	r3, [pc, #32]	; (346c <TIMER_USB_init+0x44>)
    344a:	4798      	blx	r3
}
    344c:	bf00      	nop
    344e:	bd80      	pop	{r7, pc}
    3450:	40000800 	.word	0x40000800
    3454:	000025c7 	.word	0x000025c7
    3458:	40001c00 	.word	0x40001c00
    345c:	000024a1 	.word	0x000024a1
    3460:	0000a611 	.word	0x0000a611
    3464:	40003800 	.word	0x40003800
    3468:	20009834 	.word	0x20009834
    346c:	00004761 	.word	0x00004761

00003470 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3470:	b580      	push	{r7, lr}
    3472:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3474:	4808      	ldr	r0, [pc, #32]	; (3498 <TIMER_ARINC_init+0x28>)
    3476:	4b09      	ldr	r3, [pc, #36]	; (349c <TIMER_ARINC_init+0x2c>)
    3478:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    347a:	2244      	movs	r2, #68	; 0x44
    347c:	211a      	movs	r1, #26
    347e:	4808      	ldr	r0, [pc, #32]	; (34a0 <TIMER_ARINC_init+0x30>)
    3480:	4b08      	ldr	r3, [pc, #32]	; (34a4 <TIMER_ARINC_init+0x34>)
    3482:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3484:	4b08      	ldr	r3, [pc, #32]	; (34a8 <TIMER_ARINC_init+0x38>)
    3486:	4798      	blx	r3
    3488:	4603      	mov	r3, r0
    348a:	461a      	mov	r2, r3
    348c:	4907      	ldr	r1, [pc, #28]	; (34ac <TIMER_ARINC_init+0x3c>)
    348e:	4808      	ldr	r0, [pc, #32]	; (34b0 <TIMER_ARINC_init+0x40>)
    3490:	4b08      	ldr	r3, [pc, #32]	; (34b4 <TIMER_ARINC_init+0x44>)
    3492:	4798      	blx	r3
}
    3494:	bf00      	nop
    3496:	bd80      	pop	{r7, pc}
    3498:	40000800 	.word	0x40000800
    349c:	00002687 	.word	0x00002687
    34a0:	40001c00 	.word	0x40001c00
    34a4:	000024a1 	.word	0x000024a1
    34a8:	0000a611 	.word	0x0000a611
    34ac:	4101a000 	.word	0x4101a000
    34b0:	20009814 	.word	0x20009814
    34b4:	00004761 	.word	0x00004761

000034b8 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    34bc:	4808      	ldr	r0, [pc, #32]	; (34e0 <TIMER_MAINTENANCE_init+0x28>)
    34be:	4b09      	ldr	r3, [pc, #36]	; (34e4 <TIMER_MAINTENANCE_init+0x2c>)
    34c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34c2:	2246      	movs	r2, #70	; 0x46
    34c4:	211e      	movs	r1, #30
    34c6:	4808      	ldr	r0, [pc, #32]	; (34e8 <TIMER_MAINTENANCE_init+0x30>)
    34c8:	4b08      	ldr	r3, [pc, #32]	; (34ec <TIMER_MAINTENANCE_init+0x34>)
    34ca:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    34cc:	4b08      	ldr	r3, [pc, #32]	; (34f0 <TIMER_MAINTENANCE_init+0x38>)
    34ce:	4798      	blx	r3
    34d0:	4603      	mov	r3, r0
    34d2:	461a      	mov	r2, r3
    34d4:	4907      	ldr	r1, [pc, #28]	; (34f4 <TIMER_MAINTENANCE_init+0x3c>)
    34d6:	4808      	ldr	r0, [pc, #32]	; (34f8 <TIMER_MAINTENANCE_init+0x40>)
    34d8:	4b08      	ldr	r3, [pc, #32]	; (34fc <TIMER_MAINTENANCE_init+0x44>)
    34da:	4798      	blx	r3
}
    34dc:	bf00      	nop
    34de:	bd80      	pop	{r7, pc}
    34e0:	40000800 	.word	0x40000800
    34e4:	000026a7 	.word	0x000026a7
    34e8:	40001c00 	.word	0x40001c00
    34ec:	000024a1 	.word	0x000024a1
    34f0:	0000a611 	.word	0x0000a611
    34f4:	42001400 	.word	0x42001400
    34f8:	2000972c 	.word	0x2000972c
    34fc:	00004761 	.word	0x00004761

00003500 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3500:	b580      	push	{r7, lr}
    3502:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3504:	4808      	ldr	r0, [pc, #32]	; (3528 <TIMER_INTERFACE_init+0x28>)
    3506:	4b09      	ldr	r3, [pc, #36]	; (352c <TIMER_INTERFACE_init+0x2c>)
    3508:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    350a:	2246      	movs	r2, #70	; 0x46
    350c:	211e      	movs	r1, #30
    350e:	4808      	ldr	r0, [pc, #32]	; (3530 <TIMER_INTERFACE_init+0x30>)
    3510:	4b08      	ldr	r3, [pc, #32]	; (3534 <TIMER_INTERFACE_init+0x34>)
    3512:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3514:	4b08      	ldr	r3, [pc, #32]	; (3538 <TIMER_INTERFACE_init+0x38>)
    3516:	4798      	blx	r3
    3518:	4603      	mov	r3, r0
    351a:	461a      	mov	r2, r3
    351c:	4907      	ldr	r1, [pc, #28]	; (353c <TIMER_INTERFACE_init+0x3c>)
    351e:	4808      	ldr	r0, [pc, #32]	; (3540 <TIMER_INTERFACE_init+0x40>)
    3520:	4b08      	ldr	r3, [pc, #32]	; (3544 <TIMER_INTERFACE_init+0x44>)
    3522:	4798      	blx	r3
}
    3524:	bf00      	nop
    3526:	bd80      	pop	{r7, pc}
    3528:	40000800 	.word	0x40000800
    352c:	000026c7 	.word	0x000026c7
    3530:	40001c00 	.word	0x40001c00
    3534:	000024a1 	.word	0x000024a1
    3538:	0000a611 	.word	0x0000a611
    353c:	42001800 	.word	0x42001800
    3540:	20009770 	.word	0x20009770
    3544:	00004761 	.word	0x00004761

00003548 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3548:	b580      	push	{r7, lr}
    354a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    354c:	4808      	ldr	r0, [pc, #32]	; (3570 <TIMER_EVENT_init+0x28>)
    354e:	4b09      	ldr	r3, [pc, #36]	; (3574 <TIMER_EVENT_init+0x2c>)
    3550:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3552:	2246      	movs	r2, #70	; 0x46
    3554:	2127      	movs	r1, #39	; 0x27
    3556:	4808      	ldr	r0, [pc, #32]	; (3578 <TIMER_EVENT_init+0x30>)
    3558:	4b08      	ldr	r3, [pc, #32]	; (357c <TIMER_EVENT_init+0x34>)
    355a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    355c:	4b08      	ldr	r3, [pc, #32]	; (3580 <TIMER_EVENT_init+0x38>)
    355e:	4798      	blx	r3
    3560:	4603      	mov	r3, r0
    3562:	461a      	mov	r2, r3
    3564:	4907      	ldr	r1, [pc, #28]	; (3584 <TIMER_EVENT_init+0x3c>)
    3566:	4808      	ldr	r0, [pc, #32]	; (3588 <TIMER_EVENT_init+0x40>)
    3568:	4b08      	ldr	r3, [pc, #32]	; (358c <TIMER_EVENT_init+0x44>)
    356a:	4798      	blx	r3
}
    356c:	bf00      	nop
    356e:	bd80      	pop	{r7, pc}
    3570:	40000800 	.word	0x40000800
    3574:	00002787 	.word	0x00002787
    3578:	40001c00 	.word	0x40001c00
    357c:	000024a1 	.word	0x000024a1
    3580:	0000a611 	.word	0x0000a611
    3584:	43001400 	.word	0x43001400
    3588:	20009750 	.word	0x20009750
    358c:	00004761 	.word	0x00004761

00003590 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3590:	b480      	push	{r7}
    3592:	af00      	add	r7, sp, #0
}
    3594:	bf00      	nop
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr
	...

000035a0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    35a4:	4804      	ldr	r0, [pc, #16]	; (35b8 <LIVE_PULSE_CLOCK_init+0x18>)
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <LIVE_PULSE_CLOCK_init+0x1c>)
    35a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    35aa:	2240      	movs	r2, #64	; 0x40
    35ac:	2127      	movs	r1, #39	; 0x27
    35ae:	4804      	ldr	r0, [pc, #16]	; (35c0 <LIVE_PULSE_CLOCK_init+0x20>)
    35b0:	4b04      	ldr	r3, [pc, #16]	; (35c4 <LIVE_PULSE_CLOCK_init+0x24>)
    35b2:	4798      	blx	r3
}
    35b4:	bf00      	nop
    35b6:	bd80      	pop	{r7, pc}
    35b8:	40000800 	.word	0x40000800
    35bc:	000027a7 	.word	0x000027a7
    35c0:	40001c00 	.word	0x40001c00
    35c4:	000024a1 	.word	0x000024a1

000035c8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    35c8:	b580      	push	{r7, lr}
    35ca:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <LIVE_PULSE_init+0x20>)
    35ce:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    35d0:	4b06      	ldr	r3, [pc, #24]	; (35ec <LIVE_PULSE_init+0x24>)
    35d2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    35d4:	4b06      	ldr	r3, [pc, #24]	; (35f0 <LIVE_PULSE_init+0x28>)
    35d6:	4798      	blx	r3
    35d8:	4603      	mov	r3, r0
    35da:	461a      	mov	r2, r3
    35dc:	4905      	ldr	r1, [pc, #20]	; (35f4 <LIVE_PULSE_init+0x2c>)
    35de:	4806      	ldr	r0, [pc, #24]	; (35f8 <LIVE_PULSE_init+0x30>)
    35e0:	4b06      	ldr	r3, [pc, #24]	; (35fc <LIVE_PULSE_init+0x34>)
    35e2:	4798      	blx	r3
}
    35e4:	bf00      	nop
    35e6:	bd80      	pop	{r7, pc}
    35e8:	000035a1 	.word	0x000035a1
    35ec:	00003591 	.word	0x00003591
    35f0:	0000a625 	.word	0x0000a625
    35f4:	43001800 	.word	0x43001800
    35f8:	200097b0 	.word	0x200097b0
    35fc:	000042c1 	.word	0x000042c1

00003600 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    3600:	b580      	push	{r7, lr}
    3602:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    3604:	4804      	ldr	r0, [pc, #16]	; (3618 <TIMER_HVAC_CLOCK_init+0x18>)
    3606:	4b05      	ldr	r3, [pc, #20]	; (361c <TIMER_HVAC_CLOCK_init+0x1c>)
    3608:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    360a:	2244      	movs	r2, #68	; 0x44
    360c:	2119      	movs	r1, #25
    360e:	4804      	ldr	r0, [pc, #16]	; (3620 <TIMER_HVAC_CLOCK_init+0x20>)
    3610:	4b04      	ldr	r3, [pc, #16]	; (3624 <TIMER_HVAC_CLOCK_init+0x24>)
    3612:	4798      	blx	r3
}
    3614:	bf00      	nop
    3616:	bd80      	pop	{r7, pc}
    3618:	40000800 	.word	0x40000800
    361c:	00002647 	.word	0x00002647
    3620:	40001c00 	.word	0x40001c00
    3624:	000024a1 	.word	0x000024a1

00003628 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    3628:	b580      	push	{r7, lr}
    362a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    362c:	4b05      	ldr	r3, [pc, #20]	; (3644 <TIMER_HVAC_init+0x1c>)
    362e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    3630:	4b05      	ldr	r3, [pc, #20]	; (3648 <TIMER_HVAC_init+0x20>)
    3632:	4798      	blx	r3
    3634:	4603      	mov	r3, r0
    3636:	461a      	mov	r2, r3
    3638:	4904      	ldr	r1, [pc, #16]	; (364c <TIMER_HVAC_init+0x24>)
    363a:	4805      	ldr	r0, [pc, #20]	; (3650 <TIMER_HVAC_init+0x28>)
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <TIMER_HVAC_init+0x2c>)
    363e:	4798      	blx	r3
}
    3640:	bf00      	nop
    3642:	bd80      	pop	{r7, pc}
    3644:	00003601 	.word	0x00003601
    3648:	000099d1 	.word	0x000099d1
    364c:	41016000 	.word	0x41016000
    3650:	20009854 	.word	0x20009854
    3654:	00004761 	.word	0x00004761

00003658 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    3658:	b580      	push	{r7, lr}
    365a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    365c:	4804      	ldr	r0, [pc, #16]	; (3670 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    365e:	4b05      	ldr	r3, [pc, #20]	; (3674 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    3660:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3662:	2244      	movs	r2, #68	; 0x44
    3664:	2119      	movs	r1, #25
    3666:	4804      	ldr	r0, [pc, #16]	; (3678 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    3668:	4b04      	ldr	r3, [pc, #16]	; (367c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    366a:	4798      	blx	r3
}
    366c:	bf00      	nop
    366e:	bd80      	pop	{r7, pc}
    3670:	40000800 	.word	0x40000800
    3674:	00002667 	.word	0x00002667
    3678:	40001c00 	.word	0x40001c00
    367c:	000024a1 	.word	0x000024a1

00003680 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    3680:	b580      	push	{r7, lr}
    3682:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    3684:	4b05      	ldr	r3, [pc, #20]	; (369c <TIMER_TEMPERATURES_init+0x1c>)
    3686:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <TIMER_TEMPERATURES_init+0x20>)
    368a:	4798      	blx	r3
    368c:	4603      	mov	r3, r0
    368e:	461a      	mov	r2, r3
    3690:	4904      	ldr	r1, [pc, #16]	; (36a4 <TIMER_TEMPERATURES_init+0x24>)
    3692:	4805      	ldr	r0, [pc, #20]	; (36a8 <TIMER_TEMPERATURES_init+0x28>)
    3694:	4b05      	ldr	r3, [pc, #20]	; (36ac <TIMER_TEMPERATURES_init+0x2c>)
    3696:	4798      	blx	r3
}
    3698:	bf00      	nop
    369a:	bd80      	pop	{r7, pc}
    369c:	00003659 	.word	0x00003659
    36a0:	000099d1 	.word	0x000099d1
    36a4:	41018000 	.word	0x41018000
    36a8:	200096bc 	.word	0x200096bc
    36ac:	00004761 	.word	0x00004761

000036b0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    36b4:	2102      	movs	r1, #2
    36b6:	2018      	movs	r0, #24
    36b8:	4b0f      	ldr	r3, [pc, #60]	; (36f8 <CDCUSB_PORT_init+0x48>)
    36ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    36bc:	2100      	movs	r1, #0
    36be:	2018      	movs	r0, #24
    36c0:	4b0e      	ldr	r3, [pc, #56]	; (36fc <CDCUSB_PORT_init+0x4c>)
    36c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    36c4:	2100      	movs	r1, #0
    36c6:	2018      	movs	r0, #24
    36c8:	4b0d      	ldr	r3, [pc, #52]	; (3700 <CDCUSB_PORT_init+0x50>)
    36ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    36cc:	490d      	ldr	r1, [pc, #52]	; (3704 <CDCUSB_PORT_init+0x54>)
    36ce:	2018      	movs	r0, #24
    36d0:	4b0d      	ldr	r3, [pc, #52]	; (3708 <CDCUSB_PORT_init+0x58>)
    36d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    36d4:	2102      	movs	r1, #2
    36d6:	2019      	movs	r0, #25
    36d8:	4b07      	ldr	r3, [pc, #28]	; (36f8 <CDCUSB_PORT_init+0x48>)
    36da:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    36dc:	2100      	movs	r1, #0
    36de:	2019      	movs	r0, #25
    36e0:	4b06      	ldr	r3, [pc, #24]	; (36fc <CDCUSB_PORT_init+0x4c>)
    36e2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    36e4:	2100      	movs	r1, #0
    36e6:	2019      	movs	r0, #25
    36e8:	4b05      	ldr	r3, [pc, #20]	; (3700 <CDCUSB_PORT_init+0x50>)
    36ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    36ec:	4907      	ldr	r1, [pc, #28]	; (370c <CDCUSB_PORT_init+0x5c>)
    36ee:	2019      	movs	r0, #25
    36f0:	4b05      	ldr	r3, [pc, #20]	; (3708 <CDCUSB_PORT_init+0x58>)
    36f2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    36f4:	bf00      	nop
    36f6:	bd80      	pop	{r7, pc}
    36f8:	00002cf5 	.word	0x00002cf5
    36fc:	00002d2d 	.word	0x00002d2d
    3700:	00002ca1 	.word	0x00002ca1
    3704:	00180007 	.word	0x00180007
    3708:	00002cd5 	.word	0x00002cd5
    370c:	00190007 	.word	0x00190007

00003710 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3710:	b580      	push	{r7, lr}
    3712:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3714:	2242      	movs	r2, #66	; 0x42
    3716:	210a      	movs	r1, #10
    3718:	4805      	ldr	r0, [pc, #20]	; (3730 <CDCUSB_CLOCK_init+0x20>)
    371a:	4b06      	ldr	r3, [pc, #24]	; (3734 <CDCUSB_CLOCK_init+0x24>)
    371c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    371e:	4806      	ldr	r0, [pc, #24]	; (3738 <CDCUSB_CLOCK_init+0x28>)
    3720:	4b06      	ldr	r3, [pc, #24]	; (373c <CDCUSB_CLOCK_init+0x2c>)
    3722:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3724:	4804      	ldr	r0, [pc, #16]	; (3738 <CDCUSB_CLOCK_init+0x28>)
    3726:	4b06      	ldr	r3, [pc, #24]	; (3740 <CDCUSB_CLOCK_init+0x30>)
    3728:	4798      	blx	r3
}
    372a:	bf00      	nop
    372c:	bd80      	pop	{r7, pc}
    372e:	bf00      	nop
    3730:	40001c00 	.word	0x40001c00
    3734:	000024a1 	.word	0x000024a1
    3738:	40000800 	.word	0x40000800
    373c:	000024c7 	.word	0x000024c7
    3740:	000025e7 	.word	0x000025e7

00003744 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3744:	b580      	push	{r7, lr}
    3746:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3748:	4b03      	ldr	r3, [pc, #12]	; (3758 <CDCUSB_init+0x14>)
    374a:	4798      	blx	r3
	usb_d_init();
    374c:	4b03      	ldr	r3, [pc, #12]	; (375c <CDCUSB_init+0x18>)
    374e:	4798      	blx	r3
	CDCUSB_PORT_init();
    3750:	4b03      	ldr	r3, [pc, #12]	; (3760 <CDCUSB_init+0x1c>)
    3752:	4798      	blx	r3
}
    3754:	bf00      	nop
    3756:	bd80      	pop	{r7, pc}
    3758:	00003711 	.word	0x00003711
    375c:	00004fbd 	.word	0x00004fbd
    3760:	000036b1 	.word	0x000036b1

00003764 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3764:	b580      	push	{r7, lr}
    3766:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3768:	4802      	ldr	r0, [pc, #8]	; (3774 <WATCHDOG_CLOCK_init+0x10>)
    376a:	4b03      	ldr	r3, [pc, #12]	; (3778 <WATCHDOG_CLOCK_init+0x14>)
    376c:	4798      	blx	r3
}
    376e:	bf00      	nop
    3770:	bd80      	pop	{r7, pc}
    3772:	bf00      	nop
    3774:	40000800 	.word	0x40000800
    3778:	00002547 	.word	0x00002547

0000377c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    377c:	b580      	push	{r7, lr}
    377e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3780:	4b03      	ldr	r3, [pc, #12]	; (3790 <WATCHDOG_init+0x14>)
    3782:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3784:	4903      	ldr	r1, [pc, #12]	; (3794 <WATCHDOG_init+0x18>)
    3786:	4804      	ldr	r0, [pc, #16]	; (3798 <WATCHDOG_init+0x1c>)
    3788:	4b04      	ldr	r3, [pc, #16]	; (379c <WATCHDOG_init+0x20>)
    378a:	4798      	blx	r3
}
    378c:	bf00      	nop
    378e:	bd80      	pop	{r7, pc}
    3790:	00003765 	.word	0x00003765
    3794:	40002000 	.word	0x40002000
    3798:	20009894 	.word	0x20009894
    379c:	00002d75 	.word	0x00002d75

000037a0 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    37a0:	b580      	push	{r7, lr}
    37a2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    37a4:	4904      	ldr	r1, [pc, #16]	; (37b8 <CAN_CCU_PORT_init+0x18>)
    37a6:	202d      	movs	r0, #45	; 0x2d
    37a8:	4b04      	ldr	r3, [pc, #16]	; (37bc <CAN_CCU_PORT_init+0x1c>)
    37aa:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    37ac:	4904      	ldr	r1, [pc, #16]	; (37c0 <CAN_CCU_PORT_init+0x20>)
    37ae:	202c      	movs	r0, #44	; 0x2c
    37b0:	4b02      	ldr	r3, [pc, #8]	; (37bc <CAN_CCU_PORT_init+0x1c>)
    37b2:	4798      	blx	r3
}
    37b4:	bf00      	nop
    37b6:	bd80      	pop	{r7, pc}
    37b8:	002d0007 	.word	0x002d0007
    37bc:	00002cd5 	.word	0x00002cd5
    37c0:	002c0007 	.word	0x002c0007

000037c4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    37c8:	4807      	ldr	r0, [pc, #28]	; (37e8 <CAN_CCU_init+0x24>)
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <CAN_CCU_init+0x28>)
    37cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    37ce:	2243      	movs	r2, #67	; 0x43
    37d0:	211c      	movs	r1, #28
    37d2:	4807      	ldr	r0, [pc, #28]	; (37f0 <CAN_CCU_init+0x2c>)
    37d4:	4b07      	ldr	r3, [pc, #28]	; (37f4 <CAN_CCU_init+0x30>)
    37d6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    37d8:	4907      	ldr	r1, [pc, #28]	; (37f8 <CAN_CCU_init+0x34>)
    37da:	4808      	ldr	r0, [pc, #32]	; (37fc <CAN_CCU_init+0x38>)
    37dc:	4b08      	ldr	r3, [pc, #32]	; (3800 <CAN_CCU_init+0x3c>)
    37de:	4798      	blx	r3
	CAN_CCU_PORT_init();
    37e0:	4b08      	ldr	r3, [pc, #32]	; (3804 <CAN_CCU_init+0x40>)
    37e2:	4798      	blx	r3
}
    37e4:	bf00      	nop
    37e6:	bd80      	pop	{r7, pc}
    37e8:	40000800 	.word	0x40000800
    37ec:	00002507 	.word	0x00002507
    37f0:	40001c00 	.word	0x40001c00
    37f4:	000024a1 	.word	0x000024a1
    37f8:	42000400 	.word	0x42000400
    37fc:	200097ec 	.word	0x200097ec
    3800:	00003ccd 	.word	0x00003ccd
    3804:	000037a1 	.word	0x000037a1

00003808 <system_init>:

void system_init(void)
{
    3808:	b580      	push	{r7, lr}
    380a:	af00      	add	r7, sp, #0
	init_mcu();
    380c:	4b5e      	ldr	r3, [pc, #376]	; (3988 <system_init+0x180>)
    380e:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    3810:	2100      	movs	r1, #0
    3812:	2007      	movs	r0, #7
    3814:	4b5d      	ldr	r3, [pc, #372]	; (398c <system_init+0x184>)
    3816:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    3818:	2102      	movs	r1, #2
    381a:	2007      	movs	r0, #7
    381c:	4b5c      	ldr	r3, [pc, #368]	; (3990 <system_init+0x188>)
    381e:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    3820:	f04f 31ff 	mov.w	r1, #4294967295
    3824:	2007      	movs	r0, #7
    3826:	4b5b      	ldr	r3, [pc, #364]	; (3994 <system_init+0x18c>)
    3828:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    382a:	2101      	movs	r1, #1
    382c:	200f      	movs	r0, #15
    382e:	4b57      	ldr	r3, [pc, #348]	; (398c <system_init+0x184>)
    3830:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    3832:	2102      	movs	r1, #2
    3834:	200f      	movs	r0, #15
    3836:	4b56      	ldr	r3, [pc, #344]	; (3990 <system_init+0x188>)
    3838:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    383a:	f04f 31ff 	mov.w	r1, #4294967295
    383e:	200f      	movs	r0, #15
    3840:	4b54      	ldr	r3, [pc, #336]	; (3994 <system_init+0x18c>)
    3842:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3844:	2101      	movs	r1, #1
    3846:	2013      	movs	r0, #19
    3848:	4b50      	ldr	r3, [pc, #320]	; (398c <system_init+0x184>)
    384a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    384c:	2102      	movs	r1, #2
    384e:	2013      	movs	r0, #19
    3850:	4b4f      	ldr	r3, [pc, #316]	; (3990 <system_init+0x188>)
    3852:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3854:	f04f 31ff 	mov.w	r1, #4294967295
    3858:	2013      	movs	r0, #19
    385a:	4b4e      	ldr	r3, [pc, #312]	; (3994 <system_init+0x18c>)
    385c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    385e:	2101      	movs	r1, #1
    3860:	201b      	movs	r0, #27
    3862:	4b4a      	ldr	r3, [pc, #296]	; (398c <system_init+0x184>)
    3864:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    3866:	2102      	movs	r1, #2
    3868:	201b      	movs	r0, #27
    386a:	4b49      	ldr	r3, [pc, #292]	; (3990 <system_init+0x188>)
    386c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    386e:	f04f 31ff 	mov.w	r1, #4294967295
    3872:	201b      	movs	r0, #27
    3874:	4b47      	ldr	r3, [pc, #284]	; (3994 <system_init+0x18c>)
    3876:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    3878:	2101      	movs	r1, #1
    387a:	2027      	movs	r0, #39	; 0x27
    387c:	4b43      	ldr	r3, [pc, #268]	; (398c <system_init+0x184>)
    387e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    3880:	2102      	movs	r1, #2
    3882:	2027      	movs	r0, #39	; 0x27
    3884:	4b42      	ldr	r3, [pc, #264]	; (3990 <system_init+0x188>)
    3886:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    3888:	f04f 31ff 	mov.w	r1, #4294967295
    388c:	2027      	movs	r0, #39	; 0x27
    388e:	4b41      	ldr	r3, [pc, #260]	; (3994 <system_init+0x18c>)
    3890:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    3892:	2101      	movs	r1, #1
    3894:	203d      	movs	r0, #61	; 0x3d
    3896:	4b3d      	ldr	r3, [pc, #244]	; (398c <system_init+0x184>)
    3898:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    389a:	2102      	movs	r1, #2
    389c:	203d      	movs	r0, #61	; 0x3d
    389e:	4b3c      	ldr	r3, [pc, #240]	; (3990 <system_init+0x188>)
    38a0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    38a2:	f04f 31ff 	mov.w	r1, #4294967295
    38a6:	203d      	movs	r0, #61	; 0x3d
    38a8:	4b3a      	ldr	r3, [pc, #232]	; (3994 <system_init+0x18c>)
    38aa:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    38ac:	2101      	movs	r1, #1
    38ae:	203f      	movs	r0, #63	; 0x3f
    38b0:	4b37      	ldr	r3, [pc, #220]	; (3990 <system_init+0x188>)
    38b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    38b4:	2101      	movs	r1, #1
    38b6:	203f      	movs	r0, #63	; 0x3f
    38b8:	4b37      	ldr	r3, [pc, #220]	; (3998 <system_init+0x190>)
    38ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    38bc:	f04f 31ff 	mov.w	r1, #4294967295
    38c0:	203f      	movs	r0, #63	; 0x3f
    38c2:	4b34      	ldr	r3, [pc, #208]	; (3994 <system_init+0x18c>)
    38c4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    38c6:	2100      	movs	r1, #0
    38c8:	204d      	movs	r0, #77	; 0x4d
    38ca:	4b30      	ldr	r3, [pc, #192]	; (398c <system_init+0x184>)
    38cc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    38ce:	2102      	movs	r1, #2
    38d0:	204d      	movs	r0, #77	; 0x4d
    38d2:	4b2f      	ldr	r3, [pc, #188]	; (3990 <system_init+0x188>)
    38d4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    38d6:	f04f 31ff 	mov.w	r1, #4294967295
    38da:	204d      	movs	r0, #77	; 0x4d
    38dc:	4b2d      	ldr	r3, [pc, #180]	; (3994 <system_init+0x18c>)
    38de:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    38e0:	2101      	movs	r1, #1
    38e2:	204e      	movs	r0, #78	; 0x4e
    38e4:	4b29      	ldr	r3, [pc, #164]	; (398c <system_init+0x184>)
    38e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    38e8:	2102      	movs	r1, #2
    38ea:	204e      	movs	r0, #78	; 0x4e
    38ec:	4b28      	ldr	r3, [pc, #160]	; (3990 <system_init+0x188>)
    38ee:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    38f0:	f04f 31ff 	mov.w	r1, #4294967295
    38f4:	204e      	movs	r0, #78	; 0x4e
    38f6:	4b27      	ldr	r3, [pc, #156]	; (3994 <system_init+0x18c>)
    38f8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    38fa:	2100      	movs	r1, #0
    38fc:	204f      	movs	r0, #79	; 0x4f
    38fe:	4b23      	ldr	r3, [pc, #140]	; (398c <system_init+0x184>)
    3900:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3902:	2102      	movs	r1, #2
    3904:	204f      	movs	r0, #79	; 0x4f
    3906:	4b22      	ldr	r3, [pc, #136]	; (3990 <system_init+0x188>)
    3908:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    390a:	f04f 31ff 	mov.w	r1, #4294967295
    390e:	204f      	movs	r0, #79	; 0x4f
    3910:	4b20      	ldr	r3, [pc, #128]	; (3994 <system_init+0x18c>)
    3912:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3914:	2100      	movs	r1, #0
    3916:	2052      	movs	r0, #82	; 0x52
    3918:	4b1c      	ldr	r3, [pc, #112]	; (398c <system_init+0x184>)
    391a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    391c:	2102      	movs	r1, #2
    391e:	2052      	movs	r0, #82	; 0x52
    3920:	4b1b      	ldr	r3, [pc, #108]	; (3990 <system_init+0x188>)
    3922:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3924:	f04f 31ff 	mov.w	r1, #4294967295
    3928:	2052      	movs	r0, #82	; 0x52
    392a:	4b1a      	ldr	r3, [pc, #104]	; (3994 <system_init+0x18c>)
    392c:	4798      	blx	r3

	CRC_CALC_init();
    392e:	4b1b      	ldr	r3, [pc, #108]	; (399c <system_init+0x194>)
    3930:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3932:	4b1b      	ldr	r3, [pc, #108]	; (39a0 <system_init+0x198>)
    3934:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3936:	4b1b      	ldr	r3, [pc, #108]	; (39a4 <system_init+0x19c>)
    3938:	4798      	blx	r3

	QSPI_N25Q256_init();
    393a:	4b1b      	ldr	r3, [pc, #108]	; (39a8 <system_init+0x1a0>)
    393c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    393e:	4b1b      	ldr	r3, [pc, #108]	; (39ac <system_init+0x1a4>)
    3940:	4798      	blx	r3

	I2C_HEATERS_init();
    3942:	4b1b      	ldr	r3, [pc, #108]	; (39b0 <system_init+0x1a8>)
    3944:	4798      	blx	r3

	SPI_TEMP_init();
    3946:	4b1b      	ldr	r3, [pc, #108]	; (39b4 <system_init+0x1ac>)
    3948:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    394a:	4b1b      	ldr	r3, [pc, #108]	; (39b8 <system_init+0x1b0>)
    394c:	4798      	blx	r3

	SPI_HI3593_init();
    394e:	4b1b      	ldr	r3, [pc, #108]	; (39bc <system_init+0x1b4>)
    3950:	4798      	blx	r3

	I2C_FANS_init();
    3952:	4b1b      	ldr	r3, [pc, #108]	; (39c0 <system_init+0x1b8>)
    3954:	4798      	blx	r3

	TIMER_USB_init();
    3956:	4b1b      	ldr	r3, [pc, #108]	; (39c4 <system_init+0x1bc>)
    3958:	4798      	blx	r3
	TIMER_ARINC_init();
    395a:	4b1b      	ldr	r3, [pc, #108]	; (39c8 <system_init+0x1c0>)
    395c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    395e:	4b1b      	ldr	r3, [pc, #108]	; (39cc <system_init+0x1c4>)
    3960:	4798      	blx	r3
	TIMER_INTERFACE_init();
    3962:	4b1b      	ldr	r3, [pc, #108]	; (39d0 <system_init+0x1c8>)
    3964:	4798      	blx	r3
	TIMER_EVENT_init();
    3966:	4b1b      	ldr	r3, [pc, #108]	; (39d4 <system_init+0x1cc>)
    3968:	4798      	blx	r3
	LIVE_PULSE_init();
    396a:	4b1b      	ldr	r3, [pc, #108]	; (39d8 <system_init+0x1d0>)
    396c:	4798      	blx	r3

	TIMER_HVAC_init();
    396e:	4b1b      	ldr	r3, [pc, #108]	; (39dc <system_init+0x1d4>)
    3970:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    3972:	4b1b      	ldr	r3, [pc, #108]	; (39e0 <system_init+0x1d8>)
    3974:	4798      	blx	r3

	CDCUSB_init();
    3976:	4b1b      	ldr	r3, [pc, #108]	; (39e4 <system_init+0x1dc>)
    3978:	4798      	blx	r3

	WATCHDOG_init();
    397a:	4b1b      	ldr	r3, [pc, #108]	; (39e8 <system_init+0x1e0>)
    397c:	4798      	blx	r3
	CAN_CCU_init();
    397e:	4b1b      	ldr	r3, [pc, #108]	; (39ec <system_init+0x1e4>)
    3980:	4798      	blx	r3
}
    3982:	bf00      	nop
    3984:	bd80      	pop	{r7, pc}
    3986:	bf00      	nop
    3988:	00002d65 	.word	0x00002d65
    398c:	00002d2d 	.word	0x00002d2d
    3990:	00002cf5 	.word	0x00002cf5
    3994:	00002cd5 	.word	0x00002cd5
    3998:	00002ca1 	.word	0x00002ca1
    399c:	00002dc5 	.word	0x00002dc5
    39a0:	00002df1 	.word	0x00002df1
    39a4:	00002f19 	.word	0x00002f19
    39a8:	00003061 	.word	0x00003061
    39ac:	000030a5 	.word	0x000030a5
    39b0:	00003135 	.word	0x00003135
    39b4:	00003201 	.word	0x00003201
    39b8:	00003299 	.word	0x00003299
    39bc:	00003365 	.word	0x00003365
    39c0:	000033fd 	.word	0x000033fd
    39c4:	00003429 	.word	0x00003429
    39c8:	00003471 	.word	0x00003471
    39cc:	000034b9 	.word	0x000034b9
    39d0:	00003501 	.word	0x00003501
    39d4:	00003549 	.word	0x00003549
    39d8:	000035c9 	.word	0x000035c9
    39dc:	00003629 	.word	0x00003629
    39e0:	00003681 	.word	0x00003681
    39e4:	00003745 	.word	0x00003745
    39e8:	0000377d 	.word	0x0000377d
    39ec:	000037c5 	.word	0x000037c5

000039f0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    39f0:	b480      	push	{r7}
    39f2:	b083      	sub	sp, #12
    39f4:	af00      	add	r7, sp, #0
    39f6:	4603      	mov	r3, r0
    39f8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    39fa:	88fb      	ldrh	r3, [r7, #6]
    39fc:	f003 0303 	and.w	r3, r3, #3
    3a00:	2b00      	cmp	r3, #0
    3a02:	d001      	beq.n	3a08 <leap_year+0x18>
		return false;
    3a04:	2300      	movs	r3, #0
    3a06:	e000      	b.n	3a0a <leap_year+0x1a>
	} else {
		return true;
    3a08:	2301      	movs	r3, #1
	}
}
    3a0a:	4618      	mov	r0, r3
    3a0c:	370c      	adds	r7, #12
    3a0e:	46bd      	mov	sp, r7
    3a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a14:	4770      	bx	lr
	...

00003a18 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3a18:	b580      	push	{r7, lr}
    3a1a:	b084      	sub	sp, #16
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	6078      	str	r0, [r7, #4]
    3a20:	460b      	mov	r3, r1
    3a22:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3a24:	2300      	movs	r3, #0
    3a26:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	b29b      	uxth	r3, r3
    3a2c:	4618      	mov	r0, r3
    3a2e:	4b2f      	ldr	r3, [pc, #188]	; (3aec <get_secs_in_month+0xd4>)
    3a30:	4798      	blx	r3
    3a32:	4603      	mov	r3, r0
    3a34:	2b00      	cmp	r3, #0
    3a36:	d028      	beq.n	3a8a <get_secs_in_month+0x72>
		switch (month) {
    3a38:	78fb      	ldrb	r3, [r7, #3]
    3a3a:	3b01      	subs	r3, #1
    3a3c:	2b0b      	cmp	r3, #11
    3a3e:	d84c      	bhi.n	3ada <get_secs_in_month+0xc2>
    3a40:	a201      	add	r2, pc, #4	; (adr r2, 3a48 <get_secs_in_month+0x30>)
    3a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3a46:	bf00      	nop
    3a48:	00003a79 	.word	0x00003a79
    3a4c:	00003a7f 	.word	0x00003a7f
    3a50:	00003a79 	.word	0x00003a79
    3a54:	00003a85 	.word	0x00003a85
    3a58:	00003a79 	.word	0x00003a79
    3a5c:	00003a85 	.word	0x00003a85
    3a60:	00003a79 	.word	0x00003a79
    3a64:	00003a79 	.word	0x00003a79
    3a68:	00003a85 	.word	0x00003a85
    3a6c:	00003a79 	.word	0x00003a79
    3a70:	00003a85 	.word	0x00003a85
    3a74:	00003a79 	.word	0x00003a79
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3a78:	4b1d      	ldr	r3, [pc, #116]	; (3af0 <get_secs_in_month+0xd8>)
    3a7a:	60fb      	str	r3, [r7, #12]
			break;
    3a7c:	e030      	b.n	3ae0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    3a7e:	4b1d      	ldr	r3, [pc, #116]	; (3af4 <get_secs_in_month+0xdc>)
    3a80:	60fb      	str	r3, [r7, #12]
			break;
    3a82:	e02d      	b.n	3ae0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3a84:	4b1c      	ldr	r3, [pc, #112]	; (3af8 <get_secs_in_month+0xe0>)
    3a86:	60fb      	str	r3, [r7, #12]
			break;
    3a88:	e02a      	b.n	3ae0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3a8a:	78fb      	ldrb	r3, [r7, #3]
    3a8c:	3b01      	subs	r3, #1
    3a8e:	2b0b      	cmp	r3, #11
    3a90:	d825      	bhi.n	3ade <get_secs_in_month+0xc6>
    3a92:	a201      	add	r2, pc, #4	; (adr r2, 3a98 <get_secs_in_month+0x80>)
    3a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3a98:	00003ac9 	.word	0x00003ac9
    3a9c:	00003acf 	.word	0x00003acf
    3aa0:	00003ac9 	.word	0x00003ac9
    3aa4:	00003ad5 	.word	0x00003ad5
    3aa8:	00003ac9 	.word	0x00003ac9
    3aac:	00003ad5 	.word	0x00003ad5
    3ab0:	00003ac9 	.word	0x00003ac9
    3ab4:	00003ac9 	.word	0x00003ac9
    3ab8:	00003ad5 	.word	0x00003ad5
    3abc:	00003ac9 	.word	0x00003ac9
    3ac0:	00003ad5 	.word	0x00003ad5
    3ac4:	00003ac9 	.word	0x00003ac9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3ac8:	4b09      	ldr	r3, [pc, #36]	; (3af0 <get_secs_in_month+0xd8>)
    3aca:	60fb      	str	r3, [r7, #12]
			break;
    3acc:	e008      	b.n	3ae0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    3ace:	4b0b      	ldr	r3, [pc, #44]	; (3afc <get_secs_in_month+0xe4>)
    3ad0:	60fb      	str	r3, [r7, #12]
			break;
    3ad2:	e005      	b.n	3ae0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3ad4:	4b08      	ldr	r3, [pc, #32]	; (3af8 <get_secs_in_month+0xe0>)
    3ad6:	60fb      	str	r3, [r7, #12]
			break;
    3ad8:	e002      	b.n	3ae0 <get_secs_in_month+0xc8>
			break;
    3ada:	bf00      	nop
    3adc:	e000      	b.n	3ae0 <get_secs_in_month+0xc8>
		default:
			break;
    3ade:	bf00      	nop
		}
	}

	return sec_in_month;
    3ae0:	68fb      	ldr	r3, [r7, #12]
}
    3ae2:	4618      	mov	r0, r3
    3ae4:	3710      	adds	r7, #16
    3ae6:	46bd      	mov	sp, r7
    3ae8:	bd80      	pop	{r7, pc}
    3aea:	bf00      	nop
    3aec:	000039f1 	.word	0x000039f1
    3af0:	0028de80 	.word	0x0028de80
    3af4:	00263b80 	.word	0x00263b80
    3af8:	00278d00 	.word	0x00278d00
    3afc:	0024ea00 	.word	0x0024ea00

00003b00 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b08a      	sub	sp, #40	; 0x28
    3b04:	af00      	add	r7, sp, #0
    3b06:	60f8      	str	r0, [r7, #12]
    3b08:	60b9      	str	r1, [r7, #8]
    3b0a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    3b0c:	68fb      	ldr	r3, [r7, #12]
    3b0e:	699b      	ldr	r3, [r3, #24]
    3b10:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    3b12:	2301      	movs	r3, #1
    3b14:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    3b16:	2301      	movs	r3, #1
    3b18:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    3b1a:	2300      	movs	r3, #0
    3b1c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    3b1e:	2300      	movs	r3, #0
    3b20:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    3b22:	68bb      	ldr	r3, [r7, #8]
    3b24:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    3b26:	6a3b      	ldr	r3, [r7, #32]
    3b28:	b29b      	uxth	r3, r3
    3b2a:	4618      	mov	r0, r3
    3b2c:	4b32      	ldr	r3, [pc, #200]	; (3bf8 <convert_timestamp_to_datetime+0xf8>)
    3b2e:	4798      	blx	r3
    3b30:	4603      	mov	r3, r0
    3b32:	2b00      	cmp	r3, #0
    3b34:	d001      	beq.n	3b3a <convert_timestamp_to_datetime+0x3a>
    3b36:	4b31      	ldr	r3, [pc, #196]	; (3bfc <convert_timestamp_to_datetime+0xfc>)
    3b38:	e000      	b.n	3b3c <convert_timestamp_to_datetime+0x3c>
    3b3a:	4b31      	ldr	r3, [pc, #196]	; (3c00 <convert_timestamp_to_datetime+0x100>)
    3b3c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    3b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b40:	69bb      	ldr	r3, [r7, #24]
    3b42:	429a      	cmp	r2, r3
    3b44:	d307      	bcc.n	3b56 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    3b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b48:	69bb      	ldr	r3, [r7, #24]
    3b4a:	1ad3      	subs	r3, r2, r3
    3b4c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    3b4e:	6a3b      	ldr	r3, [r7, #32]
    3b50:	3301      	adds	r3, #1
    3b52:	623b      	str	r3, [r7, #32]
    3b54:	e7e7      	b.n	3b26 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    3b56:	7ffb      	ldrb	r3, [r7, #31]
    3b58:	4619      	mov	r1, r3
    3b5a:	6a38      	ldr	r0, [r7, #32]
    3b5c:	4b29      	ldr	r3, [pc, #164]	; (3c04 <convert_timestamp_to_datetime+0x104>)
    3b5e:	4798      	blx	r3
    3b60:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    3b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b64:	697b      	ldr	r3, [r7, #20]
    3b66:	429a      	cmp	r2, r3
    3b68:	d307      	bcc.n	3b7a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    3b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b6c:	697b      	ldr	r3, [r7, #20]
    3b6e:	1ad3      	subs	r3, r2, r3
    3b70:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    3b72:	7ffb      	ldrb	r3, [r7, #31]
    3b74:	3301      	adds	r3, #1
    3b76:	77fb      	strb	r3, [r7, #31]
    3b78:	e7ed      	b.n	3b56 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    3b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b7c:	4a22      	ldr	r2, [pc, #136]	; (3c08 <convert_timestamp_to_datetime+0x108>)
    3b7e:	4293      	cmp	r3, r2
    3b80:	d909      	bls.n	3b96 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    3b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b84:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3b88:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    3b8c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    3b8e:	7fbb      	ldrb	r3, [r7, #30]
    3b90:	3301      	adds	r3, #1
    3b92:	77bb      	strb	r3, [r7, #30]
    3b94:	e7f1      	b.n	3b7a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    3b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b98:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    3b9c:	d307      	bcc.n	3bae <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    3b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ba0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    3ba4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    3ba6:	7f7b      	ldrb	r3, [r7, #29]
    3ba8:	3301      	adds	r3, #1
    3baa:	777b      	strb	r3, [r7, #29]
    3bac:	e7f3      	b.n	3b96 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    3bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bb0:	2b3b      	cmp	r3, #59	; 0x3b
    3bb2:	d906      	bls.n	3bc2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    3bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bb6:	3b3c      	subs	r3, #60	; 0x3c
    3bb8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    3bba:	7f3b      	ldrb	r3, [r7, #28]
    3bbc:	3301      	adds	r3, #1
    3bbe:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    3bc0:	e7f5      	b.n	3bae <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    3bc2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    3bc4:	6a3b      	ldr	r3, [r7, #32]
    3bc6:	b29a      	uxth	r2, r3
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	7ffa      	ldrb	r2, [r7, #31]
    3bd0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	7fba      	ldrb	r2, [r7, #30]
    3bd6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	7f7a      	ldrb	r2, [r7, #29]
    3bdc:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	7f3a      	ldrb	r2, [r7, #28]
    3be2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    3be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3be6:	b2da      	uxtb	r2, r3
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    3bec:	2300      	movs	r3, #0
}
    3bee:	4618      	mov	r0, r3
    3bf0:	3728      	adds	r7, #40	; 0x28
    3bf2:	46bd      	mov	sp, r7
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	bf00      	nop
    3bf8:	000039f1 	.word	0x000039f1
    3bfc:	01e28500 	.word	0x01e28500
    3c00:	01e13380 	.word	0x01e13380
    3c04:	00003a19 	.word	0x00003a19
    3c08:	0001517f 	.word	0x0001517f

00003c0c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b084      	sub	sp, #16
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
    3c14:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3c16:	2300      	movs	r3, #0
    3c18:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	bf14      	ite	ne
    3c20:	2301      	movne	r3, #1
    3c22:	2300      	moveq	r3, #0
    3c24:	b2db      	uxtb	r3, r3
    3c26:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3c2a:	4911      	ldr	r1, [pc, #68]	; (3c70 <calendar_init+0x64>)
    3c2c:	4618      	mov	r0, r3
    3c2e:	4b11      	ldr	r3, [pc, #68]	; (3c74 <calendar_init+0x68>)
    3c30:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	681a      	ldr	r2, [r3, #0]
    3c36:	683b      	ldr	r3, [r7, #0]
    3c38:	429a      	cmp	r2, r3
    3c3a:	d101      	bne.n	3c40 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3c3c:	2300      	movs	r3, #0
    3c3e:	e013      	b.n	3c68 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	2b00      	cmp	r3, #0
    3c46:	d002      	beq.n	3c4e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3c48:	f06f 0311 	mvn.w	r3, #17
    3c4c:	e00c      	b.n	3c68 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	683a      	ldr	r2, [r7, #0]
    3c52:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	4618      	mov	r0, r3
    3c58:	4b07      	ldr	r3, [pc, #28]	; (3c78 <calendar_init+0x6c>)
    3c5a:	4798      	blx	r3
    3c5c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3c64:	619a      	str	r2, [r3, #24]

	return ret;
    3c66:	68fb      	ldr	r3, [r7, #12]
}
    3c68:	4618      	mov	r0, r3
    3c6a:	3710      	adds	r7, #16
    3c6c:	46bd      	mov	sp, r7
    3c6e:	bd80      	pop	{r7, pc}
    3c70:	000197cc 	.word	0x000197cc
    3c74:	00005565 	.word	0x00005565
    3c78:	00007e95 	.word	0x00007e95

00003c7c <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
    3c84:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	bf14      	ite	ne
    3c8c:	2301      	movne	r3, #1
    3c8e:	2300      	moveq	r3, #0
    3c90:	b2db      	uxtb	r3, r3
    3c92:	f240 223b 	movw	r2, #571	; 0x23b
    3c96:	4909      	ldr	r1, [pc, #36]	; (3cbc <calendar_get_date_time+0x40>)
    3c98:	4618      	mov	r0, r3
    3c9a:	4b09      	ldr	r3, [pc, #36]	; (3cc0 <calendar_get_date_time+0x44>)
    3c9c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	4618      	mov	r0, r3
    3ca2:	4b08      	ldr	r3, [pc, #32]	; (3cc4 <calendar_get_date_time+0x48>)
    3ca4:	4798      	blx	r3
    3ca6:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    3ca8:	683a      	ldr	r2, [r7, #0]
    3caa:	68f9      	ldr	r1, [r7, #12]
    3cac:	6878      	ldr	r0, [r7, #4]
    3cae:	4b06      	ldr	r3, [pc, #24]	; (3cc8 <calendar_get_date_time+0x4c>)
    3cb0:	4798      	blx	r3

	return ERR_NONE;
    3cb2:	2300      	movs	r3, #0
}
    3cb4:	4618      	mov	r0, r3
    3cb6:	3710      	adds	r7, #16
    3cb8:	46bd      	mov	sp, r7
    3cba:	bd80      	pop	{r7, pc}
    3cbc:	000197cc 	.word	0x000197cc
    3cc0:	00005565 	.word	0x00005565
    3cc4:	00007f4d 	.word	0x00007f4d
    3cc8:	00003b01 	.word	0x00003b01

00003ccc <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3ccc:	b580      	push	{r7, lr}
    3cce:	b084      	sub	sp, #16
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	6078      	str	r0, [r7, #4]
    3cd4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d004      	beq.n	3ce6 <can_async_init+0x1a>
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d001      	beq.n	3ce6 <can_async_init+0x1a>
    3ce2:	2301      	movs	r3, #1
    3ce4:	e000      	b.n	3ce8 <can_async_init+0x1c>
    3ce6:	2300      	movs	r3, #0
    3ce8:	f003 0301 	and.w	r3, r3, #1
    3cec:	b2db      	uxtb	r3, r3
    3cee:	2241      	movs	r2, #65	; 0x41
    3cf0:	490e      	ldr	r1, [pc, #56]	; (3d2c <can_async_init+0x60>)
    3cf2:	4618      	mov	r0, r3
    3cf4:	4b0e      	ldr	r3, [pc, #56]	; (3d30 <can_async_init+0x64>)
    3cf6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	6839      	ldr	r1, [r7, #0]
    3cfc:	4618      	mov	r0, r3
    3cfe:	4b0d      	ldr	r3, [pc, #52]	; (3d34 <can_async_init+0x68>)
    3d00:	4798      	blx	r3
    3d02:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3d04:	68fb      	ldr	r3, [r7, #12]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d001      	beq.n	3d0e <can_async_init+0x42>
		return rc;
    3d0a:	68fb      	ldr	r3, [r7, #12]
    3d0c:	e009      	b.n	3d22 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	4a09      	ldr	r2, [pc, #36]	; (3d38 <can_async_init+0x6c>)
    3d12:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	4a09      	ldr	r2, [pc, #36]	; (3d3c <can_async_init+0x70>)
    3d18:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	4a08      	ldr	r2, [pc, #32]	; (3d40 <can_async_init+0x74>)
    3d1e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3d20:	2300      	movs	r3, #0
}
    3d22:	4618      	mov	r0, r3
    3d24:	3710      	adds	r7, #16
    3d26:	46bd      	mov	sp, r7
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	bf00      	nop
    3d2c:	000197e8 	.word	0x000197e8
    3d30:	00005565 	.word	0x00005565
    3d34:	00005ac1 	.word	0x00005ac1
    3d38:	00003d45 	.word	0x00003d45
    3d3c:	00003d69 	.word	0x00003d69
    3d40:	00003d8d 	.word	0x00003d8d

00003d44 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b084      	sub	sp, #16
    3d48:	af00      	add	r7, sp, #0
    3d4a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3d50:	68fb      	ldr	r3, [r7, #12]
    3d52:	69db      	ldr	r3, [r3, #28]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d003      	beq.n	3d60 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3d58:	68fb      	ldr	r3, [r7, #12]
    3d5a:	69db      	ldr	r3, [r3, #28]
    3d5c:	68f8      	ldr	r0, [r7, #12]
    3d5e:	4798      	blx	r3
	}
}
    3d60:	bf00      	nop
    3d62:	3710      	adds	r7, #16
    3d64:	46bd      	mov	sp, r7
    3d66:	bd80      	pop	{r7, pc}

00003d68 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b084      	sub	sp, #16
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3d74:	68fb      	ldr	r3, [r7, #12]
    3d76:	6a1b      	ldr	r3, [r3, #32]
    3d78:	2b00      	cmp	r3, #0
    3d7a:	d003      	beq.n	3d84 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3d7c:	68fb      	ldr	r3, [r7, #12]
    3d7e:	6a1b      	ldr	r3, [r3, #32]
    3d80:	68f8      	ldr	r0, [r7, #12]
    3d82:	4798      	blx	r3
	}
}
    3d84:	bf00      	nop
    3d86:	3710      	adds	r7, #16
    3d88:	46bd      	mov	sp, r7
    3d8a:	bd80      	pop	{r7, pc}

00003d8c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3d8c:	b580      	push	{r7, lr}
    3d8e:	b084      	sub	sp, #16
    3d90:	af00      	add	r7, sp, #0
    3d92:	6078      	str	r0, [r7, #4]
    3d94:	460b      	mov	r3, r1
    3d96:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3d9c:	68fb      	ldr	r3, [r7, #12]
    3d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3da0:	2b00      	cmp	r3, #0
    3da2:	d005      	beq.n	3db0 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3da4:	68fb      	ldr	r3, [r7, #12]
    3da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3da8:	78fa      	ldrb	r2, [r7, #3]
    3daa:	4611      	mov	r1, r2
    3dac:	68f8      	ldr	r0, [r7, #12]
    3dae:	4798      	blx	r3
	}
}
    3db0:	bf00      	nop
    3db2:	3710      	adds	r7, #16
    3db4:	46bd      	mov	sp, r7
    3db6:	bd80      	pop	{r7, pc}

00003db8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b082      	sub	sp, #8
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    3dc0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d004      	beq.n	3dd2 <crc_sync_init+0x1a>
    3dc8:	683b      	ldr	r3, [r7, #0]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d001      	beq.n	3dd2 <crc_sync_init+0x1a>
    3dce:	2301      	movs	r3, #1
    3dd0:	e000      	b.n	3dd4 <crc_sync_init+0x1c>
    3dd2:	2300      	movs	r3, #0
    3dd4:	f003 0301 	and.w	r3, r3, #1
    3dd8:	b2db      	uxtb	r3, r3
    3dda:	222b      	movs	r2, #43	; 0x2b
    3ddc:	4906      	ldr	r1, [pc, #24]	; (3df8 <crc_sync_init+0x40>)
    3dde:	4618      	mov	r0, r3
    3de0:	4b06      	ldr	r3, [pc, #24]	; (3dfc <crc_sync_init+0x44>)
    3de2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	6839      	ldr	r1, [r7, #0]
    3de8:	4618      	mov	r0, r3
    3dea:	4b05      	ldr	r3, [pc, #20]	; (3e00 <crc_sync_init+0x48>)
    3dec:	4798      	blx	r3
    3dee:	4603      	mov	r3, r0
}
    3df0:	4618      	mov	r0, r3
    3df2:	3708      	adds	r7, #8
    3df4:	46bd      	mov	sp, r7
    3df6:	bd80      	pop	{r7, pc}
    3df8:	00019804 	.word	0x00019804
    3dfc:	00005565 	.word	0x00005565
    3e00:	000062f1 	.word	0x000062f1

00003e04 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b082      	sub	sp, #8
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	bf14      	ite	ne
    3e12:	2301      	movne	r3, #1
    3e14:	2300      	moveq	r3, #0
    3e16:	b2db      	uxtb	r3, r3
    3e18:	223f      	movs	r2, #63	; 0x3f
    3e1a:	4906      	ldr	r1, [pc, #24]	; (3e34 <crc_sync_enable+0x30>)
    3e1c:	4618      	mov	r0, r3
    3e1e:	4b06      	ldr	r3, [pc, #24]	; (3e38 <crc_sync_enable+0x34>)
    3e20:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	4618      	mov	r0, r3
    3e26:	4b05      	ldr	r3, [pc, #20]	; (3e3c <crc_sync_enable+0x38>)
    3e28:	4798      	blx	r3
    3e2a:	4603      	mov	r3, r0
}
    3e2c:	4618      	mov	r0, r3
    3e2e:	3708      	adds	r7, #8
    3e30:	46bd      	mov	sp, r7
    3e32:	bd80      	pop	{r7, pc}
    3e34:	00019804 	.word	0x00019804
    3e38:	00005565 	.word	0x00005565
    3e3c:	0000630f 	.word	0x0000630f

00003e40 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    3e40:	b590      	push	{r4, r7, lr}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	60b9      	str	r1, [r7, #8]
    3e4a:	607a      	str	r2, [r7, #4]
    3e4c:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    3e4e:	68fb      	ldr	r3, [r7, #12]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d00a      	beq.n	3e6a <crc_sync_crc32+0x2a>
    3e54:	68bb      	ldr	r3, [r7, #8]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d007      	beq.n	3e6a <crc_sync_crc32+0x2a>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d004      	beq.n	3e6a <crc_sync_crc32+0x2a>
    3e60:	683b      	ldr	r3, [r7, #0]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d001      	beq.n	3e6a <crc_sync_crc32+0x2a>
    3e66:	2301      	movs	r3, #1
    3e68:	e000      	b.n	3e6c <crc_sync_crc32+0x2c>
    3e6a:	2300      	movs	r3, #0
    3e6c:	f003 0301 	and.w	r3, r3, #1
    3e70:	b2db      	uxtb	r3, r3
    3e72:	2253      	movs	r2, #83	; 0x53
    3e74:	4907      	ldr	r1, [pc, #28]	; (3e94 <crc_sync_crc32+0x54>)
    3e76:	4618      	mov	r0, r3
    3e78:	4b07      	ldr	r3, [pc, #28]	; (3e98 <crc_sync_crc32+0x58>)
    3e7a:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    3e7c:	68f8      	ldr	r0, [r7, #12]
    3e7e:	683b      	ldr	r3, [r7, #0]
    3e80:	687a      	ldr	r2, [r7, #4]
    3e82:	68b9      	ldr	r1, [r7, #8]
    3e84:	4c05      	ldr	r4, [pc, #20]	; (3e9c <crc_sync_crc32+0x5c>)
    3e86:	47a0      	blx	r4
    3e88:	4603      	mov	r3, r0
}
    3e8a:	4618      	mov	r0, r3
    3e8c:	3714      	adds	r7, #20
    3e8e:	46bd      	mov	sp, r7
    3e90:	bd90      	pop	{r4, r7, pc}
    3e92:	bf00      	nop
    3e94:	00019804 	.word	0x00019804
    3e98:	00005565 	.word	0x00005565
    3e9c:	00006325 	.word	0x00006325

00003ea0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3ea0:	b590      	push	{r4, r7, lr}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	4603      	mov	r3, r0
    3ea8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3eaa:	4b07      	ldr	r3, [pc, #28]	; (3ec8 <delay_us+0x28>)
    3eac:	681c      	ldr	r4, [r3, #0]
    3eae:	88fb      	ldrh	r3, [r7, #6]
    3eb0:	4618      	mov	r0, r3
    3eb2:	4b06      	ldr	r3, [pc, #24]	; (3ecc <delay_us+0x2c>)
    3eb4:	4798      	blx	r3
    3eb6:	4603      	mov	r3, r0
    3eb8:	4619      	mov	r1, r3
    3eba:	4620      	mov	r0, r4
    3ebc:	4b04      	ldr	r3, [pc, #16]	; (3ed0 <delay_us+0x30>)
    3ebe:	4798      	blx	r3
}
    3ec0:	bf00      	nop
    3ec2:	370c      	adds	r7, #12
    3ec4:	46bd      	mov	sp, r7
    3ec6:	bd90      	pop	{r4, r7, pc}
    3ec8:	20000ec8 	.word	0x20000ec8
    3ecc:	00005f19 	.word	0x00005f19
    3ed0:	000060b1 	.word	0x000060b1

00003ed4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3ed4:	b590      	push	{r4, r7, lr}
    3ed6:	b083      	sub	sp, #12
    3ed8:	af00      	add	r7, sp, #0
    3eda:	4603      	mov	r3, r0
    3edc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3ede:	4b07      	ldr	r3, [pc, #28]	; (3efc <delay_ms+0x28>)
    3ee0:	681c      	ldr	r4, [r3, #0]
    3ee2:	88fb      	ldrh	r3, [r7, #6]
    3ee4:	4618      	mov	r0, r3
    3ee6:	4b06      	ldr	r3, [pc, #24]	; (3f00 <delay_ms+0x2c>)
    3ee8:	4798      	blx	r3
    3eea:	4603      	mov	r3, r0
    3eec:	4619      	mov	r1, r3
    3eee:	4620      	mov	r0, r4
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <delay_ms+0x30>)
    3ef2:	4798      	blx	r3
}
    3ef4:	bf00      	nop
    3ef6:	370c      	adds	r7, #12
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd90      	pop	{r4, r7, pc}
    3efc:	20000ec8 	.word	0x20000ec8
    3f00:	00006085 	.word	0x00006085
    3f04:	000060b1 	.word	0x000060b1

00003f08 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	af00      	add	r7, sp, #0
	return _event_system_init();
    3f0c:	4b02      	ldr	r3, [pc, #8]	; (3f18 <event_system_init+0x10>)
    3f0e:	4798      	blx	r3
    3f10:	4603      	mov	r3, r0
}
    3f12:	4618      	mov	r0, r3
    3f14:	bd80      	pop	{r7, pc}
    3f16:	bf00      	nop
    3f18:	00006bdd 	.word	0x00006bdd

00003f1c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3f22:	2300      	movs	r3, #0
    3f24:	80fb      	strh	r3, [r7, #6]
    3f26:	e00e      	b.n	3f46 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3f28:	88fb      	ldrh	r3, [r7, #6]
    3f2a:	4a0c      	ldr	r2, [pc, #48]	; (3f5c <ext_irq_init+0x40>)
    3f2c:	00db      	lsls	r3, r3, #3
    3f2e:	4413      	add	r3, r2
    3f30:	f04f 32ff 	mov.w	r2, #4294967295
    3f34:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3f36:	88fb      	ldrh	r3, [r7, #6]
    3f38:	4a08      	ldr	r2, [pc, #32]	; (3f5c <ext_irq_init+0x40>)
    3f3a:	2100      	movs	r1, #0
    3f3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3f40:	88fb      	ldrh	r3, [r7, #6]
    3f42:	3301      	adds	r3, #1
    3f44:	80fb      	strh	r3, [r7, #6]
    3f46:	88fb      	ldrh	r3, [r7, #6]
    3f48:	2b08      	cmp	r3, #8
    3f4a:	d9ed      	bls.n	3f28 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    3f4c:	4804      	ldr	r0, [pc, #16]	; (3f60 <ext_irq_init+0x44>)
    3f4e:	4b05      	ldr	r3, [pc, #20]	; (3f64 <ext_irq_init+0x48>)
    3f50:	4798      	blx	r3
    3f52:	4603      	mov	r3, r0
}
    3f54:	4618      	mov	r0, r3
    3f56:	3708      	adds	r7, #8
    3f58:	46bd      	mov	sp, r7
    3f5a:	bd80      	pop	{r7, pc}
    3f5c:	20000ecc 	.word	0x20000ecc
    3f60:	000040c1 	.word	0x000040c1
    3f64:	00006761 	.word	0x00006761

00003f68 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b086      	sub	sp, #24
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
    3f70:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    3f72:	2300      	movs	r3, #0
    3f74:	75fb      	strb	r3, [r7, #23]
    3f76:	2300      	movs	r3, #0
    3f78:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    3f7a:	2300      	movs	r3, #0
    3f7c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    3f7e:	e012      	b.n	3fa6 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    3f80:	7dfb      	ldrb	r3, [r7, #23]
    3f82:	4a4d      	ldr	r2, [pc, #308]	; (40b8 <ext_irq_register+0x150>)
    3f84:	00db      	lsls	r3, r3, #3
    3f86:	4413      	add	r3, r2
    3f88:	685a      	ldr	r2, [r3, #4]
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	429a      	cmp	r2, r3
    3f8e:	d107      	bne.n	3fa0 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    3f90:	7dfb      	ldrb	r3, [r7, #23]
    3f92:	4949      	ldr	r1, [pc, #292]	; (40b8 <ext_irq_register+0x150>)
    3f94:	683a      	ldr	r2, [r7, #0]
    3f96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    3f9a:	2301      	movs	r3, #1
    3f9c:	757b      	strb	r3, [r7, #21]
			break;
    3f9e:	e005      	b.n	3fac <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    3fa0:	7dfb      	ldrb	r3, [r7, #23]
    3fa2:	3301      	adds	r3, #1
    3fa4:	75fb      	strb	r3, [r7, #23]
    3fa6:	7dfb      	ldrb	r3, [r7, #23]
    3fa8:	2b08      	cmp	r3, #8
    3faa:	d9e9      	bls.n	3f80 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    3fac:	683b      	ldr	r3, [r7, #0]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d10e      	bne.n	3fd0 <ext_irq_register+0x68>
		if (!found) {
    3fb2:	7d7b      	ldrb	r3, [r7, #21]
    3fb4:	f083 0301 	eor.w	r3, r3, #1
    3fb8:	b2db      	uxtb	r3, r3
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d002      	beq.n	3fc4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    3fbe:	f06f 030c 	mvn.w	r3, #12
    3fc2:	e074      	b.n	40ae <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    3fc4:	2100      	movs	r1, #0
    3fc6:	6878      	ldr	r0, [r7, #4]
    3fc8:	4b3c      	ldr	r3, [pc, #240]	; (40bc <ext_irq_register+0x154>)
    3fca:	4798      	blx	r3
    3fcc:	4603      	mov	r3, r0
    3fce:	e06e      	b.n	40ae <ext_irq_register+0x146>
	}

	if (!found) {
    3fd0:	7d7b      	ldrb	r3, [r7, #21]
    3fd2:	f083 0301 	eor.w	r3, r3, #1
    3fd6:	b2db      	uxtb	r3, r3
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d05a      	beq.n	4092 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3fdc:	2300      	movs	r3, #0
    3fde:	75fb      	strb	r3, [r7, #23]
    3fe0:	e016      	b.n	4010 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    3fe2:	7dfb      	ldrb	r3, [r7, #23]
    3fe4:	4a34      	ldr	r2, [pc, #208]	; (40b8 <ext_irq_register+0x150>)
    3fe6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d10d      	bne.n	400a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    3fee:	7dfb      	ldrb	r3, [r7, #23]
    3ff0:	4931      	ldr	r1, [pc, #196]	; (40b8 <ext_irq_register+0x150>)
    3ff2:	683a      	ldr	r2, [r7, #0]
    3ff4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    3ff8:	7dfb      	ldrb	r3, [r7, #23]
    3ffa:	4a2f      	ldr	r2, [pc, #188]	; (40b8 <ext_irq_register+0x150>)
    3ffc:	00db      	lsls	r3, r3, #3
    3ffe:	4413      	add	r3, r2
    4000:	687a      	ldr	r2, [r7, #4]
    4002:	605a      	str	r2, [r3, #4]
				found           = true;
    4004:	2301      	movs	r3, #1
    4006:	757b      	strb	r3, [r7, #21]
				break;
    4008:	e005      	b.n	4016 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    400a:	7dfb      	ldrb	r3, [r7, #23]
    400c:	3301      	adds	r3, #1
    400e:	75fb      	strb	r3, [r7, #23]
    4010:	7dfb      	ldrb	r3, [r7, #23]
    4012:	2b08      	cmp	r3, #8
    4014:	d9e5      	bls.n	3fe2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4016:	e036      	b.n	4086 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4018:	7dfb      	ldrb	r3, [r7, #23]
    401a:	4a27      	ldr	r2, [pc, #156]	; (40b8 <ext_irq_register+0x150>)
    401c:	00db      	lsls	r3, r3, #3
    401e:	4413      	add	r3, r2
    4020:	685a      	ldr	r2, [r3, #4]
    4022:	7dbb      	ldrb	r3, [r7, #22]
    4024:	4924      	ldr	r1, [pc, #144]	; (40b8 <ext_irq_register+0x150>)
    4026:	00db      	lsls	r3, r3, #3
    4028:	440b      	add	r3, r1
    402a:	685b      	ldr	r3, [r3, #4]
    402c:	429a      	cmp	r2, r3
    402e:	d227      	bcs.n	4080 <ext_irq_register+0x118>
    4030:	7dbb      	ldrb	r3, [r7, #22]
    4032:	4a21      	ldr	r2, [pc, #132]	; (40b8 <ext_irq_register+0x150>)
    4034:	00db      	lsls	r3, r3, #3
    4036:	4413      	add	r3, r2
    4038:	685b      	ldr	r3, [r3, #4]
    403a:	f1b3 3fff 	cmp.w	r3, #4294967295
    403e:	d01f      	beq.n	4080 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    4040:	7dbb      	ldrb	r3, [r7, #22]
    4042:	491d      	ldr	r1, [pc, #116]	; (40b8 <ext_irq_register+0x150>)
    4044:	f107 020c 	add.w	r2, r7, #12
    4048:	00db      	lsls	r3, r3, #3
    404a:	440b      	add	r3, r1
    404c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4050:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4054:	7dbb      	ldrb	r3, [r7, #22]
    4056:	7dfa      	ldrb	r2, [r7, #23]
    4058:	4817      	ldr	r0, [pc, #92]	; (40b8 <ext_irq_register+0x150>)
    405a:	4917      	ldr	r1, [pc, #92]	; (40b8 <ext_irq_register+0x150>)
    405c:	00db      	lsls	r3, r3, #3
    405e:	4403      	add	r3, r0
    4060:	00d2      	lsls	r2, r2, #3
    4062:	440a      	add	r2, r1
    4064:	e892 0003 	ldmia.w	r2, {r0, r1}
    4068:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    406c:	7dfb      	ldrb	r3, [r7, #23]
    406e:	4a12      	ldr	r2, [pc, #72]	; (40b8 <ext_irq_register+0x150>)
    4070:	00db      	lsls	r3, r3, #3
    4072:	4413      	add	r3, r2
    4074:	f107 020c 	add.w	r2, r7, #12
    4078:	e892 0003 	ldmia.w	r2, {r0, r1}
    407c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4080:	7dbb      	ldrb	r3, [r7, #22]
    4082:	3301      	adds	r3, #1
    4084:	75bb      	strb	r3, [r7, #22]
    4086:	7dbb      	ldrb	r3, [r7, #22]
    4088:	2b08      	cmp	r3, #8
    408a:	d802      	bhi.n	4092 <ext_irq_register+0x12a>
    408c:	7dfb      	ldrb	r3, [r7, #23]
    408e:	2b08      	cmp	r3, #8
    4090:	d9c2      	bls.n	4018 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    4092:	7d7b      	ldrb	r3, [r7, #21]
    4094:	f083 0301 	eor.w	r3, r3, #1
    4098:	b2db      	uxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d002      	beq.n	40a4 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    409e:	f06f 030c 	mvn.w	r3, #12
    40a2:	e004      	b.n	40ae <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    40a4:	2101      	movs	r1, #1
    40a6:	6878      	ldr	r0, [r7, #4]
    40a8:	4b04      	ldr	r3, [pc, #16]	; (40bc <ext_irq_register+0x154>)
    40aa:	4798      	blx	r3
    40ac:	4603      	mov	r3, r0
}
    40ae:	4618      	mov	r0, r3
    40b0:	3718      	adds	r7, #24
    40b2:	46bd      	mov	sp, r7
    40b4:	bd80      	pop	{r7, pc}
    40b6:	bf00      	nop
    40b8:	20000ecc 	.word	0x20000ecc
    40bc:	000068f5 	.word	0x000068f5

000040c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b084      	sub	sp, #16
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    40c8:	2300      	movs	r3, #0
    40ca:	73fb      	strb	r3, [r7, #15]
    40cc:	2309      	movs	r3, #9
    40ce:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    40d0:	e02a      	b.n	4128 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    40d2:	7bba      	ldrb	r2, [r7, #14]
    40d4:	7bfb      	ldrb	r3, [r7, #15]
    40d6:	4413      	add	r3, r2
    40d8:	105b      	asrs	r3, r3, #1
    40da:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    40dc:	7b7b      	ldrb	r3, [r7, #13]
    40de:	2b08      	cmp	r3, #8
    40e0:	d827      	bhi.n	4132 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    40e2:	7b7b      	ldrb	r3, [r7, #13]
    40e4:	4a16      	ldr	r2, [pc, #88]	; (4140 <process_ext_irq+0x80>)
    40e6:	00db      	lsls	r3, r3, #3
    40e8:	4413      	add	r3, r2
    40ea:	685a      	ldr	r2, [r3, #4]
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	429a      	cmp	r2, r3
    40f0:	d10b      	bne.n	410a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    40f2:	7b7b      	ldrb	r3, [r7, #13]
    40f4:	4a12      	ldr	r2, [pc, #72]	; (4140 <process_ext_irq+0x80>)
    40f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d01b      	beq.n	4136 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    40fe:	7b7b      	ldrb	r3, [r7, #13]
    4100:	4a0f      	ldr	r2, [pc, #60]	; (4140 <process_ext_irq+0x80>)
    4102:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4106:	4798      	blx	r3
			}
			return;
    4108:	e015      	b.n	4136 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    410a:	7b7b      	ldrb	r3, [r7, #13]
    410c:	4a0c      	ldr	r2, [pc, #48]	; (4140 <process_ext_irq+0x80>)
    410e:	00db      	lsls	r3, r3, #3
    4110:	4413      	add	r3, r2
    4112:	685a      	ldr	r2, [r3, #4]
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	429a      	cmp	r2, r3
    4118:	d203      	bcs.n	4122 <process_ext_irq+0x62>
			lower = middle + 1;
    411a:	7b7b      	ldrb	r3, [r7, #13]
    411c:	3301      	adds	r3, #1
    411e:	73fb      	strb	r3, [r7, #15]
    4120:	e002      	b.n	4128 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    4122:	7b7b      	ldrb	r3, [r7, #13]
    4124:	3b01      	subs	r3, #1
    4126:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    4128:	7bba      	ldrb	r2, [r7, #14]
    412a:	7bfb      	ldrb	r3, [r7, #15]
    412c:	429a      	cmp	r2, r3
    412e:	d2d0      	bcs.n	40d2 <process_ext_irq+0x12>
    4130:	e002      	b.n	4138 <process_ext_irq+0x78>
			return;
    4132:	bf00      	nop
    4134:	e000      	b.n	4138 <process_ext_irq+0x78>
			return;
    4136:	bf00      	nop
		}
	}
}
    4138:	3710      	adds	r7, #16
    413a:	46bd      	mov	sp, r7
    413c:	bd80      	pop	{r7, pc}
    413e:	bf00      	nop
    4140:	20000ecc 	.word	0x20000ecc

00004144 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    4144:	b580      	push	{r7, lr}
    4146:	b08a      	sub	sp, #40	; 0x28
    4148:	af00      	add	r7, sp, #0
    414a:	60f8      	str	r0, [r7, #12]
    414c:	60b9      	str	r1, [r7, #8]
    414e:	4613      	mov	r3, r2
    4150:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    4152:	68fb      	ldr	r3, [r7, #12]
    4154:	3b14      	subs	r3, #20
    4156:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    4158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    415a:	8b9b      	ldrh	r3, [r3, #28]
    415c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    415e:	88fb      	ldrh	r3, [r7, #6]
    4160:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4162:	f248 0301 	movw	r3, #32769	; 0x8001
    4166:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4168:	68bb      	ldr	r3, [r7, #8]
    416a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    416e:	f107 0214 	add.w	r2, r7, #20
    4172:	4611      	mov	r1, r2
    4174:	4618      	mov	r0, r3
    4176:	4b06      	ldr	r3, [pc, #24]	; (4190 <i2c_m_sync_read+0x4c>)
    4178:	4798      	blx	r3
    417a:	6238      	str	r0, [r7, #32]

	if (ret) {
    417c:	6a3b      	ldr	r3, [r7, #32]
    417e:	2b00      	cmp	r3, #0
    4180:	d001      	beq.n	4186 <i2c_m_sync_read+0x42>
		return ret;
    4182:	6a3b      	ldr	r3, [r7, #32]
    4184:	e000      	b.n	4188 <i2c_m_sync_read+0x44>
	}

	return n;
    4186:	88fb      	ldrh	r3, [r7, #6]
}
    4188:	4618      	mov	r0, r3
    418a:	3728      	adds	r7, #40	; 0x28
    418c:	46bd      	mov	sp, r7
    418e:	bd80      	pop	{r7, pc}
    4190:	00008b69 	.word	0x00008b69

00004194 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    4194:	b580      	push	{r7, lr}
    4196:	b08a      	sub	sp, #40	; 0x28
    4198:	af00      	add	r7, sp, #0
    419a:	60f8      	str	r0, [r7, #12]
    419c:	60b9      	str	r1, [r7, #8]
    419e:	4613      	mov	r3, r2
    41a0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	3b14      	subs	r3, #20
    41a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    41a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41aa:	8b9b      	ldrh	r3, [r3, #28]
    41ac:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    41ae:	88fb      	ldrh	r3, [r7, #6]
    41b0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    41b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    41b6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    41b8:	68bb      	ldr	r3, [r7, #8]
    41ba:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    41bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41be:	f107 0214 	add.w	r2, r7, #20
    41c2:	4611      	mov	r1, r2
    41c4:	4618      	mov	r0, r3
    41c6:	4b06      	ldr	r3, [pc, #24]	; (41e0 <i2c_m_sync_write+0x4c>)
    41c8:	4798      	blx	r3
    41ca:	6238      	str	r0, [r7, #32]

	if (ret) {
    41cc:	6a3b      	ldr	r3, [r7, #32]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d001      	beq.n	41d6 <i2c_m_sync_write+0x42>
		return ret;
    41d2:	6a3b      	ldr	r3, [r7, #32]
    41d4:	e000      	b.n	41d8 <i2c_m_sync_write+0x44>
	}

	return n;
    41d6:	88fb      	ldrh	r3, [r7, #6]
}
    41d8:	4618      	mov	r0, r3
    41da:	3728      	adds	r7, #40	; 0x28
    41dc:	46bd      	mov	sp, r7
    41de:	bd80      	pop	{r7, pc}
    41e0:	00008b69 	.word	0x00008b69

000041e4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    41e4:	b580      	push	{r7, lr}
    41e6:	b084      	sub	sp, #16
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
    41ec:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	2b00      	cmp	r3, #0
    41f2:	bf14      	ite	ne
    41f4:	2301      	movne	r3, #1
    41f6:	2300      	moveq	r3, #0
    41f8:	b2db      	uxtb	r3, r3
    41fa:	225e      	movs	r2, #94	; 0x5e
    41fc:	490c      	ldr	r1, [pc, #48]	; (4230 <i2c_m_sync_init+0x4c>)
    41fe:	4618      	mov	r0, r3
    4200:	4b0c      	ldr	r3, [pc, #48]	; (4234 <i2c_m_sync_init+0x50>)
    4202:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	6839      	ldr	r1, [r7, #0]
    4208:	4618      	mov	r0, r3
    420a:	4b0b      	ldr	r3, [pc, #44]	; (4238 <i2c_m_sync_init+0x54>)
    420c:	4798      	blx	r3
    420e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	2b00      	cmp	r3, #0
    4214:	d001      	beq.n	421a <i2c_m_sync_init+0x36>
		return init_status;
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	e006      	b.n	4228 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	4a07      	ldr	r2, [pc, #28]	; (423c <i2c_m_sync_init+0x58>)
    421e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	4a07      	ldr	r2, [pc, #28]	; (4240 <i2c_m_sync_init+0x5c>)
    4224:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    4226:	2300      	movs	r3, #0
}
    4228:	4618      	mov	r0, r3
    422a:	3710      	adds	r7, #16
    422c:	46bd      	mov	sp, r7
    422e:	bd80      	pop	{r7, pc}
    4230:	00019820 	.word	0x00019820
    4234:	00005565 	.word	0x00005565
    4238:	00008965 	.word	0x00008965
    423c:	00004145 	.word	0x00004145
    4240:	00004195 	.word	0x00004195

00004244 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    4244:	b580      	push	{r7, lr}
    4246:	b082      	sub	sp, #8
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	4618      	mov	r0, r3
    4250:	4b03      	ldr	r3, [pc, #12]	; (4260 <i2c_m_sync_enable+0x1c>)
    4252:	4798      	blx	r3
    4254:	4603      	mov	r3, r0
}
    4256:	4618      	mov	r0, r3
    4258:	3708      	adds	r7, #8
    425a:	46bd      	mov	sp, r7
    425c:	bd80      	pop	{r7, pc}
    425e:	bf00      	nop
    4260:	000089ad 	.word	0x000089ad

00004264 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    4264:	b480      	push	{r7}
    4266:	b085      	sub	sp, #20
    4268:	af00      	add	r7, sp, #0
    426a:	60f8      	str	r0, [r7, #12]
    426c:	460b      	mov	r3, r1
    426e:	607a      	str	r2, [r7, #4]
    4270:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    4272:	897b      	ldrh	r3, [r7, #10]
    4274:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4278:	b21a      	sxth	r2, r3
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	b21b      	sxth	r3, r3
    427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4282:	b21b      	sxth	r3, r3
    4284:	4313      	orrs	r3, r2
    4286:	b21b      	sxth	r3, r3
    4288:	b29a      	uxth	r2, r3
    428a:	68fb      	ldr	r3, [r7, #12]
    428c:	839a      	strh	r2, [r3, #28]
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	8b9b      	ldrh	r3, [r3, #28]
}
    4292:	4618      	mov	r0, r3
    4294:	3714      	adds	r7, #20
    4296:	46bd      	mov	sp, r7
    4298:	f85d 7b04 	ldr.w	r7, [sp], #4
    429c:	4770      	bx	lr

0000429e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    429e:	b480      	push	{r7}
    42a0:	b083      	sub	sp, #12
    42a2:	af00      	add	r7, sp, #0
    42a4:	6078      	str	r0, [r7, #4]
    42a6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	f103 0214 	add.w	r2, r3, #20
    42ae:	683b      	ldr	r3, [r7, #0]
    42b0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    42b2:	2300      	movs	r3, #0
}
    42b4:	4618      	mov	r0, r3
    42b6:	370c      	adds	r7, #12
    42b8:	46bd      	mov	sp, r7
    42ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    42be:	4770      	bx	lr

000042c0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b084      	sub	sp, #16
    42c4:	af00      	add	r7, sp, #0
    42c6:	60f8      	str	r0, [r7, #12]
    42c8:	60b9      	str	r1, [r7, #8]
    42ca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	2b00      	cmp	r3, #0
    42d0:	d004      	beq.n	42dc <pwm_init+0x1c>
    42d2:	68bb      	ldr	r3, [r7, #8]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d001      	beq.n	42dc <pwm_init+0x1c>
    42d8:	2301      	movs	r3, #1
    42da:	e000      	b.n	42de <pwm_init+0x1e>
    42dc:	2300      	movs	r3, #0
    42de:	f003 0301 	and.w	r3, r3, #1
    42e2:	b2db      	uxtb	r3, r3
    42e4:	2233      	movs	r2, #51	; 0x33
    42e6:	490a      	ldr	r1, [pc, #40]	; (4310 <pwm_init+0x50>)
    42e8:	4618      	mov	r0, r3
    42ea:	4b0a      	ldr	r3, [pc, #40]	; (4314 <pwm_init+0x54>)
    42ec:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    42ee:	68fb      	ldr	r3, [r7, #12]
    42f0:	68b9      	ldr	r1, [r7, #8]
    42f2:	4618      	mov	r0, r3
    42f4:	4b08      	ldr	r3, [pc, #32]	; (4318 <pwm_init+0x58>)
    42f6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    42f8:	68fb      	ldr	r3, [r7, #12]
    42fa:	4a08      	ldr	r2, [pc, #32]	; (431c <pwm_init+0x5c>)
    42fc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    42fe:	68fb      	ldr	r3, [r7, #12]
    4300:	4a07      	ldr	r2, [pc, #28]	; (4320 <pwm_init+0x60>)
    4302:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4304:	2300      	movs	r3, #0
}
    4306:	4618      	mov	r0, r3
    4308:	3710      	adds	r7, #16
    430a:	46bd      	mov	sp, r7
    430c:	bd80      	pop	{r7, pc}
    430e:	bf00      	nop
    4310:	0001983c 	.word	0x0001983c
    4314:	00005565 	.word	0x00005565
    4318:	0000a201 	.word	0x0000a201
    431c:	00004379 	.word	0x00004379
    4320:	0000439d 	.word	0x0000439d

00004324 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4324:	b580      	push	{r7, lr}
    4326:	b082      	sub	sp, #8
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	2b00      	cmp	r3, #0
    4330:	bf14      	ite	ne
    4332:	2301      	movne	r3, #1
    4334:	2300      	moveq	r3, #0
    4336:	b2db      	uxtb	r3, r3
    4338:	224a      	movs	r2, #74	; 0x4a
    433a:	490b      	ldr	r1, [pc, #44]	; (4368 <pwm_enable+0x44>)
    433c:	4618      	mov	r0, r3
    433e:	4b0b      	ldr	r3, [pc, #44]	; (436c <pwm_enable+0x48>)
    4340:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	4618      	mov	r0, r3
    4346:	4b0a      	ldr	r3, [pc, #40]	; (4370 <pwm_enable+0x4c>)
    4348:	4798      	blx	r3
    434a:	4603      	mov	r3, r0
    434c:	2b00      	cmp	r3, #0
    434e:	d002      	beq.n	4356 <pwm_enable+0x32>
		return ERR_DENIED;
    4350:	f06f 0310 	mvn.w	r3, #16
    4354:	e004      	b.n	4360 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	4618      	mov	r0, r3
    435a:	4b06      	ldr	r3, [pc, #24]	; (4374 <pwm_enable+0x50>)
    435c:	4798      	blx	r3

	return ERR_NONE;
    435e:	2300      	movs	r3, #0
}
    4360:	4618      	mov	r0, r3
    4362:	3708      	adds	r7, #8
    4364:	46bd      	mov	sp, r7
    4366:	bd80      	pop	{r7, pc}
    4368:	0001983c 	.word	0x0001983c
    436c:	00005565 	.word	0x00005565
    4370:	0000a5f1 	.word	0x0000a5f1
    4374:	0000a4ad 	.word	0x0000a4ad

00004378 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4378:	b580      	push	{r7, lr}
    437a:	b084      	sub	sp, #16
    437c:	af00      	add	r7, sp, #0
    437e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	695b      	ldr	r3, [r3, #20]
    4388:	2b00      	cmp	r3, #0
    438a:	d003      	beq.n	4394 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	695b      	ldr	r3, [r3, #20]
    4390:	68f8      	ldr	r0, [r7, #12]
    4392:	4798      	blx	r3
	}
}
    4394:	bf00      	nop
    4396:	3710      	adds	r7, #16
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}

0000439c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    439c:	b580      	push	{r7, lr}
    439e:	b084      	sub	sp, #16
    43a0:	af00      	add	r7, sp, #0
    43a2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    43a8:	68fb      	ldr	r3, [r7, #12]
    43aa:	699b      	ldr	r3, [r3, #24]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d003      	beq.n	43b8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	699b      	ldr	r3, [r3, #24]
    43b4:	68f8      	ldr	r0, [r7, #12]
    43b6:	4798      	blx	r3
	}
}
    43b8:	bf00      	nop
    43ba:	3710      	adds	r7, #16
    43bc:	46bd      	mov	sp, r7
    43be:	bd80      	pop	{r7, pc}

000043c0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b082      	sub	sp, #8
    43c4:	af00      	add	r7, sp, #0
    43c6:	6078      	str	r0, [r7, #4]
    43c8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	2b00      	cmp	r3, #0
    43ce:	d004      	beq.n	43da <qspi_sync_init+0x1a>
    43d0:	683b      	ldr	r3, [r7, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d001      	beq.n	43da <qspi_sync_init+0x1a>
    43d6:	2301      	movs	r3, #1
    43d8:	e000      	b.n	43dc <qspi_sync_init+0x1c>
    43da:	2300      	movs	r3, #0
    43dc:	f003 0301 	and.w	r3, r3, #1
    43e0:	b2db      	uxtb	r3, r3
    43e2:	2231      	movs	r2, #49	; 0x31
    43e4:	4906      	ldr	r1, [pc, #24]	; (4400 <qspi_sync_init+0x40>)
    43e6:	4618      	mov	r0, r3
    43e8:	4b06      	ldr	r3, [pc, #24]	; (4404 <qspi_sync_init+0x44>)
    43ea:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	6839      	ldr	r1, [r7, #0]
    43f0:	4618      	mov	r0, r3
    43f2:	4b05      	ldr	r3, [pc, #20]	; (4408 <qspi_sync_init+0x48>)
    43f4:	4798      	blx	r3
    43f6:	4603      	mov	r3, r0
}
    43f8:	4618      	mov	r0, r3
    43fa:	3708      	adds	r7, #8
    43fc:	46bd      	mov	sp, r7
    43fe:	bd80      	pop	{r7, pc}
    4400:	00019854 	.word	0x00019854
    4404:	00005565 	.word	0x00005565
    4408:	00007ab1 	.word	0x00007ab1

0000440c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    440c:	b580      	push	{r7, lr}
    440e:	b082      	sub	sp, #8
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	2b00      	cmp	r3, #0
    4418:	bf14      	ite	ne
    441a:	2301      	movne	r3, #1
    441c:	2300      	moveq	r3, #0
    441e:	b2db      	uxtb	r3, r3
    4420:	223f      	movs	r2, #63	; 0x3f
    4422:	4906      	ldr	r1, [pc, #24]	; (443c <qspi_sync_enable+0x30>)
    4424:	4618      	mov	r0, r3
    4426:	4b06      	ldr	r3, [pc, #24]	; (4440 <qspi_sync_enable+0x34>)
    4428:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	4618      	mov	r0, r3
    442e:	4b05      	ldr	r3, [pc, #20]	; (4444 <qspi_sync_enable+0x38>)
    4430:	4798      	blx	r3
    4432:	4603      	mov	r3, r0
}
    4434:	4618      	mov	r0, r3
    4436:	3708      	adds	r7, #8
    4438:	46bd      	mov	sp, r7
    443a:	bd80      	pop	{r7, pc}
    443c:	00019854 	.word	0x00019854
    4440:	00005565 	.word	0x00005565
    4444:	00007b25 	.word	0x00007b25

00004448 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4448:	b580      	push	{r7, lr}
    444a:	b082      	sub	sp, #8
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	2b00      	cmp	r3, #0
    4454:	bf14      	ite	ne
    4456:	2301      	movne	r3, #1
    4458:	2300      	moveq	r3, #0
    445a:	b2db      	uxtb	r3, r3
    445c:	2246      	movs	r2, #70	; 0x46
    445e:	4906      	ldr	r1, [pc, #24]	; (4478 <qspi_sync_disable+0x30>)
    4460:	4618      	mov	r0, r3
    4462:	4b06      	ldr	r3, [pc, #24]	; (447c <qspi_sync_disable+0x34>)
    4464:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	4618      	mov	r0, r3
    446a:	4b05      	ldr	r3, [pc, #20]	; (4480 <qspi_sync_disable+0x38>)
    446c:	4798      	blx	r3
    446e:	4603      	mov	r3, r0
}
    4470:	4618      	mov	r0, r3
    4472:	3708      	adds	r7, #8
    4474:	46bd      	mov	sp, r7
    4476:	bd80      	pop	{r7, pc}
    4478:	00019854 	.word	0x00019854
    447c:	00005565 	.word	0x00005565
    4480:	00007b49 	.word	0x00007b49

00004484 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4484:	b580      	push	{r7, lr}
    4486:	b082      	sub	sp, #8
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
    448c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	2b00      	cmp	r3, #0
    4492:	d004      	beq.n	449e <qspi_sync_serial_run_command+0x1a>
    4494:	683b      	ldr	r3, [r7, #0]
    4496:	2b00      	cmp	r3, #0
    4498:	d001      	beq.n	449e <qspi_sync_serial_run_command+0x1a>
    449a:	2301      	movs	r3, #1
    449c:	e000      	b.n	44a0 <qspi_sync_serial_run_command+0x1c>
    449e:	2300      	movs	r3, #0
    44a0:	f003 0301 	and.w	r3, r3, #1
    44a4:	b2db      	uxtb	r3, r3
    44a6:	224d      	movs	r2, #77	; 0x4d
    44a8:	4906      	ldr	r1, [pc, #24]	; (44c4 <qspi_sync_serial_run_command+0x40>)
    44aa:	4618      	mov	r0, r3
    44ac:	4b06      	ldr	r3, [pc, #24]	; (44c8 <qspi_sync_serial_run_command+0x44>)
    44ae:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	6839      	ldr	r1, [r7, #0]
    44b4:	4618      	mov	r0, r3
    44b6:	4b05      	ldr	r3, [pc, #20]	; (44cc <qspi_sync_serial_run_command+0x48>)
    44b8:	4798      	blx	r3
    44ba:	4603      	mov	r3, r0
}
    44bc:	4618      	mov	r0, r3
    44be:	3708      	adds	r7, #8
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}
    44c4:	00019854 	.word	0x00019854
    44c8:	00005565 	.word	0x00005565
    44cc:	00007c95 	.word	0x00007c95

000044d0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    44d0:	b580      	push	{r7, lr}
    44d2:	b084      	sub	sp, #16
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
    44d8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    44da:	2300      	movs	r3, #0
    44dc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	2b00      	cmp	r3, #0
    44e2:	d004      	beq.n	44ee <spi_m_sync_init+0x1e>
    44e4:	683b      	ldr	r3, [r7, #0]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d001      	beq.n	44ee <spi_m_sync_init+0x1e>
    44ea:	2301      	movs	r3, #1
    44ec:	e000      	b.n	44f0 <spi_m_sync_init+0x20>
    44ee:	2300      	movs	r3, #0
    44f0:	f003 0301 	and.w	r3, r3, #1
    44f4:	b2db      	uxtb	r3, r3
    44f6:	2240      	movs	r2, #64	; 0x40
    44f8:	4910      	ldr	r1, [pc, #64]	; (453c <spi_m_sync_init+0x6c>)
    44fa:	4618      	mov	r0, r3
    44fc:	4b10      	ldr	r3, [pc, #64]	; (4540 <spi_m_sync_init+0x70>)
    44fe:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	683a      	ldr	r2, [r7, #0]
    4504:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	3304      	adds	r3, #4
    450a:	6839      	ldr	r1, [r7, #0]
    450c:	4618      	mov	r0, r3
    450e:	4b0d      	ldr	r3, [pc, #52]	; (4544 <spi_m_sync_init+0x74>)
    4510:	4798      	blx	r3
    4512:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	2b00      	cmp	r3, #0
    4518:	da01      	bge.n	451e <spi_m_sync_init+0x4e>
		return rc;
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	e00a      	b.n	4534 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4524:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	4a07      	ldr	r2, [pc, #28]	; (4548 <spi_m_sync_init+0x78>)
    452a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	4a07      	ldr	r2, [pc, #28]	; (454c <spi_m_sync_init+0x7c>)
    4530:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4532:	2300      	movs	r3, #0
}
    4534:	4618      	mov	r0, r3
    4536:	3710      	adds	r7, #16
    4538:	46bd      	mov	sp, r7
    453a:	bd80      	pop	{r7, pc}
    453c:	00019870 	.word	0x00019870
    4540:	00005565 	.word	0x00005565
    4544:	00009065 	.word	0x00009065
    4548:	000045c9 	.word	0x000045c9
    454c:	00004621 	.word	0x00004621

00004550 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    4550:	b580      	push	{r7, lr}
    4552:	b082      	sub	sp, #8
    4554:	af00      	add	r7, sp, #0
    4556:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	2b00      	cmp	r3, #0
    455c:	bf14      	ite	ne
    455e:	2301      	movne	r3, #1
    4560:	2300      	moveq	r3, #0
    4562:	b2db      	uxtb	r3, r3
    4564:	2257      	movs	r2, #87	; 0x57
    4566:	4906      	ldr	r1, [pc, #24]	; (4580 <spi_m_sync_enable+0x30>)
    4568:	4618      	mov	r0, r3
    456a:	4b06      	ldr	r3, [pc, #24]	; (4584 <spi_m_sync_enable+0x34>)
    456c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	3304      	adds	r3, #4
    4572:	4618      	mov	r0, r3
    4574:	4b04      	ldr	r3, [pc, #16]	; (4588 <spi_m_sync_enable+0x38>)
    4576:	4798      	blx	r3
}
    4578:	bf00      	nop
    457a:	3708      	adds	r7, #8
    457c:	46bd      	mov	sp, r7
    457e:	bd80      	pop	{r7, pc}
    4580:	00019870 	.word	0x00019870
    4584:	00005565 	.word	0x00005565
    4588:	00009171 	.word	0x00009171

0000458c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    458c:	b580      	push	{r7, lr}
    458e:	b082      	sub	sp, #8
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	2b00      	cmp	r3, #0
    4598:	bf14      	ite	ne
    459a:	2301      	movne	r3, #1
    459c:	2300      	moveq	r3, #0
    459e:	b2db      	uxtb	r3, r3
    45a0:	225d      	movs	r2, #93	; 0x5d
    45a2:	4906      	ldr	r1, [pc, #24]	; (45bc <spi_m_sync_disable+0x30>)
    45a4:	4618      	mov	r0, r3
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <spi_m_sync_disable+0x34>)
    45a8:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	3304      	adds	r3, #4
    45ae:	4618      	mov	r0, r3
    45b0:	4b04      	ldr	r3, [pc, #16]	; (45c4 <spi_m_sync_disable+0x38>)
    45b2:	4798      	blx	r3
}
    45b4:	bf00      	nop
    45b6:	3708      	adds	r7, #8
    45b8:	46bd      	mov	sp, r7
    45ba:	bd80      	pop	{r7, pc}
    45bc:	00019870 	.word	0x00019870
    45c0:	00005565 	.word	0x00005565
    45c4:	000091c1 	.word	0x000091c1

000045c8 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	b088      	sub	sp, #32
    45cc:	af00      	add	r7, sp, #0
    45ce:	60f8      	str	r0, [r7, #12]
    45d0:	60b9      	str	r1, [r7, #8]
    45d2:	4613      	mov	r3, r2
    45d4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    45d6:	68fb      	ldr	r3, [r7, #12]
    45d8:	2b00      	cmp	r3, #0
    45da:	bf14      	ite	ne
    45dc:	2301      	movne	r3, #1
    45de:	2300      	moveq	r3, #0
    45e0:	b2db      	uxtb	r3, r3
    45e2:	2287      	movs	r2, #135	; 0x87
    45e4:	490b      	ldr	r1, [pc, #44]	; (4614 <_spi_m_sync_io_read+0x4c>)
    45e6:	4618      	mov	r0, r3
    45e8:	4b0b      	ldr	r3, [pc, #44]	; (4618 <_spi_m_sync_io_read+0x50>)
    45ea:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    45ec:	68fb      	ldr	r3, [r7, #12]
    45ee:	3b0c      	subs	r3, #12
    45f0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    45f2:	68bb      	ldr	r3, [r7, #8]
    45f4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    45f6:	2300      	movs	r3, #0
    45f8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    45fa:	88fb      	ldrh	r3, [r7, #6]
    45fc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    45fe:	f107 0310 	add.w	r3, r7, #16
    4602:	4619      	mov	r1, r3
    4604:	69f8      	ldr	r0, [r7, #28]
    4606:	4b05      	ldr	r3, [pc, #20]	; (461c <_spi_m_sync_io_read+0x54>)
    4608:	4798      	blx	r3
    460a:	4603      	mov	r3, r0
}
    460c:	4618      	mov	r0, r3
    460e:	3720      	adds	r7, #32
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}
    4614:	00019870 	.word	0x00019870
    4618:	00005565 	.word	0x00005565
    461c:	00004679 	.word	0x00004679

00004620 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    4620:	b580      	push	{r7, lr}
    4622:	b088      	sub	sp, #32
    4624:	af00      	add	r7, sp, #0
    4626:	60f8      	str	r0, [r7, #12]
    4628:	60b9      	str	r1, [r7, #8]
    462a:	4613      	mov	r3, r2
    462c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2b00      	cmp	r3, #0
    4632:	bf14      	ite	ne
    4634:	2301      	movne	r3, #1
    4636:	2300      	moveq	r3, #0
    4638:	b2db      	uxtb	r3, r3
    463a:	22a3      	movs	r2, #163	; 0xa3
    463c:	490b      	ldr	r1, [pc, #44]	; (466c <_spi_m_sync_io_write+0x4c>)
    463e:	4618      	mov	r0, r3
    4640:	4b0b      	ldr	r3, [pc, #44]	; (4670 <_spi_m_sync_io_write+0x50>)
    4642:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4644:	68fb      	ldr	r3, [r7, #12]
    4646:	3b0c      	subs	r3, #12
    4648:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    464a:	2300      	movs	r3, #0
    464c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    464e:	68bb      	ldr	r3, [r7, #8]
    4650:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    4652:	88fb      	ldrh	r3, [r7, #6]
    4654:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4656:	f107 0310 	add.w	r3, r7, #16
    465a:	4619      	mov	r1, r3
    465c:	69f8      	ldr	r0, [r7, #28]
    465e:	4b05      	ldr	r3, [pc, #20]	; (4674 <_spi_m_sync_io_write+0x54>)
    4660:	4798      	blx	r3
    4662:	4603      	mov	r3, r0
}
    4664:	4618      	mov	r0, r3
    4666:	3720      	adds	r7, #32
    4668:	46bd      	mov	sp, r7
    466a:	bd80      	pop	{r7, pc}
    466c:	00019870 	.word	0x00019870
    4670:	00005565 	.word	0x00005565
    4674:	00004679 	.word	0x00004679

00004678 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    4678:	b580      	push	{r7, lr}
    467a:	b086      	sub	sp, #24
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
    4680:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	2b00      	cmp	r3, #0
    4686:	d004      	beq.n	4692 <spi_m_sync_transfer+0x1a>
    4688:	683b      	ldr	r3, [r7, #0]
    468a:	2b00      	cmp	r3, #0
    468c:	d001      	beq.n	4692 <spi_m_sync_transfer+0x1a>
    468e:	2301      	movs	r3, #1
    4690:	e000      	b.n	4694 <spi_m_sync_transfer+0x1c>
    4692:	2300      	movs	r3, #0
    4694:	f003 0301 	and.w	r3, r3, #1
    4698:	b2db      	uxtb	r3, r3
    469a:	22b3      	movs	r2, #179	; 0xb3
    469c:	490c      	ldr	r1, [pc, #48]	; (46d0 <spi_m_sync_transfer+0x58>)
    469e:	4618      	mov	r0, r3
    46a0:	4b0c      	ldr	r3, [pc, #48]	; (46d4 <spi_m_sync_transfer+0x5c>)
    46a2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    46a4:	683b      	ldr	r3, [r7, #0]
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    46aa:	683b      	ldr	r3, [r7, #0]
    46ac:	685b      	ldr	r3, [r3, #4]
    46ae:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    46b0:	683b      	ldr	r3, [r7, #0]
    46b2:	689b      	ldr	r3, [r3, #8]
    46b4:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	3304      	adds	r3, #4
    46ba:	f107 020c 	add.w	r2, r7, #12
    46be:	4611      	mov	r1, r2
    46c0:	4618      	mov	r0, r3
    46c2:	4b05      	ldr	r3, [pc, #20]	; (46d8 <spi_m_sync_transfer+0x60>)
    46c4:	4798      	blx	r3
    46c6:	4603      	mov	r3, r0
}
    46c8:	4618      	mov	r0, r3
    46ca:	3718      	adds	r7, #24
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}
    46d0:	00019870 	.word	0x00019870
    46d4:	00005565 	.word	0x00005565
    46d8:	00009365 	.word	0x00009365

000046dc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b082      	sub	sp, #8
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
    46e4:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    46e6:	687b      	ldr	r3, [r7, #4]
    46e8:	2b00      	cmp	r3, #0
    46ea:	d004      	beq.n	46f6 <spi_m_sync_get_io_descriptor+0x1a>
    46ec:	683b      	ldr	r3, [r7, #0]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d001      	beq.n	46f6 <spi_m_sync_get_io_descriptor+0x1a>
    46f2:	2301      	movs	r3, #1
    46f4:	e000      	b.n	46f8 <spi_m_sync_get_io_descriptor+0x1c>
    46f6:	2300      	movs	r3, #0
    46f8:	f003 0301 	and.w	r3, r3, #1
    46fc:	b2db      	uxtb	r3, r3
    46fe:	22bd      	movs	r2, #189	; 0xbd
    4700:	4906      	ldr	r1, [pc, #24]	; (471c <spi_m_sync_get_io_descriptor+0x40>)
    4702:	4618      	mov	r0, r3
    4704:	4b06      	ldr	r3, [pc, #24]	; (4720 <spi_m_sync_get_io_descriptor+0x44>)
    4706:	4798      	blx	r3
	*io = &spi->io;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	f103 020c 	add.w	r2, r3, #12
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	601a      	str	r2, [r3, #0]
	return 0;
    4712:	2300      	movs	r3, #0
}
    4714:	4618      	mov	r0, r3
    4716:	3708      	adds	r7, #8
    4718:	46bd      	mov	sp, r7
    471a:	bd80      	pop	{r7, pc}
    471c:	00019870 	.word	0x00019870
    4720:	00005565 	.word	0x00005565

00004724 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    4724:	b480      	push	{r7}
    4726:	b083      	sub	sp, #12
    4728:	af00      	add	r7, sp, #0
    472a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	681b      	ldr	r3, [r3, #0]
}
    4730:	4618      	mov	r0, r3
    4732:	370c      	adds	r7, #12
    4734:	46bd      	mov	sp, r7
    4736:	f85d 7b04 	ldr.w	r7, [sp], #4
    473a:	4770      	bx	lr

0000473c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    473c:	b480      	push	{r7}
    473e:	b083      	sub	sp, #12
    4740:	af00      	add	r7, sp, #0
    4742:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	2b00      	cmp	r3, #0
    4748:	d002      	beq.n	4750 <list_get_next_element+0x14>
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	e000      	b.n	4752 <list_get_next_element+0x16>
    4750:	2300      	movs	r3, #0
}
    4752:	4618      	mov	r0, r3
    4754:	370c      	adds	r7, #12
    4756:	46bd      	mov	sp, r7
    4758:	f85d 7b04 	ldr.w	r7, [sp], #4
    475c:	4770      	bx	lr
	...

00004760 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    4760:	b580      	push	{r7, lr}
    4762:	b084      	sub	sp, #16
    4764:	af00      	add	r7, sp, #0
    4766:	60f8      	str	r0, [r7, #12]
    4768:	60b9      	str	r1, [r7, #8]
    476a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    476c:	68fb      	ldr	r3, [r7, #12]
    476e:	2b00      	cmp	r3, #0
    4770:	d007      	beq.n	4782 <timer_init+0x22>
    4772:	68bb      	ldr	r3, [r7, #8]
    4774:	2b00      	cmp	r3, #0
    4776:	d004      	beq.n	4782 <timer_init+0x22>
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	2b00      	cmp	r3, #0
    477c:	d001      	beq.n	4782 <timer_init+0x22>
    477e:	2301      	movs	r3, #1
    4780:	e000      	b.n	4784 <timer_init+0x24>
    4782:	2300      	movs	r3, #0
    4784:	f003 0301 	and.w	r3, r3, #1
    4788:	b2db      	uxtb	r3, r3
    478a:	223b      	movs	r2, #59	; 0x3b
    478c:	490c      	ldr	r1, [pc, #48]	; (47c0 <timer_init+0x60>)
    478e:	4618      	mov	r0, r3
    4790:	4b0c      	ldr	r3, [pc, #48]	; (47c4 <timer_init+0x64>)
    4792:	4798      	blx	r3
	descr->func = func;
    4794:	68fb      	ldr	r3, [r7, #12]
    4796:	687a      	ldr	r2, [r7, #4]
    4798:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	681b      	ldr	r3, [r3, #0]
    47a0:	68fa      	ldr	r2, [r7, #12]
    47a2:	3204      	adds	r2, #4
    47a4:	68b9      	ldr	r1, [r7, #8]
    47a6:	4610      	mov	r0, r2
    47a8:	4798      	blx	r3
	descr->time                           = 0;
    47aa:	68fb      	ldr	r3, [r7, #12]
    47ac:	2200      	movs	r2, #0
    47ae:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    47b0:	68fb      	ldr	r3, [r7, #12]
    47b2:	4a05      	ldr	r2, [pc, #20]	; (47c8 <timer_init+0x68>)
    47b4:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    47b6:	2300      	movs	r3, #0
}
    47b8:	4618      	mov	r0, r3
    47ba:	3710      	adds	r7, #16
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	0001988c 	.word	0x0001988c
    47c4:	00005565 	.word	0x00005565
    47c8:	00004b51 	.word	0x00004b51

000047cc <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	2b00      	cmp	r3, #0
    47d8:	d005      	beq.n	47e6 <timer_start+0x1a>
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	2b00      	cmp	r3, #0
    47e0:	d001      	beq.n	47e6 <timer_start+0x1a>
    47e2:	2301      	movs	r3, #1
    47e4:	e000      	b.n	47e8 <timer_start+0x1c>
    47e6:	2300      	movs	r3, #0
    47e8:	f003 0301 	and.w	r3, r3, #1
    47ec:	b2db      	uxtb	r3, r3
    47ee:	2254      	movs	r2, #84	; 0x54
    47f0:	490e      	ldr	r1, [pc, #56]	; (482c <timer_start+0x60>)
    47f2:	4618      	mov	r0, r3
    47f4:	4b0e      	ldr	r3, [pc, #56]	; (4830 <timer_start+0x64>)
    47f6:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	681b      	ldr	r3, [r3, #0]
    47fc:	699b      	ldr	r3, [r3, #24]
    47fe:	687a      	ldr	r2, [r7, #4]
    4800:	3204      	adds	r2, #4
    4802:	4610      	mov	r0, r2
    4804:	4798      	blx	r3
    4806:	4603      	mov	r3, r0
    4808:	2b00      	cmp	r3, #0
    480a:	d002      	beq.n	4812 <timer_start+0x46>
		return ERR_DENIED;
    480c:	f06f 0310 	mvn.w	r3, #16
    4810:	e007      	b.n	4822 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	681b      	ldr	r3, [r3, #0]
    4816:	689b      	ldr	r3, [r3, #8]
    4818:	687a      	ldr	r2, [r7, #4]
    481a:	3204      	adds	r2, #4
    481c:	4610      	mov	r0, r2
    481e:	4798      	blx	r3

	return ERR_NONE;
    4820:	2300      	movs	r3, #0
}
    4822:	4618      	mov	r0, r3
    4824:	3708      	adds	r7, #8
    4826:	46bd      	mov	sp, r7
    4828:	bd80      	pop	{r7, pc}
    482a:	bf00      	nop
    482c:	0001988c 	.word	0x0001988c
    4830:	00005565 	.word	0x00005565

00004834 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    4834:	b580      	push	{r7, lr}
    4836:	b082      	sub	sp, #8
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	2b00      	cmp	r3, #0
    4840:	d005      	beq.n	484e <timer_stop+0x1a>
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	2b00      	cmp	r3, #0
    4848:	d001      	beq.n	484e <timer_stop+0x1a>
    484a:	2301      	movs	r3, #1
    484c:	e000      	b.n	4850 <timer_stop+0x1c>
    484e:	2300      	movs	r3, #0
    4850:	f003 0301 	and.w	r3, r3, #1
    4854:	b2db      	uxtb	r3, r3
    4856:	2262      	movs	r2, #98	; 0x62
    4858:	490f      	ldr	r1, [pc, #60]	; (4898 <timer_stop+0x64>)
    485a:	4618      	mov	r0, r3
    485c:	4b0f      	ldr	r3, [pc, #60]	; (489c <timer_stop+0x68>)
    485e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	681b      	ldr	r3, [r3, #0]
    4864:	699b      	ldr	r3, [r3, #24]
    4866:	687a      	ldr	r2, [r7, #4]
    4868:	3204      	adds	r2, #4
    486a:	4610      	mov	r0, r2
    486c:	4798      	blx	r3
    486e:	4603      	mov	r3, r0
    4870:	f083 0301 	eor.w	r3, r3, #1
    4874:	b2db      	uxtb	r3, r3
    4876:	2b00      	cmp	r3, #0
    4878:	d002      	beq.n	4880 <timer_stop+0x4c>
		return ERR_DENIED;
    487a:	f06f 0310 	mvn.w	r3, #16
    487e:	e007      	b.n	4890 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	68db      	ldr	r3, [r3, #12]
    4886:	687a      	ldr	r2, [r7, #4]
    4888:	3204      	adds	r2, #4
    488a:	4610      	mov	r0, r2
    488c:	4798      	blx	r3

	return ERR_NONE;
    488e:	2300      	movs	r3, #0
}
    4890:	4618      	mov	r0, r3
    4892:	3708      	adds	r7, #8
    4894:	46bd      	mov	sp, r7
    4896:	bd80      	pop	{r7, pc}
    4898:	0001988c 	.word	0x0001988c
    489c:	00005565 	.word	0x00005565

000048a0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b084      	sub	sp, #16
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
    48a8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d008      	beq.n	48c2 <timer_add_task+0x22>
    48b0:	683b      	ldr	r3, [r7, #0]
    48b2:	2b00      	cmp	r3, #0
    48b4:	d005      	beq.n	48c2 <timer_add_task+0x22>
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	681b      	ldr	r3, [r3, #0]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d001      	beq.n	48c2 <timer_add_task+0x22>
    48be:	2301      	movs	r3, #1
    48c0:	e000      	b.n	48c4 <timer_add_task+0x24>
    48c2:	2300      	movs	r3, #0
    48c4:	f003 0301 	and.w	r3, r3, #1
    48c8:	b2db      	uxtb	r3, r3
    48ca:	227b      	movs	r2, #123	; 0x7b
    48cc:	492f      	ldr	r1, [pc, #188]	; (498c <timer_add_task+0xec>)
    48ce:	4618      	mov	r0, r3
    48d0:	4b2f      	ldr	r3, [pc, #188]	; (4990 <timer_add_task+0xf0>)
    48d2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	7f1b      	ldrb	r3, [r3, #28]
    48d8:	b2db      	uxtb	r3, r3
    48da:	f043 0301 	orr.w	r3, r3, #1
    48de:	b2da      	uxtb	r2, r3
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	3318      	adds	r3, #24
    48e8:	6839      	ldr	r1, [r7, #0]
    48ea:	4618      	mov	r0, r3
    48ec:	4b29      	ldr	r3, [pc, #164]	; (4994 <timer_add_task+0xf4>)
    48ee:	4798      	blx	r3
    48f0:	4603      	mov	r3, r0
    48f2:	2b00      	cmp	r3, #0
    48f4:	d00f      	beq.n	4916 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	7f1b      	ldrb	r3, [r3, #28]
    48fa:	b2db      	uxtb	r3, r3
    48fc:	f023 0301 	bic.w	r3, r3, #1
    4900:	b2da      	uxtb	r2, r3
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4906:	2280      	movs	r2, #128	; 0x80
    4908:	4920      	ldr	r1, [pc, #128]	; (498c <timer_add_task+0xec>)
    490a:	2000      	movs	r0, #0
    490c:	4b20      	ldr	r3, [pc, #128]	; (4990 <timer_add_task+0xf0>)
    490e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4910:	f06f 0311 	mvn.w	r3, #17
    4914:	e035      	b.n	4982 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	695a      	ldr	r2, [r3, #20]
    491a:	683b      	ldr	r3, [r7, #0]
    491c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	f103 0018 	add.w	r0, r3, #24
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	695b      	ldr	r3, [r3, #20]
    4928:	461a      	mov	r2, r3
    492a:	6839      	ldr	r1, [r7, #0]
    492c:	4b1a      	ldr	r3, [pc, #104]	; (4998 <timer_add_task+0xf8>)
    492e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	7f1b      	ldrb	r3, [r3, #28]
    4934:	b2db      	uxtb	r3, r3
    4936:	f023 0301 	bic.w	r3, r3, #1
    493a:	b2da      	uxtb	r2, r3
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	7f1b      	ldrb	r3, [r3, #28]
    4944:	b2db      	uxtb	r3, r3
    4946:	f003 0302 	and.w	r3, r3, #2
    494a:	2b00      	cmp	r3, #0
    494c:	d018      	beq.n	4980 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    494e:	f107 030c 	add.w	r3, r7, #12
    4952:	4618      	mov	r0, r3
    4954:	4b11      	ldr	r3, [pc, #68]	; (499c <timer_add_task+0xfc>)
    4956:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	7f1b      	ldrb	r3, [r3, #28]
    495c:	b2db      	uxtb	r3, r3
    495e:	f023 0302 	bic.w	r3, r3, #2
    4962:	b2da      	uxtb	r2, r3
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	681b      	ldr	r3, [r3, #0]
    496c:	69db      	ldr	r3, [r3, #28]
    496e:	687a      	ldr	r2, [r7, #4]
    4970:	3204      	adds	r2, #4
    4972:	4610      	mov	r0, r2
    4974:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4976:	f107 030c 	add.w	r3, r7, #12
    497a:	4618      	mov	r0, r3
    497c:	4b08      	ldr	r3, [pc, #32]	; (49a0 <timer_add_task+0x100>)
    497e:	4798      	blx	r3
	}

	return ERR_NONE;
    4980:	2300      	movs	r3, #0
}
    4982:	4618      	mov	r0, r3
    4984:	3710      	adds	r7, #16
    4986:	46bd      	mov	sp, r7
    4988:	bd80      	pop	{r7, pc}
    498a:	bf00      	nop
    498c:	0001988c 	.word	0x0001988c
    4990:	00005565 	.word	0x00005565
    4994:	0000558d 	.word	0x0000558d
    4998:	00004aa1 	.word	0x00004aa1
    499c:	0000d9d1 	.word	0x0000d9d1
    49a0:	0000d9f7 	.word	0x0000d9f7

000049a4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    49a4:	b580      	push	{r7, lr}
    49a6:	b084      	sub	sp, #16
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
    49ac:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	2b00      	cmp	r3, #0
    49b2:	d008      	beq.n	49c6 <timer_remove_task+0x22>
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	2b00      	cmp	r3, #0
    49b8:	d005      	beq.n	49c6 <timer_remove_task+0x22>
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	2b00      	cmp	r3, #0
    49c0:	d001      	beq.n	49c6 <timer_remove_task+0x22>
    49c2:	2301      	movs	r3, #1
    49c4:	e000      	b.n	49c8 <timer_remove_task+0x24>
    49c6:	2300      	movs	r3, #0
    49c8:	f003 0301 	and.w	r3, r3, #1
    49cc:	b2db      	uxtb	r3, r3
    49ce:	2296      	movs	r2, #150	; 0x96
    49d0:	492d      	ldr	r1, [pc, #180]	; (4a88 <timer_remove_task+0xe4>)
    49d2:	4618      	mov	r0, r3
    49d4:	4b2d      	ldr	r3, [pc, #180]	; (4a8c <timer_remove_task+0xe8>)
    49d6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	7f1b      	ldrb	r3, [r3, #28]
    49dc:	b2db      	uxtb	r3, r3
    49de:	f043 0301 	orr.w	r3, r3, #1
    49e2:	b2da      	uxtb	r2, r3
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	3318      	adds	r3, #24
    49ec:	6839      	ldr	r1, [r7, #0]
    49ee:	4618      	mov	r0, r3
    49f0:	4b27      	ldr	r3, [pc, #156]	; (4a90 <timer_remove_task+0xec>)
    49f2:	4798      	blx	r3
    49f4:	4603      	mov	r3, r0
    49f6:	f083 0301 	eor.w	r3, r3, #1
    49fa:	b2db      	uxtb	r3, r3
    49fc:	2b00      	cmp	r3, #0
    49fe:	d00f      	beq.n	4a20 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	7f1b      	ldrb	r3, [r3, #28]
    4a04:	b2db      	uxtb	r3, r3
    4a06:	f023 0301 	bic.w	r3, r3, #1
    4a0a:	b2da      	uxtb	r2, r3
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4a10:	229b      	movs	r2, #155	; 0x9b
    4a12:	491d      	ldr	r1, [pc, #116]	; (4a88 <timer_remove_task+0xe4>)
    4a14:	2000      	movs	r0, #0
    4a16:	4b1d      	ldr	r3, [pc, #116]	; (4a8c <timer_remove_task+0xe8>)
    4a18:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4a1a:	f06f 0309 	mvn.w	r3, #9
    4a1e:	e02e      	b.n	4a7e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	3318      	adds	r3, #24
    4a24:	6839      	ldr	r1, [r7, #0]
    4a26:	4618      	mov	r0, r3
    4a28:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <timer_remove_task+0xf0>)
    4a2a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	7f1b      	ldrb	r3, [r3, #28]
    4a30:	b2db      	uxtb	r3, r3
    4a32:	f023 0301 	bic.w	r3, r3, #1
    4a36:	b2da      	uxtb	r2, r3
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	7f1b      	ldrb	r3, [r3, #28]
    4a40:	b2db      	uxtb	r3, r3
    4a42:	f003 0302 	and.w	r3, r3, #2
    4a46:	2b00      	cmp	r3, #0
    4a48:	d018      	beq.n	4a7c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    4a4a:	f107 030c 	add.w	r3, r7, #12
    4a4e:	4618      	mov	r0, r3
    4a50:	4b11      	ldr	r3, [pc, #68]	; (4a98 <timer_remove_task+0xf4>)
    4a52:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	7f1b      	ldrb	r3, [r3, #28]
    4a58:	b2db      	uxtb	r3, r3
    4a5a:	f023 0302 	bic.w	r3, r3, #2
    4a5e:	b2da      	uxtb	r2, r3
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	69db      	ldr	r3, [r3, #28]
    4a6a:	687a      	ldr	r2, [r7, #4]
    4a6c:	3204      	adds	r2, #4
    4a6e:	4610      	mov	r0, r2
    4a70:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4a72:	f107 030c 	add.w	r3, r7, #12
    4a76:	4618      	mov	r0, r3
    4a78:	4b08      	ldr	r3, [pc, #32]	; (4a9c <timer_remove_task+0xf8>)
    4a7a:	4798      	blx	r3
	}

	return ERR_NONE;
    4a7c:	2300      	movs	r3, #0
}
    4a7e:	4618      	mov	r0, r3
    4a80:	3710      	adds	r7, #16
    4a82:	46bd      	mov	sp, r7
    4a84:	bd80      	pop	{r7, pc}
    4a86:	bf00      	nop
    4a88:	0001988c 	.word	0x0001988c
    4a8c:	00005565 	.word	0x00005565
    4a90:	0000558d 	.word	0x0000558d
    4a94:	000056ef 	.word	0x000056ef
    4a98:	0000d9d1 	.word	0x0000d9d1
    4a9c:	0000d9f7 	.word	0x0000d9f7

00004aa0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b088      	sub	sp, #32
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	60f8      	str	r0, [r7, #12]
    4aa8:	60b9      	str	r1, [r7, #8]
    4aaa:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    4aac:	2300      	movs	r3, #0
    4aae:	61bb      	str	r3, [r7, #24]
    4ab0:	68f8      	ldr	r0, [r7, #12]
    4ab2:	4b23      	ldr	r3, [pc, #140]	; (4b40 <timer_add_timer_task+0xa0>)
    4ab4:	4798      	blx	r3
    4ab6:	6138      	str	r0, [r7, #16]

	if (!head) {
    4ab8:	693b      	ldr	r3, [r7, #16]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d104      	bne.n	4ac8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    4abe:	68b9      	ldr	r1, [r7, #8]
    4ac0:	68f8      	ldr	r0, [r7, #12]
    4ac2:	4b20      	ldr	r3, [pc, #128]	; (4b44 <timer_add_timer_task+0xa4>)
    4ac4:	4798      	blx	r3
		return;
    4ac6:	e037      	b.n	4b38 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4ac8:	693b      	ldr	r3, [r7, #16]
    4aca:	61fb      	str	r3, [r7, #28]
    4acc:	e022      	b.n	4b14 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    4ace:	69fb      	ldr	r3, [r7, #28]
    4ad0:	685a      	ldr	r2, [r3, #4]
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	429a      	cmp	r2, r3
    4ad6:	d808      	bhi.n	4aea <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4ad8:	69fb      	ldr	r3, [r7, #28]
    4ada:	689a      	ldr	r2, [r3, #8]
    4adc:	69fb      	ldr	r3, [r7, #28]
    4ade:	6859      	ldr	r1, [r3, #4]
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	1acb      	subs	r3, r1, r3
    4ae4:	4413      	add	r3, r2
    4ae6:	617b      	str	r3, [r7, #20]
    4ae8:	e009      	b.n	4afe <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4aea:	69fb      	ldr	r3, [r7, #28]
    4aec:	689a      	ldr	r2, [r3, #8]
    4aee:	69fb      	ldr	r3, [r7, #28]
    4af0:	685b      	ldr	r3, [r3, #4]
    4af2:	441a      	add	r2, r3
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	425b      	negs	r3, r3
    4af8:	4413      	add	r3, r2
    4afa:	3301      	adds	r3, #1
    4afc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4afe:	68bb      	ldr	r3, [r7, #8]
    4b00:	689a      	ldr	r2, [r3, #8]
    4b02:	697b      	ldr	r3, [r7, #20]
    4b04:	429a      	cmp	r2, r3
    4b06:	d909      	bls.n	4b1c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4b08:	69fb      	ldr	r3, [r7, #28]
    4b0a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4b0c:	69f8      	ldr	r0, [r7, #28]
    4b0e:	4b0e      	ldr	r3, [pc, #56]	; (4b48 <timer_add_timer_task+0xa8>)
    4b10:	4798      	blx	r3
    4b12:	61f8      	str	r0, [r7, #28]
    4b14:	69fb      	ldr	r3, [r7, #28]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d1d9      	bne.n	4ace <timer_add_timer_task+0x2e>
    4b1a:	e000      	b.n	4b1e <timer_add_timer_task+0x7e>
			break;
    4b1c:	bf00      	nop
	}

	if (it == head) {
    4b1e:	69fa      	ldr	r2, [r7, #28]
    4b20:	693b      	ldr	r3, [r7, #16]
    4b22:	429a      	cmp	r2, r3
    4b24:	d104      	bne.n	4b30 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4b26:	68b9      	ldr	r1, [r7, #8]
    4b28:	68f8      	ldr	r0, [r7, #12]
    4b2a:	4b06      	ldr	r3, [pc, #24]	; (4b44 <timer_add_timer_task+0xa4>)
    4b2c:	4798      	blx	r3
    4b2e:	e003      	b.n	4b38 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4b30:	68b9      	ldr	r1, [r7, #8]
    4b32:	69b8      	ldr	r0, [r7, #24]
    4b34:	4b05      	ldr	r3, [pc, #20]	; (4b4c <timer_add_timer_task+0xac>)
    4b36:	4798      	blx	r3
	}
}
    4b38:	3720      	adds	r7, #32
    4b3a:	46bd      	mov	sp, r7
    4b3c:	bd80      	pop	{r7, pc}
    4b3e:	bf00      	nop
    4b40:	00004725 	.word	0x00004725
    4b44:	000055c5 	.word	0x000055c5
    4b48:	0000473d 	.word	0x0000473d
    4b4c:	0000561d 	.word	0x0000561d

00004b50 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b086      	sub	sp, #24
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	3b04      	subs	r3, #4
    4b5c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    4b5e:	693b      	ldr	r3, [r7, #16]
    4b60:	3318      	adds	r3, #24
    4b62:	4618      	mov	r0, r3
    4b64:	4b27      	ldr	r3, [pc, #156]	; (4c04 <timer_process_counted+0xb4>)
    4b66:	4798      	blx	r3
    4b68:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4b6a:	693b      	ldr	r3, [r7, #16]
    4b6c:	695b      	ldr	r3, [r3, #20]
    4b6e:	1c5a      	adds	r2, r3, #1
    4b70:	693b      	ldr	r3, [r7, #16]
    4b72:	615a      	str	r2, [r3, #20]
    4b74:	693b      	ldr	r3, [r7, #16]
    4b76:	695b      	ldr	r3, [r3, #20]
    4b78:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4b7a:	693b      	ldr	r3, [r7, #16]
    4b7c:	7f1b      	ldrb	r3, [r3, #28]
    4b7e:	b2db      	uxtb	r3, r3
    4b80:	f003 0301 	and.w	r3, r3, #1
    4b84:	2b00      	cmp	r3, #0
    4b86:	d106      	bne.n	4b96 <timer_process_counted+0x46>
    4b88:	693b      	ldr	r3, [r7, #16]
    4b8a:	7f1b      	ldrb	r3, [r3, #28]
    4b8c:	b2db      	uxtb	r3, r3
    4b8e:	f003 0302 	and.w	r3, r3, #2
    4b92:	2b00      	cmp	r3, #0
    4b94:	d027      	beq.n	4be6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4b96:	693b      	ldr	r3, [r7, #16]
    4b98:	7f1b      	ldrb	r3, [r3, #28]
    4b9a:	b2db      	uxtb	r3, r3
    4b9c:	f043 0302 	orr.w	r3, r3, #2
    4ba0:	b2da      	uxtb	r2, r3
    4ba2:	693b      	ldr	r3, [r7, #16]
    4ba4:	771a      	strb	r2, [r3, #28]
		return;
    4ba6:	e029      	b.n	4bfc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4ba8:	697b      	ldr	r3, [r7, #20]
    4baa:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    4bac:	693b      	ldr	r3, [r7, #16]
    4bae:	3318      	adds	r3, #24
    4bb0:	4618      	mov	r0, r3
    4bb2:	4b15      	ldr	r3, [pc, #84]	; (4c08 <timer_process_counted+0xb8>)
    4bb4:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4bb6:	68bb      	ldr	r3, [r7, #8]
    4bb8:	7c1b      	ldrb	r3, [r3, #16]
    4bba:	2b01      	cmp	r3, #1
    4bbc:	d109      	bne.n	4bd2 <timer_process_counted+0x82>
			tmp->time_label = time;
    4bbe:	68bb      	ldr	r3, [r7, #8]
    4bc0:	68fa      	ldr	r2, [r7, #12]
    4bc2:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4bc4:	693b      	ldr	r3, [r7, #16]
    4bc6:	3318      	adds	r3, #24
    4bc8:	68fa      	ldr	r2, [r7, #12]
    4bca:	68b9      	ldr	r1, [r7, #8]
    4bcc:	4618      	mov	r0, r3
    4bce:	4b0f      	ldr	r3, [pc, #60]	; (4c0c <timer_process_counted+0xbc>)
    4bd0:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4bd2:	693b      	ldr	r3, [r7, #16]
    4bd4:	3318      	adds	r3, #24
    4bd6:	4618      	mov	r0, r3
    4bd8:	4b0a      	ldr	r3, [pc, #40]	; (4c04 <timer_process_counted+0xb4>)
    4bda:	4798      	blx	r3
    4bdc:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4bde:	68bb      	ldr	r3, [r7, #8]
    4be0:	68db      	ldr	r3, [r3, #12]
    4be2:	68b8      	ldr	r0, [r7, #8]
    4be4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4be6:	697b      	ldr	r3, [r7, #20]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d007      	beq.n	4bfc <timer_process_counted+0xac>
    4bec:	697b      	ldr	r3, [r7, #20]
    4bee:	685b      	ldr	r3, [r3, #4]
    4bf0:	68fa      	ldr	r2, [r7, #12]
    4bf2:	1ad2      	subs	r2, r2, r3
    4bf4:	697b      	ldr	r3, [r7, #20]
    4bf6:	689b      	ldr	r3, [r3, #8]
    4bf8:	429a      	cmp	r2, r3
    4bfa:	d2d5      	bcs.n	4ba8 <timer_process_counted+0x58>
	}
}
    4bfc:	3718      	adds	r7, #24
    4bfe:	46bd      	mov	sp, r7
    4c00:	bd80      	pop	{r7, pc}
    4c02:	bf00      	nop
    4c04:	00004725 	.word	0x00004725
    4c08:	000056bd 	.word	0x000056bd
    4c0c:	00004aa1 	.word	0x00004aa1

00004c10 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4c10:	b480      	push	{r7}
    4c12:	b085      	sub	sp, #20
    4c14:	af00      	add	r7, sp, #0
    4c16:	4603      	mov	r3, r0
    4c18:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4c1a:	2300      	movs	r3, #0
    4c1c:	73fb      	strb	r3, [r7, #15]
    4c1e:	e029      	b.n	4c74 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c24:	4a19      	ldr	r2, [pc, #100]	; (4c8c <_usb_d_find_ep+0x7c>)
    4c26:	015b      	lsls	r3, r3, #5
    4c28:	4413      	add	r3, r2
    4c2a:	3301      	adds	r3, #1
    4c2c:	781b      	ldrb	r3, [r3, #0]
    4c2e:	79fa      	ldrb	r2, [r7, #7]
    4c30:	429a      	cmp	r2, r3
    4c32:	d102      	bne.n	4c3a <_usb_d_find_ep+0x2a>
			return i;
    4c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c38:	e022      	b.n	4c80 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c3e:	4a13      	ldr	r2, [pc, #76]	; (4c8c <_usb_d_find_ep+0x7c>)
    4c40:	015b      	lsls	r3, r3, #5
    4c42:	4413      	add	r3, r2
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d10e      	bne.n	4c68 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4c4a:	79fb      	ldrb	r3, [r7, #7]
    4c4c:	f003 030f 	and.w	r3, r3, #15
    4c50:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4c54:	490d      	ldr	r1, [pc, #52]	; (4c8c <_usb_d_find_ep+0x7c>)
    4c56:	0152      	lsls	r2, r2, #5
    4c58:	440a      	add	r2, r1
    4c5a:	3201      	adds	r2, #1
    4c5c:	7812      	ldrb	r2, [r2, #0]
    4c5e:	4293      	cmp	r3, r2
    4c60:	d102      	bne.n	4c68 <_usb_d_find_ep+0x58>
			return i;
    4c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c66:	e00b      	b.n	4c80 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c6c:	b2db      	uxtb	r3, r3
    4c6e:	3301      	adds	r3, #1
    4c70:	b2db      	uxtb	r3, r3
    4c72:	73fb      	strb	r3, [r7, #15]
    4c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c78:	2b03      	cmp	r3, #3
    4c7a:	ddd1      	ble.n	4c20 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    4c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4c80:	4618      	mov	r0, r3
    4c82:	3714      	adds	r7, #20
    4c84:	46bd      	mov	sp, r7
    4c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c8a:	4770      	bx	lr
    4c8c:	20000f14 	.word	0x20000f14

00004c90 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    4c90:	b580      	push	{r7, lr}
    4c92:	b088      	sub	sp, #32
    4c94:	af00      	add	r7, sp, #0
    4c96:	60ba      	str	r2, [r7, #8]
    4c98:	607b      	str	r3, [r7, #4]
    4c9a:	4603      	mov	r3, r0
    4c9c:	73fb      	strb	r3, [r7, #15]
    4c9e:	460b      	mov	r3, r1
    4ca0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    4ca2:	68bb      	ldr	r3, [r7, #8]
    4ca4:	617b      	str	r3, [r7, #20]
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	61bb      	str	r3, [r7, #24]
    4caa:	7bbb      	ldrb	r3, [r7, #14]
    4cac:	2b00      	cmp	r3, #0
    4cae:	d004      	beq.n	4cba <_usb_d_trans+0x2a>
    4cb0:	7bfb      	ldrb	r3, [r7, #15]
    4cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4cb6:	b2db      	uxtb	r3, r3
    4cb8:	e003      	b.n	4cc2 <_usb_d_trans+0x32>
    4cba:	7bfb      	ldrb	r3, [r7, #15]
    4cbc:	f003 030f 	and.w	r3, r3, #15
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	773b      	strb	r3, [r7, #28]
    4cc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4cc8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    4cca:	f107 0314 	add.w	r3, r7, #20
    4cce:	4618      	mov	r0, r3
    4cd0:	4b03      	ldr	r3, [pc, #12]	; (4ce0 <_usb_d_trans+0x50>)
    4cd2:	4798      	blx	r3
    4cd4:	4603      	mov	r3, r0
}
    4cd6:	4618      	mov	r0, r3
    4cd8:	3720      	adds	r7, #32
    4cda:	46bd      	mov	sp, r7
    4cdc:	bd80      	pop	{r7, pc}
    4cde:	bf00      	nop
    4ce0:	0000cd85 	.word	0x0000cd85

00004ce4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4ce4:	b480      	push	{r7}
    4ce6:	b085      	sub	sp, #20
    4ce8:	af00      	add	r7, sp, #0
    4cea:	60f8      	str	r0, [r7, #12]
    4cec:	60b9      	str	r1, [r7, #8]
    4cee:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4cf0:	2300      	movs	r3, #0
}
    4cf2:	4618      	mov	r0, r3
    4cf4:	3714      	adds	r7, #20
    4cf6:	46bd      	mov	sp, r7
    4cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfc:	4770      	bx	lr
	...

00004d00 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b086      	sub	sp, #24
    4d04:	af00      	add	r7, sp, #0
    4d06:	4603      	mov	r3, r0
    4d08:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d0a:	79fb      	ldrb	r3, [r7, #7]
    4d0c:	4618      	mov	r0, r3
    4d0e:	4b2a      	ldr	r3, [pc, #168]	; (4db8 <usb_d_cb_trans_setup+0xb8>)
    4d10:	4798      	blx	r3
    4d12:	4603      	mov	r3, r0
    4d14:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4d1a:	015b      	lsls	r3, r3, #5
    4d1c:	4a27      	ldr	r2, [pc, #156]	; (4dbc <usb_d_cb_trans_setup+0xbc>)
    4d1e:	4413      	add	r3, r2
    4d20:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    4d22:	693b      	ldr	r3, [r7, #16]
    4d24:	330c      	adds	r3, #12
    4d26:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4d28:	79fb      	ldrb	r3, [r7, #7]
    4d2a:	68f9      	ldr	r1, [r7, #12]
    4d2c:	4618      	mov	r0, r3
    4d2e:	4b24      	ldr	r3, [pc, #144]	; (4dc0 <usb_d_cb_trans_setup+0xc0>)
    4d30:	4798      	blx	r3
    4d32:	4603      	mov	r3, r0
    4d34:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4d36:	7afb      	ldrb	r3, [r7, #11]
    4d38:	2b08      	cmp	r3, #8
    4d3a:	d00d      	beq.n	4d58 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4d3c:	79fb      	ldrb	r3, [r7, #7]
    4d3e:	2101      	movs	r1, #1
    4d40:	4618      	mov	r0, r3
    4d42:	4b20      	ldr	r3, [pc, #128]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4d44:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4d46:	79fb      	ldrb	r3, [r7, #7]
    4d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d4c:	b2db      	uxtb	r3, r3
    4d4e:	2101      	movs	r1, #1
    4d50:	4618      	mov	r0, r3
    4d52:	4b1c      	ldr	r3, [pc, #112]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4d54:	4798      	blx	r3
		return;
    4d56:	e02b      	b.n	4db0 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4d58:	79fb      	ldrb	r3, [r7, #7]
    4d5a:	2100      	movs	r1, #0
    4d5c:	4618      	mov	r0, r3
    4d5e:	4b19      	ldr	r3, [pc, #100]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4d60:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4d62:	79fb      	ldrb	r3, [r7, #7]
    4d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d68:	b2db      	uxtb	r3, r3
    4d6a:	2100      	movs	r1, #0
    4d6c:	4618      	mov	r0, r3
    4d6e:	4b15      	ldr	r3, [pc, #84]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4d70:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4d72:	693b      	ldr	r3, [r7, #16]
    4d74:	2201      	movs	r2, #1
    4d76:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4d78:	693b      	ldr	r3, [r7, #16]
    4d7a:	695b      	ldr	r3, [r3, #20]
    4d7c:	79fa      	ldrb	r2, [r7, #7]
    4d7e:	68f9      	ldr	r1, [r7, #12]
    4d80:	4610      	mov	r0, r2
    4d82:	4798      	blx	r3
    4d84:	4603      	mov	r3, r0
    4d86:	f083 0301 	eor.w	r3, r3, #1
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d00f      	beq.n	4db0 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4d90:	693b      	ldr	r3, [r7, #16]
    4d92:	2205      	movs	r2, #5
    4d94:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4d96:	79fb      	ldrb	r3, [r7, #7]
    4d98:	2101      	movs	r1, #1
    4d9a:	4618      	mov	r0, r3
    4d9c:	4b09      	ldr	r3, [pc, #36]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4d9e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4da0:	79fb      	ldrb	r3, [r7, #7]
    4da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4da6:	b2db      	uxtb	r3, r3
    4da8:	2101      	movs	r1, #1
    4daa:	4618      	mov	r0, r3
    4dac:	4b05      	ldr	r3, [pc, #20]	; (4dc4 <usb_d_cb_trans_setup+0xc4>)
    4dae:	4798      	blx	r3
	}
}
    4db0:	3718      	adds	r7, #24
    4db2:	46bd      	mov	sp, r7
    4db4:	bd80      	pop	{r7, pc}
    4db6:	bf00      	nop
    4db8:	00004c11 	.word	0x00004c11
    4dbc:	20000f14 	.word	0x20000f14
    4dc0:	0000ccdd 	.word	0x0000ccdd
    4dc4:	0000cb55 	.word	0x0000cb55

00004dc8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	b084      	sub	sp, #16
    4dcc:	af00      	add	r7, sp, #0
    4dce:	4603      	mov	r3, r0
    4dd0:	6039      	str	r1, [r7, #0]
    4dd2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4dd4:	79fb      	ldrb	r3, [r7, #7]
    4dd6:	4618      	mov	r0, r3
    4dd8:	4b0d      	ldr	r3, [pc, #52]	; (4e10 <usb_d_cb_trans_more+0x48>)
    4dda:	4798      	blx	r3
    4ddc:	4603      	mov	r3, r0
    4dde:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4de4:	015b      	lsls	r3, r3, #5
    4de6:	4a0b      	ldr	r2, [pc, #44]	; (4e14 <usb_d_cb_trans_more+0x4c>)
    4de8:	4413      	add	r3, r2
    4dea:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4dec:	68bb      	ldr	r3, [r7, #8]
    4dee:	789b      	ldrb	r3, [r3, #2]
    4df0:	2b03      	cmp	r3, #3
    4df2:	d107      	bne.n	4e04 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    4df4:	68bb      	ldr	r3, [r7, #8]
    4df6:	699b      	ldr	r3, [r3, #24]
    4df8:	79fa      	ldrb	r2, [r7, #7]
    4dfa:	6839      	ldr	r1, [r7, #0]
    4dfc:	4610      	mov	r0, r2
    4dfe:	4798      	blx	r3
    4e00:	4603      	mov	r3, r0
    4e02:	e000      	b.n	4e06 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    4e04:	2300      	movs	r3, #0
}
    4e06:	4618      	mov	r0, r3
    4e08:	3710      	adds	r7, #16
    4e0a:	46bd      	mov	sp, r7
    4e0c:	bd80      	pop	{r7, pc}
    4e0e:	bf00      	nop
    4e10:	00004c11 	.word	0x00004c11
    4e14:	20000f14 	.word	0x20000f14

00004e18 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4e18:	b590      	push	{r4, r7, lr}
    4e1a:	b087      	sub	sp, #28
    4e1c:	af02      	add	r7, sp, #8
    4e1e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	789b      	ldrb	r3, [r3, #2]
    4e24:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	7b1b      	ldrb	r3, [r3, #12]
    4e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e2e:	2b00      	cmp	r3, #0
    4e30:	bf14      	ite	ne
    4e32:	2301      	movne	r3, #1
    4e34:	2300      	moveq	r3, #0
    4e36:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4e38:	7bfb      	ldrb	r3, [r7, #15]
    4e3a:	2b03      	cmp	r3, #3
    4e3c:	d13a      	bne.n	4eb4 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	69db      	ldr	r3, [r3, #28]
    4e42:	687a      	ldr	r2, [r7, #4]
    4e44:	7850      	ldrb	r0, [r2, #1]
    4e46:	687a      	ldr	r2, [r7, #4]
    4e48:	320c      	adds	r2, #12
    4e4a:	2101      	movs	r1, #1
    4e4c:	4798      	blx	r3
    4e4e:	4603      	mov	r3, r0
    4e50:	737b      	strb	r3, [r7, #13]
		if (err) {
    4e52:	7b7b      	ldrb	r3, [r7, #13]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d015      	beq.n	4e84 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	2205      	movs	r2, #5
    4e5c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	2202      	movs	r2, #2
    4e62:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4e64:	7bbb      	ldrb	r3, [r7, #14]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d002      	beq.n	4e70 <usb_d_ctrl_trans_done+0x58>
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	785b      	ldrb	r3, [r3, #1]
    4e6e:	e004      	b.n	4e7a <usb_d_ctrl_trans_done+0x62>
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	785b      	ldrb	r3, [r3, #1]
    4e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4e78:	b2db      	uxtb	r3, r3
    4e7a:	2101      	movs	r1, #1
    4e7c:	4618      	mov	r0, r3
    4e7e:	4b15      	ldr	r3, [pc, #84]	; (4ed4 <usb_d_ctrl_trans_done+0xbc>)
    4e80:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    4e82:	e022      	b.n	4eca <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	2204      	movs	r2, #4
    4e88:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	7858      	ldrb	r0, [r3, #1]
    4e8e:	7bbb      	ldrb	r3, [r7, #14]
    4e90:	2b00      	cmp	r3, #0
    4e92:	bf14      	ite	ne
    4e94:	2301      	movne	r3, #1
    4e96:	2300      	moveq	r3, #0
    4e98:	b2db      	uxtb	r3, r3
    4e9a:	f083 0301 	eor.w	r3, r3, #1
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	f003 0301 	and.w	r3, r3, #1
    4ea4:	b2d9      	uxtb	r1, r3
    4ea6:	2301      	movs	r3, #1
    4ea8:	9300      	str	r3, [sp, #0]
    4eaa:	2300      	movs	r3, #0
    4eac:	2200      	movs	r2, #0
    4eae:	4c0a      	ldr	r4, [pc, #40]	; (4ed8 <usb_d_ctrl_trans_done+0xc0>)
    4eb0:	47a0      	blx	r4
}
    4eb2:	e00a      	b.n	4eca <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	69db      	ldr	r3, [r3, #28]
    4eb8:	687a      	ldr	r2, [r7, #4]
    4eba:	7850      	ldrb	r0, [r2, #1]
    4ebc:	687a      	ldr	r2, [r7, #4]
    4ebe:	320c      	adds	r2, #12
    4ec0:	2100      	movs	r1, #0
    4ec2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4ec4:	687b      	ldr	r3, [r7, #4]
    4ec6:	2202      	movs	r2, #2
    4ec8:	709a      	strb	r2, [r3, #2]
}
    4eca:	bf00      	nop
    4ecc:	3714      	adds	r7, #20
    4ece:	46bd      	mov	sp, r7
    4ed0:	bd90      	pop	{r4, r7, pc}
    4ed2:	bf00      	nop
    4ed4:	0000cb55 	.word	0x0000cb55
    4ed8:	00004c91 	.word	0x00004c91

00004edc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4edc:	b580      	push	{r7, lr}
    4ede:	b086      	sub	sp, #24
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	4603      	mov	r3, r0
    4ee4:	60b9      	str	r1, [r7, #8]
    4ee6:	607a      	str	r2, [r7, #4]
    4ee8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4eea:	7bfb      	ldrb	r3, [r7, #15]
    4eec:	4618      	mov	r0, r3
    4eee:	4b2f      	ldr	r3, [pc, #188]	; (4fac <_usb_d_cb_trans_done+0xd0>)
    4ef0:	4798      	blx	r3
    4ef2:	4603      	mov	r3, r0
    4ef4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4efa:	015b      	lsls	r3, r3, #5
    4efc:	4a2c      	ldr	r2, [pc, #176]	; (4fb0 <_usb_d_cb_trans_done+0xd4>)
    4efe:	4413      	add	r3, r2
    4f00:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    4f02:	68bb      	ldr	r3, [r7, #8]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d10e      	bne.n	4f26 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4f08:	693b      	ldr	r3, [r7, #16]
    4f0a:	2200      	movs	r2, #0
    4f0c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4f0e:	693b      	ldr	r3, [r7, #16]
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	2b00      	cmp	r3, #0
    4f14:	d103      	bne.n	4f1e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4f16:	6938      	ldr	r0, [r7, #16]
    4f18:	4b26      	ldr	r3, [pc, #152]	; (4fb4 <_usb_d_cb_trans_done+0xd8>)
    4f1a:	4798      	blx	r3
			return;
    4f1c:	e043      	b.n	4fa6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4f1e:	693b      	ldr	r3, [r7, #16]
    4f20:	2201      	movs	r2, #1
    4f22:	709a      	strb	r2, [r3, #2]
    4f24:	e038      	b.n	4f98 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4f26:	68bb      	ldr	r3, [r7, #8]
    4f28:	2b01      	cmp	r3, #1
    4f2a:	d113      	bne.n	4f54 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4f2c:	693b      	ldr	r3, [r7, #16]
    4f2e:	2202      	movs	r2, #2
    4f30:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4f32:	693b      	ldr	r3, [r7, #16]
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d108      	bne.n	4f4c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4f3a:	693b      	ldr	r3, [r7, #16]
    4f3c:	2202      	movs	r2, #2
    4f3e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4f40:	7bfb      	ldrb	r3, [r7, #15]
    4f42:	2100      	movs	r1, #0
    4f44:	4618      	mov	r0, r3
    4f46:	4b1c      	ldr	r3, [pc, #112]	; (4fb8 <_usb_d_cb_trans_done+0xdc>)
    4f48:	4798      	blx	r3
    4f4a:	e025      	b.n	4f98 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4f4c:	693b      	ldr	r3, [r7, #16]
    4f4e:	2205      	movs	r2, #5
    4f50:	709a      	strb	r2, [r3, #2]
    4f52:	e021      	b.n	4f98 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4f54:	68bb      	ldr	r3, [r7, #8]
    4f56:	2b02      	cmp	r3, #2
    4f58:	d10e      	bne.n	4f78 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4f5a:	693b      	ldr	r3, [r7, #16]
    4f5c:	2204      	movs	r2, #4
    4f5e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4f60:	693b      	ldr	r3, [r7, #16]
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	2b00      	cmp	r3, #0
    4f66:	d103      	bne.n	4f70 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4f68:	693b      	ldr	r3, [r7, #16]
    4f6a:	2202      	movs	r2, #2
    4f6c:	709a      	strb	r2, [r3, #2]
			return;
    4f6e:	e01a      	b.n	4fa6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4f70:	693b      	ldr	r3, [r7, #16]
    4f72:	2201      	movs	r2, #1
    4f74:	709a      	strb	r2, [r3, #2]
    4f76:	e00f      	b.n	4f98 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	2b03      	cmp	r3, #3
    4f7c:	d106      	bne.n	4f8c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4f7e:	693b      	ldr	r3, [r7, #16]
    4f80:	2200      	movs	r2, #0
    4f82:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4f84:	693b      	ldr	r3, [r7, #16]
    4f86:	2205      	movs	r2, #5
    4f88:	70da      	strb	r2, [r3, #3]
    4f8a:	e005      	b.n	4f98 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4f8c:	693b      	ldr	r3, [r7, #16]
    4f8e:	2206      	movs	r2, #6
    4f90:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4f92:	693b      	ldr	r3, [r7, #16]
    4f94:	2206      	movs	r2, #6
    4f96:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4f98:	693b      	ldr	r3, [r7, #16]
    4f9a:	69db      	ldr	r3, [r3, #28]
    4f9c:	693a      	ldr	r2, [r7, #16]
    4f9e:	78d1      	ldrb	r1, [r2, #3]
    4fa0:	687a      	ldr	r2, [r7, #4]
    4fa2:	7bf8      	ldrb	r0, [r7, #15]
    4fa4:	4798      	blx	r3
}
    4fa6:	3718      	adds	r7, #24
    4fa8:	46bd      	mov	sp, r7
    4faa:	bd80      	pop	{r7, pc}
    4fac:	00004c11 	.word	0x00004c11
    4fb0:	20000f14 	.word	0x20000f14
    4fb4:	00004e19 	.word	0x00004e19
    4fb8:	0000cb55 	.word	0x0000cb55

00004fbc <usb_d_init>:

int32_t usb_d_init(void)
{
    4fbc:	b580      	push	{r7, lr}
    4fbe:	b082      	sub	sp, #8
    4fc0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    4fc2:	4b21      	ldr	r3, [pc, #132]	; (5048 <usb_d_init+0x8c>)
    4fc4:	4798      	blx	r3
    4fc6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4fc8:	683b      	ldr	r3, [r7, #0]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	da01      	bge.n	4fd2 <usb_d_init+0x16>
		return rc;
    4fce:	683b      	ldr	r3, [r7, #0]
    4fd0:	e036      	b.n	5040 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4fd2:	2280      	movs	r2, #128	; 0x80
    4fd4:	2100      	movs	r1, #0
    4fd6:	481d      	ldr	r0, [pc, #116]	; (504c <usb_d_init+0x90>)
    4fd8:	4b1d      	ldr	r3, [pc, #116]	; (5050 <usb_d_init+0x94>)
    4fda:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4fdc:	2300      	movs	r3, #0
    4fde:	71fb      	strb	r3, [r7, #7]
    4fe0:	e01e      	b.n	5020 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4fe2:	79fb      	ldrb	r3, [r7, #7]
    4fe4:	4a19      	ldr	r2, [pc, #100]	; (504c <usb_d_init+0x90>)
    4fe6:	015b      	lsls	r3, r3, #5
    4fe8:	4413      	add	r3, r2
    4fea:	3301      	adds	r3, #1
    4fec:	22ff      	movs	r2, #255	; 0xff
    4fee:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4ff0:	79fb      	ldrb	r3, [r7, #7]
    4ff2:	4a16      	ldr	r2, [pc, #88]	; (504c <usb_d_init+0x90>)
    4ff4:	015b      	lsls	r3, r3, #5
    4ff6:	4413      	add	r3, r2
    4ff8:	3314      	adds	r3, #20
    4ffa:	4a16      	ldr	r2, [pc, #88]	; (5054 <usb_d_init+0x98>)
    4ffc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4ffe:	79fb      	ldrb	r3, [r7, #7]
    5000:	4a12      	ldr	r2, [pc, #72]	; (504c <usb_d_init+0x90>)
    5002:	015b      	lsls	r3, r3, #5
    5004:	4413      	add	r3, r2
    5006:	3318      	adds	r3, #24
    5008:	4a12      	ldr	r2, [pc, #72]	; (5054 <usb_d_init+0x98>)
    500a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    500c:	79fb      	ldrb	r3, [r7, #7]
    500e:	4a0f      	ldr	r2, [pc, #60]	; (504c <usb_d_init+0x90>)
    5010:	015b      	lsls	r3, r3, #5
    5012:	4413      	add	r3, r2
    5014:	331c      	adds	r3, #28
    5016:	4a0f      	ldr	r2, [pc, #60]	; (5054 <usb_d_init+0x98>)
    5018:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    501a:	79fb      	ldrb	r3, [r7, #7]
    501c:	3301      	adds	r3, #1
    501e:	71fb      	strb	r3, [r7, #7]
    5020:	79fb      	ldrb	r3, [r7, #7]
    5022:	2b03      	cmp	r3, #3
    5024:	d9dd      	bls.n	4fe2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5026:	490c      	ldr	r1, [pc, #48]	; (5058 <usb_d_init+0x9c>)
    5028:	2000      	movs	r0, #0
    502a:	4b0c      	ldr	r3, [pc, #48]	; (505c <usb_d_init+0xa0>)
    502c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    502e:	490c      	ldr	r1, [pc, #48]	; (5060 <usb_d_init+0xa4>)
    5030:	2001      	movs	r0, #1
    5032:	4b0a      	ldr	r3, [pc, #40]	; (505c <usb_d_init+0xa0>)
    5034:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5036:	490b      	ldr	r1, [pc, #44]	; (5064 <usb_d_init+0xa8>)
    5038:	2002      	movs	r0, #2
    503a:	4b08      	ldr	r3, [pc, #32]	; (505c <usb_d_init+0xa0>)
    503c:	4798      	blx	r3
	return ERR_NONE;
    503e:	2300      	movs	r3, #0
}
    5040:	4618      	mov	r0, r3
    5042:	3708      	adds	r7, #8
    5044:	46bd      	mov	sp, r7
    5046:	bd80      	pop	{r7, pc}
    5048:	0000c39d 	.word	0x0000c39d
    504c:	20000f14 	.word	0x20000f14
    5050:	000192dd 	.word	0x000192dd
    5054:	00004ce5 	.word	0x00004ce5
    5058:	00004d01 	.word	0x00004d01
    505c:	0000cfe5 	.word	0x0000cfe5
    5060:	00004dc9 	.word	0x00004dc9
    5064:	00004edd 	.word	0x00004edd

00005068 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5068:	b580      	push	{r7, lr}
    506a:	b082      	sub	sp, #8
    506c:	af00      	add	r7, sp, #0
    506e:	4603      	mov	r3, r0
    5070:	6039      	str	r1, [r7, #0]
    5072:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5074:	79fb      	ldrb	r3, [r7, #7]
    5076:	6839      	ldr	r1, [r7, #0]
    5078:	4618      	mov	r0, r3
    507a:	4b03      	ldr	r3, [pc, #12]	; (5088 <usb_d_register_callback+0x20>)
    507c:	4798      	blx	r3
}
    507e:	bf00      	nop
    5080:	3708      	adds	r7, #8
    5082:	46bd      	mov	sp, r7
    5084:	bd80      	pop	{r7, pc}
    5086:	bf00      	nop
    5088:	0000cf9d 	.word	0x0000cf9d

0000508c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    508c:	b580      	push	{r7, lr}
    508e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5090:	4b02      	ldr	r3, [pc, #8]	; (509c <usb_d_enable+0x10>)
    5092:	4798      	blx	r3
    5094:	4603      	mov	r3, r0
}
    5096:	4618      	mov	r0, r3
    5098:	bd80      	pop	{r7, pc}
    509a:	bf00      	nop
    509c:	0000c48d 	.word	0x0000c48d

000050a0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    50a0:	b580      	push	{r7, lr}
    50a2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    50a4:	4b01      	ldr	r3, [pc, #4]	; (50ac <usb_d_attach+0xc>)
    50a6:	4798      	blx	r3
}
    50a8:	bf00      	nop
    50aa:	bd80      	pop	{r7, pc}
    50ac:	0000c511 	.word	0x0000c511

000050b0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    50b0:	b580      	push	{r7, lr}
    50b2:	b082      	sub	sp, #8
    50b4:	af00      	add	r7, sp, #0
    50b6:	4603      	mov	r3, r0
    50b8:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    50ba:	79fb      	ldrb	r3, [r7, #7]
    50bc:	4618      	mov	r0, r3
    50be:	4b03      	ldr	r3, [pc, #12]	; (50cc <usb_d_set_address+0x1c>)
    50c0:	4798      	blx	r3
}
    50c2:	bf00      	nop
    50c4:	3708      	adds	r7, #8
    50c6:	46bd      	mov	sp, r7
    50c8:	bd80      	pop	{r7, pc}
    50ca:	bf00      	nop
    50cc:	0000c525 	.word	0x0000c525

000050d0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    50d0:	b580      	push	{r7, lr}
    50d2:	b082      	sub	sp, #8
    50d4:	af00      	add	r7, sp, #0
    50d6:	4603      	mov	r3, r0
    50d8:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    50da:	79fb      	ldrb	r3, [r7, #7]
    50dc:	b29b      	uxth	r3, r3
    50de:	461a      	mov	r2, r3
    50e0:	2100      	movs	r1, #0
    50e2:	2000      	movs	r0, #0
    50e4:	4b03      	ldr	r3, [pc, #12]	; (50f4 <usb_d_ep0_init+0x24>)
    50e6:	4798      	blx	r3
    50e8:	4603      	mov	r3, r0
}
    50ea:	4618      	mov	r0, r3
    50ec:	3708      	adds	r7, #8
    50ee:	46bd      	mov	sp, r7
    50f0:	bd80      	pop	{r7, pc}
    50f2:	bf00      	nop
    50f4:	000050f9 	.word	0x000050f9

000050f8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    50f8:	b580      	push	{r7, lr}
    50fa:	b086      	sub	sp, #24
    50fc:	af00      	add	r7, sp, #0
    50fe:	4603      	mov	r3, r0
    5100:	71fb      	strb	r3, [r7, #7]
    5102:	460b      	mov	r3, r1
    5104:	71bb      	strb	r3, [r7, #6]
    5106:	4613      	mov	r3, r2
    5108:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    510a:	79fb      	ldrb	r3, [r7, #7]
    510c:	4618      	mov	r0, r3
    510e:	4b1e      	ldr	r3, [pc, #120]	; (5188 <usb_d_ep_init+0x90>)
    5110:	4798      	blx	r3
    5112:	4603      	mov	r3, r0
    5114:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5116:	f997 3017 	ldrsb.w	r3, [r7, #23]
    511a:	015b      	lsls	r3, r3, #5
    511c:	4a1b      	ldr	r2, [pc, #108]	; (518c <usb_d_ep_init+0x94>)
    511e:	4413      	add	r3, r2
    5120:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5122:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5126:	2b00      	cmp	r3, #0
    5128:	db02      	blt.n	5130 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    512a:	f06f 0313 	mvn.w	r3, #19
    512e:	e027      	b.n	5180 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5130:	20ff      	movs	r0, #255	; 0xff
    5132:	4b15      	ldr	r3, [pc, #84]	; (5188 <usb_d_ep_init+0x90>)
    5134:	4798      	blx	r3
    5136:	4603      	mov	r3, r0
    5138:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    513a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    513e:	2b00      	cmp	r3, #0
    5140:	da02      	bge.n	5148 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5142:	f06f 0314 	mvn.w	r3, #20
    5146:	e01b      	b.n	5180 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5148:	f997 3017 	ldrsb.w	r3, [r7, #23]
    514c:	015b      	lsls	r3, r3, #5
    514e:	4a0f      	ldr	r2, [pc, #60]	; (518c <usb_d_ep_init+0x94>)
    5150:	4413      	add	r3, r2
    5152:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5154:	88ba      	ldrh	r2, [r7, #4]
    5156:	79b9      	ldrb	r1, [r7, #6]
    5158:	79fb      	ldrb	r3, [r7, #7]
    515a:	4618      	mov	r0, r3
    515c:	4b0c      	ldr	r3, [pc, #48]	; (5190 <usb_d_ep_init+0x98>)
    515e:	4798      	blx	r3
    5160:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	2b00      	cmp	r3, #0
    5166:	da01      	bge.n	516c <usb_d_ep_init+0x74>
		return rc;
    5168:	68fb      	ldr	r3, [r7, #12]
    516a:	e009      	b.n	5180 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    516c:	693b      	ldr	r3, [r7, #16]
    516e:	79fa      	ldrb	r2, [r7, #7]
    5170:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5172:	79bb      	ldrb	r3, [r7, #6]
    5174:	f003 0303 	and.w	r3, r3, #3
    5178:	b2da      	uxtb	r2, r3
    517a:	693b      	ldr	r3, [r7, #16]
    517c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    517e:	2300      	movs	r3, #0
}
    5180:	4618      	mov	r0, r3
    5182:	3718      	adds	r7, #24
    5184:	46bd      	mov	sp, r7
    5186:	bd80      	pop	{r7, pc}
    5188:	00004c11 	.word	0x00004c11
    518c:	20000f14 	.word	0x20000f14
    5190:	0000c5c5 	.word	0x0000c5c5

00005194 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5194:	b580      	push	{r7, lr}
    5196:	b084      	sub	sp, #16
    5198:	af00      	add	r7, sp, #0
    519a:	4603      	mov	r3, r0
    519c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    519e:	79fb      	ldrb	r3, [r7, #7]
    51a0:	4618      	mov	r0, r3
    51a2:	4b0d      	ldr	r3, [pc, #52]	; (51d8 <usb_d_ep_deinit+0x44>)
    51a4:	4798      	blx	r3
    51a6:	4603      	mov	r3, r0
    51a8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    51aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51ae:	015b      	lsls	r3, r3, #5
    51b0:	4a0a      	ldr	r2, [pc, #40]	; (51dc <usb_d_ep_deinit+0x48>)
    51b2:	4413      	add	r3, r2
    51b4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    51b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51ba:	2b00      	cmp	r3, #0
    51bc:	db07      	blt.n	51ce <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    51be:	79fb      	ldrb	r3, [r7, #7]
    51c0:	4618      	mov	r0, r3
    51c2:	4b07      	ldr	r3, [pc, #28]	; (51e0 <usb_d_ep_deinit+0x4c>)
    51c4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    51c6:	68bb      	ldr	r3, [r7, #8]
    51c8:	22ff      	movs	r2, #255	; 0xff
    51ca:	705a      	strb	r2, [r3, #1]
    51cc:	e000      	b.n	51d0 <usb_d_ep_deinit+0x3c>
		return;
    51ce:	bf00      	nop
}
    51d0:	3710      	adds	r7, #16
    51d2:	46bd      	mov	sp, r7
    51d4:	bd80      	pop	{r7, pc}
    51d6:	bf00      	nop
    51d8:	00004c11 	.word	0x00004c11
    51dc:	20000f14 	.word	0x20000f14
    51e0:	0000c6f9 	.word	0x0000c6f9

000051e4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    51e4:	b580      	push	{r7, lr}
    51e6:	b086      	sub	sp, #24
    51e8:	af00      	add	r7, sp, #0
    51ea:	4603      	mov	r3, r0
    51ec:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    51ee:	79fb      	ldrb	r3, [r7, #7]
    51f0:	4618      	mov	r0, r3
    51f2:	4b15      	ldr	r3, [pc, #84]	; (5248 <usb_d_ep_enable+0x64>)
    51f4:	4798      	blx	r3
    51f6:	4603      	mov	r3, r0
    51f8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    51fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    51fe:	015b      	lsls	r3, r3, #5
    5200:	4a12      	ldr	r2, [pc, #72]	; (524c <usb_d_ep_enable+0x68>)
    5202:	4413      	add	r3, r2
    5204:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5206:	f997 3017 	ldrsb.w	r3, [r7, #23]
    520a:	2b00      	cmp	r3, #0
    520c:	da02      	bge.n	5214 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    520e:	f06f 0311 	mvn.w	r3, #17
    5212:	e014      	b.n	523e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	2b00      	cmp	r3, #0
    521a:	d101      	bne.n	5220 <usb_d_ep_enable+0x3c>
    521c:	2202      	movs	r2, #2
    521e:	e000      	b.n	5222 <usb_d_ep_enable+0x3e>
    5220:	2201      	movs	r2, #1
    5222:	693b      	ldr	r3, [r7, #16]
    5224:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5226:	79fb      	ldrb	r3, [r7, #7]
    5228:	4618      	mov	r0, r3
    522a:	4b09      	ldr	r3, [pc, #36]	; (5250 <usb_d_ep_enable+0x6c>)
    522c:	4798      	blx	r3
    522e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5230:	68fb      	ldr	r3, [r7, #12]
    5232:	2b00      	cmp	r3, #0
    5234:	da02      	bge.n	523c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5236:	693b      	ldr	r3, [r7, #16]
    5238:	2200      	movs	r2, #0
    523a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    523c:	68fb      	ldr	r3, [r7, #12]
}
    523e:	4618      	mov	r0, r3
    5240:	3718      	adds	r7, #24
    5242:	46bd      	mov	sp, r7
    5244:	bd80      	pop	{r7, pc}
    5246:	bf00      	nop
    5248:	00004c11 	.word	0x00004c11
    524c:	20000f14 	.word	0x20000f14
    5250:	0000c7dd 	.word	0x0000c7dd

00005254 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5254:	b590      	push	{r4, r7, lr}
    5256:	b08d      	sub	sp, #52	; 0x34
    5258:	af02      	add	r7, sp, #8
    525a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	7a1b      	ldrb	r3, [r3, #8]
    5260:	4618      	mov	r0, r3
    5262:	4b51      	ldr	r3, [pc, #324]	; (53a8 <usb_d_ep_transfer+0x154>)
    5264:	4798      	blx	r3
    5266:	4603      	mov	r3, r0
    5268:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    526a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    526e:	015b      	lsls	r3, r3, #5
    5270:	4a4e      	ldr	r2, [pc, #312]	; (53ac <usb_d_ep_transfer+0x158>)
    5272:	4413      	add	r3, r2
    5274:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	7a1b      	ldrb	r3, [r3, #8]
    527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    527e:	2b00      	cmp	r3, #0
    5280:	bf14      	ite	ne
    5282:	2301      	movne	r3, #1
    5284:	2300      	moveq	r3, #0
    5286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	7a5b      	ldrb	r3, [r3, #9]
    528e:	2b00      	cmp	r3, #0
    5290:	bf14      	ite	ne
    5292:	2301      	movne	r3, #1
    5294:	2300      	moveq	r3, #0
    5296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	685b      	ldr	r3, [r3, #4]
    529e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    52a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    52a4:	2b00      	cmp	r3, #0
    52a6:	da02      	bge.n	52ae <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    52a8:	f06f 0311 	mvn.w	r3, #17
    52ac:	e077      	b.n	539e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    52ae:	f107 0308 	add.w	r3, r7, #8
    52b2:	4618      	mov	r0, r3
    52b4:	4b3e      	ldr	r3, [pc, #248]	; (53b0 <usb_d_ep_transfer+0x15c>)
    52b6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    52b8:	69bb      	ldr	r3, [r7, #24]
    52ba:	789b      	ldrb	r3, [r3, #2]
    52bc:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    52be:	7bfb      	ldrb	r3, [r7, #15]
    52c0:	b2db      	uxtb	r3, r3
    52c2:	2b01      	cmp	r3, #1
    52c4:	d10c      	bne.n	52e0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    52c6:	69bb      	ldr	r3, [r7, #24]
    52c8:	2203      	movs	r2, #3
    52ca:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    52cc:	f107 0308 	add.w	r3, r7, #8
    52d0:	4618      	mov	r0, r3
    52d2:	4b38      	ldr	r3, [pc, #224]	; (53b4 <usb_d_ep_transfer+0x160>)
    52d4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    52d6:	69bb      	ldr	r3, [r7, #24]
    52d8:	781b      	ldrb	r3, [r3, #0]
    52da:	2b00      	cmp	r3, #0
    52dc:	d151      	bne.n	5382 <usb_d_ep_transfer+0x12e>
    52de:	e017      	b.n	5310 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    52e0:	f107 0308 	add.w	r3, r7, #8
    52e4:	4618      	mov	r0, r3
    52e6:	4b33      	ldr	r3, [pc, #204]	; (53b4 <usb_d_ep_transfer+0x160>)
    52e8:	4798      	blx	r3
		switch (state) {
    52ea:	7bfb      	ldrb	r3, [r7, #15]
    52ec:	b2db      	uxtb	r3, r3
    52ee:	2b05      	cmp	r3, #5
    52f0:	d004      	beq.n	52fc <usb_d_ep_transfer+0xa8>
    52f2:	2b06      	cmp	r3, #6
    52f4:	d004      	beq.n	5300 <usb_d_ep_transfer+0xac>
    52f6:	2b00      	cmp	r3, #0
    52f8:	d005      	beq.n	5306 <usb_d_ep_transfer+0xb2>
    52fa:	e007      	b.n	530c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    52fc:	2302      	movs	r3, #2
    52fe:	e04e      	b.n	539e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5300:	f06f 030f 	mvn.w	r3, #15
    5304:	e04b      	b.n	539e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5306:	f06f 0312 	mvn.w	r3, #18
    530a:	e048      	b.n	539e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    530c:	2301      	movs	r3, #1
    530e:	e046      	b.n	539e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5310:	69bb      	ldr	r3, [r7, #24]
    5312:	7c9b      	ldrb	r3, [r3, #18]
    5314:	b29a      	uxth	r2, r3
    5316:	69bb      	ldr	r3, [r7, #24]
    5318:	7cdb      	ldrb	r3, [r3, #19]
    531a:	b29b      	uxth	r3, r3
    531c:	021b      	lsls	r3, r3, #8
    531e:	b29b      	uxth	r3, r3
    5320:	4413      	add	r3, r2
    5322:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    5324:	8afb      	ldrh	r3, [r7, #22]
    5326:	2b00      	cmp	r3, #0
    5328:	d10b      	bne.n	5342 <usb_d_ep_transfer+0xee>
			dir                 = true;
    532a:	2301      	movs	r3, #1
    532c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5330:	2300      	movs	r3, #0
    5332:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    5334:	2301      	movs	r3, #1
    5336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    533a:	69bb      	ldr	r3, [r7, #24]
    533c:	2204      	movs	r2, #4
    533e:	709a      	strb	r2, [r3, #2]
    5340:	e01f      	b.n	5382 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5342:	69bb      	ldr	r3, [r7, #24]
    5344:	7b1b      	ldrb	r3, [r3, #12]
    5346:	f003 0380 	and.w	r3, r3, #128	; 0x80
    534a:	2b00      	cmp	r3, #0
    534c:	bf14      	ite	ne
    534e:	2301      	movne	r3, #1
    5350:	2300      	moveq	r3, #0
    5352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    5356:	8afa      	ldrh	r2, [r7, #22]
    5358:	6a3b      	ldr	r3, [r7, #32]
    535a:	429a      	cmp	r2, r3
    535c:	d201      	bcs.n	5362 <usb_d_ep_transfer+0x10e>
				len = req_len;
    535e:	8afb      	ldrh	r3, [r7, #22]
    5360:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    5362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5366:	2b00      	cmp	r3, #0
    5368:	d008      	beq.n	537c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    536a:	8afa      	ldrh	r2, [r7, #22]
    536c:	6a3b      	ldr	r3, [r7, #32]
    536e:	429a      	cmp	r2, r3
    5370:	bf8c      	ite	hi
    5372:	2301      	movhi	r3, #1
    5374:	2300      	movls	r3, #0
    5376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    537a:	e002      	b.n	5382 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    537c:	2300      	movs	r3, #0
    537e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	7a18      	ldrb	r0, [r3, #8]
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	681a      	ldr	r2, [r3, #0]
    538a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    538e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    5392:	9300      	str	r3, [sp, #0]
    5394:	6a3b      	ldr	r3, [r7, #32]
    5396:	4c08      	ldr	r4, [pc, #32]	; (53b8 <usb_d_ep_transfer+0x164>)
    5398:	47a0      	blx	r4
    539a:	6138      	str	r0, [r7, #16]
	return rc;
    539c:	693b      	ldr	r3, [r7, #16]
}
    539e:	4618      	mov	r0, r3
    53a0:	372c      	adds	r7, #44	; 0x2c
    53a2:	46bd      	mov	sp, r7
    53a4:	bd90      	pop	{r4, r7, pc}
    53a6:	bf00      	nop
    53a8:	00004c11 	.word	0x00004c11
    53ac:	20000f14 	.word	0x20000f14
    53b0:	0000d9d1 	.word	0x0000d9d1
    53b4:	0000d9f7 	.word	0x0000d9f7
    53b8:	00004c91 	.word	0x00004c91

000053bc <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    53bc:	b580      	push	{r7, lr}
    53be:	b084      	sub	sp, #16
    53c0:	af00      	add	r7, sp, #0
    53c2:	4603      	mov	r3, r0
    53c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    53c6:	79fb      	ldrb	r3, [r7, #7]
    53c8:	4618      	mov	r0, r3
    53ca:	4b0e      	ldr	r3, [pc, #56]	; (5404 <usb_d_ep_abort+0x48>)
    53cc:	4798      	blx	r3
    53ce:	4603      	mov	r3, r0
    53d0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    53d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53d6:	015b      	lsls	r3, r3, #5
    53d8:	4a0b      	ldr	r2, [pc, #44]	; (5408 <usb_d_ep_abort+0x4c>)
    53da:	4413      	add	r3, r2
    53dc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    53de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53e2:	2b00      	cmp	r3, #0
    53e4:	db0a      	blt.n	53fc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    53e6:	79fb      	ldrb	r3, [r7, #7]
    53e8:	4618      	mov	r0, r3
    53ea:	4b08      	ldr	r3, [pc, #32]	; (540c <usb_d_ep_abort+0x50>)
    53ec:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    53ee:	68bb      	ldr	r3, [r7, #8]
    53f0:	2201      	movs	r2, #1
    53f2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    53f4:	68bb      	ldr	r3, [r7, #8]
    53f6:	2204      	movs	r2, #4
    53f8:	70da      	strb	r2, [r3, #3]
    53fa:	e000      	b.n	53fe <usb_d_ep_abort+0x42>
		return;
    53fc:	bf00      	nop
}
    53fe:	3710      	adds	r7, #16
    5400:	46bd      	mov	sp, r7
    5402:	bd80      	pop	{r7, pc}
    5404:	00004c11 	.word	0x00004c11
    5408:	20000f14 	.word	0x20000f14
    540c:	0000cf49 	.word	0x0000cf49

00005410 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    5410:	b580      	push	{r7, lr}
    5412:	b086      	sub	sp, #24
    5414:	af00      	add	r7, sp, #0
    5416:	4603      	mov	r3, r0
    5418:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    541a:	79fb      	ldrb	r3, [r7, #7]
    541c:	4618      	mov	r0, r3
    541e:	4b1a      	ldr	r3, [pc, #104]	; (5488 <_usb_d_ep_halt_clr+0x78>)
    5420:	4798      	blx	r3
    5422:	4603      	mov	r3, r0
    5424:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5426:	f997 3017 	ldrsb.w	r3, [r7, #23]
    542a:	015b      	lsls	r3, r3, #5
    542c:	4a17      	ldr	r2, [pc, #92]	; (548c <_usb_d_ep_halt_clr+0x7c>)
    542e:	4413      	add	r3, r2
    5430:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5432:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5436:	2b00      	cmp	r3, #0
    5438:	da02      	bge.n	5440 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    543a:	f06f 0311 	mvn.w	r3, #17
    543e:	e01f      	b.n	5480 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5440:	79fb      	ldrb	r3, [r7, #7]
    5442:	2102      	movs	r1, #2
    5444:	4618      	mov	r0, r3
    5446:	4b12      	ldr	r3, [pc, #72]	; (5490 <_usb_d_ep_halt_clr+0x80>)
    5448:	4798      	blx	r3
    544a:	4603      	mov	r3, r0
    544c:	2b00      	cmp	r3, #0
    544e:	d016      	beq.n	547e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5450:	79fb      	ldrb	r3, [r7, #7]
    5452:	2100      	movs	r1, #0
    5454:	4618      	mov	r0, r3
    5456:	4b0e      	ldr	r3, [pc, #56]	; (5490 <_usb_d_ep_halt_clr+0x80>)
    5458:	4798      	blx	r3
    545a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	2b00      	cmp	r3, #0
    5460:	da01      	bge.n	5466 <_usb_d_ep_halt_clr+0x56>
			return rc;
    5462:	68fb      	ldr	r3, [r7, #12]
    5464:	e00c      	b.n	5480 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5466:	693b      	ldr	r3, [r7, #16]
    5468:	2201      	movs	r2, #1
    546a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    546c:	693b      	ldr	r3, [r7, #16]
    546e:	2203      	movs	r2, #3
    5470:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5472:	693b      	ldr	r3, [r7, #16]
    5474:	69db      	ldr	r3, [r3, #28]
    5476:	79f8      	ldrb	r0, [r7, #7]
    5478:	2200      	movs	r2, #0
    547a:	2103      	movs	r1, #3
    547c:	4798      	blx	r3
	}
	return ERR_NONE;
    547e:	2300      	movs	r3, #0
}
    5480:	4618      	mov	r0, r3
    5482:	3718      	adds	r7, #24
    5484:	46bd      	mov	sp, r7
    5486:	bd80      	pop	{r7, pc}
    5488:	00004c11 	.word	0x00004c11
    548c:	20000f14 	.word	0x20000f14
    5490:	0000cb55 	.word	0x0000cb55

00005494 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5494:	b580      	push	{r7, lr}
    5496:	b082      	sub	sp, #8
    5498:	af00      	add	r7, sp, #0
    549a:	4603      	mov	r3, r0
    549c:	460a      	mov	r2, r1
    549e:	71fb      	strb	r3, [r7, #7]
    54a0:	4613      	mov	r3, r2
    54a2:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    54a4:	79bb      	ldrb	r3, [r7, #6]
    54a6:	2b00      	cmp	r3, #0
    54a8:	d105      	bne.n	54b6 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    54aa:	79fb      	ldrb	r3, [r7, #7]
    54ac:	4618      	mov	r0, r3
    54ae:	4b0c      	ldr	r3, [pc, #48]	; (54e0 <usb_d_ep_halt+0x4c>)
    54b0:	4798      	blx	r3
    54b2:	4603      	mov	r3, r0
    54b4:	e00f      	b.n	54d6 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    54b6:	79bb      	ldrb	r3, [r7, #6]
    54b8:	2b01      	cmp	r3, #1
    54ba:	d106      	bne.n	54ca <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    54bc:	79fb      	ldrb	r3, [r7, #7]
    54be:	2101      	movs	r1, #1
    54c0:	4618      	mov	r0, r3
    54c2:	4b08      	ldr	r3, [pc, #32]	; (54e4 <usb_d_ep_halt+0x50>)
    54c4:	4798      	blx	r3
    54c6:	4603      	mov	r3, r0
    54c8:	e005      	b.n	54d6 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    54ca:	79fb      	ldrb	r3, [r7, #7]
    54cc:	2102      	movs	r1, #2
    54ce:	4618      	mov	r0, r3
    54d0:	4b04      	ldr	r3, [pc, #16]	; (54e4 <usb_d_ep_halt+0x50>)
    54d2:	4798      	blx	r3
    54d4:	4603      	mov	r3, r0
	}
}
    54d6:	4618      	mov	r0, r3
    54d8:	3708      	adds	r7, #8
    54da:	46bd      	mov	sp, r7
    54dc:	bd80      	pop	{r7, pc}
    54de:	bf00      	nop
    54e0:	00005411 	.word	0x00005411
    54e4:	0000cb55 	.word	0x0000cb55

000054e8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    54e8:	b580      	push	{r7, lr}
    54ea:	b086      	sub	sp, #24
    54ec:	af00      	add	r7, sp, #0
    54ee:	4603      	mov	r3, r0
    54f0:	603a      	str	r2, [r7, #0]
    54f2:	71fb      	strb	r3, [r7, #7]
    54f4:	460b      	mov	r3, r1
    54f6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    54f8:	79fb      	ldrb	r3, [r7, #7]
    54fa:	4618      	mov	r0, r3
    54fc:	4b16      	ldr	r3, [pc, #88]	; (5558 <usb_d_ep_register_callback+0x70>)
    54fe:	4798      	blx	r3
    5500:	4603      	mov	r3, r0
    5502:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5504:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5508:	015b      	lsls	r3, r3, #5
    550a:	4a14      	ldr	r2, [pc, #80]	; (555c <usb_d_ep_register_callback+0x74>)
    550c:	4413      	add	r3, r2
    550e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5510:	683b      	ldr	r3, [r7, #0]
    5512:	2b00      	cmp	r3, #0
    5514:	d001      	beq.n	551a <usb_d_ep_register_callback+0x32>
    5516:	683b      	ldr	r3, [r7, #0]
    5518:	e000      	b.n	551c <usb_d_ep_register_callback+0x34>
    551a:	4b11      	ldr	r3, [pc, #68]	; (5560 <usb_d_ep_register_callback+0x78>)
    551c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    551e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5522:	2b00      	cmp	r3, #0
    5524:	db13      	blt.n	554e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    5526:	79bb      	ldrb	r3, [r7, #6]
    5528:	2b01      	cmp	r3, #1
    552a:	d008      	beq.n	553e <usb_d_ep_register_callback+0x56>
    552c:	2b02      	cmp	r3, #2
    552e:	d00a      	beq.n	5546 <usb_d_ep_register_callback+0x5e>
    5530:	2b00      	cmp	r3, #0
    5532:	d000      	beq.n	5536 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5534:	e00c      	b.n	5550 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5536:	693b      	ldr	r3, [r7, #16]
    5538:	68fa      	ldr	r2, [r7, #12]
    553a:	615a      	str	r2, [r3, #20]
		break;
    553c:	e008      	b.n	5550 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    553e:	693b      	ldr	r3, [r7, #16]
    5540:	68fa      	ldr	r2, [r7, #12]
    5542:	619a      	str	r2, [r3, #24]
		break;
    5544:	e004      	b.n	5550 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5546:	693b      	ldr	r3, [r7, #16]
    5548:	68fa      	ldr	r2, [r7, #12]
    554a:	61da      	str	r2, [r3, #28]
		break;
    554c:	e000      	b.n	5550 <usb_d_ep_register_callback+0x68>
		return;
    554e:	bf00      	nop
	}
}
    5550:	3718      	adds	r7, #24
    5552:	46bd      	mov	sp, r7
    5554:	bd80      	pop	{r7, pc}
    5556:	bf00      	nop
    5558:	00004c11 	.word	0x00004c11
    555c:	20000f14 	.word	0x20000f14
    5560:	00004ce5 	.word	0x00004ce5

00005564 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5564:	b480      	push	{r7}
    5566:	b085      	sub	sp, #20
    5568:	af00      	add	r7, sp, #0
    556a:	4603      	mov	r3, r0
    556c:	60b9      	str	r1, [r7, #8]
    556e:	607a      	str	r2, [r7, #4]
    5570:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5572:	7bfb      	ldrb	r3, [r7, #15]
    5574:	f083 0301 	eor.w	r3, r3, #1
    5578:	b2db      	uxtb	r3, r3
    557a:	2b00      	cmp	r3, #0
    557c:	d000      	beq.n	5580 <assert+0x1c>
		__asm("BKPT #0");
    557e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5580:	bf00      	nop
    5582:	3714      	adds	r7, #20
    5584:	46bd      	mov	sp, r7
    5586:	f85d 7b04 	ldr.w	r7, [sp], #4
    558a:	4770      	bx	lr

0000558c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    558c:	b480      	push	{r7}
    558e:	b085      	sub	sp, #20
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
    5594:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	60fb      	str	r3, [r7, #12]
    559c:	e008      	b.n	55b0 <is_list_element+0x24>
		if (it == element) {
    559e:	68fa      	ldr	r2, [r7, #12]
    55a0:	683b      	ldr	r3, [r7, #0]
    55a2:	429a      	cmp	r2, r3
    55a4:	d101      	bne.n	55aa <is_list_element+0x1e>
			return true;
    55a6:	2301      	movs	r3, #1
    55a8:	e006      	b.n	55b8 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    55aa:	68fb      	ldr	r3, [r7, #12]
    55ac:	681b      	ldr	r3, [r3, #0]
    55ae:	60fb      	str	r3, [r7, #12]
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	2b00      	cmp	r3, #0
    55b4:	d1f3      	bne.n	559e <is_list_element+0x12>
		}
	}

	return false;
    55b6:	2300      	movs	r3, #0
}
    55b8:	4618      	mov	r0, r3
    55ba:	3714      	adds	r7, #20
    55bc:	46bd      	mov	sp, r7
    55be:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c2:	4770      	bx	lr

000055c4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    55c4:	b580      	push	{r7, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
    55cc:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    55ce:	6839      	ldr	r1, [r7, #0]
    55d0:	6878      	ldr	r0, [r7, #4]
    55d2:	4b0f      	ldr	r3, [pc, #60]	; (5610 <list_insert_as_head+0x4c>)
    55d4:	4798      	blx	r3
    55d6:	4603      	mov	r3, r0
    55d8:	2b00      	cmp	r3, #0
    55da:	bf14      	ite	ne
    55dc:	2301      	movne	r3, #1
    55de:	2300      	moveq	r3, #0
    55e0:	b2db      	uxtb	r3, r3
    55e2:	f083 0301 	eor.w	r3, r3, #1
    55e6:	b2db      	uxtb	r3, r3
    55e8:	f003 0301 	and.w	r3, r3, #1
    55ec:	b2db      	uxtb	r3, r3
    55ee:	2239      	movs	r2, #57	; 0x39
    55f0:	4908      	ldr	r1, [pc, #32]	; (5614 <list_insert_as_head+0x50>)
    55f2:	4618      	mov	r0, r3
    55f4:	4b08      	ldr	r3, [pc, #32]	; (5618 <list_insert_as_head+0x54>)
    55f6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	681a      	ldr	r2, [r3, #0]
    55fc:	683b      	ldr	r3, [r7, #0]
    55fe:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	683a      	ldr	r2, [r7, #0]
    5604:	601a      	str	r2, [r3, #0]
}
    5606:	bf00      	nop
    5608:	3708      	adds	r7, #8
    560a:	46bd      	mov	sp, r7
    560c:	bd80      	pop	{r7, pc}
    560e:	bf00      	nop
    5610:	0000558d 	.word	0x0000558d
    5614:	000198a4 	.word	0x000198a4
    5618:	00005565 	.word	0x00005565

0000561c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    561c:	b480      	push	{r7}
    561e:	b083      	sub	sp, #12
    5620:	af00      	add	r7, sp, #0
    5622:	6078      	str	r0, [r7, #4]
    5624:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	681a      	ldr	r2, [r3, #0]
    562a:	683b      	ldr	r3, [r7, #0]
    562c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	683a      	ldr	r2, [r7, #0]
    5632:	601a      	str	r2, [r3, #0]
}
    5634:	bf00      	nop
    5636:	370c      	adds	r7, #12
    5638:	46bd      	mov	sp, r7
    563a:	f85d 7b04 	ldr.w	r7, [sp], #4
    563e:	4770      	bx	lr

00005640 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5640:	b580      	push	{r7, lr}
    5642:	b084      	sub	sp, #16
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
    5648:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5650:	6839      	ldr	r1, [r7, #0]
    5652:	6878      	ldr	r0, [r7, #4]
    5654:	4b16      	ldr	r3, [pc, #88]	; (56b0 <list_insert_at_end+0x70>)
    5656:	4798      	blx	r3
    5658:	4603      	mov	r3, r0
    565a:	2b00      	cmp	r3, #0
    565c:	bf14      	ite	ne
    565e:	2301      	movne	r3, #1
    5660:	2300      	moveq	r3, #0
    5662:	b2db      	uxtb	r3, r3
    5664:	f083 0301 	eor.w	r3, r3, #1
    5668:	b2db      	uxtb	r3, r3
    566a:	f003 0301 	and.w	r3, r3, #1
    566e:	b2db      	uxtb	r3, r3
    5670:	224f      	movs	r2, #79	; 0x4f
    5672:	4910      	ldr	r1, [pc, #64]	; (56b4 <list_insert_at_end+0x74>)
    5674:	4618      	mov	r0, r3
    5676:	4b10      	ldr	r3, [pc, #64]	; (56b8 <list_insert_at_end+0x78>)
    5678:	4798      	blx	r3

	if (!list->head) {
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	2b00      	cmp	r3, #0
    5680:	d109      	bne.n	5696 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	683a      	ldr	r2, [r7, #0]
    5686:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    5688:	683b      	ldr	r3, [r7, #0]
    568a:	2200      	movs	r2, #0
    568c:	601a      	str	r2, [r3, #0]
		return;
    568e:	e00c      	b.n	56aa <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	681b      	ldr	r3, [r3, #0]
    5694:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    5696:	68fb      	ldr	r3, [r7, #12]
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	2b00      	cmp	r3, #0
    569c:	d1f8      	bne.n	5690 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	683a      	ldr	r2, [r7, #0]
    56a2:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    56a4:	683b      	ldr	r3, [r7, #0]
    56a6:	2200      	movs	r2, #0
    56a8:	601a      	str	r2, [r3, #0]
}
    56aa:	3710      	adds	r7, #16
    56ac:	46bd      	mov	sp, r7
    56ae:	bd80      	pop	{r7, pc}
    56b0:	0000558d 	.word	0x0000558d
    56b4:	000198a4 	.word	0x000198a4
    56b8:	00005565 	.word	0x00005565

000056bc <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    56bc:	b480      	push	{r7}
    56be:	b085      	sub	sp, #20
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
	if (list->head) {
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	2b00      	cmp	r3, #0
    56ca:	d009      	beq.n	56e0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    56cc:	687b      	ldr	r3, [r7, #4]
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	681a      	ldr	r2, [r3, #0]
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    56dc:	68fb      	ldr	r3, [r7, #12]
    56de:	e000      	b.n	56e2 <list_remove_head+0x26>
	}

	return NULL;
    56e0:	2300      	movs	r3, #0
}
    56e2:	4618      	mov	r0, r3
    56e4:	3714      	adds	r7, #20
    56e6:	46bd      	mov	sp, r7
    56e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ec:	4770      	bx	lr

000056ee <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    56ee:	b480      	push	{r7}
    56f0:	b085      	sub	sp, #20
    56f2:	af00      	add	r7, sp, #0
    56f4:	6078      	str	r0, [r7, #4]
    56f6:	6039      	str	r1, [r7, #0]
	if (!element) {
    56f8:	683b      	ldr	r3, [r7, #0]
    56fa:	2b00      	cmp	r3, #0
    56fc:	d101      	bne.n	5702 <list_delete_element+0x14>
		return false;
    56fe:	2300      	movs	r3, #0
    5700:	e024      	b.n	574c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	681a      	ldr	r2, [r3, #0]
    5706:	683b      	ldr	r3, [r7, #0]
    5708:	429a      	cmp	r2, r3
    570a:	d106      	bne.n	571a <list_delete_element+0x2c>
		list->head = list->head->next;
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	681a      	ldr	r2, [r3, #0]
    5712:	687b      	ldr	r3, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
		return true;
    5716:	2301      	movs	r3, #1
    5718:	e018      	b.n	574c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    5720:	e002      	b.n	5728 <list_delete_element+0x3a>
			it = it->next;
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    5728:	68fb      	ldr	r3, [r7, #12]
    572a:	2b00      	cmp	r3, #0
    572c:	d004      	beq.n	5738 <list_delete_element+0x4a>
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	681a      	ldr	r2, [r3, #0]
    5732:	683b      	ldr	r3, [r7, #0]
    5734:	429a      	cmp	r2, r3
    5736:	d1f4      	bne.n	5722 <list_delete_element+0x34>
		}
		if (it) {
    5738:	68fb      	ldr	r3, [r7, #12]
    573a:	2b00      	cmp	r3, #0
    573c:	d005      	beq.n	574a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	681a      	ldr	r2, [r3, #0]
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	601a      	str	r2, [r3, #0]
			return true;
    5746:	2301      	movs	r3, #1
    5748:	e000      	b.n	574c <list_delete_element+0x5e>
		}
	}

	return false;
    574a:	2300      	movs	r3, #0
}
    574c:	4618      	mov	r0, r3
    574e:	3714      	adds	r7, #20
    5750:	46bd      	mov	sp, r7
    5752:	f85d 7b04 	ldr.w	r7, [sp], #4
    5756:	4770      	bx	lr

00005758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    5758:	b480      	push	{r7}
    575a:	b083      	sub	sp, #12
    575c:	af00      	add	r7, sp, #0
    575e:	4603      	mov	r3, r0
    5760:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5766:	2b00      	cmp	r3, #0
    5768:	db0b      	blt.n	5782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    576a:	4909      	ldr	r1, [pc, #36]	; (5790 <__NVIC_EnableIRQ+0x38>)
    576c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5770:	095b      	lsrs	r3, r3, #5
    5772:	88fa      	ldrh	r2, [r7, #6]
    5774:	f002 021f 	and.w	r2, r2, #31
    5778:	2001      	movs	r0, #1
    577a:	fa00 f202 	lsl.w	r2, r0, r2
    577e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5782:	bf00      	nop
    5784:	370c      	adds	r7, #12
    5786:	46bd      	mov	sp, r7
    5788:	f85d 7b04 	ldr.w	r7, [sp], #4
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	e000e100 	.word	0xe000e100

00005794 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    5794:	b480      	push	{r7}
    5796:	b083      	sub	sp, #12
    5798:	af00      	add	r7, sp, #0
    579a:	4603      	mov	r3, r0
    579c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    579e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57a2:	2b00      	cmp	r3, #0
    57a4:	db10      	blt.n	57c8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57a6:	490b      	ldr	r1, [pc, #44]	; (57d4 <__NVIC_DisableIRQ+0x40>)
    57a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57ac:	095b      	lsrs	r3, r3, #5
    57ae:	88fa      	ldrh	r2, [r7, #6]
    57b0:	f002 021f 	and.w	r2, r2, #31
    57b4:	2001      	movs	r0, #1
    57b6:	fa00 f202 	lsl.w	r2, r0, r2
    57ba:	3320      	adds	r3, #32
    57bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    57c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    57c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    57c8:	bf00      	nop
    57ca:	370c      	adds	r7, #12
    57cc:	46bd      	mov	sp, r7
    57ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d2:	4770      	bx	lr
    57d4:	e000e100 	.word	0xe000e100

000057d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    57d8:	b480      	push	{r7}
    57da:	b083      	sub	sp, #12
    57dc:	af00      	add	r7, sp, #0
    57de:	4603      	mov	r3, r0
    57e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57e6:	2b00      	cmp	r3, #0
    57e8:	db0c      	blt.n	5804 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57ea:	4909      	ldr	r1, [pc, #36]	; (5810 <__NVIC_ClearPendingIRQ+0x38>)
    57ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57f0:	095b      	lsrs	r3, r3, #5
    57f2:	88fa      	ldrh	r2, [r7, #6]
    57f4:	f002 021f 	and.w	r2, r2, #31
    57f8:	2001      	movs	r0, #1
    57fa:	fa00 f202 	lsl.w	r2, r0, r2
    57fe:	3360      	adds	r3, #96	; 0x60
    5800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5804:	bf00      	nop
    5806:	370c      	adds	r7, #12
    5808:	46bd      	mov	sp, r7
    580a:	f85d 7b04 	ldr.w	r7, [sp], #4
    580e:	4770      	bx	lr
    5810:	e000e100 	.word	0xe000e100

00005814 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    5814:	b480      	push	{r7}
    5816:	b083      	sub	sp, #12
    5818:	af00      	add	r7, sp, #0
    581a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    581c:	687b      	ldr	r3, [r7, #4]
    581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5820:	095b      	lsrs	r3, r3, #5
    5822:	f003 0301 	and.w	r3, r3, #1
    5826:	2b00      	cmp	r3, #0
    5828:	bf14      	ite	ne
    582a:	2301      	movne	r3, #1
    582c:	2300      	moveq	r3, #0
    582e:	b2db      	uxtb	r3, r3
}
    5830:	4618      	mov	r0, r3
    5832:	370c      	adds	r7, #12
    5834:	46bd      	mov	sp, r7
    5836:	f85d 7b04 	ldr.w	r7, [sp], #4
    583a:	4770      	bx	lr

0000583c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    583c:	b480      	push	{r7}
    583e:	b083      	sub	sp, #12
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	683a      	ldr	r2, [r7, #0]
    584a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    584c:	bf00      	nop
    584e:	370c      	adds	r7, #12
    5850:	46bd      	mov	sp, r7
    5852:	f85d 7b04 	ldr.w	r7, [sp], #4
    5856:	4770      	bx	lr

00005858 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    5858:	b480      	push	{r7}
    585a:	b083      	sub	sp, #12
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
    5860:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5862:	687b      	ldr	r3, [r7, #4]
    5864:	683a      	ldr	r2, [r7, #0]
    5866:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5868:	bf00      	nop
    586a:	370c      	adds	r7, #12
    586c:	46bd      	mov	sp, r7
    586e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5872:	4770      	bx	lr

00005874 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5874:	b480      	push	{r7}
    5876:	b083      	sub	sp, #12
    5878:	af00      	add	r7, sp, #0
    587a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	699b      	ldr	r3, [r3, #24]
    5880:	f043 0201 	orr.w	r2, r3, #1
    5884:	687b      	ldr	r3, [r7, #4]
    5886:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5888:	bf00      	nop
    588a:	370c      	adds	r7, #12
    588c:	46bd      	mov	sp, r7
    588e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5892:	4770      	bx	lr

00005894 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5894:	b480      	push	{r7}
    5896:	b085      	sub	sp, #20
    5898:	af00      	add	r7, sp, #0
    589a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	699b      	ldr	r3, [r3, #24]
    58a0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    58a2:	68fb      	ldr	r3, [r7, #12]
    58a4:	f003 0301 	and.w	r3, r3, #1
    58a8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    58aa:	68fb      	ldr	r3, [r7, #12]
    58ac:	2b00      	cmp	r3, #0
    58ae:	bf14      	ite	ne
    58b0:	2301      	movne	r3, #1
    58b2:	2300      	moveq	r3, #0
    58b4:	b2db      	uxtb	r3, r3
}
    58b6:	4618      	mov	r0, r3
    58b8:	3714      	adds	r7, #20
    58ba:	46bd      	mov	sp, r7
    58bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c0:	4770      	bx	lr

000058c2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    58c2:	b480      	push	{r7}
    58c4:	b083      	sub	sp, #12
    58c6:	af00      	add	r7, sp, #0
    58c8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    58ca:	687b      	ldr	r3, [r7, #4]
    58cc:	699b      	ldr	r3, [r3, #24]
    58ce:	f023 0201 	bic.w	r2, r3, #1
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    58d6:	bf00      	nop
    58d8:	370c      	adds	r7, #12
    58da:	46bd      	mov	sp, r7
    58dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e0:	4770      	bx	lr

000058e2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    58e2:	b480      	push	{r7}
    58e4:	b083      	sub	sp, #12
    58e6:	af00      	add	r7, sp, #0
    58e8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	699b      	ldr	r3, [r3, #24]
    58ee:	f043 0202 	orr.w	r2, r3, #2
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    58f6:	bf00      	nop
    58f8:	370c      	adds	r7, #12
    58fa:	46bd      	mov	sp, r7
    58fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5900:	4770      	bx	lr

00005902 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    5902:	b480      	push	{r7}
    5904:	b083      	sub	sp, #12
    5906:	af00      	add	r7, sp, #0
    5908:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	699b      	ldr	r3, [r3, #24]
    590e:	f023 0202 	bic.w	r2, r3, #2
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5916:	bf00      	nop
    5918:	370c      	adds	r7, #12
    591a:	46bd      	mov	sp, r7
    591c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5920:	4770      	bx	lr

00005922 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5922:	b480      	push	{r7}
    5924:	b083      	sub	sp, #12
    5926:	af00      	add	r7, sp, #0
    5928:	6078      	str	r0, [r7, #4]
    592a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	699a      	ldr	r2, [r3, #24]
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	431a      	orrs	r2, r3
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5938:	bf00      	nop
    593a:	370c      	adds	r7, #12
    593c:	46bd      	mov	sp, r7
    593e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5942:	4770      	bx	lr

00005944 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5944:	b480      	push	{r7}
    5946:	b083      	sub	sp, #12
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
    594c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	683a      	ldr	r2, [r7, #0]
    5952:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5954:	bf00      	nop
    5956:	370c      	adds	r7, #12
    5958:	46bd      	mov	sp, r7
    595a:	f85d 7b04 	ldr.w	r7, [sp], #4
    595e:	4770      	bx	lr

00005960 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5960:	b480      	push	{r7}
    5962:	b083      	sub	sp, #12
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
    5968:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	683a      	ldr	r2, [r7, #0]
    596e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5970:	bf00      	nop
    5972:	370c      	adds	r7, #12
    5974:	46bd      	mov	sp, r7
    5976:	f85d 7b04 	ldr.w	r7, [sp], #4
    597a:	4770      	bx	lr

0000597c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    597c:	b480      	push	{r7}
    597e:	b083      	sub	sp, #12
    5980:	af00      	add	r7, sp, #0
    5982:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    5988:	4618      	mov	r0, r3
    598a:	370c      	adds	r7, #12
    598c:	46bd      	mov	sp, r7
    598e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5992:	4770      	bx	lr

00005994 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5994:	b480      	push	{r7}
    5996:	b083      	sub	sp, #12
    5998:	af00      	add	r7, sp, #0
    599a:	6078      	str	r0, [r7, #4]
    599c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	683a      	ldr	r2, [r7, #0]
    59a2:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    59a4:	bf00      	nop
    59a6:	370c      	adds	r7, #12
    59a8:	46bd      	mov	sp, r7
    59aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ae:	4770      	bx	lr

000059b0 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    59b0:	b480      	push	{r7}
    59b2:	b083      	sub	sp, #12
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
    59b8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	683a      	ldr	r2, [r7, #0]
    59be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    59c2:	bf00      	nop
    59c4:	370c      	adds	r7, #12
    59c6:	46bd      	mov	sp, r7
    59c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59cc:	4770      	bx	lr

000059ce <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    59ce:	b480      	push	{r7}
    59d0:	b083      	sub	sp, #12
    59d2:	af00      	add	r7, sp, #0
    59d4:	6078      	str	r0, [r7, #4]
    59d6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    59d8:	687b      	ldr	r3, [r7, #4]
    59da:	683a      	ldr	r2, [r7, #0]
    59dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    59e0:	bf00      	nop
    59e2:	370c      	adds	r7, #12
    59e4:	46bd      	mov	sp, r7
    59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ea:	4770      	bx	lr

000059ec <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    59ec:	b480      	push	{r7}
    59ee:	b083      	sub	sp, #12
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
    59f4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	683a      	ldr	r2, [r7, #0]
    59fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    59fe:	bf00      	nop
    5a00:	370c      	adds	r7, #12
    5a02:	46bd      	mov	sp, r7
    5a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a08:	4770      	bx	lr

00005a0a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    5a0a:	b480      	push	{r7}
    5a0c:	b083      	sub	sp, #12
    5a0e:	af00      	add	r7, sp, #0
    5a10:	6078      	str	r0, [r7, #4]
    5a12:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	683a      	ldr	r2, [r7, #0]
    5a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a1c:	bf00      	nop
    5a1e:	370c      	adds	r7, #12
    5a20:	46bd      	mov	sp, r7
    5a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a26:	4770      	bx	lr

00005a28 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	683a      	ldr	r2, [r7, #0]
    5a36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a3a:	bf00      	nop
    5a3c:	370c      	adds	r7, #12
    5a3e:	46bd      	mov	sp, r7
    5a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a44:	4770      	bx	lr

00005a46 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    5a46:	b480      	push	{r7}
    5a48:	b083      	sub	sp, #12
    5a4a:	af00      	add	r7, sp, #0
    5a4c:	6078      	str	r0, [r7, #4]
    5a4e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	683a      	ldr	r2, [r7, #0]
    5a54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a58:	bf00      	nop
    5a5a:	370c      	adds	r7, #12
    5a5c:	46bd      	mov	sp, r7
    5a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a62:	4770      	bx	lr

00005a64 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5a64:	b480      	push	{r7}
    5a66:	b083      	sub	sp, #12
    5a68:	af00      	add	r7, sp, #0
    5a6a:	6078      	str	r0, [r7, #4]
    5a6c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	683a      	ldr	r2, [r7, #0]
    5a72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a76:	bf00      	nop
    5a78:	370c      	adds	r7, #12
    5a7a:	46bd      	mov	sp, r7
    5a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a80:	4770      	bx	lr

00005a82 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5a82:	b480      	push	{r7}
    5a84:	b083      	sub	sp, #12
    5a86:	af00      	add	r7, sp, #0
    5a88:	6078      	str	r0, [r7, #4]
    5a8a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	683a      	ldr	r2, [r7, #0]
    5a90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a94:	bf00      	nop
    5a96:	370c      	adds	r7, #12
    5a98:	46bd      	mov	sp, r7
    5a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a9e:	4770      	bx	lr

00005aa0 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5aa0:	b480      	push	{r7}
    5aa2:	b083      	sub	sp, #12
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
    5aa8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	683a      	ldr	r2, [r7, #0]
    5aae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ab2:	bf00      	nop
    5ab4:	370c      	adds	r7, #12
    5ab6:	46bd      	mov	sp, r7
    5ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5abc:	4770      	bx	lr
	...

00005ac0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b082      	sub	sp, #8
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	6078      	str	r0, [r7, #4]
    5ac8:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	683a      	ldr	r2, [r7, #0]
    5ace:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	4618      	mov	r0, r3
    5ad6:	4b55      	ldr	r3, [pc, #340]	; (5c2c <_can_async_init+0x16c>)
    5ad8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    5ada:	bf00      	nop
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	4618      	mov	r0, r3
    5ae2:	4b53      	ldr	r3, [pc, #332]	; (5c30 <_can_async_init+0x170>)
    5ae4:	4798      	blx	r3
    5ae6:	4603      	mov	r3, r0
    5ae8:	f083 0301 	eor.w	r3, r3, #1
    5aec:	b2db      	uxtb	r3, r3
    5aee:	2b00      	cmp	r3, #0
    5af0:	d1f4      	bne.n	5adc <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	681b      	ldr	r3, [r3, #0]
    5af6:	4618      	mov	r0, r3
    5af8:	4b4e      	ldr	r3, [pc, #312]	; (5c34 <_can_async_init+0x174>)
    5afa:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5afc:	683b      	ldr	r3, [r7, #0]
    5afe:	4a4e      	ldr	r2, [pc, #312]	; (5c38 <_can_async_init+0x178>)
    5b00:	4293      	cmp	r3, r2
    5b02:	d17a      	bne.n	5bfa <_can_async_init+0x13a>
		_can1_dev    = dev;
    5b04:	4a4d      	ldr	r2, [pc, #308]	; (5c3c <_can_async_init+0x17c>)
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	4a4c      	ldr	r2, [pc, #304]	; (5c40 <_can_async_init+0x180>)
    5b0e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	681b      	ldr	r3, [r3, #0]
    5b14:	f44f 7140 	mov.w	r1, #768	; 0x300
    5b18:	4618      	mov	r0, r3
    5b1a:	4b4a      	ldr	r3, [pc, #296]	; (5c44 <_can_async_init+0x184>)
    5b1c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	2102      	movs	r1, #2
    5b24:	4618      	mov	r0, r3
    5b26:	4b48      	ldr	r3, [pc, #288]	; (5c48 <_can_async_init+0x188>)
    5b28:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	4947      	ldr	r1, [pc, #284]	; (5c4c <_can_async_init+0x18c>)
    5b30:	4618      	mov	r0, r3
    5b32:	4b47      	ldr	r3, [pc, #284]	; (5c50 <_can_async_init+0x190>)
    5b34:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	4946      	ldr	r1, [pc, #280]	; (5c54 <_can_async_init+0x194>)
    5b3c:	4618      	mov	r0, r3
    5b3e:	4b46      	ldr	r3, [pc, #280]	; (5c58 <_can_async_init+0x198>)
    5b40:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	681a      	ldr	r2, [r3, #0]
    5b46:	4b45      	ldr	r3, [pc, #276]	; (5c5c <_can_async_init+0x19c>)
    5b48:	b29b      	uxth	r3, r3
    5b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5b52:	4619      	mov	r1, r3
    5b54:	4610      	mov	r0, r2
    5b56:	4b42      	ldr	r3, [pc, #264]	; (5c60 <_can_async_init+0x1a0>)
    5b58:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	2107      	movs	r1, #7
    5b60:	4618      	mov	r0, r3
    5b62:	4b40      	ldr	r3, [pc, #256]	; (5c64 <_can_async_init+0x1a4>)
    5b64:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	2107      	movs	r1, #7
    5b6c:	4618      	mov	r0, r3
    5b6e:	4b3e      	ldr	r3, [pc, #248]	; (5c68 <_can_async_init+0x1a8>)
    5b70:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	681a      	ldr	r2, [r3, #0]
    5b76:	4b3d      	ldr	r3, [pc, #244]	; (5c6c <_can_async_init+0x1ac>)
    5b78:	b29b      	uxth	r3, r3
    5b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5b7e:	4619      	mov	r1, r3
    5b80:	4610      	mov	r0, r2
    5b82:	4b3b      	ldr	r3, [pc, #236]	; (5c70 <_can_async_init+0x1b0>)
    5b84:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	681a      	ldr	r2, [r3, #0]
    5b8a:	4b3a      	ldr	r3, [pc, #232]	; (5c74 <_can_async_init+0x1b4>)
    5b8c:	b29b      	uxth	r3, r3
    5b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5b92:	4619      	mov	r1, r3
    5b94:	4610      	mov	r0, r2
    5b96:	4b38      	ldr	r3, [pc, #224]	; (5c78 <_can_async_init+0x1b8>)
    5b98:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5b9a:	687b      	ldr	r3, [r7, #4]
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	2108      	movs	r1, #8
    5ba0:	4618      	mov	r0, r3
    5ba2:	4b36      	ldr	r3, [pc, #216]	; (5c7c <_can_async_init+0x1bc>)
    5ba4:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	681a      	ldr	r2, [r3, #0]
    5baa:	4b35      	ldr	r3, [pc, #212]	; (5c80 <_can_async_init+0x1c0>)
    5bac:	b29b      	uxth	r3, r3
    5bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    5bb2:	4619      	mov	r1, r3
    5bb4:	4610      	mov	r0, r2
    5bb6:	4b33      	ldr	r3, [pc, #204]	; (5c84 <_can_async_init+0x1c4>)
    5bb8:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	681a      	ldr	r2, [r3, #0]
    5bbe:	4b32      	ldr	r3, [pc, #200]	; (5c88 <_can_async_init+0x1c8>)
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5bc6:	4619      	mov	r1, r3
    5bc8:	4610      	mov	r0, r2
    5bca:	4b30      	ldr	r3, [pc, #192]	; (5c8c <_can_async_init+0x1cc>)
    5bcc:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    5bd6:	4618      	mov	r0, r3
    5bd8:	4b2d      	ldr	r3, [pc, #180]	; (5c90 <_can_async_init+0x1d0>)
    5bda:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5bdc:	204f      	movs	r0, #79	; 0x4f
    5bde:	4b2d      	ldr	r3, [pc, #180]	; (5c94 <_can_async_init+0x1d4>)
    5be0:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    5be2:	204f      	movs	r0, #79	; 0x4f
    5be4:	4b2c      	ldr	r3, [pc, #176]	; (5c98 <_can_async_init+0x1d8>)
    5be6:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5be8:	204f      	movs	r0, #79	; 0x4f
    5bea:	4b2c      	ldr	r3, [pc, #176]	; (5c9c <_can_async_init+0x1dc>)
    5bec:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	2101      	movs	r1, #1
    5bf4:	4618      	mov	r0, r3
    5bf6:	4b2a      	ldr	r3, [pc, #168]	; (5ca0 <_can_async_init+0x1e0>)
    5bf8:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	4618      	mov	r0, r3
    5c00:	4b28      	ldr	r3, [pc, #160]	; (5ca4 <_can_async_init+0x1e4>)
    5c02:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	4618      	mov	r0, r3
    5c0a:	4b27      	ldr	r3, [pc, #156]	; (5ca8 <_can_async_init+0x1e8>)
    5c0c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    5c0e:	bf00      	nop
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	4618      	mov	r0, r3
    5c16:	4b06      	ldr	r3, [pc, #24]	; (5c30 <_can_async_init+0x170>)
    5c18:	4798      	blx	r3
    5c1a:	4603      	mov	r3, r0
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d1f7      	bne.n	5c10 <_can_async_init+0x150>
	};

	return ERR_NONE;
    5c20:	2300      	movs	r3, #0
}
    5c22:	4618      	mov	r0, r3
    5c24:	3708      	adds	r7, #8
    5c26:	46bd      	mov	sp, r7
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	bf00      	nop
    5c2c:	00005875 	.word	0x00005875
    5c30:	00005895 	.word	0x00005895
    5c34:	000058e3 	.word	0x000058e3
    5c38:	42000400 	.word	0x42000400
    5c3c:	20001034 	.word	0x20001034
    5c40:	20000008 	.word	0x20000008
    5c44:	00005923 	.word	0x00005923
    5c48:	0000583d 	.word	0x0000583d
    5c4c:	00010c01 	.word	0x00010c01
    5c50:	00005945 	.word	0x00005945
    5c54:	00010c10 	.word	0x00010c10
    5c58:	00005859 	.word	0x00005859
    5c5c:	200098e4 	.word	0x200098e4
    5c60:	00005a29 	.word	0x00005a29
    5c64:	00005a47 	.word	0x00005a47
    5c68:	00005a83 	.word	0x00005a83
    5c6c:	2000989c 	.word	0x2000989c
    5c70:	00005a65 	.word	0x00005a65
    5c74:	20000f94 	.word	0x20000f94
    5c78:	00005aa1 	.word	0x00005aa1
    5c7c:	000059b1 	.word	0x000059b1
    5c80:	20000fa4 	.word	0x20000fa4
    5c84:	000059cf 	.word	0x000059cf
    5c88:	20001024 	.word	0x20001024
    5c8c:	000059ed 	.word	0x000059ed
    5c90:	00005a0b 	.word	0x00005a0b
    5c94:	00005795 	.word	0x00005795
    5c98:	000057d9 	.word	0x000057d9
    5c9c:	00005759 	.word	0x00005759
    5ca0:	00005995 	.word	0x00005995
    5ca4:	00005903 	.word	0x00005903
    5ca8:	000058c3 	.word	0x000058c3

00005cac <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5cac:	b590      	push	{r4, r7, lr}
    5cae:	b083      	sub	sp, #12
    5cb0:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5cb2:	4b2c      	ldr	r3, [pc, #176]	; (5d64 <CAN1_Handler+0xb8>)
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	4618      	mov	r0, r3
    5cbe:	4b2a      	ldr	r3, [pc, #168]	; (5d68 <CAN1_Handler+0xbc>)
    5cc0:	4798      	blx	r3
    5cc2:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5cc4:	683b      	ldr	r3, [r7, #0]
    5cc6:	f003 0301 	and.w	r3, r3, #1
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d003      	beq.n	5cd6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	689b      	ldr	r3, [r3, #8]
    5cd2:	6878      	ldr	r0, [r7, #4]
    5cd4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5cd6:	683b      	ldr	r3, [r7, #0]
    5cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5cdc:	2b00      	cmp	r3, #0
    5cde:	d003      	beq.n	5ce8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5ce0:	687b      	ldr	r3, [r7, #4]
    5ce2:	685b      	ldr	r3, [r3, #4]
    5ce4:	6878      	ldr	r0, [r7, #4]
    5ce6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5ce8:	683b      	ldr	r3, [r7, #0]
    5cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d004      	beq.n	5cfc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	68db      	ldr	r3, [r3, #12]
    5cf6:	2103      	movs	r1, #3
    5cf8:	6878      	ldr	r0, [r7, #4]
    5cfa:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5cfc:	683b      	ldr	r3, [r7, #0]
    5cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5d02:	2b00      	cmp	r3, #0
    5d04:	d004      	beq.n	5d10 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	68db      	ldr	r3, [r3, #12]
    5d0a:	2100      	movs	r1, #0
    5d0c:	6878      	ldr	r0, [r7, #4]
    5d0e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5d10:	683b      	ldr	r3, [r7, #0]
    5d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5d16:	2b00      	cmp	r3, #0
    5d18:	d00f      	beq.n	5d3a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	68dc      	ldr	r4, [r3, #12]
    5d1e:	687b      	ldr	r3, [r7, #4]
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	4618      	mov	r0, r3
    5d24:	4b11      	ldr	r3, [pc, #68]	; (5d6c <CAN1_Handler+0xc0>)
    5d26:	4798      	blx	r3
    5d28:	4603      	mov	r3, r0
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d001      	beq.n	5d32 <CAN1_Handler+0x86>
    5d2e:	2302      	movs	r3, #2
    5d30:	e000      	b.n	5d34 <CAN1_Handler+0x88>
    5d32:	2301      	movs	r3, #1
    5d34:	4619      	mov	r1, r3
    5d36:	6878      	ldr	r0, [r7, #4]
    5d38:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5d3a:	683b      	ldr	r3, [r7, #0]
    5d3c:	f003 0308 	and.w	r3, r3, #8
    5d40:	2b00      	cmp	r3, #0
    5d42:	d004      	beq.n	5d4e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5d44:	687b      	ldr	r3, [r7, #4]
    5d46:	68db      	ldr	r3, [r3, #12]
    5d48:	2104      	movs	r1, #4
    5d4a:	6878      	ldr	r0, [r7, #4]
    5d4c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5d4e:	687b      	ldr	r3, [r7, #4]
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	6839      	ldr	r1, [r7, #0]
    5d54:	4618      	mov	r0, r3
    5d56:	4b06      	ldr	r3, [pc, #24]	; (5d70 <CAN1_Handler+0xc4>)
    5d58:	4798      	blx	r3
}
    5d5a:	bf00      	nop
    5d5c:	370c      	adds	r7, #12
    5d5e:	46bd      	mov	sp, r7
    5d60:	bd90      	pop	{r4, r7, pc}
    5d62:	bf00      	nop
    5d64:	20001034 	.word	0x20001034
    5d68:	0000597d 	.word	0x0000597d
    5d6c:	00005815 	.word	0x00005815
    5d70:	00005961 	.word	0x00005961

00005d74 <__NVIC_SetPendingIRQ>:
{
    5d74:	b480      	push	{r7}
    5d76:	b083      	sub	sp, #12
    5d78:	af00      	add	r7, sp, #0
    5d7a:	4603      	mov	r3, r0
    5d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d82:	2b00      	cmp	r3, #0
    5d84:	db0c      	blt.n	5da0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d86:	4909      	ldr	r1, [pc, #36]	; (5dac <__NVIC_SetPendingIRQ+0x38>)
    5d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d8c:	095b      	lsrs	r3, r3, #5
    5d8e:	88fa      	ldrh	r2, [r7, #6]
    5d90:	f002 021f 	and.w	r2, r2, #31
    5d94:	2001      	movs	r0, #1
    5d96:	fa00 f202 	lsl.w	r2, r0, r2
    5d9a:	3340      	adds	r3, #64	; 0x40
    5d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5da0:	bf00      	nop
    5da2:	370c      	adds	r7, #12
    5da4:	46bd      	mov	sp, r7
    5da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5daa:	4770      	bx	lr
    5dac:	e000e100 	.word	0xe000e100

00005db0 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b082      	sub	sp, #8
    5db4:	af00      	add	r7, sp, #0
    5db6:	4603      	mov	r3, r0
    5db8:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5dba:	79fb      	ldrb	r3, [r7, #7]
    5dbc:	b21b      	sxth	r3, r3
    5dbe:	4618      	mov	r0, r3
    5dc0:	4b02      	ldr	r3, [pc, #8]	; (5dcc <_irq_set+0x1c>)
    5dc2:	4798      	blx	r3
}
    5dc4:	bf00      	nop
    5dc6:	3708      	adds	r7, #8
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	00005d75 	.word	0x00005d75

00005dd0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5dd0:	b480      	push	{r7}
    5dd2:	b083      	sub	sp, #12
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	4603      	mov	r3, r0
    5dd8:	6039      	str	r1, [r7, #0]
    5dda:	80fb      	strh	r3, [r7, #6]
    5ddc:	4613      	mov	r3, r2
    5dde:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5de0:	797b      	ldrb	r3, [r7, #5]
    5de2:	3b04      	subs	r3, #4
    5de4:	2b05      	cmp	r3, #5
    5de6:	d86b      	bhi.n	5ec0 <_get_cycles_for_us_internal+0xf0>
    5de8:	a201      	add	r2, pc, #4	; (adr r2, 5df0 <_get_cycles_for_us_internal+0x20>)
    5dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dee:	bf00      	nop
    5df0:	00005e9f 	.word	0x00005e9f
    5df4:	00005e7f 	.word	0x00005e7f
    5df8:	00005e61 	.word	0x00005e61
    5dfc:	00005e43 	.word	0x00005e43
    5e00:	00005e25 	.word	0x00005e25
    5e04:	00005e09 	.word	0x00005e09
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5e08:	88fb      	ldrh	r3, [r7, #6]
    5e0a:	683a      	ldr	r2, [r7, #0]
    5e0c:	4935      	ldr	r1, [pc, #212]	; (5ee4 <_get_cycles_for_us_internal+0x114>)
    5e0e:	fba1 1202 	umull	r1, r2, r1, r2
    5e12:	0c92      	lsrs	r2, r2, #18
    5e14:	fb02 f303 	mul.w	r3, r2, r3
    5e18:	3302      	adds	r3, #2
    5e1a:	4a33      	ldr	r2, [pc, #204]	; (5ee8 <_get_cycles_for_us_internal+0x118>)
    5e1c:	fba2 2303 	umull	r2, r3, r2, r3
    5e20:	085b      	lsrs	r3, r3, #1
    5e22:	e059      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5e24:	88fb      	ldrh	r3, [r7, #6]
    5e26:	683a      	ldr	r2, [r7, #0]
    5e28:	0952      	lsrs	r2, r2, #5
    5e2a:	4930      	ldr	r1, [pc, #192]	; (5eec <_get_cycles_for_us_internal+0x11c>)
    5e2c:	fba1 1202 	umull	r1, r2, r1, r2
    5e30:	09d2      	lsrs	r2, r2, #7
    5e32:	fb02 f303 	mul.w	r3, r2, r3
    5e36:	331d      	adds	r3, #29
    5e38:	4a2d      	ldr	r2, [pc, #180]	; (5ef0 <_get_cycles_for_us_internal+0x120>)
    5e3a:	fba2 2303 	umull	r2, r3, r2, r3
    5e3e:	091b      	lsrs	r3, r3, #4
    5e40:	e04a      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5e42:	88fb      	ldrh	r3, [r7, #6]
    5e44:	683a      	ldr	r2, [r7, #0]
    5e46:	492b      	ldr	r1, [pc, #172]	; (5ef4 <_get_cycles_for_us_internal+0x124>)
    5e48:	fba1 1202 	umull	r1, r2, r1, r2
    5e4c:	0b52      	lsrs	r2, r2, #13
    5e4e:	fb02 f303 	mul.w	r3, r2, r3
    5e52:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5e56:	4a28      	ldr	r2, [pc, #160]	; (5ef8 <_get_cycles_for_us_internal+0x128>)
    5e58:	fba2 2303 	umull	r2, r3, r2, r3
    5e5c:	095b      	lsrs	r3, r3, #5
    5e5e:	e03b      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5e60:	88fb      	ldrh	r3, [r7, #6]
    5e62:	683a      	ldr	r2, [r7, #0]
    5e64:	4925      	ldr	r1, [pc, #148]	; (5efc <_get_cycles_for_us_internal+0x12c>)
    5e66:	fba1 1202 	umull	r1, r2, r1, r2
    5e6a:	0992      	lsrs	r2, r2, #6
    5e6c:	fb02 f303 	mul.w	r3, r2, r3
    5e70:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5e74:	4a22      	ldr	r2, [pc, #136]	; (5f00 <_get_cycles_for_us_internal+0x130>)
    5e76:	fba2 2303 	umull	r2, r3, r2, r3
    5e7a:	099b      	lsrs	r3, r3, #6
    5e7c:	e02c      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5e7e:	88fb      	ldrh	r3, [r7, #6]
    5e80:	683a      	ldr	r2, [r7, #0]
    5e82:	4920      	ldr	r1, [pc, #128]	; (5f04 <_get_cycles_for_us_internal+0x134>)
    5e84:	fba1 1202 	umull	r1, r2, r1, r2
    5e88:	0952      	lsrs	r2, r2, #5
    5e8a:	fb02 f303 	mul.w	r3, r2, r3
    5e8e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5e92:	332f      	adds	r3, #47	; 0x2f
    5e94:	4a1c      	ldr	r2, [pc, #112]	; (5f08 <_get_cycles_for_us_internal+0x138>)
    5e96:	fba2 2303 	umull	r2, r3, r2, r3
    5e9a:	0b5b      	lsrs	r3, r3, #13
    5e9c:	e01c      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5e9e:	88fb      	ldrh	r3, [r7, #6]
    5ea0:	683a      	ldr	r2, [r7, #0]
    5ea2:	491a      	ldr	r1, [pc, #104]	; (5f0c <_get_cycles_for_us_internal+0x13c>)
    5ea4:	fba1 1202 	umull	r1, r2, r1, r2
    5ea8:	08d2      	lsrs	r2, r2, #3
    5eaa:	fb02 f303 	mul.w	r3, r2, r3
    5eae:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5eb2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5eb6:	4a16      	ldr	r2, [pc, #88]	; (5f10 <_get_cycles_for_us_internal+0x140>)
    5eb8:	fba2 2303 	umull	r2, r3, r2, r3
    5ebc:	0c5b      	lsrs	r3, r3, #17
    5ebe:	e00b      	b.n	5ed8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5ec0:	88fb      	ldrh	r3, [r7, #6]
    5ec2:	683a      	ldr	r2, [r7, #0]
    5ec4:	fb02 f303 	mul.w	r3, r2, r3
    5ec8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5ecc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5ed0:	4a10      	ldr	r2, [pc, #64]	; (5f14 <_get_cycles_for_us_internal+0x144>)
    5ed2:	fba2 2303 	umull	r2, r3, r2, r3
    5ed6:	0c9b      	lsrs	r3, r3, #18
	}
}
    5ed8:	4618      	mov	r0, r3
    5eda:	370c      	adds	r7, #12
    5edc:	46bd      	mov	sp, r7
    5ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee2:	4770      	bx	lr
    5ee4:	431bde83 	.word	0x431bde83
    5ee8:	aaaaaaab 	.word	0xaaaaaaab
    5eec:	0a7c5ac5 	.word	0x0a7c5ac5
    5ef0:	88888889 	.word	0x88888889
    5ef4:	d1b71759 	.word	0xd1b71759
    5ef8:	1b4e81b5 	.word	0x1b4e81b5
    5efc:	10624dd3 	.word	0x10624dd3
    5f00:	057619f1 	.word	0x057619f1
    5f04:	51eb851f 	.word	0x51eb851f
    5f08:	45e7b273 	.word	0x45e7b273
    5f0c:	cccccccd 	.word	0xcccccccd
    5f10:	6fd91d85 	.word	0x6fd91d85
    5f14:	165e9f81 	.word	0x165e9f81

00005f18 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5f18:	b580      	push	{r7, lr}
    5f1a:	b082      	sub	sp, #8
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	4603      	mov	r3, r0
    5f20:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5f22:	88fb      	ldrh	r3, [r7, #6]
    5f24:	2209      	movs	r2, #9
    5f26:	4904      	ldr	r1, [pc, #16]	; (5f38 <_get_cycles_for_us+0x20>)
    5f28:	4618      	mov	r0, r3
    5f2a:	4b04      	ldr	r3, [pc, #16]	; (5f3c <_get_cycles_for_us+0x24>)
    5f2c:	4798      	blx	r3
    5f2e:	4603      	mov	r3, r0
}
    5f30:	4618      	mov	r0, r3
    5f32:	3708      	adds	r7, #8
    5f34:	46bd      	mov	sp, r7
    5f36:	bd80      	pop	{r7, pc}
    5f38:	07270e00 	.word	0x07270e00
    5f3c:	00005dd1 	.word	0x00005dd1

00005f40 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5f40:	b480      	push	{r7}
    5f42:	b083      	sub	sp, #12
    5f44:	af00      	add	r7, sp, #0
    5f46:	4603      	mov	r3, r0
    5f48:	6039      	str	r1, [r7, #0]
    5f4a:	80fb      	strh	r3, [r7, #6]
    5f4c:	4613      	mov	r3, r2
    5f4e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5f50:	797b      	ldrb	r3, [r7, #5]
    5f52:	3b04      	subs	r3, #4
    5f54:	2b05      	cmp	r3, #5
    5f56:	d870      	bhi.n	603a <_get_cycles_for_ms_internal+0xfa>
    5f58:	a201      	add	r2, pc, #4	; (adr r2, 5f60 <_get_cycles_for_ms_internal+0x20>)
    5f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f5e:	bf00      	nop
    5f60:	0000601d 	.word	0x0000601d
    5f64:	00006001 	.word	0x00006001
    5f68:	00005fe5 	.word	0x00005fe5
    5f6c:	00005fc1 	.word	0x00005fc1
    5f70:	00005f9d 	.word	0x00005f9d
    5f74:	00005f79 	.word	0x00005f79
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5f78:	88fb      	ldrh	r3, [r7, #6]
    5f7a:	683a      	ldr	r2, [r7, #0]
    5f7c:	4937      	ldr	r1, [pc, #220]	; (605c <_get_cycles_for_ms_internal+0x11c>)
    5f7e:	fba1 1202 	umull	r1, r2, r1, r2
    5f82:	0c92      	lsrs	r2, r2, #18
    5f84:	fb02 f303 	mul.w	r3, r2, r3
    5f88:	3302      	adds	r3, #2
    5f8a:	4a35      	ldr	r2, [pc, #212]	; (6060 <_get_cycles_for_ms_internal+0x120>)
    5f8c:	fba2 2303 	umull	r2, r3, r2, r3
    5f90:	085b      	lsrs	r3, r3, #1
    5f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f96:	fb02 f303 	mul.w	r3, r2, r3
    5f9a:	e058      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5f9c:	88fb      	ldrh	r3, [r7, #6]
    5f9e:	683a      	ldr	r2, [r7, #0]
    5fa0:	0952      	lsrs	r2, r2, #5
    5fa2:	4930      	ldr	r1, [pc, #192]	; (6064 <_get_cycles_for_ms_internal+0x124>)
    5fa4:	fba1 1202 	umull	r1, r2, r1, r2
    5fa8:	09d2      	lsrs	r2, r2, #7
    5faa:	fb02 f303 	mul.w	r3, r2, r3
    5fae:	3302      	adds	r3, #2
    5fb0:	4a2b      	ldr	r2, [pc, #172]	; (6060 <_get_cycles_for_ms_internal+0x120>)
    5fb2:	fba2 2303 	umull	r2, r3, r2, r3
    5fb6:	085b      	lsrs	r3, r3, #1
    5fb8:	2264      	movs	r2, #100	; 0x64
    5fba:	fb02 f303 	mul.w	r3, r2, r3
    5fbe:	e046      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5fc0:	88fb      	ldrh	r3, [r7, #6]
    5fc2:	683a      	ldr	r2, [r7, #0]
    5fc4:	4928      	ldr	r1, [pc, #160]	; (6068 <_get_cycles_for_ms_internal+0x128>)
    5fc6:	fba1 1202 	umull	r1, r2, r1, r2
    5fca:	0b52      	lsrs	r2, r2, #13
    5fcc:	fb02 f303 	mul.w	r3, r2, r3
    5fd0:	3302      	adds	r3, #2
    5fd2:	4a23      	ldr	r2, [pc, #140]	; (6060 <_get_cycles_for_ms_internal+0x120>)
    5fd4:	fba2 2303 	umull	r2, r3, r2, r3
    5fd8:	085a      	lsrs	r2, r3, #1
    5fda:	4613      	mov	r3, r2
    5fdc:	009b      	lsls	r3, r3, #2
    5fde:	4413      	add	r3, r2
    5fe0:	005b      	lsls	r3, r3, #1
    5fe2:	e034      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5fe4:	88fb      	ldrh	r3, [r7, #6]
    5fe6:	683a      	ldr	r2, [r7, #0]
    5fe8:	4920      	ldr	r1, [pc, #128]	; (606c <_get_cycles_for_ms_internal+0x12c>)
    5fea:	fba1 1202 	umull	r1, r2, r1, r2
    5fee:	0992      	lsrs	r2, r2, #6
    5ff0:	fb02 f303 	mul.w	r3, r2, r3
    5ff4:	3302      	adds	r3, #2
    5ff6:	4a1a      	ldr	r2, [pc, #104]	; (6060 <_get_cycles_for_ms_internal+0x120>)
    5ff8:	fba2 2303 	umull	r2, r3, r2, r3
    5ffc:	085b      	lsrs	r3, r3, #1
    5ffe:	e026      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6000:	88fb      	ldrh	r3, [r7, #6]
    6002:	683a      	ldr	r2, [r7, #0]
    6004:	491a      	ldr	r1, [pc, #104]	; (6070 <_get_cycles_for_ms_internal+0x130>)
    6006:	fba1 1202 	umull	r1, r2, r1, r2
    600a:	0952      	lsrs	r2, r2, #5
    600c:	fb02 f303 	mul.w	r3, r2, r3
    6010:	331d      	adds	r3, #29
    6012:	4a18      	ldr	r2, [pc, #96]	; (6074 <_get_cycles_for_ms_internal+0x134>)
    6014:	fba2 2303 	umull	r2, r3, r2, r3
    6018:	091b      	lsrs	r3, r3, #4
    601a:	e018      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    601c:	88fb      	ldrh	r3, [r7, #6]
    601e:	683a      	ldr	r2, [r7, #0]
    6020:	4915      	ldr	r1, [pc, #84]	; (6078 <_get_cycles_for_ms_internal+0x138>)
    6022:	fba1 1202 	umull	r1, r2, r1, r2
    6026:	08d2      	lsrs	r2, r2, #3
    6028:	fb02 f303 	mul.w	r3, r2, r3
    602c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6030:	4a12      	ldr	r2, [pc, #72]	; (607c <_get_cycles_for_ms_internal+0x13c>)
    6032:	fba2 2303 	umull	r2, r3, r2, r3
    6036:	095b      	lsrs	r3, r3, #5
    6038:	e009      	b.n	604e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    603a:	88fb      	ldrh	r3, [r7, #6]
    603c:	683a      	ldr	r2, [r7, #0]
    603e:	fb02 f303 	mul.w	r3, r2, r3
    6042:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6046:	4a0e      	ldr	r2, [pc, #56]	; (6080 <_get_cycles_for_ms_internal+0x140>)
    6048:	fba2 2303 	umull	r2, r3, r2, r3
    604c:	099b      	lsrs	r3, r3, #6
	}
}
    604e:	4618      	mov	r0, r3
    6050:	370c      	adds	r7, #12
    6052:	46bd      	mov	sp, r7
    6054:	f85d 7b04 	ldr.w	r7, [sp], #4
    6058:	4770      	bx	lr
    605a:	bf00      	nop
    605c:	431bde83 	.word	0x431bde83
    6060:	aaaaaaab 	.word	0xaaaaaaab
    6064:	0a7c5ac5 	.word	0x0a7c5ac5
    6068:	d1b71759 	.word	0xd1b71759
    606c:	10624dd3 	.word	0x10624dd3
    6070:	51eb851f 	.word	0x51eb851f
    6074:	88888889 	.word	0x88888889
    6078:	cccccccd 	.word	0xcccccccd
    607c:	1b4e81b5 	.word	0x1b4e81b5
    6080:	057619f1 	.word	0x057619f1

00006084 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6084:	b580      	push	{r7, lr}
    6086:	b082      	sub	sp, #8
    6088:	af00      	add	r7, sp, #0
    608a:	4603      	mov	r3, r0
    608c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    608e:	88fb      	ldrh	r3, [r7, #6]
    6090:	2209      	movs	r2, #9
    6092:	4904      	ldr	r1, [pc, #16]	; (60a4 <_get_cycles_for_ms+0x20>)
    6094:	4618      	mov	r0, r3
    6096:	4b04      	ldr	r3, [pc, #16]	; (60a8 <_get_cycles_for_ms+0x24>)
    6098:	4798      	blx	r3
    609a:	4603      	mov	r3, r0
}
    609c:	4618      	mov	r0, r3
    609e:	3708      	adds	r7, #8
    60a0:	46bd      	mov	sp, r7
    60a2:	bd80      	pop	{r7, pc}
    60a4:	07270e00 	.word	0x07270e00
    60a8:	00005f41 	.word	0x00005f41
    60ac:	00000000 	.word	0x00000000

000060b0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    60b0:	b480      	push	{r7}
    60b2:	b083      	sub	sp, #12
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
    60b8:	6039      	str	r1, [r7, #0]
    60ba:	bf00      	nop
    60bc:	f3af 8000 	nop.w

000060c0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    60c0:	3901      	subs	r1, #1
    60c2:	d8fd      	bhi.n	60c0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    60c4:	bf00      	nop
    60c6:	370c      	adds	r7, #12
    60c8:	46bd      	mov	sp, r7
    60ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ce:	4770      	bx	lr

000060d0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    60d0:	b480      	push	{r7}
    60d2:	b083      	sub	sp, #12
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
    60d8:	460b      	mov	r3, r1
    60da:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	881b      	ldrh	r3, [r3, #0]
    60e0:	b29a      	uxth	r2, r3
    60e2:	887b      	ldrh	r3, [r7, #2]
    60e4:	021b      	lsls	r3, r3, #8
    60e6:	b29b      	uxth	r3, r3
    60e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    60ec:	b29b      	uxth	r3, r3
    60ee:	4313      	orrs	r3, r2
    60f0:	b29a      	uxth	r2, r3
    60f2:	687b      	ldr	r3, [r7, #4]
    60f4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    60f6:	bf00      	nop
    60f8:	370c      	adds	r7, #12
    60fa:	46bd      	mov	sp, r7
    60fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6100:	4770      	bx	lr

00006102 <hri_port_set_EVCTRL_reg>:
{
    6102:	b480      	push	{r7}
    6104:	b085      	sub	sp, #20
    6106:	af00      	add	r7, sp, #0
    6108:	60f8      	str	r0, [r7, #12]
    610a:	460b      	mov	r3, r1
    610c:	607a      	str	r2, [r7, #4]
    610e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6110:	7afb      	ldrb	r3, [r7, #11]
    6112:	7afa      	ldrb	r2, [r7, #11]
    6114:	68f9      	ldr	r1, [r7, #12]
    6116:	01d2      	lsls	r2, r2, #7
    6118:	440a      	add	r2, r1
    611a:	322c      	adds	r2, #44	; 0x2c
    611c:	6811      	ldr	r1, [r2, #0]
    611e:	687a      	ldr	r2, [r7, #4]
    6120:	430a      	orrs	r2, r1
    6122:	68f9      	ldr	r1, [r7, #12]
    6124:	01db      	lsls	r3, r3, #7
    6126:	440b      	add	r3, r1
    6128:	332c      	adds	r3, #44	; 0x2c
    612a:	601a      	str	r2, [r3, #0]
}
    612c:	bf00      	nop
    612e:	3714      	adds	r7, #20
    6130:	46bd      	mov	sp, r7
    6132:	f85d 7b04 	ldr.w	r7, [sp], #4
    6136:	4770      	bx	lr

00006138 <_port_event_init>:

static inline void _port_event_init()
{
    6138:	b580      	push	{r7, lr}
    613a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    613c:	2200      	movs	r2, #0
    613e:	2100      	movs	r1, #0
    6140:	480a      	ldr	r0, [pc, #40]	; (616c <_port_event_init+0x34>)
    6142:	4b0b      	ldr	r3, [pc, #44]	; (6170 <_port_event_init+0x38>)
    6144:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6146:	2200      	movs	r2, #0
    6148:	2101      	movs	r1, #1
    614a:	4808      	ldr	r0, [pc, #32]	; (616c <_port_event_init+0x34>)
    614c:	4b08      	ldr	r3, [pc, #32]	; (6170 <_port_event_init+0x38>)
    614e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6150:	f64e 72ef 	movw	r2, #61423	; 0xefef
    6154:	2102      	movs	r1, #2
    6156:	4805      	ldr	r0, [pc, #20]	; (616c <_port_event_init+0x34>)
    6158:	4b05      	ldr	r3, [pc, #20]	; (6170 <_port_event_init+0x38>)
    615a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    615c:	2200      	movs	r2, #0
    615e:	2103      	movs	r1, #3
    6160:	4802      	ldr	r0, [pc, #8]	; (616c <_port_event_init+0x34>)
    6162:	4b03      	ldr	r3, [pc, #12]	; (6170 <_port_event_init+0x38>)
    6164:	4798      	blx	r3
}
    6166:	bf00      	nop
    6168:	bd80      	pop	{r7, pc}
    616a:	bf00      	nop
    616c:	41008000 	.word	0x41008000
    6170:	00006103 	.word	0x00006103

00006174 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6174:	b580      	push	{r7, lr}
    6176:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6178:	2104      	movs	r1, #4
    617a:	480b      	ldr	r0, [pc, #44]	; (61a8 <_init_chip+0x34>)
    617c:	4b0b      	ldr	r3, [pc, #44]	; (61ac <_init_chip+0x38>)
    617e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6180:	4b0b      	ldr	r3, [pc, #44]	; (61b0 <_init_chip+0x3c>)
    6182:	4798      	blx	r3
	_oscctrl_init_sources();
    6184:	4b0b      	ldr	r3, [pc, #44]	; (61b4 <_init_chip+0x40>)
    6186:	4798      	blx	r3
	_mclk_init();
    6188:	4b0b      	ldr	r3, [pc, #44]	; (61b8 <_init_chip+0x44>)
    618a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    618c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6190:	4b0a      	ldr	r3, [pc, #40]	; (61bc <_init_chip+0x48>)
    6192:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6194:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <_init_chip+0x4c>)
    6196:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6198:	f640 30df 	movw	r0, #3039	; 0xbdf
    619c:	4b07      	ldr	r3, [pc, #28]	; (61bc <_init_chip+0x48>)
    619e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    61a0:	4b08      	ldr	r3, [pc, #32]	; (61c4 <_init_chip+0x50>)
    61a2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    61a4:	bf00      	nop
    61a6:	bd80      	pop	{r7, pc}
    61a8:	41004000 	.word	0x41004000
    61ac:	000060d1 	.word	0x000060d1
    61b0:	00006edd 	.word	0x00006edd
    61b4:	000073a5 	.word	0x000073a5
    61b8:	00006dfd 	.word	0x00006dfd
    61bc:	00006cbd 	.word	0x00006cbd
    61c0:	000073e5 	.word	0x000073e5
    61c4:	00006139 	.word	0x00006139

000061c8 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    61c8:	b480      	push	{r7}
    61ca:	b083      	sub	sp, #12
    61cc:	af00      	add	r7, sp, #0
    61ce:	6078      	str	r0, [r7, #4]
    61d0:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	683a      	ldr	r2, [r7, #0]
    61d6:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    61d8:	bf00      	nop
    61da:	370c      	adds	r7, #12
    61dc:	46bd      	mov	sp, r7
    61de:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e2:	4770      	bx	lr

000061e4 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    61e4:	b480      	push	{r7}
    61e6:	b085      	sub	sp, #20
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
    61ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	689b      	ldr	r3, [r3, #8]
    61f2:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    61f4:	68fb      	ldr	r3, [r7, #12]
    61f6:	f003 0303 	and.w	r3, r3, #3
    61fa:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    61fc:	683b      	ldr	r3, [r7, #0]
    61fe:	009b      	lsls	r3, r3, #2
    6200:	68fa      	ldr	r2, [r7, #12]
    6202:	4313      	orrs	r3, r2
    6204:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	68fa      	ldr	r2, [r7, #12]
    620a:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    620c:	bf00      	nop
    620e:	3714      	adds	r7, #20
    6210:	46bd      	mov	sp, r7
    6212:	f85d 7b04 	ldr.w	r7, [sp], #4
    6216:	4770      	bx	lr

00006218 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    6218:	b480      	push	{r7}
    621a:	b083      	sub	sp, #12
    621c:	af00      	add	r7, sp, #0
    621e:	6078      	str	r0, [r7, #4]
    6220:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	683a      	ldr	r2, [r7, #0]
    6226:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6228:	bf00      	nop
    622a:	370c      	adds	r7, #12
    622c:	46bd      	mov	sp, r7
    622e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6232:	4770      	bx	lr

00006234 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    6234:	b480      	push	{r7}
    6236:	b083      	sub	sp, #12
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	68db      	ldr	r3, [r3, #12]
}
    6240:	4618      	mov	r0, r3
    6242:	370c      	adds	r7, #12
    6244:	46bd      	mov	sp, r7
    6246:	f85d 7b04 	ldr.w	r7, [sp], #4
    624a:	4770      	bx	lr

0000624c <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    624c:	b480      	push	{r7}
    624e:	b083      	sub	sp, #12
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	785b      	ldrb	r3, [r3, #1]
    6258:	b2db      	uxtb	r3, r3
    625a:	f003 0301 	and.w	r3, r3, #1
    625e:	2b00      	cmp	r3, #0
    6260:	bf14      	ite	ne
    6262:	2301      	movne	r3, #1
    6264:	2300      	moveq	r3, #0
    6266:	b2db      	uxtb	r3, r3
}
    6268:	4618      	mov	r0, r3
    626a:	370c      	adds	r7, #12
    626c:	46bd      	mov	sp, r7
    626e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6272:	4770      	bx	lr

00006274 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    6274:	b480      	push	{r7}
    6276:	b083      	sub	sp, #12
    6278:	af00      	add	r7, sp, #0
    627a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	2201      	movs	r2, #1
    6280:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6282:	bf00      	nop
    6284:	370c      	adds	r7, #12
    6286:	46bd      	mov	sp, r7
    6288:	f85d 7b04 	ldr.w	r7, [sp], #4
    628c:	4770      	bx	lr

0000628e <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    628e:	b480      	push	{r7}
    6290:	b083      	sub	sp, #12
    6292:	af00      	add	r7, sp, #0
    6294:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	785b      	ldrb	r3, [r3, #1]
    629a:	b2db      	uxtb	r3, r3
    629c:	089b      	lsrs	r3, r3, #2
    629e:	f003 0301 	and.w	r3, r3, #1
    62a2:	2b00      	cmp	r3, #0
    62a4:	bf14      	ite	ne
    62a6:	2301      	movne	r3, #1
    62a8:	2300      	moveq	r3, #0
    62aa:	b2db      	uxtb	r3, r3
}
    62ac:	4618      	mov	r0, r3
    62ae:	370c      	adds	r7, #12
    62b0:	46bd      	mov	sp, r7
    62b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b6:	4770      	bx	lr

000062b8 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    62b8:	b480      	push	{r7}
    62ba:	b083      	sub	sp, #12
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	2204      	movs	r2, #4
    62c4:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    62c6:	bf00      	nop
    62c8:	370c      	adds	r7, #12
    62ca:	46bd      	mov	sp, r7
    62cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d0:	4770      	bx	lr

000062d2 <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    62d2:	b480      	push	{r7}
    62d4:	b083      	sub	sp, #12
    62d6:	af00      	add	r7, sp, #0
    62d8:	6078      	str	r0, [r7, #4]
    62da:	460b      	mov	r3, r1
    62dc:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	78fa      	ldrb	r2, [r7, #3]
    62e2:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    62e4:	bf00      	nop
    62e6:	370c      	adds	r7, #12
    62e8:	46bd      	mov	sp, r7
    62ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ee:	4770      	bx	lr

000062f0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    62f0:	b480      	push	{r7}
    62f2:	b083      	sub	sp, #12
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
    62f8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	683a      	ldr	r2, [r7, #0]
    62fe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6300:	2300      	movs	r3, #0
}
    6302:	4618      	mov	r0, r3
    6304:	370c      	adds	r7, #12
    6306:	46bd      	mov	sp, r7
    6308:	f85d 7b04 	ldr.w	r7, [sp], #4
    630c:	4770      	bx	lr

0000630e <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    630e:	b480      	push	{r7}
    6310:	b083      	sub	sp, #12
    6312:	af00      	add	r7, sp, #0
    6314:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    6316:	2300      	movs	r3, #0
}
    6318:	4618      	mov	r0, r3
    631a:	370c      	adds	r7, #12
    631c:	46bd      	mov	sp, r7
    631e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6322:	4770      	bx	lr

00006324 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    6324:	b580      	push	{r7, lr}
    6326:	b086      	sub	sp, #24
    6328:	af00      	add	r7, sp, #0
    632a:	60f8      	str	r0, [r7, #12]
    632c:	60b9      	str	r1, [r7, #8]
    632e:	607a      	str	r2, [r7, #4]
    6330:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    6332:	2300      	movs	r3, #0
    6334:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    6336:	68bb      	ldr	r3, [r7, #8]
    6338:	f003 0303 	and.w	r3, r3, #3
    633c:	2b00      	cmp	r3, #0
    633e:	d002      	beq.n	6346 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    6340:	f06f 030c 	mvn.w	r3, #12
    6344:	e05e      	b.n	6404 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    6346:	f107 0310 	add.w	r3, r7, #16
    634a:	4618      	mov	r0, r3
    634c:	4b2f      	ldr	r3, [pc, #188]	; (640c <_crc_sync_crc32+0xe8>)
    634e:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    6350:	68fb      	ldr	r3, [r7, #12]
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	4618      	mov	r0, r3
    6356:	4b2e      	ldr	r3, [pc, #184]	; (6410 <_crc_sync_crc32+0xec>)
    6358:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    635a:	68fb      	ldr	r3, [r7, #12]
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	68ba      	ldr	r2, [r7, #8]
    6360:	4611      	mov	r1, r2
    6362:	4618      	mov	r0, r3
    6364:	4b2b      	ldr	r3, [pc, #172]	; (6414 <_crc_sync_crc32+0xf0>)
    6366:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    6368:	68fb      	ldr	r3, [r7, #12]
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	6879      	ldr	r1, [r7, #4]
    636e:	4618      	mov	r0, r3
    6370:	4b29      	ldr	r3, [pc, #164]	; (6418 <_crc_sync_crc32+0xf4>)
    6372:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    6374:	68fb      	ldr	r3, [r7, #12]
    6376:	681a      	ldr	r2, [r3, #0]
    6378:	683b      	ldr	r3, [r7, #0]
    637a:	681b      	ldr	r3, [r3, #0]
    637c:	4619      	mov	r1, r3
    637e:	4610      	mov	r0, r2
    6380:	4b26      	ldr	r3, [pc, #152]	; (641c <_crc_sync_crc32+0xf8>)
    6382:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    6384:	68fb      	ldr	r3, [r7, #12]
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	2104      	movs	r1, #4
    638a:	4618      	mov	r0, r3
    638c:	4b24      	ldr	r3, [pc, #144]	; (6420 <_crc_sync_crc32+0xfc>)
    638e:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    6390:	bf00      	nop
    6392:	68fb      	ldr	r3, [r7, #12]
    6394:	681b      	ldr	r3, [r3, #0]
    6396:	4618      	mov	r0, r3
    6398:	4b22      	ldr	r3, [pc, #136]	; (6424 <_crc_sync_crc32+0x100>)
    639a:	4798      	blx	r3
    639c:	4603      	mov	r3, r0
    639e:	f083 0301 	eor.w	r3, r3, #1
    63a2:	b2db      	uxtb	r3, r3
    63a4:	2b00      	cmp	r3, #0
    63a6:	d1f4      	bne.n	6392 <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    63a8:	68fb      	ldr	r3, [r7, #12]
    63aa:	681b      	ldr	r3, [r3, #0]
    63ac:	4618      	mov	r0, r3
    63ae:	4b1e      	ldr	r3, [pc, #120]	; (6428 <_crc_sync_crc32+0x104>)
    63b0:	4798      	blx	r3
    63b2:	4603      	mov	r3, r0
    63b4:	2b00      	cmp	r3, #0
    63b6:	d00d      	beq.n	63d4 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    63b8:	68fb      	ldr	r3, [r7, #12]
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	4618      	mov	r0, r3
    63be:	4b1b      	ldr	r3, [pc, #108]	; (642c <_crc_sync_crc32+0x108>)
    63c0:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    63c2:	68fb      	ldr	r3, [r7, #12]
    63c4:	681b      	ldr	r3, [r3, #0]
    63c6:	4618      	mov	r0, r3
    63c8:	4b19      	ldr	r3, [pc, #100]	; (6430 <_crc_sync_crc32+0x10c>)
    63ca:	4798      	blx	r3
		rc = ERR_IO;
    63cc:	f06f 0305 	mvn.w	r3, #5
    63d0:	617b      	str	r3, [r7, #20]
    63d2:	e007      	b.n	63e4 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    63d4:	68fb      	ldr	r3, [r7, #12]
    63d6:	681b      	ldr	r3, [r3, #0]
    63d8:	4618      	mov	r0, r3
    63da:	4b16      	ldr	r3, [pc, #88]	; (6434 <_crc_sync_crc32+0x110>)
    63dc:	4798      	blx	r3
    63de:	4602      	mov	r2, r0
    63e0:	683b      	ldr	r3, [r7, #0]
    63e2:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    63e4:	68fb      	ldr	r3, [r7, #12]
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	4618      	mov	r0, r3
    63ea:	4b11      	ldr	r3, [pc, #68]	; (6430 <_crc_sync_crc32+0x10c>)
    63ec:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	4618      	mov	r0, r3
    63f4:	4b10      	ldr	r3, [pc, #64]	; (6438 <_crc_sync_crc32+0x114>)
    63f6:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    63f8:	f107 0310 	add.w	r3, r7, #16
    63fc:	4618      	mov	r0, r3
    63fe:	4b0f      	ldr	r3, [pc, #60]	; (643c <_crc_sync_crc32+0x118>)
    6400:	4798      	blx	r3

	return rc;
    6402:	697b      	ldr	r3, [r7, #20]
}
    6404:	4618      	mov	r0, r3
    6406:	3718      	adds	r7, #24
    6408:	46bd      	mov	sp, r7
    640a:	bd80      	pop	{r7, pc}
    640c:	0000d9d1 	.word	0x0000d9d1
    6410:	00007785 	.word	0x00007785
    6414:	000061c9 	.word	0x000061c9
    6418:	000061e5 	.word	0x000061e5
    641c:	00006219 	.word	0x00006219
    6420:	000062d3 	.word	0x000062d3
    6424:	0000624d 	.word	0x0000624d
    6428:	0000628f 	.word	0x0000628f
    642c:	000062b9 	.word	0x000062b9
    6430:	00006275 	.word	0x00006275
    6434:	00006235 	.word	0x00006235
    6438:	000076f9 	.word	0x000076f9
    643c:	0000d9f7 	.word	0x0000d9f7

00006440 <__NVIC_EnableIRQ>:
{
    6440:	b480      	push	{r7}
    6442:	b083      	sub	sp, #12
    6444:	af00      	add	r7, sp, #0
    6446:	4603      	mov	r3, r0
    6448:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    644a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    644e:	2b00      	cmp	r3, #0
    6450:	db0b      	blt.n	646a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6452:	4909      	ldr	r1, [pc, #36]	; (6478 <__NVIC_EnableIRQ+0x38>)
    6454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6458:	095b      	lsrs	r3, r3, #5
    645a:	88fa      	ldrh	r2, [r7, #6]
    645c:	f002 021f 	and.w	r2, r2, #31
    6460:	2001      	movs	r0, #1
    6462:	fa00 f202 	lsl.w	r2, r0, r2
    6466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    646a:	bf00      	nop
    646c:	370c      	adds	r7, #12
    646e:	46bd      	mov	sp, r7
    6470:	f85d 7b04 	ldr.w	r7, [sp], #4
    6474:	4770      	bx	lr
    6476:	bf00      	nop
    6478:	e000e100 	.word	0xe000e100

0000647c <__NVIC_DisableIRQ>:
{
    647c:	b480      	push	{r7}
    647e:	b083      	sub	sp, #12
    6480:	af00      	add	r7, sp, #0
    6482:	4603      	mov	r3, r0
    6484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    648a:	2b00      	cmp	r3, #0
    648c:	db10      	blt.n	64b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    648e:	490b      	ldr	r1, [pc, #44]	; (64bc <__NVIC_DisableIRQ+0x40>)
    6490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6494:	095b      	lsrs	r3, r3, #5
    6496:	88fa      	ldrh	r2, [r7, #6]
    6498:	f002 021f 	and.w	r2, r2, #31
    649c:	2001      	movs	r0, #1
    649e:	fa00 f202 	lsl.w	r2, r0, r2
    64a2:	3320      	adds	r3, #32
    64a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    64a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64ac:	f3bf 8f6f 	isb	sy
}
    64b0:	bf00      	nop
    64b2:	370c      	adds	r7, #12
    64b4:	46bd      	mov	sp, r7
    64b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ba:	4770      	bx	lr
    64bc:	e000e100 	.word	0xe000e100

000064c0 <__NVIC_ClearPendingIRQ>:
{
    64c0:	b480      	push	{r7}
    64c2:	b083      	sub	sp, #12
    64c4:	af00      	add	r7, sp, #0
    64c6:	4603      	mov	r3, r0
    64c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64ce:	2b00      	cmp	r3, #0
    64d0:	db0c      	blt.n	64ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64d2:	4909      	ldr	r1, [pc, #36]	; (64f8 <__NVIC_ClearPendingIRQ+0x38>)
    64d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64d8:	095b      	lsrs	r3, r3, #5
    64da:	88fa      	ldrh	r2, [r7, #6]
    64dc:	f002 021f 	and.w	r2, r2, #31
    64e0:	2001      	movs	r0, #1
    64e2:	fa00 f202 	lsl.w	r2, r0, r2
    64e6:	3360      	adds	r3, #96	; 0x60
    64e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64ec:	bf00      	nop
    64ee:	370c      	adds	r7, #12
    64f0:	46bd      	mov	sp, r7
    64f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64f6:	4770      	bx	lr
    64f8:	e000e100 	.word	0xe000e100

000064fc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    64fc:	b480      	push	{r7}
    64fe:	b083      	sub	sp, #12
    6500:	af00      	add	r7, sp, #0
    6502:	6078      	str	r0, [r7, #4]
    6504:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    6506:	bf00      	nop
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	685a      	ldr	r2, [r3, #4]
    650c:	683b      	ldr	r3, [r7, #0]
    650e:	4013      	ands	r3, r2
    6510:	2b00      	cmp	r3, #0
    6512:	d1f9      	bne.n	6508 <hri_eic_wait_for_sync+0xc>
	};
}
    6514:	bf00      	nop
    6516:	370c      	adds	r7, #12
    6518:	46bd      	mov	sp, r7
    651a:	f85d 7b04 	ldr.w	r7, [sp], #4
    651e:	4770      	bx	lr

00006520 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6520:	b480      	push	{r7}
    6522:	b083      	sub	sp, #12
    6524:	af00      	add	r7, sp, #0
    6526:	6078      	str	r0, [r7, #4]
    6528:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	685a      	ldr	r2, [r3, #4]
    652e:	683b      	ldr	r3, [r7, #0]
    6530:	4013      	ands	r3, r2
    6532:	2b00      	cmp	r3, #0
    6534:	bf14      	ite	ne
    6536:	2301      	movne	r3, #1
    6538:	2300      	moveq	r3, #0
    653a:	b2db      	uxtb	r3, r3
}
    653c:	4618      	mov	r0, r3
    653e:	370c      	adds	r7, #12
    6540:	46bd      	mov	sp, r7
    6542:	f85d 7b04 	ldr.w	r7, [sp], #4
    6546:	4770      	bx	lr

00006548 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6548:	b480      	push	{r7}
    654a:	b083      	sub	sp, #12
    654c:	af00      	add	r7, sp, #0
    654e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6550:	687b      	ldr	r3, [r7, #4]
    6552:	695b      	ldr	r3, [r3, #20]
}
    6554:	4618      	mov	r0, r3
    6556:	370c      	adds	r7, #12
    6558:	46bd      	mov	sp, r7
    655a:	f85d 7b04 	ldr.w	r7, [sp], #4
    655e:	4770      	bx	lr

00006560 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6560:	b480      	push	{r7}
    6562:	b083      	sub	sp, #12
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
    6568:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	683a      	ldr	r2, [r7, #0]
    656e:	615a      	str	r2, [r3, #20]
}
    6570:	bf00      	nop
    6572:	370c      	adds	r7, #12
    6574:	46bd      	mov	sp, r7
    6576:	f85d 7b04 	ldr.w	r7, [sp], #4
    657a:	4770      	bx	lr

0000657c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    657c:	b480      	push	{r7}
    657e:	b083      	sub	sp, #12
    6580:	af00      	add	r7, sp, #0
    6582:	6078      	str	r0, [r7, #4]
    6584:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	683a      	ldr	r2, [r7, #0]
    658a:	611a      	str	r2, [r3, #16]
}
    658c:	bf00      	nop
    658e:	370c      	adds	r7, #12
    6590:	46bd      	mov	sp, r7
    6592:	f85d 7b04 	ldr.w	r7, [sp], #4
    6596:	4770      	bx	lr

00006598 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6598:	b480      	push	{r7}
    659a:	b083      	sub	sp, #12
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
    65a0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	683a      	ldr	r2, [r7, #0]
    65a6:	60da      	str	r2, [r3, #12]
}
    65a8:	bf00      	nop
    65aa:	370c      	adds	r7, #12
    65ac:	46bd      	mov	sp, r7
    65ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b2:	4770      	bx	lr

000065b4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    65b4:	b580      	push	{r7, lr}
    65b6:	b082      	sub	sp, #8
    65b8:	af00      	add	r7, sp, #0
    65ba:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    65bc:	687b      	ldr	r3, [r7, #4]
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	b2db      	uxtb	r3, r3
    65c2:	f043 0302 	orr.w	r3, r3, #2
    65c6:	b2da      	uxtb	r2, r3
    65c8:	687b      	ldr	r3, [r7, #4]
    65ca:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    65cc:	2103      	movs	r1, #3
    65ce:	6878      	ldr	r0, [r7, #4]
    65d0:	4b02      	ldr	r3, [pc, #8]	; (65dc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    65d2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    65d4:	bf00      	nop
    65d6:	3708      	adds	r7, #8
    65d8:	46bd      	mov	sp, r7
    65da:	bd80      	pop	{r7, pc}
    65dc:	000064fd 	.word	0x000064fd

000065e0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    65e0:	b580      	push	{r7, lr}
    65e2:	b082      	sub	sp, #8
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	b2db      	uxtb	r3, r3
    65ee:	f023 0302 	bic.w	r3, r3, #2
    65f2:	b2da      	uxtb	r2, r3
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    65f8:	2103      	movs	r1, #3
    65fa:	6878      	ldr	r0, [r7, #4]
    65fc:	4b02      	ldr	r3, [pc, #8]	; (6608 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    65fe:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6600:	bf00      	nop
    6602:	3708      	adds	r7, #8
    6604:	46bd      	mov	sp, r7
    6606:	bd80      	pop	{r7, pc}
    6608:	000064fd 	.word	0x000064fd

0000660c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    660c:	b580      	push	{r7, lr}
    660e:	b084      	sub	sp, #16
    6610:	af00      	add	r7, sp, #0
    6612:	6078      	str	r0, [r7, #4]
    6614:	460b      	mov	r3, r1
    6616:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	781b      	ldrb	r3, [r3, #0]
    661c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    661e:	7bfb      	ldrb	r3, [r7, #15]
    6620:	f023 0310 	bic.w	r3, r3, #16
    6624:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6626:	78fb      	ldrb	r3, [r7, #3]
    6628:	011b      	lsls	r3, r3, #4
    662a:	b25a      	sxtb	r2, r3
    662c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6630:	4313      	orrs	r3, r2
    6632:	b25b      	sxtb	r3, r3
    6634:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6636:	687b      	ldr	r3, [r7, #4]
    6638:	7bfa      	ldrb	r2, [r7, #15]
    663a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    663c:	2103      	movs	r1, #3
    663e:	6878      	ldr	r0, [r7, #4]
    6640:	4b02      	ldr	r3, [pc, #8]	; (664c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    6642:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6644:	bf00      	nop
    6646:	3710      	adds	r7, #16
    6648:	46bd      	mov	sp, r7
    664a:	bd80      	pop	{r7, pc}
    664c:	000064fd 	.word	0x000064fd

00006650 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6650:	b580      	push	{r7, lr}
    6652:	b084      	sub	sp, #16
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
    6658:	460b      	mov	r3, r1
    665a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    665c:	2103      	movs	r1, #3
    665e:	6878      	ldr	r0, [r7, #4]
    6660:	4b06      	ldr	r3, [pc, #24]	; (667c <hri_eic_get_CTRLA_reg+0x2c>)
    6662:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    666a:	7bfa      	ldrb	r2, [r7, #15]
    666c:	78fb      	ldrb	r3, [r7, #3]
    666e:	4013      	ands	r3, r2
    6670:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6672:	7bfb      	ldrb	r3, [r7, #15]
}
    6674:	4618      	mov	r0, r3
    6676:	3710      	adds	r7, #16
    6678:	46bd      	mov	sp, r7
    667a:	bd80      	pop	{r7, pc}
    667c:	000064fd 	.word	0x000064fd

00006680 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6680:	b580      	push	{r7, lr}
    6682:	b082      	sub	sp, #8
    6684:	af00      	add	r7, sp, #0
    6686:	6078      	str	r0, [r7, #4]
    6688:	460b      	mov	r3, r1
    668a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	78fa      	ldrb	r2, [r7, #3]
    6690:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6692:	2103      	movs	r1, #3
    6694:	6878      	ldr	r0, [r7, #4]
    6696:	4b03      	ldr	r3, [pc, #12]	; (66a4 <hri_eic_write_CTRLA_reg+0x24>)
    6698:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    669a:	bf00      	nop
    669c:	3708      	adds	r7, #8
    669e:	46bd      	mov	sp, r7
    66a0:	bd80      	pop	{r7, pc}
    66a2:	bf00      	nop
    66a4:	000064fd 	.word	0x000064fd

000066a8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    66a8:	b480      	push	{r7}
    66aa:	b083      	sub	sp, #12
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
    66b0:	460b      	mov	r3, r1
    66b2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	78fa      	ldrb	r2, [r7, #3]
    66b8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    66ba:	bf00      	nop
    66bc:	370c      	adds	r7, #12
    66be:	46bd      	mov	sp, r7
    66c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c4:	4770      	bx	lr

000066c6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    66c6:	b480      	push	{r7}
    66c8:	b083      	sub	sp, #12
    66ca:	af00      	add	r7, sp, #0
    66cc:	6078      	str	r0, [r7, #4]
    66ce:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	683a      	ldr	r2, [r7, #0]
    66d4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    66d6:	bf00      	nop
    66d8:	370c      	adds	r7, #12
    66da:	46bd      	mov	sp, r7
    66dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e0:	4770      	bx	lr

000066e2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    66e2:	b480      	push	{r7}
    66e4:	b083      	sub	sp, #12
    66e6:	af00      	add	r7, sp, #0
    66e8:	6078      	str	r0, [r7, #4]
    66ea:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    66ec:	687b      	ldr	r3, [r7, #4]
    66ee:	683a      	ldr	r2, [r7, #0]
    66f0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    66f2:	bf00      	nop
    66f4:	370c      	adds	r7, #12
    66f6:	46bd      	mov	sp, r7
    66f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    66fc:	4770      	bx	lr

000066fe <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    66fe:	b480      	push	{r7}
    6700:	b085      	sub	sp, #20
    6702:	af00      	add	r7, sp, #0
    6704:	60f8      	str	r0, [r7, #12]
    6706:	460b      	mov	r3, r1
    6708:	607a      	str	r2, [r7, #4]
    670a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    670c:	7afb      	ldrb	r3, [r7, #11]
    670e:	68fa      	ldr	r2, [r7, #12]
    6710:	3306      	adds	r3, #6
    6712:	009b      	lsls	r3, r3, #2
    6714:	4413      	add	r3, r2
    6716:	687a      	ldr	r2, [r7, #4]
    6718:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    671a:	bf00      	nop
    671c:	3714      	adds	r7, #20
    671e:	46bd      	mov	sp, r7
    6720:	f85d 7b04 	ldr.w	r7, [sp], #4
    6724:	4770      	bx	lr

00006726 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6726:	b480      	push	{r7}
    6728:	b083      	sub	sp, #12
    672a:	af00      	add	r7, sp, #0
    672c:	6078      	str	r0, [r7, #4]
    672e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	683a      	ldr	r2, [r7, #0]
    6734:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6736:	bf00      	nop
    6738:	370c      	adds	r7, #12
    673a:	46bd      	mov	sp, r7
    673c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6740:	4770      	bx	lr

00006742 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6742:	b480      	push	{r7}
    6744:	b083      	sub	sp, #12
    6746:	af00      	add	r7, sp, #0
    6748:	6078      	str	r0, [r7, #4]
    674a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	683a      	ldr	r2, [r7, #0]
    6750:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6752:	bf00      	nop
    6754:	370c      	adds	r7, #12
    6756:	46bd      	mov	sp, r7
    6758:	f85d 7b04 	ldr.w	r7, [sp], #4
    675c:	4770      	bx	lr
	...

00006760 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6760:	b580      	push	{r7, lr}
    6762:	b082      	sub	sp, #8
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6768:	2101      	movs	r1, #1
    676a:	484f      	ldr	r0, [pc, #316]	; (68a8 <_ext_irq_init+0x148>)
    676c:	4b4f      	ldr	r3, [pc, #316]	; (68ac <_ext_irq_init+0x14c>)
    676e:	4798      	blx	r3
    6770:	4603      	mov	r3, r0
    6772:	f083 0301 	eor.w	r3, r3, #1
    6776:	b2db      	uxtb	r3, r3
    6778:	2b00      	cmp	r3, #0
    677a:	d011      	beq.n	67a0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    677c:	2102      	movs	r1, #2
    677e:	484a      	ldr	r0, [pc, #296]	; (68a8 <_ext_irq_init+0x148>)
    6780:	4b4b      	ldr	r3, [pc, #300]	; (68b0 <_ext_irq_init+0x150>)
    6782:	4798      	blx	r3
    6784:	4603      	mov	r3, r0
    6786:	2b00      	cmp	r3, #0
    6788:	d006      	beq.n	6798 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    678a:	4847      	ldr	r0, [pc, #284]	; (68a8 <_ext_irq_init+0x148>)
    678c:	4b49      	ldr	r3, [pc, #292]	; (68b4 <_ext_irq_init+0x154>)
    678e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6790:	2102      	movs	r1, #2
    6792:	4845      	ldr	r0, [pc, #276]	; (68a8 <_ext_irq_init+0x148>)
    6794:	4b48      	ldr	r3, [pc, #288]	; (68b8 <_ext_irq_init+0x158>)
    6796:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6798:	2101      	movs	r1, #1
    679a:	4843      	ldr	r0, [pc, #268]	; (68a8 <_ext_irq_init+0x148>)
    679c:	4b47      	ldr	r3, [pc, #284]	; (68bc <_ext_irq_init+0x15c>)
    679e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    67a0:	2101      	movs	r1, #1
    67a2:	4841      	ldr	r0, [pc, #260]	; (68a8 <_ext_irq_init+0x148>)
    67a4:	4b44      	ldr	r3, [pc, #272]	; (68b8 <_ext_irq_init+0x158>)
    67a6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    67a8:	2100      	movs	r1, #0
    67aa:	483f      	ldr	r0, [pc, #252]	; (68a8 <_ext_irq_init+0x148>)
    67ac:	4b44      	ldr	r3, [pc, #272]	; (68c0 <_ext_irq_init+0x160>)
    67ae:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    67b0:	2100      	movs	r1, #0
    67b2:	483d      	ldr	r0, [pc, #244]	; (68a8 <_ext_irq_init+0x148>)
    67b4:	4b43      	ldr	r3, [pc, #268]	; (68c4 <_ext_irq_init+0x164>)
    67b6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    67b8:	2100      	movs	r1, #0
    67ba:	483b      	ldr	r0, [pc, #236]	; (68a8 <_ext_irq_init+0x148>)
    67bc:	4b42      	ldr	r3, [pc, #264]	; (68c8 <_ext_irq_init+0x168>)
    67be:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    67c0:	f240 31bb 	movw	r1, #955	; 0x3bb
    67c4:	4838      	ldr	r0, [pc, #224]	; (68a8 <_ext_irq_init+0x148>)
    67c6:	4b41      	ldr	r3, [pc, #260]	; (68cc <_ext_irq_init+0x16c>)
    67c8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    67ca:	f240 313b 	movw	r1, #827	; 0x33b
    67ce:	4836      	ldr	r0, [pc, #216]	; (68a8 <_ext_irq_init+0x148>)
    67d0:	4b3f      	ldr	r3, [pc, #252]	; (68d0 <_ext_irq_init+0x170>)
    67d2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    67d4:	2100      	movs	r1, #0
    67d6:	4834      	ldr	r0, [pc, #208]	; (68a8 <_ext_irq_init+0x148>)
    67d8:	4b3e      	ldr	r3, [pc, #248]	; (68d4 <_ext_irq_init+0x174>)
    67da:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    67dc:	4a3e      	ldr	r2, [pc, #248]	; (68d8 <_ext_irq_init+0x178>)
    67de:	2100      	movs	r1, #0
    67e0:	4831      	ldr	r0, [pc, #196]	; (68a8 <_ext_irq_init+0x148>)
    67e2:	4b3e      	ldr	r3, [pc, #248]	; (68dc <_ext_irq_init+0x17c>)
    67e4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    67e6:	2211      	movs	r2, #17
    67e8:	2101      	movs	r1, #1
    67ea:	482f      	ldr	r0, [pc, #188]	; (68a8 <_ext_irq_init+0x148>)
    67ec:	4b3b      	ldr	r3, [pc, #236]	; (68dc <_ext_irq_init+0x17c>)
    67ee:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    67f0:	482d      	ldr	r0, [pc, #180]	; (68a8 <_ext_irq_init+0x148>)
    67f2:	4b3b      	ldr	r3, [pc, #236]	; (68e0 <_ext_irq_init+0x180>)
    67f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    67f6:	200c      	movs	r0, #12
    67f8:	4b3a      	ldr	r3, [pc, #232]	; (68e4 <_ext_irq_init+0x184>)
    67fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    67fc:	200c      	movs	r0, #12
    67fe:	4b3a      	ldr	r3, [pc, #232]	; (68e8 <_ext_irq_init+0x188>)
    6800:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6802:	200c      	movs	r0, #12
    6804:	4b39      	ldr	r3, [pc, #228]	; (68ec <_ext_irq_init+0x18c>)
    6806:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6808:	200d      	movs	r0, #13
    680a:	4b36      	ldr	r3, [pc, #216]	; (68e4 <_ext_irq_init+0x184>)
    680c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    680e:	200d      	movs	r0, #13
    6810:	4b35      	ldr	r3, [pc, #212]	; (68e8 <_ext_irq_init+0x188>)
    6812:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    6814:	200d      	movs	r0, #13
    6816:	4b35      	ldr	r3, [pc, #212]	; (68ec <_ext_irq_init+0x18c>)
    6818:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    681a:	200f      	movs	r0, #15
    681c:	4b31      	ldr	r3, [pc, #196]	; (68e4 <_ext_irq_init+0x184>)
    681e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6820:	200f      	movs	r0, #15
    6822:	4b31      	ldr	r3, [pc, #196]	; (68e8 <_ext_irq_init+0x188>)
    6824:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    6826:	200f      	movs	r0, #15
    6828:	4b30      	ldr	r3, [pc, #192]	; (68ec <_ext_irq_init+0x18c>)
    682a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    682c:	2010      	movs	r0, #16
    682e:	4b2d      	ldr	r3, [pc, #180]	; (68e4 <_ext_irq_init+0x184>)
    6830:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6832:	2010      	movs	r0, #16
    6834:	4b2c      	ldr	r3, [pc, #176]	; (68e8 <_ext_irq_init+0x188>)
    6836:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6838:	2010      	movs	r0, #16
    683a:	4b2c      	ldr	r3, [pc, #176]	; (68ec <_ext_irq_init+0x18c>)
    683c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    683e:	2011      	movs	r0, #17
    6840:	4b28      	ldr	r3, [pc, #160]	; (68e4 <_ext_irq_init+0x184>)
    6842:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6844:	2011      	movs	r0, #17
    6846:	4b28      	ldr	r3, [pc, #160]	; (68e8 <_ext_irq_init+0x188>)
    6848:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    684a:	2011      	movs	r0, #17
    684c:	4b27      	ldr	r3, [pc, #156]	; (68ec <_ext_irq_init+0x18c>)
    684e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6850:	2012      	movs	r0, #18
    6852:	4b24      	ldr	r3, [pc, #144]	; (68e4 <_ext_irq_init+0x184>)
    6854:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6856:	2012      	movs	r0, #18
    6858:	4b23      	ldr	r3, [pc, #140]	; (68e8 <_ext_irq_init+0x188>)
    685a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    685c:	2012      	movs	r0, #18
    685e:	4b23      	ldr	r3, [pc, #140]	; (68ec <_ext_irq_init+0x18c>)
    6860:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6862:	2013      	movs	r0, #19
    6864:	4b1f      	ldr	r3, [pc, #124]	; (68e4 <_ext_irq_init+0x184>)
    6866:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    6868:	2013      	movs	r0, #19
    686a:	4b1f      	ldr	r3, [pc, #124]	; (68e8 <_ext_irq_init+0x188>)
    686c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    686e:	2013      	movs	r0, #19
    6870:	4b1e      	ldr	r3, [pc, #120]	; (68ec <_ext_irq_init+0x18c>)
    6872:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    6874:	2014      	movs	r0, #20
    6876:	4b1b      	ldr	r3, [pc, #108]	; (68e4 <_ext_irq_init+0x184>)
    6878:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    687a:	2014      	movs	r0, #20
    687c:	4b1a      	ldr	r3, [pc, #104]	; (68e8 <_ext_irq_init+0x188>)
    687e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    6880:	2014      	movs	r0, #20
    6882:	4b1a      	ldr	r3, [pc, #104]	; (68ec <_ext_irq_init+0x18c>)
    6884:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    6886:	2015      	movs	r0, #21
    6888:	4b16      	ldr	r3, [pc, #88]	; (68e4 <_ext_irq_init+0x184>)
    688a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    688c:	2015      	movs	r0, #21
    688e:	4b16      	ldr	r3, [pc, #88]	; (68e8 <_ext_irq_init+0x188>)
    6890:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    6892:	2015      	movs	r0, #21
    6894:	4b15      	ldr	r3, [pc, #84]	; (68ec <_ext_irq_init+0x18c>)
    6896:	4798      	blx	r3

	callback = cb;
    6898:	4a15      	ldr	r2, [pc, #84]	; (68f0 <_ext_irq_init+0x190>)
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    689e:	2300      	movs	r3, #0
}
    68a0:	4618      	mov	r0, r3
    68a2:	3708      	adds	r7, #8
    68a4:	46bd      	mov	sp, r7
    68a6:	bd80      	pop	{r7, pc}
    68a8:	40002800 	.word	0x40002800
    68ac:	00006521 	.word	0x00006521
    68b0:	00006651 	.word	0x00006651
    68b4:	000065e1 	.word	0x000065e1
    68b8:	000064fd 	.word	0x000064fd
    68bc:	00006681 	.word	0x00006681
    68c0:	0000660d 	.word	0x0000660d
    68c4:	000066a9 	.word	0x000066a9
    68c8:	000066c7 	.word	0x000066c7
    68cc:	000066e3 	.word	0x000066e3
    68d0:	00006727 	.word	0x00006727
    68d4:	00006743 	.word	0x00006743
    68d8:	90999013 	.word	0x90999013
    68dc:	000066ff 	.word	0x000066ff
    68e0:	000065b5 	.word	0x000065b5
    68e4:	0000647d 	.word	0x0000647d
    68e8:	000064c1 	.word	0x000064c1
    68ec:	00006441 	.word	0x00006441
    68f0:	20001038 	.word	0x20001038

000068f4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    68f4:	b580      	push	{r7, lr}
    68f6:	b084      	sub	sp, #16
    68f8:	af00      	add	r7, sp, #0
    68fa:	6078      	str	r0, [r7, #4]
    68fc:	460b      	mov	r3, r1
    68fe:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    6900:	23ff      	movs	r3, #255	; 0xff
    6902:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    6904:	2300      	movs	r3, #0
    6906:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6908:	e010      	b.n	692c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    690a:	7bbb      	ldrb	r3, [r7, #14]
    690c:	4a1c      	ldr	r2, [pc, #112]	; (6980 <_ext_irq_enable+0x8c>)
    690e:	00db      	lsls	r3, r3, #3
    6910:	4413      	add	r3, r2
    6912:	685a      	ldr	r2, [r3, #4]
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	429a      	cmp	r2, r3
    6918:	d105      	bne.n	6926 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    691a:	7bbb      	ldrb	r3, [r7, #14]
    691c:	4a18      	ldr	r2, [pc, #96]	; (6980 <_ext_irq_enable+0x8c>)
    691e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6922:	73fb      	strb	r3, [r7, #15]
			break;
    6924:	e005      	b.n	6932 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    6926:	7bbb      	ldrb	r3, [r7, #14]
    6928:	3301      	adds	r3, #1
    692a:	73bb      	strb	r3, [r7, #14]
    692c:	7bbb      	ldrb	r3, [r7, #14]
    692e:	2b08      	cmp	r3, #8
    6930:	d9eb      	bls.n	690a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    6932:	7bfb      	ldrb	r3, [r7, #15]
    6934:	2bff      	cmp	r3, #255	; 0xff
    6936:	d102      	bne.n	693e <_ext_irq_enable+0x4a>
		return -1;
    6938:	f04f 33ff 	mov.w	r3, #4294967295
    693c:	e01c      	b.n	6978 <_ext_irq_enable+0x84>
	}

	if (enable) {
    693e:	78fb      	ldrb	r3, [r7, #3]
    6940:	2b00      	cmp	r3, #0
    6942:	d008      	beq.n	6956 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    6944:	7bfb      	ldrb	r3, [r7, #15]
    6946:	2201      	movs	r2, #1
    6948:	fa02 f303 	lsl.w	r3, r2, r3
    694c:	4619      	mov	r1, r3
    694e:	480d      	ldr	r0, [pc, #52]	; (6984 <_ext_irq_enable+0x90>)
    6950:	4b0d      	ldr	r3, [pc, #52]	; (6988 <_ext_irq_enable+0x94>)
    6952:	4798      	blx	r3
    6954:	e00f      	b.n	6976 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    6956:	7bfb      	ldrb	r3, [r7, #15]
    6958:	2201      	movs	r2, #1
    695a:	fa02 f303 	lsl.w	r3, r2, r3
    695e:	4619      	mov	r1, r3
    6960:	4808      	ldr	r0, [pc, #32]	; (6984 <_ext_irq_enable+0x90>)
    6962:	4b0a      	ldr	r3, [pc, #40]	; (698c <_ext_irq_enable+0x98>)
    6964:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    6966:	7bfb      	ldrb	r3, [r7, #15]
    6968:	2201      	movs	r2, #1
    696a:	fa02 f303 	lsl.w	r3, r2, r3
    696e:	4619      	mov	r1, r3
    6970:	4804      	ldr	r0, [pc, #16]	; (6984 <_ext_irq_enable+0x90>)
    6972:	4b07      	ldr	r3, [pc, #28]	; (6990 <_ext_irq_enable+0x9c>)
    6974:	4798      	blx	r3
	}

	return ERR_NONE;
    6976:	2300      	movs	r3, #0
}
    6978:	4618      	mov	r0, r3
    697a:	3710      	adds	r7, #16
    697c:	46bd      	mov	sp, r7
    697e:	bd80      	pop	{r7, pc}
    6980:	000198c4 	.word	0x000198c4
    6984:	40002800 	.word	0x40002800
    6988:	0000657d 	.word	0x0000657d
    698c:	00006599 	.word	0x00006599
    6990:	00006561 	.word	0x00006561

00006994 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6994:	b580      	push	{r7, lr}
    6996:	b084      	sub	sp, #16
    6998:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    699a:	4841      	ldr	r0, [pc, #260]	; (6aa0 <_ext_irq_handler+0x10c>)
    699c:	4b41      	ldr	r3, [pc, #260]	; (6aa4 <_ext_irq_handler+0x110>)
    699e:	4798      	blx	r3
    69a0:	4603      	mov	r3, r0
    69a2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    69a4:	f04f 33ff 	mov.w	r3, #4294967295
    69a8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    69aa:	683b      	ldr	r3, [r7, #0]
    69ac:	4619      	mov	r1, r3
    69ae:	483c      	ldr	r0, [pc, #240]	; (6aa0 <_ext_irq_handler+0x10c>)
    69b0:	4b3d      	ldr	r3, [pc, #244]	; (6aa8 <_ext_irq_handler+0x114>)
    69b2:	4798      	blx	r3

	ASSERT(callback);
    69b4:	4b3d      	ldr	r3, [pc, #244]	; (6aac <_ext_irq_handler+0x118>)
    69b6:	681b      	ldr	r3, [r3, #0]
    69b8:	2b00      	cmp	r3, #0
    69ba:	bf14      	ite	ne
    69bc:	2301      	movne	r3, #1
    69be:	2300      	moveq	r3, #0
    69c0:	b2db      	uxtb	r3, r3
    69c2:	f44f 7284 	mov.w	r2, #264	; 0x108
    69c6:	493a      	ldr	r1, [pc, #232]	; (6ab0 <_ext_irq_handler+0x11c>)
    69c8:	4618      	mov	r0, r3
    69ca:	4b3a      	ldr	r3, [pc, #232]	; (6ab4 <_ext_irq_handler+0x120>)
    69cc:	4798      	blx	r3

	while (flags) {
    69ce:	e060      	b.n	6a92 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    69d0:	683b      	ldr	r3, [r7, #0]
    69d2:	4618      	mov	r0, r3
    69d4:	4b38      	ldr	r3, [pc, #224]	; (6ab8 <_ext_irq_handler+0x124>)
    69d6:	4798      	blx	r3
    69d8:	4603      	mov	r3, r0
    69da:	b2db      	uxtb	r3, r3
    69dc:	3b01      	subs	r3, #1
    69de:	b2db      	uxtb	r3, r3
    69e0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    69e2:	e047      	b.n	6a74 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    69e4:	2300      	movs	r3, #0
    69e6:	71fb      	strb	r3, [r7, #7]
    69e8:	2309      	movs	r3, #9
    69ea:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    69ec:	e024      	b.n	6a38 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    69ee:	79ba      	ldrb	r2, [r7, #6]
    69f0:	79fb      	ldrb	r3, [r7, #7]
    69f2:	4413      	add	r3, r2
    69f4:	105b      	asrs	r3, r3, #1
    69f6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    69f8:	797b      	ldrb	r3, [r7, #5]
    69fa:	4a30      	ldr	r2, [pc, #192]	; (6abc <_ext_irq_handler+0x128>)
    69fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6a00:	461a      	mov	r2, r3
    6a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a06:	429a      	cmp	r2, r3
    6a08:	d106      	bne.n	6a18 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    6a0a:	797b      	ldrb	r3, [r7, #5]
    6a0c:	4a2b      	ldr	r2, [pc, #172]	; (6abc <_ext_irq_handler+0x128>)
    6a0e:	00db      	lsls	r3, r3, #3
    6a10:	4413      	add	r3, r2
    6a12:	685b      	ldr	r3, [r3, #4]
    6a14:	60bb      	str	r3, [r7, #8]
					break;
    6a16:	e013      	b.n	6a40 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    6a18:	797b      	ldrb	r3, [r7, #5]
    6a1a:	4a28      	ldr	r2, [pc, #160]	; (6abc <_ext_irq_handler+0x128>)
    6a1c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6a20:	461a      	mov	r2, r3
    6a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a26:	429a      	cmp	r2, r3
    6a28:	da03      	bge.n	6a32 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    6a2a:	797b      	ldrb	r3, [r7, #5]
    6a2c:	3301      	adds	r3, #1
    6a2e:	71fb      	strb	r3, [r7, #7]
    6a30:	e002      	b.n	6a38 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    6a32:	797b      	ldrb	r3, [r7, #5]
    6a34:	3b01      	subs	r3, #1
    6a36:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    6a38:	79ba      	ldrb	r2, [r7, #6]
    6a3a:	79fb      	ldrb	r3, [r7, #7]
    6a3c:	429a      	cmp	r2, r3
    6a3e:	d2d6      	bcs.n	69ee <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6a40:	68bb      	ldr	r3, [r7, #8]
    6a42:	f1b3 3fff 	cmp.w	r3, #4294967295
    6a46:	d003      	beq.n	6a50 <_ext_irq_handler+0xbc>
				callback(pin);
    6a48:	4b18      	ldr	r3, [pc, #96]	; (6aac <_ext_irq_handler+0x118>)
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	68b8      	ldr	r0, [r7, #8]
    6a4e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a54:	2201      	movs	r2, #1
    6a56:	fa02 f303 	lsl.w	r3, r2, r3
    6a5a:	43da      	mvns	r2, r3
    6a5c:	683b      	ldr	r3, [r7, #0]
    6a5e:	4013      	ands	r3, r2
    6a60:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6a62:	683b      	ldr	r3, [r7, #0]
    6a64:	4618      	mov	r0, r3
    6a66:	4b14      	ldr	r3, [pc, #80]	; (6ab8 <_ext_irq_handler+0x124>)
    6a68:	4798      	blx	r3
    6a6a:	4603      	mov	r3, r0
    6a6c:	b2db      	uxtb	r3, r3
    6a6e:	3b01      	subs	r3, #1
    6a70:	b2db      	uxtb	r3, r3
    6a72:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a78:	f1b3 3fff 	cmp.w	r3, #4294967295
    6a7c:	d1b2      	bne.n	69e4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    6a7e:	4808      	ldr	r0, [pc, #32]	; (6aa0 <_ext_irq_handler+0x10c>)
    6a80:	4b08      	ldr	r3, [pc, #32]	; (6aa4 <_ext_irq_handler+0x110>)
    6a82:	4798      	blx	r3
    6a84:	4603      	mov	r3, r0
    6a86:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    6a88:	683b      	ldr	r3, [r7, #0]
    6a8a:	4619      	mov	r1, r3
    6a8c:	4804      	ldr	r0, [pc, #16]	; (6aa0 <_ext_irq_handler+0x10c>)
    6a8e:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <_ext_irq_handler+0x114>)
    6a90:	4798      	blx	r3
	while (flags) {
    6a92:	683b      	ldr	r3, [r7, #0]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d19b      	bne.n	69d0 <_ext_irq_handler+0x3c>
	}
}
    6a98:	bf00      	nop
    6a9a:	3710      	adds	r7, #16
    6a9c:	46bd      	mov	sp, r7
    6a9e:	bd80      	pop	{r7, pc}
    6aa0:	40002800 	.word	0x40002800
    6aa4:	00006549 	.word	0x00006549
    6aa8:	00006561 	.word	0x00006561
    6aac:	20001038 	.word	0x20001038
    6ab0:	0001990c 	.word	0x0001990c
    6ab4:	00005565 	.word	0x00005565
    6ab8:	0001913d 	.word	0x0001913d
    6abc:	000198c4 	.word	0x000198c4

00006ac0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6ac4:	4b01      	ldr	r3, [pc, #4]	; (6acc <EIC_0_Handler+0xc>)
    6ac6:	4798      	blx	r3
} /**
    6ac8:	bf00      	nop
    6aca:	bd80      	pop	{r7, pc}
    6acc:	00006995 	.word	0x00006995

00006ad0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6ad4:	4b01      	ldr	r3, [pc, #4]	; (6adc <EIC_1_Handler+0xc>)
    6ad6:	4798      	blx	r3
} /**
    6ad8:	bf00      	nop
    6ada:	bd80      	pop	{r7, pc}
    6adc:	00006995 	.word	0x00006995

00006ae0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6ae4:	4b01      	ldr	r3, [pc, #4]	; (6aec <EIC_3_Handler+0xc>)
    6ae6:	4798      	blx	r3
} /**
    6ae8:	bf00      	nop
    6aea:	bd80      	pop	{r7, pc}
    6aec:	00006995 	.word	0x00006995

00006af0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    6af0:	b580      	push	{r7, lr}
    6af2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6af4:	4b01      	ldr	r3, [pc, #4]	; (6afc <EIC_4_Handler+0xc>)
    6af6:	4798      	blx	r3
} /**
    6af8:	bf00      	nop
    6afa:	bd80      	pop	{r7, pc}
    6afc:	00006995 	.word	0x00006995

00006b00 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6b04:	4b01      	ldr	r3, [pc, #4]	; (6b0c <EIC_5_Handler+0xc>)
    6b06:	4798      	blx	r3
} /**
    6b08:	bf00      	nop
    6b0a:	bd80      	pop	{r7, pc}
    6b0c:	00006995 	.word	0x00006995

00006b10 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    6b10:	b580      	push	{r7, lr}
    6b12:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6b14:	4b01      	ldr	r3, [pc, #4]	; (6b1c <EIC_6_Handler+0xc>)
    6b16:	4798      	blx	r3
} /**
    6b18:	bf00      	nop
    6b1a:	bd80      	pop	{r7, pc}
    6b1c:	00006995 	.word	0x00006995

00006b20 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6b24:	4b01      	ldr	r3, [pc, #4]	; (6b2c <EIC_7_Handler+0xc>)
    6b26:	4798      	blx	r3
} /**
    6b28:	bf00      	nop
    6b2a:	bd80      	pop	{r7, pc}
    6b2c:	00006995 	.word	0x00006995

00006b30 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6b34:	4b01      	ldr	r3, [pc, #4]	; (6b3c <EIC_8_Handler+0xc>)
    6b36:	4798      	blx	r3
} /**
    6b38:	bf00      	nop
    6b3a:	bd80      	pop	{r7, pc}
    6b3c:	00006995 	.word	0x00006995

00006b40 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6b44:	4b01      	ldr	r3, [pc, #4]	; (6b4c <EIC_9_Handler+0xc>)
    6b46:	4798      	blx	r3
}
    6b48:	bf00      	nop
    6b4a:	bd80      	pop	{r7, pc}
    6b4c:	00006995 	.word	0x00006995

00006b50 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6b50:	b480      	push	{r7}
    6b52:	b085      	sub	sp, #20
    6b54:	af00      	add	r7, sp, #0
    6b56:	60f8      	str	r0, [r7, #12]
    6b58:	460b      	mov	r3, r1
    6b5a:	607a      	str	r2, [r7, #4]
    6b5c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6b5e:	7afa      	ldrb	r2, [r7, #11]
    6b60:	68fb      	ldr	r3, [r7, #12]
    6b62:	3248      	adds	r2, #72	; 0x48
    6b64:	6879      	ldr	r1, [r7, #4]
    6b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6b6a:	bf00      	nop
    6b6c:	3714      	adds	r7, #20
    6b6e:	46bd      	mov	sp, r7
    6b70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b74:	4770      	bx	lr

00006b76 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6b76:	b480      	push	{r7}
    6b78:	b083      	sub	sp, #12
    6b7a:	af00      	add	r7, sp, #0
    6b7c:	6078      	str	r0, [r7, #4]
    6b7e:	460b      	mov	r3, r1
    6b80:	70fb      	strb	r3, [r7, #3]
    6b82:	4613      	mov	r3, r2
    6b84:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6b86:	78fb      	ldrb	r3, [r7, #3]
    6b88:	687a      	ldr	r2, [r7, #4]
    6b8a:	3304      	adds	r3, #4
    6b8c:	00db      	lsls	r3, r3, #3
    6b8e:	4413      	add	r3, r2
    6b90:	78ba      	ldrb	r2, [r7, #2]
    6b92:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6b94:	78fb      	ldrb	r3, [r7, #3]
    6b96:	78ba      	ldrb	r2, [r7, #2]
    6b98:	43d2      	mvns	r2, r2
    6b9a:	b2d1      	uxtb	r1, r2
    6b9c:	687a      	ldr	r2, [r7, #4]
    6b9e:	3304      	adds	r3, #4
    6ba0:	00db      	lsls	r3, r3, #3
    6ba2:	4413      	add	r3, r2
    6ba4:	460a      	mov	r2, r1
    6ba6:	711a      	strb	r2, [r3, #4]
}
    6ba8:	bf00      	nop
    6baa:	370c      	adds	r7, #12
    6bac:	46bd      	mov	sp, r7
    6bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb2:	4770      	bx	lr

00006bb4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6bb4:	b480      	push	{r7}
    6bb6:	b085      	sub	sp, #20
    6bb8:	af00      	add	r7, sp, #0
    6bba:	60f8      	str	r0, [r7, #12]
    6bbc:	460b      	mov	r3, r1
    6bbe:	607a      	str	r2, [r7, #4]
    6bc0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6bc2:	7afa      	ldrb	r2, [r7, #11]
    6bc4:	68fb      	ldr	r3, [r7, #12]
    6bc6:	3204      	adds	r2, #4
    6bc8:	6879      	ldr	r1, [r7, #4]
    6bca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6bce:	bf00      	nop
    6bd0:	3714      	adds	r7, #20
    6bd2:	46bd      	mov	sp, r7
    6bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bd8:	4770      	bx	lr
	...

00006bdc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6bdc:	b580      	push	{r7, lr}
    6bde:	b082      	sub	sp, #8
    6be0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    6be2:	2300      	movs	r3, #0
    6be4:	71fb      	strb	r3, [r7, #7]
    6be6:	e00b      	b.n	6c00 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6be8:	79fb      	ldrb	r3, [r7, #7]
    6bea:	4a18      	ldr	r2, [pc, #96]	; (6c4c <_event_system_init+0x70>)
    6bec:	5cd3      	ldrb	r3, [r2, r3]
    6bee:	461a      	mov	r2, r3
    6bf0:	79fb      	ldrb	r3, [r7, #7]
    6bf2:	4619      	mov	r1, r3
    6bf4:	4816      	ldr	r0, [pc, #88]	; (6c50 <_event_system_init+0x74>)
    6bf6:	4b17      	ldr	r3, [pc, #92]	; (6c54 <_event_system_init+0x78>)
    6bf8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    6bfa:	79fb      	ldrb	r3, [r7, #7]
    6bfc:	3301      	adds	r3, #1
    6bfe:	71fb      	strb	r3, [r7, #7]
    6c00:	79fb      	ldrb	r3, [r7, #7]
    6c02:	2b42      	cmp	r3, #66	; 0x42
    6c04:	d9f0      	bls.n	6be8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6c06:	2300      	movs	r3, #0
    6c08:	71fb      	strb	r3, [r7, #7]
    6c0a:	e016      	b.n	6c3a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6c0c:	79fb      	ldrb	r3, [r7, #7]
    6c0e:	4a12      	ldr	r2, [pc, #72]	; (6c58 <_event_system_init+0x7c>)
    6c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6c14:	461a      	mov	r2, r3
    6c16:	79fb      	ldrb	r3, [r7, #7]
    6c18:	4619      	mov	r1, r3
    6c1a:	480d      	ldr	r0, [pc, #52]	; (6c50 <_event_system_init+0x74>)
    6c1c:	4b0f      	ldr	r3, [pc, #60]	; (6c5c <_event_system_init+0x80>)
    6c1e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6c20:	79fb      	ldrb	r3, [r7, #7]
    6c22:	4a0f      	ldr	r2, [pc, #60]	; (6c60 <_event_system_init+0x84>)
    6c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	79fb      	ldrb	r3, [r7, #7]
    6c2c:	4619      	mov	r1, r3
    6c2e:	4808      	ldr	r0, [pc, #32]	; (6c50 <_event_system_init+0x74>)
    6c30:	4b0c      	ldr	r3, [pc, #48]	; (6c64 <_event_system_init+0x88>)
    6c32:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6c34:	79fb      	ldrb	r3, [r7, #7]
    6c36:	3301      	adds	r3, #1
    6c38:	71fb      	strb	r3, [r7, #7]
    6c3a:	79fb      	ldrb	r3, [r7, #7]
    6c3c:	2b1f      	cmp	r3, #31
    6c3e:	d9e5      	bls.n	6c0c <_event_system_init+0x30>
	}

	return ERR_NONE;
    6c40:	2300      	movs	r3, #0
}
    6c42:	4618      	mov	r0, r3
    6c44:	3708      	adds	r7, #8
    6c46:	46bd      	mov	sp, r7
    6c48:	bd80      	pop	{r7, pc}
    6c4a:	bf00      	nop
    6c4c:	00019924 	.word	0x00019924
    6c50:	4100e000 	.word	0x4100e000
    6c54:	00006b51 	.word	0x00006b51
    6c58:	00019968 	.word	0x00019968
    6c5c:	00006bb5 	.word	0x00006bb5
    6c60:	000199a8 	.word	0x000199a8
    6c64:	00006b77 	.word	0x00006b77

00006c68 <hri_gclk_wait_for_sync>:
{
    6c68:	b480      	push	{r7}
    6c6a:	b083      	sub	sp, #12
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
    6c70:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6c72:	bf00      	nop
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	685a      	ldr	r2, [r3, #4]
    6c78:	683b      	ldr	r3, [r7, #0]
    6c7a:	4013      	ands	r3, r2
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d1f9      	bne.n	6c74 <hri_gclk_wait_for_sync+0xc>
}
    6c80:	bf00      	nop
    6c82:	370c      	adds	r7, #12
    6c84:	46bd      	mov	sp, r7
    6c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8a:	4770      	bx	lr

00006c8c <hri_gclk_write_GENCTRL_reg>:
{
    6c8c:	b580      	push	{r7, lr}
    6c8e:	b084      	sub	sp, #16
    6c90:	af00      	add	r7, sp, #0
    6c92:	60f8      	str	r0, [r7, #12]
    6c94:	460b      	mov	r3, r1
    6c96:	607a      	str	r2, [r7, #4]
    6c98:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6c9a:	7afa      	ldrb	r2, [r7, #11]
    6c9c:	68fb      	ldr	r3, [r7, #12]
    6c9e:	3208      	adds	r2, #8
    6ca0:	6879      	ldr	r1, [r7, #4]
    6ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6ca6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6caa:	68f8      	ldr	r0, [r7, #12]
    6cac:	4b02      	ldr	r3, [pc, #8]	; (6cb8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    6cae:	4798      	blx	r3
}
    6cb0:	bf00      	nop
    6cb2:	3710      	adds	r7, #16
    6cb4:	46bd      	mov	sp, r7
    6cb6:	bd80      	pop	{r7, pc}
    6cb8:	00006c69 	.word	0x00006c69

00006cbc <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b082      	sub	sp, #8
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	f003 0301 	and.w	r3, r3, #1
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d004      	beq.n	6cd8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    6cce:	4a36      	ldr	r2, [pc, #216]	; (6da8 <_gclk_init_generators_by_fref+0xec>)
    6cd0:	2100      	movs	r1, #0
    6cd2:	4836      	ldr	r0, [pc, #216]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6cd4:	4b36      	ldr	r3, [pc, #216]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6cd6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	f003 0302 	and.w	r3, r3, #2
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d004      	beq.n	6cec <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    6ce2:	4a34      	ldr	r2, [pc, #208]	; (6db4 <_gclk_init_generators_by_fref+0xf8>)
    6ce4:	2101      	movs	r1, #1
    6ce6:	4831      	ldr	r0, [pc, #196]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6ce8:	4b31      	ldr	r3, [pc, #196]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6cea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6cec:	687b      	ldr	r3, [r7, #4]
    6cee:	f003 0304 	and.w	r3, r3, #4
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d004      	beq.n	6d00 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    6cf6:	4a30      	ldr	r2, [pc, #192]	; (6db8 <_gclk_init_generators_by_fref+0xfc>)
    6cf8:	2102      	movs	r1, #2
    6cfa:	482c      	ldr	r0, [pc, #176]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6cfc:	4b2c      	ldr	r3, [pc, #176]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6cfe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	f003 0308 	and.w	r3, r3, #8
    6d06:	2b00      	cmp	r3, #0
    6d08:	d004      	beq.n	6d14 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    6d0a:	4a2c      	ldr	r2, [pc, #176]	; (6dbc <_gclk_init_generators_by_fref+0x100>)
    6d0c:	2103      	movs	r1, #3
    6d0e:	4827      	ldr	r0, [pc, #156]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d10:	4b27      	ldr	r3, [pc, #156]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d12:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	f003 0310 	and.w	r3, r3, #16
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d004      	beq.n	6d28 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    6d1e:	4a28      	ldr	r2, [pc, #160]	; (6dc0 <_gclk_init_generators_by_fref+0x104>)
    6d20:	2104      	movs	r1, #4
    6d22:	4822      	ldr	r0, [pc, #136]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d24:	4b22      	ldr	r3, [pc, #136]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d26:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	f003 0320 	and.w	r3, r3, #32
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d004      	beq.n	6d3c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    6d32:	4a24      	ldr	r2, [pc, #144]	; (6dc4 <_gclk_init_generators_by_fref+0x108>)
    6d34:	2105      	movs	r1, #5
    6d36:	481d      	ldr	r0, [pc, #116]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d38:	4b1d      	ldr	r3, [pc, #116]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d3a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    6d3c:	687b      	ldr	r3, [r7, #4]
    6d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6d42:	2b00      	cmp	r3, #0
    6d44:	d004      	beq.n	6d50 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    6d46:	4a20      	ldr	r2, [pc, #128]	; (6dc8 <_gclk_init_generators_by_fref+0x10c>)
    6d48:	2106      	movs	r1, #6
    6d4a:	4818      	ldr	r0, [pc, #96]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d4c:	4b18      	ldr	r3, [pc, #96]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d4e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6d56:	2b00      	cmp	r3, #0
    6d58:	d004      	beq.n	6d64 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    6d5a:	4a1c      	ldr	r2, [pc, #112]	; (6dcc <_gclk_init_generators_by_fref+0x110>)
    6d5c:	2107      	movs	r1, #7
    6d5e:	4813      	ldr	r0, [pc, #76]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d60:	4b13      	ldr	r3, [pc, #76]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d62:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d004      	beq.n	6d78 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    6d6e:	4a18      	ldr	r2, [pc, #96]	; (6dd0 <_gclk_init_generators_by_fref+0x114>)
    6d70:	2108      	movs	r1, #8
    6d72:	480e      	ldr	r0, [pc, #56]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d74:	4b0e      	ldr	r3, [pc, #56]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d76:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d004      	beq.n	6d8c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    6d82:	4a14      	ldr	r2, [pc, #80]	; (6dd4 <_gclk_init_generators_by_fref+0x118>)
    6d84:	210a      	movs	r1, #10
    6d86:	4809      	ldr	r0, [pc, #36]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d88:	4b09      	ldr	r3, [pc, #36]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d8a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6d92:	2b00      	cmp	r3, #0
    6d94:	d004      	beq.n	6da0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    6d96:	4a10      	ldr	r2, [pc, #64]	; (6dd8 <_gclk_init_generators_by_fref+0x11c>)
    6d98:	210b      	movs	r1, #11
    6d9a:	4804      	ldr	r0, [pc, #16]	; (6dac <_gclk_init_generators_by_fref+0xf0>)
    6d9c:	4b04      	ldr	r3, [pc, #16]	; (6db0 <_gclk_init_generators_by_fref+0xf4>)
    6d9e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6da0:	bf00      	nop
    6da2:	3708      	adds	r7, #8
    6da4:	46bd      	mov	sp, r7
    6da6:	bd80      	pop	{r7, pc}
    6da8:	00010107 	.word	0x00010107
    6dac:	40001c00 	.word	0x40001c00
    6db0:	00006c8d 	.word	0x00006c8d
    6db4:	00010907 	.word	0x00010907
    6db8:	00010906 	.word	0x00010906
    6dbc:	00020908 	.word	0x00020908
    6dc0:	00010901 	.word	0x00010901
    6dc4:	00062901 	.word	0x00062901
    6dc8:	000c2901 	.word	0x000c2901
    6dcc:	00082908 	.word	0x00082908
    6dd0:	00032901 	.word	0x00032901
    6dd4:	00010905 	.word	0x00010905
    6dd8:	00041905 	.word	0x00041905

00006ddc <hri_mclk_write_CPUDIV_reg>:
{
    6ddc:	b480      	push	{r7}
    6dde:	b083      	sub	sp, #12
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
    6de4:	460b      	mov	r3, r1
    6de6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	78fa      	ldrb	r2, [r7, #3]
    6dec:	715a      	strb	r2, [r3, #5]
}
    6dee:	bf00      	nop
    6df0:	370c      	adds	r7, #12
    6df2:	46bd      	mov	sp, r7
    6df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6df8:	4770      	bx	lr
	...

00006dfc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    6dfc:	b580      	push	{r7, lr}
    6dfe:	b082      	sub	sp, #8
    6e00:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    6e02:	4b05      	ldr	r3, [pc, #20]	; (6e18 <_mclk_init+0x1c>)
    6e04:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    6e06:	2101      	movs	r1, #1
    6e08:	6878      	ldr	r0, [r7, #4]
    6e0a:	4b04      	ldr	r3, [pc, #16]	; (6e1c <_mclk_init+0x20>)
    6e0c:	4798      	blx	r3
}
    6e0e:	bf00      	nop
    6e10:	3708      	adds	r7, #8
    6e12:	46bd      	mov	sp, r7
    6e14:	bd80      	pop	{r7, pc}
    6e16:	bf00      	nop
    6e18:	40000800 	.word	0x40000800
    6e1c:	00006ddd 	.word	0x00006ddd

00006e20 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    6e20:	b480      	push	{r7}
    6e22:	b083      	sub	sp, #12
    6e24:	af00      	add	r7, sp, #0
    6e26:	6078      	str	r0, [r7, #4]
    6e28:	460b      	mov	r3, r1
    6e2a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	78fa      	ldrb	r2, [r7, #3]
    6e30:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6e32:	bf00      	nop
    6e34:	370c      	adds	r7, #12
    6e36:	46bd      	mov	sp, r7
    6e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e3c:	4770      	bx	lr

00006e3e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    6e3e:	b480      	push	{r7}
    6e40:	b083      	sub	sp, #12
    6e42:	af00      	add	r7, sp, #0
    6e44:	6078      	str	r0, [r7, #4]
    6e46:	460b      	mov	r3, r1
    6e48:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	887a      	ldrh	r2, [r7, #2]
    6e4e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6e50:	bf00      	nop
    6e52:	370c      	adds	r7, #12
    6e54:	46bd      	mov	sp, r7
    6e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e5a:	4770      	bx	lr

00006e5c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6e5c:	b480      	push	{r7}
    6e5e:	b083      	sub	sp, #12
    6e60:	af00      	add	r7, sp, #0
    6e62:	6078      	str	r0, [r7, #4]
    6e64:	460b      	mov	r3, r1
    6e66:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	78fa      	ldrb	r2, [r7, #3]
    6e6c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6e6e:	bf00      	nop
    6e70:	370c      	adds	r7, #12
    6e72:	46bd      	mov	sp, r7
    6e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e78:	4770      	bx	lr

00006e7a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6e7a:	b480      	push	{r7}
    6e7c:	b083      	sub	sp, #12
    6e7e:	af00      	add	r7, sp, #0
    6e80:	6078      	str	r0, [r7, #4]
    6e82:	460b      	mov	r3, r1
    6e84:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	78fa      	ldrb	r2, [r7, #3]
    6e8a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6e8c:	bf00      	nop
    6e8e:	370c      	adds	r7, #12
    6e90:	46bd      	mov	sp, r7
    6e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e96:	4770      	bx	lr

00006e98 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6e98:	b480      	push	{r7}
    6e9a:	b085      	sub	sp, #20
    6e9c:	af00      	add	r7, sp, #0
    6e9e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	69db      	ldr	r3, [r3, #28]
    6ea4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6ea6:	68fb      	ldr	r3, [r7, #12]
    6ea8:	0a1b      	lsrs	r3, r3, #8
    6eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6eae:	60fb      	str	r3, [r7, #12]
	return tmp;
    6eb0:	68fb      	ldr	r3, [r7, #12]
}
    6eb2:	4618      	mov	r0, r3
    6eb4:	3714      	adds	r7, #20
    6eb6:	46bd      	mov	sp, r7
    6eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ebc:	4770      	bx	lr

00006ebe <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6ebe:	b480      	push	{r7}
    6ec0:	b083      	sub	sp, #12
    6ec2:	af00      	add	r7, sp, #0
    6ec4:	6078      	str	r0, [r7, #4]
    6ec6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	683a      	ldr	r2, [r7, #0]
    6ecc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6ece:	bf00      	nop
    6ed0:	370c      	adds	r7, #12
    6ed2:	46bd      	mov	sp, r7
    6ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ed8:	4770      	bx	lr
	...

00006edc <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6edc:	b580      	push	{r7, lr}
    6ede:	b082      	sub	sp, #8
    6ee0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6ee2:	4b13      	ldr	r3, [pc, #76]	; (6f30 <_osc32kctrl_init_sources+0x54>)
    6ee4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6ee6:	2300      	movs	r3, #0
    6ee8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6eea:	f242 018e 	movw	r1, #8334	; 0x208e
    6eee:	6878      	ldr	r0, [r7, #4]
    6ef0:	4b10      	ldr	r3, [pc, #64]	; (6f34 <_osc32kctrl_init_sources+0x58>)
    6ef2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6ef4:	2100      	movs	r1, #0
    6ef6:	6878      	ldr	r0, [r7, #4]
    6ef8:	4b0f      	ldr	r3, [pc, #60]	; (6f38 <_osc32kctrl_init_sources+0x5c>)
    6efa:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6efc:	2100      	movs	r1, #0
    6efe:	6878      	ldr	r0, [r7, #4]
    6f00:	4b0e      	ldr	r3, [pc, #56]	; (6f3c <_osc32kctrl_init_sources+0x60>)
    6f02:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6f04:	6878      	ldr	r0, [r7, #4]
    6f06:	4b0e      	ldr	r3, [pc, #56]	; (6f40 <_osc32kctrl_init_sources+0x64>)
    6f08:	4798      	blx	r3
    6f0a:	4603      	mov	r3, r0
    6f0c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6f0e:	887b      	ldrh	r3, [r7, #2]
    6f10:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6f12:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6f16:	4619      	mov	r1, r3
    6f18:	6878      	ldr	r0, [r7, #4]
    6f1a:	4b0a      	ldr	r3, [pc, #40]	; (6f44 <_osc32kctrl_init_sources+0x68>)
    6f1c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6f1e:	2100      	movs	r1, #0
    6f20:	6878      	ldr	r0, [r7, #4]
    6f22:	4b09      	ldr	r3, [pc, #36]	; (6f48 <_osc32kctrl_init_sources+0x6c>)
    6f24:	4798      	blx	r3
	(void)calib;
}
    6f26:	bf00      	nop
    6f28:	3708      	adds	r7, #8
    6f2a:	46bd      	mov	sp, r7
    6f2c:	bd80      	pop	{r7, pc}
    6f2e:	bf00      	nop
    6f30:	40001400 	.word	0x40001400
    6f34:	00006e3f 	.word	0x00006e3f
    6f38:	00006e5d 	.word	0x00006e5d
    6f3c:	00006e7b 	.word	0x00006e7b
    6f40:	00006e99 	.word	0x00006e99
    6f44:	00006ebf 	.word	0x00006ebf
    6f48:	00006e21 	.word	0x00006e21

00006f4c <hri_gclk_wait_for_sync>:
{
    6f4c:	b480      	push	{r7}
    6f4e:	b083      	sub	sp, #12
    6f50:	af00      	add	r7, sp, #0
    6f52:	6078      	str	r0, [r7, #4]
    6f54:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6f56:	bf00      	nop
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	685a      	ldr	r2, [r3, #4]
    6f5c:	683b      	ldr	r3, [r7, #0]
    6f5e:	4013      	ands	r3, r2
    6f60:	2b00      	cmp	r3, #0
    6f62:	d1f9      	bne.n	6f58 <hri_gclk_wait_for_sync+0xc>
}
    6f64:	bf00      	nop
    6f66:	370c      	adds	r7, #12
    6f68:	46bd      	mov	sp, r7
    6f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f6e:	4770      	bx	lr

00006f70 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6f70:	b480      	push	{r7}
    6f72:	b083      	sub	sp, #12
    6f74:	af00      	add	r7, sp, #0
    6f76:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6f78:	687b      	ldr	r3, [r7, #4]
    6f7a:	685b      	ldr	r3, [r3, #4]
    6f7c:	089b      	lsrs	r3, r3, #2
    6f7e:	f003 0301 	and.w	r3, r3, #1
    6f82:	2b00      	cmp	r3, #0
    6f84:	bf14      	ite	ne
    6f86:	2301      	movne	r3, #1
    6f88:	2300      	moveq	r3, #0
    6f8a:	b2db      	uxtb	r3, r3
}
    6f8c:	4618      	mov	r0, r3
    6f8e:	370c      	adds	r7, #12
    6f90:	46bd      	mov	sp, r7
    6f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f96:	4770      	bx	lr

00006f98 <hri_gclk_read_SYNCBUSY_reg>:
{
    6f98:	b480      	push	{r7}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	685b      	ldr	r3, [r3, #4]
}
    6fa4:	4618      	mov	r0, r3
    6fa6:	370c      	adds	r7, #12
    6fa8:	46bd      	mov	sp, r7
    6faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fae:	4770      	bx	lr

00006fb0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b086      	sub	sp, #24
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	60f8      	str	r0, [r7, #12]
    6fb8:	460b      	mov	r3, r1
    6fba:	607a      	str	r2, [r7, #4]
    6fbc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6fbe:	7afa      	ldrb	r2, [r7, #11]
    6fc0:	68fb      	ldr	r3, [r7, #12]
    6fc2:	3208      	adds	r2, #8
    6fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fc8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6fca:	697b      	ldr	r3, [r7, #20]
    6fcc:	f023 030f 	bic.w	r3, r3, #15
    6fd0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	f003 030f 	and.w	r3, r3, #15
    6fd8:	697a      	ldr	r2, [r7, #20]
    6fda:	4313      	orrs	r3, r2
    6fdc:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6fde:	7afa      	ldrb	r2, [r7, #11]
    6fe0:	68fb      	ldr	r3, [r7, #12]
    6fe2:	3208      	adds	r2, #8
    6fe4:	6979      	ldr	r1, [r7, #20]
    6fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6fea:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6fee:	68f8      	ldr	r0, [r7, #12]
    6ff0:	4b02      	ldr	r3, [pc, #8]	; (6ffc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6ff2:	4798      	blx	r3
}
    6ff4:	bf00      	nop
    6ff6:	3718      	adds	r7, #24
    6ff8:	46bd      	mov	sp, r7
    6ffa:	bd80      	pop	{r7, pc}
    6ffc:	00006f4d 	.word	0x00006f4d

00007000 <hri_gclk_write_PCHCTRL_reg>:
{
    7000:	b480      	push	{r7}
    7002:	b085      	sub	sp, #20
    7004:	af00      	add	r7, sp, #0
    7006:	60f8      	str	r0, [r7, #12]
    7008:	460b      	mov	r3, r1
    700a:	607a      	str	r2, [r7, #4]
    700c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    700e:	7afa      	ldrb	r2, [r7, #11]
    7010:	68fb      	ldr	r3, [r7, #12]
    7012:	3220      	adds	r2, #32
    7014:	6879      	ldr	r1, [r7, #4]
    7016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    701a:	bf00      	nop
    701c:	3714      	adds	r7, #20
    701e:	46bd      	mov	sp, r7
    7020:	f85d 7b04 	ldr.w	r7, [sp], #4
    7024:	4770      	bx	lr

00007026 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    7026:	b480      	push	{r7}
    7028:	b085      	sub	sp, #20
    702a:	af00      	add	r7, sp, #0
    702c:	60f8      	str	r0, [r7, #12]
    702e:	460b      	mov	r3, r1
    7030:	607a      	str	r2, [r7, #4]
    7032:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7034:	bf00      	nop
    7036:	7afa      	ldrb	r2, [r7, #11]
    7038:	68f9      	ldr	r1, [r7, #12]
    703a:	4613      	mov	r3, r2
    703c:	009b      	lsls	r3, r3, #2
    703e:	4413      	add	r3, r2
    7040:	009b      	lsls	r3, r3, #2
    7042:	440b      	add	r3, r1
    7044:	333c      	adds	r3, #60	; 0x3c
    7046:	681a      	ldr	r2, [r3, #0]
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	4013      	ands	r3, r2
    704c:	2b00      	cmp	r3, #0
    704e:	d1f2      	bne.n	7036 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    7050:	bf00      	nop
    7052:	3714      	adds	r7, #20
    7054:	46bd      	mov	sp, r7
    7056:	f85d 7b04 	ldr.w	r7, [sp], #4
    705a:	4770      	bx	lr

0000705c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    705c:	b480      	push	{r7}
    705e:	b083      	sub	sp, #12
    7060:	af00      	add	r7, sp, #0
    7062:	6078      	str	r0, [r7, #4]
    7064:	460b      	mov	r3, r1
    7066:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7068:	78fa      	ldrb	r2, [r7, #3]
    706a:	6879      	ldr	r1, [r7, #4]
    706c:	4613      	mov	r3, r2
    706e:	009b      	lsls	r3, r3, #2
    7070:	4413      	add	r3, r2
    7072:	009b      	lsls	r3, r3, #2
    7074:	440b      	add	r3, r1
    7076:	3340      	adds	r3, #64	; 0x40
    7078:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    707a:	f003 0301 	and.w	r3, r3, #1
    707e:	2b00      	cmp	r3, #0
    7080:	bf14      	ite	ne
    7082:	2301      	movne	r3, #1
    7084:	2300      	moveq	r3, #0
    7086:	b2db      	uxtb	r3, r3
}
    7088:	4618      	mov	r0, r3
    708a:	370c      	adds	r7, #12
    708c:	46bd      	mov	sp, r7
    708e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7092:	4770      	bx	lr

00007094 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    7094:	b480      	push	{r7}
    7096:	b083      	sub	sp, #12
    7098:	af00      	add	r7, sp, #0
    709a:	6078      	str	r0, [r7, #4]
    709c:	460b      	mov	r3, r1
    709e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    70a0:	78fa      	ldrb	r2, [r7, #3]
    70a2:	6879      	ldr	r1, [r7, #4]
    70a4:	4613      	mov	r3, r2
    70a6:	009b      	lsls	r3, r3, #2
    70a8:	4413      	add	r3, r2
    70aa:	009b      	lsls	r3, r3, #2
    70ac:	440b      	add	r3, r1
    70ae:	3340      	adds	r3, #64	; 0x40
    70b0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    70b2:	085b      	lsrs	r3, r3, #1
    70b4:	f003 0301 	and.w	r3, r3, #1
    70b8:	2b00      	cmp	r3, #0
    70ba:	bf14      	ite	ne
    70bc:	2301      	movne	r3, #1
    70be:	2300      	moveq	r3, #0
    70c0:	b2db      	uxtb	r3, r3
}
    70c2:	4618      	mov	r0, r3
    70c4:	370c      	adds	r7, #12
    70c6:	46bd      	mov	sp, r7
    70c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    70cc:	4770      	bx	lr
	...

000070d0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    70d0:	b580      	push	{r7, lr}
    70d2:	b082      	sub	sp, #8
    70d4:	af00      	add	r7, sp, #0
    70d6:	6078      	str	r0, [r7, #4]
    70d8:	460b      	mov	r3, r1
    70da:	70fb      	strb	r3, [r7, #3]
    70dc:	4613      	mov	r3, r2
    70de:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    70e0:	78fa      	ldrb	r2, [r7, #3]
    70e2:	6879      	ldr	r1, [r7, #4]
    70e4:	4613      	mov	r3, r2
    70e6:	009b      	lsls	r3, r3, #2
    70e8:	4413      	add	r3, r2
    70ea:	009b      	lsls	r3, r3, #2
    70ec:	440b      	add	r3, r1
    70ee:	3330      	adds	r3, #48	; 0x30
    70f0:	78ba      	ldrb	r2, [r7, #2]
    70f2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    70f4:	78fb      	ldrb	r3, [r7, #3]
    70f6:	2202      	movs	r2, #2
    70f8:	4619      	mov	r1, r3
    70fa:	6878      	ldr	r0, [r7, #4]
    70fc:	4b02      	ldr	r3, [pc, #8]	; (7108 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    70fe:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7100:	bf00      	nop
    7102:	3708      	adds	r7, #8
    7104:	46bd      	mov	sp, r7
    7106:	bd80      	pop	{r7, pc}
    7108:	00007027 	.word	0x00007027

0000710c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    710c:	b580      	push	{r7, lr}
    710e:	b084      	sub	sp, #16
    7110:	af00      	add	r7, sp, #0
    7112:	60f8      	str	r0, [r7, #12]
    7114:	460b      	mov	r3, r1
    7116:	607a      	str	r2, [r7, #4]
    7118:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    711a:	7afa      	ldrb	r2, [r7, #11]
    711c:	68f9      	ldr	r1, [r7, #12]
    711e:	4613      	mov	r3, r2
    7120:	009b      	lsls	r3, r3, #2
    7122:	4413      	add	r3, r2
    7124:	009b      	lsls	r3, r3, #2
    7126:	440b      	add	r3, r1
    7128:	3334      	adds	r3, #52	; 0x34
    712a:	687a      	ldr	r2, [r7, #4]
    712c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    712e:	7afb      	ldrb	r3, [r7, #11]
    7130:	2206      	movs	r2, #6
    7132:	4619      	mov	r1, r3
    7134:	68f8      	ldr	r0, [r7, #12]
    7136:	4b03      	ldr	r3, [pc, #12]	; (7144 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7138:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    713a:	bf00      	nop
    713c:	3710      	adds	r7, #16
    713e:	46bd      	mov	sp, r7
    7140:	bd80      	pop	{r7, pc}
    7142:	bf00      	nop
    7144:	00007027 	.word	0x00007027

00007148 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7148:	b480      	push	{r7}
    714a:	b085      	sub	sp, #20
    714c:	af00      	add	r7, sp, #0
    714e:	60f8      	str	r0, [r7, #12]
    7150:	460b      	mov	r3, r1
    7152:	607a      	str	r2, [r7, #4]
    7154:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7156:	7afa      	ldrb	r2, [r7, #11]
    7158:	68f9      	ldr	r1, [r7, #12]
    715a:	4613      	mov	r3, r2
    715c:	009b      	lsls	r3, r3, #2
    715e:	4413      	add	r3, r2
    7160:	009b      	lsls	r3, r3, #2
    7162:	440b      	add	r3, r1
    7164:	3338      	adds	r3, #56	; 0x38
    7166:	687a      	ldr	r2, [r7, #4]
    7168:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    716a:	bf00      	nop
    716c:	3714      	adds	r7, #20
    716e:	46bd      	mov	sp, r7
    7170:	f85d 7b04 	ldr.w	r7, [sp], #4
    7174:	4770      	bx	lr

00007176 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    7176:	b480      	push	{r7}
    7178:	b083      	sub	sp, #12
    717a:	af00      	add	r7, sp, #0
    717c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	691b      	ldr	r3, [r3, #16]
    7182:	085b      	lsrs	r3, r3, #1
    7184:	f003 0301 	and.w	r3, r3, #1
    7188:	2b00      	cmp	r3, #0
    718a:	bf14      	ite	ne
    718c:	2301      	movne	r3, #1
    718e:	2300      	moveq	r3, #0
    7190:	b2db      	uxtb	r3, r3
}
    7192:	4618      	mov	r0, r3
    7194:	370c      	adds	r7, #12
    7196:	46bd      	mov	sp, r7
    7198:	f85d 7b04 	ldr.w	r7, [sp], #4
    719c:	4770      	bx	lr

0000719e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    719e:	b480      	push	{r7}
    71a0:	b083      	sub	sp, #12
    71a2:	af00      	add	r7, sp, #0
    71a4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	691b      	ldr	r3, [r3, #16]
    71aa:	0a1b      	lsrs	r3, r3, #8
    71ac:	f003 0301 	and.w	r3, r3, #1
    71b0:	2b00      	cmp	r3, #0
    71b2:	bf14      	ite	ne
    71b4:	2301      	movne	r3, #1
    71b6:	2300      	moveq	r3, #0
    71b8:	b2db      	uxtb	r3, r3
}
    71ba:	4618      	mov	r0, r3
    71bc:	370c      	adds	r7, #12
    71be:	46bd      	mov	sp, r7
    71c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c4:	4770      	bx	lr

000071c6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    71c6:	b480      	push	{r7}
    71c8:	b085      	sub	sp, #20
    71ca:	af00      	add	r7, sp, #0
    71cc:	6078      	str	r0, [r7, #4]
    71ce:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	691b      	ldr	r3, [r3, #16]
    71d4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    71d6:	68fa      	ldr	r2, [r7, #12]
    71d8:	683b      	ldr	r3, [r7, #0]
    71da:	4013      	ands	r3, r2
    71dc:	60fb      	str	r3, [r7, #12]
	return tmp;
    71de:	68fb      	ldr	r3, [r7, #12]
}
    71e0:	4618      	mov	r0, r3
    71e2:	3714      	adds	r7, #20
    71e4:	46bd      	mov	sp, r7
    71e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ea:	4770      	bx	lr

000071ec <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    71ec:	b480      	push	{r7}
    71ee:	b085      	sub	sp, #20
    71f0:	af00      	add	r7, sp, #0
    71f2:	60f8      	str	r0, [r7, #12]
    71f4:	460b      	mov	r3, r1
    71f6:	607a      	str	r2, [r7, #4]
    71f8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    71fa:	7afb      	ldrb	r3, [r7, #11]
    71fc:	68fa      	ldr	r2, [r7, #12]
    71fe:	3304      	adds	r3, #4
    7200:	009b      	lsls	r3, r3, #2
    7202:	4413      	add	r3, r2
    7204:	687a      	ldr	r2, [r7, #4]
    7206:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7208:	bf00      	nop
    720a:	3714      	adds	r7, #20
    720c:	46bd      	mov	sp, r7
    720e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7212:	4770      	bx	lr

00007214 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7214:	b480      	push	{r7}
    7216:	b083      	sub	sp, #12
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
    721c:	460b      	mov	r3, r1
    721e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	78fa      	ldrb	r2, [r7, #3]
    7224:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7226:	bf00      	nop
    7228:	370c      	adds	r7, #12
    722a:	46bd      	mov	sp, r7
    722c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7230:	4770      	bx	lr

00007232 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    7232:	b480      	push	{r7}
    7234:	b085      	sub	sp, #20
    7236:	af00      	add	r7, sp, #0
    7238:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    723a:	687b      	ldr	r3, [r7, #4]
    723c:	f893 3020 	ldrb.w	r3, [r3, #32]
    7240:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7242:	7bfb      	ldrb	r3, [r7, #15]
    7244:	f003 0301 	and.w	r3, r3, #1
    7248:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    724a:	7bfb      	ldrb	r3, [r7, #15]
    724c:	2b00      	cmp	r3, #0
    724e:	bf14      	ite	ne
    7250:	2301      	movne	r3, #1
    7252:	2300      	moveq	r3, #0
    7254:	b2db      	uxtb	r3, r3
}
    7256:	4618      	mov	r0, r3
    7258:	3714      	adds	r7, #20
    725a:	46bd      	mov	sp, r7
    725c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7260:	4770      	bx	lr

00007262 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    7262:	b480      	push	{r7}
    7264:	b083      	sub	sp, #12
    7266:	af00      	add	r7, sp, #0
    7268:	6078      	str	r0, [r7, #4]
    726a:	460b      	mov	r3, r1
    726c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	78fa      	ldrb	r2, [r7, #3]
    7272:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7276:	bf00      	nop
    7278:	370c      	adds	r7, #12
    727a:	46bd      	mov	sp, r7
    727c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7280:	4770      	bx	lr

00007282 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    7282:	b480      	push	{r7}
    7284:	b083      	sub	sp, #12
    7286:	af00      	add	r7, sp, #0
    7288:	6078      	str	r0, [r7, #4]
    728a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    728c:	687b      	ldr	r3, [r7, #4]
    728e:	683a      	ldr	r2, [r7, #0]
    7290:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7292:	bf00      	nop
    7294:	370c      	adds	r7, #12
    7296:	46bd      	mov	sp, r7
    7298:	f85d 7b04 	ldr.w	r7, [sp], #4
    729c:	4770      	bx	lr

0000729e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    729e:	b480      	push	{r7}
    72a0:	b083      	sub	sp, #12
    72a2:	af00      	add	r7, sp, #0
    72a4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    72a6:	687b      	ldr	r3, [r7, #4]
    72a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    72aa:	4618      	mov	r0, r3
    72ac:	370c      	adds	r7, #12
    72ae:	46bd      	mov	sp, r7
    72b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b4:	4770      	bx	lr

000072b6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    72b6:	b480      	push	{r7}
    72b8:	b083      	sub	sp, #12
    72ba:	af00      	add	r7, sp, #0
    72bc:	6078      	str	r0, [r7, #4]
    72be:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	683a      	ldr	r2, [r7, #0]
    72c4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    72c6:	bf00      	nop
    72c8:	370c      	adds	r7, #12
    72ca:	46bd      	mov	sp, r7
    72cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    72d0:	4770      	bx	lr

000072d2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    72d2:	b480      	push	{r7}
    72d4:	b085      	sub	sp, #20
    72d6:	af00      	add	r7, sp, #0
    72d8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    72da:	687b      	ldr	r3, [r7, #4]
    72dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    72e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    72e2:	7bfb      	ldrb	r3, [r7, #15]
    72e4:	085b      	lsrs	r3, r3, #1
    72e6:	b2db      	uxtb	r3, r3
    72e8:	f003 0301 	and.w	r3, r3, #1
    72ec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    72ee:	7bfb      	ldrb	r3, [r7, #15]
    72f0:	2b00      	cmp	r3, #0
    72f2:	bf14      	ite	ne
    72f4:	2301      	movne	r3, #1
    72f6:	2300      	moveq	r3, #0
    72f8:	b2db      	uxtb	r3, r3
}
    72fa:	4618      	mov	r0, r3
    72fc:	3714      	adds	r7, #20
    72fe:	46bd      	mov	sp, r7
    7300:	f85d 7b04 	ldr.w	r7, [sp], #4
    7304:	4770      	bx	lr

00007306 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7306:	b480      	push	{r7}
    7308:	b085      	sub	sp, #20
    730a:	af00      	add	r7, sp, #0
    730c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    730e:	687b      	ldr	r3, [r7, #4]
    7310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7314:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7316:	7bfb      	ldrb	r3, [r7, #15]
    7318:	089b      	lsrs	r3, r3, #2
    731a:	b2db      	uxtb	r3, r3
    731c:	f003 0301 	and.w	r3, r3, #1
    7320:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7322:	7bfb      	ldrb	r3, [r7, #15]
    7324:	2b00      	cmp	r3, #0
    7326:	bf14      	ite	ne
    7328:	2301      	movne	r3, #1
    732a:	2300      	moveq	r3, #0
    732c:	b2db      	uxtb	r3, r3
}
    732e:	4618      	mov	r0, r3
    7330:	3714      	adds	r7, #20
    7332:	46bd      	mov	sp, r7
    7334:	f85d 7b04 	ldr.w	r7, [sp], #4
    7338:	4770      	bx	lr

0000733a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    733a:	b480      	push	{r7}
    733c:	b085      	sub	sp, #20
    733e:	af00      	add	r7, sp, #0
    7340:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7348:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    734a:	7bfb      	ldrb	r3, [r7, #15]
    734c:	08db      	lsrs	r3, r3, #3
    734e:	b2db      	uxtb	r3, r3
    7350:	f003 0301 	and.w	r3, r3, #1
    7354:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7356:	7bfb      	ldrb	r3, [r7, #15]
    7358:	2b00      	cmp	r3, #0
    735a:	bf14      	ite	ne
    735c:	2301      	movne	r3, #1
    735e:	2300      	moveq	r3, #0
    7360:	b2db      	uxtb	r3, r3
}
    7362:	4618      	mov	r0, r3
    7364:	3714      	adds	r7, #20
    7366:	46bd      	mov	sp, r7
    7368:	f85d 7b04 	ldr.w	r7, [sp], #4
    736c:	4770      	bx	lr

0000736e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    736e:	b480      	push	{r7}
    7370:	b085      	sub	sp, #20
    7372:	af00      	add	r7, sp, #0
    7374:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    737c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    737e:	7bfb      	ldrb	r3, [r7, #15]
    7380:	091b      	lsrs	r3, r3, #4
    7382:	b2db      	uxtb	r3, r3
    7384:	f003 0301 	and.w	r3, r3, #1
    7388:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    738a:	7bfb      	ldrb	r3, [r7, #15]
    738c:	2b00      	cmp	r3, #0
    738e:	bf14      	ite	ne
    7390:	2301      	movne	r3, #1
    7392:	2300      	moveq	r3, #0
    7394:	b2db      	uxtb	r3, r3
}
    7396:	4618      	mov	r0, r3
    7398:	3714      	adds	r7, #20
    739a:	46bd      	mov	sp, r7
    739c:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a0:	4770      	bx	lr
	...

000073a4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    73a4:	b580      	push	{r7, lr}
    73a6:	b082      	sub	sp, #8
    73a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    73aa:	4b0a      	ldr	r3, [pc, #40]	; (73d4 <_oscctrl_init_sources+0x30>)
    73ac:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    73ae:	4a0a      	ldr	r2, [pc, #40]	; (73d8 <_oscctrl_init_sources+0x34>)
    73b0:	2101      	movs	r1, #1
    73b2:	6878      	ldr	r0, [r7, #4]
    73b4:	4b09      	ldr	r3, [pc, #36]	; (73dc <_oscctrl_init_sources+0x38>)
    73b6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    73b8:	bf00      	nop
    73ba:	6878      	ldr	r0, [r7, #4]
    73bc:	4b08      	ldr	r3, [pc, #32]	; (73e0 <_oscctrl_init_sources+0x3c>)
    73be:	4798      	blx	r3
    73c0:	4603      	mov	r3, r0
    73c2:	f083 0301 	eor.w	r3, r3, #1
    73c6:	b2db      	uxtb	r3, r3
    73c8:	2b00      	cmp	r3, #0
    73ca:	d1f6      	bne.n	73ba <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    73cc:	bf00      	nop
    73ce:	3708      	adds	r7, #8
    73d0:	46bd      	mov	sp, r7
    73d2:	bd80      	pop	{r7, pc}
    73d4:	40001000 	.word	0x40001000
    73d8:	03002646 	.word	0x03002646
    73dc:	000071ed 	.word	0x000071ed
    73e0:	00007177 	.word	0x00007177

000073e4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    73e4:	b580      	push	{r7, lr}
    73e6:	b084      	sub	sp, #16
    73e8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    73ea:	4b6b      	ldr	r3, [pc, #428]	; (7598 <_oscctrl_init_referenced_generators+0x1b4>)
    73ec:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    73ee:	2204      	movs	r2, #4
    73f0:	2100      	movs	r1, #0
    73f2:	486a      	ldr	r0, [pc, #424]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    73f4:	4b6a      	ldr	r3, [pc, #424]	; (75a0 <_oscctrl_init_referenced_generators+0x1bc>)
    73f6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    73f8:	bf00      	nop
    73fa:	4868      	ldr	r0, [pc, #416]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    73fc:	4b69      	ldr	r3, [pc, #420]	; (75a4 <_oscctrl_init_referenced_generators+0x1c0>)
    73fe:	4798      	blx	r3
    7400:	4603      	mov	r3, r0
    7402:	2b00      	cmp	r3, #0
    7404:	d1f9      	bne.n	73fa <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7406:	2100      	movs	r1, #0
    7408:	68f8      	ldr	r0, [r7, #12]
    740a:	4b67      	ldr	r3, [pc, #412]	; (75a8 <_oscctrl_init_referenced_generators+0x1c4>)
    740c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    740e:	4967      	ldr	r1, [pc, #412]	; (75ac <_oscctrl_init_referenced_generators+0x1c8>)
    7410:	68f8      	ldr	r0, [r7, #12]
    7412:	4b67      	ldr	r3, [pc, #412]	; (75b0 <_oscctrl_init_referenced_generators+0x1cc>)
    7414:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7416:	bf00      	nop
    7418:	68f8      	ldr	r0, [r7, #12]
    741a:	4b66      	ldr	r3, [pc, #408]	; (75b4 <_oscctrl_init_referenced_generators+0x1d0>)
    741c:	4798      	blx	r3
    741e:	4603      	mov	r3, r0
    7420:	2b00      	cmp	r3, #0
    7422:	d1f9      	bne.n	7418 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7424:	2100      	movs	r1, #0
    7426:	68f8      	ldr	r0, [r7, #12]
    7428:	4b63      	ldr	r3, [pc, #396]	; (75b8 <_oscctrl_init_referenced_generators+0x1d4>)
    742a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    742c:	bf00      	nop
    742e:	68f8      	ldr	r0, [r7, #12]
    7430:	4b62      	ldr	r3, [pc, #392]	; (75bc <_oscctrl_init_referenced_generators+0x1d8>)
    7432:	4798      	blx	r3
    7434:	4603      	mov	r3, r0
    7436:	2b00      	cmp	r3, #0
    7438:	d1f9      	bne.n	742e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    743a:	2302      	movs	r3, #2
    743c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    743e:	7afb      	ldrb	r3, [r7, #11]
    7440:	4619      	mov	r1, r3
    7442:	68f8      	ldr	r0, [r7, #12]
    7444:	4b58      	ldr	r3, [pc, #352]	; (75a8 <_oscctrl_init_referenced_generators+0x1c4>)
    7446:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7448:	bf00      	nop
    744a:	68f8      	ldr	r0, [r7, #12]
    744c:	4b5c      	ldr	r3, [pc, #368]	; (75c0 <_oscctrl_init_referenced_generators+0x1dc>)
    744e:	4798      	blx	r3
    7450:	4603      	mov	r3, r0
    7452:	2b00      	cmp	r3, #0
    7454:	d1f9      	bne.n	744a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7456:	68f8      	ldr	r0, [r7, #12]
    7458:	4b5a      	ldr	r3, [pc, #360]	; (75c4 <_oscctrl_init_referenced_generators+0x1e0>)
    745a:	4798      	blx	r3
    745c:	4603      	mov	r3, r0
    745e:	4619      	mov	r1, r3
    7460:	68f8      	ldr	r0, [r7, #12]
    7462:	4b59      	ldr	r3, [pc, #356]	; (75c8 <_oscctrl_init_referenced_generators+0x1e4>)
    7464:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7466:	bf00      	nop
    7468:	68f8      	ldr	r0, [r7, #12]
    746a:	4b58      	ldr	r3, [pc, #352]	; (75cc <_oscctrl_init_referenced_generators+0x1e8>)
    746c:	4798      	blx	r3
    746e:	4603      	mov	r3, r0
    7470:	2b00      	cmp	r3, #0
    7472:	d1f9      	bne.n	7468 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7474:	2319      	movs	r3, #25
    7476:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    7478:	7afb      	ldrb	r3, [r7, #11]
    747a:	4619      	mov	r1, r3
    747c:	68f8      	ldr	r0, [r7, #12]
    747e:	4b4e      	ldr	r3, [pc, #312]	; (75b8 <_oscctrl_init_referenced_generators+0x1d4>)
    7480:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7482:	bf00      	nop
    7484:	68f8      	ldr	r0, [r7, #12]
    7486:	4b4d      	ldr	r3, [pc, #308]	; (75bc <_oscctrl_init_referenced_generators+0x1d8>)
    7488:	4798      	blx	r3
    748a:	4603      	mov	r3, r0
    748c:	2b00      	cmp	r3, #0
    748e:	d1f9      	bne.n	7484 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    7490:	2245      	movs	r2, #69	; 0x45
    7492:	2101      	movs	r1, #1
    7494:	4841      	ldr	r0, [pc, #260]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    7496:	4b4e      	ldr	r3, [pc, #312]	; (75d0 <_oscctrl_init_referenced_generators+0x1ec>)
    7498:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    749a:	223b      	movs	r2, #59	; 0x3b
    749c:	2100      	movs	r1, #0
    749e:	68f8      	ldr	r0, [r7, #12]
    74a0:	4b4c      	ldr	r3, [pc, #304]	; (75d4 <_oscctrl_init_referenced_generators+0x1f0>)
    74a2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    74a4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    74a8:	2100      	movs	r1, #0
    74aa:	68f8      	ldr	r0, [r7, #12]
    74ac:	4b4a      	ldr	r3, [pc, #296]	; (75d8 <_oscctrl_init_referenced_generators+0x1f4>)
    74ae:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    74b0:	2242      	movs	r2, #66	; 0x42
    74b2:	2100      	movs	r1, #0
    74b4:	68f8      	ldr	r0, [r7, #12]
    74b6:	4b49      	ldr	r3, [pc, #292]	; (75dc <_oscctrl_init_referenced_generators+0x1f8>)
    74b8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    74ba:	4a49      	ldr	r2, [pc, #292]	; (75e0 <_oscctrl_init_referenced_generators+0x1fc>)
    74bc:	2101      	movs	r1, #1
    74be:	68f8      	ldr	r0, [r7, #12]
    74c0:	4b44      	ldr	r3, [pc, #272]	; (75d4 <_oscctrl_init_referenced_generators+0x1f0>)
    74c2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    74c4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    74c8:	2101      	movs	r1, #1
    74ca:	68f8      	ldr	r0, [r7, #12]
    74cc:	4b42      	ldr	r3, [pc, #264]	; (75d8 <_oscctrl_init_referenced_generators+0x1f4>)
    74ce:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    74d0:	2202      	movs	r2, #2
    74d2:	2101      	movs	r1, #1
    74d4:	68f8      	ldr	r0, [r7, #12]
    74d6:	4b41      	ldr	r3, [pc, #260]	; (75dc <_oscctrl_init_referenced_generators+0x1f8>)
    74d8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    74da:	68f8      	ldr	r0, [r7, #12]
    74dc:	4b41      	ldr	r3, [pc, #260]	; (75e4 <_oscctrl_init_referenced_generators+0x200>)
    74de:	4798      	blx	r3
    74e0:	4603      	mov	r3, r0
    74e2:	2b00      	cmp	r3, #0
    74e4:	d00c      	beq.n	7500 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    74e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    74ea:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    74ec:	bf00      	nop
    74ee:	6879      	ldr	r1, [r7, #4]
    74f0:	68f8      	ldr	r0, [r7, #12]
    74f2:	4b3d      	ldr	r3, [pc, #244]	; (75e8 <_oscctrl_init_referenced_generators+0x204>)
    74f4:	4798      	blx	r3
    74f6:	4602      	mov	r2, r0
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	429a      	cmp	r2, r3
    74fc:	d1f7      	bne.n	74ee <_oscctrl_init_referenced_generators+0x10a>
    74fe:	e009      	b.n	7514 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7500:	bf00      	nop
    7502:	68f8      	ldr	r0, [r7, #12]
    7504:	4b39      	ldr	r3, [pc, #228]	; (75ec <_oscctrl_init_referenced_generators+0x208>)
    7506:	4798      	blx	r3
    7508:	4603      	mov	r3, r0
    750a:	f083 0301 	eor.w	r3, r3, #1
    750e:	b2db      	uxtb	r3, r3
    7510:	2b00      	cmp	r3, #0
    7512:	d1f6      	bne.n	7502 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    7514:	bf00      	nop
    7516:	2100      	movs	r1, #0
    7518:	68f8      	ldr	r0, [r7, #12]
    751a:	4b35      	ldr	r3, [pc, #212]	; (75f0 <_oscctrl_init_referenced_generators+0x20c>)
    751c:	4798      	blx	r3
    751e:	4603      	mov	r3, r0
    7520:	f083 0301 	eor.w	r3, r3, #1
    7524:	b2db      	uxtb	r3, r3
    7526:	2b00      	cmp	r3, #0
    7528:	d009      	beq.n	753e <_oscctrl_init_referenced_generators+0x15a>
    752a:	2100      	movs	r1, #0
    752c:	68f8      	ldr	r0, [r7, #12]
    752e:	4b31      	ldr	r3, [pc, #196]	; (75f4 <_oscctrl_init_referenced_generators+0x210>)
    7530:	4798      	blx	r3
    7532:	4603      	mov	r3, r0
    7534:	f083 0301 	eor.w	r3, r3, #1
    7538:	b2db      	uxtb	r3, r3
    753a:	2b00      	cmp	r3, #0
    753c:	d1eb      	bne.n	7516 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    753e:	bf00      	nop
    7540:	2101      	movs	r1, #1
    7542:	68f8      	ldr	r0, [r7, #12]
    7544:	4b2a      	ldr	r3, [pc, #168]	; (75f0 <_oscctrl_init_referenced_generators+0x20c>)
    7546:	4798      	blx	r3
    7548:	4603      	mov	r3, r0
    754a:	f083 0301 	eor.w	r3, r3, #1
    754e:	b2db      	uxtb	r3, r3
    7550:	2b00      	cmp	r3, #0
    7552:	d009      	beq.n	7568 <_oscctrl_init_referenced_generators+0x184>
    7554:	2101      	movs	r1, #1
    7556:	68f8      	ldr	r0, [r7, #12]
    7558:	4b26      	ldr	r3, [pc, #152]	; (75f4 <_oscctrl_init_referenced_generators+0x210>)
    755a:	4798      	blx	r3
    755c:	4603      	mov	r3, r0
    755e:	f083 0301 	eor.w	r3, r3, #1
    7562:	b2db      	uxtb	r3, r3
    7564:	2b00      	cmp	r3, #0
    7566:	d1eb      	bne.n	7540 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7568:	bf00      	nop
    756a:	480c      	ldr	r0, [pc, #48]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    756c:	4b22      	ldr	r3, [pc, #136]	; (75f8 <_oscctrl_init_referenced_generators+0x214>)
    756e:	4798      	blx	r3
    7570:	4603      	mov	r3, r0
    7572:	2b00      	cmp	r3, #0
    7574:	d1f9      	bne.n	756a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    7576:	2207      	movs	r2, #7
    7578:	2100      	movs	r1, #0
    757a:	4808      	ldr	r0, [pc, #32]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    757c:	4b08      	ldr	r3, [pc, #32]	; (75a0 <_oscctrl_init_referenced_generators+0x1bc>)
    757e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7580:	bf00      	nop
    7582:	4806      	ldr	r0, [pc, #24]	; (759c <_oscctrl_init_referenced_generators+0x1b8>)
    7584:	4b07      	ldr	r3, [pc, #28]	; (75a4 <_oscctrl_init_referenced_generators+0x1c0>)
    7586:	4798      	blx	r3
    7588:	4603      	mov	r3, r0
    758a:	2b00      	cmp	r3, #0
    758c:	d1f9      	bne.n	7582 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    758e:	bf00      	nop
    7590:	3710      	adds	r7, #16
    7592:	46bd      	mov	sp, r7
    7594:	bd80      	pop	{r7, pc}
    7596:	bf00      	nop
    7598:	40001000 	.word	0x40001000
    759c:	40001c00 	.word	0x40001c00
    75a0:	00006fb1 	.word	0x00006fb1
    75a4:	00006f71 	.word	0x00006f71
    75a8:	00007215 	.word	0x00007215
    75ac:	0401bb80 	.word	0x0401bb80
    75b0:	000072b7 	.word	0x000072b7
    75b4:	0000736f 	.word	0x0000736f
    75b8:	00007263 	.word	0x00007263
    75bc:	00007307 	.word	0x00007307
    75c0:	000072d3 	.word	0x000072d3
    75c4:	0000729f 	.word	0x0000729f
    75c8:	00007283 	.word	0x00007283
    75cc:	0000733b 	.word	0x0000733b
    75d0:	00007001 	.word	0x00007001
    75d4:	0000710d 	.word	0x0000710d
    75d8:	00007149 	.word	0x00007149
    75dc:	000070d1 	.word	0x000070d1
    75e0:	000407a0 	.word	0x000407a0
    75e4:	00007233 	.word	0x00007233
    75e8:	000071c7 	.word	0x000071c7
    75ec:	0000719f 	.word	0x0000719f
    75f0:	0000705d 	.word	0x0000705d
    75f4:	00007095 	.word	0x00007095
    75f8:	00006f99 	.word	0x00006f99

000075fc <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    75fc:	b480      	push	{r7}
    75fe:	b085      	sub	sp, #20
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
    7604:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    7606:	687b      	ldr	r3, [r7, #4]
    7608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    760a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    760c:	68fa      	ldr	r2, [r7, #12]
    760e:	683b      	ldr	r3, [r7, #0]
    7610:	4013      	ands	r3, r2
    7612:	60fb      	str	r3, [r7, #12]
	return tmp;
    7614:	68fb      	ldr	r3, [r7, #12]
}
    7616:	4618      	mov	r0, r3
    7618:	3714      	adds	r7, #20
    761a:	46bd      	mov	sp, r7
    761c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7620:	4770      	bx	lr

00007622 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    7622:	b480      	push	{r7}
    7624:	b085      	sub	sp, #20
    7626:	af00      	add	r7, sp, #0
    7628:	6078      	str	r0, [r7, #4]
    762a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7630:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7632:	68fa      	ldr	r2, [r7, #12]
    7634:	683b      	ldr	r3, [r7, #0]
    7636:	4013      	ands	r3, r2
    7638:	60fb      	str	r3, [r7, #12]
	return tmp;
    763a:	68fb      	ldr	r3, [r7, #12]
}
    763c:	4618      	mov	r0, r3
    763e:	3714      	adds	r7, #20
    7640:	46bd      	mov	sp, r7
    7642:	f85d 7b04 	ldr.w	r7, [sp], #4
    7646:	4770      	bx	lr

00007648 <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    7648:	b480      	push	{r7}
    764a:	b085      	sub	sp, #20
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
    7650:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7656:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7658:	68fa      	ldr	r2, [r7, #12]
    765a:	683b      	ldr	r3, [r7, #0]
    765c:	4013      	ands	r3, r2
    765e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7660:	68fb      	ldr	r3, [r7, #12]
}
    7662:	4618      	mov	r0, r3
    7664:	3714      	adds	r7, #20
    7666:	46bd      	mov	sp, r7
    7668:	f85d 7b04 	ldr.w	r7, [sp], #4
    766c:	4770      	bx	lr

0000766e <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    766e:	b480      	push	{r7}
    7670:	b085      	sub	sp, #20
    7672:	af00      	add	r7, sp, #0
    7674:	6078      	str	r0, [r7, #4]
    7676:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    767c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    767e:	68fa      	ldr	r2, [r7, #12]
    7680:	683b      	ldr	r3, [r7, #0]
    7682:	4013      	ands	r3, r2
    7684:	60fb      	str	r3, [r7, #12]
	return tmp;
    7686:	68fb      	ldr	r3, [r7, #12]
}
    7688:	4618      	mov	r0, r3
    768a:	3714      	adds	r7, #20
    768c:	46bd      	mov	sp, r7
    768e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7692:	4770      	bx	lr

00007694 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    7694:	b480      	push	{r7}
    7696:	b083      	sub	sp, #12
    7698:	af00      	add	r7, sp, #0
    769a:	6078      	str	r0, [r7, #4]
    769c:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	683a      	ldr	r2, [r7, #0]
    76a2:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    76a4:	bf00      	nop
    76a6:	370c      	adds	r7, #12
    76a8:	46bd      	mov	sp, r7
    76aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ae:	4770      	bx	lr

000076b0 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    76b0:	b480      	push	{r7}
    76b2:	b085      	sub	sp, #20
    76b4:	af00      	add	r7, sp, #0
    76b6:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    76b8:	230a      	movs	r3, #10
    76ba:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    76c2:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    76c6:	d101      	bne.n	76cc <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    76c8:	230d      	movs	r3, #13
    76ca:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    76cc:	687b      	ldr	r3, [r7, #4]
    76ce:	0e1b      	lsrs	r3, r3, #24
    76d0:	f003 030f 	and.w	r3, r3, #15
    76d4:	015a      	lsls	r2, r3, #5
    76d6:	6879      	ldr	r1, [r7, #4]
    76d8:	4b06      	ldr	r3, [pc, #24]	; (76f4 <_pac_get_peripheral_id+0x44>)
    76da:	400b      	ands	r3, r1
    76dc:	68f9      	ldr	r1, [r7, #12]
    76de:	40cb      	lsrs	r3, r1
    76e0:	4413      	add	r3, r2
    76e2:	60fb      	str	r3, [r7, #12]

	return peripheral;
    76e4:	68fb      	ldr	r3, [r7, #12]
}
    76e6:	4618      	mov	r0, r3
    76e8:	3714      	adds	r7, #20
    76ea:	46bd      	mov	sp, r7
    76ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    76f0:	4770      	bx	lr
    76f2:	bf00      	nop
    76f4:	000fff00 	.word	0x000fff00

000076f8 <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b086      	sub	sp, #24
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    7706:	bf8c      	ite	hi
    7708:	2301      	movhi	r3, #1
    770a:	2300      	movls	r3, #0
    770c:	b2db      	uxtb	r3, r3
    770e:	2239      	movs	r2, #57	; 0x39
    7710:	4917      	ldr	r1, [pc, #92]	; (7770 <_periph_lock+0x78>)
    7712:	4618      	mov	r0, r3
    7714:	4b17      	ldr	r3, [pc, #92]	; (7774 <_periph_lock+0x7c>)
    7716:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    7718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    771c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    771e:	6878      	ldr	r0, [r7, #4]
    7720:	4b15      	ldr	r3, [pc, #84]	; (7778 <_periph_lock+0x80>)
    7722:	4798      	blx	r3
    7724:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    7726:	693b      	ldr	r3, [r7, #16]
    7728:	b29b      	uxth	r3, r3
    772a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    772e:	4619      	mov	r1, r3
    7730:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7734:	4b11      	ldr	r3, [pc, #68]	; (777c <_periph_lock+0x84>)
    7736:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    7738:	f107 030f 	add.w	r3, r7, #15
    773c:	4619      	mov	r1, r3
    773e:	6878      	ldr	r0, [r7, #4]
    7740:	4b0f      	ldr	r3, [pc, #60]	; (7780 <_periph_lock+0x88>)
    7742:	4798      	blx	r3
	} while (!stat && timeout--);
    7744:	7bfb      	ldrb	r3, [r7, #15]
    7746:	f083 0301 	eor.w	r3, r3, #1
    774a:	b2db      	uxtb	r3, r3
    774c:	2b00      	cmp	r3, #0
    774e:	d004      	beq.n	775a <_periph_lock+0x62>
    7750:	697b      	ldr	r3, [r7, #20]
    7752:	1e5a      	subs	r2, r3, #1
    7754:	617a      	str	r2, [r7, #20]
    7756:	2b00      	cmp	r3, #0
    7758:	d1ee      	bne.n	7738 <_periph_lock+0x40>

	if (timeout < 0) {
    775a:	697b      	ldr	r3, [r7, #20]
    775c:	2b00      	cmp	r3, #0
    775e:	da02      	bge.n	7766 <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    7760:	f06f 0307 	mvn.w	r3, #7
    7764:	e000      	b.n	7768 <_periph_lock+0x70>
	}

	return ERR_NONE;
    7766:	2300      	movs	r3, #0
}
    7768:	4618      	mov	r0, r3
    776a:	3718      	adds	r7, #24
    776c:	46bd      	mov	sp, r7
    776e:	bd80      	pop	{r7, pc}
    7770:	00019a28 	.word	0x00019a28
    7774:	00005565 	.word	0x00005565
    7778:	000076b1 	.word	0x000076b1
    777c:	00007695 	.word	0x00007695
    7780:	0000780d 	.word	0x0000780d

00007784 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    7784:	b580      	push	{r7, lr}
    7786:	b086      	sub	sp, #24
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    7792:	bf8c      	ite	hi
    7794:	2301      	movhi	r3, #1
    7796:	2300      	movls	r3, #0
    7798:	b2db      	uxtb	r3, r3
    779a:	2253      	movs	r2, #83	; 0x53
    779c:	4916      	ldr	r1, [pc, #88]	; (77f8 <_periph_unlock+0x74>)
    779e:	4618      	mov	r0, r3
    77a0:	4b16      	ldr	r3, [pc, #88]	; (77fc <_periph_unlock+0x78>)
    77a2:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    77a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    77a8:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    77aa:	6878      	ldr	r0, [r7, #4]
    77ac:	4b14      	ldr	r3, [pc, #80]	; (7800 <_periph_unlock+0x7c>)
    77ae:	4798      	blx	r3
    77b0:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    77b2:	693b      	ldr	r3, [r7, #16]
    77b4:	b29b      	uxth	r3, r3
    77b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    77ba:	4619      	mov	r1, r3
    77bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    77c0:	4b10      	ldr	r3, [pc, #64]	; (7804 <_periph_unlock+0x80>)
    77c2:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    77c4:	f107 030f 	add.w	r3, r7, #15
    77c8:	4619      	mov	r1, r3
    77ca:	6878      	ldr	r0, [r7, #4]
    77cc:	4b0e      	ldr	r3, [pc, #56]	; (7808 <_periph_unlock+0x84>)
    77ce:	4798      	blx	r3
	} while (stat && timeout--);
    77d0:	7bfb      	ldrb	r3, [r7, #15]
    77d2:	2b00      	cmp	r3, #0
    77d4:	d004      	beq.n	77e0 <_periph_unlock+0x5c>
    77d6:	697b      	ldr	r3, [r7, #20]
    77d8:	1e5a      	subs	r2, r3, #1
    77da:	617a      	str	r2, [r7, #20]
    77dc:	2b00      	cmp	r3, #0
    77de:	d1f1      	bne.n	77c4 <_periph_unlock+0x40>

	if (timeout < 0) {
    77e0:	697b      	ldr	r3, [r7, #20]
    77e2:	2b00      	cmp	r3, #0
    77e4:	da02      	bge.n	77ec <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    77e6:	f06f 0307 	mvn.w	r3, #7
    77ea:	e000      	b.n	77ee <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    77ec:	2300      	movs	r3, #0
}
    77ee:	4618      	mov	r0, r3
    77f0:	3718      	adds	r7, #24
    77f2:	46bd      	mov	sp, r7
    77f4:	bd80      	pop	{r7, pc}
    77f6:	bf00      	nop
    77f8:	00019a28 	.word	0x00019a28
    77fc:	00005565 	.word	0x00005565
    7800:	000076b1 	.word	0x000076b1
    7804:	00007695 	.word	0x00007695
    7808:	0000780d 	.word	0x0000780d

0000780c <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    780c:	b580      	push	{r7, lr}
    780e:	b084      	sub	sp, #16
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
    7814:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    781c:	bf8c      	ite	hi
    781e:	2301      	movhi	r3, #1
    7820:	2300      	movls	r3, #0
    7822:	b2db      	uxtb	r3, r3
    7824:	226d      	movs	r2, #109	; 0x6d
    7826:	4931      	ldr	r1, [pc, #196]	; (78ec <_periph_get_lock_state+0xe0>)
    7828:	4618      	mov	r0, r3
    782a:	4b31      	ldr	r3, [pc, #196]	; (78f0 <_periph_get_lock_state+0xe4>)
    782c:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    782e:	6878      	ldr	r0, [r7, #4]
    7830:	4b30      	ldr	r3, [pc, #192]	; (78f4 <_periph_get_lock_state+0xe8>)
    7832:	4798      	blx	r3
    7834:	4603      	mov	r3, r0
    7836:	f003 031f 	and.w	r3, r3, #31
    783a:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    783c:	687b      	ldr	r3, [r7, #4]
    783e:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    7842:	d211      	bcs.n	7868 <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    7844:	2201      	movs	r2, #1
    7846:	68fb      	ldr	r3, [r7, #12]
    7848:	fa02 f303 	lsl.w	r3, r2, r3
    784c:	4619      	mov	r1, r3
    784e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7852:	4b29      	ldr	r3, [pc, #164]	; (78f8 <_periph_get_lock_state+0xec>)
    7854:	4798      	blx	r3
    7856:	4603      	mov	r3, r0
    7858:	2b00      	cmp	r3, #0
    785a:	bf14      	ite	ne
    785c:	2301      	movne	r3, #1
    785e:	2300      	moveq	r3, #0
    7860:	b2da      	uxtb	r2, r3
    7862:	683b      	ldr	r3, [r7, #0]
    7864:	701a      	strb	r2, [r3, #0]
    7866:	e03c      	b.n	78e2 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    786e:	d211      	bcs.n	7894 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    7870:	2201      	movs	r2, #1
    7872:	68fb      	ldr	r3, [r7, #12]
    7874:	fa02 f303 	lsl.w	r3, r2, r3
    7878:	4619      	mov	r1, r3
    787a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    787e:	4b1f      	ldr	r3, [pc, #124]	; (78fc <_periph_get_lock_state+0xf0>)
    7880:	4798      	blx	r3
    7882:	4603      	mov	r3, r0
    7884:	2b00      	cmp	r3, #0
    7886:	bf14      	ite	ne
    7888:	2301      	movne	r3, #1
    788a:	2300      	moveq	r3, #0
    788c:	b2da      	uxtb	r2, r3
    788e:	683b      	ldr	r3, [r7, #0]
    7890:	701a      	strb	r2, [r3, #0]
    7892:	e026      	b.n	78e2 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    789a:	d211      	bcs.n	78c0 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    789c:	2201      	movs	r2, #1
    789e:	68fb      	ldr	r3, [r7, #12]
    78a0:	fa02 f303 	lsl.w	r3, r2, r3
    78a4:	4619      	mov	r1, r3
    78a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    78aa:	4b15      	ldr	r3, [pc, #84]	; (7900 <_periph_get_lock_state+0xf4>)
    78ac:	4798      	blx	r3
    78ae:	4603      	mov	r3, r0
    78b0:	2b00      	cmp	r3, #0
    78b2:	bf14      	ite	ne
    78b4:	2301      	movne	r3, #1
    78b6:	2300      	moveq	r3, #0
    78b8:	b2da      	uxtb	r2, r3
    78ba:	683b      	ldr	r3, [r7, #0]
    78bc:	701a      	strb	r2, [r3, #0]
    78be:	e010      	b.n	78e2 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    78c0:	2201      	movs	r2, #1
    78c2:	68fb      	ldr	r3, [r7, #12]
    78c4:	fa02 f303 	lsl.w	r3, r2, r3
    78c8:	4619      	mov	r1, r3
    78ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    78ce:	4b0d      	ldr	r3, [pc, #52]	; (7904 <_periph_get_lock_state+0xf8>)
    78d0:	4798      	blx	r3
    78d2:	4603      	mov	r3, r0
    78d4:	2b00      	cmp	r3, #0
    78d6:	bf14      	ite	ne
    78d8:	2301      	movne	r3, #1
    78da:	2300      	moveq	r3, #0
    78dc:	b2da      	uxtb	r2, r3
    78de:	683b      	ldr	r3, [r7, #0]
    78e0:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    78e2:	2300      	movs	r3, #0
}
    78e4:	4618      	mov	r0, r3
    78e6:	3710      	adds	r7, #16
    78e8:	46bd      	mov	sp, r7
    78ea:	bd80      	pop	{r7, pc}
    78ec:	00019a28 	.word	0x00019a28
    78f0:	00005565 	.word	0x00005565
    78f4:	000076b1 	.word	0x000076b1
    78f8:	000075fd 	.word	0x000075fd
    78fc:	00007623 	.word	0x00007623
    7900:	00007649 	.word	0x00007649
    7904:	0000766f 	.word	0x0000766f

00007908 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    7908:	b480      	push	{r7}
    790a:	b083      	sub	sp, #12
    790c:	af00      	add	r7, sp, #0
    790e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	69db      	ldr	r3, [r3, #28]
    7914:	0a9b      	lsrs	r3, r3, #10
    7916:	f003 0301 	and.w	r3, r3, #1
    791a:	2b00      	cmp	r3, #0
    791c:	bf14      	ite	ne
    791e:	2301      	movne	r3, #1
    7920:	2300      	moveq	r3, #0
    7922:	b2db      	uxtb	r3, r3
}
    7924:	4618      	mov	r0, r3
    7926:	370c      	adds	r7, #12
    7928:	46bd      	mov	sp, r7
    792a:	f85d 7b04 	ldr.w	r7, [sp], #4
    792e:	4770      	bx	lr

00007930 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7930:	b480      	push	{r7}
    7932:	b083      	sub	sp, #12
    7934:	af00      	add	r7, sp, #0
    7936:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    793e:	61da      	str	r2, [r3, #28]
}
    7940:	bf00      	nop
    7942:	370c      	adds	r7, #12
    7944:	46bd      	mov	sp, r7
    7946:	f85d 7b04 	ldr.w	r7, [sp], #4
    794a:	4770      	bx	lr

0000794c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    794c:	b480      	push	{r7}
    794e:	b083      	sub	sp, #12
    7950:	af00      	add	r7, sp, #0
    7952:	6078      	str	r0, [r7, #4]
    7954:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	683a      	ldr	r2, [r7, #0]
    795a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    795c:	bf00      	nop
    795e:	370c      	adds	r7, #12
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
    7970:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	683a      	ldr	r2, [r7, #0]
    7976:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7978:	bf00      	nop
    797a:	370c      	adds	r7, #12
    797c:	46bd      	mov	sp, r7
    797e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7982:	4770      	bx	lr

00007984 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7984:	b480      	push	{r7}
    7986:	b083      	sub	sp, #12
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
    798c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	683a      	ldr	r2, [r7, #0]
    7992:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7994:	bf00      	nop
    7996:	370c      	adds	r7, #12
    7998:	46bd      	mov	sp, r7
    799a:	f85d 7b04 	ldr.w	r7, [sp], #4
    799e:	4770      	bx	lr

000079a0 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    79a0:	b480      	push	{r7}
    79a2:	b083      	sub	sp, #12
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
    79a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	683a      	ldr	r2, [r7, #0]
    79ae:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    79b0:	bf00      	nop
    79b2:	370c      	adds	r7, #12
    79b4:	46bd      	mov	sp, r7
    79b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ba:	4770      	bx	lr

000079bc <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    79bc:	b480      	push	{r7}
    79be:	b085      	sub	sp, #20
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    79ca:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    79cc:	68fb      	ldr	r3, [r7, #12]
    79ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    79d2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    79d4:	683b      	ldr	r3, [r7, #0]
    79d6:	b2db      	uxtb	r3, r3
    79d8:	68fa      	ldr	r2, [r7, #12]
    79da:	4313      	orrs	r3, r2
    79dc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	68fa      	ldr	r2, [r7, #12]
    79e2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    79e4:	bf00      	nop
    79e6:	3714      	adds	r7, #20
    79e8:	46bd      	mov	sp, r7
    79ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ee:	4770      	bx	lr

000079f0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    79f0:	b480      	push	{r7}
    79f2:	b085      	sub	sp, #20
    79f4:	af00      	add	r7, sp, #0
    79f6:	6078      	str	r0, [r7, #4]
    79f8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    79fe:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7a00:	68fb      	ldr	r3, [r7, #12]
    7a02:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    7a06:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    7a08:	683b      	ldr	r3, [r7, #0]
    7a0a:	041b      	lsls	r3, r3, #16
    7a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7a10:	68fa      	ldr	r2, [r7, #12]
    7a12:	4313      	orrs	r3, r2
    7a14:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	68fa      	ldr	r2, [r7, #12]
    7a1a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7a1c:	bf00      	nop
    7a1e:	3714      	adds	r7, #20
    7a20:	46bd      	mov	sp, r7
    7a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a26:	4770      	bx	lr

00007a28 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7a28:	b480      	push	{r7}
    7a2a:	b083      	sub	sp, #12
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	6078      	str	r0, [r7, #4]
    7a30:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	683a      	ldr	r2, [r7, #0]
    7a36:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7a38:	bf00      	nop
    7a3a:	370c      	adds	r7, #12
    7a3c:	46bd      	mov	sp, r7
    7a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a42:	4770      	bx	lr

00007a44 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7a44:	b480      	push	{r7}
    7a46:	b083      	sub	sp, #12
    7a48:	af00      	add	r7, sp, #0
    7a4a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    7a4c:	687b      	ldr	r3, [r7, #4]
    7a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7a50:	4618      	mov	r0, r3
    7a52:	370c      	adds	r7, #12
    7a54:	46bd      	mov	sp, r7
    7a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a5a:	4770      	bx	lr

00007a5c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7a5c:	b480      	push	{r7}
    7a5e:	b085      	sub	sp, #20
    7a60:	af00      	add	r7, sp, #0
    7a62:	60f8      	str	r0, [r7, #12]
    7a64:	60b9      	str	r1, [r7, #8]
    7a66:	607a      	str	r2, [r7, #4]
	while (count--) {
    7a68:	e007      	b.n	7a7a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7a6a:	68fb      	ldr	r3, [r7, #12]
    7a6c:	1c5a      	adds	r2, r3, #1
    7a6e:	60fa      	str	r2, [r7, #12]
    7a70:	68ba      	ldr	r2, [r7, #8]
    7a72:	1c51      	adds	r1, r2, #1
    7a74:	60b9      	str	r1, [r7, #8]
    7a76:	7812      	ldrb	r2, [r2, #0]
    7a78:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	1e5a      	subs	r2, r3, #1
    7a7e:	607a      	str	r2, [r7, #4]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d1f2      	bne.n	7a6a <_qspi_memcpy+0xe>
	}
}
    7a84:	bf00      	nop
    7a86:	3714      	adds	r7, #20
    7a88:	46bd      	mov	sp, r7
    7a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a8e:	4770      	bx	lr

00007a90 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7a98:	4903      	ldr	r1, [pc, #12]	; (7aa8 <_qspi_end_transfer+0x18>)
    7a9a:	6878      	ldr	r0, [r7, #4]
    7a9c:	4b03      	ldr	r3, [pc, #12]	; (7aac <_qspi_end_transfer+0x1c>)
    7a9e:	4798      	blx	r3
}
    7aa0:	bf00      	nop
    7aa2:	3708      	adds	r7, #8
    7aa4:	46bd      	mov	sp, r7
    7aa6:	bd80      	pop	{r7, pc}
    7aa8:	01000002 	.word	0x01000002
    7aac:	0000794d 	.word	0x0000794d

00007ab0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7ab0:	b580      	push	{r7, lr}
    7ab2:	b082      	sub	sp, #8
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	6078      	str	r0, [r7, #4]
    7ab8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7aba:	687b      	ldr	r3, [r7, #4]
    7abc:	2b00      	cmp	r3, #0
    7abe:	d004      	beq.n	7aca <_qspi_sync_init+0x1a>
    7ac0:	683b      	ldr	r3, [r7, #0]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d001      	beq.n	7aca <_qspi_sync_init+0x1a>
    7ac6:	2301      	movs	r3, #1
    7ac8:	e000      	b.n	7acc <_qspi_sync_init+0x1c>
    7aca:	2300      	movs	r3, #0
    7acc:	f003 0301 	and.w	r3, r3, #1
    7ad0:	b2db      	uxtb	r3, r3
    7ad2:	2240      	movs	r2, #64	; 0x40
    7ad4:	490c      	ldr	r1, [pc, #48]	; (7b08 <_qspi_sync_init+0x58>)
    7ad6:	4618      	mov	r0, r3
    7ad8:	4b0c      	ldr	r3, [pc, #48]	; (7b0c <_qspi_sync_init+0x5c>)
    7ada:	4798      	blx	r3
	dev->prvt = hw;
    7adc:	687b      	ldr	r3, [r7, #4]
    7ade:	683a      	ldr	r2, [r7, #0]
    7ae0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    7ae2:	687b      	ldr	r3, [r7, #4]
    7ae4:	681b      	ldr	r3, [r3, #0]
    7ae6:	2101      	movs	r1, #1
    7ae8:	4618      	mov	r0, r3
    7aea:	4b09      	ldr	r3, [pc, #36]	; (7b10 <_qspi_sync_init+0x60>)
    7aec:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7aee:	4909      	ldr	r1, [pc, #36]	; (7b14 <_qspi_sync_init+0x64>)
    7af0:	6838      	ldr	r0, [r7, #0]
    7af2:	4b09      	ldr	r3, [pc, #36]	; (7b18 <_qspi_sync_init+0x68>)
    7af4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    7af6:	4909      	ldr	r1, [pc, #36]	; (7b1c <_qspi_sync_init+0x6c>)
    7af8:	6838      	ldr	r0, [r7, #0]
    7afa:	4b09      	ldr	r3, [pc, #36]	; (7b20 <_qspi_sync_init+0x70>)
    7afc:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7afe:	2300      	movs	r3, #0
}
    7b00:	4618      	mov	r0, r3
    7b02:	3708      	adds	r7, #8
    7b04:	46bd      	mov	sp, r7
    7b06:	bd80      	pop	{r7, pc}
    7b08:	00019a40 	.word	0x00019a40
    7b0c:	00005565 	.word	0x00005565
    7b10:	0000794d 	.word	0x0000794d
    7b14:	06000011 	.word	0x06000011
    7b18:	00007969 	.word	0x00007969
    7b1c:	00241300 	.word	0x00241300
    7b20:	00007985 	.word	0x00007985

00007b24 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7b24:	b580      	push	{r7, lr}
    7b26:	b082      	sub	sp, #8
    7b28:	af00      	add	r7, sp, #0
    7b2a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	2102      	movs	r1, #2
    7b32:	4618      	mov	r0, r3
    7b34:	4b03      	ldr	r3, [pc, #12]	; (7b44 <_qspi_sync_enable+0x20>)
    7b36:	4798      	blx	r3
	return ERR_NONE;
    7b38:	2300      	movs	r3, #0
}
    7b3a:	4618      	mov	r0, r3
    7b3c:	3708      	adds	r7, #8
    7b3e:	46bd      	mov	sp, r7
    7b40:	bd80      	pop	{r7, pc}
    7b42:	bf00      	nop
    7b44:	0000794d 	.word	0x0000794d

00007b48 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7b48:	b580      	push	{r7, lr}
    7b4a:	b082      	sub	sp, #8
    7b4c:	af00      	add	r7, sp, #0
    7b4e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7b50:	687b      	ldr	r3, [r7, #4]
    7b52:	681b      	ldr	r3, [r3, #0]
    7b54:	2100      	movs	r1, #0
    7b56:	4618      	mov	r0, r3
    7b58:	4b03      	ldr	r3, [pc, #12]	; (7b68 <_qspi_sync_disable+0x20>)
    7b5a:	4798      	blx	r3
	return ERR_NONE;
    7b5c:	2300      	movs	r3, #0
}
    7b5e:	4618      	mov	r0, r3
    7b60:	3708      	adds	r7, #8
    7b62:	46bd      	mov	sp, r7
    7b64:	bd80      	pop	{r7, pc}
    7b66:	bf00      	nop
    7b68:	0000794d 	.word	0x0000794d

00007b6c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7b6c:	b580      	push	{r7, lr}
    7b6e:	b084      	sub	sp, #16
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
    7b74:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	681b      	ldr	r3, [r3, #0]
    7b7a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7b7c:	683b      	ldr	r3, [r7, #0]
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	f003 0320 	and.w	r3, r3, #32
    7b84:	b2db      	uxtb	r3, r3
    7b86:	2b00      	cmp	r3, #0
    7b88:	d005      	beq.n	7b96 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7b8a:	683b      	ldr	r3, [r7, #0]
    7b8c:	689b      	ldr	r3, [r3, #8]
    7b8e:	4619      	mov	r1, r3
    7b90:	68f8      	ldr	r0, [r7, #12]
    7b92:	4b13      	ldr	r3, [pc, #76]	; (7be0 <_qspi_sync_command_set_ifr+0x74>)
    7b94:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7b96:	683b      	ldr	r3, [r7, #0]
    7b98:	781b      	ldrb	r3, [r3, #0]
    7b9a:	f003 0310 	and.w	r3, r3, #16
    7b9e:	b2db      	uxtb	r3, r3
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d005      	beq.n	7bb0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7ba4:	683b      	ldr	r3, [r7, #0]
    7ba6:	791b      	ldrb	r3, [r3, #4]
    7ba8:	4619      	mov	r1, r3
    7baa:	68f8      	ldr	r0, [r7, #12]
    7bac:	4b0d      	ldr	r3, [pc, #52]	; (7be4 <_qspi_sync_command_set_ifr+0x78>)
    7bae:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7bb0:	683b      	ldr	r3, [r7, #0]
    7bb2:	781b      	ldrb	r3, [r3, #0]
    7bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d005      	beq.n	7bca <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7bbe:	683b      	ldr	r3, [r7, #0]
    7bc0:	795b      	ldrb	r3, [r3, #5]
    7bc2:	4619      	mov	r1, r3
    7bc4:	68f8      	ldr	r0, [r7, #12]
    7bc6:	4b08      	ldr	r3, [pc, #32]	; (7be8 <_qspi_sync_command_set_ifr+0x7c>)
    7bc8:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7bca:	683b      	ldr	r3, [r7, #0]
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	4619      	mov	r1, r3
    7bd0:	68f8      	ldr	r0, [r7, #12]
    7bd2:	4b06      	ldr	r3, [pc, #24]	; (7bec <_qspi_sync_command_set_ifr+0x80>)
    7bd4:	4798      	blx	r3
}
    7bd6:	bf00      	nop
    7bd8:	3710      	adds	r7, #16
    7bda:	46bd      	mov	sp, r7
    7bdc:	bd80      	pop	{r7, pc}
    7bde:	bf00      	nop
    7be0:	000079a1 	.word	0x000079a1
    7be4:	000079bd 	.word	0x000079bd
    7be8:	000079f1 	.word	0x000079f1
    7bec:	00007a29 	.word	0x00007a29

00007bf0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	b084      	sub	sp, #16
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
    7bf8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7c00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7c04:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    7c06:	683b      	ldr	r3, [r7, #0]
    7c08:	781b      	ldrb	r3, [r3, #0]
    7c0a:	f003 0320 	and.w	r3, r3, #32
    7c0e:	b2db      	uxtb	r3, r3
    7c10:	2b00      	cmp	r3, #0
    7c12:	d004      	beq.n	7c1e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7c14:	683b      	ldr	r3, [r7, #0]
    7c16:	689b      	ldr	r3, [r3, #8]
    7c18:	68fa      	ldr	r2, [r7, #12]
    7c1a:	4413      	add	r3, r2
    7c1c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    7c1e:	68b8      	ldr	r0, [r7, #8]
    7c20:	4b18      	ldr	r3, [pc, #96]	; (7c84 <_qspi_sync_run_transfer+0x94>)
    7c22:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7c24:	683b      	ldr	r3, [r7, #0]
    7c26:	691b      	ldr	r3, [r3, #16]
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d103      	bne.n	7c34 <_qspi_sync_run_transfer+0x44>
    7c2c:	683b      	ldr	r3, [r7, #0]
    7c2e:	695b      	ldr	r3, [r3, #20]
    7c30:	2b00      	cmp	r3, #0
    7c32:	d001      	beq.n	7c38 <_qspi_sync_run_transfer+0x48>
    7c34:	2301      	movs	r3, #1
    7c36:	e000      	b.n	7c3a <_qspi_sync_run_transfer+0x4a>
    7c38:	2300      	movs	r3, #0
    7c3a:	f003 0301 	and.w	r3, r3, #1
    7c3e:	b2db      	uxtb	r3, r3
    7c40:	2282      	movs	r2, #130	; 0x82
    7c42:	4911      	ldr	r1, [pc, #68]	; (7c88 <_qspi_sync_run_transfer+0x98>)
    7c44:	4618      	mov	r0, r3
    7c46:	4b11      	ldr	r3, [pc, #68]	; (7c8c <_qspi_sync_run_transfer+0x9c>)
    7c48:	4798      	blx	r3

	if (cmd->tx_buf) {
    7c4a:	683b      	ldr	r3, [r7, #0]
    7c4c:	691b      	ldr	r3, [r3, #16]
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d008      	beq.n	7c64 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    7c52:	683b      	ldr	r3, [r7, #0]
    7c54:	6919      	ldr	r1, [r3, #16]
    7c56:	683b      	ldr	r3, [r7, #0]
    7c58:	68db      	ldr	r3, [r3, #12]
    7c5a:	461a      	mov	r2, r3
    7c5c:	68f8      	ldr	r0, [r7, #12]
    7c5e:	4b0c      	ldr	r3, [pc, #48]	; (7c90 <_qspi_sync_run_transfer+0xa0>)
    7c60:	4798      	blx	r3
    7c62:	e007      	b.n	7c74 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7c64:	683b      	ldr	r3, [r7, #0]
    7c66:	6958      	ldr	r0, [r3, #20]
    7c68:	683b      	ldr	r3, [r7, #0]
    7c6a:	68db      	ldr	r3, [r3, #12]
    7c6c:	461a      	mov	r2, r3
    7c6e:	68f9      	ldr	r1, [r7, #12]
    7c70:	4b07      	ldr	r3, [pc, #28]	; (7c90 <_qspi_sync_run_transfer+0xa0>)
    7c72:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7c74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c78:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7c7c:	bf00      	nop
    7c7e:	3710      	adds	r7, #16
    7c80:	46bd      	mov	sp, r7
    7c82:	bd80      	pop	{r7, pc}
    7c84:	00007a45 	.word	0x00007a45
    7c88:	00019a40 	.word	0x00019a40
    7c8c:	00005565 	.word	0x00005565
    7c90:	00007a5d 	.word	0x00007a5d

00007c94 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7c94:	b580      	push	{r7, lr}
    7c96:	b082      	sub	sp, #8
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
    7c9c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    7c9e:	6839      	ldr	r1, [r7, #0]
    7ca0:	6878      	ldr	r0, [r7, #4]
    7ca2:	4b14      	ldr	r3, [pc, #80]	; (7cf4 <_qspi_sync_serial_run_command+0x60>)
    7ca4:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    7ca6:	683b      	ldr	r3, [r7, #0]
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7cae:	b2db      	uxtb	r3, r3
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d003      	beq.n	7cbc <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    7cb4:	6839      	ldr	r1, [r7, #0]
    7cb6:	6878      	ldr	r0, [r7, #4]
    7cb8:	4b0f      	ldr	r3, [pc, #60]	; (7cf8 <_qspi_sync_serial_run_command+0x64>)
    7cba:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	681b      	ldr	r3, [r3, #0]
    7cc0:	4618      	mov	r0, r3
    7cc2:	4b0e      	ldr	r3, [pc, #56]	; (7cfc <_qspi_sync_serial_run_command+0x68>)
    7cc4:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    7cc6:	bf00      	nop
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	681b      	ldr	r3, [r3, #0]
    7ccc:	4618      	mov	r0, r3
    7cce:	4b0c      	ldr	r3, [pc, #48]	; (7d00 <_qspi_sync_serial_run_command+0x6c>)
    7cd0:	4798      	blx	r3
    7cd2:	4603      	mov	r3, r0
    7cd4:	f083 0301 	eor.w	r3, r3, #1
    7cd8:	b2db      	uxtb	r3, r3
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d1f4      	bne.n	7cc8 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	4618      	mov	r0, r3
    7ce4:	4b07      	ldr	r3, [pc, #28]	; (7d04 <_qspi_sync_serial_run_command+0x70>)
    7ce6:	4798      	blx	r3
	return ERR_NONE;
    7ce8:	2300      	movs	r3, #0
}
    7cea:	4618      	mov	r0, r3
    7cec:	3708      	adds	r7, #8
    7cee:	46bd      	mov	sp, r7
    7cf0:	bd80      	pop	{r7, pc}
    7cf2:	bf00      	nop
    7cf4:	00007b6d 	.word	0x00007b6d
    7cf8:	00007bf1 	.word	0x00007bf1
    7cfc:	00007a91 	.word	0x00007a91
    7d00:	00007909 	.word	0x00007909
    7d04:	00007931 	.word	0x00007931

00007d08 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    7d08:	b480      	push	{r7}
    7d0a:	b083      	sub	sp, #12
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	6078      	str	r0, [r7, #4]
    7d10:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7d12:	bf00      	nop
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	691a      	ldr	r2, [r3, #16]
    7d18:	683b      	ldr	r3, [r7, #0]
    7d1a:	4013      	ands	r3, r2
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d1f9      	bne.n	7d14 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    7d20:	bf00      	nop
    7d22:	370c      	adds	r7, #12
    7d24:	46bd      	mov	sp, r7
    7d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d2a:	4770      	bx	lr

00007d2c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    7d2c:	b480      	push	{r7}
    7d2e:	b083      	sub	sp, #12
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d3a:	819a      	strh	r2, [r3, #12]
}
    7d3c:	bf00      	nop
    7d3e:	370c      	adds	r7, #12
    7d40:	46bd      	mov	sp, r7
    7d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d46:	4770      	bx	lr

00007d48 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    7d48:	b480      	push	{r7}
    7d4a:	b083      	sub	sp, #12
    7d4c:	af00      	add	r7, sp, #0
    7d4e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7d56:	819a      	strh	r2, [r3, #12]
}
    7d58:	bf00      	nop
    7d5a:	370c      	adds	r7, #12
    7d5c:	46bd      	mov	sp, r7
    7d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d62:	4770      	bx	lr

00007d64 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7d64:	b480      	push	{r7}
    7d66:	b083      	sub	sp, #12
    7d68:	af00      	add	r7, sp, #0
    7d6a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	899b      	ldrh	r3, [r3, #12]
    7d70:	b29b      	uxth	r3, r3
}
    7d72:	4618      	mov	r0, r3
    7d74:	370c      	adds	r7, #12
    7d76:	46bd      	mov	sp, r7
    7d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7c:	4770      	bx	lr

00007d7e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    7d7e:	b480      	push	{r7}
    7d80:	b083      	sub	sp, #12
    7d82:	af00      	add	r7, sp, #0
    7d84:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    7d86:	687b      	ldr	r3, [r7, #4]
    7d88:	895b      	ldrh	r3, [r3, #10]
    7d8a:	b29b      	uxth	r3, r3
}
    7d8c:	4618      	mov	r0, r3
    7d8e:	370c      	adds	r7, #12
    7d90:	46bd      	mov	sp, r7
    7d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d96:	4770      	bx	lr

00007d98 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	881b      	ldrh	r3, [r3, #0]
    7da4:	b29b      	uxth	r3, r3
    7da6:	f043 0301 	orr.w	r3, r3, #1
    7daa:	b29a      	uxth	r2, r3
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7db0:	2101      	movs	r1, #1
    7db2:	6878      	ldr	r0, [r7, #4]
    7db4:	4b02      	ldr	r3, [pc, #8]	; (7dc0 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    7db6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7db8:	bf00      	nop
    7dba:	3708      	adds	r7, #8
    7dbc:	46bd      	mov	sp, r7
    7dbe:	bd80      	pop	{r7, pc}
    7dc0:	00007d09 	.word	0x00007d09

00007dc4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b084      	sub	sp, #16
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7dcc:	f248 0103 	movw	r1, #32771	; 0x8003
    7dd0:	6878      	ldr	r0, [r7, #4]
    7dd2:	4b0a      	ldr	r3, [pc, #40]	; (7dfc <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7dd4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	881b      	ldrh	r3, [r3, #0]
    7dda:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7ddc:	89fb      	ldrh	r3, [r7, #14]
    7dde:	085b      	lsrs	r3, r3, #1
    7de0:	b29b      	uxth	r3, r3
    7de2:	f003 0301 	and.w	r3, r3, #1
    7de6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7de8:	89fb      	ldrh	r3, [r7, #14]
    7dea:	2b00      	cmp	r3, #0
    7dec:	bf14      	ite	ne
    7dee:	2301      	movne	r3, #1
    7df0:	2300      	moveq	r3, #0
    7df2:	b2db      	uxtb	r3, r3
}
    7df4:	4618      	mov	r0, r3
    7df6:	3710      	adds	r7, #16
    7df8:	46bd      	mov	sp, r7
    7dfa:	bd80      	pop	{r7, pc}
    7dfc:	00007d09 	.word	0x00007d09

00007e00 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b082      	sub	sp, #8
    7e04:	af00      	add	r7, sp, #0
    7e06:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	881b      	ldrh	r3, [r3, #0]
    7e0c:	b29b      	uxth	r3, r3
    7e0e:	f023 0302 	bic.w	r3, r3, #2
    7e12:	b29a      	uxth	r2, r3
    7e14:	687b      	ldr	r3, [r7, #4]
    7e16:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7e18:	f248 0103 	movw	r1, #32771	; 0x8003
    7e1c:	6878      	ldr	r0, [r7, #4]
    7e1e:	4b03      	ldr	r3, [pc, #12]	; (7e2c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    7e20:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7e22:	bf00      	nop
    7e24:	3708      	adds	r7, #8
    7e26:	46bd      	mov	sp, r7
    7e28:	bd80      	pop	{r7, pc}
    7e2a:	bf00      	nop
    7e2c:	00007d09 	.word	0x00007d09

00007e30 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b082      	sub	sp, #8
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	460b      	mov	r3, r1
    7e3a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	887a      	ldrh	r2, [r7, #2]
    7e40:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7e42:	f248 0103 	movw	r1, #32771	; 0x8003
    7e46:	6878      	ldr	r0, [r7, #4]
    7e48:	4b02      	ldr	r3, [pc, #8]	; (7e54 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    7e4a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7e4c:	bf00      	nop
    7e4e:	3708      	adds	r7, #8
    7e50:	46bd      	mov	sp, r7
    7e52:	bd80      	pop	{r7, pc}
    7e54:	00007d09 	.word	0x00007d09

00007e58 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7e58:	b580      	push	{r7, lr}
    7e5a:	b082      	sub	sp, #8
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7e60:	2108      	movs	r1, #8
    7e62:	6878      	ldr	r0, [r7, #4]
    7e64:	4b03      	ldr	r3, [pc, #12]	; (7e74 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    7e66:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	699b      	ldr	r3, [r3, #24]
}
    7e6c:	4618      	mov	r0, r3
    7e6e:	3708      	adds	r7, #8
    7e70:	46bd      	mov	sp, r7
    7e72:	bd80      	pop	{r7, pc}
    7e74:	00007d09 	.word	0x00007d09

00007e78 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7e78:	b480      	push	{r7}
    7e7a:	b083      	sub	sp, #12
    7e7c:	af00      	add	r7, sp, #0
    7e7e:	6078      	str	r0, [r7, #4]
    7e80:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    7e82:	687b      	ldr	r3, [r7, #4]
    7e84:	683a      	ldr	r2, [r7, #0]
    7e86:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7e88:	bf00      	nop
    7e8a:	370c      	adds	r7, #12
    7e8c:	46bd      	mov	sp, r7
    7e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e92:	4770      	bx	lr

00007e94 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b082      	sub	sp, #8
    7e98:	af00      	add	r7, sp, #0
    7e9a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7e9c:	687b      	ldr	r3, [r7, #4]
    7e9e:	2b00      	cmp	r3, #0
    7ea0:	d005      	beq.n	7eae <_calendar_init+0x1a>
    7ea2:	687b      	ldr	r3, [r7, #4]
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d001      	beq.n	7eae <_calendar_init+0x1a>
    7eaa:	2301      	movs	r3, #1
    7eac:	e000      	b.n	7eb0 <_calendar_init+0x1c>
    7eae:	2300      	movs	r3, #0
    7eb0:	f003 0301 	and.w	r3, r3, #1
    7eb4:	b2db      	uxtb	r3, r3
    7eb6:	222f      	movs	r2, #47	; 0x2f
    7eb8:	491b      	ldr	r1, [pc, #108]	; (7f28 <_calendar_init+0x94>)
    7eba:	4618      	mov	r0, r3
    7ebc:	4b1b      	ldr	r3, [pc, #108]	; (7f2c <_calendar_init+0x98>)
    7ebe:	4798      	blx	r3

	_rtc_dev = dev;
    7ec0:	4a1b      	ldr	r2, [pc, #108]	; (7f30 <_calendar_init+0x9c>)
    7ec2:	687b      	ldr	r3, [r7, #4]
    7ec4:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	681b      	ldr	r3, [r3, #0]
    7eca:	4618      	mov	r0, r3
    7ecc:	4b19      	ldr	r3, [pc, #100]	; (7f34 <_calendar_init+0xa0>)
    7ece:	4798      	blx	r3
    7ed0:	4603      	mov	r3, r0
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d00a      	beq.n	7eec <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	4618      	mov	r0, r3
    7edc:	4b16      	ldr	r3, [pc, #88]	; (7f38 <_calendar_init+0xa4>)
    7ede:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	681b      	ldr	r3, [r3, #0]
    7ee4:	2102      	movs	r1, #2
    7ee6:	4618      	mov	r0, r3
    7ee8:	4b14      	ldr	r3, [pc, #80]	; (7f3c <_calendar_init+0xa8>)
    7eea:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	681b      	ldr	r3, [r3, #0]
    7ef0:	4618      	mov	r0, r3
    7ef2:	4b13      	ldr	r3, [pc, #76]	; (7f40 <_calendar_init+0xac>)
    7ef4:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	681b      	ldr	r3, [r3, #0]
    7efa:	2101      	movs	r1, #1
    7efc:	4618      	mov	r0, r3
    7efe:	4b0f      	ldr	r3, [pc, #60]	; (7f3c <_calendar_init+0xa8>)
    7f00:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	681b      	ldr	r3, [r3, #0]
    7f06:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    7f0a:	4618      	mov	r0, r3
    7f0c:	4b0d      	ldr	r3, [pc, #52]	; (7f44 <_calendar_init+0xb0>)
    7f0e:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7f14:	2100      	movs	r1, #0
    7f16:	4618      	mov	r0, r3
    7f18:	4b0b      	ldr	r3, [pc, #44]	; (7f48 <_calendar_init+0xb4>)
    7f1a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7f1c:	2300      	movs	r3, #0
}
    7f1e:	4618      	mov	r0, r3
    7f20:	3708      	adds	r7, #8
    7f22:	46bd      	mov	sp, r7
    7f24:	bd80      	pop	{r7, pc}
    7f26:	bf00      	nop
    7f28:	00019a58 	.word	0x00019a58
    7f2c:	00005565 	.word	0x00005565
    7f30:	2000103c 	.word	0x2000103c
    7f34:	00007dc5 	.word	0x00007dc5
    7f38:	00007e01 	.word	0x00007e01
    7f3c:	00007d09 	.word	0x00007d09
    7f40:	00007d99 	.word	0x00007d99
    7f44:	00007e31 	.word	0x00007e31
    7f48:	00007e79 	.word	0x00007e79

00007f4c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7f4c:	b580      	push	{r7, lr}
    7f4e:	b082      	sub	sp, #8
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d005      	beq.n	7f66 <_calendar_get_counter+0x1a>
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d001      	beq.n	7f66 <_calendar_get_counter+0x1a>
    7f62:	2301      	movs	r3, #1
    7f64:	e000      	b.n	7f68 <_calendar_get_counter+0x1c>
    7f66:	2300      	movs	r3, #0
    7f68:	f003 0301 	and.w	r3, r3, #1
    7f6c:	b2db      	uxtb	r3, r3
    7f6e:	2299      	movs	r2, #153	; 0x99
    7f70:	4906      	ldr	r1, [pc, #24]	; (7f8c <_calendar_get_counter+0x40>)
    7f72:	4618      	mov	r0, r3
    7f74:	4b06      	ldr	r3, [pc, #24]	; (7f90 <_calendar_get_counter+0x44>)
    7f76:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	4618      	mov	r0, r3
    7f7e:	4b05      	ldr	r3, [pc, #20]	; (7f94 <_calendar_get_counter+0x48>)
    7f80:	4798      	blx	r3
    7f82:	4603      	mov	r3, r0
}
    7f84:	4618      	mov	r0, r3
    7f86:	3708      	adds	r7, #8
    7f88:	46bd      	mov	sp, r7
    7f8a:	bd80      	pop	{r7, pc}
    7f8c:	00019a58 	.word	0x00019a58
    7f90:	00005565 	.word	0x00005565
    7f94:	00007e59 	.word	0x00007e59

00007f98 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	b084      	sub	sp, #16
    7f9c:	af00      	add	r7, sp, #0
    7f9e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	681b      	ldr	r3, [r3, #0]
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b19      	ldr	r3, [pc, #100]	; (800c <_rtc_interrupt_handler+0x74>)
    7fa8:	4798      	blx	r3
    7faa:	4603      	mov	r3, r0
    7fac:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    7fae:	687b      	ldr	r3, [r7, #4]
    7fb0:	681b      	ldr	r3, [r3, #0]
    7fb2:	4618      	mov	r0, r3
    7fb4:	4b16      	ldr	r3, [pc, #88]	; (8010 <_rtc_interrupt_handler+0x78>)
    7fb6:	4798      	blx	r3
    7fb8:	4603      	mov	r3, r0
    7fba:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7fbc:	89fa      	ldrh	r2, [r7, #14]
    7fbe:	89bb      	ldrh	r3, [r7, #12]
    7fc0:	4013      	ands	r3, r2
    7fc2:	b29b      	uxth	r3, r3
    7fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7fc8:	2b00      	cmp	r3, #0
    7fca:	d009      	beq.n	7fe0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	685b      	ldr	r3, [r3, #4]
    7fd0:	6878      	ldr	r0, [r7, #4]
    7fd2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	681b      	ldr	r3, [r3, #0]
    7fd8:	4618      	mov	r0, r3
    7fda:	4b0e      	ldr	r3, [pc, #56]	; (8014 <_rtc_interrupt_handler+0x7c>)
    7fdc:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    7fde:	e010      	b.n	8002 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    7fe0:	89fa      	ldrh	r2, [r7, #14]
    7fe2:	89bb      	ldrh	r3, [r7, #12]
    7fe4:	4013      	ands	r3, r2
    7fe6:	b29b      	uxth	r3, r3
    7fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7fec:	2b00      	cmp	r3, #0
    7fee:	d008      	beq.n	8002 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	689b      	ldr	r3, [r3, #8]
    7ff4:	6878      	ldr	r0, [r7, #4]
    7ff6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	681b      	ldr	r3, [r3, #0]
    7ffc:	4618      	mov	r0, r3
    7ffe:	4b06      	ldr	r3, [pc, #24]	; (8018 <_rtc_interrupt_handler+0x80>)
    8000:	4798      	blx	r3
}
    8002:	bf00      	nop
    8004:	3710      	adds	r7, #16
    8006:	46bd      	mov	sp, r7
    8008:	bd80      	pop	{r7, pc}
    800a:	bf00      	nop
    800c:	00007d65 	.word	0x00007d65
    8010:	00007d7f 	.word	0x00007d7f
    8014:	00007d2d 	.word	0x00007d2d
    8018:	00007d49 	.word	0x00007d49

0000801c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    801c:	b580      	push	{r7, lr}
    801e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8020:	4b03      	ldr	r3, [pc, #12]	; (8030 <RTC_Handler+0x14>)
    8022:	681b      	ldr	r3, [r3, #0]
    8024:	4618      	mov	r0, r3
    8026:	4b03      	ldr	r3, [pc, #12]	; (8034 <RTC_Handler+0x18>)
    8028:	4798      	blx	r3
}
    802a:	bf00      	nop
    802c:	bd80      	pop	{r7, pc}
    802e:	bf00      	nop
    8030:	2000103c 	.word	0x2000103c
    8034:	00007f99 	.word	0x00007f99

00008038 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8038:	b480      	push	{r7}
    803a:	b083      	sub	sp, #12
    803c:	af00      	add	r7, sp, #0
    803e:	6078      	str	r0, [r7, #4]
    8040:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8042:	bf00      	nop
    8044:	687b      	ldr	r3, [r7, #4]
    8046:	69da      	ldr	r2, [r3, #28]
    8048:	683b      	ldr	r3, [r7, #0]
    804a:	4013      	ands	r3, r2
    804c:	2b00      	cmp	r3, #0
    804e:	d1f9      	bne.n	8044 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    8050:	bf00      	nop
    8052:	370c      	adds	r7, #12
    8054:	46bd      	mov	sp, r7
    8056:	f85d 7b04 	ldr.w	r7, [sp], #4
    805a:	4770      	bx	lr

0000805c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    805c:	b480      	push	{r7}
    805e:	b083      	sub	sp, #12
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	69da      	ldr	r2, [r3, #28]
    806a:	683b      	ldr	r3, [r7, #0]
    806c:	4013      	ands	r3, r2
    806e:	2b00      	cmp	r3, #0
    8070:	bf14      	ite	ne
    8072:	2301      	movne	r3, #1
    8074:	2300      	moveq	r3, #0
    8076:	b2db      	uxtb	r3, r3
}
    8078:	4618      	mov	r0, r3
    807a:	370c      	adds	r7, #12
    807c:	46bd      	mov	sp, r7
    807e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8082:	4770      	bx	lr

00008084 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8084:	b480      	push	{r7}
    8086:	b083      	sub	sp, #12
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
    808c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    808e:	bf00      	nop
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	69da      	ldr	r2, [r3, #28]
    8094:	683b      	ldr	r3, [r7, #0]
    8096:	4013      	ands	r3, r2
    8098:	2b00      	cmp	r3, #0
    809a:	d1f9      	bne.n	8090 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    809c:	bf00      	nop
    809e:	370c      	adds	r7, #12
    80a0:	46bd      	mov	sp, r7
    80a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80a6:	4770      	bx	lr

000080a8 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    80a8:	b480      	push	{r7}
    80aa:	b083      	sub	sp, #12
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
    80b0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    80b2:	687b      	ldr	r3, [r7, #4]
    80b4:	69da      	ldr	r2, [r3, #28]
    80b6:	683b      	ldr	r3, [r7, #0]
    80b8:	4013      	ands	r3, r2
    80ba:	2b00      	cmp	r3, #0
    80bc:	bf14      	ite	ne
    80be:	2301      	movne	r3, #1
    80c0:	2300      	moveq	r3, #0
    80c2:	b2db      	uxtb	r3, r3
}
    80c4:	4618      	mov	r0, r3
    80c6:	370c      	adds	r7, #12
    80c8:	46bd      	mov	sp, r7
    80ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ce:	4770      	bx	lr

000080d0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    80d0:	b480      	push	{r7}
    80d2:	b083      	sub	sp, #12
    80d4:	af00      	add	r7, sp, #0
    80d6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	2201      	movs	r2, #1
    80dc:	761a      	strb	r2, [r3, #24]
}
    80de:	bf00      	nop
    80e0:	370c      	adds	r7, #12
    80e2:	46bd      	mov	sp, r7
    80e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e8:	4770      	bx	lr

000080ea <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    80ea:	b480      	push	{r7}
    80ec:	b083      	sub	sp, #12
    80ee:	af00      	add	r7, sp, #0
    80f0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	2202      	movs	r2, #2
    80f6:	761a      	strb	r2, [r3, #24]
}
    80f8:	bf00      	nop
    80fa:	370c      	adds	r7, #12
    80fc:	46bd      	mov	sp, r7
    80fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8102:	4770      	bx	lr

00008104 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8104:	b480      	push	{r7}
    8106:	b083      	sub	sp, #12
    8108:	af00      	add	r7, sp, #0
    810a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	7e1b      	ldrb	r3, [r3, #24]
    8110:	b2db      	uxtb	r3, r3
}
    8112:	4618      	mov	r0, r3
    8114:	370c      	adds	r7, #12
    8116:	46bd      	mov	sp, r7
    8118:	f85d 7b04 	ldr.w	r7, [sp], #4
    811c:	4770      	bx	lr

0000811e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    811e:	b480      	push	{r7}
    8120:	b085      	sub	sp, #20
    8122:	af00      	add	r7, sp, #0
    8124:	6078      	str	r0, [r7, #4]
    8126:	460b      	mov	r3, r1
    8128:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	7e1b      	ldrb	r3, [r3, #24]
    812e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8130:	7bfa      	ldrb	r2, [r7, #15]
    8132:	78fb      	ldrb	r3, [r7, #3]
    8134:	4013      	ands	r3, r2
    8136:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8138:	7bfb      	ldrb	r3, [r7, #15]
}
    813a:	4618      	mov	r0, r3
    813c:	3714      	adds	r7, #20
    813e:	46bd      	mov	sp, r7
    8140:	f85d 7b04 	ldr.w	r7, [sp], #4
    8144:	4770      	bx	lr

00008146 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8146:	b480      	push	{r7}
    8148:	b083      	sub	sp, #12
    814a:	af00      	add	r7, sp, #0
    814c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	7e1b      	ldrb	r3, [r3, #24]
    8152:	b2db      	uxtb	r3, r3
}
    8154:	4618      	mov	r0, r3
    8156:	370c      	adds	r7, #12
    8158:	46bd      	mov	sp, r7
    815a:	f85d 7b04 	ldr.w	r7, [sp], #4
    815e:	4770      	bx	lr

00008160 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    8160:	b480      	push	{r7}
    8162:	b083      	sub	sp, #12
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
    8168:	460b      	mov	r3, r1
    816a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    816c:	687b      	ldr	r3, [r7, #4]
    816e:	78fa      	ldrb	r2, [r7, #3]
    8170:	761a      	strb	r2, [r3, #24]
}
    8172:	bf00      	nop
    8174:	370c      	adds	r7, #12
    8176:	46bd      	mov	sp, r7
    8178:	f85d 7b04 	ldr.w	r7, [sp], #4
    817c:	4770      	bx	lr
	...

00008180 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8180:	b580      	push	{r7, lr}
    8182:	b082      	sub	sp, #8
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	681b      	ldr	r3, [r3, #0]
    818c:	f043 0202 	orr.w	r2, r3, #2
    8190:	687b      	ldr	r3, [r7, #4]
    8192:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8194:	2103      	movs	r1, #3
    8196:	6878      	ldr	r0, [r7, #4]
    8198:	4b02      	ldr	r3, [pc, #8]	; (81a4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    819a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    819c:	bf00      	nop
    819e:	3708      	adds	r7, #8
    81a0:	46bd      	mov	sp, r7
    81a2:	bd80      	pop	{r7, pc}
    81a4:	00008039 	.word	0x00008039

000081a8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    81a8:	b580      	push	{r7, lr}
    81aa:	b082      	sub	sp, #8
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	f023 0202 	bic.w	r2, r3, #2
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    81bc:	2103      	movs	r1, #3
    81be:	6878      	ldr	r0, [r7, #4]
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    81c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    81c4:	bf00      	nop
    81c6:	3708      	adds	r7, #8
    81c8:	46bd      	mov	sp, r7
    81ca:	bd80      	pop	{r7, pc}
    81cc:	00008039 	.word	0x00008039

000081d0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    81d0:	b480      	push	{r7}
    81d2:	b085      	sub	sp, #20
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	681b      	ldr	r3, [r3, #0]
    81dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    81de:	68fb      	ldr	r3, [r7, #12]
    81e0:	0edb      	lsrs	r3, r3, #27
    81e2:	f003 0301 	and.w	r3, r3, #1
    81e6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    81e8:	68fb      	ldr	r3, [r7, #12]
    81ea:	2b00      	cmp	r3, #0
    81ec:	bf14      	ite	ne
    81ee:	2301      	movne	r3, #1
    81f0:	2300      	moveq	r3, #0
    81f2:	b2db      	uxtb	r3, r3
}
    81f4:	4618      	mov	r0, r3
    81f6:	3714      	adds	r7, #20
    81f8:	46bd      	mov	sp, r7
    81fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    81fe:	4770      	bx	lr

00008200 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    8200:	b580      	push	{r7, lr}
    8202:	b084      	sub	sp, #16
    8204:	af00      	add	r7, sp, #0
    8206:	6078      	str	r0, [r7, #4]
    8208:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    820a:	2103      	movs	r1, #3
    820c:	6878      	ldr	r0, [r7, #4]
    820e:	4b07      	ldr	r3, [pc, #28]	; (822c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    8210:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	681b      	ldr	r3, [r3, #0]
    8216:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8218:	68fa      	ldr	r2, [r7, #12]
    821a:	683b      	ldr	r3, [r7, #0]
    821c:	4013      	ands	r3, r2
    821e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8220:	68fb      	ldr	r3, [r7, #12]
}
    8222:	4618      	mov	r0, r3
    8224:	3710      	adds	r7, #16
    8226:	46bd      	mov	sp, r7
    8228:	bd80      	pop	{r7, pc}
    822a:	bf00      	nop
    822c:	00008039 	.word	0x00008039

00008230 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
    8238:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    823a:	687b      	ldr	r3, [r7, #4]
    823c:	683a      	ldr	r2, [r7, #0]
    823e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8240:	2103      	movs	r1, #3
    8242:	6878      	ldr	r0, [r7, #4]
    8244:	4b02      	ldr	r3, [pc, #8]	; (8250 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    8246:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8248:	bf00      	nop
    824a:	3708      	adds	r7, #8
    824c:	46bd      	mov	sp, r7
    824e:	bd80      	pop	{r7, pc}
    8250:	00008039 	.word	0x00008039

00008254 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8254:	b580      	push	{r7, lr}
    8256:	b082      	sub	sp, #8
    8258:	af00      	add	r7, sp, #0
    825a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    825c:	687b      	ldr	r3, [r7, #4]
    825e:	681b      	ldr	r3, [r3, #0]
    8260:	f043 0202 	orr.w	r2, r3, #2
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8268:	2103      	movs	r1, #3
    826a:	6878      	ldr	r0, [r7, #4]
    826c:	4b02      	ldr	r3, [pc, #8]	; (8278 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    826e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8270:	bf00      	nop
    8272:	3708      	adds	r7, #8
    8274:	46bd      	mov	sp, r7
    8276:	bd80      	pop	{r7, pc}
    8278:	00008085 	.word	0x00008085

0000827c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    827c:	b580      	push	{r7, lr}
    827e:	b084      	sub	sp, #16
    8280:	af00      	add	r7, sp, #0
    8282:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8284:	2103      	movs	r1, #3
    8286:	6878      	ldr	r0, [r7, #4]
    8288:	4b09      	ldr	r3, [pc, #36]	; (82b0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    828a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	681b      	ldr	r3, [r3, #0]
    8290:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    8292:	68fb      	ldr	r3, [r7, #12]
    8294:	085b      	lsrs	r3, r3, #1
    8296:	f003 0301 	and.w	r3, r3, #1
    829a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    829c:	68fb      	ldr	r3, [r7, #12]
    829e:	2b00      	cmp	r3, #0
    82a0:	bf14      	ite	ne
    82a2:	2301      	movne	r3, #1
    82a4:	2300      	moveq	r3, #0
    82a6:	b2db      	uxtb	r3, r3
}
    82a8:	4618      	mov	r0, r3
    82aa:	3710      	adds	r7, #16
    82ac:	46bd      	mov	sp, r7
    82ae:	bd80      	pop	{r7, pc}
    82b0:	00008085 	.word	0x00008085

000082b4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    82b4:	b580      	push	{r7, lr}
    82b6:	b082      	sub	sp, #8
    82b8:	af00      	add	r7, sp, #0
    82ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    82bc:	687b      	ldr	r3, [r7, #4]
    82be:	681b      	ldr	r3, [r3, #0]
    82c0:	f023 0202 	bic.w	r2, r3, #2
    82c4:	687b      	ldr	r3, [r7, #4]
    82c6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    82c8:	2103      	movs	r1, #3
    82ca:	6878      	ldr	r0, [r7, #4]
    82cc:	4b02      	ldr	r3, [pc, #8]	; (82d8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    82ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    82d0:	bf00      	nop
    82d2:	3708      	adds	r7, #8
    82d4:	46bd      	mov	sp, r7
    82d6:	bd80      	pop	{r7, pc}
    82d8:	00008085 	.word	0x00008085

000082dc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    82dc:	b580      	push	{r7, lr}
    82de:	b084      	sub	sp, #16
    82e0:	af00      	add	r7, sp, #0
    82e2:	6078      	str	r0, [r7, #4]
    82e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    82e6:	2103      	movs	r1, #3
    82e8:	6878      	ldr	r0, [r7, #4]
    82ea:	4b07      	ldr	r3, [pc, #28]	; (8308 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    82ec:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    82ee:	687b      	ldr	r3, [r7, #4]
    82f0:	681b      	ldr	r3, [r3, #0]
    82f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    82f4:	68fa      	ldr	r2, [r7, #12]
    82f6:	683b      	ldr	r3, [r7, #0]
    82f8:	4013      	ands	r3, r2
    82fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    82fc:	68fb      	ldr	r3, [r7, #12]
}
    82fe:	4618      	mov	r0, r3
    8300:	3710      	adds	r7, #16
    8302:	46bd      	mov	sp, r7
    8304:	bd80      	pop	{r7, pc}
    8306:	bf00      	nop
    8308:	00008085 	.word	0x00008085

0000830c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    830c:	b580      	push	{r7, lr}
    830e:	b082      	sub	sp, #8
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
    8314:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8316:	687b      	ldr	r3, [r7, #4]
    8318:	683a      	ldr	r2, [r7, #0]
    831a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    831c:	2103      	movs	r1, #3
    831e:	6878      	ldr	r0, [r7, #4]
    8320:	4b02      	ldr	r3, [pc, #8]	; (832c <hri_sercomspi_write_CTRLA_reg+0x20>)
    8322:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8324:	bf00      	nop
    8326:	3708      	adds	r7, #8
    8328:	46bd      	mov	sp, r7
    832a:	bd80      	pop	{r7, pc}
    832c:	00008085 	.word	0x00008085

00008330 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    8330:	b580      	push	{r7, lr}
    8332:	b082      	sub	sp, #8
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	685b      	ldr	r3, [r3, #4]
    833c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8340:	687b      	ldr	r3, [r7, #4]
    8342:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8344:	2104      	movs	r1, #4
    8346:	6878      	ldr	r0, [r7, #4]
    8348:	4b02      	ldr	r3, [pc, #8]	; (8354 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    834a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    834c:	bf00      	nop
    834e:	3708      	adds	r7, #8
    8350:	46bd      	mov	sp, r7
    8352:	bd80      	pop	{r7, pc}
    8354:	00008039 	.word	0x00008039

00008358 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    8358:	b580      	push	{r7, lr}
    835a:	b082      	sub	sp, #8
    835c:	af00      	add	r7, sp, #0
    835e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	685b      	ldr	r3, [r3, #4]
    8364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    8368:	687b      	ldr	r3, [r7, #4]
    836a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    836c:	2104      	movs	r1, #4
    836e:	6878      	ldr	r0, [r7, #4]
    8370:	4b02      	ldr	r3, [pc, #8]	; (837c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    8372:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8374:	bf00      	nop
    8376:	3708      	adds	r7, #8
    8378:	46bd      	mov	sp, r7
    837a:	bd80      	pop	{r7, pc}
    837c:	00008039 	.word	0x00008039

00008380 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    8380:	b580      	push	{r7, lr}
    8382:	b082      	sub	sp, #8
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	685b      	ldr	r3, [r3, #4]
    838c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8394:	2104      	movs	r1, #4
    8396:	6878      	ldr	r0, [r7, #4]
    8398:	4b02      	ldr	r3, [pc, #8]	; (83a4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    839a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    839c:	bf00      	nop
    839e:	3708      	adds	r7, #8
    83a0:	46bd      	mov	sp, r7
    83a2:	bd80      	pop	{r7, pc}
    83a4:	00008039 	.word	0x00008039

000083a8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b082      	sub	sp, #8
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    83b0:	687b      	ldr	r3, [r7, #4]
    83b2:	685b      	ldr	r3, [r3, #4]
    83b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    83bc:	2104      	movs	r1, #4
    83be:	6878      	ldr	r0, [r7, #4]
    83c0:	4b02      	ldr	r3, [pc, #8]	; (83cc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    83c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    83c4:	bf00      	nop
    83c6:	3708      	adds	r7, #8
    83c8:	46bd      	mov	sp, r7
    83ca:	bd80      	pop	{r7, pc}
    83cc:	00008039 	.word	0x00008039

000083d0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    83d0:	b580      	push	{r7, lr}
    83d2:	b082      	sub	sp, #8
    83d4:	af00      	add	r7, sp, #0
    83d6:	6078      	str	r0, [r7, #4]
    83d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    83da:	687b      	ldr	r3, [r7, #4]
    83dc:	685a      	ldr	r2, [r3, #4]
    83de:	683b      	ldr	r3, [r7, #0]
    83e0:	041b      	lsls	r3, r3, #16
    83e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    83e6:	431a      	orrs	r2, r3
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    83ec:	2104      	movs	r1, #4
    83ee:	6878      	ldr	r0, [r7, #4]
    83f0:	4b02      	ldr	r3, [pc, #8]	; (83fc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    83f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    83f4:	bf00      	nop
    83f6:	3708      	adds	r7, #8
    83f8:	46bd      	mov	sp, r7
    83fa:	bd80      	pop	{r7, pc}
    83fc:	00008039 	.word	0x00008039

00008400 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    8400:	b580      	push	{r7, lr}
    8402:	b082      	sub	sp, #8
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
    8408:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    840a:	687b      	ldr	r3, [r7, #4]
    840c:	683a      	ldr	r2, [r7, #0]
    840e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8410:	2104      	movs	r1, #4
    8412:	6878      	ldr	r0, [r7, #4]
    8414:	4b02      	ldr	r3, [pc, #8]	; (8420 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    8416:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8418:	bf00      	nop
    841a:	3708      	adds	r7, #8
    841c:	46bd      	mov	sp, r7
    841e:	bd80      	pop	{r7, pc}
    8420:	00008039 	.word	0x00008039

00008424 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    8424:	b580      	push	{r7, lr}
    8426:	b082      	sub	sp, #8
    8428:	af00      	add	r7, sp, #0
    842a:	6078      	str	r0, [r7, #4]
    842c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	683a      	ldr	r2, [r7, #0]
    8432:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    8434:	2117      	movs	r1, #23
    8436:	6878      	ldr	r0, [r7, #4]
    8438:	4b02      	ldr	r3, [pc, #8]	; (8444 <hri_sercomspi_write_CTRLB_reg+0x20>)
    843a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    843c:	bf00      	nop
    843e:	3708      	adds	r7, #8
    8440:	46bd      	mov	sp, r7
    8442:	bd80      	pop	{r7, pc}
    8444:	00008085 	.word	0x00008085

00008448 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    8448:	b480      	push	{r7}
    844a:	b083      	sub	sp, #12
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
    8450:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	683a      	ldr	r2, [r7, #0]
    8456:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8458:	bf00      	nop
    845a:	370c      	adds	r7, #12
    845c:	46bd      	mov	sp, r7
    845e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8462:	4770      	bx	lr

00008464 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    8464:	b480      	push	{r7}
    8466:	b083      	sub	sp, #12
    8468:	af00      	add	r7, sp, #0
    846a:	6078      	str	r0, [r7, #4]
    846c:	460b      	mov	r3, r1
    846e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8470:	687b      	ldr	r3, [r7, #4]
    8472:	78fa      	ldrb	r2, [r7, #3]
    8474:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8476:	bf00      	nop
    8478:	370c      	adds	r7, #12
    847a:	46bd      	mov	sp, r7
    847c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8480:	4770      	bx	lr
	...

00008484 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    8484:	b580      	push	{r7, lr}
    8486:	b084      	sub	sp, #16
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
    848c:	460b      	mov	r3, r1
    848e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8494:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    8496:	68fb      	ldr	r3, [r7, #12]
    8498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    849c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    849e:	78fb      	ldrb	r3, [r7, #3]
    84a0:	039b      	lsls	r3, r3, #14
    84a2:	461a      	mov	r2, r3
    84a4:	68fb      	ldr	r3, [r7, #12]
    84a6:	4313      	orrs	r3, r2
    84a8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	68fa      	ldr	r2, [r7, #12]
    84ae:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84b0:	2104      	movs	r1, #4
    84b2:	6878      	ldr	r0, [r7, #4]
    84b4:	4b02      	ldr	r3, [pc, #8]	; (84c0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    84b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    84b8:	bf00      	nop
    84ba:	3710      	adds	r7, #16
    84bc:	46bd      	mov	sp, r7
    84be:	bd80      	pop	{r7, pc}
    84c0:	00008039 	.word	0x00008039

000084c4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    84c4:	b580      	push	{r7, lr}
    84c6:	b082      	sub	sp, #8
    84c8:	af00      	add	r7, sp, #0
    84ca:	6078      	str	r0, [r7, #4]
    84cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    84ce:	687b      	ldr	r3, [r7, #4]
    84d0:	683a      	ldr	r2, [r7, #0]
    84d2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84d4:	2104      	movs	r1, #4
    84d6:	6878      	ldr	r0, [r7, #4]
    84d8:	4b02      	ldr	r3, [pc, #8]	; (84e4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    84da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    84dc:	bf00      	nop
    84de:	3708      	adds	r7, #8
    84e0:	46bd      	mov	sp, r7
    84e2:	bd80      	pop	{r7, pc}
    84e4:	00008039 	.word	0x00008039

000084e8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    84e8:	b580      	push	{r7, lr}
    84ea:	b082      	sub	sp, #8
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84f0:	2104      	movs	r1, #4
    84f2:	6878      	ldr	r0, [r7, #4]
    84f4:	4b03      	ldr	r3, [pc, #12]	; (8504 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    84f6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    84f8:	687b      	ldr	r3, [r7, #4]
    84fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    84fc:	4618      	mov	r0, r3
    84fe:	3708      	adds	r7, #8
    8500:	46bd      	mov	sp, r7
    8502:	bd80      	pop	{r7, pc}
    8504:	00008039 	.word	0x00008039

00008508 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    8508:	b480      	push	{r7}
    850a:	b083      	sub	sp, #12
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
    8510:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8512:	687b      	ldr	r3, [r7, #4]
    8514:	683a      	ldr	r2, [r7, #0]
    8516:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8518:	bf00      	nop
    851a:	370c      	adds	r7, #12
    851c:	46bd      	mov	sp, r7
    851e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8522:	4770      	bx	lr

00008524 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    8524:	b580      	push	{r7, lr}
    8526:	b082      	sub	sp, #8
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
    852c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	683a      	ldr	r2, [r7, #0]
    8532:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8534:	2104      	movs	r1, #4
    8536:	6878      	ldr	r0, [r7, #4]
    8538:	4b02      	ldr	r3, [pc, #8]	; (8544 <hri_sercomi2cm_write_DATA_reg+0x20>)
    853a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    853c:	bf00      	nop
    853e:	3708      	adds	r7, #8
    8540:	46bd      	mov	sp, r7
    8542:	bd80      	pop	{r7, pc}
    8544:	00008039 	.word	0x00008039

00008548 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    8548:	b580      	push	{r7, lr}
    854a:	b082      	sub	sp, #8
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8550:	2104      	movs	r1, #4
    8552:	6878      	ldr	r0, [r7, #4]
    8554:	4b03      	ldr	r3, [pc, #12]	; (8564 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    8556:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    8558:	687b      	ldr	r3, [r7, #4]
    855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    855c:	4618      	mov	r0, r3
    855e:	3708      	adds	r7, #8
    8560:	46bd      	mov	sp, r7
    8562:	bd80      	pop	{r7, pc}
    8564:	00008039 	.word	0x00008039

00008568 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    8568:	b480      	push	{r7}
    856a:	b083      	sub	sp, #12
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
    8570:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    8572:	687b      	ldr	r3, [r7, #4]
    8574:	683a      	ldr	r2, [r7, #0]
    8576:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8578:	bf00      	nop
    857a:	370c      	adds	r7, #12
    857c:	46bd      	mov	sp, r7
    857e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8582:	4770      	bx	lr

00008584 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    8584:	b480      	push	{r7}
    8586:	b083      	sub	sp, #12
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8590:	4618      	mov	r0, r3
    8592:	370c      	adds	r7, #12
    8594:	46bd      	mov	sp, r7
    8596:	f85d 7b04 	ldr.w	r7, [sp], #4
    859a:	4770      	bx	lr

0000859c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    859c:	b480      	push	{r7}
    859e:	b083      	sub	sp, #12
    85a0:	af00      	add	r7, sp, #0
    85a2:	6078      	str	r0, [r7, #4]
    85a4:	460b      	mov	r3, r1
    85a6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	78fa      	ldrb	r2, [r7, #3]
    85ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    85b0:	bf00      	nop
    85b2:	370c      	adds	r7, #12
    85b4:	46bd      	mov	sp, r7
    85b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ba:	4770      	bx	lr

000085bc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    85bc:	b480      	push	{r7}
    85be:	b083      	sub	sp, #12
    85c0:	af00      	add	r7, sp, #0
    85c2:	6078      	str	r0, [r7, #4]
    85c4:	460b      	mov	r3, r1
    85c6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	887a      	ldrh	r2, [r7, #2]
    85cc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    85ce:	bf00      	nop
    85d0:	370c      	adds	r7, #12
    85d2:	46bd      	mov	sp, r7
    85d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d8:	4770      	bx	lr
	...

000085dc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b082      	sub	sp, #8
    85e0:	af00      	add	r7, sp, #0
    85e2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    85e4:	2104      	movs	r1, #4
    85e6:	6878      	ldr	r0, [r7, #4]
    85e8:	4b06      	ldr	r3, [pc, #24]	; (8604 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    85ea:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	8b5b      	ldrh	r3, [r3, #26]
    85f0:	b29b      	uxth	r3, r3
    85f2:	091b      	lsrs	r3, r3, #4
    85f4:	b29b      	uxth	r3, r3
    85f6:	f003 0303 	and.w	r3, r3, #3
    85fa:	b29b      	uxth	r3, r3
}
    85fc:	4618      	mov	r0, r3
    85fe:	3708      	adds	r7, #8
    8600:	46bd      	mov	sp, r7
    8602:	bd80      	pop	{r7, pc}
    8604:	00008039 	.word	0x00008039

00008608 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8610:	2104      	movs	r1, #4
    8612:	6878      	ldr	r0, [r7, #4]
    8614:	4b04      	ldr	r3, [pc, #16]	; (8628 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    8616:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    8618:	687b      	ldr	r3, [r7, #4]
    861a:	8b5b      	ldrh	r3, [r3, #26]
    861c:	b29b      	uxth	r3, r3
}
    861e:	4618      	mov	r0, r3
    8620:	3708      	adds	r7, #8
    8622:	46bd      	mov	sp, r7
    8624:	bd80      	pop	{r7, pc}
    8626:	bf00      	nop
    8628:	00008039 	.word	0x00008039

0000862c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    862c:	b580      	push	{r7, lr}
    862e:	b082      	sub	sp, #8
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	460b      	mov	r3, r1
    8636:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    8638:	687b      	ldr	r3, [r7, #4]
    863a:	887a      	ldrh	r2, [r7, #2]
    863c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    863e:	2104      	movs	r1, #4
    8640:	6878      	ldr	r0, [r7, #4]
    8642:	4b03      	ldr	r3, [pc, #12]	; (8650 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    8644:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8646:	bf00      	nop
    8648:	3708      	adds	r7, #8
    864a:	46bd      	mov	sp, r7
    864c:	bd80      	pop	{r7, pc}
    864e:	bf00      	nop
    8650:	00008039 	.word	0x00008039

00008654 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8654:	b4b0      	push	{r4, r5, r7}
    8656:	b08d      	sub	sp, #52	; 0x34
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    865c:	4b13      	ldr	r3, [pc, #76]	; (86ac <_sercom_get_hardware_index+0x58>)
    865e:	f107 040c 	add.w	r4, r7, #12
    8662:	461d      	mov	r5, r3
    8664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8668:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    866c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8670:	2300      	movs	r3, #0
    8672:	62fb      	str	r3, [r7, #44]	; 0x2c
    8674:	e010      	b.n	8698 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8678:	009b      	lsls	r3, r3, #2
    867a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    867e:	4413      	add	r3, r2
    8680:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8684:	461a      	mov	r2, r3
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	429a      	cmp	r2, r3
    868a:	d102      	bne.n	8692 <_sercom_get_hardware_index+0x3e>
			return i;
    868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    868e:	b2db      	uxtb	r3, r3
    8690:	e006      	b.n	86a0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8694:	3301      	adds	r3, #1
    8696:	62fb      	str	r3, [r7, #44]	; 0x2c
    8698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    869a:	2b07      	cmp	r3, #7
    869c:	d9eb      	bls.n	8676 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    869e:	2300      	movs	r3, #0
}
    86a0:	4618      	mov	r0, r3
    86a2:	3734      	adds	r7, #52	; 0x34
    86a4:	46bd      	mov	sp, r7
    86a6:	bcb0      	pop	{r4, r5, r7}
    86a8:	4770      	bx	lr
    86aa:	bf00      	nop
    86ac:	00019a8c 	.word	0x00019a8c

000086b0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    86b0:	b580      	push	{r7, lr}
    86b2:	b084      	sub	sp, #16
    86b4:	af00      	add	r7, sp, #0
    86b6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    86b8:	6878      	ldr	r0, [r7, #4]
    86ba:	4b13      	ldr	r3, [pc, #76]	; (8708 <_get_i2cm_index+0x58>)
    86bc:	4798      	blx	r3
    86be:	4603      	mov	r3, r0
    86c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    86c2:	2300      	movs	r3, #0
    86c4:	73fb      	strb	r3, [r7, #15]
    86c6:	e010      	b.n	86ea <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    86c8:	7bfa      	ldrb	r2, [r7, #15]
    86ca:	4910      	ldr	r1, [pc, #64]	; (870c <_get_i2cm_index+0x5c>)
    86cc:	4613      	mov	r3, r2
    86ce:	005b      	lsls	r3, r3, #1
    86d0:	4413      	add	r3, r2
    86d2:	00db      	lsls	r3, r3, #3
    86d4:	440b      	add	r3, r1
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	7bba      	ldrb	r2, [r7, #14]
    86da:	429a      	cmp	r2, r3
    86dc:	d102      	bne.n	86e4 <_get_i2cm_index+0x34>
			return i;
    86de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    86e2:	e00d      	b.n	8700 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    86e4:	7bfb      	ldrb	r3, [r7, #15]
    86e6:	3301      	adds	r3, #1
    86e8:	73fb      	strb	r3, [r7, #15]
    86ea:	7bfb      	ldrb	r3, [r7, #15]
    86ec:	2b02      	cmp	r3, #2
    86ee:	d9eb      	bls.n	86c8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    86f0:	f240 32a6 	movw	r2, #934	; 0x3a6
    86f4:	4906      	ldr	r1, [pc, #24]	; (8710 <_get_i2cm_index+0x60>)
    86f6:	2000      	movs	r0, #0
    86f8:	4b06      	ldr	r3, [pc, #24]	; (8714 <_get_i2cm_index+0x64>)
    86fa:	4798      	blx	r3
	return -1;
    86fc:	f04f 33ff 	mov.w	r3, #4294967295
}
    8700:	4618      	mov	r0, r3
    8702:	3710      	adds	r7, #16
    8704:	46bd      	mov	sp, r7
    8706:	bd80      	pop	{r7, pc}
    8708:	00008655 	.word	0x00008655
    870c:	2000001c 	.word	0x2000001c
    8710:	00019a70 	.word	0x00019a70
    8714:	00005565 	.word	0x00005565

00008718 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    8718:	b580      	push	{r7, lr}
    871a:	b082      	sub	sp, #8
    871c:	af00      	add	r7, sp, #0
    871e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    8720:	2103      	movs	r1, #3
    8722:	6878      	ldr	r0, [r7, #4]
    8724:	4b02      	ldr	r3, [pc, #8]	; (8730 <_sercom_i2c_send_stop+0x18>)
    8726:	4798      	blx	r3
}
    8728:	bf00      	nop
    872a:	3708      	adds	r7, #8
    872c:	46bd      	mov	sp, r7
    872e:	bd80      	pop	{r7, pc}
    8730:	000083d1 	.word	0x000083d1

00008734 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8734:	b590      	push	{r4, r7, lr}
    8736:	b087      	sub	sp, #28
    8738:	af00      	add	r7, sp, #0
    873a:	60f8      	str	r0, [r7, #12]
    873c:	60b9      	str	r1, [r7, #8]
    873e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8740:	68f8      	ldr	r0, [r7, #12]
    8742:	4b7d      	ldr	r3, [pc, #500]	; (8938 <_sercom_i2c_sync_analyse_flags+0x204>)
    8744:	4798      	blx	r3
    8746:	4603      	mov	r3, r0
    8748:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    874a:	68f8      	ldr	r0, [r7, #12]
    874c:	4b7b      	ldr	r3, [pc, #492]	; (893c <_sercom_i2c_sync_analyse_flags+0x208>)
    874e:	4798      	blx	r3
    8750:	4603      	mov	r3, r0
    8752:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8754:	68bb      	ldr	r3, [r7, #8]
    8756:	f003 0301 	and.w	r3, r3, #1
    875a:	2b00      	cmp	r3, #0
    875c:	f000 8095 	beq.w	888a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8760:	8a7b      	ldrh	r3, [r7, #18]
    8762:	f003 0302 	and.w	r3, r3, #2
    8766:	2b00      	cmp	r3, #0
    8768:	d01d      	beq.n	87a6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    876a:	68f8      	ldr	r0, [r7, #12]
    876c:	4b74      	ldr	r3, [pc, #464]	; (8940 <_sercom_i2c_sync_analyse_flags+0x20c>)
    876e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	885b      	ldrh	r3, [r3, #2]
    8774:	b29b      	uxth	r3, r3
    8776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    877a:	b29a      	uxth	r2, r3
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	885b      	ldrh	r3, [r3, #2]
    8784:	b29b      	uxth	r3, r3
    8786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    878a:	b29a      	uxth	r2, r3
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8790:	8a7b      	ldrh	r3, [r7, #18]
    8792:	f003 0301 	and.w	r3, r3, #1
    8796:	2b00      	cmp	r3, #0
    8798:	d002      	beq.n	87a0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    879a:	f06f 0304 	mvn.w	r3, #4
    879e:	e0c6      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    87a0:	f06f 0303 	mvn.w	r3, #3
    87a4:	e0c3      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    87a6:	8a7b      	ldrh	r3, [r7, #18]
    87a8:	f003 0304 	and.w	r3, r3, #4
    87ac:	2b00      	cmp	r3, #0
    87ae:	d01f      	beq.n	87f0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	685b      	ldr	r3, [r3, #4]
    87b4:	2b00      	cmp	r3, #0
    87b6:	dd07      	ble.n	87c8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    87b8:	687b      	ldr	r3, [r7, #4]
    87ba:	885b      	ldrh	r3, [r3, #2]
    87bc:	b29b      	uxth	r3, r3
    87be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    87c2:	b29a      	uxth	r2, r3
    87c4:	687b      	ldr	r3, [r7, #4]
    87c6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	885b      	ldrh	r3, [r3, #2]
    87cc:	b29b      	uxth	r3, r3
    87ce:	b21b      	sxth	r3, r3
    87d0:	2b00      	cmp	r3, #0
    87d2:	da02      	bge.n	87da <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    87d4:	68f8      	ldr	r0, [r7, #12]
    87d6:	4b5b      	ldr	r3, [pc, #364]	; (8944 <_sercom_i2c_sync_analyse_flags+0x210>)
    87d8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    87da:	687b      	ldr	r3, [r7, #4]
    87dc:	885b      	ldrh	r3, [r3, #2]
    87de:	b29b      	uxth	r3, r3
    87e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    87e4:	b29a      	uxth	r2, r3
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    87ea:	f06f 0301 	mvn.w	r3, #1
    87ee:	e09e      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    87f0:	687b      	ldr	r3, [r7, #4]
    87f2:	885b      	ldrh	r3, [r3, #2]
    87f4:	b29b      	uxth	r3, r3
    87f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    87fa:	2b00      	cmp	r3, #0
    87fc:	d01c      	beq.n	8838 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	881b      	ldrh	r3, [r3, #0]
    8802:	121b      	asrs	r3, r3, #8
    8804:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8806:	f003 0406 	and.w	r4, r3, #6
    880a:	68f8      	ldr	r0, [r7, #12]
    880c:	4b4e      	ldr	r3, [pc, #312]	; (8948 <_sercom_i2c_sync_analyse_flags+0x214>)
    880e:	4798      	blx	r3
    8810:	4603      	mov	r3, r0
    8812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8816:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    8818:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    881c:	4619      	mov	r1, r3
    881e:	68f8      	ldr	r0, [r7, #12]
    8820:	4b4a      	ldr	r3, [pc, #296]	; (894c <_sercom_i2c_sync_analyse_flags+0x218>)
    8822:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	885b      	ldrh	r3, [r3, #2]
    8828:	b29b      	uxth	r3, r3
    882a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    882e:	b29a      	uxth	r2, r3
    8830:	687b      	ldr	r3, [r7, #4]
    8832:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8834:	2300      	movs	r3, #0
    8836:	e07a      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	685b      	ldr	r3, [r3, #4]
    883c:	2b00      	cmp	r3, #0
    883e:	d111      	bne.n	8864 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	885b      	ldrh	r3, [r3, #2]
    8844:	b29b      	uxth	r3, r3
    8846:	b21b      	sxth	r3, r3
    8848:	2b00      	cmp	r3, #0
    884a:	da02      	bge.n	8852 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    884c:	68f8      	ldr	r0, [r7, #12]
    884e:	4b3d      	ldr	r3, [pc, #244]	; (8944 <_sercom_i2c_sync_analyse_flags+0x210>)
    8850:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8852:	687b      	ldr	r3, [r7, #4]
    8854:	885b      	ldrh	r3, [r3, #2]
    8856:	b29b      	uxth	r3, r3
    8858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    885c:	b29a      	uxth	r2, r3
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	805a      	strh	r2, [r3, #2]
    8862:	e010      	b.n	8886 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8864:	687b      	ldr	r3, [r7, #4]
    8866:	689b      	ldr	r3, [r3, #8]
    8868:	781b      	ldrb	r3, [r3, #0]
    886a:	4619      	mov	r1, r3
    886c:	68f8      	ldr	r0, [r7, #12]
    886e:	4b38      	ldr	r3, [pc, #224]	; (8950 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8870:	4798      	blx	r3
				msg->buffer++;
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	689b      	ldr	r3, [r3, #8]
    8876:	1c5a      	adds	r2, r3, #1
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	609a      	str	r2, [r3, #8]
				msg->len--;
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	685b      	ldr	r3, [r3, #4]
    8880:	1e5a      	subs	r2, r3, #1
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8886:	2300      	movs	r3, #0
    8888:	e051      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    888a:	68bb      	ldr	r3, [r7, #8]
    888c:	f003 0302 	and.w	r3, r3, #2
    8890:	2b00      	cmp	r3, #0
    8892:	d04b      	beq.n	892c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8894:	687b      	ldr	r3, [r7, #4]
    8896:	685b      	ldr	r3, [r3, #4]
    8898:	2b00      	cmp	r3, #0
    889a:	d041      	beq.n	8920 <_sercom_i2c_sync_analyse_flags+0x1ec>
    889c:	8a7b      	ldrh	r3, [r7, #18]
    889e:	f003 0304 	and.w	r3, r3, #4
    88a2:	2b00      	cmp	r3, #0
    88a4:	d13c      	bne.n	8920 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	685b      	ldr	r3, [r3, #4]
    88aa:	1e5a      	subs	r2, r3, #1
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	685b      	ldr	r3, [r3, #4]
    88b4:	2b00      	cmp	r3, #0
    88b6:	d102      	bne.n	88be <_sercom_i2c_sync_analyse_flags+0x18a>
    88b8:	697b      	ldr	r3, [r7, #20]
    88ba:	2b00      	cmp	r3, #0
    88bc:	d006      	beq.n	88cc <_sercom_i2c_sync_analyse_flags+0x198>
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	685b      	ldr	r3, [r3, #4]
    88c2:	2b01      	cmp	r3, #1
    88c4:	d105      	bne.n	88d2 <_sercom_i2c_sync_analyse_flags+0x19e>
    88c6:	697b      	ldr	r3, [r7, #20]
    88c8:	2b00      	cmp	r3, #0
    88ca:	d002      	beq.n	88d2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    88cc:	68f8      	ldr	r0, [r7, #12]
    88ce:	4b21      	ldr	r3, [pc, #132]	; (8954 <_sercom_i2c_sync_analyse_flags+0x220>)
    88d0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    88d2:	687b      	ldr	r3, [r7, #4]
    88d4:	685b      	ldr	r3, [r3, #4]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d113      	bne.n	8902 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	885b      	ldrh	r3, [r3, #2]
    88de:	b29b      	uxth	r3, r3
    88e0:	b21b      	sxth	r3, r3
    88e2:	2b00      	cmp	r3, #0
    88e4:	da05      	bge.n	88f2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    88e6:	68f8      	ldr	r0, [r7, #12]
    88e8:	4b1b      	ldr	r3, [pc, #108]	; (8958 <_sercom_i2c_sync_analyse_flags+0x224>)
    88ea:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    88ec:	68f8      	ldr	r0, [r7, #12]
    88ee:	4b15      	ldr	r3, [pc, #84]	; (8944 <_sercom_i2c_sync_analyse_flags+0x210>)
    88f0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	885b      	ldrh	r3, [r3, #2]
    88f6:	b29b      	uxth	r3, r3
    88f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    88fc:	b29a      	uxth	r2, r3
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	689c      	ldr	r4, [r3, #8]
    8906:	1c62      	adds	r2, r4, #1
    8908:	687b      	ldr	r3, [r7, #4]
    890a:	609a      	str	r2, [r3, #8]
    890c:	68f8      	ldr	r0, [r7, #12]
    890e:	4b13      	ldr	r3, [pc, #76]	; (895c <_sercom_i2c_sync_analyse_flags+0x228>)
    8910:	4798      	blx	r3
    8912:	4603      	mov	r3, r0
    8914:	b2db      	uxtb	r3, r3
    8916:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8918:	68f8      	ldr	r0, [r7, #12]
    891a:	4b11      	ldr	r3, [pc, #68]	; (8960 <_sercom_i2c_sync_analyse_flags+0x22c>)
    891c:	4798      	blx	r3
    891e:	e005      	b.n	892c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8920:	68f8      	ldr	r0, [r7, #12]
    8922:	4b0f      	ldr	r3, [pc, #60]	; (8960 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8924:	4798      	blx	r3
			return I2C_NACK;
    8926:	f06f 0301 	mvn.w	r3, #1
    892a:	e000      	b.n	892e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    892c:	2300      	movs	r3, #0
}
    892e:	4618      	mov	r0, r3
    8930:	371c      	adds	r7, #28
    8932:	46bd      	mov	sp, r7
    8934:	bd90      	pop	{r4, r7, pc}
    8936:	bf00      	nop
    8938:	000081d1 	.word	0x000081d1
    893c:	00008609 	.word	0x00008609
    8940:	000080d1 	.word	0x000080d1
    8944:	00008719 	.word	0x00008719
    8948:	000084e9 	.word	0x000084e9
    894c:	000084c5 	.word	0x000084c5
    8950:	00008525 	.word	0x00008525
    8954:	00008381 	.word	0x00008381
    8958:	00008359 	.word	0x00008359
    895c:	00008549 	.word	0x00008549
    8960:	000080eb 	.word	0x000080eb

00008964 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    8964:	b580      	push	{r7, lr}
    8966:	b082      	sub	sp, #8
    8968:	af00      	add	r7, sp, #0
    896a:	6078      	str	r0, [r7, #4]
    896c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	2b00      	cmp	r3, #0
    8972:	bf14      	ite	ne
    8974:	2301      	movne	r3, #1
    8976:	2300      	moveq	r3, #0
    8978:	b2db      	uxtb	r3, r3
    897a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    897e:	4908      	ldr	r1, [pc, #32]	; (89a0 <_i2c_m_sync_init+0x3c>)
    8980:	4618      	mov	r0, r3
    8982:	4b08      	ldr	r3, [pc, #32]	; (89a4 <_i2c_m_sync_init+0x40>)
    8984:	4798      	blx	r3

	i2c_dev->hw = hw;
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	683a      	ldr	r2, [r7, #0]
    898a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	6839      	ldr	r1, [r7, #0]
    8990:	4618      	mov	r0, r3
    8992:	4b05      	ldr	r3, [pc, #20]	; (89a8 <_i2c_m_sync_init+0x44>)
    8994:	4798      	blx	r3
    8996:	4603      	mov	r3, r0
}
    8998:	4618      	mov	r0, r3
    899a:	3708      	adds	r7, #8
    899c:	46bd      	mov	sp, r7
    899e:	bd80      	pop	{r7, pc}
    89a0:	00019a70 	.word	0x00019a70
    89a4:	00005565 	.word	0x00005565
    89a8:	00008d21 	.word	0x00008d21

000089ac <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b082      	sub	sp, #8
    89b0:	af00      	add	r7, sp, #0
    89b2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	2b00      	cmp	r3, #0
    89b8:	bf14      	ite	ne
    89ba:	2301      	movne	r3, #1
    89bc:	2300      	moveq	r3, #0
    89be:	b2db      	uxtb	r3, r3
    89c0:	f240 5235 	movw	r2, #1333	; 0x535
    89c4:	4906      	ldr	r1, [pc, #24]	; (89e0 <_i2c_m_sync_enable+0x34>)
    89c6:	4618      	mov	r0, r3
    89c8:	4b06      	ldr	r3, [pc, #24]	; (89e4 <_i2c_m_sync_enable+0x38>)
    89ca:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	691b      	ldr	r3, [r3, #16]
    89d0:	4618      	mov	r0, r3
    89d2:	4b05      	ldr	r3, [pc, #20]	; (89e8 <_i2c_m_sync_enable+0x3c>)
    89d4:	4798      	blx	r3
    89d6:	4603      	mov	r3, r0
}
    89d8:	4618      	mov	r0, r3
    89da:	3708      	adds	r7, #8
    89dc:	46bd      	mov	sp, r7
    89de:	bd80      	pop	{r7, pc}
    89e0:	00019a70 	.word	0x00019a70
    89e4:	00005565 	.word	0x00005565
    89e8:	00008c95 	.word	0x00008c95

000089ec <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    89ec:	b580      	push	{r7, lr}
    89ee:	b084      	sub	sp, #16
    89f0:	af00      	add	r7, sp, #0
    89f2:	6078      	str	r0, [r7, #4]
    89f4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    89f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    89fa:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    89fc:	687b      	ldr	r3, [r7, #4]
    89fe:	691b      	ldr	r3, [r3, #16]
    8a00:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    8a02:	68b8      	ldr	r0, [r7, #8]
    8a04:	4b0f      	ldr	r3, [pc, #60]	; (8a44 <_sercom_i2c_sync_wait_bus+0x58>)
    8a06:	4798      	blx	r3
    8a08:	4603      	mov	r3, r0
    8a0a:	461a      	mov	r2, r3
    8a0c:	683b      	ldr	r3, [r7, #0]
    8a0e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    8a10:	68fb      	ldr	r3, [r7, #12]
    8a12:	1e5a      	subs	r2, r3, #1
    8a14:	60fa      	str	r2, [r7, #12]
    8a16:	2b00      	cmp	r3, #0
    8a18:	d102      	bne.n	8a20 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    8a1a:	f06f 0304 	mvn.w	r3, #4
    8a1e:	e00c      	b.n	8a3a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    8a20:	683b      	ldr	r3, [r7, #0]
    8a22:	681b      	ldr	r3, [r3, #0]
    8a24:	f003 0301 	and.w	r3, r3, #1
    8a28:	2b00      	cmp	r3, #0
    8a2a:	d105      	bne.n	8a38 <_sercom_i2c_sync_wait_bus+0x4c>
    8a2c:	683b      	ldr	r3, [r7, #0]
    8a2e:	681b      	ldr	r3, [r3, #0]
    8a30:	f003 0302 	and.w	r3, r3, #2
    8a34:	2b00      	cmp	r3, #0
    8a36:	d0e4      	beq.n	8a02 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    8a38:	2300      	movs	r3, #0
}
    8a3a:	4618      	mov	r0, r3
    8a3c:	3710      	adds	r7, #16
    8a3e:	46bd      	mov	sp, r7
    8a40:	bd80      	pop	{r7, pc}
    8a42:	bf00      	nop
    8a44:	00008105 	.word	0x00008105

00008a48 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    8a48:	b590      	push	{r4, r7, lr}
    8a4a:	b087      	sub	sp, #28
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	691b      	ldr	r3, [r3, #16]
    8a54:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    8a56:	687b      	ldr	r3, [r7, #4]
    8a58:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8a5a:	6978      	ldr	r0, [r7, #20]
    8a5c:	4b39      	ldr	r3, [pc, #228]	; (8b44 <_sercom_i2c_sync_send_address+0xfc>)
    8a5e:	4798      	blx	r3
    8a60:	4603      	mov	r3, r0
    8a62:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	2b00      	cmp	r3, #0
    8a68:	bf14      	ite	ne
    8a6a:	2301      	movne	r3, #1
    8a6c:	2300      	moveq	r3, #0
    8a6e:	b2db      	uxtb	r3, r3
    8a70:	f240 52a5 	movw	r2, #1445	; 0x5a5
    8a74:	4934      	ldr	r1, [pc, #208]	; (8b48 <_sercom_i2c_sync_send_address+0x100>)
    8a76:	4618      	mov	r0, r3
    8a78:	4b34      	ldr	r3, [pc, #208]	; (8b4c <_sercom_i2c_sync_send_address+0x104>)
    8a7a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    8a7c:	693b      	ldr	r3, [r7, #16]
    8a7e:	685b      	ldr	r3, [r3, #4]
    8a80:	2b01      	cmp	r3, #1
    8a82:	d106      	bne.n	8a92 <_sercom_i2c_sync_send_address+0x4a>
    8a84:	68fb      	ldr	r3, [r7, #12]
    8a86:	2b00      	cmp	r3, #0
    8a88:	d003      	beq.n	8a92 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8a8a:	6978      	ldr	r0, [r7, #20]
    8a8c:	4b30      	ldr	r3, [pc, #192]	; (8b50 <_sercom_i2c_sync_send_address+0x108>)
    8a8e:	4798      	blx	r3
    8a90:	e002      	b.n	8a98 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8a92:	6978      	ldr	r0, [r7, #20]
    8a94:	4b2f      	ldr	r3, [pc, #188]	; (8b54 <_sercom_i2c_sync_send_address+0x10c>)
    8a96:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8a98:	693b      	ldr	r3, [r7, #16]
    8a9a:	881b      	ldrh	r3, [r3, #0]
    8a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8aa0:	2b00      	cmp	r3, #0
    8aa2:	d022      	beq.n	8aea <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8aa4:	693b      	ldr	r3, [r7, #16]
    8aa6:	885b      	ldrh	r3, [r3, #2]
    8aa8:	b29b      	uxth	r3, r3
    8aaa:	f003 0301 	and.w	r3, r3, #1
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d007      	beq.n	8ac2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8ab2:	693b      	ldr	r3, [r7, #16]
    8ab4:	885b      	ldrh	r3, [r3, #2]
    8ab6:	b29b      	uxth	r3, r3
    8ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    8abc:	b29a      	uxth	r2, r3
    8abe:	693b      	ldr	r3, [r7, #16]
    8ac0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    8ac2:	693b      	ldr	r3, [r7, #16]
    8ac4:	881b      	ldrh	r3, [r3, #0]
    8ac6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8ac8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    8acc:	401c      	ands	r4, r3
    8ace:	6978      	ldr	r0, [r7, #20]
    8ad0:	4b21      	ldr	r3, [pc, #132]	; (8b58 <_sercom_i2c_sync_send_address+0x110>)
    8ad2:	4798      	blx	r3
    8ad4:	4603      	mov	r3, r0
    8ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8ada:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    8adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8ae0:	4619      	mov	r1, r3
    8ae2:	6978      	ldr	r0, [r7, #20]
    8ae4:	4b1d      	ldr	r3, [pc, #116]	; (8b5c <_sercom_i2c_sync_send_address+0x114>)
    8ae6:	4798      	blx	r3
    8ae8:	e01a      	b.n	8b20 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8aea:	693b      	ldr	r3, [r7, #16]
    8aec:	881b      	ldrh	r3, [r3, #0]
    8aee:	005b      	lsls	r3, r3, #1
    8af0:	b2db      	uxtb	r3, r3
    8af2:	693a      	ldr	r2, [r7, #16]
    8af4:	8852      	ldrh	r2, [r2, #2]
    8af6:	b292      	uxth	r2, r2
    8af8:	f002 0201 	and.w	r2, r2, #1
    8afc:	2a00      	cmp	r2, #0
    8afe:	bf14      	ite	ne
    8b00:	2201      	movne	r2, #1
    8b02:	2200      	moveq	r2, #0
    8b04:	b2d2      	uxtb	r2, r2
    8b06:	4313      	orrs	r3, r2
    8b08:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8b0a:	6978      	ldr	r0, [r7, #20]
    8b0c:	4b12      	ldr	r3, [pc, #72]	; (8b58 <_sercom_i2c_sync_send_address+0x110>)
    8b0e:	4798      	blx	r3
    8b10:	4603      	mov	r3, r0
    8b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8b16:	4323      	orrs	r3, r4
    8b18:	4619      	mov	r1, r3
    8b1a:	6978      	ldr	r0, [r7, #20]
    8b1c:	4b0f      	ldr	r3, [pc, #60]	; (8b5c <_sercom_i2c_sync_send_address+0x114>)
    8b1e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8b20:	f107 0308 	add.w	r3, r7, #8
    8b24:	4619      	mov	r1, r3
    8b26:	6878      	ldr	r0, [r7, #4]
    8b28:	4b0d      	ldr	r3, [pc, #52]	; (8b60 <_sercom_i2c_sync_send_address+0x118>)
    8b2a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    8b2c:	68bb      	ldr	r3, [r7, #8]
    8b2e:	693a      	ldr	r2, [r7, #16]
    8b30:	4619      	mov	r1, r3
    8b32:	6978      	ldr	r0, [r7, #20]
    8b34:	4b0b      	ldr	r3, [pc, #44]	; (8b64 <_sercom_i2c_sync_send_address+0x11c>)
    8b36:	4798      	blx	r3
    8b38:	4603      	mov	r3, r0
}
    8b3a:	4618      	mov	r0, r3
    8b3c:	371c      	adds	r7, #28
    8b3e:	46bd      	mov	sp, r7
    8b40:	bd90      	pop	{r4, r7, pc}
    8b42:	bf00      	nop
    8b44:	000081d1 	.word	0x000081d1
    8b48:	00019a70 	.word	0x00019a70
    8b4c:	00005565 	.word	0x00005565
    8b50:	00008381 	.word	0x00008381
    8b54:	000083a9 	.word	0x000083a9
    8b58:	000084e9 	.word	0x000084e9
    8b5c:	000084c5 	.word	0x000084c5
    8b60:	000089ed 	.word	0x000089ed
    8b64:	00008735 	.word	0x00008735

00008b68 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    8b68:	b580      	push	{r7, lr}
    8b6a:	b086      	sub	sp, #24
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	6078      	str	r0, [r7, #4]
    8b70:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	691b      	ldr	r3, [r3, #16]
    8b76:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	bf14      	ite	ne
    8b7e:	2301      	movne	r3, #1
    8b80:	2300      	moveq	r3, #0
    8b82:	b2db      	uxtb	r3, r3
    8b84:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    8b88:	493b      	ldr	r1, [pc, #236]	; (8c78 <_i2c_m_sync_transfer+0x110>)
    8b8a:	4618      	mov	r0, r3
    8b8c:	4b3b      	ldr	r3, [pc, #236]	; (8c7c <_i2c_m_sync_transfer+0x114>)
    8b8e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	691b      	ldr	r3, [r3, #16]
    8b94:	2b00      	cmp	r3, #0
    8b96:	bf14      	ite	ne
    8b98:	2301      	movne	r3, #1
    8b9a:	2300      	moveq	r3, #0
    8b9c:	b2db      	uxtb	r3, r3
    8b9e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    8ba2:	4935      	ldr	r1, [pc, #212]	; (8c78 <_i2c_m_sync_transfer+0x110>)
    8ba4:	4618      	mov	r0, r3
    8ba6:	4b35      	ldr	r3, [pc, #212]	; (8c7c <_i2c_m_sync_transfer+0x114>)
    8ba8:	4798      	blx	r3
	ASSERT(msg);
    8baa:	683b      	ldr	r3, [r7, #0]
    8bac:	2b00      	cmp	r3, #0
    8bae:	bf14      	ite	ne
    8bb0:	2301      	movne	r3, #1
    8bb2:	2300      	moveq	r3, #0
    8bb4:	b2db      	uxtb	r3, r3
    8bb6:	f240 52d2 	movw	r2, #1490	; 0x5d2
    8bba:	492f      	ldr	r1, [pc, #188]	; (8c78 <_i2c_m_sync_transfer+0x110>)
    8bbc:	4618      	mov	r0, r3
    8bbe:	4b2f      	ldr	r3, [pc, #188]	; (8c7c <_i2c_m_sync_transfer+0x114>)
    8bc0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8bc2:	687b      	ldr	r3, [r7, #4]
    8bc4:	885b      	ldrh	r3, [r3, #2]
    8bc6:	b29b      	uxth	r3, r3
    8bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d002      	beq.n	8bd6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    8bd0:	f06f 0305 	mvn.w	r3, #5
    8bd4:	e04c      	b.n	8c70 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    8bd6:	683b      	ldr	r3, [r7, #0]
    8bd8:	885b      	ldrh	r3, [r3, #2]
    8bda:	b29b      	uxth	r3, r3
    8bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8be0:	b29a      	uxth	r2, r3
    8be2:	683b      	ldr	r3, [r7, #0]
    8be4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	683a      	ldr	r2, [r7, #0]
    8bea:	ca07      	ldmia	r2, {r0, r1, r2}
    8bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    8bf0:	6938      	ldr	r0, [r7, #16]
    8bf2:	4b23      	ldr	r3, [pc, #140]	; (8c80 <_i2c_m_sync_transfer+0x118>)
    8bf4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    8bf6:	6878      	ldr	r0, [r7, #4]
    8bf8:	4b22      	ldr	r3, [pc, #136]	; (8c84 <_i2c_m_sync_transfer+0x11c>)
    8bfa:	4798      	blx	r3
    8bfc:	6178      	str	r0, [r7, #20]

	if (ret) {
    8bfe:	697b      	ldr	r3, [r7, #20]
    8c00:	2b00      	cmp	r3, #0
    8c02:	d02d      	beq.n	8c60 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	885b      	ldrh	r3, [r3, #2]
    8c08:	b29b      	uxth	r3, r3
    8c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8c0e:	b29a      	uxth	r2, r3
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	805a      	strh	r2, [r3, #2]

		return ret;
    8c14:	697b      	ldr	r3, [r7, #20]
    8c16:	e02b      	b.n	8c70 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8c18:	f107 030c 	add.w	r3, r7, #12
    8c1c:	4619      	mov	r1, r3
    8c1e:	6878      	ldr	r0, [r7, #4]
    8c20:	4b19      	ldr	r3, [pc, #100]	; (8c88 <_i2c_m_sync_transfer+0x120>)
    8c22:	4798      	blx	r3
    8c24:	6178      	str	r0, [r7, #20]

		if (ret) {
    8c26:	697b      	ldr	r3, [r7, #20]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d012      	beq.n	8c52 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    8c2c:	683b      	ldr	r3, [r7, #0]
    8c2e:	885b      	ldrh	r3, [r3, #2]
    8c30:	b29b      	uxth	r3, r3
    8c32:	b21b      	sxth	r3, r3
    8c34:	2b00      	cmp	r3, #0
    8c36:	da02      	bge.n	8c3e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    8c38:	6938      	ldr	r0, [r7, #16]
    8c3a:	4b14      	ldr	r3, [pc, #80]	; (8c8c <_i2c_m_sync_transfer+0x124>)
    8c3c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	885b      	ldrh	r3, [r3, #2]
    8c42:	b29b      	uxth	r3, r3
    8c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8c48:	b29a      	uxth	r2, r3
    8c4a:	687b      	ldr	r3, [r7, #4]
    8c4c:	805a      	strh	r2, [r3, #2]

			return ret;
    8c4e:	697b      	ldr	r3, [r7, #20]
    8c50:	e00e      	b.n	8c70 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    8c52:	68fb      	ldr	r3, [r7, #12]
    8c54:	687a      	ldr	r2, [r7, #4]
    8c56:	4619      	mov	r1, r3
    8c58:	6938      	ldr	r0, [r7, #16]
    8c5a:	4b0d      	ldr	r3, [pc, #52]	; (8c90 <_i2c_m_sync_transfer+0x128>)
    8c5c:	4798      	blx	r3
    8c5e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	885b      	ldrh	r3, [r3, #2]
    8c64:	b29b      	uxth	r3, r3
    8c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d1d4      	bne.n	8c18 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    8c6e:	697b      	ldr	r3, [r7, #20]
}
    8c70:	4618      	mov	r0, r3
    8c72:	3718      	adds	r7, #24
    8c74:	46bd      	mov	sp, r7
    8c76:	bd80      	pop	{r7, pc}
    8c78:	00019a70 	.word	0x00019a70
    8c7c:	00005565 	.word	0x00005565
    8c80:	00008331 	.word	0x00008331
    8c84:	00008a49 	.word	0x00008a49
    8c88:	000089ed 	.word	0x000089ed
    8c8c:	00008719 	.word	0x00008719
    8c90:	00008735 	.word	0x00008735

00008c94 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    8c94:	b580      	push	{r7, lr}
    8c96:	b084      	sub	sp, #16
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    8c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8ca0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    8ca2:	2304      	movs	r3, #4
    8ca4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	2b00      	cmp	r3, #0
    8caa:	bf14      	ite	ne
    8cac:	2301      	movne	r3, #1
    8cae:	2300      	moveq	r3, #0
    8cb0:	b2db      	uxtb	r3, r3
    8cb2:	f240 6205 	movw	r2, #1541	; 0x605
    8cb6:	4915      	ldr	r1, [pc, #84]	; (8d0c <_i2c_m_enable_implementation+0x78>)
    8cb8:	4618      	mov	r0, r3
    8cba:	4b15      	ldr	r3, [pc, #84]	; (8d10 <_i2c_m_enable_implementation+0x7c>)
    8cbc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    8cbe:	6878      	ldr	r0, [r7, #4]
    8cc0:	4b14      	ldr	r3, [pc, #80]	; (8d14 <_i2c_m_enable_implementation+0x80>)
    8cc2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    8cc4:	e016      	b.n	8cf4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    8cc6:	68fb      	ldr	r3, [r7, #12]
    8cc8:	3b01      	subs	r3, #1
    8cca:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    8ccc:	68fb      	ldr	r3, [r7, #12]
    8cce:	2b00      	cmp	r3, #0
    8cd0:	dc10      	bgt.n	8cf4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    8cd2:	68bb      	ldr	r3, [r7, #8]
    8cd4:	3b01      	subs	r3, #1
    8cd6:	60bb      	str	r3, [r7, #8]
    8cd8:	68bb      	ldr	r3, [r7, #8]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d007      	beq.n	8cee <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    8cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8ce2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    8ce4:	2110      	movs	r1, #16
    8ce6:	6878      	ldr	r0, [r7, #4]
    8ce8:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <_i2c_m_enable_implementation+0x84>)
    8cea:	4798      	blx	r3
    8cec:	e002      	b.n	8cf4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    8cee:	f06f 0305 	mvn.w	r3, #5
    8cf2:	e006      	b.n	8d02 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    8cf4:	6878      	ldr	r0, [r7, #4]
    8cf6:	4b09      	ldr	r3, [pc, #36]	; (8d1c <_i2c_m_enable_implementation+0x88>)
    8cf8:	4798      	blx	r3
    8cfa:	4603      	mov	r3, r0
    8cfc:	2b01      	cmp	r3, #1
    8cfe:	d1e2      	bne.n	8cc6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    8d00:	2300      	movs	r3, #0
}
    8d02:	4618      	mov	r0, r3
    8d04:	3710      	adds	r7, #16
    8d06:	46bd      	mov	sp, r7
    8d08:	bd80      	pop	{r7, pc}
    8d0a:	bf00      	nop
    8d0c:	00019a70 	.word	0x00019a70
    8d10:	00005565 	.word	0x00005565
    8d14:	00008181 	.word	0x00008181
    8d18:	0000862d 	.word	0x0000862d
    8d1c:	000085dd 	.word	0x000085dd

00008d20 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8d20:	b580      	push	{r7, lr}
    8d22:	b084      	sub	sp, #16
    8d24:	af00      	add	r7, sp, #0
    8d26:	6078      	str	r0, [r7, #4]
    8d28:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    8d2a:	6838      	ldr	r0, [r7, #0]
    8d2c:	4b42      	ldr	r3, [pc, #264]	; (8e38 <_i2c_m_sync_init_impl+0x118>)
    8d2e:	4798      	blx	r3
    8d30:	4603      	mov	r3, r0
    8d32:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8d34:	2101      	movs	r1, #1
    8d36:	6838      	ldr	r0, [r7, #0]
    8d38:	4b40      	ldr	r3, [pc, #256]	; (8e3c <_i2c_m_sync_init_impl+0x11c>)
    8d3a:	4798      	blx	r3
    8d3c:	4603      	mov	r3, r0
    8d3e:	f083 0301 	eor.w	r3, r3, #1
    8d42:	b2db      	uxtb	r3, r3
    8d44:	2b00      	cmp	r3, #0
    8d46:	d020      	beq.n	8d8a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    8d48:	7bfa      	ldrb	r2, [r7, #15]
    8d4a:	493d      	ldr	r1, [pc, #244]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8d4c:	4613      	mov	r3, r2
    8d4e:	005b      	lsls	r3, r3, #1
    8d50:	4413      	add	r3, r2
    8d52:	00db      	lsls	r3, r3, #3
    8d54:	440b      	add	r3, r1
    8d56:	3304      	adds	r3, #4
    8d58:	681b      	ldr	r3, [r3, #0]
    8d5a:	f003 031c 	and.w	r3, r3, #28
    8d5e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8d60:	2102      	movs	r1, #2
    8d62:	6838      	ldr	r0, [r7, #0]
    8d64:	4b37      	ldr	r3, [pc, #220]	; (8e44 <_i2c_m_sync_init_impl+0x124>)
    8d66:	4798      	blx	r3
    8d68:	4603      	mov	r3, r0
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d006      	beq.n	8d7c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    8d6e:	6838      	ldr	r0, [r7, #0]
    8d70:	4b35      	ldr	r3, [pc, #212]	; (8e48 <_i2c_m_sync_init_impl+0x128>)
    8d72:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8d74:	2102      	movs	r1, #2
    8d76:	6838      	ldr	r0, [r7, #0]
    8d78:	4b34      	ldr	r3, [pc, #208]	; (8e4c <_i2c_m_sync_init_impl+0x12c>)
    8d7a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    8d7c:	68bb      	ldr	r3, [r7, #8]
    8d7e:	f043 0301 	orr.w	r3, r3, #1
    8d82:	4619      	mov	r1, r3
    8d84:	6838      	ldr	r0, [r7, #0]
    8d86:	4b32      	ldr	r3, [pc, #200]	; (8e50 <_i2c_m_sync_init_impl+0x130>)
    8d88:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    8d8a:	2101      	movs	r1, #1
    8d8c:	6838      	ldr	r0, [r7, #0]
    8d8e:	4b2f      	ldr	r3, [pc, #188]	; (8e4c <_i2c_m_sync_init_impl+0x12c>)
    8d90:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8d92:	7bfa      	ldrb	r2, [r7, #15]
    8d94:	492a      	ldr	r1, [pc, #168]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8d96:	4613      	mov	r3, r2
    8d98:	005b      	lsls	r3, r3, #1
    8d9a:	4413      	add	r3, r2
    8d9c:	00db      	lsls	r3, r3, #3
    8d9e:	440b      	add	r3, r1
    8da0:	3304      	adds	r3, #4
    8da2:	681b      	ldr	r3, [r3, #0]
    8da4:	4619      	mov	r1, r3
    8da6:	6838      	ldr	r0, [r7, #0]
    8da8:	4b29      	ldr	r3, [pc, #164]	; (8e50 <_i2c_m_sync_init_impl+0x130>)
    8daa:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8dac:	7bfa      	ldrb	r2, [r7, #15]
    8dae:	4924      	ldr	r1, [pc, #144]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8db0:	4613      	mov	r3, r2
    8db2:	005b      	lsls	r3, r3, #1
    8db4:	4413      	add	r3, r2
    8db6:	00db      	lsls	r3, r3, #3
    8db8:	440b      	add	r3, r1
    8dba:	3308      	adds	r3, #8
    8dbc:	681b      	ldr	r3, [r3, #0]
    8dbe:	4619      	mov	r1, r3
    8dc0:	6838      	ldr	r0, [r7, #0]
    8dc2:	4b24      	ldr	r3, [pc, #144]	; (8e54 <_i2c_m_sync_init_impl+0x134>)
    8dc4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    8dc6:	7bfa      	ldrb	r2, [r7, #15]
    8dc8:	491d      	ldr	r1, [pc, #116]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8dca:	4613      	mov	r3, r2
    8dcc:	005b      	lsls	r3, r3, #1
    8dce:	4413      	add	r3, r2
    8dd0:	00db      	lsls	r3, r3, #3
    8dd2:	440b      	add	r3, r1
    8dd4:	330c      	adds	r3, #12
    8dd6:	681b      	ldr	r3, [r3, #0]
    8dd8:	4619      	mov	r1, r3
    8dda:	6838      	ldr	r0, [r7, #0]
    8ddc:	4b1e      	ldr	r3, [pc, #120]	; (8e58 <_i2c_m_sync_init_impl+0x138>)
    8dde:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8de0:	7bfa      	ldrb	r2, [r7, #15]
    8de2:	4917      	ldr	r1, [pc, #92]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8de4:	4613      	mov	r3, r2
    8de6:	005b      	lsls	r3, r3, #1
    8de8:	4413      	add	r3, r2
    8dea:	00db      	lsls	r3, r3, #3
    8dec:	440b      	add	r3, r1
    8dee:	3304      	adds	r3, #4
    8df0:	681b      	ldr	r3, [r3, #0]
    8df2:	0e1b      	lsrs	r3, r3, #24
    8df4:	b29b      	uxth	r3, r3
    8df6:	f003 0303 	and.w	r3, r3, #3
    8dfa:	b29a      	uxth	r2, r3
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	899b      	ldrh	r3, [r3, #12]
    8e04:	2b01      	cmp	r3, #1
    8e06:	bf8c      	ite	hi
    8e08:	2301      	movhi	r3, #1
    8e0a:	2300      	movls	r3, #0
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	4619      	mov	r1, r3
    8e10:	6838      	ldr	r0, [r7, #0]
    8e12:	4b12      	ldr	r3, [pc, #72]	; (8e5c <_i2c_m_sync_init_impl+0x13c>)
    8e14:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8e16:	7bfa      	ldrb	r2, [r7, #15]
    8e18:	4909      	ldr	r1, [pc, #36]	; (8e40 <_i2c_m_sync_init_impl+0x120>)
    8e1a:	4613      	mov	r3, r2
    8e1c:	005b      	lsls	r3, r3, #1
    8e1e:	4413      	add	r3, r2
    8e20:	00db      	lsls	r3, r3, #3
    8e22:	440b      	add	r3, r1
    8e24:	3312      	adds	r3, #18
    8e26:	881a      	ldrh	r2, [r3, #0]
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8e2c:	2300      	movs	r3, #0
}
    8e2e:	4618      	mov	r0, r3
    8e30:	3710      	adds	r7, #16
    8e32:	46bd      	mov	sp, r7
    8e34:	bd80      	pop	{r7, pc}
    8e36:	bf00      	nop
    8e38:	000086b1 	.word	0x000086b1
    8e3c:	0000805d 	.word	0x0000805d
    8e40:	2000001c 	.word	0x2000001c
    8e44:	00008201 	.word	0x00008201
    8e48:	000081a9 	.word	0x000081a9
    8e4c:	00008039 	.word	0x00008039
    8e50:	00008231 	.word	0x00008231
    8e54:	00008401 	.word	0x00008401
    8e58:	00008449 	.word	0x00008449
    8e5c:	00008485 	.word	0x00008485

00008e60 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    8e60:	b580      	push	{r7, lr}
    8e62:	b082      	sub	sp, #8
    8e64:	af00      	add	r7, sp, #0
    8e66:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8e68:	2101      	movs	r1, #1
    8e6a:	6878      	ldr	r0, [r7, #4]
    8e6c:	4b07      	ldr	r3, [pc, #28]	; (8e8c <_spi_sync_enable+0x2c>)
    8e6e:	4798      	blx	r3
    8e70:	4603      	mov	r3, r0
    8e72:	2b00      	cmp	r3, #0
    8e74:	d002      	beq.n	8e7c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    8e76:	f06f 0303 	mvn.w	r3, #3
    8e7a:	e003      	b.n	8e84 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    8e7c:	6878      	ldr	r0, [r7, #4]
    8e7e:	4b04      	ldr	r3, [pc, #16]	; (8e90 <_spi_sync_enable+0x30>)
    8e80:	4798      	blx	r3

	return ERR_NONE;
    8e82:	2300      	movs	r3, #0
}
    8e84:	4618      	mov	r0, r3
    8e86:	3708      	adds	r7, #8
    8e88:	46bd      	mov	sp, r7
    8e8a:	bd80      	pop	{r7, pc}
    8e8c:	000080a9 	.word	0x000080a9
    8e90:	00008255 	.word	0x00008255

00008e94 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    8e94:	b580      	push	{r7, lr}
    8e96:	b082      	sub	sp, #8
    8e98:	af00      	add	r7, sp, #0
    8e9a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8e9c:	2101      	movs	r1, #1
    8e9e:	6878      	ldr	r0, [r7, #4]
    8ea0:	4b07      	ldr	r3, [pc, #28]	; (8ec0 <_spi_sync_disable+0x2c>)
    8ea2:	4798      	blx	r3
    8ea4:	4603      	mov	r3, r0
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	d002      	beq.n	8eb0 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    8eaa:	f06f 0303 	mvn.w	r3, #3
    8eae:	e003      	b.n	8eb8 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8eb0:	6878      	ldr	r0, [r7, #4]
    8eb2:	4b04      	ldr	r3, [pc, #16]	; (8ec4 <_spi_sync_disable+0x30>)
    8eb4:	4798      	blx	r3

	return ERR_NONE;
    8eb6:	2300      	movs	r3, #0
}
    8eb8:	4618      	mov	r0, r3
    8eba:	3708      	adds	r7, #8
    8ebc:	46bd      	mov	sp, r7
    8ebe:	bd80      	pop	{r7, pc}
    8ec0:	000080a9 	.word	0x000080a9
    8ec4:	000082b5 	.word	0x000082b5

00008ec8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	b082      	sub	sp, #8
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
    8ed0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d004      	beq.n	8ee2 <_spi_load_regs_master+0x1a>
    8ed8:	683b      	ldr	r3, [r7, #0]
    8eda:	2b00      	cmp	r3, #0
    8edc:	d001      	beq.n	8ee2 <_spi_load_regs_master+0x1a>
    8ede:	2301      	movs	r3, #1
    8ee0:	e000      	b.n	8ee4 <_spi_load_regs_master+0x1c>
    8ee2:	2300      	movs	r3, #0
    8ee4:	f003 0301 	and.w	r3, r3, #1
    8ee8:	b2db      	uxtb	r3, r3
    8eea:	f640 1209 	movw	r2, #2313	; 0x909
    8eee:	4915      	ldr	r1, [pc, #84]	; (8f44 <_spi_load_regs_master+0x7c>)
    8ef0:	4618      	mov	r0, r3
    8ef2:	4b15      	ldr	r3, [pc, #84]	; (8f48 <_spi_load_regs_master+0x80>)
    8ef4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8ef6:	683b      	ldr	r3, [r7, #0]
    8ef8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8efa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8efe:	f023 0301 	bic.w	r3, r3, #1
    8f02:	4619      	mov	r1, r3
    8f04:	6878      	ldr	r0, [r7, #4]
    8f06:	4b11      	ldr	r3, [pc, #68]	; (8f4c <_spi_load_regs_master+0x84>)
    8f08:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8f0a:	683b      	ldr	r3, [r7, #0]
    8f0c:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8f0e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8f12:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8f1a:	4619      	mov	r1, r3
    8f1c:	6878      	ldr	r0, [r7, #4]
    8f1e:	4b0c      	ldr	r3, [pc, #48]	; (8f50 <_spi_load_regs_master+0x88>)
    8f20:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8f22:	683b      	ldr	r3, [r7, #0]
    8f24:	7b1b      	ldrb	r3, [r3, #12]
    8f26:	4619      	mov	r1, r3
    8f28:	6878      	ldr	r0, [r7, #4]
    8f2a:	4b0a      	ldr	r3, [pc, #40]	; (8f54 <_spi_load_regs_master+0x8c>)
    8f2c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8f2e:	683b      	ldr	r3, [r7, #0]
    8f30:	7b5b      	ldrb	r3, [r3, #13]
    8f32:	4619      	mov	r1, r3
    8f34:	6878      	ldr	r0, [r7, #4]
    8f36:	4b08      	ldr	r3, [pc, #32]	; (8f58 <_spi_load_regs_master+0x90>)
    8f38:	4798      	blx	r3
}
    8f3a:	bf00      	nop
    8f3c:	3708      	adds	r7, #8
    8f3e:	46bd      	mov	sp, r7
    8f40:	bd80      	pop	{r7, pc}
    8f42:	bf00      	nop
    8f44:	00019a70 	.word	0x00019a70
    8f48:	00005565 	.word	0x00005565
    8f4c:	0000830d 	.word	0x0000830d
    8f50:	00008425 	.word	0x00008425
    8f54:	00008465 	.word	0x00008465
    8f58:	0000859d 	.word	0x0000859d

00008f5c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	af00      	add	r7, sp, #0
    8f62:	6078      	str	r0, [r7, #4]
    8f64:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d004      	beq.n	8f76 <_spi_load_regs_slave+0x1a>
    8f6c:	683b      	ldr	r3, [r7, #0]
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d001      	beq.n	8f76 <_spi_load_regs_slave+0x1a>
    8f72:	2301      	movs	r3, #1
    8f74:	e000      	b.n	8f78 <_spi_load_regs_slave+0x1c>
    8f76:	2300      	movs	r3, #0
    8f78:	f003 0301 	and.w	r3, r3, #1
    8f7c:	b2db      	uxtb	r3, r3
    8f7e:	f640 121d 	movw	r2, #2333	; 0x91d
    8f82:	491a      	ldr	r1, [pc, #104]	; (8fec <_spi_load_regs_slave+0x90>)
    8f84:	4618      	mov	r0, r3
    8f86:	4b1a      	ldr	r3, [pc, #104]	; (8ff0 <_spi_load_regs_slave+0x94>)
    8f88:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8f8a:	683b      	ldr	r3, [r7, #0]
    8f8c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8f8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8f92:	f023 0301 	bic.w	r3, r3, #1
    8f96:	4619      	mov	r1, r3
    8f98:	6878      	ldr	r0, [r7, #4]
    8f9a:	4b16      	ldr	r3, [pc, #88]	; (8ff4 <_spi_load_regs_slave+0x98>)
    8f9c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8f9e:	683b      	ldr	r3, [r7, #0]
    8fa0:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8fa2:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8fa6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8fae:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8fb2:	4619      	mov	r1, r3
    8fb4:	6878      	ldr	r0, [r7, #4]
    8fb6:	4b10      	ldr	r3, [pc, #64]	; (8ff8 <_spi_load_regs_slave+0x9c>)
    8fb8:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8fba:	683b      	ldr	r3, [r7, #0]
    8fbc:	689b      	ldr	r3, [r3, #8]
    8fbe:	4619      	mov	r1, r3
    8fc0:	6878      	ldr	r0, [r7, #4]
    8fc2:	4b0e      	ldr	r3, [pc, #56]	; (8ffc <_spi_load_regs_slave+0xa0>)
    8fc4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8fc6:	683b      	ldr	r3, [r7, #0]
    8fc8:	7b5b      	ldrb	r3, [r3, #13]
    8fca:	4619      	mov	r1, r3
    8fcc:	6878      	ldr	r0, [r7, #4]
    8fce:	4b0c      	ldr	r3, [pc, #48]	; (9000 <_spi_load_regs_slave+0xa4>)
    8fd0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8fd2:	bf00      	nop
    8fd4:	f04f 31ff 	mov.w	r1, #4294967295
    8fd8:	6878      	ldr	r0, [r7, #4]
    8fda:	4b0a      	ldr	r3, [pc, #40]	; (9004 <_spi_load_regs_slave+0xa8>)
    8fdc:	4798      	blx	r3
    8fde:	4603      	mov	r3, r0
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d1f7      	bne.n	8fd4 <_spi_load_regs_slave+0x78>
		;
}
    8fe4:	bf00      	nop
    8fe6:	3708      	adds	r7, #8
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd80      	pop	{r7, pc}
    8fec:	00019a70 	.word	0x00019a70
    8ff0:	00005565 	.word	0x00005565
    8ff4:	0000830d 	.word	0x0000830d
    8ff8:	00008425 	.word	0x00008425
    8ffc:	00008509 	.word	0x00008509
    9000:	0000859d 	.word	0x0000859d
    9004:	000080a9 	.word	0x000080a9

00009008 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    9008:	b580      	push	{r7, lr}
    900a:	b084      	sub	sp, #16
    900c:	af00      	add	r7, sp, #0
    900e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9010:	687b      	ldr	r3, [r7, #4]
    9012:	4618      	mov	r0, r3
    9014:	4b11      	ldr	r3, [pc, #68]	; (905c <_spi_get_regs+0x54>)
    9016:	4798      	blx	r3
    9018:	4603      	mov	r3, r0
    901a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    901c:	2300      	movs	r3, #0
    901e:	73fb      	strb	r3, [r7, #15]
    9020:	e014      	b.n	904c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    9022:	7bfa      	ldrb	r2, [r7, #15]
    9024:	490e      	ldr	r1, [pc, #56]	; (9060 <_spi_get_regs+0x58>)
    9026:	4613      	mov	r3, r2
    9028:	011b      	lsls	r3, r3, #4
    902a:	4413      	add	r3, r2
    902c:	440b      	add	r3, r1
    902e:	3310      	adds	r3, #16
    9030:	781b      	ldrb	r3, [r3, #0]
    9032:	7bba      	ldrb	r2, [r7, #14]
    9034:	429a      	cmp	r2, r3
    9036:	d106      	bne.n	9046 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    9038:	7bfa      	ldrb	r2, [r7, #15]
    903a:	4613      	mov	r3, r2
    903c:	011b      	lsls	r3, r3, #4
    903e:	4413      	add	r3, r2
    9040:	4a07      	ldr	r2, [pc, #28]	; (9060 <_spi_get_regs+0x58>)
    9042:	4413      	add	r3, r2
    9044:	e006      	b.n	9054 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    9046:	7bfb      	ldrb	r3, [r7, #15]
    9048:	3301      	adds	r3, #1
    904a:	73fb      	strb	r3, [r7, #15]
    904c:	7bfb      	ldrb	r3, [r7, #15]
    904e:	2b01      	cmp	r3, #1
    9050:	d9e7      	bls.n	9022 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    9052:	2300      	movs	r3, #0
}
    9054:	4618      	mov	r0, r3
    9056:	3710      	adds	r7, #16
    9058:	46bd      	mov	sp, r7
    905a:	bd80      	pop	{r7, pc}
    905c:	00008655 	.word	0x00008655
    9060:	00019aac 	.word	0x00019aac

00009064 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    9064:	b580      	push	{r7, lr}
    9066:	b084      	sub	sp, #16
    9068:	af00      	add	r7, sp, #0
    906a:	6078      	str	r0, [r7, #4]
    906c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    906e:	683b      	ldr	r3, [r7, #0]
    9070:	4618      	mov	r0, r3
    9072:	4b35      	ldr	r3, [pc, #212]	; (9148 <_spi_m_sync_init+0xe4>)
    9074:	4798      	blx	r3
    9076:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	2b00      	cmp	r3, #0
    907c:	d004      	beq.n	9088 <_spi_m_sync_init+0x24>
    907e:	683b      	ldr	r3, [r7, #0]
    9080:	2b00      	cmp	r3, #0
    9082:	d001      	beq.n	9088 <_spi_m_sync_init+0x24>
    9084:	2301      	movs	r3, #1
    9086:	e000      	b.n	908a <_spi_m_sync_init+0x26>
    9088:	2300      	movs	r3, #0
    908a:	f003 0301 	and.w	r3, r3, #1
    908e:	b2db      	uxtb	r3, r3
    9090:	f640 123f 	movw	r2, #2367	; 0x93f
    9094:	492d      	ldr	r1, [pc, #180]	; (914c <_spi_m_sync_init+0xe8>)
    9096:	4618      	mov	r0, r3
    9098:	4b2d      	ldr	r3, [pc, #180]	; (9150 <_spi_m_sync_init+0xec>)
    909a:	4798      	blx	r3

	if (regs == NULL) {
    909c:	68fb      	ldr	r3, [r7, #12]
    909e:	2b00      	cmp	r3, #0
    90a0:	d102      	bne.n	90a8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    90a2:	f06f 030c 	mvn.w	r3, #12
    90a6:	e04a      	b.n	913e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    90a8:	2101      	movs	r1, #1
    90aa:	6838      	ldr	r0, [r7, #0]
    90ac:	4b29      	ldr	r3, [pc, #164]	; (9154 <_spi_m_sync_init+0xf0>)
    90ae:	4798      	blx	r3
    90b0:	4603      	mov	r3, r0
    90b2:	f083 0301 	eor.w	r3, r3, #1
    90b6:	b2db      	uxtb	r3, r3
    90b8:	2b00      	cmp	r3, #0
    90ba:	d019      	beq.n	90f0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    90bc:	68fb      	ldr	r3, [r7, #12]
    90be:	681b      	ldr	r3, [r3, #0]
    90c0:	f003 031c 	and.w	r3, r3, #28
    90c4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    90c6:	2102      	movs	r1, #2
    90c8:	6838      	ldr	r0, [r7, #0]
    90ca:	4b23      	ldr	r3, [pc, #140]	; (9158 <_spi_m_sync_init+0xf4>)
    90cc:	4798      	blx	r3
    90ce:	4603      	mov	r3, r0
    90d0:	2b00      	cmp	r3, #0
    90d2:	d006      	beq.n	90e2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    90d4:	6838      	ldr	r0, [r7, #0]
    90d6:	4b21      	ldr	r3, [pc, #132]	; (915c <_spi_m_sync_init+0xf8>)
    90d8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    90da:	2102      	movs	r1, #2
    90dc:	6838      	ldr	r0, [r7, #0]
    90de:	4b20      	ldr	r3, [pc, #128]	; (9160 <_spi_m_sync_init+0xfc>)
    90e0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    90e2:	68bb      	ldr	r3, [r7, #8]
    90e4:	f043 0301 	orr.w	r3, r3, #1
    90e8:	4619      	mov	r1, r3
    90ea:	6838      	ldr	r0, [r7, #0]
    90ec:	4b1d      	ldr	r3, [pc, #116]	; (9164 <_spi_m_sync_init+0x100>)
    90ee:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    90f0:	2101      	movs	r1, #1
    90f2:	6838      	ldr	r0, [r7, #0]
    90f4:	4b1a      	ldr	r3, [pc, #104]	; (9160 <_spi_m_sync_init+0xfc>)
    90f6:	4798      	blx	r3

	dev->prvt = hw;
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	683a      	ldr	r2, [r7, #0]
    90fc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    90fe:	68fb      	ldr	r3, [r7, #12]
    9100:	681b      	ldr	r3, [r3, #0]
    9102:	f003 031c 	and.w	r3, r3, #28
    9106:	2b08      	cmp	r3, #8
    9108:	d104      	bne.n	9114 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    910a:	68f9      	ldr	r1, [r7, #12]
    910c:	6838      	ldr	r0, [r7, #0]
    910e:	4b16      	ldr	r3, [pc, #88]	; (9168 <_spi_m_sync_init+0x104>)
    9110:	4798      	blx	r3
    9112:	e003      	b.n	911c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    9114:	68f9      	ldr	r1, [r7, #12]
    9116:	6838      	ldr	r0, [r7, #0]
    9118:	4b14      	ldr	r3, [pc, #80]	; (916c <_spi_m_sync_init+0x108>)
    911a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    911c:	68fb      	ldr	r3, [r7, #12]
    911e:	685b      	ldr	r3, [r3, #4]
    9120:	f003 0307 	and.w	r3, r3, #7
    9124:	2b00      	cmp	r3, #0
    9126:	d101      	bne.n	912c <_spi_m_sync_init+0xc8>
    9128:	2201      	movs	r2, #1
    912a:	e000      	b.n	912e <_spi_m_sync_init+0xca>
    912c:	2202      	movs	r2, #2
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    9132:	68fb      	ldr	r3, [r7, #12]
    9134:	89db      	ldrh	r3, [r3, #14]
    9136:	b29a      	uxth	r2, r3
    9138:	687b      	ldr	r3, [r7, #4]
    913a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    913c:	2300      	movs	r3, #0
}
    913e:	4618      	mov	r0, r3
    9140:	3710      	adds	r7, #16
    9142:	46bd      	mov	sp, r7
    9144:	bd80      	pop	{r7, pc}
    9146:	bf00      	nop
    9148:	00009009 	.word	0x00009009
    914c:	00019a70 	.word	0x00019a70
    9150:	00005565 	.word	0x00005565
    9154:	000080a9 	.word	0x000080a9
    9158:	000082dd 	.word	0x000082dd
    915c:	000082b5 	.word	0x000082b5
    9160:	00008085 	.word	0x00008085
    9164:	0000830d 	.word	0x0000830d
    9168:	00008f5d 	.word	0x00008f5d
    916c:	00008ec9 	.word	0x00008ec9

00009170 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    9170:	b580      	push	{r7, lr}
    9172:	b082      	sub	sp, #8
    9174:	af00      	add	r7, sp, #0
    9176:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	2b00      	cmp	r3, #0
    917c:	d005      	beq.n	918a <_spi_m_sync_enable+0x1a>
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	2b00      	cmp	r3, #0
    9184:	d001      	beq.n	918a <_spi_m_sync_enable+0x1a>
    9186:	2301      	movs	r3, #1
    9188:	e000      	b.n	918c <_spi_m_sync_enable+0x1c>
    918a:	2300      	movs	r3, #0
    918c:	f003 0301 	and.w	r3, r3, #1
    9190:	b2db      	uxtb	r3, r3
    9192:	f640 129e 	movw	r2, #2462	; 0x99e
    9196:	4907      	ldr	r1, [pc, #28]	; (91b4 <_spi_m_sync_enable+0x44>)
    9198:	4618      	mov	r0, r3
    919a:	4b07      	ldr	r3, [pc, #28]	; (91b8 <_spi_m_sync_enable+0x48>)
    919c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	681b      	ldr	r3, [r3, #0]
    91a2:	4618      	mov	r0, r3
    91a4:	4b05      	ldr	r3, [pc, #20]	; (91bc <_spi_m_sync_enable+0x4c>)
    91a6:	4798      	blx	r3
    91a8:	4603      	mov	r3, r0
}
    91aa:	4618      	mov	r0, r3
    91ac:	3708      	adds	r7, #8
    91ae:	46bd      	mov	sp, r7
    91b0:	bd80      	pop	{r7, pc}
    91b2:	bf00      	nop
    91b4:	00019a70 	.word	0x00019a70
    91b8:	00005565 	.word	0x00005565
    91bc:	00008e61 	.word	0x00008e61

000091c0 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    91c0:	b580      	push	{r7, lr}
    91c2:	b082      	sub	sp, #8
    91c4:	af00      	add	r7, sp, #0
    91c6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d005      	beq.n	91da <_spi_m_sync_disable+0x1a>
    91ce:	687b      	ldr	r3, [r7, #4]
    91d0:	681b      	ldr	r3, [r3, #0]
    91d2:	2b00      	cmp	r3, #0
    91d4:	d001      	beq.n	91da <_spi_m_sync_disable+0x1a>
    91d6:	2301      	movs	r3, #1
    91d8:	e000      	b.n	91dc <_spi_m_sync_disable+0x1c>
    91da:	2300      	movs	r3, #0
    91dc:	f003 0301 	and.w	r3, r3, #1
    91e0:	b2db      	uxtb	r3, r3
    91e2:	f640 12ba 	movw	r2, #2490	; 0x9ba
    91e6:	4907      	ldr	r1, [pc, #28]	; (9204 <_spi_m_sync_disable+0x44>)
    91e8:	4618      	mov	r0, r3
    91ea:	4b07      	ldr	r3, [pc, #28]	; (9208 <_spi_m_sync_disable+0x48>)
    91ec:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    91ee:	687b      	ldr	r3, [r7, #4]
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	4618      	mov	r0, r3
    91f4:	4b05      	ldr	r3, [pc, #20]	; (920c <_spi_m_sync_disable+0x4c>)
    91f6:	4798      	blx	r3
    91f8:	4603      	mov	r3, r0
}
    91fa:	4618      	mov	r0, r3
    91fc:	3708      	adds	r7, #8
    91fe:	46bd      	mov	sp, r7
    9200:	bd80      	pop	{r7, pc}
    9202:	bf00      	nop
    9204:	00019a70 	.word	0x00019a70
    9208:	00005565 	.word	0x00005565
    920c:	00008e95 	.word	0x00008e95

00009210 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    9210:	b580      	push	{r7, lr}
    9212:	b082      	sub	sp, #8
    9214:	af00      	add	r7, sp, #0
    9216:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    9218:	bf00      	nop
    921a:	2103      	movs	r1, #3
    921c:	6878      	ldr	r0, [r7, #4]
    921e:	4b06      	ldr	r3, [pc, #24]	; (9238 <_spi_wait_bus_idle+0x28>)
    9220:	4798      	blx	r3
    9222:	4603      	mov	r3, r0
    9224:	2b00      	cmp	r3, #0
    9226:	d0f8      	beq.n	921a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    9228:	2103      	movs	r1, #3
    922a:	6878      	ldr	r0, [r7, #4]
    922c:	4b03      	ldr	r3, [pc, #12]	; (923c <_spi_wait_bus_idle+0x2c>)
    922e:	4798      	blx	r3
}
    9230:	bf00      	nop
    9232:	3708      	adds	r7, #8
    9234:	46bd      	mov	sp, r7
    9236:	bd80      	pop	{r7, pc}
    9238:	0000811f 	.word	0x0000811f
    923c:	00008161 	.word	0x00008161

00009240 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9240:	b580      	push	{r7, lr}
    9242:	b086      	sub	sp, #24
    9244:	af00      	add	r7, sp, #0
    9246:	60f8      	str	r0, [r7, #12]
    9248:	60b9      	str	r1, [r7, #8]
    924a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    924c:	68bb      	ldr	r3, [r7, #8]
    924e:	f003 0304 	and.w	r3, r3, #4
    9252:	2b00      	cmp	r3, #0
    9254:	d101      	bne.n	925a <_spi_rx_check_and_receive+0x1a>
		return false;
    9256:	2300      	movs	r3, #0
    9258:	e022      	b.n	92a0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    925a:	68f8      	ldr	r0, [r7, #12]
    925c:	4b12      	ldr	r3, [pc, #72]	; (92a8 <_spi_rx_check_and_receive+0x68>)
    925e:	4798      	blx	r3
    9260:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	685b      	ldr	r3, [r3, #4]
    9266:	2b00      	cmp	r3, #0
    9268:	d014      	beq.n	9294 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	685b      	ldr	r3, [r3, #4]
    926e:	1c59      	adds	r1, r3, #1
    9270:	687a      	ldr	r2, [r7, #4]
    9272:	6051      	str	r1, [r2, #4]
    9274:	697a      	ldr	r2, [r7, #20]
    9276:	b2d2      	uxtb	r2, r2
    9278:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	7c1b      	ldrb	r3, [r3, #16]
    927e:	2b01      	cmp	r3, #1
    9280:	d908      	bls.n	9294 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	685b      	ldr	r3, [r3, #4]
    9286:	1c59      	adds	r1, r3, #1
    9288:	687a      	ldr	r2, [r7, #4]
    928a:	6051      	str	r1, [r2, #4]
    928c:	697a      	ldr	r2, [r7, #20]
    928e:	0a12      	lsrs	r2, r2, #8
    9290:	b2d2      	uxtb	r2, r2
    9292:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	68db      	ldr	r3, [r3, #12]
    9298:	1c5a      	adds	r2, r3, #1
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	60da      	str	r2, [r3, #12]

	return true;
    929e:	2301      	movs	r3, #1
}
    92a0:	4618      	mov	r0, r3
    92a2:	3718      	adds	r7, #24
    92a4:	46bd      	mov	sp, r7
    92a6:	bd80      	pop	{r7, pc}
    92a8:	00008585 	.word	0x00008585

000092ac <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    92ac:	b580      	push	{r7, lr}
    92ae:	b086      	sub	sp, #24
    92b0:	af00      	add	r7, sp, #0
    92b2:	60f8      	str	r0, [r7, #12]
    92b4:	60b9      	str	r1, [r7, #8]
    92b6:	607a      	str	r2, [r7, #4]
    92b8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    92ba:	68bb      	ldr	r3, [r7, #8]
    92bc:	f003 0301 	and.w	r3, r3, #1
    92c0:	2b00      	cmp	r3, #0
    92c2:	d028      	beq.n	9316 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	681b      	ldr	r3, [r3, #0]
    92c8:	2b00      	cmp	r3, #0
    92ca:	d018      	beq.n	92fe <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	681b      	ldr	r3, [r3, #0]
    92d0:	1c59      	adds	r1, r3, #1
    92d2:	687a      	ldr	r2, [r7, #4]
    92d4:	6011      	str	r1, [r2, #0]
    92d6:	781b      	ldrb	r3, [r3, #0]
    92d8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	7c1b      	ldrb	r3, [r3, #16]
    92de:	2b01      	cmp	r3, #1
    92e0:	d90f      	bls.n	9302 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	681b      	ldr	r3, [r3, #0]
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	021b      	lsls	r3, r3, #8
    92ea:	461a      	mov	r2, r3
    92ec:	697b      	ldr	r3, [r7, #20]
    92ee:	4313      	orrs	r3, r2
    92f0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	681b      	ldr	r3, [r3, #0]
    92f6:	1c5a      	adds	r2, r3, #1
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	601a      	str	r2, [r3, #0]
    92fc:	e001      	b.n	9302 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    92fe:	887b      	ldrh	r3, [r7, #2]
    9300:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	689b      	ldr	r3, [r3, #8]
    9306:	1c5a      	adds	r2, r3, #1
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    930c:	6979      	ldr	r1, [r7, #20]
    930e:	68f8      	ldr	r0, [r7, #12]
    9310:	4b03      	ldr	r3, [pc, #12]	; (9320 <_spi_tx_check_and_send+0x74>)
    9312:	4798      	blx	r3
    9314:	e000      	b.n	9318 <_spi_tx_check_and_send+0x6c>
		return;
    9316:	bf00      	nop
}
    9318:	3718      	adds	r7, #24
    931a:	46bd      	mov	sp, r7
    931c:	bd80      	pop	{r7, pc}
    931e:	bf00      	nop
    9320:	00008569 	.word	0x00008569

00009324 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    9324:	b580      	push	{r7, lr}
    9326:	b082      	sub	sp, #8
    9328:	af00      	add	r7, sp, #0
    932a:	6078      	str	r0, [r7, #4]
    932c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9334:	2b00      	cmp	r3, #0
    9336:	d00b      	beq.n	9350 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    9338:	f64f 71ff 	movw	r1, #65535	; 0xffff
    933c:	6838      	ldr	r0, [r7, #0]
    933e:	4b07      	ldr	r3, [pc, #28]	; (935c <_spi_err_check+0x38>)
    9340:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9342:	2180      	movs	r1, #128	; 0x80
    9344:	6838      	ldr	r0, [r7, #0]
    9346:	4b06      	ldr	r3, [pc, #24]	; (9360 <_spi_err_check+0x3c>)
    9348:	4798      	blx	r3
		return ERR_OVERFLOW;
    934a:	f06f 0312 	mvn.w	r3, #18
    934e:	e000      	b.n	9352 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9350:	2300      	movs	r3, #0
}
    9352:	4618      	mov	r0, r3
    9354:	3708      	adds	r7, #8
    9356:	46bd      	mov	sp, r7
    9358:	bd80      	pop	{r7, pc}
    935a:	bf00      	nop
    935c:	000085bd 	.word	0x000085bd
    9360:	00008161 	.word	0x00008161

00009364 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    9364:	b590      	push	{r4, r7, lr}
    9366:	b08b      	sub	sp, #44	; 0x2c
    9368:	af00      	add	r7, sp, #0
    936a:	6078      	str	r0, [r7, #4]
    936c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	681b      	ldr	r3, [r3, #0]
    9372:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    9374:	2300      	movs	r3, #0
    9376:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    9378:	683b      	ldr	r3, [r7, #0]
    937a:	681b      	ldr	r3, [r3, #0]
    937c:	60bb      	str	r3, [r7, #8]
    937e:	683b      	ldr	r3, [r7, #0]
    9380:	685b      	ldr	r3, [r3, #4]
    9382:	60fb      	str	r3, [r7, #12]
    9384:	2300      	movs	r3, #0
    9386:	613b      	str	r3, [r7, #16]
    9388:	2300      	movs	r3, #0
    938a:	617b      	str	r3, [r7, #20]
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	791b      	ldrb	r3, [r3, #4]
    9390:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	2b00      	cmp	r3, #0
    9396:	d004      	beq.n	93a2 <_spi_m_sync_trans+0x3e>
    9398:	6a3b      	ldr	r3, [r7, #32]
    939a:	2b00      	cmp	r3, #0
    939c:	d001      	beq.n	93a2 <_spi_m_sync_trans+0x3e>
    939e:	2301      	movs	r3, #1
    93a0:	e000      	b.n	93a4 <_spi_m_sync_trans+0x40>
    93a2:	2300      	movs	r3, #0
    93a4:	f003 0301 	and.w	r3, r3, #1
    93a8:	b2db      	uxtb	r3, r3
    93aa:	f640 22a3 	movw	r2, #2723	; 0xaa3
    93ae:	492b      	ldr	r1, [pc, #172]	; (945c <_spi_m_sync_trans+0xf8>)
    93b0:	4618      	mov	r0, r3
    93b2:	4b2b      	ldr	r3, [pc, #172]	; (9460 <_spi_m_sync_trans+0xfc>)
    93b4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    93b6:	2107      	movs	r1, #7
    93b8:	6a38      	ldr	r0, [r7, #32]
    93ba:	4b2a      	ldr	r3, [pc, #168]	; (9464 <_spi_m_sync_trans+0x100>)
    93bc:	4798      	blx	r3
    93be:	4603      	mov	r3, r0
    93c0:	2b00      	cmp	r3, #0
    93c2:	d002      	beq.n	93ca <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    93c4:	f06f 0303 	mvn.w	r3, #3
    93c8:	e043      	b.n	9452 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    93ca:	6a38      	ldr	r0, [r7, #32]
    93cc:	4b26      	ldr	r3, [pc, #152]	; (9468 <_spi_m_sync_trans+0x104>)
    93ce:	4798      	blx	r3
    93d0:	4603      	mov	r3, r0
    93d2:	f083 0301 	eor.w	r3, r3, #1
    93d6:	b2db      	uxtb	r3, r3
    93d8:	2b00      	cmp	r3, #0
    93da:	d002      	beq.n	93e2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    93dc:	f06f 0313 	mvn.w	r3, #19
    93e0:	e037      	b.n	9452 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    93e2:	6a38      	ldr	r0, [r7, #32]
    93e4:	4b21      	ldr	r3, [pc, #132]	; (946c <_spi_m_sync_trans+0x108>)
    93e6:	4798      	blx	r3
    93e8:	4603      	mov	r3, r0
    93ea:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    93ec:	f107 0308 	add.w	r3, r7, #8
    93f0:	461a      	mov	r2, r3
    93f2:	69f9      	ldr	r1, [r7, #28]
    93f4:	6a38      	ldr	r0, [r7, #32]
    93f6:	4b1e      	ldr	r3, [pc, #120]	; (9470 <_spi_m_sync_trans+0x10c>)
    93f8:	4798      	blx	r3
    93fa:	4603      	mov	r3, r0
    93fc:	f083 0301 	eor.w	r3, r3, #1
    9400:	b2db      	uxtb	r3, r3
    9402:	2b00      	cmp	r3, #0
    9404:	d00b      	beq.n	941e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    9406:	697a      	ldr	r2, [r7, #20]
    9408:	693b      	ldr	r3, [r7, #16]
    940a:	429a      	cmp	r2, r3
    940c:	d307      	bcc.n	941e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	88db      	ldrh	r3, [r3, #6]
    9412:	f107 0208 	add.w	r2, r7, #8
    9416:	69f9      	ldr	r1, [r7, #28]
    9418:	6a38      	ldr	r0, [r7, #32]
    941a:	4c16      	ldr	r4, [pc, #88]	; (9474 <_spi_m_sync_trans+0x110>)
    941c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    941e:	6a39      	ldr	r1, [r7, #32]
    9420:	69f8      	ldr	r0, [r7, #28]
    9422:	4b15      	ldr	r3, [pc, #84]	; (9478 <_spi_m_sync_trans+0x114>)
    9424:	4798      	blx	r3
    9426:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    9428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    942a:	2b00      	cmp	r3, #0
    942c:	db0c      	blt.n	9448 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    942e:	693a      	ldr	r2, [r7, #16]
    9430:	683b      	ldr	r3, [r7, #0]
    9432:	689b      	ldr	r3, [r3, #8]
    9434:	429a      	cmp	r2, r3
    9436:	d3d4      	bcc.n	93e2 <_spi_m_sync_trans+0x7e>
    9438:	697a      	ldr	r2, [r7, #20]
    943a:	683b      	ldr	r3, [r7, #0]
    943c:	689b      	ldr	r3, [r3, #8]
    943e:	429a      	cmp	r2, r3
    9440:	d3cf      	bcc.n	93e2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    9442:	693b      	ldr	r3, [r7, #16]
    9444:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    9446:	e000      	b.n	944a <_spi_m_sync_trans+0xe6>
			break;
    9448:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    944a:	6a38      	ldr	r0, [r7, #32]
    944c:	4b0b      	ldr	r3, [pc, #44]	; (947c <_spi_m_sync_trans+0x118>)
    944e:	4798      	blx	r3

	return rc;
    9450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9452:	4618      	mov	r0, r3
    9454:	372c      	adds	r7, #44	; 0x2c
    9456:	46bd      	mov	sp, r7
    9458:	bd90      	pop	{r4, r7, pc}
    945a:	bf00      	nop
    945c:	00019a70 	.word	0x00019a70
    9460:	00005565 	.word	0x00005565
    9464:	000080a9 	.word	0x000080a9
    9468:	0000827d 	.word	0x0000827d
    946c:	00008147 	.word	0x00008147
    9470:	00009241 	.word	0x00009241
    9474:	000092ad 	.word	0x000092ad
    9478:	00009325 	.word	0x00009325
    947c:	00009211 	.word	0x00009211

00009480 <__NVIC_EnableIRQ>:
{
    9480:	b480      	push	{r7}
    9482:	b083      	sub	sp, #12
    9484:	af00      	add	r7, sp, #0
    9486:	4603      	mov	r3, r0
    9488:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    948a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    948e:	2b00      	cmp	r3, #0
    9490:	db0b      	blt.n	94aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9492:	4909      	ldr	r1, [pc, #36]	; (94b8 <__NVIC_EnableIRQ+0x38>)
    9494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9498:	095b      	lsrs	r3, r3, #5
    949a:	88fa      	ldrh	r2, [r7, #6]
    949c:	f002 021f 	and.w	r2, r2, #31
    94a0:	2001      	movs	r0, #1
    94a2:	fa00 f202 	lsl.w	r2, r0, r2
    94a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94aa:	bf00      	nop
    94ac:	370c      	adds	r7, #12
    94ae:	46bd      	mov	sp, r7
    94b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    94b4:	4770      	bx	lr
    94b6:	bf00      	nop
    94b8:	e000e100 	.word	0xe000e100

000094bc <__NVIC_DisableIRQ>:
{
    94bc:	b480      	push	{r7}
    94be:	b083      	sub	sp, #12
    94c0:	af00      	add	r7, sp, #0
    94c2:	4603      	mov	r3, r0
    94c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94ca:	2b00      	cmp	r3, #0
    94cc:	db10      	blt.n	94f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94ce:	490b      	ldr	r1, [pc, #44]	; (94fc <__NVIC_DisableIRQ+0x40>)
    94d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94d4:	095b      	lsrs	r3, r3, #5
    94d6:	88fa      	ldrh	r2, [r7, #6]
    94d8:	f002 021f 	and.w	r2, r2, #31
    94dc:	2001      	movs	r0, #1
    94de:	fa00 f202 	lsl.w	r2, r0, r2
    94e2:	3320      	adds	r3, #32
    94e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    94e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    94ec:	f3bf 8f6f 	isb	sy
}
    94f0:	bf00      	nop
    94f2:	370c      	adds	r7, #12
    94f4:	46bd      	mov	sp, r7
    94f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    94fa:	4770      	bx	lr
    94fc:	e000e100 	.word	0xe000e100

00009500 <__NVIC_ClearPendingIRQ>:
{
    9500:	b480      	push	{r7}
    9502:	b083      	sub	sp, #12
    9504:	af00      	add	r7, sp, #0
    9506:	4603      	mov	r3, r0
    9508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    950a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    950e:	2b00      	cmp	r3, #0
    9510:	db0c      	blt.n	952c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9512:	4909      	ldr	r1, [pc, #36]	; (9538 <__NVIC_ClearPendingIRQ+0x38>)
    9514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9518:	095b      	lsrs	r3, r3, #5
    951a:	88fa      	ldrh	r2, [r7, #6]
    951c:	f002 021f 	and.w	r2, r2, #31
    9520:	2001      	movs	r0, #1
    9522:	fa00 f202 	lsl.w	r2, r0, r2
    9526:	3360      	adds	r3, #96	; 0x60
    9528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    952c:	bf00      	nop
    952e:	370c      	adds	r7, #12
    9530:	46bd      	mov	sp, r7
    9532:	f85d 7b04 	ldr.w	r7, [sp], #4
    9536:	4770      	bx	lr
    9538:	e000e100 	.word	0xe000e100

0000953c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    953c:	b480      	push	{r7}
    953e:	b083      	sub	sp, #12
    9540:	af00      	add	r7, sp, #0
    9542:	6078      	str	r0, [r7, #4]
    9544:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    9546:	bf00      	nop
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	689a      	ldr	r2, [r3, #8]
    954c:	683b      	ldr	r3, [r7, #0]
    954e:	4013      	ands	r3, r2
    9550:	2b00      	cmp	r3, #0
    9552:	d1f9      	bne.n	9548 <hri_tcc_wait_for_sync+0xc>
	};
}
    9554:	bf00      	nop
    9556:	370c      	adds	r7, #12
    9558:	46bd      	mov	sp, r7
    955a:	f85d 7b04 	ldr.w	r7, [sp], #4
    955e:	4770      	bx	lr

00009560 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    9560:	b480      	push	{r7}
    9562:	b083      	sub	sp, #12
    9564:	af00      	add	r7, sp, #0
    9566:	6078      	str	r0, [r7, #4]
    9568:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	689a      	ldr	r2, [r3, #8]
    956e:	683b      	ldr	r3, [r7, #0]
    9570:	4013      	ands	r3, r2
    9572:	2b00      	cmp	r3, #0
    9574:	bf14      	ite	ne
    9576:	2301      	movne	r3, #1
    9578:	2300      	moveq	r3, #0
    957a:	b2db      	uxtb	r3, r3
}
    957c:	4618      	mov	r0, r3
    957e:	370c      	adds	r7, #12
    9580:	46bd      	mov	sp, r7
    9582:	f85d 7b04 	ldr.w	r7, [sp], #4
    9586:	4770      	bx	lr

00009588 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    9588:	b480      	push	{r7}
    958a:	b083      	sub	sp, #12
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    9590:	687b      	ldr	r3, [r7, #4]
    9592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9594:	f003 0301 	and.w	r3, r3, #1
    9598:	2b00      	cmp	r3, #0
    959a:	bf14      	ite	ne
    959c:	2301      	movne	r3, #1
    959e:	2300      	moveq	r3, #0
    95a0:	b2db      	uxtb	r3, r3
}
    95a2:	4618      	mov	r0, r3
    95a4:	370c      	adds	r7, #12
    95a6:	46bd      	mov	sp, r7
    95a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ac:	4770      	bx	lr

000095ae <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    95ae:	b480      	push	{r7}
    95b0:	b083      	sub	sp, #12
    95b2:	af00      	add	r7, sp, #0
    95b4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	2201      	movs	r2, #1
    95ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
    95bc:	bf00      	nop
    95be:	370c      	adds	r7, #12
    95c0:	46bd      	mov	sp, r7
    95c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c6:	4770      	bx	lr

000095c8 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    95c8:	b480      	push	{r7}
    95ca:	b083      	sub	sp, #12
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
    95d0:	460b      	mov	r3, r1
    95d2:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    95d4:	687b      	ldr	r3, [r7, #4]
    95d6:	78fa      	ldrb	r2, [r7, #3]
    95d8:	715a      	strb	r2, [r3, #5]
}
    95da:	bf00      	nop
    95dc:	370c      	adds	r7, #12
    95de:	46bd      	mov	sp, r7
    95e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    95e4:	4770      	bx	lr

000095e6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    95e6:	b480      	push	{r7}
    95e8:	b083      	sub	sp, #12
    95ea:	af00      	add	r7, sp, #0
    95ec:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    95ee:	687b      	ldr	r3, [r7, #4]
    95f0:	2201      	movs	r2, #1
    95f2:	629a      	str	r2, [r3, #40]	; 0x28
}
    95f4:	bf00      	nop
    95f6:	370c      	adds	r7, #12
    95f8:	46bd      	mov	sp, r7
    95fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    95fe:	4770      	bx	lr

00009600 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    9600:	b580      	push	{r7, lr}
    9602:	b082      	sub	sp, #8
    9604:	af00      	add	r7, sp, #0
    9606:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    9608:	687b      	ldr	r3, [r7, #4]
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	f043 0201 	orr.w	r2, r3, #1
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    9614:	2101      	movs	r1, #1
    9616:	6878      	ldr	r0, [r7, #4]
    9618:	4b02      	ldr	r3, [pc, #8]	; (9624 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    961a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    961c:	bf00      	nop
    961e:	3708      	adds	r7, #8
    9620:	46bd      	mov	sp, r7
    9622:	bd80      	pop	{r7, pc}
    9624:	0000953d 	.word	0x0000953d

00009628 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9628:	b580      	push	{r7, lr}
    962a:	b082      	sub	sp, #8
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	681b      	ldr	r3, [r3, #0]
    9634:	f043 0202 	orr.w	r2, r3, #2
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    963c:	2103      	movs	r1, #3
    963e:	6878      	ldr	r0, [r7, #4]
    9640:	4b02      	ldr	r3, [pc, #8]	; (964c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    9642:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9644:	bf00      	nop
    9646:	3708      	adds	r7, #8
    9648:	46bd      	mov	sp, r7
    964a:	bd80      	pop	{r7, pc}
    964c:	0000953d 	.word	0x0000953d

00009650 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9650:	b580      	push	{r7, lr}
    9652:	b084      	sub	sp, #16
    9654:	af00      	add	r7, sp, #0
    9656:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9658:	2103      	movs	r1, #3
    965a:	6878      	ldr	r0, [r7, #4]
    965c:	4b09      	ldr	r3, [pc, #36]	; (9684 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    965e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    9666:	68fb      	ldr	r3, [r7, #12]
    9668:	085b      	lsrs	r3, r3, #1
    966a:	f003 0301 	and.w	r3, r3, #1
    966e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9670:	68fb      	ldr	r3, [r7, #12]
    9672:	2b00      	cmp	r3, #0
    9674:	bf14      	ite	ne
    9676:	2301      	movne	r3, #1
    9678:	2300      	moveq	r3, #0
    967a:	b2db      	uxtb	r3, r3
}
    967c:	4618      	mov	r0, r3
    967e:	3710      	adds	r7, #16
    9680:	46bd      	mov	sp, r7
    9682:	bd80      	pop	{r7, pc}
    9684:	0000953d 	.word	0x0000953d

00009688 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9688:	b580      	push	{r7, lr}
    968a:	b082      	sub	sp, #8
    968c:	af00      	add	r7, sp, #0
    968e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	681b      	ldr	r3, [r3, #0]
    9694:	f023 0202 	bic.w	r2, r3, #2
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    969c:	2103      	movs	r1, #3
    969e:	6878      	ldr	r0, [r7, #4]
    96a0:	4b02      	ldr	r3, [pc, #8]	; (96ac <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    96a2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    96a4:	bf00      	nop
    96a6:	3708      	adds	r7, #8
    96a8:	46bd      	mov	sp, r7
    96aa:	bd80      	pop	{r7, pc}
    96ac:	0000953d 	.word	0x0000953d

000096b0 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    96b0:	b580      	push	{r7, lr}
    96b2:	b084      	sub	sp, #16
    96b4:	af00      	add	r7, sp, #0
    96b6:	6078      	str	r0, [r7, #4]
    96b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    96ba:	2103      	movs	r1, #3
    96bc:	6878      	ldr	r0, [r7, #4]
    96be:	4b07      	ldr	r3, [pc, #28]	; (96dc <hri_tcc_get_CTRLA_reg+0x2c>)
    96c0:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	681b      	ldr	r3, [r3, #0]
    96c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    96c8:	68fa      	ldr	r2, [r7, #12]
    96ca:	683b      	ldr	r3, [r7, #0]
    96cc:	4013      	ands	r3, r2
    96ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    96d0:	68fb      	ldr	r3, [r7, #12]
}
    96d2:	4618      	mov	r0, r3
    96d4:	3710      	adds	r7, #16
    96d6:	46bd      	mov	sp, r7
    96d8:	bd80      	pop	{r7, pc}
    96da:	bf00      	nop
    96dc:	0000953d 	.word	0x0000953d

000096e0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b082      	sub	sp, #8
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
    96e8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	683a      	ldr	r2, [r7, #0]
    96ee:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    96f0:	2103      	movs	r1, #3
    96f2:	6878      	ldr	r0, [r7, #4]
    96f4:	4b02      	ldr	r3, [pc, #8]	; (9700 <hri_tcc_write_CTRLA_reg+0x20>)
    96f6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    96f8:	bf00      	nop
    96fa:	3708      	adds	r7, #8
    96fc:	46bd      	mov	sp, r7
    96fe:	bd80      	pop	{r7, pc}
    9700:	0000953d 	.word	0x0000953d

00009704 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    9704:	b480      	push	{r7}
    9706:	b083      	sub	sp, #12
    9708:	af00      	add	r7, sp, #0
    970a:	6078      	str	r0, [r7, #4]
    970c:	460b      	mov	r3, r1
    970e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	78fa      	ldrb	r2, [r7, #3]
    9714:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    9716:	bf00      	nop
    9718:	370c      	adds	r7, #12
    971a:	46bd      	mov	sp, r7
    971c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9720:	4770      	bx	lr

00009722 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    9722:	b480      	push	{r7}
    9724:	b083      	sub	sp, #12
    9726:	af00      	add	r7, sp, #0
    9728:	6078      	str	r0, [r7, #4]
    972a:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    972c:	687b      	ldr	r3, [r7, #4]
    972e:	683a      	ldr	r2, [r7, #0]
    9730:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    9732:	bf00      	nop
    9734:	370c      	adds	r7, #12
    9736:	46bd      	mov	sp, r7
    9738:	f85d 7b04 	ldr.w	r7, [sp], #4
    973c:	4770      	bx	lr
	...

00009740 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    9740:	b580      	push	{r7, lr}
    9742:	b082      	sub	sp, #8
    9744:	af00      	add	r7, sp, #0
    9746:	6078      	str	r0, [r7, #4]
    9748:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    974a:	687b      	ldr	r3, [r7, #4]
    974c:	683a      	ldr	r2, [r7, #0]
    974e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9750:	2180      	movs	r1, #128	; 0x80
    9752:	6878      	ldr	r0, [r7, #4]
    9754:	4b02      	ldr	r3, [pc, #8]	; (9760 <hri_tcc_write_PER_reg+0x20>)
    9756:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9758:	bf00      	nop
    975a:	3708      	adds	r7, #8
    975c:	46bd      	mov	sp, r7
    975e:	bd80      	pop	{r7, pc}
    9760:	0000953d 	.word	0x0000953d

00009764 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    9764:	b580      	push	{r7, lr}
    9766:	b082      	sub	sp, #8
    9768:	af00      	add	r7, sp, #0
    976a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    976c:	2180      	movs	r1, #128	; 0x80
    976e:	6878      	ldr	r0, [r7, #4]
    9770:	4b03      	ldr	r3, [pc, #12]	; (9780 <hri_tcc_read_PER_reg+0x1c>)
    9772:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    9774:	687b      	ldr	r3, [r7, #4]
    9776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    9778:	4618      	mov	r0, r3
    977a:	3708      	adds	r7, #8
    977c:	46bd      	mov	sp, r7
    977e:	bd80      	pop	{r7, pc}
    9780:	0000953d 	.word	0x0000953d

00009784 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    9784:	b480      	push	{r7}
    9786:	b083      	sub	sp, #12
    9788:	af00      	add	r7, sp, #0
    978a:	6078      	str	r0, [r7, #4]
    978c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    978e:	687b      	ldr	r3, [r7, #4]
    9790:	4a09      	ldr	r2, [pc, #36]	; (97b8 <_tcc_init_irq_param+0x34>)
    9792:	4293      	cmp	r3, r2
    9794:	d102      	bne.n	979c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    9796:	4a09      	ldr	r2, [pc, #36]	; (97bc <_tcc_init_irq_param+0x38>)
    9798:	683b      	ldr	r3, [r7, #0]
    979a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	4a08      	ldr	r2, [pc, #32]	; (97c0 <_tcc_init_irq_param+0x3c>)
    97a0:	4293      	cmp	r3, r2
    97a2:	d102      	bne.n	97aa <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    97a4:	4a07      	ldr	r2, [pc, #28]	; (97c4 <_tcc_init_irq_param+0x40>)
    97a6:	683b      	ldr	r3, [r7, #0]
    97a8:	6013      	str	r3, [r2, #0]
	}
}
    97aa:	bf00      	nop
    97ac:	370c      	adds	r7, #12
    97ae:	46bd      	mov	sp, r7
    97b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    97b4:	4770      	bx	lr
    97b6:	bf00      	nop
    97b8:	41016000 	.word	0x41016000
    97bc:	20001040 	.word	0x20001040
    97c0:	41018000 	.word	0x41018000
    97c4:	20001044 	.word	0x20001044

000097c8 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    97c8:	b580      	push	{r7, lr}
    97ca:	b084      	sub	sp, #16
    97cc:	af00      	add	r7, sp, #0
    97ce:	6078      	str	r0, [r7, #4]
    97d0:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    97d2:	6838      	ldr	r0, [r7, #0]
    97d4:	4b33      	ldr	r3, [pc, #204]	; (98a4 <_tcc_timer_init+0xdc>)
    97d6:	4798      	blx	r3
    97d8:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    97da:	68fb      	ldr	r3, [r7, #12]
    97dc:	2b00      	cmp	r3, #0
    97de:	d102      	bne.n	97e6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    97e0:	f06f 0309 	mvn.w	r3, #9
    97e4:	e05a      	b.n	989c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    97e6:	687b      	ldr	r3, [r7, #4]
    97e8:	683a      	ldr	r2, [r7, #0]
    97ea:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    97ec:	2101      	movs	r1, #1
    97ee:	6838      	ldr	r0, [r7, #0]
    97f0:	4b2d      	ldr	r3, [pc, #180]	; (98a8 <_tcc_timer_init+0xe0>)
    97f2:	4798      	blx	r3
    97f4:	4603      	mov	r3, r0
    97f6:	f083 0301 	eor.w	r3, r3, #1
    97fa:	b2db      	uxtb	r3, r3
    97fc:	2b00      	cmp	r3, #0
    97fe:	d011      	beq.n	9824 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    9800:	2102      	movs	r1, #2
    9802:	6838      	ldr	r0, [r7, #0]
    9804:	4b29      	ldr	r3, [pc, #164]	; (98ac <_tcc_timer_init+0xe4>)
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	2b00      	cmp	r3, #0
    980c:	d006      	beq.n	981c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    980e:	6838      	ldr	r0, [r7, #0]
    9810:	4b27      	ldr	r3, [pc, #156]	; (98b0 <_tcc_timer_init+0xe8>)
    9812:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    9814:	2102      	movs	r1, #2
    9816:	6838      	ldr	r0, [r7, #0]
    9818:	4b26      	ldr	r3, [pc, #152]	; (98b4 <_tcc_timer_init+0xec>)
    981a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    981c:	2101      	movs	r1, #1
    981e:	6838      	ldr	r0, [r7, #0]
    9820:	4b25      	ldr	r3, [pc, #148]	; (98b8 <_tcc_timer_init+0xf0>)
    9822:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    9824:	2101      	movs	r1, #1
    9826:	6838      	ldr	r0, [r7, #0]
    9828:	4b22      	ldr	r3, [pc, #136]	; (98b4 <_tcc_timer_init+0xec>)
    982a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    982c:	68fb      	ldr	r3, [r7, #12]
    982e:	689b      	ldr	r3, [r3, #8]
    9830:	4619      	mov	r1, r3
    9832:	6838      	ldr	r0, [r7, #0]
    9834:	4b20      	ldr	r3, [pc, #128]	; (98b8 <_tcc_timer_init+0xf0>)
    9836:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    9838:	68fb      	ldr	r3, [r7, #12]
    983a:	7b1b      	ldrb	r3, [r3, #12]
    983c:	4619      	mov	r1, r3
    983e:	6838      	ldr	r0, [r7, #0]
    9840:	4b1e      	ldr	r3, [pc, #120]	; (98bc <_tcc_timer_init+0xf4>)
    9842:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    9844:	68fb      	ldr	r3, [r7, #12]
    9846:	7b5b      	ldrb	r3, [r3, #13]
    9848:	4619      	mov	r1, r3
    984a:	6838      	ldr	r0, [r7, #0]
    984c:	4b1c      	ldr	r3, [pc, #112]	; (98c0 <_tcc_timer_init+0xf8>)
    984e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    9850:	68fb      	ldr	r3, [r7, #12]
    9852:	691b      	ldr	r3, [r3, #16]
    9854:	4619      	mov	r1, r3
    9856:	6838      	ldr	r0, [r7, #0]
    9858:	4b1a      	ldr	r3, [pc, #104]	; (98c4 <_tcc_timer_init+0xfc>)
    985a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9860:	4619      	mov	r1, r3
    9862:	6838      	ldr	r0, [r7, #0]
    9864:	4b18      	ldr	r3, [pc, #96]	; (98c8 <_tcc_timer_init+0x100>)
    9866:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    9868:	6838      	ldr	r0, [r7, #0]
    986a:	4b18      	ldr	r3, [pc, #96]	; (98cc <_tcc_timer_init+0x104>)
    986c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    986e:	6879      	ldr	r1, [r7, #4]
    9870:	6838      	ldr	r0, [r7, #0]
    9872:	4b17      	ldr	r3, [pc, #92]	; (98d0 <_tcc_timer_init+0x108>)
    9874:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    9876:	68fb      	ldr	r3, [r7, #12]
    9878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    987c:	4618      	mov	r0, r3
    987e:	4b15      	ldr	r3, [pc, #84]	; (98d4 <_tcc_timer_init+0x10c>)
    9880:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    9882:	68fb      	ldr	r3, [r7, #12]
    9884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9888:	4618      	mov	r0, r3
    988a:	4b13      	ldr	r3, [pc, #76]	; (98d8 <_tcc_timer_init+0x110>)
    988c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    988e:	68fb      	ldr	r3, [r7, #12]
    9890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9894:	4618      	mov	r0, r3
    9896:	4b11      	ldr	r3, [pc, #68]	; (98dc <_tcc_timer_init+0x114>)
    9898:	4798      	blx	r3

	return ERR_NONE;
    989a:	2300      	movs	r3, #0
}
    989c:	4618      	mov	r0, r3
    989e:	3710      	adds	r7, #16
    98a0:	46bd      	mov	sp, r7
    98a2:	bd80      	pop	{r7, pc}
    98a4:	00009a91 	.word	0x00009a91
    98a8:	00009561 	.word	0x00009561
    98ac:	000096b1 	.word	0x000096b1
    98b0:	00009689 	.word	0x00009689
    98b4:	0000953d 	.word	0x0000953d
    98b8:	000096e1 	.word	0x000096e1
    98bc:	000095c9 	.word	0x000095c9
    98c0:	00009705 	.word	0x00009705
    98c4:	00009723 	.word	0x00009723
    98c8:	00009741 	.word	0x00009741
    98cc:	000095e7 	.word	0x000095e7
    98d0:	00009785 	.word	0x00009785
    98d4:	000094bd 	.word	0x000094bd
    98d8:	00009501 	.word	0x00009501
    98dc:	00009481 	.word	0x00009481

000098e0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	b084      	sub	sp, #16
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    98e8:	687b      	ldr	r3, [r7, #4]
    98ea:	68db      	ldr	r3, [r3, #12]
    98ec:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    98ee:	68f8      	ldr	r0, [r7, #12]
    98f0:	4b0a      	ldr	r3, [pc, #40]	; (991c <_tcc_timer_deinit+0x3c>)
    98f2:	4798      	blx	r3
    98f4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    98f6:	68bb      	ldr	r3, [r7, #8]
    98f8:	2b00      	cmp	r3, #0
    98fa:	d00b      	beq.n	9914 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    98fc:	68bb      	ldr	r3, [r7, #8]
    98fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9902:	4618      	mov	r0, r3
    9904:	4b06      	ldr	r3, [pc, #24]	; (9920 <_tcc_timer_deinit+0x40>)
    9906:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    9908:	68f8      	ldr	r0, [r7, #12]
    990a:	4b06      	ldr	r3, [pc, #24]	; (9924 <_tcc_timer_deinit+0x44>)
    990c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    990e:	68f8      	ldr	r0, [r7, #12]
    9910:	4b05      	ldr	r3, [pc, #20]	; (9928 <_tcc_timer_deinit+0x48>)
    9912:	4798      	blx	r3
	}
}
    9914:	bf00      	nop
    9916:	3710      	adds	r7, #16
    9918:	46bd      	mov	sp, r7
    991a:	bd80      	pop	{r7, pc}
    991c:	00009a91 	.word	0x00009a91
    9920:	000094bd 	.word	0x000094bd
    9924:	00009689 	.word	0x00009689
    9928:	00009601 	.word	0x00009601

0000992c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    992c:	b580      	push	{r7, lr}
    992e:	b082      	sub	sp, #8
    9930:	af00      	add	r7, sp, #0
    9932:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	68db      	ldr	r3, [r3, #12]
    9938:	4618      	mov	r0, r3
    993a:	4b03      	ldr	r3, [pc, #12]	; (9948 <_tcc_timer_start+0x1c>)
    993c:	4798      	blx	r3
}
    993e:	bf00      	nop
    9940:	3708      	adds	r7, #8
    9942:	46bd      	mov	sp, r7
    9944:	bd80      	pop	{r7, pc}
    9946:	bf00      	nop
    9948:	00009629 	.word	0x00009629

0000994c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    994c:	b580      	push	{r7, lr}
    994e:	b082      	sub	sp, #8
    9950:	af00      	add	r7, sp, #0
    9952:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    9954:	687b      	ldr	r3, [r7, #4]
    9956:	68db      	ldr	r3, [r3, #12]
    9958:	4618      	mov	r0, r3
    995a:	4b03      	ldr	r3, [pc, #12]	; (9968 <_tcc_timer_stop+0x1c>)
    995c:	4798      	blx	r3
}
    995e:	bf00      	nop
    9960:	3708      	adds	r7, #8
    9962:	46bd      	mov	sp, r7
    9964:	bd80      	pop	{r7, pc}
    9966:	bf00      	nop
    9968:	00009689 	.word	0x00009689

0000996c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    996c:	b580      	push	{r7, lr}
    996e:	b082      	sub	sp, #8
    9970:	af00      	add	r7, sp, #0
    9972:	6078      	str	r0, [r7, #4]
    9974:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    9976:	687b      	ldr	r3, [r7, #4]
    9978:	68db      	ldr	r3, [r3, #12]
    997a:	6839      	ldr	r1, [r7, #0]
    997c:	4618      	mov	r0, r3
    997e:	4b03      	ldr	r3, [pc, #12]	; (998c <_tcc_timer_set_period+0x20>)
    9980:	4798      	blx	r3
}
    9982:	bf00      	nop
    9984:	3708      	adds	r7, #8
    9986:	46bd      	mov	sp, r7
    9988:	bd80      	pop	{r7, pc}
    998a:	bf00      	nop
    998c:	00009741 	.word	0x00009741

00009990 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    9990:	b580      	push	{r7, lr}
    9992:	b082      	sub	sp, #8
    9994:	af00      	add	r7, sp, #0
    9996:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	68db      	ldr	r3, [r3, #12]
    999c:	4618      	mov	r0, r3
    999e:	4b03      	ldr	r3, [pc, #12]	; (99ac <_tcc_timer_get_period+0x1c>)
    99a0:	4798      	blx	r3
    99a2:	4603      	mov	r3, r0
}
    99a4:	4618      	mov	r0, r3
    99a6:	3708      	adds	r7, #8
    99a8:	46bd      	mov	sp, r7
    99aa:	bd80      	pop	{r7, pc}
    99ac:	00009765 	.word	0x00009765

000099b0 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    99b0:	b580      	push	{r7, lr}
    99b2:	b082      	sub	sp, #8
    99b4:	af00      	add	r7, sp, #0
    99b6:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    99b8:	687b      	ldr	r3, [r7, #4]
    99ba:	68db      	ldr	r3, [r3, #12]
    99bc:	4618      	mov	r0, r3
    99be:	4b03      	ldr	r3, [pc, #12]	; (99cc <_tcc_timer_is_started+0x1c>)
    99c0:	4798      	blx	r3
    99c2:	4603      	mov	r3, r0
}
    99c4:	4618      	mov	r0, r3
    99c6:	3708      	adds	r7, #8
    99c8:	46bd      	mov	sp, r7
    99ca:	bd80      	pop	{r7, pc}
    99cc:	00009651 	.word	0x00009651

000099d0 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    99d0:	b480      	push	{r7}
    99d2:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    99d4:	4b02      	ldr	r3, [pc, #8]	; (99e0 <_tcc_get_timer+0x10>)
}
    99d6:	4618      	mov	r0, r3
    99d8:	46bd      	mov	sp, r7
    99da:	f85d 7b04 	ldr.w	r7, [sp], #4
    99de:	4770      	bx	lr
    99e0:	200000c4 	.word	0x200000c4

000099e4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    99e4:	b580      	push	{r7, lr}
    99e6:	b084      	sub	sp, #16
    99e8:	af00      	add	r7, sp, #0
    99ea:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	68db      	ldr	r3, [r3, #12]
    99f0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    99f2:	68f8      	ldr	r0, [r7, #12]
    99f4:	4b08      	ldr	r3, [pc, #32]	; (9a18 <_tcc_timer_set_irq+0x34>)
    99f6:	4798      	blx	r3
    99f8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    99fa:	68bb      	ldr	r3, [r7, #8]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d006      	beq.n	9a0e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    9a00:	68bb      	ldr	r3, [r7, #8]
    9a02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9a06:	b2db      	uxtb	r3, r3
    9a08:	4618      	mov	r0, r3
    9a0a:	4b04      	ldr	r3, [pc, #16]	; (9a1c <_tcc_timer_set_irq+0x38>)
    9a0c:	4798      	blx	r3
	}
}
    9a0e:	bf00      	nop
    9a10:	3710      	adds	r7, #16
    9a12:	46bd      	mov	sp, r7
    9a14:	bd80      	pop	{r7, pc}
    9a16:	bf00      	nop
    9a18:	00009a91 	.word	0x00009a91
    9a1c:	00005db1 	.word	0x00005db1

00009a20 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b084      	sub	sp, #16
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	68db      	ldr	r3, [r3, #12]
    9a2c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    9a2e:	68f8      	ldr	r0, [r7, #12]
    9a30:	4b07      	ldr	r3, [pc, #28]	; (9a50 <tcc_interrupt_handler+0x30>)
    9a32:	4798      	blx	r3
    9a34:	4603      	mov	r3, r0
    9a36:	2b00      	cmp	r3, #0
    9a38:	d006      	beq.n	9a48 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    9a3a:	68f8      	ldr	r0, [r7, #12]
    9a3c:	4b05      	ldr	r3, [pc, #20]	; (9a54 <tcc_interrupt_handler+0x34>)
    9a3e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	681b      	ldr	r3, [r3, #0]
    9a44:	6878      	ldr	r0, [r7, #4]
    9a46:	4798      	blx	r3
	}
}
    9a48:	bf00      	nop
    9a4a:	3710      	adds	r7, #16
    9a4c:	46bd      	mov	sp, r7
    9a4e:	bd80      	pop	{r7, pc}
    9a50:	00009589 	.word	0x00009589
    9a54:	000095af 	.word	0x000095af

00009a58 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    9a58:	b580      	push	{r7, lr}
    9a5a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    9a5c:	4b03      	ldr	r3, [pc, #12]	; (9a6c <TCC0_0_Handler+0x14>)
    9a5e:	681b      	ldr	r3, [r3, #0]
    9a60:	4618      	mov	r0, r3
    9a62:	4b03      	ldr	r3, [pc, #12]	; (9a70 <TCC0_0_Handler+0x18>)
    9a64:	4798      	blx	r3
}
    9a66:	bf00      	nop
    9a68:	bd80      	pop	{r7, pc}
    9a6a:	bf00      	nop
    9a6c:	20001040 	.word	0x20001040
    9a70:	00009a21 	.word	0x00009a21

00009a74 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    9a74:	b580      	push	{r7, lr}
    9a76:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    9a78:	4b03      	ldr	r3, [pc, #12]	; (9a88 <TCC1_0_Handler+0x14>)
    9a7a:	681b      	ldr	r3, [r3, #0]
    9a7c:	4618      	mov	r0, r3
    9a7e:	4b03      	ldr	r3, [pc, #12]	; (9a8c <TCC1_0_Handler+0x18>)
    9a80:	4798      	blx	r3
}
    9a82:	bf00      	nop
    9a84:	bd80      	pop	{r7, pc}
    9a86:	bf00      	nop
    9a88:	20001044 	.word	0x20001044
    9a8c:	00009a21 	.word	0x00009a21

00009a90 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    9a90:	b480      	push	{r7}
    9a92:	b085      	sub	sp, #20
    9a94:	af00      	add	r7, sp, #0
    9a96:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9a98:	2300      	movs	r3, #0
    9a9a:	73fb      	strb	r3, [r7, #15]
    9a9c:	e015      	b.n	9aca <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    9a9e:	7bfa      	ldrb	r2, [r7, #15]
    9aa0:	490f      	ldr	r1, [pc, #60]	; (9ae0 <_get_tcc_cfg+0x50>)
    9aa2:	4613      	mov	r3, r2
    9aa4:	005b      	lsls	r3, r3, #1
    9aa6:	4413      	add	r3, r2
    9aa8:	011b      	lsls	r3, r3, #4
    9aaa:	440b      	add	r3, r1
    9aac:	681a      	ldr	r2, [r3, #0]
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	429a      	cmp	r2, r3
    9ab2:	d107      	bne.n	9ac4 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    9ab4:	7bfa      	ldrb	r2, [r7, #15]
    9ab6:	4613      	mov	r3, r2
    9ab8:	005b      	lsls	r3, r3, #1
    9aba:	4413      	add	r3, r2
    9abc:	011b      	lsls	r3, r3, #4
    9abe:	4a08      	ldr	r2, [pc, #32]	; (9ae0 <_get_tcc_cfg+0x50>)
    9ac0:	4413      	add	r3, r2
    9ac2:	e006      	b.n	9ad2 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9ac4:	7bfb      	ldrb	r3, [r7, #15]
    9ac6:	3301      	adds	r3, #1
    9ac8:	73fb      	strb	r3, [r7, #15]
    9aca:	7bfb      	ldrb	r3, [r7, #15]
    9acc:	2b01      	cmp	r3, #1
    9ace:	d9e6      	bls.n	9a9e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    9ad0:	2300      	movs	r3, #0
}
    9ad2:	4618      	mov	r0, r3
    9ad4:	3714      	adds	r7, #20
    9ad6:	46bd      	mov	sp, r7
    9ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9adc:	4770      	bx	lr
    9ade:	bf00      	nop
    9ae0:	20000064 	.word	0x20000064

00009ae4 <__NVIC_EnableIRQ>:
{
    9ae4:	b480      	push	{r7}
    9ae6:	b083      	sub	sp, #12
    9ae8:	af00      	add	r7, sp, #0
    9aea:	4603      	mov	r3, r0
    9aec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9af2:	2b00      	cmp	r3, #0
    9af4:	db0b      	blt.n	9b0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9af6:	4909      	ldr	r1, [pc, #36]	; (9b1c <__NVIC_EnableIRQ+0x38>)
    9af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9afc:	095b      	lsrs	r3, r3, #5
    9afe:	88fa      	ldrh	r2, [r7, #6]
    9b00:	f002 021f 	and.w	r2, r2, #31
    9b04:	2001      	movs	r0, #1
    9b06:	fa00 f202 	lsl.w	r2, r0, r2
    9b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b0e:	bf00      	nop
    9b10:	370c      	adds	r7, #12
    9b12:	46bd      	mov	sp, r7
    9b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b18:	4770      	bx	lr
    9b1a:	bf00      	nop
    9b1c:	e000e100 	.word	0xe000e100

00009b20 <__NVIC_DisableIRQ>:
{
    9b20:	b480      	push	{r7}
    9b22:	b083      	sub	sp, #12
    9b24:	af00      	add	r7, sp, #0
    9b26:	4603      	mov	r3, r0
    9b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	db10      	blt.n	9b54 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9b32:	490b      	ldr	r1, [pc, #44]	; (9b60 <__NVIC_DisableIRQ+0x40>)
    9b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9b38:	095b      	lsrs	r3, r3, #5
    9b3a:	88fa      	ldrh	r2, [r7, #6]
    9b3c:	f002 021f 	and.w	r2, r2, #31
    9b40:	2001      	movs	r0, #1
    9b42:	fa00 f202 	lsl.w	r2, r0, r2
    9b46:	3320      	adds	r3, #32
    9b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9b4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9b50:	f3bf 8f6f 	isb	sy
}
    9b54:	bf00      	nop
    9b56:	370c      	adds	r7, #12
    9b58:	46bd      	mov	sp, r7
    9b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b5e:	4770      	bx	lr
    9b60:	e000e100 	.word	0xe000e100

00009b64 <__NVIC_ClearPendingIRQ>:
{
    9b64:	b480      	push	{r7}
    9b66:	b083      	sub	sp, #12
    9b68:	af00      	add	r7, sp, #0
    9b6a:	4603      	mov	r3, r0
    9b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9b72:	2b00      	cmp	r3, #0
    9b74:	db0c      	blt.n	9b90 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9b76:	4909      	ldr	r1, [pc, #36]	; (9b9c <__NVIC_ClearPendingIRQ+0x38>)
    9b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9b7c:	095b      	lsrs	r3, r3, #5
    9b7e:	88fa      	ldrh	r2, [r7, #6]
    9b80:	f002 021f 	and.w	r2, r2, #31
    9b84:	2001      	movs	r0, #1
    9b86:	fa00 f202 	lsl.w	r2, r0, r2
    9b8a:	3360      	adds	r3, #96	; 0x60
    9b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b90:	bf00      	nop
    9b92:	370c      	adds	r7, #12
    9b94:	46bd      	mov	sp, r7
    9b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b9a:	4770      	bx	lr
    9b9c:	e000e100 	.word	0xe000e100

00009ba0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9ba0:	b480      	push	{r7}
    9ba2:	b083      	sub	sp, #12
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	6078      	str	r0, [r7, #4]
    9ba8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9baa:	bf00      	nop
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	691a      	ldr	r2, [r3, #16]
    9bb0:	683b      	ldr	r3, [r7, #0]
    9bb2:	4013      	ands	r3, r2
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d1f9      	bne.n	9bac <hri_tc_wait_for_sync+0xc>
	};
}
    9bb8:	bf00      	nop
    9bba:	370c      	adds	r7, #12
    9bbc:	46bd      	mov	sp, r7
    9bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bc2:	4770      	bx	lr

00009bc4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9bc4:	b480      	push	{r7}
    9bc6:	b083      	sub	sp, #12
    9bc8:	af00      	add	r7, sp, #0
    9bca:	6078      	str	r0, [r7, #4]
    9bcc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	691a      	ldr	r2, [r3, #16]
    9bd2:	683b      	ldr	r3, [r7, #0]
    9bd4:	4013      	ands	r3, r2
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	bf14      	ite	ne
    9bda:	2301      	movne	r3, #1
    9bdc:	2300      	moveq	r3, #0
    9bde:	b2db      	uxtb	r3, r3
}
    9be0:	4618      	mov	r0, r3
    9be2:	370c      	adds	r7, #12
    9be4:	46bd      	mov	sp, r7
    9be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bea:	4770      	bx	lr

00009bec <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    9bec:	b480      	push	{r7}
    9bee:	b083      	sub	sp, #12
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9bf4:	687b      	ldr	r3, [r7, #4]
    9bf6:	7a9b      	ldrb	r3, [r3, #10]
    9bf8:	b2db      	uxtb	r3, r3
    9bfa:	f003 0301 	and.w	r3, r3, #1
    9bfe:	2b00      	cmp	r3, #0
    9c00:	bf14      	ite	ne
    9c02:	2301      	movne	r3, #1
    9c04:	2300      	moveq	r3, #0
    9c06:	b2db      	uxtb	r3, r3
}
    9c08:	4618      	mov	r0, r3
    9c0a:	370c      	adds	r7, #12
    9c0c:	46bd      	mov	sp, r7
    9c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c12:	4770      	bx	lr

00009c14 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    9c14:	b480      	push	{r7}
    9c16:	b083      	sub	sp, #12
    9c18:	af00      	add	r7, sp, #0
    9c1a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    9c1c:	687b      	ldr	r3, [r7, #4]
    9c1e:	2201      	movs	r2, #1
    9c20:	729a      	strb	r2, [r3, #10]
}
    9c22:	bf00      	nop
    9c24:	370c      	adds	r7, #12
    9c26:	46bd      	mov	sp, r7
    9c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c2c:	4770      	bx	lr

00009c2e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    9c2e:	b480      	push	{r7}
    9c30:	b083      	sub	sp, #12
    9c32:	af00      	add	r7, sp, #0
    9c34:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	2202      	movs	r2, #2
    9c3a:	729a      	strb	r2, [r3, #10]
}
    9c3c:	bf00      	nop
    9c3e:	370c      	adds	r7, #12
    9c40:	46bd      	mov	sp, r7
    9c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c46:	4770      	bx	lr

00009c48 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    9c48:	b480      	push	{r7}
    9c4a:	b083      	sub	sp, #12
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	2201      	movs	r2, #1
    9c54:	725a      	strb	r2, [r3, #9]
}
    9c56:	bf00      	nop
    9c58:	370c      	adds	r7, #12
    9c5a:	46bd      	mov	sp, r7
    9c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c60:	4770      	bx	lr

00009c62 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    9c62:	b480      	push	{r7}
    9c64:	b083      	sub	sp, #12
    9c66:	af00      	add	r7, sp, #0
    9c68:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	7a5b      	ldrb	r3, [r3, #9]
    9c6e:	b2db      	uxtb	r3, r3
    9c70:	085b      	lsrs	r3, r3, #1
    9c72:	f003 0301 	and.w	r3, r3, #1
    9c76:	2b00      	cmp	r3, #0
    9c78:	bf14      	ite	ne
    9c7a:	2301      	movne	r3, #1
    9c7c:	2300      	moveq	r3, #0
    9c7e:	b2db      	uxtb	r3, r3
}
    9c80:	4618      	mov	r0, r3
    9c82:	370c      	adds	r7, #12
    9c84:	46bd      	mov	sp, r7
    9c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c8a:	4770      	bx	lr

00009c8c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    9c8c:	b580      	push	{r7, lr}
    9c8e:	b082      	sub	sp, #8
    9c90:	af00      	add	r7, sp, #0
    9c92:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    9c94:	687b      	ldr	r3, [r7, #4]
    9c96:	681b      	ldr	r3, [r3, #0]
    9c98:	f043 0201 	orr.w	r2, r3, #1
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9ca0:	2101      	movs	r1, #1
    9ca2:	6878      	ldr	r0, [r7, #4]
    9ca4:	4b02      	ldr	r3, [pc, #8]	; (9cb0 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    9ca6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9ca8:	bf00      	nop
    9caa:	3708      	adds	r7, #8
    9cac:	46bd      	mov	sp, r7
    9cae:	bd80      	pop	{r7, pc}
    9cb0:	00009ba1 	.word	0x00009ba1

00009cb4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	b082      	sub	sp, #8
    9cb8:	af00      	add	r7, sp, #0
    9cba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	681b      	ldr	r3, [r3, #0]
    9cc0:	f043 0202 	orr.w	r2, r3, #2
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9cc8:	2103      	movs	r1, #3
    9cca:	6878      	ldr	r0, [r7, #4]
    9ccc:	4b02      	ldr	r3, [pc, #8]	; (9cd8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    9cce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9cd0:	bf00      	nop
    9cd2:	3708      	adds	r7, #8
    9cd4:	46bd      	mov	sp, r7
    9cd6:	bd80      	pop	{r7, pc}
    9cd8:	00009ba1 	.word	0x00009ba1

00009cdc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b084      	sub	sp, #16
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9ce4:	2103      	movs	r1, #3
    9ce6:	6878      	ldr	r0, [r7, #4]
    9ce8:	4b09      	ldr	r3, [pc, #36]	; (9d10 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    9cea:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9cec:	687b      	ldr	r3, [r7, #4]
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    9cf2:	68fb      	ldr	r3, [r7, #12]
    9cf4:	085b      	lsrs	r3, r3, #1
    9cf6:	f003 0301 	and.w	r3, r3, #1
    9cfa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9cfc:	68fb      	ldr	r3, [r7, #12]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	bf14      	ite	ne
    9d02:	2301      	movne	r3, #1
    9d04:	2300      	moveq	r3, #0
    9d06:	b2db      	uxtb	r3, r3
}
    9d08:	4618      	mov	r0, r3
    9d0a:	3710      	adds	r7, #16
    9d0c:	46bd      	mov	sp, r7
    9d0e:	bd80      	pop	{r7, pc}
    9d10:	00009ba1 	.word	0x00009ba1

00009d14 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9d14:	b580      	push	{r7, lr}
    9d16:	b082      	sub	sp, #8
    9d18:	af00      	add	r7, sp, #0
    9d1a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9d1c:	687b      	ldr	r3, [r7, #4]
    9d1e:	681b      	ldr	r3, [r3, #0]
    9d20:	f023 0202 	bic.w	r2, r3, #2
    9d24:	687b      	ldr	r3, [r7, #4]
    9d26:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9d28:	2103      	movs	r1, #3
    9d2a:	6878      	ldr	r0, [r7, #4]
    9d2c:	4b02      	ldr	r3, [pc, #8]	; (9d38 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    9d2e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9d30:	bf00      	nop
    9d32:	3708      	adds	r7, #8
    9d34:	46bd      	mov	sp, r7
    9d36:	bd80      	pop	{r7, pc}
    9d38:	00009ba1 	.word	0x00009ba1

00009d3c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    9d3c:	b480      	push	{r7}
    9d3e:	b085      	sub	sp, #20
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	681b      	ldr	r3, [r3, #0]
    9d48:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    9d4a:	68fb      	ldr	r3, [r7, #12]
    9d4c:	089b      	lsrs	r3, r3, #2
    9d4e:	f003 0303 	and.w	r3, r3, #3
    9d52:	60fb      	str	r3, [r7, #12]
	return tmp;
    9d54:	68fb      	ldr	r3, [r7, #12]
}
    9d56:	4618      	mov	r0, r3
    9d58:	3714      	adds	r7, #20
    9d5a:	46bd      	mov	sp, r7
    9d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d60:	4770      	bx	lr
	...

00009d64 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    9d64:	b580      	push	{r7, lr}
    9d66:	b084      	sub	sp, #16
    9d68:	af00      	add	r7, sp, #0
    9d6a:	6078      	str	r0, [r7, #4]
    9d6c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9d6e:	2103      	movs	r1, #3
    9d70:	6878      	ldr	r0, [r7, #4]
    9d72:	4b07      	ldr	r3, [pc, #28]	; (9d90 <hri_tc_get_CTRLA_reg+0x2c>)
    9d74:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	681b      	ldr	r3, [r3, #0]
    9d7a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9d7c:	68fa      	ldr	r2, [r7, #12]
    9d7e:	683b      	ldr	r3, [r7, #0]
    9d80:	4013      	ands	r3, r2
    9d82:	60fb      	str	r3, [r7, #12]
	return tmp;
    9d84:	68fb      	ldr	r3, [r7, #12]
}
    9d86:	4618      	mov	r0, r3
    9d88:	3710      	adds	r7, #16
    9d8a:	46bd      	mov	sp, r7
    9d8c:	bd80      	pop	{r7, pc}
    9d8e:	bf00      	nop
    9d90:	00009ba1 	.word	0x00009ba1

00009d94 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    9d94:	b580      	push	{r7, lr}
    9d96:	b082      	sub	sp, #8
    9d98:	af00      	add	r7, sp, #0
    9d9a:	6078      	str	r0, [r7, #4]
    9d9c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	683a      	ldr	r2, [r7, #0]
    9da2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9da4:	2103      	movs	r1, #3
    9da6:	6878      	ldr	r0, [r7, #4]
    9da8:	4b02      	ldr	r3, [pc, #8]	; (9db4 <hri_tc_write_CTRLA_reg+0x20>)
    9daa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9dac:	bf00      	nop
    9dae:	3708      	adds	r7, #8
    9db0:	46bd      	mov	sp, r7
    9db2:	bd80      	pop	{r7, pc}
    9db4:	00009ba1 	.word	0x00009ba1

00009db8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9db8:	b480      	push	{r7}
    9dba:	b083      	sub	sp, #12
    9dbc:	af00      	add	r7, sp, #0
    9dbe:	6078      	str	r0, [r7, #4]
    9dc0:	460b      	mov	r3, r1
    9dc2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	887a      	ldrh	r2, [r7, #2]
    9dc8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    9dca:	bf00      	nop
    9dcc:	370c      	adds	r7, #12
    9dce:	46bd      	mov	sp, r7
    9dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd4:	4770      	bx	lr

00009dd6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    9dd6:	b480      	push	{r7}
    9dd8:	b083      	sub	sp, #12
    9dda:	af00      	add	r7, sp, #0
    9ddc:	6078      	str	r0, [r7, #4]
    9dde:	460b      	mov	r3, r1
    9de0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	78fa      	ldrb	r2, [r7, #3]
    9de6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    9de8:	bf00      	nop
    9dea:	370c      	adds	r7, #12
    9dec:	46bd      	mov	sp, r7
    9dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    9df2:	4770      	bx	lr

00009df4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9df4:	b480      	push	{r7}
    9df6:	b083      	sub	sp, #12
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
    9dfc:	460b      	mov	r3, r1
    9dfe:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	78fa      	ldrb	r2, [r7, #3]
    9e04:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    9e06:	bf00      	nop
    9e08:	370c      	adds	r7, #12
    9e0a:	46bd      	mov	sp, r7
    9e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e10:	4770      	bx	lr
	...

00009e14 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9e14:	b580      	push	{r7, lr}
    9e16:	b082      	sub	sp, #8
    9e18:	af00      	add	r7, sp, #0
    9e1a:	6078      	str	r0, [r7, #4]
    9e1c:	460b      	mov	r3, r1
    9e1e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    9e20:	687b      	ldr	r3, [r7, #4]
    9e22:	78fa      	ldrb	r2, [r7, #3]
    9e24:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9e26:	2120      	movs	r1, #32
    9e28:	6878      	ldr	r0, [r7, #4]
    9e2a:	4b03      	ldr	r3, [pc, #12]	; (9e38 <hri_tccount8_write_PER_reg+0x24>)
    9e2c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9e2e:	bf00      	nop
    9e30:	3708      	adds	r7, #8
    9e32:	46bd      	mov	sp, r7
    9e34:	bd80      	pop	{r7, pc}
    9e36:	bf00      	nop
    9e38:	00009ba1 	.word	0x00009ba1

00009e3c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    9e3c:	b580      	push	{r7, lr}
    9e3e:	b082      	sub	sp, #8
    9e40:	af00      	add	r7, sp, #0
    9e42:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9e44:	2120      	movs	r1, #32
    9e46:	6878      	ldr	r0, [r7, #4]
    9e48:	4b04      	ldr	r3, [pc, #16]	; (9e5c <hri_tccount8_read_PER_reg+0x20>)
    9e4a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	7edb      	ldrb	r3, [r3, #27]
    9e50:	b2db      	uxtb	r3, r3
}
    9e52:	4618      	mov	r0, r3
    9e54:	3708      	adds	r7, #8
    9e56:	46bd      	mov	sp, r7
    9e58:	bd80      	pop	{r7, pc}
    9e5a:	bf00      	nop
    9e5c:	00009ba1 	.word	0x00009ba1

00009e60 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	b082      	sub	sp, #8
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
    9e68:	460b      	mov	r3, r1
    9e6a:	70fb      	strb	r3, [r7, #3]
    9e6c:	4613      	mov	r3, r2
    9e6e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9e70:	78fb      	ldrb	r3, [r7, #3]
    9e72:	687a      	ldr	r2, [r7, #4]
    9e74:	4413      	add	r3, r2
    9e76:	78ba      	ldrb	r2, [r7, #2]
    9e78:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9e7a:	21c0      	movs	r1, #192	; 0xc0
    9e7c:	6878      	ldr	r0, [r7, #4]
    9e7e:	4b03      	ldr	r3, [pc, #12]	; (9e8c <hri_tccount8_write_CC_reg+0x2c>)
    9e80:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9e82:	bf00      	nop
    9e84:	3708      	adds	r7, #8
    9e86:	46bd      	mov	sp, r7
    9e88:	bd80      	pop	{r7, pc}
    9e8a:	bf00      	nop
    9e8c:	00009ba1 	.word	0x00009ba1

00009e90 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9e90:	b580      	push	{r7, lr}
    9e92:	b082      	sub	sp, #8
    9e94:	af00      	add	r7, sp, #0
    9e96:	6078      	str	r0, [r7, #4]
    9e98:	460b      	mov	r3, r1
    9e9a:	70fb      	strb	r3, [r7, #3]
    9e9c:	4613      	mov	r3, r2
    9e9e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9ea0:	78fb      	ldrb	r3, [r7, #3]
    9ea2:	687a      	ldr	r2, [r7, #4]
    9ea4:	330c      	adds	r3, #12
    9ea6:	005b      	lsls	r3, r3, #1
    9ea8:	4413      	add	r3, r2
    9eaa:	883a      	ldrh	r2, [r7, #0]
    9eac:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9eae:	21c0      	movs	r1, #192	; 0xc0
    9eb0:	6878      	ldr	r0, [r7, #4]
    9eb2:	4b03      	ldr	r3, [pc, #12]	; (9ec0 <hri_tccount16_write_CC_reg+0x30>)
    9eb4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9eb6:	bf00      	nop
    9eb8:	3708      	adds	r7, #8
    9eba:	46bd      	mov	sp, r7
    9ebc:	bd80      	pop	{r7, pc}
    9ebe:	bf00      	nop
    9ec0:	00009ba1 	.word	0x00009ba1

00009ec4 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    9ec4:	b580      	push	{r7, lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
    9ecc:	460b      	mov	r3, r1
    9ece:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9ed0:	21c0      	movs	r1, #192	; 0xc0
    9ed2:	6878      	ldr	r0, [r7, #4]
    9ed4:	4b06      	ldr	r3, [pc, #24]	; (9ef0 <hri_tccount16_read_CC_reg+0x2c>)
    9ed6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    9ed8:	78fb      	ldrb	r3, [r7, #3]
    9eda:	687a      	ldr	r2, [r7, #4]
    9edc:	330c      	adds	r3, #12
    9ede:	005b      	lsls	r3, r3, #1
    9ee0:	4413      	add	r3, r2
    9ee2:	889b      	ldrh	r3, [r3, #4]
    9ee4:	b29b      	uxth	r3, r3
}
    9ee6:	4618      	mov	r0, r3
    9ee8:	3708      	adds	r7, #8
    9eea:	46bd      	mov	sp, r7
    9eec:	bd80      	pop	{r7, pc}
    9eee:	bf00      	nop
    9ef0:	00009ba1 	.word	0x00009ba1

00009ef4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    9ef4:	b580      	push	{r7, lr}
    9ef6:	b084      	sub	sp, #16
    9ef8:	af00      	add	r7, sp, #0
    9efa:	60f8      	str	r0, [r7, #12]
    9efc:	460b      	mov	r3, r1
    9efe:	607a      	str	r2, [r7, #4]
    9f00:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9f02:	7afb      	ldrb	r3, [r7, #11]
    9f04:	68fa      	ldr	r2, [r7, #12]
    9f06:	3306      	adds	r3, #6
    9f08:	009b      	lsls	r3, r3, #2
    9f0a:	4413      	add	r3, r2
    9f0c:	687a      	ldr	r2, [r7, #4]
    9f0e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9f10:	21c0      	movs	r1, #192	; 0xc0
    9f12:	68f8      	ldr	r0, [r7, #12]
    9f14:	4b02      	ldr	r3, [pc, #8]	; (9f20 <hri_tccount32_write_CC_reg+0x2c>)
    9f16:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9f18:	bf00      	nop
    9f1a:	3710      	adds	r7, #16
    9f1c:	46bd      	mov	sp, r7
    9f1e:	bd80      	pop	{r7, pc}
    9f20:	00009ba1 	.word	0x00009ba1

00009f24 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b082      	sub	sp, #8
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
    9f2c:	460b      	mov	r3, r1
    9f2e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9f30:	21c0      	movs	r1, #192	; 0xc0
    9f32:	6878      	ldr	r0, [r7, #4]
    9f34:	4b05      	ldr	r3, [pc, #20]	; (9f4c <hri_tccount32_read_CC_reg+0x28>)
    9f36:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    9f38:	78fb      	ldrb	r3, [r7, #3]
    9f3a:	687a      	ldr	r2, [r7, #4]
    9f3c:	3306      	adds	r3, #6
    9f3e:	009b      	lsls	r3, r3, #2
    9f40:	4413      	add	r3, r2
    9f42:	685b      	ldr	r3, [r3, #4]
}
    9f44:	4618      	mov	r0, r3
    9f46:	3708      	adds	r7, #8
    9f48:	46bd      	mov	sp, r7
    9f4a:	bd80      	pop	{r7, pc}
    9f4c:	00009ba1 	.word	0x00009ba1

00009f50 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    9f50:	b580      	push	{r7, lr}
    9f52:	b084      	sub	sp, #16
    9f54:	af00      	add	r7, sp, #0
    9f56:	6078      	str	r0, [r7, #4]
    9f58:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    9f5a:	6838      	ldr	r0, [r7, #0]
    9f5c:	4b93      	ldr	r3, [pc, #588]	; (a1ac <_tc_timer_init+0x25c>)
    9f5e:	4798      	blx	r3
    9f60:	4603      	mov	r3, r0
    9f62:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9f64:	687b      	ldr	r3, [r7, #4]
    9f66:	683a      	ldr	r2, [r7, #0]
    9f68:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    9f6a:	22a4      	movs	r2, #164	; 0xa4
    9f6c:	4990      	ldr	r1, [pc, #576]	; (a1b0 <_tc_timer_init+0x260>)
    9f6e:	2001      	movs	r0, #1
    9f70:	4b90      	ldr	r3, [pc, #576]	; (a1b4 <_tc_timer_init+0x264>)
    9f72:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9f74:	2101      	movs	r1, #1
    9f76:	6838      	ldr	r0, [r7, #0]
    9f78:	4b8f      	ldr	r3, [pc, #572]	; (a1b8 <_tc_timer_init+0x268>)
    9f7a:	4798      	blx	r3
    9f7c:	4603      	mov	r3, r0
    9f7e:	f083 0301 	eor.w	r3, r3, #1
    9f82:	b2db      	uxtb	r3, r3
    9f84:	2b00      	cmp	r3, #0
    9f86:	d011      	beq.n	9fac <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9f88:	2102      	movs	r1, #2
    9f8a:	6838      	ldr	r0, [r7, #0]
    9f8c:	4b8b      	ldr	r3, [pc, #556]	; (a1bc <_tc_timer_init+0x26c>)
    9f8e:	4798      	blx	r3
    9f90:	4603      	mov	r3, r0
    9f92:	2b00      	cmp	r3, #0
    9f94:	d006      	beq.n	9fa4 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9f96:	6838      	ldr	r0, [r7, #0]
    9f98:	4b89      	ldr	r3, [pc, #548]	; (a1c0 <_tc_timer_init+0x270>)
    9f9a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9f9c:	2102      	movs	r1, #2
    9f9e:	6838      	ldr	r0, [r7, #0]
    9fa0:	4b88      	ldr	r3, [pc, #544]	; (a1c4 <_tc_timer_init+0x274>)
    9fa2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9fa4:	2101      	movs	r1, #1
    9fa6:	6838      	ldr	r0, [r7, #0]
    9fa8:	4b87      	ldr	r3, [pc, #540]	; (a1c8 <_tc_timer_init+0x278>)
    9faa:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9fac:	2101      	movs	r1, #1
    9fae:	6838      	ldr	r0, [r7, #0]
    9fb0:	4b84      	ldr	r3, [pc, #528]	; (a1c4 <_tc_timer_init+0x274>)
    9fb2:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9fb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9fb8:	4984      	ldr	r1, [pc, #528]	; (a1cc <_tc_timer_init+0x27c>)
    9fba:	4613      	mov	r3, r2
    9fbc:	009b      	lsls	r3, r3, #2
    9fbe:	4413      	add	r3, r2
    9fc0:	009b      	lsls	r3, r3, #2
    9fc2:	440b      	add	r3, r1
    9fc4:	3304      	adds	r3, #4
    9fc6:	681b      	ldr	r3, [r3, #0]
    9fc8:	4619      	mov	r1, r3
    9fca:	6838      	ldr	r0, [r7, #0]
    9fcc:	4b7e      	ldr	r3, [pc, #504]	; (a1c8 <_tc_timer_init+0x278>)
    9fce:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9fd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9fd4:	497d      	ldr	r1, [pc, #500]	; (a1cc <_tc_timer_init+0x27c>)
    9fd6:	4613      	mov	r3, r2
    9fd8:	009b      	lsls	r3, r3, #2
    9fda:	4413      	add	r3, r2
    9fdc:	009b      	lsls	r3, r3, #2
    9fde:	440b      	add	r3, r1
    9fe0:	330a      	adds	r3, #10
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	4619      	mov	r1, r3
    9fe6:	6838      	ldr	r0, [r7, #0]
    9fe8:	4b79      	ldr	r3, [pc, #484]	; (a1d0 <_tc_timer_init+0x280>)
    9fea:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9fec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ff0:	4976      	ldr	r1, [pc, #472]	; (a1cc <_tc_timer_init+0x27c>)
    9ff2:	4613      	mov	r3, r2
    9ff4:	009b      	lsls	r3, r3, #2
    9ff6:	4413      	add	r3, r2
    9ff8:	009b      	lsls	r3, r3, #2
    9ffa:	440b      	add	r3, r1
    9ffc:	3308      	adds	r3, #8
    9ffe:	881b      	ldrh	r3, [r3, #0]
    a000:	4619      	mov	r1, r3
    a002:	6838      	ldr	r0, [r7, #0]
    a004:	4b73      	ldr	r3, [pc, #460]	; (a1d4 <_tc_timer_init+0x284>)
    a006:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    a008:	2101      	movs	r1, #1
    a00a:	6838      	ldr	r0, [r7, #0]
    a00c:	4b72      	ldr	r3, [pc, #456]	; (a1d8 <_tc_timer_init+0x288>)
    a00e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a010:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a014:	496d      	ldr	r1, [pc, #436]	; (a1cc <_tc_timer_init+0x27c>)
    a016:	4613      	mov	r3, r2
    a018:	009b      	lsls	r3, r3, #2
    a01a:	4413      	add	r3, r2
    a01c:	009b      	lsls	r3, r3, #2
    a01e:	440b      	add	r3, r1
    a020:	3304      	adds	r3, #4
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	f003 030c 	and.w	r3, r3, #12
    a028:	2b08      	cmp	r3, #8
    a02a:	d11e      	bne.n	a06a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a02c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a030:	4966      	ldr	r1, [pc, #408]	; (a1cc <_tc_timer_init+0x27c>)
    a032:	4613      	mov	r3, r2
    a034:	009b      	lsls	r3, r3, #2
    a036:	4413      	add	r3, r2
    a038:	009b      	lsls	r3, r3, #2
    a03a:	440b      	add	r3, r1
    a03c:	330c      	adds	r3, #12
    a03e:	681b      	ldr	r3, [r3, #0]
    a040:	461a      	mov	r2, r3
    a042:	2100      	movs	r1, #0
    a044:	6838      	ldr	r0, [r7, #0]
    a046:	4b65      	ldr	r3, [pc, #404]	; (a1dc <_tc_timer_init+0x28c>)
    a048:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a04a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a04e:	495f      	ldr	r1, [pc, #380]	; (a1cc <_tc_timer_init+0x27c>)
    a050:	4613      	mov	r3, r2
    a052:	009b      	lsls	r3, r3, #2
    a054:	4413      	add	r3, r2
    a056:	009b      	lsls	r3, r3, #2
    a058:	440b      	add	r3, r1
    a05a:	3310      	adds	r3, #16
    a05c:	681b      	ldr	r3, [r3, #0]
    a05e:	461a      	mov	r2, r3
    a060:	2101      	movs	r1, #1
    a062:	6838      	ldr	r0, [r7, #0]
    a064:	4b5d      	ldr	r3, [pc, #372]	; (a1dc <_tc_timer_init+0x28c>)
    a066:	4798      	blx	r3
    a068:	e06a      	b.n	a140 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a06a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a06e:	4957      	ldr	r1, [pc, #348]	; (a1cc <_tc_timer_init+0x27c>)
    a070:	4613      	mov	r3, r2
    a072:	009b      	lsls	r3, r3, #2
    a074:	4413      	add	r3, r2
    a076:	009b      	lsls	r3, r3, #2
    a078:	440b      	add	r3, r1
    a07a:	3304      	adds	r3, #4
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	f003 030c 	and.w	r3, r3, #12
    a082:	2b00      	cmp	r3, #0
    a084:	d120      	bne.n	a0c8 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a086:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a08a:	4950      	ldr	r1, [pc, #320]	; (a1cc <_tc_timer_init+0x27c>)
    a08c:	4613      	mov	r3, r2
    a08e:	009b      	lsls	r3, r3, #2
    a090:	4413      	add	r3, r2
    a092:	009b      	lsls	r3, r3, #2
    a094:	440b      	add	r3, r1
    a096:	330c      	adds	r3, #12
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	b29b      	uxth	r3, r3
    a09c:	461a      	mov	r2, r3
    a09e:	2100      	movs	r1, #0
    a0a0:	6838      	ldr	r0, [r7, #0]
    a0a2:	4b4f      	ldr	r3, [pc, #316]	; (a1e0 <_tc_timer_init+0x290>)
    a0a4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a0a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a0aa:	4948      	ldr	r1, [pc, #288]	; (a1cc <_tc_timer_init+0x27c>)
    a0ac:	4613      	mov	r3, r2
    a0ae:	009b      	lsls	r3, r3, #2
    a0b0:	4413      	add	r3, r2
    a0b2:	009b      	lsls	r3, r3, #2
    a0b4:	440b      	add	r3, r1
    a0b6:	3310      	adds	r3, #16
    a0b8:	681b      	ldr	r3, [r3, #0]
    a0ba:	b29b      	uxth	r3, r3
    a0bc:	461a      	mov	r2, r3
    a0be:	2101      	movs	r1, #1
    a0c0:	6838      	ldr	r0, [r7, #0]
    a0c2:	4b47      	ldr	r3, [pc, #284]	; (a1e0 <_tc_timer_init+0x290>)
    a0c4:	4798      	blx	r3
    a0c6:	e03b      	b.n	a140 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    a0c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a0cc:	493f      	ldr	r1, [pc, #252]	; (a1cc <_tc_timer_init+0x27c>)
    a0ce:	4613      	mov	r3, r2
    a0d0:	009b      	lsls	r3, r3, #2
    a0d2:	4413      	add	r3, r2
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	440b      	add	r3, r1
    a0d8:	3304      	adds	r3, #4
    a0da:	681b      	ldr	r3, [r3, #0]
    a0dc:	f003 030c 	and.w	r3, r3, #12
    a0e0:	2b04      	cmp	r3, #4
    a0e2:	d12d      	bne.n	a140 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    a0e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a0e8:	4938      	ldr	r1, [pc, #224]	; (a1cc <_tc_timer_init+0x27c>)
    a0ea:	4613      	mov	r3, r2
    a0ec:	009b      	lsls	r3, r3, #2
    a0ee:	4413      	add	r3, r2
    a0f0:	009b      	lsls	r3, r3, #2
    a0f2:	440b      	add	r3, r1
    a0f4:	330c      	adds	r3, #12
    a0f6:	681b      	ldr	r3, [r3, #0]
    a0f8:	b2db      	uxtb	r3, r3
    a0fa:	461a      	mov	r2, r3
    a0fc:	2100      	movs	r1, #0
    a0fe:	6838      	ldr	r0, [r7, #0]
    a100:	4b38      	ldr	r3, [pc, #224]	; (a1e4 <_tc_timer_init+0x294>)
    a102:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    a104:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a108:	4930      	ldr	r1, [pc, #192]	; (a1cc <_tc_timer_init+0x27c>)
    a10a:	4613      	mov	r3, r2
    a10c:	009b      	lsls	r3, r3, #2
    a10e:	4413      	add	r3, r2
    a110:	009b      	lsls	r3, r3, #2
    a112:	440b      	add	r3, r1
    a114:	3310      	adds	r3, #16
    a116:	681b      	ldr	r3, [r3, #0]
    a118:	b2db      	uxtb	r3, r3
    a11a:	461a      	mov	r2, r3
    a11c:	2101      	movs	r1, #1
    a11e:	6838      	ldr	r0, [r7, #0]
    a120:	4b30      	ldr	r3, [pc, #192]	; (a1e4 <_tc_timer_init+0x294>)
    a122:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    a124:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a128:	4928      	ldr	r1, [pc, #160]	; (a1cc <_tc_timer_init+0x27c>)
    a12a:	4613      	mov	r3, r2
    a12c:	009b      	lsls	r3, r3, #2
    a12e:	4413      	add	r3, r2
    a130:	009b      	lsls	r3, r3, #2
    a132:	440b      	add	r3, r1
    a134:	330b      	adds	r3, #11
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	4619      	mov	r1, r3
    a13a:	6838      	ldr	r0, [r7, #0]
    a13c:	4b2a      	ldr	r3, [pc, #168]	; (a1e8 <_tc_timer_init+0x298>)
    a13e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    a140:	6838      	ldr	r0, [r7, #0]
    a142:	4b2a      	ldr	r3, [pc, #168]	; (a1ec <_tc_timer_init+0x29c>)
    a144:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    a146:	6879      	ldr	r1, [r7, #4]
    a148:	6838      	ldr	r0, [r7, #0]
    a14a:	4b29      	ldr	r3, [pc, #164]	; (a1f0 <_tc_timer_init+0x2a0>)
    a14c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a14e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a152:	491e      	ldr	r1, [pc, #120]	; (a1cc <_tc_timer_init+0x27c>)
    a154:	4613      	mov	r3, r2
    a156:	009b      	lsls	r3, r3, #2
    a158:	4413      	add	r3, r2
    a15a:	009b      	lsls	r3, r3, #2
    a15c:	440b      	add	r3, r1
    a15e:	3302      	adds	r3, #2
    a160:	f9b3 3000 	ldrsh.w	r3, [r3]
    a164:	4618      	mov	r0, r3
    a166:	4b23      	ldr	r3, [pc, #140]	; (a1f4 <_tc_timer_init+0x2a4>)
    a168:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a16a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a16e:	4917      	ldr	r1, [pc, #92]	; (a1cc <_tc_timer_init+0x27c>)
    a170:	4613      	mov	r3, r2
    a172:	009b      	lsls	r3, r3, #2
    a174:	4413      	add	r3, r2
    a176:	009b      	lsls	r3, r3, #2
    a178:	440b      	add	r3, r1
    a17a:	3302      	adds	r3, #2
    a17c:	f9b3 3000 	ldrsh.w	r3, [r3]
    a180:	4618      	mov	r0, r3
    a182:	4b1d      	ldr	r3, [pc, #116]	; (a1f8 <_tc_timer_init+0x2a8>)
    a184:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a186:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a18a:	4910      	ldr	r1, [pc, #64]	; (a1cc <_tc_timer_init+0x27c>)
    a18c:	4613      	mov	r3, r2
    a18e:	009b      	lsls	r3, r3, #2
    a190:	4413      	add	r3, r2
    a192:	009b      	lsls	r3, r3, #2
    a194:	440b      	add	r3, r1
    a196:	3302      	adds	r3, #2
    a198:	f9b3 3000 	ldrsh.w	r3, [r3]
    a19c:	4618      	mov	r0, r3
    a19e:	4b17      	ldr	r3, [pc, #92]	; (a1fc <_tc_timer_init+0x2ac>)
    a1a0:	4798      	blx	r3

	return ERR_NONE;
    a1a2:	2300      	movs	r3, #0
}
    a1a4:	4618      	mov	r0, r3
    a1a6:	3710      	adds	r7, #16
    a1a8:	46bd      	mov	sp, r7
    a1aa:	bd80      	pop	{r7, pc}
    a1ac:	0000a7e1 	.word	0x0000a7e1
    a1b0:	00019ad0 	.word	0x00019ad0
    a1b4:	00005565 	.word	0x00005565
    a1b8:	00009bc5 	.word	0x00009bc5
    a1bc:	00009d65 	.word	0x00009d65
    a1c0:	00009d15 	.word	0x00009d15
    a1c4:	00009ba1 	.word	0x00009ba1
    a1c8:	00009d95 	.word	0x00009d95
    a1cc:	200000e4 	.word	0x200000e4
    a1d0:	00009df5 	.word	0x00009df5
    a1d4:	00009db9 	.word	0x00009db9
    a1d8:	00009dd7 	.word	0x00009dd7
    a1dc:	00009ef5 	.word	0x00009ef5
    a1e0:	00009e91 	.word	0x00009e91
    a1e4:	00009e61 	.word	0x00009e61
    a1e8:	00009e15 	.word	0x00009e15
    a1ec:	00009c49 	.word	0x00009c49
    a1f0:	0000a849 	.word	0x0000a849
    a1f4:	00009b21 	.word	0x00009b21
    a1f8:	00009b65 	.word	0x00009b65
    a1fc:	00009ae5 	.word	0x00009ae5

0000a200 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    a200:	b580      	push	{r7, lr}
    a202:	b084      	sub	sp, #16
    a204:	af00      	add	r7, sp, #0
    a206:	6078      	str	r0, [r7, #4]
    a208:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    a20a:	6838      	ldr	r0, [r7, #0]
    a20c:	4b73      	ldr	r3, [pc, #460]	; (a3dc <_pwm_init+0x1dc>)
    a20e:	4798      	blx	r3
    a210:	4603      	mov	r3, r0
    a212:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    a214:	687b      	ldr	r3, [r7, #4]
    a216:	683a      	ldr	r2, [r7, #0]
    a218:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a21a:	2101      	movs	r1, #1
    a21c:	6838      	ldr	r0, [r7, #0]
    a21e:	4b70      	ldr	r3, [pc, #448]	; (a3e0 <_pwm_init+0x1e0>)
    a220:	4798      	blx	r3
    a222:	4603      	mov	r3, r0
    a224:	f083 0301 	eor.w	r3, r3, #1
    a228:	b2db      	uxtb	r3, r3
    a22a:	2b00      	cmp	r3, #0
    a22c:	d011      	beq.n	a252 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a22e:	2102      	movs	r1, #2
    a230:	6838      	ldr	r0, [r7, #0]
    a232:	4b6c      	ldr	r3, [pc, #432]	; (a3e4 <_pwm_init+0x1e4>)
    a234:	4798      	blx	r3
    a236:	4603      	mov	r3, r0
    a238:	2b00      	cmp	r3, #0
    a23a:	d006      	beq.n	a24a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a23c:	6838      	ldr	r0, [r7, #0]
    a23e:	4b6a      	ldr	r3, [pc, #424]	; (a3e8 <_pwm_init+0x1e8>)
    a240:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a242:	2102      	movs	r1, #2
    a244:	6838      	ldr	r0, [r7, #0]
    a246:	4b69      	ldr	r3, [pc, #420]	; (a3ec <_pwm_init+0x1ec>)
    a248:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a24a:	2101      	movs	r1, #1
    a24c:	6838      	ldr	r0, [r7, #0]
    a24e:	4b68      	ldr	r3, [pc, #416]	; (a3f0 <_pwm_init+0x1f0>)
    a250:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a252:	2101      	movs	r1, #1
    a254:	6838      	ldr	r0, [r7, #0]
    a256:	4b65      	ldr	r3, [pc, #404]	; (a3ec <_pwm_init+0x1ec>)
    a258:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a25a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a25e:	4965      	ldr	r1, [pc, #404]	; (a3f4 <_pwm_init+0x1f4>)
    a260:	4613      	mov	r3, r2
    a262:	009b      	lsls	r3, r3, #2
    a264:	4413      	add	r3, r2
    a266:	009b      	lsls	r3, r3, #2
    a268:	440b      	add	r3, r1
    a26a:	3304      	adds	r3, #4
    a26c:	681b      	ldr	r3, [r3, #0]
    a26e:	4619      	mov	r1, r3
    a270:	6838      	ldr	r0, [r7, #0]
    a272:	4b5f      	ldr	r3, [pc, #380]	; (a3f0 <_pwm_init+0x1f0>)
    a274:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a276:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a27a:	495e      	ldr	r1, [pc, #376]	; (a3f4 <_pwm_init+0x1f4>)
    a27c:	4613      	mov	r3, r2
    a27e:	009b      	lsls	r3, r3, #2
    a280:	4413      	add	r3, r2
    a282:	009b      	lsls	r3, r3, #2
    a284:	440b      	add	r3, r1
    a286:	330a      	adds	r3, #10
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	4619      	mov	r1, r3
    a28c:	6838      	ldr	r0, [r7, #0]
    a28e:	4b5a      	ldr	r3, [pc, #360]	; (a3f8 <_pwm_init+0x1f8>)
    a290:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a292:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a296:	4957      	ldr	r1, [pc, #348]	; (a3f4 <_pwm_init+0x1f4>)
    a298:	4613      	mov	r3, r2
    a29a:	009b      	lsls	r3, r3, #2
    a29c:	4413      	add	r3, r2
    a29e:	009b      	lsls	r3, r3, #2
    a2a0:	440b      	add	r3, r1
    a2a2:	3308      	adds	r3, #8
    a2a4:	881b      	ldrh	r3, [r3, #0]
    a2a6:	4619      	mov	r1, r3
    a2a8:	6838      	ldr	r0, [r7, #0]
    a2aa:	4b54      	ldr	r3, [pc, #336]	; (a3fc <_pwm_init+0x1fc>)
    a2ac:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    a2ae:	2103      	movs	r1, #3
    a2b0:	6838      	ldr	r0, [r7, #0]
    a2b2:	4b53      	ldr	r3, [pc, #332]	; (a400 <_pwm_init+0x200>)
    a2b4:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a2b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a2ba:	494e      	ldr	r1, [pc, #312]	; (a3f4 <_pwm_init+0x1f4>)
    a2bc:	4613      	mov	r3, r2
    a2be:	009b      	lsls	r3, r3, #2
    a2c0:	4413      	add	r3, r2
    a2c2:	009b      	lsls	r3, r3, #2
    a2c4:	440b      	add	r3, r1
    a2c6:	3304      	adds	r3, #4
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	f003 030c 	and.w	r3, r3, #12
    a2ce:	2b08      	cmp	r3, #8
    a2d0:	d11e      	bne.n	a310 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a2d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a2d6:	4947      	ldr	r1, [pc, #284]	; (a3f4 <_pwm_init+0x1f4>)
    a2d8:	4613      	mov	r3, r2
    a2da:	009b      	lsls	r3, r3, #2
    a2dc:	4413      	add	r3, r2
    a2de:	009b      	lsls	r3, r3, #2
    a2e0:	440b      	add	r3, r1
    a2e2:	330c      	adds	r3, #12
    a2e4:	681b      	ldr	r3, [r3, #0]
    a2e6:	461a      	mov	r2, r3
    a2e8:	2100      	movs	r1, #0
    a2ea:	6838      	ldr	r0, [r7, #0]
    a2ec:	4b45      	ldr	r3, [pc, #276]	; (a404 <_pwm_init+0x204>)
    a2ee:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a2f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a2f4:	493f      	ldr	r1, [pc, #252]	; (a3f4 <_pwm_init+0x1f4>)
    a2f6:	4613      	mov	r3, r2
    a2f8:	009b      	lsls	r3, r3, #2
    a2fa:	4413      	add	r3, r2
    a2fc:	009b      	lsls	r3, r3, #2
    a2fe:	440b      	add	r3, r1
    a300:	3310      	adds	r3, #16
    a302:	681b      	ldr	r3, [r3, #0]
    a304:	461a      	mov	r2, r3
    a306:	2101      	movs	r1, #1
    a308:	6838      	ldr	r0, [r7, #0]
    a30a:	4b3e      	ldr	r3, [pc, #248]	; (a404 <_pwm_init+0x204>)
    a30c:	4798      	blx	r3
    a30e:	e031      	b.n	a374 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a310:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a314:	4937      	ldr	r1, [pc, #220]	; (a3f4 <_pwm_init+0x1f4>)
    a316:	4613      	mov	r3, r2
    a318:	009b      	lsls	r3, r3, #2
    a31a:	4413      	add	r3, r2
    a31c:	009b      	lsls	r3, r3, #2
    a31e:	440b      	add	r3, r1
    a320:	3304      	adds	r3, #4
    a322:	681b      	ldr	r3, [r3, #0]
    a324:	f003 030c 	and.w	r3, r3, #12
    a328:	2b00      	cmp	r3, #0
    a32a:	d120      	bne.n	a36e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a32c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a330:	4930      	ldr	r1, [pc, #192]	; (a3f4 <_pwm_init+0x1f4>)
    a332:	4613      	mov	r3, r2
    a334:	009b      	lsls	r3, r3, #2
    a336:	4413      	add	r3, r2
    a338:	009b      	lsls	r3, r3, #2
    a33a:	440b      	add	r3, r1
    a33c:	330c      	adds	r3, #12
    a33e:	681b      	ldr	r3, [r3, #0]
    a340:	b29b      	uxth	r3, r3
    a342:	461a      	mov	r2, r3
    a344:	2100      	movs	r1, #0
    a346:	6838      	ldr	r0, [r7, #0]
    a348:	4b2f      	ldr	r3, [pc, #188]	; (a408 <_pwm_init+0x208>)
    a34a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a34c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a350:	4928      	ldr	r1, [pc, #160]	; (a3f4 <_pwm_init+0x1f4>)
    a352:	4613      	mov	r3, r2
    a354:	009b      	lsls	r3, r3, #2
    a356:	4413      	add	r3, r2
    a358:	009b      	lsls	r3, r3, #2
    a35a:	440b      	add	r3, r1
    a35c:	3310      	adds	r3, #16
    a35e:	681b      	ldr	r3, [r3, #0]
    a360:	b29b      	uxth	r3, r3
    a362:	461a      	mov	r2, r3
    a364:	2101      	movs	r1, #1
    a366:	6838      	ldr	r0, [r7, #0]
    a368:	4b27      	ldr	r3, [pc, #156]	; (a408 <_pwm_init+0x208>)
    a36a:	4798      	blx	r3
    a36c:	e002      	b.n	a374 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    a36e:	f04f 33ff 	mov.w	r3, #4294967295
    a372:	e02e      	b.n	a3d2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    a374:	6879      	ldr	r1, [r7, #4]
    a376:	6838      	ldr	r0, [r7, #0]
    a378:	4b24      	ldr	r3, [pc, #144]	; (a40c <_pwm_init+0x20c>)
    a37a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a37c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a380:	491c      	ldr	r1, [pc, #112]	; (a3f4 <_pwm_init+0x1f4>)
    a382:	4613      	mov	r3, r2
    a384:	009b      	lsls	r3, r3, #2
    a386:	4413      	add	r3, r2
    a388:	009b      	lsls	r3, r3, #2
    a38a:	440b      	add	r3, r1
    a38c:	3302      	adds	r3, #2
    a38e:	f9b3 3000 	ldrsh.w	r3, [r3]
    a392:	4618      	mov	r0, r3
    a394:	4b1e      	ldr	r3, [pc, #120]	; (a410 <_pwm_init+0x210>)
    a396:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a398:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a39c:	4915      	ldr	r1, [pc, #84]	; (a3f4 <_pwm_init+0x1f4>)
    a39e:	4613      	mov	r3, r2
    a3a0:	009b      	lsls	r3, r3, #2
    a3a2:	4413      	add	r3, r2
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	440b      	add	r3, r1
    a3a8:	3302      	adds	r3, #2
    a3aa:	f9b3 3000 	ldrsh.w	r3, [r3]
    a3ae:	4618      	mov	r0, r3
    a3b0:	4b18      	ldr	r3, [pc, #96]	; (a414 <_pwm_init+0x214>)
    a3b2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a3b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a3b8:	490e      	ldr	r1, [pc, #56]	; (a3f4 <_pwm_init+0x1f4>)
    a3ba:	4613      	mov	r3, r2
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	4413      	add	r3, r2
    a3c0:	009b      	lsls	r3, r3, #2
    a3c2:	440b      	add	r3, r1
    a3c4:	3302      	adds	r3, #2
    a3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    a3ca:	4618      	mov	r0, r3
    a3cc:	4b12      	ldr	r3, [pc, #72]	; (a418 <_pwm_init+0x218>)
    a3ce:	4798      	blx	r3

	return 0;
    a3d0:	2300      	movs	r3, #0
}
    a3d2:	4618      	mov	r0, r3
    a3d4:	3710      	adds	r7, #16
    a3d6:	46bd      	mov	sp, r7
    a3d8:	bd80      	pop	{r7, pc}
    a3da:	bf00      	nop
    a3dc:	0000a7e1 	.word	0x0000a7e1
    a3e0:	00009bc5 	.word	0x00009bc5
    a3e4:	00009d65 	.word	0x00009d65
    a3e8:	00009d15 	.word	0x00009d15
    a3ec:	00009ba1 	.word	0x00009ba1
    a3f0:	00009d95 	.word	0x00009d95
    a3f4:	200000e4 	.word	0x200000e4
    a3f8:	00009df5 	.word	0x00009df5
    a3fc:	00009db9 	.word	0x00009db9
    a400:	00009dd7 	.word	0x00009dd7
    a404:	00009ef5 	.word	0x00009ef5
    a408:	00009e91 	.word	0x00009e91
    a40c:	0000a849 	.word	0x0000a849
    a410:	00009b21 	.word	0x00009b21
    a414:	00009b65 	.word	0x00009b65
    a418:	00009ae5 	.word	0x00009ae5

0000a41c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    a41c:	b580      	push	{r7, lr}
    a41e:	b084      	sub	sp, #16
    a420:	af00      	add	r7, sp, #0
    a422:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	68db      	ldr	r3, [r3, #12]
    a428:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a42a:	68f8      	ldr	r0, [r7, #12]
    a42c:	4b10      	ldr	r3, [pc, #64]	; (a470 <_tc_timer_deinit+0x54>)
    a42e:	4798      	blx	r3
    a430:	4603      	mov	r3, r0
    a432:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a434:	22f9      	movs	r2, #249	; 0xf9
    a436:	490f      	ldr	r1, [pc, #60]	; (a474 <_tc_timer_deinit+0x58>)
    a438:	2001      	movs	r0, #1
    a43a:	4b0f      	ldr	r3, [pc, #60]	; (a478 <_tc_timer_deinit+0x5c>)
    a43c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    a43e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a442:	490e      	ldr	r1, [pc, #56]	; (a47c <_tc_timer_deinit+0x60>)
    a444:	4613      	mov	r3, r2
    a446:	009b      	lsls	r3, r3, #2
    a448:	4413      	add	r3, r2
    a44a:	009b      	lsls	r3, r3, #2
    a44c:	440b      	add	r3, r1
    a44e:	3302      	adds	r3, #2
    a450:	f9b3 3000 	ldrsh.w	r3, [r3]
    a454:	4618      	mov	r0, r3
    a456:	4b0a      	ldr	r3, [pc, #40]	; (a480 <_tc_timer_deinit+0x64>)
    a458:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a45a:	68f8      	ldr	r0, [r7, #12]
    a45c:	4b09      	ldr	r3, [pc, #36]	; (a484 <_tc_timer_deinit+0x68>)
    a45e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    a460:	68f8      	ldr	r0, [r7, #12]
    a462:	4b09      	ldr	r3, [pc, #36]	; (a488 <_tc_timer_deinit+0x6c>)
    a464:	4798      	blx	r3
}
    a466:	bf00      	nop
    a468:	3710      	adds	r7, #16
    a46a:	46bd      	mov	sp, r7
    a46c:	bd80      	pop	{r7, pc}
    a46e:	bf00      	nop
    a470:	0000a7e1 	.word	0x0000a7e1
    a474:	00019ad0 	.word	0x00019ad0
    a478:	00005565 	.word	0x00005565
    a47c:	200000e4 	.word	0x200000e4
    a480:	00009b21 	.word	0x00009b21
    a484:	00009d15 	.word	0x00009d15
    a488:	00009c8d 	.word	0x00009c8d

0000a48c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    a48c:	b580      	push	{r7, lr}
    a48e:	b082      	sub	sp, #8
    a490:	af00      	add	r7, sp, #0
    a492:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	68db      	ldr	r3, [r3, #12]
    a498:	4618      	mov	r0, r3
    a49a:	4b03      	ldr	r3, [pc, #12]	; (a4a8 <_tc_timer_start+0x1c>)
    a49c:	4798      	blx	r3
}
    a49e:	bf00      	nop
    a4a0:	3708      	adds	r7, #8
    a4a2:	46bd      	mov	sp, r7
    a4a4:	bd80      	pop	{r7, pc}
    a4a6:	bf00      	nop
    a4a8:	00009cb5 	.word	0x00009cb5

0000a4ac <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    a4ac:	b580      	push	{r7, lr}
    a4ae:	b082      	sub	sp, #8
    a4b0:	af00      	add	r7, sp, #0
    a4b2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	691b      	ldr	r3, [r3, #16]
    a4b8:	4618      	mov	r0, r3
    a4ba:	4b03      	ldr	r3, [pc, #12]	; (a4c8 <_pwm_enable+0x1c>)
    a4bc:	4798      	blx	r3
}
    a4be:	bf00      	nop
    a4c0:	3708      	adds	r7, #8
    a4c2:	46bd      	mov	sp, r7
    a4c4:	bd80      	pop	{r7, pc}
    a4c6:	bf00      	nop
    a4c8:	00009cb5 	.word	0x00009cb5

0000a4cc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    a4cc:	b580      	push	{r7, lr}
    a4ce:	b082      	sub	sp, #8
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	68db      	ldr	r3, [r3, #12]
    a4d8:	4618      	mov	r0, r3
    a4da:	4b03      	ldr	r3, [pc, #12]	; (a4e8 <_tc_timer_stop+0x1c>)
    a4dc:	4798      	blx	r3
}
    a4de:	bf00      	nop
    a4e0:	3708      	adds	r7, #8
    a4e2:	46bd      	mov	sp, r7
    a4e4:	bd80      	pop	{r7, pc}
    a4e6:	bf00      	nop
    a4e8:	00009d15 	.word	0x00009d15

0000a4ec <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	b084      	sub	sp, #16
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    a4f6:	687b      	ldr	r3, [r7, #4]
    a4f8:	68db      	ldr	r3, [r3, #12]
    a4fa:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a4fc:	68f8      	ldr	r0, [r7, #12]
    a4fe:	4b14      	ldr	r3, [pc, #80]	; (a550 <_tc_timer_set_period+0x64>)
    a500:	4798      	blx	r3
    a502:	4603      	mov	r3, r0
    a504:	2b02      	cmp	r3, #2
    a506:	d105      	bne.n	a514 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    a508:	683a      	ldr	r2, [r7, #0]
    a50a:	2100      	movs	r1, #0
    a50c:	68f8      	ldr	r0, [r7, #12]
    a50e:	4b11      	ldr	r3, [pc, #68]	; (a554 <_tc_timer_set_period+0x68>)
    a510:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    a512:	e019      	b.n	a548 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a514:	68f8      	ldr	r0, [r7, #12]
    a516:	4b0e      	ldr	r3, [pc, #56]	; (a550 <_tc_timer_set_period+0x64>)
    a518:	4798      	blx	r3
    a51a:	4603      	mov	r3, r0
    a51c:	2b00      	cmp	r3, #0
    a51e:	d107      	bne.n	a530 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    a520:	683b      	ldr	r3, [r7, #0]
    a522:	b29b      	uxth	r3, r3
    a524:	461a      	mov	r2, r3
    a526:	2100      	movs	r1, #0
    a528:	68f8      	ldr	r0, [r7, #12]
    a52a:	4b0b      	ldr	r3, [pc, #44]	; (a558 <_tc_timer_set_period+0x6c>)
    a52c:	4798      	blx	r3
}
    a52e:	e00b      	b.n	a548 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a530:	68f8      	ldr	r0, [r7, #12]
    a532:	4b07      	ldr	r3, [pc, #28]	; (a550 <_tc_timer_set_period+0x64>)
    a534:	4798      	blx	r3
    a536:	4603      	mov	r3, r0
    a538:	2b01      	cmp	r3, #1
    a53a:	d105      	bne.n	a548 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    a53c:	683b      	ldr	r3, [r7, #0]
    a53e:	b2db      	uxtb	r3, r3
    a540:	4619      	mov	r1, r3
    a542:	68f8      	ldr	r0, [r7, #12]
    a544:	4b05      	ldr	r3, [pc, #20]	; (a55c <_tc_timer_set_period+0x70>)
    a546:	4798      	blx	r3
}
    a548:	bf00      	nop
    a54a:	3710      	adds	r7, #16
    a54c:	46bd      	mov	sp, r7
    a54e:	bd80      	pop	{r7, pc}
    a550:	00009d3d 	.word	0x00009d3d
    a554:	00009ef5 	.word	0x00009ef5
    a558:	00009e91 	.word	0x00009e91
    a55c:	00009e15 	.word	0x00009e15

0000a560 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    a560:	b580      	push	{r7, lr}
    a562:	b084      	sub	sp, #16
    a564:	af00      	add	r7, sp, #0
    a566:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a568:	687b      	ldr	r3, [r7, #4]
    a56a:	68db      	ldr	r3, [r3, #12]
    a56c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a56e:	68f8      	ldr	r0, [r7, #12]
    a570:	4b13      	ldr	r3, [pc, #76]	; (a5c0 <_tc_timer_get_period+0x60>)
    a572:	4798      	blx	r3
    a574:	4603      	mov	r3, r0
    a576:	2b02      	cmp	r3, #2
    a578:	d105      	bne.n	a586 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    a57a:	2100      	movs	r1, #0
    a57c:	68f8      	ldr	r0, [r7, #12]
    a57e:	4b11      	ldr	r3, [pc, #68]	; (a5c4 <_tc_timer_get_period+0x64>)
    a580:	4798      	blx	r3
    a582:	4603      	mov	r3, r0
    a584:	e017      	b.n	a5b6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a586:	68f8      	ldr	r0, [r7, #12]
    a588:	4b0d      	ldr	r3, [pc, #52]	; (a5c0 <_tc_timer_get_period+0x60>)
    a58a:	4798      	blx	r3
    a58c:	4603      	mov	r3, r0
    a58e:	2b00      	cmp	r3, #0
    a590:	d105      	bne.n	a59e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    a592:	2100      	movs	r1, #0
    a594:	68f8      	ldr	r0, [r7, #12]
    a596:	4b0c      	ldr	r3, [pc, #48]	; (a5c8 <_tc_timer_get_period+0x68>)
    a598:	4798      	blx	r3
    a59a:	4603      	mov	r3, r0
    a59c:	e00b      	b.n	a5b6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a59e:	68f8      	ldr	r0, [r7, #12]
    a5a0:	4b07      	ldr	r3, [pc, #28]	; (a5c0 <_tc_timer_get_period+0x60>)
    a5a2:	4798      	blx	r3
    a5a4:	4603      	mov	r3, r0
    a5a6:	2b01      	cmp	r3, #1
    a5a8:	d104      	bne.n	a5b4 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    a5aa:	68f8      	ldr	r0, [r7, #12]
    a5ac:	4b07      	ldr	r3, [pc, #28]	; (a5cc <_tc_timer_get_period+0x6c>)
    a5ae:	4798      	blx	r3
    a5b0:	4603      	mov	r3, r0
    a5b2:	e000      	b.n	a5b6 <_tc_timer_get_period+0x56>
	}

	return 0;
    a5b4:	2300      	movs	r3, #0
}
    a5b6:	4618      	mov	r0, r3
    a5b8:	3710      	adds	r7, #16
    a5ba:	46bd      	mov	sp, r7
    a5bc:	bd80      	pop	{r7, pc}
    a5be:	bf00      	nop
    a5c0:	00009d3d 	.word	0x00009d3d
    a5c4:	00009f25 	.word	0x00009f25
    a5c8:	00009ec5 	.word	0x00009ec5
    a5cc:	00009e3d 	.word	0x00009e3d

0000a5d0 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b082      	sub	sp, #8
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a5d8:	687b      	ldr	r3, [r7, #4]
    a5da:	68db      	ldr	r3, [r3, #12]
    a5dc:	4618      	mov	r0, r3
    a5de:	4b03      	ldr	r3, [pc, #12]	; (a5ec <_tc_timer_is_started+0x1c>)
    a5e0:	4798      	blx	r3
    a5e2:	4603      	mov	r3, r0
}
    a5e4:	4618      	mov	r0, r3
    a5e6:	3708      	adds	r7, #8
    a5e8:	46bd      	mov	sp, r7
    a5ea:	bd80      	pop	{r7, pc}
    a5ec:	00009cdd 	.word	0x00009cdd

0000a5f0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    a5f0:	b580      	push	{r7, lr}
    a5f2:	b082      	sub	sp, #8
    a5f4:	af00      	add	r7, sp, #0
    a5f6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	691b      	ldr	r3, [r3, #16]
    a5fc:	4618      	mov	r0, r3
    a5fe:	4b03      	ldr	r3, [pc, #12]	; (a60c <_pwm_is_enabled+0x1c>)
    a600:	4798      	blx	r3
    a602:	4603      	mov	r3, r0
}
    a604:	4618      	mov	r0, r3
    a606:	3708      	adds	r7, #8
    a608:	46bd      	mov	sp, r7
    a60a:	bd80      	pop	{r7, pc}
    a60c:	00009cdd 	.word	0x00009cdd

0000a610 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    a610:	b480      	push	{r7}
    a612:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    a614:	4b02      	ldr	r3, [pc, #8]	; (a620 <_tc_get_timer+0x10>)
}
    a616:	4618      	mov	r0, r3
    a618:	46bd      	mov	sp, r7
    a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a61e:	4770      	bx	lr
    a620:	2000015c 	.word	0x2000015c

0000a624 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    a624:	b480      	push	{r7}
    a626:	af00      	add	r7, sp, #0
	return NULL;
    a628:	2300      	movs	r3, #0
}
    a62a:	4618      	mov	r0, r3
    a62c:	46bd      	mov	sp, r7
    a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a632:	4770      	bx	lr

0000a634 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    a634:	b580      	push	{r7, lr}
    a636:	b084      	sub	sp, #16
    a638:	af00      	add	r7, sp, #0
    a63a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	68db      	ldr	r3, [r3, #12]
    a640:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a642:	68f8      	ldr	r0, [r7, #12]
    a644:	4b0e      	ldr	r3, [pc, #56]	; (a680 <_tc_timer_set_irq+0x4c>)
    a646:	4798      	blx	r3
    a648:	4603      	mov	r3, r0
    a64a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a64c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    a650:	490c      	ldr	r1, [pc, #48]	; (a684 <_tc_timer_set_irq+0x50>)
    a652:	2001      	movs	r0, #1
    a654:	4b0c      	ldr	r3, [pc, #48]	; (a688 <_tc_timer_set_irq+0x54>)
    a656:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    a658:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a65c:	490b      	ldr	r1, [pc, #44]	; (a68c <_tc_timer_set_irq+0x58>)
    a65e:	4613      	mov	r3, r2
    a660:	009b      	lsls	r3, r3, #2
    a662:	4413      	add	r3, r2
    a664:	009b      	lsls	r3, r3, #2
    a666:	440b      	add	r3, r1
    a668:	3302      	adds	r3, #2
    a66a:	f9b3 3000 	ldrsh.w	r3, [r3]
    a66e:	b2db      	uxtb	r3, r3
    a670:	4618      	mov	r0, r3
    a672:	4b07      	ldr	r3, [pc, #28]	; (a690 <_tc_timer_set_irq+0x5c>)
    a674:	4798      	blx	r3
}
    a676:	bf00      	nop
    a678:	3710      	adds	r7, #16
    a67a:	46bd      	mov	sp, r7
    a67c:	bd80      	pop	{r7, pc}
    a67e:	bf00      	nop
    a680:	0000a7e1 	.word	0x0000a7e1
    a684:	00019ad0 	.word	0x00019ad0
    a688:	00005565 	.word	0x00005565
    a68c:	200000e4 	.word	0x200000e4
    a690:	00005db1 	.word	0x00005db1

0000a694 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    a694:	b580      	push	{r7, lr}
    a696:	b084      	sub	sp, #16
    a698:	af00      	add	r7, sp, #0
    a69a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a69c:	687b      	ldr	r3, [r7, #4]
    a69e:	68db      	ldr	r3, [r3, #12]
    a6a0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a6a2:	68f8      	ldr	r0, [r7, #12]
    a6a4:	4b07      	ldr	r3, [pc, #28]	; (a6c4 <tc_interrupt_handler+0x30>)
    a6a6:	4798      	blx	r3
    a6a8:	4603      	mov	r3, r0
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d006      	beq.n	a6bc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a6ae:	68f8      	ldr	r0, [r7, #12]
    a6b0:	4b05      	ldr	r3, [pc, #20]	; (a6c8 <tc_interrupt_handler+0x34>)
    a6b2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	681b      	ldr	r3, [r3, #0]
    a6b8:	6878      	ldr	r0, [r7, #4]
    a6ba:	4798      	blx	r3
	}
}
    a6bc:	bf00      	nop
    a6be:	3710      	adds	r7, #16
    a6c0:	46bd      	mov	sp, r7
    a6c2:	bd80      	pop	{r7, pc}
    a6c4:	00009bed 	.word	0x00009bed
    a6c8:	00009c15 	.word	0x00009c15

0000a6cc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b084      	sub	sp, #16
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	691b      	ldr	r3, [r3, #16]
    a6d8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a6da:	68f8      	ldr	r0, [r7, #12]
    a6dc:	4b12      	ldr	r3, [pc, #72]	; (a728 <tc_pwm_interrupt_handler+0x5c>)
    a6de:	4798      	blx	r3
    a6e0:	4603      	mov	r3, r0
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d00a      	beq.n	a6fc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a6e6:	68f8      	ldr	r0, [r7, #12]
    a6e8:	4b10      	ldr	r3, [pc, #64]	; (a72c <tc_pwm_interrupt_handler+0x60>)
    a6ea:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d003      	beq.n	a6fc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	681b      	ldr	r3, [r3, #0]
    a6f8:	6878      	ldr	r0, [r7, #4]
    a6fa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    a6fc:	68f8      	ldr	r0, [r7, #12]
    a6fe:	4b0c      	ldr	r3, [pc, #48]	; (a730 <tc_pwm_interrupt_handler+0x64>)
    a700:	4798      	blx	r3
    a702:	4603      	mov	r3, r0
    a704:	2b00      	cmp	r3, #0
    a706:	d00a      	beq.n	a71e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    a708:	68f8      	ldr	r0, [r7, #12]
    a70a:	4b0a      	ldr	r3, [pc, #40]	; (a734 <tc_pwm_interrupt_handler+0x68>)
    a70c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	685b      	ldr	r3, [r3, #4]
    a712:	2b00      	cmp	r3, #0
    a714:	d003      	beq.n	a71e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    a716:	687b      	ldr	r3, [r7, #4]
    a718:	685b      	ldr	r3, [r3, #4]
    a71a:	6878      	ldr	r0, [r7, #4]
    a71c:	4798      	blx	r3
		}
	}
}
    a71e:	bf00      	nop
    a720:	3710      	adds	r7, #16
    a722:	46bd      	mov	sp, r7
    a724:	bd80      	pop	{r7, pc}
    a726:	bf00      	nop
    a728:	00009bed 	.word	0x00009bed
    a72c:	00009c15 	.word	0x00009c15
    a730:	00009c63 	.word	0x00009c63
    a734:	00009c2f 	.word	0x00009c2f

0000a738 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    a738:	b580      	push	{r7, lr}
    a73a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    a73c:	4b03      	ldr	r3, [pc, #12]	; (a74c <TC0_Handler+0x14>)
    a73e:	681b      	ldr	r3, [r3, #0]
    a740:	4618      	mov	r0, r3
    a742:	4b03      	ldr	r3, [pc, #12]	; (a750 <TC0_Handler+0x18>)
    a744:	4798      	blx	r3
}
    a746:	bf00      	nop
    a748:	bd80      	pop	{r7, pc}
    a74a:	bf00      	nop
    a74c:	20001048 	.word	0x20001048
    a750:	0000a695 	.word	0x0000a695

0000a754 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    a754:	b580      	push	{r7, lr}
    a756:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    a758:	4b03      	ldr	r3, [pc, #12]	; (a768 <TC2_Handler+0x14>)
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	4618      	mov	r0, r3
    a75e:	4b03      	ldr	r3, [pc, #12]	; (a76c <TC2_Handler+0x18>)
    a760:	4798      	blx	r3
}
    a762:	bf00      	nop
    a764:	bd80      	pop	{r7, pc}
    a766:	bf00      	nop
    a768:	2000104c 	.word	0x2000104c
    a76c:	0000a695 	.word	0x0000a695

0000a770 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a770:	b580      	push	{r7, lr}
    a772:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a774:	4b03      	ldr	r3, [pc, #12]	; (a784 <TC4_Handler+0x14>)
    a776:	681b      	ldr	r3, [r3, #0]
    a778:	4618      	mov	r0, r3
    a77a:	4b03      	ldr	r3, [pc, #12]	; (a788 <TC4_Handler+0x18>)
    a77c:	4798      	blx	r3
}
    a77e:	bf00      	nop
    a780:	bd80      	pop	{r7, pc}
    a782:	bf00      	nop
    a784:	20001050 	.word	0x20001050
    a788:	0000a695 	.word	0x0000a695

0000a78c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a78c:	b580      	push	{r7, lr}
    a78e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a790:	4b03      	ldr	r3, [pc, #12]	; (a7a0 <TC5_Handler+0x14>)
    a792:	681b      	ldr	r3, [r3, #0]
    a794:	4618      	mov	r0, r3
    a796:	4b03      	ldr	r3, [pc, #12]	; (a7a4 <TC5_Handler+0x18>)
    a798:	4798      	blx	r3
}
    a79a:	bf00      	nop
    a79c:	bd80      	pop	{r7, pc}
    a79e:	bf00      	nop
    a7a0:	20001054 	.word	0x20001054
    a7a4:	0000a695 	.word	0x0000a695

0000a7a8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a7a8:	b580      	push	{r7, lr}
    a7aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a7ac:	4b03      	ldr	r3, [pc, #12]	; (a7bc <TC6_Handler+0x14>)
    a7ae:	681b      	ldr	r3, [r3, #0]
    a7b0:	4618      	mov	r0, r3
    a7b2:	4b03      	ldr	r3, [pc, #12]	; (a7c0 <TC6_Handler+0x18>)
    a7b4:	4798      	blx	r3
}
    a7b6:	bf00      	nop
    a7b8:	bd80      	pop	{r7, pc}
    a7ba:	bf00      	nop
    a7bc:	20001058 	.word	0x20001058
    a7c0:	0000a695 	.word	0x0000a695

0000a7c4 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a7c4:	b580      	push	{r7, lr}
    a7c6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a7c8:	4b03      	ldr	r3, [pc, #12]	; (a7d8 <TC7_Handler+0x14>)
    a7ca:	681b      	ldr	r3, [r3, #0]
    a7cc:	4618      	mov	r0, r3
    a7ce:	4b03      	ldr	r3, [pc, #12]	; (a7dc <TC7_Handler+0x18>)
    a7d0:	4798      	blx	r3
}
    a7d2:	bf00      	nop
    a7d4:	bd80      	pop	{r7, pc}
    a7d6:	bf00      	nop
    a7d8:	2000105c 	.word	0x2000105c
    a7dc:	0000a6cd 	.word	0x0000a6cd

0000a7e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a7e0:	b580      	push	{r7, lr}
    a7e2:	b084      	sub	sp, #16
    a7e4:	af00      	add	r7, sp, #0
    a7e6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a7e8:	6878      	ldr	r0, [r7, #4]
    a7ea:	4b13      	ldr	r3, [pc, #76]	; (a838 <get_tc_index+0x58>)
    a7ec:	4798      	blx	r3
    a7ee:	4603      	mov	r3, r0
    a7f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a7f2:	2300      	movs	r3, #0
    a7f4:	73fb      	strb	r3, [r7, #15]
    a7f6:	e010      	b.n	a81a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a7f8:	7bfa      	ldrb	r2, [r7, #15]
    a7fa:	4910      	ldr	r1, [pc, #64]	; (a83c <get_tc_index+0x5c>)
    a7fc:	4613      	mov	r3, r2
    a7fe:	009b      	lsls	r3, r3, #2
    a800:	4413      	add	r3, r2
    a802:	009b      	lsls	r3, r3, #2
    a804:	440b      	add	r3, r1
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	7bba      	ldrb	r2, [r7, #14]
    a80a:	429a      	cmp	r2, r3
    a80c:	d102      	bne.n	a814 <get_tc_index+0x34>
			return i;
    a80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a812:	e00d      	b.n	a830 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a814:	7bfb      	ldrb	r3, [r7, #15]
    a816:	3301      	adds	r3, #1
    a818:	73fb      	strb	r3, [r7, #15]
    a81a:	7bfb      	ldrb	r3, [r7, #15]
    a81c:	2b05      	cmp	r3, #5
    a81e:	d9eb      	bls.n	a7f8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a820:	f240 221d 	movw	r2, #541	; 0x21d
    a824:	4906      	ldr	r1, [pc, #24]	; (a840 <get_tc_index+0x60>)
    a826:	2000      	movs	r0, #0
    a828:	4b06      	ldr	r3, [pc, #24]	; (a844 <get_tc_index+0x64>)
    a82a:	4798      	blx	r3
	return -1;
    a82c:	f04f 33ff 	mov.w	r3, #4294967295
}
    a830:	4618      	mov	r0, r3
    a832:	3710      	adds	r7, #16
    a834:	46bd      	mov	sp, r7
    a836:	bd80      	pop	{r7, pc}
    a838:	0000a8e5 	.word	0x0000a8e5
    a83c:	200000e4 	.word	0x200000e4
    a840:	00019ad0 	.word	0x00019ad0
    a844:	00005565 	.word	0x00005565

0000a848 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a848:	b480      	push	{r7}
    a84a:	b083      	sub	sp, #12
    a84c:	af00      	add	r7, sp, #0
    a84e:	6078      	str	r0, [r7, #4]
    a850:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a852:	687b      	ldr	r3, [r7, #4]
    a854:	4a17      	ldr	r2, [pc, #92]	; (a8b4 <_tc_init_irq_param+0x6c>)
    a856:	4293      	cmp	r3, r2
    a858:	d102      	bne.n	a860 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a85a:	4a17      	ldr	r2, [pc, #92]	; (a8b8 <_tc_init_irq_param+0x70>)
    a85c:	683b      	ldr	r3, [r7, #0]
    a85e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	4a16      	ldr	r2, [pc, #88]	; (a8bc <_tc_init_irq_param+0x74>)
    a864:	4293      	cmp	r3, r2
    a866:	d102      	bne.n	a86e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a868:	4a15      	ldr	r2, [pc, #84]	; (a8c0 <_tc_init_irq_param+0x78>)
    a86a:	683b      	ldr	r3, [r7, #0]
    a86c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a86e:	687b      	ldr	r3, [r7, #4]
    a870:	4a14      	ldr	r2, [pc, #80]	; (a8c4 <_tc_init_irq_param+0x7c>)
    a872:	4293      	cmp	r3, r2
    a874:	d102      	bne.n	a87c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a876:	4a14      	ldr	r2, [pc, #80]	; (a8c8 <_tc_init_irq_param+0x80>)
    a878:	683b      	ldr	r3, [r7, #0]
    a87a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	4a13      	ldr	r2, [pc, #76]	; (a8cc <_tc_init_irq_param+0x84>)
    a880:	4293      	cmp	r3, r2
    a882:	d102      	bne.n	a88a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a884:	4a12      	ldr	r2, [pc, #72]	; (a8d0 <_tc_init_irq_param+0x88>)
    a886:	683b      	ldr	r3, [r7, #0]
    a888:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a88a:	687b      	ldr	r3, [r7, #4]
    a88c:	4a11      	ldr	r2, [pc, #68]	; (a8d4 <_tc_init_irq_param+0x8c>)
    a88e:	4293      	cmp	r3, r2
    a890:	d102      	bne.n	a898 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a892:	4a11      	ldr	r2, [pc, #68]	; (a8d8 <_tc_init_irq_param+0x90>)
    a894:	683b      	ldr	r3, [r7, #0]
    a896:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	4a10      	ldr	r2, [pc, #64]	; (a8dc <_tc_init_irq_param+0x94>)
    a89c:	4293      	cmp	r3, r2
    a89e:	d102      	bne.n	a8a6 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a8a0:	4a0f      	ldr	r2, [pc, #60]	; (a8e0 <_tc_init_irq_param+0x98>)
    a8a2:	683b      	ldr	r3, [r7, #0]
    a8a4:	6013      	str	r3, [r2, #0]
	}
}
    a8a6:	bf00      	nop
    a8a8:	370c      	adds	r7, #12
    a8aa:	46bd      	mov	sp, r7
    a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8b0:	4770      	bx	lr
    a8b2:	bf00      	nop
    a8b4:	40003800 	.word	0x40003800
    a8b8:	20001048 	.word	0x20001048
    a8bc:	4101a000 	.word	0x4101a000
    a8c0:	2000104c 	.word	0x2000104c
    a8c4:	42001400 	.word	0x42001400
    a8c8:	20001050 	.word	0x20001050
    a8cc:	42001800 	.word	0x42001800
    a8d0:	20001054 	.word	0x20001054
    a8d4:	43001400 	.word	0x43001400
    a8d8:	20001058 	.word	0x20001058
    a8dc:	43001800 	.word	0x43001800
    a8e0:	2000105c 	.word	0x2000105c

0000a8e4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a8e4:	b4b0      	push	{r4, r5, r7}
    a8e6:	b08d      	sub	sp, #52	; 0x34
    a8e8:	af00      	add	r7, sp, #0
    a8ea:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a8ec:	4b13      	ldr	r3, [pc, #76]	; (a93c <_get_hardware_offset+0x58>)
    a8ee:	f107 040c 	add.w	r4, r7, #12
    a8f2:	461d      	mov	r5, r3
    a8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a8f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a8fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a900:	2300      	movs	r3, #0
    a902:	62fb      	str	r3, [r7, #44]	; 0x2c
    a904:	e010      	b.n	a928 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a908:	009b      	lsls	r3, r3, #2
    a90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a90e:	4413      	add	r3, r2
    a910:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a914:	461a      	mov	r2, r3
    a916:	687b      	ldr	r3, [r7, #4]
    a918:	429a      	cmp	r2, r3
    a91a:	d102      	bne.n	a922 <_get_hardware_offset+0x3e>
			return i;
    a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a91e:	b2db      	uxtb	r3, r3
    a920:	e006      	b.n	a930 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a924:	3301      	adds	r3, #1
    a926:	62fb      	str	r3, [r7, #44]	; 0x2c
    a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a92a:	2b07      	cmp	r3, #7
    a92c:	d9eb      	bls.n	a906 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a92e:	2300      	movs	r3, #0
}
    a930:	4618      	mov	r0, r3
    a932:	3734      	adds	r7, #52	; 0x34
    a934:	46bd      	mov	sp, r7
    a936:	bcb0      	pop	{r4, r5, r7}
    a938:	4770      	bx	lr
    a93a:	bf00      	nop
    a93c:	00019ae4 	.word	0x00019ae4

0000a940 <__NVIC_EnableIRQ>:
{
    a940:	b480      	push	{r7}
    a942:	b083      	sub	sp, #12
    a944:	af00      	add	r7, sp, #0
    a946:	4603      	mov	r3, r0
    a948:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a94a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a94e:	2b00      	cmp	r3, #0
    a950:	db0b      	blt.n	a96a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a952:	4909      	ldr	r1, [pc, #36]	; (a978 <__NVIC_EnableIRQ+0x38>)
    a954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a958:	095b      	lsrs	r3, r3, #5
    a95a:	88fa      	ldrh	r2, [r7, #6]
    a95c:	f002 021f 	and.w	r2, r2, #31
    a960:	2001      	movs	r0, #1
    a962:	fa00 f202 	lsl.w	r2, r0, r2
    a966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a96a:	bf00      	nop
    a96c:	370c      	adds	r7, #12
    a96e:	46bd      	mov	sp, r7
    a970:	f85d 7b04 	ldr.w	r7, [sp], #4
    a974:	4770      	bx	lr
    a976:	bf00      	nop
    a978:	e000e100 	.word	0xe000e100

0000a97c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a97c:	b480      	push	{r7}
    a97e:	b087      	sub	sp, #28
    a980:	af00      	add	r7, sp, #0
    a982:	60f8      	str	r0, [r7, #12]
    a984:	460b      	mov	r3, r1
    a986:	607a      	str	r2, [r7, #4]
    a988:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a98a:	7afa      	ldrb	r2, [r7, #11]
    a98c:	68f9      	ldr	r1, [r7, #12]
    a98e:	4613      	mov	r3, r2
    a990:	009b      	lsls	r3, r3, #2
    a992:	4413      	add	r3, r2
    a994:	009b      	lsls	r3, r3, #2
    a996:	440b      	add	r3, r1
    a998:	3340      	adds	r3, #64	; 0x40
    a99a:	681b      	ldr	r3, [r3, #0]
    a99c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a99e:	697a      	ldr	r2, [r7, #20]
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	4013      	ands	r3, r2
    a9a4:	617b      	str	r3, [r7, #20]
	return tmp;
    a9a6:	697b      	ldr	r3, [r7, #20]
}
    a9a8:	4618      	mov	r0, r3
    a9aa:	371c      	adds	r7, #28
    a9ac:	46bd      	mov	sp, r7
    a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9b2:	4770      	bx	lr

0000a9b4 <hri_oscctrl_get_STATUS_reg>:
{
    a9b4:	b480      	push	{r7}
    a9b6:	b085      	sub	sp, #20
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
    a9bc:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a9be:	687b      	ldr	r3, [r7, #4]
    a9c0:	691b      	ldr	r3, [r3, #16]
    a9c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a9c4:	68fa      	ldr	r2, [r7, #12]
    a9c6:	683b      	ldr	r3, [r7, #0]
    a9c8:	4013      	ands	r3, r2
    a9ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    a9cc:	68fb      	ldr	r3, [r7, #12]
}
    a9ce:	4618      	mov	r0, r3
    a9d0:	3714      	adds	r7, #20
    a9d2:	46bd      	mov	sp, r7
    a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9d8:	4770      	bx	lr

0000a9da <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a9da:	b480      	push	{r7}
    a9dc:	b085      	sub	sp, #20
    a9de:	af00      	add	r7, sp, #0
    a9e0:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a9e2:	687b      	ldr	r3, [r7, #4]
    a9e4:	f893 3020 	ldrb.w	r3, [r3, #32]
    a9e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a9ea:	7bfb      	ldrb	r3, [r7, #15]
    a9ec:	f003 0301 	and.w	r3, r3, #1
    a9f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a9f2:	7bfb      	ldrb	r3, [r7, #15]
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	bf14      	ite	ne
    a9f8:	2301      	movne	r3, #1
    a9fa:	2300      	moveq	r3, #0
    a9fc:	b2db      	uxtb	r3, r3
}
    a9fe:	4618      	mov	r0, r3
    aa00:	3714      	adds	r7, #20
    aa02:	46bd      	mov	sp, r7
    aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa08:	4770      	bx	lr

0000aa0a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    aa0a:	b480      	push	{r7}
    aa0c:	b083      	sub	sp, #12
    aa0e:	af00      	add	r7, sp, #0
    aa10:	6078      	str	r0, [r7, #4]
    aa12:	460b      	mov	r3, r1
    aa14:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    aa16:	bf00      	nop
    aa18:	687b      	ldr	r3, [r7, #4]
    aa1a:	789b      	ldrb	r3, [r3, #2]
    aa1c:	b2da      	uxtb	r2, r3
    aa1e:	78fb      	ldrb	r3, [r7, #3]
    aa20:	4013      	ands	r3, r2
    aa22:	b2db      	uxtb	r3, r3
    aa24:	2b00      	cmp	r3, #0
    aa26:	d1f7      	bne.n	aa18 <hri_usb_wait_for_sync+0xe>
	};
}
    aa28:	bf00      	nop
    aa2a:	370c      	adds	r7, #12
    aa2c:	46bd      	mov	sp, r7
    aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa32:	4770      	bx	lr

0000aa34 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    aa34:	b480      	push	{r7}
    aa36:	b083      	sub	sp, #12
    aa38:	af00      	add	r7, sp, #0
    aa3a:	6078      	str	r0, [r7, #4]
    aa3c:	460b      	mov	r3, r1
    aa3e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    aa40:	687b      	ldr	r3, [r7, #4]
    aa42:	789b      	ldrb	r3, [r3, #2]
    aa44:	b2da      	uxtb	r2, r3
    aa46:	78fb      	ldrb	r3, [r7, #3]
    aa48:	4013      	ands	r3, r2
    aa4a:	b2db      	uxtb	r3, r3
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	bf14      	ite	ne
    aa50:	2301      	movne	r3, #1
    aa52:	2300      	moveq	r3, #0
    aa54:	b2db      	uxtb	r3, r3
}
    aa56:	4618      	mov	r0, r3
    aa58:	370c      	adds	r7, #12
    aa5a:	46bd      	mov	sp, r7
    aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa60:	4770      	bx	lr

0000aa62 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    aa62:	b480      	push	{r7}
    aa64:	b085      	sub	sp, #20
    aa66:	af00      	add	r7, sp, #0
    aa68:	6078      	str	r0, [r7, #4]
    aa6a:	460b      	mov	r3, r1
    aa6c:	70fb      	strb	r3, [r7, #3]
    aa6e:	4613      	mov	r3, r2
    aa70:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    aa72:	78fb      	ldrb	r3, [r7, #3]
    aa74:	687a      	ldr	r2, [r7, #4]
    aa76:	3308      	adds	r3, #8
    aa78:	015b      	lsls	r3, r3, #5
    aa7a:	4413      	add	r3, r2
    aa7c:	3307      	adds	r3, #7
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    aa82:	7bfa      	ldrb	r2, [r7, #15]
    aa84:	78bb      	ldrb	r3, [r7, #2]
    aa86:	4013      	ands	r3, r2
    aa88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
    aa8c:	4618      	mov	r0, r3
    aa8e:	3714      	adds	r7, #20
    aa90:	46bd      	mov	sp, r7
    aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa96:	4770      	bx	lr

0000aa98 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    aa98:	b480      	push	{r7}
    aa9a:	b083      	sub	sp, #12
    aa9c:	af00      	add	r7, sp, #0
    aa9e:	6078      	str	r0, [r7, #4]
    aaa0:	460b      	mov	r3, r1
    aaa2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    aaa4:	78fb      	ldrb	r3, [r7, #3]
    aaa6:	687a      	ldr	r2, [r7, #4]
    aaa8:	3308      	adds	r3, #8
    aaaa:	015b      	lsls	r3, r3, #5
    aaac:	4413      	add	r3, r2
    aaae:	3307      	adds	r3, #7
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	b2db      	uxtb	r3, r3
}
    aab4:	4618      	mov	r0, r3
    aab6:	370c      	adds	r7, #12
    aab8:	46bd      	mov	sp, r7
    aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
    aabe:	4770      	bx	lr

0000aac0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    aac0:	b480      	push	{r7}
    aac2:	b083      	sub	sp, #12
    aac4:	af00      	add	r7, sp, #0
    aac6:	6078      	str	r0, [r7, #4]
    aac8:	460b      	mov	r3, r1
    aaca:	70fb      	strb	r3, [r7, #3]
    aacc:	4613      	mov	r3, r2
    aace:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    aad0:	78fb      	ldrb	r3, [r7, #3]
    aad2:	687a      	ldr	r2, [r7, #4]
    aad4:	3308      	adds	r3, #8
    aad6:	015b      	lsls	r3, r3, #5
    aad8:	4413      	add	r3, r2
    aada:	3307      	adds	r3, #7
    aadc:	78ba      	ldrb	r2, [r7, #2]
    aade:	701a      	strb	r2, [r3, #0]
}
    aae0:	bf00      	nop
    aae2:	370c      	adds	r7, #12
    aae4:	46bd      	mov	sp, r7
    aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaea:	4770      	bx	lr

0000aaec <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    aaec:	b480      	push	{r7}
    aaee:	b083      	sub	sp, #12
    aaf0:	af00      	add	r7, sp, #0
    aaf2:	6078      	str	r0, [r7, #4]
    aaf4:	460b      	mov	r3, r1
    aaf6:	70fb      	strb	r3, [r7, #3]
    aaf8:	4613      	mov	r3, r2
    aafa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    aafc:	78fb      	ldrb	r3, [r7, #3]
    aafe:	687a      	ldr	r2, [r7, #4]
    ab00:	3308      	adds	r3, #8
    ab02:	015b      	lsls	r3, r3, #5
    ab04:	4413      	add	r3, r2
    ab06:	3305      	adds	r3, #5
    ab08:	78ba      	ldrb	r2, [r7, #2]
    ab0a:	701a      	strb	r2, [r3, #0]
}
    ab0c:	bf00      	nop
    ab0e:	370c      	adds	r7, #12
    ab10:	46bd      	mov	sp, r7
    ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab16:	4770      	bx	lr

0000ab18 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    ab18:	b480      	push	{r7}
    ab1a:	b083      	sub	sp, #12
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	460b      	mov	r3, r1
    ab22:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ab24:	78fb      	ldrb	r3, [r7, #3]
    ab26:	687a      	ldr	r2, [r7, #4]
    ab28:	3308      	adds	r3, #8
    ab2a:	015b      	lsls	r3, r3, #5
    ab2c:	4413      	add	r3, r2
    ab2e:	3306      	adds	r3, #6
    ab30:	781b      	ldrb	r3, [r3, #0]
    ab32:	b2db      	uxtb	r3, r3
}
    ab34:	4618      	mov	r0, r3
    ab36:	370c      	adds	r7, #12
    ab38:	46bd      	mov	sp, r7
    ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab3e:	4770      	bx	lr

0000ab40 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    ab40:	b480      	push	{r7}
    ab42:	b083      	sub	sp, #12
    ab44:	af00      	add	r7, sp, #0
    ab46:	6078      	str	r0, [r7, #4]
    ab48:	460b      	mov	r3, r1
    ab4a:	70fb      	strb	r3, [r7, #3]
    ab4c:	4613      	mov	r3, r2
    ab4e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ab50:	78fb      	ldrb	r3, [r7, #3]
    ab52:	687a      	ldr	r2, [r7, #4]
    ab54:	3308      	adds	r3, #8
    ab56:	015b      	lsls	r3, r3, #5
    ab58:	4413      	add	r3, r2
    ab5a:	3304      	adds	r3, #4
    ab5c:	78ba      	ldrb	r2, [r7, #2]
    ab5e:	701a      	strb	r2, [r3, #0]
}
    ab60:	bf00      	nop
    ab62:	370c      	adds	r7, #12
    ab64:	46bd      	mov	sp, r7
    ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab6a:	4770      	bx	lr

0000ab6c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    ab6c:	b480      	push	{r7}
    ab6e:	b083      	sub	sp, #12
    ab70:	af00      	add	r7, sp, #0
    ab72:	6078      	str	r0, [r7, #4]
    ab74:	460b      	mov	r3, r1
    ab76:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    ab78:	78fb      	ldrb	r3, [r7, #3]
    ab7a:	687a      	ldr	r2, [r7, #4]
    ab7c:	015b      	lsls	r3, r3, #5
    ab7e:	4413      	add	r3, r2
    ab80:	f503 7384 	add.w	r3, r3, #264	; 0x108
    ab84:	2210      	movs	r2, #16
    ab86:	701a      	strb	r2, [r3, #0]
}
    ab88:	bf00      	nop
    ab8a:	370c      	adds	r7, #12
    ab8c:	46bd      	mov	sp, r7
    ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab92:	4770      	bx	lr

0000ab94 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    ab94:	b480      	push	{r7}
    ab96:	b083      	sub	sp, #12
    ab98:	af00      	add	r7, sp, #0
    ab9a:	6078      	str	r0, [r7, #4]
    ab9c:	460b      	mov	r3, r1
    ab9e:	70fb      	strb	r3, [r7, #3]
    aba0:	4613      	mov	r3, r2
    aba2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    aba4:	78fb      	ldrb	r3, [r7, #3]
    aba6:	687a      	ldr	r2, [r7, #4]
    aba8:	015b      	lsls	r3, r3, #5
    abaa:	4413      	add	r3, r2
    abac:	f203 1309 	addw	r3, r3, #265	; 0x109
    abb0:	78ba      	ldrb	r2, [r7, #2]
    abb2:	701a      	strb	r2, [r3, #0]
}
    abb4:	bf00      	nop
    abb6:	370c      	adds	r7, #12
    abb8:	46bd      	mov	sp, r7
    abba:	f85d 7b04 	ldr.w	r7, [sp], #4
    abbe:	4770      	bx	lr

0000abc0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    abc0:	b480      	push	{r7}
    abc2:	b083      	sub	sp, #12
    abc4:	af00      	add	r7, sp, #0
    abc6:	6078      	str	r0, [r7, #4]
    abc8:	460b      	mov	r3, r1
    abca:	70fb      	strb	r3, [r7, #3]
    abcc:	4613      	mov	r3, r2
    abce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    abd0:	78fb      	ldrb	r3, [r7, #3]
    abd2:	687a      	ldr	r2, [r7, #4]
    abd4:	015b      	lsls	r3, r3, #5
    abd6:	4413      	add	r3, r2
    abd8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    abdc:	78ba      	ldrb	r2, [r7, #2]
    abde:	701a      	strb	r2, [r3, #0]
}
    abe0:	bf00      	nop
    abe2:	370c      	adds	r7, #12
    abe4:	46bd      	mov	sp, r7
    abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abea:	4770      	bx	lr

0000abec <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    abec:	b480      	push	{r7}
    abee:	b085      	sub	sp, #20
    abf0:	af00      	add	r7, sp, #0
    abf2:	6078      	str	r0, [r7, #4]
    abf4:	460b      	mov	r3, r1
    abf6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    abf8:	78fb      	ldrb	r3, [r7, #3]
    abfa:	687a      	ldr	r2, [r7, #4]
    abfc:	3308      	adds	r3, #8
    abfe:	015b      	lsls	r3, r3, #5
    ac00:	4413      	add	r3, r2
    ac02:	781b      	ldrb	r3, [r3, #0]
    ac04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    ac06:	7bfb      	ldrb	r3, [r7, #15]
    ac08:	f003 0307 	and.w	r3, r3, #7
    ac0c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
    ac10:	4618      	mov	r0, r3
    ac12:	3714      	adds	r7, #20
    ac14:	46bd      	mov	sp, r7
    ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac1a:	4770      	bx	lr

0000ac1c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ac1c:	b480      	push	{r7}
    ac1e:	b085      	sub	sp, #20
    ac20:	af00      	add	r7, sp, #0
    ac22:	6078      	str	r0, [r7, #4]
    ac24:	460b      	mov	r3, r1
    ac26:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ac28:	78fb      	ldrb	r3, [r7, #3]
    ac2a:	687a      	ldr	r2, [r7, #4]
    ac2c:	3308      	adds	r3, #8
    ac2e:	015b      	lsls	r3, r3, #5
    ac30:	4413      	add	r3, r2
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ac36:	7bfb      	ldrb	r3, [r7, #15]
    ac38:	091b      	lsrs	r3, r3, #4
    ac3a:	b2db      	uxtb	r3, r3
    ac3c:	f003 0307 	and.w	r3, r3, #7
    ac40:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ac42:	7bfb      	ldrb	r3, [r7, #15]
}
    ac44:	4618      	mov	r0, r3
    ac46:	3714      	adds	r7, #20
    ac48:	46bd      	mov	sp, r7
    ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac4e:	4770      	bx	lr

0000ac50 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ac50:	b480      	push	{r7}
    ac52:	b083      	sub	sp, #12
    ac54:	af00      	add	r7, sp, #0
    ac56:	6078      	str	r0, [r7, #4]
    ac58:	460b      	mov	r3, r1
    ac5a:	70fb      	strb	r3, [r7, #3]
    ac5c:	4613      	mov	r3, r2
    ac5e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ac60:	78fb      	ldrb	r3, [r7, #3]
    ac62:	687a      	ldr	r2, [r7, #4]
    ac64:	3308      	adds	r3, #8
    ac66:	015b      	lsls	r3, r3, #5
    ac68:	4413      	add	r3, r2
    ac6a:	78ba      	ldrb	r2, [r7, #2]
    ac6c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    ac6e:	bf00      	nop
    ac70:	370c      	adds	r7, #12
    ac72:	46bd      	mov	sp, r7
    ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac78:	4770      	bx	lr

0000ac7a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    ac7a:	b480      	push	{r7}
    ac7c:	b083      	sub	sp, #12
    ac7e:	af00      	add	r7, sp, #0
    ac80:	6078      	str	r0, [r7, #4]
    ac82:	460b      	mov	r3, r1
    ac84:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ac86:	78fb      	ldrb	r3, [r7, #3]
    ac88:	687a      	ldr	r2, [r7, #4]
    ac8a:	3308      	adds	r3, #8
    ac8c:	015b      	lsls	r3, r3, #5
    ac8e:	4413      	add	r3, r2
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	b2db      	uxtb	r3, r3
}
    ac94:	4618      	mov	r0, r3
    ac96:	370c      	adds	r7, #12
    ac98:	46bd      	mov	sp, r7
    ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac9e:	4770      	bx	lr

0000aca0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    aca0:	b480      	push	{r7}
    aca2:	b083      	sub	sp, #12
    aca4:	af00      	add	r7, sp, #0
    aca6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    aca8:	687b      	ldr	r3, [r7, #4]
    acaa:	8b9b      	ldrh	r3, [r3, #28]
    acac:	b29b      	uxth	r3, r3
}
    acae:	4618      	mov	r0, r3
    acb0:	370c      	adds	r7, #12
    acb2:	46bd      	mov	sp, r7
    acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    acb8:	4770      	bx	lr

0000acba <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    acba:	b480      	push	{r7}
    acbc:	b083      	sub	sp, #12
    acbe:	af00      	add	r7, sp, #0
    acc0:	6078      	str	r0, [r7, #4]
    acc2:	460b      	mov	r3, r1
    acc4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    acc6:	687b      	ldr	r3, [r7, #4]
    acc8:	887a      	ldrh	r2, [r7, #2]
    acca:	839a      	strh	r2, [r3, #28]
}
    accc:	bf00      	nop
    acce:	370c      	adds	r7, #12
    acd0:	46bd      	mov	sp, r7
    acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acd6:	4770      	bx	lr

0000acd8 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    acd8:	b480      	push	{r7}
    acda:	b083      	sub	sp, #12
    acdc:	af00      	add	r7, sp, #0
    acde:	6078      	str	r0, [r7, #4]
    ace0:	460b      	mov	r3, r1
    ace2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	887a      	ldrh	r2, [r7, #2]
    ace8:	831a      	strh	r2, [r3, #24]
}
    acea:	bf00      	nop
    acec:	370c      	adds	r7, #12
    acee:	46bd      	mov	sp, r7
    acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf4:	4770      	bx	lr

0000acf6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    acf6:	b480      	push	{r7}
    acf8:	b083      	sub	sp, #12
    acfa:	af00      	add	r7, sp, #0
    acfc:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	8b1b      	ldrh	r3, [r3, #24]
    ad02:	b29b      	uxth	r3, r3
}
    ad04:	4618      	mov	r0, r3
    ad06:	370c      	adds	r7, #12
    ad08:	46bd      	mov	sp, r7
    ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad0e:	4770      	bx	lr

0000ad10 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    ad10:	b480      	push	{r7}
    ad12:	b083      	sub	sp, #12
    ad14:	af00      	add	r7, sp, #0
    ad16:	6078      	str	r0, [r7, #4]
    ad18:	460b      	mov	r3, r1
    ad1a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    ad1c:	687b      	ldr	r3, [r7, #4]
    ad1e:	887a      	ldrh	r2, [r7, #2]
    ad20:	829a      	strh	r2, [r3, #20]
}
    ad22:	bf00      	nop
    ad24:	370c      	adds	r7, #12
    ad26:	46bd      	mov	sp, r7
    ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad2c:	4770      	bx	lr

0000ad2e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    ad2e:	b480      	push	{r7}
    ad30:	b085      	sub	sp, #20
    ad32:	af00      	add	r7, sp, #0
    ad34:	6078      	str	r0, [r7, #4]
    ad36:	460b      	mov	r3, r1
    ad38:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    ad3a:	687b      	ldr	r3, [r7, #4]
    ad3c:	789b      	ldrb	r3, [r3, #2]
    ad3e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ad40:	7bfa      	ldrb	r2, [r7, #15]
    ad42:	78fb      	ldrb	r3, [r7, #3]
    ad44:	4013      	ands	r3, r2
    ad46:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ad48:	7bfb      	ldrb	r3, [r7, #15]
}
    ad4a:	4618      	mov	r0, r3
    ad4c:	3714      	adds	r7, #20
    ad4e:	46bd      	mov	sp, r7
    ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad54:	4770      	bx	lr
	...

0000ad58 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ad58:	b580      	push	{r7, lr}
    ad5a:	b082      	sub	sp, #8
    ad5c:	af00      	add	r7, sp, #0
    ad5e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	781b      	ldrb	r3, [r3, #0]
    ad64:	b2db      	uxtb	r3, r3
    ad66:	f023 0302 	bic.w	r3, r3, #2
    ad6a:	b2da      	uxtb	r2, r3
    ad6c:	687b      	ldr	r3, [r7, #4]
    ad6e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    ad70:	2103      	movs	r1, #3
    ad72:	6878      	ldr	r0, [r7, #4]
    ad74:	4b02      	ldr	r3, [pc, #8]	; (ad80 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    ad76:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    ad78:	bf00      	nop
    ad7a:	3708      	adds	r7, #8
    ad7c:	46bd      	mov	sp, r7
    ad7e:	bd80      	pop	{r7, pc}
    ad80:	0000aa0b 	.word	0x0000aa0b

0000ad84 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    ad84:	b580      	push	{r7, lr}
    ad86:	b084      	sub	sp, #16
    ad88:	af00      	add	r7, sp, #0
    ad8a:	6078      	str	r0, [r7, #4]
    ad8c:	460b      	mov	r3, r1
    ad8e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ad90:	2103      	movs	r1, #3
    ad92:	6878      	ldr	r0, [r7, #4]
    ad94:	4b06      	ldr	r3, [pc, #24]	; (adb0 <hri_usb_get_CTRLA_reg+0x2c>)
    ad96:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    ad98:	687b      	ldr	r3, [r7, #4]
    ad9a:	781b      	ldrb	r3, [r3, #0]
    ad9c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ad9e:	7bfa      	ldrb	r2, [r7, #15]
    ada0:	78fb      	ldrb	r3, [r7, #3]
    ada2:	4013      	ands	r3, r2
    ada4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ada6:	7bfb      	ldrb	r3, [r7, #15]
}
    ada8:	4618      	mov	r0, r3
    adaa:	3710      	adds	r7, #16
    adac:	46bd      	mov	sp, r7
    adae:	bd80      	pop	{r7, pc}
    adb0:	0000aa0b 	.word	0x0000aa0b

0000adb4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    adb4:	b580      	push	{r7, lr}
    adb6:	b082      	sub	sp, #8
    adb8:	af00      	add	r7, sp, #0
    adba:	6078      	str	r0, [r7, #4]
    adbc:	460b      	mov	r3, r1
    adbe:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	78fa      	ldrb	r2, [r7, #3]
    adc4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    adc6:	2103      	movs	r1, #3
    adc8:	6878      	ldr	r0, [r7, #4]
    adca:	4b03      	ldr	r3, [pc, #12]	; (add8 <hri_usb_write_CTRLA_reg+0x24>)
    adcc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    adce:	bf00      	nop
    add0:	3708      	adds	r7, #8
    add2:	46bd      	mov	sp, r7
    add4:	bd80      	pop	{r7, pc}
    add6:	bf00      	nop
    add8:	0000aa0b 	.word	0x0000aa0b

0000addc <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    addc:	b580      	push	{r7, lr}
    adde:	b082      	sub	sp, #8
    ade0:	af00      	add	r7, sp, #0
    ade2:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ade4:	2103      	movs	r1, #3
    ade6:	6878      	ldr	r0, [r7, #4]
    ade8:	4b04      	ldr	r3, [pc, #16]	; (adfc <hri_usb_read_CTRLA_reg+0x20>)
    adea:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    adec:	687b      	ldr	r3, [r7, #4]
    adee:	781b      	ldrb	r3, [r3, #0]
    adf0:	b2db      	uxtb	r3, r3
}
    adf2:	4618      	mov	r0, r3
    adf4:	3708      	adds	r7, #8
    adf6:	46bd      	mov	sp, r7
    adf8:	bd80      	pop	{r7, pc}
    adfa:	bf00      	nop
    adfc:	0000aa0b 	.word	0x0000aa0b

0000ae00 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    ae00:	b480      	push	{r7}
    ae02:	b083      	sub	sp, #12
    ae04:	af00      	add	r7, sp, #0
    ae06:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	891b      	ldrh	r3, [r3, #8]
    ae0c:	b29b      	uxth	r3, r3
    ae0e:	f023 0301 	bic.w	r3, r3, #1
    ae12:	b29a      	uxth	r2, r3
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    ae18:	bf00      	nop
    ae1a:	370c      	adds	r7, #12
    ae1c:	46bd      	mov	sp, r7
    ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae22:	4770      	bx	lr

0000ae24 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    ae24:	b480      	push	{r7}
    ae26:	b083      	sub	sp, #12
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
    ae2c:	460b      	mov	r3, r1
    ae2e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    ae30:	687b      	ldr	r3, [r7, #4]
    ae32:	887a      	ldrh	r2, [r7, #2]
    ae34:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    ae36:	bf00      	nop
    ae38:	370c      	adds	r7, #12
    ae3a:	46bd      	mov	sp, r7
    ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae40:	4770      	bx	lr

0000ae42 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    ae42:	b480      	push	{r7}
    ae44:	b083      	sub	sp, #12
    ae46:	af00      	add	r7, sp, #0
    ae48:	6078      	str	r0, [r7, #4]
    ae4a:	460b      	mov	r3, r1
    ae4c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    ae4e:	687b      	ldr	r3, [r7, #4]
    ae50:	78fa      	ldrb	r2, [r7, #3]
    ae52:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    ae54:	bf00      	nop
    ae56:	370c      	adds	r7, #12
    ae58:	46bd      	mov	sp, r7
    ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae5e:	4770      	bx	lr

0000ae60 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    ae60:	b480      	push	{r7}
    ae62:	b083      	sub	sp, #12
    ae64:	af00      	add	r7, sp, #0
    ae66:	6078      	str	r0, [r7, #4]
    ae68:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	683a      	ldr	r2, [r7, #0]
    ae6e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    ae70:	bf00      	nop
    ae72:	370c      	adds	r7, #12
    ae74:	46bd      	mov	sp, r7
    ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae7a:	4770      	bx	lr

0000ae7c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    ae7c:	b480      	push	{r7}
    ae7e:	b083      	sub	sp, #12
    ae80:	af00      	add	r7, sp, #0
    ae82:	6078      	str	r0, [r7, #4]
    ae84:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    ae86:	2300      	movs	r3, #0
}
    ae88:	4618      	mov	r0, r3
    ae8a:	370c      	adds	r7, #12
    ae8c:	46bd      	mov	sp, r7
    ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae92:	4770      	bx	lr

0000ae94 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    ae94:	b480      	push	{r7}
    ae96:	b085      	sub	sp, #20
    ae98:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    ae9a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae9e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    aea0:	4b28      	ldr	r3, [pc, #160]	; (af44 <_usb_load_calib+0xb0>)
    aea2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    aea4:	f003 031f 	and.w	r3, r3, #31
    aea8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    aeaa:	4b26      	ldr	r3, [pc, #152]	; (af44 <_usb_load_calib+0xb0>)
    aeac:	681b      	ldr	r3, [r3, #0]
    aeae:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    aeb0:	f003 031f 	and.w	r3, r3, #31
    aeb4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    aeb6:	4b23      	ldr	r3, [pc, #140]	; (af44 <_usb_load_calib+0xb0>)
    aeb8:	681b      	ldr	r3, [r3, #0]
    aeba:	0a9b      	lsrs	r3, r3, #10
    aebc:	f003 0307 	and.w	r3, r3, #7
    aec0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    aec2:	68fb      	ldr	r3, [r7, #12]
    aec4:	2b00      	cmp	r3, #0
    aec6:	d002      	beq.n	aece <_usb_load_calib+0x3a>
    aec8:	68fb      	ldr	r3, [r7, #12]
    aeca:	2b1f      	cmp	r3, #31
    aecc:	d101      	bne.n	aed2 <_usb_load_calib+0x3e>
		pad_transn = 9;
    aece:	2309      	movs	r3, #9
    aed0:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    aed2:	68bb      	ldr	r3, [r7, #8]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d002      	beq.n	aede <_usb_load_calib+0x4a>
    aed8:	68bb      	ldr	r3, [r7, #8]
    aeda:	2b1f      	cmp	r3, #31
    aedc:	d101      	bne.n	aee2 <_usb_load_calib+0x4e>
		pad_transp = 25;
    aede:	2319      	movs	r3, #25
    aee0:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    aee2:	687b      	ldr	r3, [r7, #4]
    aee4:	2b00      	cmp	r3, #0
    aee6:	d002      	beq.n	aeee <_usb_load_calib+0x5a>
    aee8:	687b      	ldr	r3, [r7, #4]
    aeea:	2b07      	cmp	r3, #7
    aeec:	d101      	bne.n	aef2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    aeee:	2306      	movs	r3, #6
    aef0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    aef2:	68fb      	ldr	r3, [r7, #12]
    aef4:	b29b      	uxth	r3, r3
    aef6:	019b      	lsls	r3, r3, #6
    aef8:	b29b      	uxth	r3, r3
    aefa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    aefe:	b29a      	uxth	r2, r3
    af00:	68bb      	ldr	r3, [r7, #8]
    af02:	b29b      	uxth	r3, r3
    af04:	f003 031f 	and.w	r3, r3, #31
    af08:	b29b      	uxth	r3, r3
    af0a:	4313      	orrs	r3, r2
    af0c:	b29a      	uxth	r2, r3
    af0e:	687b      	ldr	r3, [r7, #4]
    af10:	b29b      	uxth	r3, r3
    af12:	031b      	lsls	r3, r3, #12
    af14:	b29b      	uxth	r3, r3
    af16:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    af1a:	b29b      	uxth	r3, r3
    af1c:	4313      	orrs	r3, r2
    af1e:	b29a      	uxth	r2, r3
    af20:	683b      	ldr	r3, [r7, #0]
    af22:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    af24:	683a      	ldr	r2, [r7, #0]
    af26:	78d3      	ldrb	r3, [r2, #3]
    af28:	f043 0303 	orr.w	r3, r3, #3
    af2c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    af2e:	683a      	ldr	r2, [r7, #0]
    af30:	78d3      	ldrb	r3, [r2, #3]
    af32:	f043 030c 	orr.w	r3, r3, #12
    af36:	70d3      	strb	r3, [r2, #3]
}
    af38:	bf00      	nop
    af3a:	3714      	adds	r7, #20
    af3c:	46bd      	mov	sp, r7
    af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    af42:	4770      	bx	lr
    af44:	00800084 	.word	0x00800084

0000af48 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    af48:	b580      	push	{r7, lr}
    af4a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    af4c:	bf00      	nop
    af4e:	2203      	movs	r2, #3
    af50:	2100      	movs	r1, #0
    af52:	4804      	ldr	r0, [pc, #16]	; (af64 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    af54:	4b04      	ldr	r3, [pc, #16]	; (af68 <_usb_d_dev_wait_dpll_rdy+0x20>)
    af56:	4798      	blx	r3
    af58:	4603      	mov	r3, r0
    af5a:	2b03      	cmp	r3, #3
    af5c:	d1f7      	bne.n	af4e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    af5e:	bf00      	nop
    af60:	bd80      	pop	{r7, pc}
    af62:	bf00      	nop
    af64:	40001000 	.word	0x40001000
    af68:	0000a97d 	.word	0x0000a97d

0000af6c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    af6c:	b580      	push	{r7, lr}
    af6e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    af70:	480e      	ldr	r0, [pc, #56]	; (afac <_usb_d_dev_wait_dfll_rdy+0x40>)
    af72:	4b0f      	ldr	r3, [pc, #60]	; (afb0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    af74:	4798      	blx	r3
    af76:	4603      	mov	r3, r0
    af78:	2b00      	cmp	r3, #0
    af7a:	d00a      	beq.n	af92 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    af7c:	bf00      	nop
    af7e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    af82:	480a      	ldr	r0, [pc, #40]	; (afac <_usb_d_dev_wait_dfll_rdy+0x40>)
    af84:	4b0b      	ldr	r3, [pc, #44]	; (afb4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    af86:	4798      	blx	r3
    af88:	4603      	mov	r3, r0
    af8a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    af8e:	d1f6      	bne.n	af7e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    af90:	e009      	b.n	afa6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    af92:	bf00      	nop
    af94:	f44f 7180 	mov.w	r1, #256	; 0x100
    af98:	4804      	ldr	r0, [pc, #16]	; (afac <_usb_d_dev_wait_dfll_rdy+0x40>)
    af9a:	4b06      	ldr	r3, [pc, #24]	; (afb4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    af9c:	4798      	blx	r3
    af9e:	4603      	mov	r3, r0
    afa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    afa4:	d1f6      	bne.n	af94 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    afa6:	bf00      	nop
    afa8:	bd80      	pop	{r7, pc}
    afaa:	bf00      	nop
    afac:	40001000 	.word	0x40001000
    afb0:	0000a9db 	.word	0x0000a9db
    afb4:	0000a9b5 	.word	0x0000a9b5

0000afb8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    afb8:	b580      	push	{r7, lr}
    afba:	b082      	sub	sp, #8
    afbc:	af00      	add	r7, sp, #0
    afbe:	4603      	mov	r3, r0
    afc0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    afc2:	79fb      	ldrb	r3, [r7, #7]
    afc4:	2b00      	cmp	r3, #0
    afc6:	d102      	bne.n	afce <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    afc8:	4b05      	ldr	r3, [pc, #20]	; (afe0 <_usb_d_dev_wait_clk_rdy+0x28>)
    afca:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    afcc:	e004      	b.n	afd8 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    afce:	79fb      	ldrb	r3, [r7, #7]
    afd0:	2b01      	cmp	r3, #1
    afd2:	d101      	bne.n	afd8 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    afd4:	4b03      	ldr	r3, [pc, #12]	; (afe4 <_usb_d_dev_wait_clk_rdy+0x2c>)
    afd6:	4798      	blx	r3
}
    afd8:	bf00      	nop
    afda:	3708      	adds	r7, #8
    afdc:	46bd      	mov	sp, r7
    afde:	bd80      	pop	{r7, pc}
    afe0:	0000af6d 	.word	0x0000af6d
    afe4:	0000af49 	.word	0x0000af49

0000afe8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    afe8:	b580      	push	{r7, lr}
    afea:	b082      	sub	sp, #8
    afec:	af00      	add	r7, sp, #0
    afee:	4603      	mov	r3, r0
    aff0:	6039      	str	r1, [r7, #0]
    aff2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    aff4:	683b      	ldr	r3, [r7, #0]
    aff6:	b2da      	uxtb	r2, r3
    aff8:	79fb      	ldrb	r3, [r7, #7]
    affa:	4619      	mov	r1, r3
    affc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b000:	4b02      	ldr	r3, [pc, #8]	; (b00c <_usbd_ep_int_ack+0x24>)
    b002:	4798      	blx	r3
}
    b004:	bf00      	nop
    b006:	3708      	adds	r7, #8
    b008:	46bd      	mov	sp, r7
    b00a:	bd80      	pop	{r7, pc}
    b00c:	0000aac1 	.word	0x0000aac1

0000b010 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    b010:	b580      	push	{r7, lr}
    b012:	b082      	sub	sp, #8
    b014:	af00      	add	r7, sp, #0
    b016:	4603      	mov	r3, r0
    b018:	6039      	str	r1, [r7, #0]
    b01a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    b01c:	683b      	ldr	r3, [r7, #0]
    b01e:	b2da      	uxtb	r2, r3
    b020:	79fb      	ldrb	r3, [r7, #7]
    b022:	4619      	mov	r1, r3
    b024:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b028:	4b02      	ldr	r3, [pc, #8]	; (b034 <_usbd_ep_int_en+0x24>)
    b02a:	4798      	blx	r3
}
    b02c:	bf00      	nop
    b02e:	3708      	adds	r7, #8
    b030:	46bd      	mov	sp, r7
    b032:	bd80      	pop	{r7, pc}
    b034:	0000ab95 	.word	0x0000ab95

0000b038 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    b038:	b580      	push	{r7, lr}
    b03a:	b082      	sub	sp, #8
    b03c:	af00      	add	r7, sp, #0
    b03e:	4603      	mov	r3, r0
    b040:	6039      	str	r1, [r7, #0]
    b042:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    b044:	683b      	ldr	r3, [r7, #0]
    b046:	b2da      	uxtb	r2, r3
    b048:	79fb      	ldrb	r3, [r7, #7]
    b04a:	4619      	mov	r1, r3
    b04c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b050:	4b02      	ldr	r3, [pc, #8]	; (b05c <_usbd_ep_int_dis+0x24>)
    b052:	4798      	blx	r3
}
    b054:	bf00      	nop
    b056:	3708      	adds	r7, #8
    b058:	46bd      	mov	sp, r7
    b05a:	bd80      	pop	{r7, pc}
    b05c:	0000abc1 	.word	0x0000abc1

0000b060 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    b060:	b580      	push	{r7, lr}
    b062:	b082      	sub	sp, #8
    b064:	af00      	add	r7, sp, #0
    b066:	4603      	mov	r3, r0
    b068:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    b06a:	79fb      	ldrb	r3, [r7, #7]
    b06c:	4619      	mov	r1, r3
    b06e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b072:	4b06      	ldr	r3, [pc, #24]	; (b08c <_usbd_ep_is_ctrl+0x2c>)
    b074:	4798      	blx	r3
    b076:	4603      	mov	r3, r0
    b078:	2b11      	cmp	r3, #17
    b07a:	bf0c      	ite	eq
    b07c:	2301      	moveq	r3, #1
    b07e:	2300      	movne	r3, #0
    b080:	b2db      	uxtb	r3, r3
}
    b082:	4618      	mov	r0, r3
    b084:	3708      	adds	r7, #8
    b086:	46bd      	mov	sp, r7
    b088:	bd80      	pop	{r7, pc}
    b08a:	bf00      	nop
    b08c:	0000ac7b 	.word	0x0000ac7b

0000b090 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    b090:	b580      	push	{r7, lr}
    b092:	b082      	sub	sp, #8
    b094:	af00      	add	r7, sp, #0
    b096:	4603      	mov	r3, r0
    b098:	71fb      	strb	r3, [r7, #7]
    b09a:	460b      	mov	r3, r1
    b09c:	71bb      	strb	r3, [r7, #6]
    b09e:	4613      	mov	r3, r2
    b0a0:	717b      	strb	r3, [r7, #5]
	if (st) {
    b0a2:	797b      	ldrb	r3, [r7, #5]
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d00b      	beq.n	b0c0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b0a8:	79bb      	ldrb	r3, [r7, #6]
    b0aa:	2210      	movs	r2, #16
    b0ac:	fa02 f303 	lsl.w	r3, r2, r3
    b0b0:	b2da      	uxtb	r2, r3
    b0b2:	79fb      	ldrb	r3, [r7, #7]
    b0b4:	4619      	mov	r1, r3
    b0b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0ba:	4b09      	ldr	r3, [pc, #36]	; (b0e0 <_usbd_ep_set_stall+0x50>)
    b0bc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    b0be:	e00a      	b.n	b0d6 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b0c0:	79bb      	ldrb	r3, [r7, #6]
    b0c2:	2210      	movs	r2, #16
    b0c4:	fa02 f303 	lsl.w	r3, r2, r3
    b0c8:	b2da      	uxtb	r2, r3
    b0ca:	79fb      	ldrb	r3, [r7, #7]
    b0cc:	4619      	mov	r1, r3
    b0ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0d2:	4b04      	ldr	r3, [pc, #16]	; (b0e4 <_usbd_ep_set_stall+0x54>)
    b0d4:	4798      	blx	r3
}
    b0d6:	bf00      	nop
    b0d8:	3708      	adds	r7, #8
    b0da:	46bd      	mov	sp, r7
    b0dc:	bd80      	pop	{r7, pc}
    b0de:	bf00      	nop
    b0e0:	0000aaed 	.word	0x0000aaed
    b0e4:	0000ab41 	.word	0x0000ab41

0000b0e8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    b0e8:	b580      	push	{r7, lr}
    b0ea:	b084      	sub	sp, #16
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	4603      	mov	r3, r0
    b0f0:	460a      	mov	r2, r1
    b0f2:	71fb      	strb	r3, [r7, #7]
    b0f4:	4613      	mov	r3, r2
    b0f6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b0f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b0fc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b0fe:	79fb      	ldrb	r3, [r7, #7]
    b100:	4619      	mov	r1, r3
    b102:	68f8      	ldr	r0, [r7, #12]
    b104:	4b08      	ldr	r3, [pc, #32]	; (b128 <_usbd_ep_is_stalled+0x40>)
    b106:	4798      	blx	r3
    b108:	4603      	mov	r3, r0
    b10a:	4619      	mov	r1, r3
    b10c:	79bb      	ldrb	r3, [r7, #6]
    b10e:	2210      	movs	r2, #16
    b110:	fa02 f303 	lsl.w	r3, r2, r3
    b114:	400b      	ands	r3, r1
    b116:	2b00      	cmp	r3, #0
    b118:	bf14      	ite	ne
    b11a:	2301      	movne	r3, #1
    b11c:	2300      	moveq	r3, #0
    b11e:	b2db      	uxtb	r3, r3
}
    b120:	4618      	mov	r0, r3
    b122:	3710      	adds	r7, #16
    b124:	46bd      	mov	sp, r7
    b126:	bd80      	pop	{r7, pc}
    b128:	0000ab19 	.word	0x0000ab19

0000b12c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b084      	sub	sp, #16
    b130:	af00      	add	r7, sp, #0
    b132:	4603      	mov	r3, r0
    b134:	460a      	mov	r2, r1
    b136:	71fb      	strb	r3, [r7, #7]
    b138:	4613      	mov	r3, r2
    b13a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b13c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b140:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b142:	79fb      	ldrb	r3, [r7, #7]
    b144:	4619      	mov	r1, r3
    b146:	68f8      	ldr	r0, [r7, #12]
    b148:	4b08      	ldr	r3, [pc, #32]	; (b16c <_usbd_ep_is_stall_sent+0x40>)
    b14a:	4798      	blx	r3
    b14c:	4603      	mov	r3, r0
    b14e:	4619      	mov	r1, r3
    b150:	79bb      	ldrb	r3, [r7, #6]
    b152:	2220      	movs	r2, #32
    b154:	fa02 f303 	lsl.w	r3, r2, r3
    b158:	400b      	ands	r3, r1
    b15a:	2b00      	cmp	r3, #0
    b15c:	bf14      	ite	ne
    b15e:	2301      	movne	r3, #1
    b160:	2300      	moveq	r3, #0
    b162:	b2db      	uxtb	r3, r3
}
    b164:	4618      	mov	r0, r3
    b166:	3710      	adds	r7, #16
    b168:	46bd      	mov	sp, r7
    b16a:	bd80      	pop	{r7, pc}
    b16c:	0000aa99 	.word	0x0000aa99

0000b170 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    b170:	b580      	push	{r7, lr}
    b172:	b082      	sub	sp, #8
    b174:	af00      	add	r7, sp, #0
    b176:	4603      	mov	r3, r0
    b178:	460a      	mov	r2, r1
    b17a:	71fb      	strb	r3, [r7, #7]
    b17c:	4613      	mov	r3, r2
    b17e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b180:	79bb      	ldrb	r3, [r7, #6]
    b182:	2220      	movs	r2, #32
    b184:	409a      	lsls	r2, r3
    b186:	79fb      	ldrb	r3, [r7, #7]
    b188:	4611      	mov	r1, r2
    b18a:	4618      	mov	r0, r3
    b18c:	4b02      	ldr	r3, [pc, #8]	; (b198 <_usbd_ep_ack_stall+0x28>)
    b18e:	4798      	blx	r3
}
    b190:	bf00      	nop
    b192:	3708      	adds	r7, #8
    b194:	46bd      	mov	sp, r7
    b196:	bd80      	pop	{r7, pc}
    b198:	0000afe9 	.word	0x0000afe9

0000b19c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    b19c:	b580      	push	{r7, lr}
    b19e:	b082      	sub	sp, #8
    b1a0:	af00      	add	r7, sp, #0
    b1a2:	4603      	mov	r3, r0
    b1a4:	71fb      	strb	r3, [r7, #7]
    b1a6:	460b      	mov	r3, r1
    b1a8:	71bb      	strb	r3, [r7, #6]
    b1aa:	4613      	mov	r3, r2
    b1ac:	717b      	strb	r3, [r7, #5]
	if (en) {
    b1ae:	797b      	ldrb	r3, [r7, #5]
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d008      	beq.n	b1c6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b1b4:	79bb      	ldrb	r3, [r7, #6]
    b1b6:	2220      	movs	r2, #32
    b1b8:	409a      	lsls	r2, r3
    b1ba:	79fb      	ldrb	r3, [r7, #7]
    b1bc:	4611      	mov	r1, r2
    b1be:	4618      	mov	r0, r3
    b1c0:	4b07      	ldr	r3, [pc, #28]	; (b1e0 <_usbd_ep_int_stall_en+0x44>)
    b1c2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    b1c4:	e007      	b.n	b1d6 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b1c6:	79bb      	ldrb	r3, [r7, #6]
    b1c8:	2220      	movs	r2, #32
    b1ca:	409a      	lsls	r2, r3
    b1cc:	79fb      	ldrb	r3, [r7, #7]
    b1ce:	4611      	mov	r1, r2
    b1d0:	4618      	mov	r0, r3
    b1d2:	4b04      	ldr	r3, [pc, #16]	; (b1e4 <_usbd_ep_int_stall_en+0x48>)
    b1d4:	4798      	blx	r3
}
    b1d6:	bf00      	nop
    b1d8:	3708      	adds	r7, #8
    b1da:	46bd      	mov	sp, r7
    b1dc:	bd80      	pop	{r7, pc}
    b1de:	bf00      	nop
    b1e0:	0000b011 	.word	0x0000b011
    b1e4:	0000b039 	.word	0x0000b039

0000b1e8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    b1e8:	b580      	push	{r7, lr}
    b1ea:	b082      	sub	sp, #8
    b1ec:	af00      	add	r7, sp, #0
    b1ee:	4603      	mov	r3, r0
    b1f0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    b1f2:	79fb      	ldrb	r3, [r7, #7]
    b1f4:	4619      	mov	r1, r3
    b1f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1fa:	4b03      	ldr	r3, [pc, #12]	; (b208 <_usbd_ep_stop_setup+0x20>)
    b1fc:	4798      	blx	r3
}
    b1fe:	bf00      	nop
    b200:	3708      	adds	r7, #8
    b202:	46bd      	mov	sp, r7
    b204:	bd80      	pop	{r7, pc}
    b206:	bf00      	nop
    b208:	0000ab6d 	.word	0x0000ab6d

0000b20c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    b20c:	b580      	push	{r7, lr}
    b20e:	b082      	sub	sp, #8
    b210:	af00      	add	r7, sp, #0
    b212:	4603      	mov	r3, r0
    b214:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b216:	79fb      	ldrb	r3, [r7, #7]
    b218:	2210      	movs	r2, #16
    b21a:	4619      	mov	r1, r3
    b21c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b220:	4b05      	ldr	r3, [pc, #20]	; (b238 <_usbd_ep_is_setup+0x2c>)
    b222:	4798      	blx	r3
    b224:	4603      	mov	r3, r0
    b226:	2b00      	cmp	r3, #0
    b228:	bf14      	ite	ne
    b22a:	2301      	movne	r3, #1
    b22c:	2300      	moveq	r3, #0
    b22e:	b2db      	uxtb	r3, r3
}
    b230:	4618      	mov	r0, r3
    b232:	3708      	adds	r7, #8
    b234:	46bd      	mov	sp, r7
    b236:	bd80      	pop	{r7, pc}
    b238:	0000aa63 	.word	0x0000aa63

0000b23c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    b23c:	b580      	push	{r7, lr}
    b23e:	b082      	sub	sp, #8
    b240:	af00      	add	r7, sp, #0
    b242:	4603      	mov	r3, r0
    b244:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b246:	79fb      	ldrb	r3, [r7, #7]
    b248:	2110      	movs	r1, #16
    b24a:	4618      	mov	r0, r3
    b24c:	4b02      	ldr	r3, [pc, #8]	; (b258 <_usbd_ep_ack_setup+0x1c>)
    b24e:	4798      	blx	r3
}
    b250:	bf00      	nop
    b252:	3708      	adds	r7, #8
    b254:	46bd      	mov	sp, r7
    b256:	bd80      	pop	{r7, pc}
    b258:	0000afe9 	.word	0x0000afe9

0000b25c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    b25c:	b580      	push	{r7, lr}
    b25e:	b082      	sub	sp, #8
    b260:	af00      	add	r7, sp, #0
    b262:	4603      	mov	r3, r0
    b264:	71fb      	strb	r3, [r7, #7]
    b266:	460b      	mov	r3, r1
    b268:	71bb      	strb	r3, [r7, #6]
    b26a:	4613      	mov	r3, r2
    b26c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    b26e:	797b      	ldrb	r3, [r7, #5]
    b270:	2b00      	cmp	r3, #0
    b272:	d00b      	beq.n	b28c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b274:	79bb      	ldrb	r3, [r7, #6]
    b276:	2201      	movs	r2, #1
    b278:	fa02 f303 	lsl.w	r3, r2, r3
    b27c:	b2da      	uxtb	r2, r3
    b27e:	79fb      	ldrb	r3, [r7, #7]
    b280:	4619      	mov	r1, r3
    b282:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b286:	4b09      	ldr	r3, [pc, #36]	; (b2ac <_usbd_ep_set_toggle+0x50>)
    b288:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    b28a:	e00a      	b.n	b2a2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b28c:	79bb      	ldrb	r3, [r7, #6]
    b28e:	2201      	movs	r2, #1
    b290:	fa02 f303 	lsl.w	r3, r2, r3
    b294:	b2da      	uxtb	r2, r3
    b296:	79fb      	ldrb	r3, [r7, #7]
    b298:	4619      	mov	r1, r3
    b29a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b29e:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <_usbd_ep_set_toggle+0x54>)
    b2a0:	4798      	blx	r3
}
    b2a2:	bf00      	nop
    b2a4:	3708      	adds	r7, #8
    b2a6:	46bd      	mov	sp, r7
    b2a8:	bd80      	pop	{r7, pc}
    b2aa:	bf00      	nop
    b2ac:	0000aaed 	.word	0x0000aaed
    b2b0:	0000ab41 	.word	0x0000ab41

0000b2b4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    b2b4:	b580      	push	{r7, lr}
    b2b6:	b082      	sub	sp, #8
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	4603      	mov	r3, r0
    b2bc:	460a      	mov	r2, r1
    b2be:	71fb      	strb	r3, [r7, #7]
    b2c0:	4613      	mov	r3, r2
    b2c2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    b2c4:	79bb      	ldrb	r3, [r7, #6]
    b2c6:	2201      	movs	r2, #1
    b2c8:	409a      	lsls	r2, r3
    b2ca:	79fb      	ldrb	r3, [r7, #7]
    b2cc:	4611      	mov	r1, r2
    b2ce:	4618      	mov	r0, r3
    b2d0:	4b02      	ldr	r3, [pc, #8]	; (b2dc <_usbd_ep_ack_io_cpt+0x28>)
    b2d2:	4798      	blx	r3
}
    b2d4:	bf00      	nop
    b2d6:	3708      	adds	r7, #8
    b2d8:	46bd      	mov	sp, r7
    b2da:	bd80      	pop	{r7, pc}
    b2dc:	0000afe9 	.word	0x0000afe9

0000b2e0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    b2e0:	b480      	push	{r7}
    b2e2:	b085      	sub	sp, #20
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	4603      	mov	r3, r0
    b2e8:	603a      	str	r2, [r7, #0]
    b2ea:	71fb      	strb	r3, [r7, #7]
    b2ec:	460b      	mov	r3, r1
    b2ee:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b2f0:	79fa      	ldrb	r2, [r7, #7]
    b2f2:	79bb      	ldrb	r3, [r7, #6]
    b2f4:	0052      	lsls	r2, r2, #1
    b2f6:	4413      	add	r3, r2
    b2f8:	011b      	lsls	r3, r3, #4
    b2fa:	4a06      	ldr	r2, [pc, #24]	; (b314 <_usbd_ep_set_buf+0x34>)
    b2fc:	4413      	add	r3, r2
    b2fe:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    b300:	68fb      	ldr	r3, [r7, #12]
    b302:	683a      	ldr	r2, [r7, #0]
    b304:	601a      	str	r2, [r3, #0]
}
    b306:	bf00      	nop
    b308:	3714      	adds	r7, #20
    b30a:	46bd      	mov	sp, r7
    b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b310:	4770      	bx	lr
    b312:	bf00      	nop
    b314:	20001368 	.word	0x20001368

0000b318 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b318:	b480      	push	{r7}
    b31a:	b085      	sub	sp, #20
    b31c:	af00      	add	r7, sp, #0
    b31e:	4603      	mov	r3, r0
    b320:	71fb      	strb	r3, [r7, #7]
    b322:	460b      	mov	r3, r1
    b324:	71bb      	strb	r3, [r7, #6]
    b326:	4613      	mov	r3, r2
    b328:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b32a:	79fa      	ldrb	r2, [r7, #7]
    b32c:	79bb      	ldrb	r3, [r7, #6]
    b32e:	0052      	lsls	r2, r2, #1
    b330:	4413      	add	r3, r2
    b332:	011b      	lsls	r3, r3, #4
    b334:	4a08      	ldr	r2, [pc, #32]	; (b358 <_usbd_ep_set_in_count+0x40>)
    b336:	4413      	add	r3, r2
    b338:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    b33a:	88bb      	ldrh	r3, [r7, #4]
    b33c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b340:	b299      	uxth	r1, r3
    b342:	68fa      	ldr	r2, [r7, #12]
    b344:	6853      	ldr	r3, [r2, #4]
    b346:	f361 339b 	bfi	r3, r1, #14, #14
    b34a:	6053      	str	r3, [r2, #4]
}
    b34c:	bf00      	nop
    b34e:	3714      	adds	r7, #20
    b350:	46bd      	mov	sp, r7
    b352:	f85d 7b04 	ldr.w	r7, [sp], #4
    b356:	4770      	bx	lr
    b358:	20001368 	.word	0x20001368

0000b35c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b35c:	b480      	push	{r7}
    b35e:	b085      	sub	sp, #20
    b360:	af00      	add	r7, sp, #0
    b362:	4603      	mov	r3, r0
    b364:	71fb      	strb	r3, [r7, #7]
    b366:	460b      	mov	r3, r1
    b368:	71bb      	strb	r3, [r7, #6]
    b36a:	4613      	mov	r3, r2
    b36c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b36e:	79fa      	ldrb	r2, [r7, #7]
    b370:	79bb      	ldrb	r3, [r7, #6]
    b372:	0052      	lsls	r2, r2, #1
    b374:	4413      	add	r3, r2
    b376:	011b      	lsls	r3, r3, #4
    b378:	4a08      	ldr	r2, [pc, #32]	; (b39c <_usbd_ep_set_in_size+0x40>)
    b37a:	4413      	add	r3, r2
    b37c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    b37e:	88bb      	ldrh	r3, [r7, #4]
    b380:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b384:	b299      	uxth	r1, r3
    b386:	68fa      	ldr	r2, [r7, #12]
    b388:	6853      	ldr	r3, [r2, #4]
    b38a:	f361 030d 	bfi	r3, r1, #0, #14
    b38e:	6053      	str	r3, [r2, #4]
}
    b390:	bf00      	nop
    b392:	3714      	adds	r7, #20
    b394:	46bd      	mov	sp, r7
    b396:	f85d 7b04 	ldr.w	r7, [sp], #4
    b39a:	4770      	bx	lr
    b39c:	20001368 	.word	0x20001368

0000b3a0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b3a0:	b480      	push	{r7}
    b3a2:	b085      	sub	sp, #20
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	4603      	mov	r3, r0
    b3a8:	71fb      	strb	r3, [r7, #7]
    b3aa:	460b      	mov	r3, r1
    b3ac:	71bb      	strb	r3, [r7, #6]
    b3ae:	4613      	mov	r3, r2
    b3b0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b3b2:	79fa      	ldrb	r2, [r7, #7]
    b3b4:	79bb      	ldrb	r3, [r7, #6]
    b3b6:	0052      	lsls	r2, r2, #1
    b3b8:	4413      	add	r3, r2
    b3ba:	011b      	lsls	r3, r3, #4
    b3bc:	4a08      	ldr	r2, [pc, #32]	; (b3e0 <_usbd_ep_set_out_count+0x40>)
    b3be:	4413      	add	r3, r2
    b3c0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b3c2:	88bb      	ldrh	r3, [r7, #4]
    b3c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b3c8:	b299      	uxth	r1, r3
    b3ca:	68fa      	ldr	r2, [r7, #12]
    b3cc:	6853      	ldr	r3, [r2, #4]
    b3ce:	f361 030d 	bfi	r3, r1, #0, #14
    b3d2:	6053      	str	r3, [r2, #4]
}
    b3d4:	bf00      	nop
    b3d6:	3714      	adds	r7, #20
    b3d8:	46bd      	mov	sp, r7
    b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3de:	4770      	bx	lr
    b3e0:	20001368 	.word	0x20001368

0000b3e4 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b3e4:	b480      	push	{r7}
    b3e6:	b085      	sub	sp, #20
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	4603      	mov	r3, r0
    b3ec:	71fb      	strb	r3, [r7, #7]
    b3ee:	460b      	mov	r3, r1
    b3f0:	71bb      	strb	r3, [r7, #6]
    b3f2:	4613      	mov	r3, r2
    b3f4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b3f6:	79fa      	ldrb	r2, [r7, #7]
    b3f8:	79bb      	ldrb	r3, [r7, #6]
    b3fa:	0052      	lsls	r2, r2, #1
    b3fc:	4413      	add	r3, r2
    b3fe:	011b      	lsls	r3, r3, #4
    b400:	4a08      	ldr	r2, [pc, #32]	; (b424 <_usbd_ep_set_out_size+0x40>)
    b402:	4413      	add	r3, r2
    b404:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b406:	88bb      	ldrh	r3, [r7, #4]
    b408:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b40c:	b299      	uxth	r1, r3
    b40e:	68fa      	ldr	r2, [r7, #12]
    b410:	6853      	ldr	r3, [r2, #4]
    b412:	f361 339b 	bfi	r3, r1, #14, #14
    b416:	6053      	str	r3, [r2, #4]
}
    b418:	bf00      	nop
    b41a:	3714      	adds	r7, #20
    b41c:	46bd      	mov	sp, r7
    b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b422:	4770      	bx	lr
    b424:	20001368 	.word	0x20001368

0000b428 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b428:	b580      	push	{r7, lr}
    b42a:	b084      	sub	sp, #16
    b42c:	af00      	add	r7, sp, #0
    b42e:	60ba      	str	r2, [r7, #8]
    b430:	607b      	str	r3, [r7, #4]
    b432:	4603      	mov	r3, r0
    b434:	73fb      	strb	r3, [r7, #15]
    b436:	460b      	mov	r3, r1
    b438:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    b43a:	68bb      	ldr	r3, [r7, #8]
    b43c:	b29a      	uxth	r2, r3
    b43e:	7bb9      	ldrb	r1, [r7, #14]
    b440:	7bfb      	ldrb	r3, [r7, #15]
    b442:	4618      	mov	r0, r3
    b444:	4b06      	ldr	r3, [pc, #24]	; (b460 <_usbd_ep_set_in_trans+0x38>)
    b446:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    b448:	687b      	ldr	r3, [r7, #4]
    b44a:	b29a      	uxth	r2, r3
    b44c:	7bb9      	ldrb	r1, [r7, #14]
    b44e:	7bfb      	ldrb	r3, [r7, #15]
    b450:	4618      	mov	r0, r3
    b452:	4b04      	ldr	r3, [pc, #16]	; (b464 <_usbd_ep_set_in_trans+0x3c>)
    b454:	4798      	blx	r3
}
    b456:	bf00      	nop
    b458:	3710      	adds	r7, #16
    b45a:	46bd      	mov	sp, r7
    b45c:	bd80      	pop	{r7, pc}
    b45e:	bf00      	nop
    b460:	0000b35d 	.word	0x0000b35d
    b464:	0000b319 	.word	0x0000b319

0000b468 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b468:	b580      	push	{r7, lr}
    b46a:	b084      	sub	sp, #16
    b46c:	af00      	add	r7, sp, #0
    b46e:	60ba      	str	r2, [r7, #8]
    b470:	607b      	str	r3, [r7, #4]
    b472:	4603      	mov	r3, r0
    b474:	73fb      	strb	r3, [r7, #15]
    b476:	460b      	mov	r3, r1
    b478:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    b47a:	68bb      	ldr	r3, [r7, #8]
    b47c:	b29a      	uxth	r2, r3
    b47e:	7bb9      	ldrb	r1, [r7, #14]
    b480:	7bfb      	ldrb	r3, [r7, #15]
    b482:	4618      	mov	r0, r3
    b484:	4b06      	ldr	r3, [pc, #24]	; (b4a0 <_usbd_ep_set_out_trans+0x38>)
    b486:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    b488:	687b      	ldr	r3, [r7, #4]
    b48a:	b29a      	uxth	r2, r3
    b48c:	7bb9      	ldrb	r1, [r7, #14]
    b48e:	7bfb      	ldrb	r3, [r7, #15]
    b490:	4618      	mov	r0, r3
    b492:	4b04      	ldr	r3, [pc, #16]	; (b4a4 <_usbd_ep_set_out_trans+0x3c>)
    b494:	4798      	blx	r3
}
    b496:	bf00      	nop
    b498:	3710      	adds	r7, #16
    b49a:	46bd      	mov	sp, r7
    b49c:	bd80      	pop	{r7, pc}
    b49e:	bf00      	nop
    b4a0:	0000b3e5 	.word	0x0000b3e5
    b4a4:	0000b3a1 	.word	0x0000b3a1

0000b4a8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    b4a8:	b480      	push	{r7}
    b4aa:	b085      	sub	sp, #20
    b4ac:	af00      	add	r7, sp, #0
    b4ae:	4603      	mov	r3, r0
    b4b0:	460a      	mov	r2, r1
    b4b2:	71fb      	strb	r3, [r7, #7]
    b4b4:	4613      	mov	r3, r2
    b4b6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b4b8:	79fa      	ldrb	r2, [r7, #7]
    b4ba:	79bb      	ldrb	r3, [r7, #6]
    b4bc:	0052      	lsls	r2, r2, #1
    b4be:	4413      	add	r3, r2
    b4c0:	011b      	lsls	r3, r3, #4
    b4c2:	4a06      	ldr	r2, [pc, #24]	; (b4dc <_usbd_ep_clear_bank_status+0x34>)
    b4c4:	4413      	add	r3, r2
    b4c6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    b4c8:	68fb      	ldr	r3, [r7, #12]
    b4ca:	2200      	movs	r2, #0
    b4cc:	729a      	strb	r2, [r3, #10]
}
    b4ce:	bf00      	nop
    b4d0:	3714      	adds	r7, #20
    b4d2:	46bd      	mov	sp, r7
    b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d8:	4770      	bx	lr
    b4da:	bf00      	nop
    b4dc:	20001368 	.word	0x20001368

0000b4e0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b4e0:	b580      	push	{r7, lr}
    b4e2:	b082      	sub	sp, #8
    b4e4:	af00      	add	r7, sp, #0
    b4e6:	4603      	mov	r3, r0
    b4e8:	71fb      	strb	r3, [r7, #7]
    b4ea:	460b      	mov	r3, r1
    b4ec:	71bb      	strb	r3, [r7, #6]
    b4ee:	4613      	mov	r3, r2
    b4f0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b4f2:	797b      	ldrb	r3, [r7, #5]
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d00b      	beq.n	b510 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b4f8:	79bb      	ldrb	r3, [r7, #6]
    b4fa:	2240      	movs	r2, #64	; 0x40
    b4fc:	fa02 f303 	lsl.w	r3, r2, r3
    b500:	b2da      	uxtb	r2, r3
    b502:	79fb      	ldrb	r3, [r7, #7]
    b504:	4619      	mov	r1, r3
    b506:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b50a:	4b09      	ldr	r3, [pc, #36]	; (b530 <_usbd_ep_set_in_rdy+0x50>)
    b50c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b50e:	e00a      	b.n	b526 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b510:	79bb      	ldrb	r3, [r7, #6]
    b512:	2240      	movs	r2, #64	; 0x40
    b514:	fa02 f303 	lsl.w	r3, r2, r3
    b518:	b2da      	uxtb	r2, r3
    b51a:	79fb      	ldrb	r3, [r7, #7]
    b51c:	4619      	mov	r1, r3
    b51e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b522:	4b04      	ldr	r3, [pc, #16]	; (b534 <_usbd_ep_set_in_rdy+0x54>)
    b524:	4798      	blx	r3
}
    b526:	bf00      	nop
    b528:	3708      	adds	r7, #8
    b52a:	46bd      	mov	sp, r7
    b52c:	bd80      	pop	{r7, pc}
    b52e:	bf00      	nop
    b530:	0000aaed 	.word	0x0000aaed
    b534:	0000ab41 	.word	0x0000ab41

0000b538 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b538:	b580      	push	{r7, lr}
    b53a:	b082      	sub	sp, #8
    b53c:	af00      	add	r7, sp, #0
    b53e:	4603      	mov	r3, r0
    b540:	71fb      	strb	r3, [r7, #7]
    b542:	460b      	mov	r3, r1
    b544:	71bb      	strb	r3, [r7, #6]
    b546:	4613      	mov	r3, r2
    b548:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b54a:	797b      	ldrb	r3, [r7, #5]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d00b      	beq.n	b568 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b550:	79bb      	ldrb	r3, [r7, #6]
    b552:	2240      	movs	r2, #64	; 0x40
    b554:	fa02 f303 	lsl.w	r3, r2, r3
    b558:	b2da      	uxtb	r2, r3
    b55a:	79fb      	ldrb	r3, [r7, #7]
    b55c:	4619      	mov	r1, r3
    b55e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b562:	4b09      	ldr	r3, [pc, #36]	; (b588 <_usbd_ep_set_out_rdy+0x50>)
    b564:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b566:	e00a      	b.n	b57e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b568:	79bb      	ldrb	r3, [r7, #6]
    b56a:	2240      	movs	r2, #64	; 0x40
    b56c:	fa02 f303 	lsl.w	r3, r2, r3
    b570:	b2da      	uxtb	r2, r3
    b572:	79fb      	ldrb	r3, [r7, #7]
    b574:	4619      	mov	r1, r3
    b576:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b57a:	4b04      	ldr	r3, [pc, #16]	; (b58c <_usbd_ep_set_out_rdy+0x54>)
    b57c:	4798      	blx	r3
}
    b57e:	bf00      	nop
    b580:	3708      	adds	r7, #8
    b582:	46bd      	mov	sp, r7
    b584:	bd80      	pop	{r7, pc}
    b586:	bf00      	nop
    b588:	0000ab41 	.word	0x0000ab41
    b58c:	0000aaed 	.word	0x0000aaed

0000b590 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    b590:	b480      	push	{r7}
    b592:	b083      	sub	sp, #12
    b594:	af00      	add	r7, sp, #0
    b596:	4603      	mov	r3, r0
    b598:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b59a:	88fb      	ldrh	r3, [r7, #6]
    b59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b5a0:	d820      	bhi.n	b5e4 <_usbd_ep_pcksize_size+0x54>
    b5a2:	88fb      	ldrh	r3, [r7, #6]
    b5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b5a8:	d81a      	bhi.n	b5e0 <_usbd_ep_pcksize_size+0x50>
    b5aa:	88fb      	ldrh	r3, [r7, #6]
    b5ac:	2b80      	cmp	r3, #128	; 0x80
    b5ae:	d815      	bhi.n	b5dc <_usbd_ep_pcksize_size+0x4c>
    b5b0:	88fb      	ldrh	r3, [r7, #6]
    b5b2:	2b40      	cmp	r3, #64	; 0x40
    b5b4:	d810      	bhi.n	b5d8 <_usbd_ep_pcksize_size+0x48>
    b5b6:	88fb      	ldrh	r3, [r7, #6]
    b5b8:	2b20      	cmp	r3, #32
    b5ba:	d80b      	bhi.n	b5d4 <_usbd_ep_pcksize_size+0x44>
    b5bc:	88fb      	ldrh	r3, [r7, #6]
    b5be:	2b10      	cmp	r3, #16
    b5c0:	d806      	bhi.n	b5d0 <_usbd_ep_pcksize_size+0x40>
    b5c2:	88fb      	ldrh	r3, [r7, #6]
    b5c4:	2b08      	cmp	r3, #8
    b5c6:	bf8c      	ite	hi
    b5c8:	2301      	movhi	r3, #1
    b5ca:	2300      	movls	r3, #0
    b5cc:	b2db      	uxtb	r3, r3
    b5ce:	e00a      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5d0:	2302      	movs	r3, #2
    b5d2:	e008      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5d4:	2303      	movs	r3, #3
    b5d6:	e006      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5d8:	2304      	movs	r3, #4
    b5da:	e004      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5dc:	2305      	movs	r3, #5
    b5de:	e002      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5e0:	2306      	movs	r3, #6
    b5e2:	e000      	b.n	b5e6 <_usbd_ep_pcksize_size+0x56>
    b5e4:	2307      	movs	r3, #7
}
    b5e6:	4618      	mov	r0, r3
    b5e8:	370c      	adds	r7, #12
    b5ea:	46bd      	mov	sp, r7
    b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5f0:	4770      	bx	lr
	...

0000b5f4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    b5f4:	b480      	push	{r7}
    b5f6:	b085      	sub	sp, #20
    b5f8:	af00      	add	r7, sp, #0
    b5fa:	4603      	mov	r3, r0
    b5fc:	460a      	mov	r2, r1
    b5fe:	71fb      	strb	r3, [r7, #7]
    b600:	4613      	mov	r3, r2
    b602:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b604:	79fb      	ldrb	r3, [r7, #7]
    b606:	2b00      	cmp	r3, #0
    b608:	d008      	beq.n	b61c <_usb_d_dev_ept+0x28>
    b60a:	79bb      	ldrb	r3, [r7, #6]
    b60c:	2b00      	cmp	r3, #0
    b60e:	d003      	beq.n	b618 <_usb_d_dev_ept+0x24>
    b610:	79fb      	ldrb	r3, [r7, #7]
    b612:	3304      	adds	r3, #4
    b614:	b2db      	uxtb	r3, r3
    b616:	e002      	b.n	b61e <_usb_d_dev_ept+0x2a>
    b618:	79fb      	ldrb	r3, [r7, #7]
    b61a:	e000      	b.n	b61e <_usb_d_dev_ept+0x2a>
    b61c:	2300      	movs	r3, #0
    b61e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    b620:	7bfa      	ldrb	r2, [r7, #15]
    b622:	4613      	mov	r3, r2
    b624:	009b      	lsls	r3, r3, #2
    b626:	4413      	add	r3, r2
    b628:	009b      	lsls	r3, r3, #2
    b62a:	3310      	adds	r3, #16
    b62c:	4a04      	ldr	r2, [pc, #16]	; (b640 <_usb_d_dev_ept+0x4c>)
    b62e:	4413      	add	r3, r2
    b630:	3304      	adds	r3, #4
}
    b632:	4618      	mov	r0, r3
    b634:	3714      	adds	r7, #20
    b636:	46bd      	mov	sp, r7
    b638:	f85d 7b04 	ldr.w	r7, [sp], #4
    b63c:	4770      	bx	lr
    b63e:	bf00      	nop
    b640:	200012a0 	.word	0x200012a0

0000b644 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    b644:	b580      	push	{r7, lr}
    b646:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    b648:	2104      	movs	r1, #4
    b64a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b64e:	4b03      	ldr	r3, [pc, #12]	; (b65c <_usb_d_dev_sof+0x18>)
    b650:	4798      	blx	r3
	dev_inst.callbacks.sof();
    b652:	4b03      	ldr	r3, [pc, #12]	; (b660 <_usb_d_dev_sof+0x1c>)
    b654:	681b      	ldr	r3, [r3, #0]
    b656:	4798      	blx	r3
}
    b658:	bf00      	nop
    b65a:	bd80      	pop	{r7, pc}
    b65c:	0000acbb 	.word	0x0000acbb
    b660:	200012a0 	.word	0x200012a0

0000b664 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    b664:	b580      	push	{r7, lr}
    b666:	b084      	sub	sp, #16
    b668:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    b66a:	2300      	movs	r3, #0
    b66c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b66e:	f240 2101 	movw	r1, #513	; 0x201
    b672:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b676:	4b1a      	ldr	r3, [pc, #104]	; (b6e0 <_usb_d_dev_lpmsusp+0x7c>)
    b678:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b67a:	f240 2101 	movw	r1, #513	; 0x201
    b67e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b682:	4b18      	ldr	r3, [pc, #96]	; (b6e4 <_usb_d_dev_lpmsusp+0x80>)
    b684:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b686:	2170      	movs	r1, #112	; 0x70
    b688:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b68c:	4b16      	ldr	r3, [pc, #88]	; (b6e8 <_usb_d_dev_lpmsusp+0x84>)
    b68e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b690:	2300      	movs	r3, #0
    b692:	73fb      	strb	r3, [r7, #15]
    b694:	e018      	b.n	b6c8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    b696:	7bfb      	ldrb	r3, [r7, #15]
    b698:	015b      	lsls	r3, r3, #5
    b69a:	4a14      	ldr	r2, [pc, #80]	; (b6ec <_usb_d_dev_lpmsusp+0x88>)
    b69c:	4413      	add	r3, r2
    b69e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	891b      	ldrh	r3, [r3, #8]
    b6a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b6a8:	b2db      	uxtb	r3, r3
    b6aa:	2b03      	cmp	r3, #3
    b6ac:	d109      	bne.n	b6c2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	891b      	ldrh	r3, [r3, #8]
    b6b2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b6b6:	b29b      	uxth	r3, r3
    b6b8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    b6ba:	687b      	ldr	r3, [r7, #4]
    b6bc:	2200      	movs	r2, #0
    b6be:	811a      	strh	r2, [r3, #8]
			break;
    b6c0:	e005      	b.n	b6ce <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b6c2:	7bfb      	ldrb	r3, [r7, #15]
    b6c4:	3301      	adds	r3, #1
    b6c6:	73fb      	strb	r3, [r7, #15]
    b6c8:	7bfb      	ldrb	r3, [r7, #15]
    b6ca:	2b03      	cmp	r3, #3
    b6cc:	d9e3      	bls.n	b696 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    b6ce:	4b08      	ldr	r3, [pc, #32]	; (b6f0 <_usb_d_dev_lpmsusp+0x8c>)
    b6d0:	685b      	ldr	r3, [r3, #4]
    b6d2:	68b9      	ldr	r1, [r7, #8]
    b6d4:	2003      	movs	r0, #3
    b6d6:	4798      	blx	r3
}
    b6d8:	bf00      	nop
    b6da:	3710      	adds	r7, #16
    b6dc:	46bd      	mov	sp, r7
    b6de:	bd80      	pop	{r7, pc}
    b6e0:	0000acbb 	.word	0x0000acbb
    b6e4:	0000ad11 	.word	0x0000ad11
    b6e8:	0000acd9 	.word	0x0000acd9
    b6ec:	20001368 	.word	0x20001368
    b6f0:	200012a0 	.word	0x200012a0

0000b6f4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    b6f4:	b580      	push	{r7, lr}
    b6f6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    b6f8:	2180      	movs	r1, #128	; 0x80
    b6fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b6fe:	4b04      	ldr	r3, [pc, #16]	; (b710 <_usb_d_dev_ramerr+0x1c>)
    b700:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    b702:	4b04      	ldr	r3, [pc, #16]	; (b714 <_usb_d_dev_ramerr+0x20>)
    b704:	685b      	ldr	r3, [r3, #4]
    b706:	2100      	movs	r1, #0
    b708:	2005      	movs	r0, #5
    b70a:	4798      	blx	r3
}
    b70c:	bf00      	nop
    b70e:	bd80      	pop	{r7, pc}
    b710:	0000acbb 	.word	0x0000acbb
    b714:	200012a0 	.word	0x200012a0

0000b718 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    b718:	b580      	push	{r7, lr}
    b71a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b71c:	2170      	movs	r1, #112	; 0x70
    b71e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b722:	4b0b      	ldr	r3, [pc, #44]	; (b750 <_usb_d_dev_wakeup+0x38>)
    b724:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b726:	2170      	movs	r1, #112	; 0x70
    b728:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b72c:	4b09      	ldr	r3, [pc, #36]	; (b754 <_usb_d_dev_wakeup+0x3c>)
    b72e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b730:	f240 2101 	movw	r1, #513	; 0x201
    b734:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b738:	4b07      	ldr	r3, [pc, #28]	; (b758 <_usb_d_dev_wakeup+0x40>)
    b73a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    b73c:	2000      	movs	r0, #0
    b73e:	4b07      	ldr	r3, [pc, #28]	; (b75c <_usb_d_dev_wakeup+0x44>)
    b740:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    b742:	4b07      	ldr	r3, [pc, #28]	; (b760 <_usb_d_dev_wakeup+0x48>)
    b744:	685b      	ldr	r3, [r3, #4]
    b746:	2100      	movs	r1, #0
    b748:	2002      	movs	r0, #2
    b74a:	4798      	blx	r3
}
    b74c:	bf00      	nop
    b74e:	bd80      	pop	{r7, pc}
    b750:	0000acbb 	.word	0x0000acbb
    b754:	0000ad11 	.word	0x0000ad11
    b758:	0000acd9 	.word	0x0000acd9
    b75c:	0000afb9 	.word	0x0000afb9
    b760:	200012a0 	.word	0x200012a0

0000b764 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    b764:	b580      	push	{r7, lr}
    b766:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    b768:	2200      	movs	r2, #0
    b76a:	2100      	movs	r1, #0
    b76c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b770:	4b0d      	ldr	r3, [pc, #52]	; (b7a8 <_usb_d_dev_reset+0x44>)
    b772:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b774:	2108      	movs	r1, #8
    b776:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b77a:	4b0c      	ldr	r3, [pc, #48]	; (b7ac <_usb_d_dev_reset+0x48>)
    b77c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b77e:	2170      	movs	r1, #112	; 0x70
    b780:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b784:	4b0a      	ldr	r3, [pc, #40]	; (b7b0 <_usb_d_dev_reset+0x4c>)
    b786:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b788:	f240 2101 	movw	r1, #513	; 0x201
    b78c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b790:	4b08      	ldr	r3, [pc, #32]	; (b7b4 <_usb_d_dev_reset+0x50>)
    b792:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b794:	4b08      	ldr	r3, [pc, #32]	; (b7b8 <_usb_d_dev_reset+0x54>)
    b796:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b798:	4b08      	ldr	r3, [pc, #32]	; (b7bc <_usb_d_dev_reset+0x58>)
    b79a:	685b      	ldr	r3, [r3, #4]
    b79c:	2100      	movs	r1, #0
    b79e:	2001      	movs	r0, #1
    b7a0:	4798      	blx	r3
}
    b7a2:	bf00      	nop
    b7a4:	bd80      	pop	{r7, pc}
    b7a6:	bf00      	nop
    b7a8:	0000ac51 	.word	0x0000ac51
    b7ac:	0000acbb 	.word	0x0000acbb
    b7b0:	0000ad11 	.word	0x0000ad11
    b7b4:	0000acd9 	.word	0x0000acd9
    b7b8:	0000c321 	.word	0x0000c321
    b7bc:	200012a0 	.word	0x200012a0

0000b7c0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b7c4:	f240 2101 	movw	r1, #513	; 0x201
    b7c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b7cc:	4b09      	ldr	r3, [pc, #36]	; (b7f4 <_usb_d_dev_suspend+0x34>)
    b7ce:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b7d0:	f240 2101 	movw	r1, #513	; 0x201
    b7d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b7d8:	4b07      	ldr	r3, [pc, #28]	; (b7f8 <_usb_d_dev_suspend+0x38>)
    b7da:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b7dc:	2170      	movs	r1, #112	; 0x70
    b7de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b7e2:	4b06      	ldr	r3, [pc, #24]	; (b7fc <_usb_d_dev_suspend+0x3c>)
    b7e4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b7e6:	4b06      	ldr	r3, [pc, #24]	; (b800 <_usb_d_dev_suspend+0x40>)
    b7e8:	685b      	ldr	r3, [r3, #4]
    b7ea:	2100      	movs	r1, #0
    b7ec:	2004      	movs	r0, #4
    b7ee:	4798      	blx	r3
}
    b7f0:	bf00      	nop
    b7f2:	bd80      	pop	{r7, pc}
    b7f4:	0000acbb 	.word	0x0000acbb
    b7f8:	0000ad11 	.word	0x0000ad11
    b7fc:	0000acd9 	.word	0x0000acd9
    b800:	200012a0 	.word	0x200012a0

0000b804 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b804:	b580      	push	{r7, lr}
    b806:	b082      	sub	sp, #8
    b808:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b80a:	2301      	movs	r3, #1
    b80c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b80e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b812:	4b22      	ldr	r3, [pc, #136]	; (b89c <_usb_d_dev_handle_nep+0x98>)
    b814:	4798      	blx	r3
    b816:	4603      	mov	r3, r0
    b818:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b81a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b81e:	4b20      	ldr	r3, [pc, #128]	; (b8a0 <_usb_d_dev_handle_nep+0x9c>)
    b820:	4798      	blx	r3
    b822:	4603      	mov	r3, r0
    b824:	461a      	mov	r2, r3
    b826:	88bb      	ldrh	r3, [r7, #4]
    b828:	4013      	ands	r3, r2
    b82a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b82c:	88bb      	ldrh	r3, [r7, #4]
    b82e:	f003 0304 	and.w	r3, r3, #4
    b832:	2b00      	cmp	r3, #0
    b834:	d003      	beq.n	b83e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b836:	4b1b      	ldr	r3, [pc, #108]	; (b8a4 <_usb_d_dev_handle_nep+0xa0>)
    b838:	4798      	blx	r3
		return true;
    b83a:	2301      	movs	r3, #1
    b83c:	e02a      	b.n	b894 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b83e:	88bb      	ldrh	r3, [r7, #4]
    b840:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b844:	2b00      	cmp	r3, #0
    b846:	d002      	beq.n	b84e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b848:	4b17      	ldr	r3, [pc, #92]	; (b8a8 <_usb_d_dev_handle_nep+0xa4>)
    b84a:	4798      	blx	r3
    b84c:	e021      	b.n	b892 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b84e:	88bb      	ldrh	r3, [r7, #4]
    b850:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b854:	2b00      	cmp	r3, #0
    b856:	d002      	beq.n	b85e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b858:	4b14      	ldr	r3, [pc, #80]	; (b8ac <_usb_d_dev_handle_nep+0xa8>)
    b85a:	4798      	blx	r3
    b85c:	e019      	b.n	b892 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b85e:	88bb      	ldrh	r3, [r7, #4]
    b860:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b864:	2b00      	cmp	r3, #0
    b866:	d002      	beq.n	b86e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b868:	4b11      	ldr	r3, [pc, #68]	; (b8b0 <_usb_d_dev_handle_nep+0xac>)
    b86a:	4798      	blx	r3
    b86c:	e011      	b.n	b892 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b86e:	88bb      	ldrh	r3, [r7, #4]
    b870:	f003 0308 	and.w	r3, r3, #8
    b874:	2b00      	cmp	r3, #0
    b876:	d002      	beq.n	b87e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b878:	4b0e      	ldr	r3, [pc, #56]	; (b8b4 <_usb_d_dev_handle_nep+0xb0>)
    b87a:	4798      	blx	r3
    b87c:	e009      	b.n	b892 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b87e:	88bb      	ldrh	r3, [r7, #4]
    b880:	f003 0301 	and.w	r3, r3, #1
    b884:	2b00      	cmp	r3, #0
    b886:	d002      	beq.n	b88e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b888:	4b0b      	ldr	r3, [pc, #44]	; (b8b8 <_usb_d_dev_handle_nep+0xb4>)
    b88a:	4798      	blx	r3
    b88c:	e001      	b.n	b892 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b88e:	2300      	movs	r3, #0
    b890:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b892:	79fb      	ldrb	r3, [r7, #7]
}
    b894:	4618      	mov	r0, r3
    b896:	3708      	adds	r7, #8
    b898:	46bd      	mov	sp, r7
    b89a:	bd80      	pop	{r7, pc}
    b89c:	0000aca1 	.word	0x0000aca1
    b8a0:	0000acf7 	.word	0x0000acf7
    b8a4:	0000b645 	.word	0x0000b645
    b8a8:	0000b665 	.word	0x0000b665
    b8ac:	0000b6f5 	.word	0x0000b6f5
    b8b0:	0000b719 	.word	0x0000b719
    b8b4:	0000b765 	.word	0x0000b765
    b8b8:	0000b7c1 	.word	0x0000b7c1

0000b8bc <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b8bc:	b590      	push	{r4, r7, lr}
    b8be:	b089      	sub	sp, #36	; 0x24
    b8c0:	af00      	add	r7, sp, #0
    b8c2:	6078      	str	r0, [r7, #4]
    b8c4:	460b      	mov	r3, r1
    b8c6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b8c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b8cc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b8ce:	687b      	ldr	r3, [r7, #4]
    b8d0:	7c9b      	ldrb	r3, [r3, #18]
    b8d2:	f003 030f 	and.w	r3, r3, #15
    b8d6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b8d8:	7dfb      	ldrb	r3, [r7, #23]
    b8da:	015b      	lsls	r3, r3, #5
    b8dc:	4a73      	ldr	r2, [pc, #460]	; (baac <_usb_d_dev_in_next+0x1f0>)
    b8de:	4413      	add	r3, r2
    b8e0:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b8e2:	78fb      	ldrb	r3, [r7, #3]
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	d006      	beq.n	b8f6 <_usb_d_dev_in_next+0x3a>
    b8e8:	693b      	ldr	r3, [r7, #16]
    b8ea:	3310      	adds	r3, #16
    b8ec:	685b      	ldr	r3, [r3, #4]
    b8ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b8f2:	b29b      	uxth	r3, r3
    b8f4:	e000      	b.n	b8f8 <_usb_d_dev_in_next+0x3c>
    b8f6:	2300      	movs	r3, #0
    b8f8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b8fa:	687b      	ldr	r3, [r7, #4]
    b8fc:	8a1b      	ldrh	r3, [r3, #16]
    b8fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b902:	4293      	cmp	r3, r2
    b904:	d103      	bne.n	b90e <_usb_d_dev_in_next+0x52>
    b906:	687b      	ldr	r3, [r7, #4]
    b908:	8a1b      	ldrh	r3, [r3, #16]
    b90a:	b21b      	sxth	r3, r3
    b90c:	e004      	b.n	b918 <_usb_d_dev_in_next+0x5c>
    b90e:	687b      	ldr	r3, [r7, #4]
    b910:	8a1b      	ldrh	r3, [r3, #16]
    b912:	3b01      	subs	r3, #1
    b914:	b29b      	uxth	r3, r3
    b916:	b21b      	sxth	r3, r3
    b918:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b91c:	4013      	ands	r3, r2
    b91e:	b21b      	sxth	r3, r3
    b920:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b922:	2300      	movs	r3, #0
    b924:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b926:	687b      	ldr	r3, [r7, #4]
    b928:	7cdb      	ldrb	r3, [r3, #19]
    b92a:	f003 0307 	and.w	r3, r3, #7
    b92e:	b2db      	uxtb	r3, r3
    b930:	2b01      	cmp	r3, #1
    b932:	bf0c      	ite	eq
    b934:	2301      	moveq	r3, #1
    b936:	2300      	movne	r3, #0
    b938:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b93a:	78fb      	ldrb	r3, [r7, #3]
    b93c:	2b00      	cmp	r3, #0
    b93e:	d004      	beq.n	b94a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b940:	7dfb      	ldrb	r3, [r7, #23]
    b942:	2101      	movs	r1, #1
    b944:	4618      	mov	r0, r3
    b946:	4b5a      	ldr	r3, [pc, #360]	; (bab0 <_usb_d_dev_in_next+0x1f4>)
    b948:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b94a:	687b      	ldr	r3, [r7, #4]
    b94c:	689a      	ldr	r2, [r3, #8]
    b94e:	89fb      	ldrh	r3, [r7, #14]
    b950:	441a      	add	r2, r3
    b952:	687b      	ldr	r3, [r7, #4]
    b954:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b956:	687b      	ldr	r3, [r7, #4]
    b958:	689a      	ldr	r2, [r3, #8]
    b95a:	687b      	ldr	r3, [r7, #4]
    b95c:	685b      	ldr	r3, [r3, #4]
    b95e:	429a      	cmp	r2, r3
    b960:	d243      	bcs.n	b9ea <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b962:	687b      	ldr	r3, [r7, #4]
    b964:	685b      	ldr	r3, [r3, #4]
    b966:	b29a      	uxth	r2, r3
    b968:	687b      	ldr	r3, [r7, #4]
    b96a:	689b      	ldr	r3, [r3, #8]
    b96c:	b29b      	uxth	r3, r3
    b96e:	1ad3      	subs	r3, r2, r3
    b970:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b972:	687b      	ldr	r3, [r7, #4]
    b974:	7cdb      	ldrb	r3, [r3, #19]
    b976:	f003 0320 	and.w	r3, r3, #32
    b97a:	b2db      	uxtb	r3, r3
    b97c:	2b00      	cmp	r3, #0
    b97e:	d01b      	beq.n	b9b8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b980:	687b      	ldr	r3, [r7, #4]
    b982:	8a1b      	ldrh	r3, [r3, #16]
    b984:	8bfa      	ldrh	r2, [r7, #30]
    b986:	429a      	cmp	r2, r3
    b988:	d902      	bls.n	b990 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b98a:	687b      	ldr	r3, [r7, #4]
    b98c:	8a1b      	ldrh	r3, [r3, #16]
    b98e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b990:	687b      	ldr	r3, [r7, #4]
    b992:	68d8      	ldr	r0, [r3, #12]
    b994:	687b      	ldr	r3, [r7, #4]
    b996:	681a      	ldr	r2, [r3, #0]
    b998:	687b      	ldr	r3, [r7, #4]
    b99a:	689b      	ldr	r3, [r3, #8]
    b99c:	4413      	add	r3, r2
    b99e:	8bfa      	ldrh	r2, [r7, #30]
    b9a0:	4619      	mov	r1, r3
    b9a2:	4b44      	ldr	r3, [pc, #272]	; (bab4 <_usb_d_dev_in_next+0x1f8>)
    b9a4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b9a6:	687b      	ldr	r3, [r7, #4]
    b9a8:	68db      	ldr	r3, [r3, #12]
    b9aa:	461a      	mov	r2, r3
    b9ac:	7dfb      	ldrb	r3, [r7, #23]
    b9ae:	2101      	movs	r1, #1
    b9b0:	4618      	mov	r0, r3
    b9b2:	4b41      	ldr	r3, [pc, #260]	; (bab8 <_usb_d_dev_in_next+0x1fc>)
    b9b4:	4798      	blx	r3
    b9b6:	e011      	b.n	b9dc <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b9b8:	8bfb      	ldrh	r3, [r7, #30]
    b9ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b9be:	d902      	bls.n	b9c6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b9c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b9c4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	681a      	ldr	r2, [r3, #0]
    b9ca:	687b      	ldr	r3, [r7, #4]
    b9cc:	689b      	ldr	r3, [r3, #8]
    b9ce:	4413      	add	r3, r2
    b9d0:	461a      	mov	r2, r3
    b9d2:	7dfb      	ldrb	r3, [r7, #23]
    b9d4:	2101      	movs	r1, #1
    b9d6:	4618      	mov	r0, r3
    b9d8:	4b37      	ldr	r3, [pc, #220]	; (bab8 <_usb_d_dev_in_next+0x1fc>)
    b9da:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b9dc:	8bfa      	ldrh	r2, [r7, #30]
    b9de:	7df8      	ldrb	r0, [r7, #23]
    b9e0:	2300      	movs	r3, #0
    b9e2:	2101      	movs	r1, #1
    b9e4:	4c35      	ldr	r4, [pc, #212]	; (babc <_usb_d_dev_in_next+0x200>)
    b9e6:	47a0      	blx	r4
		goto _in_tx_exec;
    b9e8:	e041      	b.n	ba6e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b9ea:	687b      	ldr	r3, [r7, #4]
    b9ec:	7cdb      	ldrb	r3, [r3, #19]
    b9ee:	f003 0310 	and.w	r3, r3, #16
    b9f2:	b2db      	uxtb	r3, r3
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d00b      	beq.n	ba10 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b9f8:	687a      	ldr	r2, [r7, #4]
    b9fa:	7cd3      	ldrb	r3, [r2, #19]
    b9fc:	f36f 1304 	bfc	r3, #4, #1
    ba00:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ba02:	7df8      	ldrb	r0, [r7, #23]
    ba04:	2300      	movs	r3, #0
    ba06:	2200      	movs	r2, #0
    ba08:	2101      	movs	r1, #1
    ba0a:	4c2c      	ldr	r4, [pc, #176]	; (babc <_usb_d_dev_in_next+0x200>)
    ba0c:	47a0      	blx	r4
		goto _in_tx_exec;
    ba0e:	e02e      	b.n	ba6e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ba10:	7afb      	ldrb	r3, [r7, #11]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d006      	beq.n	ba24 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ba16:	7dfb      	ldrb	r3, [r7, #23]
    ba18:	224b      	movs	r2, #75	; 0x4b
    ba1a:	4619      	mov	r1, r3
    ba1c:	69b8      	ldr	r0, [r7, #24]
    ba1e:	4b28      	ldr	r3, [pc, #160]	; (bac0 <_usb_d_dev_in_next+0x204>)
    ba20:	4798      	blx	r3
    ba22:	e005      	b.n	ba30 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ba24:	7dfb      	ldrb	r3, [r7, #23]
    ba26:	224a      	movs	r2, #74	; 0x4a
    ba28:	4619      	mov	r1, r3
    ba2a:	69b8      	ldr	r0, [r7, #24]
    ba2c:	4b24      	ldr	r3, [pc, #144]	; (bac0 <_usb_d_dev_in_next+0x204>)
    ba2e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	8a1b      	ldrh	r3, [r3, #16]
    ba34:	89ba      	ldrh	r2, [r7, #12]
    ba36:	429a      	cmp	r2, r3
    ba38:	d114      	bne.n	ba64 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ba3a:	687a      	ldr	r2, [r7, #4]
    ba3c:	7cd3      	ldrb	r3, [r2, #19]
    ba3e:	f36f 1386 	bfc	r3, #6, #1
    ba42:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ba44:	4b1f      	ldr	r3, [pc, #124]	; (bac4 <_usb_d_dev_in_next+0x208>)
    ba46:	68db      	ldr	r3, [r3, #12]
    ba48:	687a      	ldr	r2, [r7, #4]
    ba4a:	7c90      	ldrb	r0, [r2, #18]
    ba4c:	687a      	ldr	r2, [r7, #4]
    ba4e:	6892      	ldr	r2, [r2, #8]
    ba50:	4611      	mov	r1, r2
    ba52:	4798      	blx	r3
    ba54:	4603      	mov	r3, r0
    ba56:	2b00      	cmp	r3, #0
    ba58:	d124      	bne.n	baa4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    ba5a:	687a      	ldr	r2, [r7, #4]
    ba5c:	7cd3      	ldrb	r3, [r2, #19]
    ba5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba62:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ba64:	2100      	movs	r1, #0
    ba66:	6878      	ldr	r0, [r7, #4]
    ba68:	4b17      	ldr	r3, [pc, #92]	; (bac8 <_usb_d_dev_in_next+0x20c>)
    ba6a:	4798      	blx	r3
	return;
    ba6c:	e01b      	b.n	baa6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    ba6e:	78fb      	ldrb	r3, [r7, #3]
    ba70:	f083 0301 	eor.w	r3, r3, #1
    ba74:	b2db      	uxtb	r3, r3
    ba76:	2b00      	cmp	r3, #0
    ba78:	d00d      	beq.n	ba96 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    ba7a:	7afb      	ldrb	r3, [r7, #11]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d002      	beq.n	ba86 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    ba80:	234e      	movs	r3, #78	; 0x4e
    ba82:	777b      	strb	r3, [r7, #29]
    ba84:	e001      	b.n	ba8a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    ba86:	234a      	movs	r3, #74	; 0x4a
    ba88:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ba8a:	7f7a      	ldrb	r2, [r7, #29]
    ba8c:	7dfb      	ldrb	r3, [r7, #23]
    ba8e:	4619      	mov	r1, r3
    ba90:	69b8      	ldr	r0, [r7, #24]
    ba92:	4b0e      	ldr	r3, [pc, #56]	; (bacc <_usb_d_dev_in_next+0x210>)
    ba94:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    ba96:	7dfb      	ldrb	r3, [r7, #23]
    ba98:	2201      	movs	r2, #1
    ba9a:	2101      	movs	r1, #1
    ba9c:	4618      	mov	r0, r3
    ba9e:	4b0c      	ldr	r3, [pc, #48]	; (bad0 <_usb_d_dev_in_next+0x214>)
    baa0:	4798      	blx	r3
    baa2:	e000      	b.n	baa6 <_usb_d_dev_in_next+0x1ea>
			return;
    baa4:	bf00      	nop
}
    baa6:	3724      	adds	r7, #36	; 0x24
    baa8:	46bd      	mov	sp, r7
    baaa:	bd90      	pop	{r4, r7, pc}
    baac:	20001368 	.word	0x20001368
    bab0:	0000b2b5 	.word	0x0000b2b5
    bab4:	000191a9 	.word	0x000191a9
    bab8:	0000b2e1 	.word	0x0000b2e1
    babc:	0000b429 	.word	0x0000b429
    bac0:	0000abc1 	.word	0x0000abc1
    bac4:	200012a0 	.word	0x200012a0
    bac8:	0000cbe5 	.word	0x0000cbe5
    bacc:	0000ab95 	.word	0x0000ab95
    bad0:	0000b4e1 	.word	0x0000b4e1

0000bad4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    bad4:	b590      	push	{r4, r7, lr}
    bad6:	b08b      	sub	sp, #44	; 0x2c
    bad8:	af00      	add	r7, sp, #0
    bada:	6078      	str	r0, [r7, #4]
    badc:	460b      	mov	r3, r1
    bade:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    bae0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bae4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    bae6:	687b      	ldr	r3, [r7, #4]
    bae8:	7c9b      	ldrb	r3, [r3, #18]
    baea:	f003 030f 	and.w	r3, r3, #15
    baee:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    baf0:	7ffb      	ldrb	r3, [r7, #31]
    baf2:	015b      	lsls	r3, r3, #5
    baf4:	4a94      	ldr	r2, [pc, #592]	; (bd48 <_usb_d_dev_out_next+0x274>)
    baf6:	4413      	add	r3, r2
    baf8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    bafa:	78fb      	ldrb	r3, [r7, #3]
    bafc:	2b00      	cmp	r3, #0
    bafe:	d005      	beq.n	bb0c <_usb_d_dev_out_next+0x38>
    bb00:	69bb      	ldr	r3, [r7, #24]
    bb02:	685b      	ldr	r3, [r3, #4]
    bb04:	f3c3 338d 	ubfx	r3, r3, #14, #14
    bb08:	b29b      	uxth	r3, r3
    bb0a:	e000      	b.n	bb0e <_usb_d_dev_out_next+0x3a>
    bb0c:	2300      	movs	r3, #0
    bb0e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    bb10:	78fb      	ldrb	r3, [r7, #3]
    bb12:	2b00      	cmp	r3, #0
    bb14:	d005      	beq.n	bb22 <_usb_d_dev_out_next+0x4e>
    bb16:	69bb      	ldr	r3, [r7, #24]
    bb18:	685b      	ldr	r3, [r3, #4]
    bb1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    bb1e:	b29b      	uxth	r3, r3
    bb20:	e000      	b.n	bb24 <_usb_d_dev_out_next+0x50>
    bb22:	2300      	movs	r3, #0
    bb24:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    bb26:	687b      	ldr	r3, [r7, #4]
    bb28:	8a1b      	ldrh	r3, [r3, #16]
    bb2a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    bb2e:	4293      	cmp	r3, r2
    bb30:	d004      	beq.n	bb3c <_usb_d_dev_out_next+0x68>
    bb32:	687b      	ldr	r3, [r7, #4]
    bb34:	8a1b      	ldrh	r3, [r3, #16]
    bb36:	3b01      	subs	r3, #1
    bb38:	b29b      	uxth	r3, r3
    bb3a:	e001      	b.n	bb40 <_usb_d_dev_out_next+0x6c>
    bb3c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bb40:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    bb42:	8aba      	ldrh	r2, [r7, #20]
    bb44:	8a7b      	ldrh	r3, [r7, #18]
    bb46:	4013      	ands	r3, r2
    bb48:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bb4a:	687b      	ldr	r3, [r7, #4]
    bb4c:	7cdb      	ldrb	r3, [r3, #19]
    bb4e:	f003 0307 	and.w	r3, r3, #7
    bb52:	b2db      	uxtb	r3, r3
    bb54:	2b01      	cmp	r3, #1
    bb56:	bf0c      	ite	eq
    bb58:	2301      	moveq	r3, #1
    bb5a:	2300      	movne	r3, #0
    bb5c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    bb5e:	78fb      	ldrb	r3, [r7, #3]
    bb60:	2b00      	cmp	r3, #0
    bb62:	d004      	beq.n	bb6e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    bb64:	7ffb      	ldrb	r3, [r7, #31]
    bb66:	2100      	movs	r1, #0
    bb68:	4618      	mov	r0, r3
    bb6a:	4b78      	ldr	r3, [pc, #480]	; (bd4c <_usb_d_dev_out_next+0x278>)
    bb6c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    bb6e:	687b      	ldr	r3, [r7, #4]
    bb70:	7cdb      	ldrb	r3, [r3, #19]
    bb72:	f003 0320 	and.w	r3, r3, #32
    bb76:	b2db      	uxtb	r3, r3
    bb78:	2b00      	cmp	r3, #0
    bb7a:	d01c      	beq.n	bbb6 <_usb_d_dev_out_next+0xe2>
    bb7c:	687b      	ldr	r3, [r7, #4]
    bb7e:	685b      	ldr	r3, [r3, #4]
    bb80:	2b00      	cmp	r3, #0
    bb82:	d018      	beq.n	bbb6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    bb84:	687b      	ldr	r3, [r7, #4]
    bb86:	685b      	ldr	r3, [r3, #4]
    bb88:	b29a      	uxth	r2, r3
    bb8a:	687b      	ldr	r3, [r7, #4]
    bb8c:	689b      	ldr	r3, [r3, #8]
    bb8e:	b29b      	uxth	r3, r3
    bb90:	1ad3      	subs	r3, r2, r3
    bb92:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    bb94:	687b      	ldr	r3, [r7, #4]
    bb96:	681a      	ldr	r2, [r3, #0]
    bb98:	687b      	ldr	r3, [r7, #4]
    bb9a:	689b      	ldr	r3, [r3, #8]
    bb9c:	18d0      	adds	r0, r2, r3
    bb9e:	687b      	ldr	r3, [r7, #4]
    bba0:	68d9      	ldr	r1, [r3, #12]
    bba2:	89ba      	ldrh	r2, [r7, #12]
    bba4:	8a3b      	ldrh	r3, [r7, #16]
    bba6:	429a      	cmp	r2, r3
    bba8:	d901      	bls.n	bbae <_usb_d_dev_out_next+0xda>
    bbaa:	8a3b      	ldrh	r3, [r7, #16]
    bbac:	e000      	b.n	bbb0 <_usb_d_dev_out_next+0xdc>
    bbae:	89bb      	ldrh	r3, [r7, #12]
    bbb0:	461a      	mov	r2, r3
    bbb2:	4b67      	ldr	r3, [pc, #412]	; (bd50 <_usb_d_dev_out_next+0x27c>)
    bbb4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    bbb6:	687b      	ldr	r3, [r7, #4]
    bbb8:	685b      	ldr	r3, [r3, #4]
    bbba:	2b00      	cmp	r3, #0
    bbbc:	d121      	bne.n	bc02 <_usb_d_dev_out_next+0x12e>
    bbbe:	687b      	ldr	r3, [r7, #4]
    bbc0:	7cdb      	ldrb	r3, [r3, #19]
    bbc2:	f003 0310 	and.w	r3, r3, #16
    bbc6:	b2db      	uxtb	r3, r3
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d01a      	beq.n	bc02 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    bbcc:	687a      	ldr	r2, [r7, #4]
    bbce:	7cd3      	ldrb	r3, [r2, #19]
    bbd0:	f36f 1304 	bfc	r3, #4, #1
    bbd4:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    bbd6:	687a      	ldr	r2, [r7, #4]
    bbd8:	7cd3      	ldrb	r3, [r2, #19]
    bbda:	f043 0320 	orr.w	r3, r3, #32
    bbde:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	68db      	ldr	r3, [r3, #12]
    bbe4:	461a      	mov	r2, r3
    bbe6:	7ffb      	ldrb	r3, [r7, #31]
    bbe8:	2100      	movs	r1, #0
    bbea:	4618      	mov	r0, r3
    bbec:	4b59      	ldr	r3, [pc, #356]	; (bd54 <_usb_d_dev_out_next+0x280>)
    bbee:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	8a1b      	ldrh	r3, [r3, #16]
    bbf4:	461a      	mov	r2, r3
    bbf6:	7ff8      	ldrb	r0, [r7, #31]
    bbf8:	2300      	movs	r3, #0
    bbfa:	2100      	movs	r1, #0
    bbfc:	4c56      	ldr	r4, [pc, #344]	; (bd58 <_usb_d_dev_out_next+0x284>)
    bbfe:	47a0      	blx	r4
		goto _out_rx_exec;
    bc00:	e090      	b.n	bd24 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    bc02:	78fb      	ldrb	r3, [r7, #3]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d010      	beq.n	bc2a <_usb_d_dev_out_next+0x156>
    bc08:	687b      	ldr	r3, [r7, #4]
    bc0a:	8a1b      	ldrh	r3, [r3, #16]
    bc0c:	8a3a      	ldrh	r2, [r7, #16]
    bc0e:	429a      	cmp	r2, r3
    bc10:	d20b      	bcs.n	bc2a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    bc12:	687a      	ldr	r2, [r7, #4]
    bc14:	7cd3      	ldrb	r3, [r2, #19]
    bc16:	f36f 1304 	bfc	r3, #4, #1
    bc1a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    bc1c:	687b      	ldr	r3, [r7, #4]
    bc1e:	689a      	ldr	r2, [r3, #8]
    bc20:	8abb      	ldrh	r3, [r7, #20]
    bc22:	441a      	add	r2, r3
    bc24:	687b      	ldr	r3, [r7, #4]
    bc26:	609a      	str	r2, [r3, #8]
    bc28:	e05c      	b.n	bce4 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    bc2a:	687b      	ldr	r3, [r7, #4]
    bc2c:	689a      	ldr	r2, [r3, #8]
    bc2e:	8afb      	ldrh	r3, [r7, #22]
    bc30:	441a      	add	r2, r3
    bc32:	687b      	ldr	r3, [r7, #4]
    bc34:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    bc36:	687b      	ldr	r3, [r7, #4]
    bc38:	689a      	ldr	r2, [r3, #8]
    bc3a:	687b      	ldr	r3, [r7, #4]
    bc3c:	685b      	ldr	r3, [r3, #4]
    bc3e:	429a      	cmp	r2, r3
    bc40:	d250      	bcs.n	bce4 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    bc42:	687b      	ldr	r3, [r7, #4]
    bc44:	685b      	ldr	r3, [r3, #4]
    bc46:	b29a      	uxth	r2, r3
    bc48:	687b      	ldr	r3, [r7, #4]
    bc4a:	689b      	ldr	r3, [r3, #8]
    bc4c:	b29b      	uxth	r3, r3
    bc4e:	1ad3      	subs	r3, r2, r3
    bc50:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    bc52:	687b      	ldr	r3, [r7, #4]
    bc54:	7cdb      	ldrb	r3, [r3, #19]
    bc56:	f003 0320 	and.w	r3, r3, #32
    bc5a:	b2db      	uxtb	r3, r3
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d010      	beq.n	bc82 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    bc60:	687b      	ldr	r3, [r7, #4]
    bc62:	8a1b      	ldrh	r3, [r3, #16]
    bc64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bc66:	429a      	cmp	r2, r3
    bc68:	d902      	bls.n	bc70 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    bc6a:	687b      	ldr	r3, [r7, #4]
    bc6c:	8a1b      	ldrh	r3, [r3, #16]
    bc6e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bc70:	687b      	ldr	r3, [r7, #4]
    bc72:	68db      	ldr	r3, [r3, #12]
    bc74:	461a      	mov	r2, r3
    bc76:	7ffb      	ldrb	r3, [r7, #31]
    bc78:	2100      	movs	r1, #0
    bc7a:	4618      	mov	r0, r3
    bc7c:	4b35      	ldr	r3, [pc, #212]	; (bd54 <_usb_d_dev_out_next+0x280>)
    bc7e:	4798      	blx	r3
    bc80:	e029      	b.n	bcd6 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    bc82:	687b      	ldr	r3, [r7, #4]
    bc84:	8a1b      	ldrh	r3, [r3, #16]
    bc86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bc88:	429a      	cmp	r2, r3
    bc8a:	d90f      	bls.n	bcac <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    bc8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bc8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bc92:	d903      	bls.n	bc9c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    bc94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bc98:	84fb      	strh	r3, [r7, #38]	; 0x26
    bc9a:	e011      	b.n	bcc0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    bc9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bc9e:	8a7b      	ldrh	r3, [r7, #18]
    bca0:	4013      	ands	r3, r2
    bca2:	b29b      	uxth	r3, r3
    bca4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bca6:	1ad3      	subs	r3, r2, r3
    bca8:	84fb      	strh	r3, [r7, #38]	; 0x26
    bcaa:	e009      	b.n	bcc0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    bcac:	687b      	ldr	r3, [r7, #4]
    bcae:	8a1b      	ldrh	r3, [r3, #16]
    bcb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bcb2:	429a      	cmp	r2, r3
    bcb4:	d204      	bcs.n	bcc0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    bcb6:	687a      	ldr	r2, [r7, #4]
    bcb8:	7cd3      	ldrb	r3, [r2, #19]
    bcba:	f043 0320 	orr.w	r3, r3, #32
    bcbe:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    bcc0:	687b      	ldr	r3, [r7, #4]
    bcc2:	681a      	ldr	r2, [r3, #0]
    bcc4:	687b      	ldr	r3, [r7, #4]
    bcc6:	689b      	ldr	r3, [r3, #8]
    bcc8:	4413      	add	r3, r2
    bcca:	461a      	mov	r2, r3
    bccc:	7ffb      	ldrb	r3, [r7, #31]
    bcce:	2100      	movs	r1, #0
    bcd0:	4618      	mov	r0, r3
    bcd2:	4b20      	ldr	r3, [pc, #128]	; (bd54 <_usb_d_dev_out_next+0x280>)
    bcd4:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    bcd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bcd8:	7ff8      	ldrb	r0, [r7, #31]
    bcda:	2300      	movs	r3, #0
    bcdc:	2100      	movs	r1, #0
    bcde:	4c1e      	ldr	r4, [pc, #120]	; (bd58 <_usb_d_dev_out_next+0x284>)
    bce0:	47a0      	blx	r4
			goto _out_rx_exec;
    bce2:	e01f      	b.n	bd24 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    bce4:	7bfb      	ldrb	r3, [r7, #15]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d006      	beq.n	bcf8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    bcea:	7ffb      	ldrb	r3, [r7, #31]
    bcec:	222d      	movs	r2, #45	; 0x2d
    bcee:	4619      	mov	r1, r3
    bcf0:	6a38      	ldr	r0, [r7, #32]
    bcf2:	4b1a      	ldr	r3, [pc, #104]	; (bd5c <_usb_d_dev_out_next+0x288>)
    bcf4:	4798      	blx	r3
    bcf6:	e005      	b.n	bd04 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    bcf8:	7ffb      	ldrb	r3, [r7, #31]
    bcfa:	2225      	movs	r2, #37	; 0x25
    bcfc:	4619      	mov	r1, r3
    bcfe:	6a38      	ldr	r0, [r7, #32]
    bd00:	4b16      	ldr	r3, [pc, #88]	; (bd5c <_usb_d_dev_out_next+0x288>)
    bd02:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    bd04:	7ffb      	ldrb	r3, [r7, #31]
    bd06:	2b00      	cmp	r3, #0
    bd08:	d107      	bne.n	bd1a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bd0a:	687b      	ldr	r3, [r7, #4]
    bd0c:	68db      	ldr	r3, [r3, #12]
    bd0e:	461a      	mov	r2, r3
    bd10:	7ffb      	ldrb	r3, [r7, #31]
    bd12:	2100      	movs	r1, #0
    bd14:	4618      	mov	r0, r3
    bd16:	4b0f      	ldr	r3, [pc, #60]	; (bd54 <_usb_d_dev_out_next+0x280>)
    bd18:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bd1a:	2100      	movs	r1, #0
    bd1c:	6878      	ldr	r0, [r7, #4]
    bd1e:	4b10      	ldr	r3, [pc, #64]	; (bd60 <_usb_d_dev_out_next+0x28c>)
    bd20:	4798      	blx	r3
	return;
    bd22:	e031      	b.n	bd88 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    bd24:	78fb      	ldrb	r3, [r7, #3]
    bd26:	f083 0301 	eor.w	r3, r3, #1
    bd2a:	b2db      	uxtb	r3, r3
    bd2c:	2b00      	cmp	r3, #0
    bd2e:	d025      	beq.n	bd7c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    bd30:	7bfb      	ldrb	r3, [r7, #15]
    bd32:	2b00      	cmp	r3, #0
    bd34:	d018      	beq.n	bd68 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    bd36:	7ffb      	ldrb	r3, [r7, #31]
    bd38:	2101      	movs	r1, #1
    bd3a:	4618      	mov	r0, r3
    bd3c:	4b09      	ldr	r3, [pc, #36]	; (bd64 <_usb_d_dev_out_next+0x290>)
    bd3e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    bd40:	232d      	movs	r3, #45	; 0x2d
    bd42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    bd46:	e012      	b.n	bd6e <_usb_d_dev_out_next+0x29a>
    bd48:	20001368 	.word	0x20001368
    bd4c:	0000b2b5 	.word	0x0000b2b5
    bd50:	000191a9 	.word	0x000191a9
    bd54:	0000b2e1 	.word	0x0000b2e1
    bd58:	0000b469 	.word	0x0000b469
    bd5c:	0000abc1 	.word	0x0000abc1
    bd60:	0000cbe5 	.word	0x0000cbe5
    bd64:	0000b4a9 	.word	0x0000b4a9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    bd68:	2325      	movs	r3, #37	; 0x25
    bd6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    bd6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    bd72:	7ffb      	ldrb	r3, [r7, #31]
    bd74:	4619      	mov	r1, r3
    bd76:	6a38      	ldr	r0, [r7, #32]
    bd78:	4b05      	ldr	r3, [pc, #20]	; (bd90 <_usb_d_dev_out_next+0x2bc>)
    bd7a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    bd7c:	7ffb      	ldrb	r3, [r7, #31]
    bd7e:	2201      	movs	r2, #1
    bd80:	2100      	movs	r1, #0
    bd82:	4618      	mov	r0, r3
    bd84:	4b03      	ldr	r3, [pc, #12]	; (bd94 <_usb_d_dev_out_next+0x2c0>)
    bd86:	4798      	blx	r3
}
    bd88:	372c      	adds	r7, #44	; 0x2c
    bd8a:	46bd      	mov	sp, r7
    bd8c:	bd90      	pop	{r4, r7, pc}
    bd8e:	bf00      	nop
    bd90:	0000ab95 	.word	0x0000ab95
    bd94:	0000b539 	.word	0x0000b539

0000bd98 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    bd98:	b580      	push	{r7, lr}
    bd9a:	b084      	sub	sp, #16
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    bda0:	687b      	ldr	r3, [r7, #4]
    bda2:	7c9b      	ldrb	r3, [r3, #18]
    bda4:	f003 030f 	and.w	r3, r3, #15
    bda8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bdaa:	687b      	ldr	r3, [r7, #4]
    bdac:	7cdb      	ldrb	r3, [r3, #19]
    bdae:	f003 0307 	and.w	r3, r3, #7
    bdb2:	b2db      	uxtb	r3, r3
    bdb4:	2b01      	cmp	r3, #1
    bdb6:	bf0c      	ite	eq
    bdb8:	2301      	moveq	r3, #1
    bdba:	2300      	movne	r3, #0
    bdbc:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    bdbe:	7bbb      	ldrb	r3, [r7, #14]
    bdc0:	f083 0301 	eor.w	r3, r3, #1
    bdc4:	b2db      	uxtb	r3, r3
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d008      	beq.n	bddc <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    bdca:	7bfb      	ldrb	r3, [r7, #15]
    bdcc:	4618      	mov	r0, r3
    bdce:	4b20      	ldr	r3, [pc, #128]	; (be50 <_usb_d_dev_handle_setup+0xb8>)
    bdd0:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    bdd2:	7bfb      	ldrb	r3, [r7, #15]
    bdd4:	4618      	mov	r0, r3
    bdd6:	4b1f      	ldr	r3, [pc, #124]	; (be54 <_usb_d_dev_handle_setup+0xbc>)
    bdd8:	4798      	blx	r3
		return;
    bdda:	e036      	b.n	be4a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	7cdb      	ldrb	r3, [r3, #19]
    bde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bde4:	b2db      	uxtb	r3, r3
    bde6:	2b00      	cmp	r3, #0
    bde8:	d010      	beq.n	be0c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    bdea:	687a      	ldr	r2, [r7, #4]
    bdec:	7cd3      	ldrb	r3, [r2, #19]
    bdee:	f36f 1386 	bfc	r3, #6, #1
    bdf2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    bdf4:	7bfb      	ldrb	r3, [r7, #15]
    bdf6:	2200      	movs	r2, #0
    bdf8:	2101      	movs	r1, #1
    bdfa:	4618      	mov	r0, r3
    bdfc:	4b16      	ldr	r3, [pc, #88]	; (be58 <_usb_d_dev_handle_setup+0xc0>)
    bdfe:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    be00:	7bfb      	ldrb	r3, [r7, #15]
    be02:	2200      	movs	r2, #0
    be04:	2100      	movs	r1, #0
    be06:	4618      	mov	r0, r3
    be08:	4b14      	ldr	r3, [pc, #80]	; (be5c <_usb_d_dev_handle_setup+0xc4>)
    be0a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    be0c:	687a      	ldr	r2, [r7, #4]
    be0e:	7cd3      	ldrb	r3, [r2, #19]
    be10:	f36f 03c3 	bfc	r3, #3, #1
    be14:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    be16:	7bfb      	ldrb	r3, [r7, #15]
    be18:	2100      	movs	r1, #0
    be1a:	4618      	mov	r0, r3
    be1c:	4b10      	ldr	r3, [pc, #64]	; (be60 <_usb_d_dev_handle_setup+0xc8>)
    be1e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    be20:	7bfb      	ldrb	r3, [r7, #15]
    be22:	2101      	movs	r1, #1
    be24:	4618      	mov	r0, r3
    be26:	4b0e      	ldr	r3, [pc, #56]	; (be60 <_usb_d_dev_handle_setup+0xc8>)
    be28:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    be2a:	7bfb      	ldrb	r3, [r7, #15]
    be2c:	216f      	movs	r1, #111	; 0x6f
    be2e:	4618      	mov	r0, r3
    be30:	4b0c      	ldr	r3, [pc, #48]	; (be64 <_usb_d_dev_handle_setup+0xcc>)
    be32:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    be34:	7bfb      	ldrb	r3, [r7, #15]
    be36:	216f      	movs	r1, #111	; 0x6f
    be38:	4618      	mov	r0, r3
    be3a:	4b0b      	ldr	r3, [pc, #44]	; (be68 <_usb_d_dev_handle_setup+0xd0>)
    be3c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    be3e:	4b0b      	ldr	r3, [pc, #44]	; (be6c <_usb_d_dev_handle_setup+0xd4>)
    be40:	689b      	ldr	r3, [r3, #8]
    be42:	687a      	ldr	r2, [r7, #4]
    be44:	7c92      	ldrb	r2, [r2, #18]
    be46:	4610      	mov	r0, r2
    be48:	4798      	blx	r3
}
    be4a:	3710      	adds	r7, #16
    be4c:	46bd      	mov	sp, r7
    be4e:	bd80      	pop	{r7, pc}
    be50:	0000b23d 	.word	0x0000b23d
    be54:	0000b1e9 	.word	0x0000b1e9
    be58:	0000b4e1 	.word	0x0000b4e1
    be5c:	0000b539 	.word	0x0000b539
    be60:	0000b4a9 	.word	0x0000b4a9
    be64:	0000afe9 	.word	0x0000afe9
    be68:	0000b039 	.word	0x0000b039
    be6c:	200012a0 	.word	0x200012a0

0000be70 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    be70:	b580      	push	{r7, lr}
    be72:	b084      	sub	sp, #16
    be74:	af00      	add	r7, sp, #0
    be76:	6078      	str	r0, [r7, #4]
    be78:	460b      	mov	r3, r1
    be7a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	7c9b      	ldrb	r3, [r3, #18]
    be80:	f003 030f 	and.w	r3, r3, #15
    be84:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    be86:	78f9      	ldrb	r1, [r7, #3]
    be88:	7bfb      	ldrb	r3, [r7, #15]
    be8a:	2200      	movs	r2, #0
    be8c:	4618      	mov	r0, r3
    be8e:	4b07      	ldr	r3, [pc, #28]	; (beac <_usb_d_dev_handle_stall+0x3c>)
    be90:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    be92:	4b07      	ldr	r3, [pc, #28]	; (beb0 <_usb_d_dev_handle_stall+0x40>)
    be94:	691b      	ldr	r3, [r3, #16]
    be96:	687a      	ldr	r2, [r7, #4]
    be98:	7c90      	ldrb	r0, [r2, #18]
    be9a:	687a      	ldr	r2, [r7, #4]
    be9c:	6892      	ldr	r2, [r2, #8]
    be9e:	2101      	movs	r1, #1
    bea0:	4798      	blx	r3
}
    bea2:	bf00      	nop
    bea4:	3710      	adds	r7, #16
    bea6:	46bd      	mov	sp, r7
    bea8:	bd80      	pop	{r7, pc}
    beaa:	bf00      	nop
    beac:	0000b19d 	.word	0x0000b19d
    beb0:	200012a0 	.word	0x200012a0

0000beb4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    beb4:	b580      	push	{r7, lr}
    beb6:	b088      	sub	sp, #32
    beb8:	af00      	add	r7, sp, #0
    beba:	6078      	str	r0, [r7, #4]
    bebc:	460b      	mov	r3, r1
    bebe:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    bec0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bec4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	7c9b      	ldrb	r3, [r3, #18]
    beca:	f003 030f 	and.w	r3, r3, #15
    bece:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    bed0:	4b61      	ldr	r3, [pc, #388]	; (c058 <_usb_d_dev_handle_trfail+0x1a4>)
    bed2:	881b      	ldrh	r3, [r3, #0]
    bed4:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    bed6:	7efb      	ldrb	r3, [r7, #27]
    bed8:	015b      	lsls	r3, r3, #5
    beda:	4a60      	ldr	r2, [pc, #384]	; (c05c <_usb_d_dev_handle_trfail+0x1a8>)
    bedc:	4413      	add	r3, r2
    bede:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    bee0:	78fb      	ldrb	r3, [r7, #3]
    bee2:	2b00      	cmp	r3, #0
    bee4:	d006      	beq.n	bef4 <_usb_d_dev_handle_trfail+0x40>
    bee6:	7efb      	ldrb	r3, [r7, #27]
    bee8:	4619      	mov	r1, r3
    beea:	69f8      	ldr	r0, [r7, #28]
    beec:	4b5c      	ldr	r3, [pc, #368]	; (c060 <_usb_d_dev_handle_trfail+0x1ac>)
    beee:	4798      	blx	r3
    bef0:	4603      	mov	r3, r0
    bef2:	e005      	b.n	bf00 <_usb_d_dev_handle_trfail+0x4c>
    bef4:	7efb      	ldrb	r3, [r7, #27]
    bef6:	4619      	mov	r1, r3
    bef8:	69f8      	ldr	r0, [r7, #28]
    befa:	4b5a      	ldr	r3, [pc, #360]	; (c064 <_usb_d_dev_handle_trfail+0x1b0>)
    befc:	4798      	blx	r3
    befe:	4603      	mov	r3, r0
    bf00:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bf02:	687b      	ldr	r3, [r7, #4]
    bf04:	7cdb      	ldrb	r3, [r3, #19]
    bf06:	f003 0307 	and.w	r3, r3, #7
    bf0a:	b2db      	uxtb	r3, r3
    bf0c:	2b01      	cmp	r3, #1
    bf0e:	bf0c      	ite	eq
    bf10:	2301      	moveq	r3, #1
    bf12:	2300      	movne	r3, #0
    bf14:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    bf16:	78fb      	ldrb	r3, [r7, #3]
    bf18:	011b      	lsls	r3, r3, #4
    bf1a:	697a      	ldr	r2, [r7, #20]
    bf1c:	4413      	add	r3, r2
    bf1e:	7a9b      	ldrb	r3, [r3, #10]
    bf20:	b2db      	uxtb	r3, r3
    bf22:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    bf24:	7cfb      	ldrb	r3, [r7, #19]
    bf26:	2b02      	cmp	r3, #2
    bf28:	d12f      	bne.n	bf8a <_usb_d_dev_handle_trfail+0xd6>
    bf2a:	7b3b      	ldrb	r3, [r7, #12]
    bf2c:	f003 0301 	and.w	r3, r3, #1
    bf30:	b2db      	uxtb	r3, r3
    bf32:	2b00      	cmp	r3, #0
    bf34:	d029      	beq.n	bf8a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    bf36:	78fb      	ldrb	r3, [r7, #3]
    bf38:	011b      	lsls	r3, r3, #4
    bf3a:	697a      	ldr	r2, [r7, #20]
    bf3c:	441a      	add	r2, r3
    bf3e:	7a93      	ldrb	r3, [r2, #10]
    bf40:	f36f 0300 	bfc	r3, #0, #1
    bf44:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    bf46:	78fb      	ldrb	r3, [r7, #3]
    bf48:	f107 0220 	add.w	r2, r7, #32
    bf4c:	4413      	add	r3, r2
    bf4e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bf52:	7efb      	ldrb	r3, [r7, #27]
    bf54:	4619      	mov	r1, r3
    bf56:	69f8      	ldr	r0, [r7, #28]
    bf58:	4b43      	ldr	r3, [pc, #268]	; (c068 <_usb_d_dev_handle_trfail+0x1b4>)
    bf5a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    bf5c:	78fb      	ldrb	r3, [r7, #3]
    bf5e:	f107 0220 	add.w	r2, r7, #32
    bf62:	4413      	add	r3, r2
    bf64:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bf68:	7efb      	ldrb	r3, [r7, #27]
    bf6a:	4619      	mov	r1, r3
    bf6c:	69f8      	ldr	r0, [r7, #28]
    bf6e:	4b3f      	ldr	r3, [pc, #252]	; (c06c <_usb_d_dev_handle_trfail+0x1b8>)
    bf70:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    bf72:	78fb      	ldrb	r3, [r7, #3]
    bf74:	2b00      	cmp	r3, #0
    bf76:	bf14      	ite	ne
    bf78:	2301      	movne	r3, #1
    bf7a:	2300      	moveq	r3, #0
    bf7c:	b2db      	uxtb	r3, r3
    bf7e:	2204      	movs	r2, #4
    bf80:	4619      	mov	r1, r3
    bf82:	6878      	ldr	r0, [r7, #4]
    bf84:	4b3a      	ldr	r3, [pc, #232]	; (c070 <_usb_d_dev_handle_trfail+0x1bc>)
    bf86:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    bf88:	e062      	b.n	c050 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    bf8a:	7b3b      	ldrb	r3, [r7, #12]
    bf8c:	f003 0302 	and.w	r3, r3, #2
    bf90:	b2db      	uxtb	r3, r3
    bf92:	2b00      	cmp	r3, #0
    bf94:	d040      	beq.n	c018 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    bf96:	78fb      	ldrb	r3, [r7, #3]
    bf98:	011b      	lsls	r3, r3, #4
    bf9a:	697a      	ldr	r2, [r7, #20]
    bf9c:	441a      	add	r2, r3
    bf9e:	7a93      	ldrb	r3, [r2, #10]
    bfa0:	f36f 0341 	bfc	r3, #1, #1
    bfa4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    bfa6:	78fb      	ldrb	r3, [r7, #3]
    bfa8:	f107 0220 	add.w	r2, r7, #32
    bfac:	4413      	add	r3, r2
    bfae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bfb2:	7efb      	ldrb	r3, [r7, #27]
    bfb4:	4619      	mov	r1, r3
    bfb6:	69f8      	ldr	r0, [r7, #28]
    bfb8:	4b2b      	ldr	r3, [pc, #172]	; (c068 <_usb_d_dev_handle_trfail+0x1b4>)
    bfba:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    bfbc:	78fb      	ldrb	r3, [r7, #3]
    bfbe:	f107 0220 	add.w	r2, r7, #32
    bfc2:	4413      	add	r3, r2
    bfc4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bfc8:	7efb      	ldrb	r3, [r7, #27]
    bfca:	4619      	mov	r1, r3
    bfcc:	69f8      	ldr	r0, [r7, #28]
    bfce:	4b27      	ldr	r3, [pc, #156]	; (c06c <_usb_d_dev_handle_trfail+0x1b8>)
    bfd0:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    bfd2:	7cbb      	ldrb	r3, [r7, #18]
    bfd4:	2b00      	cmp	r3, #0
    bfd6:	d03b      	beq.n	c050 <_usb_d_dev_handle_trfail+0x19c>
    bfd8:	687b      	ldr	r3, [r7, #4]
    bfda:	7cdb      	ldrb	r3, [r3, #19]
    bfdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bfe0:	b2db      	uxtb	r3, r3
    bfe2:	2b00      	cmp	r3, #0
    bfe4:	d034      	beq.n	c050 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    bfe6:	687b      	ldr	r3, [r7, #4]
    bfe8:	7cdb      	ldrb	r3, [r3, #19]
    bfea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    bfee:	b2db      	uxtb	r3, r3
    bff0:	461a      	mov	r2, r3
    bff2:	78fb      	ldrb	r3, [r7, #3]
    bff4:	4293      	cmp	r3, r2
    bff6:	d02b      	beq.n	c050 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    bff8:	687b      	ldr	r3, [r7, #4]
    bffa:	7cdb      	ldrb	r3, [r3, #19]
    bffc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c000:	b2db      	uxtb	r3, r3
    c002:	2b00      	cmp	r3, #0
    c004:	bf14      	ite	ne
    c006:	2301      	movne	r3, #1
    c008:	2300      	moveq	r3, #0
    c00a:	b2db      	uxtb	r3, r3
    c00c:	2200      	movs	r2, #0
    c00e:	4619      	mov	r1, r3
    c010:	6878      	ldr	r0, [r7, #4]
    c012:	4b17      	ldr	r3, [pc, #92]	; (c070 <_usb_d_dev_handle_trfail+0x1bc>)
    c014:	4798      	blx	r3
}
    c016:	e01b      	b.n	c050 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    c018:	78fa      	ldrb	r2, [r7, #3]
    c01a:	7efb      	ldrb	r3, [r7, #27]
    c01c:	4611      	mov	r1, r2
    c01e:	4618      	mov	r0, r3
    c020:	4b14      	ldr	r3, [pc, #80]	; (c074 <_usb_d_dev_handle_trfail+0x1c0>)
    c022:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c024:	78fb      	ldrb	r3, [r7, #3]
    c026:	f107 0220 	add.w	r2, r7, #32
    c02a:	4413      	add	r3, r2
    c02c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c030:	7efb      	ldrb	r3, [r7, #27]
    c032:	4619      	mov	r1, r3
    c034:	69f8      	ldr	r0, [r7, #28]
    c036:	4b0c      	ldr	r3, [pc, #48]	; (c068 <_usb_d_dev_handle_trfail+0x1b4>)
    c038:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c03a:	78fb      	ldrb	r3, [r7, #3]
    c03c:	f107 0220 	add.w	r2, r7, #32
    c040:	4413      	add	r3, r2
    c042:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c046:	7efb      	ldrb	r3, [r7, #27]
    c048:	4619      	mov	r1, r3
    c04a:	69f8      	ldr	r0, [r7, #28]
    c04c:	4b07      	ldr	r3, [pc, #28]	; (c06c <_usb_d_dev_handle_trfail+0x1b8>)
    c04e:	4798      	blx	r3
}
    c050:	bf00      	nop
    c052:	3720      	adds	r7, #32
    c054:	46bd      	mov	sp, r7
    c056:	bd80      	pop	{r7, pc}
    c058:	00019b40 	.word	0x00019b40
    c05c:	20001368 	.word	0x20001368
    c060:	0000ac1d 	.word	0x0000ac1d
    c064:	0000abed 	.word	0x0000abed
    c068:	0000aac1 	.word	0x0000aac1
    c06c:	0000abc1 	.word	0x0000abc1
    c070:	0000cc2d 	.word	0x0000cc2d
    c074:	0000b4a9 	.word	0x0000b4a9

0000c078 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c078:	b580      	push	{r7, lr}
    c07a:	b082      	sub	sp, #8
    c07c:	af00      	add	r7, sp, #0
    c07e:	6078      	str	r0, [r7, #4]
    c080:	460b      	mov	r3, r1
    c082:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c084:	78fb      	ldrb	r3, [r7, #3]
    c086:	f003 0310 	and.w	r3, r3, #16
    c08a:	2b00      	cmp	r3, #0
    c08c:	d003      	beq.n	c096 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    c08e:	6878      	ldr	r0, [r7, #4]
    c090:	4b0c      	ldr	r3, [pc, #48]	; (c0c4 <_usb_d_dev_trans_setup_isr+0x4c>)
    c092:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    c094:	e012      	b.n	c0bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c096:	78fb      	ldrb	r3, [r7, #3]
    c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c09c:	2b00      	cmp	r3, #0
    c09e:	d004      	beq.n	c0aa <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    c0a0:	2101      	movs	r1, #1
    c0a2:	6878      	ldr	r0, [r7, #4]
    c0a4:	4b08      	ldr	r3, [pc, #32]	; (c0c8 <_usb_d_dev_trans_setup_isr+0x50>)
    c0a6:	4798      	blx	r3
}
    c0a8:	e008      	b.n	c0bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c0aa:	78fb      	ldrb	r3, [r7, #3]
    c0ac:	f003 0320 	and.w	r3, r3, #32
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d003      	beq.n	c0bc <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    c0b4:	2100      	movs	r1, #0
    c0b6:	6878      	ldr	r0, [r7, #4]
    c0b8:	4b03      	ldr	r3, [pc, #12]	; (c0c8 <_usb_d_dev_trans_setup_isr+0x50>)
    c0ba:	4798      	blx	r3
}
    c0bc:	bf00      	nop
    c0be:	3708      	adds	r7, #8
    c0c0:	46bd      	mov	sp, r7
    c0c2:	bd80      	pop	{r7, pc}
    c0c4:	0000bd99 	.word	0x0000bd99
    c0c8:	0000be71 	.word	0x0000be71

0000c0cc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b082      	sub	sp, #8
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	6078      	str	r0, [r7, #4]
    c0d4:	460b      	mov	r3, r1
    c0d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c0d8:	78fb      	ldrb	r3, [r7, #3]
    c0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d004      	beq.n	c0ec <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    c0e2:	2101      	movs	r1, #1
    c0e4:	6878      	ldr	r0, [r7, #4]
    c0e6:	4b1a      	ldr	r3, [pc, #104]	; (c150 <_usb_d_dev_trans_in_isr+0x84>)
    c0e8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c0ea:	e02c      	b.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c0ec:	78fb      	ldrb	r3, [r7, #3]
    c0ee:	f003 0308 	and.w	r3, r3, #8
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	d004      	beq.n	c100 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    c0f6:	2101      	movs	r1, #1
    c0f8:	6878      	ldr	r0, [r7, #4]
    c0fa:	4b16      	ldr	r3, [pc, #88]	; (c154 <_usb_d_dev_trans_in_isr+0x88>)
    c0fc:	4798      	blx	r3
}
    c0fe:	e022      	b.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c100:	78fb      	ldrb	r3, [r7, #3]
    c102:	f003 0302 	and.w	r3, r3, #2
    c106:	2b00      	cmp	r3, #0
    c108:	d004      	beq.n	c114 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    c10a:	2101      	movs	r1, #1
    c10c:	6878      	ldr	r0, [r7, #4]
    c10e:	4b12      	ldr	r3, [pc, #72]	; (c158 <_usb_d_dev_trans_in_isr+0x8c>)
    c110:	4798      	blx	r3
}
    c112:	e018      	b.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c114:	687b      	ldr	r3, [r7, #4]
    c116:	7cdb      	ldrb	r3, [r3, #19]
    c118:	f003 0307 	and.w	r3, r3, #7
    c11c:	b2db      	uxtb	r3, r3
    c11e:	2b01      	cmp	r3, #1
    c120:	d111      	bne.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c122:	78fb      	ldrb	r3, [r7, #3]
    c124:	f003 0304 	and.w	r3, r3, #4
    c128:	2b00      	cmp	r3, #0
    c12a:	d004      	beq.n	c136 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    c12c:	2100      	movs	r1, #0
    c12e:	6878      	ldr	r0, [r7, #4]
    c130:	4b08      	ldr	r3, [pc, #32]	; (c154 <_usb_d_dev_trans_in_isr+0x88>)
    c132:	4798      	blx	r3
}
    c134:	e007      	b.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c136:	78fb      	ldrb	r3, [r7, #3]
    c138:	f003 0310 	and.w	r3, r3, #16
    c13c:	2b00      	cmp	r3, #0
    c13e:	d002      	beq.n	c146 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c140:	6878      	ldr	r0, [r7, #4]
    c142:	4b06      	ldr	r3, [pc, #24]	; (c15c <_usb_d_dev_trans_in_isr+0x90>)
    c144:	4798      	blx	r3
}
    c146:	bf00      	nop
    c148:	3708      	adds	r7, #8
    c14a:	46bd      	mov	sp, r7
    c14c:	bd80      	pop	{r7, pc}
    c14e:	bf00      	nop
    c150:	0000be71 	.word	0x0000be71
    c154:	0000beb5 	.word	0x0000beb5
    c158:	0000b8bd 	.word	0x0000b8bd
    c15c:	0000bd99 	.word	0x0000bd99

0000c160 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c160:	b580      	push	{r7, lr}
    c162:	b082      	sub	sp, #8
    c164:	af00      	add	r7, sp, #0
    c166:	6078      	str	r0, [r7, #4]
    c168:	460b      	mov	r3, r1
    c16a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c16c:	78fb      	ldrb	r3, [r7, #3]
    c16e:	f003 0320 	and.w	r3, r3, #32
    c172:	2b00      	cmp	r3, #0
    c174:	d004      	beq.n	c180 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    c176:	2100      	movs	r1, #0
    c178:	6878      	ldr	r0, [r7, #4]
    c17a:	4b1a      	ldr	r3, [pc, #104]	; (c1e4 <_usb_d_dev_trans_out_isr+0x84>)
    c17c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c17e:	e02c      	b.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c180:	78fb      	ldrb	r3, [r7, #3]
    c182:	f003 0304 	and.w	r3, r3, #4
    c186:	2b00      	cmp	r3, #0
    c188:	d004      	beq.n	c194 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    c18a:	2100      	movs	r1, #0
    c18c:	6878      	ldr	r0, [r7, #4]
    c18e:	4b16      	ldr	r3, [pc, #88]	; (c1e8 <_usb_d_dev_trans_out_isr+0x88>)
    c190:	4798      	blx	r3
}
    c192:	e022      	b.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c194:	78fb      	ldrb	r3, [r7, #3]
    c196:	f003 0301 	and.w	r3, r3, #1
    c19a:	2b00      	cmp	r3, #0
    c19c:	d004      	beq.n	c1a8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    c19e:	2101      	movs	r1, #1
    c1a0:	6878      	ldr	r0, [r7, #4]
    c1a2:	4b12      	ldr	r3, [pc, #72]	; (c1ec <_usb_d_dev_trans_out_isr+0x8c>)
    c1a4:	4798      	blx	r3
}
    c1a6:	e018      	b.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c1a8:	687b      	ldr	r3, [r7, #4]
    c1aa:	7cdb      	ldrb	r3, [r3, #19]
    c1ac:	f003 0307 	and.w	r3, r3, #7
    c1b0:	b2db      	uxtb	r3, r3
    c1b2:	2b01      	cmp	r3, #1
    c1b4:	d111      	bne.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c1b6:	78fb      	ldrb	r3, [r7, #3]
    c1b8:	f003 0308 	and.w	r3, r3, #8
    c1bc:	2b00      	cmp	r3, #0
    c1be:	d004      	beq.n	c1ca <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    c1c0:	2101      	movs	r1, #1
    c1c2:	6878      	ldr	r0, [r7, #4]
    c1c4:	4b08      	ldr	r3, [pc, #32]	; (c1e8 <_usb_d_dev_trans_out_isr+0x88>)
    c1c6:	4798      	blx	r3
}
    c1c8:	e007      	b.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c1ca:	78fb      	ldrb	r3, [r7, #3]
    c1cc:	f003 0310 	and.w	r3, r3, #16
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d002      	beq.n	c1da <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c1d4:	6878      	ldr	r0, [r7, #4]
    c1d6:	4b06      	ldr	r3, [pc, #24]	; (c1f0 <_usb_d_dev_trans_out_isr+0x90>)
    c1d8:	4798      	blx	r3
}
    c1da:	bf00      	nop
    c1dc:	3708      	adds	r7, #8
    c1de:	46bd      	mov	sp, r7
    c1e0:	bd80      	pop	{r7, pc}
    c1e2:	bf00      	nop
    c1e4:	0000be71 	.word	0x0000be71
    c1e8:	0000beb5 	.word	0x0000beb5
    c1ec:	0000bad5 	.word	0x0000bad5
    c1f0:	0000bd99 	.word	0x0000bd99

0000c1f4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b084      	sub	sp, #16
    c1f8:	af00      	add	r7, sp, #0
    c1fa:	6078      	str	r0, [r7, #4]
    c1fc:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    c1fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c202:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c204:	683b      	ldr	r3, [r7, #0]
    c206:	7c9b      	ldrb	r3, [r3, #18]
    c208:	f003 030f 	and.w	r3, r3, #15
    c20c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    c20e:	7afb      	ldrb	r3, [r7, #11]
    c210:	2201      	movs	r2, #1
    c212:	409a      	lsls	r2, r3
    c214:	687b      	ldr	r3, [r7, #4]
    c216:	4013      	ands	r3, r2
    c218:	2b00      	cmp	r3, #0
    c21a:	d03d      	beq.n	c298 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c21c:	7afb      	ldrb	r3, [r7, #11]
    c21e:	68fa      	ldr	r2, [r7, #12]
    c220:	3308      	adds	r3, #8
    c222:	015b      	lsls	r3, r3, #5
    c224:	4413      	add	r3, r2
    c226:	3307      	adds	r3, #7
    c228:	781b      	ldrb	r3, [r3, #0]
    c22a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c22c:	7afb      	ldrb	r3, [r7, #11]
    c22e:	68fa      	ldr	r2, [r7, #12]
    c230:	015b      	lsls	r3, r3, #5
    c232:	4413      	add	r3, r2
    c234:	f203 1309 	addw	r3, r3, #265	; 0x109
    c238:	781b      	ldrb	r3, [r3, #0]
    c23a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    c23c:	7aba      	ldrb	r2, [r7, #10]
    c23e:	7a7b      	ldrb	r3, [r7, #9]
    c240:	4013      	ands	r3, r2
    c242:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    c244:	7abb      	ldrb	r3, [r7, #10]
    c246:	2b00      	cmp	r3, #0
    c248:	d027      	beq.n	c29a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c24a:	683b      	ldr	r3, [r7, #0]
    c24c:	7cdb      	ldrb	r3, [r3, #19]
    c24e:	f003 0307 	and.w	r3, r3, #7
    c252:	b2db      	uxtb	r3, r3
    c254:	2b01      	cmp	r3, #1
    c256:	d10c      	bne.n	c272 <_usb_d_dev_handle_eps+0x7e>
    c258:	683b      	ldr	r3, [r7, #0]
    c25a:	7cdb      	ldrb	r3, [r3, #19]
    c25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c260:	b2db      	uxtb	r3, r3
    c262:	2b00      	cmp	r3, #0
    c264:	d105      	bne.n	c272 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    c266:	7abb      	ldrb	r3, [r7, #10]
    c268:	4619      	mov	r1, r3
    c26a:	6838      	ldr	r0, [r7, #0]
    c26c:	4b0c      	ldr	r3, [pc, #48]	; (c2a0 <_usb_d_dev_handle_eps+0xac>)
    c26e:	4798      	blx	r3
    c270:	e013      	b.n	c29a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c272:	683b      	ldr	r3, [r7, #0]
    c274:	7cdb      	ldrb	r3, [r3, #19]
    c276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c27a:	b2db      	uxtb	r3, r3
    c27c:	2b00      	cmp	r3, #0
    c27e:	d005      	beq.n	c28c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    c280:	7abb      	ldrb	r3, [r7, #10]
    c282:	4619      	mov	r1, r3
    c284:	6838      	ldr	r0, [r7, #0]
    c286:	4b07      	ldr	r3, [pc, #28]	; (c2a4 <_usb_d_dev_handle_eps+0xb0>)
    c288:	4798      	blx	r3
    c28a:	e006      	b.n	c29a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    c28c:	7abb      	ldrb	r3, [r7, #10]
    c28e:	4619      	mov	r1, r3
    c290:	6838      	ldr	r0, [r7, #0]
    c292:	4b05      	ldr	r3, [pc, #20]	; (c2a8 <_usb_d_dev_handle_eps+0xb4>)
    c294:	4798      	blx	r3
    c296:	e000      	b.n	c29a <_usb_d_dev_handle_eps+0xa6>
		return;
    c298:	bf00      	nop
		}
	}
}
    c29a:	3710      	adds	r7, #16
    c29c:	46bd      	mov	sp, r7
    c29e:	bd80      	pop	{r7, pc}
    c2a0:	0000c079 	.word	0x0000c079
    c2a4:	0000c0cd 	.word	0x0000c0cd
    c2a8:	0000c161 	.word	0x0000c161

0000c2ac <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b084      	sub	sp, #16
    c2b0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c2b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c2b6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c2b8:	68bb      	ldr	r3, [r7, #8]
    c2ba:	8c1b      	ldrh	r3, [r3, #32]
    c2bc:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    c2be:	88fb      	ldrh	r3, [r7, #6]
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d104      	bne.n	c2ce <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    c2c4:	4b13      	ldr	r3, [pc, #76]	; (c314 <_usb_d_dev_handler+0x68>)
    c2c6:	4798      	blx	r3
    c2c8:	4603      	mov	r3, r0
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d11e      	bne.n	c30c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    c2ce:	2300      	movs	r3, #0
    c2d0:	73fb      	strb	r3, [r7, #15]
    c2d2:	e017      	b.n	c304 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    c2d4:	7bfa      	ldrb	r2, [r7, #15]
    c2d6:	4613      	mov	r3, r2
    c2d8:	009b      	lsls	r3, r3, #2
    c2da:	4413      	add	r3, r2
    c2dc:	009b      	lsls	r3, r3, #2
    c2de:	3310      	adds	r3, #16
    c2e0:	4a0d      	ldr	r2, [pc, #52]	; (c318 <_usb_d_dev_handler+0x6c>)
    c2e2:	4413      	add	r3, r2
    c2e4:	3304      	adds	r3, #4
    c2e6:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    c2e8:	683b      	ldr	r3, [r7, #0]
    c2ea:	7c9b      	ldrb	r3, [r3, #18]
    c2ec:	2bff      	cmp	r3, #255	; 0xff
    c2ee:	d005      	beq.n	c2fc <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    c2f0:	88fb      	ldrh	r3, [r7, #6]
    c2f2:	6839      	ldr	r1, [r7, #0]
    c2f4:	4618      	mov	r0, r3
    c2f6:	4b09      	ldr	r3, [pc, #36]	; (c31c <_usb_d_dev_handler+0x70>)
    c2f8:	4798      	blx	r3
    c2fa:	e000      	b.n	c2fe <_usb_d_dev_handler+0x52>
			continue;
    c2fc:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    c2fe:	7bfb      	ldrb	r3, [r7, #15]
    c300:	3301      	adds	r3, #1
    c302:	73fb      	strb	r3, [r7, #15]
    c304:	7bfb      	ldrb	r3, [r7, #15]
    c306:	2b08      	cmp	r3, #8
    c308:	d9e4      	bls.n	c2d4 <_usb_d_dev_handler+0x28>
    c30a:	e000      	b.n	c30e <_usb_d_dev_handler+0x62>
			return;
    c30c:	bf00      	nop
	}
}
    c30e:	3710      	adds	r7, #16
    c310:	46bd      	mov	sp, r7
    c312:	bd80      	pop	{r7, pc}
    c314:	0000b805 	.word	0x0000b805
    c318:	200012a0 	.word	0x200012a0
    c31c:	0000c1f5 	.word	0x0000c1f5

0000c320 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    c326:	2300      	movs	r3, #0
    c328:	71fb      	strb	r3, [r7, #7]
    c32a:	e023      	b.n	c374 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c32c:	79fa      	ldrb	r2, [r7, #7]
    c32e:	4613      	mov	r3, r2
    c330:	009b      	lsls	r3, r3, #2
    c332:	4413      	add	r3, r2
    c334:	009b      	lsls	r3, r3, #2
    c336:	3310      	adds	r3, #16
    c338:	4a14      	ldr	r2, [pc, #80]	; (c38c <_usb_d_dev_reset_epts+0x6c>)
    c33a:	4413      	add	r3, r2
    c33c:	3304      	adds	r3, #4
    c33e:	2103      	movs	r1, #3
    c340:	4618      	mov	r0, r3
    c342:	4b13      	ldr	r3, [pc, #76]	; (c390 <_usb_d_dev_reset_epts+0x70>)
    c344:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    c346:	79fa      	ldrb	r2, [r7, #7]
    c348:	4910      	ldr	r1, [pc, #64]	; (c38c <_usb_d_dev_reset_epts+0x6c>)
    c34a:	4613      	mov	r3, r2
    c34c:	009b      	lsls	r3, r3, #2
    c34e:	4413      	add	r3, r2
    c350:	009b      	lsls	r3, r3, #2
    c352:	440b      	add	r3, r1
    c354:	3326      	adds	r3, #38	; 0x26
    c356:	22ff      	movs	r2, #255	; 0xff
    c358:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    c35a:	79fa      	ldrb	r2, [r7, #7]
    c35c:	490b      	ldr	r1, [pc, #44]	; (c38c <_usb_d_dev_reset_epts+0x6c>)
    c35e:	4613      	mov	r3, r2
    c360:	009b      	lsls	r3, r3, #2
    c362:	4413      	add	r3, r2
    c364:	009b      	lsls	r3, r3, #2
    c366:	440b      	add	r3, r1
    c368:	3327      	adds	r3, #39	; 0x27
    c36a:	2200      	movs	r2, #0
    c36c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    c36e:	79fb      	ldrb	r3, [r7, #7]
    c370:	3301      	adds	r3, #1
    c372:	71fb      	strb	r3, [r7, #7]
    c374:	79fb      	ldrb	r3, [r7, #7]
    c376:	2b08      	cmp	r3, #8
    c378:	d9d8      	bls.n	c32c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c37a:	22a0      	movs	r2, #160	; 0xa0
    c37c:	2100      	movs	r1, #0
    c37e:	4805      	ldr	r0, [pc, #20]	; (c394 <_usb_d_dev_reset_epts+0x74>)
    c380:	4b05      	ldr	r3, [pc, #20]	; (c398 <_usb_d_dev_reset_epts+0x78>)
    c382:	4798      	blx	r3
}
    c384:	bf00      	nop
    c386:	3708      	adds	r7, #8
    c388:	46bd      	mov	sp, r7
    c38a:	bd80      	pop	{r7, pc}
    c38c:	200012a0 	.word	0x200012a0
    c390:	0000cbe5 	.word	0x0000cbe5
    c394:	20001368 	.word	0x20001368
    c398:	000192dd 	.word	0x000192dd

0000c39c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b084      	sub	sp, #16
    c3a0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    c3a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c3a6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    c3a8:	2301      	movs	r3, #1
    c3aa:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    c3ac:	2304      	movs	r3, #4
    c3ae:	713b      	strb	r3, [r7, #4]
    c3b0:	2300      	movs	r3, #0
    c3b2:	717b      	strb	r3, [r7, #5]
    c3b4:	2300      	movs	r3, #0
    c3b6:	71bb      	strb	r3, [r7, #6]
    c3b8:	2300      	movs	r3, #0
    c3ba:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c3bc:	2101      	movs	r1, #1
    c3be:	68f8      	ldr	r0, [r7, #12]
    c3c0:	4b26      	ldr	r3, [pc, #152]	; (c45c <_usb_d_dev_init+0xc0>)
    c3c2:	4798      	blx	r3
    c3c4:	4603      	mov	r3, r0
    c3c6:	f083 0301 	eor.w	r3, r3, #1
    c3ca:	b2db      	uxtb	r3, r3
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d011      	beq.n	c3f4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c3d0:	2102      	movs	r1, #2
    c3d2:	68f8      	ldr	r0, [r7, #12]
    c3d4:	4b22      	ldr	r3, [pc, #136]	; (c460 <_usb_d_dev_init+0xc4>)
    c3d6:	4798      	blx	r3
    c3d8:	4603      	mov	r3, r0
    c3da:	2b00      	cmp	r3, #0
    c3dc:	d006      	beq.n	c3ec <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    c3de:	68f8      	ldr	r0, [r7, #12]
    c3e0:	4b20      	ldr	r3, [pc, #128]	; (c464 <_usb_d_dev_init+0xc8>)
    c3e2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    c3e4:	2102      	movs	r1, #2
    c3e6:	68f8      	ldr	r0, [r7, #12]
    c3e8:	4b1f      	ldr	r3, [pc, #124]	; (c468 <_usb_d_dev_init+0xcc>)
    c3ea:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    c3ec:	2101      	movs	r1, #1
    c3ee:	68f8      	ldr	r0, [r7, #12]
    c3f0:	4b1e      	ldr	r3, [pc, #120]	; (c46c <_usb_d_dev_init+0xd0>)
    c3f2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    c3f4:	2101      	movs	r1, #1
    c3f6:	68f8      	ldr	r0, [r7, #12]
    c3f8:	4b1b      	ldr	r3, [pc, #108]	; (c468 <_usb_d_dev_init+0xcc>)
    c3fa:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c3fc:	4b1c      	ldr	r3, [pc, #112]	; (c470 <_usb_d_dev_init+0xd4>)
    c3fe:	4a1d      	ldr	r2, [pc, #116]	; (c474 <_usb_d_dev_init+0xd8>)
    c400:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c402:	4b1b      	ldr	r3, [pc, #108]	; (c470 <_usb_d_dev_init+0xd4>)
    c404:	4a1b      	ldr	r2, [pc, #108]	; (c474 <_usb_d_dev_init+0xd8>)
    c406:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    c408:	4b19      	ldr	r3, [pc, #100]	; (c470 <_usb_d_dev_init+0xd4>)
    c40a:	4a1a      	ldr	r2, [pc, #104]	; (c474 <_usb_d_dev_init+0xd8>)
    c40c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c40e:	4b18      	ldr	r3, [pc, #96]	; (c470 <_usb_d_dev_init+0xd4>)
    c410:	4a18      	ldr	r2, [pc, #96]	; (c474 <_usb_d_dev_init+0xd8>)
    c412:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c414:	4b16      	ldr	r3, [pc, #88]	; (c470 <_usb_d_dev_init+0xd4>)
    c416:	4a17      	ldr	r2, [pc, #92]	; (c474 <_usb_d_dev_init+0xd8>)
    c418:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    c41a:	4b17      	ldr	r3, [pc, #92]	; (c478 <_usb_d_dev_init+0xdc>)
    c41c:	4798      	blx	r3

	_usb_load_calib();
    c41e:	4b17      	ldr	r3, [pc, #92]	; (c47c <_usb_d_dev_init+0xe0>)
    c420:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    c422:	2104      	movs	r1, #4
    c424:	68f8      	ldr	r0, [r7, #12]
    c426:	4b11      	ldr	r3, [pc, #68]	; (c46c <_usb_d_dev_init+0xd0>)
    c428:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c42a:	4b15      	ldr	r3, [pc, #84]	; (c480 <_usb_d_dev_init+0xe4>)
    c42c:	4619      	mov	r1, r3
    c42e:	68f8      	ldr	r0, [r7, #12]
    c430:	4b14      	ldr	r3, [pc, #80]	; (c484 <_usb_d_dev_init+0xe8>)
    c432:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    c434:	7afb      	ldrb	r3, [r7, #11]
    c436:	f107 0210 	add.w	r2, r7, #16
    c43a:	4413      	add	r3, r2
    c43c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    c440:	f043 0301 	orr.w	r3, r3, #1
    c444:	b2db      	uxtb	r3, r3
    c446:	b29b      	uxth	r3, r3
    c448:	4619      	mov	r1, r3
    c44a:	68f8      	ldr	r0, [r7, #12]
    c44c:	4b0e      	ldr	r3, [pc, #56]	; (c488 <_usb_d_dev_init+0xec>)
    c44e:	4798      	blx	r3

	return ERR_NONE;
    c450:	2300      	movs	r3, #0
}
    c452:	4618      	mov	r0, r3
    c454:	3710      	adds	r7, #16
    c456:	46bd      	mov	sp, r7
    c458:	bd80      	pop	{r7, pc}
    c45a:	bf00      	nop
    c45c:	0000aa35 	.word	0x0000aa35
    c460:	0000ad85 	.word	0x0000ad85
    c464:	0000ad59 	.word	0x0000ad59
    c468:	0000aa0b 	.word	0x0000aa0b
    c46c:	0000adb5 	.word	0x0000adb5
    c470:	200012a0 	.word	0x200012a0
    c474:	0000ae7d 	.word	0x0000ae7d
    c478:	0000c321 	.word	0x0000c321
    c47c:	0000ae95 	.word	0x0000ae95
    c480:	20001368 	.word	0x20001368
    c484:	0000ae61 	.word	0x0000ae61
    c488:	0000ae25 	.word	0x0000ae25

0000c48c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    c48c:	b580      	push	{r7, lr}
    c48e:	b082      	sub	sp, #8
    c490:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c492:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c496:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    c498:	2103      	movs	r1, #3
    c49a:	6878      	ldr	r0, [r7, #4]
    c49c:	4b17      	ldr	r3, [pc, #92]	; (c4fc <_usb_d_dev_enable+0x70>)
    c49e:	4798      	blx	r3
    c4a0:	4603      	mov	r3, r0
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d002      	beq.n	c4ac <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    c4a6:	f06f 0310 	mvn.w	r3, #16
    c4aa:	e023      	b.n	c4f4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    c4ac:	6878      	ldr	r0, [r7, #4]
    c4ae:	4b14      	ldr	r3, [pc, #80]	; (c500 <_usb_d_dev_enable+0x74>)
    c4b0:	4798      	blx	r3
    c4b2:	4603      	mov	r3, r0
    c4b4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    c4b6:	78fb      	ldrb	r3, [r7, #3]
    c4b8:	f003 0302 	and.w	r3, r3, #2
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d107      	bne.n	c4d0 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    c4c0:	78fb      	ldrb	r3, [r7, #3]
    c4c2:	f043 0302 	orr.w	r3, r3, #2
    c4c6:	b2db      	uxtb	r3, r3
    c4c8:	4619      	mov	r1, r3
    c4ca:	6878      	ldr	r0, [r7, #4]
    c4cc:	4b0d      	ldr	r3, [pc, #52]	; (c504 <_usb_d_dev_enable+0x78>)
    c4ce:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    c4d0:	2050      	movs	r0, #80	; 0x50
    c4d2:	4b0d      	ldr	r3, [pc, #52]	; (c508 <_usb_d_dev_enable+0x7c>)
    c4d4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    c4d6:	2051      	movs	r0, #81	; 0x51
    c4d8:	4b0b      	ldr	r3, [pc, #44]	; (c508 <_usb_d_dev_enable+0x7c>)
    c4da:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    c4dc:	2052      	movs	r0, #82	; 0x52
    c4de:	4b0a      	ldr	r3, [pc, #40]	; (c508 <_usb_d_dev_enable+0x7c>)
    c4e0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    c4e2:	2053      	movs	r0, #83	; 0x53
    c4e4:	4b08      	ldr	r3, [pc, #32]	; (c508 <_usb_d_dev_enable+0x7c>)
    c4e6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    c4e8:	f240 218d 	movw	r1, #653	; 0x28d
    c4ec:	6878      	ldr	r0, [r7, #4]
    c4ee:	4b07      	ldr	r3, [pc, #28]	; (c50c <_usb_d_dev_enable+0x80>)
    c4f0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    c4f2:	2300      	movs	r3, #0
}
    c4f4:	4618      	mov	r0, r3
    c4f6:	3708      	adds	r7, #8
    c4f8:	46bd      	mov	sp, r7
    c4fa:	bd80      	pop	{r7, pc}
    c4fc:	0000ad2f 	.word	0x0000ad2f
    c500:	0000addd 	.word	0x0000addd
    c504:	0000adb5 	.word	0x0000adb5
    c508:	0000a941 	.word	0x0000a941
    c50c:	0000acd9 	.word	0x0000acd9

0000c510 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    c510:	b580      	push	{r7, lr}
    c512:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    c514:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c518:	4b01      	ldr	r3, [pc, #4]	; (c520 <_usb_d_dev_attach+0x10>)
    c51a:	4798      	blx	r3
}
    c51c:	bf00      	nop
    c51e:	bd80      	pop	{r7, pc}
    c520:	0000ae01 	.word	0x0000ae01

0000c524 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    c524:	b580      	push	{r7, lr}
    c526:	b082      	sub	sp, #8
    c528:	af00      	add	r7, sp, #0
    c52a:	4603      	mov	r3, r0
    c52c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    c52e:	79fb      	ldrb	r3, [r7, #7]
    c530:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c534:	b2db      	uxtb	r3, r3
    c536:	4619      	mov	r1, r3
    c538:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c53c:	4b02      	ldr	r3, [pc, #8]	; (c548 <_usb_d_dev_set_address+0x24>)
    c53e:	4798      	blx	r3
}
    c540:	bf00      	nop
    c542:	3708      	adds	r7, #8
    c544:	46bd      	mov	sp, r7
    c546:	bd80      	pop	{r7, pc}
    c548:	0000ae43 	.word	0x0000ae43

0000c54c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    c54c:	b590      	push	{r4, r7, lr}
    c54e:	b085      	sub	sp, #20
    c550:	af00      	add	r7, sp, #0
    c552:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    c554:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c558:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	7c9b      	ldrb	r3, [r3, #18]
    c55e:	f003 030f 	and.w	r3, r3, #15
    c562:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	68db      	ldr	r3, [r3, #12]
    c568:	461a      	mov	r2, r3
    c56a:	7afb      	ldrb	r3, [r7, #11]
    c56c:	2100      	movs	r1, #0
    c56e:	4618      	mov	r0, r3
    c570:	4b0f      	ldr	r3, [pc, #60]	; (c5b0 <_usb_d_dev_trans_setup+0x64>)
    c572:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c574:	687b      	ldr	r3, [r7, #4]
    c576:	8a1b      	ldrh	r3, [r3, #16]
    c578:	461a      	mov	r2, r3
    c57a:	7af8      	ldrb	r0, [r7, #11]
    c57c:	2300      	movs	r3, #0
    c57e:	2100      	movs	r1, #0
    c580:	4c0c      	ldr	r4, [pc, #48]	; (c5b4 <_usb_d_dev_trans_setup+0x68>)
    c582:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    c584:	7afb      	ldrb	r3, [r7, #11]
    c586:	22b0      	movs	r2, #176	; 0xb0
    c588:	4619      	mov	r1, r3
    c58a:	68f8      	ldr	r0, [r7, #12]
    c58c:	4b0a      	ldr	r3, [pc, #40]	; (c5b8 <_usb_d_dev_trans_setup+0x6c>)
    c58e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    c590:	7afb      	ldrb	r3, [r7, #11]
    c592:	2200      	movs	r2, #0
    c594:	2100      	movs	r1, #0
    c596:	4618      	mov	r0, r3
    c598:	4b08      	ldr	r3, [pc, #32]	; (c5bc <_usb_d_dev_trans_setup+0x70>)
    c59a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    c59c:	7afb      	ldrb	r3, [r7, #11]
    c59e:	2210      	movs	r2, #16
    c5a0:	4619      	mov	r1, r3
    c5a2:	68f8      	ldr	r0, [r7, #12]
    c5a4:	4b06      	ldr	r3, [pc, #24]	; (c5c0 <_usb_d_dev_trans_setup+0x74>)
    c5a6:	4798      	blx	r3
}
    c5a8:	bf00      	nop
    c5aa:	3714      	adds	r7, #20
    c5ac:	46bd      	mov	sp, r7
    c5ae:	bd90      	pop	{r4, r7, pc}
    c5b0:	0000b2e1 	.word	0x0000b2e1
    c5b4:	0000b469 	.word	0x0000b469
    c5b8:	0000ab41 	.word	0x0000ab41
    c5bc:	0000b539 	.word	0x0000b539
    c5c0:	0000ab95 	.word	0x0000ab95

0000c5c4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    c5c4:	b580      	push	{r7, lr}
    c5c6:	b088      	sub	sp, #32
    c5c8:	af00      	add	r7, sp, #0
    c5ca:	4603      	mov	r3, r0
    c5cc:	71fb      	strb	r3, [r7, #7]
    c5ce:	460b      	mov	r3, r1
    c5d0:	71bb      	strb	r3, [r7, #6]
    c5d2:	4613      	mov	r3, r2
    c5d4:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    c5d6:	79fb      	ldrb	r3, [r7, #7]
    c5d8:	f003 030f 	and.w	r3, r3, #15
    c5dc:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    c5de:	79fb      	ldrb	r3, [r7, #7]
    c5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	bf14      	ite	ne
    c5e8:	2301      	movne	r3, #1
    c5ea:	2300      	moveq	r3, #0
    c5ec:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c5ee:	7fba      	ldrb	r2, [r7, #30]
    c5f0:	7ffb      	ldrb	r3, [r7, #31]
    c5f2:	4611      	mov	r1, r2
    c5f4:	4618      	mov	r0, r3
    c5f6:	4b3e      	ldr	r3, [pc, #248]	; (c6f0 <_usb_d_dev_ep_init+0x12c>)
    c5f8:	4798      	blx	r3
    c5fa:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    c5fc:	79bb      	ldrb	r3, [r7, #6]
    c5fe:	f003 0303 	and.w	r3, r3, #3
    c602:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    c604:	7ffa      	ldrb	r2, [r7, #31]
    c606:	4613      	mov	r3, r2
    c608:	005b      	lsls	r3, r3, #1
    c60a:	4413      	add	r3, r2
    c60c:	009b      	lsls	r3, r3, #2
    c60e:	4a39      	ldr	r2, [pc, #228]	; (c6f4 <_usb_d_dev_ep_init+0x130>)
    c610:	4413      	add	r3, r2
    c612:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    c614:	7ffb      	ldrb	r3, [r7, #31]
    c616:	2b04      	cmp	r3, #4
    c618:	d902      	bls.n	c620 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    c61a:	f06f 0311 	mvn.w	r3, #17
    c61e:	e063      	b.n	c6e8 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    c620:	69bb      	ldr	r3, [r7, #24]
    c622:	7c9b      	ldrb	r3, [r3, #18]
    c624:	2bff      	cmp	r3, #255	; 0xff
    c626:	d002      	beq.n	c62e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    c628:	f06f 0313 	mvn.w	r3, #19
    c62c:	e05c      	b.n	c6e8 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c62e:	7dfb      	ldrb	r3, [r7, #23]
    c630:	2b00      	cmp	r3, #0
    c632:	d11f      	bne.n	c674 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c634:	7fbb      	ldrb	r3, [r7, #30]
    c636:	2b00      	cmp	r3, #0
    c638:	bf14      	ite	ne
    c63a:	2301      	movne	r3, #1
    c63c:	2300      	moveq	r3, #0
    c63e:	b2db      	uxtb	r3, r3
    c640:	f083 0301 	eor.w	r3, r3, #1
    c644:	b2db      	uxtb	r3, r3
    c646:	f003 0301 	and.w	r3, r3, #1
    c64a:	b2da      	uxtb	r2, r3
    c64c:	7ffb      	ldrb	r3, [r7, #31]
    c64e:	4611      	mov	r1, r2
    c650:	4618      	mov	r0, r3
    c652:	4b27      	ldr	r3, [pc, #156]	; (c6f0 <_usb_d_dev_ep_init+0x12c>)
    c654:	4798      	blx	r3
    c656:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    c658:	68fb      	ldr	r3, [r7, #12]
    c65a:	7c9b      	ldrb	r3, [r3, #18]
    c65c:	2bff      	cmp	r3, #255	; 0xff
    c65e:	d002      	beq.n	c666 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    c660:	f06f 0313 	mvn.w	r3, #19
    c664:	e040      	b.n	c6e8 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    c666:	693b      	ldr	r3, [r7, #16]
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	2b00      	cmp	r3, #0
    c66c:	d102      	bne.n	c674 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c66e:	f06f 0312 	mvn.w	r3, #18
    c672:	e039      	b.n	c6e8 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c674:	7fbb      	ldrb	r3, [r7, #30]
    c676:	2b00      	cmp	r3, #0
    c678:	d007      	beq.n	c68a <_usb_d_dev_ep_init+0xc6>
    c67a:	693b      	ldr	r3, [r7, #16]
    c67c:	685b      	ldr	r3, [r3, #4]
    c67e:	2b00      	cmp	r3, #0
    c680:	bf14      	ite	ne
    c682:	2301      	movne	r3, #1
    c684:	2300      	moveq	r3, #0
    c686:	b2db      	uxtb	r3, r3
    c688:	e006      	b.n	c698 <_usb_d_dev_ep_init+0xd4>
    c68a:	693b      	ldr	r3, [r7, #16]
    c68c:	681b      	ldr	r3, [r3, #0]
    c68e:	2b00      	cmp	r3, #0
    c690:	bf14      	ite	ne
    c692:	2301      	movne	r3, #1
    c694:	2300      	moveq	r3, #0
    c696:	b2db      	uxtb	r3, r3
    c698:	2b00      	cmp	r3, #0
    c69a:	d00f      	beq.n	c6bc <_usb_d_dev_ep_init+0xf8>
    c69c:	7fbb      	ldrb	r3, [r7, #30]
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d003      	beq.n	c6aa <_usb_d_dev_ep_init+0xe6>
    c6a2:	693b      	ldr	r3, [r7, #16]
    c6a4:	895b      	ldrh	r3, [r3, #10]
    c6a6:	461a      	mov	r2, r3
    c6a8:	e002      	b.n	c6b0 <_usb_d_dev_ep_init+0xec>
    c6aa:	693b      	ldr	r3, [r7, #16]
    c6ac:	891b      	ldrh	r3, [r3, #8]
    c6ae:	461a      	mov	r2, r3
    c6b0:	88bb      	ldrh	r3, [r7, #4]
    c6b2:	429a      	cmp	r2, r3
    c6b4:	da02      	bge.n	c6bc <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c6b6:	f06f 0312 	mvn.w	r3, #18
    c6ba:	e015      	b.n	c6e8 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c6bc:	7fbb      	ldrb	r3, [r7, #30]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d002      	beq.n	c6c8 <_usb_d_dev_ep_init+0x104>
    c6c2:	693b      	ldr	r3, [r7, #16]
    c6c4:	685b      	ldr	r3, [r3, #4]
    c6c6:	e001      	b.n	c6cc <_usb_d_dev_ep_init+0x108>
    c6c8:	693b      	ldr	r3, [r7, #16]
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	69ba      	ldr	r2, [r7, #24]
    c6ce:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    c6d0:	69bb      	ldr	r3, [r7, #24]
    c6d2:	88ba      	ldrh	r2, [r7, #4]
    c6d4:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    c6d6:	7dfb      	ldrb	r3, [r7, #23]
    c6d8:	3301      	adds	r3, #1
    c6da:	b2da      	uxtb	r2, r3
    c6dc:	69bb      	ldr	r3, [r7, #24]
    c6de:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    c6e0:	69bb      	ldr	r3, [r7, #24]
    c6e2:	79fa      	ldrb	r2, [r7, #7]
    c6e4:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    c6e6:	2300      	movs	r3, #0
}
    c6e8:	4618      	mov	r0, r3
    c6ea:	3720      	adds	r7, #32
    c6ec:	46bd      	mov	sp, r7
    c6ee:	bd80      	pop	{r7, pc}
    c6f0:	0000b5f5 	.word	0x0000b5f5
    c6f4:	00019b04 	.word	0x00019b04

0000c6f8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b086      	sub	sp, #24
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	4603      	mov	r3, r0
    c700:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    c702:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c706:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    c708:	79fb      	ldrb	r3, [r7, #7]
    c70a:	f003 030f 	and.w	r3, r3, #15
    c70e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c710:	79fb      	ldrb	r3, [r7, #7]
    c712:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c716:	2b00      	cmp	r3, #0
    c718:	bf14      	ite	ne
    c71a:	2301      	movne	r3, #1
    c71c:	2300      	moveq	r3, #0
    c71e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c720:	7cba      	ldrb	r2, [r7, #18]
    c722:	7cfb      	ldrb	r3, [r7, #19]
    c724:	4611      	mov	r1, r2
    c726:	4618      	mov	r0, r3
    c728:	4b2a      	ldr	r3, [pc, #168]	; (c7d4 <_usb_d_dev_ep_deinit+0xdc>)
    c72a:	4798      	blx	r3
    c72c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c72e:	7cfb      	ldrb	r3, [r7, #19]
    c730:	2b04      	cmp	r3, #4
    c732:	d84a      	bhi.n	c7ca <_usb_d_dev_ep_deinit+0xd2>
    c734:	68fb      	ldr	r3, [r7, #12]
    c736:	7c9b      	ldrb	r3, [r3, #18]
    c738:	2bff      	cmp	r3, #255	; 0xff
    c73a:	d046      	beq.n	c7ca <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c73c:	7cbb      	ldrb	r3, [r7, #18]
    c73e:	2203      	movs	r2, #3
    c740:	4619      	mov	r1, r3
    c742:	68f8      	ldr	r0, [r7, #12]
    c744:	4b24      	ldr	r3, [pc, #144]	; (c7d8 <_usb_d_dev_ep_deinit+0xe0>)
    c746:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c748:	68fb      	ldr	r3, [r7, #12]
    c74a:	7cdb      	ldrb	r3, [r3, #19]
    c74c:	f003 0307 	and.w	r3, r3, #7
    c750:	b2db      	uxtb	r3, r3
    c752:	2b01      	cmp	r3, #1
    c754:	d107      	bne.n	c766 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c756:	79fb      	ldrb	r3, [r7, #7]
    c758:	697a      	ldr	r2, [r7, #20]
    c75a:	3308      	adds	r3, #8
    c75c:	015b      	lsls	r3, r3, #5
    c75e:	4413      	add	r3, r2
    c760:	2200      	movs	r2, #0
    c762:	701a      	strb	r2, [r3, #0]
    c764:	e02a      	b.n	c7bc <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    c766:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c76a:	2b00      	cmp	r3, #0
    c76c:	da15      	bge.n	c79a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c76e:	79fb      	ldrb	r3, [r7, #7]
    c770:	f003 030f 	and.w	r3, r3, #15
    c774:	79fa      	ldrb	r2, [r7, #7]
    c776:	f002 020f 	and.w	r2, r2, #15
    c77a:	6979      	ldr	r1, [r7, #20]
    c77c:	3208      	adds	r2, #8
    c77e:	0152      	lsls	r2, r2, #5
    c780:	440a      	add	r2, r1
    c782:	7812      	ldrb	r2, [r2, #0]
    c784:	b2d2      	uxtb	r2, r2
    c786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c78a:	b2d1      	uxtb	r1, r2
    c78c:	697a      	ldr	r2, [r7, #20]
    c78e:	3308      	adds	r3, #8
    c790:	015b      	lsls	r3, r3, #5
    c792:	4413      	add	r3, r2
    c794:	460a      	mov	r2, r1
    c796:	701a      	strb	r2, [r3, #0]
    c798:	e010      	b.n	c7bc <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c79a:	79fb      	ldrb	r3, [r7, #7]
    c79c:	79fa      	ldrb	r2, [r7, #7]
    c79e:	6979      	ldr	r1, [r7, #20]
    c7a0:	3208      	adds	r2, #8
    c7a2:	0152      	lsls	r2, r2, #5
    c7a4:	440a      	add	r2, r1
    c7a6:	7812      	ldrb	r2, [r2, #0]
    c7a8:	b2d2      	uxtb	r2, r2
    c7aa:	f022 0207 	bic.w	r2, r2, #7
    c7ae:	b2d1      	uxtb	r1, r2
    c7b0:	697a      	ldr	r2, [r7, #20]
    c7b2:	3308      	adds	r3, #8
    c7b4:	015b      	lsls	r3, r3, #5
    c7b6:	4413      	add	r3, r2
    c7b8:	460a      	mov	r2, r1
    c7ba:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c7bc:	68fb      	ldr	r3, [r7, #12]
    c7be:	2200      	movs	r2, #0
    c7c0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c7c2:	68fb      	ldr	r3, [r7, #12]
    c7c4:	22ff      	movs	r2, #255	; 0xff
    c7c6:	749a      	strb	r2, [r3, #18]
    c7c8:	e000      	b.n	c7cc <_usb_d_dev_ep_deinit+0xd4>
		return;
    c7ca:	bf00      	nop
}
    c7cc:	3718      	adds	r7, #24
    c7ce:	46bd      	mov	sp, r7
    c7d0:	bd80      	pop	{r7, pc}
    c7d2:	bf00      	nop
    c7d4:	0000b5f5 	.word	0x0000b5f5
    c7d8:	0000cc2d 	.word	0x0000cc2d

0000c7dc <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c7dc:	b5b0      	push	{r4, r5, r7, lr}
    c7de:	b088      	sub	sp, #32
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	4603      	mov	r3, r0
    c7e4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c7e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c7ea:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c7ec:	79fb      	ldrb	r3, [r7, #7]
    c7ee:	f003 030f 	and.w	r3, r3, #15
    c7f2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c7f4:	79fb      	ldrb	r3, [r7, #7]
    c7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	bf14      	ite	ne
    c7fe:	2301      	movne	r3, #1
    c800:	2300      	moveq	r3, #0
    c802:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c804:	7eba      	ldrb	r2, [r7, #26]
    c806:	7efb      	ldrb	r3, [r7, #27]
    c808:	4611      	mov	r1, r2
    c80a:	4618      	mov	r0, r3
    c80c:	4b70      	ldr	r3, [pc, #448]	; (c9d0 <_usb_d_dev_ep_enable+0x1f4>)
    c80e:	4798      	blx	r3
    c810:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c812:	7efb      	ldrb	r3, [r7, #27]
    c814:	4619      	mov	r1, r3
    c816:	69f8      	ldr	r0, [r7, #28]
    c818:	4b6e      	ldr	r3, [pc, #440]	; (c9d4 <_usb_d_dev_ep_enable+0x1f8>)
    c81a:	4798      	blx	r3
    c81c:	4603      	mov	r3, r0
    c81e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c820:	7efb      	ldrb	r3, [r7, #27]
    c822:	2b04      	cmp	r3, #4
    c824:	d803      	bhi.n	c82e <_usb_d_dev_ep_enable+0x52>
    c826:	697b      	ldr	r3, [r7, #20]
    c828:	7c9b      	ldrb	r3, [r3, #18]
    c82a:	2bff      	cmp	r3, #255	; 0xff
    c82c:	d102      	bne.n	c834 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c82e:	f06f 0311 	mvn.w	r3, #17
    c832:	e0c8      	b.n	c9c6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c834:	7efb      	ldrb	r3, [r7, #27]
    c836:	015b      	lsls	r3, r3, #5
    c838:	4a67      	ldr	r2, [pc, #412]	; (c9d8 <_usb_d_dev_ep_enable+0x1fc>)
    c83a:	4413      	add	r3, r2
    c83c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c83e:	697b      	ldr	r3, [r7, #20]
    c840:	7cdb      	ldrb	r3, [r3, #19]
    c842:	f003 0307 	and.w	r3, r3, #7
    c846:	b2db      	uxtb	r3, r3
    c848:	2b01      	cmp	r3, #1
    c84a:	d14b      	bne.n	c8e4 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c84c:	7cfb      	ldrb	r3, [r7, #19]
    c84e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c852:	2b00      	cmp	r3, #0
    c854:	d002      	beq.n	c85c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c856:	f06f 0313 	mvn.w	r3, #19
    c85a:	e0b4      	b.n	c9c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c85c:	7efb      	ldrb	r3, [r7, #27]
    c85e:	2211      	movs	r2, #17
    c860:	4619      	mov	r1, r3
    c862:	69f8      	ldr	r0, [r7, #28]
    c864:	4b5d      	ldr	r3, [pc, #372]	; (c9dc <_usb_d_dev_ep_enable+0x200>)
    c866:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c868:	697b      	ldr	r3, [r7, #20]
    c86a:	8a1b      	ldrh	r3, [r3, #16]
    c86c:	039b      	lsls	r3, r3, #14
    c86e:	4c5c      	ldr	r4, [pc, #368]	; (c9e0 <_usb_d_dev_ep_enable+0x204>)
    c870:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c872:	697b      	ldr	r3, [r7, #20]
    c874:	8a1b      	ldrh	r3, [r3, #16]
    c876:	4618      	mov	r0, r3
    c878:	4b5a      	ldr	r3, [pc, #360]	; (c9e4 <_usb_d_dev_ep_enable+0x208>)
    c87a:	4798      	blx	r3
    c87c:	4603      	mov	r3, r0
    c87e:	071b      	lsls	r3, r3, #28
    c880:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c884:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c888:	68fb      	ldr	r3, [r7, #12]
    c88a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c88c:	68fb      	ldr	r3, [r7, #12]
    c88e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c892:	697b      	ldr	r3, [r7, #20]
    c894:	8a1b      	ldrh	r3, [r3, #16]
    c896:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c89a:	697b      	ldr	r3, [r7, #20]
    c89c:	8a1b      	ldrh	r3, [r3, #16]
    c89e:	4618      	mov	r0, r3
    c8a0:	4b50      	ldr	r3, [pc, #320]	; (c9e4 <_usb_d_dev_ep_enable+0x208>)
    c8a2:	4798      	blx	r3
    c8a4:	4603      	mov	r3, r0
    c8a6:	071b      	lsls	r3, r3, #28
    c8a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c8ac:	432b      	orrs	r3, r5
    c8ae:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c8b0:	7efb      	ldrb	r3, [r7, #27]
    c8b2:	2200      	movs	r2, #0
    c8b4:	2100      	movs	r1, #0
    c8b6:	4618      	mov	r0, r3
    c8b8:	4b4b      	ldr	r3, [pc, #300]	; (c9e8 <_usb_d_dev_ep_enable+0x20c>)
    c8ba:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c8bc:	7efb      	ldrb	r3, [r7, #27]
    c8be:	2200      	movs	r2, #0
    c8c0:	2101      	movs	r1, #1
    c8c2:	4618      	mov	r0, r3
    c8c4:	4b49      	ldr	r3, [pc, #292]	; (c9ec <_usb_d_dev_ep_enable+0x210>)
    c8c6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c8c8:	7efb      	ldrb	r3, [r7, #27]
    c8ca:	2100      	movs	r1, #0
    c8cc:	4618      	mov	r0, r3
    c8ce:	4b48      	ldr	r3, [pc, #288]	; (c9f0 <_usb_d_dev_ep_enable+0x214>)
    c8d0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c8d2:	7efb      	ldrb	r3, [r7, #27]
    c8d4:	2101      	movs	r1, #1
    c8d6:	4618      	mov	r0, r3
    c8d8:	4b45      	ldr	r3, [pc, #276]	; (c9f0 <_usb_d_dev_ep_enable+0x214>)
    c8da:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c8dc:	6978      	ldr	r0, [r7, #20]
    c8de:	4b45      	ldr	r3, [pc, #276]	; (c9f4 <_usb_d_dev_ep_enable+0x218>)
    c8e0:	4798      	blx	r3
    c8e2:	e06f      	b.n	c9c4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c8e4:	7ebb      	ldrb	r3, [r7, #26]
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d038      	beq.n	c95c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c8ea:	7cfb      	ldrb	r3, [r7, #19]
    c8ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	d002      	beq.n	c8fa <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c8f4:	f06f 0313 	mvn.w	r3, #19
    c8f8:	e065      	b.n	c9c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c8fa:	697b      	ldr	r3, [r7, #20]
    c8fc:	7cdb      	ldrb	r3, [r3, #19]
    c8fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c902:	b2db      	uxtb	r3, r3
    c904:	011b      	lsls	r3, r3, #4
    c906:	b2db      	uxtb	r3, r3
    c908:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c90c:	b2da      	uxtb	r2, r3
    c90e:	7cfb      	ldrb	r3, [r7, #19]
    c910:	4313      	orrs	r3, r2
    c912:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c914:	7cfa      	ldrb	r2, [r7, #19]
    c916:	7efb      	ldrb	r3, [r7, #27]
    c918:	4619      	mov	r1, r3
    c91a:	69f8      	ldr	r0, [r7, #28]
    c91c:	4b2f      	ldr	r3, [pc, #188]	; (c9dc <_usb_d_dev_ep_enable+0x200>)
    c91e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c920:	68fb      	ldr	r3, [r7, #12]
    c922:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c926:	697b      	ldr	r3, [r7, #20]
    c928:	8a1b      	ldrh	r3, [r3, #16]
    c92a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c92e:	697b      	ldr	r3, [r7, #20]
    c930:	8a1b      	ldrh	r3, [r3, #16]
    c932:	4618      	mov	r0, r3
    c934:	4b2b      	ldr	r3, [pc, #172]	; (c9e4 <_usb_d_dev_ep_enable+0x208>)
    c936:	4798      	blx	r3
    c938:	4603      	mov	r3, r0
    c93a:	071b      	lsls	r3, r3, #28
    c93c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c940:	432b      	orrs	r3, r5
    c942:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c944:	7efb      	ldrb	r3, [r7, #27]
    c946:	2200      	movs	r2, #0
    c948:	2101      	movs	r1, #1
    c94a:	4618      	mov	r0, r3
    c94c:	4b27      	ldr	r3, [pc, #156]	; (c9ec <_usb_d_dev_ep_enable+0x210>)
    c94e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c950:	7efb      	ldrb	r3, [r7, #27]
    c952:	2101      	movs	r1, #1
    c954:	4618      	mov	r0, r3
    c956:	4b26      	ldr	r3, [pc, #152]	; (c9f0 <_usb_d_dev_ep_enable+0x214>)
    c958:	4798      	blx	r3
    c95a:	e033      	b.n	c9c4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c95c:	7cfb      	ldrb	r3, [r7, #19]
    c95e:	f003 0307 	and.w	r3, r3, #7
    c962:	2b00      	cmp	r3, #0
    c964:	d002      	beq.n	c96c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c966:	f06f 0313 	mvn.w	r3, #19
    c96a:	e02c      	b.n	c9c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c96c:	697b      	ldr	r3, [r7, #20]
    c96e:	7cdb      	ldrb	r3, [r3, #19]
    c970:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c974:	b2db      	uxtb	r3, r3
    c976:	461a      	mov	r2, r3
    c978:	7cfb      	ldrb	r3, [r7, #19]
    c97a:	4313      	orrs	r3, r2
    c97c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c97e:	7cfa      	ldrb	r2, [r7, #19]
    c980:	7efb      	ldrb	r3, [r7, #27]
    c982:	4619      	mov	r1, r3
    c984:	69f8      	ldr	r0, [r7, #28]
    c986:	4b15      	ldr	r3, [pc, #84]	; (c9dc <_usb_d_dev_ep_enable+0x200>)
    c988:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c98a:	697b      	ldr	r3, [r7, #20]
    c98c:	8a1b      	ldrh	r3, [r3, #16]
    c98e:	039b      	lsls	r3, r3, #14
    c990:	4c13      	ldr	r4, [pc, #76]	; (c9e0 <_usb_d_dev_ep_enable+0x204>)
    c992:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c994:	697b      	ldr	r3, [r7, #20]
    c996:	8a1b      	ldrh	r3, [r3, #16]
    c998:	4618      	mov	r0, r3
    c99a:	4b12      	ldr	r3, [pc, #72]	; (c9e4 <_usb_d_dev_ep_enable+0x208>)
    c99c:	4798      	blx	r3
    c99e:	4603      	mov	r3, r0
    c9a0:	071b      	lsls	r3, r3, #28
    c9a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c9a6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c9ae:	7efb      	ldrb	r3, [r7, #27]
    c9b0:	2200      	movs	r2, #0
    c9b2:	2100      	movs	r1, #0
    c9b4:	4618      	mov	r0, r3
    c9b6:	4b0c      	ldr	r3, [pc, #48]	; (c9e8 <_usb_d_dev_ep_enable+0x20c>)
    c9b8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c9ba:	7efb      	ldrb	r3, [r7, #27]
    c9bc:	2100      	movs	r1, #0
    c9be:	4618      	mov	r0, r3
    c9c0:	4b0b      	ldr	r3, [pc, #44]	; (c9f0 <_usb_d_dev_ep_enable+0x214>)
    c9c2:	4798      	blx	r3
	}

	return USB_OK;
    c9c4:	2300      	movs	r3, #0
}
    c9c6:	4618      	mov	r0, r3
    c9c8:	3720      	adds	r7, #32
    c9ca:	46bd      	mov	sp, r7
    c9cc:	bdb0      	pop	{r4, r5, r7, pc}
    c9ce:	bf00      	nop
    c9d0:	0000b5f5 	.word	0x0000b5f5
    c9d4:	0000ac7b 	.word	0x0000ac7b
    c9d8:	20001368 	.word	0x20001368
    c9dc:	0000ac51 	.word	0x0000ac51
    c9e0:	0fffc000 	.word	0x0fffc000
    c9e4:	0000b591 	.word	0x0000b591
    c9e8:	0000b539 	.word	0x0000b539
    c9ec:	0000b4e1 	.word	0x0000b4e1
    c9f0:	0000b4a9 	.word	0x0000b4a9
    c9f4:	0000c54d 	.word	0x0000c54d

0000c9f8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c9f8:	b580      	push	{r7, lr}
    c9fa:	b084      	sub	sp, #16
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
    ca00:	460b      	mov	r3, r1
    ca02:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	7c9b      	ldrb	r3, [r3, #18]
    ca08:	f003 030f 	and.w	r3, r3, #15
    ca0c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    ca0e:	78fa      	ldrb	r2, [r7, #3]
    ca10:	7bfb      	ldrb	r3, [r7, #15]
    ca12:	4611      	mov	r1, r2
    ca14:	4618      	mov	r0, r3
    ca16:	4b03      	ldr	r3, [pc, #12]	; (ca24 <_usb_d_dev_ep_stall_get+0x2c>)
    ca18:	4798      	blx	r3
    ca1a:	4603      	mov	r3, r0
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3710      	adds	r7, #16
    ca20:	46bd      	mov	sp, r7
    ca22:	bd80      	pop	{r7, pc}
    ca24:	0000b0e9 	.word	0x0000b0e9

0000ca28 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    ca28:	b580      	push	{r7, lr}
    ca2a:	b084      	sub	sp, #16
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	6078      	str	r0, [r7, #4]
    ca30:	460b      	mov	r3, r1
    ca32:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	7c9b      	ldrb	r3, [r3, #18]
    ca38:	f003 030f 	and.w	r3, r3, #15
    ca3c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    ca3e:	78f9      	ldrb	r1, [r7, #3]
    ca40:	7bfb      	ldrb	r3, [r7, #15]
    ca42:	2201      	movs	r2, #1
    ca44:	4618      	mov	r0, r3
    ca46:	4b0a      	ldr	r3, [pc, #40]	; (ca70 <_usb_d_dev_ep_stall_set+0x48>)
    ca48:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ca4a:	78fb      	ldrb	r3, [r7, #3]
    ca4c:	2220      	movs	r2, #32
    ca4e:	409a      	lsls	r2, r3
    ca50:	7bfb      	ldrb	r3, [r7, #15]
    ca52:	4611      	mov	r1, r2
    ca54:	4618      	mov	r0, r3
    ca56:	4b07      	ldr	r3, [pc, #28]	; (ca74 <_usb_d_dev_ep_stall_set+0x4c>)
    ca58:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    ca5a:	687a      	ldr	r2, [r7, #4]
    ca5c:	7cd3      	ldrb	r3, [r2, #19]
    ca5e:	f043 0308 	orr.w	r3, r3, #8
    ca62:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    ca64:	2300      	movs	r3, #0
}
    ca66:	4618      	mov	r0, r3
    ca68:	3710      	adds	r7, #16
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd80      	pop	{r7, pc}
    ca6e:	bf00      	nop
    ca70:	0000b091 	.word	0x0000b091
    ca74:	0000b011 	.word	0x0000b011

0000ca78 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    ca78:	b580      	push	{r7, lr}
    ca7a:	b084      	sub	sp, #16
    ca7c:	af00      	add	r7, sp, #0
    ca7e:	6078      	str	r0, [r7, #4]
    ca80:	460b      	mov	r3, r1
    ca82:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	7c9b      	ldrb	r3, [r3, #18]
    ca88:	f003 030f 	and.w	r3, r3, #15
    ca8c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ca8e:	78fa      	ldrb	r2, [r7, #3]
    ca90:	7bfb      	ldrb	r3, [r7, #15]
    ca92:	4611      	mov	r1, r2
    ca94:	4618      	mov	r0, r3
    ca96:	4b28      	ldr	r3, [pc, #160]	; (cb38 <_usb_d_dev_ep_stall_clr+0xc0>)
    ca98:	4798      	blx	r3
    ca9a:	4603      	mov	r3, r0
    ca9c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    ca9e:	7bbb      	ldrb	r3, [r7, #14]
    caa0:	f083 0301 	eor.w	r3, r3, #1
    caa4:	b2db      	uxtb	r3, r3
    caa6:	2b00      	cmp	r3, #0
    caa8:	d001      	beq.n	caae <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    caaa:	2300      	movs	r3, #0
    caac:	e040      	b.n	cb30 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    caae:	78f9      	ldrb	r1, [r7, #3]
    cab0:	7bfb      	ldrb	r3, [r7, #15]
    cab2:	2200      	movs	r2, #0
    cab4:	4618      	mov	r0, r3
    cab6:	4b21      	ldr	r3, [pc, #132]	; (cb3c <_usb_d_dev_ep_stall_clr+0xc4>)
    cab8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    caba:	78fb      	ldrb	r3, [r7, #3]
    cabc:	2220      	movs	r2, #32
    cabe:	409a      	lsls	r2, r3
    cac0:	7bfb      	ldrb	r3, [r7, #15]
    cac2:	4611      	mov	r1, r2
    cac4:	4618      	mov	r0, r3
    cac6:	4b1e      	ldr	r3, [pc, #120]	; (cb40 <_usb_d_dev_ep_stall_clr+0xc8>)
    cac8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    caca:	78fa      	ldrb	r2, [r7, #3]
    cacc:	7bfb      	ldrb	r3, [r7, #15]
    cace:	4611      	mov	r1, r2
    cad0:	4618      	mov	r0, r3
    cad2:	4b1c      	ldr	r3, [pc, #112]	; (cb44 <_usb_d_dev_ep_stall_clr+0xcc>)
    cad4:	4798      	blx	r3
    cad6:	4603      	mov	r3, r0
    cad8:	2b00      	cmp	r3, #0
    cada:	d00b      	beq.n	caf4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    cadc:	78fa      	ldrb	r2, [r7, #3]
    cade:	7bfb      	ldrb	r3, [r7, #15]
    cae0:	4611      	mov	r1, r2
    cae2:	4618      	mov	r0, r3
    cae4:	4b18      	ldr	r3, [pc, #96]	; (cb48 <_usb_d_dev_ep_stall_clr+0xd0>)
    cae6:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    cae8:	78f9      	ldrb	r1, [r7, #3]
    caea:	7bfb      	ldrb	r3, [r7, #15]
    caec:	2200      	movs	r2, #0
    caee:	4618      	mov	r0, r3
    caf0:	4b16      	ldr	r3, [pc, #88]	; (cb4c <_usb_d_dev_ep_stall_clr+0xd4>)
    caf2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	7cdb      	ldrb	r3, [r3, #19]
    caf8:	f003 0307 	and.w	r3, r3, #7
    cafc:	b2db      	uxtb	r3, r3
    cafe:	2b01      	cmp	r3, #1
    cb00:	d110      	bne.n	cb24 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    cb02:	7bfb      	ldrb	r3, [r7, #15]
    cb04:	4619      	mov	r1, r3
    cb06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cb0a:	4b11      	ldr	r3, [pc, #68]	; (cb50 <_usb_d_dev_ep_stall_clr+0xd8>)
    cb0c:	4798      	blx	r3
    cb0e:	4603      	mov	r3, r0
    cb10:	f003 0330 	and.w	r3, r3, #48	; 0x30
    cb14:	2b00      	cmp	r3, #0
    cb16:	d10a      	bne.n	cb2e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    cb18:	687a      	ldr	r2, [r7, #4]
    cb1a:	7cd3      	ldrb	r3, [r2, #19]
    cb1c:	f36f 03c3 	bfc	r3, #3, #1
    cb20:	74d3      	strb	r3, [r2, #19]
    cb22:	e004      	b.n	cb2e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    cb24:	687a      	ldr	r2, [r7, #4]
    cb26:	7cd3      	ldrb	r3, [r2, #19]
    cb28:	f36f 03c3 	bfc	r3, #3, #1
    cb2c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    cb2e:	2300      	movs	r3, #0
}
    cb30:	4618      	mov	r0, r3
    cb32:	3710      	adds	r7, #16
    cb34:	46bd      	mov	sp, r7
    cb36:	bd80      	pop	{r7, pc}
    cb38:	0000b0e9 	.word	0x0000b0e9
    cb3c:	0000b091 	.word	0x0000b091
    cb40:	0000b039 	.word	0x0000b039
    cb44:	0000b12d 	.word	0x0000b12d
    cb48:	0000b171 	.word	0x0000b171
    cb4c:	0000b25d 	.word	0x0000b25d
    cb50:	0000ab19 	.word	0x0000ab19

0000cb54 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    cb54:	b580      	push	{r7, lr}
    cb56:	b086      	sub	sp, #24
    cb58:	af00      	add	r7, sp, #0
    cb5a:	4603      	mov	r3, r0
    cb5c:	460a      	mov	r2, r1
    cb5e:	71fb      	strb	r3, [r7, #7]
    cb60:	4613      	mov	r3, r2
    cb62:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    cb64:	79fb      	ldrb	r3, [r7, #7]
    cb66:	f003 030f 	and.w	r3, r3, #15
    cb6a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    cb6c:	79fb      	ldrb	r3, [r7, #7]
    cb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cb72:	2b00      	cmp	r3, #0
    cb74:	bf14      	ite	ne
    cb76:	2301      	movne	r3, #1
    cb78:	2300      	moveq	r3, #0
    cb7a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb7c:	7cba      	ldrb	r2, [r7, #18]
    cb7e:	7cfb      	ldrb	r3, [r7, #19]
    cb80:	4611      	mov	r1, r2
    cb82:	4618      	mov	r0, r3
    cb84:	4b13      	ldr	r3, [pc, #76]	; (cbd4 <_usb_d_dev_ep_stall+0x80>)
    cb86:	4798      	blx	r3
    cb88:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    cb8a:	7cfb      	ldrb	r3, [r7, #19]
    cb8c:	2b04      	cmp	r3, #4
    cb8e:	d902      	bls.n	cb96 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    cb90:	f06f 0311 	mvn.w	r3, #17
    cb94:	e01a      	b.n	cbcc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    cb96:	79bb      	ldrb	r3, [r7, #6]
    cb98:	2b01      	cmp	r3, #1
    cb9a:	d106      	bne.n	cbaa <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    cb9c:	7cbb      	ldrb	r3, [r7, #18]
    cb9e:	4619      	mov	r1, r3
    cba0:	68f8      	ldr	r0, [r7, #12]
    cba2:	4b0d      	ldr	r3, [pc, #52]	; (cbd8 <_usb_d_dev_ep_stall+0x84>)
    cba4:	4798      	blx	r3
    cba6:	6178      	str	r0, [r7, #20]
    cba8:	e00f      	b.n	cbca <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    cbaa:	79bb      	ldrb	r3, [r7, #6]
    cbac:	2b00      	cmp	r3, #0
    cbae:	d106      	bne.n	cbbe <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    cbb0:	7cbb      	ldrb	r3, [r7, #18]
    cbb2:	4619      	mov	r1, r3
    cbb4:	68f8      	ldr	r0, [r7, #12]
    cbb6:	4b09      	ldr	r3, [pc, #36]	; (cbdc <_usb_d_dev_ep_stall+0x88>)
    cbb8:	4798      	blx	r3
    cbba:	6178      	str	r0, [r7, #20]
    cbbc:	e005      	b.n	cbca <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    cbbe:	7cbb      	ldrb	r3, [r7, #18]
    cbc0:	4619      	mov	r1, r3
    cbc2:	68f8      	ldr	r0, [r7, #12]
    cbc4:	4b06      	ldr	r3, [pc, #24]	; (cbe0 <_usb_d_dev_ep_stall+0x8c>)
    cbc6:	4798      	blx	r3
    cbc8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    cbca:	697b      	ldr	r3, [r7, #20]
}
    cbcc:	4618      	mov	r0, r3
    cbce:	3718      	adds	r7, #24
    cbd0:	46bd      	mov	sp, r7
    cbd2:	bd80      	pop	{r7, pc}
    cbd4:	0000b5f5 	.word	0x0000b5f5
    cbd8:	0000ca29 	.word	0x0000ca29
    cbdc:	0000ca79 	.word	0x0000ca79
    cbe0:	0000c9f9 	.word	0x0000c9f9

0000cbe4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b082      	sub	sp, #8
    cbe8:	af00      	add	r7, sp, #0
    cbea:	6078      	str	r0, [r7, #4]
    cbec:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cbee:	687b      	ldr	r3, [r7, #4]
    cbf0:	7c9b      	ldrb	r3, [r3, #18]
    cbf2:	2bff      	cmp	r3, #255	; 0xff
    cbf4:	d014      	beq.n	cc20 <_usb_d_dev_trans_done+0x3c>
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	7cdb      	ldrb	r3, [r3, #19]
    cbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cbfe:	b2db      	uxtb	r3, r3
    cc00:	2b00      	cmp	r3, #0
    cc02:	d00d      	beq.n	cc20 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    cc04:	687a      	ldr	r2, [r7, #4]
    cc06:	7cd3      	ldrb	r3, [r2, #19]
    cc08:	f36f 1386 	bfc	r3, #6, #1
    cc0c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    cc0e:	4b06      	ldr	r3, [pc, #24]	; (cc28 <_usb_d_dev_trans_done+0x44>)
    cc10:	691b      	ldr	r3, [r3, #16]
    cc12:	687a      	ldr	r2, [r7, #4]
    cc14:	7c90      	ldrb	r0, [r2, #18]
    cc16:	687a      	ldr	r2, [r7, #4]
    cc18:	6892      	ldr	r2, [r2, #8]
    cc1a:	6839      	ldr	r1, [r7, #0]
    cc1c:	4798      	blx	r3
    cc1e:	e000      	b.n	cc22 <_usb_d_dev_trans_done+0x3e>
		return;
    cc20:	bf00      	nop
}
    cc22:	3708      	adds	r7, #8
    cc24:	46bd      	mov	sp, r7
    cc26:	bd80      	pop	{r7, pc}
    cc28:	200012a0 	.word	0x200012a0

0000cc2c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b086      	sub	sp, #24
    cc30:	af00      	add	r7, sp, #0
    cc32:	60f8      	str	r0, [r7, #12]
    cc34:	460b      	mov	r3, r1
    cc36:	607a      	str	r2, [r7, #4]
    cc38:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cc3a:	68fb      	ldr	r3, [r7, #12]
    cc3c:	7c9b      	ldrb	r3, [r3, #18]
    cc3e:	f003 030f 	and.w	r3, r3, #15
    cc42:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    cc44:	4b1f      	ldr	r3, [pc, #124]	; (ccc4 <_usb_d_dev_trans_stop+0x98>)
    cc46:	881b      	ldrh	r3, [r3, #0]
    cc48:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cc4a:	68fb      	ldr	r3, [r7, #12]
    cc4c:	7c9b      	ldrb	r3, [r3, #18]
    cc4e:	2bff      	cmp	r3, #255	; 0xff
    cc50:	d033      	beq.n	ccba <_usb_d_dev_trans_stop+0x8e>
    cc52:	68fb      	ldr	r3, [r7, #12]
    cc54:	7cdb      	ldrb	r3, [r3, #19]
    cc56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cc5a:	b2db      	uxtb	r3, r3
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d02c      	beq.n	ccba <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    cc60:	7afb      	ldrb	r3, [r7, #11]
    cc62:	2b00      	cmp	r3, #0
    cc64:	d006      	beq.n	cc74 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cc66:	7dfb      	ldrb	r3, [r7, #23]
    cc68:	2200      	movs	r2, #0
    cc6a:	2101      	movs	r1, #1
    cc6c:	4618      	mov	r0, r3
    cc6e:	4b16      	ldr	r3, [pc, #88]	; (ccc8 <_usb_d_dev_trans_stop+0x9c>)
    cc70:	4798      	blx	r3
    cc72:	e005      	b.n	cc80 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    cc74:	7dfb      	ldrb	r3, [r7, #23]
    cc76:	2200      	movs	r2, #0
    cc78:	2100      	movs	r1, #0
    cc7a:	4618      	mov	r0, r3
    cc7c:	4b13      	ldr	r3, [pc, #76]	; (cccc <_usb_d_dev_trans_stop+0xa0>)
    cc7e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    cc80:	7afb      	ldrb	r3, [r7, #11]
    cc82:	f107 0218 	add.w	r2, r7, #24
    cc86:	4413      	add	r3, r2
    cc88:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cc8c:	461a      	mov	r2, r3
    cc8e:	7dfb      	ldrb	r3, [r7, #23]
    cc90:	4611      	mov	r1, r2
    cc92:	4618      	mov	r0, r3
    cc94:	4b0e      	ldr	r3, [pc, #56]	; (ccd0 <_usb_d_dev_trans_stop+0xa4>)
    cc96:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    cc98:	7afb      	ldrb	r3, [r7, #11]
    cc9a:	f107 0218 	add.w	r2, r7, #24
    cc9e:	4413      	add	r3, r2
    cca0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cca4:	461a      	mov	r2, r3
    cca6:	7dfb      	ldrb	r3, [r7, #23]
    cca8:	4611      	mov	r1, r2
    ccaa:	4618      	mov	r0, r3
    ccac:	4b09      	ldr	r3, [pc, #36]	; (ccd4 <_usb_d_dev_trans_stop+0xa8>)
    ccae:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ccb0:	6879      	ldr	r1, [r7, #4]
    ccb2:	68f8      	ldr	r0, [r7, #12]
    ccb4:	4b08      	ldr	r3, [pc, #32]	; (ccd8 <_usb_d_dev_trans_stop+0xac>)
    ccb6:	4798      	blx	r3
    ccb8:	e000      	b.n	ccbc <_usb_d_dev_trans_stop+0x90>
		return;
    ccba:	bf00      	nop
}
    ccbc:	3718      	adds	r7, #24
    ccbe:	46bd      	mov	sp, r7
    ccc0:	bd80      	pop	{r7, pc}
    ccc2:	bf00      	nop
    ccc4:	00019b44 	.word	0x00019b44
    ccc8:	0000b4e1 	.word	0x0000b4e1
    cccc:	0000b539 	.word	0x0000b539
    ccd0:	0000afe9 	.word	0x0000afe9
    ccd4:	0000b039 	.word	0x0000b039
    ccd8:	0000cbe5 	.word	0x0000cbe5

0000ccdc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ccdc:	b580      	push	{r7, lr}
    ccde:	b086      	sub	sp, #24
    cce0:	af00      	add	r7, sp, #0
    cce2:	4603      	mov	r3, r0
    cce4:	6039      	str	r1, [r7, #0]
    cce6:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    cce8:	79fb      	ldrb	r3, [r7, #7]
    ccea:	f003 030f 	and.w	r3, r3, #15
    ccee:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ccf0:	7dfb      	ldrb	r3, [r7, #23]
    ccf2:	015b      	lsls	r3, r3, #5
    ccf4:	4a1e      	ldr	r2, [pc, #120]	; (cd70 <_usb_d_dev_ep_read_req+0x94>)
    ccf6:	4413      	add	r3, r2
    ccf8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    ccfa:	693b      	ldr	r3, [r7, #16]
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cd00:	693b      	ldr	r3, [r7, #16]
    cd02:	685b      	ldr	r3, [r3, #4]
    cd04:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cd08:	b29b      	uxth	r3, r3
    cd0a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cd0c:	7dfb      	ldrb	r3, [r7, #23]
    cd0e:	2b04      	cmp	r3, #4
    cd10:	d802      	bhi.n	cd18 <_usb_d_dev_ep_read_req+0x3c>
    cd12:	683b      	ldr	r3, [r7, #0]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d102      	bne.n	cd1e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    cd18:	f06f 0311 	mvn.w	r3, #17
    cd1c:	e023      	b.n	cd66 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    cd1e:	7dfb      	ldrb	r3, [r7, #23]
    cd20:	4618      	mov	r0, r3
    cd22:	4b14      	ldr	r3, [pc, #80]	; (cd74 <_usb_d_dev_ep_read_req+0x98>)
    cd24:	4798      	blx	r3
    cd26:	4603      	mov	r3, r0
    cd28:	f083 0301 	eor.w	r3, r3, #1
    cd2c:	b2db      	uxtb	r3, r3
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d002      	beq.n	cd38 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    cd32:	f06f 0312 	mvn.w	r3, #18
    cd36:	e016      	b.n	cd66 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    cd38:	7dfb      	ldrb	r3, [r7, #23]
    cd3a:	4618      	mov	r0, r3
    cd3c:	4b0e      	ldr	r3, [pc, #56]	; (cd78 <_usb_d_dev_ep_read_req+0x9c>)
    cd3e:	4798      	blx	r3
    cd40:	4603      	mov	r3, r0
    cd42:	f083 0301 	eor.w	r3, r3, #1
    cd46:	b2db      	uxtb	r3, r3
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d001      	beq.n	cd50 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    cd4c:	2300      	movs	r3, #0
    cd4e:	e00a      	b.n	cd66 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    cd50:	68fb      	ldr	r3, [r7, #12]
    cd52:	2208      	movs	r2, #8
    cd54:	4619      	mov	r1, r3
    cd56:	6838      	ldr	r0, [r7, #0]
    cd58:	4b08      	ldr	r3, [pc, #32]	; (cd7c <_usb_d_dev_ep_read_req+0xa0>)
    cd5a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    cd5c:	7dfb      	ldrb	r3, [r7, #23]
    cd5e:	4618      	mov	r0, r3
    cd60:	4b07      	ldr	r3, [pc, #28]	; (cd80 <_usb_d_dev_ep_read_req+0xa4>)
    cd62:	4798      	blx	r3

	return bytes;
    cd64:	897b      	ldrh	r3, [r7, #10]
}
    cd66:	4618      	mov	r0, r3
    cd68:	3718      	adds	r7, #24
    cd6a:	46bd      	mov	sp, r7
    cd6c:	bd80      	pop	{r7, pc}
    cd6e:	bf00      	nop
    cd70:	20001368 	.word	0x20001368
    cd74:	0000b061 	.word	0x0000b061
    cd78:	0000b20d 	.word	0x0000b20d
    cd7c:	000191a9 	.word	0x000191a9
    cd80:	0000b23d 	.word	0x0000b23d

0000cd84 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    cd84:	b580      	push	{r7, lr}
    cd86:	b086      	sub	sp, #24
    cd88:	af00      	add	r7, sp, #0
    cd8a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	7a1b      	ldrb	r3, [r3, #8]
    cd90:	f003 030f 	and.w	r3, r3, #15
    cd94:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	7a1b      	ldrb	r3, [r3, #8]
    cd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cd9e:	2b00      	cmp	r3, #0
    cda0:	bf14      	ite	ne
    cda2:	2301      	movne	r3, #1
    cda4:	2300      	moveq	r3, #0
    cda6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cda8:	7d7a      	ldrb	r2, [r7, #21]
    cdaa:	7dbb      	ldrb	r3, [r7, #22]
    cdac:	4611      	mov	r1, r2
    cdae:	4618      	mov	r0, r3
    cdb0:	4b5f      	ldr	r3, [pc, #380]	; (cf30 <_usb_d_dev_ep_trans+0x1ac>)
    cdb2:	4798      	blx	r3
    cdb4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cdb6:	693b      	ldr	r3, [r7, #16]
    cdb8:	8a1b      	ldrh	r3, [r3, #16]
    cdba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cdbe:	4293      	cmp	r3, r2
    cdc0:	d004      	beq.n	cdcc <_usb_d_dev_ep_trans+0x48>
    cdc2:	693b      	ldr	r3, [r7, #16]
    cdc4:	8a1b      	ldrh	r3, [r3, #16]
    cdc6:	3b01      	subs	r3, #1
    cdc8:	b29b      	uxth	r3, r3
    cdca:	e001      	b.n	cdd0 <_usb_d_dev_ep_trans+0x4c>
    cdcc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cdd0:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    cdd2:	687b      	ldr	r3, [r7, #4]
    cdd4:	685a      	ldr	r2, [r3, #4]
    cdd6:	89fb      	ldrh	r3, [r7, #14]
    cdd8:	4013      	ands	r3, r2
    cdda:	2b00      	cmp	r3, #0
    cddc:	bf14      	ite	ne
    cdde:	2301      	movne	r3, #1
    cde0:	2300      	moveq	r3, #0
    cde2:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    cde4:	2300      	movs	r3, #0
    cde6:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    cde8:	7dbb      	ldrb	r3, [r7, #22]
    cdea:	2b04      	cmp	r3, #4
    cdec:	d902      	bls.n	cdf4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    cdee:	f06f 0311 	mvn.w	r3, #17
    cdf2:	e098      	b.n	cf26 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    cdf4:	687b      	ldr	r3, [r7, #4]
    cdf6:	681b      	ldr	r3, [r3, #0]
    cdf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    cdfc:	d31a      	bcc.n	ce34 <_usb_d_dev_ep_trans+0xb0>
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	681b      	ldr	r3, [r3, #0]
    ce02:	461a      	mov	r2, r3
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	685b      	ldr	r3, [r3, #4]
    ce08:	4413      	add	r3, r2
    ce0a:	4a4a      	ldr	r2, [pc, #296]	; (cf34 <_usb_d_dev_ep_trans+0x1b0>)
    ce0c:	4293      	cmp	r3, r2
    ce0e:	d811      	bhi.n	ce34 <_usb_d_dev_ep_trans+0xb0>
    ce10:	687b      	ldr	r3, [r7, #4]
    ce12:	681b      	ldr	r3, [r3, #0]
    ce14:	f003 0303 	and.w	r3, r3, #3
    ce18:	2b00      	cmp	r3, #0
    ce1a:	d10b      	bne.n	ce34 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    ce1c:	7d7b      	ldrb	r3, [r7, #21]
    ce1e:	f083 0301 	eor.w	r3, r3, #1
    ce22:	b2db      	uxtb	r3, r3
    ce24:	2b00      	cmp	r3, #0
    ce26:	d00e      	beq.n	ce46 <_usb_d_dev_ep_trans+0xc2>
    ce28:	687b      	ldr	r3, [r7, #4]
    ce2a:	685b      	ldr	r3, [r3, #4]
    ce2c:	693a      	ldr	r2, [r7, #16]
    ce2e:	8a12      	ldrh	r2, [r2, #16]
    ce30:	4293      	cmp	r3, r2
    ce32:	d208      	bcs.n	ce46 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    ce34:	693b      	ldr	r3, [r7, #16]
    ce36:	68db      	ldr	r3, [r3, #12]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	d102      	bne.n	ce42 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    ce3c:	f06f 0312 	mvn.w	r3, #18
    ce40:	e071      	b.n	cf26 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ce42:	2301      	movs	r3, #1
    ce44:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ce46:	7d7b      	ldrb	r3, [r7, #21]
    ce48:	f083 0301 	eor.w	r3, r3, #1
    ce4c:	b2db      	uxtb	r3, r3
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d009      	beq.n	ce66 <_usb_d_dev_ep_trans+0xe2>
    ce52:	7b7b      	ldrb	r3, [r7, #13]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d006      	beq.n	ce66 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    ce58:	693b      	ldr	r3, [r7, #16]
    ce5a:	68db      	ldr	r3, [r3, #12]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d102      	bne.n	ce66 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ce60:	f06f 0311 	mvn.w	r3, #17
    ce64:	e05f      	b.n	cf26 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ce66:	693b      	ldr	r3, [r7, #16]
    ce68:	7cdb      	ldrb	r3, [r3, #19]
    ce6a:	f003 0308 	and.w	r3, r3, #8
    ce6e:	b2db      	uxtb	r3, r3
    ce70:	2b00      	cmp	r3, #0
    ce72:	d001      	beq.n	ce78 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ce74:	2302      	movs	r3, #2
    ce76:	e056      	b.n	cf26 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ce78:	f107 0308 	add.w	r3, r7, #8
    ce7c:	4618      	mov	r0, r3
    ce7e:	4b2e      	ldr	r3, [pc, #184]	; (cf38 <_usb_d_dev_ep_trans+0x1b4>)
    ce80:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ce82:	693b      	ldr	r3, [r7, #16]
    ce84:	7cdb      	ldrb	r3, [r3, #19]
    ce86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ce8a:	b2db      	uxtb	r3, r3
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	d006      	beq.n	ce9e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ce90:	f107 0308 	add.w	r3, r7, #8
    ce94:	4618      	mov	r0, r3
    ce96:	4b29      	ldr	r3, [pc, #164]	; (cf3c <_usb_d_dev_ep_trans+0x1b8>)
    ce98:	4798      	blx	r3
		return USB_BUSY;
    ce9a:	2301      	movs	r3, #1
    ce9c:	e043      	b.n	cf26 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ce9e:	693a      	ldr	r2, [r7, #16]
    cea0:	7cd3      	ldrb	r3, [r2, #19]
    cea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cea6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    cea8:	f107 0308 	add.w	r3, r7, #8
    ceac:	4618      	mov	r0, r3
    ceae:	4b23      	ldr	r3, [pc, #140]	; (cf3c <_usb_d_dev_ep_trans+0x1b8>)
    ceb0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ceb2:	687b      	ldr	r3, [r7, #4]
    ceb4:	681a      	ldr	r2, [r3, #0]
    ceb6:	693b      	ldr	r3, [r7, #16]
    ceb8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ceba:	687b      	ldr	r3, [r7, #4]
    cebc:	685a      	ldr	r2, [r3, #4]
    cebe:	693b      	ldr	r3, [r7, #16]
    cec0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    cec2:	693b      	ldr	r3, [r7, #16]
    cec4:	2200      	movs	r2, #0
    cec6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    cec8:	693a      	ldr	r2, [r7, #16]
    ceca:	7cd3      	ldrb	r3, [r2, #19]
    cecc:	7d79      	ldrb	r1, [r7, #21]
    cece:	f361 13c7 	bfi	r3, r1, #7, #1
    ced2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ced4:	693a      	ldr	r2, [r7, #16]
    ced6:	7cd3      	ldrb	r3, [r2, #19]
    ced8:	7df9      	ldrb	r1, [r7, #23]
    ceda:	f361 1345 	bfi	r3, r1, #5, #1
    cede:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	7a5b      	ldrb	r3, [r3, #9]
    cee4:	2b00      	cmp	r3, #0
    cee6:	d007      	beq.n	cef8 <_usb_d_dev_ep_trans+0x174>
    cee8:	7b7b      	ldrb	r3, [r7, #13]
    ceea:	f083 0301 	eor.w	r3, r3, #1
    ceee:	b2db      	uxtb	r3, r3
    cef0:	2b00      	cmp	r3, #0
    cef2:	d001      	beq.n	cef8 <_usb_d_dev_ep_trans+0x174>
    cef4:	2301      	movs	r3, #1
    cef6:	e000      	b.n	cefa <_usb_d_dev_ep_trans+0x176>
    cef8:	2300      	movs	r3, #0
    cefa:	b2db      	uxtb	r3, r3
    cefc:	f003 0301 	and.w	r3, r3, #1
    cf00:	b2d9      	uxtb	r1, r3
    cf02:	693a      	ldr	r2, [r7, #16]
    cf04:	7cd3      	ldrb	r3, [r2, #19]
    cf06:	f361 1304 	bfi	r3, r1, #4, #1
    cf0a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    cf0c:	7d7b      	ldrb	r3, [r7, #21]
    cf0e:	2b00      	cmp	r3, #0
    cf10:	d004      	beq.n	cf1c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    cf12:	2100      	movs	r1, #0
    cf14:	6938      	ldr	r0, [r7, #16]
    cf16:	4b0a      	ldr	r3, [pc, #40]	; (cf40 <_usb_d_dev_ep_trans+0x1bc>)
    cf18:	4798      	blx	r3
    cf1a:	e003      	b.n	cf24 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    cf1c:	2100      	movs	r1, #0
    cf1e:	6938      	ldr	r0, [r7, #16]
    cf20:	4b08      	ldr	r3, [pc, #32]	; (cf44 <_usb_d_dev_ep_trans+0x1c0>)
    cf22:	4798      	blx	r3
	}

	return ERR_NONE;
    cf24:	2300      	movs	r3, #0
}
    cf26:	4618      	mov	r0, r3
    cf28:	3718      	adds	r7, #24
    cf2a:	46bd      	mov	sp, r7
    cf2c:	bd80      	pop	{r7, pc}
    cf2e:	bf00      	nop
    cf30:	0000b5f5 	.word	0x0000b5f5
    cf34:	20041fff 	.word	0x20041fff
    cf38:	0000d9d1 	.word	0x0000d9d1
    cf3c:	0000d9f7 	.word	0x0000d9f7
    cf40:	0000b8bd 	.word	0x0000b8bd
    cf44:	0000bad5 	.word	0x0000bad5

0000cf48 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    cf48:	b580      	push	{r7, lr}
    cf4a:	b084      	sub	sp, #16
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	4603      	mov	r3, r0
    cf50:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    cf52:	79fb      	ldrb	r3, [r7, #7]
    cf54:	f003 030f 	and.w	r3, r3, #15
    cf58:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    cf5a:	79fb      	ldrb	r3, [r7, #7]
    cf5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cf60:	2b00      	cmp	r3, #0
    cf62:	bf14      	ite	ne
    cf64:	2301      	movne	r3, #1
    cf66:	2300      	moveq	r3, #0
    cf68:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf6a:	7bba      	ldrb	r2, [r7, #14]
    cf6c:	7bfb      	ldrb	r3, [r7, #15]
    cf6e:	4611      	mov	r1, r2
    cf70:	4618      	mov	r0, r3
    cf72:	4b08      	ldr	r3, [pc, #32]	; (cf94 <_usb_d_dev_ep_abort+0x4c>)
    cf74:	4798      	blx	r3
    cf76:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    cf78:	7bfb      	ldrb	r3, [r7, #15]
    cf7a:	2b04      	cmp	r3, #4
    cf7c:	d806      	bhi.n	cf8c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    cf7e:	7bbb      	ldrb	r3, [r7, #14]
    cf80:	2202      	movs	r2, #2
    cf82:	4619      	mov	r1, r3
    cf84:	68b8      	ldr	r0, [r7, #8]
    cf86:	4b04      	ldr	r3, [pc, #16]	; (cf98 <_usb_d_dev_ep_abort+0x50>)
    cf88:	4798      	blx	r3
    cf8a:	e000      	b.n	cf8e <_usb_d_dev_ep_abort+0x46>
		return;
    cf8c:	bf00      	nop
}
    cf8e:	3710      	adds	r7, #16
    cf90:	46bd      	mov	sp, r7
    cf92:	bd80      	pop	{r7, pc}
    cf94:	0000b5f5 	.word	0x0000b5f5
    cf98:	0000cc2d 	.word	0x0000cc2d

0000cf9c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    cf9c:	b480      	push	{r7}
    cf9e:	b085      	sub	sp, #20
    cfa0:	af00      	add	r7, sp, #0
    cfa2:	4603      	mov	r3, r0
    cfa4:	6039      	str	r1, [r7, #0]
    cfa6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    cfa8:	683b      	ldr	r3, [r7, #0]
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d001      	beq.n	cfb2 <_usb_d_dev_register_callback+0x16>
    cfae:	683b      	ldr	r3, [r7, #0]
    cfb0:	e000      	b.n	cfb4 <_usb_d_dev_register_callback+0x18>
    cfb2:	4b0a      	ldr	r3, [pc, #40]	; (cfdc <_usb_d_dev_register_callback+0x40>)
    cfb4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    cfb6:	79fb      	ldrb	r3, [r7, #7]
    cfb8:	2b01      	cmp	r3, #1
    cfba:	d103      	bne.n	cfc4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    cfbc:	4a08      	ldr	r2, [pc, #32]	; (cfe0 <_usb_d_dev_register_callback+0x44>)
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    cfc2:	e005      	b.n	cfd0 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    cfc4:	79fb      	ldrb	r3, [r7, #7]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d102      	bne.n	cfd0 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    cfca:	4a05      	ldr	r2, [pc, #20]	; (cfe0 <_usb_d_dev_register_callback+0x44>)
    cfcc:	68fb      	ldr	r3, [r7, #12]
    cfce:	6013      	str	r3, [r2, #0]
}
    cfd0:	bf00      	nop
    cfd2:	3714      	adds	r7, #20
    cfd4:	46bd      	mov	sp, r7
    cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfda:	4770      	bx	lr
    cfdc:	0000ae7d 	.word	0x0000ae7d
    cfe0:	200012a0 	.word	0x200012a0

0000cfe4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    cfe4:	b480      	push	{r7}
    cfe6:	b085      	sub	sp, #20
    cfe8:	af00      	add	r7, sp, #0
    cfea:	4603      	mov	r3, r0
    cfec:	6039      	str	r1, [r7, #0]
    cfee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    cff0:	683b      	ldr	r3, [r7, #0]
    cff2:	2b00      	cmp	r3, #0
    cff4:	d001      	beq.n	cffa <_usb_d_dev_register_ep_callback+0x16>
    cff6:	683b      	ldr	r3, [r7, #0]
    cff8:	e000      	b.n	cffc <_usb_d_dev_register_ep_callback+0x18>
    cffa:	4b0e      	ldr	r3, [pc, #56]	; (d034 <_usb_d_dev_register_ep_callback+0x50>)
    cffc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    cffe:	79fb      	ldrb	r3, [r7, #7]
    d000:	2b00      	cmp	r3, #0
    d002:	d103      	bne.n	d00c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    d004:	4a0c      	ldr	r2, [pc, #48]	; (d038 <_usb_d_dev_register_ep_callback+0x54>)
    d006:	68fb      	ldr	r3, [r7, #12]
    d008:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    d00a:	e00c      	b.n	d026 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    d00c:	79fb      	ldrb	r3, [r7, #7]
    d00e:	2b01      	cmp	r3, #1
    d010:	d103      	bne.n	d01a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    d012:	4a09      	ldr	r2, [pc, #36]	; (d038 <_usb_d_dev_register_ep_callback+0x54>)
    d014:	68fb      	ldr	r3, [r7, #12]
    d016:	60d3      	str	r3, [r2, #12]
}
    d018:	e005      	b.n	d026 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    d01a:	79fb      	ldrb	r3, [r7, #7]
    d01c:	2b02      	cmp	r3, #2
    d01e:	d102      	bne.n	d026 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    d020:	4a05      	ldr	r2, [pc, #20]	; (d038 <_usb_d_dev_register_ep_callback+0x54>)
    d022:	68fb      	ldr	r3, [r7, #12]
    d024:	6113      	str	r3, [r2, #16]
}
    d026:	bf00      	nop
    d028:	3714      	adds	r7, #20
    d02a:	46bd      	mov	sp, r7
    d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d030:	4770      	bx	lr
    d032:	bf00      	nop
    d034:	0000ae7d 	.word	0x0000ae7d
    d038:	200012a0 	.word	0x200012a0

0000d03c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    d03c:	b580      	push	{r7, lr}
    d03e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d040:	4b01      	ldr	r3, [pc, #4]	; (d048 <USB_0_Handler+0xc>)
    d042:	4798      	blx	r3
}
    d044:	bf00      	nop
    d046:	bd80      	pop	{r7, pc}
    d048:	0000c2ad 	.word	0x0000c2ad

0000d04c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    d04c:	b580      	push	{r7, lr}
    d04e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d050:	4b01      	ldr	r3, [pc, #4]	; (d058 <USB_1_Handler+0xc>)
    d052:	4798      	blx	r3
}
    d054:	bf00      	nop
    d056:	bd80      	pop	{r7, pc}
    d058:	0000c2ad 	.word	0x0000c2ad

0000d05c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    d05c:	b580      	push	{r7, lr}
    d05e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d060:	4b01      	ldr	r3, [pc, #4]	; (d068 <USB_2_Handler+0xc>)
    d062:	4798      	blx	r3
}
    d064:	bf00      	nop
    d066:	bd80      	pop	{r7, pc}
    d068:	0000c2ad 	.word	0x0000c2ad

0000d06c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    d06c:	b580      	push	{r7, lr}
    d06e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d070:	4b01      	ldr	r3, [pc, #4]	; (d078 <USB_3_Handler+0xc>)
    d072:	4798      	blx	r3
}
    d074:	bf00      	nop
    d076:	bd80      	pop	{r7, pc}
    d078:	0000c2ad 	.word	0x0000c2ad

0000d07c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    d07c:	b480      	push	{r7}
    d07e:	b083      	sub	sp, #12
    d080:	af00      	add	r7, sp, #0
    d082:	6078      	str	r0, [r7, #4]
    d084:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d086:	bf00      	nop
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	689a      	ldr	r2, [r3, #8]
    d08c:	683b      	ldr	r3, [r7, #0]
    d08e:	4013      	ands	r3, r2
    d090:	2b00      	cmp	r3, #0
    d092:	d1f9      	bne.n	d088 <hri_wdt_wait_for_sync+0xc>
	};
}
    d094:	bf00      	nop
    d096:	370c      	adds	r7, #12
    d098:	46bd      	mov	sp, r7
    d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d09e:	4770      	bx	lr

0000d0a0 <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b082      	sub	sp, #8
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    d0a8:	687b      	ldr	r3, [r7, #4]
    d0aa:	781b      	ldrb	r3, [r3, #0]
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	f043 0302 	orr.w	r3, r3, #2
    d0b2:	b2da      	uxtb	r2, r3
    d0b4:	687b      	ldr	r3, [r7, #4]
    d0b6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d0b8:	210e      	movs	r1, #14
    d0ba:	6878      	ldr	r0, [r7, #4]
    d0bc:	4b02      	ldr	r3, [pc, #8]	; (d0c8 <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
    d0be:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    d0c0:	bf00      	nop
    d0c2:	3708      	adds	r7, #8
    d0c4:	46bd      	mov	sp, r7
    d0c6:	bd80      	pop	{r7, pc}
    d0c8:	0000d07d 	.word	0x0000d07d

0000d0cc <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d0cc:	b580      	push	{r7, lr}
    d0ce:	b084      	sub	sp, #16
    d0d0:	af00      	add	r7, sp, #0
    d0d2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d0d4:	210e      	movs	r1, #14
    d0d6:	6878      	ldr	r0, [r7, #4]
    d0d8:	4b0a      	ldr	r3, [pc, #40]	; (d104 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    d0da:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d0dc:	687b      	ldr	r3, [r7, #4]
    d0de:	781b      	ldrb	r3, [r3, #0]
    d0e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    d0e2:	7bfb      	ldrb	r3, [r7, #15]
    d0e4:	085b      	lsrs	r3, r3, #1
    d0e6:	b2db      	uxtb	r3, r3
    d0e8:	f003 0301 	and.w	r3, r3, #1
    d0ec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d0ee:	7bfb      	ldrb	r3, [r7, #15]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	bf14      	ite	ne
    d0f4:	2301      	movne	r3, #1
    d0f6:	2300      	moveq	r3, #0
    d0f8:	b2db      	uxtb	r3, r3
}
    d0fa:	4618      	mov	r0, r3
    d0fc:	3710      	adds	r7, #16
    d0fe:	46bd      	mov	sp, r7
    d100:	bd80      	pop	{r7, pc}
    d102:	bf00      	nop
    d104:	0000d07d 	.word	0x0000d07d

0000d108 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    d108:	b580      	push	{r7, lr}
    d10a:	b082      	sub	sp, #8
    d10c:	af00      	add	r7, sp, #0
    d10e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    d110:	687b      	ldr	r3, [r7, #4]
    d112:	781b      	ldrb	r3, [r3, #0]
    d114:	b2db      	uxtb	r3, r3
    d116:	f023 0304 	bic.w	r3, r3, #4
    d11a:	b2da      	uxtb	r2, r3
    d11c:	687b      	ldr	r3, [r7, #4]
    d11e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d120:	210e      	movs	r1, #14
    d122:	6878      	ldr	r0, [r7, #4]
    d124:	4b02      	ldr	r3, [pc, #8]	; (d130 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    d126:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    d128:	bf00      	nop
    d12a:	3708      	adds	r7, #8
    d12c:	46bd      	mov	sp, r7
    d12e:	bd80      	pop	{r7, pc}
    d130:	0000d07d 	.word	0x0000d07d

0000d134 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    d134:	b580      	push	{r7, lr}
    d136:	b084      	sub	sp, #16
    d138:	af00      	add	r7, sp, #0
    d13a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d13c:	210e      	movs	r1, #14
    d13e:	6878      	ldr	r0, [r7, #4]
    d140:	4b08      	ldr	r3, [pc, #32]	; (d164 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    d142:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    d14a:	7bfb      	ldrb	r3, [r7, #15]
    d14c:	09db      	lsrs	r3, r3, #7
    d14e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d150:	7bfb      	ldrb	r3, [r7, #15]
    d152:	2b00      	cmp	r3, #0
    d154:	bf14      	ite	ne
    d156:	2301      	movne	r3, #1
    d158:	2300      	moveq	r3, #0
    d15a:	b2db      	uxtb	r3, r3
}
    d15c:	4618      	mov	r0, r3
    d15e:	3710      	adds	r7, #16
    d160:	46bd      	mov	sp, r7
    d162:	bd80      	pop	{r7, pc}
    d164:	0000d07d 	.word	0x0000d07d

0000d168 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    d168:	b480      	push	{r7}
    d16a:	b085      	sub	sp, #20
    d16c:	af00      	add	r7, sp, #0
    d16e:	6078      	str	r0, [r7, #4]
    d170:	460b      	mov	r3, r1
    d172:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    d174:	687b      	ldr	r3, [r7, #4]
    d176:	785b      	ldrb	r3, [r3, #1]
    d178:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    d17a:	7bfb      	ldrb	r3, [r7, #15]
    d17c:	f023 030f 	bic.w	r3, r3, #15
    d180:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    d182:	78fb      	ldrb	r3, [r7, #3]
    d184:	f003 030f 	and.w	r3, r3, #15
    d188:	b2da      	uxtb	r2, r3
    d18a:	7bfb      	ldrb	r3, [r7, #15]
    d18c:	4313      	orrs	r3, r2
    d18e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    d190:	687b      	ldr	r3, [r7, #4]
    d192:	7bfa      	ldrb	r2, [r7, #15]
    d194:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    d196:	bf00      	nop
    d198:	3714      	adds	r7, #20
    d19a:	46bd      	mov	sp, r7
    d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1a0:	4770      	bx	lr
	...

0000d1a4 <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b082      	sub	sp, #8
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	6078      	str	r0, [r7, #4]
    d1ac:	460b      	mov	r3, r1
    d1ae:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    d1b0:	687b      	ldr	r3, [r7, #4]
    d1b2:	78fa      	ldrb	r2, [r7, #3]
    d1b4:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
    d1b6:	2110      	movs	r1, #16
    d1b8:	6878      	ldr	r0, [r7, #4]
    d1ba:	4b03      	ldr	r3, [pc, #12]	; (d1c8 <hri_wdt_write_CLEAR_reg+0x24>)
    d1bc:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    d1be:	bf00      	nop
    d1c0:	3708      	adds	r7, #8
    d1c2:	46bd      	mov	sp, r7
    d1c4:	bd80      	pop	{r7, pc}
    d1c6:	bf00      	nop
    d1c8:	0000d07d 	.word	0x0000d07d

0000d1cc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    d1cc:	b580      	push	{r7, lr}
    d1ce:	b082      	sub	sp, #8
    d1d0:	af00      	add	r7, sp, #0
    d1d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d005      	beq.n	d1e6 <_wdt_init+0x1a>
    d1da:	687b      	ldr	r3, [r7, #4]
    d1dc:	681b      	ldr	r3, [r3, #0]
    d1de:	2b00      	cmp	r3, #0
    d1e0:	d001      	beq.n	d1e6 <_wdt_init+0x1a>
    d1e2:	2301      	movs	r3, #1
    d1e4:	e000      	b.n	d1e8 <_wdt_init+0x1c>
    d1e6:	2300      	movs	r3, #0
    d1e8:	f003 0301 	and.w	r3, r3, #1
    d1ec:	b2db      	uxtb	r3, r3
    d1ee:	2250      	movs	r2, #80	; 0x50
    d1f0:	4913      	ldr	r1, [pc, #76]	; (d240 <_wdt_init+0x74>)
    d1f2:	4618      	mov	r0, r3
    d1f4:	4b13      	ldr	r3, [pc, #76]	; (d244 <_wdt_init+0x78>)
    d1f6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	681b      	ldr	r3, [r3, #0]
    d1fc:	4618      	mov	r0, r3
    d1fe:	4b12      	ldr	r3, [pc, #72]	; (d248 <_wdt_init+0x7c>)
    d200:	4798      	blx	r3
    d202:	4603      	mov	r3, r0
    d204:	2b00      	cmp	r3, #0
    d206:	d107      	bne.n	d218 <_wdt_init+0x4c>
    d208:	687b      	ldr	r3, [r7, #4]
    d20a:	681b      	ldr	r3, [r3, #0]
    d20c:	4618      	mov	r0, r3
    d20e:	4b0f      	ldr	r3, [pc, #60]	; (d24c <_wdt_init+0x80>)
    d210:	4798      	blx	r3
    d212:	4603      	mov	r3, r0
    d214:	2b00      	cmp	r3, #0
    d216:	d002      	beq.n	d21e <_wdt_init+0x52>
		return ERR_DENIED;
    d218:	f06f 0310 	mvn.w	r3, #16
    d21c:	e00b      	b.n	d236 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    d21e:	687b      	ldr	r3, [r7, #4]
    d220:	681b      	ldr	r3, [r3, #0]
    d222:	4618      	mov	r0, r3
    d224:	4b0a      	ldr	r3, [pc, #40]	; (d250 <_wdt_init+0x84>)
    d226:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    d228:	687b      	ldr	r3, [r7, #4]
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	210b      	movs	r1, #11
    d22e:	4618      	mov	r0, r3
    d230:	4b08      	ldr	r3, [pc, #32]	; (d254 <_wdt_init+0x88>)
    d232:	4798      	blx	r3
	}

	return ERR_NONE;
    d234:	2300      	movs	r3, #0
}
    d236:	4618      	mov	r0, r3
    d238:	3708      	adds	r7, #8
    d23a:	46bd      	mov	sp, r7
    d23c:	bd80      	pop	{r7, pc}
    d23e:	bf00      	nop
    d240:	00019b48 	.word	0x00019b48
    d244:	00005565 	.word	0x00005565
    d248:	0000d135 	.word	0x0000d135
    d24c:	0000d0cd 	.word	0x0000d0cd
    d250:	0000d109 	.word	0x0000d109
    d254:	0000d169 	.word	0x0000d169

0000d258 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    d258:	b5f0      	push	{r4, r5, r6, r7, lr}
    d25a:	b08b      	sub	sp, #44	; 0x2c
    d25c:	af00      	add	r7, sp, #0
    d25e:	60f8      	str	r0, [r7, #12]
    d260:	60b9      	str	r1, [r7, #8]
    d262:	4613      	mov	r3, r2
    d264:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d266:	68fb      	ldr	r3, [r7, #12]
    d268:	2b00      	cmp	r3, #0
    d26a:	d005      	beq.n	d278 <_wdt_set_timeout_period+0x20>
    d26c:	68fb      	ldr	r3, [r7, #12]
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	2b00      	cmp	r3, #0
    d272:	d001      	beq.n	d278 <_wdt_set_timeout_period+0x20>
    d274:	2301      	movs	r3, #1
    d276:	e000      	b.n	d27a <_wdt_set_timeout_period+0x22>
    d278:	2300      	movs	r3, #0
    d27a:	f003 0301 	and.w	r3, r3, #1
    d27e:	b2db      	uxtb	r3, r3
    d280:	227a      	movs	r2, #122	; 0x7a
    d282:	4954      	ldr	r1, [pc, #336]	; (d3d4 <_wdt_set_timeout_period+0x17c>)
    d284:	4618      	mov	r0, r3
    d286:	4b54      	ldr	r3, [pc, #336]	; (d3d8 <_wdt_set_timeout_period+0x180>)
    d288:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d28a:	68fb      	ldr	r3, [r7, #12]
    d28c:	681b      	ldr	r3, [r3, #0]
    d28e:	4618      	mov	r0, r3
    d290:	4b52      	ldr	r3, [pc, #328]	; (d3dc <_wdt_set_timeout_period+0x184>)
    d292:	4798      	blx	r3
    d294:	4603      	mov	r3, r0
    d296:	2b00      	cmp	r3, #0
    d298:	d107      	bne.n	d2aa <_wdt_set_timeout_period+0x52>
    d29a:	68fb      	ldr	r3, [r7, #12]
    d29c:	681b      	ldr	r3, [r3, #0]
    d29e:	4618      	mov	r0, r3
    d2a0:	4b4f      	ldr	r3, [pc, #316]	; (d3e0 <_wdt_set_timeout_period+0x188>)
    d2a2:	4798      	blx	r3
    d2a4:	4603      	mov	r3, r0
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d002      	beq.n	d2b0 <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
    d2aa:	f06f 0310 	mvn.w	r3, #16
    d2ae:	e08c      	b.n	d3ca <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    d2b0:	88f9      	ldrh	r1, [r7, #6]
    d2b2:	f04f 0200 	mov.w	r2, #0
    d2b6:	68bb      	ldr	r3, [r7, #8]
    d2b8:	f04f 0400 	mov.w	r4, #0
    d2bc:	fb03 fe02 	mul.w	lr, r3, r2
    d2c0:	fb01 f004 	mul.w	r0, r1, r4
    d2c4:	4470      	add	r0, lr
    d2c6:	fba1 3403 	umull	r3, r4, r1, r3
    d2ca:	1902      	adds	r2, r0, r4
    d2cc:	4614      	mov	r4, r2
    d2ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
    d2d2:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
    d2d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d2da:	0025      	movs	r5, r4
    d2dc:	2600      	movs	r6, #0
    d2de:	ea55 0306 	orrs.w	r3, r5, r6
    d2e2:	d002      	beq.n	d2ea <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
    d2e4:	f06f 030c 	mvn.w	r3, #12
    d2e8:	e06f      	b.n	d3ca <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
    d2ea:	69bb      	ldr	r3, [r7, #24]
    d2ec:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    d2ee:	697b      	ldr	r3, [r7, #20]
    d2f0:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    d2f4:	d041      	beq.n	d37a <_wdt_set_timeout_period+0x122>
    d2f6:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    d2fa:	d813      	bhi.n	d324 <_wdt_set_timeout_period+0xcc>
    d2fc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    d300:	d02f      	beq.n	d362 <_wdt_set_timeout_period+0x10a>
    d302:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    d306:	d806      	bhi.n	d316 <_wdt_set_timeout_period+0xbe>
    d308:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    d30c:	d021      	beq.n	d352 <_wdt_set_timeout_period+0xfa>
    d30e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
    d312:	d022      	beq.n	d35a <_wdt_set_timeout_period+0x102>
    d314:	e04d      	b.n	d3b2 <_wdt_set_timeout_period+0x15a>
    d316:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
    d31a:	d026      	beq.n	d36a <_wdt_set_timeout_period+0x112>
    d31c:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
    d320:	d027      	beq.n	d372 <_wdt_set_timeout_period+0x11a>
    d322:	e046      	b.n	d3b2 <_wdt_set_timeout_period+0x15a>
    d324:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    d328:	d033      	beq.n	d392 <_wdt_set_timeout_period+0x13a>
    d32a:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    d32e:	d806      	bhi.n	d33e <_wdt_set_timeout_period+0xe6>
    d330:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
    d334:	d025      	beq.n	d382 <_wdt_set_timeout_period+0x12a>
    d336:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
    d33a:	d026      	beq.n	d38a <_wdt_set_timeout_period+0x132>
    d33c:	e039      	b.n	d3b2 <_wdt_set_timeout_period+0x15a>
    d33e:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
    d342:	d02e      	beq.n	d3a2 <_wdt_set_timeout_period+0x14a>
    d344:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
    d348:	d02f      	beq.n	d3aa <_wdt_set_timeout_period+0x152>
    d34a:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
    d34e:	d024      	beq.n	d39a <_wdt_set_timeout_period+0x142>
    d350:	e02f      	b.n	d3b2 <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    d352:	2300      	movs	r3, #0
    d354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d358:	e02e      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    d35a:	2301      	movs	r3, #1
    d35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d360:	e02a      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    d362:	2302      	movs	r3, #2
    d364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d368:	e026      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    d36a:	2303      	movs	r3, #3
    d36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d370:	e022      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    d372:	2304      	movs	r3, #4
    d374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d378:	e01e      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    d37a:	2305      	movs	r3, #5
    d37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d380:	e01a      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    d382:	2306      	movs	r3, #6
    d384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d388:	e016      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    d38a:	2307      	movs	r3, #7
    d38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d390:	e012      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    d392:	2308      	movs	r3, #8
    d394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d398:	e00e      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    d39a:	2309      	movs	r3, #9
    d39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d3a0:	e00a      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    d3a2:	230a      	movs	r3, #10
    d3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d3a8:	e006      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    d3aa:	230b      	movs	r3, #11
    d3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    d3b0:	e002      	b.n	d3b8 <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
    d3b2:	f06f 030c 	mvn.w	r3, #12
    d3b6:	e008      	b.n	d3ca <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
    d3b8:	68fb      	ldr	r3, [r7, #12]
    d3ba:	681b      	ldr	r3, [r3, #0]
    d3bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    d3c0:	4611      	mov	r1, r2
    d3c2:	4618      	mov	r0, r3
    d3c4:	4b07      	ldr	r3, [pc, #28]	; (d3e4 <_wdt_set_timeout_period+0x18c>)
    d3c6:	4798      	blx	r3

	return ERR_NONE;
    d3c8:	2300      	movs	r3, #0
}
    d3ca:	4618      	mov	r0, r3
    d3cc:	372c      	adds	r7, #44	; 0x2c
    d3ce:	46bd      	mov	sp, r7
    d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3d2:	bf00      	nop
    d3d4:	00019b48 	.word	0x00019b48
    d3d8:	00005565 	.word	0x00005565
    d3dc:	0000d135 	.word	0x0000d135
    d3e0:	0000d0cd 	.word	0x0000d0cd
    d3e4:	0000d169 	.word	0x0000d169

0000d3e8 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    d3e8:	b580      	push	{r7, lr}
    d3ea:	b082      	sub	sp, #8
    d3ec:	af00      	add	r7, sp, #0
    d3ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d005      	beq.n	d402 <_wdt_enable+0x1a>
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	681b      	ldr	r3, [r3, #0]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d001      	beq.n	d402 <_wdt_enable+0x1a>
    d3fe:	2301      	movs	r3, #1
    d400:	e000      	b.n	d404 <_wdt_enable+0x1c>
    d402:	2300      	movs	r3, #0
    d404:	f003 0301 	and.w	r3, r3, #1
    d408:	b2db      	uxtb	r3, r3
    d40a:	22fb      	movs	r2, #251	; 0xfb
    d40c:	4906      	ldr	r1, [pc, #24]	; (d428 <_wdt_enable+0x40>)
    d40e:	4618      	mov	r0, r3
    d410:	4b06      	ldr	r3, [pc, #24]	; (d42c <_wdt_enable+0x44>)
    d412:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    d414:	687b      	ldr	r3, [r7, #4]
    d416:	681b      	ldr	r3, [r3, #0]
    d418:	4618      	mov	r0, r3
    d41a:	4b05      	ldr	r3, [pc, #20]	; (d430 <_wdt_enable+0x48>)
    d41c:	4798      	blx	r3

	return ERR_NONE;
    d41e:	2300      	movs	r3, #0
}
    d420:	4618      	mov	r0, r3
    d422:	3708      	adds	r7, #8
    d424:	46bd      	mov	sp, r7
    d426:	bd80      	pop	{r7, pc}
    d428:	00019b48 	.word	0x00019b48
    d42c:	00005565 	.word	0x00005565
    d430:	0000d0a1 	.word	0x0000d0a1

0000d434 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    d434:	b580      	push	{r7, lr}
    d436:	b082      	sub	sp, #8
    d438:	af00      	add	r7, sp, #0
    d43a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d43c:	687b      	ldr	r3, [r7, #4]
    d43e:	2b00      	cmp	r3, #0
    d440:	d005      	beq.n	d44e <_wdt_feed+0x1a>
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	681b      	ldr	r3, [r3, #0]
    d446:	2b00      	cmp	r3, #0
    d448:	d001      	beq.n	d44e <_wdt_feed+0x1a>
    d44a:	2301      	movs	r3, #1
    d44c:	e000      	b.n	d450 <_wdt_feed+0x1c>
    d44e:	2300      	movs	r3, #0
    d450:	f003 0301 	and.w	r3, r3, #1
    d454:	b2db      	uxtb	r3, r3
    d456:	f240 1219 	movw	r2, #281	; 0x119
    d45a:	4907      	ldr	r1, [pc, #28]	; (d478 <_wdt_feed+0x44>)
    d45c:	4618      	mov	r0, r3
    d45e:	4b07      	ldr	r3, [pc, #28]	; (d47c <_wdt_feed+0x48>)
    d460:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	21a5      	movs	r1, #165	; 0xa5
    d468:	4618      	mov	r0, r3
    d46a:	4b05      	ldr	r3, [pc, #20]	; (d480 <_wdt_feed+0x4c>)
    d46c:	4798      	blx	r3

	return ERR_NONE;
    d46e:	2300      	movs	r3, #0
}
    d470:	4618      	mov	r0, r3
    d472:	3708      	adds	r7, #8
    d474:	46bd      	mov	sp, r7
    d476:	bd80      	pop	{r7, pc}
    d478:	00019b48 	.word	0x00019b48
    d47c:	00005565 	.word	0x00005565
    d480:	0000d1a5 	.word	0x0000d1a5

0000d484 <hri_port_set_DIR_reg>:
{
    d484:	b480      	push	{r7}
    d486:	b085      	sub	sp, #20
    d488:	af00      	add	r7, sp, #0
    d48a:	60f8      	str	r0, [r7, #12]
    d48c:	460b      	mov	r3, r1
    d48e:	607a      	str	r2, [r7, #4]
    d490:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d492:	7afb      	ldrb	r3, [r7, #11]
    d494:	68fa      	ldr	r2, [r7, #12]
    d496:	01db      	lsls	r3, r3, #7
    d498:	4413      	add	r3, r2
    d49a:	3308      	adds	r3, #8
    d49c:	687a      	ldr	r2, [r7, #4]
    d49e:	601a      	str	r2, [r3, #0]
}
    d4a0:	bf00      	nop
    d4a2:	3714      	adds	r7, #20
    d4a4:	46bd      	mov	sp, r7
    d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4aa:	4770      	bx	lr

0000d4ac <hri_port_clear_DIR_reg>:
{
    d4ac:	b480      	push	{r7}
    d4ae:	b085      	sub	sp, #20
    d4b0:	af00      	add	r7, sp, #0
    d4b2:	60f8      	str	r0, [r7, #12]
    d4b4:	460b      	mov	r3, r1
    d4b6:	607a      	str	r2, [r7, #4]
    d4b8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d4ba:	7afb      	ldrb	r3, [r7, #11]
    d4bc:	68fa      	ldr	r2, [r7, #12]
    d4be:	01db      	lsls	r3, r3, #7
    d4c0:	4413      	add	r3, r2
    d4c2:	3304      	adds	r3, #4
    d4c4:	687a      	ldr	r2, [r7, #4]
    d4c6:	601a      	str	r2, [r3, #0]
}
    d4c8:	bf00      	nop
    d4ca:	3714      	adds	r7, #20
    d4cc:	46bd      	mov	sp, r7
    d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4d2:	4770      	bx	lr

0000d4d4 <hri_port_set_OUT_reg>:
{
    d4d4:	b480      	push	{r7}
    d4d6:	b085      	sub	sp, #20
    d4d8:	af00      	add	r7, sp, #0
    d4da:	60f8      	str	r0, [r7, #12]
    d4dc:	460b      	mov	r3, r1
    d4de:	607a      	str	r2, [r7, #4]
    d4e0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d4e2:	7afb      	ldrb	r3, [r7, #11]
    d4e4:	68fa      	ldr	r2, [r7, #12]
    d4e6:	01db      	lsls	r3, r3, #7
    d4e8:	4413      	add	r3, r2
    d4ea:	3318      	adds	r3, #24
    d4ec:	687a      	ldr	r2, [r7, #4]
    d4ee:	601a      	str	r2, [r3, #0]
}
    d4f0:	bf00      	nop
    d4f2:	3714      	adds	r7, #20
    d4f4:	46bd      	mov	sp, r7
    d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4fa:	4770      	bx	lr

0000d4fc <hri_port_clear_OUT_reg>:
{
    d4fc:	b480      	push	{r7}
    d4fe:	b085      	sub	sp, #20
    d500:	af00      	add	r7, sp, #0
    d502:	60f8      	str	r0, [r7, #12]
    d504:	460b      	mov	r3, r1
    d506:	607a      	str	r2, [r7, #4]
    d508:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d50a:	7afb      	ldrb	r3, [r7, #11]
    d50c:	68fa      	ldr	r2, [r7, #12]
    d50e:	01db      	lsls	r3, r3, #7
    d510:	4413      	add	r3, r2
    d512:	3314      	adds	r3, #20
    d514:	687a      	ldr	r2, [r7, #4]
    d516:	601a      	str	r2, [r3, #0]
}
    d518:	bf00      	nop
    d51a:	3714      	adds	r7, #20
    d51c:	46bd      	mov	sp, r7
    d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d522:	4770      	bx	lr

0000d524 <hri_port_write_PMUX_PMUXE_bf>:
{
    d524:	b480      	push	{r7}
    d526:	b085      	sub	sp, #20
    d528:	af00      	add	r7, sp, #0
    d52a:	6078      	str	r0, [r7, #4]
    d52c:	4608      	mov	r0, r1
    d52e:	4611      	mov	r1, r2
    d530:	461a      	mov	r2, r3
    d532:	4603      	mov	r3, r0
    d534:	70fb      	strb	r3, [r7, #3]
    d536:	460b      	mov	r3, r1
    d538:	70bb      	strb	r3, [r7, #2]
    d53a:	4613      	mov	r3, r2
    d53c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d53e:	78fa      	ldrb	r2, [r7, #3]
    d540:	78bb      	ldrb	r3, [r7, #2]
    d542:	6879      	ldr	r1, [r7, #4]
    d544:	01d2      	lsls	r2, r2, #7
    d546:	440a      	add	r2, r1
    d548:	4413      	add	r3, r2
    d54a:	3330      	adds	r3, #48	; 0x30
    d54c:	781b      	ldrb	r3, [r3, #0]
    d54e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    d550:	7bfb      	ldrb	r3, [r7, #15]
    d552:	f023 030f 	bic.w	r3, r3, #15
    d556:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    d558:	787b      	ldrb	r3, [r7, #1]
    d55a:	f003 030f 	and.w	r3, r3, #15
    d55e:	b2da      	uxtb	r2, r3
    d560:	7bfb      	ldrb	r3, [r7, #15]
    d562:	4313      	orrs	r3, r2
    d564:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d566:	78fa      	ldrb	r2, [r7, #3]
    d568:	78bb      	ldrb	r3, [r7, #2]
    d56a:	6879      	ldr	r1, [r7, #4]
    d56c:	01d2      	lsls	r2, r2, #7
    d56e:	440a      	add	r2, r1
    d570:	4413      	add	r3, r2
    d572:	3330      	adds	r3, #48	; 0x30
    d574:	7bfa      	ldrb	r2, [r7, #15]
    d576:	701a      	strb	r2, [r3, #0]
}
    d578:	bf00      	nop
    d57a:	3714      	adds	r7, #20
    d57c:	46bd      	mov	sp, r7
    d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d582:	4770      	bx	lr

0000d584 <hri_port_write_PMUX_PMUXO_bf>:
{
    d584:	b480      	push	{r7}
    d586:	b085      	sub	sp, #20
    d588:	af00      	add	r7, sp, #0
    d58a:	6078      	str	r0, [r7, #4]
    d58c:	4608      	mov	r0, r1
    d58e:	4611      	mov	r1, r2
    d590:	461a      	mov	r2, r3
    d592:	4603      	mov	r3, r0
    d594:	70fb      	strb	r3, [r7, #3]
    d596:	460b      	mov	r3, r1
    d598:	70bb      	strb	r3, [r7, #2]
    d59a:	4613      	mov	r3, r2
    d59c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d59e:	78fa      	ldrb	r2, [r7, #3]
    d5a0:	78bb      	ldrb	r3, [r7, #2]
    d5a2:	6879      	ldr	r1, [r7, #4]
    d5a4:	01d2      	lsls	r2, r2, #7
    d5a6:	440a      	add	r2, r1
    d5a8:	4413      	add	r3, r2
    d5aa:	3330      	adds	r3, #48	; 0x30
    d5ac:	781b      	ldrb	r3, [r3, #0]
    d5ae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    d5b0:	7bfb      	ldrb	r3, [r7, #15]
    d5b2:	f003 030f 	and.w	r3, r3, #15
    d5b6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    d5b8:	787b      	ldrb	r3, [r7, #1]
    d5ba:	011b      	lsls	r3, r3, #4
    d5bc:	b2da      	uxtb	r2, r3
    d5be:	7bfb      	ldrb	r3, [r7, #15]
    d5c0:	4313      	orrs	r3, r2
    d5c2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d5c4:	78fa      	ldrb	r2, [r7, #3]
    d5c6:	78bb      	ldrb	r3, [r7, #2]
    d5c8:	6879      	ldr	r1, [r7, #4]
    d5ca:	01d2      	lsls	r2, r2, #7
    d5cc:	440a      	add	r2, r1
    d5ce:	4413      	add	r3, r2
    d5d0:	3330      	adds	r3, #48	; 0x30
    d5d2:	7bfa      	ldrb	r2, [r7, #15]
    d5d4:	701a      	strb	r2, [r3, #0]
}
    d5d6:	bf00      	nop
    d5d8:	3714      	adds	r7, #20
    d5da:	46bd      	mov	sp, r7
    d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5e0:	4770      	bx	lr

0000d5e2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    d5e2:	b480      	push	{r7}
    d5e4:	b085      	sub	sp, #20
    d5e6:	af00      	add	r7, sp, #0
    d5e8:	6078      	str	r0, [r7, #4]
    d5ea:	4608      	mov	r0, r1
    d5ec:	4611      	mov	r1, r2
    d5ee:	461a      	mov	r2, r3
    d5f0:	4603      	mov	r3, r0
    d5f2:	70fb      	strb	r3, [r7, #3]
    d5f4:	460b      	mov	r3, r1
    d5f6:	70bb      	strb	r3, [r7, #2]
    d5f8:	4613      	mov	r3, r2
    d5fa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    d5fc:	78fa      	ldrb	r2, [r7, #3]
    d5fe:	78bb      	ldrb	r3, [r7, #2]
    d600:	6879      	ldr	r1, [r7, #4]
    d602:	01d2      	lsls	r2, r2, #7
    d604:	440a      	add	r2, r1
    d606:	4413      	add	r3, r2
    d608:	3340      	adds	r3, #64	; 0x40
    d60a:	781b      	ldrb	r3, [r3, #0]
    d60c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    d60e:	7bfb      	ldrb	r3, [r7, #15]
    d610:	f023 0301 	bic.w	r3, r3, #1
    d614:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    d616:	787a      	ldrb	r2, [r7, #1]
    d618:	7bfb      	ldrb	r3, [r7, #15]
    d61a:	4313      	orrs	r3, r2
    d61c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    d61e:	78fa      	ldrb	r2, [r7, #3]
    d620:	78bb      	ldrb	r3, [r7, #2]
    d622:	6879      	ldr	r1, [r7, #4]
    d624:	01d2      	lsls	r2, r2, #7
    d626:	440a      	add	r2, r1
    d628:	4413      	add	r3, r2
    d62a:	3340      	adds	r3, #64	; 0x40
    d62c:	7bfa      	ldrb	r2, [r7, #15]
    d62e:	701a      	strb	r2, [r3, #0]
}
    d630:	bf00      	nop
    d632:	3714      	adds	r7, #20
    d634:	46bd      	mov	sp, r7
    d636:	f85d 7b04 	ldr.w	r7, [sp], #4
    d63a:	4770      	bx	lr

0000d63c <hri_port_write_WRCONFIG_reg>:
{
    d63c:	b480      	push	{r7}
    d63e:	b085      	sub	sp, #20
    d640:	af00      	add	r7, sp, #0
    d642:	60f8      	str	r0, [r7, #12]
    d644:	460b      	mov	r3, r1
    d646:	607a      	str	r2, [r7, #4]
    d648:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    d64a:	7afb      	ldrb	r3, [r7, #11]
    d64c:	68fa      	ldr	r2, [r7, #12]
    d64e:	01db      	lsls	r3, r3, #7
    d650:	4413      	add	r3, r2
    d652:	3328      	adds	r3, #40	; 0x28
    d654:	687a      	ldr	r2, [r7, #4]
    d656:	601a      	str	r2, [r3, #0]
}
    d658:	bf00      	nop
    d65a:	3714      	adds	r7, #20
    d65c:	46bd      	mov	sp, r7
    d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d662:	4770      	bx	lr

0000d664 <_gpio_set_direction>:
{
    d664:	b580      	push	{r7, lr}
    d666:	b082      	sub	sp, #8
    d668:	af00      	add	r7, sp, #0
    d66a:	4603      	mov	r3, r0
    d66c:	6039      	str	r1, [r7, #0]
    d66e:	71fb      	strb	r3, [r7, #7]
    d670:	4613      	mov	r3, r2
    d672:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    d674:	79bb      	ldrb	r3, [r7, #6]
    d676:	2b01      	cmp	r3, #1
    d678:	d01c      	beq.n	d6b4 <_gpio_set_direction+0x50>
    d67a:	2b02      	cmp	r3, #2
    d67c:	d037      	beq.n	d6ee <_gpio_set_direction+0x8a>
    d67e:	2b00      	cmp	r3, #0
    d680:	d14e      	bne.n	d720 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d682:	79fb      	ldrb	r3, [r7, #7]
    d684:	683a      	ldr	r2, [r7, #0]
    d686:	4619      	mov	r1, r3
    d688:	482a      	ldr	r0, [pc, #168]	; (d734 <_gpio_set_direction+0xd0>)
    d68a:	4b2b      	ldr	r3, [pc, #172]	; (d738 <_gpio_set_direction+0xd4>)
    d68c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d68e:	683b      	ldr	r3, [r7, #0]
    d690:	b29b      	uxth	r3, r3
    d692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d696:	79fb      	ldrb	r3, [r7, #7]
    d698:	4619      	mov	r1, r3
    d69a:	4826      	ldr	r0, [pc, #152]	; (d734 <_gpio_set_direction+0xd0>)
    d69c:	4b27      	ldr	r3, [pc, #156]	; (d73c <_gpio_set_direction+0xd8>)
    d69e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d6a0:	683b      	ldr	r3, [r7, #0]
    d6a2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d6a4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d6a8:	79fb      	ldrb	r3, [r7, #7]
    d6aa:	4619      	mov	r1, r3
    d6ac:	4821      	ldr	r0, [pc, #132]	; (d734 <_gpio_set_direction+0xd0>)
    d6ae:	4b23      	ldr	r3, [pc, #140]	; (d73c <_gpio_set_direction+0xd8>)
    d6b0:	4798      	blx	r3
		break;
    d6b2:	e03a      	b.n	d72a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d6b4:	79fb      	ldrb	r3, [r7, #7]
    d6b6:	683a      	ldr	r2, [r7, #0]
    d6b8:	4619      	mov	r1, r3
    d6ba:	481e      	ldr	r0, [pc, #120]	; (d734 <_gpio_set_direction+0xd0>)
    d6bc:	4b1e      	ldr	r3, [pc, #120]	; (d738 <_gpio_set_direction+0xd4>)
    d6be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    d6c0:	683b      	ldr	r3, [r7, #0]
    d6c2:	b29b      	uxth	r3, r3
    d6c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    d6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d6cc:	79f9      	ldrb	r1, [r7, #7]
    d6ce:	461a      	mov	r2, r3
    d6d0:	4818      	ldr	r0, [pc, #96]	; (d734 <_gpio_set_direction+0xd0>)
    d6d2:	4b1a      	ldr	r3, [pc, #104]	; (d73c <_gpio_set_direction+0xd8>)
    d6d4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    d6d6:	683b      	ldr	r3, [r7, #0]
    d6d8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    d6da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    d6de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d6e2:	79f9      	ldrb	r1, [r7, #7]
    d6e4:	461a      	mov	r2, r3
    d6e6:	4813      	ldr	r0, [pc, #76]	; (d734 <_gpio_set_direction+0xd0>)
    d6e8:	4b14      	ldr	r3, [pc, #80]	; (d73c <_gpio_set_direction+0xd8>)
    d6ea:	4798      	blx	r3
		break;
    d6ec:	e01d      	b.n	d72a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    d6ee:	79fb      	ldrb	r3, [r7, #7]
    d6f0:	683a      	ldr	r2, [r7, #0]
    d6f2:	4619      	mov	r1, r3
    d6f4:	480f      	ldr	r0, [pc, #60]	; (d734 <_gpio_set_direction+0xd0>)
    d6f6:	4b12      	ldr	r3, [pc, #72]	; (d740 <_gpio_set_direction+0xdc>)
    d6f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d6fa:	683b      	ldr	r3, [r7, #0]
    d6fc:	b29b      	uxth	r3, r3
    d6fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d702:	79fb      	ldrb	r3, [r7, #7]
    d704:	4619      	mov	r1, r3
    d706:	480b      	ldr	r0, [pc, #44]	; (d734 <_gpio_set_direction+0xd0>)
    d708:	4b0c      	ldr	r3, [pc, #48]	; (d73c <_gpio_set_direction+0xd8>)
    d70a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d70c:	683b      	ldr	r3, [r7, #0]
    d70e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d710:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d714:	79fb      	ldrb	r3, [r7, #7]
    d716:	4619      	mov	r1, r3
    d718:	4806      	ldr	r0, [pc, #24]	; (d734 <_gpio_set_direction+0xd0>)
    d71a:	4b08      	ldr	r3, [pc, #32]	; (d73c <_gpio_set_direction+0xd8>)
    d71c:	4798      	blx	r3
		break;
    d71e:	e004      	b.n	d72a <_gpio_set_direction+0xc6>
		ASSERT(false);
    d720:	2246      	movs	r2, #70	; 0x46
    d722:	4908      	ldr	r1, [pc, #32]	; (d744 <_gpio_set_direction+0xe0>)
    d724:	2000      	movs	r0, #0
    d726:	4b08      	ldr	r3, [pc, #32]	; (d748 <_gpio_set_direction+0xe4>)
    d728:	4798      	blx	r3
}
    d72a:	bf00      	nop
    d72c:	3708      	adds	r7, #8
    d72e:	46bd      	mov	sp, r7
    d730:	bd80      	pop	{r7, pc}
    d732:	bf00      	nop
    d734:	41008000 	.word	0x41008000
    d738:	0000d4ad 	.word	0x0000d4ad
    d73c:	0000d63d 	.word	0x0000d63d
    d740:	0000d485 	.word	0x0000d485
    d744:	00019b60 	.word	0x00019b60
    d748:	00005565 	.word	0x00005565

0000d74c <_gpio_set_level>:
{
    d74c:	b580      	push	{r7, lr}
    d74e:	b082      	sub	sp, #8
    d750:	af00      	add	r7, sp, #0
    d752:	4603      	mov	r3, r0
    d754:	6039      	str	r1, [r7, #0]
    d756:	71fb      	strb	r3, [r7, #7]
    d758:	4613      	mov	r3, r2
    d75a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d75c:	79bb      	ldrb	r3, [r7, #6]
    d75e:	2b00      	cmp	r3, #0
    d760:	d006      	beq.n	d770 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d762:	79fb      	ldrb	r3, [r7, #7]
    d764:	683a      	ldr	r2, [r7, #0]
    d766:	4619      	mov	r1, r3
    d768:	4806      	ldr	r0, [pc, #24]	; (d784 <_gpio_set_level+0x38>)
    d76a:	4b07      	ldr	r3, [pc, #28]	; (d788 <_gpio_set_level+0x3c>)
    d76c:	4798      	blx	r3
}
    d76e:	e005      	b.n	d77c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d770:	79fb      	ldrb	r3, [r7, #7]
    d772:	683a      	ldr	r2, [r7, #0]
    d774:	4619      	mov	r1, r3
    d776:	4803      	ldr	r0, [pc, #12]	; (d784 <_gpio_set_level+0x38>)
    d778:	4b04      	ldr	r3, [pc, #16]	; (d78c <_gpio_set_level+0x40>)
    d77a:	4798      	blx	r3
}
    d77c:	bf00      	nop
    d77e:	3708      	adds	r7, #8
    d780:	46bd      	mov	sp, r7
    d782:	bd80      	pop	{r7, pc}
    d784:	41008000 	.word	0x41008000
    d788:	0000d4d5 	.word	0x0000d4d5
    d78c:	0000d4fd 	.word	0x0000d4fd

0000d790 <_gpio_set_pin_function>:
{
    d790:	b590      	push	{r4, r7, lr}
    d792:	b085      	sub	sp, #20
    d794:	af00      	add	r7, sp, #0
    d796:	6078      	str	r0, [r7, #4]
    d798:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    d79a:	687b      	ldr	r3, [r7, #4]
    d79c:	095b      	lsrs	r3, r3, #5
    d79e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	b2db      	uxtb	r3, r3
    d7a4:	f003 031f 	and.w	r3, r3, #31
    d7a8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    d7aa:	683b      	ldr	r3, [r7, #0]
    d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    d7b0:	d106      	bne.n	d7c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    d7b2:	7bba      	ldrb	r2, [r7, #14]
    d7b4:	7bf9      	ldrb	r1, [r7, #15]
    d7b6:	2300      	movs	r3, #0
    d7b8:	4812      	ldr	r0, [pc, #72]	; (d804 <_gpio_set_pin_function+0x74>)
    d7ba:	4c13      	ldr	r4, [pc, #76]	; (d808 <_gpio_set_pin_function+0x78>)
    d7bc:	47a0      	blx	r4
}
    d7be:	e01d      	b.n	d7fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    d7c0:	7bba      	ldrb	r2, [r7, #14]
    d7c2:	7bf9      	ldrb	r1, [r7, #15]
    d7c4:	2301      	movs	r3, #1
    d7c6:	480f      	ldr	r0, [pc, #60]	; (d804 <_gpio_set_pin_function+0x74>)
    d7c8:	4c0f      	ldr	r4, [pc, #60]	; (d808 <_gpio_set_pin_function+0x78>)
    d7ca:	47a0      	blx	r4
		if (pin & 1) {
    d7cc:	7bbb      	ldrb	r3, [r7, #14]
    d7ce:	f003 0301 	and.w	r3, r3, #1
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d009      	beq.n	d7ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    d7d6:	7bbb      	ldrb	r3, [r7, #14]
    d7d8:	085b      	lsrs	r3, r3, #1
    d7da:	b2da      	uxtb	r2, r3
    d7dc:	683b      	ldr	r3, [r7, #0]
    d7de:	b2db      	uxtb	r3, r3
    d7e0:	7bf9      	ldrb	r1, [r7, #15]
    d7e2:	4808      	ldr	r0, [pc, #32]	; (d804 <_gpio_set_pin_function+0x74>)
    d7e4:	4c09      	ldr	r4, [pc, #36]	; (d80c <_gpio_set_pin_function+0x7c>)
    d7e6:	47a0      	blx	r4
}
    d7e8:	e008      	b.n	d7fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    d7ea:	7bbb      	ldrb	r3, [r7, #14]
    d7ec:	085b      	lsrs	r3, r3, #1
    d7ee:	b2da      	uxtb	r2, r3
    d7f0:	683b      	ldr	r3, [r7, #0]
    d7f2:	b2db      	uxtb	r3, r3
    d7f4:	7bf9      	ldrb	r1, [r7, #15]
    d7f6:	4803      	ldr	r0, [pc, #12]	; (d804 <_gpio_set_pin_function+0x74>)
    d7f8:	4c05      	ldr	r4, [pc, #20]	; (d810 <_gpio_set_pin_function+0x80>)
    d7fa:	47a0      	blx	r4
}
    d7fc:	bf00      	nop
    d7fe:	3714      	adds	r7, #20
    d800:	46bd      	mov	sp, r7
    d802:	bd90      	pop	{r4, r7, pc}
    d804:	41008000 	.word	0x41008000
    d808:	0000d5e3 	.word	0x0000d5e3
    d80c:	0000d585 	.word	0x0000d585
    d810:	0000d525 	.word	0x0000d525

0000d814 <gpio_set_pin_function>:
{
    d814:	b580      	push	{r7, lr}
    d816:	b082      	sub	sp, #8
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
    d81c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    d81e:	6839      	ldr	r1, [r7, #0]
    d820:	6878      	ldr	r0, [r7, #4]
    d822:	4b03      	ldr	r3, [pc, #12]	; (d830 <gpio_set_pin_function+0x1c>)
    d824:	4798      	blx	r3
}
    d826:	bf00      	nop
    d828:	3708      	adds	r7, #8
    d82a:	46bd      	mov	sp, r7
    d82c:	bd80      	pop	{r7, pc}
    d82e:	bf00      	nop
    d830:	0000d791 	.word	0x0000d791

0000d834 <gpio_set_pin_direction>:
{
    d834:	b580      	push	{r7, lr}
    d836:	b082      	sub	sp, #8
    d838:	af00      	add	r7, sp, #0
    d83a:	4603      	mov	r3, r0
    d83c:	460a      	mov	r2, r1
    d83e:	71fb      	strb	r3, [r7, #7]
    d840:	4613      	mov	r3, r2
    d842:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    d844:	79fb      	ldrb	r3, [r7, #7]
    d846:	095b      	lsrs	r3, r3, #5
    d848:	b2d8      	uxtb	r0, r3
    d84a:	79fb      	ldrb	r3, [r7, #7]
    d84c:	f003 031f 	and.w	r3, r3, #31
    d850:	2201      	movs	r2, #1
    d852:	fa02 f303 	lsl.w	r3, r2, r3
    d856:	79ba      	ldrb	r2, [r7, #6]
    d858:	4619      	mov	r1, r3
    d85a:	4b03      	ldr	r3, [pc, #12]	; (d868 <gpio_set_pin_direction+0x34>)
    d85c:	4798      	blx	r3
}
    d85e:	bf00      	nop
    d860:	3708      	adds	r7, #8
    d862:	46bd      	mov	sp, r7
    d864:	bd80      	pop	{r7, pc}
    d866:	bf00      	nop
    d868:	0000d665 	.word	0x0000d665

0000d86c <gpio_set_pin_level>:
{
    d86c:	b580      	push	{r7, lr}
    d86e:	b082      	sub	sp, #8
    d870:	af00      	add	r7, sp, #0
    d872:	4603      	mov	r3, r0
    d874:	460a      	mov	r2, r1
    d876:	71fb      	strb	r3, [r7, #7]
    d878:	4613      	mov	r3, r2
    d87a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d87c:	79fb      	ldrb	r3, [r7, #7]
    d87e:	095b      	lsrs	r3, r3, #5
    d880:	b2d8      	uxtb	r0, r3
    d882:	79fb      	ldrb	r3, [r7, #7]
    d884:	f003 031f 	and.w	r3, r3, #31
    d888:	2201      	movs	r2, #1
    d88a:	fa02 f303 	lsl.w	r3, r2, r3
    d88e:	79ba      	ldrb	r2, [r7, #6]
    d890:	4619      	mov	r1, r3
    d892:	4b03      	ldr	r3, [pc, #12]	; (d8a0 <gpio_set_pin_level+0x34>)
    d894:	4798      	blx	r3
}
    d896:	bf00      	nop
    d898:	3708      	adds	r7, #8
    d89a:	46bd      	mov	sp, r7
    d89c:	bd80      	pop	{r7, pc}
    d89e:	bf00      	nop
    d8a0:	0000d74d 	.word	0x0000d74d

0000d8a4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    d8a4:	b580      	push	{r7, lr}
    d8a6:	b082      	sub	sp, #8
    d8a8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    d8aa:	2100      	movs	r1, #0
    d8ac:	2008      	movs	r0, #8
    d8ae:	4b24      	ldr	r3, [pc, #144]	; (d940 <QSPI_N25Q256_exit_xip+0x9c>)
    d8b0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d8b2:	2100      	movs	r1, #0
    d8b4:	202b      	movs	r0, #43	; 0x2b
    d8b6:	4b22      	ldr	r3, [pc, #136]	; (d940 <QSPI_N25Q256_exit_xip+0x9c>)
    d8b8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d8ba:	2100      	movs	r1, #0
    d8bc:	202a      	movs	r0, #42	; 0x2a
    d8be:	4b20      	ldr	r3, [pc, #128]	; (d940 <QSPI_N25Q256_exit_xip+0x9c>)
    d8c0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d8c2:	2102      	movs	r1, #2
    d8c4:	2008      	movs	r0, #8
    d8c6:	4b1f      	ldr	r3, [pc, #124]	; (d944 <QSPI_N25Q256_exit_xip+0xa0>)
    d8c8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d8ca:	2102      	movs	r1, #2
    d8cc:	202b      	movs	r0, #43	; 0x2b
    d8ce:	4b1d      	ldr	r3, [pc, #116]	; (d944 <QSPI_N25Q256_exit_xip+0xa0>)
    d8d0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d8d2:	2102      	movs	r1, #2
    d8d4:	202a      	movs	r0, #42	; 0x2a
    d8d6:	4b1b      	ldr	r3, [pc, #108]	; (d944 <QSPI_N25Q256_exit_xip+0xa0>)
    d8d8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d8da:	2101      	movs	r1, #1
    d8dc:	2008      	movs	r0, #8
    d8de:	4b1a      	ldr	r3, [pc, #104]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d8e0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d8e2:	2100      	movs	r1, #0
    d8e4:	202b      	movs	r0, #43	; 0x2b
    d8e6:	4b18      	ldr	r3, [pc, #96]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d8e8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d8ea:	2100      	movs	r1, #0
    d8ec:	202a      	movs	r0, #42	; 0x2a
    d8ee:	4b16      	ldr	r3, [pc, #88]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d8f0:	4798      	blx	r3

	delay_us(1);
    d8f2:	2001      	movs	r0, #1
    d8f4:	4b15      	ldr	r3, [pc, #84]	; (d94c <QSPI_N25Q256_exit_xip+0xa8>)
    d8f6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d8f8:	2300      	movs	r3, #0
    d8fa:	607b      	str	r3, [r7, #4]
    d8fc:	e010      	b.n	d920 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d8fe:	2101      	movs	r1, #1
    d900:	202a      	movs	r0, #42	; 0x2a
    d902:	4b11      	ldr	r3, [pc, #68]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d904:	4798      	blx	r3
		delay_us(1);
    d906:	2001      	movs	r0, #1
    d908:	4b10      	ldr	r3, [pc, #64]	; (d94c <QSPI_N25Q256_exit_xip+0xa8>)
    d90a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d90c:	2100      	movs	r1, #0
    d90e:	202a      	movs	r0, #42	; 0x2a
    d910:	4b0d      	ldr	r3, [pc, #52]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d912:	4798      	blx	r3
		delay_us(1);
    d914:	2001      	movs	r0, #1
    d916:	4b0d      	ldr	r3, [pc, #52]	; (d94c <QSPI_N25Q256_exit_xip+0xa8>)
    d918:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	3301      	adds	r3, #1
    d91e:	607b      	str	r3, [r7, #4]
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	2b06      	cmp	r3, #6
    d924:	ddeb      	ble.n	d8fe <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d926:	2101      	movs	r1, #1
    d928:	202b      	movs	r0, #43	; 0x2b
    d92a:	4b07      	ldr	r3, [pc, #28]	; (d948 <QSPI_N25Q256_exit_xip+0xa4>)
    d92c:	4798      	blx	r3
	delay_us(1);
    d92e:	2001      	movs	r0, #1
    d930:	4b06      	ldr	r3, [pc, #24]	; (d94c <QSPI_N25Q256_exit_xip+0xa8>)
    d932:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d934:	4b06      	ldr	r3, [pc, #24]	; (d950 <QSPI_N25Q256_exit_xip+0xac>)
    d936:	4798      	blx	r3
}
    d938:	bf00      	nop
    d93a:	3708      	adds	r7, #8
    d93c:	46bd      	mov	sp, r7
    d93e:	bd80      	pop	{r7, pc}
    d940:	0000d815 	.word	0x0000d815
    d944:	0000d835 	.word	0x0000d835
    d948:	0000d86d 	.word	0x0000d86d
    d94c:	00003ea1 	.word	0x00003ea1
    d950:	00002f55 	.word	0x00002f55

0000d954 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d954:	b598      	push	{r3, r4, r7, lr}
    d956:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d958:	4806      	ldr	r0, [pc, #24]	; (d974 <spi_nor_flash_init+0x20>)
    d95a:	4b07      	ldr	r3, [pc, #28]	; (d978 <spi_nor_flash_init+0x24>)
    d95c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d95e:	2300      	movs	r3, #0
    d960:	4a06      	ldr	r2, [pc, #24]	; (d97c <spi_nor_flash_init+0x28>)
    d962:	4904      	ldr	r1, [pc, #16]	; (d974 <spi_nor_flash_init+0x20>)
    d964:	4806      	ldr	r0, [pc, #24]	; (d980 <spi_nor_flash_init+0x2c>)
    d966:	4c07      	ldr	r4, [pc, #28]	; (d984 <spi_nor_flash_init+0x30>)
    d968:	47a0      	blx	r4
    d96a:	4602      	mov	r2, r0
    d96c:	4b06      	ldr	r3, [pc, #24]	; (d988 <spi_nor_flash_init+0x34>)
    d96e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d970:	bf00      	nop
    d972:	bd98      	pop	{r3, r4, r7, pc}
    d974:	2000974c 	.word	0x2000974c
    d978:	0000440d 	.word	0x0000440d
    d97c:	0000d8a5 	.word	0x0000d8a5
    d980:	20001408 	.word	0x20001408
    d984:	0000ddc1 	.word	0x0000ddc1
    d988:	2000992c 	.word	0x2000992c

0000d98c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    d98c:	b580      	push	{r7, lr}
    d98e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    d990:	4805      	ldr	r0, [pc, #20]	; (d9a8 <cdc_device_acm_init+0x1c>)
    d992:	4b06      	ldr	r3, [pc, #24]	; (d9ac <cdc_device_acm_init+0x20>)
    d994:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    d996:	4b06      	ldr	r3, [pc, #24]	; (d9b0 <cdc_device_acm_init+0x24>)
    d998:	4798      	blx	r3

	usbdc_start(single_desc);
    d99a:	4806      	ldr	r0, [pc, #24]	; (d9b4 <cdc_device_acm_init+0x28>)
    d99c:	4b06      	ldr	r3, [pc, #24]	; (d9b8 <cdc_device_acm_init+0x2c>)
    d99e:	4798      	blx	r3
	usbdc_attach();
    d9a0:	4b06      	ldr	r3, [pc, #24]	; (d9bc <cdc_device_acm_init+0x30>)
    d9a2:	4798      	blx	r3
}
    d9a4:	bf00      	nop
    d9a6:	bd80      	pop	{r7, pc}
    d9a8:	20001458 	.word	0x20001458
    d9ac:	0000f4e9 	.word	0x0000f4e9
    d9b0:	0000e761 	.word	0x0000e761
    d9b4:	200001d4 	.word	0x200001d4
    d9b8:	0000f585 	.word	0x0000f585
    d9bc:	0000f5d5 	.word	0x0000f5d5

0000d9c0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    d9c0:	b580      	push	{r7, lr}
    d9c2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    d9c4:	4b01      	ldr	r3, [pc, #4]	; (d9cc <usb_init+0xc>)
    d9c6:	4798      	blx	r3
}
    d9c8:	bf00      	nop
    d9ca:	bd80      	pop	{r7, pc}
    d9cc:	0000d98d 	.word	0x0000d98d

0000d9d0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    d9d0:	b480      	push	{r7}
    d9d2:	b085      	sub	sp, #20
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d9d8:	f3ef 8310 	mrs	r3, PRIMASK
    d9dc:	60fb      	str	r3, [r7, #12]
  return(result);
    d9de:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d9e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d9e6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    d9ea:	bf00      	nop
    d9ec:	3714      	adds	r7, #20
    d9ee:	46bd      	mov	sp, r7
    d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9f4:	4770      	bx	lr

0000d9f6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    d9f6:	b480      	push	{r7}
    d9f8:	b085      	sub	sp, #20
    d9fa:	af00      	add	r7, sp, #0
    d9fc:	6078      	str	r0, [r7, #4]
    d9fe:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    da02:	687b      	ldr	r3, [r7, #4]
    da04:	681b      	ldr	r3, [r3, #0]
    da06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    da08:	68fb      	ldr	r3, [r7, #12]
    da0a:	f383 8810 	msr	PRIMASK, r3
}
    da0e:	bf00      	nop
    da10:	3714      	adds	r7, #20
    da12:	46bd      	mov	sp, r7
    da14:	f85d 7b04 	ldr.w	r7, [sp], #4
    da18:	4770      	bx	lr
	...

0000da1c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    da1c:	b580      	push	{r7, lr}
    da1e:	b08c      	sub	sp, #48	; 0x30
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
    da24:	460b      	mov	r3, r1
    da26:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    da28:	687b      	ldr	r3, [r7, #4]
    da2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    da2c:	687b      	ldr	r3, [r7, #4]
    da2e:	681b      	ldr	r3, [r3, #0]
    da30:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    da32:	f107 030c 	add.w	r3, r7, #12
    da36:	2200      	movs	r2, #0
    da38:	601a      	str	r2, [r3, #0]
    da3a:	605a      	str	r2, [r3, #4]
    da3c:	609a      	str	r2, [r3, #8]
    da3e:	60da      	str	r2, [r3, #12]
    da40:	611a      	str	r2, [r3, #16]
    da42:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da46:	7b1b      	ldrb	r3, [r3, #12]
    da48:	2b00      	cmp	r3, #0
    da4a:	d001      	beq.n	da50 <n25q256a_xip_confirm+0x34>
    da4c:	2206      	movs	r2, #6
    da4e:	e000      	b.n	da52 <n25q256a_xip_confirm+0x36>
    da50:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    da52:	7b3b      	ldrb	r3, [r7, #12]
    da54:	f362 0302 	bfi	r3, r2, #0, #3
    da58:	733b      	strb	r3, [r7, #12]
    da5a:	7b3b      	ldrb	r3, [r7, #12]
    da5c:	f043 0310 	orr.w	r3, r3, #16
    da60:	733b      	strb	r3, [r7, #12]
    da62:	7b3b      	ldrb	r3, [r7, #12]
    da64:	f043 0320 	orr.w	r3, r3, #32
    da68:	733b      	strb	r3, [r7, #12]
    da6a:	7b3b      	ldrb	r3, [r7, #12]
    da6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    da70:	733b      	strb	r3, [r7, #12]
    da72:	7b3b      	ldrb	r3, [r7, #12]
    da74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da78:	733b      	strb	r3, [r7, #12]
    da7a:	7b7b      	ldrb	r3, [r7, #13]
    da7c:	f043 0303 	orr.w	r3, r3, #3
    da80:	737b      	strb	r3, [r7, #13]
    da82:	7b7b      	ldrb	r3, [r7, #13]
    da84:	2201      	movs	r2, #1
    da86:	f362 1305 	bfi	r3, r2, #4, #2
    da8a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da8e:	7b1b      	ldrb	r3, [r3, #12]
    da90:	2b00      	cmp	r3, #0
    da92:	d001      	beq.n	da98 <n25q256a_xip_confirm+0x7c>
    da94:	2208      	movs	r2, #8
    da96:	e000      	b.n	da9a <n25q256a_xip_confirm+0x7e>
    da98:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    da9a:	7bbb      	ldrb	r3, [r7, #14]
    da9c:	f362 0304 	bfi	r3, r2, #0, #5
    daa0:	73bb      	strb	r3, [r7, #14]
    daa2:	230b      	movs	r3, #11
    daa4:	743b      	strb	r3, [r7, #16]
    daa6:	78fb      	ldrb	r3, [r7, #3]
    daa8:	2b00      	cmp	r3, #0
    daaa:	d001      	beq.n	dab0 <n25q256a_xip_confirm+0x94>
    daac:	2300      	movs	r3, #0
    daae:	e000      	b.n	dab2 <n25q256a_xip_confirm+0x96>
    dab0:	23ff      	movs	r3, #255	; 0xff
    dab2:	747b      	strb	r3, [r7, #17]
    dab4:	2301      	movs	r3, #1
    dab6:	61bb      	str	r3, [r7, #24]
    dab8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    dabc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    dabe:	f107 030c 	add.w	r3, r7, #12
    dac2:	4619      	mov	r1, r3
    dac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dac6:	4b07      	ldr	r3, [pc, #28]	; (dae4 <n25q256a_xip_confirm+0xc8>)
    dac8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    daca:	78fb      	ldrb	r3, [r7, #3]
    dacc:	2b00      	cmp	r3, #0
    dace:	d001      	beq.n	dad4 <n25q256a_xip_confirm+0xb8>
    dad0:	2202      	movs	r2, #2
    dad2:	e000      	b.n	dad6 <n25q256a_xip_confirm+0xba>
    dad4:	2201      	movs	r2, #1
    dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dad8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    dada:	2300      	movs	r3, #0
}
    dadc:	4618      	mov	r0, r3
    dade:	3730      	adds	r7, #48	; 0x30
    dae0:	46bd      	mov	sp, r7
    dae2:	bd80      	pop	{r7, pc}
    dae4:	00004485 	.word	0x00004485

0000dae8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    dae8:	b580      	push	{r7, lr}
    daea:	b08c      	sub	sp, #48	; 0x30
    daec:	af00      	add	r7, sp, #0
    daee:	6078      	str	r0, [r7, #4]
    daf0:	460b      	mov	r3, r1
    daf2:	70fb      	strb	r3, [r7, #3]
    daf4:	4613      	mov	r3, r2
    daf6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    daf8:	2300      	movs	r3, #0
    dafa:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    dafc:	687b      	ldr	r3, [r7, #4]
    dafe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	681b      	ldr	r3, [r3, #0]
    db04:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    db06:	f107 030c 	add.w	r3, r7, #12
    db0a:	2200      	movs	r2, #0
    db0c:	601a      	str	r2, [r3, #0]
    db0e:	605a      	str	r2, [r3, #4]
    db10:	609a      	str	r2, [r3, #8]
    db12:	60da      	str	r2, [r3, #12]
    db14:	611a      	str	r2, [r3, #16]
    db16:	615a      	str	r2, [r3, #20]
    db18:	78fb      	ldrb	r3, [r7, #3]
    db1a:	f003 0307 	and.w	r3, r3, #7
    db1e:	b2da      	uxtb	r2, r3
    db20:	7b3b      	ldrb	r3, [r7, #12]
    db22:	f362 0302 	bfi	r3, r2, #0, #3
    db26:	733b      	strb	r3, [r7, #12]
    db28:	7b3b      	ldrb	r3, [r7, #12]
    db2a:	f043 0310 	orr.w	r3, r3, #16
    db2e:	733b      	strb	r3, [r7, #12]
    db30:	7b3b      	ldrb	r3, [r7, #12]
    db32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    db36:	733b      	strb	r3, [r7, #12]
    db38:	78bb      	ldrb	r3, [r7, #2]
    db3a:	743b      	strb	r3, [r7, #16]
    db3c:	2301      	movs	r3, #1
    db3e:	61bb      	str	r3, [r7, #24]
    db40:	f107 0324 	add.w	r3, r7, #36	; 0x24
    db44:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    db46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db48:	7b5b      	ldrb	r3, [r3, #13]
    db4a:	2b00      	cmp	r3, #0
    db4c:	d003      	beq.n	db56 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    db4e:	2100      	movs	r1, #0
    db50:	6878      	ldr	r0, [r7, #4]
    db52:	4b0a      	ldr	r3, [pc, #40]	; (db7c <n25q256a_read_reg+0x94>)
    db54:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    db56:	f107 030c 	add.w	r3, r7, #12
    db5a:	4619      	mov	r1, r3
    db5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    db5e:	4b08      	ldr	r3, [pc, #32]	; (db80 <n25q256a_read_reg+0x98>)
    db60:	4798      	blx	r3
	if (n25q->xip_mode) {
    db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db64:	7b5b      	ldrb	r3, [r3, #13]
    db66:	2b00      	cmp	r3, #0
    db68:	d003      	beq.n	db72 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    db6a:	2101      	movs	r1, #1
    db6c:	6878      	ldr	r0, [r7, #4]
    db6e:	4b03      	ldr	r3, [pc, #12]	; (db7c <n25q256a_read_reg+0x94>)
    db70:	4798      	blx	r3
	}
	return status;
    db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    db74:	4618      	mov	r0, r3
    db76:	3730      	adds	r7, #48	; 0x30
    db78:	46bd      	mov	sp, r7
    db7a:	bd80      	pop	{r7, pc}
    db7c:	0000da1d 	.word	0x0000da1d
    db80:	00004485 	.word	0x00004485

0000db84 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    db84:	b580      	push	{r7, lr}
    db86:	b08c      	sub	sp, #48	; 0x30
    db88:	af00      	add	r7, sp, #0
    db8a:	60f8      	str	r0, [r7, #12]
    db8c:	607b      	str	r3, [r7, #4]
    db8e:	460b      	mov	r3, r1
    db90:	72fb      	strb	r3, [r7, #11]
    db92:	4613      	mov	r3, r2
    db94:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    db96:	68fb      	ldr	r3, [r7, #12]
    db98:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    db9a:	68fb      	ldr	r3, [r7, #12]
    db9c:	681b      	ldr	r3, [r3, #0]
    db9e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    dba0:	f107 0310 	add.w	r3, r7, #16
    dba4:	2200      	movs	r2, #0
    dba6:	601a      	str	r2, [r3, #0]
    dba8:	605a      	str	r2, [r3, #4]
    dbaa:	609a      	str	r2, [r3, #8]
    dbac:	60da      	str	r2, [r3, #12]
    dbae:	611a      	str	r2, [r3, #16]
    dbb0:	615a      	str	r2, [r3, #20]
    dbb2:	7afb      	ldrb	r3, [r7, #11]
    dbb4:	f003 0307 	and.w	r3, r3, #7
    dbb8:	b2da      	uxtb	r2, r3
    dbba:	7c3b      	ldrb	r3, [r7, #16]
    dbbc:	f362 0302 	bfi	r3, r2, #0, #3
    dbc0:	743b      	strb	r3, [r7, #16]
    dbc2:	7c3b      	ldrb	r3, [r7, #16]
    dbc4:	f043 0310 	orr.w	r3, r3, #16
    dbc8:	743b      	strb	r3, [r7, #16]
    dbca:	7c3b      	ldrb	r3, [r7, #16]
    dbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dbd0:	743b      	strb	r3, [r7, #16]
    dbd2:	7c7b      	ldrb	r3, [r7, #17]
    dbd4:	2202      	movs	r2, #2
    dbd6:	f362 1305 	bfi	r3, r2, #4, #2
    dbda:	747b      	strb	r3, [r7, #17]
    dbdc:	7abb      	ldrb	r3, [r7, #10]
    dbde:	753b      	strb	r3, [r7, #20]
    dbe0:	2301      	movs	r3, #1
    dbe2:	61fb      	str	r3, [r7, #28]
    dbe4:	1d3b      	adds	r3, r7, #4
    dbe6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbea:	7b5b      	ldrb	r3, [r3, #13]
    dbec:	2b00      	cmp	r3, #0
    dbee:	d003      	beq.n	dbf8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    dbf0:	2100      	movs	r1, #0
    dbf2:	68f8      	ldr	r0, [r7, #12]
    dbf4:	4b09      	ldr	r3, [pc, #36]	; (dc1c <n25q256a_write_reg+0x98>)
    dbf6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    dbf8:	f107 0310 	add.w	r3, r7, #16
    dbfc:	4619      	mov	r1, r3
    dbfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dc00:	4b07      	ldr	r3, [pc, #28]	; (dc20 <n25q256a_write_reg+0x9c>)
    dc02:	4798      	blx	r3
	if (n25q->xip_mode) {
    dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc06:	7b5b      	ldrb	r3, [r3, #13]
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d003      	beq.n	dc14 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    dc0c:	2101      	movs	r1, #1
    dc0e:	68f8      	ldr	r0, [r7, #12]
    dc10:	4b02      	ldr	r3, [pc, #8]	; (dc1c <n25q256a_write_reg+0x98>)
    dc12:	4798      	blx	r3
	}
}
    dc14:	bf00      	nop
    dc16:	3730      	adds	r7, #48	; 0x30
    dc18:	46bd      	mov	sp, r7
    dc1a:	bd80      	pop	{r7, pc}
    dc1c:	0000da1d 	.word	0x0000da1d
    dc20:	00004485 	.word	0x00004485

0000dc24 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    dc24:	b580      	push	{r7, lr}
    dc26:	b090      	sub	sp, #64	; 0x40
    dc28:	af00      	add	r7, sp, #0
    dc2a:	6078      	str	r0, [r7, #4]
    dc2c:	460b      	mov	r3, r1
    dc2e:	70fb      	strb	r3, [r7, #3]
    dc30:	4613      	mov	r3, r2
    dc32:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	681b      	ldr	r3, [r3, #0]
    dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    dc3a:	78bb      	ldrb	r3, [r7, #2]
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d001      	beq.n	dc44 <n25q256a_write_enable+0x20>
    dc40:	2306      	movs	r3, #6
    dc42:	e000      	b.n	dc46 <n25q256a_write_enable+0x22>
    dc44:	2304      	movs	r3, #4
    dc46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    dc4a:	f107 0320 	add.w	r3, r7, #32
    dc4e:	2200      	movs	r2, #0
    dc50:	601a      	str	r2, [r3, #0]
    dc52:	605a      	str	r2, [r3, #4]
    dc54:	609a      	str	r2, [r3, #8]
    dc56:	60da      	str	r2, [r3, #12]
    dc58:	611a      	str	r2, [r3, #16]
    dc5a:	615a      	str	r2, [r3, #20]
    dc5c:	78fb      	ldrb	r3, [r7, #3]
    dc5e:	f003 0307 	and.w	r3, r3, #7
    dc62:	b2da      	uxtb	r2, r3
    dc64:	f897 3020 	ldrb.w	r3, [r7, #32]
    dc68:	f362 0302 	bfi	r3, r2, #0, #3
    dc6c:	f887 3020 	strb.w	r3, [r7, #32]
    dc70:	f897 3020 	ldrb.w	r3, [r7, #32]
    dc74:	f043 0310 	orr.w	r3, r3, #16
    dc78:	f887 3020 	strb.w	r3, [r7, #32]
    dc7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    dc80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    dc84:	f107 0308 	add.w	r3, r7, #8
    dc88:	2200      	movs	r2, #0
    dc8a:	601a      	str	r2, [r3, #0]
    dc8c:	605a      	str	r2, [r3, #4]
    dc8e:	609a      	str	r2, [r3, #8]
    dc90:	60da      	str	r2, [r3, #12]
    dc92:	611a      	str	r2, [r3, #16]
    dc94:	615a      	str	r2, [r3, #20]
    dc96:	78fb      	ldrb	r3, [r7, #3]
    dc98:	f003 0307 	and.w	r3, r3, #7
    dc9c:	b2da      	uxtb	r2, r3
    dc9e:	7a3b      	ldrb	r3, [r7, #8]
    dca0:	f362 0302 	bfi	r3, r2, #0, #3
    dca4:	723b      	strb	r3, [r7, #8]
    dca6:	7a3b      	ldrb	r3, [r7, #8]
    dca8:	f043 0310 	orr.w	r3, r3, #16
    dcac:	723b      	strb	r3, [r7, #8]
    dcae:	7a3b      	ldrb	r3, [r7, #8]
    dcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dcb4:	723b      	strb	r3, [r7, #8]
    dcb6:	2305      	movs	r3, #5
    dcb8:	733b      	strb	r3, [r7, #12]
    dcba:	2301      	movs	r3, #1
    dcbc:	617b      	str	r3, [r7, #20]
    dcbe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    dcc2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    dcc4:	f107 0320 	add.w	r3, r7, #32
    dcc8:	4619      	mov	r1, r3
    dcca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    dccc:	4b08      	ldr	r3, [pc, #32]	; (dcf0 <n25q256a_write_enable+0xcc>)
    dcce:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    dcd0:	f107 0308 	add.w	r3, r7, #8
    dcd4:	4619      	mov	r1, r3
    dcd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    dcd8:	4b05      	ldr	r3, [pc, #20]	; (dcf0 <n25q256a_write_enable+0xcc>)
    dcda:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    dcdc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    dce0:	f003 0302 	and.w	r3, r3, #2
    dce4:	2b00      	cmp	r3, #0
    dce6:	d0ed      	beq.n	dcc4 <n25q256a_write_enable+0xa0>
}
    dce8:	bf00      	nop
    dcea:	3740      	adds	r7, #64	; 0x40
    dcec:	46bd      	mov	sp, r7
    dcee:	bd80      	pop	{r7, pc}
    dcf0:	00004485 	.word	0x00004485

0000dcf4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    dcf4:	b590      	push	{r4, r7, lr}
    dcf6:	b087      	sub	sp, #28
    dcf8:	af00      	add	r7, sp, #0
    dcfa:	6078      	str	r0, [r7, #4]
    dcfc:	460b      	mov	r3, r1
    dcfe:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    dd00:	687b      	ldr	r3, [r7, #4]
    dd02:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    dd04:	68fb      	ldr	r3, [r7, #12]
    dd06:	7b1b      	ldrb	r3, [r3, #12]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d001      	beq.n	dd10 <n25q256a_switch_mode+0x1c>
    dd0c:	2306      	movs	r3, #6
    dd0e:	e000      	b.n	dd12 <n25q256a_switch_mode+0x1e>
    dd10:	2300      	movs	r3, #0
    dd12:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    dd14:	7afb      	ldrb	r3, [r7, #11]
    dd16:	2265      	movs	r2, #101	; 0x65
    dd18:	4619      	mov	r1, r3
    dd1a:	6878      	ldr	r0, [r7, #4]
    dd1c:	4b25      	ldr	r3, [pc, #148]	; (ddb4 <n25q256a_switch_mode+0xc0>)
    dd1e:	4798      	blx	r3
    dd20:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    dd22:	2300      	movs	r3, #0
    dd24:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    dd26:	68fb      	ldr	r3, [r7, #12]
    dd28:	7b1b      	ldrb	r3, [r3, #12]
    dd2a:	78fa      	ldrb	r2, [r7, #3]
    dd2c:	429a      	cmp	r2, r3
    dd2e:	d03d      	beq.n	ddac <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    dd30:	78fb      	ldrb	r3, [r7, #3]
    dd32:	2b00      	cmp	r3, #0
    dd34:	d00b      	beq.n	dd4e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    dd36:	697b      	ldr	r3, [r7, #20]
    dd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dd3c:	2b00      	cmp	r3, #0
    dd3e:	d011      	beq.n	dd64 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    dd40:	697b      	ldr	r3, [r7, #20]
    dd42:	f003 031f 	and.w	r3, r3, #31
    dd46:	617b      	str	r3, [r7, #20]
			modify = 1;
    dd48:	2301      	movs	r3, #1
    dd4a:	74fb      	strb	r3, [r7, #19]
    dd4c:	e00a      	b.n	dd64 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    dd4e:	697b      	ldr	r3, [r7, #20]
    dd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dd54:	2b00      	cmp	r3, #0
    dd56:	d105      	bne.n	dd64 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    dd58:	697b      	ldr	r3, [r7, #20]
    dd5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    dd5e:	617b      	str	r3, [r7, #20]
			modify = 1;
    dd60:	2301      	movs	r3, #1
    dd62:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    dd64:	7cfb      	ldrb	r3, [r7, #19]
    dd66:	2b00      	cmp	r3, #0
    dd68:	d021      	beq.n	ddae <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    dd6a:	68fb      	ldr	r3, [r7, #12]
    dd6c:	78fa      	ldrb	r2, [r7, #3]
    dd6e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    dd70:	7afb      	ldrb	r3, [r7, #11]
    dd72:	2201      	movs	r2, #1
    dd74:	4619      	mov	r1, r3
    dd76:	6878      	ldr	r0, [r7, #4]
    dd78:	4b0f      	ldr	r3, [pc, #60]	; (ddb8 <n25q256a_switch_mode+0xc4>)
    dd7a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    dd7c:	7af9      	ldrb	r1, [r7, #11]
    dd7e:	697b      	ldr	r3, [r7, #20]
    dd80:	2261      	movs	r2, #97	; 0x61
    dd82:	6878      	ldr	r0, [r7, #4]
    dd84:	4c0d      	ldr	r4, [pc, #52]	; (ddbc <n25q256a_switch_mode+0xc8>)
    dd86:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    dd88:	78fb      	ldrb	r3, [r7, #3]
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d001      	beq.n	dd92 <n25q256a_switch_mode+0x9e>
    dd8e:	2306      	movs	r3, #6
    dd90:	e000      	b.n	dd94 <n25q256a_switch_mode+0xa0>
    dd92:	2300      	movs	r3, #0
    dd94:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    dd96:	7afb      	ldrb	r3, [r7, #11]
    dd98:	2265      	movs	r2, #101	; 0x65
    dd9a:	4619      	mov	r1, r3
    dd9c:	6878      	ldr	r0, [r7, #4]
    dd9e:	4b05      	ldr	r3, [pc, #20]	; (ddb4 <n25q256a_switch_mode+0xc0>)
    dda0:	4798      	blx	r3
    dda2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    dda4:	68fb      	ldr	r3, [r7, #12]
    dda6:	78fa      	ldrb	r2, [r7, #3]
    dda8:	731a      	strb	r2, [r3, #12]
    ddaa:	e000      	b.n	ddae <n25q256a_switch_mode+0xba>
		return;
    ddac:	bf00      	nop
	}
}
    ddae:	371c      	adds	r7, #28
    ddb0:	46bd      	mov	sp, r7
    ddb2:	bd90      	pop	{r4, r7, pc}
    ddb4:	0000dae9 	.word	0x0000dae9
    ddb8:	0000dc25 	.word	0x0000dc25
    ddbc:	0000db85 	.word	0x0000db85

0000ddc0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ddc0:	b580      	push	{r7, lr}
    ddc2:	b086      	sub	sp, #24
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	60f8      	str	r0, [r7, #12]
    ddc8:	60b9      	str	r1, [r7, #8]
    ddca:	607a      	str	r2, [r7, #4]
    ddcc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ddce:	68fb      	ldr	r3, [r7, #12]
    ddd0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ddd2:	4a0c      	ldr	r2, [pc, #48]	; (de04 <n25q256a_construct+0x44>)
    ddd4:	68b9      	ldr	r1, [r7, #8]
    ddd6:	68f8      	ldr	r0, [r7, #12]
    ddd8:	4b0b      	ldr	r3, [pc, #44]	; (de08 <n25q256a_construct+0x48>)
    ddda:	4798      	blx	r3
	n25q->quad_mode    = 0;
    dddc:	697b      	ldr	r3, [r7, #20]
    ddde:	2200      	movs	r2, #0
    dde0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    dde2:	697b      	ldr	r3, [r7, #20]
    dde4:	2200      	movs	r2, #0
    dde6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    dde8:	697b      	ldr	r3, [r7, #20]
    ddea:	687a      	ldr	r2, [r7, #4]
    ddec:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ddee:	78fb      	ldrb	r3, [r7, #3]
    ddf0:	4619      	mov	r1, r3
    ddf2:	68f8      	ldr	r0, [r7, #12]
    ddf4:	4b05      	ldr	r3, [pc, #20]	; (de0c <n25q256a_construct+0x4c>)
    ddf6:	4798      	blx	r3
	return me;
    ddf8:	68fb      	ldr	r3, [r7, #12]
}
    ddfa:	4618      	mov	r0, r3
    ddfc:	3718      	adds	r7, #24
    ddfe:	46bd      	mov	sp, r7
    de00:	bd80      	pop	{r7, pc}
    de02:	bf00      	nop
    de04:	00019b7c 	.word	0x00019b7c
    de08:	0000e29d 	.word	0x0000e29d
    de0c:	0000dcf5 	.word	0x0000dcf5

0000de10 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    de10:	b580      	push	{r7, lr}
    de12:	b08c      	sub	sp, #48	; 0x30
    de14:	af00      	add	r7, sp, #0
    de16:	60f8      	str	r0, [r7, #12]
    de18:	60b9      	str	r1, [r7, #8]
    de1a:	607a      	str	r2, [r7, #4]
    de1c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    de1e:	68fb      	ldr	r3, [r7, #12]
    de20:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    de22:	68fb      	ldr	r3, [r7, #12]
    de24:	681b      	ldr	r3, [r3, #0]
    de26:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    de28:	f107 0310 	add.w	r3, r7, #16
    de2c:	2200      	movs	r2, #0
    de2e:	601a      	str	r2, [r3, #0]
    de30:	605a      	str	r2, [r3, #4]
    de32:	609a      	str	r2, [r3, #8]
    de34:	60da      	str	r2, [r3, #12]
    de36:	611a      	str	r2, [r3, #16]
    de38:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    de3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de3c:	7b1b      	ldrb	r3, [r3, #12]
    de3e:	2b00      	cmp	r3, #0
    de40:	d001      	beq.n	de46 <n25q256a_read+0x36>
    de42:	2206      	movs	r2, #6
    de44:	e000      	b.n	de48 <n25q256a_read+0x38>
    de46:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    de48:	7c3b      	ldrb	r3, [r7, #16]
    de4a:	f362 0302 	bfi	r3, r2, #0, #3
    de4e:	743b      	strb	r3, [r7, #16]
    de50:	7c3b      	ldrb	r3, [r7, #16]
    de52:	f043 0310 	orr.w	r3, r3, #16
    de56:	743b      	strb	r3, [r7, #16]
    de58:	7c3b      	ldrb	r3, [r7, #16]
    de5a:	f043 0320 	orr.w	r3, r3, #32
    de5e:	743b      	strb	r3, [r7, #16]
    de60:	7c3b      	ldrb	r3, [r7, #16]
    de62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de66:	743b      	strb	r3, [r7, #16]
    de68:	7c7b      	ldrb	r3, [r7, #17]
    de6a:	2201      	movs	r2, #1
    de6c:	f362 1305 	bfi	r3, r2, #4, #2
    de70:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de74:	7b1b      	ldrb	r3, [r3, #12]
    de76:	2b00      	cmp	r3, #0
    de78:	d001      	beq.n	de7e <n25q256a_read+0x6e>
    de7a:	220a      	movs	r2, #10
    de7c:	e000      	b.n	de80 <n25q256a_read+0x70>
    de7e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    de80:	7cbb      	ldrb	r3, [r7, #18]
    de82:	f362 0304 	bfi	r3, r2, #0, #5
    de86:	74bb      	strb	r3, [r7, #18]
    de88:	230b      	movs	r3, #11
    de8a:	753b      	strb	r3, [r7, #20]
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	61bb      	str	r3, [r7, #24]
    de90:	683b      	ldr	r3, [r7, #0]
    de92:	61fb      	str	r3, [r7, #28]
    de94:	68bb      	ldr	r3, [r7, #8]
    de96:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    de98:	f107 0310 	add.w	r3, r7, #16
    de9c:	4619      	mov	r1, r3
    de9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dea0:	4b03      	ldr	r3, [pc, #12]	; (deb0 <n25q256a_read+0xa0>)
    dea2:	4798      	blx	r3
	return ERR_NONE;
    dea4:	2300      	movs	r3, #0
}
    dea6:	4618      	mov	r0, r3
    dea8:	3730      	adds	r7, #48	; 0x30
    deaa:	46bd      	mov	sp, r7
    deac:	bd80      	pop	{r7, pc}
    deae:	bf00      	nop
    deb0:	00004485 	.word	0x00004485

0000deb4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    deb4:	b580      	push	{r7, lr}
    deb6:	b08c      	sub	sp, #48	; 0x30
    deb8:	af00      	add	r7, sp, #0
    deba:	60f8      	str	r0, [r7, #12]
    debc:	60b9      	str	r1, [r7, #8]
    debe:	607a      	str	r2, [r7, #4]
    dec0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    dec2:	68fb      	ldr	r3, [r7, #12]
    dec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dec6:	68fb      	ldr	r3, [r7, #12]
    dec8:	681b      	ldr	r3, [r3, #0]
    deca:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    decc:	f107 0310 	add.w	r3, r7, #16
    ded0:	2200      	movs	r2, #0
    ded2:	601a      	str	r2, [r3, #0]
    ded4:	605a      	str	r2, [r3, #4]
    ded6:	609a      	str	r2, [r3, #8]
    ded8:	60da      	str	r2, [r3, #12]
    deda:	611a      	str	r2, [r3, #16]
    dedc:	615a      	str	r2, [r3, #20]
    dede:	7c3b      	ldrb	r3, [r7, #16]
    dee0:	f043 0310 	orr.w	r3, r3, #16
    dee4:	743b      	strb	r3, [r7, #16]
    dee6:	7c3b      	ldrb	r3, [r7, #16]
    dee8:	f043 0320 	orr.w	r3, r3, #32
    deec:	743b      	strb	r3, [r7, #16]
    deee:	7c3b      	ldrb	r3, [r7, #16]
    def0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    def4:	743b      	strb	r3, [r7, #16]
    def6:	7c7b      	ldrb	r3, [r7, #17]
    def8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    defc:	747b      	strb	r3, [r7, #17]
    defe:	2302      	movs	r3, #2
    df00:	753b      	strb	r3, [r7, #20]
    df02:	687b      	ldr	r3, [r7, #4]
    df04:	61bb      	str	r3, [r7, #24]
    df06:	683b      	ldr	r3, [r7, #0]
    df08:	61fb      	str	r3, [r7, #28]
    df0a:	68bb      	ldr	r3, [r7, #8]
    df0c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df10:	7b1b      	ldrb	r3, [r3, #12]
    df12:	2b00      	cmp	r3, #0
    df14:	d001      	beq.n	df1a <n25q256a_write+0x66>
    df16:	2206      	movs	r2, #6
    df18:	e000      	b.n	df1c <n25q256a_write+0x68>
    df1a:	2200      	movs	r2, #0
    df1c:	7c3b      	ldrb	r3, [r7, #16]
    df1e:	f362 0302 	bfi	r3, r2, #0, #3
    df22:	743b      	strb	r3, [r7, #16]
	while (length) {
    df24:	e035      	b.n	df92 <n25q256a_write+0xde>
		cmd.address = address;
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    df2a:	683b      	ldr	r3, [r7, #0]
    df2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    df30:	d802      	bhi.n	df38 <n25q256a_write+0x84>
			cmd.buf_len = length;
    df32:	683b      	ldr	r3, [r7, #0]
    df34:	61fb      	str	r3, [r7, #28]
    df36:	e002      	b.n	df3e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    df38:	f44f 7380 	mov.w	r3, #256	; 0x100
    df3c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    df3e:	7c3b      	ldrb	r3, [r7, #16]
    df40:	f3c3 0302 	ubfx	r3, r3, #0, #3
    df44:	b2db      	uxtb	r3, r3
    df46:	2201      	movs	r2, #1
    df48:	4619      	mov	r1, r3
    df4a:	68f8      	ldr	r0, [r7, #12]
    df4c:	4b19      	ldr	r3, [pc, #100]	; (dfb4 <n25q256a_write+0x100>)
    df4e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    df50:	f107 0310 	add.w	r3, r7, #16
    df54:	4619      	mov	r1, r3
    df56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df58:	4b17      	ldr	r3, [pc, #92]	; (dfb8 <n25q256a_write+0x104>)
    df5a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    df5c:	bf00      	nop
    df5e:	7c3b      	ldrb	r3, [r7, #16]
    df60:	f3c3 0302 	ubfx	r3, r3, #0, #3
    df64:	b2db      	uxtb	r3, r3
    df66:	2270      	movs	r2, #112	; 0x70
    df68:	4619      	mov	r1, r3
    df6a:	68f8      	ldr	r0, [r7, #12]
    df6c:	4b13      	ldr	r3, [pc, #76]	; (dfbc <n25q256a_write+0x108>)
    df6e:	4798      	blx	r3
    df70:	4603      	mov	r3, r0
    df72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    df76:	2b00      	cmp	r3, #0
    df78:	d0f1      	beq.n	df5e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    df7a:	6a3a      	ldr	r2, [r7, #32]
    df7c:	69fb      	ldr	r3, [r7, #28]
    df7e:	4413      	add	r3, r2
    df80:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    df82:	69fb      	ldr	r3, [r7, #28]
    df84:	683a      	ldr	r2, [r7, #0]
    df86:	1ad3      	subs	r3, r2, r3
    df88:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    df8a:	69fb      	ldr	r3, [r7, #28]
    df8c:	687a      	ldr	r2, [r7, #4]
    df8e:	4413      	add	r3, r2
    df90:	607b      	str	r3, [r7, #4]
	while (length) {
    df92:	683b      	ldr	r3, [r7, #0]
    df94:	2b00      	cmp	r3, #0
    df96:	d1c6      	bne.n	df26 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df9a:	7b5b      	ldrb	r3, [r3, #13]
    df9c:	2b00      	cmp	r3, #0
    df9e:	d003      	beq.n	dfa8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    dfa0:	2101      	movs	r1, #1
    dfa2:	68f8      	ldr	r0, [r7, #12]
    dfa4:	4b06      	ldr	r3, [pc, #24]	; (dfc0 <n25q256a_write+0x10c>)
    dfa6:	4798      	blx	r3
	}
	return ERR_NONE;
    dfa8:	2300      	movs	r3, #0
}
    dfaa:	4618      	mov	r0, r3
    dfac:	3730      	adds	r7, #48	; 0x30
    dfae:	46bd      	mov	sp, r7
    dfb0:	bd80      	pop	{r7, pc}
    dfb2:	bf00      	nop
    dfb4:	0000dc25 	.word	0x0000dc25
    dfb8:	00004485 	.word	0x00004485
    dfbc:	0000dae9 	.word	0x0000dae9
    dfc0:	0000da1d 	.word	0x0000da1d

0000dfc4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    dfc4:	b580      	push	{r7, lr}
    dfc6:	b090      	sub	sp, #64	; 0x40
    dfc8:	af00      	add	r7, sp, #0
    dfca:	60f8      	str	r0, [r7, #12]
    dfcc:	60b9      	str	r1, [r7, #8]
    dfce:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    dfd0:	68fb      	ldr	r3, [r7, #12]
    dfd2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dfd4:	68fb      	ldr	r3, [r7, #12]
    dfd6:	681b      	ldr	r3, [r3, #0]
    dfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    dfda:	f107 0314 	add.w	r3, r7, #20
    dfde:	2200      	movs	r2, #0
    dfe0:	601a      	str	r2, [r3, #0]
    dfe2:	605a      	str	r2, [r3, #4]
    dfe4:	609a      	str	r2, [r3, #8]
    dfe6:	60da      	str	r2, [r3, #12]
    dfe8:	611a      	str	r2, [r3, #16]
    dfea:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dfee:	7b1b      	ldrb	r3, [r3, #12]
    dff0:	2b00      	cmp	r3, #0
    dff2:	d001      	beq.n	dff8 <n25q256a_erase+0x34>
    dff4:	2206      	movs	r2, #6
    dff6:	e000      	b.n	dffa <n25q256a_erase+0x36>
    dff8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    dffa:	7d3b      	ldrb	r3, [r7, #20]
    dffc:	f362 0302 	bfi	r3, r2, #0, #3
    e000:	753b      	strb	r3, [r7, #20]
    e002:	7d3b      	ldrb	r3, [r7, #20]
    e004:	f043 0310 	orr.w	r3, r3, #16
    e008:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    e00a:	687b      	ldr	r3, [r7, #4]
    e00c:	4a56      	ldr	r2, [pc, #344]	; (e168 <n25q256a_erase+0x1a4>)
    e00e:	4293      	cmp	r3, r2
    e010:	bf94      	ite	ls
    e012:	2301      	movls	r3, #1
    e014:	2300      	movhi	r3, #0
    e016:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    e018:	7d3b      	ldrb	r3, [r7, #20]
    e01a:	f362 1345 	bfi	r3, r2, #5, #1
    e01e:	753b      	strb	r3, [r7, #20]
    e020:	7d7b      	ldrb	r3, [r7, #21]
    e022:	2202      	movs	r2, #2
    e024:	f362 1305 	bfi	r3, r2, #4, #2
    e028:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    e02a:	68bb      	ldr	r3, [r7, #8]
    e02c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    e032:	2300      	movs	r3, #0
    e034:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    e036:	687b      	ldr	r3, [r7, #4]
    e038:	f3c3 030b 	ubfx	r3, r3, #0, #12
    e03c:	2b00      	cmp	r3, #0
    e03e:	d104      	bne.n	e04a <n25q256a_erase+0x86>
    e040:	68bb      	ldr	r3, [r7, #8]
    e042:	f3c3 030b 	ubfx	r3, r3, #0, #12
    e046:	2b00      	cmp	r3, #0
    e048:	d002      	beq.n	e050 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    e04a:	f06f 030c 	mvn.w	r3, #12
    e04e:	e087      	b.n	e160 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    e056:	d368      	bcc.n	e12a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    e058:	23c7      	movs	r3, #199	; 0xc7
    e05a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e05c:	7d3b      	ldrb	r3, [r7, #20]
    e05e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e062:	b2db      	uxtb	r3, r3
    e064:	2201      	movs	r2, #1
    e066:	4619      	mov	r1, r3
    e068:	68f8      	ldr	r0, [r7, #12]
    e06a:	4b40      	ldr	r3, [pc, #256]	; (e16c <n25q256a_erase+0x1a8>)
    e06c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    e06e:	f107 0314 	add.w	r3, r7, #20
    e072:	4619      	mov	r1, r3
    e074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e076:	4b3e      	ldr	r3, [pc, #248]	; (e170 <n25q256a_erase+0x1ac>)
    e078:	4798      	blx	r3
    e07a:	e059      	b.n	e130 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e07e:	b29b      	uxth	r3, r3
    e080:	2b00      	cmp	r3, #0
    e082:	d11f      	bne.n	e0c4 <n25q256a_erase+0x100>
    e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e08a:	d31b      	bcc.n	e0c4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    e08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e08e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    e090:	23d8      	movs	r3, #216	; 0xd8
    e092:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e094:	7d3b      	ldrb	r3, [r7, #20]
    e096:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e09a:	b2db      	uxtb	r3, r3
    e09c:	2201      	movs	r2, #1
    e09e:	4619      	mov	r1, r3
    e0a0:	68f8      	ldr	r0, [r7, #12]
    e0a2:	4b32      	ldr	r3, [pc, #200]	; (e16c <n25q256a_erase+0x1a8>)
    e0a4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    e0a6:	f107 0314 	add.w	r3, r7, #20
    e0aa:	4619      	mov	r1, r3
    e0ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e0ae:	4b30      	ldr	r3, [pc, #192]	; (e170 <n25q256a_erase+0x1ac>)
    e0b0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    e0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0bc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e0c0:	63bb      	str	r3, [r7, #56]	; 0x38
    e0c2:	e023      	b.n	e10c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e0ca:	d31b      	bcc.n	e104 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0ce:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    e0d0:	2320      	movs	r3, #32
    e0d2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e0d4:	7d3b      	ldrb	r3, [r7, #20]
    e0d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e0da:	b2db      	uxtb	r3, r3
    e0dc:	2201      	movs	r2, #1
    e0de:	4619      	mov	r1, r3
    e0e0:	68f8      	ldr	r0, [r7, #12]
    e0e2:	4b22      	ldr	r3, [pc, #136]	; (e16c <n25q256a_erase+0x1a8>)
    e0e4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    e0e6:	f107 0314 	add.w	r3, r7, #20
    e0ea:	4619      	mov	r1, r3
    e0ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e0ee:	4b20      	ldr	r3, [pc, #128]	; (e170 <n25q256a_erase+0x1ac>)
    e0f0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    e0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0fc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e100:	63bb      	str	r3, [r7, #56]	; 0x38
    e102:	e003      	b.n	e10c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    e104:	f06f 030c 	mvn.w	r3, #12
    e108:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    e10a:	e011      	b.n	e130 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e10c:	bf00      	nop
    e10e:	7d3b      	ldrb	r3, [r7, #20]
    e110:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e114:	b2db      	uxtb	r3, r3
    e116:	2270      	movs	r2, #112	; 0x70
    e118:	4619      	mov	r1, r3
    e11a:	68f8      	ldr	r0, [r7, #12]
    e11c:	4b15      	ldr	r3, [pc, #84]	; (e174 <n25q256a_erase+0x1b0>)
    e11e:	4798      	blx	r3
    e120:	4603      	mov	r3, r0
    e122:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e126:	2b00      	cmp	r3, #0
    e128:	d0f1      	beq.n	e10e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e12c:	2b00      	cmp	r3, #0
    e12e:	d1a5      	bne.n	e07c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e130:	bf00      	nop
    e132:	7d3b      	ldrb	r3, [r7, #20]
    e134:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e138:	b2db      	uxtb	r3, r3
    e13a:	2270      	movs	r2, #112	; 0x70
    e13c:	4619      	mov	r1, r3
    e13e:	68f8      	ldr	r0, [r7, #12]
    e140:	4b0c      	ldr	r3, [pc, #48]	; (e174 <n25q256a_erase+0x1b0>)
    e142:	4798      	blx	r3
    e144:	4603      	mov	r3, r0
    e146:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e14a:	2b00      	cmp	r3, #0
    e14c:	d0f1      	beq.n	e132 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e150:	7b5b      	ldrb	r3, [r3, #13]
    e152:	2b00      	cmp	r3, #0
    e154:	d003      	beq.n	e15e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    e156:	2101      	movs	r1, #1
    e158:	68f8      	ldr	r0, [r7, #12]
    e15a:	4b07      	ldr	r3, [pc, #28]	; (e178 <n25q256a_erase+0x1b4>)
    e15c:	4798      	blx	r3
	}
	return rc;
    e15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    e160:	4618      	mov	r0, r3
    e162:	3740      	adds	r7, #64	; 0x40
    e164:	46bd      	mov	sp, r7
    e166:	bd80      	pop	{r7, pc}
    e168:	001fffff 	.word	0x001fffff
    e16c:	0000dc25 	.word	0x0000dc25
    e170:	00004485 	.word	0x00004485
    e174:	0000dae9 	.word	0x0000dae9
    e178:	0000da1d 	.word	0x0000da1d

0000e17c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    e17c:	b590      	push	{r4, r7, lr}
    e17e:	b085      	sub	sp, #20
    e180:	af00      	add	r7, sp, #0
    e182:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    e184:	687b      	ldr	r3, [r7, #4]
    e186:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e188:	68fb      	ldr	r3, [r7, #12]
    e18a:	7b1b      	ldrb	r3, [r3, #12]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d001      	beq.n	e194 <n25q256a_enable_xip+0x18>
    e190:	2306      	movs	r3, #6
    e192:	e000      	b.n	e196 <n25q256a_enable_xip+0x1a>
    e194:	2300      	movs	r3, #0
    e196:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    e198:	68fb      	ldr	r3, [r7, #12]
    e19a:	7b5b      	ldrb	r3, [r3, #13]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d129      	bne.n	e1f4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    e1a0:	7afb      	ldrb	r3, [r7, #11]
    e1a2:	2285      	movs	r2, #133	; 0x85
    e1a4:	4619      	mov	r1, r3
    e1a6:	6878      	ldr	r0, [r7, #4]
    e1a8:	4b15      	ldr	r3, [pc, #84]	; (e200 <n25q256a_enable_xip+0x84>)
    e1aa:	4798      	blx	r3
    e1ac:	4603      	mov	r3, r0
    e1ae:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    e1b0:	7abb      	ldrb	r3, [r7, #10]
    e1b2:	f003 0308 	and.w	r3, r3, #8
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d015      	beq.n	e1e6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    e1ba:	7abb      	ldrb	r3, [r7, #10]
    e1bc:	f023 0308 	bic.w	r3, r3, #8
    e1c0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    e1c2:	7abb      	ldrb	r3, [r7, #10]
    e1c4:	7af9      	ldrb	r1, [r7, #11]
    e1c6:	2281      	movs	r2, #129	; 0x81
    e1c8:	6878      	ldr	r0, [r7, #4]
    e1ca:	4c0e      	ldr	r4, [pc, #56]	; (e204 <n25q256a_enable_xip+0x88>)
    e1cc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e1ce:	bf00      	nop
    e1d0:	7afb      	ldrb	r3, [r7, #11]
    e1d2:	2270      	movs	r2, #112	; 0x70
    e1d4:	4619      	mov	r1, r3
    e1d6:	6878      	ldr	r0, [r7, #4]
    e1d8:	4b09      	ldr	r3, [pc, #36]	; (e200 <n25q256a_enable_xip+0x84>)
    e1da:	4798      	blx	r3
    e1dc:	4603      	mov	r3, r0
    e1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d0f4      	beq.n	e1d0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    e1e6:	68fb      	ldr	r3, [r7, #12]
    e1e8:	2201      	movs	r2, #1
    e1ea:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    e1ec:	2101      	movs	r1, #1
    e1ee:	6878      	ldr	r0, [r7, #4]
    e1f0:	4b05      	ldr	r3, [pc, #20]	; (e208 <n25q256a_enable_xip+0x8c>)
    e1f2:	4798      	blx	r3
	}
	return ERR_NONE;
    e1f4:	2300      	movs	r3, #0
}
    e1f6:	4618      	mov	r0, r3
    e1f8:	3714      	adds	r7, #20
    e1fa:	46bd      	mov	sp, r7
    e1fc:	bd90      	pop	{r4, r7, pc}
    e1fe:	bf00      	nop
    e200:	0000dae9 	.word	0x0000dae9
    e204:	0000db85 	.word	0x0000db85
    e208:	0000da1d 	.word	0x0000da1d

0000e20c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    e20c:	b580      	push	{r7, lr}
    e20e:	b086      	sub	sp, #24
    e210:	af00      	add	r7, sp, #0
    e212:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	681b      	ldr	r3, [r3, #0]
    e21c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e21e:	697b      	ldr	r3, [r7, #20]
    e220:	7b1b      	ldrb	r3, [r3, #12]
    e222:	2b00      	cmp	r3, #0
    e224:	d001      	beq.n	e22a <n25q256a_disable_xip+0x1e>
    e226:	2306      	movs	r3, #6
    e228:	e000      	b.n	e22c <n25q256a_disable_xip+0x20>
    e22a:	2300      	movs	r3, #0
    e22c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    e22e:	2100      	movs	r1, #0
    e230:	6878      	ldr	r0, [r7, #4]
    e232:	4b15      	ldr	r3, [pc, #84]	; (e288 <n25q256a_disable_xip+0x7c>)
    e234:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    e236:	7bfb      	ldrb	r3, [r7, #15]
    e238:	2285      	movs	r2, #133	; 0x85
    e23a:	4619      	mov	r1, r3
    e23c:	6878      	ldr	r0, [r7, #4]
    e23e:	4b13      	ldr	r3, [pc, #76]	; (e28c <n25q256a_disable_xip+0x80>)
    e240:	4798      	blx	r3
    e242:	4603      	mov	r3, r0
    e244:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    e246:	7bbb      	ldrb	r3, [r7, #14]
    e248:	f003 0308 	and.w	r3, r3, #8
    e24c:	2b00      	cmp	r3, #0
    e24e:	d113      	bne.n	e278 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    e250:	697b      	ldr	r3, [r7, #20]
    e252:	689b      	ldr	r3, [r3, #8]
    e254:	2b00      	cmp	r3, #0
    e256:	d00f      	beq.n	e278 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    e258:	693b      	ldr	r3, [r7, #16]
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    e25e:	6938      	ldr	r0, [r7, #16]
    e260:	4b0b      	ldr	r3, [pc, #44]	; (e290 <n25q256a_disable_xip+0x84>)
    e262:	4798      	blx	r3
			n25q->pin_exit_xip();
    e264:	697b      	ldr	r3, [r7, #20]
    e266:	689b      	ldr	r3, [r3, #8]
    e268:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    e26a:	68b9      	ldr	r1, [r7, #8]
    e26c:	6938      	ldr	r0, [r7, #16]
    e26e:	4b09      	ldr	r3, [pc, #36]	; (e294 <n25q256a_disable_xip+0x88>)
    e270:	4798      	blx	r3
			qspi_sync_enable(descr);
    e272:	6938      	ldr	r0, [r7, #16]
    e274:	4b08      	ldr	r3, [pc, #32]	; (e298 <n25q256a_disable_xip+0x8c>)
    e276:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    e278:	697b      	ldr	r3, [r7, #20]
    e27a:	2200      	movs	r2, #0
    e27c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e27e:	2300      	movs	r3, #0
}
    e280:	4618      	mov	r0, r3
    e282:	3718      	adds	r7, #24
    e284:	46bd      	mov	sp, r7
    e286:	bd80      	pop	{r7, pc}
    e288:	0000da1d 	.word	0x0000da1d
    e28c:	0000dae9 	.word	0x0000dae9
    e290:	00004449 	.word	0x00004449
    e294:	000043c1 	.word	0x000043c1
    e298:	0000440d 	.word	0x0000440d

0000e29c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    e29c:	b480      	push	{r7}
    e29e:	b085      	sub	sp, #20
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	60f8      	str	r0, [r7, #12]
    e2a4:	60b9      	str	r1, [r7, #8]
    e2a6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    e2a8:	68fb      	ldr	r3, [r7, #12]
    e2aa:	68ba      	ldr	r2, [r7, #8]
    e2ac:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    e2ae:	68fb      	ldr	r3, [r7, #12]
    e2b0:	687a      	ldr	r2, [r7, #4]
    e2b2:	605a      	str	r2, [r3, #4]

	return me;
    e2b4:	68fb      	ldr	r3, [r7, #12]
}
    e2b6:	4618      	mov	r0, r3
    e2b8:	3714      	adds	r7, #20
    e2ba:	46bd      	mov	sp, r7
    e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2c0:	4770      	bx	lr

0000e2c2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    e2c2:	b480      	push	{r7}
    e2c4:	b083      	sub	sp, #12
    e2c6:	af00      	add	r7, sp, #0
    e2c8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e2ca:	687b      	ldr	r3, [r7, #4]
    e2cc:	781b      	ldrb	r3, [r3, #0]
    e2ce:	b29a      	uxth	r2, r3
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	3301      	adds	r3, #1
    e2d4:	781b      	ldrb	r3, [r3, #0]
    e2d6:	b29b      	uxth	r3, r3
    e2d8:	021b      	lsls	r3, r3, #8
    e2da:	b29b      	uxth	r3, r3
    e2dc:	4413      	add	r3, r2
    e2de:	b29b      	uxth	r3, r3
}
    e2e0:	4618      	mov	r0, r3
    e2e2:	370c      	adds	r7, #12
    e2e4:	46bd      	mov	sp, r7
    e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2ea:	4770      	bx	lr

0000e2ec <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    e2ec:	b480      	push	{r7}
    e2ee:	b083      	sub	sp, #12
    e2f0:	af00      	add	r7, sp, #0
    e2f2:	6078      	str	r0, [r7, #4]
	return desc[0];
    e2f4:	687b      	ldr	r3, [r7, #4]
    e2f6:	781b      	ldrb	r3, [r3, #0]
}
    e2f8:	4618      	mov	r0, r3
    e2fa:	370c      	adds	r7, #12
    e2fc:	46bd      	mov	sp, r7
    e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    e302:	4770      	bx	lr

0000e304 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    e304:	b580      	push	{r7, lr}
    e306:	b082      	sub	sp, #8
    e308:	af00      	add	r7, sp, #0
    e30a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e30c:	6878      	ldr	r0, [r7, #4]
    e30e:	4b05      	ldr	r3, [pc, #20]	; (e324 <usb_desc_next+0x20>)
    e310:	4798      	blx	r3
    e312:	4603      	mov	r3, r0
    e314:	461a      	mov	r2, r3
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	4413      	add	r3, r2
}
    e31a:	4618      	mov	r0, r3
    e31c:	3708      	adds	r7, #8
    e31e:	46bd      	mov	sp, r7
    e320:	bd80      	pop	{r7, pc}
    e322:	bf00      	nop
    e324:	0000e2ed 	.word	0x0000e2ed

0000e328 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e328:	b580      	push	{r7, lr}
    e32a:	b08c      	sub	sp, #48	; 0x30
    e32c:	af00      	add	r7, sp, #0
    e32e:	6078      	str	r0, [r7, #4]
    e330:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e332:	687b      	ldr	r3, [r7, #4]
    e334:	689b      	ldr	r3, [r3, #8]
    e336:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    e338:	683b      	ldr	r3, [r7, #0]
    e33a:	681b      	ldr	r3, [r3, #0]
    e33c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e33e:	2300      	movs	r3, #0
    e340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e344:	e08f      	b.n	e466 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e348:	2b00      	cmp	r3, #0
    e34a:	d102      	bne.n	e352 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    e34c:	f06f 0309 	mvn.w	r3, #9
    e350:	e092      	b.n	e478 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e354:	789b      	ldrb	r3, [r3, #2]
    e356:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e35a:	795b      	ldrb	r3, [r3, #5]
    e35c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    e35e:	7c7b      	ldrb	r3, [r7, #17]
    e360:	2b02      	cmp	r3, #2
    e362:	d002      	beq.n	e36a <cdcdf_acm_enable+0x42>
    e364:	7c7b      	ldrb	r3, [r7, #17]
    e366:	2b0a      	cmp	r3, #10
    e368:	d121      	bne.n	e3ae <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e36e:	6a3a      	ldr	r2, [r7, #32]
    e370:	5cd2      	ldrb	r2, [r2, r3]
    e372:	7bbb      	ldrb	r3, [r7, #14]
    e374:	429a      	cmp	r2, r3
    e376:	d102      	bne.n	e37e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    e378:	f06f 0311 	mvn.w	r3, #17
    e37c:	e07c      	b.n	e478 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    e37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e382:	6a3a      	ldr	r2, [r7, #32]
    e384:	5cd3      	ldrb	r3, [r2, r3]
    e386:	2bff      	cmp	r3, #255	; 0xff
    e388:	d002      	beq.n	e390 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    e38a:	f06f 031b 	mvn.w	r3, #27
    e38e:	e073      	b.n	e478 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    e390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e394:	7bb9      	ldrb	r1, [r7, #14]
    e396:	6a3a      	ldr	r2, [r7, #32]
    e398:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e39a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    e39c:	683b      	ldr	r3, [r7, #0]
    e39e:	685b      	ldr	r3, [r3, #4]
    e3a0:	2205      	movs	r2, #5
    e3a2:	4619      	mov	r1, r3
    e3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e3a6:	4b36      	ldr	r3, [pc, #216]	; (e480 <cdcdf_acm_enable+0x158>)
    e3a8:	4798      	blx	r3
    e3aa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e3ac:	e047      	b.n	e43e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    e3ae:	f06f 0309 	mvn.w	r3, #9
    e3b2:	e061      	b.n	e478 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3b6:	789b      	ldrb	r3, [r3, #2]
    e3b8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3bc:	78db      	ldrb	r3, [r3, #3]
    e3be:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3c2:	3304      	adds	r3, #4
    e3c4:	4618      	mov	r0, r3
    e3c6:	4b2f      	ldr	r3, [pc, #188]	; (e484 <cdcdf_acm_enable+0x15c>)
    e3c8:	4798      	blx	r3
    e3ca:	4603      	mov	r3, r0
    e3cc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e3ce:	7ebb      	ldrb	r3, [r7, #26]
    e3d0:	7ef9      	ldrb	r1, [r7, #27]
    e3d2:	8bba      	ldrh	r2, [r7, #28]
    e3d4:	4618      	mov	r0, r3
    e3d6:	4b2c      	ldr	r3, [pc, #176]	; (e488 <cdcdf_acm_enable+0x160>)
    e3d8:	4798      	blx	r3
    e3da:	4603      	mov	r3, r0
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d002      	beq.n	e3e6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    e3e0:	f06f 0313 	mvn.w	r3, #19
    e3e4:	e048      	b.n	e478 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e3e6:	7ebb      	ldrb	r3, [r7, #26]
    e3e8:	b25b      	sxtb	r3, r3
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	da0f      	bge.n	e40e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    e3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e3f2:	7eb9      	ldrb	r1, [r7, #26]
    e3f4:	6a3a      	ldr	r2, [r7, #32]
    e3f6:	4413      	add	r3, r2
    e3f8:	460a      	mov	r2, r1
    e3fa:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    e3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e400:	6a3a      	ldr	r2, [r7, #32]
    e402:	4413      	add	r3, r2
    e404:	789b      	ldrb	r3, [r3, #2]
    e406:	4618      	mov	r0, r3
    e408:	4b20      	ldr	r3, [pc, #128]	; (e48c <cdcdf_acm_enable+0x164>)
    e40a:	4798      	blx	r3
    e40c:	e007      	b.n	e41e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    e40e:	7eba      	ldrb	r2, [r7, #26]
    e410:	6a3b      	ldr	r3, [r7, #32]
    e412:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    e414:	6a3b      	ldr	r3, [r7, #32]
    e416:	791b      	ldrb	r3, [r3, #4]
    e418:	4618      	mov	r0, r3
    e41a:	4b1c      	ldr	r3, [pc, #112]	; (e48c <cdcdf_acm_enable+0x164>)
    e41c:	4798      	blx	r3
			}
			desc->sod = ep;
    e41e:	683b      	ldr	r3, [r7, #0]
    e420:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e422:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e424:	683b      	ldr	r3, [r7, #0]
    e426:	681b      	ldr	r3, [r3, #0]
    e428:	4618      	mov	r0, r3
    e42a:	4b19      	ldr	r3, [pc, #100]	; (e490 <cdcdf_acm_enable+0x168>)
    e42c:	4798      	blx	r3
    e42e:	4602      	mov	r2, r0
    e430:	683b      	ldr	r3, [r7, #0]
    e432:	685b      	ldr	r3, [r3, #4]
    e434:	4619      	mov	r1, r3
    e436:	4610      	mov	r0, r2
    e438:	4b16      	ldr	r3, [pc, #88]	; (e494 <cdcdf_acm_enable+0x16c>)
    e43a:	4798      	blx	r3
    e43c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e440:	2b00      	cmp	r3, #0
    e442:	d1b7      	bne.n	e3b4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    e444:	683b      	ldr	r3, [r7, #0]
    e446:	681b      	ldr	r3, [r3, #0]
    e448:	4618      	mov	r0, r3
    e44a:	4b11      	ldr	r3, [pc, #68]	; (e490 <cdcdf_acm_enable+0x168>)
    e44c:	4798      	blx	r3
    e44e:	683b      	ldr	r3, [r7, #0]
    e450:	685b      	ldr	r3, [r3, #4]
    e452:	2204      	movs	r2, #4
    e454:	4619      	mov	r1, r3
    e456:	4b0a      	ldr	r3, [pc, #40]	; (e480 <cdcdf_acm_enable+0x158>)
    e458:	4798      	blx	r3
    e45a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e460:	3301      	adds	r3, #1
    e462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e46a:	2b01      	cmp	r3, #1
    e46c:	f67f af6b 	bls.w	e346 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    e470:	4b09      	ldr	r3, [pc, #36]	; (e498 <cdcdf_acm_enable+0x170>)
    e472:	2201      	movs	r2, #1
    e474:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e476:	2300      	movs	r3, #0
}
    e478:	4618      	mov	r0, r3
    e47a:	3730      	adds	r7, #48	; 0x30
    e47c:	46bd      	mov	sp, r7
    e47e:	bd80      	pop	{r7, pc}
    e480:	0000f6e9 	.word	0x0000f6e9
    e484:	0000e2c3 	.word	0x0000e2c3
    e488:	000050f9 	.word	0x000050f9
    e48c:	000051e5 	.word	0x000051e5
    e490:	0000e305 	.word	0x0000e305
    e494:	0000f745 	.word	0x0000f745
    e498:	200014a4 	.word	0x200014a4

0000e49c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e49c:	b580      	push	{r7, lr}
    e49e:	b088      	sub	sp, #32
    e4a0:	af00      	add	r7, sp, #0
    e4a2:	6078      	str	r0, [r7, #4]
    e4a4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	689b      	ldr	r3, [r3, #8]
    e4aa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    e4ac:	683b      	ldr	r3, [r7, #0]
    e4ae:	2b00      	cmp	r3, #0
    e4b0:	d00c      	beq.n	e4cc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e4b2:	683b      	ldr	r3, [r7, #0]
    e4b4:	681b      	ldr	r3, [r3, #0]
    e4b6:	795b      	ldrb	r3, [r3, #5]
    e4b8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    e4ba:	7c7b      	ldrb	r3, [r7, #17]
    e4bc:	2b02      	cmp	r3, #2
    e4be:	d005      	beq.n	e4cc <cdcdf_acm_disable+0x30>
    e4c0:	7c7b      	ldrb	r3, [r7, #17]
    e4c2:	2b0a      	cmp	r3, #10
    e4c4:	d002      	beq.n	e4cc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    e4c6:	f06f 0309 	mvn.w	r3, #9
    e4ca:	e035      	b.n	e538 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    e4cc:	2300      	movs	r3, #0
    e4ce:	77fb      	strb	r3, [r7, #31]
    e4d0:	e01f      	b.n	e512 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    e4d2:	7ffb      	ldrb	r3, [r7, #31]
    e4d4:	69ba      	ldr	r2, [r7, #24]
    e4d6:	5cd3      	ldrb	r3, [r2, r3]
    e4d8:	2bff      	cmp	r3, #255	; 0xff
    e4da:	d016      	beq.n	e50a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    e4dc:	7ffb      	ldrb	r3, [r7, #31]
    e4de:	69ba      	ldr	r2, [r7, #24]
    e4e0:	21ff      	movs	r1, #255	; 0xff
    e4e2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    e4e4:	7ffb      	ldrb	r3, [r7, #31]
    e4e6:	69ba      	ldr	r2, [r7, #24]
    e4e8:	4413      	add	r3, r2
    e4ea:	789b      	ldrb	r3, [r3, #2]
    e4ec:	2bff      	cmp	r3, #255	; 0xff
    e4ee:	d00d      	beq.n	e50c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e4f0:	7ffb      	ldrb	r3, [r7, #31]
    e4f2:	69ba      	ldr	r2, [r7, #24]
    e4f4:	4413      	add	r3, r2
    e4f6:	789b      	ldrb	r3, [r3, #2]
    e4f8:	4618      	mov	r0, r3
    e4fa:	4b11      	ldr	r3, [pc, #68]	; (e540 <cdcdf_acm_disable+0xa4>)
    e4fc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e4fe:	7ffb      	ldrb	r3, [r7, #31]
    e500:	69ba      	ldr	r2, [r7, #24]
    e502:	4413      	add	r3, r2
    e504:	22ff      	movs	r2, #255	; 0xff
    e506:	709a      	strb	r2, [r3, #2]
    e508:	e000      	b.n	e50c <cdcdf_acm_disable+0x70>
			continue;
    e50a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    e50c:	7ffb      	ldrb	r3, [r7, #31]
    e50e:	3301      	adds	r3, #1
    e510:	77fb      	strb	r3, [r7, #31]
    e512:	7ffb      	ldrb	r3, [r7, #31]
    e514:	2b01      	cmp	r3, #1
    e516:	d9dc      	bls.n	e4d2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    e518:	69bb      	ldr	r3, [r7, #24]
    e51a:	791b      	ldrb	r3, [r3, #4]
    e51c:	2bff      	cmp	r3, #255	; 0xff
    e51e:	d007      	beq.n	e530 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    e520:	69bb      	ldr	r3, [r7, #24]
    e522:	791b      	ldrb	r3, [r3, #4]
    e524:	4618      	mov	r0, r3
    e526:	4b06      	ldr	r3, [pc, #24]	; (e540 <cdcdf_acm_disable+0xa4>)
    e528:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e52a:	69bb      	ldr	r3, [r7, #24]
    e52c:	22ff      	movs	r2, #255	; 0xff
    e52e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    e530:	4b04      	ldr	r3, [pc, #16]	; (e544 <cdcdf_acm_disable+0xa8>)
    e532:	2200      	movs	r2, #0
    e534:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e536:	2300      	movs	r3, #0
}
    e538:	4618      	mov	r0, r3
    e53a:	3720      	adds	r7, #32
    e53c:	46bd      	mov	sp, r7
    e53e:	bd80      	pop	{r7, pc}
    e540:	00005195 	.word	0x00005195
    e544:	200014a4 	.word	0x200014a4

0000e548 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    e548:	b580      	push	{r7, lr}
    e54a:	b084      	sub	sp, #16
    e54c:	af00      	add	r7, sp, #0
    e54e:	60f8      	str	r0, [r7, #12]
    e550:	460b      	mov	r3, r1
    e552:	607a      	str	r2, [r7, #4]
    e554:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    e556:	7afb      	ldrb	r3, [r7, #11]
    e558:	2b01      	cmp	r3, #1
    e55a:	d009      	beq.n	e570 <cdcdf_acm_ctrl+0x28>
    e55c:	2b02      	cmp	r3, #2
    e55e:	d00d      	beq.n	e57c <cdcdf_acm_ctrl+0x34>
    e560:	2b00      	cmp	r3, #0
    e562:	d10e      	bne.n	e582 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    e564:	6879      	ldr	r1, [r7, #4]
    e566:	68f8      	ldr	r0, [r7, #12]
    e568:	4b09      	ldr	r3, [pc, #36]	; (e590 <cdcdf_acm_ctrl+0x48>)
    e56a:	4798      	blx	r3
    e56c:	4603      	mov	r3, r0
    e56e:	e00a      	b.n	e586 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    e570:	6879      	ldr	r1, [r7, #4]
    e572:	68f8      	ldr	r0, [r7, #12]
    e574:	4b07      	ldr	r3, [pc, #28]	; (e594 <cdcdf_acm_ctrl+0x4c>)
    e576:	4798      	blx	r3
    e578:	4603      	mov	r3, r0
    e57a:	e004      	b.n	e586 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    e57c:	f06f 031a 	mvn.w	r3, #26
    e580:	e001      	b.n	e586 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    e582:	f06f 030c 	mvn.w	r3, #12
	}
}
    e586:	4618      	mov	r0, r3
    e588:	3710      	adds	r7, #16
    e58a:	46bd      	mov	sp, r7
    e58c:	bd80      	pop	{r7, pc}
    e58e:	bf00      	nop
    e590:	0000e329 	.word	0x0000e329
    e594:	0000e49d 	.word	0x0000e49d

0000e598 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e598:	b590      	push	{r4, r7, lr}
    e59a:	b087      	sub	sp, #28
    e59c:	af00      	add	r7, sp, #0
    e59e:	4603      	mov	r3, r0
    e5a0:	6039      	str	r1, [r7, #0]
    e5a2:	71fb      	strb	r3, [r7, #7]
    e5a4:	4613      	mov	r3, r2
    e5a6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    e5a8:	683b      	ldr	r3, [r7, #0]
    e5aa:	799a      	ldrb	r2, [r3, #6]
    e5ac:	79db      	ldrb	r3, [r3, #7]
    e5ae:	021b      	lsls	r3, r3, #8
    e5b0:	4313      	orrs	r3, r2
    e5b2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    e5b4:	4b2b      	ldr	r3, [pc, #172]	; (e664 <cdcdf_acm_set_req+0xcc>)
    e5b6:	4798      	blx	r3
    e5b8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    e5ba:	683b      	ldr	r3, [r7, #0]
    e5bc:	785b      	ldrb	r3, [r3, #1]
    e5be:	2b20      	cmp	r3, #32
    e5c0:	d002      	beq.n	e5c8 <cdcdf_acm_set_req+0x30>
    e5c2:	2b22      	cmp	r3, #34	; 0x22
    e5c4:	d034      	beq.n	e630 <cdcdf_acm_set_req+0x98>
    e5c6:	e046      	b.n	e656 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e5c8:	8afb      	ldrh	r3, [r7, #22]
    e5ca:	2b07      	cmp	r3, #7
    e5cc:	d002      	beq.n	e5d4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    e5ce:	f04f 33ff 	mov.w	r3, #4294967295
    e5d2:	e042      	b.n	e65a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    e5d4:	79bb      	ldrb	r3, [r7, #6]
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d107      	bne.n	e5ea <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    e5da:	8afa      	ldrh	r2, [r7, #22]
    e5dc:	79f8      	ldrb	r0, [r7, #7]
    e5de:	2300      	movs	r3, #0
    e5e0:	6939      	ldr	r1, [r7, #16]
    e5e2:	4c21      	ldr	r4, [pc, #132]	; (e668 <cdcdf_acm_set_req+0xd0>)
    e5e4:	47a0      	blx	r4
    e5e6:	4603      	mov	r3, r0
    e5e8:	e037      	b.n	e65a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    e5ea:	693a      	ldr	r2, [r7, #16]
    e5ec:	f107 0308 	add.w	r3, r7, #8
    e5f0:	6810      	ldr	r0, [r2, #0]
    e5f2:	6018      	str	r0, [r3, #0]
    e5f4:	8891      	ldrh	r1, [r2, #4]
    e5f6:	7992      	ldrb	r2, [r2, #6]
    e5f8:	8099      	strh	r1, [r3, #4]
    e5fa:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    e5fc:	4b1b      	ldr	r3, [pc, #108]	; (e66c <cdcdf_acm_set_req+0xd4>)
    e5fe:	681b      	ldr	r3, [r3, #0]
    e600:	2b00      	cmp	r3, #0
    e602:	d008      	beq.n	e616 <cdcdf_acm_set_req+0x7e>
    e604:	4b19      	ldr	r3, [pc, #100]	; (e66c <cdcdf_acm_set_req+0xd4>)
    e606:	681b      	ldr	r3, [r3, #0]
    e608:	f107 0208 	add.w	r2, r7, #8
    e60c:	4610      	mov	r0, r2
    e60e:	4798      	blx	r3
    e610:	4603      	mov	r3, r0
    e612:	2b00      	cmp	r3, #0
    e614:	d00a      	beq.n	e62c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    e616:	4b16      	ldr	r3, [pc, #88]	; (e670 <cdcdf_acm_set_req+0xd8>)
    e618:	f107 0208 	add.w	r2, r7, #8
    e61c:	e892 0003 	ldmia.w	r2, {r0, r1}
    e620:	6018      	str	r0, [r3, #0]
    e622:	3304      	adds	r3, #4
    e624:	8019      	strh	r1, [r3, #0]
    e626:	3302      	adds	r3, #2
    e628:	0c0a      	lsrs	r2, r1, #16
    e62a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    e62c:	2300      	movs	r3, #0
    e62e:	e014      	b.n	e65a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    e630:	2300      	movs	r3, #0
    e632:	2200      	movs	r2, #0
    e634:	2100      	movs	r1, #0
    e636:	2000      	movs	r0, #0
    e638:	4c0b      	ldr	r4, [pc, #44]	; (e668 <cdcdf_acm_set_req+0xd0>)
    e63a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    e63c:	4b0d      	ldr	r3, [pc, #52]	; (e674 <cdcdf_acm_set_req+0xdc>)
    e63e:	681b      	ldr	r3, [r3, #0]
    e640:	2b00      	cmp	r3, #0
    e642:	d006      	beq.n	e652 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    e644:	4b0b      	ldr	r3, [pc, #44]	; (e674 <cdcdf_acm_set_req+0xdc>)
    e646:	681b      	ldr	r3, [r3, #0]
    e648:	683a      	ldr	r2, [r7, #0]
    e64a:	8852      	ldrh	r2, [r2, #2]
    e64c:	b292      	uxth	r2, r2
    e64e:	4610      	mov	r0, r2
    e650:	4798      	blx	r3
		}
		return ERR_NONE;
    e652:	2300      	movs	r3, #0
    e654:	e001      	b.n	e65a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    e656:	f06f 030c 	mvn.w	r3, #12
	}
}
    e65a:	4618      	mov	r0, r3
    e65c:	371c      	adds	r7, #28
    e65e:	46bd      	mov	sp, r7
    e660:	bd90      	pop	{r4, r7, pc}
    e662:	bf00      	nop
    e664:	0000f5e5 	.word	0x0000f5e5
    e668:	0000f459 	.word	0x0000f459
    e66c:	200014b8 	.word	0x200014b8
    e670:	200014ac 	.word	0x200014ac
    e674:	200014b4 	.word	0x200014b4

0000e678 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e678:	b590      	push	{r4, r7, lr}
    e67a:	b085      	sub	sp, #20
    e67c:	af00      	add	r7, sp, #0
    e67e:	4603      	mov	r3, r0
    e680:	6039      	str	r1, [r7, #0]
    e682:	71fb      	strb	r3, [r7, #7]
    e684:	4613      	mov	r3, r2
    e686:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    e688:	683b      	ldr	r3, [r7, #0]
    e68a:	799a      	ldrb	r2, [r3, #6]
    e68c:	79db      	ldrb	r3, [r3, #7]
    e68e:	021b      	lsls	r3, r3, #8
    e690:	4313      	orrs	r3, r2
    e692:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    e694:	79bb      	ldrb	r3, [r7, #6]
    e696:	2b01      	cmp	r3, #1
    e698:	d101      	bne.n	e69e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    e69a:	2300      	movs	r3, #0
    e69c:	e013      	b.n	e6c6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    e69e:	683b      	ldr	r3, [r7, #0]
    e6a0:	785b      	ldrb	r3, [r3, #1]
    e6a2:	2b21      	cmp	r3, #33	; 0x21
    e6a4:	d10d      	bne.n	e6c2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e6a6:	89fb      	ldrh	r3, [r7, #14]
    e6a8:	2b07      	cmp	r3, #7
    e6aa:	d002      	beq.n	e6b2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    e6ac:	f04f 33ff 	mov.w	r3, #4294967295
    e6b0:	e009      	b.n	e6c6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    e6b2:	89fa      	ldrh	r2, [r7, #14]
    e6b4:	79f8      	ldrb	r0, [r7, #7]
    e6b6:	2300      	movs	r3, #0
    e6b8:	4905      	ldr	r1, [pc, #20]	; (e6d0 <cdcdf_acm_get_req+0x58>)
    e6ba:	4c06      	ldr	r4, [pc, #24]	; (e6d4 <cdcdf_acm_get_req+0x5c>)
    e6bc:	47a0      	blx	r4
    e6be:	4603      	mov	r3, r0
    e6c0:	e001      	b.n	e6c6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    e6c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    e6c6:	4618      	mov	r0, r3
    e6c8:	3714      	adds	r7, #20
    e6ca:	46bd      	mov	sp, r7
    e6cc:	bd90      	pop	{r4, r7, pc}
    e6ce:	bf00      	nop
    e6d0:	200014ac 	.word	0x200014ac
    e6d4:	0000f459 	.word	0x0000f459

0000e6d8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e6d8:	b580      	push	{r7, lr}
    e6da:	b082      	sub	sp, #8
    e6dc:	af00      	add	r7, sp, #0
    e6de:	4603      	mov	r3, r0
    e6e0:	6039      	str	r1, [r7, #0]
    e6e2:	71fb      	strb	r3, [r7, #7]
    e6e4:	4613      	mov	r3, r2
    e6e6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e6e8:	683b      	ldr	r3, [r7, #0]
    e6ea:	781b      	ldrb	r3, [r3, #0]
    e6ec:	095b      	lsrs	r3, r3, #5
    e6ee:	b2db      	uxtb	r3, r3
    e6f0:	f003 0303 	and.w	r3, r3, #3
    e6f4:	2b01      	cmp	r3, #1
    e6f6:	d002      	beq.n	e6fe <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    e6f8:	f06f 0309 	mvn.w	r3, #9
    e6fc:	e026      	b.n	e74c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    e6fe:	683b      	ldr	r3, [r7, #0]
    e700:	889b      	ldrh	r3, [r3, #4]
    e702:	b29a      	uxth	r2, r3
    e704:	4b13      	ldr	r3, [pc, #76]	; (e754 <cdcdf_acm_req+0x7c>)
    e706:	781b      	ldrb	r3, [r3, #0]
    e708:	b29b      	uxth	r3, r3
    e70a:	429a      	cmp	r2, r3
    e70c:	d007      	beq.n	e71e <cdcdf_acm_req+0x46>
    e70e:	683b      	ldr	r3, [r7, #0]
    e710:	889b      	ldrh	r3, [r3, #4]
    e712:	b29a      	uxth	r2, r3
    e714:	4b0f      	ldr	r3, [pc, #60]	; (e754 <cdcdf_acm_req+0x7c>)
    e716:	785b      	ldrb	r3, [r3, #1]
    e718:	b29b      	uxth	r3, r3
    e71a:	429a      	cmp	r2, r3
    e71c:	d114      	bne.n	e748 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    e71e:	683b      	ldr	r3, [r7, #0]
    e720:	781b      	ldrb	r3, [r3, #0]
    e722:	b25b      	sxtb	r3, r3
    e724:	2b00      	cmp	r3, #0
    e726:	da07      	bge.n	e738 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    e728:	79ba      	ldrb	r2, [r7, #6]
    e72a:	79fb      	ldrb	r3, [r7, #7]
    e72c:	6839      	ldr	r1, [r7, #0]
    e72e:	4618      	mov	r0, r3
    e730:	4b09      	ldr	r3, [pc, #36]	; (e758 <cdcdf_acm_req+0x80>)
    e732:	4798      	blx	r3
    e734:	4603      	mov	r3, r0
    e736:	e009      	b.n	e74c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    e738:	79ba      	ldrb	r2, [r7, #6]
    e73a:	79fb      	ldrb	r3, [r7, #7]
    e73c:	6839      	ldr	r1, [r7, #0]
    e73e:	4618      	mov	r0, r3
    e740:	4b06      	ldr	r3, [pc, #24]	; (e75c <cdcdf_acm_req+0x84>)
    e742:	4798      	blx	r3
    e744:	4603      	mov	r3, r0
    e746:	e001      	b.n	e74c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    e748:	f06f 0309 	mvn.w	r3, #9
	}
}
    e74c:	4618      	mov	r0, r3
    e74e:	3708      	adds	r7, #8
    e750:	46bd      	mov	sp, r7
    e752:	bd80      	pop	{r7, pc}
    e754:	200014a4 	.word	0x200014a4
    e758:	0000e679 	.word	0x0000e679
    e75c:	0000e599 	.word	0x0000e599

0000e760 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    e760:	b580      	push	{r7, lr}
    e762:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    e764:	4b0b      	ldr	r3, [pc, #44]	; (e794 <cdcdf_acm_init+0x34>)
    e766:	4798      	blx	r3
    e768:	4603      	mov	r3, r0
    e76a:	2b01      	cmp	r3, #1
    e76c:	d902      	bls.n	e774 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    e76e:	f06f 0310 	mvn.w	r3, #16
    e772:	e00d      	b.n	e790 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    e774:	4b08      	ldr	r3, [pc, #32]	; (e798 <cdcdf_acm_init+0x38>)
    e776:	4a09      	ldr	r2, [pc, #36]	; (e79c <cdcdf_acm_init+0x3c>)
    e778:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    e77a:	4b07      	ldr	r3, [pc, #28]	; (e798 <cdcdf_acm_init+0x38>)
    e77c:	4a08      	ldr	r2, [pc, #32]	; (e7a0 <cdcdf_acm_init+0x40>)
    e77e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    e780:	4805      	ldr	r0, [pc, #20]	; (e798 <cdcdf_acm_init+0x38>)
    e782:	4b08      	ldr	r3, [pc, #32]	; (e7a4 <cdcdf_acm_init+0x44>)
    e784:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    e786:	4908      	ldr	r1, [pc, #32]	; (e7a8 <cdcdf_acm_init+0x48>)
    e788:	2001      	movs	r0, #1
    e78a:	4b08      	ldr	r3, [pc, #32]	; (e7ac <cdcdf_acm_init+0x4c>)
    e78c:	4798      	blx	r3
	return ERR_NONE;
    e78e:	2300      	movs	r3, #0
}
    e790:	4618      	mov	r0, r3
    e792:	bd80      	pop	{r7, pc}
    e794:	0000f5fd 	.word	0x0000f5fd
    e798:	20001498 	.word	0x20001498
    e79c:	0000e549 	.word	0x0000e549
    e7a0:	200014a4 	.word	0x200014a4
    e7a4:	0000f565 	.word	0x0000f565
    e7a8:	200001dc 	.word	0x200001dc
    e7ac:	0000f495 	.word	0x0000f495

0000e7b0 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    e7b0:	b590      	push	{r4, r7, lr}
    e7b2:	b083      	sub	sp, #12
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
    e7b8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e7ba:	4b0b      	ldr	r3, [pc, #44]	; (e7e8 <cdcdf_acm_read+0x38>)
    e7bc:	4798      	blx	r3
    e7be:	4603      	mov	r3, r0
    e7c0:	f083 0301 	eor.w	r3, r3, #1
    e7c4:	b2db      	uxtb	r3, r3
    e7c6:	2b00      	cmp	r3, #0
    e7c8:	d002      	beq.n	e7d0 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    e7ca:	f06f 0310 	mvn.w	r3, #16
    e7ce:	e007      	b.n	e7e0 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    e7d0:	4b06      	ldr	r3, [pc, #24]	; (e7ec <cdcdf_acm_read+0x3c>)
    e7d2:	7918      	ldrb	r0, [r3, #4]
    e7d4:	2300      	movs	r3, #0
    e7d6:	683a      	ldr	r2, [r7, #0]
    e7d8:	6879      	ldr	r1, [r7, #4]
    e7da:	4c05      	ldr	r4, [pc, #20]	; (e7f0 <cdcdf_acm_read+0x40>)
    e7dc:	47a0      	blx	r4
    e7de:	4603      	mov	r3, r0
}
    e7e0:	4618      	mov	r0, r3
    e7e2:	370c      	adds	r7, #12
    e7e4:	46bd      	mov	sp, r7
    e7e6:	bd90      	pop	{r4, r7, pc}
    e7e8:	0000e8d5 	.word	0x0000e8d5
    e7ec:	200014a4 	.word	0x200014a4
    e7f0:	0000f459 	.word	0x0000f459

0000e7f4 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    e7f4:	b590      	push	{r4, r7, lr}
    e7f6:	b083      	sub	sp, #12
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
    e7fc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e7fe:	4b0b      	ldr	r3, [pc, #44]	; (e82c <cdcdf_acm_write+0x38>)
    e800:	4798      	blx	r3
    e802:	4603      	mov	r3, r0
    e804:	f083 0301 	eor.w	r3, r3, #1
    e808:	b2db      	uxtb	r3, r3
    e80a:	2b00      	cmp	r3, #0
    e80c:	d002      	beq.n	e814 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    e80e:	f06f 0310 	mvn.w	r3, #16
    e812:	e007      	b.n	e824 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    e814:	4b06      	ldr	r3, [pc, #24]	; (e830 <cdcdf_acm_write+0x3c>)
    e816:	78d8      	ldrb	r0, [r3, #3]
    e818:	2301      	movs	r3, #1
    e81a:	683a      	ldr	r2, [r7, #0]
    e81c:	6879      	ldr	r1, [r7, #4]
    e81e:	4c05      	ldr	r4, [pc, #20]	; (e834 <cdcdf_acm_write+0x40>)
    e820:	47a0      	blx	r4
    e822:	4603      	mov	r3, r0
}
    e824:	4618      	mov	r0, r3
    e826:	370c      	adds	r7, #12
    e828:	46bd      	mov	sp, r7
    e82a:	bd90      	pop	{r4, r7, pc}
    e82c:	0000e8d5 	.word	0x0000e8d5
    e830:	200014a4 	.word	0x200014a4
    e834:	0000f459 	.word	0x0000f459

0000e838 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    e838:	b580      	push	{r7, lr}
    e83a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    e83c:	4b05      	ldr	r3, [pc, #20]	; (e854 <cdcdf_acm_stop_xfer+0x1c>)
    e83e:	78db      	ldrb	r3, [r3, #3]
    e840:	4618      	mov	r0, r3
    e842:	4b05      	ldr	r3, [pc, #20]	; (e858 <cdcdf_acm_stop_xfer+0x20>)
    e844:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    e846:	4b03      	ldr	r3, [pc, #12]	; (e854 <cdcdf_acm_stop_xfer+0x1c>)
    e848:	791b      	ldrb	r3, [r3, #4]
    e84a:	4618      	mov	r0, r3
    e84c:	4b02      	ldr	r3, [pc, #8]	; (e858 <cdcdf_acm_stop_xfer+0x20>)
    e84e:	4798      	blx	r3
}
    e850:	bf00      	nop
    e852:	bd80      	pop	{r7, pc}
    e854:	200014a4 	.word	0x200014a4
    e858:	000053bd 	.word	0x000053bd

0000e85c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    e85c:	b580      	push	{r7, lr}
    e85e:	b082      	sub	sp, #8
    e860:	af00      	add	r7, sp, #0
    e862:	4603      	mov	r3, r0
    e864:	6039      	str	r1, [r7, #0]
    e866:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    e868:	79fb      	ldrb	r3, [r7, #7]
    e86a:	2b03      	cmp	r3, #3
    e86c:	d822      	bhi.n	e8b4 <cdcdf_acm_register_callback+0x58>
    e86e:	a201      	add	r2, pc, #4	; (adr r2, e874 <cdcdf_acm_register_callback+0x18>)
    e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e874:	0000e885 	.word	0x0000e885
    e878:	0000e895 	.word	0x0000e895
    e87c:	0000e8a5 	.word	0x0000e8a5
    e880:	0000e8ad 	.word	0x0000e8ad
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    e884:	4b0f      	ldr	r3, [pc, #60]	; (e8c4 <cdcdf_acm_register_callback+0x68>)
    e886:	791b      	ldrb	r3, [r3, #4]
    e888:	683a      	ldr	r2, [r7, #0]
    e88a:	2102      	movs	r1, #2
    e88c:	4618      	mov	r0, r3
    e88e:	4b0e      	ldr	r3, [pc, #56]	; (e8c8 <cdcdf_acm_register_callback+0x6c>)
    e890:	4798      	blx	r3
		break;
    e892:	e012      	b.n	e8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    e894:	4b0b      	ldr	r3, [pc, #44]	; (e8c4 <cdcdf_acm_register_callback+0x68>)
    e896:	78db      	ldrb	r3, [r3, #3]
    e898:	683a      	ldr	r2, [r7, #0]
    e89a:	2102      	movs	r1, #2
    e89c:	4618      	mov	r0, r3
    e89e:	4b0a      	ldr	r3, [pc, #40]	; (e8c8 <cdcdf_acm_register_callback+0x6c>)
    e8a0:	4798      	blx	r3
		break;
    e8a2:	e00a      	b.n	e8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    e8a4:	4a09      	ldr	r2, [pc, #36]	; (e8cc <cdcdf_acm_register_callback+0x70>)
    e8a6:	683b      	ldr	r3, [r7, #0]
    e8a8:	6013      	str	r3, [r2, #0]
		break;
    e8aa:	e006      	b.n	e8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    e8ac:	4a08      	ldr	r2, [pc, #32]	; (e8d0 <cdcdf_acm_register_callback+0x74>)
    e8ae:	683b      	ldr	r3, [r7, #0]
    e8b0:	6013      	str	r3, [r2, #0]
		break;
    e8b2:	e002      	b.n	e8ba <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    e8b4:	f06f 030c 	mvn.w	r3, #12
    e8b8:	e000      	b.n	e8bc <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    e8ba:	2300      	movs	r3, #0
}
    e8bc:	4618      	mov	r0, r3
    e8be:	3708      	adds	r7, #8
    e8c0:	46bd      	mov	sp, r7
    e8c2:	bd80      	pop	{r7, pc}
    e8c4:	200014a4 	.word	0x200014a4
    e8c8:	000054e9 	.word	0x000054e9
    e8cc:	200014b8 	.word	0x200014b8
    e8d0:	200014b4 	.word	0x200014b4

0000e8d4 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    e8d4:	b480      	push	{r7}
    e8d6:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    e8d8:	4b03      	ldr	r3, [pc, #12]	; (e8e8 <cdcdf_acm_is_enabled+0x14>)
    e8da:	795b      	ldrb	r3, [r3, #5]
}
    e8dc:	4618      	mov	r0, r3
    e8de:	46bd      	mov	sp, r7
    e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8e4:	4770      	bx	lr
    e8e6:	bf00      	nop
    e8e8:	200014a4 	.word	0x200014a4

0000e8ec <usb_get_u16>:
{
    e8ec:	b480      	push	{r7}
    e8ee:	b083      	sub	sp, #12
    e8f0:	af00      	add	r7, sp, #0
    e8f2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e8f4:	687b      	ldr	r3, [r7, #4]
    e8f6:	781b      	ldrb	r3, [r3, #0]
    e8f8:	b29a      	uxth	r2, r3
    e8fa:	687b      	ldr	r3, [r7, #4]
    e8fc:	3301      	adds	r3, #1
    e8fe:	781b      	ldrb	r3, [r3, #0]
    e900:	b29b      	uxth	r3, r3
    e902:	021b      	lsls	r3, r3, #8
    e904:	b29b      	uxth	r3, r3
    e906:	4413      	add	r3, r2
    e908:	b29b      	uxth	r3, r3
}
    e90a:	4618      	mov	r0, r3
    e90c:	370c      	adds	r7, #12
    e90e:	46bd      	mov	sp, r7
    e910:	f85d 7b04 	ldr.w	r7, [sp], #4
    e914:	4770      	bx	lr

0000e916 <usb_desc_len>:
{
    e916:	b480      	push	{r7}
    e918:	b083      	sub	sp, #12
    e91a:	af00      	add	r7, sp, #0
    e91c:	6078      	str	r0, [r7, #4]
	return desc[0];
    e91e:	687b      	ldr	r3, [r7, #4]
    e920:	781b      	ldrb	r3, [r3, #0]
}
    e922:	4618      	mov	r0, r3
    e924:	370c      	adds	r7, #12
    e926:	46bd      	mov	sp, r7
    e928:	f85d 7b04 	ldr.w	r7, [sp], #4
    e92c:	4770      	bx	lr
	...

0000e930 <usb_desc_next>:
{
    e930:	b580      	push	{r7, lr}
    e932:	b082      	sub	sp, #8
    e934:	af00      	add	r7, sp, #0
    e936:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e938:	6878      	ldr	r0, [r7, #4]
    e93a:	4b05      	ldr	r3, [pc, #20]	; (e950 <usb_desc_next+0x20>)
    e93c:	4798      	blx	r3
    e93e:	4603      	mov	r3, r0
    e940:	461a      	mov	r2, r3
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	4413      	add	r3, r2
}
    e946:	4618      	mov	r0, r3
    e948:	3708      	adds	r7, #8
    e94a:	46bd      	mov	sp, r7
    e94c:	bd80      	pop	{r7, pc}
    e94e:	bf00      	nop
    e950:	0000e917 	.word	0x0000e917

0000e954 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e954:	b580      	push	{r7, lr}
    e956:	b082      	sub	sp, #8
    e958:	af00      	add	r7, sp, #0
    e95a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e95c:	687b      	ldr	r3, [r7, #4]
    e95e:	3302      	adds	r3, #2
    e960:	4618      	mov	r0, r3
    e962:	4b03      	ldr	r3, [pc, #12]	; (e970 <usb_cfg_desc_total_len+0x1c>)
    e964:	4798      	blx	r3
    e966:	4603      	mov	r3, r0
}
    e968:	4618      	mov	r0, r3
    e96a:	3708      	adds	r7, #8
    e96c:	46bd      	mov	sp, r7
    e96e:	bd80      	pop	{r7, pc}
    e970:	0000e8ed 	.word	0x0000e8ed

0000e974 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e974:	b590      	push	{r4, r7, lr}
    e976:	b085      	sub	sp, #20
    e978:	af00      	add	r7, sp, #0
    e97a:	4603      	mov	r3, r0
    e97c:	6039      	str	r1, [r7, #0]
    e97e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e980:	2300      	movs	r3, #0
    e982:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e984:	683b      	ldr	r3, [r7, #0]
    e986:	799a      	ldrb	r2, [r3, #6]
    e988:	79db      	ldrb	r3, [r3, #7]
    e98a:	021b      	lsls	r3, r3, #8
    e98c:	4313      	orrs	r3, r2
    e98e:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e990:	897b      	ldrh	r3, [r7, #10]
    e992:	2b12      	cmp	r3, #18
    e994:	d901      	bls.n	e99a <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e996:	2312      	movs	r3, #18
    e998:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e99a:	68fb      	ldr	r3, [r7, #12]
    e99c:	2b00      	cmp	r3, #0
    e99e:	d10a      	bne.n	e9b6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e9a0:	4b0f      	ldr	r3, [pc, #60]	; (e9e0 <usbdc_get_dev_desc+0x6c>)
    e9a2:	681b      	ldr	r3, [r3, #0]
    e9a4:	6818      	ldr	r0, [r3, #0]
    e9a6:	4b0e      	ldr	r3, [pc, #56]	; (e9e0 <usbdc_get_dev_desc+0x6c>)
    e9a8:	681b      	ldr	r3, [r3, #0]
    e9aa:	685b      	ldr	r3, [r3, #4]
    e9ac:	2201      	movs	r2, #1
    e9ae:	4619      	mov	r1, r3
    e9b0:	4b0c      	ldr	r3, [pc, #48]	; (e9e4 <usbdc_get_dev_desc+0x70>)
    e9b2:	4798      	blx	r3
    e9b4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e9b6:	68fb      	ldr	r3, [r7, #12]
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	d101      	bne.n	e9c0 <usbdc_get_dev_desc+0x4c>
		return false;
    e9bc:	2300      	movs	r3, #0
    e9be:	e00b      	b.n	e9d8 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e9c0:	897a      	ldrh	r2, [r7, #10]
    e9c2:	79f8      	ldrb	r0, [r7, #7]
    e9c4:	2300      	movs	r3, #0
    e9c6:	68f9      	ldr	r1, [r7, #12]
    e9c8:	4c07      	ldr	r4, [pc, #28]	; (e9e8 <usbdc_get_dev_desc+0x74>)
    e9ca:	47a0      	blx	r4
    e9cc:	4603      	mov	r3, r0
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d001      	beq.n	e9d6 <usbdc_get_dev_desc+0x62>
		return false;
    e9d2:	2300      	movs	r3, #0
    e9d4:	e000      	b.n	e9d8 <usbdc_get_dev_desc+0x64>
	}
	return true;
    e9d6:	2301      	movs	r3, #1
}
    e9d8:	4618      	mov	r0, r3
    e9da:	3714      	adds	r7, #20
    e9dc:	46bd      	mov	sp, r7
    e9de:	bd90      	pop	{r4, r7, pc}
    e9e0:	200014bc 	.word	0x200014bc
    e9e4:	0000f6e9 	.word	0x0000f6e9
    e9e8:	0000f459 	.word	0x0000f459

0000e9ec <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    e9ec:	b590      	push	{r4, r7, lr}
    e9ee:	b087      	sub	sp, #28
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	4603      	mov	r3, r0
    e9f4:	6039      	str	r1, [r7, #0]
    e9f6:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e9f8:	2300      	movs	r3, #0
    e9fa:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e9fc:	683b      	ldr	r3, [r7, #0]
    e9fe:	799a      	ldrb	r2, [r3, #6]
    ea00:	79db      	ldrb	r3, [r3, #7]
    ea02:	021b      	lsls	r3, r3, #8
    ea04:	4313      	orrs	r3, r2
    ea06:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ea08:	683b      	ldr	r3, [r7, #0]
    ea0a:	885b      	ldrh	r3, [r3, #2]
    ea0c:	b29b      	uxth	r3, r3
    ea0e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ea10:	8a7a      	ldrh	r2, [r7, #18]
    ea12:	4b1e      	ldr	r3, [pc, #120]	; (ea8c <usbdc_get_cfg_desc+0xa0>)
    ea14:	7f1b      	ldrb	r3, [r3, #28]
    ea16:	3b01      	subs	r3, #1
    ea18:	4013      	ands	r3, r2
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	bf0c      	ite	eq
    ea1e:	2301      	moveq	r3, #1
    ea20:	2300      	movne	r3, #0
    ea22:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ea24:	697b      	ldr	r3, [r7, #20]
    ea26:	2b00      	cmp	r3, #0
    ea28:	d10c      	bne.n	ea44 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ea2a:	4b18      	ldr	r3, [pc, #96]	; (ea8c <usbdc_get_cfg_desc+0xa0>)
    ea2c:	681b      	ldr	r3, [r3, #0]
    ea2e:	6818      	ldr	r0, [r3, #0]
    ea30:	4b16      	ldr	r3, [pc, #88]	; (ea8c <usbdc_get_cfg_desc+0xa0>)
    ea32:	681b      	ldr	r3, [r3, #0]
    ea34:	6859      	ldr	r1, [r3, #4]
    ea36:	7c3b      	ldrb	r3, [r7, #16]
    ea38:	3301      	adds	r3, #1
    ea3a:	b2db      	uxtb	r3, r3
    ea3c:	461a      	mov	r2, r3
    ea3e:	4b14      	ldr	r3, [pc, #80]	; (ea90 <usbdc_get_cfg_desc+0xa4>)
    ea40:	4798      	blx	r3
    ea42:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ea44:	697b      	ldr	r3, [r7, #20]
    ea46:	2b00      	cmp	r3, #0
    ea48:	d101      	bne.n	ea4e <usbdc_get_cfg_desc+0x62>
		return false;
    ea4a:	2300      	movs	r3, #0
    ea4c:	e019      	b.n	ea82 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ea4e:	6978      	ldr	r0, [r7, #20]
    ea50:	4b10      	ldr	r3, [pc, #64]	; (ea94 <usbdc_get_cfg_desc+0xa8>)
    ea52:	4798      	blx	r3
    ea54:	4603      	mov	r3, r0
    ea56:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    ea58:	8a7a      	ldrh	r2, [r7, #18]
    ea5a:	89fb      	ldrh	r3, [r7, #14]
    ea5c:	429a      	cmp	r2, r3
    ea5e:	d802      	bhi.n	ea66 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    ea60:	2300      	movs	r3, #0
    ea62:	747b      	strb	r3, [r7, #17]
    ea64:	e001      	b.n	ea6a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    ea66:	89fb      	ldrh	r3, [r7, #14]
    ea68:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ea6a:	8a7a      	ldrh	r2, [r7, #18]
    ea6c:	7c7b      	ldrb	r3, [r7, #17]
    ea6e:	79f8      	ldrb	r0, [r7, #7]
    ea70:	6979      	ldr	r1, [r7, #20]
    ea72:	4c09      	ldr	r4, [pc, #36]	; (ea98 <usbdc_get_cfg_desc+0xac>)
    ea74:	47a0      	blx	r4
    ea76:	4603      	mov	r3, r0
    ea78:	2b00      	cmp	r3, #0
    ea7a:	d001      	beq.n	ea80 <usbdc_get_cfg_desc+0x94>
		return false;
    ea7c:	2300      	movs	r3, #0
    ea7e:	e000      	b.n	ea82 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ea80:	2301      	movs	r3, #1
}
    ea82:	4618      	mov	r0, r3
    ea84:	371c      	adds	r7, #28
    ea86:	46bd      	mov	sp, r7
    ea88:	bd90      	pop	{r4, r7, pc}
    ea8a:	bf00      	nop
    ea8c:	200014bc 	.word	0x200014bc
    ea90:	0000f7a9 	.word	0x0000f7a9
    ea94:	0000e955 	.word	0x0000e955
    ea98:	0000f459 	.word	0x0000f459

0000ea9c <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ea9c:	b590      	push	{r4, r7, lr}
    ea9e:	b085      	sub	sp, #20
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	4603      	mov	r3, r0
    eaa4:	6039      	str	r1, [r7, #0]
    eaa6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    eaa8:	683b      	ldr	r3, [r7, #0]
    eaaa:	799a      	ldrb	r2, [r3, #6]
    eaac:	79db      	ldrb	r3, [r3, #7]
    eaae:	021b      	lsls	r3, r3, #8
    eab0:	4313      	orrs	r3, r2
    eab2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    eab4:	683b      	ldr	r3, [r7, #0]
    eab6:	885b      	ldrh	r3, [r3, #2]
    eab8:	b29b      	uxth	r3, r3
    eaba:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    eabc:	89fa      	ldrh	r2, [r7, #14]
    eabe:	4b1a      	ldr	r3, [pc, #104]	; (eb28 <usbdc_get_str_desc+0x8c>)
    eac0:	7f1b      	ldrb	r3, [r3, #28]
    eac2:	3b01      	subs	r3, #1
    eac4:	4013      	ands	r3, r2
    eac6:	2b00      	cmp	r3, #0
    eac8:	bf0c      	ite	eq
    eaca:	2301      	moveq	r3, #1
    eacc:	2300      	movne	r3, #0
    eace:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ead0:	4b15      	ldr	r3, [pc, #84]	; (eb28 <usbdc_get_str_desc+0x8c>)
    ead2:	681b      	ldr	r3, [r3, #0]
    ead4:	6818      	ldr	r0, [r3, #0]
    ead6:	4b14      	ldr	r3, [pc, #80]	; (eb28 <usbdc_get_str_desc+0x8c>)
    ead8:	681b      	ldr	r3, [r3, #0]
    eada:	685b      	ldr	r3, [r3, #4]
    eadc:	7b3a      	ldrb	r2, [r7, #12]
    eade:	4619      	mov	r1, r3
    eae0:	4b12      	ldr	r3, [pc, #72]	; (eb2c <usbdc_get_str_desc+0x90>)
    eae2:	4798      	blx	r3
    eae4:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    eae6:	68bb      	ldr	r3, [r7, #8]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d101      	bne.n	eaf0 <usbdc_get_str_desc+0x54>
		return false;
    eaec:	2300      	movs	r3, #0
    eaee:	e017      	b.n	eb20 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    eaf0:	68bb      	ldr	r3, [r7, #8]
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	b29b      	uxth	r3, r3
    eaf6:	89fa      	ldrh	r2, [r7, #14]
    eaf8:	429a      	cmp	r2, r3
    eafa:	d802      	bhi.n	eb02 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    eafc:	2300      	movs	r3, #0
    eafe:	737b      	strb	r3, [r7, #13]
    eb00:	e002      	b.n	eb08 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    eb02:	68bb      	ldr	r3, [r7, #8]
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    eb08:	89fa      	ldrh	r2, [r7, #14]
    eb0a:	7b7b      	ldrb	r3, [r7, #13]
    eb0c:	79f8      	ldrb	r0, [r7, #7]
    eb0e:	68b9      	ldr	r1, [r7, #8]
    eb10:	4c07      	ldr	r4, [pc, #28]	; (eb30 <usbdc_get_str_desc+0x94>)
    eb12:	47a0      	blx	r4
    eb14:	4603      	mov	r3, r0
    eb16:	2b00      	cmp	r3, #0
    eb18:	d001      	beq.n	eb1e <usbdc_get_str_desc+0x82>
		return false;
    eb1a:	2300      	movs	r3, #0
    eb1c:	e000      	b.n	eb20 <usbdc_get_str_desc+0x84>
	}
	return true;
    eb1e:	2301      	movs	r3, #1
}
    eb20:	4618      	mov	r0, r3
    eb22:	3714      	adds	r7, #20
    eb24:	46bd      	mov	sp, r7
    eb26:	bd90      	pop	{r4, r7, pc}
    eb28:	200014bc 	.word	0x200014bc
    eb2c:	0000f821 	.word	0x0000f821
    eb30:	0000f459 	.word	0x0000f459

0000eb34 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    eb34:	b580      	push	{r7, lr}
    eb36:	b084      	sub	sp, #16
    eb38:	af00      	add	r7, sp, #0
    eb3a:	4603      	mov	r3, r0
    eb3c:	6039      	str	r1, [r7, #0]
    eb3e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    eb40:	683b      	ldr	r3, [r7, #0]
    eb42:	885b      	ldrh	r3, [r3, #2]
    eb44:	b29b      	uxth	r3, r3
    eb46:	0a1b      	lsrs	r3, r3, #8
    eb48:	b29b      	uxth	r3, r3
    eb4a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    eb4c:	7bfb      	ldrb	r3, [r7, #15]
    eb4e:	2b02      	cmp	r3, #2
    eb50:	d00d      	beq.n	eb6e <usbdc_get_desc_req+0x3a>
    eb52:	2b03      	cmp	r3, #3
    eb54:	d012      	beq.n	eb7c <usbdc_get_desc_req+0x48>
    eb56:	2b01      	cmp	r3, #1
    eb58:	d002      	beq.n	eb60 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    eb5a:	bf00      	nop
	}
	return false;
    eb5c:	2300      	movs	r3, #0
    eb5e:	e013      	b.n	eb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    eb60:	79fb      	ldrb	r3, [r7, #7]
    eb62:	6839      	ldr	r1, [r7, #0]
    eb64:	4618      	mov	r0, r3
    eb66:	4b0a      	ldr	r3, [pc, #40]	; (eb90 <usbdc_get_desc_req+0x5c>)
    eb68:	4798      	blx	r3
    eb6a:	4603      	mov	r3, r0
    eb6c:	e00c      	b.n	eb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    eb6e:	79fb      	ldrb	r3, [r7, #7]
    eb70:	6839      	ldr	r1, [r7, #0]
    eb72:	4618      	mov	r0, r3
    eb74:	4b07      	ldr	r3, [pc, #28]	; (eb94 <usbdc_get_desc_req+0x60>)
    eb76:	4798      	blx	r3
    eb78:	4603      	mov	r3, r0
    eb7a:	e005      	b.n	eb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    eb7c:	79fb      	ldrb	r3, [r7, #7]
    eb7e:	6839      	ldr	r1, [r7, #0]
    eb80:	4618      	mov	r0, r3
    eb82:	4b05      	ldr	r3, [pc, #20]	; (eb98 <usbdc_get_desc_req+0x64>)
    eb84:	4798      	blx	r3
    eb86:	4603      	mov	r3, r0
}
    eb88:	4618      	mov	r0, r3
    eb8a:	3710      	adds	r7, #16
    eb8c:	46bd      	mov	sp, r7
    eb8e:	bd80      	pop	{r7, pc}
    eb90:	0000e975 	.word	0x0000e975
    eb94:	0000e9ed 	.word	0x0000e9ed
    eb98:	0000ea9d 	.word	0x0000ea9d

0000eb9c <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    eb9c:	b590      	push	{r4, r7, lr}
    eb9e:	b085      	sub	sp, #20
    eba0:	af00      	add	r7, sp, #0
    eba2:	4603      	mov	r3, r0
    eba4:	6039      	str	r1, [r7, #0]
    eba6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    eba8:	683b      	ldr	r3, [r7, #0]
    ebaa:	781b      	ldrb	r3, [r3, #0]
    ebac:	f003 031f 	and.w	r3, r3, #31
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	db1b      	blt.n	ebec <usbdc_get_status_req+0x50>
    ebb4:	2b01      	cmp	r3, #1
    ebb6:	dd02      	ble.n	ebbe <usbdc_get_status_req+0x22>
    ebb8:	2b02      	cmp	r3, #2
    ebba:	d003      	beq.n	ebc4 <usbdc_get_status_req+0x28>
    ebbc:	e016      	b.n	ebec <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ebbe:	2300      	movs	r3, #0
    ebc0:	60fb      	str	r3, [r7, #12]
		break;
    ebc2:	e015      	b.n	ebf0 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ebc4:	683b      	ldr	r3, [r7, #0]
    ebc6:	889b      	ldrh	r3, [r3, #4]
    ebc8:	b29b      	uxth	r3, r3
    ebca:	b2db      	uxtb	r3, r3
    ebcc:	2102      	movs	r1, #2
    ebce:	4618      	mov	r0, r3
    ebd0:	4b0f      	ldr	r3, [pc, #60]	; (ec10 <usbdc_get_status_req+0x74>)
    ebd2:	4798      	blx	r3
    ebd4:	4603      	mov	r3, r0
    ebd6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ebd8:	68fb      	ldr	r3, [r7, #12]
    ebda:	2b00      	cmp	r3, #0
    ebdc:	da01      	bge.n	ebe2 <usbdc_get_status_req+0x46>
			return false;
    ebde:	2300      	movs	r3, #0
    ebe0:	e012      	b.n	ec08 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ebe2:	68fb      	ldr	r3, [r7, #12]
    ebe4:	f003 0301 	and.w	r3, r3, #1
    ebe8:	60fb      	str	r3, [r7, #12]
		break;
    ebea:	e001      	b.n	ebf0 <usbdc_get_status_req+0x54>
	default:
		return false;
    ebec:	2300      	movs	r3, #0
    ebee:	e00b      	b.n	ec08 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ebf0:	4b08      	ldr	r3, [pc, #32]	; (ec14 <usbdc_get_status_req+0x78>)
    ebf2:	695b      	ldr	r3, [r3, #20]
    ebf4:	89ba      	ldrh	r2, [r7, #12]
    ebf6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ebf8:	4b06      	ldr	r3, [pc, #24]	; (ec14 <usbdc_get_status_req+0x78>)
    ebfa:	6959      	ldr	r1, [r3, #20]
    ebfc:	79f8      	ldrb	r0, [r7, #7]
    ebfe:	2300      	movs	r3, #0
    ec00:	2202      	movs	r2, #2
    ec02:	4c05      	ldr	r4, [pc, #20]	; (ec18 <usbdc_get_status_req+0x7c>)
    ec04:	47a0      	blx	r4
	return true;
    ec06:	2301      	movs	r3, #1
}
    ec08:	4618      	mov	r0, r3
    ec0a:	3714      	adds	r7, #20
    ec0c:	46bd      	mov	sp, r7
    ec0e:	bd90      	pop	{r4, r7, pc}
    ec10:	00005495 	.word	0x00005495
    ec14:	200014bc 	.word	0x200014bc
    ec18:	0000f459 	.word	0x0000f459

0000ec1c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ec1c:	b590      	push	{r4, r7, lr}
    ec1e:	b085      	sub	sp, #20
    ec20:	af00      	add	r7, sp, #0
    ec22:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ec24:	4b1f      	ldr	r3, [pc, #124]	; (eca4 <usbdc_get_interface+0x88>)
    ec26:	691b      	ldr	r3, [r3, #16]
    ec28:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ec2a:	4b1e      	ldr	r3, [pc, #120]	; (eca4 <usbdc_get_interface+0x88>)
    ec2c:	7f5b      	ldrb	r3, [r3, #29]
    ec2e:	461a      	mov	r2, r3
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	889b      	ldrh	r3, [r3, #4]
    ec34:	b29b      	uxth	r3, r3
    ec36:	fa42 f303 	asr.w	r3, r2, r3
    ec3a:	f003 0301 	and.w	r3, r3, #1
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d128      	bne.n	ec94 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ec42:	4b18      	ldr	r3, [pc, #96]	; (eca4 <usbdc_get_interface+0x88>)
    ec44:	695b      	ldr	r3, [r3, #20]
    ec46:	2200      	movs	r2, #0
    ec48:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ec4a:	4b16      	ldr	r3, [pc, #88]	; (eca4 <usbdc_get_interface+0x88>)
    ec4c:	6959      	ldr	r1, [r3, #20]
    ec4e:	2300      	movs	r3, #0
    ec50:	2201      	movs	r2, #1
    ec52:	2000      	movs	r0, #0
    ec54:	4c14      	ldr	r4, [pc, #80]	; (eca8 <usbdc_get_interface+0x8c>)
    ec56:	47a0      	blx	r4
		return true;
    ec58:	2301      	movs	r3, #1
    ec5a:	e01f      	b.n	ec9c <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ec5c:	68fb      	ldr	r3, [r7, #12]
    ec5e:	685b      	ldr	r3, [r3, #4]
    ec60:	687a      	ldr	r2, [r7, #4]
    ec62:	2102      	movs	r1, #2
    ec64:	68f8      	ldr	r0, [r7, #12]
    ec66:	4798      	blx	r3
    ec68:	60b8      	str	r0, [r7, #8]
    ec6a:	68bb      	ldr	r3, [r7, #8]
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	da03      	bge.n	ec78 <usbdc_get_interface+0x5c>
			func = func->next;
    ec70:	68fb      	ldr	r3, [r7, #12]
    ec72:	681b      	ldr	r3, [r3, #0]
    ec74:	60fb      	str	r3, [r7, #12]
    ec76:	e00d      	b.n	ec94 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ec78:	4b0a      	ldr	r3, [pc, #40]	; (eca4 <usbdc_get_interface+0x88>)
    ec7a:	695b      	ldr	r3, [r3, #20]
    ec7c:	68ba      	ldr	r2, [r7, #8]
    ec7e:	b2d2      	uxtb	r2, r2
    ec80:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ec82:	4b08      	ldr	r3, [pc, #32]	; (eca4 <usbdc_get_interface+0x88>)
    ec84:	6959      	ldr	r1, [r3, #20]
    ec86:	2300      	movs	r3, #0
    ec88:	2201      	movs	r2, #1
    ec8a:	2000      	movs	r0, #0
    ec8c:	4c06      	ldr	r4, [pc, #24]	; (eca8 <usbdc_get_interface+0x8c>)
    ec8e:	47a0      	blx	r4
			return true;
    ec90:	2301      	movs	r3, #1
    ec92:	e003      	b.n	ec9c <usbdc_get_interface+0x80>
	while (NULL != func) {
    ec94:	68fb      	ldr	r3, [r7, #12]
    ec96:	2b00      	cmp	r3, #0
    ec98:	d1e0      	bne.n	ec5c <usbdc_get_interface+0x40>
		}
	}
	return false;
    ec9a:	2300      	movs	r3, #0
}
    ec9c:	4618      	mov	r0, r3
    ec9e:	3714      	adds	r7, #20
    eca0:	46bd      	mov	sp, r7
    eca2:	bd90      	pop	{r4, r7, pc}
    eca4:	200014bc 	.word	0x200014bc
    eca8:	0000f459 	.word	0x0000f459

0000ecac <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ecac:	b590      	push	{r4, r7, lr}
    ecae:	b083      	sub	sp, #12
    ecb0:	af00      	add	r7, sp, #0
    ecb2:	4603      	mov	r3, r0
    ecb4:	6039      	str	r1, [r7, #0]
    ecb6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ecb8:	683b      	ldr	r3, [r7, #0]
    ecba:	785b      	ldrb	r3, [r3, #1]
    ecbc:	2b0a      	cmp	r3, #10
    ecbe:	d83a      	bhi.n	ed36 <usbdc_get_req+0x8a>
    ecc0:	a201      	add	r2, pc, #4	; (adr r2, ecc8 <usbdc_get_req+0x1c>)
    ecc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ecc6:	bf00      	nop
    ecc8:	0000ed1f 	.word	0x0000ed1f
    eccc:	0000ed37 	.word	0x0000ed37
    ecd0:	0000ed37 	.word	0x0000ed37
    ecd4:	0000ed37 	.word	0x0000ed37
    ecd8:	0000ed37 	.word	0x0000ed37
    ecdc:	0000ed37 	.word	0x0000ed37
    ece0:	0000ecf5 	.word	0x0000ecf5
    ece4:	0000ed37 	.word	0x0000ed37
    ece8:	0000ed03 	.word	0x0000ed03
    ecec:	0000ed37 	.word	0x0000ed37
    ecf0:	0000ed2d 	.word	0x0000ed2d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ecf4:	79fb      	ldrb	r3, [r7, #7]
    ecf6:	6839      	ldr	r1, [r7, #0]
    ecf8:	4618      	mov	r0, r3
    ecfa:	4b11      	ldr	r3, [pc, #68]	; (ed40 <usbdc_get_req+0x94>)
    ecfc:	4798      	blx	r3
    ecfe:	4603      	mov	r3, r0
    ed00:	e01a      	b.n	ed38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ed02:	4b10      	ldr	r3, [pc, #64]	; (ed44 <usbdc_get_req+0x98>)
    ed04:	695b      	ldr	r3, [r3, #20]
    ed06:	4a0f      	ldr	r2, [pc, #60]	; (ed44 <usbdc_get_req+0x98>)
    ed08:	7ed2      	ldrb	r2, [r2, #27]
    ed0a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ed0c:	4b0d      	ldr	r3, [pc, #52]	; (ed44 <usbdc_get_req+0x98>)
    ed0e:	6959      	ldr	r1, [r3, #20]
    ed10:	79f8      	ldrb	r0, [r7, #7]
    ed12:	2300      	movs	r3, #0
    ed14:	2201      	movs	r2, #1
    ed16:	4c0c      	ldr	r4, [pc, #48]	; (ed48 <usbdc_get_req+0x9c>)
    ed18:	47a0      	blx	r4
		return true;
    ed1a:	2301      	movs	r3, #1
    ed1c:	e00c      	b.n	ed38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    ed1e:	79fb      	ldrb	r3, [r7, #7]
    ed20:	6839      	ldr	r1, [r7, #0]
    ed22:	4618      	mov	r0, r3
    ed24:	4b09      	ldr	r3, [pc, #36]	; (ed4c <usbdc_get_req+0xa0>)
    ed26:	4798      	blx	r3
    ed28:	4603      	mov	r3, r0
    ed2a:	e005      	b.n	ed38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    ed2c:	6838      	ldr	r0, [r7, #0]
    ed2e:	4b08      	ldr	r3, [pc, #32]	; (ed50 <usbdc_get_req+0xa4>)
    ed30:	4798      	blx	r3
    ed32:	4603      	mov	r3, r0
    ed34:	e000      	b.n	ed38 <usbdc_get_req+0x8c>
	default:
		return false;
    ed36:	2300      	movs	r3, #0
	}
}
    ed38:	4618      	mov	r0, r3
    ed3a:	370c      	adds	r7, #12
    ed3c:	46bd      	mov	sp, r7
    ed3e:	bd90      	pop	{r4, r7, pc}
    ed40:	0000eb35 	.word	0x0000eb35
    ed44:	200014bc 	.word	0x200014bc
    ed48:	0000f459 	.word	0x0000f459
    ed4c:	0000eb9d 	.word	0x0000eb9d
    ed50:	0000ec1d 	.word	0x0000ec1d

0000ed54 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ed54:	b590      	push	{r4, r7, lr}
    ed56:	b083      	sub	sp, #12
    ed58:	af00      	add	r7, sp, #0
    ed5a:	4603      	mov	r3, r0
    ed5c:	6039      	str	r1, [r7, #0]
    ed5e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ed60:	683b      	ldr	r3, [r7, #0]
    ed62:	781b      	ldrb	r3, [r3, #0]
    ed64:	f003 031f 	and.w	r3, r3, #31
    ed68:	2b02      	cmp	r3, #2
    ed6a:	d116      	bne.n	ed9a <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ed6c:	683b      	ldr	r3, [r7, #0]
    ed6e:	88db      	ldrh	r3, [r3, #6]
    ed70:	b29b      	uxth	r3, r3
    ed72:	2b00      	cmp	r3, #0
    ed74:	d001      	beq.n	ed7a <usbdc_clear_ftr_req+0x26>
			return false;
    ed76:	2300      	movs	r3, #0
    ed78:	e010      	b.n	ed9c <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ed7a:	683b      	ldr	r3, [r7, #0]
    ed7c:	889b      	ldrh	r3, [r3, #4]
    ed7e:	b29b      	uxth	r3, r3
    ed80:	b2db      	uxtb	r3, r3
    ed82:	2100      	movs	r1, #0
    ed84:	4618      	mov	r0, r3
    ed86:	4b07      	ldr	r3, [pc, #28]	; (eda4 <usbdc_clear_ftr_req+0x50>)
    ed88:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ed8a:	79f8      	ldrb	r0, [r7, #7]
    ed8c:	2301      	movs	r3, #1
    ed8e:	2200      	movs	r2, #0
    ed90:	2100      	movs	r1, #0
    ed92:	4c05      	ldr	r4, [pc, #20]	; (eda8 <usbdc_clear_ftr_req+0x54>)
    ed94:	47a0      	blx	r4
		return true;
    ed96:	2301      	movs	r3, #1
    ed98:	e000      	b.n	ed9c <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    ed9a:	2300      	movs	r3, #0
	}
}
    ed9c:	4618      	mov	r0, r3
    ed9e:	370c      	adds	r7, #12
    eda0:	46bd      	mov	sp, r7
    eda2:	bd90      	pop	{r4, r7, pc}
    eda4:	00005495 	.word	0x00005495
    eda8:	0000f459 	.word	0x0000f459

0000edac <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    edac:	b590      	push	{r4, r7, lr}
    edae:	b083      	sub	sp, #12
    edb0:	af00      	add	r7, sp, #0
    edb2:	4603      	mov	r3, r0
    edb4:	6039      	str	r1, [r7, #0]
    edb6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    edb8:	683b      	ldr	r3, [r7, #0]
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	f003 031f 	and.w	r3, r3, #31
    edc0:	2b02      	cmp	r3, #2
    edc2:	d116      	bne.n	edf2 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    edc4:	683b      	ldr	r3, [r7, #0]
    edc6:	88db      	ldrh	r3, [r3, #6]
    edc8:	b29b      	uxth	r3, r3
    edca:	2b00      	cmp	r3, #0
    edcc:	d001      	beq.n	edd2 <usbdc_set_ftr_req+0x26>
			return false;
    edce:	2300      	movs	r3, #0
    edd0:	e010      	b.n	edf4 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    edd2:	683b      	ldr	r3, [r7, #0]
    edd4:	889b      	ldrh	r3, [r3, #4]
    edd6:	b29b      	uxth	r3, r3
    edd8:	b2db      	uxtb	r3, r3
    edda:	2101      	movs	r1, #1
    eddc:	4618      	mov	r0, r3
    edde:	4b07      	ldr	r3, [pc, #28]	; (edfc <usbdc_set_ftr_req+0x50>)
    ede0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ede2:	79f8      	ldrb	r0, [r7, #7]
    ede4:	2301      	movs	r3, #1
    ede6:	2200      	movs	r2, #0
    ede8:	2100      	movs	r1, #0
    edea:	4c05      	ldr	r4, [pc, #20]	; (ee00 <usbdc_set_ftr_req+0x54>)
    edec:	47a0      	blx	r4
		return true;
    edee:	2301      	movs	r3, #1
    edf0:	e000      	b.n	edf4 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    edf2:	2300      	movs	r3, #0
	}
}
    edf4:	4618      	mov	r0, r3
    edf6:	370c      	adds	r7, #12
    edf8:	46bd      	mov	sp, r7
    edfa:	bd90      	pop	{r4, r7, pc}
    edfc:	00005495 	.word	0x00005495
    ee00:	0000f459 	.word	0x0000f459

0000ee04 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ee04:	b580      	push	{r7, lr}
    ee06:	b082      	sub	sp, #8
    ee08:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ee0a:	4b0a      	ldr	r3, [pc, #40]	; (ee34 <usbdc_unconfig+0x30>)
    ee0c:	691b      	ldr	r3, [r3, #16]
    ee0e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ee10:	e008      	b.n	ee24 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	685b      	ldr	r3, [r3, #4]
    ee16:	2200      	movs	r2, #0
    ee18:	2101      	movs	r1, #1
    ee1a:	6878      	ldr	r0, [r7, #4]
    ee1c:	4798      	blx	r3
		func = func->next;
    ee1e:	687b      	ldr	r3, [r7, #4]
    ee20:	681b      	ldr	r3, [r3, #0]
    ee22:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ee24:	687b      	ldr	r3, [r7, #4]
    ee26:	2b00      	cmp	r3, #0
    ee28:	d1f3      	bne.n	ee12 <usbdc_unconfig+0xe>
	}
}
    ee2a:	bf00      	nop
    ee2c:	3708      	adds	r7, #8
    ee2e:	46bd      	mov	sp, r7
    ee30:	bd80      	pop	{r7, pc}
    ee32:	bf00      	nop
    ee34:	200014bc 	.word	0x200014bc

0000ee38 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ee38:	b580      	push	{r7, lr}
    ee3a:	b088      	sub	sp, #32
    ee3c:	af00      	add	r7, sp, #0
    ee3e:	4603      	mov	r3, r0
    ee40:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ee42:	2300      	movs	r3, #0
    ee44:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ee46:	23ff      	movs	r3, #255	; 0xff
    ee48:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    ee4a:	79fb      	ldrb	r3, [r7, #7]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d103      	bne.n	ee58 <usbdc_set_config+0x20>
		usbdc_unconfig();
    ee50:	4b2e      	ldr	r3, [pc, #184]	; (ef0c <usbdc_set_config+0xd4>)
    ee52:	4798      	blx	r3
		return true;
    ee54:	2301      	movs	r3, #1
    ee56:	e055      	b.n	ef04 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ee58:	69bb      	ldr	r3, [r7, #24]
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d10a      	bne.n	ee74 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ee5e:	4b2c      	ldr	r3, [pc, #176]	; (ef10 <usbdc_set_config+0xd8>)
    ee60:	681b      	ldr	r3, [r3, #0]
    ee62:	6818      	ldr	r0, [r3, #0]
    ee64:	4b2a      	ldr	r3, [pc, #168]	; (ef10 <usbdc_set_config+0xd8>)
    ee66:	681b      	ldr	r3, [r3, #0]
    ee68:	685b      	ldr	r3, [r3, #4]
    ee6a:	79fa      	ldrb	r2, [r7, #7]
    ee6c:	4619      	mov	r1, r3
    ee6e:	4b29      	ldr	r3, [pc, #164]	; (ef14 <usbdc_set_config+0xdc>)
    ee70:	4798      	blx	r3
    ee72:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    ee74:	69bb      	ldr	r3, [r7, #24]
    ee76:	2b00      	cmp	r3, #0
    ee78:	d101      	bne.n	ee7e <usbdc_set_config+0x46>
		return false;
    ee7a:	2300      	movs	r3, #0
    ee7c:	e042      	b.n	ef04 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ee7e:	69b8      	ldr	r0, [r7, #24]
    ee80:	4b25      	ldr	r3, [pc, #148]	; (ef18 <usbdc_set_config+0xe0>)
    ee82:	4798      	blx	r3
    ee84:	4603      	mov	r3, r0
    ee86:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    ee88:	8abb      	ldrh	r3, [r7, #20]
    ee8a:	69ba      	ldr	r2, [r7, #24]
    ee8c:	4413      	add	r3, r2
    ee8e:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ee90:	693b      	ldr	r3, [r7, #16]
    ee92:	2204      	movs	r2, #4
    ee94:	4619      	mov	r1, r3
    ee96:	69b8      	ldr	r0, [r7, #24]
    ee98:	4b20      	ldr	r3, [pc, #128]	; (ef1c <usbdc_set_config+0xe4>)
    ee9a:	4798      	blx	r3
    ee9c:	4603      	mov	r3, r0
    ee9e:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    eea0:	e02c      	b.n	eefc <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    eea2:	68fb      	ldr	r3, [r7, #12]
    eea4:	3302      	adds	r3, #2
    eea6:	781b      	ldrb	r3, [r3, #0]
    eea8:	7dfa      	ldrb	r2, [r7, #23]
    eeaa:	429a      	cmp	r2, r3
    eeac:	d018      	beq.n	eee0 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    eeae:	68fb      	ldr	r3, [r7, #12]
    eeb0:	789b      	ldrb	r3, [r3, #2]
    eeb2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    eeb4:	4b16      	ldr	r3, [pc, #88]	; (ef10 <usbdc_set_config+0xd8>)
    eeb6:	691b      	ldr	r3, [r3, #16]
    eeb8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    eeba:	e00c      	b.n	eed6 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    eebc:	69fb      	ldr	r3, [r7, #28]
    eebe:	685b      	ldr	r3, [r3, #4]
    eec0:	f107 020c 	add.w	r2, r7, #12
    eec4:	2100      	movs	r1, #0
    eec6:	69f8      	ldr	r0, [r7, #28]
    eec8:	4798      	blx	r3
    eeca:	4603      	mov	r3, r0
    eecc:	2b00      	cmp	r3, #0
    eece:	d006      	beq.n	eede <usbdc_set_config+0xa6>
					func = func->next;
    eed0:	69fb      	ldr	r3, [r7, #28]
    eed2:	681b      	ldr	r3, [r3, #0]
    eed4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    eed6:	69fb      	ldr	r3, [r7, #28]
    eed8:	2b00      	cmp	r3, #0
    eeda:	d1ef      	bne.n	eebc <usbdc_set_config+0x84>
    eedc:	e000      	b.n	eee0 <usbdc_set_config+0xa8>
				} else {
					break;
    eede:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    eee0:	68fb      	ldr	r3, [r7, #12]
    eee2:	4618      	mov	r0, r3
    eee4:	4b0e      	ldr	r3, [pc, #56]	; (ef20 <usbdc_set_config+0xe8>)
    eee6:	4798      	blx	r3
    eee8:	4603      	mov	r3, r0
    eeea:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    eeec:	68fb      	ldr	r3, [r7, #12]
    eeee:	6939      	ldr	r1, [r7, #16]
    eef0:	2204      	movs	r2, #4
    eef2:	4618      	mov	r0, r3
    eef4:	4b09      	ldr	r3, [pc, #36]	; (ef1c <usbdc_set_config+0xe4>)
    eef6:	4798      	blx	r3
    eef8:	4603      	mov	r3, r0
    eefa:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    eefc:	68fb      	ldr	r3, [r7, #12]
    eefe:	2b00      	cmp	r3, #0
    ef00:	d1cf      	bne.n	eea2 <usbdc_set_config+0x6a>
	}
	return true;
    ef02:	2301      	movs	r3, #1
}
    ef04:	4618      	mov	r0, r3
    ef06:	3720      	adds	r7, #32
    ef08:	46bd      	mov	sp, r7
    ef0a:	bd80      	pop	{r7, pc}
    ef0c:	0000ee05 	.word	0x0000ee05
    ef10:	200014bc 	.word	0x200014bc
    ef14:	0000f7a9 	.word	0x0000f7a9
    ef18:	0000e955 	.word	0x0000e955
    ef1c:	0000f6e9 	.word	0x0000f6e9
    ef20:	0000e931 	.word	0x0000e931

0000ef24 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ef24:	b580      	push	{r7, lr}
    ef26:	b082      	sub	sp, #8
    ef28:	af00      	add	r7, sp, #0
    ef2a:	4603      	mov	r3, r0
    ef2c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ef2e:	79fb      	ldrb	r3, [r7, #7]
    ef30:	4618      	mov	r0, r3
    ef32:	4b03      	ldr	r3, [pc, #12]	; (ef40 <usbdc_set_address+0x1c>)
    ef34:	4798      	blx	r3
}
    ef36:	bf00      	nop
    ef38:	3708      	adds	r7, #8
    ef3a:	46bd      	mov	sp, r7
    ef3c:	bd80      	pop	{r7, pc}
    ef3e:	bf00      	nop
    ef40:	000050b1 	.word	0x000050b1

0000ef44 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ef44:	b590      	push	{r4, r7, lr}
    ef46:	b087      	sub	sp, #28
    ef48:	af00      	add	r7, sp, #0
    ef4a:	4603      	mov	r3, r0
    ef4c:	460a      	mov	r2, r1
    ef4e:	80fb      	strh	r3, [r7, #6]
    ef50:	4613      	mov	r3, r2
    ef52:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ef54:	2300      	movs	r3, #0
    ef56:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ef58:	693b      	ldr	r3, [r7, #16]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d10b      	bne.n	ef76 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ef5e:	4b43      	ldr	r3, [pc, #268]	; (f06c <usbdc_set_interface+0x128>)
    ef60:	681b      	ldr	r3, [r3, #0]
    ef62:	6818      	ldr	r0, [r3, #0]
    ef64:	4b41      	ldr	r3, [pc, #260]	; (f06c <usbdc_set_interface+0x128>)
    ef66:	681b      	ldr	r3, [r3, #0]
    ef68:	6859      	ldr	r1, [r3, #4]
    ef6a:	4b40      	ldr	r3, [pc, #256]	; (f06c <usbdc_set_interface+0x128>)
    ef6c:	7edb      	ldrb	r3, [r3, #27]
    ef6e:	461a      	mov	r2, r3
    ef70:	4b3f      	ldr	r3, [pc, #252]	; (f070 <usbdc_set_interface+0x12c>)
    ef72:	4798      	blx	r3
    ef74:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    ef76:	693b      	ldr	r3, [r7, #16]
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d101      	bne.n	ef80 <usbdc_set_interface+0x3c>
		return false;
    ef7c:	2300      	movs	r3, #0
    ef7e:	e071      	b.n	f064 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    ef80:	693b      	ldr	r3, [r7, #16]
    ef82:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ef84:	6938      	ldr	r0, [r7, #16]
    ef86:	4b3b      	ldr	r3, [pc, #236]	; (f074 <usbdc_set_interface+0x130>)
    ef88:	4798      	blx	r3
    ef8a:	4603      	mov	r3, r0
    ef8c:	461a      	mov	r2, r3
    ef8e:	693b      	ldr	r3, [r7, #16]
    ef90:	4413      	add	r3, r2
    ef92:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ef94:	68bb      	ldr	r3, [r7, #8]
    ef96:	68f9      	ldr	r1, [r7, #12]
    ef98:	2204      	movs	r2, #4
    ef9a:	4618      	mov	r0, r3
    ef9c:	4b36      	ldr	r3, [pc, #216]	; (f078 <usbdc_set_interface+0x134>)
    ef9e:	4798      	blx	r3
    efa0:	6138      	str	r0, [r7, #16]
    efa2:	693b      	ldr	r3, [r7, #16]
    efa4:	2b00      	cmp	r3, #0
    efa6:	d113      	bne.n	efd0 <usbdc_set_interface+0x8c>
		return false;
    efa8:	2300      	movs	r3, #0
    efaa:	e05b      	b.n	f064 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    efac:	68bb      	ldr	r3, [r7, #8]
    efae:	4618      	mov	r0, r3
    efb0:	4b32      	ldr	r3, [pc, #200]	; (f07c <usbdc_set_interface+0x138>)
    efb2:	4798      	blx	r3
    efb4:	4603      	mov	r3, r0
    efb6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    efb8:	68bb      	ldr	r3, [r7, #8]
    efba:	68f9      	ldr	r1, [r7, #12]
    efbc:	2204      	movs	r2, #4
    efbe:	4618      	mov	r0, r3
    efc0:	4b2d      	ldr	r3, [pc, #180]	; (f078 <usbdc_set_interface+0x134>)
    efc2:	4798      	blx	r3
    efc4:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    efc6:	693b      	ldr	r3, [r7, #16]
    efc8:	2b00      	cmp	r3, #0
    efca:	d101      	bne.n	efd0 <usbdc_set_interface+0x8c>
			return false;
    efcc:	2300      	movs	r3, #0
    efce:	e049      	b.n	f064 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    efd0:	693b      	ldr	r3, [r7, #16]
    efd2:	3302      	adds	r3, #2
    efd4:	781b      	ldrb	r3, [r3, #0]
    efd6:	b29b      	uxth	r3, r3
    efd8:	88ba      	ldrh	r2, [r7, #4]
    efda:	429a      	cmp	r2, r3
    efdc:	d1e6      	bne.n	efac <usbdc_set_interface+0x68>
    efde:	693b      	ldr	r3, [r7, #16]
    efe0:	3303      	adds	r3, #3
    efe2:	781b      	ldrb	r3, [r3, #0]
    efe4:	b29b      	uxth	r3, r3
    efe6:	88fa      	ldrh	r2, [r7, #6]
    efe8:	429a      	cmp	r2, r3
    efea:	d1df      	bne.n	efac <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    efec:	693b      	ldr	r3, [r7, #16]
    efee:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    eff0:	4b1e      	ldr	r3, [pc, #120]	; (f06c <usbdc_set_interface+0x128>)
    eff2:	691b      	ldr	r3, [r3, #16]
    eff4:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    eff6:	e031      	b.n	f05c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    eff8:	697b      	ldr	r3, [r7, #20]
    effa:	685b      	ldr	r3, [r3, #4]
    effc:	f107 0208 	add.w	r2, r7, #8
    f000:	2101      	movs	r1, #1
    f002:	6978      	ldr	r0, [r7, #20]
    f004:	4798      	blx	r3
    f006:	4603      	mov	r3, r0
    f008:	2b00      	cmp	r3, #0
    f00a:	d003      	beq.n	f014 <usbdc_set_interface+0xd0>
			func = func->next;
    f00c:	697b      	ldr	r3, [r7, #20]
    f00e:	681b      	ldr	r3, [r3, #0]
    f010:	617b      	str	r3, [r7, #20]
    f012:	e023      	b.n	f05c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    f014:	697b      	ldr	r3, [r7, #20]
    f016:	685b      	ldr	r3, [r3, #4]
    f018:	f107 0208 	add.w	r2, r7, #8
    f01c:	2100      	movs	r1, #0
    f01e:	6978      	ldr	r0, [r7, #20]
    f020:	4798      	blx	r3
    f022:	4603      	mov	r3, r0
    f024:	2b00      	cmp	r3, #0
    f026:	d117      	bne.n	f058 <usbdc_set_interface+0x114>
			if (alt_set) {
    f028:	88fb      	ldrh	r3, [r7, #6]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d00c      	beq.n	f048 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    f02e:	4b0f      	ldr	r3, [pc, #60]	; (f06c <usbdc_set_interface+0x128>)
    f030:	7f5b      	ldrb	r3, [r3, #29]
    f032:	b25a      	sxtb	r2, r3
    f034:	88bb      	ldrh	r3, [r7, #4]
    f036:	2101      	movs	r1, #1
    f038:	fa01 f303 	lsl.w	r3, r1, r3
    f03c:	b25b      	sxtb	r3, r3
    f03e:	4313      	orrs	r3, r2
    f040:	b25b      	sxtb	r3, r3
    f042:	b2da      	uxtb	r2, r3
    f044:	4b09      	ldr	r3, [pc, #36]	; (f06c <usbdc_set_interface+0x128>)
    f046:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    f048:	2300      	movs	r3, #0
    f04a:	2200      	movs	r2, #0
    f04c:	2100      	movs	r1, #0
    f04e:	2000      	movs	r0, #0
    f050:	4c0b      	ldr	r4, [pc, #44]	; (f080 <usbdc_set_interface+0x13c>)
    f052:	47a0      	blx	r4
			return true;
    f054:	2301      	movs	r3, #1
    f056:	e005      	b.n	f064 <usbdc_set_interface+0x120>
		} else {
			return false;
    f058:	2300      	movs	r3, #0
    f05a:	e003      	b.n	f064 <usbdc_set_interface+0x120>
	while (NULL != func) {
    f05c:	697b      	ldr	r3, [r7, #20]
    f05e:	2b00      	cmp	r3, #0
    f060:	d1ca      	bne.n	eff8 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    f062:	2300      	movs	r3, #0
}
    f064:	4618      	mov	r0, r3
    f066:	371c      	adds	r7, #28
    f068:	46bd      	mov	sp, r7
    f06a:	bd90      	pop	{r4, r7, pc}
    f06c:	200014bc 	.word	0x200014bc
    f070:	0000f7a9 	.word	0x0000f7a9
    f074:	0000e955 	.word	0x0000e955
    f078:	0000f6e9 	.word	0x0000f6e9
    f07c:	0000e931 	.word	0x0000e931
    f080:	0000f459 	.word	0x0000f459

0000f084 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    f084:	b590      	push	{r4, r7, lr}
    f086:	b083      	sub	sp, #12
    f088:	af00      	add	r7, sp, #0
    f08a:	4603      	mov	r3, r0
    f08c:	6039      	str	r1, [r7, #0]
    f08e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f090:	683b      	ldr	r3, [r7, #0]
    f092:	785b      	ldrb	r3, [r3, #1]
    f094:	3b01      	subs	r3, #1
    f096:	2b0a      	cmp	r3, #10
    f098:	d85b      	bhi.n	f152 <usbdc_set_req+0xce>
    f09a:	a201      	add	r2, pc, #4	; (adr r2, f0a0 <usbdc_set_req+0x1c>)
    f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f0a0:	0000f11f 	.word	0x0000f11f
    f0a4:	0000f153 	.word	0x0000f153
    f0a8:	0000f12d 	.word	0x0000f12d
    f0ac:	0000f153 	.word	0x0000f153
    f0b0:	0000f0cd 	.word	0x0000f0cd
    f0b4:	0000f153 	.word	0x0000f153
    f0b8:	0000f153 	.word	0x0000f153
    f0bc:	0000f153 	.word	0x0000f153
    f0c0:	0000f0e7 	.word	0x0000f0e7
    f0c4:	0000f153 	.word	0x0000f153
    f0c8:	0000f13b 	.word	0x0000f13b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f0cc:	79f8      	ldrb	r0, [r7, #7]
    f0ce:	2301      	movs	r3, #1
    f0d0:	2200      	movs	r2, #0
    f0d2:	2100      	movs	r1, #0
    f0d4:	4c21      	ldr	r4, [pc, #132]	; (f15c <usbdc_set_req+0xd8>)
    f0d6:	47a0      	blx	r4
    f0d8:	4603      	mov	r3, r0
    f0da:	2b00      	cmp	r3, #0
    f0dc:	bf0c      	ite	eq
    f0de:	2301      	moveq	r3, #1
    f0e0:	2300      	movne	r3, #0
    f0e2:	b2db      	uxtb	r3, r3
    f0e4:	e036      	b.n	f154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    f0e6:	683b      	ldr	r3, [r7, #0]
    f0e8:	885b      	ldrh	r3, [r3, #2]
    f0ea:	b29b      	uxth	r3, r3
    f0ec:	b2db      	uxtb	r3, r3
    f0ee:	4618      	mov	r0, r3
    f0f0:	4b1b      	ldr	r3, [pc, #108]	; (f160 <usbdc_set_req+0xdc>)
    f0f2:	4798      	blx	r3
    f0f4:	4603      	mov	r3, r0
    f0f6:	f083 0301 	eor.w	r3, r3, #1
    f0fa:	b2db      	uxtb	r3, r3
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d001      	beq.n	f104 <usbdc_set_req+0x80>
			return false;
    f100:	2300      	movs	r3, #0
    f102:	e027      	b.n	f154 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f104:	79f8      	ldrb	r0, [r7, #7]
    f106:	2301      	movs	r3, #1
    f108:	2200      	movs	r2, #0
    f10a:	2100      	movs	r1, #0
    f10c:	4c13      	ldr	r4, [pc, #76]	; (f15c <usbdc_set_req+0xd8>)
    f10e:	47a0      	blx	r4
    f110:	4603      	mov	r3, r0
    f112:	2b00      	cmp	r3, #0
    f114:	bf0c      	ite	eq
    f116:	2301      	moveq	r3, #1
    f118:	2300      	movne	r3, #0
    f11a:	b2db      	uxtb	r3, r3
    f11c:	e01a      	b.n	f154 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    f11e:	79fb      	ldrb	r3, [r7, #7]
    f120:	6839      	ldr	r1, [r7, #0]
    f122:	4618      	mov	r0, r3
    f124:	4b0f      	ldr	r3, [pc, #60]	; (f164 <usbdc_set_req+0xe0>)
    f126:	4798      	blx	r3
    f128:	4603      	mov	r3, r0
    f12a:	e013      	b.n	f154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    f12c:	79fb      	ldrb	r3, [r7, #7]
    f12e:	6839      	ldr	r1, [r7, #0]
    f130:	4618      	mov	r0, r3
    f132:	4b0d      	ldr	r3, [pc, #52]	; (f168 <usbdc_set_req+0xe4>)
    f134:	4798      	blx	r3
    f136:	4603      	mov	r3, r0
    f138:	e00c      	b.n	f154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    f13a:	683b      	ldr	r3, [r7, #0]
    f13c:	885b      	ldrh	r3, [r3, #2]
    f13e:	b29a      	uxth	r2, r3
    f140:	683b      	ldr	r3, [r7, #0]
    f142:	889b      	ldrh	r3, [r3, #4]
    f144:	b29b      	uxth	r3, r3
    f146:	4619      	mov	r1, r3
    f148:	4610      	mov	r0, r2
    f14a:	4b08      	ldr	r3, [pc, #32]	; (f16c <usbdc_set_req+0xe8>)
    f14c:	4798      	blx	r3
    f14e:	4603      	mov	r3, r0
    f150:	e000      	b.n	f154 <usbdc_set_req+0xd0>
	default:
		return false;
    f152:	2300      	movs	r3, #0
	}
}
    f154:	4618      	mov	r0, r3
    f156:	370c      	adds	r7, #12
    f158:	46bd      	mov	sp, r7
    f15a:	bd90      	pop	{r4, r7, pc}
    f15c:	0000f459 	.word	0x0000f459
    f160:	0000ee39 	.word	0x0000ee39
    f164:	0000ed55 	.word	0x0000ed55
    f168:	0000edad 	.word	0x0000edad
    f16c:	0000ef45 	.word	0x0000ef45

0000f170 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    f170:	b580      	push	{r7, lr}
    f172:	b082      	sub	sp, #8
    f174:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    f176:	4b0a      	ldr	r3, [pc, #40]	; (f1a0 <usbdc_sof_notify+0x30>)
    f178:	685b      	ldr	r3, [r3, #4]
    f17a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    f17c:	e009      	b.n	f192 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    f17e:	687b      	ldr	r3, [r7, #4]
    f180:	685b      	ldr	r3, [r3, #4]
    f182:	2b00      	cmp	r3, #0
    f184:	d002      	beq.n	f18c <usbdc_sof_notify+0x1c>
			sof->cb();
    f186:	687b      	ldr	r3, [r7, #4]
    f188:	685b      	ldr	r3, [r3, #4]
    f18a:	4798      	blx	r3
		}
		sof = sof->next;
    f18c:	687b      	ldr	r3, [r7, #4]
    f18e:	681b      	ldr	r3, [r3, #0]
    f190:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	2b00      	cmp	r3, #0
    f196:	d1f2      	bne.n	f17e <usbdc_sof_notify+0xe>
	}
}
    f198:	bf00      	nop
    f19a:	3708      	adds	r7, #8
    f19c:	46bd      	mov	sp, r7
    f19e:	bd80      	pop	{r7, pc}
    f1a0:	200014bc 	.word	0x200014bc

0000f1a4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    f1a4:	b580      	push	{r7, lr}
    f1a6:	b084      	sub	sp, #16
    f1a8:	af00      	add	r7, sp, #0
    f1aa:	4603      	mov	r3, r0
    f1ac:	6039      	str	r1, [r7, #0]
    f1ae:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    f1b0:	4b0b      	ldr	r3, [pc, #44]	; (f1e0 <usbdc_change_notify+0x3c>)
    f1b2:	68db      	ldr	r3, [r3, #12]
    f1b4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    f1b6:	e00c      	b.n	f1d2 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    f1b8:	68fb      	ldr	r3, [r7, #12]
    f1ba:	685b      	ldr	r3, [r3, #4]
    f1bc:	2b00      	cmp	r3, #0
    f1be:	d005      	beq.n	f1cc <usbdc_change_notify+0x28>
			cg->cb(change, value);
    f1c0:	68fb      	ldr	r3, [r7, #12]
    f1c2:	685b      	ldr	r3, [r3, #4]
    f1c4:	79fa      	ldrb	r2, [r7, #7]
    f1c6:	6839      	ldr	r1, [r7, #0]
    f1c8:	4610      	mov	r0, r2
    f1ca:	4798      	blx	r3
		}
		cg = cg->next;
    f1cc:	68fb      	ldr	r3, [r7, #12]
    f1ce:	681b      	ldr	r3, [r3, #0]
    f1d0:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    f1d2:	68fb      	ldr	r3, [r7, #12]
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d1ef      	bne.n	f1b8 <usbdc_change_notify+0x14>
	}
}
    f1d8:	bf00      	nop
    f1da:	3710      	adds	r7, #16
    f1dc:	46bd      	mov	sp, r7
    f1de:	bd80      	pop	{r7, pc}
    f1e0:	200014bc 	.word	0x200014bc

0000f1e4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f1e4:	b580      	push	{r7, lr}
    f1e6:	b084      	sub	sp, #16
    f1e8:	af00      	add	r7, sp, #0
    f1ea:	4603      	mov	r3, r0
    f1ec:	6039      	str	r1, [r7, #0]
    f1ee:	71fb      	strb	r3, [r7, #7]
    f1f0:	4613      	mov	r3, r2
    f1f2:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    f1f4:	4b12      	ldr	r3, [pc, #72]	; (f240 <usbdc_request_handler+0x5c>)
    f1f6:	689b      	ldr	r3, [r3, #8]
    f1f8:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    f1fa:	e019      	b.n	f230 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    f1fc:	68fb      	ldr	r3, [r7, #12]
    f1fe:	685b      	ldr	r3, [r3, #4]
    f200:	2b00      	cmp	r3, #0
    f202:	d012      	beq.n	f22a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    f204:	68fb      	ldr	r3, [r7, #12]
    f206:	685b      	ldr	r3, [r3, #4]
    f208:	79ba      	ldrb	r2, [r7, #6]
    f20a:	79f8      	ldrb	r0, [r7, #7]
    f20c:	6839      	ldr	r1, [r7, #0]
    f20e:	4798      	blx	r3
    f210:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    f212:	68bb      	ldr	r3, [r7, #8]
    f214:	2b00      	cmp	r3, #0
    f216:	d101      	bne.n	f21c <usbdc_request_handler+0x38>
				return true;
    f218:	2301      	movs	r3, #1
    f21a:	e00d      	b.n	f238 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    f21c:	68bb      	ldr	r3, [r7, #8]
    f21e:	f113 0f0a 	cmn.w	r3, #10
    f222:	d002      	beq.n	f22a <usbdc_request_handler+0x46>
				return -1;
    f224:	f04f 33ff 	mov.w	r3, #4294967295
    f228:	e006      	b.n	f238 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    f22a:	68fb      	ldr	r3, [r7, #12]
    f22c:	681b      	ldr	r3, [r3, #0]
    f22e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    f230:	68fb      	ldr	r3, [r7, #12]
    f232:	2b00      	cmp	r3, #0
    f234:	d1e2      	bne.n	f1fc <usbdc_request_handler+0x18>
	}
	return false;
    f236:	2300      	movs	r3, #0
}
    f238:	4618      	mov	r0, r3
    f23a:	3710      	adds	r7, #16
    f23c:	46bd      	mov	sp, r7
    f23e:	bd80      	pop	{r7, pc}
    f240:	200014bc 	.word	0x200014bc

0000f244 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    f244:	b580      	push	{r7, lr}
    f246:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    f248:	4b01      	ldr	r3, [pc, #4]	; (f250 <usbd_sof_cb+0xc>)
    f24a:	4798      	blx	r3
}
    f24c:	bf00      	nop
    f24e:	bd80      	pop	{r7, pc}
    f250:	0000f171 	.word	0x0000f171

0000f254 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    f254:	b580      	push	{r7, lr}
    f256:	b082      	sub	sp, #8
    f258:	af00      	add	r7, sp, #0
    f25a:	4603      	mov	r3, r0
    f25c:	6039      	str	r1, [r7, #0]
    f25e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    f260:	79fb      	ldrb	r3, [r7, #7]
    f262:	2200      	movs	r2, #0
    f264:	6839      	ldr	r1, [r7, #0]
    f266:	4618      	mov	r0, r3
    f268:	4b14      	ldr	r3, [pc, #80]	; (f2bc <usbdc_cb_ctl_req+0x68>)
    f26a:	4798      	blx	r3
    f26c:	4603      	mov	r3, r0
    f26e:	f1b3 3fff 	cmp.w	r3, #4294967295
    f272:	d00b      	beq.n	f28c <usbdc_cb_ctl_req+0x38>
    f274:	2b01      	cmp	r3, #1
    f276:	d007      	beq.n	f288 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    f278:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f27a:	683b      	ldr	r3, [r7, #0]
    f27c:	781b      	ldrb	r3, [r3, #0]
    f27e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f282:	2b00      	cmp	r3, #0
    f284:	d007      	beq.n	f296 <usbdc_cb_ctl_req+0x42>
    f286:	e003      	b.n	f290 <usbdc_cb_ctl_req+0x3c>
		return true;
    f288:	2301      	movs	r3, #1
    f28a:	e013      	b.n	f2b4 <usbdc_cb_ctl_req+0x60>
		return false;
    f28c:	2300      	movs	r3, #0
    f28e:	e011      	b.n	f2b4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f290:	2b80      	cmp	r3, #128	; 0x80
    f292:	d007      	beq.n	f2a4 <usbdc_cb_ctl_req+0x50>
    f294:	e00d      	b.n	f2b2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    f296:	79fb      	ldrb	r3, [r7, #7]
    f298:	6839      	ldr	r1, [r7, #0]
    f29a:	4618      	mov	r0, r3
    f29c:	4b08      	ldr	r3, [pc, #32]	; (f2c0 <usbdc_cb_ctl_req+0x6c>)
    f29e:	4798      	blx	r3
    f2a0:	4603      	mov	r3, r0
    f2a2:	e007      	b.n	f2b4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    f2a4:	79fb      	ldrb	r3, [r7, #7]
    f2a6:	6839      	ldr	r1, [r7, #0]
    f2a8:	4618      	mov	r0, r3
    f2aa:	4b06      	ldr	r3, [pc, #24]	; (f2c4 <usbdc_cb_ctl_req+0x70>)
    f2ac:	4798      	blx	r3
    f2ae:	4603      	mov	r3, r0
    f2b0:	e000      	b.n	f2b4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    f2b2:	2300      	movs	r3, #0
	}
}
    f2b4:	4618      	mov	r0, r3
    f2b6:	3708      	adds	r7, #8
    f2b8:	46bd      	mov	sp, r7
    f2ba:	bd80      	pop	{r7, pc}
    f2bc:	0000f1e5 	.word	0x0000f1e5
    f2c0:	0000f085 	.word	0x0000f085
    f2c4:	0000ecad 	.word	0x0000ecad

0000f2c8 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    f2c8:	b580      	push	{r7, lr}
    f2ca:	b082      	sub	sp, #8
    f2cc:	af00      	add	r7, sp, #0
    f2ce:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    f2d0:	687b      	ldr	r3, [r7, #4]
    f2d2:	781b      	ldrb	r3, [r3, #0]
    f2d4:	2b00      	cmp	r3, #0
    f2d6:	d135      	bne.n	f344 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    f2d8:	687b      	ldr	r3, [r7, #4]
    f2da:	785b      	ldrb	r3, [r3, #1]
    f2dc:	2b05      	cmp	r3, #5
    f2de:	d019      	beq.n	f314 <usbdc_ctrl_status_end+0x4c>
    f2e0:	2b09      	cmp	r3, #9
    f2e2:	d000      	beq.n	f2e6 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    f2e4:	e02f      	b.n	f346 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    f2e6:	687b      	ldr	r3, [r7, #4]
    f2e8:	885b      	ldrh	r3, [r3, #2]
    f2ea:	b29b      	uxth	r3, r3
    f2ec:	b2da      	uxtb	r2, r3
    f2ee:	4b17      	ldr	r3, [pc, #92]	; (f34c <usbdc_ctrl_status_end+0x84>)
    f2f0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    f2f2:	687b      	ldr	r3, [r7, #4]
    f2f4:	885b      	ldrh	r3, [r3, #2]
    f2f6:	b29b      	uxth	r3, r3
    f2f8:	2b00      	cmp	r3, #0
    f2fa:	d001      	beq.n	f300 <usbdc_ctrl_status_end+0x38>
    f2fc:	2204      	movs	r2, #4
    f2fe:	e000      	b.n	f302 <usbdc_ctrl_status_end+0x3a>
    f300:	2203      	movs	r2, #3
    f302:	4b12      	ldr	r3, [pc, #72]	; (f34c <usbdc_ctrl_status_end+0x84>)
    f304:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f306:	4b11      	ldr	r3, [pc, #68]	; (f34c <usbdc_ctrl_status_end+0x84>)
    f308:	7e9b      	ldrb	r3, [r3, #26]
    f30a:	4619      	mov	r1, r3
    f30c:	2001      	movs	r0, #1
    f30e:	4b10      	ldr	r3, [pc, #64]	; (f350 <usbdc_ctrl_status_end+0x88>)
    f310:	4798      	blx	r3
		break;
    f312:	e018      	b.n	f346 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    f314:	687b      	ldr	r3, [r7, #4]
    f316:	885b      	ldrh	r3, [r3, #2]
    f318:	b29b      	uxth	r3, r3
    f31a:	b2db      	uxtb	r3, r3
    f31c:	4618      	mov	r0, r3
    f31e:	4b0d      	ldr	r3, [pc, #52]	; (f354 <usbdc_ctrl_status_end+0x8c>)
    f320:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	885b      	ldrh	r3, [r3, #2]
    f326:	b29b      	uxth	r3, r3
    f328:	2b00      	cmp	r3, #0
    f32a:	d001      	beq.n	f330 <usbdc_ctrl_status_end+0x68>
    f32c:	2203      	movs	r2, #3
    f32e:	e000      	b.n	f332 <usbdc_ctrl_status_end+0x6a>
    f330:	2202      	movs	r2, #2
    f332:	4b06      	ldr	r3, [pc, #24]	; (f34c <usbdc_ctrl_status_end+0x84>)
    f334:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f336:	4b05      	ldr	r3, [pc, #20]	; (f34c <usbdc_ctrl_status_end+0x84>)
    f338:	7e9b      	ldrb	r3, [r3, #26]
    f33a:	4619      	mov	r1, r3
    f33c:	2001      	movs	r0, #1
    f33e:	4b04      	ldr	r3, [pc, #16]	; (f350 <usbdc_ctrl_status_end+0x88>)
    f340:	4798      	blx	r3
		break;
    f342:	e000      	b.n	f346 <usbdc_ctrl_status_end+0x7e>
		return;
    f344:	bf00      	nop
	}
}
    f346:	3708      	adds	r7, #8
    f348:	46bd      	mov	sp, r7
    f34a:	bd80      	pop	{r7, pc}
    f34c:	200014bc 	.word	0x200014bc
    f350:	0000f1a5 	.word	0x0000f1a5
    f354:	0000ef25 	.word	0x0000ef25

0000f358 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    f358:	b580      	push	{r7, lr}
    f35a:	b082      	sub	sp, #8
    f35c:	af00      	add	r7, sp, #0
    f35e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    f360:	2201      	movs	r2, #1
    f362:	6879      	ldr	r1, [r7, #4]
    f364:	2000      	movs	r0, #0
    f366:	4b03      	ldr	r3, [pc, #12]	; (f374 <usbdc_ctrl_data_end+0x1c>)
    f368:	4798      	blx	r3
	return false;
    f36a:	2300      	movs	r3, #0
}
    f36c:	4618      	mov	r0, r3
    f36e:	3708      	adds	r7, #8
    f370:	46bd      	mov	sp, r7
    f372:	bd80      	pop	{r7, pc}
    f374:	0000f1e5 	.word	0x0000f1e5

0000f378 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    f378:	b580      	push	{r7, lr}
    f37a:	b082      	sub	sp, #8
    f37c:	af00      	add	r7, sp, #0
    f37e:	4603      	mov	r3, r0
    f380:	603a      	str	r2, [r7, #0]
    f382:	71fb      	strb	r3, [r7, #7]
    f384:	460b      	mov	r3, r1
    f386:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    f388:	79bb      	ldrb	r3, [r7, #6]
    f38a:	2b00      	cmp	r3, #0
    f38c:	d002      	beq.n	f394 <usbdc_cb_ctl_done+0x1c>
    f38e:	2b01      	cmp	r3, #1
    f390:	d004      	beq.n	f39c <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    f392:	e008      	b.n	f3a6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    f394:	6838      	ldr	r0, [r7, #0]
    f396:	4b06      	ldr	r3, [pc, #24]	; (f3b0 <usbdc_cb_ctl_done+0x38>)
    f398:	4798      	blx	r3
		break;
    f39a:	e004      	b.n	f3a6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    f39c:	6838      	ldr	r0, [r7, #0]
    f39e:	4b05      	ldr	r3, [pc, #20]	; (f3b4 <usbdc_cb_ctl_done+0x3c>)
    f3a0:	4798      	blx	r3
    f3a2:	4603      	mov	r3, r0
    f3a4:	e000      	b.n	f3a8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    f3a6:	2300      	movs	r3, #0
}
    f3a8:	4618      	mov	r0, r3
    f3aa:	3708      	adds	r7, #8
    f3ac:	46bd      	mov	sp, r7
    f3ae:	bd80      	pop	{r7, pc}
    f3b0:	0000f2c9 	.word	0x0000f2c9
    f3b4:	0000f359 	.word	0x0000f359

0000f3b8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    f3b8:	b580      	push	{r7, lr}
    f3ba:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    f3bc:	4b10      	ldr	r3, [pc, #64]	; (f400 <usbdc_reset+0x48>)
    f3be:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    f3c0:	4b10      	ldr	r3, [pc, #64]	; (f404 <usbdc_reset+0x4c>)
    f3c2:	2202      	movs	r2, #2
    f3c4:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    f3c6:	4b0f      	ldr	r3, [pc, #60]	; (f404 <usbdc_reset+0x4c>)
    f3c8:	2200      	movs	r2, #0
    f3ca:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    f3cc:	4b0d      	ldr	r3, [pc, #52]	; (f404 <usbdc_reset+0x4c>)
    f3ce:	2200      	movs	r2, #0
    f3d0:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    f3d2:	2000      	movs	r0, #0
    f3d4:	4b0c      	ldr	r3, [pc, #48]	; (f408 <usbdc_reset+0x50>)
    f3d6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    f3d8:	4b0a      	ldr	r3, [pc, #40]	; (f404 <usbdc_reset+0x4c>)
    f3da:	7f1b      	ldrb	r3, [r3, #28]
    f3dc:	4618      	mov	r0, r3
    f3de:	4b0b      	ldr	r3, [pc, #44]	; (f40c <usbdc_reset+0x54>)
    f3e0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    f3e2:	4a0b      	ldr	r2, [pc, #44]	; (f410 <usbdc_reset+0x58>)
    f3e4:	2100      	movs	r1, #0
    f3e6:	2000      	movs	r0, #0
    f3e8:	4b0a      	ldr	r3, [pc, #40]	; (f414 <usbdc_reset+0x5c>)
    f3ea:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    f3ec:	4a0a      	ldr	r2, [pc, #40]	; (f418 <usbdc_reset+0x60>)
    f3ee:	2102      	movs	r1, #2
    f3f0:	2000      	movs	r0, #0
    f3f2:	4b08      	ldr	r3, [pc, #32]	; (f414 <usbdc_reset+0x5c>)
    f3f4:	4798      	blx	r3
	usb_d_ep_enable(0);
    f3f6:	2000      	movs	r0, #0
    f3f8:	4b08      	ldr	r3, [pc, #32]	; (f41c <usbdc_reset+0x64>)
    f3fa:	4798      	blx	r3
}
    f3fc:	bf00      	nop
    f3fe:	bd80      	pop	{r7, pc}
    f400:	0000ee05 	.word	0x0000ee05
    f404:	200014bc 	.word	0x200014bc
    f408:	00005195 	.word	0x00005195
    f40c:	000050d1 	.word	0x000050d1
    f410:	0000f255 	.word	0x0000f255
    f414:	000054e9 	.word	0x000054e9
    f418:	0000f379 	.word	0x0000f379
    f41c:	000051e5 	.word	0x000051e5

0000f420 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    f420:	b580      	push	{r7, lr}
    f422:	b082      	sub	sp, #8
    f424:	af00      	add	r7, sp, #0
    f426:	4603      	mov	r3, r0
    f428:	6039      	str	r1, [r7, #0]
    f42a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    f42c:	79fb      	ldrb	r3, [r7, #7]
    f42e:	2b00      	cmp	r3, #0
    f430:	d002      	beq.n	f438 <usbd_event_cb+0x18>
    f432:	2b01      	cmp	r3, #1
    f434:	d005      	beq.n	f442 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    f436:	e007      	b.n	f448 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    f438:	6839      	ldr	r1, [r7, #0]
    f43a:	2000      	movs	r0, #0
    f43c:	4b04      	ldr	r3, [pc, #16]	; (f450 <usbd_event_cb+0x30>)
    f43e:	4798      	blx	r3
		break;
    f440:	e002      	b.n	f448 <usbd_event_cb+0x28>
		usbdc_reset();
    f442:	4b04      	ldr	r3, [pc, #16]	; (f454 <usbd_event_cb+0x34>)
    f444:	4798      	blx	r3
		break;
    f446:	bf00      	nop
	}
}
    f448:	bf00      	nop
    f44a:	3708      	adds	r7, #8
    f44c:	46bd      	mov	sp, r7
    f44e:	bd80      	pop	{r7, pc}
    f450:	0000f1a5 	.word	0x0000f1a5
    f454:	0000f3b9 	.word	0x0000f3b9

0000f458 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    f458:	b580      	push	{r7, lr}
    f45a:	b088      	sub	sp, #32
    f45c:	af00      	add	r7, sp, #0
    f45e:	60b9      	str	r1, [r7, #8]
    f460:	607a      	str	r2, [r7, #4]
    f462:	461a      	mov	r2, r3
    f464:	4603      	mov	r3, r0
    f466:	73fb      	strb	r3, [r7, #15]
    f468:	4613      	mov	r3, r2
    f46a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    f46c:	68bb      	ldr	r3, [r7, #8]
    f46e:	617b      	str	r3, [r7, #20]
    f470:	687b      	ldr	r3, [r7, #4]
    f472:	61bb      	str	r3, [r7, #24]
    f474:	7bfb      	ldrb	r3, [r7, #15]
    f476:	773b      	strb	r3, [r7, #28]
    f478:	7bbb      	ldrb	r3, [r7, #14]
    f47a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    f47c:	f107 0314 	add.w	r3, r7, #20
    f480:	4618      	mov	r0, r3
    f482:	4b03      	ldr	r3, [pc, #12]	; (f490 <usbdc_xfer+0x38>)
    f484:	4798      	blx	r3
    f486:	4603      	mov	r3, r0
}
    f488:	4618      	mov	r0, r3
    f48a:	3720      	adds	r7, #32
    f48c:	46bd      	mov	sp, r7
    f48e:	bd80      	pop	{r7, pc}
    f490:	00005255 	.word	0x00005255

0000f494 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    f494:	b580      	push	{r7, lr}
    f496:	b082      	sub	sp, #8
    f498:	af00      	add	r7, sp, #0
    f49a:	4603      	mov	r3, r0
    f49c:	6039      	str	r1, [r7, #0]
    f49e:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    f4a0:	79fb      	ldrb	r3, [r7, #7]
    f4a2:	2b01      	cmp	r3, #1
    f4a4:	d009      	beq.n	f4ba <usbdc_register_handler+0x26>
    f4a6:	2b02      	cmp	r3, #2
    f4a8:	d00c      	beq.n	f4c4 <usbdc_register_handler+0x30>
    f4aa:	2b00      	cmp	r3, #0
    f4ac:	d000      	beq.n	f4b0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    f4ae:	e00e      	b.n	f4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    f4b0:	6839      	ldr	r1, [r7, #0]
    f4b2:	4809      	ldr	r0, [pc, #36]	; (f4d8 <usbdc_register_handler+0x44>)
    f4b4:	4b09      	ldr	r3, [pc, #36]	; (f4dc <usbdc_register_handler+0x48>)
    f4b6:	4798      	blx	r3
		break;
    f4b8:	e009      	b.n	f4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    f4ba:	6839      	ldr	r1, [r7, #0]
    f4bc:	4808      	ldr	r0, [pc, #32]	; (f4e0 <usbdc_register_handler+0x4c>)
    f4be:	4b07      	ldr	r3, [pc, #28]	; (f4dc <usbdc_register_handler+0x48>)
    f4c0:	4798      	blx	r3
		break;
    f4c2:	e004      	b.n	f4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    f4c4:	6839      	ldr	r1, [r7, #0]
    f4c6:	4807      	ldr	r0, [pc, #28]	; (f4e4 <usbdc_register_handler+0x50>)
    f4c8:	4b04      	ldr	r3, [pc, #16]	; (f4dc <usbdc_register_handler+0x48>)
    f4ca:	4798      	blx	r3
		break;
    f4cc:	bf00      	nop
	}
}
    f4ce:	bf00      	nop
    f4d0:	3708      	adds	r7, #8
    f4d2:	46bd      	mov	sp, r7
    f4d4:	bd80      	pop	{r7, pc}
    f4d6:	bf00      	nop
    f4d8:	200014c0 	.word	0x200014c0
    f4dc:	00005641 	.word	0x00005641
    f4e0:	200014c4 	.word	0x200014c4
    f4e4:	200014c8 	.word	0x200014c8

0000f4e8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    f4e8:	b580      	push	{r7, lr}
    f4ea:	b084      	sub	sp, #16
    f4ec:	af00      	add	r7, sp, #0
    f4ee:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    f4f0:	687b      	ldr	r3, [r7, #4]
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	bf14      	ite	ne
    f4f6:	2301      	movne	r3, #1
    f4f8:	2300      	moveq	r3, #0
    f4fa:	b2db      	uxtb	r3, r3
    f4fc:	f240 3255 	movw	r2, #853	; 0x355
    f500:	4910      	ldr	r1, [pc, #64]	; (f544 <usbdc_init+0x5c>)
    f502:	4618      	mov	r0, r3
    f504:	4b10      	ldr	r3, [pc, #64]	; (f548 <usbdc_init+0x60>)
    f506:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    f508:	4b10      	ldr	r3, [pc, #64]	; (f54c <usbdc_init+0x64>)
    f50a:	4798      	blx	r3
    f50c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    f50e:	68fb      	ldr	r3, [r7, #12]
    f510:	2b00      	cmp	r3, #0
    f512:	da01      	bge.n	f518 <usbdc_init+0x30>
		return rc;
    f514:	68fb      	ldr	r3, [r7, #12]
    f516:	e010      	b.n	f53a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    f518:	2220      	movs	r2, #32
    f51a:	2100      	movs	r1, #0
    f51c:	480c      	ldr	r0, [pc, #48]	; (f550 <usbdc_init+0x68>)
    f51e:	4b0d      	ldr	r3, [pc, #52]	; (f554 <usbdc_init+0x6c>)
    f520:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    f522:	4a0b      	ldr	r2, [pc, #44]	; (f550 <usbdc_init+0x68>)
    f524:	687b      	ldr	r3, [r7, #4]
    f526:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    f528:	490b      	ldr	r1, [pc, #44]	; (f558 <usbdc_init+0x70>)
    f52a:	2000      	movs	r0, #0
    f52c:	4b0b      	ldr	r3, [pc, #44]	; (f55c <usbdc_init+0x74>)
    f52e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    f530:	490b      	ldr	r1, [pc, #44]	; (f560 <usbdc_init+0x78>)
    f532:	2001      	movs	r0, #1
    f534:	4b09      	ldr	r3, [pc, #36]	; (f55c <usbdc_init+0x74>)
    f536:	4798      	blx	r3

	return 0;
    f538:	2300      	movs	r3, #0
}
    f53a:	4618      	mov	r0, r3
    f53c:	3710      	adds	r7, #16
    f53e:	46bd      	mov	sp, r7
    f540:	bd80      	pop	{r7, pc}
    f542:	bf00      	nop
    f544:	00019b90 	.word	0x00019b90
    f548:	00005565 	.word	0x00005565
    f54c:	00004fbd 	.word	0x00004fbd
    f550:	200014bc 	.word	0x200014bc
    f554:	000192dd 	.word	0x000192dd
    f558:	0000f245 	.word	0x0000f245
    f55c:	00005069 	.word	0x00005069
    f560:	0000f421 	.word	0x0000f421

0000f564 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    f564:	b580      	push	{r7, lr}
    f566:	b082      	sub	sp, #8
    f568:	af00      	add	r7, sp, #0
    f56a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    f56c:	6879      	ldr	r1, [r7, #4]
    f56e:	4803      	ldr	r0, [pc, #12]	; (f57c <usbdc_register_function+0x18>)
    f570:	4b03      	ldr	r3, [pc, #12]	; (f580 <usbdc_register_function+0x1c>)
    f572:	4798      	blx	r3
}
    f574:	bf00      	nop
    f576:	3708      	adds	r7, #8
    f578:	46bd      	mov	sp, r7
    f57a:	bd80      	pop	{r7, pc}
    f57c:	200014cc 	.word	0x200014cc
    f580:	00005641 	.word	0x00005641

0000f584 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    f584:	b580      	push	{r7, lr}
    f586:	b082      	sub	sp, #8
    f588:	af00      	add	r7, sp, #0
    f58a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    f58c:	4b0f      	ldr	r3, [pc, #60]	; (f5cc <usbdc_start+0x48>)
    f58e:	7e9b      	ldrb	r3, [r3, #26]
    f590:	2b00      	cmp	r3, #0
    f592:	d002      	beq.n	f59a <usbdc_start+0x16>
		return ERR_BUSY;
    f594:	f06f 0303 	mvn.w	r3, #3
    f598:	e013      	b.n	f5c2 <usbdc_start+0x3e>
	}

	if (desces) {
    f59a:	687b      	ldr	r3, [r7, #4]
    f59c:	2b00      	cmp	r3, #0
    f59e:	d00e      	beq.n	f5be <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    f5a0:	4a0a      	ldr	r2, [pc, #40]	; (f5cc <usbdc_start+0x48>)
    f5a2:	687b      	ldr	r3, [r7, #4]
    f5a4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    f5a6:	687b      	ldr	r3, [r7, #4]
    f5a8:	681b      	ldr	r3, [r3, #0]
    f5aa:	79da      	ldrb	r2, [r3, #7]
    f5ac:	4b07      	ldr	r3, [pc, #28]	; (f5cc <usbdc_start+0x48>)
    f5ae:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    f5b0:	4b06      	ldr	r3, [pc, #24]	; (f5cc <usbdc_start+0x48>)
    f5b2:	2201      	movs	r2, #1
    f5b4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    f5b6:	4b06      	ldr	r3, [pc, #24]	; (f5d0 <usbdc_start+0x4c>)
    f5b8:	4798      	blx	r3
	return ERR_NONE;
    f5ba:	2300      	movs	r3, #0
    f5bc:	e001      	b.n	f5c2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    f5be:	f06f 0308 	mvn.w	r3, #8
}
    f5c2:	4618      	mov	r0, r3
    f5c4:	3708      	adds	r7, #8
    f5c6:	46bd      	mov	sp, r7
    f5c8:	bd80      	pop	{r7, pc}
    f5ca:	bf00      	nop
    f5cc:	200014bc 	.word	0x200014bc
    f5d0:	0000508d 	.word	0x0000508d

0000f5d4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    f5d4:	b580      	push	{r7, lr}
    f5d6:	af00      	add	r7, sp, #0
	usb_d_attach();
    f5d8:	4b01      	ldr	r3, [pc, #4]	; (f5e0 <usbdc_attach+0xc>)
    f5da:	4798      	blx	r3
}
    f5dc:	bf00      	nop
    f5de:	bd80      	pop	{r7, pc}
    f5e0:	000050a1 	.word	0x000050a1

0000f5e4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    f5e4:	b480      	push	{r7}
    f5e6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    f5e8:	4b03      	ldr	r3, [pc, #12]	; (f5f8 <usbdc_get_ctrl_buffer+0x14>)
    f5ea:	695b      	ldr	r3, [r3, #20]
}
    f5ec:	4618      	mov	r0, r3
    f5ee:	46bd      	mov	sp, r7
    f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    f5f4:	4770      	bx	lr
    f5f6:	bf00      	nop
    f5f8:	200014bc 	.word	0x200014bc

0000f5fc <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    f5fc:	b480      	push	{r7}
    f5fe:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    f600:	4b07      	ldr	r3, [pc, #28]	; (f620 <usbdc_get_state+0x24>)
    f602:	7e9b      	ldrb	r3, [r3, #26]
    f604:	f003 0310 	and.w	r3, r3, #16
    f608:	2b00      	cmp	r3, #0
    f60a:	d001      	beq.n	f610 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    f60c:	2310      	movs	r3, #16
    f60e:	e001      	b.n	f614 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    f610:	4b03      	ldr	r3, [pc, #12]	; (f620 <usbdc_get_state+0x24>)
    f612:	7e9b      	ldrb	r3, [r3, #26]
}
    f614:	4618      	mov	r0, r3
    f616:	46bd      	mov	sp, r7
    f618:	f85d 7b04 	ldr.w	r7, [sp], #4
    f61c:	4770      	bx	lr
    f61e:	bf00      	nop
    f620:	200014bc 	.word	0x200014bc

0000f624 <usb_get_u16>:
{
    f624:	b480      	push	{r7}
    f626:	b083      	sub	sp, #12
    f628:	af00      	add	r7, sp, #0
    f62a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f62c:	687b      	ldr	r3, [r7, #4]
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	b29a      	uxth	r2, r3
    f632:	687b      	ldr	r3, [r7, #4]
    f634:	3301      	adds	r3, #1
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	b29b      	uxth	r3, r3
    f63a:	021b      	lsls	r3, r3, #8
    f63c:	b29b      	uxth	r3, r3
    f63e:	4413      	add	r3, r2
    f640:	b29b      	uxth	r3, r3
}
    f642:	4618      	mov	r0, r3
    f644:	370c      	adds	r7, #12
    f646:	46bd      	mov	sp, r7
    f648:	f85d 7b04 	ldr.w	r7, [sp], #4
    f64c:	4770      	bx	lr

0000f64e <usb_desc_len>:
{
    f64e:	b480      	push	{r7}
    f650:	b083      	sub	sp, #12
    f652:	af00      	add	r7, sp, #0
    f654:	6078      	str	r0, [r7, #4]
	return desc[0];
    f656:	687b      	ldr	r3, [r7, #4]
    f658:	781b      	ldrb	r3, [r3, #0]
}
    f65a:	4618      	mov	r0, r3
    f65c:	370c      	adds	r7, #12
    f65e:	46bd      	mov	sp, r7
    f660:	f85d 7b04 	ldr.w	r7, [sp], #4
    f664:	4770      	bx	lr

0000f666 <usb_desc_type>:
{
    f666:	b480      	push	{r7}
    f668:	b083      	sub	sp, #12
    f66a:	af00      	add	r7, sp, #0
    f66c:	6078      	str	r0, [r7, #4]
	return desc[1];
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	3301      	adds	r3, #1
    f672:	781b      	ldrb	r3, [r3, #0]
}
    f674:	4618      	mov	r0, r3
    f676:	370c      	adds	r7, #12
    f678:	46bd      	mov	sp, r7
    f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f67e:	4770      	bx	lr

0000f680 <usb_desc_next>:
{
    f680:	b580      	push	{r7, lr}
    f682:	b082      	sub	sp, #8
    f684:	af00      	add	r7, sp, #0
    f686:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f688:	6878      	ldr	r0, [r7, #4]
    f68a:	4b05      	ldr	r3, [pc, #20]	; (f6a0 <usb_desc_next+0x20>)
    f68c:	4798      	blx	r3
    f68e:	4603      	mov	r3, r0
    f690:	461a      	mov	r2, r3
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	4413      	add	r3, r2
}
    f696:	4618      	mov	r0, r3
    f698:	3708      	adds	r7, #8
    f69a:	46bd      	mov	sp, r7
    f69c:	bd80      	pop	{r7, pc}
    f69e:	bf00      	nop
    f6a0:	0000f64f 	.word	0x0000f64f

0000f6a4 <usb_cfg_desc_total_len>:
{
    f6a4:	b580      	push	{r7, lr}
    f6a6:	b082      	sub	sp, #8
    f6a8:	af00      	add	r7, sp, #0
    f6aa:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f6ac:	687b      	ldr	r3, [r7, #4]
    f6ae:	3302      	adds	r3, #2
    f6b0:	4618      	mov	r0, r3
    f6b2:	4b03      	ldr	r3, [pc, #12]	; (f6c0 <usb_cfg_desc_total_len+0x1c>)
    f6b4:	4798      	blx	r3
    f6b6:	4603      	mov	r3, r0
}
    f6b8:	4618      	mov	r0, r3
    f6ba:	3708      	adds	r7, #8
    f6bc:	46bd      	mov	sp, r7
    f6be:	bd80      	pop	{r7, pc}
    f6c0:	0000f625 	.word	0x0000f625

0000f6c4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    f6c4:	b580      	push	{r7, lr}
    f6c6:	b082      	sub	sp, #8
    f6c8:	af00      	add	r7, sp, #0
    f6ca:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    f6cc:	6878      	ldr	r0, [r7, #4]
    f6ce:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <usb_cfg_desc_next+0x20>)
    f6d0:	4798      	blx	r3
    f6d2:	4603      	mov	r3, r0
    f6d4:	461a      	mov	r2, r3
    f6d6:	687b      	ldr	r3, [r7, #4]
    f6d8:	4413      	add	r3, r2
}
    f6da:	4618      	mov	r0, r3
    f6dc:	3708      	adds	r7, #8
    f6de:	46bd      	mov	sp, r7
    f6e0:	bd80      	pop	{r7, pc}
    f6e2:	bf00      	nop
    f6e4:	0000f6a5 	.word	0x0000f6a5

0000f6e8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    f6e8:	b580      	push	{r7, lr}
    f6ea:	b084      	sub	sp, #16
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	60f8      	str	r0, [r7, #12]
    f6f0:	60b9      	str	r1, [r7, #8]
    f6f2:	4613      	mov	r3, r2
    f6f4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f6f6:	e015      	b.n	f724 <usb_find_desc+0x3c>
		_desc_len_check();
    f6f8:	68f8      	ldr	r0, [r7, #12]
    f6fa:	4b0f      	ldr	r3, [pc, #60]	; (f738 <usb_find_desc+0x50>)
    f6fc:	4798      	blx	r3
    f6fe:	4603      	mov	r3, r0
    f700:	2b01      	cmp	r3, #1
    f702:	d801      	bhi.n	f708 <usb_find_desc+0x20>
    f704:	2300      	movs	r3, #0
    f706:	e012      	b.n	f72e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    f708:	68f8      	ldr	r0, [r7, #12]
    f70a:	4b0c      	ldr	r3, [pc, #48]	; (f73c <usb_find_desc+0x54>)
    f70c:	4798      	blx	r3
    f70e:	4603      	mov	r3, r0
    f710:	461a      	mov	r2, r3
    f712:	79fb      	ldrb	r3, [r7, #7]
    f714:	4293      	cmp	r3, r2
    f716:	d101      	bne.n	f71c <usb_find_desc+0x34>
			return desc;
    f718:	68fb      	ldr	r3, [r7, #12]
    f71a:	e008      	b.n	f72e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    f71c:	68f8      	ldr	r0, [r7, #12]
    f71e:	4b08      	ldr	r3, [pc, #32]	; (f740 <usb_find_desc+0x58>)
    f720:	4798      	blx	r3
    f722:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f724:	68fa      	ldr	r2, [r7, #12]
    f726:	68bb      	ldr	r3, [r7, #8]
    f728:	429a      	cmp	r2, r3
    f72a:	d3e5      	bcc.n	f6f8 <usb_find_desc+0x10>
	}
	return NULL;
    f72c:	2300      	movs	r3, #0
}
    f72e:	4618      	mov	r0, r3
    f730:	3710      	adds	r7, #16
    f732:	46bd      	mov	sp, r7
    f734:	bd80      	pop	{r7, pc}
    f736:	bf00      	nop
    f738:	0000f64f 	.word	0x0000f64f
    f73c:	0000f667 	.word	0x0000f667
    f740:	0000f681 	.word	0x0000f681

0000f744 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    f744:	b580      	push	{r7, lr}
    f746:	b082      	sub	sp, #8
    f748:	af00      	add	r7, sp, #0
    f74a:	6078      	str	r0, [r7, #4]
    f74c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f74e:	e019      	b.n	f784 <usb_find_ep_desc+0x40>
		_desc_len_check();
    f750:	6878      	ldr	r0, [r7, #4]
    f752:	4b12      	ldr	r3, [pc, #72]	; (f79c <usb_find_ep_desc+0x58>)
    f754:	4798      	blx	r3
    f756:	4603      	mov	r3, r0
    f758:	2b01      	cmp	r3, #1
    f75a:	d801      	bhi.n	f760 <usb_find_ep_desc+0x1c>
    f75c:	2300      	movs	r3, #0
    f75e:	e018      	b.n	f792 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f760:	6878      	ldr	r0, [r7, #4]
    f762:	4b0f      	ldr	r3, [pc, #60]	; (f7a0 <usb_find_ep_desc+0x5c>)
    f764:	4798      	blx	r3
    f766:	4603      	mov	r3, r0
    f768:	2b04      	cmp	r3, #4
    f76a:	d010      	beq.n	f78e <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f76c:	6878      	ldr	r0, [r7, #4]
    f76e:	4b0c      	ldr	r3, [pc, #48]	; (f7a0 <usb_find_ep_desc+0x5c>)
    f770:	4798      	blx	r3
    f772:	4603      	mov	r3, r0
    f774:	2b05      	cmp	r3, #5
    f776:	d101      	bne.n	f77c <usb_find_ep_desc+0x38>
			return desc;
    f778:	687b      	ldr	r3, [r7, #4]
    f77a:	e00a      	b.n	f792 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    f77c:	6878      	ldr	r0, [r7, #4]
    f77e:	4b09      	ldr	r3, [pc, #36]	; (f7a4 <usb_find_ep_desc+0x60>)
    f780:	4798      	blx	r3
    f782:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    f784:	687a      	ldr	r2, [r7, #4]
    f786:	683b      	ldr	r3, [r7, #0]
    f788:	429a      	cmp	r2, r3
    f78a:	d3e1      	bcc.n	f750 <usb_find_ep_desc+0xc>
    f78c:	e000      	b.n	f790 <usb_find_ep_desc+0x4c>
			break;
    f78e:	bf00      	nop
	}
	return NULL;
    f790:	2300      	movs	r3, #0
}
    f792:	4618      	mov	r0, r3
    f794:	3708      	adds	r7, #8
    f796:	46bd      	mov	sp, r7
    f798:	bd80      	pop	{r7, pc}
    f79a:	bf00      	nop
    f79c:	0000f64f 	.word	0x0000f64f
    f7a0:	0000f667 	.word	0x0000f667
    f7a4:	0000f681 	.word	0x0000f681

0000f7a8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    f7a8:	b580      	push	{r7, lr}
    f7aa:	b084      	sub	sp, #16
    f7ac:	af00      	add	r7, sp, #0
    f7ae:	60f8      	str	r0, [r7, #12]
    f7b0:	60b9      	str	r1, [r7, #8]
    f7b2:	4613      	mov	r3, r2
    f7b4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    f7b6:	2202      	movs	r2, #2
    f7b8:	68b9      	ldr	r1, [r7, #8]
    f7ba:	68f8      	ldr	r0, [r7, #12]
    f7bc:	4b15      	ldr	r3, [pc, #84]	; (f814 <usb_find_cfg_desc+0x6c>)
    f7be:	4798      	blx	r3
    f7c0:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    f7c2:	68fb      	ldr	r3, [r7, #12]
    f7c4:	2b00      	cmp	r3, #0
    f7c6:	d11a      	bne.n	f7fe <usb_find_cfg_desc+0x56>
		return NULL;
    f7c8:	2300      	movs	r3, #0
    f7ca:	e01f      	b.n	f80c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    f7cc:	68f8      	ldr	r0, [r7, #12]
    f7ce:	4b12      	ldr	r3, [pc, #72]	; (f818 <usb_find_cfg_desc+0x70>)
    f7d0:	4798      	blx	r3
    f7d2:	4603      	mov	r3, r0
    f7d4:	2b01      	cmp	r3, #1
    f7d6:	d801      	bhi.n	f7dc <usb_find_cfg_desc+0x34>
    f7d8:	2300      	movs	r3, #0
    f7da:	e017      	b.n	f80c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	3301      	adds	r3, #1
    f7e0:	781b      	ldrb	r3, [r3, #0]
    f7e2:	2b02      	cmp	r3, #2
    f7e4:	d110      	bne.n	f808 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    f7e6:	68fb      	ldr	r3, [r7, #12]
    f7e8:	3305      	adds	r3, #5
    f7ea:	781b      	ldrb	r3, [r3, #0]
    f7ec:	79fa      	ldrb	r2, [r7, #7]
    f7ee:	429a      	cmp	r2, r3
    f7f0:	d101      	bne.n	f7f6 <usb_find_cfg_desc+0x4e>
			return desc;
    f7f2:	68fb      	ldr	r3, [r7, #12]
    f7f4:	e00a      	b.n	f80c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    f7f6:	68f8      	ldr	r0, [r7, #12]
    f7f8:	4b08      	ldr	r3, [pc, #32]	; (f81c <usb_find_cfg_desc+0x74>)
    f7fa:	4798      	blx	r3
    f7fc:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f7fe:	68fa      	ldr	r2, [r7, #12]
    f800:	68bb      	ldr	r3, [r7, #8]
    f802:	429a      	cmp	r2, r3
    f804:	d3e2      	bcc.n	f7cc <usb_find_cfg_desc+0x24>
    f806:	e000      	b.n	f80a <usb_find_cfg_desc+0x62>
			break;
    f808:	bf00      	nop
	}
	return NULL;
    f80a:	2300      	movs	r3, #0
}
    f80c:	4618      	mov	r0, r3
    f80e:	3710      	adds	r7, #16
    f810:	46bd      	mov	sp, r7
    f812:	bd80      	pop	{r7, pc}
    f814:	0000f6e9 	.word	0x0000f6e9
    f818:	0000f64f 	.word	0x0000f64f
    f81c:	0000f6c5 	.word	0x0000f6c5

0000f820 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    f820:	b580      	push	{r7, lr}
    f822:	b086      	sub	sp, #24
    f824:	af00      	add	r7, sp, #0
    f826:	60f8      	str	r0, [r7, #12]
    f828:	60b9      	str	r1, [r7, #8]
    f82a:	4613      	mov	r3, r2
    f82c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    f82e:	2300      	movs	r3, #0
    f830:	75fb      	strb	r3, [r7, #23]
    f832:	e020      	b.n	f876 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    f834:	2203      	movs	r2, #3
    f836:	68b9      	ldr	r1, [r7, #8]
    f838:	68f8      	ldr	r0, [r7, #12]
    f83a:	4b13      	ldr	r3, [pc, #76]	; (f888 <usb_find_str_desc+0x68>)
    f83c:	4798      	blx	r3
    f83e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    f840:	68fb      	ldr	r3, [r7, #12]
    f842:	2b00      	cmp	r3, #0
    f844:	d015      	beq.n	f872 <usb_find_str_desc+0x52>
			_desc_len_check();
    f846:	68f8      	ldr	r0, [r7, #12]
    f848:	4b10      	ldr	r3, [pc, #64]	; (f88c <usb_find_str_desc+0x6c>)
    f84a:	4798      	blx	r3
    f84c:	4603      	mov	r3, r0
    f84e:	2b01      	cmp	r3, #1
    f850:	d801      	bhi.n	f856 <usb_find_str_desc+0x36>
    f852:	2300      	movs	r3, #0
    f854:	e014      	b.n	f880 <usb_find_str_desc+0x60>
			if (i == str_index) {
    f856:	7dfa      	ldrb	r2, [r7, #23]
    f858:	79fb      	ldrb	r3, [r7, #7]
    f85a:	429a      	cmp	r2, r3
    f85c:	d101      	bne.n	f862 <usb_find_str_desc+0x42>
				return desc;
    f85e:	68fb      	ldr	r3, [r7, #12]
    f860:	e00e      	b.n	f880 <usb_find_str_desc+0x60>
			}
			i++;
    f862:	7dfb      	ldrb	r3, [r7, #23]
    f864:	3301      	adds	r3, #1
    f866:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    f868:	68f8      	ldr	r0, [r7, #12]
    f86a:	4b09      	ldr	r3, [pc, #36]	; (f890 <usb_find_str_desc+0x70>)
    f86c:	4798      	blx	r3
    f86e:	60f8      	str	r0, [r7, #12]
    f870:	e001      	b.n	f876 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    f872:	2300      	movs	r3, #0
    f874:	e004      	b.n	f880 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    f876:	68fa      	ldr	r2, [r7, #12]
    f878:	68bb      	ldr	r3, [r7, #8]
    f87a:	429a      	cmp	r2, r3
    f87c:	d3da      	bcc.n	f834 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    f87e:	2300      	movs	r3, #0
}
    f880:	4618      	mov	r0, r3
    f882:	3718      	adds	r7, #24
    f884:	46bd      	mov	sp, r7
    f886:	bd80      	pop	{r7, pc}
    f888:	0000f6e9 	.word	0x0000f6e9
    f88c:	0000f64f 	.word	0x0000f64f
    f890:	0000f681 	.word	0x0000f681

0000f894 <_ZN10AMMC_ClassD1Ev>:
} //AMMC_Class

// default destructor
AMMC_Class::~AMMC_Class()
{
} //~AMMC_Class
    f894:	4770      	bx	lr
	...

0000f898 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
    f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AMMC_Class	ammc1;
    f89a:	4f06      	ldr	r7, [pc, #24]	; (f8b4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x1c>)
    f89c:	4e06      	ldr	r6, [pc, #24]	; (f8b8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x20>)
    f89e:	4d07      	ldr	r5, [pc, #28]	; (f8bc <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x24>)
    f8a0:	463a      	mov	r2, r7
    f8a2:	4631      	mov	r1, r6
    f8a4:	4628      	mov	r0, r5
    f8a6:	4c06      	ldr	r4, [pc, #24]	; (f8c0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x28>)
    f8a8:	47a0      	blx	r4
AMMC_Class	ammc2;
    f8aa:	463a      	mov	r2, r7
    f8ac:	4631      	mov	r1, r6
    f8ae:	1d28      	adds	r0, r5, #4
    f8b0:	47a0      	blx	r4
    f8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8b4:	20000000 	.word	0x20000000
    f8b8:	0000f895 	.word	0x0000f895
    f8bc:	200014dc 	.word	0x200014dc
    f8c0:	000170d1 	.word	0x000170d1

0000f8c4 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
    f8c4:	b410      	push	{r4}
    f8c6:	680a      	ldr	r2, [r1, #0]
    f8c8:	6002      	str	r2, [r0, #0]
    f8ca:	684c      	ldr	r4, [r1, #4]
    f8cc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    f8d0:	5084      	str	r4, [r0, r2]
    f8d2:	6889      	ldr	r1, [r1, #8]
    f8d4:	6802      	ldr	r2, [r0, #0]
    f8d6:	f852 2c10 	ldr.w	r2, [r2, #-16]
    f8da:	5081      	str	r1, [r0, r2]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
    f8dc:	bc10      	pop	{r4}
    f8de:	4770      	bx	lr

0000f8e0 <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
    f8e0:	b410      	push	{r4}
    f8e2:	680a      	ldr	r2, [r1, #0]
    f8e4:	6002      	str	r2, [r0, #0]
    f8e6:	684c      	ldr	r4, [r1, #4]
    f8e8:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    f8ec:	5084      	str	r4, [r0, r2]
    f8ee:	6889      	ldr	r1, [r1, #8]
    f8f0:	6802      	ldr	r2, [r0, #0]
    f8f2:	f852 2c10 	ldr.w	r2, [r2, #-16]
    f8f6:	5081      	str	r1, [r0, r2]
{
} //~ARINC_Buffer_Class
    f8f8:	bc10      	pop	{r4}
    f8fa:	4770      	bx	lr

0000f8fc <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
    f8fc:	b430      	push	{r4, r5}
	LabelsArrayTX=&bufferLabelsArrayTX[0];
    f8fe:	4d10      	ldr	r5, [pc, #64]	; (f940 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x44>)
    f900:	6045      	str	r5, [r0, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
    f902:	f105 0320 	add.w	r3, r5, #32
    f906:	6083      	str	r3, [r0, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
    f908:	f105 0340 	add.w	r3, r5, #64	; 0x40
    f90c:	60c3      	str	r3, [r0, #12]
    f90e:	f105 0360 	add.w	r3, r5, #96	; 0x60
    f912:	f100 0420 	add.w	r4, r0, #32
    f916:	f105 02e0 	add.w	r2, r5, #224	; 0xe0
    f91a:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
    f91e:	4615      	mov	r5, r2
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
    f920:	f841 3f04 	str.w	r3, [r1, #4]!
			pointerArrayTX[i]=bufferTransmitBuffer[i];
    f924:	f844 2f04 	str.w	r2, [r4, #4]!
    f928:	3304      	adds	r3, #4
    f92a:	3204      	adds	r2, #4
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
    f92c:	42ab      	cmp	r3, r5
    f92e:	d1f7      	bne.n	f920 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x24>
		}
		receiverBuffer=pointerArrayRX;
    f930:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
    f934:	6103      	str	r3, [r0, #16]
		transmitBuffer=pointerArrayTX;
    f936:	f100 0324 	add.w	r3, r0, #36	; 0x24
    f93a:	6143      	str	r3, [r0, #20]
}
    f93c:	bc30      	pop	{r4, r5}
    f93e:	4770      	bx	lr
    f940:	200014e8 	.word	0x200014e8

0000f944 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh>:

void ARINC_Buffer_Class::SaveFlapperValveAngle(uint8_t angle){
    f944:	b538      	push	{r3, r4, r5, lr}
    f946:	4604      	mov	r4, r0
    f948:	460d      	mov	r5, r1
	octalLabel=Label2Byte(FlapperValveAngle);
    f94a:	6803      	ldr	r3, [r0, #0]
    f94c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f950:	5823      	ldr	r3, [r4, r0]
    f952:	685b      	ldr	r3, [r3, #4]
    f954:	f240 1177 	movw	r1, #375	; 0x177
    f958:	4420      	add	r0, r4
    f95a:	4798      	blx	r3
    f95c:	4601      	mov	r1, r0
    f95e:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
    f960:	6823      	ldr	r3, [r4, #0]
    f962:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f966:	6862      	ldr	r2, [r4, #4]
    f968:	4420      	add	r0, r4
    f96a:	4b0f      	ldr	r3, [pc, #60]	; (f9a8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x64>)
    f96c:	4798      	blx	r3
    f96e:	7620      	strb	r0, [r4, #24]
	if (index<0x20)
    f970:	281f      	cmp	r0, #31
    f972:	dd00      	ble.n	f976 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x32>
    f974:	bd38      	pop	{r3, r4, r5, pc}
	{
			data=MakeTXLabel375(angle);
    f976:	6823      	ldr	r3, [r4, #0]
    f978:	f853 0c10 	ldr.w	r0, [r3, #-16]
    f97c:	4629      	mov	r1, r5
    f97e:	4420      	add	r0, r4
    f980:	4b0a      	ldr	r3, [pc, #40]	; (f9ac <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x68>)
    f982:	4798      	blx	r3
    f984:	4601      	mov	r1, r0
    f986:	61e0      	str	r0, [r4, #28]
			Uint32FourBytesArray(data,localArray);
    f988:	6823      	ldr	r3, [r4, #0]
    f98a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f98e:	f104 0220 	add.w	r2, r4, #32
    f992:	4420      	add	r0, r4
    f994:	4b06      	ldr	r3, [pc, #24]	; (f9b0 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x6c>)
    f996:	4798      	blx	r3
			memcpy(transmitBuffer[index],localArray,4);
    f998:	7e22      	ldrb	r2, [r4, #24]
    f99a:	6963      	ldr	r3, [r4, #20]
    f99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    f9a0:	6a22      	ldr	r2, [r4, #32]
    f9a2:	601a      	str	r2, [r3, #0]
	} 
	else
	{
	}

}
    f9a4:	e7e6      	b.n	f974 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x30>
    f9a6:	bf00      	nop
    f9a8:	0000fbc7 	.word	0x0000fbc7
    f9ac:	00010785 	.word	0x00010785
    f9b0:	0000fc09 	.word	0x0000fc09

0000f9b4 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
    f9b4:	b570      	push	{r4, r5, r6, lr}
    f9b6:	4604      	mov	r4, r0
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
    f9b8:	6803      	ldr	r3, [r0, #0]
    f9ba:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f9be:	5823      	ldr	r3, [r4, r0]
    f9c0:	685b      	ldr	r3, [r3, #4]
    f9c2:	f44f 71bb 	mov.w	r1, #374	; 0x176
    f9c6:	4420      	add	r0, r4
    f9c8:	4798      	blx	r3
    f9ca:	4601      	mov	r1, r0
    f9cc:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
    f9ce:	6823      	ldr	r3, [r4, #0]
    f9d0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f9d4:	6862      	ldr	r2, [r4, #4]
    f9d6:	4420      	add	r0, r4
    f9d8:	4b12      	ldr	r3, [pc, #72]	; (fa24 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x70>)
    f9da:	4798      	blx	r3
    f9dc:	7620      	strb	r0, [r4, #24]
	float temperature=temperatures.values[0][3];
    f9de:	4b12      	ldr	r3, [pc, #72]	; (fa28 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x74>)
    f9e0:	6f9e      	ldr	r6, [r3, #120]	; 0x78
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
    f9e2:	6823      	ldr	r3, [r4, #0]
    f9e4:	f853 5c10 	ldr.w	r5, [r3, #-16]
    f9e8:	4425      	add	r5, r4
    f9ea:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f9ee:	220f      	movs	r2, #15
    f9f0:	4631      	mov	r1, r6
    f9f2:	4420      	add	r0, r4
    f9f4:	4b0d      	ldr	r3, [pc, #52]	; (fa2c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x78>)
    f9f6:	4798      	blx	r3
    f9f8:	4632      	mov	r2, r6
    f9fa:	4601      	mov	r1, r0
    f9fc:	4628      	mov	r0, r5
    f9fe:	4b0c      	ldr	r3, [pc, #48]	; (fa30 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x7c>)
    fa00:	4798      	blx	r3
    fa02:	4601      	mov	r1, r0
    fa04:	61e0      	str	r0, [r4, #28]
	Uint32FourBytesArray(data,localArray);
    fa06:	6823      	ldr	r3, [r4, #0]
    fa08:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    fa0c:	f104 0220 	add.w	r2, r4, #32
    fa10:	4420      	add	r0, r4
    fa12:	4b08      	ldr	r3, [pc, #32]	; (fa34 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x80>)
    fa14:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
    fa16:	7e22      	ldrb	r2, [r4, #24]
    fa18:	6963      	ldr	r3, [r4, #20]
    fa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fa1e:	6a22      	ldr	r2, [r4, #32]
    fa20:	601a      	str	r2, [r3, #0]
    fa22:	bd70      	pop	{r4, r5, r6, pc}
    fa24:	0000fbc7 	.word	0x0000fbc7
    fa28:	200091dc 	.word	0x200091dc
    fa2c:	0000fc19 	.word	0x0000fc19
    fa30:	00010739 	.word	0x00010739
    fa34:	0000fc09 	.word	0x0000fc09

0000fa38 <_ZN18ARINC_Buffer_Class10SaveStatusEm>:
}

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
    fa38:	b538      	push	{r3, r4, r5, lr}
    fa3a:	4604      	mov	r4, r0
    fa3c:	460d      	mov	r5, r1
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
    fa3e:	6803      	ldr	r3, [r0, #0]
    fa40:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    fa44:	5823      	ldr	r3, [r4, r0]
    fa46:	685b      	ldr	r3, [r3, #4]
    fa48:	f44f 7187 	mov.w	r1, #270	; 0x10e
    fa4c:	4420      	add	r0, r4
    fa4e:	4798      	blx	r3
    fa50:	4601      	mov	r1, r0
    fa52:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
    fa54:	6823      	ldr	r3, [r4, #0]
    fa56:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    fa5a:	6862      	ldr	r2, [r4, #4]
    fa5c:	4420      	add	r0, r4
    fa5e:	4b0d      	ldr	r3, [pc, #52]	; (fa94 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x5c>)
    fa60:	4798      	blx	r3
    fa62:	7620      	strb	r0, [r4, #24]
	data=MakeLabel270(st);
    fa64:	6823      	ldr	r3, [r4, #0]
    fa66:	f853 0c10 	ldr.w	r0, [r3, #-16]
    fa6a:	4629      	mov	r1, r5
    fa6c:	4420      	add	r0, r4
    fa6e:	4b0a      	ldr	r3, [pc, #40]	; (fa98 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x60>)
    fa70:	4798      	blx	r3
    fa72:	4601      	mov	r1, r0
    fa74:	61e0      	str	r0, [r4, #28]
	Uint32FourBytesArray(data,localArray);
    fa76:	6823      	ldr	r3, [r4, #0]
    fa78:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    fa7c:	f104 0220 	add.w	r2, r4, #32
    fa80:	4420      	add	r0, r4
    fa82:	4b06      	ldr	r3, [pc, #24]	; (fa9c <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x64>)
    fa84:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
    fa86:	7e22      	ldrb	r2, [r4, #24]
    fa88:	6963      	ldr	r3, [r4, #20]
    fa8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fa8e:	6a22      	ldr	r2, [r4, #32]
    fa90:	601a      	str	r2, [r3, #0]
    fa92:	bd38      	pop	{r3, r4, r5, pc}
    fa94:	0000fbc7 	.word	0x0000fbc7
    fa98:	000107b5 	.word	0x000107b5
    fa9c:	0000fc09 	.word	0x0000fc09

0000faa0 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:
}

void ARINC_Buffer_Class::SortReceivedData(uint8_t* localReceiver){
    faa0:	2300      	movs	r3, #0
    faa2:	e014      	b.n	face <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x2e>
    faa4:	3301      	adds	r3, #1
		uint8_t i;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
    faa6:	2b20      	cmp	r3, #32
    faa8:	d00c      	beq.n	fac4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x24>
		{
			if (LabelsArrayRX1[i]>0)
    faaa:	6882      	ldr	r2, [r0, #8]
    faac:	5cd2      	ldrb	r2, [r2, r3]
    faae:	2a00      	cmp	r2, #0
    fab0:	d0f8      	beq.n	faa4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
			{
			
					if (localReceiver[3]==LabelsArrayRX1[i])
    fab2:	78cc      	ldrb	r4, [r1, #3]
    fab4:	4294      	cmp	r4, r2
    fab6:	d1f5      	bne.n	faa4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					{
						memcpy(receiverBuffer[i],localReceiver,4);
    fab8:	6902      	ldr	r2, [r0, #16]
    faba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    fabe:	680c      	ldr	r4, [r1, #0]
    fac0:	6014      	str	r4, [r2, #0]
    fac2:	e7ef      	b.n	faa4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					}
			
	
			}
		}
    fac4:	bc10      	pop	{r4}
    fac6:	4770      	bx	lr
    fac8:	3301      	adds	r3, #1
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
    faca:	2b20      	cmp	r3, #32
    facc:	d005      	beq.n	fada <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x3a>
			if (LabelsArrayRX1[i]>0)
    face:	6882      	ldr	r2, [r0, #8]
    fad0:	5cd2      	ldrb	r2, [r2, r3]
    fad2:	2a00      	cmp	r2, #0
    fad4:	d0f8      	beq.n	fac8 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x28>
void ARINC_Buffer_Class::SortReceivedData(uint8_t* localReceiver){
    fad6:	b410      	push	{r4}
    fad8:	e7eb      	b.n	fab2 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x12>
    fada:	4770      	bx	lr

0000fadc <_ZN17ARINC_Conversions8FlipByteEh>:
}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
	uint8_t rev=0;
	for (int i=0;i<8;i++)
    fadc:	2300      	movs	r3, #0
	uint8_t rev=0;
    fade:	4618      	mov	r0, r3
	{
		rev=rev<<1;
		rev|=(byte>>i)&(0x01);
    fae0:	fa41 f203 	asr.w	r2, r1, r3
    fae4:	f002 0201 	and.w	r2, r2, #1
    fae8:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    faec:	b2c0      	uxtb	r0, r0
	for (int i=0;i<8;i++)
    faee:	3301      	adds	r3, #1
    faf0:	2b08      	cmp	r3, #8
    faf2:	d1f5      	bne.n	fae0 <_ZN17ARINC_Conversions8FlipByteEh+0x4>
	}
	return rev;
}
    faf4:	4770      	bx	lr
	...

0000faf8 <_ZN17ARINC_Conversions10Label2ByteEm>:
uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
    faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fafc:	b085      	sub	sp, #20
    fafe:	4680      	mov	r8, r0
    fb00:	4608      	mov	r0, r1
    fb02:	f04f 0a02 	mov.w	sl, #2
	result=0;
    fb06:	f04f 0900 	mov.w	r9, #0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    fb0a:	4f23      	ldr	r7, [pc, #140]	; (fb98 <_ZN17ARINC_Conversions10Label2ByteEm+0xa0>)
    fb0c:	464e      	mov	r6, r9
    fb0e:	46c3      	mov	fp, r8
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
    fb10:	4b22      	ldr	r3, [pc, #136]	; (fb9c <_ZN17ARINC_Conversions10Label2ByteEm+0xa4>)
    fb12:	4798      	blx	r3
    fb14:	4604      	mov	r4, r0
    fb16:	460d      	mov	r5, r1
    fb18:	4650      	mov	r0, sl
    fb1a:	47b8      	blx	r7
    fb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fb20:	4602      	mov	r2, r0
    fb22:	460b      	mov	r3, r1
    fb24:	2000      	movs	r0, #0
    fb26:	491e      	ldr	r1, [pc, #120]	; (fba0 <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
    fb28:	f8df 8080 	ldr.w	r8, [pc, #128]	; fbac <_ZN17ARINC_Conversions10Label2ByteEm+0xb4>
    fb2c:	47c0      	blx	r8
    fb2e:	4602      	mov	r2, r0
    fb30:	460b      	mov	r3, r1
    fb32:	e9cd 4500 	strd	r4, r5, [sp]
    fb36:	4620      	mov	r0, r4
    fb38:	4629      	mov	r1, r5
    fb3a:	4c1a      	ldr	r4, [pc, #104]	; (fba4 <_ZN17ARINC_Conversions10Label2ByteEm+0xac>)
    fb3c:	47a0      	blx	r4
    fb3e:	4d1a      	ldr	r5, [pc, #104]	; (fba8 <_ZN17ARINC_Conversions10Label2ByteEm+0xb0>)
    fb40:	47a8      	blx	r5
		label-=octals[2-i]*pow(10,2-i);
    fb42:	b2c4      	uxtb	r4, r0
    fb44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fb48:	2000      	movs	r0, #0
    fb4a:	4915      	ldr	r1, [pc, #84]	; (fba0 <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
    fb4c:	47c0      	blx	r8
    fb4e:	4680      	mov	r8, r0
    fb50:	4689      	mov	r9, r1
    fb52:	4620      	mov	r0, r4
    fb54:	47b8      	blx	r7
    fb56:	4642      	mov	r2, r8
    fb58:	464b      	mov	r3, r9
    fb5a:	f8df 8054 	ldr.w	r8, [pc, #84]	; fbb0 <_ZN17ARINC_Conversions10Label2ByteEm+0xb8>
    fb5e:	47c0      	blx	r8
    fb60:	4602      	mov	r2, r0
    fb62:	460b      	mov	r3, r1
    fb64:	e9dd 0100 	ldrd	r0, r1, [sp]
    fb68:	f8df 8048 	ldr.w	r8, [pc, #72]	; fbb4 <_ZN17ARINC_Conversions10Label2ByteEm+0xbc>
    fb6c:	47c0      	blx	r8
    fb6e:	47a8      	blx	r5
		result|=octals[2-i]<<(6-3*i);
    fb70:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    fb74:	409c      	lsls	r4, r3
    fb76:	4326      	orrs	r6, r4
    fb78:	b2f6      	uxtb	r6, r6
    fb7a:	f10a 3aff 	add.w	sl, sl, #4294967295
	for (uint8_t i = 0; i < sizeof(octals); i++){
    fb7e:	f1ba 3fff 	cmp.w	sl, #4294967295
    fb82:	d1c5      	bne.n	fb10 <_ZN17ARINC_Conversions10Label2ByteEm+0x18>
	result=FlipByte(result);
    fb84:	f8db 3000 	ldr.w	r3, [fp]
    fb88:	681b      	ldr	r3, [r3, #0]
    fb8a:	4631      	mov	r1, r6
    fb8c:	4658      	mov	r0, fp
    fb8e:	4798      	blx	r3
}
    fb90:	b005      	add	sp, #20
    fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb96:	bf00      	nop
    fb98:	000184d1 	.word	0x000184d1
    fb9c:	000184b1 	.word	0x000184b1
    fba0:	40240000 	.word	0x40240000
    fba4:	000187f1 	.word	0x000187f1
    fba8:	00018afd 	.word	0x00018afd
    fbac:	000170e1 	.word	0x000170e1
    fbb0:	0001859d 	.word	0x0001859d
    fbb4:	00018235 	.word	0x00018235

0000fbb8 <_ZN17ARINC_ConversionsC1Ev>:
ARINC_Conversions::ARINC_Conversions()
    fbb8:	4b01      	ldr	r3, [pc, #4]	; (fbc0 <_ZN17ARINC_ConversionsC1Ev+0x8>)
    fbba:	6003      	str	r3, [r0, #0]
} //ARINC_Conversions
    fbbc:	4770      	bx	lr
    fbbe:	bf00      	nop
    fbc0:	00019bb0 	.word	0x00019bb0

0000fbc4 <_ZN17ARINC_ConversionsD1Ev>:
} //~ARINC_Conversions
    fbc4:	4770      	bx	lr

0000fbc6 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
	for (uint8_t ii = 0; ii < 32; ii++)
	{
		if (arr[ii]==l)
    fbc6:	7813      	ldrb	r3, [r2, #0]
    fbc8:	428b      	cmp	r3, r1
    fbca:	d009      	beq.n	fbe0 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1a>
    fbcc:	2001      	movs	r0, #1
    fbce:	5c13      	ldrb	r3, [r2, r0]
    fbd0:	428b      	cmp	r3, r1
    fbd2:	d006      	beq.n	fbe2 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1c>
	for (uint8_t ii = 0; ii < 32; ii++)
    fbd4:	3001      	adds	r0, #1
    fbd6:	b2c0      	uxtb	r0, r0
    fbd8:	281f      	cmp	r0, #31
    fbda:	ddf8      	ble.n	fbce <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x8>
		{
			return ii;
		}
		
	}
	return 32;
    fbdc:	2020      	movs	r0, #32
    fbde:	4770      	bx	lr
	for (uint8_t ii = 0; ii < 32; ii++)
    fbe0:	2000      	movs	r0, #0
}
    fbe2:	4770      	bx	lr

0000fbe4 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
    fbe4:	b410      	push	{r4}

		result=0;
    fbe6:	2300      	movs	r3, #0
    fbe8:	6083      	str	r3, [r0, #8]
    fbea:	3901      	subs	r1, #1
    fbec:	2218      	movs	r2, #24
		uint8_t array32;
		for (uint8_t ii = 0; ii < 4; ii++)
		{
			array32=*arr;
			result|=((uint32_t)array32)<<(24-ii*8);
    fbee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fbf2:	4093      	lsls	r3, r2
    fbf4:	6884      	ldr	r4, [r0, #8]
    fbf6:	4323      	orrs	r3, r4
    fbf8:	6083      	str	r3, [r0, #8]
    fbfa:	3a08      	subs	r2, #8
		for (uint8_t ii = 0; ii < 4; ii++)
    fbfc:	f112 0f08 	cmn.w	r2, #8
    fc00:	d1f5      	bne.n	fbee <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0xa>
			arr++;

		}
		return result;
}
    fc02:	4618      	mov	r0, r3
    fc04:	bc10      	pop	{r4}
    fc06:	4770      	bx	lr

0000fc08 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
    fc08:	0e0b      	lsrs	r3, r1, #24
    fc0a:	7013      	strb	r3, [r2, #0]
    fc0c:	0c0b      	lsrs	r3, r1, #16
    fc0e:	7053      	strb	r3, [r2, #1]
    fc10:	0a0b      	lsrs	r3, r1, #8
    fc12:	7093      	strb	r3, [r2, #2]
    fc14:	70d1      	strb	r1, [r2, #3]
    fc16:	4770      	bx	lr

0000fc18 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
		dest[ii]=d;

	}

}
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
    fc18:	b570      	push	{r4, r5, r6, lr}
    fc1a:	4605      	mov	r5, r0
    fc1c:	460c      	mov	r4, r1
    fc1e:	4616      	mov	r6, r2
	
	if (f>=0)
    fc20:	2100      	movs	r1, #0
    fc22:	4620      	mov	r0, r4
    fc24:	4b0a      	ldr	r3, [pc, #40]	; (fc50 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x38>)
    fc26:	4798      	blx	r3
    fc28:	b128      	cbz	r0, fc36 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x1e>
	{
		value=(uint32_t)f;
    fc2a:	4620      	mov	r0, r4
    fc2c:	4b09      	ldr	r3, [pc, #36]	; (fc54 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x3c>)
    fc2e:	4798      	blx	r3
    fc30:	60e8      	str	r0, [r5, #12]
		value=(uint32_t)(-1*f);
		value=(~value)&((1<<(size))-1);
		value+=1;
	}
	return value;
}
    fc32:	68e8      	ldr	r0, [r5, #12]
    fc34:	bd70      	pop	{r4, r5, r6, pc}
		value=(uint32_t)(-1*f);
    fc36:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
    fc3a:	4b06      	ldr	r3, [pc, #24]	; (fc54 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x3c>)
    fc3c:	4798      	blx	r3
		value=(~value)&((1<<(size))-1);
    fc3e:	2301      	movs	r3, #1
    fc40:	40b3      	lsls	r3, r6
    fc42:	3b01      	subs	r3, #1
    fc44:	ea23 0000 	bic.w	r0, r3, r0
		value+=1;
    fc48:	3001      	adds	r0, #1
    fc4a:	60e8      	str	r0, [r5, #12]
    fc4c:	e7f1      	b.n	fc32 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x1a>
    fc4e:	bf00      	nop
    fc50:	000190bd 	.word	0x000190bd
    fc54:	000190e5 	.word	0x000190e5

0000fc58 <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
	uint32_t y = x ^ (x >> 1);
    fc58:	ea81 0051 	eor.w	r0, r1, r1, lsr #1
	y = y ^ (y >> 2);
    fc5c:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
	y = y ^ (y >> 4);
    fc60:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
	y = y ^ (y >> 8);
    fc64:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
	y = y ^ (y >> 16);
    fc68:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	if (y & 1){
			return 1;
	}

	return 0;
}
    fc6c:	f000 0001 	and.w	r0, r0, #1
    fc70:	4770      	bx	lr
	...

0000fc74 <_ZN19ARINC_Handler_ClassD1Ev>:
	
	isOK=false;
} //ARINC_Handler_Class

// default destructor
ARINC_Handler_Class::~ARINC_Handler_Class()
    fc74:	b538      	push	{r3, r4, r5, lr}
    fc76:	4604      	mov	r4, r0
    fc78:	4d0d      	ldr	r5, [pc, #52]	; (fcb0 <_ZN19ARINC_Handler_ClassD1Ev+0x3c>)
    fc7a:	f105 0310 	add.w	r3, r5, #16
    fc7e:	6003      	str	r3, [r0, #0]
    fc80:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fc84:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
    fc88:	f105 0348 	add.w	r3, r5, #72	; 0x48
    fc8c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
    fc90:	f105 0158 	add.w	r1, r5, #88	; 0x58
    fc94:	4b07      	ldr	r3, [pc, #28]	; (fcb4 <_ZN19ARINC_Handler_ClassD1Ev+0x40>)
    fc96:	4798      	blx	r3
    fc98:	f105 0178 	add.w	r1, r5, #120	; 0x78
    fc9c:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
    fca0:	4b05      	ldr	r3, [pc, #20]	; (fcb8 <_ZN19ARINC_Handler_ClassD1Ev+0x44>)
    fca2:	4798      	blx	r3
    fca4:	f504 702d 	add.w	r0, r4, #692	; 0x2b4
    fca8:	4b04      	ldr	r3, [pc, #16]	; (fcbc <_ZN19ARINC_Handler_ClassD1Ev+0x48>)
    fcaa:	4798      	blx	r3
{
} //~ARINC_Handler_Class
    fcac:	4620      	mov	r0, r4
    fcae:	bd38      	pop	{r3, r4, r5, pc}
    fcb0:	00019bb8 	.word	0x00019bb8
    fcb4:	0000ff81 	.word	0x0000ff81
    fcb8:	000106e5 	.word	0x000106e5
    fcbc:	0000fbc5 	.word	0x0000fbc5

0000fcc0 <_ZTv0_n16_N19ARINC_Handler_ClassD1Ev>:
    fcc0:	b508      	push	{r3, lr}
    fcc2:	6803      	ldr	r3, [r0, #0]
    fcc4:	f853 3c10 	ldr.w	r3, [r3, #-16]
    fcc8:	4418      	add	r0, r3
    fcca:	4b01      	ldr	r3, [pc, #4]	; (fcd0 <_ZTv0_n16_N19ARINC_Handler_ClassD1Ev+0x10>)
    fccc:	4798      	blx	r3
    fcce:	bd08      	pop	{r3, pc}
    fcd0:	0000fc75 	.word	0x0000fc75

0000fcd4 <_ZN19ARINC_Handler_ClassD0Ev>:
ARINC_Handler_Class::~ARINC_Handler_Class()
    fcd4:	b510      	push	{r4, lr}
    fcd6:	4604      	mov	r4, r0
} //~ARINC_Handler_Class
    fcd8:	4b04      	ldr	r3, [pc, #16]	; (fcec <_ZN19ARINC_Handler_ClassD0Ev+0x18>)
    fcda:	4798      	blx	r3
    fcdc:	f44f 7138 	mov.w	r1, #736	; 0x2e0
    fce0:	4620      	mov	r0, r4
    fce2:	4b03      	ldr	r3, [pc, #12]	; (fcf0 <_ZN19ARINC_Handler_ClassD0Ev+0x1c>)
    fce4:	4798      	blx	r3
    fce6:	4620      	mov	r0, r4
    fce8:	bd10      	pop	{r4, pc}
    fcea:	bf00      	nop
    fcec:	0000fc75 	.word	0x0000fc75
    fcf0:	000170dd 	.word	0x000170dd

0000fcf4 <_ZTv0_n16_N19ARINC_Handler_ClassD0Ev>:
    fcf4:	b508      	push	{r3, lr}
    fcf6:	6803      	ldr	r3, [r0, #0]
    fcf8:	f853 3c10 	ldr.w	r3, [r3, #-16]
    fcfc:	4418      	add	r0, r3
    fcfe:	4b01      	ldr	r3, [pc, #4]	; (fd04 <_ZTv0_n16_N19ARINC_Handler_ClassD0Ev+0x10>)
    fd00:	4798      	blx	r3
    fd02:	bd08      	pop	{r3, pc}
    fd04:	0000fcd5 	.word	0x0000fcd5

0000fd08 <_ZN19ARINC_Handler_ClassC1Ev>:
ARINC_Handler_Class::ARINC_Handler_Class()
    fd08:	b538      	push	{r3, r4, r5, lr}
    fd0a:	4604      	mov	r4, r0
    fd0c:	f500 702d 	add.w	r0, r0, #692	; 0x2b4
    fd10:	4b0f      	ldr	r3, [pc, #60]	; (fd50 <_ZN19ARINC_Handler_ClassC1Ev+0x48>)
    fd12:	4798      	blx	r3
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
    fd14:	4d0f      	ldr	r5, [pc, #60]	; (fd54 <_ZN19ARINC_Handler_ClassC1Ev+0x4c>)
    fd16:	f105 038c 	add.w	r3, r5, #140	; 0x8c
    fd1a:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
    fd1e:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
    fd22:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
    fd26:	f105 0158 	add.w	r1, r5, #88	; 0x58
    fd2a:	4620      	mov	r0, r4
    fd2c:	4b0a      	ldr	r3, [pc, #40]	; (fd58 <_ZN19ARINC_Handler_ClassC1Ev+0x50>)
    fd2e:	4798      	blx	r3
    fd30:	f105 0310 	add.w	r3, r5, #16
    fd34:	6023      	str	r3, [r4, #0]
    fd36:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fd3a:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
    fd3e:	3548      	adds	r5, #72	; 0x48
    fd40:	f8c4 52c4 	str.w	r5, [r4, #708]	; 0x2c4
	isOK=false;
    fd44:	2300      	movs	r3, #0
    fd46:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
} //ARINC_Handler_Class
    fd4a:	4620      	mov	r0, r4
    fd4c:	bd38      	pop	{r3, r4, r5, pc}
    fd4e:	bf00      	nop
    fd50:	0000fbb9 	.word	0x0000fbb9
    fd54:	00019bb8 	.word	0x00019bb8
    fd58:	0000fee1 	.word	0x0000fee1

0000fd5c <_ZN19ARINC_Handler_Class10Init_ARINCEv>:


bool ARINC_Handler_Class::Init_ARINC(void){
    fd5c:	b510      	push	{r4, lr}
    fd5e:	4604      	mov	r4, r0
	ar=&staticArinc;
    fd60:	4804      	ldr	r0, [pc, #16]	; (fd74 <_ZN19ARINC_Handler_Class10Init_ARINCEv+0x18>)
    fd62:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
	isOK=ar->Init();
    fd66:	4b04      	ldr	r3, [pc, #16]	; (fd78 <_ZN19ARINC_Handler_Class10Init_ARINCEv+0x1c>)
    fd68:	4798      	blx	r3
    fd6a:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
	
	return isOK;
    fd6e:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
}
    fd72:	bd10      	pop	{r4, pc}
    fd74:	20001648 	.word	0x20001648
    fd78:	0000ffb9 	.word	0x0000ffb9

0000fd7c <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev>:
}




    fd7c:	b570      	push	{r4, r5, r6, lr}
static ARINC_Interface staticArinc;
    fd7e:	4c0a      	ldr	r4, [pc, #40]	; (fda8 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x2c>)
    fd80:	4620      	mov	r0, r4
    fd82:	4b0a      	ldr	r3, [pc, #40]	; (fdac <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x30>)
    fd84:	4798      	blx	r3
    fd86:	4e0a      	ldr	r6, [pc, #40]	; (fdb0 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x34>)
    fd88:	4632      	mov	r2, r6
    fd8a:	490a      	ldr	r1, [pc, #40]	; (fdb4 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x38>)
    fd8c:	4620      	mov	r0, r4
    fd8e:	4d0a      	ldr	r5, [pc, #40]	; (fdb8 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x3c>)
    fd90:	47a8      	blx	r5
    fd92:	f504 7436 	add.w	r4, r4, #728	; 0x2d8
    fd96:	4620      	mov	r0, r4
    fd98:	4b08      	ldr	r3, [pc, #32]	; (fdbc <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x40>)
    fd9a:	4798      	blx	r3
    fd9c:	4632      	mov	r2, r6
    fd9e:	4908      	ldr	r1, [pc, #32]	; (fdc0 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x44>)
    fda0:	4620      	mov	r0, r4
    fda2:	47a8      	blx	r5
    fda4:	bd70      	pop	{r4, r5, r6, pc}
    fda6:	bf00      	nop
    fda8:	20001648 	.word	0x20001648
    fdac:	0000ff21 	.word	0x0000ff21
    fdb0:	20000000 	.word	0x20000000
    fdb4:	0000fdf1 	.word	0x0000fdf1
    fdb8:	000170d1 	.word	0x000170d1
    fdbc:	0000fd09 	.word	0x0000fd09
    fdc0:	0000fc75 	.word	0x0000fc75

0000fdc4 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
    fdc4:	4770      	bx	lr
	...

0000fdc8 <_ZL9TxTimeoutPK10timer_task>:
	//gpio_toggle_pin_level(LED0);
}
static void TxTimeout(const struct timer_task *const timer_task){
	arinc.ar->txTimeout=true;
    fdc8:	4b03      	ldr	r3, [pc, #12]	; (fdd8 <_ZL9TxTimeoutPK10timer_task+0x10>)
    fdca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    fdce:	2201      	movs	r2, #1
    fdd0:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    fdd4:	4770      	bx	lr
    fdd6:	bf00      	nop
    fdd8:	20001920 	.word	0x20001920

0000fddc <_ZL12Receiver1Intv>:
}

static void Receiver1Int(void){
	arinc.ar->newMessageR1=true;
    fddc:	4b03      	ldr	r3, [pc, #12]	; (fdec <_ZL12Receiver1Intv+0x10>)
    fdde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    fde2:	2201      	movs	r2, #1
    fde4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	asm("nop");
    fde8:	bf00      	nop
    fdea:	4770      	bx	lr
    fdec:	20001920 	.word	0x20001920

0000fdf0 <_ZN15ARINC_InterfaceD1Ev>:
	//converter=ptrConverter;
} //ARINC_Interface


// default destructor
ARINC_Interface::~ARINC_Interface()
    fdf0:	b538      	push	{r3, r4, r5, lr}
    fdf2:	4604      	mov	r4, r0
    fdf4:	4d10      	ldr	r5, [pc, #64]	; (fe38 <_ZN15ARINC_InterfaceD1Ev+0x48>)
    fdf6:	f105 0310 	add.w	r3, r5, #16
    fdfa:	6003      	str	r3, [r0, #0]
    fdfc:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fe00:	f8c0 32ac 	str.w	r3, [r0, #684]	; 0x2ac
    fe04:	f105 0348 	add.w	r3, r5, #72	; 0x48
    fe08:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
    fe0c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    fe10:	4b0a      	ldr	r3, [pc, #40]	; (fe3c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
    fe12:	4798      	blx	r3
    fe14:	f105 0158 	add.w	r1, r5, #88	; 0x58
    fe18:	4620      	mov	r0, r4
    fe1a:	4b09      	ldr	r3, [pc, #36]	; (fe40 <_ZN15ARINC_InterfaceD1Ev+0x50>)
    fe1c:	4798      	blx	r3
    fe1e:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    fe22:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
    fe26:	4b07      	ldr	r3, [pc, #28]	; (fe44 <_ZN15ARINC_InterfaceD1Ev+0x54>)
    fe28:	4798      	blx	r3
    fe2a:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
    fe2e:	4b06      	ldr	r3, [pc, #24]	; (fe48 <_ZN15ARINC_InterfaceD1Ev+0x58>)
    fe30:	4798      	blx	r3
{
} //~ARINC_Interface
    fe32:	4620      	mov	r0, r4
    fe34:	bd38      	pop	{r3, r4, r5, pc}
    fe36:	bf00      	nop
    fe38:	00019d0c 	.word	0x00019d0c
    fe3c:	0001027d 	.word	0x0001027d
    fe40:	0000f8e1 	.word	0x0000f8e1
    fe44:	000106e5 	.word	0x000106e5
    fe48:	0000fbc5 	.word	0x0000fbc5

0000fe4c <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
    fe4c:	b508      	push	{r3, lr}
    fe4e:	6803      	ldr	r3, [r0, #0]
    fe50:	f853 3c10 	ldr.w	r3, [r3, #-16]
    fe54:	4418      	add	r0, r3
    fe56:	4b01      	ldr	r3, [pc, #4]	; (fe5c <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x10>)
    fe58:	4798      	blx	r3
    fe5a:	bd08      	pop	{r3, pc}
    fe5c:	0000fdf1 	.word	0x0000fdf1

0000fe60 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
    fe60:	b510      	push	{r4, lr}
    fe62:	4604      	mov	r4, r0
} //~ARINC_Interface
    fe64:	4b04      	ldr	r3, [pc, #16]	; (fe78 <_ZN15ARINC_InterfaceD0Ev+0x18>)
    fe66:	4798      	blx	r3
    fe68:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fe6c:	4620      	mov	r0, r4
    fe6e:	4b03      	ldr	r3, [pc, #12]	; (fe7c <_ZN15ARINC_InterfaceD0Ev+0x1c>)
    fe70:	4798      	blx	r3
    fe72:	4620      	mov	r0, r4
    fe74:	bd10      	pop	{r4, pc}
    fe76:	bf00      	nop
    fe78:	0000fdf1 	.word	0x0000fdf1
    fe7c:	000170dd 	.word	0x000170dd

0000fe80 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
    fe80:	b508      	push	{r3, lr}
    fe82:	6803      	ldr	r3, [r0, #0]
    fe84:	f853 3c10 	ldr.w	r3, [r3, #-16]
    fe88:	4418      	add	r0, r3
    fe8a:	4b01      	ldr	r3, [pc, #4]	; (fe90 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x10>)
    fe8c:	4798      	blx	r3
    fe8e:	bd08      	pop	{r3, pc}
    fe90:	0000fe61 	.word	0x0000fe61

0000fe94 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
    fe94:	b538      	push	{r3, r4, r5, lr}
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
		if (receiverBuffer[i][3]==label)
    fe96:	6905      	ldr	r5, [r0, #16]
    fe98:	682a      	ldr	r2, [r5, #0]
    fe9a:	78d3      	ldrb	r3, [r2, #3]
    fe9c:	428b      	cmp	r3, r1
    fe9e:	d00b      	beq.n	feb8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
    fea0:	2301      	movs	r3, #1
    fea2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    fea6:	78d4      	ldrb	r4, [r2, #3]
    fea8:	428c      	cmp	r4, r1
    feaa:	d005      	beq.n	feb8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
    feac:	3301      	adds	r3, #1
    feae:	b2db      	uxtb	r3, r3
    feb0:	2b1f      	cmp	r3, #31
    feb2:	ddf6      	ble.n	fea2 <_ZN15ARINC_Interface15ReadBufferLabelEh+0xe>
			return data;
		}
		
	}

	return 0;
    feb4:	2000      	movs	r0, #0
}
    feb6:	bd38      	pop	{r3, r4, r5, pc}
			data=FourBytesArray2Uint32(receiverBuffer[i]);
    feb8:	6803      	ldr	r3, [r0, #0]
    feba:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    febe:	4611      	mov	r1, r2
    fec0:	4418      	add	r0, r3
    fec2:	4b01      	ldr	r3, [pc, #4]	; (fec8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x34>)
    fec4:	4798      	blx	r3
			return data;
    fec6:	bd38      	pop	{r3, r4, r5, pc}
    fec8:	0000fbe5 	.word	0x0000fbe5

0000fecc <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
    fecc:	b508      	push	{r3, lr}
    fece:	6803      	ldr	r3, [r0, #0]
    fed0:	f853 3c14 	ldr.w	r3, [r3, #-20]
    fed4:	4418      	add	r0, r3
    fed6:	4b01      	ldr	r3, [pc, #4]	; (fedc <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x10>)
    fed8:	4798      	blx	r3
    feda:	bd08      	pop	{r3, pc}
    fedc:	0000fe95 	.word	0x0000fe95

0000fee0 <_ZN15ARINC_InterfaceC2Ev>:
ARINC_Interface::ARINC_Interface()
    fee0:	b538      	push	{r3, r4, r5, lr}
    fee2:	4604      	mov	r4, r0
    fee4:	460d      	mov	r5, r1
    fee6:	3104      	adds	r1, #4
    fee8:	4b0a      	ldr	r3, [pc, #40]	; (ff14 <_ZN15ARINC_InterfaceC2Ev+0x34>)
    feea:	4798      	blx	r3
    feec:	682b      	ldr	r3, [r5, #0]
    feee:	6023      	str	r3, [r4, #0]
    fef0:	692a      	ldr	r2, [r5, #16]
    fef2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    fef6:	50e2      	str	r2, [r4, r3]
    fef8:	696a      	ldr	r2, [r5, #20]
    fefa:	6823      	ldr	r3, [r4, #0]
    fefc:	f853 3c10 	ldr.w	r3, [r3, #-16]
    ff00:	50e2      	str	r2, [r4, r3]
    ff02:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    ff06:	4b04      	ldr	r3, [pc, #16]	; (ff18 <_ZN15ARINC_InterfaceC2Ev+0x38>)
    ff08:	4798      	blx	r3
	ptrARINCInterface=this;
    ff0a:	4b04      	ldr	r3, [pc, #16]	; (ff1c <_ZN15ARINC_InterfaceC2Ev+0x3c>)
    ff0c:	601c      	str	r4, [r3, #0]
} //ARINC_Interface
    ff0e:	4620      	mov	r0, r4
    ff10:	bd38      	pop	{r3, r4, r5, pc}
    ff12:	bf00      	nop
    ff14:	0000f8c5 	.word	0x0000f8c5
    ff18:	00010271 	.word	0x00010271
    ff1c:	20001c00 	.word	0x20001c00

0000ff20 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
    ff20:	b538      	push	{r3, r4, r5, lr}
    ff22:	4604      	mov	r4, r0
    ff24:	f500 702b 	add.w	r0, r0, #684	; 0x2ac
    ff28:	4b10      	ldr	r3, [pc, #64]	; (ff6c <_ZN15ARINC_InterfaceC1Ev+0x4c>)
    ff2a:	4798      	blx	r3
    ff2c:	4d10      	ldr	r5, [pc, #64]	; (ff70 <_ZN15ARINC_InterfaceC1Ev+0x50>)
    ff2e:	f105 0380 	add.w	r3, r5, #128	; 0x80
    ff32:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    ff36:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    ff3a:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
    ff3e:	f105 0158 	add.w	r1, r5, #88	; 0x58
    ff42:	4620      	mov	r0, r4
    ff44:	4b0b      	ldr	r3, [pc, #44]	; (ff74 <_ZN15ARINC_InterfaceC1Ev+0x54>)
    ff46:	4798      	blx	r3
    ff48:	f105 0310 	add.w	r3, r5, #16
    ff4c:	6023      	str	r3, [r4, #0]
    ff4e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    ff52:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
    ff56:	3548      	adds	r5, #72	; 0x48
    ff58:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
    ff5c:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    ff60:	4b05      	ldr	r3, [pc, #20]	; (ff78 <_ZN15ARINC_InterfaceC1Ev+0x58>)
    ff62:	4798      	blx	r3
	ptrARINCInterface=this;
    ff64:	4b05      	ldr	r3, [pc, #20]	; (ff7c <_ZN15ARINC_InterfaceC1Ev+0x5c>)
    ff66:	601c      	str	r4, [r3, #0]
} //ARINC_Interface
    ff68:	4620      	mov	r0, r4
    ff6a:	bd38      	pop	{r3, r4, r5, pc}
    ff6c:	0000fbb9 	.word	0x0000fbb9
    ff70:	00019d0c 	.word	0x00019d0c
    ff74:	0000f8c5 	.word	0x0000f8c5
    ff78:	00010271 	.word	0x00010271
    ff7c:	20001c00 	.word	0x20001c00

0000ff80 <_ZN15ARINC_InterfaceD2Ev>:
ARINC_Interface::~ARINC_Interface()
    ff80:	b538      	push	{r3, r4, r5, lr}
    ff82:	4604      	mov	r4, r0
    ff84:	460d      	mov	r5, r1
    ff86:	680b      	ldr	r3, [r1, #0]
    ff88:	6003      	str	r3, [r0, #0]
    ff8a:	690a      	ldr	r2, [r1, #16]
    ff8c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    ff90:	50c2      	str	r2, [r0, r3]
    ff92:	694a      	ldr	r2, [r1, #20]
    ff94:	6803      	ldr	r3, [r0, #0]
    ff96:	f853 3c10 	ldr.w	r3, [r3, #-16]
    ff9a:	50c2      	str	r2, [r0, r3]
    ff9c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    ffa0:	4b03      	ldr	r3, [pc, #12]	; (ffb0 <_ZN15ARINC_InterfaceD2Ev+0x30>)
    ffa2:	4798      	blx	r3
    ffa4:	1d29      	adds	r1, r5, #4
    ffa6:	4620      	mov	r0, r4
    ffa8:	4b02      	ldr	r3, [pc, #8]	; (ffb4 <_ZN15ARINC_InterfaceD2Ev+0x34>)
    ffaa:	4798      	blx	r3
} //~ARINC_Interface
    ffac:	4620      	mov	r0, r4
    ffae:	bd38      	pop	{r3, r4, r5, pc}
    ffb0:	0001027d 	.word	0x0001027d
    ffb4:	0000f8e1 	.word	0x0000f8e1

0000ffb8 <_ZN15ARINC_Interface4InitEv>:
bool	ARINC_Interface::Init(void){
    ffb8:	b570      	push	{r4, r5, r6, lr}
    ffba:	4604      	mov	r4, r0
	MessageCount=0; MessageCount1=0; MessageCount2=0;
    ffbc:	2300      	movs	r3, #0
    ffbe:	f880 3155 	strb.w	r3, [r0, #341]	; 0x155
    ffc2:	f880 317c 	strb.w	r3, [r0, #380]	; 0x17c
    ffc6:	f880 317d 	strb.w	r3, [r0, #381]	; 0x17d
	BITRATE0=false;
    ffca:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	BITRATE1=false;
    ffce:	f880 3159 	strb.w	r3, [r0, #345]	; 0x159
	BITRATE2=false;
    ffd2:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
	PARITY=false;
    ffd6:	f880 315b 	strb.w	r3, [r0, #347]	; 0x15b
}

void ARINC_Interface::HW_RESET(void){
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
    ffda:	2001      	movs	r0, #1
    ffdc:	4b2a      	ldr	r3, [pc, #168]	; (10088 <STACK_SIZE+0x88>)
    ffde:	4798      	blx	r3
	InitBuffer();
    ffe0:	4620      	mov	r0, r4
    ffe2:	4b2a      	ldr	r3, [pc, #168]	; (1008c <STACK_SIZE+0x8c>)
    ffe4:	4798      	blx	r3
	statusHolt=HI3593.Init();
    ffe6:	f504 76c8 	add.w	r6, r4, #400	; 0x190
    ffea:	4630      	mov	r0, r6
    ffec:	4b28      	ldr	r3, [pc, #160]	; (10090 <STACK_SIZE+0x90>)
    ffee:	4798      	blx	r3
    fff0:	f884 017f 	strb.w	r0, [r4, #383]	; 0x17f
	if (statusHolt!=TSR_Default){
    fff4:	2801      	cmp	r0, #1
    fff6:	d01f      	beq.n	10038 <STACK_SIZE+0x38>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
    fff8:	4926      	ldr	r1, [pc, #152]	; (10094 <STACK_SIZE+0x94>)
    fffa:	4827      	ldr	r0, [pc, #156]	; (10098 <STACK_SIZE+0x98>)
    fffc:	4b27      	ldr	r3, [pc, #156]	; (1009c <STACK_SIZE+0x9c>)
    fffe:	4798      	blx	r3
		isOK=false;
   10000:	2300      	movs	r3, #0
   10002:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
	arincTimer.Init();
   10006:	4d26      	ldr	r5, [pc, #152]	; (100a0 <STACK_SIZE+0xa0>)
   10008:	4628      	mov	r0, r5
   1000a:	4b26      	ldr	r3, [pc, #152]	; (100a4 <STACK_SIZE+0xa4>)
   1000c:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   1000e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10012:	4925      	ldr	r1, [pc, #148]	; (100a8 <STACK_SIZE+0xa8>)
   10014:	4628      	mov	r0, r5
   10016:	4e25      	ldr	r6, [pc, #148]	; (100ac <STACK_SIZE+0xac>)
   10018:	47b0      	blx	r6
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   1001a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1001e:	4924      	ldr	r1, [pc, #144]	; (100b0 <STACK_SIZE+0xb0>)
   10020:	4628      	mov	r0, r5
   10022:	47b0      	blx	r6
	ext_irq_register(ARINCR1Int, Receiver1Int);
   10024:	4923      	ldr	r1, [pc, #140]	; (100b4 <STACK_SIZE+0xb4>)
   10026:	2057      	movs	r0, #87	; 0x57
   10028:	4b23      	ldr	r3, [pc, #140]	; (100b8 <STACK_SIZE+0xb8>)
   1002a:	4798      	blx	r3
	arincTimer.start();
   1002c:	4628      	mov	r0, r5
   1002e:	4b23      	ldr	r3, [pc, #140]	; (100bc <STACK_SIZE+0xbc>)
   10030:	4798      	blx	r3
}
   10032:	f894 0180 	ldrb.w	r0, [r4, #384]	; 0x180
   10036:	bd70      	pop	{r4, r5, r6, pc}
		isOK=true;
   10038:	2301      	movs	r3, #1
   1003a:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
		newMessageR1=false;
   1003e:	2500      	movs	r5, #0
   10040:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124
		newMessageR2=false;
   10044:	f884 5125 	strb.w	r5, [r4, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   10048:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
		MessageCount=0;
   1004c:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   10050:	231d      	movs	r3, #29
   10052:	f884 3188 	strb.w	r3, [r4, #392]	; 0x188
		Arate=0;
   10056:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   1005a:	f8c4 5127 	str.w	r5, [r4, #295]	; 0x127
   1005e:	f8c4 512b 	str.w	r5, [r4, #299]	; 0x12b
   10062:	f8c4 512f 	str.w	r5, [r4, #303]	; 0x12f
   10066:	f8c4 5133 	str.w	r5, [r4, #307]	; 0x133
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   1006a:	4630      	mov	r0, r6
   1006c:	4b14      	ldr	r3, [pc, #80]	; (100c0 <STACK_SIZE+0xc0>)
   1006e:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   10070:	4630      	mov	r0, r6
   10072:	4b14      	ldr	r3, [pc, #80]	; (100c4 <STACK_SIZE+0xc4>)
   10074:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   10076:	4630      	mov	r0, r6
   10078:	4b13      	ldr	r3, [pc, #76]	; (100c8 <STACK_SIZE+0xc8>)
   1007a:	4798      	blx	r3
		Rec1Parity =0;
   1007c:	f884 518a 	strb.w	r5, [r4, #394]	; 0x18a
		Rec2Parity =0;
   10080:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
   10084:	e7bf      	b.n	10006 <STACK_SIZE+0x6>
   10086:	bf00      	nop
   10088:	00003ea1 	.word	0x00003ea1
   1008c:	0000f8fd 	.word	0x0000f8fd
   10090:	00010629 	.word	0x00010629
   10094:	00019e00 	.word	0x00019e00
   10098:	20002760 	.word	0x20002760
   1009c:	00011e01 	.word	0x00011e01
   100a0:	20002740 	.word	0x20002740
   100a4:	00011365 	.word	0x00011365
   100a8:	0000fdc5 	.word	0x0000fdc5
   100ac:	00011475 	.word	0x00011475
   100b0:	0000fdc9 	.word	0x0000fdc9
   100b4:	0000fddd 	.word	0x0000fddd
   100b8:	00003f69 	.word	0x00003f69
   100bc:	000113b5 	.word	0x000113b5
   100c0:	00010319 	.word	0x00010319
   100c4:	00010399 	.word	0x00010399
   100c8:	000104e1 	.word	0x000104e1

000100cc <_ZN15ARINC_Interface12ReadRXBufferEh>:
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   100cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100d0:	b0c3      	sub	sp, #268	; 0x10c
   100d2:	4606      	mov	r6, r0
   100d4:	468b      	mov	fp, r1
	usb.println("r\n---!got message!----");
   100d6:	492f      	ldr	r1, [pc, #188]	; (10194 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc8>)
   100d8:	482f      	ldr	r0, [pc, #188]	; (10198 <_ZN15ARINC_Interface12ReadRXBufferEh+0xcc>)
   100da:	4b30      	ldr	r3, [pc, #192]	; (1019c <_ZN15ARINC_Interface12ReadRXBufferEh+0xd0>)
   100dc:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   100de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   100e2:	b672      	cpsid	i
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   100e4:	ea4f 184b 	mov.w	r8, fp, lsl #5
   100e8:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
   100ec:	fa5f f888 	uxtb.w	r8, r8
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   100f0:	f10b 0304 	add.w	r3, fp, #4
   100f4:	015b      	lsls	r3, r3, #5
   100f6:	b2db      	uxtb	r3, r3
   100f8:	9301      	str	r3, [sp, #4]
   100fa:	2400      	movs	r4, #0
   100fc:	4625      	mov	r5, r4
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   100fe:	f506 77c8 	add.w	r7, r6, #400	; 0x190
   10102:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 101a4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd8>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   10106:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 101a8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xdc>
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   1010a:	4641      	mov	r1, r8
   1010c:	4638      	mov	r0, r7
   1010e:	47c8      	blx	r9
   10110:	f886 017e 	strb.w	r0, [r6, #382]	; 0x17e
		if(((statusRegister & FFEMPTY) == 0))
   10114:	f010 0f01 	tst.w	r0, #1
   10118:	d111      	bne.n	1013e <_ZN15ARINC_Interface12ReadRXBufferEh+0x72>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   1011a:	f506 72b2 	add.w	r2, r6, #356	; 0x164
   1011e:	9901      	ldr	r1, [sp, #4]
   10120:	4638      	mov	r0, r7
   10122:	47d0      	blx	sl
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   10124:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
   10128:	aa42      	add	r2, sp, #264	; 0x108
   1012a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   1012e:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
   10132:	6023      	str	r3, [r4, #0]
			messagesCounter++;
   10134:	3501      	adds	r5, #1
   10136:	b2ed      	uxtb	r5, r5
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   10138:	462c      	mov	r4, r5
   1013a:	2d3f      	cmp	r5, #63	; 0x3f
   1013c:	dde5      	ble.n	1010a <_ZN15ARINC_Interface12ReadRXBufferEh+0x3e>
  __ASM volatile ("dmb 0xF":::"memory");
   1013e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10142:	b662      	cpsie	i
		if ((n==1))
   10144:	f1bb 0f01 	cmp.w	fp, #1
   10148:	d00a      	beq.n	10160 <_ZN15ARINC_Interface12ReadRXBufferEh+0x94>
		else if (n==2)
   1014a:	f1bb 0f02 	cmp.w	fp, #2
			newMessageR2=false;
   1014e:	bf04      	itt	eq
   10150:	2300      	moveq	r3, #0
   10152:	f886 3125 	strbeq.w	r3, [r6, #293]	; 0x125
	for (uint8_t i = 0; i < messagesCounter; i++)
   10156:	b1c4      	cbz	r4, 1018a <_ZN15ARINC_Interface12ReadRXBufferEh+0xbe>
   10158:	2100      	movs	r1, #0
   1015a:	460d      	mov	r5, r1
			SortReceivedData(receiver[i]);
   1015c:	4f10      	ldr	r7, [pc, #64]	; (101a0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd4>)
   1015e:	e008      	b.n	10172 <_ZN15ARINC_Interface12ReadRXBufferEh+0xa6>
			newMessageR1=false;
   10160:	2300      	movs	r3, #0
   10162:	f886 3124 	strb.w	r3, [r6, #292]	; 0x124
   10166:	e7f6      	b.n	10156 <_ZN15ARINC_Interface12ReadRXBufferEh+0x8a>
	for (uint8_t i = 0; i < messagesCounter; i++)
   10168:	3501      	adds	r5, #1
   1016a:	b2ed      	uxtb	r5, r5
   1016c:	4629      	mov	r1, r5
   1016e:	42a5      	cmp	r5, r4
   10170:	da0b      	bge.n	1018a <_ZN15ARINC_Interface12ReadRXBufferEh+0xbe>
		if (receiver[i][3]>0)
   10172:	ab02      	add	r3, sp, #8
   10174:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10178:	78db      	ldrb	r3, [r3, #3]
   1017a:	2b00      	cmp	r3, #0
   1017c:	d0f4      	beq.n	10168 <_ZN15ARINC_Interface12ReadRXBufferEh+0x9c>
			SortReceivedData(receiver[i]);
   1017e:	ab02      	add	r3, sp, #8
   10180:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10184:	4630      	mov	r0, r6
   10186:	47b8      	blx	r7
   10188:	e7ee      	b.n	10168 <_ZN15ARINC_Interface12ReadRXBufferEh+0x9c>
}
   1018a:	f896 017e 	ldrb.w	r0, [r6, #382]	; 0x17e
   1018e:	b043      	add	sp, #268	; 0x10c
   10190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10194:	00019e44 	.word	0x00019e44
   10198:	20002760 	.word	0x20002760
   1019c:	00011e01 	.word	0x00011e01
   101a0:	0000faa1 	.word	0x0000faa1
   101a4:	000105a5 	.word	0x000105a5
   101a8:	000103e5 	.word	0x000103e5

000101ac <_ZN15ARINC_Interface15ReadBufferLabelEm>:
uint32_t ARINC_Interface::ReadBufferLabel(uint32_t label){
   101ac:	b510      	push	{r4, lr}
   101ae:	4604      	mov	r4, r0
	uint8_t	l=Label2Byte((uint32_t)label);
   101b0:	6803      	ldr	r3, [r0, #0]
   101b2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   101b6:	5823      	ldr	r3, [r4, r0]
   101b8:	685b      	ldr	r3, [r3, #4]
   101ba:	4420      	add	r0, r4
   101bc:	4798      	blx	r3
	return (uint32_t)ReadBufferLabel(l);
   101be:	6823      	ldr	r3, [r4, #0]
   101c0:	689b      	ldr	r3, [r3, #8]
   101c2:	4601      	mov	r1, r0
   101c4:	4620      	mov	r0, r4
   101c6:	4798      	blx	r3
}
   101c8:	bd10      	pop	{r4, pc}
	...

000101cc <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:
uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   101cc:	b538      	push	{r3, r4, r5, lr}
   101ce:	4604      	mov	r4, r0
   101d0:	460d      	mov	r5, r1
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   101d2:	6803      	ldr	r3, [r0, #0]
   101d4:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   101d8:	6862      	ldr	r2, [r4, #4]
   101da:	4420      	add	r0, r4
   101dc:	4b11      	ldr	r3, [pc, #68]	; (10224 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x58>)
   101de:	4798      	blx	r3
   101e0:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (transmitBuffer[index][3]|transmitBuffer[index][2]|transmitBuffer[index][1]>0)
   101e4:	6963      	ldr	r3, [r4, #20]
   101e6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   101ea:	78d3      	ldrb	r3, [r2, #3]
   101ec:	7891      	ldrb	r1, [r2, #2]
   101ee:	430b      	orrs	r3, r1
   101f0:	7851      	ldrb	r1, [r2, #1]
   101f2:	2900      	cmp	r1, #0
   101f4:	bf18      	it	ne
   101f6:	f043 0301 	orrne.w	r3, r3, #1
   101fa:	b90b      	cbnz	r3, 10200 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x34>
}
   101fc:	4628      	mov	r0, r5
   101fe:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(localBuffer,transmitBuffer[index],4);
   10200:	6813      	ldr	r3, [r2, #0]
   10202:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  __ASM volatile ("dmb 0xF":::"memory");
   10206:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   1020a:	b672      	cpsid	i
			HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   1020c:	f504 72b0 	add.w	r2, r4, #352	; 0x160
   10210:	210c      	movs	r1, #12
   10212:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   10216:	4b04      	ldr	r3, [pc, #16]	; (10228 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x5c>)
   10218:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   1021a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1021e:	b662      	cpsie	i
   10220:	e7ec      	b.n	101fc <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x30>
   10222:	bf00      	nop
   10224:	0000fbc7 	.word	0x0000fbc7
   10228:	00010461 	.word	0x00010461

0001022c <_ZN15ARINC_Interface16TransmitTXBufferEv>:
void	ARINC_Interface::TransmitTXBuffer(void){
   1022c:	b570      	push	{r4, r5, r6, lr}
   1022e:	4605      	mov	r5, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10230:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   10234:	4b0c      	ldr	r3, [pc, #48]	; (10268 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
   10236:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1023a:	2400      	movs	r4, #0
			TrasmitSingleLabel(l);
   1023c:	4e0b      	ldr	r6, [pc, #44]	; (1026c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x40>)
   1023e:	e002      	b.n	10246 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x1a>
   10240:	3401      	adds	r4, #1
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   10242:	2c20      	cmp	r4, #32
   10244:	d006      	beq.n	10254 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x28>
		if (LabelsArrayTX[i]>0)
   10246:	686b      	ldr	r3, [r5, #4]
   10248:	5d19      	ldrb	r1, [r3, r4]
   1024a:	2900      	cmp	r1, #0
   1024c:	d0f8      	beq.n	10240 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
			TrasmitSingleLabel(l);
   1024e:	4628      	mov	r0, r5
   10250:	47b0      	blx	r6
   10252:	e7f5      	b.n	10240 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
	txTimeout=false;
   10254:	2300      	movs	r3, #0
   10256:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1025a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1025e:	4b02      	ldr	r3, [pc, #8]	; (10268 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
   10260:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10264:	bd70      	pop	{r4, r5, r6, pc}
   10266:	bf00      	nop
   10268:	41008000 	.word	0x41008000
   1026c:	000101cd 	.word	0x000101cd

00010270 <_ZN15Holt_3593_ClassC1Ev>:
unsigned char LabelPriority2 [3];
static SPI_Syn_Class	staticSPI(&SPI_HI3593);

Holt_3593_Class::Holt_3593_Class()
{
	spi=&staticSPI;
   10270:	4b01      	ldr	r3, [pc, #4]	; (10278 <_ZN15Holt_3593_ClassC1Ev+0x8>)
   10272:	6183      	str	r3, [r0, #24]
} //Holt_3593_Class
   10274:	4770      	bx	lr
   10276:	bf00      	nop
   10278:	20001c04 	.word	0x20001c04

0001027c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
{
} //~Holt_3593_Class
   1027c:	4770      	bx	lr
	...

00010280 <_ZN15Holt_3593_Class4openEv>:
	 return R_Register (R_TSR);
	 
	 
 }
 
 void Holt_3593_Class::open(){
   10280:	b508      	push	{r3, lr}
	 	spi->Enable();
   10282:	6980      	ldr	r0, [r0, #24]
   10284:	4b03      	ldr	r3, [pc, #12]	; (10294 <_ZN15Holt_3593_Class4openEv+0x14>)
   10286:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10288:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1028c:	4b02      	ldr	r3, [pc, #8]	; (10298 <_ZN15Holt_3593_Class4openEv+0x18>)
   1028e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   10292:	bd08      	pop	{r3, pc}
   10294:	00010e41 	.word	0x00010e41
   10298:	41008000 	.word	0x41008000

0001029c <_ZN15Holt_3593_Class5closeEv>:
		 SS_Low();
 }
  void Holt_3593_Class::close(){
   1029c:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1029e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   102a2:	4b03      	ldr	r3, [pc, #12]	; (102b0 <_ZN15Holt_3593_Class5closeEv+0x14>)
   102a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	    SS_High();
	  spi->Disable();
   102a8:	6980      	ldr	r0, [r0, #24]
   102aa:	4b02      	ldr	r3, [pc, #8]	; (102b4 <_ZN15Holt_3593_Class5closeEv+0x18>)
   102ac:	4798      	blx	r3
   102ae:	bd08      	pop	{r3, pc}
   102b0:	41008000 	.word	0x41008000
   102b4:	00010f05 	.word	0x00010f05

000102b8 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   102b8:	b530      	push	{r4, r5, lr}
   102ba:	b083      	sub	sp, #12
   102bc:	4604      	mov	r4, r0
   102be:	f88d 1007 	strb.w	r1, [sp, #7]
	while (!spi->IsSPIReady()); 
   102c2:	4d0a      	ldr	r5, [pc, #40]	; (102ec <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
   102c4:	69a0      	ldr	r0, [r4, #24]
   102c6:	47a8      	blx	r5
   102c8:	2800      	cmp	r0, #0
   102ca:	d0fb      	beq.n	102c4 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi->Write(&byte,1);
   102cc:	2201      	movs	r2, #1
   102ce:	f10d 0107 	add.w	r1, sp, #7
   102d2:	69a0      	ldr	r0, [r4, #24]
   102d4:	4b06      	ldr	r3, [pc, #24]	; (102f0 <_ZN15Holt_3593_Class9Send_ByteEh+0x38>)
   102d6:	4798      	blx	r3
	while (!spi->IsSPIReady());  
   102d8:	4d04      	ldr	r5, [pc, #16]	; (102ec <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
   102da:	69a0      	ldr	r0, [r4, #24]
   102dc:	47a8      	blx	r5
   102de:	2800      	cmp	r0, #0
   102e0:	d0fb      	beq.n	102da <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
	return byte;
}
   102e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   102e6:	b003      	add	sp, #12
   102e8:	bd30      	pop	{r4, r5, pc}
   102ea:	bf00      	nop
   102ec:	00010f25 	.word	0x00010f25
   102f0:	00010e7d 	.word	0x00010e7d

000102f4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   102f4:	b570      	push	{r4, r5, r6, lr}
   102f6:	4604      	mov	r4, r0
   102f8:	460e      	mov	r6, r1
   102fa:	4615      	mov	r5, r2
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   102fc:	4b04      	ldr	r3, [pc, #16]	; (10310 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x1c>)
   102fe:	4798      	blx	r3
  if (return_when_done) {  // optional wait for SPIF flag
   10300:	b125      	cbz	r5, 1030c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x18>
    while (!spi->IsSPIReady());     
   10302:	4d04      	ldr	r5, [pc, #16]	; (10314 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x20>)
   10304:	69a0      	ldr	r0, [r4, #24]
   10306:	47a8      	blx	r5
   10308:	2800      	cmp	r0, #0
   1030a:	d0fb      	beq.n	10304 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x10>
}
   1030c:	4630      	mov	r0, r6
   1030e:	bd70      	pop	{r4, r5, r6, pc}
   10310:	000102b9 	.word	0x000102b9
   10314:	00010f25 	.word	0x00010f25

00010318 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:
{
   10318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1031c:	4606      	mov	r6, r0
  open();
   1031e:	4b0c      	ldr	r3, [pc, #48]	; (10350 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x38>)
   10320:	4798      	blx	r3
  dummy = txrx8bits_8(0x14,1);  
   10322:	2201      	movs	r2, #1
   10324:	2114      	movs	r1, #20
   10326:	4630      	mov	r0, r6
   10328:	4b0a      	ldr	r3, [pc, #40]	; (10354 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
   1032a:	4798      	blx	r3
   1032c:	4d0a      	ldr	r5, [pc, #40]	; (10358 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x40>)
   1032e:	f105 0420 	add.w	r4, r5, #32
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   10332:	f04f 0801 	mov.w	r8, #1
   10336:	4f07      	ldr	r7, [pc, #28]	; (10354 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
   10338:	4642      	mov	r2, r8
   1033a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1033e:	4630      	mov	r0, r6
   10340:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
   10342:	42ac      	cmp	r4, r5
   10344:	d1f8      	bne.n	10338 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
	close();
   10346:	4630      	mov	r0, r6
   10348:	4b04      	ldr	r3, [pc, #16]	; (1035c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x44>)
   1034a:	4798      	blx	r3
   1034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10350:	00010281 	.word	0x00010281
   10354:	000102f5 	.word	0x000102f5
   10358:	0001a80c 	.word	0x0001a80c
   1035c:	0001029d 	.word	0x0001029d

00010360 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   10360:	b530      	push	{r4, r5, lr}
   10362:	b083      	sub	sp, #12
   10364:	4604      	mov	r4, r0
	uint8_t byte;
	
	while (!spi->IsSPIReady());
   10366:	4d0a      	ldr	r5, [pc, #40]	; (10390 <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
   10368:	69a0      	ldr	r0, [r4, #24]
   1036a:	47a8      	blx	r5
   1036c:	2800      	cmp	r0, #0
   1036e:	d0fb      	beq.n	10368 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi->Read(&byte,1);
   10370:	2201      	movs	r2, #1
   10372:	f10d 0107 	add.w	r1, sp, #7
   10376:	69a0      	ldr	r0, [r4, #24]
   10378:	4b06      	ldr	r3, [pc, #24]	; (10394 <_ZN15Holt_3593_Class8Get_ByteEv+0x34>)
   1037a:	4798      	blx	r3
	while (!spi->IsSPIReady());
   1037c:	4d04      	ldr	r5, [pc, #16]	; (10390 <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
   1037e:	69a0      	ldr	r0, [r4, #24]
   10380:	47a8      	blx	r5
   10382:	2800      	cmp	r0, #0
   10384:	d0fb      	beq.n	1037e <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>


	
	return byte;
}	
   10386:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1038a:	b003      	add	sp, #12
   1038c:	bd30      	pop	{r4, r5, pc}
   1038e:	bf00      	nop
   10390:	00010f25 	.word	0x00010f25
   10394:	00010ec1 	.word	0x00010ec1

00010398 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   10398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1039c:	4606      	mov	r6, r0
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   1039e:	4b0d      	ldr	r3, [pc, #52]	; (103d4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x3c>)
   103a0:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   103a2:	2201      	movs	r2, #1
   103a4:	2128      	movs	r1, #40	; 0x28
   103a6:	4630      	mov	r0, r6
   103a8:	4b0b      	ldr	r3, [pc, #44]	; (103d8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
   103aa:	4798      	blx	r3
   103ac:	4d0b      	ldr	r5, [pc, #44]	; (103dc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x44>)
   103ae:	f105 043c 	add.w	r4, r5, #60	; 0x3c
   103b2:	351c      	adds	r5, #28
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   103b4:	f04f 0801 	mov.w	r8, #1
   103b8:	4f07      	ldr	r7, [pc, #28]	; (103d8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
   103ba:	4642      	mov	r2, r8
   103bc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   103c0:	4630      	mov	r0, r6
   103c2:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
   103c4:	42ac      	cmp	r4, r5
   103c6:	d1f8      	bne.n	103ba <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x22>
  }    
 	  
	close();
   103c8:	4630      	mov	r0, r6
   103ca:	4b05      	ldr	r3, [pc, #20]	; (103e0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x48>)
   103cc:	4798      	blx	r3
   103ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103d2:	bf00      	nop
   103d4:	00010281 	.word	0x00010281
   103d8:	000102f5 	.word	0x000102f5
   103dc:	20001c04 	.word	0x20001c04
   103e0:	0001029d 	.word	0x0001029d

000103e4 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   103e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103e8:	4605      	mov	r5, r0
   103ea:	460c      	mov	r4, r1
   103ec:	4690      	mov	r8, r2
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   103ee:	29a0      	cmp	r1, #160	; 0xa0
   103f0:	d019      	beq.n	10426 <_ZN15Holt_3593_Class9ArincReadEhPh+0x42>
       count++;								 // then it has 4 bytes.
   103f2:	29c0      	cmp	r1, #192	; 0xc0
   103f4:	bf14      	ite	ne
   103f6:	2603      	movne	r6, #3
   103f8:	2604      	moveq	r6, #4
	   }                        
  open();
   103fa:	4628      	mov	r0, r5
   103fc:	4b0b      	ldr	r3, [pc, #44]	; (1042c <_ZN15Holt_3593_Class9ArincReadEhPh+0x48>)
   103fe:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   10400:	4621      	mov	r1, r4
   10402:	4628      	mov	r0, r5
   10404:	4b0a      	ldr	r3, [pc, #40]	; (10430 <_ZN15Holt_3593_Class9ArincReadEhPh+0x4c>)
   10406:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   10408:	2400      	movs	r4, #0
      dummy = Get_Byte(); 
   1040a:	4f0a      	ldr	r7, [pc, #40]	; (10434 <_ZN15Holt_3593_Class9ArincReadEhPh+0x50>)
   1040c:	4628      	mov	r0, r5
   1040e:	47b8      	blx	r7
      passedArray[ByteCount] = dummy; 
   10410:	f808 0004 	strb.w	r0, [r8, r4]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   10414:	3401      	adds	r4, #1
   10416:	b2e4      	uxtb	r4, r4
   10418:	42b4      	cmp	r4, r6
   1041a:	dbf7      	blt.n	1040c <_ZN15Holt_3593_Class9ArincReadEhPh+0x28>
     }

  close();
   1041c:	4628      	mov	r0, r5
   1041e:	4b06      	ldr	r3, [pc, #24]	; (10438 <_ZN15Holt_3593_Class9ArincReadEhPh+0x54>)
   10420:	4798      	blx	r3
  
}
   10422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       count++;								 // then it has 4 bytes.
   10426:	2604      	movs	r6, #4
   10428:	e7e7      	b.n	103fa <_ZN15Holt_3593_Class9ArincReadEhPh+0x16>
   1042a:	bf00      	nop
   1042c:	00010281 	.word	0x00010281
   10430:	000102b9 	.word	0x000102b9
   10434:	00010361 	.word	0x00010361
   10438:	0001029d 	.word	0x0001029d

0001043c <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   1043c:	b570      	push	{r4, r5, r6, lr}
   1043e:	4604      	mov	r4, r0
   10440:	460e      	mov	r6, r1
   10442:	4615      	mov	r5, r2
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   10444:	4b04      	ldr	r3, [pc, #16]	; (10458 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x1c>)
   10446:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   10448:	b125      	cbz	r5, 10454 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x18>
		while (!spi->IsSPIReady());      
   1044a:	4d04      	ldr	r5, [pc, #16]	; (1045c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x20>)
   1044c:	69a0      	ldr	r0, [r4, #24]
   1044e:	47a8      	blx	r5
   10450:	2800      	cmp	r0, #0
   10452:	d0fb      	beq.n	1044c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x10>

  rxbyte = txbyte;  // get received data byte from Data Register

  return rxbyte;
  
 }
   10454:	4630      	mov	r0, r6
   10456:	bd70      	pop	{r4, r5, r6, pc}
   10458:	000102b9 	.word	0x000102b9
   1045c:	00010f25 	.word	0x00010f25

00010460 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   10460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10464:	4605      	mov	r5, r0
   10466:	460c      	mov	r4, r1
   10468:	4616      	mov	r6, r2
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   1046a:	4b19      	ldr	r3, [pc, #100]	; (104d0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x70>)
   1046c:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   1046e:	2c18      	cmp	r4, #24
   10470:	d029      	beq.n	104c6 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
   10472:	2c2c      	cmp	r4, #44	; 0x2c
   10474:	d027      	beq.n	104c6 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
   transmitCount=4;                                // Standard messages are 4 bytes
   10476:	2204      	movs	r2, #4
   10478:	4b16      	ldr	r3, [pc, #88]	; (104d4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   1047a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      transmitCount--;
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   1047e:	2201      	movs	r2, #1
   10480:	4621      	mov	r1, r4
   10482:	4628      	mov	r0, r5
   10484:	4b14      	ldr	r3, [pc, #80]	; (104d8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
   10486:	4798      	blx	r3

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   10488:	4b12      	ldr	r3, [pc, #72]	; (104d4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   1048a:	2200      	movs	r2, #0
   1048c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   10490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   10494:	b193      	cbz	r3, 104bc <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x5c>
   10496:	4613      	mov	r3, r2
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   10498:	f04f 0801 	mov.w	r8, #1
   1049c:	4f0e      	ldr	r7, [pc, #56]	; (104d8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   1049e:	4c0d      	ldr	r4, [pc, #52]	; (104d4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   104a0:	4642      	mov	r2, r8
   104a2:	5cf1      	ldrb	r1, [r6, r3]
   104a4:	4628      	mov	r0, r5
   104a6:	47b8      	blx	r7
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   104a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   104ac:	3301      	adds	r3, #1
   104ae:	b2db      	uxtb	r3, r3
   104b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   104b4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   104b8:	4293      	cmp	r3, r2
   104ba:	dbf1      	blt.n	104a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x40>
      }   
 close();
   104bc:	4628      	mov	r0, r5
   104be:	4b07      	ldr	r3, [pc, #28]	; (104dc <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x7c>)
   104c0:	4798      	blx	r3
   104c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      transmitCount--;
   104c6:	2203      	movs	r2, #3
   104c8:	4b02      	ldr	r3, [pc, #8]	; (104d4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   104ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   104ce:	e7d6      	b.n	1047e <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x1e>
   104d0:	00010281 	.word	0x00010281
   104d4:	20001c04 	.word	0x20001c04
   104d8:	0001043d 	.word	0x0001043d
   104dc:	0001029d 	.word	0x0001029d

000104e0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
{
   104e0:	b570      	push	{r4, r5, r6, lr}
   104e2:	4604      	mov	r4, r0
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   104e4:	4b0d      	ldr	r3, [pc, #52]	; (1051c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x3c>)
   104e6:	781a      	ldrb	r2, [r3, #0]
   104e8:	7142      	strb	r2, [r0, #5]
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   104ea:	785a      	ldrb	r2, [r3, #1]
   104ec:	7182      	strb	r2, [r0, #6]
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   104ee:	789b      	ldrb	r3, [r3, #2]
   104f0:	71c3      	strb	r3, [r0, #7]
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   104f2:	1d46      	adds	r6, r0, #5
   104f4:	4632      	mov	r2, r6
   104f6:	2118      	movs	r1, #24
   104f8:	4d09      	ldr	r5, [pc, #36]	; (10520 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x40>)
   104fa:	47a8      	blx	r5
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   104fc:	4b09      	ldr	r3, [pc, #36]	; (10524 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x44>)
   104fe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10502:	7162      	strb	r2, [r4, #5]
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   10504:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   10508:	71a2      	strb	r2, [r4, #6]
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   1050a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1050e:	71e3      	strb	r3, [r4, #7]
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   10510:	4632      	mov	r2, r6
   10512:	212c      	movs	r1, #44	; 0x2c
   10514:	4620      	mov	r0, r4
   10516:	47a8      	blx	r5
   10518:	bd70      	pop	{r4, r5, r6, pc}
   1051a:	bf00      	nop
   1051c:	200001e4 	.word	0x200001e4
   10520:	00010461 	.word	0x00010461
   10524:	20001c04 	.word	0x20001c04

00010528 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   10528:	b538      	push	{r3, r4, r5, lr}
   1052a:	4604      	mov	r4, r0
   1052c:	460d      	mov	r5, r1

 	  uint8_t p(cmd); 
  open();
   1052e:	4b07      	ldr	r3, [pc, #28]	; (1054c <_ZN15Holt_3593_Class9W_CommandEc+0x24>)
   10530:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   10532:	4629      	mov	r1, r5
   10534:	4620      	mov	r0, r4
   10536:	4b06      	ldr	r3, [pc, #24]	; (10550 <_ZN15Holt_3593_Class9W_CommandEc+0x28>)
   10538:	4798      	blx	r3
  while (!spi->IsSPIReady()) {;}      // Wait for data to come back in.
   1053a:	4d06      	ldr	r5, [pc, #24]	; (10554 <_ZN15Holt_3593_Class9W_CommandEc+0x2c>)
   1053c:	69a0      	ldr	r0, [r4, #24]
   1053e:	47a8      	blx	r5
   10540:	2800      	cmp	r0, #0
   10542:	d0fb      	beq.n	1053c <_ZN15Holt_3593_Class9W_CommandEc+0x14>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   10544:	4620      	mov	r0, r4
   10546:	4b04      	ldr	r3, [pc, #16]	; (10558 <_ZN15Holt_3593_Class9W_CommandEc+0x30>)
   10548:	4798      	blx	r3
   1054a:	bd38      	pop	{r3, r4, r5, pc}
   1054c:	00010281 	.word	0x00010281
   10550:	000102b9 	.word	0x000102b9
   10554:	00010f25 	.word	0x00010f25
   10558:	0001029d 	.word	0x0001029d

0001055c <_ZN15Holt_3593_Class14W_CommandValueEhh>:
}

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   1055c:	b570      	push	{r4, r5, r6, lr}
   1055e:	4604      	mov	r4, r0
   10560:	460d      	mov	r5, r1
   10562:	4616      	mov	r6, r2

  	
  open();                             // assert the SPI0 /SS strobe
   10564:	4b0b      	ldr	r3, [pc, #44]	; (10594 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x38>)
   10566:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   10568:	4629      	mov	r1, r5
   1056a:	4620      	mov	r0, r4
   1056c:	4b0a      	ldr	r3, [pc, #40]	; (10598 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
   1056e:	4798      	blx	r3
  while (!spi->IsSPIReady());    
   10570:	4d0a      	ldr	r5, [pc, #40]	; (1059c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
   10572:	69a0      	ldr	r0, [r4, #24]
   10574:	47a8      	blx	r5
   10576:	2800      	cmp	r0, #0
   10578:	d0fb      	beq.n	10572 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x16>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1057a:	4631      	mov	r1, r6
   1057c:	4620      	mov	r0, r4
   1057e:	4b06      	ldr	r3, [pc, #24]	; (10598 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
   10580:	4798      	blx	r3
  while (!spi->IsSPIReady());    
   10582:	4d06      	ldr	r5, [pc, #24]	; (1059c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
   10584:	69a0      	ldr	r0, [r4, #24]
   10586:	47a8      	blx	r5
   10588:	2800      	cmp	r0, #0
   1058a:	d0fb      	beq.n	10584 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x28>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   1058c:	4620      	mov	r0, r4
   1058e:	4b04      	ldr	r3, [pc, #16]	; (105a0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x44>)
   10590:	4798      	blx	r3
   10592:	bd70      	pop	{r4, r5, r6, pc}
   10594:	00010281 	.word	0x00010281
   10598:	000102b9 	.word	0x000102b9
   1059c:	00010f25 	.word	0x00010f25
   105a0:	0001029d 	.word	0x0001029d

000105a4 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   105a4:	b538      	push	{r3, r4, r5, lr}
   105a6:	4604      	mov	r4, r0
   105a8:	460d      	mov	r5, r1
  unsigned char R_Reg;
	
  open();
   105aa:	4b08      	ldr	r3, [pc, #32]	; (105cc <_ZN15Holt_3593_Class10R_RegisterEc+0x28>)
   105ac:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   105ae:	2201      	movs	r2, #1
   105b0:	4629      	mov	r1, r5
   105b2:	4620      	mov	r0, r4
   105b4:	4b06      	ldr	r3, [pc, #24]	; (105d0 <_ZN15Holt_3593_Class10R_RegisterEc+0x2c>)
   105b6:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   105b8:	4620      	mov	r0, r4
   105ba:	4b06      	ldr	r3, [pc, #24]	; (105d4 <_ZN15Holt_3593_Class10R_RegisterEc+0x30>)
   105bc:	4798      	blx	r3
   105be:	4605      	mov	r5, r0
         
  close();
   105c0:	4620      	mov	r0, r4
   105c2:	4b05      	ldr	r3, [pc, #20]	; (105d8 <_ZN15Holt_3593_Class10R_RegisterEc+0x34>)
   105c4:	4798      	blx	r3
  return R_Reg;
}
   105c6:	4628      	mov	r0, r5
   105c8:	bd38      	pop	{r3, r4, r5, pc}
   105ca:	bf00      	nop
   105cc:	00010281 	.word	0x00010281
   105d0:	0001043d 	.word	0x0001043d
   105d4:	00010361 	.word	0x00010361
   105d8:	0001029d 	.word	0x0001029d

000105dc <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 {
   105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105de:	4604      	mov	r4, r0
   105e0:	460d      	mov	r5, r1
   105e2:	4617      	mov	r7, r2
   105e4:	461e      	mov	r6, r3
	 W_Command(RESETCMD);                // Reset the HI-3593
   105e6:	2104      	movs	r1, #4
   105e8:	4b0c      	ldr	r3, [pc, #48]	; (1061c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x40>)
   105ea:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   105ec:	462a      	mov	r2, r5
   105ee:	2138      	movs	r1, #56	; 0x38
   105f0:	4620      	mov	r0, r4
   105f2:	4d0b      	ldr	r5, [pc, #44]	; (10620 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x44>)
   105f4:	47a8      	blx	r5
	 cmd |= tflip << 6;                  // TFLIP on
   105f6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   105fa:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   105fe:	f89d 301c 	ldrb.w	r3, [sp, #28]
   10602:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
   10606:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   1060a:	b2d2      	uxtb	r2, r2
   1060c:	2108      	movs	r1, #8
   1060e:	4620      	mov	r0, r4
   10610:	47a8      	blx	r5
	 return R_Register (R_TSR);
   10612:	2180      	movs	r1, #128	; 0x80
   10614:	4620      	mov	r0, r4
   10616:	4b03      	ldr	r3, [pc, #12]	; (10624 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x48>)
   10618:	4798      	blx	r3
 }
   1061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1061c:	00010529 	.word	0x00010529
   10620:	0001055d 	.word	0x0001055d
   10624:	000105a5 	.word	0x000105a5

00010628 <_ZN15Holt_3593_Class4InitEv>:
 uint8_t	Holt_3593_Class::Init(void){
   10628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1062a:	b083      	sub	sp, #12
   1062c:	4605      	mov	r5, r0
	 spi=&staticSPI;
   1062e:	4c1b      	ldr	r4, [pc, #108]	; (1069c <_ZN15Holt_3593_Class4InitEv+0x74>)
   10630:	6184      	str	r4, [r0, #24]
	  spi->init();
   10632:	4620      	mov	r0, r4
   10634:	4b1a      	ldr	r3, [pc, #104]	; (106a0 <_ZN15Holt_3593_Class4InitEv+0x78>)
   10636:	4798      	blx	r3
	 TFLIP );
   10638:	2340      	movs	r3, #64	; 0x40
   1063a:	9301      	str	r3, [sp, #4]
   1063c:	2300      	movs	r3, #0
   1063e:	9300      	str	r3, [sp, #0]
   10640:	2201      	movs	r2, #1
   10642:	2104      	movs	r1, #4
   10644:	4628      	mov	r0, r5
   10646:	4d17      	ldr	r5, [pc, #92]	; (106a4 <_ZN15Holt_3593_Class4InitEv+0x7c>)
   10648:	47a8      	blx	r5
   1064a:	4f17      	ldr	r7, [pc, #92]	; (106a8 <_ZN15Holt_3593_Class4InitEv+0x80>)
   1064c:	1e7a      	subs	r2, r7, #1
   1064e:	f104 031b 	add.w	r3, r4, #27
   10652:	371f      	adds	r7, #31
   10654:	f102 0c01 	add.w	ip, r2, #1
		arinc.ar->LabelsArrayRX1[i]=LabelArray_2[i];
   10658:	f8df e054 	ldr.w	lr, [pc, #84]	; 106b0 <_ZN15Holt_3593_Class4InitEv+0x88>
		LabelArray_2[i]=LabelArray_1[i];
   1065c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   10660:	705d      	strb	r5, [r3, #1]
   10662:	eba2 010c 	sub.w	r1, r2, ip
		arinc.ar->LabelsArrayRX1[i]=LabelArray_2[i];
   10666:	f8de 42b0 	ldr.w	r4, [lr, #688]	; 0x2b0
   1066a:	68a6      	ldr	r6, [r4, #8]
   1066c:	5475      	strb	r5, [r6, r1]
		arinc.ar->LabelsArrayRX2[i]=LabelArray_2[i];
   1066e:	785e      	ldrb	r6, [r3, #1]
   10670:	68e5      	ldr	r5, [r4, #12]
   10672:	546e      	strb	r6, [r5, r1]
		arinc.ar->LabelsArrayTX[i]=LabelArray_2[i];
   10674:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   10678:	6864      	ldr	r4, [r4, #4]
   1067a:	5465      	strb	r5, [r4, r1]
	for (int i=0;i<32;i++)
   1067c:	42ba      	cmp	r2, r7
   1067e:	d1ed      	bne.n	1065c <_ZN15Holt_3593_Class4InitEv+0x34>
		LabelPriority2[i]=LabelPriority1[i];
   10680:	4b06      	ldr	r3, [pc, #24]	; (1069c <_ZN15Holt_3593_Class4InitEv+0x74>)
   10682:	4a0a      	ldr	r2, [pc, #40]	; (106ac <_ZN15Holt_3593_Class4InitEv+0x84>)
   10684:	7811      	ldrb	r1, [r2, #0]
   10686:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
   1068a:	7851      	ldrb	r1, [r2, #1]
   1068c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
   10690:	7892      	ldrb	r2, [r2, #2]
   10692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 } 
   10696:	b003      	add	sp, #12
   10698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1069a:	bf00      	nop
   1069c:	20001c04 	.word	0x20001c04
   106a0:	00010dd5 	.word	0x00010dd5
   106a4:	000105dd 	.word	0x000105dd
   106a8:	0001a80c 	.word	0x0001a80c
   106ac:	200001e4 	.word	0x200001e4
   106b0:	20001920 	.word	0x20001920

000106b4 <_GLOBAL__sub_I_LabelArray_2>:
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
}
   106b4:	b510      	push	{r4, lr}
static SPI_Syn_Class	staticSPI(&SPI_HI3593);
   106b6:	4c05      	ldr	r4, [pc, #20]	; (106cc <_GLOBAL__sub_I_LabelArray_2+0x18>)
   106b8:	4905      	ldr	r1, [pc, #20]	; (106d0 <_GLOBAL__sub_I_LabelArray_2+0x1c>)
   106ba:	4620      	mov	r0, r4
   106bc:	4b05      	ldr	r3, [pc, #20]	; (106d4 <_GLOBAL__sub_I_LabelArray_2+0x20>)
   106be:	4798      	blx	r3
   106c0:	4a05      	ldr	r2, [pc, #20]	; (106d8 <_GLOBAL__sub_I_LabelArray_2+0x24>)
   106c2:	4906      	ldr	r1, [pc, #24]	; (106dc <_GLOBAL__sub_I_LabelArray_2+0x28>)
   106c4:	4620      	mov	r0, r4
   106c6:	4b06      	ldr	r3, [pc, #24]	; (106e0 <_GLOBAL__sub_I_LabelArray_2+0x2c>)
   106c8:	4798      	blx	r3
   106ca:	bd10      	pop	{r4, pc}
   106cc:	20001c04 	.word	0x20001c04
   106d0:	200096dc 	.word	0x200096dc
   106d4:	00010d99 	.word	0x00010d99
   106d8:	20000000 	.word	0x20000000
   106dc:	00010dc1 	.word	0x00010dc1
   106e0:	000170d1 	.word	0x000170d1

000106e4 <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   106e4:	680a      	ldr	r2, [r1, #0]
   106e6:	6002      	str	r2, [r0, #0]
   106e8:	6849      	ldr	r1, [r1, #4]
   106ea:	f852 2c0c 	ldr.w	r2, [r2, #-12]
   106ee:	5081      	str	r1, [r0, r2]
{
} //~Protocol_Class
   106f0:	4770      	bx	lr

000106f2 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   106f2:	b538      	push	{r3, r4, r5, lr}
   106f4:	4604      	mov	r4, r0
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   106f6:	6803      	ldr	r3, [r0, #0]
   106f8:	689d      	ldr	r5, [r3, #8]
   106fa:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   106fe:	5823      	ldr	r3, [r4, r0]
   10700:	685b      	ldr	r3, [r3, #4]
   10702:	f44f 7187 	mov.w	r1, #270	; 0x10e
   10706:	4420      	add	r0, r4
   10708:	4798      	blx	r3
   1070a:	4601      	mov	r1, r0
   1070c:	4620      	mov	r0, r4
   1070e:	47a8      	blx	r5
	uint8_t	key=uint8_t((data&0xc0000)>>18);

	return key;
}
   10710:	f3c0 4081 	ubfx	r0, r0, #18, #2
   10714:	bd38      	pop	{r3, r4, r5, pc}
	...

00010718 <_ZN14Protocol_Class14MakeEvenParityEm>:
//	value|=(uint32_t)(((uint8_t)WavingValue()))<<19;
	value=MakeEvenParity(value);
	return value;
	
}
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   10718:	b510      	push	{r4, lr}
   1071a:	460c      	mov	r4, r1
	if (FindParity(data))
   1071c:	6803      	ldr	r3, [r0, #0]
   1071e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   10722:	4418      	add	r0, r3
   10724:	4b03      	ldr	r3, [pc, #12]	; (10734 <_ZN14Protocol_Class14MakeEvenParityEm+0x1c>)
   10726:	4798      	blx	r3
   10728:	b110      	cbz	r0, 10730 <_ZN14Protocol_Class14MakeEvenParityEm+0x18>
	{
		data|=0x01<<31;
   1072a:	f044 4000 	orr.w	r0, r4, #2147483648	; 0x80000000
   1072e:	bd10      	pop	{r4, pc}
   10730:	4620      	mov	r0, r4
	else
	{
		
	}
	return data;
}
   10732:	bd10      	pop	{r4, pc}
   10734:	0000fc59 	.word	0x0000fc59

00010738 <_ZN14Protocol_Class12MakeLabel374Emf>:
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   10738:	b570      	push	{r4, r5, r6, lr}
   1073a:	4604      	mov	r4, r0
   1073c:	4616      	mov	r6, r2
	value=d<<12;
   1073e:	0309      	lsls	r1, r1, #12
   10740:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(374);
   10742:	6803      	ldr	r3, [r0, #0]
   10744:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   10748:	5823      	ldr	r3, [r4, r0]
   1074a:	685b      	ldr	r3, [r3, #4]
   1074c:	f44f 71bb 	mov.w	r1, #374	; 0x176
   10750:	4420      	add	r0, r4
   10752:	4798      	blx	r3
   10754:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   10756:	68e5      	ldr	r5, [r4, #12]
   10758:	4305      	orrs	r5, r0
	if (v<0)
   1075a:	2100      	movs	r1, #0
   1075c:	4630      	mov	r0, r6
   1075e:	4b07      	ldr	r3, [pc, #28]	; (1077c <_ZN14Protocol_Class12MakeLabel374Emf+0x44>)
   10760:	4798      	blx	r3
   10762:	b930      	cbnz	r0, 10772 <_ZN14Protocol_Class12MakeLabel374Emf+0x3a>
	value|=(uint32_t)label;
   10764:	60e5      	str	r5, [r4, #12]
	value=MakeEvenParity(value);
   10766:	68e1      	ldr	r1, [r4, #12]
   10768:	4620      	mov	r0, r4
   1076a:	4b05      	ldr	r3, [pc, #20]	; (10780 <_ZN14Protocol_Class12MakeLabel374Emf+0x48>)
   1076c:	4798      	blx	r3
   1076e:	60e0      	str	r0, [r4, #12]
}
   10770:	bd70      	pop	{r4, r5, r6, pc}
		value|=0x1<<28;
   10772:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
   10776:	60e5      	str	r5, [r4, #12]
   10778:	e7f5      	b.n	10766 <_ZN14Protocol_Class12MakeLabel374Emf+0x2e>
   1077a:	bf00      	nop
   1077c:	00019095 	.word	0x00019095
   10780:	00010719 	.word	0x00010719

00010784 <_ZN14Protocol_Class14MakeTXLabel375Eh>:
uint32_t Protocol_Class::MakeTXLabel375(uint8_t d){
   10784:	b510      	push	{r4, lr}
   10786:	4604      	mov	r4, r0
	value=((uint32_t)d)<<10;
   10788:	0289      	lsls	r1, r1, #10
   1078a:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(375);
   1078c:	6803      	ldr	r3, [r0, #0]
   1078e:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   10792:	5823      	ldr	r3, [r4, r0]
   10794:	685b      	ldr	r3, [r3, #4]
   10796:	f240 1177 	movw	r1, #375	; 0x177
   1079a:	4420      	add	r0, r4
   1079c:	4798      	blx	r3
   1079e:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   107a0:	68e1      	ldr	r1, [r4, #12]
   107a2:	4301      	orrs	r1, r0
   107a4:	60e1      	str	r1, [r4, #12]
	value=MakeEvenParity(value);
   107a6:	4620      	mov	r0, r4
   107a8:	4b01      	ldr	r3, [pc, #4]	; (107b0 <_ZN14Protocol_Class14MakeTXLabel375Eh+0x2c>)
   107aa:	4798      	blx	r3
   107ac:	60e0      	str	r0, [r4, #12]
}
   107ae:	bd10      	pop	{r4, pc}
   107b0:	00010719 	.word	0x00010719

000107b4 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   107b4:	b510      	push	{r4, lr}
   107b6:	4604      	mov	r4, r0
	value=d<<10;
   107b8:	0289      	lsls	r1, r1, #10
   107ba:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(270);
   107bc:	6803      	ldr	r3, [r0, #0]
   107be:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   107c2:	5823      	ldr	r3, [r4, r0]
   107c4:	685b      	ldr	r3, [r3, #4]
   107c6:	f44f 7187 	mov.w	r1, #270	; 0x10e
   107ca:	4420      	add	r0, r4
   107cc:	4798      	blx	r3
   107ce:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   107d0:	68e1      	ldr	r1, [r4, #12]
   107d2:	4301      	orrs	r1, r0
   107d4:	60e1      	str	r1, [r4, #12]
	value=MakeEvenParity(value);
   107d6:	4620      	mov	r0, r4
   107d8:	4b01      	ldr	r3, [pc, #4]	; (107e0 <_ZN14Protocol_Class12MakeLabel270Em+0x2c>)
   107da:	4798      	blx	r3
   107dc:	60e0      	str	r0, [r4, #12]
}
   107de:	bd10      	pop	{r4, pc}
   107e0:	00010719 	.word	0x00010719

000107e4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   107e4:	b480      	push	{r7}
   107e6:	b083      	sub	sp, #12
   107e8:	af00      	add	r7, sp, #0
   107ea:	6078      	str	r0, [r7, #4]
    return (void *)0;
   107ec:	2300      	movs	r3, #0
	}
   107ee:	4618      	mov	r0, r3
   107f0:	370c      	adds	r7, #12
   107f2:	46bd      	mov	sp, r7
   107f4:	bc80      	pop	{r7}
   107f6:	4770      	bx	lr

000107f8 <free>:
//............................................................................
extern "C" void free(void *)
	{
   107f8:	b480      	push	{r7}
   107fa:	b083      	sub	sp, #12
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
	}
   10800:	bf00      	nop
   10802:	370c      	adds	r7, #12
   10804:	46bd      	mov	sp, r7
   10806:	bc80      	pop	{r7}
   10808:	4770      	bx	lr

0001080a <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1080a:	b480      	push	{r7}
   1080c:	af00      	add	r7, sp, #0
		}
   1080e:	bf00      	nop
   10810:	46bd      	mov	sp, r7
   10812:	bc80      	pop	{r7}
   10814:	4770      	bx	lr
	...

00010818 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   10818:	b580      	push	{r7, lr}
   1081a:	b082      	sub	sp, #8
   1081c:	af00      	add	r7, sp, #0
   1081e:	6078      	str	r0, [r7, #4]
	free(p);
   10820:	6878      	ldr	r0, [r7, #4]
   10822:	4b03      	ldr	r3, [pc, #12]	; (10830 <_ZdlPv+0x18>)
   10824:	4798      	blx	r3
	}
   10826:	bf00      	nop
   10828:	3708      	adds	r7, #8
   1082a:	46bd      	mov	sp, r7
   1082c:	bd80      	pop	{r7, pc}
   1082e:	bf00      	nop
   10830:	000107f9 	.word	0x000107f9

00010834 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
   10834:	b480      	push	{r7}
   10836:	b083      	sub	sp, #12
   10838:	af00      	add	r7, sp, #0
   1083a:	6078      	str	r0, [r7, #4]
   1083c:	6039      	str	r1, [r7, #0]
	{
	data = v;
   1083e:	687b      	ldr	r3, [r7, #4]
   10840:	683a      	ldr	r2, [r7, #0]
   10842:	601a      	str	r2, [r3, #0]
	}
   10844:	687b      	ldr	r3, [r7, #4]
   10846:	4618      	mov	r0, r3
   10848:	370c      	adds	r7, #12
   1084a:	46bd      	mov	sp, r7
   1084c:	bc80      	pop	{r7}
   1084e:	4770      	bx	lr

00010850 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
   10850:	b580      	push	{r7, lr}
   10852:	b082      	sub	sp, #8
   10854:	af00      	add	r7, sp, #0
   10856:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1085e:	801a      	strh	r2, [r3, #0]
   10860:	687b      	ldr	r3, [r7, #4]
   10862:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10866:	805a      	strh	r2, [r3, #2]
   10868:	687b      	ldr	r3, [r7, #4]
   1086a:	2200      	movs	r2, #0
   1086c:	605a      	str	r2, [r3, #4]
   1086e:	687b      	ldr	r3, [r7, #4]
   10870:	3308      	adds	r3, #8
   10872:	2100      	movs	r1, #0
   10874:	4618      	mov	r0, r3
   10876:	4b05      	ldr	r3, [pc, #20]	; (1088c <_ZN5eventC1Ev+0x3c>)
   10878:	4798      	blx	r3
   1087a:	687b      	ldr	r3, [r7, #4]
   1087c:	2200      	movs	r2, #0
   1087e:	60da      	str	r2, [r3, #12]
	{
		
	}
   10880:	687b      	ldr	r3, [r7, #4]
   10882:	4618      	mov	r0, r3
   10884:	3708      	adds	r7, #8
   10886:	46bd      	mov	sp, r7
   10888:	bd80      	pop	{r7, pc}
   1088a:	bf00      	nop
   1088c:	00010835 	.word	0x00010835

00010890 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   10890:	b480      	push	{r7}
   10892:	b083      	sub	sp, #12
   10894:	af00      	add	r7, sp, #0
   10896:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   10898:	4b04      	ldr	r3, [pc, #16]	; (108ac <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   1089a:	681b      	ldr	r3, [r3, #0]
   1089c:	2201      	movs	r2, #1
   1089e:	741a      	strb	r2, [r3, #16]
}
   108a0:	bf00      	nop
   108a2:	370c      	adds	r7, #12
   108a4:	46bd      	mov	sp, r7
   108a6:	bc80      	pop	{r7}
   108a8:	4770      	bx	lr
   108aa:	bf00      	nop
   108ac:	2000244c 	.word	0x2000244c

000108b0 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   108b0:	b480      	push	{r7}
   108b2:	b083      	sub	sp, #12
   108b4:	af00      	add	r7, sp, #0
   108b6:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   108b8:	4b04      	ldr	r3, [pc, #16]	; (108cc <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   108ba:	689b      	ldr	r3, [r3, #8]
   108bc:	3301      	adds	r3, #1
   108be:	4a03      	ldr	r2, [pc, #12]	; (108cc <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   108c0:	6093      	str	r3, [r2, #8]
}
   108c2:	bf00      	nop
   108c4:	370c      	adds	r7, #12
   108c6:	46bd      	mov	sp, r7
   108c8:	bc80      	pop	{r7}
   108ca:	4770      	bx	lr
   108cc:	200026ec 	.word	0x200026ec

000108d0 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   108d0:	b580      	push	{r7, lr}
   108d2:	b082      	sub	sp, #8
   108d4:	af00      	add	r7, sp, #0
   108d6:	6078      	str	r0, [r7, #4]
   108d8:	687b      	ldr	r3, [r7, #4]
   108da:	4618      	mov	r0, r3
   108dc:	4b06      	ldr	r3, [pc, #24]	; (108f8 <_ZN18EventHandler_ClassC1Ev+0x28>)
   108de:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   108e0:	4a06      	ldr	r2, [pc, #24]	; (108fc <_ZN18EventHandler_ClassC1Ev+0x2c>)
   108e2:	687b      	ldr	r3, [r7, #4]
   108e4:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   108e6:	687b      	ldr	r3, [r7, #4]
   108e8:	4a05      	ldr	r2, [pc, #20]	; (10900 <_ZN18EventHandler_ClassC1Ev+0x30>)
   108ea:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   108ec:	687b      	ldr	r3, [r7, #4]
   108ee:	4618      	mov	r0, r3
   108f0:	3708      	adds	r7, #8
   108f2:	46bd      	mov	sp, r7
   108f4:	bd80      	pop	{r7, pc}
   108f6:	bf00      	nop
   108f8:	00010851 	.word	0x00010851
   108fc:	2000244c 	.word	0x2000244c
   10900:	20001c48 	.word	0x20001c48

00010904 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   10904:	b480      	push	{r7}
   10906:	b083      	sub	sp, #12
   10908:	af00      	add	r7, sp, #0
   1090a:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   1090c:	4a04      	ldr	r2, [pc, #16]	; (10920 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   1090e:	687b      	ldr	r3, [r7, #4]
   10910:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   10912:	687b      	ldr	r3, [r7, #4]
   10914:	4618      	mov	r0, r3
   10916:	370c      	adds	r7, #12
   10918:	46bd      	mov	sp, r7
   1091a:	bc80      	pop	{r7}
   1091c:	4770      	bx	lr
   1091e:	bf00      	nop
   10920:	2000244c 	.word	0x2000244c

00010924 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   10924:	b580      	push	{r7, lr}
   10926:	b084      	sub	sp, #16
   10928:	af00      	add	r7, sp, #0
   1092a:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   1092c:	687b      	ldr	r3, [r7, #4]
   1092e:	2200      	movs	r2, #0
   10930:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   10932:	687b      	ldr	r3, [r7, #4]
   10934:	2200      	movs	r2, #0
   10936:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   10938:	687b      	ldr	r3, [r7, #4]
   1093a:	2200      	movs	r2, #0
   1093c:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   1093e:	687b      	ldr	r3, [r7, #4]
   10940:	2200      	movs	r2, #0
   10942:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   10944:	687b      	ldr	r3, [r7, #4]
   10946:	2200      	movs	r2, #0
   10948:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   1094a:	687b      	ldr	r3, [r7, #4]
   1094c:	2200      	movs	r2, #0
   1094e:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   10950:	2301      	movs	r3, #1
   10952:	81fb      	strh	r3, [r7, #14]
   10954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   10958:	2b7f      	cmp	r3, #127	; 0x7f
   1095a:	dc1b      	bgt.n	10994 <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   1095c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   10960:	4a15      	ldr	r2, [pc, #84]	; (109b8 <_ZN18EventHandler_Class4InitEv+0x94>)
   10962:	011b      	lsls	r3, r3, #4
   10964:	4413      	add	r3, r2
   10966:	330c      	adds	r3, #12
   10968:	2200      	movs	r2, #0
   1096a:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   1096c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   10970:	3b01      	subs	r3, #1
   10972:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   10976:	0112      	lsls	r2, r2, #4
   10978:	490f      	ldr	r1, [pc, #60]	; (109b8 <_ZN18EventHandler_Class4InitEv+0x94>)
   1097a:	440a      	add	r2, r1
   1097c:	490e      	ldr	r1, [pc, #56]	; (109b8 <_ZN18EventHandler_Class4InitEv+0x94>)
   1097e:	011b      	lsls	r3, r3, #4
   10980:	440b      	add	r3, r1
   10982:	330c      	adds	r3, #12
   10984:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   10986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   1098a:	b29b      	uxth	r3, r3
   1098c:	3301      	adds	r3, #1
   1098e:	b29b      	uxth	r3, r3
   10990:	81fb      	strh	r3, [r7, #14]
   10992:	e7df      	b.n	10954 <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   10994:	4809      	ldr	r0, [pc, #36]	; (109bc <_ZN18EventHandler_Class4InitEv+0x98>)
   10996:	4b0a      	ldr	r3, [pc, #40]	; (109c0 <_ZN18EventHandler_Class4InitEv+0x9c>)
   10998:	4798      	blx	r3
   1099a:	4603      	mov	r3, r0
   1099c:	461a      	mov	r2, r3
   1099e:	687b      	ldr	r3, [r7, #4]
   109a0:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   109a2:	2201      	movs	r2, #1
   109a4:	4907      	ldr	r1, [pc, #28]	; (109c4 <_ZN18EventHandler_Class4InitEv+0xa0>)
   109a6:	4805      	ldr	r0, [pc, #20]	; (109bc <_ZN18EventHandler_Class4InitEv+0x98>)
   109a8:	4b07      	ldr	r3, [pc, #28]	; (109c8 <_ZN18EventHandler_Class4InitEv+0xa4>)
   109aa:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   109ac:	2301      	movs	r3, #1
}
   109ae:	4618      	mov	r0, r3
   109b0:	3710      	adds	r7, #16
   109b2:	46bd      	mov	sp, r7
   109b4:	bd80      	pop	{r7, pc}
   109b6:	bf00      	nop
   109b8:	20001c48 	.word	0x20001c48
   109bc:	200026ec 	.word	0x200026ec
   109c0:	00011365 	.word	0x00011365
   109c4:	000108b1 	.word	0x000108b1
   109c8:	00011429 	.word	0x00011429

000109cc <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   109cc:	b590      	push	{r4, r7, lr}
   109ce:	b087      	sub	sp, #28
   109d0:	af02      	add	r7, sp, #8
   109d2:	60f8      	str	r0, [r7, #12]
   109d4:	60b9      	str	r1, [r7, #8]
   109d6:	4611      	mov	r1, r2
   109d8:	461a      	mov	r2, r3
   109da:	460b      	mov	r3, r1
   109dc:	80fb      	strh	r3, [r7, #6]
   109de:	4613      	mov	r3, r2
   109e0:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   109e2:	88b9      	ldrh	r1, [r7, #4]
   109e4:	88fa      	ldrh	r2, [r7, #6]
   109e6:	6a3b      	ldr	r3, [r7, #32]
   109e8:	9300      	str	r3, [sp, #0]
   109ea:	460b      	mov	r3, r1
   109ec:	68b9      	ldr	r1, [r7, #8]
   109ee:	68f8      	ldr	r0, [r7, #12]
   109f0:	4c03      	ldr	r4, [pc, #12]	; (10a00 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   109f2:	47a0      	blx	r4
   109f4:	4603      	mov	r3, r0
}
   109f6:	4618      	mov	r0, r3
   109f8:	3714      	adds	r7, #20
   109fa:	46bd      	mov	sp, r7
   109fc:	bd90      	pop	{r4, r7, pc}
   109fe:	bf00      	nop
   10a00:	00010a05 	.word	0x00010a05

00010a04 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   10a04:	b590      	push	{r4, r7, lr}
   10a06:	b089      	sub	sp, #36	; 0x24
   10a08:	af00      	add	r7, sp, #0
   10a0a:	60f8      	str	r0, [r7, #12]
   10a0c:	60b9      	str	r1, [r7, #8]
   10a0e:	4611      	mov	r1, r2
   10a10:	461a      	mov	r2, r3
   10a12:	460b      	mov	r3, r1
   10a14:	80fb      	strh	r3, [r7, #6]
   10a16:	4613      	mov	r3, r2
   10a18:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   10a1a:	2300      	movs	r3, #0
   10a1c:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   10a1e:	2300      	movs	r3, #0
   10a20:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   10a22:	68fb      	ldr	r3, [r7, #12]
   10a24:	2200      	movs	r2, #0
   10a26:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   10a28:	68bb      	ldr	r3, [r7, #8]
   10a2a:	88fa      	ldrh	r2, [r7, #6]
   10a2c:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   10a2e:	68bb      	ldr	r3, [r7, #8]
   10a30:	88ba      	ldrh	r2, [r7, #4]
   10a32:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   10a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10a3a:	4293      	cmp	r3, r2
   10a3c:	d006      	beq.n	10a4c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   10a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a40:	461a      	mov	r2, r3
   10a42:	493a      	ldr	r1, [pc, #232]	; (10b2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   10a44:	483a      	ldr	r0, [pc, #232]	; (10b30 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   10a46:	4b3b      	ldr	r3, [pc, #236]	; (10b34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   10a48:	4798      	blx	r3
   10a4a:	e004      	b.n	10a56 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   10a4c:	2232      	movs	r2, #50	; 0x32
   10a4e:	4937      	ldr	r1, [pc, #220]	; (10b2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   10a50:	4837      	ldr	r0, [pc, #220]	; (10b30 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   10a52:	4b38      	ldr	r3, [pc, #224]	; (10b34 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   10a54:	4798      	blx	r3
	}
	do 
	{
		if (eventHandler)
   10a56:	68fb      	ldr	r3, [r7, #12]
   10a58:	695b      	ldr	r3, [r3, #20]
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d002      	beq.n	10a64 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x60>
		{
			eventHandler();
   10a5e:	68fb      	ldr	r3, [r7, #12]
   10a60:	695b      	ldr	r3, [r3, #20]
   10a62:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   10a64:	4b34      	ldr	r3, [pc, #208]	; (10b38 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   10a66:	681b      	ldr	r3, [r3, #0]
   10a68:	61bb      	str	r3, [r7, #24]

		while (queue)
   10a6a:	69bb      	ldr	r3, [r7, #24]
   10a6c:	2b00      	cmp	r3, #0
   10a6e:	d040      	beq.n	10af2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xee>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   10a70:	68bb      	ldr	r3, [r7, #8]
   10a72:	881b      	ldrh	r3, [r3, #0]
   10a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a78:	4293      	cmp	r3, r2
   10a7a:	d005      	beq.n	10a88 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x84>
   10a7c:	69bb      	ldr	r3, [r7, #24]
   10a7e:	881a      	ldrh	r2, [r3, #0]
   10a80:	68bb      	ldr	r3, [r7, #8]
   10a82:	881b      	ldrh	r3, [r3, #0]
   10a84:	429a      	cmp	r2, r3
   10a86:	d12e      	bne.n	10ae6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xe2>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   10a88:	68bb      	ldr	r3, [r7, #8]
   10a8a:	885b      	ldrh	r3, [r3, #2]
   10a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a90:	4293      	cmp	r3, r2
   10a92:	d005      	beq.n	10aa0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x9c>
   10a94:	69bb      	ldr	r3, [r7, #24]
   10a96:	885a      	ldrh	r2, [r3, #2]
   10a98:	68bb      	ldr	r3, [r7, #8]
   10a9a:	885b      	ldrh	r3, [r3, #2]
   10a9c:	429a      	cmp	r2, r3
   10a9e:	d122      	bne.n	10ae6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xe2>
			{
				if (queuePrev)
   10aa0:	697b      	ldr	r3, [r7, #20]
   10aa2:	2b00      	cmp	r3, #0
   10aa4:	d004      	beq.n	10ab0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xac>
				{
					queuePrev->next = queue->next;
   10aa6:	69bb      	ldr	r3, [r7, #24]
   10aa8:	68da      	ldr	r2, [r3, #12]
   10aaa:	697b      	ldr	r3, [r7, #20]
   10aac:	60da      	str	r2, [r3, #12]
   10aae:	e003      	b.n	10ab8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xb4>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   10ab0:	69bb      	ldr	r3, [r7, #24]
   10ab2:	68db      	ldr	r3, [r3, #12]
   10ab4:	4a20      	ldr	r2, [pc, #128]	; (10b38 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   10ab6:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   10ab8:	68ba      	ldr	r2, [r7, #8]
   10aba:	69bb      	ldr	r3, [r7, #24]
   10abc:	4614      	mov	r4, r2
   10abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   10ac4:	68fb      	ldr	r3, [r7, #12]
   10ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   10ac8:	69bb      	ldr	r3, [r7, #24]
   10aca:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   10acc:	68fb      	ldr	r3, [r7, #12]
   10ace:	69ba      	ldr	r2, [r7, #24]
   10ad0:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   10ad2:	68fb      	ldr	r3, [r7, #12]
   10ad4:	69db      	ldr	r3, [r3, #28]
   10ad6:	1e5a      	subs	r2, r3, #1
   10ad8:	68fb      	ldr	r3, [r7, #12]
   10ada:	61da      	str	r2, [r3, #28]

				queue = NULL;
   10adc:	2300      	movs	r3, #0
   10ade:	61bb      	str	r3, [r7, #24]
				result = true;
   10ae0:	2301      	movs	r3, #1
   10ae2:	77fb      	strb	r3, [r7, #31]
   10ae4:	e004      	b.n	10af0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xec>
			}
			else
			{
				queuePrev = queue;
   10ae6:	69bb      	ldr	r3, [r7, #24]
   10ae8:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   10aea:	69bb      	ldr	r3, [r7, #24]
   10aec:	68db      	ldr	r3, [r3, #12]
   10aee:	61bb      	str	r3, [r7, #24]
		while (queue)
   10af0:	e7bb      	b.n	10a6a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x66>
			
			
			//while (!eventTimeout);
			
		}
	} while ((!result )&& (!eventTimeout));
   10af2:	7ffb      	ldrb	r3, [r7, #31]
   10af4:	f083 0301 	eor.w	r3, r3, #1
   10af8:	b2db      	uxtb	r3, r3
   10afa:	2b00      	cmp	r3, #0
   10afc:	d009      	beq.n	10b12 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x10e>
   10afe:	68fb      	ldr	r3, [r7, #12]
   10b00:	7c1b      	ldrb	r3, [r3, #16]
   10b02:	b2db      	uxtb	r3, r3
   10b04:	f083 0301 	eor.w	r3, r3, #1
   10b08:	b2db      	uxtb	r3, r3
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d001      	beq.n	10b12 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x10e>
   10b0e:	2301      	movs	r3, #1
   10b10:	e000      	b.n	10b14 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
   10b12:	2300      	movs	r3, #0
	do 
   10b14:	2b00      	cmp	r3, #0
   10b16:	d000      	beq.n	10b1a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x116>
   10b18:	e79d      	b.n	10a56 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
// 	while ()
// 	{
// 		
// 		
// 	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   10b1a:	4904      	ldr	r1, [pc, #16]	; (10b2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   10b1c:	4804      	ldr	r0, [pc, #16]	; (10b30 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   10b1e:	4b07      	ldr	r3, [pc, #28]	; (10b3c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   10b20:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   10b22:	7ffb      	ldrb	r3, [r7, #31]
}
   10b24:	4618      	mov	r0, r3
   10b26:	3724      	adds	r7, #36	; 0x24
   10b28:	46bd      	mov	sp, r7
   10b2a:	bd90      	pop	{r4, r7, pc}
   10b2c:	00010891 	.word	0x00010891
   10b30:	200026ec 	.word	0x200026ec
   10b34:	0001150d 	.word	0x0001150d
   10b38:	20002448 	.word	0x20002448
   10b3c:	0001149d 	.word	0x0001149d

00010b40 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   10b40:	b480      	push	{r7}
   10b42:	b087      	sub	sp, #28
   10b44:	af00      	add	r7, sp, #0
   10b46:	6078      	str	r0, [r7, #4]
   10b48:	460b      	mov	r3, r1
   10b4a:	807b      	strh	r3, [r7, #2]
   10b4c:	4613      	mov	r3, r2
   10b4e:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   10b50:	2300      	movs	r3, #0
   10b52:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   10b54:	2300      	movs	r3, #0
   10b56:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   10b58:	687b      	ldr	r3, [r7, #4]
   10b5a:	69db      	ldr	r3, [r3, #28]
   10b5c:	2b00      	cmp	r3, #0
   10b5e:	d102      	bne.n	10b66 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   10b60:	2300      	movs	r3, #0
   10b62:	75fb      	strb	r3, [r7, #23]
   10b64:	e027      	b.n	10bb6 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   10b66:	4b17      	ldr	r3, [pc, #92]	; (10bc4 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   10b68:	681b      	ldr	r3, [r3, #0]
   10b6a:	613b      	str	r3, [r7, #16]
		while (queue)
   10b6c:	693b      	ldr	r3, [r7, #16]
   10b6e:	2b00      	cmp	r3, #0
   10b70:	d021      	beq.n	10bb6 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   10b72:	883b      	ldrh	r3, [r7, #0]
   10b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b78:	4293      	cmp	r3, r2
   10b7a:	bf0c      	ite	eq
   10b7c:	2301      	moveq	r3, #1
   10b7e:	2300      	movne	r3, #0
   10b80:	b2da      	uxtb	r2, r3
   10b82:	693b      	ldr	r3, [r7, #16]
   10b84:	881b      	ldrh	r3, [r3, #0]
   10b86:	8839      	ldrh	r1, [r7, #0]
   10b88:	4299      	cmp	r1, r3
   10b8a:	bf0c      	ite	eq
   10b8c:	2301      	moveq	r3, #1
   10b8e:	2300      	movne	r3, #0
   10b90:	b2db      	uxtb	r3, r3
   10b92:	4313      	orrs	r3, r2
   10b94:	b2db      	uxtb	r3, r3
   10b96:	2b00      	cmp	r3, #0
   10b98:	d007      	beq.n	10baa <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   10b9a:	693b      	ldr	r3, [r7, #16]
   10b9c:	885b      	ldrh	r3, [r3, #2]
   10b9e:	887a      	ldrh	r2, [r7, #2]
   10ba0:	429a      	cmp	r2, r3
   10ba2:	d102      	bne.n	10baa <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   10ba4:	2301      	movs	r3, #1
   10ba6:	75fb      	strb	r3, [r7, #23]
				break;
   10ba8:	e005      	b.n	10bb6 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   10baa:	693b      	ldr	r3, [r7, #16]
   10bac:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   10bae:	693b      	ldr	r3, [r7, #16]
   10bb0:	68db      	ldr	r3, [r3, #12]
   10bb2:	613b      	str	r3, [r7, #16]
		while (queue)
   10bb4:	e7da      	b.n	10b6c <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   10bb6:	7dfb      	ldrb	r3, [r7, #23]
}
   10bb8:	4618      	mov	r0, r3
   10bba:	371c      	adds	r7, #28
   10bbc:	46bd      	mov	sp, r7
   10bbe:	bc80      	pop	{r7}
   10bc0:	4770      	bx	lr
   10bc2:	bf00      	nop
   10bc4:	20002448 	.word	0x20002448

00010bc8 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
}



void EventHandler_Class::SendEventSelf(const event& e)
{
   10bc8:	b580      	push	{r7, lr}
   10bca:	b084      	sub	sp, #16
   10bcc:	af00      	add	r7, sp, #0
   10bce:	6078      	str	r0, [r7, #4]
   10bd0:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   10bd2:	683b      	ldr	r3, [r7, #0]
   10bd4:	8859      	ldrh	r1, [r3, #2]
   10bd6:	683b      	ldr	r3, [r7, #0]
   10bd8:	881b      	ldrh	r3, [r3, #0]
   10bda:	461a      	mov	r2, r3
   10bdc:	6878      	ldr	r0, [r7, #4]
   10bde:	4b25      	ldr	r3, [pc, #148]	; (10c74 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   10be0:	4798      	blx	r3
   10be2:	4603      	mov	r3, r0
   10be4:	2b00      	cmp	r3, #0
   10be6:	d140      	bne.n	10c6a <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   10be8:	687b      	ldr	r3, [r7, #4]
   10bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10bec:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   10bee:	68bb      	ldr	r3, [r7, #8]
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d035      	beq.n	10c60 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   10bf4:	687b      	ldr	r3, [r7, #4]
   10bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10bf8:	68da      	ldr	r2, [r3, #12]
   10bfa:	687b      	ldr	r3, [r7, #4]
   10bfc:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   10bfe:	68bb      	ldr	r3, [r7, #8]
   10c00:	2200      	movs	r2, #0
   10c02:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   10c04:	687b      	ldr	r3, [r7, #4]
   10c06:	69db      	ldr	r3, [r3, #28]
   10c08:	1c5a      	adds	r2, r3, #1
   10c0a:	687b      	ldr	r3, [r7, #4]
   10c0c:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   10c0e:	4b1a      	ldr	r3, [pc, #104]	; (10c78 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   10c10:	681b      	ldr	r3, [r3, #0]
   10c12:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   10c14:	68fb      	ldr	r3, [r7, #12]
   10c16:	2b00      	cmp	r3, #0
   10c18:	d103      	bne.n	10c22 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   10c1a:	4a17      	ldr	r2, [pc, #92]	; (10c78 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   10c1c:	68bb      	ldr	r3, [r7, #8]
   10c1e:	6013      	str	r3, [r2, #0]
   10c20:	e00a      	b.n	10c38 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   10c22:	68fb      	ldr	r3, [r7, #12]
   10c24:	68db      	ldr	r3, [r3, #12]
   10c26:	2b00      	cmp	r3, #0
   10c28:	d003      	beq.n	10c32 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   10c2a:	68fb      	ldr	r3, [r7, #12]
   10c2c:	68db      	ldr	r3, [r3, #12]
   10c2e:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   10c30:	e7f7      	b.n	10c22 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   10c32:	68fb      	ldr	r3, [r7, #12]
   10c34:	68ba      	ldr	r2, [r7, #8]
   10c36:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   10c38:	683b      	ldr	r3, [r7, #0]
   10c3a:	881a      	ldrh	r2, [r3, #0]
   10c3c:	68bb      	ldr	r3, [r7, #8]
   10c3e:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   10c40:	683b      	ldr	r3, [r7, #0]
   10c42:	885a      	ldrh	r2, [r3, #2]
   10c44:	68bb      	ldr	r3, [r7, #8]
   10c46:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   10c48:	68bb      	ldr	r3, [r7, #8]
   10c4a:	683a      	ldr	r2, [r7, #0]
   10c4c:	6892      	ldr	r2, [r2, #8]
   10c4e:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   10c50:	480a      	ldr	r0, [pc, #40]	; (10c7c <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   10c52:	4b0b      	ldr	r3, [pc, #44]	; (10c80 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   10c54:	4798      	blx	r3
   10c56:	4603      	mov	r3, r0
   10c58:	461a      	mov	r2, r3
   10c5a:	68bb      	ldr	r3, [r7, #8]
   10c5c:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   10c5e:	e004      	b.n	10c6a <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   10c60:	687b      	ldr	r3, [r7, #4]
   10c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10c64:	1c5a      	adds	r2, r3, #1
   10c66:	687b      	ldr	r3, [r7, #4]
   10c68:	62da      	str	r2, [r3, #44]	; 0x2c
}
   10c6a:	bf00      	nop
   10c6c:	3710      	adds	r7, #16
   10c6e:	46bd      	mov	sp, r7
   10c70:	bd80      	pop	{r7, pc}
   10c72:	bf00      	nop
   10c74:	00010b41 	.word	0x00010b41
   10c78:	20002448 	.word	0x20002448
   10c7c:	200026ec 	.word	0x200026ec
   10c80:	000114f5 	.word	0x000114f5

00010c84 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendEventSelf(EventClass eventClass, EventType eventType, const eventData& data)
{
   10c84:	b580      	push	{r7, lr}
   10c86:	b088      	sub	sp, #32
   10c88:	af00      	add	r7, sp, #0
   10c8a:	60f8      	str	r0, [r7, #12]
   10c8c:	607b      	str	r3, [r7, #4]
   10c8e:	460b      	mov	r3, r1
   10c90:	817b      	strh	r3, [r7, #10]
   10c92:	4613      	mov	r3, r2
   10c94:	813b      	strh	r3, [r7, #8]
	event		theEvent;
   10c96:	f107 0310 	add.w	r3, r7, #16
   10c9a:	4618      	mov	r0, r3
   10c9c:	4b09      	ldr	r3, [pc, #36]	; (10cc4 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x40>)
   10c9e:	4798      	blx	r3

	theEvent.eventClass = eventClass;
   10ca0:	897b      	ldrh	r3, [r7, #10]
   10ca2:	823b      	strh	r3, [r7, #16]
	theEvent.eventType = eventType;
   10ca4:	893b      	ldrh	r3, [r7, #8]
   10ca6:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   10ca8:	687b      	ldr	r3, [r7, #4]
   10caa:	681b      	ldr	r3, [r3, #0]
   10cac:	61bb      	str	r3, [r7, #24]
	
	SendEventSelf(theEvent);
   10cae:	f107 0310 	add.w	r3, r7, #16
   10cb2:	4619      	mov	r1, r3
   10cb4:	68f8      	ldr	r0, [r7, #12]
   10cb6:	4b04      	ldr	r3, [pc, #16]	; (10cc8 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x44>)
   10cb8:	4798      	blx	r3
}
   10cba:	bf00      	nop
   10cbc:	3720      	adds	r7, #32
   10cbe:	46bd      	mov	sp, r7
   10cc0:	bd80      	pop	{r7, pc}
   10cc2:	bf00      	nop
   10cc4:	00010851 	.word	0x00010851
   10cc8:	00010bc9 	.word	0x00010bc9

00010ccc <_ZN18EventHandler_Class10CheckEventEv>:
	theEvent.eventType =(EventType)et ;
	theEvent.data = data;
	SendEventSelf(theEvent);
}
uint32_t EventHandler_Class::CheckEvent(void)
{
   10ccc:	b580      	push	{r7, lr}
   10cce:	b08a      	sub	sp, #40	; 0x28
   10cd0:	af00      	add	r7, sp, #0
   10cd2:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   10cd4:	f04f 0300 	mov.w	r3, #0
   10cd8:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   10cda:	f04f 0300 	mov.w	r3, #0
   10cde:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   10ce0:	f04f 0300 	mov.w	r3, #0
   10ce4:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   10ce6:	f107 030c 	add.w	r3, r7, #12
   10cea:	4618      	mov	r0, r3
   10cec:	4b03      	ldr	r3, [pc, #12]	; (10cfc <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   10cee:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   10cf0:	687b      	ldr	r3, [r7, #4]
   10cf2:	69db      	ldr	r3, [r3, #28]
	
}
   10cf4:	4618      	mov	r0, r3
   10cf6:	3728      	adds	r7, #40	; 0x28
   10cf8:	46bd      	mov	sp, r7
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	00010851 	.word	0x00010851

00010d00 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   10d00:	b5b0      	push	{r4, r5, r7, lr}
   10d02:	b082      	sub	sp, #8
   10d04:	af00      	add	r7, sp, #0
   10d06:	6078      	str	r0, [r7, #4]
   10d08:	6039      	str	r1, [r7, #0]
   10d0a:	687b      	ldr	r3, [r7, #4]
   10d0c:	2b01      	cmp	r3, #1
   10d0e:	d117      	bne.n	10d40 <_Z41__static_initialization_and_destruction_0ii+0x40>
   10d10:	683b      	ldr	r3, [r7, #0]
   10d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d16:	4293      	cmp	r3, r2
   10d18:	d112      	bne.n	10d40 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   10d1a:	4b0b      	ldr	r3, [pc, #44]	; (10d48 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10d1c:	247f      	movs	r4, #127	; 0x7f
   10d1e:	461d      	mov	r5, r3
   10d20:	2c00      	cmp	r4, #0
   10d22:	db05      	blt.n	10d30 <_Z41__static_initialization_and_destruction_0ii+0x30>
   10d24:	4628      	mov	r0, r5
   10d26:	4b09      	ldr	r3, [pc, #36]	; (10d4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   10d28:	4798      	blx	r3
   10d2a:	3510      	adds	r5, #16
   10d2c:	3c01      	subs	r4, #1
   10d2e:	e7f7      	b.n	10d20 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   10d30:	4807      	ldr	r0, [pc, #28]	; (10d50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   10d32:	4b08      	ldr	r3, [pc, #32]	; (10d54 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   10d34:	4798      	blx	r3
   10d36:	4a08      	ldr	r2, [pc, #32]	; (10d58 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   10d38:	4908      	ldr	r1, [pc, #32]	; (10d5c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   10d3a:	4805      	ldr	r0, [pc, #20]	; (10d50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   10d3c:	4b08      	ldr	r3, [pc, #32]	; (10d60 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   10d3e:	4798      	blx	r3
   10d40:	bf00      	nop
   10d42:	3708      	adds	r7, #8
   10d44:	46bd      	mov	sp, r7
   10d46:	bdb0      	pop	{r4, r5, r7, pc}
   10d48:	20001c48 	.word	0x20001c48
   10d4c:	00010851 	.word	0x00010851
   10d50:	2000245c 	.word	0x2000245c
   10d54:	000108d1 	.word	0x000108d1
   10d58:	20000000 	.word	0x20000000
   10d5c:	00010905 	.word	0x00010905
   10d60:	000170d1 	.word	0x000170d1

00010d64 <_GLOBAL__sub_I_maxEventCount>:
   10d64:	b580      	push	{r7, lr}
   10d66:	af00      	add	r7, sp, #0
   10d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10d6c:	2001      	movs	r0, #1
   10d6e:	4b01      	ldr	r3, [pc, #4]	; (10d74 <_GLOBAL__sub_I_maxEventCount+0x10>)
   10d70:	4798      	blx	r3
   10d72:	bd80      	pop	{r7, pc}
   10d74:	00010d01 	.word	0x00010d01

00010d78 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   10d78:	b480      	push	{r7}
   10d7a:	b083      	sub	sp, #12
   10d7c:	af00      	add	r7, sp, #0
   10d7e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   10d80:	4a04      	ldr	r2, [pc, #16]	; (10d94 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   10d82:	687b      	ldr	r3, [r7, #4]
   10d84:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   10d86:	687b      	ldr	r3, [r7, #4]
   10d88:	4618      	mov	r0, r3
   10d8a:	370c      	adds	r7, #12
   10d8c:	46bd      	mov	sp, r7
   10d8e:	bc80      	pop	{r7}
   10d90:	4770      	bx	lr
   10d92:	bf00      	nop
   10d94:	20002490 	.word	0x20002490

00010d98 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor>:

SPI_Syn_Class::SPI_Syn_Class(spi_m_sync_descriptor * spiDesc)
   10d98:	b480      	push	{r7}
   10d9a:	b083      	sub	sp, #12
   10d9c:	af00      	add	r7, sp, #0
   10d9e:	6078      	str	r0, [r7, #4]
   10da0:	6039      	str	r1, [r7, #0]
{
	SPI=spiDesc;
   10da2:	687b      	ldr	r3, [r7, #4]
   10da4:	683a      	ldr	r2, [r7, #0]
   10da6:	60da      	str	r2, [r3, #12]
	ptrSPISync=this;
   10da8:	4a04      	ldr	r2, [pc, #16]	; (10dbc <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor+0x24>)
   10daa:	687b      	ldr	r3, [r7, #4]
   10dac:	6013      	str	r3, [r2, #0]
} //SPI_Syn_Class
   10dae:	687b      	ldr	r3, [r7, #4]
   10db0:	4618      	mov	r0, r3
   10db2:	370c      	adds	r7, #12
   10db4:	46bd      	mov	sp, r7
   10db6:	bc80      	pop	{r7}
   10db8:	4770      	bx	lr
   10dba:	bf00      	nop
   10dbc:	20002490 	.word	0x20002490

00010dc0 <_ZN13SPI_Syn_ClassD1Ev>:

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   10dc0:	b480      	push	{r7}
   10dc2:	b083      	sub	sp, #12
   10dc4:	af00      	add	r7, sp, #0
   10dc6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   10dc8:	687b      	ldr	r3, [r7, #4]
   10dca:	4618      	mov	r0, r3
   10dcc:	370c      	adds	r7, #12
   10dce:	46bd      	mov	sp, r7
   10dd0:	bc80      	pop	{r7}
   10dd2:	4770      	bx	lr

00010dd4 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   10dd4:	b580      	push	{r7, lr}
   10dd6:	b082      	sub	sp, #8
   10dd8:	af00      	add	r7, sp, #0
   10dda:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   10ddc:	687b      	ldr	r3, [r7, #4]
   10dde:	68da      	ldr	r2, [r3, #12]
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	3310      	adds	r3, #16
   10de4:	4619      	mov	r1, r3
   10de6:	4610      	mov	r0, r2
   10de8:	4b09      	ldr	r3, [pc, #36]	; (10e10 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   10dea:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   10dec:	687b      	ldr	r3, [r7, #4]
   10dee:	68db      	ldr	r3, [r3, #12]
   10df0:	4618      	mov	r0, r3
   10df2:	4b08      	ldr	r3, [pc, #32]	; (10e14 <_ZN13SPI_Syn_Class4initEv+0x40>)
   10df4:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   10df6:	687b      	ldr	r3, [r7, #4]
   10df8:	4a07      	ldr	r2, [pc, #28]	; (10e18 <_ZN13SPI_Syn_Class4initEv+0x44>)
   10dfa:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   10dfc:	687b      	ldr	r3, [r7, #4]
   10dfe:	4a06      	ldr	r2, [pc, #24]	; (10e18 <_ZN13SPI_Syn_Class4initEv+0x44>)
   10e00:	609a      	str	r2, [r3, #8]
	ready=true;
   10e02:	687b      	ldr	r3, [r7, #4]
   10e04:	2201      	movs	r2, #1
   10e06:	701a      	strb	r2, [r3, #0]
	
}
   10e08:	bf00      	nop
   10e0a:	3708      	adds	r7, #8
   10e0c:	46bd      	mov	sp, r7
   10e0e:	bd80      	pop	{r7, pc}
   10e10:	000046dd 	.word	0x000046dd
   10e14:	00004551 	.word	0x00004551
   10e18:	20002494 	.word	0x20002494

00010e1c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   10e1c:	b480      	push	{r7}
   10e1e:	b083      	sub	sp, #12
   10e20:	af00      	add	r7, sp, #0
   10e22:	6078      	str	r0, [r7, #4]
   10e24:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   10e26:	4a05      	ldr	r2, [pc, #20]	; (10e3c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   10e28:	687b      	ldr	r3, [r7, #4]
   10e2a:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   10e2c:	687b      	ldr	r3, [r7, #4]
   10e2e:	683a      	ldr	r2, [r7, #0]
   10e30:	60da      	str	r2, [r3, #12]
}
   10e32:	bf00      	nop
   10e34:	370c      	adds	r7, #12
   10e36:	46bd      	mov	sp, r7
   10e38:	bc80      	pop	{r7}
   10e3a:	4770      	bx	lr
   10e3c:	20002490 	.word	0x20002490

00010e40 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   10e40:	b580      	push	{r7, lr}
   10e42:	b082      	sub	sp, #8
   10e44:	af00      	add	r7, sp, #0
   10e46:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   10e48:	687b      	ldr	r3, [r7, #4]
   10e4a:	68da      	ldr	r2, [r3, #12]
   10e4c:	687b      	ldr	r3, [r7, #4]
   10e4e:	3310      	adds	r3, #16
   10e50:	4619      	mov	r1, r3
   10e52:	4610      	mov	r0, r2
   10e54:	4b07      	ldr	r3, [pc, #28]	; (10e74 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   10e56:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   10e58:	687b      	ldr	r3, [r7, #4]
   10e5a:	68db      	ldr	r3, [r3, #12]
   10e5c:	4618      	mov	r0, r3
   10e5e:	4b06      	ldr	r3, [pc, #24]	; (10e78 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   10e60:	4798      	blx	r3
	ready=true;
   10e62:	687b      	ldr	r3, [r7, #4]
   10e64:	2201      	movs	r2, #1
   10e66:	701a      	strb	r2, [r3, #0]
	return 0;
   10e68:	2300      	movs	r3, #0
}
   10e6a:	4618      	mov	r0, r3
   10e6c:	3708      	adds	r7, #8
   10e6e:	46bd      	mov	sp, r7
   10e70:	bd80      	pop	{r7, pc}
   10e72:	bf00      	nop
   10e74:	000046dd 	.word	0x000046dd
   10e78:	00004551 	.word	0x00004551

00010e7c <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   10e7c:	b580      	push	{r7, lr}
   10e7e:	b086      	sub	sp, #24
   10e80:	af00      	add	r7, sp, #0
   10e82:	60f8      	str	r0, [r7, #12]
   10e84:	60b9      	str	r1, [r7, #8]
   10e86:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   10e88:	68fb      	ldr	r3, [r7, #12]
   10e8a:	2201      	movs	r2, #1
   10e8c:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   10e8e:	68fb      	ldr	r3, [r7, #12]
   10e90:	691b      	ldr	r3, [r3, #16]
   10e92:	687a      	ldr	r2, [r7, #4]
   10e94:	b292      	uxth	r2, r2
   10e96:	68b9      	ldr	r1, [r7, #8]
   10e98:	4618      	mov	r0, r3
   10e9a:	4b08      	ldr	r3, [pc, #32]	; (10ebc <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   10e9c:	4798      	blx	r3
   10e9e:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   10ea0:	697b      	ldr	r3, [r7, #20]
   10ea2:	2b00      	cmp	r3, #0
   10ea4:	bf14      	ite	ne
   10ea6:	2301      	movne	r3, #1
   10ea8:	2300      	moveq	r3, #0
   10eaa:	b2da      	uxtb	r2, r3
   10eac:	68fb      	ldr	r3, [r7, #12]
   10eae:	761a      	strb	r2, [r3, #24]
	 return w;
   10eb0:	697b      	ldr	r3, [r7, #20]
	
}
   10eb2:	4618      	mov	r0, r3
   10eb4:	3718      	adds	r7, #24
   10eb6:	46bd      	mov	sp, r7
   10eb8:	bd80      	pop	{r7, pc}
   10eba:	bf00      	nop
   10ebc:	000155c1 	.word	0x000155c1

00010ec0 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   10ec0:	b580      	push	{r7, lr}
   10ec2:	b086      	sub	sp, #24
   10ec4:	af00      	add	r7, sp, #0
   10ec6:	60f8      	str	r0, [r7, #12]
   10ec8:	60b9      	str	r1, [r7, #8]
   10eca:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   10ecc:	68fb      	ldr	r3, [r7, #12]
   10ece:	2201      	movs	r2, #1
   10ed0:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   10ed2:	68fb      	ldr	r3, [r7, #12]
   10ed4:	691b      	ldr	r3, [r3, #16]
   10ed6:	687a      	ldr	r2, [r7, #4]
   10ed8:	b292      	uxth	r2, r2
   10eda:	68b9      	ldr	r1, [r7, #8]
   10edc:	4618      	mov	r0, r3
   10ede:	4b08      	ldr	r3, [pc, #32]	; (10f00 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   10ee0:	4798      	blx	r3
   10ee2:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   10ee4:	697b      	ldr	r3, [r7, #20]
   10ee6:	2b00      	cmp	r3, #0
   10ee8:	bf14      	ite	ne
   10eea:	2301      	movne	r3, #1
   10eec:	2300      	moveq	r3, #0
   10eee:	b2da      	uxtb	r2, r3
   10ef0:	68fb      	ldr	r3, [r7, #12]
   10ef2:	765a      	strb	r2, [r3, #25]
	return  r;
   10ef4:	697b      	ldr	r3, [r7, #20]
}
   10ef6:	4618      	mov	r0, r3
   10ef8:	3718      	adds	r7, #24
   10efa:	46bd      	mov	sp, r7
   10efc:	bd80      	pop	{r7, pc}
   10efe:	bf00      	nop
   10f00:	00015611 	.word	0x00015611

00010f04 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   10f04:	b580      	push	{r7, lr}
   10f06:	b082      	sub	sp, #8
   10f08:	af00      	add	r7, sp, #0
   10f0a:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   10f0c:	687b      	ldr	r3, [r7, #4]
   10f0e:	68db      	ldr	r3, [r3, #12]
   10f10:	4618      	mov	r0, r3
   10f12:	4b03      	ldr	r3, [pc, #12]	; (10f20 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   10f14:	4798      	blx	r3
	
}
   10f16:	bf00      	nop
   10f18:	3708      	adds	r7, #8
   10f1a:	46bd      	mov	sp, r7
   10f1c:	bd80      	pop	{r7, pc}
   10f1e:	bf00      	nop
   10f20:	0000458d 	.word	0x0000458d

00010f24 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   10f24:	b480      	push	{r7}
   10f26:	b083      	sub	sp, #12
   10f28:	af00      	add	r7, sp, #0
   10f2a:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   10f2c:	687b      	ldr	r3, [r7, #4]
   10f2e:	2201      	movs	r2, #1
   10f30:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   10f32:	687b      	ldr	r3, [r7, #4]
   10f34:	781b      	ldrb	r3, [r3, #0]
   10f36:	b2db      	uxtb	r3, r3
   10f38:	2b00      	cmp	r3, #0
   10f3a:	d001      	beq.n	10f40 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   10f3c:	2301      	movs	r3, #1
   10f3e:	e000      	b.n	10f42 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   10f40:	2300      	movs	r3, #0
	}
	return ready;
	
}
   10f42:	4618      	mov	r0, r3
   10f44:	370c      	adds	r7, #12
   10f46:	46bd      	mov	sp, r7
   10f48:	bc80      	pop	{r7}
   10f4a:	4770      	bx	lr

00010f4c <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   10f4c:	b580      	push	{r7, lr}
   10f4e:	b082      	sub	sp, #8
   10f50:	af00      	add	r7, sp, #0
   10f52:	6078      	str	r0, [r7, #4]
   10f54:	6039      	str	r1, [r7, #0]
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	4618      	mov	r0, r3
   10f5a:	4b08      	ldr	r3, [pc, #32]	; (10f7c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   10f5c:	4798      	blx	r3
   10f5e:	4a08      	ldr	r2, [pc, #32]	; (10f80 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   10f64:	687b      	ldr	r3, [r7, #4]
   10f66:	683a      	ldr	r2, [r7, #0]
   10f68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   10f6c:	4a05      	ldr	r2, [pc, #20]	; (10f84 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   10f6e:	687b      	ldr	r3, [r7, #4]
   10f70:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   10f72:	687b      	ldr	r3, [r7, #4]
   10f74:	4618      	mov	r0, r3
   10f76:	3708      	adds	r7, #8
   10f78:	46bd      	mov	sp, r7
   10f7a:	bd80      	pop	{r7, pc}
   10f7c:	00011261 	.word	0x00011261
   10f80:	0001a83c 	.word	0x0001a83c
   10f84:	200024d8 	.word	0x200024d8

00010f88 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   10f88:	b580      	push	{r7, lr}
   10f8a:	b082      	sub	sp, #8
   10f8c:	af00      	add	r7, sp, #0
   10f8e:	6078      	str	r0, [r7, #4]
   10f90:	4a05      	ldr	r2, [pc, #20]	; (10fa8 <_ZN14Calendar_ClassD1Ev+0x20>)
   10f92:	687b      	ldr	r3, [r7, #4]
   10f94:	601a      	str	r2, [r3, #0]
   10f96:	687b      	ldr	r3, [r7, #4]
   10f98:	4618      	mov	r0, r3
   10f9a:	4b04      	ldr	r3, [pc, #16]	; (10fac <_ZN14Calendar_ClassD1Ev+0x24>)
   10f9c:	4798      	blx	r3
{
} //~Calendar_Class
   10f9e:	687b      	ldr	r3, [r7, #4]
   10fa0:	4618      	mov	r0, r3
   10fa2:	3708      	adds	r7, #8
   10fa4:	46bd      	mov	sp, r7
   10fa6:	bd80      	pop	{r7, pc}
   10fa8:	0001a83c 	.word	0x0001a83c
   10fac:	00011281 	.word	0x00011281

00010fb0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   10fb0:	b580      	push	{r7, lr}
   10fb2:	b082      	sub	sp, #8
   10fb4:	af00      	add	r7, sp, #0
   10fb6:	6078      	str	r0, [r7, #4]
   10fb8:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   10fba:	687b      	ldr	r3, [r7, #4]
   10fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   10fc0:	6839      	ldr	r1, [r7, #0]
   10fc2:	4618      	mov	r0, r3
   10fc4:	4b03      	ldr	r3, [pc, #12]	; (10fd4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   10fc6:	4798      	blx	r3
   10fc8:	4603      	mov	r3, r0
}
   10fca:	4618      	mov	r0, r3
   10fcc:	3708      	adds	r7, #8
   10fce:	46bd      	mov	sp, r7
   10fd0:	bd80      	pop	{r7, pc}
   10fd2:	bf00      	nop
   10fd4:	00003c7d 	.word	0x00003c7d

00010fd8 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   10fd8:	b480      	push	{r7}
   10fda:	b083      	sub	sp, #12
   10fdc:	af00      	add	r7, sp, #0
   10fde:	6078      	str	r0, [r7, #4]
   10fe0:	460b      	mov	r3, r1
   10fe2:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   10fe4:	887b      	ldrh	r3, [r7, #2]
   10fe6:	f003 0303 	and.w	r3, r3, #3
   10fea:	2b00      	cmp	r3, #0
   10fec:	d001      	beq.n	10ff2 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   10fee:	2300      	movs	r3, #0
   10ff0:	e000      	b.n	10ff4 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   10ff2:	2301      	movs	r3, #1
	}
}
   10ff4:	4618      	mov	r0, r3
   10ff6:	370c      	adds	r7, #12
   10ff8:	46bd      	mov	sp, r7
   10ffa:	bc80      	pop	{r7}
   10ffc:	4770      	bx	lr
	...

00011000 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   11000:	b580      	push	{r7, lr}
   11002:	b086      	sub	sp, #24
   11004:	af00      	add	r7, sp, #0
   11006:	6078      	str	r0, [r7, #4]
   11008:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1100a:	2300      	movs	r3, #0
   1100c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1100e:	2300      	movs	r3, #0
   11010:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   11012:	683b      	ldr	r3, [r7, #0]
   11014:	88db      	ldrh	r3, [r3, #6]
   11016:	b2da      	uxtb	r2, r3
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1101e:	699b      	ldr	r3, [r3, #24]
   11020:	b2db      	uxtb	r3, r3
   11022:	1ad3      	subs	r3, r2, r3
   11024:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   11026:	683b      	ldr	r3, [r7, #0]
   11028:	795b      	ldrb	r3, [r3, #5]
   1102a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   1102c:	683b      	ldr	r3, [r7, #0]
   1102e:	791b      	ldrb	r3, [r3, #4]
   11030:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   11032:	683b      	ldr	r3, [r7, #0]
   11034:	789b      	ldrb	r3, [r3, #2]
   11036:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   11038:	683b      	ldr	r3, [r7, #0]
   1103a:	785b      	ldrb	r3, [r3, #1]
   1103c:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1103e:	683b      	ldr	r3, [r7, #0]
   11040:	781b      	ldrb	r3, [r3, #0]
   11042:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   11044:	2300      	movs	r3, #0
   11046:	613b      	str	r3, [r7, #16]
   11048:	7bfa      	ldrb	r2, [r7, #15]
   1104a:	693b      	ldr	r3, [r7, #16]
   1104c:	429a      	cmp	r2, r3
   1104e:	d91e      	bls.n	1108e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   11050:	687b      	ldr	r3, [r7, #4]
   11052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   11056:	699b      	ldr	r3, [r3, #24]
   11058:	b29a      	uxth	r2, r3
   1105a:	693b      	ldr	r3, [r7, #16]
   1105c:	b29b      	uxth	r3, r3
   1105e:	4413      	add	r3, r2
   11060:	b29b      	uxth	r3, r3
   11062:	4619      	mov	r1, r3
   11064:	6878      	ldr	r0, [r7, #4]
   11066:	4b27      	ldr	r3, [pc, #156]	; (11104 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   11068:	4798      	blx	r3
   1106a:	4603      	mov	r3, r0
   1106c:	2b00      	cmp	r3, #0
   1106e:	d006      	beq.n	1107e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   11070:	697b      	ldr	r3, [r7, #20]
   11072:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   11076:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   1107a:	617b      	str	r3, [r7, #20]
   1107c:	e003      	b.n	11086 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   1107e:	697a      	ldr	r2, [r7, #20]
   11080:	4b21      	ldr	r3, [pc, #132]	; (11108 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   11082:	4413      	add	r3, r2
   11084:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   11086:	693b      	ldr	r3, [r7, #16]
   11088:	3301      	adds	r3, #1
   1108a:	613b      	str	r3, [r7, #16]
   1108c:	e7dc      	b.n	11048 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   1108e:	2301      	movs	r3, #1
   11090:	613b      	str	r3, [r7, #16]
   11092:	7bba      	ldrb	r2, [r7, #14]
   11094:	693b      	ldr	r3, [r7, #16]
   11096:	429a      	cmp	r2, r3
   11098:	d910      	bls.n	110bc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   1109a:	683b      	ldr	r3, [r7, #0]
   1109c:	88db      	ldrh	r3, [r3, #6]
   1109e:	4619      	mov	r1, r3
   110a0:	693b      	ldr	r3, [r7, #16]
   110a2:	b2db      	uxtb	r3, r3
   110a4:	461a      	mov	r2, r3
   110a6:	6878      	ldr	r0, [r7, #4]
   110a8:	4b18      	ldr	r3, [pc, #96]	; (1110c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   110aa:	4798      	blx	r3
   110ac:	4602      	mov	r2, r0
   110ae:	697b      	ldr	r3, [r7, #20]
   110b0:	4413      	add	r3, r2
   110b2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   110b4:	693b      	ldr	r3, [r7, #16]
   110b6:	3301      	adds	r3, #1
   110b8:	613b      	str	r3, [r7, #16]
   110ba:	e7ea      	b.n	11092 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   110bc:	7b7b      	ldrb	r3, [r7, #13]
   110be:	3b01      	subs	r3, #1
   110c0:	4a13      	ldr	r2, [pc, #76]	; (11110 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   110c2:	fb02 f303 	mul.w	r3, r2, r3
   110c6:	461a      	mov	r2, r3
   110c8:	697b      	ldr	r3, [r7, #20]
   110ca:	4413      	add	r3, r2
   110cc:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   110ce:	7b3b      	ldrb	r3, [r7, #12]
   110d0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   110d4:	fb02 f303 	mul.w	r3, r2, r3
   110d8:	461a      	mov	r2, r3
   110da:	697b      	ldr	r3, [r7, #20]
   110dc:	4413      	add	r3, r2
   110de:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   110e0:	7afa      	ldrb	r2, [r7, #11]
   110e2:	4613      	mov	r3, r2
   110e4:	011b      	lsls	r3, r3, #4
   110e6:	1a9b      	subs	r3, r3, r2
   110e8:	009b      	lsls	r3, r3, #2
   110ea:	461a      	mov	r2, r3
   110ec:	697b      	ldr	r3, [r7, #20]
   110ee:	4413      	add	r3, r2
   110f0:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   110f2:	7abb      	ldrb	r3, [r7, #10]
   110f4:	697a      	ldr	r2, [r7, #20]
   110f6:	4413      	add	r3, r2
   110f8:	617b      	str	r3, [r7, #20]

	return tmp;
   110fa:	697b      	ldr	r3, [r7, #20]
}
   110fc:	4618      	mov	r0, r3
   110fe:	3718      	adds	r7, #24
   11100:	46bd      	mov	sp, r7
   11102:	bd80      	pop	{r7, pc}
   11104:	00010fd9 	.word	0x00010fd9
   11108:	01e13380 	.word	0x01e13380
   1110c:	00011115 	.word	0x00011115
   11110:	00015180 	.word	0x00015180

00011114 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   11114:	b580      	push	{r7, lr}
   11116:	b086      	sub	sp, #24
   11118:	af00      	add	r7, sp, #0
   1111a:	60f8      	str	r0, [r7, #12]
   1111c:	60b9      	str	r1, [r7, #8]
   1111e:	4613      	mov	r3, r2
   11120:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   11122:	2300      	movs	r3, #0
   11124:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   11126:	68bb      	ldr	r3, [r7, #8]
   11128:	b29b      	uxth	r3, r3
   1112a:	4619      	mov	r1, r3
   1112c:	68f8      	ldr	r0, [r7, #12]
   1112e:	4b2f      	ldr	r3, [pc, #188]	; (111ec <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   11130:	4798      	blx	r3
   11132:	4603      	mov	r3, r0
   11134:	2b00      	cmp	r3, #0
   11136:	d028      	beq.n	1118a <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   11138:	79fb      	ldrb	r3, [r7, #7]
   1113a:	3b01      	subs	r3, #1
   1113c:	2b0b      	cmp	r3, #11
   1113e:	d84c      	bhi.n	111da <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   11140:	a201      	add	r2, pc, #4	; (adr r2, 11148 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   11142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11146:	bf00      	nop
   11148:	00011179 	.word	0x00011179
   1114c:	0001117f 	.word	0x0001117f
   11150:	00011179 	.word	0x00011179
   11154:	00011185 	.word	0x00011185
   11158:	00011179 	.word	0x00011179
   1115c:	00011185 	.word	0x00011185
   11160:	00011179 	.word	0x00011179
   11164:	00011179 	.word	0x00011179
   11168:	00011185 	.word	0x00011185
   1116c:	00011179 	.word	0x00011179
   11170:	00011185 	.word	0x00011185
   11174:	00011179 	.word	0x00011179
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   11178:	4b1d      	ldr	r3, [pc, #116]	; (111f0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1117a:	617b      	str	r3, [r7, #20]
			break;
   1117c:	e030      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   1117e:	4b1d      	ldr	r3, [pc, #116]	; (111f4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   11180:	617b      	str	r3, [r7, #20]
			break;
   11182:	e02d      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   11184:	4b1c      	ldr	r3, [pc, #112]	; (111f8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   11186:	617b      	str	r3, [r7, #20]
			break;
   11188:	e02a      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   1118a:	79fb      	ldrb	r3, [r7, #7]
   1118c:	3b01      	subs	r3, #1
   1118e:	2b0b      	cmp	r3, #11
   11190:	d825      	bhi.n	111de <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   11192:	a201      	add	r2, pc, #4	; (adr r2, 11198 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   11194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11198:	000111c9 	.word	0x000111c9
   1119c:	000111cf 	.word	0x000111cf
   111a0:	000111c9 	.word	0x000111c9
   111a4:	000111d5 	.word	0x000111d5
   111a8:	000111c9 	.word	0x000111c9
   111ac:	000111d5 	.word	0x000111d5
   111b0:	000111c9 	.word	0x000111c9
   111b4:	000111c9 	.word	0x000111c9
   111b8:	000111d5 	.word	0x000111d5
   111bc:	000111c9 	.word	0x000111c9
   111c0:	000111d5 	.word	0x000111d5
   111c4:	000111c9 	.word	0x000111c9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   111c8:	4b09      	ldr	r3, [pc, #36]	; (111f0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   111ca:	617b      	str	r3, [r7, #20]
			break;
   111cc:	e008      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   111ce:	4b0b      	ldr	r3, [pc, #44]	; (111fc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   111d0:	617b      	str	r3, [r7, #20]
			break;
   111d2:	e005      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   111d4:	4b08      	ldr	r3, [pc, #32]	; (111f8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   111d6:	617b      	str	r3, [r7, #20]
			break;
   111d8:	e002      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   111da:	bf00      	nop
   111dc:	e000      	b.n	111e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   111de:	bf00      	nop
		}
	}

	return sec_in_month;
   111e0:	697b      	ldr	r3, [r7, #20]
}
   111e2:	4618      	mov	r0, r3
   111e4:	3718      	adds	r7, #24
   111e6:	46bd      	mov	sp, r7
   111e8:	bd80      	pop	{r7, pc}
   111ea:	bf00      	nop
   111ec:	00010fd9 	.word	0x00010fd9
   111f0:	0028de80 	.word	0x0028de80
   111f4:	00263b80 	.word	0x00263b80
   111f8:	00278d00 	.word	0x00278d00
   111fc:	0024ea00 	.word	0x0024ea00

00011200 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   11200:	b580      	push	{r7, lr}
   11202:	b082      	sub	sp, #8
   11204:	af00      	add	r7, sp, #0
   11206:	6078      	str	r0, [r7, #4]
   11208:	6039      	str	r1, [r7, #0]
   1120a:	687b      	ldr	r3, [r7, #4]
   1120c:	2b01      	cmp	r3, #1
   1120e:	d10d      	bne.n	1122c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11210:	683b      	ldr	r3, [r7, #0]
   11212:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11216:	4293      	cmp	r3, r2
   11218:	d108      	bne.n	1122c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1121a:	4906      	ldr	r1, [pc, #24]	; (11234 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1121c:	4806      	ldr	r0, [pc, #24]	; (11238 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1121e:	4b07      	ldr	r3, [pc, #28]	; (1123c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11220:	4798      	blx	r3
   11222:	4a07      	ldr	r2, [pc, #28]	; (11240 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11224:	4907      	ldr	r1, [pc, #28]	; (11244 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11226:	4804      	ldr	r0, [pc, #16]	; (11238 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11228:	4b07      	ldr	r3, [pc, #28]	; (11248 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1122a:	4798      	blx	r3
   1122c:	bf00      	nop
   1122e:	3708      	adds	r7, #8
   11230:	46bd      	mov	sp, r7
   11232:	bd80      	pop	{r7, pc}
   11234:	20009874 	.word	0x20009874
   11238:	200024e0 	.word	0x200024e0
   1123c:	00010f4d 	.word	0x00010f4d
   11240:	20000000 	.word	0x20000000
   11244:	00010f89 	.word	0x00010f89
   11248:	000170d1 	.word	0x000170d1

0001124c <_GLOBAL__sub_I_ptrCalendarClass>:
   1124c:	b580      	push	{r7, lr}
   1124e:	af00      	add	r7, sp, #0
   11250:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11254:	2001      	movs	r0, #1
   11256:	4b01      	ldr	r3, [pc, #4]	; (1125c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   11258:	4798      	blx	r3
   1125a:	bd80      	pop	{r7, pc}
   1125c:	00011201 	.word	0x00011201

00011260 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   11260:	b480      	push	{r7}
   11262:	b083      	sub	sp, #12
   11264:	af00      	add	r7, sp, #0
   11266:	6078      	str	r0, [r7, #4]
   11268:	4a04      	ldr	r2, [pc, #16]	; (1127c <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1126a:	687b      	ldr	r3, [r7, #4]
   1126c:	601a      	str	r2, [r3, #0]
{
} //~D
   1126e:	687b      	ldr	r3, [r7, #4]
   11270:	4618      	mov	r0, r3
   11272:	370c      	adds	r7, #12
   11274:	46bd      	mov	sp, r7
   11276:	bc80      	pop	{r7}
   11278:	4770      	bx	lr
   1127a:	bf00      	nop
   1127c:	0001a84c 	.word	0x0001a84c

00011280 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   11280:	b480      	push	{r7}
   11282:	b083      	sub	sp, #12
   11284:	af00      	add	r7, sp, #0
   11286:	6078      	str	r0, [r7, #4]
   11288:	4a04      	ldr	r2, [pc, #16]	; (1129c <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   1128a:	687b      	ldr	r3, [r7, #4]
   1128c:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1128e:	687b      	ldr	r3, [r7, #4]
   11290:	4618      	mov	r0, r3
   11292:	370c      	adds	r7, #12
   11294:	46bd      	mov	sp, r7
   11296:	bc80      	pop	{r7}
   11298:	4770      	bx	lr
   1129a:	bf00      	nop
   1129c:	0001a84c 	.word	0x0001a84c

000112a0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   112a0:	b480      	push	{r7}
   112a2:	b083      	sub	sp, #12
   112a4:	af00      	add	r7, sp, #0
   112a6:	6078      	str	r0, [r7, #4]
   112a8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   112aa:	687b      	ldr	r3, [r7, #4]
   112ac:	683a      	ldr	r2, [r7, #0]
   112ae:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   112b0:	4a06      	ldr	r2, [pc, #24]	; (112cc <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   112b2:	687b      	ldr	r3, [r7, #4]
   112b4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   112b6:	687b      	ldr	r3, [r7, #4]
   112b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   112bc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	4618      	mov	r0, r3
   112c2:	370c      	adds	r7, #12
   112c4:	46bd      	mov	sp, r7
   112c6:	bc80      	pop	{r7}
   112c8:	4770      	bx	lr
   112ca:	bf00      	nop
   112cc:	20002588 	.word	0x20002588

000112d0 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   112d0:	b480      	push	{r7}
   112d2:	b083      	sub	sp, #12
   112d4:	af00      	add	r7, sp, #0
   112d6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   112d8:	687b      	ldr	r3, [r7, #4]
   112da:	2200      	movs	r2, #0
   112dc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   112de:	687b      	ldr	r3, [r7, #4]
   112e0:	4618      	mov	r0, r3
   112e2:	370c      	adds	r7, #12
   112e4:	46bd      	mov	sp, r7
   112e6:	bc80      	pop	{r7}
   112e8:	4770      	bx	lr
	...

000112ec <_ZL9InitArrayv>:


static void InitArray(){
   112ec:	b480      	push	{r7}
   112ee:	b083      	sub	sp, #12
   112f0:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   112f2:	2301      	movs	r3, #1
   112f4:	607b      	str	r3, [r7, #4]
   112f6:	687b      	ldr	r3, [r7, #4]
   112f8:	2b0f      	cmp	r3, #15
   112fa:	dc26      	bgt.n	1134a <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   112fc:	4917      	ldr	r1, [pc, #92]	; (1135c <_ZL9InitArrayv+0x70>)
   112fe:	687a      	ldr	r2, [r7, #4]
   11300:	4613      	mov	r3, r2
   11302:	009b      	lsls	r3, r3, #2
   11304:	4413      	add	r3, r2
   11306:	009b      	lsls	r3, r3, #2
   11308:	440b      	add	r3, r1
   1130a:	2200      	movs	r2, #0
   1130c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   1130e:	4913      	ldr	r1, [pc, #76]	; (1135c <_ZL9InitArrayv+0x70>)
   11310:	687a      	ldr	r2, [r7, #4]
   11312:	4613      	mov	r3, r2
   11314:	009b      	lsls	r3, r3, #2
   11316:	4413      	add	r3, r2
   11318:	009b      	lsls	r3, r3, #2
   1131a:	440b      	add	r3, r1
   1131c:	330c      	adds	r3, #12
   1131e:	2200      	movs	r2, #0
   11320:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   11322:	687b      	ldr	r3, [r7, #4]
   11324:	1e5a      	subs	r2, r3, #1
   11326:	6879      	ldr	r1, [r7, #4]
   11328:	460b      	mov	r3, r1
   1132a:	009b      	lsls	r3, r3, #2
   1132c:	440b      	add	r3, r1
   1132e:	009b      	lsls	r3, r3, #2
   11330:	490a      	ldr	r1, [pc, #40]	; (1135c <_ZL9InitArrayv+0x70>)
   11332:	4419      	add	r1, r3
   11334:	4809      	ldr	r0, [pc, #36]	; (1135c <_ZL9InitArrayv+0x70>)
   11336:	4613      	mov	r3, r2
   11338:	009b      	lsls	r3, r3, #2
   1133a:	4413      	add	r3, r2
   1133c:	009b      	lsls	r3, r3, #2
   1133e:	4403      	add	r3, r0
   11340:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   11342:	687b      	ldr	r3, [r7, #4]
   11344:	3301      	adds	r3, #1
   11346:	607b      	str	r3, [r7, #4]
   11348:	e7d5      	b.n	112f6 <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   1134a:	4b05      	ldr	r3, [pc, #20]	; (11360 <_ZL9InitArrayv+0x74>)
   1134c:	2201      	movs	r2, #1
   1134e:	701a      	strb	r2, [r3, #0]
		
}
   11350:	bf00      	nop
   11352:	370c      	adds	r7, #12
   11354:	46bd      	mov	sp, r7
   11356:	bc80      	pop	{r7}
   11358:	4770      	bx	lr
   1135a:	bf00      	nop
   1135c:	2000258c 	.word	0x2000258c
   11360:	200026cc 	.word	0x200026cc

00011364 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   11364:	b580      	push	{r7, lr}
   11366:	b082      	sub	sp, #8
   11368:	af00      	add	r7, sp, #0
   1136a:	6078      	str	r0, [r7, #4]
	ticks=0;
   1136c:	687b      	ldr	r3, [r7, #4]
   1136e:	2200      	movs	r2, #0
   11370:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   11372:	4b0d      	ldr	r3, [pc, #52]	; (113a8 <_ZN11Timer_Class4InitEv+0x44>)
   11374:	781b      	ldrb	r3, [r3, #0]
   11376:	f083 0301 	eor.w	r3, r3, #1
   1137a:	b2db      	uxtb	r3, r3
   1137c:	2b00      	cmp	r3, #0
   1137e:	d001      	beq.n	11384 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   11380:	4b0a      	ldr	r3, [pc, #40]	; (113ac <_ZN11Timer_Class4InitEv+0x48>)
   11382:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   11384:	6878      	ldr	r0, [r7, #4]
   11386:	4b0a      	ldr	r3, [pc, #40]	; (113b0 <_ZN11Timer_Class4InitEv+0x4c>)
   11388:	4798      	blx	r3
   1138a:	4603      	mov	r3, r0
   1138c:	2b00      	cmp	r3, #0
   1138e:	bf0c      	ite	eq
   11390:	2301      	moveq	r3, #1
   11392:	2300      	movne	r3, #0
   11394:	b2da      	uxtb	r2, r3
   11396:	687b      	ldr	r3, [r7, #4]
   11398:	709a      	strb	r2, [r3, #2]
	return isOK;
   1139a:	687b      	ldr	r3, [r7, #4]
   1139c:	789b      	ldrb	r3, [r3, #2]
   1139e:	b2db      	uxtb	r3, r3
}
   113a0:	4618      	mov	r0, r3
   113a2:	3708      	adds	r7, #8
   113a4:	46bd      	mov	sp, r7
   113a6:	bd80      	pop	{r7, pc}
   113a8:	200026cc 	.word	0x200026cc
   113ac:	000112ed 	.word	0x000112ed
   113b0:	000113b5 	.word	0x000113b5

000113b4 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   113b4:	b580      	push	{r7, lr}
   113b6:	b084      	sub	sp, #16
   113b8:	af00      	add	r7, sp, #0
   113ba:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   113bc:	687b      	ldr	r3, [r7, #4]
   113be:	68db      	ldr	r3, [r3, #12]
   113c0:	4618      	mov	r0, r3
   113c2:	4b04      	ldr	r3, [pc, #16]	; (113d4 <_ZN11Timer_Class5startEv+0x20>)
   113c4:	4798      	blx	r3
   113c6:	60f8      	str	r0, [r7, #12]
	return status;
   113c8:	68fb      	ldr	r3, [r7, #12]
	
}
   113ca:	4618      	mov	r0, r3
   113cc:	3710      	adds	r7, #16
   113ce:	46bd      	mov	sp, r7
   113d0:	bd80      	pop	{r7, pc}
   113d2:	bf00      	nop
   113d4:	000047cd 	.word	0x000047cd

000113d8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   113d8:	b580      	push	{r7, lr}
   113da:	b086      	sub	sp, #24
   113dc:	af00      	add	r7, sp, #0
   113de:	60f8      	str	r0, [r7, #12]
   113e0:	60b9      	str	r1, [r7, #8]
   113e2:	607a      	str	r2, [r7, #4]
   113e4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   113e6:	68f8      	ldr	r0, [r7, #12]
   113e8:	4b0d      	ldr	r3, [pc, #52]	; (11420 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   113ea:	4798      	blx	r3
	task->interval = interval;
   113ec:	68fb      	ldr	r3, [r7, #12]
   113ee:	699b      	ldr	r3, [r3, #24]
   113f0:	687a      	ldr	r2, [r7, #4]
   113f2:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   113f4:	68fb      	ldr	r3, [r7, #12]
   113f6:	699b      	ldr	r3, [r3, #24]
   113f8:	68ba      	ldr	r2, [r7, #8]
   113fa:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   113fc:	68fb      	ldr	r3, [r7, #12]
   113fe:	699b      	ldr	r3, [r3, #24]
   11400:	78fa      	ldrb	r2, [r7, #3]
   11402:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   11404:	68fb      	ldr	r3, [r7, #12]
   11406:	68da      	ldr	r2, [r3, #12]
   11408:	68fb      	ldr	r3, [r7, #12]
   1140a:	699b      	ldr	r3, [r3, #24]
   1140c:	4619      	mov	r1, r3
   1140e:	4610      	mov	r0, r2
   11410:	4b04      	ldr	r3, [pc, #16]	; (11424 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   11412:	4798      	blx	r3
   11414:	6178      	str	r0, [r7, #20]
	
	return status;
   11416:	697b      	ldr	r3, [r7, #20]
}
   11418:	4618      	mov	r0, r3
   1141a:	3718      	adds	r7, #24
   1141c:	46bd      	mov	sp, r7
   1141e:	bd80      	pop	{r7, pc}
   11420:	0001155d 	.word	0x0001155d
   11424:	000048a1 	.word	0x000048a1

00011428 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   11428:	b580      	push	{r7, lr}
   1142a:	b086      	sub	sp, #24
   1142c:	af00      	add	r7, sp, #0
   1142e:	60f8      	str	r0, [r7, #12]
   11430:	60b9      	str	r1, [r7, #8]
   11432:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   11434:	687a      	ldr	r2, [r7, #4]
   11436:	68b9      	ldr	r1, [r7, #8]
   11438:	68f8      	ldr	r0, [r7, #12]
   1143a:	4b0c      	ldr	r3, [pc, #48]	; (1146c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   1143c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   1143e:	68fb      	ldr	r3, [r7, #12]
   11440:	68db      	ldr	r3, [r3, #12]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	699b      	ldr	r3, [r3, #24]
   11446:	68fa      	ldr	r2, [r7, #12]
   11448:	68d2      	ldr	r2, [r2, #12]
   1144a:	3204      	adds	r2, #4
   1144c:	4610      	mov	r0, r2
   1144e:	4798      	blx	r3
   11450:	4603      	mov	r3, r0
   11452:	2b00      	cmp	r3, #0
   11454:	d105      	bne.n	11462 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   11456:	68fb      	ldr	r3, [r7, #12]
   11458:	68db      	ldr	r3, [r3, #12]
   1145a:	4618      	mov	r0, r3
   1145c:	4b04      	ldr	r3, [pc, #16]	; (11470 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   1145e:	4798      	blx	r3
   11460:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   11462:	697b      	ldr	r3, [r7, #20]
}
   11464:	4618      	mov	r0, r3
   11466:	3718      	adds	r7, #24
   11468:	46bd      	mov	sp, r7
   1146a:	bd80      	pop	{r7, pc}
   1146c:	00011475 	.word	0x00011475
   11470:	000047cd 	.word	0x000047cd

00011474 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   11474:	b590      	push	{r4, r7, lr}
   11476:	b087      	sub	sp, #28
   11478:	af00      	add	r7, sp, #0
   1147a:	60f8      	str	r0, [r7, #12]
   1147c:	60b9      	str	r1, [r7, #8]
   1147e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   11480:	2301      	movs	r3, #1
   11482:	687a      	ldr	r2, [r7, #4]
   11484:	68b9      	ldr	r1, [r7, #8]
   11486:	68f8      	ldr	r0, [r7, #12]
   11488:	4c03      	ldr	r4, [pc, #12]	; (11498 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   1148a:	47a0      	blx	r4
   1148c:	6178      	str	r0, [r7, #20]
		return status;
   1148e:	697b      	ldr	r3, [r7, #20]
}
   11490:	4618      	mov	r0, r3
   11492:	371c      	adds	r7, #28
   11494:	46bd      	mov	sp, r7
   11496:	bd90      	pop	{r4, r7, pc}
   11498:	000113d9 	.word	0x000113d9

0001149c <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   1149c:	b580      	push	{r7, lr}
   1149e:	b082      	sub	sp, #8
   114a0:	af00      	add	r7, sp, #0
   114a2:	6078      	str	r0, [r7, #4]
   114a4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   114a6:	6839      	ldr	r1, [r7, #0]
   114a8:	6878      	ldr	r0, [r7, #4]
   114aa:	4b0f      	ldr	r3, [pc, #60]	; (114e8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   114ac:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   114ae:	687b      	ldr	r3, [r7, #4]
   114b0:	68db      	ldr	r3, [r3, #12]
   114b2:	f103 0218 	add.w	r2, r3, #24
   114b6:	687b      	ldr	r3, [r7, #4]
   114b8:	699b      	ldr	r3, [r3, #24]
   114ba:	4619      	mov	r1, r3
   114bc:	4610      	mov	r0, r2
   114be:	4b0b      	ldr	r3, [pc, #44]	; (114ec <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   114c0:	4798      	blx	r3
   114c2:	4603      	mov	r3, r0
   114c4:	2b00      	cmp	r3, #0
   114c6:	d007      	beq.n	114d8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   114c8:	687b      	ldr	r3, [r7, #4]
   114ca:	68da      	ldr	r2, [r3, #12]
   114cc:	687b      	ldr	r3, [r7, #4]
   114ce:	699b      	ldr	r3, [r3, #24]
   114d0:	4619      	mov	r1, r3
   114d2:	4610      	mov	r0, r2
   114d4:	4b06      	ldr	r3, [pc, #24]	; (114f0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   114d6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   114d8:	687b      	ldr	r3, [r7, #4]
   114da:	699b      	ldr	r3, [r3, #24]
   114dc:	2200      	movs	r2, #0
   114de:	60da      	str	r2, [r3, #12]
}
   114e0:	bf00      	nop
   114e2:	3708      	adds	r7, #8
   114e4:	46bd      	mov	sp, r7
   114e6:	bd80      	pop	{r7, pc}
   114e8:	000115bd 	.word	0x000115bd
   114ec:	0000558d 	.word	0x0000558d
   114f0:	000049a5 	.word	0x000049a5

000114f4 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   114f4:	b480      	push	{r7}
   114f6:	b083      	sub	sp, #12
   114f8:	af00      	add	r7, sp, #0
   114fa:	6078      	str	r0, [r7, #4]
	
		return ticks;
   114fc:	687b      	ldr	r3, [r7, #4]
   114fe:	689b      	ldr	r3, [r3, #8]
}
   11500:	4618      	mov	r0, r3
   11502:	370c      	adds	r7, #12
   11504:	46bd      	mov	sp, r7
   11506:	bc80      	pop	{r7}
   11508:	4770      	bx	lr
	...

0001150c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   1150c:	b590      	push	{r4, r7, lr}
   1150e:	b087      	sub	sp, #28
   11510:	af00      	add	r7, sp, #0
   11512:	60f8      	str	r0, [r7, #12]
   11514:	60b9      	str	r1, [r7, #8]
   11516:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   11518:	2300      	movs	r3, #0
   1151a:	687a      	ldr	r2, [r7, #4]
   1151c:	68b9      	ldr	r1, [r7, #8]
   1151e:	68f8      	ldr	r0, [r7, #12]
   11520:	4c0c      	ldr	r4, [pc, #48]	; (11554 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   11522:	47a0      	blx	r4
   11524:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   11526:	68fb      	ldr	r3, [r7, #12]
   11528:	68db      	ldr	r3, [r3, #12]
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	699b      	ldr	r3, [r3, #24]
   1152e:	68fa      	ldr	r2, [r7, #12]
   11530:	68d2      	ldr	r2, [r2, #12]
   11532:	3204      	adds	r2, #4
   11534:	4610      	mov	r0, r2
   11536:	4798      	blx	r3
   11538:	4603      	mov	r3, r0
   1153a:	2b00      	cmp	r3, #0
   1153c:	d105      	bne.n	1154a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   1153e:	68fb      	ldr	r3, [r7, #12]
   11540:	68db      	ldr	r3, [r3, #12]
   11542:	4618      	mov	r0, r3
   11544:	4b04      	ldr	r3, [pc, #16]	; (11558 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   11546:	4798      	blx	r3
   11548:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   1154a:	697b      	ldr	r3, [r7, #20]
}
   1154c:	4618      	mov	r0, r3
   1154e:	371c      	adds	r7, #28
   11550:	46bd      	mov	sp, r7
   11552:	bd90      	pop	{r4, r7, pc}
   11554:	000113d9 	.word	0x000113d9
   11558:	000047cd 	.word	0x000047cd

0001155c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   1155c:	b480      	push	{r7}
   1155e:	b085      	sub	sp, #20
   11560:	af00      	add	r7, sp, #0
   11562:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   11564:	2300      	movs	r3, #0
   11566:	73fb      	strb	r3, [r7, #15]
   11568:	7bfb      	ldrb	r3, [r7, #15]
   1156a:	2b0f      	cmp	r3, #15
   1156c:	dc1c      	bgt.n	115a8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   1156e:	7bfb      	ldrb	r3, [r7, #15]
   11570:	f003 030f 	and.w	r3, r3, #15
   11574:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   11576:	7bba      	ldrb	r2, [r7, #14]
   11578:	490f      	ldr	r1, [pc, #60]	; (115b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   1157a:	4613      	mov	r3, r2
   1157c:	009b      	lsls	r3, r3, #2
   1157e:	4413      	add	r3, r2
   11580:	009b      	lsls	r3, r3, #2
   11582:	440b      	add	r3, r1
   11584:	330c      	adds	r3, #12
   11586:	681b      	ldr	r3, [r3, #0]
   11588:	2b00      	cmp	r3, #0
   1158a:	d109      	bne.n	115a0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   1158c:	7bba      	ldrb	r2, [r7, #14]
   1158e:	4613      	mov	r3, r2
   11590:	009b      	lsls	r3, r3, #2
   11592:	4413      	add	r3, r2
   11594:	009b      	lsls	r3, r3, #2
   11596:	4a08      	ldr	r2, [pc, #32]	; (115b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   11598:	441a      	add	r2, r3
   1159a:	687b      	ldr	r3, [r7, #4]
   1159c:	619a      	str	r2, [r3, #24]
			return;
   1159e:	e006      	b.n	115ae <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   115a0:	7bfb      	ldrb	r3, [r7, #15]
   115a2:	3301      	adds	r3, #1
   115a4:	73fb      	strb	r3, [r7, #15]
   115a6:	e7df      	b.n	11568 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   115a8:	687b      	ldr	r3, [r7, #4]
   115aa:	4a03      	ldr	r2, [pc, #12]	; (115b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   115ac:	619a      	str	r2, [r3, #24]

}
   115ae:	3714      	adds	r7, #20
   115b0:	46bd      	mov	sp, r7
   115b2:	bc80      	pop	{r7}
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop
   115b8:	2000258c 	.word	0x2000258c

000115bc <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   115bc:	b480      	push	{r7}
   115be:	b085      	sub	sp, #20
   115c0:	af00      	add	r7, sp, #0
   115c2:	6078      	str	r0, [r7, #4]
   115c4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   115c6:	2300      	movs	r3, #0
   115c8:	73fb      	strb	r3, [r7, #15]
   115ca:	7bfb      	ldrb	r3, [r7, #15]
   115cc:	2b0f      	cmp	r3, #15
   115ce:	dc19      	bgt.n	11604 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   115d0:	7bfa      	ldrb	r2, [r7, #15]
   115d2:	490f      	ldr	r1, [pc, #60]	; (11610 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   115d4:	4613      	mov	r3, r2
   115d6:	009b      	lsls	r3, r3, #2
   115d8:	4413      	add	r3, r2
   115da:	009b      	lsls	r3, r3, #2
   115dc:	440b      	add	r3, r1
   115de:	330c      	adds	r3, #12
   115e0:	681a      	ldr	r2, [r3, #0]
   115e2:	683b      	ldr	r3, [r7, #0]
   115e4:	429a      	cmp	r2, r3
   115e6:	d109      	bne.n	115fc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   115e8:	7bfa      	ldrb	r2, [r7, #15]
   115ea:	4613      	mov	r3, r2
   115ec:	009b      	lsls	r3, r3, #2
   115ee:	4413      	add	r3, r2
   115f0:	009b      	lsls	r3, r3, #2
   115f2:	4a07      	ldr	r2, [pc, #28]	; (11610 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   115f4:	441a      	add	r2, r3
   115f6:	687b      	ldr	r3, [r7, #4]
   115f8:	619a      	str	r2, [r3, #24]
			return;
   115fa:	e004      	b.n	11606 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   115fc:	7bfb      	ldrb	r3, [r7, #15]
   115fe:	3301      	adds	r3, #1
   11600:	73fb      	strb	r3, [r7, #15]
   11602:	e7e2      	b.n	115ca <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   11604:	bf00      	nop
}
   11606:	3714      	adds	r7, #20
   11608:	46bd      	mov	sp, r7
   1160a:	bc80      	pop	{r7}
   1160c:	4770      	bx	lr
   1160e:	bf00      	nop
   11610:	2000258c 	.word	0x2000258c

00011614 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   11614:	b580      	push	{r7, lr}
   11616:	b082      	sub	sp, #8
   11618:	af00      	add	r7, sp, #0
   1161a:	6078      	str	r0, [r7, #4]
   1161c:	6039      	str	r1, [r7, #0]
   1161e:	687b      	ldr	r3, [r7, #4]
   11620:	2b01      	cmp	r3, #1
   11622:	d131      	bne.n	11688 <_Z41__static_initialization_and_destruction_0ii+0x74>
   11624:	683b      	ldr	r3, [r7, #0]
   11626:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1162a:	4293      	cmp	r3, r2
   1162c:	d12c      	bne.n	11688 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1162e:	4918      	ldr	r1, [pc, #96]	; (11690 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   11630:	4818      	ldr	r0, [pc, #96]	; (11694 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   11632:	4b19      	ldr	r3, [pc, #100]	; (11698 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   11634:	4798      	blx	r3
   11636:	4a19      	ldr	r2, [pc, #100]	; (1169c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   11638:	4919      	ldr	r1, [pc, #100]	; (116a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1163a:	4816      	ldr	r0, [pc, #88]	; (11694 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1163c:	4b19      	ldr	r3, [pc, #100]	; (116a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1163e:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   11640:	4919      	ldr	r1, [pc, #100]	; (116a8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
   11642:	481a      	ldr	r0, [pc, #104]	; (116ac <_Z41__static_initialization_and_destruction_0ii+0x98>)
   11644:	4b14      	ldr	r3, [pc, #80]	; (11698 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   11646:	4798      	blx	r3
   11648:	4a14      	ldr	r2, [pc, #80]	; (1169c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1164a:	4915      	ldr	r1, [pc, #84]	; (116a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1164c:	4817      	ldr	r0, [pc, #92]	; (116ac <_Z41__static_initialization_and_destruction_0ii+0x98>)
   1164e:	4b15      	ldr	r3, [pc, #84]	; (116a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11650:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   11652:	4917      	ldr	r1, [pc, #92]	; (116b0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   11654:	4817      	ldr	r0, [pc, #92]	; (116b4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   11656:	4b10      	ldr	r3, [pc, #64]	; (11698 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   11658:	4798      	blx	r3
   1165a:	4a10      	ldr	r2, [pc, #64]	; (1169c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1165c:	4910      	ldr	r1, [pc, #64]	; (116a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1165e:	4815      	ldr	r0, [pc, #84]	; (116b4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   11660:	4b10      	ldr	r3, [pc, #64]	; (116a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11662:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   11664:	4914      	ldr	r1, [pc, #80]	; (116b8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   11666:	4815      	ldr	r0, [pc, #84]	; (116bc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   11668:	4b0b      	ldr	r3, [pc, #44]	; (11698 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1166a:	4798      	blx	r3
   1166c:	4a0b      	ldr	r2, [pc, #44]	; (1169c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1166e:	490c      	ldr	r1, [pc, #48]	; (116a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   11670:	4812      	ldr	r0, [pc, #72]	; (116bc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   11672:	4b0c      	ldr	r3, [pc, #48]	; (116a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11674:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   11676:	4912      	ldr	r1, [pc, #72]	; (116c0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   11678:	4812      	ldr	r0, [pc, #72]	; (116c4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   1167a:	4b07      	ldr	r3, [pc, #28]	; (11698 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1167c:	4798      	blx	r3
   1167e:	4a07      	ldr	r2, [pc, #28]	; (1169c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   11680:	4907      	ldr	r1, [pc, #28]	; (116a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   11682:	4810      	ldr	r0, [pc, #64]	; (116c4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   11684:	4b07      	ldr	r3, [pc, #28]	; (116a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11686:	4798      	blx	r3
   11688:	bf00      	nop
   1168a:	3708      	adds	r7, #8
   1168c:	46bd      	mov	sp, r7
   1168e:	bd80      	pop	{r7, pc}
   11690:	200096bc 	.word	0x200096bc
   11694:	200026d0 	.word	0x200026d0
   11698:	000112a1 	.word	0x000112a1
   1169c:	20000000 	.word	0x20000000
   116a0:	000112d1 	.word	0x000112d1
   116a4:	000170d1 	.word	0x000170d1
   116a8:	20009750 	.word	0x20009750
   116ac:	200026ec 	.word	0x200026ec
   116b0:	20009854 	.word	0x20009854
   116b4:	20002708 	.word	0x20002708
   116b8:	20009770 	.word	0x20009770
   116bc:	20002724 	.word	0x20002724
   116c0:	20009814 	.word	0x20009814
   116c4:	20002740 	.word	0x20002740

000116c8 <_GLOBAL__sub_I_ptrTimerClass>:
   116c8:	b580      	push	{r7, lr}
   116ca:	af00      	add	r7, sp, #0
   116cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   116d0:	2001      	movs	r0, #1
   116d2:	4b01      	ldr	r3, [pc, #4]	; (116d8 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   116d4:	4798      	blx	r3
   116d6:	bd80      	pop	{r7, pc}
   116d8:	00011615 	.word	0x00011615

000116dc <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   116dc:	b480      	push	{r7}
   116de:	b083      	sub	sp, #12
   116e0:	af00      	add	r7, sp, #0
   116e2:	6078      	str	r0, [r7, #4]
   116e4:	4a05      	ldr	r2, [pc, #20]	; (116fc <_ZN5PrintC1Ev+0x20>)
   116e6:	687b      	ldr	r3, [r7, #4]
   116e8:	601a      	str	r2, [r3, #0]
   116ea:	687b      	ldr	r3, [r7, #4]
   116ec:	2200      	movs	r2, #0
   116ee:	605a      	str	r2, [r3, #4]
   116f0:	687b      	ldr	r3, [r7, #4]
   116f2:	4618      	mov	r0, r3
   116f4:	370c      	adds	r7, #12
   116f6:	46bd      	mov	sp, r7
   116f8:	bc80      	pop	{r7}
   116fa:	4770      	bx	lr
   116fc:	0001a8c8 	.word	0x0001a8c8

00011700 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   11700:	b480      	push	{r7}
   11702:	b083      	sub	sp, #12
   11704:	af00      	add	r7, sp, #0
   11706:	6078      	str	r0, [r7, #4]
   11708:	2300      	movs	r3, #0
   1170a:	4618      	mov	r0, r3
   1170c:	370c      	adds	r7, #12
   1170e:	46bd      	mov	sp, r7
   11710:	bc80      	pop	{r7}
   11712:	4770      	bx	lr

00011714 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   11714:	b480      	push	{r7}
   11716:	b083      	sub	sp, #12
   11718:	af00      	add	r7, sp, #0
   1171a:	6078      	str	r0, [r7, #4]
   1171c:	bf00      	nop
   1171e:	370c      	adds	r7, #12
   11720:	46bd      	mov	sp, r7
   11722:	bc80      	pop	{r7}
   11724:	4770      	bx	lr
	...

00011728 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   11728:	b580      	push	{r7, lr}
   1172a:	b082      	sub	sp, #8
   1172c:	af00      	add	r7, sp, #0
   1172e:	6078      	str	r0, [r7, #4]
   11730:	687b      	ldr	r3, [r7, #4]
   11732:	4618      	mov	r0, r3
   11734:	4b06      	ldr	r3, [pc, #24]	; (11750 <_ZN6StreamC1Ev+0x28>)
   11736:	4798      	blx	r3
   11738:	4a06      	ldr	r2, [pc, #24]	; (11754 <_ZN6StreamC1Ev+0x2c>)
   1173a:	687b      	ldr	r3, [r7, #4]
   1173c:	601a      	str	r2, [r3, #0]
   1173e:	687b      	ldr	r3, [r7, #4]
   11740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11744:	609a      	str	r2, [r3, #8]
   11746:	687b      	ldr	r3, [r7, #4]
   11748:	4618      	mov	r0, r3
   1174a:	3708      	adds	r7, #8
   1174c:	46bd      	mov	sp, r7
   1174e:	bd80      	pop	{r7, pc}
   11750:	000116dd 	.word	0x000116dd
   11754:	0001a88c 	.word	0x0001a88c

00011758 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   11758:	b480      	push	{r7}
   1175a:	b083      	sub	sp, #12
   1175c:	af00      	add	r7, sp, #0
   1175e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   11760:	4b06      	ldr	r3, [pc, #24]	; (1177c <_ZL10USBTimeoutPK10timer_task+0x24>)
   11762:	681b      	ldr	r3, [r3, #0]
   11764:	2201      	movs	r2, #1
   11766:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   11768:	4b04      	ldr	r3, [pc, #16]	; (1177c <_ZL10USBTimeoutPK10timer_task+0x24>)
   1176a:	681b      	ldr	r3, [r3, #0]
   1176c:	2200      	movs	r2, #0
   1176e:	741a      	strb	r2, [r3, #16]
	
}
   11770:	bf00      	nop
   11772:	370c      	adds	r7, #12
   11774:	46bd      	mov	sp, r7
   11776:	bc80      	pop	{r7}
   11778:	4770      	bx	lr
   1177a:	bf00      	nop
   1177c:	2000275c 	.word	0x2000275c

00011780 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   11780:	b480      	push	{r7}
   11782:	b083      	sub	sp, #12
   11784:	af00      	add	r7, sp, #0
   11786:	4603      	mov	r3, r0
   11788:	603a      	str	r2, [r7, #0]
   1178a:	71fb      	strb	r3, [r7, #7]
   1178c:	460b      	mov	r3, r1
   1178e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   11790:	4b08      	ldr	r3, [pc, #32]	; (117b4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   11792:	681b      	ldr	r3, [r3, #0]
   11794:	2201      	movs	r2, #1
   11796:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   11798:	4b06      	ldr	r3, [pc, #24]	; (117b4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1179a:	681b      	ldr	r3, [r3, #0]
   1179c:	2201      	movs	r2, #1
   1179e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   117a0:	4b04      	ldr	r3, [pc, #16]	; (117b4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   117a2:	681b      	ldr	r3, [r3, #0]
   117a4:	2201      	movs	r2, #1
   117a6:	741a      	strb	r2, [r3, #16]


	return false;
   117a8:	2300      	movs	r3, #0
}
   117aa:	4618      	mov	r0, r3
   117ac:	370c      	adds	r7, #12
   117ae:	46bd      	mov	sp, r7
   117b0:	bc80      	pop	{r7}
   117b2:	4770      	bx	lr
   117b4:	2000275c 	.word	0x2000275c

000117b8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   117b8:	b480      	push	{r7}
   117ba:	b083      	sub	sp, #12
   117bc:	af00      	add	r7, sp, #0
   117be:	4603      	mov	r3, r0
   117c0:	603a      	str	r2, [r7, #0]
   117c2:	71fb      	strb	r3, [r7, #7]
   117c4:	460b      	mov	r3, r1
   117c6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   117c8:	4b08      	ldr	r3, [pc, #32]	; (117ec <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   117ca:	681b      	ldr	r3, [r3, #0]
   117cc:	2201      	movs	r2, #1
   117ce:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   117d0:	4b06      	ldr	r3, [pc, #24]	; (117ec <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   117d2:	681b      	ldr	r3, [r3, #0]
   117d4:	2201      	movs	r2, #1
   117d6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   117d8:	4b04      	ldr	r3, [pc, #16]	; (117ec <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	2201      	movs	r2, #1
   117de:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   117e0:	2300      	movs	r3, #0
}
   117e2:	4618      	mov	r0, r3
   117e4:	370c      	adds	r7, #12
   117e6:	46bd      	mov	sp, r7
   117e8:	bc80      	pop	{r7}
   117ea:	4770      	bx	lr
   117ec:	2000275c 	.word	0x2000275c

000117f0 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   117f0:	b580      	push	{r7, lr}
   117f2:	b082      	sub	sp, #8
   117f4:	af00      	add	r7, sp, #0
   117f6:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   117f8:	793b      	ldrb	r3, [r7, #4]
   117fa:	f003 0301 	and.w	r3, r3, #1
   117fe:	b2db      	uxtb	r3, r3
   11800:	2b00      	cmp	r3, #0
   11802:	d013      	beq.n	1182c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   11804:	490c      	ldr	r1, [pc, #48]	; (11838 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   11806:	2000      	movs	r0, #0
   11808:	4b0c      	ldr	r3, [pc, #48]	; (1183c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1180a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   1180c:	490c      	ldr	r1, [pc, #48]	; (11840 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   1180e:	2001      	movs	r0, #1
   11810:	4b0a      	ldr	r3, [pc, #40]	; (1183c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   11812:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   11814:	4b0b      	ldr	r3, [pc, #44]	; (11844 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   11816:	681b      	ldr	r3, [r3, #0]
   11818:	2201      	movs	r2, #1
   1181a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   1181c:	4b09      	ldr	r3, [pc, #36]	; (11844 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1181e:	681b      	ldr	r3, [r3, #0]
   11820:	2201      	movs	r2, #1
   11822:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   11824:	4b07      	ldr	r3, [pc, #28]	; (11844 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   11826:	681b      	ldr	r3, [r3, #0]
   11828:	2201      	movs	r2, #1
   1182a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   1182c:	2300      	movs	r3, #0
}
   1182e:	4618      	mov	r0, r3
   11830:	3708      	adds	r7, #8
   11832:	46bd      	mov	sp, r7
   11834:	bd80      	pop	{r7, pc}
   11836:	bf00      	nop
   11838:	00011781 	.word	0x00011781
   1183c:	0000e85d 	.word	0x0000e85d
   11840:	000117b9 	.word	0x000117b9
   11844:	2000275c 	.word	0x2000275c

00011848 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   11848:	b580      	push	{r7, lr}
   1184a:	b082      	sub	sp, #8
   1184c:	af00      	add	r7, sp, #0
   1184e:	6078      	str	r0, [r7, #4]
   11850:	687b      	ldr	r3, [r7, #4]
   11852:	4618      	mov	r0, r3
   11854:	4b0a      	ldr	r3, [pc, #40]	; (11880 <_ZN9CDC_ClassC1Ev+0x38>)
   11856:	4798      	blx	r3
   11858:	687b      	ldr	r3, [r7, #4]
   1185a:	3310      	adds	r3, #16
   1185c:	4618      	mov	r0, r3
   1185e:	4b09      	ldr	r3, [pc, #36]	; (11884 <_ZN9CDC_ClassC1Ev+0x3c>)
   11860:	4798      	blx	r3
   11862:	4a09      	ldr	r2, [pc, #36]	; (11888 <_ZN9CDC_ClassC1Ev+0x40>)
   11864:	687b      	ldr	r3, [r7, #4]
   11866:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   11868:	687b      	ldr	r3, [r7, #4]
   1186a:	f04f 32ff 	mov.w	r2, #4294967295
   1186e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   11870:	4a06      	ldr	r2, [pc, #24]	; (1188c <_ZN9CDC_ClassC1Ev+0x44>)
   11872:	687b      	ldr	r3, [r7, #4]
   11874:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   11876:	687b      	ldr	r3, [r7, #4]
   11878:	4618      	mov	r0, r3
   1187a:	3708      	adds	r7, #8
   1187c:	46bd      	mov	sp, r7
   1187e:	bd80      	pop	{r7, pc}
   11880:	00011729 	.word	0x00011729
   11884:	00012031 	.word	0x00012031
   11888:	0001a85c 	.word	0x0001a85c
   1188c:	2000275c 	.word	0x2000275c

00011890 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   11890:	b580      	push	{r7, lr}
   11892:	b082      	sub	sp, #8
   11894:	af00      	add	r7, sp, #0
   11896:	6078      	str	r0, [r7, #4]
   11898:	4a06      	ldr	r2, [pc, #24]	; (118b4 <_ZN9CDC_ClassD1Ev+0x24>)
   1189a:	687b      	ldr	r3, [r7, #4]
   1189c:	601a      	str	r2, [r3, #0]
   1189e:	687b      	ldr	r3, [r7, #4]
   118a0:	3310      	adds	r3, #16
   118a2:	4618      	mov	r0, r3
   118a4:	4b04      	ldr	r3, [pc, #16]	; (118b8 <_ZN9CDC_ClassD1Ev+0x28>)
   118a6:	4798      	blx	r3
{
} //~CDC_Class
   118a8:	687b      	ldr	r3, [r7, #4]
   118aa:	4618      	mov	r0, r3
   118ac:	3708      	adds	r7, #8
   118ae:	46bd      	mov	sp, r7
   118b0:	bd80      	pop	{r7, pc}
   118b2:	bf00      	nop
   118b4:	0001a85c 	.word	0x0001a85c
   118b8:	00012051 	.word	0x00012051

000118bc <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   118bc:	b580      	push	{r7, lr}
   118be:	b082      	sub	sp, #8
   118c0:	af00      	add	r7, sp, #0
   118c2:	6078      	str	r0, [r7, #4]
	
	OnInit();
   118c4:	687b      	ldr	r3, [r7, #4]
   118c6:	3310      	adds	r3, #16
   118c8:	4618      	mov	r0, r3
   118ca:	4b09      	ldr	r3, [pc, #36]	; (118f0 <_ZN9CDC_Class4InitEv+0x34>)
   118cc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   118ce:	4909      	ldr	r1, [pc, #36]	; (118f4 <_ZN9CDC_Class4InitEv+0x38>)
   118d0:	2003      	movs	r0, #3
   118d2:	4b09      	ldr	r3, [pc, #36]	; (118f8 <_ZN9CDC_Class4InitEv+0x3c>)
   118d4:	4798      	blx	r3
	delay_ms(100);
   118d6:	2064      	movs	r0, #100	; 0x64
   118d8:	4b08      	ldr	r3, [pc, #32]	; (118fc <_ZN9CDC_Class4InitEv+0x40>)
   118da:	4798      	blx	r3
		
	if (connected)
   118dc:	687b      	ldr	r3, [r7, #4]
   118de:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   118e0:	2064      	movs	r0, #100	; 0x64
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <_ZN9CDC_Class4InitEv+0x40>)
   118e4:	4798      	blx	r3

	

}
   118e6:	bf00      	nop
   118e8:	3708      	adds	r7, #8
   118ea:	46bd      	mov	sp, r7
   118ec:	bd80      	pop	{r7, pc}
   118ee:	bf00      	nop
   118f0:	00012065 	.word	0x00012065
   118f4:	000117f1 	.word	0x000117f1
   118f8:	0000e85d 	.word	0x0000e85d
   118fc:	00003ed5 	.word	0x00003ed5

00011900 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   11900:	b580      	push	{r7, lr}
   11902:	b082      	sub	sp, #8
   11904:	af00      	add	r7, sp, #0
   11906:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   11908:	4b03      	ldr	r3, [pc, #12]	; (11918 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1190a:	4798      	blx	r3
   1190c:	4603      	mov	r3, r0
	
}
   1190e:	4618      	mov	r0, r3
   11910:	3708      	adds	r7, #8
   11912:	46bd      	mov	sp, r7
   11914:	bd80      	pop	{r7, pc}
   11916:	bf00      	nop
   11918:	0000e8d5 	.word	0x0000e8d5

0001191c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   1191c:	b580      	push	{r7, lr}
   1191e:	b084      	sub	sp, #16
   11920:	af00      	add	r7, sp, #0
   11922:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   11924:	687b      	ldr	r3, [r7, #4]
   11926:	699b      	ldr	r3, [r3, #24]
   11928:	f1b3 3fff 	cmp.w	r3, #4294967295
   1192c:	bf14      	ite	ne
   1192e:	2301      	movne	r3, #1
   11930:	2300      	moveq	r3, #0
   11932:	b2db      	uxtb	r3, r3
   11934:	2b00      	cmp	r3, #0
   11936:	d002      	beq.n	1193e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   11938:	687b      	ldr	r3, [r7, #4]
   1193a:	699b      	ldr	r3, [r3, #24]
   1193c:	e011      	b.n	11962 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   1193e:	687b      	ldr	r3, [r7, #4]
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	331c      	adds	r3, #28
   11944:	681b      	ldr	r3, [r3, #0]
   11946:	f107 010f 	add.w	r1, r7, #15
   1194a:	2201      	movs	r2, #1
   1194c:	6878      	ldr	r0, [r7, #4]
   1194e:	4798      	blx	r3
   11950:	4602      	mov	r2, r0
   11952:	687b      	ldr	r3, [r7, #4]
   11954:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   11956:	7bfb      	ldrb	r3, [r7, #15]
   11958:	461a      	mov	r2, r3
   1195a:	687b      	ldr	r3, [r7, #4]
   1195c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   1195e:	687b      	ldr	r3, [r7, #4]
   11960:	699b      	ldr	r3, [r3, #24]
}
   11962:	4618      	mov	r0, r3
   11964:	3710      	adds	r7, #16
   11966:	46bd      	mov	sp, r7
   11968:	bd80      	pop	{r7, pc}
	...

0001196c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   1196c:	b580      	push	{r7, lr}
   1196e:	b086      	sub	sp, #24
   11970:	af00      	add	r7, sp, #0
   11972:	60f8      	str	r0, [r7, #12]
   11974:	60b9      	str	r1, [r7, #8]
   11976:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   11978:	68fb      	ldr	r3, [r7, #12]
   1197a:	7c1b      	ldrb	r3, [r3, #16]
   1197c:	b2db      	uxtb	r3, r3
   1197e:	2b00      	cmp	r3, #0
   11980:	d02e      	beq.n	119e0 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   11982:	687a      	ldr	r2, [r7, #4]
   11984:	4613      	mov	r3, r2
   11986:	009b      	lsls	r3, r3, #2
   11988:	4413      	add	r3, r2
   1198a:	005b      	lsls	r3, r3, #1
   1198c:	461a      	mov	r2, r3
   1198e:	4918      	ldr	r1, [pc, #96]	; (119f0 <_ZN9CDC_Class8readDataEPvl+0x84>)
   11990:	4818      	ldr	r0, [pc, #96]	; (119f4 <_ZN9CDC_Class8readDataEPvl+0x88>)
   11992:	4b19      	ldr	r3, [pc, #100]	; (119f8 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   11994:	4798      	blx	r3
		rxReady=false;
   11996:	68fb      	ldr	r3, [r7, #12]
   11998:	2200      	movs	r2, #0
   1199a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   1199c:	687b      	ldr	r3, [r7, #4]
   1199e:	4619      	mov	r1, r3
   119a0:	68b8      	ldr	r0, [r7, #8]
   119a2:	4b16      	ldr	r3, [pc, #88]	; (119fc <_ZN9CDC_Class8readDataEPvl+0x90>)
   119a4:	4798      	blx	r3
   119a6:	4603      	mov	r3, r0
   119a8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   119aa:	68fb      	ldr	r3, [r7, #12]
   119ac:	7d5b      	ldrb	r3, [r3, #21]
   119ae:	b2db      	uxtb	r3, r3
   119b0:	f083 0301 	eor.w	r3, r3, #1
   119b4:	b2db      	uxtb	r3, r3
   119b6:	2b00      	cmp	r3, #0
   119b8:	d006      	beq.n	119c8 <_ZN9CDC_Class8readDataEPvl+0x5c>
   119ba:	68fb      	ldr	r3, [r7, #12]
   119bc:	7c1b      	ldrb	r3, [r3, #16]
   119be:	b2db      	uxtb	r3, r3
   119c0:	2b00      	cmp	r3, #0
   119c2:	d001      	beq.n	119c8 <_ZN9CDC_Class8readDataEPvl+0x5c>
   119c4:	2301      	movs	r3, #1
   119c6:	e000      	b.n	119ca <_ZN9CDC_Class8readDataEPvl+0x5e>
   119c8:	2300      	movs	r3, #0
   119ca:	2b00      	cmp	r3, #0
   119cc:	d000      	beq.n	119d0 <_ZN9CDC_Class8readDataEPvl+0x64>
   119ce:	e7ec      	b.n	119aa <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   119d0:	4808      	ldr	r0, [pc, #32]	; (119f4 <_ZN9CDC_Class8readDataEPvl+0x88>)
   119d2:	4b0b      	ldr	r3, [pc, #44]	; (11a00 <_ZN9CDC_Class8readDataEPvl+0x94>)
   119d4:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   119d6:	4906      	ldr	r1, [pc, #24]	; (119f0 <_ZN9CDC_Class8readDataEPvl+0x84>)
   119d8:	4806      	ldr	r0, [pc, #24]	; (119f4 <_ZN9CDC_Class8readDataEPvl+0x88>)
   119da:	4b0a      	ldr	r3, [pc, #40]	; (11a04 <_ZN9CDC_Class8readDataEPvl+0x98>)
   119dc:	4798      	blx	r3
   119de:	e001      	b.n	119e4 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   119e0:	2300      	movs	r3, #0
   119e2:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   119e4:	7dfb      	ldrb	r3, [r7, #23]
}
   119e6:	4618      	mov	r0, r3
   119e8:	3718      	adds	r7, #24
   119ea:	46bd      	mov	sp, r7
   119ec:	bd80      	pop	{r7, pc}
   119ee:	bf00      	nop
   119f0:	00011759 	.word	0x00011759
   119f4:	20002818 	.word	0x20002818
   119f8:	000122d1 	.word	0x000122d1
   119fc:	0000e7b1 	.word	0x0000e7b1
   11a00:	000121f1 	.word	0x000121f1
   11a04:	00012335 	.word	0x00012335

00011a08 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   11a08:	b580      	push	{r7, lr}
   11a0a:	b086      	sub	sp, #24
   11a0c:	af00      	add	r7, sp, #0
   11a0e:	60f8      	str	r0, [r7, #12]
   11a10:	60b9      	str	r1, [r7, #8]
   11a12:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   11a14:	68fb      	ldr	r3, [r7, #12]
   11a16:	2200      	movs	r2, #0
   11a18:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   11a1a:	687b      	ldr	r3, [r7, #4]
   11a1c:	4619      	mov	r1, r3
   11a1e:	68b8      	ldr	r0, [r7, #8]
   11a20:	4b04      	ldr	r3, [pc, #16]	; (11a34 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   11a22:	4798      	blx	r3
   11a24:	4603      	mov	r3, r0
   11a26:	617b      	str	r3, [r7, #20]
	return r;
   11a28:	697b      	ldr	r3, [r7, #20]
}
   11a2a:	4618      	mov	r0, r3
   11a2c:	3718      	adds	r7, #24
   11a2e:	46bd      	mov	sp, r7
   11a30:	bd80      	pop	{r7, pc}
   11a32:	bf00      	nop
   11a34:	0000e7b1 	.word	0x0000e7b1

00011a38 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   11a38:	b580      	push	{r7, lr}
   11a3a:	b084      	sub	sp, #16
   11a3c:	af00      	add	r7, sp, #0
   11a3e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   11a40:	687b      	ldr	r3, [r7, #4]
   11a42:	2200      	movs	r2, #0
   11a44:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   11a46:	f107 030f 	add.w	r3, r7, #15
   11a4a:	2101      	movs	r1, #1
   11a4c:	4618      	mov	r0, r3
   11a4e:	4b08      	ldr	r3, [pc, #32]	; (11a70 <_ZN9CDC_Class4readEv+0x38>)
   11a50:	4798      	blx	r3
	while(!rxReady);
   11a52:	687b      	ldr	r3, [r7, #4]
   11a54:	7d5b      	ldrb	r3, [r3, #21]
   11a56:	b2db      	uxtb	r3, r3
   11a58:	f083 0301 	eor.w	r3, r3, #1
   11a5c:	b2db      	uxtb	r3, r3
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d000      	beq.n	11a64 <_ZN9CDC_Class4readEv+0x2c>
   11a62:	e7f6      	b.n	11a52 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   11a64:	7bfb      	ldrb	r3, [r7, #15]
}
   11a66:	4618      	mov	r0, r3
   11a68:	3710      	adds	r7, #16
   11a6a:	46bd      	mov	sp, r7
   11a6c:	bd80      	pop	{r7, pc}
   11a6e:	bf00      	nop
   11a70:	0000e7b1 	.word	0x0000e7b1

00011a74 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   11a74:	b580      	push	{r7, lr}
   11a76:	b082      	sub	sp, #8
   11a78:	af00      	add	r7, sp, #0
   11a7a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   11a7c:	687b      	ldr	r3, [r7, #4]
   11a7e:	331c      	adds	r3, #28
   11a80:	2140      	movs	r1, #64	; 0x40
   11a82:	4618      	mov	r0, r3
   11a84:	4b02      	ldr	r3, [pc, #8]	; (11a90 <_ZN9CDC_Class5flushEv+0x1c>)
   11a86:	4798      	blx	r3
}
   11a88:	bf00      	nop
   11a8a:	3708      	adds	r7, #8
   11a8c:	46bd      	mov	sp, r7
   11a8e:	bd80      	pop	{r7, pc}
   11a90:	0000e7f5 	.word	0x0000e7f5

00011a94 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   11a94:	b580      	push	{r7, lr}
   11a96:	b082      	sub	sp, #8
   11a98:	af00      	add	r7, sp, #0
   11a9a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   11a9c:	4b02      	ldr	r3, [pc, #8]	; (11aa8 <_ZN9CDC_Class5clearEv+0x14>)
   11a9e:	4798      	blx	r3
}
   11aa0:	bf00      	nop
   11aa2:	3708      	adds	r7, #8
   11aa4:	46bd      	mov	sp, r7
   11aa6:	bd80      	pop	{r7, pc}
   11aa8:	0000e839 	.word	0x0000e839

00011aac <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   11aac:	b580      	push	{r7, lr}
   11aae:	b082      	sub	sp, #8
   11ab0:	af00      	add	r7, sp, #0
   11ab2:	6078      	str	r0, [r7, #4]
   11ab4:	460b      	mov	r3, r1
   11ab6:	70fb      	strb	r3, [r7, #3]
	if (connected){
   11ab8:	687b      	ldr	r3, [r7, #4]
   11aba:	7c1b      	ldrb	r3, [r3, #16]
   11abc:	b2db      	uxtb	r3, r3
   11abe:	2b00      	cmp	r3, #0
   11ac0:	d012      	beq.n	11ae8 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	7d1b      	ldrb	r3, [r3, #20]
   11ac6:	b2db      	uxtb	r3, r3
   11ac8:	f083 0301 	eor.w	r3, r3, #1
   11acc:	b2db      	uxtb	r3, r3
   11ace:	2b00      	cmp	r3, #0
   11ad0:	d000      	beq.n	11ad4 <_ZN9CDC_Class5writeEh+0x28>
   11ad2:	e7f6      	b.n	11ac2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   11ad4:	687b      	ldr	r3, [r7, #4]
   11ad6:	681b      	ldr	r3, [r3, #0]
   11ad8:	3324      	adds	r3, #36	; 0x24
   11ada:	681b      	ldr	r3, [r3, #0]
   11adc:	1cf9      	adds	r1, r7, #3
   11ade:	2201      	movs	r2, #1
   11ae0:	6878      	ldr	r0, [r7, #4]
   11ae2:	4798      	blx	r3
   11ae4:	4603      	mov	r3, r0
   11ae6:	e000      	b.n	11aea <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   11ae8:	2300      	movs	r3, #0
	}
		
}
   11aea:	4618      	mov	r0, r3
   11aec:	3708      	adds	r7, #8
   11aee:	46bd      	mov	sp, r7
   11af0:	bd80      	pop	{r7, pc}
	...

00011af4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   11af4:	b580      	push	{r7, lr}
   11af6:	b086      	sub	sp, #24
   11af8:	af00      	add	r7, sp, #0
   11afa:	60f8      	str	r0, [r7, #12]
   11afc:	60b9      	str	r1, [r7, #8]
   11afe:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   11b00:	68fb      	ldr	r3, [r7, #12]
   11b02:	7c1b      	ldrb	r3, [r3, #16]
   11b04:	b2db      	uxtb	r3, r3
   11b06:	2b00      	cmp	r3, #0
   11b08:	d02f      	beq.n	11b6a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   11b0a:	687a      	ldr	r2, [r7, #4]
   11b0c:	4613      	mov	r3, r2
   11b0e:	009b      	lsls	r3, r3, #2
   11b10:	4413      	add	r3, r2
   11b12:	005b      	lsls	r3, r3, #1
   11b14:	461a      	mov	r2, r3
   11b16:	4917      	ldr	r1, [pc, #92]	; (11b74 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   11b18:	4817      	ldr	r0, [pc, #92]	; (11b78 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   11b1a:	4b18      	ldr	r3, [pc, #96]	; (11b7c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   11b1c:	4798      	blx	r3
		txReady=false;
   11b1e:	68fb      	ldr	r3, [r7, #12]
   11b20:	2200      	movs	r2, #0
   11b22:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   11b24:	687b      	ldr	r3, [r7, #4]
   11b26:	4619      	mov	r1, r3
   11b28:	68b8      	ldr	r0, [r7, #8]
   11b2a:	4b15      	ldr	r3, [pc, #84]	; (11b80 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   11b2c:	4798      	blx	r3
   11b2e:	4603      	mov	r3, r0
   11b30:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   11b32:	68fb      	ldr	r3, [r7, #12]
   11b34:	7d1b      	ldrb	r3, [r3, #20]
   11b36:	b2db      	uxtb	r3, r3
   11b38:	f083 0301 	eor.w	r3, r3, #1
   11b3c:	b2db      	uxtb	r3, r3
   11b3e:	2b00      	cmp	r3, #0
   11b40:	d006      	beq.n	11b50 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   11b42:	68fb      	ldr	r3, [r7, #12]
   11b44:	7c1b      	ldrb	r3, [r3, #16]
   11b46:	b2db      	uxtb	r3, r3
   11b48:	2b00      	cmp	r3, #0
   11b4a:	d001      	beq.n	11b50 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   11b4c:	2301      	movs	r3, #1
   11b4e:	e000      	b.n	11b52 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   11b50:	2300      	movs	r3, #0
   11b52:	2b00      	cmp	r3, #0
   11b54:	d000      	beq.n	11b58 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   11b56:	e7ec      	b.n	11b32 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   11b58:	4807      	ldr	r0, [pc, #28]	; (11b78 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   11b5a:	4b0a      	ldr	r3, [pc, #40]	; (11b84 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   11b5c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   11b5e:	4905      	ldr	r1, [pc, #20]	; (11b74 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   11b60:	4805      	ldr	r0, [pc, #20]	; (11b78 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   11b62:	4b09      	ldr	r3, [pc, #36]	; (11b88 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   11b64:	4798      	blx	r3
		return r;
   11b66:	697b      	ldr	r3, [r7, #20]
   11b68:	e000      	b.n	11b6c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   11b6a:	2300      	movs	r3, #0
	}
	

}
   11b6c:	4618      	mov	r0, r3
   11b6e:	3718      	adds	r7, #24
   11b70:	46bd      	mov	sp, r7
   11b72:	bd80      	pop	{r7, pc}
   11b74:	00011759 	.word	0x00011759
   11b78:	20002818 	.word	0x20002818
   11b7c:	000122d1 	.word	0x000122d1
   11b80:	0000e7f5 	.word	0x0000e7f5
   11b84:	000121f1 	.word	0x000121f1
   11b88:	00012335 	.word	0x00012335

00011b8c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   11b8c:	b580      	push	{r7, lr}
   11b8e:	b086      	sub	sp, #24
   11b90:	af00      	add	r7, sp, #0
   11b92:	60f8      	str	r0, [r7, #12]
   11b94:	60b9      	str	r1, [r7, #8]
   11b96:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   11b98:	68fb      	ldr	r3, [r7, #12]
   11b9a:	2200      	movs	r2, #0
   11b9c:	751a      	strb	r2, [r3, #20]

 	if (connected){
   11b9e:	68fb      	ldr	r3, [r7, #12]
   11ba0:	7c1b      	ldrb	r3, [r3, #16]
   11ba2:	b2db      	uxtb	r3, r3
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	d02a      	beq.n	11bfe <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   11ba8:	687a      	ldr	r2, [r7, #4]
   11baa:	4613      	mov	r3, r2
   11bac:	009b      	lsls	r3, r3, #2
   11bae:	4413      	add	r3, r2
   11bb0:	005b      	lsls	r3, r3, #1
   11bb2:	461a      	mov	r2, r3
   11bb4:	4915      	ldr	r1, [pc, #84]	; (11c0c <_ZN9CDC_Class5writeEPKhj+0x80>)
   11bb6:	4816      	ldr	r0, [pc, #88]	; (11c10 <_ZN9CDC_Class5writeEPKhj+0x84>)
   11bb8:	4b16      	ldr	r3, [pc, #88]	; (11c14 <_ZN9CDC_Class5writeEPKhj+0x88>)
   11bba:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   11bbc:	6879      	ldr	r1, [r7, #4]
   11bbe:	68b8      	ldr	r0, [r7, #8]
   11bc0:	4b15      	ldr	r3, [pc, #84]	; (11c18 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   11bc2:	4798      	blx	r3
   11bc4:	4603      	mov	r3, r0
   11bc6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   11bc8:	68fb      	ldr	r3, [r7, #12]
   11bca:	7d1b      	ldrb	r3, [r3, #20]
   11bcc:	b2db      	uxtb	r3, r3
   11bce:	f083 0301 	eor.w	r3, r3, #1
   11bd2:	b2db      	uxtb	r3, r3
   11bd4:	2b00      	cmp	r3, #0
   11bd6:	d006      	beq.n	11be6 <_ZN9CDC_Class5writeEPKhj+0x5a>
   11bd8:	68fb      	ldr	r3, [r7, #12]
   11bda:	7c1b      	ldrb	r3, [r3, #16]
   11bdc:	b2db      	uxtb	r3, r3
   11bde:	2b00      	cmp	r3, #0
   11be0:	d001      	beq.n	11be6 <_ZN9CDC_Class5writeEPKhj+0x5a>
   11be2:	2301      	movs	r3, #1
   11be4:	e000      	b.n	11be8 <_ZN9CDC_Class5writeEPKhj+0x5c>
   11be6:	2300      	movs	r3, #0
   11be8:	2b00      	cmp	r3, #0
   11bea:	d000      	beq.n	11bee <_ZN9CDC_Class5writeEPKhj+0x62>
   11bec:	e7ec      	b.n	11bc8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   11bee:	4808      	ldr	r0, [pc, #32]	; (11c10 <_ZN9CDC_Class5writeEPKhj+0x84>)
   11bf0:	4b0a      	ldr	r3, [pc, #40]	; (11c1c <_ZN9CDC_Class5writeEPKhj+0x90>)
   11bf2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   11bf4:	4905      	ldr	r1, [pc, #20]	; (11c0c <_ZN9CDC_Class5writeEPKhj+0x80>)
   11bf6:	4806      	ldr	r0, [pc, #24]	; (11c10 <_ZN9CDC_Class5writeEPKhj+0x84>)
   11bf8:	4b09      	ldr	r3, [pc, #36]	; (11c20 <_ZN9CDC_Class5writeEPKhj+0x94>)
   11bfa:	4798      	blx	r3
   11bfc:	e001      	b.n	11c02 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   11bfe:	2300      	movs	r3, #0
   11c00:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   11c02:	697b      	ldr	r3, [r7, #20]
}
   11c04:	4618      	mov	r0, r3
   11c06:	3718      	adds	r7, #24
   11c08:	46bd      	mov	sp, r7
   11c0a:	bd80      	pop	{r7, pc}
   11c0c:	00011759 	.word	0x00011759
   11c10:	20002818 	.word	0x20002818
   11c14:	000122d1 	.word	0x000122d1
   11c18:	0000e7f5 	.word	0x0000e7f5
   11c1c:	000121f1 	.word	0x000121f1
   11c20:	00012335 	.word	0x00012335

00011c24 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   11c24:	b480      	push	{r7}
   11c26:	b083      	sub	sp, #12
   11c28:	af00      	add	r7, sp, #0
   11c2a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   11c2c:	687b      	ldr	r3, [r7, #4]
   11c2e:	7d5b      	ldrb	r3, [r3, #21]
   11c30:	b2db      	uxtb	r3, r3
   11c32:	2b00      	cmp	r3, #0
   11c34:	d006      	beq.n	11c44 <_ZN9CDC_Class9availableEv+0x20>
   11c36:	687b      	ldr	r3, [r7, #4]
   11c38:	7d1b      	ldrb	r3, [r3, #20]
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d001      	beq.n	11c44 <_ZN9CDC_Class9availableEv+0x20>
   11c40:	2301      	movs	r3, #1
   11c42:	e000      	b.n	11c46 <_ZN9CDC_Class9availableEv+0x22>
   11c44:	2300      	movs	r3, #0
   11c46:	2b00      	cmp	r3, #0
   11c48:	d001      	beq.n	11c4e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   11c4a:	2301      	movs	r3, #1
   11c4c:	e000      	b.n	11c50 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   11c4e:	2300      	movs	r3, #0
	}
	
}
   11c50:	4618      	mov	r0, r3
   11c52:	370c      	adds	r7, #12
   11c54:	46bd      	mov	sp, r7
   11c56:	bc80      	pop	{r7}
   11c58:	4770      	bx	lr
	...

00011c5c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   11c5c:	b580      	push	{r7, lr}
   11c5e:	b082      	sub	sp, #8
   11c60:	af00      	add	r7, sp, #0
   11c62:	6078      	str	r0, [r7, #4]
   11c64:	6039      	str	r1, [r7, #0]
   11c66:	687b      	ldr	r3, [r7, #4]
   11c68:	2b01      	cmp	r3, #1
   11c6a:	d10c      	bne.n	11c86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11c6c:	683b      	ldr	r3, [r7, #0]
   11c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11c72:	4293      	cmp	r3, r2
   11c74:	d107      	bne.n	11c86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11c76:	4806      	ldr	r0, [pc, #24]	; (11c90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11c78:	4b06      	ldr	r3, [pc, #24]	; (11c94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11c7a:	4798      	blx	r3
   11c7c:	4a06      	ldr	r2, [pc, #24]	; (11c98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11c7e:	4907      	ldr	r1, [pc, #28]	; (11c9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11c80:	4803      	ldr	r0, [pc, #12]	; (11c90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11c82:	4b07      	ldr	r3, [pc, #28]	; (11ca0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11c84:	4798      	blx	r3
   11c86:	bf00      	nop
   11c88:	3708      	adds	r7, #8
   11c8a:	46bd      	mov	sp, r7
   11c8c:	bd80      	pop	{r7, pc}
   11c8e:	bf00      	nop
   11c90:	20002760 	.word	0x20002760
   11c94:	00011849 	.word	0x00011849
   11c98:	20000000 	.word	0x20000000
   11c9c:	00011891 	.word	0x00011891
   11ca0:	000170d1 	.word	0x000170d1

00011ca4 <_GLOBAL__sub_I_ptrCDCClass>:
   11ca4:	b580      	push	{r7, lr}
   11ca6:	af00      	add	r7, sp, #0
   11ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11cac:	2001      	movs	r0, #1
   11cae:	4b01      	ldr	r3, [pc, #4]	; (11cb4 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   11cb0:	4798      	blx	r3
   11cb2:	bd80      	pop	{r7, pc}
   11cb4:	00011c5d 	.word	0x00011c5d

00011cb8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   11cb8:	b590      	push	{r4, r7, lr}
   11cba:	b083      	sub	sp, #12
   11cbc:	af00      	add	r7, sp, #0
   11cbe:	6078      	str	r0, [r7, #4]
   11cc0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   11cc2:	683b      	ldr	r3, [r7, #0]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d101      	bne.n	11ccc <_ZN5Print5writeEPKc+0x14>
   11cc8:	2300      	movs	r3, #0
   11cca:	e00c      	b.n	11ce6 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   11ccc:	687b      	ldr	r3, [r7, #4]
   11cce:	681b      	ldr	r3, [r3, #0]
   11cd0:	3304      	adds	r3, #4
   11cd2:	681c      	ldr	r4, [r3, #0]
   11cd4:	6838      	ldr	r0, [r7, #0]
   11cd6:	4b06      	ldr	r3, [pc, #24]	; (11cf0 <_ZN5Print5writeEPKc+0x38>)
   11cd8:	4798      	blx	r3
   11cda:	4603      	mov	r3, r0
   11cdc:	461a      	mov	r2, r3
   11cde:	6839      	ldr	r1, [r7, #0]
   11ce0:	6878      	ldr	r0, [r7, #4]
   11ce2:	47a0      	blx	r4
   11ce4:	4603      	mov	r3, r0
    }
   11ce6:	4618      	mov	r0, r3
   11ce8:	370c      	adds	r7, #12
   11cea:	46bd      	mov	sp, r7
   11cec:	bd90      	pop	{r4, r7, pc}
   11cee:	bf00      	nop
   11cf0:	00019381 	.word	0x00019381

00011cf4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   11cf4:	b580      	push	{r7, lr}
   11cf6:	b086      	sub	sp, #24
   11cf8:	af00      	add	r7, sp, #0
   11cfa:	60f8      	str	r0, [r7, #12]
   11cfc:	60b9      	str	r1, [r7, #8]
   11cfe:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   11d00:	2300      	movs	r3, #0
   11d02:	617b      	str	r3, [r7, #20]
  while (size--) {
   11d04:	687b      	ldr	r3, [r7, #4]
   11d06:	1e5a      	subs	r2, r3, #1
   11d08:	607a      	str	r2, [r7, #4]
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	bf14      	ite	ne
   11d0e:	2301      	movne	r3, #1
   11d10:	2300      	moveq	r3, #0
   11d12:	b2db      	uxtb	r3, r3
   11d14:	2b00      	cmp	r3, #0
   11d16:	d016      	beq.n	11d46 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   11d18:	68fb      	ldr	r3, [r7, #12]
   11d1a:	681b      	ldr	r3, [r3, #0]
   11d1c:	681a      	ldr	r2, [r3, #0]
   11d1e:	68bb      	ldr	r3, [r7, #8]
   11d20:	1c59      	adds	r1, r3, #1
   11d22:	60b9      	str	r1, [r7, #8]
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	4619      	mov	r1, r3
   11d28:	68f8      	ldr	r0, [r7, #12]
   11d2a:	4790      	blx	r2
   11d2c:	4603      	mov	r3, r0
   11d2e:	2b00      	cmp	r3, #0
   11d30:	bf14      	ite	ne
   11d32:	2301      	movne	r3, #1
   11d34:	2300      	moveq	r3, #0
   11d36:	b2db      	uxtb	r3, r3
   11d38:	2b00      	cmp	r3, #0
   11d3a:	d003      	beq.n	11d44 <_ZN5Print5writeEPKhj+0x50>
   11d3c:	697b      	ldr	r3, [r7, #20]
   11d3e:	3301      	adds	r3, #1
   11d40:	617b      	str	r3, [r7, #20]
  while (size--) {
   11d42:	e7df      	b.n	11d04 <_ZN5Print5writeEPKhj+0x10>
    else break;
   11d44:	bf00      	nop
  }
  return n;
   11d46:	697b      	ldr	r3, [r7, #20]
}
   11d48:	4618      	mov	r0, r3
   11d4a:	3718      	adds	r7, #24
   11d4c:	46bd      	mov	sp, r7
   11d4e:	bd80      	pop	{r7, pc}

00011d50 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   11d50:	b580      	push	{r7, lr}
   11d52:	b082      	sub	sp, #8
   11d54:	af00      	add	r7, sp, #0
   11d56:	6078      	str	r0, [r7, #4]
   11d58:	6039      	str	r1, [r7, #0]
  return write(str);
   11d5a:	6839      	ldr	r1, [r7, #0]
   11d5c:	6878      	ldr	r0, [r7, #4]
   11d5e:	4b03      	ldr	r3, [pc, #12]	; (11d6c <_ZN5Print5printEPKc+0x1c>)
   11d60:	4798      	blx	r3
   11d62:	4603      	mov	r3, r0
}
   11d64:	4618      	mov	r0, r3
   11d66:	3708      	adds	r7, #8
   11d68:	46bd      	mov	sp, r7
   11d6a:	bd80      	pop	{r7, pc}
   11d6c:	00011cb9 	.word	0x00011cb9

00011d70 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   11d70:	b580      	push	{r7, lr}
   11d72:	b084      	sub	sp, #16
   11d74:	af00      	add	r7, sp, #0
   11d76:	60f8      	str	r0, [r7, #12]
   11d78:	460b      	mov	r3, r1
   11d7a:	607a      	str	r2, [r7, #4]
   11d7c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   11d7e:	7afb      	ldrb	r3, [r7, #11]
   11d80:	687a      	ldr	r2, [r7, #4]
   11d82:	4619      	mov	r1, r3
   11d84:	68f8      	ldr	r0, [r7, #12]
   11d86:	4b03      	ldr	r3, [pc, #12]	; (11d94 <_ZN5Print5printEhi+0x24>)
   11d88:	4798      	blx	r3
   11d8a:	4603      	mov	r3, r0
}
   11d8c:	4618      	mov	r0, r3
   11d8e:	3710      	adds	r7, #16
   11d90:	46bd      	mov	sp, r7
   11d92:	bd80      	pop	{r7, pc}
   11d94:	00011d99 	.word	0x00011d99

00011d98 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   11d98:	b580      	push	{r7, lr}
   11d9a:	b084      	sub	sp, #16
   11d9c:	af00      	add	r7, sp, #0
   11d9e:	60f8      	str	r0, [r7, #12]
   11da0:	60b9      	str	r1, [r7, #8]
   11da2:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   11da4:	687b      	ldr	r3, [r7, #4]
   11da6:	2b00      	cmp	r3, #0
   11da8:	d109      	bne.n	11dbe <_ZN5Print5printEmi+0x26>
   11daa:	68fb      	ldr	r3, [r7, #12]
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	681b      	ldr	r3, [r3, #0]
   11db0:	68ba      	ldr	r2, [r7, #8]
   11db2:	b2d2      	uxtb	r2, r2
   11db4:	4611      	mov	r1, r2
   11db6:	68f8      	ldr	r0, [r7, #12]
   11db8:	4798      	blx	r3
   11dba:	4603      	mov	r3, r0
   11dbc:	e007      	b.n	11dce <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   11dbe:	687b      	ldr	r3, [r7, #4]
   11dc0:	b2db      	uxtb	r3, r3
   11dc2:	461a      	mov	r2, r3
   11dc4:	68b9      	ldr	r1, [r7, #8]
   11dc6:	68f8      	ldr	r0, [r7, #12]
   11dc8:	4b03      	ldr	r3, [pc, #12]	; (11dd8 <_ZN5Print5printEmi+0x40>)
   11dca:	4798      	blx	r3
   11dcc:	4603      	mov	r3, r0
}
   11dce:	4618      	mov	r0, r3
   11dd0:	3710      	adds	r7, #16
   11dd2:	46bd      	mov	sp, r7
   11dd4:	bd80      	pop	{r7, pc}
   11dd6:	bf00      	nop
   11dd8:	00011e35 	.word	0x00011e35

00011ddc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   11ddc:	b580      	push	{r7, lr}
   11dde:	b082      	sub	sp, #8
   11de0:	af00      	add	r7, sp, #0
   11de2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   11de4:	4904      	ldr	r1, [pc, #16]	; (11df8 <_ZN5Print7printlnEv+0x1c>)
   11de6:	6878      	ldr	r0, [r7, #4]
   11de8:	4b04      	ldr	r3, [pc, #16]	; (11dfc <_ZN5Print7printlnEv+0x20>)
   11dea:	4798      	blx	r3
   11dec:	4603      	mov	r3, r0
}
   11dee:	4618      	mov	r0, r3
   11df0:	3708      	adds	r7, #8
   11df2:	46bd      	mov	sp, r7
   11df4:	bd80      	pop	{r7, pc}
   11df6:	bf00      	nop
   11df8:	0001a8b0 	.word	0x0001a8b0
   11dfc:	00011cb9 	.word	0x00011cb9

00011e00 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   11e00:	b580      	push	{r7, lr}
   11e02:	b084      	sub	sp, #16
   11e04:	af00      	add	r7, sp, #0
   11e06:	6078      	str	r0, [r7, #4]
   11e08:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   11e0a:	6839      	ldr	r1, [r7, #0]
   11e0c:	6878      	ldr	r0, [r7, #4]
   11e0e:	4b07      	ldr	r3, [pc, #28]	; (11e2c <_ZN5Print7printlnEPKc+0x2c>)
   11e10:	4798      	blx	r3
   11e12:	60f8      	str	r0, [r7, #12]
  n += println();
   11e14:	6878      	ldr	r0, [r7, #4]
   11e16:	4b06      	ldr	r3, [pc, #24]	; (11e30 <_ZN5Print7printlnEPKc+0x30>)
   11e18:	4798      	blx	r3
   11e1a:	4602      	mov	r2, r0
   11e1c:	68fb      	ldr	r3, [r7, #12]
   11e1e:	4413      	add	r3, r2
   11e20:	60fb      	str	r3, [r7, #12]
  return n;
   11e22:	68fb      	ldr	r3, [r7, #12]
}
   11e24:	4618      	mov	r0, r3
   11e26:	3710      	adds	r7, #16
   11e28:	46bd      	mov	sp, r7
   11e2a:	bd80      	pop	{r7, pc}
   11e2c:	00011d51 	.word	0x00011d51
   11e30:	00011ddd 	.word	0x00011ddd

00011e34 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   11e34:	b580      	push	{r7, lr}
   11e36:	b08e      	sub	sp, #56	; 0x38
   11e38:	af00      	add	r7, sp, #0
   11e3a:	60f8      	str	r0, [r7, #12]
   11e3c:	60b9      	str	r1, [r7, #8]
   11e3e:	4613      	mov	r3, r2
   11e40:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   11e42:	f107 0310 	add.w	r3, r7, #16
   11e46:	3320      	adds	r3, #32
   11e48:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   11e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11e4c:	2200      	movs	r2, #0
   11e4e:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   11e50:	79fb      	ldrb	r3, [r7, #7]
   11e52:	2b01      	cmp	r3, #1
   11e54:	dc01      	bgt.n	11e5a <_ZN5Print11printNumberEmh+0x26>
   11e56:	230a      	movs	r3, #10
   11e58:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   11e5a:	79fa      	ldrb	r2, [r7, #7]
   11e5c:	68bb      	ldr	r3, [r7, #8]
   11e5e:	fbb3 f1f2 	udiv	r1, r3, r2
   11e62:	fb02 f201 	mul.w	r2, r2, r1
   11e66:	1a9b      	subs	r3, r3, r2
   11e68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   11e6c:	79fb      	ldrb	r3, [r7, #7]
   11e6e:	68ba      	ldr	r2, [r7, #8]
   11e70:	fbb2 f3f3 	udiv	r3, r2, r3
   11e74:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   11e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11e78:	3b01      	subs	r3, #1
   11e7a:	637b      	str	r3, [r7, #52]	; 0x34
   11e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   11e80:	2b09      	cmp	r3, #9
   11e82:	dc04      	bgt.n	11e8e <_ZN5Print11printNumberEmh+0x5a>
   11e84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   11e88:	3330      	adds	r3, #48	; 0x30
   11e8a:	b2db      	uxtb	r3, r3
   11e8c:	e003      	b.n	11e96 <_ZN5Print11printNumberEmh+0x62>
   11e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   11e92:	3337      	adds	r3, #55	; 0x37
   11e94:	b2db      	uxtb	r3, r3
   11e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11e98:	7013      	strb	r3, [r2, #0]
  } while(n);
   11e9a:	68bb      	ldr	r3, [r7, #8]
   11e9c:	2b00      	cmp	r3, #0
   11e9e:	d000      	beq.n	11ea2 <_ZN5Print11printNumberEmh+0x6e>
  do {
   11ea0:	e7db      	b.n	11e5a <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   11ea2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   11ea4:	68f8      	ldr	r0, [r7, #12]
   11ea6:	4b03      	ldr	r3, [pc, #12]	; (11eb4 <_ZN5Print11printNumberEmh+0x80>)
   11ea8:	4798      	blx	r3
   11eaa:	4603      	mov	r3, r0
}
   11eac:	4618      	mov	r0, r3
   11eae:	3738      	adds	r7, #56	; 0x38
   11eb0:	46bd      	mov	sp, r7
   11eb2:	bd80      	pop	{r7, pc}
   11eb4:	00011cb9 	.word	0x00011cb9

00011eb8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   11eb8:	b480      	push	{r7}
   11eba:	b083      	sub	sp, #12
   11ebc:	af00      	add	r7, sp, #0
   11ebe:	6078      	str	r0, [r7, #4]
   11ec0:	460b      	mov	r3, r1
   11ec2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   11ec4:	78fb      	ldrb	r3, [r7, #3]
   11ec6:	687a      	ldr	r2, [r7, #4]
   11ec8:	01db      	lsls	r3, r3, #7
   11eca:	4413      	add	r3, r2
   11ecc:	681b      	ldr	r3, [r3, #0]
}
   11ece:	4618      	mov	r0, r3
   11ed0:	370c      	adds	r7, #12
   11ed2:	46bd      	mov	sp, r7
   11ed4:	bc80      	pop	{r7}
   11ed6:	4770      	bx	lr

00011ed8 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   11ed8:	b480      	push	{r7}
   11eda:	b083      	sub	sp, #12
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
   11ee0:	460b      	mov	r3, r1
   11ee2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   11ee4:	78fb      	ldrb	r3, [r7, #3]
   11ee6:	687a      	ldr	r2, [r7, #4]
   11ee8:	01db      	lsls	r3, r3, #7
   11eea:	4413      	add	r3, r2
   11eec:	3310      	adds	r3, #16
   11eee:	681b      	ldr	r3, [r3, #0]
}
   11ef0:	4618      	mov	r0, r3
   11ef2:	370c      	adds	r7, #12
   11ef4:	46bd      	mov	sp, r7
   11ef6:	bc80      	pop	{r7}
   11ef8:	4770      	bx	lr

00011efa <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   11efa:	b480      	push	{r7}
   11efc:	b083      	sub	sp, #12
   11efe:	af00      	add	r7, sp, #0
   11f00:	6078      	str	r0, [r7, #4]
   11f02:	460b      	mov	r3, r1
   11f04:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   11f06:	78fb      	ldrb	r3, [r7, #3]
   11f08:	687a      	ldr	r2, [r7, #4]
   11f0a:	01db      	lsls	r3, r3, #7
   11f0c:	4413      	add	r3, r2
   11f0e:	3320      	adds	r3, #32
   11f10:	681b      	ldr	r3, [r3, #0]
}
   11f12:	4618      	mov	r0, r3
   11f14:	370c      	adds	r7, #12
   11f16:	46bd      	mov	sp, r7
   11f18:	bc80      	pop	{r7}
   11f1a:	4770      	bx	lr

00011f1c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   11f1c:	b580      	push	{r7, lr}
   11f1e:	b086      	sub	sp, #24
   11f20:	af00      	add	r7, sp, #0
   11f22:	4603      	mov	r3, r0
   11f24:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   11f26:	f107 030c 	add.w	r3, r7, #12
   11f2a:	4618      	mov	r0, r3
   11f2c:	4b13      	ldr	r3, [pc, #76]	; (11f7c <_gpio_get_level+0x60>)
   11f2e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   11f30:	79fb      	ldrb	r3, [r7, #7]
   11f32:	4619      	mov	r1, r3
   11f34:	4812      	ldr	r0, [pc, #72]	; (11f80 <_gpio_get_level+0x64>)
   11f36:	4b13      	ldr	r3, [pc, #76]	; (11f84 <_gpio_get_level+0x68>)
   11f38:	4798      	blx	r3
   11f3a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   11f3c:	79fb      	ldrb	r3, [r7, #7]
   11f3e:	4619      	mov	r1, r3
   11f40:	480f      	ldr	r0, [pc, #60]	; (11f80 <_gpio_get_level+0x64>)
   11f42:	4b11      	ldr	r3, [pc, #68]	; (11f88 <_gpio_get_level+0x6c>)
   11f44:	4798      	blx	r3
   11f46:	4602      	mov	r2, r0
   11f48:	697b      	ldr	r3, [r7, #20]
   11f4a:	43db      	mvns	r3, r3
   11f4c:	4013      	ands	r3, r2
   11f4e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   11f50:	79fb      	ldrb	r3, [r7, #7]
   11f52:	4619      	mov	r1, r3
   11f54:	480a      	ldr	r0, [pc, #40]	; (11f80 <_gpio_get_level+0x64>)
   11f56:	4b0d      	ldr	r3, [pc, #52]	; (11f8c <_gpio_get_level+0x70>)
   11f58:	4798      	blx	r3
   11f5a:	4602      	mov	r2, r0
   11f5c:	697b      	ldr	r3, [r7, #20]
   11f5e:	4013      	ands	r3, r2
   11f60:	693a      	ldr	r2, [r7, #16]
   11f62:	4313      	orrs	r3, r2
   11f64:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   11f66:	f107 030c 	add.w	r3, r7, #12
   11f6a:	4618      	mov	r0, r3
   11f6c:	4b08      	ldr	r3, [pc, #32]	; (11f90 <_gpio_get_level+0x74>)
   11f6e:	4798      	blx	r3

	return tmp;
   11f70:	693b      	ldr	r3, [r7, #16]
}
   11f72:	4618      	mov	r0, r3
   11f74:	3718      	adds	r7, #24
   11f76:	46bd      	mov	sp, r7
   11f78:	bd80      	pop	{r7, pc}
   11f7a:	bf00      	nop
   11f7c:	0000d9d1 	.word	0x0000d9d1
   11f80:	41008000 	.word	0x41008000
   11f84:	00011eb9 	.word	0x00011eb9
   11f88:	00011efb 	.word	0x00011efb
   11f8c:	00011ed9 	.word	0x00011ed9
   11f90:	0000d9f7 	.word	0x0000d9f7

00011f94 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   11f94:	b580      	push	{r7, lr}
   11f96:	b082      	sub	sp, #8
   11f98:	af00      	add	r7, sp, #0
   11f9a:	4603      	mov	r3, r0
   11f9c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   11f9e:	79fb      	ldrb	r3, [r7, #7]
   11fa0:	115b      	asrs	r3, r3, #5
   11fa2:	b2db      	uxtb	r3, r3
   11fa4:	4618      	mov	r0, r3
   11fa6:	4b09      	ldr	r3, [pc, #36]	; (11fcc <gpio_get_pin_level+0x38>)
   11fa8:	4798      	blx	r3
   11faa:	4601      	mov	r1, r0
   11fac:	79fb      	ldrb	r3, [r7, #7]
   11fae:	f003 031f 	and.w	r3, r3, #31
   11fb2:	2201      	movs	r2, #1
   11fb4:	fa02 f303 	lsl.w	r3, r2, r3
   11fb8:	400b      	ands	r3, r1
   11fba:	2b00      	cmp	r3, #0
   11fbc:	bf14      	ite	ne
   11fbe:	2301      	movne	r3, #1
   11fc0:	2300      	moveq	r3, #0
   11fc2:	b2db      	uxtb	r3, r3
}
   11fc4:	4618      	mov	r0, r3
   11fc6:	3708      	adds	r7, #8
   11fc8:	46bd      	mov	sp, r7
   11fca:	bd80      	pop	{r7, pc}
   11fcc:	00011f1d 	.word	0x00011f1d

00011fd0 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   11fd0:	b480      	push	{r7}
   11fd2:	b083      	sub	sp, #12
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   11fd8:	4b06      	ldr	r3, [pc, #24]	; (11ff4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	2201      	movs	r2, #1
   11fde:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   11fe0:	4b04      	ldr	r3, [pc, #16]	; (11ff4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   11fe2:	681b      	ldr	r3, [r3, #0]
   11fe4:	2200      	movs	r2, #0
   11fe6:	705a      	strb	r2, [r3, #1]
}
   11fe8:	bf00      	nop
   11fea:	370c      	adds	r7, #12
   11fec:	46bd      	mov	sp, r7
   11fee:	bc80      	pop	{r7}
   11ff0:	4770      	bx	lr
   11ff2:	bf00      	nop
   11ff4:	200027c0 	.word	0x200027c0

00011ff8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   11ff8:	b580      	push	{r7, lr}
   11ffa:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   11ffc:	2040      	movs	r0, #64	; 0x40
   11ffe:	4b0a      	ldr	r3, [pc, #40]	; (12028 <_ZL10USBPluggedv+0x30>)
   12000:	4798      	blx	r3
   12002:	4603      	mov	r3, r0
   12004:	2b00      	cmp	r3, #0
   12006:	d004      	beq.n	12012 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   12008:	4b08      	ldr	r3, [pc, #32]	; (1202c <_ZL10USBPluggedv+0x34>)
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	2201      	movs	r2, #1
   1200e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   12010:	e007      	b.n	12022 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   12012:	4b06      	ldr	r3, [pc, #24]	; (1202c <_ZL10USBPluggedv+0x34>)
   12014:	681b      	ldr	r3, [r3, #0]
   12016:	2200      	movs	r2, #0
   12018:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   1201a:	4b04      	ldr	r3, [pc, #16]	; (1202c <_ZL10USBPluggedv+0x34>)
   1201c:	681b      	ldr	r3, [r3, #0]
   1201e:	2200      	movs	r2, #0
   12020:	701a      	strb	r2, [r3, #0]
}
   12022:	bf00      	nop
   12024:	bd80      	pop	{r7, pc}
   12026:	bf00      	nop
   12028:	00011f95 	.word	0x00011f95
   1202c:	200027c0 	.word	0x200027c0

00012030 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   12030:	b480      	push	{r7}
   12032:	b083      	sub	sp, #12
   12034:	af00      	add	r7, sp, #0
   12036:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   12038:	4a04      	ldr	r2, [pc, #16]	; (1204c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   1203e:	687b      	ldr	r3, [r7, #4]
   12040:	4618      	mov	r0, r3
   12042:	370c      	adds	r7, #12
   12044:	46bd      	mov	sp, r7
   12046:	bc80      	pop	{r7}
   12048:	4770      	bx	lr
   1204a:	bf00      	nop
   1204c:	200027c0 	.word	0x200027c0

00012050 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   12050:	b480      	push	{r7}
   12052:	b083      	sub	sp, #12
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   12058:	687b      	ldr	r3, [r7, #4]
   1205a:	4618      	mov	r0, r3
   1205c:	370c      	adds	r7, #12
   1205e:	46bd      	mov	sp, r7
   12060:	bc80      	pop	{r7}
   12062:	4770      	bx	lr

00012064 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   12064:	b580      	push	{r7, lr}
   12066:	b082      	sub	sp, #8
   12068:	af00      	add	r7, sp, #0
   1206a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   1206c:	491f      	ldr	r1, [pc, #124]	; (120ec <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   1206e:	2040      	movs	r0, #64	; 0x40
   12070:	4b1f      	ldr	r3, [pc, #124]	; (120f0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   12072:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   12074:	481f      	ldr	r0, [pc, #124]	; (120f4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   12076:	4b20      	ldr	r3, [pc, #128]	; (120f8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   12078:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   1207a:	2040      	movs	r0, #64	; 0x40
   1207c:	4b1f      	ldr	r3, [pc, #124]	; (120fc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   1207e:	4798      	blx	r3
   12080:	4603      	mov	r3, r0
   12082:	461a      	mov	r2, r3
   12084:	687b      	ldr	r3, [r7, #4]
   12086:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	78db      	ldrb	r3, [r3, #3]
   1208c:	2b00      	cmp	r3, #0
   1208e:	d024      	beq.n	120da <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   12090:	687b      	ldr	r3, [r7, #4]
   12092:	2200      	movs	r2, #0
   12094:	709a      	strb	r2, [r3, #2]
			plugged=true;
   12096:	687b      	ldr	r3, [r7, #4]
   12098:	2201      	movs	r2, #1
   1209a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   1209c:	f44f 7216 	mov.w	r2, #600	; 0x258
   120a0:	4917      	ldr	r1, [pc, #92]	; (12100 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   120a2:	4814      	ldr	r0, [pc, #80]	; (120f4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   120a4:	4b17      	ldr	r3, [pc, #92]	; (12104 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   120a6:	4798      	blx	r3
			usbTerminalTimer.Start();
   120a8:	4812      	ldr	r0, [pc, #72]	; (120f4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   120aa:	4b17      	ldr	r3, [pc, #92]	; (12108 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   120ac:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   120ae:	4817      	ldr	r0, [pc, #92]	; (1210c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   120b0:	4b17      	ldr	r3, [pc, #92]	; (12110 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   120b2:	4798      	blx	r3
   120b4:	4603      	mov	r3, r0
   120b6:	f083 0301 	eor.w	r3, r3, #1
   120ba:	b2db      	uxtb	r3, r3
   120bc:	2b00      	cmp	r3, #0
   120be:	d008      	beq.n	120d2 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   120c0:	687b      	ldr	r3, [r7, #4]
   120c2:	789b      	ldrb	r3, [r3, #2]
   120c4:	b2db      	uxtb	r3, r3
   120c6:	2b00      	cmp	r3, #0
   120c8:	d0f1      	beq.n	120ae <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   120ca:	687b      	ldr	r3, [r7, #4]
   120cc:	2200      	movs	r2, #0
   120ce:	701a      	strb	r2, [r3, #0]
					return;
   120d0:	e009      	b.n	120e6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   120d2:	4808      	ldr	r0, [pc, #32]	; (120f4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   120d4:	4b0f      	ldr	r3, [pc, #60]	; (12114 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   120d6:	4798      	blx	r3
   120d8:	e005      	b.n	120e6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   120da:	687b      	ldr	r3, [r7, #4]
   120dc:	2200      	movs	r2, #0
   120de:	701a      	strb	r2, [r3, #0]
			plugged=false;
   120e0:	687b      	ldr	r3, [r7, #4]
   120e2:	2200      	movs	r2, #0
   120e4:	705a      	strb	r2, [r3, #1]
		}
		
}
   120e6:	3708      	adds	r7, #8
   120e8:	46bd      	mov	sp, r7
   120ea:	bd80      	pop	{r7, pc}
   120ec:	00011ff9 	.word	0x00011ff9
   120f0:	00003f69 	.word	0x00003f69
   120f4:	20002818 	.word	0x20002818
   120f8:	00012195 	.word	0x00012195
   120fc:	00011f95 	.word	0x00011f95
   12100:	00011fd1 	.word	0x00011fd1
   12104:	000122a9 	.word	0x000122a9
   12108:	000121cd 	.word	0x000121cd
   1210c:	20002760 	.word	0x20002760
   12110:	00011901 	.word	0x00011901
   12114:	000121f1 	.word	0x000121f1

00012118 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   12118:	b580      	push	{r7, lr}
   1211a:	b082      	sub	sp, #8
   1211c:	af00      	add	r7, sp, #0
   1211e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   12120:	4b04      	ldr	r3, [pc, #16]	; (12134 <_ZL7task_cbPK10timer_task+0x1c>)
   12122:	681b      	ldr	r3, [r3, #0]
   12124:	4618      	mov	r0, r3
   12126:	4b04      	ldr	r3, [pc, #16]	; (12138 <_ZL7task_cbPK10timer_task+0x20>)
   12128:	4798      	blx	r3
}
   1212a:	bf00      	nop
   1212c:	3708      	adds	r7, #8
   1212e:	46bd      	mov	sp, r7
   12130:	bd80      	pop	{r7, pc}
   12132:	bf00      	nop
   12134:	200027c4 	.word	0x200027c4
   12138:	00012219 	.word	0x00012219

0001213c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   1213c:	b480      	push	{r7}
   1213e:	b083      	sub	sp, #12
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
   12144:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   12146:	687b      	ldr	r3, [r7, #4]
   12148:	683a      	ldr	r2, [r7, #0]
   1214a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   1214c:	4a08      	ldr	r2, [pc, #32]	; (12170 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   1214e:	687b      	ldr	r3, [r7, #4]
   12150:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   12152:	687b      	ldr	r3, [r7, #4]
   12154:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12158:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   1215a:	687b      	ldr	r3, [r7, #4]
   1215c:	689b      	ldr	r3, [r3, #8]
   1215e:	4a05      	ldr	r2, [pc, #20]	; (12174 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   12160:	60da      	str	r2, [r3, #12]
} //Timer_Class
   12162:	687b      	ldr	r3, [r7, #4]
   12164:	4618      	mov	r0, r3
   12166:	370c      	adds	r7, #12
   12168:	46bd      	mov	sp, r7
   1216a:	bc80      	pop	{r7}
   1216c:	4770      	bx	lr
   1216e:	bf00      	nop
   12170:	200027c4 	.word	0x200027c4
   12174:	00012119 	.word	0x00012119

00012178 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   12178:	b480      	push	{r7}
   1217a:	b083      	sub	sp, #12
   1217c:	af00      	add	r7, sp, #0
   1217e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   12180:	687b      	ldr	r3, [r7, #4]
   12182:	2200      	movs	r2, #0
   12184:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   12186:	687b      	ldr	r3, [r7, #4]
   12188:	4618      	mov	r0, r3
   1218a:	370c      	adds	r7, #12
   1218c:	46bd      	mov	sp, r7
   1218e:	bc80      	pop	{r7}
   12190:	4770      	bx	lr
	...

00012194 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   12194:	b580      	push	{r7, lr}
   12196:	b082      	sub	sp, #8
   12198:	af00      	add	r7, sp, #0
   1219a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	2200      	movs	r2, #0
   121a0:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   121a2:	6878      	ldr	r0, [r7, #4]
   121a4:	4b08      	ldr	r3, [pc, #32]	; (121c8 <_ZN17TimerSerial_Class4InitEv+0x34>)
   121a6:	4798      	blx	r3
   121a8:	4603      	mov	r3, r0
   121aa:	2b00      	cmp	r3, #0
   121ac:	bf0c      	ite	eq
   121ae:	2301      	moveq	r3, #1
   121b0:	2300      	movne	r3, #0
   121b2:	b2da      	uxtb	r2, r3
   121b4:	687b      	ldr	r3, [r7, #4]
   121b6:	709a      	strb	r2, [r3, #2]
	return isOK;
   121b8:	687b      	ldr	r3, [r7, #4]
   121ba:	789b      	ldrb	r3, [r3, #2]
   121bc:	b2db      	uxtb	r3, r3
}
   121be:	4618      	mov	r0, r3
   121c0:	3708      	adds	r7, #8
   121c2:	46bd      	mov	sp, r7
   121c4:	bd80      	pop	{r7, pc}
   121c6:	bf00      	nop
   121c8:	000121cd 	.word	0x000121cd

000121cc <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   121cc:	b580      	push	{r7, lr}
   121ce:	b084      	sub	sp, #16
   121d0:	af00      	add	r7, sp, #0
   121d2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   121d4:	687b      	ldr	r3, [r7, #4]
   121d6:	691b      	ldr	r3, [r3, #16]
   121d8:	4618      	mov	r0, r3
   121da:	4b04      	ldr	r3, [pc, #16]	; (121ec <_ZN17TimerSerial_Class5StartEv+0x20>)
   121dc:	4798      	blx	r3
   121de:	60f8      	str	r0, [r7, #12]
	return status;
   121e0:	68fb      	ldr	r3, [r7, #12]
	
}
   121e2:	4618      	mov	r0, r3
   121e4:	3710      	adds	r7, #16
   121e6:	46bd      	mov	sp, r7
   121e8:	bd80      	pop	{r7, pc}
   121ea:	bf00      	nop
   121ec:	000047cd 	.word	0x000047cd

000121f0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   121f0:	b580      	push	{r7, lr}
   121f2:	b084      	sub	sp, #16
   121f4:	af00      	add	r7, sp, #0
   121f6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	691b      	ldr	r3, [r3, #16]
   121fc:	4618      	mov	r0, r3
   121fe:	4b05      	ldr	r3, [pc, #20]	; (12214 <_ZN17TimerSerial_Class4StopEv+0x24>)
   12200:	4798      	blx	r3
   12202:	60f8      	str	r0, [r7, #12]
	timeout=0;
   12204:	687b      	ldr	r3, [r7, #4]
   12206:	2200      	movs	r2, #0
   12208:	705a      	strb	r2, [r3, #1]
	return status;
   1220a:	68fb      	ldr	r3, [r7, #12]
}
   1220c:	4618      	mov	r0, r3
   1220e:	3710      	adds	r7, #16
   12210:	46bd      	mov	sp, r7
   12212:	bd80      	pop	{r7, pc}
   12214:	00004835 	.word	0x00004835

00012218 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   12218:	b480      	push	{r7}
   1221a:	b083      	sub	sp, #12
   1221c:	af00      	add	r7, sp, #0
   1221e:	6078      	str	r0, [r7, #4]
	timeout=1;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	2201      	movs	r2, #1
   12224:	705a      	strb	r2, [r3, #1]
}
   12226:	bf00      	nop
   12228:	370c      	adds	r7, #12
   1222a:	46bd      	mov	sp, r7
   1222c:	bc80      	pop	{r7}
   1222e:	4770      	bx	lr

00012230 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   12230:	b580      	push	{r7, lr}
   12232:	b086      	sub	sp, #24
   12234:	af00      	add	r7, sp, #0
   12236:	60f8      	str	r0, [r7, #12]
   12238:	60b9      	str	r1, [r7, #8]
   1223a:	607a      	str	r2, [r7, #4]
   1223c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   1223e:	68f8      	ldr	r0, [r7, #12]
   12240:	4b0d      	ldr	r3, [pc, #52]	; (12278 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   12242:	4798      	blx	r3
	task->interval = interval;
   12244:	68fb      	ldr	r3, [r7, #12]
   12246:	689b      	ldr	r3, [r3, #8]
   12248:	687a      	ldr	r2, [r7, #4]
   1224a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   1224c:	68fb      	ldr	r3, [r7, #12]
   1224e:	689b      	ldr	r3, [r3, #8]
   12250:	68ba      	ldr	r2, [r7, #8]
   12252:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	689b      	ldr	r3, [r3, #8]
   12258:	78fa      	ldrb	r2, [r7, #3]
   1225a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   1225c:	68fb      	ldr	r3, [r7, #12]
   1225e:	691a      	ldr	r2, [r3, #16]
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	4619      	mov	r1, r3
   12266:	4610      	mov	r0, r2
   12268:	4b04      	ldr	r3, [pc, #16]	; (1227c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   1226a:	4798      	blx	r3
   1226c:	6178      	str	r0, [r7, #20]
	
	return status;
   1226e:	697b      	ldr	r3, [r7, #20]
}
   12270:	4618      	mov	r0, r3
   12272:	3718      	adds	r7, #24
   12274:	46bd      	mov	sp, r7
   12276:	bd80      	pop	{r7, pc}
   12278:	0001238d 	.word	0x0001238d
   1227c:	000048a1 	.word	0x000048a1

00012280 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   12280:	b590      	push	{r4, r7, lr}
   12282:	b087      	sub	sp, #28
   12284:	af00      	add	r7, sp, #0
   12286:	60f8      	str	r0, [r7, #12]
   12288:	60b9      	str	r1, [r7, #8]
   1228a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   1228c:	2301      	movs	r3, #1
   1228e:	687a      	ldr	r2, [r7, #4]
   12290:	68b9      	ldr	r1, [r7, #8]
   12292:	68f8      	ldr	r0, [r7, #12]
   12294:	4c03      	ldr	r4, [pc, #12]	; (122a4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   12296:	47a0      	blx	r4
   12298:	6178      	str	r0, [r7, #20]
		return status;
   1229a:	697b      	ldr	r3, [r7, #20]
}
   1229c:	4618      	mov	r0, r3
   1229e:	371c      	adds	r7, #28
   122a0:	46bd      	mov	sp, r7
   122a2:	bd90      	pop	{r4, r7, pc}
   122a4:	00012231 	.word	0x00012231

000122a8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   122a8:	b590      	push	{r4, r7, lr}
   122aa:	b087      	sub	sp, #28
   122ac:	af00      	add	r7, sp, #0
   122ae:	60f8      	str	r0, [r7, #12]
   122b0:	60b9      	str	r1, [r7, #8]
   122b2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   122b4:	2300      	movs	r3, #0
   122b6:	687a      	ldr	r2, [r7, #4]
   122b8:	68b9      	ldr	r1, [r7, #8]
   122ba:	68f8      	ldr	r0, [r7, #12]
   122bc:	4c03      	ldr	r4, [pc, #12]	; (122cc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   122be:	47a0      	blx	r4
   122c0:	6178      	str	r0, [r7, #20]
	return status;
   122c2:	697b      	ldr	r3, [r7, #20]
}
   122c4:	4618      	mov	r0, r3
   122c6:	371c      	adds	r7, #28
   122c8:	46bd      	mov	sp, r7
   122ca:	bd90      	pop	{r4, r7, pc}
   122cc:	00012231 	.word	0x00012231

000122d0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   122d0:	b590      	push	{r4, r7, lr}
   122d2:	b087      	sub	sp, #28
   122d4:	af00      	add	r7, sp, #0
   122d6:	60f8      	str	r0, [r7, #12]
   122d8:	60b9      	str	r1, [r7, #8]
   122da:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   122dc:	2300      	movs	r3, #0
   122de:	687a      	ldr	r2, [r7, #4]
   122e0:	68b9      	ldr	r1, [r7, #8]
   122e2:	68f8      	ldr	r0, [r7, #12]
   122e4:	4c06      	ldr	r4, [pc, #24]	; (12300 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   122e6:	47a0      	blx	r4
   122e8:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   122ea:	68fb      	ldr	r3, [r7, #12]
   122ec:	691b      	ldr	r3, [r3, #16]
   122ee:	4618      	mov	r0, r3
   122f0:	4b04      	ldr	r3, [pc, #16]	; (12304 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   122f2:	4798      	blx	r3
   122f4:	6178      	str	r0, [r7, #20]
	return status;
   122f6:	697b      	ldr	r3, [r7, #20]
}
   122f8:	4618      	mov	r0, r3
   122fa:	371c      	adds	r7, #28
   122fc:	46bd      	mov	sp, r7
   122fe:	bd90      	pop	{r4, r7, pc}
   12300:	00012231 	.word	0x00012231
   12304:	000047cd 	.word	0x000047cd

00012308 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   12308:	b580      	push	{r7, lr}
   1230a:	b082      	sub	sp, #8
   1230c:	af00      	add	r7, sp, #0
   1230e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   12310:	687b      	ldr	r3, [r7, #4]
   12312:	691a      	ldr	r2, [r3, #16]
   12314:	687b      	ldr	r3, [r7, #4]
   12316:	689b      	ldr	r3, [r3, #8]
   12318:	4619      	mov	r1, r3
   1231a:	4610      	mov	r0, r2
   1231c:	4b04      	ldr	r3, [pc, #16]	; (12330 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   1231e:	4798      	blx	r3
	task->cb=NULL;
   12320:	687b      	ldr	r3, [r7, #4]
   12322:	689b      	ldr	r3, [r3, #8]
   12324:	2200      	movs	r2, #0
   12326:	60da      	str	r2, [r3, #12]
}
   12328:	bf00      	nop
   1232a:	3708      	adds	r7, #8
   1232c:	46bd      	mov	sp, r7
   1232e:	bd80      	pop	{r7, pc}
   12330:	000049a5 	.word	0x000049a5

00012334 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   12334:	b580      	push	{r7, lr}
   12336:	b082      	sub	sp, #8
   12338:	af00      	add	r7, sp, #0
   1233a:	6078      	str	r0, [r7, #4]
   1233c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   1233e:	6839      	ldr	r1, [r7, #0]
   12340:	6878      	ldr	r0, [r7, #4]
   12342:	4b0f      	ldr	r3, [pc, #60]	; (12380 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   12344:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   12346:	687b      	ldr	r3, [r7, #4]
   12348:	691b      	ldr	r3, [r3, #16]
   1234a:	f103 0218 	add.w	r2, r3, #24
   1234e:	687b      	ldr	r3, [r7, #4]
   12350:	689b      	ldr	r3, [r3, #8]
   12352:	4619      	mov	r1, r3
   12354:	4610      	mov	r0, r2
   12356:	4b0b      	ldr	r3, [pc, #44]	; (12384 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   12358:	4798      	blx	r3
   1235a:	4603      	mov	r3, r0
   1235c:	2b00      	cmp	r3, #0
   1235e:	d007      	beq.n	12370 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   12360:	687b      	ldr	r3, [r7, #4]
   12362:	691a      	ldr	r2, [r3, #16]
   12364:	687b      	ldr	r3, [r7, #4]
   12366:	689b      	ldr	r3, [r3, #8]
   12368:	4619      	mov	r1, r3
   1236a:	4610      	mov	r0, r2
   1236c:	4b06      	ldr	r3, [pc, #24]	; (12388 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   1236e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   12370:	687b      	ldr	r3, [r7, #4]
   12372:	689b      	ldr	r3, [r3, #8]
   12374:	2200      	movs	r2, #0
   12376:	60da      	str	r2, [r3, #12]
}
   12378:	bf00      	nop
   1237a:	3708      	adds	r7, #8
   1237c:	46bd      	mov	sp, r7
   1237e:	bd80      	pop	{r7, pc}
   12380:	000123e5 	.word	0x000123e5
   12384:	0000558d 	.word	0x0000558d
   12388:	000049a5 	.word	0x000049a5

0001238c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   1238c:	b480      	push	{r7}
   1238e:	b085      	sub	sp, #20
   12390:	af00      	add	r7, sp, #0
   12392:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   12394:	2300      	movs	r3, #0
   12396:	73fb      	strb	r3, [r7, #15]
   12398:	7bfb      	ldrb	r3, [r7, #15]
   1239a:	2b03      	cmp	r3, #3
   1239c:	dc18      	bgt.n	123d0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   1239e:	7bfa      	ldrb	r2, [r7, #15]
   123a0:	490f      	ldr	r1, [pc, #60]	; (123e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   123a2:	4613      	mov	r3, r2
   123a4:	009b      	lsls	r3, r3, #2
   123a6:	4413      	add	r3, r2
   123a8:	009b      	lsls	r3, r3, #2
   123aa:	440b      	add	r3, r1
   123ac:	330c      	adds	r3, #12
   123ae:	681b      	ldr	r3, [r3, #0]
   123b0:	2b00      	cmp	r3, #0
   123b2:	d109      	bne.n	123c8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   123b4:	7bfa      	ldrb	r2, [r7, #15]
   123b6:	4613      	mov	r3, r2
   123b8:	009b      	lsls	r3, r3, #2
   123ba:	4413      	add	r3, r2
   123bc:	009b      	lsls	r3, r3, #2
   123be:	4a08      	ldr	r2, [pc, #32]	; (123e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   123c0:	441a      	add	r2, r3
   123c2:	687b      	ldr	r3, [r7, #4]
   123c4:	609a      	str	r2, [r3, #8]
			return;
   123c6:	e006      	b.n	123d6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   123c8:	7bfb      	ldrb	r3, [r7, #15]
   123ca:	3301      	adds	r3, #1
   123cc:	73fb      	strb	r3, [r7, #15]
   123ce:	e7e3      	b.n	12398 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   123d0:	687b      	ldr	r3, [r7, #4]
   123d2:	4a03      	ldr	r2, [pc, #12]	; (123e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   123d4:	609a      	str	r2, [r3, #8]

}
   123d6:	3714      	adds	r7, #20
   123d8:	46bd      	mov	sp, r7
   123da:	bc80      	pop	{r7}
   123dc:	4770      	bx	lr
   123de:	bf00      	nop
   123e0:	200027c8 	.word	0x200027c8

000123e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   123e4:	b480      	push	{r7}
   123e6:	b085      	sub	sp, #20
   123e8:	af00      	add	r7, sp, #0
   123ea:	6078      	str	r0, [r7, #4]
   123ec:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   123ee:	2300      	movs	r3, #0
   123f0:	73fb      	strb	r3, [r7, #15]
   123f2:	7bfb      	ldrb	r3, [r7, #15]
   123f4:	2b03      	cmp	r3, #3
   123f6:	dc19      	bgt.n	1242c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   123f8:	7bfa      	ldrb	r2, [r7, #15]
   123fa:	490e      	ldr	r1, [pc, #56]	; (12434 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   123fc:	4613      	mov	r3, r2
   123fe:	009b      	lsls	r3, r3, #2
   12400:	4413      	add	r3, r2
   12402:	009b      	lsls	r3, r3, #2
   12404:	440b      	add	r3, r1
   12406:	330c      	adds	r3, #12
   12408:	681a      	ldr	r2, [r3, #0]
   1240a:	683b      	ldr	r3, [r7, #0]
   1240c:	429a      	cmp	r2, r3
   1240e:	d109      	bne.n	12424 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   12410:	7bfa      	ldrb	r2, [r7, #15]
   12412:	4613      	mov	r3, r2
   12414:	009b      	lsls	r3, r3, #2
   12416:	4413      	add	r3, r2
   12418:	009b      	lsls	r3, r3, #2
   1241a:	4a06      	ldr	r2, [pc, #24]	; (12434 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   1241c:	441a      	add	r2, r3
   1241e:	687b      	ldr	r3, [r7, #4]
   12420:	609a      	str	r2, [r3, #8]
			return;
   12422:	e003      	b.n	1242c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   12424:	7bfb      	ldrb	r3, [r7, #15]
   12426:	3301      	adds	r3, #1
   12428:	73fb      	strb	r3, [r7, #15]
   1242a:	e7e2      	b.n	123f2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   1242c:	3714      	adds	r7, #20
   1242e:	46bd      	mov	sp, r7
   12430:	bc80      	pop	{r7}
   12432:	4770      	bx	lr
   12434:	200027c8 	.word	0x200027c8

00012438 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   12438:	b580      	push	{r7, lr}
   1243a:	b082      	sub	sp, #8
   1243c:	af00      	add	r7, sp, #0
   1243e:	6078      	str	r0, [r7, #4]
   12440:	6039      	str	r1, [r7, #0]
   12442:	687b      	ldr	r3, [r7, #4]
   12444:	2b01      	cmp	r3, #1
   12446:	d116      	bne.n	12476 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   12448:	683b      	ldr	r3, [r7, #0]
   1244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1244e:	4293      	cmp	r3, r2
   12450:	d111      	bne.n	12476 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   12452:	490b      	ldr	r1, [pc, #44]	; (12480 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   12454:	480b      	ldr	r0, [pc, #44]	; (12484 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   12456:	4b0c      	ldr	r3, [pc, #48]	; (12488 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   12458:	4798      	blx	r3
   1245a:	4a0c      	ldr	r2, [pc, #48]	; (1248c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1245c:	490c      	ldr	r1, [pc, #48]	; (12490 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1245e:	4809      	ldr	r0, [pc, #36]	; (12484 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   12460:	4b0c      	ldr	r3, [pc, #48]	; (12494 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   12462:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   12464:	490c      	ldr	r1, [pc, #48]	; (12498 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   12466:	480d      	ldr	r0, [pc, #52]	; (1249c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   12468:	4b07      	ldr	r3, [pc, #28]	; (12488 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1246a:	4798      	blx	r3
   1246c:	4a07      	ldr	r2, [pc, #28]	; (1248c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1246e:	4908      	ldr	r1, [pc, #32]	; (12490 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   12470:	480a      	ldr	r0, [pc, #40]	; (1249c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   12472:	4b08      	ldr	r3, [pc, #32]	; (12494 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   12474:	4798      	blx	r3
   12476:	bf00      	nop
   12478:	3708      	adds	r7, #8
   1247a:	46bd      	mov	sp, r7
   1247c:	bd80      	pop	{r7, pc}
   1247e:	bf00      	nop
   12480:	20009834 	.word	0x20009834
   12484:	20002818 	.word	0x20002818
   12488:	0001213d 	.word	0x0001213d
   1248c:	20000000 	.word	0x20000000
   12490:	00012179 	.word	0x00012179
   12494:	000170d1 	.word	0x000170d1
   12498:	2000972c 	.word	0x2000972c
   1249c:	20002838 	.word	0x20002838

000124a0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   124a0:	b580      	push	{r7, lr}
   124a2:	af00      	add	r7, sp, #0
   124a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   124a8:	2001      	movs	r0, #1
   124aa:	4b01      	ldr	r3, [pc, #4]	; (124b0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   124ac:	4798      	blx	r3
   124ae:	bd80      	pop	{r7, pc}
   124b0:	00012439 	.word	0x00012439

000124b4 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   124b4:	4770      	bx	lr

000124b6 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   124b6:	4770      	bx	lr

000124b8 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   124b8:	1f0b      	subs	r3, r1, #4
   124ba:	300c      	adds	r0, #12
   124bc:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   124be:	f853 2f04 	ldr.w	r2, [r3, #4]!
   124c2:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   124c6:	428b      	cmp	r3, r1
   124c8:	d1f9      	bne.n	124be <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   124ca:	2000      	movs	r0, #0
   124cc:	4770      	bx	lr
	...

000124d0 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   124d0:	b510      	push	{r4, lr}
   124d2:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   124d4:	68c0      	ldr	r0, [r0, #12]
   124d6:	4b08      	ldr	r3, [pc, #32]	; (124f8 <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
   124d8:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   124da:	f3c0 1100 	ubfx	r1, r0, #4, #1
   124de:	78e3      	ldrb	r3, [r4, #3]
   124e0:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   124e4:	f3c0 1140 	ubfx	r1, r0, #5, #1
   124e8:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   124ec:	f3c0 1280 	ubfx	r2, r0, #6, #1
   124f0:	f362 0300 	bfi	r3, r2, #0, #1
   124f4:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
   124f6:	bd10      	pop	{r4, pc}
   124f8:	00015ad9 	.word	0x00015ad9

000124fc <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   124fc:	b510      	push	{r4, lr}
   124fe:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
   12500:	f081 0201 	eor.w	r2, r1, #1
   12504:	2100      	movs	r1, #0
   12506:	68c0      	ldr	r0, [r0, #12]
   12508:	4b01      	ldr	r3, [pc, #4]	; (12510 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   1250a:	4798      	blx	r3
   1250c:	7060      	strb	r0, [r4, #1]

	return uint8_t(enabled);
}
   1250e:	bd10      	pop	{r4, pc}
   12510:	00015d49 	.word	0x00015d49

00012514 <_ZN19CondesatorFan_Class9IsEnabledEv>:
uint8_t	CondesatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
	return uint8_t(enabled);
}
bool CondesatorFan_Class::IsEnabled(void){
   12514:	b510      	push	{r4, lr}
   12516:	4604      	mov	r4, r0
	uint8_t value=expanders[0]->ReadGPIORegister();
   12518:	68c0      	ldr	r0, [r0, #12]
   1251a:	4b04      	ldr	r3, [pc, #16]	; (1252c <_ZN19CondesatorFan_Class9IsEnabledEv+0x18>)
   1251c:	4798      	blx	r3
	enabled=!(value&0x01);
   1251e:	f080 0001 	eor.w	r0, r0, #1
   12522:	f000 0001 	and.w	r0, r0, #1
   12526:	7060      	strb	r0, [r4, #1]
	return enabled;
}
   12528:	bd10      	pop	{r4, pc}
   1252a:	bf00      	nop
   1252c:	00015ad9 	.word	0x00015ad9

00012530 <_ZN19CondesatorFan_Class6SetPWMEh>:


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   12530:	b510      	push	{r4, lr}
   12532:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   12534:	6a40      	ldr	r0, [r0, #36]	; 0x24
   12536:	4b02      	ldr	r3, [pc, #8]	; (12540 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   12538:	4798      	blx	r3
   1253a:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
   1253c:	bd10      	pop	{r4, pc}
   1253e:	bf00      	nop
   12540:	00015b5d 	.word	0x00015b5d

00012544 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   12544:	b510      	push	{r4, lr}
   12546:	4604      	mov	r4, r0
		bool result;
		SetEnable(false);
   12548:	2100      	movs	r1, #0
   1254a:	4b06      	ldr	r3, [pc, #24]	; (12564 <_ZN19CondesatorFan_Class8SelfTestEv+0x20>)
   1254c:	4798      	blx	r3
		SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
   1254e:	2130      	movs	r1, #48	; 0x30
   12550:	4620      	mov	r0, r4
   12552:	4b05      	ldr	r3, [pc, #20]	; (12568 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>)
   12554:	4798      	blx	r3
	//	SetEnable(true);
		ReadStatus();
   12556:	4620      	mov	r0, r4
   12558:	4b04      	ldr	r3, [pc, #16]	; (1256c <_ZN19CondesatorFan_Class8SelfTestEv+0x28>)
   1255a:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   1255c:	78e0      	ldrb	r0, [r4, #3]
		return result;
   1255e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   12562:	bd10      	pop	{r4, pc}
   12564:	000124fd 	.word	0x000124fd
   12568:	00012531 	.word	0x00012531
   1256c:	000124d1 	.word	0x000124d1

00012570 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   12570:	b510      	push	{r4, lr}
   12572:	4604      	mov	r4, r0
	i2c=i2cClass;
   12574:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   12576:	7a4b      	ldrb	r3, [r1, #9]
   12578:	b90b      	cbnz	r3, 1257e <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   1257a:	78a0      	ldrb	r0, [r4, #2]
   1257c:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   1257e:	4611      	mov	r1, r2
   12580:	4b04      	ldr	r3, [pc, #16]	; (12594 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   12582:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   12584:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12586:	4b04      	ldr	r3, [pc, #16]	; (12598 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   12588:	4798      	blx	r3
		isOK=SelfTest();
   1258a:	4620      	mov	r0, r4
   1258c:	4b03      	ldr	r3, [pc, #12]	; (1259c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   1258e:	4798      	blx	r3
   12590:	70a0      	strb	r0, [r4, #2]
   12592:	e7f2      	b.n	1257a <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   12594:	000124b9 	.word	0x000124b9
   12598:	00015c51 	.word	0x00015c51
   1259c:	00012545 	.word	0x00012545

000125a0 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   125a0:	b510      	push	{r4, lr}
   125a2:	4604      	mov	r4, r0
   125a4:	302c      	adds	r0, #44	; 0x2c
   125a6:	4b03      	ldr	r3, [pc, #12]	; (125b4 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   125a8:	4798      	blx	r3
   125aa:	4620      	mov	r0, r4
   125ac:	4b02      	ldr	r3, [pc, #8]	; (125b8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   125ae:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   125b0:	4620      	mov	r0, r4
   125b2:	bd10      	pop	{r4, pc}
   125b4:	000124b7 	.word	0x000124b7
   125b8:	000127e9 	.word	0x000127e9

000125bc <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   125bc:	b570      	push	{r4, r5, r6, lr}
   125be:	4c05      	ldr	r4, [pc, #20]	; (125d4 <__tcf_1+0x18>)
   125c0:	4e05      	ldr	r6, [pc, #20]	; (125d8 <__tcf_1+0x1c>)
   125c2:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   125c6:	3c1c      	subs	r4, #28
   125c8:	4620      	mov	r0, r4
   125ca:	47b0      	blx	r6
   125cc:	42ac      	cmp	r4, r5
   125ce:	d1fa      	bne.n	125c6 <__tcf_1+0xa>
   125d0:	bd70      	pop	{r4, r5, r6, pc}
   125d2:	bf00      	nop
   125d4:	2000291c 	.word	0x2000291c
   125d8:	000159df 	.word	0x000159df

000125dc <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   125dc:	b510      	push	{r4, lr}
   125de:	4803      	ldr	r0, [pc, #12]	; (125ec <__tcf_0+0x10>)
   125e0:	4c03      	ldr	r4, [pc, #12]	; (125f0 <__tcf_0+0x14>)
   125e2:	47a0      	blx	r4
   125e4:	4803      	ldr	r0, [pc, #12]	; (125f4 <__tcf_0+0x18>)
   125e6:	47a0      	blx	r4
   125e8:	bd10      	pop	{r4, pc}
   125ea:	bf00      	nop
   125ec:	20002948 	.word	0x20002948
   125f0:	000127e9 	.word	0x000127e9
   125f4:	2000291c 	.word	0x2000291c

000125f8 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   125f8:	b510      	push	{r4, lr}
   125fa:	4604      	mov	r4, r0
   125fc:	4b0d      	ldr	r3, [pc, #52]	; (12634 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   125fe:	4798      	blx	r3
   12600:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   12604:	4b0c      	ldr	r3, [pc, #48]	; (12638 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   12606:	4798      	blx	r3
	i2c=&i2cSharedStatic;
   12608:	4b0c      	ldr	r3, [pc, #48]	; (1263c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   1260a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   1260e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   12612:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   12616:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   12618:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   1261c:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   1261e:	f503 7298 	add.w	r2, r3, #304	; 0x130
   12622:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   12624:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
   12628:	2300      	movs	r3, #0
   1262a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
   1262e:	4620      	mov	r0, r4
   12630:	bd10      	pop	{r4, pc}
   12632:	bf00      	nop
   12634:	000127d1 	.word	0x000127d1
   12638:	000124b5 	.word	0x000124b5
   1263c:	20002858 	.word	0x20002858

00012640 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   12640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12644:	4606      	mov	r6, r0
   12646:	4c0c      	ldr	r4, [pc, #48]	; (12678 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   12648:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   1264c:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1264e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1267c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   12652:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   12656:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1265a:	f045 0120 	orr.w	r1, r5, #32
   1265e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   12662:	b2c9      	uxtb	r1, r1
   12664:	4620      	mov	r0, r4
   12666:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   12668:	3501      	adds	r5, #1
   1266a:	341c      	adds	r4, #28
   1266c:	2d07      	cmp	r5, #7
   1266e:	d1f0      	bne.n	12652 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   12670:	2000      	movs	r0, #0
   12672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12676:	bf00      	nop
   12678:	20002858 	.word	0x20002858
   1267c:	000159f3 	.word	0x000159f3

00012680 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   12680:	b570      	push	{r4, r5, r6, lr}
   12682:	4604      	mov	r4, r0
	i2c->Init();
   12684:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   12688:	4b17      	ldr	r3, [pc, #92]	; (126e8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   1268a:	4798      	blx	r3
	if (i2c->isOK)
   1268c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   12690:	7a5b      	ldrb	r3, [r3, #9]
   12692:	b943      	cbnz	r3, 126a6 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   12694:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   12698:	7a5b      	ldrb	r3, [r3, #9]
   1269a:	b2db      	uxtb	r3, r3
   1269c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
   126a0:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
   126a4:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   126a6:	4620      	mov	r0, r4
   126a8:	4b10      	ldr	r3, [pc, #64]	; (126ec <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   126aa:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   126ac:	f104 0568 	add.w	r5, r4, #104	; 0x68
   126b0:	462b      	mov	r3, r5
   126b2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   126b6:	2100      	movs	r1, #0
   126b8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   126ba:	4e0d      	ldr	r6, [pc, #52]	; (126f0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   126bc:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   126be:	462b      	mov	r3, r5
   126c0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   126c4:	2101      	movs	r1, #1
   126c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   126c8:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   126ca:	462a      	mov	r2, r5
   126cc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   126d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   126d2:	4b08      	ldr	r3, [pc, #32]	; (126f4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   126d4:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   126d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   126d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   126da:	791b      	ldrb	r3, [r3, #4]
   126dc:	7912      	ldrb	r2, [r2, #4]
   126de:	4013      	ands	r3, r2
   126e0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   126e4:	e7d6      	b.n	12694 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   126e6:	bf00      	nop
   126e8:	00015691 	.word	0x00015691
   126ec:	00012641 	.word	0x00012641
   126f0:	000128c9 	.word	0x000128c9
   126f4:	00012571 	.word	0x00012571

000126f8 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126fa:	f100 0468 	add.w	r4, r0, #104	; 0x68
   126fe:	1e4d      	subs	r5, r1, #1
   12700:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   12704:	4f04      	ldr	r7, [pc, #16]	; (12718 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   12706:	f854 0b04 	ldr.w	r0, [r4], #4
   1270a:	47b8      	blx	r7
   1270c:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   12710:	42b4      	cmp	r4, r6
   12712:	d1f8      	bne.n	12706 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   12714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12716:	bf00      	nop
   12718:	00015ad9 	.word	0x00015ad9

0001271c <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   1271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
   12720:	4c1c      	ldr	r4, [pc, #112]	; (12794 <_GLOBAL__sub_I_ptrFansClass+0x78>)
   12722:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   12726:	491c      	ldr	r1, [pc, #112]	; (12798 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
   12728:	4628      	mov	r0, r5
   1272a:	4b1c      	ldr	r3, [pc, #112]	; (1279c <_GLOBAL__sub_I_ptrFansClass+0x80>)
   1272c:	4798      	blx	r3
   1272e:	4f1c      	ldr	r7, [pc, #112]	; (127a0 <_GLOBAL__sub_I_ptrFansClass+0x84>)
   12730:	463a      	mov	r2, r7
   12732:	491c      	ldr	r1, [pc, #112]	; (127a4 <_GLOBAL__sub_I_ptrFansClass+0x88>)
   12734:	4628      	mov	r0, r5
   12736:	4e1c      	ldr	r6, [pc, #112]	; (127a8 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
   12738:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   1273a:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   1273e:	4628      	mov	r0, r5
   12740:	f8df 8088 	ldr.w	r8, [pc, #136]	; 127cc <_GLOBAL__sub_I_ptrFansClass+0xb0>
   12744:	47c0      	blx	r8
   12746:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1274a:	47c0      	blx	r8
   1274c:	463a      	mov	r2, r7
   1274e:	4917      	ldr	r1, [pc, #92]	; (127ac <_GLOBAL__sub_I_ptrFansClass+0x90>)
   12750:	2000      	movs	r0, #0
   12752:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   12754:	f504 7898 	add.w	r8, r4, #304	; 0x130
   12758:	4640      	mov	r0, r8
   1275a:	4b15      	ldr	r3, [pc, #84]	; (127b0 <_GLOBAL__sub_I_ptrFansClass+0x94>)
   1275c:	4798      	blx	r3
   1275e:	463a      	mov	r2, r7
   12760:	4914      	ldr	r1, [pc, #80]	; (127b4 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   12762:	4640      	mov	r0, r8
   12764:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   12766:	4e14      	ldr	r6, [pc, #80]	; (127b8 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   12768:	4620      	mov	r0, r4
   1276a:	47b0      	blx	r6
   1276c:	341c      	adds	r4, #28
   1276e:	42a5      	cmp	r5, r4
   12770:	d1fa      	bne.n	12768 <_GLOBAL__sub_I_ptrFansClass+0x4c>
   12772:	4e0b      	ldr	r6, [pc, #44]	; (127a0 <_GLOBAL__sub_I_ptrFansClass+0x84>)
   12774:	4632      	mov	r2, r6
   12776:	4911      	ldr	r1, [pc, #68]	; (127bc <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   12778:	2000      	movs	r0, #0
   1277a:	4c0b      	ldr	r4, [pc, #44]	; (127a8 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
   1277c:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   1277e:	4d10      	ldr	r5, [pc, #64]	; (127c0 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   12780:	4628      	mov	r0, r5
   12782:	4b10      	ldr	r3, [pc, #64]	; (127c4 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   12784:	4798      	blx	r3
   12786:	4632      	mov	r2, r6
   12788:	490f      	ldr	r1, [pc, #60]	; (127c8 <_GLOBAL__sub_I_ptrFansClass+0xac>)
   1278a:	4628      	mov	r0, r5
   1278c:	47a0      	blx	r4
   1278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12792:	bf00      	nop
   12794:	20002858 	.word	0x20002858
   12798:	2000970c 	.word	0x2000970c
   1279c:	00015661 	.word	0x00015661
   127a0:	20000000 	.word	0x20000000
   127a4:	0001567d 	.word	0x0001567d
   127a8:	000170d1 	.word	0x000170d1
   127ac:	000125dd 	.word	0x000125dd
   127b0:	000124b5 	.word	0x000124b5
   127b4:	000124b7 	.word	0x000124b7
   127b8:	000159cb 	.word	0x000159cb
   127bc:	000125bd 	.word	0x000125bd
   127c0:	200029b8 	.word	0x200029b8
   127c4:	000125f9 	.word	0x000125f9
   127c8:	000125a1 	.word	0x000125a1
   127cc:	000127d1 	.word	0x000127d1

000127d0 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   127d0:	b510      	push	{r4, lr}
   127d2:	4604      	mov	r4, r0
   127d4:	4b02      	ldr	r3, [pc, #8]	; (127e0 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   127d6:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   127d8:	4b02      	ldr	r3, [pc, #8]	; (127e4 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   127da:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   127dc:	4620      	mov	r0, r4
   127de:	bd10      	pop	{r4, pc}
   127e0:	00012925 	.word	0x00012925
   127e4:	20002a44 	.word	0x20002a44

000127e8 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   127e8:	b510      	push	{r4, lr}
   127ea:	4604      	mov	r4, r0
   127ec:	4b01      	ldr	r3, [pc, #4]	; (127f4 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   127ee:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   127f0:	4620      	mov	r0, r4
   127f2:	bd10      	pop	{r4, pc}
   127f4:	00012927 	.word	0x00012927

000127f8 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   127f8:	1f0b      	subs	r3, r1, #4
   127fa:	300c      	adds	r0, #12
   127fc:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   127fe:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12802:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   12806:	428b      	cmp	r3, r1
   12808:	d1f9      	bne.n	127fe <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   1280a:	2000      	movs	r0, #0
   1280c:	4770      	bx	lr
	...

00012810 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   12810:	b570      	push	{r4, r5, r6, lr}
   12812:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   12814:	6900      	ldr	r0, [r0, #16]
   12816:	4b0e      	ldr	r3, [pc, #56]	; (12850 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
   12818:	4798      	blx	r3
   1281a:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   1281c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   12820:	0096      	lsls	r6, r2, #2
   12822:	fa40 f506 	asr.w	r5, r0, r6
   12826:	5ca3      	ldrb	r3, [r4, r2]
   12828:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   1282c:	2502      	movs	r5, #2
   1282e:	40b5      	lsls	r5, r6
   12830:	4205      	tst	r5, r0
   12832:	bf14      	ite	ne
   12834:	2501      	movne	r5, #1
   12836:	2500      	moveq	r5, #0
   12838:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   1283c:	2504      	movs	r5, #4
   1283e:	40b5      	lsls	r5, r6
   12840:	4205      	tst	r5, r0
   12842:	bf14      	ite	ne
   12844:	2101      	movne	r1, #1
   12846:	2100      	moveq	r1, #0
   12848:	f361 0300 	bfi	r3, r1, #0, #1
   1284c:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
   1284e:	bd70      	pop	{r4, r5, r6, pc}
   12850:	00015ad9 	.word	0x00015ad9

00012854 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   12854:	b510      	push	{r4, lr}
   12856:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   12858:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1285c:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   1285e:	f081 0201 	eor.w	r2, r1, #1
   12862:	bf0c      	ite	eq
   12864:	2102      	moveq	r1, #2
   12866:	2101      	movne	r1, #1
   12868:	68c0      	ldr	r0, [r0, #12]
   1286a:	4b02      	ldr	r3, [pc, #8]	; (12874 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   1286c:	4798      	blx	r3
   1286e:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   12870:	bd10      	pop	{r4, pc}
   12872:	bf00      	nop
   12874:	00015d49 	.word	0x00015d49

00012878 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   12878:	b510      	push	{r4, lr}
   1287a:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   1287c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   12880:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12884:	69d8      	ldr	r0, [r3, #28]
   12886:	4b02      	ldr	r3, [pc, #8]	; (12890 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   12888:	4798      	blx	r3
   1288a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
   1288e:	bd10      	pop	{r4, pc}
   12890:	00015b5d 	.word	0x00015b5d

00012894 <_ZN19EvaporatorFan_Class8SelfTestEv>:

bool EvaporatorFan_Class::SelfTest(void){
   12894:	b538      	push	{r3, r4, r5, lr}
   12896:	4604      	mov	r4, r0
	bool result;
	SetEnable(false);
   12898:	2100      	movs	r1, #0
   1289a:	4d08      	ldr	r5, [pc, #32]	; (128bc <_ZN19EvaporatorFan_Class8SelfTestEv+0x28>)
   1289c:	47a8      	blx	r5
	SetPWM(MINIMUN_FLOW_AIR);
   1289e:	2120      	movs	r1, #32
   128a0:	4620      	mov	r0, r4
   128a2:	4b07      	ldr	r3, [pc, #28]	; (128c0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x2c>)
   128a4:	4798      	blx	r3
	SetEnable(true);
   128a6:	2101      	movs	r1, #1
   128a8:	4620      	mov	r0, r4
   128aa:	47a8      	blx	r5
	ReadStatus();
   128ac:	4620      	mov	r0, r4
   128ae:	4b05      	ldr	r3, [pc, #20]	; (128c4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x30>)
   128b0:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   128b2:	7820      	ldrb	r0, [r4, #0]
	return result;
}
   128b4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   128b8:	bd38      	pop	{r3, r4, r5, pc}
   128ba:	bf00      	nop
   128bc:	00012855 	.word	0x00012855
   128c0:	00012879 	.word	0x00012879
   128c4:	00012811 	.word	0x00012811

000128c8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   128c8:	b510      	push	{r4, lr}
   128ca:	4604      	mov	r4, r0
	i2c=i2cClass;
   128cc:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   128ce:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   128d2:	7a52      	ldrb	r2, [r2, #9]
   128d4:	b90a      	cbnz	r2, 128da <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   128d6:	7920      	ldrb	r0, [r4, #4]
   128d8:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   128da:	4619      	mov	r1, r3
   128dc:	4b0c      	ldr	r3, [pc, #48]	; (12910 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
   128de:	4798      	blx	r3
			if (fanNumber==0)
   128e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   128e4:	b15b      	cbz	r3, 128fe <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   128e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   128ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   128ee:	69d8      	ldr	r0, [r3, #28]
   128f0:	4b08      	ldr	r3, [pc, #32]	; (12914 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
   128f2:	4798      	blx	r3
			isOK=SelfTest();
   128f4:	4620      	mov	r0, r4
   128f6:	4b08      	ldr	r3, [pc, #32]	; (12918 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   128f8:	4798      	blx	r3
   128fa:	7120      	strb	r0, [r4, #4]
   128fc:	e7eb      	b.n	128d6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   128fe:	2170      	movs	r1, #112	; 0x70
   12900:	68e0      	ldr	r0, [r4, #12]
   12902:	4b06      	ldr	r3, [pc, #24]	; (1291c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   12904:	4798      	blx	r3
				expanders[1]->SetPortInput();
   12906:	6920      	ldr	r0, [r4, #16]
   12908:	4b05      	ldr	r3, [pc, #20]	; (12920 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   1290a:	4798      	blx	r3
   1290c:	e7eb      	b.n	128e6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   1290e:	bf00      	nop
   12910:	000127f9 	.word	0x000127f9
   12914:	00015c51 	.word	0x00015c51
   12918:	00012895 	.word	0x00012895
   1291c:	00015bdd 	.word	0x00015bdd
   12920:	00015b99 	.word	0x00015b99

00012924 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   12924:	4770      	bx	lr

00012926 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   12926:	4770      	bx	lr

00012928 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   12928:	b480      	push	{r7}
   1292a:	b083      	sub	sp, #12
   1292c:	af00      	add	r7, sp, #0
   1292e:	6078      	str	r0, [r7, #4]
   12930:	460b      	mov	r3, r1
   12932:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   12934:	78fb      	ldrb	r3, [r7, #3]
   12936:	687a      	ldr	r2, [r7, #4]
   12938:	01db      	lsls	r3, r3, #7
   1293a:	4413      	add	r3, r2
   1293c:	681b      	ldr	r3, [r3, #0]
}
   1293e:	4618      	mov	r0, r3
   12940:	370c      	adds	r7, #12
   12942:	46bd      	mov	sp, r7
   12944:	bc80      	pop	{r7}
   12946:	4770      	bx	lr

00012948 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12948:	b480      	push	{r7}
   1294a:	b085      	sub	sp, #20
   1294c:	af00      	add	r7, sp, #0
   1294e:	60f8      	str	r0, [r7, #12]
   12950:	460b      	mov	r3, r1
   12952:	607a      	str	r2, [r7, #4]
   12954:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12956:	7afb      	ldrb	r3, [r7, #11]
   12958:	68fa      	ldr	r2, [r7, #12]
   1295a:	01db      	lsls	r3, r3, #7
   1295c:	4413      	add	r3, r2
   1295e:	3318      	adds	r3, #24
   12960:	687a      	ldr	r2, [r7, #4]
   12962:	601a      	str	r2, [r3, #0]
}
   12964:	bf00      	nop
   12966:	3714      	adds	r7, #20
   12968:	46bd      	mov	sp, r7
   1296a:	bc80      	pop	{r7}
   1296c:	4770      	bx	lr

0001296e <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   1296e:	b480      	push	{r7}
   12970:	b083      	sub	sp, #12
   12972:	af00      	add	r7, sp, #0
   12974:	6078      	str	r0, [r7, #4]
   12976:	460b      	mov	r3, r1
   12978:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   1297a:	78fb      	ldrb	r3, [r7, #3]
   1297c:	687a      	ldr	r2, [r7, #4]
   1297e:	01db      	lsls	r3, r3, #7
   12980:	4413      	add	r3, r2
   12982:	3310      	adds	r3, #16
   12984:	681b      	ldr	r3, [r3, #0]
}
   12986:	4618      	mov	r0, r3
   12988:	370c      	adds	r7, #12
   1298a:	46bd      	mov	sp, r7
   1298c:	bc80      	pop	{r7}
   1298e:	4770      	bx	lr

00012990 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12990:	b480      	push	{r7}
   12992:	b085      	sub	sp, #20
   12994:	af00      	add	r7, sp, #0
   12996:	60f8      	str	r0, [r7, #12]
   12998:	460b      	mov	r3, r1
   1299a:	607a      	str	r2, [r7, #4]
   1299c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1299e:	7afb      	ldrb	r3, [r7, #11]
   129a0:	68fa      	ldr	r2, [r7, #12]
   129a2:	01db      	lsls	r3, r3, #7
   129a4:	4413      	add	r3, r2
   129a6:	3314      	adds	r3, #20
   129a8:	687a      	ldr	r2, [r7, #4]
   129aa:	601a      	str	r2, [r3, #0]
}
   129ac:	bf00      	nop
   129ae:	3714      	adds	r7, #20
   129b0:	46bd      	mov	sp, r7
   129b2:	bc80      	pop	{r7}
   129b4:	4770      	bx	lr

000129b6 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   129b6:	b480      	push	{r7}
   129b8:	b085      	sub	sp, #20
   129ba:	af00      	add	r7, sp, #0
   129bc:	60f8      	str	r0, [r7, #12]
   129be:	460b      	mov	r3, r1
   129c0:	607a      	str	r2, [r7, #4]
   129c2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   129c4:	7afb      	ldrb	r3, [r7, #11]
   129c6:	68fa      	ldr	r2, [r7, #12]
   129c8:	01db      	lsls	r3, r3, #7
   129ca:	4413      	add	r3, r2
   129cc:	331c      	adds	r3, #28
   129ce:	687a      	ldr	r2, [r7, #4]
   129d0:	601a      	str	r2, [r3, #0]
}
   129d2:	bf00      	nop
   129d4:	3714      	adds	r7, #20
   129d6:	46bd      	mov	sp, r7
   129d8:	bc80      	pop	{r7}
   129da:	4770      	bx	lr

000129dc <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   129dc:	b480      	push	{r7}
   129de:	b083      	sub	sp, #12
   129e0:	af00      	add	r7, sp, #0
   129e2:	6078      	str	r0, [r7, #4]
   129e4:	460b      	mov	r3, r1
   129e6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   129e8:	78fb      	ldrb	r3, [r7, #3]
   129ea:	687a      	ldr	r2, [r7, #4]
   129ec:	01db      	lsls	r3, r3, #7
   129ee:	4413      	add	r3, r2
   129f0:	3320      	adds	r3, #32
   129f2:	681b      	ldr	r3, [r3, #0]
}
   129f4:	4618      	mov	r0, r3
   129f6:	370c      	adds	r7, #12
   129f8:	46bd      	mov	sp, r7
   129fa:	bc80      	pop	{r7}
   129fc:	4770      	bx	lr
	...

00012a00 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   12a00:	b580      	push	{r7, lr}
   12a02:	b082      	sub	sp, #8
   12a04:	af00      	add	r7, sp, #0
   12a06:	4603      	mov	r3, r0
   12a08:	6039      	str	r1, [r7, #0]
   12a0a:	71fb      	strb	r3, [r7, #7]
   12a0c:	4613      	mov	r3, r2
   12a0e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12a10:	79bb      	ldrb	r3, [r7, #6]
   12a12:	2b00      	cmp	r3, #0
   12a14:	d006      	beq.n	12a24 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12a16:	79fb      	ldrb	r3, [r7, #7]
   12a18:	683a      	ldr	r2, [r7, #0]
   12a1a:	4619      	mov	r1, r3
   12a1c:	4806      	ldr	r0, [pc, #24]	; (12a38 <_gpio_set_level+0x38>)
   12a1e:	4b07      	ldr	r3, [pc, #28]	; (12a3c <_gpio_set_level+0x3c>)
   12a20:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   12a22:	e005      	b.n	12a30 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12a24:	79fb      	ldrb	r3, [r7, #7]
   12a26:	683a      	ldr	r2, [r7, #0]
   12a28:	4619      	mov	r1, r3
   12a2a:	4803      	ldr	r0, [pc, #12]	; (12a38 <_gpio_set_level+0x38>)
   12a2c:	4b04      	ldr	r3, [pc, #16]	; (12a40 <_gpio_set_level+0x40>)
   12a2e:	4798      	blx	r3
}
   12a30:	bf00      	nop
   12a32:	3708      	adds	r7, #8
   12a34:	46bd      	mov	sp, r7
   12a36:	bd80      	pop	{r7, pc}
   12a38:	41008000 	.word	0x41008000
   12a3c:	00012949 	.word	0x00012949
   12a40:	00012991 	.word	0x00012991

00012a44 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   12a44:	b580      	push	{r7, lr}
   12a46:	b082      	sub	sp, #8
   12a48:	af00      	add	r7, sp, #0
   12a4a:	4603      	mov	r3, r0
   12a4c:	6039      	str	r1, [r7, #0]
   12a4e:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   12a50:	79fb      	ldrb	r3, [r7, #7]
   12a52:	683a      	ldr	r2, [r7, #0]
   12a54:	4619      	mov	r1, r3
   12a56:	4803      	ldr	r0, [pc, #12]	; (12a64 <_gpio_toggle_level+0x20>)
   12a58:	4b03      	ldr	r3, [pc, #12]	; (12a68 <_gpio_toggle_level+0x24>)
   12a5a:	4798      	blx	r3
}
   12a5c:	bf00      	nop
   12a5e:	3708      	adds	r7, #8
   12a60:	46bd      	mov	sp, r7
   12a62:	bd80      	pop	{r7, pc}
   12a64:	41008000 	.word	0x41008000
   12a68:	000129b7 	.word	0x000129b7

00012a6c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   12a6c:	b580      	push	{r7, lr}
   12a6e:	b086      	sub	sp, #24
   12a70:	af00      	add	r7, sp, #0
   12a72:	4603      	mov	r3, r0
   12a74:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   12a76:	f107 030c 	add.w	r3, r7, #12
   12a7a:	4618      	mov	r0, r3
   12a7c:	4b13      	ldr	r3, [pc, #76]	; (12acc <_gpio_get_level+0x60>)
   12a7e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   12a80:	79fb      	ldrb	r3, [r7, #7]
   12a82:	4619      	mov	r1, r3
   12a84:	4812      	ldr	r0, [pc, #72]	; (12ad0 <_gpio_get_level+0x64>)
   12a86:	4b13      	ldr	r3, [pc, #76]	; (12ad4 <_gpio_get_level+0x68>)
   12a88:	4798      	blx	r3
   12a8a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   12a8c:	79fb      	ldrb	r3, [r7, #7]
   12a8e:	4619      	mov	r1, r3
   12a90:	480f      	ldr	r0, [pc, #60]	; (12ad0 <_gpio_get_level+0x64>)
   12a92:	4b11      	ldr	r3, [pc, #68]	; (12ad8 <_gpio_get_level+0x6c>)
   12a94:	4798      	blx	r3
   12a96:	4602      	mov	r2, r0
   12a98:	697b      	ldr	r3, [r7, #20]
   12a9a:	43db      	mvns	r3, r3
   12a9c:	4013      	ands	r3, r2
   12a9e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   12aa0:	79fb      	ldrb	r3, [r7, #7]
   12aa2:	4619      	mov	r1, r3
   12aa4:	480a      	ldr	r0, [pc, #40]	; (12ad0 <_gpio_get_level+0x64>)
   12aa6:	4b0d      	ldr	r3, [pc, #52]	; (12adc <_gpio_get_level+0x70>)
   12aa8:	4798      	blx	r3
   12aaa:	4602      	mov	r2, r0
   12aac:	697b      	ldr	r3, [r7, #20]
   12aae:	4013      	ands	r3, r2
   12ab0:	693a      	ldr	r2, [r7, #16]
   12ab2:	4313      	orrs	r3, r2
   12ab4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   12ab6:	f107 030c 	add.w	r3, r7, #12
   12aba:	4618      	mov	r0, r3
   12abc:	4b08      	ldr	r3, [pc, #32]	; (12ae0 <_gpio_get_level+0x74>)
   12abe:	4798      	blx	r3

	return tmp;
   12ac0:	693b      	ldr	r3, [r7, #16]
}
   12ac2:	4618      	mov	r0, r3
   12ac4:	3718      	adds	r7, #24
   12ac6:	46bd      	mov	sp, r7
   12ac8:	bd80      	pop	{r7, pc}
   12aca:	bf00      	nop
   12acc:	0000d9d1 	.word	0x0000d9d1
   12ad0:	41008000 	.word	0x41008000
   12ad4:	00012929 	.word	0x00012929
   12ad8:	000129dd 	.word	0x000129dd
   12adc:	0001296f 	.word	0x0001296f
   12ae0:	0000d9f7 	.word	0x0000d9f7

00012ae4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b082      	sub	sp, #8
   12ae8:	af00      	add	r7, sp, #0
   12aea:	4603      	mov	r3, r0
   12aec:	460a      	mov	r2, r1
   12aee:	71fb      	strb	r3, [r7, #7]
   12af0:	4613      	mov	r3, r2
   12af2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12af4:	79fb      	ldrb	r3, [r7, #7]
   12af6:	115b      	asrs	r3, r3, #5
   12af8:	b2d8      	uxtb	r0, r3
   12afa:	79fb      	ldrb	r3, [r7, #7]
   12afc:	f003 031f 	and.w	r3, r3, #31
   12b00:	2201      	movs	r2, #1
   12b02:	fa02 f303 	lsl.w	r3, r2, r3
   12b06:	79ba      	ldrb	r2, [r7, #6]
   12b08:	4619      	mov	r1, r3
   12b0a:	4b03      	ldr	r3, [pc, #12]	; (12b18 <gpio_set_pin_level+0x34>)
   12b0c:	4798      	blx	r3
}
   12b0e:	bf00      	nop
   12b10:	3708      	adds	r7, #8
   12b12:	46bd      	mov	sp, r7
   12b14:	bd80      	pop	{r7, pc}
   12b16:	bf00      	nop
   12b18:	00012a01 	.word	0x00012a01

00012b1c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   12b1c:	b580      	push	{r7, lr}
   12b1e:	b082      	sub	sp, #8
   12b20:	af00      	add	r7, sp, #0
   12b22:	4603      	mov	r3, r0
   12b24:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   12b26:	79fb      	ldrb	r3, [r7, #7]
   12b28:	115b      	asrs	r3, r3, #5
   12b2a:	b2d8      	uxtb	r0, r3
   12b2c:	79fb      	ldrb	r3, [r7, #7]
   12b2e:	f003 031f 	and.w	r3, r3, #31
   12b32:	2201      	movs	r2, #1
   12b34:	fa02 f303 	lsl.w	r3, r2, r3
   12b38:	4619      	mov	r1, r3
   12b3a:	4b03      	ldr	r3, [pc, #12]	; (12b48 <gpio_toggle_pin_level+0x2c>)
   12b3c:	4798      	blx	r3
}
   12b3e:	bf00      	nop
   12b40:	3708      	adds	r7, #8
   12b42:	46bd      	mov	sp, r7
   12b44:	bd80      	pop	{r7, pc}
   12b46:	bf00      	nop
   12b48:	00012a45 	.word	0x00012a45

00012b4c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   12b4c:	b580      	push	{r7, lr}
   12b4e:	b082      	sub	sp, #8
   12b50:	af00      	add	r7, sp, #0
   12b52:	4603      	mov	r3, r0
   12b54:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   12b56:	79fb      	ldrb	r3, [r7, #7]
   12b58:	115b      	asrs	r3, r3, #5
   12b5a:	b2db      	uxtb	r3, r3
   12b5c:	4618      	mov	r0, r3
   12b5e:	4b09      	ldr	r3, [pc, #36]	; (12b84 <gpio_get_pin_level+0x38>)
   12b60:	4798      	blx	r3
   12b62:	4601      	mov	r1, r0
   12b64:	79fb      	ldrb	r3, [r7, #7]
   12b66:	f003 031f 	and.w	r3, r3, #31
   12b6a:	2201      	movs	r2, #1
   12b6c:	fa02 f303 	lsl.w	r3, r2, r3
   12b70:	400b      	ands	r3, r1
   12b72:	2b00      	cmp	r3, #0
   12b74:	bf14      	ite	ne
   12b76:	2301      	movne	r3, #1
   12b78:	2300      	moveq	r3, #0
   12b7a:	b2db      	uxtb	r3, r3
}
   12b7c:	4618      	mov	r0, r3
   12b7e:	3708      	adds	r7, #8
   12b80:	46bd      	mov	sp, r7
   12b82:	bd80      	pop	{r7, pc}
   12b84:	00012a6d 	.word	0x00012a6d

00012b88 <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
   12b88:	b480      	push	{r7}
   12b8a:	b083      	sub	sp, #12
   12b8c:	af00      	add	r7, sp, #0
   12b8e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController->timeoutFlapperValveController=true;
   12b90:	4b07      	ldr	r3, [pc, #28]	; (12bb0 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
   12b92:	681b      	ldr	r3, [r3, #0]
   12b94:	2201      	movs	r2, #1
   12b96:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
   12b9a:	4b05      	ldr	r3, [pc, #20]	; (12bb0 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	2201      	movs	r2, #1
   12ba0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
   12ba4:	bf00      	nop
   12ba6:	370c      	adds	r7, #12
   12ba8:	46bd      	mov	sp, r7
   12baa:	bc80      	pop	{r7}
   12bac:	4770      	bx	lr
   12bae:	bf00      	nop
   12bb0:	20002a48 	.word	0x20002a48

00012bb4 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
   12bb4:	b480      	push	{r7}
   12bb6:	b083      	sub	sp, #12
   12bb8:	af00      	add	r7, sp, #0
   12bba:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
   12bbc:	4b04      	ldr	r3, [pc, #16]	; (12bd0 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
   12bbe:	681b      	ldr	r3, [r3, #0]
   12bc0:	2201      	movs	r2, #1
   12bc2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
   12bc6:	bf00      	nop
   12bc8:	370c      	adds	r7, #12
   12bca:	46bd      	mov	sp, r7
   12bcc:	bc80      	pop	{r7}
   12bce:	4770      	bx	lr
   12bd0:	20002a48 	.word	0x20002a48

00012bd4 <_ZL17ResetValveTimeoutPK10timer_task>:

static void ResetValveTimeout(const struct timer_task *const timer_task)
{
   12bd4:	b480      	push	{r7}
   12bd6:	b083      	sub	sp, #12
   12bd8:	af00      	add	r7, sp, #0
   12bda:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController->resetTimeout=true;
   12bdc:	4b04      	ldr	r3, [pc, #16]	; (12bf0 <_ZL17ResetValveTimeoutPK10timer_task+0x1c>)
   12bde:	681b      	ldr	r3, [r3, #0]
   12be0:	2201      	movs	r2, #1
   12be2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
   12be6:	bf00      	nop
   12be8:	370c      	adds	r7, #12
   12bea:	46bd      	mov	sp, r7
   12bec:	bc80      	pop	{r7}
   12bee:	4770      	bx	lr
   12bf0:	20002a48 	.word	0x20002a48

00012bf4 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   12bf4:	b580      	push	{r7, lr}
   12bf6:	b082      	sub	sp, #8
   12bf8:	af00      	add	r7, sp, #0
   12bfa:	6078      	str	r0, [r7, #4]
   12bfc:	687b      	ldr	r3, [r7, #4]
   12bfe:	4618      	mov	r0, r3
   12c00:	4b1e      	ldr	r3, [pc, #120]	; (12c7c <_ZN22FlapperValveControllerC1Ev+0x88>)
   12c02:	4798      	blx	r3
{
	fv=&fvStatic;
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	4a1e      	ldr	r2, [pc, #120]	; (12c80 <_ZN22FlapperValveControllerC1Ev+0x8c>)
   12c08:	67da      	str	r2, [r3, #124]	; 0x7c
	ptrFlapperValveController=this;
   12c0a:	4a1e      	ldr	r2, [pc, #120]	; (12c84 <_ZN22FlapperValveControllerC1Ev+0x90>)
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
   12c10:	687b      	ldr	r3, [r7, #4]
   12c12:	2200      	movs	r2, #0
   12c14:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
   12c18:	687b      	ldr	r3, [r7, #4]
   12c1a:	2200      	movs	r2, #0
   12c1c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
   12c20:	687b      	ldr	r3, [r7, #4]
   12c22:	2200      	movs	r2, #0
   12c24:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
   12c28:	687b      	ldr	r3, [r7, #4]
   12c2a:	2200      	movs	r2, #0
   12c2c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
   12c30:	687b      	ldr	r3, [r7, #4]
   12c32:	2200      	movs	r2, #0
   12c34:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   12c38:	687b      	ldr	r3, [r7, #4]
   12c3a:	22da      	movs	r2, #218	; 0xda
   12c3c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
   12c40:	687b      	ldr	r3, [r7, #4]
   12c42:	2200      	movs	r2, #0
   12c44:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
   12c48:	687b      	ldr	r3, [r7, #4]
   12c4a:	2200      	movs	r2, #0
   12c4c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	2200      	movs	r2, #0
   12c54:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
   12c58:	687b      	ldr	r3, [r7, #4]
   12c5a:	2200      	movs	r2, #0
   12c5c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
   12c60:	687b      	ldr	r3, [r7, #4]
   12c62:	2200      	movs	r2, #0
   12c64:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
   12c68:	687b      	ldr	r3, [r7, #4]
   12c6a:	2200      	movs	r2, #0
   12c6c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
   12c70:	687b      	ldr	r3, [r7, #4]
   12c72:	4618      	mov	r0, r3
   12c74:	3708      	adds	r7, #8
   12c76:	46bd      	mov	sp, r7
   12c78:	bd80      	pop	{r7, pc}
   12c7a:	bf00      	nop
   12c7c:	00013bed 	.word	0x00013bed
   12c80:	20002a4c 	.word	0x20002a4c
   12c84:	20002a48 	.word	0x20002a48

00012c88 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   12c88:	b580      	push	{r7, lr}
   12c8a:	b082      	sub	sp, #8
   12c8c:	af00      	add	r7, sp, #0
   12c8e:	6078      	str	r0, [r7, #4]
   12c90:	687b      	ldr	r3, [r7, #4]
   12c92:	4618      	mov	r0, r3
   12c94:	4b03      	ldr	r3, [pc, #12]	; (12ca4 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   12c96:	4798      	blx	r3
{
} //~FlapperValveController
   12c98:	687b      	ldr	r3, [r7, #4]
   12c9a:	4618      	mov	r0, r3
   12c9c:	3708      	adds	r7, #8
   12c9e:	46bd      	mov	sp, r7
   12ca0:	bd80      	pop	{r7, pc}
   12ca2:	bf00      	nop
   12ca4:	00013c39 	.word	0x00013c39

00012ca8 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
   12ca8:	b580      	push	{r7, lr}
   12caa:	b082      	sub	sp, #8
   12cac:	af00      	add	r7, sp, #0
   12cae:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
   12cb0:	687b      	ldr	r3, [r7, #4]
   12cb2:	4a0d      	ldr	r2, [pc, #52]	; (12ce8 <_ZN22FlapperValveController14InitControllerEv+0x40>)
   12cb4:	67da      	str	r2, [r3, #124]	; 0x7c
	if (fv->Init())
   12cb6:	687b      	ldr	r3, [r7, #4]
   12cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12cba:	4618      	mov	r0, r3
   12cbc:	4b0b      	ldr	r3, [pc, #44]	; (12cec <_ZN22FlapperValveController14InitControllerEv+0x44>)
   12cbe:	4798      	blx	r3
   12cc0:	4603      	mov	r3, r0
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d007      	beq.n	12cd6 <_ZN22FlapperValveController14InitControllerEv+0x2e>
	{
		isOK=Selftest();
   12cc6:	6878      	ldr	r0, [r7, #4]
   12cc8:	4b09      	ldr	r3, [pc, #36]	; (12cf0 <_ZN22FlapperValveController14InitControllerEv+0x48>)
   12cca:	4798      	blx	r3
   12ccc:	4603      	mov	r3, r0
   12cce:	461a      	mov	r2, r3
   12cd0:	687b      	ldr	r3, [r7, #4]
   12cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	return	isOK;	
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12cdc:	b2db      	uxtb	r3, r3
}
   12cde:	4618      	mov	r0, r3
   12ce0:	3708      	adds	r7, #8
   12ce2:	46bd      	mov	sp, r7
   12ce4:	bd80      	pop	{r7, pc}
   12ce6:	bf00      	nop
   12ce8:	20002a4c 	.word	0x20002a4c
   12cec:	00013c59 	.word	0x00013c59
   12cf0:	000139ad 	.word	0x000139ad

00012cf4 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   12cf4:	b480      	push	{r7}
   12cf6:	b083      	sub	sp, #12
   12cf8:	af00      	add	r7, sp, #0
   12cfa:	6078      	str	r0, [r7, #4]
   12cfc:	460b      	mov	r3, r1
   12cfe:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   12d00:	687b      	ldr	r3, [r7, #4]
   12d02:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
   12d06:	687b      	ldr	r3, [r7, #4]
   12d08:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   12d12:	461a      	mov	r2, r3
   12d14:	78fb      	ldrb	r3, [r7, #3]
   12d16:	429a      	cmp	r2, r3
   12d18:	bfcc      	ite	gt
   12d1a:	2301      	movgt	r3, #1
   12d1c:	2300      	movle	r3, #0
   12d1e:	b2da      	uxtb	r2, r3
   12d20:	687b      	ldr	r3, [r7, #4]
   12d22:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
   12d26:	687b      	ldr	r3, [r7, #4]
   12d28:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
   12d2c:	4618      	mov	r0, r3
   12d2e:	370c      	adds	r7, #12
   12d30:	46bd      	mov	sp, r7
   12d32:	bc80      	pop	{r7}
   12d34:	4770      	bx	lr
	...

00012d38 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   12d38:	b580      	push	{r7, lr}
   12d3a:	b082      	sub	sp, #8
   12d3c:	af00      	add	r7, sp, #0
   12d3e:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   12d40:	687b      	ldr	r3, [r7, #4]
   12d42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12d46:	4619      	mov	r1, r3
   12d48:	6878      	ldr	r0, [r7, #4]
   12d4a:	4b03      	ldr	r3, [pc, #12]	; (12d58 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   12d4c:	4798      	blx	r3
   12d4e:	4603      	mov	r3, r0
	
}
   12d50:	4618      	mov	r0, r3
   12d52:	3708      	adds	r7, #8
   12d54:	46bd      	mov	sp, r7
   12d56:	bd80      	pop	{r7, pc}
   12d58:	00012cf5 	.word	0x00012cf5

00012d5c <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	fv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   12d5c:	b590      	push	{r4, r7, lr}
   12d5e:	b083      	sub	sp, #12
   12d60:	af00      	add	r7, sp, #0
   12d62:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   12d64:	687b      	ldr	r3, [r7, #4]
   12d66:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   12d6a:	687b      	ldr	r3, [r7, #4]
   12d6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
   12d70:	687b      	ldr	r3, [r7, #4]
   12d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   12d78:	2b00      	cmp	r3, #0
   12d7a:	d008      	beq.n	12d8e <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
   12d7c:	687b      	ldr	r3, [r7, #4]
   12d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12d80:	2100      	movs	r1, #0
   12d82:	4618      	mov	r0, r3
   12d84:	4b0b      	ldr	r3, [pc, #44]	; (12db4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
   12d86:	4798      	blx	r3
		delay_ms(10);
   12d88:	200a      	movs	r0, #10
   12d8a:	4b0b      	ldr	r3, [pc, #44]	; (12db8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   12d8c:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
   12d8e:	687b      	ldr	r3, [r7, #4]
   12d90:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
   12d92:	6878      	ldr	r0, [r7, #4]
   12d94:	4b09      	ldr	r3, [pc, #36]	; (12dbc <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   12d96:	4798      	blx	r3
   12d98:	4603      	mov	r3, r0
   12d9a:	4619      	mov	r1, r3
   12d9c:	4620      	mov	r0, r4
   12d9e:	4b08      	ldr	r3, [pc, #32]	; (12dc0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   12da0:	4798      	blx	r3
	StartMotor();
   12da2:	6878      	ldr	r0, [r7, #4]
   12da4:	4b07      	ldr	r3, [pc, #28]	; (12dc4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   12da6:	4798      	blx	r3
	return 0;
   12da8:	2300      	movs	r3, #0
}
   12daa:	4618      	mov	r0, r3
   12dac:	370c      	adds	r7, #12
   12dae:	46bd      	mov	sp, r7
   12db0:	bd90      	pop	{r4, r7, pc}
   12db2:	bf00      	nop
   12db4:	00013e0d 	.word	0x00013e0d
   12db8:	00003ed5 	.word	0x00003ed5
   12dbc:	00012d39 	.word	0x00012d39
   12dc0:	00013e8d 	.word	0x00013e8d
   12dc4:	00013645 	.word	0x00013645

00012dc8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   12dc8:	b580      	push	{r7, lr}
   12dca:	b082      	sub	sp, #8
   12dcc:	af00      	add	r7, sp, #0
   12dce:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   12dd0:	6878      	ldr	r0, [r7, #4]
   12dd2:	4b13      	ldr	r3, [pc, #76]	; (12e20 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   12dd4:	4798      	blx	r3
   12dd6:	4603      	mov	r3, r0
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d003      	beq.n	12de4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   12ddc:	6878      	ldr	r0, [r7, #4]
   12dde:	4b11      	ldr	r3, [pc, #68]	; (12e24 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   12de0:	4798      	blx	r3
   12de2:	e013      	b.n	12e0c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   12de4:	687b      	ldr	r3, [r7, #4]
   12de6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   12dea:	2b00      	cmp	r3, #0
   12dec:	d00b      	beq.n	12e06 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12dee:	687b      	ldr	r3, [r7, #4]
   12df0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   12df4:	4619      	mov	r1, r3
   12df6:	6878      	ldr	r0, [r7, #4]
   12df8:	4b0b      	ldr	r3, [pc, #44]	; (12e28 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   12dfa:	4798      	blx	r3
			NBC_Activated=false;
   12dfc:	687b      	ldr	r3, [r7, #4]
   12dfe:	2200      	movs	r2, #0
   12e00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
   12e04:	e002      	b.n	12e0c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   12e06:	6878      	ldr	r0, [r7, #4]
   12e08:	4b08      	ldr	r3, [pc, #32]	; (12e2c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   12e0a:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   12e0c:	687b      	ldr	r3, [r7, #4]
   12e0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   12e12:	f083 0301 	eor.w	r3, r3, #1
   12e16:	b2db      	uxtb	r3, r3
}
   12e18:	4618      	mov	r0, r3
   12e1a:	3708      	adds	r7, #8
   12e1c:	46bd      	mov	sp, r7
   12e1e:	bd80      	pop	{r7, pc}
   12e20:	0001346d 	.word	0x0001346d
   12e24:	0001340d 	.word	0x0001340d
   12e28:	000136d5 	.word	0x000136d5
   12e2c:	00013005 	.word	0x00013005

00012e30 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   12e30:	b590      	push	{r4, r7, lr}
   12e32:	b085      	sub	sp, #20
   12e34:	af00      	add	r7, sp, #0
   12e36:	6078      	str	r0, [r7, #4]
	bool result=false;
   12e38:	2300      	movs	r3, #0
   12e3a:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   12e3c:	687b      	ldr	r3, [r7, #4]
   12e3e:	33bf      	adds	r3, #191	; 0xbf
   12e40:	4619      	mov	r1, r3
   12e42:	4817      	ldr	r0, [pc, #92]	; (12ea0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   12e44:	4b17      	ldr	r3, [pc, #92]	; (12ea4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   12e46:	4798      	blx	r3
	UpdateFlapperValveData();
   12e48:	6878      	ldr	r0, [r7, #4]
   12e4a:	4b17      	ldr	r3, [pc, #92]	; (12ea8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   12e4c:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   12e4e:	687b      	ldr	r3, [r7, #4]
   12e50:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
   12e54:	f083 0301 	eor.w	r3, r3, #1
   12e58:	b2db      	uxtb	r3, r3
   12e5a:	461c      	mov	r4, r3
   12e5c:	6878      	ldr	r0, [r7, #4]
   12e5e:	4b13      	ldr	r3, [pc, #76]	; (12eac <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   12e60:	4798      	blx	r3
   12e62:	4603      	mov	r3, r0
   12e64:	f083 0301 	eor.w	r3, r3, #1
   12e68:	b2db      	uxtb	r3, r3
   12e6a:	4023      	ands	r3, r4
   12e6c:	2b00      	cmp	r3, #0
   12e6e:	bf14      	ite	ne
   12e70:	2301      	movne	r3, #1
   12e72:	2300      	moveq	r3, #0
   12e74:	b2db      	uxtb	r3, r3
   12e76:	2b00      	cmp	r3, #0
   12e78:	d00d      	beq.n	12e96 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   12e7a:	687b      	ldr	r3, [r7, #4]
   12e7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   12e80:	461a      	mov	r2, r3
   12e82:	687b      	ldr	r3, [r7, #4]
   12e84:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   12e88:	429a      	cmp	r2, r3
   12e8a:	dd02      	ble.n	12e92 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   12e8c:	2301      	movs	r3, #1
   12e8e:	73fb      	strb	r3, [r7, #15]
   12e90:	e001      	b.n	12e96 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   12e92:	2300      	movs	r3, #0
   12e94:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   12e96:	7bfb      	ldrb	r3, [r7, #15]
}
   12e98:	4618      	mov	r0, r3
   12e9a:	3714      	adds	r7, #20
   12e9c:	46bd      	mov	sp, r7
   12e9e:	bd90      	pop	{r4, r7, pc}
   12ea0:	20003e0c 	.word	0x20003e0c
   12ea4:	00015075 	.word	0x00015075
   12ea8:	000138b5 	.word	0x000138b5
   12eac:	0001346d 	.word	0x0001346d

00012eb0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   12eb0:	b580      	push	{r7, lr}
   12eb2:	b082      	sub	sp, #8
   12eb4:	af00      	add	r7, sp, #0
   12eb6:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   12eb8:	6878      	ldr	r0, [r7, #4]
   12eba:	4b11      	ldr	r3, [pc, #68]	; (12f00 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
   12ebc:	4798      	blx	r3
   12ebe:	4603      	mov	r3, r0
   12ec0:	461a      	mov	r2, r3
   12ec2:	687b      	ldr	r3, [r7, #4]
   12ec4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	f083 0301 	eor.w	r3, r3, #1
   12ece:	b2db      	uxtb	r3, r3
   12ed0:	4013      	ands	r3, r2
   12ed2:	2b00      	cmp	r3, #0
   12ed4:	bf14      	ite	ne
   12ed6:	2301      	movne	r3, #1
   12ed8:	2300      	moveq	r3, #0
   12eda:	b2db      	uxtb	r3, r3
   12edc:	2b00      	cmp	r3, #0
   12ede:	d003      	beq.n	12ee8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   12ee0:	6878      	ldr	r0, [r7, #4]
   12ee2:	4b08      	ldr	r3, [pc, #32]	; (12f04 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
   12ee4:	4798      	blx	r3
   12ee6:	e002      	b.n	12eee <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
   12ee8:	6878      	ldr	r0, [r7, #4]
   12eea:	4b07      	ldr	r3, [pc, #28]	; (12f08 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
   12eec:	4798      	blx	r3
	}
	return resetTimeout;
   12eee:	687b      	ldr	r3, [r7, #4]
   12ef0:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12ef4:	b2db      	uxtb	r3, r3
}
   12ef6:	4618      	mov	r0, r3
   12ef8:	3708      	adds	r7, #8
   12efa:	46bd      	mov	sp, r7
   12efc:	bd80      	pop	{r7, pc}
   12efe:	bf00      	nop
   12f00:	00012e31 	.word	0x00012e31
   12f04:	00013279 	.word	0x00013279
   12f08:	00012f0d 	.word	0x00012f0d

00012f0c <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   12f0c:	b580      	push	{r7, lr}
   12f0e:	b082      	sub	sp, #8
   12f10:	af00      	add	r7, sp, #0
   12f12:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   12f14:	6878      	ldr	r0, [r7, #4]
   12f16:	4b29      	ldr	r3, [pc, #164]	; (12fbc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   12f18:	4798      	blx	r3
   12f1a:	4603      	mov	r3, r0
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	d031      	beq.n	12f84 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   12f20:	687b      	ldr	r3, [r7, #4]
   12f22:	2201      	movs	r2, #1
   12f24:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
   12f28:	687b      	ldr	r3, [r7, #4]
   12f2a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d003      	beq.n	12f3a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   12f32:	6878      	ldr	r0, [r7, #4]
   12f34:	4b22      	ldr	r3, [pc, #136]	; (12fc0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   12f36:	4798      	blx	r3
   12f38:	e038      	b.n	12fac <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   12f3a:	687b      	ldr	r3, [r7, #4]
   12f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   12f40:	461a      	mov	r2, r3
   12f42:	687b      	ldr	r3, [r7, #4]
   12f44:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   12f48:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   12f4c:	429a      	cmp	r2, r3
   12f4e:	dd0c      	ble.n	12f6a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   12f50:	687b      	ldr	r3, [r7, #4]
   12f52:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   12f56:	43db      	mvns	r3, r3
   12f58:	b2db      	uxtb	r3, r3
   12f5a:	4619      	mov	r1, r3
   12f5c:	6878      	ldr	r0, [r7, #4]
   12f5e:	4b19      	ldr	r3, [pc, #100]	; (12fc4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   12f60:	4798      	blx	r3
					standAloneReturning=true;
   12f62:	687b      	ldr	r3, [r7, #4]
   12f64:	2201      	movs	r2, #1
   12f66:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   12f70:	43db      	mvns	r3, r3
   12f72:	b2da      	uxtb	r2, r3
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
   12f7a:	687b      	ldr	r3, [r7, #4]
   12f7c:	2201      	movs	r2, #1
   12f7e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
   12f82:	e013      	b.n	12fac <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2200      	movs	r2, #0
   12f88:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
   12f8c:	687b      	ldr	r3, [r7, #4]
   12f8e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   12f92:	2b00      	cmp	r3, #0
   12f94:	d007      	beq.n	12fa6 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   12f96:	687b      	ldr	r3, [r7, #4]
   12f98:	2200      	movs	r2, #0
   12f9a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
   12f9e:	687b      	ldr	r3, [r7, #4]
   12fa0:	2200      	movs	r2, #0
   12fa2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   12fa6:	6878      	ldr	r0, [r7, #4]
   12fa8:	4b05      	ldr	r3, [pc, #20]	; (12fc0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   12faa:	4798      	blx	r3
		
	}
	return standAloneMode;
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
   12fb2:	4618      	mov	r0, r3
   12fb4:	3708      	adds	r7, #8
   12fb6:	46bd      	mov	sp, r7
   12fb8:	bd80      	pop	{r7, pc}
   12fba:	bf00      	nop
   12fbc:	00012fc9 	.word	0x00012fc9
   12fc0:	00012dc9 	.word	0x00012dc9
   12fc4:	000136d5 	.word	0x000136d5

00012fc8 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   12fc8:	b480      	push	{r7}
   12fca:	b085      	sub	sp, #20
   12fcc:	af00      	add	r7, sp, #0
   12fce:	6078      	str	r0, [r7, #4]
	bool result=false;
   12fd0:	2300      	movs	r3, #0
   12fd2:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
   12fd4:	687b      	ldr	r3, [r7, #4]
   12fd6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   12fda:	461a      	mov	r2, r3
   12fdc:	687b      	ldr	r3, [r7, #4]
   12fde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   12fe2:	f083 0301 	eor.w	r3, r3, #1
   12fe6:	b2db      	uxtb	r3, r3
   12fe8:	4013      	ands	r3, r2
   12fea:	2b00      	cmp	r3, #0
   12fec:	d002      	beq.n	12ff4 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
   12fee:	2301      	movs	r3, #1
   12ff0:	73fb      	strb	r3, [r7, #15]
   12ff2:	e001      	b.n	12ff8 <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
   12ff4:	2300      	movs	r3, #0
   12ff6:	73fb      	strb	r3, [r7, #15]
	}
	return result;
   12ff8:	7bfb      	ldrb	r3, [r7, #15]
}
   12ffa:	4618      	mov	r0, r3
   12ffc:	3714      	adds	r7, #20
   12ffe:	46bd      	mov	sp, r7
   13000:	bc80      	pop	{r7}
   13002:	4770      	bx	lr

00013004 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   13004:	b590      	push	{r4, r7, lr}
   13006:	b083      	sub	sp, #12
   13008:	af00      	add	r7, sp, #0
   1300a:	6078      	str	r0, [r7, #4]
	if (isControlling)
   1300c:	687b      	ldr	r3, [r7, #4]
   1300e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
   13012:	2b00      	cmp	r3, #0
   13014:	f000 8117 	beq.w	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   13018:	687b      	ldr	r3, [r7, #4]
   1301a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
   1301e:	687b      	ldr	r3, [r7, #4]
   13020:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
   13024:	4313      	orrs	r3, r2
   13026:	b2db      	uxtb	r3, r3
   13028:	461a      	mov	r2, r3
   1302a:	687b      	ldr	r3, [r7, #4]
   1302c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   13030:	4013      	ands	r3, r2
   13032:	687a      	ldr	r2, [r7, #4]
   13034:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   13038:	b2d2      	uxtb	r2, r2
   1303a:	4013      	ands	r3, r2
   1303c:	2b00      	cmp	r3, #0
   1303e:	bf14      	ite	ne
   13040:	2301      	movne	r3, #1
   13042:	2300      	moveq	r3, #0
   13044:	b2db      	uxtb	r3, r3
   13046:	2b00      	cmp	r3, #0
   13048:	d003      	beq.n	13052 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   1304a:	6878      	ldr	r0, [r7, #4]
   1304c:	4b80      	ldr	r3, [pc, #512]	; (13250 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   1304e:	4798      	blx	r3
   13050:	e0f9      	b.n	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
		} 
		else
		{
			
		//	currentPosition=fv->ReadActualPosition();
			if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   13052:	687b      	ldr	r3, [r7, #4]
   13054:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   13058:	2b05      	cmp	r3, #5
   1305a:	bfd4      	ite	le
   1305c:	2301      	movle	r3, #1
   1305e:	2300      	movgt	r3, #0
   13060:	b2da      	uxtb	r2, r3
   13062:	687b      	ldr	r3, [r7, #4]
   13064:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   13068:	2b05      	cmp	r3, #5
   1306a:	bfd4      	ite	le
   1306c:	2301      	movle	r3, #1
   1306e:	2300      	movgt	r3, #0
   13070:	b2db      	uxtb	r3, r3
   13072:	4013      	ands	r3, r2
   13074:	b2da      	uxtb	r2, r3
   13076:	687b      	ldr	r3, [r7, #4]
   13078:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1307c:	2bfa      	cmp	r3, #250	; 0xfa
   1307e:	bfcc      	ite	gt
   13080:	2301      	movgt	r3, #1
   13082:	2300      	movle	r3, #0
   13084:	b2d9      	uxtb	r1, r3
   13086:	687b      	ldr	r3, [r7, #4]
   13088:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1308c:	2bf5      	cmp	r3, #245	; 0xf5
   1308e:	bfcc      	ite	gt
   13090:	2301      	movgt	r3, #1
   13092:	2300      	movle	r3, #0
   13094:	b2db      	uxtb	r3, r3
   13096:	400b      	ands	r3, r1
   13098:	b2db      	uxtb	r3, r3
   1309a:	4313      	orrs	r3, r2
   1309c:	b2db      	uxtb	r3, r3
   1309e:	461a      	mov	r2, r3
   130a0:	687b      	ldr	r3, [r7, #4]
   130a2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   130a6:	f083 0301 	eor.w	r3, r3, #1
   130aa:	b2db      	uxtb	r3, r3
   130ac:	4619      	mov	r1, r3
   130ae:	687b      	ldr	r3, [r7, #4]
   130b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   130b4:	b2db      	uxtb	r3, r3
   130b6:	400b      	ands	r3, r1
   130b8:	4013      	ands	r3, r2
   130ba:	2b00      	cmp	r3, #0
   130bc:	bf14      	ite	ne
   130be:	2301      	movne	r3, #1
   130c0:	2300      	moveq	r3, #0
   130c2:	b2db      	uxtb	r3, r3
   130c4:	2b00      	cmp	r3, #0
   130c6:	d014      	beq.n	130f2 <_ZN22FlapperValveController15ControlMovementEv+0xee>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   130c8:	22c8      	movs	r2, #200	; 0xc8
   130ca:	4962      	ldr	r1, [pc, #392]	; (13254 <_ZN22FlapperValveController15ControlMovementEv+0x250>)
   130cc:	4862      	ldr	r0, [pc, #392]	; (13258 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
   130ce:	4b63      	ldr	r3, [pc, #396]	; (1325c <_ZN22FlapperValveController15ControlMovementEv+0x258>)
   130d0:	4798      	blx	r3
				fullClosedTimeout=false;
   130d2:	687b      	ldr	r3, [r7, #4]
   130d4:	2200      	movs	r2, #0
   130d6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				gotSetpoint=false;
   130da:	687b      	ldr	r3, [r7, #4]
   130dc:	2200      	movs	r2, #0
   130de:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				closing=true;
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	2201      	movs	r2, #1
   130e6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
				unLockTimeout=true;
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	2201      	movs	r2, #1
   130ee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   130f2:	687b      	ldr	r3, [r7, #4]
   130f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   130f8:	461a      	mov	r2, r3
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   13100:	1ad3      	subs	r3, r2, r3
   13102:	2b00      	cmp	r3, #0
   13104:	bfb8      	it	lt
   13106:	425b      	neglt	r3, r3
   13108:	687a      	ldr	r2, [r7, #4]
   1310a:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
   1310e:	4293      	cmp	r3, r2
   13110:	bfcc      	ite	gt
   13112:	2301      	movgt	r3, #1
   13114:	2300      	movle	r3, #0
   13116:	b2db      	uxtb	r3, r3
   13118:	461a      	mov	r2, r3
   1311a:	687b      	ldr	r3, [r7, #4]
   1311c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   13120:	4313      	orrs	r3, r2
   13122:	2b00      	cmp	r3, #0
   13124:	d079      	beq.n	1321a <_ZN22FlapperValveController15ControlMovementEv+0x216>
			{
				if (flapperValveIsMoving)
   13126:	687b      	ldr	r3, [r7, #4]
   13128:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1312c:	b2db      	uxtb	r3, r3
   1312e:	2b00      	cmp	r3, #0
   13130:	d04b      	beq.n	131ca <_ZN22FlapperValveController15ControlMovementEv+0x1c6>
				{
					if (closing)
   13132:	687b      	ldr	r3, [r7, #4]
   13134:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   13138:	2b00      	cmp	r3, #0
   1313a:	d00e      	beq.n	1315a <_ZN22FlapperValveController15ControlMovementEv+0x156>
					{
						if (keepControlling)
   1313c:	687b      	ldr	r3, [r7, #4]
   1313e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   13142:	2b00      	cmp	r3, #0
   13144:	d054      	beq.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						{
							if (fullClosedTimeout)
   13146:	687b      	ldr	r3, [r7, #4]
   13148:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1314c:	b2db      	uxtb	r3, r3
   1314e:	2b00      	cmp	r3, #0
   13150:	d04e      	beq.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
							{
								StopValveAtLimit();
   13152:	6878      	ldr	r0, [r7, #4]
   13154:	4b3e      	ldr	r3, [pc, #248]	; (13250 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   13156:	4798      	blx	r3
   13158:	e04a      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   1315a:	687b      	ldr	r3, [r7, #4]
   1315c:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
   13160:	6878      	ldr	r0, [r7, #4]
   13162:	4b3f      	ldr	r3, [pc, #252]	; (13260 <_ZN22FlapperValveController15ControlMovementEv+0x25c>)
   13164:	4798      	blx	r3
   13166:	4603      	mov	r3, r0
   13168:	429c      	cmp	r4, r3
   1316a:	bf14      	ite	ne
   1316c:	2301      	movne	r3, #1
   1316e:	2300      	moveq	r3, #0
   13170:	b2db      	uxtb	r3, r3
   13172:	2b00      	cmp	r3, #0
   13174:	d00b      	beq.n	1318e <_ZN22FlapperValveController15ControlMovementEv+0x18a>
						{
							StopMotor();
   13176:	6878      	ldr	r0, [r7, #4]
   13178:	4b3a      	ldr	r3, [pc, #232]	; (13264 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   1317a:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   1317c:	493a      	ldr	r1, [pc, #232]	; (13268 <_ZN22FlapperValveController15ControlMovementEv+0x264>)
   1317e:	4836      	ldr	r0, [pc, #216]	; (13258 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
   13180:	4b3a      	ldr	r3, [pc, #232]	; (1326c <_ZN22FlapperValveController15ControlMovementEv+0x268>)
   13182:	4798      	blx	r3
							keepControlling=true;
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	2201      	movs	r2, #1
   13188:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   1318c:	e030      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							if (timeoutFlapperValveController)
   1318e:	687b      	ldr	r3, [r7, #4]
   13190:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13194:	b2db      	uxtb	r3, r3
   13196:	2b00      	cmp	r3, #0
   13198:	d003      	beq.n	131a2 <_ZN22FlapperValveController15ControlMovementEv+0x19e>
							{
								StopMotor();
   1319a:	6878      	ldr	r0, [r7, #4]
   1319c:	4b31      	ldr	r3, [pc, #196]	; (13264 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   1319e:	4798      	blx	r3
   131a0:	e026      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								
							}
							else
							{
								if (keepControlling)
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   131a8:	2b00      	cmp	r3, #0
   131aa:	d021      	beq.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								{
									if (timeoutKeepControlling)
   131ac:	687b      	ldr	r3, [r7, #4]
   131ae:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   131b2:	b2db      	uxtb	r3, r3
   131b4:	2b00      	cmp	r3, #0
   131b6:	d003      	beq.n	131c0 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>
									{
										StopMotor();
   131b8:	6878      	ldr	r0, [r7, #4]
   131ba:	4b2a      	ldr	r3, [pc, #168]	; (13264 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   131bc:	4798      	blx	r3
   131be:	e017      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
									}
									else
									{
										KeepControlling();
   131c0:	2100      	movs	r1, #0
   131c2:	6878      	ldr	r0, [r7, #4]
   131c4:	4b2a      	ldr	r3, [pc, #168]	; (13270 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
   131c6:	4798      	blx	r3
   131c8:	e012      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					}
					
				}
				else
				{
					if (keepControlling)
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   131d0:	2b00      	cmp	r3, #0
   131d2:	d00d      	beq.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					{
						if (timeoutKeepControlling)
   131d4:	687b      	ldr	r3, [r7, #4]
   131d6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   131da:	b2db      	uxtb	r3, r3
   131dc:	2b00      	cmp	r3, #0
   131de:	d003      	beq.n	131e8 <_ZN22FlapperValveController15ControlMovementEv+0x1e4>
						{
							StopValveinBetween();
   131e0:	6878      	ldr	r0, [r7, #4]
   131e2:	4b24      	ldr	r3, [pc, #144]	; (13274 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
   131e4:	4798      	blx	r3
   131e6:	e003      	b.n	131f0 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							KeepControlling();
   131e8:	2100      	movs	r1, #0
   131ea:	6878      	ldr	r0, [r7, #4]
   131ec:	4b20      	ldr	r3, [pc, #128]	; (13270 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
   131ee:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   131f0:	687b      	ldr	r3, [r7, #4]
   131f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   131f6:	461a      	mov	r2, r3
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   131fe:	1ad3      	subs	r3, r2, r3
   13200:	2b00      	cmp	r3, #0
   13202:	bfb8      	it	lt
   13204:	425b      	neglt	r3, r3
   13206:	687a      	ldr	r2, [r7, #4]
   13208:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
   1320c:	4293      	cmp	r3, r2
   1320e:	dd1a      	ble.n	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				{
					gotSetpoint=false;
   13210:	687b      	ldr	r3, [r7, #4]
   13212:	2200      	movs	r2, #0
   13214:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
   13218:	e015      	b.n	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				
				
			}
			else
			{
				if (closing)
   1321a:	687b      	ldr	r3, [r7, #4]
   1321c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   13220:	2b00      	cmp	r3, #0
   13222:	d009      	beq.n	13238 <_ZN22FlapperValveController15ControlMovementEv+0x234>
				{
					if (fullClosedTimeout)
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1322a:	b2db      	uxtb	r3, r3
   1322c:	2b00      	cmp	r3, #0
   1322e:	d00a      	beq.n	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
						StopValveAtLimit();
   13230:	6878      	ldr	r0, [r7, #4]
   13232:	4b07      	ldr	r3, [pc, #28]	; (13250 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   13234:	4798      	blx	r3
   13236:	e006      	b.n	13246 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   13238:	6878      	ldr	r0, [r7, #4]
   1323a:	4b0e      	ldr	r3, [pc, #56]	; (13274 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
   1323c:	4798      	blx	r3
					gotSetpoint=true;
   1323e:	687b      	ldr	r3, [r7, #4]
   13240:	2201      	movs	r2, #1
   13242:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
   13246:	2300      	movs	r3, #0
	
}
   13248:	4618      	mov	r0, r3
   1324a:	370c      	adds	r7, #12
   1324c:	46bd      	mov	sp, r7
   1324e:	bd90      	pop	{r4, r7, pc}
   13250:	00013511 	.word	0x00013511
   13254:	00012bb5 	.word	0x00012bb5
   13258:	20002708 	.word	0x20002708
   1325c:	0001150d 	.word	0x0001150d
   13260:	00012d39 	.word	0x00012d39
   13264:	000134e5 	.word	0x000134e5
   13268:	00012b89 	.word	0x00012b89
   1326c:	0001149d 	.word	0x0001149d
   13270:	0001387d 	.word	0x0001387d
   13274:	00013585 	.word	0x00013585

00013278 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   13278:	b580      	push	{r7, lr}
   1327a:	b084      	sub	sp, #16
   1327c:	af00      	add	r7, sp, #0
   1327e:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   13280:	2052      	movs	r0, #82	; 0x52
   13282:	4b54      	ldr	r3, [pc, #336]	; (133d4 <_ZN22FlapperValveController18ResetValvePositionEv+0x15c>)
   13284:	4798      	blx	r3
   13286:	4603      	mov	r3, r0
   13288:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   1328a:	6878      	ldr	r0, [r7, #4]
   1328c:	4b52      	ldr	r3, [pc, #328]	; (133d8 <_ZN22FlapperValveController18ResetValvePositionEv+0x160>)
   1328e:	4798      	blx	r3
   13290:	4603      	mov	r3, r0
   13292:	2b00      	cmp	r3, #0
   13294:	f000 8099 	beq.w	133ca <_ZN22FlapperValveController18ResetValvePositionEv+0x152>
	{
		
		localSetpoint=currentMaximum;
   13298:	687b      	ldr	r3, [r7, #4]
   1329a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   1329e:	73bb      	strb	r3, [r7, #14]
		
		fv->SetEnable(false);
   132a0:	687b      	ldr	r3, [r7, #4]
   132a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132a4:	2100      	movs	r1, #0
   132a6:	4618      	mov	r0, r3
   132a8:	4b4c      	ldr	r3, [pc, #304]	; (133dc <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   132aa:	4798      	blx	r3
		fv->SetInvalidPosition(false);
   132ac:	687b      	ldr	r3, [r7, #4]
   132ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132b0:	2100      	movs	r1, #0
   132b2:	4618      	mov	r0, r3
   132b4:	4b4a      	ldr	r3, [pc, #296]	; (133e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
   132b6:	4798      	blx	r3
		fv->ClearMoveFault(false);
   132b8:	687b      	ldr	r3, [r7, #4]
   132ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132bc:	2100      	movs	r1, #0
   132be:	4618      	mov	r0, r3
   132c0:	4b48      	ldr	r3, [pc, #288]	; (133e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
   132c2:	4798      	blx	r3
		delay_ms(100);
   132c4:	2064      	movs	r0, #100	; 0x64
   132c6:	4b48      	ldr	r3, [pc, #288]	; (133e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x170>)
   132c8:	4798      	blx	r3
		if (fv->ReadActualPosition()>localSetpoint)
   132ca:	687b      	ldr	r3, [r7, #4]
   132cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132ce:	4618      	mov	r0, r3
   132d0:	4b46      	ldr	r3, [pc, #280]	; (133ec <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   132d2:	4798      	blx	r3
   132d4:	4603      	mov	r3, r0
   132d6:	461a      	mov	r2, r3
   132d8:	7bbb      	ldrb	r3, [r7, #14]
   132da:	429a      	cmp	r2, r3
   132dc:	bfcc      	ite	gt
   132de:	2301      	movgt	r3, #1
   132e0:	2300      	movle	r3, #0
   132e2:	b2db      	uxtb	r3, r3
   132e4:	2b00      	cmp	r3, #0
   132e6:	d006      	beq.n	132f6 <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			fv->SetDirection(true);
   132e8:	687b      	ldr	r3, [r7, #4]
   132ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132ec:	2101      	movs	r1, #1
   132ee:	4618      	mov	r0, r3
   132f0:	4b3f      	ldr	r3, [pc, #252]	; (133f0 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
   132f2:	4798      	blx	r3
   132f4:	e005      	b.n	13302 <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			fv->SetDirection(false);
   132f6:	687b      	ldr	r3, [r7, #4]
   132f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   132fa:	2100      	movs	r1, #0
   132fc:	4618      	mov	r0, r3
   132fe:	4b3c      	ldr	r3, [pc, #240]	; (133f0 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
   13300:	4798      	blx	r3
		}
		fv->SetInvalidPosition(true);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13306:	2101      	movs	r1, #1
   13308:	4618      	mov	r0, r3
   1330a:	4b35      	ldr	r3, [pc, #212]	; (133e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
   1330c:	4798      	blx	r3
		fv->ClearMoveFault(true);
   1330e:	687b      	ldr	r3, [r7, #4]
   13310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13312:	2101      	movs	r1, #1
   13314:	4618      	mov	r0, r3
   13316:	4b33      	ldr	r3, [pc, #204]	; (133e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
   13318:	4798      	blx	r3
		fv->WriteSetpoint(localSetpoint);
   1331a:	687b      	ldr	r3, [r7, #4]
   1331c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1331e:	7bba      	ldrb	r2, [r7, #14]
   13320:	4611      	mov	r1, r2
   13322:	4618      	mov	r0, r3
   13324:	4b33      	ldr	r3, [pc, #204]	; (133f4 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
   13326:	4798      	blx	r3
		

		currentPosition=fv->ReadActualPosition();
   13328:	687b      	ldr	r3, [r7, #4]
   1332a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1332c:	4618      	mov	r0, r3
   1332e:	4b2f      	ldr	r3, [pc, #188]	; (133ec <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   13330:	4798      	blx	r3
   13332:	4603      	mov	r3, r0
   13334:	461a      	mov	r2, r3
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
   1333c:	687b      	ldr	r3, [r7, #4]
   1333e:	2200      	movs	r2, #0
   13340:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValveTimeout),1000);
   13344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13348:	492b      	ldr	r1, [pc, #172]	; (133f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
   1334a:	482c      	ldr	r0, [pc, #176]	; (133fc <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
   1334c:	4b2c      	ldr	r3, [pc, #176]	; (13400 <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
   1334e:	4798      	blx	r3
		
		fv->SetEnable(true);
   13350:	687b      	ldr	r3, [r7, #4]
   13352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13354:	2101      	movs	r1, #1
   13356:	4618      	mov	r0, r3
   13358:	4b20      	ldr	r3, [pc, #128]	; (133dc <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   1335a:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   1335c:	687b      	ldr	r3, [r7, #4]
   1335e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   13362:	461a      	mov	r2, r3
   13364:	7bbb      	ldrb	r3, [r7, #14]
   13366:	1ad3      	subs	r3, r2, r3
   13368:	2b00      	cmp	r3, #0
   1336a:	bfb8      	it	lt
   1336c:	425b      	neglt	r3, r3
   1336e:	2b06      	cmp	r3, #6
   13370:	bfcc      	ite	gt
   13372:	2301      	movgt	r3, #1
   13374:	2300      	movle	r3, #0
   13376:	b2db      	uxtb	r3, r3
   13378:	461a      	mov	r2, r3
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   13380:	b2db      	uxtb	r3, r3
   13382:	f083 0301 	eor.w	r3, r3, #1
   13386:	b2db      	uxtb	r3, r3
   13388:	4013      	ands	r3, r2
   1338a:	2b00      	cmp	r3, #0
   1338c:	bf14      	ite	ne
   1338e:	2301      	movne	r3, #1
   13390:	2300      	moveq	r3, #0
   13392:	b2db      	uxtb	r3, r3
   13394:	2b00      	cmp	r3, #0
   13396:	d00d      	beq.n	133b4 <_ZN22FlapperValveController18ResetValvePositionEv+0x13c>

		{
			gpio_toggle_pin_level(LED0);
   13398:	2052      	movs	r0, #82	; 0x52
   1339a:	4b1a      	ldr	r3, [pc, #104]	; (13404 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   1339c:	4798      	blx	r3
			currentPosition=fv->ReadActualPosition();
   1339e:	687b      	ldr	r3, [r7, #4]
   133a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   133a2:	4618      	mov	r0, r3
   133a4:	4b11      	ldr	r3, [pc, #68]	; (133ec <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   133a6:	4798      	blx	r3
   133a8:	4603      	mov	r3, r0
   133aa:	461a      	mov	r2, r3
   133ac:	687b      	ldr	r3, [r7, #4]
   133ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   133b2:	e7d3      	b.n	1335c <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>

		}
		fv->SetEnable(false);
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   133b8:	2100      	movs	r1, #0
   133ba:	4618      	mov	r0, r3
   133bc:	4b07      	ldr	r3, [pc, #28]	; (133dc <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   133be:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   133c0:	7bfb      	ldrb	r3, [r7, #15]
   133c2:	4619      	mov	r1, r3
   133c4:	2052      	movs	r0, #82	; 0x52
   133c6:	4b10      	ldr	r3, [pc, #64]	; (13408 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   133c8:	4798      	blx	r3
	} 
	else
	{
	}
}
   133ca:	bf00      	nop
   133cc:	3710      	adds	r7, #16
   133ce:	46bd      	mov	sp, r7
   133d0:	bd80      	pop	{r7, pc}
   133d2:	bf00      	nop
   133d4:	00012b4d 	.word	0x00012b4d
   133d8:	00012e31 	.word	0x00012e31
   133dc:	00013e0d 	.word	0x00013e0d
   133e0:	00013f7d 	.word	0x00013f7d
   133e4:	00013f05 	.word	0x00013f05
   133e8:	00003ed5 	.word	0x00003ed5
   133ec:	0001402d 	.word	0x0001402d
   133f0:	00013e8d 	.word	0x00013e8d
   133f4:	00013ff5 	.word	0x00013ff5
   133f8:	00012bd5 	.word	0x00012bd5
   133fc:	20002708 	.word	0x20002708
   13400:	0001150d 	.word	0x0001150d
   13404:	00012b1d 	.word	0x00012b1d
   13408:	00012ae5 	.word	0x00012ae5

0001340c <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   1340c:	b580      	push	{r7, lr}
   1340e:	b082      	sub	sp, #8
   13410:	af00      	add	r7, sp, #0
   13412:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   13414:	687b      	ldr	r3, [r7, #4]
   13416:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   1341a:	2b00      	cmp	r3, #0
   1341c:	d014      	beq.n	13448 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   1341e:	687b      	ldr	r3, [r7, #4]
   13420:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   13424:	2b00      	cmp	r3, #0
   13426:	d003      	beq.n	13430 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   13428:	6878      	ldr	r0, [r7, #4]
   1342a:	4b0e      	ldr	r3, [pc, #56]	; (13464 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   1342c:	4798      	blx	r3
   1342e:	e013      	b.n	13458 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   13436:	4619      	mov	r1, r3
   13438:	6878      	ldr	r0, [r7, #4]
   1343a:	4b0b      	ldr	r3, [pc, #44]	; (13468 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   1343c:	4798      	blx	r3
			NBC_Activated=false;
   1343e:	687b      	ldr	r3, [r7, #4]
   13440:	2200      	movs	r2, #0
   13442:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
   13446:	e007      	b.n	13458 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   13448:	21ff      	movs	r1, #255	; 0xff
   1344a:	6878      	ldr	r0, [r7, #4]
   1344c:	4b06      	ldr	r3, [pc, #24]	; (13468 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   1344e:	4798      	blx	r3
			NBC_Activated=true;
   13450:	687b      	ldr	r3, [r7, #4]
   13452:	2201      	movs	r2, #1
   13454:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
   13458:	2300      	movs	r3, #0
	
}
   1345a:	4618      	mov	r0, r3
   1345c:	3708      	adds	r7, #8
   1345e:	46bd      	mov	sp, r7
   13460:	bd80      	pop	{r7, pc}
   13462:	bf00      	nop
   13464:	00013005 	.word	0x00013005
   13468:	000136d5 	.word	0x000136d5

0001346c <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   1346c:	b480      	push	{r7}
   1346e:	b083      	sub	sp, #12
   13470:	af00      	add	r7, sp, #0
   13472:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   13474:	687b      	ldr	r3, [r7, #4]
   13476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   1347a:	461a      	mov	r2, r3
   1347c:	687b      	ldr	r3, [r7, #4]
   1347e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   13482:	4013      	ands	r3, r2
   13484:	687a      	ldr	r2, [r7, #4]
   13486:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
   1348a:	4313      	orrs	r3, r2
   1348c:	2b00      	cmp	r3, #0
   1348e:	bf14      	ite	ne
   13490:	2301      	movne	r3, #1
   13492:	2300      	moveq	r3, #0
   13494:	b2da      	uxtb	r2, r3
   13496:	687b      	ldr	r3, [r7, #4]
   13498:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
   1349c:	687b      	ldr	r3, [r7, #4]
   1349e:	22ff      	movs	r2, #255	; 0xff
   134a0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
   134a4:	687b      	ldr	r3, [r7, #4]
   134a6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
   134aa:	4618      	mov	r0, r3
   134ac:	370c      	adds	r7, #12
   134ae:	46bd      	mov	sp, r7
   134b0:	bc80      	pop	{r7}
   134b2:	4770      	bx	lr

000134b4 <_ZN22FlapperValveController16SetRemoteNBCModeEb>:

bool FlapperValveController::SetRemoteNBCMode(bool st){
   134b4:	b480      	push	{r7}
   134b6:	b083      	sub	sp, #12
   134b8:	af00      	add	r7, sp, #0
   134ba:	6078      	str	r0, [r7, #4]
   134bc:	460b      	mov	r3, r1
   134be:	70fb      	strb	r3, [r7, #3]
	if (st!=NBC_Mode)
   134c0:	687b      	ldr	r3, [r7, #4]
   134c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   134c6:	78fa      	ldrb	r2, [r7, #3]
   134c8:	429a      	cmp	r2, r3
   134ca:	d003      	beq.n	134d4 <_ZN22FlapperValveController16SetRemoteNBCModeEb+0x20>
	{
		NBC_Remote=st;
   134cc:	687b      	ldr	r3, [r7, #4]
   134ce:	78fa      	ldrb	r2, [r7, #3]
   134d0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	} 
	else
	{
		
	}
	return NBC_Remote;
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
}
   134da:	4618      	mov	r0, r3
   134dc:	370c      	adds	r7, #12
   134de:	46bd      	mov	sp, r7
   134e0:	bc80      	pop	{r7}
   134e2:	4770      	bx	lr

000134e4 <_ZN22FlapperValveController9StopMotorEv>:


uint8_t	FlapperValveController::StopMotor(){
   134e4:	b580      	push	{r7, lr}
   134e6:	b082      	sub	sp, #8
   134e8:	af00      	add	r7, sp, #0
   134ea:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   134f0:	2100      	movs	r1, #0
   134f2:	4618      	mov	r0, r3
   134f4:	4b05      	ldr	r3, [pc, #20]	; (1350c <_ZN22FlapperValveController9StopMotorEv+0x28>)
   134f6:	4798      	blx	r3
	flapperValveIsMoving=false;
   134f8:	687b      	ldr	r3, [r7, #4]
   134fa:	2200      	movs	r2, #0
   134fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
   13500:	2300      	movs	r3, #0
}
   13502:	4618      	mov	r0, r3
   13504:	3708      	adds	r7, #8
   13506:	46bd      	mov	sp, r7
   13508:	bd80      	pop	{r7, pc}
   1350a:	bf00      	nop
   1350c:	00013e0d 	.word	0x00013e0d

00013510 <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
   13510:	b580      	push	{r7, lr}
   13512:	b082      	sub	sp, #8
   13514:	af00      	add	r7, sp, #0
   13516:	6078      	str	r0, [r7, #4]
		if (closing)
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   1351e:	2b00      	cmp	r3, #0
   13520:	d003      	beq.n	1352a <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	2200      	movs	r2, #0
   13526:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
   1352a:	6878      	ldr	r0, [r7, #4]
   1352c:	4b10      	ldr	r3, [pc, #64]	; (13570 <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
   1352e:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   13530:	4910      	ldr	r1, [pc, #64]	; (13574 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
   13532:	4811      	ldr	r0, [pc, #68]	; (13578 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
   13534:	4b11      	ldr	r3, [pc, #68]	; (1357c <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
   13536:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
   13538:	4911      	ldr	r1, [pc, #68]	; (13580 <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
   1353a:	480f      	ldr	r0, [pc, #60]	; (13578 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
   1353c:	4b0f      	ldr	r3, [pc, #60]	; (1357c <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
   1353e:	4798      	blx	r3
		timeoutFlapperValveController=false;
   13540:	687b      	ldr	r3, [r7, #4]
   13542:	2200      	movs	r2, #0
   13544:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   13548:	687b      	ldr	r3, [r7, #4]
   1354a:	2200      	movs	r2, #0
   1354c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	2200      	movs	r2, #0
   13554:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
   13558:	687b      	ldr	r3, [r7, #4]
   1355a:	2200      	movs	r2, #0
   1355c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	2200      	movs	r2, #0
   13564:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   13568:	bf00      	nop
   1356a:	3708      	adds	r7, #8
   1356c:	46bd      	mov	sp, r7
   1356e:	bd80      	pop	{r7, pc}
   13570:	000134e5 	.word	0x000134e5
   13574:	00012b89 	.word	0x00012b89
   13578:	20002708 	.word	0x20002708
   1357c:	0001149d 	.word	0x0001149d
   13580:	00012bb5 	.word	0x00012bb5

00013584 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   13584:	b580      	push	{r7, lr}
   13586:	b082      	sub	sp, #8
   13588:	af00      	add	r7, sp, #0
   1358a:	6078      	str	r0, [r7, #4]
		StopMotor();
   1358c:	6878      	ldr	r0, [r7, #4]
   1358e:	4b0d      	ldr	r3, [pc, #52]	; (135c4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   13590:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   13592:	490d      	ldr	r1, [pc, #52]	; (135c8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
   13594:	480d      	ldr	r0, [pc, #52]	; (135cc <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
   13596:	4b0e      	ldr	r3, [pc, #56]	; (135d0 <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
   13598:	4798      	blx	r3
		timeoutFlapperValveController=false;
   1359a:	687b      	ldr	r3, [r7, #4]
   1359c:	2200      	movs	r2, #0
   1359e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	2200      	movs	r2, #0
   135a6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
   135aa:	687b      	ldr	r3, [r7, #4]
   135ac:	2200      	movs	r2, #0
   135ae:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
   135b2:	687b      	ldr	r3, [r7, #4]
   135b4:	2201      	movs	r2, #1
   135b6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   135ba:	bf00      	nop
   135bc:	3708      	adds	r7, #8
   135be:	46bd      	mov	sp, r7
   135c0:	bd80      	pop	{r7, pc}
   135c2:	bf00      	nop
   135c4:	000134e5 	.word	0x000134e5
   135c8:	00012b89 	.word	0x00012b89
   135cc:	20002708 	.word	0x20002708
   135d0:	0001149d 	.word	0x0001149d

000135d4 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   135d4:	b580      	push	{r7, lr}
   135d6:	b084      	sub	sp, #16
   135d8:	af00      	add	r7, sp, #0
   135da:	6078      	str	r0, [r7, #4]
   135dc:	460b      	mov	r3, r1
   135de:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   135e0:	78fb      	ldrb	r3, [r7, #3]
   135e2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   135e6:	2b00      	cmp	r3, #0
   135e8:	dd0c      	ble.n	13604 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   135ea:	78fb      	ldrb	r3, [r7, #3]
   135ec:	43db      	mvns	r3, r3
   135ee:	009b      	lsls	r3, r3, #2
   135f0:	2b00      	cmp	r3, #0
   135f2:	da00      	bge.n	135f6 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   135f4:	33ff      	adds	r3, #255	; 0xff
   135f6:	121b      	asrs	r3, r3, #8
   135f8:	461a      	mov	r2, r3
   135fa:	4b10      	ldr	r3, [pc, #64]	; (1363c <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   135fc:	4610      	mov	r0, r2
   135fe:	4798      	blx	r3
   13600:	4603      	mov	r3, r0
   13602:	e00b      	b.n	1361c <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   13604:	78fb      	ldrb	r3, [r7, #3]
   13606:	3bff      	subs	r3, #255	; 0xff
   13608:	009b      	lsls	r3, r3, #2
   1360a:	2b00      	cmp	r3, #0
   1360c:	da00      	bge.n	13610 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   1360e:	33ff      	adds	r3, #255	; 0xff
   13610:	121b      	asrs	r3, r3, #8
   13612:	461a      	mov	r2, r3
   13614:	4b09      	ldr	r3, [pc, #36]	; (1363c <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   13616:	4610      	mov	r0, r2
   13618:	4798      	blx	r3
   1361a:	4603      	mov	r3, r0
   1361c:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   1361e:	4b08      	ldr	r3, [pc, #32]	; (13640 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   13620:	68f8      	ldr	r0, [r7, #12]
   13622:	4798      	blx	r3
   13624:	4603      	mov	r3, r0
   13626:	b2da      	uxtb	r2, r3
   13628:	687b      	ldr	r3, [r7, #4]
   1362a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
   1362e:	687b      	ldr	r3, [r7, #4]
   13630:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
   13634:	4618      	mov	r0, r3
   13636:	3710      	adds	r7, #16
   13638:	46bd      	mov	sp, r7
   1363a:	bd80      	pop	{r7, pc}
   1363c:	00018cb1 	.word	0x00018cb1
   13640:	000190e5 	.word	0x000190e5

00013644 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   13644:	b580      	push	{r7, lr}
   13646:	b082      	sub	sp, #8
   13648:	af00      	add	r7, sp, #0
   1364a:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
   1364c:	687b      	ldr	r3, [r7, #4]
   1364e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   13654:	2b00      	cmp	r3, #0
   13656:	d008      	beq.n	1366a <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1365c:	2100      	movs	r1, #0
   1365e:	4618      	mov	r0, r3
   13660:	4b09      	ldr	r3, [pc, #36]	; (13688 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   13662:	4798      	blx	r3
		delay_ms(10);
   13664:	200a      	movs	r0, #10
   13666:	4b09      	ldr	r3, [pc, #36]	; (1368c <_ZN22FlapperValveController10StartMotorEv+0x48>)
   13668:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
   1366a:	687b      	ldr	r3, [r7, #4]
   1366c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1366e:	2101      	movs	r1, #1
   13670:	4618      	mov	r0, r3
   13672:	4b05      	ldr	r3, [pc, #20]	; (13688 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   13674:	4798      	blx	r3
	flapperValveIsMoving=true;
   13676:	687b      	ldr	r3, [r7, #4]
   13678:	2201      	movs	r2, #1
   1367a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
   1367e:	2300      	movs	r3, #0
}
   13680:	4618      	mov	r0, r3
   13682:	3708      	adds	r7, #8
   13684:	46bd      	mov	sp, r7
   13686:	bd80      	pop	{r7, pc}
   13688:	00013e0d 	.word	0x00013e0d
   1368c:	00003ed5 	.word	0x00003ed5

00013690 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   13690:	b580      	push	{r7, lr}
   13692:	b082      	sub	sp, #8
   13694:	af00      	add	r7, sp, #0
   13696:	6078      	str	r0, [r7, #4]
	StopMotor();
   13698:	6878      	ldr	r0, [r7, #4]
   1369a:	4b0d      	ldr	r3, [pc, #52]	; (136d0 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   1369c:	4798      	blx	r3
	timeoutKeepControlling=false;
   1369e:	687b      	ldr	r3, [r7, #4]
   136a0:	2200      	movs	r2, #0
   136a2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
   136a6:	687b      	ldr	r3, [r7, #4]
   136a8:	2200      	movs	r2, #0
   136aa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
   136ae:	687b      	ldr	r3, [r7, #4]
   136b0:	2200      	movs	r2, #0
   136b2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
   136b6:	687b      	ldr	r3, [r7, #4]
   136b8:	2200      	movs	r2, #0
   136ba:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
   136be:	687b      	ldr	r3, [r7, #4]
   136c0:	2200      	movs	r2, #0
   136c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
   136c6:	2300      	movs	r3, #0
}
   136c8:	4618      	mov	r0, r3
   136ca:	3708      	adds	r7, #8
   136cc:	46bd      	mov	sp, r7
   136ce:	bd80      	pop	{r7, pc}
   136d0:	000134e5 	.word	0x000134e5

000136d4 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   136d4:	b580      	push	{r7, lr}
   136d6:	b082      	sub	sp, #8
   136d8:	af00      	add	r7, sp, #0
   136da:	6078      	str	r0, [r7, #4]
   136dc:	460b      	mov	r3, r1
   136de:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   136e0:	78fb      	ldrb	r3, [r7, #3]
   136e2:	4619      	mov	r1, r3
   136e4:	6878      	ldr	r0, [r7, #4]
   136e6:	4b25      	ldr	r3, [pc, #148]	; (1377c <_ZN22FlapperValveController16StartControllingEh+0xa8>)
   136e8:	4798      	blx	r3
   136ea:	4603      	mov	r3, r0
   136ec:	461a      	mov	r2, r3
   136ee:	687b      	ldr	r3, [r7, #4]
   136f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   136fa:	4619      	mov	r1, r3
   136fc:	6878      	ldr	r0, [r7, #4]
   136fe:	4b20      	ldr	r3, [pc, #128]	; (13780 <_ZN22FlapperValveController16StartControllingEh+0xac>)
   13700:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   13702:	687b      	ldr	r3, [r7, #4]
   13704:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   13708:	4b1e      	ldr	r3, [pc, #120]	; (13784 <_ZN22FlapperValveController16StartControllingEh+0xb0>)
   1370a:	4610      	mov	r0, r2
   1370c:	4798      	blx	r3
   1370e:	4602      	mov	r2, r0
   13710:	687b      	ldr	r3, [r7, #4]
   13712:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
   13716:	687b      	ldr	r3, [r7, #4]
   13718:	2200      	movs	r2, #0
   1371a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   1371e:	687b      	ldr	r3, [r7, #4]
   13720:	2200      	movs	r2, #0
   13722:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	2200      	movs	r2, #0
   1372a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
   1372e:	687b      	ldr	r3, [r7, #4]
   13730:	2201      	movs	r2, #1
   13732:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
   13736:	687b      	ldr	r3, [r7, #4]
   13738:	2200      	movs	r2, #0
   1373a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT);
   1373e:	f242 7210 	movw	r2, #10000	; 0x2710
   13742:	4911      	ldr	r1, [pc, #68]	; (13788 <_ZN22FlapperValveController16StartControllingEh+0xb4>)
   13744:	4811      	ldr	r0, [pc, #68]	; (1378c <_ZN22FlapperValveController16StartControllingEh+0xb8>)
   13746:	4b12      	ldr	r3, [pc, #72]	; (13790 <_ZN22FlapperValveController16StartControllingEh+0xbc>)
   13748:	4798      	blx	r3
		isControlling=true;
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	2201      	movs	r2, #1
   1374e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   13752:	6878      	ldr	r0, [r7, #4]
   13754:	4b0f      	ldr	r3, [pc, #60]	; (13794 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   13756:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   13758:	6878      	ldr	r0, [r7, #4]
   1375a:	4b0f      	ldr	r3, [pc, #60]	; (13798 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   1375c:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   1375e:	687b      	ldr	r3, [r7, #4]
   13760:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13764:	b2db      	uxtb	r3, r3
   13766:	2b00      	cmp	r3, #0
   13768:	d003      	beq.n	13772 <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
   1376a:	687b      	ldr	r3, [r7, #4]
   1376c:	2201      	movs	r2, #1
   1376e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
   13772:	2300      	movs	r3, #0
	
}
   13774:	4618      	mov	r0, r3
   13776:	3708      	adds	r7, #8
   13778:	46bd      	mov	sp, r7
   1377a:	bd80      	pop	{r7, pc}
   1377c:	0001379d 	.word	0x0001379d
   13780:	000135d5 	.word	0x000135d5
   13784:	00018ca9 	.word	0x00018ca9
   13788:	00012b89 	.word	0x00012b89
   1378c:	20002708 	.word	0x20002708
   13790:	0001150d 	.word	0x0001150d
   13794:	00012d5d 	.word	0x00012d5d
   13798:	00013005 	.word	0x00013005

0001379c <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   1379c:	b580      	push	{r7, lr}
   1379e:	b082      	sub	sp, #8
   137a0:	af00      	add	r7, sp, #0
   137a2:	6078      	str	r0, [r7, #4]
   137a4:	460b      	mov	r3, r1
   137a6:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   137a8:	6878      	ldr	r0, [r7, #4]
   137aa:	4b2a      	ldr	r3, [pc, #168]	; (13854 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   137ac:	4798      	blx	r3
   137ae:	4603      	mov	r3, r0
   137b0:	2b00      	cmp	r3, #0
   137b2:	d004      	beq.n	137be <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   137b4:	687b      	ldr	r3, [r7, #4]
   137b6:	78fa      	ldrb	r2, [r7, #3]
   137b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   137bc:	e043      	b.n	13846 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   137be:	687b      	ldr	r3, [r7, #4]
   137c0:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   137c4:	2b00      	cmp	r3, #0
   137c6:	d01f      	beq.n	13808 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   137c8:	687b      	ldr	r3, [r7, #4]
   137ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   137ce:	43db      	mvns	r3, r3
   137d0:	b2da      	uxtb	r2, r3
   137d2:	687b      	ldr	r3, [r7, #4]
   137d4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
   137d8:	78fb      	ldrb	r3, [r7, #3]
   137da:	687a      	ldr	r2, [r7, #4]
   137dc:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   137e0:	4293      	cmp	r3, r2
   137e2:	dd0c      	ble.n	137fe <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   137e4:	687b      	ldr	r3, [r7, #4]
   137e6:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   137ea:	687b      	ldr	r3, [r7, #4]
   137ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
   137f0:	687b      	ldr	r3, [r7, #4]
   137f2:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   137f6:	687b      	ldr	r3, [r7, #4]
   137f8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   137fc:	e023      	b.n	13846 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   137fe:	687b      	ldr	r3, [r7, #4]
   13800:	78fa      	ldrb	r2, [r7, #3]
   13802:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   13806:	e01e      	b.n	13846 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   1380e:	43db      	mvns	r3, r3
   13810:	b2da      	uxtb	r2, r3
   13812:	687b      	ldr	r3, [r7, #4]
   13814:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
   13818:	78fb      	ldrb	r3, [r7, #3]
   1381a:	687a      	ldr	r2, [r7, #4]
   1381c:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
   13820:	4293      	cmp	r3, r2
   13822:	dd0c      	ble.n	1383e <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   13824:	687b      	ldr	r3, [r7, #4]
   13826:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
   13830:	687b      	ldr	r3, [r7, #4]
   13832:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   13836:	687b      	ldr	r3, [r7, #4]
   13838:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   1383c:	e003      	b.n	13846 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	78fa      	ldrb	r2, [r7, #3]
   13842:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
   13846:	687b      	ldr	r3, [r7, #4]
   13848:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
   1384c:	4618      	mov	r0, r3
   1384e:	3708      	adds	r7, #8
   13850:	46bd      	mov	sp, r7
   13852:	bd80      	pop	{r7, pc}
   13854:	0001346d 	.word	0x0001346d

00013858 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=fv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   13858:	b580      	push	{r7, lr}
   1385a:	b082      	sub	sp, #8
   1385c:	af00      	add	r7, sp, #0
   1385e:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   13866:	4619      	mov	r1, r3
   13868:	6878      	ldr	r0, [r7, #4]
   1386a:	4b03      	ldr	r3, [pc, #12]	; (13878 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   1386c:	4798      	blx	r3
   1386e:	4603      	mov	r3, r0
	
}
   13870:	4618      	mov	r0, r3
   13872:	3708      	adds	r7, #8
   13874:	46bd      	mov	sp, r7
   13876:	bd80      	pop	{r7, pc}
   13878:	000136d5 	.word	0x000136d5

0001387c <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   1387c:	b580      	push	{r7, lr}
   1387e:	b082      	sub	sp, #8
   13880:	af00      	add	r7, sp, #0
   13882:	6078      	str	r0, [r7, #4]
   13884:	460b      	mov	r3, r1
   13886:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   13888:	687b      	ldr	r3, [r7, #4]
   1388a:	2200      	movs	r2, #0
   1388c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   13890:	687b      	ldr	r3, [r7, #4]
   13892:	2201      	movs	r2, #1
   13894:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   13898:	6878      	ldr	r0, [r7, #4]
   1389a:	4b05      	ldr	r3, [pc, #20]	; (138b0 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   1389c:	4798      	blx	r3
		keepControlling=false;
   1389e:	687b      	ldr	r3, [r7, #4]
   138a0:	2200      	movs	r2, #0
   138a2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
   138a6:	2300      	movs	r3, #0
	
}
   138a8:	4618      	mov	r0, r3
   138aa:	3708      	adds	r7, #8
   138ac:	46bd      	mov	sp, r7
   138ae:	bd80      	pop	{r7, pc}
   138b0:	00012d5d 	.word	0x00012d5d

000138b4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   138b4:	b590      	push	{r4, r7, lr}
   138b6:	b085      	sub	sp, #20
   138b8:	af00      	add	r7, sp, #0
   138ba:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
   138bc:	68fb      	ldr	r3, [r7, #12]
   138be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   138c0:	4618      	mov	r0, r3
   138c2:	4b2f      	ldr	r3, [pc, #188]	; (13980 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
   138c4:	4798      	blx	r3
   138c6:	4603      	mov	r3, r0
   138c8:	461a      	mov	r2, r3
   138ca:	68fb      	ldr	r3, [r7, #12]
   138cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
   138d0:	68fb      	ldr	r3, [r7, #12]
   138d2:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   138d6:	68fb      	ldr	r3, [r7, #12]
   138d8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
   138dc:	68fb      	ldr	r3, [r7, #12]
   138de:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   138e2:	68fb      	ldr	r3, [r7, #12]
   138e4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=fv->ReadStatusInputs();
   138e8:	68fb      	ldr	r3, [r7, #12]
   138ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   138ec:	68fc      	ldr	r4, [r7, #12]
   138ee:	463b      	mov	r3, r7
   138f0:	4611      	mov	r1, r2
   138f2:	4618      	mov	r0, r3
   138f4:	4b23      	ldr	r3, [pc, #140]	; (13984 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
   138f6:	4798      	blx	r3
   138f8:	f104 0380 	add.w	r3, r4, #128	; 0x80
   138fc:	463a      	mov	r2, r7
   138fe:	6810      	ldr	r0, [r2, #0]
   13900:	6018      	str	r0, [r3, #0]
   13902:	8892      	ldrh	r2, [r2, #4]
   13904:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
   13906:	68fb      	ldr	r3, [r7, #12]
   13908:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   1390a:	68fc      	ldr	r4, [r7, #12]
   1390c:	463b      	mov	r3, r7
   1390e:	4611      	mov	r1, r2
   13910:	4618      	mov	r0, r3
   13912:	4b1d      	ldr	r3, [pc, #116]	; (13988 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
   13914:	4798      	blx	r3
   13916:	f104 0386 	add.w	r3, r4, #134	; 0x86
   1391a:	463a      	mov	r2, r7
   1391c:	6811      	ldr	r1, [r2, #0]
   1391e:	6852      	ldr	r2, [r2, #4]
   13920:	6019      	str	r1, [r3, #0]
   13922:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   13924:	68fb      	ldr	r3, [r7, #12]
   13926:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1392a:	b2da      	uxtb	r2, r3
   1392c:	68fb      	ldr	r3, [r7, #12]
   1392e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
   13932:	68fb      	ldr	r3, [r7, #12]
   13934:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
   13938:	68fb      	ldr	r3, [r7, #12]
   1393a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   1393e:	68fb      	ldr	r3, [r7, #12]
   13940:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   13944:	68fb      	ldr	r3, [r7, #12]
   13946:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	if (standAloneActivated)
   1394a:	68fb      	ldr	r3, [r7, #12]
   1394c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   13950:	2b00      	cmp	r3, #0
   13952:	d008      	beq.n	13966 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   13954:	68fb      	ldr	r3, [r7, #12]
   13956:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   1395a:	43db      	mvns	r3, r3
   1395c:	b2da      	uxtb	r2, r3
   1395e:	68fb      	ldr	r3, [r7, #12]
   13960:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
   13964:	e007      	b.n	13976 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   13966:	68fb      	ldr	r3, [r7, #12]
   13968:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   1396c:	43db      	mvns	r3, r3
   1396e:	b2da      	uxtb	r2, r3
   13970:	68fb      	ldr	r3, [r7, #12]
   13972:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
}
   13976:	bf00      	nop
   13978:	3714      	adds	r7, #20
   1397a:	46bd      	mov	sp, r7
   1397c:	bd90      	pop	{r4, r7, pc}
   1397e:	bf00      	nop
   13980:	0001402d 	.word	0x0001402d
   13984:	00013db1 	.word	0x00013db1
   13988:	00013d55 	.word	0x00013d55

0001398c <_ZN22FlapperValveController18GetCurrentPositionEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
   1398c:	b580      	push	{r7, lr}
   1398e:	b082      	sub	sp, #8
   13990:	af00      	add	r7, sp, #0
   13992:	6078      	str	r0, [r7, #4]
	return fv->ReadActualPosition();
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13998:	4618      	mov	r0, r3
   1399a:	4b03      	ldr	r3, [pc, #12]	; (139a8 <_ZN22FlapperValveController18GetCurrentPositionEv+0x1c>)
   1399c:	4798      	blx	r3
   1399e:	4603      	mov	r3, r0
}
   139a0:	4618      	mov	r0, r3
   139a2:	3708      	adds	r7, #8
   139a4:	46bd      	mov	sp, r7
   139a6:	bd80      	pop	{r7, pc}
   139a8:	0001402d 	.word	0x0001402d

000139ac <_ZN22FlapperValveController8SelftestEv>:
bool	FlapperValveController::Selftest(void){
   139ac:	b580      	push	{r7, lr}
   139ae:	b084      	sub	sp, #16
   139b0:	af00      	add	r7, sp, #0
   139b2:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   139b4:	23b4      	movs	r3, #180	; 0xb4
   139b6:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	4a4d      	ldr	r2, [pc, #308]	; (13af0 <_ZN22FlapperValveController8SelftestEv+0x144>)
   139bc:	33bf      	adds	r3, #191	; 0xbf
   139be:	8812      	ldrh	r2, [r2, #0]
   139c0:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   139c2:	6878      	ldr	r0, [r7, #4]
   139c4:	4b4b      	ldr	r3, [pc, #300]	; (13af4 <_ZN22FlapperValveController8SelftestEv+0x148>)
   139c6:	4798      	blx	r3
	fv->SetEnable(false);
   139c8:	687b      	ldr	r3, [r7, #4]
   139ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   139cc:	2100      	movs	r1, #0
   139ce:	4618      	mov	r0, r3
   139d0:	4b49      	ldr	r3, [pc, #292]	; (13af8 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   139d2:	4798      	blx	r3
	fv->SetInvalidPosition(false);
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   139d8:	2100      	movs	r1, #0
   139da:	4618      	mov	r0, r3
   139dc:	4b47      	ldr	r3, [pc, #284]	; (13afc <_ZN22FlapperValveController8SelftestEv+0x150>)
   139de:	4798      	blx	r3
	fv->ClearMoveFault(false);
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   139e4:	2100      	movs	r1, #0
   139e6:	4618      	mov	r0, r3
   139e8:	4b45      	ldr	r3, [pc, #276]	; (13b00 <_ZN22FlapperValveController8SelftestEv+0x154>)
   139ea:	4798      	blx	r3
	delay_ms(10);
   139ec:	200a      	movs	r0, #10
   139ee:	4b45      	ldr	r3, [pc, #276]	; (13b04 <_ZN22FlapperValveController8SelftestEv+0x158>)
   139f0:	4798      	blx	r3
	fv->ClearMoveFault(true);
   139f2:	687b      	ldr	r3, [r7, #4]
   139f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   139f6:	2101      	movs	r1, #1
   139f8:	4618      	mov	r0, r3
   139fa:	4b41      	ldr	r3, [pc, #260]	; (13b00 <_ZN22FlapperValveController8SelftestEv+0x154>)
   139fc:	4798      	blx	r3
	fv->WriteSetpoint(localSetpoint);
   139fe:	687b      	ldr	r3, [r7, #4]
   13a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a02:	7bba      	ldrb	r2, [r7, #14]
   13a04:	4611      	mov	r1, r2
   13a06:	4618      	mov	r0, r3
   13a08:	4b3f      	ldr	r3, [pc, #252]	; (13b08 <_ZN22FlapperValveController8SelftestEv+0x15c>)
   13a0a:	4798      	blx	r3
	fv->SetDirection(false);
   13a0c:	687b      	ldr	r3, [r7, #4]
   13a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a10:	2100      	movs	r1, #0
   13a12:	4618      	mov	r0, r3
   13a14:	4b3d      	ldr	r3, [pc, #244]	; (13b0c <_ZN22FlapperValveController8SelftestEv+0x160>)
   13a16:	4798      	blx	r3
	if (fv->ReadActualPosition()>localSetpoint)
   13a18:	687b      	ldr	r3, [r7, #4]
   13a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a1c:	4618      	mov	r0, r3
   13a1e:	4b3c      	ldr	r3, [pc, #240]	; (13b10 <_ZN22FlapperValveController8SelftestEv+0x164>)
   13a20:	4798      	blx	r3
   13a22:	4603      	mov	r3, r0
   13a24:	461a      	mov	r2, r3
   13a26:	7bbb      	ldrb	r3, [r7, #14]
   13a28:	429a      	cmp	r2, r3
   13a2a:	bfcc      	ite	gt
   13a2c:	2301      	movgt	r3, #1
   13a2e:	2300      	movle	r3, #0
   13a30:	b2db      	uxtb	r3, r3
   13a32:	2b00      	cmp	r3, #0
   13a34:	d006      	beq.n	13a44 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		fv->SetDirection(true);
   13a36:	687b      	ldr	r3, [r7, #4]
   13a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a3a:	2101      	movs	r1, #1
   13a3c:	4618      	mov	r0, r3
   13a3e:	4b33      	ldr	r3, [pc, #204]	; (13b0c <_ZN22FlapperValveController8SelftestEv+0x160>)
   13a40:	4798      	blx	r3
   13a42:	e005      	b.n	13a50 <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		fv->SetDirection(false);
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a48:	2100      	movs	r1, #0
   13a4a:	4618      	mov	r0, r3
   13a4c:	4b2f      	ldr	r3, [pc, #188]	; (13b0c <_ZN22FlapperValveController8SelftestEv+0x160>)
   13a4e:	4798      	blx	r3
	}
	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),10000);
   13a50:	f242 7210 	movw	r2, #10000	; 0x2710
   13a54:	492f      	ldr	r1, [pc, #188]	; (13b14 <_ZN22FlapperValveController8SelftestEv+0x168>)
   13a56:	4830      	ldr	r0, [pc, #192]	; (13b18 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   13a58:	4b30      	ldr	r3, [pc, #192]	; (13b1c <_ZN22FlapperValveController8SelftestEv+0x170>)
   13a5a:	4798      	blx	r3
	fv->SetEnable(true);
   13a5c:	687b      	ldr	r3, [r7, #4]
   13a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a60:	2101      	movs	r1, #1
   13a62:	4618      	mov	r0, r3
   13a64:	4b24      	ldr	r3, [pc, #144]	; (13af8 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   13a66:	4798      	blx	r3

	localPosition=fv->ReadActualPosition();
   13a68:	687b      	ldr	r3, [r7, #4]
   13a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13a6c:	4618      	mov	r0, r3
   13a6e:	4b28      	ldr	r3, [pc, #160]	; (13b10 <_ZN22FlapperValveController8SelftestEv+0x164>)
   13a70:	4798      	blx	r3
   13a72:	4603      	mov	r3, r0
   13a74:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   13a76:	687b      	ldr	r3, [r7, #4]
   13a78:	2200      	movs	r2, #0
   13a7a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
   13a7e:	7bfa      	ldrb	r2, [r7, #15]
   13a80:	7bbb      	ldrb	r3, [r7, #14]
   13a82:	1ad3      	subs	r3, r2, r3
   13a84:	2b00      	cmp	r3, #0
   13a86:	bfb8      	it	lt
   13a88:	425b      	neglt	r3, r3
   13a8a:	2b06      	cmp	r3, #6
   13a8c:	bfcc      	ite	gt
   13a8e:	2301      	movgt	r3, #1
   13a90:	2300      	movle	r3, #0
   13a92:	b2db      	uxtb	r3, r3
   13a94:	461a      	mov	r2, r3
   13a96:	687b      	ldr	r3, [r7, #4]
   13a98:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13a9c:	b2db      	uxtb	r3, r3
   13a9e:	f083 0301 	eor.w	r3, r3, #1
   13aa2:	b2db      	uxtb	r3, r3
   13aa4:	4013      	ands	r3, r2
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	bf14      	ite	ne
   13aaa:	2301      	movne	r3, #1
   13aac:	2300      	moveq	r3, #0
   13aae:	b2db      	uxtb	r3, r3
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	d007      	beq.n	13ac4 <_ZN22FlapperValveController8SelftestEv+0x118>

	{

		localPosition=fv->ReadActualPosition();
   13ab4:	687b      	ldr	r3, [r7, #4]
   13ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13ab8:	4618      	mov	r0, r3
   13aba:	4b15      	ldr	r3, [pc, #84]	; (13b10 <_ZN22FlapperValveController8SelftestEv+0x164>)
   13abc:	4798      	blx	r3
   13abe:	4603      	mov	r3, r0
   13ac0:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
   13ac2:	e7dc      	b.n	13a7e <_ZN22FlapperValveController8SelftestEv+0xd2>

	}
	hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   13ac4:	4913      	ldr	r1, [pc, #76]	; (13b14 <_ZN22FlapperValveController8SelftestEv+0x168>)
   13ac6:	4814      	ldr	r0, [pc, #80]	; (13b18 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   13ac8:	4b15      	ldr	r3, [pc, #84]	; (13b20 <_ZN22FlapperValveController8SelftestEv+0x174>)
   13aca:	4798      	blx	r3
	fv->SetEnable(false);
   13acc:	687b      	ldr	r3, [r7, #4]
   13ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13ad0:	2100      	movs	r1, #0
   13ad2:	4618      	mov	r0, r3
   13ad4:	4b08      	ldr	r3, [pc, #32]	; (13af8 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   13ad6:	4798      	blx	r3
	return !timeoutFlapperValveController;
   13ad8:	687b      	ldr	r3, [r7, #4]
   13ada:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13ade:	b2db      	uxtb	r3, r3
   13ae0:	f083 0301 	eor.w	r3, r3, #1
   13ae4:	b2db      	uxtb	r3, r3
}
   13ae6:	4618      	mov	r0, r3
   13ae8:	3710      	adds	r7, #16
   13aea:	46bd      	mov	sp, r7
   13aec:	bd80      	pop	{r7, pc}
   13aee:	bf00      	nop
   13af0:	0001a984 	.word	0x0001a984
   13af4:	000138b5 	.word	0x000138b5
   13af8:	00013e0d 	.word	0x00013e0d
   13afc:	00013f7d 	.word	0x00013f7d
   13b00:	00013f05 	.word	0x00013f05
   13b04:	00003ed5 	.word	0x00003ed5
   13b08:	00013ff5 	.word	0x00013ff5
   13b0c:	00013e8d 	.word	0x00013e8d
   13b10:	0001402d 	.word	0x0001402d
   13b14:	00012b89 	.word	0x00012b89
   13b18:	20002708 	.word	0x20002708
   13b1c:	0001150d 	.word	0x0001150d
   13b20:	0001149d 	.word	0x0001149d

00013b24 <_Z41__static_initialization_and_destruction_0ii>:

   13b24:	b580      	push	{r7, lr}
   13b26:	b082      	sub	sp, #8
   13b28:	af00      	add	r7, sp, #0
   13b2a:	6078      	str	r0, [r7, #4]
   13b2c:	6039      	str	r1, [r7, #0]
   13b2e:	687b      	ldr	r3, [r7, #4]
   13b30:	2b01      	cmp	r3, #1
   13b32:	d115      	bne.n	13b60 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   13b34:	683b      	ldr	r3, [r7, #0]
   13b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b3a:	4293      	cmp	r3, r2
   13b3c:	d110      	bne.n	13b60 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static SingleFlapperValve_Class fvStatic(0);
   13b3e:	2100      	movs	r1, #0
   13b40:	4809      	ldr	r0, [pc, #36]	; (13b68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13b42:	4b0a      	ldr	r3, [pc, #40]	; (13b6c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13b44:	4798      	blx	r3
   13b46:	4a0a      	ldr	r2, [pc, #40]	; (13b70 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   13b48:	490a      	ldr	r1, [pc, #40]	; (13b74 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   13b4a:	4807      	ldr	r0, [pc, #28]	; (13b68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13b4c:	4b0a      	ldr	r3, [pc, #40]	; (13b78 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   13b4e:	4798      	blx	r3
   13b50:	480a      	ldr	r0, [pc, #40]	; (13b7c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13b52:	4b0b      	ldr	r3, [pc, #44]	; (13b80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   13b54:	4798      	blx	r3
   13b56:	4a06      	ldr	r2, [pc, #24]	; (13b70 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   13b58:	490a      	ldr	r1, [pc, #40]	; (13b84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13b5a:	4808      	ldr	r0, [pc, #32]	; (13b7c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13b5c:	4b06      	ldr	r3, [pc, #24]	; (13b78 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   13b5e:	4798      	blx	r3
   13b60:	bf00      	nop
   13b62:	3708      	adds	r7, #8
   13b64:	46bd      	mov	sp, r7
   13b66:	bd80      	pop	{r7, pc}
   13b68:	20002a4c 	.word	0x20002a4c
   13b6c:	00013b9d 	.word	0x00013b9d
   13b70:	20000000 	.word	0x20000000
   13b74:	00013c39 	.word	0x00013c39
   13b78:	000170d1 	.word	0x000170d1
   13b7c:	20002ac0 	.word	0x20002ac0
   13b80:	00012bf5 	.word	0x00012bf5
   13b84:	00012c89 	.word	0x00012c89

00013b88 <_GLOBAL__sub_I_ptrFlapperValveController>:
   13b88:	b580      	push	{r7, lr}
   13b8a:	af00      	add	r7, sp, #0
   13b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13b90:	2001      	movs	r0, #1
   13b92:	4b01      	ldr	r3, [pc, #4]	; (13b98 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   13b94:	4798      	blx	r3
   13b96:	bd80      	pop	{r7, pc}
   13b98:	00013b25 	.word	0x00013b25

00013b9c <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
   13b9c:	b580      	push	{r7, lr}
   13b9e:	b082      	sub	sp, #8
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	6078      	str	r0, [r7, #4]
   13ba4:	460b      	mov	r3, r1
   13ba6:	70fb      	strb	r3, [r7, #3]
   13ba8:	687b      	ldr	r3, [r7, #4]
   13baa:	4618      	mov	r0, r3
   13bac:	4b0c      	ldr	r3, [pc, #48]	; (13be0 <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
   13bae:	4798      	blx	r3
{	
	valveID=_iD;
   13bb0:	687b      	ldr	r3, [r7, #4]
   13bb2:	78fa      	ldrb	r2, [r7, #3]
   13bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   13bb8:	687b      	ldr	r3, [r7, #4]
   13bba:	4a0a      	ldr	r2, [pc, #40]	; (13be4 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
   13bbc:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   13bbe:	687b      	ldr	r3, [r7, #4]
   13bc0:	2200      	movs	r2, #0
   13bc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   13bc6:	4a08      	ldr	r2, [pc, #32]	; (13be8 <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	6013      	str	r3, [r2, #0]
	isOK=false;
   13bcc:	687b      	ldr	r3, [r7, #4]
   13bce:	2200      	movs	r2, #0
   13bd0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	4618      	mov	r0, r3
   13bd8:	3708      	adds	r7, #8
   13bda:	46bd      	mov	sp, r7
   13bdc:	bd80      	pop	{r7, pc}
   13bde:	bf00      	nop
   13be0:	000157d5 	.word	0x000157d5
   13be4:	20002b88 	.word	0x20002b88
   13be8:	20002b84 	.word	0x20002b84

00013bec <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   13bec:	b580      	push	{r7, lr}
   13bee:	b082      	sub	sp, #8
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	6078      	str	r0, [r7, #4]
   13bf4:	687b      	ldr	r3, [r7, #4]
   13bf6:	4618      	mov	r0, r3
   13bf8:	4b0c      	ldr	r3, [pc, #48]	; (13c2c <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   13bfa:	4798      	blx	r3
{
	valveID=0;
   13bfc:	687b      	ldr	r3, [r7, #4]
   13bfe:	2200      	movs	r2, #0
   13c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	4a0a      	ldr	r2, [pc, #40]	; (13c30 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   13c08:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   13c0a:	687b      	ldr	r3, [r7, #4]
   13c0c:	2200      	movs	r2, #0
   13c0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   13c12:	4a08      	ldr	r2, [pc, #32]	; (13c34 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   13c14:	687b      	ldr	r3, [r7, #4]
   13c16:	6013      	str	r3, [r2, #0]
	isOK=false;
   13c18:	687b      	ldr	r3, [r7, #4]
   13c1a:	2200      	movs	r2, #0
   13c1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   13c20:	687b      	ldr	r3, [r7, #4]
   13c22:	4618      	mov	r0, r3
   13c24:	3708      	adds	r7, #8
   13c26:	46bd      	mov	sp, r7
   13c28:	bd80      	pop	{r7, pc}
   13c2a:	bf00      	nop
   13c2c:	000157d5 	.word	0x000157d5
   13c30:	20002b88 	.word	0x20002b88
   13c34:	20002b84 	.word	0x20002b84

00013c38 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   13c38:	b580      	push	{r7, lr}
   13c3a:	b082      	sub	sp, #8
   13c3c:	af00      	add	r7, sp, #0
   13c3e:	6078      	str	r0, [r7, #4]
   13c40:	687b      	ldr	r3, [r7, #4]
   13c42:	4618      	mov	r0, r3
   13c44:	4b03      	ldr	r3, [pc, #12]	; (13c54 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   13c46:	4798      	blx	r3
{
} //~FlapperValve_Class
   13c48:	687b      	ldr	r3, [r7, #4]
   13c4a:	4618      	mov	r0, r3
   13c4c:	3708      	adds	r7, #8
   13c4e:	46bd      	mov	sp, r7
   13c50:	bd80      	pop	{r7, pc}
   13c52:	bf00      	nop
   13c54:	000157e9 	.word	0x000157e9

00013c58 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   13c58:	b580      	push	{r7, lr}
   13c5a:	b082      	sub	sp, #8
   13c5c:	af00      	add	r7, sp, #0
   13c5e:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13c64:	4618      	mov	r0, r3
   13c66:	4b19      	ldr	r3, [pc, #100]	; (13ccc <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
   13c68:	4798      	blx	r3

		if (i2c->isOK)
   13c6a:	687b      	ldr	r3, [r7, #4]
   13c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13c6e:	7a5b      	ldrb	r3, [r3, #9]
   13c70:	b2db      	uxtb	r3, r3
   13c72:	2b00      	cmp	r3, #0
   13c74:	d01b      	beq.n	13cae <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   13c76:	687b      	ldr	r3, [r7, #4]
   13c78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   13c7c:	4619      	mov	r1, r3
   13c7e:	6878      	ldr	r0, [r7, #4]
   13c80:	4b13      	ldr	r3, [pc, #76]	; (13cd0 <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
   13c82:	4798      	blx	r3
			expanders[0]->SetPortInput();
   13c84:	687b      	ldr	r3, [r7, #4]
   13c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   13c88:	4618      	mov	r0, r3
   13c8a:	4b12      	ldr	r3, [pc, #72]	; (13cd4 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   13c8c:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
   13c8e:	687b      	ldr	r3, [r7, #4]
   13c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13c92:	2180      	movs	r1, #128	; 0x80
   13c94:	4618      	mov	r0, r3
   13c96:	4b10      	ldr	r3, [pc, #64]	; (13cd8 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   13c98:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   13c9a:	687b      	ldr	r3, [r7, #4]
   13c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13c9e:	4618      	mov	r0, r3
   13ca0:	4b0e      	ldr	r3, [pc, #56]	; (13cdc <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   13ca2:	4798      	blx	r3
			expanders[3]->SetPortInput();
   13ca4:	687b      	ldr	r3, [r7, #4]
   13ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13ca8:	4618      	mov	r0, r3
   13caa:	4b0a      	ldr	r3, [pc, #40]	; (13cd4 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   13cac:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   13cae:	687b      	ldr	r3, [r7, #4]
   13cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13cb2:	7a5b      	ldrb	r3, [r3, #9]
   13cb4:	b2da      	uxtb	r2, r3
   13cb6:	687b      	ldr	r3, [r7, #4]
   13cb8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
   13cbc:	687b      	ldr	r3, [r7, #4]
   13cbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   13cc2:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
   13cc4:	4618      	mov	r0, r3
   13cc6:	3708      	adds	r7, #8
   13cc8:	46bd      	mov	sp, r7
   13cca:	bd80      	pop	{r7, pc}
   13ccc:	00015691 	.word	0x00015691
   13cd0:	00013ce1 	.word	0x00013ce1
   13cd4:	00015b99 	.word	0x00015b99
   13cd8:	00015bdd 	.word	0x00015bdd
   13cdc:	00015c51 	.word	0x00015c51

00013ce0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   13ce0:	b580      	push	{r7, lr}
   13ce2:	b084      	sub	sp, #16
   13ce4:	af00      	add	r7, sp, #0
   13ce6:	6078      	str	r0, [r7, #4]
   13ce8:	460b      	mov	r3, r1
   13cea:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13cec:	2300      	movs	r3, #0
   13cee:	60fb      	str	r3, [r7, #12]
   13cf0:	68fb      	ldr	r3, [r7, #12]
   13cf2:	2b03      	cmp	r3, #3
   13cf4:	dc24      	bgt.n	13d40 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
   13cf6:	68fa      	ldr	r2, [r7, #12]
   13cf8:	4613      	mov	r3, r2
   13cfa:	00db      	lsls	r3, r3, #3
   13cfc:	1a9b      	subs	r3, r3, r2
   13cfe:	009b      	lsls	r3, r3, #2
   13d00:	4a12      	ldr	r2, [pc, #72]	; (13d4c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
   13d02:	441a      	add	r2, r3
   13d04:	687b      	ldr	r3, [r7, #4]
   13d06:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   13d08:	687b      	ldr	r3, [r7, #4]
   13d0a:	6e58      	ldr	r0, [r3, #100]	; 0x64
   13d0c:	68fb      	ldr	r3, [r7, #12]
   13d0e:	b2da      	uxtb	r2, r3
   13d10:	78fb      	ldrb	r3, [r7, #3]
   13d12:	009b      	lsls	r3, r3, #2
   13d14:	b2db      	uxtb	r3, r3
   13d16:	4413      	add	r3, r2
   13d18:	b2db      	uxtb	r3, r3
   13d1a:	3320      	adds	r3, #32
   13d1c:	b2d9      	uxtb	r1, r3
   13d1e:	687b      	ldr	r3, [r7, #4]
   13d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13d22:	461a      	mov	r2, r3
   13d24:	4b0a      	ldr	r3, [pc, #40]	; (13d50 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
   13d26:	4798      	blx	r3
		expanders[i]=currentExpander;
   13d28:	687b      	ldr	r3, [r7, #4]
   13d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   13d2c:	6879      	ldr	r1, [r7, #4]
   13d2e:	68fb      	ldr	r3, [r7, #12]
   13d30:	3314      	adds	r3, #20
   13d32:	009b      	lsls	r3, r3, #2
   13d34:	440b      	add	r3, r1
   13d36:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13d38:	68fb      	ldr	r3, [r7, #12]
   13d3a:	3301      	adds	r3, #1
   13d3c:	60fb      	str	r3, [r7, #12]
   13d3e:	e7d7      	b.n	13cf0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   13d40:	2300      	movs	r3, #0
}
   13d42:	4618      	mov	r0, r3
   13d44:	3710      	adds	r7, #16
   13d46:	46bd      	mov	sp, r7
   13d48:	bd80      	pop	{r7, pc}
   13d4a:	bf00      	nop
   13d4c:	20002b9c 	.word	0x20002b9c
   13d50:	000159f3 	.word	0x000159f3

00013d54 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   13d54:	b590      	push	{r4, r7, lr}
   13d56:	b085      	sub	sp, #20
   13d58:	af00      	add	r7, sp, #0
   13d5a:	60f8      	str	r0, [r7, #12]
   13d5c:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   13d5e:	68bb      	ldr	r3, [r7, #8]
   13d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13d62:	4618      	mov	r0, r3
   13d64:	4b10      	ldr	r3, [pc, #64]	; (13da8 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   13d66:	4798      	blx	r3
   13d68:	4603      	mov	r3, r0
   13d6a:	461a      	mov	r2, r3
   13d6c:	68bb      	ldr	r3, [r7, #8]
   13d6e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
   13d72:	68b9      	ldr	r1, [r7, #8]
   13d74:	68bb      	ldr	r3, [r7, #8]
   13d76:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   13d7a:	68bc      	ldr	r4, [r7, #8]
   13d7c:	463b      	mov	r3, r7
   13d7e:	4618      	mov	r0, r3
   13d80:	4b0a      	ldr	r3, [pc, #40]	; (13dac <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
   13d82:	4798      	blx	r3
   13d84:	f104 033a 	add.w	r3, r4, #58	; 0x3a
   13d88:	463a      	mov	r2, r7
   13d8a:	6811      	ldr	r1, [r2, #0]
   13d8c:	6852      	ldr	r2, [r2, #4]
   13d8e:	6019      	str	r1, [r3, #0]
   13d90:	605a      	str	r2, [r3, #4]
	return controlOutputs;
   13d92:	68fa      	ldr	r2, [r7, #12]
   13d94:	68bb      	ldr	r3, [r7, #8]
   13d96:	333a      	adds	r3, #58	; 0x3a
   13d98:	6819      	ldr	r1, [r3, #0]
   13d9a:	685b      	ldr	r3, [r3, #4]
   13d9c:	6011      	str	r1, [r2, #0]
   13d9e:	6053      	str	r3, [r2, #4]
}
   13da0:	68f8      	ldr	r0, [r7, #12]
   13da2:	3714      	adds	r7, #20
   13da4:	46bd      	mov	sp, r7
   13da6:	bd90      	pop	{r4, r7, pc}
   13da8:	00015ad9 	.word	0x00015ad9
   13dac:	000158e5 	.word	0x000158e5

00013db0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   13db0:	b590      	push	{r4, r7, lr}
   13db2:	b085      	sub	sp, #20
   13db4:	af00      	add	r7, sp, #0
   13db6:	60f8      	str	r0, [r7, #12]
   13db8:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   13dba:	68bb      	ldr	r3, [r7, #8]
   13dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   13dbe:	4618      	mov	r0, r3
   13dc0:	4b10      	ldr	r3, [pc, #64]	; (13e04 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   13dc2:	4798      	blx	r3
   13dc4:	4603      	mov	r3, r0
   13dc6:	461a      	mov	r2, r3
   13dc8:	68bb      	ldr	r3, [r7, #8]
   13dca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
   13dce:	68b9      	ldr	r1, [r7, #8]
   13dd0:	68bb      	ldr	r3, [r7, #8]
   13dd2:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   13dd6:	68bc      	ldr	r4, [r7, #8]
   13dd8:	463b      	mov	r3, r7
   13dda:	4618      	mov	r0, r3
   13ddc:	4b0a      	ldr	r3, [pc, #40]	; (13e08 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   13dde:	4798      	blx	r3
   13de0:	f104 0342 	add.w	r3, r4, #66	; 0x42
   13de4:	463a      	mov	r2, r7
   13de6:	6811      	ldr	r1, [r2, #0]
   13de8:	6019      	str	r1, [r3, #0]
   13dea:	8892      	ldrh	r2, [r2, #4]
   13dec:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   13dee:	68fa      	ldr	r2, [r7, #12]
   13df0:	68bb      	ldr	r3, [r7, #8]
   13df2:	3342      	adds	r3, #66	; 0x42
   13df4:	6819      	ldr	r1, [r3, #0]
   13df6:	6011      	str	r1, [r2, #0]
   13df8:	889b      	ldrh	r3, [r3, #4]
   13dfa:	8093      	strh	r3, [r2, #4]
}
   13dfc:	68f8      	ldr	r0, [r7, #12]
   13dfe:	3714      	adds	r7, #20
   13e00:	46bd      	mov	sp, r7
   13e02:	bd90      	pop	{r4, r7, pc}
   13e04:	00015ad9 	.word	0x00015ad9
   13e08:	00015891 	.word	0x00015891

00013e0c <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   13e0c:	b580      	push	{r7, lr}
   13e0e:	b082      	sub	sp, #8
   13e10:	af00      	add	r7, sp, #0
   13e12:	6078      	str	r0, [r7, #4]
   13e14:	460b      	mov	r3, r1
   13e16:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13e18:	687b      	ldr	r3, [r7, #4]
   13e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13e1c:	4618      	mov	r0, r3
   13e1e:	4b19      	ldr	r3, [pc, #100]	; (13e84 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   13e20:	4798      	blx	r3
   13e22:	4603      	mov	r3, r0
   13e24:	461a      	mov	r2, r3
   13e26:	687b      	ldr	r3, [r7, #4]
   13e28:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
   13e2c:	78fb      	ldrb	r3, [r7, #3]
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d006      	beq.n	13e40 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   13e32:	687b      	ldr	r3, [r7, #4]
   13e34:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13e38:	f023 0301 	bic.w	r3, r3, #1
   13e3c:	b2db      	uxtb	r3, r3
   13e3e:	e005      	b.n	13e4c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   13e40:	687b      	ldr	r3, [r7, #4]
   13e42:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13e46:	f043 0301 	orr.w	r3, r3, #1
   13e4a:	b2db      	uxtb	r3, r3
   13e4c:	687a      	ldr	r2, [r7, #4]
   13e4e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
   13e52:	687b      	ldr	r3, [r7, #4]
   13e54:	78fa      	ldrb	r2, [r7, #3]
   13e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
   13e5a:	687b      	ldr	r3, [r7, #4]
   13e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13e64:	4619      	mov	r1, r3
   13e66:	4610      	mov	r0, r2
   13e68:	4b07      	ldr	r3, [pc, #28]	; (13e88 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   13e6a:	4798      	blx	r3
   13e6c:	4603      	mov	r3, r0
   13e6e:	461a      	mov	r2, r3
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   13e76:	687b      	ldr	r3, [r7, #4]
   13e78:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   13e7c:	4618      	mov	r0, r3
   13e7e:	3708      	adds	r7, #8
   13e80:	46bd      	mov	sp, r7
   13e82:	bd80      	pop	{r7, pc}
   13e84:	00015ad9 	.word	0x00015ad9
   13e88:	00015b5d 	.word	0x00015b5d

00013e8c <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   13e8c:	b580      	push	{r7, lr}
   13e8e:	b082      	sub	sp, #8
   13e90:	af00      	add	r7, sp, #0
   13e92:	6078      	str	r0, [r7, #4]
   13e94:	460b      	mov	r3, r1
   13e96:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13e98:	687b      	ldr	r3, [r7, #4]
   13e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13e9c:	4618      	mov	r0, r3
   13e9e:	4b17      	ldr	r3, [pc, #92]	; (13efc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   13ea0:	4798      	blx	r3
   13ea2:	4603      	mov	r3, r0
   13ea4:	461a      	mov	r2, r3
   13ea6:	687b      	ldr	r3, [r7, #4]
   13ea8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
   13eac:	78fb      	ldrb	r3, [r7, #3]
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d006      	beq.n	13ec0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   13eb2:	687b      	ldr	r3, [r7, #4]
   13eb4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13eb8:	f043 0320 	orr.w	r3, r3, #32
   13ebc:	b2db      	uxtb	r3, r3
   13ebe:	e005      	b.n	13ecc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   13ec0:	687b      	ldr	r3, [r7, #4]
   13ec2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13ec6:	f023 0320 	bic.w	r3, r3, #32
   13eca:	b2db      	uxtb	r3, r3
   13ecc:	687a      	ldr	r2, [r7, #4]
   13ece:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   13ed2:	687b      	ldr	r3, [r7, #4]
   13ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   13ed6:	687b      	ldr	r3, [r7, #4]
   13ed8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13edc:	4619      	mov	r1, r3
   13ede:	4610      	mov	r0, r2
   13ee0:	4b07      	ldr	r3, [pc, #28]	; (13f00 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   13ee2:	4798      	blx	r3
   13ee4:	4603      	mov	r3, r0
   13ee6:	461a      	mov	r2, r3
   13ee8:	687b      	ldr	r3, [r7, #4]
   13eea:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   13eee:	687b      	ldr	r3, [r7, #4]
   13ef0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   13ef4:	4618      	mov	r0, r3
   13ef6:	3708      	adds	r7, #8
   13ef8:	46bd      	mov	sp, r7
   13efa:	bd80      	pop	{r7, pc}
   13efc:	00015ad9 	.word	0x00015ad9
   13f00:	00015b5d 	.word	0x00015b5d

00013f04 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   13f04:	b580      	push	{r7, lr}
   13f06:	b082      	sub	sp, #8
   13f08:	af00      	add	r7, sp, #0
   13f0a:	6078      	str	r0, [r7, #4]
   13f0c:	460b      	mov	r3, r1
   13f0e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13f10:	687b      	ldr	r3, [r7, #4]
   13f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13f14:	4618      	mov	r0, r3
   13f16:	4b17      	ldr	r3, [pc, #92]	; (13f74 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   13f18:	4798      	blx	r3
   13f1a:	4603      	mov	r3, r0
   13f1c:	461a      	mov	r2, r3
   13f1e:	687b      	ldr	r3, [r7, #4]
   13f20:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   13f24:	78fb      	ldrb	r3, [r7, #3]
   13f26:	2b00      	cmp	r3, #0
   13f28:	d006      	beq.n	13f38 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   13f2a:	687b      	ldr	r3, [r7, #4]
   13f2c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f34:	b2db      	uxtb	r3, r3
   13f36:	e005      	b.n	13f44 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   13f38:	687b      	ldr	r3, [r7, #4]
   13f3a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13f42:	b2db      	uxtb	r3, r3
   13f44:	687a      	ldr	r2, [r7, #4]
   13f46:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   13f4a:	687b      	ldr	r3, [r7, #4]
   13f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   13f4e:	687b      	ldr	r3, [r7, #4]
   13f50:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13f54:	4619      	mov	r1, r3
   13f56:	4610      	mov	r0, r2
   13f58:	4b07      	ldr	r3, [pc, #28]	; (13f78 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   13f5a:	4798      	blx	r3
   13f5c:	4603      	mov	r3, r0
   13f5e:	461a      	mov	r2, r3
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   13f66:	687b      	ldr	r3, [r7, #4]
   13f68:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   13f6c:	4618      	mov	r0, r3
   13f6e:	3708      	adds	r7, #8
   13f70:	46bd      	mov	sp, r7
   13f72:	bd80      	pop	{r7, pc}
   13f74:	00015ad9 	.word	0x00015ad9
   13f78:	00015b5d 	.word	0x00015b5d

00013f7c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   13f7c:	b580      	push	{r7, lr}
   13f7e:	b082      	sub	sp, #8
   13f80:	af00      	add	r7, sp, #0
   13f82:	6078      	str	r0, [r7, #4]
   13f84:	460b      	mov	r3, r1
   13f86:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13f88:	687b      	ldr	r3, [r7, #4]
   13f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13f8c:	4618      	mov	r0, r3
   13f8e:	4b17      	ldr	r3, [pc, #92]	; (13fec <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   13f90:	4798      	blx	r3
   13f92:	4603      	mov	r3, r0
   13f94:	461a      	mov	r2, r3
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   13f9c:	78fb      	ldrb	r3, [r7, #3]
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	d006      	beq.n	13fb0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   13fa2:	687b      	ldr	r3, [r7, #4]
   13fa4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13fa8:	f043 0304 	orr.w	r3, r3, #4
   13fac:	b2db      	uxtb	r3, r3
   13fae:	e005      	b.n	13fbc <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13fb6:	f023 0304 	bic.w	r3, r3, #4
   13fba:	b2db      	uxtb	r3, r3
   13fbc:	687a      	ldr	r2, [r7, #4]
   13fbe:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   13fc6:	687b      	ldr	r3, [r7, #4]
   13fc8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   13fcc:	4619      	mov	r1, r3
   13fce:	4610      	mov	r0, r2
   13fd0:	4b07      	ldr	r3, [pc, #28]	; (13ff0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   13fd2:	4798      	blx	r3
   13fd4:	4603      	mov	r3, r0
   13fd6:	461a      	mov	r2, r3
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   13fde:	687b      	ldr	r3, [r7, #4]
   13fe0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   13fe4:	4618      	mov	r0, r3
   13fe6:	3708      	adds	r7, #8
   13fe8:	46bd      	mov	sp, r7
   13fea:	bd80      	pop	{r7, pc}
   13fec:	00015ad9 	.word	0x00015ad9
   13ff0:	00015b5d 	.word	0x00015b5d

00013ff4 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b082      	sub	sp, #8
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
   13ffc:	460b      	mov	r3, r1
   13ffe:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   14000:	687b      	ldr	r3, [r7, #4]
   14002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14004:	78fa      	ldrb	r2, [r7, #3]
   14006:	4611      	mov	r1, r2
   14008:	4618      	mov	r0, r3
   1400a:	4b07      	ldr	r3, [pc, #28]	; (14028 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   1400c:	4798      	blx	r3
   1400e:	4603      	mov	r3, r0
   14010:	461a      	mov	r2, r3
   14012:	687b      	ldr	r3, [r7, #4]
   14014:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   14018:	687b      	ldr	r3, [r7, #4]
   1401a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   1401e:	4618      	mov	r0, r3
   14020:	3708      	adds	r7, #8
   14022:	46bd      	mov	sp, r7
   14024:	bd80      	pop	{r7, pc}
   14026:	bf00      	nop
   14028:	00015b5d 	.word	0x00015b5d

0001402c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   1402c:	b580      	push	{r7, lr}
   1402e:	b082      	sub	sp, #8
   14030:	af00      	add	r7, sp, #0
   14032:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   1403a:	687b      	ldr	r3, [r7, #4]
   1403c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   14040:	687b      	ldr	r3, [r7, #4]
   14042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   14044:	4618      	mov	r0, r3
   14046:	4b18      	ldr	r3, [pc, #96]	; (140a8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   14048:	4798      	blx	r3
   1404a:	4603      	mov	r3, r0
   1404c:	461a      	mov	r2, r3
   1404e:	687b      	ldr	r3, [r7, #4]
   14050:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   14054:	687b      	ldr	r3, [r7, #4]
   14056:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1405a:	2bda      	cmp	r3, #218	; 0xda
   1405c:	dd04      	ble.n	14068 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   1405e:	687b      	ldr	r3, [r7, #4]
   14060:	2203      	movs	r2, #3
   14062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   14066:	e017      	b.n	14098 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   14068:	687b      	ldr	r3, [r7, #4]
   1406a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1406e:	2b6d      	cmp	r3, #109	; 0x6d
   14070:	dd04      	ble.n	1407c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   14072:	687b      	ldr	r3, [r7, #4]
   14074:	2202      	movs	r2, #2
   14076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   1407a:	e00d      	b.n	14098 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   1407c:	687b      	ldr	r3, [r7, #4]
   1407e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   14082:	2b36      	cmp	r3, #54	; 0x36
   14084:	dd04      	ble.n	14090 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   14086:	687b      	ldr	r3, [r7, #4]
   14088:	2201      	movs	r2, #1
   1408a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   1408e:	e003      	b.n	14098 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	2200      	movs	r2, #0
   14094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   14098:	687b      	ldr	r3, [r7, #4]
   1409a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   1409e:	4618      	mov	r0, r3
   140a0:	3708      	adds	r7, #8
   140a2:	46bd      	mov	sp, r7
   140a4:	bd80      	pop	{r7, pc}
   140a6:	bf00      	nop
   140a8:	00015ad9 	.word	0x00015ad9

000140ac <_ZN24SingleFlapperValve_Class17IsPositionChangedEv>:
void SingleFlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlOutputs=ReadControlStatus();
	fvData.inputStatus=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool SingleFlapperValve_Class::IsPositionChanged(void){
   140ac:	b590      	push	{r4, r7, lr}
   140ae:	b083      	sub	sp, #12
   140b0:	af00      	add	r7, sp, #0
   140b2:	6078      	str	r0, [r7, #4]
	if (lastPosition==ReadActualPosition())
   140b4:	687b      	ldr	r3, [r7, #4]
   140b6:	f893 4072 	ldrb.w	r4, [r3, #114]	; 0x72
   140ba:	6878      	ldr	r0, [r7, #4]
   140bc:	4b08      	ldr	r3, [pc, #32]	; (140e0 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x34>)
   140be:	4798      	blx	r3
   140c0:	4603      	mov	r3, r0
   140c2:	429c      	cmp	r4, r3
   140c4:	bf0c      	ite	eq
   140c6:	2301      	moveq	r3, #1
   140c8:	2300      	movne	r3, #0
   140ca:	b2db      	uxtb	r3, r3
   140cc:	2b00      	cmp	r3, #0
   140ce:	d001      	beq.n	140d4 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x28>
	{
		return false;
   140d0:	2300      	movs	r3, #0
   140d2:	e000      	b.n	140d6 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x2a>
	} 
	else
	{
		return true;
   140d4:	2301      	movs	r3, #1
	}
	return true;
}
   140d6:	4618      	mov	r0, r3
   140d8:	370c      	adds	r7, #12
   140da:	46bd      	mov	sp, r7
   140dc:	bd90      	pop	{r4, r7, pc}
   140de:	bf00      	nop
   140e0:	0001402d 	.word	0x0001402d

000140e4 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   140e4:	b590      	push	{r4, r7, lr}
   140e6:	b083      	sub	sp, #12
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
   140ec:	4c05      	ldr	r4, [pc, #20]	; (14104 <__tcf_0+0x20>)
   140ee:	4b06      	ldr	r3, [pc, #24]	; (14108 <__tcf_0+0x24>)
   140f0:	429c      	cmp	r4, r3
   140f2:	d004      	beq.n	140fe <__tcf_0+0x1a>
   140f4:	3c1c      	subs	r4, #28
   140f6:	4620      	mov	r0, r4
   140f8:	4b04      	ldr	r3, [pc, #16]	; (1410c <__tcf_0+0x28>)
   140fa:	4798      	blx	r3
   140fc:	e7f7      	b.n	140ee <__tcf_0+0xa>
   140fe:	370c      	adds	r7, #12
   14100:	46bd      	mov	sp, r7
   14102:	bd90      	pop	{r4, r7, pc}
   14104:	20002c0c 	.word	0x20002c0c
   14108:	20002b9c 	.word	0x20002b9c
   1410c:	000159df 	.word	0x000159df

00014110 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   14110:	b5b0      	push	{r4, r5, r7, lr}
   14112:	b082      	sub	sp, #8
   14114:	af00      	add	r7, sp, #0
   14116:	6078      	str	r0, [r7, #4]
   14118:	6039      	str	r1, [r7, #0]
   1411a:	687b      	ldr	r3, [r7, #4]
   1411c:	2b01      	cmp	r3, #1
   1411e:	d11d      	bne.n	1415c <_Z41__static_initialization_and_destruction_0ii+0x4c>
   14120:	683b      	ldr	r3, [r7, #0]
   14122:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14126:	4293      	cmp	r3, r2
   14128:	d118      	bne.n	1415c <_Z41__static_initialization_and_destruction_0ii+0x4c>
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   1412a:	490e      	ldr	r1, [pc, #56]	; (14164 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1412c:	480e      	ldr	r0, [pc, #56]	; (14168 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1412e:	4b0f      	ldr	r3, [pc, #60]	; (1416c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   14130:	4798      	blx	r3
   14132:	4a0f      	ldr	r2, [pc, #60]	; (14170 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14134:	490f      	ldr	r1, [pc, #60]	; (14174 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   14136:	480c      	ldr	r0, [pc, #48]	; (14168 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   14138:	4b0f      	ldr	r3, [pc, #60]	; (14178 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1413a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   1413c:	4b0f      	ldr	r3, [pc, #60]	; (1417c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1413e:	2403      	movs	r4, #3
   14140:	461d      	mov	r5, r3
   14142:	2c00      	cmp	r4, #0
   14144:	db05      	blt.n	14152 <_Z41__static_initialization_and_destruction_0ii+0x42>
   14146:	4628      	mov	r0, r5
   14148:	4b0d      	ldr	r3, [pc, #52]	; (14180 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   1414a:	4798      	blx	r3
   1414c:	351c      	adds	r5, #28
   1414e:	3c01      	subs	r4, #1
   14150:	e7f7      	b.n	14142 <_Z41__static_initialization_and_destruction_0ii+0x32>
   14152:	4a07      	ldr	r2, [pc, #28]	; (14170 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14154:	490b      	ldr	r1, [pc, #44]	; (14184 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   14156:	2000      	movs	r0, #0
   14158:	4b07      	ldr	r3, [pc, #28]	; (14178 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1415a:	4798      	blx	r3
}
   1415c:	bf00      	nop
   1415e:	3708      	adds	r7, #8
   14160:	46bd      	mov	sp, r7
   14162:	bdb0      	pop	{r4, r5, r7, pc}
   14164:	20009790 	.word	0x20009790
   14168:	20002b88 	.word	0x20002b88
   1416c:	00015661 	.word	0x00015661
   14170:	20000000 	.word	0x20000000
   14174:	0001567d 	.word	0x0001567d
   14178:	000170d1 	.word	0x000170d1
   1417c:	20002b9c 	.word	0x20002b9c
   14180:	000159cb 	.word	0x000159cb
   14184:	000140e5 	.word	0x000140e5

00014188 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   14188:	b580      	push	{r7, lr}
   1418a:	af00      	add	r7, sp, #0
   1418c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14190:	2001      	movs	r0, #1
   14192:	4b01      	ldr	r3, [pc, #4]	; (14198 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   14194:	4798      	blx	r3
   14196:	bd80      	pop	{r7, pc}
   14198:	00014111 	.word	0x00014111

0001419c <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   1419c:	b480      	push	{r7}
   1419e:	b083      	sub	sp, #12
   141a0:	af00      	add	r7, sp, #0
   141a2:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   141a4:	4a07      	ldr	r2, [pc, #28]	; (141c4 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   141a6:	687b      	ldr	r3, [r7, #4]
   141a8:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   141aa:	687b      	ldr	r3, [r7, #4]
   141ac:	4a06      	ldr	r2, [pc, #24]	; (141c8 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   141ae:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   141b0:	687b      	ldr	r3, [r7, #4]
   141b2:	2200      	movs	r2, #0
   141b4:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   141b6:	687b      	ldr	r3, [r7, #4]
   141b8:	4618      	mov	r0, r3
   141ba:	370c      	adds	r7, #12
   141bc:	46bd      	mov	sp, r7
   141be:	bc80      	pop	{r7}
   141c0:	4770      	bx	lr
   141c2:	bf00      	nop
   141c4:	20002c0c 	.word	0x20002c0c
   141c8:	20002c10 	.word	0x20002c10

000141cc <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   141cc:	b480      	push	{r7}
   141ce:	b083      	sub	sp, #12
   141d0:	af00      	add	r7, sp, #0
   141d2:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   141d4:	687b      	ldr	r3, [r7, #4]
   141d6:	4618      	mov	r0, r3
   141d8:	370c      	adds	r7, #12
   141da:	46bd      	mov	sp, r7
   141dc:	bc80      	pop	{r7}
   141de:	4770      	bx	lr

000141e0 <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
   141e0:	b580      	push	{r7, lr}
   141e2:	b082      	sub	sp, #8
   141e4:	af00      	add	r7, sp, #0
   141e6:	6078      	str	r0, [r7, #4]
		i2c->Init();
   141e8:	687b      	ldr	r3, [r7, #4]
   141ea:	699b      	ldr	r3, [r3, #24]
   141ec:	4618      	mov	r0, r3
   141ee:	4b15      	ldr	r3, [pc, #84]	; (14244 <_ZN18SingleHeater_Class4InitEv+0x64>)
   141f0:	4798      	blx	r3
		if (i2c->isOK)
   141f2:	687b      	ldr	r3, [r7, #4]
   141f4:	699b      	ldr	r3, [r3, #24]
   141f6:	7a5b      	ldrb	r3, [r3, #9]
   141f8:	b2db      	uxtb	r3, r3
   141fa:	2b00      	cmp	r3, #0
   141fc:	d014      	beq.n	14228 <_ZN18SingleHeater_Class4InitEv+0x48>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
   141fe:	6878      	ldr	r0, [r7, #4]
   14200:	4b11      	ldr	r3, [pc, #68]	; (14248 <_ZN18SingleHeater_Class4InitEv+0x68>)
   14202:	4798      	blx	r3
			expanders[0]->SetPortInput();
   14204:	687b      	ldr	r3, [r7, #4]
   14206:	68db      	ldr	r3, [r3, #12]
   14208:	4618      	mov	r0, r3
   1420a:	4b10      	ldr	r3, [pc, #64]	; (1424c <_ZN18SingleHeater_Class4InitEv+0x6c>)
   1420c:	4798      	blx	r3
			expanders[1]->SetPortOutput();
   1420e:	687b      	ldr	r3, [r7, #4]
   14210:	691b      	ldr	r3, [r3, #16]
   14212:	4618      	mov	r0, r3
   14214:	4b0e      	ldr	r3, [pc, #56]	; (14250 <_ZN18SingleHeater_Class4InitEv+0x70>)
   14216:	4798      	blx	r3
			isOK=SelfTest();
   14218:	6878      	ldr	r0, [r7, #4]
   1421a:	4b0e      	ldr	r3, [pc, #56]	; (14254 <_ZN18SingleHeater_Class4InitEv+0x74>)
   1421c:	4798      	blx	r3
   1421e:	4603      	mov	r3, r0
   14220:	461a      	mov	r2, r3
   14222:	687b      	ldr	r3, [r7, #4]
   14224:	701a      	strb	r2, [r3, #0]
   14226:	e000      	b.n	1422a <_ZN18SingleHeater_Class4InitEv+0x4a>
		}
		else
		{
			asm("nop");
   14228:	bf00      	nop
		}
		isOK=i2c->isOK;
   1422a:	687b      	ldr	r3, [r7, #4]
   1422c:	699b      	ldr	r3, [r3, #24]
   1422e:	7a5b      	ldrb	r3, [r3, #9]
   14230:	b2da      	uxtb	r2, r3
   14232:	687b      	ldr	r3, [r7, #4]
   14234:	701a      	strb	r2, [r3, #0]
		return isOK;
   14236:	687b      	ldr	r3, [r7, #4]
   14238:	781b      	ldrb	r3, [r3, #0]
   1423a:	b2db      	uxtb	r3, r3
}
   1423c:	4618      	mov	r0, r3
   1423e:	3708      	adds	r7, #8
   14240:	46bd      	mov	sp, r7
   14242:	bd80      	pop	{r7, pc}
   14244:	00015691 	.word	0x00015691
   14248:	00014259 	.word	0x00014259
   1424c:	00015b99 	.word	0x00015b99
   14250:	00015c51 	.word	0x00015c51
   14254:	0001449d 	.word	0x0001449d

00014258 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
   14258:	b580      	push	{r7, lr}
   1425a:	b084      	sub	sp, #16
   1425c:	af00      	add	r7, sp, #0
   1425e:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   14260:	2300      	movs	r3, #0
   14262:	60fb      	str	r3, [r7, #12]
   14264:	68fb      	ldr	r3, [r7, #12]
   14266:	2b01      	cmp	r3, #1
   14268:	dc25      	bgt.n	142b6 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
   1426a:	68fa      	ldr	r2, [r7, #12]
   1426c:	4613      	mov	r3, r2
   1426e:	00db      	lsls	r3, r3, #3
   14270:	1a9b      	subs	r3, r3, r2
   14272:	009b      	lsls	r3, r3, #2
   14274:	4a12      	ldr	r2, [pc, #72]	; (142c0 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
   14276:	441a      	add	r2, r3
   14278:	6879      	ldr	r1, [r7, #4]
   1427a:	68fb      	ldr	r3, [r7, #12]
   1427c:	3302      	adds	r3, #2
   1427e:	009b      	lsls	r3, r3, #2
   14280:	440b      	add	r3, r1
   14282:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   14284:	687a      	ldr	r2, [r7, #4]
   14286:	68fb      	ldr	r3, [r7, #12]
   14288:	3302      	adds	r3, #2
   1428a:	009b      	lsls	r3, r3, #2
   1428c:	4413      	add	r3, r2
   1428e:	685a      	ldr	r2, [r3, #4]
   14290:	687b      	ldr	r3, [r7, #4]
   14292:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   14294:	687b      	ldr	r3, [r7, #4]
   14296:	6958      	ldr	r0, [r3, #20]
   14298:	68fb      	ldr	r3, [r7, #12]
   1429a:	b25b      	sxtb	r3, r3
   1429c:	f043 0320 	orr.w	r3, r3, #32
   142a0:	b25b      	sxtb	r3, r3
   142a2:	b2d9      	uxtb	r1, r3
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	699b      	ldr	r3, [r3, #24]
   142a8:	461a      	mov	r2, r3
   142aa:	4b06      	ldr	r3, [pc, #24]	; (142c4 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
   142ac:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   142ae:	68fb      	ldr	r3, [r7, #12]
   142b0:	3301      	adds	r3, #1
   142b2:	60fb      	str	r3, [r7, #12]
   142b4:	e7d6      	b.n	14264 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
   142b6:	bf00      	nop
   142b8:	4618      	mov	r0, r3
   142ba:	3710      	adds	r7, #16
   142bc:	46bd      	mov	sp, r7
   142be:	bd80      	pop	{r7, pc}
   142c0:	20002c24 	.word	0x20002c24
   142c4:	000159f3 	.word	0x000159f3

000142c8 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   142c8:	b580      	push	{r7, lr}
   142ca:	b084      	sub	sp, #16
   142cc:	af00      	add	r7, sp, #0
   142ce:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   142d0:	687b      	ldr	r3, [r7, #4]
   142d2:	68db      	ldr	r3, [r3, #12]
   142d4:	4618      	mov	r0, r3
   142d6:	4b16      	ldr	r3, [pc, #88]	; (14330 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   142d8:	4798      	blx	r3
   142da:	4603      	mov	r3, r0
   142dc:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   142de:	7bbb      	ldrb	r3, [r7, #14]
   142e0:	f003 0301 	and.w	r3, r3, #1
   142e4:	2b00      	cmp	r3, #0
   142e6:	bf14      	ite	ne
   142e8:	2301      	movne	r3, #1
   142ea:	2300      	moveq	r3, #0
   142ec:	b2da      	uxtb	r2, r3
   142ee:	687b      	ldr	r3, [r7, #4]
   142f0:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   142f2:	2300      	movs	r3, #0
   142f4:	73fb      	strb	r3, [r7, #15]
   142f6:	7bfb      	ldrb	r3, [r7, #15]
   142f8:	2b03      	cmp	r3, #3
   142fa:	dc14      	bgt.n	14326 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   142fc:	7bfb      	ldrb	r3, [r7, #15]
   142fe:	7bb9      	ldrb	r1, [r7, #14]
   14300:	7bfa      	ldrb	r2, [r7, #15]
   14302:	3201      	adds	r2, #1
   14304:	fa41 f202 	asr.w	r2, r1, r2
   14308:	f002 0201 	and.w	r2, r2, #1
   1430c:	2a00      	cmp	r2, #0
   1430e:	bf14      	ite	ne
   14310:	2201      	movne	r2, #1
   14312:	2200      	moveq	r2, #0
   14314:	b2d1      	uxtb	r1, r2
   14316:	687a      	ldr	r2, [r7, #4]
   14318:	4413      	add	r3, r2
   1431a:	460a      	mov	r2, r1
   1431c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   1431e:	7bfb      	ldrb	r3, [r7, #15]
   14320:	3301      	adds	r3, #1
   14322:	73fb      	strb	r3, [r7, #15]
   14324:	e7e7      	b.n	142f6 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   14326:	7bbb      	ldrb	r3, [r7, #14]
}
   14328:	4618      	mov	r0, r3
   1432a:	3710      	adds	r7, #16
   1432c:	46bd      	mov	sp, r7
   1432e:	bd80      	pop	{r7, pc}
   14330:	00015ad9 	.word	0x00015ad9

00014334 <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   14334:	b580      	push	{r7, lr}
   14336:	b084      	sub	sp, #16
   14338:	af00      	add	r7, sp, #0
   1433a:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   1433c:	687b      	ldr	r3, [r7, #4]
   1433e:	691b      	ldr	r3, [r3, #16]
   14340:	4618      	mov	r0, r3
   14342:	4b11      	ldr	r3, [pc, #68]	; (14388 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x54>)
   14344:	4798      	blx	r3
   14346:	4603      	mov	r3, r0
   14348:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   1434a:	2300      	movs	r3, #0
   1434c:	73fb      	strb	r3, [r7, #15]
   1434e:	7bfb      	ldrb	r3, [r7, #15]
   14350:	2b03      	cmp	r3, #3
   14352:	dc13      	bgt.n	1437c <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x48>
	{
		enables[i]=!(r&(0x01<<i));
   14354:	7bfb      	ldrb	r3, [r7, #15]
   14356:	7bb9      	ldrb	r1, [r7, #14]
   14358:	7bfa      	ldrb	r2, [r7, #15]
   1435a:	fa41 f202 	asr.w	r2, r1, r2
   1435e:	f002 0201 	and.w	r2, r2, #1
   14362:	2a00      	cmp	r2, #0
   14364:	bf0c      	ite	eq
   14366:	2201      	moveq	r2, #1
   14368:	2200      	movne	r2, #0
   1436a:	b2d1      	uxtb	r1, r2
   1436c:	687a      	ldr	r2, [r7, #4]
   1436e:	4413      	add	r3, r2
   14370:	460a      	mov	r2, r1
   14372:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   14374:	7bfb      	ldrb	r3, [r7, #15]
   14376:	3301      	adds	r3, #1
   14378:	73fb      	strb	r3, [r7, #15]
   1437a:	e7e8      	b.n	1434e <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   1437c:	7bbb      	ldrb	r3, [r7, #14]
}
   1437e:	4618      	mov	r0, r3
   14380:	3710      	adds	r7, #16
   14382:	46bd      	mov	sp, r7
   14384:	bd80      	pop	{r7, pc}
   14386:	bf00      	nop
   14388:	00015ad9 	.word	0x00015ad9

0001438c <_ZN18SingleHeater_Class11EnableIndexEh>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   1438c:	b580      	push	{r7, lr}
   1438e:	b082      	sub	sp, #8
   14390:	af00      	add	r7, sp, #0
   14392:	6078      	str	r0, [r7, #4]
   14394:	460b      	mov	r3, r1
   14396:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   14398:	687b      	ldr	r3, [r7, #4]
   1439a:	691b      	ldr	r3, [r3, #16]
   1439c:	78f9      	ldrb	r1, [r7, #3]
   1439e:	2200      	movs	r2, #0
   143a0:	4618      	mov	r0, r3
   143a2:	4b06      	ldr	r3, [pc, #24]	; (143bc <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   143a4:	4798      	blx	r3
   143a6:	4603      	mov	r3, r0
   143a8:	461a      	mov	r2, r3
   143aa:	687b      	ldr	r3, [r7, #4]
   143ac:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   143ae:	687b      	ldr	r3, [r7, #4]
   143b0:	7adb      	ldrb	r3, [r3, #11]
}
   143b2:	4618      	mov	r0, r3
   143b4:	3708      	adds	r7, #8
   143b6:	46bd      	mov	sp, r7
   143b8:	bd80      	pop	{r7, pc}
   143ba:	bf00      	nop
   143bc:	00015d49 	.word	0x00015d49

000143c0 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   143c0:	b580      	push	{r7, lr}
   143c2:	b082      	sub	sp, #8
   143c4:	af00      	add	r7, sp, #0
   143c6:	6078      	str	r0, [r7, #4]
   143c8:	460b      	mov	r3, r1
   143ca:	70fb      	strb	r3, [r7, #3]
   143cc:	4613      	mov	r3, r2
   143ce:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   143d0:	687b      	ldr	r3, [r7, #4]
   143d2:	6918      	ldr	r0, [r3, #16]
   143d4:	78bb      	ldrb	r3, [r7, #2]
   143d6:	f083 0301 	eor.w	r3, r3, #1
   143da:	b2da      	uxtb	r2, r3
   143dc:	78fb      	ldrb	r3, [r7, #3]
   143de:	4619      	mov	r1, r3
   143e0:	4b05      	ldr	r3, [pc, #20]	; (143f8 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   143e2:	4798      	blx	r3
   143e4:	4603      	mov	r3, r0
   143e6:	461a      	mov	r2, r3
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   143ec:	687b      	ldr	r3, [r7, #4]
   143ee:	7adb      	ldrb	r3, [r3, #11]
}
   143f0:	4618      	mov	r0, r3
   143f2:	3708      	adds	r7, #8
   143f4:	46bd      	mov	sp, r7
   143f6:	bd80      	pop	{r7, pc}
   143f8:	00015d49 	.word	0x00015d49

000143fc <_ZN18SingleHeater_Class12DisableIndexEh>:

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   143fc:	b580      	push	{r7, lr}
   143fe:	b082      	sub	sp, #8
   14400:	af00      	add	r7, sp, #0
   14402:	6078      	str	r0, [r7, #4]
   14404:	460b      	mov	r3, r1
   14406:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   14408:	687b      	ldr	r3, [r7, #4]
   1440a:	691b      	ldr	r3, [r3, #16]
   1440c:	78f9      	ldrb	r1, [r7, #3]
   1440e:	2201      	movs	r2, #1
   14410:	4618      	mov	r0, r3
   14412:	4b08      	ldr	r3, [pc, #32]	; (14434 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   14414:	4798      	blx	r3
   14416:	4603      	mov	r3, r0
   14418:	2b00      	cmp	r3, #0
   1441a:	d001      	beq.n	14420 <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   1441c:	2200      	movs	r2, #0
   1441e:	e000      	b.n	14422 <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   14420:	2201      	movs	r2, #1
   14422:	687b      	ldr	r3, [r7, #4]
   14424:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   14426:	687b      	ldr	r3, [r7, #4]
   14428:	7adb      	ldrb	r3, [r3, #11]
}
   1442a:	4618      	mov	r0, r3
   1442c:	3708      	adds	r7, #8
   1442e:	46bd      	mov	sp, r7
   14430:	bd80      	pop	{r7, pc}
   14432:	bf00      	nop
   14434:	00015d49 	.word	0x00015d49

00014438 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv>:

uint8_t SingleHeater_Class::GetHeaterPowerLevel(void){
   14438:	b580      	push	{r7, lr}
   1443a:	b084      	sub	sp, #16
   1443c:	af00      	add	r7, sp, #0
   1443e:	6078      	str	r0, [r7, #4]
	ReadEnableGIPO();
   14440:	6878      	ldr	r0, [r7, #4]
   14442:	4b15      	ldr	r3, [pc, #84]	; (14498 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x60>)
   14444:	4798      	blx	r3
	powerLevel=0;
   14446:	687b      	ldr	r3, [r7, #4]
   14448:	2200      	movs	r2, #0
   1444a:	f883 2020 	strb.w	r2, [r3, #32]
	uint8_t aux=0;
   1444e:	2300      	movs	r3, #0
   14450:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
   14452:	2300      	movs	r3, #0
   14454:	73fb      	strb	r3, [r7, #15]
   14456:	7bfb      	ldrb	r3, [r7, #15]
   14458:	2b03      	cmp	r3, #3
   1445a:	dc16      	bgt.n	1448a <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x52>
	{
		aux=enables[i]?1:0;
   1445c:	7bfb      	ldrb	r3, [r7, #15]
   1445e:	687a      	ldr	r2, [r7, #4]
   14460:	4413      	add	r3, r2
   14462:	7f1b      	ldrb	r3, [r3, #28]
   14464:	2b00      	cmp	r3, #0
   14466:	d001      	beq.n	1446c <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x34>
   14468:	2301      	movs	r3, #1
   1446a:	e000      	b.n	1446e <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x36>
   1446c:	2300      	movs	r3, #0
   1446e:	73bb      	strb	r3, [r7, #14]
		powerLevel+=aux;
   14470:	687b      	ldr	r3, [r7, #4]
   14472:	f893 2020 	ldrb.w	r2, [r3, #32]
   14476:	7bbb      	ldrb	r3, [r7, #14]
   14478:	4413      	add	r3, r2
   1447a:	b2da      	uxtb	r2, r3
   1447c:	687b      	ldr	r3, [r7, #4]
   1447e:	f883 2020 	strb.w	r2, [r3, #32]
	for (uint8_t i = 0; i < 4; i++)
   14482:	7bfb      	ldrb	r3, [r7, #15]
   14484:	3301      	adds	r3, #1
   14486:	73fb      	strb	r3, [r7, #15]
   14488:	e7e5      	b.n	14456 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x1e>
	}
	return powerLevel;
   1448a:	687b      	ldr	r3, [r7, #4]
   1448c:	f893 3020 	ldrb.w	r3, [r3, #32]
}
   14490:	4618      	mov	r0, r3
   14492:	3710      	adds	r7, #16
   14494:	46bd      	mov	sp, r7
   14496:	bd80      	pop	{r7, pc}
   14498:	00014335 	.word	0x00014335

0001449c <_ZN18SingleHeater_Class8SelfTestEv>:


bool SingleHeater_Class::SelfTest(void){
   1449c:	b580      	push	{r7, lr}
   1449e:	b084      	sub	sp, #16
   144a0:	af00      	add	r7, sp, #0
   144a2:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   144a4:	2300      	movs	r3, #0
   144a6:	73bb      	strb	r3, [r7, #14]
   144a8:	7bbb      	ldrb	r3, [r7, #14]
   144aa:	2b03      	cmp	r3, #3
   144ac:	dc1f      	bgt.n	144ee <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
			EnableIndex(i);
   144ae:	7bbb      	ldrb	r3, [r7, #14]
   144b0:	4619      	mov	r1, r3
   144b2:	6878      	ldr	r0, [r7, #4]
   144b4:	4b10      	ldr	r3, [pc, #64]	; (144f8 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   144b6:	4798      	blx	r3
			delay_ms(100);
   144b8:	2064      	movs	r0, #100	; 0x64
   144ba:	4b10      	ldr	r3, [pc, #64]	; (144fc <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   144bc:	4798      	blx	r3
			DisableIndex(i);
   144be:	7bbb      	ldrb	r3, [r7, #14]
   144c0:	4619      	mov	r1, r3
   144c2:	6878      	ldr	r0, [r7, #4]
   144c4:	4b0e      	ldr	r3, [pc, #56]	; (14500 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   144c6:	4798      	blx	r3
			ReadStatus();
   144c8:	6878      	ldr	r0, [r7, #4]
   144ca:	4b0e      	ldr	r3, [pc, #56]	; (14504 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   144cc:	4798      	blx	r3
			if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   144ce:	7bbb      	ldrb	r3, [r7, #14]
   144d0:	687a      	ldr	r2, [r7, #4]
   144d2:	4413      	add	r3, r2
   144d4:	78db      	ldrb	r3, [r3, #3]
   144d6:	2b00      	cmp	r3, #0
   144d8:	d002      	beq.n	144e0 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
			{
				result=true;
   144da:	2301      	movs	r3, #1
   144dc:	73fb      	strb	r3, [r7, #15]
   144de:	e002      	b.n	144e6 <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
			} 
			else
			{
				result=false;
   144e0:	2300      	movs	r3, #0
   144e2:	73fb      	strb	r3, [r7, #15]
				break;
   144e4:	e003      	b.n	144ee <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   144e6:	7bbb      	ldrb	r3, [r7, #14]
   144e8:	3301      	adds	r3, #1
   144ea:	73bb      	strb	r3, [r7, #14]
   144ec:	e7dc      	b.n	144a8 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
			
			
	}
	

	return result;
   144ee:	7bfb      	ldrb	r3, [r7, #15]
}
   144f0:	4618      	mov	r0, r3
   144f2:	3710      	adds	r7, #16
   144f4:	46bd      	mov	sp, r7
   144f6:	bd80      	pop	{r7, pc}
   144f8:	0001438d 	.word	0x0001438d
   144fc:	00003ed5 	.word	0x00003ed5
   14500:	000143fd 	.word	0x000143fd
   14504:	000142c9 	.word	0x000142c9

00014508 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   14508:	b590      	push	{r4, r7, lr}
   1450a:	b083      	sub	sp, #12
   1450c:	af00      	add	r7, sp, #0
   1450e:	6078      	str	r0, [r7, #4]
   14510:	4c05      	ldr	r4, [pc, #20]	; (14528 <__tcf_0+0x20>)
   14512:	4b06      	ldr	r3, [pc, #24]	; (1452c <__tcf_0+0x24>)
   14514:	429c      	cmp	r4, r3
   14516:	d004      	beq.n	14522 <__tcf_0+0x1a>
   14518:	3c1c      	subs	r4, #28
   1451a:	4620      	mov	r0, r4
   1451c:	4b04      	ldr	r3, [pc, #16]	; (14530 <__tcf_0+0x28>)
   1451e:	4798      	blx	r3
   14520:	e7f7      	b.n	14512 <__tcf_0+0xa>
   14522:	370c      	adds	r7, #12
   14524:	46bd      	mov	sp, r7
   14526:	bd90      	pop	{r4, r7, pc}
   14528:	20002c5c 	.word	0x20002c5c
   1452c:	20002c24 	.word	0x20002c24
   14530:	000159df 	.word	0x000159df

00014534 <_Z41__static_initialization_and_destruction_0ii>:

   14534:	b5b0      	push	{r4, r5, r7, lr}
   14536:	b082      	sub	sp, #8
   14538:	af00      	add	r7, sp, #0
   1453a:	6078      	str	r0, [r7, #4]
   1453c:	6039      	str	r1, [r7, #0]
   1453e:	687b      	ldr	r3, [r7, #4]
   14540:	2b01      	cmp	r3, #1
   14542:	d125      	bne.n	14590 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   14544:	683b      	ldr	r3, [r7, #0]
   14546:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1454a:	4293      	cmp	r3, r2
   1454c:	d120      	bne.n	14590 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1454e:	4912      	ldr	r1, [pc, #72]	; (14598 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   14550:	4812      	ldr	r0, [pc, #72]	; (1459c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   14552:	4b13      	ldr	r3, [pc, #76]	; (145a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   14554:	4798      	blx	r3
   14556:	4a13      	ldr	r2, [pc, #76]	; (145a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14558:	4913      	ldr	r1, [pc, #76]	; (145a8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1455a:	4810      	ldr	r0, [pc, #64]	; (1459c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1455c:	4b13      	ldr	r3, [pc, #76]	; (145ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1455e:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   14560:	4b13      	ldr	r3, [pc, #76]	; (145b0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   14562:	2401      	movs	r4, #1
   14564:	461d      	mov	r5, r3
   14566:	2c00      	cmp	r4, #0
   14568:	db05      	blt.n	14576 <_Z41__static_initialization_and_destruction_0ii+0x42>
   1456a:	4628      	mov	r0, r5
   1456c:	4b11      	ldr	r3, [pc, #68]	; (145b4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1456e:	4798      	blx	r3
   14570:	351c      	adds	r5, #28
   14572:	3c01      	subs	r4, #1
   14574:	e7f7      	b.n	14566 <_Z41__static_initialization_and_destruction_0ii+0x32>
   14576:	4a0b      	ldr	r2, [pc, #44]	; (145a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14578:	490f      	ldr	r1, [pc, #60]	; (145b8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1457a:	2000      	movs	r0, #0
   1457c:	4b0b      	ldr	r3, [pc, #44]	; (145ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1457e:	4798      	blx	r3
   14580:	480e      	ldr	r0, [pc, #56]	; (145bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   14582:	4b0f      	ldr	r3, [pc, #60]	; (145c0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   14584:	4798      	blx	r3
   14586:	4a07      	ldr	r2, [pc, #28]	; (145a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14588:	490e      	ldr	r1, [pc, #56]	; (145c4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1458a:	480c      	ldr	r0, [pc, #48]	; (145bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1458c:	4b07      	ldr	r3, [pc, #28]	; (145ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1458e:	4798      	blx	r3
   14590:	bf00      	nop
   14592:	3708      	adds	r7, #8
   14594:	46bd      	mov	sp, r7
   14596:	bdb0      	pop	{r4, r5, r7, pc}
   14598:	200097cc 	.word	0x200097cc
   1459c:	20002c10 	.word	0x20002c10
   145a0:	00015661 	.word	0x00015661
   145a4:	20000000 	.word	0x20000000
   145a8:	0001567d 	.word	0x0001567d
   145ac:	000170d1 	.word	0x000170d1
   145b0:	20002c24 	.word	0x20002c24
   145b4:	000159cb 	.word	0x000159cb
   145b8:	00014509 	.word	0x00014509
   145bc:	20002c5c 	.word	0x20002c5c
   145c0:	0001419d 	.word	0x0001419d
   145c4:	000141cd 	.word	0x000141cd

000145c8 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   145c8:	b580      	push	{r7, lr}
   145ca:	af00      	add	r7, sp, #0
   145cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   145d0:	2001      	movs	r0, #1
   145d2:	4b01      	ldr	r3, [pc, #4]	; (145d8 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   145d4:	4798      	blx	r3
   145d6:	bd80      	pop	{r7, pc}
   145d8:	00014535 	.word	0x00014535

000145dc <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   145dc:	4b02      	ldr	r3, [pc, #8]	; (145e8 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   145de:	681a      	ldr	r2, [r3, #0]
   145e0:	6913      	ldr	r3, [r2, #16]
   145e2:	3301      	adds	r3, #1
   145e4:	6113      	str	r3, [r2, #16]
   145e6:	4770      	bx	lr
   145e8:	20002c80 	.word	0x20002c80

000145ec <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   145ec:	4b02      	ldr	r3, [pc, #8]	; (145f8 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   145ee:	681b      	ldr	r3, [r3, #0]
   145f0:	2200      	movs	r2, #0
   145f2:	751a      	strb	r2, [r3, #20]
   145f4:	4770      	bx	lr
   145f6:	bf00      	nop
   145f8:	20002c80 	.word	0x20002c80

000145fc <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   145fc:	b538      	push	{r3, r4, r5, lr}
   145fe:	4604      	mov	r4, r0
   14600:	4b0a      	ldr	r3, [pc, #40]	; (1462c <_ZN16Maintenance_ToolD1Ev+0x30>)
   14602:	6003      	str	r3, [r0, #0]
{
	ticks=0;
   14604:	2300      	movs	r3, #0
   14606:	6103      	str	r3, [r0, #16]
	interfaceTimer.Stop();
   14608:	4d09      	ldr	r5, [pc, #36]	; (14630 <_ZN16Maintenance_ToolD1Ev+0x34>)
   1460a:	4628      	mov	r0, r5
   1460c:	4b09      	ldr	r3, [pc, #36]	; (14634 <_ZN16Maintenance_ToolD1Ev+0x38>)
   1460e:	4798      	blx	r3
	interfaceTimer.Remove_task();
   14610:	4628      	mov	r0, r5
   14612:	4b09      	ldr	r3, [pc, #36]	; (14638 <_ZN16Maintenance_ToolD1Ev+0x3c>)
   14614:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
   14616:	4909      	ldr	r1, [pc, #36]	; (1463c <_ZN16Maintenance_ToolD1Ev+0x40>)
   14618:	4620      	mov	r0, r4
   1461a:	4b09      	ldr	r3, [pc, #36]	; (14640 <_ZN16Maintenance_ToolD1Ev+0x44>)
   1461c:	4798      	blx	r3
   1461e:	f504 7080 	add.w	r0, r4, #256	; 0x100
   14622:	4b08      	ldr	r3, [pc, #32]	; (14644 <_ZN16Maintenance_ToolD1Ev+0x48>)
   14624:	4798      	blx	r3
	
} //~Maintenance_Tool
   14626:	4620      	mov	r0, r4
   14628:	bd38      	pop	{r3, r4, r5, pc}
   1462a:	bf00      	nop
   1462c:	0001a8f8 	.word	0x0001a8f8
   14630:	20002838 	.word	0x20002838
   14634:	000121f1 	.word	0x000121f1
   14638:	00012309 	.word	0x00012309
   1463c:	0001a8e8 	.word	0x0001a8e8
   14640:	00014e6b 	.word	0x00014e6b
   14644:	00014fe1 	.word	0x00014fe1

00014648 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
   14648:	b538      	push	{r3, r4, r5, lr}
   1464a:	4604      	mov	r4, r0
   1464c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14650:	4b16      	ldr	r3, [pc, #88]	; (146ac <_ZN16Maintenance_ToolC1Ev+0x64>)
   14652:	4798      	blx	r3
   14654:	4916      	ldr	r1, [pc, #88]	; (146b0 <_ZN16Maintenance_ToolC1Ev+0x68>)
   14656:	4620      	mov	r0, r4
   14658:	4b16      	ldr	r3, [pc, #88]	; (146b4 <_ZN16Maintenance_ToolC1Ev+0x6c>)
   1465a:	4798      	blx	r3
   1465c:	4b16      	ldr	r3, [pc, #88]	; (146b8 <_ZN16Maintenance_ToolC1Ev+0x70>)
   1465e:	6023      	str	r3, [r4, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
   14660:	2300      	movs	r3, #0
   14662:	2564      	movs	r5, #100	; 0x64
   14664:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
   14668:	2063      	movs	r0, #99	; 0x63
   1466a:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
   1466e:	2162      	movs	r1, #98	; 0x62
   14670:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
   14674:	2261      	movs	r2, #97	; 0x61
   14676:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
   1467a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   1467e:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
   14682:	f884 00f3 	strb.w	r0, [r4, #243]	; 0xf3
   14686:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
   1468a:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
   1468e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	ptrMaintenanceTool=this;
   14692:	4a0a      	ldr	r2, [pc, #40]	; (146bc <_ZN16Maintenance_ToolC1Ev+0x74>)
   14694:	f842 4b04 	str.w	r4, [r2], #4
	maintenanceIsConnected = false;
   14698:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	nextMaintenanceSyncTime = 0;
   1469c:	61a3      	str	r3, [r4, #24]
	nextMaintenanceUsageTimerSyncTime = 0;
   1469e:	61e3      	str	r3, [r4, #28]
	ticks=0;
   146a0:	6123      	str	r3, [r4, #16]
	localBuffer=staticBuffer;
   146a2:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
} //Maintenance_Tool
   146a6:	4620      	mov	r0, r4
   146a8:	bd38      	pop	{r3, r4, r5, pc}
   146aa:	bf00      	nop
   146ac:	00014fc5 	.word	0x00014fc5
   146b0:	0001a8e8 	.word	0x0001a8e8
   146b4:	00014e51 	.word	0x00014e51
   146b8:	0001a8f8 	.word	0x0001a8f8
   146bc:	20002c80 	.word	0x20002c80

000146c0 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   146c0:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
   146c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		if (isConnected)
   146c6:	b919      	cbnz	r1, 146d0 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   146c8:	4805      	ldr	r0, [pc, #20]	; (146e0 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
   146ca:	4b06      	ldr	r3, [pc, #24]	; (146e4 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
   146cc:	4798      	blx	r3
   146ce:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   146d0:	f64e 2260 	movw	r2, #60000	; 0xea60
   146d4:	4904      	ldr	r1, [pc, #16]	; (146e8 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
   146d6:	4802      	ldr	r0, [pc, #8]	; (146e0 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
   146d8:	4b04      	ldr	r3, [pc, #16]	; (146ec <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   146da:	4798      	blx	r3
   146dc:	bd08      	pop	{r3, pc}
   146de:	bf00      	nop
   146e0:	20002838 	.word	0x20002838
   146e4:	000121f1 	.word	0x000121f1
   146e8:	000145ed 	.word	0x000145ed
   146ec:	000122d1 	.word	0x000122d1

000146f0 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   146f0:	b510      	push	{r4, lr}
   146f2:	4604      	mov	r4, r0
	result=false;
   146f4:	2300      	movs	r3, #0
   146f6:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	magic=0;
   146fa:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	if (gotAccess==true)
   146fe:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
   14702:	b12b      	cbz	r3, 14710 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   14704:	2301      	movs	r3, #1
   14706:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	return	result;
   1470a:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
}
   1470e:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
   14710:	4b16      	ldr	r3, [pc, #88]	; (1476c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   14712:	7d5b      	ldrb	r3, [r3, #21]
   14714:	b1b3      	cbz	r3, 14744 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
   14716:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1471a:	1e41      	subs	r1, r0, #1
   1471c:	3003      	adds	r0, #3
				magic=magic<<8;
   1471e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   14722:	021b      	lsls	r3, r3, #8
   14724:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				magic|= localBuffer[i];
   14728:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1472c:	4313      	orrs	r3, r2
   1472e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			for (int i = 0; i < 4; i++)
   14732:	4281      	cmp	r1, r0
   14734:	d1f3      	bne.n	1471e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   14736:	4a0e      	ldr	r2, [pc, #56]	; (14770 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   14738:	ea83 0102 	eor.w	r1, r3, r2
   1473c:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
			if (xorResult==0)
   14740:	4293      	cmp	r3, r2
   14742:	d006      	beq.n	14752 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14744:	2240      	movs	r2, #64	; 0x40
   14746:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   1474a:	4808      	ldr	r0, [pc, #32]	; (1476c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   1474c:	4b09      	ldr	r3, [pc, #36]	; (14774 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   1474e:	4798      	blx	r3
   14750:	e7db      	b.n	1470a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
   14752:	2101      	movs	r1, #1
   14754:	f884 10cd 	strb.w	r1, [r4, #205]	; 0xcd
				result=true;
   14758:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
				is_MTPC_Beaming=true;
   1475c:	7521      	strb	r1, [r4, #20]
				setConnected(true);
   1475e:	4620      	mov	r0, r4
   14760:	4b05      	ldr	r3, [pc, #20]	; (14778 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
   14762:	4798      	blx	r3
				return	result;
   14764:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   14768:	bd10      	pop	{r4, pc}
   1476a:	bf00      	nop
   1476c:	20002760 	.word	0x20002760
   14770:	61626364 	.word	0x61626364
   14774:	00011a09 	.word	0x00011a09
   14778:	000146c1 	.word	0x000146c1

0001477c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
   1477c:	b410      	push	{r4}
   1477e:	4604      	mov	r4, r0
   14780:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
   14782:	4619      	mov	r1, r3
   14784:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
   14788:	54d1      	strb	r1, [r2, r3]
   1478a:	1c58      	adds	r0, r3, #1
   1478c:	b2c0      	uxtb	r0, r0
   1478e:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
   14790:	2b40      	cmp	r3, #64	; 0x40
   14792:	d1f7      	bne.n	14784 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
   14794:	bc10      	pop	{r4}
   14796:	4770      	bx	lr

00014798 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
   14798:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1479c:	b92b      	cbnz	r3, 147aa <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
   1479e:	6183      	str	r3, [r0, #24]
		maintenanceIsConnected = true;
   147a0:	2301      	movs	r3, #1
   147a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		bSendNotifications = true;
   147a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
   147aa:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
   147ae:	4770      	bx	lr

000147b0 <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
   147b0:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
   147b2:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   147b6:	2b47      	cmp	r3, #71	; 0x47
   147b8:	d001      	beq.n	147be <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
   147ba:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
   147bc:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
   147be:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   147c2:	88db      	ldrh	r3, [r3, #6]
   147c4:	4601      	mov	r1, r0
   147c6:	f821 3fd4 	strh.w	r3, [r1, #212]!
		r=memory.SaveParameters(parameters);
   147ca:	4803      	ldr	r0, [pc, #12]	; (147d8 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x28>)
   147cc:	4b03      	ldr	r3, [pc, #12]	; (147dc <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
   147ce:	4798      	blx	r3
			result=(bool)(r==0);
   147d0:	fab0 f080 	clz	r0, r0
   147d4:	0940      	lsrs	r0, r0, #5
   147d6:	bd08      	pop	{r3, pc}
   147d8:	20003e0c 	.word	0x20003e0c
   147dc:	0001522d 	.word	0x0001522d

000147e0 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
   147e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   147e4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   147e8:	6819      	ldr	r1, [r3, #0]
   147ea:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   147ee:	8899      	ldrh	r1, [r3, #4]
   147f0:	799b      	ldrb	r3, [r3, #6]
   147f2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   147f6:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
   147fa:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   147fe:	2b49      	cmp	r3, #73	; 0x49
   14800:	bf0c      	ite	eq
   14802:	f04f 0801 	moveq.w	r8, #1
   14806:	f04f 0800 	movne.w	r8, #0
	if (result){
   1480a:	d002      	beq.n	14812 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
   1480c:	4640      	mov	r0, r8
   1480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
   14812:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   14816:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
		enableHeaters=singleTaskMessage.description;
   1481a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1481e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (enableHeaters!=lastEnableHeaters)
   14822:	429a      	cmp	r2, r3
   14824:	d0f2      	beq.n	1480c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
   14826:	4605      	mov	r5, r0
   14828:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
   1482a:	4f07      	ldr	r7, [pc, #28]	; (14848 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
   1482c:	4e07      	ldr	r6, [pc, #28]	; (1484c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
   1482e:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   14832:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
   14834:	f002 0201 	and.w	r2, r2, #1
   14838:	b2e1      	uxtb	r1, r4
   1483a:	4638      	mov	r0, r7
   1483c:	47b0      	blx	r6
   1483e:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
   14840:	2c04      	cmp	r4, #4
   14842:	d1f4      	bne.n	1482e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
   14844:	e7e2      	b.n	1480c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
   14846:	bf00      	nop
   14848:	20002c5c 	.word	0x20002c5c
   1484c:	000143c1 	.word	0x000143c1

00014850 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv>:


	

bool Maintenance_Tool::CommandSetFlapperValve(void){
   14850:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   14852:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   14856:	6819      	ldr	r1, [r3, #0]
   14858:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   1485c:	8899      	ldrh	r1, [r3, #4]
   1485e:	799b      	ldrb	r3, [r3, #6]
   14860:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   14864:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandFlapperValve);
   14868:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   1486c:	2b4f      	cmp	r3, #79	; 0x4f
   1486e:	bf0c      	ite	eq
   14870:	2401      	moveq	r4, #1
   14872:	2400      	movne	r4, #0
	if (result){
   14874:	d001      	beq.n	1487a <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x2a>
	}else{

	}
	
	return result;
}
   14876:	4620      	mov	r0, r4
   14878:	bd10      	pop	{r4, pc}
		if ((data&(0x01))>0)
   1487a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1487e:	f013 0f01 	tst.w	r3, #1
			fvc.StartControlling();
   14882:	4803      	ldr	r0, [pc, #12]	; (14890 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x40>)
   14884:	bf14      	ite	ne
   14886:	4b03      	ldrne	r3, [pc, #12]	; (14894 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x44>)
			fvc.StopControlling();
   14888:	4b03      	ldreq	r3, [pc, #12]	; (14898 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x48>)
   1488a:	4798      	blx	r3
   1488c:	e7f3      	b.n	14876 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x26>
   1488e:	bf00      	nop
   14890:	20002ac0 	.word	0x20002ac0
   14894:	00013859 	.word	0x00013859
   14898:	00013691 	.word	0x00013691

0001489c <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv>:


bool Maintenance_Tool::CommandSetFlapperPosition(void){
   1489c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   1489e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   148a2:	6819      	ldr	r1, [r3, #0]
   148a4:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   148a8:	8899      	ldrh	r1, [r3, #4]
   148aa:	799b      	ldrb	r3, [r3, #6]
   148ac:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   148b0:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
   148b4:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   148b8:	2b50      	cmp	r3, #80	; 0x50
   148ba:	bf0c      	ite	eq
   148bc:	2401      	moveq	r4, #1
   148be:	2400      	movne	r4, #0
	if (result){
   148c0:	d001      	beq.n	148c6 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x2a>
		}else{

	}
	
	return result;
}
   148c2:	4620      	mov	r0, r4
   148c4:	bd10      	pop	{r4, pc}
		if (fvc.controllerEnabled)
   148c6:	4b07      	ldr	r3, [pc, #28]	; (148e4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   148c8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   148cc:	b923      	cbnz	r3, 148d8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x3c>
		fvc.doPeriodicTask=false;
   148ce:	2200      	movs	r2, #0
   148d0:	4b04      	ldr	r3, [pc, #16]	; (148e4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   148d2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   148d6:	e7f4      	b.n	148c2 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x26>
			fvc.StartControlling(data);
   148d8:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   148dc:	4801      	ldr	r0, [pc, #4]	; (148e4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   148de:	4b02      	ldr	r3, [pc, #8]	; (148e8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x4c>)
   148e0:	4798      	blx	r3
   148e2:	e7f4      	b.n	148ce <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x32>
   148e4:	20002ac0 	.word	0x20002ac0
   148e8:	000136d5 	.word	0x000136d5

000148ec <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
   148ec:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
   148ee:	0855      	lsrs	r5, r2, #1
   148f0:	d007      	beq.n	14902 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
   148f2:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
   148f4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
   148f8:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
   148fa:	3401      	adds	r4, #1
   148fc:	b2a4      	uxth	r4, r4
   148fe:	42ac      	cmp	r4, r5
   14900:	dbf8      	blt.n	148f4 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
   14902:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
   14906:	bf1d      	ittte	ne
   14908:	189b      	addne	r3, r3, r2
   1490a:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
   1490e:	4048      	eorne	r0, r1
   14910:	4608      	moveq	r0, r1

	return checksum;
	}
   14912:	bc30      	pop	{r4, r5}
   14914:	4770      	bx	lr
	...

00014918 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
   14918:	b538      	push	{r3, r4, r5, lr}
   1491a:	4604      	mov	r4, r0
	checksum=0;
   1491c:	2500      	movs	r5, #0
   1491e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
	checksum = calculateChecksum(0, sizeof(header), &header);
   14922:	460b      	mov	r3, r1
   14924:	2206      	movs	r2, #6
   14926:	4629      	mov	r1, r5
   14928:	4d02      	ldr	r5, [pc, #8]	; (14934 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
   1492a:	47a8      	blx	r5
   1492c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
	}
   14930:	bd38      	pop	{r3, r4, r5, pc}
   14932:	bf00      	nop
   14934:	000148ed 	.word	0x000148ed

00014938 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
   14938:	4b06      	ldr	r3, [pc, #24]	; (14954 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
   1493a:	681b      	ldr	r3, [r3, #0]
   1493c:	600b      	str	r3, [r1, #0]
   1493e:	4b06      	ldr	r3, [pc, #24]	; (14958 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
   14940:	681b      	ldr	r3, [r3, #0]
   14942:	604b      	str	r3, [r1, #4]
   14944:	4b05      	ldr	r3, [pc, #20]	; (1495c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
   14946:	681b      	ldr	r3, [r3, #0]
   14948:	608b      	str	r3, [r1, #8]
   1494a:	4b05      	ldr	r3, [pc, #20]	; (14960 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
   1494c:	681b      	ldr	r3, [r3, #0]
   1494e:	60cb      	str	r3, [r1, #12]
   14950:	4770      	bx	lr
   14952:	bf00      	nop
   14954:	41002018 	.word	0x41002018
   14958:	4100201c 	.word	0x4100201c
   1495c:	41002020 	.word	0x41002020
   14960:	41002024 	.word	0x41002024

00014964 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
   14964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14966:	4604      	mov	r4, r0
	ticks=0;
   14968:	2600      	movs	r6, #0
   1496a:	6106      	str	r6, [r0, #16]
	interfaceTimer.Init();
   1496c:	4d13      	ldr	r5, [pc, #76]	; (149bc <_ZN16Maintenance_Tool4InitEv+0x58>)
   1496e:	4628      	mov	r0, r5
   14970:	4b13      	ldr	r3, [pc, #76]	; (149c0 <_ZN16Maintenance_Tool4InitEv+0x5c>)
   14972:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   14974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14978:	4912      	ldr	r1, [pc, #72]	; (149c4 <_ZN16Maintenance_Tool4InitEv+0x60>)
   1497a:	4628      	mov	r0, r5
   1497c:	4b12      	ldr	r3, [pc, #72]	; (149c8 <_ZN16Maintenance_Tool4InitEv+0x64>)
   1497e:	4798      	blx	r3
	InitCommandHandler(localBuffer);
   14980:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14984:	4620      	mov	r0, r4
   14986:	4b11      	ldr	r3, [pc, #68]	; (149cc <_ZN16Maintenance_Tool4InitEv+0x68>)
   14988:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
   1498a:	f104 05d7 	add.w	r5, r4, #215	; 0xd7
   1498e:	4629      	mov	r1, r5
   14990:	4620      	mov	r0, r4
   14992:	4b0f      	ldr	r3, [pc, #60]	; (149d0 <_ZN16Maintenance_Tool4InitEv+0x6c>)
   14994:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
   14996:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1499a:	f8d4 70d7 	ldr.w	r7, [r4, #215]	; 0xd7
   1499e:	f8d4 00db 	ldr.w	r0, [r4, #219]	; 0xdb
   149a2:	f8d4 10df 	ldr.w	r1, [r4, #223]	; 0xdf
   149a6:	f8d4 20e3 	ldr.w	r2, [r4, #227]	; 0xe3
   149aa:	601f      	str	r7, [r3, #0]
   149ac:	6058      	str	r0, [r3, #4]
   149ae:	6099      	str	r1, [r3, #8]
   149b0:	60da      	str	r2, [r3, #12]
	gotAccess=false;
   149b2:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
}
   149b6:	2001      	movs	r0, #1
   149b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149ba:	bf00      	nop
   149bc:	20002838 	.word	0x20002838
   149c0:	00012195 	.word	0x00012195
   149c4:	000145dd 	.word	0x000145dd
   149c8:	00012281 	.word	0x00012281
   149cc:	00014e71 	.word	0x00014e71
   149d0:	00014939 	.word	0x00014939

000149d4 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
   149d4:	b510      	push	{r4, lr}
   149d6:	4c05      	ldr	r4, [pc, #20]	; (149ec <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   149d8:	4620      	mov	r0, r4
   149da:	4b05      	ldr	r3, [pc, #20]	; (149f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   149dc:	4798      	blx	r3
   149de:	4a05      	ldr	r2, [pc, #20]	; (149f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   149e0:	4905      	ldr	r1, [pc, #20]	; (149f8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   149e2:	4620      	mov	r0, r4
   149e4:	4b05      	ldr	r3, [pc, #20]	; (149fc <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   149e6:	4798      	blx	r3
   149e8:	bd10      	pop	{r4, pc}
   149ea:	bf00      	nop
   149ec:	20002cc4 	.word	0x20002cc4
   149f0:	00014649 	.word	0x00014649
   149f4:	20000000 	.word	0x20000000
   149f8:	000145fd 	.word	0x000145fd
   149fc:	000170d1 	.word	0x000170d1

00014a00 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
   14a00:	b538      	push	{r3, r4, r5, lr}
   14a02:	4605      	mov	r5, r0
   14a04:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
   14a06:	4b05      	ldr	r3, [pc, #20]	; (14a1c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
   14a08:	4798      	blx	r3
   14a0a:	f8a5 00d0 	strh.w	r0, [r5, #208]	; 0xd0
	usb.writeData(&header, sizeof(header));
   14a0e:	2206      	movs	r2, #6
   14a10:	4621      	mov	r1, r4
   14a12:	4803      	ldr	r0, [pc, #12]	; (14a20 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
   14a14:	4b03      	ldr	r3, [pc, #12]	; (14a24 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
   14a16:	4798      	blx	r3
   14a18:	bd38      	pop	{r3, r4, r5, pc}
   14a1a:	bf00      	nop
   14a1c:	00014919 	.word	0x00014919
   14a20:	20002760 	.word	0x20002760
   14a24:	00011af5 	.word	0x00011af5

00014a28 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
   14a28:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
   14a2a:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   14a2e:	2b48      	cmp	r3, #72	; 0x48
   14a30:	bf0c      	ite	eq
   14a32:	2501      	moveq	r5, #1
   14a34:	2500      	movne	r5, #0
		if (result){
   14a36:	d001      	beq.n	14a3c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
   14a38:	4628      	mov	r0, r5
   14a3a:	bd38      	pop	{r3, r4, r5, pc}
   14a3c:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
   14a3e:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   14a42:	4812      	ldr	r0, [pc, #72]	; (14a8c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
   14a44:	4b12      	ldr	r3, [pc, #72]	; (14a90 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
   14a46:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
   14a48:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14a4c:	4a11      	ldr	r2, [pc, #68]	; (14a94 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
   14a4e:	601a      	str	r2, [r3, #0]
   14a50:	2200      	movs	r2, #0
   14a52:	711a      	strb	r2, [r3, #4]
   14a54:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
   14a56:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14a5a:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
   14a5e:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
   14a60:	4b0d      	ldr	r3, [pc, #52]	; (14a98 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
   14a62:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   14a66:	b15b      	cbz	r3, 14a80 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
   14a68:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14a6c:	f894 20d5 	ldrb.w	r2, [r4, #213]	; 0xd5
   14a70:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14a72:	2240      	movs	r2, #64	; 0x40
   14a74:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14a78:	4808      	ldr	r0, [pc, #32]	; (14a9c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
   14a7a:	4b09      	ldr	r3, [pc, #36]	; (14aa0 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
   14a7c:	4798      	blx	r3
   14a7e:	e7db      	b.n	14a38 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
   14a80:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14a84:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
   14a88:	721a      	strb	r2, [r3, #8]
   14a8a:	e7f2      	b.n	14a72 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
   14a8c:	20003e0c 	.word	0x20003e0c
   14a90:	00015075 	.word	0x00015075
   14a94:	61626364 	.word	0x61626364
   14a98:	20002ac0 	.word	0x20002ac0
   14a9c:	20002760 	.word	0x20002760
   14aa0:	00011b8d 	.word	0x00011b8d

00014aa4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
   14aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
   14aa6:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   14aaa:	2b4a      	cmp	r3, #74	; 0x4a
   14aac:	bf0c      	ite	eq
   14aae:	2501      	moveq	r5, #1
   14ab0:	2500      	movne	r5, #0
	if (result){
   14ab2:	d001      	beq.n	14ab8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
   14ab4:	4628      	mov	r0, r5
   14ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ab8:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
   14aba:	4f11      	ldr	r7, [pc, #68]	; (14b00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
   14abc:	4638      	mov	r0, r7
   14abe:	4b11      	ldr	r3, [pc, #68]	; (14b04 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
   14ac0:	4798      	blx	r3
   14ac2:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
   14ac4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14ac8:	4a0f      	ldr	r2, [pc, #60]	; (14b08 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
   14aca:	601a      	str	r2, [r3, #0]
   14acc:	2200      	movs	r2, #0
   14ace:	711a      	strb	r2, [r3, #4]
   14ad0:	224a      	movs	r2, #74	; 0x4a
   14ad2:	715a      	strb	r2, [r3, #5]
   14ad4:	7198      	strb	r0, [r3, #6]
			if (!heater.heaterStatusChanged)
   14ad6:	787b      	ldrb	r3, [r7, #1]
   14ad8:	b15b      	cbz	r3, 14af2 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4e>
			singleTaskMessage=singleTask;
   14ada:	4b0b      	ldr	r3, [pc, #44]	; (14b08 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
   14adc:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   14ae0:	2200      	movs	r2, #0
   14ae2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
   14ae6:	234a      	movs	r3, #74	; 0x4a
   14ae8:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   14aec:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
   14af0:	e7e0      	b.n	14ab4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14af2:	2240      	movs	r2, #64	; 0x40
   14af4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14af8:	4804      	ldr	r0, [pc, #16]	; (14b0c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
   14afa:	4b05      	ldr	r3, [pc, #20]	; (14b10 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
   14afc:	4798      	blx	r3
   14afe:	e7ec      	b.n	14ada <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x36>
   14b00:	20002c5c 	.word	0x20002c5c
   14b04:	000142c9 	.word	0x000142c9
   14b08:	61626364 	.word	0x61626364
   14b0c:	20002760 	.word	0x20002760
   14b10:	00011b8d 	.word	0x00011b8d

00014b14 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv>:
bool Maintenance_Tool::CommandReadFlapperData(){
   14b14:	b570      	push	{r4, r5, r6, lr}
	bool	result(header.task == kHVACReadPositionFlapperValve);
   14b16:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   14b1a:	2b4e      	cmp	r3, #78	; 0x4e
   14b1c:	bf0c      	ite	eq
   14b1e:	2501      	moveq	r5, #1
   14b20:	2500      	movne	r5, #0
	if (result){
   14b22:	d001      	beq.n	14b28 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x14>
}
   14b24:	4628      	mov	r0, r5
   14b26:	bd70      	pop	{r4, r5, r6, pc}
   14b28:	4604      	mov	r4, r0
		fvc.UpdateFlapperValveData();
   14b2a:	4e0f      	ldr	r6, [pc, #60]	; (14b68 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x54>)
   14b2c:	4630      	mov	r0, r6
   14b2e:	4b0f      	ldr	r3, [pc, #60]	; (14b6c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x58>)
   14b30:	4798      	blx	r3
		CreateFullBufferMessage(localBuffer,(uint8_t*)&fvc.dataStruct);
   14b32:	6823      	ldr	r3, [r4, #0]
   14b34:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   14b38:	f106 0280 	add.w	r2, r6, #128	; 0x80
   14b3c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14b40:	4420      	add	r0, r4
   14b42:	4b0b      	ldr	r3, [pc, #44]	; (14b70 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x5c>)
   14b44:	4798      	blx	r3
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14b46:	2240      	movs	r2, #64	; 0x40
   14b48:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14b4c:	4809      	ldr	r0, [pc, #36]	; (14b74 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x60>)
   14b4e:	4b0a      	ldr	r3, [pc, #40]	; (14b78 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x64>)
   14b50:	4798      	blx	r3
		singleTaskMessage=singleTask;
   14b52:	4b0a      	ldr	r3, [pc, #40]	; (14b7c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x68>)
   14b54:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   14b58:	2300      	movs	r3, #0
   14b5a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14b5e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   14b62:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   14b66:	e7dd      	b.n	14b24 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x10>
   14b68:	20002ac0 	.word	0x20002ac0
   14b6c:	000138b5 	.word	0x000138b5
   14b70:	00014fe5 	.word	0x00014fe5
   14b74:	20002760 	.word	0x20002760
   14b78:	00011b8d 	.word	0x00011b8d
   14b7c:	61626364 	.word	0x61626364

00014b80 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
   14b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
   14b84:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   14b88:	2b4d      	cmp	r3, #77	; 0x4d
   14b8a:	bf0c      	ite	eq
   14b8c:	2501      	moveq	r5, #1
   14b8e:	2500      	movne	r5, #0
	if (result){
   14b90:	d002      	beq.n	14b98 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
   14b92:	4628      	mov	r0, r5
   14b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
   14b98:	4b18      	ldr	r3, [pc, #96]	; (14bfc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
   14b9a:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
   14b9e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   14ba2:	4a17      	ldr	r2, [pc, #92]	; (14c00 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
   14ba4:	601a      	str	r2, [r3, #0]
   14ba6:	2200      	movs	r2, #0
   14ba8:	711a      	strb	r2, [r3, #4]
   14baa:	224d      	movs	r2, #77	; 0x4d
   14bac:	715a      	strb	r2, [r3, #5]
   14bae:	f883 8006 	strb.w	r8, [r3, #6]
   14bb2:	2307      	movs	r3, #7
   14bb4:	4911      	ldr	r1, [pc, #68]	; (14bfc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
   14bb6:	f103 0261 	add.w	r2, r3, #97	; 0x61
   14bba:	440a      	add	r2, r1
   14bbc:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
   14bc0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   14bc4:	f8d0 60fc 	ldr.w	r6, [r0, #252]	; 0xfc
   14bc8:	50f4      	str	r4, [r6, r3]
   14bca:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
   14bcc:	42bb      	cmp	r3, r7
   14bce:	d1f7      	bne.n	14bc0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
   14bd0:	2b37      	cmp	r3, #55	; 0x37
   14bd2:	d1f0      	bne.n	14bb6 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
   14bd4:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14bd6:	2240      	movs	r2, #64	; 0x40
   14bd8:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
   14bdc:	4809      	ldr	r0, [pc, #36]	; (14c04 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
   14bde:	4b0a      	ldr	r3, [pc, #40]	; (14c08 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
   14be0:	4798      	blx	r3
		singleTaskMessage=singleTask;
   14be2:	4b07      	ldr	r3, [pc, #28]	; (14c00 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
   14be4:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   14be8:	2200      	movs	r2, #0
   14bea:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
   14bee:	234d      	movs	r3, #77	; 0x4d
   14bf0:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   14bf4:	f884 80f8 	strb.w	r8, [r4, #248]	; 0xf8
   14bf8:	e7cb      	b.n	14b92 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
   14bfa:	bf00      	nop
   14bfc:	200091dc 	.word	0x200091dc
   14c00:	61626364 	.word	0x61626364
   14c04:	20002760 	.word	0x20002760
   14c08:	00011b8d 	.word	0x00011b8d

00014c0c <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
   14c0c:	b570      	push	{r4, r5, r6, lr}
   14c0e:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
   14c10:	f100 0568 	add.w	r5, r0, #104	; 0x68
   14c14:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   14c18:	681a      	ldr	r2, [r3, #0]
   14c1a:	6682      	str	r2, [r0, #104]	; 0x68
   14c1c:	889b      	ldrh	r3, [r3, #4]
   14c1e:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
   14c20:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   14c24:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
   14c26:	b2db      	uxtb	r3, r3
   14c28:	2b16      	cmp	r3, #22
   14c2a:	d817      	bhi.n	14c5c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x50>
		gotTask=true;
   14c2c:	2301      	movs	r3, #1
   14c2e:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		result=gotTask;
   14c32:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
		switch (header.task)
   14c36:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   14c3a:	3b41      	subs	r3, #65	; 0x41
   14c3c:	2b16      	cmp	r3, #22
   14c3e:	d878      	bhi.n	14d32 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x126>
   14c40:	e8df f003 	tbb	[pc, r3]
   14c44:	2c1c261f 	.word	0x2c1c261f
   14c48:	3b351c1c 	.word	0x3b351c1c
   14c4c:	534d4741 	.word	0x534d4741
   14c50:	716b655f 	.word	0x716b655f
   14c54:	1c1c1c59 	.word	0x1c1c1c59
   14c58:	7777      	.short	0x7777
   14c5a:	1c          	.byte	0x1c
   14c5b:	00          	.byte	0x00
		gotTask=false;
   14c5c:	2300      	movs	r3, #0
   14c5e:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
   14c62:	4e36      	ldr	r6, [pc, #216]	; (14d3c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
   14c64:	2240      	movs	r2, #64	; 0x40
   14c66:	f100 01fc 	add.w	r1, r0, #252	; 0xfc
   14c6a:	4630      	mov	r0, r6
   14c6c:	4b34      	ldr	r3, [pc, #208]	; (14d40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
   14c6e:	4798      	blx	r3
		result=usb.rxReady;
   14c70:	7d73      	ldrb	r3, [r6, #21]
   14c72:	b2db      	uxtb	r3, r3
   14c74:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (result)
   14c78:	2b00      	cmp	r3, #0
   14c7a:	d1dc      	bne.n	14c36 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2a>
	}
   14c7c:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   14c80:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
   14c82:	4629      	mov	r1, r5
   14c84:	4620      	mov	r0, r4
   14c86:	4b2f      	ldr	r3, [pc, #188]	; (14d44 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
   14c88:	4798      	blx	r3
   14c8a:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14c8e:	e7f5      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
	maintenanceIsConnected = false;
   14c90:	2300      	movs	r3, #0
   14c92:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	bSendNotifications = false;
   14c96:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
				break;
   14c9a:	e7ef      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				notifyGAINCommandReceived( header, result);
   14c9c:	2201      	movs	r2, #1
   14c9e:	4629      	mov	r1, r5
   14ca0:	4620      	mov	r0, r4
   14ca2:	4b29      	ldr	r3, [pc, #164]	; (14d48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
   14ca4:	4798      	blx	r3
				result = handleGAINCommandReset(header);
   14ca6:	2301      	movs	r3, #1
   14ca8:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   14cac:	e7e6      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandWriteParameters();
   14cae:	4620      	mov	r0, r4
   14cb0:	4b26      	ldr	r3, [pc, #152]	; (14d4c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
   14cb2:	4798      	blx	r3
   14cb4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14cb8:	e7e0      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadParameters();
   14cba:	4620      	mov	r0, r4
   14cbc:	4b24      	ldr	r3, [pc, #144]	; (14d50 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
   14cbe:	4798      	blx	r3
   14cc0:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14cc4:	e7da      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetHeaters();
   14cc6:	4620      	mov	r0, r4
   14cc8:	4b22      	ldr	r3, [pc, #136]	; (14d54 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
   14cca:	4798      	blx	r3
   14ccc:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14cd0:	e7d4      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadHeaterStatus();
   14cd2:	4620      	mov	r0, r4
   14cd4:	4b20      	ldr	r3, [pc, #128]	; (14d58 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
   14cd6:	4798      	blx	r3
   14cd8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14cdc:	e7ce      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetEnableFans();
   14cde:	4620      	mov	r0, r4
   14ce0:	4b1e      	ldr	r3, [pc, #120]	; (14d5c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
   14ce2:	4798      	blx	r3
   14ce4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14ce8:	e7c8      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetPWMFans();
   14cea:	4620      	mov	r0, r4
   14cec:	4b1c      	ldr	r3, [pc, #112]	; (14d60 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
   14cee:	4798      	blx	r3
   14cf0:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14cf4:	e7c2      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandFansStatus();
   14cf6:	4620      	mov	r0, r4
   14cf8:	4b1a      	ldr	r3, [pc, #104]	; (14d64 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
   14cfa:	4798      	blx	r3
   14cfc:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14d00:	e7bc      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadTemmperatures();
   14d02:	4620      	mov	r0, r4
   14d04:	4b18      	ldr	r3, [pc, #96]	; (14d68 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
   14d06:	4798      	blx	r3
   14d08:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14d0c:	e7b6      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadFlapperData();
   14d0e:	4620      	mov	r0, r4
   14d10:	4b16      	ldr	r3, [pc, #88]	; (14d6c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
   14d12:	4798      	blx	r3
   14d14:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14d18:	e7b0      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperValve();
   14d1a:	4620      	mov	r0, r4
   14d1c:	4b14      	ldr	r3, [pc, #80]	; (14d70 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
   14d1e:	4798      	blx	r3
   14d20:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14d24:	e7aa      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperPosition();
   14d26:	4620      	mov	r0, r4
   14d28:	4b12      	ldr	r3, [pc, #72]	; (14d74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
   14d2a:	4798      	blx	r3
   14d2c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14d30:	e7a4      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = false;
   14d32:	2300      	movs	r3, #0
   14d34:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   14d38:	e7a0      	b.n	14c7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
   14d3a:	bf00      	nop
   14d3c:	20002760 	.word	0x20002760
   14d40:	00011a09 	.word	0x00011a09
   14d44:	00014799 	.word	0x00014799
   14d48:	00014a01 	.word	0x00014a01
   14d4c:	000147b1 	.word	0x000147b1
   14d50:	00014a29 	.word	0x00014a29
   14d54:	000147e1 	.word	0x000147e1
   14d58:	00014aa5 	.word	0x00014aa5
   14d5c:	00014ef9 	.word	0x00014ef9
   14d60:	00014f25 	.word	0x00014f25
   14d64:	00014f71 	.word	0x00014f71
   14d68:	00014b81 	.word	0x00014b81
   14d6c:	00014b15 	.word	0x00014b15
   14d70:	00014851 	.word	0x00014851
   14d74:	0001489d 	.word	0x0001489d

00014d78 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
   14d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d7a:	4604      	mov	r4, r0
	result=false;
   14d7c:	2300      	movs	r3, #0
   14d7e:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	if (gotAccess)
   14d82:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
   14d86:	2b00      	cmp	r3, #0
   14d88:	d04c      	beq.n	14e24 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
   14d8a:	4b28      	ldr	r3, [pc, #160]	; (14e2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
   14d8c:	7d5b      	ldrb	r3, [r3, #21]
   14d8e:	b95b      	cbnz	r3, 14da8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
   14d90:	2300      	movs	r3, #0
   14d92:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14d96:	2240      	movs	r2, #64	; 0x40
   14d98:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   14d9c:	4823      	ldr	r0, [pc, #140]	; (14e2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
   14d9e:	4b24      	ldr	r3, [pc, #144]	; (14e30 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
   14da0:	4798      	blx	r3
	}
   14da2:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   14da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
   14da8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   14dac:	681a      	ldr	r2, [r3, #0]
   14dae:	6682      	str	r2, [r0, #104]	; 0x68
   14db0:	889b      	ldrh	r3, [r3, #4]
   14db2:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
			switch (input){
   14db6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   14dba:	2b3d      	cmp	r3, #61	; 0x3d
   14dbc:	d017      	beq.n	14dee <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
   14dbe:	2b3e      	cmp	r3, #62	; 0x3e
   14dc0:	d010      	beq.n	14de4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
   14dc2:	2b3c      	cmp	r3, #60	; 0x3c
   14dc4:	d003      	beq.n	14dce <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
   14dc6:	2300      	movs	r3, #0
   14dc8:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
				break;
   14dcc:	e006      	b.n	14ddc <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
   14dce:	2301      	movs	r3, #1
   14dd0:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
					result = handleHVACTask();
   14dd4:	4b17      	ldr	r3, [pc, #92]	; (14e34 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
   14dd6:	4798      	blx	r3
   14dd8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
			ClearLocalBuffer();
   14ddc:	4620      	mov	r0, r4
   14dde:	4b16      	ldr	r3, [pc, #88]	; (14e38 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
   14de0:	4798      	blx	r3
   14de2:	e7d8      	b.n	14d96 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
   14de4:	4b13      	ldr	r3, [pc, #76]	; (14e34 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
   14de6:	4798      	blx	r3
   14de8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   14dec:	e7f6      	b.n	14ddc <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
   14dee:	2501      	movs	r5, #1
   14df0:	7505      	strb	r5, [r0, #20]
					interfaceTimer.Stop();
   14df2:	4e12      	ldr	r6, [pc, #72]	; (14e3c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
   14df4:	4630      	mov	r0, r6
   14df6:	4b12      	ldr	r3, [pc, #72]	; (14e40 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
   14df8:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
   14dfa:	4f12      	ldr	r7, [pc, #72]	; (14e44 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
   14dfc:	4639      	mov	r1, r7
   14dfe:	4630      	mov	r0, r6
   14e00:	4b11      	ldr	r3, [pc, #68]	; (14e48 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
   14e02:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
   14e04:	f242 7210 	movw	r2, #10000	; 0x2710
   14e08:	4639      	mov	r1, r7
   14e0a:	4630      	mov	r0, r6
   14e0c:	4b0f      	ldr	r3, [pc, #60]	; (14e4c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
   14e0e:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
   14e10:	2300      	movs	r3, #0
   14e12:	61a3      	str	r3, [r4, #24]
					maintenanceIsConnected = true;
   14e14:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
					bSendNotifications = true;
   14e18:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
					result=is_MTPC_Beaming;
   14e1c:	7d23      	ldrb	r3, [r4, #20]
   14e1e:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   14e22:	e7db      	b.n	14ddc <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
   14e24:	2300      	movs	r3, #0
   14e26:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
   14e2a:	e7ba      	b.n	14da2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
   14e2c:	20002760 	.word	0x20002760
   14e30:	00011a09 	.word	0x00011a09
   14e34:	00014c0d 	.word	0x00014c0d
   14e38:	0001477d 	.word	0x0001477d
   14e3c:	20002838 	.word	0x20002838
   14e40:	000121f1 	.word	0x000121f1
   14e44:	000145ed 	.word	0x000145ed
   14e48:	00012335 	.word	0x00012335
   14e4c:	000122d1 	.word	0x000122d1

00014e50 <_ZN16Commands_HandlerC2Ev>:
#include "string.h"
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"

// default constructor
Commands_Handler::Commands_Handler()
   14e50:	680a      	ldr	r2, [r1, #0]
   14e52:	6002      	str	r2, [r0, #0]
   14e54:	2264      	movs	r2, #100	; 0x64
   14e56:	7102      	strb	r2, [r0, #4]
   14e58:	2263      	movs	r2, #99	; 0x63
   14e5a:	7142      	strb	r2, [r0, #5]
   14e5c:	2262      	movs	r2, #98	; 0x62
   14e5e:	7182      	strb	r2, [r0, #6]
   14e60:	2261      	movs	r2, #97	; 0x61
   14e62:	71c2      	strb	r2, [r0, #7]
   14e64:	2200      	movs	r2, #0
   14e66:	7242      	strb	r2, [r0, #9]
{
	
} //Commands_Handler
   14e68:	4770      	bx	lr

00014e6a <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
   14e6a:	680b      	ldr	r3, [r1, #0]
   14e6c:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
   14e6e:	4770      	bx	lr

00014e70 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
   14e70:	60c1      	str	r1, [r0, #12]
   14e72:	4770      	bx	lr

00014e74 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
   14e74:	b510      	push	{r4, lr}
   14e76:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
   14e78:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
   14e7c:	bf14      	ite	ne
   14e7e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
   14e80:	2100      	moveq	r1, #0
   14e82:	4b03      	ldr	r3, [pc, #12]	; (14e90 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
   14e84:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   14e86:	4b03      	ldr	r3, [pc, #12]	; (14e94 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
   14e88:	4798      	blx	r3
	}
	return data;
}
   14e8a:	4620      	mov	r0, r4
   14e8c:	bd10      	pop	{r4, pc}
   14e8e:	bf00      	nop
   14e90:	200029b8 	.word	0x200029b8
   14e94:	00012855 	.word	0x00012855

00014e98 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
   14e98:	b538      	push	{r3, r4, r5, lr}
   14e9a:	4605      	mov	r5, r0
   14e9c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
   14e9e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
   14ea2:	bf14      	ite	ne
   14ea4:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
   14ea6:	2100      	moveq	r1, #0
   14ea8:	4b04      	ldr	r3, [pc, #16]	; (14ebc <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
   14eaa:	6e18      	ldr	r0, [r3, #96]	; 0x60
   14eac:	4b04      	ldr	r3, [pc, #16]	; (14ec0 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
   14eae:	4798      	blx	r3
	return SetEnableFan1(data);
   14eb0:	4621      	mov	r1, r4
   14eb2:	4628      	mov	r0, r5
   14eb4:	4b03      	ldr	r3, [pc, #12]	; (14ec4 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
   14eb6:	4798      	blx	r3
}
   14eb8:	bd38      	pop	{r3, r4, r5, pc}
   14eba:	bf00      	nop
   14ebc:	200029b8 	.word	0x200029b8
   14ec0:	00012855 	.word	0x00012855
   14ec4:	00014e75 	.word	0x00014e75

00014ec8 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
   14ec8:	b538      	push	{r3, r4, r5, lr}
   14eca:	4605      	mov	r5, r0
   14ecc:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
   14ece:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
   14ed2:	bf14      	ite	ne
   14ed4:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
   14ed6:	2100      	moveq	r1, #0
   14ed8:	4b04      	ldr	r3, [pc, #16]	; (14eec <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
   14eda:	6e58      	ldr	r0, [r3, #100]	; 0x64
   14edc:	4b04      	ldr	r3, [pc, #16]	; (14ef0 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
   14ede:	4798      	blx	r3
	return SetEnableFan2(data);
   14ee0:	4621      	mov	r1, r4
   14ee2:	4628      	mov	r0, r5
   14ee4:	4b03      	ldr	r3, [pc, #12]	; (14ef4 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
   14ee6:	4798      	blx	r3
}
   14ee8:	bd38      	pop	{r3, r4, r5, pc}
   14eea:	bf00      	nop
   14eec:	200029b8 	.word	0x200029b8
   14ef0:	000124fd 	.word	0x000124fd
   14ef4:	00014e99 	.word	0x00014e99

00014ef8 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
   14ef8:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
   14efa:	68c3      	ldr	r3, [r0, #12]
   14efc:	6819      	ldr	r1, [r3, #0]
   14efe:	6041      	str	r1, [r0, #4]
   14f00:	8899      	ldrh	r1, [r3, #4]
   14f02:	799b      	ldrb	r3, [r3, #6]
   14f04:	8101      	strh	r1, [r0, #8]
   14f06:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
   14f08:	7a43      	ldrb	r3, [r0, #9]
   14f0a:	2b4b      	cmp	r3, #75	; 0x4b
   14f0c:	bf0c      	ite	eq
   14f0e:	2401      	moveq	r4, #1
   14f10:	2400      	movne	r4, #0
	if (result){
   14f12:	d001      	beq.n	14f18 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
   14f14:	4620      	mov	r0, r4
   14f16:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
   14f18:	7a81      	ldrb	r1, [r0, #10]
   14f1a:	4b01      	ldr	r3, [pc, #4]	; (14f20 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
   14f1c:	4798      	blx	r3
   14f1e:	e7f9      	b.n	14f14 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
   14f20:	00014ec9 	.word	0x00014ec9

00014f24 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
   14f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
   14f26:	68c3      	ldr	r3, [r0, #12]
   14f28:	6819      	ldr	r1, [r3, #0]
   14f2a:	6041      	str	r1, [r0, #4]
   14f2c:	8899      	ldrh	r1, [r3, #4]
   14f2e:	799b      	ldrb	r3, [r3, #6]
   14f30:	8101      	strh	r1, [r0, #8]
   14f32:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == 	kHVACCommandSetPWMFans);
   14f34:	7a43      	ldrb	r3, [r0, #9]
   14f36:	2b4c      	cmp	r3, #76	; 0x4c
   14f38:	bf0c      	ite	eq
   14f3a:	2401      	moveq	r4, #1
   14f3c:	2400      	movne	r4, #0
	if (result){
   14f3e:	d001      	beq.n	14f44 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x20>
		}else{

	}
	
	return result;
}
   14f40:	4620      	mov	r0, r4
   14f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
   14f44:	7a85      	ldrb	r5, [r0, #10]
		if (data>0)
   14f46:	2d00      	cmp	r5, #0
   14f48:	d0fa      	beq.n	14f40 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
			fans.evaporator[0]->SetPWM(data);
   14f4a:	4e06      	ldr	r6, [pc, #24]	; (14f64 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x40>)
   14f4c:	4629      	mov	r1, r5
   14f4e:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   14f50:	4f05      	ldr	r7, [pc, #20]	; (14f68 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x44>)
   14f52:	47b8      	blx	r7
			fans.evaporator[1]->SetPWM(data);
   14f54:	4629      	mov	r1, r5
   14f56:	6e30      	ldr	r0, [r6, #96]	; 0x60
   14f58:	47b8      	blx	r7
			fans.condesator->SetPWM(data);
   14f5a:	4629      	mov	r1, r5
   14f5c:	6e70      	ldr	r0, [r6, #100]	; 0x64
   14f5e:	4b03      	ldr	r3, [pc, #12]	; (14f6c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x48>)
   14f60:	4798      	blx	r3
   14f62:	e7ed      	b.n	14f40 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
   14f64:	200029b8 	.word	0x200029b8
   14f68:	00012879 	.word	0x00012879
   14f6c:	00012531 	.word	0x00012531

00014f70 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
   14f70:	b530      	push	{r4, r5, lr}
   14f72:	b083      	sub	sp, #12
	uint8_t gpios[2];
	SingleTaskMessage	singleTask;
	memcpy(&singleTask,usbMessageBuffer,sizeof(SingleTaskMessage));
   14f74:	68c3      	ldr	r3, [r0, #12]
   14f76:	795b      	ldrb	r3, [r3, #5]
	bool	result(singleTask.header.task == kHVACCommandRedStatusFans);
   14f78:	2b51      	cmp	r3, #81	; 0x51
   14f7a:	bf0c      	ite	eq
   14f7c:	2501      	moveq	r5, #1
   14f7e:	2500      	movne	r5, #0
	if (result){
   14f80:	d002      	beq.n	14f88 <_ZN16Commands_Handler17CommandFansStatusEv+0x18>

		
	}
	
	return result;
   14f82:	4628      	mov	r0, r5
   14f84:	b003      	add	sp, #12
   14f86:	bd30      	pop	{r4, r5, pc}
   14f88:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
   14f8a:	a901      	add	r1, sp, #4
   14f8c:	4808      	ldr	r0, [pc, #32]	; (14fb0 <_ZN16Commands_Handler17CommandFansStatusEv+0x40>)
   14f8e:	4b09      	ldr	r3, [pc, #36]	; (14fb4 <_ZN16Commands_Handler17CommandFansStatusEv+0x44>)
   14f90:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
   14f92:	6823      	ldr	r3, [r4, #0]
   14f94:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   14f98:	aa01      	add	r2, sp, #4
   14f9a:	68e1      	ldr	r1, [r4, #12]
   14f9c:	4420      	add	r0, r4
   14f9e:	4b06      	ldr	r3, [pc, #24]	; (14fb8 <_ZN16Commands_Handler17CommandFansStatusEv+0x48>)
   14fa0:	4798      	blx	r3
			usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   14fa2:	2240      	movs	r2, #64	; 0x40
   14fa4:	68e1      	ldr	r1, [r4, #12]
   14fa6:	4805      	ldr	r0, [pc, #20]	; (14fbc <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
   14fa8:	4b05      	ldr	r3, [pc, #20]	; (14fc0 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
   14faa:	4798      	blx	r3
   14fac:	e7e9      	b.n	14f82 <_ZN16Commands_Handler17CommandFansStatusEv+0x12>
   14fae:	bf00      	nop
   14fb0:	200029b8 	.word	0x200029b8
   14fb4:	000126f9 	.word	0x000126f9
   14fb8:	00014fe5 	.word	0x00014fe5
   14fbc:	20002760 	.word	0x20002760
   14fc0:	00011b8d 	.word	0x00011b8d

00014fc4 <_ZN22MaintenanceDataHandlerC1Ev>:
   14fc4:	2264      	movs	r2, #100	; 0x64
   14fc6:	7002      	strb	r2, [r0, #0]
   14fc8:	2263      	movs	r2, #99	; 0x63
   14fca:	7042      	strb	r2, [r0, #1]
   14fcc:	2262      	movs	r2, #98	; 0x62
   14fce:	7082      	strb	r2, [r0, #2]
   14fd0:	2261      	movs	r2, #97	; 0x61
   14fd2:	70c2      	strb	r2, [r0, #3]
   14fd4:	2200      	movs	r2, #0
   14fd6:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
   14fd8:	223a      	movs	r2, #58	; 0x3a
   14fda:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
   14fde:	4770      	bx	lr

00014fe0 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
   14fe0:	4770      	bx	lr
	...

00014fe4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
   14fe4:	b570      	push	{r4, r5, r6, lr}
   14fe6:	4605      	mov	r5, r0
   14fe8:	460c      	mov	r4, r1
   14fea:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
   14fec:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   14ff0:	3006      	adds	r0, #6
   14ff2:	4b09      	ldr	r3, [pc, #36]	; (15018 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
   14ff4:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
   14ff6:	462b      	mov	r3, r5
   14ff8:	4621      	mov	r1, r4
   14ffa:	3540      	adds	r5, #64	; 0x40
   14ffc:	681e      	ldr	r6, [r3, #0]
   14ffe:	685c      	ldr	r4, [r3, #4]
   15000:	6898      	ldr	r0, [r3, #8]
   15002:	68da      	ldr	r2, [r3, #12]
   15004:	600e      	str	r6, [r1, #0]
   15006:	604c      	str	r4, [r1, #4]
   15008:	6088      	str	r0, [r1, #8]
   1500a:	60ca      	str	r2, [r1, #12]
   1500c:	3310      	adds	r3, #16
   1500e:	3110      	adds	r1, #16
   15010:	42ab      	cmp	r3, r5
   15012:	d1f3      	bne.n	14ffc <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
   15014:	2000      	movs	r0, #0
   15016:	bd70      	pop	{r4, r5, r6, pc}
   15018:	000191a9 	.word	0x000191a9

0001501c <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   1501c:	4770      	bx	lr

0001501e <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   1501e:	4770      	bx	lr

00015020 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
   15020:	b5f0      	push	{r4, r5, r6, r7, lr}
   15022:	b083      	sub	sp, #12
   15024:	4607      	mov	r7, r0
   15026:	460d      	mov	r5, r1
   15028:	4616      	mov	r6, r2
	crc_sync_enable(&CRC_CALC);
   1502a:	4c09      	ldr	r4, [pc, #36]	; (15050 <_ZN11CRC32_Class12CalculateCRCEPmm+0x30>)
   1502c:	4620      	mov	r0, r4
   1502e:	4b09      	ldr	r3, [pc, #36]	; (15054 <_ZN11CRC32_Class12CalculateCRCEPmm+0x34>)
   15030:	4798      	blx	r3
	refCRC32=refCRC;
   15032:	f04f 32ff 	mov.w	r2, #4294967295
   15036:	603a      	str	r2, [r7, #0]
	uint32_t	lenght32=(uint32_t)floor(len/4);
	uint32_t crc=Init();
   15038:	ab02      	add	r3, sp, #8
   1503a:	f843 2d04 	str.w	r2, [r3, #-4]!
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
   1503e:	08b2      	lsrs	r2, r6, #2
   15040:	4629      	mov	r1, r5
   15042:	4620      	mov	r0, r4
   15044:	4c04      	ldr	r4, [pc, #16]	; (15058 <_ZN11CRC32_Class12CalculateCRCEPmm+0x38>)
   15046:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
   15048:	9801      	ldr	r0, [sp, #4]
   1504a:	43c0      	mvns	r0, r0
   1504c:	b003      	add	sp, #12
   1504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15050:	20009898 	.word	0x20009898
   15054:	00003e05 	.word	0x00003e05
   15058:	00003e41 	.word	0x00003e41

0001505c <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   1505c:	4770      	bx	lr

0001505e <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   1505e:	4770      	bx	lr

00015060 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   15060:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   15062:	2302      	movs	r3, #2
   15064:	4801      	ldr	r0, [pc, #4]	; (1506c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   15066:	4c02      	ldr	r4, [pc, #8]	; (15070 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   15068:	47a0      	blx	r4
	return	r;
}
   1506a:	bd10      	pop	{r4, pc}
   1506c:	2000948c 	.word	0x2000948c
   15070:	00016df9 	.word	0x00016df9

00015074 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   15074:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   15076:	4b03      	ldr	r3, [pc, #12]	; (15084 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   15078:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   1507a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1507e:	4b02      	ldr	r3, [pc, #8]	; (15088 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   15080:	4798      	blx	r3
}
   15082:	bd08      	pop	{r3, pc}
   15084:	20002e08 	.word	0x20002e08
   15088:	00015061 	.word	0x00015061

0001508c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   1508c:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   1508e:	2302      	movs	r3, #2
   15090:	4801      	ldr	r0, [pc, #4]	; (15098 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   15092:	4c02      	ldr	r4, [pc, #8]	; (1509c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   15094:	47a0      	blx	r4
	return	w;
}
   15096:	bd10      	pop	{r4, pc}
   15098:	2000948c 	.word	0x2000948c
   1509c:	00016dc5 	.word	0x00016dc5

000150a0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   150a0:	b500      	push	{lr}
   150a2:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   150a4:	4b07      	ldr	r3, [pc, #28]	; (150c4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   150a6:	881b      	ldrh	r3, [r3, #0]
   150a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   150ac:	4b06      	ldr	r3, [pc, #24]	; (150c8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   150ae:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   150b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   150b4:	3202      	adds	r2, #2
   150b6:	a901      	add	r1, sp, #4
   150b8:	4b04      	ldr	r3, [pc, #16]	; (150cc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   150ba:	4798      	blx	r3
	return	w;
}
   150bc:	b003      	add	sp, #12
   150be:	f85d fb04 	ldr.w	pc, [sp], #4
   150c2:	bf00      	nop
   150c4:	0001a984 	.word	0x0001a984
   150c8:	20002e08 	.word	0x20002e08
   150cc:	0001508d 	.word	0x0001508d

000150d0 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
	return	w;
}
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
   150d0:	b510      	push	{r4, lr}
   150d2:	b082      	sub	sp, #8
   150d4:	a802      	add	r0, sp, #8
   150d6:	f840 1d04 	str.w	r1, [r0, #-4]!
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
   150da:	4b06      	ldr	r3, [pc, #24]	; (150f4 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x24>)
   150dc:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
   150de:	2304      	movs	r3, #4
   150e0:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
   150e4:	441a      	add	r2, r3
   150e6:	4601      	mov	r1, r0
   150e8:	4803      	ldr	r0, [pc, #12]	; (150f8 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x28>)
   150ea:	4c04      	ldr	r4, [pc, #16]	; (150fc <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x2c>)
   150ec:	47a0      	blx	r4
	return	w;
}
   150ee:	b002      	add	sp, #8
   150f0:	bd10      	pop	{r4, pc}
   150f2:	bf00      	nop
   150f4:	20002e08 	.word	0x20002e08
   150f8:	2000948c 	.word	0x2000948c
   150fc:	00016dc5 	.word	0x00016dc5

00015100 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   15100:	b510      	push	{r4, lr}
   15102:	4604      	mov	r4, r0
   15104:	30b8      	adds	r0, #184	; 0xb8
   15106:	4b03      	ldr	r3, [pc, #12]	; (15114 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   15108:	4798      	blx	r3
   1510a:	4620      	mov	r0, r4
   1510c:	4b02      	ldr	r3, [pc, #8]	; (15118 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   1510e:	4798      	blx	r3
{
} //~MemoryManagment_Class
   15110:	4620      	mov	r0, r4
   15112:	bd10      	pop	{r4, pc}
   15114:	0001501f 	.word	0x0001501f
   15118:	0001505f 	.word	0x0001505f

0001511c <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   1511c:	b538      	push	{r3, r4, r5, lr}
   1511e:	4604      	mov	r4, r0
   15120:	4b10      	ldr	r3, [pc, #64]	; (15164 <_ZN17MemoryFlash_ClassC1Ev+0x48>)
   15122:	4798      	blx	r3
   15124:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   15128:	4b0f      	ldr	r3, [pc, #60]	; (15168 <_ZN17MemoryFlash_ClassC1Ev+0x4c>)
   1512a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   1512c:	f44f 7500 	mov.w	r5, #512	; 0x200
   15130:	462a      	mov	r2, r5
   15132:	2100      	movs	r1, #0
   15134:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15138:	4b0c      	ldr	r3, [pc, #48]	; (1516c <_ZN17MemoryFlash_ClassC1Ev+0x50>)
   1513a:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   1513c:	2300      	movs	r3, #0
   1513e:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   15142:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   15146:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   1514a:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   1514e:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   15152:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   15156:	4a06      	ldr	r2, [pc, #24]	; (15170 <_ZN17MemoryFlash_ClassC1Ev+0x54>)
   15158:	f245 33b4 	movw	r3, #21428	; 0x53b4
   1515c:	50e2      	str	r2, [r4, r3]
} //MemoryManagment_Class
   1515e:	4620      	mov	r0, r4
   15160:	bd38      	pop	{r3, r4, r5, pc}
   15162:	bf00      	nop
   15164:	0001505d 	.word	0x0001505d
   15168:	0001501d 	.word	0x0001501d
   1516c:	000192dd 	.word	0x000192dd
   15170:	20002e0c 	.word	0x20002e0c

00015174 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   15174:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   15176:	480b      	ldr	r0, [pc, #44]	; (151a4 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   15178:	4b0b      	ldr	r3, [pc, #44]	; (151a8 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   1517a:	4798      	blx	r3
   1517c:	b948      	cbnz	r0, 15192 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   1517e:	4d0b      	ldr	r5, [pc, #44]	; (151ac <_ZN17MemoryFlash_Class4InitEm+0x38>)
   15180:	490b      	ldr	r1, [pc, #44]	; (151b0 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   15182:	4628      	mov	r0, r5
   15184:	4c0b      	ldr	r4, [pc, #44]	; (151b4 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   15186:	47a0      	blx	r4
   15188:	490b      	ldr	r1, [pc, #44]	; (151b8 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1518a:	4628      	mov	r0, r5
   1518c:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   1518e:	2001      	movs	r0, #1
   15190:	bd38      	pop	{r3, r4, r5, pc}
   15192:	4d06      	ldr	r5, [pc, #24]	; (151ac <_ZN17MemoryFlash_Class4InitEm+0x38>)
   15194:	4909      	ldr	r1, [pc, #36]	; (151bc <_ZN17MemoryFlash_Class4InitEm+0x48>)
   15196:	4628      	mov	r0, r5
   15198:	4c06      	ldr	r4, [pc, #24]	; (151b4 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   1519a:	47a0      	blx	r4
   1519c:	4906      	ldr	r1, [pc, #24]	; (151b8 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1519e:	4628      	mov	r0, r5
   151a0:	47a0      	blx	r4
   151a2:	e7f4      	b.n	1518e <_ZN17MemoryFlash_Class4InitEm+0x1a>
   151a4:	2000948c 	.word	0x2000948c
   151a8:	00016d29 	.word	0x00016d29
   151ac:	20002760 	.word	0x20002760
   151b0:	0001a918 	.word	0x0001a918
   151b4:	00011d51 	.word	0x00011d51
   151b8:	000195d4 	.word	0x000195d4
   151bc:	0001a8f8 	.word	0x0001a8f8

000151c0 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState>:
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
	 return w;
 };
 uint32_t	MemoryFlash_Class::SaveCurrentState(HVACState& hs){
   151c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151c2:	460f      	mov	r7, r1
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
   151c4:	4b13      	ldr	r3, [pc, #76]	; (15214 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x54>)
   151c6:	681c      	ldr	r4, [r3, #0]
   151c8:	f504 4481 	add.w	r4, r4, #16512	; 0x4080
   151cc:	342c      	adds	r4, #44	; 0x2c
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
   151ce:	f245 33b4 	movw	r3, #21428	; 0x53b4
   151d2:	58c5      	ldr	r5, [r0, r3]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
   151d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   151d8:	4622      	mov	r2, r4
   151da:	4629      	mov	r1, r5
   151dc:	480e      	ldr	r0, [pc, #56]	; (15218 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x58>)
   151de:	4e0f      	ldr	r6, [pc, #60]	; (1521c <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x5c>)
   151e0:	47b0      	blx	r6
	 if (r==0)
   151e2:	4603      	mov	r3, r0
   151e4:	b108      	cbz	r0, 151ea <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x2a>
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
		  return	w;
	 }

	 return	r;
 }
   151e6:	4618      	mov	r0, r3
   151e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
   151ea:	2268      	movs	r2, #104	; 0x68
   151ec:	4639      	mov	r1, r7
   151ee:	f105 0070 	add.w	r0, r5, #112	; 0x70
   151f2:	4b0b      	ldr	r3, [pc, #44]	; (15220 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x60>)
   151f4:	4798      	blx	r3
		 qspiFlash.Erase(add);
   151f6:	4e08      	ldr	r6, [pc, #32]	; (15218 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x58>)
   151f8:	4621      	mov	r1, r4
   151fa:	4630      	mov	r0, r6
   151fc:	4b09      	ldr	r3, [pc, #36]	; (15224 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x64>)
   151fe:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
   15200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15204:	4622      	mov	r2, r4
   15206:	4629      	mov	r1, r5
   15208:	4630      	mov	r0, r6
   1520a:	4c07      	ldr	r4, [pc, #28]	; (15228 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x68>)
   1520c:	47a0      	blx	r4
   1520e:	4603      	mov	r3, r0
		  return	w;
   15210:	e7e9      	b.n	151e6 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x26>
   15212:	bf00      	nop
   15214:	20002e08 	.word	0x20002e08
   15218:	2000948c 	.word	0x2000948c
   1521c:	00016df9 	.word	0x00016df9
   15220:	000191a9 	.word	0x000191a9
   15224:	00016d95 	.word	0x00016d95
   15228:	00016dc5 	.word	0x00016dc5

0001522c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
  uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   1522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1522e:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   15230:	4b10      	ldr	r3, [pc, #64]	; (15274 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   15232:	681c      	ldr	r4, [r3, #0]
   15234:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   15238:	f245 33b4 	movw	r3, #21428	; 0x53b4
   1523c:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1523e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15242:	4622      	mov	r2, r4
   15244:	4629      	mov	r1, r5
   15246:	480c      	ldr	r0, [pc, #48]	; (15278 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   15248:	4e0c      	ldr	r6, [pc, #48]	; (1527c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   1524a:	47b0      	blx	r6
	  if (r==0)
   1524c:	4603      	mov	r3, r0
   1524e:	b108      	cbz	r0, 15254 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   15250:	4618      	mov	r0, r3
   15252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   15254:	883b      	ldrh	r3, [r7, #0]
   15256:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   15258:	4e07      	ldr	r6, [pc, #28]	; (15278 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   1525a:	4621      	mov	r1, r4
   1525c:	4630      	mov	r0, r6
   1525e:	4b08      	ldr	r3, [pc, #32]	; (15280 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   15260:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   15262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15266:	4622      	mov	r2, r4
   15268:	4629      	mov	r1, r5
   1526a:	4630      	mov	r0, r6
   1526c:	4c05      	ldr	r4, [pc, #20]	; (15284 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   1526e:	47a0      	blx	r4
   15270:	4603      	mov	r3, r0
		  return	w;
   15272:	e7ed      	b.n	15250 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   15274:	20002e08 	.word	0x20002e08
   15278:	2000948c 	.word	0x2000948c
   1527c:	00016df9 	.word	0x00016df9
   15280:	00016d95 	.word	0x00016d95
   15284:	00016dc5 	.word	0x00016dc5

00015288 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryFlash_Class::SaveApplicationState(HVACState& hs ){
   15288:	b538      	push	{r3, r4, r5, lr}
   1528a:	4604      	mov	r4, r0
   1528c:	460d      	mov	r5, r1
	  uint32_t w=  SaveCurrentState(hs);
   1528e:	4b08      	ldr	r3, [pc, #32]	; (152b0 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x28>)
   15290:	4798      	blx	r3
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
   15292:	2268      	movs	r2, #104	; 0x68
   15294:	4629      	mov	r1, r5
   15296:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1529a:	4b06      	ldr	r3, [pc, #24]	; (152b4 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x2c>)
   1529c:	4798      	blx	r3
   1529e:	4601      	mov	r1, r0
   152a0:	f245 33b0 	movw	r3, #21424	; 0x53b0
   152a4:	50e0      	str	r0, [r4, r3]
uint32_t	MemoryFlash_Class::SaveCRCAppState(uint32_t crc){
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
   152a6:	4620      	mov	r0, r4
   152a8:	4b03      	ldr	r3, [pc, #12]	; (152b8 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x30>)
   152aa:	4798      	blx	r3
  }
   152ac:	bd38      	pop	{r3, r4, r5, pc}
   152ae:	bf00      	nop
   152b0:	000151c1 	.word	0x000151c1
   152b4:	00015021 	.word	0x00015021
   152b8:	000150d1 	.word	0x000150d1

000152bc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
}
 
   152bc:	b510      	push	{r4, lr}
   152be:	4c05      	ldr	r4, [pc, #20]	; (152d4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x18>)
   152c0:	4620      	mov	r0, r4
   152c2:	4b05      	ldr	r3, [pc, #20]	; (152d8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x1c>)
   152c4:	4798      	blx	r3
   152c6:	4a05      	ldr	r2, [pc, #20]	; (152dc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x20>)
   152c8:	4905      	ldr	r1, [pc, #20]	; (152e0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x24>)
   152ca:	4620      	mov	r0, r4
   152cc:	4b05      	ldr	r3, [pc, #20]	; (152e4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x28>)
   152ce:	4798      	blx	r3
   152d0:	bd10      	pop	{r4, pc}
   152d2:	bf00      	nop
   152d4:	20003e0c 	.word	0x20003e0c
   152d8:	0001511d 	.word	0x0001511d
   152dc:	20000000 	.word	0x20000000
   152e0:	00015101 	.word	0x00015101
   152e4:	000170d1 	.word	0x000170d1

000152e8 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   152e8:	4b03      	ldr	r3, [pc, #12]	; (152f8 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   152ea:	681b      	ldr	r3, [r3, #0]
   152ec:	2201      	movs	r2, #1
   152ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   152f2:	bf00      	nop
   152f4:	4770      	bx	lr
   152f6:	bf00      	nop
   152f8:	200091c4 	.word	0x200091c4

000152fc <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   152fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152fe:	4607      	mov	r7, r0
   15300:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   15304:	d007      	beq.n	15316 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   15306:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   1530a:	4e05      	ldr	r6, [pc, #20]	; (15320 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   1530c:	3c68      	subs	r4, #104	; 0x68
   1530e:	4620      	mov	r0, r4
   15310:	47b0      	blx	r6
   15312:	42a5      	cmp	r5, r4
   15314:	d1fa      	bne.n	1530c <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   15316:	4638      	mov	r0, r7
   15318:	4b02      	ldr	r3, [pc, #8]	; (15324 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   1531a:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   1531c:	4638      	mov	r0, r7
   1531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15320:	00015e55 	.word	0x00015e55
   15324:	00015e55 	.word	0x00015e55

00015328 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   15328:	4b06      	ldr	r3, [pc, #24]	; (15344 <_ZL15Converter1Readyv+0x1c>)
   1532a:	681b      	ldr	r3, [r3, #0]
   1532c:	2201      	movs	r2, #1
   1532e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   15332:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   15336:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   1533a:	2200      	movs	r2, #0
   1533c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   15340:	4770      	bx	lr
   15342:	bf00      	nop
   15344:	200091c4 	.word	0x200091c4

00015348 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   15348:	4b06      	ldr	r3, [pc, #24]	; (15364 <_ZL15Converter2Readyv+0x1c>)
   1534a:	681b      	ldr	r3, [r3, #0]
   1534c:	2201      	movs	r2, #1
   1534e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   15352:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   15356:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   1535a:	2200      	movs	r2, #0
   1535c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   15360:	4770      	bx	lr
   15362:	bf00      	nop
   15364:	200091c4 	.word	0x200091c4

00015368 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   15368:	4b06      	ldr	r3, [pc, #24]	; (15384 <_ZL15Converter3Readyv+0x1c>)
   1536a:	681b      	ldr	r3, [r3, #0]
   1536c:	2201      	movs	r2, #1
   1536e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   15372:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   15376:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   1537a:	2200      	movs	r2, #0
   1537c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   15380:	4770      	bx	lr
   15382:	bf00      	nop
   15384:	200091c4 	.word	0x200091c4

00015388 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   15388:	b570      	push	{r4, r5, r6, lr}
   1538a:	4604      	mov	r4, r0
   1538c:	460e      	mov	r6, r1
   1538e:	4b0a      	ldr	r3, [pc, #40]	; (153b8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   15390:	4798      	blx	r3
   15392:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   15396:	4d09      	ldr	r5, [pc, #36]	; (153bc <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   15398:	47a8      	blx	r5
   1539a:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1539e:	47a8      	blx	r5
   153a0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   153a4:	47a8      	blx	r5
		spiLite=&ltSPI;
   153a6:	4b06      	ldr	r3, [pc, #24]	; (153c0 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   153a8:	1d1a      	adds	r2, r3, #4
   153aa:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   153ae:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   153b0:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   153b4:	4620      	mov	r0, r4
   153b6:	bd70      	pop	{r4, r5, r6, pc}
   153b8:	00015e41 	.word	0x00015e41
   153bc:	00015e41 	.word	0x00015e41
   153c0:	200091c4 	.word	0x200091c4

000153c4 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   153c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153c8:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   153ca:	233d      	movs	r3, #61	; 0x3d
   153cc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   153d0:	231b      	movs	r3, #27
   153d2:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   153d6:	2327      	movs	r3, #39	; 0x27
   153d8:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   153dc:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   153e0:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   153e4:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   153e8:	4f06      	ldr	r7, [pc, #24]	; (15404 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   153ea:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   153ee:	f856 1b04 	ldr.w	r1, [r6], #4
   153f2:	4628      	mov	r0, r5
   153f4:	47b8      	blx	r7
   153f6:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   153f8:	4546      	cmp	r6, r8
   153fa:	d1f6      	bne.n	153ea <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   153fc:	2001      	movs	r0, #1
   153fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15402:	bf00      	nop
   15404:	00015e69 	.word	0x00015e69

00015408 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   15408:	b538      	push	{r3, r4, r5, lr}
   1540a:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   1540c:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   15410:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   15414:	4b13      	ldr	r3, [pc, #76]	; (15464 <_ZN24TemperatureSensors_Class4InitEv+0x5c>)
   15416:	4798      	blx	r3
	spiLite->init();
   15418:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1541c:	4b12      	ldr	r3, [pc, #72]	; (15468 <_ZN24TemperatureSensors_Class4InitEv+0x60>)
   1541e:	4798      	blx	r3
	ptrTemperaturesClass=this;
   15420:	4b12      	ldr	r3, [pc, #72]	; (1546c <_ZN24TemperatureSensors_Class4InitEv+0x64>)
   15422:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15424:	4912      	ldr	r1, [pc, #72]	; (15470 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   15426:	2028      	movs	r0, #40	; 0x28
   15428:	4d12      	ldr	r5, [pc, #72]	; (15474 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   1542a:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   1542c:	4912      	ldr	r1, [pc, #72]	; (15478 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   1542e:	2029      	movs	r0, #41	; 0x29
   15430:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   15432:	4912      	ldr	r1, [pc, #72]	; (1547c <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   15434:	2021      	movs	r0, #33	; 0x21
   15436:	47a8      	blx	r5
	InitModules();
   15438:	4620      	mov	r0, r4
   1543a:	4b11      	ldr	r3, [pc, #68]	; (15480 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   1543c:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   1543e:	2300      	movs	r3, #0
   15440:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   15444:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   15448:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1544c:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   15450:	4013      	ands	r3, r2
   15452:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   15456:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   15458:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   1545c:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   15460:	bd38      	pop	{r3, r4, r5, pc}
   15462:	bf00      	nop
   15464:	0001665d 	.word	0x0001665d
   15468:	00016601 	.word	0x00016601
   1546c:	200091c4 	.word	0x200091c4
   15470:	00015329 	.word	0x00015329
   15474:	00003f69 	.word	0x00003f69
   15478:	00015349 	.word	0x00015349
   1547c:	00015369 	.word	0x00015369
   15480:	000153c5 	.word	0x000153c5

00015484 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   15484:	b510      	push	{r4, lr}
   15486:	4604      	mov	r4, r0
	converterTimeout=false;
   15488:	2200      	movs	r2, #0
   1548a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   1548e:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   15492:	4403      	add	r3, r0
   15494:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   15498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1549c:	4907      	ldr	r1, [pc, #28]	; (154bc <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   1549e:	4808      	ldr	r0, [pc, #32]	; (154c0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   154a0:	4b08      	ldr	r3, [pc, #32]	; (154c4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   154a2:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   154a4:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   154a8:	2368      	movs	r3, #104	; 0x68
   154aa:	fb03 4000 	mla	r0, r3, r0, r4
   154ae:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   154b2:	30a8      	adds	r0, #168	; 0xa8
   154b4:	4b04      	ldr	r3, [pc, #16]	; (154c8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   154b6:	4798      	blx	r3
   154b8:	bd10      	pop	{r4, pc}
   154ba:	bf00      	nop
   154bc:	000152e9 	.word	0x000152e9
   154c0:	200026d0 	.word	0x200026d0
   154c4:	0001150d 	.word	0x0001150d
   154c8:	00015f5d 	.word	0x00015f5d

000154cc <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   154cc:	b538      	push	{r3, r4, r5, lr}
   154ce:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   154d0:	491e      	ldr	r1, [pc, #120]	; (1554c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   154d2:	481f      	ldr	r0, [pc, #124]	; (15550 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   154d4:	4b1f      	ldr	r3, [pc, #124]	; (15554 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   154d6:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   154d8:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   154dc:	2568      	movs	r5, #104	; 0x68
   154de:	fb05 4000 	mla	r0, r5, r0, r4
   154e2:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   154e6:	30a8      	adds	r0, #168	; 0xa8
   154e8:	4b1b      	ldr	r3, [pc, #108]	; (15558 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   154ea:	4798      	blx	r3
   154ec:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   154f0:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   154f4:	fb05 4502 	mla	r5, r5, r2, r4
   154f8:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   154fc:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   15500:	2b01      	cmp	r3, #1
   15502:	d00d      	beq.n	15520 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   15504:	4b15      	ldr	r3, [pc, #84]	; (1555c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   15506:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   1550a:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   1550e:	3301      	adds	r3, #1
   15510:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   15512:	2b04      	cmp	r3, #4
   15514:	d00c      	beq.n	15530 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   15516:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   1551a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1551e:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   15520:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   15524:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1552c:	66d8      	str	r0, [r3, #108]	; 0x6c
   1552e:	e7ec      	b.n	1550a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   15530:	2300      	movs	r3, #0
   15532:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   15536:	3201      	adds	r2, #1
   15538:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   1553a:	2a03      	cmp	r2, #3
		currentModule++;
   1553c:	bf12      	itee	ne
   1553e:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   15542:	2300      	moveq	r3, #0
   15544:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   15548:	e7e7      	b.n	1551a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   1554a:	bf00      	nop
   1554c:	000152e9 	.word	0x000152e9
   15550:	200026d0 	.word	0x200026d0
   15554:	0001149d 	.word	0x0001149d
   15558:	00016065 	.word	0x00016065
   1555c:	c479c000 	.word	0xc479c000

00015560 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   15560:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   15564:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   15568:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   1556c:	4013      	ands	r3, r2
}
   1556e:	4018      	ands	r0, r3
   15570:	4770      	bx	lr
	...

00015574 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   15574:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
   15576:	4c0a      	ldr	r4, [pc, #40]	; (155a0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
   15578:	1d25      	adds	r5, r4, #4
   1557a:	4628      	mov	r0, r5
   1557c:	4b09      	ldr	r3, [pc, #36]	; (155a4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
   1557e:	4798      	blx	r3
   15580:	4e09      	ldr	r6, [pc, #36]	; (155a8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
   15582:	4632      	mov	r2, r6
   15584:	4909      	ldr	r1, [pc, #36]	; (155ac <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
   15586:	4628      	mov	r0, r5
   15588:	4d09      	ldr	r5, [pc, #36]	; (155b0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
   1558a:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   1558c:	3418      	adds	r4, #24
   1558e:	4909      	ldr	r1, [pc, #36]	; (155b4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
   15590:	4620      	mov	r0, r4
   15592:	4b09      	ldr	r3, [pc, #36]	; (155b8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
   15594:	4798      	blx	r3
   15596:	4632      	mov	r2, r6
   15598:	4908      	ldr	r1, [pc, #32]	; (155bc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
   1559a:	4620      	mov	r0, r4
   1559c:	47a8      	blx	r5
   1559e:	bd70      	pop	{r4, r5, r6, pc}
   155a0:	200091c4 	.word	0x200091c4
   155a4:	000165c5 	.word	0x000165c5
   155a8:	20000000 	.word	0x20000000
   155ac:	000165ed 	.word	0x000165ed
   155b0:	000170d1 	.word	0x000170d1
   155b4:	200096f4 	.word	0x200096f4
   155b8:	00015389 	.word	0x00015389
   155bc:	000152fd 	.word	0x000152fd

000155c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   155c0:	b580      	push	{r7, lr}
   155c2:	b084      	sub	sp, #16
   155c4:	af00      	add	r7, sp, #0
   155c6:	60f8      	str	r0, [r7, #12]
   155c8:	60b9      	str	r1, [r7, #8]
   155ca:	4613      	mov	r3, r2
   155cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   155ce:	68fb      	ldr	r3, [r7, #12]
   155d0:	2b00      	cmp	r3, #0
   155d2:	d004      	beq.n	155de <io_write+0x1e>
   155d4:	68bb      	ldr	r3, [r7, #8]
   155d6:	2b00      	cmp	r3, #0
   155d8:	d001      	beq.n	155de <io_write+0x1e>
   155da:	2301      	movs	r3, #1
   155dc:	e000      	b.n	155e0 <io_write+0x20>
   155de:	2300      	movs	r3, #0
   155e0:	f003 0301 	and.w	r3, r3, #1
   155e4:	b2db      	uxtb	r3, r3
   155e6:	2234      	movs	r2, #52	; 0x34
   155e8:	4907      	ldr	r1, [pc, #28]	; (15608 <io_write+0x48>)
   155ea:	4618      	mov	r0, r3
   155ec:	4b07      	ldr	r3, [pc, #28]	; (1560c <io_write+0x4c>)
   155ee:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   155f0:	68fb      	ldr	r3, [r7, #12]
   155f2:	681b      	ldr	r3, [r3, #0]
   155f4:	88fa      	ldrh	r2, [r7, #6]
   155f6:	68b9      	ldr	r1, [r7, #8]
   155f8:	68f8      	ldr	r0, [r7, #12]
   155fa:	4798      	blx	r3
   155fc:	4603      	mov	r3, r0
}
   155fe:	4618      	mov	r0, r3
   15600:	3710      	adds	r7, #16
   15602:	46bd      	mov	sp, r7
   15604:	bd80      	pop	{r7, pc}
   15606:	bf00      	nop
   15608:	0001a938 	.word	0x0001a938
   1560c:	00005565 	.word	0x00005565

00015610 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   15610:	b580      	push	{r7, lr}
   15612:	b084      	sub	sp, #16
   15614:	af00      	add	r7, sp, #0
   15616:	60f8      	str	r0, [r7, #12]
   15618:	60b9      	str	r1, [r7, #8]
   1561a:	4613      	mov	r3, r2
   1561c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	2b00      	cmp	r3, #0
   15622:	d004      	beq.n	1562e <io_read+0x1e>
   15624:	68bb      	ldr	r3, [r7, #8]
   15626:	2b00      	cmp	r3, #0
   15628:	d001      	beq.n	1562e <io_read+0x1e>
   1562a:	2301      	movs	r3, #1
   1562c:	e000      	b.n	15630 <io_read+0x20>
   1562e:	2300      	movs	r3, #0
   15630:	f003 0301 	and.w	r3, r3, #1
   15634:	b2db      	uxtb	r3, r3
   15636:	223d      	movs	r2, #61	; 0x3d
   15638:	4907      	ldr	r1, [pc, #28]	; (15658 <io_read+0x48>)
   1563a:	4618      	mov	r0, r3
   1563c:	4b07      	ldr	r3, [pc, #28]	; (1565c <io_read+0x4c>)
   1563e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   15640:	68fb      	ldr	r3, [r7, #12]
   15642:	685b      	ldr	r3, [r3, #4]
   15644:	88fa      	ldrh	r2, [r7, #6]
   15646:	68b9      	ldr	r1, [r7, #8]
   15648:	68f8      	ldr	r0, [r7, #12]
   1564a:	4798      	blx	r3
   1564c:	4603      	mov	r3, r0
}
   1564e:	4618      	mov	r0, r3
   15650:	3710      	adds	r7, #16
   15652:	46bd      	mov	sp, r7
   15654:	bd80      	pop	{r7, pc}
   15656:	bf00      	nop
   15658:	0001a938 	.word	0x0001a938
   1565c:	00005565 	.word	0x00005565

00015660 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   15660:	b480      	push	{r7}
   15662:	b083      	sub	sp, #12
   15664:	af00      	add	r7, sp, #0
   15666:	6078      	str	r0, [r7, #4]
   15668:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   1566a:	687b      	ldr	r3, [r7, #4]
   1566c:	683a      	ldr	r2, [r7, #0]
   1566e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	4618      	mov	r0, r3
   15674:	370c      	adds	r7, #12
   15676:	46bd      	mov	sp, r7
   15678:	bc80      	pop	{r7}
   1567a:	4770      	bx	lr

0001567c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   1567c:	b480      	push	{r7}
   1567e:	b083      	sub	sp, #12
   15680:	af00      	add	r7, sp, #0
   15682:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	4618      	mov	r0, r3
   15688:	370c      	adds	r7, #12
   1568a:	46bd      	mov	sp, r7
   1568c:	bc80      	pop	{r7}
   1568e:	4770      	bx	lr

00015690 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   15690:	b580      	push	{r7, lr}
   15692:	b084      	sub	sp, #16
   15694:	af00      	add	r7, sp, #0
   15696:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   15698:	687b      	ldr	r3, [r7, #4]
   1569a:	4a14      	ldr	r2, [pc, #80]	; (156ec <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   1569c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   1569e:	687b      	ldr	r3, [r7, #4]
   156a0:	4a12      	ldr	r2, [pc, #72]	; (156ec <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   156a2:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   156a4:	687b      	ldr	r3, [r7, #4]
   156a6:	691a      	ldr	r2, [r3, #16]
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	330c      	adds	r3, #12
   156ac:	4619      	mov	r1, r3
   156ae:	4610      	mov	r0, r2
   156b0:	4b0f      	ldr	r3, [pc, #60]	; (156f0 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   156b2:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   156b4:	687b      	ldr	r3, [r7, #4]
   156b6:	691b      	ldr	r3, [r3, #16]
   156b8:	4618      	mov	r0, r3
   156ba:	4b0e      	ldr	r3, [pc, #56]	; (156f4 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   156bc:	4798      	blx	r3
   156be:	4603      	mov	r3, r0
   156c0:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   156c2:	7bfb      	ldrb	r3, [r7, #15]
   156c4:	2b00      	cmp	r3, #0
   156c6:	bf0c      	ite	eq
   156c8:	2301      	moveq	r3, #1
   156ca:	2300      	movne	r3, #0
   156cc:	b2da      	uxtb	r2, r3
   156ce:	687b      	ldr	r3, [r7, #4]
   156d0:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   156d2:	687b      	ldr	r3, [r7, #4]
   156d4:	7a5b      	ldrb	r3, [r3, #9]
   156d6:	b2da      	uxtb	r2, r3
   156d8:	687b      	ldr	r3, [r7, #4]
   156da:	721a      	strb	r2, [r3, #8]
	return isOK;
   156dc:	687b      	ldr	r3, [r7, #4]
   156de:	7a5b      	ldrb	r3, [r3, #9]
   156e0:	b2db      	uxtb	r3, r3
	
}
   156e2:	4618      	mov	r0, r3
   156e4:	3710      	adds	r7, #16
   156e6:	46bd      	mov	sp, r7
   156e8:	bd80      	pop	{r7, pc}
   156ea:	bf00      	nop
   156ec:	200093d4 	.word	0x200093d4
   156f0:	0000429f 	.word	0x0000429f
   156f4:	00004245 	.word	0x00004245

000156f8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   156f8:	b580      	push	{r7, lr}
   156fa:	b082      	sub	sp, #8
   156fc:	af00      	add	r7, sp, #0
   156fe:	6078      	str	r0, [r7, #4]
   15700:	460b      	mov	r3, r1
   15702:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   15704:	687b      	ldr	r3, [r7, #4]
   15706:	691b      	ldr	r3, [r3, #16]
   15708:	78fa      	ldrb	r2, [r7, #3]
   1570a:	b211      	sxth	r1, r2
   1570c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15710:	4618      	mov	r0, r3
   15712:	4b03      	ldr	r3, [pc, #12]	; (15720 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   15714:	4798      	blx	r3
   15716:	4603      	mov	r3, r0
}
   15718:	4618      	mov	r0, r3
   1571a:	3708      	adds	r7, #8
   1571c:	46bd      	mov	sp, r7
   1571e:	bd80      	pop	{r7, pc}
   15720:	00004265 	.word	0x00004265

00015724 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   15724:	b580      	push	{r7, lr}
   15726:	b086      	sub	sp, #24
   15728:	af00      	add	r7, sp, #0
   1572a:	60f8      	str	r0, [r7, #12]
   1572c:	60b9      	str	r1, [r7, #8]
   1572e:	4613      	mov	r3, r2
   15730:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   15732:	68f8      	ldr	r0, [r7, #12]
   15734:	4b08      	ldr	r3, [pc, #32]	; (15758 <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
   15736:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
   15738:	68fb      	ldr	r3, [r7, #12]
   1573a:	68db      	ldr	r3, [r3, #12]
   1573c:	88fa      	ldrh	r2, [r7, #6]
   1573e:	68b9      	ldr	r1, [r7, #8]
   15740:	4618      	mov	r0, r3
   15742:	4b06      	ldr	r3, [pc, #24]	; (1575c <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
   15744:	4798      	blx	r3
   15746:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   15748:	68f8      	ldr	r0, [r7, #12]
   1574a:	4b05      	ldr	r3, [pc, #20]	; (15760 <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
   1574c:	4798      	blx	r3
	return w;
   1574e:	697b      	ldr	r3, [r7, #20]
}
   15750:	4618      	mov	r0, r3
   15752:	3718      	adds	r7, #24
   15754:	46bd      	mov	sp, r7
   15756:	bd80      	pop	{r7, pc}
   15758:	000157bd 	.word	0x000157bd
   1575c:	000155c1 	.word	0x000155c1
   15760:	000157a5 	.word	0x000157a5

00015764 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   15764:	b580      	push	{r7, lr}
   15766:	b086      	sub	sp, #24
   15768:	af00      	add	r7, sp, #0
   1576a:	60f8      	str	r0, [r7, #12]
   1576c:	60b9      	str	r1, [r7, #8]
   1576e:	4613      	mov	r3, r2
   15770:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   15772:	68f8      	ldr	r0, [r7, #12]
   15774:	4b08      	ldr	r3, [pc, #32]	; (15798 <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
   15776:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	68db      	ldr	r3, [r3, #12]
   1577c:	88fa      	ldrh	r2, [r7, #6]
   1577e:	68b9      	ldr	r1, [r7, #8]
   15780:	4618      	mov	r0, r3
   15782:	4b06      	ldr	r3, [pc, #24]	; (1579c <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
   15784:	4798      	blx	r3
   15786:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   15788:	68f8      	ldr	r0, [r7, #12]
   1578a:	4b05      	ldr	r3, [pc, #20]	; (157a0 <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
   1578c:	4798      	blx	r3
	return r;
   1578e:	697b      	ldr	r3, [r7, #20]
}
   15790:	4618      	mov	r0, r3
   15792:	3718      	adds	r7, #24
   15794:	46bd      	mov	sp, r7
   15796:	bd80      	pop	{r7, pc}
   15798:	000157bd 	.word	0x000157bd
   1579c:	00015611 	.word	0x00015611
   157a0:	000157a5 	.word	0x000157a5

000157a4 <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
   157a4:	b480      	push	{r7}
   157a6:	b083      	sub	sp, #12
   157a8:	af00      	add	r7, sp, #0
   157aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   157ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   157b0:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   157b2:	bf00      	nop
   157b4:	370c      	adds	r7, #12
   157b6:	46bd      	mov	sp, r7
   157b8:	bc80      	pop	{r7}
   157ba:	4770      	bx	lr

000157bc <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
   157bc:	b480      	push	{r7}
   157be:	b083      	sub	sp, #12
   157c0:	af00      	add	r7, sp, #0
   157c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   157c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   157c8:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   157ca:	bf00      	nop
   157cc:	370c      	adds	r7, #12
   157ce:	46bd      	mov	sp, r7
   157d0:	bc80      	pop	{r7}
   157d2:	4770      	bx	lr

000157d4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   157d4:	b480      	push	{r7}
   157d6:	b083      	sub	sp, #12
   157d8:	af00      	add	r7, sp, #0
   157da:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   157dc:	687b      	ldr	r3, [r7, #4]
   157de:	4618      	mov	r0, r3
   157e0:	370c      	adds	r7, #12
   157e2:	46bd      	mov	sp, r7
   157e4:	bc80      	pop	{r7}
   157e6:	4770      	bx	lr

000157e8 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   157e8:	b480      	push	{r7}
   157ea:	b083      	sub	sp, #12
   157ec:	af00      	add	r7, sp, #0
   157ee:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	4618      	mov	r0, r3
   157f4:	370c      	adds	r7, #12
   157f6:	46bd      	mov	sp, r7
   157f8:	bc80      	pop	{r7}
   157fa:	4770      	bx	lr

000157fc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   157fc:	b480      	push	{r7}
   157fe:	b085      	sub	sp, #20
   15800:	af00      	add	r7, sp, #0
   15802:	6078      	str	r0, [r7, #4]
   15804:	460b      	mov	r3, r1
   15806:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   15808:	2300      	movs	r3, #0
   1580a:	73fb      	strb	r3, [r7, #15]
   1580c:	7bfb      	ldrb	r3, [r7, #15]
   1580e:	2b01      	cmp	r3, #1
   15810:	dc13      	bgt.n	1583a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   15812:	7bfb      	ldrb	r3, [r7, #15]
   15814:	78f9      	ldrb	r1, [r7, #3]
   15816:	7bfa      	ldrb	r2, [r7, #15]
   15818:	2080      	movs	r0, #128	; 0x80
   1581a:	fa40 f202 	asr.w	r2, r0, r2
   1581e:	400a      	ands	r2, r1
   15820:	2a00      	cmp	r2, #0
   15822:	bfcc      	ite	gt
   15824:	2201      	movgt	r2, #1
   15826:	2200      	movle	r2, #0
   15828:	b2d1      	uxtb	r1, r2
   1582a:	687a      	ldr	r2, [r7, #4]
   1582c:	4413      	add	r3, r2
   1582e:	460a      	mov	r2, r1
   15830:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   15832:	7bfb      	ldrb	r3, [r7, #15]
   15834:	3301      	adds	r3, #1
   15836:	73fb      	strb	r3, [r7, #15]
   15838:	e7e8      	b.n	1580c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1583a:	bf00      	nop
   1583c:	3714      	adds	r7, #20
   1583e:	46bd      	mov	sp, r7
   15840:	bc80      	pop	{r7}
   15842:	4770      	bx	lr

00015844 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   15844:	b480      	push	{r7}
   15846:	b085      	sub	sp, #20
   15848:	af00      	add	r7, sp, #0
   1584a:	6078      	str	r0, [r7, #4]
   1584c:	460b      	mov	r3, r1
   1584e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   15850:	2300      	movs	r3, #0
   15852:	73fb      	strb	r3, [r7, #15]
   15854:	7bfb      	ldrb	r3, [r7, #15]
   15856:	2b02      	cmp	r3, #2
   15858:	dc15      	bgt.n	15886 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1585a:	7bfb      	ldrb	r3, [r7, #15]
   1585c:	f1c3 0302 	rsb	r3, r3, #2
   15860:	78f9      	ldrb	r1, [r7, #3]
   15862:	7bfa      	ldrb	r2, [r7, #15]
   15864:	2020      	movs	r0, #32
   15866:	fa40 f202 	asr.w	r2, r0, r2
   1586a:	400a      	ands	r2, r1
   1586c:	2a00      	cmp	r2, #0
   1586e:	bfcc      	ite	gt
   15870:	2201      	movgt	r2, #1
   15872:	2200      	movle	r2, #0
   15874:	b2d1      	uxtb	r1, r2
   15876:	687a      	ldr	r2, [r7, #4]
   15878:	4413      	add	r3, r2
   1587a:	460a      	mov	r2, r1
   1587c:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   1587e:	7bfb      	ldrb	r3, [r7, #15]
   15880:	3301      	adds	r3, #1
   15882:	73fb      	strb	r3, [r7, #15]
   15884:	e7e6      	b.n	15854 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   15886:	bf00      	nop
   15888:	3714      	adds	r7, #20
   1588a:	46bd      	mov	sp, r7
   1588c:	bc80      	pop	{r7}
   1588e:	4770      	bx	lr

00015890 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   15890:	b580      	push	{r7, lr}
   15892:	b084      	sub	sp, #16
   15894:	af00      	add	r7, sp, #0
   15896:	60f8      	str	r0, [r7, #12]
   15898:	60b9      	str	r1, [r7, #8]
   1589a:	4613      	mov	r3, r2
   1589c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   1589e:	79fb      	ldrb	r3, [r7, #7]
   158a0:	4619      	mov	r1, r3
   158a2:	68b8      	ldr	r0, [r7, #8]
   158a4:	4b0d      	ldr	r3, [pc, #52]	; (158dc <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   158a6:	4798      	blx	r3
	FillLimitSwitch(v);
   158a8:	79fb      	ldrb	r3, [r7, #7]
   158aa:	4619      	mov	r1, r3
   158ac:	68b8      	ldr	r0, [r7, #8]
   158ae:	4b0c      	ldr	r3, [pc, #48]	; (158e0 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   158b0:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   158b2:	79fb      	ldrb	r3, [r7, #7]
   158b4:	f003 0301 	and.w	r3, r3, #1
   158b8:	2b00      	cmp	r3, #0
   158ba:	bfcc      	ite	gt
   158bc:	2301      	movgt	r3, #1
   158be:	2300      	movle	r3, #0
   158c0:	b2da      	uxtb	r2, r3
   158c2:	68bb      	ldr	r3, [r7, #8]
   158c4:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   158c6:	68fa      	ldr	r2, [r7, #12]
   158c8:	68bb      	ldr	r3, [r7, #8]
   158ca:	3314      	adds	r3, #20
   158cc:	6819      	ldr	r1, [r3, #0]
   158ce:	6011      	str	r1, [r2, #0]
   158d0:	889b      	ldrh	r3, [r3, #4]
   158d2:	8093      	strh	r3, [r2, #4]
}
   158d4:	68f8      	ldr	r0, [r7, #12]
   158d6:	3710      	adds	r7, #16
   158d8:	46bd      	mov	sp, r7
   158da:	bd80      	pop	{r7, pc}
   158dc:	000157fd 	.word	0x000157fd
   158e0:	00015845 	.word	0x00015845

000158e4 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   158e4:	b480      	push	{r7}
   158e6:	b085      	sub	sp, #20
   158e8:	af00      	add	r7, sp, #0
   158ea:	60f8      	str	r0, [r7, #12]
   158ec:	60b9      	str	r1, [r7, #8]
   158ee:	4613      	mov	r3, r2
   158f0:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   158f2:	68bb      	ldr	r3, [r7, #8]
   158f4:	7d5b      	ldrb	r3, [r3, #21]
   158f6:	f083 0301 	eor.w	r3, r3, #1
   158fa:	b2db      	uxtb	r3, r3
   158fc:	f003 0301 	and.w	r3, r3, #1
   15900:	2b00      	cmp	r3, #0
   15902:	d004      	beq.n	1590e <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   15904:	68bb      	ldr	r3, [r7, #8]
   15906:	7d1a      	ldrb	r2, [r3, #20]
   15908:	68bb      	ldr	r3, [r7, #8]
   1590a:	769a      	strb	r2, [r3, #26]
   1590c:	e009      	b.n	15922 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   1590e:	79fb      	ldrb	r3, [r7, #7]
   15910:	f003 0380 	and.w	r3, r3, #128	; 0x80
   15914:	2b00      	cmp	r3, #0
   15916:	bfcc      	ite	gt
   15918:	2301      	movgt	r3, #1
   1591a:	2300      	movle	r3, #0
   1591c:	b2da      	uxtb	r2, r3
   1591e:	68bb      	ldr	r3, [r7, #8]
   15920:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   15922:	79fb      	ldrb	r3, [r7, #7]
   15924:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15928:	2b00      	cmp	r3, #0
   1592a:	bfcc      	ite	gt
   1592c:	2301      	movgt	r3, #1
   1592e:	2300      	movle	r3, #0
   15930:	b2da      	uxtb	r2, r3
   15932:	68bb      	ldr	r3, [r7, #8]
   15934:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   15936:	79fb      	ldrb	r3, [r7, #7]
   15938:	f003 0320 	and.w	r3, r3, #32
   1593c:	2b00      	cmp	r3, #0
   1593e:	bfcc      	ite	gt
   15940:	2301      	movgt	r3, #1
   15942:	2300      	movle	r3, #0
   15944:	b2da      	uxtb	r2, r3
   15946:	68bb      	ldr	r3, [r7, #8]
   15948:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   1594a:	79fb      	ldrb	r3, [r7, #7]
   1594c:	f003 0310 	and.w	r3, r3, #16
   15950:	2b00      	cmp	r3, #0
   15952:	bfcc      	ite	gt
   15954:	2301      	movgt	r3, #1
   15956:	2300      	movle	r3, #0
   15958:	b2da      	uxtb	r2, r3
   1595a:	68bb      	ldr	r3, [r7, #8]
   1595c:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   1595e:	79fb      	ldrb	r3, [r7, #7]
   15960:	f003 0308 	and.w	r3, r3, #8
   15964:	2b00      	cmp	r3, #0
   15966:	bfcc      	ite	gt
   15968:	2301      	movgt	r3, #1
   1596a:	2300      	movle	r3, #0
   1596c:	b2da      	uxtb	r2, r3
   1596e:	68bb      	ldr	r3, [r7, #8]
   15970:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   15972:	79fb      	ldrb	r3, [r7, #7]
   15974:	f003 0304 	and.w	r3, r3, #4
   15978:	2b00      	cmp	r3, #0
   1597a:	bfcc      	ite	gt
   1597c:	2301      	movgt	r3, #1
   1597e:	2300      	movle	r3, #0
   15980:	b2da      	uxtb	r2, r3
   15982:	68bb      	ldr	r3, [r7, #8]
   15984:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   15986:	79fb      	ldrb	r3, [r7, #7]
   15988:	f003 0302 	and.w	r3, r3, #2
   1598c:	2b00      	cmp	r3, #0
   1598e:	bfcc      	ite	gt
   15990:	2301      	movgt	r3, #1
   15992:	2300      	movle	r3, #0
   15994:	b2da      	uxtb	r2, r3
   15996:	68bb      	ldr	r3, [r7, #8]
   15998:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   1599c:	79fb      	ldrb	r3, [r7, #7]
   1599e:	f003 0301 	and.w	r3, r3, #1
   159a2:	2b00      	cmp	r3, #0
   159a4:	bfcc      	ite	gt
   159a6:	2301      	movgt	r3, #1
   159a8:	2300      	movle	r3, #0
   159aa:	b2da      	uxtb	r2, r3
   159ac:	68bb      	ldr	r3, [r7, #8]
   159ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   159b2:	68fa      	ldr	r2, [r7, #12]
   159b4:	68bb      	ldr	r3, [r7, #8]
   159b6:	331a      	adds	r3, #26
   159b8:	6819      	ldr	r1, [r3, #0]
   159ba:	685b      	ldr	r3, [r3, #4]
   159bc:	6011      	str	r1, [r2, #0]
   159be:	6053      	str	r3, [r2, #4]
   159c0:	68f8      	ldr	r0, [r7, #12]
   159c2:	3714      	adds	r7, #20
   159c4:	46bd      	mov	sp, r7
   159c6:	bc80      	pop	{r7}
   159c8:	4770      	bx	lr

000159ca <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   159ca:	b480      	push	{r7}
   159cc:	b083      	sub	sp, #12
   159ce:	af00      	add	r7, sp, #0
   159d0:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   159d2:	687b      	ldr	r3, [r7, #4]
   159d4:	4618      	mov	r0, r3
   159d6:	370c      	adds	r7, #12
   159d8:	46bd      	mov	sp, r7
   159da:	bc80      	pop	{r7}
   159dc:	4770      	bx	lr

000159de <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   159de:	b480      	push	{r7}
   159e0:	b083      	sub	sp, #12
   159e2:	af00      	add	r7, sp, #0
   159e4:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   159e6:	687b      	ldr	r3, [r7, #4]
   159e8:	4618      	mov	r0, r3
   159ea:	370c      	adds	r7, #12
   159ec:	46bd      	mov	sp, r7
   159ee:	bc80      	pop	{r7}
   159f0:	4770      	bx	lr

000159f2 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   159f2:	b480      	push	{r7}
   159f4:	b085      	sub	sp, #20
   159f6:	af00      	add	r7, sp, #0
   159f8:	60f8      	str	r0, [r7, #12]
   159fa:	460b      	mov	r3, r1
   159fc:	607a      	str	r2, [r7, #4]
   159fe:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	681a      	ldr	r2, [r3, #0]
   15a04:	68fb      	ldr	r3, [r7, #12]
   15a06:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   15a08:	687b      	ldr	r3, [r7, #4]
   15a0a:	685a      	ldr	r2, [r3, #4]
   15a0c:	68fb      	ldr	r3, [r7, #12]
   15a0e:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   15a10:	68fb      	ldr	r3, [r7, #12]
   15a12:	7afa      	ldrb	r2, [r7, #11]
   15a14:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   15a16:	68fb      	ldr	r3, [r7, #12]
   15a18:	687a      	ldr	r2, [r7, #4]
   15a1a:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   15a1c:	68fb      	ldr	r3, [r7, #12]
   15a1e:	68db      	ldr	r3, [r3, #12]
   15a20:	7a5b      	ldrb	r3, [r3, #9]
   15a22:	b2da      	uxtb	r2, r3
   15a24:	68fb      	ldr	r3, [r7, #12]
   15a26:	719a      	strb	r2, [r3, #6]
	return isOK;
   15a28:	68fb      	ldr	r3, [r7, #12]
   15a2a:	799b      	ldrb	r3, [r3, #6]
   15a2c:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   15a2e:	4618      	mov	r0, r3
   15a30:	3714      	adds	r7, #20
   15a32:	46bd      	mov	sp, r7
   15a34:	bc80      	pop	{r7}
   15a36:	4770      	bx	lr

00015a38 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   15a38:	b480      	push	{r7}
   15a3a:	b083      	sub	sp, #12
   15a3c:	af00      	add	r7, sp, #0
   15a3e:	6078      	str	r0, [r7, #4]
   15a40:	460b      	mov	r3, r1
   15a42:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   15a44:	78fb      	ldrb	r3, [r7, #3]
   15a46:	f003 0307 	and.w	r3, r3, #7
   15a4a:	b2db      	uxtb	r3, r3
}
   15a4c:	4618      	mov	r0, r3
   15a4e:	370c      	adds	r7, #12
   15a50:	46bd      	mov	sp, r7
   15a52:	bc80      	pop	{r7}
   15a54:	4770      	bx	lr

00015a56 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   15a56:	b480      	push	{r7}
   15a58:	b083      	sub	sp, #12
   15a5a:	af00      	add	r7, sp, #0
   15a5c:	6078      	str	r0, [r7, #4]
   15a5e:	4608      	mov	r0, r1
   15a60:	4611      	mov	r1, r2
   15a62:	461a      	mov	r2, r3
   15a64:	4603      	mov	r3, r0
   15a66:	70fb      	strb	r3, [r7, #3]
   15a68:	460b      	mov	r3, r1
   15a6a:	70bb      	strb	r3, [r7, #2]
   15a6c:	4613      	mov	r3, r2
   15a6e:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   15a70:	78fb      	ldrb	r3, [r7, #3]
   15a72:	2b07      	cmp	r3, #7
   15a74:	dc01      	bgt.n	15a7a <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   15a76:	78bb      	ldrb	r3, [r7, #2]
   15a78:	e000      	b.n	15a7c <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   15a7a:	787b      	ldrb	r3, [r7, #1]
}
   15a7c:	4618      	mov	r0, r3
   15a7e:	370c      	adds	r7, #12
   15a80:	46bd      	mov	sp, r7
   15a82:	bc80      	pop	{r7}
   15a84:	4770      	bx	lr
	...

00015a88 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   15a88:	b580      	push	{r7, lr}
   15a8a:	b082      	sub	sp, #8
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	6078      	str	r0, [r7, #4]
   15a90:	460b      	mov	r3, r1
   15a92:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   15a94:	687b      	ldr	r3, [r7, #4]
   15a96:	68da      	ldr	r2, [r3, #12]
   15a98:	687b      	ldr	r3, [r7, #4]
   15a9a:	7a1b      	ldrb	r3, [r3, #8]
   15a9c:	4619      	mov	r1, r3
   15a9e:	4610      	mov	r0, r2
   15aa0:	4b0a      	ldr	r3, [pc, #40]	; (15acc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   15aa2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   15aa4:	687b      	ldr	r3, [r7, #4]
   15aa6:	68db      	ldr	r3, [r3, #12]
   15aa8:	1cf9      	adds	r1, r7, #3
   15aaa:	2201      	movs	r2, #1
   15aac:	4618      	mov	r0, r3
   15aae:	4b08      	ldr	r3, [pc, #32]	; (15ad0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   15ab0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   15ab2:	687b      	ldr	r3, [r7, #4]
   15ab4:	68db      	ldr	r3, [r3, #12]
   15ab6:	6879      	ldr	r1, [r7, #4]
   15ab8:	2201      	movs	r2, #1
   15aba:	4618      	mov	r0, r3
   15abc:	4b05      	ldr	r3, [pc, #20]	; (15ad4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   15abe:	4798      	blx	r3

	return registerValue;
   15ac0:	687b      	ldr	r3, [r7, #4]
   15ac2:	781b      	ldrb	r3, [r3, #0]
}
   15ac4:	4618      	mov	r0, r3
   15ac6:	3708      	adds	r7, #8
   15ac8:	46bd      	mov	sp, r7
   15aca:	bd80      	pop	{r7, pc}
   15acc:	000156f9 	.word	0x000156f9
   15ad0:	00015725 	.word	0x00015725
   15ad4:	00015765 	.word	0x00015765

00015ad8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   15ad8:	b580      	push	{r7, lr}
   15ada:	b084      	sub	sp, #16
   15adc:	af00      	add	r7, sp, #0
   15ade:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   15ae0:	687b      	ldr	r3, [r7, #4]
   15ae2:	68da      	ldr	r2, [r3, #12]
   15ae4:	687b      	ldr	r3, [r7, #4]
   15ae6:	7a1b      	ldrb	r3, [r3, #8]
   15ae8:	4619      	mov	r1, r3
   15aea:	4610      	mov	r0, r2
   15aec:	4b06      	ldr	r3, [pc, #24]	; (15b08 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   15aee:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   15af0:	2109      	movs	r1, #9
   15af2:	6878      	ldr	r0, [r7, #4]
   15af4:	4b05      	ldr	r3, [pc, #20]	; (15b0c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   15af6:	4798      	blx	r3
   15af8:	4603      	mov	r3, r0
   15afa:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   15afc:	7bfb      	ldrb	r3, [r7, #15]
}
   15afe:	4618      	mov	r0, r3
   15b00:	3710      	adds	r7, #16
   15b02:	46bd      	mov	sp, r7
   15b04:	bd80      	pop	{r7, pc}
   15b06:	bf00      	nop
   15b08:	000156f9 	.word	0x000156f9
   15b0c:	00015a89 	.word	0x00015a89

00015b10 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   15b10:	b580      	push	{r7, lr}
   15b12:	b084      	sub	sp, #16
   15b14:	af00      	add	r7, sp, #0
   15b16:	6078      	str	r0, [r7, #4]
   15b18:	460b      	mov	r3, r1
   15b1a:	70fb      	strb	r3, [r7, #3]
   15b1c:	4613      	mov	r3, r2
   15b1e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   15b20:	687b      	ldr	r3, [r7, #4]
   15b22:	68da      	ldr	r2, [r3, #12]
   15b24:	687b      	ldr	r3, [r7, #4]
   15b26:	7a1b      	ldrb	r3, [r3, #8]
   15b28:	4619      	mov	r1, r3
   15b2a:	4610      	mov	r0, r2
   15b2c:	4b09      	ldr	r3, [pc, #36]	; (15b54 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   15b2e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   15b30:	78fb      	ldrb	r3, [r7, #3]
   15b32:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   15b34:	78bb      	ldrb	r3, [r7, #2]
   15b36:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   15b38:	687b      	ldr	r3, [r7, #4]
   15b3a:	68db      	ldr	r3, [r3, #12]
   15b3c:	f107 010c 	add.w	r1, r7, #12
   15b40:	2202      	movs	r2, #2
   15b42:	4618      	mov	r0, r3
   15b44:	4b04      	ldr	r3, [pc, #16]	; (15b58 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   15b46:	4798      	blx	r3
   15b48:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   15b4a:	4618      	mov	r0, r3
   15b4c:	3710      	adds	r7, #16
   15b4e:	46bd      	mov	sp, r7
   15b50:	bd80      	pop	{r7, pc}
   15b52:	bf00      	nop
   15b54:	000156f9 	.word	0x000156f9
   15b58:	00015725 	.word	0x00015725

00015b5c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   15b5c:	b580      	push	{r7, lr}
   15b5e:	b082      	sub	sp, #8
   15b60:	af00      	add	r7, sp, #0
   15b62:	6078      	str	r0, [r7, #4]
   15b64:	460b      	mov	r3, r1
   15b66:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   15b68:	687b      	ldr	r3, [r7, #4]
   15b6a:	68da      	ldr	r2, [r3, #12]
   15b6c:	687b      	ldr	r3, [r7, #4]
   15b6e:	7a1b      	ldrb	r3, [r3, #8]
   15b70:	4619      	mov	r1, r3
   15b72:	4610      	mov	r0, r2
   15b74:	4b06      	ldr	r3, [pc, #24]	; (15b90 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   15b76:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   15b78:	78fb      	ldrb	r3, [r7, #3]
   15b7a:	461a      	mov	r2, r3
   15b7c:	2109      	movs	r1, #9
   15b7e:	6878      	ldr	r0, [r7, #4]
   15b80:	4b04      	ldr	r3, [pc, #16]	; (15b94 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   15b82:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   15b84:	78fb      	ldrb	r3, [r7, #3]
}
   15b86:	4618      	mov	r0, r3
   15b88:	3708      	adds	r7, #8
   15b8a:	46bd      	mov	sp, r7
   15b8c:	bd80      	pop	{r7, pc}
   15b8e:	bf00      	nop
   15b90:	000156f9 	.word	0x000156f9
   15b94:	00015b11 	.word	0x00015b11

00015b98 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   15b98:	b580      	push	{r7, lr}
   15b9a:	b084      	sub	sp, #16
   15b9c:	af00      	add	r7, sp, #0
   15b9e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   15ba0:	2300      	movs	r3, #0
   15ba2:	73fb      	strb	r3, [r7, #15]
   15ba4:	7bfb      	ldrb	r3, [r7, #15]
   15ba6:	2b07      	cmp	r3, #7
   15ba8:	dc0f      	bgt.n	15bca <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   15baa:	7bfb      	ldrb	r3, [r7, #15]
   15bac:	2201      	movs	r2, #1
   15bae:	4619      	mov	r1, r3
   15bb0:	6878      	ldr	r0, [r7, #4]
   15bb2:	4b08      	ldr	r3, [pc, #32]	; (15bd4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   15bb4:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   15bb6:	7bfb      	ldrb	r3, [r7, #15]
   15bb8:	2201      	movs	r2, #1
   15bba:	4619      	mov	r1, r3
   15bbc:	6878      	ldr	r0, [r7, #4]
   15bbe:	4b06      	ldr	r3, [pc, #24]	; (15bd8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   15bc0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   15bc2:	7bfb      	ldrb	r3, [r7, #15]
   15bc4:	3301      	adds	r3, #1
   15bc6:	73fb      	strb	r3, [r7, #15]
   15bc8:	e7ec      	b.n	15ba4 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   15bca:	bf00      	nop
   15bcc:	3710      	adds	r7, #16
   15bce:	46bd      	mov	sp, r7
   15bd0:	bd80      	pop	{r7, pc}
   15bd2:	bf00      	nop
   15bd4:	00015d11 	.word	0x00015d11
   15bd8:	00015df5 	.word	0x00015df5

00015bdc <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   15bdc:	b580      	push	{r7, lr}
   15bde:	b084      	sub	sp, #16
   15be0:	af00      	add	r7, sp, #0
   15be2:	6078      	str	r0, [r7, #4]
   15be4:	460b      	mov	r3, r1
   15be6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   15be8:	78fb      	ldrb	r3, [r7, #3]
   15bea:	2b00      	cmp	r3, #0
   15bec:	dd23      	ble.n	15c36 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   15bee:	2300      	movs	r3, #0
   15bf0:	73fb      	strb	r3, [r7, #15]
   15bf2:	7bfb      	ldrb	r3, [r7, #15]
   15bf4:	2b07      	cmp	r3, #7
   15bf6:	dc21      	bgt.n	15c3c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   15bf8:	78fa      	ldrb	r2, [r7, #3]
   15bfa:	7bfb      	ldrb	r3, [r7, #15]
   15bfc:	fa42 f303 	asr.w	r3, r2, r3
   15c00:	f003 0301 	and.w	r3, r3, #1
   15c04:	2b00      	cmp	r3, #0
   15c06:	d00c      	beq.n	15c22 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   15c08:	7bfb      	ldrb	r3, [r7, #15]
   15c0a:	2201      	movs	r2, #1
   15c0c:	4619      	mov	r1, r3
   15c0e:	6878      	ldr	r0, [r7, #4]
   15c10:	4b0c      	ldr	r3, [pc, #48]	; (15c44 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   15c12:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   15c14:	7bfb      	ldrb	r3, [r7, #15]
   15c16:	2201      	movs	r2, #1
   15c18:	4619      	mov	r1, r3
   15c1a:	6878      	ldr	r0, [r7, #4]
   15c1c:	4b0a      	ldr	r3, [pc, #40]	; (15c48 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   15c1e:	4798      	blx	r3
   15c20:	e005      	b.n	15c2e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   15c22:	7bfb      	ldrb	r3, [r7, #15]
   15c24:	2200      	movs	r2, #0
   15c26:	4619      	mov	r1, r3
   15c28:	6878      	ldr	r0, [r7, #4]
   15c2a:	4b06      	ldr	r3, [pc, #24]	; (15c44 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   15c2c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   15c2e:	7bfb      	ldrb	r3, [r7, #15]
   15c30:	3301      	adds	r3, #1
   15c32:	73fb      	strb	r3, [r7, #15]
   15c34:	e7dd      	b.n	15bf2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   15c36:	6878      	ldr	r0, [r7, #4]
   15c38:	4b04      	ldr	r3, [pc, #16]	; (15c4c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   15c3a:	4798      	blx	r3
	}
	
}
   15c3c:	bf00      	nop
   15c3e:	3710      	adds	r7, #16
   15c40:	46bd      	mov	sp, r7
   15c42:	bd80      	pop	{r7, pc}
   15c44:	00015d11 	.word	0x00015d11
   15c48:	00015df5 	.word	0x00015df5
   15c4c:	00015c51 	.word	0x00015c51

00015c50 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   15c50:	b580      	push	{r7, lr}
   15c52:	b084      	sub	sp, #16
   15c54:	af00      	add	r7, sp, #0
   15c56:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   15c58:	2300      	movs	r3, #0
   15c5a:	73fb      	strb	r3, [r7, #15]
   15c5c:	7bfb      	ldrb	r3, [r7, #15]
   15c5e:	2b07      	cmp	r3, #7
   15c60:	dc09      	bgt.n	15c76 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   15c62:	7bfb      	ldrb	r3, [r7, #15]
   15c64:	2200      	movs	r2, #0
   15c66:	4619      	mov	r1, r3
   15c68:	6878      	ldr	r0, [r7, #4]
   15c6a:	4b05      	ldr	r3, [pc, #20]	; (15c80 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   15c6c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   15c6e:	7bfb      	ldrb	r3, [r7, #15]
   15c70:	3301      	adds	r3, #1
   15c72:	73fb      	strb	r3, [r7, #15]
   15c74:	e7f2      	b.n	15c5c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   15c76:	bf00      	nop
   15c78:	3710      	adds	r7, #16
   15c7a:	46bd      	mov	sp, r7
   15c7c:	bd80      	pop	{r7, pc}
   15c7e:	bf00      	nop
   15c80:	00015d11 	.word	0x00015d11

00015c84 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   15c84:	b580      	push	{r7, lr}
   15c86:	b084      	sub	sp, #16
   15c88:	af00      	add	r7, sp, #0
   15c8a:	6078      	str	r0, [r7, #4]
   15c8c:	4608      	mov	r0, r1
   15c8e:	4611      	mov	r1, r2
   15c90:	461a      	mov	r2, r3
   15c92:	4603      	mov	r3, r0
   15c94:	70fb      	strb	r3, [r7, #3]
   15c96:	460b      	mov	r3, r1
   15c98:	70bb      	strb	r3, [r7, #2]
   15c9a:	4613      	mov	r3, r2
   15c9c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   15c9e:	787b      	ldrb	r3, [r7, #1]
   15ca0:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   15ca2:	78fb      	ldrb	r3, [r7, #3]
   15ca4:	4619      	mov	r1, r3
   15ca6:	6878      	ldr	r0, [r7, #4]
   15ca8:	4b16      	ldr	r3, [pc, #88]	; (15d04 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   15caa:	4798      	blx	r3
   15cac:	4603      	mov	r3, r0
   15cae:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   15cb0:	7bfb      	ldrb	r3, [r7, #15]
   15cb2:	4619      	mov	r1, r3
   15cb4:	6878      	ldr	r0, [r7, #4]
   15cb6:	4b14      	ldr	r3, [pc, #80]	; (15d08 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   15cb8:	4798      	blx	r3
   15cba:	4603      	mov	r3, r0
   15cbc:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   15cbe:	78bb      	ldrb	r3, [r7, #2]
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d009      	beq.n	15cd8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   15cc4:	7bba      	ldrb	r2, [r7, #14]
   15cc6:	7b7b      	ldrb	r3, [r7, #13]
   15cc8:	4619      	mov	r1, r3
   15cca:	2301      	movs	r3, #1
   15ccc:	408b      	lsls	r3, r1
   15cce:	b2db      	uxtb	r3, r3
   15cd0:	4313      	orrs	r3, r2
   15cd2:	b2db      	uxtb	r3, r3
   15cd4:	73bb      	strb	r3, [r7, #14]
   15cd6:	e00a      	b.n	15cee <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   15cd8:	7bba      	ldrb	r2, [r7, #14]
   15cda:	7b7b      	ldrb	r3, [r7, #13]
   15cdc:	4619      	mov	r1, r3
   15cde:	2301      	movs	r3, #1
   15ce0:	408b      	lsls	r3, r1
   15ce2:	b2db      	uxtb	r3, r3
   15ce4:	43db      	mvns	r3, r3
   15ce6:	b2db      	uxtb	r3, r3
   15ce8:	4013      	ands	r3, r2
   15cea:	b2db      	uxtb	r3, r3
   15cec:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   15cee:	7bba      	ldrb	r2, [r7, #14]
   15cf0:	7bfb      	ldrb	r3, [r7, #15]
   15cf2:	4619      	mov	r1, r3
   15cf4:	6878      	ldr	r0, [r7, #4]
   15cf6:	4b05      	ldr	r3, [pc, #20]	; (15d0c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   15cf8:	4798      	blx	r3
}
   15cfa:	bf00      	nop
   15cfc:	3710      	adds	r7, #16
   15cfe:	46bd      	mov	sp, r7
   15d00:	bd80      	pop	{r7, pc}
   15d02:	bf00      	nop
   15d04:	00015a39 	.word	0x00015a39
   15d08:	00015a89 	.word	0x00015a89
   15d0c:	00015b11 	.word	0x00015b11

00015d10 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   15d10:	b590      	push	{r4, r7, lr}
   15d12:	b085      	sub	sp, #20
   15d14:	af02      	add	r7, sp, #8
   15d16:	6078      	str	r0, [r7, #4]
   15d18:	460b      	mov	r3, r1
   15d1a:	70fb      	strb	r3, [r7, #3]
   15d1c:	4613      	mov	r3, r2
   15d1e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   15d20:	78bb      	ldrb	r3, [r7, #2]
   15d22:	2b01      	cmp	r3, #1
   15d24:	bf0c      	ite	eq
   15d26:	2301      	moveq	r3, #1
   15d28:	2300      	movne	r3, #0
   15d2a:	b2db      	uxtb	r3, r3
   15d2c:	461a      	mov	r2, r3
   15d2e:	78f9      	ldrb	r1, [r7, #3]
   15d30:	2300      	movs	r3, #0
   15d32:	9300      	str	r3, [sp, #0]
   15d34:	2300      	movs	r3, #0
   15d36:	6878      	ldr	r0, [r7, #4]
   15d38:	4c02      	ldr	r4, [pc, #8]	; (15d44 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   15d3a:	47a0      	blx	r4
}
   15d3c:	bf00      	nop
   15d3e:	370c      	adds	r7, #12
   15d40:	46bd      	mov	sp, r7
   15d42:	bd90      	pop	{r4, r7, pc}
   15d44:	00015c85 	.word	0x00015c85

00015d48 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   15d48:	b590      	push	{r4, r7, lr}
   15d4a:	b085      	sub	sp, #20
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	6078      	str	r0, [r7, #4]
   15d50:	460b      	mov	r3, r1
   15d52:	70fb      	strb	r3, [r7, #3]
   15d54:	4613      	mov	r3, r2
   15d56:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   15d58:	78fb      	ldrb	r3, [r7, #3]
   15d5a:	4619      	mov	r1, r3
   15d5c:	6878      	ldr	r0, [r7, #4]
   15d5e:	4b21      	ldr	r3, [pc, #132]	; (15de4 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   15d60:	4798      	blx	r3
   15d62:	4603      	mov	r3, r0
   15d64:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   15d66:	78f9      	ldrb	r1, [r7, #3]
   15d68:	230a      	movs	r3, #10
   15d6a:	220a      	movs	r2, #10
   15d6c:	6878      	ldr	r0, [r7, #4]
   15d6e:	4c1e      	ldr	r4, [pc, #120]	; (15de8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   15d70:	47a0      	blx	r4
   15d72:	4603      	mov	r3, r0
   15d74:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   15d76:	7bfb      	ldrb	r3, [r7, #15]
   15d78:	4619      	mov	r1, r3
   15d7a:	6878      	ldr	r0, [r7, #4]
   15d7c:	4b1b      	ldr	r3, [pc, #108]	; (15dec <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   15d7e:	4798      	blx	r3
   15d80:	4603      	mov	r3, r0
   15d82:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   15d84:	78bb      	ldrb	r3, [r7, #2]
   15d86:	2b00      	cmp	r3, #0
   15d88:	d009      	beq.n	15d9e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   15d8a:	7bba      	ldrb	r2, [r7, #14]
   15d8c:	7b7b      	ldrb	r3, [r7, #13]
   15d8e:	4619      	mov	r1, r3
   15d90:	2301      	movs	r3, #1
   15d92:	408b      	lsls	r3, r1
   15d94:	b2db      	uxtb	r3, r3
   15d96:	4313      	orrs	r3, r2
   15d98:	b2db      	uxtb	r3, r3
   15d9a:	73bb      	strb	r3, [r7, #14]
   15d9c:	e00a      	b.n	15db4 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   15d9e:	7bba      	ldrb	r2, [r7, #14]
   15da0:	7b7b      	ldrb	r3, [r7, #13]
   15da2:	4619      	mov	r1, r3
   15da4:	2301      	movs	r3, #1
   15da6:	408b      	lsls	r3, r1
   15da8:	b2db      	uxtb	r3, r3
   15daa:	43db      	mvns	r3, r3
   15dac:	b2db      	uxtb	r3, r3
   15dae:	4013      	ands	r3, r2
   15db0:	b2db      	uxtb	r3, r3
   15db2:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   15db4:	78f9      	ldrb	r1, [r7, #3]
   15db6:	2309      	movs	r3, #9
   15db8:	2209      	movs	r2, #9
   15dba:	6878      	ldr	r0, [r7, #4]
   15dbc:	4c0a      	ldr	r4, [pc, #40]	; (15de8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   15dbe:	47a0      	blx	r4
   15dc0:	4603      	mov	r3, r0
   15dc2:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   15dc4:	7bba      	ldrb	r2, [r7, #14]
   15dc6:	7bfb      	ldrb	r3, [r7, #15]
   15dc8:	4619      	mov	r1, r3
   15dca:	6878      	ldr	r0, [r7, #4]
   15dcc:	4b08      	ldr	r3, [pc, #32]	; (15df0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   15dce:	4798      	blx	r3
   15dd0:	4603      	mov	r3, r0
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	bf0c      	ite	eq
   15dd6:	2301      	moveq	r3, #1
   15dd8:	2300      	movne	r3, #0
   15dda:	b2db      	uxtb	r3, r3
}
   15ddc:	4618      	mov	r0, r3
   15dde:	3714      	adds	r7, #20
   15de0:	46bd      	mov	sp, r7
   15de2:	bd90      	pop	{r4, r7, pc}
   15de4:	00015a39 	.word	0x00015a39
   15de8:	00015a57 	.word	0x00015a57
   15dec:	00015a89 	.word	0x00015a89
   15df0:	00015b11 	.word	0x00015b11

00015df4 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   15df4:	b590      	push	{r4, r7, lr}
   15df6:	b085      	sub	sp, #20
   15df8:	af02      	add	r7, sp, #8
   15dfa:	6078      	str	r0, [r7, #4]
   15dfc:	460b      	mov	r3, r1
   15dfe:	70fb      	strb	r3, [r7, #3]
   15e00:	4613      	mov	r3, r2
   15e02:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   15e04:	78ba      	ldrb	r2, [r7, #2]
   15e06:	78f9      	ldrb	r1, [r7, #3]
   15e08:	2306      	movs	r3, #6
   15e0a:	9300      	str	r3, [sp, #0]
   15e0c:	2306      	movs	r3, #6
   15e0e:	6878      	ldr	r0, [r7, #4]
   15e10:	4c02      	ldr	r4, [pc, #8]	; (15e1c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   15e12:	47a0      	blx	r4
}
   15e14:	bf00      	nop
   15e16:	370c      	adds	r7, #12
   15e18:	46bd      	mov	sp, r7
   15e1a:	bd90      	pop	{r4, r7, pc}
   15e1c:	00015c85 	.word	0x00015c85

00015e20 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   15e20:	b480      	push	{r7}
   15e22:	b083      	sub	sp, #12
   15e24:	af00      	add	r7, sp, #0
   15e26:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   15e28:	4b04      	ldr	r3, [pc, #16]	; (15e3c <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   15e2a:	681b      	ldr	r3, [r3, #0]
   15e2c:	2201      	movs	r2, #1
   15e2e:	709a      	strb	r2, [r3, #2]
	asm("nop");
   15e30:	bf00      	nop
}
   15e32:	bf00      	nop
   15e34:	370c      	adds	r7, #12
   15e36:	46bd      	mov	sp, r7
   15e38:	bc80      	pop	{r7}
   15e3a:	4770      	bx	lr
   15e3c:	20009454 	.word	0x20009454

00015e40 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   15e40:	b480      	push	{r7}
   15e42:	b083      	sub	sp, #12
   15e44:	af00      	add	r7, sp, #0
   15e46:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   15e48:	687b      	ldr	r3, [r7, #4]
   15e4a:	4618      	mov	r0, r3
   15e4c:	370c      	adds	r7, #12
   15e4e:	46bd      	mov	sp, r7
   15e50:	bc80      	pop	{r7}
   15e52:	4770      	bx	lr

00015e54 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   15e54:	b480      	push	{r7}
   15e56:	b083      	sub	sp, #12
   15e58:	af00      	add	r7, sp, #0
   15e5a:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   15e5c:	687b      	ldr	r3, [r7, #4]
   15e5e:	4618      	mov	r0, r3
   15e60:	370c      	adds	r7, #12
   15e62:	46bd      	mov	sp, r7
   15e64:	bc80      	pop	{r7}
   15e66:	4770      	bx	lr

00015e68 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   15e68:	b580      	push	{r7, lr}
   15e6a:	b084      	sub	sp, #16
   15e6c:	af00      	add	r7, sp, #0
   15e6e:	60f8      	str	r0, [r7, #12]
   15e70:	60b9      	str	r1, [r7, #8]
   15e72:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   15e74:	4a1c      	ldr	r2, [pc, #112]	; (15ee8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   15e76:	68fb      	ldr	r3, [r7, #12]
   15e78:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   15e7a:	68fb      	ldr	r3, [r7, #12]
   15e7c:	68ba      	ldr	r2, [r7, #8]
   15e7e:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   15e80:	68fb      	ldr	r3, [r7, #12]
   15e82:	687a      	ldr	r2, [r7, #4]
   15e84:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   15e86:	68fb      	ldr	r3, [r7, #12]
   15e88:	6a1b      	ldr	r3, [r3, #32]
   15e8a:	68da      	ldr	r2, [r3, #12]
   15e8c:	68fb      	ldr	r3, [r7, #12]
   15e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   15e90:	68fb      	ldr	r3, [r7, #12]
   15e92:	6a1b      	ldr	r3, [r3, #32]
   15e94:	689a      	ldr	r2, [r3, #8]
   15e96:	68fb      	ldr	r3, [r7, #12]
   15e98:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   15e9a:	68fb      	ldr	r3, [r7, #12]
   15e9c:	4a13      	ldr	r2, [pc, #76]	; (15eec <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   15e9e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   15ea0:	68fb      	ldr	r3, [r7, #12]
   15ea2:	2204      	movs	r2, #4
   15ea4:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   15ea6:	68fb      	ldr	r3, [r7, #12]
   15ea8:	2209      	movs	r2, #9
   15eaa:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   15eac:	68fb      	ldr	r3, [r7, #12]
   15eae:	220e      	movs	r2, #14
   15eb0:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   15eb2:	68fb      	ldr	r3, [r7, #12]
   15eb4:	2213      	movs	r2, #19
   15eb6:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   15eb8:	20c8      	movs	r0, #200	; 0xc8
   15eba:	4b0d      	ldr	r3, [pc, #52]	; (15ef0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   15ebc:	4798      	blx	r3
	temperatureTimer.Init();
   15ebe:	480d      	ldr	r0, [pc, #52]	; (15ef4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   15ec0:	4b0d      	ldr	r3, [pc, #52]	; (15ef8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   15ec2:	4798      	blx	r3
	configure_channels();
   15ec4:	68f8      	ldr	r0, [r7, #12]
   15ec6:	4b0d      	ldr	r3, [pc, #52]	; (15efc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   15ec8:	4798      	blx	r3
	configure_global_parameters();
   15eca:	68f8      	ldr	r0, [r7, #12]
   15ecc:	4b0c      	ldr	r3, [pc, #48]	; (15f00 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   15ece:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   15ed0:	68fb      	ldr	r3, [r7, #12]
   15ed2:	2201      	movs	r2, #1
   15ed4:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   15ed6:	68f8      	ldr	r0, [r7, #12]
   15ed8:	4b0a      	ldr	r3, [pc, #40]	; (15f04 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   15eda:	4798      	blx	r3
   15edc:	4603      	mov	r3, r0
}
   15ede:	4618      	mov	r0, r3
   15ee0:	3710      	adds	r7, #16
   15ee2:	46bd      	mov	sp, r7
   15ee4:	bd80      	pop	{r7, pc}
   15ee6:	bf00      	nop
   15ee8:	20009454 	.word	0x20009454
   15eec:	20002708 	.word	0x20002708
   15ef0:	00003ed5 	.word	0x00003ed5
   15ef4:	200026d0 	.word	0x200026d0
   15ef8:	00011365 	.word	0x00011365
   15efc:	00016311 	.word	0x00016311
   15f00:	000163c9 	.word	0x000163c9
   15f04:	00016401 	.word	0x00016401

00015f08 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   15f08:	b590      	push	{r4, r7, lr}
   15f0a:	b089      	sub	sp, #36	; 0x24
   15f0c:	af02      	add	r7, sp, #8
   15f0e:	60f8      	str	r0, [r7, #12]
   15f10:	60b9      	str	r1, [r7, #8]
   15f12:	603b      	str	r3, [r7, #0]
   15f14:	4613      	mov	r3, r2
   15f16:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   15f18:	79fb      	ldrb	r3, [r7, #7]
   15f1a:	461a      	mov	r2, r3
   15f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
   15f20:	68f8      	ldr	r0, [r7, #12]
   15f22:	4b0b      	ldr	r3, [pc, #44]	; (15f50 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   15f24:	4798      	blx	r3
   15f26:	4603      	mov	r3, r0
   15f28:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   15f2a:	8afa      	ldrh	r2, [r7, #22]
   15f2c:	683b      	ldr	r3, [r7, #0]
   15f2e:	9300      	str	r3, [sp, #0]
   15f30:	4613      	mov	r3, r2
   15f32:	2202      	movs	r2, #2
   15f34:	68b9      	ldr	r1, [r7, #8]
   15f36:	68f8      	ldr	r0, [r7, #12]
   15f38:	4c06      	ldr	r4, [pc, #24]	; (15f54 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   15f3a:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   15f3c:	8afb      	ldrh	r3, [r7, #22]
   15f3e:	79fa      	ldrb	r2, [r7, #7]
   15f40:	68b9      	ldr	r1, [r7, #8]
   15f42:	68f8      	ldr	r0, [r7, #12]
   15f44:	4c04      	ldr	r4, [pc, #16]	; (15f58 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   15f46:	47a0      	blx	r4
}
   15f48:	bf00      	nop
   15f4a:	371c      	adds	r7, #28
   15f4c:	46bd      	mov	sp, r7
   15f4e:	bd90      	pop	{r4, r7, pc}
   15f50:	000162e5 	.word	0x000162e5
   15f54:	000161a5 	.word	0x000161a5
   15f58:	00015fa9 	.word	0x00015fa9

00015f5c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   15f5c:	b590      	push	{r4, r7, lr}
   15f5e:	b087      	sub	sp, #28
   15f60:	af02      	add	r7, sp, #8
   15f62:	6078      	str	r0, [r7, #4]
   15f64:	460b      	mov	r3, r1
   15f66:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   15f68:	78fb      	ldrb	r3, [r7, #3]
   15f6a:	687a      	ldr	r2, [r7, #4]
   15f6c:	4413      	add	r3, r2
   15f6e:	78db      	ldrb	r3, [r3, #3]
   15f70:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   15f72:	687b      	ldr	r3, [r7, #4]
   15f74:	2200      	movs	r2, #0
   15f76:	705a      	strb	r2, [r3, #1]
	ready=false;
   15f78:	687b      	ldr	r3, [r7, #4]
   15f7a:	2200      	movs	r2, #0
   15f7c:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	6d99      	ldr	r1, [r3, #88]	; 0x58
   15f82:	7bfb      	ldrb	r3, [r7, #15]
   15f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15f88:	b2db      	uxtb	r3, r3
   15f8a:	9300      	str	r3, [sp, #0]
   15f8c:	2300      	movs	r3, #0
   15f8e:	2202      	movs	r2, #2
   15f90:	6878      	ldr	r0, [r7, #4]
   15f92:	4c04      	ldr	r4, [pc, #16]	; (15fa4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   15f94:	47a0      	blx	r4
	channelOnProcess=channel_number;
   15f96:	687b      	ldr	r3, [r7, #4]
   15f98:	7bfa      	ldrb	r2, [r7, #15]
   15f9a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   15f9c:	bf00      	nop
   15f9e:	3714      	adds	r7, #20
   15fa0:	46bd      	mov	sp, r7
   15fa2:	bd90      	pop	{r4, r7, pc}
   15fa4:	00016275 	.word	0x00016275

00015fa8 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   15fa8:	b590      	push	{r4, r7, lr}
   15faa:	b089      	sub	sp, #36	; 0x24
   15fac:	af02      	add	r7, sp, #8
   15fae:	60f8      	str	r0, [r7, #12]
   15fb0:	60b9      	str	r1, [r7, #8]
   15fb2:	4611      	mov	r1, r2
   15fb4:	461a      	mov	r2, r3
   15fb6:	460b      	mov	r3, r1
   15fb8:	71fb      	strb	r3, [r7, #7]
   15fba:	4613      	mov	r3, r2
   15fbc:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   15fbe:	88ba      	ldrh	r2, [r7, #4]
   15fc0:	2300      	movs	r3, #0
   15fc2:	9300      	str	r3, [sp, #0]
   15fc4:	4613      	mov	r3, r2
   15fc6:	2203      	movs	r2, #3
   15fc8:	68b9      	ldr	r1, [r7, #8]
   15fca:	68f8      	ldr	r0, [r7, #12]
   15fcc:	4c03      	ldr	r4, [pc, #12]	; (15fdc <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   15fce:	47a0      	blx	r4
   15fd0:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   15fd2:	bf00      	nop
   15fd4:	371c      	adds	r7, #28
   15fd6:	46bd      	mov	sp, r7
   15fd8:	bd90      	pop	{r4, r7, pc}
   15fda:	bf00      	nop
   15fdc:	000161a5 	.word	0x000161a5

00015fe0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   15fe0:	b590      	push	{r4, r7, lr}
   15fe2:	b085      	sub	sp, #20
   15fe4:	af02      	add	r7, sp, #8
   15fe6:	6078      	str	r0, [r7, #4]
   15fe8:	460b      	mov	r3, r1
   15fea:	70fb      	strb	r3, [r7, #3]
   15fec:	4613      	mov	r3, r2
   15fee:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   15ff0:	78fb      	ldrb	r3, [r7, #3]
   15ff2:	461a      	mov	r2, r3
   15ff4:	2110      	movs	r1, #16
   15ff6:	6878      	ldr	r0, [r7, #4]
   15ff8:	4b17      	ldr	r3, [pc, #92]	; (16058 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   15ffa:	4798      	blx	r3
   15ffc:	4603      	mov	r3, r0
   15ffe:	461a      	mov	r2, r3
   16000:	687b      	ldr	r3, [r7, #4]
   16002:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   16006:	687b      	ldr	r3, [r7, #4]
   16008:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   16010:	2300      	movs	r3, #0
   16012:	9300      	str	r3, [sp, #0]
   16014:	4613      	mov	r3, r2
   16016:	2203      	movs	r2, #3
   16018:	6878      	ldr	r0, [r7, #4]
   1601a:	4c10      	ldr	r4, [pc, #64]	; (1605c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   1601c:	47a0      	blx	r4
   1601e:	4602      	mov	r2, r0
   16020:	687b      	ldr	r3, [r7, #4]
   16022:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   16024:	687b      	ldr	r3, [r7, #4]
   16026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   16028:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	6d19      	ldr	r1, [r3, #80]	; 0x50
   16034:	78bb      	ldrb	r3, [r7, #2]
   16036:	78fa      	ldrb	r2, [r7, #3]
   16038:	6878      	ldr	r0, [r7, #4]
   1603a:	4c09      	ldr	r4, [pc, #36]	; (16060 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   1603c:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   1603e:	687b      	ldr	r3, [r7, #4]
   16040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   16042:	0e1b      	lsrs	r3, r3, #24
   16044:	b2da      	uxtb	r2, r3
   16046:	687b      	ldr	r3, [r7, #4]
   16048:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   1604a:	687b      	ldr	r3, [r7, #4]
   1604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   1604e:	4618      	mov	r0, r3
   16050:	370c      	adds	r7, #12
   16052:	46bd      	mov	sp, r7
   16054:	bd90      	pop	{r4, r7, pc}
   16056:	bf00      	nop
   16058:	000162e5 	.word	0x000162e5
   1605c:	000161a5 	.word	0x000161a5
   16060:	000160b9 	.word	0x000160b9

00016064 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   16064:	b580      	push	{r7, lr}
   16066:	b082      	sub	sp, #8
   16068:	af00      	add	r7, sp, #0
   1606a:	6078      	str	r0, [r7, #4]
   1606c:	460b      	mov	r3, r1
   1606e:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   16070:	78fb      	ldrb	r3, [r7, #3]
   16072:	687a      	ldr	r2, [r7, #4]
   16074:	4413      	add	r3, r2
   16076:	78db      	ldrb	r3, [r3, #3]
   16078:	4619      	mov	r1, r3
   1607a:	6878      	ldr	r0, [r7, #4]
   1607c:	4b03      	ldr	r3, [pc, #12]	; (1608c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   1607e:	4798      	blx	r3
   16080:	4603      	mov	r3, r0
}
   16082:	4618      	mov	r0, r3
   16084:	3708      	adds	r7, #8
   16086:	46bd      	mov	sp, r7
   16088:	bd80      	pop	{r7, pc}
   1608a:	bf00      	nop
   1608c:	00016091 	.word	0x00016091

00016090 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   16090:	b580      	push	{r7, lr}
   16092:	b082      	sub	sp, #8
   16094:	af00      	add	r7, sp, #0
   16096:	6078      	str	r0, [r7, #4]
   16098:	460b      	mov	r3, r1
   1609a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   1609c:	78fb      	ldrb	r3, [r7, #3]
   1609e:	2202      	movs	r2, #2
   160a0:	4619      	mov	r1, r3
   160a2:	6878      	ldr	r0, [r7, #4]
   160a4:	4b03      	ldr	r3, [pc, #12]	; (160b4 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   160a6:	4798      	blx	r3
   160a8:	4603      	mov	r3, r0
}
   160aa:	4618      	mov	r0, r3
   160ac:	3708      	adds	r7, #8
   160ae:	46bd      	mov	sp, r7
   160b0:	bd80      	pop	{r7, pc}
   160b2:	bf00      	nop
   160b4:	00015fe1 	.word	0x00015fe1

000160b8 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   160b8:	b580      	push	{r7, lr}
   160ba:	b084      	sub	sp, #16
   160bc:	af00      	add	r7, sp, #0
   160be:	60f8      	str	r0, [r7, #12]
   160c0:	60b9      	str	r1, [r7, #8]
   160c2:	4611      	mov	r1, r2
   160c4:	461a      	mov	r2, r3
   160c6:	460b      	mov	r3, r1
   160c8:	71fb      	strb	r3, [r7, #7]
   160ca:	4613      	mov	r3, r2
   160cc:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   160ce:	68ba      	ldr	r2, [r7, #8]
   160d0:	68fb      	ldr	r3, [r7, #12]
   160d2:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   160d4:	68fb      	ldr	r3, [r7, #12]
   160d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   160d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   160dc:	2b00      	cmp	r3, #0
   160de:	d006      	beq.n	160ee <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   160e0:	68fb      	ldr	r3, [r7, #12]
   160e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   160e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   160e8:	461a      	mov	r2, r3
   160ea:	68fb      	ldr	r3, [r7, #12]
   160ec:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   160ee:	79bb      	ldrb	r3, [r7, #6]
   160f0:	2b02      	cmp	r3, #2
   160f2:	d11d      	bne.n	16130 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   160f4:	68fb      	ldr	r3, [r7, #12]
   160f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   160f8:	4b18      	ldr	r3, [pc, #96]	; (1615c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   160fa:	4610      	mov	r0, r2
   160fc:	4798      	blx	r3
   160fe:	4602      	mov	r2, r0
   16100:	4b17      	ldr	r3, [pc, #92]	; (16160 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   16102:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   16106:	4610      	mov	r0, r2
   16108:	4798      	blx	r3
   1610a:	4603      	mov	r3, r0
   1610c:	461a      	mov	r2, r3
   1610e:	68fb      	ldr	r3, [r7, #12]
   16110:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   16112:	79fb      	ldrb	r3, [r7, #7]
   16114:	4619      	mov	r1, r3
   16116:	68f8      	ldr	r0, [r7, #12]
   16118:	4b12      	ldr	r3, [pc, #72]	; (16164 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   1611a:	4798      	blx	r3
   1611c:	4603      	mov	r3, r0
   1611e:	4618      	mov	r0, r3
   16120:	68fb      	ldr	r3, [r7, #12]
   16122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   16124:	68f9      	ldr	r1, [r7, #12]
   16126:	1c83      	adds	r3, r0, #2
   16128:	009b      	lsls	r3, r3, #2
   1612a:	440b      	add	r3, r1
   1612c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   1612e:	e011      	b.n	16154 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   16130:	79bb      	ldrb	r3, [r7, #6]
   16132:	2b01      	cmp	r3, #1
   16134:	d10e      	bne.n	16154 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   16136:	68fb      	ldr	r3, [r7, #12]
   16138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1613a:	4b08      	ldr	r3, [pc, #32]	; (1615c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1613c:	4610      	mov	r0, r2
   1613e:	4798      	blx	r3
   16140:	4602      	mov	r2, r0
   16142:	4b07      	ldr	r3, [pc, #28]	; (16160 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   16144:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   16148:	4610      	mov	r0, r2
   1614a:	4798      	blx	r3
   1614c:	4603      	mov	r3, r0
   1614e:	461a      	mov	r2, r3
   16150:	68fb      	ldr	r3, [r7, #12]
   16152:	65da      	str	r2, [r3, #92]	; 0x5c
}
   16154:	bf00      	nop
   16156:	3710      	adds	r7, #16
   16158:	46bd      	mov	sp, r7
   1615a:	bd80      	pop	{r7, pc}
   1615c:	00018cb1 	.word	0x00018cb1
   16160:	00018ec1 	.word	0x00018ec1
   16164:	00016169 	.word	0x00016169

00016168 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   16168:	b480      	push	{r7}
   1616a:	b085      	sub	sp, #20
   1616c:	af00      	add	r7, sp, #0
   1616e:	6078      	str	r0, [r7, #4]
   16170:	460b      	mov	r3, r1
   16172:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   16174:	2300      	movs	r3, #0
   16176:	73fb      	strb	r3, [r7, #15]
   16178:	7bfb      	ldrb	r3, [r7, #15]
   1617a:	2b03      	cmp	r3, #3
   1617c:	dc0c      	bgt.n	16198 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   1617e:	7bfb      	ldrb	r3, [r7, #15]
   16180:	687a      	ldr	r2, [r7, #4]
   16182:	4413      	add	r3, r2
   16184:	78db      	ldrb	r3, [r3, #3]
   16186:	78fa      	ldrb	r2, [r7, #3]
   16188:	429a      	cmp	r2, r3
   1618a:	d101      	bne.n	16190 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   1618c:	7bfb      	ldrb	r3, [r7, #15]
   1618e:	e004      	b.n	1619a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   16190:	7bfb      	ldrb	r3, [r7, #15]
   16192:	3301      	adds	r3, #1
   16194:	73fb      	strb	r3, [r7, #15]
   16196:	e7ef      	b.n	16178 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   16198:	2300      	movs	r3, #0
}
   1619a:	4618      	mov	r0, r3
   1619c:	3714      	adds	r7, #20
   1619e:	46bd      	mov	sp, r7
   161a0:	bc80      	pop	{r7}
   161a2:	4770      	bx	lr

000161a4 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   161a4:	b590      	push	{r4, r7, lr}
   161a6:	b089      	sub	sp, #36	; 0x24
   161a8:	af02      	add	r7, sp, #8
   161aa:	60f8      	str	r0, [r7, #12]
   161ac:	60b9      	str	r1, [r7, #8]
   161ae:	4611      	mov	r1, r2
   161b0:	461a      	mov	r2, r3
   161b2:	460b      	mov	r3, r1
   161b4:	71fb      	strb	r3, [r7, #7]
   161b6:	4613      	mov	r3, r2
   161b8:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   161ba:	2300      	movs	r3, #0
   161bc:	75fb      	strb	r3, [r7, #23]
   161be:	7dfb      	ldrb	r3, [r7, #23]
   161c0:	2b06      	cmp	r3, #6
   161c2:	dc09      	bgt.n	161d8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   161c4:	68fb      	ldr	r3, [r7, #12]
   161c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   161c8:	7dfb      	ldrb	r3, [r7, #23]
   161ca:	4413      	add	r3, r2
   161cc:	2200      	movs	r2, #0
   161ce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   161d0:	7dfb      	ldrb	r3, [r7, #23]
   161d2:	3301      	adds	r3, #1
   161d4:	75fb      	strb	r3, [r7, #23]
   161d6:	e7f2      	b.n	161be <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   161d8:	68fb      	ldr	r3, [r7, #12]
   161da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   161dc:	79fa      	ldrb	r2, [r7, #7]
   161de:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   161e0:	68fb      	ldr	r3, [r7, #12]
   161e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   161e4:	3301      	adds	r3, #1
   161e6:	88ba      	ldrh	r2, [r7, #4]
   161e8:	1212      	asrs	r2, r2, #8
   161ea:	b2d2      	uxtb	r2, r2
   161ec:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   161ee:	68fb      	ldr	r3, [r7, #12]
   161f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   161f2:	3302      	adds	r3, #2
   161f4:	88ba      	ldrh	r2, [r7, #4]
   161f6:	b2d2      	uxtb	r2, r2
   161f8:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   161fa:	68fb      	ldr	r3, [r7, #12]
   161fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   161fe:	3303      	adds	r3, #3
   16200:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16202:	0e12      	lsrs	r2, r2, #24
   16204:	b2d2      	uxtb	r2, r2
   16206:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   16208:	68fb      	ldr	r3, [r7, #12]
   1620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1620c:	3304      	adds	r3, #4
   1620e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16210:	0c12      	lsrs	r2, r2, #16
   16212:	b2d2      	uxtb	r2, r2
   16214:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   16216:	68fb      	ldr	r3, [r7, #12]
   16218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1621a:	3305      	adds	r3, #5
   1621c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1621e:	0a12      	lsrs	r2, r2, #8
   16220:	b2d2      	uxtb	r2, r2
   16222:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   16224:	68fb      	ldr	r3, [r7, #12]
   16226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16228:	3306      	adds	r3, #6
   1622a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1622c:	b2d2      	uxtb	r2, r2
   1622e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   16230:	68fb      	ldr	r3, [r7, #12]
   16232:	6a18      	ldr	r0, [r3, #32]
   16234:	68fb      	ldr	r3, [r7, #12]
   16236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16238:	f107 0110 	add.w	r1, r7, #16
   1623c:	2307      	movs	r3, #7
   1623e:	9300      	str	r3, [sp, #0]
   16240:	460b      	mov	r3, r1
   16242:	68b9      	ldr	r1, [r7, #8]
   16244:	4c0a      	ldr	r4, [pc, #40]	; (16270 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   16246:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   16248:	7c3b      	ldrb	r3, [r7, #16]
   1624a:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   1624c:	7c7b      	ldrb	r3, [r7, #17]
   1624e:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   16250:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   16252:	7cbb      	ldrb	r3, [r7, #18]
   16254:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   16256:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   16258:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   1625a:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   1625c:	68fb      	ldr	r3, [r7, #12]
   1625e:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   16260:	bf00      	nop
	return output_data;
   16262:	68fb      	ldr	r3, [r7, #12]
   16264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   16266:	4618      	mov	r0, r3
   16268:	371c      	adds	r7, #28
   1626a:	46bd      	mov	sp, r7
   1626c:	bd90      	pop	{r4, r7, pc}
   1626e:	bf00      	nop
   16270:	00016681 	.word	0x00016681

00016274 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   16274:	b590      	push	{r4, r7, lr}
   16276:	b087      	sub	sp, #28
   16278:	af02      	add	r7, sp, #8
   1627a:	60f8      	str	r0, [r7, #12]
   1627c:	60b9      	str	r1, [r7, #8]
   1627e:	4611      	mov	r1, r2
   16280:	461a      	mov	r2, r3
   16282:	460b      	mov	r3, r1
   16284:	71fb      	strb	r3, [r7, #7]
   16286:	4613      	mov	r3, r2
   16288:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   1628a:	68fb      	ldr	r3, [r7, #12]
   1628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1628e:	79fa      	ldrb	r2, [r7, #7]
   16290:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   16292:	68fb      	ldr	r3, [r7, #12]
   16294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16296:	3301      	adds	r3, #1
   16298:	88ba      	ldrh	r2, [r7, #4]
   1629a:	1212      	asrs	r2, r2, #8
   1629c:	b2d2      	uxtb	r2, r2
   1629e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   162a0:	68fb      	ldr	r3, [r7, #12]
   162a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162a4:	3302      	adds	r3, #2
   162a6:	88ba      	ldrh	r2, [r7, #4]
   162a8:	b2d2      	uxtb	r2, r2
   162aa:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   162ac:	68fb      	ldr	r3, [r7, #12]
   162ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162b0:	3303      	adds	r3, #3
   162b2:	f897 2020 	ldrb.w	r2, [r7, #32]
   162b6:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   162b8:	68fb      	ldr	r3, [r7, #12]
   162ba:	6a18      	ldr	r0, [r3, #32]
   162bc:	68fb      	ldr	r3, [r7, #12]
   162be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   162c0:	68fb      	ldr	r3, [r7, #12]
   162c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   162c4:	2304      	movs	r3, #4
   162c6:	9300      	str	r3, [sp, #0]
   162c8:	460b      	mov	r3, r1
   162ca:	68b9      	ldr	r1, [r7, #8]
   162cc:	4c04      	ldr	r4, [pc, #16]	; (162e0 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   162ce:	47a0      	blx	r4
	return rx[0];
   162d0:	68fb      	ldr	r3, [r7, #12]
   162d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   162d4:	781b      	ldrb	r3, [r3, #0]
}
   162d6:	4618      	mov	r0, r3
   162d8:	3714      	adds	r7, #20
   162da:	46bd      	mov	sp, r7
   162dc:	bd90      	pop	{r4, r7, pc}
   162de:	bf00      	nop
   162e0:	00016681 	.word	0x00016681

000162e4 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   162e4:	b480      	push	{r7}
   162e6:	b083      	sub	sp, #12
   162e8:	af00      	add	r7, sp, #0
   162ea:	6078      	str	r0, [r7, #4]
   162ec:	460b      	mov	r3, r1
   162ee:	807b      	strh	r3, [r7, #2]
   162f0:	4613      	mov	r3, r2
   162f2:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   162f4:	787b      	ldrb	r3, [r7, #1]
   162f6:	3b01      	subs	r3, #1
   162f8:	b29b      	uxth	r3, r3
   162fa:	009b      	lsls	r3, r3, #2
   162fc:	b29a      	uxth	r2, r3
   162fe:	887b      	ldrh	r3, [r7, #2]
   16300:	4413      	add	r3, r2
   16302:	b29b      	uxth	r3, r3
}
   16304:	4618      	mov	r0, r3
   16306:	370c      	adds	r7, #12
   16308:	46bd      	mov	sp, r7
   1630a:	bc80      	pop	{r7}
   1630c:	4770      	bx	lr
	...

00016310 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   16310:	b590      	push	{r4, r7, lr}
   16312:	b085      	sub	sp, #20
   16314:	af00      	add	r7, sp, #0
   16316:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   16318:	4b25      	ldr	r3, [pc, #148]	; (163b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1631a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   16320:	68fb      	ldr	r3, [r7, #12]
   16322:	2202      	movs	r2, #2
   16324:	6878      	ldr	r0, [r7, #4]
   16326:	4c23      	ldr	r4, [pc, #140]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   16328:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   1632a:	4b23      	ldr	r3, [pc, #140]	; (163b8 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   1632c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   1632e:	687b      	ldr	r3, [r7, #4]
   16330:	6d99      	ldr	r1, [r3, #88]	; 0x58
   16332:	68fb      	ldr	r3, [r7, #12]
   16334:	2204      	movs	r2, #4
   16336:	6878      	ldr	r0, [r7, #4]
   16338:	4c1e      	ldr	r4, [pc, #120]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1633a:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   1633c:	4b1c      	ldr	r3, [pc, #112]	; (163b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1633e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   16340:	687b      	ldr	r3, [r7, #4]
   16342:	6d99      	ldr	r1, [r3, #88]	; 0x58
   16344:	68fb      	ldr	r3, [r7, #12]
   16346:	2207      	movs	r2, #7
   16348:	6878      	ldr	r0, [r7, #4]
   1634a:	4c1a      	ldr	r4, [pc, #104]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1634c:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   1634e:	4b1b      	ldr	r3, [pc, #108]	; (163bc <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   16350:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   16352:	687b      	ldr	r3, [r7, #4]
   16354:	6d99      	ldr	r1, [r3, #88]	; 0x58
   16356:	68fb      	ldr	r3, [r7, #12]
   16358:	2209      	movs	r2, #9
   1635a:	6878      	ldr	r0, [r7, #4]
   1635c:	4c15      	ldr	r4, [pc, #84]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1635e:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   16360:	4b13      	ldr	r3, [pc, #76]	; (163b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   16362:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   16364:	687b      	ldr	r3, [r7, #4]
   16366:	6d99      	ldr	r1, [r3, #88]	; 0x58
   16368:	68fb      	ldr	r3, [r7, #12]
   1636a:	220c      	movs	r2, #12
   1636c:	6878      	ldr	r0, [r7, #4]
   1636e:	4c11      	ldr	r4, [pc, #68]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   16370:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   16372:	4b13      	ldr	r3, [pc, #76]	; (163c0 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   16374:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   16376:	687b      	ldr	r3, [r7, #4]
   16378:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1637a:	68fb      	ldr	r3, [r7, #12]
   1637c:	220e      	movs	r2, #14
   1637e:	6878      	ldr	r0, [r7, #4]
   16380:	4c0c      	ldr	r4, [pc, #48]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   16382:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   16384:	4b0a      	ldr	r3, [pc, #40]	; (163b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   16386:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   16388:	687b      	ldr	r3, [r7, #4]
   1638a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1638c:	68fb      	ldr	r3, [r7, #12]
   1638e:	2211      	movs	r2, #17
   16390:	6878      	ldr	r0, [r7, #4]
   16392:	4c08      	ldr	r4, [pc, #32]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   16394:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   16396:	4b0b      	ldr	r3, [pc, #44]	; (163c4 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   16398:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   1639a:	687b      	ldr	r3, [r7, #4]
   1639c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1639e:	68fb      	ldr	r3, [r7, #12]
   163a0:	2213      	movs	r2, #19
   163a2:	6878      	ldr	r0, [r7, #4]
   163a4:	4c03      	ldr	r4, [pc, #12]	; (163b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   163a6:	47a0      	blx	r4

}
   163a8:	bf00      	nop
   163aa:	3714      	adds	r7, #20
   163ac:	46bd      	mov	sp, r7
   163ae:	bd90      	pop	{r4, r7, pc}
   163b0:	e89c4000 	.word	0xe89c4000
   163b4:	00015f09 	.word	0x00015f09
   163b8:	60a91000 	.word	0x60a91000
   163bc:	61e91000 	.word	0x61e91000
   163c0:	63291000 	.word	0x63291000
   163c4:	64691000 	.word	0x64691000

000163c8 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   163c8:	b590      	push	{r4, r7, lr}
   163ca:	b085      	sub	sp, #20
   163cc:	af02      	add	r7, sp, #8
   163ce:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   163d0:	687b      	ldr	r3, [r7, #4]
   163d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   163d4:	2300      	movs	r3, #0
   163d6:	9300      	str	r3, [sp, #0]
   163d8:	23f0      	movs	r3, #240	; 0xf0
   163da:	2202      	movs	r2, #2
   163dc:	6878      	ldr	r0, [r7, #4]
   163de:	4c07      	ldr	r4, [pc, #28]	; (163fc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   163e0:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   163e2:	687b      	ldr	r3, [r7, #4]
   163e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   163e6:	2300      	movs	r3, #0
   163e8:	9300      	str	r3, [sp, #0]
   163ea:	23ff      	movs	r3, #255	; 0xff
   163ec:	2202      	movs	r2, #2
   163ee:	6878      	ldr	r0, [r7, #4]
   163f0:	4c02      	ldr	r4, [pc, #8]	; (163fc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   163f2:	47a0      	blx	r4
}
   163f4:	bf00      	nop
   163f6:	370c      	adds	r7, #12
   163f8:	46bd      	mov	sp, r7
   163fa:	bd90      	pop	{r4, r7, pc}
   163fc:	00016275 	.word	0x00016275

00016400 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   16400:	b580      	push	{r7, lr}
   16402:	b082      	sub	sp, #8
   16404:	af00      	add	r7, sp, #0
   16406:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   16408:	687b      	ldr	r3, [r7, #4]
   1640a:	2200      	movs	r2, #0
   1640c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   16410:	687b      	ldr	r3, [r7, #4]
   16412:	2200      	movs	r2, #0
   16414:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   16416:	4a31      	ldr	r2, [pc, #196]	; (164dc <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   16418:	687b      	ldr	r3, [r7, #4]
   1641a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   1641c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16420:	492f      	ldr	r1, [pc, #188]	; (164e0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   16422:	4830      	ldr	r0, [pc, #192]	; (164e4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   16424:	4b30      	ldr	r3, [pc, #192]	; (164e8 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   16426:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   16428:	687b      	ldr	r3, [r7, #4]
   1642a:	79db      	ldrb	r3, [r3, #7]
   1642c:	2b01      	cmp	r3, #1
   1642e:	d009      	beq.n	16444 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   16430:	687b      	ldr	r3, [r7, #4]
   16432:	789b      	ldrb	r3, [r3, #2]
   16434:	b2db      	uxtb	r3, r3
   16436:	f083 0301 	eor.w	r3, r3, #1
   1643a:	b2db      	uxtb	r3, r3
   1643c:	2b00      	cmp	r3, #0
   1643e:	d001      	beq.n	16444 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   16440:	2301      	movs	r3, #1
   16442:	e000      	b.n	16446 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   16444:	2300      	movs	r3, #0
   16446:	2b00      	cmp	r3, #0
   16448:	d034      	beq.n	164b4 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   1644a:	2100      	movs	r1, #0
   1644c:	6878      	ldr	r0, [r7, #4]
   1644e:	4b27      	ldr	r3, [pc, #156]	; (164ec <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   16450:	4798      	blx	r3
		delay_ms(1);
   16452:	2001      	movs	r0, #1
   16454:	4b26      	ldr	r3, [pc, #152]	; (164f0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   16456:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   16458:	687b      	ldr	r3, [r7, #4]
   1645a:	781b      	ldrb	r3, [r3, #0]
   1645c:	b2db      	uxtb	r3, r3
   1645e:	f083 0301 	eor.w	r3, r3, #1
   16462:	b2db      	uxtb	r3, r3
   16464:	2b00      	cmp	r3, #0
   16466:	d009      	beq.n	1647c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   16468:	687b      	ldr	r3, [r7, #4]
   1646a:	789b      	ldrb	r3, [r3, #2]
   1646c:	b2db      	uxtb	r3, r3
   1646e:	f083 0301 	eor.w	r3, r3, #1
   16472:	b2db      	uxtb	r3, r3
   16474:	2b00      	cmp	r3, #0
   16476:	d001      	beq.n	1647c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   16478:	2301      	movs	r3, #1
   1647a:	e000      	b.n	1647e <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   1647c:	2300      	movs	r3, #0
   1647e:	2b00      	cmp	r3, #0
   16480:	d000      	beq.n	16484 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   16482:	e7e9      	b.n	16458 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   16484:	687b      	ldr	r3, [r7, #4]
   16486:	789b      	ldrb	r3, [r3, #2]
   16488:	b2db      	uxtb	r3, r3
   1648a:	f083 0301 	eor.w	r3, r3, #1
   1648e:	b2db      	uxtb	r3, r3
   16490:	2b00      	cmp	r3, #0
   16492:	d0c9      	beq.n	16428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   16494:	687b      	ldr	r3, [r7, #4]
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	b2db      	uxtb	r3, r3
   1649a:	2b00      	cmp	r3, #0
   1649c:	d006      	beq.n	164ac <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1649e:	687b      	ldr	r3, [r7, #4]
   164a0:	78db      	ldrb	r3, [r3, #3]
   164a2:	4619      	mov	r1, r3
   164a4:	6878      	ldr	r0, [r7, #4]
   164a6:	4b13      	ldr	r3, [pc, #76]	; (164f4 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   164a8:	4798      	blx	r3
   164aa:	e7bd      	b.n	16428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   164ac:	2001      	movs	r0, #1
   164ae:	4b10      	ldr	r3, [pc, #64]	; (164f0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   164b0:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   164b2:	e7b9      	b.n	16428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   164b4:	490a      	ldr	r1, [pc, #40]	; (164e0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   164b6:	480b      	ldr	r0, [pc, #44]	; (164e4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   164b8:	4b0f      	ldr	r3, [pc, #60]	; (164f8 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   164ba:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   164bc:	687b      	ldr	r3, [r7, #4]
   164be:	79db      	ldrb	r3, [r3, #7]
   164c0:	2b01      	cmp	r3, #1
   164c2:	bf0c      	ite	eq
   164c4:	2301      	moveq	r3, #1
   164c6:	2300      	movne	r3, #0
   164c8:	b2da      	uxtb	r2, r3
   164ca:	687b      	ldr	r3, [r7, #4]
   164cc:	771a      	strb	r2, [r3, #28]
	return	isOK;
   164ce:	687b      	ldr	r3, [r7, #4]
   164d0:	7f1b      	ldrb	r3, [r3, #28]
	}
   164d2:	4618      	mov	r0, r3
   164d4:	3708      	adds	r7, #8
   164d6:	46bd      	mov	sp, r7
   164d8:	bd80      	pop	{r7, pc}
   164da:	bf00      	nop
   164dc:	20009454 	.word	0x20009454
   164e0:	00015e21 	.word	0x00015e21
   164e4:	200026d0 	.word	0x200026d0
   164e8:	0001150d 	.word	0x0001150d
   164ec:	00015f5d 	.word	0x00015f5d
   164f0:	00003ed5 	.word	0x00003ed5
   164f4:	00016091 	.word	0x00016091
   164f8:	0001149d 	.word	0x0001149d

000164fc <hri_port_set_OUT_reg>:
{
   164fc:	b480      	push	{r7}
   164fe:	b085      	sub	sp, #20
   16500:	af00      	add	r7, sp, #0
   16502:	60f8      	str	r0, [r7, #12]
   16504:	460b      	mov	r3, r1
   16506:	607a      	str	r2, [r7, #4]
   16508:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1650a:	7afb      	ldrb	r3, [r7, #11]
   1650c:	68fa      	ldr	r2, [r7, #12]
   1650e:	01db      	lsls	r3, r3, #7
   16510:	4413      	add	r3, r2
   16512:	3318      	adds	r3, #24
   16514:	687a      	ldr	r2, [r7, #4]
   16516:	601a      	str	r2, [r3, #0]
}
   16518:	bf00      	nop
   1651a:	3714      	adds	r7, #20
   1651c:	46bd      	mov	sp, r7
   1651e:	bc80      	pop	{r7}
   16520:	4770      	bx	lr

00016522 <hri_port_clear_OUT_reg>:
{
   16522:	b480      	push	{r7}
   16524:	b085      	sub	sp, #20
   16526:	af00      	add	r7, sp, #0
   16528:	60f8      	str	r0, [r7, #12]
   1652a:	460b      	mov	r3, r1
   1652c:	607a      	str	r2, [r7, #4]
   1652e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   16530:	7afb      	ldrb	r3, [r7, #11]
   16532:	68fa      	ldr	r2, [r7, #12]
   16534:	01db      	lsls	r3, r3, #7
   16536:	4413      	add	r3, r2
   16538:	3314      	adds	r3, #20
   1653a:	687a      	ldr	r2, [r7, #4]
   1653c:	601a      	str	r2, [r3, #0]
}
   1653e:	bf00      	nop
   16540:	3714      	adds	r7, #20
   16542:	46bd      	mov	sp, r7
   16544:	bc80      	pop	{r7}
   16546:	4770      	bx	lr

00016548 <_gpio_set_level>:
{
   16548:	b580      	push	{r7, lr}
   1654a:	b082      	sub	sp, #8
   1654c:	af00      	add	r7, sp, #0
   1654e:	4603      	mov	r3, r0
   16550:	6039      	str	r1, [r7, #0]
   16552:	71fb      	strb	r3, [r7, #7]
   16554:	4613      	mov	r3, r2
   16556:	71bb      	strb	r3, [r7, #6]
	if (level) {
   16558:	79bb      	ldrb	r3, [r7, #6]
   1655a:	2b00      	cmp	r3, #0
   1655c:	d006      	beq.n	1656c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1655e:	79fb      	ldrb	r3, [r7, #7]
   16560:	683a      	ldr	r2, [r7, #0]
   16562:	4619      	mov	r1, r3
   16564:	4806      	ldr	r0, [pc, #24]	; (16580 <_gpio_set_level+0x38>)
   16566:	4b07      	ldr	r3, [pc, #28]	; (16584 <_gpio_set_level+0x3c>)
   16568:	4798      	blx	r3
}
   1656a:	e005      	b.n	16578 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1656c:	79fb      	ldrb	r3, [r7, #7]
   1656e:	683a      	ldr	r2, [r7, #0]
   16570:	4619      	mov	r1, r3
   16572:	4803      	ldr	r0, [pc, #12]	; (16580 <_gpio_set_level+0x38>)
   16574:	4b04      	ldr	r3, [pc, #16]	; (16588 <_gpio_set_level+0x40>)
   16576:	4798      	blx	r3
}
   16578:	bf00      	nop
   1657a:	3708      	adds	r7, #8
   1657c:	46bd      	mov	sp, r7
   1657e:	bd80      	pop	{r7, pc}
   16580:	41008000 	.word	0x41008000
   16584:	000164fd 	.word	0x000164fd
   16588:	00016523 	.word	0x00016523

0001658c <gpio_set_pin_level>:
{
   1658c:	b580      	push	{r7, lr}
   1658e:	b082      	sub	sp, #8
   16590:	af00      	add	r7, sp, #0
   16592:	4603      	mov	r3, r0
   16594:	460a      	mov	r2, r1
   16596:	71fb      	strb	r3, [r7, #7]
   16598:	4613      	mov	r3, r2
   1659a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1659c:	79fb      	ldrb	r3, [r7, #7]
   1659e:	115b      	asrs	r3, r3, #5
   165a0:	b2d8      	uxtb	r0, r3
   165a2:	79fb      	ldrb	r3, [r7, #7]
   165a4:	f003 031f 	and.w	r3, r3, #31
   165a8:	2201      	movs	r2, #1
   165aa:	fa02 f303 	lsl.w	r3, r2, r3
   165ae:	79ba      	ldrb	r2, [r7, #6]
   165b0:	4619      	mov	r1, r3
   165b2:	4b03      	ldr	r3, [pc, #12]	; (165c0 <gpio_set_pin_level+0x34>)
   165b4:	4798      	blx	r3
}
   165b6:	bf00      	nop
   165b8:	3708      	adds	r7, #8
   165ba:	46bd      	mov	sp, r7
   165bc:	bd80      	pop	{r7, pc}
   165be:	bf00      	nop
   165c0:	00016549 	.word	0x00016549

000165c4 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   165c4:	b480      	push	{r7}
   165c6:	b083      	sub	sp, #12
   165c8:	af00      	add	r7, sp, #0
   165ca:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   165cc:	4a05      	ldr	r2, [pc, #20]	; (165e4 <_ZN6LT_SPIC1Ev+0x20>)
   165ce:	687b      	ldr	r3, [r7, #4]
   165d0:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   165d2:	687b      	ldr	r3, [r7, #4]
   165d4:	4a04      	ldr	r2, [pc, #16]	; (165e8 <_ZN6LT_SPIC1Ev+0x24>)
   165d6:	605a      	str	r2, [r3, #4]
} //LT_SPI
   165d8:	687b      	ldr	r3, [r7, #4]
   165da:	4618      	mov	r0, r3
   165dc:	370c      	adds	r7, #12
   165de:	46bd      	mov	sp, r7
   165e0:	bc80      	pop	{r7}
   165e2:	4770      	bx	lr
   165e4:	20009458 	.word	0x20009458
   165e8:	2000945c 	.word	0x2000945c

000165ec <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   165ec:	b480      	push	{r7}
   165ee:	b083      	sub	sp, #12
   165f0:	af00      	add	r7, sp, #0
   165f2:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   165f4:	687b      	ldr	r3, [r7, #4]
   165f6:	4618      	mov	r0, r3
   165f8:	370c      	adds	r7, #12
   165fa:	46bd      	mov	sp, r7
   165fc:	bc80      	pop	{r7}
   165fe:	4770      	bx	lr

00016600 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   16600:	b580      	push	{r7, lr}
   16602:	b082      	sub	sp, #8
   16604:	af00      	add	r7, sp, #0
   16606:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   16608:	687b      	ldr	r3, [r7, #4]
   1660a:	685a      	ldr	r2, [r3, #4]
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	691b      	ldr	r3, [r3, #16]
   16610:	4619      	mov	r1, r3
   16612:	4610      	mov	r0, r2
   16614:	4b0e      	ldr	r3, [pc, #56]	; (16650 <_ZN6LT_SPI4initEv+0x50>)
   16616:	4798      	blx	r3
	spiTemp->init();
   16618:	687b      	ldr	r3, [r7, #4]
   1661a:	685b      	ldr	r3, [r3, #4]
   1661c:	4618      	mov	r0, r3
   1661e:	4b0d      	ldr	r3, [pc, #52]	; (16654 <_ZN6LT_SPI4initEv+0x54>)
   16620:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   16622:	687b      	ldr	r3, [r7, #4]
   16624:	685b      	ldr	r3, [r3, #4]
   16626:	685a      	ldr	r2, [r3, #4]
   16628:	687b      	ldr	r3, [r7, #4]
   1662a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   1662c:	687b      	ldr	r3, [r7, #4]
   1662e:	685b      	ldr	r3, [r3, #4]
   16630:	689a      	ldr	r2, [r3, #8]
   16632:	687b      	ldr	r3, [r7, #4]
   16634:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   16636:	687b      	ldr	r3, [r7, #4]
   16638:	685b      	ldr	r3, [r3, #4]
   1663a:	4618      	mov	r0, r3
   1663c:	4b06      	ldr	r3, [pc, #24]	; (16658 <_ZN6LT_SPI4initEv+0x58>)
   1663e:	4798      	blx	r3
	ready=true;
   16640:	687b      	ldr	r3, [r7, #4]
   16642:	2201      	movs	r2, #1
   16644:	701a      	strb	r2, [r3, #0]
}
   16646:	bf00      	nop
   16648:	3708      	adds	r7, #8
   1664a:	46bd      	mov	sp, r7
   1664c:	bd80      	pop	{r7, pc}
   1664e:	bf00      	nop
   16650:	00010e1d 	.word	0x00010e1d
   16654:	00010dd5 	.word	0x00010dd5
   16658:	00010e41 	.word	0x00010e41

0001665c <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   1665c:	b480      	push	{r7}
   1665e:	b083      	sub	sp, #12
   16660:	af00      	add	r7, sp, #0
   16662:	6078      	str	r0, [r7, #4]
   16664:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   16666:	687b      	ldr	r3, [r7, #4]
   16668:	683a      	ldr	r2, [r7, #0]
   1666a:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   1666c:	4a03      	ldr	r2, [pc, #12]	; (1667c <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   1666e:	687b      	ldr	r3, [r7, #4]
   16670:	6013      	str	r3, [r2, #0]
}
   16672:	bf00      	nop
   16674:	370c      	adds	r7, #12
   16676:	46bd      	mov	sp, r7
   16678:	bc80      	pop	{r7}
   1667a:	4770      	bx	lr
   1667c:	20009458 	.word	0x20009458

00016680 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   16680:	b580      	push	{r7, lr}
   16682:	b086      	sub	sp, #24
   16684:	af00      	add	r7, sp, #0
   16686:	60f8      	str	r0, [r7, #12]
   16688:	60b9      	str	r1, [r7, #8]
   1668a:	607a      	str	r2, [r7, #4]
   1668c:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   1668e:	687b      	ldr	r3, [r7, #4]
   16690:	781b      	ldrb	r3, [r3, #0]
   16692:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   16694:	68b9      	ldr	r1, [r7, #8]
   16696:	68f8      	ldr	r0, [r7, #12]
   16698:	4b25      	ldr	r3, [pc, #148]	; (16730 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   1669a:	4798      	blx	r3
	
	switch(rOrw){
   1669c:	7dfb      	ldrb	r3, [r7, #23]
   1669e:	2b02      	cmp	r3, #2
   166a0:	d002      	beq.n	166a8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   166a2:	2b03      	cmp	r3, #3
   166a4:	d009      	beq.n	166ba <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   166a6:	e028      	b.n	166fa <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   166a8:	68fb      	ldr	r3, [r7, #12]
   166aa:	685b      	ldr	r3, [r3, #4]
   166ac:	f897 2020 	ldrb.w	r2, [r7, #32]
   166b0:	6879      	ldr	r1, [r7, #4]
   166b2:	4618      	mov	r0, r3
   166b4:	4b1f      	ldr	r3, [pc, #124]	; (16734 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   166b6:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   166b8:	e031      	b.n	1671e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   166ba:	68fb      	ldr	r3, [r7, #12]
   166bc:	685b      	ldr	r3, [r3, #4]
   166be:	2203      	movs	r2, #3
   166c0:	6879      	ldr	r1, [r7, #4]
   166c2:	4618      	mov	r0, r3
   166c4:	4b1b      	ldr	r3, [pc, #108]	; (16734 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   166c6:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   166c8:	f897 3020 	ldrb.w	r3, [r7, #32]
   166cc:	2b04      	cmp	r3, #4
   166ce:	dd0b      	ble.n	166e8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   166d0:	68fb      	ldr	r3, [r7, #12]
   166d2:	6858      	ldr	r0, [r3, #4]
   166d4:	f897 3020 	ldrb.w	r3, [r7, #32]
   166d8:	3b03      	subs	r3, #3
   166da:	461a      	mov	r2, r3
   166dc:	6839      	ldr	r1, [r7, #0]
   166de:	4b16      	ldr	r3, [pc, #88]	; (16738 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   166e0:	4798      	blx	r3
					asm("nop");
   166e2:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   166e4:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   166e6:	e01a      	b.n	1671e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   166e8:	68fb      	ldr	r3, [r7, #12]
   166ea:	685b      	ldr	r3, [r3, #4]
   166ec:	2201      	movs	r2, #1
   166ee:	6839      	ldr	r1, [r7, #0]
   166f0:	4618      	mov	r0, r3
   166f2:	4b11      	ldr	r3, [pc, #68]	; (16738 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   166f4:	4798      	blx	r3
				asm("nop");
   166f6:	bf00      	nop
			break;
   166f8:	e011      	b.n	1671e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	685b      	ldr	r3, [r3, #4]
   166fe:	f897 2020 	ldrb.w	r2, [r7, #32]
   16702:	6879      	ldr	r1, [r7, #4]
   16704:	4618      	mov	r0, r3
   16706:	4b0b      	ldr	r3, [pc, #44]	; (16734 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   16708:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   1670a:	68fb      	ldr	r3, [r7, #12]
   1670c:	6858      	ldr	r0, [r3, #4]
   1670e:	f897 3020 	ldrb.w	r3, [r7, #32]
   16712:	3b03      	subs	r3, #3
   16714:	461a      	mov	r2, r3
   16716:	6839      	ldr	r1, [r7, #0]
   16718:	4b07      	ldr	r3, [pc, #28]	; (16738 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1671a:	4798      	blx	r3
			break;
   1671c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   1671e:	68b9      	ldr	r1, [r7, #8]
   16720:	68f8      	ldr	r0, [r7, #12]
   16722:	4b06      	ldr	r3, [pc, #24]	; (1673c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   16724:	4798      	blx	r3
	asm("nop");
   16726:	bf00      	nop
	
}
   16728:	bf00      	nop
   1672a:	3718      	adds	r7, #24
   1672c:	46bd      	mov	sp, r7
   1672e:	bd80      	pop	{r7, pc}
   16730:	00016741 	.word	0x00016741
   16734:	00010e7d 	.word	0x00010e7d
   16738:	00010ec1 	.word	0x00010ec1
   1673c:	00016789 	.word	0x00016789

00016740 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   16740:	b580      	push	{r7, lr}
   16742:	b082      	sub	sp, #8
   16744:	af00      	add	r7, sp, #0
   16746:	6078      	str	r0, [r7, #4]
   16748:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1674a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   1674e:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   16750:	683b      	ldr	r3, [r7, #0]
   16752:	b2db      	uxtb	r3, r3
   16754:	2100      	movs	r1, #0
   16756:	4618      	mov	r0, r3
   16758:	4b08      	ldr	r3, [pc, #32]	; (1677c <_ZN6LT_SPI4OpenEm+0x3c>)
   1675a:	4798      	blx	r3
	 delay_us(10);
   1675c:	200a      	movs	r0, #10
   1675e:	4b08      	ldr	r3, [pc, #32]	; (16780 <_ZN6LT_SPI4OpenEm+0x40>)
   16760:	4798      	blx	r3
	spiTemp->Enable();
   16762:	687b      	ldr	r3, [r7, #4]
   16764:	685b      	ldr	r3, [r3, #4]
   16766:	4618      	mov	r0, r3
   16768:	4b06      	ldr	r3, [pc, #24]	; (16784 <_ZN6LT_SPI4OpenEm+0x44>)
   1676a:	4798      	blx	r3
	 delay_us(10);
   1676c:	200a      	movs	r0, #10
   1676e:	4b04      	ldr	r3, [pc, #16]	; (16780 <_ZN6LT_SPI4OpenEm+0x40>)
   16770:	4798      	blx	r3
 }
   16772:	bf00      	nop
   16774:	3708      	adds	r7, #8
   16776:	46bd      	mov	sp, r7
   16778:	bd80      	pop	{r7, pc}
   1677a:	bf00      	nop
   1677c:	0001658d 	.word	0x0001658d
   16780:	00003ea1 	.word	0x00003ea1
   16784:	00010e41 	.word	0x00010e41

00016788 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   16788:	b580      	push	{r7, lr}
   1678a:	b082      	sub	sp, #8
   1678c:	af00      	add	r7, sp, #0
   1678e:	6078      	str	r0, [r7, #4]
   16790:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   16792:	200a      	movs	r0, #10
   16794:	4b0b      	ldr	r3, [pc, #44]	; (167c4 <_ZN6LT_SPI5CloseEm+0x3c>)
   16796:	4798      	blx	r3
	 spiTemp->Disable();
   16798:	687b      	ldr	r3, [r7, #4]
   1679a:	685b      	ldr	r3, [r3, #4]
   1679c:	4618      	mov	r0, r3
   1679e:	4b0a      	ldr	r3, [pc, #40]	; (167c8 <_ZN6LT_SPI5CloseEm+0x40>)
   167a0:	4798      	blx	r3
	delay_us(10);
   167a2:	200a      	movs	r0, #10
   167a4:	4b07      	ldr	r3, [pc, #28]	; (167c4 <_ZN6LT_SPI5CloseEm+0x3c>)
   167a6:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   167a8:	683b      	ldr	r3, [r7, #0]
   167aa:	b2db      	uxtb	r3, r3
   167ac:	2101      	movs	r1, #1
   167ae:	4618      	mov	r0, r3
   167b0:	4b06      	ldr	r3, [pc, #24]	; (167cc <_ZN6LT_SPI5CloseEm+0x44>)
   167b2:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   167b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   167b8:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   167ba:	bf00      	nop
   167bc:	3708      	adds	r7, #8
   167be:	46bd      	mov	sp, r7
   167c0:	bd80      	pop	{r7, pc}
   167c2:	bf00      	nop
   167c4:	00003ea1 	.word	0x00003ea1
   167c8:	00010f05 	.word	0x00010f05
   167cc:	0001658d 	.word	0x0001658d

000167d0 <_Z41__static_initialization_and_destruction_0ii>:
   167d0:	b580      	push	{r7, lr}
   167d2:	b082      	sub	sp, #8
   167d4:	af00      	add	r7, sp, #0
   167d6:	6078      	str	r0, [r7, #4]
   167d8:	6039      	str	r1, [r7, #0]
   167da:	687b      	ldr	r3, [r7, #4]
   167dc:	2b01      	cmp	r3, #1
   167de:	d10c      	bne.n	167fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
   167e0:	683b      	ldr	r3, [r7, #0]
   167e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   167e6:	4293      	cmp	r3, r2
   167e8:	d107      	bne.n	167fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   167ea:	4806      	ldr	r0, [pc, #24]	; (16804 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   167ec:	4b06      	ldr	r3, [pc, #24]	; (16808 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   167ee:	4798      	blx	r3
   167f0:	4a06      	ldr	r2, [pc, #24]	; (1680c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   167f2:	4907      	ldr	r1, [pc, #28]	; (16810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   167f4:	4803      	ldr	r0, [pc, #12]	; (16804 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   167f6:	4b07      	ldr	r3, [pc, #28]	; (16814 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   167f8:	4798      	blx	r3
   167fa:	bf00      	nop
   167fc:	3708      	adds	r7, #8
   167fe:	46bd      	mov	sp, r7
   16800:	bd80      	pop	{r7, pc}
   16802:	bf00      	nop
   16804:	2000945c 	.word	0x2000945c
   16808:	00010d79 	.word	0x00010d79
   1680c:	20000000 	.word	0x20000000
   16810:	00010dc1 	.word	0x00010dc1
   16814:	000170d1 	.word	0x000170d1

00016818 <_GLOBAL__sub_I_ptrLTSPIClass>:
   16818:	b580      	push	{r7, lr}
   1681a:	af00      	add	r7, sp, #0
   1681c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16820:	2001      	movs	r0, #1
   16822:	4b01      	ldr	r3, [pc, #4]	; (16828 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   16824:	4798      	blx	r3
   16826:	bd80      	pop	{r7, pc}
   16828:	000167d1 	.word	0x000167d1

0001682c <hri_port_set_DIR_reg>:
{
   1682c:	b480      	push	{r7}
   1682e:	b085      	sub	sp, #20
   16830:	af00      	add	r7, sp, #0
   16832:	60f8      	str	r0, [r7, #12]
   16834:	460b      	mov	r3, r1
   16836:	607a      	str	r2, [r7, #4]
   16838:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1683a:	7afb      	ldrb	r3, [r7, #11]
   1683c:	68fa      	ldr	r2, [r7, #12]
   1683e:	01db      	lsls	r3, r3, #7
   16840:	4413      	add	r3, r2
   16842:	3308      	adds	r3, #8
   16844:	687a      	ldr	r2, [r7, #4]
   16846:	601a      	str	r2, [r3, #0]
}
   16848:	bf00      	nop
   1684a:	3714      	adds	r7, #20
   1684c:	46bd      	mov	sp, r7
   1684e:	bc80      	pop	{r7}
   16850:	4770      	bx	lr

00016852 <hri_port_clear_DIR_reg>:
{
   16852:	b480      	push	{r7}
   16854:	b085      	sub	sp, #20
   16856:	af00      	add	r7, sp, #0
   16858:	60f8      	str	r0, [r7, #12]
   1685a:	460b      	mov	r3, r1
   1685c:	607a      	str	r2, [r7, #4]
   1685e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   16860:	7afb      	ldrb	r3, [r7, #11]
   16862:	68fa      	ldr	r2, [r7, #12]
   16864:	01db      	lsls	r3, r3, #7
   16866:	4413      	add	r3, r2
   16868:	3304      	adds	r3, #4
   1686a:	687a      	ldr	r2, [r7, #4]
   1686c:	601a      	str	r2, [r3, #0]
}
   1686e:	bf00      	nop
   16870:	3714      	adds	r7, #20
   16872:	46bd      	mov	sp, r7
   16874:	bc80      	pop	{r7}
   16876:	4770      	bx	lr

00016878 <hri_port_set_OUT_reg>:
{
   16878:	b480      	push	{r7}
   1687a:	b085      	sub	sp, #20
   1687c:	af00      	add	r7, sp, #0
   1687e:	60f8      	str	r0, [r7, #12]
   16880:	460b      	mov	r3, r1
   16882:	607a      	str	r2, [r7, #4]
   16884:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   16886:	7afb      	ldrb	r3, [r7, #11]
   16888:	68fa      	ldr	r2, [r7, #12]
   1688a:	01db      	lsls	r3, r3, #7
   1688c:	4413      	add	r3, r2
   1688e:	3318      	adds	r3, #24
   16890:	687a      	ldr	r2, [r7, #4]
   16892:	601a      	str	r2, [r3, #0]
}
   16894:	bf00      	nop
   16896:	3714      	adds	r7, #20
   16898:	46bd      	mov	sp, r7
   1689a:	bc80      	pop	{r7}
   1689c:	4770      	bx	lr

0001689e <hri_port_clear_OUT_reg>:
{
   1689e:	b480      	push	{r7}
   168a0:	b085      	sub	sp, #20
   168a2:	af00      	add	r7, sp, #0
   168a4:	60f8      	str	r0, [r7, #12]
   168a6:	460b      	mov	r3, r1
   168a8:	607a      	str	r2, [r7, #4]
   168aa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   168ac:	7afb      	ldrb	r3, [r7, #11]
   168ae:	68fa      	ldr	r2, [r7, #12]
   168b0:	01db      	lsls	r3, r3, #7
   168b2:	4413      	add	r3, r2
   168b4:	3314      	adds	r3, #20
   168b6:	687a      	ldr	r2, [r7, #4]
   168b8:	601a      	str	r2, [r3, #0]
}
   168ba:	bf00      	nop
   168bc:	3714      	adds	r7, #20
   168be:	46bd      	mov	sp, r7
   168c0:	bc80      	pop	{r7}
   168c2:	4770      	bx	lr

000168c4 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   168c4:	b480      	push	{r7}
   168c6:	b085      	sub	sp, #20
   168c8:	af00      	add	r7, sp, #0
   168ca:	6078      	str	r0, [r7, #4]
   168cc:	4608      	mov	r0, r1
   168ce:	4611      	mov	r1, r2
   168d0:	461a      	mov	r2, r3
   168d2:	4603      	mov	r3, r0
   168d4:	70fb      	strb	r3, [r7, #3]
   168d6:	460b      	mov	r3, r1
   168d8:	70bb      	strb	r3, [r7, #2]
   168da:	4613      	mov	r3, r2
   168dc:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   168de:	78fa      	ldrb	r2, [r7, #3]
   168e0:	78bb      	ldrb	r3, [r7, #2]
   168e2:	6879      	ldr	r1, [r7, #4]
   168e4:	01d2      	lsls	r2, r2, #7
   168e6:	440a      	add	r2, r1
   168e8:	4413      	add	r3, r2
   168ea:	3330      	adds	r3, #48	; 0x30
   168ec:	781b      	ldrb	r3, [r3, #0]
   168ee:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   168f0:	7bfb      	ldrb	r3, [r7, #15]
   168f2:	f023 030f 	bic.w	r3, r3, #15
   168f6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   168f8:	787b      	ldrb	r3, [r7, #1]
   168fa:	f003 030f 	and.w	r3, r3, #15
   168fe:	b2da      	uxtb	r2, r3
   16900:	7bfb      	ldrb	r3, [r7, #15]
   16902:	4313      	orrs	r3, r2
   16904:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   16906:	78fa      	ldrb	r2, [r7, #3]
   16908:	78bb      	ldrb	r3, [r7, #2]
   1690a:	6879      	ldr	r1, [r7, #4]
   1690c:	01d2      	lsls	r2, r2, #7
   1690e:	440a      	add	r2, r1
   16910:	4413      	add	r3, r2
   16912:	3330      	adds	r3, #48	; 0x30
   16914:	7bfa      	ldrb	r2, [r7, #15]
   16916:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16918:	bf00      	nop
   1691a:	3714      	adds	r7, #20
   1691c:	46bd      	mov	sp, r7
   1691e:	bc80      	pop	{r7}
   16920:	4770      	bx	lr

00016922 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   16922:	b480      	push	{r7}
   16924:	b085      	sub	sp, #20
   16926:	af00      	add	r7, sp, #0
   16928:	6078      	str	r0, [r7, #4]
   1692a:	4608      	mov	r0, r1
   1692c:	4611      	mov	r1, r2
   1692e:	461a      	mov	r2, r3
   16930:	4603      	mov	r3, r0
   16932:	70fb      	strb	r3, [r7, #3]
   16934:	460b      	mov	r3, r1
   16936:	70bb      	strb	r3, [r7, #2]
   16938:	4613      	mov	r3, r2
   1693a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1693c:	78fa      	ldrb	r2, [r7, #3]
   1693e:	78bb      	ldrb	r3, [r7, #2]
   16940:	6879      	ldr	r1, [r7, #4]
   16942:	01d2      	lsls	r2, r2, #7
   16944:	440a      	add	r2, r1
   16946:	4413      	add	r3, r2
   16948:	3330      	adds	r3, #48	; 0x30
   1694a:	781b      	ldrb	r3, [r3, #0]
   1694c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1694e:	7bfb      	ldrb	r3, [r7, #15]
   16950:	f003 030f 	and.w	r3, r3, #15
   16954:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   16956:	787b      	ldrb	r3, [r7, #1]
   16958:	011b      	lsls	r3, r3, #4
   1695a:	b2da      	uxtb	r2, r3
   1695c:	7bfb      	ldrb	r3, [r7, #15]
   1695e:	4313      	orrs	r3, r2
   16960:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   16962:	78fa      	ldrb	r2, [r7, #3]
   16964:	78bb      	ldrb	r3, [r7, #2]
   16966:	6879      	ldr	r1, [r7, #4]
   16968:	01d2      	lsls	r2, r2, #7
   1696a:	440a      	add	r2, r1
   1696c:	4413      	add	r3, r2
   1696e:	3330      	adds	r3, #48	; 0x30
   16970:	7bfa      	ldrb	r2, [r7, #15]
   16972:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16974:	bf00      	nop
   16976:	3714      	adds	r7, #20
   16978:	46bd      	mov	sp, r7
   1697a:	bc80      	pop	{r7}
   1697c:	4770      	bx	lr

0001697e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1697e:	b480      	push	{r7}
   16980:	b085      	sub	sp, #20
   16982:	af00      	add	r7, sp, #0
   16984:	6078      	str	r0, [r7, #4]
   16986:	4608      	mov	r0, r1
   16988:	4611      	mov	r1, r2
   1698a:	461a      	mov	r2, r3
   1698c:	4603      	mov	r3, r0
   1698e:	70fb      	strb	r3, [r7, #3]
   16990:	460b      	mov	r3, r1
   16992:	70bb      	strb	r3, [r7, #2]
   16994:	4613      	mov	r3, r2
   16996:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   16998:	78fa      	ldrb	r2, [r7, #3]
   1699a:	78bb      	ldrb	r3, [r7, #2]
   1699c:	6879      	ldr	r1, [r7, #4]
   1699e:	01d2      	lsls	r2, r2, #7
   169a0:	440a      	add	r2, r1
   169a2:	4413      	add	r3, r2
   169a4:	3340      	adds	r3, #64	; 0x40
   169a6:	781b      	ldrb	r3, [r3, #0]
   169a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   169aa:	7bfb      	ldrb	r3, [r7, #15]
   169ac:	f023 0301 	bic.w	r3, r3, #1
   169b0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   169b2:	787a      	ldrb	r2, [r7, #1]
   169b4:	7bfb      	ldrb	r3, [r7, #15]
   169b6:	4313      	orrs	r3, r2
   169b8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   169ba:	78fa      	ldrb	r2, [r7, #3]
   169bc:	78bb      	ldrb	r3, [r7, #2]
   169be:	6879      	ldr	r1, [r7, #4]
   169c0:	01d2      	lsls	r2, r2, #7
   169c2:	440a      	add	r2, r1
   169c4:	4413      	add	r3, r2
   169c6:	3340      	adds	r3, #64	; 0x40
   169c8:	7bfa      	ldrb	r2, [r7, #15]
   169ca:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   169cc:	bf00      	nop
   169ce:	3714      	adds	r7, #20
   169d0:	46bd      	mov	sp, r7
   169d2:	bc80      	pop	{r7}
   169d4:	4770      	bx	lr

000169d6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   169d6:	b480      	push	{r7}
   169d8:	b085      	sub	sp, #20
   169da:	af00      	add	r7, sp, #0
   169dc:	60f8      	str	r0, [r7, #12]
   169de:	460b      	mov	r3, r1
   169e0:	607a      	str	r2, [r7, #4]
   169e2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   169e4:	7afb      	ldrb	r3, [r7, #11]
   169e6:	68fa      	ldr	r2, [r7, #12]
   169e8:	01db      	lsls	r3, r3, #7
   169ea:	4413      	add	r3, r2
   169ec:	3328      	adds	r3, #40	; 0x28
   169ee:	687a      	ldr	r2, [r7, #4]
   169f0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   169f2:	bf00      	nop
   169f4:	3714      	adds	r7, #20
   169f6:	46bd      	mov	sp, r7
   169f8:	bc80      	pop	{r7}
   169fa:	4770      	bx	lr

000169fc <_gpio_set_direction>:
{
   169fc:	b580      	push	{r7, lr}
   169fe:	b082      	sub	sp, #8
   16a00:	af00      	add	r7, sp, #0
   16a02:	4603      	mov	r3, r0
   16a04:	6039      	str	r1, [r7, #0]
   16a06:	71fb      	strb	r3, [r7, #7]
   16a08:	4613      	mov	r3, r2
   16a0a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   16a0c:	79bb      	ldrb	r3, [r7, #6]
   16a0e:	2b01      	cmp	r3, #1
   16a10:	d01c      	beq.n	16a4c <_gpio_set_direction+0x50>
   16a12:	2b02      	cmp	r3, #2
   16a14:	d037      	beq.n	16a86 <_gpio_set_direction+0x8a>
   16a16:	2b00      	cmp	r3, #0
   16a18:	d14e      	bne.n	16ab8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   16a1a:	79fb      	ldrb	r3, [r7, #7]
   16a1c:	683a      	ldr	r2, [r7, #0]
   16a1e:	4619      	mov	r1, r3
   16a20:	482a      	ldr	r0, [pc, #168]	; (16acc <_gpio_set_direction+0xd0>)
   16a22:	4b2b      	ldr	r3, [pc, #172]	; (16ad0 <_gpio_set_direction+0xd4>)
   16a24:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16a26:	683b      	ldr	r3, [r7, #0]
   16a28:	b29b      	uxth	r3, r3
   16a2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   16a2e:	79fb      	ldrb	r3, [r7, #7]
   16a30:	4619      	mov	r1, r3
   16a32:	4826      	ldr	r0, [pc, #152]	; (16acc <_gpio_set_direction+0xd0>)
   16a34:	4b27      	ldr	r3, [pc, #156]	; (16ad4 <_gpio_set_direction+0xd8>)
   16a36:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16a38:	683b      	ldr	r3, [r7, #0]
   16a3a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16a3c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16a40:	79fb      	ldrb	r3, [r7, #7]
   16a42:	4619      	mov	r1, r3
   16a44:	4821      	ldr	r0, [pc, #132]	; (16acc <_gpio_set_direction+0xd0>)
   16a46:	4b23      	ldr	r3, [pc, #140]	; (16ad4 <_gpio_set_direction+0xd8>)
   16a48:	4798      	blx	r3
		break;
   16a4a:	e03a      	b.n	16ac2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   16a4c:	79fb      	ldrb	r3, [r7, #7]
   16a4e:	683a      	ldr	r2, [r7, #0]
   16a50:	4619      	mov	r1, r3
   16a52:	481e      	ldr	r0, [pc, #120]	; (16acc <_gpio_set_direction+0xd0>)
   16a54:	4b1e      	ldr	r3, [pc, #120]	; (16ad0 <_gpio_set_direction+0xd4>)
   16a56:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   16a58:	683b      	ldr	r3, [r7, #0]
   16a5a:	b29b      	uxth	r3, r3
   16a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16a64:	79f9      	ldrb	r1, [r7, #7]
   16a66:	461a      	mov	r2, r3
   16a68:	4818      	ldr	r0, [pc, #96]	; (16acc <_gpio_set_direction+0xd0>)
   16a6a:	4b1a      	ldr	r3, [pc, #104]	; (16ad4 <_gpio_set_direction+0xd8>)
   16a6c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   16a6e:	683b      	ldr	r3, [r7, #0]
   16a70:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   16a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   16a7a:	79f9      	ldrb	r1, [r7, #7]
   16a7c:	461a      	mov	r2, r3
   16a7e:	4813      	ldr	r0, [pc, #76]	; (16acc <_gpio_set_direction+0xd0>)
   16a80:	4b14      	ldr	r3, [pc, #80]	; (16ad4 <_gpio_set_direction+0xd8>)
   16a82:	4798      	blx	r3
		break;
   16a84:	e01d      	b.n	16ac2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   16a86:	79fb      	ldrb	r3, [r7, #7]
   16a88:	683a      	ldr	r2, [r7, #0]
   16a8a:	4619      	mov	r1, r3
   16a8c:	480f      	ldr	r0, [pc, #60]	; (16acc <_gpio_set_direction+0xd0>)
   16a8e:	4b12      	ldr	r3, [pc, #72]	; (16ad8 <_gpio_set_direction+0xdc>)
   16a90:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16a92:	683b      	ldr	r3, [r7, #0]
   16a94:	b29b      	uxth	r3, r3
   16a96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   16a9a:	79fb      	ldrb	r3, [r7, #7]
   16a9c:	4619      	mov	r1, r3
   16a9e:	480b      	ldr	r0, [pc, #44]	; (16acc <_gpio_set_direction+0xd0>)
   16aa0:	4b0c      	ldr	r3, [pc, #48]	; (16ad4 <_gpio_set_direction+0xd8>)
   16aa2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16aa4:	683b      	ldr	r3, [r7, #0]
   16aa6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16aa8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16aac:	79fb      	ldrb	r3, [r7, #7]
   16aae:	4619      	mov	r1, r3
   16ab0:	4806      	ldr	r0, [pc, #24]	; (16acc <_gpio_set_direction+0xd0>)
   16ab2:	4b08      	ldr	r3, [pc, #32]	; (16ad4 <_gpio_set_direction+0xd8>)
   16ab4:	4798      	blx	r3
		break;
   16ab6:	e004      	b.n	16ac2 <_gpio_set_direction+0xc6>
		ASSERT(false);
   16ab8:	2246      	movs	r2, #70	; 0x46
   16aba:	4908      	ldr	r1, [pc, #32]	; (16adc <_gpio_set_direction+0xe0>)
   16abc:	2000      	movs	r0, #0
   16abe:	4b08      	ldr	r3, [pc, #32]	; (16ae0 <_gpio_set_direction+0xe4>)
   16ac0:	4798      	blx	r3
}
   16ac2:	bf00      	nop
   16ac4:	3708      	adds	r7, #8
   16ac6:	46bd      	mov	sp, r7
   16ac8:	bd80      	pop	{r7, pc}
   16aca:	bf00      	nop
   16acc:	41008000 	.word	0x41008000
   16ad0:	00016853 	.word	0x00016853
   16ad4:	000169d7 	.word	0x000169d7
   16ad8:	0001682d 	.word	0x0001682d
   16adc:	0001a94c 	.word	0x0001a94c
   16ae0:	00005565 	.word	0x00005565

00016ae4 <_gpio_set_level>:
{
   16ae4:	b580      	push	{r7, lr}
   16ae6:	b082      	sub	sp, #8
   16ae8:	af00      	add	r7, sp, #0
   16aea:	4603      	mov	r3, r0
   16aec:	6039      	str	r1, [r7, #0]
   16aee:	71fb      	strb	r3, [r7, #7]
   16af0:	4613      	mov	r3, r2
   16af2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   16af4:	79bb      	ldrb	r3, [r7, #6]
   16af6:	2b00      	cmp	r3, #0
   16af8:	d006      	beq.n	16b08 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   16afa:	79fb      	ldrb	r3, [r7, #7]
   16afc:	683a      	ldr	r2, [r7, #0]
   16afe:	4619      	mov	r1, r3
   16b00:	4806      	ldr	r0, [pc, #24]	; (16b1c <_gpio_set_level+0x38>)
   16b02:	4b07      	ldr	r3, [pc, #28]	; (16b20 <_gpio_set_level+0x3c>)
   16b04:	4798      	blx	r3
}
   16b06:	e005      	b.n	16b14 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   16b08:	79fb      	ldrb	r3, [r7, #7]
   16b0a:	683a      	ldr	r2, [r7, #0]
   16b0c:	4619      	mov	r1, r3
   16b0e:	4803      	ldr	r0, [pc, #12]	; (16b1c <_gpio_set_level+0x38>)
   16b10:	4b04      	ldr	r3, [pc, #16]	; (16b24 <_gpio_set_level+0x40>)
   16b12:	4798      	blx	r3
}
   16b14:	bf00      	nop
   16b16:	3708      	adds	r7, #8
   16b18:	46bd      	mov	sp, r7
   16b1a:	bd80      	pop	{r7, pc}
   16b1c:	41008000 	.word	0x41008000
   16b20:	00016879 	.word	0x00016879
   16b24:	0001689f 	.word	0x0001689f

00016b28 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   16b28:	b590      	push	{r4, r7, lr}
   16b2a:	b085      	sub	sp, #20
   16b2c:	af00      	add	r7, sp, #0
   16b2e:	6078      	str	r0, [r7, #4]
   16b30:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   16b32:	687b      	ldr	r3, [r7, #4]
   16b34:	095b      	lsrs	r3, r3, #5
   16b36:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   16b38:	687b      	ldr	r3, [r7, #4]
   16b3a:	b2db      	uxtb	r3, r3
   16b3c:	f003 031f 	and.w	r3, r3, #31
   16b40:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   16b42:	683b      	ldr	r3, [r7, #0]
   16b44:	f1b3 3fff 	cmp.w	r3, #4294967295
   16b48:	d106      	bne.n	16b58 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   16b4a:	7bba      	ldrb	r2, [r7, #14]
   16b4c:	7bf9      	ldrb	r1, [r7, #15]
   16b4e:	2300      	movs	r3, #0
   16b50:	4812      	ldr	r0, [pc, #72]	; (16b9c <_gpio_set_pin_function+0x74>)
   16b52:	4c13      	ldr	r4, [pc, #76]	; (16ba0 <_gpio_set_pin_function+0x78>)
   16b54:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   16b56:	e01d      	b.n	16b94 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   16b58:	7bba      	ldrb	r2, [r7, #14]
   16b5a:	7bf9      	ldrb	r1, [r7, #15]
   16b5c:	2301      	movs	r3, #1
   16b5e:	480f      	ldr	r0, [pc, #60]	; (16b9c <_gpio_set_pin_function+0x74>)
   16b60:	4c0f      	ldr	r4, [pc, #60]	; (16ba0 <_gpio_set_pin_function+0x78>)
   16b62:	47a0      	blx	r4
		if (pin & 1) {
   16b64:	7bbb      	ldrb	r3, [r7, #14]
   16b66:	f003 0301 	and.w	r3, r3, #1
   16b6a:	2b00      	cmp	r3, #0
   16b6c:	d009      	beq.n	16b82 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   16b6e:	7bbb      	ldrb	r3, [r7, #14]
   16b70:	105b      	asrs	r3, r3, #1
   16b72:	b2da      	uxtb	r2, r3
   16b74:	683b      	ldr	r3, [r7, #0]
   16b76:	b2db      	uxtb	r3, r3
   16b78:	7bf9      	ldrb	r1, [r7, #15]
   16b7a:	4808      	ldr	r0, [pc, #32]	; (16b9c <_gpio_set_pin_function+0x74>)
   16b7c:	4c09      	ldr	r4, [pc, #36]	; (16ba4 <_gpio_set_pin_function+0x7c>)
   16b7e:	47a0      	blx	r4
}
   16b80:	e008      	b.n	16b94 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   16b82:	7bbb      	ldrb	r3, [r7, #14]
   16b84:	105b      	asrs	r3, r3, #1
   16b86:	b2da      	uxtb	r2, r3
   16b88:	683b      	ldr	r3, [r7, #0]
   16b8a:	b2db      	uxtb	r3, r3
   16b8c:	7bf9      	ldrb	r1, [r7, #15]
   16b8e:	4803      	ldr	r0, [pc, #12]	; (16b9c <_gpio_set_pin_function+0x74>)
   16b90:	4c05      	ldr	r4, [pc, #20]	; (16ba8 <_gpio_set_pin_function+0x80>)
   16b92:	47a0      	blx	r4
}
   16b94:	bf00      	nop
   16b96:	3714      	adds	r7, #20
   16b98:	46bd      	mov	sp, r7
   16b9a:	bd90      	pop	{r4, r7, pc}
   16b9c:	41008000 	.word	0x41008000
   16ba0:	0001697f 	.word	0x0001697f
   16ba4:	00016923 	.word	0x00016923
   16ba8:	000168c5 	.word	0x000168c5

00016bac <gpio_set_pin_function>:
{
   16bac:	b580      	push	{r7, lr}
   16bae:	b082      	sub	sp, #8
   16bb0:	af00      	add	r7, sp, #0
   16bb2:	6078      	str	r0, [r7, #4]
   16bb4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   16bb6:	6839      	ldr	r1, [r7, #0]
   16bb8:	6878      	ldr	r0, [r7, #4]
   16bba:	4b03      	ldr	r3, [pc, #12]	; (16bc8 <gpio_set_pin_function+0x1c>)
   16bbc:	4798      	blx	r3
}
   16bbe:	bf00      	nop
   16bc0:	3708      	adds	r7, #8
   16bc2:	46bd      	mov	sp, r7
   16bc4:	bd80      	pop	{r7, pc}
   16bc6:	bf00      	nop
   16bc8:	00016b29 	.word	0x00016b29

00016bcc <gpio_set_pin_direction>:
{
   16bcc:	b580      	push	{r7, lr}
   16bce:	b082      	sub	sp, #8
   16bd0:	af00      	add	r7, sp, #0
   16bd2:	4603      	mov	r3, r0
   16bd4:	460a      	mov	r2, r1
   16bd6:	71fb      	strb	r3, [r7, #7]
   16bd8:	4613      	mov	r3, r2
   16bda:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   16bdc:	79fb      	ldrb	r3, [r7, #7]
   16bde:	115b      	asrs	r3, r3, #5
   16be0:	b2d8      	uxtb	r0, r3
   16be2:	79fb      	ldrb	r3, [r7, #7]
   16be4:	f003 031f 	and.w	r3, r3, #31
   16be8:	2201      	movs	r2, #1
   16bea:	fa02 f303 	lsl.w	r3, r2, r3
   16bee:	79ba      	ldrb	r2, [r7, #6]
   16bf0:	4619      	mov	r1, r3
   16bf2:	4b03      	ldr	r3, [pc, #12]	; (16c00 <gpio_set_pin_direction+0x34>)
   16bf4:	4798      	blx	r3
}
   16bf6:	bf00      	nop
   16bf8:	3708      	adds	r7, #8
   16bfa:	46bd      	mov	sp, r7
   16bfc:	bd80      	pop	{r7, pc}
   16bfe:	bf00      	nop
   16c00:	000169fd 	.word	0x000169fd

00016c04 <gpio_set_pin_level>:
{
   16c04:	b580      	push	{r7, lr}
   16c06:	b082      	sub	sp, #8
   16c08:	af00      	add	r7, sp, #0
   16c0a:	4603      	mov	r3, r0
   16c0c:	460a      	mov	r2, r1
   16c0e:	71fb      	strb	r3, [r7, #7]
   16c10:	4613      	mov	r3, r2
   16c12:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   16c14:	79fb      	ldrb	r3, [r7, #7]
   16c16:	115b      	asrs	r3, r3, #5
   16c18:	b2d8      	uxtb	r0, r3
   16c1a:	79fb      	ldrb	r3, [r7, #7]
   16c1c:	f003 031f 	and.w	r3, r3, #31
   16c20:	2201      	movs	r2, #1
   16c22:	fa02 f303 	lsl.w	r3, r2, r3
   16c26:	79ba      	ldrb	r2, [r7, #6]
   16c28:	4619      	mov	r1, r3
   16c2a:	4b03      	ldr	r3, [pc, #12]	; (16c38 <gpio_set_pin_level+0x34>)
   16c2c:	4798      	blx	r3
}
   16c2e:	bf00      	nop
   16c30:	3708      	adds	r7, #8
   16c32:	46bd      	mov	sp, r7
   16c34:	bd80      	pop	{r7, pc}
   16c36:	bf00      	nop
   16c38:	00016ae5 	.word	0x00016ae5

00016c3c <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   16c3c:	b580      	push	{r7, lr}
   16c3e:	b082      	sub	sp, #8
   16c40:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   16c42:	2100      	movs	r1, #0
   16c44:	2008      	movs	r0, #8
   16c46:	4b24      	ldr	r3, [pc, #144]	; (16cd8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16c48:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   16c4a:	2100      	movs	r1, #0
   16c4c:	202b      	movs	r0, #43	; 0x2b
   16c4e:	4b22      	ldr	r3, [pc, #136]	; (16cd8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16c50:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   16c52:	2100      	movs	r1, #0
   16c54:	202a      	movs	r0, #42	; 0x2a
   16c56:	4b20      	ldr	r3, [pc, #128]	; (16cd8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16c58:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   16c5a:	2102      	movs	r1, #2
   16c5c:	2008      	movs	r0, #8
   16c5e:	4b1f      	ldr	r3, [pc, #124]	; (16cdc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c60:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   16c62:	2102      	movs	r1, #2
   16c64:	202b      	movs	r0, #43	; 0x2b
   16c66:	4b1d      	ldr	r3, [pc, #116]	; (16cdc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c68:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   16c6a:	2102      	movs	r1, #2
   16c6c:	202a      	movs	r0, #42	; 0x2a
   16c6e:	4b1b      	ldr	r3, [pc, #108]	; (16cdc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c70:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   16c72:	2101      	movs	r1, #1
   16c74:	2008      	movs	r0, #8
   16c76:	4b1a      	ldr	r3, [pc, #104]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c78:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   16c7a:	2100      	movs	r1, #0
   16c7c:	202b      	movs	r0, #43	; 0x2b
   16c7e:	4b18      	ldr	r3, [pc, #96]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c80:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   16c82:	2100      	movs	r1, #0
   16c84:	202a      	movs	r0, #42	; 0x2a
   16c86:	4b16      	ldr	r3, [pc, #88]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c88:	4798      	blx	r3

	delay_us(1);
   16c8a:	2001      	movs	r0, #1
   16c8c:	4b15      	ldr	r3, [pc, #84]	; (16ce4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16c8e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   16c90:	2300      	movs	r3, #0
   16c92:	607b      	str	r3, [r7, #4]
   16c94:	687b      	ldr	r3, [r7, #4]
   16c96:	2b06      	cmp	r3, #6
   16c98:	dc11      	bgt.n	16cbe <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   16c9a:	2101      	movs	r1, #1
   16c9c:	202a      	movs	r0, #42	; 0x2a
   16c9e:	4b10      	ldr	r3, [pc, #64]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16ca0:	4798      	blx	r3
		delay_us(1);
   16ca2:	2001      	movs	r0, #1
   16ca4:	4b0f      	ldr	r3, [pc, #60]	; (16ce4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16ca6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   16ca8:	2100      	movs	r1, #0
   16caa:	202a      	movs	r0, #42	; 0x2a
   16cac:	4b0c      	ldr	r3, [pc, #48]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16cae:	4798      	blx	r3
		delay_us(1);
   16cb0:	2001      	movs	r0, #1
   16cb2:	4b0c      	ldr	r3, [pc, #48]	; (16ce4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16cb4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   16cb6:	687b      	ldr	r3, [r7, #4]
   16cb8:	3301      	adds	r3, #1
   16cba:	607b      	str	r3, [r7, #4]
   16cbc:	e7ea      	b.n	16c94 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   16cbe:	2101      	movs	r1, #1
   16cc0:	202b      	movs	r0, #43	; 0x2b
   16cc2:	4b07      	ldr	r3, [pc, #28]	; (16ce0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16cc4:	4798      	blx	r3
	delay_us(1);
   16cc6:	2001      	movs	r0, #1
   16cc8:	4b06      	ldr	r3, [pc, #24]	; (16ce4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16cca:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   16ccc:	4b06      	ldr	r3, [pc, #24]	; (16ce8 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   16cce:	4798      	blx	r3
}
   16cd0:	bf00      	nop
   16cd2:	3708      	adds	r7, #8
   16cd4:	46bd      	mov	sp, r7
   16cd6:	bd80      	pop	{r7, pc}
   16cd8:	00016bad 	.word	0x00016bad
   16cdc:	00016bcd 	.word	0x00016bcd
   16ce0:	00016c05 	.word	0x00016c05
   16ce4:	00003ea1 	.word	0x00003ea1
   16ce8:	00002f55 	.word	0x00002f55

00016cec <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   16cec:	b480      	push	{r7}
   16cee:	b083      	sub	sp, #12
   16cf0:	af00      	add	r7, sp, #0
   16cf2:	6078      	str	r0, [r7, #4]
   16cf4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   16cf6:	687b      	ldr	r3, [r7, #4]
   16cf8:	683a      	ldr	r2, [r7, #0]
   16cfa:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   16cfc:	687b      	ldr	r3, [r7, #4]
   16cfe:	4a04      	ldr	r2, [pc, #16]	; (16d10 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   16d00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   16d04:	687b      	ldr	r3, [r7, #4]
   16d06:	4618      	mov	r0, r3
   16d08:	370c      	adds	r7, #12
   16d0a:	46bd      	mov	sp, r7
   16d0c:	bc80      	pop	{r7}
   16d0e:	4770      	bx	lr
   16d10:	001fff00 	.word	0x001fff00

00016d14 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   16d14:	b480      	push	{r7}
   16d16:	b083      	sub	sp, #12
   16d18:	af00      	add	r7, sp, #0
   16d1a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	4618      	mov	r0, r3
   16d20:	370c      	adds	r7, #12
   16d22:	46bd      	mov	sp, r7
   16d24:	bc80      	pop	{r7}
   16d26:	4770      	bx	lr

00016d28 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   16d28:	b580      	push	{r7, lr}
   16d2a:	b082      	sub	sp, #8
   16d2c:	af00      	add	r7, sp, #0
   16d2e:	6078      	str	r0, [r7, #4]
	xferDone=false;
   16d30:	687b      	ldr	r3, [r7, #4]
   16d32:	2200      	movs	r2, #0
   16d34:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   16d36:	6878      	ldr	r0, [r7, #4]
   16d38:	4b04      	ldr	r3, [pc, #16]	; (16d4c <_ZN13N25Q256_Class4InitEv+0x24>)
   16d3a:	4798      	blx	r3
	return SelfTest();
   16d3c:	6878      	ldr	r0, [r7, #4]
   16d3e:	4b04      	ldr	r3, [pc, #16]	; (16d50 <_ZN13N25Q256_Class4InitEv+0x28>)
   16d40:	4798      	blx	r3
   16d42:	4603      	mov	r3, r0
}
   16d44:	4618      	mov	r0, r3
   16d46:	3708      	adds	r7, #8
   16d48:	46bd      	mov	sp, r7
   16d4a:	bd80      	pop	{r7, pc}
   16d4c:	00016d55 	.word	0x00016d55
   16d50:	00016ef1 	.word	0x00016ef1

00016d54 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   16d54:	b590      	push	{r4, r7, lr}
   16d56:	b083      	sub	sp, #12
   16d58:	af00      	add	r7, sp, #0
   16d5a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   16d5c:	687b      	ldr	r3, [r7, #4]
   16d5e:	685b      	ldr	r3, [r3, #4]
   16d60:	4618      	mov	r0, r3
   16d62:	4b08      	ldr	r3, [pc, #32]	; (16d84 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   16d64:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   16d66:	687b      	ldr	r3, [r7, #4]
   16d68:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   16d6a:	2300      	movs	r3, #0
   16d6c:	4a06      	ldr	r2, [pc, #24]	; (16d88 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   16d6e:	4807      	ldr	r0, [pc, #28]	; (16d8c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   16d70:	4c07      	ldr	r4, [pc, #28]	; (16d90 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   16d72:	47a0      	blx	r4
   16d74:	4602      	mov	r2, r0
   16d76:	687b      	ldr	r3, [r7, #4]
   16d78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16d7c:	bf00      	nop
   16d7e:	370c      	adds	r7, #12
   16d80:	46bd      	mov	sp, r7
   16d82:	bd90      	pop	{r4, r7, pc}
   16d84:	0000440d 	.word	0x0000440d
   16d88:	00016c3d 	.word	0x00016c3d
   16d8c:	2000947c 	.word	0x2000947c
   16d90:	0000ddc1 	.word	0x0000ddc1

00016d94 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   16d94:	b580      	push	{r7, lr}
   16d96:	b084      	sub	sp, #16
   16d98:	af00      	add	r7, sp, #0
   16d9a:	6078      	str	r0, [r7, #4]
   16d9c:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   16d9e:	687b      	ldr	r3, [r7, #4]
   16da0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16da4:	685b      	ldr	r3, [r3, #4]
   16da6:	689b      	ldr	r3, [r3, #8]
   16da8:	687a      	ldr	r2, [r7, #4]
   16daa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   16dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16db2:	6839      	ldr	r1, [r7, #0]
   16db4:	4798      	blx	r3
   16db6:	4603      	mov	r3, r0
   16db8:	60fb      	str	r3, [r7, #12]
	return	e;
   16dba:	68fb      	ldr	r3, [r7, #12]
}
   16dbc:	4618      	mov	r0, r3
   16dbe:	3710      	adds	r7, #16
   16dc0:	46bd      	mov	sp, r7
   16dc2:	bd80      	pop	{r7, pc}

00016dc4 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16dc4:	b590      	push	{r4, r7, lr}
   16dc6:	b087      	sub	sp, #28
   16dc8:	af00      	add	r7, sp, #0
   16dca:	60f8      	str	r0, [r7, #12]
   16dcc:	60b9      	str	r1, [r7, #8]
   16dce:	607a      	str	r2, [r7, #4]
   16dd0:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   16dd2:	68fb      	ldr	r3, [r7, #12]
   16dd4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16dd8:	685b      	ldr	r3, [r3, #4]
   16dda:	685c      	ldr	r4, [r3, #4]
   16ddc:	68fb      	ldr	r3, [r7, #12]
   16dde:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16de2:	683b      	ldr	r3, [r7, #0]
   16de4:	687a      	ldr	r2, [r7, #4]
   16de6:	68b9      	ldr	r1, [r7, #8]
   16de8:	47a0      	blx	r4
   16dea:	4603      	mov	r3, r0
   16dec:	617b      	str	r3, [r7, #20]
	return	w;
   16dee:	697b      	ldr	r3, [r7, #20]
}
   16df0:	4618      	mov	r0, r3
   16df2:	371c      	adds	r7, #28
   16df4:	46bd      	mov	sp, r7
   16df6:	bd90      	pop	{r4, r7, pc}

00016df8 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16df8:	b590      	push	{r4, r7, lr}
   16dfa:	b087      	sub	sp, #28
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	60f8      	str	r0, [r7, #12]
   16e00:	60b9      	str	r1, [r7, #8]
   16e02:	607a      	str	r2, [r7, #4]
   16e04:	603b      	str	r3, [r7, #0]
	xferDone=false;
   16e06:	68fb      	ldr	r3, [r7, #12]
   16e08:	2200      	movs	r2, #0
   16e0a:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   16e0c:	68fb      	ldr	r3, [r7, #12]
   16e0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16e12:	685b      	ldr	r3, [r3, #4]
   16e14:	681c      	ldr	r4, [r3, #0]
   16e16:	68fb      	ldr	r3, [r7, #12]
   16e18:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16e1c:	683b      	ldr	r3, [r7, #0]
   16e1e:	687a      	ldr	r2, [r7, #4]
   16e20:	68b9      	ldr	r1, [r7, #8]
   16e22:	47a0      	blx	r4
   16e24:	4603      	mov	r3, r0
   16e26:	617b      	str	r3, [r7, #20]
	return	r;
   16e28:	697b      	ldr	r3, [r7, #20]
}
   16e2a:	4618      	mov	r0, r3
   16e2c:	371c      	adds	r7, #28
   16e2e:	46bd      	mov	sp, r7
   16e30:	bd90      	pop	{r4, r7, pc}
	...

00016e34 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   16e34:	b580      	push	{r7, lr}
   16e36:	b082      	sub	sp, #8
   16e38:	af00      	add	r7, sp, #0
   16e3a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   16e3c:	687a      	ldr	r2, [r7, #4]
   16e3e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16e42:	f043 0310 	orr.w	r3, r3, #16
   16e46:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   16e4a:	687a      	ldr	r2, [r7, #4]
   16e4c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16e54:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   16e58:	687a      	ldr	r2, [r7, #4]
   16e5a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   16e5e:	f36f 1305 	bfc	r3, #4, #2
   16e62:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   16e66:	687b      	ldr	r3, [r7, #4]
   16e68:	2205      	movs	r2, #5
   16e6a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   16e6e:	687b      	ldr	r3, [r7, #4]
   16e70:	2201      	movs	r2, #1
   16e72:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   16e76:	687b      	ldr	r3, [r7, #4]
   16e78:	f203 2212 	addw	r2, r3, #530	; 0x212
   16e7c:	687b      	ldr	r3, [r7, #4]
   16e7e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   16e82:	687b      	ldr	r3, [r7, #4]
   16e84:	685a      	ldr	r2, [r3, #4]
   16e86:	687b      	ldr	r3, [r7, #4]
   16e88:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16e8c:	4619      	mov	r1, r3
   16e8e:	4610      	mov	r0, r2
   16e90:	4b04      	ldr	r3, [pc, #16]	; (16ea4 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   16e92:	4798      	blx	r3
		return status;
   16e94:	687b      	ldr	r3, [r7, #4]
   16e96:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   16e9a:	4618      	mov	r0, r3
   16e9c:	3708      	adds	r7, #8
   16e9e:	46bd      	mov	sp, r7
   16ea0:	bd80      	pop	{r7, pc}
   16ea2:	bf00      	nop
   16ea4:	00004485 	.word	0x00004485

00016ea8 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16ea8:	b580      	push	{r7, lr}
   16eaa:	b082      	sub	sp, #8
   16eac:	af00      	add	r7, sp, #0
   16eae:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   16eb0:	6878      	ldr	r0, [r7, #4]
   16eb2:	4b0e      	ldr	r3, [pc, #56]	; (16eec <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   16eb4:	4798      	blx	r3
   16eb6:	4603      	mov	r3, r0
   16eb8:	461a      	mov	r2, r3
   16eba:	687b      	ldr	r3, [r7, #4]
   16ebc:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   16ec0:	687b      	ldr	r3, [r7, #4]
   16ec2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16ec6:	f003 0301 	and.w	r3, r3, #1
   16eca:	2b00      	cmp	r3, #0
   16ecc:	d000      	beq.n	16ed0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   16ece:	e7ef      	b.n	16eb0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   16ed0:	687b      	ldr	r3, [r7, #4]
   16ed2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16ed6:	f003 0301 	and.w	r3, r3, #1
   16eda:	2b00      	cmp	r3, #0
   16edc:	bf0c      	ite	eq
   16ede:	2301      	moveq	r3, #1
   16ee0:	2300      	movne	r3, #0
   16ee2:	b2db      	uxtb	r3, r3
}
   16ee4:	4618      	mov	r0, r3
   16ee6:	3708      	adds	r7, #8
   16ee8:	46bd      	mov	sp, r7
   16eea:	bd80      	pop	{r7, pc}
   16eec:	00016e35 	.word	0x00016e35

00016ef0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   16ef0:	b590      	push	{r4, r7, lr}
   16ef2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   16ef6:	b085      	sub	sp, #20
   16ef8:	af00      	add	r7, sp, #0
   16efa:	f107 0310 	add.w	r3, r7, #16
   16efe:	3b0c      	subs	r3, #12
   16f00:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   16f02:	f107 0310 	add.w	r3, r7, #16
   16f06:	3b0c      	subs	r3, #12
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16f0e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16f12:	f107 0310 	add.w	r3, r7, #16
   16f16:	3b0c      	subs	r3, #12
   16f18:	681b      	ldr	r3, [r3, #0]
   16f1a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f1e:	f107 0110 	add.w	r1, r7, #16
   16f22:	3904      	subs	r1, #4
   16f24:	f107 0010 	add.w	r0, r7, #16
   16f28:	380c      	subs	r0, #12
   16f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f2e:	6800      	ldr	r0, [r0, #0]
   16f30:	4c4b      	ldr	r4, [pc, #300]	; (17060 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16f32:	47a0      	blx	r4
	WaitOnBusy();
   16f34:	f107 0310 	add.w	r3, r7, #16
   16f38:	3b0c      	subs	r3, #12
   16f3a:	6818      	ldr	r0, [r3, #0]
   16f3c:	4b49      	ldr	r3, [pc, #292]	; (17064 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f3e:	4798      	blx	r3
	Erase(currentAddress);
   16f40:	f107 0310 	add.w	r3, r7, #16
   16f44:	3b0c      	subs	r3, #12
   16f46:	681b      	ldr	r3, [r3, #0]
   16f48:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f4c:	f107 0310 	add.w	r3, r7, #16
   16f50:	3b0c      	subs	r3, #12
   16f52:	4611      	mov	r1, r2
   16f54:	6818      	ldr	r0, [r3, #0]
   16f56:	4b44      	ldr	r3, [pc, #272]	; (17068 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   16f58:	4798      	blx	r3
	WaitOnBusy();
   16f5a:	f107 0310 	add.w	r3, r7, #16
   16f5e:	3b0c      	subs	r3, #12
   16f60:	6818      	ldr	r0, [r3, #0]
   16f62:	4b40      	ldr	r3, [pc, #256]	; (17064 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f64:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16f66:	f107 0310 	add.w	r3, r7, #16
   16f6a:	3b0c      	subs	r3, #12
   16f6c:	681b      	ldr	r3, [r3, #0]
   16f6e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f72:	f107 0110 	add.w	r1, r7, #16
   16f76:	3904      	subs	r1, #4
   16f78:	f107 0010 	add.w	r0, r7, #16
   16f7c:	380c      	subs	r0, #12
   16f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f82:	6800      	ldr	r0, [r0, #0]
   16f84:	4c39      	ldr	r4, [pc, #228]	; (1706c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16f86:	47a0      	blx	r4
	WaitOnBusy();
   16f88:	f107 0310 	add.w	r3, r7, #16
   16f8c:	3b0c      	subs	r3, #12
   16f8e:	6818      	ldr	r0, [r3, #0]
   16f90:	4b34      	ldr	r3, [pc, #208]	; (17064 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f92:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16f94:	f107 0310 	add.w	r3, r7, #16
   16f98:	3b0c      	subs	r3, #12
   16f9a:	681b      	ldr	r3, [r3, #0]
   16f9c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16fa0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16fa4:	f101 0110 	add.w	r1, r1, #16
   16fa8:	3904      	subs	r1, #4
   16faa:	f107 0010 	add.w	r0, r7, #16
   16fae:	380c      	subs	r0, #12
   16fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16fb4:	6800      	ldr	r0, [r0, #0]
   16fb6:	4c2a      	ldr	r4, [pc, #168]	; (17060 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16fb8:	47a0      	blx	r4
	WaitOnBusy();
   16fba:	f107 0310 	add.w	r3, r7, #16
   16fbe:	3b0c      	subs	r3, #12
   16fc0:	6818      	ldr	r0, [r3, #0]
   16fc2:	4b28      	ldr	r3, [pc, #160]	; (17064 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16fc4:	4798      	blx	r3
	isOK	 = true;
   16fc6:	f107 0310 	add.w	r3, r7, #16
   16fca:	3b0c      	subs	r3, #12
   16fcc:	681b      	ldr	r3, [r3, #0]
   16fce:	2201      	movs	r2, #1
   16fd0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16fd4:	2300      	movs	r3, #0
   16fd6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16fda:	f102 020c 	add.w	r2, r2, #12
   16fde:	6013      	str	r3, [r2, #0]
   16fe0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16fe4:	f103 030c 	add.w	r3, r3, #12
   16fe8:	681b      	ldr	r3, [r3, #0]
   16fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16fee:	da2b      	bge.n	17048 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   16ff0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   16ff4:	f103 0310 	add.w	r3, r3, #16
   16ff8:	3b04      	subs	r3, #4
   16ffa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16ffe:	f102 020c 	add.w	r2, r2, #12
   17002:	6812      	ldr	r2, [r2, #0]
   17004:	4413      	add	r3, r2
   17006:	781a      	ldrb	r2, [r3, #0]
   17008:	f107 0310 	add.w	r3, r7, #16
   1700c:	3b04      	subs	r3, #4
   1700e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   17012:	f101 010c 	add.w	r1, r1, #12
   17016:	6809      	ldr	r1, [r1, #0]
   17018:	440b      	add	r3, r1
   1701a:	781b      	ldrb	r3, [r3, #0]
   1701c:	429a      	cmp	r2, r3
   1701e:	d007      	beq.n	17030 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   17020:	f107 0310 	add.w	r3, r7, #16
   17024:	3b0c      	subs	r3, #12
   17026:	681b      	ldr	r3, [r3, #0]
   17028:	2200      	movs	r2, #0
   1702a:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1702e:	e00b      	b.n	17048 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   17030:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   17034:	f103 030c 	add.w	r3, r3, #12
   17038:	681b      	ldr	r3, [r3, #0]
   1703a:	3301      	adds	r3, #1
   1703c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   17040:	f102 020c 	add.w	r2, r2, #12
   17044:	6013      	str	r3, [r2, #0]
   17046:	e7cb      	b.n	16fe0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   17048:	f107 0310 	add.w	r3, r7, #16
   1704c:	3b0c      	subs	r3, #12
   1704e:	681b      	ldr	r3, [r3, #0]
   17050:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   17054:	4618      	mov	r0, r3
   17056:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1705a:	3714      	adds	r7, #20
   1705c:	46bd      	mov	sp, r7
   1705e:	bd90      	pop	{r4, r7, pc}
   17060:	00016df9 	.word	0x00016df9
   17064:	00016ea9 	.word	0x00016ea9
   17068:	00016d95 	.word	0x00016d95
   1706c:	00016dc5 	.word	0x00016dc5

00017070 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   17070:	b580      	push	{r7, lr}
   17072:	b082      	sub	sp, #8
   17074:	af00      	add	r7, sp, #0
   17076:	6078      	str	r0, [r7, #4]
   17078:	6039      	str	r1, [r7, #0]
   1707a:	687b      	ldr	r3, [r7, #4]
   1707c:	2b01      	cmp	r3, #1
   1707e:	d10d      	bne.n	1709c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   17080:	683b      	ldr	r3, [r7, #0]
   17082:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17086:	4293      	cmp	r3, r2
   17088:	d108      	bne.n	1709c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1708a:	4906      	ldr	r1, [pc, #24]	; (170a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1708c:	4806      	ldr	r0, [pc, #24]	; (170a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1708e:	4b07      	ldr	r3, [pc, #28]	; (170ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17090:	4798      	blx	r3
   17092:	4a07      	ldr	r2, [pc, #28]	; (170b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17094:	4907      	ldr	r1, [pc, #28]	; (170b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17096:	4804      	ldr	r0, [pc, #16]	; (170a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17098:	4b07      	ldr	r3, [pc, #28]	; (170b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1709a:	4798      	blx	r3
   1709c:	bf00      	nop
   1709e:	3708      	adds	r7, #8
   170a0:	46bd      	mov	sp, r7
   170a2:	bd80      	pop	{r7, pc}
   170a4:	2000974c 	.word	0x2000974c
   170a8:	2000948c 	.word	0x2000948c
   170ac:	00016ced 	.word	0x00016ced
   170b0:	20000000 	.word	0x20000000
   170b4:	00016d15 	.word	0x00016d15
   170b8:	000170d1 	.word	0x000170d1

000170bc <_GLOBAL__sub_I_ptrN25Q256Class>:
   170bc:	b580      	push	{r7, lr}
   170be:	af00      	add	r7, sp, #0
   170c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   170c4:	2001      	movs	r0, #1
   170c6:	4b01      	ldr	r3, [pc, #4]	; (170cc <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   170c8:	4798      	blx	r3
   170ca:	bd80      	pop	{r7, pc}
   170cc:	00017071 	.word	0x00017071

000170d0 <__aeabi_atexit>:
   170d0:	460b      	mov	r3, r1
   170d2:	4601      	mov	r1, r0
   170d4:	4618      	mov	r0, r3
   170d6:	f002 b825 	b.w	19124 <__cxa_atexit>
   170da:	bf00      	nop

000170dc <_ZdlPvj>:
   170dc:	f7f9 bb9c 	b.w	10818 <_ZdlPv>

000170e0 <pow>:
   170e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170e4:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 173d8 <pow+0x2f8>
   170e8:	b08d      	sub	sp, #52	; 0x34
   170ea:	4606      	mov	r6, r0
   170ec:	460f      	mov	r7, r1
   170ee:	4614      	mov	r4, r2
   170f0:	461d      	mov	r5, r3
   170f2:	f000 f975 	bl	173e0 <__ieee754_pow>
   170f6:	f999 8000 	ldrsb.w	r8, [r9]
   170fa:	f1b8 3fff 	cmp.w	r8, #4294967295
   170fe:	e9cd 0100 	strd	r0, r1, [sp]
   17102:	d036      	beq.n	17172 <pow+0x92>
   17104:	4622      	mov	r2, r4
   17106:	462b      	mov	r3, r5
   17108:	4620      	mov	r0, r4
   1710a:	4629      	mov	r1, r5
   1710c:	f001 fce0 	bl	18ad0 <__aeabi_dcmpun>
   17110:	4683      	mov	fp, r0
   17112:	bb70      	cbnz	r0, 17172 <pow+0x92>
   17114:	4632      	mov	r2, r6
   17116:	463b      	mov	r3, r7
   17118:	4630      	mov	r0, r6
   1711a:	4639      	mov	r1, r7
   1711c:	f001 fcd8 	bl	18ad0 <__aeabi_dcmpun>
   17120:	2200      	movs	r2, #0
   17122:	4682      	mov	sl, r0
   17124:	2300      	movs	r3, #0
   17126:	2800      	cmp	r0, #0
   17128:	f040 80a0 	bne.w	1726c <pow+0x18c>
   1712c:	4630      	mov	r0, r6
   1712e:	4639      	mov	r1, r7
   17130:	f001 fc9c 	bl	18a6c <__aeabi_dcmpeq>
   17134:	b310      	cbz	r0, 1717c <pow+0x9c>
   17136:	2200      	movs	r2, #0
   17138:	2300      	movs	r3, #0
   1713a:	4620      	mov	r0, r4
   1713c:	4629      	mov	r1, r5
   1713e:	f001 fc95 	bl	18a6c <__aeabi_dcmpeq>
   17142:	4683      	mov	fp, r0
   17144:	2800      	cmp	r0, #0
   17146:	d06a      	beq.n	1721e <pow+0x13e>
   17148:	2201      	movs	r2, #1
   1714a:	4b9c      	ldr	r3, [pc, #624]	; (173bc <pow+0x2dc>)
   1714c:	9202      	str	r2, [sp, #8]
   1714e:	2100      	movs	r1, #0
   17150:	2200      	movs	r2, #0
   17152:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   17156:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1715a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1715e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   17162:	9303      	str	r3, [sp, #12]
   17164:	f1b8 0f00 	cmp.w	r8, #0
   17168:	d045      	beq.n	171f6 <pow+0x116>
   1716a:	4c95      	ldr	r4, [pc, #596]	; (173c0 <pow+0x2e0>)
   1716c:	2300      	movs	r3, #0
   1716e:	e9cd 3400 	strd	r3, r4, [sp]
   17172:	e9dd 0100 	ldrd	r0, r1, [sp]
   17176:	b00d      	add	sp, #52	; 0x34
   17178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1717c:	e9dd 0100 	ldrd	r0, r1, [sp]
   17180:	f000 ff34 	bl	17fec <finite>
   17184:	4680      	mov	r8, r0
   17186:	2800      	cmp	r0, #0
   17188:	f000 808b 	beq.w	172a2 <pow+0x1c2>
   1718c:	f04f 0a00 	mov.w	sl, #0
   17190:	f04f 0b00 	mov.w	fp, #0
   17194:	4652      	mov	r2, sl
   17196:	465b      	mov	r3, fp
   17198:	e9dd 0100 	ldrd	r0, r1, [sp]
   1719c:	f001 fc66 	bl	18a6c <__aeabi_dcmpeq>
   171a0:	2800      	cmp	r0, #0
   171a2:	d0e6      	beq.n	17172 <pow+0x92>
   171a4:	4630      	mov	r0, r6
   171a6:	4639      	mov	r1, r7
   171a8:	f000 ff20 	bl	17fec <finite>
   171ac:	2800      	cmp	r0, #0
   171ae:	d0e0      	beq.n	17172 <pow+0x92>
   171b0:	4620      	mov	r0, r4
   171b2:	4629      	mov	r1, r5
   171b4:	f000 ff1a 	bl	17fec <finite>
   171b8:	2800      	cmp	r0, #0
   171ba:	d0da      	beq.n	17172 <pow+0x92>
   171bc:	f999 3000 	ldrsb.w	r3, [r9]
   171c0:	4a7e      	ldr	r2, [pc, #504]	; (173bc <pow+0x2dc>)
   171c2:	9203      	str	r2, [sp, #12]
   171c4:	2104      	movs	r1, #4
   171c6:	2200      	movs	r2, #0
   171c8:	2b02      	cmp	r3, #2
   171ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
   171ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
   171d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   171d6:	9102      	str	r1, [sp, #8]
   171d8:	920a      	str	r2, [sp, #40]	; 0x28
   171da:	d003      	beq.n	171e4 <pow+0x104>
   171dc:	a802      	add	r0, sp, #8
   171de:	f000 ff0b 	bl	17ff8 <matherr>
   171e2:	b968      	cbnz	r0, 17200 <pow+0x120>
   171e4:	f001 ffa4 	bl	19130 <__errno>
   171e8:	2322      	movs	r3, #34	; 0x22
   171ea:	6003      	str	r3, [r0, #0]
   171ec:	e008      	b.n	17200 <pow+0x120>
   171ee:	2300      	movs	r3, #0
   171f0:	2400      	movs	r4, #0
   171f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
   171f6:	a802      	add	r0, sp, #8
   171f8:	f000 fefe 	bl	17ff8 <matherr>
   171fc:	2800      	cmp	r0, #0
   171fe:	d030      	beq.n	17262 <pow+0x182>
   17200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17202:	b11b      	cbz	r3, 1720c <pow+0x12c>
   17204:	f001 ff94 	bl	19130 <__errno>
   17208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1720a:	6003      	str	r3, [r0, #0]
   1720c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   17210:	e9cd 3400 	strd	r3, r4, [sp]
   17214:	e9dd 0100 	ldrd	r0, r1, [sp]
   17218:	b00d      	add	sp, #52	; 0x34
   1721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1721e:	4620      	mov	r0, r4
   17220:	4629      	mov	r1, r5
   17222:	f000 fee3 	bl	17fec <finite>
   17226:	2800      	cmp	r0, #0
   17228:	d0a3      	beq.n	17172 <pow+0x92>
   1722a:	2200      	movs	r2, #0
   1722c:	2300      	movs	r3, #0
   1722e:	4620      	mov	r0, r4
   17230:	4629      	mov	r1, r5
   17232:	f001 fc25 	bl	18a80 <__aeabi_dcmplt>
   17236:	2800      	cmp	r0, #0
   17238:	d09b      	beq.n	17172 <pow+0x92>
   1723a:	f999 3000 	ldrsb.w	r3, [r9]
   1723e:	4a5f      	ldr	r2, [pc, #380]	; (173bc <pow+0x2dc>)
   17240:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   17244:	2101      	movs	r1, #1
   17246:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1724a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1724e:	9102      	str	r1, [sp, #8]
   17250:	9203      	str	r2, [sp, #12]
   17252:	2b00      	cmp	r3, #0
   17254:	d0cb      	beq.n	171ee <pow+0x10e>
   17256:	495b      	ldr	r1, [pc, #364]	; (173c4 <pow+0x2e4>)
   17258:	2000      	movs	r0, #0
   1725a:	2b02      	cmp	r3, #2
   1725c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17260:	d1c9      	bne.n	171f6 <pow+0x116>
   17262:	f001 ff65 	bl	19130 <__errno>
   17266:	2321      	movs	r3, #33	; 0x21
   17268:	6003      	str	r3, [r0, #0]
   1726a:	e7c9      	b.n	17200 <pow+0x120>
   1726c:	4620      	mov	r0, r4
   1726e:	4629      	mov	r1, r5
   17270:	f001 fbfc 	bl	18a6c <__aeabi_dcmpeq>
   17274:	2800      	cmp	r0, #0
   17276:	f43f af7c 	beq.w	17172 <pow+0x92>
   1727a:	4b51      	ldr	r3, [pc, #324]	; (173c0 <pow+0x2e0>)
   1727c:	494f      	ldr	r1, [pc, #316]	; (173bc <pow+0x2dc>)
   1727e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   17282:	2001      	movs	r0, #1
   17284:	2200      	movs	r2, #0
   17286:	f1b8 0f02 	cmp.w	r8, #2
   1728a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1728e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   17292:	9002      	str	r0, [sp, #8]
   17294:	9103      	str	r1, [sp, #12]
   17296:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1729a:	d1ac      	bne.n	171f6 <pow+0x116>
   1729c:	e9cd 2300 	strd	r2, r3, [sp]
   172a0:	e767      	b.n	17172 <pow+0x92>
   172a2:	4630      	mov	r0, r6
   172a4:	4639      	mov	r1, r7
   172a6:	f000 fea1 	bl	17fec <finite>
   172aa:	2800      	cmp	r0, #0
   172ac:	f43f af6e 	beq.w	1718c <pow+0xac>
   172b0:	4620      	mov	r0, r4
   172b2:	4629      	mov	r1, r5
   172b4:	f000 fe9a 	bl	17fec <finite>
   172b8:	2800      	cmp	r0, #0
   172ba:	f43f af67 	beq.w	1718c <pow+0xac>
   172be:	e9dd 2300 	ldrd	r2, r3, [sp]
   172c2:	4610      	mov	r0, r2
   172c4:	4619      	mov	r1, r3
   172c6:	f001 fc03 	bl	18ad0 <__aeabi_dcmpun>
   172ca:	2800      	cmp	r0, #0
   172cc:	d158      	bne.n	17380 <pow+0x2a0>
   172ce:	2303      	movs	r3, #3
   172d0:	f999 8000 	ldrsb.w	r8, [r9]
   172d4:	9302      	str	r3, [sp, #8]
   172d6:	4b39      	ldr	r3, [pc, #228]	; (173bc <pow+0x2dc>)
   172d8:	900a      	str	r0, [sp, #40]	; 0x28
   172da:	9303      	str	r3, [sp, #12]
   172dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   172e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   172e4:	2200      	movs	r2, #0
   172e6:	2300      	movs	r3, #0
   172e8:	4630      	mov	r0, r6
   172ea:	4639      	mov	r1, r7
   172ec:	f1b8 0f00 	cmp.w	r8, #0
   172f0:	d126      	bne.n	17340 <pow+0x260>
   172f2:	4f35      	ldr	r7, [pc, #212]	; (173c8 <pow+0x2e8>)
   172f4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   172f8:	e9cd 6708 	strd	r6, r7, [sp, #32]
   172fc:	f001 fbc0 	bl	18a80 <__aeabi_dcmplt>
   17300:	2800      	cmp	r0, #0
   17302:	f43f af6b 	beq.w	171dc <pow+0xfc>
   17306:	2200      	movs	r2, #0
   17308:	4b30      	ldr	r3, [pc, #192]	; (173cc <pow+0x2ec>)
   1730a:	4620      	mov	r0, r4
   1730c:	4629      	mov	r1, r5
   1730e:	f001 f945 	bl	1859c <__aeabi_dmul>
   17312:	4604      	mov	r4, r0
   17314:	460d      	mov	r5, r1
   17316:	f000 fe77 	bl	18008 <rint>
   1731a:	4602      	mov	r2, r0
   1731c:	460b      	mov	r3, r1
   1731e:	4620      	mov	r0, r4
   17320:	4629      	mov	r1, r5
   17322:	f001 fba3 	bl	18a6c <__aeabi_dcmpeq>
   17326:	bb40      	cbnz	r0, 1737a <pow+0x29a>
   17328:	4b29      	ldr	r3, [pc, #164]	; (173d0 <pow+0x2f0>)
   1732a:	f999 8000 	ldrsb.w	r8, [r9]
   1732e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   17332:	e9cd 2308 	strd	r2, r3, [sp, #32]
   17336:	f1b8 0f02 	cmp.w	r8, #2
   1733a:	f47f af4f 	bne.w	171dc <pow+0xfc>
   1733e:	e751      	b.n	171e4 <pow+0x104>
   17340:	4f24      	ldr	r7, [pc, #144]	; (173d4 <pow+0x2f4>)
   17342:	2600      	movs	r6, #0
   17344:	e9cd 6708 	strd	r6, r7, [sp, #32]
   17348:	f001 fb9a 	bl	18a80 <__aeabi_dcmplt>
   1734c:	2800      	cmp	r0, #0
   1734e:	d0f2      	beq.n	17336 <pow+0x256>
   17350:	2200      	movs	r2, #0
   17352:	4b1e      	ldr	r3, [pc, #120]	; (173cc <pow+0x2ec>)
   17354:	4620      	mov	r0, r4
   17356:	4629      	mov	r1, r5
   17358:	f001 f920 	bl	1859c <__aeabi_dmul>
   1735c:	4604      	mov	r4, r0
   1735e:	460d      	mov	r5, r1
   17360:	f000 fe52 	bl	18008 <rint>
   17364:	4602      	mov	r2, r0
   17366:	460b      	mov	r3, r1
   17368:	4620      	mov	r0, r4
   1736a:	4629      	mov	r1, r5
   1736c:	f001 fb7e 	bl	18a6c <__aeabi_dcmpeq>
   17370:	b918      	cbnz	r0, 1737a <pow+0x29a>
   17372:	4b14      	ldr	r3, [pc, #80]	; (173c4 <pow+0x2e4>)
   17374:	2200      	movs	r2, #0
   17376:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1737a:	f999 8000 	ldrsb.w	r8, [r9]
   1737e:	e7da      	b.n	17336 <pow+0x256>
   17380:	f999 9000 	ldrsb.w	r9, [r9]
   17384:	4b0d      	ldr	r3, [pc, #52]	; (173bc <pow+0x2dc>)
   17386:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1738a:	2201      	movs	r2, #1
   1738c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   17390:	e9cd 4506 	strd	r4, r5, [sp, #24]
   17394:	9202      	str	r2, [sp, #8]
   17396:	9303      	str	r3, [sp, #12]
   17398:	f1b9 0f00 	cmp.w	r9, #0
   1739c:	f43f af27 	beq.w	171ee <pow+0x10e>
   173a0:	2200      	movs	r2, #0
   173a2:	2300      	movs	r3, #0
   173a4:	4610      	mov	r0, r2
   173a6:	4619      	mov	r1, r3
   173a8:	f001 fa22 	bl	187f0 <__aeabi_ddiv>
   173ac:	f1b9 0f02 	cmp.w	r9, #2
   173b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   173b4:	f43f af55 	beq.w	17262 <pow+0x182>
   173b8:	e71d      	b.n	171f6 <pow+0x116>
   173ba:	bf00      	nop
   173bc:	0001a990 	.word	0x0001a990
   173c0:	3ff00000 	.word	0x3ff00000
   173c4:	fff00000 	.word	0xfff00000
   173c8:	47efffff 	.word	0x47efffff
   173cc:	3fe00000 	.word	0x3fe00000
   173d0:	c7efffff 	.word	0xc7efffff
   173d4:	7ff00000 	.word	0x7ff00000
   173d8:	200001e7 	.word	0x200001e7
   173dc:	00000000 	.word	0x00000000

000173e0 <__ieee754_pow>:
   173e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173e4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   173e8:	ea57 0402 	orrs.w	r4, r7, r2
   173ec:	b093      	sub	sp, #76	; 0x4c
   173ee:	d037      	beq.n	17460 <__ieee754_pow+0x80>
   173f0:	4c67      	ldr	r4, [pc, #412]	; (17590 <__ieee754_pow+0x1b0>)
   173f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   173f6:	42a6      	cmp	r6, r4
   173f8:	4683      	mov	fp, r0
   173fa:	460d      	mov	r5, r1
   173fc:	dc29      	bgt.n	17452 <__ieee754_pow+0x72>
   173fe:	469a      	mov	sl, r3
   17400:	4696      	mov	lr, r2
   17402:	d025      	beq.n	17450 <__ieee754_pow+0x70>
   17404:	42a7      	cmp	r7, r4
   17406:	dc24      	bgt.n	17452 <__ieee754_pow+0x72>
   17408:	4c61      	ldr	r4, [pc, #388]	; (17590 <__ieee754_pow+0x1b0>)
   1740a:	42a7      	cmp	r7, r4
   1740c:	d079      	beq.n	17502 <__ieee754_pow+0x122>
   1740e:	2d00      	cmp	r5, #0
   17410:	4689      	mov	r9, r1
   17412:	4680      	mov	r8, r0
   17414:	e9cd 2300 	strd	r2, r3, [sp]
   17418:	db77      	blt.n	1750a <__ieee754_pow+0x12a>
   1741a:	2400      	movs	r4, #0
   1741c:	f1be 0f00 	cmp.w	lr, #0
   17420:	d12c      	bne.n	1747c <__ieee754_pow+0x9c>
   17422:	4b5b      	ldr	r3, [pc, #364]	; (17590 <__ieee754_pow+0x1b0>)
   17424:	429f      	cmp	r7, r3
   17426:	f000 808b 	beq.w	17540 <__ieee754_pow+0x160>
   1742a:	4b5a      	ldr	r3, [pc, #360]	; (17594 <__ieee754_pow+0x1b4>)
   1742c:	429f      	cmp	r7, r3
   1742e:	d061      	beq.n	174f4 <__ieee754_pow+0x114>
   17430:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   17434:	f000 83ba 	beq.w	17bac <__ieee754_pow+0x7cc>
   17438:	4b57      	ldr	r3, [pc, #348]	; (17598 <__ieee754_pow+0x1b8>)
   1743a:	459a      	cmp	sl, r3
   1743c:	d11e      	bne.n	1747c <__ieee754_pow+0x9c>
   1743e:	2d00      	cmp	r5, #0
   17440:	db1c      	blt.n	1747c <__ieee754_pow+0x9c>
   17442:	4640      	mov	r0, r8
   17444:	4649      	mov	r1, r9
   17446:	b013      	add	sp, #76	; 0x4c
   17448:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1744c:	f000 bd0e 	b.w	17e6c <__ieee754_sqrt>
   17450:	b158      	cbz	r0, 1746a <__ieee754_pow+0x8a>
   17452:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   17456:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1745a:	ea56 030b 	orrs.w	r3, r6, fp
   1745e:	d106      	bne.n	1746e <__ieee754_pow+0x8e>
   17460:	494c      	ldr	r1, [pc, #304]	; (17594 <__ieee754_pow+0x1b4>)
   17462:	2000      	movs	r0, #0
   17464:	b013      	add	sp, #76	; 0x4c
   17466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1746a:	42b7      	cmp	r7, r6
   1746c:	ddcc      	ble.n	17408 <__ieee754_pow+0x28>
   1746e:	484b      	ldr	r0, [pc, #300]	; (1759c <__ieee754_pow+0x1bc>)
   17470:	b013      	add	sp, #76	; 0x4c
   17472:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17476:	f000 bdc1 	b.w	17ffc <nan>
   1747a:	2400      	movs	r4, #0
   1747c:	4640      	mov	r0, r8
   1747e:	4649      	mov	r1, r9
   17480:	f000 fdb0 	bl	17fe4 <fabs>
   17484:	f1bb 0f00 	cmp.w	fp, #0
   17488:	d119      	bne.n	174be <__ieee754_pow+0xde>
   1748a:	b126      	cbz	r6, 17496 <__ieee754_pow+0xb6>
   1748c:	4b41      	ldr	r3, [pc, #260]	; (17594 <__ieee754_pow+0x1b4>)
   1748e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   17492:	429a      	cmp	r2, r3
   17494:	d113      	bne.n	174be <__ieee754_pow+0xde>
   17496:	f1ba 0f00 	cmp.w	sl, #0
   1749a:	f2c0 83bc 	blt.w	17c16 <__ieee754_pow+0x836>
   1749e:	2d00      	cmp	r5, #0
   174a0:	dae0      	bge.n	17464 <__ieee754_pow+0x84>
   174a2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   174a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   174aa:	ea56 0304 	orrs.w	r3, r6, r4
   174ae:	f000 848f 	beq.w	17dd0 <__ieee754_pow+0x9f0>
   174b2:	2c01      	cmp	r4, #1
   174b4:	d1d6      	bne.n	17464 <__ieee754_pow+0x84>
   174b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   174ba:	4619      	mov	r1, r3
   174bc:	e7d2      	b.n	17464 <__ieee754_pow+0x84>
   174be:	0fed      	lsrs	r5, r5, #31
   174c0:	3d01      	subs	r5, #1
   174c2:	ea54 0305 	orrs.w	r3, r4, r5
   174c6:	d04e      	beq.n	17566 <__ieee754_pow+0x186>
   174c8:	4b35      	ldr	r3, [pc, #212]	; (175a0 <__ieee754_pow+0x1c0>)
   174ca:	429f      	cmp	r7, r3
   174cc:	dd6e      	ble.n	175ac <__ieee754_pow+0x1cc>
   174ce:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   174d2:	429f      	cmp	r7, r3
   174d4:	f340 83e8 	ble.w	17ca8 <__ieee754_pow+0x8c8>
   174d8:	4b32      	ldr	r3, [pc, #200]	; (175a4 <__ieee754_pow+0x1c4>)
   174da:	429e      	cmp	r6, r3
   174dc:	dd4e      	ble.n	1757c <__ieee754_pow+0x19c>
   174de:	f1ba 0f00 	cmp.w	sl, #0
   174e2:	dd4e      	ble.n	17582 <__ieee754_pow+0x1a2>
   174e4:	a328      	add	r3, pc, #160	; (adr r3, 17588 <__ieee754_pow+0x1a8>)
   174e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   174ea:	4610      	mov	r0, r2
   174ec:	4619      	mov	r1, r3
   174ee:	f001 f855 	bl	1859c <__aeabi_dmul>
   174f2:	e7b7      	b.n	17464 <__ieee754_pow+0x84>
   174f4:	f1ba 0f00 	cmp.w	sl, #0
   174f8:	f2c0 843c 	blt.w	17d74 <__ieee754_pow+0x994>
   174fc:	4640      	mov	r0, r8
   174fe:	4649      	mov	r1, r9
   17500:	e7b0      	b.n	17464 <__ieee754_pow+0x84>
   17502:	f1be 0f00 	cmp.w	lr, #0
   17506:	d082      	beq.n	1740e <__ieee754_pow+0x2e>
   17508:	e7a3      	b.n	17452 <__ieee754_pow+0x72>
   1750a:	4b27      	ldr	r3, [pc, #156]	; (175a8 <__ieee754_pow+0x1c8>)
   1750c:	429f      	cmp	r7, r3
   1750e:	dc28      	bgt.n	17562 <__ieee754_pow+0x182>
   17510:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   17514:	429f      	cmp	r7, r3
   17516:	dd80      	ble.n	1741a <__ieee754_pow+0x3a>
   17518:	153b      	asrs	r3, r7, #20
   1751a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1751e:	2b14      	cmp	r3, #20
   17520:	f340 843e 	ble.w	17da0 <__ieee754_pow+0x9c0>
   17524:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   17528:	fa2e f203 	lsr.w	r2, lr, r3
   1752c:	fa02 f303 	lsl.w	r3, r2, r3
   17530:	459e      	cmp	lr, r3
   17532:	f47f af72 	bne.w	1741a <__ieee754_pow+0x3a>
   17536:	f002 0201 	and.w	r2, r2, #1
   1753a:	f1c2 0402 	rsb	r4, r2, #2
   1753e:	e76d      	b.n	1741c <__ieee754_pow+0x3c>
   17540:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   17544:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   17548:	ea53 030b 	orrs.w	r3, r3, fp
   1754c:	d088      	beq.n	17460 <__ieee754_pow+0x80>
   1754e:	4b15      	ldr	r3, [pc, #84]	; (175a4 <__ieee754_pow+0x1c4>)
   17550:	429e      	cmp	r6, r3
   17552:	f340 8332 	ble.w	17bba <__ieee754_pow+0x7da>
   17556:	f1ba 0f00 	cmp.w	sl, #0
   1755a:	db12      	blt.n	17582 <__ieee754_pow+0x1a2>
   1755c:	e9dd 0100 	ldrd	r0, r1, [sp]
   17560:	e780      	b.n	17464 <__ieee754_pow+0x84>
   17562:	2402      	movs	r4, #2
   17564:	e75a      	b.n	1741c <__ieee754_pow+0x3c>
   17566:	4642      	mov	r2, r8
   17568:	464b      	mov	r3, r9
   1756a:	4640      	mov	r0, r8
   1756c:	4649      	mov	r1, r9
   1756e:	f000 fe61 	bl	18234 <__aeabi_dsub>
   17572:	4602      	mov	r2, r0
   17574:	460b      	mov	r3, r1
   17576:	f001 f93b 	bl	187f0 <__aeabi_ddiv>
   1757a:	e773      	b.n	17464 <__ieee754_pow+0x84>
   1757c:	f1ba 0f00 	cmp.w	sl, #0
   17580:	dbb0      	blt.n	174e4 <__ieee754_pow+0x104>
   17582:	2000      	movs	r0, #0
   17584:	2100      	movs	r1, #0
   17586:	e76d      	b.n	17464 <__ieee754_pow+0x84>
   17588:	8800759c 	.word	0x8800759c
   1758c:	7e37e43c 	.word	0x7e37e43c
   17590:	7ff00000 	.word	0x7ff00000
   17594:	3ff00000 	.word	0x3ff00000
   17598:	3fe00000 	.word	0x3fe00000
   1759c:	0001a41c 	.word	0x0001a41c
   175a0:	41e00000 	.word	0x41e00000
   175a4:	3fefffff 	.word	0x3fefffff
   175a8:	433fffff 	.word	0x433fffff
   175ac:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   175b0:	f04f 0200 	mov.w	r2, #0
   175b4:	da05      	bge.n	175c2 <__ieee754_pow+0x1e2>
   175b6:	4bd4      	ldr	r3, [pc, #848]	; (17908 <__ieee754_pow+0x528>)
   175b8:	f000 fff0 	bl	1859c <__aeabi_dmul>
   175bc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   175c0:	460e      	mov	r6, r1
   175c2:	1533      	asrs	r3, r6, #20
   175c4:	4fd1      	ldr	r7, [pc, #836]	; (1790c <__ieee754_pow+0x52c>)
   175c6:	f3c6 0613 	ubfx	r6, r6, #0, #20
   175ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   175ce:	4413      	add	r3, r2
   175d0:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   175d4:	42be      	cmp	r6, r7
   175d6:	461a      	mov	r2, r3
   175d8:	930d      	str	r3, [sp, #52]	; 0x34
   175da:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   175de:	f340 8321 	ble.w	17c24 <__ieee754_pow+0x844>
   175e2:	4bcb      	ldr	r3, [pc, #812]	; (17910 <__ieee754_pow+0x530>)
   175e4:	429e      	cmp	r6, r3
   175e6:	f340 83fd 	ble.w	17de4 <__ieee754_pow+0xa04>
   175ea:	4613      	mov	r3, r2
   175ec:	3301      	adds	r3, #1
   175ee:	930d      	str	r3, [sp, #52]	; 0x34
   175f0:	4bc8      	ldr	r3, [pc, #800]	; (17914 <__ieee754_pow+0x534>)
   175f2:	2200      	movs	r2, #0
   175f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   175f8:	2700      	movs	r7, #0
   175fa:	2600      	movs	r6, #0
   175fc:	e9cd 6708 	strd	r6, r7, [sp, #32]
   17600:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   17604:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   17608:	2700      	movs	r7, #0
   1760a:	4602      	mov	r2, r0
   1760c:	4653      	mov	r3, sl
   1760e:	4651      	mov	r1, sl
   17610:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   17614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   17618:	f000 fe0c 	bl	18234 <__aeabi_dsub>
   1761c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   17620:	4680      	mov	r8, r0
   17622:	4689      	mov	r9, r1
   17624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17628:	f000 fe06 	bl	18238 <__adddf3>
   1762c:	4602      	mov	r2, r0
   1762e:	460b      	mov	r3, r1
   17630:	2000      	movs	r0, #0
   17632:	49b8      	ldr	r1, [pc, #736]	; (17914 <__ieee754_pow+0x534>)
   17634:	f001 f8dc 	bl	187f0 <__aeabi_ddiv>
   17638:	460a      	mov	r2, r1
   1763a:	4601      	mov	r1, r0
   1763c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   17640:	4613      	mov	r3, r2
   17642:	4649      	mov	r1, r9
   17644:	4602      	mov	r2, r0
   17646:	4640      	mov	r0, r8
   17648:	f000 ffa8 	bl	1859c <__aeabi_dmul>
   1764c:	ea4f 036a 	mov.w	r3, sl, asr #1
   17650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17654:	468c      	mov	ip, r1
   17656:	4683      	mov	fp, r0
   17658:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1765c:	e9cd bc04 	strd	fp, ip, [sp, #16]
   17660:	46da      	mov	sl, fp
   17662:	468b      	mov	fp, r1
   17664:	19d9      	adds	r1, r3, r7
   17666:	2300      	movs	r3, #0
   17668:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1766c:	9302      	str	r3, [sp, #8]
   1766e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   17672:	2000      	movs	r0, #0
   17674:	4606      	mov	r6, r0
   17676:	460f      	mov	r7, r1
   17678:	4602      	mov	r2, r0
   1767a:	460b      	mov	r3, r1
   1767c:	4650      	mov	r0, sl
   1767e:	4659      	mov	r1, fp
   17680:	f000 ff8c 	bl	1859c <__aeabi_dmul>
   17684:	4602      	mov	r2, r0
   17686:	460b      	mov	r3, r1
   17688:	4640      	mov	r0, r8
   1768a:	4649      	mov	r1, r9
   1768c:	f000 fdd2 	bl	18234 <__aeabi_dsub>
   17690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   17694:	4680      	mov	r8, r0
   17696:	4689      	mov	r9, r1
   17698:	4630      	mov	r0, r6
   1769a:	4639      	mov	r1, r7
   1769c:	f000 fdca 	bl	18234 <__aeabi_dsub>
   176a0:	4602      	mov	r2, r0
   176a2:	460b      	mov	r3, r1
   176a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   176a8:	f000 fdc4 	bl	18234 <__aeabi_dsub>
   176ac:	4652      	mov	r2, sl
   176ae:	465b      	mov	r3, fp
   176b0:	f000 ff74 	bl	1859c <__aeabi_dmul>
   176b4:	4602      	mov	r2, r0
   176b6:	460b      	mov	r3, r1
   176b8:	4640      	mov	r0, r8
   176ba:	4649      	mov	r1, r9
   176bc:	f000 fdba 	bl	18234 <__aeabi_dsub>
   176c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   176c4:	f000 ff6a 	bl	1859c <__aeabi_dmul>
   176c8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   176cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   176d0:	4632      	mov	r2, r6
   176d2:	463b      	mov	r3, r7
   176d4:	4630      	mov	r0, r6
   176d6:	4639      	mov	r1, r7
   176d8:	f000 ff60 	bl	1859c <__aeabi_dmul>
   176dc:	a378      	add	r3, pc, #480	; (adr r3, 178c0 <__ieee754_pow+0x4e0>)
   176de:	e9d3 2300 	ldrd	r2, r3, [r3]
   176e2:	4606      	mov	r6, r0
   176e4:	460f      	mov	r7, r1
   176e6:	f000 ff59 	bl	1859c <__aeabi_dmul>
   176ea:	a377      	add	r3, pc, #476	; (adr r3, 178c8 <__ieee754_pow+0x4e8>)
   176ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   176f0:	f000 fda2 	bl	18238 <__adddf3>
   176f4:	4632      	mov	r2, r6
   176f6:	463b      	mov	r3, r7
   176f8:	f000 ff50 	bl	1859c <__aeabi_dmul>
   176fc:	a374      	add	r3, pc, #464	; (adr r3, 178d0 <__ieee754_pow+0x4f0>)
   176fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   17702:	f000 fd99 	bl	18238 <__adddf3>
   17706:	4632      	mov	r2, r6
   17708:	463b      	mov	r3, r7
   1770a:	f000 ff47 	bl	1859c <__aeabi_dmul>
   1770e:	a372      	add	r3, pc, #456	; (adr r3, 178d8 <__ieee754_pow+0x4f8>)
   17710:	e9d3 2300 	ldrd	r2, r3, [r3]
   17714:	f000 fd90 	bl	18238 <__adddf3>
   17718:	4632      	mov	r2, r6
   1771a:	463b      	mov	r3, r7
   1771c:	f000 ff3e 	bl	1859c <__aeabi_dmul>
   17720:	a36f      	add	r3, pc, #444	; (adr r3, 178e0 <__ieee754_pow+0x500>)
   17722:	e9d3 2300 	ldrd	r2, r3, [r3]
   17726:	f000 fd87 	bl	18238 <__adddf3>
   1772a:	4632      	mov	r2, r6
   1772c:	463b      	mov	r3, r7
   1772e:	f000 ff35 	bl	1859c <__aeabi_dmul>
   17732:	a36d      	add	r3, pc, #436	; (adr r3, 178e8 <__ieee754_pow+0x508>)
   17734:	e9d3 2300 	ldrd	r2, r3, [r3]
   17738:	f000 fd7e 	bl	18238 <__adddf3>
   1773c:	4632      	mov	r2, r6
   1773e:	4680      	mov	r8, r0
   17740:	4689      	mov	r9, r1
   17742:	463b      	mov	r3, r7
   17744:	4630      	mov	r0, r6
   17746:	4639      	mov	r1, r7
   17748:	f000 ff28 	bl	1859c <__aeabi_dmul>
   1774c:	4602      	mov	r2, r0
   1774e:	460b      	mov	r3, r1
   17750:	4640      	mov	r0, r8
   17752:	4649      	mov	r1, r9
   17754:	f000 ff22 	bl	1859c <__aeabi_dmul>
   17758:	4652      	mov	r2, sl
   1775a:	4606      	mov	r6, r0
   1775c:	460f      	mov	r7, r1
   1775e:	465b      	mov	r3, fp
   17760:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   17764:	f000 fd68 	bl	18238 <__adddf3>
   17768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1776c:	f000 ff16 	bl	1859c <__aeabi_dmul>
   17770:	4632      	mov	r2, r6
   17772:	463b      	mov	r3, r7
   17774:	f000 fd60 	bl	18238 <__adddf3>
   17778:	4652      	mov	r2, sl
   1777a:	4680      	mov	r8, r0
   1777c:	4689      	mov	r9, r1
   1777e:	465b      	mov	r3, fp
   17780:	4650      	mov	r0, sl
   17782:	4659      	mov	r1, fp
   17784:	f000 ff0a 	bl	1859c <__aeabi_dmul>
   17788:	2200      	movs	r2, #0
   1778a:	4b63      	ldr	r3, [pc, #396]	; (17918 <__ieee754_pow+0x538>)
   1778c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   17790:	f000 fd52 	bl	18238 <__adddf3>
   17794:	4642      	mov	r2, r8
   17796:	464b      	mov	r3, r9
   17798:	f000 fd4e 	bl	18238 <__adddf3>
   1779c:	9802      	ldr	r0, [sp, #8]
   1779e:	460f      	mov	r7, r1
   177a0:	4606      	mov	r6, r0
   177a2:	4632      	mov	r2, r6
   177a4:	463b      	mov	r3, r7
   177a6:	4650      	mov	r0, sl
   177a8:	4659      	mov	r1, fp
   177aa:	f000 fef7 	bl	1859c <__aeabi_dmul>
   177ae:	2200      	movs	r2, #0
   177b0:	4682      	mov	sl, r0
   177b2:	468b      	mov	fp, r1
   177b4:	4b58      	ldr	r3, [pc, #352]	; (17918 <__ieee754_pow+0x538>)
   177b6:	4630      	mov	r0, r6
   177b8:	4639      	mov	r1, r7
   177ba:	f000 fd3b 	bl	18234 <__aeabi_dsub>
   177be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   177c2:	f000 fd37 	bl	18234 <__aeabi_dsub>
   177c6:	4602      	mov	r2, r0
   177c8:	460b      	mov	r3, r1
   177ca:	4640      	mov	r0, r8
   177cc:	4649      	mov	r1, r9
   177ce:	f000 fd31 	bl	18234 <__aeabi_dsub>
   177d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   177d6:	f000 fee1 	bl	1859c <__aeabi_dmul>
   177da:	4632      	mov	r2, r6
   177dc:	4680      	mov	r8, r0
   177de:	4689      	mov	r9, r1
   177e0:	463b      	mov	r3, r7
   177e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   177e6:	f000 fed9 	bl	1859c <__aeabi_dmul>
   177ea:	4602      	mov	r2, r0
   177ec:	460b      	mov	r3, r1
   177ee:	4640      	mov	r0, r8
   177f0:	4649      	mov	r1, r9
   177f2:	f000 fd21 	bl	18238 <__adddf3>
   177f6:	4680      	mov	r8, r0
   177f8:	4689      	mov	r9, r1
   177fa:	4602      	mov	r2, r0
   177fc:	460b      	mov	r3, r1
   177fe:	4650      	mov	r0, sl
   17800:	4659      	mov	r1, fp
   17802:	e9cd ab04 	strd	sl, fp, [sp, #16]
   17806:	f000 fd17 	bl	18238 <__adddf3>
   1780a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1780e:	a338      	add	r3, pc, #224	; (adr r3, 178f0 <__ieee754_pow+0x510>)
   17810:	e9d3 2300 	ldrd	r2, r3, [r3]
   17814:	4650      	mov	r0, sl
   17816:	460f      	mov	r7, r1
   17818:	f000 fec0 	bl	1859c <__aeabi_dmul>
   1781c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17820:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17824:	4639      	mov	r1, r7
   17826:	4650      	mov	r0, sl
   17828:	f000 fd04 	bl	18234 <__aeabi_dsub>
   1782c:	4602      	mov	r2, r0
   1782e:	460b      	mov	r3, r1
   17830:	4640      	mov	r0, r8
   17832:	4649      	mov	r1, r9
   17834:	f000 fcfe 	bl	18234 <__aeabi_dsub>
   17838:	a32f      	add	r3, pc, #188	; (adr r3, 178f8 <__ieee754_pow+0x518>)
   1783a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1783e:	f000 fead 	bl	1859c <__aeabi_dmul>
   17842:	a32f      	add	r3, pc, #188	; (adr r3, 17900 <__ieee754_pow+0x520>)
   17844:	e9d3 2300 	ldrd	r2, r3, [r3]
   17848:	4680      	mov	r8, r0
   1784a:	4689      	mov	r9, r1
   1784c:	4650      	mov	r0, sl
   1784e:	4639      	mov	r1, r7
   17850:	f000 fea4 	bl	1859c <__aeabi_dmul>
   17854:	4602      	mov	r2, r0
   17856:	460b      	mov	r3, r1
   17858:	4640      	mov	r0, r8
   1785a:	4649      	mov	r1, r9
   1785c:	f000 fcec 	bl	18238 <__adddf3>
   17860:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   17864:	f000 fce8 	bl	18238 <__adddf3>
   17868:	4680      	mov	r8, r0
   1786a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1786c:	4689      	mov	r9, r1
   1786e:	f000 fe2f 	bl	184d0 <__aeabi_i2d>
   17872:	4642      	mov	r2, r8
   17874:	4606      	mov	r6, r0
   17876:	460f      	mov	r7, r1
   17878:	464b      	mov	r3, r9
   1787a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1787e:	f000 fcdb 	bl	18238 <__adddf3>
   17882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17886:	f000 fcd7 	bl	18238 <__adddf3>
   1788a:	4632      	mov	r2, r6
   1788c:	463b      	mov	r3, r7
   1788e:	f000 fcd3 	bl	18238 <__adddf3>
   17892:	4632      	mov	r2, r6
   17894:	463b      	mov	r3, r7
   17896:	4650      	mov	r0, sl
   17898:	468b      	mov	fp, r1
   1789a:	f000 fccb 	bl	18234 <__aeabi_dsub>
   1789e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   178a2:	f000 fcc7 	bl	18234 <__aeabi_dsub>
   178a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   178aa:	f000 fcc3 	bl	18234 <__aeabi_dsub>
   178ae:	4602      	mov	r2, r0
   178b0:	460b      	mov	r3, r1
   178b2:	4640      	mov	r0, r8
   178b4:	4649      	mov	r1, r9
   178b6:	f000 fcbd 	bl	18234 <__aeabi_dsub>
   178ba:	4680      	mov	r8, r0
   178bc:	e02e      	b.n	1791c <__ieee754_pow+0x53c>
   178be:	bf00      	nop
   178c0:	4a454eef 	.word	0x4a454eef
   178c4:	3fca7e28 	.word	0x3fca7e28
   178c8:	93c9db65 	.word	0x93c9db65
   178cc:	3fcd864a 	.word	0x3fcd864a
   178d0:	a91d4101 	.word	0xa91d4101
   178d4:	3fd17460 	.word	0x3fd17460
   178d8:	518f264d 	.word	0x518f264d
   178dc:	3fd55555 	.word	0x3fd55555
   178e0:	db6fabff 	.word	0xdb6fabff
   178e4:	3fdb6db6 	.word	0x3fdb6db6
   178e8:	33333303 	.word	0x33333303
   178ec:	3fe33333 	.word	0x3fe33333
   178f0:	e0000000 	.word	0xe0000000
   178f4:	3feec709 	.word	0x3feec709
   178f8:	dc3a03fd 	.word	0xdc3a03fd
   178fc:	3feec709 	.word	0x3feec709
   17900:	145b01f5 	.word	0x145b01f5
   17904:	be3e2fe0 	.word	0xbe3e2fe0
   17908:	43400000 	.word	0x43400000
   1790c:	0003988e 	.word	0x0003988e
   17910:	000bb679 	.word	0x000bb679
   17914:	3ff00000 	.word	0x3ff00000
   17918:	40080000 	.word	0x40080000
   1791c:	4689      	mov	r9, r1
   1791e:	3c01      	subs	r4, #1
   17920:	ea54 0305 	orrs.w	r3, r4, r5
   17924:	e9dd 0100 	ldrd	r0, r1, [sp]
   17928:	bf14      	ite	ne
   1792a:	4cd9      	ldrne	r4, [pc, #868]	; (17c90 <__ieee754_pow+0x8b0>)
   1792c:	4cd9      	ldreq	r4, [pc, #868]	; (17c94 <__ieee754_pow+0x8b4>)
   1792e:	2300      	movs	r3, #0
   17930:	e9cd 3404 	strd	r3, r4, [sp, #16]
   17934:	4603      	mov	r3, r0
   17936:	460c      	mov	r4, r1
   17938:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1793c:	2300      	movs	r3, #0
   1793e:	9302      	str	r3, [sp, #8]
   17940:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   17944:	4622      	mov	r2, r4
   17946:	462b      	mov	r3, r5
   17948:	f000 fc74 	bl	18234 <__aeabi_dsub>
   1794c:	4652      	mov	r2, sl
   1794e:	465b      	mov	r3, fp
   17950:	f000 fe24 	bl	1859c <__aeabi_dmul>
   17954:	e9dd 2300 	ldrd	r2, r3, [sp]
   17958:	4606      	mov	r6, r0
   1795a:	460f      	mov	r7, r1
   1795c:	4640      	mov	r0, r8
   1795e:	4649      	mov	r1, r9
   17960:	f000 fe1c 	bl	1859c <__aeabi_dmul>
   17964:	4602      	mov	r2, r0
   17966:	460b      	mov	r3, r1
   17968:	4630      	mov	r0, r6
   1796a:	4639      	mov	r1, r7
   1796c:	f000 fc64 	bl	18238 <__adddf3>
   17970:	4622      	mov	r2, r4
   17972:	4680      	mov	r8, r0
   17974:	4689      	mov	r9, r1
   17976:	462b      	mov	r3, r5
   17978:	4650      	mov	r0, sl
   1797a:	4659      	mov	r1, fp
   1797c:	e9cd 8900 	strd	r8, r9, [sp]
   17980:	f000 fe0c 	bl	1859c <__aeabi_dmul>
   17984:	460b      	mov	r3, r1
   17986:	4602      	mov	r2, r0
   17988:	4606      	mov	r6, r0
   1798a:	460f      	mov	r7, r1
   1798c:	4640      	mov	r0, r8
   1798e:	4649      	mov	r1, r9
   17990:	f000 fc52 	bl	18238 <__adddf3>
   17994:	4bc0      	ldr	r3, [pc, #768]	; (17c98 <__ieee754_pow+0x8b8>)
   17996:	4299      	cmp	r1, r3
   17998:	4604      	mov	r4, r0
   1799a:	460d      	mov	r5, r1
   1799c:	468a      	mov	sl, r1
   1799e:	f340 8116 	ble.w	17bce <__ieee754_pow+0x7ee>
   179a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   179a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   179aa:	4303      	orrs	r3, r0
   179ac:	f040 81ea 	bne.w	17d84 <__ieee754_pow+0x9a4>
   179b0:	a3a3      	add	r3, pc, #652	; (adr r3, 17c40 <__ieee754_pow+0x860>)
   179b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   179b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   179ba:	f000 fc3d 	bl	18238 <__adddf3>
   179be:	4632      	mov	r2, r6
   179c0:	4680      	mov	r8, r0
   179c2:	4689      	mov	r9, r1
   179c4:	463b      	mov	r3, r7
   179c6:	4620      	mov	r0, r4
   179c8:	4629      	mov	r1, r5
   179ca:	f000 fc33 	bl	18234 <__aeabi_dsub>
   179ce:	4602      	mov	r2, r0
   179d0:	460b      	mov	r3, r1
   179d2:	4640      	mov	r0, r8
   179d4:	4649      	mov	r1, r9
   179d6:	f001 f871 	bl	18abc <__aeabi_dcmpgt>
   179da:	2800      	cmp	r0, #0
   179dc:	f040 81d2 	bne.w	17d84 <__ieee754_pow+0x9a4>
   179e0:	46a8      	mov	r8, r5
   179e2:	ea4f 5328 	mov.w	r3, r8, asr #20
   179e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   179ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   179ee:	fa42 f303 	asr.w	r3, r2, r3
   179f2:	4453      	add	r3, sl
   179f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   179f8:	4da8      	ldr	r5, [pc, #672]	; (17c9c <__ieee754_pow+0x8bc>)
   179fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   179fe:	4115      	asrs	r5, r2
   17a00:	f3c3 0413 	ubfx	r4, r3, #0, #20
   17a04:	ea23 0105 	bic.w	r1, r3, r5
   17a08:	2000      	movs	r0, #0
   17a0a:	f1c2 0b14 	rsb	fp, r2, #20
   17a0e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   17a12:	f1ba 0f00 	cmp.w	sl, #0
   17a16:	4602      	mov	r2, r0
   17a18:	460b      	mov	r3, r1
   17a1a:	fa44 fb0b 	asr.w	fp, r4, fp
   17a1e:	4630      	mov	r0, r6
   17a20:	4639      	mov	r1, r7
   17a22:	bfb8      	it	lt
   17a24:	f1cb 0b00 	rsblt	fp, fp, #0
   17a28:	f000 fc04 	bl	18234 <__aeabi_dsub>
   17a2c:	4602      	mov	r2, r0
   17a2e:	460b      	mov	r3, r1
   17a30:	4606      	mov	r6, r0
   17a32:	460f      	mov	r7, r1
   17a34:	e9dd 0100 	ldrd	r0, r1, [sp]
   17a38:	f000 fbfe 	bl	18238 <__adddf3>
   17a3c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   17a40:	460d      	mov	r5, r1
   17a42:	2400      	movs	r4, #0
   17a44:	a380      	add	r3, pc, #512	; (adr r3, 17c48 <__ieee754_pow+0x868>)
   17a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   17a4a:	4620      	mov	r0, r4
   17a4c:	4629      	mov	r1, r5
   17a4e:	f000 fda5 	bl	1859c <__aeabi_dmul>
   17a52:	4632      	mov	r2, r6
   17a54:	4680      	mov	r8, r0
   17a56:	4689      	mov	r9, r1
   17a58:	463b      	mov	r3, r7
   17a5a:	4620      	mov	r0, r4
   17a5c:	4629      	mov	r1, r5
   17a5e:	f000 fbe9 	bl	18234 <__aeabi_dsub>
   17a62:	4602      	mov	r2, r0
   17a64:	460b      	mov	r3, r1
   17a66:	e9dd 0100 	ldrd	r0, r1, [sp]
   17a6a:	f000 fbe3 	bl	18234 <__aeabi_dsub>
   17a6e:	a378      	add	r3, pc, #480	; (adr r3, 17c50 <__ieee754_pow+0x870>)
   17a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   17a74:	f000 fd92 	bl	1859c <__aeabi_dmul>
   17a78:	a377      	add	r3, pc, #476	; (adr r3, 17c58 <__ieee754_pow+0x878>)
   17a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17a7e:	4606      	mov	r6, r0
   17a80:	460f      	mov	r7, r1
   17a82:	4620      	mov	r0, r4
   17a84:	4629      	mov	r1, r5
   17a86:	f000 fd89 	bl	1859c <__aeabi_dmul>
   17a8a:	4602      	mov	r2, r0
   17a8c:	460b      	mov	r3, r1
   17a8e:	4630      	mov	r0, r6
   17a90:	4639      	mov	r1, r7
   17a92:	f000 fbd1 	bl	18238 <__adddf3>
   17a96:	4606      	mov	r6, r0
   17a98:	460f      	mov	r7, r1
   17a9a:	4602      	mov	r2, r0
   17a9c:	460b      	mov	r3, r1
   17a9e:	4640      	mov	r0, r8
   17aa0:	4649      	mov	r1, r9
   17aa2:	f000 fbc9 	bl	18238 <__adddf3>
   17aa6:	4642      	mov	r2, r8
   17aa8:	464b      	mov	r3, r9
   17aaa:	4604      	mov	r4, r0
   17aac:	460d      	mov	r5, r1
   17aae:	f000 fbc1 	bl	18234 <__aeabi_dsub>
   17ab2:	4602      	mov	r2, r0
   17ab4:	460b      	mov	r3, r1
   17ab6:	4630      	mov	r0, r6
   17ab8:	4639      	mov	r1, r7
   17aba:	f000 fbbb 	bl	18234 <__aeabi_dsub>
   17abe:	4622      	mov	r2, r4
   17ac0:	4680      	mov	r8, r0
   17ac2:	4689      	mov	r9, r1
   17ac4:	462b      	mov	r3, r5
   17ac6:	4620      	mov	r0, r4
   17ac8:	4629      	mov	r1, r5
   17aca:	f000 fd67 	bl	1859c <__aeabi_dmul>
   17ace:	a364      	add	r3, pc, #400	; (adr r3, 17c60 <__ieee754_pow+0x880>)
   17ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   17ad4:	4606      	mov	r6, r0
   17ad6:	460f      	mov	r7, r1
   17ad8:	f000 fd60 	bl	1859c <__aeabi_dmul>
   17adc:	a362      	add	r3, pc, #392	; (adr r3, 17c68 <__ieee754_pow+0x888>)
   17ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   17ae2:	f000 fba7 	bl	18234 <__aeabi_dsub>
   17ae6:	4632      	mov	r2, r6
   17ae8:	463b      	mov	r3, r7
   17aea:	f000 fd57 	bl	1859c <__aeabi_dmul>
   17aee:	a360      	add	r3, pc, #384	; (adr r3, 17c70 <__ieee754_pow+0x890>)
   17af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   17af4:	f000 fba0 	bl	18238 <__adddf3>
   17af8:	4632      	mov	r2, r6
   17afa:	463b      	mov	r3, r7
   17afc:	f000 fd4e 	bl	1859c <__aeabi_dmul>
   17b00:	a35d      	add	r3, pc, #372	; (adr r3, 17c78 <__ieee754_pow+0x898>)
   17b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   17b06:	f000 fb95 	bl	18234 <__aeabi_dsub>
   17b0a:	4632      	mov	r2, r6
   17b0c:	463b      	mov	r3, r7
   17b0e:	f000 fd45 	bl	1859c <__aeabi_dmul>
   17b12:	a35b      	add	r3, pc, #364	; (adr r3, 17c80 <__ieee754_pow+0x8a0>)
   17b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   17b18:	f000 fb8e 	bl	18238 <__adddf3>
   17b1c:	4632      	mov	r2, r6
   17b1e:	463b      	mov	r3, r7
   17b20:	f000 fd3c 	bl	1859c <__aeabi_dmul>
   17b24:	4602      	mov	r2, r0
   17b26:	460b      	mov	r3, r1
   17b28:	4620      	mov	r0, r4
   17b2a:	4629      	mov	r1, r5
   17b2c:	f000 fb82 	bl	18234 <__aeabi_dsub>
   17b30:	4606      	mov	r6, r0
   17b32:	460f      	mov	r7, r1
   17b34:	4602      	mov	r2, r0
   17b36:	460b      	mov	r3, r1
   17b38:	4620      	mov	r0, r4
   17b3a:	4629      	mov	r1, r5
   17b3c:	f000 fd2e 	bl	1859c <__aeabi_dmul>
   17b40:	2200      	movs	r2, #0
   17b42:	e9cd 0100 	strd	r0, r1, [sp]
   17b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b4a:	4630      	mov	r0, r6
   17b4c:	4639      	mov	r1, r7
   17b4e:	f000 fb71 	bl	18234 <__aeabi_dsub>
   17b52:	4602      	mov	r2, r0
   17b54:	460b      	mov	r3, r1
   17b56:	e9dd 0100 	ldrd	r0, r1, [sp]
   17b5a:	f000 fe49 	bl	187f0 <__aeabi_ddiv>
   17b5e:	4642      	mov	r2, r8
   17b60:	4606      	mov	r6, r0
   17b62:	460f      	mov	r7, r1
   17b64:	464b      	mov	r3, r9
   17b66:	4620      	mov	r0, r4
   17b68:	4629      	mov	r1, r5
   17b6a:	f000 fd17 	bl	1859c <__aeabi_dmul>
   17b6e:	4642      	mov	r2, r8
   17b70:	464b      	mov	r3, r9
   17b72:	f000 fb61 	bl	18238 <__adddf3>
   17b76:	4602      	mov	r2, r0
   17b78:	460b      	mov	r3, r1
   17b7a:	4630      	mov	r0, r6
   17b7c:	4639      	mov	r1, r7
   17b7e:	f000 fb59 	bl	18234 <__aeabi_dsub>
   17b82:	4622      	mov	r2, r4
   17b84:	462b      	mov	r3, r5
   17b86:	f000 fb55 	bl	18234 <__aeabi_dsub>
   17b8a:	4602      	mov	r2, r0
   17b8c:	460b      	mov	r3, r1
   17b8e:	2000      	movs	r0, #0
   17b90:	493f      	ldr	r1, [pc, #252]	; (17c90 <__ieee754_pow+0x8b0>)
   17b92:	f000 fb4f 	bl	18234 <__aeabi_dsub>
   17b96:	448a      	add	sl, r1
   17b98:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   17b9c:	f2c0 8133 	blt.w	17e06 <__ieee754_pow+0xa26>
   17ba0:	4651      	mov	r1, sl
   17ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17ba6:	f000 fcf9 	bl	1859c <__aeabi_dmul>
   17baa:	e45b      	b.n	17464 <__ieee754_pow+0x84>
   17bac:	4642      	mov	r2, r8
   17bae:	4640      	mov	r0, r8
   17bb0:	464b      	mov	r3, r9
   17bb2:	4649      	mov	r1, r9
   17bb4:	f000 fcf2 	bl	1859c <__aeabi_dmul>
   17bb8:	e454      	b.n	17464 <__ieee754_pow+0x84>
   17bba:	f1ba 0f00 	cmp.w	sl, #0
   17bbe:	f6bf ace0 	bge.w	17582 <__ieee754_pow+0x1a2>
   17bc2:	e9dd 3400 	ldrd	r3, r4, [sp]
   17bc6:	4618      	mov	r0, r3
   17bc8:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   17bcc:	e44a      	b.n	17464 <__ieee754_pow+0x84>
   17bce:	4b34      	ldr	r3, [pc, #208]	; (17ca0 <__ieee754_pow+0x8c0>)
   17bd0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   17bd4:	4598      	cmp	r8, r3
   17bd6:	f340 80f2 	ble.w	17dbe <__ieee754_pow+0x9de>
   17bda:	4b32      	ldr	r3, [pc, #200]	; (17ca4 <__ieee754_pow+0x8c4>)
   17bdc:	440b      	add	r3, r1
   17bde:	4303      	orrs	r3, r0
   17be0:	d10c      	bne.n	17bfc <__ieee754_pow+0x81c>
   17be2:	4632      	mov	r2, r6
   17be4:	463b      	mov	r3, r7
   17be6:	f000 fb25 	bl	18234 <__aeabi_dsub>
   17bea:	4602      	mov	r2, r0
   17bec:	460b      	mov	r3, r1
   17bee:	e9dd 0100 	ldrd	r0, r1, [sp]
   17bf2:	f000 ff4f 	bl	18a94 <__aeabi_dcmple>
   17bf6:	2800      	cmp	r0, #0
   17bf8:	f43f aef3 	beq.w	179e2 <__ieee754_pow+0x602>
   17bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   17c00:	a321      	add	r3, pc, #132	; (adr r3, 17c88 <__ieee754_pow+0x8a8>)
   17c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c06:	f000 fcc9 	bl	1859c <__aeabi_dmul>
   17c0a:	a31f      	add	r3, pc, #124	; (adr r3, 17c88 <__ieee754_pow+0x8a8>)
   17c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c10:	f000 fcc4 	bl	1859c <__aeabi_dmul>
   17c14:	e426      	b.n	17464 <__ieee754_pow+0x84>
   17c16:	4602      	mov	r2, r0
   17c18:	460b      	mov	r3, r1
   17c1a:	2000      	movs	r0, #0
   17c1c:	491c      	ldr	r1, [pc, #112]	; (17c90 <__ieee754_pow+0x8b0>)
   17c1e:	f000 fde7 	bl	187f0 <__aeabi_ddiv>
   17c22:	e43c      	b.n	1749e <__ieee754_pow+0xbe>
   17c24:	2200      	movs	r2, #0
   17c26:	2300      	movs	r3, #0
   17c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
   17c2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   17c30:	4b17      	ldr	r3, [pc, #92]	; (17c90 <__ieee754_pow+0x8b0>)
   17c32:	2200      	movs	r2, #0
   17c34:	2700      	movs	r7, #0
   17c36:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17c3a:	e4e6      	b.n	1760a <__ieee754_pow+0x22a>
   17c3c:	f3af 8000 	nop.w
   17c40:	652b82fe 	.word	0x652b82fe
   17c44:	3c971547 	.word	0x3c971547
   17c48:	00000000 	.word	0x00000000
   17c4c:	3fe62e43 	.word	0x3fe62e43
   17c50:	fefa39ef 	.word	0xfefa39ef
   17c54:	3fe62e42 	.word	0x3fe62e42
   17c58:	0ca86c39 	.word	0x0ca86c39
   17c5c:	be205c61 	.word	0xbe205c61
   17c60:	72bea4d0 	.word	0x72bea4d0
   17c64:	3e663769 	.word	0x3e663769
   17c68:	c5d26bf1 	.word	0xc5d26bf1
   17c6c:	3ebbbd41 	.word	0x3ebbbd41
   17c70:	af25de2c 	.word	0xaf25de2c
   17c74:	3f11566a 	.word	0x3f11566a
   17c78:	16bebd93 	.word	0x16bebd93
   17c7c:	3f66c16c 	.word	0x3f66c16c
   17c80:	5555553e 	.word	0x5555553e
   17c84:	3fc55555 	.word	0x3fc55555
   17c88:	c2f8f359 	.word	0xc2f8f359
   17c8c:	01a56e1f 	.word	0x01a56e1f
   17c90:	3ff00000 	.word	0x3ff00000
   17c94:	bff00000 	.word	0xbff00000
   17c98:	408fffff 	.word	0x408fffff
   17c9c:	000fffff 	.word	0x000fffff
   17ca0:	4090cbff 	.word	0x4090cbff
   17ca4:	3f6f3400 	.word	0x3f6f3400
   17ca8:	4b6b      	ldr	r3, [pc, #428]	; (17e58 <__ieee754_pow+0xa78>)
   17caa:	429e      	cmp	r6, r3
   17cac:	f77f ac66 	ble.w	1757c <__ieee754_pow+0x19c>
   17cb0:	4b6a      	ldr	r3, [pc, #424]	; (17e5c <__ieee754_pow+0xa7c>)
   17cb2:	429e      	cmp	r6, r3
   17cb4:	f73f ac13 	bgt.w	174de <__ieee754_pow+0xfe>
   17cb8:	2200      	movs	r2, #0
   17cba:	4b68      	ldr	r3, [pc, #416]	; (17e5c <__ieee754_pow+0xa7c>)
   17cbc:	f000 faba 	bl	18234 <__aeabi_dsub>
   17cc0:	a357      	add	r3, pc, #348	; (adr r3, 17e20 <__ieee754_pow+0xa40>)
   17cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   17cc6:	4606      	mov	r6, r0
   17cc8:	460f      	mov	r7, r1
   17cca:	f000 fc67 	bl	1859c <__aeabi_dmul>
   17cce:	a356      	add	r3, pc, #344	; (adr r3, 17e28 <__ieee754_pow+0xa48>)
   17cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   17cd4:	4680      	mov	r8, r0
   17cd6:	4689      	mov	r9, r1
   17cd8:	4630      	mov	r0, r6
   17cda:	4639      	mov	r1, r7
   17cdc:	f000 fc5e 	bl	1859c <__aeabi_dmul>
   17ce0:	2200      	movs	r2, #0
   17ce2:	4682      	mov	sl, r0
   17ce4:	468b      	mov	fp, r1
   17ce6:	4b5e      	ldr	r3, [pc, #376]	; (17e60 <__ieee754_pow+0xa80>)
   17ce8:	4630      	mov	r0, r6
   17cea:	4639      	mov	r1, r7
   17cec:	f000 fc56 	bl	1859c <__aeabi_dmul>
   17cf0:	4602      	mov	r2, r0
   17cf2:	460b      	mov	r3, r1
   17cf4:	a14e      	add	r1, pc, #312	; (adr r1, 17e30 <__ieee754_pow+0xa50>)
   17cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   17cfa:	f000 fa9b 	bl	18234 <__aeabi_dsub>
   17cfe:	4632      	mov	r2, r6
   17d00:	463b      	mov	r3, r7
   17d02:	f000 fc4b 	bl	1859c <__aeabi_dmul>
   17d06:	4602      	mov	r2, r0
   17d08:	460b      	mov	r3, r1
   17d0a:	2000      	movs	r0, #0
   17d0c:	4955      	ldr	r1, [pc, #340]	; (17e64 <__ieee754_pow+0xa84>)
   17d0e:	f000 fa91 	bl	18234 <__aeabi_dsub>
   17d12:	4632      	mov	r2, r6
   17d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17d18:	463b      	mov	r3, r7
   17d1a:	4630      	mov	r0, r6
   17d1c:	4639      	mov	r1, r7
   17d1e:	f000 fc3d 	bl	1859c <__aeabi_dmul>
   17d22:	4602      	mov	r2, r0
   17d24:	460b      	mov	r3, r1
   17d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17d2a:	f000 fc37 	bl	1859c <__aeabi_dmul>
   17d2e:	a342      	add	r3, pc, #264	; (adr r3, 17e38 <__ieee754_pow+0xa58>)
   17d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d34:	f000 fc32 	bl	1859c <__aeabi_dmul>
   17d38:	4602      	mov	r2, r0
   17d3a:	460b      	mov	r3, r1
   17d3c:	4650      	mov	r0, sl
   17d3e:	4659      	mov	r1, fp
   17d40:	f000 fa78 	bl	18234 <__aeabi_dsub>
   17d44:	4602      	mov	r2, r0
   17d46:	460b      	mov	r3, r1
   17d48:	4606      	mov	r6, r0
   17d4a:	460f      	mov	r7, r1
   17d4c:	4640      	mov	r0, r8
   17d4e:	4649      	mov	r1, r9
   17d50:	f000 fa72 	bl	18238 <__adddf3>
   17d54:	4642      	mov	r2, r8
   17d56:	464b      	mov	r3, r9
   17d58:	2000      	movs	r0, #0
   17d5a:	4682      	mov	sl, r0
   17d5c:	468b      	mov	fp, r1
   17d5e:	f000 fa69 	bl	18234 <__aeabi_dsub>
   17d62:	4602      	mov	r2, r0
   17d64:	460b      	mov	r3, r1
   17d66:	4630      	mov	r0, r6
   17d68:	4639      	mov	r1, r7
   17d6a:	f000 fa63 	bl	18234 <__aeabi_dsub>
   17d6e:	4680      	mov	r8, r0
   17d70:	4689      	mov	r9, r1
   17d72:	e5d4      	b.n	1791e <__ieee754_pow+0x53e>
   17d74:	4642      	mov	r2, r8
   17d76:	464b      	mov	r3, r9
   17d78:	2000      	movs	r0, #0
   17d7a:	4938      	ldr	r1, [pc, #224]	; (17e5c <__ieee754_pow+0xa7c>)
   17d7c:	f000 fd38 	bl	187f0 <__aeabi_ddiv>
   17d80:	f7ff bb70 	b.w	17464 <__ieee754_pow+0x84>
   17d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   17d88:	a32d      	add	r3, pc, #180	; (adr r3, 17e40 <__ieee754_pow+0xa60>)
   17d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d8e:	f000 fc05 	bl	1859c <__aeabi_dmul>
   17d92:	a32b      	add	r3, pc, #172	; (adr r3, 17e40 <__ieee754_pow+0xa60>)
   17d94:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d98:	f000 fc00 	bl	1859c <__aeabi_dmul>
   17d9c:	f7ff bb62 	b.w	17464 <__ieee754_pow+0x84>
   17da0:	f1be 0f00 	cmp.w	lr, #0
   17da4:	f47f ab69 	bne.w	1747a <__ieee754_pow+0x9a>
   17da8:	f1c3 0314 	rsb	r3, r3, #20
   17dac:	fa47 f203 	asr.w	r2, r7, r3
   17db0:	fa02 f303 	lsl.w	r3, r2, r3
   17db4:	429f      	cmp	r7, r3
   17db6:	d02a      	beq.n	17e0e <__ieee754_pow+0xa2e>
   17db8:	4674      	mov	r4, lr
   17dba:	f7ff bb36 	b.w	1742a <__ieee754_pow+0x4a>
   17dbe:	4b29      	ldr	r3, [pc, #164]	; (17e64 <__ieee754_pow+0xa84>)
   17dc0:	4598      	cmp	r8, r3
   17dc2:	f73f ae0e 	bgt.w	179e2 <__ieee754_pow+0x602>
   17dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17dca:	4692      	mov	sl, r2
   17dcc:	4693      	mov	fp, r2
   17dce:	e638      	b.n	17a42 <__ieee754_pow+0x662>
   17dd0:	4602      	mov	r2, r0
   17dd2:	460b      	mov	r3, r1
   17dd4:	f000 fa2e 	bl	18234 <__aeabi_dsub>
   17dd8:	4602      	mov	r2, r0
   17dda:	460b      	mov	r3, r1
   17ddc:	f000 fd08 	bl	187f0 <__aeabi_ddiv>
   17de0:	f7ff bb40 	b.w	17464 <__ieee754_pow+0x84>
   17de4:	a318      	add	r3, pc, #96	; (adr r3, 17e48 <__ieee754_pow+0xa68>)
   17de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   17dea:	e9cd 2308 	strd	r2, r3, [sp, #32]
   17dee:	a318      	add	r3, pc, #96	; (adr r3, 17e50 <__ieee754_pow+0xa70>)
   17df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   17df4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   17df8:	4b1b      	ldr	r3, [pc, #108]	; (17e68 <__ieee754_pow+0xa88>)
   17dfa:	2200      	movs	r2, #0
   17dfc:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   17e00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17e04:	e401      	b.n	1760a <__ieee754_pow+0x22a>
   17e06:	465a      	mov	r2, fp
   17e08:	f000 f98a 	bl	18120 <scalbn>
   17e0c:	e6c9      	b.n	17ba2 <__ieee754_pow+0x7c2>
   17e0e:	f002 0201 	and.w	r2, r2, #1
   17e12:	f1c2 0402 	rsb	r4, r2, #2
   17e16:	f7ff bb08 	b.w	1742a <__ieee754_pow+0x4a>
   17e1a:	bf00      	nop
   17e1c:	f3af 8000 	nop.w
   17e20:	60000000 	.word	0x60000000
   17e24:	3ff71547 	.word	0x3ff71547
   17e28:	f85ddf44 	.word	0xf85ddf44
   17e2c:	3e54ae0b 	.word	0x3e54ae0b
   17e30:	55555555 	.word	0x55555555
   17e34:	3fd55555 	.word	0x3fd55555
   17e38:	652b82fe 	.word	0x652b82fe
   17e3c:	3ff71547 	.word	0x3ff71547
   17e40:	8800759c 	.word	0x8800759c
   17e44:	7e37e43c 	.word	0x7e37e43c
   17e48:	40000000 	.word	0x40000000
   17e4c:	3fe2b803 	.word	0x3fe2b803
   17e50:	43cfd006 	.word	0x43cfd006
   17e54:	3e4cfdeb 	.word	0x3e4cfdeb
   17e58:	3feffffe 	.word	0x3feffffe
   17e5c:	3ff00000 	.word	0x3ff00000
   17e60:	3fd00000 	.word	0x3fd00000
   17e64:	3fe00000 	.word	0x3fe00000
   17e68:	3ff80000 	.word	0x3ff80000

00017e6c <__ieee754_sqrt>:
   17e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e70:	4f5b      	ldr	r7, [pc, #364]	; (17fe0 <__ieee754_sqrt+0x174>)
   17e72:	438f      	bics	r7, r1
   17e74:	4605      	mov	r5, r0
   17e76:	460c      	mov	r4, r1
   17e78:	f000 8092 	beq.w	17fa0 <__ieee754_sqrt+0x134>
   17e7c:	2900      	cmp	r1, #0
   17e7e:	460b      	mov	r3, r1
   17e80:	4602      	mov	r2, r0
   17e82:	dd6f      	ble.n	17f64 <__ieee754_sqrt+0xf8>
   17e84:	150f      	asrs	r7, r1, #20
   17e86:	d07b      	beq.n	17f80 <__ieee754_sqrt+0x114>
   17e88:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   17e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   17e90:	07f8      	lsls	r0, r7, #31
   17e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17e96:	d45c      	bmi.n	17f52 <__ieee754_sqrt+0xe6>
   17e98:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   17e9c:	2600      	movs	r6, #0
   17e9e:	440b      	add	r3, r1
   17ea0:	107f      	asrs	r7, r7, #1
   17ea2:	0052      	lsls	r2, r2, #1
   17ea4:	46b6      	mov	lr, r6
   17ea6:	2016      	movs	r0, #22
   17ea8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   17eac:	eb0e 0401 	add.w	r4, lr, r1
   17eb0:	429c      	cmp	r4, r3
   17eb2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   17eb6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   17eba:	dc03      	bgt.n	17ec4 <__ieee754_sqrt+0x58>
   17ebc:	1b1b      	subs	r3, r3, r4
   17ebe:	eb04 0e01 	add.w	lr, r4, r1
   17ec2:	440e      	add	r6, r1
   17ec4:	3801      	subs	r0, #1
   17ec6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   17eca:	ea4f 0151 	mov.w	r1, r1, lsr #1
   17ece:	d1ed      	bne.n	17eac <__ieee754_sqrt+0x40>
   17ed0:	4684      	mov	ip, r0
   17ed2:	2420      	movs	r4, #32
   17ed4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   17ed8:	e009      	b.n	17eee <__ieee754_sqrt+0x82>
   17eda:	d020      	beq.n	17f1e <__ieee754_sqrt+0xb2>
   17edc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   17ee0:	3c01      	subs	r4, #1
   17ee2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   17ee6:	442b      	add	r3, r5
   17ee8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   17eec:	d020      	beq.n	17f30 <__ieee754_sqrt+0xc4>
   17eee:	4573      	cmp	r3, lr
   17ef0:	eb01 050c 	add.w	r5, r1, ip
   17ef4:	ddf1      	ble.n	17eda <__ieee754_sqrt+0x6e>
   17ef6:	2d00      	cmp	r5, #0
   17ef8:	eb05 0c01 	add.w	ip, r5, r1
   17efc:	db09      	blt.n	17f12 <__ieee754_sqrt+0xa6>
   17efe:	46f0      	mov	r8, lr
   17f00:	4295      	cmp	r5, r2
   17f02:	eba3 030e 	sub.w	r3, r3, lr
   17f06:	d900      	bls.n	17f0a <__ieee754_sqrt+0x9e>
   17f08:	3b01      	subs	r3, #1
   17f0a:	1b52      	subs	r2, r2, r5
   17f0c:	4408      	add	r0, r1
   17f0e:	46c6      	mov	lr, r8
   17f10:	e7e4      	b.n	17edc <__ieee754_sqrt+0x70>
   17f12:	f1bc 0f00 	cmp.w	ip, #0
   17f16:	dbf2      	blt.n	17efe <__ieee754_sqrt+0x92>
   17f18:	f10e 0801 	add.w	r8, lr, #1
   17f1c:	e7f0      	b.n	17f00 <__ieee754_sqrt+0x94>
   17f1e:	4295      	cmp	r5, r2
   17f20:	d8dc      	bhi.n	17edc <__ieee754_sqrt+0x70>
   17f22:	2d00      	cmp	r5, #0
   17f24:	eb05 0c01 	add.w	ip, r5, r1
   17f28:	db44      	blt.n	17fb4 <__ieee754_sqrt+0x148>
   17f2a:	4698      	mov	r8, r3
   17f2c:	2300      	movs	r3, #0
   17f2e:	e7ec      	b.n	17f0a <__ieee754_sqrt+0x9e>
   17f30:	4313      	orrs	r3, r2
   17f32:	d113      	bne.n	17f5c <__ieee754_sqrt+0xf0>
   17f34:	0840      	lsrs	r0, r0, #1
   17f36:	1073      	asrs	r3, r6, #1
   17f38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   17f3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   17f40:	07f2      	lsls	r2, r6, #31
   17f42:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   17f46:	bf48      	it	mi
   17f48:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   17f4c:	4649      	mov	r1, r9
   17f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17f52:	005b      	lsls	r3, r3, #1
   17f54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   17f58:	0052      	lsls	r2, r2, #1
   17f5a:	e79d      	b.n	17e98 <__ieee754_sqrt+0x2c>
   17f5c:	1c41      	adds	r1, r0, #1
   17f5e:	d02d      	beq.n	17fbc <__ieee754_sqrt+0x150>
   17f60:	3001      	adds	r0, #1
   17f62:	e7e7      	b.n	17f34 <__ieee754_sqrt+0xc8>
   17f64:	4606      	mov	r6, r0
   17f66:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   17f6a:	433e      	orrs	r6, r7
   17f6c:	d0ef      	beq.n	17f4e <__ieee754_sqrt+0xe2>
   17f6e:	bb69      	cbnz	r1, 17fcc <__ieee754_sqrt+0x160>
   17f70:	460f      	mov	r7, r1
   17f72:	0ad3      	lsrs	r3, r2, #11
   17f74:	3f15      	subs	r7, #21
   17f76:	0552      	lsls	r2, r2, #21
   17f78:	2b00      	cmp	r3, #0
   17f7a:	d0fa      	beq.n	17f72 <__ieee754_sqrt+0x106>
   17f7c:	02de      	lsls	r6, r3, #11
   17f7e:	d420      	bmi.n	17fc2 <__ieee754_sqrt+0x156>
   17f80:	2400      	movs	r4, #0
   17f82:	e000      	b.n	17f86 <__ieee754_sqrt+0x11a>
   17f84:	4604      	mov	r4, r0
   17f86:	005b      	lsls	r3, r3, #1
   17f88:	02dd      	lsls	r5, r3, #11
   17f8a:	f104 0001 	add.w	r0, r4, #1
   17f8e:	d5f9      	bpl.n	17f84 <__ieee754_sqrt+0x118>
   17f90:	f1c0 0120 	rsb	r1, r0, #32
   17f94:	fa22 f101 	lsr.w	r1, r2, r1
   17f98:	430b      	orrs	r3, r1
   17f9a:	1b3f      	subs	r7, r7, r4
   17f9c:	4082      	lsls	r2, r0
   17f9e:	e773      	b.n	17e88 <__ieee754_sqrt+0x1c>
   17fa0:	4602      	mov	r2, r0
   17fa2:	460b      	mov	r3, r1
   17fa4:	f000 fafa 	bl	1859c <__aeabi_dmul>
   17fa8:	462a      	mov	r2, r5
   17faa:	4623      	mov	r3, r4
   17fac:	f000 f944 	bl	18238 <__adddf3>
   17fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17fb4:	f1bc 0f00 	cmp.w	ip, #0
   17fb8:	daae      	bge.n	17f18 <__ieee754_sqrt+0xac>
   17fba:	e7b6      	b.n	17f2a <__ieee754_sqrt+0xbe>
   17fbc:	3601      	adds	r6, #1
   17fbe:	4620      	mov	r0, r4
   17fc0:	e7b9      	b.n	17f36 <__ieee754_sqrt+0xca>
   17fc2:	2000      	movs	r0, #0
   17fc4:	2120      	movs	r1, #32
   17fc6:	f04f 34ff 	mov.w	r4, #4294967295
   17fca:	e7e3      	b.n	17f94 <__ieee754_sqrt+0x128>
   17fcc:	4602      	mov	r2, r0
   17fce:	460b      	mov	r3, r1
   17fd0:	f000 f930 	bl	18234 <__aeabi_dsub>
   17fd4:	4602      	mov	r2, r0
   17fd6:	460b      	mov	r3, r1
   17fd8:	f000 fc0a 	bl	187f0 <__aeabi_ddiv>
   17fdc:	e7b7      	b.n	17f4e <__ieee754_sqrt+0xe2>
   17fde:	bf00      	nop
   17fe0:	7ff00000 	.word	0x7ff00000

00017fe4 <fabs>:
   17fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17fe8:	4770      	bx	lr
   17fea:	bf00      	nop

00017fec <finite>:
   17fec:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   17ff0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   17ff4:	0fc0      	lsrs	r0, r0, #31
   17ff6:	4770      	bx	lr

00017ff8 <matherr>:
   17ff8:	2000      	movs	r0, #0
   17ffa:	4770      	bx	lr

00017ffc <nan>:
   17ffc:	2000      	movs	r0, #0
   17ffe:	4901      	ldr	r1, [pc, #4]	; (18004 <nan+0x8>)
   18000:	4770      	bx	lr
   18002:	bf00      	nop
   18004:	7ff80000 	.word	0x7ff80000

00018008 <rint>:
   18008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1800a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1800e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   18012:	2e13      	cmp	r6, #19
   18014:	b083      	sub	sp, #12
   18016:	4602      	mov	r2, r0
   18018:	460b      	mov	r3, r1
   1801a:	460c      	mov	r4, r1
   1801c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   18020:	4607      	mov	r7, r0
   18022:	dc2e      	bgt.n	18082 <rint+0x7a>
   18024:	2e00      	cmp	r6, #0
   18026:	db49      	blt.n	180bc <rint+0xb4>
   18028:	493a      	ldr	r1, [pc, #232]	; (18114 <rint+0x10c>)
   1802a:	4131      	asrs	r1, r6
   1802c:	ea03 0001 	and.w	r0, r3, r1
   18030:	4310      	orrs	r0, r2
   18032:	d02b      	beq.n	1808c <rint+0x84>
   18034:	0849      	lsrs	r1, r1, #1
   18036:	400b      	ands	r3, r1
   18038:	ea53 0702 	orrs.w	r7, r3, r2
   1803c:	d00c      	beq.n	18058 <rint+0x50>
   1803e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18042:	2e13      	cmp	r6, #19
   18044:	ea24 0101 	bic.w	r1, r4, r1
   18048:	fa43 f406 	asr.w	r4, r3, r6
   1804c:	ea44 0401 	orr.w	r4, r4, r1
   18050:	bf0c      	ite	eq
   18052:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   18056:	2700      	movne	r7, #0
   18058:	4b2f      	ldr	r3, [pc, #188]	; (18118 <rint+0x110>)
   1805a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1805e:	4621      	mov	r1, r4
   18060:	e9d5 4500 	ldrd	r4, r5, [r5]
   18064:	4638      	mov	r0, r7
   18066:	4622      	mov	r2, r4
   18068:	462b      	mov	r3, r5
   1806a:	f000 f8e5 	bl	18238 <__adddf3>
   1806e:	e9cd 0100 	strd	r0, r1, [sp]
   18072:	4622      	mov	r2, r4
   18074:	462b      	mov	r3, r5
   18076:	e9dd 0100 	ldrd	r0, r1, [sp]
   1807a:	f000 f8db 	bl	18234 <__aeabi_dsub>
   1807e:	b003      	add	sp, #12
   18080:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18082:	2e33      	cmp	r6, #51	; 0x33
   18084:	dd06      	ble.n	18094 <rint+0x8c>
   18086:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1808a:	d040      	beq.n	1810e <rint+0x106>
   1808c:	4610      	mov	r0, r2
   1808e:	4619      	mov	r1, r3
   18090:	b003      	add	sp, #12
   18092:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18094:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   18098:	f04f 31ff 	mov.w	r1, #4294967295
   1809c:	fa21 f10e 	lsr.w	r1, r1, lr
   180a0:	4208      	tst	r0, r1
   180a2:	d0f3      	beq.n	1808c <rint+0x84>
   180a4:	0849      	lsrs	r1, r1, #1
   180a6:	4208      	tst	r0, r1
   180a8:	d0d6      	beq.n	18058 <rint+0x50>
   180aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   180ae:	ea20 0101 	bic.w	r1, r0, r1
   180b2:	fa43 fe0e 	asr.w	lr, r3, lr
   180b6:	ea4e 0701 	orr.w	r7, lr, r1
   180ba:	e7cd      	b.n	18058 <rint+0x50>
   180bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   180c0:	4301      	orrs	r1, r0
   180c2:	d0e3      	beq.n	1808c <rint+0x84>
   180c4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   180c8:	4e13      	ldr	r6, [pc, #76]	; (18118 <rint+0x110>)
   180ca:	4301      	orrs	r1, r0
   180cc:	f1c1 0c00 	rsb	ip, r1, #0
   180d0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   180d4:	e9d6 6700 	ldrd	r6, r7, [r6]
   180d8:	ea4c 0c01 	orr.w	ip, ip, r1
   180dc:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   180e0:	0c5c      	lsrs	r4, r3, #17
   180e2:	0464      	lsls	r4, r4, #17
   180e4:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   180e8:	ea43 0104 	orr.w	r1, r3, r4
   180ec:	4632      	mov	r2, r6
   180ee:	463b      	mov	r3, r7
   180f0:	f000 f8a2 	bl	18238 <__adddf3>
   180f4:	e9cd 0100 	strd	r0, r1, [sp]
   180f8:	4632      	mov	r2, r6
   180fa:	463b      	mov	r3, r7
   180fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   18100:	f000 f898 	bl	18234 <__aeabi_dsub>
   18104:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   18108:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1810c:	e7c0      	b.n	18090 <rint+0x88>
   1810e:	f000 f893 	bl	18238 <__adddf3>
   18112:	e7bd      	b.n	18090 <rint+0x88>
   18114:	000fffff 	.word	0x000fffff
   18118:	0001a998 	.word	0x0001a998
   1811c:	00000000 	.word	0x00000000

00018120 <scalbn>:
   18120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18122:	f3c1 560a 	ubfx	r6, r1, #20, #11
   18126:	4604      	mov	r4, r0
   18128:	460d      	mov	r5, r1
   1812a:	460b      	mov	r3, r1
   1812c:	4617      	mov	r7, r2
   1812e:	bb0e      	cbnz	r6, 18174 <scalbn+0x54>
   18130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   18134:	4303      	orrs	r3, r0
   18136:	4686      	mov	lr, r0
   18138:	d025      	beq.n	18186 <scalbn+0x66>
   1813a:	2200      	movs	r2, #0
   1813c:	4b34      	ldr	r3, [pc, #208]	; (18210 <scalbn+0xf0>)
   1813e:	f000 fa2d 	bl	1859c <__aeabi_dmul>
   18142:	4a34      	ldr	r2, [pc, #208]	; (18214 <scalbn+0xf4>)
   18144:	4297      	cmp	r7, r2
   18146:	4604      	mov	r4, r0
   18148:	460d      	mov	r5, r1
   1814a:	460b      	mov	r3, r1
   1814c:	db2a      	blt.n	181a4 <scalbn+0x84>
   1814e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   18152:	3e36      	subs	r6, #54	; 0x36
   18154:	443e      	add	r6, r7
   18156:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1815a:	4296      	cmp	r6, r2
   1815c:	dc28      	bgt.n	181b0 <scalbn+0x90>
   1815e:	2e00      	cmp	r6, #0
   18160:	dd12      	ble.n	18188 <scalbn+0x68>
   18162:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   18166:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1816a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1816e:	4620      	mov	r0, r4
   18170:	4629      	mov	r1, r5
   18172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18174:	f240 72ff 	movw	r2, #2047	; 0x7ff
   18178:	4296      	cmp	r6, r2
   1817a:	d1eb      	bne.n	18154 <scalbn+0x34>
   1817c:	4602      	mov	r2, r0
   1817e:	460b      	mov	r3, r1
   18180:	f000 f85a 	bl	18238 <__adddf3>
   18184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18188:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1818c:	da1d      	bge.n	181ca <scalbn+0xaa>
   1818e:	f24c 3350 	movw	r3, #50000	; 0xc350
   18192:	429f      	cmp	r7, r3
   18194:	4622      	mov	r2, r4
   18196:	462b      	mov	r3, r5
   18198:	dc25      	bgt.n	181e6 <scalbn+0xc6>
   1819a:	a119      	add	r1, pc, #100	; (adr r1, 18200 <scalbn+0xe0>)
   1819c:	e9d1 0100 	ldrd	r0, r1, [r1]
   181a0:	f000 f83c 	bl	1821c <copysign>
   181a4:	a316      	add	r3, pc, #88	; (adr r3, 18200 <scalbn+0xe0>)
   181a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   181aa:	f000 f9f7 	bl	1859c <__aeabi_dmul>
   181ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181b0:	4622      	mov	r2, r4
   181b2:	462b      	mov	r3, r5
   181b4:	a114      	add	r1, pc, #80	; (adr r1, 18208 <scalbn+0xe8>)
   181b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   181ba:	f000 f82f 	bl	1821c <copysign>
   181be:	a312      	add	r3, pc, #72	; (adr r3, 18208 <scalbn+0xe8>)
   181c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   181c4:	f000 f9ea 	bl	1859c <__aeabi_dmul>
   181c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   181ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   181d2:	3636      	adds	r6, #54	; 0x36
   181d4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   181d8:	4620      	mov	r0, r4
   181da:	4629      	mov	r1, r5
   181dc:	2200      	movs	r2, #0
   181de:	4b0e      	ldr	r3, [pc, #56]	; (18218 <scalbn+0xf8>)
   181e0:	f000 f9dc 	bl	1859c <__aeabi_dmul>
   181e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181e6:	a108      	add	r1, pc, #32	; (adr r1, 18208 <scalbn+0xe8>)
   181e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   181ec:	f000 f816 	bl	1821c <copysign>
   181f0:	a305      	add	r3, pc, #20	; (adr r3, 18208 <scalbn+0xe8>)
   181f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   181f6:	f000 f9d1 	bl	1859c <__aeabi_dmul>
   181fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181fc:	f3af 8000 	nop.w
   18200:	c2f8f359 	.word	0xc2f8f359
   18204:	01a56e1f 	.word	0x01a56e1f
   18208:	8800759c 	.word	0x8800759c
   1820c:	7e37e43c 	.word	0x7e37e43c
   18210:	43500000 	.word	0x43500000
   18214:	ffff3cb0 	.word	0xffff3cb0
   18218:	3c900000 	.word	0x3c900000

0001821c <copysign>:
   1821c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   18220:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   18224:	ea42 0103 	orr.w	r1, r2, r3
   18228:	4770      	bx	lr
   1822a:	bf00      	nop

0001822c <__aeabi_drsub>:
   1822c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18230:	e002      	b.n	18238 <__adddf3>
   18232:	bf00      	nop

00018234 <__aeabi_dsub>:
   18234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00018238 <__adddf3>:
   18238:	b530      	push	{r4, r5, lr}
   1823a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1823e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18242:	ea94 0f05 	teq	r4, r5
   18246:	bf08      	it	eq
   18248:	ea90 0f02 	teqeq	r0, r2
   1824c:	bf1f      	itttt	ne
   1824e:	ea54 0c00 	orrsne.w	ip, r4, r0
   18252:	ea55 0c02 	orrsne.w	ip, r5, r2
   18256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1825a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1825e:	f000 80e2 	beq.w	18426 <__adddf3+0x1ee>
   18262:	ea4f 5454 	mov.w	r4, r4, lsr #21
   18266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1826a:	bfb8      	it	lt
   1826c:	426d      	neglt	r5, r5
   1826e:	dd0c      	ble.n	1828a <__adddf3+0x52>
   18270:	442c      	add	r4, r5
   18272:	ea80 0202 	eor.w	r2, r0, r2
   18276:	ea81 0303 	eor.w	r3, r1, r3
   1827a:	ea82 0000 	eor.w	r0, r2, r0
   1827e:	ea83 0101 	eor.w	r1, r3, r1
   18282:	ea80 0202 	eor.w	r2, r0, r2
   18286:	ea81 0303 	eor.w	r3, r1, r3
   1828a:	2d36      	cmp	r5, #54	; 0x36
   1828c:	bf88      	it	hi
   1828e:	bd30      	pophi	{r4, r5, pc}
   18290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18294:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1829c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   182a0:	d002      	beq.n	182a8 <__adddf3+0x70>
   182a2:	4240      	negs	r0, r0
   182a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   182a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   182ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   182b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   182b4:	d002      	beq.n	182bc <__adddf3+0x84>
   182b6:	4252      	negs	r2, r2
   182b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   182bc:	ea94 0f05 	teq	r4, r5
   182c0:	f000 80a7 	beq.w	18412 <__adddf3+0x1da>
   182c4:	f1a4 0401 	sub.w	r4, r4, #1
   182c8:	f1d5 0e20 	rsbs	lr, r5, #32
   182cc:	db0d      	blt.n	182ea <__adddf3+0xb2>
   182ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   182d2:	fa22 f205 	lsr.w	r2, r2, r5
   182d6:	1880      	adds	r0, r0, r2
   182d8:	f141 0100 	adc.w	r1, r1, #0
   182dc:	fa03 f20e 	lsl.w	r2, r3, lr
   182e0:	1880      	adds	r0, r0, r2
   182e2:	fa43 f305 	asr.w	r3, r3, r5
   182e6:	4159      	adcs	r1, r3
   182e8:	e00e      	b.n	18308 <__adddf3+0xd0>
   182ea:	f1a5 0520 	sub.w	r5, r5, #32
   182ee:	f10e 0e20 	add.w	lr, lr, #32
   182f2:	2a01      	cmp	r2, #1
   182f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   182f8:	bf28      	it	cs
   182fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   182fe:	fa43 f305 	asr.w	r3, r3, r5
   18302:	18c0      	adds	r0, r0, r3
   18304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1830c:	d507      	bpl.n	1831e <__adddf3+0xe6>
   1830e:	f04f 0e00 	mov.w	lr, #0
   18312:	f1dc 0c00 	rsbs	ip, ip, #0
   18316:	eb7e 0000 	sbcs.w	r0, lr, r0
   1831a:	eb6e 0101 	sbc.w	r1, lr, r1
   1831e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18322:	d31b      	bcc.n	1835c <__adddf3+0x124>
   18324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   18328:	d30c      	bcc.n	18344 <__adddf3+0x10c>
   1832a:	0849      	lsrs	r1, r1, #1
   1832c:	ea5f 0030 	movs.w	r0, r0, rrx
   18330:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18334:	f104 0401 	add.w	r4, r4, #1
   18338:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1833c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18340:	f080 809a 	bcs.w	18478 <__adddf3+0x240>
   18344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18348:	bf08      	it	eq
   1834a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1834e:	f150 0000 	adcs.w	r0, r0, #0
   18352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18356:	ea41 0105 	orr.w	r1, r1, r5
   1835a:	bd30      	pop	{r4, r5, pc}
   1835c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18360:	4140      	adcs	r0, r0
   18362:	eb41 0101 	adc.w	r1, r1, r1
   18366:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1836a:	f1a4 0401 	sub.w	r4, r4, #1
   1836e:	d1e9      	bne.n	18344 <__adddf3+0x10c>
   18370:	f091 0f00 	teq	r1, #0
   18374:	bf04      	itt	eq
   18376:	4601      	moveq	r1, r0
   18378:	2000      	moveq	r0, #0
   1837a:	fab1 f381 	clz	r3, r1
   1837e:	bf08      	it	eq
   18380:	3320      	addeq	r3, #32
   18382:	f1a3 030b 	sub.w	r3, r3, #11
   18386:	f1b3 0220 	subs.w	r2, r3, #32
   1838a:	da0c      	bge.n	183a6 <__adddf3+0x16e>
   1838c:	320c      	adds	r2, #12
   1838e:	dd08      	ble.n	183a2 <__adddf3+0x16a>
   18390:	f102 0c14 	add.w	ip, r2, #20
   18394:	f1c2 020c 	rsb	r2, r2, #12
   18398:	fa01 f00c 	lsl.w	r0, r1, ip
   1839c:	fa21 f102 	lsr.w	r1, r1, r2
   183a0:	e00c      	b.n	183bc <__adddf3+0x184>
   183a2:	f102 0214 	add.w	r2, r2, #20
   183a6:	bfd8      	it	le
   183a8:	f1c2 0c20 	rsble	ip, r2, #32
   183ac:	fa01 f102 	lsl.w	r1, r1, r2
   183b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   183b4:	bfdc      	itt	le
   183b6:	ea41 010c 	orrle.w	r1, r1, ip
   183ba:	4090      	lslle	r0, r2
   183bc:	1ae4      	subs	r4, r4, r3
   183be:	bfa2      	ittt	ge
   183c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   183c4:	4329      	orrge	r1, r5
   183c6:	bd30      	popge	{r4, r5, pc}
   183c8:	ea6f 0404 	mvn.w	r4, r4
   183cc:	3c1f      	subs	r4, #31
   183ce:	da1c      	bge.n	1840a <__adddf3+0x1d2>
   183d0:	340c      	adds	r4, #12
   183d2:	dc0e      	bgt.n	183f2 <__adddf3+0x1ba>
   183d4:	f104 0414 	add.w	r4, r4, #20
   183d8:	f1c4 0220 	rsb	r2, r4, #32
   183dc:	fa20 f004 	lsr.w	r0, r0, r4
   183e0:	fa01 f302 	lsl.w	r3, r1, r2
   183e4:	ea40 0003 	orr.w	r0, r0, r3
   183e8:	fa21 f304 	lsr.w	r3, r1, r4
   183ec:	ea45 0103 	orr.w	r1, r5, r3
   183f0:	bd30      	pop	{r4, r5, pc}
   183f2:	f1c4 040c 	rsb	r4, r4, #12
   183f6:	f1c4 0220 	rsb	r2, r4, #32
   183fa:	fa20 f002 	lsr.w	r0, r0, r2
   183fe:	fa01 f304 	lsl.w	r3, r1, r4
   18402:	ea40 0003 	orr.w	r0, r0, r3
   18406:	4629      	mov	r1, r5
   18408:	bd30      	pop	{r4, r5, pc}
   1840a:	fa21 f004 	lsr.w	r0, r1, r4
   1840e:	4629      	mov	r1, r5
   18410:	bd30      	pop	{r4, r5, pc}
   18412:	f094 0f00 	teq	r4, #0
   18416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1841a:	bf06      	itte	eq
   1841c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18420:	3401      	addeq	r4, #1
   18422:	3d01      	subne	r5, #1
   18424:	e74e      	b.n	182c4 <__adddf3+0x8c>
   18426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1842a:	bf18      	it	ne
   1842c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18430:	d029      	beq.n	18486 <__adddf3+0x24e>
   18432:	ea94 0f05 	teq	r4, r5
   18436:	bf08      	it	eq
   18438:	ea90 0f02 	teqeq	r0, r2
   1843c:	d005      	beq.n	1844a <__adddf3+0x212>
   1843e:	ea54 0c00 	orrs.w	ip, r4, r0
   18442:	bf04      	itt	eq
   18444:	4619      	moveq	r1, r3
   18446:	4610      	moveq	r0, r2
   18448:	bd30      	pop	{r4, r5, pc}
   1844a:	ea91 0f03 	teq	r1, r3
   1844e:	bf1e      	ittt	ne
   18450:	2100      	movne	r1, #0
   18452:	2000      	movne	r0, #0
   18454:	bd30      	popne	{r4, r5, pc}
   18456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1845a:	d105      	bne.n	18468 <__adddf3+0x230>
   1845c:	0040      	lsls	r0, r0, #1
   1845e:	4149      	adcs	r1, r1
   18460:	bf28      	it	cs
   18462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   18466:	bd30      	pop	{r4, r5, pc}
   18468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1846c:	bf3c      	itt	cc
   1846e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18472:	bd30      	popcc	{r4, r5, pc}
   18474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1847c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18480:	f04f 0000 	mov.w	r0, #0
   18484:	bd30      	pop	{r4, r5, pc}
   18486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1848a:	bf1a      	itte	ne
   1848c:	4619      	movne	r1, r3
   1848e:	4610      	movne	r0, r2
   18490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18494:	bf1c      	itt	ne
   18496:	460b      	movne	r3, r1
   18498:	4602      	movne	r2, r0
   1849a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1849e:	bf06      	itte	eq
   184a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   184a4:	ea91 0f03 	teqeq	r1, r3
   184a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   184ac:	bd30      	pop	{r4, r5, pc}
   184ae:	bf00      	nop

000184b0 <__aeabi_ui2d>:
   184b0:	f090 0f00 	teq	r0, #0
   184b4:	bf04      	itt	eq
   184b6:	2100      	moveq	r1, #0
   184b8:	4770      	bxeq	lr
   184ba:	b530      	push	{r4, r5, lr}
   184bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   184c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   184c4:	f04f 0500 	mov.w	r5, #0
   184c8:	f04f 0100 	mov.w	r1, #0
   184cc:	e750      	b.n	18370 <__adddf3+0x138>
   184ce:	bf00      	nop

000184d0 <__aeabi_i2d>:
   184d0:	f090 0f00 	teq	r0, #0
   184d4:	bf04      	itt	eq
   184d6:	2100      	moveq	r1, #0
   184d8:	4770      	bxeq	lr
   184da:	b530      	push	{r4, r5, lr}
   184dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   184e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   184e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   184e8:	bf48      	it	mi
   184ea:	4240      	negmi	r0, r0
   184ec:	f04f 0100 	mov.w	r1, #0
   184f0:	e73e      	b.n	18370 <__adddf3+0x138>
   184f2:	bf00      	nop

000184f4 <__aeabi_f2d>:
   184f4:	0042      	lsls	r2, r0, #1
   184f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   184fa:	ea4f 0131 	mov.w	r1, r1, rrx
   184fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18502:	bf1f      	itttt	ne
   18504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   18508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1850c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18510:	4770      	bxne	lr
   18512:	f092 0f00 	teq	r2, #0
   18516:	bf14      	ite	ne
   18518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1851c:	4770      	bxeq	lr
   1851e:	b530      	push	{r4, r5, lr}
   18520:	f44f 7460 	mov.w	r4, #896	; 0x380
   18524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1852c:	e720      	b.n	18370 <__adddf3+0x138>
   1852e:	bf00      	nop

00018530 <__aeabi_ul2d>:
   18530:	ea50 0201 	orrs.w	r2, r0, r1
   18534:	bf08      	it	eq
   18536:	4770      	bxeq	lr
   18538:	b530      	push	{r4, r5, lr}
   1853a:	f04f 0500 	mov.w	r5, #0
   1853e:	e00a      	b.n	18556 <__aeabi_l2d+0x16>

00018540 <__aeabi_l2d>:
   18540:	ea50 0201 	orrs.w	r2, r0, r1
   18544:	bf08      	it	eq
   18546:	4770      	bxeq	lr
   18548:	b530      	push	{r4, r5, lr}
   1854a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1854e:	d502      	bpl.n	18556 <__aeabi_l2d+0x16>
   18550:	4240      	negs	r0, r0
   18552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18556:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1855a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1855e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   18562:	f43f aedc 	beq.w	1831e <__adddf3+0xe6>
   18566:	f04f 0203 	mov.w	r2, #3
   1856a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1856e:	bf18      	it	ne
   18570:	3203      	addne	r2, #3
   18572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18576:	bf18      	it	ne
   18578:	3203      	addne	r2, #3
   1857a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1857e:	f1c2 0320 	rsb	r3, r2, #32
   18582:	fa00 fc03 	lsl.w	ip, r0, r3
   18586:	fa20 f002 	lsr.w	r0, r0, r2
   1858a:	fa01 fe03 	lsl.w	lr, r1, r3
   1858e:	ea40 000e 	orr.w	r0, r0, lr
   18592:	fa21 f102 	lsr.w	r1, r1, r2
   18596:	4414      	add	r4, r2
   18598:	e6c1      	b.n	1831e <__adddf3+0xe6>
   1859a:	bf00      	nop

0001859c <__aeabi_dmul>:
   1859c:	b570      	push	{r4, r5, r6, lr}
   1859e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   185a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   185aa:	bf1d      	ittte	ne
   185ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   185b0:	ea94 0f0c 	teqne	r4, ip
   185b4:	ea95 0f0c 	teqne	r5, ip
   185b8:	f000 f8de 	bleq	18778 <__aeabi_dmul+0x1dc>
   185bc:	442c      	add	r4, r5
   185be:	ea81 0603 	eor.w	r6, r1, r3
   185c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   185c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   185ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   185ce:	bf18      	it	ne
   185d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   185d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   185d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   185dc:	d038      	beq.n	18650 <__aeabi_dmul+0xb4>
   185de:	fba0 ce02 	umull	ip, lr, r0, r2
   185e2:	f04f 0500 	mov.w	r5, #0
   185e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   185ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   185ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   185f2:	f04f 0600 	mov.w	r6, #0
   185f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   185fa:	f09c 0f00 	teq	ip, #0
   185fe:	bf18      	it	ne
   18600:	f04e 0e01 	orrne.w	lr, lr, #1
   18604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1860c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   18610:	d204      	bcs.n	1861c <__aeabi_dmul+0x80>
   18612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18616:	416d      	adcs	r5, r5
   18618:	eb46 0606 	adc.w	r6, r6, r6
   1861c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   18620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1862c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   18630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18634:	bf88      	it	hi
   18636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1863a:	d81e      	bhi.n	1867a <__aeabi_dmul+0xde>
   1863c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   18640:	bf08      	it	eq
   18642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18646:	f150 0000 	adcs.w	r0, r0, #0
   1864a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1864e:	bd70      	pop	{r4, r5, r6, pc}
   18650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18654:	ea46 0101 	orr.w	r1, r6, r1
   18658:	ea40 0002 	orr.w	r0, r0, r2
   1865c:	ea81 0103 	eor.w	r1, r1, r3
   18660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18664:	bfc2      	ittt	gt
   18666:	ebd4 050c 	rsbsgt	r5, r4, ip
   1866a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1866e:	bd70      	popgt	{r4, r5, r6, pc}
   18670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18674:	f04f 0e00 	mov.w	lr, #0
   18678:	3c01      	subs	r4, #1
   1867a:	f300 80ab 	bgt.w	187d4 <__aeabi_dmul+0x238>
   1867e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   18682:	bfde      	ittt	le
   18684:	2000      	movle	r0, #0
   18686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1868a:	bd70      	pople	{r4, r5, r6, pc}
   1868c:	f1c4 0400 	rsb	r4, r4, #0
   18690:	3c20      	subs	r4, #32
   18692:	da35      	bge.n	18700 <__aeabi_dmul+0x164>
   18694:	340c      	adds	r4, #12
   18696:	dc1b      	bgt.n	186d0 <__aeabi_dmul+0x134>
   18698:	f104 0414 	add.w	r4, r4, #20
   1869c:	f1c4 0520 	rsb	r5, r4, #32
   186a0:	fa00 f305 	lsl.w	r3, r0, r5
   186a4:	fa20 f004 	lsr.w	r0, r0, r4
   186a8:	fa01 f205 	lsl.w	r2, r1, r5
   186ac:	ea40 0002 	orr.w	r0, r0, r2
   186b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   186b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   186b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   186bc:	fa21 f604 	lsr.w	r6, r1, r4
   186c0:	eb42 0106 	adc.w	r1, r2, r6
   186c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   186c8:	bf08      	it	eq
   186ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   186ce:	bd70      	pop	{r4, r5, r6, pc}
   186d0:	f1c4 040c 	rsb	r4, r4, #12
   186d4:	f1c4 0520 	rsb	r5, r4, #32
   186d8:	fa00 f304 	lsl.w	r3, r0, r4
   186dc:	fa20 f005 	lsr.w	r0, r0, r5
   186e0:	fa01 f204 	lsl.w	r2, r1, r4
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   186ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   186f0:	f141 0100 	adc.w	r1, r1, #0
   186f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   186f8:	bf08      	it	eq
   186fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   186fe:	bd70      	pop	{r4, r5, r6, pc}
   18700:	f1c4 0520 	rsb	r5, r4, #32
   18704:	fa00 f205 	lsl.w	r2, r0, r5
   18708:	ea4e 0e02 	orr.w	lr, lr, r2
   1870c:	fa20 f304 	lsr.w	r3, r0, r4
   18710:	fa01 f205 	lsl.w	r2, r1, r5
   18714:	ea43 0302 	orr.w	r3, r3, r2
   18718:	fa21 f004 	lsr.w	r0, r1, r4
   1871c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18720:	fa21 f204 	lsr.w	r2, r1, r4
   18724:	ea20 0002 	bic.w	r0, r0, r2
   18728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1872c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18730:	bf08      	it	eq
   18732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18736:	bd70      	pop	{r4, r5, r6, pc}
   18738:	f094 0f00 	teq	r4, #0
   1873c:	d10f      	bne.n	1875e <__aeabi_dmul+0x1c2>
   1873e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   18742:	0040      	lsls	r0, r0, #1
   18744:	eb41 0101 	adc.w	r1, r1, r1
   18748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1874c:	bf08      	it	eq
   1874e:	3c01      	subeq	r4, #1
   18750:	d0f7      	beq.n	18742 <__aeabi_dmul+0x1a6>
   18752:	ea41 0106 	orr.w	r1, r1, r6
   18756:	f095 0f00 	teq	r5, #0
   1875a:	bf18      	it	ne
   1875c:	4770      	bxne	lr
   1875e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   18762:	0052      	lsls	r2, r2, #1
   18764:	eb43 0303 	adc.w	r3, r3, r3
   18768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1876c:	bf08      	it	eq
   1876e:	3d01      	subeq	r5, #1
   18770:	d0f7      	beq.n	18762 <__aeabi_dmul+0x1c6>
   18772:	ea43 0306 	orr.w	r3, r3, r6
   18776:	4770      	bx	lr
   18778:	ea94 0f0c 	teq	r4, ip
   1877c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18780:	bf18      	it	ne
   18782:	ea95 0f0c 	teqne	r5, ip
   18786:	d00c      	beq.n	187a2 <__aeabi_dmul+0x206>
   18788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1878c:	bf18      	it	ne
   1878e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18792:	d1d1      	bne.n	18738 <__aeabi_dmul+0x19c>
   18794:	ea81 0103 	eor.w	r1, r1, r3
   18798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1879c:	f04f 0000 	mov.w	r0, #0
   187a0:	bd70      	pop	{r4, r5, r6, pc}
   187a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   187a6:	bf06      	itte	eq
   187a8:	4610      	moveq	r0, r2
   187aa:	4619      	moveq	r1, r3
   187ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   187b0:	d019      	beq.n	187e6 <__aeabi_dmul+0x24a>
   187b2:	ea94 0f0c 	teq	r4, ip
   187b6:	d102      	bne.n	187be <__aeabi_dmul+0x222>
   187b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   187bc:	d113      	bne.n	187e6 <__aeabi_dmul+0x24a>
   187be:	ea95 0f0c 	teq	r5, ip
   187c2:	d105      	bne.n	187d0 <__aeabi_dmul+0x234>
   187c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   187c8:	bf1c      	itt	ne
   187ca:	4610      	movne	r0, r2
   187cc:	4619      	movne	r1, r3
   187ce:	d10a      	bne.n	187e6 <__aeabi_dmul+0x24a>
   187d0:	ea81 0103 	eor.w	r1, r1, r3
   187d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   187dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   187e0:	f04f 0000 	mov.w	r0, #0
   187e4:	bd70      	pop	{r4, r5, r6, pc}
   187e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   187ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   187ee:	bd70      	pop	{r4, r5, r6, pc}

000187f0 <__aeabi_ddiv>:
   187f0:	b570      	push	{r4, r5, r6, lr}
   187f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   187f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   187fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   187fe:	bf1d      	ittte	ne
   18800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18804:	ea94 0f0c 	teqne	r4, ip
   18808:	ea95 0f0c 	teqne	r5, ip
   1880c:	f000 f8a7 	bleq	1895e <__aeabi_ddiv+0x16e>
   18810:	eba4 0405 	sub.w	r4, r4, r5
   18814:	ea81 0e03 	eor.w	lr, r1, r3
   18818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1881c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18820:	f000 8088 	beq.w	18934 <__aeabi_ddiv+0x144>
   18824:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1882c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18834:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1883c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18840:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18848:	429d      	cmp	r5, r3
   1884a:	bf08      	it	eq
   1884c:	4296      	cmpeq	r6, r2
   1884e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18852:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18856:	d202      	bcs.n	1885e <__aeabi_ddiv+0x6e>
   18858:	085b      	lsrs	r3, r3, #1
   1885a:	ea4f 0232 	mov.w	r2, r2, rrx
   1885e:	1ab6      	subs	r6, r6, r2
   18860:	eb65 0503 	sbc.w	r5, r5, r3
   18864:	085b      	lsrs	r3, r3, #1
   18866:	ea4f 0232 	mov.w	r2, r2, rrx
   1886a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1886e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18872:	ebb6 0e02 	subs.w	lr, r6, r2
   18876:	eb75 0e03 	sbcs.w	lr, r5, r3
   1887a:	bf22      	ittt	cs
   1887c:	1ab6      	subcs	r6, r6, r2
   1887e:	4675      	movcs	r5, lr
   18880:	ea40 000c 	orrcs.w	r0, r0, ip
   18884:	085b      	lsrs	r3, r3, #1
   18886:	ea4f 0232 	mov.w	r2, r2, rrx
   1888a:	ebb6 0e02 	subs.w	lr, r6, r2
   1888e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18892:	bf22      	ittt	cs
   18894:	1ab6      	subcs	r6, r6, r2
   18896:	4675      	movcs	r5, lr
   18898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1889c:	085b      	lsrs	r3, r3, #1
   1889e:	ea4f 0232 	mov.w	r2, r2, rrx
   188a2:	ebb6 0e02 	subs.w	lr, r6, r2
   188a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   188aa:	bf22      	ittt	cs
   188ac:	1ab6      	subcs	r6, r6, r2
   188ae:	4675      	movcs	r5, lr
   188b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   188b4:	085b      	lsrs	r3, r3, #1
   188b6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ba:	ebb6 0e02 	subs.w	lr, r6, r2
   188be:	eb75 0e03 	sbcs.w	lr, r5, r3
   188c2:	bf22      	ittt	cs
   188c4:	1ab6      	subcs	r6, r6, r2
   188c6:	4675      	movcs	r5, lr
   188c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   188cc:	ea55 0e06 	orrs.w	lr, r5, r6
   188d0:	d018      	beq.n	18904 <__aeabi_ddiv+0x114>
   188d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   188d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   188da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   188de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   188e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   188e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   188ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   188ee:	d1c0      	bne.n	18872 <__aeabi_ddiv+0x82>
   188f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   188f4:	d10b      	bne.n	1890e <__aeabi_ddiv+0x11e>
   188f6:	ea41 0100 	orr.w	r1, r1, r0
   188fa:	f04f 0000 	mov.w	r0, #0
   188fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18902:	e7b6      	b.n	18872 <__aeabi_ddiv+0x82>
   18904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18908:	bf04      	itt	eq
   1890a:	4301      	orreq	r1, r0
   1890c:	2000      	moveq	r0, #0
   1890e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18912:	bf88      	it	hi
   18914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18918:	f63f aeaf 	bhi.w	1867a <__aeabi_dmul+0xde>
   1891c:	ebb5 0c03 	subs.w	ip, r5, r3
   18920:	bf04      	itt	eq
   18922:	ebb6 0c02 	subseq.w	ip, r6, r2
   18926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1892a:	f150 0000 	adcs.w	r0, r0, #0
   1892e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18932:	bd70      	pop	{r4, r5, r6, pc}
   18934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1893c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18940:	bfc2      	ittt	gt
   18942:	ebd4 050c 	rsbsgt	r5, r4, ip
   18946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1894a:	bd70      	popgt	{r4, r5, r6, pc}
   1894c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18950:	f04f 0e00 	mov.w	lr, #0
   18954:	3c01      	subs	r4, #1
   18956:	e690      	b.n	1867a <__aeabi_dmul+0xde>
   18958:	ea45 0e06 	orr.w	lr, r5, r6
   1895c:	e68d      	b.n	1867a <__aeabi_dmul+0xde>
   1895e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18962:	ea94 0f0c 	teq	r4, ip
   18966:	bf08      	it	eq
   18968:	ea95 0f0c 	teqeq	r5, ip
   1896c:	f43f af3b 	beq.w	187e6 <__aeabi_dmul+0x24a>
   18970:	ea94 0f0c 	teq	r4, ip
   18974:	d10a      	bne.n	1898c <__aeabi_ddiv+0x19c>
   18976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1897a:	f47f af34 	bne.w	187e6 <__aeabi_dmul+0x24a>
   1897e:	ea95 0f0c 	teq	r5, ip
   18982:	f47f af25 	bne.w	187d0 <__aeabi_dmul+0x234>
   18986:	4610      	mov	r0, r2
   18988:	4619      	mov	r1, r3
   1898a:	e72c      	b.n	187e6 <__aeabi_dmul+0x24a>
   1898c:	ea95 0f0c 	teq	r5, ip
   18990:	d106      	bne.n	189a0 <__aeabi_ddiv+0x1b0>
   18992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18996:	f43f aefd 	beq.w	18794 <__aeabi_dmul+0x1f8>
   1899a:	4610      	mov	r0, r2
   1899c:	4619      	mov	r1, r3
   1899e:	e722      	b.n	187e6 <__aeabi_dmul+0x24a>
   189a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   189a4:	bf18      	it	ne
   189a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   189aa:	f47f aec5 	bne.w	18738 <__aeabi_dmul+0x19c>
   189ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   189b2:	f47f af0d 	bne.w	187d0 <__aeabi_dmul+0x234>
   189b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   189ba:	f47f aeeb 	bne.w	18794 <__aeabi_dmul+0x1f8>
   189be:	e712      	b.n	187e6 <__aeabi_dmul+0x24a>

000189c0 <__gedf2>:
   189c0:	f04f 3cff 	mov.w	ip, #4294967295
   189c4:	e006      	b.n	189d4 <__cmpdf2+0x4>
   189c6:	bf00      	nop

000189c8 <__ledf2>:
   189c8:	f04f 0c01 	mov.w	ip, #1
   189cc:	e002      	b.n	189d4 <__cmpdf2+0x4>
   189ce:	bf00      	nop

000189d0 <__cmpdf2>:
   189d0:	f04f 0c01 	mov.w	ip, #1
   189d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   189d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   189dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   189e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   189e4:	bf18      	it	ne
   189e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   189ea:	d01b      	beq.n	18a24 <__cmpdf2+0x54>
   189ec:	b001      	add	sp, #4
   189ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   189f2:	bf0c      	ite	eq
   189f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   189f8:	ea91 0f03 	teqne	r1, r3
   189fc:	bf02      	ittt	eq
   189fe:	ea90 0f02 	teqeq	r0, r2
   18a02:	2000      	moveq	r0, #0
   18a04:	4770      	bxeq	lr
   18a06:	f110 0f00 	cmn.w	r0, #0
   18a0a:	ea91 0f03 	teq	r1, r3
   18a0e:	bf58      	it	pl
   18a10:	4299      	cmppl	r1, r3
   18a12:	bf08      	it	eq
   18a14:	4290      	cmpeq	r0, r2
   18a16:	bf2c      	ite	cs
   18a18:	17d8      	asrcs	r0, r3, #31
   18a1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18a1e:	f040 0001 	orr.w	r0, r0, #1
   18a22:	4770      	bx	lr
   18a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18a2c:	d102      	bne.n	18a34 <__cmpdf2+0x64>
   18a2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18a32:	d107      	bne.n	18a44 <__cmpdf2+0x74>
   18a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18a3c:	d1d6      	bne.n	189ec <__cmpdf2+0x1c>
   18a3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18a42:	d0d3      	beq.n	189ec <__cmpdf2+0x1c>
   18a44:	f85d 0b04 	ldr.w	r0, [sp], #4
   18a48:	4770      	bx	lr
   18a4a:	bf00      	nop

00018a4c <__aeabi_cdrcmple>:
   18a4c:	4684      	mov	ip, r0
   18a4e:	4610      	mov	r0, r2
   18a50:	4662      	mov	r2, ip
   18a52:	468c      	mov	ip, r1
   18a54:	4619      	mov	r1, r3
   18a56:	4663      	mov	r3, ip
   18a58:	e000      	b.n	18a5c <__aeabi_cdcmpeq>
   18a5a:	bf00      	nop

00018a5c <__aeabi_cdcmpeq>:
   18a5c:	b501      	push	{r0, lr}
   18a5e:	f7ff ffb7 	bl	189d0 <__cmpdf2>
   18a62:	2800      	cmp	r0, #0
   18a64:	bf48      	it	mi
   18a66:	f110 0f00 	cmnmi.w	r0, #0
   18a6a:	bd01      	pop	{r0, pc}

00018a6c <__aeabi_dcmpeq>:
   18a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18a70:	f7ff fff4 	bl	18a5c <__aeabi_cdcmpeq>
   18a74:	bf0c      	ite	eq
   18a76:	2001      	moveq	r0, #1
   18a78:	2000      	movne	r0, #0
   18a7a:	f85d fb08 	ldr.w	pc, [sp], #8
   18a7e:	bf00      	nop

00018a80 <__aeabi_dcmplt>:
   18a80:	f84d ed08 	str.w	lr, [sp, #-8]!
   18a84:	f7ff ffea 	bl	18a5c <__aeabi_cdcmpeq>
   18a88:	bf34      	ite	cc
   18a8a:	2001      	movcc	r0, #1
   18a8c:	2000      	movcs	r0, #0
   18a8e:	f85d fb08 	ldr.w	pc, [sp], #8
   18a92:	bf00      	nop

00018a94 <__aeabi_dcmple>:
   18a94:	f84d ed08 	str.w	lr, [sp, #-8]!
   18a98:	f7ff ffe0 	bl	18a5c <__aeabi_cdcmpeq>
   18a9c:	bf94      	ite	ls
   18a9e:	2001      	movls	r0, #1
   18aa0:	2000      	movhi	r0, #0
   18aa2:	f85d fb08 	ldr.w	pc, [sp], #8
   18aa6:	bf00      	nop

00018aa8 <__aeabi_dcmpge>:
   18aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18aac:	f7ff ffce 	bl	18a4c <__aeabi_cdrcmple>
   18ab0:	bf94      	ite	ls
   18ab2:	2001      	movls	r0, #1
   18ab4:	2000      	movhi	r0, #0
   18ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   18aba:	bf00      	nop

00018abc <__aeabi_dcmpgt>:
   18abc:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ac0:	f7ff ffc4 	bl	18a4c <__aeabi_cdrcmple>
   18ac4:	bf34      	ite	cc
   18ac6:	2001      	movcc	r0, #1
   18ac8:	2000      	movcs	r0, #0
   18aca:	f85d fb08 	ldr.w	pc, [sp], #8
   18ace:	bf00      	nop

00018ad0 <__aeabi_dcmpun>:
   18ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18ad8:	d102      	bne.n	18ae0 <__aeabi_dcmpun+0x10>
   18ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18ade:	d10a      	bne.n	18af6 <__aeabi_dcmpun+0x26>
   18ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18ae8:	d102      	bne.n	18af0 <__aeabi_dcmpun+0x20>
   18aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18aee:	d102      	bne.n	18af6 <__aeabi_dcmpun+0x26>
   18af0:	f04f 0000 	mov.w	r0, #0
   18af4:	4770      	bx	lr
   18af6:	f04f 0001 	mov.w	r0, #1
   18afa:	4770      	bx	lr

00018afc <__aeabi_d2uiz>:
   18afc:	004a      	lsls	r2, r1, #1
   18afe:	d211      	bcs.n	18b24 <__aeabi_d2uiz+0x28>
   18b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18b04:	d211      	bcs.n	18b2a <__aeabi_d2uiz+0x2e>
   18b06:	d50d      	bpl.n	18b24 <__aeabi_d2uiz+0x28>
   18b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18b10:	d40e      	bmi.n	18b30 <__aeabi_d2uiz+0x34>
   18b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18b1e:	fa23 f002 	lsr.w	r0, r3, r2
   18b22:	4770      	bx	lr
   18b24:	f04f 0000 	mov.w	r0, #0
   18b28:	4770      	bx	lr
   18b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18b2e:	d102      	bne.n	18b36 <__aeabi_d2uiz+0x3a>
   18b30:	f04f 30ff 	mov.w	r0, #4294967295
   18b34:	4770      	bx	lr
   18b36:	f04f 0000 	mov.w	r0, #0
   18b3a:	4770      	bx	lr

00018b3c <__aeabi_frsub>:
   18b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18b40:	e002      	b.n	18b48 <__addsf3>
   18b42:	bf00      	nop

00018b44 <__aeabi_fsub>:
   18b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018b48 <__addsf3>:
   18b48:	0042      	lsls	r2, r0, #1
   18b4a:	bf1f      	itttt	ne
   18b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b50:	ea92 0f03 	teqne	r2, r3
   18b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b5c:	d06a      	beq.n	18c34 <__addsf3+0xec>
   18b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b66:	bfc1      	itttt	gt
   18b68:	18d2      	addgt	r2, r2, r3
   18b6a:	4041      	eorgt	r1, r0
   18b6c:	4048      	eorgt	r0, r1
   18b6e:	4041      	eorgt	r1, r0
   18b70:	bfb8      	it	lt
   18b72:	425b      	neglt	r3, r3
   18b74:	2b19      	cmp	r3, #25
   18b76:	bf88      	it	hi
   18b78:	4770      	bxhi	lr
   18b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b86:	bf18      	it	ne
   18b88:	4240      	negne	r0, r0
   18b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b96:	bf18      	it	ne
   18b98:	4249      	negne	r1, r1
   18b9a:	ea92 0f03 	teq	r2, r3
   18b9e:	d03f      	beq.n	18c20 <__addsf3+0xd8>
   18ba0:	f1a2 0201 	sub.w	r2, r2, #1
   18ba4:	fa41 fc03 	asr.w	ip, r1, r3
   18ba8:	eb10 000c 	adds.w	r0, r0, ip
   18bac:	f1c3 0320 	rsb	r3, r3, #32
   18bb0:	fa01 f103 	lsl.w	r1, r1, r3
   18bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18bb8:	d502      	bpl.n	18bc0 <__addsf3+0x78>
   18bba:	4249      	negs	r1, r1
   18bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18bc4:	d313      	bcc.n	18bee <__addsf3+0xa6>
   18bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18bca:	d306      	bcc.n	18bda <__addsf3+0x92>
   18bcc:	0840      	lsrs	r0, r0, #1
   18bce:	ea4f 0131 	mov.w	r1, r1, rrx
   18bd2:	f102 0201 	add.w	r2, r2, #1
   18bd6:	2afe      	cmp	r2, #254	; 0xfe
   18bd8:	d251      	bcs.n	18c7e <__addsf3+0x136>
   18bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18be2:	bf08      	it	eq
   18be4:	f020 0001 	biceq.w	r0, r0, #1
   18be8:	ea40 0003 	orr.w	r0, r0, r3
   18bec:	4770      	bx	lr
   18bee:	0049      	lsls	r1, r1, #1
   18bf0:	eb40 0000 	adc.w	r0, r0, r0
   18bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18bf8:	f1a2 0201 	sub.w	r2, r2, #1
   18bfc:	d1ed      	bne.n	18bda <__addsf3+0x92>
   18bfe:	fab0 fc80 	clz	ip, r0
   18c02:	f1ac 0c08 	sub.w	ip, ip, #8
   18c06:	ebb2 020c 	subs.w	r2, r2, ip
   18c0a:	fa00 f00c 	lsl.w	r0, r0, ip
   18c0e:	bfaa      	itet	ge
   18c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18c14:	4252      	neglt	r2, r2
   18c16:	4318      	orrge	r0, r3
   18c18:	bfbc      	itt	lt
   18c1a:	40d0      	lsrlt	r0, r2
   18c1c:	4318      	orrlt	r0, r3
   18c1e:	4770      	bx	lr
   18c20:	f092 0f00 	teq	r2, #0
   18c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18c28:	bf06      	itte	eq
   18c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18c2e:	3201      	addeq	r2, #1
   18c30:	3b01      	subne	r3, #1
   18c32:	e7b5      	b.n	18ba0 <__addsf3+0x58>
   18c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18c3c:	bf18      	it	ne
   18c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18c42:	d021      	beq.n	18c88 <__addsf3+0x140>
   18c44:	ea92 0f03 	teq	r2, r3
   18c48:	d004      	beq.n	18c54 <__addsf3+0x10c>
   18c4a:	f092 0f00 	teq	r2, #0
   18c4e:	bf08      	it	eq
   18c50:	4608      	moveq	r0, r1
   18c52:	4770      	bx	lr
   18c54:	ea90 0f01 	teq	r0, r1
   18c58:	bf1c      	itt	ne
   18c5a:	2000      	movne	r0, #0
   18c5c:	4770      	bxne	lr
   18c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c62:	d104      	bne.n	18c6e <__addsf3+0x126>
   18c64:	0040      	lsls	r0, r0, #1
   18c66:	bf28      	it	cs
   18c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c6c:	4770      	bx	lr
   18c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c72:	bf3c      	itt	cc
   18c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c78:	4770      	bxcc	lr
   18c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c86:	4770      	bx	lr
   18c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c8c:	bf16      	itet	ne
   18c8e:	4608      	movne	r0, r1
   18c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c94:	4601      	movne	r1, r0
   18c96:	0242      	lsls	r2, r0, #9
   18c98:	bf06      	itte	eq
   18c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c9e:	ea90 0f01 	teqeq	r0, r1
   18ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18ca6:	4770      	bx	lr

00018ca8 <__aeabi_ui2f>:
   18ca8:	f04f 0300 	mov.w	r3, #0
   18cac:	e004      	b.n	18cb8 <__aeabi_i2f+0x8>
   18cae:	bf00      	nop

00018cb0 <__aeabi_i2f>:
   18cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18cb4:	bf48      	it	mi
   18cb6:	4240      	negmi	r0, r0
   18cb8:	ea5f 0c00 	movs.w	ip, r0
   18cbc:	bf08      	it	eq
   18cbe:	4770      	bxeq	lr
   18cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18cc4:	4601      	mov	r1, r0
   18cc6:	f04f 0000 	mov.w	r0, #0
   18cca:	e01c      	b.n	18d06 <__aeabi_l2f+0x2a>

00018ccc <__aeabi_ul2f>:
   18ccc:	ea50 0201 	orrs.w	r2, r0, r1
   18cd0:	bf08      	it	eq
   18cd2:	4770      	bxeq	lr
   18cd4:	f04f 0300 	mov.w	r3, #0
   18cd8:	e00a      	b.n	18cf0 <__aeabi_l2f+0x14>
   18cda:	bf00      	nop

00018cdc <__aeabi_l2f>:
   18cdc:	ea50 0201 	orrs.w	r2, r0, r1
   18ce0:	bf08      	it	eq
   18ce2:	4770      	bxeq	lr
   18ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18ce8:	d502      	bpl.n	18cf0 <__aeabi_l2f+0x14>
   18cea:	4240      	negs	r0, r0
   18cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18cf0:	ea5f 0c01 	movs.w	ip, r1
   18cf4:	bf02      	ittt	eq
   18cf6:	4684      	moveq	ip, r0
   18cf8:	4601      	moveq	r1, r0
   18cfa:	2000      	moveq	r0, #0
   18cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18d00:	bf08      	it	eq
   18d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18d0a:	fabc f28c 	clz	r2, ip
   18d0e:	3a08      	subs	r2, #8
   18d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18d14:	db10      	blt.n	18d38 <__aeabi_l2f+0x5c>
   18d16:	fa01 fc02 	lsl.w	ip, r1, r2
   18d1a:	4463      	add	r3, ip
   18d1c:	fa00 fc02 	lsl.w	ip, r0, r2
   18d20:	f1c2 0220 	rsb	r2, r2, #32
   18d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18d28:	fa20 f202 	lsr.w	r2, r0, r2
   18d2c:	eb43 0002 	adc.w	r0, r3, r2
   18d30:	bf08      	it	eq
   18d32:	f020 0001 	biceq.w	r0, r0, #1
   18d36:	4770      	bx	lr
   18d38:	f102 0220 	add.w	r2, r2, #32
   18d3c:	fa01 fc02 	lsl.w	ip, r1, r2
   18d40:	f1c2 0220 	rsb	r2, r2, #32
   18d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18d48:	fa21 f202 	lsr.w	r2, r1, r2
   18d4c:	eb43 0002 	adc.w	r0, r3, r2
   18d50:	bf08      	it	eq
   18d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d56:	4770      	bx	lr

00018d58 <__aeabi_fmul>:
   18d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18d60:	bf1e      	ittt	ne
   18d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18d66:	ea92 0f0c 	teqne	r2, ip
   18d6a:	ea93 0f0c 	teqne	r3, ip
   18d6e:	d06f      	beq.n	18e50 <__aeabi_fmul+0xf8>
   18d70:	441a      	add	r2, r3
   18d72:	ea80 0c01 	eor.w	ip, r0, r1
   18d76:	0240      	lsls	r0, r0, #9
   18d78:	bf18      	it	ne
   18d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18d7e:	d01e      	beq.n	18dbe <__aeabi_fmul+0x66>
   18d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18d8c:	fba0 3101 	umull	r3, r1, r0, r1
   18d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18d98:	bf3e      	ittt	cc
   18d9a:	0049      	lslcc	r1, r1, #1
   18d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18da0:	005b      	lslcc	r3, r3, #1
   18da2:	ea40 0001 	orr.w	r0, r0, r1
   18da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18daa:	2afd      	cmp	r2, #253	; 0xfd
   18dac:	d81d      	bhi.n	18dea <__aeabi_fmul+0x92>
   18dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18db6:	bf08      	it	eq
   18db8:	f020 0001 	biceq.w	r0, r0, #1
   18dbc:	4770      	bx	lr
   18dbe:	f090 0f00 	teq	r0, #0
   18dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18dc6:	bf08      	it	eq
   18dc8:	0249      	lsleq	r1, r1, #9
   18dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18dd2:	3a7f      	subs	r2, #127	; 0x7f
   18dd4:	bfc2      	ittt	gt
   18dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18dde:	4770      	bxgt	lr
   18de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18de4:	f04f 0300 	mov.w	r3, #0
   18de8:	3a01      	subs	r2, #1
   18dea:	dc5d      	bgt.n	18ea8 <__aeabi_fmul+0x150>
   18dec:	f112 0f19 	cmn.w	r2, #25
   18df0:	bfdc      	itt	le
   18df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18df6:	4770      	bxle	lr
   18df8:	f1c2 0200 	rsb	r2, r2, #0
   18dfc:	0041      	lsls	r1, r0, #1
   18dfe:	fa21 f102 	lsr.w	r1, r1, r2
   18e02:	f1c2 0220 	rsb	r2, r2, #32
   18e06:	fa00 fc02 	lsl.w	ip, r0, r2
   18e0a:	ea5f 0031 	movs.w	r0, r1, rrx
   18e0e:	f140 0000 	adc.w	r0, r0, #0
   18e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18e16:	bf08      	it	eq
   18e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18e1c:	4770      	bx	lr
   18e1e:	f092 0f00 	teq	r2, #0
   18e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18e26:	bf02      	ittt	eq
   18e28:	0040      	lsleq	r0, r0, #1
   18e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18e2e:	3a01      	subeq	r2, #1
   18e30:	d0f9      	beq.n	18e26 <__aeabi_fmul+0xce>
   18e32:	ea40 000c 	orr.w	r0, r0, ip
   18e36:	f093 0f00 	teq	r3, #0
   18e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18e3e:	bf02      	ittt	eq
   18e40:	0049      	lsleq	r1, r1, #1
   18e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18e46:	3b01      	subeq	r3, #1
   18e48:	d0f9      	beq.n	18e3e <__aeabi_fmul+0xe6>
   18e4a:	ea41 010c 	orr.w	r1, r1, ip
   18e4e:	e78f      	b.n	18d70 <__aeabi_fmul+0x18>
   18e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18e54:	ea92 0f0c 	teq	r2, ip
   18e58:	bf18      	it	ne
   18e5a:	ea93 0f0c 	teqne	r3, ip
   18e5e:	d00a      	beq.n	18e76 <__aeabi_fmul+0x11e>
   18e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18e64:	bf18      	it	ne
   18e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18e6a:	d1d8      	bne.n	18e1e <__aeabi_fmul+0xc6>
   18e6c:	ea80 0001 	eor.w	r0, r0, r1
   18e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18e74:	4770      	bx	lr
   18e76:	f090 0f00 	teq	r0, #0
   18e7a:	bf17      	itett	ne
   18e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18e80:	4608      	moveq	r0, r1
   18e82:	f091 0f00 	teqne	r1, #0
   18e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18e8a:	d014      	beq.n	18eb6 <__aeabi_fmul+0x15e>
   18e8c:	ea92 0f0c 	teq	r2, ip
   18e90:	d101      	bne.n	18e96 <__aeabi_fmul+0x13e>
   18e92:	0242      	lsls	r2, r0, #9
   18e94:	d10f      	bne.n	18eb6 <__aeabi_fmul+0x15e>
   18e96:	ea93 0f0c 	teq	r3, ip
   18e9a:	d103      	bne.n	18ea4 <__aeabi_fmul+0x14c>
   18e9c:	024b      	lsls	r3, r1, #9
   18e9e:	bf18      	it	ne
   18ea0:	4608      	movne	r0, r1
   18ea2:	d108      	bne.n	18eb6 <__aeabi_fmul+0x15e>
   18ea4:	ea80 0001 	eor.w	r0, r0, r1
   18ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18eb4:	4770      	bx	lr
   18eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18ebe:	4770      	bx	lr

00018ec0 <__aeabi_fdiv>:
   18ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18ec8:	bf1e      	ittt	ne
   18eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18ece:	ea92 0f0c 	teqne	r2, ip
   18ed2:	ea93 0f0c 	teqne	r3, ip
   18ed6:	d069      	beq.n	18fac <__aeabi_fdiv+0xec>
   18ed8:	eba2 0203 	sub.w	r2, r2, r3
   18edc:	ea80 0c01 	eor.w	ip, r0, r1
   18ee0:	0249      	lsls	r1, r1, #9
   18ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18ee6:	d037      	beq.n	18f58 <__aeabi_fdiv+0x98>
   18ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18ef8:	428b      	cmp	r3, r1
   18efa:	bf38      	it	cc
   18efc:	005b      	lslcc	r3, r3, #1
   18efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18f06:	428b      	cmp	r3, r1
   18f08:	bf24      	itt	cs
   18f0a:	1a5b      	subcs	r3, r3, r1
   18f0c:	ea40 000c 	orrcs.w	r0, r0, ip
   18f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18f14:	bf24      	itt	cs
   18f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18f22:	bf24      	itt	cs
   18f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18f30:	bf24      	itt	cs
   18f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18f3a:	011b      	lsls	r3, r3, #4
   18f3c:	bf18      	it	ne
   18f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18f42:	d1e0      	bne.n	18f06 <__aeabi_fdiv+0x46>
   18f44:	2afd      	cmp	r2, #253	; 0xfd
   18f46:	f63f af50 	bhi.w	18dea <__aeabi_fmul+0x92>
   18f4a:	428b      	cmp	r3, r1
   18f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18f50:	bf08      	it	eq
   18f52:	f020 0001 	biceq.w	r0, r0, #1
   18f56:	4770      	bx	lr
   18f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18f60:	327f      	adds	r2, #127	; 0x7f
   18f62:	bfc2      	ittt	gt
   18f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18f6c:	4770      	bxgt	lr
   18f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18f72:	f04f 0300 	mov.w	r3, #0
   18f76:	3a01      	subs	r2, #1
   18f78:	e737      	b.n	18dea <__aeabi_fmul+0x92>
   18f7a:	f092 0f00 	teq	r2, #0
   18f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18f82:	bf02      	ittt	eq
   18f84:	0040      	lsleq	r0, r0, #1
   18f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18f8a:	3a01      	subeq	r2, #1
   18f8c:	d0f9      	beq.n	18f82 <__aeabi_fdiv+0xc2>
   18f8e:	ea40 000c 	orr.w	r0, r0, ip
   18f92:	f093 0f00 	teq	r3, #0
   18f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18f9a:	bf02      	ittt	eq
   18f9c:	0049      	lsleq	r1, r1, #1
   18f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18fa2:	3b01      	subeq	r3, #1
   18fa4:	d0f9      	beq.n	18f9a <__aeabi_fdiv+0xda>
   18fa6:	ea41 010c 	orr.w	r1, r1, ip
   18faa:	e795      	b.n	18ed8 <__aeabi_fdiv+0x18>
   18fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18fb0:	ea92 0f0c 	teq	r2, ip
   18fb4:	d108      	bne.n	18fc8 <__aeabi_fdiv+0x108>
   18fb6:	0242      	lsls	r2, r0, #9
   18fb8:	f47f af7d 	bne.w	18eb6 <__aeabi_fmul+0x15e>
   18fbc:	ea93 0f0c 	teq	r3, ip
   18fc0:	f47f af70 	bne.w	18ea4 <__aeabi_fmul+0x14c>
   18fc4:	4608      	mov	r0, r1
   18fc6:	e776      	b.n	18eb6 <__aeabi_fmul+0x15e>
   18fc8:	ea93 0f0c 	teq	r3, ip
   18fcc:	d104      	bne.n	18fd8 <__aeabi_fdiv+0x118>
   18fce:	024b      	lsls	r3, r1, #9
   18fd0:	f43f af4c 	beq.w	18e6c <__aeabi_fmul+0x114>
   18fd4:	4608      	mov	r0, r1
   18fd6:	e76e      	b.n	18eb6 <__aeabi_fmul+0x15e>
   18fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18fdc:	bf18      	it	ne
   18fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18fe2:	d1ca      	bne.n	18f7a <__aeabi_fdiv+0xba>
   18fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18fe8:	f47f af5c 	bne.w	18ea4 <__aeabi_fmul+0x14c>
   18fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18ff0:	f47f af3c 	bne.w	18e6c <__aeabi_fmul+0x114>
   18ff4:	e75f      	b.n	18eb6 <__aeabi_fmul+0x15e>
   18ff6:	bf00      	nop

00018ff8 <__gesf2>:
   18ff8:	f04f 3cff 	mov.w	ip, #4294967295
   18ffc:	e006      	b.n	1900c <__cmpsf2+0x4>
   18ffe:	bf00      	nop

00019000 <__lesf2>:
   19000:	f04f 0c01 	mov.w	ip, #1
   19004:	e002      	b.n	1900c <__cmpsf2+0x4>
   19006:	bf00      	nop

00019008 <__cmpsf2>:
   19008:	f04f 0c01 	mov.w	ip, #1
   1900c:	f84d cd04 	str.w	ip, [sp, #-4]!
   19010:	ea4f 0240 	mov.w	r2, r0, lsl #1
   19014:	ea4f 0341 	mov.w	r3, r1, lsl #1
   19018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1901c:	bf18      	it	ne
   1901e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   19022:	d011      	beq.n	19048 <__cmpsf2+0x40>
   19024:	b001      	add	sp, #4
   19026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1902a:	bf18      	it	ne
   1902c:	ea90 0f01 	teqne	r0, r1
   19030:	bf58      	it	pl
   19032:	ebb2 0003 	subspl.w	r0, r2, r3
   19036:	bf88      	it	hi
   19038:	17c8      	asrhi	r0, r1, #31
   1903a:	bf38      	it	cc
   1903c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   19040:	bf18      	it	ne
   19042:	f040 0001 	orrne.w	r0, r0, #1
   19046:	4770      	bx	lr
   19048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1904c:	d102      	bne.n	19054 <__cmpsf2+0x4c>
   1904e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   19052:	d105      	bne.n	19060 <__cmpsf2+0x58>
   19054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   19058:	d1e4      	bne.n	19024 <__cmpsf2+0x1c>
   1905a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1905e:	d0e1      	beq.n	19024 <__cmpsf2+0x1c>
   19060:	f85d 0b04 	ldr.w	r0, [sp], #4
   19064:	4770      	bx	lr
   19066:	bf00      	nop

00019068 <__aeabi_cfrcmple>:
   19068:	4684      	mov	ip, r0
   1906a:	4608      	mov	r0, r1
   1906c:	4661      	mov	r1, ip
   1906e:	e7ff      	b.n	19070 <__aeabi_cfcmpeq>

00019070 <__aeabi_cfcmpeq>:
   19070:	b50f      	push	{r0, r1, r2, r3, lr}
   19072:	f7ff ffc9 	bl	19008 <__cmpsf2>
   19076:	2800      	cmp	r0, #0
   19078:	bf48      	it	mi
   1907a:	f110 0f00 	cmnmi.w	r0, #0
   1907e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00019080 <__aeabi_fcmpeq>:
   19080:	f84d ed08 	str.w	lr, [sp, #-8]!
   19084:	f7ff fff4 	bl	19070 <__aeabi_cfcmpeq>
   19088:	bf0c      	ite	eq
   1908a:	2001      	moveq	r0, #1
   1908c:	2000      	movne	r0, #0
   1908e:	f85d fb08 	ldr.w	pc, [sp], #8
   19092:	bf00      	nop

00019094 <__aeabi_fcmplt>:
   19094:	f84d ed08 	str.w	lr, [sp, #-8]!
   19098:	f7ff ffea 	bl	19070 <__aeabi_cfcmpeq>
   1909c:	bf34      	ite	cc
   1909e:	2001      	movcc	r0, #1
   190a0:	2000      	movcs	r0, #0
   190a2:	f85d fb08 	ldr.w	pc, [sp], #8
   190a6:	bf00      	nop

000190a8 <__aeabi_fcmple>:
   190a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   190ac:	f7ff ffe0 	bl	19070 <__aeabi_cfcmpeq>
   190b0:	bf94      	ite	ls
   190b2:	2001      	movls	r0, #1
   190b4:	2000      	movhi	r0, #0
   190b6:	f85d fb08 	ldr.w	pc, [sp], #8
   190ba:	bf00      	nop

000190bc <__aeabi_fcmpge>:
   190bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   190c0:	f7ff ffd2 	bl	19068 <__aeabi_cfrcmple>
   190c4:	bf94      	ite	ls
   190c6:	2001      	movls	r0, #1
   190c8:	2000      	movhi	r0, #0
   190ca:	f85d fb08 	ldr.w	pc, [sp], #8
   190ce:	bf00      	nop

000190d0 <__aeabi_fcmpgt>:
   190d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   190d4:	f7ff ffc8 	bl	19068 <__aeabi_cfrcmple>
   190d8:	bf34      	ite	cc
   190da:	2001      	movcc	r0, #1
   190dc:	2000      	movcs	r0, #0
   190de:	f85d fb08 	ldr.w	pc, [sp], #8
   190e2:	bf00      	nop

000190e4 <__aeabi_f2uiz>:
   190e4:	0042      	lsls	r2, r0, #1
   190e6:	d20e      	bcs.n	19106 <__aeabi_f2uiz+0x22>
   190e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   190ec:	d30b      	bcc.n	19106 <__aeabi_f2uiz+0x22>
   190ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
   190f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   190f6:	d409      	bmi.n	1910c <__aeabi_f2uiz+0x28>
   190f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   190fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19100:	fa23 f002 	lsr.w	r0, r3, r2
   19104:	4770      	bx	lr
   19106:	f04f 0000 	mov.w	r0, #0
   1910a:	4770      	bx	lr
   1910c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   19110:	d101      	bne.n	19116 <__aeabi_f2uiz+0x32>
   19112:	0242      	lsls	r2, r0, #9
   19114:	d102      	bne.n	1911c <__aeabi_f2uiz+0x38>
   19116:	f04f 30ff 	mov.w	r0, #4294967295
   1911a:	4770      	bx	lr
   1911c:	f04f 0000 	mov.w	r0, #0
   19120:	4770      	bx	lr
   19122:	bf00      	nop

00019124 <__cxa_atexit>:
   19124:	4613      	mov	r3, r2
   19126:	460a      	mov	r2, r1
   19128:	4601      	mov	r1, r0
   1912a:	2002      	movs	r0, #2
   1912c:	f000 b996 	b.w	1945c <__register_exitproc>

00019130 <__errno>:
   19130:	4b01      	ldr	r3, [pc, #4]	; (19138 <__errno+0x8>)
   19132:	6818      	ldr	r0, [r3, #0]
   19134:	4770      	bx	lr
   19136:	bf00      	nop
   19138:	200001e8 	.word	0x200001e8

0001913c <ffs>:
   1913c:	b140      	cbz	r0, 19150 <ffs+0x14>
   1913e:	2300      	movs	r3, #0
   19140:	fa40 f103 	asr.w	r1, r0, r3
   19144:	1c5a      	adds	r2, r3, #1
   19146:	07c9      	lsls	r1, r1, #31
   19148:	4613      	mov	r3, r2
   1914a:	d5f9      	bpl.n	19140 <ffs+0x4>
   1914c:	4610      	mov	r0, r2
   1914e:	4770      	bx	lr
   19150:	4602      	mov	r2, r0
   19152:	4610      	mov	r0, r2
   19154:	4770      	bx	lr
   19156:	bf00      	nop

00019158 <__libc_init_array>:
   19158:	b570      	push	{r4, r5, r6, lr}
   1915a:	4e0f      	ldr	r6, [pc, #60]	; (19198 <__libc_init_array+0x40>)
   1915c:	4d0f      	ldr	r5, [pc, #60]	; (1919c <__libc_init_array+0x44>)
   1915e:	1b76      	subs	r6, r6, r5
   19160:	10b6      	asrs	r6, r6, #2
   19162:	bf18      	it	ne
   19164:	2400      	movne	r4, #0
   19166:	d005      	beq.n	19174 <__libc_init_array+0x1c>
   19168:	3401      	adds	r4, #1
   1916a:	f855 3b04 	ldr.w	r3, [r5], #4
   1916e:	4798      	blx	r3
   19170:	42a6      	cmp	r6, r4
   19172:	d1f9      	bne.n	19168 <__libc_init_array+0x10>
   19174:	4e0a      	ldr	r6, [pc, #40]	; (191a0 <__libc_init_array+0x48>)
   19176:	4d0b      	ldr	r5, [pc, #44]	; (191a4 <__libc_init_array+0x4c>)
   19178:	1b76      	subs	r6, r6, r5
   1917a:	f001 fc17 	bl	1a9ac <_init>
   1917e:	10b6      	asrs	r6, r6, #2
   19180:	bf18      	it	ne
   19182:	2400      	movne	r4, #0
   19184:	d006      	beq.n	19194 <__libc_init_array+0x3c>
   19186:	3401      	adds	r4, #1
   19188:	f855 3b04 	ldr.w	r3, [r5], #4
   1918c:	4798      	blx	r3
   1918e:	42a6      	cmp	r6, r4
   19190:	d1f9      	bne.n	19186 <__libc_init_array+0x2e>
   19192:	bd70      	pop	{r4, r5, r6, pc}
   19194:	bd70      	pop	{r4, r5, r6, pc}
   19196:	bf00      	nop
   19198:	0001a9b8 	.word	0x0001a9b8
   1919c:	0001a9b8 	.word	0x0001a9b8
   191a0:	0001aa1c 	.word	0x0001aa1c
   191a4:	0001a9b8 	.word	0x0001a9b8

000191a8 <memcpy>:
   191a8:	4684      	mov	ip, r0
   191aa:	ea41 0300 	orr.w	r3, r1, r0
   191ae:	f013 0303 	ands.w	r3, r3, #3
   191b2:	d16d      	bne.n	19290 <memcpy+0xe8>
   191b4:	3a40      	subs	r2, #64	; 0x40
   191b6:	d341      	bcc.n	1923c <memcpy+0x94>
   191b8:	f851 3b04 	ldr.w	r3, [r1], #4
   191bc:	f840 3b04 	str.w	r3, [r0], #4
   191c0:	f851 3b04 	ldr.w	r3, [r1], #4
   191c4:	f840 3b04 	str.w	r3, [r0], #4
   191c8:	f851 3b04 	ldr.w	r3, [r1], #4
   191cc:	f840 3b04 	str.w	r3, [r0], #4
   191d0:	f851 3b04 	ldr.w	r3, [r1], #4
   191d4:	f840 3b04 	str.w	r3, [r0], #4
   191d8:	f851 3b04 	ldr.w	r3, [r1], #4
   191dc:	f840 3b04 	str.w	r3, [r0], #4
   191e0:	f851 3b04 	ldr.w	r3, [r1], #4
   191e4:	f840 3b04 	str.w	r3, [r0], #4
   191e8:	f851 3b04 	ldr.w	r3, [r1], #4
   191ec:	f840 3b04 	str.w	r3, [r0], #4
   191f0:	f851 3b04 	ldr.w	r3, [r1], #4
   191f4:	f840 3b04 	str.w	r3, [r0], #4
   191f8:	f851 3b04 	ldr.w	r3, [r1], #4
   191fc:	f840 3b04 	str.w	r3, [r0], #4
   19200:	f851 3b04 	ldr.w	r3, [r1], #4
   19204:	f840 3b04 	str.w	r3, [r0], #4
   19208:	f851 3b04 	ldr.w	r3, [r1], #4
   1920c:	f840 3b04 	str.w	r3, [r0], #4
   19210:	f851 3b04 	ldr.w	r3, [r1], #4
   19214:	f840 3b04 	str.w	r3, [r0], #4
   19218:	f851 3b04 	ldr.w	r3, [r1], #4
   1921c:	f840 3b04 	str.w	r3, [r0], #4
   19220:	f851 3b04 	ldr.w	r3, [r1], #4
   19224:	f840 3b04 	str.w	r3, [r0], #4
   19228:	f851 3b04 	ldr.w	r3, [r1], #4
   1922c:	f840 3b04 	str.w	r3, [r0], #4
   19230:	f851 3b04 	ldr.w	r3, [r1], #4
   19234:	f840 3b04 	str.w	r3, [r0], #4
   19238:	3a40      	subs	r2, #64	; 0x40
   1923a:	d2bd      	bcs.n	191b8 <memcpy+0x10>
   1923c:	3230      	adds	r2, #48	; 0x30
   1923e:	d311      	bcc.n	19264 <memcpy+0xbc>
   19240:	f851 3b04 	ldr.w	r3, [r1], #4
   19244:	f840 3b04 	str.w	r3, [r0], #4
   19248:	f851 3b04 	ldr.w	r3, [r1], #4
   1924c:	f840 3b04 	str.w	r3, [r0], #4
   19250:	f851 3b04 	ldr.w	r3, [r1], #4
   19254:	f840 3b04 	str.w	r3, [r0], #4
   19258:	f851 3b04 	ldr.w	r3, [r1], #4
   1925c:	f840 3b04 	str.w	r3, [r0], #4
   19260:	3a10      	subs	r2, #16
   19262:	d2ed      	bcs.n	19240 <memcpy+0x98>
   19264:	320c      	adds	r2, #12
   19266:	d305      	bcc.n	19274 <memcpy+0xcc>
   19268:	f851 3b04 	ldr.w	r3, [r1], #4
   1926c:	f840 3b04 	str.w	r3, [r0], #4
   19270:	3a04      	subs	r2, #4
   19272:	d2f9      	bcs.n	19268 <memcpy+0xc0>
   19274:	3204      	adds	r2, #4
   19276:	d008      	beq.n	1928a <memcpy+0xe2>
   19278:	07d2      	lsls	r2, r2, #31
   1927a:	bf1c      	itt	ne
   1927c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   19280:	f800 3b01 	strbne.w	r3, [r0], #1
   19284:	d301      	bcc.n	1928a <memcpy+0xe2>
   19286:	880b      	ldrh	r3, [r1, #0]
   19288:	8003      	strh	r3, [r0, #0]
   1928a:	4660      	mov	r0, ip
   1928c:	4770      	bx	lr
   1928e:	bf00      	nop
   19290:	2a08      	cmp	r2, #8
   19292:	d313      	bcc.n	192bc <memcpy+0x114>
   19294:	078b      	lsls	r3, r1, #30
   19296:	d08d      	beq.n	191b4 <memcpy+0xc>
   19298:	f010 0303 	ands.w	r3, r0, #3
   1929c:	d08a      	beq.n	191b4 <memcpy+0xc>
   1929e:	f1c3 0304 	rsb	r3, r3, #4
   192a2:	1ad2      	subs	r2, r2, r3
   192a4:	07db      	lsls	r3, r3, #31
   192a6:	bf1c      	itt	ne
   192a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   192ac:	f800 3b01 	strbne.w	r3, [r0], #1
   192b0:	d380      	bcc.n	191b4 <memcpy+0xc>
   192b2:	f831 3b02 	ldrh.w	r3, [r1], #2
   192b6:	f820 3b02 	strh.w	r3, [r0], #2
   192ba:	e77b      	b.n	191b4 <memcpy+0xc>
   192bc:	3a04      	subs	r2, #4
   192be:	d3d9      	bcc.n	19274 <memcpy+0xcc>
   192c0:	3a01      	subs	r2, #1
   192c2:	f811 3b01 	ldrb.w	r3, [r1], #1
   192c6:	f800 3b01 	strb.w	r3, [r0], #1
   192ca:	d2f9      	bcs.n	192c0 <memcpy+0x118>
   192cc:	780b      	ldrb	r3, [r1, #0]
   192ce:	7003      	strb	r3, [r0, #0]
   192d0:	784b      	ldrb	r3, [r1, #1]
   192d2:	7043      	strb	r3, [r0, #1]
   192d4:	788b      	ldrb	r3, [r1, #2]
   192d6:	7083      	strb	r3, [r0, #2]
   192d8:	4660      	mov	r0, ip
   192da:	4770      	bx	lr

000192dc <memset>:
   192dc:	b470      	push	{r4, r5, r6}
   192de:	0786      	lsls	r6, r0, #30
   192e0:	d046      	beq.n	19370 <memset+0x94>
   192e2:	1e54      	subs	r4, r2, #1
   192e4:	2a00      	cmp	r2, #0
   192e6:	d041      	beq.n	1936c <memset+0x90>
   192e8:	b2ca      	uxtb	r2, r1
   192ea:	4603      	mov	r3, r0
   192ec:	e002      	b.n	192f4 <memset+0x18>
   192ee:	f114 34ff 	adds.w	r4, r4, #4294967295
   192f2:	d33b      	bcc.n	1936c <memset+0x90>
   192f4:	f803 2b01 	strb.w	r2, [r3], #1
   192f8:	079d      	lsls	r5, r3, #30
   192fa:	d1f8      	bne.n	192ee <memset+0x12>
   192fc:	2c03      	cmp	r4, #3
   192fe:	d92e      	bls.n	1935e <memset+0x82>
   19300:	b2cd      	uxtb	r5, r1
   19302:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   19306:	2c0f      	cmp	r4, #15
   19308:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1930c:	d919      	bls.n	19342 <memset+0x66>
   1930e:	f103 0210 	add.w	r2, r3, #16
   19312:	4626      	mov	r6, r4
   19314:	3e10      	subs	r6, #16
   19316:	2e0f      	cmp	r6, #15
   19318:	f842 5c10 	str.w	r5, [r2, #-16]
   1931c:	f842 5c0c 	str.w	r5, [r2, #-12]
   19320:	f842 5c08 	str.w	r5, [r2, #-8]
   19324:	f842 5c04 	str.w	r5, [r2, #-4]
   19328:	f102 0210 	add.w	r2, r2, #16
   1932c:	d8f2      	bhi.n	19314 <memset+0x38>
   1932e:	f1a4 0210 	sub.w	r2, r4, #16
   19332:	f022 020f 	bic.w	r2, r2, #15
   19336:	f004 040f 	and.w	r4, r4, #15
   1933a:	3210      	adds	r2, #16
   1933c:	2c03      	cmp	r4, #3
   1933e:	4413      	add	r3, r2
   19340:	d90d      	bls.n	1935e <memset+0x82>
   19342:	461e      	mov	r6, r3
   19344:	4622      	mov	r2, r4
   19346:	3a04      	subs	r2, #4
   19348:	2a03      	cmp	r2, #3
   1934a:	f846 5b04 	str.w	r5, [r6], #4
   1934e:	d8fa      	bhi.n	19346 <memset+0x6a>
   19350:	1f22      	subs	r2, r4, #4
   19352:	f022 0203 	bic.w	r2, r2, #3
   19356:	3204      	adds	r2, #4
   19358:	4413      	add	r3, r2
   1935a:	f004 0403 	and.w	r4, r4, #3
   1935e:	b12c      	cbz	r4, 1936c <memset+0x90>
   19360:	b2c9      	uxtb	r1, r1
   19362:	441c      	add	r4, r3
   19364:	f803 1b01 	strb.w	r1, [r3], #1
   19368:	429c      	cmp	r4, r3
   1936a:	d1fb      	bne.n	19364 <memset+0x88>
   1936c:	bc70      	pop	{r4, r5, r6}
   1936e:	4770      	bx	lr
   19370:	4614      	mov	r4, r2
   19372:	4603      	mov	r3, r0
   19374:	e7c2      	b.n	192fc <memset+0x20>
   19376:	bf00      	nop
	...

00019380 <strlen>:
   19380:	f890 f000 	pld	[r0]
   19384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   19388:	f020 0107 	bic.w	r1, r0, #7
   1938c:	f06f 0c00 	mvn.w	ip, #0
   19390:	f010 0407 	ands.w	r4, r0, #7
   19394:	f891 f020 	pld	[r1, #32]
   19398:	f040 8049 	bne.w	1942e <strlen+0xae>
   1939c:	f04f 0400 	mov.w	r4, #0
   193a0:	f06f 0007 	mvn.w	r0, #7
   193a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   193a8:	f891 f040 	pld	[r1, #64]	; 0x40
   193ac:	f100 0008 	add.w	r0, r0, #8
   193b0:	fa82 f24c 	uadd8	r2, r2, ip
   193b4:	faa4 f28c 	sel	r2, r4, ip
   193b8:	fa83 f34c 	uadd8	r3, r3, ip
   193bc:	faa2 f38c 	sel	r3, r2, ip
   193c0:	bb4b      	cbnz	r3, 19416 <strlen+0x96>
   193c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   193c6:	fa82 f24c 	uadd8	r2, r2, ip
   193ca:	f100 0008 	add.w	r0, r0, #8
   193ce:	faa4 f28c 	sel	r2, r4, ip
   193d2:	fa83 f34c 	uadd8	r3, r3, ip
   193d6:	faa2 f38c 	sel	r3, r2, ip
   193da:	b9e3      	cbnz	r3, 19416 <strlen+0x96>
   193dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   193e0:	fa82 f24c 	uadd8	r2, r2, ip
   193e4:	f100 0008 	add.w	r0, r0, #8
   193e8:	faa4 f28c 	sel	r2, r4, ip
   193ec:	fa83 f34c 	uadd8	r3, r3, ip
   193f0:	faa2 f38c 	sel	r3, r2, ip
   193f4:	b97b      	cbnz	r3, 19416 <strlen+0x96>
   193f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   193fa:	f101 0120 	add.w	r1, r1, #32
   193fe:	fa82 f24c 	uadd8	r2, r2, ip
   19402:	f100 0008 	add.w	r0, r0, #8
   19406:	faa4 f28c 	sel	r2, r4, ip
   1940a:	fa83 f34c 	uadd8	r3, r3, ip
   1940e:	faa2 f38c 	sel	r3, r2, ip
   19412:	2b00      	cmp	r3, #0
   19414:	d0c6      	beq.n	193a4 <strlen+0x24>
   19416:	2a00      	cmp	r2, #0
   19418:	bf04      	itt	eq
   1941a:	3004      	addeq	r0, #4
   1941c:	461a      	moveq	r2, r3
   1941e:	ba12      	rev	r2, r2
   19420:	fab2 f282 	clz	r2, r2
   19424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   19428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1942c:	4770      	bx	lr
   1942e:	e9d1 2300 	ldrd	r2, r3, [r1]
   19432:	f004 0503 	and.w	r5, r4, #3
   19436:	f1c4 0000 	rsb	r0, r4, #0
   1943a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1943e:	f014 0f04 	tst.w	r4, #4
   19442:	f891 f040 	pld	[r1, #64]	; 0x40
   19446:	fa0c f505 	lsl.w	r5, ip, r5
   1944a:	ea62 0205 	orn	r2, r2, r5
   1944e:	bf1c      	itt	ne
   19450:	ea63 0305 	ornne	r3, r3, r5
   19454:	4662      	movne	r2, ip
   19456:	f04f 0400 	mov.w	r4, #0
   1945a:	e7a9      	b.n	193b0 <strlen+0x30>

0001945c <__register_exitproc>:
   1945c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19460:	4d2c      	ldr	r5, [pc, #176]	; (19514 <__register_exitproc+0xb8>)
   19462:	4606      	mov	r6, r0
   19464:	6828      	ldr	r0, [r5, #0]
   19466:	4698      	mov	r8, r3
   19468:	460f      	mov	r7, r1
   1946a:	4691      	mov	r9, r2
   1946c:	f000 f882 	bl	19574 <__retarget_lock_acquire_recursive>
   19470:	4b29      	ldr	r3, [pc, #164]	; (19518 <__register_exitproc+0xbc>)
   19472:	681c      	ldr	r4, [r3, #0]
   19474:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   19478:	2b00      	cmp	r3, #0
   1947a:	d03e      	beq.n	194fa <__register_exitproc+0x9e>
   1947c:	685a      	ldr	r2, [r3, #4]
   1947e:	2a1f      	cmp	r2, #31
   19480:	dc1c      	bgt.n	194bc <__register_exitproc+0x60>
   19482:	f102 0e01 	add.w	lr, r2, #1
   19486:	b176      	cbz	r6, 194a6 <__register_exitproc+0x4a>
   19488:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1948c:	2401      	movs	r4, #1
   1948e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   19492:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   19496:	4094      	lsls	r4, r2
   19498:	4320      	orrs	r0, r4
   1949a:	2e02      	cmp	r6, #2
   1949c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   194a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   194a4:	d023      	beq.n	194ee <__register_exitproc+0x92>
   194a6:	3202      	adds	r2, #2
   194a8:	f8c3 e004 	str.w	lr, [r3, #4]
   194ac:	6828      	ldr	r0, [r5, #0]
   194ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   194b2:	f000 f861 	bl	19578 <__retarget_lock_release_recursive>
   194b6:	2000      	movs	r0, #0
   194b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   194bc:	4b17      	ldr	r3, [pc, #92]	; (1951c <__register_exitproc+0xc0>)
   194be:	b30b      	cbz	r3, 19504 <__register_exitproc+0xa8>
   194c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   194c4:	f7f7 f98e 	bl	107e4 <malloc>
   194c8:	4603      	mov	r3, r0
   194ca:	b1d8      	cbz	r0, 19504 <__register_exitproc+0xa8>
   194cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   194d0:	6002      	str	r2, [r0, #0]
   194d2:	2100      	movs	r1, #0
   194d4:	6041      	str	r1, [r0, #4]
   194d6:	460a      	mov	r2, r1
   194d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   194dc:	f04f 0e01 	mov.w	lr, #1
   194e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   194e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   194e8:	2e00      	cmp	r6, #0
   194ea:	d0dc      	beq.n	194a6 <__register_exitproc+0x4a>
   194ec:	e7cc      	b.n	19488 <__register_exitproc+0x2c>
   194ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   194f2:	430c      	orrs	r4, r1
   194f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   194f8:	e7d5      	b.n	194a6 <__register_exitproc+0x4a>
   194fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   194fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   19502:	e7bb      	b.n	1947c <__register_exitproc+0x20>
   19504:	6828      	ldr	r0, [r5, #0]
   19506:	f000 f837 	bl	19578 <__retarget_lock_release_recursive>
   1950a:	f04f 30ff 	mov.w	r0, #4294967295
   1950e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19512:	bf00      	nop
   19514:	20000618 	.word	0x20000618
   19518:	0001a9a8 	.word	0x0001a9a8
   1951c:	000107e5 	.word	0x000107e5

00019520 <register_fini>:
   19520:	4b02      	ldr	r3, [pc, #8]	; (1952c <register_fini+0xc>)
   19522:	b113      	cbz	r3, 1952a <register_fini+0xa>
   19524:	4802      	ldr	r0, [pc, #8]	; (19530 <register_fini+0x10>)
   19526:	f000 b805 	b.w	19534 <atexit>
   1952a:	4770      	bx	lr
   1952c:	00000000 	.word	0x00000000
   19530:	00019541 	.word	0x00019541

00019534 <atexit>:
   19534:	2300      	movs	r3, #0
   19536:	4601      	mov	r1, r0
   19538:	461a      	mov	r2, r3
   1953a:	4618      	mov	r0, r3
   1953c:	f7ff bf8e 	b.w	1945c <__register_exitproc>

00019540 <__libc_fini_array>:
   19540:	b538      	push	{r3, r4, r5, lr}
   19542:	4c0a      	ldr	r4, [pc, #40]	; (1956c <__libc_fini_array+0x2c>)
   19544:	4d0a      	ldr	r5, [pc, #40]	; (19570 <__libc_fini_array+0x30>)
   19546:	1b64      	subs	r4, r4, r5
   19548:	10a4      	asrs	r4, r4, #2
   1954a:	d00a      	beq.n	19562 <__libc_fini_array+0x22>
   1954c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   19550:	3b01      	subs	r3, #1
   19552:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19556:	3c01      	subs	r4, #1
   19558:	f855 3904 	ldr.w	r3, [r5], #-4
   1955c:	4798      	blx	r3
   1955e:	2c00      	cmp	r4, #0
   19560:	d1f9      	bne.n	19556 <__libc_fini_array+0x16>
   19562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19566:	f001 ba59 	b.w	1aa1c <_fini>
   1956a:	bf00      	nop
   1956c:	0001aa2c 	.word	0x0001aa2c
   19570:	0001aa28 	.word	0x0001aa28

00019574 <__retarget_lock_acquire_recursive>:
   19574:	4770      	bx	lr
   19576:	bf00      	nop

00019578 <__retarget_lock_release_recursive>:
   19578:	4770      	bx	lr
   1957a:	bf00      	nop
   1957c:	2e2f2e2e 	.word	0x2e2f2e2e
   19580:	2e2e2f2e 	.word	0x2e2e2f2e
   19584:	554c412f 	.word	0x554c412f
   19588:	6972445f 	.word	0x6972445f
   1958c:	2f726576 	.word	0x2f726576
   19590:	5f554c41 	.word	0x5f554c41
   19594:	76697244 	.word	0x76697244
   19598:	682f7265 	.word	0x682f7265
   1959c:	692f6c61 	.word	0x692f6c61
   195a0:	756c636e 	.word	0x756c636e
   195a4:	682f6564 	.word	0x682f6564
   195a8:	775f6c61 	.word	0x775f6c61
   195ac:	682e7464 	.word	0x682e7464
   195b0:	00000000 	.word	0x00000000
   195b4:	2a2a2a2a 	.word	0x2a2a2a2a
   195b8:	66694c20 	.word	0x66694c20
   195bc:	75502065 	.word	0x75502065
   195c0:	2065736c 	.word	0x2065736c
   195c4:	69746341 	.word	0x69746341
   195c8:	65746176 	.word	0x65746176
   195cc:	2a2a2a64 	.word	0x2a2a2a64
   195d0:	0000002a 	.word	0x0000002a
   195d4:	00000a0d 	.word	0x00000a0d

000195d8 <_ZTV17ConfigState_Class>:
	...
   195e0:	0001080b                                ....

000195e4 <_ZTV15HVAC_Controller>:
	...
   195ec:	00000ae1 00000b69 ffffffe0 00000000     ....i...........
   195fc:	00000b61 00000ba5 202a2a2a 72617453     a.......*** Star
   1960c:	20705574 6f676c41 68746972 206e656d     tUp Algorithmen 
   1961c:	74736554 2a2a2a20 00000000 202a2a2a     Test ***....*** 
   1962c:	65746144 0020203a 20636544 32203420     Date:  .Dec  4 2
   1963c:	00303230 6d695420 00203a65 343a3831     020. Time: .18:4
   1964c:	30313a35 00000000 202a2a2a 20554c41     5:10....*** ALU 
   1965c:	74696e69 65746169 2a2a2064 0000002a     initiated ***...
   1966c:	69746341 6c206576 3a656e69 00000020     Active line: ...

0001967c <_ZTV12States_Class>:
   1967c:	000004fc 0000025c 00000000 00000000     ....\...........
   1968c:	00000ae1 00000b69 000010d5 ffffffe0     ....i...........
   1969c:	00000000 00000b61 00000ba5 fffffda4     ....a...........
   196ac:	fffffda4 00000000 000010e9 fffffd60     ............`...
   196bc:	fffffb04 00000000                       ........

000196c4 <_ZTT12States_Class>:
   196c4:	0001968c 000196b4 000196c4 000196e4     ................
   196d4:	000196f0                                ....

000196d8 <_ZTC12States_Class1276_19HVAC_Commando_Class>:
   196d8:	fffffd60 00000000 00000000 00000000     `...............
   196e8:	000002a0 00000000 0001080b 20726941     ............Air 
   196f8:	646e6f43 6f697469 676e696e 73795320     Conditioning Sys
   19708:	206d6574 706f7453 00646570 20726941     tem Stopped.Air 
   19718:	646e6f43 6f697469 676e696e 73795320     Conditioning Sys
   19728:	206d6574 7265704f 6e697461 00000067     tem Operating...
   19738:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   19748:	73795320 206d6574 72617453 00646574      System Started.
   19758:	2e2f2e2e 7361542f 6e61486b 72656c64     .././TaskHandler
   19768:	616c435f 632e7373 00007070              _Class.cpp..

00019774 <_ZTV20AUTO_MODE_Controller>:
	...
   1977c:	0001080b 0001080b                       ........

00019784 <_ZTV9VENT_Mode>:
	...
   1978c:	0001080b 0001080b 682f2e2e 702f6c70     ........../hpl/p
   1979c:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   197ac:	00682e65 682f2e2e 692f6c61 756c636e     e.h.../hal/inclu
   197bc:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
   197cc:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   197dc:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
   197ec:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
   197fc:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1980c:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
   1981c:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   1982c:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
   1983c:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   1984c:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   1985c:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   1986c:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1987c:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   1988c:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   1989c:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   198ac:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   198bc:	2e747369 00000063                       ist.c...

000198c4 <_map>:
   198c4:	00000000 00000040 00000001 00000021     ....@.......!...
   198d4:	00000003 00000003 00000004 00000004     ................
   198e4:	00000005 00000005 00000006 00000056     ............V...
   198f4:	00000007 00000057 00000008 00000028     ....W.......(...
   19904:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   19914:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00019924 <user_mux_confs>:
   19924:	00020100 00000000 00000000 00000000     ................
	...

00019968 <channel_confs>:
   19968:	0660065f 00000000 00000000 00000000     _.`.............
	...

000199a8 <interrupt_cfg>:
	...
   19a28:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   19a38:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   19a48:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   19a58:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   19a68:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   19a78:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   19a88:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   19a98:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   19aa8:	43000c00                                ...C

00019aac <sercomspi_regs>:
   19aac:	0020000c 00020000 00000000 01ff0001     .. .............
   19abc:	30000c04 02000000 00000000 ff00ef00     ...0............
   19acc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   19adc:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   19aec:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   19afc:	43001400 43001800                       ...C...C

00019b04 <_usb_ep_cfgs>:
   19b04:	20001060 00000000 00000040 200010a0     `.. ....@...... 
   19b14:	200010e0 00400040 20001120 20001160     ... @.@. .. `.. 
   19b24:	00400040 200011a0 200011e0 00400040     @.@.... ... @.@.
   19b34:	20001220 20001260 00400040 00000804      .. `.. @.@.....
   19b44:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   19b54:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   19b64:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   19b74:	7361625f 00682e65                       _base.h.

00019b7c <n25q256a_interface>:
   19b7c:	0000de11 0000deb5 0000dfc5 0000e17d     ............}...
   19b8c:	0000e20d 752f2e2e 642f6273 63697665     ....../usb/devic
   19b9c:	73752f65 2e636462 00000063              e/usbdc.c...

00019ba8 <_ZTV17ARINC_Conversions>:
	...
   19bb0:	0000fadd 0000faf9                       ........

00019bb8 <_ZTV19ARINC_Handler_Class>:
   19bb8:	000002c4 000002b4 00000000 00000000     ................
   19bc8:	0000fc75 0000fcd5 0000fe95 00000000     u...............
   19bd8:	00000000 fffffd4c 00000000 0000fadd     ....L...........
   19be8:	0000faf9 fffffd3c fffffd3c fffffff0     ....<...<.......
   19bf8:	fffffd3c 00000000 0000fcc1 0000fcf5     <...............
   19c08:	0000fecd                                ....

00019c0c <_ZTT19ARINC_Handler_Class>:
   19c0c:	00019bc8 00019cc8 00019c78 00019c90     ........x.......
   19c1c:	00019cac 00019ce4 00019d00 00019be4     ................
   19c2c:	00019c00 00019c44 00019c60              ....D...`...

00019c38 <_ZTC19ARINC_Handler_Class708_14Protocol_Class>:
   19c38:	fffffff0 00000000 00000000 00000000     ................
   19c48:	00000000 0001080b 00000000 00000000     ................
   19c58:	00000010 00000000 0000fadd 0000faf9     ................

00019c68 <_ZTC19ARINC_Handler_Class0_18ARINC_Buffer_Class>:
   19c68:	000002c4 000002b4 00000000 00000000     ................
	...
   19c88:	fffffd4c 00000000 0000fadd 0000faf9     L...............
   19c98:	00000000 fffffd3c fffffff0 fffffd3c     ....<.......<...
	...
   19cb4:	0001080b                                ....

00019cb8 <_ZTC19ARINC_Handler_Class0_15ARINC_Interface>:
   19cb8:	000002c4 000002b4 00000000 00000000     ................
	...
   19cd0:	0000fe95 00000000 00000000 fffffd4c     ............L...
   19ce0:	00000000 0000fadd 0000faf9 fffffd3c     ............<...
   19cf0:	fffffd3c fffffff0 fffffd3c 00000000     <.......<.......
	...
   19d08:	0000fecd                                ....

00019d0c <_ZTV15ARINC_Interface>:
   19d0c:	000002bc 000002ac 00000000 00000000     ................
   19d1c:	0000fdf1 0000fe61 0000fe95 00000000     ....a...........
   19d2c:	00000000 fffffd54 00000000 0000fadd     ....T...........
   19d3c:	0000faf9 fffffd44 fffffd44 fffffff0     ....D...D.......
   19d4c:	fffffd44 00000000 0000fe4d 0000fe81     D.......M.......
   19d5c:	0000fecd                                ....

00019d60 <_ZTT15ARINC_Interface>:
   19d60:	00019d1c 00019dc0 00019dd8 00019df4     ................
   19d70:	00019d38 00019d54 00019d8c 00019da8     8...T...........

00019d80 <_ZTC15ARINC_Interface700_14Protocol_Class>:
   19d80:	fffffff0 00000000 00000000 00000000     ................
   19d90:	00000000 0001080b 00000000 00000000     ................
   19da0:	00000010 00000000 0000fadd 0000faf9     ................

00019db0 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   19db0:	000002bc 000002ac 00000000 00000000     ................
	...
   19dd0:	fffffd54 00000000 0000fadd 0000faf9     T...............
   19de0:	00000000 fffffd44 fffffff0 fffffd44     ....D.......D...
	...
   19dfc:	0001080b 49480d0a 3935332d 61662033     ......HI-3593 fa
   19e0c:	64656c69 206f7420 74696e49 7a696c69     iled to Initiliz
   19e1c:	000d0a65 2d0a0d0a 68202d2d 41203273     e......--- hs2 A
   19e2c:	434e4952 746e4920 61667265 20206563     RINC Interface  
   19e3c:	2d2d2d2d 00000d0a 2d2d0a72 6f67212d     ----....r.---!go
   19e4c:	656d2074 67617373 2d2d2165 00002d2d     t message!----..
   19e5c:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   19e6c:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   19e7c:	00000000 20502020 6150203d 79746972     ....  P = Parity
   19e8c:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   19e9c:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   19eac:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   19ebc:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   19ecc:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   19edc:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   19eec:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   19efc:	6854203d 48207369 20706c65 65676150     = This Help Page
   19f0c:	00000000 70532020 20656361 20726142     ....  Space Bar 
   19f1c:	6944203d 616c7073 74532079 73757461     = Display Status
   19f2c:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   19f3c:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   19f4c:	20746e65 7373654d 20656761 20646e61     ent Message and 
   19f5c:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   19f6c:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   19f7c:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   19f8c:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   19f9c:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   19fac:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   19fbc:	61725420 696d736e 656e2074 6d207478      Transmit next m
   19fcc:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   19fdc:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   19fec:	00207830 30307826 00002030 6562614c     0x .&x000 ..Labe
   19ffc:	2020736c 202d2030 203a3336 00000020     ls  0 - 63:  ...
   1a00c:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   1a01c:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   1a02c:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   1a03c:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   1a04c:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   1a05c:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   1a06c:	6562614c 00003a6c 61727420 696d736e     Label:.. transmi
   1a07c:	6e697474 2e2e2e67 00000000 61725420     tting....... Tra
   1a08c:	696d736e 64657474 00000021 2d636552     nsmitted!...Rec-
   1a09c:	61442031 003a6174 2d314c50 61442031     1 Data:.PL1-1 Da
   1a0ac:	003a6174 6374614d 00003a68 2d314c50     ta:.Match:..PL1-
   1a0bc:	61442032 003a6174 2d314c50 61442033     2 Data:.PL1-3 Da
   1a0cc:	003a6174 2d636552 61442032 003a6174     ta:.Rec-2 Data:.
   1a0dc:	2d324c50 61442031 003a6174 2d324c50     PL2-1 Data:.PL2-
   1a0ec:	61442032 003a6174 2d324c50 61442033     2 Data:.PL2-3 Da
   1a0fc:	003a6174 50205854 74697261 52412079     ta:.TX Parity AR
   1a10c:	5f434e49 0d0a4e4f 0000003e 50205854     INC_ON..>...TX P
   1a11c:	74697261 52412079 5f434e49 0a46464f     arity ARINC_OFF.
   1a12c:	00003e0d 494c4654 65532050 3e0d0a74     .>..TFLIP Set..>
   1a13c:	00000000 494c4654 6c432050 65726165     ....TFLIP Cleare
   1a14c:	3e0d0a64 00000000 2d434552 46522031     d..>....REC-1 RF
   1a15c:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
   1a16c:	46522031 2050494c 61656c43 0a646572     1 RFLIP Cleared.
   1a17c:	00003e0d 2d434552 46522032 2050494c     .>..REC-2 RFLIP 
   1a18c:	0a746553 00003e0d 2d434552 46522032     Set..>..REC-2 RF
   1a19c:	2050494c 61656c43 0a646572 00003e0d     LIP Cleared..>..
   1a1ac:	2d434552 44532031 532c4e4f 61203944     REC-1 SDON,SD9 a
   1a1bc:	5320646e 20303144 0a746553 00003e0d     nd SD10 Set..>..
   1a1cc:	2d434552 44532031 532c4e4f 61203944     REC-1 SDON,SD9 a
   1a1dc:	5320646e 20303144 61656c43 0a646572     nd SD10 Cleared.
   1a1ec:	00003e0d 2d434552 44532032 532c4e4f     .>..REC-2 SDON,S
   1a1fc:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
   1a20c:	00003e0d 2d434552 44532032 532c4e4f     .>..REC-2 SDON,S
   1a21c:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
   1a22c:	0a646572 00003e0d 500a0d0a 73736572     red..>.....Press
   1a23c:	61705320 42206563 6f207261 57532072      Space Bar or SW
   1a24c:	7420342d 6572206f 656d7573 00000000     -4 to resume....
   1a25c:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   1a26c:	65766965 74695720 614c2068 736c6562     eive With Labels
   1a27c:	646f4d20 000d0a65 45530d0a 542d464c      Mode.....SELF-T
   1a28c:	2c545345 746e4920 616e7265 6944206c     EST, Internal Di
   1a29c:	61746967 6f4c206c 622d706f 2c6b6361     gital Loop-back,
   1a2ac:	206f4e20 61746164 20736920 6e617274      No data is tran
   1a2bc:	74696d73 20646574 65747865 6c616e72     smitted external
   1a2cc:	0d0a796c 00000000 6f200d0a 6154206e     ly........ on Ta
   1a2dc:	20656c62 6562616c 6120736c 45206572     ble labels are E
   1a2ec:	6c62616e 00006465 500a0d0a 73736572     nabled.....Press
   1a2fc:	2d575320 6f742031 61747320 69207472      SW-1 to start i
   1a30c:	6974696e 796c6c61 000a0d0a 202d2d2d     nitially....--- 
   1a31c:	74747542 43206e6f 616d6d6f 2073646e     Button Commands 
   1a32c:	0a2d2d2d 0000000d 70532020 20656361     ---.....  Space 
   1a33c:	20726142 44206f74 6c707369 53207961     Bar to Display S
   1a34c:	75746174 6e612073 6f432064 6f72746e     tatus and Contro
   1a35c:	6552206c 74736967 0a737265 0000000d     l Registers.....
   1a36c:	20702020 50206f74 65737561 00000d0a       p to Pause....
   1a37c:	206d2020 44206f74 6c707369 4c207961       m to Display L
   1a38c:	6c656261 6d654d20 0079726f 003e0d0a     abel Memory...>.
   1a39c:	72540d0a 6d736e61 69747469 0d0a676e     ..Transmitting..
   1a3ac:	0000003e 49480d0a 3935332d 74532033     >.....HI-3593 St
   1a3bc:	73757461 6f43202c 6f72746e 6552206c     atus, Control Re
   1a3cc:	74736967 0d737265 0000000a 20090d0a     gisters........ 
   1a3dc:	2a2a2a20 50202a2a 73736572 70732020      ***** Press  sp
   1a3ec:	62656361 74207261 6f63206f 6e69746e     acebar to contin
   1a3fc:	2a206575 2a2a2a2a 0000002a 540d0a0a     ue ******......T
   1a40c:	736e6172 2074696d 73756150 0d0a6465     ransmit Paused..
   1a41c:	00000000 72500d0a 20737365 44454c4f     ......Press OLED
   1a42c:	5455425f 2d4e4f54 6f742032 61727420     _BUTTON-2 to tra
   1a43c:	696d736e 6e6f2074 72662065 20656d61     nsmit one frame 
   1a44c:	20646e61 73756170 000d0a65 72500d0a     and pause.....Pr
   1a45c:	20737365 44454c4f 5455425f 2d4e4f54     ess OLED_BUTTON-
   1a46c:	6f742033 73655220 0a656d75 0000000d     3 to Resume.....
   1a47c:	72540d0a 6d736e61 65747469 65522072     ..Transmitter Re
   1a48c:	656d7573 2e2e2e64 00000d0a 65520d0a     sumed.........Re
   1a49c:	76696563 31207265 62614c20 0a736c65     ceiver 1 Labels.
   1a4ac:	0000000d 65520d0a 76696563 32207265     ......Receiver 2
   1a4bc:	62614c20 0a736c65 0000000d 72540d0a      Labels.......Tr
   1a4cc:	6d736e61 26207469 63655220 65766965     ansmit & Receive
   1a4dc:	68634520 6f4d206f 0d0a6564 00000000      Echo Mode......
   1a4ec:	6c530d0a 5320776f 64656570 00000000     ..Slow Speed....
   1a4fc:	61460d0a 53207473 64656570 00000000     ..Fast Speed....
   1a50c:	72540d0a 6d736e61 65747469 61502072     ..Transmitter Pa
   1a51c:	79746972 616e4520 64656c62 00000000     rity Enabled....
   1a52c:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1a53c:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
   1a54c:	61540d0a 20656c62 6562616c 6120736c     ..Table labels a
   1a55c:	45206572 6c62616e 00006465 78450d0a     re Enabled....Ex
   1a56c:	726f6c70 4d207265 0a65646f 0000000d     plorer Mode.....
   1a57c:	6c200d0a 6c656261 61542073 20656c62     .. labels Table 
   1a58c:	45207369 6c62616e 00006465 2d0a0d0a     is Enabled.....-
   1a59c:	42202d2d 6f747475 6f43206e 6e616d6d     -- Button Comman
   1a5ac:	2d207364 00002d2d 20200d0a 63617073     ds ---....  spac
   1a5bc:	72616265 206f7420 70736944 2079616c     ebar to Display 
   1a5cc:	74617453 61207375 4320646e 72746e6f     Status and Contr
   1a5dc:	52206c6f 73696765 73726574 00000000     ol Registers....
   1a5ec:	20200d0a 44454c4f 5455422d 324e4f54     ..  OLED-BUTTON2
   1a5fc:	61727420 696d736e 6e6f2074 656d2065      transmit one me
   1a60c:	67617373 72662065 74206d6f 736e6172     ssage from trans
   1a61c:	2074696d 66667562 00007265 20200d0a     mit buffer....  
   1a62c:	6f74204c 69725020 4c20746e 6c656261     L to Print Label
   1a63c:	6d654d20 0a79726f 0000000d 72500d0a      Memory.......Pr
   1a64c:	20737365 45544e45 6f742052 61725420     ess ENTER to Tra
   1a65c:	696d736e 726f2074 65737520 65687420     nsmit or use the
   1a66c:	294d2820 6d6f6320 646e616d 206f7420      (M) command to 
   1a67c:	65746e65 20612072 74737563 6d206d6f     enter a custom m
   1a68c:	61737365 00006567 73657250 57532073     essage..Press SW
   1a69c:	726f2034 61707320 61626563 6f742072     4 or spacebar to
   1a6ac:	6e6f6320 756e6974 00000065 73657250      continue...Pres
   1a6bc:	70732073 62656361 74207261 6f63206f     s spacebar to co
   1a6cc:	6e69746e 00006575 433e0d0a 616d6d6f     ntinue....>Comma
   1a6dc:	4d20646e 00000000 6e450d0a 20726574     nd M......Enter 
   1a6ec:	79622033 20736574 414c202b 204c4542     3 bytes + LABEL 
   1a6fc:	54206f74 736e6172 2074696d 6c6c6f66     to Transmit foll
   1a70c:	6465776f 20796220 45544e45 000d0a52     owed by ENTER...
   1a71c:	6f540d0a 61725420 696d736e 65202c74     ..To Transmit, e
   1a72c:	7265746e 62203320 73657479 6c6f6620     nter 3 bytes fol
   1a73c:	65776f6c 79622064 4c206120 6c656261     lowed by a Label
   1a74c:	74796220 6f662065 776f6c6c 62206465      byte followed b
   1a75c:	4e452079 0a524554 0000000d 6d726f46     y ENTER.....Form
   1a76c:	203a7461 73746942 322d3233 42202c35     at: Bits32-25, B
   1a77c:	32737469 37312d34 6942202c 36317374     its24-17, Bits16
   1a78c:	202c392d 4542414c 3a0d0a4c 00000000     -9, LABEL..:....
   1a79c:	6d617845 3a656c70 20313020 34203332     Example: 01 23 4
   1a7ac:	37362035 544e4520 0d0a5245 0000003a     5 67 ENTER..:...
   1a7bc:	65725020 52207373 52555445 0000004e      Press RETURN...
   1a7cc:	61725420 696d736e 676e6974 002e2e2e      Transmiting....
   1a7dc:	61725420 696d736e 21646574 00000000      Transmited!....
   1a7ec:	6d6d6f43 20646e61 49203a49 6572636e     Command I: Incre
   1a7fc:	746e656d 74616420 3e0d0a61 00000000     ment data..>....

0001a80c <_ZL12LabelArray_1>:
   1a80c:	c1215d1d 9616efdd 3f5f9f0d 0000ffbf     .]!......._?....
	...

0001a82c <maxEventCount>:
   1a82c:	00800008                                         ..

0001a82e <sizeOfEventQueue>:
   1a82e:	ffff0080                                         ..

0001a830 <forever>:
   1a830:	7fffffff                                ....

0001a834 <_ZTV14Calendar_Class>:
	...
   1a83c:	00010fb1 00011001                       ........

0001a844 <_ZTV17DateTimeLog_Class>:
	...
   1a84c:	0001080b 0001080b                       ........

0001a854 <_ZTV9CDC_Class>:
	...
   1a85c:	00011aad 00011b8d 00011701 00011a75     ............u...
   1a86c:	00011c25 00011a39 0001191d 0001196d     %...9.......m...
   1a87c:	00011a95 00011af5                       ........

0001a884 <_ZTV6Stream>:
	...
   1a88c:	0001080b 00011cf5 00011701 00011715     ................
   1a89c:	0001080b 0001080b 0001080b 2e257830     ............0x%.
   1a8ac:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1a8bc:	0066766f                                ovf.

0001a8c0 <_ZTV5Print>:
	...
   1a8c8:	0001080b 00011cf5 00011701 00011715     ................

0001a8d8 <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1a8d8:	00000100 00000000 00000000              ............

0001a8e4 <_ZTT16Maintenance_Tool>:
   1a8e4:	0001a8f8 0001a8e4                       ........

0001a8ec <_ZTV16Maintenance_Tool>:
   1a8ec:	00000100 00000000 00000000 73616c46     ............Flas
   1a8fc:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   1a90c:	41502074 44455353 00000000 73616c46     t PASSED....Flas
   1a91c:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   1a92c:	41462074 44454c49 00000000 682f2e2e     t FAILED....../h
   1a93c:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   1a94c:	2e2f2e2e 2e2e2f2e 554c412f 6972445f     ../../../ALU_Dri
   1a95c:	2f726576 5f554c41 76697244 682f7265     ver/ALU_Driver/h
   1a96c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1a97c:	7361625f 00682e65                       _base.h.

0001a984 <defaultParameters>:
   1a984:	00004020                                 @..

0001a988 <defaultPreferences>:
   1a988:	000000fa 00000032 00776f70 00000000     ....2...pow.....

0001a998 <TWO52>:
   1a998:	00000000 43300000 00000000 c3300000     ......0C......0.

0001a9a8 <_global_impure_ptr>:
   1a9a8:	200001f0                                ... 

0001a9ac <_init>:
   1a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9ae:	bf00      	nop
   1a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a9b2:	bc08      	pop	{r3}
   1a9b4:	469e      	mov	lr, r3
   1a9b6:	4770      	bx	lr

0001a9b8 <__init_array_start>:
   1a9b8:	00019521 	.word	0x00019521

0001a9bc <__frame_dummy_init_array_entry>:
   1a9bc:	00000289 000007fd 0000086d 00000ea9     ........m.......
   1a9cc:	00001041 00001091 0000189d 0000f899     A...............
   1a9dc:	0000fd7d 000106b5 00010d65 0001124d     }.......e...M...
   1a9ec:	000116c9 00011ca5 000124a1 0001271d     .........$...'..
   1a9fc:	00013b89 00014189 000145c9 000149d5     .;...A...E...I..
   1aa0c:	000152bd 00015575 00016819 000170bd     .R..uU...h...p..

0001aa1c <_fini>:
   1aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa1e:	bf00      	nop
   1aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1aa22:	bc08      	pop	{r3}
   1aa24:	469e      	mov	lr, r3
   1aa26:	4770      	bx	lr

0001aa28 <__fini_array_start>:
   1aa28:	00000265 	.word	0x00000265
