
P0_ALU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001ddc4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001ddc4  0001ddc4  0002ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000061c  20000000  0001ddcc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003061c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003061c  2**0
                  CONTENTS
  5 .bss          0000d350  20000620  0001e3f0  00030620  2**3
                  ALLOC
  6 .stack        00010000  2000d970  0002b740  00030620  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003064a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00106d5f  00000000  00000000  000306a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015d93  00000000  00000000  00137402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002b970  00000000  00000000  0014d195  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004a08  00000000  00000000  00178b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004660  00000000  00000000  0017d50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006a833  00000000  00000000  00181b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000708a4  00000000  00000000  001ec3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014edad  00000000  00000000  0025cc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00012b90  00000000  00000000  003ab9f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 d9 01 20 45 11 00 00 c9 11 00 00 c9 11 00 00     p.. E...........
      10:	c9 11 00 00 c9 11 00 00 c9 11 00 00 00 00 00 00     ................
	...
      2c:	c9 11 00 00 c9 11 00 00 00 00 00 00 c9 11 00 00     ................
      3c:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      4c:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      5c:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      6c:	c5 a5 00 00 69 90 00 00 79 90 00 00 c9 11 00 00     ....i...y.......
      7c:	89 90 00 00 99 90 00 00 a9 90 00 00 b9 90 00 00     ................
      8c:	c9 90 00 00 d9 90 00 00 e9 90 00 00 c9 11 00 00     ................
      9c:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      ac:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      bc:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      cc:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
      dc:	c9 11 00 00 c9 11 00 00 c9 11 00 00 00 00 00 00     ................
	...
      f4:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     104:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     114:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     124:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     134:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     144:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     154:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     164:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     174:	c9 11 00 00 c9 11 00 00 55 82 00 00 e5 f5 00 00     ........U.......
     184:	f5 f5 00 00 05 f6 00 00 15 f6 00 00 c9 11 00 00     ................
     194:	01 c0 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     1a4:	c9 11 00 00 c9 11 00 00 c9 11 00 00 1d c0 00 00     ................
     1b4:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     1c4:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     1d4:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     1e4:	c9 11 00 00 c9 11 00 00 e1 cc 00 00 c9 11 00 00     ................
     1f4:	fd cc 00 00 c9 11 00 00 19 cd 00 00 35 cd 00 00     ............5...
     204:	51 cd 00 00 6d cd 00 00 c9 11 00 00 c9 11 00 00     Q...m...........
     214:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     224:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     234:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     244:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................
     254:	c9 11 00 00 c9 11 00 00 c9 11 00 00 c9 11 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000620 	.word	0x20000620
     280:	00000000 	.word	0x00000000
     284:	0001ddcc 	.word	0x0001ddcc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001ddcc 	.word	0x0001ddcc
     2c4:	20000624 	.word	0x20000624
     2c8:	0001ddcc 	.word	0x0001ddcc
     2cc:	00000000 	.word	0x00000000

000002d0 <wdt_set_timeout_period>:
 * \retval -1 Always on or enabled, can't set again.
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	60b9      	str	r1, [r7, #8]
     2da:	4613      	mov	r3, r2
     2dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(wdt && wdt->dev.hw);
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d005      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d001      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2ec:	2301      	movs	r3, #1
     2ee:	e000      	b.n	2f2 <wdt_set_timeout_period+0x22>
     2f0:	2300      	movs	r3, #0
     2f2:	226f      	movs	r2, #111	; 0x6f
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <wdt_set_timeout_period+0x44>)
     2f6:	4618      	mov	r0, r3
     2f8:	4b07      	ldr	r3, [pc, #28]	; (318 <wdt_set_timeout_period+0x48>)
     2fa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	88fa      	ldrh	r2, [r7, #6]
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4618      	mov	r0, r3
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <wdt_set_timeout_period+0x4c>)
     306:	4798      	blx	r3
     308:	4603      	mov	r3, r0
}
     30a:	4618      	mov	r0, r3
     30c:	3710      	adds	r7, #16
     30e:	46bd      	mov	sp, r7
     310:	bd80      	pop	{r7, pc}
     312:	bf00      	nop
     314:	0001c8fc 	.word	0x0001c8fc
     318:	00007b0d 	.word	0x00007b0d
     31c:	0000f801 	.word	0x0000f801

00000320 <wdt_enable>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <wdt_enable+0x1a>
     32e:	687b      	ldr	r3, [r7, #4]
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d001      	beq.n	33a <wdt_enable+0x1a>
     336:	2301      	movs	r3, #1
     338:	e000      	b.n	33c <wdt_enable+0x1c>
     33a:	2300      	movs	r3, #0
     33c:	228c      	movs	r2, #140	; 0x8c
     33e:	4906      	ldr	r1, [pc, #24]	; (358 <wdt_enable+0x38>)
     340:	4618      	mov	r0, r3
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <wdt_enable+0x3c>)
     344:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     346:	687b      	ldr	r3, [r7, #4]
     348:	4618      	mov	r0, r3
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <wdt_enable+0x40>)
     34c:	4798      	blx	r3
     34e:	4603      	mov	r3, r0
}
     350:	4618      	mov	r0, r3
     352:	3708      	adds	r7, #8
     354:	46bd      	mov	sp, r7
     356:	bd80      	pop	{r7, pc}
     358:	0001c8fc 	.word	0x0001c8fc
     35c:	00007b0d 	.word	0x00007b0d
     360:	0000f991 	.word	0x0000f991

00000364 <wdt_feed>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2b00      	cmp	r3, #0
     370:	d005      	beq.n	37e <wdt_feed+0x1a>
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <wdt_feed+0x1a>
     37a:	2301      	movs	r3, #1
     37c:	e000      	b.n	380 <wdt_feed+0x1c>
     37e:	2300      	movs	r3, #0
     380:	22a9      	movs	r2, #169	; 0xa9
     382:	4906      	ldr	r1, [pc, #24]	; (39c <wdt_feed+0x38>)
     384:	4618      	mov	r0, r3
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <wdt_feed+0x3c>)
     388:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	4618      	mov	r0, r3
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <wdt_feed+0x40>)
     390:	4798      	blx	r3
     392:	4603      	mov	r3, r0
}
     394:	4618      	mov	r0, r3
     396:	3708      	adds	r7, #8
     398:	46bd      	mov	sp, r7
     39a:	bd80      	pop	{r7, pc}
     39c:	0001c8fc 	.word	0x0001c8fc
     3a0:	00007b0d 	.word	0x00007b0d
     3a4:	0000f9dd 	.word	0x0000f9dd

000003a8 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
	{
	data = v;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	683a      	ldr	r2, [r7, #0]
     3b6:	601a      	str	r2, [r3, #0]
	}
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3da:	805a      	strh	r2, [r3, #2]
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	605a      	str	r2, [r3, #4]
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	3308      	adds	r3, #8
     3e6:	2100      	movs	r1, #0
     3e8:	4618      	mov	r0, r3
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <_ZN5eventC1Ev+0x3c>)
     3ec:	4798      	blx	r3
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	60da      	str	r2, [r3, #12]
	{
		
	}
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	000003a9 	.word	0x000003a9

00000404 <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     40c:	4b04      	ldr	r3, [pc, #16]	; (420 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	2201      	movs	r2, #1
     412:	f883 2020 	strb.w	r2, [r3, #32]
}
     416:	bf00      	nop
     418:	370c      	adds	r7, #12
     41a:	46bd      	mov	sp, r7
     41c:	bc80      	pop	{r7}
     41e:	4770      	bx	lr
     420:	20000734 	.word	0x20000734

00000424 <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <_ZN9ALU_ClassC1Ev+0x34>)
     432:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     434:	4a09      	ldr	r2, [pc, #36]	; (45c <_ZN9ALU_ClassC1Ev+0x38>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
	clk_rate       = 1000;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     440:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	timeout_period = 4096*1024;
     444:	687b      	ldr	r3, [r7, #4]
     446:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     44a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
} //ALU_Class
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	3708      	adds	r7, #8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	00003e09 	.word	0x00003e09
     45c:	20000734 	.word	0x20000734

00000460 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN9ALU_ClassD1Ev+0x1c>)
     46e:	4798      	blx	r3
{
} //~ALU_Class
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00003e29 	.word	0x00003e29

00000480 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     480:	b580      	push	{r7, lr}
     482:	b086      	sub	sp, #24
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	event	e;
     488:	f107 0308 	add.w	r3, r7, #8
     48c:	4618      	mov	r0, r3
     48e:	4b1f      	ldr	r3, [pc, #124]	; (50c <_ZN9ALU_Class4InitEv+0x8c>)
     490:	4798      	blx	r3
	ptrPbit=&pBit;
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a1e      	ldr	r2, [pc, #120]	; (510 <_ZN9ALU_Class4InitEv+0x90>)
     496:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	StartLivePulse();
     49a:	6878      	ldr	r0, [r7, #4]
     49c:	4b1d      	ldr	r3, [pc, #116]	; (514 <_ZN9ALU_Class4InitEv+0x94>)
     49e:	4798      	blx	r3
		
	if (hvac.Init())
     4a0:	481d      	ldr	r0, [pc, #116]	; (518 <_ZN9ALU_Class4InitEv+0x98>)
     4a2:	4b1e      	ldr	r3, [pc, #120]	; (51c <_ZN9ALU_Class4InitEv+0x9c>)
     4a4:	4798      	blx	r3
     4a6:	4603      	mov	r3, r0
     4a8:	2b00      	cmp	r3, #0
     4aa:	d027      	beq.n	4fc <_ZN9ALU_Class4InitEv+0x7c>
	{
		cBit.isOK=true;
     4ac:	4b1c      	ldr	r3, [pc, #112]	; (520 <_ZN9ALU_Class4InitEv+0xa0>)
     4ae:	2201      	movs	r2, #1
     4b0:	701a      	strb	r2, [r3, #0]
	//	SetInitialConfiguration(configuration);
	//	memory.WriteDefaultState();
	//	hvac.SetInitialState();
	//	uhr.Init();
	//	hvac.saveCurrentState();
		listener.Init();
     4b2:	481c      	ldr	r0, [pc, #112]	; (524 <_ZN9ALU_Class4InitEv+0xa4>)
     4b4:	4b1c      	ldr	r3, [pc, #112]	; (528 <_ZN9ALU_Class4InitEv+0xa8>)
     4b6:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     4b8:	481c      	ldr	r0, [pc, #112]	; (52c <_ZN9ALU_Class4InitEv+0xac>)
     4ba:	4b1d      	ldr	r3, [pc, #116]	; (530 <_ZN9ALU_Class4InitEv+0xb0>)
     4bc:	4798      	blx	r3
     4be:	4603      	mov	r3, r0
     4c0:	f083 0301 	eor.w	r3, r3, #1
     4c4:	b2db      	uxtb	r3, r3
     4c6:	2b00      	cmp	r3, #0
     4c8:	d001      	beq.n	4ce <_ZN9ALU_Class4InitEv+0x4e>
		{
		//	NotifyError(kARINCINnterfaceError,s);
			//return s;
			return false;
     4ca:	2300      	movs	r3, #0
     4cc:	e01a      	b.n	504 <_ZN9ALU_Class4InitEv+0x84>
		}
		else
		{
			arincTimer.Start_oneShot_task(FUNC_PTR(ARINCTimeUp),500);
     4ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     4d2:	4918      	ldr	r1, [pc, #96]	; (534 <_ZN9ALU_Class4InitEv+0xb4>)
     4d4:	4818      	ldr	r0, [pc, #96]	; (538 <_ZN9ALU_Class4InitEv+0xb8>)
     4d6:	4b19      	ldr	r3, [pc, #100]	; (53c <_ZN9ALU_Class4InitEv+0xbc>)
     4d8:	4798      	blx	r3
// 				NotifyError(kpBITError,s);
// 				return s;
// 			}
// 			else
// 			{
				InitTaskArray();
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	4618      	mov	r0, r3
     4de:	4b18      	ldr	r3, [pc, #96]	; (540 <_ZN9ALU_Class4InitEv+0xc0>)
     4e0:	4798      	blx	r3
				EnableWatchDog();
     4e2:	6878      	ldr	r0, [r7, #4]
     4e4:	4b17      	ldr	r3, [pc, #92]	; (544 <_ZN9ALU_Class4InitEv+0xc4>)
     4e6:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     4e8:	2200      	movs	r2, #0
     4ea:	f44f 7182 	mov.w	r1, #260	; 0x104
     4ee:	6878      	ldr	r0, [r7, #4]
     4f0:	4b15      	ldr	r3, [pc, #84]	; (548 <_ZN9ALU_Class4InitEv+0xc8>)
     4f2:	4798      	blx	r3
				isOK=true;
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	2201      	movs	r2, #1
     4f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	//while(1);

	

	  
	return isOK;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
     502:	b2db      	uxtb	r3, r3
}
     504:	4618      	mov	r0, r3
     506:	3718      	adds	r7, #24
     508:	46bd      	mov	sp, r7
     50a:	bd80      	pop	{r7, pc}
     50c:	000003c5 	.word	0x000003c5
     510:	2000071c 	.word	0x2000071c
     514:	000007e9 	.word	0x000007e9
     518:	2000101c 	.word	0x2000101c
     51c:	00002771 	.word	0x00002771
     520:	20000730 	.word	0x20000730
     524:	20003284 	.word	0x20003284
     528:	00013299 	.word	0x00013299
     52c:	20000c48 	.word	0x20000c48
     530:	00001b8d 	.word	0x00001b8d
     534:	00000405 	.word	0x00000405
     538:	200006bc 	.word	0x200006bc
     53c:	00013ff5 	.word	0x00013ff5
     540:	00003e3d 	.word	0x00003e3d
     544:	0000078d 	.word	0x0000078d
     548:	00000871 	.word	0x00000871

0000054c <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     54c:	b590      	push	{r4, r7, lr}
     54e:	b089      	sub	sp, #36	; 0x24
     550:	af02      	add	r7, sp, #8
     552:	6078      	str	r0, [r7, #4]
	event e;
     554:	f107 0308 	add.w	r3, r7, #8
     558:	4618      	mov	r0, r3
     55a:	4b2c      	ldr	r3, [pc, #176]	; (60c <_ZN9ALU_Class13RunControllerEv+0xc0>)
     55c:	4798      	blx	r3
	
	
	   while (pBit)
     55e:	482c      	ldr	r0, [pc, #176]	; (610 <_ZN9ALU_Class13RunControllerEv+0xc4>)
     560:	4b2c      	ldr	r3, [pc, #176]	; (614 <_ZN9ALU_Class13RunControllerEv+0xc8>)
     562:	4798      	blx	r3
     564:	4603      	mov	r3, r0
     566:	2b00      	cmp	r3, #0
     568:	d04b      	beq.n	602 <_ZN9ALU_Class13RunControllerEv+0xb6>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     56a:	4b2b      	ldr	r3, [pc, #172]	; (618 <_ZN9ALU_Class13RunControllerEv+0xcc>)
     56c:	4a2b      	ldr	r2, [pc, #172]	; (61c <_ZN9ALU_Class13RunControllerEv+0xd0>)
     56e:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     570:	687b      	ldr	r3, [r7, #4]
     572:	f893 3020 	ldrb.w	r3, [r3, #32]
     576:	b2db      	uxtb	r3, r3
     578:	f083 0301 	eor.w	r3, r3, #1
     57c:	b2db      	uxtb	r3, r3
     57e:	2b00      	cmp	r3, #0
     580:	d028      	beq.n	5d4 <_ZN9ALU_Class13RunControllerEv+0x88>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     582:	f107 0108 	add.w	r1, r7, #8
     586:	2308      	movs	r3, #8
     588:	9300      	str	r3, [sp, #0]
     58a:	2302      	movs	r3, #2
     58c:	f44f 7240 	mov.w	r2, #768	; 0x300
     590:	4821      	ldr	r0, [pc, #132]	; (618 <_ZN9ALU_Class13RunControllerEv+0xcc>)
     592:	4c23      	ldr	r4, [pc, #140]	; (620 <_ZN9ALU_Class13RunControllerEv+0xd4>)
     594:	47a0      	blx	r4
     596:	4603      	mov	r3, r0
     598:	2b00      	cmp	r3, #0
     59a:	d006      	beq.n	5aa <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     59c:	f107 0308 	add.w	r3, r7, #8
     5a0:	4619      	mov	r1, r3
     5a2:	6878      	ldr	r0, [r7, #4]
     5a4:	4b1f      	ldr	r3, [pc, #124]	; (624 <_ZN9ALU_Class13RunControllerEv+0xd8>)
     5a6:	4798      	blx	r3
     5a8:	e7e2      	b.n	570 <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if(listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,4)){
     5aa:	f107 0108 	add.w	r1, r7, #8
     5ae:	2304      	movs	r3, #4
     5b0:	9300      	str	r3, [sp, #0]
     5b2:	2303      	movs	r3, #3
     5b4:	f44f 7200 	mov.w	r2, #512	; 0x200
     5b8:	4817      	ldr	r0, [pc, #92]	; (618 <_ZN9ALU_Class13RunControllerEv+0xcc>)
     5ba:	4c19      	ldr	r4, [pc, #100]	; (620 <_ZN9ALU_Class13RunControllerEv+0xd4>)
     5bc:	47a0      	blx	r4
     5be:	4603      	mov	r3, r0
     5c0:	2b00      	cmp	r3, #0
     5c2:	d106      	bne.n	5d2 <_ZN9ALU_Class13RunControllerEv+0x86>
					   break;
				   }else{
						PrepareNewEvent(kALUEventSimpleResume);
     5c4:	2200      	movs	r2, #0
     5c6:	f240 1107 	movw	r1, #263	; 0x107
     5ca:	6878      	ldr	r0, [r7, #4]
     5cc:	4b16      	ldr	r3, [pc, #88]	; (628 <_ZN9ALU_Class13RunControllerEv+0xdc>)
     5ce:	4798      	blx	r3
		   while (!arincTXTimeUP)
     5d0:	e7ce      	b.n	570 <_ZN9ALU_Class13RunControllerEv+0x24>
					   break;
     5d2:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     5d4:	6878      	ldr	r0, [r7, #4]
     5d6:	4b15      	ldr	r3, [pc, #84]	; (62c <_ZN9ALU_Class13RunControllerEv+0xe0>)
     5d8:	4798      	blx	r3
			arincTXTimeUP=false;
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	2200      	movs	r2, #0
     5de:	f883 2020 	strb.w	r2, [r3, #32]
			if (interfaces.isMaintenanceActivated)
     5e2:	4b13      	ldr	r3, [pc, #76]	; (630 <_ZN9ALU_Class13RunControllerEv+0xe4>)
     5e4:	785b      	ldrb	r3, [r3, #1]
     5e6:	b2db      	uxtb	r3, r3
     5e8:	2b00      	cmp	r3, #0
     5ea:	d1b8      	bne.n	55e <_ZN9ALU_Class13RunControllerEv+0x12>
			{
			} 
			else
			{
				arincTimer.Remove_task(FUNC_PTR(ARINCTimeUp));
     5ec:	4911      	ldr	r1, [pc, #68]	; (634 <_ZN9ALU_Class13RunControllerEv+0xe8>)
     5ee:	4812      	ldr	r0, [pc, #72]	; (638 <_ZN9ALU_Class13RunControllerEv+0xec>)
     5f0:	4b12      	ldr	r3, [pc, #72]	; (63c <_ZN9ALU_Class13RunControllerEv+0xf0>)
     5f2:	4798      	blx	r3
				arincTimer.Start_oneShot_task(FUNC_PTR(ARINCTimeUp),500);
     5f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     5f8:	490e      	ldr	r1, [pc, #56]	; (634 <_ZN9ALU_Class13RunControllerEv+0xe8>)
     5fa:	480f      	ldr	r0, [pc, #60]	; (638 <_ZN9ALU_Class13RunControllerEv+0xec>)
     5fc:	4b10      	ldr	r3, [pc, #64]	; (640 <_ZN9ALU_Class13RunControllerEv+0xf4>)
     5fe:	4798      	blx	r3
	   while (pBit)
     600:	e7ad      	b.n	55e <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     602:	bf00      	nop
     604:	4618      	mov	r0, r3
     606:	371c      	adds	r7, #28
     608:	46bd      	mov	sp, r7
     60a:	bd90      	pop	{r4, r7, pc}
     60c:	000003c5 	.word	0x000003c5
     610:	2000071c 	.word	0x2000071c
     614:	0000236f 	.word	0x0000236f
     618:	20003284 	.word	0x20003284
     61c:	00000a8d 	.word	0x00000a8d
     620:	00013379 	.word	0x00013379
     624:	00000645 	.word	0x00000645
     628:	00000871 	.word	0x00000871
     62c:	000008bd 	.word	0x000008bd
     630:	20000c48 	.word	0x20000c48
     634:	00000405 	.word	0x00000405
     638:	200006bc 	.word	0x200006bc
     63c:	00013f85 	.word	0x00013f85
     640:	00013ff5 	.word	0x00013ff5

00000644 <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     644:	b580      	push	{r7, lr}
     646:	b086      	sub	sp, #24
     648:	af00      	add	r7, sp, #0
     64a:	6078      	str	r0, [r7, #4]
     64c:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     64e:	4b28      	ldr	r3, [pc, #160]	; (6f0 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     650:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
     654:	4a26      	ldr	r2, [pc, #152]	; (6f0 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     656:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	alu.currentTask = e.data.wordData[0];
     65a:	683b      	ldr	r3, [r7, #0]
     65c:	891b      	ldrh	r3, [r3, #8]
     65e:	461a      	mov	r2, r3
     660:	4b23      	ldr	r3, [pc, #140]	; (6f0 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     662:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	alu.taskEntryTime= hvacTimer.Get_ticks();
     666:	4823      	ldr	r0, [pc, #140]	; (6f4 <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     668:	4b23      	ldr	r3, [pc, #140]	; (6f8 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     66a:	4798      	blx	r3
     66c:	4602      	mov	r2, r0
     66e:	4b20      	ldr	r3, [pc, #128]	; (6f0 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     670:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150




	switch (alu.currentTask)
     674:	4b1e      	ldr	r3, [pc, #120]	; (6f0 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     676:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
     67a:	f240 1205 	movw	r2, #261	; 0x105
     67e:	4293      	cmp	r3, r2
     680:	d026      	beq.n	6d0 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     682:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     686:	d205      	bcs.n	694 <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     688:	2b03      	cmp	r3, #3
     68a:	d01a      	beq.n	6c2 <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     68c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     690:	d008      	beq.n	6a4 <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     692:	e024      	b.n	6de <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     694:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     698:	d00e      	beq.n	6b8 <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     69a:	f240 1207 	movw	r2, #263	; 0x107
     69e:	4293      	cmp	r3, r2
     6a0:	d005      	beq.n	6ae <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     6a2:	e01c      	b.n	6de <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     6a4:	2101      	movs	r1, #1
     6a6:	4815      	ldr	r0, [pc, #84]	; (6fc <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     6a8:	4b15      	ldr	r3, [pc, #84]	; (700 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     6aa:	4798      	blx	r3
		break;
     6ac:	e01c      	b.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     6ae:	2101      	movs	r1, #1
     6b0:	4812      	ldr	r0, [pc, #72]	; (6fc <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     6b2:	4b14      	ldr	r3, [pc, #80]	; (704 <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     6b4:	4798      	blx	r3
		break;
     6b6:	e017      	b.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     6b8:	2100      	movs	r1, #0
     6ba:	4810      	ldr	r0, [pc, #64]	; (6fc <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     6bc:	4b12      	ldr	r3, [pc, #72]	; (708 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     6be:	4798      	blx	r3
		break;
     6c0:	e012      	b.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     6c2:	f107 0308 	add.w	r3, r7, #8
     6c6:	4911      	ldr	r1, [pc, #68]	; (70c <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     6c8:	4618      	mov	r0, r3
     6ca:	4b11      	ldr	r3, [pc, #68]	; (710 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     6cc:	4798      	blx	r3
		break;
     6ce:	e00b      	b.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     6d0:	f107 0310 	add.w	r3, r7, #16
     6d4:	490d      	ldr	r1, [pc, #52]	; (70c <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     6d6:	4618      	mov	r0, r3
     6d8:	4b0d      	ldr	r3, [pc, #52]	; (710 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     6da:	4798      	blx	r3
		break;
     6dc:	e004      	b.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     6de:	2100      	movs	r1, #0
     6e0:	4806      	ldr	r0, [pc, #24]	; (6fc <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     6e2:	4b09      	ldr	r3, [pc, #36]	; (708 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     6e4:	4798      	blx	r3
		break;
     6e6:	bf00      	nop
	}
}
     6e8:	bf00      	nop
     6ea:	3718      	adds	r7, #24
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}
     6f0:	20000738 	.word	0x20000738
     6f4:	2000067c 	.word	0x2000067c
     6f8:	00013fdd 	.word	0x00013fdd
     6fc:	2000101c 	.word	0x2000101c
     700:	00002a05 	.word	0x00002a05
     704:	00002881 	.word	0x00002881
     708:	000039b1 	.word	0x000039b1
     70c:	20000c48 	.word	0x20000c48
     710:	00001c25 	.word	0x00001c25

00000714 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     714:	b580      	push	{r7, lr}
     716:	b082      	sub	sp, #8
     718:	af00      	add	r7, sp, #0
     71a:	6078      	str	r0, [r7, #4]
	activeLine=arinc.ar->GetActiveLine();
     71c:	4b16      	ldr	r3, [pc, #88]	; (778 <_ZN9ALU_Class15GetSelectedAMMCEv+0x64>)
     71e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     722:	4a15      	ldr	r2, [pc, #84]	; (778 <_ZN9ALU_Class15GetSelectedAMMCEv+0x64>)
     724:	f8d2 22b0 	ldr.w	r2, [r2, #688]	; 0x2b0
     728:	6812      	ldr	r2, [r2, #0]
     72a:	3a10      	subs	r2, #16
     72c:	6812      	ldr	r2, [r2, #0]
     72e:	4413      	add	r3, r2
     730:	4618      	mov	r0, r3
     732:	4b12      	ldr	r3, [pc, #72]	; (77c <_ZN9ALU_Class15GetSelectedAMMCEv+0x68>)
     734:	4798      	blx	r3
     736:	4603      	mov	r3, r0
     738:	461a      	mov	r2, r3
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
		switch (activeLine)
     740:	687b      	ldr	r3, [r7, #4]
     742:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
     746:	2b01      	cmp	r3, #1
     748:	d002      	beq.n	750 <_ZN9ALU_Class15GetSelectedAMMCEv+0x3c>
     74a:	2b02      	cmp	r3, #2
     74c:	d004      	beq.n	758 <_ZN9ALU_Class15GetSelectedAMMCEv+0x44>
     74e:	e007      	b.n	760 <_ZN9ALU_Class15GetSelectedAMMCEv+0x4c>
		{
			case 1:
			ammc=&ammc1;
     750:	4b0b      	ldr	r3, [pc, #44]	; (780 <_ZN9ALU_Class15GetSelectedAMMCEv+0x6c>)
     752:	4a0c      	ldr	r2, [pc, #48]	; (784 <_ZN9ALU_Class15GetSelectedAMMCEv+0x70>)
     754:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     756:	e007      	b.n	768 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>
			
			case 2:
			ammc=&ammc2;
     758:	4b09      	ldr	r3, [pc, #36]	; (780 <_ZN9ALU_Class15GetSelectedAMMCEv+0x6c>)
     75a:	4a0b      	ldr	r2, [pc, #44]	; (788 <_ZN9ALU_Class15GetSelectedAMMCEv+0x74>)
     75c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     75e:	e003      	b.n	768 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>
			default:
			ammc=&ammc1;
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <_ZN9ALU_Class15GetSelectedAMMCEv+0x6c>)
     762:	4a08      	ldr	r2, [pc, #32]	; (784 <_ZN9ALU_Class15GetSelectedAMMCEv+0x70>)
     764:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     766:	bf00      	nop
		}
	return activeLine;	
     768:	687b      	ldr	r3, [r7, #4]
     76a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
}
     76e:	4618      	mov	r0, r3
     770:	3708      	adds	r7, #8
     772:	46bd      	mov	sp, r7
     774:	bd80      	pop	{r7, pc}
     776:	bf00      	nop
     778:	200024a8 	.word	0x200024a8
     77c:	0001307f 	.word	0x0001307f
     780:	20001eac 	.word	0x20001eac
     784:	20001ea4 	.word	0x20001ea4
     788:	20001ea8 	.word	0x20001ea8

0000078c <_ZN9ALU_Class14EnableWatchDogEv>:
	else
	{
	}
	return line;
}
int32_t	ALU_Class::EnableWatchDog(void){
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]

	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     794:	687b      	ldr	r3, [r7, #4]
     796:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
     7a0:	b29b      	uxth	r3, r3
     7a2:	461a      	mov	r2, r3
     7a4:	4805      	ldr	r0, [pc, #20]	; (7bc <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7a6:	4b06      	ldr	r3, [pc, #24]	; (7c0 <_ZN9ALU_Class14EnableWatchDogEv+0x34>)
     7a8:	4798      	blx	r3
	return wdt_enable(&WATCHDOG);
     7aa:	4804      	ldr	r0, [pc, #16]	; (7bc <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7ac:	4b05      	ldr	r3, [pc, #20]	; (7c4 <_ZN9ALU_Class14EnableWatchDogEv+0x38>)
     7ae:	4798      	blx	r3
     7b0:	4603      	mov	r3, r0

	
}
     7b2:	4618      	mov	r0, r3
     7b4:	3708      	adds	r7, #8
     7b6:	46bd      	mov	sp, r7
     7b8:	bd80      	pop	{r7, pc}
     7ba:	bf00      	nop
     7bc:	2000d8b0 	.word	0x2000d8b0
     7c0:	000002d1 	.word	0x000002d1
     7c4:	00000321 	.word	0x00000321

000007c8 <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
	return wdt_feed(&WATCHDOG);
     7d0:	4803      	ldr	r0, [pc, #12]	; (7e0 <_ZN9ALU_Class12FeedWatchDogEv+0x18>)
     7d2:	4b04      	ldr	r3, [pc, #16]	; (7e4 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     7d4:	4798      	blx	r3
     7d6:	4603      	mov	r3, r0
}
     7d8:	4618      	mov	r0, r3
     7da:	3708      	adds	r7, #8
     7dc:	46bd      	mov	sp, r7
     7de:	bd80      	pop	{r7, pc}
     7e0:	2000d8b0 	.word	0x2000d8b0
     7e4:	00000365 	.word	0x00000365

000007e8 <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     7e8:	b580      	push	{r7, lr}
     7ea:	b084      	sub	sp, #16
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     7f0:	4909      	ldr	r1, [pc, #36]	; (818 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     7f2:	480a      	ldr	r0, [pc, #40]	; (81c <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     7f4:	4b0a      	ldr	r3, [pc, #40]	; (820 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     7f6:	4798      	blx	r3
     7f8:	4603      	mov	r3, r0
     7fa:	490a      	ldr	r1, [pc, #40]	; (824 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     7fc:	4618      	mov	r0, r3
     7fe:	4b0a      	ldr	r3, [pc, #40]	; (828 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     800:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     802:	480a      	ldr	r0, [pc, #40]	; (82c <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     804:	4b0a      	ldr	r3, [pc, #40]	; (830 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     806:	4798      	blx	r3
     808:	4603      	mov	r3, r0
     80a:	60fb      	str	r3, [r7, #12]
	return p;
     80c:	68fb      	ldr	r3, [r7, #12]
     80e:	b2db      	uxtb	r3, r3
}
     810:	4618      	mov	r0, r3
     812:	3710      	adds	r7, #16
     814:	46bd      	mov	sp, r7
     816:	bd80      	pop	{r7, pc}
     818:	0001c934 	.word	0x0001c934
     81c:	20003884 	.word	0x20003884
     820:	00000ac9 	.word	0x00000ac9
     824:	0001c954 	.word	0x0001c954
     828:	00000ae9 	.word	0x00000ae9
     82c:	2000d7cc 	.word	0x2000d7cc
     830:	000068cd 	.word	0x000068cd

00000834 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     834:	b580      	push	{r7, lr}
     836:	b084      	sub	sp, #16
     838:	af00      	add	r7, sp, #0
     83a:	60f8      	str	r0, [r7, #12]
     83c:	460b      	mov	r3, r1
     83e:	607a      	str	r2, [r7, #4]
     840:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     842:	68fb      	ldr	r3, [r7, #12]
     844:	7afa      	ldrb	r2, [r7, #11]
     846:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	task.prio=(uint8_t)newTask;
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	7afa      	ldrb	r2, [r7, #11]
     84e:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	AddTask(task);
     852:	68fa      	ldr	r2, [r7, #12]
     854:	68fb      	ldr	r3, [r7, #12]
     856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
     85a:	4619      	mov	r1, r3
     85c:	4610      	mov	r0, r2
     85e:	4b03      	ldr	r3, [pc, #12]	; (86c <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     860:	4798      	blx	r3

}
     862:	bf00      	nop
     864:	3710      	adds	r7, #16
     866:	46bd      	mov	sp, r7
     868:	bd80      	pop	{r7, pc}
     86a:	bf00      	nop
     86c:	00003ee5 	.word	0x00003ee5

00000870 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     870:	b580      	push	{r7, lr}
     872:	b086      	sub	sp, #24
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	460b      	mov	r3, r1
     87a:	807b      	strh	r3, [r7, #2]
     87c:	4613      	mov	r3, r2
     87e:	803b      	strh	r3, [r7, #0]
	event	e;
     880:	f107 0308 	add.w	r3, r7, #8
     884:	4618      	mov	r0, r3
     886:	4b0a      	ldr	r3, [pc, #40]	; (8b0 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     888:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     88a:	f44f 7340 	mov.w	r3, #768	; 0x300
     88e:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     890:	2302      	movs	r3, #2
     892:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     894:	887b      	ldrh	r3, [r7, #2]
     896:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     898:	883b      	ldrh	r3, [r7, #0]
     89a:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     89c:	f107 0308 	add.w	r3, r7, #8
     8a0:	4619      	mov	r1, r3
     8a2:	4804      	ldr	r0, [pc, #16]	; (8b4 <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     8a4:	4b04      	ldr	r3, [pc, #16]	; (8b8 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     8a6:	4798      	blx	r3

}
     8a8:	bf00      	nop
     8aa:	3718      	adds	r7, #24
     8ac:	46bd      	mov	sp, r7
     8ae:	bd80      	pop	{r7, pc}
     8b0:	000003c5 	.word	0x000003c5
     8b4:	20003284 	.word	0x20003284
     8b8:	0001353d 	.word	0x0001353d

000008bc <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     8bc:	b580      	push	{r7, lr}
     8be:	b088      	sub	sp, #32
     8c0:	af00      	add	r7, sp, #0
     8c2:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     8c4:	68fb      	ldr	r3, [r7, #12]
     8c6:	2200      	movs	r2, #0
     8c8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     8cc:	230c      	movs	r3, #12
     8ce:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     8d0:	68fa      	ldr	r2, [r7, #12]
     8d2:	463b      	mov	r3, r7
     8d4:	4611      	mov	r1, r2
     8d6:	4618      	mov	r0, r3
     8d8:	4b24      	ldr	r3, [pc, #144]	; (96c <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     8da:	4798      	blx	r3
     8dc:	f107 0314 	add.w	r3, r7, #20
     8e0:	463a      	mov	r2, r7
     8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
     8e6:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     8ea:	7e3b      	ldrb	r3, [r7, #24]
     8ec:	2b02      	cmp	r3, #2
     8ee:	d004      	beq.n	8fa <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     8f0:	2200      	movs	r2, #0
     8f2:	2102      	movs	r1, #2
     8f4:	68f8      	ldr	r0, [r7, #12]
     8f6:	4b1e      	ldr	r3, [pc, #120]	; (970 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     8f8:	4798      	blx	r3
	}
	while (taskList->head){
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	681b      	ldr	r3, [r3, #0]
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	2b00      	cmp	r3, #0
     902:	d01a      	beq.n	93a <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     904:	68fa      	ldr	r2, [r7, #12]
     906:	463b      	mov	r3, r7
     908:	4611      	mov	r1, r2
     90a:	4618      	mov	r0, r3
     90c:	4b17      	ldr	r3, [pc, #92]	; (96c <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     90e:	4798      	blx	r3
     910:	f107 0314 	add.w	r3, r7, #20
     914:	463a      	mov	r2, r7
     916:	e892 0003 	ldmia.w	r2, {r0, r1}
     91a:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     91e:	f107 0314 	add.w	r3, r7, #20
     922:	4619      	mov	r1, r3
     924:	68f8      	ldr	r0, [r7, #12]
     926:	4b13      	ldr	r3, [pc, #76]	; (974 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     928:	4798      	blx	r3
		RemoveTask(tk);
     92a:	68fb      	ldr	r3, [r7, #12]
     92c:	f107 0214 	add.w	r2, r7, #20
     930:	4611      	mov	r1, r2
     932:	4618      	mov	r0, r3
     934:	4b10      	ldr	r3, [pc, #64]	; (978 <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     936:	4798      	blx	r3
	while (taskList->head){
     938:	e7df      	b.n	8fa <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	RunPeriodicTasks();
     93a:	68f8      	ldr	r0, [r7, #12]
     93c:	4b0f      	ldr	r3, [pc, #60]	; (97c <_ZN9ALU_Class18ExecutePendingTaskEv+0xc0>)
     93e:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     940:	68fb      	ldr	r3, [r7, #12]
     942:	2201      	movs	r2, #1
     944:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	if (allTasksDone)
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
     94e:	2b00      	cmp	r3, #0
     950:	d005      	beq.n	95e <_ZN9ALU_Class18ExecutePendingTaskEv+0xa2>
	{
		
		PrepareNewEvent(kALUEventSimpleResume);
     952:	2200      	movs	r2, #0
     954:	f240 1107 	movw	r1, #263	; 0x107
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	4b09      	ldr	r3, [pc, #36]	; (980 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc4>)
     95c:	4798      	blx	r3
	}
	return allTasksDone; 
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
}
     964:	4618      	mov	r0, r3
     966:	3720      	adds	r7, #32
     968:	46bd      	mov	sp, r7
     96a:	bd80      	pop	{r7, pc}
     96c:	00004069 	.word	0x00004069
     970:	00000835 	.word	0x00000835
     974:	00000985 	.word	0x00000985
     978:	00003fd5 	.word	0x00003fd5
     97c:	00000aad 	.word	0x00000aad
     980:	00000871 	.word	0x00000871

00000984 <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     984:	b590      	push	{r4, r7, lr}
     986:	b085      	sub	sp, #20
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
     98c:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     98e:	4831      	ldr	r0, [pc, #196]	; (a54 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd0>)
     990:	4b31      	ldr	r3, [pc, #196]	; (a58 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd4>)
     992:	4798      	blx	r3
     994:	4602      	mov	r2, r0
     996:	687b      	ldr	r3, [r7, #4]
     998:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	switch (ct.id)
     99c:	683b      	ldr	r3, [r7, #0]
     99e:	791b      	ldrb	r3, [r3, #4]
     9a0:	3b02      	subs	r3, #2
     9a2:	2b09      	cmp	r3, #9
     9a4:	d84c      	bhi.n	a40 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>
     9a6:	a201      	add	r2, pc, #4	; (adr r2, 9ac <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9ac:	00000a07 	.word	0x00000a07
     9b0:	000009e9 	.word	0x000009e9
     9b4:	000009f7 	.word	0x000009f7
     9b8:	00000a41 	.word	0x00000a41
     9bc:	00000a41 	.word	0x00000a41
     9c0:	00000a41 	.word	0x00000a41
     9c4:	000009df 	.word	0x000009df
     9c8:	000009d5 	.word	0x000009d5
     9cc:	00000a15 	.word	0x00000a15
     9d0:	00000a23 	.word	0x00000a23
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     9d4:	2100      	movs	r1, #0
     9d6:	4821      	ldr	r0, [pc, #132]	; (a5c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd8>)
     9d8:	4b21      	ldr	r3, [pc, #132]	; (a60 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xdc>)
     9da:	4798      	blx	r3
		break;
     9dc:	e035      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUSimpleStop:
			hvac.Stop(0);
     9de:	2100      	movs	r1, #0
     9e0:	481e      	ldr	r0, [pc, #120]	; (a5c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd8>)
     9e2:	4b20      	ldr	r3, [pc, #128]	; (a64 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xe0>)
     9e4:	4798      	blx	r3
		break;
     9e6:	e030      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     9e8:	f107 0308 	add.w	r3, r7, #8
     9ec:	491e      	ldr	r1, [pc, #120]	; (a68 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xe4>)
     9ee:	4618      	mov	r0, r3
     9f0:	4b1e      	ldr	r3, [pc, #120]	; (a6c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xe8>)
     9f2:	4798      	blx	r3
		break;
     9f4:	e029      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUTaskReadARINCR1:
			arinc.ar->ReadRXBuffer(1);			
     9f6:	4b1e      	ldr	r3, [pc, #120]	; (a70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xec>)
     9f8:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     9fc:	2101      	movs	r1, #1
     9fe:	4618      	mov	r0, r3
     a00:	4b1c      	ldr	r3, [pc, #112]	; (a74 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xf0>)
     a02:	4798      	blx	r3
		break;
     a04:	e021      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUTaskArincTXMessage:
			arinc.ar->TransmitTXBuffer();
     a06:	4b1a      	ldr	r3, [pc, #104]	; (a70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xec>)
     a08:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     a0c:	4618      	mov	r0, r3
     a0e:	4b1a      	ldr	r3, [pc, #104]	; (a78 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xf4>)
     a10:	4798      	blx	r3
		break;
     a12:	e01a      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUTaskUpdateTemperatures:
			arinc.ar->SaveTemperature();		
     a14:	4b16      	ldr	r3, [pc, #88]	; (a70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xec>)
     a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     a1a:	4618      	mov	r0, r3
     a1c:	4b17      	ldr	r3, [pc, #92]	; (a7c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xf8>)
     a1e:	4798      	blx	r3
		break;
     a20:	e013      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>
		case kALUTaskUpdateFlapperValves:
			arinc.ar->SaveFlapperValveAngle(fvc.fv->ReadActualPosition());
     a22:	4b13      	ldr	r3, [pc, #76]	; (a70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xec>)
     a24:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
     a28:	461c      	mov	r4, r3
     a2a:	4b15      	ldr	r3, [pc, #84]	; (a80 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xfc>)
     a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     a2e:	4618      	mov	r0, r3
     a30:	4b14      	ldr	r3, [pc, #80]	; (a84 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x100>)
     a32:	4798      	blx	r3
     a34:	4603      	mov	r3, r0
     a36:	4619      	mov	r1, r3
     a38:	4620      	mov	r0, r4
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x104>)
     a3c:	4798      	blx	r3
		break;
     a3e:	e004      	b.n	a4a <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc6>

		default:
		hvac.Stop(0);
     a40:	2100      	movs	r1, #0
     a42:	4806      	ldr	r0, [pc, #24]	; (a5c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd8>)
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xe0>)
     a46:	4798      	blx	r3
		break;
     a48:	bf00      	nop
	}
}
     a4a:	bf00      	nop
     a4c:	3714      	adds	r7, #20
     a4e:	46bd      	mov	sp, r7
     a50:	bd90      	pop	{r4, r7, pc}
     a52:	bf00      	nop
     a54:	2000067c 	.word	0x2000067c
     a58:	00013fdd 	.word	0x00013fdd
     a5c:	2000101c 	.word	0x2000101c
     a60:	00002881 	.word	0x00002881
     a64:	000039b1 	.word	0x000039b1
     a68:	20000c48 	.word	0x20000c48
     a6c:	00001c25 	.word	0x00001c25
     a70:	200024a8 	.word	0x200024a8
     a74:	00012915 	.word	0x00012915
     a78:	00012a49 	.word	0x00012a49
     a7c:	0001208d 	.word	0x0001208d
     a80:	20005598 	.word	0x20005598
     a84:	00016e89 	.word	0x00016e89
     a88:	00011fa9 	.word	0x00011fa9

00000a8c <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     a8c:	b580      	push	{r7, lr}
     a8e:	b082      	sub	sp, #8
     a90:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     a92:	463b      	mov	r3, r7
     a94:	4903      	ldr	r1, [pc, #12]	; (aa4 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     a96:	4618      	mov	r0, r3
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     a9a:	4798      	blx	r3
}
     a9c:	bf00      	nop
     a9e:	3708      	adds	r7, #8
     aa0:	46bd      	mov	sp, r7
     aa2:	bd80      	pop	{r7, pc}
     aa4:	20000c48 	.word	0x20000c48
     aa8:	00001c25 	.word	0x00001c25

00000aac <_ZN9ALU_Class16RunPeriodicTasksEv>:

void	ALU_Class::RunPeriodicTasks(void){
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
	FeedWatchDog();
     ab4:	6878      	ldr	r0, [r7, #4]
     ab6:	4b03      	ldr	r3, [pc, #12]	; (ac4 <_ZN9ALU_Class16RunPeriodicTasksEv+0x18>)
     ab8:	4798      	blx	r3

}
     aba:	bf00      	nop
     abc:	3708      	adds	r7, #8
     abe:	46bd      	mov	sp, r7
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	000007c9 	.word	0x000007c9

00000ac8 <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     ac8:	b580      	push	{r7, lr}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
     ace:	6078      	str	r0, [r7, #4]
     ad0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     ad2:	6839      	ldr	r1, [r7, #0]
     ad4:	6878      	ldr	r0, [r7, #4]
     ad6:	4b03      	ldr	r3, [pc, #12]	; (ae4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     ad8:	4798      	blx	r3
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	4618      	mov	r0, r3
     ade:	3708      	adds	r7, #8
     ae0:	46bd      	mov	sp, r7
     ae2:	bd80      	pop	{r7, pc}
     ae4:	000149b5 	.word	0x000149b5

00000ae8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ae8:	b580      	push	{r7, lr}
     aea:	b082      	sub	sp, #8
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
     af0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     af2:	6839      	ldr	r1, [r7, #0]
     af4:	6878      	ldr	r0, [r7, #4]
     af6:	4b03      	ldr	r3, [pc, #12]	; (b04 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     af8:	4798      	blx	r3
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	4618      	mov	r0, r3
     afe:	3708      	adds	r7, #8
     b00:	46bd      	mov	sp, r7
     b02:	bd80      	pop	{r7, pc}
     b04:	000149b5 	.word	0x000149b5

00000b08 <_Z41__static_initialization_and_destruction_0ii>:




     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
     b10:	6039      	str	r1, [r7, #0]
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	2b01      	cmp	r3, #1
     b16:	d15b      	bne.n	bd0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b1e:	4293      	cmp	r3, r2
     b20:	d156      	bne.n	bd0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     b22:	492d      	ldr	r1, [pc, #180]	; (bd8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     b24:	482d      	ldr	r0, [pc, #180]	; (bdc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     b26:	4b2e      	ldr	r3, [pc, #184]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b28:	4798      	blx	r3
     b2a:	4a2e      	ldr	r2, [pc, #184]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b2c:	492e      	ldr	r1, [pc, #184]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b2e:	482b      	ldr	r0, [pc, #172]	; (bdc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     b30:	4b2e      	ldr	r3, [pc, #184]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b32:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     b34:	492e      	ldr	r1, [pc, #184]	; (bf0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     b36:	482f      	ldr	r0, [pc, #188]	; (bf4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     b38:	4b29      	ldr	r3, [pc, #164]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b3a:	4798      	blx	r3
     b3c:	4a29      	ldr	r2, [pc, #164]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b3e:	492a      	ldr	r1, [pc, #168]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b40:	482c      	ldr	r0, [pc, #176]	; (bf4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     b42:	4b2a      	ldr	r3, [pc, #168]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b44:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     b46:	492c      	ldr	r1, [pc, #176]	; (bf8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     b48:	482c      	ldr	r0, [pc, #176]	; (bfc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     b4a:	4b25      	ldr	r3, [pc, #148]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b4c:	4798      	blx	r3
     b4e:	4a25      	ldr	r2, [pc, #148]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b50:	4925      	ldr	r1, [pc, #148]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b52:	482a      	ldr	r0, [pc, #168]	; (bfc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     b54:	4b25      	ldr	r3, [pc, #148]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b56:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     b58:	4929      	ldr	r1, [pc, #164]	; (c00 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     b5a:	482a      	ldr	r0, [pc, #168]	; (c04 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     b5c:	4b20      	ldr	r3, [pc, #128]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b5e:	4798      	blx	r3
     b60:	4a20      	ldr	r2, [pc, #128]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b62:	4921      	ldr	r1, [pc, #132]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b64:	4827      	ldr	r0, [pc, #156]	; (c04 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     b66:	4b21      	ldr	r3, [pc, #132]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b68:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     b6a:	4927      	ldr	r1, [pc, #156]	; (c08 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     b6c:	4827      	ldr	r0, [pc, #156]	; (c0c <_Z41__static_initialization_and_destruction_0ii+0x104>)
     b6e:	4b1c      	ldr	r3, [pc, #112]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b70:	4798      	blx	r3
     b72:	4a1c      	ldr	r2, [pc, #112]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b74:	491c      	ldr	r1, [pc, #112]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b76:	4825      	ldr	r0, [pc, #148]	; (c0c <_Z41__static_initialization_and_destruction_0ii+0x104>)
     b78:	4b1c      	ldr	r3, [pc, #112]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b7a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     b7c:	4924      	ldr	r1, [pc, #144]	; (c10 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     b7e:	4825      	ldr	r0, [pc, #148]	; (c14 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     b80:	4b17      	ldr	r3, [pc, #92]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b82:	4798      	blx	r3
     b84:	4a17      	ldr	r2, [pc, #92]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b86:	4918      	ldr	r1, [pc, #96]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b88:	4822      	ldr	r0, [pc, #136]	; (c14 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     b8a:	4b18      	ldr	r3, [pc, #96]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b8c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     b8e:	4922      	ldr	r1, [pc, #136]	; (c18 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     b90:	4822      	ldr	r0, [pc, #136]	; (c1c <_Z41__static_initialization_and_destruction_0ii+0x114>)
     b92:	4b13      	ldr	r3, [pc, #76]	; (be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     b94:	4798      	blx	r3
     b96:	4a13      	ldr	r2, [pc, #76]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     b98:	4913      	ldr	r1, [pc, #76]	; (be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     b9a:	4820      	ldr	r0, [pc, #128]	; (c1c <_Z41__static_initialization_and_destruction_0ii+0x114>)
     b9c:	4b13      	ldr	r3, [pc, #76]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b9e:	4798      	blx	r3
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     ba0:	481f      	ldr	r0, [pc, #124]	; (c20 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     ba2:	4b20      	ldr	r3, [pc, #128]	; (c24 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     ba4:	4798      	blx	r3
     ba6:	4a0f      	ldr	r2, [pc, #60]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     ba8:	491f      	ldr	r1, [pc, #124]	; (c28 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     baa:	481d      	ldr	r0, [pc, #116]	; (c20 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     bae:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <_Z41__static_initialization_and_destruction_0ii+0x124>)
     bb2:	4b1f      	ldr	r3, [pc, #124]	; (c30 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     bb4:	4798      	blx	r3
     bb6:	4a0b      	ldr	r2, [pc, #44]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     bb8:	491e      	ldr	r1, [pc, #120]	; (c34 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     bba:	481c      	ldr	r0, [pc, #112]	; (c2c <_Z41__static_initialization_and_destruction_0ii+0x124>)
     bbc:	4b0b      	ldr	r3, [pc, #44]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     bbe:	4798      	blx	r3
     bc0:	481d      	ldr	r0, [pc, #116]	; (c38 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     bc2:	4b1e      	ldr	r3, [pc, #120]	; (c3c <_Z41__static_initialization_and_destruction_0ii+0x134>)
     bc4:	4798      	blx	r3
     bc6:	4a07      	ldr	r2, [pc, #28]	; (be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     bc8:	491d      	ldr	r1, [pc, #116]	; (c40 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     bca:	481b      	ldr	r0, [pc, #108]	; (c38 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     bce:	4798      	blx	r3
     bd0:	bf00      	nop
     bd2:	3708      	adds	r7, #8
     bd4:	46bd      	mov	sp, r7
     bd6:	bd80      	pop	{r7, pc}
     bd8:	2000d6d8 	.word	0x2000d6d8
     bdc:	2000063c 	.word	0x2000063c
     be0:	00013d09 	.word	0x00013d09
     be4:	20000000 	.word	0x20000000
     be8:	00013d41 	.word	0x00013d41
     bec:	0001a44d 	.word	0x0001a44d
     bf0:	2000d76c 	.word	0x2000d76c
     bf4:	2000065c 	.word	0x2000065c
     bf8:	2000d870 	.word	0x2000d870
     bfc:	2000067c 	.word	0x2000067c
     c00:	2000d78c 	.word	0x2000d78c
     c04:	2000069c 	.word	0x2000069c
     c08:	2000d830 	.word	0x2000d830
     c0c:	200006bc 	.word	0x200006bc
     c10:	2000d850 	.word	0x2000d850
     c14:	200006dc 	.word	0x200006dc
     c18:	2000d748 	.word	0x2000d748
     c1c:	200006fc 	.word	0x200006fc
     c20:	2000071c 	.word	0x2000071c
     c24:	00002341 	.word	0x00002341
     c28:	0000235b 	.word	0x0000235b
     c2c:	20000730 	.word	0x20000730
     c30:	00000c59 	.word	0x00000c59
     c34:	00000c73 	.word	0x00000c73
     c38:	20000738 	.word	0x20000738
     c3c:	00000425 	.word	0x00000425
     c40:	00000461 	.word	0x00000461

00000c44 <_GLOBAL__sub_I_ptrALUClass>:
     c44:	b580      	push	{r7, lr}
     c46:	af00      	add	r7, sp, #0
     c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c4c:	2001      	movs	r0, #1
     c4e:	4b01      	ldr	r3, [pc, #4]	; (c54 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     c50:	4798      	blx	r3
     c52:	bd80      	pop	{r7, pc}
     c54:	00000b09 	.word	0x00000b09

00000c58 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     c58:	b480      	push	{r7}
     c5a:	b083      	sub	sp, #12
     c5c:	af00      	add	r7, sp, #0
     c5e:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	2201      	movs	r2, #1
     c64:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	4618      	mov	r0, r3
     c6a:	370c      	adds	r7, #12
     c6c:	46bd      	mov	sp, r7
     c6e:	bc80      	pop	{r7}
     c70:	4770      	bx	lr

00000c72 <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     c72:	b480      	push	{r7}
     c74:	b083      	sub	sp, #12
     c76:	af00      	add	r7, sp, #0
     c78:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	4618      	mov	r0, r3
     c7e:	370c      	adds	r7, #12
     c80:	46bd      	mov	sp, r7
     c82:	bc80      	pop	{r7}
     c84:	4770      	bx	lr

00000c86 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     c86:	b480      	push	{r7}
     c88:	b083      	sub	sp, #12
     c8a:	af00      	add	r7, sp, #0
     c8c:	6078      	str	r0, [r7, #4]
	return	isOK;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	b2db      	uxtb	r3, r3
}
     c94:	4618      	mov	r0, r3
     c96:	370c      	adds	r7, #12
     c98:	46bd      	mov	sp, r7
     c9a:	bc80      	pop	{r7}
     c9c:	4770      	bx	lr
	...

00000ca0 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     ca0:	b580      	push	{r7, lr}
     ca2:	b082      	sub	sp, #8
     ca4:	af00      	add	r7, sp, #0
     ca6:	6078      	str	r0, [r7, #4]
     ca8:	6039      	str	r1, [r7, #0]
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	2b01      	cmp	r3, #1
     cae:	d10c      	bne.n	cca <_Z41__static_initialization_and_destruction_0ii+0x2a>
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cb6:	4293      	cmp	r3, r2
     cb8:	d107      	bne.n	cca <_Z41__static_initialization_and_destruction_0ii+0x2a>
     cba:	4806      	ldr	r0, [pc, #24]	; (cd4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     cbc:	4b06      	ldr	r3, [pc, #24]	; (cd8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     cbe:	4798      	blx	r3
     cc0:	4a06      	ldr	r2, [pc, #24]	; (cdc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     cc2:	4907      	ldr	r1, [pc, #28]	; (ce0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     cc4:	4803      	ldr	r0, [pc, #12]	; (cd4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     cc6:	4b07      	ldr	r3, [pc, #28]	; (ce4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     cc8:	4798      	blx	r3
     cca:	bf00      	nop
     ccc:	3708      	adds	r7, #8
     cce:	46bd      	mov	sp, r7
     cd0:	bd80      	pop	{r7, pc}
     cd2:	bf00      	nop
     cd4:	200008a4 	.word	0x200008a4
     cd8:	00000c59 	.word	0x00000c59
     cdc:	20000000 	.word	0x20000000
     ce0:	00000c73 	.word	0x00000c73
     ce4:	0001a44d 	.word	0x0001a44d

00000ce8 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     ce8:	b580      	push	{r7, lr}
     cea:	af00      	add	r7, sp, #0
     cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
     cf0:	2001      	movs	r0, #1
     cf2:	4b01      	ldr	r3, [pc, #4]	; (cf8 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     cf4:	4798      	blx	r3
     cf6:	bd80      	pop	{r7, pc}
     cf8:	00000ca1 	.word	0x00000ca1

00000cfc <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
     cfc:	b480      	push	{r7}
     cfe:	b083      	sub	sp, #12
     d00:	af00      	add	r7, sp, #0
     d02:	6078      	str	r0, [r7, #4]
     d04:	4a11      	ldr	r2, [pc, #68]	; (d4c <_ZN17ConfigState_ClassC1Ev+0x50>)
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	f240 122d 	movw	r2, #301	; 0x12d
     d10:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kHVACStateReset;
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	f240 122d 	movw	r2, #301	; 0x12d
     d18:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	2200      	movs	r2, #0
     d1e:	631a      	str	r2, [r3, #48]	; 0x30
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	2200      	movs	r2, #0
     d24:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.inStateTime = 0;
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	2200      	movs	r2, #0
     d2a:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.remainingTime = 0;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2200      	movs	r2, #0
     d30:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.waitingExceededTime = 0;
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	2200      	movs	r2, #0
     d36:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.magic=0xCAFEBABE;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	4a05      	ldr	r2, [pc, #20]	; (d50 <_ZN17ConfigState_ClassC1Ev+0x54>)
     d3c:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	4618      	mov	r0, r3
     d42:	370c      	adds	r7, #12
     d44:	46bd      	mov	sp, r7
     d46:	bc80      	pop	{r7}
     d48:	4770      	bx	lr
     d4a:	bf00      	nop
     d4c:	0001c960 	.word	0x0001c960
     d50:	cafebabe 	.word	0xcafebabe

00000d54 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     d54:	b480      	push	{r7}
     d56:	b083      	sub	sp, #12
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	4a04      	ldr	r2, [pc, #16]	; (d70 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	4618      	mov	r0, r3
     d66:	370c      	adds	r7, #12
     d68:	46bd      	mov	sp, r7
     d6a:	bc80      	pop	{r7}
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop
     d70:	0001c960 	.word	0x0001c960

00000d74 <_ZN17ConfigState_Class22UpdateStatusArincLabelEv>:
// 		}

		return r;
	};
	
uint32_t	ConfigState_Class::UpdateStatusArincLabel(void){
     d74:	b480      	push	{r7}
     d76:	b085      	sub	sp, #20
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
     d7c:	2300      	movs	r3, #0
     d7e:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
     d80:	4b19      	ldr	r3, [pc, #100]	; (de8 <_ZN17ConfigState_Class22UpdateStatusArincLabelEv+0x74>)
     d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
     d86:	69db      	ldr	r3, [r3, #28]
     d88:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     d8a:	7a3b      	ldrb	r3, [r7, #8]
     d8c:	461a      	mov	r2, r3
     d8e:	7a7b      	ldrb	r3, [r7, #9]
     d90:	f3c3 0300 	ubfx	r3, r3, #0, #1
     d94:	b2db      	uxtb	r3, r3
     d96:	009b      	lsls	r3, r3, #2
     d98:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
     d9a:	7a7b      	ldrb	r3, [r7, #9]
     d9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
     da0:	b2db      	uxtb	r3, r3
     da2:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     da4:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
     da6:	7a7b      	ldrb	r3, [r7, #9]
     da8:	f3c3 0380 	ubfx	r3, r3, #2, #1
     dac:	b2db      	uxtb	r3, r3
     dae:	011b      	lsls	r3, r3, #4
     db0:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
     db2:	7abb      	ldrb	r3, [r7, #10]
     db4:	015b      	lsls	r3, r3, #5
     db6:	431a      	orrs	r2, r3
     db8:	7afb      	ldrb	r3, [r7, #11]
     dba:	f3c3 0300 	ubfx	r3, r3, #0, #1
     dbe:	b2db      	uxtb	r3, r3
     dc0:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
     dc2:	4313      	orrs	r3, r2
     dc4:	60fb      	str	r3, [r7, #12]
	lastAcknowledgeStatus=acknowledgeStatus;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	acknowledgeStatus=s;
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	68fa      	ldr	r2, [r7, #12]
     dd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	return s;
     dda:	68fb      	ldr	r3, [r7, #12]
}	
     ddc:	4618      	mov	r0, r3
     dde:	3714      	adds	r7, #20
     de0:	46bd      	mov	sp, r7
     de2:	bc80      	pop	{r7}
     de4:	4770      	bx	lr
     de6:	bf00      	nop
     de8:	2000101c 	.word	0x2000101c

00000dec <_ZN17ConfigState_Class20GetAcknowledgeStatusEv>:

uint32_t ConfigState_Class::GetAcknowledgeStatus(void){
     dec:	b480      	push	{r7}
     dee:	b083      	sub	sp, #12
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	
	return acknowledgeStatus;
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
}
     dfa:	4618      	mov	r0, r3
     dfc:	370c      	adds	r7, #12
     dfe:	46bd      	mov	sp, r7
     e00:	bc80      	pop	{r7}
     e02:	4770      	bx	lr

00000e04 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv>:
bool  ConfigState_Class::IsStatusArinclabelChanged(void){
     e04:	b580      	push	{r7, lr}
     e06:	b082      	sub	sp, #8
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	UpdateStatusArincLabel();
     e0c:	6878      	ldr	r0, [r7, #4]
     e0e:	4b08      	ldr	r3, [pc, #32]	; (e30 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv+0x2c>)
     e10:	4798      	blx	r3
	return lastAcknowledgeStatus!=acknowledgeStatus;
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
     e1e:	429a      	cmp	r2, r3
     e20:	bf14      	ite	ne
     e22:	2301      	movne	r3, #1
     e24:	2300      	moveq	r3, #0
     e26:	b2db      	uxtb	r3, r3
}
     e28:	4618      	mov	r0, r3
     e2a:	3708      	adds	r7, #8
     e2c:	46bd      	mov	sp, r7
     e2e:	bd80      	pop	{r7, pc}
     e30:	00000d75 	.word	0x00000d75

00000e34 <_Z41__static_initialization_and_destruction_0ii>:
	
}
void	ConfigState_Class::SetDefaultState(void){
	hvac.SetCurrentState(defaultState);

}
     e34:	b580      	push	{r7, lr}
     e36:	b082      	sub	sp, #8
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
     e3c:	6039      	str	r1, [r7, #0]
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	2b01      	cmp	r3, #1
     e42:	d143      	bne.n	ecc <_Z41__static_initialization_and_destruction_0ii+0x98>
     e44:	683b      	ldr	r3, [r7, #0]
     e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e4a:	4293      	cmp	r3, r2
     e4c:	d13e      	bne.n	ecc <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     e4e:	4921      	ldr	r1, [pc, #132]	; (ed4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     e50:	4821      	ldr	r0, [pc, #132]	; (ed8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     e52:	4b22      	ldr	r3, [pc, #136]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e54:	4798      	blx	r3
     e56:	4a22      	ldr	r2, [pc, #136]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e58:	4922      	ldr	r1, [pc, #136]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e5a:	481f      	ldr	r0, [pc, #124]	; (ed8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     e5c:	4b22      	ldr	r3, [pc, #136]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e5e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     e60:	4922      	ldr	r1, [pc, #136]	; (eec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     e62:	4823      	ldr	r0, [pc, #140]	; (ef0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     e64:	4b1d      	ldr	r3, [pc, #116]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e66:	4798      	blx	r3
     e68:	4a1d      	ldr	r2, [pc, #116]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e6a:	491e      	ldr	r1, [pc, #120]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e6c:	4820      	ldr	r0, [pc, #128]	; (ef0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     e6e:	4b1e      	ldr	r3, [pc, #120]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e70:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     e72:	4920      	ldr	r1, [pc, #128]	; (ef4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     e74:	4820      	ldr	r0, [pc, #128]	; (ef8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     e76:	4b19      	ldr	r3, [pc, #100]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e78:	4798      	blx	r3
     e7a:	4a19      	ldr	r2, [pc, #100]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e7c:	4919      	ldr	r1, [pc, #100]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e7e:	481e      	ldr	r0, [pc, #120]	; (ef8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     e80:	4b19      	ldr	r3, [pc, #100]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e82:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     e84:	491d      	ldr	r1, [pc, #116]	; (efc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     e86:	481e      	ldr	r0, [pc, #120]	; (f00 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     e88:	4b14      	ldr	r3, [pc, #80]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e8a:	4798      	blx	r3
     e8c:	4a14      	ldr	r2, [pc, #80]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e8e:	4915      	ldr	r1, [pc, #84]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e90:	481b      	ldr	r0, [pc, #108]	; (f00 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     e92:	4b15      	ldr	r3, [pc, #84]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e94:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     e96:	491b      	ldr	r1, [pc, #108]	; (f04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e98:	481b      	ldr	r0, [pc, #108]	; (f08 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     e9a:	4b10      	ldr	r3, [pc, #64]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e9c:	4798      	blx	r3
     e9e:	4a10      	ldr	r2, [pc, #64]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     ea0:	4910      	ldr	r1, [pc, #64]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     ea2:	4819      	ldr	r0, [pc, #100]	; (f08 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     ea4:	4b10      	ldr	r3, [pc, #64]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     ea6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     ea8:	4918      	ldr	r1, [pc, #96]	; (f0c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     eaa:	4819      	ldr	r0, [pc, #100]	; (f10 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     eac:	4b0b      	ldr	r3, [pc, #44]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     eae:	4798      	blx	r3
     eb0:	4a0b      	ldr	r2, [pc, #44]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     eb2:	490c      	ldr	r1, [pc, #48]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     eb4:	4816      	ldr	r0, [pc, #88]	; (f10 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     eb6:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     eb8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     eba:	4916      	ldr	r1, [pc, #88]	; (f14 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     ebc:	4816      	ldr	r0, [pc, #88]	; (f18 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     ec0:	4798      	blx	r3
     ec2:	4a07      	ldr	r2, [pc, #28]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     ec4:	4907      	ldr	r1, [pc, #28]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     ec6:	4814      	ldr	r0, [pc, #80]	; (f18 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     ec8:	4b07      	ldr	r3, [pc, #28]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     eca:	4798      	blx	r3
     ecc:	bf00      	nop
     ece:	3708      	adds	r7, #8
     ed0:	46bd      	mov	sp, r7
     ed2:	bd80      	pop	{r7, pc}
     ed4:	2000d6d8 	.word	0x2000d6d8
     ed8:	200008a8 	.word	0x200008a8
     edc:	00013d09 	.word	0x00013d09
     ee0:	20000000 	.word	0x20000000
     ee4:	00013d41 	.word	0x00013d41
     ee8:	0001a44d 	.word	0x0001a44d
     eec:	2000d76c 	.word	0x2000d76c
     ef0:	200008c8 	.word	0x200008c8
     ef4:	2000d870 	.word	0x2000d870
     ef8:	200008e8 	.word	0x200008e8
     efc:	2000d78c 	.word	0x2000d78c
     f00:	20000908 	.word	0x20000908
     f04:	2000d830 	.word	0x2000d830
     f08:	20000928 	.word	0x20000928
     f0c:	2000d850 	.word	0x2000d850
     f10:	20000948 	.word	0x20000948
     f14:	2000d748 	.word	0x2000d748
     f18:	20000968 	.word	0x20000968

00000f1c <_GLOBAL__sub_I_printableNamesHVACState>:
     f1c:	b580      	push	{r7, lr}
     f1e:	af00      	add	r7, sp, #0
     f20:	f64f 71ff 	movw	r1, #65535	; 0xffff
     f24:	2001      	movs	r0, #1
     f26:	4b01      	ldr	r3, [pc, #4]	; (f2c <_GLOBAL__sub_I_printableNamesHVACState+0x10>)
     f28:	4798      	blx	r3
     f2a:	bd80      	pop	{r7, pc}
     f2c:	00000e35 	.word	0x00000e35

00000f30 <_ZN18Cooling_ControllerC1Ev>:
#include "SingleHeater_Class.h"
#include "utils.h"
#include "math.h"

// default constructor
Cooling_Controller::Cooling_Controller()
     f30:	b480      	push	{r7}
     f32:	b083      	sub	sp, #12
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
{
	tolerance=1;
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
     f3e:	609a      	str	r2, [r3, #8]
} //Cooling_Controller
     f40:	687b      	ldr	r3, [r7, #4]
     f42:	4618      	mov	r0, r3
     f44:	370c      	adds	r7, #12
     f46:	46bd      	mov	sp, r7
     f48:	bc80      	pop	{r7}
     f4a:	4770      	bx	lr

00000f4c <_ZN18Cooling_ControllerD1Ev>:

// default destructor
Cooling_Controller::~Cooling_Controller()
     f4c:	b480      	push	{r7}
     f4e:	b083      	sub	sp, #12
     f50:	af00      	add	r7, sp, #0
     f52:	6078      	str	r0, [r7, #4]
{
} //~Cooling_Controller
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	4618      	mov	r0, r3
     f58:	370c      	adds	r7, #12
     f5a:	46bd      	mov	sp, r7
     f5c:	bc80      	pop	{r7}
     f5e:	4770      	bx	lr

00000f60 <_ZN18Cooling_Controller14Control_CoolerEf>:

uint8_t Cooling_Controller::Control_Cooler(float errorTemp){
     f60:	b590      	push	{r4, r7, lr}
     f62:	b083      	sub	sp, #12
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
     f68:	6039      	str	r1, [r7, #0]
	errorTemperature=errorTemp;
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	683a      	ldr	r2, [r7, #0]
     f6e:	605a      	str	r2, [r3, #4]
	if (errorTemperature<0)
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	685a      	ldr	r2, [r3, #4]
     f74:	4b42      	ldr	r3, [pc, #264]	; (1080 <_ZN18Cooling_Controller14Control_CoolerEf+0x120>)
     f76:	f04f 0100 	mov.w	r1, #0
     f7a:	4610      	mov	r0, r2
     f7c:	4798      	blx	r3
     f7e:	4603      	mov	r3, r0
     f80:	2b00      	cmp	r3, #0
     f82:	d071      	beq.n	1068 <_ZN18Cooling_Controller14Control_CoolerEf+0x108>
	{
		if (fans.condesator->IsEnabled())
     f84:	4b3f      	ldr	r3, [pc, #252]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
     f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     f88:	4618      	mov	r0, r3
     f8a:	4b3f      	ldr	r3, [pc, #252]	; (1088 <_ZN18Cooling_Controller14Control_CoolerEf+0x128>)
     f8c:	4798      	blx	r3
     f8e:	4603      	mov	r3, r0
     f90:	2b00      	cmp	r3, #0
     f92:	d062      	beq.n	105a <_ZN18Cooling_Controller14Control_CoolerEf+0xfa>
		{
			if (heater.GetHeaterPowerLevel()>0)
     f94:	483d      	ldr	r0, [pc, #244]	; (108c <_ZN18Cooling_Controller14Control_CoolerEf+0x12c>)
     f96:	4b3e      	ldr	r3, [pc, #248]	; (1090 <_ZN18Cooling_Controller14Control_CoolerEf+0x130>)
     f98:	4798      	blx	r3
     f9a:	4603      	mov	r3, r0
     f9c:	2b00      	cmp	r3, #0
     f9e:	bfcc      	ite	gt
     fa0:	2301      	movgt	r3, #1
     fa2:	2300      	movle	r3, #0
     fa4:	b2db      	uxtb	r3, r3
     fa6:	2b00      	cmp	r3, #0
     fa8:	d00f      	beq.n	fca <_ZN18Cooling_Controller14Control_CoolerEf+0x6a>
			{
				heater.DisableAll();
     faa:	4838      	ldr	r0, [pc, #224]	; (108c <_ZN18Cooling_Controller14Control_CoolerEf+0x12c>)
     fac:	4b39      	ldr	r3, [pc, #228]	; (1094 <_ZN18Cooling_Controller14Control_CoolerEf+0x134>)
     fae:	4798      	blx	r3
				fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
     fb0:	4b34      	ldr	r3, [pc, #208]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
     fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     fb4:	210c      	movs	r1, #12
     fb6:	4618      	mov	r0, r3
     fb8:	4b37      	ldr	r3, [pc, #220]	; (1098 <_ZN18Cooling_Controller14Control_CoolerEf+0x138>)
     fba:	4798      	blx	r3
				fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
     fbc:	4b31      	ldr	r3, [pc, #196]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
     fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     fc0:	210c      	movs	r1, #12
     fc2:	4618      	mov	r0, r3
     fc4:	4b34      	ldr	r3, [pc, #208]	; (1098 <_ZN18Cooling_Controller14Control_CoolerEf+0x138>)
     fc6:	4798      	blx	r3
     fc8:	e054      	b.n	1074 <_ZN18Cooling_Controller14Control_CoolerEf+0x114>

			}
			else
			{
				
				if (abs(errorTemperature)>1)
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	685a      	ldr	r2, [r3, #4]
     fce:	4b33      	ldr	r3, [pc, #204]	; (109c <_ZN18Cooling_Controller14Control_CoolerEf+0x13c>)
     fd0:	f04f 0100 	mov.w	r1, #0
     fd4:	4610      	mov	r0, r2
     fd6:	4798      	blx	r3
     fd8:	4603      	mov	r3, r0
     fda:	2b00      	cmp	r3, #0
     fdc:	d00f      	beq.n	ffe <_ZN18Cooling_Controller14Control_CoolerEf+0x9e>
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	685a      	ldr	r2, [r3, #4]
     fe2:	2301      	movs	r3, #1
     fe4:	461c      	mov	r4, r3
     fe6:	4b2d      	ldr	r3, [pc, #180]	; (109c <_ZN18Cooling_Controller14Control_CoolerEf+0x13c>)
     fe8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
     fec:	4610      	mov	r0, r2
     fee:	4798      	blx	r3
     ff0:	4603      	mov	r3, r0
     ff2:	2b00      	cmp	r3, #0
     ff4:	d101      	bne.n	ffa <_ZN18Cooling_Controller14Control_CoolerEf+0x9a>
     ff6:	2300      	movs	r3, #0
     ff8:	461c      	mov	r4, r3
     ffa:	b2e3      	uxtb	r3, r4
     ffc:	e00d      	b.n	101a <_ZN18Cooling_Controller14Control_CoolerEf+0xba>
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	685a      	ldr	r2, [r3, #4]
    1002:	2301      	movs	r3, #1
    1004:	461c      	mov	r4, r3
    1006:	4b1e      	ldr	r3, [pc, #120]	; (1080 <_ZN18Cooling_Controller14Control_CoolerEf+0x120>)
    1008:	4925      	ldr	r1, [pc, #148]	; (10a0 <_ZN18Cooling_Controller14Control_CoolerEf+0x140>)
    100a:	4610      	mov	r0, r2
    100c:	4798      	blx	r3
    100e:	4603      	mov	r3, r0
    1010:	2b00      	cmp	r3, #0
    1012:	d101      	bne.n	1018 <_ZN18Cooling_Controller14Control_CoolerEf+0xb8>
    1014:	2300      	movs	r3, #0
    1016:	461c      	mov	r4, r3
    1018:	b2e3      	uxtb	r3, r4
    101a:	2b00      	cmp	r3, #0
    101c:	d016      	beq.n	104c <_ZN18Cooling_Controller14Control_CoolerEf+0xec>
				{
					fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    101e:	4b19      	ldr	r3, [pc, #100]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    1020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1022:	210c      	movs	r1, #12
    1024:	4618      	mov	r0, r3
    1026:	4b1c      	ldr	r3, [pc, #112]	; (1098 <_ZN18Cooling_Controller14Control_CoolerEf+0x138>)
    1028:	4798      	blx	r3
					fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    102a:	4b16      	ldr	r3, [pc, #88]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    102e:	210c      	movs	r1, #12
    1030:	4618      	mov	r0, r3
    1032:	4b19      	ldr	r3, [pc, #100]	; (1098 <_ZN18Cooling_Controller14Control_CoolerEf+0x138>)
    1034:	4798      	blx	r3
					fans.condesator->SetPWM(CalculatePWMCondesator());
    1036:	4b13      	ldr	r3, [pc, #76]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    1038:	6e5c      	ldr	r4, [r3, #100]	; 0x64
    103a:	6878      	ldr	r0, [r7, #4]
    103c:	4b19      	ldr	r3, [pc, #100]	; (10a4 <_ZN18Cooling_Controller14Control_CoolerEf+0x144>)
    103e:	4798      	blx	r3
    1040:	4603      	mov	r3, r0
    1042:	4619      	mov	r1, r3
    1044:	4620      	mov	r0, r4
    1046:	4b18      	ldr	r3, [pc, #96]	; (10a8 <_ZN18Cooling_Controller14Control_CoolerEf+0x148>)
    1048:	4798      	blx	r3
    104a:	e013      	b.n	1074 <_ZN18Cooling_Controller14Control_CoolerEf+0x114>
					}else{
					fans.condesator->SetEnable(false);
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    104e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1050:	2100      	movs	r1, #0
    1052:	4618      	mov	r0, r3
    1054:	4b15      	ldr	r3, [pc, #84]	; (10ac <_ZN18Cooling_Controller14Control_CoolerEf+0x14c>)
    1056:	4798      	blx	r3
    1058:	e00c      	b.n	1074 <_ZN18Cooling_Controller14Control_CoolerEf+0x114>
				
			}
		}
		else
		{
			fans.condesator->SetEnable(true);
    105a:	4b0a      	ldr	r3, [pc, #40]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    105c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    105e:	2101      	movs	r1, #1
    1060:	4618      	mov	r0, r3
    1062:	4b12      	ldr	r3, [pc, #72]	; (10ac <_ZN18Cooling_Controller14Control_CoolerEf+0x14c>)
    1064:	4798      	blx	r3
    1066:	e005      	b.n	1074 <_ZN18Cooling_Controller14Control_CoolerEf+0x114>
		}
	} 
	else
	{
		fans.condesator->SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
    1068:	4b06      	ldr	r3, [pc, #24]	; (1084 <_ZN18Cooling_Controller14Control_CoolerEf+0x124>)
    106a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    106c:	2110      	movs	r1, #16
    106e:	4618      	mov	r0, r3
    1070:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <_ZN18Cooling_Controller14Control_CoolerEf+0x148>)
    1072:	4798      	blx	r3
	}
	
	return pwmCondesator;
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	7c1b      	ldrb	r3, [r3, #16]

}
    1078:	4618      	mov	r0, r3
    107a:	370c      	adds	r7, #12
    107c:	46bd      	mov	sp, r7
    107e:	bd90      	pop	{r4, r7, pc}
    1080:	0001c40d 	.word	0x0001c40d
    1084:	20003b28 	.word	0x20003b28
    1088:	00014ed1 	.word	0x00014ed1
    108c:	20005814 	.word	0x20005814
    1090:	00017385 	.word	0x00017385
    1094:	00017319 	.word	0x00017319
    1098:	0001525d 	.word	0x0001525d
    109c:	0001c449 	.word	0x0001c449
    10a0:	bf800000 	.word	0xbf800000
    10a4:	000010b1 	.word	0x000010b1
    10a8:	00014ee9 	.word	0x00014ee9
    10ac:	00014eb9 	.word	0x00014eb9

000010b0 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv>:

uint8_t Cooling_Controller::CalculatePWMCondesator(void){
    10b0:	b580      	push	{r7, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
	if (errorTemperature<0)
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	685a      	ldr	r2, [r3, #4]
    10bc:	4b1c      	ldr	r3, [pc, #112]	; (1130 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x80>)
    10be:	f04f 0100 	mov.w	r1, #0
    10c2:	4610      	mov	r0, r2
    10c4:	4798      	blx	r3
    10c6:	4603      	mov	r3, r0
    10c8:	2b00      	cmp	r3, #0
    10ca:	d028      	beq.n	111e <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x6e>
	{
		floatPWM=(-1*errorTemperature*PROPORTIONAL_CONTROL_VALUE)+CONDESATOR_MINIMUN_FLOW_AIR;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	685b      	ldr	r3, [r3, #4]
    10d0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    10d4:	4b17      	ldr	r3, [pc, #92]	; (1134 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x84>)
    10d6:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
    10da:	4610      	mov	r0, r2
    10dc:	4798      	blx	r3
    10de:	4603      	mov	r3, r0
    10e0:	461a      	mov	r2, r3
    10e2:	4b15      	ldr	r3, [pc, #84]	; (1138 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x88>)
    10e4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    10e8:	4610      	mov	r0, r2
    10ea:	4798      	blx	r3
    10ec:	4603      	mov	r3, r0
    10ee:	461a      	mov	r2, r3
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
		pwmCondesator=(uint8_t)(min(floatPWM,0xff));
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	68da      	ldr	r2, [r3, #12]
    10f8:	4b0d      	ldr	r3, [pc, #52]	; (1130 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x80>)
    10fa:	4910      	ldr	r1, [pc, #64]	; (113c <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x8c>)
    10fc:	4610      	mov	r0, r2
    10fe:	4798      	blx	r3
    1100:	4603      	mov	r3, r0
    1102:	2b00      	cmp	r3, #0
    1104:	d007      	beq.n	1116 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x66>
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	68da      	ldr	r2, [r3, #12]
    110a:	4b0d      	ldr	r3, [pc, #52]	; (1140 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x90>)
    110c:	4610      	mov	r0, r2
    110e:	4798      	blx	r3
    1110:	4603      	mov	r3, r0
    1112:	b2da      	uxtb	r2, r3
    1114:	e000      	b.n	1118 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x68>
    1116:	22ff      	movs	r2, #255	; 0xff
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	741a      	strb	r2, [r3, #16]
    111c:	e002      	b.n	1124 <_ZN18Cooling_Controller22CalculatePWMCondesatorEv+0x74>
	} 
	else
	{
		pwmCondesator=CONDESATOR_MINIMUN_FLOW_AIR;
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	2210      	movs	r2, #16
    1122:	741a      	strb	r2, [r3, #16]
	}

	
	return pwmCondesator;
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	7c1b      	ldrb	r3, [r3, #16]
}
    1128:	4618      	mov	r0, r3
    112a:	3708      	adds	r7, #8
    112c:	46bd      	mov	sp, r7
    112e:	bd80      	pop	{r7, pc}
    1130:	0001c40d 	.word	0x0001c40d
    1134:	0001c0d1 	.word	0x0001c0d1
    1138:	0001bec1 	.word	0x0001bec1
    113c:	437f0000 	.word	0x437f0000
    1140:	0001c45d 	.word	0x0001c45d

00001144 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1144:	b580      	push	{r7, lr}
    1146:	b082      	sub	sp, #8
    1148:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    114a:	4b16      	ldr	r3, [pc, #88]	; (11a4 <Reset_Handler+0x60>)
    114c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    114e:	4b16      	ldr	r3, [pc, #88]	; (11a8 <Reset_Handler+0x64>)
    1150:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1152:	687a      	ldr	r2, [r7, #4]
    1154:	683b      	ldr	r3, [r7, #0]
    1156:	429a      	cmp	r2, r3
    1158:	d00c      	beq.n	1174 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    115a:	e007      	b.n	116c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    115c:	683b      	ldr	r3, [r7, #0]
    115e:	1d1a      	adds	r2, r3, #4
    1160:	603a      	str	r2, [r7, #0]
    1162:	687a      	ldr	r2, [r7, #4]
    1164:	1d11      	adds	r1, r2, #4
    1166:	6079      	str	r1, [r7, #4]
    1168:	6812      	ldr	r2, [r2, #0]
    116a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    116c:	683b      	ldr	r3, [r7, #0]
    116e:	4a0f      	ldr	r2, [pc, #60]	; (11ac <Reset_Handler+0x68>)
    1170:	4293      	cmp	r3, r2
    1172:	d3f3      	bcc.n	115c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1174:	4b0e      	ldr	r3, [pc, #56]	; (11b0 <Reset_Handler+0x6c>)
    1176:	603b      	str	r3, [r7, #0]
    1178:	e004      	b.n	1184 <Reset_Handler+0x40>
                *pDest++ = 0;
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	1d1a      	adds	r2, r3, #4
    117e:	603a      	str	r2, [r7, #0]
    1180:	2200      	movs	r2, #0
    1182:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1184:	683b      	ldr	r3, [r7, #0]
    1186:	4a0b      	ldr	r2, [pc, #44]	; (11b4 <Reset_Handler+0x70>)
    1188:	4293      	cmp	r3, r2
    118a:	d3f6      	bcc.n	117a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    118c:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <Reset_Handler+0x74>)
    118e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1190:	4a0a      	ldr	r2, [pc, #40]	; (11bc <Reset_Handler+0x78>)
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1198:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    119a:	4b09      	ldr	r3, [pc, #36]	; (11c0 <Reset_Handler+0x7c>)
    119c:	4798      	blx	r3

        /* Branch to main function */
        main();
    119e:	4b09      	ldr	r3, [pc, #36]	; (11c4 <Reset_Handler+0x80>)
    11a0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    11a2:	e7fe      	b.n	11a2 <Reset_Handler+0x5e>
    11a4:	0001ddcc 	.word	0x0001ddcc
    11a8:	20000000 	.word	0x20000000
    11ac:	2000061c 	.word	0x2000061c
    11b0:	20000620 	.word	0x20000620
    11b4:	2000d970 	.word	0x2000d970
    11b8:	00000000 	.word	0x00000000
    11bc:	e000ed00 	.word	0xe000ed00
    11c0:	0001c4d1 	.word	0x0001c4d1
    11c4:	00001f7d 	.word	0x00001f7d

000011c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11c8:	b480      	push	{r7}
    11ca:	af00      	add	r7, sp, #0
        while (1) {
    11cc:	e7fe      	b.n	11cc <Dummy_Handler+0x4>

000011ce <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    11ce:	b480      	push	{r7}
    11d0:	b083      	sub	sp, #12
    11d2:	af00      	add	r7, sp, #0
    11d4:	6078      	str	r0, [r7, #4]
    11d6:	6039      	str	r1, [r7, #0]
	integerData = v;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	683a      	ldr	r2, [r7, #0]
    11dc:	601a      	str	r2, [r3, #0]
	}
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	4618      	mov	r0, r3
    11e2:	370c      	adds	r7, #12
    11e4:	46bd      	mov	sp, r7
    11e6:	bc80      	pop	{r7}
    11e8:	4770      	bx	lr

000011ea <_ZN19HVAC_Commando_ClassC2Ev>:
#include "EventHandler_Class.h"
#include "States_Class.h"
#include "EvaporatorAndCondesatorFans_Class.h"

// default constructor
HVAC_Commando_Class::HVAC_Commando_Class()
    11ea:	b480      	push	{r7}
    11ec:	b083      	sub	sp, #12
    11ee:	af00      	add	r7, sp, #0
    11f0:	6078      	str	r0, [r7, #4]
    11f2:	6039      	str	r1, [r7, #0]
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	681a      	ldr	r2, [r3, #0]
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	601a      	str	r2, [r3, #0]
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	681b      	ldr	r3, [r3, #0]
    1200:	3b0c      	subs	r3, #12
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	461a      	mov	r2, r3
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	4413      	add	r3, r2
    120a:	683a      	ldr	r2, [r7, #0]
    120c:	6852      	ldr	r2, [r2, #4]
    120e:	601a      	str	r2, [r3, #0]
{
} //HVAC_Commando_Class
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	4618      	mov	r0, r3
    1214:	370c      	adds	r7, #12
    1216:	46bd      	mov	sp, r7
    1218:	bc80      	pop	{r7}
    121a:	4770      	bx	lr

0000121c <_ZN19HVAC_Commando_ClassD2Ev>:

// default destructor
HVAC_Commando_Class::~HVAC_Commando_Class()
    121c:	b480      	push	{r7}
    121e:	b083      	sub	sp, #12
    1220:	af00      	add	r7, sp, #0
    1222:	6078      	str	r0, [r7, #4]
    1224:	6039      	str	r1, [r7, #0]
    1226:	683b      	ldr	r3, [r7, #0]
    1228:	681a      	ldr	r2, [r3, #0]
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	601a      	str	r2, [r3, #0]
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	3b0c      	subs	r3, #12
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	461a      	mov	r2, r3
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	4413      	add	r3, r2
    123c:	683a      	ldr	r2, [r7, #0]
    123e:	6852      	ldr	r2, [r2, #4]
    1240:	601a      	str	r2, [r3, #0]
{
} //~HVAC_Commando_Class
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	4618      	mov	r0, r3
    1246:	370c      	adds	r7, #12
    1248:	46bd      	mov	sp, r7
    124a:	bc80      	pop	{r7}
    124c:	4770      	bx	lr
	...

00001250 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv>:

bool HVAC_Commando_Class::IsCommando270Changed(void){
    1250:	b590      	push	{r4, r7, lr}
    1252:	b083      	sub	sp, #12
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
	
	if (lastCommando==UpdateCommando270())
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	695c      	ldr	r4, [r3, #20]
    125c:	6878      	ldr	r0, [r7, #4]
    125e:	4b08      	ldr	r3, [pc, #32]	; (1280 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x30>)
    1260:	4798      	blx	r3
    1262:	4603      	mov	r3, r0
    1264:	429c      	cmp	r4, r3
    1266:	bf0c      	ite	eq
    1268:	2301      	moveq	r3, #1
    126a:	2300      	movne	r3, #0
    126c:	b2db      	uxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	d001      	beq.n	1276 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x26>
	{
		return false;
    1272:	2300      	movs	r3, #0
    1274:	e000      	b.n	1278 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x28>
	} 
	else
	{
		return true;
    1276:	2301      	movs	r3, #1
	
	}
	return true;
}
    1278:	4618      	mov	r0, r3
    127a:	370c      	adds	r7, #12
    127c:	46bd      	mov	sp, r7
    127e:	bd90      	pop	{r4, r7, pc}
    1280:	000012b9 	.word	0x000012b9

00001284 <_ZN19HVAC_Commando_Class20IsCommando272ChangedEv>:
bool HVAC_Commando_Class::IsCommando272Changed(void){
    1284:	b590      	push	{r4, r7, lr}
    1286:	b083      	sub	sp, #12
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
	
	if (lastSpeedCommand==UpdateCommando272())
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	69dc      	ldr	r4, [r3, #28]
    1290:	6878      	ldr	r0, [r7, #4]
    1292:	4b08      	ldr	r3, [pc, #32]	; (12b4 <_ZN19HVAC_Commando_Class20IsCommando272ChangedEv+0x30>)
    1294:	4798      	blx	r3
    1296:	4603      	mov	r3, r0
    1298:	429c      	cmp	r4, r3
    129a:	bf0c      	ite	eq
    129c:	2301      	moveq	r3, #1
    129e:	2300      	movne	r3, #0
    12a0:	b2db      	uxtb	r3, r3
    12a2:	2b00      	cmp	r3, #0
    12a4:	d001      	beq.n	12aa <_ZN19HVAC_Commando_Class20IsCommando272ChangedEv+0x26>
	{
		return false;
    12a6:	2300      	movs	r3, #0
    12a8:	e000      	b.n	12ac <_ZN19HVAC_Commando_Class20IsCommando272ChangedEv+0x28>
	}
	else
	{
		return true;
    12aa:	2301      	movs	r3, #1
		
	}
	return true;
}
    12ac:	4618      	mov	r0, r3
    12ae:	370c      	adds	r7, #12
    12b0:	46bd      	mov	sp, r7
    12b2:	bd90      	pop	{r4, r7, pc}
    12b4:	00001331 	.word	0x00001331

000012b8 <_ZN19HVAC_Commando_Class17UpdateCommando270Ev>:

uint32_t HVAC_Commando_Class::UpdateCommando270(void){
    12b8:	b580      	push	{r7, lr}
    12ba:	b084      	sub	sp, #16
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
	lastCommando=actualCommando;
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	691a      	ldr	r2, [r3, #16]
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	615a      	str	r2, [r3, #20]
	uint32_t value=arinc.ar->ReadBufferLabel((uint32_t)270);
    12c8:	4b17      	ldr	r3, [pc, #92]	; (1328 <_ZN19HVAC_Commando_Class17UpdateCommando270Ev+0x70>)
    12ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    12ce:	f44f 7187 	mov.w	r1, #270	; 0x10e
    12d2:	4618      	mov	r0, r3
    12d4:	4b15      	ldr	r3, [pc, #84]	; (132c <_ZN19HVAC_Commando_Class17UpdateCommando270Ev+0x74>)
    12d6:	4798      	blx	r3
    12d8:	60f8      	str	r0, [r7, #12]
	commando270.AC_CMD=(bool)((value>>12)&0x01);
    12da:	68fb      	ldr	r3, [r7, #12]
    12dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    12e0:	2b00      	cmp	r3, #0
    12e2:	bf14      	ite	ne
    12e4:	2301      	movne	r3, #1
    12e6:	2300      	moveq	r3, #0
    12e8:	b2d9      	uxtb	r1, r3
    12ea:	687a      	ldr	r2, [r7, #4]
    12ec:	7953      	ldrb	r3, [r2, #5]
    12ee:	f361 0300 	bfi	r3, r1, #0, #1
    12f2:	7153      	strb	r3, [r2, #5]
	commando270.statusArinc=(StatusHVACARINC)((value>>10)&0x03);
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	0a9b      	lsrs	r3, r3, #10
    12f8:	b2db      	uxtb	r3, r3
    12fa:	f003 0303 	and.w	r3, r3, #3
    12fe:	b2da      	uxtb	r2, r3
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	711a      	strb	r2, [r3, #4]
	commando270.statusFV=(FlapperValveMode)((value>>15)&0x03);
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	0bdb      	lsrs	r3, r3, #15
    1308:	b2db      	uxtb	r3, r3
    130a:	f003 0303 	and.w	r3, r3, #3
    130e:	b2da      	uxtb	r2, r3
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	719a      	strb	r2, [r3, #6]
	actualCommando=value;
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	68fa      	ldr	r2, [r7, #12]
    1318:	611a      	str	r2, [r3, #16]
	return actualCommando;
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	691b      	ldr	r3, [r3, #16]
}
    131e:	4618      	mov	r0, r3
    1320:	3710      	adds	r7, #16
    1322:	46bd      	mov	sp, r7
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	200024a8 	.word	0x200024a8
    132c:	000129d5 	.word	0x000129d5

00001330 <_ZN19HVAC_Commando_Class17UpdateCommando272Ev>:
uint32_t HVAC_Commando_Class::UpdateCommando272(void){
    1330:	b580      	push	{r7, lr}
    1332:	b084      	sub	sp, #16
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
	lastSpeedCommand=fansSpeedCommand;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	699a      	ldr	r2, [r3, #24]
    133c:	687b      	ldr	r3, [r7, #4]
    133e:	61da      	str	r2, [r3, #28]
	uint32_t value=arinc.ar->ReadBufferLabel((uint32_t)272);
    1340:	4b0c      	ldr	r3, [pc, #48]	; (1374 <_ZN19HVAC_Commando_Class17UpdateCommando272Ev+0x44>)
    1342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    1346:	f44f 7188 	mov.w	r1, #272	; 0x110
    134a:	4618      	mov	r0, r3
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <_ZN19HVAC_Commando_Class17UpdateCommando272Ev+0x48>)
    134e:	4798      	blx	r3
    1350:	60f8      	str	r0, [r7, #12]
	command272.fanSpeed[0]=(value&0x3fc00)>>10;
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	0a9b      	lsrs	r3, r3, #10
    1356:	b2da      	uxtb	r2, r3
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	725a      	strb	r2, [r3, #9]
	command272.fanSpeed[1]=(value&0xff00000)>>10;
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	2200      	movs	r2, #0
    1360:	729a      	strb	r2, [r3, #10]
	fansSpeedCommand=value;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	68fa      	ldr	r2, [r7, #12]
    1366:	619a      	str	r2, [r3, #24]
	
	return fansSpeedCommand;
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	699b      	ldr	r3, [r3, #24]
}
    136c:	4618      	mov	r0, r3
    136e:	3710      	adds	r7, #16
    1370:	46bd      	mov	sp, r7
    1372:	bd80      	pop	{r7, pc}
    1374:	200024a8 	.word	0x200024a8
    1378:	000129d5 	.word	0x000129d5

0000137c <_ZN19HVAC_Commando_Class17UpdateCommando372Ev>:
void HVAC_Commando_Class::UpdateCommando372(void){
    137c:	b580      	push	{r7, lr}
    137e:	b082      	sub	sp, #8
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]

	command372.fanSpeed[0]=fans.evaporator[0]->ReadPWM();
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <_ZN19HVAC_Commando_Class17UpdateCommando372Ev+0x34>)
    1386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1388:	4618      	mov	r0, r3
    138a:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <_ZN19HVAC_Commando_Class17UpdateCommando372Ev+0x38>)
    138c:	4798      	blx	r3
    138e:	4603      	mov	r3, r0
    1390:	461a      	mov	r2, r3
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	731a      	strb	r2, [r3, #12]
	command372.fanSpeed[1]=fans.evaporator[1]->ReadPWM();
    1396:	4b06      	ldr	r3, [pc, #24]	; (13b0 <_ZN19HVAC_Commando_Class17UpdateCommando372Ev+0x34>)
    1398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    139a:	4618      	mov	r0, r3
    139c:	4b05      	ldr	r3, [pc, #20]	; (13b4 <_ZN19HVAC_Commando_Class17UpdateCommando372Ev+0x38>)
    139e:	4798      	blx	r3
    13a0:	4603      	mov	r3, r0
    13a2:	461a      	mov	r2, r3
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	735a      	strb	r2, [r3, #13]

	
	
}
    13a8:	bf00      	nop
    13aa:	3708      	adds	r7, #8
    13ac:	46bd      	mov	sp, r7
    13ae:	bd80      	pop	{r7, pc}
    13b0:	20003b28 	.word	0x20003b28
    13b4:	00015279 	.word	0x00015279

000013b8 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv>:
uint32_t HVAC_Commando_Class::GetCommando270(void){
	return actualCommando;
}
float HVAC_Commando_Class::UpadateTemperatureSetpoint(void){
    13b8:	b580      	push	{r7, lr}
    13ba:	b084      	sub	sp, #16
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
	lastTemperatureSetpoint=temperatureSetpoint;
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t value=arinc.ar->ReadBufferLabel((uint32_t)204);
    13c8:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x40>)
    13ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    13ce:	21cc      	movs	r1, #204	; 0xcc
    13d0:	4618      	mov	r0, r3
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x44>)
    13d4:	4798      	blx	r3
    13d6:	60f8      	str	r0, [r7, #12]
	uint16_t temp16=(uint16_t)((value>>12)&0xffff);
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	0b1b      	lsrs	r3, r3, #12
    13dc:	817b      	strh	r3, [r7, #10]
	temperatureSetpoint=temp16;
    13de:	897a      	ldrh	r2, [r7, #10]
    13e0:	4b07      	ldr	r3, [pc, #28]	; (1400 <_ZN19HVAC_Commando_Class26UpadateTemperatureSetpointEv+0x48>)
    13e2:	4610      	mov	r0, r2
    13e4:	4798      	blx	r3
    13e6:	4602      	mov	r2, r0
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	629a      	str	r2, [r3, #40]	; 0x28
	return temperatureSetpoint;
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    13f0:	4618      	mov	r0, r3
    13f2:	3710      	adds	r7, #16
    13f4:	46bd      	mov	sp, r7
    13f6:	bd80      	pop	{r7, pc}
    13f8:	200024a8 	.word	0x200024a8
    13fc:	000129d5 	.word	0x000129d5
    1400:	0001c021 	.word	0x0001c021

00001404 <_ZN19HVAC_Commando_Class14HandleCommandsEv>:
			
		}
		return true;
}

void	HVAC_Commando_Class::HandleCommands(void){
    1404:	b590      	push	{r4, r7, lr}
    1406:	b087      	sub	sp, #28
    1408:	af00      	add	r7, sp, #0
    140a:	6078      	str	r0, [r7, #4]
	if (IsCommando270Changed())
    140c:	6878      	ldr	r0, [r7, #4]
    140e:	4b2e      	ldr	r3, [pc, #184]	; (14c8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc4>)
    1410:	4798      	blx	r3
    1412:	4603      	mov	r3, r0
    1414:	2b00      	cmp	r3, #0
    1416:	d053      	beq.n	14c0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xbc>
		// 		else
		// 		{
		// 			prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
		// 			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_DISABLE_Event);
		// 		}
		hvac.OperateFlapperValve(commando270.statusFV);
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	799b      	ldrb	r3, [r3, #6]
    141c:	4619      	mov	r1, r3
    141e:	482b      	ldr	r0, [pc, #172]	; (14cc <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xc8>)
    1420:	4b2b      	ldr	r3, [pc, #172]	; (14d0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xcc>)
    1422:	4798      	blx	r3
		switch(commando270.statusArinc)
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	791b      	ldrb	r3, [r3, #4]
    1428:	2b01      	cmp	r3, #1
    142a:	d013      	beq.n	1454 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x50>
    142c:	2b02      	cmp	r3, #2
    142e:	d002      	beq.n	1436 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x32>
    1430:	2b00      	cmp	r3, #0
    1432:	d01e      	beq.n	1472 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x6e>
				break;
			default:
				//hvac.prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
			//	listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_DISABLE_Event);
			
			break;
    1434:	e02c      	b.n	1490 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x8c>
				listener.SendEventSelf(kInterfaceEventClass,k_AC_AUTO_Event);
    1436:	f107 030c 	add.w	r3, r7, #12
    143a:	2100      	movs	r1, #0
    143c:	4618      	mov	r0, r3
    143e:	4b25      	ldr	r3, [pc, #148]	; (14d4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd0>)
    1440:	4798      	blx	r3
    1442:	f107 030c 	add.w	r3, r7, #12
    1446:	2206      	movs	r2, #6
    1448:	f44f 6180 	mov.w	r1, #1024	; 0x400
    144c:	4822      	ldr	r0, [pc, #136]	; (14d8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd4>)
    144e:	4c23      	ldr	r4, [pc, #140]	; (14dc <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd8>)
    1450:	47a0      	blx	r4
			break;
    1452:	e01d      	b.n	1490 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x8c>
				listener.SendEventSelf(kInterfaceEventClass,k_AC_VENT_Event);
    1454:	f107 0310 	add.w	r3, r7, #16
    1458:	2100      	movs	r1, #0
    145a:	4618      	mov	r0, r3
    145c:	4b1d      	ldr	r3, [pc, #116]	; (14d4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd0>)
    145e:	4798      	blx	r3
    1460:	f107 0310 	add.w	r3, r7, #16
    1464:	2207      	movs	r2, #7
    1466:	f44f 6180 	mov.w	r1, #1024	; 0x400
    146a:	481b      	ldr	r0, [pc, #108]	; (14d8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd4>)
    146c:	4c1b      	ldr	r4, [pc, #108]	; (14dc <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd8>)
    146e:	47a0      	blx	r4
			break;
    1470:	e00e      	b.n	1490 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0x8c>
				listener.SendEventSelf(kInterfaceEventClass,k_AC_OFF_Event);
    1472:	f107 0314 	add.w	r3, r7, #20
    1476:	2100      	movs	r1, #0
    1478:	4618      	mov	r0, r3
    147a:	4b16      	ldr	r3, [pc, #88]	; (14d4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd0>)
    147c:	4798      	blx	r3
    147e:	f107 0314 	add.w	r3, r7, #20
    1482:	2209      	movs	r2, #9
    1484:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1488:	4813      	ldr	r0, [pc, #76]	; (14d8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd4>)
    148a:	4c14      	ldr	r4, [pc, #80]	; (14dc <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xd8>)
    148c:	47a0      	blx	r4
				break;
    148e:	bf00      	nop
			
		}
		if (IsCommando272Changed())
    1490:	6878      	ldr	r0, [r7, #4]
    1492:	4b13      	ldr	r3, [pc, #76]	; (14e0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xdc>)
    1494:	4798      	blx	r3
    1496:	4603      	mov	r3, r0
    1498:	2b00      	cmp	r3, #0
    149a:	d111      	bne.n	14c0 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xbc>
		{
			
		} 
		else
		{
			arinc.ar->SaveFansSpeed(command372);
    149c:	4b11      	ldr	r3, [pc, #68]	; (14e4 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xe0>)
    149e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    14a2:	4618      	mov	r0, r3
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	7ada      	ldrb	r2, [r3, #11]
    14a8:	7b19      	ldrb	r1, [r3, #12]
    14aa:	0209      	lsls	r1, r1, #8
    14ac:	430a      	orrs	r2, r1
    14ae:	7b5b      	ldrb	r3, [r3, #13]
    14b0:	041b      	lsls	r3, r3, #16
    14b2:	431a      	orrs	r2, r3
    14b4:	2300      	movs	r3, #0
    14b6:	f362 0317 	bfi	r3, r2, #0, #24
    14ba:	4619      	mov	r1, r3
    14bc:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <_ZN19HVAC_Commando_Class14HandleCommandsEv+0xe4>)
    14be:	4798      	blx	r3
	//	arinc.ar->SaveStatus(actualCommando);
		
		

	}
    14c0:	bf00      	nop
    14c2:	371c      	adds	r7, #28
    14c4:	46bd      	mov	sp, r7
    14c6:	bd90      	pop	{r4, r7, pc}
    14c8:	00001251 	.word	0x00001251
    14cc:	2000101c 	.word	0x2000101c
    14d0:	00001809 	.word	0x00001809
    14d4:	000011cf 	.word	0x000011cf
    14d8:	20003284 	.word	0x20003284
    14dc:	000135f9 	.word	0x000135f9
    14e0:	00001285 	.word	0x00001285
    14e4:	200024a8 	.word	0x200024a8
    14e8:	00012019 	.word	0x00012019

000014ec <_Z41__static_initialization_and_destruction_0ii>:
    14ec:	b580      	push	{r7, lr}
    14ee:	b082      	sub	sp, #8
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
    14f4:	6039      	str	r1, [r7, #0]
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	2b01      	cmp	r3, #1
    14fa:	d143      	bne.n	1584 <_Z41__static_initialization_and_destruction_0ii+0x98>
    14fc:	683b      	ldr	r3, [r7, #0]
    14fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1502:	4293      	cmp	r3, r2
    1504:	d13e      	bne.n	1584 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1506:	4921      	ldr	r1, [pc, #132]	; (158c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1508:	4821      	ldr	r0, [pc, #132]	; (1590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    150a:	4b22      	ldr	r3, [pc, #136]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    150c:	4798      	blx	r3
    150e:	4a22      	ldr	r2, [pc, #136]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1510:	4922      	ldr	r1, [pc, #136]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1512:	481f      	ldr	r0, [pc, #124]	; (1590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1514:	4b22      	ldr	r3, [pc, #136]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1516:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1518:	4922      	ldr	r1, [pc, #136]	; (15a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    151a:	4823      	ldr	r0, [pc, #140]	; (15a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    151c:	4b1d      	ldr	r3, [pc, #116]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    151e:	4798      	blx	r3
    1520:	4a1d      	ldr	r2, [pc, #116]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1522:	491e      	ldr	r1, [pc, #120]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1524:	4820      	ldr	r0, [pc, #128]	; (15a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1526:	4b1e      	ldr	r3, [pc, #120]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1528:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    152a:	4920      	ldr	r1, [pc, #128]	; (15ac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    152c:	4820      	ldr	r0, [pc, #128]	; (15b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    152e:	4b19      	ldr	r3, [pc, #100]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1530:	4798      	blx	r3
    1532:	4a19      	ldr	r2, [pc, #100]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1534:	4919      	ldr	r1, [pc, #100]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1536:	481e      	ldr	r0, [pc, #120]	; (15b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    1538:	4b19      	ldr	r3, [pc, #100]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    153a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    153c:	491d      	ldr	r1, [pc, #116]	; (15b4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    153e:	481e      	ldr	r0, [pc, #120]	; (15b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1540:	4b14      	ldr	r3, [pc, #80]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1542:	4798      	blx	r3
    1544:	4a14      	ldr	r2, [pc, #80]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1546:	4915      	ldr	r1, [pc, #84]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1548:	481b      	ldr	r0, [pc, #108]	; (15b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    154a:	4b15      	ldr	r3, [pc, #84]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    154c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    154e:	491b      	ldr	r1, [pc, #108]	; (15bc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1550:	481b      	ldr	r0, [pc, #108]	; (15c0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1552:	4b10      	ldr	r3, [pc, #64]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1554:	4798      	blx	r3
    1556:	4a10      	ldr	r2, [pc, #64]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1558:	4910      	ldr	r1, [pc, #64]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    155a:	4819      	ldr	r0, [pc, #100]	; (15c0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    155c:	4b10      	ldr	r3, [pc, #64]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    155e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1560:	4918      	ldr	r1, [pc, #96]	; (15c4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1562:	4819      	ldr	r0, [pc, #100]	; (15c8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1564:	4b0b      	ldr	r3, [pc, #44]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1566:	4798      	blx	r3
    1568:	4a0b      	ldr	r2, [pc, #44]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    156a:	490c      	ldr	r1, [pc, #48]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    156c:	4816      	ldr	r0, [pc, #88]	; (15c8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    156e:	4b0c      	ldr	r3, [pc, #48]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1570:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1572:	4916      	ldr	r1, [pc, #88]	; (15cc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1574:	4816      	ldr	r0, [pc, #88]	; (15d0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1576:	4b07      	ldr	r3, [pc, #28]	; (1594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1578:	4798      	blx	r3
    157a:	4a07      	ldr	r2, [pc, #28]	; (1598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    157c:	4907      	ldr	r1, [pc, #28]	; (159c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    157e:	4814      	ldr	r0, [pc, #80]	; (15d0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1582:	4798      	blx	r3
    1584:	bf00      	nop
    1586:	3708      	adds	r7, #8
    1588:	46bd      	mov	sp, r7
    158a:	bd80      	pop	{r7, pc}
    158c:	2000d6d8 	.word	0x2000d6d8
    1590:	20000988 	.word	0x20000988
    1594:	00013d09 	.word	0x00013d09
    1598:	20000000 	.word	0x20000000
    159c:	00013d41 	.word	0x00013d41
    15a0:	0001a44d 	.word	0x0001a44d
    15a4:	2000d76c 	.word	0x2000d76c
    15a8:	200009a8 	.word	0x200009a8
    15ac:	2000d870 	.word	0x2000d870
    15b0:	200009c8 	.word	0x200009c8
    15b4:	2000d78c 	.word	0x2000d78c
    15b8:	200009e8 	.word	0x200009e8
    15bc:	2000d830 	.word	0x2000d830
    15c0:	20000a08 	.word	0x20000a08
    15c4:	2000d850 	.word	0x2000d850
    15c8:	20000a28 	.word	0x20000a28
    15cc:	2000d748 	.word	0x2000d748
    15d0:	20000a48 	.word	0x20000a48

000015d4 <_GLOBAL__sub_I__ZN19HVAC_Commando_ClassC2Ev>:
    15d4:	b580      	push	{r7, lr}
    15d6:	af00      	add	r7, sp, #0
    15d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    15dc:	2001      	movs	r0, #1
    15de:	4b01      	ldr	r3, [pc, #4]	; (15e4 <_GLOBAL__sub_I__ZN19HVAC_Commando_ClassC2Ev+0x10>)
    15e0:	4798      	blx	r3
    15e2:	bd80      	pop	{r7, pc}
    15e4:	000014ed 	.word	0x000014ed

000015e8 <_ZL22HeaterTemperingTimeoutPK10timer_task>:
#include "FlapperValveController.h"
#include "States_Class.h"
#include "Timer_Class.h"

static bool staticTemperingTimeout=true;
static void  HeaterTemperingTimeout(const struct timer_task *const timer_task){
    15e8:	b480      	push	{r7}
    15ea:	b083      	sub	sp, #12
    15ec:	af00      	add	r7, sp, #0
    15ee:	6078      	str	r0, [r7, #4]
	hvac.temperingTimeout=true;
    15f0:	4b05      	ldr	r3, [pc, #20]	; (1608 <_ZL22HeaterTemperingTimeoutPK10timer_task+0x20>)
    15f2:	2201      	movs	r2, #1
    15f4:	715a      	strb	r2, [r3, #5]
	staticTemperingTimeout=true;
    15f6:	4b05      	ldr	r3, [pc, #20]	; (160c <_ZL22HeaterTemperingTimeoutPK10timer_task+0x24>)
    15f8:	2201      	movs	r2, #1
    15fa:	701a      	strb	r2, [r3, #0]
}
    15fc:	bf00      	nop
    15fe:	370c      	adds	r7, #12
    1600:	46bd      	mov	sp, r7
    1602:	bc80      	pop	{r7}
    1604:	4770      	bx	lr
    1606:	bf00      	nop
    1608:	2000101c 	.word	0x2000101c
    160c:	20000004 	.word	0x20000004

00001610 <_ZN15HVAC_ControllerC1Ev>:

// default constructor
HVAC_Controller::HVAC_Controller()
    1610:	b580      	push	{r7, lr}
    1612:	b082      	sub	sp, #8
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	4618      	mov	r0, r3
    161c:	4b0c      	ldr	r3, [pc, #48]	; (1650 <_ZN15HVAC_ControllerC1Ev+0x40>)
    161e:	4798      	blx	r3
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	3328      	adds	r3, #40	; 0x28
    1624:	4618      	mov	r0, r3
    1626:	4b0b      	ldr	r3, [pc, #44]	; (1654 <_ZN15HVAC_ControllerC1Ev+0x44>)
    1628:	4798      	blx	r3
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	3344      	adds	r3, #68	; 0x44
    162e:	4618      	mov	r0, r3
    1630:	4b09      	ldr	r3, [pc, #36]	; (1658 <_ZN15HVAC_ControllerC1Ev+0x48>)
    1632:	4798      	blx	r3
    1634:	4a09      	ldr	r2, [pc, #36]	; (165c <_ZN15HVAC_ControllerC1Ev+0x4c>)
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	601a      	str	r2, [r3, #0]
    163a:	4a09      	ldr	r2, [pc, #36]	; (1660 <_ZN15HVAC_ControllerC1Ev+0x50>)
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	629a      	str	r2, [r3, #40]	; 0x28
{
	temperingTimeout=true;
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	2201      	movs	r2, #1
    1644:	715a      	strb	r2, [r3, #5]
} //HVAC_Controller
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	4618      	mov	r0, r3
    164a:	3708      	adds	r7, #8
    164c:	46bd      	mov	sp, r7
    164e:	bd80      	pop	{r7, pc}
    1650:	0000419d 	.word	0x0000419d
    1654:	00004721 	.word	0x00004721
    1658:	00000f31 	.word	0x00000f31
    165c:	0001c96c 	.word	0x0001c96c
    1660:	0001c97c 	.word	0x0001c97c

00001664 <_ZN15HVAC_ControllerD1Ev>:

// default destructor
HVAC_Controller::~HVAC_Controller()
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	4a0c      	ldr	r2, [pc, #48]	; (16a0 <_ZN15HVAC_ControllerD1Ev+0x3c>)
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	601a      	str	r2, [r3, #0]
    1672:	4a0c      	ldr	r2, [pc, #48]	; (16a4 <_ZN15HVAC_ControllerD1Ev+0x40>)
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	629a      	str	r2, [r3, #40]	; 0x28
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	3344      	adds	r3, #68	; 0x44
    167c:	4618      	mov	r0, r3
    167e:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <_ZN15HVAC_ControllerD1Ev+0x44>)
    1680:	4798      	blx	r3
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	3328      	adds	r3, #40	; 0x28
    1686:	4618      	mov	r0, r3
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <_ZN15HVAC_ControllerD1Ev+0x48>)
    168a:	4798      	blx	r3
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	4618      	mov	r0, r3
    1690:	4b07      	ldr	r3, [pc, #28]	; (16b0 <_ZN15HVAC_ControllerD1Ev+0x4c>)
    1692:	4798      	blx	r3
{
} //~HVAC_Controller
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	4618      	mov	r0, r3
    1698:	3708      	adds	r7, #8
    169a:	46bd      	mov	sp, r7
    169c:	bd80      	pop	{r7, pc}
    169e:	bf00      	nop
    16a0:	0001c96c 	.word	0x0001c96c
    16a4:	0001c97c 	.word	0x0001c97c
    16a8:	00000f4d 	.word	0x00000f4d
    16ac:	0000474d 	.word	0x0000474d
    16b0:	000041d1 	.word	0x000041d1

000016b4 <_ZN15HVAC_Controller15SetHeaterDriverEh>:

uint8_t HVAC_Controller::SetHeaterDriver(uint8_t heatPower){
    16b4:	b580      	push	{r7, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	af00      	add	r7, sp, #0
    16ba:	6078      	str	r0, [r7, #4]
    16bc:	460b      	mov	r3, r1
    16be:	70fb      	strb	r3, [r7, #3]
	if (staticTemperingTimeout)
    16c0:	4b24      	ldr	r3, [pc, #144]	; (1754 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa0>)
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d03b      	beq.n	1740 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x8c>
	{
			if (AdjustFanSpeed(heatPower))
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	3304      	adds	r3, #4
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	78fa      	ldrb	r2, [r7, #3]
    16d2:	4611      	mov	r1, r2
    16d4:	6878      	ldr	r0, [r7, #4]
    16d6:	4798      	blx	r3
    16d8:	4603      	mov	r3, r0
    16da:	2b00      	cmp	r3, #0
    16dc:	d030      	beq.n	1740 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x8c>
			{
				timeoutValueTempering=automaticHeatingMode?5000:2000;
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	791b      	ldrb	r3, [r3, #4]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d002      	beq.n	16ec <_ZN15HVAC_Controller15SetHeaterDriverEh+0x38>
    16e6:	f241 3288 	movw	r2, #5000	; 0x1388
    16ea:	e001      	b.n	16f0 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x3c>
    16ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	659a      	str	r2, [r3, #88]	; 0x58
				staticTemperingTimeout=false;
    16f4:	4b17      	ldr	r3, [pc, #92]	; (1754 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa0>)
    16f6:	2200      	movs	r2, #0
    16f8:	701a      	strb	r2, [r3, #0]
				hvacTimer.Remove_task(FUNC_PTR(HeaterTemperingTimeout));
    16fa:	4917      	ldr	r1, [pc, #92]	; (1758 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa4>)
    16fc:	4817      	ldr	r0, [pc, #92]	; (175c <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa8>)
    16fe:	4b18      	ldr	r3, [pc, #96]	; (1760 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xac>)
    1700:	4798      	blx	r3
				hvacTimer.Start_oneShot_task(FUNC_PTR(HeaterTemperingTimeout),timeoutValueTempering);
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1706:	461a      	mov	r2, r3
    1708:	4913      	ldr	r1, [pc, #76]	; (1758 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa4>)
    170a:	4814      	ldr	r0, [pc, #80]	; (175c <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa8>)
    170c:	4b15      	ldr	r3, [pc, #84]	; (1764 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xb0>)
    170e:	4798      	blx	r3
				for (uint8_t i = 0; i < 4; i++)
    1710:	2300      	movs	r3, #0
    1712:	73fb      	strb	r3, [r7, #15]
    1714:	7bfb      	ldrb	r3, [r7, #15]
    1716:	2b03      	cmp	r3, #3
    1718:	dc12      	bgt.n	1740 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x8c>
				{
					if (i<heatPower)
    171a:	7bfa      	ldrb	r2, [r7, #15]
    171c:	78fb      	ldrb	r3, [r7, #3]
    171e:	429a      	cmp	r2, r3
    1720:	da05      	bge.n	172e <_ZN15HVAC_Controller15SetHeaterDriverEh+0x7a>
					{
						heater.EnableIndex(i);
    1722:	7bfb      	ldrb	r3, [r7, #15]
    1724:	4619      	mov	r1, r3
    1726:	4810      	ldr	r0, [pc, #64]	; (1768 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xb4>)
    1728:	4b10      	ldr	r3, [pc, #64]	; (176c <_ZN15HVAC_Controller15SetHeaterDriverEh+0xb8>)
    172a:	4798      	blx	r3
    172c:	e004      	b.n	1738 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x84>
					}
					else
					{
						heater.DisableIndex(i);
    172e:	7bfb      	ldrb	r3, [r7, #15]
    1730:	4619      	mov	r1, r3
    1732:	480d      	ldr	r0, [pc, #52]	; (1768 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xb4>)
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xbc>)
    1736:	4798      	blx	r3
				for (uint8_t i = 0; i < 4; i++)
    1738:	7bfb      	ldrb	r3, [r7, #15]
    173a:	3301      	adds	r3, #1
    173c:	73fb      	strb	r3, [r7, #15]
    173e:	e7e9      	b.n	1714 <_ZN15HVAC_Controller15SetHeaterDriverEh+0x60>
	} 
	else
	{
		
	}
	temperingTimeout=staticTemperingTimeout;
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <_ZN15HVAC_Controller15SetHeaterDriverEh+0xa0>)
    1742:	781a      	ldrb	r2, [r3, #0]
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	715a      	strb	r2, [r3, #5]

	return heatPower;
    1748:	78fb      	ldrb	r3, [r7, #3]
}
    174a:	4618      	mov	r0, r3
    174c:	3710      	adds	r7, #16
    174e:	46bd      	mov	sp, r7
    1750:	bd80      	pop	{r7, pc}
    1752:	bf00      	nop
    1754:	20000004 	.word	0x20000004
    1758:	000015e9 	.word	0x000015e9
    175c:	20000aa8 	.word	0x20000aa8
    1760:	00013f85 	.word	0x00013f85
    1764:	00013ff5 	.word	0x00013ff5
    1768:	20005814 	.word	0x20005814
    176c:	000172a9 	.word	0x000172a9
    1770:	00017349 	.word	0x00017349

00001774 <_ZThn40_N15HVAC_Controller15SetHeaterDriverEh>:
	uint32_t timeoutValueTempering;
//functions
public:
	HVAC_Controller();
	~HVAC_Controller();
		 uint8_t SetHeaterDriver(uint8_t);
    1774:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
    1778:	f7ff bf9c 	b.w	16b4 <_ZN15HVAC_Controller15SetHeaterDriverEh>

0000177c <_ZN15HVAC_Controller14AdjustFanSpeedEh>:

bool	HVAC_Controller::AdjustFanSpeed(uint8_t heatPower){
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
    1782:	6078      	str	r0, [r7, #4]
    1784:	460b      	mov	r3, r1
    1786:	70fb      	strb	r3, [r7, #3]
	if (heatPower>0)
    1788:	78fb      	ldrb	r3, [r7, #3]
    178a:	2b00      	cmp	r3, #0
    178c:	dd16      	ble.n	17bc <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x40>
	{
			fans.evaporator[0]->SetPWM(heatPower*16+EVAPORATOR_MINIMUN_FLOW_AIR);
    178e:	4b19      	ldr	r3, [pc, #100]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    1790:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1792:	78fb      	ldrb	r3, [r7, #3]
    1794:	011b      	lsls	r3, r3, #4
    1796:	b2db      	uxtb	r3, r3
    1798:	330c      	adds	r3, #12
    179a:	b2db      	uxtb	r3, r3
    179c:	4619      	mov	r1, r3
    179e:	4610      	mov	r0, r2
    17a0:	4b15      	ldr	r3, [pc, #84]	; (17f8 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x7c>)
    17a2:	4798      	blx	r3
			fans.evaporator[1]->SetPWM(heatPower*16+EVAPORATOR_MINIMUN_FLOW_AIR);
    17a4:	4b13      	ldr	r3, [pc, #76]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    17a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    17a8:	78fb      	ldrb	r3, [r7, #3]
    17aa:	011b      	lsls	r3, r3, #4
    17ac:	b2db      	uxtb	r3, r3
    17ae:	330c      	adds	r3, #12
    17b0:	b2db      	uxtb	r3, r3
    17b2:	4619      	mov	r1, r3
    17b4:	4610      	mov	r0, r2
    17b6:	4b10      	ldr	r3, [pc, #64]	; (17f8 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x7c>)
    17b8:	4798      	blx	r3
    17ba:	e00b      	b.n	17d4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x58>
	//	fans.condesator->SetPWM(heatPower*64-1);
	}
	else
	{
		fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    17bc:	4b0d      	ldr	r3, [pc, #52]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    17be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    17c0:	210c      	movs	r1, #12
    17c2:	4618      	mov	r0, r3
    17c4:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x7c>)
    17c6:	4798      	blx	r3
		fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    17c8:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    17ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    17cc:	210c      	movs	r1, #12
    17ce:	4618      	mov	r0, r3
    17d0:	4b09      	ldr	r3, [pc, #36]	; (17f8 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x7c>)
    17d2:	4798      	blx	r3
	//	fans.condesator->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
	}
	fans.evaporator[1]->ReadStatus();
    17d4:	4b07      	ldr	r3, [pc, #28]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    17d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    17d8:	4618      	mov	r0, r3
    17da:	4b08      	ldr	r3, [pc, #32]	; (17fc <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x80>)
    17dc:	4798      	blx	r3
//	fans.condesator->ReadStatus();
	//return fans.evaporator[0]->evaporatorFansStatus.inputs->iAlcEvaFanPwmFault;
	return fans.condesator->condesatorStatus.niAlcCdsFanExtFault;
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <_ZN15HVAC_Controller14AdjustFanSpeedEh+0x78>)
    17e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    17e2:	78db      	ldrb	r3, [r3, #3]
    17e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    17e8:	b2db      	uxtb	r3, r3
}
    17ea:	4618      	mov	r0, r3
    17ec:	3708      	adds	r7, #8
    17ee:	46bd      	mov	sp, r7
    17f0:	bd80      	pop	{r7, pc}
    17f2:	bf00      	nop
    17f4:	20003b28 	.word	0x20003b28
    17f8:	0001525d 	.word	0x0001525d
    17fc:	000151f5 	.word	0x000151f5

00001800 <_ZThn40_N15HVAC_Controller14AdjustFanSpeedEh>:
		 bool	AdjustFanSpeed(uint8_t);
    1800:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
    1804:	f7ff bfba 	b.w	177c <_ZN15HVAC_Controller14AdjustFanSpeedEh>

00001808 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode>:

uint8_t	HVAC_Controller::OperateFlapperValve(FlapperValveMode fvm){
    1808:	b580      	push	{r7, lr}
    180a:	b082      	sub	sp, #8
    180c:	af00      	add	r7, sp, #0
    180e:	6078      	str	r0, [r7, #4]
    1810:	460b      	mov	r3, r1
    1812:	70fb      	strb	r3, [r7, #3]
	
	if (lastFlapperValveMode!=fvm)
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
    181a:	78fa      	ldrb	r2, [r7, #3]
    181c:	429a      	cmp	r2, r3
    181e:	d019      	beq.n	1854 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x4c>
	{
		lastFlapperValveMode=flapperValveMode;
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		flapperValveMode=fvm;
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	78fa      	ldrb	r2, [r7, #3]
    1830:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		if (fvc.IsNBCMode())
    1834:	4816      	ldr	r0, [pc, #88]	; (1890 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x88>)
    1836:	4b17      	ldr	r3, [pc, #92]	; (1894 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x8c>)
    1838:	4798      	blx	r3
    183a:	4603      	mov	r3, r0
    183c:	2b00      	cmp	r3, #0
    183e:	d011      	beq.n	1864 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x5c>
		{
			if (flapperValveMode==NBC_MODE)
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    1846:	2b03      	cmp	r3, #3
    1848:	d00c      	beq.n	1864 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x5c>
			{
			} 
			else
			{
				fvc.SetRemoteNBCMode(false);
    184a:	2100      	movs	r1, #0
    184c:	4810      	ldr	r0, [pc, #64]	; (1890 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x88>)
    184e:	4b12      	ldr	r3, [pc, #72]	; (1898 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x90>)
    1850:	4798      	blx	r3
    1852:	e007      	b.n	1864 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x5c>
			
		}
		
		
	}else{
		flapperValveAngle=fvc.GetCurrentPosition();
    1854:	480e      	ldr	r0, [pc, #56]	; (1890 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x88>)
    1856:	4b11      	ldr	r3, [pc, #68]	; (189c <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x94>)
    1858:	4798      	blx	r3
    185a:	4603      	mov	r3, r0
    185c:	461a      	mov	r2, r3
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
	SetFlapperValveDiscretePosition(flapperValveMode);
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    186a:	4619      	mov	r1, r3
    186c:	6878      	ldr	r0, [r7, #4]
    186e:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x98>)
    1870:	4798      	blx	r3
	hvac.hvacState->arincStatus.statusFV=flapperValveMode;
    1872:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <_ZN15HVAC_Controller19OperateFlapperValveE16FlapperValveMode+0x9c>)
    1874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
    187e:	779a      	strb	r2, [r3, #30]
	return flapperValveAngle;
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
}
    1886:	4618      	mov	r0, r3
    1888:	3708      	adds	r7, #8
    188a:	46bd      	mov	sp, r7
    188c:	bd80      	pop	{r7, pc}
    188e:	bf00      	nop
    1890:	20005598 	.word	0x20005598
    1894:	00016209 	.word	0x00016209
    1898:	00016251 	.word	0x00016251
    189c:	00016729 	.word	0x00016729
    18a0:	000018a9 	.word	0x000018a9
    18a4:	2000101c 	.word	0x2000101c

000018a8 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode>:

void	HVAC_Controller::SetFlapperValveDiscretePosition(FlapperValveMode fvm){
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	460b      	mov	r3, r1
    18b2:	70fb      	strb	r3, [r7, #3]
	switch (fvm)
    18b4:	78fb      	ldrb	r3, [r7, #3]
    18b6:	2b03      	cmp	r3, #3
    18b8:	d81e      	bhi.n	18f8 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x50>
    18ba:	a201      	add	r2, pc, #4	; (adr r2, 18c0 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x18>)
    18bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    18c0:	000018d1 	.word	0x000018d1
    18c4:	000018db 	.word	0x000018db
    18c8:	000018e5 	.word	0x000018e5
    18cc:	000018ef 	.word	0x000018ef
	{
		case FRESHAIR_MODE:
		fvc.StartControlling(0);
    18d0:	2100      	movs	r1, #0
    18d2:	480e      	ldr	r0, [pc, #56]	; (190c <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x64>)
    18d4:	4b0e      	ldr	r3, [pc, #56]	; (1910 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x68>)
    18d6:	4798      	blx	r3
		
		break;
    18d8:	e013      	b.n	1902 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x5a>
		case INTERM_MODE:
		fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR/2);
    18da:	216d      	movs	r1, #109	; 0x6d
    18dc:	480b      	ldr	r0, [pc, #44]	; (190c <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x64>)
    18de:	4b0c      	ldr	r3, [pc, #48]	; (1910 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x68>)
    18e0:	4798      	blx	r3
		break;
    18e2:	e00e      	b.n	1902 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x5a>
		case RECYCLE_MODE:
		fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR);
    18e4:	21da      	movs	r1, #218	; 0xda
    18e6:	4809      	ldr	r0, [pc, #36]	; (190c <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x64>)
    18e8:	4b09      	ldr	r3, [pc, #36]	; (1910 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x68>)
    18ea:	4798      	blx	r3
		break;
    18ec:	e009      	b.n	1902 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x5a>
		case NBC_MODE:
		fvc.SetRemoteNBCMode(true);
    18ee:	2101      	movs	r1, #1
    18f0:	4806      	ldr	r0, [pc, #24]	; (190c <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x64>)
    18f2:	4b08      	ldr	r3, [pc, #32]	; (1914 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x6c>)
    18f4:	4798      	blx	r3
		break;
    18f6:	e004      	b.n	1902 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x5a>
		default:
		fvc.StartControlling(FLAPPER_VALVE_MINIMUM_AIR);
    18f8:	21da      	movs	r1, #218	; 0xda
    18fa:	4804      	ldr	r0, [pc, #16]	; (190c <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x64>)
    18fc:	4b04      	ldr	r3, [pc, #16]	; (1910 <_ZN15HVAC_Controller31SetFlapperValveDiscretePositionE16FlapperValveMode+0x68>)
    18fe:	4798      	blx	r3
		break;
    1900:	bf00      	nop
	}
    1902:	bf00      	nop
    1904:	3708      	adds	r7, #8
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	bf00      	nop
    190c:	20005598 	.word	0x20005598
    1910:	00016471 	.word	0x00016471
    1914:	00016251 	.word	0x00016251

00001918 <_Z41__static_initialization_and_destruction_0ii>:
    1918:	b580      	push	{r7, lr}
    191a:	b082      	sub	sp, #8
    191c:	af00      	add	r7, sp, #0
    191e:	6078      	str	r0, [r7, #4]
    1920:	6039      	str	r1, [r7, #0]
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	2b01      	cmp	r3, #1
    1926:	d143      	bne.n	19b0 <_Z41__static_initialization_and_destruction_0ii+0x98>
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    192e:	4293      	cmp	r3, r2
    1930:	d13e      	bne.n	19b0 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1932:	4921      	ldr	r1, [pc, #132]	; (19b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1934:	4821      	ldr	r0, [pc, #132]	; (19bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1936:	4b22      	ldr	r3, [pc, #136]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1938:	4798      	blx	r3
    193a:	4a22      	ldr	r2, [pc, #136]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    193c:	4922      	ldr	r1, [pc, #136]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    193e:	481f      	ldr	r0, [pc, #124]	; (19bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1940:	4b22      	ldr	r3, [pc, #136]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1942:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1944:	4922      	ldr	r1, [pc, #136]	; (19d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    1946:	4823      	ldr	r0, [pc, #140]	; (19d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1948:	4b1d      	ldr	r3, [pc, #116]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    194a:	4798      	blx	r3
    194c:	4a1d      	ldr	r2, [pc, #116]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    194e:	491e      	ldr	r1, [pc, #120]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1950:	4820      	ldr	r0, [pc, #128]	; (19d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1952:	4b1e      	ldr	r3, [pc, #120]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1954:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    1956:	4920      	ldr	r1, [pc, #128]	; (19d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    1958:	4820      	ldr	r0, [pc, #128]	; (19dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    195a:	4b19      	ldr	r3, [pc, #100]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    195c:	4798      	blx	r3
    195e:	4a19      	ldr	r2, [pc, #100]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1960:	4919      	ldr	r1, [pc, #100]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1962:	481e      	ldr	r0, [pc, #120]	; (19dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    1964:	4b19      	ldr	r3, [pc, #100]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1966:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1968:	491d      	ldr	r1, [pc, #116]	; (19e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    196a:	481e      	ldr	r0, [pc, #120]	; (19e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    196c:	4b14      	ldr	r3, [pc, #80]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    196e:	4798      	blx	r3
    1970:	4a14      	ldr	r2, [pc, #80]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1972:	4915      	ldr	r1, [pc, #84]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1974:	481b      	ldr	r0, [pc, #108]	; (19e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1976:	4b15      	ldr	r3, [pc, #84]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1978:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    197a:	491b      	ldr	r1, [pc, #108]	; (19e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    197c:	481b      	ldr	r0, [pc, #108]	; (19ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    197e:	4b10      	ldr	r3, [pc, #64]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1980:	4798      	blx	r3
    1982:	4a10      	ldr	r2, [pc, #64]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1984:	4910      	ldr	r1, [pc, #64]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1986:	4819      	ldr	r0, [pc, #100]	; (19ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1988:	4b10      	ldr	r3, [pc, #64]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    198a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    198c:	4918      	ldr	r1, [pc, #96]	; (19f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    198e:	4819      	ldr	r0, [pc, #100]	; (19f4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1990:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1992:	4798      	blx	r3
    1994:	4a0b      	ldr	r2, [pc, #44]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1996:	490c      	ldr	r1, [pc, #48]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1998:	4816      	ldr	r0, [pc, #88]	; (19f4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    199a:	4b0c      	ldr	r3, [pc, #48]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    199c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    199e:	4916      	ldr	r1, [pc, #88]	; (19f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    19a0:	4816      	ldr	r0, [pc, #88]	; (19fc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    19a4:	4798      	blx	r3
    19a6:	4a07      	ldr	r2, [pc, #28]	; (19c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    19a8:	4907      	ldr	r1, [pc, #28]	; (19c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    19aa:	4814      	ldr	r0, [pc, #80]	; (19fc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    19ac:	4b07      	ldr	r3, [pc, #28]	; (19cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    19ae:	4798      	blx	r3
    19b0:	bf00      	nop
    19b2:	3708      	adds	r7, #8
    19b4:	46bd      	mov	sp, r7
    19b6:	bd80      	pop	{r7, pc}
    19b8:	2000d6d8 	.word	0x2000d6d8
    19bc:	20000a68 	.word	0x20000a68
    19c0:	00013d09 	.word	0x00013d09
    19c4:	20000000 	.word	0x20000000
    19c8:	00013d41 	.word	0x00013d41
    19cc:	0001a44d 	.word	0x0001a44d
    19d0:	2000d76c 	.word	0x2000d76c
    19d4:	20000a88 	.word	0x20000a88
    19d8:	2000d870 	.word	0x2000d870
    19dc:	20000aa8 	.word	0x20000aa8
    19e0:	2000d78c 	.word	0x2000d78c
    19e4:	20000ac8 	.word	0x20000ac8
    19e8:	2000d830 	.word	0x2000d830
    19ec:	20000ae8 	.word	0x20000ae8
    19f0:	2000d850 	.word	0x2000d850
    19f4:	20000b08 	.word	0x20000b08
    19f8:	2000d748 	.word	0x2000d748
    19fc:	20000b28 	.word	0x20000b28

00001a00 <_GLOBAL__sub_I__ZN15HVAC_ControllerC2Ev>:
    1a00:	b580      	push	{r7, lr}
    1a02:	af00      	add	r7, sp, #0
    1a04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1a08:	2001      	movs	r0, #1
    1a0a:	4b01      	ldr	r3, [pc, #4]	; (1a10 <_GLOBAL__sub_I__ZN15HVAC_ControllerC2Ev+0x10>)
    1a0c:	4798      	blx	r3
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	00001919 	.word	0x00001919

00001a14 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1a14:	b480      	push	{r7}
    1a16:	b085      	sub	sp, #20
    1a18:	af00      	add	r7, sp, #0
    1a1a:	60f8      	str	r0, [r7, #12]
    1a1c:	460b      	mov	r3, r1
    1a1e:	607a      	str	r2, [r7, #4]
    1a20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a22:	7afb      	ldrb	r3, [r7, #11]
    1a24:	68fa      	ldr	r2, [r7, #12]
    1a26:	01db      	lsls	r3, r3, #7
    1a28:	4413      	add	r3, r2
    1a2a:	3318      	adds	r3, #24
    1a2c:	687a      	ldr	r2, [r7, #4]
    1a2e:	601a      	str	r2, [r3, #0]
}
    1a30:	bf00      	nop
    1a32:	3714      	adds	r7, #20
    1a34:	46bd      	mov	sp, r7
    1a36:	bc80      	pop	{r7}
    1a38:	4770      	bx	lr

00001a3a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1a3a:	b480      	push	{r7}
    1a3c:	b085      	sub	sp, #20
    1a3e:	af00      	add	r7, sp, #0
    1a40:	60f8      	str	r0, [r7, #12]
    1a42:	460b      	mov	r3, r1
    1a44:	607a      	str	r2, [r7, #4]
    1a46:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a48:	7afb      	ldrb	r3, [r7, #11]
    1a4a:	68fa      	ldr	r2, [r7, #12]
    1a4c:	01db      	lsls	r3, r3, #7
    1a4e:	4413      	add	r3, r2
    1a50:	3314      	adds	r3, #20
    1a52:	687a      	ldr	r2, [r7, #4]
    1a54:	601a      	str	r2, [r3, #0]
}
    1a56:	bf00      	nop
    1a58:	3714      	adds	r7, #20
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bc80      	pop	{r7}
    1a5e:	4770      	bx	lr

00001a60 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1a60:	b480      	push	{r7}
    1a62:	b085      	sub	sp, #20
    1a64:	af00      	add	r7, sp, #0
    1a66:	60f8      	str	r0, [r7, #12]
    1a68:	460b      	mov	r3, r1
    1a6a:	607a      	str	r2, [r7, #4]
    1a6c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1a6e:	7afb      	ldrb	r3, [r7, #11]
    1a70:	68fa      	ldr	r2, [r7, #12]
    1a72:	01db      	lsls	r3, r3, #7
    1a74:	4413      	add	r3, r2
    1a76:	331c      	adds	r3, #28
    1a78:	687a      	ldr	r2, [r7, #4]
    1a7a:	601a      	str	r2, [r3, #0]
}
    1a7c:	bf00      	nop
    1a7e:	3714      	adds	r7, #20
    1a80:	46bd      	mov	sp, r7
    1a82:	bc80      	pop	{r7}
    1a84:	4770      	bx	lr
	...

00001a88 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	b082      	sub	sp, #8
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	4603      	mov	r3, r0
    1a90:	6039      	str	r1, [r7, #0]
    1a92:	71fb      	strb	r3, [r7, #7]
    1a94:	4613      	mov	r3, r2
    1a96:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1a98:	79bb      	ldrb	r3, [r7, #6]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d006      	beq.n	1aac <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1a9e:	79fb      	ldrb	r3, [r7, #7]
    1aa0:	683a      	ldr	r2, [r7, #0]
    1aa2:	4619      	mov	r1, r3
    1aa4:	4806      	ldr	r0, [pc, #24]	; (1ac0 <_gpio_set_level+0x38>)
    1aa6:	4b07      	ldr	r3, [pc, #28]	; (1ac4 <_gpio_set_level+0x3c>)
    1aa8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1aaa:	e005      	b.n	1ab8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1aac:	79fb      	ldrb	r3, [r7, #7]
    1aae:	683a      	ldr	r2, [r7, #0]
    1ab0:	4619      	mov	r1, r3
    1ab2:	4803      	ldr	r0, [pc, #12]	; (1ac0 <_gpio_set_level+0x38>)
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <_gpio_set_level+0x40>)
    1ab6:	4798      	blx	r3
}
    1ab8:	bf00      	nop
    1aba:	3708      	adds	r7, #8
    1abc:	46bd      	mov	sp, r7
    1abe:	bd80      	pop	{r7, pc}
    1ac0:	41008000 	.word	0x41008000
    1ac4:	00001a15 	.word	0x00001a15
    1ac8:	00001a3b 	.word	0x00001a3b

00001acc <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    1acc:	b580      	push	{r7, lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	4603      	mov	r3, r0
    1ad4:	6039      	str	r1, [r7, #0]
    1ad6:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    1ad8:	79fb      	ldrb	r3, [r7, #7]
    1ada:	683a      	ldr	r2, [r7, #0]
    1adc:	4619      	mov	r1, r3
    1ade:	4803      	ldr	r0, [pc, #12]	; (1aec <_gpio_toggle_level+0x20>)
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <_gpio_toggle_level+0x24>)
    1ae2:	4798      	blx	r3
}
    1ae4:	bf00      	nop
    1ae6:	3708      	adds	r7, #8
    1ae8:	46bd      	mov	sp, r7
    1aea:	bd80      	pop	{r7, pc}
    1aec:	41008000 	.word	0x41008000
    1af0:	00001a61 	.word	0x00001a61

00001af4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	4603      	mov	r3, r0
    1afc:	460a      	mov	r2, r1
    1afe:	71fb      	strb	r3, [r7, #7]
    1b00:	4613      	mov	r3, r2
    1b02:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1b04:	79fb      	ldrb	r3, [r7, #7]
    1b06:	115b      	asrs	r3, r3, #5
    1b08:	b2d8      	uxtb	r0, r3
    1b0a:	79fb      	ldrb	r3, [r7, #7]
    1b0c:	f003 031f 	and.w	r3, r3, #31
    1b10:	2201      	movs	r2, #1
    1b12:	fa02 f303 	lsl.w	r3, r2, r3
    1b16:	79ba      	ldrb	r2, [r7, #6]
    1b18:	4619      	mov	r1, r3
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <gpio_set_pin_level+0x34>)
    1b1c:	4798      	blx	r3
}
    1b1e:	bf00      	nop
    1b20:	3708      	adds	r7, #8
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop
    1b28:	00001a89 	.word	0x00001a89

00001b2c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	b082      	sub	sp, #8
    1b30:	af00      	add	r7, sp, #0
    1b32:	4603      	mov	r3, r0
    1b34:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    1b36:	79fb      	ldrb	r3, [r7, #7]
    1b38:	115b      	asrs	r3, r3, #5
    1b3a:	b2d8      	uxtb	r0, r3
    1b3c:	79fb      	ldrb	r3, [r7, #7]
    1b3e:	f003 031f 	and.w	r3, r3, #31
    1b42:	2201      	movs	r2, #1
    1b44:	fa02 f303 	lsl.w	r3, r2, r3
    1b48:	4619      	mov	r1, r3
    1b4a:	4b03      	ldr	r3, [pc, #12]	; (1b58 <gpio_toggle_pin_level+0x2c>)
    1b4c:	4798      	blx	r3
}
    1b4e:	bf00      	nop
    1b50:	3708      	adds	r7, #8
    1b52:	46bd      	mov	sp, r7
    1b54:	bd80      	pop	{r7, pc}
    1b56:	bf00      	nop
    1b58:	00001acd 	.word	0x00001acd

00001b5c <_ZN16Interfaces_ClassC1Ev>:
#include "Maintenance_Tool.h"
#include "FlapperValveController.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1b5c:	b480      	push	{r7}
    1b5e:	b083      	sub	sp, #12
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
{
	isOK=false;
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	2200      	movs	r2, #0
    1b68:	701a      	strb	r2, [r3, #0]
} //Interfaces_Class
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	4618      	mov	r0, r3
    1b6e:	370c      	adds	r7, #12
    1b70:	46bd      	mov	sp, r7
    1b72:	bc80      	pop	{r7}
    1b74:	4770      	bx	lr

00001b76 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1b76:	b480      	push	{r7}
    1b78:	b083      	sub	sp, #12
    1b7a:	af00      	add	r7, sp, #0
    1b7c:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	4618      	mov	r0, r3
    1b82:	370c      	adds	r7, #12
    1b84:	46bd      	mov	sp, r7
    1b86:	bc80      	pop	{r7}
    1b88:	4770      	bx	lr
	...

00001b8c <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]

	gpio_set_pin_level(LED0,true);
    1b94:	2101      	movs	r1, #1
    1b96:	2052      	movs	r0, #82	; 0x52
    1b98:	4b1b      	ldr	r3, [pc, #108]	; (1c08 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1b9a:	4798      	blx	r3
	size=sizeof(CommunicationRequest);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	2205      	movs	r2, #5
    1ba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	while (!arinc.Init_ARINC())
    1ba4:	4819      	ldr	r0, [pc, #100]	; (1c0c <_ZN16Interfaces_Class4InitEv+0x80>)
    1ba6:	4b1a      	ldr	r3, [pc, #104]	; (1c10 <_ZN16Interfaces_Class4InitEv+0x84>)
    1ba8:	4798      	blx	r3
    1baa:	4603      	mov	r3, r0
    1bac:	f083 0301 	eor.w	r3, r3, #1
    1bb0:	b2db      	uxtb	r3, r3
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d006      	beq.n	1bc4 <_ZN16Interfaces_Class4InitEv+0x38>
	{
		delay_ms(200);
    1bb6:	20c8      	movs	r0, #200	; 0xc8
    1bb8:	4b16      	ldr	r3, [pc, #88]	; (1c14 <_ZN16Interfaces_Class4InitEv+0x88>)
    1bba:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    1bbc:	2052      	movs	r0, #82	; 0x52
    1bbe:	4b16      	ldr	r3, [pc, #88]	; (1c18 <_ZN16Interfaces_Class4InitEv+0x8c>)
    1bc0:	4798      	blx	r3
	while (!arinc.Init_ARINC())
    1bc2:	e7ef      	b.n	1ba4 <_ZN16Interfaces_Class4InitEv+0x18>
	}
	
	while (!toolApp.Init())
    1bc4:	4815      	ldr	r0, [pc, #84]	; (1c1c <_ZN16Interfaces_Class4InitEv+0x90>)
    1bc6:	4b16      	ldr	r3, [pc, #88]	; (1c20 <_ZN16Interfaces_Class4InitEv+0x94>)
    1bc8:	4798      	blx	r3
    1bca:	4603      	mov	r3, r0
    1bcc:	f083 0301 	eor.w	r3, r3, #1
    1bd0:	b2db      	uxtb	r3, r3
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d006      	beq.n	1be4 <_ZN16Interfaces_Class4InitEv+0x58>
	{
		delay_ms(200);
    1bd6:	20c8      	movs	r0, #200	; 0xc8
    1bd8:	4b0e      	ldr	r3, [pc, #56]	; (1c14 <_ZN16Interfaces_Class4InitEv+0x88>)
    1bda:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    1bdc:	2052      	movs	r0, #82	; 0x52
    1bde:	4b0e      	ldr	r3, [pc, #56]	; (1c18 <_ZN16Interfaces_Class4InitEv+0x8c>)
    1be0:	4798      	blx	r3
	while (!toolApp.Init())
    1be2:	e7ef      	b.n	1bc4 <_ZN16Interfaces_Class4InitEv+0x38>
	}
	isOK=arinc.isOK;
    1be4:	4b09      	ldr	r3, [pc, #36]	; (1c0c <_ZN16Interfaces_Class4InitEv+0x80>)
    1be6:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
    1bea:	b2da      	uxtb	r2, r3
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	701a      	strb	r2, [r3, #0]
	} 
	else
	{
		//alu.NotifyError(kARINCINnterfaceError,result);
	}
	gpio_set_pin_level(LED0,true);
    1bf0:	2101      	movs	r1, #1
    1bf2:	2052      	movs	r0, #82	; 0x52
    1bf4:	4b04      	ldr	r3, [pc, #16]	; (1c08 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1bf6:	4798      	blx	r3
	return isOK;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	781b      	ldrb	r3, [r3, #0]
    1bfc:	b2db      	uxtb	r3, r3
}
    1bfe:	4618      	mov	r0, r3
    1c00:	3708      	adds	r7, #8
    1c02:	46bd      	mov	sp, r7
    1c04:	bd80      	pop	{r7, pc}
    1c06:	bf00      	nop
    1c08:	00001af5 	.word	0x00001af5
    1c0c:	200024a8 	.word	0x200024a8
    1c10:	000124f9 	.word	0x000124f9
    1c14:	0000647d 	.word	0x0000647d
    1c18:	00001b2d 	.word	0x00001b2d
    1c1c:	2000583c 	.word	0x2000583c
    1c20:	000178c5 	.word	0x000178c5

00001c24 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b086      	sub	sp, #24
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	6039      	str	r1, [r7, #0]
	event e;
    1c2e:	f107 0308 	add.w	r3, r7, #8
    1c32:	4618      	mov	r0, r3
    1c34:	4b09      	ldr	r3, [pc, #36]	; (1c5c <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1c36:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1c38:	6838      	ldr	r0, [r7, #0]
    1c3a:	4b09      	ldr	r3, [pc, #36]	; (1c60 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1c3c:	4798      	blx	r3
	CheckExternalCommunication();
    1c3e:	6838      	ldr	r0, [r7, #0]
    1c40:	4b08      	ldr	r3, [pc, #32]	; (1c64 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1c42:	4798      	blx	r3
	r=request;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	4a08      	ldr	r2, [pc, #32]	; (1c68 <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1c48:	6810      	ldr	r0, [r2, #0]
    1c4a:	6018      	str	r0, [r3, #0]
    1c4c:	7912      	ldrb	r2, [r2, #4]
    1c4e:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1c50:	bf00      	nop
}
    1c52:	6878      	ldr	r0, [r7, #4]
    1c54:	3718      	adds	r7, #24
    1c56:	46bd      	mov	sp, r7
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	bf00      	nop
    1c5c:	000003c5 	.word	0x000003c5
    1c60:	00001ce5 	.word	0x00001ce5
    1c64:	00001d11 	.word	0x00001d11
    1c68:	20000c40 	.word	0x20000c40

00001c6c <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b086      	sub	sp, #24
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1c74:	f107 0308 	add.w	r3, r7, #8
    1c78:	6879      	ldr	r1, [r7, #4]
    1c7a:	4618      	mov	r0, r3
    1c7c:	4b17      	ldr	r3, [pc, #92]	; (1cdc <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1c7e:	4798      	blx	r3
	uint8_t result=0;
    1c80:	2300      	movs	r3, #0
    1c82:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    1c8a:	461a      	mov	r2, r3
    1c8c:	f107 0108 	add.w	r1, r7, #8
    1c90:	f107 0310 	add.w	r3, r7, #16
    1c94:	4618      	mov	r0, r3
    1c96:	4b12      	ldr	r3, [pc, #72]	; (1ce0 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1c98:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1c9a:	2300      	movs	r3, #0
    1c9c:	75bb      	strb	r3, [r7, #22]
    1c9e:	7dbb      	ldrb	r3, [r7, #22]
    1ca0:	687a      	ldr	r2, [r7, #4]
    1ca2:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
    1ca6:	4293      	cmp	r3, r2
    1ca8:	da0d      	bge.n	1cc6 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1caa:	7dbb      	ldrb	r3, [r7, #22]
    1cac:	f107 0218 	add.w	r2, r7, #24
    1cb0:	4413      	add	r3, r2
    1cb2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1cb6:	461a      	mov	r2, r3
    1cb8:	7dfb      	ldrb	r3, [r7, #23]
    1cba:	4313      	orrs	r3, r2
    1cbc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1cbe:	7dbb      	ldrb	r3, [r7, #22]
    1cc0:	3301      	adds	r3, #1
    1cc2:	75bb      	strb	r3, [r7, #22]
    1cc4:	e7eb      	b.n	1c9e <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1cc6:	7dfb      	ldrb	r3, [r7, #23]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	bfcc      	ite	gt
    1ccc:	2301      	movgt	r3, #1
    1cce:	2300      	movle	r3, #0
    1cd0:	b2db      	uxtb	r3, r3
}
    1cd2:	4618      	mov	r0, r3
    1cd4:	3718      	adds	r7, #24
    1cd6:	46bd      	mov	sp, r7
    1cd8:	bd80      	pop	{r7, pc}
    1cda:	bf00      	nop
    1cdc:	00001c25 	.word	0x00001c25
    1ce0:	0001c521 	.word	0x0001c521

00001ce4 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b084      	sub	sp, #16
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1cec:	2300      	movs	r3, #0
    1cee:	60fb      	str	r3, [r7, #12]
//	request.internRequest.flapperValvesMessage=CheckFlapperValveInterface(1);
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
    1cf0:	6878      	ldr	r0, [r7, #4]
    1cf2:	4b05      	ldr	r3, [pc, #20]	; (1d08 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x24>)
    1cf4:	4798      	blx	r3
    1cf6:	4603      	mov	r3, r0
    1cf8:	461a      	mov	r2, r3
    1cfa:	4b04      	ldr	r3, [pc, #16]	; (1d0c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x28>)
    1cfc:	701a      	strb	r2, [r3, #0]
	return	0;
    1cfe:	2300      	movs	r3, #0
}
    1d00:	4618      	mov	r0, r3
    1d02:	3710      	adds	r7, #16
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	00001da5 	.word	0x00001da5
    1d0c:	20000c40 	.word	0x20000c40

00001d10 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1d10:	b580      	push	{r7, lr}
    1d12:	b084      	sub	sp, #16
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1d18:	2300      	movs	r3, #0
    1d1a:	60fb      	str	r3, [r7, #12]


	if (arinc.ar->newMessageR1)
    1d1c:	4b1a      	ldr	r3, [pc, #104]	; (1d88 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x78>)
    1d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    1d22:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1d26:	b2db      	uxtb	r3, r3
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d007      	beq.n	1d3c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x2c>
	{
		request.externRequest.arinc1GotMessage=true;
    1d2c:	4b17      	ldr	r3, [pc, #92]	; (1d8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x7c>)
    1d2e:	2201      	movs	r2, #1
    1d30:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1d32:	2200      	movs	r2, #0
    1d34:	2104      	movs	r1, #4
    1d36:	4816      	ldr	r0, [pc, #88]	; (1d90 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x80>)
    1d38:	4b16      	ldr	r3, [pc, #88]	; (1d94 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x84>)
    1d3a:	4798      	blx	r3
	}
	if (arinc.ar->newMessageR2)
    1d3c:	4b12      	ldr	r3, [pc, #72]	; (1d88 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x78>)
    1d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    1d42:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1d46:	b2db      	uxtb	r3, r3
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d007      	beq.n	1d5c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x4c>
	{
		request.externRequest.arinc2GotMessage=true;
    1d4c:	4b0f      	ldr	r3, [pc, #60]	; (1d8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x7c>)
    1d4e:	2201      	movs	r2, #1
    1d50:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1d52:	2200      	movs	r2, #0
    1d54:	2105      	movs	r1, #5
    1d56:	480e      	ldr	r0, [pc, #56]	; (1d90 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x80>)
    1d58:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x84>)
    1d5a:	4798      	blx	r3
	}
	if (toolApp.IsAppConnected())
    1d5c:	480e      	ldr	r0, [pc, #56]	; (1d98 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x88>)
    1d5e:	4b0f      	ldr	r3, [pc, #60]	; (1d9c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x8c>)
    1d60:	4798      	blx	r3
    1d62:	4603      	mov	r3, r0
    1d64:	2b00      	cmp	r3, #0
    1d66:	d006      	beq.n	1d76 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x66>
	{
		toolApp.handleCommunication();
    1d68:	480b      	ldr	r0, [pc, #44]	; (1d98 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x88>)
    1d6a:	4b0d      	ldr	r3, [pc, #52]	; (1da0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x90>)
    1d6c:	4798      	blx	r3
		isMaintenanceActivated=true;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	2201      	movs	r2, #1
    1d72:	705a      	strb	r2, [r3, #1]
    1d74:	e002      	b.n	1d7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>
		
	}else{
		isMaintenanceActivated=false;
    1d76:	687b      	ldr	r3, [r7, #4]
    1d78:	2200      	movs	r2, #0
    1d7a:	705a      	strb	r2, [r3, #1]
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1d7c:	2300      	movs	r3, #0
}
    1d7e:	4618      	mov	r0, r3
    1d80:	3710      	adds	r7, #16
    1d82:	46bd      	mov	sp, r7
    1d84:	bd80      	pop	{r7, pc}
    1d86:	bf00      	nop
    1d88:	200024a8 	.word	0x200024a8
    1d8c:	20000c40 	.word	0x20000c40
    1d90:	20000738 	.word	0x20000738
    1d94:	00000835 	.word	0x00000835
    1d98:	2000583c 	.word	0x2000583c
    1d9c:	00017655 	.word	0x00017655
    1da0:	00017d71 	.word	0x00017d71

00001da4 <_ZN16Interfaces_Class17CheckTemperaturesEv>:
						
		}
		return	usb.rxReady;
}

bool	Interfaces_Class::CheckTemperatures(void){
    1da4:	b580      	push	{r7, lr}
    1da6:	b084      	sub	sp, #16
    1da8:	af00      	add	r7, sp, #0
    1daa:	6078      	str	r0, [r7, #4]
	bool result(false);
    1dac:	2300      	movs	r3, #0
    1dae:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    1db0:	4817      	ldr	r0, [pc, #92]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1db2:	4b18      	ldr	r3, [pc, #96]	; (1e14 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x70>)
    1db4:	4798      	blx	r3
    1db6:	4603      	mov	r3, r0
    1db8:	2b00      	cmp	r3, #0
    1dba:	d024      	beq.n	1e06 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x62>
	{
		
		temperatures.GetConversionResult();
    1dbc:	4814      	ldr	r0, [pc, #80]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1dbe:	4b16      	ldr	r3, [pc, #88]	; (1e18 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x74>)
    1dc0:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    1dc2:	4b13      	ldr	r3, [pc, #76]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1dc4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    1dc8:	2b01      	cmp	r3, #1
    1dca:	d116      	bne.n	1dfa <_ZN16Interfaces_Class17CheckTemperaturesEv+0x56>
		{
			if (lastTemperature!=temperatures.values[0][3])
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1dd2:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1dd4:	6f99      	ldr	r1, [r3, #120]	; 0x78
    1dd6:	4b11      	ldr	r3, [pc, #68]	; (1e1c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x78>)
    1dd8:	4610      	mov	r0, r2
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	2b00      	cmp	r3, #0
    1de0:	d10b      	bne.n	1dfa <_ZN16Interfaces_Class17CheckTemperaturesEv+0x56>
			{
				lastTemperature=temperatures.values[0][3];
    1de2:	4b0b      	ldr	r3, [pc, #44]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1de4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    1dec:	2200      	movs	r2, #0
    1dee:	210a      	movs	r1, #10
    1df0:	480b      	ldr	r0, [pc, #44]	; (1e20 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x7c>)
    1df2:	4b0c      	ldr	r3, [pc, #48]	; (1e24 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x80>)
    1df4:	4798      	blx	r3
				result=true;
    1df6:	2301      	movs	r3, #1
    1df8:	73fb      	strb	r3, [r7, #15]
			}
				
		}
			//temperatures.StartOneConversion();
		temperatures.StartOneConversion(0,3);
    1dfa:	2203      	movs	r2, #3
    1dfc:	2100      	movs	r1, #0
    1dfe:	4804      	ldr	r0, [pc, #16]	; (1e10 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1e00:	4b09      	ldr	r3, [pc, #36]	; (1e28 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x84>)
    1e02:	4798      	blx	r3
			asm("nop");
    1e04:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    1e06:	7bfb      	ldrb	r3, [r7, #15]
}
    1e08:	4618      	mov	r0, r3
    1e0a:	3710      	adds	r7, #16
    1e0c:	46bd      	mov	sp, r7
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	2000d118 	.word	0x2000d118
    1e14:	00018779 	.word	0x00018779
    1e18:	000186e5 	.word	0x000186e5
    1e1c:	0001c3f9 	.word	0x0001c3f9
    1e20:	20000738 	.word	0x20000738
    1e24:	00000835 	.word	0x00000835
    1e28:	00018699 	.word	0x00018699

00001e2c <_Z41__static_initialization_and_destruction_0ii>:
		s.rawStatus+=(*p)&(0x01<<i);
		p++;
	}
	return	status.rawStatus;
}
Interfaces_Class	interfaces;
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	6078      	str	r0, [r7, #4]
    1e34:	6039      	str	r1, [r7, #0]
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	2b01      	cmp	r3, #1
    1e3a:	d15b      	bne.n	1ef4 <_Z41__static_initialization_and_destruction_0ii+0xc8>
    1e3c:	683b      	ldr	r3, [r7, #0]
    1e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1e42:	4293      	cmp	r3, r2
    1e44:	d156      	bne.n	1ef4 <_Z41__static_initialization_and_destruction_0ii+0xc8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1e46:	492d      	ldr	r1, [pc, #180]	; (1efc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1e48:	482d      	ldr	r0, [pc, #180]	; (1f00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1e4a:	4b2e      	ldr	r3, [pc, #184]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e4c:	4798      	blx	r3
    1e4e:	4a2e      	ldr	r2, [pc, #184]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e50:	492e      	ldr	r1, [pc, #184]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e52:	482b      	ldr	r0, [pc, #172]	; (1f00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1e54:	4b2e      	ldr	r3, [pc, #184]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e56:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1e58:	492e      	ldr	r1, [pc, #184]	; (1f14 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    1e5a:	482f      	ldr	r0, [pc, #188]	; (1f18 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    1e5c:	4b29      	ldr	r3, [pc, #164]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e5e:	4798      	blx	r3
    1e60:	4a29      	ldr	r2, [pc, #164]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e62:	492a      	ldr	r1, [pc, #168]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e64:	482c      	ldr	r0, [pc, #176]	; (1f18 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    1e66:	4b2a      	ldr	r3, [pc, #168]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e68:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    1e6a:	492c      	ldr	r1, [pc, #176]	; (1f1c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    1e6c:	482c      	ldr	r0, [pc, #176]	; (1f20 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    1e6e:	4b25      	ldr	r3, [pc, #148]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e70:	4798      	blx	r3
    1e72:	4a25      	ldr	r2, [pc, #148]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e74:	4925      	ldr	r1, [pc, #148]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e76:	482a      	ldr	r0, [pc, #168]	; (1f20 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    1e78:	4b25      	ldr	r3, [pc, #148]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e7a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1e7c:	4929      	ldr	r1, [pc, #164]	; (1f24 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    1e7e:	482a      	ldr	r0, [pc, #168]	; (1f28 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    1e80:	4b20      	ldr	r3, [pc, #128]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e82:	4798      	blx	r3
    1e84:	4a20      	ldr	r2, [pc, #128]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e86:	4921      	ldr	r1, [pc, #132]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e88:	4827      	ldr	r0, [pc, #156]	; (1f28 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    1e8a:	4b21      	ldr	r3, [pc, #132]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e8c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    1e8e:	4927      	ldr	r1, [pc, #156]	; (1f2c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1e90:	4827      	ldr	r0, [pc, #156]	; (1f30 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    1e92:	4b1c      	ldr	r3, [pc, #112]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e94:	4798      	blx	r3
    1e96:	4a1c      	ldr	r2, [pc, #112]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e98:	491c      	ldr	r1, [pc, #112]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e9a:	4825      	ldr	r0, [pc, #148]	; (1f30 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    1e9c:	4b1c      	ldr	r3, [pc, #112]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e9e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1ea0:	4924      	ldr	r1, [pc, #144]	; (1f34 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1ea2:	4825      	ldr	r0, [pc, #148]	; (1f38 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    1ea4:	4b17      	ldr	r3, [pc, #92]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1ea6:	4798      	blx	r3
    1ea8:	4a17      	ldr	r2, [pc, #92]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1eaa:	4918      	ldr	r1, [pc, #96]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1eac:	4822      	ldr	r0, [pc, #136]	; (1f38 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    1eae:	4b18      	ldr	r3, [pc, #96]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1eb0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1eb2:	4922      	ldr	r1, [pc, #136]	; (1f3c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1eb4:	4822      	ldr	r0, [pc, #136]	; (1f40 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1eb6:	4b13      	ldr	r3, [pc, #76]	; (1f04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1eb8:	4798      	blx	r3
    1eba:	4a13      	ldr	r2, [pc, #76]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1ebc:	4913      	ldr	r1, [pc, #76]	; (1f0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1ebe:	4820      	ldr	r0, [pc, #128]	; (1f40 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1ec0:	4b13      	ldr	r3, [pc, #76]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1ec2:	4798      	blx	r3
    1ec4:	481f      	ldr	r0, [pc, #124]	; (1f44 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1ec6:	4b20      	ldr	r3, [pc, #128]	; (1f48 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    1ec8:	4798      	blx	r3
    1eca:	4a0f      	ldr	r2, [pc, #60]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1ecc:	491f      	ldr	r1, [pc, #124]	; (1f4c <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1ece:	481d      	ldr	r0, [pc, #116]	; (1f44 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1ed0:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1ed2:	4798      	blx	r3
    1ed4:	481e      	ldr	r0, [pc, #120]	; (1f50 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    1ed6:	4b1f      	ldr	r3, [pc, #124]	; (1f54 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    1ed8:	4798      	blx	r3
    1eda:	4a0b      	ldr	r2, [pc, #44]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1edc:	491e      	ldr	r1, [pc, #120]	; (1f58 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1ede:	481c      	ldr	r0, [pc, #112]	; (1f50 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1ee2:	4798      	blx	r3
    1ee4:	481d      	ldr	r0, [pc, #116]	; (1f5c <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1ee6:	4b1e      	ldr	r3, [pc, #120]	; (1f60 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    1ee8:	4798      	blx	r3
    1eea:	4a07      	ldr	r2, [pc, #28]	; (1f08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1eec:	491d      	ldr	r1, [pc, #116]	; (1f64 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    1eee:	481b      	ldr	r0, [pc, #108]	; (1f5c <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1ef0:	4b07      	ldr	r3, [pc, #28]	; (1f10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1ef2:	4798      	blx	r3
    1ef4:	bf00      	nop
    1ef6:	3708      	adds	r7, #8
    1ef8:	46bd      	mov	sp, r7
    1efa:	bd80      	pop	{r7, pc}
    1efc:	2000d6d8 	.word	0x2000d6d8
    1f00:	20000b48 	.word	0x20000b48
    1f04:	00013d09 	.word	0x00013d09
    1f08:	20000000 	.word	0x20000000
    1f0c:	00013d41 	.word	0x00013d41
    1f10:	0001a44d 	.word	0x0001a44d
    1f14:	2000d76c 	.word	0x2000d76c
    1f18:	20000b68 	.word	0x20000b68
    1f1c:	2000d870 	.word	0x2000d870
    1f20:	20000b88 	.word	0x20000b88
    1f24:	2000d78c 	.word	0x2000d78c
    1f28:	20000ba8 	.word	0x20000ba8
    1f2c:	2000d830 	.word	0x2000d830
    1f30:	20000bc8 	.word	0x20000bc8
    1f34:	2000d850 	.word	0x2000d850
    1f38:	20000be8 	.word	0x20000be8
    1f3c:	2000d748 	.word	0x2000d748
    1f40:	20000c08 	.word	0x20000c08
    1f44:	20000c28 	.word	0x20000c28
    1f48:	00002341 	.word	0x00002341
    1f4c:	0000235b 	.word	0x0000235b
    1f50:	20000c3c 	.word	0x20000c3c
    1f54:	00000c59 	.word	0x00000c59
    1f58:	00000c73 	.word	0x00000c73
    1f5c:	20000c48 	.word	0x20000c48
    1f60:	00001b5d 	.word	0x00001b5d
    1f64:	00001b77 	.word	0x00001b77

00001f68 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    1f68:	b580      	push	{r7, lr}
    1f6a:	af00      	add	r7, sp, #0
    1f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1f70:	2001      	movs	r0, #1
    1f72:	4b01      	ldr	r3, [pc, #4]	; (1f78 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1f74:	4798      	blx	r3
    1f76:	bd80      	pop	{r7, pc}
    1f78:	00001e2d 	.word	0x00001e2d

00001f7c <main>:

#include "main.h"


int main(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	af00      	add	r7, sp, #0
    /* Replace with your application code */
	atmel_start_init();
    1f82:	4b45      	ldr	r3, [pc, #276]	; (2098 <main+0x11c>)
    1f84:	4798      	blx	r3
	//  	uint32_t p=pwm_enable(&LIVE_PULSE);
	//  	while (1);

	usb.Init();
    1f86:	4845      	ldr	r0, [pc, #276]	; (209c <main+0x120>)
    1f88:	4b45      	ldr	r3, [pc, #276]	; (20a0 <main+0x124>)
    1f8a:	4798      	blx	r3
	delay_ms(100);
    1f8c:	2064      	movs	r0, #100	; 0x64
    1f8e:	4b45      	ldr	r3, [pc, #276]	; (20a4 <main+0x128>)
    1f90:	4798      	blx	r3
	
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1f92:	4945      	ldr	r1, [pc, #276]	; (20a8 <main+0x12c>)
    1f94:	4841      	ldr	r0, [pc, #260]	; (209c <main+0x120>)
    1f96:	4b45      	ldr	r3, [pc, #276]	; (20ac <main+0x130>)
    1f98:	4798      	blx	r3
    1f9a:	4603      	mov	r3, r0
    1f9c:	4942      	ldr	r1, [pc, #264]	; (20a8 <main+0x12c>)
    1f9e:	4618      	mov	r0, r3
    1fa0:	4b42      	ldr	r3, [pc, #264]	; (20ac <main+0x130>)
    1fa2:	4798      	blx	r3
    1fa4:	4603      	mov	r3, r0
    1fa6:	4942      	ldr	r1, [pc, #264]	; (20b0 <main+0x134>)
    1fa8:	4618      	mov	r0, r3
    1faa:	4b42      	ldr	r3, [pc, #264]	; (20b4 <main+0x138>)
    1fac:	4798      	blx	r3
    1fae:	4603      	mov	r3, r0
    1fb0:	493d      	ldr	r1, [pc, #244]	; (20a8 <main+0x12c>)
    1fb2:	4618      	mov	r0, r3
    1fb4:	4b3d      	ldr	r3, [pc, #244]	; (20ac <main+0x130>)
    1fb6:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    1fb8:	493f      	ldr	r1, [pc, #252]	; (20b8 <main+0x13c>)
    1fba:	4838      	ldr	r0, [pc, #224]	; (209c <main+0x120>)
    1fbc:	4b3f      	ldr	r3, [pc, #252]	; (20bc <main+0x140>)
    1fbe:	4798      	blx	r3
    1fc0:	4603      	mov	r3, r0
    1fc2:	493f      	ldr	r1, [pc, #252]	; (20c0 <main+0x144>)
    1fc4:	4618      	mov	r0, r3
    1fc6:	4b3d      	ldr	r3, [pc, #244]	; (20bc <main+0x140>)
    1fc8:	4798      	blx	r3
    1fca:	4603      	mov	r3, r0
    1fcc:	493d      	ldr	r1, [pc, #244]	; (20c4 <main+0x148>)
    1fce:	4618      	mov	r0, r3
    1fd0:	4b3d      	ldr	r3, [pc, #244]	; (20c8 <main+0x14c>)
    1fd2:	4798      	blx	r3
    1fd4:	4603      	mov	r3, r0
    1fd6:	493d      	ldr	r1, [pc, #244]	; (20cc <main+0x150>)
    1fd8:	4618      	mov	r0, r3
    1fda:	4b3d      	ldr	r3, [pc, #244]	; (20d0 <main+0x154>)
    1fdc:	4798      	blx	r3
    1fde:	4603      	mov	r3, r0
    1fe0:	4931      	ldr	r1, [pc, #196]	; (20a8 <main+0x12c>)
    1fe2:	4618      	mov	r0, r3
    1fe4:	4b31      	ldr	r3, [pc, #196]	; (20ac <main+0x130>)
    1fe6:	4798      	blx	r3
    1fe8:	4603      	mov	r3, r0
    1fea:	492f      	ldr	r1, [pc, #188]	; (20a8 <main+0x12c>)
    1fec:	4618      	mov	r0, r3
    1fee:	4b2f      	ldr	r3, [pc, #188]	; (20ac <main+0x130>)
    1ff0:	4798      	blx	r3
	if (memory.Init())
    1ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    1ff6:	4837      	ldr	r0, [pc, #220]	; (20d4 <main+0x158>)
    1ff8:	4b37      	ldr	r3, [pc, #220]	; (20d8 <main+0x15c>)
    1ffa:	4798      	blx	r3
    1ffc:	4603      	mov	r3, r0
    1ffe:	2b00      	cmp	r3, #0
    2000:	d006      	beq.n	2010 <main+0x94>
	{
		memory.WriteDefaultParameters();
    2002:	4834      	ldr	r0, [pc, #208]	; (20d4 <main+0x158>)
    2004:	4b35      	ldr	r3, [pc, #212]	; (20dc <main+0x160>)
    2006:	4798      	blx	r3
		logger.SaveEvent((uint8_t*)"Info:Memory Started");
    2008:	4935      	ldr	r1, [pc, #212]	; (20e0 <main+0x164>)
    200a:	4836      	ldr	r0, [pc, #216]	; (20e4 <main+0x168>)
    200c:	4b36      	ldr	r3, [pc, #216]	; (20e8 <main+0x16c>)
    200e:	4798      	blx	r3
	{
	}
	
	
	
	alu.Init();
    2010:	4836      	ldr	r0, [pc, #216]	; (20ec <main+0x170>)
    2012:	4b37      	ldr	r3, [pc, #220]	; (20f0 <main+0x174>)
    2014:	4798      	blx	r3
	alu.RunController();
    2016:	4835      	ldr	r0, [pc, #212]	; (20ec <main+0x170>)
    2018:	4b36      	ldr	r3, [pc, #216]	; (20f4 <main+0x178>)
    201a:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    201c:	4936      	ldr	r1, [pc, #216]	; (20f8 <main+0x17c>)
    201e:	481f      	ldr	r0, [pc, #124]	; (209c <main+0x120>)
    2020:	4b36      	ldr	r3, [pc, #216]	; (20fc <main+0x180>)
    2022:	4798      	blx	r3
    2024:	4603      	mov	r3, r0
    2026:	4920      	ldr	r1, [pc, #128]	; (20a8 <main+0x12c>)
    2028:	4618      	mov	r0, r3
    202a:	4b20      	ldr	r3, [pc, #128]	; (20ac <main+0x130>)
    202c:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    202e:	482f      	ldr	r0, [pc, #188]	; (20ec <main+0x170>)
    2030:	4b33      	ldr	r3, [pc, #204]	; (2100 <main+0x184>)
    2032:	4798      	blx	r3
    2034:	4603      	mov	r3, r0
    2036:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    2038:	4932      	ldr	r1, [pc, #200]	; (2104 <main+0x188>)
    203a:	4818      	ldr	r0, [pc, #96]	; (209c <main+0x120>)
    203c:	4b32      	ldr	r3, [pc, #200]	; (2108 <main+0x18c>)
    203e:	4798      	blx	r3
    2040:	4602      	mov	r2, r0
    2042:	1dfb      	adds	r3, r7, #7
    2044:	4619      	mov	r1, r3
    2046:	4610      	mov	r0, r2
    2048:	4b30      	ldr	r3, [pc, #192]	; (210c <main+0x190>)
    204a:	4798      	blx	r3
    204c:	4603      	mov	r3, r0
    204e:	4916      	ldr	r1, [pc, #88]	; (20a8 <main+0x12c>)
    2050:	4618      	mov	r0, r3
    2052:	4b16      	ldr	r3, [pc, #88]	; (20ac <main+0x130>)
    2054:	4798      	blx	r3
	if (!pBit)
    2056:	482e      	ldr	r0, [pc, #184]	; (2110 <main+0x194>)
    2058:	4b2e      	ldr	r3, [pc, #184]	; (2114 <main+0x198>)
    205a:	4798      	blx	r3
    205c:	4603      	mov	r3, r0
    205e:	f083 0301 	eor.w	r3, r3, #1
    2062:	b2db      	uxtb	r3, r3
    2064:	2b00      	cmp	r3, #0
    2066:	d004      	beq.n	2072 <main+0xf6>
	{
		hvac.Stop(0);
    2068:	2100      	movs	r1, #0
    206a:	482b      	ldr	r0, [pc, #172]	; (2118 <main+0x19c>)
    206c:	4b2b      	ldr	r3, [pc, #172]	; (211c <main+0x1a0>)
    206e:	4798      	blx	r3
    2070:	e003      	b.n	207a <main+0xfe>
	}
	else
	{
		hvac.Start(0);
    2072:	2100      	movs	r1, #0
    2074:	4828      	ldr	r0, [pc, #160]	; (2118 <main+0x19c>)
    2076:	4b2a      	ldr	r3, [pc, #168]	; (2120 <main+0x1a4>)
    2078:	4798      	blx	r3
	}
	/* Replace with your application code */
	while (1)
	{
		delay_ms(1000);
    207a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    207e:	4b09      	ldr	r3, [pc, #36]	; (20a4 <main+0x128>)
    2080:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    2082:	490b      	ldr	r1, [pc, #44]	; (20b0 <main+0x134>)
    2084:	4805      	ldr	r0, [pc, #20]	; (209c <main+0x120>)
    2086:	4b0b      	ldr	r3, [pc, #44]	; (20b4 <main+0x138>)
    2088:	4798      	blx	r3
    208a:	4603      	mov	r3, r0
    208c:	4906      	ldr	r1, [pc, #24]	; (20a8 <main+0x12c>)
    208e:	4618      	mov	r0, r3
    2090:	4b06      	ldr	r3, [pc, #24]	; (20ac <main+0x130>)
    2092:	4798      	blx	r3
		delay_ms(1000);
    2094:	e7f1      	b.n	207a <main+0xfe>
    2096:	bf00      	nop
    2098:	00004a29 	.word	0x00004a29
    209c:	20003884 	.word	0x20003884
    20a0:	00014465 	.word	0x00014465
    20a4:	0000647d 	.word	0x0000647d
    20a8:	0001c984 	.word	0x0001c984
    20ac:	00000ae9 	.word	0x00000ae9
    20b0:	0001c988 	.word	0x0001c988
    20b4:	00002125 	.word	0x00002125
    20b8:	0001c9ac 	.word	0x0001c9ac
    20bc:	00002145 	.word	0x00002145
    20c0:	0001c9b8 	.word	0x0001c9b8
    20c4:	0001c9c4 	.word	0x0001c9c4
    20c8:	00002165 	.word	0x00002165
    20cc:	0001c9cc 	.word	0x0001c9cc
    20d0:	00002185 	.word	0x00002185
    20d4:	20006c64 	.word	0x20006c64
    20d8:	0001823d 	.word	0x0001823d
    20dc:	00018155 	.word	0x00018155
    20e0:	0001c9d8 	.word	0x0001c9d8
    20e4:	20003d48 	.word	0x20003d48
    20e8:	000153cd 	.word	0x000153cd
    20ec:	20000738 	.word	0x20000738
    20f0:	00000481 	.word	0x00000481
    20f4:	0000054d 	.word	0x0000054d
    20f8:	0001c9ec 	.word	0x0001c9ec
    20fc:	000021a5 	.word	0x000021a5
    2100:	00000715 	.word	0x00000715
    2104:	0001ca04 	.word	0x0001ca04
    2108:	000021c5 	.word	0x000021c5
    210c:	000021e5 	.word	0x000021e5
    2110:	20000dac 	.word	0x20000dac
    2114:	0000236f 	.word	0x0000236f
    2118:	2000101c 	.word	0x2000101c
    211c:	000039b1 	.word	0x000039b1
    2120:	00002a05 	.word	0x00002a05

00002124 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2124:	b580      	push	{r7, lr}
    2126:	b082      	sub	sp, #8
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
    212c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    212e:	6839      	ldr	r1, [r7, #0]
    2130:	6878      	ldr	r0, [r7, #4]
    2132:	4b03      	ldr	r3, [pc, #12]	; (2140 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    2134:	4798      	blx	r3
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	4618      	mov	r0, r3
    213a:	3708      	adds	r7, #8
    213c:	46bd      	mov	sp, r7
    213e:	bd80      	pop	{r7, pc}
    2140:	000149b5 	.word	0x000149b5

00002144 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2144:	b580      	push	{r7, lr}
    2146:	b082      	sub	sp, #8
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
    214c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    214e:	6839      	ldr	r1, [r7, #0]
    2150:	6878      	ldr	r0, [r7, #4]
    2152:	4b03      	ldr	r3, [pc, #12]	; (2160 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    2154:	4798      	blx	r3
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	4618      	mov	r0, r3
    215a:	3708      	adds	r7, #8
    215c:	46bd      	mov	sp, r7
    215e:	bd80      	pop	{r7, pc}
    2160:	000149b5 	.word	0x000149b5

00002164 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2164:	b580      	push	{r7, lr}
    2166:	b082      	sub	sp, #8
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
    216c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    216e:	6839      	ldr	r1, [r7, #0]
    2170:	6878      	ldr	r0, [r7, #4]
    2172:	4b03      	ldr	r3, [pc, #12]	; (2180 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    2174:	4798      	blx	r3
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4618      	mov	r0, r3
    217a:	3708      	adds	r7, #8
    217c:	46bd      	mov	sp, r7
    217e:	bd80      	pop	{r7, pc}
    2180:	000149b5 	.word	0x000149b5

00002184 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
    218c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    218e:	6839      	ldr	r1, [r7, #0]
    2190:	6878      	ldr	r0, [r7, #4]
    2192:	4b03      	ldr	r3, [pc, #12]	; (21a0 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    2194:	4798      	blx	r3
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	4618      	mov	r0, r3
    219a:	3708      	adds	r7, #8
    219c:	46bd      	mov	sp, r7
    219e:	bd80      	pop	{r7, pc}
    21a0:	000149b5 	.word	0x000149b5

000021a4 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21a4:	b580      	push	{r7, lr}
    21a6:	b082      	sub	sp, #8
    21a8:	af00      	add	r7, sp, #0
    21aa:	6078      	str	r0, [r7, #4]
    21ac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21ae:	6839      	ldr	r1, [r7, #0]
    21b0:	6878      	ldr	r0, [r7, #4]
    21b2:	4b03      	ldr	r3, [pc, #12]	; (21c0 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    21b4:	4798      	blx	r3
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	4618      	mov	r0, r3
    21ba:	3708      	adds	r7, #8
    21bc:	46bd      	mov	sp, r7
    21be:	bd80      	pop	{r7, pc}
    21c0:	000149b5 	.word	0x000149b5

000021c4 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21c4:	b580      	push	{r7, lr}
    21c6:	b082      	sub	sp, #8
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
    21cc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21ce:	6839      	ldr	r1, [r7, #0]
    21d0:	6878      	ldr	r0, [r7, #4]
    21d2:	4b03      	ldr	r3, [pc, #12]	; (21e0 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    21d4:	4798      	blx	r3
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	4618      	mov	r0, r3
    21da:	3708      	adds	r7, #8
    21dc:	46bd      	mov	sp, r7
    21de:	bd80      	pop	{r7, pc}
    21e0:	000149b5 	.word	0x000149b5

000021e4 <_ZlsIhER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21e4:	b580      	push	{r7, lr}
    21e6:	b082      	sub	sp, #8
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
    21ec:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21ee:	683b      	ldr	r3, [r7, #0]
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	220a      	movs	r2, #10
    21f4:	4619      	mov	r1, r3
    21f6:	6878      	ldr	r0, [r7, #4]
    21f8:	4b03      	ldr	r3, [pc, #12]	; (2208 <_ZlsIhER5PrintS1_RKT_+0x24>)
    21fa:	4798      	blx	r3
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	4618      	mov	r0, r3
    2200:	3708      	adds	r7, #8
    2202:	46bd      	mov	sp, r7
    2204:	bd80      	pop	{r7, pc}
    2206:	bf00      	nop
    2208:	000149d5 	.word	0x000149d5

0000220c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
    2214:	6039      	str	r1, [r7, #0]
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	2b01      	cmp	r3, #1
    221a:	d153      	bne.n	22c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>
    221c:	683b      	ldr	r3, [r7, #0]
    221e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2222:	4293      	cmp	r3, r2
    2224:	d14e      	bne.n	22c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    2226:	4929      	ldr	r1, [pc, #164]	; (22cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2228:	4829      	ldr	r0, [pc, #164]	; (22d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    222a:	4b2a      	ldr	r3, [pc, #168]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    222c:	4798      	blx	r3
    222e:	4a2a      	ldr	r2, [pc, #168]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2230:	492a      	ldr	r1, [pc, #168]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2232:	4827      	ldr	r0, [pc, #156]	; (22d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2234:	4b2a      	ldr	r3, [pc, #168]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2236:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    2238:	492a      	ldr	r1, [pc, #168]	; (22e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    223a:	482b      	ldr	r0, [pc, #172]	; (22e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    223c:	4b25      	ldr	r3, [pc, #148]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    223e:	4798      	blx	r3
    2240:	4a25      	ldr	r2, [pc, #148]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2242:	4926      	ldr	r1, [pc, #152]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2244:	4828      	ldr	r0, [pc, #160]	; (22e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    2246:	4b26      	ldr	r3, [pc, #152]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2248:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    224a:	4928      	ldr	r1, [pc, #160]	; (22ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    224c:	4828      	ldr	r0, [pc, #160]	; (22f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    224e:	4b21      	ldr	r3, [pc, #132]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2250:	4798      	blx	r3
    2252:	4a21      	ldr	r2, [pc, #132]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2254:	4921      	ldr	r1, [pc, #132]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2256:	4826      	ldr	r0, [pc, #152]	; (22f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    2258:	4b21      	ldr	r3, [pc, #132]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    225a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    225c:	4925      	ldr	r1, [pc, #148]	; (22f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    225e:	4826      	ldr	r0, [pc, #152]	; (22f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    2260:	4b1c      	ldr	r3, [pc, #112]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2262:	4798      	blx	r3
    2264:	4a1c      	ldr	r2, [pc, #112]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2266:	491d      	ldr	r1, [pc, #116]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2268:	4823      	ldr	r0, [pc, #140]	; (22f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    226a:	4b1d      	ldr	r3, [pc, #116]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    226c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    226e:	4923      	ldr	r1, [pc, #140]	; (22fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    2270:	4823      	ldr	r0, [pc, #140]	; (2300 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    2272:	4b18      	ldr	r3, [pc, #96]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2274:	4798      	blx	r3
    2276:	4a18      	ldr	r2, [pc, #96]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2278:	4918      	ldr	r1, [pc, #96]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    227a:	4821      	ldr	r0, [pc, #132]	; (2300 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    227c:	4b18      	ldr	r3, [pc, #96]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    227e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    2280:	4920      	ldr	r1, [pc, #128]	; (2304 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    2282:	4821      	ldr	r0, [pc, #132]	; (2308 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    2284:	4b13      	ldr	r3, [pc, #76]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2286:	4798      	blx	r3
    2288:	4a13      	ldr	r2, [pc, #76]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    228a:	4914      	ldr	r1, [pc, #80]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    228c:	481e      	ldr	r0, [pc, #120]	; (2308 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    228e:	4b14      	ldr	r3, [pc, #80]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2290:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    2292:	491e      	ldr	r1, [pc, #120]	; (230c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    2294:	481e      	ldr	r0, [pc, #120]	; (2310 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    2296:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2298:	4798      	blx	r3
    229a:	4a0f      	ldr	r2, [pc, #60]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    229c:	490f      	ldr	r1, [pc, #60]	; (22dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    229e:	481c      	ldr	r0, [pc, #112]	; (2310 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    22a0:	4b0f      	ldr	r3, [pc, #60]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    22a2:	4798      	blx	r3
    22a4:	481b      	ldr	r0, [pc, #108]	; (2314 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    22a6:	4b1c      	ldr	r3, [pc, #112]	; (2318 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    22a8:	4798      	blx	r3
    22aa:	4a0b      	ldr	r2, [pc, #44]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    22ac:	491b      	ldr	r1, [pc, #108]	; (231c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    22ae:	4819      	ldr	r0, [pc, #100]	; (2314 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    22b0:	4b0b      	ldr	r3, [pc, #44]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    22b2:	4798      	blx	r3
    22b4:	481a      	ldr	r0, [pc, #104]	; (2320 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    22b6:	4b1b      	ldr	r3, [pc, #108]	; (2324 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    22b8:	4798      	blx	r3
    22ba:	4a07      	ldr	r2, [pc, #28]	; (22d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    22bc:	491a      	ldr	r1, [pc, #104]	; (2328 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    22be:	4818      	ldr	r0, [pc, #96]	; (2320 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    22c0:	4b07      	ldr	r3, [pc, #28]	; (22e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    22c2:	4798      	blx	r3
    22c4:	bf00      	nop
    22c6:	3708      	adds	r7, #8
    22c8:	46bd      	mov	sp, r7
    22ca:	bd80      	pop	{r7, pc}
    22cc:	2000d6d8 	.word	0x2000d6d8
    22d0:	20000ccc 	.word	0x20000ccc
    22d4:	00013d09 	.word	0x00013d09
    22d8:	20000000 	.word	0x20000000
    22dc:	00013d41 	.word	0x00013d41
    22e0:	0001a44d 	.word	0x0001a44d
    22e4:	2000d76c 	.word	0x2000d76c
    22e8:	20000cec 	.word	0x20000cec
    22ec:	2000d870 	.word	0x2000d870
    22f0:	20000d0c 	.word	0x20000d0c
    22f4:	2000d78c 	.word	0x2000d78c
    22f8:	20000d2c 	.word	0x20000d2c
    22fc:	2000d830 	.word	0x2000d830
    2300:	20000d4c 	.word	0x20000d4c
    2304:	2000d850 	.word	0x2000d850
    2308:	20000d6c 	.word	0x20000d6c
    230c:	2000d748 	.word	0x2000d748
    2310:	20000d8c 	.word	0x20000d8c
    2314:	20000dac 	.word	0x20000dac
    2318:	00002341 	.word	0x00002341
    231c:	0000235b 	.word	0x0000235b
    2320:	20000dc0 	.word	0x20000dc0
    2324:	00000c59 	.word	0x00000c59
    2328:	00000c73 	.word	0x00000c73

0000232c <_GLOBAL__sub_I_main>:
    232c:	b580      	push	{r7, lr}
    232e:	af00      	add	r7, sp, #0
    2330:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2334:	2001      	movs	r0, #1
    2336:	4b01      	ldr	r3, [pc, #4]	; (233c <_GLOBAL__sub_I_main+0x10>)
    2338:	4798      	blx	r3
    233a:	bd80      	pop	{r7, pc}
    233c:	0000220d 	.word	0x0000220d

00002340 <_ZN10PBIT_ClassC1Ev>:
#include "PBIT_Class.h"
#include "Interfaces_Class.h"
#include "ARINC_Handler_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2340:	b480      	push	{r7}
    2342:	b083      	sub	sp, #12
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	2201      	movs	r2, #1
    234c:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	4618      	mov	r0, r3
    2352:	370c      	adds	r7, #12
    2354:	46bd      	mov	sp, r7
    2356:	bc80      	pop	{r7}
    2358:	4770      	bx	lr

0000235a <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    235a:	b480      	push	{r7}
    235c:	b083      	sub	sp, #12
    235e:	af00      	add	r7, sp, #0
    2360:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2362:	687b      	ldr	r3, [r7, #4]
    2364:	4618      	mov	r0, r3
    2366:	370c      	adds	r7, #12
    2368:	46bd      	mov	sp, r7
    236a:	bc80      	pop	{r7}
    236c:	4770      	bx	lr

0000236e <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    236e:	b480      	push	{r7}
    2370:	b083      	sub	sp, #12
    2372:	af00      	add	r7, sp, #0
    2374:	6078      	str	r0, [r7, #4]
	return	isOK;
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	b2db      	uxtb	r3, r3
}
    237c:	4618      	mov	r0, r3
    237e:	370c      	adds	r7, #12
    2380:	46bd      	mov	sp, r7
    2382:	bc80      	pop	{r7}
    2384:	4770      	bx	lr
	...

00002388 <_Z41__static_initialization_and_destruction_0ii>:
	if (v==0)
	{
		isOK=true;
	}
	return	v;
}
    2388:	b580      	push	{r7, lr}
    238a:	b082      	sub	sp, #8
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
    2390:	6039      	str	r1, [r7, #0]
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	2b01      	cmp	r3, #1
    2396:	d14b      	bne.n	2430 <_Z41__static_initialization_and_destruction_0ii+0xa8>
    2398:	683b      	ldr	r3, [r7, #0]
    239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    239e:	4293      	cmp	r3, r2
    23a0:	d146      	bne.n	2430 <_Z41__static_initialization_and_destruction_0ii+0xa8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    23a2:	4925      	ldr	r1, [pc, #148]	; (2438 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    23a4:	4825      	ldr	r0, [pc, #148]	; (243c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    23a6:	4b26      	ldr	r3, [pc, #152]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    23a8:	4798      	blx	r3
    23aa:	4a26      	ldr	r2, [pc, #152]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    23ac:	4926      	ldr	r1, [pc, #152]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    23ae:	4823      	ldr	r0, [pc, #140]	; (243c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    23b0:	4b26      	ldr	r3, [pc, #152]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    23b2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    23b4:	4926      	ldr	r1, [pc, #152]	; (2450 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    23b6:	4827      	ldr	r0, [pc, #156]	; (2454 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    23b8:	4b21      	ldr	r3, [pc, #132]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    23ba:	4798      	blx	r3
    23bc:	4a21      	ldr	r2, [pc, #132]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    23be:	4922      	ldr	r1, [pc, #136]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    23c0:	4824      	ldr	r0, [pc, #144]	; (2454 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    23c2:	4b22      	ldr	r3, [pc, #136]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    23c4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    23c6:	4924      	ldr	r1, [pc, #144]	; (2458 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    23c8:	4824      	ldr	r0, [pc, #144]	; (245c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    23ca:	4b1d      	ldr	r3, [pc, #116]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    23cc:	4798      	blx	r3
    23ce:	4a1d      	ldr	r2, [pc, #116]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    23d0:	491d      	ldr	r1, [pc, #116]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    23d2:	4822      	ldr	r0, [pc, #136]	; (245c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    23d4:	4b1d      	ldr	r3, [pc, #116]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    23d6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    23d8:	4921      	ldr	r1, [pc, #132]	; (2460 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    23da:	4822      	ldr	r0, [pc, #136]	; (2464 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    23dc:	4b18      	ldr	r3, [pc, #96]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    23de:	4798      	blx	r3
    23e0:	4a18      	ldr	r2, [pc, #96]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    23e2:	4919      	ldr	r1, [pc, #100]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    23e4:	481f      	ldr	r0, [pc, #124]	; (2464 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    23e6:	4b19      	ldr	r3, [pc, #100]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    23e8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    23ea:	491f      	ldr	r1, [pc, #124]	; (2468 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    23ec:	481f      	ldr	r0, [pc, #124]	; (246c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    23ee:	4b14      	ldr	r3, [pc, #80]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    23f0:	4798      	blx	r3
    23f2:	4a14      	ldr	r2, [pc, #80]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    23f4:	4914      	ldr	r1, [pc, #80]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    23f6:	481d      	ldr	r0, [pc, #116]	; (246c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    23f8:	4b14      	ldr	r3, [pc, #80]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    23fa:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    23fc:	491c      	ldr	r1, [pc, #112]	; (2470 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    23fe:	481d      	ldr	r0, [pc, #116]	; (2474 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    2400:	4b0f      	ldr	r3, [pc, #60]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2402:	4798      	blx	r3
    2404:	4a0f      	ldr	r2, [pc, #60]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2406:	4910      	ldr	r1, [pc, #64]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2408:	481a      	ldr	r0, [pc, #104]	; (2474 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    240a:	4b10      	ldr	r3, [pc, #64]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    240c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    240e:	491a      	ldr	r1, [pc, #104]	; (2478 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    2410:	481a      	ldr	r0, [pc, #104]	; (247c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    2412:	4b0b      	ldr	r3, [pc, #44]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2414:	4798      	blx	r3
    2416:	4a0b      	ldr	r2, [pc, #44]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2418:	490b      	ldr	r1, [pc, #44]	; (2448 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    241a:	4818      	ldr	r0, [pc, #96]	; (247c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    241c:	4b0b      	ldr	r3, [pc, #44]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    241e:	4798      	blx	r3
    2420:	4817      	ldr	r0, [pc, #92]	; (2480 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    2422:	4b18      	ldr	r3, [pc, #96]	; (2484 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    2424:	4798      	blx	r3
    2426:	4a07      	ldr	r2, [pc, #28]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2428:	4917      	ldr	r1, [pc, #92]	; (2488 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    242a:	4815      	ldr	r0, [pc, #84]	; (2480 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    242c:	4b07      	ldr	r3, [pc, #28]	; (244c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    242e:	4798      	blx	r3
    2430:	bf00      	nop
    2432:	3708      	adds	r7, #8
    2434:	46bd      	mov	sp, r7
    2436:	bd80      	pop	{r7, pc}
    2438:	2000d6d8 	.word	0x2000d6d8
    243c:	20000dc4 	.word	0x20000dc4
    2440:	00013d09 	.word	0x00013d09
    2444:	20000000 	.word	0x20000000
    2448:	00013d41 	.word	0x00013d41
    244c:	0001a44d 	.word	0x0001a44d
    2450:	2000d76c 	.word	0x2000d76c
    2454:	20000de4 	.word	0x20000de4
    2458:	2000d870 	.word	0x2000d870
    245c:	20000e04 	.word	0x20000e04
    2460:	2000d78c 	.word	0x2000d78c
    2464:	20000e24 	.word	0x20000e24
    2468:	2000d830 	.word	0x2000d830
    246c:	20000e44 	.word	0x20000e44
    2470:	2000d850 	.word	0x2000d850
    2474:	20000e64 	.word	0x20000e64
    2478:	2000d748 	.word	0x2000d748
    247c:	20000e84 	.word	0x20000e84
    2480:	20000ea4 	.word	0x20000ea4
    2484:	00002341 	.word	0x00002341
    2488:	0000235b 	.word	0x0000235b

0000248c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    248c:	b580      	push	{r7, lr}
    248e:	af00      	add	r7, sp, #0
    2490:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2494:	2001      	movs	r0, #1
    2496:	4b01      	ldr	r3, [pc, #4]	; (249c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2498:	4798      	blx	r3
    249a:	bd80      	pop	{r7, pc}
    249c:	00002389 	.word	0x00002389

000024a0 <hri_port_set_OUT_reg>:
{
    24a0:	b480      	push	{r7}
    24a2:	b085      	sub	sp, #20
    24a4:	af00      	add	r7, sp, #0
    24a6:	60f8      	str	r0, [r7, #12]
    24a8:	460b      	mov	r3, r1
    24aa:	607a      	str	r2, [r7, #4]
    24ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24ae:	7afb      	ldrb	r3, [r7, #11]
    24b0:	68fa      	ldr	r2, [r7, #12]
    24b2:	01db      	lsls	r3, r3, #7
    24b4:	4413      	add	r3, r2
    24b6:	3318      	adds	r3, #24
    24b8:	687a      	ldr	r2, [r7, #4]
    24ba:	601a      	str	r2, [r3, #0]
}
    24bc:	bf00      	nop
    24be:	3714      	adds	r7, #20
    24c0:	46bd      	mov	sp, r7
    24c2:	bc80      	pop	{r7}
    24c4:	4770      	bx	lr

000024c6 <hri_port_clear_OUT_reg>:
{
    24c6:	b480      	push	{r7}
    24c8:	b085      	sub	sp, #20
    24ca:	af00      	add	r7, sp, #0
    24cc:	60f8      	str	r0, [r7, #12]
    24ce:	460b      	mov	r3, r1
    24d0:	607a      	str	r2, [r7, #4]
    24d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24d4:	7afb      	ldrb	r3, [r7, #11]
    24d6:	68fa      	ldr	r2, [r7, #12]
    24d8:	01db      	lsls	r3, r3, #7
    24da:	4413      	add	r3, r2
    24dc:	3314      	adds	r3, #20
    24de:	687a      	ldr	r2, [r7, #4]
    24e0:	601a      	str	r2, [r3, #0]
}
    24e2:	bf00      	nop
    24e4:	3714      	adds	r7, #20
    24e6:	46bd      	mov	sp, r7
    24e8:	bc80      	pop	{r7}
    24ea:	4770      	bx	lr

000024ec <hri_port_toggle_OUT_reg>:
{
    24ec:	b480      	push	{r7}
    24ee:	b085      	sub	sp, #20
    24f0:	af00      	add	r7, sp, #0
    24f2:	60f8      	str	r0, [r7, #12]
    24f4:	460b      	mov	r3, r1
    24f6:	607a      	str	r2, [r7, #4]
    24f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    24fa:	7afb      	ldrb	r3, [r7, #11]
    24fc:	68fa      	ldr	r2, [r7, #12]
    24fe:	01db      	lsls	r3, r3, #7
    2500:	4413      	add	r3, r2
    2502:	331c      	adds	r3, #28
    2504:	687a      	ldr	r2, [r7, #4]
    2506:	601a      	str	r2, [r3, #0]
}
    2508:	bf00      	nop
    250a:	3714      	adds	r7, #20
    250c:	46bd      	mov	sp, r7
    250e:	bc80      	pop	{r7}
    2510:	4770      	bx	lr
	...

00002514 <_gpio_set_level>:
{
    2514:	b580      	push	{r7, lr}
    2516:	b082      	sub	sp, #8
    2518:	af00      	add	r7, sp, #0
    251a:	4603      	mov	r3, r0
    251c:	6039      	str	r1, [r7, #0]
    251e:	71fb      	strb	r3, [r7, #7]
    2520:	4613      	mov	r3, r2
    2522:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2524:	79bb      	ldrb	r3, [r7, #6]
    2526:	2b00      	cmp	r3, #0
    2528:	d006      	beq.n	2538 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    252a:	79fb      	ldrb	r3, [r7, #7]
    252c:	683a      	ldr	r2, [r7, #0]
    252e:	4619      	mov	r1, r3
    2530:	4806      	ldr	r0, [pc, #24]	; (254c <_gpio_set_level+0x38>)
    2532:	4b07      	ldr	r3, [pc, #28]	; (2550 <_gpio_set_level+0x3c>)
    2534:	4798      	blx	r3
}
    2536:	e005      	b.n	2544 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2538:	79fb      	ldrb	r3, [r7, #7]
    253a:	683a      	ldr	r2, [r7, #0]
    253c:	4619      	mov	r1, r3
    253e:	4803      	ldr	r0, [pc, #12]	; (254c <_gpio_set_level+0x38>)
    2540:	4b04      	ldr	r3, [pc, #16]	; (2554 <_gpio_set_level+0x40>)
    2542:	4798      	blx	r3
}
    2544:	bf00      	nop
    2546:	3708      	adds	r7, #8
    2548:	46bd      	mov	sp, r7
    254a:	bd80      	pop	{r7, pc}
    254c:	41008000 	.word	0x41008000
    2550:	000024a1 	.word	0x000024a1
    2554:	000024c7 	.word	0x000024c7

00002558 <_gpio_toggle_level>:
{
    2558:	b580      	push	{r7, lr}
    255a:	b082      	sub	sp, #8
    255c:	af00      	add	r7, sp, #0
    255e:	4603      	mov	r3, r0
    2560:	6039      	str	r1, [r7, #0]
    2562:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    2564:	79fb      	ldrb	r3, [r7, #7]
    2566:	683a      	ldr	r2, [r7, #0]
    2568:	4619      	mov	r1, r3
    256a:	4803      	ldr	r0, [pc, #12]	; (2578 <_gpio_toggle_level+0x20>)
    256c:	4b03      	ldr	r3, [pc, #12]	; (257c <_gpio_toggle_level+0x24>)
    256e:	4798      	blx	r3
}
    2570:	bf00      	nop
    2572:	3708      	adds	r7, #8
    2574:	46bd      	mov	sp, r7
    2576:	bd80      	pop	{r7, pc}
    2578:	41008000 	.word	0x41008000
    257c:	000024ed 	.word	0x000024ed

00002580 <gpio_set_pin_level>:
{
    2580:	b580      	push	{r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	af00      	add	r7, sp, #0
    2586:	4603      	mov	r3, r0
    2588:	460a      	mov	r2, r1
    258a:	71fb      	strb	r3, [r7, #7]
    258c:	4613      	mov	r3, r2
    258e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2590:	79fb      	ldrb	r3, [r7, #7]
    2592:	115b      	asrs	r3, r3, #5
    2594:	b2d8      	uxtb	r0, r3
    2596:	79fb      	ldrb	r3, [r7, #7]
    2598:	f003 031f 	and.w	r3, r3, #31
    259c:	2201      	movs	r2, #1
    259e:	fa02 f303 	lsl.w	r3, r2, r3
    25a2:	79ba      	ldrb	r2, [r7, #6]
    25a4:	4619      	mov	r1, r3
    25a6:	4b03      	ldr	r3, [pc, #12]	; (25b4 <gpio_set_pin_level+0x34>)
    25a8:	4798      	blx	r3
}
    25aa:	bf00      	nop
    25ac:	3708      	adds	r7, #8
    25ae:	46bd      	mov	sp, r7
    25b0:	bd80      	pop	{r7, pc}
    25b2:	bf00      	nop
    25b4:	00002515 	.word	0x00002515

000025b8 <gpio_toggle_pin_level>:
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	4603      	mov	r3, r0
    25c0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    25c2:	79fb      	ldrb	r3, [r7, #7]
    25c4:	115b      	asrs	r3, r3, #5
    25c6:	b2d8      	uxtb	r0, r3
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	f003 031f 	and.w	r3, r3, #31
    25ce:	2201      	movs	r2, #1
    25d0:	fa02 f303 	lsl.w	r3, r2, r3
    25d4:	4619      	mov	r1, r3
    25d6:	4b03      	ldr	r3, [pc, #12]	; (25e4 <gpio_toggle_pin_level+0x2c>)
    25d8:	4798      	blx	r3
}
    25da:	bf00      	nop
    25dc:	3708      	adds	r7, #8
    25de:	46bd      	mov	sp, r7
    25e0:	bd80      	pop	{r7, pc}
    25e2:	bf00      	nop
    25e4:	00002559 	.word	0x00002559

000025e8 <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "SingleHeater_Class.h"
#include "ARINC_Handler_Class.h"


States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    25e8:	b480      	push	{r7}
    25ea:	b083      	sub	sp, #12
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    25f0:	4b04      	ldr	r3, [pc, #16]	; (2604 <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	2201      	movs	r2, #1
    25f6:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
    25fa:	bf00      	nop
    25fc:	370c      	adds	r7, #12
    25fe:	46bd      	mov	sp, r7
    2600:	bc80      	pop	{r7}
    2602:	4770      	bx	lr
    2604:	20000fb0 	.word	0x20000fb0

00002608 <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2608:	b480      	push	{r7}
    260a:	b083      	sub	sp, #12
    260c:	af00      	add	r7, sp, #0
    260e:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2610:	4b04      	ldr	r3, [pc, #16]	; (2624 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2612:	689b      	ldr	r3, [r3, #8]
    2614:	3301      	adds	r3, #1
    2616:	4a03      	ldr	r2, [pc, #12]	; (2624 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2618:	6093      	str	r3, [r2, #8]
}
    261a:	bf00      	nop
    261c:	370c      	adds	r7, #12
    261e:	46bd      	mov	sp, r7
    2620:	bc80      	pop	{r7}
    2622:	4770      	bx	lr
    2624:	20000ef8 	.word	0x20000ef8

00002628 <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	f503 731d 	add.w	r3, r3, #628	; 0x274
    2636:	4618      	mov	r0, r3
    2638:	4b1f      	ldr	r3, [pc, #124]	; (26b8 <_ZN12States_ClassC1Ev+0x90>)
    263a:	4798      	blx	r3
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	f203 5314 	addw	r3, r3, #1300	; 0x514
    2642:	4a1e      	ldr	r2, [pc, #120]	; (26bc <_ZN12States_ClassC1Ev+0x94>)
    2644:	4611      	mov	r1, r2
    2646:	4618      	mov	r0, r3
    2648:	4b1d      	ldr	r3, [pc, #116]	; (26c0 <_ZN12States_ClassC1Ev+0x98>)
    264a:	4798      	blx	r3
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	335c      	adds	r3, #92	; 0x5c
    2650:	4618      	mov	r0, r3
    2652:	4b1c      	ldr	r3, [pc, #112]	; (26c4 <_ZN12States_ClassC1Ev+0x9c>)
    2654:	4798      	blx	r3
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	4618      	mov	r0, r3
    265a:	4b1b      	ldr	r3, [pc, #108]	; (26c8 <_ZN12States_ClassC1Ev+0xa0>)
    265c:	4798      	blx	r3
    265e:	4a1b      	ldr	r2, [pc, #108]	; (26cc <_ZN12States_ClassC1Ev+0xa4>)
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	601a      	str	r2, [r3, #0]
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	f503 731d 	add.w	r3, r3, #628	; 0x274
    266a:	4a19      	ldr	r2, [pc, #100]	; (26d0 <_ZN12States_ClassC1Ev+0xa8>)
    266c:	601a      	str	r2, [r3, #0]
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	f203 5314 	addw	r3, r3, #1300	; 0x514
    2674:	4a17      	ldr	r2, [pc, #92]	; (26d4 <_ZN12States_ClassC1Ev+0xac>)
    2676:	601a      	str	r2, [r3, #0]
    2678:	4a17      	ldr	r2, [pc, #92]	; (26d8 <_ZN12States_ClassC1Ev+0xb0>)
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	629a      	str	r2, [r3, #40]	; 0x28
{
	ptrStatesClass=this;
    267e:	4a17      	ldr	r2, [pc, #92]	; (26dc <_ZN12States_ClassC1Ev+0xb4>)
    2680:	687b      	ldr	r3, [r7, #4]
    2682:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    2684:	4b16      	ldr	r3, [pc, #88]	; (26e0 <_ZN12States_ClassC1Ev+0xb8>)
    2686:	2200      	movs	r2, #0
    2688:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	f503 731d 	add.w	r3, r3, #628	; 0x274
    2690:	4a14      	ldr	r2, [pc, #80]	; (26e4 <_ZN12States_ClassC1Ev+0xbc>)
    2692:	4610      	mov	r0, r2
    2694:	3304      	adds	r3, #4
    2696:	2268      	movs	r2, #104	; 0x68
    2698:	4619      	mov	r1, r3
    269a:	4b13      	ldr	r3, [pc, #76]	; (26e8 <_ZN12States_ClassC1Ev+0xc0>)
    269c:	4798      	blx	r3
	isOK=false;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	2200      	movs	r2, #0
    26a2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	hvacState=&staticCurrentState;
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	4a0e      	ldr	r2, [pc, #56]	; (26e4 <_ZN12States_ClassC1Ev+0xbc>)
    26aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	4618      	mov	r0, r3
    26b2:	3708      	adds	r7, #8
    26b4:	46bd      	mov	sp, r7
    26b6:	bd80      	pop	{r7, pc}
    26b8:	00000cfd 	.word	0x00000cfd
    26bc:	0001cad0 	.word	0x0001cad0
    26c0:	000011eb 	.word	0x000011eb
    26c4:	00001b5d 	.word	0x00001b5d
    26c8:	00001611 	.word	0x00001611
    26cc:	0001ca8c 	.word	0x0001ca8c
    26d0:	0001cab4 	.word	0x0001cab4
    26d4:	0001cac4 	.word	0x0001cac4
    26d8:	0001caa0 	.word	0x0001caa0
    26dc:	20000fb0 	.word	0x20000fb0
    26e0:	20003284 	.word	0x20003284
    26e4:	20000fb4 	.word	0x20000fb4
    26e8:	0001c521 	.word	0x0001c521

000026ec <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    26f4:	4a15      	ldr	r2, [pc, #84]	; (274c <_ZN12States_ClassD1Ev+0x60>)
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	601a      	str	r2, [r3, #0]
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	f503 731d 	add.w	r3, r3, #628	; 0x274
    2700:	4a13      	ldr	r2, [pc, #76]	; (2750 <_ZN12States_ClassD1Ev+0x64>)
    2702:	601a      	str	r2, [r3, #0]
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	f203 5314 	addw	r3, r3, #1300	; 0x514
    270a:	4a12      	ldr	r2, [pc, #72]	; (2754 <_ZN12States_ClassD1Ev+0x68>)
    270c:	601a      	str	r2, [r3, #0]
    270e:	4a12      	ldr	r2, [pc, #72]	; (2758 <_ZN12States_ClassD1Ev+0x6c>)
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	629a      	str	r2, [r3, #40]	; 0x28
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	4618      	mov	r0, r3
    2718:	4b10      	ldr	r3, [pc, #64]	; (275c <_ZN12States_ClassD1Ev+0x70>)
    271a:	4798      	blx	r3
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	335c      	adds	r3, #92	; 0x5c
    2720:	4618      	mov	r0, r3
    2722:	4b0f      	ldr	r3, [pc, #60]	; (2760 <_ZN12States_ClassD1Ev+0x74>)
    2724:	4798      	blx	r3
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f203 5314 	addw	r3, r3, #1300	; 0x514
    272c:	4a0d      	ldr	r2, [pc, #52]	; (2764 <_ZN12States_ClassD1Ev+0x78>)
    272e:	4611      	mov	r1, r2
    2730:	4618      	mov	r0, r3
    2732:	4b0d      	ldr	r3, [pc, #52]	; (2768 <_ZN12States_ClassD1Ev+0x7c>)
    2734:	4798      	blx	r3
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	f503 731d 	add.w	r3, r3, #628	; 0x274
    273c:	4618      	mov	r0, r3
    273e:	4b0b      	ldr	r3, [pc, #44]	; (276c <_ZN12States_ClassD1Ev+0x80>)
    2740:	4798      	blx	r3
{
} //~States_Class
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	4618      	mov	r0, r3
    2746:	3708      	adds	r7, #8
    2748:	46bd      	mov	sp, r7
    274a:	bd80      	pop	{r7, pc}
    274c:	0001ca8c 	.word	0x0001ca8c
    2750:	0001cab4 	.word	0x0001cab4
    2754:	0001cac4 	.word	0x0001cac4
    2758:	0001caa0 	.word	0x0001caa0
    275c:	00001665 	.word	0x00001665
    2760:	00001b77 	.word	0x00001b77
    2764:	0001cad0 	.word	0x0001cad0
    2768:	0000121d 	.word	0x0000121d
    276c:	00000d55 	.word	0x00000d55

00002770 <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(LED0,true);
    2778:	2101      	movs	r1, #1
    277a:	2052      	movs	r0, #82	; 0x52
    277c:	4b2f      	ldr	r3, [pc, #188]	; (283c <_ZN12States_Class4InitEv+0xcc>)
    277e:	4798      	blx	r3
	if (hvacTimer.Init())
    2780:	482f      	ldr	r0, [pc, #188]	; (2840 <_ZN12States_Class4InitEv+0xd0>)
    2782:	4b30      	ldr	r3, [pc, #192]	; (2844 <_ZN12States_Class4InitEv+0xd4>)
    2784:	4798      	blx	r3
    2786:	4603      	mov	r3, r0
    2788:	2b00      	cmp	r3, #0
    278a:	d004      	beq.n	2796 <_ZN12States_Class4InitEv+0x26>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    278c:	2201      	movs	r2, #1
    278e:	492e      	ldr	r1, [pc, #184]	; (2848 <_ZN12States_Class4InitEv+0xd8>)
    2790:	482b      	ldr	r0, [pc, #172]	; (2840 <_ZN12States_Class4InitEv+0xd0>)
    2792:	4b2e      	ldr	r3, [pc, #184]	; (284c <_ZN12States_Class4InitEv+0xdc>)
    2794:	4798      	blx	r3
	}
	while(!fans.Init()){
    2796:	482e      	ldr	r0, [pc, #184]	; (2850 <_ZN12States_Class4InitEv+0xe0>)
    2798:	4b2e      	ldr	r3, [pc, #184]	; (2854 <_ZN12States_Class4InitEv+0xe4>)
    279a:	4798      	blx	r3
    279c:	4603      	mov	r3, r0
    279e:	f083 0301 	eor.w	r3, r3, #1
    27a2:	b2db      	uxtb	r3, r3
    27a4:	2b00      	cmp	r3, #0
    27a6:	d006      	beq.n	27b6 <_ZN12States_Class4InitEv+0x46>
		delay_ms(200);
    27a8:	20c8      	movs	r0, #200	; 0xc8
    27aa:	4b2b      	ldr	r3, [pc, #172]	; (2858 <_ZN12States_Class4InitEv+0xe8>)
    27ac:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    27ae:	2052      	movs	r0, #82	; 0x52
    27b0:	4b2a      	ldr	r3, [pc, #168]	; (285c <_ZN12States_Class4InitEv+0xec>)
    27b2:	4798      	blx	r3
	while(!fans.Init()){
    27b4:	e7ef      	b.n	2796 <_ZN12States_Class4InitEv+0x26>
		
	}
	while (!fvc.InitController())
    27b6:	482a      	ldr	r0, [pc, #168]	; (2860 <_ZN12States_Class4InitEv+0xf0>)
    27b8:	4b2a      	ldr	r3, [pc, #168]	; (2864 <_ZN12States_Class4InitEv+0xf4>)
    27ba:	4798      	blx	r3
    27bc:	4603      	mov	r3, r0
    27be:	f083 0301 	eor.w	r3, r3, #1
    27c2:	b2db      	uxtb	r3, r3
    27c4:	2b00      	cmp	r3, #0
    27c6:	d006      	beq.n	27d6 <_ZN12States_Class4InitEv+0x66>
	{
		delay_ms(200);
    27c8:	20c8      	movs	r0, #200	; 0xc8
    27ca:	4b23      	ldr	r3, [pc, #140]	; (2858 <_ZN12States_Class4InitEv+0xe8>)
    27cc:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    27ce:	2052      	movs	r0, #82	; 0x52
    27d0:	4b22      	ldr	r3, [pc, #136]	; (285c <_ZN12States_Class4InitEv+0xec>)
    27d2:	4798      	blx	r3
	while (!fvc.InitController())
    27d4:	e7ef      	b.n	27b6 <_ZN12States_Class4InitEv+0x46>
	}
	fvc.StartControlling();
    27d6:	4822      	ldr	r0, [pc, #136]	; (2860 <_ZN12States_Class4InitEv+0xf0>)
    27d8:	4b23      	ldr	r3, [pc, #140]	; (2868 <_ZN12States_Class4InitEv+0xf8>)
    27da:	4798      	blx	r3
	while (!temperatures.Init())
    27dc:	4823      	ldr	r0, [pc, #140]	; (286c <_ZN12States_Class4InitEv+0xfc>)
    27de:	4b24      	ldr	r3, [pc, #144]	; (2870 <_ZN12States_Class4InitEv+0x100>)
    27e0:	4798      	blx	r3
    27e2:	4603      	mov	r3, r0
    27e4:	f083 0301 	eor.w	r3, r3, #1
    27e8:	b2db      	uxtb	r3, r3
    27ea:	2b00      	cmp	r3, #0
    27ec:	d006      	beq.n	27fc <_ZN12States_Class4InitEv+0x8c>
	{
		delay_ms(200);
    27ee:	20c8      	movs	r0, #200	; 0xc8
    27f0:	4b19      	ldr	r3, [pc, #100]	; (2858 <_ZN12States_Class4InitEv+0xe8>)
    27f2:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    27f4:	2052      	movs	r0, #82	; 0x52
    27f6:	4b19      	ldr	r3, [pc, #100]	; (285c <_ZN12States_Class4InitEv+0xec>)
    27f8:	4798      	blx	r3
	while (!temperatures.Init())
    27fa:	e7ef      	b.n	27dc <_ZN12States_Class4InitEv+0x6c>
	}
	temperatures.StartOneConversion();
    27fc:	481b      	ldr	r0, [pc, #108]	; (286c <_ZN12States_Class4InitEv+0xfc>)
    27fe:	4b1d      	ldr	r3, [pc, #116]	; (2874 <_ZN12States_Class4InitEv+0x104>)
    2800:	4798      	blx	r3
	while(!heater.Init()){
    2802:	481d      	ldr	r0, [pc, #116]	; (2878 <_ZN12States_Class4InitEv+0x108>)
    2804:	4b1d      	ldr	r3, [pc, #116]	; (287c <_ZN12States_Class4InitEv+0x10c>)
    2806:	4798      	blx	r3
    2808:	4603      	mov	r3, r0
    280a:	f083 0301 	eor.w	r3, r3, #1
    280e:	b2db      	uxtb	r3, r3
    2810:	2b00      	cmp	r3, #0
    2812:	d006      	beq.n	2822 <_ZN12States_Class4InitEv+0xb2>
		delay_ms(200);
    2814:	20c8      	movs	r0, #200	; 0xc8
    2816:	4b10      	ldr	r3, [pc, #64]	; (2858 <_ZN12States_Class4InitEv+0xe8>)
    2818:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
    281a:	2052      	movs	r0, #82	; 0x52
    281c:	4b0f      	ldr	r3, [pc, #60]	; (285c <_ZN12States_Class4InitEv+0xec>)
    281e:	4798      	blx	r3
	while(!heater.Init()){
    2820:	e7ef      	b.n	2802 <_ZN12States_Class4InitEv+0x92>
	}
	temperingTimeout=true;
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	2201      	movs	r2, #1
    2826:	715a      	strb	r2, [r3, #5]


	//return isOK;
	gpio_set_pin_level(LED0,true);
    2828:	2101      	movs	r1, #1
    282a:	2052      	movs	r0, #82	; 0x52
    282c:	4b03      	ldr	r3, [pc, #12]	; (283c <_ZN12States_Class4InitEv+0xcc>)
    282e:	4798      	blx	r3
	return true;
    2830:	2301      	movs	r3, #1
	
}
    2832:	4618      	mov	r0, r3
    2834:	3708      	adds	r7, #8
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	bf00      	nop
    283c:	00002581 	.word	0x00002581
    2840:	20000ef8 	.word	0x20000ef8
    2844:	00013df5 	.word	0x00013df5
    2848:	00002609 	.word	0x00002609
    284c:	00013ee5 	.word	0x00013ee5
    2850:	20003b28 	.word	0x20003b28
    2854:	00015065 	.word	0x00015065
    2858:	0000647d 	.word	0x0000647d
    285c:	000025b9 	.word	0x000025b9
    2860:	20005598 	.word	0x20005598
    2864:	00015a45 	.word	0x00015a45
    2868:	000165f5 	.word	0x000165f5
    286c:	2000d118 	.word	0x2000d118
    2870:	000185c9 	.word	0x000185c9
    2874:	00018651 	.word	0x00018651
    2878:	20005814 	.word	0x20005814
    287c:	000170fd 	.word	0x000170fd

00002880 <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    2880:	b590      	push	{r4, r7, lr}
    2882:	b08f      	sub	sp, #60	; 0x3c
    2884:	af02      	add	r7, sp, #8
    2886:	6078      	str	r0, [r7, #4]
    2888:	460b      	mov	r3, r1
    288a:	70fb      	strb	r3, [r7, #3]
	event e;
    288c:	f107 031c 	add.w	r3, r7, #28
    2890:	4618      	mov	r0, r3
    2892:	4b4b      	ldr	r3, [pc, #300]	; (29c0 <_ZN12States_Class16ControllerResumeEh+0x140>)
    2894:	4798      	blx	r3
	bool done(false);
    2896:	2300      	movs	r3, #0
    2898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    289c:	78fb      	ldrb	r3, [r7, #3]
    289e:	2b00      	cmp	r3, #0
    28a0:	d115      	bne.n	28ce <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    28a8:	b2db      	uxtb	r3, r3
    28aa:	2b00      	cmp	r3, #0
    28ac:	d00f      	beq.n	28ce <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    28ae:	4945      	ldr	r1, [pc, #276]	; (29c4 <_ZN12States_Class16ControllerResumeEh+0x144>)
    28b0:	4845      	ldr	r0, [pc, #276]	; (29c8 <_ZN12States_Class16ControllerResumeEh+0x148>)
    28b2:	4b46      	ldr	r3, [pc, #280]	; (29cc <_ZN12States_Class16ControllerResumeEh+0x14c>)
    28b4:	4798      	blx	r3
    28b6:	4603      	mov	r3, r0
    28b8:	4945      	ldr	r1, [pc, #276]	; (29d0 <_ZN12States_Class16ControllerResumeEh+0x150>)
    28ba:	4618      	mov	r0, r3
    28bc:	4b45      	ldr	r3, [pc, #276]	; (29d4 <_ZN12States_Class16ControllerResumeEh+0x154>)
    28be:	4798      	blx	r3
				timeElapsed=false;
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	2200      	movs	r2, #0
    28c4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				delay_ms(10);
    28c8:	200a      	movs	r0, #10
    28ca:	4b43      	ldr	r3, [pc, #268]	; (29d8 <_ZN12States_Class16ControllerResumeEh+0x158>)
    28cc:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    28d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28d6:	f240 1243 	movw	r2, #323	; 0x143
    28da:	4293      	cmp	r3, r2
    28dc:	d10a      	bne.n	28f4 <_ZN12States_Class16ControllerResumeEh+0x74>
		{
			prepareStateChangeEvent(hvacState->lastState);
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    28e4:	6a1b      	ldr	r3, [r3, #32]
    28e6:	b29b      	uxth	r3, r3
    28e8:	2200      	movs	r2, #0
    28ea:	4619      	mov	r1, r3
    28ec:	6878      	ldr	r0, [r7, #4]
    28ee:	4b3b      	ldr	r3, [pc, #236]	; (29dc <_ZN12States_Class16ControllerResumeEh+0x15c>)
    28f0:	4798      	blx	r3
    28f2:	e005      	b.n	2900 <_ZN12States_Class16ControllerResumeEh+0x80>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    28f4:	2200      	movs	r2, #0
    28f6:	f44f 7197 	mov.w	r1, #302	; 0x12e
    28fa:	6878      	ldr	r0, [r7, #4]
    28fc:	4b37      	ldr	r3, [pc, #220]	; (29dc <_ZN12States_Class16ControllerResumeEh+0x15c>)
    28fe:	4798      	blx	r3
		}
		
		if (operationMode>0)
    2900:	78fb      	ldrb	r3, [r7, #3]
    2902:	2b00      	cmp	r3, #0
    2904:	dd51      	ble.n	29aa <_ZN12States_Class16ControllerResumeEh+0x12a>
		{
			
			event	e;
    2906:	f107 030c 	add.w	r3, r7, #12
    290a:	4618      	mov	r0, r3
    290c:	4b2c      	ldr	r3, [pc, #176]	; (29c0 <_ZN12States_Class16ControllerResumeEh+0x140>)
    290e:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    2910:	4b33      	ldr	r3, [pc, #204]	; (29e0 <_ZN12States_Class16ControllerResumeEh+0x160>)
    2912:	4a34      	ldr	r2, [pc, #208]	; (29e4 <_ZN12States_Class16ControllerResumeEh+0x164>)
    2914:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    2916:	4834      	ldr	r0, [pc, #208]	; (29e8 <_ZN12States_Class16ControllerResumeEh+0x168>)
    2918:	4b34      	ldr	r3, [pc, #208]	; (29ec <_ZN12States_Class16ControllerResumeEh+0x16c>)
    291a:	4798      	blx	r3
    291c:	4603      	mov	r3, r0
    291e:	2b00      	cmp	r3, #0
    2920:	d008      	beq.n	2934 <_ZN12States_Class16ControllerResumeEh+0xb4>
    2922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    2926:	f083 0301 	eor.w	r3, r3, #1
    292a:	b2db      	uxtb	r3, r3
    292c:	2b00      	cmp	r3, #0
    292e:	d001      	beq.n	2934 <_ZN12States_Class16ControllerResumeEh+0xb4>
    2930:	2301      	movs	r3, #1
    2932:	e000      	b.n	2936 <_ZN12States_Class16ControllerResumeEh+0xb6>
    2934:	2300      	movs	r3, #0
    2936:	2b00      	cmp	r3, #0
    2938:	d03e      	beq.n	29b8 <_ZN12States_Class16ControllerResumeEh+0x138>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    293a:	f107 010c 	add.w	r1, r7, #12
    293e:	2308      	movs	r3, #8
    2940:	9300      	str	r3, [sp, #0]
    2942:	f44f 7300 	mov.w	r3, #512	; 0x200
    2946:	f44f 7200 	mov.w	r2, #512	; 0x200
    294a:	4825      	ldr	r0, [pc, #148]	; (29e0 <_ZN12States_Class16ControllerResumeEh+0x160>)
    294c:	4c28      	ldr	r4, [pc, #160]	; (29f0 <_ZN12States_Class16ControllerResumeEh+0x170>)
    294e:	47a0      	blx	r4
    2950:	4603      	mov	r3, r0
    2952:	2b00      	cmp	r3, #0
    2954:	d011      	beq.n	297a <_ZN12States_Class16ControllerResumeEh+0xfa>
				{
					handleHVACEvent(e);
    2956:	f107 030c 	add.w	r3, r7, #12
    295a:	4619      	mov	r1, r3
    295c:	6878      	ldr	r0, [r7, #4]
    295e:	4b25      	ldr	r3, [pc, #148]	; (29f4 <_ZN12States_Class16ControllerResumeEh+0x174>)
    2960:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    296a:	f240 1243 	movw	r2, #323	; 0x143
    296e:	4293      	cmp	r3, r2
    2970:	d1d1      	bne.n	2916 <_ZN12States_Class16ControllerResumeEh+0x96>
					{
							done=true;
    2972:	2301      	movs	r3, #1
    2974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    2978:	e01e      	b.n	29b8 <_ZN12States_Class16ControllerResumeEh+0x138>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    297a:	f107 010c 	add.w	r1, r7, #12
    297e:	2304      	movs	r3, #4
    2980:	9300      	str	r3, [sp, #0]
    2982:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2986:	f44f 7240 	mov.w	r2, #768	; 0x300
    298a:	4815      	ldr	r0, [pc, #84]	; (29e0 <_ZN12States_Class16ControllerResumeEh+0x160>)
    298c:	4c1a      	ldr	r4, [pc, #104]	; (29f8 <_ZN12States_Class16ControllerResumeEh+0x178>)
    298e:	47a0      	blx	r4
    2990:	4603      	mov	r3, r0
    2992:	2b00      	cmp	r3, #0
    2994:	d0bf      	beq.n	2916 <_ZN12States_Class16ControllerResumeEh+0x96>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    2996:	2200      	movs	r2, #0
    2998:	f240 1105 	movw	r1, #261	; 0x105
    299c:	4817      	ldr	r0, [pc, #92]	; (29fc <_ZN12States_Class16ControllerResumeEh+0x17c>)
    299e:	4b18      	ldr	r3, [pc, #96]	; (2a00 <_ZN12States_Class16ControllerResumeEh+0x180>)
    29a0:	4798      	blx	r3
					done=true;
    29a2:	2301      	movs	r3, #1
    29a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    29a8:	e7b5      	b.n	2916 <_ZN12States_Class16ControllerResumeEh+0x96>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    29aa:	2200      	movs	r2, #0
    29ac:	f44f 7182 	mov.w	r1, #260	; 0x104
    29b0:	4812      	ldr	r0, [pc, #72]	; (29fc <_ZN12States_Class16ControllerResumeEh+0x17c>)
    29b2:	4b13      	ldr	r3, [pc, #76]	; (2a00 <_ZN12States_Class16ControllerResumeEh+0x180>)
    29b4:	4798      	blx	r3
			return;
    29b6:	bf00      	nop
		}
		
}
    29b8:	3734      	adds	r7, #52	; 0x34
    29ba:	46bd      	mov	sp, r7
    29bc:	bd90      	pop	{r4, r7, pc}
    29be:	bf00      	nop
    29c0:	000003c5 	.word	0x000003c5
    29c4:	0001ca14 	.word	0x0001ca14
    29c8:	20003884 	.word	0x20003884
    29cc:	00003c61 	.word	0x00003c61
    29d0:	0001ca38 	.word	0x0001ca38
    29d4:	00000ae9 	.word	0x00000ae9
    29d8:	0000647d 	.word	0x0000647d
    29dc:	000038bd 	.word	0x000038bd
    29e0:	20003284 	.word	0x20003284
    29e4:	00003b61 	.word	0x00003b61
    29e8:	20000fac 	.word	0x20000fac
    29ec:	00000c87 	.word	0x00000c87
    29f0:	00013341 	.word	0x00013341
    29f4:	00002b75 	.word	0x00002b75
    29f8:	00013379 	.word	0x00013379
    29fc:	20000738 	.word	0x20000738
    2a00:	00000871 	.word	0x00000871

00002a04 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    2a04:	b590      	push	{r4, r7, lr}
    2a06:	b08b      	sub	sp, #44	; 0x2c
    2a08:	af02      	add	r7, sp, #8
    2a0a:	6078      	str	r0, [r7, #4]
    2a0c:	460b      	mov	r3, r1
    2a0e:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
    2a1a:	625a      	str	r2, [r3, #36]	; 0x24
	bool done(false);
    2a1c:	2300      	movs	r3, #0
    2a1e:	77fb      	strb	r3, [r7, #31]
	if (operationMode==0)
    2a20:	78fb      	ldrb	r3, [r7, #3]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d113      	bne.n	2a4e <_ZN12States_Class5StartEh+0x4a>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    2a26:	2264      	movs	r2, #100	; 0x64
    2a28:	493d      	ldr	r1, [pc, #244]	; (2b20 <_ZN12States_Class5StartEh+0x11c>)
    2a2a:	483e      	ldr	r0, [pc, #248]	; (2b24 <_ZN12States_Class5StartEh+0x120>)
    2a2c:	4b3e      	ldr	r3, [pc, #248]	; (2b28 <_ZN12States_Class5StartEh+0x124>)
    2a2e:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    2a30:	493e      	ldr	r1, [pc, #248]	; (2b2c <_ZN12States_Class5StartEh+0x128>)
    2a32:	483f      	ldr	r0, [pc, #252]	; (2b30 <_ZN12States_Class5StartEh+0x12c>)
    2a34:	4b3f      	ldr	r3, [pc, #252]	; (2b34 <_ZN12States_Class5StartEh+0x130>)
    2a36:	4798      	blx	r3
    2a38:	4603      	mov	r3, r0
    2a3a:	493f      	ldr	r1, [pc, #252]	; (2b38 <_ZN12States_Class5StartEh+0x134>)
    2a3c:	4618      	mov	r0, r3
    2a3e:	4b3f      	ldr	r3, [pc, #252]	; (2b3c <_ZN12States_Class5StartEh+0x138>)
    2a40:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    2a42:	2200      	movs	r2, #0
    2a44:	2103      	movs	r1, #3
    2a46:	483e      	ldr	r0, [pc, #248]	; (2b40 <_ZN12States_Class5StartEh+0x13c>)
    2a48:	4b3e      	ldr	r3, [pc, #248]	; (2b44 <_ZN12States_Class5StartEh+0x140>)
    2a4a:	4798      	blx	r3
	
		return;
    2a4c:	e065      	b.n	2b1a <_ZN12States_Class5StartEh+0x116>
// 					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
// #endif
	

	//interfaces.CheckInternalCommunication();
	readResult=0;
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	2200      	movs	r2, #0
    2a52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	if (readResult==0)
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d155      	bne.n	2b0c <_ZN12States_Class5StartEh+0x108>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    2a60:	2200      	movs	r2, #0
    2a62:	f44f 7197 	mov.w	r1, #302	; 0x12e
    2a66:	6878      	ldr	r0, [r7, #4]
    2a68:	4b37      	ldr	r3, [pc, #220]	; (2b48 <_ZN12States_Class5StartEh+0x144>)
    2a6a:	4798      	blx	r3
		event	e;
    2a6c:	f107 030c 	add.w	r3, r7, #12
    2a70:	4618      	mov	r0, r3
    2a72:	4b36      	ldr	r3, [pc, #216]	; (2b4c <_ZN12States_Class5StartEh+0x148>)
    2a74:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    2a76:	4b36      	ldr	r3, [pc, #216]	; (2b50 <_ZN12States_Class5StartEh+0x14c>)
    2a78:	4a36      	ldr	r2, [pc, #216]	; (2b54 <_ZN12States_Class5StartEh+0x150>)
    2a7a:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    2a7c:	4836      	ldr	r0, [pc, #216]	; (2b58 <_ZN12States_Class5StartEh+0x154>)
    2a7e:	4b37      	ldr	r3, [pc, #220]	; (2b5c <_ZN12States_Class5StartEh+0x158>)
    2a80:	4798      	blx	r3
    2a82:	4603      	mov	r3, r0
    2a84:	2b00      	cmp	r3, #0
    2a86:	d007      	beq.n	2a98 <_ZN12States_Class5StartEh+0x94>
    2a88:	7ffb      	ldrb	r3, [r7, #31]
    2a8a:	f083 0301 	eor.w	r3, r3, #1
    2a8e:	b2db      	uxtb	r3, r3
    2a90:	2b00      	cmp	r3, #0
    2a92:	d001      	beq.n	2a98 <_ZN12States_Class5StartEh+0x94>
    2a94:	2301      	movs	r3, #1
    2a96:	e000      	b.n	2a9a <_ZN12States_Class5StartEh+0x96>
    2a98:	2300      	movs	r3, #0
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d03d      	beq.n	2b1a <_ZN12States_Class5StartEh+0x116>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    2a9e:	4b30      	ldr	r3, [pc, #192]	; (2b60 <_ZN12States_Class5StartEh+0x15c>)
    2aa0:	681b      	ldr	r3, [r3, #0]
    2aa2:	f107 010c 	add.w	r1, r7, #12
    2aa6:	9300      	str	r3, [sp, #0]
    2aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
    2aac:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ab0:	4827      	ldr	r0, [pc, #156]	; (2b50 <_ZN12States_Class5StartEh+0x14c>)
    2ab2:	4c2c      	ldr	r4, [pc, #176]	; (2b64 <_ZN12States_Class5StartEh+0x160>)
    2ab4:	47a0      	blx	r4
    2ab6:	4603      	mov	r3, r0
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d010      	beq.n	2ade <_ZN12States_Class5StartEh+0xda>
			{
		
				handleHVACEvent(e);
    2abc:	f107 030c 	add.w	r3, r7, #12
    2ac0:	4619      	mov	r1, r3
    2ac2:	6878      	ldr	r0, [r7, #4]
    2ac4:	4b28      	ldr	r3, [pc, #160]	; (2b68 <_ZN12States_Class5StartEh+0x164>)
    2ac6:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ad0:	f240 1243 	movw	r2, #323	; 0x143
    2ad4:	4293      	cmp	r3, r2
    2ad6:	d1d1      	bne.n	2a7c <_ZN12States_Class5StartEh+0x78>
				{
						done=true;
    2ad8:	2301      	movs	r3, #1
    2ada:	77fb      	strb	r3, [r7, #31]
						break;
    2adc:	e01d      	b.n	2b1a <_ZN12States_Class5StartEh+0x116>
					
				}
			
			}
			else{
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    2ade:	4b20      	ldr	r3, [pc, #128]	; (2b60 <_ZN12States_Class5StartEh+0x15c>)
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	f107 010c 	add.w	r1, r7, #12
    2ae6:	9300      	str	r3, [sp, #0]
    2ae8:	2303      	movs	r3, #3
    2aea:	f44f 7240 	mov.w	r2, #768	; 0x300
    2aee:	4818      	ldr	r0, [pc, #96]	; (2b50 <_ZN12States_Class5StartEh+0x14c>)
    2af0:	4c1e      	ldr	r4, [pc, #120]	; (2b6c <_ZN12States_Class5StartEh+0x168>)
    2af2:	47a0      	blx	r4
    2af4:	4603      	mov	r3, r0
    2af6:	2b00      	cmp	r3, #0
    2af8:	d0c0      	beq.n	2a7c <_ZN12States_Class5StartEh+0x78>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    2afa:	2200      	movs	r2, #0
    2afc:	f44f 7182 	mov.w	r1, #260	; 0x104
    2b00:	480f      	ldr	r0, [pc, #60]	; (2b40 <_ZN12States_Class5StartEh+0x13c>)
    2b02:	4b1b      	ldr	r3, [pc, #108]	; (2b70 <_ZN12States_Class5StartEh+0x16c>)
    2b04:	4798      	blx	r3
					done=true;
    2b06:	2301      	movs	r3, #1
    2b08:	77fb      	strb	r3, [r7, #31]
					break;
    2b0a:	e006      	b.n	2b1a <_ZN12States_Class5StartEh+0x116>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    2b0c:	2200      	movs	r2, #0
    2b0e:	f44f 7182 	mov.w	r1, #260	; 0x104
    2b12:	480b      	ldr	r0, [pc, #44]	; (2b40 <_ZN12States_Class5StartEh+0x13c>)
    2b14:	4b16      	ldr	r3, [pc, #88]	; (2b70 <_ZN12States_Class5StartEh+0x16c>)
    2b16:	4798      	blx	r3
		return;
    2b18:	bf00      	nop
    }



}
    2b1a:	3724      	adds	r7, #36	; 0x24
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bd90      	pop	{r4, r7, pc}
    2b20:	000025e9 	.word	0x000025e9
    2b24:	20000ef8 	.word	0x20000ef8
    2b28:	00013ee5 	.word	0x00013ee5
    2b2c:	0001ca3c 	.word	0x0001ca3c
    2b30:	20003884 	.word	0x20003884
    2b34:	00003c81 	.word	0x00003c81
    2b38:	0001ca38 	.word	0x0001ca38
    2b3c:	00000ae9 	.word	0x00000ae9
    2b40:	20000738 	.word	0x20000738
    2b44:	00000835 	.word	0x00000835
    2b48:	000038bd 	.word	0x000038bd
    2b4c:	000003c5 	.word	0x000003c5
    2b50:	20003284 	.word	0x20003284
    2b54:	00003b61 	.word	0x00003b61
    2b58:	20000fac 	.word	0x20000fac
    2b5c:	00000c87 	.word	0x00000c87
    2b60:	0001db90 	.word	0x0001db90
    2b64:	00013341 	.word	0x00013341
    2b68:	00002b75 	.word	0x00002b75
    2b6c:	00013379 	.word	0x00013379
    2b70:	00000871 	.word	0x00000871

00002b74 <_ZN12States_Class15handleHVACEventER5event>:
	return true;
	}


void States_Class::handleHVACEvent(event& e)
	{
    2b74:	b590      	push	{r4, r7, lr}
    2b76:	b083      	sub	sp, #12
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
    2b7c:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2b84:	687a      	ldr	r2, [r7, #4]
    2b86:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
    2b8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2b8c:	629a      	str	r2, [r3, #40]	; 0x28
	if (hvacState->currentState != kHVACStateResume){
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b96:	f240 122f 	movw	r2, #303	; 0x12f
    2b9a:	4293      	cmp	r3, r2
    2b9c:	d00c      	beq.n	2bb8 <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2ba4:	683a      	ldr	r2, [r7, #0]
    2ba6:	8912      	ldrh	r2, [r2, #8]
    2ba8:	625a      	str	r2, [r3, #36]	; 0x24
		hvacState->stateFlags = e.data.wordData[1];
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2bb0:	683a      	ldr	r2, [r7, #0]
    2bb2:	8952      	ldrh	r2, [r2, #10]
    2bb4:	631a      	str	r2, [r3, #48]	; 0x30
    2bb6:	e007      	b.n	2bc8 <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2bbe:	687a      	ldr	r2, [r7, #4]
    2bc0:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
    2bc4:	6a12      	ldr	r2, [r2, #32]
    2bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2bce:	486d      	ldr	r0, [pc, #436]	; (2d84 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    2bd0:	4b6d      	ldr	r3, [pc, #436]	; (2d88 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    2bd2:	4798      	blx	r3
    2bd4:	4603      	mov	r3, r0
    2bd6:	6363      	str	r3, [r4, #52]	; 0x34
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    2bd8:	6878      	ldr	r0, [r7, #4]
    2bda:	4b6c      	ldr	r3, [pc, #432]	; (2d8c <_ZN12States_Class15handleHVACEventER5event+0x218>)
    2bdc:	4798      	blx	r3

	switch (hvacState->currentState)
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2be6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    2bea:	2b15      	cmp	r3, #21
    2bec:	f200 80c0 	bhi.w	2d70 <_ZN12States_Class15handleHVACEventER5event+0x1fc>
    2bf0:	a201      	add	r2, pc, #4	; (adr r2, 2bf8 <_ZN12States_Class15handleHVACEventER5event+0x84>)
    2bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2bf6:	bf00      	nop
    2bf8:	00002c51 	.word	0x00002c51
    2bfc:	00002c63 	.word	0x00002c63
    2c00:	00002cbd 	.word	0x00002cbd
    2c04:	00002cab 	.word	0x00002cab
    2c08:	00002c75 	.word	0x00002c75
    2c0c:	00002ce1 	.word	0x00002ce1
    2c10:	00002c87 	.word	0x00002c87
    2c14:	00002c99 	.word	0x00002c99
    2c18:	00002ccf 	.word	0x00002ccf
    2c1c:	00002d71 	.word	0x00002d71
    2c20:	00002d71 	.word	0x00002d71
    2c24:	00002cf3 	.word	0x00002cf3
    2c28:	00002d17 	.word	0x00002d17
    2c2c:	00002d71 	.word	0x00002d71
    2c30:	00002d05 	.word	0x00002d05
    2c34:	00002d71 	.word	0x00002d71
    2c38:	00002d29 	.word	0x00002d29
    2c3c:	00002d3b 	.word	0x00002d3b
    2c40:	00002d4d 	.word	0x00002d4d
    2c44:	00002d71 	.word	0x00002d71
    2c48:	00002d71 	.word	0x00002d71
    2c4c:	00002d5f 	.word	0x00002d5f
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c58:	4619      	mov	r1, r3
    2c5a:	6878      	ldr	r0, [r7, #4]
    2c5c:	4b4c      	ldr	r3, [pc, #304]	; (2d90 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    2c5e:	4798      	blx	r3
			break;
    2c60:	e08b      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c6a:	4619      	mov	r1, r3
    2c6c:	6878      	ldr	r0, [r7, #4]
    2c6e:	4b49      	ldr	r3, [pc, #292]	; (2d94 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    2c70:	4798      	blx	r3
			break;
    2c72:	e082      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c7c:	4619      	mov	r1, r3
    2c7e:	6878      	ldr	r0, [r7, #4]
    2c80:	4b45      	ldr	r3, [pc, #276]	; (2d98 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    2c82:	4798      	blx	r3
			break;
    2c84:	e079      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStatePrepareStandbyON:
			StatePrepareStandbyON(hvacState->stateFlags);
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c8e:	4619      	mov	r1, r3
    2c90:	6878      	ldr	r0, [r7, #4]
    2c92:	4b42      	ldr	r3, [pc, #264]	; (2d9c <_ZN12States_Class15handleHVACEventER5event+0x228>)
    2c94:	4798      	blx	r3
			break;
    2c96:	e070      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ca0:	4619      	mov	r1, r3
    2ca2:	6878      	ldr	r0, [r7, #4]
    2ca4:	4b3e      	ldr	r3, [pc, #248]	; (2da0 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    2ca6:	4798      	blx	r3
			break;
    2ca8:	e067      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>
		case kHVACStateStandbyAUTO:
			StateAUTO(hvacState->stateFlags);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cb2:	4619      	mov	r1, r3
    2cb4:	6878      	ldr	r0, [r7, #4]
    2cb6:	4b3b      	ldr	r3, [pc, #236]	; (2da4 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    2cb8:	4798      	blx	r3
			break;
    2cba:	e05e      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>
		case kHVACStateStandbyVENT:
			StateVENT(hvacState->stateFlags);
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cc4:	4619      	mov	r1, r3
    2cc6:	6878      	ldr	r0, [r7, #4]
    2cc8:	4b37      	ldr	r3, [pc, #220]	; (2da8 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    2cca:	4798      	blx	r3
			break;
    2ccc:	e055      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cd6:	4619      	mov	r1, r3
    2cd8:	6878      	ldr	r0, [r7, #4]
    2cda:	4b34      	ldr	r3, [pc, #208]	; (2dac <_ZN12States_Class15handleHVACEventER5event+0x238>)
    2cdc:	4798      	blx	r3
			break;
    2cde:	e04c      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>
		case kHVACStatePrepareStandbyOFF:
			StatePrepareStandbyOFF(hvacState->stateFlags);
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ce8:	4619      	mov	r1, r3
    2cea:	6878      	ldr	r0, [r7, #4]
    2cec:	4b30      	ldr	r3, [pc, #192]	; (2db0 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    2cee:	4798      	blx	r3
			break;
    2cf0:	e043      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cfa:	4619      	mov	r1, r3
    2cfc:	6878      	ldr	r0, [r7, #4]
    2cfe:	4b2d      	ldr	r3, [pc, #180]	; (2db4 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    2d00:	4798      	blx	r3
			break;
    2d02:	e03a      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d0c:	4619      	mov	r1, r3
    2d0e:	6878      	ldr	r0, [r7, #4]
    2d10:	4b29      	ldr	r3, [pc, #164]	; (2db8 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    2d12:	4798      	blx	r3
			break;
    2d14:	e031      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d1e:	4619      	mov	r1, r3
    2d20:	6878      	ldr	r0, [r7, #4]
    2d22:	4b26      	ldr	r3, [pc, #152]	; (2dbc <_ZN12States_Class15handleHVACEventER5event+0x248>)
    2d24:	4798      	blx	r3
			break;
    2d26:	e028      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d30:	4619      	mov	r1, r3
    2d32:	6878      	ldr	r0, [r7, #4]
    2d34:	4b22      	ldr	r3, [pc, #136]	; (2dc0 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    2d36:	4798      	blx	r3
			break;
    2d38:	e01f      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d42:	4619      	mov	r1, r3
    2d44:	6878      	ldr	r0, [r7, #4]
    2d46:	4b1f      	ldr	r3, [pc, #124]	; (2dc4 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    2d48:	4798      	blx	r3
			break;
    2d4a:	e016      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d54:	4619      	mov	r1, r3
    2d56:	6878      	ldr	r0, [r7, #4]
    2d58:	4b1b      	ldr	r3, [pc, #108]	; (2dc8 <_ZN12States_Class15handleHVACEventER5event+0x254>)
    2d5a:	4798      	blx	r3
			break;
    2d5c:	e00d      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d66:	4619      	mov	r1, r3
    2d68:	6878      	ldr	r0, [r7, #4]
    2d6a:	4b18      	ldr	r3, [pc, #96]	; (2dcc <_ZN12States_Class15handleHVACEventER5event+0x258>)
    2d6c:	4798      	blx	r3
		break;
    2d6e:	e004      	b.n	2d7a <_ZN12States_Class15handleHVACEventER5event+0x206>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    2d70:	2102      	movs	r1, #2
    2d72:	6878      	ldr	r0, [r7, #4]
    2d74:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    2d76:	4798      	blx	r3
			break;
    2d78:	bf00      	nop
		}
	}
    2d7a:	bf00      	nop
    2d7c:	370c      	adds	r7, #12
    2d7e:	46bd      	mov	sp, r7
    2d80:	bd90      	pop	{r4, r7, pc}
    2d82:	bf00      	nop
    2d84:	20000ef8 	.word	0x20000ef8
    2d88:	00013fdd 	.word	0x00013fdd
    2d8c:	00003931 	.word	0x00003931
    2d90:	00002dd1 	.word	0x00002dd1
    2d94:	00002e41 	.word	0x00002e41
    2d98:	00002ef5 	.word	0x00002ef5
    2d9c:	00003545 	.word	0x00003545
    2da0:	00003625 	.word	0x00003625
    2da4:	00003069 	.word	0x00003069
    2da8:	0000327d 	.word	0x0000327d
    2dac:	00003699 	.word	0x00003699
    2db0:	000035cd 	.word	0x000035cd
    2db4:	000036d1 	.word	0x000036d1
    2db8:	0000371d 	.word	0x0000371d
    2dbc:	0000379d 	.word	0x0000379d
    2dc0:	000037dd 	.word	0x000037dd
    2dc4:	00003815 	.word	0x00003815
    2dc8:	0000384d 	.word	0x0000384d
    2dcc:	00003755 	.word	0x00003755

00002dd0 <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b088      	sub	sp, #32
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]
    2dd8:	6039      	str	r1, [r7, #0]
	event	e;
    2dda:	f107 030c 	add.w	r3, r7, #12
    2dde:	4618      	mov	r0, r3
    2de0:	4b12      	ldr	r3, [pc, #72]	; (2e2c <_ZN12States_Class15StateInitializeEm+0x5c>)
    2de2:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2dea:	f44f 7297 	mov.w	r2, #302	; 0x12e
    2dee:	625a      	str	r2, [r3, #36]	; 0x24
   	uint16	selfTestResult(kHVACNoError);
    2df0:	2300      	movs	r3, #0
    2df2:	83fb      	strh	r3, [r7, #30]
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    2df4:	4b0e      	ldr	r3, [pc, #56]	; (2e30 <_ZN12States_Class15StateInitializeEm+0x60>)
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d00e      	beq.n	2e1c <_ZN12States_Class15StateInitializeEm+0x4c>

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    2dfe:	6878      	ldr	r0, [r7, #4]
    2e00:	4b0c      	ldr	r3, [pc, #48]	; (2e34 <_ZN12States_Class15StateInitializeEm+0x64>)
    2e02:	4798      	blx	r3
    2e04:	4603      	mov	r3, r0
    2e06:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    2e08:	8bfb      	ldrh	r3, [r7, #30]
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d10a      	bne.n	2e24 <_ZN12States_Class15StateInitializeEm+0x54>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    2e0e:	2200      	movs	r2, #0
    2e10:	f44f 7199 	mov.w	r1, #306	; 0x132
    2e14:	6878      	ldr	r0, [r7, #4]
    2e16:	4b08      	ldr	r3, [pc, #32]	; (2e38 <_ZN12States_Class15StateInitializeEm+0x68>)
    2e18:	4798      	blx	r3
	}



	
	}
    2e1a:	e003      	b.n	2e24 <_ZN12States_Class15StateInitializeEm+0x54>
		Stop(0);
    2e1c:	2100      	movs	r1, #0
    2e1e:	6878      	ldr	r0, [r7, #4]
    2e20:	4b06      	ldr	r3, [pc, #24]	; (2e3c <_ZN12States_Class15StateInitializeEm+0x6c>)
    2e22:	4798      	blx	r3
	}
    2e24:	bf00      	nop
    2e26:	3720      	adds	r7, #32
    2e28:	46bd      	mov	sp, r7
    2e2a:	bd80      	pop	{r7, pc}
    2e2c:	000003c5 	.word	0x000003c5
    2e30:	20000f98 	.word	0x20000f98
    2e34:	0000390d 	.word	0x0000390d
    2e38:	000038bd 	.word	0x000038bd
    2e3c:	000039b1 	.word	0x000039b1

00002e40 <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    2e40:	b580      	push	{r7, lr}
    2e42:	b088      	sub	sp, #32
    2e44:	af00      	add	r7, sp, #0
    2e46:	6078      	str	r0, [r7, #4]
    2e48:	6039      	str	r1, [r7, #0]
	event	e;
    2e4a:	f107 030c 	add.w	r3, r7, #12
    2e4e:	4618      	mov	r0, r3
    2e50:	4b23      	ldr	r3, [pc, #140]	; (2ee0 <_ZN12States_Class11StateResumeEm+0xa0>)
    2e52:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e5c:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    2e5e:	2300      	movs	r3, #0
    2e60:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    2e62:	8bbb      	ldrh	r3, [r7, #28]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d128      	bne.n	2eba <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e70:	f240 1239 	movw	r2, #313	; 0x139
    2e74:	4293      	cmp	r3, r2
    2e76:	d003      	beq.n	2e80 <_ZN12States_Class11StateResumeEm+0x40>
    2e78:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
    2e7c:	d00b      	beq.n	2e96 <_ZN12States_Class11StateResumeEm+0x56>
    2e7e:	e011      	b.n	2ea4 <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e88:	b29b      	uxth	r3, r3
    2e8a:	2201      	movs	r2, #1
    2e8c:	4619      	mov	r1, r3
    2e8e:	6878      	ldr	r0, [r7, #4]
    2e90:	4b14      	ldr	r3, [pc, #80]	; (2ee4 <_ZN12States_Class11StateResumeEm+0xa4>)
    2e92:	4798      	blx	r3
            break;
    2e94:	e011      	b.n	2eba <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    2e96:	2200      	movs	r2, #0
    2e98:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2e9c:	6878      	ldr	r0, [r7, #4]
    2e9e:	4b11      	ldr	r3, [pc, #68]	; (2ee4 <_ZN12States_Class11StateResumeEm+0xa4>)
    2ea0:	4798      	blx	r3
            break;
    2ea2:	e00a      	b.n	2eba <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2eac:	b29b      	uxth	r3, r3
    2eae:	2200      	movs	r2, #0
    2eb0:	4619      	mov	r1, r3
    2eb2:	6878      	ldr	r0, [r7, #4]
    2eb4:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <_ZN12States_Class11StateResumeEm+0xa4>)
    2eb6:	4798      	blx	r3
            break;
    2eb8:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2ec0:	7ffa      	ldrb	r2, [r7, #31]
    2ec2:	625a      	str	r2, [r3, #36]	; 0x24

	listener.CheckEvent();
    2ec4:	4808      	ldr	r0, [pc, #32]	; (2ee8 <_ZN12States_Class11StateResumeEm+0xa8>)
    2ec6:	4b09      	ldr	r3, [pc, #36]	; (2eec <_ZN12States_Class11StateResumeEm+0xac>)
    2ec8:	4798      	blx	r3
	listener.SendEventSelf(e);
    2eca:	f107 030c 	add.w	r3, r7, #12
    2ece:	4619      	mov	r1, r3
    2ed0:	4805      	ldr	r0, [pc, #20]	; (2ee8 <_ZN12States_Class11StateResumeEm+0xa8>)
    2ed2:	4b07      	ldr	r3, [pc, #28]	; (2ef0 <_ZN12States_Class11StateResumeEm+0xb0>)
    2ed4:	4798      	blx	r3
	}
    2ed6:	bf00      	nop
    2ed8:	3720      	adds	r7, #32
    2eda:	46bd      	mov	sp, r7
    2edc:	bd80      	pop	{r7, pc}
    2ede:	bf00      	nop
    2ee0:	000003c5 	.word	0x000003c5
    2ee4:	000038bd 	.word	0x000038bd
    2ee8:	20003284 	.word	0x20003284
    2eec:	00013641 	.word	0x00013641
    2ef0:	0001353d 	.word	0x0001353d

00002ef4 <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
{
    2ef4:	b590      	push	{r4, r7, lr}
    2ef6:	b089      	sub	sp, #36	; 0x24
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
    2efc:	6039      	str	r1, [r7, #0]
	event	e;
    2efe:	f107 030c 	add.w	r3, r7, #12
    2f02:	4618      	mov	r0, r3
    2f04:	4b4e      	ldr	r3, [pc, #312]	; (3040 <_ZN12States_Class15StateStandbyOFFEm+0x14c>)
    2f06:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2f0e:	f44f 7299 	mov.w	r2, #306	; 0x132
    2f12:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_OFF;
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    2f1a:	2200      	movs	r2, #0
    2f1c:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=false;
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    2f24:	7f53      	ldrb	r3, [r2, #29]
    2f26:	f36f 0300 	bfc	r3, #0, #1
    2f2a:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    2f2c:	2300      	movs	r3, #0
    2f2e:	77fb      	strb	r3, [r7, #31]
#endif




	listener.eventHandler=&States_Class::CheckEvents;
    2f30:	4b44      	ldr	r3, [pc, #272]	; (3044 <_ZN12States_Class15StateStandbyOFFEm+0x150>)
    2f32:	4a45      	ldr	r2, [pc, #276]	; (3048 <_ZN12States_Class15StateStandbyOFFEm+0x154>)
    2f34:	615a      	str	r2, [r3, #20]
	
	do 
	{
		if (fvc.fv->IsPositionChanged())
    2f36:	4b45      	ldr	r3, [pc, #276]	; (304c <_ZN12States_Class15StateStandbyOFFEm+0x158>)
    2f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    2f3a:	4618      	mov	r0, r3
    2f3c:	4b44      	ldr	r3, [pc, #272]	; (3050 <_ZN12States_Class15StateStandbyOFFEm+0x15c>)
    2f3e:	4798      	blx	r3
    2f40:	4603      	mov	r3, r0
    2f42:	2b00      	cmp	r3, #0
    2f44:	d00e      	beq.n	2f64 <_ZN12States_Class15StateStandbyOFFEm+0x70>
		{
			arinc.ar->SaveFlapperValveAngle(fvc.fv->ReadActualPosition());
    2f46:	4b43      	ldr	r3, [pc, #268]	; (3054 <_ZN12States_Class15StateStandbyOFFEm+0x160>)
    2f48:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    2f4c:	461c      	mov	r4, r3
    2f4e:	4b3f      	ldr	r3, [pc, #252]	; (304c <_ZN12States_Class15StateStandbyOFFEm+0x158>)
    2f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    2f52:	4618      	mov	r0, r3
    2f54:	4b40      	ldr	r3, [pc, #256]	; (3058 <_ZN12States_Class15StateStandbyOFFEm+0x164>)
    2f56:	4798      	blx	r3
    2f58:	4603      	mov	r3, r0
    2f5a:	4619      	mov	r1, r3
    2f5c:	4620      	mov	r0, r4
    2f5e:	4b3f      	ldr	r3, [pc, #252]	; (305c <_ZN12States_Class15StateStandbyOFFEm+0x168>)
    2f60:	4798      	blx	r3
    2f62:	e065      	b.n	3030 <_ZN12States_Class15StateStandbyOFFEm+0x13c>
		}
		else
		{
			if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    2f64:	f107 030c 	add.w	r3, r7, #12
    2f68:	2208      	movs	r2, #8
    2f6a:	4619      	mov	r1, r3
    2f6c:	6878      	ldr	r0, [r7, #4]
    2f6e:	4b3c      	ldr	r3, [pc, #240]	; (3060 <_ZN12States_Class15StateStandbyOFFEm+0x16c>)
    2f70:	4798      	blx	r3
    2f72:	4603      	mov	r3, r0
    2f74:	2b00      	cmp	r3, #0
    2f76:	d05b      	beq.n	3030 <_ZN12States_Class15StateStandbyOFFEm+0x13c>
			{
				switch(e.eventClass){
    2f78:	89bb      	ldrh	r3, [r7, #12]
    2f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2f7e:	d006      	beq.n	2f8e <_ZN12States_Class15StateStandbyOFFEm+0x9a>
    2f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2f84:	d01f      	beq.n	2fc6 <_ZN12States_Class15StateStandbyOFFEm+0xd2>
    2f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2f8a:	d00e      	beq.n	2faa <_ZN12States_Class15StateStandbyOFFEm+0xb6>
						break;
					}
					
					break;
					default:
					break;
    2f8c:	e050      	b.n	3030 <_ZN12States_Class15StateStandbyOFFEm+0x13c>
						switch (e.eventType){
    2f8e:	89fb      	ldrh	r3, [r7, #14]
    2f90:	2b03      	cmp	r3, #3
    2f92:	d000      	beq.n	2f96 <_ZN12States_Class15StateStandbyOFFEm+0xa2>
							break;
    2f94:	e008      	b.n	2fa8 <_ZN12States_Class15StateStandbyOFFEm+0xb4>
							prepareStateChangeEvent(kHVACStateLeaving);
    2f96:	2200      	movs	r2, #0
    2f98:	f240 1143 	movw	r1, #323	; 0x143
    2f9c:	6878      	ldr	r0, [r7, #4]
    2f9e:	4b31      	ldr	r3, [pc, #196]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    2fa0:	4798      	blx	r3
							done=true;
    2fa2:	2301      	movs	r3, #1
    2fa4:	77fb      	strb	r3, [r7, #31]
							break;
    2fa6:	bf00      	nop
						break;
    2fa8:	e042      	b.n	3030 <_ZN12States_Class15StateStandbyOFFEm+0x13c>
					switch (e.eventType){
    2faa:	89fb      	ldrh	r3, [r7, #14]
    2fac:	2b03      	cmp	r3, #3
    2fae:	d000      	beq.n	2fb2 <_ZN12States_Class15StateStandbyOFFEm+0xbe>
							break;
    2fb0:	e008      	b.n	2fc4 <_ZN12States_Class15StateStandbyOFFEm+0xd0>
							prepareStateChangeEvent(kHVACStateLeaving);
    2fb2:	2200      	movs	r2, #0
    2fb4:	f240 1143 	movw	r1, #323	; 0x143
    2fb8:	6878      	ldr	r0, [r7, #4]
    2fba:	4b2a      	ldr	r3, [pc, #168]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    2fbc:	4798      	blx	r3
							done=true;
    2fbe:	2301      	movs	r3, #1
    2fc0:	77fb      	strb	r3, [r7, #31]
							break;
    2fc2:	bf00      	nop
					break;
    2fc4:	e034      	b.n	3030 <_ZN12States_Class15StateStandbyOFFEm+0x13c>
					switch (e.eventType){
    2fc6:	89fb      	ldrh	r3, [r7, #14]
    2fc8:	3b04      	subs	r3, #4
    2fca:	2b03      	cmp	r3, #3
    2fcc:	d82e      	bhi.n	302c <_ZN12States_Class15StateStandbyOFFEm+0x138>
    2fce:	a201      	add	r2, pc, #4	; (adr r2, 2fd4 <_ZN12States_Class15StateStandbyOFFEm+0xe0>)
    2fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2fd4:	00002fe5 	.word	0x00002fe5
    2fd8:	00002ff7 	.word	0x00002ff7
    2fdc:	00003009 	.word	0x00003009
    2fe0:	0000301b 	.word	0x0000301b
							prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    2fe4:	2200      	movs	r2, #0
    2fe6:	f44f 719a 	mov.w	r1, #308	; 0x134
    2fea:	6878      	ldr	r0, [r7, #4]
    2fec:	4b1d      	ldr	r3, [pc, #116]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    2fee:	4798      	blx	r3
							done=true;
    2ff0:	2301      	movs	r3, #1
    2ff2:	77fb      	strb	r3, [r7, #31]
							break;
    2ff4:	e01b      	b.n	302e <_ZN12States_Class15StateStandbyOFFEm+0x13a>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    2ff6:	2200      	movs	r2, #0
    2ff8:	f240 1133 	movw	r1, #307	; 0x133
    2ffc:	6878      	ldr	r0, [r7, #4]
    2ffe:	4b19      	ldr	r3, [pc, #100]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    3000:	4798      	blx	r3
							done=true;
    3002:	2301      	movs	r3, #1
    3004:	77fb      	strb	r3, [r7, #31]
							break;
    3006:	e012      	b.n	302e <_ZN12States_Class15StateStandbyOFFEm+0x13a>
							prepareStateChangeEvent(kHVACStateStandbyAUTO);
    3008:	2200      	movs	r2, #0
    300a:	f240 1131 	movw	r1, #305	; 0x131
    300e:	6878      	ldr	r0, [r7, #4]
    3010:	4b14      	ldr	r3, [pc, #80]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    3012:	4798      	blx	r3
							done=true;
    3014:	2301      	movs	r3, #1
    3016:	77fb      	strb	r3, [r7, #31]
							break;
    3018:	e009      	b.n	302e <_ZN12States_Class15StateStandbyOFFEm+0x13a>
							prepareStateChangeEvent(kHVACStateStandbyVENT);
    301a:	2200      	movs	r2, #0
    301c:	f44f 7198 	mov.w	r1, #304	; 0x130
    3020:	6878      	ldr	r0, [r7, #4]
    3022:	4b10      	ldr	r3, [pc, #64]	; (3064 <_ZN12States_Class15StateStandbyOFFEm+0x170>)
    3024:	4798      	blx	r3
							done=true;
    3026:	2301      	movs	r3, #1
    3028:	77fb      	strb	r3, [r7, #31]
							break;
    302a:	e000      	b.n	302e <_ZN12States_Class15StateStandbyOFFEm+0x13a>
						break;
    302c:	bf00      	nop
					break;
    302e:	bf00      	nop
					
				}
			}
		}
		
	} while (!done);
    3030:	7ffb      	ldrb	r3, [r7, #31]
    3032:	2b00      	cmp	r3, #0
    3034:	d100      	bne.n	3038 <_ZN12States_Class15StateStandbyOFFEm+0x144>
	do 
    3036:	e77e      	b.n	2f36 <_ZN12States_Class15StateStandbyOFFEm+0x42>
		
	



}
    3038:	bf00      	nop
    303a:	3724      	adds	r7, #36	; 0x24
    303c:	46bd      	mov	sp, r7
    303e:	bd90      	pop	{r4, r7, pc}
    3040:	000003c5 	.word	0x000003c5
    3044:	20003284 	.word	0x20003284
    3048:	00003b61 	.word	0x00003b61
    304c:	20005598 	.word	0x20005598
    3050:	00016f09 	.word	0x00016f09
    3054:	200024a8 	.word	0x200024a8
    3058:	00016e89 	.word	0x00016e89
    305c:	00011fa9 	.word	0x00011fa9
    3060:	00003885 	.word	0x00003885
    3064:	000038bd 	.word	0x000038bd

00003068 <_ZN12States_Class9StateAUTOEm>:
	
void States_Class::StateAUTO(uint32 flags)
{
    3068:	b580      	push	{r7, lr}
    306a:	b088      	sub	sp, #32
    306c:	af00      	add	r7, sp, #0
    306e:	6078      	str	r0, [r7, #4]
    3070:	6039      	str	r1, [r7, #0]
	event	e;
    3072:	f107 030c 	add.w	r3, r7, #12
    3076:	4618      	mov	r0, r3
    3078:	4b74      	ldr	r3, [pc, #464]	; (324c <_ZN12States_Class9StateAUTOEm+0x1e4>)
    307a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyAUTO;
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3082:	f240 1231 	movw	r2, #305	; 0x131
    3086:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_AUTO;
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    308e:	2202      	movs	r2, #2
    3090:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    3092:	687b      	ldr	r3, [r7, #4]
    3094:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3098:	7f53      	ldrb	r3, [r2, #29]
    309a:	f043 0301 	orr.w	r3, r3, #1
    309e:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    30a0:	2300      	movs	r3, #0
    30a2:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	2200      	movs	r2, #0
    30a8:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
	gotHVACEvent=false;
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	2200      	movs	r2, #0
    30b0:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
	
	usb << "handleStateStandbyOFF" << NEWLINE;
	
	#endif

	if (hvacState->lastState!=kHVACStateStandbyAUTO)
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    30ba:	6a1b      	ldr	r3, [r3, #32]
    30bc:	f240 1231 	movw	r2, #305	; 0x131
    30c0:	4293      	cmp	r3, r2
    30c2:	d017      	beq.n	30f4 <_ZN12States_Class9StateAUTOEm+0x8c>
	{
 		fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    30c4:	4b62      	ldr	r3, [pc, #392]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    30c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    30c8:	210c      	movs	r1, #12
    30ca:	4618      	mov	r0, r3
    30cc:	4b61      	ldr	r3, [pc, #388]	; (3254 <_ZN12States_Class9StateAUTOEm+0x1ec>)
    30ce:	4798      	blx	r3
		fans.evaporator[0]->SetEnable(true);
    30d0:	4b5f      	ldr	r3, [pc, #380]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    30d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    30d4:	2101      	movs	r1, #1
    30d6:	4618      	mov	r0, r3
    30d8:	4b5f      	ldr	r3, [pc, #380]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    30da:	4798      	blx	r3
		fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    30dc:	4b5c      	ldr	r3, [pc, #368]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    30de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    30e0:	210c      	movs	r1, #12
    30e2:	4618      	mov	r0, r3
    30e4:	4b5b      	ldr	r3, [pc, #364]	; (3254 <_ZN12States_Class9StateAUTOEm+0x1ec>)
    30e6:	4798      	blx	r3
		fans.evaporator[1]->SetEnable(true);
    30e8:	4b59      	ldr	r3, [pc, #356]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    30ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    30ec:	2101      	movs	r1, #1
    30ee:	4618      	mov	r0, r3
    30f0:	4b59      	ldr	r3, [pc, #356]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    30f2:	4798      	blx	r3
	//	fans.condesator->SetPWM(MINIMUN_FLOW_AIR);
	//	fans.condesator->SetEnable(true);
	}
		
	listener.eventHandler=&States_Class::CheckEvents;
    30f4:	4b59      	ldr	r3, [pc, #356]	; (325c <_ZN12States_Class9StateAUTOEm+0x1f4>)
    30f6:	4a5a      	ldr	r2, [pc, #360]	; (3260 <_ZN12States_Class9StateAUTOEm+0x1f8>)
    30f8:	615a      	str	r2, [r3, #20]
	while(!done){
    30fa:	7ffb      	ldrb	r3, [r7, #31]
    30fc:	2b00      	cmp	r3, #0
    30fe:	f040 809a 	bne.w	3236 <_ZN12States_Class9StateAUTOEm+0x1ce>
// 		do
// 		{
// 				
// 		}while(IsNewFlapperValveSetpoint());
		ControlTemperatureSetpoint(0);
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2100      	movs	r1, #0
    3106:	4618      	mov	r0, r3
    3108:	4b56      	ldr	r3, [pc, #344]	; (3264 <_ZN12States_Class9StateAUTOEm+0x1fc>)
    310a:	4798      	blx	r3
	
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    310c:	f107 030c 	add.w	r3, r7, #12
    3110:	2208      	movs	r2, #8
    3112:	4619      	mov	r1, r3
    3114:	6878      	ldr	r0, [r7, #4]
    3116:	4b54      	ldr	r3, [pc, #336]	; (3268 <_ZN12States_Class9StateAUTOEm+0x200>)
    3118:	4798      	blx	r3
    311a:	4603      	mov	r3, r0
    311c:	2b00      	cmp	r3, #0
    311e:	f000 8087 	beq.w	3230 <_ZN12States_Class9StateAUTOEm+0x1c8>
		{
			switch(e.eventClass){
    3122:	89bb      	ldrh	r3, [r7, #12]
    3124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3128:	d006      	beq.n	3138 <_ZN12States_Class9StateAUTOEm+0xd0>
    312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    312e:	d025      	beq.n	317c <_ZN12States_Class9StateAUTOEm+0x114>
    3130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3134:	d011      	beq.n	315a <_ZN12States_Class9StateAUTOEm+0xf2>
					break;
				}
						
				break;
				default:
				break;
    3136:	e07d      	b.n	3234 <_ZN12States_Class9StateAUTOEm+0x1cc>
					switch (e.eventType){
    3138:	89fb      	ldrh	r3, [r7, #14]
    313a:	2b03      	cmp	r3, #3
    313c:	d000      	beq.n	3140 <_ZN12States_Class9StateAUTOEm+0xd8>
						break;
    313e:	e00b      	b.n	3158 <_ZN12States_Class9StateAUTOEm+0xf0>
							saveCurrentState();
    3140:	6878      	ldr	r0, [r7, #4]
    3142:	4b4a      	ldr	r3, [pc, #296]	; (326c <_ZN12States_Class9StateAUTOEm+0x204>)
    3144:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3146:	2200      	movs	r2, #0
    3148:	f240 1143 	movw	r1, #323	; 0x143
    314c:	6878      	ldr	r0, [r7, #4]
    314e:	4b48      	ldr	r3, [pc, #288]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    3150:	4798      	blx	r3
							done=true;
    3152:	2301      	movs	r3, #1
    3154:	77fb      	strb	r3, [r7, #31]
						break;
    3156:	bf00      	nop
					break;
    3158:	e06c      	b.n	3234 <_ZN12States_Class9StateAUTOEm+0x1cc>
					switch (e.eventType){
    315a:	89fb      	ldrh	r3, [r7, #14]
    315c:	2b03      	cmp	r3, #3
    315e:	d000      	beq.n	3162 <_ZN12States_Class9StateAUTOEm+0xfa>
						break;
    3160:	e00b      	b.n	317a <_ZN12States_Class9StateAUTOEm+0x112>
							saveCurrentState();
    3162:	6878      	ldr	r0, [r7, #4]
    3164:	4b41      	ldr	r3, [pc, #260]	; (326c <_ZN12States_Class9StateAUTOEm+0x204>)
    3166:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3168:	2200      	movs	r2, #0
    316a:	f240 1143 	movw	r1, #323	; 0x143
    316e:	6878      	ldr	r0, [r7, #4]
    3170:	4b3f      	ldr	r3, [pc, #252]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    3172:	4798      	blx	r3
							done=true;
    3174:	2301      	movs	r3, #1
    3176:	77fb      	strb	r3, [r7, #31]
						break;
    3178:	bf00      	nop
					break;
    317a:	e05b      	b.n	3234 <_ZN12States_Class9StateAUTOEm+0x1cc>
				switch (e.eventType){
    317c:	89fb      	ldrh	r3, [r7, #14]
    317e:	2b07      	cmp	r3, #7
    3180:	d01f      	beq.n	31c2 <_ZN12States_Class9StateAUTOEm+0x15a>
    3182:	2b09      	cmp	r3, #9
    3184:	d038      	beq.n	31f8 <_ZN12States_Class9StateAUTOEm+0x190>
    3186:	2b05      	cmp	r3, #5
    3188:	d000      	beq.n	318c <_ZN12States_Class9StateAUTOEm+0x124>
					break;
    318a:	e050      	b.n	322e <_ZN12States_Class9StateAUTOEm+0x1c6>
					prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    318c:	2200      	movs	r2, #0
    318e:	f240 1133 	movw	r1, #307	; 0x133
    3192:	6878      	ldr	r0, [r7, #4]
    3194:	4b36      	ldr	r3, [pc, #216]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    3196:	4798      	blx	r3
					fans.evaporator[0]->SetEnable(false);
    3198:	4b2d      	ldr	r3, [pc, #180]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    319c:	2100      	movs	r1, #0
    319e:	4618      	mov	r0, r3
    31a0:	4b2d      	ldr	r3, [pc, #180]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    31a2:	4798      	blx	r3
					fans.evaporator[1]->SetEnable(false);
    31a4:	4b2a      	ldr	r3, [pc, #168]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    31a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    31a8:	2100      	movs	r1, #0
    31aa:	4618      	mov	r0, r3
    31ac:	4b2a      	ldr	r3, [pc, #168]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    31ae:	4798      	blx	r3
					fans.condesator->SetEnable(false);
    31b0:	4b27      	ldr	r3, [pc, #156]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    31b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    31b4:	2100      	movs	r1, #0
    31b6:	4618      	mov	r0, r3
    31b8:	4b2e      	ldr	r3, [pc, #184]	; (3274 <_ZN12States_Class9StateAUTOEm+0x20c>)
    31ba:	4798      	blx	r3
					done=true;
    31bc:	2301      	movs	r3, #1
    31be:	77fb      	strb	r3, [r7, #31]
					break;
    31c0:	e035      	b.n	322e <_ZN12States_Class9StateAUTOEm+0x1c6>
					prepareStateChangeEvent(kHVACStateStandbyVENT);
    31c2:	2200      	movs	r2, #0
    31c4:	f44f 7198 	mov.w	r1, #304	; 0x130
    31c8:	6878      	ldr	r0, [r7, #4]
    31ca:	4b29      	ldr	r3, [pc, #164]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    31cc:	4798      	blx	r3
						fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    31ce:	4b20      	ldr	r3, [pc, #128]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    31d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    31d2:	210c      	movs	r1, #12
    31d4:	4618      	mov	r0, r3
    31d6:	4b1f      	ldr	r3, [pc, #124]	; (3254 <_ZN12States_Class9StateAUTOEm+0x1ec>)
    31d8:	4798      	blx	r3
						fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    31da:	4b1d      	ldr	r3, [pc, #116]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    31dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    31de:	210c      	movs	r1, #12
    31e0:	4618      	mov	r0, r3
    31e2:	4b1c      	ldr	r3, [pc, #112]	; (3254 <_ZN12States_Class9StateAUTOEm+0x1ec>)
    31e4:	4798      	blx	r3
						fans.condesator->SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
    31e6:	4b1a      	ldr	r3, [pc, #104]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    31e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    31ea:	2110      	movs	r1, #16
    31ec:	4618      	mov	r0, r3
    31ee:	4b22      	ldr	r3, [pc, #136]	; (3278 <_ZN12States_Class9StateAUTOEm+0x210>)
    31f0:	4798      	blx	r3
					done=true;
    31f2:	2301      	movs	r3, #1
    31f4:	77fb      	strb	r3, [r7, #31]
					break;
    31f6:	e01a      	b.n	322e <_ZN12States_Class9StateAUTOEm+0x1c6>
					prepareStateChangeEvent(kHVACStateStandbyOFF);
    31f8:	2200      	movs	r2, #0
    31fa:	f44f 7199 	mov.w	r1, #306	; 0x132
    31fe:	6878      	ldr	r0, [r7, #4]
    3200:	4b1b      	ldr	r3, [pc, #108]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    3202:	4798      	blx	r3
					fans.evaporator[0]->SetEnable(false);
    3204:	4b12      	ldr	r3, [pc, #72]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    3206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3208:	2100      	movs	r1, #0
    320a:	4618      	mov	r0, r3
    320c:	4b12      	ldr	r3, [pc, #72]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    320e:	4798      	blx	r3
					fans.evaporator[1]->SetEnable(false);
    3210:	4b0f      	ldr	r3, [pc, #60]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    3212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3214:	2100      	movs	r1, #0
    3216:	4618      	mov	r0, r3
    3218:	4b0f      	ldr	r3, [pc, #60]	; (3258 <_ZN12States_Class9StateAUTOEm+0x1f0>)
    321a:	4798      	blx	r3
					fans.condesator->SetEnable(false);
    321c:	4b0c      	ldr	r3, [pc, #48]	; (3250 <_ZN12States_Class9StateAUTOEm+0x1e8>)
    321e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3220:	2100      	movs	r1, #0
    3222:	4618      	mov	r0, r3
    3224:	4b13      	ldr	r3, [pc, #76]	; (3274 <_ZN12States_Class9StateAUTOEm+0x20c>)
    3226:	4798      	blx	r3
					done=true;
    3228:	2301      	movs	r3, #1
    322a:	77fb      	strb	r3, [r7, #31]
					break;
    322c:	bf00      	nop
				break;
    322e:	e001      	b.n	3234 <_ZN12States_Class9StateAUTOEm+0x1cc>
			
			
		}
		else
		{
			done=false;
    3230:	2300      	movs	r3, #0
    3232:	77fb      	strb	r3, [r7, #31]
	while(!done){
    3234:	e761      	b.n	30fa <_ZN12States_Class9StateAUTOEm+0x92>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3236:	2200      	movs	r2, #0
    3238:	f240 1143 	movw	r1, #323	; 0x143
    323c:	6878      	ldr	r0, [r7, #4]
    323e:	4b0c      	ldr	r3, [pc, #48]	; (3270 <_ZN12States_Class9StateAUTOEm+0x208>)
    3240:	4798      	blx	r3

}
    3242:	bf00      	nop
    3244:	3720      	adds	r7, #32
    3246:	46bd      	mov	sp, r7
    3248:	bd80      	pop	{r7, pc}
    324a:	bf00      	nop
    324c:	000003c5 	.word	0x000003c5
    3250:	20003b28 	.word	0x20003b28
    3254:	0001525d 	.word	0x0001525d
    3258:	00015239 	.word	0x00015239
    325c:	20003284 	.word	0x20003284
    3260:	00003b61 	.word	0x00003b61
    3264:	000041f1 	.word	0x000041f1
    3268:	00003885 	.word	0x00003885
    326c:	00003931 	.word	0x00003931
    3270:	000038bd 	.word	0x000038bd
    3274:	00014eb9 	.word	0x00014eb9
    3278:	00014ee9 	.word	0x00014ee9

0000327c <_ZN12States_Class9StateVENTEm>:

void States_Class::StateVENT(uint32 flags)
{
    327c:	b580      	push	{r7, lr}
    327e:	b088      	sub	sp, #32
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
    3284:	6039      	str	r1, [r7, #0]
	event	e;
    3286:	f107 030c 	add.w	r3, r7, #12
    328a:	4618      	mov	r0, r3
    328c:	4b9d      	ldr	r3, [pc, #628]	; (3504 <_ZN12States_Class9StateVENTEm+0x288>)
    328e:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyVENT;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3296:	f44f 7298 	mov.w	r2, #304	; 0x130
    329a:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=COMMAND_MODE_VENT;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    32a2:	2201      	movs	r2, #1
    32a4:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    32ac:	7f53      	ldrb	r3, [r2, #29]
    32ae:	f043 0301 	orr.w	r3, r3, #1
    32b2:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    32b4:	2300      	movs	r3, #0
    32b6:	77fb      	strb	r3, [r7, #31]



// 	fans.evaporator[0]->SetPWM(MINIMUN_FLOW_AIR);
// 	fans.evaporator[0]->SetEnable(true);
	listener.eventHandler=&States_Class::CheckEvents;
    32b8:	4b93      	ldr	r3, [pc, #588]	; (3508 <_ZN12States_Class9StateVENTEm+0x28c>)
    32ba:	4a94      	ldr	r2, [pc, #592]	; (350c <_ZN12States_Class9StateVENTEm+0x290>)
    32bc:	615a      	str	r2, [r3, #20]
	fans.evaporator[0]->ReadStatus();
    32be:	4b94      	ldr	r3, [pc, #592]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    32c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    32c2:	4618      	mov	r0, r3
    32c4:	4b93      	ldr	r3, [pc, #588]	; (3514 <_ZN12States_Class9StateVENTEm+0x298>)
    32c6:	4798      	blx	r3
	fans.evaporator[1]->ReadStatus();
    32c8:	4b91      	ldr	r3, [pc, #580]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    32ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    32cc:	4618      	mov	r0, r3
    32ce:	4b91      	ldr	r3, [pc, #580]	; (3514 <_ZN12States_Class9StateVENTEm+0x298>)
    32d0:	4798      	blx	r3
	if ((fans.evaporator[0]->evaporatorFansStatus.inputs->niAlcEvaFanExtFault))
    32d2:	4b8f      	ldr	r3, [pc, #572]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    32d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    32d6:	781b      	ldrb	r3, [r3, #0]
    32d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    32dc:	b2db      	uxtb	r3, r3
    32de:	2b00      	cmp	r3, #0
    32e0:	d01e      	beq.n	3320 <_ZN12States_Class9StateVENTEm+0xa4>
	{
		for ( uint8_t i= 0; i < 2; i++)
    32e2:	2300      	movs	r3, #0
    32e4:	77bb      	strb	r3, [r7, #30]
    32e6:	7fbb      	ldrb	r3, [r7, #30]
    32e8:	2b01      	cmp	r3, #1
    32ea:	dc19      	bgt.n	3320 <_ZN12States_Class9StateVENTEm+0xa4>
		{
			if (fans.evaporator[i]->IsEnabled())
    32ec:	7fbb      	ldrb	r3, [r7, #30]
    32ee:	4a88      	ldr	r2, [pc, #544]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    32f0:	3316      	adds	r3, #22
    32f2:	009b      	lsls	r3, r3, #2
    32f4:	4413      	add	r3, r2
    32f6:	685b      	ldr	r3, [r3, #4]
    32f8:	4618      	mov	r0, r3
    32fa:	4b87      	ldr	r3, [pc, #540]	; (3518 <_ZN12States_Class9StateVENTEm+0x29c>)
    32fc:	4798      	blx	r3
    32fe:	4603      	mov	r3, r0
    3300:	2b00      	cmp	r3, #0
    3302:	d109      	bne.n	3318 <_ZN12States_Class9StateVENTEm+0x9c>
			{
			}
			else
			{
				fans.evaporator[i]->SetEnable(true);
    3304:	7fbb      	ldrb	r3, [r7, #30]
    3306:	4a82      	ldr	r2, [pc, #520]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    3308:	3316      	adds	r3, #22
    330a:	009b      	lsls	r3, r3, #2
    330c:	4413      	add	r3, r2
    330e:	685b      	ldr	r3, [r3, #4]
    3310:	2101      	movs	r1, #1
    3312:	4618      	mov	r0, r3
    3314:	4b81      	ldr	r3, [pc, #516]	; (351c <_ZN12States_Class9StateVENTEm+0x2a0>)
    3316:	4798      	blx	r3
		for ( uint8_t i= 0; i < 2; i++)
    3318:	7fbb      	ldrb	r3, [r7, #30]
    331a:	3301      	adds	r3, #1
    331c:	77bb      	strb	r3, [r7, #30]
    331e:	e7e2      	b.n	32e6 <_ZN12States_Class9StateVENTEm+0x6a>
			

	}else{

	}
	while(!done){
    3320:	7ffb      	ldrb	r3, [r7, #31]
    3322:	2b00      	cmp	r3, #0
    3324:	f040 80e3 	bne.w	34ee <_ZN12States_Class9StateVENTEm+0x272>
		 OperateTemperatureBySetpoint(0);
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	3328      	adds	r3, #40	; 0x28
    332c:	2100      	movs	r1, #0
    332e:	4618      	mov	r0, r3
    3330:	4b7b      	ldr	r3, [pc, #492]	; (3520 <_ZN12States_Class9StateVENTEm+0x2a4>)
    3332:	4798      	blx	r3
		 if (IsCommando272Changed())
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	3b10      	subs	r3, #16
    333a:	681b      	ldr	r3, [r3, #0]
    333c:	461a      	mov	r2, r3
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	4413      	add	r3, r2
    3342:	4618      	mov	r0, r3
    3344:	4b77      	ldr	r3, [pc, #476]	; (3524 <_ZN12States_Class9StateVENTEm+0x2a8>)
    3346:	4798      	blx	r3
    3348:	4603      	mov	r3, r0
    334a:	2b00      	cmp	r3, #0
    334c:	d01c      	beq.n	3388 <_ZN12States_Class9StateVENTEm+0x10c>
		 {
			 fans.evaporator[0]->SetPWM(command272.fanSpeed[0]);
    334e:	4b70      	ldr	r3, [pc, #448]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    3350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	3b10      	subs	r3, #16
    3358:	681b      	ldr	r3, [r3, #0]
    335a:	4619      	mov	r1, r3
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	440b      	add	r3, r1
    3360:	7a5b      	ldrb	r3, [r3, #9]
    3362:	4619      	mov	r1, r3
    3364:	4610      	mov	r0, r2
    3366:	4b70      	ldr	r3, [pc, #448]	; (3528 <_ZN12States_Class9StateVENTEm+0x2ac>)
    3368:	4798      	blx	r3
			  fans.evaporator[1]->SetPWM(command272.fanSpeed[0]);
    336a:	4b69      	ldr	r3, [pc, #420]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    336c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    336e:	687b      	ldr	r3, [r7, #4]
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	3b10      	subs	r3, #16
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	4619      	mov	r1, r3
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	440b      	add	r3, r1
    337c:	7a5b      	ldrb	r3, [r3, #9]
    337e:	4619      	mov	r1, r3
    3380:	4610      	mov	r0, r2
    3382:	4b69      	ldr	r3, [pc, #420]	; (3528 <_ZN12States_Class9StateVENTEm+0x2ac>)
    3384:	4798      	blx	r3
    3386:	e036      	b.n	33f6 <_ZN12States_Class9StateVENTEm+0x17a>
		 } 
		 else
		 {
			 for (uint8_t i = 0; i < 2; i++)
    3388:	2300      	movs	r3, #0
    338a:	777b      	strb	r3, [r7, #29]
    338c:	7f7b      	ldrb	r3, [r7, #29]
    338e:	2b01      	cmp	r3, #1
    3390:	dc31      	bgt.n	33f6 <_ZN12States_Class9StateVENTEm+0x17a>
			 {
				 	if ((fans.evaporator[i]->ReadPWM())!=command272.fanSpeed[i])
    3392:	7f7b      	ldrb	r3, [r7, #29]
    3394:	4a5e      	ldr	r2, [pc, #376]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    3396:	3316      	adds	r3, #22
    3398:	009b      	lsls	r3, r3, #2
    339a:	4413      	add	r3, r2
    339c:	685b      	ldr	r3, [r3, #4]
    339e:	4618      	mov	r0, r3
    33a0:	4b62      	ldr	r3, [pc, #392]	; (352c <_ZN12States_Class9StateVENTEm+0x2b0>)
    33a2:	4798      	blx	r3
    33a4:	4603      	mov	r3, r0
    33a6:	4619      	mov	r1, r3
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	3b10      	subs	r3, #16
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	461a      	mov	r2, r3
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	441a      	add	r2, r3
    33b6:	7f7b      	ldrb	r3, [r7, #29]
    33b8:	4413      	add	r3, r2
    33ba:	7a5b      	ldrb	r3, [r3, #9]
    33bc:	4299      	cmp	r1, r3
    33be:	bf14      	ite	ne
    33c0:	2301      	movne	r3, #1
    33c2:	2300      	moveq	r3, #0
    33c4:	b2db      	uxtb	r3, r3
    33c6:	2b00      	cmp	r3, #0
    33c8:	d011      	beq.n	33ee <_ZN12States_Class9StateVENTEm+0x172>
				 	{
					 	fans.evaporator[i]->SetPWM(command272.fanSpeed[0]);
    33ca:	7f7b      	ldrb	r3, [r7, #29]
    33cc:	4a50      	ldr	r2, [pc, #320]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    33ce:	3316      	adds	r3, #22
    33d0:	009b      	lsls	r3, r3, #2
    33d2:	4413      	add	r3, r2
    33d4:	685a      	ldr	r2, [r3, #4]
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	3b10      	subs	r3, #16
    33dc:	681b      	ldr	r3, [r3, #0]
    33de:	4619      	mov	r1, r3
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	440b      	add	r3, r1
    33e4:	7a5b      	ldrb	r3, [r3, #9]
    33e6:	4619      	mov	r1, r3
    33e8:	4610      	mov	r0, r2
    33ea:	4b4f      	ldr	r3, [pc, #316]	; (3528 <_ZN12States_Class9StateVENTEm+0x2ac>)
    33ec:	4798      	blx	r3
			 for (uint8_t i = 0; i < 2; i++)
    33ee:	7f7b      	ldrb	r3, [r7, #29]
    33f0:	3301      	adds	r3, #1
    33f2:	777b      	strb	r3, [r7, #29]
    33f4:	e7ca      	b.n	338c <_ZN12States_Class9StateVENTEm+0x110>
	
			// UpdateCommando372();
		 }
		
		
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    33f6:	f107 030c 	add.w	r3, r7, #12
    33fa:	2208      	movs	r2, #8
    33fc:	4619      	mov	r1, r3
    33fe:	6878      	ldr	r0, [r7, #4]
    3400:	4b4b      	ldr	r3, [pc, #300]	; (3530 <_ZN12States_Class9StateVENTEm+0x2b4>)
    3402:	4798      	blx	r3
    3404:	4603      	mov	r3, r0
    3406:	2b00      	cmp	r3, #0
    3408:	d06e      	beq.n	34e8 <_ZN12States_Class9StateVENTEm+0x26c>
		{
			switch(e.eventClass){
    340a:	89bb      	ldrh	r3, [r7, #12]
    340c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3410:	d006      	beq.n	3420 <_ZN12States_Class9StateVENTEm+0x1a4>
    3412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3416:	d025      	beq.n	3464 <_ZN12States_Class9StateVENTEm+0x1e8>
    3418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    341c:	d011      	beq.n	3442 <_ZN12States_Class9StateVENTEm+0x1c6>
							break;
					}
				
					break;
				default:
				break;
    341e:	e065      	b.n	34ec <_ZN12States_Class9StateVENTEm+0x270>
					switch (e.eventType){
    3420:	89fb      	ldrh	r3, [r7, #14]
    3422:	2b03      	cmp	r3, #3
    3424:	d000      	beq.n	3428 <_ZN12States_Class9StateVENTEm+0x1ac>
						break;
    3426:	e00b      	b.n	3440 <_ZN12States_Class9StateVENTEm+0x1c4>
						saveCurrentState();
    3428:	6878      	ldr	r0, [r7, #4]
    342a:	4b42      	ldr	r3, [pc, #264]	; (3534 <_ZN12States_Class9StateVENTEm+0x2b8>)
    342c:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    342e:	2200      	movs	r2, #0
    3430:	f240 1143 	movw	r1, #323	; 0x143
    3434:	6878      	ldr	r0, [r7, #4]
    3436:	4b40      	ldr	r3, [pc, #256]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    3438:	4798      	blx	r3
						done=true;
    343a:	2301      	movs	r3, #1
    343c:	77fb      	strb	r3, [r7, #31]
						break;
    343e:	bf00      	nop
				break;
    3440:	e054      	b.n	34ec <_ZN12States_Class9StateVENTEm+0x270>
					switch (e.eventType){
    3442:	89fb      	ldrh	r3, [r7, #14]
    3444:	2b03      	cmp	r3, #3
    3446:	d000      	beq.n	344a <_ZN12States_Class9StateVENTEm+0x1ce>
						break;
    3448:	e00b      	b.n	3462 <_ZN12States_Class9StateVENTEm+0x1e6>
						saveCurrentState();
    344a:	6878      	ldr	r0, [r7, #4]
    344c:	4b39      	ldr	r3, [pc, #228]	; (3534 <_ZN12States_Class9StateVENTEm+0x2b8>)
    344e:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    3450:	2200      	movs	r2, #0
    3452:	f240 1143 	movw	r1, #323	; 0x143
    3456:	6878      	ldr	r0, [r7, #4]
    3458:	4b37      	ldr	r3, [pc, #220]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    345a:	4798      	blx	r3
						done=true;
    345c:	2301      	movs	r3, #1
    345e:	77fb      	strb	r3, [r7, #31]
						break;
    3460:	bf00      	nop
				break;
    3462:	e043      	b.n	34ec <_ZN12States_Class9StateVENTEm+0x270>
					switch (e.eventType){
    3464:	89fb      	ldrh	r3, [r7, #14]
    3466:	2b06      	cmp	r3, #6
    3468:	d013      	beq.n	3492 <_ZN12States_Class9StateVENTEm+0x216>
    346a:	2b09      	cmp	r3, #9
    346c:	d02c      	beq.n	34c8 <_ZN12States_Class9StateVENTEm+0x24c>
    346e:	2b05      	cmp	r3, #5
    3470:	d000      	beq.n	3474 <_ZN12States_Class9StateVENTEm+0x1f8>
							break;
    3472:	e038      	b.n	34e6 <_ZN12States_Class9StateVENTEm+0x26a>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3474:	2200      	movs	r2, #0
    3476:	f240 1133 	movw	r1, #307	; 0x133
    347a:	6878      	ldr	r0, [r7, #4]
    347c:	4b2e      	ldr	r3, [pc, #184]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    347e:	4798      	blx	r3
							fans.condesator->SetEnable(false);
    3480:	4b23      	ldr	r3, [pc, #140]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    3482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3484:	2100      	movs	r1, #0
    3486:	4618      	mov	r0, r3
    3488:	4b2c      	ldr	r3, [pc, #176]	; (353c <_ZN12States_Class9StateVENTEm+0x2c0>)
    348a:	4798      	blx	r3
							done=true;
    348c:	2301      	movs	r3, #1
    348e:	77fb      	strb	r3, [r7, #31]
							break;
    3490:	e029      	b.n	34e6 <_ZN12States_Class9StateVENTEm+0x26a>
							prepareStateChangeEvent(kHVACStateStandbyAUTO);
    3492:	2200      	movs	r2, #0
    3494:	f240 1131 	movw	r1, #305	; 0x131
    3498:	6878      	ldr	r0, [r7, #4]
    349a:	4b27      	ldr	r3, [pc, #156]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    349c:	4798      	blx	r3
								fans.evaporator[0]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    349e:	4b1c      	ldr	r3, [pc, #112]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    34a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    34a2:	210c      	movs	r1, #12
    34a4:	4618      	mov	r0, r3
    34a6:	4b20      	ldr	r3, [pc, #128]	; (3528 <_ZN12States_Class9StateVENTEm+0x2ac>)
    34a8:	4798      	blx	r3
								fans.evaporator[1]->SetPWM(EVAPORATOR_MINIMUN_FLOW_AIR);
    34aa:	4b19      	ldr	r3, [pc, #100]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    34ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    34ae:	210c      	movs	r1, #12
    34b0:	4618      	mov	r0, r3
    34b2:	4b1d      	ldr	r3, [pc, #116]	; (3528 <_ZN12States_Class9StateVENTEm+0x2ac>)
    34b4:	4798      	blx	r3
								fans.condesator->SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
    34b6:	4b16      	ldr	r3, [pc, #88]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    34b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    34ba:	2110      	movs	r1, #16
    34bc:	4618      	mov	r0, r3
    34be:	4b20      	ldr	r3, [pc, #128]	; (3540 <_ZN12States_Class9StateVENTEm+0x2c4>)
    34c0:	4798      	blx	r3
							done=true;
    34c2:	2301      	movs	r3, #1
    34c4:	77fb      	strb	r3, [r7, #31]
							break;
    34c6:	e00e      	b.n	34e6 <_ZN12States_Class9StateVENTEm+0x26a>
							fans.condesator->SetEnable(false);
    34c8:	4b11      	ldr	r3, [pc, #68]	; (3510 <_ZN12States_Class9StateVENTEm+0x294>)
    34ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    34cc:	2100      	movs	r1, #0
    34ce:	4618      	mov	r0, r3
    34d0:	4b1a      	ldr	r3, [pc, #104]	; (353c <_ZN12States_Class9StateVENTEm+0x2c0>)
    34d2:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateStandbyOFF);
    34d4:	2200      	movs	r2, #0
    34d6:	f44f 7199 	mov.w	r1, #306	; 0x132
    34da:	6878      	ldr	r0, [r7, #4]
    34dc:	4b16      	ldr	r3, [pc, #88]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    34de:	4798      	blx	r3
							done=true;
    34e0:	2301      	movs	r3, #1
    34e2:	77fb      	strb	r3, [r7, #31]
							break;
    34e4:	bf00      	nop
					break;
    34e6:	e001      	b.n	34ec <_ZN12States_Class9StateVENTEm+0x270>
			
			
		}
		else
		{
			done=false;
    34e8:	2300      	movs	r3, #0
    34ea:	77fb      	strb	r3, [r7, #31]
	while(!done){
    34ec:	e718      	b.n	3320 <_ZN12States_Class9StateVENTEm+0xa4>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    34ee:	2200      	movs	r2, #0
    34f0:	f240 1143 	movw	r1, #323	; 0x143
    34f4:	6878      	ldr	r0, [r7, #4]
    34f6:	4b10      	ldr	r3, [pc, #64]	; (3538 <_ZN12States_Class9StateVENTEm+0x2bc>)
    34f8:	4798      	blx	r3

}
    34fa:	bf00      	nop
    34fc:	3720      	adds	r7, #32
    34fe:	46bd      	mov	sp, r7
    3500:	bd80      	pop	{r7, pc}
    3502:	bf00      	nop
    3504:	000003c5 	.word	0x000003c5
    3508:	20003284 	.word	0x20003284
    350c:	00003b61 	.word	0x00003b61
    3510:	20003b28 	.word	0x20003b28
    3514:	000151f5 	.word	0x000151f5
    3518:	00015281 	.word	0x00015281
    351c:	00015239 	.word	0x00015239
    3520:	0000476d 	.word	0x0000476d
    3524:	00001285 	.word	0x00001285
    3528:	0001525d 	.word	0x0001525d
    352c:	00015279 	.word	0x00015279
    3530:	00003885 	.word	0x00003885
    3534:	00003931 	.word	0x00003931
    3538:	000038bd 	.word	0x000038bd
    353c:	00014eb9 	.word	0x00014eb9
    3540:	00014ee9 	.word	0x00014ee9

00003544 <_ZN12States_Class21StatePrepareStandbyONEm>:

void States_Class::StatePrepareStandbyON(uint32 flags)
	{
    3544:	b580      	push	{r7, lr}
    3546:	b082      	sub	sp, #8
    3548:	af00      	add	r7, sp, #0
    354a:	6078      	str	r0, [r7, #4]
    354c:	6039      	str	r1, [r7, #0]
	hvacState->lastState=hvacState->currentState;
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3554:	687a      	ldr	r2, [r7, #4]
    3556:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
    355a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    355c:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStatePrepareStandbyON;
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3564:	f44f 729a 	mov.w	r2, #308	; 0x134
    3568:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
		
#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
		switch (commando270.statusArinc)
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	3b10      	subs	r3, #16
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	461a      	mov	r2, r3
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	4413      	add	r3, r2
    3578:	791b      	ldrb	r3, [r3, #4]
    357a:	2b01      	cmp	r3, #1
    357c:	d00a      	beq.n	3594 <_ZN12States_Class21StatePrepareStandbyONEm+0x50>
    357e:	2b02      	cmp	r3, #2
    3580:	d00f      	beq.n	35a2 <_ZN12States_Class21StatePrepareStandbyONEm+0x5e>
    3582:	2b00      	cmp	r3, #0
    3584:	d114      	bne.n	35b0 <_ZN12States_Class21StatePrepareStandbyONEm+0x6c>
		{
			case COMMAND_MODE_OFF:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3586:	2200      	movs	r2, #0
    3588:	f240 1133 	movw	r1, #307	; 0x133
    358c:	6878      	ldr	r0, [r7, #4]
    358e:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3590:	4798      	blx	r3
			/* Your code here */
			break;
    3592:	e014      	b.n	35be <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case COMMAND_MODE_VENT:
				prepareStateChangeEvent(kHVACStateStandbyVENT);
    3594:	2200      	movs	r2, #0
    3596:	f44f 7198 	mov.w	r1, #304	; 0x130
    359a:	6878      	ldr	r0, [r7, #4]
    359c:	4b0a      	ldr	r3, [pc, #40]	; (35c8 <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    359e:	4798      	blx	r3
			/* Your code here */
			break;
    35a0:	e00d      	b.n	35be <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case COMMAND_MODE_AUTO :
				prepareStateChangeEvent(kHVACStateStandbyAUTO);
    35a2:	2200      	movs	r2, #0
    35a4:	f240 1131 	movw	r1, #305	; 0x131
    35a8:	6878      	ldr	r0, [r7, #4]
    35aa:	4b07      	ldr	r3, [pc, #28]	; (35c8 <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    35ac:	4798      	blx	r3
			/* Your code here */
			break;
    35ae:	e006      	b.n	35be <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			default:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    35b0:	2200      	movs	r2, #0
    35b2:	f240 1133 	movw	r1, #307	; 0x133
    35b6:	6878      	ldr	r0, [r7, #4]
    35b8:	4b03      	ldr	r3, [pc, #12]	; (35c8 <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    35ba:	4798      	blx	r3
			/* Your code here */
			break;
    35bc:	bf00      	nop
		}
	


	}
    35be:	bf00      	nop
    35c0:	3708      	adds	r7, #8
    35c2:	46bd      	mov	sp, r7
    35c4:	bd80      	pop	{r7, pc}
    35c6:	bf00      	nop
    35c8:	000038bd 	.word	0x000038bd

000035cc <_ZN12States_Class22StatePrepareStandbyOFFEm>:
	
void States_Class::StatePrepareStandbyOFF(uint32 flags)
{
    35cc:	b580      	push	{r7, lr}
    35ce:	b082      	sub	sp, #8
    35d0:	af00      	add	r7, sp, #0
    35d2:	6078      	str	r0, [r7, #4]
    35d4:	6039      	str	r1, [r7, #0]
	
	hvacState->currentState=kHVACStatePrepareStandbyOFF;
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    35dc:	f240 1233 	movw	r2, #307	; 0x133
    35e0:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
	
	#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
	switch (hvacState->lastState)
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    35e8:	6a1b      	ldr	r3, [r3, #32]
    35ea:	f240 1231 	movw	r2, #305	; 0x131
    35ee:	4293      	cmp	r3, r2
    35f0:	d006      	beq.n	3600 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x34>
    35f2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    35f6:	d005      	beq.n	3604 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x38>
    35f8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    35fc:	d004      	beq.n	3608 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3c>
		/* Your code here */
		break;
		default:
	
		/* Your code here */
		break;
    35fe:	e004      	b.n	360a <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3e>
		break;
    3600:	bf00      	nop
    3602:	e002      	b.n	360a <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3e>
		break;
    3604:	bf00      	nop
    3606:	e000      	b.n	360a <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3e>
		break;
    3608:	bf00      	nop
	}
	prepareStateChangeEvent(kHVACStateStandbyOFF);
    360a:	2200      	movs	r2, #0
    360c:	f44f 7199 	mov.w	r1, #306	; 0x132
    3610:	6878      	ldr	r0, [r7, #4]
    3612:	4b03      	ldr	r3, [pc, #12]	; (3620 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x54>)
    3614:	4798      	blx	r3


}
    3616:	bf00      	nop
    3618:	3708      	adds	r7, #8
    361a:	46bd      	mov	sp, r7
    361c:	bd80      	pop	{r7, pc}
    361e:	bf00      	nop
    3620:	000038bd 	.word	0x000038bd

00003624 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    3624:	b580      	push	{r7, lr}
    3626:	b088      	sub	sp, #32
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	6039      	str	r1, [r7, #0]
	event	e;
    362e:	f107 030c 	add.w	r3, r7, #12
    3632:	4618      	mov	r0, r3
    3634:	4b15      	ldr	r3, [pc, #84]	; (368c <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    3636:	4798      	blx	r3
	bool	done(false);
    3638:	2300      	movs	r3, #0
    363a:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3642:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3646:	f36f 1345 	bfc	r3, #5, #1
    364a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3654:	687a      	ldr	r2, [r7, #4]
    3656:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    365a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    365e:	fb01 f202 	mul.w	r2, r1, r2
    3662:	645a      	str	r2, [r3, #68]	; 0x44

	
	hvacState->reedRelayOpen = false;
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    366a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    366e:	f36f 1304 	bfc	r3, #4, #1
    3672:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	
	listener.SendEventSelf(e);
    3676:	f107 030c 	add.w	r3, r7, #12
    367a:	4619      	mov	r1, r3
    367c:	4804      	ldr	r0, [pc, #16]	; (3690 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    367e:	4b05      	ldr	r3, [pc, #20]	; (3694 <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3680:	4798      	blx	r3
	}
    3682:	bf00      	nop
    3684:	3720      	adds	r7, #32
    3686:	46bd      	mov	sp, r7
    3688:	bd80      	pop	{r7, pc}
    368a:	bf00      	nop
    368c:	000003c5 	.word	0x000003c5
    3690:	20003284 	.word	0x20003284
    3694:	0001353d 	.word	0x0001353d

00003698 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3698:	b580      	push	{r7, lr}
    369a:	b088      	sub	sp, #32
    369c:	af00      	add	r7, sp, #0
    369e:	6078      	str	r0, [r7, #4]
    36a0:	6039      	str	r1, [r7, #0]
	event	e;
    36a2:	f107 030c 	add.w	r3, r7, #12
    36a6:	4618      	mov	r0, r3
    36a8:	4b06      	ldr	r3, [pc, #24]	; (36c4 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    36aa:	4798      	blx	r3
	bool	done(false);
    36ac:	2300      	movs	r3, #0
    36ae:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    36b0:	f107 030c 	add.w	r3, r7, #12
    36b4:	4619      	mov	r1, r3
    36b6:	4804      	ldr	r0, [pc, #16]	; (36c8 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    36b8:	4b04      	ldr	r3, [pc, #16]	; (36cc <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    36ba:	4798      	blx	r3
	}
    36bc:	bf00      	nop
    36be:	3720      	adds	r7, #32
    36c0:	46bd      	mov	sp, r7
    36c2:	bd80      	pop	{r7, pc}
    36c4:	000003c5 	.word	0x000003c5
    36c8:	20003284 	.word	0x20003284
    36cc:	0001353d 	.word	0x0001353d

000036d0 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    36d0:	b580      	push	{r7, lr}
    36d2:	b088      	sub	sp, #32
    36d4:	af00      	add	r7, sp, #0
    36d6:	6078      	str	r0, [r7, #4]
    36d8:	6039      	str	r1, [r7, #0]
	event	e;
    36da:	f107 030c 	add.w	r3, r7, #12
    36de:	4618      	mov	r0, r3
    36e0:	4b0b      	ldr	r3, [pc, #44]	; (3710 <_ZN12States_Class13handleStateONEm+0x40>)
    36e2:	4798      	blx	r3
	bool	done(false);
    36e4:	2300      	movs	r3, #0
    36e6:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    36e8:	2301      	movs	r3, #1
    36ea:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    36ec:	2301      	movs	r3, #1
    36ee:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    36f0:	683b      	ldr	r3, [r7, #0]
    36f2:	2b00      	cmp	r3, #0
    36f4:	bf14      	ite	ne
    36f6:	2301      	movne	r3, #1
    36f8:	2300      	moveq	r3, #0
    36fa:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    36fc:	f107 030c 	add.w	r3, r7, #12
    3700:	4619      	mov	r1, r3
    3702:	4804      	ldr	r0, [pc, #16]	; (3714 <_ZN12States_Class13handleStateONEm+0x44>)
    3704:	4b04      	ldr	r3, [pc, #16]	; (3718 <_ZN12States_Class13handleStateONEm+0x48>)
    3706:	4798      	blx	r3
	}
    3708:	bf00      	nop
    370a:	3720      	adds	r7, #32
    370c:	46bd      	mov	sp, r7
    370e:	bd80      	pop	{r7, pc}
    3710:	000003c5 	.word	0x000003c5
    3714:	20003284 	.word	0x20003284
    3718:	0001353d 	.word	0x0001353d

0000371c <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    371c:	b580      	push	{r7, lr}
    371e:	b088      	sub	sp, #32
    3720:	af00      	add	r7, sp, #0
    3722:	6078      	str	r0, [r7, #4]
    3724:	6039      	str	r1, [r7, #0]
	event	e;
    3726:	f107 030c 	add.w	r3, r7, #12
    372a:	4618      	mov	r0, r3
    372c:	4b06      	ldr	r3, [pc, #24]	; (3748 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    372e:	4798      	blx	r3
	bool	done(false);
    3730:	2300      	movs	r3, #0
    3732:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3734:	f107 030c 	add.w	r3, r7, #12
    3738:	4619      	mov	r1, r3
    373a:	4804      	ldr	r0, [pc, #16]	; (374c <_ZN12States_Class19handleStateFinishedEm+0x30>)
    373c:	4b04      	ldr	r3, [pc, #16]	; (3750 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    373e:	4798      	blx	r3
	}
    3740:	bf00      	nop
    3742:	3720      	adds	r7, #32
    3744:	46bd      	mov	sp, r7
    3746:	bd80      	pop	{r7, pc}
    3748:	000003c5 	.word	0x000003c5
    374c:	20003284 	.word	0x20003284
    3750:	0001353d 	.word	0x0001353d

00003754 <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3754:	b580      	push	{r7, lr}
    3756:	b086      	sub	sp, #24
    3758:	af00      	add	r7, sp, #0
    375a:	6078      	str	r0, [r7, #4]
    375c:	6039      	str	r1, [r7, #0]
	event	e;
    375e:	f107 0308 	add.w	r3, r7, #8
    3762:	4618      	mov	r0, r3
    3764:	4b0b      	ldr	r3, [pc, #44]	; (3794 <_ZN12States_Class12StateLeavingEm+0x40>)
    3766:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    376e:	687a      	ldr	r2, [r7, #4]
    3770:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
    3774:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3776:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStateLeaving;
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    377e:	f240 1243 	movw	r2, #323	; 0x143
    3782:	625a      	str	r2, [r3, #36]	; 0x24
	
	saveCurrentState();
    3784:	6878      	ldr	r0, [r7, #4]
    3786:	4b04      	ldr	r3, [pc, #16]	; (3798 <_ZN12States_Class12StateLeavingEm+0x44>)
    3788:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    378a:	bf00      	nop
    378c:	3718      	adds	r7, #24
    378e:	46bd      	mov	sp, r7
    3790:	bd80      	pop	{r7, pc}
    3792:	bf00      	nop
    3794:	000003c5 	.word	0x000003c5
    3798:	00003931 	.word	0x00003931

0000379c <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    379c:	b580      	push	{r7, lr}
    379e:	b088      	sub	sp, #32
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	6039      	str	r1, [r7, #0]
	event	e;
    37a6:	f107 030c 	add.w	r3, r7, #12
    37aa:	4618      	mov	r0, r3
    37ac:	4b08      	ldr	r3, [pc, #32]	; (37d0 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    37ae:	4798      	blx	r3
 	bool	done(false);
    37b0:	2300      	movs	r3, #0
    37b2:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    37b4:	2301      	movs	r3, #1
    37b6:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    37b8:	683b      	ldr	r3, [r7, #0]
    37ba:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    37bc:	f107 030c 	add.w	r3, r7, #12
    37c0:	4619      	mov	r1, r3
    37c2:	4804      	ldr	r0, [pc, #16]	; (37d4 <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    37c4:	4b04      	ldr	r3, [pc, #16]	; (37d8 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    37c6:	4798      	blx	r3
	}
    37c8:	bf00      	nop
    37ca:	3720      	adds	r7, #32
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}
    37d0:	000003c5 	.word	0x000003c5
    37d4:	20003284 	.word	0x20003284
    37d8:	0001353d 	.word	0x0001353d

000037dc <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    37dc:	b580      	push	{r7, lr}
    37de:	b088      	sub	sp, #32
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	6039      	str	r1, [r7, #0]
	event	e;
    37e6:	f107 030c 	add.w	r3, r7, #12
    37ea:	4618      	mov	r0, r3
    37ec:	4b06      	ldr	r3, [pc, #24]	; (3808 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    37ee:	4798      	blx	r3
	bool	done(false);
    37f0:	2300      	movs	r3, #0
    37f2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    37f4:	f107 030c 	add.w	r3, r7, #12
    37f8:	4619      	mov	r1, r3
    37fa:	4804      	ldr	r0, [pc, #16]	; (380c <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    37fc:	4b04      	ldr	r3, [pc, #16]	; (3810 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    37fe:	4798      	blx	r3
	}
    3800:	bf00      	nop
    3802:	3720      	adds	r7, #32
    3804:	46bd      	mov	sp, r7
    3806:	bd80      	pop	{r7, pc}
    3808:	000003c5 	.word	0x000003c5
    380c:	20003284 	.word	0x20003284
    3810:	0001353d 	.word	0x0001353d

00003814 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    3814:	b580      	push	{r7, lr}
    3816:	b088      	sub	sp, #32
    3818:	af00      	add	r7, sp, #0
    381a:	6078      	str	r0, [r7, #4]
    381c:	6039      	str	r1, [r7, #0]
	event	e;
    381e:	f107 030c 	add.w	r3, r7, #12
    3822:	4618      	mov	r0, r3
    3824:	4b06      	ldr	r3, [pc, #24]	; (3840 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    3826:	4798      	blx	r3
	bool	done(false);
    3828:	2300      	movs	r3, #0
    382a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    382c:	f107 030c 	add.w	r3, r7, #12
    3830:	4619      	mov	r1, r3
    3832:	4804      	ldr	r0, [pc, #16]	; (3844 <_ZN12States_Class16handleStateErrorEm+0x30>)
    3834:	4b04      	ldr	r3, [pc, #16]	; (3848 <_ZN12States_Class16handleStateErrorEm+0x34>)
    3836:	4798      	blx	r3
	}
    3838:	bf00      	nop
    383a:	3720      	adds	r7, #32
    383c:	46bd      	mov	sp, r7
    383e:	bd80      	pop	{r7, pc}
    3840:	000003c5 	.word	0x000003c5
    3844:	20003284 	.word	0x20003284
    3848:	0001353d 	.word	0x0001353d

0000384c <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    384c:	b580      	push	{r7, lr}
    384e:	b088      	sub	sp, #32
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
	event	e;
    3856:	f107 030c 	add.w	r3, r7, #12
    385a:	4618      	mov	r0, r3
    385c:	4b06      	ldr	r3, [pc, #24]	; (3878 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    385e:	4798      	blx	r3
	bool	done(false);
    3860:	2300      	movs	r3, #0
    3862:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3864:	f107 030c 	add.w	r3, r7, #12
    3868:	4619      	mov	r1, r3
    386a:	4804      	ldr	r0, [pc, #16]	; (387c <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    386c:	4b04      	ldr	r3, [pc, #16]	; (3880 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    386e:	4798      	blx	r3
	}
    3870:	bf00      	nop
    3872:	3720      	adds	r7, #32
    3874:	46bd      	mov	sp, r7
    3876:	bd80      	pop	{r7, pc}
    3878:	000003c5 	.word	0x000003c5
    387c:	20003284 	.word	0x20003284
    3880:	0001353d 	.word	0x0001353d

00003884 <_ZN12States_Class12InStateEventER5eventl>:
	result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
	
	return result;
	}
	
bool States_Class::InStateEvent(event& e, tick_t t){
    3884:	b590      	push	{r4, r7, lr}
    3886:	b089      	sub	sp, #36	; 0x24
    3888:	af02      	add	r7, sp, #8
    388a:	60f8      	str	r0, [r7, #12]
    388c:	60b9      	str	r1, [r7, #8]
    388e:	607a      	str	r2, [r7, #4]

	bool result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	9300      	str	r3, [sp, #0]
    3894:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3898:	f64f 72ff 	movw	r2, #65535	; 0xffff
    389c:	68b9      	ldr	r1, [r7, #8]
    389e:	4805      	ldr	r0, [pc, #20]	; (38b4 <_ZN12States_Class12InStateEventER5eventl+0x30>)
    38a0:	4c05      	ldr	r4, [pc, #20]	; (38b8 <_ZN12States_Class12InStateEventER5eventl+0x34>)
    38a2:	47a0      	blx	r4
    38a4:	4603      	mov	r3, r0
    38a6:	75fb      	strb	r3, [r7, #23]
	return result;
    38a8:	7dfb      	ldrb	r3, [r7, #23]

}
    38aa:	4618      	mov	r0, r3
    38ac:	371c      	adds	r7, #28
    38ae:	46bd      	mov	sp, r7
    38b0:	bd90      	pop	{r4, r7, pc}
    38b2:	bf00      	nop
    38b4:	20003284 	.word	0x20003284
    38b8:	00013379 	.word	0x00013379

000038bc <_ZN12States_Class23prepareStateChangeEventEtt>:

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    38bc:	b580      	push	{r7, lr}
    38be:	b086      	sub	sp, #24
    38c0:	af00      	add	r7, sp, #0
    38c2:	6078      	str	r0, [r7, #4]
    38c4:	460b      	mov	r3, r1
    38c6:	807b      	strh	r3, [r7, #2]
    38c8:	4613      	mov	r3, r2
    38ca:	803b      	strh	r3, [r7, #0]
	event e;
    38cc:	f107 0308 	add.w	r3, r7, #8
    38d0:	4618      	mov	r0, r3
    38d2:	4b0b      	ldr	r3, [pc, #44]	; (3900 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    38d4:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    38d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    38da:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    38dc:	f44f 7300 	mov.w	r3, #512	; 0x200
    38e0:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    38e2:	887b      	ldrh	r3, [r7, #2]
    38e4:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    38e6:	883b      	ldrh	r3, [r7, #0]
    38e8:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    38ea:	f107 0308 	add.w	r3, r7, #8
    38ee:	4619      	mov	r1, r3
    38f0:	4804      	ldr	r0, [pc, #16]	; (3904 <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    38f2:	4b05      	ldr	r3, [pc, #20]	; (3908 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    38f4:	4798      	blx	r3
	}
    38f6:	bf00      	nop
    38f8:	3718      	adds	r7, #24
    38fa:	46bd      	mov	sp, r7
    38fc:	bd80      	pop	{r7, pc}
    38fe:	bf00      	nop
    3900:	000003c5 	.word	0x000003c5
    3904:	20003284 	.word	0x20003284
    3908:	0001353d 	.word	0x0001353d

0000390c <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    390c:	b580      	push	{r7, lr}
    390e:	b088      	sub	sp, #32
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
	event	e;
    3914:	f107 030c 	add.w	r3, r7, #12
    3918:	4618      	mov	r0, r3
    391a:	4b04      	ldr	r3, [pc, #16]	; (392c <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    391c:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    391e:	2300      	movs	r3, #0
    3920:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    3922:	8bfb      	ldrh	r3, [r7, #30]
	}
    3924:	4618      	mov	r0, r3
    3926:	3720      	adds	r7, #32
    3928:	46bd      	mov	sp, r7
    392a:	bd80      	pop	{r7, pc}
    392c:	000003c5 	.word	0x000003c5

00003930 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    3930:	b590      	push	{r4, r7, lr}
    3932:	b085      	sub	sp, #20
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    3938:	f107 0308 	add.w	r3, r7, #8
    393c:	4619      	mov	r1, r3
    393e:	4816      	ldr	r0, [pc, #88]	; (3998 <_ZN12States_Class16saveCurrentStateEv+0x68>)
    3940:	4b16      	ldr	r3, [pc, #88]	; (399c <_ZN12States_Class16saveCurrentStateEv+0x6c>)
    3942:	4798      	blx	r3
		hvacState->dateTime=cdt;
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    394a:	3308      	adds	r3, #8
    394c:	f107 0208 	add.w	r2, r7, #8
    3950:	e892 0003 	ldmia.w	r2, {r0, r1}
    3954:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    395e:	f107 0308 	add.w	r3, r7, #8
    3962:	4619      	mov	r1, r3
    3964:	480c      	ldr	r0, [pc, #48]	; (3998 <_ZN12States_Class16saveCurrentStateEv+0x68>)
    3966:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    3968:	4798      	blx	r3
    396a:	4603      	mov	r3, r0
    396c:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3976:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    397a:	d009      	beq.n	3990 <_ZN12States_Class16saveCurrentStateEv+0x60>
	//	memory.WriteFastCurrentState(staticCurrentState);
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3984:	2b00      	cmp	r3, #0
    3986:	d103      	bne.n	3990 <_ZN12States_Class16saveCurrentStateEv+0x60>
		{
			memory.SaveApplicationState(staticCurrentState);
    3988:	4906      	ldr	r1, [pc, #24]	; (39a4 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    398a:	4807      	ldr	r0, [pc, #28]	; (39a8 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    398c:	4b07      	ldr	r3, [pc, #28]	; (39ac <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    398e:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    3990:	bf00      	nop
    3992:	3714      	adds	r7, #20
    3994:	46bd      	mov	sp, r7
    3996:	bd90      	pop	{r4, r7, pc}
    3998:	20003308 	.word	0x20003308
    399c:	00013a19 	.word	0x00013a19
    39a0:	00013a69 	.word	0x00013a69
    39a4:	20000fb4 	.word	0x20000fb4
    39a8:	20006c64 	.word	0x20006c64
    39ac:	00018399 	.word	0x00018399

000039b0 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    39b0:	b580      	push	{r7, lr}
    39b2:	b082      	sub	sp, #8
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
    39b8:	460b      	mov	r3, r1
    39ba:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    39bc:	78fb      	ldrb	r3, [r7, #3]
    39be:	2b00      	cmp	r3, #0
    39c0:	d10d      	bne.n	39de <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    39c2:	4909      	ldr	r1, [pc, #36]	; (39e8 <_ZN12States_Class4StopEh+0x38>)
    39c4:	4809      	ldr	r0, [pc, #36]	; (39ec <_ZN12States_Class4StopEh+0x3c>)
    39c6:	4b0a      	ldr	r3, [pc, #40]	; (39f0 <_ZN12States_Class4StopEh+0x40>)
    39c8:	4798      	blx	r3
    39ca:	4603      	mov	r3, r0
    39cc:	4909      	ldr	r1, [pc, #36]	; (39f4 <_ZN12States_Class4StopEh+0x44>)
    39ce:	4618      	mov	r0, r3
    39d0:	4b09      	ldr	r3, [pc, #36]	; (39f8 <_ZN12States_Class4StopEh+0x48>)
    39d2:	4798      	blx	r3
			delay_ms(100);
    39d4:	2064      	movs	r0, #100	; 0x64
    39d6:	4b09      	ldr	r3, [pc, #36]	; (39fc <_ZN12States_Class4StopEh+0x4c>)
    39d8:	4798      	blx	r3
			return layer;
    39da:	78fb      	ldrb	r3, [r7, #3]
    39dc:	e000      	b.n	39e0 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    39de:	78fb      	ldrb	r3, [r7, #3]
}
    39e0:	4618      	mov	r0, r3
    39e2:	3708      	adds	r7, #8
    39e4:	46bd      	mov	sp, r7
    39e6:	bd80      	pop	{r7, pc}
    39e8:	0001ca5c 	.word	0x0001ca5c
    39ec:	20003884 	.word	0x20003884
    39f0:	00003c81 	.word	0x00003c81
    39f4:	0001ca38 	.word	0x0001ca38
    39f8:	00000ae9 	.word	0x00000ae9
    39fc:	0000647d 	.word	0x0000647d

00003a00 <_ZN12States_Class15SetCurrentStateER9HVACState>:
	hs=*hvacState;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
	configuration=cd;
}
void	States_Class::SetCurrentState(HVACState& hs){
    3a00:	b580      	push	{r7, lr}
    3a02:	b082      	sub	sp, #8
    3a04:	af00      	add	r7, sp, #0
    3a06:	6078      	str	r0, [r7, #4]
    3a08:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    3a0a:	4a06      	ldr	r2, [pc, #24]	; (3a24 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3a0c:	683b      	ldr	r3, [r7, #0]
    3a0e:	4610      	mov	r0, r2
    3a10:	4619      	mov	r1, r3
    3a12:	2368      	movs	r3, #104	; 0x68
    3a14:	461a      	mov	r2, r3
    3a16:	4b04      	ldr	r3, [pc, #16]	; (3a28 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    3a18:	4798      	blx	r3
}
    3a1a:	bf00      	nop
    3a1c:	3708      	adds	r7, #8
    3a1e:	46bd      	mov	sp, r7
    3a20:	bd80      	pop	{r7, pc}
    3a22:	bf00      	nop
    3a24:	20000fb4 	.word	0x20000fb4
    3a28:	0001c521 	.word	0x0001c521

00003a2c <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState>:
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b082      	sub	sp, #8
    3a30:	af00      	add	r7, sp, #0
    3a32:	6078      	str	r0, [r7, #4]
    3a34:	6039      	str	r1, [r7, #0]
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	3b0c      	subs	r3, #12
    3a3c:	681b      	ldr	r3, [r3, #0]
    3a3e:	461a      	mov	r2, r3
    3a40:	687b      	ldr	r3, [r7, #4]
    3a42:	4413      	add	r3, r2
    3a44:	6839      	ldr	r1, [r7, #0]
    3a46:	4618      	mov	r0, r3
    3a48:	4b02      	ldr	r3, [pc, #8]	; (3a54 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState+0x28>)
    3a4a:	4798      	blx	r3
    3a4c:	3708      	adds	r7, #8
    3a4e:	46bd      	mov	sp, r7
    3a50:	bd80      	pop	{r7, pc}
    3a52:	bf00      	nop
    3a54:	00003a01 	.word	0x00003a01

00003a58 <_ZN12States_Class19ExecutePeriodicTaskEv>:
}
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    3a58:	b590      	push	{r4, r7, lr}
    3a5a:	b083      	sub	sp, #12
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
	fvc.Control_NBC_StandAlone_Reset();
    3a60:	4833      	ldr	r0, [pc, #204]	; (3b30 <_ZN12States_Class19ExecutePeriodicTaskEv+0xd8>)
    3a62:	4b34      	ldr	r3, [pc, #208]	; (3b34 <_ZN12States_Class19ExecutePeriodicTaskEv+0xdc>)
    3a64:	4798      	blx	r3
	
	if (fvc.fv->IsPositionChanged())
    3a66:	4b32      	ldr	r3, [pc, #200]	; (3b30 <_ZN12States_Class19ExecutePeriodicTaskEv+0xd8>)
    3a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3a6a:	4618      	mov	r0, r3
    3a6c:	4b32      	ldr	r3, [pc, #200]	; (3b38 <_ZN12States_Class19ExecutePeriodicTaskEv+0xe0>)
    3a6e:	4798      	blx	r3
    3a70:	4603      	mov	r3, r0
    3a72:	2b00      	cmp	r3, #0
    3a74:	d00c      	beq.n	3a90 <_ZN12States_Class19ExecutePeriodicTaskEv+0x38>
	{
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    3a76:	2200      	movs	r2, #0
    3a78:	210b      	movs	r1, #11
    3a7a:	4830      	ldr	r0, [pc, #192]	; (3b3c <_ZN12States_Class19ExecutePeriodicTaskEv+0xe4>)
    3a7c:	4b30      	ldr	r3, [pc, #192]	; (3b40 <_ZN12States_Class19ExecutePeriodicTaskEv+0xe8>)
    3a7e:	4798      	blx	r3
		hvacState->arincStatus.statusFV=fvc.fv->statusFlapperValve;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3a86:	4a2a      	ldr	r2, [pc, #168]	; (3b30 <_ZN12States_Class19ExecutePeriodicTaskEv+0xd8>)
    3a88:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
    3a8a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
    3a8e:	779a      	strb	r2, [r3, #30]
		
	}
	if (IsStatusArinclabelChanged())
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	3b0c      	subs	r3, #12
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	461a      	mov	r2, r3
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	4413      	add	r3, r2
    3a9e:	4618      	mov	r0, r3
    3aa0:	4b28      	ldr	r3, [pc, #160]	; (3b44 <_ZN12States_Class19ExecutePeriodicTaskEv+0xec>)
    3aa2:	4798      	blx	r3
    3aa4:	4603      	mov	r3, r0
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d012      	beq.n	3ad0 <_ZN12States_Class19ExecutePeriodicTaskEv+0x78>
 	{
		arinc.ar->SaveStatus(GetAcknowledgeStatus());
    3aaa:	4b27      	ldr	r3, [pc, #156]	; (3b48 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf0>)
    3aac:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    3ab0:	461c      	mov	r4, r3
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	3b0c      	subs	r3, #12
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	461a      	mov	r2, r3
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	4413      	add	r3, r2
    3ac0:	4618      	mov	r0, r3
    3ac2:	4b22      	ldr	r3, [pc, #136]	; (3b4c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf4>)
    3ac4:	4798      	blx	r3
    3ac6:	4603      	mov	r3, r0
    3ac8:	4619      	mov	r1, r3
    3aca:	4620      	mov	r0, r4
    3acc:	4b20      	ldr	r3, [pc, #128]	; (3b50 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    3ace:	4798      	blx	r3
	}
	UpdateCommando372();
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	681b      	ldr	r3, [r3, #0]
    3ad4:	3b10      	subs	r3, #16
    3ad6:	681b      	ldr	r3, [r3, #0]
    3ad8:	461a      	mov	r2, r3
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	4413      	add	r3, r2
    3ade:	4618      	mov	r0, r3
    3ae0:	4b1c      	ldr	r3, [pc, #112]	; (3b54 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    3ae2:	4798      	blx	r3
	arinc.ar->SaveFansSpeed(command372);
    3ae4:	4b18      	ldr	r3, [pc, #96]	; (3b48 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf0>)
    3ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    3aea:	4618      	mov	r0, r3
    3aec:	687b      	ldr	r3, [r7, #4]
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	3b10      	subs	r3, #16
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	461a      	mov	r2, r3
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	4413      	add	r3, r2
    3afa:	7ada      	ldrb	r2, [r3, #11]
    3afc:	7b19      	ldrb	r1, [r3, #12]
    3afe:	0209      	lsls	r1, r1, #8
    3b00:	430a      	orrs	r2, r1
    3b02:	7b5b      	ldrb	r3, [r3, #13]
    3b04:	041b      	lsls	r3, r3, #16
    3b06:	431a      	orrs	r2, r3
    3b08:	2300      	movs	r3, #0
    3b0a:	f362 0317 	bfi	r3, r2, #0, #24
    3b0e:	4619      	mov	r1, r3
    3b10:	4b11      	ldr	r3, [pc, #68]	; (3b58 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    3b12:	4798      	blx	r3
	HandleCommands();
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	3b10      	subs	r3, #16
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	461a      	mov	r2, r3
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	4413      	add	r3, r2
    3b22:	4618      	mov	r0, r3
    3b24:	4b0d      	ldr	r3, [pc, #52]	; (3b5c <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    3b26:	4798      	blx	r3
}
    3b28:	bf00      	nop
    3b2a:	370c      	adds	r7, #12
    3b2c:	46bd      	mov	sp, r7
    3b2e:	bd90      	pop	{r4, r7, pc}
    3b30:	20005598 	.word	0x20005598
    3b34:	00015c4d 	.word	0x00015c4d
    3b38:	00016f09 	.word	0x00016f09
    3b3c:	20000738 	.word	0x20000738
    3b40:	00000835 	.word	0x00000835
    3b44:	00000e05 	.word	0x00000e05
    3b48:	200024a8 	.word	0x200024a8
    3b4c:	00000ded 	.word	0x00000ded
    3b50:	00012111 	.word	0x00012111
    3b54:	0000137d 	.word	0x0000137d
    3b58:	00012019 	.word	0x00012019
    3b5c:	00001405 	.word	0x00001405

00003b60 <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    3b60:	b590      	push	{r4, r7, lr}
    3b62:	b087      	sub	sp, #28
    3b64:	af00      	add	r7, sp, #0
	event e;
    3b66:	463b      	mov	r3, r7
    3b68:	4618      	mov	r0, r3
    3b6a:	4b30      	ldr	r3, [pc, #192]	; (3c2c <_ZN12States_Class11CheckEventsEv+0xcc>)
    3b6c:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    3b6e:	4830      	ldr	r0, [pc, #192]	; (3c30 <_ZN12States_Class11CheckEventsEv+0xd0>)
    3b70:	4b30      	ldr	r3, [pc, #192]	; (3c34 <_ZN12States_Class11CheckEventsEv+0xd4>)
    3b72:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    3b74:	4830      	ldr	r0, [pc, #192]	; (3c38 <_ZN12States_Class11CheckEventsEv+0xd8>)
    3b76:	4b31      	ldr	r3, [pc, #196]	; (3c3c <_ZN12States_Class11CheckEventsEv+0xdc>)
    3b78:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    3b7a:	4b2d      	ldr	r3, [pc, #180]	; (3c30 <_ZN12States_Class11CheckEventsEv+0xd0>)
    3b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    3b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b82:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    3b86:	d11c      	bne.n	3bc2 <_ZN12States_Class11CheckEventsEv+0x62>
    3b88:	4b2d      	ldr	r3, [pc, #180]	; (3c40 <_ZN12States_Class11CheckEventsEv+0xe0>)
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d017      	beq.n	3bc2 <_ZN12States_Class11CheckEventsEv+0x62>
		fvc.fv->ReadActualPosition();
    3b92:	4b2c      	ldr	r3, [pc, #176]	; (3c44 <_ZN12States_Class11CheckEventsEv+0xe4>)
    3b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3b96:	4618      	mov	r0, r3
    3b98:	4b2b      	ldr	r3, [pc, #172]	; (3c48 <_ZN12States_Class11CheckEventsEv+0xe8>)
    3b9a:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    3b9c:	2200      	movs	r2, #0
    3b9e:	210b      	movs	r1, #11
    3ba0:	4827      	ldr	r0, [pc, #156]	; (3c40 <_ZN12States_Class11CheckEventsEv+0xe0>)
    3ba2:	4b2a      	ldr	r3, [pc, #168]	; (3c4c <_ZN12States_Class11CheckEventsEv+0xec>)
    3ba4:	4798      	blx	r3
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);
    3ba6:	f107 0310 	add.w	r3, r7, #16
    3baa:	2100      	movs	r1, #0
    3bac:	4618      	mov	r0, r3
    3bae:	4b28      	ldr	r3, [pc, #160]	; (3c50 <_ZN12States_Class11CheckEventsEv+0xf0>)
    3bb0:	4798      	blx	r3
    3bb2:	f107 0310 	add.w	r3, r7, #16
    3bb6:	2203      	movs	r2, #3
    3bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
    3bbc:	4825      	ldr	r0, [pc, #148]	; (3c54 <_ZN12States_Class11CheckEventsEv+0xf4>)
    3bbe:	4c26      	ldr	r4, [pc, #152]	; (3c58 <_ZN12States_Class11CheckEventsEv+0xf8>)
    3bc0:	47a0      	blx	r4

	}
	if ((alu.arincTXTimeUP)&(!interfaces.isMaintenanceActivated)){
    3bc2:	4b1f      	ldr	r3, [pc, #124]	; (3c40 <_ZN12States_Class11CheckEventsEv+0xe0>)
    3bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
    3bc8:	b2db      	uxtb	r3, r3
    3bca:	461a      	mov	r2, r3
    3bcc:	4b1a      	ldr	r3, [pc, #104]	; (3c38 <_ZN12States_Class11CheckEventsEv+0xd8>)
    3bce:	785b      	ldrb	r3, [r3, #1]
    3bd0:	b2db      	uxtb	r3, r3
    3bd2:	f083 0301 	eor.w	r3, r3, #1
    3bd6:	b2db      	uxtb	r3, r3
    3bd8:	4013      	ands	r3, r2
    3bda:	2b00      	cmp	r3, #0
    3bdc:	bf14      	ite	ne
    3bde:	2301      	movne	r3, #1
    3be0:	2300      	moveq	r3, #0
    3be2:	b2db      	uxtb	r3, r3
    3be4:	2b00      	cmp	r3, #0
    3be6:	d01c      	beq.n	3c22 <_ZN12States_Class11CheckEventsEv+0xc2>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    3be8:	2102      	movs	r1, #2
    3bea:	4815      	ldr	r0, [pc, #84]	; (3c40 <_ZN12States_Class11CheckEventsEv+0xe0>)
    3bec:	4b1b      	ldr	r3, [pc, #108]	; (3c5c <_ZN12States_Class11CheckEventsEv+0xfc>)
    3bee:	4798      	blx	r3
    3bf0:	4603      	mov	r3, r0
    3bf2:	f083 0301 	eor.w	r3, r3, #1
    3bf6:	b2db      	uxtb	r3, r3
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d004      	beq.n	3c06 <_ZN12States_Class11CheckEventsEv+0xa6>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    3bfc:	2200      	movs	r2, #0
    3bfe:	2102      	movs	r1, #2
    3c00:	480f      	ldr	r0, [pc, #60]	; (3c40 <_ZN12States_Class11CheckEventsEv+0xe0>)
    3c02:	4b12      	ldr	r3, [pc, #72]	; (3c4c <_ZN12States_Class11CheckEventsEv+0xec>)
    3c04:	4798      	blx	r3
		} 
		else
		{
			
		}
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
    3c06:	f107 0314 	add.w	r3, r7, #20
    3c0a:	2100      	movs	r1, #0
    3c0c:	4618      	mov	r0, r3
    3c0e:	4b10      	ldr	r3, [pc, #64]	; (3c50 <_ZN12States_Class11CheckEventsEv+0xf0>)
    3c10:	4798      	blx	r3
    3c12:	f107 0314 	add.w	r3, r7, #20
    3c16:	2203      	movs	r2, #3
    3c18:	f44f 7140 	mov.w	r1, #768	; 0x300
    3c1c:	480d      	ldr	r0, [pc, #52]	; (3c54 <_ZN12States_Class11CheckEventsEv+0xf4>)
    3c1e:	4c0e      	ldr	r4, [pc, #56]	; (3c58 <_ZN12States_Class11CheckEventsEv+0xf8>)
    3c20:	47a0      	blx	r4
	}
		

}
    3c22:	bf00      	nop
    3c24:	371c      	adds	r7, #28
    3c26:	46bd      	mov	sp, r7
    3c28:	bd90      	pop	{r4, r7, pc}
    3c2a:	bf00      	nop
    3c2c:	000003c5 	.word	0x000003c5
    3c30:	2000101c 	.word	0x2000101c
    3c34:	00003a59 	.word	0x00003a59
    3c38:	20000c48 	.word	0x20000c48
    3c3c:	00001c6d 	.word	0x00001c6d
    3c40:	20000738 	.word	0x20000738
    3c44:	20005598 	.word	0x20005598
    3c48:	00016e89 	.word	0x00016e89
    3c4c:	00000835 	.word	0x00000835
    3c50:	000011cf 	.word	0x000011cf
    3c54:	20003284 	.word	0x20003284
    3c58:	000135f9 	.word	0x000135f9
    3c5c:	00004159 	.word	0x00004159

00003c60 <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
    3c68:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3c6a:	6839      	ldr	r1, [r7, #0]
    3c6c:	6878      	ldr	r0, [r7, #4]
    3c6e:	4b03      	ldr	r3, [pc, #12]	; (3c7c <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    3c70:	4798      	blx	r3
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	4618      	mov	r0, r3
    3c76:	3708      	adds	r7, #8
    3c78:	46bd      	mov	sp, r7
    3c7a:	bd80      	pop	{r7, pc}
    3c7c:	000149b5 	.word	0x000149b5

00003c80 <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3c80:	b580      	push	{r7, lr}
    3c82:	b082      	sub	sp, #8
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
    3c88:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3c8a:	6839      	ldr	r1, [r7, #0]
    3c8c:	6878      	ldr	r0, [r7, #4]
    3c8e:	4b03      	ldr	r3, [pc, #12]	; (3c9c <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    3c90:	4798      	blx	r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	4618      	mov	r0, r3
    3c96:	3708      	adds	r7, #8
    3c98:	46bd      	mov	sp, r7
    3c9a:	bd80      	pop	{r7, pc}
    3c9c:	000149b5 	.word	0x000149b5

00003ca0 <_Z41__static_initialization_and_destruction_0ii>:


    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
    3ca8:	6039      	str	r1, [r7, #0]
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	2b01      	cmp	r3, #1
    3cae:	d15b      	bne.n	3d68 <_Z41__static_initialization_and_destruction_0ii+0xc8>
    3cb0:	683b      	ldr	r3, [r7, #0]
    3cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3cb6:	4293      	cmp	r3, r2
    3cb8:	d156      	bne.n	3d68 <_Z41__static_initialization_and_destruction_0ii+0xc8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    3cba:	492d      	ldr	r1, [pc, #180]	; (3d70 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    3cbc:	482d      	ldr	r0, [pc, #180]	; (3d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    3cbe:	4b2e      	ldr	r3, [pc, #184]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3cc0:	4798      	blx	r3
    3cc2:	4a2e      	ldr	r2, [pc, #184]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3cc4:	492e      	ldr	r1, [pc, #184]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3cc6:	482b      	ldr	r0, [pc, #172]	; (3d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    3cc8:	4b2e      	ldr	r3, [pc, #184]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3cca:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    3ccc:	492e      	ldr	r1, [pc, #184]	; (3d88 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    3cce:	482f      	ldr	r0, [pc, #188]	; (3d8c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    3cd0:	4b29      	ldr	r3, [pc, #164]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3cd2:	4798      	blx	r3
    3cd4:	4a29      	ldr	r2, [pc, #164]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3cd6:	492a      	ldr	r1, [pc, #168]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3cd8:	482c      	ldr	r0, [pc, #176]	; (3d8c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    3cda:	4b2a      	ldr	r3, [pc, #168]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3cdc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    3cde:	492c      	ldr	r1, [pc, #176]	; (3d90 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    3ce0:	482c      	ldr	r0, [pc, #176]	; (3d94 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    3ce2:	4b25      	ldr	r3, [pc, #148]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3ce4:	4798      	blx	r3
    3ce6:	4a25      	ldr	r2, [pc, #148]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3ce8:	4925      	ldr	r1, [pc, #148]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3cea:	482a      	ldr	r0, [pc, #168]	; (3d94 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    3cec:	4b25      	ldr	r3, [pc, #148]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3cee:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    3cf0:	4929      	ldr	r1, [pc, #164]	; (3d98 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    3cf2:	482a      	ldr	r0, [pc, #168]	; (3d9c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    3cf4:	4b20      	ldr	r3, [pc, #128]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3cf6:	4798      	blx	r3
    3cf8:	4a20      	ldr	r2, [pc, #128]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3cfa:	4921      	ldr	r1, [pc, #132]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3cfc:	4827      	ldr	r0, [pc, #156]	; (3d9c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    3cfe:	4b21      	ldr	r3, [pc, #132]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d00:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    3d02:	4927      	ldr	r1, [pc, #156]	; (3da0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    3d04:	4827      	ldr	r0, [pc, #156]	; (3da4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    3d06:	4b1c      	ldr	r3, [pc, #112]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3d08:	4798      	blx	r3
    3d0a:	4a1c      	ldr	r2, [pc, #112]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d0c:	491c      	ldr	r1, [pc, #112]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3d0e:	4825      	ldr	r0, [pc, #148]	; (3da4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    3d10:	4b1c      	ldr	r3, [pc, #112]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d12:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    3d14:	4924      	ldr	r1, [pc, #144]	; (3da8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    3d16:	4825      	ldr	r0, [pc, #148]	; (3dac <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    3d18:	4b17      	ldr	r3, [pc, #92]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3d1a:	4798      	blx	r3
    3d1c:	4a17      	ldr	r2, [pc, #92]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d1e:	4918      	ldr	r1, [pc, #96]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3d20:	4822      	ldr	r0, [pc, #136]	; (3dac <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    3d22:	4b18      	ldr	r3, [pc, #96]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d24:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    3d26:	4922      	ldr	r1, [pc, #136]	; (3db0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    3d28:	4822      	ldr	r0, [pc, #136]	; (3db4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    3d2a:	4b13      	ldr	r3, [pc, #76]	; (3d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    3d2c:	4798      	blx	r3
    3d2e:	4a13      	ldr	r2, [pc, #76]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d30:	4913      	ldr	r1, [pc, #76]	; (3d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    3d32:	4820      	ldr	r0, [pc, #128]	; (3db4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    3d34:	4b13      	ldr	r3, [pc, #76]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d36:	4798      	blx	r3
    3d38:	481f      	ldr	r0, [pc, #124]	; (3db8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    3d3a:	4b20      	ldr	r3, [pc, #128]	; (3dbc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    3d3c:	4798      	blx	r3
    3d3e:	4a0f      	ldr	r2, [pc, #60]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d40:	491f      	ldr	r1, [pc, #124]	; (3dc0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    3d42:	481d      	ldr	r0, [pc, #116]	; (3db8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    3d44:	4b0f      	ldr	r3, [pc, #60]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d46:	4798      	blx	r3
    3d48:	481e      	ldr	r0, [pc, #120]	; (3dc4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    3d4a:	4b1f      	ldr	r3, [pc, #124]	; (3dc8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    3d4c:	4798      	blx	r3
    3d4e:	4a0b      	ldr	r2, [pc, #44]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d50:	491e      	ldr	r1, [pc, #120]	; (3dcc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    3d52:	481c      	ldr	r0, [pc, #112]	; (3dc4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    3d54:	4b0b      	ldr	r3, [pc, #44]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d56:	4798      	blx	r3
    3d58:	481d      	ldr	r0, [pc, #116]	; (3dd0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    3d5a:	4b1e      	ldr	r3, [pc, #120]	; (3dd4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    3d5c:	4798      	blx	r3
    3d5e:	4a07      	ldr	r2, [pc, #28]	; (3d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    3d60:	491d      	ldr	r1, [pc, #116]	; (3dd8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    3d62:	481b      	ldr	r0, [pc, #108]	; (3dd0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    3d64:	4b07      	ldr	r3, [pc, #28]	; (3d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    3d66:	4798      	blx	r3
    3d68:	bf00      	nop
    3d6a:	3708      	adds	r7, #8
    3d6c:	46bd      	mov	sp, r7
    3d6e:	bd80      	pop	{r7, pc}
    3d70:	2000d6d8 	.word	0x2000d6d8
    3d74:	20000eb8 	.word	0x20000eb8
    3d78:	00013d09 	.word	0x00013d09
    3d7c:	20000000 	.word	0x20000000
    3d80:	00013d41 	.word	0x00013d41
    3d84:	0001a44d 	.word	0x0001a44d
    3d88:	2000d76c 	.word	0x2000d76c
    3d8c:	20000ed8 	.word	0x20000ed8
    3d90:	2000d870 	.word	0x2000d870
    3d94:	20000ef8 	.word	0x20000ef8
    3d98:	2000d78c 	.word	0x2000d78c
    3d9c:	20000f18 	.word	0x20000f18
    3da0:	2000d830 	.word	0x2000d830
    3da4:	20000f38 	.word	0x20000f38
    3da8:	2000d850 	.word	0x2000d850
    3dac:	20000f58 	.word	0x20000f58
    3db0:	2000d748 	.word	0x2000d748
    3db4:	20000f78 	.word	0x20000f78
    3db8:	20000f98 	.word	0x20000f98
    3dbc:	00002341 	.word	0x00002341
    3dc0:	0000235b 	.word	0x0000235b
    3dc4:	20000fac 	.word	0x20000fac
    3dc8:	00000c59 	.word	0x00000c59
    3dcc:	00000c73 	.word	0x00000c73
    3dd0:	2000101c 	.word	0x2000101c
    3dd4:	00002629 	.word	0x00002629
    3dd8:	000026ed 	.word	0x000026ed

00003ddc <_GLOBAL__sub_I_ptrStatesClass>:
    3ddc:	b580      	push	{r7, lr}
    3dde:	af00      	add	r7, sp, #0
    3de0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3de4:	2001      	movs	r0, #1
    3de6:	4b01      	ldr	r3, [pc, #4]	; (3dec <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    3de8:	4798      	blx	r3
    3dea:	bd80      	pop	{r7, pc}
    3dec:	00003ca1 	.word	0x00003ca1

00003df0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3df0:	b480      	push	{r7}
    3df2:	b083      	sub	sp, #12
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	681b      	ldr	r3, [r3, #0]
}
    3dfc:	4618      	mov	r0, r3
    3dfe:	370c      	adds	r7, #12
    3e00:	46bd      	mov	sp, r7
    3e02:	bc80      	pop	{r7}
    3e04:	4770      	bx	lr
	...

00003e08 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    3e08:	b480      	push	{r7}
    3e0a:	b083      	sub	sp, #12
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	4a04      	ldr	r2, [pc, #16]	; (3e24 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    3e14:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	4618      	mov	r0, r3
    3e1a:	370c      	adds	r7, #12
    3e1c:	46bd      	mov	sp, r7
    3e1e:	bc80      	pop	{r7}
    3e20:	4770      	bx	lr
    3e22:	bf00      	nop
    3e24:	200015c0 	.word	0x200015c0

00003e28 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    3e30:	687b      	ldr	r3, [r7, #4]
    3e32:	4618      	mov	r0, r3
    3e34:	370c      	adds	r7, #12
    3e36:	46bd      	mov	sp, r7
    3e38:	bc80      	pop	{r7}
    3e3a:	4770      	bx	lr

00003e3c <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	2201      	movs	r2, #1
    3e48:	721a      	strb	r2, [r3, #8]
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	7a1b      	ldrb	r3, [r3, #8]
    3e4e:	2b0b      	cmp	r3, #11
    3e50:	dc31      	bgt.n	3eb6 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7a1b      	ldrb	r3, [r3, #8]
    3e56:	4619      	mov	r1, r3
    3e58:	4b20      	ldr	r3, [pc, #128]	; (3edc <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3e5a:	2200      	movs	r2, #0
    3e5c:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	7a1b      	ldrb	r3, [r3, #8]
    3e64:	4a1d      	ldr	r2, [pc, #116]	; (3edc <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3e66:	00db      	lsls	r3, r3, #3
    3e68:	4413      	add	r3, r2
    3e6a:	2200      	movs	r2, #0
    3e6c:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	7a1b      	ldrb	r3, [r3, #8]
    3e72:	3b01      	subs	r3, #1
    3e74:	687a      	ldr	r2, [r7, #4]
    3e76:	7a12      	ldrb	r2, [r2, #8]
    3e78:	00d2      	lsls	r2, r2, #3
    3e7a:	4918      	ldr	r1, [pc, #96]	; (3edc <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3e7c:	440a      	add	r2, r1
    3e7e:	4917      	ldr	r1, [pc, #92]	; (3edc <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3e80:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	7a1b      	ldrb	r3, [r3, #8]
    3e88:	4619      	mov	r1, r3
    3e8a:	4b15      	ldr	r3, [pc, #84]	; (3ee0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3e8c:	2200      	movs	r2, #0
    3e8e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	7a1b      	ldrb	r3, [r3, #8]
    3e96:	3b01      	subs	r3, #1
    3e98:	687a      	ldr	r2, [r7, #4]
    3e9a:	7a12      	ldrb	r2, [r2, #8]
    3e9c:	0092      	lsls	r2, r2, #2
    3e9e:	4910      	ldr	r1, [pc, #64]	; (3ee0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3ea0:	440a      	add	r2, r1
    3ea2:	490f      	ldr	r1, [pc, #60]	; (3ee0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    3ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	7a1b      	ldrb	r3, [r3, #8]
    3eac:	3301      	adds	r3, #1
    3eae:	b2da      	uxtb	r2, r3
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	721a      	strb	r2, [r3, #8]
    3eb4:	e7c9      	b.n	3e4a <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	68db      	ldr	r3, [r3, #12]
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	2200      	movs	r2, #0
    3ebe:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	68db      	ldr	r3, [r3, #12]
    3ec4:	2200      	movs	r2, #0
    3ec6:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	68da      	ldr	r2, [r3, #12]
    3ecc:	687b      	ldr	r3, [r7, #4]
    3ece:	601a      	str	r2, [r3, #0]
}
    3ed0:	bf00      	nop
    3ed2:	370c      	adds	r7, #12
    3ed4:	46bd      	mov	sp, r7
    3ed6:	bc80      	pop	{r7}
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop
    3edc:	20001560 	.word	0x20001560
    3ee0:	200015c0 	.word	0x200015c0

00003ee4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b082      	sub	sp, #8
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    3eec:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    3eee:	6839      	ldr	r1, [r7, #0]
    3ef0:	6878      	ldr	r0, [r7, #4]
    3ef2:	4b22      	ldr	r3, [pc, #136]	; (3f7c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    3ef4:	4798      	blx	r3
    3ef6:	4603      	mov	r3, r0
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d039      	beq.n	3f70 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    3efc:	6878      	ldr	r0, [r7, #4]
    3efe:	4b20      	ldr	r3, [pc, #128]	; (3f80 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    3f00:	4798      	blx	r3
		task->elem=tk.elem;
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	685b      	ldr	r3, [r3, #4]
    3f06:	683a      	ldr	r2, [r7, #0]
    3f08:	6812      	ldr	r2, [r2, #0]
    3f0a:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	685b      	ldr	r3, [r3, #4]
    3f10:	683a      	ldr	r2, [r7, #0]
    3f12:	7912      	ldrb	r2, [r2, #4]
    3f14:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	685b      	ldr	r3, [r3, #4]
    3f1a:	683a      	ldr	r2, [r7, #0]
    3f1c:	7952      	ldrb	r2, [r2, #5]
    3f1e:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	68db      	ldr	r3, [r3, #12]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d005      	beq.n	3f34 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	685b      	ldr	r3, [r3, #4]
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d001      	beq.n	3f34 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    3f30:	2301      	movs	r3, #1
    3f32:	e000      	b.n	3f36 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    3f34:	2300      	movs	r3, #0
    3f36:	2242      	movs	r2, #66	; 0x42
    3f38:	4912      	ldr	r1, [pc, #72]	; (3f84 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    3f3a:	4618      	mov	r0, r3
    3f3c:	4b12      	ldr	r3, [pc, #72]	; (3f88 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    3f3e:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	68da      	ldr	r2, [r3, #12]
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	685b      	ldr	r3, [r3, #4]
    3f48:	4619      	mov	r1, r3
    3f4a:	4610      	mov	r0, r2
    3f4c:	4b0f      	ldr	r3, [pc, #60]	; (3f8c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    3f4e:	4798      	blx	r3
    3f50:	4603      	mov	r3, r0
    3f52:	2b00      	cmp	r3, #0
    3f54:	d002      	beq.n	3f5c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    3f56:	f06f 0311 	mvn.w	r3, #17
    3f5a:	e00b      	b.n	3f74 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	68d9      	ldr	r1, [r3, #12]
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	685b      	ldr	r3, [r3, #4]
    3f64:	461a      	mov	r2, r3
    3f66:	6878      	ldr	r0, [r7, #4]
    3f68:	4b09      	ldr	r3, [pc, #36]	; (3f90 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    3f6a:	4798      	blx	r3
		return ERR_NONE;
    3f6c:	2300      	movs	r3, #0
    3f6e:	e001      	b.n	3f74 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    3f70:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    3f74:	4618      	mov	r0, r3
    3f76:	3708      	adds	r7, #8
    3f78:	46bd      	mov	sp, r7
    3f7a:	bd80      	pop	{r7, pc}
    3f7c:	00004109 	.word	0x00004109
    3f80:	000040c1 	.word	0x000040c1
    3f84:	0001caf4 	.word	0x0001caf4
    3f88:	00007b0d 	.word	0x00007b0d
    3f8c:	00007b35 	.word	0x00007b35
    3f90:	00003f95 	.word	0x00003f95

00003f94 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    3f94:	b580      	push	{r7, lr}
    3f96:	b086      	sub	sp, #24
    3f98:	af00      	add	r7, sp, #0
    3f9a:	60f8      	str	r0, [r7, #12]
    3f9c:	60b9      	str	r1, [r7, #8]
    3f9e:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    3fa0:	68b8      	ldr	r0, [r7, #8]
    3fa2:	4b09      	ldr	r3, [pc, #36]	; (3fc8 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    3fa4:	4798      	blx	r3
    3fa6:	6178      	str	r0, [r7, #20]

	if (!head) {
    3fa8:	697b      	ldr	r3, [r7, #20]
    3faa:	2b00      	cmp	r3, #0
    3fac:	d104      	bne.n	3fb8 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    3fae:	6879      	ldr	r1, [r7, #4]
    3fb0:	68b8      	ldr	r0, [r7, #8]
    3fb2:	4b06      	ldr	r3, [pc, #24]	; (3fcc <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    3fb4:	4798      	blx	r3
		return;
    3fb6:	e003      	b.n	3fc0 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    3fb8:	6879      	ldr	r1, [r7, #4]
    3fba:	68b8      	ldr	r0, [r7, #8]
    3fbc:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    3fbe:	4798      	blx	r3
	}

		

}
    3fc0:	3718      	adds	r7, #24
    3fc2:	46bd      	mov	sp, r7
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	bf00      	nop
    3fc8:	00003df1 	.word	0x00003df1
    3fcc:	00007b6d 	.word	0x00007b6d
    3fd0:	00007be9 	.word	0x00007be9

00003fd4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	68db      	ldr	r3, [r3, #12]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d004      	beq.n	3ff0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    3fe6:	683b      	ldr	r3, [r7, #0]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d001      	beq.n	3ff0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    3fec:	2301      	movs	r3, #1
    3fee:	e000      	b.n	3ff2 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    3ff0:	2300      	movs	r3, #0
    3ff2:	226f      	movs	r2, #111	; 0x6f
    3ff4:	4917      	ldr	r1, [pc, #92]	; (4054 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    3ff6:	4618      	mov	r0, r3
    3ff8:	4b17      	ldr	r3, [pc, #92]	; (4058 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    3ffa:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    3ffc:	6839      	ldr	r1, [r7, #0]
    3ffe:	6878      	ldr	r0, [r7, #4]
    4000:	4b16      	ldr	r3, [pc, #88]	; (405c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    4002:	4798      	blx	r3
    4004:	4603      	mov	r3, r0
    4006:	2b00      	cmp	r3, #0
    4008:	d002      	beq.n	4010 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    400a:	f06f 0309 	mvn.w	r3, #9
    400e:	e01d      	b.n	404c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	68da      	ldr	r2, [r3, #12]
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	685b      	ldr	r3, [r3, #4]
    4018:	4619      	mov	r1, r3
    401a:	4610      	mov	r0, r2
    401c:	4b10      	ldr	r3, [pc, #64]	; (4060 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    401e:	4798      	blx	r3
    4020:	4603      	mov	r3, r0
    4022:	f083 0301 	eor.w	r3, r3, #1
    4026:	b2db      	uxtb	r3, r3
    4028:	2b00      	cmp	r3, #0
    402a:	d002      	beq.n	4032 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    402c:	f06f 0309 	mvn.w	r3, #9
    4030:	e00c      	b.n	404c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	68da      	ldr	r2, [r3, #12]
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	685b      	ldr	r3, [r3, #4]
    403a:	4619      	mov	r1, r3
    403c:	4610      	mov	r0, r2
    403e:	4b09      	ldr	r3, [pc, #36]	; (4064 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    4040:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	685b      	ldr	r3, [r3, #4]
    4046:	2200      	movs	r2, #0
    4048:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    404a:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    404c:	4618      	mov	r0, r3
    404e:	3708      	adds	r7, #8
    4050:	46bd      	mov	sp, r7
    4052:	bd80      	pop	{r7, pc}
    4054:	0001caf4 	.word	0x0001caf4
    4058:	00007b0d 	.word	0x00007b0d
    405c:	00004109 	.word	0x00004109
    4060:	00007b35 	.word	0x00007b35
    4064:	00007c97 	.word	0x00007c97

00004068 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    4068:	b480      	push	{r7}
    406a:	b087      	sub	sp, #28
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
    4070:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    4072:	230c      	movs	r3, #12
    4074:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	68db      	ldr	r3, [r3, #12]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	617b      	str	r3, [r7, #20]
    407e:	697b      	ldr	r3, [r7, #20]
    4080:	2b00      	cmp	r3, #0
    4082:	d011      	beq.n	40a8 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    4084:	697b      	ldr	r3, [r7, #20]
    4086:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    4088:	693b      	ldr	r3, [r7, #16]
    408a:	795b      	ldrb	r3, [r3, #5]
    408c:	461a      	mov	r2, r3
    408e:	7bfb      	ldrb	r3, [r7, #15]
    4090:	429a      	cmp	r2, r3
    4092:	da05      	bge.n	40a0 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4094:	693b      	ldr	r3, [r7, #16]
    4096:	795b      	ldrb	r3, [r3, #5]
    4098:	73fb      	strb	r3, [r7, #15]
			task=ct;
    409a:	683b      	ldr	r3, [r7, #0]
    409c:	693a      	ldr	r2, [r7, #16]
    409e:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    40a0:	697b      	ldr	r3, [r7, #20]
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	617b      	str	r3, [r7, #20]
    40a6:	e7ea      	b.n	407e <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    40a8:	683b      	ldr	r3, [r7, #0]
    40aa:	685a      	ldr	r2, [r3, #4]
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	e892 0003 	ldmia.w	r2, {r0, r1}
    40b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    40b6:	6878      	ldr	r0, [r7, #4]
    40b8:	371c      	adds	r7, #28
    40ba:	46bd      	mov	sp, r7
    40bc:	bc80      	pop	{r7}
    40be:	4770      	bx	lr

000040c0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    40c0:	b480      	push	{r7}
    40c2:	b085      	sub	sp, #20
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    40c8:	2300      	movs	r3, #0
    40ca:	73fb      	strb	r3, [r7, #15]
    40cc:	7bfb      	ldrb	r3, [r7, #15]
    40ce:	2b0b      	cmp	r3, #11
    40d0:	dc11      	bgt.n	40f6 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x36>
	{
	
		if (taskStorage[ii].id==kALUNotTaskEvent)
    40d2:	7bfb      	ldrb	r3, [r7, #15]
    40d4:	4a0b      	ldr	r2, [pc, #44]	; (4104 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    40d6:	00db      	lsls	r3, r3, #3
    40d8:	4413      	add	r3, r2
    40da:	791b      	ldrb	r3, [r3, #4]
    40dc:	2b00      	cmp	r3, #0
    40de:	d106      	bne.n	40ee <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x2e>
		{			
			task=&taskStorage[ii];
    40e0:	7bfb      	ldrb	r3, [r7, #15]
    40e2:	00db      	lsls	r3, r3, #3
    40e4:	4a07      	ldr	r2, [pc, #28]	; (4104 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    40e6:	441a      	add	r2, r3
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	605a      	str	r2, [r3, #4]
			return;
    40ec:	e006      	b.n	40fc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x3c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    40ee:	7bfb      	ldrb	r3, [r7, #15]
    40f0:	3301      	adds	r3, #1
    40f2:	73fb      	strb	r3, [r7, #15]
    40f4:	e7ea      	b.n	40cc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	4a02      	ldr	r2, [pc, #8]	; (4104 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    40fa:	605a      	str	r2, [r3, #4]

}
    40fc:	3714      	adds	r7, #20
    40fe:	46bd      	mov	sp, r7
    4100:	bc80      	pop	{r7}
    4102:	4770      	bx	lr
    4104:	20001560 	.word	0x20001560

00004108 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    4108:	b480      	push	{r7}
    410a:	b085      	sub	sp, #20
    410c:	af00      	add	r7, sp, #0
    410e:	6078      	str	r0, [r7, #4]
    4110:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4112:	2300      	movs	r3, #0
    4114:	73fb      	strb	r3, [r7, #15]
    4116:	7bfb      	ldrb	r3, [r7, #15]
    4118:	2b0b      	cmp	r3, #11
    411a:	dc14      	bgt.n	4146 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    411c:	7bfb      	ldrb	r3, [r7, #15]
    411e:	4a0d      	ldr	r2, [pc, #52]	; (4154 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    4120:	00db      	lsls	r3, r3, #3
    4122:	4413      	add	r3, r2
    4124:	791a      	ldrb	r2, [r3, #4]
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	791b      	ldrb	r3, [r3, #4]
    412a:	429a      	cmp	r2, r3
    412c:	d107      	bne.n	413e <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    412e:	7bfb      	ldrb	r3, [r7, #15]
    4130:	00db      	lsls	r3, r3, #3
    4132:	4a08      	ldr	r2, [pc, #32]	; (4154 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    4134:	441a      	add	r2, r3
    4136:	687b      	ldr	r3, [r7, #4]
    4138:	605a      	str	r2, [r3, #4]
			return false;
    413a:	2300      	movs	r3, #0
    413c:	e004      	b.n	4148 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    413e:	7bfb      	ldrb	r3, [r7, #15]
    4140:	3301      	adds	r3, #1
    4142:	73fb      	strb	r3, [r7, #15]
    4144:	e7e7      	b.n	4116 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    4146:	2301      	movs	r3, #1


}
    4148:	4618      	mov	r0, r3
    414a:	3714      	adds	r7, #20
    414c:	46bd      	mov	sp, r7
    414e:	bc80      	pop	{r7}
    4150:	4770      	bx	lr
    4152:	bf00      	nop
    4154:	20001560 	.word	0x20001560

00004158 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    4158:	b480      	push	{r7}
    415a:	b085      	sub	sp, #20
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
    4160:	460b      	mov	r3, r1
    4162:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4164:	2300      	movs	r3, #0
    4166:	73fb      	strb	r3, [r7, #15]
    4168:	7bfb      	ldrb	r3, [r7, #15]
    416a:	2b0b      	cmp	r3, #11
    416c:	dc0d      	bgt.n	418a <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    416e:	7bfb      	ldrb	r3, [r7, #15]
    4170:	4a09      	ldr	r2, [pc, #36]	; (4198 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    4172:	00db      	lsls	r3, r3, #3
    4174:	4413      	add	r3, r2
    4176:	791b      	ldrb	r3, [r3, #4]
    4178:	78fa      	ldrb	r2, [r7, #3]
    417a:	429a      	cmp	r2, r3
    417c:	d101      	bne.n	4182 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    417e:	2301      	movs	r3, #1
    4180:	e004      	b.n	418c <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4182:	7bfb      	ldrb	r3, [r7, #15]
    4184:	3301      	adds	r3, #1
    4186:	73fb      	strb	r3, [r7, #15]
    4188:	e7ee      	b.n	4168 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    418a:	2300      	movs	r3, #0


    418c:	4618      	mov	r0, r3
    418e:	3714      	adds	r7, #20
    4190:	46bd      	mov	sp, r7
    4192:	bc80      	pop	{r7}
    4194:	4770      	bx	lr
    4196:	bf00      	nop
    4198:	20001560 	.word	0x20001560

0000419c <_ZN20AUTO_MODE_ControllerC1Ev>:
#include "FlapperValveController.h"
#include "States_Class.h"
#include "EvaporatorAndCondesatorFans_Class.h"

// default constructor
AUTO_MODE_Controller::AUTO_MODE_Controller()
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
    41a4:	4a09      	ldr	r2, [pc, #36]	; (41cc <_ZN20AUTO_MODE_ControllerC1Ev+0x30>)
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	601a      	str	r2, [r3, #0]
{
	heatersRequestPower=0;
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	2200      	movs	r2, #0
    41ae:	771a      	strb	r2, [r3, #28]
	evaFanSpeed=0;
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	2200      	movs	r2, #0
    41b4:	775a      	strb	r2, [r3, #29]
	heatingMode=true;
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	2201      	movs	r2, #1
    41ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	
} //VENT_MODE_Controller
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	4618      	mov	r0, r3
    41c2:	370c      	adds	r7, #12
    41c4:	46bd      	mov	sp, r7
    41c6:	bc80      	pop	{r7}
    41c8:	4770      	bx	lr
    41ca:	bf00      	nop
    41cc:	0001cb18 	.word	0x0001cb18

000041d0 <_ZN20AUTO_MODE_ControllerD1Ev>:

// default destructor
AUTO_MODE_Controller::~AUTO_MODE_Controller()
    41d0:	b480      	push	{r7}
    41d2:	b083      	sub	sp, #12
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
    41d8:	4a04      	ldr	r2, [pc, #16]	; (41ec <_ZN20AUTO_MODE_ControllerD1Ev+0x1c>)
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	601a      	str	r2, [r3, #0]
{
} //~VENT_MODE_Controller
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	4618      	mov	r0, r3
    41e2:	370c      	adds	r7, #12
    41e4:	46bd      	mov	sp, r7
    41e6:	bc80      	pop	{r7}
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop
    41ec:	0001cb18 	.word	0x0001cb18

000041f0 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh>:


void AUTO_MODE_Controller::ControlTemperatureSetpoint(uint8_t opt){
    41f0:	b590      	push	{r4, r7, lr}
    41f2:	b083      	sub	sp, #12
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	460b      	mov	r3, r1
    41fa:	70fb      	strb	r3, [r7, #3]
// 	if (hvac.temperingTimeout)
// 	{
		cabinCurrentTemperature=temperatures.values[0][3];
    41fc:	4b99      	ldr	r3, [pc, #612]	; (4464 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x274>)
    41fe:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	609a      	str	r2, [r3, #8]
		if (abs(lastCabinTemperature-cabinCurrentTemperature)>1/4)
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	695a      	ldr	r2, [r3, #20]
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	6899      	ldr	r1, [r3, #8]
    420c:	4b96      	ldr	r3, [pc, #600]	; (4468 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x278>)
    420e:	4610      	mov	r0, r2
    4210:	4798      	blx	r3
    4212:	4603      	mov	r3, r0
    4214:	461a      	mov	r2, r3
    4216:	4b95      	ldr	r3, [pc, #596]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    4218:	f04f 0100 	mov.w	r1, #0
    421c:	4610      	mov	r0, r2
    421e:	4798      	blx	r3
    4220:	4603      	mov	r3, r0
    4222:	2b00      	cmp	r3, #0
    4224:	d016      	beq.n	4254 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x64>
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	695a      	ldr	r2, [r3, #20]
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	6899      	ldr	r1, [r3, #8]
    422e:	4b8e      	ldr	r3, [pc, #568]	; (4468 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x278>)
    4230:	4610      	mov	r0, r2
    4232:	4798      	blx	r3
    4234:	4603      	mov	r3, r0
    4236:	461a      	mov	r2, r3
    4238:	2301      	movs	r3, #1
    423a:	461c      	mov	r4, r3
    423c:	4b8b      	ldr	r3, [pc, #556]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    423e:	f04f 0100 	mov.w	r1, #0
    4242:	4610      	mov	r0, r2
    4244:	4798      	blx	r3
    4246:	4603      	mov	r3, r0
    4248:	2b00      	cmp	r3, #0
    424a:	d101      	bne.n	4250 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x60>
    424c:	2300      	movs	r3, #0
    424e:	461c      	mov	r4, r3
    4250:	b2e3      	uxtb	r3, r4
    4252:	e015      	b.n	4280 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x90>
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	695a      	ldr	r2, [r3, #20]
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	6899      	ldr	r1, [r3, #8]
    425c:	4b82      	ldr	r3, [pc, #520]	; (4468 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x278>)
    425e:	4610      	mov	r0, r2
    4260:	4798      	blx	r3
    4262:	4603      	mov	r3, r0
    4264:	461a      	mov	r2, r3
    4266:	2301      	movs	r3, #1
    4268:	461c      	mov	r4, r3
    426a:	4b81      	ldr	r3, [pc, #516]	; (4470 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x280>)
    426c:	f04f 0100 	mov.w	r1, #0
    4270:	4610      	mov	r0, r2
    4272:	4798      	blx	r3
    4274:	4603      	mov	r3, r0
    4276:	2b00      	cmp	r3, #0
    4278:	d101      	bne.n	427e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x8e>
    427a:	2300      	movs	r3, #0
    427c:	461c      	mov	r4, r3
    427e:	b2e3      	uxtb	r3, r4
    4280:	2b00      	cmp	r3, #0
    4282:	f000 818c 	beq.w	459e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3ae>
		{
			lastCabinTemperature=cabinCurrentTemperature;
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	689a      	ldr	r2, [r3, #8]
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	615a      	str	r2, [r3, #20]
			if (cabinCurrentTemperature>0)
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	689a      	ldr	r2, [r3, #8]
    4292:	4b76      	ldr	r3, [pc, #472]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    4294:	f04f 0100 	mov.w	r1, #0
    4298:	4610      	mov	r0, r2
    429a:	4798      	blx	r3
    429c:	4603      	mov	r3, r0
    429e:	2b00      	cmp	r3, #0
    42a0:	d100      	bne.n	42a4 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xb4>
	
	
	
	
	
}
    42a2:	e17c      	b.n	459e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3ae>
				setpointTemperature=hvac.UpadateTemperatureSetpoint();
    42a4:	4873      	ldr	r0, [pc, #460]	; (4474 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x284>)
    42a6:	4b74      	ldr	r3, [pc, #464]	; (4478 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x288>)
    42a8:	4798      	blx	r3
    42aa:	4602      	mov	r2, r0
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	60da      	str	r2, [r3, #12]
				errorTemperature=setpointTemperature-cabinCurrentTemperature;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	68da      	ldr	r2, [r3, #12]
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	6899      	ldr	r1, [r3, #8]
    42b8:	4b6b      	ldr	r3, [pc, #428]	; (4468 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x278>)
    42ba:	4610      	mov	r0, r2
    42bc:	4798      	blx	r3
    42be:	4603      	mov	r3, r0
    42c0:	461a      	mov	r2, r3
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	611a      	str	r2, [r3, #16]
				tolerance=errorTemperature>0?1:2;
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	691a      	ldr	r2, [r3, #16]
    42ca:	4b68      	ldr	r3, [pc, #416]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    42cc:	f04f 0100 	mov.w	r1, #0
    42d0:	4610      	mov	r0, r2
    42d2:	4798      	blx	r3
    42d4:	4603      	mov	r3, r0
    42d6:	2b00      	cmp	r3, #0
    42d8:	d001      	beq.n	42de <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xee>
    42da:	2201      	movs	r2, #1
    42dc:	e000      	b.n	42e0 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0xf0>
    42de:	2202      	movs	r2, #2
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				if (abs(errorTemperature)>tolerance)
    42e6:	687b      	ldr	r3, [r7, #4]
    42e8:	691a      	ldr	r2, [r3, #16]
    42ea:	4b60      	ldr	r3, [pc, #384]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    42ec:	f04f 0100 	mov.w	r1, #0
    42f0:	4610      	mov	r0, r2
    42f2:	4798      	blx	r3
    42f4:	4603      	mov	r3, r0
    42f6:	2b00      	cmp	r3, #0
    42f8:	d002      	beq.n	4300 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x110>
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	691c      	ldr	r4, [r3, #16]
    42fe:	e003      	b.n	4308 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x118>
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	691b      	ldr	r3, [r3, #16]
    4304:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    430e:	461a      	mov	r2, r3
    4310:	4b5a      	ldr	r3, [pc, #360]	; (447c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x28c>)
    4312:	4610      	mov	r0, r2
    4314:	4798      	blx	r3
    4316:	4602      	mov	r2, r0
    4318:	4b54      	ldr	r3, [pc, #336]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    431a:	4611      	mov	r1, r2
    431c:	4620      	mov	r0, r4
    431e:	4798      	blx	r3
    4320:	4603      	mov	r3, r0
    4322:	2b00      	cmp	r3, #0
    4324:	d100      	bne.n	4328 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x138>
}
    4326:	e13a      	b.n	459e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3ae>
					heatersRequestPower=heater.GetHeaterPowerLevel();
    4328:	4855      	ldr	r0, [pc, #340]	; (4480 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x290>)
    432a:	4b56      	ldr	r3, [pc, #344]	; (4484 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x294>)
    432c:	4798      	blx	r3
    432e:	4603      	mov	r3, r0
    4330:	461a      	mov	r2, r3
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	771a      	strb	r2, [r3, #28]
					currentPower=heatersRequestPower;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	7f1a      	ldrb	r2, [r3, #28]
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	f883 2020 	strb.w	r2, [r3, #32]
					if (errorTemperature>0)
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	691a      	ldr	r2, [r3, #16]
    4344:	4b49      	ldr	r3, [pc, #292]	; (446c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x27c>)
    4346:	f04f 0100 	mov.w	r1, #0
    434a:	4610      	mov	r0, r2
    434c:	4798      	blx	r3
    434e:	4603      	mov	r3, r0
    4350:	2b00      	cmp	r3, #0
    4352:	d018      	beq.n	4386 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x196>
						if (heatersRequestPower>3)
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	7f1b      	ldrb	r3, [r3, #28]
    4358:	2b03      	cmp	r3, #3
    435a:	dd0a      	ble.n	4372 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x182>
							heatersRequestPower=4;
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	2204      	movs	r2, #4
    4360:	771a      	strb	r2, [r3, #28]
							if (opt==1)
    4362:	78fb      	ldrb	r3, [r7, #3]
    4364:	2b01      	cmp	r3, #1
    4366:	d127      	bne.n	43b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1c8>
								StepFlapperValve(1);
    4368:	2101      	movs	r1, #1
    436a:	6878      	ldr	r0, [r7, #4]
    436c:	4b46      	ldr	r3, [pc, #280]	; (4488 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x298>)
    436e:	4798      	blx	r3
    4370:	e022      	b.n	43b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1c8>
							heatersRequestPower++;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	7f1b      	ldrb	r3, [r3, #28]
    4376:	3301      	adds	r3, #1
    4378:	b2da      	uxtb	r2, r3
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	771a      	strb	r2, [r3, #28]
							automaticHeatingMode=true;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	2201      	movs	r2, #1
    4382:	711a      	strb	r2, [r3, #4]
    4384:	e018      	b.n	43b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1c8>
						if (heatersRequestPower<1)
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	7f1b      	ldrb	r3, [r3, #28]
    438a:	2b00      	cmp	r3, #0
    438c:	dc0b      	bgt.n	43a6 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1b6>
							heatersRequestPower=0;
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	2200      	movs	r2, #0
    4392:	771a      	strb	r2, [r3, #28]
							if (opt==1)
    4394:	78fb      	ldrb	r3, [r7, #3]
    4396:	2b01      	cmp	r3, #1
    4398:	d10e      	bne.n	43b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1c8>
								StepFlapperValve(-1);
    439a:	f04f 31ff 	mov.w	r1, #4294967295
    439e:	6878      	ldr	r0, [r7, #4]
    43a0:	4b39      	ldr	r3, [pc, #228]	; (4488 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x298>)
    43a2:	4798      	blx	r3
    43a4:	e008      	b.n	43b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1c8>
							heatersRequestPower--;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	7f1b      	ldrb	r3, [r3, #28]
    43aa:	3b01      	subs	r3, #1
    43ac:	b2da      	uxtb	r2, r3
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	771a      	strb	r2, [r3, #28]
							automaticHeatingMode=false;
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	2200      	movs	r2, #0
    43b6:	711a      	strb	r2, [r3, #4]
					if (automaticHeatingMode!=heatingMode)
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	791a      	ldrb	r2, [r3, #4]
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    43c2:	429a      	cmp	r2, r3
    43c4:	d004      	beq.n	43d0 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1e0>
						changedMode=true;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	2201      	movs	r2, #1
    43ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    43ce:	e003      	b.n	43d8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x1e8>
						changedMode=false;
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	2200      	movs	r2, #0
    43d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					if (temperingTimeout|true)
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	795b      	ldrb	r3, [r3, #5]
    43dc:	2301      	movs	r3, #1
    43de:	2b00      	cmp	r3, #0
    43e0:	f000 80cc 	beq.w	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
						if (heatersRequestPower>currentPower)
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	7f1b      	ldrb	r3, [r3, #28]
    43e8:	461a      	mov	r2, r3
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	f893 3020 	ldrb.w	r3, [r3, #32]
    43f0:	429a      	cmp	r2, r3
    43f2:	dd4b      	ble.n	448c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x29c>
							if (temperingTimeout)
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	795b      	ldrb	r3, [r3, #5]
    43f8:	b2db      	uxtb	r3, r3
    43fa:	2b00      	cmp	r3, #0
    43fc:	f000 80be 	beq.w	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
									if ((lastPower!=heatersRequestPower)|temperingTimeout)
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	7fda      	ldrb	r2, [r3, #31]
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	7f1b      	ldrb	r3, [r3, #28]
    4408:	429a      	cmp	r2, r3
    440a:	bf14      	ite	ne
    440c:	2301      	movne	r3, #1
    440e:	2300      	moveq	r3, #0
    4410:	b2db      	uxtb	r3, r3
    4412:	461a      	mov	r2, r3
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	795b      	ldrb	r3, [r3, #5]
    4418:	b2db      	uxtb	r3, r3
    441a:	4313      	orrs	r3, r2
    441c:	2b00      	cmp	r3, #0
    441e:	bf14      	ite	ne
    4420:	2301      	movne	r3, #1
    4422:	2300      	moveq	r3, #0
    4424:	b2db      	uxtb	r3, r3
    4426:	2b00      	cmp	r3, #0
    4428:	f000 80a8 	beq.w	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
										lastPower=heatersRequestPower;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	7f1a      	ldrb	r2, [r3, #28]
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	77da      	strb	r2, [r3, #31]
										lastControlTemperature=cabinCurrentTemperature;
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	689a      	ldr	r2, [r3, #8]
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	619a      	str	r2, [r3, #24]
										lastMode=heatingMode;
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
										heatingMode=true;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	2201      	movs	r2, #1
    444c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
										SetHeaterDriver(heatersRequestPower);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	687a      	ldr	r2, [r7, #4]
    4458:	7f12      	ldrb	r2, [r2, #28]
    445a:	4611      	mov	r1, r2
    445c:	6878      	ldr	r0, [r7, #4]
    445e:	4798      	blx	r3
    4460:	e08c      	b.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
    4462:	bf00      	nop
    4464:	2000d118 	.word	0x2000d118
    4468:	0001bebd 	.word	0x0001bebd
    446c:	0001c449 	.word	0x0001c449
    4470:	0001c40d 	.word	0x0001c40d
    4474:	20001530 	.word	0x20001530
    4478:	000013b9 	.word	0x000013b9
    447c:	0001c029 	.word	0x0001c029
    4480:	20005814 	.word	0x20005814
    4484:	00017385 	.word	0x00017385
    4488:	000045bd 	.word	0x000045bd
							if (heatersRequestPower<currentPower)
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	7f1b      	ldrb	r3, [r3, #28]
    4490:	461a      	mov	r2, r3
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	f893 3020 	ldrb.w	r3, [r3, #32]
    4498:	429a      	cmp	r2, r3
    449a:	da6f      	bge.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
								if (currentPower<4)
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	f893 3020 	ldrb.w	r3, [r3, #32]
    44a2:	2b03      	cmp	r3, #3
    44a4:	dc4a      	bgt.n	453c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x34c>
									if (((lastControlTemperature-1/2)>cabinCurrentTemperature)|temperingTimeout)
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	699a      	ldr	r2, [r3, #24]
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	6899      	ldr	r1, [r3, #8]
    44ae:	2301      	movs	r3, #1
    44b0:	461c      	mov	r4, r3
    44b2:	4b3d      	ldr	r3, [pc, #244]	; (45a8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3b8>)
    44b4:	4610      	mov	r0, r2
    44b6:	4798      	blx	r3
    44b8:	4603      	mov	r3, r0
    44ba:	2b00      	cmp	r3, #0
    44bc:	d101      	bne.n	44c2 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x2d2>
    44be:	2300      	movs	r3, #0
    44c0:	461c      	mov	r4, r3
    44c2:	b2e3      	uxtb	r3, r4
    44c4:	461a      	mov	r2, r3
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	795b      	ldrb	r3, [r3, #5]
    44ca:	b2db      	uxtb	r3, r3
    44cc:	4313      	orrs	r3, r2
    44ce:	2b00      	cmp	r3, #0
    44d0:	bf14      	ite	ne
    44d2:	2301      	movne	r3, #1
    44d4:	2300      	moveq	r3, #0
    44d6:	b2db      	uxtb	r3, r3
    44d8:	2b00      	cmp	r3, #0
    44da:	d04f      	beq.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
										if ((lastPower!=heatersRequestPower)|temperingTimeout)
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	7fda      	ldrb	r2, [r3, #31]
    44e0:	687b      	ldr	r3, [r7, #4]
    44e2:	7f1b      	ldrb	r3, [r3, #28]
    44e4:	429a      	cmp	r2, r3
    44e6:	bf14      	ite	ne
    44e8:	2301      	movne	r3, #1
    44ea:	2300      	moveq	r3, #0
    44ec:	b2db      	uxtb	r3, r3
    44ee:	461a      	mov	r2, r3
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	795b      	ldrb	r3, [r3, #5]
    44f4:	b2db      	uxtb	r3, r3
    44f6:	4313      	orrs	r3, r2
    44f8:	2b00      	cmp	r3, #0
    44fa:	bf14      	ite	ne
    44fc:	2301      	movne	r3, #1
    44fe:	2300      	moveq	r3, #0
    4500:	b2db      	uxtb	r3, r3
    4502:	2b00      	cmp	r3, #0
    4504:	d03a      	beq.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
											lastPower=heatersRequestPower;
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	7f1a      	ldrb	r2, [r3, #28]
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	77da      	strb	r2, [r3, #31]
											lastControlTemperature=cabinCurrentTemperature;
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	689a      	ldr	r2, [r3, #8]
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	619a      	str	r2, [r3, #24]
													lastMode=heatingMode;
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
													heatingMode=false;
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	2200      	movs	r2, #0
    4526:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
											SetHeaterDriver(heatersRequestPower);
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	687a      	ldr	r2, [r7, #4]
    4532:	7f12      	ldrb	r2, [r2, #28]
    4534:	4611      	mov	r1, r2
    4536:	6878      	ldr	r0, [r7, #4]
    4538:	4798      	blx	r3
    453a:	e01f      	b.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
									if (lastPower!=heatersRequestPower)
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	7fda      	ldrb	r2, [r3, #31]
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7f1b      	ldrb	r3, [r3, #28]
    4544:	429a      	cmp	r2, r3
    4546:	d019      	beq.n	457c <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x38c>
										lastPower=heatersRequestPower;
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	7f1a      	ldrb	r2, [r3, #28]
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	77da      	strb	r2, [r3, #31]
										lastControlTemperature=cabinCurrentTemperature;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	689a      	ldr	r2, [r3, #8]
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	619a      	str	r2, [r3, #24]
										lastMode=heatingMode;
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
										heatingMode=false;
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	2200      	movs	r2, #0
    4568:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
										SetHeaterDriver(heatersRequestPower);
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	687a      	ldr	r2, [r7, #4]
    4574:	7f12      	ldrb	r2, [r2, #28]
    4576:	4611      	mov	r1, r2
    4578:	6878      	ldr	r0, [r7, #4]
    457a:	4798      	blx	r3
					if (heatersRequestPower==0)
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	7f1b      	ldrb	r3, [r3, #28]
    4580:	2b00      	cmp	r3, #0
    4582:	d106      	bne.n	4592 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3a2>
						hvac.Control_Cooler(errorTemperature);
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	691b      	ldr	r3, [r3, #16]
    4588:	4619      	mov	r1, r3
    458a:	4808      	ldr	r0, [pc, #32]	; (45ac <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3bc>)
    458c:	4b08      	ldr	r3, [pc, #32]	; (45b0 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3c0>)
    458e:	4798      	blx	r3
}
    4590:	e005      	b.n	459e <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3ae>
						fans.condesator->SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
    4592:	4b08      	ldr	r3, [pc, #32]	; (45b4 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3c4>)
    4594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4596:	2110      	movs	r1, #16
    4598:	4618      	mov	r0, r3
    459a:	4b07      	ldr	r3, [pc, #28]	; (45b8 <_ZN20AUTO_MODE_Controller26ControlTemperatureSetpointEh+0x3c8>)
    459c:	4798      	blx	r3
}
    459e:	bf00      	nop
    45a0:	370c      	adds	r7, #12
    45a2:	46bd      	mov	sp, r7
    45a4:	bd90      	pop	{r4, r7, pc}
    45a6:	bf00      	nop
    45a8:	0001c449 	.word	0x0001c449
    45ac:	20001060 	.word	0x20001060
    45b0:	00000f61 	.word	0x00000f61
    45b4:	20003b28 	.word	0x20003b28
    45b8:	00014ee9 	.word	0x00014ee9

000045bc <_ZN20AUTO_MODE_Controller16StepFlapperValveEi>:



uint8_t AUTO_MODE_Controller::StepFlapperValve(int dir){
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	6039      	str	r1, [r7, #0]
	currentAngle=fvc.GetCurrentPosition();
    45c6:	4814      	ldr	r0, [pc, #80]	; (4618 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x5c>)
    45c8:	4b14      	ldr	r3, [pc, #80]	; (461c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x60>)
    45ca:	4798      	blx	r3
    45cc:	4603      	mov	r3, r0
    45ce:	461a      	mov	r2, r3
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	779a      	strb	r2, [r3, #30]
	if (dir>0)
    45d4:	683b      	ldr	r3, [r7, #0]
    45d6:	2b00      	cmp	r3, #0
    45d8:	dd0c      	ble.n	45f4 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x38>
	{
		if (currentAngle<(0xff-FLAPPER_VALVE_STEP))
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	7f9b      	ldrb	r3, [r3, #30]
    45de:	2bf6      	cmp	r3, #246	; 0xf6
    45e0:	dc14      	bgt.n	460c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x50>
		{
			fvc.StartControlling(currentAngle+FLAPPER_VALVE_STEP);
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	7f9b      	ldrb	r3, [r3, #30]
    45e6:	3308      	adds	r3, #8
    45e8:	b2db      	uxtb	r3, r3
    45ea:	4619      	mov	r1, r3
    45ec:	480a      	ldr	r0, [pc, #40]	; (4618 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x5c>)
    45ee:	4b0c      	ldr	r3, [pc, #48]	; (4620 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x64>)
    45f0:	4798      	blx	r3
    45f2:	e00b      	b.n	460c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x50>
		}
		
	} 
	else
	{
		if (currentAngle<(FLAPPER_VALVE_STEP+1))
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	7f9b      	ldrb	r3, [r3, #30]
    45f8:	2b08      	cmp	r3, #8
    45fa:	dd07      	ble.n	460c <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x50>
		{
			
		}
		else
		{
			fvc.StartControlling(currentAngle-FLAPPER_VALVE_STEP);
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	7f9b      	ldrb	r3, [r3, #30]
    4600:	3b08      	subs	r3, #8
    4602:	b2db      	uxtb	r3, r3
    4604:	4619      	mov	r1, r3
    4606:	4804      	ldr	r0, [pc, #16]	; (4618 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x5c>)
    4608:	4b05      	ldr	r3, [pc, #20]	; (4620 <_ZN20AUTO_MODE_Controller16StepFlapperValveEi+0x64>)
    460a:	4798      	blx	r3
		}
	}
	
    460c:	bf00      	nop
    460e:	4618      	mov	r0, r3
    4610:	3708      	adds	r7, #8
    4612:	46bd      	mov	sp, r7
    4614:	bd80      	pop	{r7, pc}
    4616:	bf00      	nop
    4618:	20005598 	.word	0x20005598
    461c:	00016729 	.word	0x00016729
    4620:	00016471 	.word	0x00016471

00004624 <_Z41__static_initialization_and_destruction_0ii>:
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]
    462c:	6039      	str	r1, [r7, #0]
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	2b01      	cmp	r3, #1
    4632:	d143      	bne.n	46bc <_Z41__static_initialization_and_destruction_0ii+0x98>
    4634:	683b      	ldr	r3, [r7, #0]
    4636:	f64f 72ff 	movw	r2, #65535	; 0xffff
    463a:	4293      	cmp	r3, r2
    463c:	d13e      	bne.n	46bc <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    463e:	4921      	ldr	r1, [pc, #132]	; (46c4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    4640:	4821      	ldr	r0, [pc, #132]	; (46c8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    4642:	4b22      	ldr	r3, [pc, #136]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4644:	4798      	blx	r3
    4646:	4a22      	ldr	r2, [pc, #136]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4648:	4922      	ldr	r1, [pc, #136]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    464a:	481f      	ldr	r0, [pc, #124]	; (46c8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    464c:	4b22      	ldr	r3, [pc, #136]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    464e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    4650:	4922      	ldr	r1, [pc, #136]	; (46dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    4652:	4823      	ldr	r0, [pc, #140]	; (46e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    4654:	4b1d      	ldr	r3, [pc, #116]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4656:	4798      	blx	r3
    4658:	4a1d      	ldr	r2, [pc, #116]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    465a:	491e      	ldr	r1, [pc, #120]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    465c:	4820      	ldr	r0, [pc, #128]	; (46e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    465e:	4b1e      	ldr	r3, [pc, #120]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4660:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    4662:	4920      	ldr	r1, [pc, #128]	; (46e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    4664:	4820      	ldr	r0, [pc, #128]	; (46e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    4666:	4b19      	ldr	r3, [pc, #100]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4668:	4798      	blx	r3
    466a:	4a19      	ldr	r2, [pc, #100]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    466c:	4919      	ldr	r1, [pc, #100]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    466e:	481e      	ldr	r0, [pc, #120]	; (46e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    4670:	4b19      	ldr	r3, [pc, #100]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4672:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    4674:	491d      	ldr	r1, [pc, #116]	; (46ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    4676:	481e      	ldr	r0, [pc, #120]	; (46f0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    4678:	4b14      	ldr	r3, [pc, #80]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    467a:	4798      	blx	r3
    467c:	4a14      	ldr	r2, [pc, #80]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    467e:	4915      	ldr	r1, [pc, #84]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4680:	481b      	ldr	r0, [pc, #108]	; (46f0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    4682:	4b15      	ldr	r3, [pc, #84]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4684:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    4686:	491b      	ldr	r1, [pc, #108]	; (46f4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    4688:	481b      	ldr	r0, [pc, #108]	; (46f8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    468a:	4b10      	ldr	r3, [pc, #64]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    468c:	4798      	blx	r3
    468e:	4a10      	ldr	r2, [pc, #64]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4690:	4910      	ldr	r1, [pc, #64]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4692:	4819      	ldr	r0, [pc, #100]	; (46f8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    4694:	4b10      	ldr	r3, [pc, #64]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4696:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    4698:	4918      	ldr	r1, [pc, #96]	; (46fc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    469a:	4819      	ldr	r0, [pc, #100]	; (4700 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    469c:	4b0b      	ldr	r3, [pc, #44]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    469e:	4798      	blx	r3
    46a0:	4a0b      	ldr	r2, [pc, #44]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    46a2:	490c      	ldr	r1, [pc, #48]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    46a4:	4816      	ldr	r0, [pc, #88]	; (4700 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    46a6:	4b0c      	ldr	r3, [pc, #48]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    46a8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    46aa:	4916      	ldr	r1, [pc, #88]	; (4704 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    46ac:	4816      	ldr	r0, [pc, #88]	; (4708 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    46ae:	4b07      	ldr	r3, [pc, #28]	; (46cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    46b0:	4798      	blx	r3
    46b2:	4a07      	ldr	r2, [pc, #28]	; (46d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    46b4:	4907      	ldr	r1, [pc, #28]	; (46d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    46b6:	4814      	ldr	r0, [pc, #80]	; (4708 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    46b8:	4b07      	ldr	r3, [pc, #28]	; (46d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    46ba:	4798      	blx	r3
    46bc:	bf00      	nop
    46be:	3708      	adds	r7, #8
    46c0:	46bd      	mov	sp, r7
    46c2:	bd80      	pop	{r7, pc}
    46c4:	2000d6d8 	.word	0x2000d6d8
    46c8:	200015f0 	.word	0x200015f0
    46cc:	00013d09 	.word	0x00013d09
    46d0:	20000000 	.word	0x20000000
    46d4:	00013d41 	.word	0x00013d41
    46d8:	0001a44d 	.word	0x0001a44d
    46dc:	2000d76c 	.word	0x2000d76c
    46e0:	20001610 	.word	0x20001610
    46e4:	2000d870 	.word	0x2000d870
    46e8:	20001630 	.word	0x20001630
    46ec:	2000d78c 	.word	0x2000d78c
    46f0:	20001650 	.word	0x20001650
    46f4:	2000d830 	.word	0x2000d830
    46f8:	20001670 	.word	0x20001670
    46fc:	2000d850 	.word	0x2000d850
    4700:	20001690 	.word	0x20001690
    4704:	2000d748 	.word	0x2000d748
    4708:	200016b0 	.word	0x200016b0

0000470c <_GLOBAL__sub_I__ZN20AUTO_MODE_ControllerC2Ev>:
    470c:	b580      	push	{r7, lr}
    470e:	af00      	add	r7, sp, #0
    4710:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4714:	2001      	movs	r0, #1
    4716:	4b01      	ldr	r3, [pc, #4]	; (471c <_GLOBAL__sub_I__ZN20AUTO_MODE_ControllerC2Ev+0x10>)
    4718:	4798      	blx	r3
    471a:	bd80      	pop	{r7, pc}
    471c:	00004625 	.word	0x00004625

00004720 <_ZN9VENT_ModeC1Ev>:
#include "TemperatureSensors_Class.h"
#include "fastmath.h"
#include "States_Class.h"

// default constructor
VENT_Mode::VENT_Mode()
    4720:	b480      	push	{r7}
    4722:	b083      	sub	sp, #12
    4724:	af00      	add	r7, sp, #0
    4726:	6078      	str	r0, [r7, #4]
    4728:	4a07      	ldr	r2, [pc, #28]	; (4748 <_ZN9VENT_ModeC1Ev+0x28>)
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	601a      	str	r2, [r3, #0]
{
	heatersPower=0;
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	2200      	movs	r2, #0
    4732:	761a      	strb	r2, [r3, #24]
	evaFanSpeed=0;
    4734:	687b      	ldr	r3, [r7, #4]
    4736:	2200      	movs	r2, #0
    4738:	765a      	strb	r2, [r3, #25]
} //VENT_Mode
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	4618      	mov	r0, r3
    473e:	370c      	adds	r7, #12
    4740:	46bd      	mov	sp, r7
    4742:	bc80      	pop	{r7}
    4744:	4770      	bx	lr
    4746:	bf00      	nop
    4748:	0001cb28 	.word	0x0001cb28

0000474c <_ZN9VENT_ModeD1Ev>:

// default destructor
VENT_Mode::~VENT_Mode()
    474c:	b480      	push	{r7}
    474e:	b083      	sub	sp, #12
    4750:	af00      	add	r7, sp, #0
    4752:	6078      	str	r0, [r7, #4]
    4754:	4a04      	ldr	r2, [pc, #16]	; (4768 <_ZN9VENT_ModeD1Ev+0x1c>)
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	601a      	str	r2, [r3, #0]
{
} //~VENT_Mode
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	4618      	mov	r0, r3
    475e:	370c      	adds	r7, #12
    4760:	46bd      	mov	sp, r7
    4762:	bc80      	pop	{r7}
    4764:	4770      	bx	lr
    4766:	bf00      	nop
    4768:	0001cb28 	.word	0x0001cb28

0000476c <_ZN9VENT_Mode28OperateTemperatureBySetpointEh>:

void VENT_Mode::OperateTemperatureBySetpoint(uint8_t opt){
    476c:	b590      	push	{r4, r7, lr}
    476e:	b083      	sub	sp, #12
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
    4774:	460b      	mov	r3, r1
    4776:	70fb      	strb	r3, [r7, #3]
	cabinCurrentTemperature=temperatures.values[0][3];
    4778:	4b65      	ldr	r3, [pc, #404]	; (4910 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a4>)
    477a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	605a      	str	r2, [r3, #4]
	if (cabinCurrentTemperature>0)
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	685a      	ldr	r2, [r3, #4]
    4784:	4b63      	ldr	r3, [pc, #396]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    4786:	f04f 0100 	mov.w	r1, #0
    478a:	4610      	mov	r0, r2
    478c:	4798      	blx	r3
    478e:	4603      	mov	r3, r0
    4790:	2b00      	cmp	r3, #0
    4792:	d100      	bne.n	4796 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x2a>
		
	}
	
	
	
}
    4794:	e0b8      	b.n	4908 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x19c>
		currentSetpointTemperature=hvac.UpadateTemperatureSetpoint();
    4796:	4860      	ldr	r0, [pc, #384]	; (4918 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1ac>)
    4798:	4b60      	ldr	r3, [pc, #384]	; (491c <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b0>)
    479a:	4798      	blx	r3
    479c:	4602      	mov	r2, r0
    479e:	687b      	ldr	r3, [r7, #4]
    47a0:	609a      	str	r2, [r3, #8]
		if (currentSetpointTemperature>0)
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	689a      	ldr	r2, [r3, #8]
    47a6:	4b5b      	ldr	r3, [pc, #364]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    47a8:	f04f 0100 	mov.w	r1, #0
    47ac:	4610      	mov	r0, r2
    47ae:	4798      	blx	r3
    47b0:	4603      	mov	r3, r0
    47b2:	2b00      	cmp	r3, #0
    47b4:	d100      	bne.n	47b8 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x4c>
}
    47b6:	e0a7      	b.n	4908 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x19c>
			if (abs(lastSetpoint-currentSetpointTemperature)>VENT_MODE_TEMPERATURE_STEP)
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	68da      	ldr	r2, [r3, #12]
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	6899      	ldr	r1, [r3, #8]
    47c0:	4b57      	ldr	r3, [pc, #348]	; (4920 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b4>)
    47c2:	4610      	mov	r0, r2
    47c4:	4798      	blx	r3
    47c6:	4603      	mov	r3, r0
    47c8:	461a      	mov	r2, r3
    47ca:	4b52      	ldr	r3, [pc, #328]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    47cc:	f04f 0100 	mov.w	r1, #0
    47d0:	4610      	mov	r0, r2
    47d2:	4798      	blx	r3
    47d4:	4603      	mov	r3, r0
    47d6:	2b00      	cmp	r3, #0
    47d8:	d016      	beq.n	4808 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x9c>
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	68da      	ldr	r2, [r3, #12]
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	6899      	ldr	r1, [r3, #8]
    47e2:	4b4f      	ldr	r3, [pc, #316]	; (4920 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b4>)
    47e4:	4610      	mov	r0, r2
    47e6:	4798      	blx	r3
    47e8:	4603      	mov	r3, r0
    47ea:	461a      	mov	r2, r3
    47ec:	2301      	movs	r3, #1
    47ee:	461c      	mov	r4, r3
    47f0:	4b48      	ldr	r3, [pc, #288]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    47f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    47f6:	4610      	mov	r0, r2
    47f8:	4798      	blx	r3
    47fa:	4603      	mov	r3, r0
    47fc:	2b00      	cmp	r3, #0
    47fe:	d101      	bne.n	4804 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x98>
    4800:	2300      	movs	r3, #0
    4802:	461c      	mov	r4, r3
    4804:	b2e3      	uxtb	r3, r4
    4806:	e014      	b.n	4832 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xc6>
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	68da      	ldr	r2, [r3, #12]
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	6899      	ldr	r1, [r3, #8]
    4810:	4b43      	ldr	r3, [pc, #268]	; (4920 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b4>)
    4812:	4610      	mov	r0, r2
    4814:	4798      	blx	r3
    4816:	4603      	mov	r3, r0
    4818:	461a      	mov	r2, r3
    481a:	2301      	movs	r3, #1
    481c:	461c      	mov	r4, r3
    481e:	4b41      	ldr	r3, [pc, #260]	; (4924 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b8>)
    4820:	4941      	ldr	r1, [pc, #260]	; (4928 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1bc>)
    4822:	4610      	mov	r0, r2
    4824:	4798      	blx	r3
    4826:	4603      	mov	r3, r0
    4828:	2b00      	cmp	r3, #0
    482a:	d101      	bne.n	4830 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0xc4>
    482c:	2300      	movs	r3, #0
    482e:	461c      	mov	r4, r3
    4830:	b2e3      	uxtb	r3, r4
    4832:	2b00      	cmp	r3, #0
    4834:	d068      	beq.n	4908 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x19c>
				lastSetpoint=currentSetpointTemperature;
    4836:	687b      	ldr	r3, [r7, #4]
    4838:	689a      	ldr	r2, [r3, #8]
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	60da      	str	r2, [r3, #12]
				errorTemperature=currentSetpointTemperature-cabinCurrentTemperature;
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	689a      	ldr	r2, [r3, #8]
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	6859      	ldr	r1, [r3, #4]
    4846:	4b36      	ldr	r3, [pc, #216]	; (4920 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b4>)
    4848:	4610      	mov	r0, r2
    484a:	4798      	blx	r3
    484c:	4603      	mov	r3, r0
    484e:	461a      	mov	r2, r3
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	611a      	str	r2, [r3, #16]
				if (abs(errorTemperature)>2*VENT_MODE_TEMPERATURE_STEP)
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	691a      	ldr	r2, [r3, #16]
    4858:	4b2e      	ldr	r3, [pc, #184]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    485a:	f04f 0100 	mov.w	r1, #0
    485e:	4610      	mov	r0, r2
    4860:	4798      	blx	r3
    4862:	4603      	mov	r3, r0
    4864:	2b00      	cmp	r3, #0
    4866:	d00f      	beq.n	4888 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x11c>
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	691a      	ldr	r2, [r3, #16]
    486c:	2301      	movs	r3, #1
    486e:	461c      	mov	r4, r3
    4870:	4b28      	ldr	r3, [pc, #160]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    4872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4876:	4610      	mov	r0, r2
    4878:	4798      	blx	r3
    487a:	4603      	mov	r3, r0
    487c:	2b00      	cmp	r3, #0
    487e:	d101      	bne.n	4884 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x118>
    4880:	2300      	movs	r3, #0
    4882:	461c      	mov	r4, r3
    4884:	b2e3      	uxtb	r3, r4
    4886:	e00e      	b.n	48a6 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x13a>
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	691a      	ldr	r2, [r3, #16]
    488c:	2301      	movs	r3, #1
    488e:	461c      	mov	r4, r3
    4890:	4b24      	ldr	r3, [pc, #144]	; (4924 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1b8>)
    4892:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    4896:	4610      	mov	r0, r2
    4898:	4798      	blx	r3
    489a:	4603      	mov	r3, r0
    489c:	2b00      	cmp	r3, #0
    489e:	d101      	bne.n	48a4 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x138>
    48a0:	2300      	movs	r3, #0
    48a2:	461c      	mov	r4, r3
    48a4:	b2e3      	uxtb	r3, r4
    48a6:	2b00      	cmp	r3, #0
    48a8:	d02e      	beq.n	4908 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x19c>
					if (errorTemperature>0)
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	691a      	ldr	r2, [r3, #16]
    48ae:	4b19      	ldr	r3, [pc, #100]	; (4914 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x1a8>)
    48b0:	f04f 0100 	mov.w	r1, #0
    48b4:	4610      	mov	r0, r2
    48b6:	4798      	blx	r3
    48b8:	4603      	mov	r3, r0
    48ba:	2b00      	cmp	r3, #0
    48bc:	d00e      	beq.n	48dc <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x170>
						if (heatersPower>3)
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	7e1b      	ldrb	r3, [r3, #24]
    48c2:	2b03      	cmp	r3, #3
    48c4:	dd03      	ble.n	48ce <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x162>
							heatersPower=4;
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	2204      	movs	r2, #4
    48ca:	761a      	strb	r2, [r3, #24]
    48cc:	e014      	b.n	48f8 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x18c>
							heatersPower++;
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	7e1b      	ldrb	r3, [r3, #24]
    48d2:	3301      	adds	r3, #1
    48d4:	b2da      	uxtb	r2, r3
    48d6:	687b      	ldr	r3, [r7, #4]
    48d8:	761a      	strb	r2, [r3, #24]
    48da:	e00d      	b.n	48f8 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x18c>
						if (heatersPower<1)
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	7e1b      	ldrb	r3, [r3, #24]
    48e0:	2b00      	cmp	r3, #0
    48e2:	dc03      	bgt.n	48ec <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x180>
							heatersPower=0;
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	2200      	movs	r2, #0
    48e8:	761a      	strb	r2, [r3, #24]
    48ea:	e005      	b.n	48f8 <_ZN9VENT_Mode28OperateTemperatureBySetpointEh+0x18c>
							heatersPower--;
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	7e1b      	ldrb	r3, [r3, #24]
    48f0:	3b01      	subs	r3, #1
    48f2:	b2da      	uxtb	r2, r3
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	761a      	strb	r2, [r3, #24]
					SetHeaterDriver(heatersPower);
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	681b      	ldr	r3, [r3, #0]
    48fc:	681b      	ldr	r3, [r3, #0]
    48fe:	687a      	ldr	r2, [r7, #4]
    4900:	7e12      	ldrb	r2, [r2, #24]
    4902:	4611      	mov	r1, r2
    4904:	6878      	ldr	r0, [r7, #4]
    4906:	4798      	blx	r3
}
    4908:	bf00      	nop
    490a:	370c      	adds	r7, #12
    490c:	46bd      	mov	sp, r7
    490e:	bd90      	pop	{r4, r7, pc}
    4910:	2000d118 	.word	0x2000d118
    4914:	0001c449 	.word	0x0001c449
    4918:	20001530 	.word	0x20001530
    491c:	000013b9 	.word	0x000013b9
    4920:	0001bebd 	.word	0x0001bebd
    4924:	0001c40d 	.word	0x0001c40d
    4928:	bf800000 	.word	0xbf800000

0000492c <_Z41__static_initialization_and_destruction_0ii>:
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
    4934:	6039      	str	r1, [r7, #0]
    4936:	687b      	ldr	r3, [r7, #4]
    4938:	2b01      	cmp	r3, #1
    493a:	d143      	bne.n	49c4 <_Z41__static_initialization_and_destruction_0ii+0x98>
    493c:	683b      	ldr	r3, [r7, #0]
    493e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4942:	4293      	cmp	r3, r2
    4944:	d13e      	bne.n	49c4 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    4946:	4921      	ldr	r1, [pc, #132]	; (49cc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    4948:	4821      	ldr	r0, [pc, #132]	; (49d0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    494a:	4b22      	ldr	r3, [pc, #136]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    494c:	4798      	blx	r3
    494e:	4a22      	ldr	r2, [pc, #136]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4950:	4922      	ldr	r1, [pc, #136]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4952:	481f      	ldr	r0, [pc, #124]	; (49d0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    4954:	4b22      	ldr	r3, [pc, #136]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4956:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    4958:	4922      	ldr	r1, [pc, #136]	; (49e4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    495a:	4823      	ldr	r0, [pc, #140]	; (49e8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    495c:	4b1d      	ldr	r3, [pc, #116]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    495e:	4798      	blx	r3
    4960:	4a1d      	ldr	r2, [pc, #116]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4962:	491e      	ldr	r1, [pc, #120]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4964:	4820      	ldr	r0, [pc, #128]	; (49e8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    4966:	4b1e      	ldr	r3, [pc, #120]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    4968:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    496a:	4920      	ldr	r1, [pc, #128]	; (49ec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    496c:	4820      	ldr	r0, [pc, #128]	; (49f0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    496e:	4b19      	ldr	r3, [pc, #100]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4970:	4798      	blx	r3
    4972:	4a19      	ldr	r2, [pc, #100]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4974:	4919      	ldr	r1, [pc, #100]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4976:	481e      	ldr	r0, [pc, #120]	; (49f0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    4978:	4b19      	ldr	r3, [pc, #100]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    497a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    497c:	491d      	ldr	r1, [pc, #116]	; (49f4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    497e:	481e      	ldr	r0, [pc, #120]	; (49f8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    4980:	4b14      	ldr	r3, [pc, #80]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4982:	4798      	blx	r3
    4984:	4a14      	ldr	r2, [pc, #80]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4986:	4915      	ldr	r1, [pc, #84]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    4988:	481b      	ldr	r0, [pc, #108]	; (49f8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    498a:	4b15      	ldr	r3, [pc, #84]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    498c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    498e:	491b      	ldr	r1, [pc, #108]	; (49fc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    4990:	481b      	ldr	r0, [pc, #108]	; (4a00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    4992:	4b10      	ldr	r3, [pc, #64]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    4994:	4798      	blx	r3
    4996:	4a10      	ldr	r2, [pc, #64]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    4998:	4910      	ldr	r1, [pc, #64]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    499a:	4819      	ldr	r0, [pc, #100]	; (4a00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    499c:	4b10      	ldr	r3, [pc, #64]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    499e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    49a0:	4918      	ldr	r1, [pc, #96]	; (4a04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    49a2:	4819      	ldr	r0, [pc, #100]	; (4a08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    49a4:	4b0b      	ldr	r3, [pc, #44]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    49a6:	4798      	blx	r3
    49a8:	4a0b      	ldr	r2, [pc, #44]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    49aa:	490c      	ldr	r1, [pc, #48]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    49ac:	4816      	ldr	r0, [pc, #88]	; (4a08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    49ae:	4b0c      	ldr	r3, [pc, #48]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    49b0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    49b2:	4916      	ldr	r1, [pc, #88]	; (4a0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    49b4:	4816      	ldr	r0, [pc, #88]	; (4a10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    49b6:	4b07      	ldr	r3, [pc, #28]	; (49d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    49b8:	4798      	blx	r3
    49ba:	4a07      	ldr	r2, [pc, #28]	; (49d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    49bc:	4907      	ldr	r1, [pc, #28]	; (49dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    49be:	4814      	ldr	r0, [pc, #80]	; (4a10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    49c0:	4b07      	ldr	r3, [pc, #28]	; (49e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    49c2:	4798      	blx	r3
    49c4:	bf00      	nop
    49c6:	3708      	adds	r7, #8
    49c8:	46bd      	mov	sp, r7
    49ca:	bd80      	pop	{r7, pc}
    49cc:	2000d6d8 	.word	0x2000d6d8
    49d0:	200016d0 	.word	0x200016d0
    49d4:	00013d09 	.word	0x00013d09
    49d8:	20000000 	.word	0x20000000
    49dc:	00013d41 	.word	0x00013d41
    49e0:	0001a44d 	.word	0x0001a44d
    49e4:	2000d76c 	.word	0x2000d76c
    49e8:	200016f0 	.word	0x200016f0
    49ec:	2000d870 	.word	0x2000d870
    49f0:	20001710 	.word	0x20001710
    49f4:	2000d78c 	.word	0x2000d78c
    49f8:	20001730 	.word	0x20001730
    49fc:	2000d830 	.word	0x2000d830
    4a00:	20001750 	.word	0x20001750
    4a04:	2000d850 	.word	0x2000d850
    4a08:	20001770 	.word	0x20001770
    4a0c:	2000d748 	.word	0x2000d748
    4a10:	20001790 	.word	0x20001790

00004a14 <_GLOBAL__sub_I__ZN9VENT_ModeC2Ev>:
    4a14:	b580      	push	{r7, lr}
    4a16:	af00      	add	r7, sp, #0
    4a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a1c:	2001      	movs	r0, #1
    4a1e:	4b01      	ldr	r3, [pc, #4]	; (4a24 <_GLOBAL__sub_I__ZN9VENT_ModeC2Ev+0x10>)
    4a20:	4798      	blx	r3
    4a22:	bd80      	pop	{r7, pc}
    4a24:	0000492d 	.word	0x0000492d

00004a28 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	af00      	add	r7, sp, #0
	system_init();
    4a2c:	4b03      	ldr	r3, [pc, #12]	; (4a3c <atmel_start_init+0x14>)
    4a2e:	4798      	blx	r3
	usb_init();
    4a30:	4b03      	ldr	r3, [pc, #12]	; (4a40 <atmel_start_init+0x18>)
    4a32:	4798      	blx	r3
	spi_nor_flash_init();
    4a34:	4b03      	ldr	r3, [pc, #12]	; (4a44 <atmel_start_init+0x1c>)
    4a36:	4798      	blx	r3
}
    4a38:	bf00      	nop
    4a3a:	bd80      	pop	{r7, pc}
    4a3c:	00005db1 	.word	0x00005db1
    4a40:	0000ff69 	.word	0x0000ff69
    4a44:	0000fefd 	.word	0x0000fefd

00004a48 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4a48:	b480      	push	{r7}
    4a4a:	b085      	sub	sp, #20
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	60f8      	str	r0, [r7, #12]
    4a50:	460b      	mov	r3, r1
    4a52:	607a      	str	r2, [r7, #4]
    4a54:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4a56:	7afa      	ldrb	r2, [r7, #11]
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	3220      	adds	r2, #32
    4a5c:	6879      	ldr	r1, [r7, #4]
    4a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4a62:	bf00      	nop
    4a64:	3714      	adds	r7, #20
    4a66:	46bd      	mov	sp, r7
    4a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a6c:	4770      	bx	lr

00004a6e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    4a6e:	b480      	push	{r7}
    4a70:	b083      	sub	sp, #12
    4a72:	af00      	add	r7, sp, #0
    4a74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	691b      	ldr	r3, [r3, #16]
    4a7a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a82:	bf00      	nop
    4a84:	370c      	adds	r7, #12
    4a86:	46bd      	mov	sp, r7
    4a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a8c:	4770      	bx	lr

00004a8e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    4a8e:	b480      	push	{r7}
    4a90:	b083      	sub	sp, #12
    4a92:	af00      	add	r7, sp, #0
    4a94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	691b      	ldr	r3, [r3, #16]
    4a9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4aa2:	bf00      	nop
    4aa4:	370c      	adds	r7, #12
    4aa6:	46bd      	mov	sp, r7
    4aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aac:	4770      	bx	lr

00004aae <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    4aae:	b480      	push	{r7}
    4ab0:	b083      	sub	sp, #12
    4ab2:	af00      	add	r7, sp, #0
    4ab4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	691b      	ldr	r3, [r3, #16]
    4aba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ac2:	bf00      	nop
    4ac4:	370c      	adds	r7, #12
    4ac6:	46bd      	mov	sp, r7
    4ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4acc:	4770      	bx	lr

00004ace <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    4ace:	b480      	push	{r7}
    4ad0:	b083      	sub	sp, #12
    4ad2:	af00      	add	r7, sp, #0
    4ad4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	691b      	ldr	r3, [r3, #16]
    4ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4ade:	687b      	ldr	r3, [r7, #4]
    4ae0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ae2:	bf00      	nop
    4ae4:	370c      	adds	r7, #12
    4ae6:	46bd      	mov	sp, r7
    4ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aec:	4770      	bx	lr

00004aee <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4aee:	b480      	push	{r7}
    4af0:	b083      	sub	sp, #12
    4af2:	af00      	add	r7, sp, #0
    4af4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	695b      	ldr	r3, [r3, #20]
    4afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4afe:	687b      	ldr	r3, [r7, #4]
    4b00:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b02:	bf00      	nop
    4b04:	370c      	adds	r7, #12
    4b06:	46bd      	mov	sp, r7
    4b08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b0c:	4770      	bx	lr

00004b0e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4b0e:	b480      	push	{r7}
    4b10:	b083      	sub	sp, #12
    4b12:	af00      	add	r7, sp, #0
    4b14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	695b      	ldr	r3, [r3, #20]
    4b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b22:	bf00      	nop
    4b24:	370c      	adds	r7, #12
    4b26:	46bd      	mov	sp, r7
    4b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2c:	4770      	bx	lr

00004b2e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4b2e:	b480      	push	{r7}
    4b30:	b083      	sub	sp, #12
    4b32:	af00      	add	r7, sp, #0
    4b34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	695b      	ldr	r3, [r3, #20]
    4b3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b42:	bf00      	nop
    4b44:	370c      	adds	r7, #12
    4b46:	46bd      	mov	sp, r7
    4b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4c:	4770      	bx	lr

00004b4e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4b4e:	b480      	push	{r7}
    4b50:	b083      	sub	sp, #12
    4b52:	af00      	add	r7, sp, #0
    4b54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    4b56:	687b      	ldr	r3, [r7, #4]
    4b58:	695b      	ldr	r3, [r3, #20]
    4b5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b62:	bf00      	nop
    4b64:	370c      	adds	r7, #12
    4b66:	46bd      	mov	sp, r7
    4b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6c:	4770      	bx	lr

00004b6e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    4b6e:	b480      	push	{r7}
    4b70:	b083      	sub	sp, #12
    4b72:	af00      	add	r7, sp, #0
    4b74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    4b76:	687b      	ldr	r3, [r7, #4]
    4b78:	695b      	ldr	r3, [r3, #20]
    4b7a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b82:	bf00      	nop
    4b84:	370c      	adds	r7, #12
    4b86:	46bd      	mov	sp, r7
    4b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8c:	4770      	bx	lr

00004b8e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    4b8e:	b480      	push	{r7}
    4b90:	b083      	sub	sp, #12
    4b92:	af00      	add	r7, sp, #0
    4b94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4b96:	687b      	ldr	r3, [r7, #4]
    4b98:	699b      	ldr	r3, [r3, #24]
    4b9a:	f043 0201 	orr.w	r2, r3, #1
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ba2:	bf00      	nop
    4ba4:	370c      	adds	r7, #12
    4ba6:	46bd      	mov	sp, r7
    4ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bac:	4770      	bx	lr

00004bae <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    4bae:	b480      	push	{r7}
    4bb0:	b083      	sub	sp, #12
    4bb2:	af00      	add	r7, sp, #0
    4bb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	699b      	ldr	r3, [r3, #24]
    4bba:	f043 0202 	orr.w	r2, r3, #2
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4bc2:	bf00      	nop
    4bc4:	370c      	adds	r7, #12
    4bc6:	46bd      	mov	sp, r7
    4bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bcc:	4770      	bx	lr

00004bce <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4bce:	b480      	push	{r7}
    4bd0:	b083      	sub	sp, #12
    4bd2:	af00      	add	r7, sp, #0
    4bd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	699b      	ldr	r3, [r3, #24]
    4bda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4be2:	bf00      	nop
    4be4:	370c      	adds	r7, #12
    4be6:	46bd      	mov	sp, r7
    4be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bec:	4770      	bx	lr

00004bee <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    4bee:	b480      	push	{r7}
    4bf0:	b083      	sub	sp, #12
    4bf2:	af00      	add	r7, sp, #0
    4bf4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	699b      	ldr	r3, [r3, #24]
    4bfa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c02:	bf00      	nop
    4c04:	370c      	adds	r7, #12
    4c06:	46bd      	mov	sp, r7
    4c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c0c:	4770      	bx	lr

00004c0e <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    4c0e:	b480      	push	{r7}
    4c10:	b083      	sub	sp, #12
    4c12:	af00      	add	r7, sp, #0
    4c14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	699b      	ldr	r3, [r3, #24]
    4c1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c22:	bf00      	nop
    4c24:	370c      	adds	r7, #12
    4c26:	46bd      	mov	sp, r7
    4c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2c:	4770      	bx	lr

00004c2e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    4c2e:	b480      	push	{r7}
    4c30:	b083      	sub	sp, #12
    4c32:	af00      	add	r7, sp, #0
    4c34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    4c36:	687b      	ldr	r3, [r7, #4]
    4c38:	699b      	ldr	r3, [r3, #24]
    4c3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c42:	bf00      	nop
    4c44:	370c      	adds	r7, #12
    4c46:	46bd      	mov	sp, r7
    4c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4c:	4770      	bx	lr

00004c4e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    4c4e:	b480      	push	{r7}
    4c50:	b083      	sub	sp, #12
    4c52:	af00      	add	r7, sp, #0
    4c54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	69db      	ldr	r3, [r3, #28]
    4c5a:	f043 0220 	orr.w	r2, r3, #32
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c62:	bf00      	nop
    4c64:	370c      	adds	r7, #12
    4c66:	46bd      	mov	sp, r7
    4c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6c:	4770      	bx	lr

00004c6e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    4c6e:	b480      	push	{r7}
    4c70:	b083      	sub	sp, #12
    4c72:	af00      	add	r7, sp, #0
    4c74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	69db      	ldr	r3, [r3, #28]
    4c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c82:	bf00      	nop
    4c84:	370c      	adds	r7, #12
    4c86:	46bd      	mov	sp, r7
    4c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c8c:	4770      	bx	lr

00004c8e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    4c8e:	b480      	push	{r7}
    4c90:	b083      	sub	sp, #12
    4c92:	af00      	add	r7, sp, #0
    4c94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	69db      	ldr	r3, [r3, #28]
    4c9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4c9e:	687b      	ldr	r3, [r7, #4]
    4ca0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ca2:	bf00      	nop
    4ca4:	370c      	adds	r7, #12
    4ca6:	46bd      	mov	sp, r7
    4ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cac:	4770      	bx	lr

00004cae <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4cae:	b480      	push	{r7}
    4cb0:	b083      	sub	sp, #12
    4cb2:	af00      	add	r7, sp, #0
    4cb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4cb6:	687b      	ldr	r3, [r7, #4]
    4cb8:	6a1b      	ldr	r3, [r3, #32]
    4cba:	f043 0201 	orr.w	r2, r3, #1
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4cc2:	bf00      	nop
    4cc4:	370c      	adds	r7, #12
    4cc6:	46bd      	mov	sp, r7
    4cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ccc:	4770      	bx	lr

00004cce <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4cce:	b480      	push	{r7}
    4cd0:	b083      	sub	sp, #12
    4cd2:	af00      	add	r7, sp, #0
    4cd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	6a1b      	ldr	r3, [r3, #32]
    4cda:	f043 0202 	orr.w	r2, r3, #2
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ce2:	bf00      	nop
    4ce4:	370c      	adds	r7, #12
    4ce6:	46bd      	mov	sp, r7
    4ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cec:	4770      	bx	lr

00004cee <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4cee:	b480      	push	{r7}
    4cf0:	b083      	sub	sp, #12
    4cf2:	af00      	add	r7, sp, #0
    4cf4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4cf6:	687b      	ldr	r3, [r7, #4]
    4cf8:	6a1b      	ldr	r3, [r3, #32]
    4cfa:	f043 0204 	orr.w	r2, r3, #4
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d02:	bf00      	nop
    4d04:	370c      	adds	r7, #12
    4d06:	46bd      	mov	sp, r7
    4d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d0c:	4770      	bx	lr

00004d0e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4d0e:	b480      	push	{r7}
    4d10:	b083      	sub	sp, #12
    4d12:	af00      	add	r7, sp, #0
    4d14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4d16:	687b      	ldr	r3, [r7, #4]
    4d18:	6a1b      	ldr	r3, [r3, #32]
    4d1a:	f043 0208 	orr.w	r2, r3, #8
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d22:	bf00      	nop
    4d24:	370c      	adds	r7, #12
    4d26:	46bd      	mov	sp, r7
    4d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2c:	4770      	bx	lr

00004d2e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4d2e:	b480      	push	{r7}
    4d30:	b083      	sub	sp, #12
    4d32:	af00      	add	r7, sp, #0
    4d34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    4d36:	687b      	ldr	r3, [r7, #4]
    4d38:	6a1b      	ldr	r3, [r3, #32]
    4d3a:	f043 0220 	orr.w	r2, r3, #32
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d42:	bf00      	nop
    4d44:	370c      	adds	r7, #12
    4d46:	46bd      	mov	sp, r7
    4d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4c:	4770      	bx	lr

00004d4e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    4d4e:	b480      	push	{r7}
    4d50:	b083      	sub	sp, #12
    4d52:	af00      	add	r7, sp, #0
    4d54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	6a1b      	ldr	r3, [r3, #32]
    4d5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d62:	bf00      	nop
    4d64:	370c      	adds	r7, #12
    4d66:	46bd      	mov	sp, r7
    4d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6c:	4770      	bx	lr

00004d6e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4d6e:	b480      	push	{r7}
    4d70:	b085      	sub	sp, #20
    4d72:	af00      	add	r7, sp, #0
    4d74:	60f8      	str	r0, [r7, #12]
    4d76:	460b      	mov	r3, r1
    4d78:	607a      	str	r2, [r7, #4]
    4d7a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d7c:	7afb      	ldrb	r3, [r7, #11]
    4d7e:	68fa      	ldr	r2, [r7, #12]
    4d80:	01db      	lsls	r3, r3, #7
    4d82:	4413      	add	r3, r2
    4d84:	3308      	adds	r3, #8
    4d86:	687a      	ldr	r2, [r7, #4]
    4d88:	601a      	str	r2, [r3, #0]
}
    4d8a:	bf00      	nop
    4d8c:	3714      	adds	r7, #20
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr

00004d96 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4d96:	b480      	push	{r7}
    4d98:	b085      	sub	sp, #20
    4d9a:	af00      	add	r7, sp, #0
    4d9c:	60f8      	str	r0, [r7, #12]
    4d9e:	460b      	mov	r3, r1
    4da0:	607a      	str	r2, [r7, #4]
    4da2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4da4:	7afb      	ldrb	r3, [r7, #11]
    4da6:	68fa      	ldr	r2, [r7, #12]
    4da8:	01db      	lsls	r3, r3, #7
    4daa:	4413      	add	r3, r2
    4dac:	3304      	adds	r3, #4
    4dae:	687a      	ldr	r2, [r7, #4]
    4db0:	601a      	str	r2, [r3, #0]
}
    4db2:	bf00      	nop
    4db4:	3714      	adds	r7, #20
    4db6:	46bd      	mov	sp, r7
    4db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dbc:	4770      	bx	lr

00004dbe <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4dbe:	b480      	push	{r7}
    4dc0:	b085      	sub	sp, #20
    4dc2:	af00      	add	r7, sp, #0
    4dc4:	60f8      	str	r0, [r7, #12]
    4dc6:	460b      	mov	r3, r1
    4dc8:	607a      	str	r2, [r7, #4]
    4dca:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4dcc:	7afb      	ldrb	r3, [r7, #11]
    4dce:	68fa      	ldr	r2, [r7, #12]
    4dd0:	01db      	lsls	r3, r3, #7
    4dd2:	4413      	add	r3, r2
    4dd4:	3318      	adds	r3, #24
    4dd6:	687a      	ldr	r2, [r7, #4]
    4dd8:	601a      	str	r2, [r3, #0]
}
    4dda:	bf00      	nop
    4ddc:	3714      	adds	r7, #20
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr

00004de6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4de6:	b480      	push	{r7}
    4de8:	b085      	sub	sp, #20
    4dea:	af00      	add	r7, sp, #0
    4dec:	60f8      	str	r0, [r7, #12]
    4dee:	460b      	mov	r3, r1
    4df0:	607a      	str	r2, [r7, #4]
    4df2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4df4:	7afb      	ldrb	r3, [r7, #11]
    4df6:	68fa      	ldr	r2, [r7, #12]
    4df8:	01db      	lsls	r3, r3, #7
    4dfa:	4413      	add	r3, r2
    4dfc:	3314      	adds	r3, #20
    4dfe:	687a      	ldr	r2, [r7, #4]
    4e00:	601a      	str	r2, [r3, #0]
}
    4e02:	bf00      	nop
    4e04:	3714      	adds	r7, #20
    4e06:	46bd      	mov	sp, r7
    4e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e0c:	4770      	bx	lr

00004e0e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4e0e:	b480      	push	{r7}
    4e10:	b085      	sub	sp, #20
    4e12:	af00      	add	r7, sp, #0
    4e14:	6078      	str	r0, [r7, #4]
    4e16:	4608      	mov	r0, r1
    4e18:	4611      	mov	r1, r2
    4e1a:	461a      	mov	r2, r3
    4e1c:	4603      	mov	r3, r0
    4e1e:	70fb      	strb	r3, [r7, #3]
    4e20:	460b      	mov	r3, r1
    4e22:	70bb      	strb	r3, [r7, #2]
    4e24:	4613      	mov	r3, r2
    4e26:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4e28:	78fa      	ldrb	r2, [r7, #3]
    4e2a:	78bb      	ldrb	r3, [r7, #2]
    4e2c:	6879      	ldr	r1, [r7, #4]
    4e2e:	01d2      	lsls	r2, r2, #7
    4e30:	440a      	add	r2, r1
    4e32:	4413      	add	r3, r2
    4e34:	3330      	adds	r3, #48	; 0x30
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4e3a:	7bfb      	ldrb	r3, [r7, #15]
    4e3c:	f023 030f 	bic.w	r3, r3, #15
    4e40:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4e42:	787b      	ldrb	r3, [r7, #1]
    4e44:	f003 030f 	and.w	r3, r3, #15
    4e48:	b2da      	uxtb	r2, r3
    4e4a:	7bfb      	ldrb	r3, [r7, #15]
    4e4c:	4313      	orrs	r3, r2
    4e4e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4e50:	78fa      	ldrb	r2, [r7, #3]
    4e52:	78bb      	ldrb	r3, [r7, #2]
    4e54:	6879      	ldr	r1, [r7, #4]
    4e56:	01d2      	lsls	r2, r2, #7
    4e58:	440a      	add	r2, r1
    4e5a:	4413      	add	r3, r2
    4e5c:	3330      	adds	r3, #48	; 0x30
    4e5e:	7bfa      	ldrb	r2, [r7, #15]
    4e60:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4e62:	bf00      	nop
    4e64:	3714      	adds	r7, #20
    4e66:	46bd      	mov	sp, r7
    4e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e6c:	4770      	bx	lr

00004e6e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4e6e:	b480      	push	{r7}
    4e70:	b085      	sub	sp, #20
    4e72:	af00      	add	r7, sp, #0
    4e74:	6078      	str	r0, [r7, #4]
    4e76:	4608      	mov	r0, r1
    4e78:	4611      	mov	r1, r2
    4e7a:	461a      	mov	r2, r3
    4e7c:	4603      	mov	r3, r0
    4e7e:	70fb      	strb	r3, [r7, #3]
    4e80:	460b      	mov	r3, r1
    4e82:	70bb      	strb	r3, [r7, #2]
    4e84:	4613      	mov	r3, r2
    4e86:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4e88:	78fa      	ldrb	r2, [r7, #3]
    4e8a:	78bb      	ldrb	r3, [r7, #2]
    4e8c:	6879      	ldr	r1, [r7, #4]
    4e8e:	01d2      	lsls	r2, r2, #7
    4e90:	440a      	add	r2, r1
    4e92:	4413      	add	r3, r2
    4e94:	3330      	adds	r3, #48	; 0x30
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4e9a:	7bfb      	ldrb	r3, [r7, #15]
    4e9c:	f003 030f 	and.w	r3, r3, #15
    4ea0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4ea2:	787b      	ldrb	r3, [r7, #1]
    4ea4:	011b      	lsls	r3, r3, #4
    4ea6:	b2da      	uxtb	r2, r3
    4ea8:	7bfb      	ldrb	r3, [r7, #15]
    4eaa:	4313      	orrs	r3, r2
    4eac:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4eae:	78fa      	ldrb	r2, [r7, #3]
    4eb0:	78bb      	ldrb	r3, [r7, #2]
    4eb2:	6879      	ldr	r1, [r7, #4]
    4eb4:	01d2      	lsls	r2, r2, #7
    4eb6:	440a      	add	r2, r1
    4eb8:	4413      	add	r3, r2
    4eba:	3330      	adds	r3, #48	; 0x30
    4ebc:	7bfa      	ldrb	r2, [r7, #15]
    4ebe:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4ec0:	bf00      	nop
    4ec2:	3714      	adds	r7, #20
    4ec4:	46bd      	mov	sp, r7
    4ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eca:	4770      	bx	lr

00004ecc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4ecc:	b480      	push	{r7}
    4ece:	b085      	sub	sp, #20
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
    4ed4:	4608      	mov	r0, r1
    4ed6:	4611      	mov	r1, r2
    4ed8:	461a      	mov	r2, r3
    4eda:	4603      	mov	r3, r0
    4edc:	70fb      	strb	r3, [r7, #3]
    4ede:	460b      	mov	r3, r1
    4ee0:	70bb      	strb	r3, [r7, #2]
    4ee2:	4613      	mov	r3, r2
    4ee4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ee6:	78fa      	ldrb	r2, [r7, #3]
    4ee8:	78bb      	ldrb	r3, [r7, #2]
    4eea:	6879      	ldr	r1, [r7, #4]
    4eec:	01d2      	lsls	r2, r2, #7
    4eee:	440a      	add	r2, r1
    4ef0:	4413      	add	r3, r2
    4ef2:	3340      	adds	r3, #64	; 0x40
    4ef4:	781b      	ldrb	r3, [r3, #0]
    4ef6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ef8:	7bfb      	ldrb	r3, [r7, #15]
    4efa:	f023 0301 	bic.w	r3, r3, #1
    4efe:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4f00:	787a      	ldrb	r2, [r7, #1]
    4f02:	7bfb      	ldrb	r3, [r7, #15]
    4f04:	4313      	orrs	r3, r2
    4f06:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f08:	78fa      	ldrb	r2, [r7, #3]
    4f0a:	78bb      	ldrb	r3, [r7, #2]
    4f0c:	6879      	ldr	r1, [r7, #4]
    4f0e:	01d2      	lsls	r2, r2, #7
    4f10:	440a      	add	r2, r1
    4f12:	4413      	add	r3, r2
    4f14:	3340      	adds	r3, #64	; 0x40
    4f16:	7bfa      	ldrb	r2, [r7, #15]
    4f18:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4f1a:	bf00      	nop
    4f1c:	3714      	adds	r7, #20
    4f1e:	46bd      	mov	sp, r7
    4f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f24:	4770      	bx	lr

00004f26 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4f26:	b490      	push	{r4, r7}
    4f28:	b082      	sub	sp, #8
    4f2a:	af00      	add	r7, sp, #0
    4f2c:	6078      	str	r0, [r7, #4]
    4f2e:	460b      	mov	r3, r1
    4f30:	70fb      	strb	r3, [r7, #3]
    4f32:	4613      	mov	r3, r2
    4f34:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f36:	78fa      	ldrb	r2, [r7, #3]
    4f38:	78bb      	ldrb	r3, [r7, #2]
    4f3a:	78f8      	ldrb	r0, [r7, #3]
    4f3c:	78b9      	ldrb	r1, [r7, #2]
    4f3e:	687c      	ldr	r4, [r7, #4]
    4f40:	01c0      	lsls	r0, r0, #7
    4f42:	4420      	add	r0, r4
    4f44:	4401      	add	r1, r0
    4f46:	3140      	adds	r1, #64	; 0x40
    4f48:	7809      	ldrb	r1, [r1, #0]
    4f4a:	b2c9      	uxtb	r1, r1
    4f4c:	f041 0104 	orr.w	r1, r1, #4
    4f50:	b2c8      	uxtb	r0, r1
    4f52:	6879      	ldr	r1, [r7, #4]
    4f54:	01d2      	lsls	r2, r2, #7
    4f56:	440a      	add	r2, r1
    4f58:	4413      	add	r3, r2
    4f5a:	3340      	adds	r3, #64	; 0x40
    4f5c:	4602      	mov	r2, r0
    4f5e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4f60:	bf00      	nop
    4f62:	3708      	adds	r7, #8
    4f64:	46bd      	mov	sp, r7
    4f66:	bc90      	pop	{r4, r7}
    4f68:	4770      	bx	lr

00004f6a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4f6a:	b490      	push	{r4, r7}
    4f6c:	b082      	sub	sp, #8
    4f6e:	af00      	add	r7, sp, #0
    4f70:	6078      	str	r0, [r7, #4]
    4f72:	460b      	mov	r3, r1
    4f74:	70fb      	strb	r3, [r7, #3]
    4f76:	4613      	mov	r3, r2
    4f78:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f7a:	78fa      	ldrb	r2, [r7, #3]
    4f7c:	78bb      	ldrb	r3, [r7, #2]
    4f7e:	78f8      	ldrb	r0, [r7, #3]
    4f80:	78b9      	ldrb	r1, [r7, #2]
    4f82:	687c      	ldr	r4, [r7, #4]
    4f84:	01c0      	lsls	r0, r0, #7
    4f86:	4420      	add	r0, r4
    4f88:	4401      	add	r1, r0
    4f8a:	3140      	adds	r1, #64	; 0x40
    4f8c:	7809      	ldrb	r1, [r1, #0]
    4f8e:	b2c9      	uxtb	r1, r1
    4f90:	f021 0104 	bic.w	r1, r1, #4
    4f94:	b2c8      	uxtb	r0, r1
    4f96:	6879      	ldr	r1, [r7, #4]
    4f98:	01d2      	lsls	r2, r2, #7
    4f9a:	440a      	add	r2, r1
    4f9c:	4413      	add	r3, r2
    4f9e:	3340      	adds	r3, #64	; 0x40
    4fa0:	4602      	mov	r2, r0
    4fa2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4fa4:	bf00      	nop
    4fa6:	3708      	adds	r7, #8
    4fa8:	46bd      	mov	sp, r7
    4faa:	bc90      	pop	{r4, r7}
    4fac:	4770      	bx	lr

00004fae <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    4fae:	b480      	push	{r7}
    4fb0:	b085      	sub	sp, #20
    4fb2:	af00      	add	r7, sp, #0
    4fb4:	60f8      	str	r0, [r7, #12]
    4fb6:	460b      	mov	r3, r1
    4fb8:	607a      	str	r2, [r7, #4]
    4fba:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fbc:	7afb      	ldrb	r3, [r7, #11]
    4fbe:	68fa      	ldr	r2, [r7, #12]
    4fc0:	01db      	lsls	r3, r3, #7
    4fc2:	4413      	add	r3, r2
    4fc4:	3328      	adds	r3, #40	; 0x28
    4fc6:	687a      	ldr	r2, [r7, #4]
    4fc8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4fca:	bf00      	nop
    4fcc:	3714      	adds	r7, #20
    4fce:	46bd      	mov	sp, r7
    4fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd4:	4770      	bx	lr
	...

00004fd8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b082      	sub	sp, #8
    4fdc:	af00      	add	r7, sp, #0
    4fde:	4603      	mov	r3, r0
    4fe0:	6039      	str	r1, [r7, #0]
    4fe2:	71fb      	strb	r3, [r7, #7]
    4fe4:	4613      	mov	r3, r2
    4fe6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4fe8:	79bb      	ldrb	r3, [r7, #6]
    4fea:	2b01      	cmp	r3, #1
    4fec:	d01c      	beq.n	5028 <_gpio_set_direction+0x50>
    4fee:	2b02      	cmp	r3, #2
    4ff0:	d037      	beq.n	5062 <_gpio_set_direction+0x8a>
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d14e      	bne.n	5094 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4ff6:	79fb      	ldrb	r3, [r7, #7]
    4ff8:	683a      	ldr	r2, [r7, #0]
    4ffa:	4619      	mov	r1, r3
    4ffc:	482a      	ldr	r0, [pc, #168]	; (50a8 <_gpio_set_direction+0xd0>)
    4ffe:	4b2b      	ldr	r3, [pc, #172]	; (50ac <_gpio_set_direction+0xd4>)
    5000:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5002:	683b      	ldr	r3, [r7, #0]
    5004:	b29b      	uxth	r3, r3
    5006:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    500a:	79fb      	ldrb	r3, [r7, #7]
    500c:	4619      	mov	r1, r3
    500e:	4826      	ldr	r0, [pc, #152]	; (50a8 <_gpio_set_direction+0xd0>)
    5010:	4b27      	ldr	r3, [pc, #156]	; (50b0 <_gpio_set_direction+0xd8>)
    5012:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5014:	683b      	ldr	r3, [r7, #0]
    5016:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    5018:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    501c:	79fb      	ldrb	r3, [r7, #7]
    501e:	4619      	mov	r1, r3
    5020:	4821      	ldr	r0, [pc, #132]	; (50a8 <_gpio_set_direction+0xd0>)
    5022:	4b23      	ldr	r3, [pc, #140]	; (50b0 <_gpio_set_direction+0xd8>)
    5024:	4798      	blx	r3
		break;
    5026:	e03a      	b.n	509e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    5028:	79fb      	ldrb	r3, [r7, #7]
    502a:	683a      	ldr	r2, [r7, #0]
    502c:	4619      	mov	r1, r3
    502e:	481e      	ldr	r0, [pc, #120]	; (50a8 <_gpio_set_direction+0xd0>)
    5030:	4b1e      	ldr	r3, [pc, #120]	; (50ac <_gpio_set_direction+0xd4>)
    5032:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	b29b      	uxth	r3, r3
    5038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    503c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5040:	79f9      	ldrb	r1, [r7, #7]
    5042:	461a      	mov	r2, r3
    5044:	4818      	ldr	r0, [pc, #96]	; (50a8 <_gpio_set_direction+0xd0>)
    5046:	4b1a      	ldr	r3, [pc, #104]	; (50b0 <_gpio_set_direction+0xd8>)
    5048:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    504a:	683b      	ldr	r3, [r7, #0]
    504c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    504e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5056:	79f9      	ldrb	r1, [r7, #7]
    5058:	461a      	mov	r2, r3
    505a:	4813      	ldr	r0, [pc, #76]	; (50a8 <_gpio_set_direction+0xd0>)
    505c:	4b14      	ldr	r3, [pc, #80]	; (50b0 <_gpio_set_direction+0xd8>)
    505e:	4798      	blx	r3
		break;
    5060:	e01d      	b.n	509e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    5062:	79fb      	ldrb	r3, [r7, #7]
    5064:	683a      	ldr	r2, [r7, #0]
    5066:	4619      	mov	r1, r3
    5068:	480f      	ldr	r0, [pc, #60]	; (50a8 <_gpio_set_direction+0xd0>)
    506a:	4b12      	ldr	r3, [pc, #72]	; (50b4 <_gpio_set_direction+0xdc>)
    506c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    506e:	683b      	ldr	r3, [r7, #0]
    5070:	b29b      	uxth	r3, r3
    5072:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    5076:	79fb      	ldrb	r3, [r7, #7]
    5078:	4619      	mov	r1, r3
    507a:	480b      	ldr	r0, [pc, #44]	; (50a8 <_gpio_set_direction+0xd0>)
    507c:	4b0c      	ldr	r3, [pc, #48]	; (50b0 <_gpio_set_direction+0xd8>)
    507e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5080:	683b      	ldr	r3, [r7, #0]
    5082:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    5084:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    5088:	79fb      	ldrb	r3, [r7, #7]
    508a:	4619      	mov	r1, r3
    508c:	4806      	ldr	r0, [pc, #24]	; (50a8 <_gpio_set_direction+0xd0>)
    508e:	4b08      	ldr	r3, [pc, #32]	; (50b0 <_gpio_set_direction+0xd8>)
    5090:	4798      	blx	r3
		break;
    5092:	e004      	b.n	509e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    5094:	2246      	movs	r2, #70	; 0x46
    5096:	4908      	ldr	r1, [pc, #32]	; (50b8 <_gpio_set_direction+0xe0>)
    5098:	2000      	movs	r0, #0
    509a:	4b08      	ldr	r3, [pc, #32]	; (50bc <_gpio_set_direction+0xe4>)
    509c:	4798      	blx	r3
	}
}
    509e:	bf00      	nop
    50a0:	3708      	adds	r7, #8
    50a2:	46bd      	mov	sp, r7
    50a4:	bd80      	pop	{r7, pc}
    50a6:	bf00      	nop
    50a8:	41008000 	.word	0x41008000
    50ac:	00004d97 	.word	0x00004d97
    50b0:	00004faf 	.word	0x00004faf
    50b4:	00004d6f 	.word	0x00004d6f
    50b8:	0001cb30 	.word	0x0001cb30
    50bc:	00007b0d 	.word	0x00007b0d

000050c0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	b082      	sub	sp, #8
    50c4:	af00      	add	r7, sp, #0
    50c6:	4603      	mov	r3, r0
    50c8:	6039      	str	r1, [r7, #0]
    50ca:	71fb      	strb	r3, [r7, #7]
    50cc:	4613      	mov	r3, r2
    50ce:	71bb      	strb	r3, [r7, #6]
	if (level) {
    50d0:	79bb      	ldrb	r3, [r7, #6]
    50d2:	2b00      	cmp	r3, #0
    50d4:	d006      	beq.n	50e4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    50d6:	79fb      	ldrb	r3, [r7, #7]
    50d8:	683a      	ldr	r2, [r7, #0]
    50da:	4619      	mov	r1, r3
    50dc:	4806      	ldr	r0, [pc, #24]	; (50f8 <_gpio_set_level+0x38>)
    50de:	4b07      	ldr	r3, [pc, #28]	; (50fc <_gpio_set_level+0x3c>)
    50e0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    50e2:	e005      	b.n	50f0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    50e4:	79fb      	ldrb	r3, [r7, #7]
    50e6:	683a      	ldr	r2, [r7, #0]
    50e8:	4619      	mov	r1, r3
    50ea:	4803      	ldr	r0, [pc, #12]	; (50f8 <_gpio_set_level+0x38>)
    50ec:	4b04      	ldr	r3, [pc, #16]	; (5100 <_gpio_set_level+0x40>)
    50ee:	4798      	blx	r3
}
    50f0:	bf00      	nop
    50f2:	3708      	adds	r7, #8
    50f4:	46bd      	mov	sp, r7
    50f6:	bd80      	pop	{r7, pc}
    50f8:	41008000 	.word	0x41008000
    50fc:	00004dbf 	.word	0x00004dbf
    5100:	00004de7 	.word	0x00004de7

00005104 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    5104:	b580      	push	{r7, lr}
    5106:	b082      	sub	sp, #8
    5108:	af00      	add	r7, sp, #0
    510a:	4603      	mov	r3, r0
    510c:	71fb      	strb	r3, [r7, #7]
    510e:	460b      	mov	r3, r1
    5110:	71bb      	strb	r3, [r7, #6]
    5112:	4613      	mov	r3, r2
    5114:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    5116:	797b      	ldrb	r3, [r7, #5]
    5118:	2b01      	cmp	r3, #1
    511a:	d00a      	beq.n	5132 <_gpio_set_pin_pull_mode+0x2e>
    511c:	2b02      	cmp	r3, #2
    511e:	d01f      	beq.n	5160 <_gpio_set_pin_pull_mode+0x5c>
    5120:	2b00      	cmp	r3, #0
    5122:	d134      	bne.n	518e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    5124:	79ba      	ldrb	r2, [r7, #6]
    5126:	79fb      	ldrb	r3, [r7, #7]
    5128:	4619      	mov	r1, r3
    512a:	481e      	ldr	r0, [pc, #120]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    512c:	4b1e      	ldr	r3, [pc, #120]	; (51a8 <_gpio_set_pin_pull_mode+0xa4>)
    512e:	4798      	blx	r3
		break;
    5130:	e033      	b.n	519a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5132:	79bb      	ldrb	r3, [r7, #6]
    5134:	2201      	movs	r2, #1
    5136:	409a      	lsls	r2, r3
    5138:	79fb      	ldrb	r3, [r7, #7]
    513a:	4619      	mov	r1, r3
    513c:	4819      	ldr	r0, [pc, #100]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    513e:	4b1b      	ldr	r3, [pc, #108]	; (51ac <_gpio_set_pin_pull_mode+0xa8>)
    5140:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5142:	79ba      	ldrb	r2, [r7, #6]
    5144:	79fb      	ldrb	r3, [r7, #7]
    5146:	4619      	mov	r1, r3
    5148:	4816      	ldr	r0, [pc, #88]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    514a:	4b19      	ldr	r3, [pc, #100]	; (51b0 <_gpio_set_pin_pull_mode+0xac>)
    514c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    514e:	79bb      	ldrb	r3, [r7, #6]
    5150:	2201      	movs	r2, #1
    5152:	409a      	lsls	r2, r3
    5154:	79fb      	ldrb	r3, [r7, #7]
    5156:	4619      	mov	r1, r3
    5158:	4812      	ldr	r0, [pc, #72]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    515a:	4b16      	ldr	r3, [pc, #88]	; (51b4 <_gpio_set_pin_pull_mode+0xb0>)
    515c:	4798      	blx	r3
		break;
    515e:	e01c      	b.n	519a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5160:	79bb      	ldrb	r3, [r7, #6]
    5162:	2201      	movs	r2, #1
    5164:	409a      	lsls	r2, r3
    5166:	79fb      	ldrb	r3, [r7, #7]
    5168:	4619      	mov	r1, r3
    516a:	480e      	ldr	r0, [pc, #56]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    516c:	4b0f      	ldr	r3, [pc, #60]	; (51ac <_gpio_set_pin_pull_mode+0xa8>)
    516e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5170:	79ba      	ldrb	r2, [r7, #6]
    5172:	79fb      	ldrb	r3, [r7, #7]
    5174:	4619      	mov	r1, r3
    5176:	480b      	ldr	r0, [pc, #44]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    5178:	4b0d      	ldr	r3, [pc, #52]	; (51b0 <_gpio_set_pin_pull_mode+0xac>)
    517a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    517c:	79bb      	ldrb	r3, [r7, #6]
    517e:	2201      	movs	r2, #1
    5180:	409a      	lsls	r2, r3
    5182:	79fb      	ldrb	r3, [r7, #7]
    5184:	4619      	mov	r1, r3
    5186:	4807      	ldr	r0, [pc, #28]	; (51a4 <_gpio_set_pin_pull_mode+0xa0>)
    5188:	4b0b      	ldr	r3, [pc, #44]	; (51b8 <_gpio_set_pin_pull_mode+0xb4>)
    518a:	4798      	blx	r3
		break;
    518c:	e005      	b.n	519a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    518e:	2289      	movs	r2, #137	; 0x89
    5190:	490a      	ldr	r1, [pc, #40]	; (51bc <_gpio_set_pin_pull_mode+0xb8>)
    5192:	2000      	movs	r0, #0
    5194:	4b0a      	ldr	r3, [pc, #40]	; (51c0 <_gpio_set_pin_pull_mode+0xbc>)
    5196:	4798      	blx	r3
		break;
    5198:	bf00      	nop
	}
}
    519a:	bf00      	nop
    519c:	3708      	adds	r7, #8
    519e:	46bd      	mov	sp, r7
    51a0:	bd80      	pop	{r7, pc}
    51a2:	bf00      	nop
    51a4:	41008000 	.word	0x41008000
    51a8:	00004f6b 	.word	0x00004f6b
    51ac:	00004d97 	.word	0x00004d97
    51b0:	00004f27 	.word	0x00004f27
    51b4:	00004dbf 	.word	0x00004dbf
    51b8:	00004de7 	.word	0x00004de7
    51bc:	0001cb30 	.word	0x0001cb30
    51c0:	00007b0d 	.word	0x00007b0d

000051c4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    51c4:	b590      	push	{r4, r7, lr}
    51c6:	b085      	sub	sp, #20
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	095b      	lsrs	r3, r3, #5
    51d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	b2db      	uxtb	r3, r3
    51d8:	f003 031f 	and.w	r3, r3, #31
    51dc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    51de:	683b      	ldr	r3, [r7, #0]
    51e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    51e4:	d106      	bne.n	51f4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    51e6:	7bba      	ldrb	r2, [r7, #14]
    51e8:	7bf9      	ldrb	r1, [r7, #15]
    51ea:	2300      	movs	r3, #0
    51ec:	4812      	ldr	r0, [pc, #72]	; (5238 <_gpio_set_pin_function+0x74>)
    51ee:	4c13      	ldr	r4, [pc, #76]	; (523c <_gpio_set_pin_function+0x78>)
    51f0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    51f2:	e01d      	b.n	5230 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    51f4:	7bba      	ldrb	r2, [r7, #14]
    51f6:	7bf9      	ldrb	r1, [r7, #15]
    51f8:	2301      	movs	r3, #1
    51fa:	480f      	ldr	r0, [pc, #60]	; (5238 <_gpio_set_pin_function+0x74>)
    51fc:	4c0f      	ldr	r4, [pc, #60]	; (523c <_gpio_set_pin_function+0x78>)
    51fe:	47a0      	blx	r4
		if (pin & 1) {
    5200:	7bbb      	ldrb	r3, [r7, #14]
    5202:	f003 0301 	and.w	r3, r3, #1
    5206:	2b00      	cmp	r3, #0
    5208:	d009      	beq.n	521e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    520a:	7bbb      	ldrb	r3, [r7, #14]
    520c:	085b      	lsrs	r3, r3, #1
    520e:	b2da      	uxtb	r2, r3
    5210:	683b      	ldr	r3, [r7, #0]
    5212:	b2db      	uxtb	r3, r3
    5214:	7bf9      	ldrb	r1, [r7, #15]
    5216:	4808      	ldr	r0, [pc, #32]	; (5238 <_gpio_set_pin_function+0x74>)
    5218:	4c09      	ldr	r4, [pc, #36]	; (5240 <_gpio_set_pin_function+0x7c>)
    521a:	47a0      	blx	r4
}
    521c:	e008      	b.n	5230 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    521e:	7bbb      	ldrb	r3, [r7, #14]
    5220:	085b      	lsrs	r3, r3, #1
    5222:	b2da      	uxtb	r2, r3
    5224:	683b      	ldr	r3, [r7, #0]
    5226:	b2db      	uxtb	r3, r3
    5228:	7bf9      	ldrb	r1, [r7, #15]
    522a:	4803      	ldr	r0, [pc, #12]	; (5238 <_gpio_set_pin_function+0x74>)
    522c:	4c05      	ldr	r4, [pc, #20]	; (5244 <_gpio_set_pin_function+0x80>)
    522e:	47a0      	blx	r4
}
    5230:	bf00      	nop
    5232:	3714      	adds	r7, #20
    5234:	46bd      	mov	sp, r7
    5236:	bd90      	pop	{r4, r7, pc}
    5238:	41008000 	.word	0x41008000
    523c:	00004ecd 	.word	0x00004ecd
    5240:	00004e6f 	.word	0x00004e6f
    5244:	00004e0f 	.word	0x00004e0f

00005248 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    5248:	b580      	push	{r7, lr}
    524a:	b082      	sub	sp, #8
    524c:	af00      	add	r7, sp, #0
    524e:	4603      	mov	r3, r0
    5250:	460a      	mov	r2, r1
    5252:	71fb      	strb	r3, [r7, #7]
    5254:	4613      	mov	r3, r2
    5256:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    5258:	79fb      	ldrb	r3, [r7, #7]
    525a:	095b      	lsrs	r3, r3, #5
    525c:	b2d8      	uxtb	r0, r3
    525e:	79fb      	ldrb	r3, [r7, #7]
    5260:	f003 031f 	and.w	r3, r3, #31
    5264:	b2db      	uxtb	r3, r3
    5266:	79ba      	ldrb	r2, [r7, #6]
    5268:	4619      	mov	r1, r3
    526a:	4b03      	ldr	r3, [pc, #12]	; (5278 <gpio_set_pin_pull_mode+0x30>)
    526c:	4798      	blx	r3
}
    526e:	bf00      	nop
    5270:	3708      	adds	r7, #8
    5272:	46bd      	mov	sp, r7
    5274:	bd80      	pop	{r7, pc}
    5276:	bf00      	nop
    5278:	00005105 	.word	0x00005105

0000527c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    527c:	b580      	push	{r7, lr}
    527e:	b082      	sub	sp, #8
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
    5284:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    5286:	6839      	ldr	r1, [r7, #0]
    5288:	6878      	ldr	r0, [r7, #4]
    528a:	4b03      	ldr	r3, [pc, #12]	; (5298 <gpio_set_pin_function+0x1c>)
    528c:	4798      	blx	r3
}
    528e:	bf00      	nop
    5290:	3708      	adds	r7, #8
    5292:	46bd      	mov	sp, r7
    5294:	bd80      	pop	{r7, pc}
    5296:	bf00      	nop
    5298:	000051c5 	.word	0x000051c5

0000529c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    529c:	b580      	push	{r7, lr}
    529e:	b082      	sub	sp, #8
    52a0:	af00      	add	r7, sp, #0
    52a2:	4603      	mov	r3, r0
    52a4:	460a      	mov	r2, r1
    52a6:	71fb      	strb	r3, [r7, #7]
    52a8:	4613      	mov	r3, r2
    52aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    52ac:	79fb      	ldrb	r3, [r7, #7]
    52ae:	095b      	lsrs	r3, r3, #5
    52b0:	b2d8      	uxtb	r0, r3
    52b2:	79fb      	ldrb	r3, [r7, #7]
    52b4:	f003 031f 	and.w	r3, r3, #31
    52b8:	2201      	movs	r2, #1
    52ba:	fa02 f303 	lsl.w	r3, r2, r3
    52be:	79ba      	ldrb	r2, [r7, #6]
    52c0:	4619      	mov	r1, r3
    52c2:	4b03      	ldr	r3, [pc, #12]	; (52d0 <gpio_set_pin_direction+0x34>)
    52c4:	4798      	blx	r3
}
    52c6:	bf00      	nop
    52c8:	3708      	adds	r7, #8
    52ca:	46bd      	mov	sp, r7
    52cc:	bd80      	pop	{r7, pc}
    52ce:	bf00      	nop
    52d0:	00004fd9 	.word	0x00004fd9

000052d4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b082      	sub	sp, #8
    52d8:	af00      	add	r7, sp, #0
    52da:	4603      	mov	r3, r0
    52dc:	460a      	mov	r2, r1
    52de:	71fb      	strb	r3, [r7, #7]
    52e0:	4613      	mov	r3, r2
    52e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    52e4:	79fb      	ldrb	r3, [r7, #7]
    52e6:	095b      	lsrs	r3, r3, #5
    52e8:	b2d8      	uxtb	r0, r3
    52ea:	79fb      	ldrb	r3, [r7, #7]
    52ec:	f003 031f 	and.w	r3, r3, #31
    52f0:	2201      	movs	r2, #1
    52f2:	fa02 f303 	lsl.w	r3, r2, r3
    52f6:	79ba      	ldrb	r2, [r7, #6]
    52f8:	4619      	mov	r1, r3
    52fa:	4b03      	ldr	r3, [pc, #12]	; (5308 <gpio_set_pin_level+0x34>)
    52fc:	4798      	blx	r3
}
    52fe:	bf00      	nop
    5300:	3708      	adds	r7, #8
    5302:	46bd      	mov	sp, r7
    5304:	bd80      	pop	{r7, pc}
    5306:	bf00      	nop
    5308:	000050c1 	.word	0x000050c1

0000530c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    530c:	b580      	push	{r7, lr}
    530e:	af00      	add	r7, sp, #0
	_init_chip();
    5310:	4b01      	ldr	r3, [pc, #4]	; (5318 <init_mcu+0xc>)
    5312:	4798      	blx	r3
}
    5314:	bf00      	nop
    5316:	bd80      	pop	{r7, pc}
    5318:	0000871d 	.word	0x0000871d

0000531c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    531c:	b580      	push	{r7, lr}
    531e:	b082      	sub	sp, #8
    5320:	af00      	add	r7, sp, #0
    5322:	6078      	str	r0, [r7, #4]
    5324:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	2b00      	cmp	r3, #0
    532a:	d004      	beq.n	5336 <wdt_init+0x1a>
    532c:	683b      	ldr	r3, [r7, #0]
    532e:	2b00      	cmp	r3, #0
    5330:	d001      	beq.n	5336 <wdt_init+0x1a>
    5332:	2301      	movs	r3, #1
    5334:	e000      	b.n	5338 <wdt_init+0x1c>
    5336:	2300      	movs	r3, #0
    5338:	f003 0301 	and.w	r3, r3, #1
    533c:	b2db      	uxtb	r3, r3
    533e:	2248      	movs	r2, #72	; 0x48
    5340:	4907      	ldr	r1, [pc, #28]	; (5360 <wdt_init+0x44>)
    5342:	4618      	mov	r0, r3
    5344:	4b07      	ldr	r3, [pc, #28]	; (5364 <wdt_init+0x48>)
    5346:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	683a      	ldr	r2, [r7, #0]
    534c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	4618      	mov	r0, r3
    5352:	4b05      	ldr	r3, [pc, #20]	; (5368 <wdt_init+0x4c>)
    5354:	4798      	blx	r3
    5356:	4603      	mov	r3, r0
}
    5358:	4618      	mov	r0, r3
    535a:	3708      	adds	r7, #8
    535c:	46bd      	mov	sp, r7
    535e:	bd80      	pop	{r7, pc}
    5360:	0001cb4c 	.word	0x0001cb4c
    5364:	00007b0d 	.word	0x00007b0d
    5368:	0000f775 	.word	0x0000f775

0000536c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    536c:	b580      	push	{r7, lr}
    536e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    5370:	4804      	ldr	r0, [pc, #16]	; (5384 <CRC_CALC_init+0x18>)
    5372:	4b05      	ldr	r3, [pc, #20]	; (5388 <CRC_CALC_init+0x1c>)
    5374:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    5376:	4905      	ldr	r1, [pc, #20]	; (538c <CRC_CALC_init+0x20>)
    5378:	4805      	ldr	r0, [pc, #20]	; (5390 <CRC_CALC_init+0x24>)
    537a:	4b06      	ldr	r3, [pc, #24]	; (5394 <CRC_CALC_init+0x28>)
    537c:	4798      	blx	r3
}
    537e:	bf00      	nop
    5380:	bd80      	pop	{r7, pc}
    5382:	bf00      	nop
    5384:	40000800 	.word	0x40000800
    5388:	00004baf 	.word	0x00004baf
    538c:	41002000 	.word	0x41002000
    5390:	2000d8b4 	.word	0x2000d8b4
    5394:	00006361 	.word	0x00006361

00005398 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    5398:	b580      	push	{r7, lr}
    539a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    539c:	2244      	movs	r2, #68	; 0x44
    539e:	2104      	movs	r1, #4
    53a0:	483f      	ldr	r0, [pc, #252]	; (54a0 <EXTERNAL_IRQ_0_init+0x108>)
    53a2:	4b40      	ldr	r3, [pc, #256]	; (54a4 <EXTERNAL_IRQ_0_init+0x10c>)
    53a4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    53a6:	4840      	ldr	r0, [pc, #256]	; (54a8 <EXTERNAL_IRQ_0_init+0x110>)
    53a8:	4b40      	ldr	r3, [pc, #256]	; (54ac <EXTERNAL_IRQ_0_init+0x114>)
    53aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    53ac:	2101      	movs	r1, #1
    53ae:	2040      	movs	r0, #64	; 0x40
    53b0:	4b3f      	ldr	r3, [pc, #252]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    53b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    53b4:	2100      	movs	r1, #0
    53b6:	2040      	movs	r0, #64	; 0x40
    53b8:	4b3e      	ldr	r3, [pc, #248]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    53ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    53bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    53c0:	2040      	movs	r0, #64	; 0x40
    53c2:	4b3d      	ldr	r3, [pc, #244]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    53c4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    53c6:	2101      	movs	r1, #1
    53c8:	2021      	movs	r0, #33	; 0x21
    53ca:	4b39      	ldr	r3, [pc, #228]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    53cc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    53ce:	2100      	movs	r1, #0
    53d0:	2021      	movs	r0, #33	; 0x21
    53d2:	4b38      	ldr	r3, [pc, #224]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    53d4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    53d6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    53da:	2021      	movs	r0, #33	; 0x21
    53dc:	4b36      	ldr	r3, [pc, #216]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    53de:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    53e0:	2101      	movs	r1, #1
    53e2:	2003      	movs	r0, #3
    53e4:	4b32      	ldr	r3, [pc, #200]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    53e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    53e8:	2102      	movs	r1, #2
    53ea:	2003      	movs	r0, #3
    53ec:	4b31      	ldr	r3, [pc, #196]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    53ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    53f0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    53f4:	2003      	movs	r0, #3
    53f6:	4b30      	ldr	r3, [pc, #192]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    53f8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    53fa:	2101      	movs	r1, #1
    53fc:	2004      	movs	r0, #4
    53fe:	4b2c      	ldr	r3, [pc, #176]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    5400:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    5402:	2102      	movs	r1, #2
    5404:	2004      	movs	r0, #4
    5406:	4b2b      	ldr	r3, [pc, #172]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    5408:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    540a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    540e:	2004      	movs	r0, #4
    5410:	4b29      	ldr	r3, [pc, #164]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    5412:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    5414:	2101      	movs	r1, #1
    5416:	2005      	movs	r0, #5
    5418:	4b25      	ldr	r3, [pc, #148]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    541a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    541c:	2102      	movs	r1, #2
    541e:	2005      	movs	r0, #5
    5420:	4b24      	ldr	r3, [pc, #144]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    5422:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    5424:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    5428:	2005      	movs	r0, #5
    542a:	4b23      	ldr	r3, [pc, #140]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    542c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    542e:	2101      	movs	r1, #1
    5430:	2056      	movs	r0, #86	; 0x56
    5432:	4b1f      	ldr	r3, [pc, #124]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    5434:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    5436:	2102      	movs	r1, #2
    5438:	2056      	movs	r0, #86	; 0x56
    543a:	4b1e      	ldr	r3, [pc, #120]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    543c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    543e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    5442:	2056      	movs	r0, #86	; 0x56
    5444:	4b1c      	ldr	r3, [pc, #112]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    5446:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    5448:	2101      	movs	r1, #1
    544a:	2057      	movs	r0, #87	; 0x57
    544c:	4b18      	ldr	r3, [pc, #96]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    544e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    5450:	2102      	movs	r1, #2
    5452:	2057      	movs	r0, #87	; 0x57
    5454:	4b17      	ldr	r3, [pc, #92]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    5456:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    5458:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    545c:	2057      	movs	r0, #87	; 0x57
    545e:	4b16      	ldr	r3, [pc, #88]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    5460:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    5462:	2101      	movs	r1, #1
    5464:	2028      	movs	r0, #40	; 0x28
    5466:	4b12      	ldr	r3, [pc, #72]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    5468:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    546a:	2100      	movs	r1, #0
    546c:	2028      	movs	r0, #40	; 0x28
    546e:	4b11      	ldr	r3, [pc, #68]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    5470:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    5472:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    5476:	2028      	movs	r0, #40	; 0x28
    5478:	4b0f      	ldr	r3, [pc, #60]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    547a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    547c:	2101      	movs	r1, #1
    547e:	2029      	movs	r0, #41	; 0x29
    5480:	4b0b      	ldr	r3, [pc, #44]	; (54b0 <EXTERNAL_IRQ_0_init+0x118>)
    5482:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    5484:	2100      	movs	r1, #0
    5486:	2029      	movs	r0, #41	; 0x29
    5488:	4b0a      	ldr	r3, [pc, #40]	; (54b4 <EXTERNAL_IRQ_0_init+0x11c>)
    548a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    548c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    5490:	2029      	movs	r0, #41	; 0x29
    5492:	4b09      	ldr	r3, [pc, #36]	; (54b8 <EXTERNAL_IRQ_0_init+0x120>)
    5494:	4798      	blx	r3

	ext_irq_init();
    5496:	4b09      	ldr	r3, [pc, #36]	; (54bc <EXTERNAL_IRQ_0_init+0x124>)
    5498:	4798      	blx	r3
}
    549a:	bf00      	nop
    549c:	bd80      	pop	{r7, pc}
    549e:	bf00      	nop
    54a0:	40001c00 	.word	0x40001c00
    54a4:	00004a49 	.word	0x00004a49
    54a8:	40000800 	.word	0x40000800
    54ac:	00004b2f 	.word	0x00004b2f
    54b0:	0000529d 	.word	0x0000529d
    54b4:	00005249 	.word	0x00005249
    54b8:	0000527d 	.word	0x0000527d
    54bc:	000064c5 	.word	0x000064c5

000054c0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    54c0:	b580      	push	{r7, lr}
    54c2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54c4:	2244      	movs	r2, #68	; 0x44
    54c6:	210b      	movs	r1, #11
    54c8:	4807      	ldr	r0, [pc, #28]	; (54e8 <EVENT_SYSTEM_0_init+0x28>)
    54ca:	4b08      	ldr	r3, [pc, #32]	; (54ec <EVENT_SYSTEM_0_init+0x2c>)
    54cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54ce:	2244      	movs	r2, #68	; 0x44
    54d0:	210c      	movs	r1, #12
    54d2:	4805      	ldr	r0, [pc, #20]	; (54e8 <EVENT_SYSTEM_0_init+0x28>)
    54d4:	4b05      	ldr	r3, [pc, #20]	; (54ec <EVENT_SYSTEM_0_init+0x2c>)
    54d6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    54d8:	4805      	ldr	r0, [pc, #20]	; (54f0 <EVENT_SYSTEM_0_init+0x30>)
    54da:	4b06      	ldr	r3, [pc, #24]	; (54f4 <EVENT_SYSTEM_0_init+0x34>)
    54dc:	4798      	blx	r3

	event_system_init();
    54de:	4b06      	ldr	r3, [pc, #24]	; (54f8 <EVENT_SYSTEM_0_init+0x38>)
    54e0:	4798      	blx	r3
}
    54e2:	bf00      	nop
    54e4:	bd80      	pop	{r7, pc}
    54e6:	bf00      	nop
    54e8:	40001c00 	.word	0x40001c00
    54ec:	00004a49 	.word	0x00004a49
    54f0:	40000800 	.word	0x40000800
    54f4:	00004bcf 	.word	0x00004bcf
    54f8:	000064b1 	.word	0x000064b1

000054fc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    5500:	2101      	movs	r1, #1
    5502:	202b      	movs	r0, #43	; 0x2b
    5504:	4b2b      	ldr	r3, [pc, #172]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    5506:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    5508:	2100      	movs	r1, #0
    550a:	202b      	movs	r0, #43	; 0x2b
    550c:	4b2a      	ldr	r3, [pc, #168]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    550e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    5510:	492a      	ldr	r1, [pc, #168]	; (55bc <QSPI_N25Q256_PORT_init+0xc0>)
    5512:	202b      	movs	r0, #43	; 0x2b
    5514:	4b2a      	ldr	r3, [pc, #168]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    5516:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    5518:	2102      	movs	r1, #2
    551a:	2008      	movs	r0, #8
    551c:	4b25      	ldr	r3, [pc, #148]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    551e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    5520:	2100      	movs	r1, #0
    5522:	2008      	movs	r0, #8
    5524:	4b27      	ldr	r3, [pc, #156]	; (55c4 <QSPI_N25Q256_PORT_init+0xc8>)
    5526:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    5528:	2100      	movs	r1, #0
    552a:	2008      	movs	r0, #8
    552c:	4b22      	ldr	r3, [pc, #136]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    552e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    5530:	4925      	ldr	r1, [pc, #148]	; (55c8 <QSPI_N25Q256_PORT_init+0xcc>)
    5532:	2008      	movs	r0, #8
    5534:	4b22      	ldr	r3, [pc, #136]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    5536:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    5538:	2102      	movs	r1, #2
    553a:	2009      	movs	r0, #9
    553c:	4b1d      	ldr	r3, [pc, #116]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    553e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    5540:	2100      	movs	r1, #0
    5542:	2009      	movs	r0, #9
    5544:	4b1f      	ldr	r3, [pc, #124]	; (55c4 <QSPI_N25Q256_PORT_init+0xc8>)
    5546:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    5548:	2100      	movs	r1, #0
    554a:	2009      	movs	r0, #9
    554c:	4b1a      	ldr	r3, [pc, #104]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    554e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    5550:	491e      	ldr	r1, [pc, #120]	; (55cc <QSPI_N25Q256_PORT_init+0xd0>)
    5552:	2009      	movs	r0, #9
    5554:	4b1a      	ldr	r3, [pc, #104]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    5556:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    5558:	2102      	movs	r1, #2
    555a:	200a      	movs	r0, #10
    555c:	4b15      	ldr	r3, [pc, #84]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    555e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    5560:	2100      	movs	r1, #0
    5562:	200a      	movs	r0, #10
    5564:	4b17      	ldr	r3, [pc, #92]	; (55c4 <QSPI_N25Q256_PORT_init+0xc8>)
    5566:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    5568:	2100      	movs	r1, #0
    556a:	200a      	movs	r0, #10
    556c:	4b12      	ldr	r3, [pc, #72]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    556e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    5570:	4917      	ldr	r1, [pc, #92]	; (55d0 <QSPI_N25Q256_PORT_init+0xd4>)
    5572:	200a      	movs	r0, #10
    5574:	4b12      	ldr	r3, [pc, #72]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    5576:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    5578:	2102      	movs	r1, #2
    557a:	200b      	movs	r0, #11
    557c:	4b0d      	ldr	r3, [pc, #52]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    557e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    5580:	2100      	movs	r1, #0
    5582:	200b      	movs	r0, #11
    5584:	4b0f      	ldr	r3, [pc, #60]	; (55c4 <QSPI_N25Q256_PORT_init+0xc8>)
    5586:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    5588:	2100      	movs	r1, #0
    558a:	200b      	movs	r0, #11
    558c:	4b0a      	ldr	r3, [pc, #40]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    558e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    5590:	4910      	ldr	r1, [pc, #64]	; (55d4 <QSPI_N25Q256_PORT_init+0xd8>)
    5592:	200b      	movs	r0, #11
    5594:	4b0a      	ldr	r3, [pc, #40]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    5596:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    5598:	2101      	movs	r1, #1
    559a:	202a      	movs	r0, #42	; 0x2a
    559c:	4b05      	ldr	r3, [pc, #20]	; (55b4 <QSPI_N25Q256_PORT_init+0xb8>)
    559e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    55a0:	2100      	movs	r1, #0
    55a2:	202a      	movs	r0, #42	; 0x2a
    55a4:	4b04      	ldr	r3, [pc, #16]	; (55b8 <QSPI_N25Q256_PORT_init+0xbc>)
    55a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    55a8:	490b      	ldr	r1, [pc, #44]	; (55d8 <QSPI_N25Q256_PORT_init+0xdc>)
    55aa:	202a      	movs	r0, #42	; 0x2a
    55ac:	4b04      	ldr	r3, [pc, #16]	; (55c0 <QSPI_N25Q256_PORT_init+0xc4>)
    55ae:	4798      	blx	r3
}
    55b0:	bf00      	nop
    55b2:	bd80      	pop	{r7, pc}
    55b4:	0000529d 	.word	0x0000529d
    55b8:	00005249 	.word	0x00005249
    55bc:	002b0007 	.word	0x002b0007
    55c0:	0000527d 	.word	0x0000527d
    55c4:	000052d5 	.word	0x000052d5
    55c8:	00080007 	.word	0x00080007
    55cc:	00090007 	.word	0x00090007
    55d0:	000a0007 	.word	0x000a0007
    55d4:	000b0007 	.word	0x000b0007
    55d8:	002a0007 	.word	0x002a0007

000055dc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    55e0:	4805      	ldr	r0, [pc, #20]	; (55f8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55e2:	4b06      	ldr	r3, [pc, #24]	; (55fc <QSPI_N25Q256_CLOCK_init+0x20>)
    55e4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    55e6:	4804      	ldr	r0, [pc, #16]	; (55f8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55e8:	4b05      	ldr	r3, [pc, #20]	; (5600 <QSPI_N25Q256_CLOCK_init+0x24>)
    55ea:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    55ec:	4802      	ldr	r0, [pc, #8]	; (55f8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55ee:	4b05      	ldr	r3, [pc, #20]	; (5604 <QSPI_N25Q256_CLOCK_init+0x28>)
    55f0:	4798      	blx	r3
}
    55f2:	bf00      	nop
    55f4:	bd80      	pop	{r7, pc}
    55f6:	bf00      	nop
    55f8:	40000800 	.word	0x40000800
    55fc:	00004a8f 	.word	0x00004a8f
    5600:	00004acf 	.word	0x00004acf
    5604:	00004c8f 	.word	0x00004c8f

00005608 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    5608:	b580      	push	{r7, lr}
    560a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    560c:	4b04      	ldr	r3, [pc, #16]	; (5620 <QSPI_N25Q256_init+0x18>)
    560e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    5610:	4904      	ldr	r1, [pc, #16]	; (5624 <QSPI_N25Q256_init+0x1c>)
    5612:	4805      	ldr	r0, [pc, #20]	; (5628 <QSPI_N25Q256_init+0x20>)
    5614:	4b05      	ldr	r3, [pc, #20]	; (562c <QSPI_N25Q256_init+0x24>)
    5616:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    5618:	4b05      	ldr	r3, [pc, #20]	; (5630 <QSPI_N25Q256_init+0x28>)
    561a:	4798      	blx	r3
}
    561c:	bf00      	nop
    561e:	bd80      	pop	{r7, pc}
    5620:	000055dd 	.word	0x000055dd
    5624:	42003400 	.word	0x42003400
    5628:	2000d768 	.word	0x2000d768
    562c:	00006969 	.word	0x00006969
    5630:	000054fd 	.word	0x000054fd

00005634 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    5634:	b580      	push	{r7, lr}
    5636:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    5638:	4802      	ldr	r0, [pc, #8]	; (5644 <DATETIME_CLOCK_CLOCK_init+0x10>)
    563a:	4b03      	ldr	r3, [pc, #12]	; (5648 <DATETIME_CLOCK_CLOCK_init+0x14>)
    563c:	4798      	blx	r3
}
    563e:	bf00      	nop
    5640:	bd80      	pop	{r7, pc}
    5642:	bf00      	nop
    5644:	40000800 	.word	0x40000800
    5648:	00004b0f 	.word	0x00004b0f

0000564c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    564c:	b580      	push	{r7, lr}
    564e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    5650:	4b03      	ldr	r3, [pc, #12]	; (5660 <DATETIME_CLOCK_init+0x14>)
    5652:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    5654:	4903      	ldr	r1, [pc, #12]	; (5664 <DATETIME_CLOCK_init+0x18>)
    5656:	4804      	ldr	r0, [pc, #16]	; (5668 <DATETIME_CLOCK_init+0x1c>)
    5658:	4b04      	ldr	r3, [pc, #16]	; (566c <DATETIME_CLOCK_init+0x20>)
    565a:	4798      	blx	r3
}
    565c:	bf00      	nop
    565e:	bd80      	pop	{r7, pc}
    5660:	00005635 	.word	0x00005635
    5664:	40002400 	.word	0x40002400
    5668:	2000d890 	.word	0x2000d890
    566c:	000061b5 	.word	0x000061b5

00005670 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    5670:	b580      	push	{r7, lr}
    5672:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    5674:	2101      	movs	r1, #1
    5676:	2010      	movs	r0, #16
    5678:	4b07      	ldr	r3, [pc, #28]	; (5698 <I2C_HEATERS_PORT_init+0x28>)
    567a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    567c:	4907      	ldr	r1, [pc, #28]	; (569c <I2C_HEATERS_PORT_init+0x2c>)
    567e:	2010      	movs	r0, #16
    5680:	4b07      	ldr	r3, [pc, #28]	; (56a0 <I2C_HEATERS_PORT_init+0x30>)
    5682:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    5684:	2101      	movs	r1, #1
    5686:	2011      	movs	r0, #17
    5688:	4b03      	ldr	r3, [pc, #12]	; (5698 <I2C_HEATERS_PORT_init+0x28>)
    568a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    568c:	4905      	ldr	r1, [pc, #20]	; (56a4 <I2C_HEATERS_PORT_init+0x34>)
    568e:	2011      	movs	r0, #17
    5690:	4b03      	ldr	r3, [pc, #12]	; (56a0 <I2C_HEATERS_PORT_init+0x30>)
    5692:	4798      	blx	r3
}
    5694:	bf00      	nop
    5696:	bd80      	pop	{r7, pc}
    5698:	00005249 	.word	0x00005249
    569c:	00100002 	.word	0x00100002
    56a0:	0000527d 	.word	0x0000527d
    56a4:	00110002 	.word	0x00110002

000056a8 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    56a8:	b580      	push	{r7, lr}
    56aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56ac:	2242      	movs	r2, #66	; 0x42
    56ae:	2108      	movs	r1, #8
    56b0:	4806      	ldr	r0, [pc, #24]	; (56cc <I2C_HEATERS_CLOCK_init+0x24>)
    56b2:	4b07      	ldr	r3, [pc, #28]	; (56d0 <I2C_HEATERS_CLOCK_init+0x28>)
    56b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56b6:	224a      	movs	r2, #74	; 0x4a
    56b8:	2103      	movs	r1, #3
    56ba:	4804      	ldr	r0, [pc, #16]	; (56cc <I2C_HEATERS_CLOCK_init+0x24>)
    56bc:	4b04      	ldr	r3, [pc, #16]	; (56d0 <I2C_HEATERS_CLOCK_init+0x28>)
    56be:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    56c0:	4804      	ldr	r0, [pc, #16]	; (56d4 <I2C_HEATERS_CLOCK_init+0x2c>)
    56c2:	4b05      	ldr	r3, [pc, #20]	; (56d8 <I2C_HEATERS_CLOCK_init+0x30>)
    56c4:	4798      	blx	r3
}
    56c6:	bf00      	nop
    56c8:	bd80      	pop	{r7, pc}
    56ca:	bf00      	nop
    56cc:	40001c00 	.word	0x40001c00
    56d0:	00004a49 	.word	0x00004a49
    56d4:	40000800 	.word	0x40000800
    56d8:	00004b4f 	.word	0x00004b4f

000056dc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    56dc:	b580      	push	{r7, lr}
    56de:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    56e0:	4b04      	ldr	r3, [pc, #16]	; (56f4 <I2C_HEATERS_init+0x18>)
    56e2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    56e4:	4904      	ldr	r1, [pc, #16]	; (56f8 <I2C_HEATERS_init+0x1c>)
    56e6:	4805      	ldr	r0, [pc, #20]	; (56fc <I2C_HEATERS_init+0x20>)
    56e8:	4b05      	ldr	r3, [pc, #20]	; (5700 <I2C_HEATERS_init+0x24>)
    56ea:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    56ec:	4b05      	ldr	r3, [pc, #20]	; (5704 <I2C_HEATERS_init+0x28>)
    56ee:	4798      	blx	r3
}
    56f0:	bf00      	nop
    56f2:	bd80      	pop	{r7, pc}
    56f4:	000056a9 	.word	0x000056a9
    56f8:	40003400 	.word	0x40003400
    56fc:	2000d7e8 	.word	0x2000d7e8
    5700:	0000678d 	.word	0x0000678d
    5704:	00005671 	.word	0x00005671

00005708 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    5708:	b580      	push	{r7, lr}
    570a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    570c:	2100      	movs	r1, #0
    570e:	203b      	movs	r0, #59	; 0x3b
    5710:	4b11      	ldr	r3, [pc, #68]	; (5758 <SPI_TEMP_PORT_init+0x50>)
    5712:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    5714:	2102      	movs	r1, #2
    5716:	203b      	movs	r0, #59	; 0x3b
    5718:	4b10      	ldr	r3, [pc, #64]	; (575c <SPI_TEMP_PORT_init+0x54>)
    571a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    571c:	4910      	ldr	r1, [pc, #64]	; (5760 <SPI_TEMP_PORT_init+0x58>)
    571e:	203b      	movs	r0, #59	; 0x3b
    5720:	4b10      	ldr	r3, [pc, #64]	; (5764 <SPI_TEMP_PORT_init+0x5c>)
    5722:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5724:	2100      	movs	r1, #0
    5726:	203a      	movs	r0, #58	; 0x3a
    5728:	4b0b      	ldr	r3, [pc, #44]	; (5758 <SPI_TEMP_PORT_init+0x50>)
    572a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    572c:	2102      	movs	r1, #2
    572e:	203a      	movs	r0, #58	; 0x3a
    5730:	4b0a      	ldr	r3, [pc, #40]	; (575c <SPI_TEMP_PORT_init+0x54>)
    5732:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5734:	490c      	ldr	r1, [pc, #48]	; (5768 <SPI_TEMP_PORT_init+0x60>)
    5736:	203a      	movs	r0, #58	; 0x3a
    5738:	4b0a      	ldr	r3, [pc, #40]	; (5764 <SPI_TEMP_PORT_init+0x5c>)
    573a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    573c:	2101      	movs	r1, #1
    573e:	203c      	movs	r0, #60	; 0x3c
    5740:	4b06      	ldr	r3, [pc, #24]	; (575c <SPI_TEMP_PORT_init+0x54>)
    5742:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5744:	2100      	movs	r1, #0
    5746:	203c      	movs	r0, #60	; 0x3c
    5748:	4b08      	ldr	r3, [pc, #32]	; (576c <SPI_TEMP_PORT_init+0x64>)
    574a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    574c:	4908      	ldr	r1, [pc, #32]	; (5770 <SPI_TEMP_PORT_init+0x68>)
    574e:	203c      	movs	r0, #60	; 0x3c
    5750:	4b04      	ldr	r3, [pc, #16]	; (5764 <SPI_TEMP_PORT_init+0x5c>)
    5752:	4798      	blx	r3
}
    5754:	bf00      	nop
    5756:	bd80      	pop	{r7, pc}
    5758:	000052d5 	.word	0x000052d5
    575c:	0000529d 	.word	0x0000529d
    5760:	003b0003 	.word	0x003b0003
    5764:	0000527d 	.word	0x0000527d
    5768:	003a0003 	.word	0x003a0003
    576c:	00005249 	.word	0x00005249
    5770:	003c0003 	.word	0x003c0003

00005774 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5774:	b580      	push	{r7, lr}
    5776:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5778:	2245      	movs	r2, #69	; 0x45
    577a:	2122      	movs	r1, #34	; 0x22
    577c:	4806      	ldr	r0, [pc, #24]	; (5798 <SPI_TEMP_CLOCK_init+0x24>)
    577e:	4b07      	ldr	r3, [pc, #28]	; (579c <SPI_TEMP_CLOCK_init+0x28>)
    5780:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5782:	224a      	movs	r2, #74	; 0x4a
    5784:	2103      	movs	r1, #3
    5786:	4804      	ldr	r0, [pc, #16]	; (5798 <SPI_TEMP_CLOCK_init+0x24>)
    5788:	4b04      	ldr	r3, [pc, #16]	; (579c <SPI_TEMP_CLOCK_init+0x28>)
    578a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    578c:	4804      	ldr	r0, [pc, #16]	; (57a0 <SPI_TEMP_CLOCK_init+0x2c>)
    578e:	4b05      	ldr	r3, [pc, #20]	; (57a4 <SPI_TEMP_CLOCK_init+0x30>)
    5790:	4798      	blx	r3
}
    5792:	bf00      	nop
    5794:	bd80      	pop	{r7, pc}
    5796:	bf00      	nop
    5798:	40001c00 	.word	0x40001c00
    579c:	00004a49 	.word	0x00004a49
    57a0:	40000800 	.word	0x40000800
    57a4:	00004caf 	.word	0x00004caf

000057a8 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    57a8:	b580      	push	{r7, lr}
    57aa:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    57ac:	4b05      	ldr	r3, [pc, #20]	; (57c4 <SPI_TEMP_init+0x1c>)
    57ae:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    57b0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    57b4:	4804      	ldr	r0, [pc, #16]	; (57c8 <SPI_TEMP_init+0x20>)
    57b6:	4b05      	ldr	r3, [pc, #20]	; (57cc <SPI_TEMP_init+0x24>)
    57b8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    57ba:	4b05      	ldr	r3, [pc, #20]	; (57d0 <SPI_TEMP_init+0x28>)
    57bc:	4798      	blx	r3
}
    57be:	bf00      	nop
    57c0:	bd80      	pop	{r7, pc}
    57c2:	bf00      	nop
    57c4:	00005775 	.word	0x00005775
    57c8:	2000d710 	.word	0x2000d710
    57cc:	00006a79 	.word	0x00006a79
    57d0:	00005709 	.word	0x00005709

000057d4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    57d8:	2100      	movs	r1, #0
    57da:	2017      	movs	r0, #23
    57dc:	4b07      	ldr	r3, [pc, #28]	; (57fc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    57de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    57e0:	4907      	ldr	r1, [pc, #28]	; (5800 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    57e2:	2017      	movs	r0, #23
    57e4:	4b07      	ldr	r3, [pc, #28]	; (5804 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    57e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    57e8:	2100      	movs	r1, #0
    57ea:	2016      	movs	r0, #22
    57ec:	4b03      	ldr	r3, [pc, #12]	; (57fc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    57ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    57f0:	4905      	ldr	r1, [pc, #20]	; (5808 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    57f2:	2016      	movs	r0, #22
    57f4:	4b03      	ldr	r3, [pc, #12]	; (5804 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    57f6:	4798      	blx	r3
}
    57f8:	bf00      	nop
    57fa:	bd80      	pop	{r7, pc}
    57fc:	00005249 	.word	0x00005249
    5800:	00170003 	.word	0x00170003
    5804:	0000527d 	.word	0x0000527d
    5808:	00160003 	.word	0x00160003

0000580c <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    580c:	b580      	push	{r7, lr}
    580e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5810:	2244      	movs	r2, #68	; 0x44
    5812:	2123      	movs	r1, #35	; 0x23
    5814:	4806      	ldr	r0, [pc, #24]	; (5830 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    5816:	4b07      	ldr	r3, [pc, #28]	; (5834 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    5818:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    581a:	224a      	movs	r2, #74	; 0x4a
    581c:	2103      	movs	r1, #3
    581e:	4804      	ldr	r0, [pc, #16]	; (5830 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    5820:	4b04      	ldr	r3, [pc, #16]	; (5834 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    5822:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5824:	4804      	ldr	r0, [pc, #16]	; (5838 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    5826:	4b05      	ldr	r3, [pc, #20]	; (583c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    5828:	4798      	blx	r3
}
    582a:	bf00      	nop
    582c:	bd80      	pop	{r7, pc}
    582e:	bf00      	nop
    5830:	40001c00 	.word	0x40001c00
    5834:	00004a49 	.word	0x00004a49
    5838:	40000800 	.word	0x40000800
    583c:	00004ccf 	.word	0x00004ccf

00005840 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    5840:	b580      	push	{r7, lr}
    5842:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    5844:	4b04      	ldr	r3, [pc, #16]	; (5858 <I2C_FLAPPER_VALVE_init+0x18>)
    5846:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    5848:	4904      	ldr	r1, [pc, #16]	; (585c <I2C_FLAPPER_VALVE_init+0x1c>)
    584a:	4805      	ldr	r0, [pc, #20]	; (5860 <I2C_FLAPPER_VALVE_init+0x20>)
    584c:	4b05      	ldr	r3, [pc, #20]	; (5864 <I2C_FLAPPER_VALVE_init+0x24>)
    584e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    5850:	4b05      	ldr	r3, [pc, #20]	; (5868 <I2C_FLAPPER_VALVE_init+0x28>)
    5852:	4798      	blx	r3
}
    5854:	bf00      	nop
    5856:	bd80      	pop	{r7, pc}
    5858:	0000580d 	.word	0x0000580d
    585c:	43000400 	.word	0x43000400
    5860:	2000d7ac 	.word	0x2000d7ac
    5864:	0000678d 	.word	0x0000678d
    5868:	000057d5 	.word	0x000057d5

0000586c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    586c:	b580      	push	{r7, lr}
    586e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    5870:	2100      	movs	r1, #0
    5872:	2044      	movs	r0, #68	; 0x44
    5874:	4b11      	ldr	r3, [pc, #68]	; (58bc <SPI_HI3593_PORT_init+0x50>)
    5876:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    5878:	2102      	movs	r1, #2
    587a:	2044      	movs	r0, #68	; 0x44
    587c:	4b10      	ldr	r3, [pc, #64]	; (58c0 <SPI_HI3593_PORT_init+0x54>)
    587e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    5880:	4910      	ldr	r1, [pc, #64]	; (58c4 <SPI_HI3593_PORT_init+0x58>)
    5882:	2044      	movs	r0, #68	; 0x44
    5884:	4b10      	ldr	r3, [pc, #64]	; (58c8 <SPI_HI3593_PORT_init+0x5c>)
    5886:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    5888:	2100      	movs	r1, #0
    588a:	2045      	movs	r0, #69	; 0x45
    588c:	4b0b      	ldr	r3, [pc, #44]	; (58bc <SPI_HI3593_PORT_init+0x50>)
    588e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    5890:	2102      	movs	r1, #2
    5892:	2045      	movs	r0, #69	; 0x45
    5894:	4b0a      	ldr	r3, [pc, #40]	; (58c0 <SPI_HI3593_PORT_init+0x54>)
    5896:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5898:	490c      	ldr	r1, [pc, #48]	; (58cc <SPI_HI3593_PORT_init+0x60>)
    589a:	2045      	movs	r0, #69	; 0x45
    589c:	4b0a      	ldr	r3, [pc, #40]	; (58c8 <SPI_HI3593_PORT_init+0x5c>)
    589e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    58a0:	2101      	movs	r1, #1
    58a2:	2047      	movs	r0, #71	; 0x47
    58a4:	4b06      	ldr	r3, [pc, #24]	; (58c0 <SPI_HI3593_PORT_init+0x54>)
    58a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    58a8:	2100      	movs	r1, #0
    58aa:	2047      	movs	r0, #71	; 0x47
    58ac:	4b08      	ldr	r3, [pc, #32]	; (58d0 <SPI_HI3593_PORT_init+0x64>)
    58ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    58b0:	4908      	ldr	r1, [pc, #32]	; (58d4 <SPI_HI3593_PORT_init+0x68>)
    58b2:	2047      	movs	r0, #71	; 0x47
    58b4:	4b04      	ldr	r3, [pc, #16]	; (58c8 <SPI_HI3593_PORT_init+0x5c>)
    58b6:	4798      	blx	r3
}
    58b8:	bf00      	nop
    58ba:	bd80      	pop	{r7, pc}
    58bc:	000052d5 	.word	0x000052d5
    58c0:	0000529d 	.word	0x0000529d
    58c4:	00440002 	.word	0x00440002
    58c8:	0000527d 	.word	0x0000527d
    58cc:	00450002 	.word	0x00450002
    58d0:	00005249 	.word	0x00005249
    58d4:	00470002 	.word	0x00470002

000058d8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    58d8:	b580      	push	{r7, lr}
    58da:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58dc:	2242      	movs	r2, #66	; 0x42
    58de:	2124      	movs	r1, #36	; 0x24
    58e0:	4806      	ldr	r0, [pc, #24]	; (58fc <SPI_HI3593_CLOCK_init+0x24>)
    58e2:	4b07      	ldr	r3, [pc, #28]	; (5900 <SPI_HI3593_CLOCK_init+0x28>)
    58e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58e6:	224a      	movs	r2, #74	; 0x4a
    58e8:	2103      	movs	r1, #3
    58ea:	4804      	ldr	r0, [pc, #16]	; (58fc <SPI_HI3593_CLOCK_init+0x24>)
    58ec:	4b04      	ldr	r3, [pc, #16]	; (5900 <SPI_HI3593_CLOCK_init+0x28>)
    58ee:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    58f0:	4804      	ldr	r0, [pc, #16]	; (5904 <SPI_HI3593_CLOCK_init+0x2c>)
    58f2:	4b05      	ldr	r3, [pc, #20]	; (5908 <SPI_HI3593_CLOCK_init+0x30>)
    58f4:	4798      	blx	r3
}
    58f6:	bf00      	nop
    58f8:	bd80      	pop	{r7, pc}
    58fa:	bf00      	nop
    58fc:	40001c00 	.word	0x40001c00
    5900:	00004a49 	.word	0x00004a49
    5904:	40000800 	.word	0x40000800
    5908:	00004cef 	.word	0x00004cef

0000590c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    590c:	b580      	push	{r7, lr}
    590e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    5910:	4b04      	ldr	r3, [pc, #16]	; (5924 <SPI_HI3593_init+0x18>)
    5912:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    5914:	4904      	ldr	r1, [pc, #16]	; (5928 <SPI_HI3593_init+0x1c>)
    5916:	4805      	ldr	r0, [pc, #20]	; (592c <SPI_HI3593_init+0x20>)
    5918:	4b05      	ldr	r3, [pc, #20]	; (5930 <SPI_HI3593_init+0x24>)
    591a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    591c:	4b05      	ldr	r3, [pc, #20]	; (5934 <SPI_HI3593_init+0x28>)
    591e:	4798      	blx	r3
}
    5920:	bf00      	nop
    5922:	bd80      	pop	{r7, pc}
    5924:	000058d9 	.word	0x000058d9
    5928:	43000800 	.word	0x43000800
    592c:	2000d6f8 	.word	0x2000d6f8
    5930:	00006a79 	.word	0x00006a79
    5934:	0000586d 	.word	0x0000586d

00005938 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    5938:	b580      	push	{r7, lr}
    593a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    593c:	2100      	movs	r1, #0
    593e:	2068      	movs	r0, #104	; 0x68
    5940:	4b07      	ldr	r3, [pc, #28]	; (5960 <I2C_FANS_PORT_init+0x28>)
    5942:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5944:	4907      	ldr	r1, [pc, #28]	; (5964 <I2C_FANS_PORT_init+0x2c>)
    5946:	2068      	movs	r0, #104	; 0x68
    5948:	4b07      	ldr	r3, [pc, #28]	; (5968 <I2C_FANS_PORT_init+0x30>)
    594a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    594c:	2100      	movs	r1, #0
    594e:	2069      	movs	r0, #105	; 0x69
    5950:	4b03      	ldr	r3, [pc, #12]	; (5960 <I2C_FANS_PORT_init+0x28>)
    5952:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5954:	4905      	ldr	r1, [pc, #20]	; (596c <I2C_FANS_PORT_init+0x34>)
    5956:	2069      	movs	r0, #105	; 0x69
    5958:	4b03      	ldr	r3, [pc, #12]	; (5968 <I2C_FANS_PORT_init+0x30>)
    595a:	4798      	blx	r3
}
    595c:	bf00      	nop
    595e:	bd80      	pop	{r7, pc}
    5960:	00005249 	.word	0x00005249
    5964:	00680002 	.word	0x00680002
    5968:	0000527d 	.word	0x0000527d
    596c:	00690002 	.word	0x00690002

00005970 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    5970:	b580      	push	{r7, lr}
    5972:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5974:	2244      	movs	r2, #68	; 0x44
    5976:	2125      	movs	r1, #37	; 0x25
    5978:	4806      	ldr	r0, [pc, #24]	; (5994 <I2C_FANS_CLOCK_init+0x24>)
    597a:	4b07      	ldr	r3, [pc, #28]	; (5998 <I2C_FANS_CLOCK_init+0x28>)
    597c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    597e:	224a      	movs	r2, #74	; 0x4a
    5980:	2103      	movs	r1, #3
    5982:	4804      	ldr	r0, [pc, #16]	; (5994 <I2C_FANS_CLOCK_init+0x24>)
    5984:	4b04      	ldr	r3, [pc, #16]	; (5998 <I2C_FANS_CLOCK_init+0x28>)
    5986:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5988:	4804      	ldr	r0, [pc, #16]	; (599c <I2C_FANS_CLOCK_init+0x2c>)
    598a:	4b05      	ldr	r3, [pc, #20]	; (59a0 <I2C_FANS_CLOCK_init+0x30>)
    598c:	4798      	blx	r3
}
    598e:	bf00      	nop
    5990:	bd80      	pop	{r7, pc}
    5992:	bf00      	nop
    5994:	40001c00 	.word	0x40001c00
    5998:	00004a49 	.word	0x00004a49
    599c:	40000800 	.word	0x40000800
    59a0:	00004d0f 	.word	0x00004d0f

000059a4 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    59a4:	b580      	push	{r7, lr}
    59a6:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    59a8:	4b04      	ldr	r3, [pc, #16]	; (59bc <I2C_FANS_init+0x18>)
    59aa:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    59ac:	4904      	ldr	r1, [pc, #16]	; (59c0 <I2C_FANS_init+0x1c>)
    59ae:	4805      	ldr	r0, [pc, #20]	; (59c4 <I2C_FANS_init+0x20>)
    59b0:	4b05      	ldr	r3, [pc, #20]	; (59c8 <I2C_FANS_init+0x24>)
    59b2:	4798      	blx	r3
	I2C_FANS_PORT_init();
    59b4:	4b05      	ldr	r3, [pc, #20]	; (59cc <I2C_FANS_init+0x28>)
    59b6:	4798      	blx	r3
}
    59b8:	bf00      	nop
    59ba:	bd80      	pop	{r7, pc}
    59bc:	00005971 	.word	0x00005971
    59c0:	43000c00 	.word	0x43000c00
    59c4:	2000d728 	.word	0x2000d728
    59c8:	0000678d 	.word	0x0000678d
    59cc:	00005939 	.word	0x00005939

000059d0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    59d4:	4808      	ldr	r0, [pc, #32]	; (59f8 <TIMER_USB_init+0x28>)
    59d6:	4b09      	ldr	r3, [pc, #36]	; (59fc <TIMER_USB_init+0x2c>)
    59d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    59da:	2243      	movs	r2, #67	; 0x43
    59dc:	2109      	movs	r1, #9
    59de:	4808      	ldr	r0, [pc, #32]	; (5a00 <TIMER_USB_init+0x30>)
    59e0:	4b08      	ldr	r3, [pc, #32]	; (5a04 <TIMER_USB_init+0x34>)
    59e2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    59e4:	4b08      	ldr	r3, [pc, #32]	; (5a08 <TIMER_USB_init+0x38>)
    59e6:	4798      	blx	r3
    59e8:	4603      	mov	r3, r0
    59ea:	461a      	mov	r2, r3
    59ec:	4907      	ldr	r1, [pc, #28]	; (5a0c <TIMER_USB_init+0x3c>)
    59ee:	4808      	ldr	r0, [pc, #32]	; (5a10 <TIMER_USB_init+0x40>)
    59f0:	4b08      	ldr	r3, [pc, #32]	; (5a14 <TIMER_USB_init+0x44>)
    59f2:	4798      	blx	r3
}
    59f4:	bf00      	nop
    59f6:	bd80      	pop	{r7, pc}
    59f8:	40000800 	.word	0x40000800
    59fc:	00004b6f 	.word	0x00004b6f
    5a00:	40001c00 	.word	0x40001c00
    5a04:	00004a49 	.word	0x00004a49
    5a08:	0000cbb9 	.word	0x0000cbb9
    5a0c:	40003800 	.word	0x40003800
    5a10:	2000d850 	.word	0x2000d850
    5a14:	00006d09 	.word	0x00006d09

00005a18 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5a18:	b580      	push	{r7, lr}
    5a1a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5a1c:	4808      	ldr	r0, [pc, #32]	; (5a40 <TIMER_ARINC_init+0x28>)
    5a1e:	4b09      	ldr	r3, [pc, #36]	; (5a44 <TIMER_ARINC_init+0x2c>)
    5a20:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a22:	2244      	movs	r2, #68	; 0x44
    5a24:	211a      	movs	r1, #26
    5a26:	4808      	ldr	r0, [pc, #32]	; (5a48 <TIMER_ARINC_init+0x30>)
    5a28:	4b08      	ldr	r3, [pc, #32]	; (5a4c <TIMER_ARINC_init+0x34>)
    5a2a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5a2c:	4b08      	ldr	r3, [pc, #32]	; (5a50 <TIMER_ARINC_init+0x38>)
    5a2e:	4798      	blx	r3
    5a30:	4603      	mov	r3, r0
    5a32:	461a      	mov	r2, r3
    5a34:	4907      	ldr	r1, [pc, #28]	; (5a54 <TIMER_ARINC_init+0x3c>)
    5a36:	4808      	ldr	r0, [pc, #32]	; (5a58 <TIMER_ARINC_init+0x40>)
    5a38:	4b08      	ldr	r3, [pc, #32]	; (5a5c <TIMER_ARINC_init+0x44>)
    5a3a:	4798      	blx	r3
}
    5a3c:	bf00      	nop
    5a3e:	bd80      	pop	{r7, pc}
    5a40:	40000800 	.word	0x40000800
    5a44:	00004c2f 	.word	0x00004c2f
    5a48:	40001c00 	.word	0x40001c00
    5a4c:	00004a49 	.word	0x00004a49
    5a50:	0000cbb9 	.word	0x0000cbb9
    5a54:	4101a000 	.word	0x4101a000
    5a58:	2000d830 	.word	0x2000d830
    5a5c:	00006d09 	.word	0x00006d09

00005a60 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    5a64:	4808      	ldr	r0, [pc, #32]	; (5a88 <TIMER_MAINTENANCE_init+0x28>)
    5a66:	4b09      	ldr	r3, [pc, #36]	; (5a8c <TIMER_MAINTENANCE_init+0x2c>)
    5a68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a6a:	2246      	movs	r2, #70	; 0x46
    5a6c:	211e      	movs	r1, #30
    5a6e:	4808      	ldr	r0, [pc, #32]	; (5a90 <TIMER_MAINTENANCE_init+0x30>)
    5a70:	4b08      	ldr	r3, [pc, #32]	; (5a94 <TIMER_MAINTENANCE_init+0x34>)
    5a72:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    5a74:	4b08      	ldr	r3, [pc, #32]	; (5a98 <TIMER_MAINTENANCE_init+0x38>)
    5a76:	4798      	blx	r3
    5a78:	4603      	mov	r3, r0
    5a7a:	461a      	mov	r2, r3
    5a7c:	4907      	ldr	r1, [pc, #28]	; (5a9c <TIMER_MAINTENANCE_init+0x3c>)
    5a7e:	4808      	ldr	r0, [pc, #32]	; (5aa0 <TIMER_MAINTENANCE_init+0x40>)
    5a80:	4b08      	ldr	r3, [pc, #32]	; (5aa4 <TIMER_MAINTENANCE_init+0x44>)
    5a82:	4798      	blx	r3
}
    5a84:	bf00      	nop
    5a86:	bd80      	pop	{r7, pc}
    5a88:	40000800 	.word	0x40000800
    5a8c:	00004c4f 	.word	0x00004c4f
    5a90:	40001c00 	.word	0x40001c00
    5a94:	00004a49 	.word	0x00004a49
    5a98:	0000cbb9 	.word	0x0000cbb9
    5a9c:	42001400 	.word	0x42001400
    5aa0:	2000d748 	.word	0x2000d748
    5aa4:	00006d09 	.word	0x00006d09

00005aa8 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5aa8:	b580      	push	{r7, lr}
    5aaa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5aac:	4808      	ldr	r0, [pc, #32]	; (5ad0 <TIMER_INTERFACE_init+0x28>)
    5aae:	4b09      	ldr	r3, [pc, #36]	; (5ad4 <TIMER_INTERFACE_init+0x2c>)
    5ab0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5ab2:	2246      	movs	r2, #70	; 0x46
    5ab4:	211e      	movs	r1, #30
    5ab6:	4808      	ldr	r0, [pc, #32]	; (5ad8 <TIMER_INTERFACE_init+0x30>)
    5ab8:	4b08      	ldr	r3, [pc, #32]	; (5adc <TIMER_INTERFACE_init+0x34>)
    5aba:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5abc:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <TIMER_INTERFACE_init+0x38>)
    5abe:	4798      	blx	r3
    5ac0:	4603      	mov	r3, r0
    5ac2:	461a      	mov	r2, r3
    5ac4:	4907      	ldr	r1, [pc, #28]	; (5ae4 <TIMER_INTERFACE_init+0x3c>)
    5ac6:	4808      	ldr	r0, [pc, #32]	; (5ae8 <TIMER_INTERFACE_init+0x40>)
    5ac8:	4b08      	ldr	r3, [pc, #32]	; (5aec <TIMER_INTERFACE_init+0x44>)
    5aca:	4798      	blx	r3
}
    5acc:	bf00      	nop
    5ace:	bd80      	pop	{r7, pc}
    5ad0:	40000800 	.word	0x40000800
    5ad4:	00004c6f 	.word	0x00004c6f
    5ad8:	40001c00 	.word	0x40001c00
    5adc:	00004a49 	.word	0x00004a49
    5ae0:	0000cbb9 	.word	0x0000cbb9
    5ae4:	42001800 	.word	0x42001800
    5ae8:	2000d78c 	.word	0x2000d78c
    5aec:	00006d09 	.word	0x00006d09

00005af0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    5af0:	b580      	push	{r7, lr}
    5af2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5af4:	4808      	ldr	r0, [pc, #32]	; (5b18 <TIMER_EVENT_init+0x28>)
    5af6:	4b09      	ldr	r3, [pc, #36]	; (5b1c <TIMER_EVENT_init+0x2c>)
    5af8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5afa:	2246      	movs	r2, #70	; 0x46
    5afc:	2127      	movs	r1, #39	; 0x27
    5afe:	4808      	ldr	r0, [pc, #32]	; (5b20 <TIMER_EVENT_init+0x30>)
    5b00:	4b08      	ldr	r3, [pc, #32]	; (5b24 <TIMER_EVENT_init+0x34>)
    5b02:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5b04:	4b08      	ldr	r3, [pc, #32]	; (5b28 <TIMER_EVENT_init+0x38>)
    5b06:	4798      	blx	r3
    5b08:	4603      	mov	r3, r0
    5b0a:	461a      	mov	r2, r3
    5b0c:	4907      	ldr	r1, [pc, #28]	; (5b2c <TIMER_EVENT_init+0x3c>)
    5b0e:	4808      	ldr	r0, [pc, #32]	; (5b30 <TIMER_EVENT_init+0x40>)
    5b10:	4b08      	ldr	r3, [pc, #32]	; (5b34 <TIMER_EVENT_init+0x44>)
    5b12:	4798      	blx	r3
}
    5b14:	bf00      	nop
    5b16:	bd80      	pop	{r7, pc}
    5b18:	40000800 	.word	0x40000800
    5b1c:	00004d2f 	.word	0x00004d2f
    5b20:	40001c00 	.word	0x40001c00
    5b24:	00004a49 	.word	0x00004a49
    5b28:	0000cbb9 	.word	0x0000cbb9
    5b2c:	43001400 	.word	0x43001400
    5b30:	2000d76c 	.word	0x2000d76c
    5b34:	00006d09 	.word	0x00006d09

00005b38 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    5b38:	b480      	push	{r7}
    5b3a:	af00      	add	r7, sp, #0
}
    5b3c:	bf00      	nop
    5b3e:	46bd      	mov	sp, r7
    5b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b44:	4770      	bx	lr
	...

00005b48 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    5b4c:	4804      	ldr	r0, [pc, #16]	; (5b60 <LIVE_PULSE_CLOCK_init+0x18>)
    5b4e:	4b05      	ldr	r3, [pc, #20]	; (5b64 <LIVE_PULSE_CLOCK_init+0x1c>)
    5b50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b52:	2240      	movs	r2, #64	; 0x40
    5b54:	2127      	movs	r1, #39	; 0x27
    5b56:	4804      	ldr	r0, [pc, #16]	; (5b68 <LIVE_PULSE_CLOCK_init+0x20>)
    5b58:	4b04      	ldr	r3, [pc, #16]	; (5b6c <LIVE_PULSE_CLOCK_init+0x24>)
    5b5a:	4798      	blx	r3
}
    5b5c:	bf00      	nop
    5b5e:	bd80      	pop	{r7, pc}
    5b60:	40000800 	.word	0x40000800
    5b64:	00004d4f 	.word	0x00004d4f
    5b68:	40001c00 	.word	0x40001c00
    5b6c:	00004a49 	.word	0x00004a49

00005b70 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5b74:	4b06      	ldr	r3, [pc, #24]	; (5b90 <LIVE_PULSE_init+0x20>)
    5b76:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5b78:	4b06      	ldr	r3, [pc, #24]	; (5b94 <LIVE_PULSE_init+0x24>)
    5b7a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    5b7c:	4b06      	ldr	r3, [pc, #24]	; (5b98 <LIVE_PULSE_init+0x28>)
    5b7e:	4798      	blx	r3
    5b80:	4603      	mov	r3, r0
    5b82:	461a      	mov	r2, r3
    5b84:	4905      	ldr	r1, [pc, #20]	; (5b9c <LIVE_PULSE_init+0x2c>)
    5b86:	4806      	ldr	r0, [pc, #24]	; (5ba0 <LIVE_PULSE_init+0x30>)
    5b88:	4b06      	ldr	r3, [pc, #24]	; (5ba4 <LIVE_PULSE_init+0x34>)
    5b8a:	4798      	blx	r3
}
    5b8c:	bf00      	nop
    5b8e:	bd80      	pop	{r7, pc}
    5b90:	00005b49 	.word	0x00005b49
    5b94:	00005b39 	.word	0x00005b39
    5b98:	0000cbcd 	.word	0x0000cbcd
    5b9c:	43001800 	.word	0x43001800
    5ba0:	2000d7cc 	.word	0x2000d7cc
    5ba4:	00006869 	.word	0x00006869

00005ba8 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5bac:	4804      	ldr	r0, [pc, #16]	; (5bc0 <TIMER_HVAC_CLOCK_init+0x18>)
    5bae:	4b05      	ldr	r3, [pc, #20]	; (5bc4 <TIMER_HVAC_CLOCK_init+0x1c>)
    5bb0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5bb2:	2244      	movs	r2, #68	; 0x44
    5bb4:	2119      	movs	r1, #25
    5bb6:	4804      	ldr	r0, [pc, #16]	; (5bc8 <TIMER_HVAC_CLOCK_init+0x20>)
    5bb8:	4b04      	ldr	r3, [pc, #16]	; (5bcc <TIMER_HVAC_CLOCK_init+0x24>)
    5bba:	4798      	blx	r3
}
    5bbc:	bf00      	nop
    5bbe:	bd80      	pop	{r7, pc}
    5bc0:	40000800 	.word	0x40000800
    5bc4:	00004bef 	.word	0x00004bef
    5bc8:	40001c00 	.word	0x40001c00
    5bcc:	00004a49 	.word	0x00004a49

00005bd0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    5bd4:	4b05      	ldr	r3, [pc, #20]	; (5bec <TIMER_HVAC_init+0x1c>)
    5bd6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    5bd8:	4b05      	ldr	r3, [pc, #20]	; (5bf0 <TIMER_HVAC_init+0x20>)
    5bda:	4798      	blx	r3
    5bdc:	4603      	mov	r3, r0
    5bde:	461a      	mov	r2, r3
    5be0:	4904      	ldr	r1, [pc, #16]	; (5bf4 <TIMER_HVAC_init+0x24>)
    5be2:	4805      	ldr	r0, [pc, #20]	; (5bf8 <TIMER_HVAC_init+0x28>)
    5be4:	4b05      	ldr	r3, [pc, #20]	; (5bfc <TIMER_HVAC_init+0x2c>)
    5be6:	4798      	blx	r3
}
    5be8:	bf00      	nop
    5bea:	bd80      	pop	{r7, pc}
    5bec:	00005ba9 	.word	0x00005ba9
    5bf0:	0000bf79 	.word	0x0000bf79
    5bf4:	41016000 	.word	0x41016000
    5bf8:	2000d870 	.word	0x2000d870
    5bfc:	00006d09 	.word	0x00006d09

00005c00 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    5c00:	b580      	push	{r7, lr}
    5c02:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    5c04:	4804      	ldr	r0, [pc, #16]	; (5c18 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    5c06:	4b05      	ldr	r3, [pc, #20]	; (5c1c <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    5c08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5c0a:	2244      	movs	r2, #68	; 0x44
    5c0c:	2119      	movs	r1, #25
    5c0e:	4804      	ldr	r0, [pc, #16]	; (5c20 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    5c10:	4b04      	ldr	r3, [pc, #16]	; (5c24 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    5c12:	4798      	blx	r3
}
    5c14:	bf00      	nop
    5c16:	bd80      	pop	{r7, pc}
    5c18:	40000800 	.word	0x40000800
    5c1c:	00004c0f 	.word	0x00004c0f
    5c20:	40001c00 	.word	0x40001c00
    5c24:	00004a49 	.word	0x00004a49

00005c28 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5c2c:	4b05      	ldr	r3, [pc, #20]	; (5c44 <TIMER_TEMPERATURES_init+0x1c>)
    5c2e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    5c30:	4b05      	ldr	r3, [pc, #20]	; (5c48 <TIMER_TEMPERATURES_init+0x20>)
    5c32:	4798      	blx	r3
    5c34:	4603      	mov	r3, r0
    5c36:	461a      	mov	r2, r3
    5c38:	4904      	ldr	r1, [pc, #16]	; (5c4c <TIMER_TEMPERATURES_init+0x24>)
    5c3a:	4805      	ldr	r0, [pc, #20]	; (5c50 <TIMER_TEMPERATURES_init+0x28>)
    5c3c:	4b05      	ldr	r3, [pc, #20]	; (5c54 <TIMER_TEMPERATURES_init+0x2c>)
    5c3e:	4798      	blx	r3
}
    5c40:	bf00      	nop
    5c42:	bd80      	pop	{r7, pc}
    5c44:	00005c01 	.word	0x00005c01
    5c48:	0000bf79 	.word	0x0000bf79
    5c4c:	41018000 	.word	0x41018000
    5c50:	2000d6d8 	.word	0x2000d6d8
    5c54:	00006d09 	.word	0x00006d09

00005c58 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5c5c:	2102      	movs	r1, #2
    5c5e:	2018      	movs	r0, #24
    5c60:	4b0f      	ldr	r3, [pc, #60]	; (5ca0 <CDCUSB_PORT_init+0x48>)
    5c62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5c64:	2100      	movs	r1, #0
    5c66:	2018      	movs	r0, #24
    5c68:	4b0e      	ldr	r3, [pc, #56]	; (5ca4 <CDCUSB_PORT_init+0x4c>)
    5c6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5c6c:	2100      	movs	r1, #0
    5c6e:	2018      	movs	r0, #24
    5c70:	4b0d      	ldr	r3, [pc, #52]	; (5ca8 <CDCUSB_PORT_init+0x50>)
    5c72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5c74:	490d      	ldr	r1, [pc, #52]	; (5cac <CDCUSB_PORT_init+0x54>)
    5c76:	2018      	movs	r0, #24
    5c78:	4b0d      	ldr	r3, [pc, #52]	; (5cb0 <CDCUSB_PORT_init+0x58>)
    5c7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5c7c:	2102      	movs	r1, #2
    5c7e:	2019      	movs	r0, #25
    5c80:	4b07      	ldr	r3, [pc, #28]	; (5ca0 <CDCUSB_PORT_init+0x48>)
    5c82:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5c84:	2100      	movs	r1, #0
    5c86:	2019      	movs	r0, #25
    5c88:	4b06      	ldr	r3, [pc, #24]	; (5ca4 <CDCUSB_PORT_init+0x4c>)
    5c8a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5c8c:	2100      	movs	r1, #0
    5c8e:	2019      	movs	r0, #25
    5c90:	4b05      	ldr	r3, [pc, #20]	; (5ca8 <CDCUSB_PORT_init+0x50>)
    5c92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5c94:	4907      	ldr	r1, [pc, #28]	; (5cb4 <CDCUSB_PORT_init+0x5c>)
    5c96:	2019      	movs	r0, #25
    5c98:	4b05      	ldr	r3, [pc, #20]	; (5cb0 <CDCUSB_PORT_init+0x58>)
    5c9a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5c9c:	bf00      	nop
    5c9e:	bd80      	pop	{r7, pc}
    5ca0:	0000529d 	.word	0x0000529d
    5ca4:	000052d5 	.word	0x000052d5
    5ca8:	00005249 	.word	0x00005249
    5cac:	00180007 	.word	0x00180007
    5cb0:	0000527d 	.word	0x0000527d
    5cb4:	00190007 	.word	0x00190007

00005cb8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5cbc:	2242      	movs	r2, #66	; 0x42
    5cbe:	210a      	movs	r1, #10
    5cc0:	4805      	ldr	r0, [pc, #20]	; (5cd8 <CDCUSB_CLOCK_init+0x20>)
    5cc2:	4b06      	ldr	r3, [pc, #24]	; (5cdc <CDCUSB_CLOCK_init+0x24>)
    5cc4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    5cc6:	4806      	ldr	r0, [pc, #24]	; (5ce0 <CDCUSB_CLOCK_init+0x28>)
    5cc8:	4b06      	ldr	r3, [pc, #24]	; (5ce4 <CDCUSB_CLOCK_init+0x2c>)
    5cca:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5ccc:	4804      	ldr	r0, [pc, #16]	; (5ce0 <CDCUSB_CLOCK_init+0x28>)
    5cce:	4b06      	ldr	r3, [pc, #24]	; (5ce8 <CDCUSB_CLOCK_init+0x30>)
    5cd0:	4798      	blx	r3
}
    5cd2:	bf00      	nop
    5cd4:	bd80      	pop	{r7, pc}
    5cd6:	bf00      	nop
    5cd8:	40001c00 	.word	0x40001c00
    5cdc:	00004a49 	.word	0x00004a49
    5ce0:	40000800 	.word	0x40000800
    5ce4:	00004a6f 	.word	0x00004a6f
    5ce8:	00004b8f 	.word	0x00004b8f

00005cec <CDCUSB_init>:

void CDCUSB_init(void)
{
    5cec:	b580      	push	{r7, lr}
    5cee:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    5cf0:	4b03      	ldr	r3, [pc, #12]	; (5d00 <CDCUSB_init+0x14>)
    5cf2:	4798      	blx	r3
	usb_d_init();
    5cf4:	4b03      	ldr	r3, [pc, #12]	; (5d04 <CDCUSB_init+0x18>)
    5cf6:	4798      	blx	r3
	CDCUSB_PORT_init();
    5cf8:	4b03      	ldr	r3, [pc, #12]	; (5d08 <CDCUSB_init+0x1c>)
    5cfa:	4798      	blx	r3
}
    5cfc:	bf00      	nop
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	00005cb9 	.word	0x00005cb9
    5d04:	00007565 	.word	0x00007565
    5d08:	00005c59 	.word	0x00005c59

00005d0c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    5d10:	4802      	ldr	r0, [pc, #8]	; (5d1c <WATCHDOG_CLOCK_init+0x10>)
    5d12:	4b03      	ldr	r3, [pc, #12]	; (5d20 <WATCHDOG_CLOCK_init+0x14>)
    5d14:	4798      	blx	r3
}
    5d16:	bf00      	nop
    5d18:	bd80      	pop	{r7, pc}
    5d1a:	bf00      	nop
    5d1c:	40000800 	.word	0x40000800
    5d20:	00004aef 	.word	0x00004aef

00005d24 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    5d28:	4b03      	ldr	r3, [pc, #12]	; (5d38 <WATCHDOG_init+0x14>)
    5d2a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5d2c:	4903      	ldr	r1, [pc, #12]	; (5d3c <WATCHDOG_init+0x18>)
    5d2e:	4804      	ldr	r0, [pc, #16]	; (5d40 <WATCHDOG_init+0x1c>)
    5d30:	4b04      	ldr	r3, [pc, #16]	; (5d44 <WATCHDOG_init+0x20>)
    5d32:	4798      	blx	r3
}
    5d34:	bf00      	nop
    5d36:	bd80      	pop	{r7, pc}
    5d38:	00005d0d 	.word	0x00005d0d
    5d3c:	40002000 	.word	0x40002000
    5d40:	2000d8b0 	.word	0x2000d8b0
    5d44:	0000531d 	.word	0x0000531d

00005d48 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5d48:	b580      	push	{r7, lr}
    5d4a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5d4c:	4904      	ldr	r1, [pc, #16]	; (5d60 <CAN_CCU_PORT_init+0x18>)
    5d4e:	202d      	movs	r0, #45	; 0x2d
    5d50:	4b04      	ldr	r3, [pc, #16]	; (5d64 <CAN_CCU_PORT_init+0x1c>)
    5d52:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5d54:	4904      	ldr	r1, [pc, #16]	; (5d68 <CAN_CCU_PORT_init+0x20>)
    5d56:	202c      	movs	r0, #44	; 0x2c
    5d58:	4b02      	ldr	r3, [pc, #8]	; (5d64 <CAN_CCU_PORT_init+0x1c>)
    5d5a:	4798      	blx	r3
}
    5d5c:	bf00      	nop
    5d5e:	bd80      	pop	{r7, pc}
    5d60:	002d0007 	.word	0x002d0007
    5d64:	0000527d 	.word	0x0000527d
    5d68:	002c0007 	.word	0x002c0007

00005d6c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5d70:	4807      	ldr	r0, [pc, #28]	; (5d90 <CAN_CCU_init+0x24>)
    5d72:	4b08      	ldr	r3, [pc, #32]	; (5d94 <CAN_CCU_init+0x28>)
    5d74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5d76:	2243      	movs	r2, #67	; 0x43
    5d78:	211c      	movs	r1, #28
    5d7a:	4807      	ldr	r0, [pc, #28]	; (5d98 <CAN_CCU_init+0x2c>)
    5d7c:	4b07      	ldr	r3, [pc, #28]	; (5d9c <CAN_CCU_init+0x30>)
    5d7e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5d80:	4907      	ldr	r1, [pc, #28]	; (5da0 <CAN_CCU_init+0x34>)
    5d82:	4808      	ldr	r0, [pc, #32]	; (5da4 <CAN_CCU_init+0x38>)
    5d84:	4b08      	ldr	r3, [pc, #32]	; (5da8 <CAN_CCU_init+0x3c>)
    5d86:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5d88:	4b08      	ldr	r3, [pc, #32]	; (5dac <CAN_CCU_init+0x40>)
    5d8a:	4798      	blx	r3
}
    5d8c:	bf00      	nop
    5d8e:	bd80      	pop	{r7, pc}
    5d90:	40000800 	.word	0x40000800
    5d94:	00004aaf 	.word	0x00004aaf
    5d98:	40001c00 	.word	0x40001c00
    5d9c:	00004a49 	.word	0x00004a49
    5da0:	42000400 	.word	0x42000400
    5da4:	2000d808 	.word	0x2000d808
    5da8:	00006275 	.word	0x00006275
    5dac:	00005d49 	.word	0x00005d49

00005db0 <system_init>:

void system_init(void)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	init_mcu();
    5db4:	4b5e      	ldr	r3, [pc, #376]	; (5f30 <system_init+0x180>)
    5db6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    5db8:	2100      	movs	r1, #0
    5dba:	2007      	movs	r0, #7
    5dbc:	4b5d      	ldr	r3, [pc, #372]	; (5f34 <system_init+0x184>)
    5dbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    5dc0:	2102      	movs	r1, #2
    5dc2:	2007      	movs	r0, #7
    5dc4:	4b5c      	ldr	r3, [pc, #368]	; (5f38 <system_init+0x188>)
    5dc6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    5dc8:	f04f 31ff 	mov.w	r1, #4294967295
    5dcc:	2007      	movs	r0, #7
    5dce:	4b5b      	ldr	r3, [pc, #364]	; (5f3c <system_init+0x18c>)
    5dd0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5dd2:	2101      	movs	r1, #1
    5dd4:	200f      	movs	r0, #15
    5dd6:	4b57      	ldr	r3, [pc, #348]	; (5f34 <system_init+0x184>)
    5dd8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5dda:	2102      	movs	r1, #2
    5ddc:	200f      	movs	r0, #15
    5dde:	4b56      	ldr	r3, [pc, #344]	; (5f38 <system_init+0x188>)
    5de0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    5de2:	f04f 31ff 	mov.w	r1, #4294967295
    5de6:	200f      	movs	r0, #15
    5de8:	4b54      	ldr	r3, [pc, #336]	; (5f3c <system_init+0x18c>)
    5dea:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5dec:	2101      	movs	r1, #1
    5dee:	2013      	movs	r0, #19
    5df0:	4b50      	ldr	r3, [pc, #320]	; (5f34 <system_init+0x184>)
    5df2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    5df4:	2102      	movs	r1, #2
    5df6:	2013      	movs	r0, #19
    5df8:	4b4f      	ldr	r3, [pc, #316]	; (5f38 <system_init+0x188>)
    5dfa:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5dfc:	f04f 31ff 	mov.w	r1, #4294967295
    5e00:	2013      	movs	r0, #19
    5e02:	4b4e      	ldr	r3, [pc, #312]	; (5f3c <system_init+0x18c>)
    5e04:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5e06:	2101      	movs	r1, #1
    5e08:	201b      	movs	r0, #27
    5e0a:	4b4a      	ldr	r3, [pc, #296]	; (5f34 <system_init+0x184>)
    5e0c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5e0e:	2102      	movs	r1, #2
    5e10:	201b      	movs	r0, #27
    5e12:	4b49      	ldr	r3, [pc, #292]	; (5f38 <system_init+0x188>)
    5e14:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5e16:	f04f 31ff 	mov.w	r1, #4294967295
    5e1a:	201b      	movs	r0, #27
    5e1c:	4b47      	ldr	r3, [pc, #284]	; (5f3c <system_init+0x18c>)
    5e1e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    5e20:	2101      	movs	r1, #1
    5e22:	2027      	movs	r0, #39	; 0x27
    5e24:	4b43      	ldr	r3, [pc, #268]	; (5f34 <system_init+0x184>)
    5e26:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    5e28:	2102      	movs	r1, #2
    5e2a:	2027      	movs	r0, #39	; 0x27
    5e2c:	4b42      	ldr	r3, [pc, #264]	; (5f38 <system_init+0x188>)
    5e2e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    5e30:	f04f 31ff 	mov.w	r1, #4294967295
    5e34:	2027      	movs	r0, #39	; 0x27
    5e36:	4b41      	ldr	r3, [pc, #260]	; (5f3c <system_init+0x18c>)
    5e38:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5e3a:	2101      	movs	r1, #1
    5e3c:	203d      	movs	r0, #61	; 0x3d
    5e3e:	4b3d      	ldr	r3, [pc, #244]	; (5f34 <system_init+0x184>)
    5e40:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5e42:	2102      	movs	r1, #2
    5e44:	203d      	movs	r0, #61	; 0x3d
    5e46:	4b3c      	ldr	r3, [pc, #240]	; (5f38 <system_init+0x188>)
    5e48:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5e4a:	f04f 31ff 	mov.w	r1, #4294967295
    5e4e:	203d      	movs	r0, #61	; 0x3d
    5e50:	4b3a      	ldr	r3, [pc, #232]	; (5f3c <system_init+0x18c>)
    5e52:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5e54:	2101      	movs	r1, #1
    5e56:	203f      	movs	r0, #63	; 0x3f
    5e58:	4b37      	ldr	r3, [pc, #220]	; (5f38 <system_init+0x188>)
    5e5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5e5c:	2101      	movs	r1, #1
    5e5e:	203f      	movs	r0, #63	; 0x3f
    5e60:	4b37      	ldr	r3, [pc, #220]	; (5f40 <system_init+0x190>)
    5e62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5e64:	f04f 31ff 	mov.w	r1, #4294967295
    5e68:	203f      	movs	r0, #63	; 0x3f
    5e6a:	4b34      	ldr	r3, [pc, #208]	; (5f3c <system_init+0x18c>)
    5e6c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5e6e:	2100      	movs	r1, #0
    5e70:	204d      	movs	r0, #77	; 0x4d
    5e72:	4b30      	ldr	r3, [pc, #192]	; (5f34 <system_init+0x184>)
    5e74:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5e76:	2102      	movs	r1, #2
    5e78:	204d      	movs	r0, #77	; 0x4d
    5e7a:	4b2f      	ldr	r3, [pc, #188]	; (5f38 <system_init+0x188>)
    5e7c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5e7e:	f04f 31ff 	mov.w	r1, #4294967295
    5e82:	204d      	movs	r0, #77	; 0x4d
    5e84:	4b2d      	ldr	r3, [pc, #180]	; (5f3c <system_init+0x18c>)
    5e86:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5e88:	2101      	movs	r1, #1
    5e8a:	204e      	movs	r0, #78	; 0x4e
    5e8c:	4b29      	ldr	r3, [pc, #164]	; (5f34 <system_init+0x184>)
    5e8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5e90:	2102      	movs	r1, #2
    5e92:	204e      	movs	r0, #78	; 0x4e
    5e94:	4b28      	ldr	r3, [pc, #160]	; (5f38 <system_init+0x188>)
    5e96:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5e98:	f04f 31ff 	mov.w	r1, #4294967295
    5e9c:	204e      	movs	r0, #78	; 0x4e
    5e9e:	4b27      	ldr	r3, [pc, #156]	; (5f3c <system_init+0x18c>)
    5ea0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5ea2:	2100      	movs	r1, #0
    5ea4:	204f      	movs	r0, #79	; 0x4f
    5ea6:	4b23      	ldr	r3, [pc, #140]	; (5f34 <system_init+0x184>)
    5ea8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5eaa:	2102      	movs	r1, #2
    5eac:	204f      	movs	r0, #79	; 0x4f
    5eae:	4b22      	ldr	r3, [pc, #136]	; (5f38 <system_init+0x188>)
    5eb0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5eb2:	f04f 31ff 	mov.w	r1, #4294967295
    5eb6:	204f      	movs	r0, #79	; 0x4f
    5eb8:	4b20      	ldr	r3, [pc, #128]	; (5f3c <system_init+0x18c>)
    5eba:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5ebc:	2100      	movs	r1, #0
    5ebe:	2052      	movs	r0, #82	; 0x52
    5ec0:	4b1c      	ldr	r3, [pc, #112]	; (5f34 <system_init+0x184>)
    5ec2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5ec4:	2102      	movs	r1, #2
    5ec6:	2052      	movs	r0, #82	; 0x52
    5ec8:	4b1b      	ldr	r3, [pc, #108]	; (5f38 <system_init+0x188>)
    5eca:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5ecc:	f04f 31ff 	mov.w	r1, #4294967295
    5ed0:	2052      	movs	r0, #82	; 0x52
    5ed2:	4b1a      	ldr	r3, [pc, #104]	; (5f3c <system_init+0x18c>)
    5ed4:	4798      	blx	r3

	CRC_CALC_init();
    5ed6:	4b1b      	ldr	r3, [pc, #108]	; (5f44 <system_init+0x194>)
    5ed8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5eda:	4b1b      	ldr	r3, [pc, #108]	; (5f48 <system_init+0x198>)
    5edc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5ede:	4b1b      	ldr	r3, [pc, #108]	; (5f4c <system_init+0x19c>)
    5ee0:	4798      	blx	r3

	QSPI_N25Q256_init();
    5ee2:	4b1b      	ldr	r3, [pc, #108]	; (5f50 <system_init+0x1a0>)
    5ee4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5ee6:	4b1b      	ldr	r3, [pc, #108]	; (5f54 <system_init+0x1a4>)
    5ee8:	4798      	blx	r3

	I2C_HEATERS_init();
    5eea:	4b1b      	ldr	r3, [pc, #108]	; (5f58 <system_init+0x1a8>)
    5eec:	4798      	blx	r3

	SPI_TEMP_init();
    5eee:	4b1b      	ldr	r3, [pc, #108]	; (5f5c <system_init+0x1ac>)
    5ef0:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    5ef2:	4b1b      	ldr	r3, [pc, #108]	; (5f60 <system_init+0x1b0>)
    5ef4:	4798      	blx	r3

	SPI_HI3593_init();
    5ef6:	4b1b      	ldr	r3, [pc, #108]	; (5f64 <system_init+0x1b4>)
    5ef8:	4798      	blx	r3

	I2C_FANS_init();
    5efa:	4b1b      	ldr	r3, [pc, #108]	; (5f68 <system_init+0x1b8>)
    5efc:	4798      	blx	r3

	TIMER_USB_init();
    5efe:	4b1b      	ldr	r3, [pc, #108]	; (5f6c <system_init+0x1bc>)
    5f00:	4798      	blx	r3
	TIMER_ARINC_init();
    5f02:	4b1b      	ldr	r3, [pc, #108]	; (5f70 <system_init+0x1c0>)
    5f04:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    5f06:	4b1b      	ldr	r3, [pc, #108]	; (5f74 <system_init+0x1c4>)
    5f08:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5f0a:	4b1b      	ldr	r3, [pc, #108]	; (5f78 <system_init+0x1c8>)
    5f0c:	4798      	blx	r3
	TIMER_EVENT_init();
    5f0e:	4b1b      	ldr	r3, [pc, #108]	; (5f7c <system_init+0x1cc>)
    5f10:	4798      	blx	r3
	LIVE_PULSE_init();
    5f12:	4b1b      	ldr	r3, [pc, #108]	; (5f80 <system_init+0x1d0>)
    5f14:	4798      	blx	r3

	TIMER_HVAC_init();
    5f16:	4b1b      	ldr	r3, [pc, #108]	; (5f84 <system_init+0x1d4>)
    5f18:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    5f1a:	4b1b      	ldr	r3, [pc, #108]	; (5f88 <system_init+0x1d8>)
    5f1c:	4798      	blx	r3

	CDCUSB_init();
    5f1e:	4b1b      	ldr	r3, [pc, #108]	; (5f8c <system_init+0x1dc>)
    5f20:	4798      	blx	r3

	WATCHDOG_init();
    5f22:	4b1b      	ldr	r3, [pc, #108]	; (5f90 <system_init+0x1e0>)
    5f24:	4798      	blx	r3
	CAN_CCU_init();
    5f26:	4b1b      	ldr	r3, [pc, #108]	; (5f94 <system_init+0x1e4>)
    5f28:	4798      	blx	r3
}
    5f2a:	bf00      	nop
    5f2c:	bd80      	pop	{r7, pc}
    5f2e:	bf00      	nop
    5f30:	0000530d 	.word	0x0000530d
    5f34:	000052d5 	.word	0x000052d5
    5f38:	0000529d 	.word	0x0000529d
    5f3c:	0000527d 	.word	0x0000527d
    5f40:	00005249 	.word	0x00005249
    5f44:	0000536d 	.word	0x0000536d
    5f48:	00005399 	.word	0x00005399
    5f4c:	000054c1 	.word	0x000054c1
    5f50:	00005609 	.word	0x00005609
    5f54:	0000564d 	.word	0x0000564d
    5f58:	000056dd 	.word	0x000056dd
    5f5c:	000057a9 	.word	0x000057a9
    5f60:	00005841 	.word	0x00005841
    5f64:	0000590d 	.word	0x0000590d
    5f68:	000059a5 	.word	0x000059a5
    5f6c:	000059d1 	.word	0x000059d1
    5f70:	00005a19 	.word	0x00005a19
    5f74:	00005a61 	.word	0x00005a61
    5f78:	00005aa9 	.word	0x00005aa9
    5f7c:	00005af1 	.word	0x00005af1
    5f80:	00005b71 	.word	0x00005b71
    5f84:	00005bd1 	.word	0x00005bd1
    5f88:	00005c29 	.word	0x00005c29
    5f8c:	00005ced 	.word	0x00005ced
    5f90:	00005d25 	.word	0x00005d25
    5f94:	00005d6d 	.word	0x00005d6d

00005f98 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    5f98:	b480      	push	{r7}
    5f9a:	b083      	sub	sp, #12
    5f9c:	af00      	add	r7, sp, #0
    5f9e:	4603      	mov	r3, r0
    5fa0:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    5fa2:	88fb      	ldrh	r3, [r7, #6]
    5fa4:	f003 0303 	and.w	r3, r3, #3
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d001      	beq.n	5fb0 <leap_year+0x18>
		return false;
    5fac:	2300      	movs	r3, #0
    5fae:	e000      	b.n	5fb2 <leap_year+0x1a>
	} else {
		return true;
    5fb0:	2301      	movs	r3, #1
	}
}
    5fb2:	4618      	mov	r0, r3
    5fb4:	370c      	adds	r7, #12
    5fb6:	46bd      	mov	sp, r7
    5fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fbc:	4770      	bx	lr
	...

00005fc0 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b084      	sub	sp, #16
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
    5fc8:	460b      	mov	r3, r1
    5fca:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    5fcc:	2300      	movs	r3, #0
    5fce:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	b29b      	uxth	r3, r3
    5fd4:	4618      	mov	r0, r3
    5fd6:	4b2f      	ldr	r3, [pc, #188]	; (6094 <get_secs_in_month+0xd4>)
    5fd8:	4798      	blx	r3
    5fda:	4603      	mov	r3, r0
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d028      	beq.n	6032 <get_secs_in_month+0x72>
		switch (month) {
    5fe0:	78fb      	ldrb	r3, [r7, #3]
    5fe2:	3b01      	subs	r3, #1
    5fe4:	2b0b      	cmp	r3, #11
    5fe6:	d84c      	bhi.n	6082 <get_secs_in_month+0xc2>
    5fe8:	a201      	add	r2, pc, #4	; (adr r2, 5ff0 <get_secs_in_month+0x30>)
    5fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5fee:	bf00      	nop
    5ff0:	00006021 	.word	0x00006021
    5ff4:	00006027 	.word	0x00006027
    5ff8:	00006021 	.word	0x00006021
    5ffc:	0000602d 	.word	0x0000602d
    6000:	00006021 	.word	0x00006021
    6004:	0000602d 	.word	0x0000602d
    6008:	00006021 	.word	0x00006021
    600c:	00006021 	.word	0x00006021
    6010:	0000602d 	.word	0x0000602d
    6014:	00006021 	.word	0x00006021
    6018:	0000602d 	.word	0x0000602d
    601c:	00006021 	.word	0x00006021
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    6020:	4b1d      	ldr	r3, [pc, #116]	; (6098 <get_secs_in_month+0xd8>)
    6022:	60fb      	str	r3, [r7, #12]
			break;
    6024:	e030      	b.n	6088 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    6026:	4b1d      	ldr	r3, [pc, #116]	; (609c <get_secs_in_month+0xdc>)
    6028:	60fb      	str	r3, [r7, #12]
			break;
    602a:	e02d      	b.n	6088 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    602c:	4b1c      	ldr	r3, [pc, #112]	; (60a0 <get_secs_in_month+0xe0>)
    602e:	60fb      	str	r3, [r7, #12]
			break;
    6030:	e02a      	b.n	6088 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    6032:	78fb      	ldrb	r3, [r7, #3]
    6034:	3b01      	subs	r3, #1
    6036:	2b0b      	cmp	r3, #11
    6038:	d825      	bhi.n	6086 <get_secs_in_month+0xc6>
    603a:	a201      	add	r2, pc, #4	; (adr r2, 6040 <get_secs_in_month+0x80>)
    603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6040:	00006071 	.word	0x00006071
    6044:	00006077 	.word	0x00006077
    6048:	00006071 	.word	0x00006071
    604c:	0000607d 	.word	0x0000607d
    6050:	00006071 	.word	0x00006071
    6054:	0000607d 	.word	0x0000607d
    6058:	00006071 	.word	0x00006071
    605c:	00006071 	.word	0x00006071
    6060:	0000607d 	.word	0x0000607d
    6064:	00006071 	.word	0x00006071
    6068:	0000607d 	.word	0x0000607d
    606c:	00006071 	.word	0x00006071
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    6070:	4b09      	ldr	r3, [pc, #36]	; (6098 <get_secs_in_month+0xd8>)
    6072:	60fb      	str	r3, [r7, #12]
			break;
    6074:	e008      	b.n	6088 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    6076:	4b0b      	ldr	r3, [pc, #44]	; (60a4 <get_secs_in_month+0xe4>)
    6078:	60fb      	str	r3, [r7, #12]
			break;
    607a:	e005      	b.n	6088 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    607c:	4b08      	ldr	r3, [pc, #32]	; (60a0 <get_secs_in_month+0xe0>)
    607e:	60fb      	str	r3, [r7, #12]
			break;
    6080:	e002      	b.n	6088 <get_secs_in_month+0xc8>
			break;
    6082:	bf00      	nop
    6084:	e000      	b.n	6088 <get_secs_in_month+0xc8>
		default:
			break;
    6086:	bf00      	nop
		}
	}

	return sec_in_month;
    6088:	68fb      	ldr	r3, [r7, #12]
}
    608a:	4618      	mov	r0, r3
    608c:	3710      	adds	r7, #16
    608e:	46bd      	mov	sp, r7
    6090:	bd80      	pop	{r7, pc}
    6092:	bf00      	nop
    6094:	00005f99 	.word	0x00005f99
    6098:	0028de80 	.word	0x0028de80
    609c:	00263b80 	.word	0x00263b80
    60a0:	00278d00 	.word	0x00278d00
    60a4:	0024ea00 	.word	0x0024ea00

000060a8 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    60a8:	b580      	push	{r7, lr}
    60aa:	b08a      	sub	sp, #40	; 0x28
    60ac:	af00      	add	r7, sp, #0
    60ae:	60f8      	str	r0, [r7, #12]
    60b0:	60b9      	str	r1, [r7, #8]
    60b2:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    60b4:	68fb      	ldr	r3, [r7, #12]
    60b6:	699b      	ldr	r3, [r3, #24]
    60b8:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    60ba:	2301      	movs	r3, #1
    60bc:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    60be:	2301      	movs	r3, #1
    60c0:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    60c2:	2300      	movs	r3, #0
    60c4:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    60c6:	2300      	movs	r3, #0
    60c8:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    60ca:	68bb      	ldr	r3, [r7, #8]
    60cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    60ce:	6a3b      	ldr	r3, [r7, #32]
    60d0:	b29b      	uxth	r3, r3
    60d2:	4618      	mov	r0, r3
    60d4:	4b32      	ldr	r3, [pc, #200]	; (61a0 <convert_timestamp_to_datetime+0xf8>)
    60d6:	4798      	blx	r3
    60d8:	4603      	mov	r3, r0
    60da:	2b00      	cmp	r3, #0
    60dc:	d001      	beq.n	60e2 <convert_timestamp_to_datetime+0x3a>
    60de:	4b31      	ldr	r3, [pc, #196]	; (61a4 <convert_timestamp_to_datetime+0xfc>)
    60e0:	e000      	b.n	60e4 <convert_timestamp_to_datetime+0x3c>
    60e2:	4b31      	ldr	r3, [pc, #196]	; (61a8 <convert_timestamp_to_datetime+0x100>)
    60e4:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    60e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60e8:	69bb      	ldr	r3, [r7, #24]
    60ea:	429a      	cmp	r2, r3
    60ec:	d307      	bcc.n	60fe <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    60ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60f0:	69bb      	ldr	r3, [r7, #24]
    60f2:	1ad3      	subs	r3, r2, r3
    60f4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    60f6:	6a3b      	ldr	r3, [r7, #32]
    60f8:	3301      	adds	r3, #1
    60fa:	623b      	str	r3, [r7, #32]
    60fc:	e7e7      	b.n	60ce <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    60fe:	7ffb      	ldrb	r3, [r7, #31]
    6100:	4619      	mov	r1, r3
    6102:	6a38      	ldr	r0, [r7, #32]
    6104:	4b29      	ldr	r3, [pc, #164]	; (61ac <convert_timestamp_to_datetime+0x104>)
    6106:	4798      	blx	r3
    6108:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    610a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    610c:	697b      	ldr	r3, [r7, #20]
    610e:	429a      	cmp	r2, r3
    6110:	d307      	bcc.n	6122 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    6112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6114:	697b      	ldr	r3, [r7, #20]
    6116:	1ad3      	subs	r3, r2, r3
    6118:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    611a:	7ffb      	ldrb	r3, [r7, #31]
    611c:	3301      	adds	r3, #1
    611e:	77fb      	strb	r3, [r7, #31]
    6120:	e7ed      	b.n	60fe <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    6122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6124:	4a22      	ldr	r2, [pc, #136]	; (61b0 <convert_timestamp_to_datetime+0x108>)
    6126:	4293      	cmp	r3, r2
    6128:	d909      	bls.n	613e <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    612c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    6130:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    6134:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    6136:	7fbb      	ldrb	r3, [r7, #30]
    6138:	3301      	adds	r3, #1
    613a:	77bb      	strb	r3, [r7, #30]
    613c:	e7f1      	b.n	6122 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6140:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    6144:	d307      	bcc.n	6156 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    6146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6148:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    614c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    614e:	7f7b      	ldrb	r3, [r7, #29]
    6150:	3301      	adds	r3, #1
    6152:	777b      	strb	r3, [r7, #29]
    6154:	e7f3      	b.n	613e <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    6156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6158:	2b3b      	cmp	r3, #59	; 0x3b
    615a:	d906      	bls.n	616a <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    615e:	3b3c      	subs	r3, #60	; 0x3c
    6160:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    6162:	7f3b      	ldrb	r3, [r7, #28]
    6164:	3301      	adds	r3, #1
    6166:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    6168:	e7f5      	b.n	6156 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    616a:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    616c:	6a3b      	ldr	r3, [r7, #32]
    616e:	b29a      	uxth	r2, r3
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	7ffa      	ldrb	r2, [r7, #31]
    6178:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	7fba      	ldrb	r2, [r7, #30]
    617e:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	7f7a      	ldrb	r2, [r7, #29]
    6184:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    6186:	687b      	ldr	r3, [r7, #4]
    6188:	7f3a      	ldrb	r2, [r7, #28]
    618a:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    618e:	b2da      	uxtb	r2, r3
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    6194:	2300      	movs	r3, #0
}
    6196:	4618      	mov	r0, r3
    6198:	3728      	adds	r7, #40	; 0x28
    619a:	46bd      	mov	sp, r7
    619c:	bd80      	pop	{r7, pc}
    619e:	bf00      	nop
    61a0:	00005f99 	.word	0x00005f99
    61a4:	01e28500 	.word	0x01e28500
    61a8:	01e13380 	.word	0x01e13380
    61ac:	00005fc1 	.word	0x00005fc1
    61b0:	0001517f 	.word	0x0001517f

000061b4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b084      	sub	sp, #16
    61b8:	af00      	add	r7, sp, #0
    61ba:	6078      	str	r0, [r7, #4]
    61bc:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    61be:	2300      	movs	r3, #0
    61c0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	2b00      	cmp	r3, #0
    61c6:	bf14      	ite	ne
    61c8:	2301      	movne	r3, #1
    61ca:	2300      	moveq	r3, #0
    61cc:	b2db      	uxtb	r3, r3
    61ce:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    61d2:	4911      	ldr	r1, [pc, #68]	; (6218 <calendar_init+0x64>)
    61d4:	4618      	mov	r0, r3
    61d6:	4b11      	ldr	r3, [pc, #68]	; (621c <calendar_init+0x68>)
    61d8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	681a      	ldr	r2, [r3, #0]
    61de:	683b      	ldr	r3, [r7, #0]
    61e0:	429a      	cmp	r2, r3
    61e2:	d101      	bne.n	61e8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    61e4:	2300      	movs	r3, #0
    61e6:	e013      	b.n	6210 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d002      	beq.n	61f6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    61f0:	f06f 0311 	mvn.w	r3, #17
    61f4:	e00c      	b.n	6210 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    61f6:	687b      	ldr	r3, [r7, #4]
    61f8:	683a      	ldr	r2, [r7, #0]
    61fa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	4618      	mov	r0, r3
    6200:	4b07      	ldr	r3, [pc, #28]	; (6220 <calendar_init+0x6c>)
    6202:	4798      	blx	r3
    6204:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	f240 72b2 	movw	r2, #1970	; 0x7b2
    620c:	619a      	str	r2, [r3, #24]

	return ret;
    620e:	68fb      	ldr	r3, [r7, #12]
}
    6210:	4618      	mov	r0, r3
    6212:	3710      	adds	r7, #16
    6214:	46bd      	mov	sp, r7
    6216:	bd80      	pop	{r7, pc}
    6218:	0001cb68 	.word	0x0001cb68
    621c:	00007b0d 	.word	0x00007b0d
    6220:	0000a43d 	.word	0x0000a43d

00006224 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    6224:	b580      	push	{r7, lr}
    6226:	b084      	sub	sp, #16
    6228:	af00      	add	r7, sp, #0
    622a:	6078      	str	r0, [r7, #4]
    622c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	2b00      	cmp	r3, #0
    6232:	bf14      	ite	ne
    6234:	2301      	movne	r3, #1
    6236:	2300      	moveq	r3, #0
    6238:	b2db      	uxtb	r3, r3
    623a:	f240 223b 	movw	r2, #571	; 0x23b
    623e:	4909      	ldr	r1, [pc, #36]	; (6264 <calendar_get_date_time+0x40>)
    6240:	4618      	mov	r0, r3
    6242:	4b09      	ldr	r3, [pc, #36]	; (6268 <calendar_get_date_time+0x44>)
    6244:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	4618      	mov	r0, r3
    624a:	4b08      	ldr	r3, [pc, #32]	; (626c <calendar_get_date_time+0x48>)
    624c:	4798      	blx	r3
    624e:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    6250:	683a      	ldr	r2, [r7, #0]
    6252:	68f9      	ldr	r1, [r7, #12]
    6254:	6878      	ldr	r0, [r7, #4]
    6256:	4b06      	ldr	r3, [pc, #24]	; (6270 <calendar_get_date_time+0x4c>)
    6258:	4798      	blx	r3

	return ERR_NONE;
    625a:	2300      	movs	r3, #0
}
    625c:	4618      	mov	r0, r3
    625e:	3710      	adds	r7, #16
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	0001cb68 	.word	0x0001cb68
    6268:	00007b0d 	.word	0x00007b0d
    626c:	0000a4f5 	.word	0x0000a4f5
    6270:	000060a9 	.word	0x000060a9

00006274 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    6274:	b580      	push	{r7, lr}
    6276:	b084      	sub	sp, #16
    6278:	af00      	add	r7, sp, #0
    627a:	6078      	str	r0, [r7, #4]
    627c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	2b00      	cmp	r3, #0
    6282:	d004      	beq.n	628e <can_async_init+0x1a>
    6284:	683b      	ldr	r3, [r7, #0]
    6286:	2b00      	cmp	r3, #0
    6288:	d001      	beq.n	628e <can_async_init+0x1a>
    628a:	2301      	movs	r3, #1
    628c:	e000      	b.n	6290 <can_async_init+0x1c>
    628e:	2300      	movs	r3, #0
    6290:	f003 0301 	and.w	r3, r3, #1
    6294:	b2db      	uxtb	r3, r3
    6296:	2241      	movs	r2, #65	; 0x41
    6298:	490e      	ldr	r1, [pc, #56]	; (62d4 <can_async_init+0x60>)
    629a:	4618      	mov	r0, r3
    629c:	4b0e      	ldr	r3, [pc, #56]	; (62d8 <can_async_init+0x64>)
    629e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	6839      	ldr	r1, [r7, #0]
    62a4:	4618      	mov	r0, r3
    62a6:	4b0d      	ldr	r3, [pc, #52]	; (62dc <can_async_init+0x68>)
    62a8:	4798      	blx	r3
    62aa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d001      	beq.n	62b6 <can_async_init+0x42>
		return rc;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	e009      	b.n	62ca <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    62b6:	687b      	ldr	r3, [r7, #4]
    62b8:	4a09      	ldr	r2, [pc, #36]	; (62e0 <can_async_init+0x6c>)
    62ba:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	4a09      	ldr	r2, [pc, #36]	; (62e4 <can_async_init+0x70>)
    62c0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    62c2:	687b      	ldr	r3, [r7, #4]
    62c4:	4a08      	ldr	r2, [pc, #32]	; (62e8 <can_async_init+0x74>)
    62c6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    62c8:	2300      	movs	r3, #0
}
    62ca:	4618      	mov	r0, r3
    62cc:	3710      	adds	r7, #16
    62ce:	46bd      	mov	sp, r7
    62d0:	bd80      	pop	{r7, pc}
    62d2:	bf00      	nop
    62d4:	0001cb84 	.word	0x0001cb84
    62d8:	00007b0d 	.word	0x00007b0d
    62dc:	00008069 	.word	0x00008069
    62e0:	000062ed 	.word	0x000062ed
    62e4:	00006311 	.word	0x00006311
    62e8:	00006335 	.word	0x00006335

000062ec <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    62ec:	b580      	push	{r7, lr}
    62ee:	b084      	sub	sp, #16
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    62f8:	68fb      	ldr	r3, [r7, #12]
    62fa:	69db      	ldr	r3, [r3, #28]
    62fc:	2b00      	cmp	r3, #0
    62fe:	d003      	beq.n	6308 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    6300:	68fb      	ldr	r3, [r7, #12]
    6302:	69db      	ldr	r3, [r3, #28]
    6304:	68f8      	ldr	r0, [r7, #12]
    6306:	4798      	blx	r3
	}
}
    6308:	bf00      	nop
    630a:	3710      	adds	r7, #16
    630c:	46bd      	mov	sp, r7
    630e:	bd80      	pop	{r7, pc}

00006310 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    6310:	b580      	push	{r7, lr}
    6312:	b084      	sub	sp, #16
    6314:	af00      	add	r7, sp, #0
    6316:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    631c:	68fb      	ldr	r3, [r7, #12]
    631e:	6a1b      	ldr	r3, [r3, #32]
    6320:	2b00      	cmp	r3, #0
    6322:	d003      	beq.n	632c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    6324:	68fb      	ldr	r3, [r7, #12]
    6326:	6a1b      	ldr	r3, [r3, #32]
    6328:	68f8      	ldr	r0, [r7, #12]
    632a:	4798      	blx	r3
	}
}
    632c:	bf00      	nop
    632e:	3710      	adds	r7, #16
    6330:	46bd      	mov	sp, r7
    6332:	bd80      	pop	{r7, pc}

00006334 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    6334:	b580      	push	{r7, lr}
    6336:	b084      	sub	sp, #16
    6338:	af00      	add	r7, sp, #0
    633a:	6078      	str	r0, [r7, #4]
    633c:	460b      	mov	r3, r1
    633e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    6344:	68fb      	ldr	r3, [r7, #12]
    6346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6348:	2b00      	cmp	r3, #0
    634a:	d005      	beq.n	6358 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    634c:	68fb      	ldr	r3, [r7, #12]
    634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6350:	78fa      	ldrb	r2, [r7, #3]
    6352:	4611      	mov	r1, r2
    6354:	68f8      	ldr	r0, [r7, #12]
    6356:	4798      	blx	r3
	}
}
    6358:	bf00      	nop
    635a:	3710      	adds	r7, #16
    635c:	46bd      	mov	sp, r7
    635e:	bd80      	pop	{r7, pc}

00006360 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    6360:	b580      	push	{r7, lr}
    6362:	b082      	sub	sp, #8
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
    6368:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	2b00      	cmp	r3, #0
    636e:	d004      	beq.n	637a <crc_sync_init+0x1a>
    6370:	683b      	ldr	r3, [r7, #0]
    6372:	2b00      	cmp	r3, #0
    6374:	d001      	beq.n	637a <crc_sync_init+0x1a>
    6376:	2301      	movs	r3, #1
    6378:	e000      	b.n	637c <crc_sync_init+0x1c>
    637a:	2300      	movs	r3, #0
    637c:	f003 0301 	and.w	r3, r3, #1
    6380:	b2db      	uxtb	r3, r3
    6382:	222b      	movs	r2, #43	; 0x2b
    6384:	4906      	ldr	r1, [pc, #24]	; (63a0 <crc_sync_init+0x40>)
    6386:	4618      	mov	r0, r3
    6388:	4b06      	ldr	r3, [pc, #24]	; (63a4 <crc_sync_init+0x44>)
    638a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	6839      	ldr	r1, [r7, #0]
    6390:	4618      	mov	r0, r3
    6392:	4b05      	ldr	r3, [pc, #20]	; (63a8 <crc_sync_init+0x48>)
    6394:	4798      	blx	r3
    6396:	4603      	mov	r3, r0
}
    6398:	4618      	mov	r0, r3
    639a:	3708      	adds	r7, #8
    639c:	46bd      	mov	sp, r7
    639e:	bd80      	pop	{r7, pc}
    63a0:	0001cba0 	.word	0x0001cba0
    63a4:	00007b0d 	.word	0x00007b0d
    63a8:	00008899 	.word	0x00008899

000063ac <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b082      	sub	sp, #8
    63b0:	af00      	add	r7, sp, #0
    63b2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	2b00      	cmp	r3, #0
    63b8:	bf14      	ite	ne
    63ba:	2301      	movne	r3, #1
    63bc:	2300      	moveq	r3, #0
    63be:	b2db      	uxtb	r3, r3
    63c0:	223f      	movs	r2, #63	; 0x3f
    63c2:	4906      	ldr	r1, [pc, #24]	; (63dc <crc_sync_enable+0x30>)
    63c4:	4618      	mov	r0, r3
    63c6:	4b06      	ldr	r3, [pc, #24]	; (63e0 <crc_sync_enable+0x34>)
    63c8:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	4618      	mov	r0, r3
    63ce:	4b05      	ldr	r3, [pc, #20]	; (63e4 <crc_sync_enable+0x38>)
    63d0:	4798      	blx	r3
    63d2:	4603      	mov	r3, r0
}
    63d4:	4618      	mov	r0, r3
    63d6:	3708      	adds	r7, #8
    63d8:	46bd      	mov	sp, r7
    63da:	bd80      	pop	{r7, pc}
    63dc:	0001cba0 	.word	0x0001cba0
    63e0:	00007b0d 	.word	0x00007b0d
    63e4:	000088b7 	.word	0x000088b7

000063e8 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    63e8:	b590      	push	{r4, r7, lr}
    63ea:	b085      	sub	sp, #20
    63ec:	af00      	add	r7, sp, #0
    63ee:	60f8      	str	r0, [r7, #12]
    63f0:	60b9      	str	r1, [r7, #8]
    63f2:	607a      	str	r2, [r7, #4]
    63f4:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	2b00      	cmp	r3, #0
    63fa:	d00a      	beq.n	6412 <crc_sync_crc32+0x2a>
    63fc:	68bb      	ldr	r3, [r7, #8]
    63fe:	2b00      	cmp	r3, #0
    6400:	d007      	beq.n	6412 <crc_sync_crc32+0x2a>
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	2b00      	cmp	r3, #0
    6406:	d004      	beq.n	6412 <crc_sync_crc32+0x2a>
    6408:	683b      	ldr	r3, [r7, #0]
    640a:	2b00      	cmp	r3, #0
    640c:	d001      	beq.n	6412 <crc_sync_crc32+0x2a>
    640e:	2301      	movs	r3, #1
    6410:	e000      	b.n	6414 <crc_sync_crc32+0x2c>
    6412:	2300      	movs	r3, #0
    6414:	f003 0301 	and.w	r3, r3, #1
    6418:	b2db      	uxtb	r3, r3
    641a:	2253      	movs	r2, #83	; 0x53
    641c:	4907      	ldr	r1, [pc, #28]	; (643c <crc_sync_crc32+0x54>)
    641e:	4618      	mov	r0, r3
    6420:	4b07      	ldr	r3, [pc, #28]	; (6440 <crc_sync_crc32+0x58>)
    6422:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    6424:	68f8      	ldr	r0, [r7, #12]
    6426:	683b      	ldr	r3, [r7, #0]
    6428:	687a      	ldr	r2, [r7, #4]
    642a:	68b9      	ldr	r1, [r7, #8]
    642c:	4c05      	ldr	r4, [pc, #20]	; (6444 <crc_sync_crc32+0x5c>)
    642e:	47a0      	blx	r4
    6430:	4603      	mov	r3, r0
}
    6432:	4618      	mov	r0, r3
    6434:	3714      	adds	r7, #20
    6436:	46bd      	mov	sp, r7
    6438:	bd90      	pop	{r4, r7, pc}
    643a:	bf00      	nop
    643c:	0001cba0 	.word	0x0001cba0
    6440:	00007b0d 	.word	0x00007b0d
    6444:	000088cd 	.word	0x000088cd

00006448 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    6448:	b590      	push	{r4, r7, lr}
    644a:	b083      	sub	sp, #12
    644c:	af00      	add	r7, sp, #0
    644e:	4603      	mov	r3, r0
    6450:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    6452:	4b07      	ldr	r3, [pc, #28]	; (6470 <delay_us+0x28>)
    6454:	681c      	ldr	r4, [r3, #0]
    6456:	88fb      	ldrh	r3, [r7, #6]
    6458:	4618      	mov	r0, r3
    645a:	4b06      	ldr	r3, [pc, #24]	; (6474 <delay_us+0x2c>)
    645c:	4798      	blx	r3
    645e:	4603      	mov	r3, r0
    6460:	4619      	mov	r1, r3
    6462:	4620      	mov	r0, r4
    6464:	4b04      	ldr	r3, [pc, #16]	; (6478 <delay_us+0x30>)
    6466:	4798      	blx	r3
}
    6468:	bf00      	nop
    646a:	370c      	adds	r7, #12
    646c:	46bd      	mov	sp, r7
    646e:	bd90      	pop	{r4, r7, pc}
    6470:	200017b0 	.word	0x200017b0
    6474:	000084c1 	.word	0x000084c1
    6478:	00008659 	.word	0x00008659

0000647c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    647c:	b590      	push	{r4, r7, lr}
    647e:	b083      	sub	sp, #12
    6480:	af00      	add	r7, sp, #0
    6482:	4603      	mov	r3, r0
    6484:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    6486:	4b07      	ldr	r3, [pc, #28]	; (64a4 <delay_ms+0x28>)
    6488:	681c      	ldr	r4, [r3, #0]
    648a:	88fb      	ldrh	r3, [r7, #6]
    648c:	4618      	mov	r0, r3
    648e:	4b06      	ldr	r3, [pc, #24]	; (64a8 <delay_ms+0x2c>)
    6490:	4798      	blx	r3
    6492:	4603      	mov	r3, r0
    6494:	4619      	mov	r1, r3
    6496:	4620      	mov	r0, r4
    6498:	4b04      	ldr	r3, [pc, #16]	; (64ac <delay_ms+0x30>)
    649a:	4798      	blx	r3
}
    649c:	bf00      	nop
    649e:	370c      	adds	r7, #12
    64a0:	46bd      	mov	sp, r7
    64a2:	bd90      	pop	{r4, r7, pc}
    64a4:	200017b0 	.word	0x200017b0
    64a8:	0000862d 	.word	0x0000862d
    64ac:	00008659 	.word	0x00008659

000064b0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    64b0:	b580      	push	{r7, lr}
    64b2:	af00      	add	r7, sp, #0
	return _event_system_init();
    64b4:	4b02      	ldr	r3, [pc, #8]	; (64c0 <event_system_init+0x10>)
    64b6:	4798      	blx	r3
    64b8:	4603      	mov	r3, r0
}
    64ba:	4618      	mov	r0, r3
    64bc:	bd80      	pop	{r7, pc}
    64be:	bf00      	nop
    64c0:	00009185 	.word	0x00009185

000064c4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b082      	sub	sp, #8
    64c8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    64ca:	2300      	movs	r3, #0
    64cc:	80fb      	strh	r3, [r7, #6]
    64ce:	e00e      	b.n	64ee <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    64d0:	88fb      	ldrh	r3, [r7, #6]
    64d2:	4a0c      	ldr	r2, [pc, #48]	; (6504 <ext_irq_init+0x40>)
    64d4:	00db      	lsls	r3, r3, #3
    64d6:	4413      	add	r3, r2
    64d8:	f04f 32ff 	mov.w	r2, #4294967295
    64dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    64de:	88fb      	ldrh	r3, [r7, #6]
    64e0:	4a08      	ldr	r2, [pc, #32]	; (6504 <ext_irq_init+0x40>)
    64e2:	2100      	movs	r1, #0
    64e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    64e8:	88fb      	ldrh	r3, [r7, #6]
    64ea:	3301      	adds	r3, #1
    64ec:	80fb      	strh	r3, [r7, #6]
    64ee:	88fb      	ldrh	r3, [r7, #6]
    64f0:	2b08      	cmp	r3, #8
    64f2:	d9ed      	bls.n	64d0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    64f4:	4804      	ldr	r0, [pc, #16]	; (6508 <ext_irq_init+0x44>)
    64f6:	4b05      	ldr	r3, [pc, #20]	; (650c <ext_irq_init+0x48>)
    64f8:	4798      	blx	r3
    64fa:	4603      	mov	r3, r0
}
    64fc:	4618      	mov	r0, r3
    64fe:	3708      	adds	r7, #8
    6500:	46bd      	mov	sp, r7
    6502:	bd80      	pop	{r7, pc}
    6504:	200017b4 	.word	0x200017b4
    6508:	00006669 	.word	0x00006669
    650c:	00008d09 	.word	0x00008d09

00006510 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    6510:	b580      	push	{r7, lr}
    6512:	b086      	sub	sp, #24
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
    6518:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    651a:	2300      	movs	r3, #0
    651c:	75fb      	strb	r3, [r7, #23]
    651e:	2300      	movs	r3, #0
    6520:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    6522:	2300      	movs	r3, #0
    6524:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    6526:	e012      	b.n	654e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    6528:	7dfb      	ldrb	r3, [r7, #23]
    652a:	4a4d      	ldr	r2, [pc, #308]	; (6660 <ext_irq_register+0x150>)
    652c:	00db      	lsls	r3, r3, #3
    652e:	4413      	add	r3, r2
    6530:	685a      	ldr	r2, [r3, #4]
    6532:	687b      	ldr	r3, [r7, #4]
    6534:	429a      	cmp	r2, r3
    6536:	d107      	bne.n	6548 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    6538:	7dfb      	ldrb	r3, [r7, #23]
    653a:	4949      	ldr	r1, [pc, #292]	; (6660 <ext_irq_register+0x150>)
    653c:	683a      	ldr	r2, [r7, #0]
    653e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    6542:	2301      	movs	r3, #1
    6544:	757b      	strb	r3, [r7, #21]
			break;
    6546:	e005      	b.n	6554 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    6548:	7dfb      	ldrb	r3, [r7, #23]
    654a:	3301      	adds	r3, #1
    654c:	75fb      	strb	r3, [r7, #23]
    654e:	7dfb      	ldrb	r3, [r7, #23]
    6550:	2b08      	cmp	r3, #8
    6552:	d9e9      	bls.n	6528 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    6554:	683b      	ldr	r3, [r7, #0]
    6556:	2b00      	cmp	r3, #0
    6558:	d10e      	bne.n	6578 <ext_irq_register+0x68>
		if (!found) {
    655a:	7d7b      	ldrb	r3, [r7, #21]
    655c:	f083 0301 	eor.w	r3, r3, #1
    6560:	b2db      	uxtb	r3, r3
    6562:	2b00      	cmp	r3, #0
    6564:	d002      	beq.n	656c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    6566:	f06f 030c 	mvn.w	r3, #12
    656a:	e074      	b.n	6656 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    656c:	2100      	movs	r1, #0
    656e:	6878      	ldr	r0, [r7, #4]
    6570:	4b3c      	ldr	r3, [pc, #240]	; (6664 <ext_irq_register+0x154>)
    6572:	4798      	blx	r3
    6574:	4603      	mov	r3, r0
    6576:	e06e      	b.n	6656 <ext_irq_register+0x146>
	}

	if (!found) {
    6578:	7d7b      	ldrb	r3, [r7, #21]
    657a:	f083 0301 	eor.w	r3, r3, #1
    657e:	b2db      	uxtb	r3, r3
    6580:	2b00      	cmp	r3, #0
    6582:	d05a      	beq.n	663a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6584:	2300      	movs	r3, #0
    6586:	75fb      	strb	r3, [r7, #23]
    6588:	e016      	b.n	65b8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    658a:	7dfb      	ldrb	r3, [r7, #23]
    658c:	4a34      	ldr	r2, [pc, #208]	; (6660 <ext_irq_register+0x150>)
    658e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6592:	2b00      	cmp	r3, #0
    6594:	d10d      	bne.n	65b2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    6596:	7dfb      	ldrb	r3, [r7, #23]
    6598:	4931      	ldr	r1, [pc, #196]	; (6660 <ext_irq_register+0x150>)
    659a:	683a      	ldr	r2, [r7, #0]
    659c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    65a0:	7dfb      	ldrb	r3, [r7, #23]
    65a2:	4a2f      	ldr	r2, [pc, #188]	; (6660 <ext_irq_register+0x150>)
    65a4:	00db      	lsls	r3, r3, #3
    65a6:	4413      	add	r3, r2
    65a8:	687a      	ldr	r2, [r7, #4]
    65aa:	605a      	str	r2, [r3, #4]
				found           = true;
    65ac:	2301      	movs	r3, #1
    65ae:	757b      	strb	r3, [r7, #21]
				break;
    65b0:	e005      	b.n	65be <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    65b2:	7dfb      	ldrb	r3, [r7, #23]
    65b4:	3301      	adds	r3, #1
    65b6:	75fb      	strb	r3, [r7, #23]
    65b8:	7dfb      	ldrb	r3, [r7, #23]
    65ba:	2b08      	cmp	r3, #8
    65bc:	d9e5      	bls.n	658a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    65be:	e036      	b.n	662e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    65c0:	7dfb      	ldrb	r3, [r7, #23]
    65c2:	4a27      	ldr	r2, [pc, #156]	; (6660 <ext_irq_register+0x150>)
    65c4:	00db      	lsls	r3, r3, #3
    65c6:	4413      	add	r3, r2
    65c8:	685a      	ldr	r2, [r3, #4]
    65ca:	7dbb      	ldrb	r3, [r7, #22]
    65cc:	4924      	ldr	r1, [pc, #144]	; (6660 <ext_irq_register+0x150>)
    65ce:	00db      	lsls	r3, r3, #3
    65d0:	440b      	add	r3, r1
    65d2:	685b      	ldr	r3, [r3, #4]
    65d4:	429a      	cmp	r2, r3
    65d6:	d227      	bcs.n	6628 <ext_irq_register+0x118>
    65d8:	7dbb      	ldrb	r3, [r7, #22]
    65da:	4a21      	ldr	r2, [pc, #132]	; (6660 <ext_irq_register+0x150>)
    65dc:	00db      	lsls	r3, r3, #3
    65de:	4413      	add	r3, r2
    65e0:	685b      	ldr	r3, [r3, #4]
    65e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    65e6:	d01f      	beq.n	6628 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    65e8:	7dbb      	ldrb	r3, [r7, #22]
    65ea:	491d      	ldr	r1, [pc, #116]	; (6660 <ext_irq_register+0x150>)
    65ec:	f107 020c 	add.w	r2, r7, #12
    65f0:	00db      	lsls	r3, r3, #3
    65f2:	440b      	add	r3, r1
    65f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    65f8:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    65fc:	7dbb      	ldrb	r3, [r7, #22]
    65fe:	7dfa      	ldrb	r2, [r7, #23]
    6600:	4817      	ldr	r0, [pc, #92]	; (6660 <ext_irq_register+0x150>)
    6602:	4917      	ldr	r1, [pc, #92]	; (6660 <ext_irq_register+0x150>)
    6604:	00db      	lsls	r3, r3, #3
    6606:	4403      	add	r3, r0
    6608:	00d2      	lsls	r2, r2, #3
    660a:	440a      	add	r2, r1
    660c:	e892 0003 	ldmia.w	r2, {r0, r1}
    6610:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    6614:	7dfb      	ldrb	r3, [r7, #23]
    6616:	4a12      	ldr	r2, [pc, #72]	; (6660 <ext_irq_register+0x150>)
    6618:	00db      	lsls	r3, r3, #3
    661a:	4413      	add	r3, r2
    661c:	f107 020c 	add.w	r2, r7, #12
    6620:	e892 0003 	ldmia.w	r2, {r0, r1}
    6624:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    6628:	7dbb      	ldrb	r3, [r7, #22]
    662a:	3301      	adds	r3, #1
    662c:	75bb      	strb	r3, [r7, #22]
    662e:	7dbb      	ldrb	r3, [r7, #22]
    6630:	2b08      	cmp	r3, #8
    6632:	d802      	bhi.n	663a <ext_irq_register+0x12a>
    6634:	7dfb      	ldrb	r3, [r7, #23]
    6636:	2b08      	cmp	r3, #8
    6638:	d9c2      	bls.n	65c0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    663a:	7d7b      	ldrb	r3, [r7, #21]
    663c:	f083 0301 	eor.w	r3, r3, #1
    6640:	b2db      	uxtb	r3, r3
    6642:	2b00      	cmp	r3, #0
    6644:	d002      	beq.n	664c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    6646:	f06f 030c 	mvn.w	r3, #12
    664a:	e004      	b.n	6656 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    664c:	2101      	movs	r1, #1
    664e:	6878      	ldr	r0, [r7, #4]
    6650:	4b04      	ldr	r3, [pc, #16]	; (6664 <ext_irq_register+0x154>)
    6652:	4798      	blx	r3
    6654:	4603      	mov	r3, r0
}
    6656:	4618      	mov	r0, r3
    6658:	3718      	adds	r7, #24
    665a:	46bd      	mov	sp, r7
    665c:	bd80      	pop	{r7, pc}
    665e:	bf00      	nop
    6660:	200017b4 	.word	0x200017b4
    6664:	00008e9d 	.word	0x00008e9d

00006668 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    6668:	b580      	push	{r7, lr}
    666a:	b084      	sub	sp, #16
    666c:	af00      	add	r7, sp, #0
    666e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6670:	2300      	movs	r3, #0
    6672:	73fb      	strb	r3, [r7, #15]
    6674:	2309      	movs	r3, #9
    6676:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    6678:	e02a      	b.n	66d0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    667a:	7bba      	ldrb	r2, [r7, #14]
    667c:	7bfb      	ldrb	r3, [r7, #15]
    667e:	4413      	add	r3, r2
    6680:	105b      	asrs	r3, r3, #1
    6682:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    6684:	7b7b      	ldrb	r3, [r7, #13]
    6686:	2b08      	cmp	r3, #8
    6688:	d827      	bhi.n	66da <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    668a:	7b7b      	ldrb	r3, [r7, #13]
    668c:	4a16      	ldr	r2, [pc, #88]	; (66e8 <process_ext_irq+0x80>)
    668e:	00db      	lsls	r3, r3, #3
    6690:	4413      	add	r3, r2
    6692:	685a      	ldr	r2, [r3, #4]
    6694:	687b      	ldr	r3, [r7, #4]
    6696:	429a      	cmp	r2, r3
    6698:	d10b      	bne.n	66b2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    669a:	7b7b      	ldrb	r3, [r7, #13]
    669c:	4a12      	ldr	r2, [pc, #72]	; (66e8 <process_ext_irq+0x80>)
    669e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    66a2:	2b00      	cmp	r3, #0
    66a4:	d01b      	beq.n	66de <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    66a6:	7b7b      	ldrb	r3, [r7, #13]
    66a8:	4a0f      	ldr	r2, [pc, #60]	; (66e8 <process_ext_irq+0x80>)
    66aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    66ae:	4798      	blx	r3
			}
			return;
    66b0:	e015      	b.n	66de <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    66b2:	7b7b      	ldrb	r3, [r7, #13]
    66b4:	4a0c      	ldr	r2, [pc, #48]	; (66e8 <process_ext_irq+0x80>)
    66b6:	00db      	lsls	r3, r3, #3
    66b8:	4413      	add	r3, r2
    66ba:	685a      	ldr	r2, [r3, #4]
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	429a      	cmp	r2, r3
    66c0:	d203      	bcs.n	66ca <process_ext_irq+0x62>
			lower = middle + 1;
    66c2:	7b7b      	ldrb	r3, [r7, #13]
    66c4:	3301      	adds	r3, #1
    66c6:	73fb      	strb	r3, [r7, #15]
    66c8:	e002      	b.n	66d0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    66ca:	7b7b      	ldrb	r3, [r7, #13]
    66cc:	3b01      	subs	r3, #1
    66ce:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    66d0:	7bba      	ldrb	r2, [r7, #14]
    66d2:	7bfb      	ldrb	r3, [r7, #15]
    66d4:	429a      	cmp	r2, r3
    66d6:	d2d0      	bcs.n	667a <process_ext_irq+0x12>
    66d8:	e002      	b.n	66e0 <process_ext_irq+0x78>
			return;
    66da:	bf00      	nop
    66dc:	e000      	b.n	66e0 <process_ext_irq+0x78>
			return;
    66de:	bf00      	nop
		}
	}
}
    66e0:	3710      	adds	r7, #16
    66e2:	46bd      	mov	sp, r7
    66e4:	bd80      	pop	{r7, pc}
    66e6:	bf00      	nop
    66e8:	200017b4 	.word	0x200017b4

000066ec <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b08a      	sub	sp, #40	; 0x28
    66f0:	af00      	add	r7, sp, #0
    66f2:	60f8      	str	r0, [r7, #12]
    66f4:	60b9      	str	r1, [r7, #8]
    66f6:	4613      	mov	r3, r2
    66f8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    66fa:	68fb      	ldr	r3, [r7, #12]
    66fc:	3b14      	subs	r3, #20
    66fe:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6702:	8b9b      	ldrh	r3, [r3, #28]
    6704:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6706:	88fb      	ldrh	r3, [r7, #6]
    6708:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    670a:	f248 0301 	movw	r3, #32769	; 0x8001
    670e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6710:	68bb      	ldr	r3, [r7, #8]
    6712:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6716:	f107 0214 	add.w	r2, r7, #20
    671a:	4611      	mov	r1, r2
    671c:	4618      	mov	r0, r3
    671e:	4b06      	ldr	r3, [pc, #24]	; (6738 <i2c_m_sync_read+0x4c>)
    6720:	4798      	blx	r3
    6722:	6238      	str	r0, [r7, #32]

	if (ret) {
    6724:	6a3b      	ldr	r3, [r7, #32]
    6726:	2b00      	cmp	r3, #0
    6728:	d001      	beq.n	672e <i2c_m_sync_read+0x42>
		return ret;
    672a:	6a3b      	ldr	r3, [r7, #32]
    672c:	e000      	b.n	6730 <i2c_m_sync_read+0x44>
	}

	return n;
    672e:	88fb      	ldrh	r3, [r7, #6]
}
    6730:	4618      	mov	r0, r3
    6732:	3728      	adds	r7, #40	; 0x28
    6734:	46bd      	mov	sp, r7
    6736:	bd80      	pop	{r7, pc}
    6738:	0000b111 	.word	0x0000b111

0000673c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    673c:	b580      	push	{r7, lr}
    673e:	b08a      	sub	sp, #40	; 0x28
    6740:	af00      	add	r7, sp, #0
    6742:	60f8      	str	r0, [r7, #12]
    6744:	60b9      	str	r1, [r7, #8]
    6746:	4613      	mov	r3, r2
    6748:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    674a:	68fb      	ldr	r3, [r7, #12]
    674c:	3b14      	subs	r3, #20
    674e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6752:	8b9b      	ldrh	r3, [r3, #28]
    6754:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6756:	88fb      	ldrh	r3, [r7, #6]
    6758:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    675a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    675e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6760:	68bb      	ldr	r3, [r7, #8]
    6762:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6766:	f107 0214 	add.w	r2, r7, #20
    676a:	4611      	mov	r1, r2
    676c:	4618      	mov	r0, r3
    676e:	4b06      	ldr	r3, [pc, #24]	; (6788 <i2c_m_sync_write+0x4c>)
    6770:	4798      	blx	r3
    6772:	6238      	str	r0, [r7, #32]

	if (ret) {
    6774:	6a3b      	ldr	r3, [r7, #32]
    6776:	2b00      	cmp	r3, #0
    6778:	d001      	beq.n	677e <i2c_m_sync_write+0x42>
		return ret;
    677a:	6a3b      	ldr	r3, [r7, #32]
    677c:	e000      	b.n	6780 <i2c_m_sync_write+0x44>
	}

	return n;
    677e:	88fb      	ldrh	r3, [r7, #6]
}
    6780:	4618      	mov	r0, r3
    6782:	3728      	adds	r7, #40	; 0x28
    6784:	46bd      	mov	sp, r7
    6786:	bd80      	pop	{r7, pc}
    6788:	0000b111 	.word	0x0000b111

0000678c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    678c:	b580      	push	{r7, lr}
    678e:	b084      	sub	sp, #16
    6790:	af00      	add	r7, sp, #0
    6792:	6078      	str	r0, [r7, #4]
    6794:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	2b00      	cmp	r3, #0
    679a:	bf14      	ite	ne
    679c:	2301      	movne	r3, #1
    679e:	2300      	moveq	r3, #0
    67a0:	b2db      	uxtb	r3, r3
    67a2:	225e      	movs	r2, #94	; 0x5e
    67a4:	490c      	ldr	r1, [pc, #48]	; (67d8 <i2c_m_sync_init+0x4c>)
    67a6:	4618      	mov	r0, r3
    67a8:	4b0c      	ldr	r3, [pc, #48]	; (67dc <i2c_m_sync_init+0x50>)
    67aa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	6839      	ldr	r1, [r7, #0]
    67b0:	4618      	mov	r0, r3
    67b2:	4b0b      	ldr	r3, [pc, #44]	; (67e0 <i2c_m_sync_init+0x54>)
    67b4:	4798      	blx	r3
    67b6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    67b8:	68fb      	ldr	r3, [r7, #12]
    67ba:	2b00      	cmp	r3, #0
    67bc:	d001      	beq.n	67c2 <i2c_m_sync_init+0x36>
		return init_status;
    67be:	68fb      	ldr	r3, [r7, #12]
    67c0:	e006      	b.n	67d0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	4a07      	ldr	r2, [pc, #28]	; (67e4 <i2c_m_sync_init+0x58>)
    67c6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	4a07      	ldr	r2, [pc, #28]	; (67e8 <i2c_m_sync_init+0x5c>)
    67cc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    67ce:	2300      	movs	r3, #0
}
    67d0:	4618      	mov	r0, r3
    67d2:	3710      	adds	r7, #16
    67d4:	46bd      	mov	sp, r7
    67d6:	bd80      	pop	{r7, pc}
    67d8:	0001cbbc 	.word	0x0001cbbc
    67dc:	00007b0d 	.word	0x00007b0d
    67e0:	0000af0d 	.word	0x0000af0d
    67e4:	000066ed 	.word	0x000066ed
    67e8:	0000673d 	.word	0x0000673d

000067ec <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b082      	sub	sp, #8
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	4618      	mov	r0, r3
    67f8:	4b03      	ldr	r3, [pc, #12]	; (6808 <i2c_m_sync_enable+0x1c>)
    67fa:	4798      	blx	r3
    67fc:	4603      	mov	r3, r0
}
    67fe:	4618      	mov	r0, r3
    6800:	3708      	adds	r7, #8
    6802:	46bd      	mov	sp, r7
    6804:	bd80      	pop	{r7, pc}
    6806:	bf00      	nop
    6808:	0000af55 	.word	0x0000af55

0000680c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    680c:	b480      	push	{r7}
    680e:	b085      	sub	sp, #20
    6810:	af00      	add	r7, sp, #0
    6812:	60f8      	str	r0, [r7, #12]
    6814:	460b      	mov	r3, r1
    6816:	607a      	str	r2, [r7, #4]
    6818:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    681a:	897b      	ldrh	r3, [r7, #10]
    681c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6820:	b21a      	sxth	r2, r3
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	b21b      	sxth	r3, r3
    6826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    682a:	b21b      	sxth	r3, r3
    682c:	4313      	orrs	r3, r2
    682e:	b21b      	sxth	r3, r3
    6830:	b29a      	uxth	r2, r3
    6832:	68fb      	ldr	r3, [r7, #12]
    6834:	839a      	strh	r2, [r3, #28]
    6836:	68fb      	ldr	r3, [r7, #12]
    6838:	8b9b      	ldrh	r3, [r3, #28]
}
    683a:	4618      	mov	r0, r3
    683c:	3714      	adds	r7, #20
    683e:	46bd      	mov	sp, r7
    6840:	f85d 7b04 	ldr.w	r7, [sp], #4
    6844:	4770      	bx	lr

00006846 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    6846:	b480      	push	{r7}
    6848:	b083      	sub	sp, #12
    684a:	af00      	add	r7, sp, #0
    684c:	6078      	str	r0, [r7, #4]
    684e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	f103 0214 	add.w	r2, r3, #20
    6856:	683b      	ldr	r3, [r7, #0]
    6858:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    685a:	2300      	movs	r3, #0
}
    685c:	4618      	mov	r0, r3
    685e:	370c      	adds	r7, #12
    6860:	46bd      	mov	sp, r7
    6862:	f85d 7b04 	ldr.w	r7, [sp], #4
    6866:	4770      	bx	lr

00006868 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6868:	b580      	push	{r7, lr}
    686a:	b084      	sub	sp, #16
    686c:	af00      	add	r7, sp, #0
    686e:	60f8      	str	r0, [r7, #12]
    6870:	60b9      	str	r1, [r7, #8]
    6872:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6874:	68fb      	ldr	r3, [r7, #12]
    6876:	2b00      	cmp	r3, #0
    6878:	d004      	beq.n	6884 <pwm_init+0x1c>
    687a:	68bb      	ldr	r3, [r7, #8]
    687c:	2b00      	cmp	r3, #0
    687e:	d001      	beq.n	6884 <pwm_init+0x1c>
    6880:	2301      	movs	r3, #1
    6882:	e000      	b.n	6886 <pwm_init+0x1e>
    6884:	2300      	movs	r3, #0
    6886:	f003 0301 	and.w	r3, r3, #1
    688a:	b2db      	uxtb	r3, r3
    688c:	2233      	movs	r2, #51	; 0x33
    688e:	490a      	ldr	r1, [pc, #40]	; (68b8 <pwm_init+0x50>)
    6890:	4618      	mov	r0, r3
    6892:	4b0a      	ldr	r3, [pc, #40]	; (68bc <pwm_init+0x54>)
    6894:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    6896:	68fb      	ldr	r3, [r7, #12]
    6898:	68b9      	ldr	r1, [r7, #8]
    689a:	4618      	mov	r0, r3
    689c:	4b08      	ldr	r3, [pc, #32]	; (68c0 <pwm_init+0x58>)
    689e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    68a0:	68fb      	ldr	r3, [r7, #12]
    68a2:	4a08      	ldr	r2, [pc, #32]	; (68c4 <pwm_init+0x5c>)
    68a4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    68a6:	68fb      	ldr	r3, [r7, #12]
    68a8:	4a07      	ldr	r2, [pc, #28]	; (68c8 <pwm_init+0x60>)
    68aa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    68ac:	2300      	movs	r3, #0
}
    68ae:	4618      	mov	r0, r3
    68b0:	3710      	adds	r7, #16
    68b2:	46bd      	mov	sp, r7
    68b4:	bd80      	pop	{r7, pc}
    68b6:	bf00      	nop
    68b8:	0001cbd8 	.word	0x0001cbd8
    68bc:	00007b0d 	.word	0x00007b0d
    68c0:	0000c7a9 	.word	0x0000c7a9
    68c4:	00006921 	.word	0x00006921
    68c8:	00006945 	.word	0x00006945

000068cc <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    68cc:	b580      	push	{r7, lr}
    68ce:	b082      	sub	sp, #8
    68d0:	af00      	add	r7, sp, #0
    68d2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	2b00      	cmp	r3, #0
    68d8:	bf14      	ite	ne
    68da:	2301      	movne	r3, #1
    68dc:	2300      	moveq	r3, #0
    68de:	b2db      	uxtb	r3, r3
    68e0:	224a      	movs	r2, #74	; 0x4a
    68e2:	490b      	ldr	r1, [pc, #44]	; (6910 <pwm_enable+0x44>)
    68e4:	4618      	mov	r0, r3
    68e6:	4b0b      	ldr	r3, [pc, #44]	; (6914 <pwm_enable+0x48>)
    68e8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    68ea:	687b      	ldr	r3, [r7, #4]
    68ec:	4618      	mov	r0, r3
    68ee:	4b0a      	ldr	r3, [pc, #40]	; (6918 <pwm_enable+0x4c>)
    68f0:	4798      	blx	r3
    68f2:	4603      	mov	r3, r0
    68f4:	2b00      	cmp	r3, #0
    68f6:	d002      	beq.n	68fe <pwm_enable+0x32>
		return ERR_DENIED;
    68f8:	f06f 0310 	mvn.w	r3, #16
    68fc:	e004      	b.n	6908 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	4618      	mov	r0, r3
    6902:	4b06      	ldr	r3, [pc, #24]	; (691c <pwm_enable+0x50>)
    6904:	4798      	blx	r3

	return ERR_NONE;
    6906:	2300      	movs	r3, #0
}
    6908:	4618      	mov	r0, r3
    690a:	3708      	adds	r7, #8
    690c:	46bd      	mov	sp, r7
    690e:	bd80      	pop	{r7, pc}
    6910:	0001cbd8 	.word	0x0001cbd8
    6914:	00007b0d 	.word	0x00007b0d
    6918:	0000cb99 	.word	0x0000cb99
    691c:	0000ca55 	.word	0x0000ca55

00006920 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    6920:	b580      	push	{r7, lr}
    6922:	b084      	sub	sp, #16
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    692c:	68fb      	ldr	r3, [r7, #12]
    692e:	695b      	ldr	r3, [r3, #20]
    6930:	2b00      	cmp	r3, #0
    6932:	d003      	beq.n	693c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6934:	68fb      	ldr	r3, [r7, #12]
    6936:	695b      	ldr	r3, [r3, #20]
    6938:	68f8      	ldr	r0, [r7, #12]
    693a:	4798      	blx	r3
	}
}
    693c:	bf00      	nop
    693e:	3710      	adds	r7, #16
    6940:	46bd      	mov	sp, r7
    6942:	bd80      	pop	{r7, pc}

00006944 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6944:	b580      	push	{r7, lr}
    6946:	b084      	sub	sp, #16
    6948:	af00      	add	r7, sp, #0
    694a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6950:	68fb      	ldr	r3, [r7, #12]
    6952:	699b      	ldr	r3, [r3, #24]
    6954:	2b00      	cmp	r3, #0
    6956:	d003      	beq.n	6960 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    6958:	68fb      	ldr	r3, [r7, #12]
    695a:	699b      	ldr	r3, [r3, #24]
    695c:	68f8      	ldr	r0, [r7, #12]
    695e:	4798      	blx	r3
	}
}
    6960:	bf00      	nop
    6962:	3710      	adds	r7, #16
    6964:	46bd      	mov	sp, r7
    6966:	bd80      	pop	{r7, pc}

00006968 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    6968:	b580      	push	{r7, lr}
    696a:	b082      	sub	sp, #8
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
    6970:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	2b00      	cmp	r3, #0
    6976:	d004      	beq.n	6982 <qspi_sync_init+0x1a>
    6978:	683b      	ldr	r3, [r7, #0]
    697a:	2b00      	cmp	r3, #0
    697c:	d001      	beq.n	6982 <qspi_sync_init+0x1a>
    697e:	2301      	movs	r3, #1
    6980:	e000      	b.n	6984 <qspi_sync_init+0x1c>
    6982:	2300      	movs	r3, #0
    6984:	f003 0301 	and.w	r3, r3, #1
    6988:	b2db      	uxtb	r3, r3
    698a:	2231      	movs	r2, #49	; 0x31
    698c:	4906      	ldr	r1, [pc, #24]	; (69a8 <qspi_sync_init+0x40>)
    698e:	4618      	mov	r0, r3
    6990:	4b06      	ldr	r3, [pc, #24]	; (69ac <qspi_sync_init+0x44>)
    6992:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	6839      	ldr	r1, [r7, #0]
    6998:	4618      	mov	r0, r3
    699a:	4b05      	ldr	r3, [pc, #20]	; (69b0 <qspi_sync_init+0x48>)
    699c:	4798      	blx	r3
    699e:	4603      	mov	r3, r0
}
    69a0:	4618      	mov	r0, r3
    69a2:	3708      	adds	r7, #8
    69a4:	46bd      	mov	sp, r7
    69a6:	bd80      	pop	{r7, pc}
    69a8:	0001cbf0 	.word	0x0001cbf0
    69ac:	00007b0d 	.word	0x00007b0d
    69b0:	0000a059 	.word	0x0000a059

000069b4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    69b4:	b580      	push	{r7, lr}
    69b6:	b082      	sub	sp, #8
    69b8:	af00      	add	r7, sp, #0
    69ba:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    69bc:	687b      	ldr	r3, [r7, #4]
    69be:	2b00      	cmp	r3, #0
    69c0:	bf14      	ite	ne
    69c2:	2301      	movne	r3, #1
    69c4:	2300      	moveq	r3, #0
    69c6:	b2db      	uxtb	r3, r3
    69c8:	223f      	movs	r2, #63	; 0x3f
    69ca:	4906      	ldr	r1, [pc, #24]	; (69e4 <qspi_sync_enable+0x30>)
    69cc:	4618      	mov	r0, r3
    69ce:	4b06      	ldr	r3, [pc, #24]	; (69e8 <qspi_sync_enable+0x34>)
    69d0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	4618      	mov	r0, r3
    69d6:	4b05      	ldr	r3, [pc, #20]	; (69ec <qspi_sync_enable+0x38>)
    69d8:	4798      	blx	r3
    69da:	4603      	mov	r3, r0
}
    69dc:	4618      	mov	r0, r3
    69de:	3708      	adds	r7, #8
    69e0:	46bd      	mov	sp, r7
    69e2:	bd80      	pop	{r7, pc}
    69e4:	0001cbf0 	.word	0x0001cbf0
    69e8:	00007b0d 	.word	0x00007b0d
    69ec:	0000a0cd 	.word	0x0000a0cd

000069f0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b082      	sub	sp, #8
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    69f8:	687b      	ldr	r3, [r7, #4]
    69fa:	2b00      	cmp	r3, #0
    69fc:	bf14      	ite	ne
    69fe:	2301      	movne	r3, #1
    6a00:	2300      	moveq	r3, #0
    6a02:	b2db      	uxtb	r3, r3
    6a04:	2246      	movs	r2, #70	; 0x46
    6a06:	4906      	ldr	r1, [pc, #24]	; (6a20 <qspi_sync_disable+0x30>)
    6a08:	4618      	mov	r0, r3
    6a0a:	4b06      	ldr	r3, [pc, #24]	; (6a24 <qspi_sync_disable+0x34>)
    6a0c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	4618      	mov	r0, r3
    6a12:	4b05      	ldr	r3, [pc, #20]	; (6a28 <qspi_sync_disable+0x38>)
    6a14:	4798      	blx	r3
    6a16:	4603      	mov	r3, r0
}
    6a18:	4618      	mov	r0, r3
    6a1a:	3708      	adds	r7, #8
    6a1c:	46bd      	mov	sp, r7
    6a1e:	bd80      	pop	{r7, pc}
    6a20:	0001cbf0 	.word	0x0001cbf0
    6a24:	00007b0d 	.word	0x00007b0d
    6a28:	0000a0f1 	.word	0x0000a0f1

00006a2c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b082      	sub	sp, #8
    6a30:	af00      	add	r7, sp, #0
    6a32:	6078      	str	r0, [r7, #4]
    6a34:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d004      	beq.n	6a46 <qspi_sync_serial_run_command+0x1a>
    6a3c:	683b      	ldr	r3, [r7, #0]
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d001      	beq.n	6a46 <qspi_sync_serial_run_command+0x1a>
    6a42:	2301      	movs	r3, #1
    6a44:	e000      	b.n	6a48 <qspi_sync_serial_run_command+0x1c>
    6a46:	2300      	movs	r3, #0
    6a48:	f003 0301 	and.w	r3, r3, #1
    6a4c:	b2db      	uxtb	r3, r3
    6a4e:	224d      	movs	r2, #77	; 0x4d
    6a50:	4906      	ldr	r1, [pc, #24]	; (6a6c <qspi_sync_serial_run_command+0x40>)
    6a52:	4618      	mov	r0, r3
    6a54:	4b06      	ldr	r3, [pc, #24]	; (6a70 <qspi_sync_serial_run_command+0x44>)
    6a56:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    6a58:	687b      	ldr	r3, [r7, #4]
    6a5a:	6839      	ldr	r1, [r7, #0]
    6a5c:	4618      	mov	r0, r3
    6a5e:	4b05      	ldr	r3, [pc, #20]	; (6a74 <qspi_sync_serial_run_command+0x48>)
    6a60:	4798      	blx	r3
    6a62:	4603      	mov	r3, r0
}
    6a64:	4618      	mov	r0, r3
    6a66:	3708      	adds	r7, #8
    6a68:	46bd      	mov	sp, r7
    6a6a:	bd80      	pop	{r7, pc}
    6a6c:	0001cbf0 	.word	0x0001cbf0
    6a70:	00007b0d 	.word	0x00007b0d
    6a74:	0000a23d 	.word	0x0000a23d

00006a78 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    6a78:	b580      	push	{r7, lr}
    6a7a:	b084      	sub	sp, #16
    6a7c:	af00      	add	r7, sp, #0
    6a7e:	6078      	str	r0, [r7, #4]
    6a80:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6a82:	2300      	movs	r3, #0
    6a84:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d004      	beq.n	6a96 <spi_m_sync_init+0x1e>
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d001      	beq.n	6a96 <spi_m_sync_init+0x1e>
    6a92:	2301      	movs	r3, #1
    6a94:	e000      	b.n	6a98 <spi_m_sync_init+0x20>
    6a96:	2300      	movs	r3, #0
    6a98:	f003 0301 	and.w	r3, r3, #1
    6a9c:	b2db      	uxtb	r3, r3
    6a9e:	2240      	movs	r2, #64	; 0x40
    6aa0:	4910      	ldr	r1, [pc, #64]	; (6ae4 <spi_m_sync_init+0x6c>)
    6aa2:	4618      	mov	r0, r3
    6aa4:	4b10      	ldr	r3, [pc, #64]	; (6ae8 <spi_m_sync_init+0x70>)
    6aa6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6aa8:	687b      	ldr	r3, [r7, #4]
    6aaa:	683a      	ldr	r2, [r7, #0]
    6aac:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	3304      	adds	r3, #4
    6ab2:	6839      	ldr	r1, [r7, #0]
    6ab4:	4618      	mov	r0, r3
    6ab6:	4b0d      	ldr	r3, [pc, #52]	; (6aec <spi_m_sync_init+0x74>)
    6ab8:	4798      	blx	r3
    6aba:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6abc:	68fb      	ldr	r3, [r7, #12]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	da01      	bge.n	6ac6 <spi_m_sync_init+0x4e>
		return rc;
    6ac2:	68fb      	ldr	r3, [r7, #12]
    6ac4:	e00a      	b.n	6adc <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6acc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	4a07      	ldr	r2, [pc, #28]	; (6af0 <spi_m_sync_init+0x78>)
    6ad2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	4a07      	ldr	r2, [pc, #28]	; (6af4 <spi_m_sync_init+0x7c>)
    6ad8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    6ada:	2300      	movs	r3, #0
}
    6adc:	4618      	mov	r0, r3
    6ade:	3710      	adds	r7, #16
    6ae0:	46bd      	mov	sp, r7
    6ae2:	bd80      	pop	{r7, pc}
    6ae4:	0001cc0c 	.word	0x0001cc0c
    6ae8:	00007b0d 	.word	0x00007b0d
    6aec:	0000b60d 	.word	0x0000b60d
    6af0:	00006b71 	.word	0x00006b71
    6af4:	00006bc9 	.word	0x00006bc9

00006af8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    6af8:	b580      	push	{r7, lr}
    6afa:	b082      	sub	sp, #8
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	2b00      	cmp	r3, #0
    6b04:	bf14      	ite	ne
    6b06:	2301      	movne	r3, #1
    6b08:	2300      	moveq	r3, #0
    6b0a:	b2db      	uxtb	r3, r3
    6b0c:	2257      	movs	r2, #87	; 0x57
    6b0e:	4906      	ldr	r1, [pc, #24]	; (6b28 <spi_m_sync_enable+0x30>)
    6b10:	4618      	mov	r0, r3
    6b12:	4b06      	ldr	r3, [pc, #24]	; (6b2c <spi_m_sync_enable+0x34>)
    6b14:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    6b16:	687b      	ldr	r3, [r7, #4]
    6b18:	3304      	adds	r3, #4
    6b1a:	4618      	mov	r0, r3
    6b1c:	4b04      	ldr	r3, [pc, #16]	; (6b30 <spi_m_sync_enable+0x38>)
    6b1e:	4798      	blx	r3
}
    6b20:	bf00      	nop
    6b22:	3708      	adds	r7, #8
    6b24:	46bd      	mov	sp, r7
    6b26:	bd80      	pop	{r7, pc}
    6b28:	0001cc0c 	.word	0x0001cc0c
    6b2c:	00007b0d 	.word	0x00007b0d
    6b30:	0000b719 	.word	0x0000b719

00006b34 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    6b34:	b580      	push	{r7, lr}
    6b36:	b082      	sub	sp, #8
    6b38:	af00      	add	r7, sp, #0
    6b3a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	bf14      	ite	ne
    6b42:	2301      	movne	r3, #1
    6b44:	2300      	moveq	r3, #0
    6b46:	b2db      	uxtb	r3, r3
    6b48:	225d      	movs	r2, #93	; 0x5d
    6b4a:	4906      	ldr	r1, [pc, #24]	; (6b64 <spi_m_sync_disable+0x30>)
    6b4c:	4618      	mov	r0, r3
    6b4e:	4b06      	ldr	r3, [pc, #24]	; (6b68 <spi_m_sync_disable+0x34>)
    6b50:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    6b52:	687b      	ldr	r3, [r7, #4]
    6b54:	3304      	adds	r3, #4
    6b56:	4618      	mov	r0, r3
    6b58:	4b04      	ldr	r3, [pc, #16]	; (6b6c <spi_m_sync_disable+0x38>)
    6b5a:	4798      	blx	r3
}
    6b5c:	bf00      	nop
    6b5e:	3708      	adds	r7, #8
    6b60:	46bd      	mov	sp, r7
    6b62:	bd80      	pop	{r7, pc}
    6b64:	0001cc0c 	.word	0x0001cc0c
    6b68:	00007b0d 	.word	0x00007b0d
    6b6c:	0000b769 	.word	0x0000b769

00006b70 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    6b70:	b580      	push	{r7, lr}
    6b72:	b088      	sub	sp, #32
    6b74:	af00      	add	r7, sp, #0
    6b76:	60f8      	str	r0, [r7, #12]
    6b78:	60b9      	str	r1, [r7, #8]
    6b7a:	4613      	mov	r3, r2
    6b7c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6b7e:	68fb      	ldr	r3, [r7, #12]
    6b80:	2b00      	cmp	r3, #0
    6b82:	bf14      	ite	ne
    6b84:	2301      	movne	r3, #1
    6b86:	2300      	moveq	r3, #0
    6b88:	b2db      	uxtb	r3, r3
    6b8a:	2287      	movs	r2, #135	; 0x87
    6b8c:	490b      	ldr	r1, [pc, #44]	; (6bbc <_spi_m_sync_io_read+0x4c>)
    6b8e:	4618      	mov	r0, r3
    6b90:	4b0b      	ldr	r3, [pc, #44]	; (6bc0 <_spi_m_sync_io_read+0x50>)
    6b92:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6b94:	68fb      	ldr	r3, [r7, #12]
    6b96:	3b0c      	subs	r3, #12
    6b98:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    6b9a:	68bb      	ldr	r3, [r7, #8]
    6b9c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    6b9e:	2300      	movs	r3, #0
    6ba0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6ba2:	88fb      	ldrh	r3, [r7, #6]
    6ba4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6ba6:	f107 0310 	add.w	r3, r7, #16
    6baa:	4619      	mov	r1, r3
    6bac:	69f8      	ldr	r0, [r7, #28]
    6bae:	4b05      	ldr	r3, [pc, #20]	; (6bc4 <_spi_m_sync_io_read+0x54>)
    6bb0:	4798      	blx	r3
    6bb2:	4603      	mov	r3, r0
}
    6bb4:	4618      	mov	r0, r3
    6bb6:	3720      	adds	r7, #32
    6bb8:	46bd      	mov	sp, r7
    6bba:	bd80      	pop	{r7, pc}
    6bbc:	0001cc0c 	.word	0x0001cc0c
    6bc0:	00007b0d 	.word	0x00007b0d
    6bc4:	00006c21 	.word	0x00006c21

00006bc8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b088      	sub	sp, #32
    6bcc:	af00      	add	r7, sp, #0
    6bce:	60f8      	str	r0, [r7, #12]
    6bd0:	60b9      	str	r1, [r7, #8]
    6bd2:	4613      	mov	r3, r2
    6bd4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6bd6:	68fb      	ldr	r3, [r7, #12]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	bf14      	ite	ne
    6bdc:	2301      	movne	r3, #1
    6bde:	2300      	moveq	r3, #0
    6be0:	b2db      	uxtb	r3, r3
    6be2:	22a3      	movs	r2, #163	; 0xa3
    6be4:	490b      	ldr	r1, [pc, #44]	; (6c14 <_spi_m_sync_io_write+0x4c>)
    6be6:	4618      	mov	r0, r3
    6be8:	4b0b      	ldr	r3, [pc, #44]	; (6c18 <_spi_m_sync_io_write+0x50>)
    6bea:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6bec:	68fb      	ldr	r3, [r7, #12]
    6bee:	3b0c      	subs	r3, #12
    6bf0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    6bf2:	2300      	movs	r3, #0
    6bf4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6bf6:	68bb      	ldr	r3, [r7, #8]
    6bf8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6bfa:	88fb      	ldrh	r3, [r7, #6]
    6bfc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6bfe:	f107 0310 	add.w	r3, r7, #16
    6c02:	4619      	mov	r1, r3
    6c04:	69f8      	ldr	r0, [r7, #28]
    6c06:	4b05      	ldr	r3, [pc, #20]	; (6c1c <_spi_m_sync_io_write+0x54>)
    6c08:	4798      	blx	r3
    6c0a:	4603      	mov	r3, r0
}
    6c0c:	4618      	mov	r0, r3
    6c0e:	3720      	adds	r7, #32
    6c10:	46bd      	mov	sp, r7
    6c12:	bd80      	pop	{r7, pc}
    6c14:	0001cc0c 	.word	0x0001cc0c
    6c18:	00007b0d 	.word	0x00007b0d
    6c1c:	00006c21 	.word	0x00006c21

00006c20 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    6c20:	b580      	push	{r7, lr}
    6c22:	b086      	sub	sp, #24
    6c24:	af00      	add	r7, sp, #0
    6c26:	6078      	str	r0, [r7, #4]
    6c28:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6c2a:	687b      	ldr	r3, [r7, #4]
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d004      	beq.n	6c3a <spi_m_sync_transfer+0x1a>
    6c30:	683b      	ldr	r3, [r7, #0]
    6c32:	2b00      	cmp	r3, #0
    6c34:	d001      	beq.n	6c3a <spi_m_sync_transfer+0x1a>
    6c36:	2301      	movs	r3, #1
    6c38:	e000      	b.n	6c3c <spi_m_sync_transfer+0x1c>
    6c3a:	2300      	movs	r3, #0
    6c3c:	f003 0301 	and.w	r3, r3, #1
    6c40:	b2db      	uxtb	r3, r3
    6c42:	22b3      	movs	r2, #179	; 0xb3
    6c44:	490c      	ldr	r1, [pc, #48]	; (6c78 <spi_m_sync_transfer+0x58>)
    6c46:	4618      	mov	r0, r3
    6c48:	4b0c      	ldr	r3, [pc, #48]	; (6c7c <spi_m_sync_transfer+0x5c>)
    6c4a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    6c4c:	683b      	ldr	r3, [r7, #0]
    6c4e:	681b      	ldr	r3, [r3, #0]
    6c50:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    6c52:	683b      	ldr	r3, [r7, #0]
    6c54:	685b      	ldr	r3, [r3, #4]
    6c56:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    6c58:	683b      	ldr	r3, [r7, #0]
    6c5a:	689b      	ldr	r3, [r3, #8]
    6c5c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	3304      	adds	r3, #4
    6c62:	f107 020c 	add.w	r2, r7, #12
    6c66:	4611      	mov	r1, r2
    6c68:	4618      	mov	r0, r3
    6c6a:	4b05      	ldr	r3, [pc, #20]	; (6c80 <spi_m_sync_transfer+0x60>)
    6c6c:	4798      	blx	r3
    6c6e:	4603      	mov	r3, r0
}
    6c70:	4618      	mov	r0, r3
    6c72:	3718      	adds	r7, #24
    6c74:	46bd      	mov	sp, r7
    6c76:	bd80      	pop	{r7, pc}
    6c78:	0001cc0c 	.word	0x0001cc0c
    6c7c:	00007b0d 	.word	0x00007b0d
    6c80:	0000b90d 	.word	0x0000b90d

00006c84 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    6c84:	b580      	push	{r7, lr}
    6c86:	b082      	sub	sp, #8
    6c88:	af00      	add	r7, sp, #0
    6c8a:	6078      	str	r0, [r7, #4]
    6c8c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	2b00      	cmp	r3, #0
    6c92:	d004      	beq.n	6c9e <spi_m_sync_get_io_descriptor+0x1a>
    6c94:	683b      	ldr	r3, [r7, #0]
    6c96:	2b00      	cmp	r3, #0
    6c98:	d001      	beq.n	6c9e <spi_m_sync_get_io_descriptor+0x1a>
    6c9a:	2301      	movs	r3, #1
    6c9c:	e000      	b.n	6ca0 <spi_m_sync_get_io_descriptor+0x1c>
    6c9e:	2300      	movs	r3, #0
    6ca0:	f003 0301 	and.w	r3, r3, #1
    6ca4:	b2db      	uxtb	r3, r3
    6ca6:	22bd      	movs	r2, #189	; 0xbd
    6ca8:	4906      	ldr	r1, [pc, #24]	; (6cc4 <spi_m_sync_get_io_descriptor+0x40>)
    6caa:	4618      	mov	r0, r3
    6cac:	4b06      	ldr	r3, [pc, #24]	; (6cc8 <spi_m_sync_get_io_descriptor+0x44>)
    6cae:	4798      	blx	r3
	*io = &spi->io;
    6cb0:	687b      	ldr	r3, [r7, #4]
    6cb2:	f103 020c 	add.w	r2, r3, #12
    6cb6:	683b      	ldr	r3, [r7, #0]
    6cb8:	601a      	str	r2, [r3, #0]
	return 0;
    6cba:	2300      	movs	r3, #0
}
    6cbc:	4618      	mov	r0, r3
    6cbe:	3708      	adds	r7, #8
    6cc0:	46bd      	mov	sp, r7
    6cc2:	bd80      	pop	{r7, pc}
    6cc4:	0001cc0c 	.word	0x0001cc0c
    6cc8:	00007b0d 	.word	0x00007b0d

00006ccc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    6ccc:	b480      	push	{r7}
    6cce:	b083      	sub	sp, #12
    6cd0:	af00      	add	r7, sp, #0
    6cd2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    6cd4:	687b      	ldr	r3, [r7, #4]
    6cd6:	681b      	ldr	r3, [r3, #0]
}
    6cd8:	4618      	mov	r0, r3
    6cda:	370c      	adds	r7, #12
    6cdc:	46bd      	mov	sp, r7
    6cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ce2:	4770      	bx	lr

00006ce4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    6ce4:	b480      	push	{r7}
    6ce6:	b083      	sub	sp, #12
    6ce8:	af00      	add	r7, sp, #0
    6cea:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6cec:	687b      	ldr	r3, [r7, #4]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d002      	beq.n	6cf8 <list_get_next_element+0x14>
    6cf2:	687b      	ldr	r3, [r7, #4]
    6cf4:	681b      	ldr	r3, [r3, #0]
    6cf6:	e000      	b.n	6cfa <list_get_next_element+0x16>
    6cf8:	2300      	movs	r3, #0
}
    6cfa:	4618      	mov	r0, r3
    6cfc:	370c      	adds	r7, #12
    6cfe:	46bd      	mov	sp, r7
    6d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d04:	4770      	bx	lr
	...

00006d08 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b084      	sub	sp, #16
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	60f8      	str	r0, [r7, #12]
    6d10:	60b9      	str	r1, [r7, #8]
    6d12:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    6d14:	68fb      	ldr	r3, [r7, #12]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d007      	beq.n	6d2a <timer_init+0x22>
    6d1a:	68bb      	ldr	r3, [r7, #8]
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d004      	beq.n	6d2a <timer_init+0x22>
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d001      	beq.n	6d2a <timer_init+0x22>
    6d26:	2301      	movs	r3, #1
    6d28:	e000      	b.n	6d2c <timer_init+0x24>
    6d2a:	2300      	movs	r3, #0
    6d2c:	f003 0301 	and.w	r3, r3, #1
    6d30:	b2db      	uxtb	r3, r3
    6d32:	223b      	movs	r2, #59	; 0x3b
    6d34:	490c      	ldr	r1, [pc, #48]	; (6d68 <timer_init+0x60>)
    6d36:	4618      	mov	r0, r3
    6d38:	4b0c      	ldr	r3, [pc, #48]	; (6d6c <timer_init+0x64>)
    6d3a:	4798      	blx	r3
	descr->func = func;
    6d3c:	68fb      	ldr	r3, [r7, #12]
    6d3e:	687a      	ldr	r2, [r7, #4]
    6d40:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    6d42:	68fb      	ldr	r3, [r7, #12]
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	681b      	ldr	r3, [r3, #0]
    6d48:	68fa      	ldr	r2, [r7, #12]
    6d4a:	3204      	adds	r2, #4
    6d4c:	68b9      	ldr	r1, [r7, #8]
    6d4e:	4610      	mov	r0, r2
    6d50:	4798      	blx	r3
	descr->time                           = 0;
    6d52:	68fb      	ldr	r3, [r7, #12]
    6d54:	2200      	movs	r2, #0
    6d56:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    6d58:	68fb      	ldr	r3, [r7, #12]
    6d5a:	4a05      	ldr	r2, [pc, #20]	; (6d70 <timer_init+0x68>)
    6d5c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    6d5e:	2300      	movs	r3, #0
}
    6d60:	4618      	mov	r0, r3
    6d62:	3710      	adds	r7, #16
    6d64:	46bd      	mov	sp, r7
    6d66:	bd80      	pop	{r7, pc}
    6d68:	0001cc28 	.word	0x0001cc28
    6d6c:	00007b0d 	.word	0x00007b0d
    6d70:	000070f9 	.word	0x000070f9

00006d74 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    6d74:	b580      	push	{r7, lr}
    6d76:	b082      	sub	sp, #8
    6d78:	af00      	add	r7, sp, #0
    6d7a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d005      	beq.n	6d8e <timer_start+0x1a>
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	681b      	ldr	r3, [r3, #0]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d001      	beq.n	6d8e <timer_start+0x1a>
    6d8a:	2301      	movs	r3, #1
    6d8c:	e000      	b.n	6d90 <timer_start+0x1c>
    6d8e:	2300      	movs	r3, #0
    6d90:	f003 0301 	and.w	r3, r3, #1
    6d94:	b2db      	uxtb	r3, r3
    6d96:	2254      	movs	r2, #84	; 0x54
    6d98:	490e      	ldr	r1, [pc, #56]	; (6dd4 <timer_start+0x60>)
    6d9a:	4618      	mov	r0, r3
    6d9c:	4b0e      	ldr	r3, [pc, #56]	; (6dd8 <timer_start+0x64>)
    6d9e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	681b      	ldr	r3, [r3, #0]
    6da4:	699b      	ldr	r3, [r3, #24]
    6da6:	687a      	ldr	r2, [r7, #4]
    6da8:	3204      	adds	r2, #4
    6daa:	4610      	mov	r0, r2
    6dac:	4798      	blx	r3
    6dae:	4603      	mov	r3, r0
    6db0:	2b00      	cmp	r3, #0
    6db2:	d002      	beq.n	6dba <timer_start+0x46>
		return ERR_DENIED;
    6db4:	f06f 0310 	mvn.w	r3, #16
    6db8:	e007      	b.n	6dca <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	681b      	ldr	r3, [r3, #0]
    6dbe:	689b      	ldr	r3, [r3, #8]
    6dc0:	687a      	ldr	r2, [r7, #4]
    6dc2:	3204      	adds	r2, #4
    6dc4:	4610      	mov	r0, r2
    6dc6:	4798      	blx	r3

	return ERR_NONE;
    6dc8:	2300      	movs	r3, #0
}
    6dca:	4618      	mov	r0, r3
    6dcc:	3708      	adds	r7, #8
    6dce:	46bd      	mov	sp, r7
    6dd0:	bd80      	pop	{r7, pc}
    6dd2:	bf00      	nop
    6dd4:	0001cc28 	.word	0x0001cc28
    6dd8:	00007b0d 	.word	0x00007b0d

00006ddc <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	b082      	sub	sp, #8
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	2b00      	cmp	r3, #0
    6de8:	d005      	beq.n	6df6 <timer_stop+0x1a>
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	2b00      	cmp	r3, #0
    6df0:	d001      	beq.n	6df6 <timer_stop+0x1a>
    6df2:	2301      	movs	r3, #1
    6df4:	e000      	b.n	6df8 <timer_stop+0x1c>
    6df6:	2300      	movs	r3, #0
    6df8:	f003 0301 	and.w	r3, r3, #1
    6dfc:	b2db      	uxtb	r3, r3
    6dfe:	2262      	movs	r2, #98	; 0x62
    6e00:	490f      	ldr	r1, [pc, #60]	; (6e40 <timer_stop+0x64>)
    6e02:	4618      	mov	r0, r3
    6e04:	4b0f      	ldr	r3, [pc, #60]	; (6e44 <timer_stop+0x68>)
    6e06:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	681b      	ldr	r3, [r3, #0]
    6e0c:	699b      	ldr	r3, [r3, #24]
    6e0e:	687a      	ldr	r2, [r7, #4]
    6e10:	3204      	adds	r2, #4
    6e12:	4610      	mov	r0, r2
    6e14:	4798      	blx	r3
    6e16:	4603      	mov	r3, r0
    6e18:	f083 0301 	eor.w	r3, r3, #1
    6e1c:	b2db      	uxtb	r3, r3
    6e1e:	2b00      	cmp	r3, #0
    6e20:	d002      	beq.n	6e28 <timer_stop+0x4c>
		return ERR_DENIED;
    6e22:	f06f 0310 	mvn.w	r3, #16
    6e26:	e007      	b.n	6e38 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    6e28:	687b      	ldr	r3, [r7, #4]
    6e2a:	681b      	ldr	r3, [r3, #0]
    6e2c:	68db      	ldr	r3, [r3, #12]
    6e2e:	687a      	ldr	r2, [r7, #4]
    6e30:	3204      	adds	r2, #4
    6e32:	4610      	mov	r0, r2
    6e34:	4798      	blx	r3

	return ERR_NONE;
    6e36:	2300      	movs	r3, #0
}
    6e38:	4618      	mov	r0, r3
    6e3a:	3708      	adds	r7, #8
    6e3c:	46bd      	mov	sp, r7
    6e3e:	bd80      	pop	{r7, pc}
    6e40:	0001cc28 	.word	0x0001cc28
    6e44:	00007b0d 	.word	0x00007b0d

00006e48 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	b084      	sub	sp, #16
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	6078      	str	r0, [r7, #4]
    6e50:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	2b00      	cmp	r3, #0
    6e56:	d008      	beq.n	6e6a <timer_add_task+0x22>
    6e58:	683b      	ldr	r3, [r7, #0]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d005      	beq.n	6e6a <timer_add_task+0x22>
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d001      	beq.n	6e6a <timer_add_task+0x22>
    6e66:	2301      	movs	r3, #1
    6e68:	e000      	b.n	6e6c <timer_add_task+0x24>
    6e6a:	2300      	movs	r3, #0
    6e6c:	f003 0301 	and.w	r3, r3, #1
    6e70:	b2db      	uxtb	r3, r3
    6e72:	227b      	movs	r2, #123	; 0x7b
    6e74:	492f      	ldr	r1, [pc, #188]	; (6f34 <timer_add_task+0xec>)
    6e76:	4618      	mov	r0, r3
    6e78:	4b2f      	ldr	r3, [pc, #188]	; (6f38 <timer_add_task+0xf0>)
    6e7a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	7f1b      	ldrb	r3, [r3, #28]
    6e80:	b2db      	uxtb	r3, r3
    6e82:	f043 0301 	orr.w	r3, r3, #1
    6e86:	b2da      	uxtb	r2, r3
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	3318      	adds	r3, #24
    6e90:	6839      	ldr	r1, [r7, #0]
    6e92:	4618      	mov	r0, r3
    6e94:	4b29      	ldr	r3, [pc, #164]	; (6f3c <timer_add_task+0xf4>)
    6e96:	4798      	blx	r3
    6e98:	4603      	mov	r3, r0
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d00f      	beq.n	6ebe <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	7f1b      	ldrb	r3, [r3, #28]
    6ea2:	b2db      	uxtb	r3, r3
    6ea4:	f023 0301 	bic.w	r3, r3, #1
    6ea8:	b2da      	uxtb	r2, r3
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6eae:	2280      	movs	r2, #128	; 0x80
    6eb0:	4920      	ldr	r1, [pc, #128]	; (6f34 <timer_add_task+0xec>)
    6eb2:	2000      	movs	r0, #0
    6eb4:	4b20      	ldr	r3, [pc, #128]	; (6f38 <timer_add_task+0xf0>)
    6eb6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6eb8:	f06f 0311 	mvn.w	r3, #17
    6ebc:	e035      	b.n	6f2a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	695a      	ldr	r2, [r3, #20]
    6ec2:	683b      	ldr	r3, [r7, #0]
    6ec4:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	f103 0018 	add.w	r0, r3, #24
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	695b      	ldr	r3, [r3, #20]
    6ed0:	461a      	mov	r2, r3
    6ed2:	6839      	ldr	r1, [r7, #0]
    6ed4:	4b1a      	ldr	r3, [pc, #104]	; (6f40 <timer_add_task+0xf8>)
    6ed6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6ed8:	687b      	ldr	r3, [r7, #4]
    6eda:	7f1b      	ldrb	r3, [r3, #28]
    6edc:	b2db      	uxtb	r3, r3
    6ede:	f023 0301 	bic.w	r3, r3, #1
    6ee2:	b2da      	uxtb	r2, r3
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	7f1b      	ldrb	r3, [r3, #28]
    6eec:	b2db      	uxtb	r3, r3
    6eee:	f003 0302 	and.w	r3, r3, #2
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d018      	beq.n	6f28 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    6ef6:	f107 030c 	add.w	r3, r7, #12
    6efa:	4618      	mov	r0, r3
    6efc:	4b11      	ldr	r3, [pc, #68]	; (6f44 <timer_add_task+0xfc>)
    6efe:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6f00:	687b      	ldr	r3, [r7, #4]
    6f02:	7f1b      	ldrb	r3, [r3, #28]
    6f04:	b2db      	uxtb	r3, r3
    6f06:	f023 0302 	bic.w	r3, r3, #2
    6f0a:	b2da      	uxtb	r2, r3
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	681b      	ldr	r3, [r3, #0]
    6f14:	69db      	ldr	r3, [r3, #28]
    6f16:	687a      	ldr	r2, [r7, #4]
    6f18:	3204      	adds	r2, #4
    6f1a:	4610      	mov	r0, r2
    6f1c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    6f1e:	f107 030c 	add.w	r3, r7, #12
    6f22:	4618      	mov	r0, r3
    6f24:	4b08      	ldr	r3, [pc, #32]	; (6f48 <timer_add_task+0x100>)
    6f26:	4798      	blx	r3
	}

	return ERR_NONE;
    6f28:	2300      	movs	r3, #0
}
    6f2a:	4618      	mov	r0, r3
    6f2c:	3710      	adds	r7, #16
    6f2e:	46bd      	mov	sp, r7
    6f30:	bd80      	pop	{r7, pc}
    6f32:	bf00      	nop
    6f34:	0001cc28 	.word	0x0001cc28
    6f38:	00007b0d 	.word	0x00007b0d
    6f3c:	00007b35 	.word	0x00007b35
    6f40:	00007049 	.word	0x00007049
    6f44:	0000ff79 	.word	0x0000ff79
    6f48:	0000ff9f 	.word	0x0000ff9f

00006f4c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    6f4c:	b580      	push	{r7, lr}
    6f4e:	b084      	sub	sp, #16
    6f50:	af00      	add	r7, sp, #0
    6f52:	6078      	str	r0, [r7, #4]
    6f54:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d008      	beq.n	6f6e <timer_remove_task+0x22>
    6f5c:	683b      	ldr	r3, [r7, #0]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d005      	beq.n	6f6e <timer_remove_task+0x22>
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	681b      	ldr	r3, [r3, #0]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d001      	beq.n	6f6e <timer_remove_task+0x22>
    6f6a:	2301      	movs	r3, #1
    6f6c:	e000      	b.n	6f70 <timer_remove_task+0x24>
    6f6e:	2300      	movs	r3, #0
    6f70:	f003 0301 	and.w	r3, r3, #1
    6f74:	b2db      	uxtb	r3, r3
    6f76:	2296      	movs	r2, #150	; 0x96
    6f78:	492d      	ldr	r1, [pc, #180]	; (7030 <timer_remove_task+0xe4>)
    6f7a:	4618      	mov	r0, r3
    6f7c:	4b2d      	ldr	r3, [pc, #180]	; (7034 <timer_remove_task+0xe8>)
    6f7e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	7f1b      	ldrb	r3, [r3, #28]
    6f84:	b2db      	uxtb	r3, r3
    6f86:	f043 0301 	orr.w	r3, r3, #1
    6f8a:	b2da      	uxtb	r2, r3
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	3318      	adds	r3, #24
    6f94:	6839      	ldr	r1, [r7, #0]
    6f96:	4618      	mov	r0, r3
    6f98:	4b27      	ldr	r3, [pc, #156]	; (7038 <timer_remove_task+0xec>)
    6f9a:	4798      	blx	r3
    6f9c:	4603      	mov	r3, r0
    6f9e:	f083 0301 	eor.w	r3, r3, #1
    6fa2:	b2db      	uxtb	r3, r3
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d00f      	beq.n	6fc8 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	7f1b      	ldrb	r3, [r3, #28]
    6fac:	b2db      	uxtb	r3, r3
    6fae:	f023 0301 	bic.w	r3, r3, #1
    6fb2:	b2da      	uxtb	r2, r3
    6fb4:	687b      	ldr	r3, [r7, #4]
    6fb6:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6fb8:	229b      	movs	r2, #155	; 0x9b
    6fba:	491d      	ldr	r1, [pc, #116]	; (7030 <timer_remove_task+0xe4>)
    6fbc:	2000      	movs	r0, #0
    6fbe:	4b1d      	ldr	r3, [pc, #116]	; (7034 <timer_remove_task+0xe8>)
    6fc0:	4798      	blx	r3
		return ERR_NOT_FOUND;
    6fc2:	f06f 0309 	mvn.w	r3, #9
    6fc6:	e02e      	b.n	7026 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	3318      	adds	r3, #24
    6fcc:	6839      	ldr	r1, [r7, #0]
    6fce:	4618      	mov	r0, r3
    6fd0:	4b1a      	ldr	r3, [pc, #104]	; (703c <timer_remove_task+0xf0>)
    6fd2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6fd4:	687b      	ldr	r3, [r7, #4]
    6fd6:	7f1b      	ldrb	r3, [r3, #28]
    6fd8:	b2db      	uxtb	r3, r3
    6fda:	f023 0301 	bic.w	r3, r3, #1
    6fde:	b2da      	uxtb	r2, r3
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6fe4:	687b      	ldr	r3, [r7, #4]
    6fe6:	7f1b      	ldrb	r3, [r3, #28]
    6fe8:	b2db      	uxtb	r3, r3
    6fea:	f003 0302 	and.w	r3, r3, #2
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d018      	beq.n	7024 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    6ff2:	f107 030c 	add.w	r3, r7, #12
    6ff6:	4618      	mov	r0, r3
    6ff8:	4b11      	ldr	r3, [pc, #68]	; (7040 <timer_remove_task+0xf4>)
    6ffa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	7f1b      	ldrb	r3, [r3, #28]
    7000:	b2db      	uxtb	r3, r3
    7002:	f023 0302 	bic.w	r3, r3, #2
    7006:	b2da      	uxtb	r2, r3
    7008:	687b      	ldr	r3, [r7, #4]
    700a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	69db      	ldr	r3, [r3, #28]
    7012:	687a      	ldr	r2, [r7, #4]
    7014:	3204      	adds	r2, #4
    7016:	4610      	mov	r0, r2
    7018:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    701a:	f107 030c 	add.w	r3, r7, #12
    701e:	4618      	mov	r0, r3
    7020:	4b08      	ldr	r3, [pc, #32]	; (7044 <timer_remove_task+0xf8>)
    7022:	4798      	blx	r3
	}

	return ERR_NONE;
    7024:	2300      	movs	r3, #0
}
    7026:	4618      	mov	r0, r3
    7028:	3710      	adds	r7, #16
    702a:	46bd      	mov	sp, r7
    702c:	bd80      	pop	{r7, pc}
    702e:	bf00      	nop
    7030:	0001cc28 	.word	0x0001cc28
    7034:	00007b0d 	.word	0x00007b0d
    7038:	00007b35 	.word	0x00007b35
    703c:	00007c97 	.word	0x00007c97
    7040:	0000ff79 	.word	0x0000ff79
    7044:	0000ff9f 	.word	0x0000ff9f

00007048 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    7048:	b580      	push	{r7, lr}
    704a:	b088      	sub	sp, #32
    704c:	af00      	add	r7, sp, #0
    704e:	60f8      	str	r0, [r7, #12]
    7050:	60b9      	str	r1, [r7, #8]
    7052:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    7054:	2300      	movs	r3, #0
    7056:	61bb      	str	r3, [r7, #24]
    7058:	68f8      	ldr	r0, [r7, #12]
    705a:	4b23      	ldr	r3, [pc, #140]	; (70e8 <timer_add_timer_task+0xa0>)
    705c:	4798      	blx	r3
    705e:	6138      	str	r0, [r7, #16]

	if (!head) {
    7060:	693b      	ldr	r3, [r7, #16]
    7062:	2b00      	cmp	r3, #0
    7064:	d104      	bne.n	7070 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    7066:	68b9      	ldr	r1, [r7, #8]
    7068:	68f8      	ldr	r0, [r7, #12]
    706a:	4b20      	ldr	r3, [pc, #128]	; (70ec <timer_add_timer_task+0xa4>)
    706c:	4798      	blx	r3
		return;
    706e:	e037      	b.n	70e0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    7070:	693b      	ldr	r3, [r7, #16]
    7072:	61fb      	str	r3, [r7, #28]
    7074:	e022      	b.n	70bc <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    7076:	69fb      	ldr	r3, [r7, #28]
    7078:	685a      	ldr	r2, [r3, #4]
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	429a      	cmp	r2, r3
    707e:	d808      	bhi.n	7092 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    7080:	69fb      	ldr	r3, [r7, #28]
    7082:	689a      	ldr	r2, [r3, #8]
    7084:	69fb      	ldr	r3, [r7, #28]
    7086:	6859      	ldr	r1, [r3, #4]
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	1acb      	subs	r3, r1, r3
    708c:	4413      	add	r3, r2
    708e:	617b      	str	r3, [r7, #20]
    7090:	e009      	b.n	70a6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    7092:	69fb      	ldr	r3, [r7, #28]
    7094:	689a      	ldr	r2, [r3, #8]
    7096:	69fb      	ldr	r3, [r7, #28]
    7098:	685b      	ldr	r3, [r3, #4]
    709a:	441a      	add	r2, r3
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	425b      	negs	r3, r3
    70a0:	4413      	add	r3, r2
    70a2:	3301      	adds	r3, #1
    70a4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    70a6:	68bb      	ldr	r3, [r7, #8]
    70a8:	689a      	ldr	r2, [r3, #8]
    70aa:	697b      	ldr	r3, [r7, #20]
    70ac:	429a      	cmp	r2, r3
    70ae:	d909      	bls.n	70c4 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    70b0:	69fb      	ldr	r3, [r7, #28]
    70b2:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    70b4:	69f8      	ldr	r0, [r7, #28]
    70b6:	4b0e      	ldr	r3, [pc, #56]	; (70f0 <timer_add_timer_task+0xa8>)
    70b8:	4798      	blx	r3
    70ba:	61f8      	str	r0, [r7, #28]
    70bc:	69fb      	ldr	r3, [r7, #28]
    70be:	2b00      	cmp	r3, #0
    70c0:	d1d9      	bne.n	7076 <timer_add_timer_task+0x2e>
    70c2:	e000      	b.n	70c6 <timer_add_timer_task+0x7e>
			break;
    70c4:	bf00      	nop
	}

	if (it == head) {
    70c6:	69fa      	ldr	r2, [r7, #28]
    70c8:	693b      	ldr	r3, [r7, #16]
    70ca:	429a      	cmp	r2, r3
    70cc:	d104      	bne.n	70d8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    70ce:	68b9      	ldr	r1, [r7, #8]
    70d0:	68f8      	ldr	r0, [r7, #12]
    70d2:	4b06      	ldr	r3, [pc, #24]	; (70ec <timer_add_timer_task+0xa4>)
    70d4:	4798      	blx	r3
    70d6:	e003      	b.n	70e0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    70d8:	68b9      	ldr	r1, [r7, #8]
    70da:	69b8      	ldr	r0, [r7, #24]
    70dc:	4b05      	ldr	r3, [pc, #20]	; (70f4 <timer_add_timer_task+0xac>)
    70de:	4798      	blx	r3
	}
}
    70e0:	3720      	adds	r7, #32
    70e2:	46bd      	mov	sp, r7
    70e4:	bd80      	pop	{r7, pc}
    70e6:	bf00      	nop
    70e8:	00006ccd 	.word	0x00006ccd
    70ec:	00007b6d 	.word	0x00007b6d
    70f0:	00006ce5 	.word	0x00006ce5
    70f4:	00007bc5 	.word	0x00007bc5

000070f8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b086      	sub	sp, #24
    70fc:	af00      	add	r7, sp, #0
    70fe:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	3b04      	subs	r3, #4
    7104:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    7106:	693b      	ldr	r3, [r7, #16]
    7108:	3318      	adds	r3, #24
    710a:	4618      	mov	r0, r3
    710c:	4b27      	ldr	r3, [pc, #156]	; (71ac <timer_process_counted+0xb4>)
    710e:	4798      	blx	r3
    7110:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    7112:	693b      	ldr	r3, [r7, #16]
    7114:	695b      	ldr	r3, [r3, #20]
    7116:	1c5a      	adds	r2, r3, #1
    7118:	693b      	ldr	r3, [r7, #16]
    711a:	615a      	str	r2, [r3, #20]
    711c:	693b      	ldr	r3, [r7, #16]
    711e:	695b      	ldr	r3, [r3, #20]
    7120:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    7122:	693b      	ldr	r3, [r7, #16]
    7124:	7f1b      	ldrb	r3, [r3, #28]
    7126:	b2db      	uxtb	r3, r3
    7128:	f003 0301 	and.w	r3, r3, #1
    712c:	2b00      	cmp	r3, #0
    712e:	d106      	bne.n	713e <timer_process_counted+0x46>
    7130:	693b      	ldr	r3, [r7, #16]
    7132:	7f1b      	ldrb	r3, [r3, #28]
    7134:	b2db      	uxtb	r3, r3
    7136:	f003 0302 	and.w	r3, r3, #2
    713a:	2b00      	cmp	r3, #0
    713c:	d027      	beq.n	718e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    713e:	693b      	ldr	r3, [r7, #16]
    7140:	7f1b      	ldrb	r3, [r3, #28]
    7142:	b2db      	uxtb	r3, r3
    7144:	f043 0302 	orr.w	r3, r3, #2
    7148:	b2da      	uxtb	r2, r3
    714a:	693b      	ldr	r3, [r7, #16]
    714c:	771a      	strb	r2, [r3, #28]
		return;
    714e:	e029      	b.n	71a4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    7150:	697b      	ldr	r3, [r7, #20]
    7152:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    7154:	693b      	ldr	r3, [r7, #16]
    7156:	3318      	adds	r3, #24
    7158:	4618      	mov	r0, r3
    715a:	4b15      	ldr	r3, [pc, #84]	; (71b0 <timer_process_counted+0xb8>)
    715c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    715e:	68bb      	ldr	r3, [r7, #8]
    7160:	7c1b      	ldrb	r3, [r3, #16]
    7162:	2b01      	cmp	r3, #1
    7164:	d109      	bne.n	717a <timer_process_counted+0x82>
			tmp->time_label = time;
    7166:	68bb      	ldr	r3, [r7, #8]
    7168:	68fa      	ldr	r2, [r7, #12]
    716a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    716c:	693b      	ldr	r3, [r7, #16]
    716e:	3318      	adds	r3, #24
    7170:	68fa      	ldr	r2, [r7, #12]
    7172:	68b9      	ldr	r1, [r7, #8]
    7174:	4618      	mov	r0, r3
    7176:	4b0f      	ldr	r3, [pc, #60]	; (71b4 <timer_process_counted+0xbc>)
    7178:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    717a:	693b      	ldr	r3, [r7, #16]
    717c:	3318      	adds	r3, #24
    717e:	4618      	mov	r0, r3
    7180:	4b0a      	ldr	r3, [pc, #40]	; (71ac <timer_process_counted+0xb4>)
    7182:	4798      	blx	r3
    7184:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    7186:	68bb      	ldr	r3, [r7, #8]
    7188:	68db      	ldr	r3, [r3, #12]
    718a:	68b8      	ldr	r0, [r7, #8]
    718c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    718e:	697b      	ldr	r3, [r7, #20]
    7190:	2b00      	cmp	r3, #0
    7192:	d007      	beq.n	71a4 <timer_process_counted+0xac>
    7194:	697b      	ldr	r3, [r7, #20]
    7196:	685b      	ldr	r3, [r3, #4]
    7198:	68fa      	ldr	r2, [r7, #12]
    719a:	1ad2      	subs	r2, r2, r3
    719c:	697b      	ldr	r3, [r7, #20]
    719e:	689b      	ldr	r3, [r3, #8]
    71a0:	429a      	cmp	r2, r3
    71a2:	d2d5      	bcs.n	7150 <timer_process_counted+0x58>
	}
}
    71a4:	3718      	adds	r7, #24
    71a6:	46bd      	mov	sp, r7
    71a8:	bd80      	pop	{r7, pc}
    71aa:	bf00      	nop
    71ac:	00006ccd 	.word	0x00006ccd
    71b0:	00007c65 	.word	0x00007c65
    71b4:	00007049 	.word	0x00007049

000071b8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    71b8:	b480      	push	{r7}
    71ba:	b085      	sub	sp, #20
    71bc:	af00      	add	r7, sp, #0
    71be:	4603      	mov	r3, r0
    71c0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    71c2:	2300      	movs	r3, #0
    71c4:	73fb      	strb	r3, [r7, #15]
    71c6:	e029      	b.n	721c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    71c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71cc:	4a19      	ldr	r2, [pc, #100]	; (7234 <_usb_d_find_ep+0x7c>)
    71ce:	015b      	lsls	r3, r3, #5
    71d0:	4413      	add	r3, r2
    71d2:	3301      	adds	r3, #1
    71d4:	781b      	ldrb	r3, [r3, #0]
    71d6:	79fa      	ldrb	r2, [r7, #7]
    71d8:	429a      	cmp	r2, r3
    71da:	d102      	bne.n	71e2 <_usb_d_find_ep+0x2a>
			return i;
    71dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71e0:	e022      	b.n	7228 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    71e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71e6:	4a13      	ldr	r2, [pc, #76]	; (7234 <_usb_d_find_ep+0x7c>)
    71e8:	015b      	lsls	r3, r3, #5
    71ea:	4413      	add	r3, r2
    71ec:	781b      	ldrb	r3, [r3, #0]
    71ee:	2b00      	cmp	r3, #0
    71f0:	d10e      	bne.n	7210 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    71f2:	79fb      	ldrb	r3, [r7, #7]
    71f4:	f003 030f 	and.w	r3, r3, #15
    71f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71fc:	490d      	ldr	r1, [pc, #52]	; (7234 <_usb_d_find_ep+0x7c>)
    71fe:	0152      	lsls	r2, r2, #5
    7200:	440a      	add	r2, r1
    7202:	3201      	adds	r2, #1
    7204:	7812      	ldrb	r2, [r2, #0]
    7206:	4293      	cmp	r3, r2
    7208:	d102      	bne.n	7210 <_usb_d_find_ep+0x58>
			return i;
    720a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    720e:	e00b      	b.n	7228 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7210:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7214:	b2db      	uxtb	r3, r3
    7216:	3301      	adds	r3, #1
    7218:	b2db      	uxtb	r3, r3
    721a:	73fb      	strb	r3, [r7, #15]
    721c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7220:	2b03      	cmp	r3, #3
    7222:	ddd1      	ble.n	71c8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    7224:	f04f 33ff 	mov.w	r3, #4294967295
}
    7228:	4618      	mov	r0, r3
    722a:	3714      	adds	r7, #20
    722c:	46bd      	mov	sp, r7
    722e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7232:	4770      	bx	lr
    7234:	200017fc 	.word	0x200017fc

00007238 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    7238:	b580      	push	{r7, lr}
    723a:	b088      	sub	sp, #32
    723c:	af00      	add	r7, sp, #0
    723e:	60ba      	str	r2, [r7, #8]
    7240:	607b      	str	r3, [r7, #4]
    7242:	4603      	mov	r3, r0
    7244:	73fb      	strb	r3, [r7, #15]
    7246:	460b      	mov	r3, r1
    7248:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    724a:	68bb      	ldr	r3, [r7, #8]
    724c:	617b      	str	r3, [r7, #20]
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	61bb      	str	r3, [r7, #24]
    7252:	7bbb      	ldrb	r3, [r7, #14]
    7254:	2b00      	cmp	r3, #0
    7256:	d004      	beq.n	7262 <_usb_d_trans+0x2a>
    7258:	7bfb      	ldrb	r3, [r7, #15]
    725a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    725e:	b2db      	uxtb	r3, r3
    7260:	e003      	b.n	726a <_usb_d_trans+0x32>
    7262:	7bfb      	ldrb	r3, [r7, #15]
    7264:	f003 030f 	and.w	r3, r3, #15
    7268:	b2db      	uxtb	r3, r3
    726a:	773b      	strb	r3, [r7, #28]
    726c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    7270:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    7272:	f107 0314 	add.w	r3, r7, #20
    7276:	4618      	mov	r0, r3
    7278:	4b03      	ldr	r3, [pc, #12]	; (7288 <_usb_d_trans+0x50>)
    727a:	4798      	blx	r3
    727c:	4603      	mov	r3, r0
}
    727e:	4618      	mov	r0, r3
    7280:	3720      	adds	r7, #32
    7282:	46bd      	mov	sp, r7
    7284:	bd80      	pop	{r7, pc}
    7286:	bf00      	nop
    7288:	0000f32d 	.word	0x0000f32d

0000728c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    728c:	b480      	push	{r7}
    728e:	b085      	sub	sp, #20
    7290:	af00      	add	r7, sp, #0
    7292:	60f8      	str	r0, [r7, #12]
    7294:	60b9      	str	r1, [r7, #8]
    7296:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    7298:	2300      	movs	r3, #0
}
    729a:	4618      	mov	r0, r3
    729c:	3714      	adds	r7, #20
    729e:	46bd      	mov	sp, r7
    72a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a4:	4770      	bx	lr
	...

000072a8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	b086      	sub	sp, #24
    72ac:	af00      	add	r7, sp, #0
    72ae:	4603      	mov	r3, r0
    72b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    72b2:	79fb      	ldrb	r3, [r7, #7]
    72b4:	4618      	mov	r0, r3
    72b6:	4b2a      	ldr	r3, [pc, #168]	; (7360 <usb_d_cb_trans_setup+0xb8>)
    72b8:	4798      	blx	r3
    72ba:	4603      	mov	r3, r0
    72bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    72be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    72c2:	015b      	lsls	r3, r3, #5
    72c4:	4a27      	ldr	r2, [pc, #156]	; (7364 <usb_d_cb_trans_setup+0xbc>)
    72c6:	4413      	add	r3, r2
    72c8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    72ca:	693b      	ldr	r3, [r7, #16]
    72cc:	330c      	adds	r3, #12
    72ce:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    72d0:	79fb      	ldrb	r3, [r7, #7]
    72d2:	68f9      	ldr	r1, [r7, #12]
    72d4:	4618      	mov	r0, r3
    72d6:	4b24      	ldr	r3, [pc, #144]	; (7368 <usb_d_cb_trans_setup+0xc0>)
    72d8:	4798      	blx	r3
    72da:	4603      	mov	r3, r0
    72dc:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    72de:	7afb      	ldrb	r3, [r7, #11]
    72e0:	2b08      	cmp	r3, #8
    72e2:	d00d      	beq.n	7300 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    72e4:	79fb      	ldrb	r3, [r7, #7]
    72e6:	2101      	movs	r1, #1
    72e8:	4618      	mov	r0, r3
    72ea:	4b20      	ldr	r3, [pc, #128]	; (736c <usb_d_cb_trans_setup+0xc4>)
    72ec:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    72ee:	79fb      	ldrb	r3, [r7, #7]
    72f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    72f4:	b2db      	uxtb	r3, r3
    72f6:	2101      	movs	r1, #1
    72f8:	4618      	mov	r0, r3
    72fa:	4b1c      	ldr	r3, [pc, #112]	; (736c <usb_d_cb_trans_setup+0xc4>)
    72fc:	4798      	blx	r3
		return;
    72fe:	e02b      	b.n	7358 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7300:	79fb      	ldrb	r3, [r7, #7]
    7302:	2100      	movs	r1, #0
    7304:	4618      	mov	r0, r3
    7306:	4b19      	ldr	r3, [pc, #100]	; (736c <usb_d_cb_trans_setup+0xc4>)
    7308:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    730a:	79fb      	ldrb	r3, [r7, #7]
    730c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7310:	b2db      	uxtb	r3, r3
    7312:	2100      	movs	r1, #0
    7314:	4618      	mov	r0, r3
    7316:	4b15      	ldr	r3, [pc, #84]	; (736c <usb_d_cb_trans_setup+0xc4>)
    7318:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    731a:	693b      	ldr	r3, [r7, #16]
    731c:	2201      	movs	r2, #1
    731e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    7320:	693b      	ldr	r3, [r7, #16]
    7322:	695b      	ldr	r3, [r3, #20]
    7324:	79fa      	ldrb	r2, [r7, #7]
    7326:	68f9      	ldr	r1, [r7, #12]
    7328:	4610      	mov	r0, r2
    732a:	4798      	blx	r3
    732c:	4603      	mov	r3, r0
    732e:	f083 0301 	eor.w	r3, r3, #1
    7332:	b2db      	uxtb	r3, r3
    7334:	2b00      	cmp	r3, #0
    7336:	d00f      	beq.n	7358 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    7338:	693b      	ldr	r3, [r7, #16]
    733a:	2205      	movs	r2, #5
    733c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    733e:	79fb      	ldrb	r3, [r7, #7]
    7340:	2101      	movs	r1, #1
    7342:	4618      	mov	r0, r3
    7344:	4b09      	ldr	r3, [pc, #36]	; (736c <usb_d_cb_trans_setup+0xc4>)
    7346:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7348:	79fb      	ldrb	r3, [r7, #7]
    734a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    734e:	b2db      	uxtb	r3, r3
    7350:	2101      	movs	r1, #1
    7352:	4618      	mov	r0, r3
    7354:	4b05      	ldr	r3, [pc, #20]	; (736c <usb_d_cb_trans_setup+0xc4>)
    7356:	4798      	blx	r3
	}
}
    7358:	3718      	adds	r7, #24
    735a:	46bd      	mov	sp, r7
    735c:	bd80      	pop	{r7, pc}
    735e:	bf00      	nop
    7360:	000071b9 	.word	0x000071b9
    7364:	200017fc 	.word	0x200017fc
    7368:	0000f285 	.word	0x0000f285
    736c:	0000f0fd 	.word	0x0000f0fd

00007370 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    7370:	b580      	push	{r7, lr}
    7372:	b084      	sub	sp, #16
    7374:	af00      	add	r7, sp, #0
    7376:	4603      	mov	r3, r0
    7378:	6039      	str	r1, [r7, #0]
    737a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    737c:	79fb      	ldrb	r3, [r7, #7]
    737e:	4618      	mov	r0, r3
    7380:	4b0d      	ldr	r3, [pc, #52]	; (73b8 <usb_d_cb_trans_more+0x48>)
    7382:	4798      	blx	r3
    7384:	4603      	mov	r3, r0
    7386:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7388:	f997 300f 	ldrsb.w	r3, [r7, #15]
    738c:	015b      	lsls	r3, r3, #5
    738e:	4a0b      	ldr	r2, [pc, #44]	; (73bc <usb_d_cb_trans_more+0x4c>)
    7390:	4413      	add	r3, r2
    7392:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    7394:	68bb      	ldr	r3, [r7, #8]
    7396:	789b      	ldrb	r3, [r3, #2]
    7398:	2b03      	cmp	r3, #3
    739a:	d107      	bne.n	73ac <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    739c:	68bb      	ldr	r3, [r7, #8]
    739e:	699b      	ldr	r3, [r3, #24]
    73a0:	79fa      	ldrb	r2, [r7, #7]
    73a2:	6839      	ldr	r1, [r7, #0]
    73a4:	4610      	mov	r0, r2
    73a6:	4798      	blx	r3
    73a8:	4603      	mov	r3, r0
    73aa:	e000      	b.n	73ae <usb_d_cb_trans_more+0x3e>
	}
	return false;
    73ac:	2300      	movs	r3, #0
}
    73ae:	4618      	mov	r0, r3
    73b0:	3710      	adds	r7, #16
    73b2:	46bd      	mov	sp, r7
    73b4:	bd80      	pop	{r7, pc}
    73b6:	bf00      	nop
    73b8:	000071b9 	.word	0x000071b9
    73bc:	200017fc 	.word	0x200017fc

000073c0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    73c0:	b590      	push	{r4, r7, lr}
    73c2:	b087      	sub	sp, #28
    73c4:	af02      	add	r7, sp, #8
    73c6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	789b      	ldrb	r3, [r3, #2]
    73cc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	7b1b      	ldrb	r3, [r3, #12]
    73d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    73d6:	2b00      	cmp	r3, #0
    73d8:	bf14      	ite	ne
    73da:	2301      	movne	r3, #1
    73dc:	2300      	moveq	r3, #0
    73de:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    73e0:	7bfb      	ldrb	r3, [r7, #15]
    73e2:	2b03      	cmp	r3, #3
    73e4:	d13a      	bne.n	745c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    73e6:	687b      	ldr	r3, [r7, #4]
    73e8:	69db      	ldr	r3, [r3, #28]
    73ea:	687a      	ldr	r2, [r7, #4]
    73ec:	7850      	ldrb	r0, [r2, #1]
    73ee:	687a      	ldr	r2, [r7, #4]
    73f0:	320c      	adds	r2, #12
    73f2:	2101      	movs	r1, #1
    73f4:	4798      	blx	r3
    73f6:	4603      	mov	r3, r0
    73f8:	737b      	strb	r3, [r7, #13]
		if (err) {
    73fa:	7b7b      	ldrb	r3, [r7, #13]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d015      	beq.n	742c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	2205      	movs	r2, #5
    7404:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    7406:	687b      	ldr	r3, [r7, #4]
    7408:	2202      	movs	r2, #2
    740a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    740c:	7bbb      	ldrb	r3, [r7, #14]
    740e:	2b00      	cmp	r3, #0
    7410:	d002      	beq.n	7418 <usb_d_ctrl_trans_done+0x58>
    7412:	687b      	ldr	r3, [r7, #4]
    7414:	785b      	ldrb	r3, [r3, #1]
    7416:	e004      	b.n	7422 <usb_d_ctrl_trans_done+0x62>
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	785b      	ldrb	r3, [r3, #1]
    741c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7420:	b2db      	uxtb	r3, r3
    7422:	2101      	movs	r1, #1
    7424:	4618      	mov	r0, r3
    7426:	4b15      	ldr	r3, [pc, #84]	; (747c <usb_d_ctrl_trans_done+0xbc>)
    7428:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    742a:	e022      	b.n	7472 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    742c:	687b      	ldr	r3, [r7, #4]
    742e:	2204      	movs	r2, #4
    7430:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    7432:	687b      	ldr	r3, [r7, #4]
    7434:	7858      	ldrb	r0, [r3, #1]
    7436:	7bbb      	ldrb	r3, [r7, #14]
    7438:	2b00      	cmp	r3, #0
    743a:	bf14      	ite	ne
    743c:	2301      	movne	r3, #1
    743e:	2300      	moveq	r3, #0
    7440:	b2db      	uxtb	r3, r3
    7442:	f083 0301 	eor.w	r3, r3, #1
    7446:	b2db      	uxtb	r3, r3
    7448:	f003 0301 	and.w	r3, r3, #1
    744c:	b2d9      	uxtb	r1, r3
    744e:	2301      	movs	r3, #1
    7450:	9300      	str	r3, [sp, #0]
    7452:	2300      	movs	r3, #0
    7454:	2200      	movs	r2, #0
    7456:	4c0a      	ldr	r4, [pc, #40]	; (7480 <usb_d_ctrl_trans_done+0xc0>)
    7458:	47a0      	blx	r4
}
    745a:	e00a      	b.n	7472 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    745c:	687b      	ldr	r3, [r7, #4]
    745e:	69db      	ldr	r3, [r3, #28]
    7460:	687a      	ldr	r2, [r7, #4]
    7462:	7850      	ldrb	r0, [r2, #1]
    7464:	687a      	ldr	r2, [r7, #4]
    7466:	320c      	adds	r2, #12
    7468:	2100      	movs	r1, #0
    746a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	2202      	movs	r2, #2
    7470:	709a      	strb	r2, [r3, #2]
}
    7472:	bf00      	nop
    7474:	3714      	adds	r7, #20
    7476:	46bd      	mov	sp, r7
    7478:	bd90      	pop	{r4, r7, pc}
    747a:	bf00      	nop
    747c:	0000f0fd 	.word	0x0000f0fd
    7480:	00007239 	.word	0x00007239

00007484 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7484:	b580      	push	{r7, lr}
    7486:	b086      	sub	sp, #24
    7488:	af00      	add	r7, sp, #0
    748a:	4603      	mov	r3, r0
    748c:	60b9      	str	r1, [r7, #8]
    748e:	607a      	str	r2, [r7, #4]
    7490:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7492:	7bfb      	ldrb	r3, [r7, #15]
    7494:	4618      	mov	r0, r3
    7496:	4b2f      	ldr	r3, [pc, #188]	; (7554 <_usb_d_cb_trans_done+0xd0>)
    7498:	4798      	blx	r3
    749a:	4603      	mov	r3, r0
    749c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    749e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    74a2:	015b      	lsls	r3, r3, #5
    74a4:	4a2c      	ldr	r2, [pc, #176]	; (7558 <_usb_d_cb_trans_done+0xd4>)
    74a6:	4413      	add	r3, r2
    74a8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    74aa:	68bb      	ldr	r3, [r7, #8]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d10e      	bne.n	74ce <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    74b0:	693b      	ldr	r3, [r7, #16]
    74b2:	2200      	movs	r2, #0
    74b4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    74b6:	693b      	ldr	r3, [r7, #16]
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	2b00      	cmp	r3, #0
    74bc:	d103      	bne.n	74c6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    74be:	6938      	ldr	r0, [r7, #16]
    74c0:	4b26      	ldr	r3, [pc, #152]	; (755c <_usb_d_cb_trans_done+0xd8>)
    74c2:	4798      	blx	r3
			return;
    74c4:	e043      	b.n	754e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    74c6:	693b      	ldr	r3, [r7, #16]
    74c8:	2201      	movs	r2, #1
    74ca:	709a      	strb	r2, [r3, #2]
    74cc:	e038      	b.n	7540 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    74ce:	68bb      	ldr	r3, [r7, #8]
    74d0:	2b01      	cmp	r3, #1
    74d2:	d113      	bne.n	74fc <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    74d4:	693b      	ldr	r3, [r7, #16]
    74d6:	2202      	movs	r2, #2
    74d8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    74da:	693b      	ldr	r3, [r7, #16]
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	2b00      	cmp	r3, #0
    74e0:	d108      	bne.n	74f4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    74e2:	693b      	ldr	r3, [r7, #16]
    74e4:	2202      	movs	r2, #2
    74e6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    74e8:	7bfb      	ldrb	r3, [r7, #15]
    74ea:	2100      	movs	r1, #0
    74ec:	4618      	mov	r0, r3
    74ee:	4b1c      	ldr	r3, [pc, #112]	; (7560 <_usb_d_cb_trans_done+0xdc>)
    74f0:	4798      	blx	r3
    74f2:	e025      	b.n	7540 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    74f4:	693b      	ldr	r3, [r7, #16]
    74f6:	2205      	movs	r2, #5
    74f8:	709a      	strb	r2, [r3, #2]
    74fa:	e021      	b.n	7540 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    74fc:	68bb      	ldr	r3, [r7, #8]
    74fe:	2b02      	cmp	r3, #2
    7500:	d10e      	bne.n	7520 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7502:	693b      	ldr	r3, [r7, #16]
    7504:	2204      	movs	r2, #4
    7506:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7508:	693b      	ldr	r3, [r7, #16]
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	2b00      	cmp	r3, #0
    750e:	d103      	bne.n	7518 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7510:	693b      	ldr	r3, [r7, #16]
    7512:	2202      	movs	r2, #2
    7514:	709a      	strb	r2, [r3, #2]
			return;
    7516:	e01a      	b.n	754e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7518:	693b      	ldr	r3, [r7, #16]
    751a:	2201      	movs	r2, #1
    751c:	709a      	strb	r2, [r3, #2]
    751e:	e00f      	b.n	7540 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    7520:	68bb      	ldr	r3, [r7, #8]
    7522:	2b03      	cmp	r3, #3
    7524:	d106      	bne.n	7534 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    7526:	693b      	ldr	r3, [r7, #16]
    7528:	2200      	movs	r2, #0
    752a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    752c:	693b      	ldr	r3, [r7, #16]
    752e:	2205      	movs	r2, #5
    7530:	70da      	strb	r2, [r3, #3]
    7532:	e005      	b.n	7540 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    7534:	693b      	ldr	r3, [r7, #16]
    7536:	2206      	movs	r2, #6
    7538:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    753a:	693b      	ldr	r3, [r7, #16]
    753c:	2206      	movs	r2, #6
    753e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    7540:	693b      	ldr	r3, [r7, #16]
    7542:	69db      	ldr	r3, [r3, #28]
    7544:	693a      	ldr	r2, [r7, #16]
    7546:	78d1      	ldrb	r1, [r2, #3]
    7548:	687a      	ldr	r2, [r7, #4]
    754a:	7bf8      	ldrb	r0, [r7, #15]
    754c:	4798      	blx	r3
}
    754e:	3718      	adds	r7, #24
    7550:	46bd      	mov	sp, r7
    7552:	bd80      	pop	{r7, pc}
    7554:	000071b9 	.word	0x000071b9
    7558:	200017fc 	.word	0x200017fc
    755c:	000073c1 	.word	0x000073c1
    7560:	0000f0fd 	.word	0x0000f0fd

00007564 <usb_d_init>:

int32_t usb_d_init(void)
{
    7564:	b580      	push	{r7, lr}
    7566:	b082      	sub	sp, #8
    7568:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    756a:	4b21      	ldr	r3, [pc, #132]	; (75f0 <usb_d_init+0x8c>)
    756c:	4798      	blx	r3
    756e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    7570:	683b      	ldr	r3, [r7, #0]
    7572:	2b00      	cmp	r3, #0
    7574:	da01      	bge.n	757a <usb_d_init+0x16>
		return rc;
    7576:	683b      	ldr	r3, [r7, #0]
    7578:	e036      	b.n	75e8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    757a:	2280      	movs	r2, #128	; 0x80
    757c:	2100      	movs	r1, #0
    757e:	481d      	ldr	r0, [pc, #116]	; (75f4 <usb_d_init+0x90>)
    7580:	4b1d      	ldr	r3, [pc, #116]	; (75f8 <usb_d_init+0x94>)
    7582:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7584:	2300      	movs	r3, #0
    7586:	71fb      	strb	r3, [r7, #7]
    7588:	e01e      	b.n	75c8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    758a:	79fb      	ldrb	r3, [r7, #7]
    758c:	4a19      	ldr	r2, [pc, #100]	; (75f4 <usb_d_init+0x90>)
    758e:	015b      	lsls	r3, r3, #5
    7590:	4413      	add	r3, r2
    7592:	3301      	adds	r3, #1
    7594:	22ff      	movs	r2, #255	; 0xff
    7596:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    7598:	79fb      	ldrb	r3, [r7, #7]
    759a:	4a16      	ldr	r2, [pc, #88]	; (75f4 <usb_d_init+0x90>)
    759c:	015b      	lsls	r3, r3, #5
    759e:	4413      	add	r3, r2
    75a0:	3314      	adds	r3, #20
    75a2:	4a16      	ldr	r2, [pc, #88]	; (75fc <usb_d_init+0x98>)
    75a4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    75a6:	79fb      	ldrb	r3, [r7, #7]
    75a8:	4a12      	ldr	r2, [pc, #72]	; (75f4 <usb_d_init+0x90>)
    75aa:	015b      	lsls	r3, r3, #5
    75ac:	4413      	add	r3, r2
    75ae:	3318      	adds	r3, #24
    75b0:	4a12      	ldr	r2, [pc, #72]	; (75fc <usb_d_init+0x98>)
    75b2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    75b4:	79fb      	ldrb	r3, [r7, #7]
    75b6:	4a0f      	ldr	r2, [pc, #60]	; (75f4 <usb_d_init+0x90>)
    75b8:	015b      	lsls	r3, r3, #5
    75ba:	4413      	add	r3, r2
    75bc:	331c      	adds	r3, #28
    75be:	4a0f      	ldr	r2, [pc, #60]	; (75fc <usb_d_init+0x98>)
    75c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    75c2:	79fb      	ldrb	r3, [r7, #7]
    75c4:	3301      	adds	r3, #1
    75c6:	71fb      	strb	r3, [r7, #7]
    75c8:	79fb      	ldrb	r3, [r7, #7]
    75ca:	2b03      	cmp	r3, #3
    75cc:	d9dd      	bls.n	758a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    75ce:	490c      	ldr	r1, [pc, #48]	; (7600 <usb_d_init+0x9c>)
    75d0:	2000      	movs	r0, #0
    75d2:	4b0c      	ldr	r3, [pc, #48]	; (7604 <usb_d_init+0xa0>)
    75d4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    75d6:	490c      	ldr	r1, [pc, #48]	; (7608 <usb_d_init+0xa4>)
    75d8:	2001      	movs	r0, #1
    75da:	4b0a      	ldr	r3, [pc, #40]	; (7604 <usb_d_init+0xa0>)
    75dc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    75de:	490b      	ldr	r1, [pc, #44]	; (760c <usb_d_init+0xa8>)
    75e0:	2002      	movs	r0, #2
    75e2:	4b08      	ldr	r3, [pc, #32]	; (7604 <usb_d_init+0xa0>)
    75e4:	4798      	blx	r3
	return ERR_NONE;
    75e6:	2300      	movs	r3, #0
}
    75e8:	4618      	mov	r0, r3
    75ea:	3708      	adds	r7, #8
    75ec:	46bd      	mov	sp, r7
    75ee:	bd80      	pop	{r7, pc}
    75f0:	0000e945 	.word	0x0000e945
    75f4:	200017fc 	.word	0x200017fc
    75f8:	0001c655 	.word	0x0001c655
    75fc:	0000728d 	.word	0x0000728d
    7600:	000072a9 	.word	0x000072a9
    7604:	0000f58d 	.word	0x0000f58d
    7608:	00007371 	.word	0x00007371
    760c:	00007485 	.word	0x00007485

00007610 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7610:	b580      	push	{r7, lr}
    7612:	b082      	sub	sp, #8
    7614:	af00      	add	r7, sp, #0
    7616:	4603      	mov	r3, r0
    7618:	6039      	str	r1, [r7, #0]
    761a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    761c:	79fb      	ldrb	r3, [r7, #7]
    761e:	6839      	ldr	r1, [r7, #0]
    7620:	4618      	mov	r0, r3
    7622:	4b03      	ldr	r3, [pc, #12]	; (7630 <usb_d_register_callback+0x20>)
    7624:	4798      	blx	r3
}
    7626:	bf00      	nop
    7628:	3708      	adds	r7, #8
    762a:	46bd      	mov	sp, r7
    762c:	bd80      	pop	{r7, pc}
    762e:	bf00      	nop
    7630:	0000f545 	.word	0x0000f545

00007634 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    7634:	b580      	push	{r7, lr}
    7636:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    7638:	4b02      	ldr	r3, [pc, #8]	; (7644 <usb_d_enable+0x10>)
    763a:	4798      	blx	r3
    763c:	4603      	mov	r3, r0
}
    763e:	4618      	mov	r0, r3
    7640:	bd80      	pop	{r7, pc}
    7642:	bf00      	nop
    7644:	0000ea35 	.word	0x0000ea35

00007648 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    7648:	b580      	push	{r7, lr}
    764a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    764c:	4b01      	ldr	r3, [pc, #4]	; (7654 <usb_d_attach+0xc>)
    764e:	4798      	blx	r3
}
    7650:	bf00      	nop
    7652:	bd80      	pop	{r7, pc}
    7654:	0000eab9 	.word	0x0000eab9

00007658 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    7658:	b580      	push	{r7, lr}
    765a:	b082      	sub	sp, #8
    765c:	af00      	add	r7, sp, #0
    765e:	4603      	mov	r3, r0
    7660:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    7662:	79fb      	ldrb	r3, [r7, #7]
    7664:	4618      	mov	r0, r3
    7666:	4b03      	ldr	r3, [pc, #12]	; (7674 <usb_d_set_address+0x1c>)
    7668:	4798      	blx	r3
}
    766a:	bf00      	nop
    766c:	3708      	adds	r7, #8
    766e:	46bd      	mov	sp, r7
    7670:	bd80      	pop	{r7, pc}
    7672:	bf00      	nop
    7674:	0000eacd 	.word	0x0000eacd

00007678 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    7678:	b580      	push	{r7, lr}
    767a:	b082      	sub	sp, #8
    767c:	af00      	add	r7, sp, #0
    767e:	4603      	mov	r3, r0
    7680:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7682:	79fb      	ldrb	r3, [r7, #7]
    7684:	b29b      	uxth	r3, r3
    7686:	461a      	mov	r2, r3
    7688:	2100      	movs	r1, #0
    768a:	2000      	movs	r0, #0
    768c:	4b03      	ldr	r3, [pc, #12]	; (769c <usb_d_ep0_init+0x24>)
    768e:	4798      	blx	r3
    7690:	4603      	mov	r3, r0
}
    7692:	4618      	mov	r0, r3
    7694:	3708      	adds	r7, #8
    7696:	46bd      	mov	sp, r7
    7698:	bd80      	pop	{r7, pc}
    769a:	bf00      	nop
    769c:	000076a1 	.word	0x000076a1

000076a0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    76a0:	b580      	push	{r7, lr}
    76a2:	b086      	sub	sp, #24
    76a4:	af00      	add	r7, sp, #0
    76a6:	4603      	mov	r3, r0
    76a8:	71fb      	strb	r3, [r7, #7]
    76aa:	460b      	mov	r3, r1
    76ac:	71bb      	strb	r3, [r7, #6]
    76ae:	4613      	mov	r3, r2
    76b0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    76b2:	79fb      	ldrb	r3, [r7, #7]
    76b4:	4618      	mov	r0, r3
    76b6:	4b1e      	ldr	r3, [pc, #120]	; (7730 <usb_d_ep_init+0x90>)
    76b8:	4798      	blx	r3
    76ba:	4603      	mov	r3, r0
    76bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    76be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    76c2:	015b      	lsls	r3, r3, #5
    76c4:	4a1b      	ldr	r2, [pc, #108]	; (7734 <usb_d_ep_init+0x94>)
    76c6:	4413      	add	r3, r2
    76c8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    76ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    76ce:	2b00      	cmp	r3, #0
    76d0:	db02      	blt.n	76d8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    76d2:	f06f 0313 	mvn.w	r3, #19
    76d6:	e027      	b.n	7728 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    76d8:	20ff      	movs	r0, #255	; 0xff
    76da:	4b15      	ldr	r3, [pc, #84]	; (7730 <usb_d_ep_init+0x90>)
    76dc:	4798      	blx	r3
    76de:	4603      	mov	r3, r0
    76e0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    76e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    76e6:	2b00      	cmp	r3, #0
    76e8:	da02      	bge.n	76f0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    76ea:	f06f 0314 	mvn.w	r3, #20
    76ee:	e01b      	b.n	7728 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    76f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    76f4:	015b      	lsls	r3, r3, #5
    76f6:	4a0f      	ldr	r2, [pc, #60]	; (7734 <usb_d_ep_init+0x94>)
    76f8:	4413      	add	r3, r2
    76fa:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    76fc:	88ba      	ldrh	r2, [r7, #4]
    76fe:	79b9      	ldrb	r1, [r7, #6]
    7700:	79fb      	ldrb	r3, [r7, #7]
    7702:	4618      	mov	r0, r3
    7704:	4b0c      	ldr	r3, [pc, #48]	; (7738 <usb_d_ep_init+0x98>)
    7706:	4798      	blx	r3
    7708:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    770a:	68fb      	ldr	r3, [r7, #12]
    770c:	2b00      	cmp	r3, #0
    770e:	da01      	bge.n	7714 <usb_d_ep_init+0x74>
		return rc;
    7710:	68fb      	ldr	r3, [r7, #12]
    7712:	e009      	b.n	7728 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7714:	693b      	ldr	r3, [r7, #16]
    7716:	79fa      	ldrb	r2, [r7, #7]
    7718:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    771a:	79bb      	ldrb	r3, [r7, #6]
    771c:	f003 0303 	and.w	r3, r3, #3
    7720:	b2da      	uxtb	r2, r3
    7722:	693b      	ldr	r3, [r7, #16]
    7724:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    7726:	2300      	movs	r3, #0
}
    7728:	4618      	mov	r0, r3
    772a:	3718      	adds	r7, #24
    772c:	46bd      	mov	sp, r7
    772e:	bd80      	pop	{r7, pc}
    7730:	000071b9 	.word	0x000071b9
    7734:	200017fc 	.word	0x200017fc
    7738:	0000eb6d 	.word	0x0000eb6d

0000773c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    773c:	b580      	push	{r7, lr}
    773e:	b084      	sub	sp, #16
    7740:	af00      	add	r7, sp, #0
    7742:	4603      	mov	r3, r0
    7744:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7746:	79fb      	ldrb	r3, [r7, #7]
    7748:	4618      	mov	r0, r3
    774a:	4b0d      	ldr	r3, [pc, #52]	; (7780 <usb_d_ep_deinit+0x44>)
    774c:	4798      	blx	r3
    774e:	4603      	mov	r3, r0
    7750:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7752:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7756:	015b      	lsls	r3, r3, #5
    7758:	4a0a      	ldr	r2, [pc, #40]	; (7784 <usb_d_ep_deinit+0x48>)
    775a:	4413      	add	r3, r2
    775c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7762:	2b00      	cmp	r3, #0
    7764:	db07      	blt.n	7776 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    7766:	79fb      	ldrb	r3, [r7, #7]
    7768:	4618      	mov	r0, r3
    776a:	4b07      	ldr	r3, [pc, #28]	; (7788 <usb_d_ep_deinit+0x4c>)
    776c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    776e:	68bb      	ldr	r3, [r7, #8]
    7770:	22ff      	movs	r2, #255	; 0xff
    7772:	705a      	strb	r2, [r3, #1]
    7774:	e000      	b.n	7778 <usb_d_ep_deinit+0x3c>
		return;
    7776:	bf00      	nop
}
    7778:	3710      	adds	r7, #16
    777a:	46bd      	mov	sp, r7
    777c:	bd80      	pop	{r7, pc}
    777e:	bf00      	nop
    7780:	000071b9 	.word	0x000071b9
    7784:	200017fc 	.word	0x200017fc
    7788:	0000eca1 	.word	0x0000eca1

0000778c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    778c:	b580      	push	{r7, lr}
    778e:	b086      	sub	sp, #24
    7790:	af00      	add	r7, sp, #0
    7792:	4603      	mov	r3, r0
    7794:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7796:	79fb      	ldrb	r3, [r7, #7]
    7798:	4618      	mov	r0, r3
    779a:	4b15      	ldr	r3, [pc, #84]	; (77f0 <usb_d_ep_enable+0x64>)
    779c:	4798      	blx	r3
    779e:	4603      	mov	r3, r0
    77a0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    77a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    77a6:	015b      	lsls	r3, r3, #5
    77a8:	4a12      	ldr	r2, [pc, #72]	; (77f4 <usb_d_ep_enable+0x68>)
    77aa:	4413      	add	r3, r2
    77ac:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    77ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    77b2:	2b00      	cmp	r3, #0
    77b4:	da02      	bge.n	77bc <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    77b6:	f06f 0311 	mvn.w	r3, #17
    77ba:	e014      	b.n	77e6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    77bc:	693b      	ldr	r3, [r7, #16]
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	2b00      	cmp	r3, #0
    77c2:	d101      	bne.n	77c8 <usb_d_ep_enable+0x3c>
    77c4:	2202      	movs	r2, #2
    77c6:	e000      	b.n	77ca <usb_d_ep_enable+0x3e>
    77c8:	2201      	movs	r2, #1
    77ca:	693b      	ldr	r3, [r7, #16]
    77cc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    77ce:	79fb      	ldrb	r3, [r7, #7]
    77d0:	4618      	mov	r0, r3
    77d2:	4b09      	ldr	r3, [pc, #36]	; (77f8 <usb_d_ep_enable+0x6c>)
    77d4:	4798      	blx	r3
    77d6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    77d8:	68fb      	ldr	r3, [r7, #12]
    77da:	2b00      	cmp	r3, #0
    77dc:	da02      	bge.n	77e4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    77de:	693b      	ldr	r3, [r7, #16]
    77e0:	2200      	movs	r2, #0
    77e2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    77e4:	68fb      	ldr	r3, [r7, #12]
}
    77e6:	4618      	mov	r0, r3
    77e8:	3718      	adds	r7, #24
    77ea:	46bd      	mov	sp, r7
    77ec:	bd80      	pop	{r7, pc}
    77ee:	bf00      	nop
    77f0:	000071b9 	.word	0x000071b9
    77f4:	200017fc 	.word	0x200017fc
    77f8:	0000ed85 	.word	0x0000ed85

000077fc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    77fc:	b590      	push	{r4, r7, lr}
    77fe:	b08d      	sub	sp, #52	; 0x34
    7800:	af02      	add	r7, sp, #8
    7802:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	7a1b      	ldrb	r3, [r3, #8]
    7808:	4618      	mov	r0, r3
    780a:	4b51      	ldr	r3, [pc, #324]	; (7950 <usb_d_ep_transfer+0x154>)
    780c:	4798      	blx	r3
    780e:	4603      	mov	r3, r0
    7810:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7812:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7816:	015b      	lsls	r3, r3, #5
    7818:	4a4e      	ldr	r2, [pc, #312]	; (7954 <usb_d_ep_transfer+0x158>)
    781a:	4413      	add	r3, r2
    781c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	7a1b      	ldrb	r3, [r3, #8]
    7822:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7826:	2b00      	cmp	r3, #0
    7828:	bf14      	ite	ne
    782a:	2301      	movne	r3, #1
    782c:	2300      	moveq	r3, #0
    782e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7832:	687b      	ldr	r3, [r7, #4]
    7834:	7a5b      	ldrb	r3, [r3, #9]
    7836:	2b00      	cmp	r3, #0
    7838:	bf14      	ite	ne
    783a:	2301      	movne	r3, #1
    783c:	2300      	moveq	r3, #0
    783e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	685b      	ldr	r3, [r3, #4]
    7846:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7848:	f997 301f 	ldrsb.w	r3, [r7, #31]
    784c:	2b00      	cmp	r3, #0
    784e:	da02      	bge.n	7856 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7850:	f06f 0311 	mvn.w	r3, #17
    7854:	e077      	b.n	7946 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7856:	f107 0308 	add.w	r3, r7, #8
    785a:	4618      	mov	r0, r3
    785c:	4b3e      	ldr	r3, [pc, #248]	; (7958 <usb_d_ep_transfer+0x15c>)
    785e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7860:	69bb      	ldr	r3, [r7, #24]
    7862:	789b      	ldrb	r3, [r3, #2]
    7864:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7866:	7bfb      	ldrb	r3, [r7, #15]
    7868:	b2db      	uxtb	r3, r3
    786a:	2b01      	cmp	r3, #1
    786c:	d10c      	bne.n	7888 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    786e:	69bb      	ldr	r3, [r7, #24]
    7870:	2203      	movs	r2, #3
    7872:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7874:	f107 0308 	add.w	r3, r7, #8
    7878:	4618      	mov	r0, r3
    787a:	4b38      	ldr	r3, [pc, #224]	; (795c <usb_d_ep_transfer+0x160>)
    787c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    787e:	69bb      	ldr	r3, [r7, #24]
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2b00      	cmp	r3, #0
    7884:	d151      	bne.n	792a <usb_d_ep_transfer+0x12e>
    7886:	e017      	b.n	78b8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7888:	f107 0308 	add.w	r3, r7, #8
    788c:	4618      	mov	r0, r3
    788e:	4b33      	ldr	r3, [pc, #204]	; (795c <usb_d_ep_transfer+0x160>)
    7890:	4798      	blx	r3
		switch (state) {
    7892:	7bfb      	ldrb	r3, [r7, #15]
    7894:	b2db      	uxtb	r3, r3
    7896:	2b05      	cmp	r3, #5
    7898:	d004      	beq.n	78a4 <usb_d_ep_transfer+0xa8>
    789a:	2b06      	cmp	r3, #6
    789c:	d004      	beq.n	78a8 <usb_d_ep_transfer+0xac>
    789e:	2b00      	cmp	r3, #0
    78a0:	d005      	beq.n	78ae <usb_d_ep_transfer+0xb2>
    78a2:	e007      	b.n	78b4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    78a4:	2302      	movs	r3, #2
    78a6:	e04e      	b.n	7946 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    78a8:	f06f 030f 	mvn.w	r3, #15
    78ac:	e04b      	b.n	7946 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    78ae:	f06f 0312 	mvn.w	r3, #18
    78b2:	e048      	b.n	7946 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    78b4:	2301      	movs	r3, #1
    78b6:	e046      	b.n	7946 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    78b8:	69bb      	ldr	r3, [r7, #24]
    78ba:	7c9b      	ldrb	r3, [r3, #18]
    78bc:	b29a      	uxth	r2, r3
    78be:	69bb      	ldr	r3, [r7, #24]
    78c0:	7cdb      	ldrb	r3, [r3, #19]
    78c2:	b29b      	uxth	r3, r3
    78c4:	021b      	lsls	r3, r3, #8
    78c6:	b29b      	uxth	r3, r3
    78c8:	4413      	add	r3, r2
    78ca:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    78cc:	8afb      	ldrh	r3, [r7, #22]
    78ce:	2b00      	cmp	r3, #0
    78d0:	d10b      	bne.n	78ea <usb_d_ep_transfer+0xee>
			dir                 = true;
    78d2:	2301      	movs	r3, #1
    78d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    78d8:	2300      	movs	r3, #0
    78da:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    78dc:	2301      	movs	r3, #1
    78de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    78e2:	69bb      	ldr	r3, [r7, #24]
    78e4:	2204      	movs	r2, #4
    78e6:	709a      	strb	r2, [r3, #2]
    78e8:	e01f      	b.n	792a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    78ea:	69bb      	ldr	r3, [r7, #24]
    78ec:	7b1b      	ldrb	r3, [r3, #12]
    78ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    78f2:	2b00      	cmp	r3, #0
    78f4:	bf14      	ite	ne
    78f6:	2301      	movne	r3, #1
    78f8:	2300      	moveq	r3, #0
    78fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    78fe:	8afa      	ldrh	r2, [r7, #22]
    7900:	6a3b      	ldr	r3, [r7, #32]
    7902:	429a      	cmp	r2, r3
    7904:	d201      	bcs.n	790a <usb_d_ep_transfer+0x10e>
				len = req_len;
    7906:	8afb      	ldrh	r3, [r7, #22]
    7908:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    790a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    790e:	2b00      	cmp	r3, #0
    7910:	d008      	beq.n	7924 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7912:	8afa      	ldrh	r2, [r7, #22]
    7914:	6a3b      	ldr	r3, [r7, #32]
    7916:	429a      	cmp	r2, r3
    7918:	bf8c      	ite	hi
    791a:	2301      	movhi	r3, #1
    791c:	2300      	movls	r3, #0
    791e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7922:	e002      	b.n	792a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7924:	2300      	movs	r3, #0
    7926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	7a18      	ldrb	r0, [r3, #8]
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	681a      	ldr	r2, [r3, #0]
    7932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7936:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    793a:	9300      	str	r3, [sp, #0]
    793c:	6a3b      	ldr	r3, [r7, #32]
    793e:	4c08      	ldr	r4, [pc, #32]	; (7960 <usb_d_ep_transfer+0x164>)
    7940:	47a0      	blx	r4
    7942:	6138      	str	r0, [r7, #16]
	return rc;
    7944:	693b      	ldr	r3, [r7, #16]
}
    7946:	4618      	mov	r0, r3
    7948:	372c      	adds	r7, #44	; 0x2c
    794a:	46bd      	mov	sp, r7
    794c:	bd90      	pop	{r4, r7, pc}
    794e:	bf00      	nop
    7950:	000071b9 	.word	0x000071b9
    7954:	200017fc 	.word	0x200017fc
    7958:	0000ff79 	.word	0x0000ff79
    795c:	0000ff9f 	.word	0x0000ff9f
    7960:	00007239 	.word	0x00007239

00007964 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7964:	b580      	push	{r7, lr}
    7966:	b084      	sub	sp, #16
    7968:	af00      	add	r7, sp, #0
    796a:	4603      	mov	r3, r0
    796c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    796e:	79fb      	ldrb	r3, [r7, #7]
    7970:	4618      	mov	r0, r3
    7972:	4b0e      	ldr	r3, [pc, #56]	; (79ac <usb_d_ep_abort+0x48>)
    7974:	4798      	blx	r3
    7976:	4603      	mov	r3, r0
    7978:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    797a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    797e:	015b      	lsls	r3, r3, #5
    7980:	4a0b      	ldr	r2, [pc, #44]	; (79b0 <usb_d_ep_abort+0x4c>)
    7982:	4413      	add	r3, r2
    7984:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7986:	f997 300f 	ldrsb.w	r3, [r7, #15]
    798a:	2b00      	cmp	r3, #0
    798c:	db0a      	blt.n	79a4 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    798e:	79fb      	ldrb	r3, [r7, #7]
    7990:	4618      	mov	r0, r3
    7992:	4b08      	ldr	r3, [pc, #32]	; (79b4 <usb_d_ep_abort+0x50>)
    7994:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7996:	68bb      	ldr	r3, [r7, #8]
    7998:	2201      	movs	r2, #1
    799a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    799c:	68bb      	ldr	r3, [r7, #8]
    799e:	2204      	movs	r2, #4
    79a0:	70da      	strb	r2, [r3, #3]
    79a2:	e000      	b.n	79a6 <usb_d_ep_abort+0x42>
		return;
    79a4:	bf00      	nop
}
    79a6:	3710      	adds	r7, #16
    79a8:	46bd      	mov	sp, r7
    79aa:	bd80      	pop	{r7, pc}
    79ac:	000071b9 	.word	0x000071b9
    79b0:	200017fc 	.word	0x200017fc
    79b4:	0000f4f1 	.word	0x0000f4f1

000079b8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    79b8:	b580      	push	{r7, lr}
    79ba:	b086      	sub	sp, #24
    79bc:	af00      	add	r7, sp, #0
    79be:	4603      	mov	r3, r0
    79c0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    79c2:	79fb      	ldrb	r3, [r7, #7]
    79c4:	4618      	mov	r0, r3
    79c6:	4b1a      	ldr	r3, [pc, #104]	; (7a30 <_usb_d_ep_halt_clr+0x78>)
    79c8:	4798      	blx	r3
    79ca:	4603      	mov	r3, r0
    79cc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79d2:	015b      	lsls	r3, r3, #5
    79d4:	4a17      	ldr	r2, [pc, #92]	; (7a34 <_usb_d_ep_halt_clr+0x7c>)
    79d6:	4413      	add	r3, r2
    79d8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    79da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79de:	2b00      	cmp	r3, #0
    79e0:	da02      	bge.n	79e8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    79e2:	f06f 0311 	mvn.w	r3, #17
    79e6:	e01f      	b.n	7a28 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    79e8:	79fb      	ldrb	r3, [r7, #7]
    79ea:	2102      	movs	r1, #2
    79ec:	4618      	mov	r0, r3
    79ee:	4b12      	ldr	r3, [pc, #72]	; (7a38 <_usb_d_ep_halt_clr+0x80>)
    79f0:	4798      	blx	r3
    79f2:	4603      	mov	r3, r0
    79f4:	2b00      	cmp	r3, #0
    79f6:	d016      	beq.n	7a26 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    79f8:	79fb      	ldrb	r3, [r7, #7]
    79fa:	2100      	movs	r1, #0
    79fc:	4618      	mov	r0, r3
    79fe:	4b0e      	ldr	r3, [pc, #56]	; (7a38 <_usb_d_ep_halt_clr+0x80>)
    7a00:	4798      	blx	r3
    7a02:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7a04:	68fb      	ldr	r3, [r7, #12]
    7a06:	2b00      	cmp	r3, #0
    7a08:	da01      	bge.n	7a0e <_usb_d_ep_halt_clr+0x56>
			return rc;
    7a0a:	68fb      	ldr	r3, [r7, #12]
    7a0c:	e00c      	b.n	7a28 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7a0e:	693b      	ldr	r3, [r7, #16]
    7a10:	2201      	movs	r2, #1
    7a12:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7a14:	693b      	ldr	r3, [r7, #16]
    7a16:	2203      	movs	r2, #3
    7a18:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7a1a:	693b      	ldr	r3, [r7, #16]
    7a1c:	69db      	ldr	r3, [r3, #28]
    7a1e:	79f8      	ldrb	r0, [r7, #7]
    7a20:	2200      	movs	r2, #0
    7a22:	2103      	movs	r1, #3
    7a24:	4798      	blx	r3
	}
	return ERR_NONE;
    7a26:	2300      	movs	r3, #0
}
    7a28:	4618      	mov	r0, r3
    7a2a:	3718      	adds	r7, #24
    7a2c:	46bd      	mov	sp, r7
    7a2e:	bd80      	pop	{r7, pc}
    7a30:	000071b9 	.word	0x000071b9
    7a34:	200017fc 	.word	0x200017fc
    7a38:	0000f0fd 	.word	0x0000f0fd

00007a3c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7a3c:	b580      	push	{r7, lr}
    7a3e:	b082      	sub	sp, #8
    7a40:	af00      	add	r7, sp, #0
    7a42:	4603      	mov	r3, r0
    7a44:	460a      	mov	r2, r1
    7a46:	71fb      	strb	r3, [r7, #7]
    7a48:	4613      	mov	r3, r2
    7a4a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    7a4c:	79bb      	ldrb	r3, [r7, #6]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d105      	bne.n	7a5e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    7a52:	79fb      	ldrb	r3, [r7, #7]
    7a54:	4618      	mov	r0, r3
    7a56:	4b0c      	ldr	r3, [pc, #48]	; (7a88 <usb_d_ep_halt+0x4c>)
    7a58:	4798      	blx	r3
    7a5a:	4603      	mov	r3, r0
    7a5c:	e00f      	b.n	7a7e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    7a5e:	79bb      	ldrb	r3, [r7, #6]
    7a60:	2b01      	cmp	r3, #1
    7a62:	d106      	bne.n	7a72 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7a64:	79fb      	ldrb	r3, [r7, #7]
    7a66:	2101      	movs	r1, #1
    7a68:	4618      	mov	r0, r3
    7a6a:	4b08      	ldr	r3, [pc, #32]	; (7a8c <usb_d_ep_halt+0x50>)
    7a6c:	4798      	blx	r3
    7a6e:	4603      	mov	r3, r0
    7a70:	e005      	b.n	7a7e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7a72:	79fb      	ldrb	r3, [r7, #7]
    7a74:	2102      	movs	r1, #2
    7a76:	4618      	mov	r0, r3
    7a78:	4b04      	ldr	r3, [pc, #16]	; (7a8c <usb_d_ep_halt+0x50>)
    7a7a:	4798      	blx	r3
    7a7c:	4603      	mov	r3, r0
	}
}
    7a7e:	4618      	mov	r0, r3
    7a80:	3708      	adds	r7, #8
    7a82:	46bd      	mov	sp, r7
    7a84:	bd80      	pop	{r7, pc}
    7a86:	bf00      	nop
    7a88:	000079b9 	.word	0x000079b9
    7a8c:	0000f0fd 	.word	0x0000f0fd

00007a90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b086      	sub	sp, #24
    7a94:	af00      	add	r7, sp, #0
    7a96:	4603      	mov	r3, r0
    7a98:	603a      	str	r2, [r7, #0]
    7a9a:	71fb      	strb	r3, [r7, #7]
    7a9c:	460b      	mov	r3, r1
    7a9e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7aa0:	79fb      	ldrb	r3, [r7, #7]
    7aa2:	4618      	mov	r0, r3
    7aa4:	4b16      	ldr	r3, [pc, #88]	; (7b00 <usb_d_ep_register_callback+0x70>)
    7aa6:	4798      	blx	r3
    7aa8:	4603      	mov	r3, r0
    7aaa:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7ab0:	015b      	lsls	r3, r3, #5
    7ab2:	4a14      	ldr	r2, [pc, #80]	; (7b04 <usb_d_ep_register_callback+0x74>)
    7ab4:	4413      	add	r3, r2
    7ab6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    7ab8:	683b      	ldr	r3, [r7, #0]
    7aba:	2b00      	cmp	r3, #0
    7abc:	d001      	beq.n	7ac2 <usb_d_ep_register_callback+0x32>
    7abe:	683b      	ldr	r3, [r7, #0]
    7ac0:	e000      	b.n	7ac4 <usb_d_ep_register_callback+0x34>
    7ac2:	4b11      	ldr	r3, [pc, #68]	; (7b08 <usb_d_ep_register_callback+0x78>)
    7ac4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    7ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7aca:	2b00      	cmp	r3, #0
    7acc:	db13      	blt.n	7af6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7ace:	79bb      	ldrb	r3, [r7, #6]
    7ad0:	2b01      	cmp	r3, #1
    7ad2:	d008      	beq.n	7ae6 <usb_d_ep_register_callback+0x56>
    7ad4:	2b02      	cmp	r3, #2
    7ad6:	d00a      	beq.n	7aee <usb_d_ep_register_callback+0x5e>
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d000      	beq.n	7ade <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7adc:	e00c      	b.n	7af8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7ade:	693b      	ldr	r3, [r7, #16]
    7ae0:	68fa      	ldr	r2, [r7, #12]
    7ae2:	615a      	str	r2, [r3, #20]
		break;
    7ae4:	e008      	b.n	7af8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7ae6:	693b      	ldr	r3, [r7, #16]
    7ae8:	68fa      	ldr	r2, [r7, #12]
    7aea:	619a      	str	r2, [r3, #24]
		break;
    7aec:	e004      	b.n	7af8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7aee:	693b      	ldr	r3, [r7, #16]
    7af0:	68fa      	ldr	r2, [r7, #12]
    7af2:	61da      	str	r2, [r3, #28]
		break;
    7af4:	e000      	b.n	7af8 <usb_d_ep_register_callback+0x68>
		return;
    7af6:	bf00      	nop
	}
}
    7af8:	3718      	adds	r7, #24
    7afa:	46bd      	mov	sp, r7
    7afc:	bd80      	pop	{r7, pc}
    7afe:	bf00      	nop
    7b00:	000071b9 	.word	0x000071b9
    7b04:	200017fc 	.word	0x200017fc
    7b08:	0000728d 	.word	0x0000728d

00007b0c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7b0c:	b480      	push	{r7}
    7b0e:	b085      	sub	sp, #20
    7b10:	af00      	add	r7, sp, #0
    7b12:	4603      	mov	r3, r0
    7b14:	60b9      	str	r1, [r7, #8]
    7b16:	607a      	str	r2, [r7, #4]
    7b18:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    7b1a:	7bfb      	ldrb	r3, [r7, #15]
    7b1c:	f083 0301 	eor.w	r3, r3, #1
    7b20:	b2db      	uxtb	r3, r3
    7b22:	2b00      	cmp	r3, #0
    7b24:	d000      	beq.n	7b28 <assert+0x1c>
		__asm("BKPT #0");
    7b26:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    7b28:	bf00      	nop
    7b2a:	3714      	adds	r7, #20
    7b2c:	46bd      	mov	sp, r7
    7b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b32:	4770      	bx	lr

00007b34 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7b34:	b480      	push	{r7}
    7b36:	b085      	sub	sp, #20
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
    7b3c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	681b      	ldr	r3, [r3, #0]
    7b42:	60fb      	str	r3, [r7, #12]
    7b44:	e008      	b.n	7b58 <is_list_element+0x24>
		if (it == element) {
    7b46:	68fa      	ldr	r2, [r7, #12]
    7b48:	683b      	ldr	r3, [r7, #0]
    7b4a:	429a      	cmp	r2, r3
    7b4c:	d101      	bne.n	7b52 <is_list_element+0x1e>
			return true;
    7b4e:	2301      	movs	r3, #1
    7b50:	e006      	b.n	7b60 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    7b52:	68fb      	ldr	r3, [r7, #12]
    7b54:	681b      	ldr	r3, [r3, #0]
    7b56:	60fb      	str	r3, [r7, #12]
    7b58:	68fb      	ldr	r3, [r7, #12]
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d1f3      	bne.n	7b46 <is_list_element+0x12>
		}
	}

	return false;
    7b5e:	2300      	movs	r3, #0
}
    7b60:	4618      	mov	r0, r3
    7b62:	3714      	adds	r7, #20
    7b64:	46bd      	mov	sp, r7
    7b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b6a:	4770      	bx	lr

00007b6c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    7b6c:	b580      	push	{r7, lr}
    7b6e:	b082      	sub	sp, #8
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
    7b74:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    7b76:	6839      	ldr	r1, [r7, #0]
    7b78:	6878      	ldr	r0, [r7, #4]
    7b7a:	4b0f      	ldr	r3, [pc, #60]	; (7bb8 <list_insert_as_head+0x4c>)
    7b7c:	4798      	blx	r3
    7b7e:	4603      	mov	r3, r0
    7b80:	2b00      	cmp	r3, #0
    7b82:	bf14      	ite	ne
    7b84:	2301      	movne	r3, #1
    7b86:	2300      	moveq	r3, #0
    7b88:	b2db      	uxtb	r3, r3
    7b8a:	f083 0301 	eor.w	r3, r3, #1
    7b8e:	b2db      	uxtb	r3, r3
    7b90:	f003 0301 	and.w	r3, r3, #1
    7b94:	b2db      	uxtb	r3, r3
    7b96:	2239      	movs	r2, #57	; 0x39
    7b98:	4908      	ldr	r1, [pc, #32]	; (7bbc <list_insert_as_head+0x50>)
    7b9a:	4618      	mov	r0, r3
    7b9c:	4b08      	ldr	r3, [pc, #32]	; (7bc0 <list_insert_as_head+0x54>)
    7b9e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7ba0:	687b      	ldr	r3, [r7, #4]
    7ba2:	681a      	ldr	r2, [r3, #0]
    7ba4:	683b      	ldr	r3, [r7, #0]
    7ba6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	683a      	ldr	r2, [r7, #0]
    7bac:	601a      	str	r2, [r3, #0]
}
    7bae:	bf00      	nop
    7bb0:	3708      	adds	r7, #8
    7bb2:	46bd      	mov	sp, r7
    7bb4:	bd80      	pop	{r7, pc}
    7bb6:	bf00      	nop
    7bb8:	00007b35 	.word	0x00007b35
    7bbc:	0001cc40 	.word	0x0001cc40
    7bc0:	00007b0d 	.word	0x00007b0d

00007bc4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7bc4:	b480      	push	{r7}
    7bc6:	b083      	sub	sp, #12
    7bc8:	af00      	add	r7, sp, #0
    7bca:	6078      	str	r0, [r7, #4]
    7bcc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	681a      	ldr	r2, [r3, #0]
    7bd2:	683b      	ldr	r3, [r7, #0]
    7bd4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	683a      	ldr	r2, [r7, #0]
    7bda:	601a      	str	r2, [r3, #0]
}
    7bdc:	bf00      	nop
    7bde:	370c      	adds	r7, #12
    7be0:	46bd      	mov	sp, r7
    7be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7be6:	4770      	bx	lr

00007be8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    7be8:	b580      	push	{r7, lr}
    7bea:	b084      	sub	sp, #16
    7bec:	af00      	add	r7, sp, #0
    7bee:	6078      	str	r0, [r7, #4]
    7bf0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7bf2:	687b      	ldr	r3, [r7, #4]
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    7bf8:	6839      	ldr	r1, [r7, #0]
    7bfa:	6878      	ldr	r0, [r7, #4]
    7bfc:	4b16      	ldr	r3, [pc, #88]	; (7c58 <list_insert_at_end+0x70>)
    7bfe:	4798      	blx	r3
    7c00:	4603      	mov	r3, r0
    7c02:	2b00      	cmp	r3, #0
    7c04:	bf14      	ite	ne
    7c06:	2301      	movne	r3, #1
    7c08:	2300      	moveq	r3, #0
    7c0a:	b2db      	uxtb	r3, r3
    7c0c:	f083 0301 	eor.w	r3, r3, #1
    7c10:	b2db      	uxtb	r3, r3
    7c12:	f003 0301 	and.w	r3, r3, #1
    7c16:	b2db      	uxtb	r3, r3
    7c18:	224f      	movs	r2, #79	; 0x4f
    7c1a:	4910      	ldr	r1, [pc, #64]	; (7c5c <list_insert_at_end+0x74>)
    7c1c:	4618      	mov	r0, r3
    7c1e:	4b10      	ldr	r3, [pc, #64]	; (7c60 <list_insert_at_end+0x78>)
    7c20:	4798      	blx	r3

	if (!list->head) {
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	2b00      	cmp	r3, #0
    7c28:	d109      	bne.n	7c3e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	683a      	ldr	r2, [r7, #0]
    7c2e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7c30:	683b      	ldr	r3, [r7, #0]
    7c32:	2200      	movs	r2, #0
    7c34:	601a      	str	r2, [r3, #0]
		return;
    7c36:	e00c      	b.n	7c52 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    7c38:	68fb      	ldr	r3, [r7, #12]
    7c3a:	681b      	ldr	r3, [r3, #0]
    7c3c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7c3e:	68fb      	ldr	r3, [r7, #12]
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d1f8      	bne.n	7c38 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    7c46:	68fb      	ldr	r3, [r7, #12]
    7c48:	683a      	ldr	r2, [r7, #0]
    7c4a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    7c4c:	683b      	ldr	r3, [r7, #0]
    7c4e:	2200      	movs	r2, #0
    7c50:	601a      	str	r2, [r3, #0]
}
    7c52:	3710      	adds	r7, #16
    7c54:	46bd      	mov	sp, r7
    7c56:	bd80      	pop	{r7, pc}
    7c58:	00007b35 	.word	0x00007b35
    7c5c:	0001cc40 	.word	0x0001cc40
    7c60:	00007b0d 	.word	0x00007b0d

00007c64 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    7c64:	b480      	push	{r7}
    7c66:	b085      	sub	sp, #20
    7c68:	af00      	add	r7, sp, #0
    7c6a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	681b      	ldr	r3, [r3, #0]
    7c70:	2b00      	cmp	r3, #0
    7c72:	d009      	beq.n	7c88 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    7c7a:	687b      	ldr	r3, [r7, #4]
    7c7c:	681b      	ldr	r3, [r3, #0]
    7c7e:	681a      	ldr	r2, [r3, #0]
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    7c84:	68fb      	ldr	r3, [r7, #12]
    7c86:	e000      	b.n	7c8a <list_remove_head+0x26>
	}

	return NULL;
    7c88:	2300      	movs	r3, #0
}
    7c8a:	4618      	mov	r0, r3
    7c8c:	3714      	adds	r7, #20
    7c8e:	46bd      	mov	sp, r7
    7c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c94:	4770      	bx	lr

00007c96 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    7c96:	b480      	push	{r7}
    7c98:	b085      	sub	sp, #20
    7c9a:	af00      	add	r7, sp, #0
    7c9c:	6078      	str	r0, [r7, #4]
    7c9e:	6039      	str	r1, [r7, #0]
	if (!element) {
    7ca0:	683b      	ldr	r3, [r7, #0]
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d101      	bne.n	7caa <list_delete_element+0x14>
		return false;
    7ca6:	2300      	movs	r3, #0
    7ca8:	e024      	b.n	7cf4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	681a      	ldr	r2, [r3, #0]
    7cae:	683b      	ldr	r3, [r7, #0]
    7cb0:	429a      	cmp	r2, r3
    7cb2:	d106      	bne.n	7cc2 <list_delete_element+0x2c>
		list->head = list->head->next;
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	681b      	ldr	r3, [r3, #0]
    7cb8:	681a      	ldr	r2, [r3, #0]
    7cba:	687b      	ldr	r3, [r7, #4]
    7cbc:	601a      	str	r2, [r3, #0]
		return true;
    7cbe:	2301      	movs	r3, #1
    7cc0:	e018      	b.n	7cf4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7cc2:	687b      	ldr	r3, [r7, #4]
    7cc4:	681b      	ldr	r3, [r3, #0]
    7cc6:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    7cc8:	e002      	b.n	7cd0 <list_delete_element+0x3a>
			it = it->next;
    7cca:	68fb      	ldr	r3, [r7, #12]
    7ccc:	681b      	ldr	r3, [r3, #0]
    7cce:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7cd0:	68fb      	ldr	r3, [r7, #12]
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d004      	beq.n	7ce0 <list_delete_element+0x4a>
    7cd6:	68fb      	ldr	r3, [r7, #12]
    7cd8:	681a      	ldr	r2, [r3, #0]
    7cda:	683b      	ldr	r3, [r7, #0]
    7cdc:	429a      	cmp	r2, r3
    7cde:	d1f4      	bne.n	7cca <list_delete_element+0x34>
		}
		if (it) {
    7ce0:	68fb      	ldr	r3, [r7, #12]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d005      	beq.n	7cf2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    7ce6:	683b      	ldr	r3, [r7, #0]
    7ce8:	681a      	ldr	r2, [r3, #0]
    7cea:	68fb      	ldr	r3, [r7, #12]
    7cec:	601a      	str	r2, [r3, #0]
			return true;
    7cee:	2301      	movs	r3, #1
    7cf0:	e000      	b.n	7cf4 <list_delete_element+0x5e>
		}
	}

	return false;
    7cf2:	2300      	movs	r3, #0
}
    7cf4:	4618      	mov	r0, r3
    7cf6:	3714      	adds	r7, #20
    7cf8:	46bd      	mov	sp, r7
    7cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cfe:	4770      	bx	lr

00007d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7d00:	b480      	push	{r7}
    7d02:	b083      	sub	sp, #12
    7d04:	af00      	add	r7, sp, #0
    7d06:	4603      	mov	r3, r0
    7d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d0e:	2b00      	cmp	r3, #0
    7d10:	db0b      	blt.n	7d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d12:	4909      	ldr	r1, [pc, #36]	; (7d38 <__NVIC_EnableIRQ+0x38>)
    7d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d18:	095b      	lsrs	r3, r3, #5
    7d1a:	88fa      	ldrh	r2, [r7, #6]
    7d1c:	f002 021f 	and.w	r2, r2, #31
    7d20:	2001      	movs	r0, #1
    7d22:	fa00 f202 	lsl.w	r2, r0, r2
    7d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7d2a:	bf00      	nop
    7d2c:	370c      	adds	r7, #12
    7d2e:	46bd      	mov	sp, r7
    7d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d34:	4770      	bx	lr
    7d36:	bf00      	nop
    7d38:	e000e100 	.word	0xe000e100

00007d3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7d3c:	b480      	push	{r7}
    7d3e:	b083      	sub	sp, #12
    7d40:	af00      	add	r7, sp, #0
    7d42:	4603      	mov	r3, r0
    7d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	db10      	blt.n	7d70 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d4e:	490b      	ldr	r1, [pc, #44]	; (7d7c <__NVIC_DisableIRQ+0x40>)
    7d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d54:	095b      	lsrs	r3, r3, #5
    7d56:	88fa      	ldrh	r2, [r7, #6]
    7d58:	f002 021f 	and.w	r2, r2, #31
    7d5c:	2001      	movs	r0, #1
    7d5e:	fa00 f202 	lsl.w	r2, r0, r2
    7d62:	3320      	adds	r3, #32
    7d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d6c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    7d70:	bf00      	nop
    7d72:	370c      	adds	r7, #12
    7d74:	46bd      	mov	sp, r7
    7d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7a:	4770      	bx	lr
    7d7c:	e000e100 	.word	0xe000e100

00007d80 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    7d80:	b480      	push	{r7}
    7d82:	b083      	sub	sp, #12
    7d84:	af00      	add	r7, sp, #0
    7d86:	4603      	mov	r3, r0
    7d88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d8e:	2b00      	cmp	r3, #0
    7d90:	db0c      	blt.n	7dac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d92:	4909      	ldr	r1, [pc, #36]	; (7db8 <__NVIC_ClearPendingIRQ+0x38>)
    7d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d98:	095b      	lsrs	r3, r3, #5
    7d9a:	88fa      	ldrh	r2, [r7, #6]
    7d9c:	f002 021f 	and.w	r2, r2, #31
    7da0:	2001      	movs	r0, #1
    7da2:	fa00 f202 	lsl.w	r2, r0, r2
    7da6:	3360      	adds	r3, #96	; 0x60
    7da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7dac:	bf00      	nop
    7dae:	370c      	adds	r7, #12
    7db0:	46bd      	mov	sp, r7
    7db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db6:	4770      	bx	lr
    7db8:	e000e100 	.word	0xe000e100

00007dbc <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    7dbc:	b480      	push	{r7}
    7dbe:	b083      	sub	sp, #12
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    7dc4:	687b      	ldr	r3, [r7, #4]
    7dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7dc8:	095b      	lsrs	r3, r3, #5
    7dca:	f003 0301 	and.w	r3, r3, #1
    7dce:	2b00      	cmp	r3, #0
    7dd0:	bf14      	ite	ne
    7dd2:	2301      	movne	r3, #1
    7dd4:	2300      	moveq	r3, #0
    7dd6:	b2db      	uxtb	r3, r3
}
    7dd8:	4618      	mov	r0, r3
    7dda:	370c      	adds	r7, #12
    7ddc:	46bd      	mov	sp, r7
    7dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de2:	4770      	bx	lr

00007de4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    7de4:	b480      	push	{r7}
    7de6:	b083      	sub	sp, #12
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
    7dec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    7dee:	687b      	ldr	r3, [r7, #4]
    7df0:	683a      	ldr	r2, [r7, #0]
    7df2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7df4:	bf00      	nop
    7df6:	370c      	adds	r7, #12
    7df8:	46bd      	mov	sp, r7
    7dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dfe:	4770      	bx	lr

00007e00 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    7e00:	b480      	push	{r7}
    7e02:	b083      	sub	sp, #12
    7e04:	af00      	add	r7, sp, #0
    7e06:	6078      	str	r0, [r7, #4]
    7e08:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    7e0a:	687b      	ldr	r3, [r7, #4]
    7e0c:	683a      	ldr	r2, [r7, #0]
    7e0e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e10:	bf00      	nop
    7e12:	370c      	adds	r7, #12
    7e14:	46bd      	mov	sp, r7
    7e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1a:	4770      	bx	lr

00007e1c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    7e1c:	b480      	push	{r7}
    7e1e:	b083      	sub	sp, #12
    7e20:	af00      	add	r7, sp, #0
    7e22:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	699b      	ldr	r3, [r3, #24]
    7e28:	f043 0201 	orr.w	r2, r3, #1
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e30:	bf00      	nop
    7e32:	370c      	adds	r7, #12
    7e34:	46bd      	mov	sp, r7
    7e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e3a:	4770      	bx	lr

00007e3c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    7e3c:	b480      	push	{r7}
    7e3e:	b085      	sub	sp, #20
    7e40:	af00      	add	r7, sp, #0
    7e42:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	699b      	ldr	r3, [r3, #24]
    7e48:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    7e4a:	68fb      	ldr	r3, [r7, #12]
    7e4c:	f003 0301 	and.w	r3, r3, #1
    7e50:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7e52:	68fb      	ldr	r3, [r7, #12]
    7e54:	2b00      	cmp	r3, #0
    7e56:	bf14      	ite	ne
    7e58:	2301      	movne	r3, #1
    7e5a:	2300      	moveq	r3, #0
    7e5c:	b2db      	uxtb	r3, r3
}
    7e5e:	4618      	mov	r0, r3
    7e60:	3714      	adds	r7, #20
    7e62:	46bd      	mov	sp, r7
    7e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e68:	4770      	bx	lr

00007e6a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    7e6a:	b480      	push	{r7}
    7e6c:	b083      	sub	sp, #12
    7e6e:	af00      	add	r7, sp, #0
    7e70:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	699b      	ldr	r3, [r3, #24]
    7e76:	f023 0201 	bic.w	r2, r3, #1
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e7e:	bf00      	nop
    7e80:	370c      	adds	r7, #12
    7e82:	46bd      	mov	sp, r7
    7e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e88:	4770      	bx	lr

00007e8a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    7e8a:	b480      	push	{r7}
    7e8c:	b083      	sub	sp, #12
    7e8e:	af00      	add	r7, sp, #0
    7e90:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    7e92:	687b      	ldr	r3, [r7, #4]
    7e94:	699b      	ldr	r3, [r3, #24]
    7e96:	f043 0202 	orr.w	r2, r3, #2
    7e9a:	687b      	ldr	r3, [r7, #4]
    7e9c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e9e:	bf00      	nop
    7ea0:	370c      	adds	r7, #12
    7ea2:	46bd      	mov	sp, r7
    7ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea8:	4770      	bx	lr

00007eaa <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    7eaa:	b480      	push	{r7}
    7eac:	b083      	sub	sp, #12
    7eae:	af00      	add	r7, sp, #0
    7eb0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	699b      	ldr	r3, [r3, #24]
    7eb6:	f023 0202 	bic.w	r2, r3, #2
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7ebe:	bf00      	nop
    7ec0:	370c      	adds	r7, #12
    7ec2:	46bd      	mov	sp, r7
    7ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ec8:	4770      	bx	lr

00007eca <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    7eca:	b480      	push	{r7}
    7ecc:	b083      	sub	sp, #12
    7ece:	af00      	add	r7, sp, #0
    7ed0:	6078      	str	r0, [r7, #4]
    7ed2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	699a      	ldr	r2, [r3, #24]
    7ed8:	683b      	ldr	r3, [r7, #0]
    7eda:	431a      	orrs	r2, r3
    7edc:	687b      	ldr	r3, [r7, #4]
    7ede:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7ee0:	bf00      	nop
    7ee2:	370c      	adds	r7, #12
    7ee4:	46bd      	mov	sp, r7
    7ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eea:	4770      	bx	lr

00007eec <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    7eec:	b480      	push	{r7}
    7eee:	b083      	sub	sp, #12
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
    7ef4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	683a      	ldr	r2, [r7, #0]
    7efa:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7efc:	bf00      	nop
    7efe:	370c      	adds	r7, #12
    7f00:	46bd      	mov	sp, r7
    7f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f06:	4770      	bx	lr

00007f08 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    7f08:	b480      	push	{r7}
    7f0a:	b083      	sub	sp, #12
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
    7f10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	683a      	ldr	r2, [r7, #0]
    7f16:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    7f18:	bf00      	nop
    7f1a:	370c      	adds	r7, #12
    7f1c:	46bd      	mov	sp, r7
    7f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f22:	4770      	bx	lr

00007f24 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    7f24:	b480      	push	{r7}
    7f26:	b083      	sub	sp, #12
    7f28:	af00      	add	r7, sp, #0
    7f2a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    7f2c:	687b      	ldr	r3, [r7, #4]
    7f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    7f30:	4618      	mov	r0, r3
    7f32:	370c      	adds	r7, #12
    7f34:	46bd      	mov	sp, r7
    7f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f3a:	4770      	bx	lr

00007f3c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    7f3c:	b480      	push	{r7}
    7f3e:	b083      	sub	sp, #12
    7f40:	af00      	add	r7, sp, #0
    7f42:	6078      	str	r0, [r7, #4]
    7f44:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	683a      	ldr	r2, [r7, #0]
    7f4a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    7f4c:	bf00      	nop
    7f4e:	370c      	adds	r7, #12
    7f50:	46bd      	mov	sp, r7
    7f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f56:	4770      	bx	lr

00007f58 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    7f58:	b480      	push	{r7}
    7f5a:	b083      	sub	sp, #12
    7f5c:	af00      	add	r7, sp, #0
    7f5e:	6078      	str	r0, [r7, #4]
    7f60:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	683a      	ldr	r2, [r7, #0]
    7f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    7f6a:	bf00      	nop
    7f6c:	370c      	adds	r7, #12
    7f6e:	46bd      	mov	sp, r7
    7f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f74:	4770      	bx	lr

00007f76 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    7f76:	b480      	push	{r7}
    7f78:	b083      	sub	sp, #12
    7f7a:	af00      	add	r7, sp, #0
    7f7c:	6078      	str	r0, [r7, #4]
    7f7e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	683a      	ldr	r2, [r7, #0]
    7f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    7f88:	bf00      	nop
    7f8a:	370c      	adds	r7, #12
    7f8c:	46bd      	mov	sp, r7
    7f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f92:	4770      	bx	lr

00007f94 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    7f94:	b480      	push	{r7}
    7f96:	b083      	sub	sp, #12
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
    7f9c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    7f9e:	687b      	ldr	r3, [r7, #4]
    7fa0:	683a      	ldr	r2, [r7, #0]
    7fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    7fa6:	bf00      	nop
    7fa8:	370c      	adds	r7, #12
    7faa:	46bd      	mov	sp, r7
    7fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb0:	4770      	bx	lr

00007fb2 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    7fb2:	b480      	push	{r7}
    7fb4:	b083      	sub	sp, #12
    7fb6:	af00      	add	r7, sp, #0
    7fb8:	6078      	str	r0, [r7, #4]
    7fba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	683a      	ldr	r2, [r7, #0]
    7fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    7fc4:	bf00      	nop
    7fc6:	370c      	adds	r7, #12
    7fc8:	46bd      	mov	sp, r7
    7fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fce:	4770      	bx	lr

00007fd0 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    7fd0:	b480      	push	{r7}
    7fd2:	b083      	sub	sp, #12
    7fd4:	af00      	add	r7, sp, #0
    7fd6:	6078      	str	r0, [r7, #4]
    7fd8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	683a      	ldr	r2, [r7, #0]
    7fde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7fe2:	bf00      	nop
    7fe4:	370c      	adds	r7, #12
    7fe6:	46bd      	mov	sp, r7
    7fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fec:	4770      	bx	lr

00007fee <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    7fee:	b480      	push	{r7}
    7ff0:	b083      	sub	sp, #12
    7ff2:	af00      	add	r7, sp, #0
    7ff4:	6078      	str	r0, [r7, #4]
    7ff6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	683a      	ldr	r2, [r7, #0]
    7ffc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    8000:	bf00      	nop
    8002:	370c      	adds	r7, #12
    8004:	46bd      	mov	sp, r7
    8006:	f85d 7b04 	ldr.w	r7, [sp], #4
    800a:	4770      	bx	lr

0000800c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    800c:	b480      	push	{r7}
    800e:	b083      	sub	sp, #12
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
    8014:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	683a      	ldr	r2, [r7, #0]
    801a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    801e:	bf00      	nop
    8020:	370c      	adds	r7, #12
    8022:	46bd      	mov	sp, r7
    8024:	f85d 7b04 	ldr.w	r7, [sp], #4
    8028:	4770      	bx	lr

0000802a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    802a:	b480      	push	{r7}
    802c:	b083      	sub	sp, #12
    802e:	af00      	add	r7, sp, #0
    8030:	6078      	str	r0, [r7, #4]
    8032:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	683a      	ldr	r2, [r7, #0]
    8038:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    803c:	bf00      	nop
    803e:	370c      	adds	r7, #12
    8040:	46bd      	mov	sp, r7
    8042:	f85d 7b04 	ldr.w	r7, [sp], #4
    8046:	4770      	bx	lr

00008048 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    8048:	b480      	push	{r7}
    804a:	b083      	sub	sp, #12
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
    8050:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    8052:	687b      	ldr	r3, [r7, #4]
    8054:	683a      	ldr	r2, [r7, #0]
    8056:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    805a:	bf00      	nop
    805c:	370c      	adds	r7, #12
    805e:	46bd      	mov	sp, r7
    8060:	f85d 7b04 	ldr.w	r7, [sp], #4
    8064:	4770      	bx	lr
	...

00008068 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    8068:	b580      	push	{r7, lr}
    806a:	b082      	sub	sp, #8
    806c:	af00      	add	r7, sp, #0
    806e:	6078      	str	r0, [r7, #4]
    8070:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    8072:	687b      	ldr	r3, [r7, #4]
    8074:	683a      	ldr	r2, [r7, #0]
    8076:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	681b      	ldr	r3, [r3, #0]
    807c:	4618      	mov	r0, r3
    807e:	4b55      	ldr	r3, [pc, #340]	; (81d4 <_can_async_init+0x16c>)
    8080:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    8082:	bf00      	nop
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	681b      	ldr	r3, [r3, #0]
    8088:	4618      	mov	r0, r3
    808a:	4b53      	ldr	r3, [pc, #332]	; (81d8 <_can_async_init+0x170>)
    808c:	4798      	blx	r3
    808e:	4603      	mov	r3, r0
    8090:	f083 0301 	eor.w	r3, r3, #1
    8094:	b2db      	uxtb	r3, r3
    8096:	2b00      	cmp	r3, #0
    8098:	d1f4      	bne.n	8084 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    809a:	687b      	ldr	r3, [r7, #4]
    809c:	681b      	ldr	r3, [r3, #0]
    809e:	4618      	mov	r0, r3
    80a0:	4b4e      	ldr	r3, [pc, #312]	; (81dc <_can_async_init+0x174>)
    80a2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    80a4:	683b      	ldr	r3, [r7, #0]
    80a6:	4a4e      	ldr	r2, [pc, #312]	; (81e0 <_can_async_init+0x178>)
    80a8:	4293      	cmp	r3, r2
    80aa:	d17a      	bne.n	81a2 <_can_async_init+0x13a>
		_can1_dev    = dev;
    80ac:	4a4d      	ldr	r2, [pc, #308]	; (81e4 <_can_async_init+0x17c>)
    80ae:	687b      	ldr	r3, [r7, #4]
    80b0:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    80b2:	687b      	ldr	r3, [r7, #4]
    80b4:	4a4c      	ldr	r2, [pc, #304]	; (81e8 <_can_async_init+0x180>)
    80b6:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	f44f 7140 	mov.w	r1, #768	; 0x300
    80c0:	4618      	mov	r0, r3
    80c2:	4b4a      	ldr	r3, [pc, #296]	; (81ec <_can_async_init+0x184>)
    80c4:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    80c6:	687b      	ldr	r3, [r7, #4]
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	2102      	movs	r1, #2
    80cc:	4618      	mov	r0, r3
    80ce:	4b48      	ldr	r3, [pc, #288]	; (81f0 <_can_async_init+0x188>)
    80d0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    80d2:	687b      	ldr	r3, [r7, #4]
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	4947      	ldr	r1, [pc, #284]	; (81f4 <_can_async_init+0x18c>)
    80d8:	4618      	mov	r0, r3
    80da:	4b47      	ldr	r3, [pc, #284]	; (81f8 <_can_async_init+0x190>)
    80dc:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    80de:	687b      	ldr	r3, [r7, #4]
    80e0:	681b      	ldr	r3, [r3, #0]
    80e2:	4946      	ldr	r1, [pc, #280]	; (81fc <_can_async_init+0x194>)
    80e4:	4618      	mov	r0, r3
    80e6:	4b46      	ldr	r3, [pc, #280]	; (8200 <_can_async_init+0x198>)
    80e8:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    80ea:	687b      	ldr	r3, [r7, #4]
    80ec:	681a      	ldr	r2, [r3, #0]
    80ee:	4b45      	ldr	r3, [pc, #276]	; (8204 <_can_async_init+0x19c>)
    80f0:	b29b      	uxth	r3, r3
    80f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    80f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    80fa:	4619      	mov	r1, r3
    80fc:	4610      	mov	r0, r2
    80fe:	4b42      	ldr	r3, [pc, #264]	; (8208 <_can_async_init+0x1a0>)
    8100:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	2107      	movs	r1, #7
    8108:	4618      	mov	r0, r3
    810a:	4b40      	ldr	r3, [pc, #256]	; (820c <_can_async_init+0x1a4>)
    810c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	681b      	ldr	r3, [r3, #0]
    8112:	2107      	movs	r1, #7
    8114:	4618      	mov	r0, r3
    8116:	4b3e      	ldr	r3, [pc, #248]	; (8210 <_can_async_init+0x1a8>)
    8118:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    811a:	687b      	ldr	r3, [r7, #4]
    811c:	681a      	ldr	r2, [r3, #0]
    811e:	4b3d      	ldr	r3, [pc, #244]	; (8214 <_can_async_init+0x1ac>)
    8120:	b29b      	uxth	r3, r3
    8122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8126:	4619      	mov	r1, r3
    8128:	4610      	mov	r0, r2
    812a:	4b3b      	ldr	r3, [pc, #236]	; (8218 <_can_async_init+0x1b0>)
    812c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	681a      	ldr	r2, [r3, #0]
    8132:	4b3a      	ldr	r3, [pc, #232]	; (821c <_can_async_init+0x1b4>)
    8134:	b29b      	uxth	r3, r3
    8136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    813a:	4619      	mov	r1, r3
    813c:	4610      	mov	r0, r2
    813e:	4b38      	ldr	r3, [pc, #224]	; (8220 <_can_async_init+0x1b8>)
    8140:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    8142:	687b      	ldr	r3, [r7, #4]
    8144:	681b      	ldr	r3, [r3, #0]
    8146:	2108      	movs	r1, #8
    8148:	4618      	mov	r0, r3
    814a:	4b36      	ldr	r3, [pc, #216]	; (8224 <_can_async_init+0x1bc>)
    814c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	681a      	ldr	r2, [r3, #0]
    8152:	4b35      	ldr	r3, [pc, #212]	; (8228 <_can_async_init+0x1c0>)
    8154:	b29b      	uxth	r3, r3
    8156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    815a:	4619      	mov	r1, r3
    815c:	4610      	mov	r0, r2
    815e:	4b33      	ldr	r3, [pc, #204]	; (822c <_can_async_init+0x1c4>)
    8160:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	681a      	ldr	r2, [r3, #0]
    8166:	4b32      	ldr	r3, [pc, #200]	; (8230 <_can_async_init+0x1c8>)
    8168:	b29b      	uxth	r3, r3
    816a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    816e:	4619      	mov	r1, r3
    8170:	4610      	mov	r0, r2
    8172:	4b30      	ldr	r3, [pc, #192]	; (8234 <_can_async_init+0x1cc>)
    8174:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    817e:	4618      	mov	r0, r3
    8180:	4b2d      	ldr	r3, [pc, #180]	; (8238 <_can_async_init+0x1d0>)
    8182:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    8184:	204f      	movs	r0, #79	; 0x4f
    8186:	4b2d      	ldr	r3, [pc, #180]	; (823c <_can_async_init+0x1d4>)
    8188:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    818a:	204f      	movs	r0, #79	; 0x4f
    818c:	4b2c      	ldr	r3, [pc, #176]	; (8240 <_can_async_init+0x1d8>)
    818e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    8190:	204f      	movs	r0, #79	; 0x4f
    8192:	4b2c      	ldr	r3, [pc, #176]	; (8244 <_can_async_init+0x1dc>)
    8194:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	2101      	movs	r1, #1
    819c:	4618      	mov	r0, r3
    819e:	4b2a      	ldr	r3, [pc, #168]	; (8248 <_can_async_init+0x1e0>)
    81a0:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    81a2:	687b      	ldr	r3, [r7, #4]
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	4618      	mov	r0, r3
    81a8:	4b28      	ldr	r3, [pc, #160]	; (824c <_can_async_init+0x1e4>)
    81aa:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	4618      	mov	r0, r3
    81b2:	4b27      	ldr	r3, [pc, #156]	; (8250 <_can_async_init+0x1e8>)
    81b4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    81b6:	bf00      	nop
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	4618      	mov	r0, r3
    81be:	4b06      	ldr	r3, [pc, #24]	; (81d8 <_can_async_init+0x170>)
    81c0:	4798      	blx	r3
    81c2:	4603      	mov	r3, r0
    81c4:	2b00      	cmp	r3, #0
    81c6:	d1f7      	bne.n	81b8 <_can_async_init+0x150>
	};

	return ERR_NONE;
    81c8:	2300      	movs	r3, #0
}
    81ca:	4618      	mov	r0, r3
    81cc:	3708      	adds	r7, #8
    81ce:	46bd      	mov	sp, r7
    81d0:	bd80      	pop	{r7, pc}
    81d2:	bf00      	nop
    81d4:	00007e1d 	.word	0x00007e1d
    81d8:	00007e3d 	.word	0x00007e3d
    81dc:	00007e8b 	.word	0x00007e8b
    81e0:	42000400 	.word	0x42000400
    81e4:	2000191c 	.word	0x2000191c
    81e8:	20000008 	.word	0x20000008
    81ec:	00007ecb 	.word	0x00007ecb
    81f0:	00007de5 	.word	0x00007de5
    81f4:	00010c01 	.word	0x00010c01
    81f8:	00007eed 	.word	0x00007eed
    81fc:	00010c10 	.word	0x00010c10
    8200:	00007e01 	.word	0x00007e01
    8204:	2000d900 	.word	0x2000d900
    8208:	00007fd1 	.word	0x00007fd1
    820c:	00007fef 	.word	0x00007fef
    8210:	0000802b 	.word	0x0000802b
    8214:	2000d8b8 	.word	0x2000d8b8
    8218:	0000800d 	.word	0x0000800d
    821c:	2000187c 	.word	0x2000187c
    8220:	00008049 	.word	0x00008049
    8224:	00007f59 	.word	0x00007f59
    8228:	2000188c 	.word	0x2000188c
    822c:	00007f77 	.word	0x00007f77
    8230:	2000190c 	.word	0x2000190c
    8234:	00007f95 	.word	0x00007f95
    8238:	00007fb3 	.word	0x00007fb3
    823c:	00007d3d 	.word	0x00007d3d
    8240:	00007d81 	.word	0x00007d81
    8244:	00007d01 	.word	0x00007d01
    8248:	00007f3d 	.word	0x00007f3d
    824c:	00007eab 	.word	0x00007eab
    8250:	00007e6b 	.word	0x00007e6b

00008254 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    8254:	b590      	push	{r4, r7, lr}
    8256:	b083      	sub	sp, #12
    8258:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    825a:	4b2c      	ldr	r3, [pc, #176]	; (830c <CAN1_Handler+0xb8>)
    825c:	681b      	ldr	r3, [r3, #0]
    825e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	681b      	ldr	r3, [r3, #0]
    8264:	4618      	mov	r0, r3
    8266:	4b2a      	ldr	r3, [pc, #168]	; (8310 <CAN1_Handler+0xbc>)
    8268:	4798      	blx	r3
    826a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    826c:	683b      	ldr	r3, [r7, #0]
    826e:	f003 0301 	and.w	r3, r3, #1
    8272:	2b00      	cmp	r3, #0
    8274:	d003      	beq.n	827e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	689b      	ldr	r3, [r3, #8]
    827a:	6878      	ldr	r0, [r7, #4]
    827c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    827e:	683b      	ldr	r3, [r7, #0]
    8280:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8284:	2b00      	cmp	r3, #0
    8286:	d003      	beq.n	8290 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    8288:	687b      	ldr	r3, [r7, #4]
    828a:	685b      	ldr	r3, [r3, #4]
    828c:	6878      	ldr	r0, [r7, #4]
    828e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8290:	683b      	ldr	r3, [r7, #0]
    8292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8296:	2b00      	cmp	r3, #0
    8298:	d004      	beq.n	82a4 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    829a:	687b      	ldr	r3, [r7, #4]
    829c:	68db      	ldr	r3, [r3, #12]
    829e:	2103      	movs	r1, #3
    82a0:	6878      	ldr	r0, [r7, #4]
    82a2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    82a4:	683b      	ldr	r3, [r7, #0]
    82a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    82aa:	2b00      	cmp	r3, #0
    82ac:	d004      	beq.n	82b8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    82ae:	687b      	ldr	r3, [r7, #4]
    82b0:	68db      	ldr	r3, [r3, #12]
    82b2:	2100      	movs	r1, #0
    82b4:	6878      	ldr	r0, [r7, #4]
    82b6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    82be:	2b00      	cmp	r3, #0
    82c0:	d00f      	beq.n	82e2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    82c2:	687b      	ldr	r3, [r7, #4]
    82c4:	68dc      	ldr	r4, [r3, #12]
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	681b      	ldr	r3, [r3, #0]
    82ca:	4618      	mov	r0, r3
    82cc:	4b11      	ldr	r3, [pc, #68]	; (8314 <CAN1_Handler+0xc0>)
    82ce:	4798      	blx	r3
    82d0:	4603      	mov	r3, r0
    82d2:	2b00      	cmp	r3, #0
    82d4:	d001      	beq.n	82da <CAN1_Handler+0x86>
    82d6:	2302      	movs	r3, #2
    82d8:	e000      	b.n	82dc <CAN1_Handler+0x88>
    82da:	2301      	movs	r3, #1
    82dc:	4619      	mov	r1, r3
    82de:	6878      	ldr	r0, [r7, #4]
    82e0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    82e2:	683b      	ldr	r3, [r7, #0]
    82e4:	f003 0308 	and.w	r3, r3, #8
    82e8:	2b00      	cmp	r3, #0
    82ea:	d004      	beq.n	82f6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    82ec:	687b      	ldr	r3, [r7, #4]
    82ee:	68db      	ldr	r3, [r3, #12]
    82f0:	2104      	movs	r1, #4
    82f2:	6878      	ldr	r0, [r7, #4]
    82f4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	6839      	ldr	r1, [r7, #0]
    82fc:	4618      	mov	r0, r3
    82fe:	4b06      	ldr	r3, [pc, #24]	; (8318 <CAN1_Handler+0xc4>)
    8300:	4798      	blx	r3
}
    8302:	bf00      	nop
    8304:	370c      	adds	r7, #12
    8306:	46bd      	mov	sp, r7
    8308:	bd90      	pop	{r4, r7, pc}
    830a:	bf00      	nop
    830c:	2000191c 	.word	0x2000191c
    8310:	00007f25 	.word	0x00007f25
    8314:	00007dbd 	.word	0x00007dbd
    8318:	00007f09 	.word	0x00007f09

0000831c <__NVIC_SetPendingIRQ>:
{
    831c:	b480      	push	{r7}
    831e:	b083      	sub	sp, #12
    8320:	af00      	add	r7, sp, #0
    8322:	4603      	mov	r3, r0
    8324:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    832a:	2b00      	cmp	r3, #0
    832c:	db0c      	blt.n	8348 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    832e:	4909      	ldr	r1, [pc, #36]	; (8354 <__NVIC_SetPendingIRQ+0x38>)
    8330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8334:	095b      	lsrs	r3, r3, #5
    8336:	88fa      	ldrh	r2, [r7, #6]
    8338:	f002 021f 	and.w	r2, r2, #31
    833c:	2001      	movs	r0, #1
    833e:	fa00 f202 	lsl.w	r2, r0, r2
    8342:	3340      	adds	r3, #64	; 0x40
    8344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8348:	bf00      	nop
    834a:	370c      	adds	r7, #12
    834c:	46bd      	mov	sp, r7
    834e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8352:	4770      	bx	lr
    8354:	e000e100 	.word	0xe000e100

00008358 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    8358:	b580      	push	{r7, lr}
    835a:	b082      	sub	sp, #8
    835c:	af00      	add	r7, sp, #0
    835e:	4603      	mov	r3, r0
    8360:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    8362:	79fb      	ldrb	r3, [r7, #7]
    8364:	b21b      	sxth	r3, r3
    8366:	4618      	mov	r0, r3
    8368:	4b02      	ldr	r3, [pc, #8]	; (8374 <_irq_set+0x1c>)
    836a:	4798      	blx	r3
}
    836c:	bf00      	nop
    836e:	3708      	adds	r7, #8
    8370:	46bd      	mov	sp, r7
    8372:	bd80      	pop	{r7, pc}
    8374:	0000831d 	.word	0x0000831d

00008378 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    8378:	b480      	push	{r7}
    837a:	b083      	sub	sp, #12
    837c:	af00      	add	r7, sp, #0
    837e:	4603      	mov	r3, r0
    8380:	6039      	str	r1, [r7, #0]
    8382:	80fb      	strh	r3, [r7, #6]
    8384:	4613      	mov	r3, r2
    8386:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8388:	797b      	ldrb	r3, [r7, #5]
    838a:	3b04      	subs	r3, #4
    838c:	2b05      	cmp	r3, #5
    838e:	d86b      	bhi.n	8468 <_get_cycles_for_us_internal+0xf0>
    8390:	a201      	add	r2, pc, #4	; (adr r2, 8398 <_get_cycles_for_us_internal+0x20>)
    8392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8396:	bf00      	nop
    8398:	00008447 	.word	0x00008447
    839c:	00008427 	.word	0x00008427
    83a0:	00008409 	.word	0x00008409
    83a4:	000083eb 	.word	0x000083eb
    83a8:	000083cd 	.word	0x000083cd
    83ac:	000083b1 	.word	0x000083b1
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    83b0:	88fb      	ldrh	r3, [r7, #6]
    83b2:	683a      	ldr	r2, [r7, #0]
    83b4:	4935      	ldr	r1, [pc, #212]	; (848c <_get_cycles_for_us_internal+0x114>)
    83b6:	fba1 1202 	umull	r1, r2, r1, r2
    83ba:	0c92      	lsrs	r2, r2, #18
    83bc:	fb02 f303 	mul.w	r3, r2, r3
    83c0:	3302      	adds	r3, #2
    83c2:	4a33      	ldr	r2, [pc, #204]	; (8490 <_get_cycles_for_us_internal+0x118>)
    83c4:	fba2 2303 	umull	r2, r3, r2, r3
    83c8:	085b      	lsrs	r3, r3, #1
    83ca:	e059      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    83cc:	88fb      	ldrh	r3, [r7, #6]
    83ce:	683a      	ldr	r2, [r7, #0]
    83d0:	0952      	lsrs	r2, r2, #5
    83d2:	4930      	ldr	r1, [pc, #192]	; (8494 <_get_cycles_for_us_internal+0x11c>)
    83d4:	fba1 1202 	umull	r1, r2, r1, r2
    83d8:	09d2      	lsrs	r2, r2, #7
    83da:	fb02 f303 	mul.w	r3, r2, r3
    83de:	331d      	adds	r3, #29
    83e0:	4a2d      	ldr	r2, [pc, #180]	; (8498 <_get_cycles_for_us_internal+0x120>)
    83e2:	fba2 2303 	umull	r2, r3, r2, r3
    83e6:	091b      	lsrs	r3, r3, #4
    83e8:	e04a      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    83ea:	88fb      	ldrh	r3, [r7, #6]
    83ec:	683a      	ldr	r2, [r7, #0]
    83ee:	492b      	ldr	r1, [pc, #172]	; (849c <_get_cycles_for_us_internal+0x124>)
    83f0:	fba1 1202 	umull	r1, r2, r1, r2
    83f4:	0b52      	lsrs	r2, r2, #13
    83f6:	fb02 f303 	mul.w	r3, r2, r3
    83fa:	f203 132b 	addw	r3, r3, #299	; 0x12b
    83fe:	4a28      	ldr	r2, [pc, #160]	; (84a0 <_get_cycles_for_us_internal+0x128>)
    8400:	fba2 2303 	umull	r2, r3, r2, r3
    8404:	095b      	lsrs	r3, r3, #5
    8406:	e03b      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    8408:	88fb      	ldrh	r3, [r7, #6]
    840a:	683a      	ldr	r2, [r7, #0]
    840c:	4925      	ldr	r1, [pc, #148]	; (84a4 <_get_cycles_for_us_internal+0x12c>)
    840e:	fba1 1202 	umull	r1, r2, r1, r2
    8412:	0992      	lsrs	r2, r2, #6
    8414:	fb02 f303 	mul.w	r3, r2, r3
    8418:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    841c:	4a22      	ldr	r2, [pc, #136]	; (84a8 <_get_cycles_for_us_internal+0x130>)
    841e:	fba2 2303 	umull	r2, r3, r2, r3
    8422:	099b      	lsrs	r3, r3, #6
    8424:	e02c      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    8426:	88fb      	ldrh	r3, [r7, #6]
    8428:	683a      	ldr	r2, [r7, #0]
    842a:	4920      	ldr	r1, [pc, #128]	; (84ac <_get_cycles_for_us_internal+0x134>)
    842c:	fba1 1202 	umull	r1, r2, r1, r2
    8430:	0952      	lsrs	r2, r2, #5
    8432:	fb02 f303 	mul.w	r3, r2, r3
    8436:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    843a:	332f      	adds	r3, #47	; 0x2f
    843c:	4a1c      	ldr	r2, [pc, #112]	; (84b0 <_get_cycles_for_us_internal+0x138>)
    843e:	fba2 2303 	umull	r2, r3, r2, r3
    8442:	0b5b      	lsrs	r3, r3, #13
    8444:	e01c      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    8446:	88fb      	ldrh	r3, [r7, #6]
    8448:	683a      	ldr	r2, [r7, #0]
    844a:	491a      	ldr	r1, [pc, #104]	; (84b4 <_get_cycles_for_us_internal+0x13c>)
    844c:	fba1 1202 	umull	r1, r2, r1, r2
    8450:	08d2      	lsrs	r2, r2, #3
    8452:	fb02 f303 	mul.w	r3, r2, r3
    8456:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    845a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    845e:	4a16      	ldr	r2, [pc, #88]	; (84b8 <_get_cycles_for_us_internal+0x140>)
    8460:	fba2 2303 	umull	r2, r3, r2, r3
    8464:	0c5b      	lsrs	r3, r3, #17
    8466:	e00b      	b.n	8480 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    8468:	88fb      	ldrh	r3, [r7, #6]
    846a:	683a      	ldr	r2, [r7, #0]
    846c:	fb02 f303 	mul.w	r3, r2, r3
    8470:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8474:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8478:	4a10      	ldr	r2, [pc, #64]	; (84bc <_get_cycles_for_us_internal+0x144>)
    847a:	fba2 2303 	umull	r2, r3, r2, r3
    847e:	0c9b      	lsrs	r3, r3, #18
	}
}
    8480:	4618      	mov	r0, r3
    8482:	370c      	adds	r7, #12
    8484:	46bd      	mov	sp, r7
    8486:	f85d 7b04 	ldr.w	r7, [sp], #4
    848a:	4770      	bx	lr
    848c:	431bde83 	.word	0x431bde83
    8490:	aaaaaaab 	.word	0xaaaaaaab
    8494:	0a7c5ac5 	.word	0x0a7c5ac5
    8498:	88888889 	.word	0x88888889
    849c:	d1b71759 	.word	0xd1b71759
    84a0:	1b4e81b5 	.word	0x1b4e81b5
    84a4:	10624dd3 	.word	0x10624dd3
    84a8:	057619f1 	.word	0x057619f1
    84ac:	51eb851f 	.word	0x51eb851f
    84b0:	45e7b273 	.word	0x45e7b273
    84b4:	cccccccd 	.word	0xcccccccd
    84b8:	6fd91d85 	.word	0x6fd91d85
    84bc:	165e9f81 	.word	0x165e9f81

000084c0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b082      	sub	sp, #8
    84c4:	af00      	add	r7, sp, #0
    84c6:	4603      	mov	r3, r0
    84c8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    84ca:	88fb      	ldrh	r3, [r7, #6]
    84cc:	2209      	movs	r2, #9
    84ce:	4904      	ldr	r1, [pc, #16]	; (84e0 <_get_cycles_for_us+0x20>)
    84d0:	4618      	mov	r0, r3
    84d2:	4b04      	ldr	r3, [pc, #16]	; (84e4 <_get_cycles_for_us+0x24>)
    84d4:	4798      	blx	r3
    84d6:	4603      	mov	r3, r0
}
    84d8:	4618      	mov	r0, r3
    84da:	3708      	adds	r7, #8
    84dc:	46bd      	mov	sp, r7
    84de:	bd80      	pop	{r7, pc}
    84e0:	07270e00 	.word	0x07270e00
    84e4:	00008379 	.word	0x00008379

000084e8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	4603      	mov	r3, r0
    84f0:	6039      	str	r1, [r7, #0]
    84f2:	80fb      	strh	r3, [r7, #6]
    84f4:	4613      	mov	r3, r2
    84f6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    84f8:	797b      	ldrb	r3, [r7, #5]
    84fa:	3b04      	subs	r3, #4
    84fc:	2b05      	cmp	r3, #5
    84fe:	d870      	bhi.n	85e2 <_get_cycles_for_ms_internal+0xfa>
    8500:	a201      	add	r2, pc, #4	; (adr r2, 8508 <_get_cycles_for_ms_internal+0x20>)
    8502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8506:	bf00      	nop
    8508:	000085c5 	.word	0x000085c5
    850c:	000085a9 	.word	0x000085a9
    8510:	0000858d 	.word	0x0000858d
    8514:	00008569 	.word	0x00008569
    8518:	00008545 	.word	0x00008545
    851c:	00008521 	.word	0x00008521
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    8520:	88fb      	ldrh	r3, [r7, #6]
    8522:	683a      	ldr	r2, [r7, #0]
    8524:	4937      	ldr	r1, [pc, #220]	; (8604 <_get_cycles_for_ms_internal+0x11c>)
    8526:	fba1 1202 	umull	r1, r2, r1, r2
    852a:	0c92      	lsrs	r2, r2, #18
    852c:	fb02 f303 	mul.w	r3, r2, r3
    8530:	3302      	adds	r3, #2
    8532:	4a35      	ldr	r2, [pc, #212]	; (8608 <_get_cycles_for_ms_internal+0x120>)
    8534:	fba2 2303 	umull	r2, r3, r2, r3
    8538:	085b      	lsrs	r3, r3, #1
    853a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    853e:	fb02 f303 	mul.w	r3, r2, r3
    8542:	e058      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    8544:	88fb      	ldrh	r3, [r7, #6]
    8546:	683a      	ldr	r2, [r7, #0]
    8548:	0952      	lsrs	r2, r2, #5
    854a:	4930      	ldr	r1, [pc, #192]	; (860c <_get_cycles_for_ms_internal+0x124>)
    854c:	fba1 1202 	umull	r1, r2, r1, r2
    8550:	09d2      	lsrs	r2, r2, #7
    8552:	fb02 f303 	mul.w	r3, r2, r3
    8556:	3302      	adds	r3, #2
    8558:	4a2b      	ldr	r2, [pc, #172]	; (8608 <_get_cycles_for_ms_internal+0x120>)
    855a:	fba2 2303 	umull	r2, r3, r2, r3
    855e:	085b      	lsrs	r3, r3, #1
    8560:	2264      	movs	r2, #100	; 0x64
    8562:	fb02 f303 	mul.w	r3, r2, r3
    8566:	e046      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    8568:	88fb      	ldrh	r3, [r7, #6]
    856a:	683a      	ldr	r2, [r7, #0]
    856c:	4928      	ldr	r1, [pc, #160]	; (8610 <_get_cycles_for_ms_internal+0x128>)
    856e:	fba1 1202 	umull	r1, r2, r1, r2
    8572:	0b52      	lsrs	r2, r2, #13
    8574:	fb02 f303 	mul.w	r3, r2, r3
    8578:	3302      	adds	r3, #2
    857a:	4a23      	ldr	r2, [pc, #140]	; (8608 <_get_cycles_for_ms_internal+0x120>)
    857c:	fba2 2303 	umull	r2, r3, r2, r3
    8580:	085a      	lsrs	r2, r3, #1
    8582:	4613      	mov	r3, r2
    8584:	009b      	lsls	r3, r3, #2
    8586:	4413      	add	r3, r2
    8588:	005b      	lsls	r3, r3, #1
    858a:	e034      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    858c:	88fb      	ldrh	r3, [r7, #6]
    858e:	683a      	ldr	r2, [r7, #0]
    8590:	4920      	ldr	r1, [pc, #128]	; (8614 <_get_cycles_for_ms_internal+0x12c>)
    8592:	fba1 1202 	umull	r1, r2, r1, r2
    8596:	0992      	lsrs	r2, r2, #6
    8598:	fb02 f303 	mul.w	r3, r2, r3
    859c:	3302      	adds	r3, #2
    859e:	4a1a      	ldr	r2, [pc, #104]	; (8608 <_get_cycles_for_ms_internal+0x120>)
    85a0:	fba2 2303 	umull	r2, r3, r2, r3
    85a4:	085b      	lsrs	r3, r3, #1
    85a6:	e026      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    85a8:	88fb      	ldrh	r3, [r7, #6]
    85aa:	683a      	ldr	r2, [r7, #0]
    85ac:	491a      	ldr	r1, [pc, #104]	; (8618 <_get_cycles_for_ms_internal+0x130>)
    85ae:	fba1 1202 	umull	r1, r2, r1, r2
    85b2:	0952      	lsrs	r2, r2, #5
    85b4:	fb02 f303 	mul.w	r3, r2, r3
    85b8:	331d      	adds	r3, #29
    85ba:	4a18      	ldr	r2, [pc, #96]	; (861c <_get_cycles_for_ms_internal+0x134>)
    85bc:	fba2 2303 	umull	r2, r3, r2, r3
    85c0:	091b      	lsrs	r3, r3, #4
    85c2:	e018      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    85c4:	88fb      	ldrh	r3, [r7, #6]
    85c6:	683a      	ldr	r2, [r7, #0]
    85c8:	4915      	ldr	r1, [pc, #84]	; (8620 <_get_cycles_for_ms_internal+0x138>)
    85ca:	fba1 1202 	umull	r1, r2, r1, r2
    85ce:	08d2      	lsrs	r2, r2, #3
    85d0:	fb02 f303 	mul.w	r3, r2, r3
    85d4:	f203 132b 	addw	r3, r3, #299	; 0x12b
    85d8:	4a12      	ldr	r2, [pc, #72]	; (8624 <_get_cycles_for_ms_internal+0x13c>)
    85da:	fba2 2303 	umull	r2, r3, r2, r3
    85de:	095b      	lsrs	r3, r3, #5
    85e0:	e009      	b.n	85f6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    85e2:	88fb      	ldrh	r3, [r7, #6]
    85e4:	683a      	ldr	r2, [r7, #0]
    85e6:	fb02 f303 	mul.w	r3, r2, r3
    85ea:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    85ee:	4a0e      	ldr	r2, [pc, #56]	; (8628 <_get_cycles_for_ms_internal+0x140>)
    85f0:	fba2 2303 	umull	r2, r3, r2, r3
    85f4:	099b      	lsrs	r3, r3, #6
	}
}
    85f6:	4618      	mov	r0, r3
    85f8:	370c      	adds	r7, #12
    85fa:	46bd      	mov	sp, r7
    85fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8600:	4770      	bx	lr
    8602:	bf00      	nop
    8604:	431bde83 	.word	0x431bde83
    8608:	aaaaaaab 	.word	0xaaaaaaab
    860c:	0a7c5ac5 	.word	0x0a7c5ac5
    8610:	d1b71759 	.word	0xd1b71759
    8614:	10624dd3 	.word	0x10624dd3
    8618:	51eb851f 	.word	0x51eb851f
    861c:	88888889 	.word	0x88888889
    8620:	cccccccd 	.word	0xcccccccd
    8624:	1b4e81b5 	.word	0x1b4e81b5
    8628:	057619f1 	.word	0x057619f1

0000862c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    862c:	b580      	push	{r7, lr}
    862e:	b082      	sub	sp, #8
    8630:	af00      	add	r7, sp, #0
    8632:	4603      	mov	r3, r0
    8634:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8636:	88fb      	ldrh	r3, [r7, #6]
    8638:	2209      	movs	r2, #9
    863a:	4904      	ldr	r1, [pc, #16]	; (864c <_get_cycles_for_ms+0x20>)
    863c:	4618      	mov	r0, r3
    863e:	4b04      	ldr	r3, [pc, #16]	; (8650 <_get_cycles_for_ms+0x24>)
    8640:	4798      	blx	r3
    8642:	4603      	mov	r3, r0
}
    8644:	4618      	mov	r0, r3
    8646:	3708      	adds	r7, #8
    8648:	46bd      	mov	sp, r7
    864a:	bd80      	pop	{r7, pc}
    864c:	07270e00 	.word	0x07270e00
    8650:	000084e9 	.word	0x000084e9
    8654:	00000000 	.word	0x00000000

00008658 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    8658:	b480      	push	{r7}
    865a:	b083      	sub	sp, #12
    865c:	af00      	add	r7, sp, #0
    865e:	6078      	str	r0, [r7, #4]
    8660:	6039      	str	r1, [r7, #0]
    8662:	bf00      	nop
    8664:	f3af 8000 	nop.w

00008668 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8668:	3901      	subs	r1, #1
    866a:	d8fd      	bhi.n	8668 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    866c:	bf00      	nop
    866e:	370c      	adds	r7, #12
    8670:	46bd      	mov	sp, r7
    8672:	f85d 7b04 	ldr.w	r7, [sp], #4
    8676:	4770      	bx	lr

00008678 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8678:	b480      	push	{r7}
    867a:	b083      	sub	sp, #12
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
    8680:	460b      	mov	r3, r1
    8682:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8684:	687b      	ldr	r3, [r7, #4]
    8686:	881b      	ldrh	r3, [r3, #0]
    8688:	b29a      	uxth	r2, r3
    868a:	887b      	ldrh	r3, [r7, #2]
    868c:	021b      	lsls	r3, r3, #8
    868e:	b29b      	uxth	r3, r3
    8690:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8694:	b29b      	uxth	r3, r3
    8696:	4313      	orrs	r3, r2
    8698:	b29a      	uxth	r2, r3
    869a:	687b      	ldr	r3, [r7, #4]
    869c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    869e:	bf00      	nop
    86a0:	370c      	adds	r7, #12
    86a2:	46bd      	mov	sp, r7
    86a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a8:	4770      	bx	lr

000086aa <hri_port_set_EVCTRL_reg>:
{
    86aa:	b480      	push	{r7}
    86ac:	b085      	sub	sp, #20
    86ae:	af00      	add	r7, sp, #0
    86b0:	60f8      	str	r0, [r7, #12]
    86b2:	460b      	mov	r3, r1
    86b4:	607a      	str	r2, [r7, #4]
    86b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    86b8:	7afb      	ldrb	r3, [r7, #11]
    86ba:	7afa      	ldrb	r2, [r7, #11]
    86bc:	68f9      	ldr	r1, [r7, #12]
    86be:	01d2      	lsls	r2, r2, #7
    86c0:	440a      	add	r2, r1
    86c2:	322c      	adds	r2, #44	; 0x2c
    86c4:	6811      	ldr	r1, [r2, #0]
    86c6:	687a      	ldr	r2, [r7, #4]
    86c8:	430a      	orrs	r2, r1
    86ca:	68f9      	ldr	r1, [r7, #12]
    86cc:	01db      	lsls	r3, r3, #7
    86ce:	440b      	add	r3, r1
    86d0:	332c      	adds	r3, #44	; 0x2c
    86d2:	601a      	str	r2, [r3, #0]
}
    86d4:	bf00      	nop
    86d6:	3714      	adds	r7, #20
    86d8:	46bd      	mov	sp, r7
    86da:	f85d 7b04 	ldr.w	r7, [sp], #4
    86de:	4770      	bx	lr

000086e0 <_port_event_init>:

static inline void _port_event_init()
{
    86e0:	b580      	push	{r7, lr}
    86e2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    86e4:	2200      	movs	r2, #0
    86e6:	2100      	movs	r1, #0
    86e8:	480a      	ldr	r0, [pc, #40]	; (8714 <_port_event_init+0x34>)
    86ea:	4b0b      	ldr	r3, [pc, #44]	; (8718 <_port_event_init+0x38>)
    86ec:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    86ee:	2200      	movs	r2, #0
    86f0:	2101      	movs	r1, #1
    86f2:	4808      	ldr	r0, [pc, #32]	; (8714 <_port_event_init+0x34>)
    86f4:	4b08      	ldr	r3, [pc, #32]	; (8718 <_port_event_init+0x38>)
    86f6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    86f8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    86fc:	2102      	movs	r1, #2
    86fe:	4805      	ldr	r0, [pc, #20]	; (8714 <_port_event_init+0x34>)
    8700:	4b05      	ldr	r3, [pc, #20]	; (8718 <_port_event_init+0x38>)
    8702:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8704:	2200      	movs	r2, #0
    8706:	2103      	movs	r1, #3
    8708:	4802      	ldr	r0, [pc, #8]	; (8714 <_port_event_init+0x34>)
    870a:	4b03      	ldr	r3, [pc, #12]	; (8718 <_port_event_init+0x38>)
    870c:	4798      	blx	r3
}
    870e:	bf00      	nop
    8710:	bd80      	pop	{r7, pc}
    8712:	bf00      	nop
    8714:	41008000 	.word	0x41008000
    8718:	000086ab 	.word	0x000086ab

0000871c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    871c:	b580      	push	{r7, lr}
    871e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    8720:	2104      	movs	r1, #4
    8722:	480b      	ldr	r0, [pc, #44]	; (8750 <_init_chip+0x34>)
    8724:	4b0b      	ldr	r3, [pc, #44]	; (8754 <_init_chip+0x38>)
    8726:	4798      	blx	r3

	_osc32kctrl_init_sources();
    8728:	4b0b      	ldr	r3, [pc, #44]	; (8758 <_init_chip+0x3c>)
    872a:	4798      	blx	r3
	_oscctrl_init_sources();
    872c:	4b0b      	ldr	r3, [pc, #44]	; (875c <_init_chip+0x40>)
    872e:	4798      	blx	r3
	_mclk_init();
    8730:	4b0b      	ldr	r3, [pc, #44]	; (8760 <_init_chip+0x44>)
    8732:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    8734:	f44f 6084 	mov.w	r0, #1056	; 0x420
    8738:	4b0a      	ldr	r3, [pc, #40]	; (8764 <_init_chip+0x48>)
    873a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    873c:	4b0a      	ldr	r3, [pc, #40]	; (8768 <_init_chip+0x4c>)
    873e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    8740:	f640 30df 	movw	r0, #3039	; 0xbdf
    8744:	4b07      	ldr	r3, [pc, #28]	; (8764 <_init_chip+0x48>)
    8746:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    8748:	4b08      	ldr	r3, [pc, #32]	; (876c <_init_chip+0x50>)
    874a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    874c:	bf00      	nop
    874e:	bd80      	pop	{r7, pc}
    8750:	41004000 	.word	0x41004000
    8754:	00008679 	.word	0x00008679
    8758:	00009485 	.word	0x00009485
    875c:	0000994d 	.word	0x0000994d
    8760:	000093a5 	.word	0x000093a5
    8764:	00009265 	.word	0x00009265
    8768:	0000998d 	.word	0x0000998d
    876c:	000086e1 	.word	0x000086e1

00008770 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    8770:	b480      	push	{r7}
    8772:	b083      	sub	sp, #12
    8774:	af00      	add	r7, sp, #0
    8776:	6078      	str	r0, [r7, #4]
    8778:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	683a      	ldr	r2, [r7, #0]
    877e:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8780:	bf00      	nop
    8782:	370c      	adds	r7, #12
    8784:	46bd      	mov	sp, r7
    8786:	f85d 7b04 	ldr.w	r7, [sp], #4
    878a:	4770      	bx	lr

0000878c <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    878c:	b480      	push	{r7}
    878e:	b085      	sub	sp, #20
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
    8794:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	689b      	ldr	r3, [r3, #8]
    879a:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    879c:	68fb      	ldr	r3, [r7, #12]
    879e:	f003 0303 	and.w	r3, r3, #3
    87a2:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    87a4:	683b      	ldr	r3, [r7, #0]
    87a6:	009b      	lsls	r3, r3, #2
    87a8:	68fa      	ldr	r2, [r7, #12]
    87aa:	4313      	orrs	r3, r2
    87ac:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	68fa      	ldr	r2, [r7, #12]
    87b2:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    87b4:	bf00      	nop
    87b6:	3714      	adds	r7, #20
    87b8:	46bd      	mov	sp, r7
    87ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    87be:	4770      	bx	lr

000087c0 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    87c0:	b480      	push	{r7}
    87c2:	b083      	sub	sp, #12
    87c4:	af00      	add	r7, sp, #0
    87c6:	6078      	str	r0, [r7, #4]
    87c8:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	683a      	ldr	r2, [r7, #0]
    87ce:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    87d0:	bf00      	nop
    87d2:	370c      	adds	r7, #12
    87d4:	46bd      	mov	sp, r7
    87d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    87da:	4770      	bx	lr

000087dc <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    87dc:	b480      	push	{r7}
    87de:	b083      	sub	sp, #12
    87e0:	af00      	add	r7, sp, #0
    87e2:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	68db      	ldr	r3, [r3, #12]
}
    87e8:	4618      	mov	r0, r3
    87ea:	370c      	adds	r7, #12
    87ec:	46bd      	mov	sp, r7
    87ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f2:	4770      	bx	lr

000087f4 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    87fc:	687b      	ldr	r3, [r7, #4]
    87fe:	785b      	ldrb	r3, [r3, #1]
    8800:	b2db      	uxtb	r3, r3
    8802:	f003 0301 	and.w	r3, r3, #1
    8806:	2b00      	cmp	r3, #0
    8808:	bf14      	ite	ne
    880a:	2301      	movne	r3, #1
    880c:	2300      	moveq	r3, #0
    880e:	b2db      	uxtb	r3, r3
}
    8810:	4618      	mov	r0, r3
    8812:	370c      	adds	r7, #12
    8814:	46bd      	mov	sp, r7
    8816:	f85d 7b04 	ldr.w	r7, [sp], #4
    881a:	4770      	bx	lr

0000881c <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    881c:	b480      	push	{r7}
    881e:	b083      	sub	sp, #12
    8820:	af00      	add	r7, sp, #0
    8822:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	2201      	movs	r2, #1
    8828:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    882a:	bf00      	nop
    882c:	370c      	adds	r7, #12
    882e:	46bd      	mov	sp, r7
    8830:	f85d 7b04 	ldr.w	r7, [sp], #4
    8834:	4770      	bx	lr

00008836 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8836:	b480      	push	{r7}
    8838:	b083      	sub	sp, #12
    883a:	af00      	add	r7, sp, #0
    883c:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    883e:	687b      	ldr	r3, [r7, #4]
    8840:	785b      	ldrb	r3, [r3, #1]
    8842:	b2db      	uxtb	r3, r3
    8844:	089b      	lsrs	r3, r3, #2
    8846:	f003 0301 	and.w	r3, r3, #1
    884a:	2b00      	cmp	r3, #0
    884c:	bf14      	ite	ne
    884e:	2301      	movne	r3, #1
    8850:	2300      	moveq	r3, #0
    8852:	b2db      	uxtb	r3, r3
}
    8854:	4618      	mov	r0, r3
    8856:	370c      	adds	r7, #12
    8858:	46bd      	mov	sp, r7
    885a:	f85d 7b04 	ldr.w	r7, [sp], #4
    885e:	4770      	bx	lr

00008860 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8860:	b480      	push	{r7}
    8862:	b083      	sub	sp, #12
    8864:	af00      	add	r7, sp, #0
    8866:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	2204      	movs	r2, #4
    886c:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    886e:	bf00      	nop
    8870:	370c      	adds	r7, #12
    8872:	46bd      	mov	sp, r7
    8874:	f85d 7b04 	ldr.w	r7, [sp], #4
    8878:	4770      	bx	lr

0000887a <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    887a:	b480      	push	{r7}
    887c:	b083      	sub	sp, #12
    887e:	af00      	add	r7, sp, #0
    8880:	6078      	str	r0, [r7, #4]
    8882:	460b      	mov	r3, r1
    8884:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	78fa      	ldrb	r2, [r7, #3]
    888a:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    888c:	bf00      	nop
    888e:	370c      	adds	r7, #12
    8890:	46bd      	mov	sp, r7
    8892:	f85d 7b04 	ldr.w	r7, [sp], #4
    8896:	4770      	bx	lr

00008898 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8898:	b480      	push	{r7}
    889a:	b083      	sub	sp, #12
    889c:	af00      	add	r7, sp, #0
    889e:	6078      	str	r0, [r7, #4]
    88a0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	683a      	ldr	r2, [r7, #0]
    88a6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    88a8:	2300      	movs	r3, #0
}
    88aa:	4618      	mov	r0, r3
    88ac:	370c      	adds	r7, #12
    88ae:	46bd      	mov	sp, r7
    88b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b4:	4770      	bx	lr

000088b6 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    88b6:	b480      	push	{r7}
    88b8:	b083      	sub	sp, #12
    88ba:	af00      	add	r7, sp, #0
    88bc:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    88be:	2300      	movs	r3, #0
}
    88c0:	4618      	mov	r0, r3
    88c2:	370c      	adds	r7, #12
    88c4:	46bd      	mov	sp, r7
    88c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ca:	4770      	bx	lr

000088cc <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    88cc:	b580      	push	{r7, lr}
    88ce:	b086      	sub	sp, #24
    88d0:	af00      	add	r7, sp, #0
    88d2:	60f8      	str	r0, [r7, #12]
    88d4:	60b9      	str	r1, [r7, #8]
    88d6:	607a      	str	r2, [r7, #4]
    88d8:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    88da:	2300      	movs	r3, #0
    88dc:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    88de:	68bb      	ldr	r3, [r7, #8]
    88e0:	f003 0303 	and.w	r3, r3, #3
    88e4:	2b00      	cmp	r3, #0
    88e6:	d002      	beq.n	88ee <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    88e8:	f06f 030c 	mvn.w	r3, #12
    88ec:	e05e      	b.n	89ac <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    88ee:	f107 0310 	add.w	r3, r7, #16
    88f2:	4618      	mov	r0, r3
    88f4:	4b2f      	ldr	r3, [pc, #188]	; (89b4 <_crc_sync_crc32+0xe8>)
    88f6:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    88f8:	68fb      	ldr	r3, [r7, #12]
    88fa:	681b      	ldr	r3, [r3, #0]
    88fc:	4618      	mov	r0, r3
    88fe:	4b2e      	ldr	r3, [pc, #184]	; (89b8 <_crc_sync_crc32+0xec>)
    8900:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8902:	68fb      	ldr	r3, [r7, #12]
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	68ba      	ldr	r2, [r7, #8]
    8908:	4611      	mov	r1, r2
    890a:	4618      	mov	r0, r3
    890c:	4b2b      	ldr	r3, [pc, #172]	; (89bc <_crc_sync_crc32+0xf0>)
    890e:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8910:	68fb      	ldr	r3, [r7, #12]
    8912:	681b      	ldr	r3, [r3, #0]
    8914:	6879      	ldr	r1, [r7, #4]
    8916:	4618      	mov	r0, r3
    8918:	4b29      	ldr	r3, [pc, #164]	; (89c0 <_crc_sync_crc32+0xf4>)
    891a:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    891c:	68fb      	ldr	r3, [r7, #12]
    891e:	681a      	ldr	r2, [r3, #0]
    8920:	683b      	ldr	r3, [r7, #0]
    8922:	681b      	ldr	r3, [r3, #0]
    8924:	4619      	mov	r1, r3
    8926:	4610      	mov	r0, r2
    8928:	4b26      	ldr	r3, [pc, #152]	; (89c4 <_crc_sync_crc32+0xf8>)
    892a:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    892c:	68fb      	ldr	r3, [r7, #12]
    892e:	681b      	ldr	r3, [r3, #0]
    8930:	2104      	movs	r1, #4
    8932:	4618      	mov	r0, r3
    8934:	4b24      	ldr	r3, [pc, #144]	; (89c8 <_crc_sync_crc32+0xfc>)
    8936:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8938:	bf00      	nop
    893a:	68fb      	ldr	r3, [r7, #12]
    893c:	681b      	ldr	r3, [r3, #0]
    893e:	4618      	mov	r0, r3
    8940:	4b22      	ldr	r3, [pc, #136]	; (89cc <_crc_sync_crc32+0x100>)
    8942:	4798      	blx	r3
    8944:	4603      	mov	r3, r0
    8946:	f083 0301 	eor.w	r3, r3, #1
    894a:	b2db      	uxtb	r3, r3
    894c:	2b00      	cmp	r3, #0
    894e:	d1f4      	bne.n	893a <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8950:	68fb      	ldr	r3, [r7, #12]
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	4618      	mov	r0, r3
    8956:	4b1e      	ldr	r3, [pc, #120]	; (89d0 <_crc_sync_crc32+0x104>)
    8958:	4798      	blx	r3
    895a:	4603      	mov	r3, r0
    895c:	2b00      	cmp	r3, #0
    895e:	d00d      	beq.n	897c <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8960:	68fb      	ldr	r3, [r7, #12]
    8962:	681b      	ldr	r3, [r3, #0]
    8964:	4618      	mov	r0, r3
    8966:	4b1b      	ldr	r3, [pc, #108]	; (89d4 <_crc_sync_crc32+0x108>)
    8968:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    896a:	68fb      	ldr	r3, [r7, #12]
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	4618      	mov	r0, r3
    8970:	4b19      	ldr	r3, [pc, #100]	; (89d8 <_crc_sync_crc32+0x10c>)
    8972:	4798      	blx	r3
		rc = ERR_IO;
    8974:	f06f 0305 	mvn.w	r3, #5
    8978:	617b      	str	r3, [r7, #20]
    897a:	e007      	b.n	898c <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    897c:	68fb      	ldr	r3, [r7, #12]
    897e:	681b      	ldr	r3, [r3, #0]
    8980:	4618      	mov	r0, r3
    8982:	4b16      	ldr	r3, [pc, #88]	; (89dc <_crc_sync_crc32+0x110>)
    8984:	4798      	blx	r3
    8986:	4602      	mov	r2, r0
    8988:	683b      	ldr	r3, [r7, #0]
    898a:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    898c:	68fb      	ldr	r3, [r7, #12]
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	4618      	mov	r0, r3
    8992:	4b11      	ldr	r3, [pc, #68]	; (89d8 <_crc_sync_crc32+0x10c>)
    8994:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8996:	68fb      	ldr	r3, [r7, #12]
    8998:	681b      	ldr	r3, [r3, #0]
    899a:	4618      	mov	r0, r3
    899c:	4b10      	ldr	r3, [pc, #64]	; (89e0 <_crc_sync_crc32+0x114>)
    899e:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    89a0:	f107 0310 	add.w	r3, r7, #16
    89a4:	4618      	mov	r0, r3
    89a6:	4b0f      	ldr	r3, [pc, #60]	; (89e4 <_crc_sync_crc32+0x118>)
    89a8:	4798      	blx	r3

	return rc;
    89aa:	697b      	ldr	r3, [r7, #20]
}
    89ac:	4618      	mov	r0, r3
    89ae:	3718      	adds	r7, #24
    89b0:	46bd      	mov	sp, r7
    89b2:	bd80      	pop	{r7, pc}
    89b4:	0000ff79 	.word	0x0000ff79
    89b8:	00009d2d 	.word	0x00009d2d
    89bc:	00008771 	.word	0x00008771
    89c0:	0000878d 	.word	0x0000878d
    89c4:	000087c1 	.word	0x000087c1
    89c8:	0000887b 	.word	0x0000887b
    89cc:	000087f5 	.word	0x000087f5
    89d0:	00008837 	.word	0x00008837
    89d4:	00008861 	.word	0x00008861
    89d8:	0000881d 	.word	0x0000881d
    89dc:	000087dd 	.word	0x000087dd
    89e0:	00009ca1 	.word	0x00009ca1
    89e4:	0000ff9f 	.word	0x0000ff9f

000089e8 <__NVIC_EnableIRQ>:
{
    89e8:	b480      	push	{r7}
    89ea:	b083      	sub	sp, #12
    89ec:	af00      	add	r7, sp, #0
    89ee:	4603      	mov	r3, r0
    89f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    89f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    89f6:	2b00      	cmp	r3, #0
    89f8:	db0b      	blt.n	8a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    89fa:	4909      	ldr	r1, [pc, #36]	; (8a20 <__NVIC_EnableIRQ+0x38>)
    89fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a00:	095b      	lsrs	r3, r3, #5
    8a02:	88fa      	ldrh	r2, [r7, #6]
    8a04:	f002 021f 	and.w	r2, r2, #31
    8a08:	2001      	movs	r0, #1
    8a0a:	fa00 f202 	lsl.w	r2, r0, r2
    8a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a12:	bf00      	nop
    8a14:	370c      	adds	r7, #12
    8a16:	46bd      	mov	sp, r7
    8a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1c:	4770      	bx	lr
    8a1e:	bf00      	nop
    8a20:	e000e100 	.word	0xe000e100

00008a24 <__NVIC_DisableIRQ>:
{
    8a24:	b480      	push	{r7}
    8a26:	b083      	sub	sp, #12
    8a28:	af00      	add	r7, sp, #0
    8a2a:	4603      	mov	r3, r0
    8a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a32:	2b00      	cmp	r3, #0
    8a34:	db10      	blt.n	8a58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a36:	490b      	ldr	r1, [pc, #44]	; (8a64 <__NVIC_DisableIRQ+0x40>)
    8a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a3c:	095b      	lsrs	r3, r3, #5
    8a3e:	88fa      	ldrh	r2, [r7, #6]
    8a40:	f002 021f 	and.w	r2, r2, #31
    8a44:	2001      	movs	r0, #1
    8a46:	fa00 f202 	lsl.w	r2, r0, r2
    8a4a:	3320      	adds	r3, #32
    8a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a54:	f3bf 8f6f 	isb	sy
}
    8a58:	bf00      	nop
    8a5a:	370c      	adds	r7, #12
    8a5c:	46bd      	mov	sp, r7
    8a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a62:	4770      	bx	lr
    8a64:	e000e100 	.word	0xe000e100

00008a68 <__NVIC_ClearPendingIRQ>:
{
    8a68:	b480      	push	{r7}
    8a6a:	b083      	sub	sp, #12
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	4603      	mov	r3, r0
    8a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a76:	2b00      	cmp	r3, #0
    8a78:	db0c      	blt.n	8a94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a7a:	4909      	ldr	r1, [pc, #36]	; (8aa0 <__NVIC_ClearPendingIRQ+0x38>)
    8a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a80:	095b      	lsrs	r3, r3, #5
    8a82:	88fa      	ldrh	r2, [r7, #6]
    8a84:	f002 021f 	and.w	r2, r2, #31
    8a88:	2001      	movs	r0, #1
    8a8a:	fa00 f202 	lsl.w	r2, r0, r2
    8a8e:	3360      	adds	r3, #96	; 0x60
    8a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a94:	bf00      	nop
    8a96:	370c      	adds	r7, #12
    8a98:	46bd      	mov	sp, r7
    8a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9e:	4770      	bx	lr
    8aa0:	e000e100 	.word	0xe000e100

00008aa4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8aa4:	b480      	push	{r7}
    8aa6:	b083      	sub	sp, #12
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	6078      	str	r0, [r7, #4]
    8aac:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    8aae:	bf00      	nop
    8ab0:	687b      	ldr	r3, [r7, #4]
    8ab2:	685a      	ldr	r2, [r3, #4]
    8ab4:	683b      	ldr	r3, [r7, #0]
    8ab6:	4013      	ands	r3, r2
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d1f9      	bne.n	8ab0 <hri_eic_wait_for_sync+0xc>
	};
}
    8abc:	bf00      	nop
    8abe:	370c      	adds	r7, #12
    8ac0:	46bd      	mov	sp, r7
    8ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac6:	4770      	bx	lr

00008ac8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8ac8:	b480      	push	{r7}
    8aca:	b083      	sub	sp, #12
    8acc:	af00      	add	r7, sp, #0
    8ace:	6078      	str	r0, [r7, #4]
    8ad0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	685a      	ldr	r2, [r3, #4]
    8ad6:	683b      	ldr	r3, [r7, #0]
    8ad8:	4013      	ands	r3, r2
    8ada:	2b00      	cmp	r3, #0
    8adc:	bf14      	ite	ne
    8ade:	2301      	movne	r3, #1
    8ae0:	2300      	moveq	r3, #0
    8ae2:	b2db      	uxtb	r3, r3
}
    8ae4:	4618      	mov	r0, r3
    8ae6:	370c      	adds	r7, #12
    8ae8:	46bd      	mov	sp, r7
    8aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aee:	4770      	bx	lr

00008af0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8af0:	b480      	push	{r7}
    8af2:	b083      	sub	sp, #12
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8af8:	687b      	ldr	r3, [r7, #4]
    8afa:	695b      	ldr	r3, [r3, #20]
}
    8afc:	4618      	mov	r0, r3
    8afe:	370c      	adds	r7, #12
    8b00:	46bd      	mov	sp, r7
    8b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b06:	4770      	bx	lr

00008b08 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8b08:	b480      	push	{r7}
    8b0a:	b083      	sub	sp, #12
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	6078      	str	r0, [r7, #4]
    8b10:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	683a      	ldr	r2, [r7, #0]
    8b16:	615a      	str	r2, [r3, #20]
}
    8b18:	bf00      	nop
    8b1a:	370c      	adds	r7, #12
    8b1c:	46bd      	mov	sp, r7
    8b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b22:	4770      	bx	lr

00008b24 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8b24:	b480      	push	{r7}
    8b26:	b083      	sub	sp, #12
    8b28:	af00      	add	r7, sp, #0
    8b2a:	6078      	str	r0, [r7, #4]
    8b2c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    8b2e:	687b      	ldr	r3, [r7, #4]
    8b30:	683a      	ldr	r2, [r7, #0]
    8b32:	611a      	str	r2, [r3, #16]
}
    8b34:	bf00      	nop
    8b36:	370c      	adds	r7, #12
    8b38:	46bd      	mov	sp, r7
    8b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b3e:	4770      	bx	lr

00008b40 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8b40:	b480      	push	{r7}
    8b42:	b083      	sub	sp, #12
    8b44:	af00      	add	r7, sp, #0
    8b46:	6078      	str	r0, [r7, #4]
    8b48:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	683a      	ldr	r2, [r7, #0]
    8b4e:	60da      	str	r2, [r3, #12]
}
    8b50:	bf00      	nop
    8b52:	370c      	adds	r7, #12
    8b54:	46bd      	mov	sp, r7
    8b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b5a:	4770      	bx	lr

00008b5c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b082      	sub	sp, #8
    8b60:	af00      	add	r7, sp, #0
    8b62:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	781b      	ldrb	r3, [r3, #0]
    8b68:	b2db      	uxtb	r3, r3
    8b6a:	f043 0302 	orr.w	r3, r3, #2
    8b6e:	b2da      	uxtb	r2, r3
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8b74:	2103      	movs	r1, #3
    8b76:	6878      	ldr	r0, [r7, #4]
    8b78:	4b02      	ldr	r3, [pc, #8]	; (8b84 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    8b7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b7c:	bf00      	nop
    8b7e:	3708      	adds	r7, #8
    8b80:	46bd      	mov	sp, r7
    8b82:	bd80      	pop	{r7, pc}
    8b84:	00008aa5 	.word	0x00008aa5

00008b88 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b082      	sub	sp, #8
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	b2db      	uxtb	r3, r3
    8b96:	f023 0302 	bic.w	r3, r3, #2
    8b9a:	b2da      	uxtb	r2, r3
    8b9c:	687b      	ldr	r3, [r7, #4]
    8b9e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8ba0:	2103      	movs	r1, #3
    8ba2:	6878      	ldr	r0, [r7, #4]
    8ba4:	4b02      	ldr	r3, [pc, #8]	; (8bb0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    8ba6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8ba8:	bf00      	nop
    8baa:	3708      	adds	r7, #8
    8bac:	46bd      	mov	sp, r7
    8bae:	bd80      	pop	{r7, pc}
    8bb0:	00008aa5 	.word	0x00008aa5

00008bb4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    8bb4:	b580      	push	{r7, lr}
    8bb6:	b084      	sub	sp, #16
    8bb8:	af00      	add	r7, sp, #0
    8bba:	6078      	str	r0, [r7, #4]
    8bbc:	460b      	mov	r3, r1
    8bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    8bc6:	7bfb      	ldrb	r3, [r7, #15]
    8bc8:	f023 0310 	bic.w	r3, r3, #16
    8bcc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    8bce:	78fb      	ldrb	r3, [r7, #3]
    8bd0:	011b      	lsls	r3, r3, #4
    8bd2:	b25a      	sxtb	r2, r3
    8bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8bd8:	4313      	orrs	r3, r2
    8bda:	b25b      	sxtb	r3, r3
    8bdc:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    8bde:	687b      	ldr	r3, [r7, #4]
    8be0:	7bfa      	ldrb	r2, [r7, #15]
    8be2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8be4:	2103      	movs	r1, #3
    8be6:	6878      	ldr	r0, [r7, #4]
    8be8:	4b02      	ldr	r3, [pc, #8]	; (8bf4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    8bea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8bec:	bf00      	nop
    8bee:	3710      	adds	r7, #16
    8bf0:	46bd      	mov	sp, r7
    8bf2:	bd80      	pop	{r7, pc}
    8bf4:	00008aa5 	.word	0x00008aa5

00008bf8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	b084      	sub	sp, #16
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
    8c00:	460b      	mov	r3, r1
    8c02:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8c04:	2103      	movs	r1, #3
    8c06:	6878      	ldr	r0, [r7, #4]
    8c08:	4b06      	ldr	r3, [pc, #24]	; (8c24 <hri_eic_get_CTRLA_reg+0x2c>)
    8c0a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8c12:	7bfa      	ldrb	r2, [r7, #15]
    8c14:	78fb      	ldrb	r3, [r7, #3]
    8c16:	4013      	ands	r3, r2
    8c18:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8c1a:	7bfb      	ldrb	r3, [r7, #15]
}
    8c1c:	4618      	mov	r0, r3
    8c1e:	3710      	adds	r7, #16
    8c20:	46bd      	mov	sp, r7
    8c22:	bd80      	pop	{r7, pc}
    8c24:	00008aa5 	.word	0x00008aa5

00008c28 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b082      	sub	sp, #8
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	6078      	str	r0, [r7, #4]
    8c30:	460b      	mov	r3, r1
    8c32:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	78fa      	ldrb	r2, [r7, #3]
    8c38:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8c3a:	2103      	movs	r1, #3
    8c3c:	6878      	ldr	r0, [r7, #4]
    8c3e:	4b03      	ldr	r3, [pc, #12]	; (8c4c <hri_eic_write_CTRLA_reg+0x24>)
    8c40:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8c42:	bf00      	nop
    8c44:	3708      	adds	r7, #8
    8c46:	46bd      	mov	sp, r7
    8c48:	bd80      	pop	{r7, pc}
    8c4a:	bf00      	nop
    8c4c:	00008aa5 	.word	0x00008aa5

00008c50 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8c50:	b480      	push	{r7}
    8c52:	b083      	sub	sp, #12
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
    8c58:	460b      	mov	r3, r1
    8c5a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	78fa      	ldrb	r2, [r7, #3]
    8c60:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8c62:	bf00      	nop
    8c64:	370c      	adds	r7, #12
    8c66:	46bd      	mov	sp, r7
    8c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c6c:	4770      	bx	lr

00008c6e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    8c6e:	b480      	push	{r7}
    8c70:	b083      	sub	sp, #12
    8c72:	af00      	add	r7, sp, #0
    8c74:	6078      	str	r0, [r7, #4]
    8c76:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8c78:	687b      	ldr	r3, [r7, #4]
    8c7a:	683a      	ldr	r2, [r7, #0]
    8c7c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8c7e:	bf00      	nop
    8c80:	370c      	adds	r7, #12
    8c82:	46bd      	mov	sp, r7
    8c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c88:	4770      	bx	lr

00008c8a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    8c8a:	b480      	push	{r7}
    8c8c:	b083      	sub	sp, #12
    8c8e:	af00      	add	r7, sp, #0
    8c90:	6078      	str	r0, [r7, #4]
    8c92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	683a      	ldr	r2, [r7, #0]
    8c98:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8c9a:	bf00      	nop
    8c9c:	370c      	adds	r7, #12
    8c9e:	46bd      	mov	sp, r7
    8ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca4:	4770      	bx	lr

00008ca6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    8ca6:	b480      	push	{r7}
    8ca8:	b085      	sub	sp, #20
    8caa:	af00      	add	r7, sp, #0
    8cac:	60f8      	str	r0, [r7, #12]
    8cae:	460b      	mov	r3, r1
    8cb0:	607a      	str	r2, [r7, #4]
    8cb2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    8cb4:	7afb      	ldrb	r3, [r7, #11]
    8cb6:	68fa      	ldr	r2, [r7, #12]
    8cb8:	3306      	adds	r3, #6
    8cba:	009b      	lsls	r3, r3, #2
    8cbc:	4413      	add	r3, r2
    8cbe:	687a      	ldr	r2, [r7, #4]
    8cc0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8cc2:	bf00      	nop
    8cc4:	3714      	adds	r7, #20
    8cc6:	46bd      	mov	sp, r7
    8cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ccc:	4770      	bx	lr

00008cce <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    8cce:	b480      	push	{r7}
    8cd0:	b083      	sub	sp, #12
    8cd2:	af00      	add	r7, sp, #0
    8cd4:	6078      	str	r0, [r7, #4]
    8cd6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	683a      	ldr	r2, [r7, #0]
    8cdc:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    8cde:	bf00      	nop
    8ce0:	370c      	adds	r7, #12
    8ce2:	46bd      	mov	sp, r7
    8ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce8:	4770      	bx	lr

00008cea <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    8cea:	b480      	push	{r7}
    8cec:	b083      	sub	sp, #12
    8cee:	af00      	add	r7, sp, #0
    8cf0:	6078      	str	r0, [r7, #4]
    8cf2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	683a      	ldr	r2, [r7, #0]
    8cf8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    8cfa:	bf00      	nop
    8cfc:	370c      	adds	r7, #12
    8cfe:	46bd      	mov	sp, r7
    8d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d04:	4770      	bx	lr
	...

00008d08 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b082      	sub	sp, #8
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8d10:	2101      	movs	r1, #1
    8d12:	484f      	ldr	r0, [pc, #316]	; (8e50 <_ext_irq_init+0x148>)
    8d14:	4b4f      	ldr	r3, [pc, #316]	; (8e54 <_ext_irq_init+0x14c>)
    8d16:	4798      	blx	r3
    8d18:	4603      	mov	r3, r0
    8d1a:	f083 0301 	eor.w	r3, r3, #1
    8d1e:	b2db      	uxtb	r3, r3
    8d20:	2b00      	cmp	r3, #0
    8d22:	d011      	beq.n	8d48 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8d24:	2102      	movs	r1, #2
    8d26:	484a      	ldr	r0, [pc, #296]	; (8e50 <_ext_irq_init+0x148>)
    8d28:	4b4b      	ldr	r3, [pc, #300]	; (8e58 <_ext_irq_init+0x150>)
    8d2a:	4798      	blx	r3
    8d2c:	4603      	mov	r3, r0
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d006      	beq.n	8d40 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8d32:	4847      	ldr	r0, [pc, #284]	; (8e50 <_ext_irq_init+0x148>)
    8d34:	4b49      	ldr	r3, [pc, #292]	; (8e5c <_ext_irq_init+0x154>)
    8d36:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8d38:	2102      	movs	r1, #2
    8d3a:	4845      	ldr	r0, [pc, #276]	; (8e50 <_ext_irq_init+0x148>)
    8d3c:	4b48      	ldr	r3, [pc, #288]	; (8e60 <_ext_irq_init+0x158>)
    8d3e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8d40:	2101      	movs	r1, #1
    8d42:	4843      	ldr	r0, [pc, #268]	; (8e50 <_ext_irq_init+0x148>)
    8d44:	4b47      	ldr	r3, [pc, #284]	; (8e64 <_ext_irq_init+0x15c>)
    8d46:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8d48:	2101      	movs	r1, #1
    8d4a:	4841      	ldr	r0, [pc, #260]	; (8e50 <_ext_irq_init+0x148>)
    8d4c:	4b44      	ldr	r3, [pc, #272]	; (8e60 <_ext_irq_init+0x158>)
    8d4e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8d50:	2100      	movs	r1, #0
    8d52:	483f      	ldr	r0, [pc, #252]	; (8e50 <_ext_irq_init+0x148>)
    8d54:	4b44      	ldr	r3, [pc, #272]	; (8e68 <_ext_irq_init+0x160>)
    8d56:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8d58:	2100      	movs	r1, #0
    8d5a:	483d      	ldr	r0, [pc, #244]	; (8e50 <_ext_irq_init+0x148>)
    8d5c:	4b43      	ldr	r3, [pc, #268]	; (8e6c <_ext_irq_init+0x164>)
    8d5e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8d60:	2100      	movs	r1, #0
    8d62:	483b      	ldr	r0, [pc, #236]	; (8e50 <_ext_irq_init+0x148>)
    8d64:	4b42      	ldr	r3, [pc, #264]	; (8e70 <_ext_irq_init+0x168>)
    8d66:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8d68:	f240 31bb 	movw	r1, #955	; 0x3bb
    8d6c:	4838      	ldr	r0, [pc, #224]	; (8e50 <_ext_irq_init+0x148>)
    8d6e:	4b41      	ldr	r3, [pc, #260]	; (8e74 <_ext_irq_init+0x16c>)
    8d70:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8d72:	f240 313b 	movw	r1, #827	; 0x33b
    8d76:	4836      	ldr	r0, [pc, #216]	; (8e50 <_ext_irq_init+0x148>)
    8d78:	4b3f      	ldr	r3, [pc, #252]	; (8e78 <_ext_irq_init+0x170>)
    8d7a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    8d7c:	2100      	movs	r1, #0
    8d7e:	4834      	ldr	r0, [pc, #208]	; (8e50 <_ext_irq_init+0x148>)
    8d80:	4b3e      	ldr	r3, [pc, #248]	; (8e7c <_ext_irq_init+0x174>)
    8d82:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8d84:	4a3e      	ldr	r2, [pc, #248]	; (8e80 <_ext_irq_init+0x178>)
    8d86:	2100      	movs	r1, #0
    8d88:	4831      	ldr	r0, [pc, #196]	; (8e50 <_ext_irq_init+0x148>)
    8d8a:	4b3e      	ldr	r3, [pc, #248]	; (8e84 <_ext_irq_init+0x17c>)
    8d8c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8d8e:	2211      	movs	r2, #17
    8d90:	2101      	movs	r1, #1
    8d92:	482f      	ldr	r0, [pc, #188]	; (8e50 <_ext_irq_init+0x148>)
    8d94:	4b3b      	ldr	r3, [pc, #236]	; (8e84 <_ext_irq_init+0x17c>)
    8d96:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    8d98:	482d      	ldr	r0, [pc, #180]	; (8e50 <_ext_irq_init+0x148>)
    8d9a:	4b3b      	ldr	r3, [pc, #236]	; (8e88 <_ext_irq_init+0x180>)
    8d9c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    8d9e:	200c      	movs	r0, #12
    8da0:	4b3a      	ldr	r3, [pc, #232]	; (8e8c <_ext_irq_init+0x184>)
    8da2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    8da4:	200c      	movs	r0, #12
    8da6:	4b3a      	ldr	r3, [pc, #232]	; (8e90 <_ext_irq_init+0x188>)
    8da8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    8daa:	200c      	movs	r0, #12
    8dac:	4b39      	ldr	r3, [pc, #228]	; (8e94 <_ext_irq_init+0x18c>)
    8dae:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    8db0:	200d      	movs	r0, #13
    8db2:	4b36      	ldr	r3, [pc, #216]	; (8e8c <_ext_irq_init+0x184>)
    8db4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    8db6:	200d      	movs	r0, #13
    8db8:	4b35      	ldr	r3, [pc, #212]	; (8e90 <_ext_irq_init+0x188>)
    8dba:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    8dbc:	200d      	movs	r0, #13
    8dbe:	4b35      	ldr	r3, [pc, #212]	; (8e94 <_ext_irq_init+0x18c>)
    8dc0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    8dc2:	200f      	movs	r0, #15
    8dc4:	4b31      	ldr	r3, [pc, #196]	; (8e8c <_ext_irq_init+0x184>)
    8dc6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    8dc8:	200f      	movs	r0, #15
    8dca:	4b31      	ldr	r3, [pc, #196]	; (8e90 <_ext_irq_init+0x188>)
    8dcc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    8dce:	200f      	movs	r0, #15
    8dd0:	4b30      	ldr	r3, [pc, #192]	; (8e94 <_ext_irq_init+0x18c>)
    8dd2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    8dd4:	2010      	movs	r0, #16
    8dd6:	4b2d      	ldr	r3, [pc, #180]	; (8e8c <_ext_irq_init+0x184>)
    8dd8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    8dda:	2010      	movs	r0, #16
    8ddc:	4b2c      	ldr	r3, [pc, #176]	; (8e90 <_ext_irq_init+0x188>)
    8dde:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    8de0:	2010      	movs	r0, #16
    8de2:	4b2c      	ldr	r3, [pc, #176]	; (8e94 <_ext_irq_init+0x18c>)
    8de4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    8de6:	2011      	movs	r0, #17
    8de8:	4b28      	ldr	r3, [pc, #160]	; (8e8c <_ext_irq_init+0x184>)
    8dea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    8dec:	2011      	movs	r0, #17
    8dee:	4b28      	ldr	r3, [pc, #160]	; (8e90 <_ext_irq_init+0x188>)
    8df0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    8df2:	2011      	movs	r0, #17
    8df4:	4b27      	ldr	r3, [pc, #156]	; (8e94 <_ext_irq_init+0x18c>)
    8df6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    8df8:	2012      	movs	r0, #18
    8dfa:	4b24      	ldr	r3, [pc, #144]	; (8e8c <_ext_irq_init+0x184>)
    8dfc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    8dfe:	2012      	movs	r0, #18
    8e00:	4b23      	ldr	r3, [pc, #140]	; (8e90 <_ext_irq_init+0x188>)
    8e02:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    8e04:	2012      	movs	r0, #18
    8e06:	4b23      	ldr	r3, [pc, #140]	; (8e94 <_ext_irq_init+0x18c>)
    8e08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    8e0a:	2013      	movs	r0, #19
    8e0c:	4b1f      	ldr	r3, [pc, #124]	; (8e8c <_ext_irq_init+0x184>)
    8e0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    8e10:	2013      	movs	r0, #19
    8e12:	4b1f      	ldr	r3, [pc, #124]	; (8e90 <_ext_irq_init+0x188>)
    8e14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    8e16:	2013      	movs	r0, #19
    8e18:	4b1e      	ldr	r3, [pc, #120]	; (8e94 <_ext_irq_init+0x18c>)
    8e1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    8e1c:	2014      	movs	r0, #20
    8e1e:	4b1b      	ldr	r3, [pc, #108]	; (8e8c <_ext_irq_init+0x184>)
    8e20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    8e22:	2014      	movs	r0, #20
    8e24:	4b1a      	ldr	r3, [pc, #104]	; (8e90 <_ext_irq_init+0x188>)
    8e26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    8e28:	2014      	movs	r0, #20
    8e2a:	4b1a      	ldr	r3, [pc, #104]	; (8e94 <_ext_irq_init+0x18c>)
    8e2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    8e2e:	2015      	movs	r0, #21
    8e30:	4b16      	ldr	r3, [pc, #88]	; (8e8c <_ext_irq_init+0x184>)
    8e32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    8e34:	2015      	movs	r0, #21
    8e36:	4b16      	ldr	r3, [pc, #88]	; (8e90 <_ext_irq_init+0x188>)
    8e38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    8e3a:	2015      	movs	r0, #21
    8e3c:	4b15      	ldr	r3, [pc, #84]	; (8e94 <_ext_irq_init+0x18c>)
    8e3e:	4798      	blx	r3

	callback = cb;
    8e40:	4a15      	ldr	r2, [pc, #84]	; (8e98 <_ext_irq_init+0x190>)
    8e42:	687b      	ldr	r3, [r7, #4]
    8e44:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    8e46:	2300      	movs	r3, #0
}
    8e48:	4618      	mov	r0, r3
    8e4a:	3708      	adds	r7, #8
    8e4c:	46bd      	mov	sp, r7
    8e4e:	bd80      	pop	{r7, pc}
    8e50:	40002800 	.word	0x40002800
    8e54:	00008ac9 	.word	0x00008ac9
    8e58:	00008bf9 	.word	0x00008bf9
    8e5c:	00008b89 	.word	0x00008b89
    8e60:	00008aa5 	.word	0x00008aa5
    8e64:	00008c29 	.word	0x00008c29
    8e68:	00008bb5 	.word	0x00008bb5
    8e6c:	00008c51 	.word	0x00008c51
    8e70:	00008c6f 	.word	0x00008c6f
    8e74:	00008c8b 	.word	0x00008c8b
    8e78:	00008ccf 	.word	0x00008ccf
    8e7c:	00008ceb 	.word	0x00008ceb
    8e80:	90999013 	.word	0x90999013
    8e84:	00008ca7 	.word	0x00008ca7
    8e88:	00008b5d 	.word	0x00008b5d
    8e8c:	00008a25 	.word	0x00008a25
    8e90:	00008a69 	.word	0x00008a69
    8e94:	000089e9 	.word	0x000089e9
    8e98:	20001920 	.word	0x20001920

00008e9c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    8e9c:	b580      	push	{r7, lr}
    8e9e:	b084      	sub	sp, #16
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	6078      	str	r0, [r7, #4]
    8ea4:	460b      	mov	r3, r1
    8ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    8ea8:	23ff      	movs	r3, #255	; 0xff
    8eaa:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    8eac:	2300      	movs	r3, #0
    8eae:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    8eb0:	e010      	b.n	8ed4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    8eb2:	7bbb      	ldrb	r3, [r7, #14]
    8eb4:	4a1c      	ldr	r2, [pc, #112]	; (8f28 <_ext_irq_enable+0x8c>)
    8eb6:	00db      	lsls	r3, r3, #3
    8eb8:	4413      	add	r3, r2
    8eba:	685a      	ldr	r2, [r3, #4]
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	429a      	cmp	r2, r3
    8ec0:	d105      	bne.n	8ece <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    8ec2:	7bbb      	ldrb	r3, [r7, #14]
    8ec4:	4a18      	ldr	r2, [pc, #96]	; (8f28 <_ext_irq_enable+0x8c>)
    8ec6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8eca:	73fb      	strb	r3, [r7, #15]
			break;
    8ecc:	e005      	b.n	8eda <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    8ece:	7bbb      	ldrb	r3, [r7, #14]
    8ed0:	3301      	adds	r3, #1
    8ed2:	73bb      	strb	r3, [r7, #14]
    8ed4:	7bbb      	ldrb	r3, [r7, #14]
    8ed6:	2b08      	cmp	r3, #8
    8ed8:	d9eb      	bls.n	8eb2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    8eda:	7bfb      	ldrb	r3, [r7, #15]
    8edc:	2bff      	cmp	r3, #255	; 0xff
    8ede:	d102      	bne.n	8ee6 <_ext_irq_enable+0x4a>
		return -1;
    8ee0:	f04f 33ff 	mov.w	r3, #4294967295
    8ee4:	e01c      	b.n	8f20 <_ext_irq_enable+0x84>
	}

	if (enable) {
    8ee6:	78fb      	ldrb	r3, [r7, #3]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d008      	beq.n	8efe <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    8eec:	7bfb      	ldrb	r3, [r7, #15]
    8eee:	2201      	movs	r2, #1
    8ef0:	fa02 f303 	lsl.w	r3, r2, r3
    8ef4:	4619      	mov	r1, r3
    8ef6:	480d      	ldr	r0, [pc, #52]	; (8f2c <_ext_irq_enable+0x90>)
    8ef8:	4b0d      	ldr	r3, [pc, #52]	; (8f30 <_ext_irq_enable+0x94>)
    8efa:	4798      	blx	r3
    8efc:	e00f      	b.n	8f1e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    8efe:	7bfb      	ldrb	r3, [r7, #15]
    8f00:	2201      	movs	r2, #1
    8f02:	fa02 f303 	lsl.w	r3, r2, r3
    8f06:	4619      	mov	r1, r3
    8f08:	4808      	ldr	r0, [pc, #32]	; (8f2c <_ext_irq_enable+0x90>)
    8f0a:	4b0a      	ldr	r3, [pc, #40]	; (8f34 <_ext_irq_enable+0x98>)
    8f0c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    8f0e:	7bfb      	ldrb	r3, [r7, #15]
    8f10:	2201      	movs	r2, #1
    8f12:	fa02 f303 	lsl.w	r3, r2, r3
    8f16:	4619      	mov	r1, r3
    8f18:	4804      	ldr	r0, [pc, #16]	; (8f2c <_ext_irq_enable+0x90>)
    8f1a:	4b07      	ldr	r3, [pc, #28]	; (8f38 <_ext_irq_enable+0x9c>)
    8f1c:	4798      	blx	r3
	}

	return ERR_NONE;
    8f1e:	2300      	movs	r3, #0
}
    8f20:	4618      	mov	r0, r3
    8f22:	3710      	adds	r7, #16
    8f24:	46bd      	mov	sp, r7
    8f26:	bd80      	pop	{r7, pc}
    8f28:	0001cc60 	.word	0x0001cc60
    8f2c:	40002800 	.word	0x40002800
    8f30:	00008b25 	.word	0x00008b25
    8f34:	00008b41 	.word	0x00008b41
    8f38:	00008b09 	.word	0x00008b09

00008f3c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    8f3c:	b580      	push	{r7, lr}
    8f3e:	b084      	sub	sp, #16
    8f40:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    8f42:	4841      	ldr	r0, [pc, #260]	; (9048 <_ext_irq_handler+0x10c>)
    8f44:	4b41      	ldr	r3, [pc, #260]	; (904c <_ext_irq_handler+0x110>)
    8f46:	4798      	blx	r3
    8f48:	4603      	mov	r3, r0
    8f4a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    8f4c:	f04f 33ff 	mov.w	r3, #4294967295
    8f50:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    8f52:	683b      	ldr	r3, [r7, #0]
    8f54:	4619      	mov	r1, r3
    8f56:	483c      	ldr	r0, [pc, #240]	; (9048 <_ext_irq_handler+0x10c>)
    8f58:	4b3d      	ldr	r3, [pc, #244]	; (9050 <_ext_irq_handler+0x114>)
    8f5a:	4798      	blx	r3

	ASSERT(callback);
    8f5c:	4b3d      	ldr	r3, [pc, #244]	; (9054 <_ext_irq_handler+0x118>)
    8f5e:	681b      	ldr	r3, [r3, #0]
    8f60:	2b00      	cmp	r3, #0
    8f62:	bf14      	ite	ne
    8f64:	2301      	movne	r3, #1
    8f66:	2300      	moveq	r3, #0
    8f68:	b2db      	uxtb	r3, r3
    8f6a:	f44f 7284 	mov.w	r2, #264	; 0x108
    8f6e:	493a      	ldr	r1, [pc, #232]	; (9058 <_ext_irq_handler+0x11c>)
    8f70:	4618      	mov	r0, r3
    8f72:	4b3a      	ldr	r3, [pc, #232]	; (905c <_ext_irq_handler+0x120>)
    8f74:	4798      	blx	r3

	while (flags) {
    8f76:	e060      	b.n	903a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    8f78:	683b      	ldr	r3, [r7, #0]
    8f7a:	4618      	mov	r0, r3
    8f7c:	4b38      	ldr	r3, [pc, #224]	; (9060 <_ext_irq_handler+0x124>)
    8f7e:	4798      	blx	r3
    8f80:	4603      	mov	r3, r0
    8f82:	b2db      	uxtb	r3, r3
    8f84:	3b01      	subs	r3, #1
    8f86:	b2db      	uxtb	r3, r3
    8f88:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8f8a:	e047      	b.n	901c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    8f8c:	2300      	movs	r3, #0
    8f8e:	71fb      	strb	r3, [r7, #7]
    8f90:	2309      	movs	r3, #9
    8f92:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    8f94:	e024      	b.n	8fe0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    8f96:	79ba      	ldrb	r2, [r7, #6]
    8f98:	79fb      	ldrb	r3, [r7, #7]
    8f9a:	4413      	add	r3, r2
    8f9c:	105b      	asrs	r3, r3, #1
    8f9e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    8fa0:	797b      	ldrb	r3, [r7, #5]
    8fa2:	4a30      	ldr	r2, [pc, #192]	; (9064 <_ext_irq_handler+0x128>)
    8fa4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8fa8:	461a      	mov	r2, r3
    8faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8fae:	429a      	cmp	r2, r3
    8fb0:	d106      	bne.n	8fc0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    8fb2:	797b      	ldrb	r3, [r7, #5]
    8fb4:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ext_irq_handler+0x128>)
    8fb6:	00db      	lsls	r3, r3, #3
    8fb8:	4413      	add	r3, r2
    8fba:	685b      	ldr	r3, [r3, #4]
    8fbc:	60bb      	str	r3, [r7, #8]
					break;
    8fbe:	e013      	b.n	8fe8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    8fc0:	797b      	ldrb	r3, [r7, #5]
    8fc2:	4a28      	ldr	r2, [pc, #160]	; (9064 <_ext_irq_handler+0x128>)
    8fc4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8fc8:	461a      	mov	r2, r3
    8fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8fce:	429a      	cmp	r2, r3
    8fd0:	da03      	bge.n	8fda <_ext_irq_handler+0x9e>
					lower = middle + 1;
    8fd2:	797b      	ldrb	r3, [r7, #5]
    8fd4:	3301      	adds	r3, #1
    8fd6:	71fb      	strb	r3, [r7, #7]
    8fd8:	e002      	b.n	8fe0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    8fda:	797b      	ldrb	r3, [r7, #5]
    8fdc:	3b01      	subs	r3, #1
    8fde:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    8fe0:	79ba      	ldrb	r2, [r7, #6]
    8fe2:	79fb      	ldrb	r3, [r7, #7]
    8fe4:	429a      	cmp	r2, r3
    8fe6:	d2d6      	bcs.n	8f96 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    8fe8:	68bb      	ldr	r3, [r7, #8]
    8fea:	f1b3 3fff 	cmp.w	r3, #4294967295
    8fee:	d003      	beq.n	8ff8 <_ext_irq_handler+0xbc>
				callback(pin);
    8ff0:	4b18      	ldr	r3, [pc, #96]	; (9054 <_ext_irq_handler+0x118>)
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	68b8      	ldr	r0, [r7, #8]
    8ff6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    8ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8ffc:	2201      	movs	r2, #1
    8ffe:	fa02 f303 	lsl.w	r3, r2, r3
    9002:	43da      	mvns	r2, r3
    9004:	683b      	ldr	r3, [r7, #0]
    9006:	4013      	ands	r3, r2
    9008:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    900a:	683b      	ldr	r3, [r7, #0]
    900c:	4618      	mov	r0, r3
    900e:	4b14      	ldr	r3, [pc, #80]	; (9060 <_ext_irq_handler+0x124>)
    9010:	4798      	blx	r3
    9012:	4603      	mov	r3, r0
    9014:	b2db      	uxtb	r3, r3
    9016:	3b01      	subs	r3, #1
    9018:	b2db      	uxtb	r3, r3
    901a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    901c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9020:	f1b3 3fff 	cmp.w	r3, #4294967295
    9024:	d1b2      	bne.n	8f8c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    9026:	4808      	ldr	r0, [pc, #32]	; (9048 <_ext_irq_handler+0x10c>)
    9028:	4b08      	ldr	r3, [pc, #32]	; (904c <_ext_irq_handler+0x110>)
    902a:	4798      	blx	r3
    902c:	4603      	mov	r3, r0
    902e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    9030:	683b      	ldr	r3, [r7, #0]
    9032:	4619      	mov	r1, r3
    9034:	4804      	ldr	r0, [pc, #16]	; (9048 <_ext_irq_handler+0x10c>)
    9036:	4b06      	ldr	r3, [pc, #24]	; (9050 <_ext_irq_handler+0x114>)
    9038:	4798      	blx	r3
	while (flags) {
    903a:	683b      	ldr	r3, [r7, #0]
    903c:	2b00      	cmp	r3, #0
    903e:	d19b      	bne.n	8f78 <_ext_irq_handler+0x3c>
	}
}
    9040:	bf00      	nop
    9042:	3710      	adds	r7, #16
    9044:	46bd      	mov	sp, r7
    9046:	bd80      	pop	{r7, pc}
    9048:	40002800 	.word	0x40002800
    904c:	00008af1 	.word	0x00008af1
    9050:	00008b09 	.word	0x00008b09
    9054:	20001920 	.word	0x20001920
    9058:	0001cca8 	.word	0x0001cca8
    905c:	00007b0d 	.word	0x00007b0d
    9060:	0001c4b5 	.word	0x0001c4b5
    9064:	0001cc60 	.word	0x0001cc60

00009068 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    9068:	b580      	push	{r7, lr}
    906a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    906c:	4b01      	ldr	r3, [pc, #4]	; (9074 <EIC_0_Handler+0xc>)
    906e:	4798      	blx	r3
} /**
    9070:	bf00      	nop
    9072:	bd80      	pop	{r7, pc}
    9074:	00008f3d 	.word	0x00008f3d

00009078 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    9078:	b580      	push	{r7, lr}
    907a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    907c:	4b01      	ldr	r3, [pc, #4]	; (9084 <EIC_1_Handler+0xc>)
    907e:	4798      	blx	r3
} /**
    9080:	bf00      	nop
    9082:	bd80      	pop	{r7, pc}
    9084:	00008f3d 	.word	0x00008f3d

00009088 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    9088:	b580      	push	{r7, lr}
    908a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    908c:	4b01      	ldr	r3, [pc, #4]	; (9094 <EIC_3_Handler+0xc>)
    908e:	4798      	blx	r3
} /**
    9090:	bf00      	nop
    9092:	bd80      	pop	{r7, pc}
    9094:	00008f3d 	.word	0x00008f3d

00009098 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    9098:	b580      	push	{r7, lr}
    909a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    909c:	4b01      	ldr	r3, [pc, #4]	; (90a4 <EIC_4_Handler+0xc>)
    909e:	4798      	blx	r3
} /**
    90a0:	bf00      	nop
    90a2:	bd80      	pop	{r7, pc}
    90a4:	00008f3d 	.word	0x00008f3d

000090a8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    90a8:	b580      	push	{r7, lr}
    90aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    90ac:	4b01      	ldr	r3, [pc, #4]	; (90b4 <EIC_5_Handler+0xc>)
    90ae:	4798      	blx	r3
} /**
    90b0:	bf00      	nop
    90b2:	bd80      	pop	{r7, pc}
    90b4:	00008f3d 	.word	0x00008f3d

000090b8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    90b8:	b580      	push	{r7, lr}
    90ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    90bc:	4b01      	ldr	r3, [pc, #4]	; (90c4 <EIC_6_Handler+0xc>)
    90be:	4798      	blx	r3
} /**
    90c0:	bf00      	nop
    90c2:	bd80      	pop	{r7, pc}
    90c4:	00008f3d 	.word	0x00008f3d

000090c8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    90c8:	b580      	push	{r7, lr}
    90ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    90cc:	4b01      	ldr	r3, [pc, #4]	; (90d4 <EIC_7_Handler+0xc>)
    90ce:	4798      	blx	r3
} /**
    90d0:	bf00      	nop
    90d2:	bd80      	pop	{r7, pc}
    90d4:	00008f3d 	.word	0x00008f3d

000090d8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    90d8:	b580      	push	{r7, lr}
    90da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    90dc:	4b01      	ldr	r3, [pc, #4]	; (90e4 <EIC_8_Handler+0xc>)
    90de:	4798      	blx	r3
} /**
    90e0:	bf00      	nop
    90e2:	bd80      	pop	{r7, pc}
    90e4:	00008f3d 	.word	0x00008f3d

000090e8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    90e8:	b580      	push	{r7, lr}
    90ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    90ec:	4b01      	ldr	r3, [pc, #4]	; (90f4 <EIC_9_Handler+0xc>)
    90ee:	4798      	blx	r3
}
    90f0:	bf00      	nop
    90f2:	bd80      	pop	{r7, pc}
    90f4:	00008f3d 	.word	0x00008f3d

000090f8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    90f8:	b480      	push	{r7}
    90fa:	b085      	sub	sp, #20
    90fc:	af00      	add	r7, sp, #0
    90fe:	60f8      	str	r0, [r7, #12]
    9100:	460b      	mov	r3, r1
    9102:	607a      	str	r2, [r7, #4]
    9104:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    9106:	7afa      	ldrb	r2, [r7, #11]
    9108:	68fb      	ldr	r3, [r7, #12]
    910a:	3248      	adds	r2, #72	; 0x48
    910c:	6879      	ldr	r1, [r7, #4]
    910e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    9112:	bf00      	nop
    9114:	3714      	adds	r7, #20
    9116:	46bd      	mov	sp, r7
    9118:	f85d 7b04 	ldr.w	r7, [sp], #4
    911c:	4770      	bx	lr

0000911e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    911e:	b480      	push	{r7}
    9120:	b083      	sub	sp, #12
    9122:	af00      	add	r7, sp, #0
    9124:	6078      	str	r0, [r7, #4]
    9126:	460b      	mov	r3, r1
    9128:	70fb      	strb	r3, [r7, #3]
    912a:	4613      	mov	r3, r2
    912c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    912e:	78fb      	ldrb	r3, [r7, #3]
    9130:	687a      	ldr	r2, [r7, #4]
    9132:	3304      	adds	r3, #4
    9134:	00db      	lsls	r3, r3, #3
    9136:	4413      	add	r3, r2
    9138:	78ba      	ldrb	r2, [r7, #2]
    913a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    913c:	78fb      	ldrb	r3, [r7, #3]
    913e:	78ba      	ldrb	r2, [r7, #2]
    9140:	43d2      	mvns	r2, r2
    9142:	b2d1      	uxtb	r1, r2
    9144:	687a      	ldr	r2, [r7, #4]
    9146:	3304      	adds	r3, #4
    9148:	00db      	lsls	r3, r3, #3
    914a:	4413      	add	r3, r2
    914c:	460a      	mov	r2, r1
    914e:	711a      	strb	r2, [r3, #4]
}
    9150:	bf00      	nop
    9152:	370c      	adds	r7, #12
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr

0000915c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    915c:	b480      	push	{r7}
    915e:	b085      	sub	sp, #20
    9160:	af00      	add	r7, sp, #0
    9162:	60f8      	str	r0, [r7, #12]
    9164:	460b      	mov	r3, r1
    9166:	607a      	str	r2, [r7, #4]
    9168:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    916a:	7afa      	ldrb	r2, [r7, #11]
    916c:	68fb      	ldr	r3, [r7, #12]
    916e:	3204      	adds	r2, #4
    9170:	6879      	ldr	r1, [r7, #4]
    9172:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    9176:	bf00      	nop
    9178:	3714      	adds	r7, #20
    917a:	46bd      	mov	sp, r7
    917c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9180:	4770      	bx	lr
	...

00009184 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    9184:	b580      	push	{r7, lr}
    9186:	b082      	sub	sp, #8
    9188:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    918a:	2300      	movs	r3, #0
    918c:	71fb      	strb	r3, [r7, #7]
    918e:	e00b      	b.n	91a8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    9190:	79fb      	ldrb	r3, [r7, #7]
    9192:	4a18      	ldr	r2, [pc, #96]	; (91f4 <_event_system_init+0x70>)
    9194:	5cd3      	ldrb	r3, [r2, r3]
    9196:	461a      	mov	r2, r3
    9198:	79fb      	ldrb	r3, [r7, #7]
    919a:	4619      	mov	r1, r3
    919c:	4816      	ldr	r0, [pc, #88]	; (91f8 <_event_system_init+0x74>)
    919e:	4b17      	ldr	r3, [pc, #92]	; (91fc <_event_system_init+0x78>)
    91a0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    91a2:	79fb      	ldrb	r3, [r7, #7]
    91a4:	3301      	adds	r3, #1
    91a6:	71fb      	strb	r3, [r7, #7]
    91a8:	79fb      	ldrb	r3, [r7, #7]
    91aa:	2b42      	cmp	r3, #66	; 0x42
    91ac:	d9f0      	bls.n	9190 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    91ae:	2300      	movs	r3, #0
    91b0:	71fb      	strb	r3, [r7, #7]
    91b2:	e016      	b.n	91e2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    91b4:	79fb      	ldrb	r3, [r7, #7]
    91b6:	4a12      	ldr	r2, [pc, #72]	; (9200 <_event_system_init+0x7c>)
    91b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    91bc:	461a      	mov	r2, r3
    91be:	79fb      	ldrb	r3, [r7, #7]
    91c0:	4619      	mov	r1, r3
    91c2:	480d      	ldr	r0, [pc, #52]	; (91f8 <_event_system_init+0x74>)
    91c4:	4b0f      	ldr	r3, [pc, #60]	; (9204 <_event_system_init+0x80>)
    91c6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    91c8:	79fb      	ldrb	r3, [r7, #7]
    91ca:	4a0f      	ldr	r2, [pc, #60]	; (9208 <_event_system_init+0x84>)
    91cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d0:	b2da      	uxtb	r2, r3
    91d2:	79fb      	ldrb	r3, [r7, #7]
    91d4:	4619      	mov	r1, r3
    91d6:	4808      	ldr	r0, [pc, #32]	; (91f8 <_event_system_init+0x74>)
    91d8:	4b0c      	ldr	r3, [pc, #48]	; (920c <_event_system_init+0x88>)
    91da:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    91dc:	79fb      	ldrb	r3, [r7, #7]
    91de:	3301      	adds	r3, #1
    91e0:	71fb      	strb	r3, [r7, #7]
    91e2:	79fb      	ldrb	r3, [r7, #7]
    91e4:	2b1f      	cmp	r3, #31
    91e6:	d9e5      	bls.n	91b4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    91e8:	2300      	movs	r3, #0
}
    91ea:	4618      	mov	r0, r3
    91ec:	3708      	adds	r7, #8
    91ee:	46bd      	mov	sp, r7
    91f0:	bd80      	pop	{r7, pc}
    91f2:	bf00      	nop
    91f4:	0001ccc0 	.word	0x0001ccc0
    91f8:	4100e000 	.word	0x4100e000
    91fc:	000090f9 	.word	0x000090f9
    9200:	0001cd04 	.word	0x0001cd04
    9204:	0000915d 	.word	0x0000915d
    9208:	0001cd44 	.word	0x0001cd44
    920c:	0000911f 	.word	0x0000911f

00009210 <hri_gclk_wait_for_sync>:
{
    9210:	b480      	push	{r7}
    9212:	b083      	sub	sp, #12
    9214:	af00      	add	r7, sp, #0
    9216:	6078      	str	r0, [r7, #4]
    9218:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    921a:	bf00      	nop
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	685a      	ldr	r2, [r3, #4]
    9220:	683b      	ldr	r3, [r7, #0]
    9222:	4013      	ands	r3, r2
    9224:	2b00      	cmp	r3, #0
    9226:	d1f9      	bne.n	921c <hri_gclk_wait_for_sync+0xc>
}
    9228:	bf00      	nop
    922a:	370c      	adds	r7, #12
    922c:	46bd      	mov	sp, r7
    922e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9232:	4770      	bx	lr

00009234 <hri_gclk_write_GENCTRL_reg>:
{
    9234:	b580      	push	{r7, lr}
    9236:	b084      	sub	sp, #16
    9238:	af00      	add	r7, sp, #0
    923a:	60f8      	str	r0, [r7, #12]
    923c:	460b      	mov	r3, r1
    923e:	607a      	str	r2, [r7, #4]
    9240:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9242:	7afa      	ldrb	r2, [r7, #11]
    9244:	68fb      	ldr	r3, [r7, #12]
    9246:	3208      	adds	r2, #8
    9248:	6879      	ldr	r1, [r7, #4]
    924a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    924e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    9252:	68f8      	ldr	r0, [r7, #12]
    9254:	4b02      	ldr	r3, [pc, #8]	; (9260 <hri_gclk_write_GENCTRL_reg+0x2c>)
    9256:	4798      	blx	r3
}
    9258:	bf00      	nop
    925a:	3710      	adds	r7, #16
    925c:	46bd      	mov	sp, r7
    925e:	bd80      	pop	{r7, pc}
    9260:	00009211 	.word	0x00009211

00009264 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    9264:	b580      	push	{r7, lr}
    9266:	b082      	sub	sp, #8
    9268:	af00      	add	r7, sp, #0
    926a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	f003 0301 	and.w	r3, r3, #1
    9272:	2b00      	cmp	r3, #0
    9274:	d004      	beq.n	9280 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    9276:	4a36      	ldr	r2, [pc, #216]	; (9350 <_gclk_init_generators_by_fref+0xec>)
    9278:	2100      	movs	r1, #0
    927a:	4836      	ldr	r0, [pc, #216]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    927c:	4b36      	ldr	r3, [pc, #216]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    927e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    9280:	687b      	ldr	r3, [r7, #4]
    9282:	f003 0302 	and.w	r3, r3, #2
    9286:	2b00      	cmp	r3, #0
    9288:	d004      	beq.n	9294 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    928a:	4a34      	ldr	r2, [pc, #208]	; (935c <_gclk_init_generators_by_fref+0xf8>)
    928c:	2101      	movs	r1, #1
    928e:	4831      	ldr	r0, [pc, #196]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    9290:	4b31      	ldr	r3, [pc, #196]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    9292:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	f003 0304 	and.w	r3, r3, #4
    929a:	2b00      	cmp	r3, #0
    929c:	d004      	beq.n	92a8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    929e:	4a30      	ldr	r2, [pc, #192]	; (9360 <_gclk_init_generators_by_fref+0xfc>)
    92a0:	2102      	movs	r1, #2
    92a2:	482c      	ldr	r0, [pc, #176]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    92a4:	4b2c      	ldr	r3, [pc, #176]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    92a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	f003 0308 	and.w	r3, r3, #8
    92ae:	2b00      	cmp	r3, #0
    92b0:	d004      	beq.n	92bc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    92b2:	4a2c      	ldr	r2, [pc, #176]	; (9364 <_gclk_init_generators_by_fref+0x100>)
    92b4:	2103      	movs	r1, #3
    92b6:	4827      	ldr	r0, [pc, #156]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    92b8:	4b27      	ldr	r3, [pc, #156]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    92ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	f003 0310 	and.w	r3, r3, #16
    92c2:	2b00      	cmp	r3, #0
    92c4:	d004      	beq.n	92d0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    92c6:	4a28      	ldr	r2, [pc, #160]	; (9368 <_gclk_init_generators_by_fref+0x104>)
    92c8:	2104      	movs	r1, #4
    92ca:	4822      	ldr	r0, [pc, #136]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    92cc:	4b22      	ldr	r3, [pc, #136]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    92ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	f003 0320 	and.w	r3, r3, #32
    92d6:	2b00      	cmp	r3, #0
    92d8:	d004      	beq.n	92e4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    92da:	4a24      	ldr	r2, [pc, #144]	; (936c <_gclk_init_generators_by_fref+0x108>)
    92dc:	2105      	movs	r1, #5
    92de:	481d      	ldr	r0, [pc, #116]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    92e0:	4b1d      	ldr	r3, [pc, #116]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    92e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    92ea:	2b00      	cmp	r3, #0
    92ec:	d004      	beq.n	92f8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    92ee:	4a20      	ldr	r2, [pc, #128]	; (9370 <_gclk_init_generators_by_fref+0x10c>)
    92f0:	2106      	movs	r1, #6
    92f2:	4818      	ldr	r0, [pc, #96]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    92f4:	4b18      	ldr	r3, [pc, #96]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    92f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    92fe:	2b00      	cmp	r3, #0
    9300:	d004      	beq.n	930c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    9302:	4a1c      	ldr	r2, [pc, #112]	; (9374 <_gclk_init_generators_by_fref+0x110>)
    9304:	2107      	movs	r1, #7
    9306:	4813      	ldr	r0, [pc, #76]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    9308:	4b13      	ldr	r3, [pc, #76]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    930a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9312:	2b00      	cmp	r3, #0
    9314:	d004      	beq.n	9320 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    9316:	4a18      	ldr	r2, [pc, #96]	; (9378 <_gclk_init_generators_by_fref+0x114>)
    9318:	2108      	movs	r1, #8
    931a:	480e      	ldr	r0, [pc, #56]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    931c:	4b0e      	ldr	r3, [pc, #56]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    931e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9326:	2b00      	cmp	r3, #0
    9328:	d004      	beq.n	9334 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    932a:	4a14      	ldr	r2, [pc, #80]	; (937c <_gclk_init_generators_by_fref+0x118>)
    932c:	210a      	movs	r1, #10
    932e:	4809      	ldr	r0, [pc, #36]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    9330:	4b09      	ldr	r3, [pc, #36]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    9332:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    9334:	687b      	ldr	r3, [r7, #4]
    9336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    933a:	2b00      	cmp	r3, #0
    933c:	d004      	beq.n	9348 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    933e:	4a10      	ldr	r2, [pc, #64]	; (9380 <_gclk_init_generators_by_fref+0x11c>)
    9340:	210b      	movs	r1, #11
    9342:	4804      	ldr	r0, [pc, #16]	; (9354 <_gclk_init_generators_by_fref+0xf0>)
    9344:	4b04      	ldr	r3, [pc, #16]	; (9358 <_gclk_init_generators_by_fref+0xf4>)
    9346:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9348:	bf00      	nop
    934a:	3708      	adds	r7, #8
    934c:	46bd      	mov	sp, r7
    934e:	bd80      	pop	{r7, pc}
    9350:	00010107 	.word	0x00010107
    9354:	40001c00 	.word	0x40001c00
    9358:	00009235 	.word	0x00009235
    935c:	00010907 	.word	0x00010907
    9360:	00010906 	.word	0x00010906
    9364:	00020908 	.word	0x00020908
    9368:	00010901 	.word	0x00010901
    936c:	00062901 	.word	0x00062901
    9370:	000c2901 	.word	0x000c2901
    9374:	00082908 	.word	0x00082908
    9378:	00032901 	.word	0x00032901
    937c:	00010905 	.word	0x00010905
    9380:	00041905 	.word	0x00041905

00009384 <hri_mclk_write_CPUDIV_reg>:
{
    9384:	b480      	push	{r7}
    9386:	b083      	sub	sp, #12
    9388:	af00      	add	r7, sp, #0
    938a:	6078      	str	r0, [r7, #4]
    938c:	460b      	mov	r3, r1
    938e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	78fa      	ldrb	r2, [r7, #3]
    9394:	715a      	strb	r2, [r3, #5]
}
    9396:	bf00      	nop
    9398:	370c      	adds	r7, #12
    939a:	46bd      	mov	sp, r7
    939c:	f85d 7b04 	ldr.w	r7, [sp], #4
    93a0:	4770      	bx	lr
	...

000093a4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    93a4:	b580      	push	{r7, lr}
    93a6:	b082      	sub	sp, #8
    93a8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    93aa:	4b05      	ldr	r3, [pc, #20]	; (93c0 <_mclk_init+0x1c>)
    93ac:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    93ae:	2101      	movs	r1, #1
    93b0:	6878      	ldr	r0, [r7, #4]
    93b2:	4b04      	ldr	r3, [pc, #16]	; (93c4 <_mclk_init+0x20>)
    93b4:	4798      	blx	r3
}
    93b6:	bf00      	nop
    93b8:	3708      	adds	r7, #8
    93ba:	46bd      	mov	sp, r7
    93bc:	bd80      	pop	{r7, pc}
    93be:	bf00      	nop
    93c0:	40000800 	.word	0x40000800
    93c4:	00009385 	.word	0x00009385

000093c8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    93c8:	b480      	push	{r7}
    93ca:	b083      	sub	sp, #12
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
    93d0:	460b      	mov	r3, r1
    93d2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	78fa      	ldrb	r2, [r7, #3]
    93d8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    93da:	bf00      	nop
    93dc:	370c      	adds	r7, #12
    93de:	46bd      	mov	sp, r7
    93e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e4:	4770      	bx	lr

000093e6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    93e6:	b480      	push	{r7}
    93e8:	b083      	sub	sp, #12
    93ea:	af00      	add	r7, sp, #0
    93ec:	6078      	str	r0, [r7, #4]
    93ee:	460b      	mov	r3, r1
    93f0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	887a      	ldrh	r2, [r7, #2]
    93f6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    93f8:	bf00      	nop
    93fa:	370c      	adds	r7, #12
    93fc:	46bd      	mov	sp, r7
    93fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9402:	4770      	bx	lr

00009404 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9404:	b480      	push	{r7}
    9406:	b083      	sub	sp, #12
    9408:	af00      	add	r7, sp, #0
    940a:	6078      	str	r0, [r7, #4]
    940c:	460b      	mov	r3, r1
    940e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    9410:	687b      	ldr	r3, [r7, #4]
    9412:	78fa      	ldrb	r2, [r7, #3]
    9414:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9416:	bf00      	nop
    9418:	370c      	adds	r7, #12
    941a:	46bd      	mov	sp, r7
    941c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9420:	4770      	bx	lr

00009422 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    9422:	b480      	push	{r7}
    9424:	b083      	sub	sp, #12
    9426:	af00      	add	r7, sp, #0
    9428:	6078      	str	r0, [r7, #4]
    942a:	460b      	mov	r3, r1
    942c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    942e:	687b      	ldr	r3, [r7, #4]
    9430:	78fa      	ldrb	r2, [r7, #3]
    9432:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9434:	bf00      	nop
    9436:	370c      	adds	r7, #12
    9438:	46bd      	mov	sp, r7
    943a:	f85d 7b04 	ldr.w	r7, [sp], #4
    943e:	4770      	bx	lr

00009440 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    9440:	b480      	push	{r7}
    9442:	b085      	sub	sp, #20
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9448:	687b      	ldr	r3, [r7, #4]
    944a:	69db      	ldr	r3, [r3, #28]
    944c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    944e:	68fb      	ldr	r3, [r7, #12]
    9450:	0a1b      	lsrs	r3, r3, #8
    9452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9456:	60fb      	str	r3, [r7, #12]
	return tmp;
    9458:	68fb      	ldr	r3, [r7, #12]
}
    945a:	4618      	mov	r0, r3
    945c:	3714      	adds	r7, #20
    945e:	46bd      	mov	sp, r7
    9460:	f85d 7b04 	ldr.w	r7, [sp], #4
    9464:	4770      	bx	lr

00009466 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    9466:	b480      	push	{r7}
    9468:	b083      	sub	sp, #12
    946a:	af00      	add	r7, sp, #0
    946c:	6078      	str	r0, [r7, #4]
    946e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	683a      	ldr	r2, [r7, #0]
    9474:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9476:	bf00      	nop
    9478:	370c      	adds	r7, #12
    947a:	46bd      	mov	sp, r7
    947c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9480:	4770      	bx	lr
	...

00009484 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    9484:	b580      	push	{r7, lr}
    9486:	b082      	sub	sp, #8
    9488:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    948a:	4b13      	ldr	r3, [pc, #76]	; (94d8 <_osc32kctrl_init_sources+0x54>)
    948c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    948e:	2300      	movs	r3, #0
    9490:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    9492:	f242 018e 	movw	r1, #8334	; 0x208e
    9496:	6878      	ldr	r0, [r7, #4]
    9498:	4b10      	ldr	r3, [pc, #64]	; (94dc <_osc32kctrl_init_sources+0x58>)
    949a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    949c:	2100      	movs	r1, #0
    949e:	6878      	ldr	r0, [r7, #4]
    94a0:	4b0f      	ldr	r3, [pc, #60]	; (94e0 <_osc32kctrl_init_sources+0x5c>)
    94a2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    94a4:	2100      	movs	r1, #0
    94a6:	6878      	ldr	r0, [r7, #4]
    94a8:	4b0e      	ldr	r3, [pc, #56]	; (94e4 <_osc32kctrl_init_sources+0x60>)
    94aa:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    94ac:	6878      	ldr	r0, [r7, #4]
    94ae:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <_osc32kctrl_init_sources+0x64>)
    94b0:	4798      	blx	r3
    94b2:	4603      	mov	r3, r0
    94b4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    94b6:	887b      	ldrh	r3, [r7, #2]
    94b8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    94ba:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    94be:	4619      	mov	r1, r3
    94c0:	6878      	ldr	r0, [r7, #4]
    94c2:	4b0a      	ldr	r3, [pc, #40]	; (94ec <_osc32kctrl_init_sources+0x68>)
    94c4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    94c6:	2100      	movs	r1, #0
    94c8:	6878      	ldr	r0, [r7, #4]
    94ca:	4b09      	ldr	r3, [pc, #36]	; (94f0 <_osc32kctrl_init_sources+0x6c>)
    94cc:	4798      	blx	r3
	(void)calib;
}
    94ce:	bf00      	nop
    94d0:	3708      	adds	r7, #8
    94d2:	46bd      	mov	sp, r7
    94d4:	bd80      	pop	{r7, pc}
    94d6:	bf00      	nop
    94d8:	40001400 	.word	0x40001400
    94dc:	000093e7 	.word	0x000093e7
    94e0:	00009405 	.word	0x00009405
    94e4:	00009423 	.word	0x00009423
    94e8:	00009441 	.word	0x00009441
    94ec:	00009467 	.word	0x00009467
    94f0:	000093c9 	.word	0x000093c9

000094f4 <hri_gclk_wait_for_sync>:
{
    94f4:	b480      	push	{r7}
    94f6:	b083      	sub	sp, #12
    94f8:	af00      	add	r7, sp, #0
    94fa:	6078      	str	r0, [r7, #4]
    94fc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    94fe:	bf00      	nop
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	685a      	ldr	r2, [r3, #4]
    9504:	683b      	ldr	r3, [r7, #0]
    9506:	4013      	ands	r3, r2
    9508:	2b00      	cmp	r3, #0
    950a:	d1f9      	bne.n	9500 <hri_gclk_wait_for_sync+0xc>
}
    950c:	bf00      	nop
    950e:	370c      	adds	r7, #12
    9510:	46bd      	mov	sp, r7
    9512:	f85d 7b04 	ldr.w	r7, [sp], #4
    9516:	4770      	bx	lr

00009518 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9518:	b480      	push	{r7}
    951a:	b083      	sub	sp, #12
    951c:	af00      	add	r7, sp, #0
    951e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	685b      	ldr	r3, [r3, #4]
    9524:	089b      	lsrs	r3, r3, #2
    9526:	f003 0301 	and.w	r3, r3, #1
    952a:	2b00      	cmp	r3, #0
    952c:	bf14      	ite	ne
    952e:	2301      	movne	r3, #1
    9530:	2300      	moveq	r3, #0
    9532:	b2db      	uxtb	r3, r3
}
    9534:	4618      	mov	r0, r3
    9536:	370c      	adds	r7, #12
    9538:	46bd      	mov	sp, r7
    953a:	f85d 7b04 	ldr.w	r7, [sp], #4
    953e:	4770      	bx	lr

00009540 <hri_gclk_read_SYNCBUSY_reg>:
{
    9540:	b480      	push	{r7}
    9542:	b083      	sub	sp, #12
    9544:	af00      	add	r7, sp, #0
    9546:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	685b      	ldr	r3, [r3, #4]
}
    954c:	4618      	mov	r0, r3
    954e:	370c      	adds	r7, #12
    9550:	46bd      	mov	sp, r7
    9552:	f85d 7b04 	ldr.w	r7, [sp], #4
    9556:	4770      	bx	lr

00009558 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9558:	b580      	push	{r7, lr}
    955a:	b086      	sub	sp, #24
    955c:	af00      	add	r7, sp, #0
    955e:	60f8      	str	r0, [r7, #12]
    9560:	460b      	mov	r3, r1
    9562:	607a      	str	r2, [r7, #4]
    9564:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    9566:	7afa      	ldrb	r2, [r7, #11]
    9568:	68fb      	ldr	r3, [r7, #12]
    956a:	3208      	adds	r2, #8
    956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9570:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    9572:	697b      	ldr	r3, [r7, #20]
    9574:	f023 030f 	bic.w	r3, r3, #15
    9578:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	f003 030f 	and.w	r3, r3, #15
    9580:	697a      	ldr	r2, [r7, #20]
    9582:	4313      	orrs	r3, r2
    9584:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    9586:	7afa      	ldrb	r2, [r7, #11]
    9588:	68fb      	ldr	r3, [r7, #12]
    958a:	3208      	adds	r2, #8
    958c:	6979      	ldr	r1, [r7, #20]
    958e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    9592:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    9596:	68f8      	ldr	r0, [r7, #12]
    9598:	4b02      	ldr	r3, [pc, #8]	; (95a4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    959a:	4798      	blx	r3
}
    959c:	bf00      	nop
    959e:	3718      	adds	r7, #24
    95a0:	46bd      	mov	sp, r7
    95a2:	bd80      	pop	{r7, pc}
    95a4:	000094f5 	.word	0x000094f5

000095a8 <hri_gclk_write_PCHCTRL_reg>:
{
    95a8:	b480      	push	{r7}
    95aa:	b085      	sub	sp, #20
    95ac:	af00      	add	r7, sp, #0
    95ae:	60f8      	str	r0, [r7, #12]
    95b0:	460b      	mov	r3, r1
    95b2:	607a      	str	r2, [r7, #4]
    95b4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    95b6:	7afa      	ldrb	r2, [r7, #11]
    95b8:	68fb      	ldr	r3, [r7, #12]
    95ba:	3220      	adds	r2, #32
    95bc:	6879      	ldr	r1, [r7, #4]
    95be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    95c2:	bf00      	nop
    95c4:	3714      	adds	r7, #20
    95c6:	46bd      	mov	sp, r7
    95c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95cc:	4770      	bx	lr

000095ce <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    95ce:	b480      	push	{r7}
    95d0:	b085      	sub	sp, #20
    95d2:	af00      	add	r7, sp, #0
    95d4:	60f8      	str	r0, [r7, #12]
    95d6:	460b      	mov	r3, r1
    95d8:	607a      	str	r2, [r7, #4]
    95da:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    95dc:	bf00      	nop
    95de:	7afa      	ldrb	r2, [r7, #11]
    95e0:	68f9      	ldr	r1, [r7, #12]
    95e2:	4613      	mov	r3, r2
    95e4:	009b      	lsls	r3, r3, #2
    95e6:	4413      	add	r3, r2
    95e8:	009b      	lsls	r3, r3, #2
    95ea:	440b      	add	r3, r1
    95ec:	333c      	adds	r3, #60	; 0x3c
    95ee:	681a      	ldr	r2, [r3, #0]
    95f0:	687b      	ldr	r3, [r7, #4]
    95f2:	4013      	ands	r3, r2
    95f4:	2b00      	cmp	r3, #0
    95f6:	d1f2      	bne.n	95de <hri_oscctrl_wait_for_sync+0x10>
	};
}
    95f8:	bf00      	nop
    95fa:	3714      	adds	r7, #20
    95fc:	46bd      	mov	sp, r7
    95fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9602:	4770      	bx	lr

00009604 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9604:	b480      	push	{r7}
    9606:	b083      	sub	sp, #12
    9608:	af00      	add	r7, sp, #0
    960a:	6078      	str	r0, [r7, #4]
    960c:	460b      	mov	r3, r1
    960e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    9610:	78fa      	ldrb	r2, [r7, #3]
    9612:	6879      	ldr	r1, [r7, #4]
    9614:	4613      	mov	r3, r2
    9616:	009b      	lsls	r3, r3, #2
    9618:	4413      	add	r3, r2
    961a:	009b      	lsls	r3, r3, #2
    961c:	440b      	add	r3, r1
    961e:	3340      	adds	r3, #64	; 0x40
    9620:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    9622:	f003 0301 	and.w	r3, r3, #1
    9626:	2b00      	cmp	r3, #0
    9628:	bf14      	ite	ne
    962a:	2301      	movne	r3, #1
    962c:	2300      	moveq	r3, #0
    962e:	b2db      	uxtb	r3, r3
}
    9630:	4618      	mov	r0, r3
    9632:	370c      	adds	r7, #12
    9634:	46bd      	mov	sp, r7
    9636:	f85d 7b04 	ldr.w	r7, [sp], #4
    963a:	4770      	bx	lr

0000963c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    963c:	b480      	push	{r7}
    963e:	b083      	sub	sp, #12
    9640:	af00      	add	r7, sp, #0
    9642:	6078      	str	r0, [r7, #4]
    9644:	460b      	mov	r3, r1
    9646:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9648:	78fa      	ldrb	r2, [r7, #3]
    964a:	6879      	ldr	r1, [r7, #4]
    964c:	4613      	mov	r3, r2
    964e:	009b      	lsls	r3, r3, #2
    9650:	4413      	add	r3, r2
    9652:	009b      	lsls	r3, r3, #2
    9654:	440b      	add	r3, r1
    9656:	3340      	adds	r3, #64	; 0x40
    9658:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    965a:	085b      	lsrs	r3, r3, #1
    965c:	f003 0301 	and.w	r3, r3, #1
    9660:	2b00      	cmp	r3, #0
    9662:	bf14      	ite	ne
    9664:	2301      	movne	r3, #1
    9666:	2300      	moveq	r3, #0
    9668:	b2db      	uxtb	r3, r3
}
    966a:	4618      	mov	r0, r3
    966c:	370c      	adds	r7, #12
    966e:	46bd      	mov	sp, r7
    9670:	f85d 7b04 	ldr.w	r7, [sp], #4
    9674:	4770      	bx	lr
	...

00009678 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9678:	b580      	push	{r7, lr}
    967a:	b082      	sub	sp, #8
    967c:	af00      	add	r7, sp, #0
    967e:	6078      	str	r0, [r7, #4]
    9680:	460b      	mov	r3, r1
    9682:	70fb      	strb	r3, [r7, #3]
    9684:	4613      	mov	r3, r2
    9686:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9688:	78fa      	ldrb	r2, [r7, #3]
    968a:	6879      	ldr	r1, [r7, #4]
    968c:	4613      	mov	r3, r2
    968e:	009b      	lsls	r3, r3, #2
    9690:	4413      	add	r3, r2
    9692:	009b      	lsls	r3, r3, #2
    9694:	440b      	add	r3, r1
    9696:	3330      	adds	r3, #48	; 0x30
    9698:	78ba      	ldrb	r2, [r7, #2]
    969a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    969c:	78fb      	ldrb	r3, [r7, #3]
    969e:	2202      	movs	r2, #2
    96a0:	4619      	mov	r1, r3
    96a2:	6878      	ldr	r0, [r7, #4]
    96a4:	4b02      	ldr	r3, [pc, #8]	; (96b0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    96a6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    96a8:	bf00      	nop
    96aa:	3708      	adds	r7, #8
    96ac:	46bd      	mov	sp, r7
    96ae:	bd80      	pop	{r7, pc}
    96b0:	000095cf 	.word	0x000095cf

000096b4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    96b4:	b580      	push	{r7, lr}
    96b6:	b084      	sub	sp, #16
    96b8:	af00      	add	r7, sp, #0
    96ba:	60f8      	str	r0, [r7, #12]
    96bc:	460b      	mov	r3, r1
    96be:	607a      	str	r2, [r7, #4]
    96c0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    96c2:	7afa      	ldrb	r2, [r7, #11]
    96c4:	68f9      	ldr	r1, [r7, #12]
    96c6:	4613      	mov	r3, r2
    96c8:	009b      	lsls	r3, r3, #2
    96ca:	4413      	add	r3, r2
    96cc:	009b      	lsls	r3, r3, #2
    96ce:	440b      	add	r3, r1
    96d0:	3334      	adds	r3, #52	; 0x34
    96d2:	687a      	ldr	r2, [r7, #4]
    96d4:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    96d6:	7afb      	ldrb	r3, [r7, #11]
    96d8:	2206      	movs	r2, #6
    96da:	4619      	mov	r1, r3
    96dc:	68f8      	ldr	r0, [r7, #12]
    96de:	4b03      	ldr	r3, [pc, #12]	; (96ec <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    96e0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    96e2:	bf00      	nop
    96e4:	3710      	adds	r7, #16
    96e6:	46bd      	mov	sp, r7
    96e8:	bd80      	pop	{r7, pc}
    96ea:	bf00      	nop
    96ec:	000095cf 	.word	0x000095cf

000096f0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    96f0:	b480      	push	{r7}
    96f2:	b085      	sub	sp, #20
    96f4:	af00      	add	r7, sp, #0
    96f6:	60f8      	str	r0, [r7, #12]
    96f8:	460b      	mov	r3, r1
    96fa:	607a      	str	r2, [r7, #4]
    96fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    96fe:	7afa      	ldrb	r2, [r7, #11]
    9700:	68f9      	ldr	r1, [r7, #12]
    9702:	4613      	mov	r3, r2
    9704:	009b      	lsls	r3, r3, #2
    9706:	4413      	add	r3, r2
    9708:	009b      	lsls	r3, r3, #2
    970a:	440b      	add	r3, r1
    970c:	3338      	adds	r3, #56	; 0x38
    970e:	687a      	ldr	r2, [r7, #4]
    9710:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9712:	bf00      	nop
    9714:	3714      	adds	r7, #20
    9716:	46bd      	mov	sp, r7
    9718:	f85d 7b04 	ldr.w	r7, [sp], #4
    971c:	4770      	bx	lr

0000971e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    971e:	b480      	push	{r7}
    9720:	b083      	sub	sp, #12
    9722:	af00      	add	r7, sp, #0
    9724:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9726:	687b      	ldr	r3, [r7, #4]
    9728:	691b      	ldr	r3, [r3, #16]
    972a:	085b      	lsrs	r3, r3, #1
    972c:	f003 0301 	and.w	r3, r3, #1
    9730:	2b00      	cmp	r3, #0
    9732:	bf14      	ite	ne
    9734:	2301      	movne	r3, #1
    9736:	2300      	moveq	r3, #0
    9738:	b2db      	uxtb	r3, r3
}
    973a:	4618      	mov	r0, r3
    973c:	370c      	adds	r7, #12
    973e:	46bd      	mov	sp, r7
    9740:	f85d 7b04 	ldr.w	r7, [sp], #4
    9744:	4770      	bx	lr

00009746 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9746:	b480      	push	{r7}
    9748:	b083      	sub	sp, #12
    974a:	af00      	add	r7, sp, #0
    974c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    974e:	687b      	ldr	r3, [r7, #4]
    9750:	691b      	ldr	r3, [r3, #16]
    9752:	0a1b      	lsrs	r3, r3, #8
    9754:	f003 0301 	and.w	r3, r3, #1
    9758:	2b00      	cmp	r3, #0
    975a:	bf14      	ite	ne
    975c:	2301      	movne	r3, #1
    975e:	2300      	moveq	r3, #0
    9760:	b2db      	uxtb	r3, r3
}
    9762:	4618      	mov	r0, r3
    9764:	370c      	adds	r7, #12
    9766:	46bd      	mov	sp, r7
    9768:	f85d 7b04 	ldr.w	r7, [sp], #4
    976c:	4770      	bx	lr

0000976e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    976e:	b480      	push	{r7}
    9770:	b085      	sub	sp, #20
    9772:	af00      	add	r7, sp, #0
    9774:	6078      	str	r0, [r7, #4]
    9776:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	691b      	ldr	r3, [r3, #16]
    977c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    977e:	68fa      	ldr	r2, [r7, #12]
    9780:	683b      	ldr	r3, [r7, #0]
    9782:	4013      	ands	r3, r2
    9784:	60fb      	str	r3, [r7, #12]
	return tmp;
    9786:	68fb      	ldr	r3, [r7, #12]
}
    9788:	4618      	mov	r0, r3
    978a:	3714      	adds	r7, #20
    978c:	46bd      	mov	sp, r7
    978e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9792:	4770      	bx	lr

00009794 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    9794:	b480      	push	{r7}
    9796:	b085      	sub	sp, #20
    9798:	af00      	add	r7, sp, #0
    979a:	60f8      	str	r0, [r7, #12]
    979c:	460b      	mov	r3, r1
    979e:	607a      	str	r2, [r7, #4]
    97a0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    97a2:	7afb      	ldrb	r3, [r7, #11]
    97a4:	68fa      	ldr	r2, [r7, #12]
    97a6:	3304      	adds	r3, #4
    97a8:	009b      	lsls	r3, r3, #2
    97aa:	4413      	add	r3, r2
    97ac:	687a      	ldr	r2, [r7, #4]
    97ae:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    97b0:	bf00      	nop
    97b2:	3714      	adds	r7, #20
    97b4:	46bd      	mov	sp, r7
    97b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    97ba:	4770      	bx	lr

000097bc <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    97bc:	b480      	push	{r7}
    97be:	b083      	sub	sp, #12
    97c0:	af00      	add	r7, sp, #0
    97c2:	6078      	str	r0, [r7, #4]
    97c4:	460b      	mov	r3, r1
    97c6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    97c8:	687b      	ldr	r3, [r7, #4]
    97ca:	78fa      	ldrb	r2, [r7, #3]
    97cc:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    97ce:	bf00      	nop
    97d0:	370c      	adds	r7, #12
    97d2:	46bd      	mov	sp, r7
    97d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    97d8:	4770      	bx	lr

000097da <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    97da:	b480      	push	{r7}
    97dc:	b085      	sub	sp, #20
    97de:	af00      	add	r7, sp, #0
    97e0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	f893 3020 	ldrb.w	r3, [r3, #32]
    97e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    97ea:	7bfb      	ldrb	r3, [r7, #15]
    97ec:	f003 0301 	and.w	r3, r3, #1
    97f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    97f2:	7bfb      	ldrb	r3, [r7, #15]
    97f4:	2b00      	cmp	r3, #0
    97f6:	bf14      	ite	ne
    97f8:	2301      	movne	r3, #1
    97fa:	2300      	moveq	r3, #0
    97fc:	b2db      	uxtb	r3, r3
}
    97fe:	4618      	mov	r0, r3
    9800:	3714      	adds	r7, #20
    9802:	46bd      	mov	sp, r7
    9804:	f85d 7b04 	ldr.w	r7, [sp], #4
    9808:	4770      	bx	lr

0000980a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    980a:	b480      	push	{r7}
    980c:	b083      	sub	sp, #12
    980e:	af00      	add	r7, sp, #0
    9810:	6078      	str	r0, [r7, #4]
    9812:	460b      	mov	r3, r1
    9814:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9816:	687b      	ldr	r3, [r7, #4]
    9818:	78fa      	ldrb	r2, [r7, #3]
    981a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    981e:	bf00      	nop
    9820:	370c      	adds	r7, #12
    9822:	46bd      	mov	sp, r7
    9824:	f85d 7b04 	ldr.w	r7, [sp], #4
    9828:	4770      	bx	lr

0000982a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    982a:	b480      	push	{r7}
    982c:	b083      	sub	sp, #12
    982e:	af00      	add	r7, sp, #0
    9830:	6078      	str	r0, [r7, #4]
    9832:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	683a      	ldr	r2, [r7, #0]
    9838:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    983a:	bf00      	nop
    983c:	370c      	adds	r7, #12
    983e:	46bd      	mov	sp, r7
    9840:	f85d 7b04 	ldr.w	r7, [sp], #4
    9844:	4770      	bx	lr

00009846 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9846:	b480      	push	{r7}
    9848:	b083      	sub	sp, #12
    984a:	af00      	add	r7, sp, #0
    984c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    984e:	687b      	ldr	r3, [r7, #4]
    9850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9852:	4618      	mov	r0, r3
    9854:	370c      	adds	r7, #12
    9856:	46bd      	mov	sp, r7
    9858:	f85d 7b04 	ldr.w	r7, [sp], #4
    985c:	4770      	bx	lr

0000985e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    985e:	b480      	push	{r7}
    9860:	b083      	sub	sp, #12
    9862:	af00      	add	r7, sp, #0
    9864:	6078      	str	r0, [r7, #4]
    9866:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9868:	687b      	ldr	r3, [r7, #4]
    986a:	683a      	ldr	r2, [r7, #0]
    986c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    986e:	bf00      	nop
    9870:	370c      	adds	r7, #12
    9872:	46bd      	mov	sp, r7
    9874:	f85d 7b04 	ldr.w	r7, [sp], #4
    9878:	4770      	bx	lr

0000987a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    987a:	b480      	push	{r7}
    987c:	b085      	sub	sp, #20
    987e:	af00      	add	r7, sp, #0
    9880:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9882:	687b      	ldr	r3, [r7, #4]
    9884:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9888:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    988a:	7bfb      	ldrb	r3, [r7, #15]
    988c:	085b      	lsrs	r3, r3, #1
    988e:	b2db      	uxtb	r3, r3
    9890:	f003 0301 	and.w	r3, r3, #1
    9894:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9896:	7bfb      	ldrb	r3, [r7, #15]
    9898:	2b00      	cmp	r3, #0
    989a:	bf14      	ite	ne
    989c:	2301      	movne	r3, #1
    989e:	2300      	moveq	r3, #0
    98a0:	b2db      	uxtb	r3, r3
}
    98a2:	4618      	mov	r0, r3
    98a4:	3714      	adds	r7, #20
    98a6:	46bd      	mov	sp, r7
    98a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ac:	4770      	bx	lr

000098ae <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    98ae:	b480      	push	{r7}
    98b0:	b085      	sub	sp, #20
    98b2:	af00      	add	r7, sp, #0
    98b4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    98bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    98be:	7bfb      	ldrb	r3, [r7, #15]
    98c0:	089b      	lsrs	r3, r3, #2
    98c2:	b2db      	uxtb	r3, r3
    98c4:	f003 0301 	and.w	r3, r3, #1
    98c8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    98ca:	7bfb      	ldrb	r3, [r7, #15]
    98cc:	2b00      	cmp	r3, #0
    98ce:	bf14      	ite	ne
    98d0:	2301      	movne	r3, #1
    98d2:	2300      	moveq	r3, #0
    98d4:	b2db      	uxtb	r3, r3
}
    98d6:	4618      	mov	r0, r3
    98d8:	3714      	adds	r7, #20
    98da:	46bd      	mov	sp, r7
    98dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    98e0:	4770      	bx	lr

000098e2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    98e2:	b480      	push	{r7}
    98e4:	b085      	sub	sp, #20
    98e6:	af00      	add	r7, sp, #0
    98e8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    98f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    98f2:	7bfb      	ldrb	r3, [r7, #15]
    98f4:	08db      	lsrs	r3, r3, #3
    98f6:	b2db      	uxtb	r3, r3
    98f8:	f003 0301 	and.w	r3, r3, #1
    98fc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    98fe:	7bfb      	ldrb	r3, [r7, #15]
    9900:	2b00      	cmp	r3, #0
    9902:	bf14      	ite	ne
    9904:	2301      	movne	r3, #1
    9906:	2300      	moveq	r3, #0
    9908:	b2db      	uxtb	r3, r3
}
    990a:	4618      	mov	r0, r3
    990c:	3714      	adds	r7, #20
    990e:	46bd      	mov	sp, r7
    9910:	f85d 7b04 	ldr.w	r7, [sp], #4
    9914:	4770      	bx	lr

00009916 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9916:	b480      	push	{r7}
    9918:	b085      	sub	sp, #20
    991a:	af00      	add	r7, sp, #0
    991c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9924:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9926:	7bfb      	ldrb	r3, [r7, #15]
    9928:	091b      	lsrs	r3, r3, #4
    992a:	b2db      	uxtb	r3, r3
    992c:	f003 0301 	and.w	r3, r3, #1
    9930:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9932:	7bfb      	ldrb	r3, [r7, #15]
    9934:	2b00      	cmp	r3, #0
    9936:	bf14      	ite	ne
    9938:	2301      	movne	r3, #1
    993a:	2300      	moveq	r3, #0
    993c:	b2db      	uxtb	r3, r3
}
    993e:	4618      	mov	r0, r3
    9940:	3714      	adds	r7, #20
    9942:	46bd      	mov	sp, r7
    9944:	f85d 7b04 	ldr.w	r7, [sp], #4
    9948:	4770      	bx	lr
	...

0000994c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    994c:	b580      	push	{r7, lr}
    994e:	b082      	sub	sp, #8
    9950:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9952:	4b0a      	ldr	r3, [pc, #40]	; (997c <_oscctrl_init_sources+0x30>)
    9954:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9956:	4a0a      	ldr	r2, [pc, #40]	; (9980 <_oscctrl_init_sources+0x34>)
    9958:	2101      	movs	r1, #1
    995a:	6878      	ldr	r0, [r7, #4]
    995c:	4b09      	ldr	r3, [pc, #36]	; (9984 <_oscctrl_init_sources+0x38>)
    995e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9960:	bf00      	nop
    9962:	6878      	ldr	r0, [r7, #4]
    9964:	4b08      	ldr	r3, [pc, #32]	; (9988 <_oscctrl_init_sources+0x3c>)
    9966:	4798      	blx	r3
    9968:	4603      	mov	r3, r0
    996a:	f083 0301 	eor.w	r3, r3, #1
    996e:	b2db      	uxtb	r3, r3
    9970:	2b00      	cmp	r3, #0
    9972:	d1f6      	bne.n	9962 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9974:	bf00      	nop
    9976:	3708      	adds	r7, #8
    9978:	46bd      	mov	sp, r7
    997a:	bd80      	pop	{r7, pc}
    997c:	40001000 	.word	0x40001000
    9980:	03002646 	.word	0x03002646
    9984:	00009795 	.word	0x00009795
    9988:	0000971f 	.word	0x0000971f

0000998c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    998c:	b580      	push	{r7, lr}
    998e:	b084      	sub	sp, #16
    9990:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9992:	4b6b      	ldr	r3, [pc, #428]	; (9b40 <_oscctrl_init_referenced_generators+0x1b4>)
    9994:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9996:	2204      	movs	r2, #4
    9998:	2100      	movs	r1, #0
    999a:	486a      	ldr	r0, [pc, #424]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    999c:	4b6a      	ldr	r3, [pc, #424]	; (9b48 <_oscctrl_init_referenced_generators+0x1bc>)
    999e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    99a0:	bf00      	nop
    99a2:	4868      	ldr	r0, [pc, #416]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    99a4:	4b69      	ldr	r3, [pc, #420]	; (9b4c <_oscctrl_init_referenced_generators+0x1c0>)
    99a6:	4798      	blx	r3
    99a8:	4603      	mov	r3, r0
    99aa:	2b00      	cmp	r3, #0
    99ac:	d1f9      	bne.n	99a2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    99ae:	2100      	movs	r1, #0
    99b0:	68f8      	ldr	r0, [r7, #12]
    99b2:	4b67      	ldr	r3, [pc, #412]	; (9b50 <_oscctrl_init_referenced_generators+0x1c4>)
    99b4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    99b6:	4967      	ldr	r1, [pc, #412]	; (9b54 <_oscctrl_init_referenced_generators+0x1c8>)
    99b8:	68f8      	ldr	r0, [r7, #12]
    99ba:	4b67      	ldr	r3, [pc, #412]	; (9b58 <_oscctrl_init_referenced_generators+0x1cc>)
    99bc:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    99be:	bf00      	nop
    99c0:	68f8      	ldr	r0, [r7, #12]
    99c2:	4b66      	ldr	r3, [pc, #408]	; (9b5c <_oscctrl_init_referenced_generators+0x1d0>)
    99c4:	4798      	blx	r3
    99c6:	4603      	mov	r3, r0
    99c8:	2b00      	cmp	r3, #0
    99ca:	d1f9      	bne.n	99c0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    99cc:	2100      	movs	r1, #0
    99ce:	68f8      	ldr	r0, [r7, #12]
    99d0:	4b63      	ldr	r3, [pc, #396]	; (9b60 <_oscctrl_init_referenced_generators+0x1d4>)
    99d2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    99d4:	bf00      	nop
    99d6:	68f8      	ldr	r0, [r7, #12]
    99d8:	4b62      	ldr	r3, [pc, #392]	; (9b64 <_oscctrl_init_referenced_generators+0x1d8>)
    99da:	4798      	blx	r3
    99dc:	4603      	mov	r3, r0
    99de:	2b00      	cmp	r3, #0
    99e0:	d1f9      	bne.n	99d6 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    99e2:	2302      	movs	r3, #2
    99e4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    99e6:	7afb      	ldrb	r3, [r7, #11]
    99e8:	4619      	mov	r1, r3
    99ea:	68f8      	ldr	r0, [r7, #12]
    99ec:	4b58      	ldr	r3, [pc, #352]	; (9b50 <_oscctrl_init_referenced_generators+0x1c4>)
    99ee:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    99f0:	bf00      	nop
    99f2:	68f8      	ldr	r0, [r7, #12]
    99f4:	4b5c      	ldr	r3, [pc, #368]	; (9b68 <_oscctrl_init_referenced_generators+0x1dc>)
    99f6:	4798      	blx	r3
    99f8:	4603      	mov	r3, r0
    99fa:	2b00      	cmp	r3, #0
    99fc:	d1f9      	bne.n	99f2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    99fe:	68f8      	ldr	r0, [r7, #12]
    9a00:	4b5a      	ldr	r3, [pc, #360]	; (9b6c <_oscctrl_init_referenced_generators+0x1e0>)
    9a02:	4798      	blx	r3
    9a04:	4603      	mov	r3, r0
    9a06:	4619      	mov	r1, r3
    9a08:	68f8      	ldr	r0, [r7, #12]
    9a0a:	4b59      	ldr	r3, [pc, #356]	; (9b70 <_oscctrl_init_referenced_generators+0x1e4>)
    9a0c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9a0e:	bf00      	nop
    9a10:	68f8      	ldr	r0, [r7, #12]
    9a12:	4b58      	ldr	r3, [pc, #352]	; (9b74 <_oscctrl_init_referenced_generators+0x1e8>)
    9a14:	4798      	blx	r3
    9a16:	4603      	mov	r3, r0
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d1f9      	bne.n	9a10 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9a1c:	2319      	movs	r3, #25
    9a1e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    9a20:	7afb      	ldrb	r3, [r7, #11]
    9a22:	4619      	mov	r1, r3
    9a24:	68f8      	ldr	r0, [r7, #12]
    9a26:	4b4e      	ldr	r3, [pc, #312]	; (9b60 <_oscctrl_init_referenced_generators+0x1d4>)
    9a28:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9a2a:	bf00      	nop
    9a2c:	68f8      	ldr	r0, [r7, #12]
    9a2e:	4b4d      	ldr	r3, [pc, #308]	; (9b64 <_oscctrl_init_referenced_generators+0x1d8>)
    9a30:	4798      	blx	r3
    9a32:	4603      	mov	r3, r0
    9a34:	2b00      	cmp	r3, #0
    9a36:	d1f9      	bne.n	9a2c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9a38:	2245      	movs	r2, #69	; 0x45
    9a3a:	2101      	movs	r1, #1
    9a3c:	4841      	ldr	r0, [pc, #260]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    9a3e:	4b4e      	ldr	r3, [pc, #312]	; (9b78 <_oscctrl_init_referenced_generators+0x1ec>)
    9a40:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9a42:	223b      	movs	r2, #59	; 0x3b
    9a44:	2100      	movs	r1, #0
    9a46:	68f8      	ldr	r0, [r7, #12]
    9a48:	4b4c      	ldr	r3, [pc, #304]	; (9b7c <_oscctrl_init_referenced_generators+0x1f0>)
    9a4a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9a4c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    9a50:	2100      	movs	r1, #0
    9a52:	68f8      	ldr	r0, [r7, #12]
    9a54:	4b4a      	ldr	r3, [pc, #296]	; (9b80 <_oscctrl_init_referenced_generators+0x1f4>)
    9a56:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9a58:	2242      	movs	r2, #66	; 0x42
    9a5a:	2100      	movs	r1, #0
    9a5c:	68f8      	ldr	r0, [r7, #12]
    9a5e:	4b49      	ldr	r3, [pc, #292]	; (9b84 <_oscctrl_init_referenced_generators+0x1f8>)
    9a60:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9a62:	4a49      	ldr	r2, [pc, #292]	; (9b88 <_oscctrl_init_referenced_generators+0x1fc>)
    9a64:	2101      	movs	r1, #1
    9a66:	68f8      	ldr	r0, [r7, #12]
    9a68:	4b44      	ldr	r3, [pc, #272]	; (9b7c <_oscctrl_init_referenced_generators+0x1f0>)
    9a6a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9a6c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    9a70:	2101      	movs	r1, #1
    9a72:	68f8      	ldr	r0, [r7, #12]
    9a74:	4b42      	ldr	r3, [pc, #264]	; (9b80 <_oscctrl_init_referenced_generators+0x1f4>)
    9a76:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9a78:	2202      	movs	r2, #2
    9a7a:	2101      	movs	r1, #1
    9a7c:	68f8      	ldr	r0, [r7, #12]
    9a7e:	4b41      	ldr	r3, [pc, #260]	; (9b84 <_oscctrl_init_referenced_generators+0x1f8>)
    9a80:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    9a82:	68f8      	ldr	r0, [r7, #12]
    9a84:	4b41      	ldr	r3, [pc, #260]	; (9b8c <_oscctrl_init_referenced_generators+0x200>)
    9a86:	4798      	blx	r3
    9a88:	4603      	mov	r3, r0
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d00c      	beq.n	9aa8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9a8e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9a92:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    9a94:	bf00      	nop
    9a96:	6879      	ldr	r1, [r7, #4]
    9a98:	68f8      	ldr	r0, [r7, #12]
    9a9a:	4b3d      	ldr	r3, [pc, #244]	; (9b90 <_oscctrl_init_referenced_generators+0x204>)
    9a9c:	4798      	blx	r3
    9a9e:	4602      	mov	r2, r0
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	429a      	cmp	r2, r3
    9aa4:	d1f7      	bne.n	9a96 <_oscctrl_init_referenced_generators+0x10a>
    9aa6:	e009      	b.n	9abc <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9aa8:	bf00      	nop
    9aaa:	68f8      	ldr	r0, [r7, #12]
    9aac:	4b39      	ldr	r3, [pc, #228]	; (9b94 <_oscctrl_init_referenced_generators+0x208>)
    9aae:	4798      	blx	r3
    9ab0:	4603      	mov	r3, r0
    9ab2:	f083 0301 	eor.w	r3, r3, #1
    9ab6:	b2db      	uxtb	r3, r3
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d1f6      	bne.n	9aaa <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9abc:	bf00      	nop
    9abe:	2100      	movs	r1, #0
    9ac0:	68f8      	ldr	r0, [r7, #12]
    9ac2:	4b35      	ldr	r3, [pc, #212]	; (9b98 <_oscctrl_init_referenced_generators+0x20c>)
    9ac4:	4798      	blx	r3
    9ac6:	4603      	mov	r3, r0
    9ac8:	f083 0301 	eor.w	r3, r3, #1
    9acc:	b2db      	uxtb	r3, r3
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d009      	beq.n	9ae6 <_oscctrl_init_referenced_generators+0x15a>
    9ad2:	2100      	movs	r1, #0
    9ad4:	68f8      	ldr	r0, [r7, #12]
    9ad6:	4b31      	ldr	r3, [pc, #196]	; (9b9c <_oscctrl_init_referenced_generators+0x210>)
    9ad8:	4798      	blx	r3
    9ada:	4603      	mov	r3, r0
    9adc:	f083 0301 	eor.w	r3, r3, #1
    9ae0:	b2db      	uxtb	r3, r3
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	d1eb      	bne.n	9abe <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    9ae6:	bf00      	nop
    9ae8:	2101      	movs	r1, #1
    9aea:	68f8      	ldr	r0, [r7, #12]
    9aec:	4b2a      	ldr	r3, [pc, #168]	; (9b98 <_oscctrl_init_referenced_generators+0x20c>)
    9aee:	4798      	blx	r3
    9af0:	4603      	mov	r3, r0
    9af2:	f083 0301 	eor.w	r3, r3, #1
    9af6:	b2db      	uxtb	r3, r3
    9af8:	2b00      	cmp	r3, #0
    9afa:	d009      	beq.n	9b10 <_oscctrl_init_referenced_generators+0x184>
    9afc:	2101      	movs	r1, #1
    9afe:	68f8      	ldr	r0, [r7, #12]
    9b00:	4b26      	ldr	r3, [pc, #152]	; (9b9c <_oscctrl_init_referenced_generators+0x210>)
    9b02:	4798      	blx	r3
    9b04:	4603      	mov	r3, r0
    9b06:	f083 0301 	eor.w	r3, r3, #1
    9b0a:	b2db      	uxtb	r3, r3
    9b0c:	2b00      	cmp	r3, #0
    9b0e:	d1eb      	bne.n	9ae8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9b10:	bf00      	nop
    9b12:	480c      	ldr	r0, [pc, #48]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    9b14:	4b22      	ldr	r3, [pc, #136]	; (9ba0 <_oscctrl_init_referenced_generators+0x214>)
    9b16:	4798      	blx	r3
    9b18:	4603      	mov	r3, r0
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d1f9      	bne.n	9b12 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    9b1e:	2207      	movs	r2, #7
    9b20:	2100      	movs	r1, #0
    9b22:	4808      	ldr	r0, [pc, #32]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    9b24:	4b08      	ldr	r3, [pc, #32]	; (9b48 <_oscctrl_init_referenced_generators+0x1bc>)
    9b26:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9b28:	bf00      	nop
    9b2a:	4806      	ldr	r0, [pc, #24]	; (9b44 <_oscctrl_init_referenced_generators+0x1b8>)
    9b2c:	4b07      	ldr	r3, [pc, #28]	; (9b4c <_oscctrl_init_referenced_generators+0x1c0>)
    9b2e:	4798      	blx	r3
    9b30:	4603      	mov	r3, r0
    9b32:	2b00      	cmp	r3, #0
    9b34:	d1f9      	bne.n	9b2a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    9b36:	bf00      	nop
    9b38:	3710      	adds	r7, #16
    9b3a:	46bd      	mov	sp, r7
    9b3c:	bd80      	pop	{r7, pc}
    9b3e:	bf00      	nop
    9b40:	40001000 	.word	0x40001000
    9b44:	40001c00 	.word	0x40001c00
    9b48:	00009559 	.word	0x00009559
    9b4c:	00009519 	.word	0x00009519
    9b50:	000097bd 	.word	0x000097bd
    9b54:	0401bb80 	.word	0x0401bb80
    9b58:	0000985f 	.word	0x0000985f
    9b5c:	00009917 	.word	0x00009917
    9b60:	0000980b 	.word	0x0000980b
    9b64:	000098af 	.word	0x000098af
    9b68:	0000987b 	.word	0x0000987b
    9b6c:	00009847 	.word	0x00009847
    9b70:	0000982b 	.word	0x0000982b
    9b74:	000098e3 	.word	0x000098e3
    9b78:	000095a9 	.word	0x000095a9
    9b7c:	000096b5 	.word	0x000096b5
    9b80:	000096f1 	.word	0x000096f1
    9b84:	00009679 	.word	0x00009679
    9b88:	000407a0 	.word	0x000407a0
    9b8c:	000097db 	.word	0x000097db
    9b90:	0000976f 	.word	0x0000976f
    9b94:	00009747 	.word	0x00009747
    9b98:	00009605 	.word	0x00009605
    9b9c:	0000963d 	.word	0x0000963d
    9ba0:	00009541 	.word	0x00009541

00009ba4 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    9ba4:	b480      	push	{r7}
    9ba6:	b085      	sub	sp, #20
    9ba8:	af00      	add	r7, sp, #0
    9baa:	6078      	str	r0, [r7, #4]
    9bac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    9bae:	687b      	ldr	r3, [r7, #4]
    9bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9bb2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9bb4:	68fa      	ldr	r2, [r7, #12]
    9bb6:	683b      	ldr	r3, [r7, #0]
    9bb8:	4013      	ands	r3, r2
    9bba:	60fb      	str	r3, [r7, #12]
	return tmp;
    9bbc:	68fb      	ldr	r3, [r7, #12]
}
    9bbe:	4618      	mov	r0, r3
    9bc0:	3714      	adds	r7, #20
    9bc2:	46bd      	mov	sp, r7
    9bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bc8:	4770      	bx	lr

00009bca <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    9bca:	b480      	push	{r7}
    9bcc:	b085      	sub	sp, #20
    9bce:	af00      	add	r7, sp, #0
    9bd0:	6078      	str	r0, [r7, #4]
    9bd2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    9bd4:	687b      	ldr	r3, [r7, #4]
    9bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9bd8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9bda:	68fa      	ldr	r2, [r7, #12]
    9bdc:	683b      	ldr	r3, [r7, #0]
    9bde:	4013      	ands	r3, r2
    9be0:	60fb      	str	r3, [r7, #12]
	return tmp;
    9be2:	68fb      	ldr	r3, [r7, #12]
}
    9be4:	4618      	mov	r0, r3
    9be6:	3714      	adds	r7, #20
    9be8:	46bd      	mov	sp, r7
    9bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bee:	4770      	bx	lr

00009bf0 <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    9bf0:	b480      	push	{r7}
    9bf2:	b085      	sub	sp, #20
    9bf4:	af00      	add	r7, sp, #0
    9bf6:	6078      	str	r0, [r7, #4]
    9bf8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    9bfa:	687b      	ldr	r3, [r7, #4]
    9bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9bfe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9c00:	68fa      	ldr	r2, [r7, #12]
    9c02:	683b      	ldr	r3, [r7, #0]
    9c04:	4013      	ands	r3, r2
    9c06:	60fb      	str	r3, [r7, #12]
	return tmp;
    9c08:	68fb      	ldr	r3, [r7, #12]
}
    9c0a:	4618      	mov	r0, r3
    9c0c:	3714      	adds	r7, #20
    9c0e:	46bd      	mov	sp, r7
    9c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c14:	4770      	bx	lr

00009c16 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    9c16:	b480      	push	{r7}
    9c18:	b085      	sub	sp, #20
    9c1a:	af00      	add	r7, sp, #0
    9c1c:	6078      	str	r0, [r7, #4]
    9c1e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9c24:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9c26:	68fa      	ldr	r2, [r7, #12]
    9c28:	683b      	ldr	r3, [r7, #0]
    9c2a:	4013      	ands	r3, r2
    9c2c:	60fb      	str	r3, [r7, #12]
	return tmp;
    9c2e:	68fb      	ldr	r3, [r7, #12]
}
    9c30:	4618      	mov	r0, r3
    9c32:	3714      	adds	r7, #20
    9c34:	46bd      	mov	sp, r7
    9c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c3a:	4770      	bx	lr

00009c3c <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    9c3c:	b480      	push	{r7}
    9c3e:	b083      	sub	sp, #12
    9c40:	af00      	add	r7, sp, #0
    9c42:	6078      	str	r0, [r7, #4]
    9c44:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    9c46:	687b      	ldr	r3, [r7, #4]
    9c48:	683a      	ldr	r2, [r7, #0]
    9c4a:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    9c4c:	bf00      	nop
    9c4e:	370c      	adds	r7, #12
    9c50:	46bd      	mov	sp, r7
    9c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c56:	4770      	bx	lr

00009c58 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    9c58:	b480      	push	{r7}
    9c5a:	b085      	sub	sp, #20
    9c5c:	af00      	add	r7, sp, #0
    9c5e:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    9c60:	230a      	movs	r3, #10
    9c62:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    9c6a:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9c6e:	d101      	bne.n	9c74 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    9c70:	230d      	movs	r3, #13
    9c72:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    9c74:	687b      	ldr	r3, [r7, #4]
    9c76:	0e1b      	lsrs	r3, r3, #24
    9c78:	f003 030f 	and.w	r3, r3, #15
    9c7c:	015a      	lsls	r2, r3, #5
    9c7e:	6879      	ldr	r1, [r7, #4]
    9c80:	4b06      	ldr	r3, [pc, #24]	; (9c9c <_pac_get_peripheral_id+0x44>)
    9c82:	400b      	ands	r3, r1
    9c84:	68f9      	ldr	r1, [r7, #12]
    9c86:	40cb      	lsrs	r3, r1
    9c88:	4413      	add	r3, r2
    9c8a:	60fb      	str	r3, [r7, #12]

	return peripheral;
    9c8c:	68fb      	ldr	r3, [r7, #12]
}
    9c8e:	4618      	mov	r0, r3
    9c90:	3714      	adds	r7, #20
    9c92:	46bd      	mov	sp, r7
    9c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c98:	4770      	bx	lr
    9c9a:	bf00      	nop
    9c9c:	000fff00 	.word	0x000fff00

00009ca0 <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b086      	sub	sp, #24
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9cae:	bf8c      	ite	hi
    9cb0:	2301      	movhi	r3, #1
    9cb2:	2300      	movls	r3, #0
    9cb4:	b2db      	uxtb	r3, r3
    9cb6:	2239      	movs	r2, #57	; 0x39
    9cb8:	4917      	ldr	r1, [pc, #92]	; (9d18 <_periph_lock+0x78>)
    9cba:	4618      	mov	r0, r3
    9cbc:	4b17      	ldr	r3, [pc, #92]	; (9d1c <_periph_lock+0x7c>)
    9cbe:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9cc4:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9cc6:	6878      	ldr	r0, [r7, #4]
    9cc8:	4b15      	ldr	r3, [pc, #84]	; (9d20 <_periph_lock+0x80>)
    9cca:	4798      	blx	r3
    9ccc:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    9cce:	693b      	ldr	r3, [r7, #16]
    9cd0:	b29b      	uxth	r3, r3
    9cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9cd6:	4619      	mov	r1, r3
    9cd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9cdc:	4b11      	ldr	r3, [pc, #68]	; (9d24 <_periph_lock+0x84>)
    9cde:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9ce0:	f107 030f 	add.w	r3, r7, #15
    9ce4:	4619      	mov	r1, r3
    9ce6:	6878      	ldr	r0, [r7, #4]
    9ce8:	4b0f      	ldr	r3, [pc, #60]	; (9d28 <_periph_lock+0x88>)
    9cea:	4798      	blx	r3
	} while (!stat && timeout--);
    9cec:	7bfb      	ldrb	r3, [r7, #15]
    9cee:	f083 0301 	eor.w	r3, r3, #1
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d004      	beq.n	9d02 <_periph_lock+0x62>
    9cf8:	697b      	ldr	r3, [r7, #20]
    9cfa:	1e5a      	subs	r2, r3, #1
    9cfc:	617a      	str	r2, [r7, #20]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d1ee      	bne.n	9ce0 <_periph_lock+0x40>

	if (timeout < 0) {
    9d02:	697b      	ldr	r3, [r7, #20]
    9d04:	2b00      	cmp	r3, #0
    9d06:	da02      	bge.n	9d0e <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    9d08:	f06f 0307 	mvn.w	r3, #7
    9d0c:	e000      	b.n	9d10 <_periph_lock+0x70>
	}

	return ERR_NONE;
    9d0e:	2300      	movs	r3, #0
}
    9d10:	4618      	mov	r0, r3
    9d12:	3718      	adds	r7, #24
    9d14:	46bd      	mov	sp, r7
    9d16:	bd80      	pop	{r7, pc}
    9d18:	0001cdc4 	.word	0x0001cdc4
    9d1c:	00007b0d 	.word	0x00007b0d
    9d20:	00009c59 	.word	0x00009c59
    9d24:	00009c3d 	.word	0x00009c3d
    9d28:	00009db5 	.word	0x00009db5

00009d2c <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b086      	sub	sp, #24
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9d34:	687b      	ldr	r3, [r7, #4]
    9d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9d3a:	bf8c      	ite	hi
    9d3c:	2301      	movhi	r3, #1
    9d3e:	2300      	movls	r3, #0
    9d40:	b2db      	uxtb	r3, r3
    9d42:	2253      	movs	r2, #83	; 0x53
    9d44:	4916      	ldr	r1, [pc, #88]	; (9da0 <_periph_unlock+0x74>)
    9d46:	4618      	mov	r0, r3
    9d48:	4b16      	ldr	r3, [pc, #88]	; (9da4 <_periph_unlock+0x78>)
    9d4a:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9d50:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9d52:	6878      	ldr	r0, [r7, #4]
    9d54:	4b14      	ldr	r3, [pc, #80]	; (9da8 <_periph_unlock+0x7c>)
    9d56:	4798      	blx	r3
    9d58:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    9d5a:	693b      	ldr	r3, [r7, #16]
    9d5c:	b29b      	uxth	r3, r3
    9d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9d62:	4619      	mov	r1, r3
    9d64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9d68:	4b10      	ldr	r3, [pc, #64]	; (9dac <_periph_unlock+0x80>)
    9d6a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9d6c:	f107 030f 	add.w	r3, r7, #15
    9d70:	4619      	mov	r1, r3
    9d72:	6878      	ldr	r0, [r7, #4]
    9d74:	4b0e      	ldr	r3, [pc, #56]	; (9db0 <_periph_unlock+0x84>)
    9d76:	4798      	blx	r3
	} while (stat && timeout--);
    9d78:	7bfb      	ldrb	r3, [r7, #15]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d004      	beq.n	9d88 <_periph_unlock+0x5c>
    9d7e:	697b      	ldr	r3, [r7, #20]
    9d80:	1e5a      	subs	r2, r3, #1
    9d82:	617a      	str	r2, [r7, #20]
    9d84:	2b00      	cmp	r3, #0
    9d86:	d1f1      	bne.n	9d6c <_periph_unlock+0x40>

	if (timeout < 0) {
    9d88:	697b      	ldr	r3, [r7, #20]
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	da02      	bge.n	9d94 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    9d8e:	f06f 0307 	mvn.w	r3, #7
    9d92:	e000      	b.n	9d96 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    9d94:	2300      	movs	r3, #0
}
    9d96:	4618      	mov	r0, r3
    9d98:	3718      	adds	r7, #24
    9d9a:	46bd      	mov	sp, r7
    9d9c:	bd80      	pop	{r7, pc}
    9d9e:	bf00      	nop
    9da0:	0001cdc4 	.word	0x0001cdc4
    9da4:	00007b0d 	.word	0x00007b0d
    9da8:	00009c59 	.word	0x00009c59
    9dac:	00009c3d 	.word	0x00009c3d
    9db0:	00009db5 	.word	0x00009db5

00009db4 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b084      	sub	sp, #16
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
    9dbc:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9dbe:	687b      	ldr	r3, [r7, #4]
    9dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9dc4:	bf8c      	ite	hi
    9dc6:	2301      	movhi	r3, #1
    9dc8:	2300      	movls	r3, #0
    9dca:	b2db      	uxtb	r3, r3
    9dcc:	226d      	movs	r2, #109	; 0x6d
    9dce:	4931      	ldr	r1, [pc, #196]	; (9e94 <_periph_get_lock_state+0xe0>)
    9dd0:	4618      	mov	r0, r3
    9dd2:	4b31      	ldr	r3, [pc, #196]	; (9e98 <_periph_get_lock_state+0xe4>)
    9dd4:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    9dd6:	6878      	ldr	r0, [r7, #4]
    9dd8:	4b30      	ldr	r3, [pc, #192]	; (9e9c <_periph_get_lock_state+0xe8>)
    9dda:	4798      	blx	r3
    9ddc:	4603      	mov	r3, r0
    9dde:	f003 031f 	and.w	r3, r3, #31
    9de2:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9dea:	d211      	bcs.n	9e10 <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    9dec:	2201      	movs	r2, #1
    9dee:	68fb      	ldr	r3, [r7, #12]
    9df0:	fa02 f303 	lsl.w	r3, r2, r3
    9df4:	4619      	mov	r1, r3
    9df6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9dfa:	4b29      	ldr	r3, [pc, #164]	; (9ea0 <_periph_get_lock_state+0xec>)
    9dfc:	4798      	blx	r3
    9dfe:	4603      	mov	r3, r0
    9e00:	2b00      	cmp	r3, #0
    9e02:	bf14      	ite	ne
    9e04:	2301      	movne	r3, #1
    9e06:	2300      	moveq	r3, #0
    9e08:	b2da      	uxtb	r2, r3
    9e0a:	683b      	ldr	r3, [r7, #0]
    9e0c:	701a      	strb	r2, [r3, #0]
    9e0e:	e03c      	b.n	9e8a <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    9e10:	687b      	ldr	r3, [r7, #4]
    9e12:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    9e16:	d211      	bcs.n	9e3c <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    9e18:	2201      	movs	r2, #1
    9e1a:	68fb      	ldr	r3, [r7, #12]
    9e1c:	fa02 f303 	lsl.w	r3, r2, r3
    9e20:	4619      	mov	r1, r3
    9e22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9e26:	4b1f      	ldr	r3, [pc, #124]	; (9ea4 <_periph_get_lock_state+0xf0>)
    9e28:	4798      	blx	r3
    9e2a:	4603      	mov	r3, r0
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	bf14      	ite	ne
    9e30:	2301      	movne	r3, #1
    9e32:	2300      	moveq	r3, #0
    9e34:	b2da      	uxtb	r2, r3
    9e36:	683b      	ldr	r3, [r7, #0]
    9e38:	701a      	strb	r2, [r3, #0]
    9e3a:	e026      	b.n	9e8a <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    9e42:	d211      	bcs.n	9e68 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    9e44:	2201      	movs	r2, #1
    9e46:	68fb      	ldr	r3, [r7, #12]
    9e48:	fa02 f303 	lsl.w	r3, r2, r3
    9e4c:	4619      	mov	r1, r3
    9e4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9e52:	4b15      	ldr	r3, [pc, #84]	; (9ea8 <_periph_get_lock_state+0xf4>)
    9e54:	4798      	blx	r3
    9e56:	4603      	mov	r3, r0
    9e58:	2b00      	cmp	r3, #0
    9e5a:	bf14      	ite	ne
    9e5c:	2301      	movne	r3, #1
    9e5e:	2300      	moveq	r3, #0
    9e60:	b2da      	uxtb	r2, r3
    9e62:	683b      	ldr	r3, [r7, #0]
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	e010      	b.n	9e8a <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    9e68:	2201      	movs	r2, #1
    9e6a:	68fb      	ldr	r3, [r7, #12]
    9e6c:	fa02 f303 	lsl.w	r3, r2, r3
    9e70:	4619      	mov	r1, r3
    9e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9e76:	4b0d      	ldr	r3, [pc, #52]	; (9eac <_periph_get_lock_state+0xf8>)
    9e78:	4798      	blx	r3
    9e7a:	4603      	mov	r3, r0
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	bf14      	ite	ne
    9e80:	2301      	movne	r3, #1
    9e82:	2300      	moveq	r3, #0
    9e84:	b2da      	uxtb	r2, r3
    9e86:	683b      	ldr	r3, [r7, #0]
    9e88:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    9e8a:	2300      	movs	r3, #0
}
    9e8c:	4618      	mov	r0, r3
    9e8e:	3710      	adds	r7, #16
    9e90:	46bd      	mov	sp, r7
    9e92:	bd80      	pop	{r7, pc}
    9e94:	0001cdc4 	.word	0x0001cdc4
    9e98:	00007b0d 	.word	0x00007b0d
    9e9c:	00009c59 	.word	0x00009c59
    9ea0:	00009ba5 	.word	0x00009ba5
    9ea4:	00009bcb 	.word	0x00009bcb
    9ea8:	00009bf1 	.word	0x00009bf1
    9eac:	00009c17 	.word	0x00009c17

00009eb0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    9eb0:	b480      	push	{r7}
    9eb2:	b083      	sub	sp, #12
    9eb4:	af00      	add	r7, sp, #0
    9eb6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	69db      	ldr	r3, [r3, #28]
    9ebc:	0a9b      	lsrs	r3, r3, #10
    9ebe:	f003 0301 	and.w	r3, r3, #1
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	bf14      	ite	ne
    9ec6:	2301      	movne	r3, #1
    9ec8:	2300      	moveq	r3, #0
    9eca:	b2db      	uxtb	r3, r3
}
    9ecc:	4618      	mov	r0, r3
    9ece:	370c      	adds	r7, #12
    9ed0:	46bd      	mov	sp, r7
    9ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ed6:	4770      	bx	lr

00009ed8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    9ed8:	b480      	push	{r7}
    9eda:	b083      	sub	sp, #12
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ee6:	61da      	str	r2, [r3, #28]
}
    9ee8:	bf00      	nop
    9eea:	370c      	adds	r7, #12
    9eec:	46bd      	mov	sp, r7
    9eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ef2:	4770      	bx	lr

00009ef4 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    9ef4:	b480      	push	{r7}
    9ef6:	b083      	sub	sp, #12
    9ef8:	af00      	add	r7, sp, #0
    9efa:	6078      	str	r0, [r7, #4]
    9efc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	683a      	ldr	r2, [r7, #0]
    9f02:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9f04:	bf00      	nop
    9f06:	370c      	adds	r7, #12
    9f08:	46bd      	mov	sp, r7
    9f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f0e:	4770      	bx	lr

00009f10 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    9f10:	b480      	push	{r7}
    9f12:	b083      	sub	sp, #12
    9f14:	af00      	add	r7, sp, #0
    9f16:	6078      	str	r0, [r7, #4]
    9f18:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    9f1a:	687b      	ldr	r3, [r7, #4]
    9f1c:	683a      	ldr	r2, [r7, #0]
    9f1e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9f20:	bf00      	nop
    9f22:	370c      	adds	r7, #12
    9f24:	46bd      	mov	sp, r7
    9f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f2a:	4770      	bx	lr

00009f2c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    9f2c:	b480      	push	{r7}
    9f2e:	b083      	sub	sp, #12
    9f30:	af00      	add	r7, sp, #0
    9f32:	6078      	str	r0, [r7, #4]
    9f34:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	683a      	ldr	r2, [r7, #0]
    9f3a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9f3c:	bf00      	nop
    9f3e:	370c      	adds	r7, #12
    9f40:	46bd      	mov	sp, r7
    9f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f46:	4770      	bx	lr

00009f48 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    9f48:	b480      	push	{r7}
    9f4a:	b083      	sub	sp, #12
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	6078      	str	r0, [r7, #4]
    9f50:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    9f52:	687b      	ldr	r3, [r7, #4]
    9f54:	683a      	ldr	r2, [r7, #0]
    9f56:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9f58:	bf00      	nop
    9f5a:	370c      	adds	r7, #12
    9f5c:	46bd      	mov	sp, r7
    9f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f62:	4770      	bx	lr

00009f64 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9f64:	b480      	push	{r7}
    9f66:	b085      	sub	sp, #20
    9f68:	af00      	add	r7, sp, #0
    9f6a:	6078      	str	r0, [r7, #4]
    9f6c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    9f6e:	687b      	ldr	r3, [r7, #4]
    9f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f72:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9f7a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    9f7c:	683b      	ldr	r3, [r7, #0]
    9f7e:	b2db      	uxtb	r3, r3
    9f80:	68fa      	ldr	r2, [r7, #12]
    9f82:	4313      	orrs	r3, r2
    9f84:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	68fa      	ldr	r2, [r7, #12]
    9f8a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9f8c:	bf00      	nop
    9f8e:	3714      	adds	r7, #20
    9f90:	46bd      	mov	sp, r7
    9f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f96:	4770      	bx	lr

00009f98 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9f98:	b480      	push	{r7}
    9f9a:	b085      	sub	sp, #20
    9f9c:	af00      	add	r7, sp, #0
    9f9e:	6078      	str	r0, [r7, #4]
    9fa0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    9fa2:	687b      	ldr	r3, [r7, #4]
    9fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9fa6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    9fa8:	68fb      	ldr	r3, [r7, #12]
    9faa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    9fae:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    9fb0:	683b      	ldr	r3, [r7, #0]
    9fb2:	041b      	lsls	r3, r3, #16
    9fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    9fb8:	68fa      	ldr	r2, [r7, #12]
    9fba:	4313      	orrs	r3, r2
    9fbc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9fbe:	687b      	ldr	r3, [r7, #4]
    9fc0:	68fa      	ldr	r2, [r7, #12]
    9fc2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9fc4:	bf00      	nop
    9fc6:	3714      	adds	r7, #20
    9fc8:	46bd      	mov	sp, r7
    9fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fce:	4770      	bx	lr

00009fd0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    9fd0:	b480      	push	{r7}
    9fd2:	b083      	sub	sp, #12
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	6078      	str	r0, [r7, #4]
    9fd8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    9fda:	687b      	ldr	r3, [r7, #4]
    9fdc:	683a      	ldr	r2, [r7, #0]
    9fde:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9fe0:	bf00      	nop
    9fe2:	370c      	adds	r7, #12
    9fe4:	46bd      	mov	sp, r7
    9fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fea:	4770      	bx	lr

00009fec <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    9fec:	b480      	push	{r7}
    9fee:	b083      	sub	sp, #12
    9ff0:	af00      	add	r7, sp, #0
    9ff2:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    9ff8:	4618      	mov	r0, r3
    9ffa:	370c      	adds	r7, #12
    9ffc:	46bd      	mov	sp, r7
    9ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a002:	4770      	bx	lr

0000a004 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a004:	b480      	push	{r7}
    a006:	b085      	sub	sp, #20
    a008:	af00      	add	r7, sp, #0
    a00a:	60f8      	str	r0, [r7, #12]
    a00c:	60b9      	str	r1, [r7, #8]
    a00e:	607a      	str	r2, [r7, #4]
	while (count--) {
    a010:	e007      	b.n	a022 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a012:	68fb      	ldr	r3, [r7, #12]
    a014:	1c5a      	adds	r2, r3, #1
    a016:	60fa      	str	r2, [r7, #12]
    a018:	68ba      	ldr	r2, [r7, #8]
    a01a:	1c51      	adds	r1, r2, #1
    a01c:	60b9      	str	r1, [r7, #8]
    a01e:	7812      	ldrb	r2, [r2, #0]
    a020:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a022:	687b      	ldr	r3, [r7, #4]
    a024:	1e5a      	subs	r2, r3, #1
    a026:	607a      	str	r2, [r7, #4]
    a028:	2b00      	cmp	r3, #0
    a02a:	d1f2      	bne.n	a012 <_qspi_memcpy+0xe>
	}
}
    a02c:	bf00      	nop
    a02e:	3714      	adds	r7, #20
    a030:	46bd      	mov	sp, r7
    a032:	f85d 7b04 	ldr.w	r7, [sp], #4
    a036:	4770      	bx	lr

0000a038 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a038:	b580      	push	{r7, lr}
    a03a:	b082      	sub	sp, #8
    a03c:	af00      	add	r7, sp, #0
    a03e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a040:	4903      	ldr	r1, [pc, #12]	; (a050 <_qspi_end_transfer+0x18>)
    a042:	6878      	ldr	r0, [r7, #4]
    a044:	4b03      	ldr	r3, [pc, #12]	; (a054 <_qspi_end_transfer+0x1c>)
    a046:	4798      	blx	r3
}
    a048:	bf00      	nop
    a04a:	3708      	adds	r7, #8
    a04c:	46bd      	mov	sp, r7
    a04e:	bd80      	pop	{r7, pc}
    a050:	01000002 	.word	0x01000002
    a054:	00009ef5 	.word	0x00009ef5

0000a058 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a058:	b580      	push	{r7, lr}
    a05a:	b082      	sub	sp, #8
    a05c:	af00      	add	r7, sp, #0
    a05e:	6078      	str	r0, [r7, #4]
    a060:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	2b00      	cmp	r3, #0
    a066:	d004      	beq.n	a072 <_qspi_sync_init+0x1a>
    a068:	683b      	ldr	r3, [r7, #0]
    a06a:	2b00      	cmp	r3, #0
    a06c:	d001      	beq.n	a072 <_qspi_sync_init+0x1a>
    a06e:	2301      	movs	r3, #1
    a070:	e000      	b.n	a074 <_qspi_sync_init+0x1c>
    a072:	2300      	movs	r3, #0
    a074:	f003 0301 	and.w	r3, r3, #1
    a078:	b2db      	uxtb	r3, r3
    a07a:	2240      	movs	r2, #64	; 0x40
    a07c:	490c      	ldr	r1, [pc, #48]	; (a0b0 <_qspi_sync_init+0x58>)
    a07e:	4618      	mov	r0, r3
    a080:	4b0c      	ldr	r3, [pc, #48]	; (a0b4 <_qspi_sync_init+0x5c>)
    a082:	4798      	blx	r3
	dev->prvt = hw;
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	683a      	ldr	r2, [r7, #0]
    a088:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	2101      	movs	r1, #1
    a090:	4618      	mov	r0, r3
    a092:	4b09      	ldr	r3, [pc, #36]	; (a0b8 <_qspi_sync_init+0x60>)
    a094:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a096:	4909      	ldr	r1, [pc, #36]	; (a0bc <_qspi_sync_init+0x64>)
    a098:	6838      	ldr	r0, [r7, #0]
    a09a:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <_qspi_sync_init+0x68>)
    a09c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a09e:	4909      	ldr	r1, [pc, #36]	; (a0c4 <_qspi_sync_init+0x6c>)
    a0a0:	6838      	ldr	r0, [r7, #0]
    a0a2:	4b09      	ldr	r3, [pc, #36]	; (a0c8 <_qspi_sync_init+0x70>)
    a0a4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a0a6:	2300      	movs	r3, #0
}
    a0a8:	4618      	mov	r0, r3
    a0aa:	3708      	adds	r7, #8
    a0ac:	46bd      	mov	sp, r7
    a0ae:	bd80      	pop	{r7, pc}
    a0b0:	0001cddc 	.word	0x0001cddc
    a0b4:	00007b0d 	.word	0x00007b0d
    a0b8:	00009ef5 	.word	0x00009ef5
    a0bc:	06000011 	.word	0x06000011
    a0c0:	00009f11 	.word	0x00009f11
    a0c4:	00241300 	.word	0x00241300
    a0c8:	00009f2d 	.word	0x00009f2d

0000a0cc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a0cc:	b580      	push	{r7, lr}
    a0ce:	b082      	sub	sp, #8
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	2102      	movs	r1, #2
    a0da:	4618      	mov	r0, r3
    a0dc:	4b03      	ldr	r3, [pc, #12]	; (a0ec <_qspi_sync_enable+0x20>)
    a0de:	4798      	blx	r3
	return ERR_NONE;
    a0e0:	2300      	movs	r3, #0
}
    a0e2:	4618      	mov	r0, r3
    a0e4:	3708      	adds	r7, #8
    a0e6:	46bd      	mov	sp, r7
    a0e8:	bd80      	pop	{r7, pc}
    a0ea:	bf00      	nop
    a0ec:	00009ef5 	.word	0x00009ef5

0000a0f0 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a0f0:	b580      	push	{r7, lr}
    a0f2:	b082      	sub	sp, #8
    a0f4:	af00      	add	r7, sp, #0
    a0f6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	681b      	ldr	r3, [r3, #0]
    a0fc:	2100      	movs	r1, #0
    a0fe:	4618      	mov	r0, r3
    a100:	4b03      	ldr	r3, [pc, #12]	; (a110 <_qspi_sync_disable+0x20>)
    a102:	4798      	blx	r3
	return ERR_NONE;
    a104:	2300      	movs	r3, #0
}
    a106:	4618      	mov	r0, r3
    a108:	3708      	adds	r7, #8
    a10a:	46bd      	mov	sp, r7
    a10c:	bd80      	pop	{r7, pc}
    a10e:	bf00      	nop
    a110:	00009ef5 	.word	0x00009ef5

0000a114 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a114:	b580      	push	{r7, lr}
    a116:	b084      	sub	sp, #16
    a118:	af00      	add	r7, sp, #0
    a11a:	6078      	str	r0, [r7, #4]
    a11c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a11e:	687b      	ldr	r3, [r7, #4]
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a124:	683b      	ldr	r3, [r7, #0]
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	f003 0320 	and.w	r3, r3, #32
    a12c:	b2db      	uxtb	r3, r3
    a12e:	2b00      	cmp	r3, #0
    a130:	d005      	beq.n	a13e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a132:	683b      	ldr	r3, [r7, #0]
    a134:	689b      	ldr	r3, [r3, #8]
    a136:	4619      	mov	r1, r3
    a138:	68f8      	ldr	r0, [r7, #12]
    a13a:	4b13      	ldr	r3, [pc, #76]	; (a188 <_qspi_sync_command_set_ifr+0x74>)
    a13c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a13e:	683b      	ldr	r3, [r7, #0]
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	f003 0310 	and.w	r3, r3, #16
    a146:	b2db      	uxtb	r3, r3
    a148:	2b00      	cmp	r3, #0
    a14a:	d005      	beq.n	a158 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a14c:	683b      	ldr	r3, [r7, #0]
    a14e:	791b      	ldrb	r3, [r3, #4]
    a150:	4619      	mov	r1, r3
    a152:	68f8      	ldr	r0, [r7, #12]
    a154:	4b0d      	ldr	r3, [pc, #52]	; (a18c <_qspi_sync_command_set_ifr+0x78>)
    a156:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a158:	683b      	ldr	r3, [r7, #0]
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a160:	b2db      	uxtb	r3, r3
    a162:	2b00      	cmp	r3, #0
    a164:	d005      	beq.n	a172 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a166:	683b      	ldr	r3, [r7, #0]
    a168:	795b      	ldrb	r3, [r3, #5]
    a16a:	4619      	mov	r1, r3
    a16c:	68f8      	ldr	r0, [r7, #12]
    a16e:	4b08      	ldr	r3, [pc, #32]	; (a190 <_qspi_sync_command_set_ifr+0x7c>)
    a170:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a172:	683b      	ldr	r3, [r7, #0]
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	4619      	mov	r1, r3
    a178:	68f8      	ldr	r0, [r7, #12]
    a17a:	4b06      	ldr	r3, [pc, #24]	; (a194 <_qspi_sync_command_set_ifr+0x80>)
    a17c:	4798      	blx	r3
}
    a17e:	bf00      	nop
    a180:	3710      	adds	r7, #16
    a182:	46bd      	mov	sp, r7
    a184:	bd80      	pop	{r7, pc}
    a186:	bf00      	nop
    a188:	00009f49 	.word	0x00009f49
    a18c:	00009f65 	.word	0x00009f65
    a190:	00009f99 	.word	0x00009f99
    a194:	00009fd1 	.word	0x00009fd1

0000a198 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a198:	b580      	push	{r7, lr}
    a19a:	b084      	sub	sp, #16
    a19c:	af00      	add	r7, sp, #0
    a19e:	6078      	str	r0, [r7, #4]
    a1a0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	681b      	ldr	r3, [r3, #0]
    a1a6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a1a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a1ac:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a1ae:	683b      	ldr	r3, [r7, #0]
    a1b0:	781b      	ldrb	r3, [r3, #0]
    a1b2:	f003 0320 	and.w	r3, r3, #32
    a1b6:	b2db      	uxtb	r3, r3
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d004      	beq.n	a1c6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a1bc:	683b      	ldr	r3, [r7, #0]
    a1be:	689b      	ldr	r3, [r3, #8]
    a1c0:	68fa      	ldr	r2, [r7, #12]
    a1c2:	4413      	add	r3, r2
    a1c4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a1c6:	68b8      	ldr	r0, [r7, #8]
    a1c8:	4b18      	ldr	r3, [pc, #96]	; (a22c <_qspi_sync_run_transfer+0x94>)
    a1ca:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a1cc:	683b      	ldr	r3, [r7, #0]
    a1ce:	691b      	ldr	r3, [r3, #16]
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	d103      	bne.n	a1dc <_qspi_sync_run_transfer+0x44>
    a1d4:	683b      	ldr	r3, [r7, #0]
    a1d6:	695b      	ldr	r3, [r3, #20]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d001      	beq.n	a1e0 <_qspi_sync_run_transfer+0x48>
    a1dc:	2301      	movs	r3, #1
    a1de:	e000      	b.n	a1e2 <_qspi_sync_run_transfer+0x4a>
    a1e0:	2300      	movs	r3, #0
    a1e2:	f003 0301 	and.w	r3, r3, #1
    a1e6:	b2db      	uxtb	r3, r3
    a1e8:	2282      	movs	r2, #130	; 0x82
    a1ea:	4911      	ldr	r1, [pc, #68]	; (a230 <_qspi_sync_run_transfer+0x98>)
    a1ec:	4618      	mov	r0, r3
    a1ee:	4b11      	ldr	r3, [pc, #68]	; (a234 <_qspi_sync_run_transfer+0x9c>)
    a1f0:	4798      	blx	r3

	if (cmd->tx_buf) {
    a1f2:	683b      	ldr	r3, [r7, #0]
    a1f4:	691b      	ldr	r3, [r3, #16]
    a1f6:	2b00      	cmp	r3, #0
    a1f8:	d008      	beq.n	a20c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a1fa:	683b      	ldr	r3, [r7, #0]
    a1fc:	6919      	ldr	r1, [r3, #16]
    a1fe:	683b      	ldr	r3, [r7, #0]
    a200:	68db      	ldr	r3, [r3, #12]
    a202:	461a      	mov	r2, r3
    a204:	68f8      	ldr	r0, [r7, #12]
    a206:	4b0c      	ldr	r3, [pc, #48]	; (a238 <_qspi_sync_run_transfer+0xa0>)
    a208:	4798      	blx	r3
    a20a:	e007      	b.n	a21c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a20c:	683b      	ldr	r3, [r7, #0]
    a20e:	6958      	ldr	r0, [r3, #20]
    a210:	683b      	ldr	r3, [r7, #0]
    a212:	68db      	ldr	r3, [r3, #12]
    a214:	461a      	mov	r2, r3
    a216:	68f9      	ldr	r1, [r7, #12]
    a218:	4b07      	ldr	r3, [pc, #28]	; (a238 <_qspi_sync_run_transfer+0xa0>)
    a21a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a21c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a220:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a224:	bf00      	nop
    a226:	3710      	adds	r7, #16
    a228:	46bd      	mov	sp, r7
    a22a:	bd80      	pop	{r7, pc}
    a22c:	00009fed 	.word	0x00009fed
    a230:	0001cddc 	.word	0x0001cddc
    a234:	00007b0d 	.word	0x00007b0d
    a238:	0000a005 	.word	0x0000a005

0000a23c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a23c:	b580      	push	{r7, lr}
    a23e:	b082      	sub	sp, #8
    a240:	af00      	add	r7, sp, #0
    a242:	6078      	str	r0, [r7, #4]
    a244:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a246:	6839      	ldr	r1, [r7, #0]
    a248:	6878      	ldr	r0, [r7, #4]
    a24a:	4b14      	ldr	r3, [pc, #80]	; (a29c <_qspi_sync_serial_run_command+0x60>)
    a24c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a24e:	683b      	ldr	r3, [r7, #0]
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a256:	b2db      	uxtb	r3, r3
    a258:	2b00      	cmp	r3, #0
    a25a:	d003      	beq.n	a264 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a25c:	6839      	ldr	r1, [r7, #0]
    a25e:	6878      	ldr	r0, [r7, #4]
    a260:	4b0f      	ldr	r3, [pc, #60]	; (a2a0 <_qspi_sync_serial_run_command+0x64>)
    a262:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a264:	687b      	ldr	r3, [r7, #4]
    a266:	681b      	ldr	r3, [r3, #0]
    a268:	4618      	mov	r0, r3
    a26a:	4b0e      	ldr	r3, [pc, #56]	; (a2a4 <_qspi_sync_serial_run_command+0x68>)
    a26c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a26e:	bf00      	nop
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	681b      	ldr	r3, [r3, #0]
    a274:	4618      	mov	r0, r3
    a276:	4b0c      	ldr	r3, [pc, #48]	; (a2a8 <_qspi_sync_serial_run_command+0x6c>)
    a278:	4798      	blx	r3
    a27a:	4603      	mov	r3, r0
    a27c:	f083 0301 	eor.w	r3, r3, #1
    a280:	b2db      	uxtb	r3, r3
    a282:	2b00      	cmp	r3, #0
    a284:	d1f4      	bne.n	a270 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	681b      	ldr	r3, [r3, #0]
    a28a:	4618      	mov	r0, r3
    a28c:	4b07      	ldr	r3, [pc, #28]	; (a2ac <_qspi_sync_serial_run_command+0x70>)
    a28e:	4798      	blx	r3
	return ERR_NONE;
    a290:	2300      	movs	r3, #0
}
    a292:	4618      	mov	r0, r3
    a294:	3708      	adds	r7, #8
    a296:	46bd      	mov	sp, r7
    a298:	bd80      	pop	{r7, pc}
    a29a:	bf00      	nop
    a29c:	0000a115 	.word	0x0000a115
    a2a0:	0000a199 	.word	0x0000a199
    a2a4:	0000a039 	.word	0x0000a039
    a2a8:	00009eb1 	.word	0x00009eb1
    a2ac:	00009ed9 	.word	0x00009ed9

0000a2b0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a2b0:	b480      	push	{r7}
    a2b2:	b083      	sub	sp, #12
    a2b4:	af00      	add	r7, sp, #0
    a2b6:	6078      	str	r0, [r7, #4]
    a2b8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a2ba:	bf00      	nop
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	691a      	ldr	r2, [r3, #16]
    a2c0:	683b      	ldr	r3, [r7, #0]
    a2c2:	4013      	ands	r3, r2
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d1f9      	bne.n	a2bc <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a2c8:	bf00      	nop
    a2ca:	370c      	adds	r7, #12
    a2cc:	46bd      	mov	sp, r7
    a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2d2:	4770      	bx	lr

0000a2d4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a2d4:	b480      	push	{r7}
    a2d6:	b083      	sub	sp, #12
    a2d8:	af00      	add	r7, sp, #0
    a2da:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a2dc:	687b      	ldr	r3, [r7, #4]
    a2de:	f44f 7280 	mov.w	r2, #256	; 0x100
    a2e2:	819a      	strh	r2, [r3, #12]
}
    a2e4:	bf00      	nop
    a2e6:	370c      	adds	r7, #12
    a2e8:	46bd      	mov	sp, r7
    a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ee:	4770      	bx	lr

0000a2f0 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a2f0:	b480      	push	{r7}
    a2f2:	b083      	sub	sp, #12
    a2f4:	af00      	add	r7, sp, #0
    a2f6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a2f8:	687b      	ldr	r3, [r7, #4]
    a2fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a2fe:	819a      	strh	r2, [r3, #12]
}
    a300:	bf00      	nop
    a302:	370c      	adds	r7, #12
    a304:	46bd      	mov	sp, r7
    a306:	f85d 7b04 	ldr.w	r7, [sp], #4
    a30a:	4770      	bx	lr

0000a30c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a30c:	b480      	push	{r7}
    a30e:	b083      	sub	sp, #12
    a310:	af00      	add	r7, sp, #0
    a312:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a314:	687b      	ldr	r3, [r7, #4]
    a316:	899b      	ldrh	r3, [r3, #12]
    a318:	b29b      	uxth	r3, r3
}
    a31a:	4618      	mov	r0, r3
    a31c:	370c      	adds	r7, #12
    a31e:	46bd      	mov	sp, r7
    a320:	f85d 7b04 	ldr.w	r7, [sp], #4
    a324:	4770      	bx	lr

0000a326 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a326:	b480      	push	{r7}
    a328:	b083      	sub	sp, #12
    a32a:	af00      	add	r7, sp, #0
    a32c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	895b      	ldrh	r3, [r3, #10]
    a332:	b29b      	uxth	r3, r3
}
    a334:	4618      	mov	r0, r3
    a336:	370c      	adds	r7, #12
    a338:	46bd      	mov	sp, r7
    a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a33e:	4770      	bx	lr

0000a340 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a340:	b580      	push	{r7, lr}
    a342:	b082      	sub	sp, #8
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	881b      	ldrh	r3, [r3, #0]
    a34c:	b29b      	uxth	r3, r3
    a34e:	f043 0301 	orr.w	r3, r3, #1
    a352:	b29a      	uxth	r2, r3
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a358:	2101      	movs	r1, #1
    a35a:	6878      	ldr	r0, [r7, #4]
    a35c:	4b02      	ldr	r3, [pc, #8]	; (a368 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a35e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a360:	bf00      	nop
    a362:	3708      	adds	r7, #8
    a364:	46bd      	mov	sp, r7
    a366:	bd80      	pop	{r7, pc}
    a368:	0000a2b1 	.word	0x0000a2b1

0000a36c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a36c:	b580      	push	{r7, lr}
    a36e:	b084      	sub	sp, #16
    a370:	af00      	add	r7, sp, #0
    a372:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a374:	f248 0103 	movw	r1, #32771	; 0x8003
    a378:	6878      	ldr	r0, [r7, #4]
    a37a:	4b0a      	ldr	r3, [pc, #40]	; (a3a4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a37c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	881b      	ldrh	r3, [r3, #0]
    a382:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a384:	89fb      	ldrh	r3, [r7, #14]
    a386:	085b      	lsrs	r3, r3, #1
    a388:	b29b      	uxth	r3, r3
    a38a:	f003 0301 	and.w	r3, r3, #1
    a38e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a390:	89fb      	ldrh	r3, [r7, #14]
    a392:	2b00      	cmp	r3, #0
    a394:	bf14      	ite	ne
    a396:	2301      	movne	r3, #1
    a398:	2300      	moveq	r3, #0
    a39a:	b2db      	uxtb	r3, r3
}
    a39c:	4618      	mov	r0, r3
    a39e:	3710      	adds	r7, #16
    a3a0:	46bd      	mov	sp, r7
    a3a2:	bd80      	pop	{r7, pc}
    a3a4:	0000a2b1 	.word	0x0000a2b1

0000a3a8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b082      	sub	sp, #8
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a3b0:	687b      	ldr	r3, [r7, #4]
    a3b2:	881b      	ldrh	r3, [r3, #0]
    a3b4:	b29b      	uxth	r3, r3
    a3b6:	f023 0302 	bic.w	r3, r3, #2
    a3ba:	b29a      	uxth	r2, r3
    a3bc:	687b      	ldr	r3, [r7, #4]
    a3be:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a3c0:	f248 0103 	movw	r1, #32771	; 0x8003
    a3c4:	6878      	ldr	r0, [r7, #4]
    a3c6:	4b03      	ldr	r3, [pc, #12]	; (a3d4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a3c8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a3ca:	bf00      	nop
    a3cc:	3708      	adds	r7, #8
    a3ce:	46bd      	mov	sp, r7
    a3d0:	bd80      	pop	{r7, pc}
    a3d2:	bf00      	nop
    a3d4:	0000a2b1 	.word	0x0000a2b1

0000a3d8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a3d8:	b580      	push	{r7, lr}
    a3da:	b082      	sub	sp, #8
    a3dc:	af00      	add	r7, sp, #0
    a3de:	6078      	str	r0, [r7, #4]
    a3e0:	460b      	mov	r3, r1
    a3e2:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a3e4:	687b      	ldr	r3, [r7, #4]
    a3e6:	887a      	ldrh	r2, [r7, #2]
    a3e8:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a3ea:	f248 0103 	movw	r1, #32771	; 0x8003
    a3ee:	6878      	ldr	r0, [r7, #4]
    a3f0:	4b02      	ldr	r3, [pc, #8]	; (a3fc <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a3f2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a3f4:	bf00      	nop
    a3f6:	3708      	adds	r7, #8
    a3f8:	46bd      	mov	sp, r7
    a3fa:	bd80      	pop	{r7, pc}
    a3fc:	0000a2b1 	.word	0x0000a2b1

0000a400 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a400:	b580      	push	{r7, lr}
    a402:	b082      	sub	sp, #8
    a404:	af00      	add	r7, sp, #0
    a406:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a408:	2108      	movs	r1, #8
    a40a:	6878      	ldr	r0, [r7, #4]
    a40c:	4b03      	ldr	r3, [pc, #12]	; (a41c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a40e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a410:	687b      	ldr	r3, [r7, #4]
    a412:	699b      	ldr	r3, [r3, #24]
}
    a414:	4618      	mov	r0, r3
    a416:	3708      	adds	r7, #8
    a418:	46bd      	mov	sp, r7
    a41a:	bd80      	pop	{r7, pc}
    a41c:	0000a2b1 	.word	0x0000a2b1

0000a420 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a420:	b480      	push	{r7}
    a422:	b083      	sub	sp, #12
    a424:	af00      	add	r7, sp, #0
    a426:	6078      	str	r0, [r7, #4]
    a428:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	683a      	ldr	r2, [r7, #0]
    a42e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    a430:	bf00      	nop
    a432:	370c      	adds	r7, #12
    a434:	46bd      	mov	sp, r7
    a436:	f85d 7b04 	ldr.w	r7, [sp], #4
    a43a:	4770      	bx	lr

0000a43c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    a43c:	b580      	push	{r7, lr}
    a43e:	b082      	sub	sp, #8
    a440:	af00      	add	r7, sp, #0
    a442:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	2b00      	cmp	r3, #0
    a448:	d005      	beq.n	a456 <_calendar_init+0x1a>
    a44a:	687b      	ldr	r3, [r7, #4]
    a44c:	681b      	ldr	r3, [r3, #0]
    a44e:	2b00      	cmp	r3, #0
    a450:	d001      	beq.n	a456 <_calendar_init+0x1a>
    a452:	2301      	movs	r3, #1
    a454:	e000      	b.n	a458 <_calendar_init+0x1c>
    a456:	2300      	movs	r3, #0
    a458:	f003 0301 	and.w	r3, r3, #1
    a45c:	b2db      	uxtb	r3, r3
    a45e:	222f      	movs	r2, #47	; 0x2f
    a460:	491b      	ldr	r1, [pc, #108]	; (a4d0 <_calendar_init+0x94>)
    a462:	4618      	mov	r0, r3
    a464:	4b1b      	ldr	r3, [pc, #108]	; (a4d4 <_calendar_init+0x98>)
    a466:	4798      	blx	r3

	_rtc_dev = dev;
    a468:	4a1b      	ldr	r2, [pc, #108]	; (a4d8 <_calendar_init+0x9c>)
    a46a:	687b      	ldr	r3, [r7, #4]
    a46c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	681b      	ldr	r3, [r3, #0]
    a472:	4618      	mov	r0, r3
    a474:	4b19      	ldr	r3, [pc, #100]	; (a4dc <_calendar_init+0xa0>)
    a476:	4798      	blx	r3
    a478:	4603      	mov	r3, r0
    a47a:	2b00      	cmp	r3, #0
    a47c:	d00a      	beq.n	a494 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	4618      	mov	r0, r3
    a484:	4b16      	ldr	r3, [pc, #88]	; (a4e0 <_calendar_init+0xa4>)
    a486:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    a488:	687b      	ldr	r3, [r7, #4]
    a48a:	681b      	ldr	r3, [r3, #0]
    a48c:	2102      	movs	r1, #2
    a48e:	4618      	mov	r0, r3
    a490:	4b14      	ldr	r3, [pc, #80]	; (a4e4 <_calendar_init+0xa8>)
    a492:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	681b      	ldr	r3, [r3, #0]
    a498:	4618      	mov	r0, r3
    a49a:	4b13      	ldr	r3, [pc, #76]	; (a4e8 <_calendar_init+0xac>)
    a49c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	681b      	ldr	r3, [r3, #0]
    a4a2:	2101      	movs	r1, #1
    a4a4:	4618      	mov	r0, r3
    a4a6:	4b0f      	ldr	r3, [pc, #60]	; (a4e4 <_calendar_init+0xa8>)
    a4a8:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	681b      	ldr	r3, [r3, #0]
    a4ae:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    a4b2:	4618      	mov	r0, r3
    a4b4:	4b0d      	ldr	r3, [pc, #52]	; (a4ec <_calendar_init+0xb0>)
    a4b6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    a4bc:	2100      	movs	r1, #0
    a4be:	4618      	mov	r0, r3
    a4c0:	4b0b      	ldr	r3, [pc, #44]	; (a4f0 <_calendar_init+0xb4>)
    a4c2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    a4c4:	2300      	movs	r3, #0
}
    a4c6:	4618      	mov	r0, r3
    a4c8:	3708      	adds	r7, #8
    a4ca:	46bd      	mov	sp, r7
    a4cc:	bd80      	pop	{r7, pc}
    a4ce:	bf00      	nop
    a4d0:	0001cdf4 	.word	0x0001cdf4
    a4d4:	00007b0d 	.word	0x00007b0d
    a4d8:	20001924 	.word	0x20001924
    a4dc:	0000a36d 	.word	0x0000a36d
    a4e0:	0000a3a9 	.word	0x0000a3a9
    a4e4:	0000a2b1 	.word	0x0000a2b1
    a4e8:	0000a341 	.word	0x0000a341
    a4ec:	0000a3d9 	.word	0x0000a3d9
    a4f0:	0000a421 	.word	0x0000a421

0000a4f4 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b082      	sub	sp, #8
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a4fc:	687b      	ldr	r3, [r7, #4]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d005      	beq.n	a50e <_calendar_get_counter+0x1a>
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	2b00      	cmp	r3, #0
    a508:	d001      	beq.n	a50e <_calendar_get_counter+0x1a>
    a50a:	2301      	movs	r3, #1
    a50c:	e000      	b.n	a510 <_calendar_get_counter+0x1c>
    a50e:	2300      	movs	r3, #0
    a510:	f003 0301 	and.w	r3, r3, #1
    a514:	b2db      	uxtb	r3, r3
    a516:	2299      	movs	r2, #153	; 0x99
    a518:	4906      	ldr	r1, [pc, #24]	; (a534 <_calendar_get_counter+0x40>)
    a51a:	4618      	mov	r0, r3
    a51c:	4b06      	ldr	r3, [pc, #24]	; (a538 <_calendar_get_counter+0x44>)
    a51e:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	681b      	ldr	r3, [r3, #0]
    a524:	4618      	mov	r0, r3
    a526:	4b05      	ldr	r3, [pc, #20]	; (a53c <_calendar_get_counter+0x48>)
    a528:	4798      	blx	r3
    a52a:	4603      	mov	r3, r0
}
    a52c:	4618      	mov	r0, r3
    a52e:	3708      	adds	r7, #8
    a530:	46bd      	mov	sp, r7
    a532:	bd80      	pop	{r7, pc}
    a534:	0001cdf4 	.word	0x0001cdf4
    a538:	00007b0d 	.word	0x00007b0d
    a53c:	0000a401 	.word	0x0000a401

0000a540 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    a540:	b580      	push	{r7, lr}
    a542:	b084      	sub	sp, #16
    a544:	af00      	add	r7, sp, #0
    a546:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	681b      	ldr	r3, [r3, #0]
    a54c:	4618      	mov	r0, r3
    a54e:	4b19      	ldr	r3, [pc, #100]	; (a5b4 <_rtc_interrupt_handler+0x74>)
    a550:	4798      	blx	r3
    a552:	4603      	mov	r3, r0
    a554:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	681b      	ldr	r3, [r3, #0]
    a55a:	4618      	mov	r0, r3
    a55c:	4b16      	ldr	r3, [pc, #88]	; (a5b8 <_rtc_interrupt_handler+0x78>)
    a55e:	4798      	blx	r3
    a560:	4603      	mov	r3, r0
    a562:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    a564:	89fa      	ldrh	r2, [r7, #14]
    a566:	89bb      	ldrh	r3, [r7, #12]
    a568:	4013      	ands	r3, r2
    a56a:	b29b      	uxth	r3, r3
    a56c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a570:	2b00      	cmp	r3, #0
    a572:	d009      	beq.n	a588 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	685b      	ldr	r3, [r3, #4]
    a578:	6878      	ldr	r0, [r7, #4]
    a57a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    a57c:	687b      	ldr	r3, [r7, #4]
    a57e:	681b      	ldr	r3, [r3, #0]
    a580:	4618      	mov	r0, r3
    a582:	4b0e      	ldr	r3, [pc, #56]	; (a5bc <_rtc_interrupt_handler+0x7c>)
    a584:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    a586:	e010      	b.n	a5aa <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    a588:	89fa      	ldrh	r2, [r7, #14]
    a58a:	89bb      	ldrh	r3, [r7, #12]
    a58c:	4013      	ands	r3, r2
    a58e:	b29b      	uxth	r3, r3
    a590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a594:	2b00      	cmp	r3, #0
    a596:	d008      	beq.n	a5aa <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	689b      	ldr	r3, [r3, #8]
    a59c:	6878      	ldr	r0, [r7, #4]
    a59e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	681b      	ldr	r3, [r3, #0]
    a5a4:	4618      	mov	r0, r3
    a5a6:	4b06      	ldr	r3, [pc, #24]	; (a5c0 <_rtc_interrupt_handler+0x80>)
    a5a8:	4798      	blx	r3
}
    a5aa:	bf00      	nop
    a5ac:	3710      	adds	r7, #16
    a5ae:	46bd      	mov	sp, r7
    a5b0:	bd80      	pop	{r7, pc}
    a5b2:	bf00      	nop
    a5b4:	0000a30d 	.word	0x0000a30d
    a5b8:	0000a327 	.word	0x0000a327
    a5bc:	0000a2d5 	.word	0x0000a2d5
    a5c0:	0000a2f1 	.word	0x0000a2f1

0000a5c4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    a5c4:	b580      	push	{r7, lr}
    a5c6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    a5c8:	4b03      	ldr	r3, [pc, #12]	; (a5d8 <RTC_Handler+0x14>)
    a5ca:	681b      	ldr	r3, [r3, #0]
    a5cc:	4618      	mov	r0, r3
    a5ce:	4b03      	ldr	r3, [pc, #12]	; (a5dc <RTC_Handler+0x18>)
    a5d0:	4798      	blx	r3
}
    a5d2:	bf00      	nop
    a5d4:	bd80      	pop	{r7, pc}
    a5d6:	bf00      	nop
    a5d8:	20001924 	.word	0x20001924
    a5dc:	0000a541 	.word	0x0000a541

0000a5e0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a5e0:	b480      	push	{r7}
    a5e2:	b083      	sub	sp, #12
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	6078      	str	r0, [r7, #4]
    a5e8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a5ea:	bf00      	nop
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	69da      	ldr	r2, [r3, #28]
    a5f0:	683b      	ldr	r3, [r7, #0]
    a5f2:	4013      	ands	r3, r2
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d1f9      	bne.n	a5ec <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    a5f8:	bf00      	nop
    a5fa:	370c      	adds	r7, #12
    a5fc:	46bd      	mov	sp, r7
    a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a602:	4770      	bx	lr

0000a604 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a604:	b480      	push	{r7}
    a606:	b083      	sub	sp, #12
    a608:	af00      	add	r7, sp, #0
    a60a:	6078      	str	r0, [r7, #4]
    a60c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	69da      	ldr	r2, [r3, #28]
    a612:	683b      	ldr	r3, [r7, #0]
    a614:	4013      	ands	r3, r2
    a616:	2b00      	cmp	r3, #0
    a618:	bf14      	ite	ne
    a61a:	2301      	movne	r3, #1
    a61c:	2300      	moveq	r3, #0
    a61e:	b2db      	uxtb	r3, r3
}
    a620:	4618      	mov	r0, r3
    a622:	370c      	adds	r7, #12
    a624:	46bd      	mov	sp, r7
    a626:	f85d 7b04 	ldr.w	r7, [sp], #4
    a62a:	4770      	bx	lr

0000a62c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    a62c:	b480      	push	{r7}
    a62e:	b083      	sub	sp, #12
    a630:	af00      	add	r7, sp, #0
    a632:	6078      	str	r0, [r7, #4]
    a634:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a636:	bf00      	nop
    a638:	687b      	ldr	r3, [r7, #4]
    a63a:	69da      	ldr	r2, [r3, #28]
    a63c:	683b      	ldr	r3, [r7, #0]
    a63e:	4013      	ands	r3, r2
    a640:	2b00      	cmp	r3, #0
    a642:	d1f9      	bne.n	a638 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    a644:	bf00      	nop
    a646:	370c      	adds	r7, #12
    a648:	46bd      	mov	sp, r7
    a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a64e:	4770      	bx	lr

0000a650 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    a650:	b480      	push	{r7}
    a652:	b083      	sub	sp, #12
    a654:	af00      	add	r7, sp, #0
    a656:	6078      	str	r0, [r7, #4]
    a658:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    a65a:	687b      	ldr	r3, [r7, #4]
    a65c:	69da      	ldr	r2, [r3, #28]
    a65e:	683b      	ldr	r3, [r7, #0]
    a660:	4013      	ands	r3, r2
    a662:	2b00      	cmp	r3, #0
    a664:	bf14      	ite	ne
    a666:	2301      	movne	r3, #1
    a668:	2300      	moveq	r3, #0
    a66a:	b2db      	uxtb	r3, r3
}
    a66c:	4618      	mov	r0, r3
    a66e:	370c      	adds	r7, #12
    a670:	46bd      	mov	sp, r7
    a672:	f85d 7b04 	ldr.w	r7, [sp], #4
    a676:	4770      	bx	lr

0000a678 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    a678:	b480      	push	{r7}
    a67a:	b083      	sub	sp, #12
    a67c:	af00      	add	r7, sp, #0
    a67e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	2201      	movs	r2, #1
    a684:	761a      	strb	r2, [r3, #24]
}
    a686:	bf00      	nop
    a688:	370c      	adds	r7, #12
    a68a:	46bd      	mov	sp, r7
    a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a690:	4770      	bx	lr

0000a692 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    a692:	b480      	push	{r7}
    a694:	b083      	sub	sp, #12
    a696:	af00      	add	r7, sp, #0
    a698:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a69a:	687b      	ldr	r3, [r7, #4]
    a69c:	2202      	movs	r2, #2
    a69e:	761a      	strb	r2, [r3, #24]
}
    a6a0:	bf00      	nop
    a6a2:	370c      	adds	r7, #12
    a6a4:	46bd      	mov	sp, r7
    a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6aa:	4770      	bx	lr

0000a6ac <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    a6ac:	b480      	push	{r7}
    a6ae:	b083      	sub	sp, #12
    a6b0:	af00      	add	r7, sp, #0
    a6b2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	7e1b      	ldrb	r3, [r3, #24]
    a6b8:	b2db      	uxtb	r3, r3
}
    a6ba:	4618      	mov	r0, r3
    a6bc:	370c      	adds	r7, #12
    a6be:	46bd      	mov	sp, r7
    a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6c4:	4770      	bx	lr

0000a6c6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    a6c6:	b480      	push	{r7}
    a6c8:	b085      	sub	sp, #20
    a6ca:	af00      	add	r7, sp, #0
    a6cc:	6078      	str	r0, [r7, #4]
    a6ce:	460b      	mov	r3, r1
    a6d0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    a6d2:	687b      	ldr	r3, [r7, #4]
    a6d4:	7e1b      	ldrb	r3, [r3, #24]
    a6d6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a6d8:	7bfa      	ldrb	r2, [r7, #15]
    a6da:	78fb      	ldrb	r3, [r7, #3]
    a6dc:	4013      	ands	r3, r2
    a6de:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a6e0:	7bfb      	ldrb	r3, [r7, #15]
}
    a6e2:	4618      	mov	r0, r3
    a6e4:	3714      	adds	r7, #20
    a6e6:	46bd      	mov	sp, r7
    a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ec:	4770      	bx	lr

0000a6ee <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    a6ee:	b480      	push	{r7}
    a6f0:	b083      	sub	sp, #12
    a6f2:	af00      	add	r7, sp, #0
    a6f4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    a6f6:	687b      	ldr	r3, [r7, #4]
    a6f8:	7e1b      	ldrb	r3, [r3, #24]
    a6fa:	b2db      	uxtb	r3, r3
}
    a6fc:	4618      	mov	r0, r3
    a6fe:	370c      	adds	r7, #12
    a700:	46bd      	mov	sp, r7
    a702:	f85d 7b04 	ldr.w	r7, [sp], #4
    a706:	4770      	bx	lr

0000a708 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    a708:	b480      	push	{r7}
    a70a:	b083      	sub	sp, #12
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
    a710:	460b      	mov	r3, r1
    a712:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	78fa      	ldrb	r2, [r7, #3]
    a718:	761a      	strb	r2, [r3, #24]
}
    a71a:	bf00      	nop
    a71c:	370c      	adds	r7, #12
    a71e:	46bd      	mov	sp, r7
    a720:	f85d 7b04 	ldr.w	r7, [sp], #4
    a724:	4770      	bx	lr
	...

0000a728 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a728:	b580      	push	{r7, lr}
    a72a:	b082      	sub	sp, #8
    a72c:	af00      	add	r7, sp, #0
    a72e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	681b      	ldr	r3, [r3, #0]
    a734:	f043 0202 	orr.w	r2, r3, #2
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a73c:	2103      	movs	r1, #3
    a73e:	6878      	ldr	r0, [r7, #4]
    a740:	4b02      	ldr	r3, [pc, #8]	; (a74c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    a742:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a744:	bf00      	nop
    a746:	3708      	adds	r7, #8
    a748:	46bd      	mov	sp, r7
    a74a:	bd80      	pop	{r7, pc}
    a74c:	0000a5e1 	.word	0x0000a5e1

0000a750 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a750:	b580      	push	{r7, lr}
    a752:	b082      	sub	sp, #8
    a754:	af00      	add	r7, sp, #0
    a756:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    a758:	687b      	ldr	r3, [r7, #4]
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	f023 0202 	bic.w	r2, r3, #2
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a764:	2103      	movs	r1, #3
    a766:	6878      	ldr	r0, [r7, #4]
    a768:	4b02      	ldr	r3, [pc, #8]	; (a774 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    a76a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a76c:	bf00      	nop
    a76e:	3708      	adds	r7, #8
    a770:	46bd      	mov	sp, r7
    a772:	bd80      	pop	{r7, pc}
    a774:	0000a5e1 	.word	0x0000a5e1

0000a778 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    a778:	b480      	push	{r7}
    a77a:	b085      	sub	sp, #20
    a77c:	af00      	add	r7, sp, #0
    a77e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    a786:	68fb      	ldr	r3, [r7, #12]
    a788:	0edb      	lsrs	r3, r3, #27
    a78a:	f003 0301 	and.w	r3, r3, #1
    a78e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a790:	68fb      	ldr	r3, [r7, #12]
    a792:	2b00      	cmp	r3, #0
    a794:	bf14      	ite	ne
    a796:	2301      	movne	r3, #1
    a798:	2300      	moveq	r3, #0
    a79a:	b2db      	uxtb	r3, r3
}
    a79c:	4618      	mov	r0, r3
    a79e:	3714      	adds	r7, #20
    a7a0:	46bd      	mov	sp, r7
    a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7a6:	4770      	bx	lr

0000a7a8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    a7a8:	b580      	push	{r7, lr}
    a7aa:	b084      	sub	sp, #16
    a7ac:	af00      	add	r7, sp, #0
    a7ae:	6078      	str	r0, [r7, #4]
    a7b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a7b2:	2103      	movs	r1, #3
    a7b4:	6878      	ldr	r0, [r7, #4]
    a7b6:	4b07      	ldr	r3, [pc, #28]	; (a7d4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    a7b8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	681b      	ldr	r3, [r3, #0]
    a7be:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a7c0:	68fa      	ldr	r2, [r7, #12]
    a7c2:	683b      	ldr	r3, [r7, #0]
    a7c4:	4013      	ands	r3, r2
    a7c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    a7c8:	68fb      	ldr	r3, [r7, #12]
}
    a7ca:	4618      	mov	r0, r3
    a7cc:	3710      	adds	r7, #16
    a7ce:	46bd      	mov	sp, r7
    a7d0:	bd80      	pop	{r7, pc}
    a7d2:	bf00      	nop
    a7d4:	0000a5e1 	.word	0x0000a5e1

0000a7d8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b082      	sub	sp, #8
    a7dc:	af00      	add	r7, sp, #0
    a7de:	6078      	str	r0, [r7, #4]
    a7e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    a7e2:	687b      	ldr	r3, [r7, #4]
    a7e4:	683a      	ldr	r2, [r7, #0]
    a7e6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a7e8:	2103      	movs	r1, #3
    a7ea:	6878      	ldr	r0, [r7, #4]
    a7ec:	4b02      	ldr	r3, [pc, #8]	; (a7f8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    a7ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a7f0:	bf00      	nop
    a7f2:	3708      	adds	r7, #8
    a7f4:	46bd      	mov	sp, r7
    a7f6:	bd80      	pop	{r7, pc}
    a7f8:	0000a5e1 	.word	0x0000a5e1

0000a7fc <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b082      	sub	sp, #8
    a800:	af00      	add	r7, sp, #0
    a802:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	681b      	ldr	r3, [r3, #0]
    a808:	f043 0202 	orr.w	r2, r3, #2
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a810:	2103      	movs	r1, #3
    a812:	6878      	ldr	r0, [r7, #4]
    a814:	4b02      	ldr	r3, [pc, #8]	; (a820 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    a816:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a818:	bf00      	nop
    a81a:	3708      	adds	r7, #8
    a81c:	46bd      	mov	sp, r7
    a81e:	bd80      	pop	{r7, pc}
    a820:	0000a62d 	.word	0x0000a62d

0000a824 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a824:	b580      	push	{r7, lr}
    a826:	b084      	sub	sp, #16
    a828:	af00      	add	r7, sp, #0
    a82a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a82c:	2103      	movs	r1, #3
    a82e:	6878      	ldr	r0, [r7, #4]
    a830:	4b09      	ldr	r3, [pc, #36]	; (a858 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    a832:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a834:	687b      	ldr	r3, [r7, #4]
    a836:	681b      	ldr	r3, [r3, #0]
    a838:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    a83a:	68fb      	ldr	r3, [r7, #12]
    a83c:	085b      	lsrs	r3, r3, #1
    a83e:	f003 0301 	and.w	r3, r3, #1
    a842:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a844:	68fb      	ldr	r3, [r7, #12]
    a846:	2b00      	cmp	r3, #0
    a848:	bf14      	ite	ne
    a84a:	2301      	movne	r3, #1
    a84c:	2300      	moveq	r3, #0
    a84e:	b2db      	uxtb	r3, r3
}
    a850:	4618      	mov	r0, r3
    a852:	3710      	adds	r7, #16
    a854:	46bd      	mov	sp, r7
    a856:	bd80      	pop	{r7, pc}
    a858:	0000a62d 	.word	0x0000a62d

0000a85c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a85c:	b580      	push	{r7, lr}
    a85e:	b082      	sub	sp, #8
    a860:	af00      	add	r7, sp, #0
    a862:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a864:	687b      	ldr	r3, [r7, #4]
    a866:	681b      	ldr	r3, [r3, #0]
    a868:	f023 0202 	bic.w	r2, r3, #2
    a86c:	687b      	ldr	r3, [r7, #4]
    a86e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a870:	2103      	movs	r1, #3
    a872:	6878      	ldr	r0, [r7, #4]
    a874:	4b02      	ldr	r3, [pc, #8]	; (a880 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    a876:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a878:	bf00      	nop
    a87a:	3708      	adds	r7, #8
    a87c:	46bd      	mov	sp, r7
    a87e:	bd80      	pop	{r7, pc}
    a880:	0000a62d 	.word	0x0000a62d

0000a884 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    a884:	b580      	push	{r7, lr}
    a886:	b084      	sub	sp, #16
    a888:	af00      	add	r7, sp, #0
    a88a:	6078      	str	r0, [r7, #4]
    a88c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a88e:	2103      	movs	r1, #3
    a890:	6878      	ldr	r0, [r7, #4]
    a892:	4b07      	ldr	r3, [pc, #28]	; (a8b0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    a894:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a896:	687b      	ldr	r3, [r7, #4]
    a898:	681b      	ldr	r3, [r3, #0]
    a89a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a89c:	68fa      	ldr	r2, [r7, #12]
    a89e:	683b      	ldr	r3, [r7, #0]
    a8a0:	4013      	ands	r3, r2
    a8a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    a8a4:	68fb      	ldr	r3, [r7, #12]
}
    a8a6:	4618      	mov	r0, r3
    a8a8:	3710      	adds	r7, #16
    a8aa:	46bd      	mov	sp, r7
    a8ac:	bd80      	pop	{r7, pc}
    a8ae:	bf00      	nop
    a8b0:	0000a62d 	.word	0x0000a62d

0000a8b4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    a8b4:	b580      	push	{r7, lr}
    a8b6:	b082      	sub	sp, #8
    a8b8:	af00      	add	r7, sp, #0
    a8ba:	6078      	str	r0, [r7, #4]
    a8bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	683a      	ldr	r2, [r7, #0]
    a8c2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a8c4:	2103      	movs	r1, #3
    a8c6:	6878      	ldr	r0, [r7, #4]
    a8c8:	4b02      	ldr	r3, [pc, #8]	; (a8d4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    a8ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a8cc:	bf00      	nop
    a8ce:	3708      	adds	r7, #8
    a8d0:	46bd      	mov	sp, r7
    a8d2:	bd80      	pop	{r7, pc}
    a8d4:	0000a62d 	.word	0x0000a62d

0000a8d8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    a8d8:	b580      	push	{r7, lr}
    a8da:	b082      	sub	sp, #8
    a8dc:	af00      	add	r7, sp, #0
    a8de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    a8e0:	687b      	ldr	r3, [r7, #4]
    a8e2:	685b      	ldr	r3, [r3, #4]
    a8e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a8ec:	2104      	movs	r1, #4
    a8ee:	6878      	ldr	r0, [r7, #4]
    a8f0:	4b02      	ldr	r3, [pc, #8]	; (a8fc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    a8f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a8f4:	bf00      	nop
    a8f6:	3708      	adds	r7, #8
    a8f8:	46bd      	mov	sp, r7
    a8fa:	bd80      	pop	{r7, pc}
    a8fc:	0000a5e1 	.word	0x0000a5e1

0000a900 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    a900:	b580      	push	{r7, lr}
    a902:	b082      	sub	sp, #8
    a904:	af00      	add	r7, sp, #0
    a906:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    a908:	687b      	ldr	r3, [r7, #4]
    a90a:	685b      	ldr	r3, [r3, #4]
    a90c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a914:	2104      	movs	r1, #4
    a916:	6878      	ldr	r0, [r7, #4]
    a918:	4b02      	ldr	r3, [pc, #8]	; (a924 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    a91a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a91c:	bf00      	nop
    a91e:	3708      	adds	r7, #8
    a920:	46bd      	mov	sp, r7
    a922:	bd80      	pop	{r7, pc}
    a924:	0000a5e1 	.word	0x0000a5e1

0000a928 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    a928:	b580      	push	{r7, lr}
    a92a:	b082      	sub	sp, #8
    a92c:	af00      	add	r7, sp, #0
    a92e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a930:	687b      	ldr	r3, [r7, #4]
    a932:	685b      	ldr	r3, [r3, #4]
    a934:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a93c:	2104      	movs	r1, #4
    a93e:	6878      	ldr	r0, [r7, #4]
    a940:	4b02      	ldr	r3, [pc, #8]	; (a94c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    a942:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a944:	bf00      	nop
    a946:	3708      	adds	r7, #8
    a948:	46bd      	mov	sp, r7
    a94a:	bd80      	pop	{r7, pc}
    a94c:	0000a5e1 	.word	0x0000a5e1

0000a950 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    a950:	b580      	push	{r7, lr}
    a952:	b082      	sub	sp, #8
    a954:	af00      	add	r7, sp, #0
    a956:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a958:	687b      	ldr	r3, [r7, #4]
    a95a:	685b      	ldr	r3, [r3, #4]
    a95c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    a960:	687b      	ldr	r3, [r7, #4]
    a962:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a964:	2104      	movs	r1, #4
    a966:	6878      	ldr	r0, [r7, #4]
    a968:	4b02      	ldr	r3, [pc, #8]	; (a974 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    a96a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a96c:	bf00      	nop
    a96e:	3708      	adds	r7, #8
    a970:	46bd      	mov	sp, r7
    a972:	bd80      	pop	{r7, pc}
    a974:	0000a5e1 	.word	0x0000a5e1

0000a978 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b082      	sub	sp, #8
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
    a980:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a982:	687b      	ldr	r3, [r7, #4]
    a984:	685a      	ldr	r2, [r3, #4]
    a986:	683b      	ldr	r3, [r7, #0]
    a988:	041b      	lsls	r3, r3, #16
    a98a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    a98e:	431a      	orrs	r2, r3
    a990:	687b      	ldr	r3, [r7, #4]
    a992:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a994:	2104      	movs	r1, #4
    a996:	6878      	ldr	r0, [r7, #4]
    a998:	4b02      	ldr	r3, [pc, #8]	; (a9a4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    a99a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a99c:	bf00      	nop
    a99e:	3708      	adds	r7, #8
    a9a0:	46bd      	mov	sp, r7
    a9a2:	bd80      	pop	{r7, pc}
    a9a4:	0000a5e1 	.word	0x0000a5e1

0000a9a8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b082      	sub	sp, #8
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	6078      	str	r0, [r7, #4]
    a9b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	683a      	ldr	r2, [r7, #0]
    a9b6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a9b8:	2104      	movs	r1, #4
    a9ba:	6878      	ldr	r0, [r7, #4]
    a9bc:	4b02      	ldr	r3, [pc, #8]	; (a9c8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    a9be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a9c0:	bf00      	nop
    a9c2:	3708      	adds	r7, #8
    a9c4:	46bd      	mov	sp, r7
    a9c6:	bd80      	pop	{r7, pc}
    a9c8:	0000a5e1 	.word	0x0000a5e1

0000a9cc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	6078      	str	r0, [r7, #4]
    a9d4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	683a      	ldr	r2, [r7, #0]
    a9da:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    a9dc:	2117      	movs	r1, #23
    a9de:	6878      	ldr	r0, [r7, #4]
    a9e0:	4b02      	ldr	r3, [pc, #8]	; (a9ec <hri_sercomspi_write_CTRLB_reg+0x20>)
    a9e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a9e4:	bf00      	nop
    a9e6:	3708      	adds	r7, #8
    a9e8:	46bd      	mov	sp, r7
    a9ea:	bd80      	pop	{r7, pc}
    a9ec:	0000a62d 	.word	0x0000a62d

0000a9f0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    a9f0:	b480      	push	{r7}
    a9f2:	b083      	sub	sp, #12
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	6078      	str	r0, [r7, #4]
    a9f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	683a      	ldr	r2, [r7, #0]
    a9fe:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa00:	bf00      	nop
    aa02:	370c      	adds	r7, #12
    aa04:	46bd      	mov	sp, r7
    aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa0a:	4770      	bx	lr

0000aa0c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    aa0c:	b480      	push	{r7}
    aa0e:	b083      	sub	sp, #12
    aa10:	af00      	add	r7, sp, #0
    aa12:	6078      	str	r0, [r7, #4]
    aa14:	460b      	mov	r3, r1
    aa16:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    aa18:	687b      	ldr	r3, [r7, #4]
    aa1a:	78fa      	ldrb	r2, [r7, #3]
    aa1c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa1e:	bf00      	nop
    aa20:	370c      	adds	r7, #12
    aa22:	46bd      	mov	sp, r7
    aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa28:	4770      	bx	lr
	...

0000aa2c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    aa2c:	b580      	push	{r7, lr}
    aa2e:	b084      	sub	sp, #16
    aa30:	af00      	add	r7, sp, #0
    aa32:	6078      	str	r0, [r7, #4]
    aa34:	460b      	mov	r3, r1
    aa36:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aa3c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    aa3e:	68fb      	ldr	r3, [r7, #12]
    aa40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    aa44:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    aa46:	78fb      	ldrb	r3, [r7, #3]
    aa48:	039b      	lsls	r3, r3, #14
    aa4a:	461a      	mov	r2, r3
    aa4c:	68fb      	ldr	r3, [r7, #12]
    aa4e:	4313      	orrs	r3, r2
    aa50:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	68fa      	ldr	r2, [r7, #12]
    aa56:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa58:	2104      	movs	r1, #4
    aa5a:	6878      	ldr	r0, [r7, #4]
    aa5c:	4b02      	ldr	r3, [pc, #8]	; (aa68 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    aa5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa60:	bf00      	nop
    aa62:	3710      	adds	r7, #16
    aa64:	46bd      	mov	sp, r7
    aa66:	bd80      	pop	{r7, pc}
    aa68:	0000a5e1 	.word	0x0000a5e1

0000aa6c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b082      	sub	sp, #8
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
    aa74:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    aa76:	687b      	ldr	r3, [r7, #4]
    aa78:	683a      	ldr	r2, [r7, #0]
    aa7a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa7c:	2104      	movs	r1, #4
    aa7e:	6878      	ldr	r0, [r7, #4]
    aa80:	4b02      	ldr	r3, [pc, #8]	; (aa8c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    aa82:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa84:	bf00      	nop
    aa86:	3708      	adds	r7, #8
    aa88:	46bd      	mov	sp, r7
    aa8a:	bd80      	pop	{r7, pc}
    aa8c:	0000a5e1 	.word	0x0000a5e1

0000aa90 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b082      	sub	sp, #8
    aa94:	af00      	add	r7, sp, #0
    aa96:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa98:	2104      	movs	r1, #4
    aa9a:	6878      	ldr	r0, [r7, #4]
    aa9c:	4b03      	ldr	r3, [pc, #12]	; (aaac <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    aa9e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    aaa0:	687b      	ldr	r3, [r7, #4]
    aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    aaa4:	4618      	mov	r0, r3
    aaa6:	3708      	adds	r7, #8
    aaa8:	46bd      	mov	sp, r7
    aaaa:	bd80      	pop	{r7, pc}
    aaac:	0000a5e1 	.word	0x0000a5e1

0000aab0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    aab0:	b480      	push	{r7}
    aab2:	b083      	sub	sp, #12
    aab4:	af00      	add	r7, sp, #0
    aab6:	6078      	str	r0, [r7, #4]
    aab8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    aaba:	687b      	ldr	r3, [r7, #4]
    aabc:	683a      	ldr	r2, [r7, #0]
    aabe:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aac0:	bf00      	nop
    aac2:	370c      	adds	r7, #12
    aac4:	46bd      	mov	sp, r7
    aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaca:	4770      	bx	lr

0000aacc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b082      	sub	sp, #8
    aad0:	af00      	add	r7, sp, #0
    aad2:	6078      	str	r0, [r7, #4]
    aad4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	683a      	ldr	r2, [r7, #0]
    aada:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aadc:	2104      	movs	r1, #4
    aade:	6878      	ldr	r0, [r7, #4]
    aae0:	4b02      	ldr	r3, [pc, #8]	; (aaec <hri_sercomi2cm_write_DATA_reg+0x20>)
    aae2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aae4:	bf00      	nop
    aae6:	3708      	adds	r7, #8
    aae8:	46bd      	mov	sp, r7
    aaea:	bd80      	pop	{r7, pc}
    aaec:	0000a5e1 	.word	0x0000a5e1

0000aaf0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    aaf0:	b580      	push	{r7, lr}
    aaf2:	b082      	sub	sp, #8
    aaf4:	af00      	add	r7, sp, #0
    aaf6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aaf8:	2104      	movs	r1, #4
    aafa:	6878      	ldr	r0, [r7, #4]
    aafc:	4b03      	ldr	r3, [pc, #12]	; (ab0c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    aafe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    ab00:	687b      	ldr	r3, [r7, #4]
    ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    ab04:	4618      	mov	r0, r3
    ab06:	3708      	adds	r7, #8
    ab08:	46bd      	mov	sp, r7
    ab0a:	bd80      	pop	{r7, pc}
    ab0c:	0000a5e1 	.word	0x0000a5e1

0000ab10 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    ab10:	b480      	push	{r7}
    ab12:	b083      	sub	sp, #12
    ab14:	af00      	add	r7, sp, #0
    ab16:	6078      	str	r0, [r7, #4]
    ab18:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    ab1a:	687b      	ldr	r3, [r7, #4]
    ab1c:	683a      	ldr	r2, [r7, #0]
    ab1e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab20:	bf00      	nop
    ab22:	370c      	adds	r7, #12
    ab24:	46bd      	mov	sp, r7
    ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2a:	4770      	bx	lr

0000ab2c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    ab2c:	b480      	push	{r7}
    ab2e:	b083      	sub	sp, #12
    ab30:	af00      	add	r7, sp, #0
    ab32:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    ab34:	687b      	ldr	r3, [r7, #4]
    ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    ab38:	4618      	mov	r0, r3
    ab3a:	370c      	adds	r7, #12
    ab3c:	46bd      	mov	sp, r7
    ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab42:	4770      	bx	lr

0000ab44 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    ab44:	b480      	push	{r7}
    ab46:	b083      	sub	sp, #12
    ab48:	af00      	add	r7, sp, #0
    ab4a:	6078      	str	r0, [r7, #4]
    ab4c:	460b      	mov	r3, r1
    ab4e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    ab50:	687b      	ldr	r3, [r7, #4]
    ab52:	78fa      	ldrb	r2, [r7, #3]
    ab54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab58:	bf00      	nop
    ab5a:	370c      	adds	r7, #12
    ab5c:	46bd      	mov	sp, r7
    ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab62:	4770      	bx	lr

0000ab64 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    ab64:	b480      	push	{r7}
    ab66:	b083      	sub	sp, #12
    ab68:	af00      	add	r7, sp, #0
    ab6a:	6078      	str	r0, [r7, #4]
    ab6c:	460b      	mov	r3, r1
    ab6e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	887a      	ldrh	r2, [r7, #2]
    ab74:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab76:	bf00      	nop
    ab78:	370c      	adds	r7, #12
    ab7a:	46bd      	mov	sp, r7
    ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab80:	4770      	bx	lr
	...

0000ab84 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b082      	sub	sp, #8
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ab8c:	2104      	movs	r1, #4
    ab8e:	6878      	ldr	r0, [r7, #4]
    ab90:	4b06      	ldr	r3, [pc, #24]	; (abac <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    ab92:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	8b5b      	ldrh	r3, [r3, #26]
    ab98:	b29b      	uxth	r3, r3
    ab9a:	091b      	lsrs	r3, r3, #4
    ab9c:	b29b      	uxth	r3, r3
    ab9e:	f003 0303 	and.w	r3, r3, #3
    aba2:	b29b      	uxth	r3, r3
}
    aba4:	4618      	mov	r0, r3
    aba6:	3708      	adds	r7, #8
    aba8:	46bd      	mov	sp, r7
    abaa:	bd80      	pop	{r7, pc}
    abac:	0000a5e1 	.word	0x0000a5e1

0000abb0 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    abb0:	b580      	push	{r7, lr}
    abb2:	b082      	sub	sp, #8
    abb4:	af00      	add	r7, sp, #0
    abb6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    abb8:	2104      	movs	r1, #4
    abba:	6878      	ldr	r0, [r7, #4]
    abbc:	4b04      	ldr	r3, [pc, #16]	; (abd0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    abbe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    abc0:	687b      	ldr	r3, [r7, #4]
    abc2:	8b5b      	ldrh	r3, [r3, #26]
    abc4:	b29b      	uxth	r3, r3
}
    abc6:	4618      	mov	r0, r3
    abc8:	3708      	adds	r7, #8
    abca:	46bd      	mov	sp, r7
    abcc:	bd80      	pop	{r7, pc}
    abce:	bf00      	nop
    abd0:	0000a5e1 	.word	0x0000a5e1

0000abd4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    abd4:	b580      	push	{r7, lr}
    abd6:	b082      	sub	sp, #8
    abd8:	af00      	add	r7, sp, #0
    abda:	6078      	str	r0, [r7, #4]
    abdc:	460b      	mov	r3, r1
    abde:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	887a      	ldrh	r2, [r7, #2]
    abe4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    abe6:	2104      	movs	r1, #4
    abe8:	6878      	ldr	r0, [r7, #4]
    abea:	4b03      	ldr	r3, [pc, #12]	; (abf8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    abec:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    abee:	bf00      	nop
    abf0:	3708      	adds	r7, #8
    abf2:	46bd      	mov	sp, r7
    abf4:	bd80      	pop	{r7, pc}
    abf6:	bf00      	nop
    abf8:	0000a5e1 	.word	0x0000a5e1

0000abfc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    abfc:	b4b0      	push	{r4, r5, r7}
    abfe:	b08d      	sub	sp, #52	; 0x34
    ac00:	af00      	add	r7, sp, #0
    ac02:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    ac04:	4b13      	ldr	r3, [pc, #76]	; (ac54 <_sercom_get_hardware_index+0x58>)
    ac06:	f107 040c 	add.w	r4, r7, #12
    ac0a:	461d      	mov	r5, r3
    ac0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ac0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ac10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ac14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ac18:	2300      	movs	r3, #0
    ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ac1c:	e010      	b.n	ac40 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac20:	009b      	lsls	r3, r3, #2
    ac22:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ac26:	4413      	add	r3, r2
    ac28:	f853 3c24 	ldr.w	r3, [r3, #-36]
    ac2c:	461a      	mov	r2, r3
    ac2e:	687b      	ldr	r3, [r7, #4]
    ac30:	429a      	cmp	r2, r3
    ac32:	d102      	bne.n	ac3a <_sercom_get_hardware_index+0x3e>
			return i;
    ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac36:	b2db      	uxtb	r3, r3
    ac38:	e006      	b.n	ac48 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac3c:	3301      	adds	r3, #1
    ac3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac42:	2b07      	cmp	r3, #7
    ac44:	d9eb      	bls.n	ac1e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    ac46:	2300      	movs	r3, #0
}
    ac48:	4618      	mov	r0, r3
    ac4a:	3734      	adds	r7, #52	; 0x34
    ac4c:	46bd      	mov	sp, r7
    ac4e:	bcb0      	pop	{r4, r5, r7}
    ac50:	4770      	bx	lr
    ac52:	bf00      	nop
    ac54:	0001ce28 	.word	0x0001ce28

0000ac58 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    ac58:	b580      	push	{r7, lr}
    ac5a:	b084      	sub	sp, #16
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    ac60:	6878      	ldr	r0, [r7, #4]
    ac62:	4b13      	ldr	r3, [pc, #76]	; (acb0 <_get_i2cm_index+0x58>)
    ac64:	4798      	blx	r3
    ac66:	4603      	mov	r3, r0
    ac68:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    ac6a:	2300      	movs	r3, #0
    ac6c:	73fb      	strb	r3, [r7, #15]
    ac6e:	e010      	b.n	ac92 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    ac70:	7bfa      	ldrb	r2, [r7, #15]
    ac72:	4910      	ldr	r1, [pc, #64]	; (acb4 <_get_i2cm_index+0x5c>)
    ac74:	4613      	mov	r3, r2
    ac76:	005b      	lsls	r3, r3, #1
    ac78:	4413      	add	r3, r2
    ac7a:	00db      	lsls	r3, r3, #3
    ac7c:	440b      	add	r3, r1
    ac7e:	781b      	ldrb	r3, [r3, #0]
    ac80:	7bba      	ldrb	r2, [r7, #14]
    ac82:	429a      	cmp	r2, r3
    ac84:	d102      	bne.n	ac8c <_get_i2cm_index+0x34>
			return i;
    ac86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ac8a:	e00d      	b.n	aca8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    ac8c:	7bfb      	ldrb	r3, [r7, #15]
    ac8e:	3301      	adds	r3, #1
    ac90:	73fb      	strb	r3, [r7, #15]
    ac92:	7bfb      	ldrb	r3, [r7, #15]
    ac94:	2b02      	cmp	r3, #2
    ac96:	d9eb      	bls.n	ac70 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    ac98:	f240 32a6 	movw	r2, #934	; 0x3a6
    ac9c:	4906      	ldr	r1, [pc, #24]	; (acb8 <_get_i2cm_index+0x60>)
    ac9e:	2000      	movs	r0, #0
    aca0:	4b06      	ldr	r3, [pc, #24]	; (acbc <_get_i2cm_index+0x64>)
    aca2:	4798      	blx	r3
	return -1;
    aca4:	f04f 33ff 	mov.w	r3, #4294967295
}
    aca8:	4618      	mov	r0, r3
    acaa:	3710      	adds	r7, #16
    acac:	46bd      	mov	sp, r7
    acae:	bd80      	pop	{r7, pc}
    acb0:	0000abfd 	.word	0x0000abfd
    acb4:	2000001c 	.word	0x2000001c
    acb8:	0001ce0c 	.word	0x0001ce0c
    acbc:	00007b0d 	.word	0x00007b0d

0000acc0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    acc0:	b580      	push	{r7, lr}
    acc2:	b082      	sub	sp, #8
    acc4:	af00      	add	r7, sp, #0
    acc6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    acc8:	2103      	movs	r1, #3
    acca:	6878      	ldr	r0, [r7, #4]
    accc:	4b02      	ldr	r3, [pc, #8]	; (acd8 <_sercom_i2c_send_stop+0x18>)
    acce:	4798      	blx	r3
}
    acd0:	bf00      	nop
    acd2:	3708      	adds	r7, #8
    acd4:	46bd      	mov	sp, r7
    acd6:	bd80      	pop	{r7, pc}
    acd8:	0000a979 	.word	0x0000a979

0000acdc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    acdc:	b590      	push	{r4, r7, lr}
    acde:	b087      	sub	sp, #28
    ace0:	af00      	add	r7, sp, #0
    ace2:	60f8      	str	r0, [r7, #12]
    ace4:	60b9      	str	r1, [r7, #8]
    ace6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    ace8:	68f8      	ldr	r0, [r7, #12]
    acea:	4b7d      	ldr	r3, [pc, #500]	; (aee0 <_sercom_i2c_sync_analyse_flags+0x204>)
    acec:	4798      	blx	r3
    acee:	4603      	mov	r3, r0
    acf0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    acf2:	68f8      	ldr	r0, [r7, #12]
    acf4:	4b7b      	ldr	r3, [pc, #492]	; (aee4 <_sercom_i2c_sync_analyse_flags+0x208>)
    acf6:	4798      	blx	r3
    acf8:	4603      	mov	r3, r0
    acfa:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    acfc:	68bb      	ldr	r3, [r7, #8]
    acfe:	f003 0301 	and.w	r3, r3, #1
    ad02:	2b00      	cmp	r3, #0
    ad04:	f000 8095 	beq.w	ae32 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    ad08:	8a7b      	ldrh	r3, [r7, #18]
    ad0a:	f003 0302 	and.w	r3, r3, #2
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d01d      	beq.n	ad4e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    ad12:	68f8      	ldr	r0, [r7, #12]
    ad14:	4b74      	ldr	r3, [pc, #464]	; (aee8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    ad16:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    ad18:	687b      	ldr	r3, [r7, #4]
    ad1a:	885b      	ldrh	r3, [r3, #2]
    ad1c:	b29b      	uxth	r3, r3
    ad1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ad22:	b29a      	uxth	r2, r3
    ad24:	687b      	ldr	r3, [r7, #4]
    ad26:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	885b      	ldrh	r3, [r3, #2]
    ad2c:	b29b      	uxth	r3, r3
    ad2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ad32:	b29a      	uxth	r2, r3
    ad34:	687b      	ldr	r3, [r7, #4]
    ad36:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    ad38:	8a7b      	ldrh	r3, [r7, #18]
    ad3a:	f003 0301 	and.w	r3, r3, #1
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d002      	beq.n	ad48 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    ad42:	f06f 0304 	mvn.w	r3, #4
    ad46:	e0c6      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    ad48:	f06f 0303 	mvn.w	r3, #3
    ad4c:	e0c3      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    ad4e:	8a7b      	ldrh	r3, [r7, #18]
    ad50:	f003 0304 	and.w	r3, r3, #4
    ad54:	2b00      	cmp	r3, #0
    ad56:	d01f      	beq.n	ad98 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	685b      	ldr	r3, [r3, #4]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	dd07      	ble.n	ad70 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	885b      	ldrh	r3, [r3, #2]
    ad64:	b29b      	uxth	r3, r3
    ad66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ad6a:	b29a      	uxth	r2, r3
    ad6c:	687b      	ldr	r3, [r7, #4]
    ad6e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    ad70:	687b      	ldr	r3, [r7, #4]
    ad72:	885b      	ldrh	r3, [r3, #2]
    ad74:	b29b      	uxth	r3, r3
    ad76:	b21b      	sxth	r3, r3
    ad78:	2b00      	cmp	r3, #0
    ad7a:	da02      	bge.n	ad82 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    ad7c:	68f8      	ldr	r0, [r7, #12]
    ad7e:	4b5b      	ldr	r3, [pc, #364]	; (aeec <_sercom_i2c_sync_analyse_flags+0x210>)
    ad80:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    ad82:	687b      	ldr	r3, [r7, #4]
    ad84:	885b      	ldrh	r3, [r3, #2]
    ad86:	b29b      	uxth	r3, r3
    ad88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ad8c:	b29a      	uxth	r2, r3
    ad8e:	687b      	ldr	r3, [r7, #4]
    ad90:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    ad92:	f06f 0301 	mvn.w	r3, #1
    ad96:	e09e      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    ad98:	687b      	ldr	r3, [r7, #4]
    ad9a:	885b      	ldrh	r3, [r3, #2]
    ad9c:	b29b      	uxth	r3, r3
    ad9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ada2:	2b00      	cmp	r3, #0
    ada4:	d01c      	beq.n	ade0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    ada6:	687b      	ldr	r3, [r7, #4]
    ada8:	881b      	ldrh	r3, [r3, #0]
    adaa:	121b      	asrs	r3, r3, #8
    adac:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    adae:	f003 0406 	and.w	r4, r3, #6
    adb2:	68f8      	ldr	r0, [r7, #12]
    adb4:	4b4e      	ldr	r3, [pc, #312]	; (aef0 <_sercom_i2c_sync_analyse_flags+0x214>)
    adb6:	4798      	blx	r3
    adb8:	4603      	mov	r3, r0
    adba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    adbe:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    adc0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    adc4:	4619      	mov	r1, r3
    adc6:	68f8      	ldr	r0, [r7, #12]
    adc8:	4b4a      	ldr	r3, [pc, #296]	; (aef4 <_sercom_i2c_sync_analyse_flags+0x218>)
    adca:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    adcc:	687b      	ldr	r3, [r7, #4]
    adce:	885b      	ldrh	r3, [r3, #2]
    add0:	b29b      	uxth	r3, r3
    add2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    add6:	b29a      	uxth	r2, r3
    add8:	687b      	ldr	r3, [r7, #4]
    adda:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    addc:	2300      	movs	r3, #0
    adde:	e07a      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	685b      	ldr	r3, [r3, #4]
    ade4:	2b00      	cmp	r3, #0
    ade6:	d111      	bne.n	ae0c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	885b      	ldrh	r3, [r3, #2]
    adec:	b29b      	uxth	r3, r3
    adee:	b21b      	sxth	r3, r3
    adf0:	2b00      	cmp	r3, #0
    adf2:	da02      	bge.n	adfa <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    adf4:	68f8      	ldr	r0, [r7, #12]
    adf6:	4b3d      	ldr	r3, [pc, #244]	; (aeec <_sercom_i2c_sync_analyse_flags+0x210>)
    adf8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    adfa:	687b      	ldr	r3, [r7, #4]
    adfc:	885b      	ldrh	r3, [r3, #2]
    adfe:	b29b      	uxth	r3, r3
    ae00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ae04:	b29a      	uxth	r2, r3
    ae06:	687b      	ldr	r3, [r7, #4]
    ae08:	805a      	strh	r2, [r3, #2]
    ae0a:	e010      	b.n	ae2e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	689b      	ldr	r3, [r3, #8]
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	4619      	mov	r1, r3
    ae14:	68f8      	ldr	r0, [r7, #12]
    ae16:	4b38      	ldr	r3, [pc, #224]	; (aef8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    ae18:	4798      	blx	r3
				msg->buffer++;
    ae1a:	687b      	ldr	r3, [r7, #4]
    ae1c:	689b      	ldr	r3, [r3, #8]
    ae1e:	1c5a      	adds	r2, r3, #1
    ae20:	687b      	ldr	r3, [r7, #4]
    ae22:	609a      	str	r2, [r3, #8]
				msg->len--;
    ae24:	687b      	ldr	r3, [r7, #4]
    ae26:	685b      	ldr	r3, [r3, #4]
    ae28:	1e5a      	subs	r2, r3, #1
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    ae2e:	2300      	movs	r3, #0
    ae30:	e051      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    ae32:	68bb      	ldr	r3, [r7, #8]
    ae34:	f003 0302 	and.w	r3, r3, #2
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d04b      	beq.n	aed4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	685b      	ldr	r3, [r3, #4]
    ae40:	2b00      	cmp	r3, #0
    ae42:	d041      	beq.n	aec8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    ae44:	8a7b      	ldrh	r3, [r7, #18]
    ae46:	f003 0304 	and.w	r3, r3, #4
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d13c      	bne.n	aec8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    ae4e:	687b      	ldr	r3, [r7, #4]
    ae50:	685b      	ldr	r3, [r3, #4]
    ae52:	1e5a      	subs	r2, r3, #1
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    ae58:	687b      	ldr	r3, [r7, #4]
    ae5a:	685b      	ldr	r3, [r3, #4]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d102      	bne.n	ae66 <_sercom_i2c_sync_analyse_flags+0x18a>
    ae60:	697b      	ldr	r3, [r7, #20]
    ae62:	2b00      	cmp	r3, #0
    ae64:	d006      	beq.n	ae74 <_sercom_i2c_sync_analyse_flags+0x198>
    ae66:	687b      	ldr	r3, [r7, #4]
    ae68:	685b      	ldr	r3, [r3, #4]
    ae6a:	2b01      	cmp	r3, #1
    ae6c:	d105      	bne.n	ae7a <_sercom_i2c_sync_analyse_flags+0x19e>
    ae6e:	697b      	ldr	r3, [r7, #20]
    ae70:	2b00      	cmp	r3, #0
    ae72:	d002      	beq.n	ae7a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ae74:	68f8      	ldr	r0, [r7, #12]
    ae76:	4b21      	ldr	r3, [pc, #132]	; (aefc <_sercom_i2c_sync_analyse_flags+0x220>)
    ae78:	4798      	blx	r3
			}

			if (msg->len == 0) {
    ae7a:	687b      	ldr	r3, [r7, #4]
    ae7c:	685b      	ldr	r3, [r3, #4]
    ae7e:	2b00      	cmp	r3, #0
    ae80:	d113      	bne.n	aeaa <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    ae82:	687b      	ldr	r3, [r7, #4]
    ae84:	885b      	ldrh	r3, [r3, #2]
    ae86:	b29b      	uxth	r3, r3
    ae88:	b21b      	sxth	r3, r3
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	da05      	bge.n	ae9a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    ae8e:	68f8      	ldr	r0, [r7, #12]
    ae90:	4b1b      	ldr	r3, [pc, #108]	; (af00 <_sercom_i2c_sync_analyse_flags+0x224>)
    ae92:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    ae94:	68f8      	ldr	r0, [r7, #12]
    ae96:	4b15      	ldr	r3, [pc, #84]	; (aeec <_sercom_i2c_sync_analyse_flags+0x210>)
    ae98:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    ae9a:	687b      	ldr	r3, [r7, #4]
    ae9c:	885b      	ldrh	r3, [r3, #2]
    ae9e:	b29b      	uxth	r3, r3
    aea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    aea4:	b29a      	uxth	r2, r3
    aea6:	687b      	ldr	r3, [r7, #4]
    aea8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    aeaa:	687b      	ldr	r3, [r7, #4]
    aeac:	689c      	ldr	r4, [r3, #8]
    aeae:	1c62      	adds	r2, r4, #1
    aeb0:	687b      	ldr	r3, [r7, #4]
    aeb2:	609a      	str	r2, [r3, #8]
    aeb4:	68f8      	ldr	r0, [r7, #12]
    aeb6:	4b13      	ldr	r3, [pc, #76]	; (af04 <_sercom_i2c_sync_analyse_flags+0x228>)
    aeb8:	4798      	blx	r3
    aeba:	4603      	mov	r3, r0
    aebc:	b2db      	uxtb	r3, r3
    aebe:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    aec0:	68f8      	ldr	r0, [r7, #12]
    aec2:	4b11      	ldr	r3, [pc, #68]	; (af08 <_sercom_i2c_sync_analyse_flags+0x22c>)
    aec4:	4798      	blx	r3
    aec6:	e005      	b.n	aed4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    aec8:	68f8      	ldr	r0, [r7, #12]
    aeca:	4b0f      	ldr	r3, [pc, #60]	; (af08 <_sercom_i2c_sync_analyse_flags+0x22c>)
    aecc:	4798      	blx	r3
			return I2C_NACK;
    aece:	f06f 0301 	mvn.w	r3, #1
    aed2:	e000      	b.n	aed6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    aed4:	2300      	movs	r3, #0
}
    aed6:	4618      	mov	r0, r3
    aed8:	371c      	adds	r7, #28
    aeda:	46bd      	mov	sp, r7
    aedc:	bd90      	pop	{r4, r7, pc}
    aede:	bf00      	nop
    aee0:	0000a779 	.word	0x0000a779
    aee4:	0000abb1 	.word	0x0000abb1
    aee8:	0000a679 	.word	0x0000a679
    aeec:	0000acc1 	.word	0x0000acc1
    aef0:	0000aa91 	.word	0x0000aa91
    aef4:	0000aa6d 	.word	0x0000aa6d
    aef8:	0000aacd 	.word	0x0000aacd
    aefc:	0000a929 	.word	0x0000a929
    af00:	0000a901 	.word	0x0000a901
    af04:	0000aaf1 	.word	0x0000aaf1
    af08:	0000a693 	.word	0x0000a693

0000af0c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    af0c:	b580      	push	{r7, lr}
    af0e:	b082      	sub	sp, #8
    af10:	af00      	add	r7, sp, #0
    af12:	6078      	str	r0, [r7, #4]
    af14:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    af16:	687b      	ldr	r3, [r7, #4]
    af18:	2b00      	cmp	r3, #0
    af1a:	bf14      	ite	ne
    af1c:	2301      	movne	r3, #1
    af1e:	2300      	moveq	r3, #0
    af20:	b2db      	uxtb	r3, r3
    af22:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    af26:	4908      	ldr	r1, [pc, #32]	; (af48 <_i2c_m_sync_init+0x3c>)
    af28:	4618      	mov	r0, r3
    af2a:	4b08      	ldr	r3, [pc, #32]	; (af4c <_i2c_m_sync_init+0x40>)
    af2c:	4798      	blx	r3

	i2c_dev->hw = hw;
    af2e:	687b      	ldr	r3, [r7, #4]
    af30:	683a      	ldr	r2, [r7, #0]
    af32:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	6839      	ldr	r1, [r7, #0]
    af38:	4618      	mov	r0, r3
    af3a:	4b05      	ldr	r3, [pc, #20]	; (af50 <_i2c_m_sync_init+0x44>)
    af3c:	4798      	blx	r3
    af3e:	4603      	mov	r3, r0
}
    af40:	4618      	mov	r0, r3
    af42:	3708      	adds	r7, #8
    af44:	46bd      	mov	sp, r7
    af46:	bd80      	pop	{r7, pc}
    af48:	0001ce0c 	.word	0x0001ce0c
    af4c:	00007b0d 	.word	0x00007b0d
    af50:	0000b2c9 	.word	0x0000b2c9

0000af54 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    af54:	b580      	push	{r7, lr}
    af56:	b082      	sub	sp, #8
    af58:	af00      	add	r7, sp, #0
    af5a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	2b00      	cmp	r3, #0
    af60:	bf14      	ite	ne
    af62:	2301      	movne	r3, #1
    af64:	2300      	moveq	r3, #0
    af66:	b2db      	uxtb	r3, r3
    af68:	f240 5235 	movw	r2, #1333	; 0x535
    af6c:	4906      	ldr	r1, [pc, #24]	; (af88 <_i2c_m_sync_enable+0x34>)
    af6e:	4618      	mov	r0, r3
    af70:	4b06      	ldr	r3, [pc, #24]	; (af8c <_i2c_m_sync_enable+0x38>)
    af72:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	691b      	ldr	r3, [r3, #16]
    af78:	4618      	mov	r0, r3
    af7a:	4b05      	ldr	r3, [pc, #20]	; (af90 <_i2c_m_sync_enable+0x3c>)
    af7c:	4798      	blx	r3
    af7e:	4603      	mov	r3, r0
}
    af80:	4618      	mov	r0, r3
    af82:	3708      	adds	r7, #8
    af84:	46bd      	mov	sp, r7
    af86:	bd80      	pop	{r7, pc}
    af88:	0001ce0c 	.word	0x0001ce0c
    af8c:	00007b0d 	.word	0x00007b0d
    af90:	0000b23d 	.word	0x0000b23d

0000af94 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    af94:	b580      	push	{r7, lr}
    af96:	b084      	sub	sp, #16
    af98:	af00      	add	r7, sp, #0
    af9a:	6078      	str	r0, [r7, #4]
    af9c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    af9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    afa2:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	691b      	ldr	r3, [r3, #16]
    afa8:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    afaa:	68b8      	ldr	r0, [r7, #8]
    afac:	4b0f      	ldr	r3, [pc, #60]	; (afec <_sercom_i2c_sync_wait_bus+0x58>)
    afae:	4798      	blx	r3
    afb0:	4603      	mov	r3, r0
    afb2:	461a      	mov	r2, r3
    afb4:	683b      	ldr	r3, [r7, #0]
    afb6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    afb8:	68fb      	ldr	r3, [r7, #12]
    afba:	1e5a      	subs	r2, r3, #1
    afbc:	60fa      	str	r2, [r7, #12]
    afbe:	2b00      	cmp	r3, #0
    afc0:	d102      	bne.n	afc8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    afc2:	f06f 0304 	mvn.w	r3, #4
    afc6:	e00c      	b.n	afe2 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    afc8:	683b      	ldr	r3, [r7, #0]
    afca:	681b      	ldr	r3, [r3, #0]
    afcc:	f003 0301 	and.w	r3, r3, #1
    afd0:	2b00      	cmp	r3, #0
    afd2:	d105      	bne.n	afe0 <_sercom_i2c_sync_wait_bus+0x4c>
    afd4:	683b      	ldr	r3, [r7, #0]
    afd6:	681b      	ldr	r3, [r3, #0]
    afd8:	f003 0302 	and.w	r3, r3, #2
    afdc:	2b00      	cmp	r3, #0
    afde:	d0e4      	beq.n	afaa <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    afe0:	2300      	movs	r3, #0
}
    afe2:	4618      	mov	r0, r3
    afe4:	3710      	adds	r7, #16
    afe6:	46bd      	mov	sp, r7
    afe8:	bd80      	pop	{r7, pc}
    afea:	bf00      	nop
    afec:	0000a6ad 	.word	0x0000a6ad

0000aff0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    aff0:	b590      	push	{r4, r7, lr}
    aff2:	b087      	sub	sp, #28
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	691b      	ldr	r3, [r3, #16]
    affc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    affe:	687b      	ldr	r3, [r7, #4]
    b000:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b002:	6978      	ldr	r0, [r7, #20]
    b004:	4b39      	ldr	r3, [pc, #228]	; (b0ec <_sercom_i2c_sync_send_address+0xfc>)
    b006:	4798      	blx	r3
    b008:	4603      	mov	r3, r0
    b00a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    b00c:	687b      	ldr	r3, [r7, #4]
    b00e:	2b00      	cmp	r3, #0
    b010:	bf14      	ite	ne
    b012:	2301      	movne	r3, #1
    b014:	2300      	moveq	r3, #0
    b016:	b2db      	uxtb	r3, r3
    b018:	f240 52a5 	movw	r2, #1445	; 0x5a5
    b01c:	4934      	ldr	r1, [pc, #208]	; (b0f0 <_sercom_i2c_sync_send_address+0x100>)
    b01e:	4618      	mov	r0, r3
    b020:	4b34      	ldr	r3, [pc, #208]	; (b0f4 <_sercom_i2c_sync_send_address+0x104>)
    b022:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b024:	693b      	ldr	r3, [r7, #16]
    b026:	685b      	ldr	r3, [r3, #4]
    b028:	2b01      	cmp	r3, #1
    b02a:	d106      	bne.n	b03a <_sercom_i2c_sync_send_address+0x4a>
    b02c:	68fb      	ldr	r3, [r7, #12]
    b02e:	2b00      	cmp	r3, #0
    b030:	d003      	beq.n	b03a <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b032:	6978      	ldr	r0, [r7, #20]
    b034:	4b30      	ldr	r3, [pc, #192]	; (b0f8 <_sercom_i2c_sync_send_address+0x108>)
    b036:	4798      	blx	r3
    b038:	e002      	b.n	b040 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b03a:	6978      	ldr	r0, [r7, #20]
    b03c:	4b2f      	ldr	r3, [pc, #188]	; (b0fc <_sercom_i2c_sync_send_address+0x10c>)
    b03e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b040:	693b      	ldr	r3, [r7, #16]
    b042:	881b      	ldrh	r3, [r3, #0]
    b044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b048:	2b00      	cmp	r3, #0
    b04a:	d022      	beq.n	b092 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b04c:	693b      	ldr	r3, [r7, #16]
    b04e:	885b      	ldrh	r3, [r3, #2]
    b050:	b29b      	uxth	r3, r3
    b052:	f003 0301 	and.w	r3, r3, #1
    b056:	2b00      	cmp	r3, #0
    b058:	d007      	beq.n	b06a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b05a:	693b      	ldr	r3, [r7, #16]
    b05c:	885b      	ldrh	r3, [r3, #2]
    b05e:	b29b      	uxth	r3, r3
    b060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b064:	b29a      	uxth	r2, r3
    b066:	693b      	ldr	r3, [r7, #16]
    b068:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b06a:	693b      	ldr	r3, [r7, #16]
    b06c:	881b      	ldrh	r3, [r3, #0]
    b06e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b070:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b074:	401c      	ands	r4, r3
    b076:	6978      	ldr	r0, [r7, #20]
    b078:	4b21      	ldr	r3, [pc, #132]	; (b100 <_sercom_i2c_sync_send_address+0x110>)
    b07a:	4798      	blx	r3
    b07c:	4603      	mov	r3, r0
    b07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b082:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b088:	4619      	mov	r1, r3
    b08a:	6978      	ldr	r0, [r7, #20]
    b08c:	4b1d      	ldr	r3, [pc, #116]	; (b104 <_sercom_i2c_sync_send_address+0x114>)
    b08e:	4798      	blx	r3
    b090:	e01a      	b.n	b0c8 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b092:	693b      	ldr	r3, [r7, #16]
    b094:	881b      	ldrh	r3, [r3, #0]
    b096:	005b      	lsls	r3, r3, #1
    b098:	b2db      	uxtb	r3, r3
    b09a:	693a      	ldr	r2, [r7, #16]
    b09c:	8852      	ldrh	r2, [r2, #2]
    b09e:	b292      	uxth	r2, r2
    b0a0:	f002 0201 	and.w	r2, r2, #1
    b0a4:	2a00      	cmp	r2, #0
    b0a6:	bf14      	ite	ne
    b0a8:	2201      	movne	r2, #1
    b0aa:	2200      	moveq	r2, #0
    b0ac:	b2d2      	uxtb	r2, r2
    b0ae:	4313      	orrs	r3, r2
    b0b0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b0b2:	6978      	ldr	r0, [r7, #20]
    b0b4:	4b12      	ldr	r3, [pc, #72]	; (b100 <_sercom_i2c_sync_send_address+0x110>)
    b0b6:	4798      	blx	r3
    b0b8:	4603      	mov	r3, r0
    b0ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b0be:	4323      	orrs	r3, r4
    b0c0:	4619      	mov	r1, r3
    b0c2:	6978      	ldr	r0, [r7, #20]
    b0c4:	4b0f      	ldr	r3, [pc, #60]	; (b104 <_sercom_i2c_sync_send_address+0x114>)
    b0c6:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    b0c8:	f107 0308 	add.w	r3, r7, #8
    b0cc:	4619      	mov	r1, r3
    b0ce:	6878      	ldr	r0, [r7, #4]
    b0d0:	4b0d      	ldr	r3, [pc, #52]	; (b108 <_sercom_i2c_sync_send_address+0x118>)
    b0d2:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    b0d4:	68bb      	ldr	r3, [r7, #8]
    b0d6:	693a      	ldr	r2, [r7, #16]
    b0d8:	4619      	mov	r1, r3
    b0da:	6978      	ldr	r0, [r7, #20]
    b0dc:	4b0b      	ldr	r3, [pc, #44]	; (b10c <_sercom_i2c_sync_send_address+0x11c>)
    b0de:	4798      	blx	r3
    b0e0:	4603      	mov	r3, r0
}
    b0e2:	4618      	mov	r0, r3
    b0e4:	371c      	adds	r7, #28
    b0e6:	46bd      	mov	sp, r7
    b0e8:	bd90      	pop	{r4, r7, pc}
    b0ea:	bf00      	nop
    b0ec:	0000a779 	.word	0x0000a779
    b0f0:	0001ce0c 	.word	0x0001ce0c
    b0f4:	00007b0d 	.word	0x00007b0d
    b0f8:	0000a929 	.word	0x0000a929
    b0fc:	0000a951 	.word	0x0000a951
    b100:	0000aa91 	.word	0x0000aa91
    b104:	0000aa6d 	.word	0x0000aa6d
    b108:	0000af95 	.word	0x0000af95
    b10c:	0000acdd 	.word	0x0000acdd

0000b110 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    b110:	b580      	push	{r7, lr}
    b112:	b086      	sub	sp, #24
    b114:	af00      	add	r7, sp, #0
    b116:	6078      	str	r0, [r7, #4]
    b118:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    b11a:	687b      	ldr	r3, [r7, #4]
    b11c:	691b      	ldr	r3, [r3, #16]
    b11e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    b120:	687b      	ldr	r3, [r7, #4]
    b122:	2b00      	cmp	r3, #0
    b124:	bf14      	ite	ne
    b126:	2301      	movne	r3, #1
    b128:	2300      	moveq	r3, #0
    b12a:	b2db      	uxtb	r3, r3
    b12c:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    b130:	493b      	ldr	r1, [pc, #236]	; (b220 <_i2c_m_sync_transfer+0x110>)
    b132:	4618      	mov	r0, r3
    b134:	4b3b      	ldr	r3, [pc, #236]	; (b224 <_i2c_m_sync_transfer+0x114>)
    b136:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b138:	687b      	ldr	r3, [r7, #4]
    b13a:	691b      	ldr	r3, [r3, #16]
    b13c:	2b00      	cmp	r3, #0
    b13e:	bf14      	ite	ne
    b140:	2301      	movne	r3, #1
    b142:	2300      	moveq	r3, #0
    b144:	b2db      	uxtb	r3, r3
    b146:	f240 52d1 	movw	r2, #1489	; 0x5d1
    b14a:	4935      	ldr	r1, [pc, #212]	; (b220 <_i2c_m_sync_transfer+0x110>)
    b14c:	4618      	mov	r0, r3
    b14e:	4b35      	ldr	r3, [pc, #212]	; (b224 <_i2c_m_sync_transfer+0x114>)
    b150:	4798      	blx	r3
	ASSERT(msg);
    b152:	683b      	ldr	r3, [r7, #0]
    b154:	2b00      	cmp	r3, #0
    b156:	bf14      	ite	ne
    b158:	2301      	movne	r3, #1
    b15a:	2300      	moveq	r3, #0
    b15c:	b2db      	uxtb	r3, r3
    b15e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    b162:	492f      	ldr	r1, [pc, #188]	; (b220 <_i2c_m_sync_transfer+0x110>)
    b164:	4618      	mov	r0, r3
    b166:	4b2f      	ldr	r3, [pc, #188]	; (b224 <_i2c_m_sync_transfer+0x114>)
    b168:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b16a:	687b      	ldr	r3, [r7, #4]
    b16c:	885b      	ldrh	r3, [r3, #2]
    b16e:	b29b      	uxth	r3, r3
    b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b174:	2b00      	cmp	r3, #0
    b176:	d002      	beq.n	b17e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    b178:	f06f 0305 	mvn.w	r3, #5
    b17c:	e04c      	b.n	b218 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    b17e:	683b      	ldr	r3, [r7, #0]
    b180:	885b      	ldrh	r3, [r3, #2]
    b182:	b29b      	uxth	r3, r3
    b184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b188:	b29a      	uxth	r2, r3
    b18a:	683b      	ldr	r3, [r7, #0]
    b18c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	683a      	ldr	r2, [r7, #0]
    b192:	ca07      	ldmia	r2, {r0, r1, r2}
    b194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    b198:	6938      	ldr	r0, [r7, #16]
    b19a:	4b23      	ldr	r3, [pc, #140]	; (b228 <_i2c_m_sync_transfer+0x118>)
    b19c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    b19e:	6878      	ldr	r0, [r7, #4]
    b1a0:	4b22      	ldr	r3, [pc, #136]	; (b22c <_i2c_m_sync_transfer+0x11c>)
    b1a2:	4798      	blx	r3
    b1a4:	6178      	str	r0, [r7, #20]

	if (ret) {
    b1a6:	697b      	ldr	r3, [r7, #20]
    b1a8:	2b00      	cmp	r3, #0
    b1aa:	d02d      	beq.n	b208 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b1ac:	687b      	ldr	r3, [r7, #4]
    b1ae:	885b      	ldrh	r3, [r3, #2]
    b1b0:	b29b      	uxth	r3, r3
    b1b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b1b6:	b29a      	uxth	r2, r3
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	805a      	strh	r2, [r3, #2]

		return ret;
    b1bc:	697b      	ldr	r3, [r7, #20]
    b1be:	e02b      	b.n	b218 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    b1c0:	f107 030c 	add.w	r3, r7, #12
    b1c4:	4619      	mov	r1, r3
    b1c6:	6878      	ldr	r0, [r7, #4]
    b1c8:	4b19      	ldr	r3, [pc, #100]	; (b230 <_i2c_m_sync_transfer+0x120>)
    b1ca:	4798      	blx	r3
    b1cc:	6178      	str	r0, [r7, #20]

		if (ret) {
    b1ce:	697b      	ldr	r3, [r7, #20]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d012      	beq.n	b1fa <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    b1d4:	683b      	ldr	r3, [r7, #0]
    b1d6:	885b      	ldrh	r3, [r3, #2]
    b1d8:	b29b      	uxth	r3, r3
    b1da:	b21b      	sxth	r3, r3
    b1dc:	2b00      	cmp	r3, #0
    b1de:	da02      	bge.n	b1e6 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    b1e0:	6938      	ldr	r0, [r7, #16]
    b1e2:	4b14      	ldr	r3, [pc, #80]	; (b234 <_i2c_m_sync_transfer+0x124>)
    b1e4:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	885b      	ldrh	r3, [r3, #2]
    b1ea:	b29b      	uxth	r3, r3
    b1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b1f0:	b29a      	uxth	r2, r3
    b1f2:	687b      	ldr	r3, [r7, #4]
    b1f4:	805a      	strh	r2, [r3, #2]

			return ret;
    b1f6:	697b      	ldr	r3, [r7, #20]
    b1f8:	e00e      	b.n	b218 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b1fa:	68fb      	ldr	r3, [r7, #12]
    b1fc:	687a      	ldr	r2, [r7, #4]
    b1fe:	4619      	mov	r1, r3
    b200:	6938      	ldr	r0, [r7, #16]
    b202:	4b0d      	ldr	r3, [pc, #52]	; (b238 <_i2c_m_sync_transfer+0x128>)
    b204:	4798      	blx	r3
    b206:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b208:	687b      	ldr	r3, [r7, #4]
    b20a:	885b      	ldrh	r3, [r3, #2]
    b20c:	b29b      	uxth	r3, r3
    b20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b212:	2b00      	cmp	r3, #0
    b214:	d1d4      	bne.n	b1c0 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    b216:	697b      	ldr	r3, [r7, #20]
}
    b218:	4618      	mov	r0, r3
    b21a:	3718      	adds	r7, #24
    b21c:	46bd      	mov	sp, r7
    b21e:	bd80      	pop	{r7, pc}
    b220:	0001ce0c 	.word	0x0001ce0c
    b224:	00007b0d 	.word	0x00007b0d
    b228:	0000a8d9 	.word	0x0000a8d9
    b22c:	0000aff1 	.word	0x0000aff1
    b230:	0000af95 	.word	0x0000af95
    b234:	0000acc1 	.word	0x0000acc1
    b238:	0000acdd 	.word	0x0000acdd

0000b23c <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    b23c:	b580      	push	{r7, lr}
    b23e:	b084      	sub	sp, #16
    b240:	af00      	add	r7, sp, #0
    b242:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    b244:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b248:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    b24a:	2304      	movs	r3, #4
    b24c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	2b00      	cmp	r3, #0
    b252:	bf14      	ite	ne
    b254:	2301      	movne	r3, #1
    b256:	2300      	moveq	r3, #0
    b258:	b2db      	uxtb	r3, r3
    b25a:	f240 6205 	movw	r2, #1541	; 0x605
    b25e:	4915      	ldr	r1, [pc, #84]	; (b2b4 <_i2c_m_enable_implementation+0x78>)
    b260:	4618      	mov	r0, r3
    b262:	4b15      	ldr	r3, [pc, #84]	; (b2b8 <_i2c_m_enable_implementation+0x7c>)
    b264:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    b266:	6878      	ldr	r0, [r7, #4]
    b268:	4b14      	ldr	r3, [pc, #80]	; (b2bc <_i2c_m_enable_implementation+0x80>)
    b26a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    b26c:	e016      	b.n	b29c <_i2c_m_enable_implementation+0x60>
		timeout--;
    b26e:	68fb      	ldr	r3, [r7, #12]
    b270:	3b01      	subs	r3, #1
    b272:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    b274:	68fb      	ldr	r3, [r7, #12]
    b276:	2b00      	cmp	r3, #0
    b278:	dc10      	bgt.n	b29c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    b27a:	68bb      	ldr	r3, [r7, #8]
    b27c:	3b01      	subs	r3, #1
    b27e:	60bb      	str	r3, [r7, #8]
    b280:	68bb      	ldr	r3, [r7, #8]
    b282:	2b00      	cmp	r3, #0
    b284:	d007      	beq.n	b296 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    b286:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b28a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    b28c:	2110      	movs	r1, #16
    b28e:	6878      	ldr	r0, [r7, #4]
    b290:	4b0b      	ldr	r3, [pc, #44]	; (b2c0 <_i2c_m_enable_implementation+0x84>)
    b292:	4798      	blx	r3
    b294:	e002      	b.n	b29c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    b296:	f06f 0305 	mvn.w	r3, #5
    b29a:	e006      	b.n	b2aa <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    b29c:	6878      	ldr	r0, [r7, #4]
    b29e:	4b09      	ldr	r3, [pc, #36]	; (b2c4 <_i2c_m_enable_implementation+0x88>)
    b2a0:	4798      	blx	r3
    b2a2:	4603      	mov	r3, r0
    b2a4:	2b01      	cmp	r3, #1
    b2a6:	d1e2      	bne.n	b26e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    b2a8:	2300      	movs	r3, #0
}
    b2aa:	4618      	mov	r0, r3
    b2ac:	3710      	adds	r7, #16
    b2ae:	46bd      	mov	sp, r7
    b2b0:	bd80      	pop	{r7, pc}
    b2b2:	bf00      	nop
    b2b4:	0001ce0c 	.word	0x0001ce0c
    b2b8:	00007b0d 	.word	0x00007b0d
    b2bc:	0000a729 	.word	0x0000a729
    b2c0:	0000abd5 	.word	0x0000abd5
    b2c4:	0000ab85 	.word	0x0000ab85

0000b2c8 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    b2c8:	b580      	push	{r7, lr}
    b2ca:	b084      	sub	sp, #16
    b2cc:	af00      	add	r7, sp, #0
    b2ce:	6078      	str	r0, [r7, #4]
    b2d0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    b2d2:	6838      	ldr	r0, [r7, #0]
    b2d4:	4b42      	ldr	r3, [pc, #264]	; (b3e0 <_i2c_m_sync_init_impl+0x118>)
    b2d6:	4798      	blx	r3
    b2d8:	4603      	mov	r3, r0
    b2da:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    b2dc:	2101      	movs	r1, #1
    b2de:	6838      	ldr	r0, [r7, #0]
    b2e0:	4b40      	ldr	r3, [pc, #256]	; (b3e4 <_i2c_m_sync_init_impl+0x11c>)
    b2e2:	4798      	blx	r3
    b2e4:	4603      	mov	r3, r0
    b2e6:	f083 0301 	eor.w	r3, r3, #1
    b2ea:	b2db      	uxtb	r3, r3
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d020      	beq.n	b332 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    b2f0:	7bfa      	ldrb	r2, [r7, #15]
    b2f2:	493d      	ldr	r1, [pc, #244]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b2f4:	4613      	mov	r3, r2
    b2f6:	005b      	lsls	r3, r3, #1
    b2f8:	4413      	add	r3, r2
    b2fa:	00db      	lsls	r3, r3, #3
    b2fc:	440b      	add	r3, r1
    b2fe:	3304      	adds	r3, #4
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	f003 031c 	and.w	r3, r3, #28
    b306:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    b308:	2102      	movs	r1, #2
    b30a:	6838      	ldr	r0, [r7, #0]
    b30c:	4b37      	ldr	r3, [pc, #220]	; (b3ec <_i2c_m_sync_init_impl+0x124>)
    b30e:	4798      	blx	r3
    b310:	4603      	mov	r3, r0
    b312:	2b00      	cmp	r3, #0
    b314:	d006      	beq.n	b324 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    b316:	6838      	ldr	r0, [r7, #0]
    b318:	4b35      	ldr	r3, [pc, #212]	; (b3f0 <_i2c_m_sync_init_impl+0x128>)
    b31a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    b31c:	2102      	movs	r1, #2
    b31e:	6838      	ldr	r0, [r7, #0]
    b320:	4b34      	ldr	r3, [pc, #208]	; (b3f4 <_i2c_m_sync_init_impl+0x12c>)
    b322:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    b324:	68bb      	ldr	r3, [r7, #8]
    b326:	f043 0301 	orr.w	r3, r3, #1
    b32a:	4619      	mov	r1, r3
    b32c:	6838      	ldr	r0, [r7, #0]
    b32e:	4b32      	ldr	r3, [pc, #200]	; (b3f8 <_i2c_m_sync_init_impl+0x130>)
    b330:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    b332:	2101      	movs	r1, #1
    b334:	6838      	ldr	r0, [r7, #0]
    b336:	4b2f      	ldr	r3, [pc, #188]	; (b3f4 <_i2c_m_sync_init_impl+0x12c>)
    b338:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    b33a:	7bfa      	ldrb	r2, [r7, #15]
    b33c:	492a      	ldr	r1, [pc, #168]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b33e:	4613      	mov	r3, r2
    b340:	005b      	lsls	r3, r3, #1
    b342:	4413      	add	r3, r2
    b344:	00db      	lsls	r3, r3, #3
    b346:	440b      	add	r3, r1
    b348:	3304      	adds	r3, #4
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	4619      	mov	r1, r3
    b34e:	6838      	ldr	r0, [r7, #0]
    b350:	4b29      	ldr	r3, [pc, #164]	; (b3f8 <_i2c_m_sync_init_impl+0x130>)
    b352:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    b354:	7bfa      	ldrb	r2, [r7, #15]
    b356:	4924      	ldr	r1, [pc, #144]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b358:	4613      	mov	r3, r2
    b35a:	005b      	lsls	r3, r3, #1
    b35c:	4413      	add	r3, r2
    b35e:	00db      	lsls	r3, r3, #3
    b360:	440b      	add	r3, r1
    b362:	3308      	adds	r3, #8
    b364:	681b      	ldr	r3, [r3, #0]
    b366:	4619      	mov	r1, r3
    b368:	6838      	ldr	r0, [r7, #0]
    b36a:	4b24      	ldr	r3, [pc, #144]	; (b3fc <_i2c_m_sync_init_impl+0x134>)
    b36c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    b36e:	7bfa      	ldrb	r2, [r7, #15]
    b370:	491d      	ldr	r1, [pc, #116]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b372:	4613      	mov	r3, r2
    b374:	005b      	lsls	r3, r3, #1
    b376:	4413      	add	r3, r2
    b378:	00db      	lsls	r3, r3, #3
    b37a:	440b      	add	r3, r1
    b37c:	330c      	adds	r3, #12
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	4619      	mov	r1, r3
    b382:	6838      	ldr	r0, [r7, #0]
    b384:	4b1e      	ldr	r3, [pc, #120]	; (b400 <_i2c_m_sync_init_impl+0x138>)
    b386:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    b388:	7bfa      	ldrb	r2, [r7, #15]
    b38a:	4917      	ldr	r1, [pc, #92]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b38c:	4613      	mov	r3, r2
    b38e:	005b      	lsls	r3, r3, #1
    b390:	4413      	add	r3, r2
    b392:	00db      	lsls	r3, r3, #3
    b394:	440b      	add	r3, r1
    b396:	3304      	adds	r3, #4
    b398:	681b      	ldr	r3, [r3, #0]
    b39a:	0e1b      	lsrs	r3, r3, #24
    b39c:	b29b      	uxth	r3, r3
    b39e:	f003 0303 	and.w	r3, r3, #3
    b3a2:	b29a      	uxth	r2, r3
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	899b      	ldrh	r3, [r3, #12]
    b3ac:	2b01      	cmp	r3, #1
    b3ae:	bf8c      	ite	hi
    b3b0:	2301      	movhi	r3, #1
    b3b2:	2300      	movls	r3, #0
    b3b4:	b2db      	uxtb	r3, r3
    b3b6:	4619      	mov	r1, r3
    b3b8:	6838      	ldr	r0, [r7, #0]
    b3ba:	4b12      	ldr	r3, [pc, #72]	; (b404 <_i2c_m_sync_init_impl+0x13c>)
    b3bc:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    b3be:	7bfa      	ldrb	r2, [r7, #15]
    b3c0:	4909      	ldr	r1, [pc, #36]	; (b3e8 <_i2c_m_sync_init_impl+0x120>)
    b3c2:	4613      	mov	r3, r2
    b3c4:	005b      	lsls	r3, r3, #1
    b3c6:	4413      	add	r3, r2
    b3c8:	00db      	lsls	r3, r3, #3
    b3ca:	440b      	add	r3, r1
    b3cc:	3312      	adds	r3, #18
    b3ce:	881a      	ldrh	r2, [r3, #0]
    b3d0:	687b      	ldr	r3, [r7, #4]
    b3d2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    b3d4:	2300      	movs	r3, #0
}
    b3d6:	4618      	mov	r0, r3
    b3d8:	3710      	adds	r7, #16
    b3da:	46bd      	mov	sp, r7
    b3dc:	bd80      	pop	{r7, pc}
    b3de:	bf00      	nop
    b3e0:	0000ac59 	.word	0x0000ac59
    b3e4:	0000a605 	.word	0x0000a605
    b3e8:	2000001c 	.word	0x2000001c
    b3ec:	0000a7a9 	.word	0x0000a7a9
    b3f0:	0000a751 	.word	0x0000a751
    b3f4:	0000a5e1 	.word	0x0000a5e1
    b3f8:	0000a7d9 	.word	0x0000a7d9
    b3fc:	0000a9a9 	.word	0x0000a9a9
    b400:	0000a9f1 	.word	0x0000a9f1
    b404:	0000aa2d 	.word	0x0000aa2d

0000b408 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    b408:	b580      	push	{r7, lr}
    b40a:	b082      	sub	sp, #8
    b40c:	af00      	add	r7, sp, #0
    b40e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b410:	2101      	movs	r1, #1
    b412:	6878      	ldr	r0, [r7, #4]
    b414:	4b07      	ldr	r3, [pc, #28]	; (b434 <_spi_sync_enable+0x2c>)
    b416:	4798      	blx	r3
    b418:	4603      	mov	r3, r0
    b41a:	2b00      	cmp	r3, #0
    b41c:	d002      	beq.n	b424 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    b41e:	f06f 0303 	mvn.w	r3, #3
    b422:	e003      	b.n	b42c <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    b424:	6878      	ldr	r0, [r7, #4]
    b426:	4b04      	ldr	r3, [pc, #16]	; (b438 <_spi_sync_enable+0x30>)
    b428:	4798      	blx	r3

	return ERR_NONE;
    b42a:	2300      	movs	r3, #0
}
    b42c:	4618      	mov	r0, r3
    b42e:	3708      	adds	r7, #8
    b430:	46bd      	mov	sp, r7
    b432:	bd80      	pop	{r7, pc}
    b434:	0000a651 	.word	0x0000a651
    b438:	0000a7fd 	.word	0x0000a7fd

0000b43c <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    b43c:	b580      	push	{r7, lr}
    b43e:	b082      	sub	sp, #8
    b440:	af00      	add	r7, sp, #0
    b442:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b444:	2101      	movs	r1, #1
    b446:	6878      	ldr	r0, [r7, #4]
    b448:	4b07      	ldr	r3, [pc, #28]	; (b468 <_spi_sync_disable+0x2c>)
    b44a:	4798      	blx	r3
    b44c:	4603      	mov	r3, r0
    b44e:	2b00      	cmp	r3, #0
    b450:	d002      	beq.n	b458 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    b452:	f06f 0303 	mvn.w	r3, #3
    b456:	e003      	b.n	b460 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    b458:	6878      	ldr	r0, [r7, #4]
    b45a:	4b04      	ldr	r3, [pc, #16]	; (b46c <_spi_sync_disable+0x30>)
    b45c:	4798      	blx	r3

	return ERR_NONE;
    b45e:	2300      	movs	r3, #0
}
    b460:	4618      	mov	r0, r3
    b462:	3708      	adds	r7, #8
    b464:	46bd      	mov	sp, r7
    b466:	bd80      	pop	{r7, pc}
    b468:	0000a651 	.word	0x0000a651
    b46c:	0000a85d 	.word	0x0000a85d

0000b470 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    b470:	b580      	push	{r7, lr}
    b472:	b082      	sub	sp, #8
    b474:	af00      	add	r7, sp, #0
    b476:	6078      	str	r0, [r7, #4]
    b478:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    b47a:	687b      	ldr	r3, [r7, #4]
    b47c:	2b00      	cmp	r3, #0
    b47e:	d004      	beq.n	b48a <_spi_load_regs_master+0x1a>
    b480:	683b      	ldr	r3, [r7, #0]
    b482:	2b00      	cmp	r3, #0
    b484:	d001      	beq.n	b48a <_spi_load_regs_master+0x1a>
    b486:	2301      	movs	r3, #1
    b488:	e000      	b.n	b48c <_spi_load_regs_master+0x1c>
    b48a:	2300      	movs	r3, #0
    b48c:	f003 0301 	and.w	r3, r3, #1
    b490:	b2db      	uxtb	r3, r3
    b492:	f640 1209 	movw	r2, #2313	; 0x909
    b496:	4915      	ldr	r1, [pc, #84]	; (b4ec <_spi_load_regs_master+0x7c>)
    b498:	4618      	mov	r0, r3
    b49a:	4b15      	ldr	r3, [pc, #84]	; (b4f0 <_spi_load_regs_master+0x80>)
    b49c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    b49e:	683b      	ldr	r3, [r7, #0]
    b4a0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    b4a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    b4a6:	f023 0301 	bic.w	r3, r3, #1
    b4aa:	4619      	mov	r1, r3
    b4ac:	6878      	ldr	r0, [r7, #4]
    b4ae:	4b11      	ldr	r3, [pc, #68]	; (b4f4 <_spi_load_regs_master+0x84>)
    b4b0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    b4b2:	683b      	ldr	r3, [r7, #0]
    b4b4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    b4b6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    b4ba:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    b4be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4c2:	4619      	mov	r1, r3
    b4c4:	6878      	ldr	r0, [r7, #4]
    b4c6:	4b0c      	ldr	r3, [pc, #48]	; (b4f8 <_spi_load_regs_master+0x88>)
    b4c8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    b4ca:	683b      	ldr	r3, [r7, #0]
    b4cc:	7b1b      	ldrb	r3, [r3, #12]
    b4ce:	4619      	mov	r1, r3
    b4d0:	6878      	ldr	r0, [r7, #4]
    b4d2:	4b0a      	ldr	r3, [pc, #40]	; (b4fc <_spi_load_regs_master+0x8c>)
    b4d4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    b4d6:	683b      	ldr	r3, [r7, #0]
    b4d8:	7b5b      	ldrb	r3, [r3, #13]
    b4da:	4619      	mov	r1, r3
    b4dc:	6878      	ldr	r0, [r7, #4]
    b4de:	4b08      	ldr	r3, [pc, #32]	; (b500 <_spi_load_regs_master+0x90>)
    b4e0:	4798      	blx	r3
}
    b4e2:	bf00      	nop
    b4e4:	3708      	adds	r7, #8
    b4e6:	46bd      	mov	sp, r7
    b4e8:	bd80      	pop	{r7, pc}
    b4ea:	bf00      	nop
    b4ec:	0001ce0c 	.word	0x0001ce0c
    b4f0:	00007b0d 	.word	0x00007b0d
    b4f4:	0000a8b5 	.word	0x0000a8b5
    b4f8:	0000a9cd 	.word	0x0000a9cd
    b4fc:	0000aa0d 	.word	0x0000aa0d
    b500:	0000ab45 	.word	0x0000ab45

0000b504 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    b504:	b580      	push	{r7, lr}
    b506:	b082      	sub	sp, #8
    b508:	af00      	add	r7, sp, #0
    b50a:	6078      	str	r0, [r7, #4]
    b50c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	2b00      	cmp	r3, #0
    b512:	d004      	beq.n	b51e <_spi_load_regs_slave+0x1a>
    b514:	683b      	ldr	r3, [r7, #0]
    b516:	2b00      	cmp	r3, #0
    b518:	d001      	beq.n	b51e <_spi_load_regs_slave+0x1a>
    b51a:	2301      	movs	r3, #1
    b51c:	e000      	b.n	b520 <_spi_load_regs_slave+0x1c>
    b51e:	2300      	movs	r3, #0
    b520:	f003 0301 	and.w	r3, r3, #1
    b524:	b2db      	uxtb	r3, r3
    b526:	f640 121d 	movw	r2, #2333	; 0x91d
    b52a:	491a      	ldr	r1, [pc, #104]	; (b594 <_spi_load_regs_slave+0x90>)
    b52c:	4618      	mov	r0, r3
    b52e:	4b1a      	ldr	r3, [pc, #104]	; (b598 <_spi_load_regs_slave+0x94>)
    b530:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    b532:	683b      	ldr	r3, [r7, #0]
    b534:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    b536:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    b53a:	f023 0301 	bic.w	r3, r3, #1
    b53e:	4619      	mov	r1, r3
    b540:	6878      	ldr	r0, [r7, #4]
    b542:	4b16      	ldr	r3, [pc, #88]	; (b59c <_spi_load_regs_slave+0x98>)
    b544:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    b546:	683b      	ldr	r3, [r7, #0]
    b548:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    b54a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    b54e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    b552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b556:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    b55a:	4619      	mov	r1, r3
    b55c:	6878      	ldr	r0, [r7, #4]
    b55e:	4b10      	ldr	r3, [pc, #64]	; (b5a0 <_spi_load_regs_slave+0x9c>)
    b560:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    b562:	683b      	ldr	r3, [r7, #0]
    b564:	689b      	ldr	r3, [r3, #8]
    b566:	4619      	mov	r1, r3
    b568:	6878      	ldr	r0, [r7, #4]
    b56a:	4b0e      	ldr	r3, [pc, #56]	; (b5a4 <_spi_load_regs_slave+0xa0>)
    b56c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    b56e:	683b      	ldr	r3, [r7, #0]
    b570:	7b5b      	ldrb	r3, [r3, #13]
    b572:	4619      	mov	r1, r3
    b574:	6878      	ldr	r0, [r7, #4]
    b576:	4b0c      	ldr	r3, [pc, #48]	; (b5a8 <_spi_load_regs_slave+0xa4>)
    b578:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    b57a:	bf00      	nop
    b57c:	f04f 31ff 	mov.w	r1, #4294967295
    b580:	6878      	ldr	r0, [r7, #4]
    b582:	4b0a      	ldr	r3, [pc, #40]	; (b5ac <_spi_load_regs_slave+0xa8>)
    b584:	4798      	blx	r3
    b586:	4603      	mov	r3, r0
    b588:	2b00      	cmp	r3, #0
    b58a:	d1f7      	bne.n	b57c <_spi_load_regs_slave+0x78>
		;
}
    b58c:	bf00      	nop
    b58e:	3708      	adds	r7, #8
    b590:	46bd      	mov	sp, r7
    b592:	bd80      	pop	{r7, pc}
    b594:	0001ce0c 	.word	0x0001ce0c
    b598:	00007b0d 	.word	0x00007b0d
    b59c:	0000a8b5 	.word	0x0000a8b5
    b5a0:	0000a9cd 	.word	0x0000a9cd
    b5a4:	0000aab1 	.word	0x0000aab1
    b5a8:	0000ab45 	.word	0x0000ab45
    b5ac:	0000a651 	.word	0x0000a651

0000b5b0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    b5b0:	b580      	push	{r7, lr}
    b5b2:	b084      	sub	sp, #16
    b5b4:	af00      	add	r7, sp, #0
    b5b6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	4618      	mov	r0, r3
    b5bc:	4b11      	ldr	r3, [pc, #68]	; (b604 <_spi_get_regs+0x54>)
    b5be:	4798      	blx	r3
    b5c0:	4603      	mov	r3, r0
    b5c2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    b5c4:	2300      	movs	r3, #0
    b5c6:	73fb      	strb	r3, [r7, #15]
    b5c8:	e014      	b.n	b5f4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    b5ca:	7bfa      	ldrb	r2, [r7, #15]
    b5cc:	490e      	ldr	r1, [pc, #56]	; (b608 <_spi_get_regs+0x58>)
    b5ce:	4613      	mov	r3, r2
    b5d0:	011b      	lsls	r3, r3, #4
    b5d2:	4413      	add	r3, r2
    b5d4:	440b      	add	r3, r1
    b5d6:	3310      	adds	r3, #16
    b5d8:	781b      	ldrb	r3, [r3, #0]
    b5da:	7bba      	ldrb	r2, [r7, #14]
    b5dc:	429a      	cmp	r2, r3
    b5de:	d106      	bne.n	b5ee <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    b5e0:	7bfa      	ldrb	r2, [r7, #15]
    b5e2:	4613      	mov	r3, r2
    b5e4:	011b      	lsls	r3, r3, #4
    b5e6:	4413      	add	r3, r2
    b5e8:	4a07      	ldr	r2, [pc, #28]	; (b608 <_spi_get_regs+0x58>)
    b5ea:	4413      	add	r3, r2
    b5ec:	e006      	b.n	b5fc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    b5ee:	7bfb      	ldrb	r3, [r7, #15]
    b5f0:	3301      	adds	r3, #1
    b5f2:	73fb      	strb	r3, [r7, #15]
    b5f4:	7bfb      	ldrb	r3, [r7, #15]
    b5f6:	2b01      	cmp	r3, #1
    b5f8:	d9e7      	bls.n	b5ca <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    b5fa:	2300      	movs	r3, #0
}
    b5fc:	4618      	mov	r0, r3
    b5fe:	3710      	adds	r7, #16
    b600:	46bd      	mov	sp, r7
    b602:	bd80      	pop	{r7, pc}
    b604:	0000abfd 	.word	0x0000abfd
    b608:	0001ce48 	.word	0x0001ce48

0000b60c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b084      	sub	sp, #16
    b610:	af00      	add	r7, sp, #0
    b612:	6078      	str	r0, [r7, #4]
    b614:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    b616:	683b      	ldr	r3, [r7, #0]
    b618:	4618      	mov	r0, r3
    b61a:	4b35      	ldr	r3, [pc, #212]	; (b6f0 <_spi_m_sync_init+0xe4>)
    b61c:	4798      	blx	r3
    b61e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	2b00      	cmp	r3, #0
    b624:	d004      	beq.n	b630 <_spi_m_sync_init+0x24>
    b626:	683b      	ldr	r3, [r7, #0]
    b628:	2b00      	cmp	r3, #0
    b62a:	d001      	beq.n	b630 <_spi_m_sync_init+0x24>
    b62c:	2301      	movs	r3, #1
    b62e:	e000      	b.n	b632 <_spi_m_sync_init+0x26>
    b630:	2300      	movs	r3, #0
    b632:	f003 0301 	and.w	r3, r3, #1
    b636:	b2db      	uxtb	r3, r3
    b638:	f640 123f 	movw	r2, #2367	; 0x93f
    b63c:	492d      	ldr	r1, [pc, #180]	; (b6f4 <_spi_m_sync_init+0xe8>)
    b63e:	4618      	mov	r0, r3
    b640:	4b2d      	ldr	r3, [pc, #180]	; (b6f8 <_spi_m_sync_init+0xec>)
    b642:	4798      	blx	r3

	if (regs == NULL) {
    b644:	68fb      	ldr	r3, [r7, #12]
    b646:	2b00      	cmp	r3, #0
    b648:	d102      	bne.n	b650 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    b64a:	f06f 030c 	mvn.w	r3, #12
    b64e:	e04a      	b.n	b6e6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b650:	2101      	movs	r1, #1
    b652:	6838      	ldr	r0, [r7, #0]
    b654:	4b29      	ldr	r3, [pc, #164]	; (b6fc <_spi_m_sync_init+0xf0>)
    b656:	4798      	blx	r3
    b658:	4603      	mov	r3, r0
    b65a:	f083 0301 	eor.w	r3, r3, #1
    b65e:	b2db      	uxtb	r3, r3
    b660:	2b00      	cmp	r3, #0
    b662:	d019      	beq.n	b698 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    b664:	68fb      	ldr	r3, [r7, #12]
    b666:	681b      	ldr	r3, [r3, #0]
    b668:	f003 031c 	and.w	r3, r3, #28
    b66c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    b66e:	2102      	movs	r1, #2
    b670:	6838      	ldr	r0, [r7, #0]
    b672:	4b23      	ldr	r3, [pc, #140]	; (b700 <_spi_m_sync_init+0xf4>)
    b674:	4798      	blx	r3
    b676:	4603      	mov	r3, r0
    b678:	2b00      	cmp	r3, #0
    b67a:	d006      	beq.n	b68a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    b67c:	6838      	ldr	r0, [r7, #0]
    b67e:	4b21      	ldr	r3, [pc, #132]	; (b704 <_spi_m_sync_init+0xf8>)
    b680:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    b682:	2102      	movs	r1, #2
    b684:	6838      	ldr	r0, [r7, #0]
    b686:	4b20      	ldr	r3, [pc, #128]	; (b708 <_spi_m_sync_init+0xfc>)
    b688:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    b68a:	68bb      	ldr	r3, [r7, #8]
    b68c:	f043 0301 	orr.w	r3, r3, #1
    b690:	4619      	mov	r1, r3
    b692:	6838      	ldr	r0, [r7, #0]
    b694:	4b1d      	ldr	r3, [pc, #116]	; (b70c <_spi_m_sync_init+0x100>)
    b696:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    b698:	2101      	movs	r1, #1
    b69a:	6838      	ldr	r0, [r7, #0]
    b69c:	4b1a      	ldr	r3, [pc, #104]	; (b708 <_spi_m_sync_init+0xfc>)
    b69e:	4798      	blx	r3

	dev->prvt = hw;
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	683a      	ldr	r2, [r7, #0]
    b6a4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    b6a6:	68fb      	ldr	r3, [r7, #12]
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	f003 031c 	and.w	r3, r3, #28
    b6ae:	2b08      	cmp	r3, #8
    b6b0:	d104      	bne.n	b6bc <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    b6b2:	68f9      	ldr	r1, [r7, #12]
    b6b4:	6838      	ldr	r0, [r7, #0]
    b6b6:	4b16      	ldr	r3, [pc, #88]	; (b710 <_spi_m_sync_init+0x104>)
    b6b8:	4798      	blx	r3
    b6ba:	e003      	b.n	b6c4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    b6bc:	68f9      	ldr	r1, [r7, #12]
    b6be:	6838      	ldr	r0, [r7, #0]
    b6c0:	4b14      	ldr	r3, [pc, #80]	; (b714 <_spi_m_sync_init+0x108>)
    b6c2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    b6c4:	68fb      	ldr	r3, [r7, #12]
    b6c6:	685b      	ldr	r3, [r3, #4]
    b6c8:	f003 0307 	and.w	r3, r3, #7
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	d101      	bne.n	b6d4 <_spi_m_sync_init+0xc8>
    b6d0:	2201      	movs	r2, #1
    b6d2:	e000      	b.n	b6d6 <_spi_m_sync_init+0xca>
    b6d4:	2202      	movs	r2, #2
    b6d6:	687b      	ldr	r3, [r7, #4]
    b6d8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    b6da:	68fb      	ldr	r3, [r7, #12]
    b6dc:	89db      	ldrh	r3, [r3, #14]
    b6de:	b29a      	uxth	r2, r3
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    b6e4:	2300      	movs	r3, #0
}
    b6e6:	4618      	mov	r0, r3
    b6e8:	3710      	adds	r7, #16
    b6ea:	46bd      	mov	sp, r7
    b6ec:	bd80      	pop	{r7, pc}
    b6ee:	bf00      	nop
    b6f0:	0000b5b1 	.word	0x0000b5b1
    b6f4:	0001ce0c 	.word	0x0001ce0c
    b6f8:	00007b0d 	.word	0x00007b0d
    b6fc:	0000a651 	.word	0x0000a651
    b700:	0000a885 	.word	0x0000a885
    b704:	0000a85d 	.word	0x0000a85d
    b708:	0000a62d 	.word	0x0000a62d
    b70c:	0000a8b5 	.word	0x0000a8b5
    b710:	0000b505 	.word	0x0000b505
    b714:	0000b471 	.word	0x0000b471

0000b718 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    b718:	b580      	push	{r7, lr}
    b71a:	b082      	sub	sp, #8
    b71c:	af00      	add	r7, sp, #0
    b71e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	2b00      	cmp	r3, #0
    b724:	d005      	beq.n	b732 <_spi_m_sync_enable+0x1a>
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	681b      	ldr	r3, [r3, #0]
    b72a:	2b00      	cmp	r3, #0
    b72c:	d001      	beq.n	b732 <_spi_m_sync_enable+0x1a>
    b72e:	2301      	movs	r3, #1
    b730:	e000      	b.n	b734 <_spi_m_sync_enable+0x1c>
    b732:	2300      	movs	r3, #0
    b734:	f003 0301 	and.w	r3, r3, #1
    b738:	b2db      	uxtb	r3, r3
    b73a:	f640 129e 	movw	r2, #2462	; 0x99e
    b73e:	4907      	ldr	r1, [pc, #28]	; (b75c <_spi_m_sync_enable+0x44>)
    b740:	4618      	mov	r0, r3
    b742:	4b07      	ldr	r3, [pc, #28]	; (b760 <_spi_m_sync_enable+0x48>)
    b744:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    b746:	687b      	ldr	r3, [r7, #4]
    b748:	681b      	ldr	r3, [r3, #0]
    b74a:	4618      	mov	r0, r3
    b74c:	4b05      	ldr	r3, [pc, #20]	; (b764 <_spi_m_sync_enable+0x4c>)
    b74e:	4798      	blx	r3
    b750:	4603      	mov	r3, r0
}
    b752:	4618      	mov	r0, r3
    b754:	3708      	adds	r7, #8
    b756:	46bd      	mov	sp, r7
    b758:	bd80      	pop	{r7, pc}
    b75a:	bf00      	nop
    b75c:	0001ce0c 	.word	0x0001ce0c
    b760:	00007b0d 	.word	0x00007b0d
    b764:	0000b409 	.word	0x0000b409

0000b768 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    b768:	b580      	push	{r7, lr}
    b76a:	b082      	sub	sp, #8
    b76c:	af00      	add	r7, sp, #0
    b76e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    b770:	687b      	ldr	r3, [r7, #4]
    b772:	2b00      	cmp	r3, #0
    b774:	d005      	beq.n	b782 <_spi_m_sync_disable+0x1a>
    b776:	687b      	ldr	r3, [r7, #4]
    b778:	681b      	ldr	r3, [r3, #0]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d001      	beq.n	b782 <_spi_m_sync_disable+0x1a>
    b77e:	2301      	movs	r3, #1
    b780:	e000      	b.n	b784 <_spi_m_sync_disable+0x1c>
    b782:	2300      	movs	r3, #0
    b784:	f003 0301 	and.w	r3, r3, #1
    b788:	b2db      	uxtb	r3, r3
    b78a:	f640 12ba 	movw	r2, #2490	; 0x9ba
    b78e:	4907      	ldr	r1, [pc, #28]	; (b7ac <_spi_m_sync_disable+0x44>)
    b790:	4618      	mov	r0, r3
    b792:	4b07      	ldr	r3, [pc, #28]	; (b7b0 <_spi_m_sync_disable+0x48>)
    b794:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    b796:	687b      	ldr	r3, [r7, #4]
    b798:	681b      	ldr	r3, [r3, #0]
    b79a:	4618      	mov	r0, r3
    b79c:	4b05      	ldr	r3, [pc, #20]	; (b7b4 <_spi_m_sync_disable+0x4c>)
    b79e:	4798      	blx	r3
    b7a0:	4603      	mov	r3, r0
}
    b7a2:	4618      	mov	r0, r3
    b7a4:	3708      	adds	r7, #8
    b7a6:	46bd      	mov	sp, r7
    b7a8:	bd80      	pop	{r7, pc}
    b7aa:	bf00      	nop
    b7ac:	0001ce0c 	.word	0x0001ce0c
    b7b0:	00007b0d 	.word	0x00007b0d
    b7b4:	0000b43d 	.word	0x0000b43d

0000b7b8 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    b7b8:	b580      	push	{r7, lr}
    b7ba:	b082      	sub	sp, #8
    b7bc:	af00      	add	r7, sp, #0
    b7be:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    b7c0:	bf00      	nop
    b7c2:	2103      	movs	r1, #3
    b7c4:	6878      	ldr	r0, [r7, #4]
    b7c6:	4b06      	ldr	r3, [pc, #24]	; (b7e0 <_spi_wait_bus_idle+0x28>)
    b7c8:	4798      	blx	r3
    b7ca:	4603      	mov	r3, r0
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d0f8      	beq.n	b7c2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    b7d0:	2103      	movs	r1, #3
    b7d2:	6878      	ldr	r0, [r7, #4]
    b7d4:	4b03      	ldr	r3, [pc, #12]	; (b7e4 <_spi_wait_bus_idle+0x2c>)
    b7d6:	4798      	blx	r3
}
    b7d8:	bf00      	nop
    b7da:	3708      	adds	r7, #8
    b7dc:	46bd      	mov	sp, r7
    b7de:	bd80      	pop	{r7, pc}
    b7e0:	0000a6c7 	.word	0x0000a6c7
    b7e4:	0000a709 	.word	0x0000a709

0000b7e8 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    b7e8:	b580      	push	{r7, lr}
    b7ea:	b086      	sub	sp, #24
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	60f8      	str	r0, [r7, #12]
    b7f0:	60b9      	str	r1, [r7, #8]
    b7f2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    b7f4:	68bb      	ldr	r3, [r7, #8]
    b7f6:	f003 0304 	and.w	r3, r3, #4
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d101      	bne.n	b802 <_spi_rx_check_and_receive+0x1a>
		return false;
    b7fe:	2300      	movs	r3, #0
    b800:	e022      	b.n	b848 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    b802:	68f8      	ldr	r0, [r7, #12]
    b804:	4b12      	ldr	r3, [pc, #72]	; (b850 <_spi_rx_check_and_receive+0x68>)
    b806:	4798      	blx	r3
    b808:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	685b      	ldr	r3, [r3, #4]
    b80e:	2b00      	cmp	r3, #0
    b810:	d014      	beq.n	b83c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	685b      	ldr	r3, [r3, #4]
    b816:	1c59      	adds	r1, r3, #1
    b818:	687a      	ldr	r2, [r7, #4]
    b81a:	6051      	str	r1, [r2, #4]
    b81c:	697a      	ldr	r2, [r7, #20]
    b81e:	b2d2      	uxtb	r2, r2
    b820:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    b822:	687b      	ldr	r3, [r7, #4]
    b824:	7c1b      	ldrb	r3, [r3, #16]
    b826:	2b01      	cmp	r3, #1
    b828:	d908      	bls.n	b83c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	685b      	ldr	r3, [r3, #4]
    b82e:	1c59      	adds	r1, r3, #1
    b830:	687a      	ldr	r2, [r7, #4]
    b832:	6051      	str	r1, [r2, #4]
    b834:	697a      	ldr	r2, [r7, #20]
    b836:	0a12      	lsrs	r2, r2, #8
    b838:	b2d2      	uxtb	r2, r2
    b83a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    b83c:	687b      	ldr	r3, [r7, #4]
    b83e:	68db      	ldr	r3, [r3, #12]
    b840:	1c5a      	adds	r2, r3, #1
    b842:	687b      	ldr	r3, [r7, #4]
    b844:	60da      	str	r2, [r3, #12]

	return true;
    b846:	2301      	movs	r3, #1
}
    b848:	4618      	mov	r0, r3
    b84a:	3718      	adds	r7, #24
    b84c:	46bd      	mov	sp, r7
    b84e:	bd80      	pop	{r7, pc}
    b850:	0000ab2d 	.word	0x0000ab2d

0000b854 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    b854:	b580      	push	{r7, lr}
    b856:	b086      	sub	sp, #24
    b858:	af00      	add	r7, sp, #0
    b85a:	60f8      	str	r0, [r7, #12]
    b85c:	60b9      	str	r1, [r7, #8]
    b85e:	607a      	str	r2, [r7, #4]
    b860:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    b862:	68bb      	ldr	r3, [r7, #8]
    b864:	f003 0301 	and.w	r3, r3, #1
    b868:	2b00      	cmp	r3, #0
    b86a:	d028      	beq.n	b8be <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    b86c:	687b      	ldr	r3, [r7, #4]
    b86e:	681b      	ldr	r3, [r3, #0]
    b870:	2b00      	cmp	r3, #0
    b872:	d018      	beq.n	b8a6 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    b874:	687b      	ldr	r3, [r7, #4]
    b876:	681b      	ldr	r3, [r3, #0]
    b878:	1c59      	adds	r1, r3, #1
    b87a:	687a      	ldr	r2, [r7, #4]
    b87c:	6011      	str	r1, [r2, #0]
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    b882:	687b      	ldr	r3, [r7, #4]
    b884:	7c1b      	ldrb	r3, [r3, #16]
    b886:	2b01      	cmp	r3, #1
    b888:	d90f      	bls.n	b8aa <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	681b      	ldr	r3, [r3, #0]
    b88e:	781b      	ldrb	r3, [r3, #0]
    b890:	021b      	lsls	r3, r3, #8
    b892:	461a      	mov	r2, r3
    b894:	697b      	ldr	r3, [r7, #20]
    b896:	4313      	orrs	r3, r2
    b898:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    b89a:	687b      	ldr	r3, [r7, #4]
    b89c:	681b      	ldr	r3, [r3, #0]
    b89e:	1c5a      	adds	r2, r3, #1
    b8a0:	687b      	ldr	r3, [r7, #4]
    b8a2:	601a      	str	r2, [r3, #0]
    b8a4:	e001      	b.n	b8aa <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    b8a6:	887b      	ldrh	r3, [r7, #2]
    b8a8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    b8aa:	687b      	ldr	r3, [r7, #4]
    b8ac:	689b      	ldr	r3, [r3, #8]
    b8ae:	1c5a      	adds	r2, r3, #1
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    b8b4:	6979      	ldr	r1, [r7, #20]
    b8b6:	68f8      	ldr	r0, [r7, #12]
    b8b8:	4b03      	ldr	r3, [pc, #12]	; (b8c8 <_spi_tx_check_and_send+0x74>)
    b8ba:	4798      	blx	r3
    b8bc:	e000      	b.n	b8c0 <_spi_tx_check_and_send+0x6c>
		return;
    b8be:	bf00      	nop
}
    b8c0:	3718      	adds	r7, #24
    b8c2:	46bd      	mov	sp, r7
    b8c4:	bd80      	pop	{r7, pc}
    b8c6:	bf00      	nop
    b8c8:	0000ab11 	.word	0x0000ab11

0000b8cc <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b082      	sub	sp, #8
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	6078      	str	r0, [r7, #4]
    b8d4:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d00b      	beq.n	b8f8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    b8e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b8e4:	6838      	ldr	r0, [r7, #0]
    b8e6:	4b07      	ldr	r3, [pc, #28]	; (b904 <_spi_err_check+0x38>)
    b8e8:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    b8ea:	2180      	movs	r1, #128	; 0x80
    b8ec:	6838      	ldr	r0, [r7, #0]
    b8ee:	4b06      	ldr	r3, [pc, #24]	; (b908 <_spi_err_check+0x3c>)
    b8f0:	4798      	blx	r3
		return ERR_OVERFLOW;
    b8f2:	f06f 0312 	mvn.w	r3, #18
    b8f6:	e000      	b.n	b8fa <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    b8f8:	2300      	movs	r3, #0
}
    b8fa:	4618      	mov	r0, r3
    b8fc:	3708      	adds	r7, #8
    b8fe:	46bd      	mov	sp, r7
    b900:	bd80      	pop	{r7, pc}
    b902:	bf00      	nop
    b904:	0000ab65 	.word	0x0000ab65
    b908:	0000a709 	.word	0x0000a709

0000b90c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    b90c:	b590      	push	{r4, r7, lr}
    b90e:	b08b      	sub	sp, #44	; 0x2c
    b910:	af00      	add	r7, sp, #0
    b912:	6078      	str	r0, [r7, #4]
    b914:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    b916:	687b      	ldr	r3, [r7, #4]
    b918:	681b      	ldr	r3, [r3, #0]
    b91a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    b91c:	2300      	movs	r3, #0
    b91e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    b920:	683b      	ldr	r3, [r7, #0]
    b922:	681b      	ldr	r3, [r3, #0]
    b924:	60bb      	str	r3, [r7, #8]
    b926:	683b      	ldr	r3, [r7, #0]
    b928:	685b      	ldr	r3, [r3, #4]
    b92a:	60fb      	str	r3, [r7, #12]
    b92c:	2300      	movs	r3, #0
    b92e:	613b      	str	r3, [r7, #16]
    b930:	2300      	movs	r3, #0
    b932:	617b      	str	r3, [r7, #20]
    b934:	687b      	ldr	r3, [r7, #4]
    b936:	791b      	ldrb	r3, [r3, #4]
    b938:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    b93a:	687b      	ldr	r3, [r7, #4]
    b93c:	2b00      	cmp	r3, #0
    b93e:	d004      	beq.n	b94a <_spi_m_sync_trans+0x3e>
    b940:	6a3b      	ldr	r3, [r7, #32]
    b942:	2b00      	cmp	r3, #0
    b944:	d001      	beq.n	b94a <_spi_m_sync_trans+0x3e>
    b946:	2301      	movs	r3, #1
    b948:	e000      	b.n	b94c <_spi_m_sync_trans+0x40>
    b94a:	2300      	movs	r3, #0
    b94c:	f003 0301 	and.w	r3, r3, #1
    b950:	b2db      	uxtb	r3, r3
    b952:	f640 22a3 	movw	r2, #2723	; 0xaa3
    b956:	492b      	ldr	r1, [pc, #172]	; (ba04 <_spi_m_sync_trans+0xf8>)
    b958:	4618      	mov	r0, r3
    b95a:	4b2b      	ldr	r3, [pc, #172]	; (ba08 <_spi_m_sync_trans+0xfc>)
    b95c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    b95e:	2107      	movs	r1, #7
    b960:	6a38      	ldr	r0, [r7, #32]
    b962:	4b2a      	ldr	r3, [pc, #168]	; (ba0c <_spi_m_sync_trans+0x100>)
    b964:	4798      	blx	r3
    b966:	4603      	mov	r3, r0
    b968:	2b00      	cmp	r3, #0
    b96a:	d002      	beq.n	b972 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    b96c:	f06f 0303 	mvn.w	r3, #3
    b970:	e043      	b.n	b9fa <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    b972:	6a38      	ldr	r0, [r7, #32]
    b974:	4b26      	ldr	r3, [pc, #152]	; (ba10 <_spi_m_sync_trans+0x104>)
    b976:	4798      	blx	r3
    b978:	4603      	mov	r3, r0
    b97a:	f083 0301 	eor.w	r3, r3, #1
    b97e:	b2db      	uxtb	r3, r3
    b980:	2b00      	cmp	r3, #0
    b982:	d002      	beq.n	b98a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    b984:	f06f 0313 	mvn.w	r3, #19
    b988:	e037      	b.n	b9fa <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    b98a:	6a38      	ldr	r0, [r7, #32]
    b98c:	4b21      	ldr	r3, [pc, #132]	; (ba14 <_spi_m_sync_trans+0x108>)
    b98e:	4798      	blx	r3
    b990:	4603      	mov	r3, r0
    b992:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    b994:	f107 0308 	add.w	r3, r7, #8
    b998:	461a      	mov	r2, r3
    b99a:	69f9      	ldr	r1, [r7, #28]
    b99c:	6a38      	ldr	r0, [r7, #32]
    b99e:	4b1e      	ldr	r3, [pc, #120]	; (ba18 <_spi_m_sync_trans+0x10c>)
    b9a0:	4798      	blx	r3
    b9a2:	4603      	mov	r3, r0
    b9a4:	f083 0301 	eor.w	r3, r3, #1
    b9a8:	b2db      	uxtb	r3, r3
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d00b      	beq.n	b9c6 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    b9ae:	697a      	ldr	r2, [r7, #20]
    b9b0:	693b      	ldr	r3, [r7, #16]
    b9b2:	429a      	cmp	r2, r3
    b9b4:	d307      	bcc.n	b9c6 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    b9b6:	687b      	ldr	r3, [r7, #4]
    b9b8:	88db      	ldrh	r3, [r3, #6]
    b9ba:	f107 0208 	add.w	r2, r7, #8
    b9be:	69f9      	ldr	r1, [r7, #28]
    b9c0:	6a38      	ldr	r0, [r7, #32]
    b9c2:	4c16      	ldr	r4, [pc, #88]	; (ba1c <_spi_m_sync_trans+0x110>)
    b9c4:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    b9c6:	6a39      	ldr	r1, [r7, #32]
    b9c8:	69f8      	ldr	r0, [r7, #28]
    b9ca:	4b15      	ldr	r3, [pc, #84]	; (ba20 <_spi_m_sync_trans+0x114>)
    b9cc:	4798      	blx	r3
    b9ce:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	db0c      	blt.n	b9f0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    b9d6:	693a      	ldr	r2, [r7, #16]
    b9d8:	683b      	ldr	r3, [r7, #0]
    b9da:	689b      	ldr	r3, [r3, #8]
    b9dc:	429a      	cmp	r2, r3
    b9de:	d3d4      	bcc.n	b98a <_spi_m_sync_trans+0x7e>
    b9e0:	697a      	ldr	r2, [r7, #20]
    b9e2:	683b      	ldr	r3, [r7, #0]
    b9e4:	689b      	ldr	r3, [r3, #8]
    b9e6:	429a      	cmp	r2, r3
    b9e8:	d3cf      	bcc.n	b98a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    b9ea:	693b      	ldr	r3, [r7, #16]
    b9ec:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    b9ee:	e000      	b.n	b9f2 <_spi_m_sync_trans+0xe6>
			break;
    b9f0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    b9f2:	6a38      	ldr	r0, [r7, #32]
    b9f4:	4b0b      	ldr	r3, [pc, #44]	; (ba24 <_spi_m_sync_trans+0x118>)
    b9f6:	4798      	blx	r3

	return rc;
    b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b9fa:	4618      	mov	r0, r3
    b9fc:	372c      	adds	r7, #44	; 0x2c
    b9fe:	46bd      	mov	sp, r7
    ba00:	bd90      	pop	{r4, r7, pc}
    ba02:	bf00      	nop
    ba04:	0001ce0c 	.word	0x0001ce0c
    ba08:	00007b0d 	.word	0x00007b0d
    ba0c:	0000a651 	.word	0x0000a651
    ba10:	0000a825 	.word	0x0000a825
    ba14:	0000a6ef 	.word	0x0000a6ef
    ba18:	0000b7e9 	.word	0x0000b7e9
    ba1c:	0000b855 	.word	0x0000b855
    ba20:	0000b8cd 	.word	0x0000b8cd
    ba24:	0000b7b9 	.word	0x0000b7b9

0000ba28 <__NVIC_EnableIRQ>:
{
    ba28:	b480      	push	{r7}
    ba2a:	b083      	sub	sp, #12
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	4603      	mov	r3, r0
    ba30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ba32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba36:	2b00      	cmp	r3, #0
    ba38:	db0b      	blt.n	ba52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ba3a:	4909      	ldr	r1, [pc, #36]	; (ba60 <__NVIC_EnableIRQ+0x38>)
    ba3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba40:	095b      	lsrs	r3, r3, #5
    ba42:	88fa      	ldrh	r2, [r7, #6]
    ba44:	f002 021f 	and.w	r2, r2, #31
    ba48:	2001      	movs	r0, #1
    ba4a:	fa00 f202 	lsl.w	r2, r0, r2
    ba4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba52:	bf00      	nop
    ba54:	370c      	adds	r7, #12
    ba56:	46bd      	mov	sp, r7
    ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
    ba60:	e000e100 	.word	0xe000e100

0000ba64 <__NVIC_DisableIRQ>:
{
    ba64:	b480      	push	{r7}
    ba66:	b083      	sub	sp, #12
    ba68:	af00      	add	r7, sp, #0
    ba6a:	4603      	mov	r3, r0
    ba6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ba6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba72:	2b00      	cmp	r3, #0
    ba74:	db10      	blt.n	ba98 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ba76:	490b      	ldr	r1, [pc, #44]	; (baa4 <__NVIC_DisableIRQ+0x40>)
    ba78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ba7c:	095b      	lsrs	r3, r3, #5
    ba7e:	88fa      	ldrh	r2, [r7, #6]
    ba80:	f002 021f 	and.w	r2, r2, #31
    ba84:	2001      	movs	r0, #1
    ba86:	fa00 f202 	lsl.w	r2, r0, r2
    ba8a:	3320      	adds	r3, #32
    ba8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ba90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ba94:	f3bf 8f6f 	isb	sy
}
    ba98:	bf00      	nop
    ba9a:	370c      	adds	r7, #12
    ba9c:	46bd      	mov	sp, r7
    ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    baa2:	4770      	bx	lr
    baa4:	e000e100 	.word	0xe000e100

0000baa8 <__NVIC_ClearPendingIRQ>:
{
    baa8:	b480      	push	{r7}
    baaa:	b083      	sub	sp, #12
    baac:	af00      	add	r7, sp, #0
    baae:	4603      	mov	r3, r0
    bab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    bab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    bab6:	2b00      	cmp	r3, #0
    bab8:	db0c      	blt.n	bad4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    baba:	4909      	ldr	r1, [pc, #36]	; (bae0 <__NVIC_ClearPendingIRQ+0x38>)
    babc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    bac0:	095b      	lsrs	r3, r3, #5
    bac2:	88fa      	ldrh	r2, [r7, #6]
    bac4:	f002 021f 	and.w	r2, r2, #31
    bac8:	2001      	movs	r0, #1
    baca:	fa00 f202 	lsl.w	r2, r0, r2
    bace:	3360      	adds	r3, #96	; 0x60
    bad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bad4:	bf00      	nop
    bad6:	370c      	adds	r7, #12
    bad8:	46bd      	mov	sp, r7
    bada:	f85d 7b04 	ldr.w	r7, [sp], #4
    bade:	4770      	bx	lr
    bae0:	e000e100 	.word	0xe000e100

0000bae4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    bae4:	b480      	push	{r7}
    bae6:	b083      	sub	sp, #12
    bae8:	af00      	add	r7, sp, #0
    baea:	6078      	str	r0, [r7, #4]
    baec:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    baee:	bf00      	nop
    baf0:	687b      	ldr	r3, [r7, #4]
    baf2:	689a      	ldr	r2, [r3, #8]
    baf4:	683b      	ldr	r3, [r7, #0]
    baf6:	4013      	ands	r3, r2
    baf8:	2b00      	cmp	r3, #0
    bafa:	d1f9      	bne.n	baf0 <hri_tcc_wait_for_sync+0xc>
	};
}
    bafc:	bf00      	nop
    bafe:	370c      	adds	r7, #12
    bb00:	46bd      	mov	sp, r7
    bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb06:	4770      	bx	lr

0000bb08 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    bb08:	b480      	push	{r7}
    bb0a:	b083      	sub	sp, #12
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	6078      	str	r0, [r7, #4]
    bb10:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	689a      	ldr	r2, [r3, #8]
    bb16:	683b      	ldr	r3, [r7, #0]
    bb18:	4013      	ands	r3, r2
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	bf14      	ite	ne
    bb1e:	2301      	movne	r3, #1
    bb20:	2300      	moveq	r3, #0
    bb22:	b2db      	uxtb	r3, r3
}
    bb24:	4618      	mov	r0, r3
    bb26:	370c      	adds	r7, #12
    bb28:	46bd      	mov	sp, r7
    bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb2e:	4770      	bx	lr

0000bb30 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    bb30:	b480      	push	{r7}
    bb32:	b083      	sub	sp, #12
    bb34:	af00      	add	r7, sp, #0
    bb36:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bb3c:	f003 0301 	and.w	r3, r3, #1
    bb40:	2b00      	cmp	r3, #0
    bb42:	bf14      	ite	ne
    bb44:	2301      	movne	r3, #1
    bb46:	2300      	moveq	r3, #0
    bb48:	b2db      	uxtb	r3, r3
}
    bb4a:	4618      	mov	r0, r3
    bb4c:	370c      	adds	r7, #12
    bb4e:	46bd      	mov	sp, r7
    bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb54:	4770      	bx	lr

0000bb56 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    bb56:	b480      	push	{r7}
    bb58:	b083      	sub	sp, #12
    bb5a:	af00      	add	r7, sp, #0
    bb5c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    bb5e:	687b      	ldr	r3, [r7, #4]
    bb60:	2201      	movs	r2, #1
    bb62:	62da      	str	r2, [r3, #44]	; 0x2c
}
    bb64:	bf00      	nop
    bb66:	370c      	adds	r7, #12
    bb68:	46bd      	mov	sp, r7
    bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb6e:	4770      	bx	lr

0000bb70 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    bb70:	b480      	push	{r7}
    bb72:	b083      	sub	sp, #12
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
    bb78:	460b      	mov	r3, r1
    bb7a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    bb7c:	687b      	ldr	r3, [r7, #4]
    bb7e:	78fa      	ldrb	r2, [r7, #3]
    bb80:	715a      	strb	r2, [r3, #5]
}
    bb82:	bf00      	nop
    bb84:	370c      	adds	r7, #12
    bb86:	46bd      	mov	sp, r7
    bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb8c:	4770      	bx	lr

0000bb8e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    bb8e:	b480      	push	{r7}
    bb90:	b083      	sub	sp, #12
    bb92:	af00      	add	r7, sp, #0
    bb94:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    bb96:	687b      	ldr	r3, [r7, #4]
    bb98:	2201      	movs	r2, #1
    bb9a:	629a      	str	r2, [r3, #40]	; 0x28
}
    bb9c:	bf00      	nop
    bb9e:	370c      	adds	r7, #12
    bba0:	46bd      	mov	sp, r7
    bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bba6:	4770      	bx	lr

0000bba8 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    bba8:	b580      	push	{r7, lr}
    bbaa:	b082      	sub	sp, #8
    bbac:	af00      	add	r7, sp, #0
    bbae:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    bbb0:	687b      	ldr	r3, [r7, #4]
    bbb2:	681b      	ldr	r3, [r3, #0]
    bbb4:	f043 0201 	orr.w	r2, r3, #1
    bbb8:	687b      	ldr	r3, [r7, #4]
    bbba:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    bbbc:	2101      	movs	r1, #1
    bbbe:	6878      	ldr	r0, [r7, #4]
    bbc0:	4b02      	ldr	r3, [pc, #8]	; (bbcc <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    bbc2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    bbc4:	bf00      	nop
    bbc6:	3708      	adds	r7, #8
    bbc8:	46bd      	mov	sp, r7
    bbca:	bd80      	pop	{r7, pc}
    bbcc:	0000bae5 	.word	0x0000bae5

0000bbd0 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    bbd0:	b580      	push	{r7, lr}
    bbd2:	b082      	sub	sp, #8
    bbd4:	af00      	add	r7, sp, #0
    bbd6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    bbd8:	687b      	ldr	r3, [r7, #4]
    bbda:	681b      	ldr	r3, [r3, #0]
    bbdc:	f043 0202 	orr.w	r2, r3, #2
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    bbe4:	2103      	movs	r1, #3
    bbe6:	6878      	ldr	r0, [r7, #4]
    bbe8:	4b02      	ldr	r3, [pc, #8]	; (bbf4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    bbea:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    bbec:	bf00      	nop
    bbee:	3708      	adds	r7, #8
    bbf0:	46bd      	mov	sp, r7
    bbf2:	bd80      	pop	{r7, pc}
    bbf4:	0000bae5 	.word	0x0000bae5

0000bbf8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	b084      	sub	sp, #16
    bbfc:	af00      	add	r7, sp, #0
    bbfe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    bc00:	2103      	movs	r1, #3
    bc02:	6878      	ldr	r0, [r7, #4]
    bc04:	4b09      	ldr	r3, [pc, #36]	; (bc2c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    bc06:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    bc08:	687b      	ldr	r3, [r7, #4]
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    bc0e:	68fb      	ldr	r3, [r7, #12]
    bc10:	085b      	lsrs	r3, r3, #1
    bc12:	f003 0301 	and.w	r3, r3, #1
    bc16:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    bc18:	68fb      	ldr	r3, [r7, #12]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	bf14      	ite	ne
    bc1e:	2301      	movne	r3, #1
    bc20:	2300      	moveq	r3, #0
    bc22:	b2db      	uxtb	r3, r3
}
    bc24:	4618      	mov	r0, r3
    bc26:	3710      	adds	r7, #16
    bc28:	46bd      	mov	sp, r7
    bc2a:	bd80      	pop	{r7, pc}
    bc2c:	0000bae5 	.word	0x0000bae5

0000bc30 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bc30:	b580      	push	{r7, lr}
    bc32:	b082      	sub	sp, #8
    bc34:	af00      	add	r7, sp, #0
    bc36:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    bc38:	687b      	ldr	r3, [r7, #4]
    bc3a:	681b      	ldr	r3, [r3, #0]
    bc3c:	f023 0202 	bic.w	r2, r3, #2
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    bc44:	2103      	movs	r1, #3
    bc46:	6878      	ldr	r0, [r7, #4]
    bc48:	4b02      	ldr	r3, [pc, #8]	; (bc54 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    bc4a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    bc4c:	bf00      	nop
    bc4e:	3708      	adds	r7, #8
    bc50:	46bd      	mov	sp, r7
    bc52:	bd80      	pop	{r7, pc}
    bc54:	0000bae5 	.word	0x0000bae5

0000bc58 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    bc58:	b580      	push	{r7, lr}
    bc5a:	b084      	sub	sp, #16
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	6078      	str	r0, [r7, #4]
    bc60:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    bc62:	2103      	movs	r1, #3
    bc64:	6878      	ldr	r0, [r7, #4]
    bc66:	4b07      	ldr	r3, [pc, #28]	; (bc84 <hri_tcc_get_CTRLA_reg+0x2c>)
    bc68:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    bc6a:	687b      	ldr	r3, [r7, #4]
    bc6c:	681b      	ldr	r3, [r3, #0]
    bc6e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    bc70:	68fa      	ldr	r2, [r7, #12]
    bc72:	683b      	ldr	r3, [r7, #0]
    bc74:	4013      	ands	r3, r2
    bc76:	60fb      	str	r3, [r7, #12]
	return tmp;
    bc78:	68fb      	ldr	r3, [r7, #12]
}
    bc7a:	4618      	mov	r0, r3
    bc7c:	3710      	adds	r7, #16
    bc7e:	46bd      	mov	sp, r7
    bc80:	bd80      	pop	{r7, pc}
    bc82:	bf00      	nop
    bc84:	0000bae5 	.word	0x0000bae5

0000bc88 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    bc88:	b580      	push	{r7, lr}
    bc8a:	b082      	sub	sp, #8
    bc8c:	af00      	add	r7, sp, #0
    bc8e:	6078      	str	r0, [r7, #4]
    bc90:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    bc92:	687b      	ldr	r3, [r7, #4]
    bc94:	683a      	ldr	r2, [r7, #0]
    bc96:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    bc98:	2103      	movs	r1, #3
    bc9a:	6878      	ldr	r0, [r7, #4]
    bc9c:	4b02      	ldr	r3, [pc, #8]	; (bca8 <hri_tcc_write_CTRLA_reg+0x20>)
    bc9e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    bca0:	bf00      	nop
    bca2:	3708      	adds	r7, #8
    bca4:	46bd      	mov	sp, r7
    bca6:	bd80      	pop	{r7, pc}
    bca8:	0000bae5 	.word	0x0000bae5

0000bcac <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    bcac:	b480      	push	{r7}
    bcae:	b083      	sub	sp, #12
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	6078      	str	r0, [r7, #4]
    bcb4:	460b      	mov	r3, r1
    bcb6:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    bcb8:	687b      	ldr	r3, [r7, #4]
    bcba:	78fa      	ldrb	r2, [r7, #3]
    bcbc:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    bcbe:	bf00      	nop
    bcc0:	370c      	adds	r7, #12
    bcc2:	46bd      	mov	sp, r7
    bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcc8:	4770      	bx	lr

0000bcca <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    bcca:	b480      	push	{r7}
    bccc:	b083      	sub	sp, #12
    bcce:	af00      	add	r7, sp, #0
    bcd0:	6078      	str	r0, [r7, #4]
    bcd2:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	683a      	ldr	r2, [r7, #0]
    bcd8:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    bcda:	bf00      	nop
    bcdc:	370c      	adds	r7, #12
    bcde:	46bd      	mov	sp, r7
    bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bce4:	4770      	bx	lr
	...

0000bce8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    bce8:	b580      	push	{r7, lr}
    bcea:	b082      	sub	sp, #8
    bcec:	af00      	add	r7, sp, #0
    bcee:	6078      	str	r0, [r7, #4]
    bcf0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    bcf2:	687b      	ldr	r3, [r7, #4]
    bcf4:	683a      	ldr	r2, [r7, #0]
    bcf6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    bcf8:	2180      	movs	r1, #128	; 0x80
    bcfa:	6878      	ldr	r0, [r7, #4]
    bcfc:	4b02      	ldr	r3, [pc, #8]	; (bd08 <hri_tcc_write_PER_reg+0x20>)
    bcfe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    bd00:	bf00      	nop
    bd02:	3708      	adds	r7, #8
    bd04:	46bd      	mov	sp, r7
    bd06:	bd80      	pop	{r7, pc}
    bd08:	0000bae5 	.word	0x0000bae5

0000bd0c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	b082      	sub	sp, #8
    bd10:	af00      	add	r7, sp, #0
    bd12:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    bd14:	2180      	movs	r1, #128	; 0x80
    bd16:	6878      	ldr	r0, [r7, #4]
    bd18:	4b03      	ldr	r3, [pc, #12]	; (bd28 <hri_tcc_read_PER_reg+0x1c>)
    bd1a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    bd1c:	687b      	ldr	r3, [r7, #4]
    bd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    bd20:	4618      	mov	r0, r3
    bd22:	3708      	adds	r7, #8
    bd24:	46bd      	mov	sp, r7
    bd26:	bd80      	pop	{r7, pc}
    bd28:	0000bae5 	.word	0x0000bae5

0000bd2c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    bd2c:	b480      	push	{r7}
    bd2e:	b083      	sub	sp, #12
    bd30:	af00      	add	r7, sp, #0
    bd32:	6078      	str	r0, [r7, #4]
    bd34:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    bd36:	687b      	ldr	r3, [r7, #4]
    bd38:	4a09      	ldr	r2, [pc, #36]	; (bd60 <_tcc_init_irq_param+0x34>)
    bd3a:	4293      	cmp	r3, r2
    bd3c:	d102      	bne.n	bd44 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    bd3e:	4a09      	ldr	r2, [pc, #36]	; (bd64 <_tcc_init_irq_param+0x38>)
    bd40:	683b      	ldr	r3, [r7, #0]
    bd42:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    bd44:	687b      	ldr	r3, [r7, #4]
    bd46:	4a08      	ldr	r2, [pc, #32]	; (bd68 <_tcc_init_irq_param+0x3c>)
    bd48:	4293      	cmp	r3, r2
    bd4a:	d102      	bne.n	bd52 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    bd4c:	4a07      	ldr	r2, [pc, #28]	; (bd6c <_tcc_init_irq_param+0x40>)
    bd4e:	683b      	ldr	r3, [r7, #0]
    bd50:	6013      	str	r3, [r2, #0]
	}
}
    bd52:	bf00      	nop
    bd54:	370c      	adds	r7, #12
    bd56:	46bd      	mov	sp, r7
    bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd5c:	4770      	bx	lr
    bd5e:	bf00      	nop
    bd60:	41016000 	.word	0x41016000
    bd64:	20001928 	.word	0x20001928
    bd68:	41018000 	.word	0x41018000
    bd6c:	2000192c 	.word	0x2000192c

0000bd70 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    bd70:	b580      	push	{r7, lr}
    bd72:	b084      	sub	sp, #16
    bd74:	af00      	add	r7, sp, #0
    bd76:	6078      	str	r0, [r7, #4]
    bd78:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    bd7a:	6838      	ldr	r0, [r7, #0]
    bd7c:	4b33      	ldr	r3, [pc, #204]	; (be4c <_tcc_timer_init+0xdc>)
    bd7e:	4798      	blx	r3
    bd80:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    bd82:	68fb      	ldr	r3, [r7, #12]
    bd84:	2b00      	cmp	r3, #0
    bd86:	d102      	bne.n	bd8e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    bd88:	f06f 0309 	mvn.w	r3, #9
    bd8c:	e05a      	b.n	be44 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    bd8e:	687b      	ldr	r3, [r7, #4]
    bd90:	683a      	ldr	r2, [r7, #0]
    bd92:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    bd94:	2101      	movs	r1, #1
    bd96:	6838      	ldr	r0, [r7, #0]
    bd98:	4b2d      	ldr	r3, [pc, #180]	; (be50 <_tcc_timer_init+0xe0>)
    bd9a:	4798      	blx	r3
    bd9c:	4603      	mov	r3, r0
    bd9e:	f083 0301 	eor.w	r3, r3, #1
    bda2:	b2db      	uxtb	r3, r3
    bda4:	2b00      	cmp	r3, #0
    bda6:	d011      	beq.n	bdcc <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    bda8:	2102      	movs	r1, #2
    bdaa:	6838      	ldr	r0, [r7, #0]
    bdac:	4b29      	ldr	r3, [pc, #164]	; (be54 <_tcc_timer_init+0xe4>)
    bdae:	4798      	blx	r3
    bdb0:	4603      	mov	r3, r0
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d006      	beq.n	bdc4 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    bdb6:	6838      	ldr	r0, [r7, #0]
    bdb8:	4b27      	ldr	r3, [pc, #156]	; (be58 <_tcc_timer_init+0xe8>)
    bdba:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    bdbc:	2102      	movs	r1, #2
    bdbe:	6838      	ldr	r0, [r7, #0]
    bdc0:	4b26      	ldr	r3, [pc, #152]	; (be5c <_tcc_timer_init+0xec>)
    bdc2:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    bdc4:	2101      	movs	r1, #1
    bdc6:	6838      	ldr	r0, [r7, #0]
    bdc8:	4b25      	ldr	r3, [pc, #148]	; (be60 <_tcc_timer_init+0xf0>)
    bdca:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    bdcc:	2101      	movs	r1, #1
    bdce:	6838      	ldr	r0, [r7, #0]
    bdd0:	4b22      	ldr	r3, [pc, #136]	; (be5c <_tcc_timer_init+0xec>)
    bdd2:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    bdd4:	68fb      	ldr	r3, [r7, #12]
    bdd6:	689b      	ldr	r3, [r3, #8]
    bdd8:	4619      	mov	r1, r3
    bdda:	6838      	ldr	r0, [r7, #0]
    bddc:	4b20      	ldr	r3, [pc, #128]	; (be60 <_tcc_timer_init+0xf0>)
    bdde:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    bde0:	68fb      	ldr	r3, [r7, #12]
    bde2:	7b1b      	ldrb	r3, [r3, #12]
    bde4:	4619      	mov	r1, r3
    bde6:	6838      	ldr	r0, [r7, #0]
    bde8:	4b1e      	ldr	r3, [pc, #120]	; (be64 <_tcc_timer_init+0xf4>)
    bdea:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    bdec:	68fb      	ldr	r3, [r7, #12]
    bdee:	7b5b      	ldrb	r3, [r3, #13]
    bdf0:	4619      	mov	r1, r3
    bdf2:	6838      	ldr	r0, [r7, #0]
    bdf4:	4b1c      	ldr	r3, [pc, #112]	; (be68 <_tcc_timer_init+0xf8>)
    bdf6:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    bdf8:	68fb      	ldr	r3, [r7, #12]
    bdfa:	691b      	ldr	r3, [r3, #16]
    bdfc:	4619      	mov	r1, r3
    bdfe:	6838      	ldr	r0, [r7, #0]
    be00:	4b1a      	ldr	r3, [pc, #104]	; (be6c <_tcc_timer_init+0xfc>)
    be02:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    be04:	68fb      	ldr	r3, [r7, #12]
    be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    be08:	4619      	mov	r1, r3
    be0a:	6838      	ldr	r0, [r7, #0]
    be0c:	4b18      	ldr	r3, [pc, #96]	; (be70 <_tcc_timer_init+0x100>)
    be0e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    be10:	6838      	ldr	r0, [r7, #0]
    be12:	4b18      	ldr	r3, [pc, #96]	; (be74 <_tcc_timer_init+0x104>)
    be14:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    be16:	6879      	ldr	r1, [r7, #4]
    be18:	6838      	ldr	r0, [r7, #0]
    be1a:	4b17      	ldr	r3, [pc, #92]	; (be78 <_tcc_timer_init+0x108>)
    be1c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    be1e:	68fb      	ldr	r3, [r7, #12]
    be20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    be24:	4618      	mov	r0, r3
    be26:	4b15      	ldr	r3, [pc, #84]	; (be7c <_tcc_timer_init+0x10c>)
    be28:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    be2a:	68fb      	ldr	r3, [r7, #12]
    be2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    be30:	4618      	mov	r0, r3
    be32:	4b13      	ldr	r3, [pc, #76]	; (be80 <_tcc_timer_init+0x110>)
    be34:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    be36:	68fb      	ldr	r3, [r7, #12]
    be38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    be3c:	4618      	mov	r0, r3
    be3e:	4b11      	ldr	r3, [pc, #68]	; (be84 <_tcc_timer_init+0x114>)
    be40:	4798      	blx	r3

	return ERR_NONE;
    be42:	2300      	movs	r3, #0
}
    be44:	4618      	mov	r0, r3
    be46:	3710      	adds	r7, #16
    be48:	46bd      	mov	sp, r7
    be4a:	bd80      	pop	{r7, pc}
    be4c:	0000c039 	.word	0x0000c039
    be50:	0000bb09 	.word	0x0000bb09
    be54:	0000bc59 	.word	0x0000bc59
    be58:	0000bc31 	.word	0x0000bc31
    be5c:	0000bae5 	.word	0x0000bae5
    be60:	0000bc89 	.word	0x0000bc89
    be64:	0000bb71 	.word	0x0000bb71
    be68:	0000bcad 	.word	0x0000bcad
    be6c:	0000bccb 	.word	0x0000bccb
    be70:	0000bce9 	.word	0x0000bce9
    be74:	0000bb8f 	.word	0x0000bb8f
    be78:	0000bd2d 	.word	0x0000bd2d
    be7c:	0000ba65 	.word	0x0000ba65
    be80:	0000baa9 	.word	0x0000baa9
    be84:	0000ba29 	.word	0x0000ba29

0000be88 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    be88:	b580      	push	{r7, lr}
    be8a:	b084      	sub	sp, #16
    be8c:	af00      	add	r7, sp, #0
    be8e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	68db      	ldr	r3, [r3, #12]
    be94:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    be96:	68f8      	ldr	r0, [r7, #12]
    be98:	4b0a      	ldr	r3, [pc, #40]	; (bec4 <_tcc_timer_deinit+0x3c>)
    be9a:	4798      	blx	r3
    be9c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    be9e:	68bb      	ldr	r3, [r7, #8]
    bea0:	2b00      	cmp	r3, #0
    bea2:	d00b      	beq.n	bebc <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    bea4:	68bb      	ldr	r3, [r7, #8]
    bea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    beaa:	4618      	mov	r0, r3
    beac:	4b06      	ldr	r3, [pc, #24]	; (bec8 <_tcc_timer_deinit+0x40>)
    beae:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    beb0:	68f8      	ldr	r0, [r7, #12]
    beb2:	4b06      	ldr	r3, [pc, #24]	; (becc <_tcc_timer_deinit+0x44>)
    beb4:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    beb6:	68f8      	ldr	r0, [r7, #12]
    beb8:	4b05      	ldr	r3, [pc, #20]	; (bed0 <_tcc_timer_deinit+0x48>)
    beba:	4798      	blx	r3
	}
}
    bebc:	bf00      	nop
    bebe:	3710      	adds	r7, #16
    bec0:	46bd      	mov	sp, r7
    bec2:	bd80      	pop	{r7, pc}
    bec4:	0000c039 	.word	0x0000c039
    bec8:	0000ba65 	.word	0x0000ba65
    becc:	0000bc31 	.word	0x0000bc31
    bed0:	0000bba9 	.word	0x0000bba9

0000bed4 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b082      	sub	sp, #8
    bed8:	af00      	add	r7, sp, #0
    beda:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	68db      	ldr	r3, [r3, #12]
    bee0:	4618      	mov	r0, r3
    bee2:	4b03      	ldr	r3, [pc, #12]	; (bef0 <_tcc_timer_start+0x1c>)
    bee4:	4798      	blx	r3
}
    bee6:	bf00      	nop
    bee8:	3708      	adds	r7, #8
    beea:	46bd      	mov	sp, r7
    beec:	bd80      	pop	{r7, pc}
    beee:	bf00      	nop
    bef0:	0000bbd1 	.word	0x0000bbd1

0000bef4 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    bef4:	b580      	push	{r7, lr}
    bef6:	b082      	sub	sp, #8
    bef8:	af00      	add	r7, sp, #0
    befa:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    befc:	687b      	ldr	r3, [r7, #4]
    befe:	68db      	ldr	r3, [r3, #12]
    bf00:	4618      	mov	r0, r3
    bf02:	4b03      	ldr	r3, [pc, #12]	; (bf10 <_tcc_timer_stop+0x1c>)
    bf04:	4798      	blx	r3
}
    bf06:	bf00      	nop
    bf08:	3708      	adds	r7, #8
    bf0a:	46bd      	mov	sp, r7
    bf0c:	bd80      	pop	{r7, pc}
    bf0e:	bf00      	nop
    bf10:	0000bc31 	.word	0x0000bc31

0000bf14 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    bf14:	b580      	push	{r7, lr}
    bf16:	b082      	sub	sp, #8
    bf18:	af00      	add	r7, sp, #0
    bf1a:	6078      	str	r0, [r7, #4]
    bf1c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    bf1e:	687b      	ldr	r3, [r7, #4]
    bf20:	68db      	ldr	r3, [r3, #12]
    bf22:	6839      	ldr	r1, [r7, #0]
    bf24:	4618      	mov	r0, r3
    bf26:	4b03      	ldr	r3, [pc, #12]	; (bf34 <_tcc_timer_set_period+0x20>)
    bf28:	4798      	blx	r3
}
    bf2a:	bf00      	nop
    bf2c:	3708      	adds	r7, #8
    bf2e:	46bd      	mov	sp, r7
    bf30:	bd80      	pop	{r7, pc}
    bf32:	bf00      	nop
    bf34:	0000bce9 	.word	0x0000bce9

0000bf38 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    bf38:	b580      	push	{r7, lr}
    bf3a:	b082      	sub	sp, #8
    bf3c:	af00      	add	r7, sp, #0
    bf3e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    bf40:	687b      	ldr	r3, [r7, #4]
    bf42:	68db      	ldr	r3, [r3, #12]
    bf44:	4618      	mov	r0, r3
    bf46:	4b03      	ldr	r3, [pc, #12]	; (bf54 <_tcc_timer_get_period+0x1c>)
    bf48:	4798      	blx	r3
    bf4a:	4603      	mov	r3, r0
}
    bf4c:	4618      	mov	r0, r3
    bf4e:	3708      	adds	r7, #8
    bf50:	46bd      	mov	sp, r7
    bf52:	bd80      	pop	{r7, pc}
    bf54:	0000bd0d 	.word	0x0000bd0d

0000bf58 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    bf58:	b580      	push	{r7, lr}
    bf5a:	b082      	sub	sp, #8
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	68db      	ldr	r3, [r3, #12]
    bf64:	4618      	mov	r0, r3
    bf66:	4b03      	ldr	r3, [pc, #12]	; (bf74 <_tcc_timer_is_started+0x1c>)
    bf68:	4798      	blx	r3
    bf6a:	4603      	mov	r3, r0
}
    bf6c:	4618      	mov	r0, r3
    bf6e:	3708      	adds	r7, #8
    bf70:	46bd      	mov	sp, r7
    bf72:	bd80      	pop	{r7, pc}
    bf74:	0000bbf9 	.word	0x0000bbf9

0000bf78 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    bf78:	b480      	push	{r7}
    bf7a:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    bf7c:	4b02      	ldr	r3, [pc, #8]	; (bf88 <_tcc_get_timer+0x10>)
}
    bf7e:	4618      	mov	r0, r3
    bf80:	46bd      	mov	sp, r7
    bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf86:	4770      	bx	lr
    bf88:	200000c4 	.word	0x200000c4

0000bf8c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    bf8c:	b580      	push	{r7, lr}
    bf8e:	b084      	sub	sp, #16
    bf90:	af00      	add	r7, sp, #0
    bf92:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    bf94:	687b      	ldr	r3, [r7, #4]
    bf96:	68db      	ldr	r3, [r3, #12]
    bf98:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    bf9a:	68f8      	ldr	r0, [r7, #12]
    bf9c:	4b08      	ldr	r3, [pc, #32]	; (bfc0 <_tcc_timer_set_irq+0x34>)
    bf9e:	4798      	blx	r3
    bfa0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    bfa2:	68bb      	ldr	r3, [r7, #8]
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d006      	beq.n	bfb6 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    bfa8:	68bb      	ldr	r3, [r7, #8]
    bfaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    bfae:	b2db      	uxtb	r3, r3
    bfb0:	4618      	mov	r0, r3
    bfb2:	4b04      	ldr	r3, [pc, #16]	; (bfc4 <_tcc_timer_set_irq+0x38>)
    bfb4:	4798      	blx	r3
	}
}
    bfb6:	bf00      	nop
    bfb8:	3710      	adds	r7, #16
    bfba:	46bd      	mov	sp, r7
    bfbc:	bd80      	pop	{r7, pc}
    bfbe:	bf00      	nop
    bfc0:	0000c039 	.word	0x0000c039
    bfc4:	00008359 	.word	0x00008359

0000bfc8 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    bfc8:	b580      	push	{r7, lr}
    bfca:	b084      	sub	sp, #16
    bfcc:	af00      	add	r7, sp, #0
    bfce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    bfd0:	687b      	ldr	r3, [r7, #4]
    bfd2:	68db      	ldr	r3, [r3, #12]
    bfd4:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    bfd6:	68f8      	ldr	r0, [r7, #12]
    bfd8:	4b07      	ldr	r3, [pc, #28]	; (bff8 <tcc_interrupt_handler+0x30>)
    bfda:	4798      	blx	r3
    bfdc:	4603      	mov	r3, r0
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d006      	beq.n	bff0 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    bfe2:	68f8      	ldr	r0, [r7, #12]
    bfe4:	4b05      	ldr	r3, [pc, #20]	; (bffc <tcc_interrupt_handler+0x34>)
    bfe6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    bfe8:	687b      	ldr	r3, [r7, #4]
    bfea:	681b      	ldr	r3, [r3, #0]
    bfec:	6878      	ldr	r0, [r7, #4]
    bfee:	4798      	blx	r3
	}
}
    bff0:	bf00      	nop
    bff2:	3710      	adds	r7, #16
    bff4:	46bd      	mov	sp, r7
    bff6:	bd80      	pop	{r7, pc}
    bff8:	0000bb31 	.word	0x0000bb31
    bffc:	0000bb57 	.word	0x0000bb57

0000c000 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    c000:	b580      	push	{r7, lr}
    c002:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    c004:	4b03      	ldr	r3, [pc, #12]	; (c014 <TCC0_0_Handler+0x14>)
    c006:	681b      	ldr	r3, [r3, #0]
    c008:	4618      	mov	r0, r3
    c00a:	4b03      	ldr	r3, [pc, #12]	; (c018 <TCC0_0_Handler+0x18>)
    c00c:	4798      	blx	r3
}
    c00e:	bf00      	nop
    c010:	bd80      	pop	{r7, pc}
    c012:	bf00      	nop
    c014:	20001928 	.word	0x20001928
    c018:	0000bfc9 	.word	0x0000bfc9

0000c01c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    c01c:	b580      	push	{r7, lr}
    c01e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    c020:	4b03      	ldr	r3, [pc, #12]	; (c030 <TCC1_0_Handler+0x14>)
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	4618      	mov	r0, r3
    c026:	4b03      	ldr	r3, [pc, #12]	; (c034 <TCC1_0_Handler+0x18>)
    c028:	4798      	blx	r3
}
    c02a:	bf00      	nop
    c02c:	bd80      	pop	{r7, pc}
    c02e:	bf00      	nop
    c030:	2000192c 	.word	0x2000192c
    c034:	0000bfc9 	.word	0x0000bfc9

0000c038 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    c038:	b480      	push	{r7}
    c03a:	b085      	sub	sp, #20
    c03c:	af00      	add	r7, sp, #0
    c03e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    c040:	2300      	movs	r3, #0
    c042:	73fb      	strb	r3, [r7, #15]
    c044:	e015      	b.n	c072 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    c046:	7bfa      	ldrb	r2, [r7, #15]
    c048:	490f      	ldr	r1, [pc, #60]	; (c088 <_get_tcc_cfg+0x50>)
    c04a:	4613      	mov	r3, r2
    c04c:	005b      	lsls	r3, r3, #1
    c04e:	4413      	add	r3, r2
    c050:	011b      	lsls	r3, r3, #4
    c052:	440b      	add	r3, r1
    c054:	681a      	ldr	r2, [r3, #0]
    c056:	687b      	ldr	r3, [r7, #4]
    c058:	429a      	cmp	r2, r3
    c05a:	d107      	bne.n	c06c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    c05c:	7bfa      	ldrb	r2, [r7, #15]
    c05e:	4613      	mov	r3, r2
    c060:	005b      	lsls	r3, r3, #1
    c062:	4413      	add	r3, r2
    c064:	011b      	lsls	r3, r3, #4
    c066:	4a08      	ldr	r2, [pc, #32]	; (c088 <_get_tcc_cfg+0x50>)
    c068:	4413      	add	r3, r2
    c06a:	e006      	b.n	c07a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    c06c:	7bfb      	ldrb	r3, [r7, #15]
    c06e:	3301      	adds	r3, #1
    c070:	73fb      	strb	r3, [r7, #15]
    c072:	7bfb      	ldrb	r3, [r7, #15]
    c074:	2b01      	cmp	r3, #1
    c076:	d9e6      	bls.n	c046 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    c078:	2300      	movs	r3, #0
}
    c07a:	4618      	mov	r0, r3
    c07c:	3714      	adds	r7, #20
    c07e:	46bd      	mov	sp, r7
    c080:	f85d 7b04 	ldr.w	r7, [sp], #4
    c084:	4770      	bx	lr
    c086:	bf00      	nop
    c088:	20000064 	.word	0x20000064

0000c08c <__NVIC_EnableIRQ>:
{
    c08c:	b480      	push	{r7}
    c08e:	b083      	sub	sp, #12
    c090:	af00      	add	r7, sp, #0
    c092:	4603      	mov	r3, r0
    c094:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c09a:	2b00      	cmp	r3, #0
    c09c:	db0b      	blt.n	c0b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c09e:	4909      	ldr	r1, [pc, #36]	; (c0c4 <__NVIC_EnableIRQ+0x38>)
    c0a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0a4:	095b      	lsrs	r3, r3, #5
    c0a6:	88fa      	ldrh	r2, [r7, #6]
    c0a8:	f002 021f 	and.w	r2, r2, #31
    c0ac:	2001      	movs	r0, #1
    c0ae:	fa00 f202 	lsl.w	r2, r0, r2
    c0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0b6:	bf00      	nop
    c0b8:	370c      	adds	r7, #12
    c0ba:	46bd      	mov	sp, r7
    c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0c0:	4770      	bx	lr
    c0c2:	bf00      	nop
    c0c4:	e000e100 	.word	0xe000e100

0000c0c8 <__NVIC_DisableIRQ>:
{
    c0c8:	b480      	push	{r7}
    c0ca:	b083      	sub	sp, #12
    c0cc:	af00      	add	r7, sp, #0
    c0ce:	4603      	mov	r3, r0
    c0d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c0d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	db10      	blt.n	c0fc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c0da:	490b      	ldr	r1, [pc, #44]	; (c108 <__NVIC_DisableIRQ+0x40>)
    c0dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0e0:	095b      	lsrs	r3, r3, #5
    c0e2:	88fa      	ldrh	r2, [r7, #6]
    c0e4:	f002 021f 	and.w	r2, r2, #31
    c0e8:	2001      	movs	r0, #1
    c0ea:	fa00 f202 	lsl.w	r2, r0, r2
    c0ee:	3320      	adds	r3, #32
    c0f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c0f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c0f8:	f3bf 8f6f 	isb	sy
}
    c0fc:	bf00      	nop
    c0fe:	370c      	adds	r7, #12
    c100:	46bd      	mov	sp, r7
    c102:	f85d 7b04 	ldr.w	r7, [sp], #4
    c106:	4770      	bx	lr
    c108:	e000e100 	.word	0xe000e100

0000c10c <__NVIC_ClearPendingIRQ>:
{
    c10c:	b480      	push	{r7}
    c10e:	b083      	sub	sp, #12
    c110:	af00      	add	r7, sp, #0
    c112:	4603      	mov	r3, r0
    c114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c11a:	2b00      	cmp	r3, #0
    c11c:	db0c      	blt.n	c138 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c11e:	4909      	ldr	r1, [pc, #36]	; (c144 <__NVIC_ClearPendingIRQ+0x38>)
    c120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c124:	095b      	lsrs	r3, r3, #5
    c126:	88fa      	ldrh	r2, [r7, #6]
    c128:	f002 021f 	and.w	r2, r2, #31
    c12c:	2001      	movs	r0, #1
    c12e:	fa00 f202 	lsl.w	r2, r0, r2
    c132:	3360      	adds	r3, #96	; 0x60
    c134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c138:	bf00      	nop
    c13a:	370c      	adds	r7, #12
    c13c:	46bd      	mov	sp, r7
    c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c142:	4770      	bx	lr
    c144:	e000e100 	.word	0xe000e100

0000c148 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    c148:	b480      	push	{r7}
    c14a:	b083      	sub	sp, #12
    c14c:	af00      	add	r7, sp, #0
    c14e:	6078      	str	r0, [r7, #4]
    c150:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c152:	bf00      	nop
    c154:	687b      	ldr	r3, [r7, #4]
    c156:	691a      	ldr	r2, [r3, #16]
    c158:	683b      	ldr	r3, [r7, #0]
    c15a:	4013      	ands	r3, r2
    c15c:	2b00      	cmp	r3, #0
    c15e:	d1f9      	bne.n	c154 <hri_tc_wait_for_sync+0xc>
	};
}
    c160:	bf00      	nop
    c162:	370c      	adds	r7, #12
    c164:	46bd      	mov	sp, r7
    c166:	f85d 7b04 	ldr.w	r7, [sp], #4
    c16a:	4770      	bx	lr

0000c16c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    c16c:	b480      	push	{r7}
    c16e:	b083      	sub	sp, #12
    c170:	af00      	add	r7, sp, #0
    c172:	6078      	str	r0, [r7, #4]
    c174:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    c176:	687b      	ldr	r3, [r7, #4]
    c178:	691a      	ldr	r2, [r3, #16]
    c17a:	683b      	ldr	r3, [r7, #0]
    c17c:	4013      	ands	r3, r2
    c17e:	2b00      	cmp	r3, #0
    c180:	bf14      	ite	ne
    c182:	2301      	movne	r3, #1
    c184:	2300      	moveq	r3, #0
    c186:	b2db      	uxtb	r3, r3
}
    c188:	4618      	mov	r0, r3
    c18a:	370c      	adds	r7, #12
    c18c:	46bd      	mov	sp, r7
    c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c192:	4770      	bx	lr

0000c194 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    c194:	b480      	push	{r7}
    c196:	b083      	sub	sp, #12
    c198:	af00      	add	r7, sp, #0
    c19a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	7a9b      	ldrb	r3, [r3, #10]
    c1a0:	b2db      	uxtb	r3, r3
    c1a2:	f003 0301 	and.w	r3, r3, #1
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	bf14      	ite	ne
    c1aa:	2301      	movne	r3, #1
    c1ac:	2300      	moveq	r3, #0
    c1ae:	b2db      	uxtb	r3, r3
}
    c1b0:	4618      	mov	r0, r3
    c1b2:	370c      	adds	r7, #12
    c1b4:	46bd      	mov	sp, r7
    c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ba:	4770      	bx	lr

0000c1bc <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    c1bc:	b480      	push	{r7}
    c1be:	b083      	sub	sp, #12
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	2201      	movs	r2, #1
    c1c8:	729a      	strb	r2, [r3, #10]
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr

0000c1d6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    c1d6:	b480      	push	{r7}
    c1d8:	b083      	sub	sp, #12
    c1da:	af00      	add	r7, sp, #0
    c1dc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    c1de:	687b      	ldr	r3, [r7, #4]
    c1e0:	2202      	movs	r2, #2
    c1e2:	729a      	strb	r2, [r3, #10]
}
    c1e4:	bf00      	nop
    c1e6:	370c      	adds	r7, #12
    c1e8:	46bd      	mov	sp, r7
    c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ee:	4770      	bx	lr

0000c1f0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    c1f0:	b480      	push	{r7}
    c1f2:	b083      	sub	sp, #12
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	2201      	movs	r2, #1
    c1fc:	725a      	strb	r2, [r3, #9]
}
    c1fe:	bf00      	nop
    c200:	370c      	adds	r7, #12
    c202:	46bd      	mov	sp, r7
    c204:	f85d 7b04 	ldr.w	r7, [sp], #4
    c208:	4770      	bx	lr

0000c20a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    c20a:	b480      	push	{r7}
    c20c:	b083      	sub	sp, #12
    c20e:	af00      	add	r7, sp, #0
    c210:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    c212:	687b      	ldr	r3, [r7, #4]
    c214:	7a5b      	ldrb	r3, [r3, #9]
    c216:	b2db      	uxtb	r3, r3
    c218:	085b      	lsrs	r3, r3, #1
    c21a:	f003 0301 	and.w	r3, r3, #1
    c21e:	2b00      	cmp	r3, #0
    c220:	bf14      	ite	ne
    c222:	2301      	movne	r3, #1
    c224:	2300      	moveq	r3, #0
    c226:	b2db      	uxtb	r3, r3
}
    c228:	4618      	mov	r0, r3
    c22a:	370c      	adds	r7, #12
    c22c:	46bd      	mov	sp, r7
    c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c232:	4770      	bx	lr

0000c234 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c234:	b580      	push	{r7, lr}
    c236:	b082      	sub	sp, #8
    c238:	af00      	add	r7, sp, #0
    c23a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    c23c:	687b      	ldr	r3, [r7, #4]
    c23e:	681b      	ldr	r3, [r3, #0]
    c240:	f043 0201 	orr.w	r2, r3, #1
    c244:	687b      	ldr	r3, [r7, #4]
    c246:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    c248:	2101      	movs	r1, #1
    c24a:	6878      	ldr	r0, [r7, #4]
    c24c:	4b02      	ldr	r3, [pc, #8]	; (c258 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    c24e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c250:	bf00      	nop
    c252:	3708      	adds	r7, #8
    c254:	46bd      	mov	sp, r7
    c256:	bd80      	pop	{r7, pc}
    c258:	0000c149 	.word	0x0000c149

0000c25c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c25c:	b580      	push	{r7, lr}
    c25e:	b082      	sub	sp, #8
    c260:	af00      	add	r7, sp, #0
    c262:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	681b      	ldr	r3, [r3, #0]
    c268:	f043 0202 	orr.w	r2, r3, #2
    c26c:	687b      	ldr	r3, [r7, #4]
    c26e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c270:	2103      	movs	r1, #3
    c272:	6878      	ldr	r0, [r7, #4]
    c274:	4b02      	ldr	r3, [pc, #8]	; (c280 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    c276:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c278:	bf00      	nop
    c27a:	3708      	adds	r7, #8
    c27c:	46bd      	mov	sp, r7
    c27e:	bd80      	pop	{r7, pc}
    c280:	0000c149 	.word	0x0000c149

0000c284 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c284:	b580      	push	{r7, lr}
    c286:	b084      	sub	sp, #16
    c288:	af00      	add	r7, sp, #0
    c28a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c28c:	2103      	movs	r1, #3
    c28e:	6878      	ldr	r0, [r7, #4]
    c290:	4b09      	ldr	r3, [pc, #36]	; (c2b8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    c292:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c294:	687b      	ldr	r3, [r7, #4]
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    c29a:	68fb      	ldr	r3, [r7, #12]
    c29c:	085b      	lsrs	r3, r3, #1
    c29e:	f003 0301 	and.w	r3, r3, #1
    c2a2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c2a4:	68fb      	ldr	r3, [r7, #12]
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	bf14      	ite	ne
    c2aa:	2301      	movne	r3, #1
    c2ac:	2300      	moveq	r3, #0
    c2ae:	b2db      	uxtb	r3, r3
}
    c2b0:	4618      	mov	r0, r3
    c2b2:	3710      	adds	r7, #16
    c2b4:	46bd      	mov	sp, r7
    c2b6:	bd80      	pop	{r7, pc}
    c2b8:	0000c149 	.word	0x0000c149

0000c2bc <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c2bc:	b580      	push	{r7, lr}
    c2be:	b082      	sub	sp, #8
    c2c0:	af00      	add	r7, sp, #0
    c2c2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    c2c4:	687b      	ldr	r3, [r7, #4]
    c2c6:	681b      	ldr	r3, [r3, #0]
    c2c8:	f023 0202 	bic.w	r2, r3, #2
    c2cc:	687b      	ldr	r3, [r7, #4]
    c2ce:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c2d0:	2103      	movs	r1, #3
    c2d2:	6878      	ldr	r0, [r7, #4]
    c2d4:	4b02      	ldr	r3, [pc, #8]	; (c2e0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    c2d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c2d8:	bf00      	nop
    c2da:	3708      	adds	r7, #8
    c2dc:	46bd      	mov	sp, r7
    c2de:	bd80      	pop	{r7, pc}
    c2e0:	0000c149 	.word	0x0000c149

0000c2e4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    c2e4:	b480      	push	{r7}
    c2e6:	b085      	sub	sp, #20
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c2ec:	687b      	ldr	r3, [r7, #4]
    c2ee:	681b      	ldr	r3, [r3, #0]
    c2f0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    c2f2:	68fb      	ldr	r3, [r7, #12]
    c2f4:	089b      	lsrs	r3, r3, #2
    c2f6:	f003 0303 	and.w	r3, r3, #3
    c2fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    c2fc:	68fb      	ldr	r3, [r7, #12]
}
    c2fe:	4618      	mov	r0, r3
    c300:	3714      	adds	r7, #20
    c302:	46bd      	mov	sp, r7
    c304:	f85d 7b04 	ldr.w	r7, [sp], #4
    c308:	4770      	bx	lr
	...

0000c30c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b084      	sub	sp, #16
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
    c314:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c316:	2103      	movs	r1, #3
    c318:	6878      	ldr	r0, [r7, #4]
    c31a:	4b07      	ldr	r3, [pc, #28]	; (c338 <hri_tc_get_CTRLA_reg+0x2c>)
    c31c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c31e:	687b      	ldr	r3, [r7, #4]
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c324:	68fa      	ldr	r2, [r7, #12]
    c326:	683b      	ldr	r3, [r7, #0]
    c328:	4013      	ands	r3, r2
    c32a:	60fb      	str	r3, [r7, #12]
	return tmp;
    c32c:	68fb      	ldr	r3, [r7, #12]
}
    c32e:	4618      	mov	r0, r3
    c330:	3710      	adds	r7, #16
    c332:	46bd      	mov	sp, r7
    c334:	bd80      	pop	{r7, pc}
    c336:	bf00      	nop
    c338:	0000c149 	.word	0x0000c149

0000c33c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    c33c:	b580      	push	{r7, lr}
    c33e:	b082      	sub	sp, #8
    c340:	af00      	add	r7, sp, #0
    c342:	6078      	str	r0, [r7, #4]
    c344:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    c346:	687b      	ldr	r3, [r7, #4]
    c348:	683a      	ldr	r2, [r7, #0]
    c34a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c34c:	2103      	movs	r1, #3
    c34e:	6878      	ldr	r0, [r7, #4]
    c350:	4b02      	ldr	r3, [pc, #8]	; (c35c <hri_tc_write_CTRLA_reg+0x20>)
    c352:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c354:	bf00      	nop
    c356:	3708      	adds	r7, #8
    c358:	46bd      	mov	sp, r7
    c35a:	bd80      	pop	{r7, pc}
    c35c:	0000c149 	.word	0x0000c149

0000c360 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    c360:	b480      	push	{r7}
    c362:	b083      	sub	sp, #12
    c364:	af00      	add	r7, sp, #0
    c366:	6078      	str	r0, [r7, #4]
    c368:	460b      	mov	r3, r1
    c36a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    c36c:	687b      	ldr	r3, [r7, #4]
    c36e:	887a      	ldrh	r2, [r7, #2]
    c370:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    c372:	bf00      	nop
    c374:	370c      	adds	r7, #12
    c376:	46bd      	mov	sp, r7
    c378:	f85d 7b04 	ldr.w	r7, [sp], #4
    c37c:	4770      	bx	lr

0000c37e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    c37e:	b480      	push	{r7}
    c380:	b083      	sub	sp, #12
    c382:	af00      	add	r7, sp, #0
    c384:	6078      	str	r0, [r7, #4]
    c386:	460b      	mov	r3, r1
    c388:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    c38a:	687b      	ldr	r3, [r7, #4]
    c38c:	78fa      	ldrb	r2, [r7, #3]
    c38e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    c390:	bf00      	nop
    c392:	370c      	adds	r7, #12
    c394:	46bd      	mov	sp, r7
    c396:	f85d 7b04 	ldr.w	r7, [sp], #4
    c39a:	4770      	bx	lr

0000c39c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    c39c:	b480      	push	{r7}
    c39e:	b083      	sub	sp, #12
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	6078      	str	r0, [r7, #4]
    c3a4:	460b      	mov	r3, r1
    c3a6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    c3a8:	687b      	ldr	r3, [r7, #4]
    c3aa:	78fa      	ldrb	r2, [r7, #3]
    c3ac:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    c3ae:	bf00      	nop
    c3b0:	370c      	adds	r7, #12
    c3b2:	46bd      	mov	sp, r7
    c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3b8:	4770      	bx	lr
	...

0000c3bc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    c3bc:	b580      	push	{r7, lr}
    c3be:	b082      	sub	sp, #8
    c3c0:	af00      	add	r7, sp, #0
    c3c2:	6078      	str	r0, [r7, #4]
    c3c4:	460b      	mov	r3, r1
    c3c6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    c3c8:	687b      	ldr	r3, [r7, #4]
    c3ca:	78fa      	ldrb	r2, [r7, #3]
    c3cc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    c3ce:	2120      	movs	r1, #32
    c3d0:	6878      	ldr	r0, [r7, #4]
    c3d2:	4b03      	ldr	r3, [pc, #12]	; (c3e0 <hri_tccount8_write_PER_reg+0x24>)
    c3d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c3d6:	bf00      	nop
    c3d8:	3708      	adds	r7, #8
    c3da:	46bd      	mov	sp, r7
    c3dc:	bd80      	pop	{r7, pc}
    c3de:	bf00      	nop
    c3e0:	0000c149 	.word	0x0000c149

0000c3e4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    c3e4:	b580      	push	{r7, lr}
    c3e6:	b082      	sub	sp, #8
    c3e8:	af00      	add	r7, sp, #0
    c3ea:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    c3ec:	2120      	movs	r1, #32
    c3ee:	6878      	ldr	r0, [r7, #4]
    c3f0:	4b04      	ldr	r3, [pc, #16]	; (c404 <hri_tccount8_read_PER_reg+0x20>)
    c3f2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    c3f4:	687b      	ldr	r3, [r7, #4]
    c3f6:	7edb      	ldrb	r3, [r3, #27]
    c3f8:	b2db      	uxtb	r3, r3
}
    c3fa:	4618      	mov	r0, r3
    c3fc:	3708      	adds	r7, #8
    c3fe:	46bd      	mov	sp, r7
    c400:	bd80      	pop	{r7, pc}
    c402:	bf00      	nop
    c404:	0000c149 	.word	0x0000c149

0000c408 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    c408:	b580      	push	{r7, lr}
    c40a:	b082      	sub	sp, #8
    c40c:	af00      	add	r7, sp, #0
    c40e:	6078      	str	r0, [r7, #4]
    c410:	460b      	mov	r3, r1
    c412:	70fb      	strb	r3, [r7, #3]
    c414:	4613      	mov	r3, r2
    c416:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    c418:	78fb      	ldrb	r3, [r7, #3]
    c41a:	687a      	ldr	r2, [r7, #4]
    c41c:	4413      	add	r3, r2
    c41e:	78ba      	ldrb	r2, [r7, #2]
    c420:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    c422:	21c0      	movs	r1, #192	; 0xc0
    c424:	6878      	ldr	r0, [r7, #4]
    c426:	4b03      	ldr	r3, [pc, #12]	; (c434 <hri_tccount8_write_CC_reg+0x2c>)
    c428:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c42a:	bf00      	nop
    c42c:	3708      	adds	r7, #8
    c42e:	46bd      	mov	sp, r7
    c430:	bd80      	pop	{r7, pc}
    c432:	bf00      	nop
    c434:	0000c149 	.word	0x0000c149

0000c438 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    c438:	b580      	push	{r7, lr}
    c43a:	b082      	sub	sp, #8
    c43c:	af00      	add	r7, sp, #0
    c43e:	6078      	str	r0, [r7, #4]
    c440:	460b      	mov	r3, r1
    c442:	70fb      	strb	r3, [r7, #3]
    c444:	4613      	mov	r3, r2
    c446:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    c448:	78fb      	ldrb	r3, [r7, #3]
    c44a:	687a      	ldr	r2, [r7, #4]
    c44c:	330c      	adds	r3, #12
    c44e:	005b      	lsls	r3, r3, #1
    c450:	4413      	add	r3, r2
    c452:	883a      	ldrh	r2, [r7, #0]
    c454:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    c456:	21c0      	movs	r1, #192	; 0xc0
    c458:	6878      	ldr	r0, [r7, #4]
    c45a:	4b03      	ldr	r3, [pc, #12]	; (c468 <hri_tccount16_write_CC_reg+0x30>)
    c45c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c45e:	bf00      	nop
    c460:	3708      	adds	r7, #8
    c462:	46bd      	mov	sp, r7
    c464:	bd80      	pop	{r7, pc}
    c466:	bf00      	nop
    c468:	0000c149 	.word	0x0000c149

0000c46c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    c46c:	b580      	push	{r7, lr}
    c46e:	b082      	sub	sp, #8
    c470:	af00      	add	r7, sp, #0
    c472:	6078      	str	r0, [r7, #4]
    c474:	460b      	mov	r3, r1
    c476:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    c478:	21c0      	movs	r1, #192	; 0xc0
    c47a:	6878      	ldr	r0, [r7, #4]
    c47c:	4b06      	ldr	r3, [pc, #24]	; (c498 <hri_tccount16_read_CC_reg+0x2c>)
    c47e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    c480:	78fb      	ldrb	r3, [r7, #3]
    c482:	687a      	ldr	r2, [r7, #4]
    c484:	330c      	adds	r3, #12
    c486:	005b      	lsls	r3, r3, #1
    c488:	4413      	add	r3, r2
    c48a:	889b      	ldrh	r3, [r3, #4]
    c48c:	b29b      	uxth	r3, r3
}
    c48e:	4618      	mov	r0, r3
    c490:	3708      	adds	r7, #8
    c492:	46bd      	mov	sp, r7
    c494:	bd80      	pop	{r7, pc}
    c496:	bf00      	nop
    c498:	0000c149 	.word	0x0000c149

0000c49c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    c49c:	b580      	push	{r7, lr}
    c49e:	b084      	sub	sp, #16
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	60f8      	str	r0, [r7, #12]
    c4a4:	460b      	mov	r3, r1
    c4a6:	607a      	str	r2, [r7, #4]
    c4a8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    c4aa:	7afb      	ldrb	r3, [r7, #11]
    c4ac:	68fa      	ldr	r2, [r7, #12]
    c4ae:	3306      	adds	r3, #6
    c4b0:	009b      	lsls	r3, r3, #2
    c4b2:	4413      	add	r3, r2
    c4b4:	687a      	ldr	r2, [r7, #4]
    c4b6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    c4b8:	21c0      	movs	r1, #192	; 0xc0
    c4ba:	68f8      	ldr	r0, [r7, #12]
    c4bc:	4b02      	ldr	r3, [pc, #8]	; (c4c8 <hri_tccount32_write_CC_reg+0x2c>)
    c4be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c4c0:	bf00      	nop
    c4c2:	3710      	adds	r7, #16
    c4c4:	46bd      	mov	sp, r7
    c4c6:	bd80      	pop	{r7, pc}
    c4c8:	0000c149 	.word	0x0000c149

0000c4cc <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    c4cc:	b580      	push	{r7, lr}
    c4ce:	b082      	sub	sp, #8
    c4d0:	af00      	add	r7, sp, #0
    c4d2:	6078      	str	r0, [r7, #4]
    c4d4:	460b      	mov	r3, r1
    c4d6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    c4d8:	21c0      	movs	r1, #192	; 0xc0
    c4da:	6878      	ldr	r0, [r7, #4]
    c4dc:	4b05      	ldr	r3, [pc, #20]	; (c4f4 <hri_tccount32_read_CC_reg+0x28>)
    c4de:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    c4e0:	78fb      	ldrb	r3, [r7, #3]
    c4e2:	687a      	ldr	r2, [r7, #4]
    c4e4:	3306      	adds	r3, #6
    c4e6:	009b      	lsls	r3, r3, #2
    c4e8:	4413      	add	r3, r2
    c4ea:	685b      	ldr	r3, [r3, #4]
}
    c4ec:	4618      	mov	r0, r3
    c4ee:	3708      	adds	r7, #8
    c4f0:	46bd      	mov	sp, r7
    c4f2:	bd80      	pop	{r7, pc}
    c4f4:	0000c149 	.word	0x0000c149

0000c4f8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    c4f8:	b580      	push	{r7, lr}
    c4fa:	b084      	sub	sp, #16
    c4fc:	af00      	add	r7, sp, #0
    c4fe:	6078      	str	r0, [r7, #4]
    c500:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    c502:	6838      	ldr	r0, [r7, #0]
    c504:	4b93      	ldr	r3, [pc, #588]	; (c754 <_tc_timer_init+0x25c>)
    c506:	4798      	blx	r3
    c508:	4603      	mov	r3, r0
    c50a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    c50c:	687b      	ldr	r3, [r7, #4]
    c50e:	683a      	ldr	r2, [r7, #0]
    c510:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    c512:	22a4      	movs	r2, #164	; 0xa4
    c514:	4990      	ldr	r1, [pc, #576]	; (c758 <_tc_timer_init+0x260>)
    c516:	2001      	movs	r0, #1
    c518:	4b90      	ldr	r3, [pc, #576]	; (c75c <_tc_timer_init+0x264>)
    c51a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    c51c:	2101      	movs	r1, #1
    c51e:	6838      	ldr	r0, [r7, #0]
    c520:	4b8f      	ldr	r3, [pc, #572]	; (c760 <_tc_timer_init+0x268>)
    c522:	4798      	blx	r3
    c524:	4603      	mov	r3, r0
    c526:	f083 0301 	eor.w	r3, r3, #1
    c52a:	b2db      	uxtb	r3, r3
    c52c:	2b00      	cmp	r3, #0
    c52e:	d011      	beq.n	c554 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    c530:	2102      	movs	r1, #2
    c532:	6838      	ldr	r0, [r7, #0]
    c534:	4b8b      	ldr	r3, [pc, #556]	; (c764 <_tc_timer_init+0x26c>)
    c536:	4798      	blx	r3
    c538:	4603      	mov	r3, r0
    c53a:	2b00      	cmp	r3, #0
    c53c:	d006      	beq.n	c54c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    c53e:	6838      	ldr	r0, [r7, #0]
    c540:	4b89      	ldr	r3, [pc, #548]	; (c768 <_tc_timer_init+0x270>)
    c542:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    c544:	2102      	movs	r1, #2
    c546:	6838      	ldr	r0, [r7, #0]
    c548:	4b88      	ldr	r3, [pc, #544]	; (c76c <_tc_timer_init+0x274>)
    c54a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    c54c:	2101      	movs	r1, #1
    c54e:	6838      	ldr	r0, [r7, #0]
    c550:	4b87      	ldr	r3, [pc, #540]	; (c770 <_tc_timer_init+0x278>)
    c552:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    c554:	2101      	movs	r1, #1
    c556:	6838      	ldr	r0, [r7, #0]
    c558:	4b84      	ldr	r3, [pc, #528]	; (c76c <_tc_timer_init+0x274>)
    c55a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    c55c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c560:	4984      	ldr	r1, [pc, #528]	; (c774 <_tc_timer_init+0x27c>)
    c562:	4613      	mov	r3, r2
    c564:	009b      	lsls	r3, r3, #2
    c566:	4413      	add	r3, r2
    c568:	009b      	lsls	r3, r3, #2
    c56a:	440b      	add	r3, r1
    c56c:	3304      	adds	r3, #4
    c56e:	681b      	ldr	r3, [r3, #0]
    c570:	4619      	mov	r1, r3
    c572:	6838      	ldr	r0, [r7, #0]
    c574:	4b7e      	ldr	r3, [pc, #504]	; (c770 <_tc_timer_init+0x278>)
    c576:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    c578:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c57c:	497d      	ldr	r1, [pc, #500]	; (c774 <_tc_timer_init+0x27c>)
    c57e:	4613      	mov	r3, r2
    c580:	009b      	lsls	r3, r3, #2
    c582:	4413      	add	r3, r2
    c584:	009b      	lsls	r3, r3, #2
    c586:	440b      	add	r3, r1
    c588:	330a      	adds	r3, #10
    c58a:	781b      	ldrb	r3, [r3, #0]
    c58c:	4619      	mov	r1, r3
    c58e:	6838      	ldr	r0, [r7, #0]
    c590:	4b79      	ldr	r3, [pc, #484]	; (c778 <_tc_timer_init+0x280>)
    c592:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    c594:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c598:	4976      	ldr	r1, [pc, #472]	; (c774 <_tc_timer_init+0x27c>)
    c59a:	4613      	mov	r3, r2
    c59c:	009b      	lsls	r3, r3, #2
    c59e:	4413      	add	r3, r2
    c5a0:	009b      	lsls	r3, r3, #2
    c5a2:	440b      	add	r3, r1
    c5a4:	3308      	adds	r3, #8
    c5a6:	881b      	ldrh	r3, [r3, #0]
    c5a8:	4619      	mov	r1, r3
    c5aa:	6838      	ldr	r0, [r7, #0]
    c5ac:	4b73      	ldr	r3, [pc, #460]	; (c77c <_tc_timer_init+0x284>)
    c5ae:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    c5b0:	2101      	movs	r1, #1
    c5b2:	6838      	ldr	r0, [r7, #0]
    c5b4:	4b72      	ldr	r3, [pc, #456]	; (c780 <_tc_timer_init+0x288>)
    c5b6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    c5b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c5bc:	496d      	ldr	r1, [pc, #436]	; (c774 <_tc_timer_init+0x27c>)
    c5be:	4613      	mov	r3, r2
    c5c0:	009b      	lsls	r3, r3, #2
    c5c2:	4413      	add	r3, r2
    c5c4:	009b      	lsls	r3, r3, #2
    c5c6:	440b      	add	r3, r1
    c5c8:	3304      	adds	r3, #4
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	f003 030c 	and.w	r3, r3, #12
    c5d0:	2b08      	cmp	r3, #8
    c5d2:	d11e      	bne.n	c612 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    c5d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c5d8:	4966      	ldr	r1, [pc, #408]	; (c774 <_tc_timer_init+0x27c>)
    c5da:	4613      	mov	r3, r2
    c5dc:	009b      	lsls	r3, r3, #2
    c5de:	4413      	add	r3, r2
    c5e0:	009b      	lsls	r3, r3, #2
    c5e2:	440b      	add	r3, r1
    c5e4:	330c      	adds	r3, #12
    c5e6:	681b      	ldr	r3, [r3, #0]
    c5e8:	461a      	mov	r2, r3
    c5ea:	2100      	movs	r1, #0
    c5ec:	6838      	ldr	r0, [r7, #0]
    c5ee:	4b65      	ldr	r3, [pc, #404]	; (c784 <_tc_timer_init+0x28c>)
    c5f0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    c5f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c5f6:	495f      	ldr	r1, [pc, #380]	; (c774 <_tc_timer_init+0x27c>)
    c5f8:	4613      	mov	r3, r2
    c5fa:	009b      	lsls	r3, r3, #2
    c5fc:	4413      	add	r3, r2
    c5fe:	009b      	lsls	r3, r3, #2
    c600:	440b      	add	r3, r1
    c602:	3310      	adds	r3, #16
    c604:	681b      	ldr	r3, [r3, #0]
    c606:	461a      	mov	r2, r3
    c608:	2101      	movs	r1, #1
    c60a:	6838      	ldr	r0, [r7, #0]
    c60c:	4b5d      	ldr	r3, [pc, #372]	; (c784 <_tc_timer_init+0x28c>)
    c60e:	4798      	blx	r3
    c610:	e06a      	b.n	c6e8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    c612:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c616:	4957      	ldr	r1, [pc, #348]	; (c774 <_tc_timer_init+0x27c>)
    c618:	4613      	mov	r3, r2
    c61a:	009b      	lsls	r3, r3, #2
    c61c:	4413      	add	r3, r2
    c61e:	009b      	lsls	r3, r3, #2
    c620:	440b      	add	r3, r1
    c622:	3304      	adds	r3, #4
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	f003 030c 	and.w	r3, r3, #12
    c62a:	2b00      	cmp	r3, #0
    c62c:	d120      	bne.n	c670 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    c62e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c632:	4950      	ldr	r1, [pc, #320]	; (c774 <_tc_timer_init+0x27c>)
    c634:	4613      	mov	r3, r2
    c636:	009b      	lsls	r3, r3, #2
    c638:	4413      	add	r3, r2
    c63a:	009b      	lsls	r3, r3, #2
    c63c:	440b      	add	r3, r1
    c63e:	330c      	adds	r3, #12
    c640:	681b      	ldr	r3, [r3, #0]
    c642:	b29b      	uxth	r3, r3
    c644:	461a      	mov	r2, r3
    c646:	2100      	movs	r1, #0
    c648:	6838      	ldr	r0, [r7, #0]
    c64a:	4b4f      	ldr	r3, [pc, #316]	; (c788 <_tc_timer_init+0x290>)
    c64c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    c64e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c652:	4948      	ldr	r1, [pc, #288]	; (c774 <_tc_timer_init+0x27c>)
    c654:	4613      	mov	r3, r2
    c656:	009b      	lsls	r3, r3, #2
    c658:	4413      	add	r3, r2
    c65a:	009b      	lsls	r3, r3, #2
    c65c:	440b      	add	r3, r1
    c65e:	3310      	adds	r3, #16
    c660:	681b      	ldr	r3, [r3, #0]
    c662:	b29b      	uxth	r3, r3
    c664:	461a      	mov	r2, r3
    c666:	2101      	movs	r1, #1
    c668:	6838      	ldr	r0, [r7, #0]
    c66a:	4b47      	ldr	r3, [pc, #284]	; (c788 <_tc_timer_init+0x290>)
    c66c:	4798      	blx	r3
    c66e:	e03b      	b.n	c6e8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    c670:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c674:	493f      	ldr	r1, [pc, #252]	; (c774 <_tc_timer_init+0x27c>)
    c676:	4613      	mov	r3, r2
    c678:	009b      	lsls	r3, r3, #2
    c67a:	4413      	add	r3, r2
    c67c:	009b      	lsls	r3, r3, #2
    c67e:	440b      	add	r3, r1
    c680:	3304      	adds	r3, #4
    c682:	681b      	ldr	r3, [r3, #0]
    c684:	f003 030c 	and.w	r3, r3, #12
    c688:	2b04      	cmp	r3, #4
    c68a:	d12d      	bne.n	c6e8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    c68c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c690:	4938      	ldr	r1, [pc, #224]	; (c774 <_tc_timer_init+0x27c>)
    c692:	4613      	mov	r3, r2
    c694:	009b      	lsls	r3, r3, #2
    c696:	4413      	add	r3, r2
    c698:	009b      	lsls	r3, r3, #2
    c69a:	440b      	add	r3, r1
    c69c:	330c      	adds	r3, #12
    c69e:	681b      	ldr	r3, [r3, #0]
    c6a0:	b2db      	uxtb	r3, r3
    c6a2:	461a      	mov	r2, r3
    c6a4:	2100      	movs	r1, #0
    c6a6:	6838      	ldr	r0, [r7, #0]
    c6a8:	4b38      	ldr	r3, [pc, #224]	; (c78c <_tc_timer_init+0x294>)
    c6aa:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    c6ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c6b0:	4930      	ldr	r1, [pc, #192]	; (c774 <_tc_timer_init+0x27c>)
    c6b2:	4613      	mov	r3, r2
    c6b4:	009b      	lsls	r3, r3, #2
    c6b6:	4413      	add	r3, r2
    c6b8:	009b      	lsls	r3, r3, #2
    c6ba:	440b      	add	r3, r1
    c6bc:	3310      	adds	r3, #16
    c6be:	681b      	ldr	r3, [r3, #0]
    c6c0:	b2db      	uxtb	r3, r3
    c6c2:	461a      	mov	r2, r3
    c6c4:	2101      	movs	r1, #1
    c6c6:	6838      	ldr	r0, [r7, #0]
    c6c8:	4b30      	ldr	r3, [pc, #192]	; (c78c <_tc_timer_init+0x294>)
    c6ca:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    c6cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c6d0:	4928      	ldr	r1, [pc, #160]	; (c774 <_tc_timer_init+0x27c>)
    c6d2:	4613      	mov	r3, r2
    c6d4:	009b      	lsls	r3, r3, #2
    c6d6:	4413      	add	r3, r2
    c6d8:	009b      	lsls	r3, r3, #2
    c6da:	440b      	add	r3, r1
    c6dc:	330b      	adds	r3, #11
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	4619      	mov	r1, r3
    c6e2:	6838      	ldr	r0, [r7, #0]
    c6e4:	4b2a      	ldr	r3, [pc, #168]	; (c790 <_tc_timer_init+0x298>)
    c6e6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    c6e8:	6838      	ldr	r0, [r7, #0]
    c6ea:	4b2a      	ldr	r3, [pc, #168]	; (c794 <_tc_timer_init+0x29c>)
    c6ec:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    c6ee:	6879      	ldr	r1, [r7, #4]
    c6f0:	6838      	ldr	r0, [r7, #0]
    c6f2:	4b29      	ldr	r3, [pc, #164]	; (c798 <_tc_timer_init+0x2a0>)
    c6f4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    c6f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c6fa:	491e      	ldr	r1, [pc, #120]	; (c774 <_tc_timer_init+0x27c>)
    c6fc:	4613      	mov	r3, r2
    c6fe:	009b      	lsls	r3, r3, #2
    c700:	4413      	add	r3, r2
    c702:	009b      	lsls	r3, r3, #2
    c704:	440b      	add	r3, r1
    c706:	3302      	adds	r3, #2
    c708:	f9b3 3000 	ldrsh.w	r3, [r3]
    c70c:	4618      	mov	r0, r3
    c70e:	4b23      	ldr	r3, [pc, #140]	; (c79c <_tc_timer_init+0x2a4>)
    c710:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    c712:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c716:	4917      	ldr	r1, [pc, #92]	; (c774 <_tc_timer_init+0x27c>)
    c718:	4613      	mov	r3, r2
    c71a:	009b      	lsls	r3, r3, #2
    c71c:	4413      	add	r3, r2
    c71e:	009b      	lsls	r3, r3, #2
    c720:	440b      	add	r3, r1
    c722:	3302      	adds	r3, #2
    c724:	f9b3 3000 	ldrsh.w	r3, [r3]
    c728:	4618      	mov	r0, r3
    c72a:	4b1d      	ldr	r3, [pc, #116]	; (c7a0 <_tc_timer_init+0x2a8>)
    c72c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    c72e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c732:	4910      	ldr	r1, [pc, #64]	; (c774 <_tc_timer_init+0x27c>)
    c734:	4613      	mov	r3, r2
    c736:	009b      	lsls	r3, r3, #2
    c738:	4413      	add	r3, r2
    c73a:	009b      	lsls	r3, r3, #2
    c73c:	440b      	add	r3, r1
    c73e:	3302      	adds	r3, #2
    c740:	f9b3 3000 	ldrsh.w	r3, [r3]
    c744:	4618      	mov	r0, r3
    c746:	4b17      	ldr	r3, [pc, #92]	; (c7a4 <_tc_timer_init+0x2ac>)
    c748:	4798      	blx	r3

	return ERR_NONE;
    c74a:	2300      	movs	r3, #0
}
    c74c:	4618      	mov	r0, r3
    c74e:	3710      	adds	r7, #16
    c750:	46bd      	mov	sp, r7
    c752:	bd80      	pop	{r7, pc}
    c754:	0000cd89 	.word	0x0000cd89
    c758:	0001ce6c 	.word	0x0001ce6c
    c75c:	00007b0d 	.word	0x00007b0d
    c760:	0000c16d 	.word	0x0000c16d
    c764:	0000c30d 	.word	0x0000c30d
    c768:	0000c2bd 	.word	0x0000c2bd
    c76c:	0000c149 	.word	0x0000c149
    c770:	0000c33d 	.word	0x0000c33d
    c774:	200000e4 	.word	0x200000e4
    c778:	0000c39d 	.word	0x0000c39d
    c77c:	0000c361 	.word	0x0000c361
    c780:	0000c37f 	.word	0x0000c37f
    c784:	0000c49d 	.word	0x0000c49d
    c788:	0000c439 	.word	0x0000c439
    c78c:	0000c409 	.word	0x0000c409
    c790:	0000c3bd 	.word	0x0000c3bd
    c794:	0000c1f1 	.word	0x0000c1f1
    c798:	0000cdf1 	.word	0x0000cdf1
    c79c:	0000c0c9 	.word	0x0000c0c9
    c7a0:	0000c10d 	.word	0x0000c10d
    c7a4:	0000c08d 	.word	0x0000c08d

0000c7a8 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    c7a8:	b580      	push	{r7, lr}
    c7aa:	b084      	sub	sp, #16
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	6078      	str	r0, [r7, #4]
    c7b0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    c7b2:	6838      	ldr	r0, [r7, #0]
    c7b4:	4b73      	ldr	r3, [pc, #460]	; (c984 <_pwm_init+0x1dc>)
    c7b6:	4798      	blx	r3
    c7b8:	4603      	mov	r3, r0
    c7ba:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	683a      	ldr	r2, [r7, #0]
    c7c0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    c7c2:	2101      	movs	r1, #1
    c7c4:	6838      	ldr	r0, [r7, #0]
    c7c6:	4b70      	ldr	r3, [pc, #448]	; (c988 <_pwm_init+0x1e0>)
    c7c8:	4798      	blx	r3
    c7ca:	4603      	mov	r3, r0
    c7cc:	f083 0301 	eor.w	r3, r3, #1
    c7d0:	b2db      	uxtb	r3, r3
    c7d2:	2b00      	cmp	r3, #0
    c7d4:	d011      	beq.n	c7fa <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    c7d6:	2102      	movs	r1, #2
    c7d8:	6838      	ldr	r0, [r7, #0]
    c7da:	4b6c      	ldr	r3, [pc, #432]	; (c98c <_pwm_init+0x1e4>)
    c7dc:	4798      	blx	r3
    c7de:	4603      	mov	r3, r0
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d006      	beq.n	c7f2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    c7e4:	6838      	ldr	r0, [r7, #0]
    c7e6:	4b6a      	ldr	r3, [pc, #424]	; (c990 <_pwm_init+0x1e8>)
    c7e8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    c7ea:	2102      	movs	r1, #2
    c7ec:	6838      	ldr	r0, [r7, #0]
    c7ee:	4b69      	ldr	r3, [pc, #420]	; (c994 <_pwm_init+0x1ec>)
    c7f0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    c7f2:	2101      	movs	r1, #1
    c7f4:	6838      	ldr	r0, [r7, #0]
    c7f6:	4b68      	ldr	r3, [pc, #416]	; (c998 <_pwm_init+0x1f0>)
    c7f8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    c7fa:	2101      	movs	r1, #1
    c7fc:	6838      	ldr	r0, [r7, #0]
    c7fe:	4b65      	ldr	r3, [pc, #404]	; (c994 <_pwm_init+0x1ec>)
    c800:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    c802:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c806:	4965      	ldr	r1, [pc, #404]	; (c99c <_pwm_init+0x1f4>)
    c808:	4613      	mov	r3, r2
    c80a:	009b      	lsls	r3, r3, #2
    c80c:	4413      	add	r3, r2
    c80e:	009b      	lsls	r3, r3, #2
    c810:	440b      	add	r3, r1
    c812:	3304      	adds	r3, #4
    c814:	681b      	ldr	r3, [r3, #0]
    c816:	4619      	mov	r1, r3
    c818:	6838      	ldr	r0, [r7, #0]
    c81a:	4b5f      	ldr	r3, [pc, #380]	; (c998 <_pwm_init+0x1f0>)
    c81c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    c81e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c822:	495e      	ldr	r1, [pc, #376]	; (c99c <_pwm_init+0x1f4>)
    c824:	4613      	mov	r3, r2
    c826:	009b      	lsls	r3, r3, #2
    c828:	4413      	add	r3, r2
    c82a:	009b      	lsls	r3, r3, #2
    c82c:	440b      	add	r3, r1
    c82e:	330a      	adds	r3, #10
    c830:	781b      	ldrb	r3, [r3, #0]
    c832:	4619      	mov	r1, r3
    c834:	6838      	ldr	r0, [r7, #0]
    c836:	4b5a      	ldr	r3, [pc, #360]	; (c9a0 <_pwm_init+0x1f8>)
    c838:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    c83a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c83e:	4957      	ldr	r1, [pc, #348]	; (c99c <_pwm_init+0x1f4>)
    c840:	4613      	mov	r3, r2
    c842:	009b      	lsls	r3, r3, #2
    c844:	4413      	add	r3, r2
    c846:	009b      	lsls	r3, r3, #2
    c848:	440b      	add	r3, r1
    c84a:	3308      	adds	r3, #8
    c84c:	881b      	ldrh	r3, [r3, #0]
    c84e:	4619      	mov	r1, r3
    c850:	6838      	ldr	r0, [r7, #0]
    c852:	4b54      	ldr	r3, [pc, #336]	; (c9a4 <_pwm_init+0x1fc>)
    c854:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    c856:	2103      	movs	r1, #3
    c858:	6838      	ldr	r0, [r7, #0]
    c85a:	4b53      	ldr	r3, [pc, #332]	; (c9a8 <_pwm_init+0x200>)
    c85c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    c85e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c862:	494e      	ldr	r1, [pc, #312]	; (c99c <_pwm_init+0x1f4>)
    c864:	4613      	mov	r3, r2
    c866:	009b      	lsls	r3, r3, #2
    c868:	4413      	add	r3, r2
    c86a:	009b      	lsls	r3, r3, #2
    c86c:	440b      	add	r3, r1
    c86e:	3304      	adds	r3, #4
    c870:	681b      	ldr	r3, [r3, #0]
    c872:	f003 030c 	and.w	r3, r3, #12
    c876:	2b08      	cmp	r3, #8
    c878:	d11e      	bne.n	c8b8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    c87a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c87e:	4947      	ldr	r1, [pc, #284]	; (c99c <_pwm_init+0x1f4>)
    c880:	4613      	mov	r3, r2
    c882:	009b      	lsls	r3, r3, #2
    c884:	4413      	add	r3, r2
    c886:	009b      	lsls	r3, r3, #2
    c888:	440b      	add	r3, r1
    c88a:	330c      	adds	r3, #12
    c88c:	681b      	ldr	r3, [r3, #0]
    c88e:	461a      	mov	r2, r3
    c890:	2100      	movs	r1, #0
    c892:	6838      	ldr	r0, [r7, #0]
    c894:	4b45      	ldr	r3, [pc, #276]	; (c9ac <_pwm_init+0x204>)
    c896:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    c898:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c89c:	493f      	ldr	r1, [pc, #252]	; (c99c <_pwm_init+0x1f4>)
    c89e:	4613      	mov	r3, r2
    c8a0:	009b      	lsls	r3, r3, #2
    c8a2:	4413      	add	r3, r2
    c8a4:	009b      	lsls	r3, r3, #2
    c8a6:	440b      	add	r3, r1
    c8a8:	3310      	adds	r3, #16
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	461a      	mov	r2, r3
    c8ae:	2101      	movs	r1, #1
    c8b0:	6838      	ldr	r0, [r7, #0]
    c8b2:	4b3e      	ldr	r3, [pc, #248]	; (c9ac <_pwm_init+0x204>)
    c8b4:	4798      	blx	r3
    c8b6:	e031      	b.n	c91c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    c8b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c8bc:	4937      	ldr	r1, [pc, #220]	; (c99c <_pwm_init+0x1f4>)
    c8be:	4613      	mov	r3, r2
    c8c0:	009b      	lsls	r3, r3, #2
    c8c2:	4413      	add	r3, r2
    c8c4:	009b      	lsls	r3, r3, #2
    c8c6:	440b      	add	r3, r1
    c8c8:	3304      	adds	r3, #4
    c8ca:	681b      	ldr	r3, [r3, #0]
    c8cc:	f003 030c 	and.w	r3, r3, #12
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d120      	bne.n	c916 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    c8d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c8d8:	4930      	ldr	r1, [pc, #192]	; (c99c <_pwm_init+0x1f4>)
    c8da:	4613      	mov	r3, r2
    c8dc:	009b      	lsls	r3, r3, #2
    c8de:	4413      	add	r3, r2
    c8e0:	009b      	lsls	r3, r3, #2
    c8e2:	440b      	add	r3, r1
    c8e4:	330c      	adds	r3, #12
    c8e6:	681b      	ldr	r3, [r3, #0]
    c8e8:	b29b      	uxth	r3, r3
    c8ea:	461a      	mov	r2, r3
    c8ec:	2100      	movs	r1, #0
    c8ee:	6838      	ldr	r0, [r7, #0]
    c8f0:	4b2f      	ldr	r3, [pc, #188]	; (c9b0 <_pwm_init+0x208>)
    c8f2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    c8f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c8f8:	4928      	ldr	r1, [pc, #160]	; (c99c <_pwm_init+0x1f4>)
    c8fa:	4613      	mov	r3, r2
    c8fc:	009b      	lsls	r3, r3, #2
    c8fe:	4413      	add	r3, r2
    c900:	009b      	lsls	r3, r3, #2
    c902:	440b      	add	r3, r1
    c904:	3310      	adds	r3, #16
    c906:	681b      	ldr	r3, [r3, #0]
    c908:	b29b      	uxth	r3, r3
    c90a:	461a      	mov	r2, r3
    c90c:	2101      	movs	r1, #1
    c90e:	6838      	ldr	r0, [r7, #0]
    c910:	4b27      	ldr	r3, [pc, #156]	; (c9b0 <_pwm_init+0x208>)
    c912:	4798      	blx	r3
    c914:	e002      	b.n	c91c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    c916:	f04f 33ff 	mov.w	r3, #4294967295
    c91a:	e02e      	b.n	c97a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    c91c:	6879      	ldr	r1, [r7, #4]
    c91e:	6838      	ldr	r0, [r7, #0]
    c920:	4b24      	ldr	r3, [pc, #144]	; (c9b4 <_pwm_init+0x20c>)
    c922:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    c924:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c928:	491c      	ldr	r1, [pc, #112]	; (c99c <_pwm_init+0x1f4>)
    c92a:	4613      	mov	r3, r2
    c92c:	009b      	lsls	r3, r3, #2
    c92e:	4413      	add	r3, r2
    c930:	009b      	lsls	r3, r3, #2
    c932:	440b      	add	r3, r1
    c934:	3302      	adds	r3, #2
    c936:	f9b3 3000 	ldrsh.w	r3, [r3]
    c93a:	4618      	mov	r0, r3
    c93c:	4b1e      	ldr	r3, [pc, #120]	; (c9b8 <_pwm_init+0x210>)
    c93e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    c940:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c944:	4915      	ldr	r1, [pc, #84]	; (c99c <_pwm_init+0x1f4>)
    c946:	4613      	mov	r3, r2
    c948:	009b      	lsls	r3, r3, #2
    c94a:	4413      	add	r3, r2
    c94c:	009b      	lsls	r3, r3, #2
    c94e:	440b      	add	r3, r1
    c950:	3302      	adds	r3, #2
    c952:	f9b3 3000 	ldrsh.w	r3, [r3]
    c956:	4618      	mov	r0, r3
    c958:	4b18      	ldr	r3, [pc, #96]	; (c9bc <_pwm_init+0x214>)
    c95a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    c95c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c960:	490e      	ldr	r1, [pc, #56]	; (c99c <_pwm_init+0x1f4>)
    c962:	4613      	mov	r3, r2
    c964:	009b      	lsls	r3, r3, #2
    c966:	4413      	add	r3, r2
    c968:	009b      	lsls	r3, r3, #2
    c96a:	440b      	add	r3, r1
    c96c:	3302      	adds	r3, #2
    c96e:	f9b3 3000 	ldrsh.w	r3, [r3]
    c972:	4618      	mov	r0, r3
    c974:	4b12      	ldr	r3, [pc, #72]	; (c9c0 <_pwm_init+0x218>)
    c976:	4798      	blx	r3

	return 0;
    c978:	2300      	movs	r3, #0
}
    c97a:	4618      	mov	r0, r3
    c97c:	3710      	adds	r7, #16
    c97e:	46bd      	mov	sp, r7
    c980:	bd80      	pop	{r7, pc}
    c982:	bf00      	nop
    c984:	0000cd89 	.word	0x0000cd89
    c988:	0000c16d 	.word	0x0000c16d
    c98c:	0000c30d 	.word	0x0000c30d
    c990:	0000c2bd 	.word	0x0000c2bd
    c994:	0000c149 	.word	0x0000c149
    c998:	0000c33d 	.word	0x0000c33d
    c99c:	200000e4 	.word	0x200000e4
    c9a0:	0000c39d 	.word	0x0000c39d
    c9a4:	0000c361 	.word	0x0000c361
    c9a8:	0000c37f 	.word	0x0000c37f
    c9ac:	0000c49d 	.word	0x0000c49d
    c9b0:	0000c439 	.word	0x0000c439
    c9b4:	0000cdf1 	.word	0x0000cdf1
    c9b8:	0000c0c9 	.word	0x0000c0c9
    c9bc:	0000c10d 	.word	0x0000c10d
    c9c0:	0000c08d 	.word	0x0000c08d

0000c9c4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    c9c4:	b580      	push	{r7, lr}
    c9c6:	b084      	sub	sp, #16
    c9c8:	af00      	add	r7, sp, #0
    c9ca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	68db      	ldr	r3, [r3, #12]
    c9d0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    c9d2:	68f8      	ldr	r0, [r7, #12]
    c9d4:	4b10      	ldr	r3, [pc, #64]	; (ca18 <_tc_timer_deinit+0x54>)
    c9d6:	4798      	blx	r3
    c9d8:	4603      	mov	r3, r0
    c9da:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    c9dc:	22f9      	movs	r2, #249	; 0xf9
    c9de:	490f      	ldr	r1, [pc, #60]	; (ca1c <_tc_timer_deinit+0x58>)
    c9e0:	2001      	movs	r0, #1
    c9e2:	4b0f      	ldr	r3, [pc, #60]	; (ca20 <_tc_timer_deinit+0x5c>)
    c9e4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    c9e6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    c9ea:	490e      	ldr	r1, [pc, #56]	; (ca24 <_tc_timer_deinit+0x60>)
    c9ec:	4613      	mov	r3, r2
    c9ee:	009b      	lsls	r3, r3, #2
    c9f0:	4413      	add	r3, r2
    c9f2:	009b      	lsls	r3, r3, #2
    c9f4:	440b      	add	r3, r1
    c9f6:	3302      	adds	r3, #2
    c9f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    c9fc:	4618      	mov	r0, r3
    c9fe:	4b0a      	ldr	r3, [pc, #40]	; (ca28 <_tc_timer_deinit+0x64>)
    ca00:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    ca02:	68f8      	ldr	r0, [r7, #12]
    ca04:	4b09      	ldr	r3, [pc, #36]	; (ca2c <_tc_timer_deinit+0x68>)
    ca06:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    ca08:	68f8      	ldr	r0, [r7, #12]
    ca0a:	4b09      	ldr	r3, [pc, #36]	; (ca30 <_tc_timer_deinit+0x6c>)
    ca0c:	4798      	blx	r3
}
    ca0e:	bf00      	nop
    ca10:	3710      	adds	r7, #16
    ca12:	46bd      	mov	sp, r7
    ca14:	bd80      	pop	{r7, pc}
    ca16:	bf00      	nop
    ca18:	0000cd89 	.word	0x0000cd89
    ca1c:	0001ce6c 	.word	0x0001ce6c
    ca20:	00007b0d 	.word	0x00007b0d
    ca24:	200000e4 	.word	0x200000e4
    ca28:	0000c0c9 	.word	0x0000c0c9
    ca2c:	0000c2bd 	.word	0x0000c2bd
    ca30:	0000c235 	.word	0x0000c235

0000ca34 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    ca34:	b580      	push	{r7, lr}
    ca36:	b082      	sub	sp, #8
    ca38:	af00      	add	r7, sp, #0
    ca3a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	68db      	ldr	r3, [r3, #12]
    ca40:	4618      	mov	r0, r3
    ca42:	4b03      	ldr	r3, [pc, #12]	; (ca50 <_tc_timer_start+0x1c>)
    ca44:	4798      	blx	r3
}
    ca46:	bf00      	nop
    ca48:	3708      	adds	r7, #8
    ca4a:	46bd      	mov	sp, r7
    ca4c:	bd80      	pop	{r7, pc}
    ca4e:	bf00      	nop
    ca50:	0000c25d 	.word	0x0000c25d

0000ca54 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    ca54:	b580      	push	{r7, lr}
    ca56:	b082      	sub	sp, #8
    ca58:	af00      	add	r7, sp, #0
    ca5a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    ca5c:	687b      	ldr	r3, [r7, #4]
    ca5e:	691b      	ldr	r3, [r3, #16]
    ca60:	4618      	mov	r0, r3
    ca62:	4b03      	ldr	r3, [pc, #12]	; (ca70 <_pwm_enable+0x1c>)
    ca64:	4798      	blx	r3
}
    ca66:	bf00      	nop
    ca68:	3708      	adds	r7, #8
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd80      	pop	{r7, pc}
    ca6e:	bf00      	nop
    ca70:	0000c25d 	.word	0x0000c25d

0000ca74 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
    ca7a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	68db      	ldr	r3, [r3, #12]
    ca80:	4618      	mov	r0, r3
    ca82:	4b03      	ldr	r3, [pc, #12]	; (ca90 <_tc_timer_stop+0x1c>)
    ca84:	4798      	blx	r3
}
    ca86:	bf00      	nop
    ca88:	3708      	adds	r7, #8
    ca8a:	46bd      	mov	sp, r7
    ca8c:	bd80      	pop	{r7, pc}
    ca8e:	bf00      	nop
    ca90:	0000c2bd 	.word	0x0000c2bd

0000ca94 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    ca94:	b580      	push	{r7, lr}
    ca96:	b084      	sub	sp, #16
    ca98:	af00      	add	r7, sp, #0
    ca9a:	6078      	str	r0, [r7, #4]
    ca9c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    ca9e:	687b      	ldr	r3, [r7, #4]
    caa0:	68db      	ldr	r3, [r3, #12]
    caa2:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    caa4:	68f8      	ldr	r0, [r7, #12]
    caa6:	4b14      	ldr	r3, [pc, #80]	; (caf8 <_tc_timer_set_period+0x64>)
    caa8:	4798      	blx	r3
    caaa:	4603      	mov	r3, r0
    caac:	2b02      	cmp	r3, #2
    caae:	d105      	bne.n	cabc <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    cab0:	683a      	ldr	r2, [r7, #0]
    cab2:	2100      	movs	r1, #0
    cab4:	68f8      	ldr	r0, [r7, #12]
    cab6:	4b11      	ldr	r3, [pc, #68]	; (cafc <_tc_timer_set_period+0x68>)
    cab8:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    caba:	e019      	b.n	caf0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    cabc:	68f8      	ldr	r0, [r7, #12]
    cabe:	4b0e      	ldr	r3, [pc, #56]	; (caf8 <_tc_timer_set_period+0x64>)
    cac0:	4798      	blx	r3
    cac2:	4603      	mov	r3, r0
    cac4:	2b00      	cmp	r3, #0
    cac6:	d107      	bne.n	cad8 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    cac8:	683b      	ldr	r3, [r7, #0]
    caca:	b29b      	uxth	r3, r3
    cacc:	461a      	mov	r2, r3
    cace:	2100      	movs	r1, #0
    cad0:	68f8      	ldr	r0, [r7, #12]
    cad2:	4b0b      	ldr	r3, [pc, #44]	; (cb00 <_tc_timer_set_period+0x6c>)
    cad4:	4798      	blx	r3
}
    cad6:	e00b      	b.n	caf0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    cad8:	68f8      	ldr	r0, [r7, #12]
    cada:	4b07      	ldr	r3, [pc, #28]	; (caf8 <_tc_timer_set_period+0x64>)
    cadc:	4798      	blx	r3
    cade:	4603      	mov	r3, r0
    cae0:	2b01      	cmp	r3, #1
    cae2:	d105      	bne.n	caf0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    cae4:	683b      	ldr	r3, [r7, #0]
    cae6:	b2db      	uxtb	r3, r3
    cae8:	4619      	mov	r1, r3
    caea:	68f8      	ldr	r0, [r7, #12]
    caec:	4b05      	ldr	r3, [pc, #20]	; (cb04 <_tc_timer_set_period+0x70>)
    caee:	4798      	blx	r3
}
    caf0:	bf00      	nop
    caf2:	3710      	adds	r7, #16
    caf4:	46bd      	mov	sp, r7
    caf6:	bd80      	pop	{r7, pc}
    caf8:	0000c2e5 	.word	0x0000c2e5
    cafc:	0000c49d 	.word	0x0000c49d
    cb00:	0000c439 	.word	0x0000c439
    cb04:	0000c3bd 	.word	0x0000c3bd

0000cb08 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    cb08:	b580      	push	{r7, lr}
    cb0a:	b084      	sub	sp, #16
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	68db      	ldr	r3, [r3, #12]
    cb14:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    cb16:	68f8      	ldr	r0, [r7, #12]
    cb18:	4b13      	ldr	r3, [pc, #76]	; (cb68 <_tc_timer_get_period+0x60>)
    cb1a:	4798      	blx	r3
    cb1c:	4603      	mov	r3, r0
    cb1e:	2b02      	cmp	r3, #2
    cb20:	d105      	bne.n	cb2e <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    cb22:	2100      	movs	r1, #0
    cb24:	68f8      	ldr	r0, [r7, #12]
    cb26:	4b11      	ldr	r3, [pc, #68]	; (cb6c <_tc_timer_get_period+0x64>)
    cb28:	4798      	blx	r3
    cb2a:	4603      	mov	r3, r0
    cb2c:	e017      	b.n	cb5e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    cb2e:	68f8      	ldr	r0, [r7, #12]
    cb30:	4b0d      	ldr	r3, [pc, #52]	; (cb68 <_tc_timer_get_period+0x60>)
    cb32:	4798      	blx	r3
    cb34:	4603      	mov	r3, r0
    cb36:	2b00      	cmp	r3, #0
    cb38:	d105      	bne.n	cb46 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    cb3a:	2100      	movs	r1, #0
    cb3c:	68f8      	ldr	r0, [r7, #12]
    cb3e:	4b0c      	ldr	r3, [pc, #48]	; (cb70 <_tc_timer_get_period+0x68>)
    cb40:	4798      	blx	r3
    cb42:	4603      	mov	r3, r0
    cb44:	e00b      	b.n	cb5e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    cb46:	68f8      	ldr	r0, [r7, #12]
    cb48:	4b07      	ldr	r3, [pc, #28]	; (cb68 <_tc_timer_get_period+0x60>)
    cb4a:	4798      	blx	r3
    cb4c:	4603      	mov	r3, r0
    cb4e:	2b01      	cmp	r3, #1
    cb50:	d104      	bne.n	cb5c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    cb52:	68f8      	ldr	r0, [r7, #12]
    cb54:	4b07      	ldr	r3, [pc, #28]	; (cb74 <_tc_timer_get_period+0x6c>)
    cb56:	4798      	blx	r3
    cb58:	4603      	mov	r3, r0
    cb5a:	e000      	b.n	cb5e <_tc_timer_get_period+0x56>
	}

	return 0;
    cb5c:	2300      	movs	r3, #0
}
    cb5e:	4618      	mov	r0, r3
    cb60:	3710      	adds	r7, #16
    cb62:	46bd      	mov	sp, r7
    cb64:	bd80      	pop	{r7, pc}
    cb66:	bf00      	nop
    cb68:	0000c2e5 	.word	0x0000c2e5
    cb6c:	0000c4cd 	.word	0x0000c4cd
    cb70:	0000c46d 	.word	0x0000c46d
    cb74:	0000c3e5 	.word	0x0000c3e5

0000cb78 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    cb78:	b580      	push	{r7, lr}
    cb7a:	b082      	sub	sp, #8
    cb7c:	af00      	add	r7, sp, #0
    cb7e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    cb80:	687b      	ldr	r3, [r7, #4]
    cb82:	68db      	ldr	r3, [r3, #12]
    cb84:	4618      	mov	r0, r3
    cb86:	4b03      	ldr	r3, [pc, #12]	; (cb94 <_tc_timer_is_started+0x1c>)
    cb88:	4798      	blx	r3
    cb8a:	4603      	mov	r3, r0
}
    cb8c:	4618      	mov	r0, r3
    cb8e:	3708      	adds	r7, #8
    cb90:	46bd      	mov	sp, r7
    cb92:	bd80      	pop	{r7, pc}
    cb94:	0000c285 	.word	0x0000c285

0000cb98 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    cb98:	b580      	push	{r7, lr}
    cb9a:	b082      	sub	sp, #8
    cb9c:	af00      	add	r7, sp, #0
    cb9e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    cba0:	687b      	ldr	r3, [r7, #4]
    cba2:	691b      	ldr	r3, [r3, #16]
    cba4:	4618      	mov	r0, r3
    cba6:	4b03      	ldr	r3, [pc, #12]	; (cbb4 <_pwm_is_enabled+0x1c>)
    cba8:	4798      	blx	r3
    cbaa:	4603      	mov	r3, r0
}
    cbac:	4618      	mov	r0, r3
    cbae:	3708      	adds	r7, #8
    cbb0:	46bd      	mov	sp, r7
    cbb2:	bd80      	pop	{r7, pc}
    cbb4:	0000c285 	.word	0x0000c285

0000cbb8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    cbb8:	b480      	push	{r7}
    cbba:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    cbbc:	4b02      	ldr	r3, [pc, #8]	; (cbc8 <_tc_get_timer+0x10>)
}
    cbbe:	4618      	mov	r0, r3
    cbc0:	46bd      	mov	sp, r7
    cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbc6:	4770      	bx	lr
    cbc8:	2000015c 	.word	0x2000015c

0000cbcc <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    cbcc:	b480      	push	{r7}
    cbce:	af00      	add	r7, sp, #0
	return NULL;
    cbd0:	2300      	movs	r3, #0
}
    cbd2:	4618      	mov	r0, r3
    cbd4:	46bd      	mov	sp, r7
    cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbda:	4770      	bx	lr

0000cbdc <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b084      	sub	sp, #16
    cbe0:	af00      	add	r7, sp, #0
    cbe2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	68db      	ldr	r3, [r3, #12]
    cbe8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    cbea:	68f8      	ldr	r0, [r7, #12]
    cbec:	4b0e      	ldr	r3, [pc, #56]	; (cc28 <_tc_timer_set_irq+0x4c>)
    cbee:	4798      	blx	r3
    cbf0:	4603      	mov	r3, r0
    cbf2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    cbf4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    cbf8:	490c      	ldr	r1, [pc, #48]	; (cc2c <_tc_timer_set_irq+0x50>)
    cbfa:	2001      	movs	r0, #1
    cbfc:	4b0c      	ldr	r3, [pc, #48]	; (cc30 <_tc_timer_set_irq+0x54>)
    cbfe:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    cc00:	f997 200b 	ldrsb.w	r2, [r7, #11]
    cc04:	490b      	ldr	r1, [pc, #44]	; (cc34 <_tc_timer_set_irq+0x58>)
    cc06:	4613      	mov	r3, r2
    cc08:	009b      	lsls	r3, r3, #2
    cc0a:	4413      	add	r3, r2
    cc0c:	009b      	lsls	r3, r3, #2
    cc0e:	440b      	add	r3, r1
    cc10:	3302      	adds	r3, #2
    cc12:	f9b3 3000 	ldrsh.w	r3, [r3]
    cc16:	b2db      	uxtb	r3, r3
    cc18:	4618      	mov	r0, r3
    cc1a:	4b07      	ldr	r3, [pc, #28]	; (cc38 <_tc_timer_set_irq+0x5c>)
    cc1c:	4798      	blx	r3
}
    cc1e:	bf00      	nop
    cc20:	3710      	adds	r7, #16
    cc22:	46bd      	mov	sp, r7
    cc24:	bd80      	pop	{r7, pc}
    cc26:	bf00      	nop
    cc28:	0000cd89 	.word	0x0000cd89
    cc2c:	0001ce6c 	.word	0x0001ce6c
    cc30:	00007b0d 	.word	0x00007b0d
    cc34:	200000e4 	.word	0x200000e4
    cc38:	00008359 	.word	0x00008359

0000cc3c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b084      	sub	sp, #16
    cc40:	af00      	add	r7, sp, #0
    cc42:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	68db      	ldr	r3, [r3, #12]
    cc48:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    cc4a:	68f8      	ldr	r0, [r7, #12]
    cc4c:	4b07      	ldr	r3, [pc, #28]	; (cc6c <tc_interrupt_handler+0x30>)
    cc4e:	4798      	blx	r3
    cc50:	4603      	mov	r3, r0
    cc52:	2b00      	cmp	r3, #0
    cc54:	d006      	beq.n	cc64 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    cc56:	68f8      	ldr	r0, [r7, #12]
    cc58:	4b05      	ldr	r3, [pc, #20]	; (cc70 <tc_interrupt_handler+0x34>)
    cc5a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    cc5c:	687b      	ldr	r3, [r7, #4]
    cc5e:	681b      	ldr	r3, [r3, #0]
    cc60:	6878      	ldr	r0, [r7, #4]
    cc62:	4798      	blx	r3
	}
}
    cc64:	bf00      	nop
    cc66:	3710      	adds	r7, #16
    cc68:	46bd      	mov	sp, r7
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	0000c195 	.word	0x0000c195
    cc70:	0000c1bd 	.word	0x0000c1bd

0000cc74 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    cc74:	b580      	push	{r7, lr}
    cc76:	b084      	sub	sp, #16
    cc78:	af00      	add	r7, sp, #0
    cc7a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	691b      	ldr	r3, [r3, #16]
    cc80:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    cc82:	68f8      	ldr	r0, [r7, #12]
    cc84:	4b12      	ldr	r3, [pc, #72]	; (ccd0 <tc_pwm_interrupt_handler+0x5c>)
    cc86:	4798      	blx	r3
    cc88:	4603      	mov	r3, r0
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d00a      	beq.n	cca4 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    cc8e:	68f8      	ldr	r0, [r7, #12]
    cc90:	4b10      	ldr	r3, [pc, #64]	; (ccd4 <tc_pwm_interrupt_handler+0x60>)
    cc92:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    cc94:	687b      	ldr	r3, [r7, #4]
    cc96:	681b      	ldr	r3, [r3, #0]
    cc98:	2b00      	cmp	r3, #0
    cc9a:	d003      	beq.n	cca4 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	681b      	ldr	r3, [r3, #0]
    cca0:	6878      	ldr	r0, [r7, #4]
    cca2:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    cca4:	68f8      	ldr	r0, [r7, #12]
    cca6:	4b0c      	ldr	r3, [pc, #48]	; (ccd8 <tc_pwm_interrupt_handler+0x64>)
    cca8:	4798      	blx	r3
    ccaa:	4603      	mov	r3, r0
    ccac:	2b00      	cmp	r3, #0
    ccae:	d00a      	beq.n	ccc6 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    ccb0:	68f8      	ldr	r0, [r7, #12]
    ccb2:	4b0a      	ldr	r3, [pc, #40]	; (ccdc <tc_pwm_interrupt_handler+0x68>)
    ccb4:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	685b      	ldr	r3, [r3, #4]
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d003      	beq.n	ccc6 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	685b      	ldr	r3, [r3, #4]
    ccc2:	6878      	ldr	r0, [r7, #4]
    ccc4:	4798      	blx	r3
		}
	}
}
    ccc6:	bf00      	nop
    ccc8:	3710      	adds	r7, #16
    ccca:	46bd      	mov	sp, r7
    cccc:	bd80      	pop	{r7, pc}
    ccce:	bf00      	nop
    ccd0:	0000c195 	.word	0x0000c195
    ccd4:	0000c1bd 	.word	0x0000c1bd
    ccd8:	0000c20b 	.word	0x0000c20b
    ccdc:	0000c1d7 	.word	0x0000c1d7

0000cce0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    cce4:	4b03      	ldr	r3, [pc, #12]	; (ccf4 <TC0_Handler+0x14>)
    cce6:	681b      	ldr	r3, [r3, #0]
    cce8:	4618      	mov	r0, r3
    ccea:	4b03      	ldr	r3, [pc, #12]	; (ccf8 <TC0_Handler+0x18>)
    ccec:	4798      	blx	r3
}
    ccee:	bf00      	nop
    ccf0:	bd80      	pop	{r7, pc}
    ccf2:	bf00      	nop
    ccf4:	20001930 	.word	0x20001930
    ccf8:	0000cc3d 	.word	0x0000cc3d

0000ccfc <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    ccfc:	b580      	push	{r7, lr}
    ccfe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    cd00:	4b03      	ldr	r3, [pc, #12]	; (cd10 <TC2_Handler+0x14>)
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	4618      	mov	r0, r3
    cd06:	4b03      	ldr	r3, [pc, #12]	; (cd14 <TC2_Handler+0x18>)
    cd08:	4798      	blx	r3
}
    cd0a:	bf00      	nop
    cd0c:	bd80      	pop	{r7, pc}
    cd0e:	bf00      	nop
    cd10:	20001934 	.word	0x20001934
    cd14:	0000cc3d 	.word	0x0000cc3d

0000cd18 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    cd1c:	4b03      	ldr	r3, [pc, #12]	; (cd2c <TC4_Handler+0x14>)
    cd1e:	681b      	ldr	r3, [r3, #0]
    cd20:	4618      	mov	r0, r3
    cd22:	4b03      	ldr	r3, [pc, #12]	; (cd30 <TC4_Handler+0x18>)
    cd24:	4798      	blx	r3
}
    cd26:	bf00      	nop
    cd28:	bd80      	pop	{r7, pc}
    cd2a:	bf00      	nop
    cd2c:	20001938 	.word	0x20001938
    cd30:	0000cc3d 	.word	0x0000cc3d

0000cd34 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    cd34:	b580      	push	{r7, lr}
    cd36:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    cd38:	4b03      	ldr	r3, [pc, #12]	; (cd48 <TC5_Handler+0x14>)
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	4618      	mov	r0, r3
    cd3e:	4b03      	ldr	r3, [pc, #12]	; (cd4c <TC5_Handler+0x18>)
    cd40:	4798      	blx	r3
}
    cd42:	bf00      	nop
    cd44:	bd80      	pop	{r7, pc}
    cd46:	bf00      	nop
    cd48:	2000193c 	.word	0x2000193c
    cd4c:	0000cc3d 	.word	0x0000cc3d

0000cd50 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    cd50:	b580      	push	{r7, lr}
    cd52:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    cd54:	4b03      	ldr	r3, [pc, #12]	; (cd64 <TC6_Handler+0x14>)
    cd56:	681b      	ldr	r3, [r3, #0]
    cd58:	4618      	mov	r0, r3
    cd5a:	4b03      	ldr	r3, [pc, #12]	; (cd68 <TC6_Handler+0x18>)
    cd5c:	4798      	blx	r3
}
    cd5e:	bf00      	nop
    cd60:	bd80      	pop	{r7, pc}
    cd62:	bf00      	nop
    cd64:	20001940 	.word	0x20001940
    cd68:	0000cc3d 	.word	0x0000cc3d

0000cd6c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    cd6c:	b580      	push	{r7, lr}
    cd6e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    cd70:	4b03      	ldr	r3, [pc, #12]	; (cd80 <TC7_Handler+0x14>)
    cd72:	681b      	ldr	r3, [r3, #0]
    cd74:	4618      	mov	r0, r3
    cd76:	4b03      	ldr	r3, [pc, #12]	; (cd84 <TC7_Handler+0x18>)
    cd78:	4798      	blx	r3
}
    cd7a:	bf00      	nop
    cd7c:	bd80      	pop	{r7, pc}
    cd7e:	bf00      	nop
    cd80:	20001944 	.word	0x20001944
    cd84:	0000cc75 	.word	0x0000cc75

0000cd88 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    cd88:	b580      	push	{r7, lr}
    cd8a:	b084      	sub	sp, #16
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    cd90:	6878      	ldr	r0, [r7, #4]
    cd92:	4b13      	ldr	r3, [pc, #76]	; (cde0 <get_tc_index+0x58>)
    cd94:	4798      	blx	r3
    cd96:	4603      	mov	r3, r0
    cd98:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    cd9a:	2300      	movs	r3, #0
    cd9c:	73fb      	strb	r3, [r7, #15]
    cd9e:	e010      	b.n	cdc2 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    cda0:	7bfa      	ldrb	r2, [r7, #15]
    cda2:	4910      	ldr	r1, [pc, #64]	; (cde4 <get_tc_index+0x5c>)
    cda4:	4613      	mov	r3, r2
    cda6:	009b      	lsls	r3, r3, #2
    cda8:	4413      	add	r3, r2
    cdaa:	009b      	lsls	r3, r3, #2
    cdac:	440b      	add	r3, r1
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	7bba      	ldrb	r2, [r7, #14]
    cdb2:	429a      	cmp	r2, r3
    cdb4:	d102      	bne.n	cdbc <get_tc_index+0x34>
			return i;
    cdb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    cdba:	e00d      	b.n	cdd8 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    cdbc:	7bfb      	ldrb	r3, [r7, #15]
    cdbe:	3301      	adds	r3, #1
    cdc0:	73fb      	strb	r3, [r7, #15]
    cdc2:	7bfb      	ldrb	r3, [r7, #15]
    cdc4:	2b05      	cmp	r3, #5
    cdc6:	d9eb      	bls.n	cda0 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    cdc8:	f240 221d 	movw	r2, #541	; 0x21d
    cdcc:	4906      	ldr	r1, [pc, #24]	; (cde8 <get_tc_index+0x60>)
    cdce:	2000      	movs	r0, #0
    cdd0:	4b06      	ldr	r3, [pc, #24]	; (cdec <get_tc_index+0x64>)
    cdd2:	4798      	blx	r3
	return -1;
    cdd4:	f04f 33ff 	mov.w	r3, #4294967295
}
    cdd8:	4618      	mov	r0, r3
    cdda:	3710      	adds	r7, #16
    cddc:	46bd      	mov	sp, r7
    cdde:	bd80      	pop	{r7, pc}
    cde0:	0000ce8d 	.word	0x0000ce8d
    cde4:	200000e4 	.word	0x200000e4
    cde8:	0001ce6c 	.word	0x0001ce6c
    cdec:	00007b0d 	.word	0x00007b0d

0000cdf0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    cdf0:	b480      	push	{r7}
    cdf2:	b083      	sub	sp, #12
    cdf4:	af00      	add	r7, sp, #0
    cdf6:	6078      	str	r0, [r7, #4]
    cdf8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    cdfa:	687b      	ldr	r3, [r7, #4]
    cdfc:	4a17      	ldr	r2, [pc, #92]	; (ce5c <_tc_init_irq_param+0x6c>)
    cdfe:	4293      	cmp	r3, r2
    ce00:	d102      	bne.n	ce08 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    ce02:	4a17      	ldr	r2, [pc, #92]	; (ce60 <_tc_init_irq_param+0x70>)
    ce04:	683b      	ldr	r3, [r7, #0]
    ce06:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    ce08:	687b      	ldr	r3, [r7, #4]
    ce0a:	4a16      	ldr	r2, [pc, #88]	; (ce64 <_tc_init_irq_param+0x74>)
    ce0c:	4293      	cmp	r3, r2
    ce0e:	d102      	bne.n	ce16 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    ce10:	4a15      	ldr	r2, [pc, #84]	; (ce68 <_tc_init_irq_param+0x78>)
    ce12:	683b      	ldr	r3, [r7, #0]
    ce14:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    ce16:	687b      	ldr	r3, [r7, #4]
    ce18:	4a14      	ldr	r2, [pc, #80]	; (ce6c <_tc_init_irq_param+0x7c>)
    ce1a:	4293      	cmp	r3, r2
    ce1c:	d102      	bne.n	ce24 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    ce1e:	4a14      	ldr	r2, [pc, #80]	; (ce70 <_tc_init_irq_param+0x80>)
    ce20:	683b      	ldr	r3, [r7, #0]
    ce22:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	4a13      	ldr	r2, [pc, #76]	; (ce74 <_tc_init_irq_param+0x84>)
    ce28:	4293      	cmp	r3, r2
    ce2a:	d102      	bne.n	ce32 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    ce2c:	4a12      	ldr	r2, [pc, #72]	; (ce78 <_tc_init_irq_param+0x88>)
    ce2e:	683b      	ldr	r3, [r7, #0]
    ce30:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	4a11      	ldr	r2, [pc, #68]	; (ce7c <_tc_init_irq_param+0x8c>)
    ce36:	4293      	cmp	r3, r2
    ce38:	d102      	bne.n	ce40 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    ce3a:	4a11      	ldr	r2, [pc, #68]	; (ce80 <_tc_init_irq_param+0x90>)
    ce3c:	683b      	ldr	r3, [r7, #0]
    ce3e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    ce40:	687b      	ldr	r3, [r7, #4]
    ce42:	4a10      	ldr	r2, [pc, #64]	; (ce84 <_tc_init_irq_param+0x94>)
    ce44:	4293      	cmp	r3, r2
    ce46:	d102      	bne.n	ce4e <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    ce48:	4a0f      	ldr	r2, [pc, #60]	; (ce88 <_tc_init_irq_param+0x98>)
    ce4a:	683b      	ldr	r3, [r7, #0]
    ce4c:	6013      	str	r3, [r2, #0]
	}
}
    ce4e:	bf00      	nop
    ce50:	370c      	adds	r7, #12
    ce52:	46bd      	mov	sp, r7
    ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce58:	4770      	bx	lr
    ce5a:	bf00      	nop
    ce5c:	40003800 	.word	0x40003800
    ce60:	20001930 	.word	0x20001930
    ce64:	4101a000 	.word	0x4101a000
    ce68:	20001934 	.word	0x20001934
    ce6c:	42001400 	.word	0x42001400
    ce70:	20001938 	.word	0x20001938
    ce74:	42001800 	.word	0x42001800
    ce78:	2000193c 	.word	0x2000193c
    ce7c:	43001400 	.word	0x43001400
    ce80:	20001940 	.word	0x20001940
    ce84:	43001800 	.word	0x43001800
    ce88:	20001944 	.word	0x20001944

0000ce8c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    ce8c:	b4b0      	push	{r4, r5, r7}
    ce8e:	b08d      	sub	sp, #52	; 0x34
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    ce94:	4b13      	ldr	r3, [pc, #76]	; (cee4 <_get_hardware_offset+0x58>)
    ce96:	f107 040c 	add.w	r4, r7, #12
    ce9a:	461d      	mov	r5, r3
    ce9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ce9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cea0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    cea8:	2300      	movs	r3, #0
    ceaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    ceac:	e010      	b.n	ced0 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceb0:	009b      	lsls	r3, r3, #2
    ceb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ceb6:	4413      	add	r3, r2
    ceb8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    cebc:	461a      	mov	r2, r3
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	429a      	cmp	r2, r3
    cec2:	d102      	bne.n	ceca <_get_hardware_offset+0x3e>
			return i;
    cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cec6:	b2db      	uxtb	r3, r3
    cec8:	e006      	b.n	ced8 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cecc:	3301      	adds	r3, #1
    cece:	62fb      	str	r3, [r7, #44]	; 0x2c
    ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ced2:	2b07      	cmp	r3, #7
    ced4:	d9eb      	bls.n	ceae <_get_hardware_offset+0x22>
		}
	}
	return 0;
    ced6:	2300      	movs	r3, #0
}
    ced8:	4618      	mov	r0, r3
    ceda:	3734      	adds	r7, #52	; 0x34
    cedc:	46bd      	mov	sp, r7
    cede:	bcb0      	pop	{r4, r5, r7}
    cee0:	4770      	bx	lr
    cee2:	bf00      	nop
    cee4:	0001ce80 	.word	0x0001ce80

0000cee8 <__NVIC_EnableIRQ>:
{
    cee8:	b480      	push	{r7}
    ceea:	b083      	sub	sp, #12
    ceec:	af00      	add	r7, sp, #0
    ceee:	4603      	mov	r3, r0
    cef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cef6:	2b00      	cmp	r3, #0
    cef8:	db0b      	blt.n	cf12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cefa:	4909      	ldr	r1, [pc, #36]	; (cf20 <__NVIC_EnableIRQ+0x38>)
    cefc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cf00:	095b      	lsrs	r3, r3, #5
    cf02:	88fa      	ldrh	r2, [r7, #6]
    cf04:	f002 021f 	and.w	r2, r2, #31
    cf08:	2001      	movs	r0, #1
    cf0a:	fa00 f202 	lsl.w	r2, r0, r2
    cf0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf12:	bf00      	nop
    cf14:	370c      	adds	r7, #12
    cf16:	46bd      	mov	sp, r7
    cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf1c:	4770      	bx	lr
    cf1e:	bf00      	nop
    cf20:	e000e100 	.word	0xe000e100

0000cf24 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    cf24:	b480      	push	{r7}
    cf26:	b087      	sub	sp, #28
    cf28:	af00      	add	r7, sp, #0
    cf2a:	60f8      	str	r0, [r7, #12]
    cf2c:	460b      	mov	r3, r1
    cf2e:	607a      	str	r2, [r7, #4]
    cf30:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    cf32:	7afa      	ldrb	r2, [r7, #11]
    cf34:	68f9      	ldr	r1, [r7, #12]
    cf36:	4613      	mov	r3, r2
    cf38:	009b      	lsls	r3, r3, #2
    cf3a:	4413      	add	r3, r2
    cf3c:	009b      	lsls	r3, r3, #2
    cf3e:	440b      	add	r3, r1
    cf40:	3340      	adds	r3, #64	; 0x40
    cf42:	681b      	ldr	r3, [r3, #0]
    cf44:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    cf46:	697a      	ldr	r2, [r7, #20]
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	4013      	ands	r3, r2
    cf4c:	617b      	str	r3, [r7, #20]
	return tmp;
    cf4e:	697b      	ldr	r3, [r7, #20]
}
    cf50:	4618      	mov	r0, r3
    cf52:	371c      	adds	r7, #28
    cf54:	46bd      	mov	sp, r7
    cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf5a:	4770      	bx	lr

0000cf5c <hri_oscctrl_get_STATUS_reg>:
{
    cf5c:	b480      	push	{r7}
    cf5e:	b085      	sub	sp, #20
    cf60:	af00      	add	r7, sp, #0
    cf62:	6078      	str	r0, [r7, #4]
    cf64:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    cf66:	687b      	ldr	r3, [r7, #4]
    cf68:	691b      	ldr	r3, [r3, #16]
    cf6a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    cf6c:	68fa      	ldr	r2, [r7, #12]
    cf6e:	683b      	ldr	r3, [r7, #0]
    cf70:	4013      	ands	r3, r2
    cf72:	60fb      	str	r3, [r7, #12]
	return tmp;
    cf74:	68fb      	ldr	r3, [r7, #12]
}
    cf76:	4618      	mov	r0, r3
    cf78:	3714      	adds	r7, #20
    cf7a:	46bd      	mov	sp, r7
    cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf80:	4770      	bx	lr

0000cf82 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    cf82:	b480      	push	{r7}
    cf84:	b085      	sub	sp, #20
    cf86:	af00      	add	r7, sp, #0
    cf88:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    cf8a:	687b      	ldr	r3, [r7, #4]
    cf8c:	f893 3020 	ldrb.w	r3, [r3, #32]
    cf90:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    cf92:	7bfb      	ldrb	r3, [r7, #15]
    cf94:	f003 0301 	and.w	r3, r3, #1
    cf98:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    cf9a:	7bfb      	ldrb	r3, [r7, #15]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	bf14      	ite	ne
    cfa0:	2301      	movne	r3, #1
    cfa2:	2300      	moveq	r3, #0
    cfa4:	b2db      	uxtb	r3, r3
}
    cfa6:	4618      	mov	r0, r3
    cfa8:	3714      	adds	r7, #20
    cfaa:	46bd      	mov	sp, r7
    cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfb0:	4770      	bx	lr

0000cfb2 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    cfb2:	b480      	push	{r7}
    cfb4:	b083      	sub	sp, #12
    cfb6:	af00      	add	r7, sp, #0
    cfb8:	6078      	str	r0, [r7, #4]
    cfba:	460b      	mov	r3, r1
    cfbc:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    cfbe:	bf00      	nop
    cfc0:	687b      	ldr	r3, [r7, #4]
    cfc2:	789b      	ldrb	r3, [r3, #2]
    cfc4:	b2da      	uxtb	r2, r3
    cfc6:	78fb      	ldrb	r3, [r7, #3]
    cfc8:	4013      	ands	r3, r2
    cfca:	b2db      	uxtb	r3, r3
    cfcc:	2b00      	cmp	r3, #0
    cfce:	d1f7      	bne.n	cfc0 <hri_usb_wait_for_sync+0xe>
	};
}
    cfd0:	bf00      	nop
    cfd2:	370c      	adds	r7, #12
    cfd4:	46bd      	mov	sp, r7
    cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfda:	4770      	bx	lr

0000cfdc <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    cfdc:	b480      	push	{r7}
    cfde:	b083      	sub	sp, #12
    cfe0:	af00      	add	r7, sp, #0
    cfe2:	6078      	str	r0, [r7, #4]
    cfe4:	460b      	mov	r3, r1
    cfe6:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    cfe8:	687b      	ldr	r3, [r7, #4]
    cfea:	789b      	ldrb	r3, [r3, #2]
    cfec:	b2da      	uxtb	r2, r3
    cfee:	78fb      	ldrb	r3, [r7, #3]
    cff0:	4013      	ands	r3, r2
    cff2:	b2db      	uxtb	r3, r3
    cff4:	2b00      	cmp	r3, #0
    cff6:	bf14      	ite	ne
    cff8:	2301      	movne	r3, #1
    cffa:	2300      	moveq	r3, #0
    cffc:	b2db      	uxtb	r3, r3
}
    cffe:	4618      	mov	r0, r3
    d000:	370c      	adds	r7, #12
    d002:	46bd      	mov	sp, r7
    d004:	f85d 7b04 	ldr.w	r7, [sp], #4
    d008:	4770      	bx	lr

0000d00a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    d00a:	b480      	push	{r7}
    d00c:	b085      	sub	sp, #20
    d00e:	af00      	add	r7, sp, #0
    d010:	6078      	str	r0, [r7, #4]
    d012:	460b      	mov	r3, r1
    d014:	70fb      	strb	r3, [r7, #3]
    d016:	4613      	mov	r3, r2
    d018:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d01a:	78fb      	ldrb	r3, [r7, #3]
    d01c:	687a      	ldr	r2, [r7, #4]
    d01e:	3308      	adds	r3, #8
    d020:	015b      	lsls	r3, r3, #5
    d022:	4413      	add	r3, r2
    d024:	3307      	adds	r3, #7
    d026:	781b      	ldrb	r3, [r3, #0]
    d028:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d02a:	7bfa      	ldrb	r2, [r7, #15]
    d02c:	78bb      	ldrb	r3, [r7, #2]
    d02e:	4013      	ands	r3, r2
    d030:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d032:	7bfb      	ldrb	r3, [r7, #15]
}
    d034:	4618      	mov	r0, r3
    d036:	3714      	adds	r7, #20
    d038:	46bd      	mov	sp, r7
    d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d03e:	4770      	bx	lr

0000d040 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    d040:	b480      	push	{r7}
    d042:	b083      	sub	sp, #12
    d044:	af00      	add	r7, sp, #0
    d046:	6078      	str	r0, [r7, #4]
    d048:	460b      	mov	r3, r1
    d04a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d04c:	78fb      	ldrb	r3, [r7, #3]
    d04e:	687a      	ldr	r2, [r7, #4]
    d050:	3308      	adds	r3, #8
    d052:	015b      	lsls	r3, r3, #5
    d054:	4413      	add	r3, r2
    d056:	3307      	adds	r3, #7
    d058:	781b      	ldrb	r3, [r3, #0]
    d05a:	b2db      	uxtb	r3, r3
}
    d05c:	4618      	mov	r0, r3
    d05e:	370c      	adds	r7, #12
    d060:	46bd      	mov	sp, r7
    d062:	f85d 7b04 	ldr.w	r7, [sp], #4
    d066:	4770      	bx	lr

0000d068 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    d068:	b480      	push	{r7}
    d06a:	b083      	sub	sp, #12
    d06c:	af00      	add	r7, sp, #0
    d06e:	6078      	str	r0, [r7, #4]
    d070:	460b      	mov	r3, r1
    d072:	70fb      	strb	r3, [r7, #3]
    d074:	4613      	mov	r3, r2
    d076:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    d078:	78fb      	ldrb	r3, [r7, #3]
    d07a:	687a      	ldr	r2, [r7, #4]
    d07c:	3308      	adds	r3, #8
    d07e:	015b      	lsls	r3, r3, #5
    d080:	4413      	add	r3, r2
    d082:	3307      	adds	r3, #7
    d084:	78ba      	ldrb	r2, [r7, #2]
    d086:	701a      	strb	r2, [r3, #0]
}
    d088:	bf00      	nop
    d08a:	370c      	adds	r7, #12
    d08c:	46bd      	mov	sp, r7
    d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d092:	4770      	bx	lr

0000d094 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    d094:	b480      	push	{r7}
    d096:	b083      	sub	sp, #12
    d098:	af00      	add	r7, sp, #0
    d09a:	6078      	str	r0, [r7, #4]
    d09c:	460b      	mov	r3, r1
    d09e:	70fb      	strb	r3, [r7, #3]
    d0a0:	4613      	mov	r3, r2
    d0a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    d0a4:	78fb      	ldrb	r3, [r7, #3]
    d0a6:	687a      	ldr	r2, [r7, #4]
    d0a8:	3308      	adds	r3, #8
    d0aa:	015b      	lsls	r3, r3, #5
    d0ac:	4413      	add	r3, r2
    d0ae:	3305      	adds	r3, #5
    d0b0:	78ba      	ldrb	r2, [r7, #2]
    d0b2:	701a      	strb	r2, [r3, #0]
}
    d0b4:	bf00      	nop
    d0b6:	370c      	adds	r7, #12
    d0b8:	46bd      	mov	sp, r7
    d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0be:	4770      	bx	lr

0000d0c0 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    d0c0:	b480      	push	{r7}
    d0c2:	b083      	sub	sp, #12
    d0c4:	af00      	add	r7, sp, #0
    d0c6:	6078      	str	r0, [r7, #4]
    d0c8:	460b      	mov	r3, r1
    d0ca:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d0cc:	78fb      	ldrb	r3, [r7, #3]
    d0ce:	687a      	ldr	r2, [r7, #4]
    d0d0:	3308      	adds	r3, #8
    d0d2:	015b      	lsls	r3, r3, #5
    d0d4:	4413      	add	r3, r2
    d0d6:	3306      	adds	r3, #6
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	b2db      	uxtb	r3, r3
}
    d0dc:	4618      	mov	r0, r3
    d0de:	370c      	adds	r7, #12
    d0e0:	46bd      	mov	sp, r7
    d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0e6:	4770      	bx	lr

0000d0e8 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    d0e8:	b480      	push	{r7}
    d0ea:	b083      	sub	sp, #12
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	6078      	str	r0, [r7, #4]
    d0f0:	460b      	mov	r3, r1
    d0f2:	70fb      	strb	r3, [r7, #3]
    d0f4:	4613      	mov	r3, r2
    d0f6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    d0f8:	78fb      	ldrb	r3, [r7, #3]
    d0fa:	687a      	ldr	r2, [r7, #4]
    d0fc:	3308      	adds	r3, #8
    d0fe:	015b      	lsls	r3, r3, #5
    d100:	4413      	add	r3, r2
    d102:	3304      	adds	r3, #4
    d104:	78ba      	ldrb	r2, [r7, #2]
    d106:	701a      	strb	r2, [r3, #0]
}
    d108:	bf00      	nop
    d10a:	370c      	adds	r7, #12
    d10c:	46bd      	mov	sp, r7
    d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d112:	4770      	bx	lr

0000d114 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    d114:	b480      	push	{r7}
    d116:	b083      	sub	sp, #12
    d118:	af00      	add	r7, sp, #0
    d11a:	6078      	str	r0, [r7, #4]
    d11c:	460b      	mov	r3, r1
    d11e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    d120:	78fb      	ldrb	r3, [r7, #3]
    d122:	687a      	ldr	r2, [r7, #4]
    d124:	015b      	lsls	r3, r3, #5
    d126:	4413      	add	r3, r2
    d128:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d12c:	2210      	movs	r2, #16
    d12e:	701a      	strb	r2, [r3, #0]
}
    d130:	bf00      	nop
    d132:	370c      	adds	r7, #12
    d134:	46bd      	mov	sp, r7
    d136:	f85d 7b04 	ldr.w	r7, [sp], #4
    d13a:	4770      	bx	lr

0000d13c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    d13c:	b480      	push	{r7}
    d13e:	b083      	sub	sp, #12
    d140:	af00      	add	r7, sp, #0
    d142:	6078      	str	r0, [r7, #4]
    d144:	460b      	mov	r3, r1
    d146:	70fb      	strb	r3, [r7, #3]
    d148:	4613      	mov	r3, r2
    d14a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    d14c:	78fb      	ldrb	r3, [r7, #3]
    d14e:	687a      	ldr	r2, [r7, #4]
    d150:	015b      	lsls	r3, r3, #5
    d152:	4413      	add	r3, r2
    d154:	f203 1309 	addw	r3, r3, #265	; 0x109
    d158:	78ba      	ldrb	r2, [r7, #2]
    d15a:	701a      	strb	r2, [r3, #0]
}
    d15c:	bf00      	nop
    d15e:	370c      	adds	r7, #12
    d160:	46bd      	mov	sp, r7
    d162:	f85d 7b04 	ldr.w	r7, [sp], #4
    d166:	4770      	bx	lr

0000d168 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    d168:	b480      	push	{r7}
    d16a:	b083      	sub	sp, #12
    d16c:	af00      	add	r7, sp, #0
    d16e:	6078      	str	r0, [r7, #4]
    d170:	460b      	mov	r3, r1
    d172:	70fb      	strb	r3, [r7, #3]
    d174:	4613      	mov	r3, r2
    d176:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    d178:	78fb      	ldrb	r3, [r7, #3]
    d17a:	687a      	ldr	r2, [r7, #4]
    d17c:	015b      	lsls	r3, r3, #5
    d17e:	4413      	add	r3, r2
    d180:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d184:	78ba      	ldrb	r2, [r7, #2]
    d186:	701a      	strb	r2, [r3, #0]
}
    d188:	bf00      	nop
    d18a:	370c      	adds	r7, #12
    d18c:	46bd      	mov	sp, r7
    d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d192:	4770      	bx	lr

0000d194 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d194:	b480      	push	{r7}
    d196:	b085      	sub	sp, #20
    d198:	af00      	add	r7, sp, #0
    d19a:	6078      	str	r0, [r7, #4]
    d19c:	460b      	mov	r3, r1
    d19e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d1a0:	78fb      	ldrb	r3, [r7, #3]
    d1a2:	687a      	ldr	r2, [r7, #4]
    d1a4:	3308      	adds	r3, #8
    d1a6:	015b      	lsls	r3, r3, #5
    d1a8:	4413      	add	r3, r2
    d1aa:	781b      	ldrb	r3, [r3, #0]
    d1ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    d1ae:	7bfb      	ldrb	r3, [r7, #15]
    d1b0:	f003 0307 	and.w	r3, r3, #7
    d1b4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d1b6:	7bfb      	ldrb	r3, [r7, #15]
}
    d1b8:	4618      	mov	r0, r3
    d1ba:	3714      	adds	r7, #20
    d1bc:	46bd      	mov	sp, r7
    d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1c2:	4770      	bx	lr

0000d1c4 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d1c4:	b480      	push	{r7}
    d1c6:	b085      	sub	sp, #20
    d1c8:	af00      	add	r7, sp, #0
    d1ca:	6078      	str	r0, [r7, #4]
    d1cc:	460b      	mov	r3, r1
    d1ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d1d0:	78fb      	ldrb	r3, [r7, #3]
    d1d2:	687a      	ldr	r2, [r7, #4]
    d1d4:	3308      	adds	r3, #8
    d1d6:	015b      	lsls	r3, r3, #5
    d1d8:	4413      	add	r3, r2
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    d1de:	7bfb      	ldrb	r3, [r7, #15]
    d1e0:	091b      	lsrs	r3, r3, #4
    d1e2:	b2db      	uxtb	r3, r3
    d1e4:	f003 0307 	and.w	r3, r3, #7
    d1e8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d1ea:	7bfb      	ldrb	r3, [r7, #15]
}
    d1ec:	4618      	mov	r0, r3
    d1ee:	3714      	adds	r7, #20
    d1f0:	46bd      	mov	sp, r7
    d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1f6:	4770      	bx	lr

0000d1f8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    d1f8:	b480      	push	{r7}
    d1fa:	b083      	sub	sp, #12
    d1fc:	af00      	add	r7, sp, #0
    d1fe:	6078      	str	r0, [r7, #4]
    d200:	460b      	mov	r3, r1
    d202:	70fb      	strb	r3, [r7, #3]
    d204:	4613      	mov	r3, r2
    d206:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    d208:	78fb      	ldrb	r3, [r7, #3]
    d20a:	687a      	ldr	r2, [r7, #4]
    d20c:	3308      	adds	r3, #8
    d20e:	015b      	lsls	r3, r3, #5
    d210:	4413      	add	r3, r2
    d212:	78ba      	ldrb	r2, [r7, #2]
    d214:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    d216:	bf00      	nop
    d218:	370c      	adds	r7, #12
    d21a:	46bd      	mov	sp, r7
    d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d220:	4770      	bx	lr

0000d222 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    d222:	b480      	push	{r7}
    d224:	b083      	sub	sp, #12
    d226:	af00      	add	r7, sp, #0
    d228:	6078      	str	r0, [r7, #4]
    d22a:	460b      	mov	r3, r1
    d22c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d22e:	78fb      	ldrb	r3, [r7, #3]
    d230:	687a      	ldr	r2, [r7, #4]
    d232:	3308      	adds	r3, #8
    d234:	015b      	lsls	r3, r3, #5
    d236:	4413      	add	r3, r2
    d238:	781b      	ldrb	r3, [r3, #0]
    d23a:	b2db      	uxtb	r3, r3
}
    d23c:	4618      	mov	r0, r3
    d23e:	370c      	adds	r7, #12
    d240:	46bd      	mov	sp, r7
    d242:	f85d 7b04 	ldr.w	r7, [sp], #4
    d246:	4770      	bx	lr

0000d248 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    d248:	b480      	push	{r7}
    d24a:	b083      	sub	sp, #12
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	8b9b      	ldrh	r3, [r3, #28]
    d254:	b29b      	uxth	r3, r3
}
    d256:	4618      	mov	r0, r3
    d258:	370c      	adds	r7, #12
    d25a:	46bd      	mov	sp, r7
    d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d260:	4770      	bx	lr

0000d262 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    d262:	b480      	push	{r7}
    d264:	b083      	sub	sp, #12
    d266:	af00      	add	r7, sp, #0
    d268:	6078      	str	r0, [r7, #4]
    d26a:	460b      	mov	r3, r1
    d26c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    d26e:	687b      	ldr	r3, [r7, #4]
    d270:	887a      	ldrh	r2, [r7, #2]
    d272:	839a      	strh	r2, [r3, #28]
}
    d274:	bf00      	nop
    d276:	370c      	adds	r7, #12
    d278:	46bd      	mov	sp, r7
    d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d27e:	4770      	bx	lr

0000d280 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    d280:	b480      	push	{r7}
    d282:	b083      	sub	sp, #12
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
    d288:	460b      	mov	r3, r1
    d28a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    d28c:	687b      	ldr	r3, [r7, #4]
    d28e:	887a      	ldrh	r2, [r7, #2]
    d290:	831a      	strh	r2, [r3, #24]
}
    d292:	bf00      	nop
    d294:	370c      	adds	r7, #12
    d296:	46bd      	mov	sp, r7
    d298:	f85d 7b04 	ldr.w	r7, [sp], #4
    d29c:	4770      	bx	lr

0000d29e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    d29e:	b480      	push	{r7}
    d2a0:	b083      	sub	sp, #12
    d2a2:	af00      	add	r7, sp, #0
    d2a4:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    d2a6:	687b      	ldr	r3, [r7, #4]
    d2a8:	8b1b      	ldrh	r3, [r3, #24]
    d2aa:	b29b      	uxth	r3, r3
}
    d2ac:	4618      	mov	r0, r3
    d2ae:	370c      	adds	r7, #12
    d2b0:	46bd      	mov	sp, r7
    d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2b6:	4770      	bx	lr

0000d2b8 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    d2b8:	b480      	push	{r7}
    d2ba:	b083      	sub	sp, #12
    d2bc:	af00      	add	r7, sp, #0
    d2be:	6078      	str	r0, [r7, #4]
    d2c0:	460b      	mov	r3, r1
    d2c2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    d2c4:	687b      	ldr	r3, [r7, #4]
    d2c6:	887a      	ldrh	r2, [r7, #2]
    d2c8:	829a      	strh	r2, [r3, #20]
}
    d2ca:	bf00      	nop
    d2cc:	370c      	adds	r7, #12
    d2ce:	46bd      	mov	sp, r7
    d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2d4:	4770      	bx	lr

0000d2d6 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    d2d6:	b480      	push	{r7}
    d2d8:	b085      	sub	sp, #20
    d2da:	af00      	add	r7, sp, #0
    d2dc:	6078      	str	r0, [r7, #4]
    d2de:	460b      	mov	r3, r1
    d2e0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    d2e2:	687b      	ldr	r3, [r7, #4]
    d2e4:	789b      	ldrb	r3, [r3, #2]
    d2e6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d2e8:	7bfa      	ldrb	r2, [r7, #15]
    d2ea:	78fb      	ldrb	r3, [r7, #3]
    d2ec:	4013      	ands	r3, r2
    d2ee:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
    d2f2:	4618      	mov	r0, r3
    d2f4:	3714      	adds	r7, #20
    d2f6:	46bd      	mov	sp, r7
    d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2fc:	4770      	bx	lr
	...

0000d300 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d300:	b580      	push	{r7, lr}
    d302:	b082      	sub	sp, #8
    d304:	af00      	add	r7, sp, #0
    d306:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    d308:	687b      	ldr	r3, [r7, #4]
    d30a:	781b      	ldrb	r3, [r3, #0]
    d30c:	b2db      	uxtb	r3, r3
    d30e:	f023 0302 	bic.w	r3, r3, #2
    d312:	b2da      	uxtb	r2, r3
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    d318:	2103      	movs	r1, #3
    d31a:	6878      	ldr	r0, [r7, #4]
    d31c:	4b02      	ldr	r3, [pc, #8]	; (d328 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    d31e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    d320:	bf00      	nop
    d322:	3708      	adds	r7, #8
    d324:	46bd      	mov	sp, r7
    d326:	bd80      	pop	{r7, pc}
    d328:	0000cfb3 	.word	0x0000cfb3

0000d32c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    d32c:	b580      	push	{r7, lr}
    d32e:	b084      	sub	sp, #16
    d330:	af00      	add	r7, sp, #0
    d332:	6078      	str	r0, [r7, #4]
    d334:	460b      	mov	r3, r1
    d336:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d338:	2103      	movs	r1, #3
    d33a:	6878      	ldr	r0, [r7, #4]
    d33c:	4b06      	ldr	r3, [pc, #24]	; (d358 <hri_usb_get_CTRLA_reg+0x2c>)
    d33e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d346:	7bfa      	ldrb	r2, [r7, #15]
    d348:	78fb      	ldrb	r3, [r7, #3]
    d34a:	4013      	ands	r3, r2
    d34c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d34e:	7bfb      	ldrb	r3, [r7, #15]
}
    d350:	4618      	mov	r0, r3
    d352:	3710      	adds	r7, #16
    d354:	46bd      	mov	sp, r7
    d356:	bd80      	pop	{r7, pc}
    d358:	0000cfb3 	.word	0x0000cfb3

0000d35c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    d35c:	b580      	push	{r7, lr}
    d35e:	b082      	sub	sp, #8
    d360:	af00      	add	r7, sp, #0
    d362:	6078      	str	r0, [r7, #4]
    d364:	460b      	mov	r3, r1
    d366:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    d368:	687b      	ldr	r3, [r7, #4]
    d36a:	78fa      	ldrb	r2, [r7, #3]
    d36c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d36e:	2103      	movs	r1, #3
    d370:	6878      	ldr	r0, [r7, #4]
    d372:	4b03      	ldr	r3, [pc, #12]	; (d380 <hri_usb_write_CTRLA_reg+0x24>)
    d374:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    d376:	bf00      	nop
    d378:	3708      	adds	r7, #8
    d37a:	46bd      	mov	sp, r7
    d37c:	bd80      	pop	{r7, pc}
    d37e:	bf00      	nop
    d380:	0000cfb3 	.word	0x0000cfb3

0000d384 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    d384:	b580      	push	{r7, lr}
    d386:	b082      	sub	sp, #8
    d388:	af00      	add	r7, sp, #0
    d38a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d38c:	2103      	movs	r1, #3
    d38e:	6878      	ldr	r0, [r7, #4]
    d390:	4b04      	ldr	r3, [pc, #16]	; (d3a4 <hri_usb_read_CTRLA_reg+0x20>)
    d392:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	b2db      	uxtb	r3, r3
}
    d39a:	4618      	mov	r0, r3
    d39c:	3708      	adds	r7, #8
    d39e:	46bd      	mov	sp, r7
    d3a0:	bd80      	pop	{r7, pc}
    d3a2:	bf00      	nop
    d3a4:	0000cfb3 	.word	0x0000cfb3

0000d3a8 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    d3a8:	b480      	push	{r7}
    d3aa:	b083      	sub	sp, #12
    d3ac:	af00      	add	r7, sp, #0
    d3ae:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	891b      	ldrh	r3, [r3, #8]
    d3b4:	b29b      	uxth	r3, r3
    d3b6:	f023 0301 	bic.w	r3, r3, #1
    d3ba:	b29a      	uxth	r2, r3
    d3bc:	687b      	ldr	r3, [r7, #4]
    d3be:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    d3c0:	bf00      	nop
    d3c2:	370c      	adds	r7, #12
    d3c4:	46bd      	mov	sp, r7
    d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3ca:	4770      	bx	lr

0000d3cc <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    d3cc:	b480      	push	{r7}
    d3ce:	b083      	sub	sp, #12
    d3d0:	af00      	add	r7, sp, #0
    d3d2:	6078      	str	r0, [r7, #4]
    d3d4:	460b      	mov	r3, r1
    d3d6:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	887a      	ldrh	r2, [r7, #2]
    d3dc:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    d3de:	bf00      	nop
    d3e0:	370c      	adds	r7, #12
    d3e2:	46bd      	mov	sp, r7
    d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3e8:	4770      	bx	lr

0000d3ea <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    d3ea:	b480      	push	{r7}
    d3ec:	b083      	sub	sp, #12
    d3ee:	af00      	add	r7, sp, #0
    d3f0:	6078      	str	r0, [r7, #4]
    d3f2:	460b      	mov	r3, r1
    d3f4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	78fa      	ldrb	r2, [r7, #3]
    d3fa:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    d3fc:	bf00      	nop
    d3fe:	370c      	adds	r7, #12
    d400:	46bd      	mov	sp, r7
    d402:	f85d 7b04 	ldr.w	r7, [sp], #4
    d406:	4770      	bx	lr

0000d408 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    d408:	b480      	push	{r7}
    d40a:	b083      	sub	sp, #12
    d40c:	af00      	add	r7, sp, #0
    d40e:	6078      	str	r0, [r7, #4]
    d410:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    d412:	687b      	ldr	r3, [r7, #4]
    d414:	683a      	ldr	r2, [r7, #0]
    d416:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    d418:	bf00      	nop
    d41a:	370c      	adds	r7, #12
    d41c:	46bd      	mov	sp, r7
    d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d422:	4770      	bx	lr

0000d424 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    d424:	b480      	push	{r7}
    d426:	b083      	sub	sp, #12
    d428:	af00      	add	r7, sp, #0
    d42a:	6078      	str	r0, [r7, #4]
    d42c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    d42e:	2300      	movs	r3, #0
}
    d430:	4618      	mov	r0, r3
    d432:	370c      	adds	r7, #12
    d434:	46bd      	mov	sp, r7
    d436:	f85d 7b04 	ldr.w	r7, [sp], #4
    d43a:	4770      	bx	lr

0000d43c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    d43c:	b480      	push	{r7}
    d43e:	b085      	sub	sp, #20
    d440:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    d442:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d446:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    d448:	4b28      	ldr	r3, [pc, #160]	; (d4ec <_usb_load_calib+0xb0>)
    d44a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    d44c:	f003 031f 	and.w	r3, r3, #31
    d450:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    d452:	4b26      	ldr	r3, [pc, #152]	; (d4ec <_usb_load_calib+0xb0>)
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    d458:	f003 031f 	and.w	r3, r3, #31
    d45c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    d45e:	4b23      	ldr	r3, [pc, #140]	; (d4ec <_usb_load_calib+0xb0>)
    d460:	681b      	ldr	r3, [r3, #0]
    d462:	0a9b      	lsrs	r3, r3, #10
    d464:	f003 0307 	and.w	r3, r3, #7
    d468:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    d46a:	68fb      	ldr	r3, [r7, #12]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d002      	beq.n	d476 <_usb_load_calib+0x3a>
    d470:	68fb      	ldr	r3, [r7, #12]
    d472:	2b1f      	cmp	r3, #31
    d474:	d101      	bne.n	d47a <_usb_load_calib+0x3e>
		pad_transn = 9;
    d476:	2309      	movs	r3, #9
    d478:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    d47a:	68bb      	ldr	r3, [r7, #8]
    d47c:	2b00      	cmp	r3, #0
    d47e:	d002      	beq.n	d486 <_usb_load_calib+0x4a>
    d480:	68bb      	ldr	r3, [r7, #8]
    d482:	2b1f      	cmp	r3, #31
    d484:	d101      	bne.n	d48a <_usb_load_calib+0x4e>
		pad_transp = 25;
    d486:	2319      	movs	r3, #25
    d488:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	2b00      	cmp	r3, #0
    d48e:	d002      	beq.n	d496 <_usb_load_calib+0x5a>
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	2b07      	cmp	r3, #7
    d494:	d101      	bne.n	d49a <_usb_load_calib+0x5e>
		pad_trim = 6;
    d496:	2306      	movs	r3, #6
    d498:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    d49a:	68fb      	ldr	r3, [r7, #12]
    d49c:	b29b      	uxth	r3, r3
    d49e:	019b      	lsls	r3, r3, #6
    d4a0:	b29b      	uxth	r3, r3
    d4a2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    d4a6:	b29a      	uxth	r2, r3
    d4a8:	68bb      	ldr	r3, [r7, #8]
    d4aa:	b29b      	uxth	r3, r3
    d4ac:	f003 031f 	and.w	r3, r3, #31
    d4b0:	b29b      	uxth	r3, r3
    d4b2:	4313      	orrs	r3, r2
    d4b4:	b29a      	uxth	r2, r3
    d4b6:	687b      	ldr	r3, [r7, #4]
    d4b8:	b29b      	uxth	r3, r3
    d4ba:	031b      	lsls	r3, r3, #12
    d4bc:	b29b      	uxth	r3, r3
    d4be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    d4c2:	b29b      	uxth	r3, r3
    d4c4:	4313      	orrs	r3, r2
    d4c6:	b29a      	uxth	r2, r3
    d4c8:	683b      	ldr	r3, [r7, #0]
    d4ca:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    d4cc:	683a      	ldr	r2, [r7, #0]
    d4ce:	78d3      	ldrb	r3, [r2, #3]
    d4d0:	f043 0303 	orr.w	r3, r3, #3
    d4d4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    d4d6:	683a      	ldr	r2, [r7, #0]
    d4d8:	78d3      	ldrb	r3, [r2, #3]
    d4da:	f043 030c 	orr.w	r3, r3, #12
    d4de:	70d3      	strb	r3, [r2, #3]
}
    d4e0:	bf00      	nop
    d4e2:	3714      	adds	r7, #20
    d4e4:	46bd      	mov	sp, r7
    d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4ea:	4770      	bx	lr
    d4ec:	00800084 	.word	0x00800084

0000d4f0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    d4f0:	b580      	push	{r7, lr}
    d4f2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    d4f4:	bf00      	nop
    d4f6:	2203      	movs	r2, #3
    d4f8:	2100      	movs	r1, #0
    d4fa:	4804      	ldr	r0, [pc, #16]	; (d50c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    d4fc:	4b04      	ldr	r3, [pc, #16]	; (d510 <_usb_d_dev_wait_dpll_rdy+0x20>)
    d4fe:	4798      	blx	r3
    d500:	4603      	mov	r3, r0
    d502:	2b03      	cmp	r3, #3
    d504:	d1f7      	bne.n	d4f6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    d506:	bf00      	nop
    d508:	bd80      	pop	{r7, pc}
    d50a:	bf00      	nop
    d50c:	40001000 	.word	0x40001000
    d510:	0000cf25 	.word	0x0000cf25

0000d514 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    d514:	b580      	push	{r7, lr}
    d516:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    d518:	480e      	ldr	r0, [pc, #56]	; (d554 <_usb_d_dev_wait_dfll_rdy+0x40>)
    d51a:	4b0f      	ldr	r3, [pc, #60]	; (d558 <_usb_d_dev_wait_dfll_rdy+0x44>)
    d51c:	4798      	blx	r3
    d51e:	4603      	mov	r3, r0
    d520:	2b00      	cmp	r3, #0
    d522:	d00a      	beq.n	d53a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    d524:	bf00      	nop
    d526:	f44f 6110 	mov.w	r1, #2304	; 0x900
    d52a:	480a      	ldr	r0, [pc, #40]	; (d554 <_usb_d_dev_wait_dfll_rdy+0x40>)
    d52c:	4b0b      	ldr	r3, [pc, #44]	; (d55c <_usb_d_dev_wait_dfll_rdy+0x48>)
    d52e:	4798      	blx	r3
    d530:	4603      	mov	r3, r0
    d532:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    d536:	d1f6      	bne.n	d526 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    d538:	e009      	b.n	d54e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    d53a:	bf00      	nop
    d53c:	f44f 7180 	mov.w	r1, #256	; 0x100
    d540:	4804      	ldr	r0, [pc, #16]	; (d554 <_usb_d_dev_wait_dfll_rdy+0x40>)
    d542:	4b06      	ldr	r3, [pc, #24]	; (d55c <_usb_d_dev_wait_dfll_rdy+0x48>)
    d544:	4798      	blx	r3
    d546:	4603      	mov	r3, r0
    d548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d54c:	d1f6      	bne.n	d53c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    d54e:	bf00      	nop
    d550:	bd80      	pop	{r7, pc}
    d552:	bf00      	nop
    d554:	40001000 	.word	0x40001000
    d558:	0000cf83 	.word	0x0000cf83
    d55c:	0000cf5d 	.word	0x0000cf5d

0000d560 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    d560:	b580      	push	{r7, lr}
    d562:	b082      	sub	sp, #8
    d564:	af00      	add	r7, sp, #0
    d566:	4603      	mov	r3, r0
    d568:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    d56a:	79fb      	ldrb	r3, [r7, #7]
    d56c:	2b00      	cmp	r3, #0
    d56e:	d102      	bne.n	d576 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    d570:	4b05      	ldr	r3, [pc, #20]	; (d588 <_usb_d_dev_wait_clk_rdy+0x28>)
    d572:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    d574:	e004      	b.n	d580 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    d576:	79fb      	ldrb	r3, [r7, #7]
    d578:	2b01      	cmp	r3, #1
    d57a:	d101      	bne.n	d580 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    d57c:	4b03      	ldr	r3, [pc, #12]	; (d58c <_usb_d_dev_wait_clk_rdy+0x2c>)
    d57e:	4798      	blx	r3
}
    d580:	bf00      	nop
    d582:	3708      	adds	r7, #8
    d584:	46bd      	mov	sp, r7
    d586:	bd80      	pop	{r7, pc}
    d588:	0000d515 	.word	0x0000d515
    d58c:	0000d4f1 	.word	0x0000d4f1

0000d590 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    d590:	b580      	push	{r7, lr}
    d592:	b082      	sub	sp, #8
    d594:	af00      	add	r7, sp, #0
    d596:	4603      	mov	r3, r0
    d598:	6039      	str	r1, [r7, #0]
    d59a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    d59c:	683b      	ldr	r3, [r7, #0]
    d59e:	b2da      	uxtb	r2, r3
    d5a0:	79fb      	ldrb	r3, [r7, #7]
    d5a2:	4619      	mov	r1, r3
    d5a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d5a8:	4b02      	ldr	r3, [pc, #8]	; (d5b4 <_usbd_ep_int_ack+0x24>)
    d5aa:	4798      	blx	r3
}
    d5ac:	bf00      	nop
    d5ae:	3708      	adds	r7, #8
    d5b0:	46bd      	mov	sp, r7
    d5b2:	bd80      	pop	{r7, pc}
    d5b4:	0000d069 	.word	0x0000d069

0000d5b8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    d5b8:	b580      	push	{r7, lr}
    d5ba:	b082      	sub	sp, #8
    d5bc:	af00      	add	r7, sp, #0
    d5be:	4603      	mov	r3, r0
    d5c0:	6039      	str	r1, [r7, #0]
    d5c2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    d5c4:	683b      	ldr	r3, [r7, #0]
    d5c6:	b2da      	uxtb	r2, r3
    d5c8:	79fb      	ldrb	r3, [r7, #7]
    d5ca:	4619      	mov	r1, r3
    d5cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d5d0:	4b02      	ldr	r3, [pc, #8]	; (d5dc <_usbd_ep_int_en+0x24>)
    d5d2:	4798      	blx	r3
}
    d5d4:	bf00      	nop
    d5d6:	3708      	adds	r7, #8
    d5d8:	46bd      	mov	sp, r7
    d5da:	bd80      	pop	{r7, pc}
    d5dc:	0000d13d 	.word	0x0000d13d

0000d5e0 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    d5e0:	b580      	push	{r7, lr}
    d5e2:	b082      	sub	sp, #8
    d5e4:	af00      	add	r7, sp, #0
    d5e6:	4603      	mov	r3, r0
    d5e8:	6039      	str	r1, [r7, #0]
    d5ea:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    d5ec:	683b      	ldr	r3, [r7, #0]
    d5ee:	b2da      	uxtb	r2, r3
    d5f0:	79fb      	ldrb	r3, [r7, #7]
    d5f2:	4619      	mov	r1, r3
    d5f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d5f8:	4b02      	ldr	r3, [pc, #8]	; (d604 <_usbd_ep_int_dis+0x24>)
    d5fa:	4798      	blx	r3
}
    d5fc:	bf00      	nop
    d5fe:	3708      	adds	r7, #8
    d600:	46bd      	mov	sp, r7
    d602:	bd80      	pop	{r7, pc}
    d604:	0000d169 	.word	0x0000d169

0000d608 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    d608:	b580      	push	{r7, lr}
    d60a:	b082      	sub	sp, #8
    d60c:	af00      	add	r7, sp, #0
    d60e:	4603      	mov	r3, r0
    d610:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    d612:	79fb      	ldrb	r3, [r7, #7]
    d614:	4619      	mov	r1, r3
    d616:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d61a:	4b06      	ldr	r3, [pc, #24]	; (d634 <_usbd_ep_is_ctrl+0x2c>)
    d61c:	4798      	blx	r3
    d61e:	4603      	mov	r3, r0
    d620:	2b11      	cmp	r3, #17
    d622:	bf0c      	ite	eq
    d624:	2301      	moveq	r3, #1
    d626:	2300      	movne	r3, #0
    d628:	b2db      	uxtb	r3, r3
}
    d62a:	4618      	mov	r0, r3
    d62c:	3708      	adds	r7, #8
    d62e:	46bd      	mov	sp, r7
    d630:	bd80      	pop	{r7, pc}
    d632:	bf00      	nop
    d634:	0000d223 	.word	0x0000d223

0000d638 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    d638:	b580      	push	{r7, lr}
    d63a:	b082      	sub	sp, #8
    d63c:	af00      	add	r7, sp, #0
    d63e:	4603      	mov	r3, r0
    d640:	71fb      	strb	r3, [r7, #7]
    d642:	460b      	mov	r3, r1
    d644:	71bb      	strb	r3, [r7, #6]
    d646:	4613      	mov	r3, r2
    d648:	717b      	strb	r3, [r7, #5]
	if (st) {
    d64a:	797b      	ldrb	r3, [r7, #5]
    d64c:	2b00      	cmp	r3, #0
    d64e:	d00b      	beq.n	d668 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d650:	79bb      	ldrb	r3, [r7, #6]
    d652:	2210      	movs	r2, #16
    d654:	fa02 f303 	lsl.w	r3, r2, r3
    d658:	b2da      	uxtb	r2, r3
    d65a:	79fb      	ldrb	r3, [r7, #7]
    d65c:	4619      	mov	r1, r3
    d65e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d662:	4b09      	ldr	r3, [pc, #36]	; (d688 <_usbd_ep_set_stall+0x50>)
    d664:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    d666:	e00a      	b.n	d67e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d668:	79bb      	ldrb	r3, [r7, #6]
    d66a:	2210      	movs	r2, #16
    d66c:	fa02 f303 	lsl.w	r3, r2, r3
    d670:	b2da      	uxtb	r2, r3
    d672:	79fb      	ldrb	r3, [r7, #7]
    d674:	4619      	mov	r1, r3
    d676:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d67a:	4b04      	ldr	r3, [pc, #16]	; (d68c <_usbd_ep_set_stall+0x54>)
    d67c:	4798      	blx	r3
}
    d67e:	bf00      	nop
    d680:	3708      	adds	r7, #8
    d682:	46bd      	mov	sp, r7
    d684:	bd80      	pop	{r7, pc}
    d686:	bf00      	nop
    d688:	0000d095 	.word	0x0000d095
    d68c:	0000d0e9 	.word	0x0000d0e9

0000d690 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    d690:	b580      	push	{r7, lr}
    d692:	b084      	sub	sp, #16
    d694:	af00      	add	r7, sp, #0
    d696:	4603      	mov	r3, r0
    d698:	460a      	mov	r2, r1
    d69a:	71fb      	strb	r3, [r7, #7]
    d69c:	4613      	mov	r3, r2
    d69e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    d6a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d6a4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d6a6:	79fb      	ldrb	r3, [r7, #7]
    d6a8:	4619      	mov	r1, r3
    d6aa:	68f8      	ldr	r0, [r7, #12]
    d6ac:	4b08      	ldr	r3, [pc, #32]	; (d6d0 <_usbd_ep_is_stalled+0x40>)
    d6ae:	4798      	blx	r3
    d6b0:	4603      	mov	r3, r0
    d6b2:	4619      	mov	r1, r3
    d6b4:	79bb      	ldrb	r3, [r7, #6]
    d6b6:	2210      	movs	r2, #16
    d6b8:	fa02 f303 	lsl.w	r3, r2, r3
    d6bc:	400b      	ands	r3, r1
    d6be:	2b00      	cmp	r3, #0
    d6c0:	bf14      	ite	ne
    d6c2:	2301      	movne	r3, #1
    d6c4:	2300      	moveq	r3, #0
    d6c6:	b2db      	uxtb	r3, r3
}
    d6c8:	4618      	mov	r0, r3
    d6ca:	3710      	adds	r7, #16
    d6cc:	46bd      	mov	sp, r7
    d6ce:	bd80      	pop	{r7, pc}
    d6d0:	0000d0c1 	.word	0x0000d0c1

0000d6d4 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    d6d4:	b580      	push	{r7, lr}
    d6d6:	b084      	sub	sp, #16
    d6d8:	af00      	add	r7, sp, #0
    d6da:	4603      	mov	r3, r0
    d6dc:	460a      	mov	r2, r1
    d6de:	71fb      	strb	r3, [r7, #7]
    d6e0:	4613      	mov	r3, r2
    d6e2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    d6e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d6e8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    d6ea:	79fb      	ldrb	r3, [r7, #7]
    d6ec:	4619      	mov	r1, r3
    d6ee:	68f8      	ldr	r0, [r7, #12]
    d6f0:	4b08      	ldr	r3, [pc, #32]	; (d714 <_usbd_ep_is_stall_sent+0x40>)
    d6f2:	4798      	blx	r3
    d6f4:	4603      	mov	r3, r0
    d6f6:	4619      	mov	r1, r3
    d6f8:	79bb      	ldrb	r3, [r7, #6]
    d6fa:	2220      	movs	r2, #32
    d6fc:	fa02 f303 	lsl.w	r3, r2, r3
    d700:	400b      	ands	r3, r1
    d702:	2b00      	cmp	r3, #0
    d704:	bf14      	ite	ne
    d706:	2301      	movne	r3, #1
    d708:	2300      	moveq	r3, #0
    d70a:	b2db      	uxtb	r3, r3
}
    d70c:	4618      	mov	r0, r3
    d70e:	3710      	adds	r7, #16
    d710:	46bd      	mov	sp, r7
    d712:	bd80      	pop	{r7, pc}
    d714:	0000d041 	.word	0x0000d041

0000d718 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    d718:	b580      	push	{r7, lr}
    d71a:	b082      	sub	sp, #8
    d71c:	af00      	add	r7, sp, #0
    d71e:	4603      	mov	r3, r0
    d720:	460a      	mov	r2, r1
    d722:	71fb      	strb	r3, [r7, #7]
    d724:	4613      	mov	r3, r2
    d726:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    d728:	79bb      	ldrb	r3, [r7, #6]
    d72a:	2220      	movs	r2, #32
    d72c:	409a      	lsls	r2, r3
    d72e:	79fb      	ldrb	r3, [r7, #7]
    d730:	4611      	mov	r1, r2
    d732:	4618      	mov	r0, r3
    d734:	4b02      	ldr	r3, [pc, #8]	; (d740 <_usbd_ep_ack_stall+0x28>)
    d736:	4798      	blx	r3
}
    d738:	bf00      	nop
    d73a:	3708      	adds	r7, #8
    d73c:	46bd      	mov	sp, r7
    d73e:	bd80      	pop	{r7, pc}
    d740:	0000d591 	.word	0x0000d591

0000d744 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    d744:	b580      	push	{r7, lr}
    d746:	b082      	sub	sp, #8
    d748:	af00      	add	r7, sp, #0
    d74a:	4603      	mov	r3, r0
    d74c:	71fb      	strb	r3, [r7, #7]
    d74e:	460b      	mov	r3, r1
    d750:	71bb      	strb	r3, [r7, #6]
    d752:	4613      	mov	r3, r2
    d754:	717b      	strb	r3, [r7, #5]
	if (en) {
    d756:	797b      	ldrb	r3, [r7, #5]
    d758:	2b00      	cmp	r3, #0
    d75a:	d008      	beq.n	d76e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    d75c:	79bb      	ldrb	r3, [r7, #6]
    d75e:	2220      	movs	r2, #32
    d760:	409a      	lsls	r2, r3
    d762:	79fb      	ldrb	r3, [r7, #7]
    d764:	4611      	mov	r1, r2
    d766:	4618      	mov	r0, r3
    d768:	4b07      	ldr	r3, [pc, #28]	; (d788 <_usbd_ep_int_stall_en+0x44>)
    d76a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    d76c:	e007      	b.n	d77e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    d76e:	79bb      	ldrb	r3, [r7, #6]
    d770:	2220      	movs	r2, #32
    d772:	409a      	lsls	r2, r3
    d774:	79fb      	ldrb	r3, [r7, #7]
    d776:	4611      	mov	r1, r2
    d778:	4618      	mov	r0, r3
    d77a:	4b04      	ldr	r3, [pc, #16]	; (d78c <_usbd_ep_int_stall_en+0x48>)
    d77c:	4798      	blx	r3
}
    d77e:	bf00      	nop
    d780:	3708      	adds	r7, #8
    d782:	46bd      	mov	sp, r7
    d784:	bd80      	pop	{r7, pc}
    d786:	bf00      	nop
    d788:	0000d5b9 	.word	0x0000d5b9
    d78c:	0000d5e1 	.word	0x0000d5e1

0000d790 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    d790:	b580      	push	{r7, lr}
    d792:	b082      	sub	sp, #8
    d794:	af00      	add	r7, sp, #0
    d796:	4603      	mov	r3, r0
    d798:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    d79a:	79fb      	ldrb	r3, [r7, #7]
    d79c:	4619      	mov	r1, r3
    d79e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d7a2:	4b03      	ldr	r3, [pc, #12]	; (d7b0 <_usbd_ep_stop_setup+0x20>)
    d7a4:	4798      	blx	r3
}
    d7a6:	bf00      	nop
    d7a8:	3708      	adds	r7, #8
    d7aa:	46bd      	mov	sp, r7
    d7ac:	bd80      	pop	{r7, pc}
    d7ae:	bf00      	nop
    d7b0:	0000d115 	.word	0x0000d115

0000d7b4 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    d7b4:	b580      	push	{r7, lr}
    d7b6:	b082      	sub	sp, #8
    d7b8:	af00      	add	r7, sp, #0
    d7ba:	4603      	mov	r3, r0
    d7bc:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    d7be:	79fb      	ldrb	r3, [r7, #7]
    d7c0:	2210      	movs	r2, #16
    d7c2:	4619      	mov	r1, r3
    d7c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d7c8:	4b05      	ldr	r3, [pc, #20]	; (d7e0 <_usbd_ep_is_setup+0x2c>)
    d7ca:	4798      	blx	r3
    d7cc:	4603      	mov	r3, r0
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	bf14      	ite	ne
    d7d2:	2301      	movne	r3, #1
    d7d4:	2300      	moveq	r3, #0
    d7d6:	b2db      	uxtb	r3, r3
}
    d7d8:	4618      	mov	r0, r3
    d7da:	3708      	adds	r7, #8
    d7dc:	46bd      	mov	sp, r7
    d7de:	bd80      	pop	{r7, pc}
    d7e0:	0000d00b 	.word	0x0000d00b

0000d7e4 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b082      	sub	sp, #8
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	4603      	mov	r3, r0
    d7ec:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    d7ee:	79fb      	ldrb	r3, [r7, #7]
    d7f0:	2110      	movs	r1, #16
    d7f2:	4618      	mov	r0, r3
    d7f4:	4b02      	ldr	r3, [pc, #8]	; (d800 <_usbd_ep_ack_setup+0x1c>)
    d7f6:	4798      	blx	r3
}
    d7f8:	bf00      	nop
    d7fa:	3708      	adds	r7, #8
    d7fc:	46bd      	mov	sp, r7
    d7fe:	bd80      	pop	{r7, pc}
    d800:	0000d591 	.word	0x0000d591

0000d804 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    d804:	b580      	push	{r7, lr}
    d806:	b082      	sub	sp, #8
    d808:	af00      	add	r7, sp, #0
    d80a:	4603      	mov	r3, r0
    d80c:	71fb      	strb	r3, [r7, #7]
    d80e:	460b      	mov	r3, r1
    d810:	71bb      	strb	r3, [r7, #6]
    d812:	4613      	mov	r3, r2
    d814:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    d816:	797b      	ldrb	r3, [r7, #5]
    d818:	2b00      	cmp	r3, #0
    d81a:	d00b      	beq.n	d834 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    d81c:	79bb      	ldrb	r3, [r7, #6]
    d81e:	2201      	movs	r2, #1
    d820:	fa02 f303 	lsl.w	r3, r2, r3
    d824:	b2da      	uxtb	r2, r3
    d826:	79fb      	ldrb	r3, [r7, #7]
    d828:	4619      	mov	r1, r3
    d82a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d82e:	4b09      	ldr	r3, [pc, #36]	; (d854 <_usbd_ep_set_toggle+0x50>)
    d830:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    d832:	e00a      	b.n	d84a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    d834:	79bb      	ldrb	r3, [r7, #6]
    d836:	2201      	movs	r2, #1
    d838:	fa02 f303 	lsl.w	r3, r2, r3
    d83c:	b2da      	uxtb	r2, r3
    d83e:	79fb      	ldrb	r3, [r7, #7]
    d840:	4619      	mov	r1, r3
    d842:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d846:	4b04      	ldr	r3, [pc, #16]	; (d858 <_usbd_ep_set_toggle+0x54>)
    d848:	4798      	blx	r3
}
    d84a:	bf00      	nop
    d84c:	3708      	adds	r7, #8
    d84e:	46bd      	mov	sp, r7
    d850:	bd80      	pop	{r7, pc}
    d852:	bf00      	nop
    d854:	0000d095 	.word	0x0000d095
    d858:	0000d0e9 	.word	0x0000d0e9

0000d85c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    d85c:	b580      	push	{r7, lr}
    d85e:	b082      	sub	sp, #8
    d860:	af00      	add	r7, sp, #0
    d862:	4603      	mov	r3, r0
    d864:	460a      	mov	r2, r1
    d866:	71fb      	strb	r3, [r7, #7]
    d868:	4613      	mov	r3, r2
    d86a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    d86c:	79bb      	ldrb	r3, [r7, #6]
    d86e:	2201      	movs	r2, #1
    d870:	409a      	lsls	r2, r3
    d872:	79fb      	ldrb	r3, [r7, #7]
    d874:	4611      	mov	r1, r2
    d876:	4618      	mov	r0, r3
    d878:	4b02      	ldr	r3, [pc, #8]	; (d884 <_usbd_ep_ack_io_cpt+0x28>)
    d87a:	4798      	blx	r3
}
    d87c:	bf00      	nop
    d87e:	3708      	adds	r7, #8
    d880:	46bd      	mov	sp, r7
    d882:	bd80      	pop	{r7, pc}
    d884:	0000d591 	.word	0x0000d591

0000d888 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    d888:	b480      	push	{r7}
    d88a:	b085      	sub	sp, #20
    d88c:	af00      	add	r7, sp, #0
    d88e:	4603      	mov	r3, r0
    d890:	603a      	str	r2, [r7, #0]
    d892:	71fb      	strb	r3, [r7, #7]
    d894:	460b      	mov	r3, r1
    d896:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d898:	79fa      	ldrb	r2, [r7, #7]
    d89a:	79bb      	ldrb	r3, [r7, #6]
    d89c:	0052      	lsls	r2, r2, #1
    d89e:	4413      	add	r3, r2
    d8a0:	011b      	lsls	r3, r3, #4
    d8a2:	4a06      	ldr	r2, [pc, #24]	; (d8bc <_usbd_ep_set_buf+0x34>)
    d8a4:	4413      	add	r3, r2
    d8a6:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    d8a8:	68fb      	ldr	r3, [r7, #12]
    d8aa:	683a      	ldr	r2, [r7, #0]
    d8ac:	601a      	str	r2, [r3, #0]
}
    d8ae:	bf00      	nop
    d8b0:	3714      	adds	r7, #20
    d8b2:	46bd      	mov	sp, r7
    d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8b8:	4770      	bx	lr
    d8ba:	bf00      	nop
    d8bc:	20001c50 	.word	0x20001c50

0000d8c0 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    d8c0:	b480      	push	{r7}
    d8c2:	b085      	sub	sp, #20
    d8c4:	af00      	add	r7, sp, #0
    d8c6:	4603      	mov	r3, r0
    d8c8:	71fb      	strb	r3, [r7, #7]
    d8ca:	460b      	mov	r3, r1
    d8cc:	71bb      	strb	r3, [r7, #6]
    d8ce:	4613      	mov	r3, r2
    d8d0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d8d2:	79fa      	ldrb	r2, [r7, #7]
    d8d4:	79bb      	ldrb	r3, [r7, #6]
    d8d6:	0052      	lsls	r2, r2, #1
    d8d8:	4413      	add	r3, r2
    d8da:	011b      	lsls	r3, r3, #4
    d8dc:	4a08      	ldr	r2, [pc, #32]	; (d900 <_usbd_ep_set_in_count+0x40>)
    d8de:	4413      	add	r3, r2
    d8e0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    d8e2:	88bb      	ldrh	r3, [r7, #4]
    d8e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d8e8:	b299      	uxth	r1, r3
    d8ea:	68fa      	ldr	r2, [r7, #12]
    d8ec:	6853      	ldr	r3, [r2, #4]
    d8ee:	f361 339b 	bfi	r3, r1, #14, #14
    d8f2:	6053      	str	r3, [r2, #4]
}
    d8f4:	bf00      	nop
    d8f6:	3714      	adds	r7, #20
    d8f8:	46bd      	mov	sp, r7
    d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8fe:	4770      	bx	lr
    d900:	20001c50 	.word	0x20001c50

0000d904 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    d904:	b480      	push	{r7}
    d906:	b085      	sub	sp, #20
    d908:	af00      	add	r7, sp, #0
    d90a:	4603      	mov	r3, r0
    d90c:	71fb      	strb	r3, [r7, #7]
    d90e:	460b      	mov	r3, r1
    d910:	71bb      	strb	r3, [r7, #6]
    d912:	4613      	mov	r3, r2
    d914:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d916:	79fa      	ldrb	r2, [r7, #7]
    d918:	79bb      	ldrb	r3, [r7, #6]
    d91a:	0052      	lsls	r2, r2, #1
    d91c:	4413      	add	r3, r2
    d91e:	011b      	lsls	r3, r3, #4
    d920:	4a08      	ldr	r2, [pc, #32]	; (d944 <_usbd_ep_set_in_size+0x40>)
    d922:	4413      	add	r3, r2
    d924:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    d926:	88bb      	ldrh	r3, [r7, #4]
    d928:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d92c:	b299      	uxth	r1, r3
    d92e:	68fa      	ldr	r2, [r7, #12]
    d930:	6853      	ldr	r3, [r2, #4]
    d932:	f361 030d 	bfi	r3, r1, #0, #14
    d936:	6053      	str	r3, [r2, #4]
}
    d938:	bf00      	nop
    d93a:	3714      	adds	r7, #20
    d93c:	46bd      	mov	sp, r7
    d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d942:	4770      	bx	lr
    d944:	20001c50 	.word	0x20001c50

0000d948 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    d948:	b480      	push	{r7}
    d94a:	b085      	sub	sp, #20
    d94c:	af00      	add	r7, sp, #0
    d94e:	4603      	mov	r3, r0
    d950:	71fb      	strb	r3, [r7, #7]
    d952:	460b      	mov	r3, r1
    d954:	71bb      	strb	r3, [r7, #6]
    d956:	4613      	mov	r3, r2
    d958:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d95a:	79fa      	ldrb	r2, [r7, #7]
    d95c:	79bb      	ldrb	r3, [r7, #6]
    d95e:	0052      	lsls	r2, r2, #1
    d960:	4413      	add	r3, r2
    d962:	011b      	lsls	r3, r3, #4
    d964:	4a08      	ldr	r2, [pc, #32]	; (d988 <_usbd_ep_set_out_count+0x40>)
    d966:	4413      	add	r3, r2
    d968:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    d96a:	88bb      	ldrh	r3, [r7, #4]
    d96c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d970:	b299      	uxth	r1, r3
    d972:	68fa      	ldr	r2, [r7, #12]
    d974:	6853      	ldr	r3, [r2, #4]
    d976:	f361 030d 	bfi	r3, r1, #0, #14
    d97a:	6053      	str	r3, [r2, #4]
}
    d97c:	bf00      	nop
    d97e:	3714      	adds	r7, #20
    d980:	46bd      	mov	sp, r7
    d982:	f85d 7b04 	ldr.w	r7, [sp], #4
    d986:	4770      	bx	lr
    d988:	20001c50 	.word	0x20001c50

0000d98c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    d98c:	b480      	push	{r7}
    d98e:	b085      	sub	sp, #20
    d990:	af00      	add	r7, sp, #0
    d992:	4603      	mov	r3, r0
    d994:	71fb      	strb	r3, [r7, #7]
    d996:	460b      	mov	r3, r1
    d998:	71bb      	strb	r3, [r7, #6]
    d99a:	4613      	mov	r3, r2
    d99c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d99e:	79fa      	ldrb	r2, [r7, #7]
    d9a0:	79bb      	ldrb	r3, [r7, #6]
    d9a2:	0052      	lsls	r2, r2, #1
    d9a4:	4413      	add	r3, r2
    d9a6:	011b      	lsls	r3, r3, #4
    d9a8:	4a08      	ldr	r2, [pc, #32]	; (d9cc <_usbd_ep_set_out_size+0x40>)
    d9aa:	4413      	add	r3, r2
    d9ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    d9ae:	88bb      	ldrh	r3, [r7, #4]
    d9b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d9b4:	b299      	uxth	r1, r3
    d9b6:	68fa      	ldr	r2, [r7, #12]
    d9b8:	6853      	ldr	r3, [r2, #4]
    d9ba:	f361 339b 	bfi	r3, r1, #14, #14
    d9be:	6053      	str	r3, [r2, #4]
}
    d9c0:	bf00      	nop
    d9c2:	3714      	adds	r7, #20
    d9c4:	46bd      	mov	sp, r7
    d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9ca:	4770      	bx	lr
    d9cc:	20001c50 	.word	0x20001c50

0000d9d0 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    d9d0:	b580      	push	{r7, lr}
    d9d2:	b084      	sub	sp, #16
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	60ba      	str	r2, [r7, #8]
    d9d8:	607b      	str	r3, [r7, #4]
    d9da:	4603      	mov	r3, r0
    d9dc:	73fb      	strb	r3, [r7, #15]
    d9de:	460b      	mov	r3, r1
    d9e0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    d9e2:	68bb      	ldr	r3, [r7, #8]
    d9e4:	b29a      	uxth	r2, r3
    d9e6:	7bb9      	ldrb	r1, [r7, #14]
    d9e8:	7bfb      	ldrb	r3, [r7, #15]
    d9ea:	4618      	mov	r0, r3
    d9ec:	4b06      	ldr	r3, [pc, #24]	; (da08 <_usbd_ep_set_in_trans+0x38>)
    d9ee:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	b29a      	uxth	r2, r3
    d9f4:	7bb9      	ldrb	r1, [r7, #14]
    d9f6:	7bfb      	ldrb	r3, [r7, #15]
    d9f8:	4618      	mov	r0, r3
    d9fa:	4b04      	ldr	r3, [pc, #16]	; (da0c <_usbd_ep_set_in_trans+0x3c>)
    d9fc:	4798      	blx	r3
}
    d9fe:	bf00      	nop
    da00:	3710      	adds	r7, #16
    da02:	46bd      	mov	sp, r7
    da04:	bd80      	pop	{r7, pc}
    da06:	bf00      	nop
    da08:	0000d905 	.word	0x0000d905
    da0c:	0000d8c1 	.word	0x0000d8c1

0000da10 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    da10:	b580      	push	{r7, lr}
    da12:	b084      	sub	sp, #16
    da14:	af00      	add	r7, sp, #0
    da16:	60ba      	str	r2, [r7, #8]
    da18:	607b      	str	r3, [r7, #4]
    da1a:	4603      	mov	r3, r0
    da1c:	73fb      	strb	r3, [r7, #15]
    da1e:	460b      	mov	r3, r1
    da20:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    da22:	68bb      	ldr	r3, [r7, #8]
    da24:	b29a      	uxth	r2, r3
    da26:	7bb9      	ldrb	r1, [r7, #14]
    da28:	7bfb      	ldrb	r3, [r7, #15]
    da2a:	4618      	mov	r0, r3
    da2c:	4b06      	ldr	r3, [pc, #24]	; (da48 <_usbd_ep_set_out_trans+0x38>)
    da2e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	b29a      	uxth	r2, r3
    da34:	7bb9      	ldrb	r1, [r7, #14]
    da36:	7bfb      	ldrb	r3, [r7, #15]
    da38:	4618      	mov	r0, r3
    da3a:	4b04      	ldr	r3, [pc, #16]	; (da4c <_usbd_ep_set_out_trans+0x3c>)
    da3c:	4798      	blx	r3
}
    da3e:	bf00      	nop
    da40:	3710      	adds	r7, #16
    da42:	46bd      	mov	sp, r7
    da44:	bd80      	pop	{r7, pc}
    da46:	bf00      	nop
    da48:	0000d98d 	.word	0x0000d98d
    da4c:	0000d949 	.word	0x0000d949

0000da50 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    da50:	b480      	push	{r7}
    da52:	b085      	sub	sp, #20
    da54:	af00      	add	r7, sp, #0
    da56:	4603      	mov	r3, r0
    da58:	460a      	mov	r2, r1
    da5a:	71fb      	strb	r3, [r7, #7]
    da5c:	4613      	mov	r3, r2
    da5e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    da60:	79fa      	ldrb	r2, [r7, #7]
    da62:	79bb      	ldrb	r3, [r7, #6]
    da64:	0052      	lsls	r2, r2, #1
    da66:	4413      	add	r3, r2
    da68:	011b      	lsls	r3, r3, #4
    da6a:	4a06      	ldr	r2, [pc, #24]	; (da84 <_usbd_ep_clear_bank_status+0x34>)
    da6c:	4413      	add	r3, r2
    da6e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    da70:	68fb      	ldr	r3, [r7, #12]
    da72:	2200      	movs	r2, #0
    da74:	729a      	strb	r2, [r3, #10]
}
    da76:	bf00      	nop
    da78:	3714      	adds	r7, #20
    da7a:	46bd      	mov	sp, r7
    da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    da80:	4770      	bx	lr
    da82:	bf00      	nop
    da84:	20001c50 	.word	0x20001c50

0000da88 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b082      	sub	sp, #8
    da8c:	af00      	add	r7, sp, #0
    da8e:	4603      	mov	r3, r0
    da90:	71fb      	strb	r3, [r7, #7]
    da92:	460b      	mov	r3, r1
    da94:	71bb      	strb	r3, [r7, #6]
    da96:	4613      	mov	r3, r2
    da98:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    da9a:	797b      	ldrb	r3, [r7, #5]
    da9c:	2b00      	cmp	r3, #0
    da9e:	d00b      	beq.n	dab8 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    daa0:	79bb      	ldrb	r3, [r7, #6]
    daa2:	2240      	movs	r2, #64	; 0x40
    daa4:	fa02 f303 	lsl.w	r3, r2, r3
    daa8:	b2da      	uxtb	r2, r3
    daaa:	79fb      	ldrb	r3, [r7, #7]
    daac:	4619      	mov	r1, r3
    daae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dab2:	4b09      	ldr	r3, [pc, #36]	; (dad8 <_usbd_ep_set_in_rdy+0x50>)
    dab4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    dab6:	e00a      	b.n	dace <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    dab8:	79bb      	ldrb	r3, [r7, #6]
    daba:	2240      	movs	r2, #64	; 0x40
    dabc:	fa02 f303 	lsl.w	r3, r2, r3
    dac0:	b2da      	uxtb	r2, r3
    dac2:	79fb      	ldrb	r3, [r7, #7]
    dac4:	4619      	mov	r1, r3
    dac6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    daca:	4b04      	ldr	r3, [pc, #16]	; (dadc <_usbd_ep_set_in_rdy+0x54>)
    dacc:	4798      	blx	r3
}
    dace:	bf00      	nop
    dad0:	3708      	adds	r7, #8
    dad2:	46bd      	mov	sp, r7
    dad4:	bd80      	pop	{r7, pc}
    dad6:	bf00      	nop
    dad8:	0000d095 	.word	0x0000d095
    dadc:	0000d0e9 	.word	0x0000d0e9

0000dae0 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    dae0:	b580      	push	{r7, lr}
    dae2:	b082      	sub	sp, #8
    dae4:	af00      	add	r7, sp, #0
    dae6:	4603      	mov	r3, r0
    dae8:	71fb      	strb	r3, [r7, #7]
    daea:	460b      	mov	r3, r1
    daec:	71bb      	strb	r3, [r7, #6]
    daee:	4613      	mov	r3, r2
    daf0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    daf2:	797b      	ldrb	r3, [r7, #5]
    daf4:	2b00      	cmp	r3, #0
    daf6:	d00b      	beq.n	db10 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    daf8:	79bb      	ldrb	r3, [r7, #6]
    dafa:	2240      	movs	r2, #64	; 0x40
    dafc:	fa02 f303 	lsl.w	r3, r2, r3
    db00:	b2da      	uxtb	r2, r3
    db02:	79fb      	ldrb	r3, [r7, #7]
    db04:	4619      	mov	r1, r3
    db06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    db0a:	4b09      	ldr	r3, [pc, #36]	; (db30 <_usbd_ep_set_out_rdy+0x50>)
    db0c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    db0e:	e00a      	b.n	db26 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    db10:	79bb      	ldrb	r3, [r7, #6]
    db12:	2240      	movs	r2, #64	; 0x40
    db14:	fa02 f303 	lsl.w	r3, r2, r3
    db18:	b2da      	uxtb	r2, r3
    db1a:	79fb      	ldrb	r3, [r7, #7]
    db1c:	4619      	mov	r1, r3
    db1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    db22:	4b04      	ldr	r3, [pc, #16]	; (db34 <_usbd_ep_set_out_rdy+0x54>)
    db24:	4798      	blx	r3
}
    db26:	bf00      	nop
    db28:	3708      	adds	r7, #8
    db2a:	46bd      	mov	sp, r7
    db2c:	bd80      	pop	{r7, pc}
    db2e:	bf00      	nop
    db30:	0000d0e9 	.word	0x0000d0e9
    db34:	0000d095 	.word	0x0000d095

0000db38 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    db38:	b480      	push	{r7}
    db3a:	b083      	sub	sp, #12
    db3c:	af00      	add	r7, sp, #0
    db3e:	4603      	mov	r3, r0
    db40:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    db42:	88fb      	ldrh	r3, [r7, #6]
    db44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    db48:	d820      	bhi.n	db8c <_usbd_ep_pcksize_size+0x54>
    db4a:	88fb      	ldrh	r3, [r7, #6]
    db4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    db50:	d81a      	bhi.n	db88 <_usbd_ep_pcksize_size+0x50>
    db52:	88fb      	ldrh	r3, [r7, #6]
    db54:	2b80      	cmp	r3, #128	; 0x80
    db56:	d815      	bhi.n	db84 <_usbd_ep_pcksize_size+0x4c>
    db58:	88fb      	ldrh	r3, [r7, #6]
    db5a:	2b40      	cmp	r3, #64	; 0x40
    db5c:	d810      	bhi.n	db80 <_usbd_ep_pcksize_size+0x48>
    db5e:	88fb      	ldrh	r3, [r7, #6]
    db60:	2b20      	cmp	r3, #32
    db62:	d80b      	bhi.n	db7c <_usbd_ep_pcksize_size+0x44>
    db64:	88fb      	ldrh	r3, [r7, #6]
    db66:	2b10      	cmp	r3, #16
    db68:	d806      	bhi.n	db78 <_usbd_ep_pcksize_size+0x40>
    db6a:	88fb      	ldrh	r3, [r7, #6]
    db6c:	2b08      	cmp	r3, #8
    db6e:	bf8c      	ite	hi
    db70:	2301      	movhi	r3, #1
    db72:	2300      	movls	r3, #0
    db74:	b2db      	uxtb	r3, r3
    db76:	e00a      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db78:	2302      	movs	r3, #2
    db7a:	e008      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db7c:	2303      	movs	r3, #3
    db7e:	e006      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db80:	2304      	movs	r3, #4
    db82:	e004      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db84:	2305      	movs	r3, #5
    db86:	e002      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db88:	2306      	movs	r3, #6
    db8a:	e000      	b.n	db8e <_usbd_ep_pcksize_size+0x56>
    db8c:	2307      	movs	r3, #7
}
    db8e:	4618      	mov	r0, r3
    db90:	370c      	adds	r7, #12
    db92:	46bd      	mov	sp, r7
    db94:	f85d 7b04 	ldr.w	r7, [sp], #4
    db98:	4770      	bx	lr
	...

0000db9c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    db9c:	b480      	push	{r7}
    db9e:	b085      	sub	sp, #20
    dba0:	af00      	add	r7, sp, #0
    dba2:	4603      	mov	r3, r0
    dba4:	460a      	mov	r2, r1
    dba6:	71fb      	strb	r3, [r7, #7]
    dba8:	4613      	mov	r3, r2
    dbaa:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    dbac:	79fb      	ldrb	r3, [r7, #7]
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d008      	beq.n	dbc4 <_usb_d_dev_ept+0x28>
    dbb2:	79bb      	ldrb	r3, [r7, #6]
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d003      	beq.n	dbc0 <_usb_d_dev_ept+0x24>
    dbb8:	79fb      	ldrb	r3, [r7, #7]
    dbba:	3304      	adds	r3, #4
    dbbc:	b2db      	uxtb	r3, r3
    dbbe:	e002      	b.n	dbc6 <_usb_d_dev_ept+0x2a>
    dbc0:	79fb      	ldrb	r3, [r7, #7]
    dbc2:	e000      	b.n	dbc6 <_usb_d_dev_ept+0x2a>
    dbc4:	2300      	movs	r3, #0
    dbc6:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    dbc8:	7bfa      	ldrb	r2, [r7, #15]
    dbca:	4613      	mov	r3, r2
    dbcc:	009b      	lsls	r3, r3, #2
    dbce:	4413      	add	r3, r2
    dbd0:	009b      	lsls	r3, r3, #2
    dbd2:	3310      	adds	r3, #16
    dbd4:	4a04      	ldr	r2, [pc, #16]	; (dbe8 <_usb_d_dev_ept+0x4c>)
    dbd6:	4413      	add	r3, r2
    dbd8:	3304      	adds	r3, #4
}
    dbda:	4618      	mov	r0, r3
    dbdc:	3714      	adds	r7, #20
    dbde:	46bd      	mov	sp, r7
    dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbe4:	4770      	bx	lr
    dbe6:	bf00      	nop
    dbe8:	20001b88 	.word	0x20001b88

0000dbec <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    dbec:	b580      	push	{r7, lr}
    dbee:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    dbf0:	2104      	movs	r1, #4
    dbf2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dbf6:	4b03      	ldr	r3, [pc, #12]	; (dc04 <_usb_d_dev_sof+0x18>)
    dbf8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    dbfa:	4b03      	ldr	r3, [pc, #12]	; (dc08 <_usb_d_dev_sof+0x1c>)
    dbfc:	681b      	ldr	r3, [r3, #0]
    dbfe:	4798      	blx	r3
}
    dc00:	bf00      	nop
    dc02:	bd80      	pop	{r7, pc}
    dc04:	0000d263 	.word	0x0000d263
    dc08:	20001b88 	.word	0x20001b88

0000dc0c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b084      	sub	sp, #16
    dc10:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    dc12:	2300      	movs	r3, #0
    dc14:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dc16:	f240 2101 	movw	r1, #513	; 0x201
    dc1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc1e:	4b1a      	ldr	r3, [pc, #104]	; (dc88 <_usb_d_dev_lpmsusp+0x7c>)
    dc20:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dc22:	f240 2101 	movw	r1, #513	; 0x201
    dc26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc2a:	4b18      	ldr	r3, [pc, #96]	; (dc8c <_usb_d_dev_lpmsusp+0x80>)
    dc2c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    dc2e:	2170      	movs	r1, #112	; 0x70
    dc30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc34:	4b16      	ldr	r3, [pc, #88]	; (dc90 <_usb_d_dev_lpmsusp+0x84>)
    dc36:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    dc38:	2300      	movs	r3, #0
    dc3a:	73fb      	strb	r3, [r7, #15]
    dc3c:	e018      	b.n	dc70 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    dc3e:	7bfb      	ldrb	r3, [r7, #15]
    dc40:	015b      	lsls	r3, r3, #5
    dc42:	4a14      	ldr	r2, [pc, #80]	; (dc94 <_usb_d_dev_lpmsusp+0x88>)
    dc44:	4413      	add	r3, r2
    dc46:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    dc48:	687b      	ldr	r3, [r7, #4]
    dc4a:	891b      	ldrh	r3, [r3, #8]
    dc4c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    dc50:	b2db      	uxtb	r3, r3
    dc52:	2b03      	cmp	r3, #3
    dc54:	d109      	bne.n	dc6a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    dc56:	687b      	ldr	r3, [r7, #4]
    dc58:	891b      	ldrh	r3, [r3, #8]
    dc5a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    dc5e:	b29b      	uxth	r3, r3
    dc60:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	2200      	movs	r2, #0
    dc66:	811a      	strh	r2, [r3, #8]
			break;
    dc68:	e005      	b.n	dc76 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    dc6a:	7bfb      	ldrb	r3, [r7, #15]
    dc6c:	3301      	adds	r3, #1
    dc6e:	73fb      	strb	r3, [r7, #15]
    dc70:	7bfb      	ldrb	r3, [r7, #15]
    dc72:	2b03      	cmp	r3, #3
    dc74:	d9e3      	bls.n	dc3e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    dc76:	4b08      	ldr	r3, [pc, #32]	; (dc98 <_usb_d_dev_lpmsusp+0x8c>)
    dc78:	685b      	ldr	r3, [r3, #4]
    dc7a:	68b9      	ldr	r1, [r7, #8]
    dc7c:	2003      	movs	r0, #3
    dc7e:	4798      	blx	r3
}
    dc80:	bf00      	nop
    dc82:	3710      	adds	r7, #16
    dc84:	46bd      	mov	sp, r7
    dc86:	bd80      	pop	{r7, pc}
    dc88:	0000d263 	.word	0x0000d263
    dc8c:	0000d2b9 	.word	0x0000d2b9
    dc90:	0000d281 	.word	0x0000d281
    dc94:	20001c50 	.word	0x20001c50
    dc98:	20001b88 	.word	0x20001b88

0000dc9c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    dca0:	2180      	movs	r1, #128	; 0x80
    dca2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dca6:	4b04      	ldr	r3, [pc, #16]	; (dcb8 <_usb_d_dev_ramerr+0x1c>)
    dca8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    dcaa:	4b04      	ldr	r3, [pc, #16]	; (dcbc <_usb_d_dev_ramerr+0x20>)
    dcac:	685b      	ldr	r3, [r3, #4]
    dcae:	2100      	movs	r1, #0
    dcb0:	2005      	movs	r0, #5
    dcb2:	4798      	blx	r3
}
    dcb4:	bf00      	nop
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	0000d263 	.word	0x0000d263
    dcbc:	20001b88 	.word	0x20001b88

0000dcc0 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    dcc0:	b580      	push	{r7, lr}
    dcc2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    dcc4:	2170      	movs	r1, #112	; 0x70
    dcc6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dcca:	4b0b      	ldr	r3, [pc, #44]	; (dcf8 <_usb_d_dev_wakeup+0x38>)
    dccc:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    dcce:	2170      	movs	r1, #112	; 0x70
    dcd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dcd4:	4b09      	ldr	r3, [pc, #36]	; (dcfc <_usb_d_dev_wakeup+0x3c>)
    dcd6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dcd8:	f240 2101 	movw	r1, #513	; 0x201
    dcdc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dce0:	4b07      	ldr	r3, [pc, #28]	; (dd00 <_usb_d_dev_wakeup+0x40>)
    dce2:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    dce4:	2000      	movs	r0, #0
    dce6:	4b07      	ldr	r3, [pc, #28]	; (dd04 <_usb_d_dev_wakeup+0x44>)
    dce8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    dcea:	4b07      	ldr	r3, [pc, #28]	; (dd08 <_usb_d_dev_wakeup+0x48>)
    dcec:	685b      	ldr	r3, [r3, #4]
    dcee:	2100      	movs	r1, #0
    dcf0:	2002      	movs	r0, #2
    dcf2:	4798      	blx	r3
}
    dcf4:	bf00      	nop
    dcf6:	bd80      	pop	{r7, pc}
    dcf8:	0000d263 	.word	0x0000d263
    dcfc:	0000d2b9 	.word	0x0000d2b9
    dd00:	0000d281 	.word	0x0000d281
    dd04:	0000d561 	.word	0x0000d561
    dd08:	20001b88 	.word	0x20001b88

0000dd0c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    dd0c:	b580      	push	{r7, lr}
    dd0e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    dd10:	2200      	movs	r2, #0
    dd12:	2100      	movs	r1, #0
    dd14:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd18:	4b0d      	ldr	r3, [pc, #52]	; (dd50 <_usb_d_dev_reset+0x44>)
    dd1a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    dd1c:	2108      	movs	r1, #8
    dd1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd22:	4b0c      	ldr	r3, [pc, #48]	; (dd54 <_usb_d_dev_reset+0x48>)
    dd24:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    dd26:	2170      	movs	r1, #112	; 0x70
    dd28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd2c:	4b0a      	ldr	r3, [pc, #40]	; (dd58 <_usb_d_dev_reset+0x4c>)
    dd2e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dd30:	f240 2101 	movw	r1, #513	; 0x201
    dd34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd38:	4b08      	ldr	r3, [pc, #32]	; (dd5c <_usb_d_dev_reset+0x50>)
    dd3a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    dd3c:	4b08      	ldr	r3, [pc, #32]	; (dd60 <_usb_d_dev_reset+0x54>)
    dd3e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    dd40:	4b08      	ldr	r3, [pc, #32]	; (dd64 <_usb_d_dev_reset+0x58>)
    dd42:	685b      	ldr	r3, [r3, #4]
    dd44:	2100      	movs	r1, #0
    dd46:	2001      	movs	r0, #1
    dd48:	4798      	blx	r3
}
    dd4a:	bf00      	nop
    dd4c:	bd80      	pop	{r7, pc}
    dd4e:	bf00      	nop
    dd50:	0000d1f9 	.word	0x0000d1f9
    dd54:	0000d263 	.word	0x0000d263
    dd58:	0000d2b9 	.word	0x0000d2b9
    dd5c:	0000d281 	.word	0x0000d281
    dd60:	0000e8c9 	.word	0x0000e8c9
    dd64:	20001b88 	.word	0x20001b88

0000dd68 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    dd68:	b580      	push	{r7, lr}
    dd6a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dd6c:	f240 2101 	movw	r1, #513	; 0x201
    dd70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd74:	4b09      	ldr	r3, [pc, #36]	; (dd9c <_usb_d_dev_suspend+0x34>)
    dd76:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    dd78:	f240 2101 	movw	r1, #513	; 0x201
    dd7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd80:	4b07      	ldr	r3, [pc, #28]	; (dda0 <_usb_d_dev_suspend+0x38>)
    dd82:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    dd84:	2170      	movs	r1, #112	; 0x70
    dd86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd8a:	4b06      	ldr	r3, [pc, #24]	; (dda4 <_usb_d_dev_suspend+0x3c>)
    dd8c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    dd8e:	4b06      	ldr	r3, [pc, #24]	; (dda8 <_usb_d_dev_suspend+0x40>)
    dd90:	685b      	ldr	r3, [r3, #4]
    dd92:	2100      	movs	r1, #0
    dd94:	2004      	movs	r0, #4
    dd96:	4798      	blx	r3
}
    dd98:	bf00      	nop
    dd9a:	bd80      	pop	{r7, pc}
    dd9c:	0000d263 	.word	0x0000d263
    dda0:	0000d2b9 	.word	0x0000d2b9
    dda4:	0000d281 	.word	0x0000d281
    dda8:	20001b88 	.word	0x20001b88

0000ddac <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    ddac:	b580      	push	{r7, lr}
    ddae:	b082      	sub	sp, #8
    ddb0:	af00      	add	r7, sp, #0
	bool     rc    = true;
    ddb2:	2301      	movs	r3, #1
    ddb4:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    ddb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ddba:	4b22      	ldr	r3, [pc, #136]	; (de44 <_usb_d_dev_handle_nep+0x98>)
    ddbc:	4798      	blx	r3
    ddbe:	4603      	mov	r3, r0
    ddc0:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    ddc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ddc6:	4b20      	ldr	r3, [pc, #128]	; (de48 <_usb_d_dev_handle_nep+0x9c>)
    ddc8:	4798      	blx	r3
    ddca:	4603      	mov	r3, r0
    ddcc:	461a      	mov	r2, r3
    ddce:	88bb      	ldrh	r3, [r7, #4]
    ddd0:	4013      	ands	r3, r2
    ddd2:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    ddd4:	88bb      	ldrh	r3, [r7, #4]
    ddd6:	f003 0304 	and.w	r3, r3, #4
    ddda:	2b00      	cmp	r3, #0
    dddc:	d003      	beq.n	dde6 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    ddde:	4b1b      	ldr	r3, [pc, #108]	; (de4c <_usb_d_dev_handle_nep+0xa0>)
    dde0:	4798      	blx	r3
		return true;
    dde2:	2301      	movs	r3, #1
    dde4:	e02a      	b.n	de3c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    dde6:	88bb      	ldrh	r3, [r7, #4]
    dde8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ddec:	2b00      	cmp	r3, #0
    ddee:	d002      	beq.n	ddf6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    ddf0:	4b17      	ldr	r3, [pc, #92]	; (de50 <_usb_d_dev_handle_nep+0xa4>)
    ddf2:	4798      	blx	r3
    ddf4:	e021      	b.n	de3a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    ddf6:	88bb      	ldrh	r3, [r7, #4]
    ddf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d002      	beq.n	de06 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    de00:	4b14      	ldr	r3, [pc, #80]	; (de54 <_usb_d_dev_handle_nep+0xa8>)
    de02:	4798      	blx	r3
    de04:	e019      	b.n	de3a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    de06:	88bb      	ldrh	r3, [r7, #4]
    de08:	f003 0370 	and.w	r3, r3, #112	; 0x70
    de0c:	2b00      	cmp	r3, #0
    de0e:	d002      	beq.n	de16 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    de10:	4b11      	ldr	r3, [pc, #68]	; (de58 <_usb_d_dev_handle_nep+0xac>)
    de12:	4798      	blx	r3
    de14:	e011      	b.n	de3a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    de16:	88bb      	ldrh	r3, [r7, #4]
    de18:	f003 0308 	and.w	r3, r3, #8
    de1c:	2b00      	cmp	r3, #0
    de1e:	d002      	beq.n	de26 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    de20:	4b0e      	ldr	r3, [pc, #56]	; (de5c <_usb_d_dev_handle_nep+0xb0>)
    de22:	4798      	blx	r3
    de24:	e009      	b.n	de3a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    de26:	88bb      	ldrh	r3, [r7, #4]
    de28:	f003 0301 	and.w	r3, r3, #1
    de2c:	2b00      	cmp	r3, #0
    de2e:	d002      	beq.n	de36 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    de30:	4b0b      	ldr	r3, [pc, #44]	; (de60 <_usb_d_dev_handle_nep+0xb4>)
    de32:	4798      	blx	r3
    de34:	e001      	b.n	de3a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    de36:	2300      	movs	r3, #0
    de38:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    de3a:	79fb      	ldrb	r3, [r7, #7]
}
    de3c:	4618      	mov	r0, r3
    de3e:	3708      	adds	r7, #8
    de40:	46bd      	mov	sp, r7
    de42:	bd80      	pop	{r7, pc}
    de44:	0000d249 	.word	0x0000d249
    de48:	0000d29f 	.word	0x0000d29f
    de4c:	0000dbed 	.word	0x0000dbed
    de50:	0000dc0d 	.word	0x0000dc0d
    de54:	0000dc9d 	.word	0x0000dc9d
    de58:	0000dcc1 	.word	0x0000dcc1
    de5c:	0000dd0d 	.word	0x0000dd0d
    de60:	0000dd69 	.word	0x0000dd69

0000de64 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    de64:	b590      	push	{r4, r7, lr}
    de66:	b089      	sub	sp, #36	; 0x24
    de68:	af00      	add	r7, sp, #0
    de6a:	6078      	str	r0, [r7, #4]
    de6c:	460b      	mov	r3, r1
    de6e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    de70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    de74:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	7c9b      	ldrb	r3, [r3, #18]
    de7a:	f003 030f 	and.w	r3, r3, #15
    de7e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    de80:	7dfb      	ldrb	r3, [r7, #23]
    de82:	015b      	lsls	r3, r3, #5
    de84:	4a73      	ldr	r2, [pc, #460]	; (e054 <_usb_d_dev_in_next+0x1f0>)
    de86:	4413      	add	r3, r2
    de88:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    de8a:	78fb      	ldrb	r3, [r7, #3]
    de8c:	2b00      	cmp	r3, #0
    de8e:	d006      	beq.n	de9e <_usb_d_dev_in_next+0x3a>
    de90:	693b      	ldr	r3, [r7, #16]
    de92:	3310      	adds	r3, #16
    de94:	685b      	ldr	r3, [r3, #4]
    de96:	f3c3 030d 	ubfx	r3, r3, #0, #14
    de9a:	b29b      	uxth	r3, r3
    de9c:	e000      	b.n	dea0 <_usb_d_dev_in_next+0x3c>
    de9e:	2300      	movs	r3, #0
    dea0:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    dea2:	687b      	ldr	r3, [r7, #4]
    dea4:	8a1b      	ldrh	r3, [r3, #16]
    dea6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    deaa:	4293      	cmp	r3, r2
    deac:	d103      	bne.n	deb6 <_usb_d_dev_in_next+0x52>
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	8a1b      	ldrh	r3, [r3, #16]
    deb2:	b21b      	sxth	r3, r3
    deb4:	e004      	b.n	dec0 <_usb_d_dev_in_next+0x5c>
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	8a1b      	ldrh	r3, [r3, #16]
    deba:	3b01      	subs	r3, #1
    debc:	b29b      	uxth	r3, r3
    debe:	b21b      	sxth	r3, r3
    dec0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    dec4:	4013      	ands	r3, r2
    dec6:	b21b      	sxth	r3, r3
    dec8:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    deca:	2300      	movs	r3, #0
    decc:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    dece:	687b      	ldr	r3, [r7, #4]
    ded0:	7cdb      	ldrb	r3, [r3, #19]
    ded2:	f003 0307 	and.w	r3, r3, #7
    ded6:	b2db      	uxtb	r3, r3
    ded8:	2b01      	cmp	r3, #1
    deda:	bf0c      	ite	eq
    dedc:	2301      	moveq	r3, #1
    dede:	2300      	movne	r3, #0
    dee0:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    dee2:	78fb      	ldrb	r3, [r7, #3]
    dee4:	2b00      	cmp	r3, #0
    dee6:	d004      	beq.n	def2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    dee8:	7dfb      	ldrb	r3, [r7, #23]
    deea:	2101      	movs	r1, #1
    deec:	4618      	mov	r0, r3
    deee:	4b5a      	ldr	r3, [pc, #360]	; (e058 <_usb_d_dev_in_next+0x1f4>)
    def0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    def2:	687b      	ldr	r3, [r7, #4]
    def4:	689a      	ldr	r2, [r3, #8]
    def6:	89fb      	ldrh	r3, [r7, #14]
    def8:	441a      	add	r2, r3
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    defe:	687b      	ldr	r3, [r7, #4]
    df00:	689a      	ldr	r2, [r3, #8]
    df02:	687b      	ldr	r3, [r7, #4]
    df04:	685b      	ldr	r3, [r3, #4]
    df06:	429a      	cmp	r2, r3
    df08:	d243      	bcs.n	df92 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    df0a:	687b      	ldr	r3, [r7, #4]
    df0c:	685b      	ldr	r3, [r3, #4]
    df0e:	b29a      	uxth	r2, r3
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	689b      	ldr	r3, [r3, #8]
    df14:	b29b      	uxth	r3, r3
    df16:	1ad3      	subs	r3, r2, r3
    df18:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	7cdb      	ldrb	r3, [r3, #19]
    df1e:	f003 0320 	and.w	r3, r3, #32
    df22:	b2db      	uxtb	r3, r3
    df24:	2b00      	cmp	r3, #0
    df26:	d01b      	beq.n	df60 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    df28:	687b      	ldr	r3, [r7, #4]
    df2a:	8a1b      	ldrh	r3, [r3, #16]
    df2c:	8bfa      	ldrh	r2, [r7, #30]
    df2e:	429a      	cmp	r2, r3
    df30:	d902      	bls.n	df38 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    df32:	687b      	ldr	r3, [r7, #4]
    df34:	8a1b      	ldrh	r3, [r3, #16]
    df36:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    df38:	687b      	ldr	r3, [r7, #4]
    df3a:	68d8      	ldr	r0, [r3, #12]
    df3c:	687b      	ldr	r3, [r7, #4]
    df3e:	681a      	ldr	r2, [r3, #0]
    df40:	687b      	ldr	r3, [r7, #4]
    df42:	689b      	ldr	r3, [r3, #8]
    df44:	4413      	add	r3, r2
    df46:	8bfa      	ldrh	r2, [r7, #30]
    df48:	4619      	mov	r1, r3
    df4a:	4b44      	ldr	r3, [pc, #272]	; (e05c <_usb_d_dev_in_next+0x1f8>)
    df4c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    df4e:	687b      	ldr	r3, [r7, #4]
    df50:	68db      	ldr	r3, [r3, #12]
    df52:	461a      	mov	r2, r3
    df54:	7dfb      	ldrb	r3, [r7, #23]
    df56:	2101      	movs	r1, #1
    df58:	4618      	mov	r0, r3
    df5a:	4b41      	ldr	r3, [pc, #260]	; (e060 <_usb_d_dev_in_next+0x1fc>)
    df5c:	4798      	blx	r3
    df5e:	e011      	b.n	df84 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    df60:	8bfb      	ldrh	r3, [r7, #30]
    df62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    df66:	d902      	bls.n	df6e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    df68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    df6c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    df6e:	687b      	ldr	r3, [r7, #4]
    df70:	681a      	ldr	r2, [r3, #0]
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	689b      	ldr	r3, [r3, #8]
    df76:	4413      	add	r3, r2
    df78:	461a      	mov	r2, r3
    df7a:	7dfb      	ldrb	r3, [r7, #23]
    df7c:	2101      	movs	r1, #1
    df7e:	4618      	mov	r0, r3
    df80:	4b37      	ldr	r3, [pc, #220]	; (e060 <_usb_d_dev_in_next+0x1fc>)
    df82:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    df84:	8bfa      	ldrh	r2, [r7, #30]
    df86:	7df8      	ldrb	r0, [r7, #23]
    df88:	2300      	movs	r3, #0
    df8a:	2101      	movs	r1, #1
    df8c:	4c35      	ldr	r4, [pc, #212]	; (e064 <_usb_d_dev_in_next+0x200>)
    df8e:	47a0      	blx	r4
		goto _in_tx_exec;
    df90:	e041      	b.n	e016 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    df92:	687b      	ldr	r3, [r7, #4]
    df94:	7cdb      	ldrb	r3, [r3, #19]
    df96:	f003 0310 	and.w	r3, r3, #16
    df9a:	b2db      	uxtb	r3, r3
    df9c:	2b00      	cmp	r3, #0
    df9e:	d00b      	beq.n	dfb8 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    dfa0:	687a      	ldr	r2, [r7, #4]
    dfa2:	7cd3      	ldrb	r3, [r2, #19]
    dfa4:	f36f 1304 	bfc	r3, #4, #1
    dfa8:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    dfaa:	7df8      	ldrb	r0, [r7, #23]
    dfac:	2300      	movs	r3, #0
    dfae:	2200      	movs	r2, #0
    dfb0:	2101      	movs	r1, #1
    dfb2:	4c2c      	ldr	r4, [pc, #176]	; (e064 <_usb_d_dev_in_next+0x200>)
    dfb4:	47a0      	blx	r4
		goto _in_tx_exec;
    dfb6:	e02e      	b.n	e016 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    dfb8:	7afb      	ldrb	r3, [r7, #11]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d006      	beq.n	dfcc <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    dfbe:	7dfb      	ldrb	r3, [r7, #23]
    dfc0:	224b      	movs	r2, #75	; 0x4b
    dfc2:	4619      	mov	r1, r3
    dfc4:	69b8      	ldr	r0, [r7, #24]
    dfc6:	4b28      	ldr	r3, [pc, #160]	; (e068 <_usb_d_dev_in_next+0x204>)
    dfc8:	4798      	blx	r3
    dfca:	e005      	b.n	dfd8 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    dfcc:	7dfb      	ldrb	r3, [r7, #23]
    dfce:	224a      	movs	r2, #74	; 0x4a
    dfd0:	4619      	mov	r1, r3
    dfd2:	69b8      	ldr	r0, [r7, #24]
    dfd4:	4b24      	ldr	r3, [pc, #144]	; (e068 <_usb_d_dev_in_next+0x204>)
    dfd6:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	8a1b      	ldrh	r3, [r3, #16]
    dfdc:	89ba      	ldrh	r2, [r7, #12]
    dfde:	429a      	cmp	r2, r3
    dfe0:	d114      	bne.n	e00c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    dfe2:	687a      	ldr	r2, [r7, #4]
    dfe4:	7cd3      	ldrb	r3, [r2, #19]
    dfe6:	f36f 1386 	bfc	r3, #6, #1
    dfea:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    dfec:	4b1f      	ldr	r3, [pc, #124]	; (e06c <_usb_d_dev_in_next+0x208>)
    dfee:	68db      	ldr	r3, [r3, #12]
    dff0:	687a      	ldr	r2, [r7, #4]
    dff2:	7c90      	ldrb	r0, [r2, #18]
    dff4:	687a      	ldr	r2, [r7, #4]
    dff6:	6892      	ldr	r2, [r2, #8]
    dff8:	4611      	mov	r1, r2
    dffa:	4798      	blx	r3
    dffc:	4603      	mov	r3, r0
    dffe:	2b00      	cmp	r3, #0
    e000:	d124      	bne.n	e04c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    e002:	687a      	ldr	r2, [r7, #4]
    e004:	7cd3      	ldrb	r3, [r2, #19]
    e006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e00a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    e00c:	2100      	movs	r1, #0
    e00e:	6878      	ldr	r0, [r7, #4]
    e010:	4b17      	ldr	r3, [pc, #92]	; (e070 <_usb_d_dev_in_next+0x20c>)
    e012:	4798      	blx	r3
	return;
    e014:	e01b      	b.n	e04e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    e016:	78fb      	ldrb	r3, [r7, #3]
    e018:	f083 0301 	eor.w	r3, r3, #1
    e01c:	b2db      	uxtb	r3, r3
    e01e:	2b00      	cmp	r3, #0
    e020:	d00d      	beq.n	e03e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    e022:	7afb      	ldrb	r3, [r7, #11]
    e024:	2b00      	cmp	r3, #0
    e026:	d002      	beq.n	e02e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    e028:	234e      	movs	r3, #78	; 0x4e
    e02a:	777b      	strb	r3, [r7, #29]
    e02c:	e001      	b.n	e032 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    e02e:	234a      	movs	r3, #74	; 0x4a
    e030:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    e032:	7f7a      	ldrb	r2, [r7, #29]
    e034:	7dfb      	ldrb	r3, [r7, #23]
    e036:	4619      	mov	r1, r3
    e038:	69b8      	ldr	r0, [r7, #24]
    e03a:	4b0e      	ldr	r3, [pc, #56]	; (e074 <_usb_d_dev_in_next+0x210>)
    e03c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    e03e:	7dfb      	ldrb	r3, [r7, #23]
    e040:	2201      	movs	r2, #1
    e042:	2101      	movs	r1, #1
    e044:	4618      	mov	r0, r3
    e046:	4b0c      	ldr	r3, [pc, #48]	; (e078 <_usb_d_dev_in_next+0x214>)
    e048:	4798      	blx	r3
    e04a:	e000      	b.n	e04e <_usb_d_dev_in_next+0x1ea>
			return;
    e04c:	bf00      	nop
}
    e04e:	3724      	adds	r7, #36	; 0x24
    e050:	46bd      	mov	sp, r7
    e052:	bd90      	pop	{r4, r7, pc}
    e054:	20001c50 	.word	0x20001c50
    e058:	0000d85d 	.word	0x0000d85d
    e05c:	0001c521 	.word	0x0001c521
    e060:	0000d889 	.word	0x0000d889
    e064:	0000d9d1 	.word	0x0000d9d1
    e068:	0000d169 	.word	0x0000d169
    e06c:	20001b88 	.word	0x20001b88
    e070:	0000f18d 	.word	0x0000f18d
    e074:	0000d13d 	.word	0x0000d13d
    e078:	0000da89 	.word	0x0000da89

0000e07c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e07c:	b590      	push	{r4, r7, lr}
    e07e:	b08b      	sub	sp, #44	; 0x2c
    e080:	af00      	add	r7, sp, #0
    e082:	6078      	str	r0, [r7, #4]
    e084:	460b      	mov	r3, r1
    e086:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    e088:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e08c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    e08e:	687b      	ldr	r3, [r7, #4]
    e090:	7c9b      	ldrb	r3, [r3, #18]
    e092:	f003 030f 	and.w	r3, r3, #15
    e096:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e098:	7ffb      	ldrb	r3, [r7, #31]
    e09a:	015b      	lsls	r3, r3, #5
    e09c:	4a94      	ldr	r2, [pc, #592]	; (e2f0 <_usb_d_dev_out_next+0x274>)
    e09e:	4413      	add	r3, r2
    e0a0:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    e0a2:	78fb      	ldrb	r3, [r7, #3]
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	d005      	beq.n	e0b4 <_usb_d_dev_out_next+0x38>
    e0a8:	69bb      	ldr	r3, [r7, #24]
    e0aa:	685b      	ldr	r3, [r3, #4]
    e0ac:	f3c3 338d 	ubfx	r3, r3, #14, #14
    e0b0:	b29b      	uxth	r3, r3
    e0b2:	e000      	b.n	e0b6 <_usb_d_dev_out_next+0x3a>
    e0b4:	2300      	movs	r3, #0
    e0b6:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    e0b8:	78fb      	ldrb	r3, [r7, #3]
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d005      	beq.n	e0ca <_usb_d_dev_out_next+0x4e>
    e0be:	69bb      	ldr	r3, [r7, #24]
    e0c0:	685b      	ldr	r3, [r3, #4]
    e0c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e0c6:	b29b      	uxth	r3, r3
    e0c8:	e000      	b.n	e0cc <_usb_d_dev_out_next+0x50>
    e0ca:	2300      	movs	r3, #0
    e0cc:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	8a1b      	ldrh	r3, [r3, #16]
    e0d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e0d6:	4293      	cmp	r3, r2
    e0d8:	d004      	beq.n	e0e4 <_usb_d_dev_out_next+0x68>
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	8a1b      	ldrh	r3, [r3, #16]
    e0de:	3b01      	subs	r3, #1
    e0e0:	b29b      	uxth	r3, r3
    e0e2:	e001      	b.n	e0e8 <_usb_d_dev_out_next+0x6c>
    e0e4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e0e8:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    e0ea:	8aba      	ldrh	r2, [r7, #20]
    e0ec:	8a7b      	ldrh	r3, [r7, #18]
    e0ee:	4013      	ands	r3, r2
    e0f0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e0f2:	687b      	ldr	r3, [r7, #4]
    e0f4:	7cdb      	ldrb	r3, [r3, #19]
    e0f6:	f003 0307 	and.w	r3, r3, #7
    e0fa:	b2db      	uxtb	r3, r3
    e0fc:	2b01      	cmp	r3, #1
    e0fe:	bf0c      	ite	eq
    e100:	2301      	moveq	r3, #1
    e102:	2300      	movne	r3, #0
    e104:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    e106:	78fb      	ldrb	r3, [r7, #3]
    e108:	2b00      	cmp	r3, #0
    e10a:	d004      	beq.n	e116 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    e10c:	7ffb      	ldrb	r3, [r7, #31]
    e10e:	2100      	movs	r1, #0
    e110:	4618      	mov	r0, r3
    e112:	4b78      	ldr	r3, [pc, #480]	; (e2f4 <_usb_d_dev_out_next+0x278>)
    e114:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	7cdb      	ldrb	r3, [r3, #19]
    e11a:	f003 0320 	and.w	r3, r3, #32
    e11e:	b2db      	uxtb	r3, r3
    e120:	2b00      	cmp	r3, #0
    e122:	d01c      	beq.n	e15e <_usb_d_dev_out_next+0xe2>
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	685b      	ldr	r3, [r3, #4]
    e128:	2b00      	cmp	r3, #0
    e12a:	d018      	beq.n	e15e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    e12c:	687b      	ldr	r3, [r7, #4]
    e12e:	685b      	ldr	r3, [r3, #4]
    e130:	b29a      	uxth	r2, r3
    e132:	687b      	ldr	r3, [r7, #4]
    e134:	689b      	ldr	r3, [r3, #8]
    e136:	b29b      	uxth	r3, r3
    e138:	1ad3      	subs	r3, r2, r3
    e13a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	681a      	ldr	r2, [r3, #0]
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	689b      	ldr	r3, [r3, #8]
    e144:	18d0      	adds	r0, r2, r3
    e146:	687b      	ldr	r3, [r7, #4]
    e148:	68d9      	ldr	r1, [r3, #12]
    e14a:	89ba      	ldrh	r2, [r7, #12]
    e14c:	8a3b      	ldrh	r3, [r7, #16]
    e14e:	429a      	cmp	r2, r3
    e150:	d901      	bls.n	e156 <_usb_d_dev_out_next+0xda>
    e152:	8a3b      	ldrh	r3, [r7, #16]
    e154:	e000      	b.n	e158 <_usb_d_dev_out_next+0xdc>
    e156:	89bb      	ldrh	r3, [r7, #12]
    e158:	461a      	mov	r2, r3
    e15a:	4b67      	ldr	r3, [pc, #412]	; (e2f8 <_usb_d_dev_out_next+0x27c>)
    e15c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	685b      	ldr	r3, [r3, #4]
    e162:	2b00      	cmp	r3, #0
    e164:	d121      	bne.n	e1aa <_usb_d_dev_out_next+0x12e>
    e166:	687b      	ldr	r3, [r7, #4]
    e168:	7cdb      	ldrb	r3, [r3, #19]
    e16a:	f003 0310 	and.w	r3, r3, #16
    e16e:	b2db      	uxtb	r3, r3
    e170:	2b00      	cmp	r3, #0
    e172:	d01a      	beq.n	e1aa <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    e174:	687a      	ldr	r2, [r7, #4]
    e176:	7cd3      	ldrb	r3, [r2, #19]
    e178:	f36f 1304 	bfc	r3, #4, #1
    e17c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    e17e:	687a      	ldr	r2, [r7, #4]
    e180:	7cd3      	ldrb	r3, [r2, #19]
    e182:	f043 0320 	orr.w	r3, r3, #32
    e186:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	68db      	ldr	r3, [r3, #12]
    e18c:	461a      	mov	r2, r3
    e18e:	7ffb      	ldrb	r3, [r7, #31]
    e190:	2100      	movs	r1, #0
    e192:	4618      	mov	r0, r3
    e194:	4b59      	ldr	r3, [pc, #356]	; (e2fc <_usb_d_dev_out_next+0x280>)
    e196:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    e198:	687b      	ldr	r3, [r7, #4]
    e19a:	8a1b      	ldrh	r3, [r3, #16]
    e19c:	461a      	mov	r2, r3
    e19e:	7ff8      	ldrb	r0, [r7, #31]
    e1a0:	2300      	movs	r3, #0
    e1a2:	2100      	movs	r1, #0
    e1a4:	4c56      	ldr	r4, [pc, #344]	; (e300 <_usb_d_dev_out_next+0x284>)
    e1a6:	47a0      	blx	r4
		goto _out_rx_exec;
    e1a8:	e090      	b.n	e2cc <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    e1aa:	78fb      	ldrb	r3, [r7, #3]
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d010      	beq.n	e1d2 <_usb_d_dev_out_next+0x156>
    e1b0:	687b      	ldr	r3, [r7, #4]
    e1b2:	8a1b      	ldrh	r3, [r3, #16]
    e1b4:	8a3a      	ldrh	r2, [r7, #16]
    e1b6:	429a      	cmp	r2, r3
    e1b8:	d20b      	bcs.n	e1d2 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    e1ba:	687a      	ldr	r2, [r7, #4]
    e1bc:	7cd3      	ldrb	r3, [r2, #19]
    e1be:	f36f 1304 	bfc	r3, #4, #1
    e1c2:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    e1c4:	687b      	ldr	r3, [r7, #4]
    e1c6:	689a      	ldr	r2, [r3, #8]
    e1c8:	8abb      	ldrh	r3, [r7, #20]
    e1ca:	441a      	add	r2, r3
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	609a      	str	r2, [r3, #8]
    e1d0:	e05c      	b.n	e28c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	689a      	ldr	r2, [r3, #8]
    e1d6:	8afb      	ldrh	r3, [r7, #22]
    e1d8:	441a      	add	r2, r3
    e1da:	687b      	ldr	r3, [r7, #4]
    e1dc:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    e1de:	687b      	ldr	r3, [r7, #4]
    e1e0:	689a      	ldr	r2, [r3, #8]
    e1e2:	687b      	ldr	r3, [r7, #4]
    e1e4:	685b      	ldr	r3, [r3, #4]
    e1e6:	429a      	cmp	r2, r3
    e1e8:	d250      	bcs.n	e28c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    e1ea:	687b      	ldr	r3, [r7, #4]
    e1ec:	685b      	ldr	r3, [r3, #4]
    e1ee:	b29a      	uxth	r2, r3
    e1f0:	687b      	ldr	r3, [r7, #4]
    e1f2:	689b      	ldr	r3, [r3, #8]
    e1f4:	b29b      	uxth	r3, r3
    e1f6:	1ad3      	subs	r3, r2, r3
    e1f8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    e1fa:	687b      	ldr	r3, [r7, #4]
    e1fc:	7cdb      	ldrb	r3, [r3, #19]
    e1fe:	f003 0320 	and.w	r3, r3, #32
    e202:	b2db      	uxtb	r3, r3
    e204:	2b00      	cmp	r3, #0
    e206:	d010      	beq.n	e22a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    e208:	687b      	ldr	r3, [r7, #4]
    e20a:	8a1b      	ldrh	r3, [r3, #16]
    e20c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e20e:	429a      	cmp	r2, r3
    e210:	d902      	bls.n	e218 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    e212:	687b      	ldr	r3, [r7, #4]
    e214:	8a1b      	ldrh	r3, [r3, #16]
    e216:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	68db      	ldr	r3, [r3, #12]
    e21c:	461a      	mov	r2, r3
    e21e:	7ffb      	ldrb	r3, [r7, #31]
    e220:	2100      	movs	r1, #0
    e222:	4618      	mov	r0, r3
    e224:	4b35      	ldr	r3, [pc, #212]	; (e2fc <_usb_d_dev_out_next+0x280>)
    e226:	4798      	blx	r3
    e228:	e029      	b.n	e27e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    e22a:	687b      	ldr	r3, [r7, #4]
    e22c:	8a1b      	ldrh	r3, [r3, #16]
    e22e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e230:	429a      	cmp	r2, r3
    e232:	d90f      	bls.n	e254 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    e234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    e236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e23a:	d903      	bls.n	e244 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    e23c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e240:	84fb      	strh	r3, [r7, #38]	; 0x26
    e242:	e011      	b.n	e268 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    e244:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e246:	8a7b      	ldrh	r3, [r7, #18]
    e248:	4013      	ands	r3, r2
    e24a:	b29b      	uxth	r3, r3
    e24c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e24e:	1ad3      	subs	r3, r2, r3
    e250:	84fb      	strh	r3, [r7, #38]	; 0x26
    e252:	e009      	b.n	e268 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    e254:	687b      	ldr	r3, [r7, #4]
    e256:	8a1b      	ldrh	r3, [r3, #16]
    e258:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e25a:	429a      	cmp	r2, r3
    e25c:	d204      	bcs.n	e268 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    e25e:	687a      	ldr	r2, [r7, #4]
    e260:	7cd3      	ldrb	r3, [r2, #19]
    e262:	f043 0320 	orr.w	r3, r3, #32
    e266:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e268:	687b      	ldr	r3, [r7, #4]
    e26a:	681a      	ldr	r2, [r3, #0]
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	689b      	ldr	r3, [r3, #8]
    e270:	4413      	add	r3, r2
    e272:	461a      	mov	r2, r3
    e274:	7ffb      	ldrb	r3, [r7, #31]
    e276:	2100      	movs	r1, #0
    e278:	4618      	mov	r0, r3
    e27a:	4b20      	ldr	r3, [pc, #128]	; (e2fc <_usb_d_dev_out_next+0x280>)
    e27c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    e27e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e280:	7ff8      	ldrb	r0, [r7, #31]
    e282:	2300      	movs	r3, #0
    e284:	2100      	movs	r1, #0
    e286:	4c1e      	ldr	r4, [pc, #120]	; (e300 <_usb_d_dev_out_next+0x284>)
    e288:	47a0      	blx	r4
			goto _out_rx_exec;
    e28a:	e01f      	b.n	e2cc <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    e28c:	7bfb      	ldrb	r3, [r7, #15]
    e28e:	2b00      	cmp	r3, #0
    e290:	d006      	beq.n	e2a0 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    e292:	7ffb      	ldrb	r3, [r7, #31]
    e294:	222d      	movs	r2, #45	; 0x2d
    e296:	4619      	mov	r1, r3
    e298:	6a38      	ldr	r0, [r7, #32]
    e29a:	4b1a      	ldr	r3, [pc, #104]	; (e304 <_usb_d_dev_out_next+0x288>)
    e29c:	4798      	blx	r3
    e29e:	e005      	b.n	e2ac <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    e2a0:	7ffb      	ldrb	r3, [r7, #31]
    e2a2:	2225      	movs	r2, #37	; 0x25
    e2a4:	4619      	mov	r1, r3
    e2a6:	6a38      	ldr	r0, [r7, #32]
    e2a8:	4b16      	ldr	r3, [pc, #88]	; (e304 <_usb_d_dev_out_next+0x288>)
    e2aa:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    e2ac:	7ffb      	ldrb	r3, [r7, #31]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d107      	bne.n	e2c2 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e2b2:	687b      	ldr	r3, [r7, #4]
    e2b4:	68db      	ldr	r3, [r3, #12]
    e2b6:	461a      	mov	r2, r3
    e2b8:	7ffb      	ldrb	r3, [r7, #31]
    e2ba:	2100      	movs	r1, #0
    e2bc:	4618      	mov	r0, r3
    e2be:	4b0f      	ldr	r3, [pc, #60]	; (e2fc <_usb_d_dev_out_next+0x280>)
    e2c0:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    e2c2:	2100      	movs	r1, #0
    e2c4:	6878      	ldr	r0, [r7, #4]
    e2c6:	4b10      	ldr	r3, [pc, #64]	; (e308 <_usb_d_dev_out_next+0x28c>)
    e2c8:	4798      	blx	r3
	return;
    e2ca:	e031      	b.n	e330 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    e2cc:	78fb      	ldrb	r3, [r7, #3]
    e2ce:	f083 0301 	eor.w	r3, r3, #1
    e2d2:	b2db      	uxtb	r3, r3
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d025      	beq.n	e324 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    e2d8:	7bfb      	ldrb	r3, [r7, #15]
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d018      	beq.n	e310 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    e2de:	7ffb      	ldrb	r3, [r7, #31]
    e2e0:	2101      	movs	r1, #1
    e2e2:	4618      	mov	r0, r3
    e2e4:	4b09      	ldr	r3, [pc, #36]	; (e30c <_usb_d_dev_out_next+0x290>)
    e2e6:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    e2e8:	232d      	movs	r3, #45	; 0x2d
    e2ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    e2ee:	e012      	b.n	e316 <_usb_d_dev_out_next+0x29a>
    e2f0:	20001c50 	.word	0x20001c50
    e2f4:	0000d85d 	.word	0x0000d85d
    e2f8:	0001c521 	.word	0x0001c521
    e2fc:	0000d889 	.word	0x0000d889
    e300:	0000da11 	.word	0x0000da11
    e304:	0000d169 	.word	0x0000d169
    e308:	0000f18d 	.word	0x0000f18d
    e30c:	0000da51 	.word	0x0000da51
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    e310:	2325      	movs	r3, #37	; 0x25
    e312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    e316:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    e31a:	7ffb      	ldrb	r3, [r7, #31]
    e31c:	4619      	mov	r1, r3
    e31e:	6a38      	ldr	r0, [r7, #32]
    e320:	4b05      	ldr	r3, [pc, #20]	; (e338 <_usb_d_dev_out_next+0x2bc>)
    e322:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    e324:	7ffb      	ldrb	r3, [r7, #31]
    e326:	2201      	movs	r2, #1
    e328:	2100      	movs	r1, #0
    e32a:	4618      	mov	r0, r3
    e32c:	4b03      	ldr	r3, [pc, #12]	; (e33c <_usb_d_dev_out_next+0x2c0>)
    e32e:	4798      	blx	r3
}
    e330:	372c      	adds	r7, #44	; 0x2c
    e332:	46bd      	mov	sp, r7
    e334:	bd90      	pop	{r4, r7, pc}
    e336:	bf00      	nop
    e338:	0000d13d 	.word	0x0000d13d
    e33c:	0000dae1 	.word	0x0000dae1

0000e340 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    e340:	b580      	push	{r7, lr}
    e342:	b084      	sub	sp, #16
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	7c9b      	ldrb	r3, [r3, #18]
    e34c:	f003 030f 	and.w	r3, r3, #15
    e350:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e352:	687b      	ldr	r3, [r7, #4]
    e354:	7cdb      	ldrb	r3, [r3, #19]
    e356:	f003 0307 	and.w	r3, r3, #7
    e35a:	b2db      	uxtb	r3, r3
    e35c:	2b01      	cmp	r3, #1
    e35e:	bf0c      	ite	eq
    e360:	2301      	moveq	r3, #1
    e362:	2300      	movne	r3, #0
    e364:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    e366:	7bbb      	ldrb	r3, [r7, #14]
    e368:	f083 0301 	eor.w	r3, r3, #1
    e36c:	b2db      	uxtb	r3, r3
    e36e:	2b00      	cmp	r3, #0
    e370:	d008      	beq.n	e384 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    e372:	7bfb      	ldrb	r3, [r7, #15]
    e374:	4618      	mov	r0, r3
    e376:	4b20      	ldr	r3, [pc, #128]	; (e3f8 <_usb_d_dev_handle_setup+0xb8>)
    e378:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    e37a:	7bfb      	ldrb	r3, [r7, #15]
    e37c:	4618      	mov	r0, r3
    e37e:	4b1f      	ldr	r3, [pc, #124]	; (e3fc <_usb_d_dev_handle_setup+0xbc>)
    e380:	4798      	blx	r3
		return;
    e382:	e036      	b.n	e3f2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	7cdb      	ldrb	r3, [r3, #19]
    e388:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e38c:	b2db      	uxtb	r3, r3
    e38e:	2b00      	cmp	r3, #0
    e390:	d010      	beq.n	e3b4 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    e392:	687a      	ldr	r2, [r7, #4]
    e394:	7cd3      	ldrb	r3, [r2, #19]
    e396:	f36f 1386 	bfc	r3, #6, #1
    e39a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e39c:	7bfb      	ldrb	r3, [r7, #15]
    e39e:	2200      	movs	r2, #0
    e3a0:	2101      	movs	r1, #1
    e3a2:	4618      	mov	r0, r3
    e3a4:	4b16      	ldr	r3, [pc, #88]	; (e400 <_usb_d_dev_handle_setup+0xc0>)
    e3a6:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    e3a8:	7bfb      	ldrb	r3, [r7, #15]
    e3aa:	2200      	movs	r2, #0
    e3ac:	2100      	movs	r1, #0
    e3ae:	4618      	mov	r0, r3
    e3b0:	4b14      	ldr	r3, [pc, #80]	; (e404 <_usb_d_dev_handle_setup+0xc4>)
    e3b2:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    e3b4:	687a      	ldr	r2, [r7, #4]
    e3b6:	7cd3      	ldrb	r3, [r2, #19]
    e3b8:	f36f 03c3 	bfc	r3, #3, #1
    e3bc:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    e3be:	7bfb      	ldrb	r3, [r7, #15]
    e3c0:	2100      	movs	r1, #0
    e3c2:	4618      	mov	r0, r3
    e3c4:	4b10      	ldr	r3, [pc, #64]	; (e408 <_usb_d_dev_handle_setup+0xc8>)
    e3c6:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    e3c8:	7bfb      	ldrb	r3, [r7, #15]
    e3ca:	2101      	movs	r1, #1
    e3cc:	4618      	mov	r0, r3
    e3ce:	4b0e      	ldr	r3, [pc, #56]	; (e408 <_usb_d_dev_handle_setup+0xc8>)
    e3d0:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    e3d2:	7bfb      	ldrb	r3, [r7, #15]
    e3d4:	216f      	movs	r1, #111	; 0x6f
    e3d6:	4618      	mov	r0, r3
    e3d8:	4b0c      	ldr	r3, [pc, #48]	; (e40c <_usb_d_dev_handle_setup+0xcc>)
    e3da:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    e3dc:	7bfb      	ldrb	r3, [r7, #15]
    e3de:	216f      	movs	r1, #111	; 0x6f
    e3e0:	4618      	mov	r0, r3
    e3e2:	4b0b      	ldr	r3, [pc, #44]	; (e410 <_usb_d_dev_handle_setup+0xd0>)
    e3e4:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    e3e6:	4b0b      	ldr	r3, [pc, #44]	; (e414 <_usb_d_dev_handle_setup+0xd4>)
    e3e8:	689b      	ldr	r3, [r3, #8]
    e3ea:	687a      	ldr	r2, [r7, #4]
    e3ec:	7c92      	ldrb	r2, [r2, #18]
    e3ee:	4610      	mov	r0, r2
    e3f0:	4798      	blx	r3
}
    e3f2:	3710      	adds	r7, #16
    e3f4:	46bd      	mov	sp, r7
    e3f6:	bd80      	pop	{r7, pc}
    e3f8:	0000d7e5 	.word	0x0000d7e5
    e3fc:	0000d791 	.word	0x0000d791
    e400:	0000da89 	.word	0x0000da89
    e404:	0000dae1 	.word	0x0000dae1
    e408:	0000da51 	.word	0x0000da51
    e40c:	0000d591 	.word	0x0000d591
    e410:	0000d5e1 	.word	0x0000d5e1
    e414:	20001b88 	.word	0x20001b88

0000e418 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    e418:	b580      	push	{r7, lr}
    e41a:	b084      	sub	sp, #16
    e41c:	af00      	add	r7, sp, #0
    e41e:	6078      	str	r0, [r7, #4]
    e420:	460b      	mov	r3, r1
    e422:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	7c9b      	ldrb	r3, [r3, #18]
    e428:	f003 030f 	and.w	r3, r3, #15
    e42c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    e42e:	78f9      	ldrb	r1, [r7, #3]
    e430:	7bfb      	ldrb	r3, [r7, #15]
    e432:	2200      	movs	r2, #0
    e434:	4618      	mov	r0, r3
    e436:	4b07      	ldr	r3, [pc, #28]	; (e454 <_usb_d_dev_handle_stall+0x3c>)
    e438:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    e43a:	4b07      	ldr	r3, [pc, #28]	; (e458 <_usb_d_dev_handle_stall+0x40>)
    e43c:	691b      	ldr	r3, [r3, #16]
    e43e:	687a      	ldr	r2, [r7, #4]
    e440:	7c90      	ldrb	r0, [r2, #18]
    e442:	687a      	ldr	r2, [r7, #4]
    e444:	6892      	ldr	r2, [r2, #8]
    e446:	2101      	movs	r1, #1
    e448:	4798      	blx	r3
}
    e44a:	bf00      	nop
    e44c:	3710      	adds	r7, #16
    e44e:	46bd      	mov	sp, r7
    e450:	bd80      	pop	{r7, pc}
    e452:	bf00      	nop
    e454:	0000d745 	.word	0x0000d745
    e458:	20001b88 	.word	0x20001b88

0000e45c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    e45c:	b580      	push	{r7, lr}
    e45e:	b088      	sub	sp, #32
    e460:	af00      	add	r7, sp, #0
    e462:	6078      	str	r0, [r7, #4]
    e464:	460b      	mov	r3, r1
    e466:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    e468:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e46c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	7c9b      	ldrb	r3, [r3, #18]
    e472:	f003 030f 	and.w	r3, r3, #15
    e476:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    e478:	4b61      	ldr	r3, [pc, #388]	; (e600 <_usb_d_dev_handle_trfail+0x1a4>)
    e47a:	881b      	ldrh	r3, [r3, #0]
    e47c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    e47e:	7efb      	ldrb	r3, [r7, #27]
    e480:	015b      	lsls	r3, r3, #5
    e482:	4a60      	ldr	r2, [pc, #384]	; (e604 <_usb_d_dev_handle_trfail+0x1a8>)
    e484:	4413      	add	r3, r2
    e486:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    e488:	78fb      	ldrb	r3, [r7, #3]
    e48a:	2b00      	cmp	r3, #0
    e48c:	d006      	beq.n	e49c <_usb_d_dev_handle_trfail+0x40>
    e48e:	7efb      	ldrb	r3, [r7, #27]
    e490:	4619      	mov	r1, r3
    e492:	69f8      	ldr	r0, [r7, #28]
    e494:	4b5c      	ldr	r3, [pc, #368]	; (e608 <_usb_d_dev_handle_trfail+0x1ac>)
    e496:	4798      	blx	r3
    e498:	4603      	mov	r3, r0
    e49a:	e005      	b.n	e4a8 <_usb_d_dev_handle_trfail+0x4c>
    e49c:	7efb      	ldrb	r3, [r7, #27]
    e49e:	4619      	mov	r1, r3
    e4a0:	69f8      	ldr	r0, [r7, #28]
    e4a2:	4b5a      	ldr	r3, [pc, #360]	; (e60c <_usb_d_dev_handle_trfail+0x1b0>)
    e4a4:	4798      	blx	r3
    e4a6:	4603      	mov	r3, r0
    e4a8:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e4aa:	687b      	ldr	r3, [r7, #4]
    e4ac:	7cdb      	ldrb	r3, [r3, #19]
    e4ae:	f003 0307 	and.w	r3, r3, #7
    e4b2:	b2db      	uxtb	r3, r3
    e4b4:	2b01      	cmp	r3, #1
    e4b6:	bf0c      	ite	eq
    e4b8:	2301      	moveq	r3, #1
    e4ba:	2300      	movne	r3, #0
    e4bc:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    e4be:	78fb      	ldrb	r3, [r7, #3]
    e4c0:	011b      	lsls	r3, r3, #4
    e4c2:	697a      	ldr	r2, [r7, #20]
    e4c4:	4413      	add	r3, r2
    e4c6:	7a9b      	ldrb	r3, [r3, #10]
    e4c8:	b2db      	uxtb	r3, r3
    e4ca:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    e4cc:	7cfb      	ldrb	r3, [r7, #19]
    e4ce:	2b02      	cmp	r3, #2
    e4d0:	d12f      	bne.n	e532 <_usb_d_dev_handle_trfail+0xd6>
    e4d2:	7b3b      	ldrb	r3, [r7, #12]
    e4d4:	f003 0301 	and.w	r3, r3, #1
    e4d8:	b2db      	uxtb	r3, r3
    e4da:	2b00      	cmp	r3, #0
    e4dc:	d029      	beq.n	e532 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    e4de:	78fb      	ldrb	r3, [r7, #3]
    e4e0:	011b      	lsls	r3, r3, #4
    e4e2:	697a      	ldr	r2, [r7, #20]
    e4e4:	441a      	add	r2, r3
    e4e6:	7a93      	ldrb	r3, [r2, #10]
    e4e8:	f36f 0300 	bfc	r3, #0, #1
    e4ec:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    e4ee:	78fb      	ldrb	r3, [r7, #3]
    e4f0:	f107 0220 	add.w	r2, r7, #32
    e4f4:	4413      	add	r3, r2
    e4f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e4fa:	7efb      	ldrb	r3, [r7, #27]
    e4fc:	4619      	mov	r1, r3
    e4fe:	69f8      	ldr	r0, [r7, #28]
    e500:	4b43      	ldr	r3, [pc, #268]	; (e610 <_usb_d_dev_handle_trfail+0x1b4>)
    e502:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    e504:	78fb      	ldrb	r3, [r7, #3]
    e506:	f107 0220 	add.w	r2, r7, #32
    e50a:	4413      	add	r3, r2
    e50c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e510:	7efb      	ldrb	r3, [r7, #27]
    e512:	4619      	mov	r1, r3
    e514:	69f8      	ldr	r0, [r7, #28]
    e516:	4b3f      	ldr	r3, [pc, #252]	; (e614 <_usb_d_dev_handle_trfail+0x1b8>)
    e518:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    e51a:	78fb      	ldrb	r3, [r7, #3]
    e51c:	2b00      	cmp	r3, #0
    e51e:	bf14      	ite	ne
    e520:	2301      	movne	r3, #1
    e522:	2300      	moveq	r3, #0
    e524:	b2db      	uxtb	r3, r3
    e526:	2204      	movs	r2, #4
    e528:	4619      	mov	r1, r3
    e52a:	6878      	ldr	r0, [r7, #4]
    e52c:	4b3a      	ldr	r3, [pc, #232]	; (e618 <_usb_d_dev_handle_trfail+0x1bc>)
    e52e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    e530:	e062      	b.n	e5f8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    e532:	7b3b      	ldrb	r3, [r7, #12]
    e534:	f003 0302 	and.w	r3, r3, #2
    e538:	b2db      	uxtb	r3, r3
    e53a:	2b00      	cmp	r3, #0
    e53c:	d040      	beq.n	e5c0 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    e53e:	78fb      	ldrb	r3, [r7, #3]
    e540:	011b      	lsls	r3, r3, #4
    e542:	697a      	ldr	r2, [r7, #20]
    e544:	441a      	add	r2, r3
    e546:	7a93      	ldrb	r3, [r2, #10]
    e548:	f36f 0341 	bfc	r3, #1, #1
    e54c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    e54e:	78fb      	ldrb	r3, [r7, #3]
    e550:	f107 0220 	add.w	r2, r7, #32
    e554:	4413      	add	r3, r2
    e556:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e55a:	7efb      	ldrb	r3, [r7, #27]
    e55c:	4619      	mov	r1, r3
    e55e:	69f8      	ldr	r0, [r7, #28]
    e560:	4b2b      	ldr	r3, [pc, #172]	; (e610 <_usb_d_dev_handle_trfail+0x1b4>)
    e562:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    e564:	78fb      	ldrb	r3, [r7, #3]
    e566:	f107 0220 	add.w	r2, r7, #32
    e56a:	4413      	add	r3, r2
    e56c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e570:	7efb      	ldrb	r3, [r7, #27]
    e572:	4619      	mov	r1, r3
    e574:	69f8      	ldr	r0, [r7, #28]
    e576:	4b27      	ldr	r3, [pc, #156]	; (e614 <_usb_d_dev_handle_trfail+0x1b8>)
    e578:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    e57a:	7cbb      	ldrb	r3, [r7, #18]
    e57c:	2b00      	cmp	r3, #0
    e57e:	d03b      	beq.n	e5f8 <_usb_d_dev_handle_trfail+0x19c>
    e580:	687b      	ldr	r3, [r7, #4]
    e582:	7cdb      	ldrb	r3, [r3, #19]
    e584:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e588:	b2db      	uxtb	r3, r3
    e58a:	2b00      	cmp	r3, #0
    e58c:	d034      	beq.n	e5f8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    e58e:	687b      	ldr	r3, [r7, #4]
    e590:	7cdb      	ldrb	r3, [r3, #19]
    e592:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    e596:	b2db      	uxtb	r3, r3
    e598:	461a      	mov	r2, r3
    e59a:	78fb      	ldrb	r3, [r7, #3]
    e59c:	4293      	cmp	r3, r2
    e59e:	d02b      	beq.n	e5f8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	7cdb      	ldrb	r3, [r3, #19]
    e5a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    e5a8:	b2db      	uxtb	r3, r3
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	bf14      	ite	ne
    e5ae:	2301      	movne	r3, #1
    e5b0:	2300      	moveq	r3, #0
    e5b2:	b2db      	uxtb	r3, r3
    e5b4:	2200      	movs	r2, #0
    e5b6:	4619      	mov	r1, r3
    e5b8:	6878      	ldr	r0, [r7, #4]
    e5ba:	4b17      	ldr	r3, [pc, #92]	; (e618 <_usb_d_dev_handle_trfail+0x1bc>)
    e5bc:	4798      	blx	r3
}
    e5be:	e01b      	b.n	e5f8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    e5c0:	78fa      	ldrb	r2, [r7, #3]
    e5c2:	7efb      	ldrb	r3, [r7, #27]
    e5c4:	4611      	mov	r1, r2
    e5c6:	4618      	mov	r0, r3
    e5c8:	4b14      	ldr	r3, [pc, #80]	; (e61c <_usb_d_dev_handle_trfail+0x1c0>)
    e5ca:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    e5cc:	78fb      	ldrb	r3, [r7, #3]
    e5ce:	f107 0220 	add.w	r2, r7, #32
    e5d2:	4413      	add	r3, r2
    e5d4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e5d8:	7efb      	ldrb	r3, [r7, #27]
    e5da:	4619      	mov	r1, r3
    e5dc:	69f8      	ldr	r0, [r7, #28]
    e5de:	4b0c      	ldr	r3, [pc, #48]	; (e610 <_usb_d_dev_handle_trfail+0x1b4>)
    e5e0:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    e5e2:	78fb      	ldrb	r3, [r7, #3]
    e5e4:	f107 0220 	add.w	r2, r7, #32
    e5e8:	4413      	add	r3, r2
    e5ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    e5ee:	7efb      	ldrb	r3, [r7, #27]
    e5f0:	4619      	mov	r1, r3
    e5f2:	69f8      	ldr	r0, [r7, #28]
    e5f4:	4b07      	ldr	r3, [pc, #28]	; (e614 <_usb_d_dev_handle_trfail+0x1b8>)
    e5f6:	4798      	blx	r3
}
    e5f8:	bf00      	nop
    e5fa:	3720      	adds	r7, #32
    e5fc:	46bd      	mov	sp, r7
    e5fe:	bd80      	pop	{r7, pc}
    e600:	0001cedc 	.word	0x0001cedc
    e604:	20001c50 	.word	0x20001c50
    e608:	0000d1c5 	.word	0x0000d1c5
    e60c:	0000d195 	.word	0x0000d195
    e610:	0000d069 	.word	0x0000d069
    e614:	0000d169 	.word	0x0000d169
    e618:	0000f1d5 	.word	0x0000f1d5
    e61c:	0000da51 	.word	0x0000da51

0000e620 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    e620:	b580      	push	{r7, lr}
    e622:	b082      	sub	sp, #8
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
    e628:	460b      	mov	r3, r1
    e62a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    e62c:	78fb      	ldrb	r3, [r7, #3]
    e62e:	f003 0310 	and.w	r3, r3, #16
    e632:	2b00      	cmp	r3, #0
    e634:	d003      	beq.n	e63e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    e636:	6878      	ldr	r0, [r7, #4]
    e638:	4b0c      	ldr	r3, [pc, #48]	; (e66c <_usb_d_dev_trans_setup_isr+0x4c>)
    e63a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    e63c:	e012      	b.n	e664 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    e63e:	78fb      	ldrb	r3, [r7, #3]
    e640:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e644:	2b00      	cmp	r3, #0
    e646:	d004      	beq.n	e652 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    e648:	2101      	movs	r1, #1
    e64a:	6878      	ldr	r0, [r7, #4]
    e64c:	4b08      	ldr	r3, [pc, #32]	; (e670 <_usb_d_dev_trans_setup_isr+0x50>)
    e64e:	4798      	blx	r3
}
    e650:	e008      	b.n	e664 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    e652:	78fb      	ldrb	r3, [r7, #3]
    e654:	f003 0320 	and.w	r3, r3, #32
    e658:	2b00      	cmp	r3, #0
    e65a:	d003      	beq.n	e664 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    e65c:	2100      	movs	r1, #0
    e65e:	6878      	ldr	r0, [r7, #4]
    e660:	4b03      	ldr	r3, [pc, #12]	; (e670 <_usb_d_dev_trans_setup_isr+0x50>)
    e662:	4798      	blx	r3
}
    e664:	bf00      	nop
    e666:	3708      	adds	r7, #8
    e668:	46bd      	mov	sp, r7
    e66a:	bd80      	pop	{r7, pc}
    e66c:	0000e341 	.word	0x0000e341
    e670:	0000e419 	.word	0x0000e419

0000e674 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    e674:	b580      	push	{r7, lr}
    e676:	b082      	sub	sp, #8
    e678:	af00      	add	r7, sp, #0
    e67a:	6078      	str	r0, [r7, #4]
    e67c:	460b      	mov	r3, r1
    e67e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    e680:	78fb      	ldrb	r3, [r7, #3]
    e682:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e686:	2b00      	cmp	r3, #0
    e688:	d004      	beq.n	e694 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    e68a:	2101      	movs	r1, #1
    e68c:	6878      	ldr	r0, [r7, #4]
    e68e:	4b1a      	ldr	r3, [pc, #104]	; (e6f8 <_usb_d_dev_trans_in_isr+0x84>)
    e690:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    e692:	e02c      	b.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    e694:	78fb      	ldrb	r3, [r7, #3]
    e696:	f003 0308 	and.w	r3, r3, #8
    e69a:	2b00      	cmp	r3, #0
    e69c:	d004      	beq.n	e6a8 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    e69e:	2101      	movs	r1, #1
    e6a0:	6878      	ldr	r0, [r7, #4]
    e6a2:	4b16      	ldr	r3, [pc, #88]	; (e6fc <_usb_d_dev_trans_in_isr+0x88>)
    e6a4:	4798      	blx	r3
}
    e6a6:	e022      	b.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    e6a8:	78fb      	ldrb	r3, [r7, #3]
    e6aa:	f003 0302 	and.w	r3, r3, #2
    e6ae:	2b00      	cmp	r3, #0
    e6b0:	d004      	beq.n	e6bc <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    e6b2:	2101      	movs	r1, #1
    e6b4:	6878      	ldr	r0, [r7, #4]
    e6b6:	4b12      	ldr	r3, [pc, #72]	; (e700 <_usb_d_dev_trans_in_isr+0x8c>)
    e6b8:	4798      	blx	r3
}
    e6ba:	e018      	b.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    e6bc:	687b      	ldr	r3, [r7, #4]
    e6be:	7cdb      	ldrb	r3, [r3, #19]
    e6c0:	f003 0307 	and.w	r3, r3, #7
    e6c4:	b2db      	uxtb	r3, r3
    e6c6:	2b01      	cmp	r3, #1
    e6c8:	d111      	bne.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    e6ca:	78fb      	ldrb	r3, [r7, #3]
    e6cc:	f003 0304 	and.w	r3, r3, #4
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d004      	beq.n	e6de <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    e6d4:	2100      	movs	r1, #0
    e6d6:	6878      	ldr	r0, [r7, #4]
    e6d8:	4b08      	ldr	r3, [pc, #32]	; (e6fc <_usb_d_dev_trans_in_isr+0x88>)
    e6da:	4798      	blx	r3
}
    e6dc:	e007      	b.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    e6de:	78fb      	ldrb	r3, [r7, #3]
    e6e0:	f003 0310 	and.w	r3, r3, #16
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	d002      	beq.n	e6ee <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    e6e8:	6878      	ldr	r0, [r7, #4]
    e6ea:	4b06      	ldr	r3, [pc, #24]	; (e704 <_usb_d_dev_trans_in_isr+0x90>)
    e6ec:	4798      	blx	r3
}
    e6ee:	bf00      	nop
    e6f0:	3708      	adds	r7, #8
    e6f2:	46bd      	mov	sp, r7
    e6f4:	bd80      	pop	{r7, pc}
    e6f6:	bf00      	nop
    e6f8:	0000e419 	.word	0x0000e419
    e6fc:	0000e45d 	.word	0x0000e45d
    e700:	0000de65 	.word	0x0000de65
    e704:	0000e341 	.word	0x0000e341

0000e708 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    e708:	b580      	push	{r7, lr}
    e70a:	b082      	sub	sp, #8
    e70c:	af00      	add	r7, sp, #0
    e70e:	6078      	str	r0, [r7, #4]
    e710:	460b      	mov	r3, r1
    e712:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    e714:	78fb      	ldrb	r3, [r7, #3]
    e716:	f003 0320 	and.w	r3, r3, #32
    e71a:	2b00      	cmp	r3, #0
    e71c:	d004      	beq.n	e728 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    e71e:	2100      	movs	r1, #0
    e720:	6878      	ldr	r0, [r7, #4]
    e722:	4b1a      	ldr	r3, [pc, #104]	; (e78c <_usb_d_dev_trans_out_isr+0x84>)
    e724:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    e726:	e02c      	b.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    e728:	78fb      	ldrb	r3, [r7, #3]
    e72a:	f003 0304 	and.w	r3, r3, #4
    e72e:	2b00      	cmp	r3, #0
    e730:	d004      	beq.n	e73c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    e732:	2100      	movs	r1, #0
    e734:	6878      	ldr	r0, [r7, #4]
    e736:	4b16      	ldr	r3, [pc, #88]	; (e790 <_usb_d_dev_trans_out_isr+0x88>)
    e738:	4798      	blx	r3
}
    e73a:	e022      	b.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    e73c:	78fb      	ldrb	r3, [r7, #3]
    e73e:	f003 0301 	and.w	r3, r3, #1
    e742:	2b00      	cmp	r3, #0
    e744:	d004      	beq.n	e750 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    e746:	2101      	movs	r1, #1
    e748:	6878      	ldr	r0, [r7, #4]
    e74a:	4b12      	ldr	r3, [pc, #72]	; (e794 <_usb_d_dev_trans_out_isr+0x8c>)
    e74c:	4798      	blx	r3
}
    e74e:	e018      	b.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    e750:	687b      	ldr	r3, [r7, #4]
    e752:	7cdb      	ldrb	r3, [r3, #19]
    e754:	f003 0307 	and.w	r3, r3, #7
    e758:	b2db      	uxtb	r3, r3
    e75a:	2b01      	cmp	r3, #1
    e75c:	d111      	bne.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    e75e:	78fb      	ldrb	r3, [r7, #3]
    e760:	f003 0308 	and.w	r3, r3, #8
    e764:	2b00      	cmp	r3, #0
    e766:	d004      	beq.n	e772 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    e768:	2101      	movs	r1, #1
    e76a:	6878      	ldr	r0, [r7, #4]
    e76c:	4b08      	ldr	r3, [pc, #32]	; (e790 <_usb_d_dev_trans_out_isr+0x88>)
    e76e:	4798      	blx	r3
}
    e770:	e007      	b.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    e772:	78fb      	ldrb	r3, [r7, #3]
    e774:	f003 0310 	and.w	r3, r3, #16
    e778:	2b00      	cmp	r3, #0
    e77a:	d002      	beq.n	e782 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    e77c:	6878      	ldr	r0, [r7, #4]
    e77e:	4b06      	ldr	r3, [pc, #24]	; (e798 <_usb_d_dev_trans_out_isr+0x90>)
    e780:	4798      	blx	r3
}
    e782:	bf00      	nop
    e784:	3708      	adds	r7, #8
    e786:	46bd      	mov	sp, r7
    e788:	bd80      	pop	{r7, pc}
    e78a:	bf00      	nop
    e78c:	0000e419 	.word	0x0000e419
    e790:	0000e45d 	.word	0x0000e45d
    e794:	0000e07d 	.word	0x0000e07d
    e798:	0000e341 	.word	0x0000e341

0000e79c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    e79c:	b580      	push	{r7, lr}
    e79e:	b084      	sub	sp, #16
    e7a0:	af00      	add	r7, sp, #0
    e7a2:	6078      	str	r0, [r7, #4]
    e7a4:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    e7a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e7aa:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e7ac:	683b      	ldr	r3, [r7, #0]
    e7ae:	7c9b      	ldrb	r3, [r3, #18]
    e7b0:	f003 030f 	and.w	r3, r3, #15
    e7b4:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    e7b6:	7afb      	ldrb	r3, [r7, #11]
    e7b8:	2201      	movs	r2, #1
    e7ba:	409a      	lsls	r2, r3
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	4013      	ands	r3, r2
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d03d      	beq.n	e840 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    e7c4:	7afb      	ldrb	r3, [r7, #11]
    e7c6:	68fa      	ldr	r2, [r7, #12]
    e7c8:	3308      	adds	r3, #8
    e7ca:	015b      	lsls	r3, r3, #5
    e7cc:	4413      	add	r3, r2
    e7ce:	3307      	adds	r3, #7
    e7d0:	781b      	ldrb	r3, [r3, #0]
    e7d2:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    e7d4:	7afb      	ldrb	r3, [r7, #11]
    e7d6:	68fa      	ldr	r2, [r7, #12]
    e7d8:	015b      	lsls	r3, r3, #5
    e7da:	4413      	add	r3, r2
    e7dc:	f203 1309 	addw	r3, r3, #265	; 0x109
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    e7e4:	7aba      	ldrb	r2, [r7, #10]
    e7e6:	7a7b      	ldrb	r3, [r7, #9]
    e7e8:	4013      	ands	r3, r2
    e7ea:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    e7ec:	7abb      	ldrb	r3, [r7, #10]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d027      	beq.n	e842 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    e7f2:	683b      	ldr	r3, [r7, #0]
    e7f4:	7cdb      	ldrb	r3, [r3, #19]
    e7f6:	f003 0307 	and.w	r3, r3, #7
    e7fa:	b2db      	uxtb	r3, r3
    e7fc:	2b01      	cmp	r3, #1
    e7fe:	d10c      	bne.n	e81a <_usb_d_dev_handle_eps+0x7e>
    e800:	683b      	ldr	r3, [r7, #0]
    e802:	7cdb      	ldrb	r3, [r3, #19]
    e804:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e808:	b2db      	uxtb	r3, r3
    e80a:	2b00      	cmp	r3, #0
    e80c:	d105      	bne.n	e81a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    e80e:	7abb      	ldrb	r3, [r7, #10]
    e810:	4619      	mov	r1, r3
    e812:	6838      	ldr	r0, [r7, #0]
    e814:	4b0c      	ldr	r3, [pc, #48]	; (e848 <_usb_d_dev_handle_eps+0xac>)
    e816:	4798      	blx	r3
    e818:	e013      	b.n	e842 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    e81a:	683b      	ldr	r3, [r7, #0]
    e81c:	7cdb      	ldrb	r3, [r3, #19]
    e81e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e822:	b2db      	uxtb	r3, r3
    e824:	2b00      	cmp	r3, #0
    e826:	d005      	beq.n	e834 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    e828:	7abb      	ldrb	r3, [r7, #10]
    e82a:	4619      	mov	r1, r3
    e82c:	6838      	ldr	r0, [r7, #0]
    e82e:	4b07      	ldr	r3, [pc, #28]	; (e84c <_usb_d_dev_handle_eps+0xb0>)
    e830:	4798      	blx	r3
    e832:	e006      	b.n	e842 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    e834:	7abb      	ldrb	r3, [r7, #10]
    e836:	4619      	mov	r1, r3
    e838:	6838      	ldr	r0, [r7, #0]
    e83a:	4b05      	ldr	r3, [pc, #20]	; (e850 <_usb_d_dev_handle_eps+0xb4>)
    e83c:	4798      	blx	r3
    e83e:	e000      	b.n	e842 <_usb_d_dev_handle_eps+0xa6>
		return;
    e840:	bf00      	nop
		}
	}
}
    e842:	3710      	adds	r7, #16
    e844:	46bd      	mov	sp, r7
    e846:	bd80      	pop	{r7, pc}
    e848:	0000e621 	.word	0x0000e621
    e84c:	0000e675 	.word	0x0000e675
    e850:	0000e709 	.word	0x0000e709

0000e854 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    e854:	b580      	push	{r7, lr}
    e856:	b084      	sub	sp, #16
    e858:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    e85a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e85e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    e860:	68bb      	ldr	r3, [r7, #8]
    e862:	8c1b      	ldrh	r3, [r3, #32]
    e864:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    e866:	88fb      	ldrh	r3, [r7, #6]
    e868:	2b00      	cmp	r3, #0
    e86a:	d104      	bne.n	e876 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    e86c:	4b13      	ldr	r3, [pc, #76]	; (e8bc <_usb_d_dev_handler+0x68>)
    e86e:	4798      	blx	r3
    e870:	4603      	mov	r3, r0
    e872:	2b00      	cmp	r3, #0
    e874:	d11e      	bne.n	e8b4 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    e876:	2300      	movs	r3, #0
    e878:	73fb      	strb	r3, [r7, #15]
    e87a:	e017      	b.n	e8ac <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    e87c:	7bfa      	ldrb	r2, [r7, #15]
    e87e:	4613      	mov	r3, r2
    e880:	009b      	lsls	r3, r3, #2
    e882:	4413      	add	r3, r2
    e884:	009b      	lsls	r3, r3, #2
    e886:	3310      	adds	r3, #16
    e888:	4a0d      	ldr	r2, [pc, #52]	; (e8c0 <_usb_d_dev_handler+0x6c>)
    e88a:	4413      	add	r3, r2
    e88c:	3304      	adds	r3, #4
    e88e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    e890:	683b      	ldr	r3, [r7, #0]
    e892:	7c9b      	ldrb	r3, [r3, #18]
    e894:	2bff      	cmp	r3, #255	; 0xff
    e896:	d005      	beq.n	e8a4 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    e898:	88fb      	ldrh	r3, [r7, #6]
    e89a:	6839      	ldr	r1, [r7, #0]
    e89c:	4618      	mov	r0, r3
    e89e:	4b09      	ldr	r3, [pc, #36]	; (e8c4 <_usb_d_dev_handler+0x70>)
    e8a0:	4798      	blx	r3
    e8a2:	e000      	b.n	e8a6 <_usb_d_dev_handler+0x52>
			continue;
    e8a4:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    e8a6:	7bfb      	ldrb	r3, [r7, #15]
    e8a8:	3301      	adds	r3, #1
    e8aa:	73fb      	strb	r3, [r7, #15]
    e8ac:	7bfb      	ldrb	r3, [r7, #15]
    e8ae:	2b08      	cmp	r3, #8
    e8b0:	d9e4      	bls.n	e87c <_usb_d_dev_handler+0x28>
    e8b2:	e000      	b.n	e8b6 <_usb_d_dev_handler+0x62>
			return;
    e8b4:	bf00      	nop
	}
}
    e8b6:	3710      	adds	r7, #16
    e8b8:	46bd      	mov	sp, r7
    e8ba:	bd80      	pop	{r7, pc}
    e8bc:	0000ddad 	.word	0x0000ddad
    e8c0:	20001b88 	.word	0x20001b88
    e8c4:	0000e79d 	.word	0x0000e79d

0000e8c8 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    e8c8:	b580      	push	{r7, lr}
    e8ca:	b082      	sub	sp, #8
    e8cc:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    e8ce:	2300      	movs	r3, #0
    e8d0:	71fb      	strb	r3, [r7, #7]
    e8d2:	e023      	b.n	e91c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    e8d4:	79fa      	ldrb	r2, [r7, #7]
    e8d6:	4613      	mov	r3, r2
    e8d8:	009b      	lsls	r3, r3, #2
    e8da:	4413      	add	r3, r2
    e8dc:	009b      	lsls	r3, r3, #2
    e8de:	3310      	adds	r3, #16
    e8e0:	4a14      	ldr	r2, [pc, #80]	; (e934 <_usb_d_dev_reset_epts+0x6c>)
    e8e2:	4413      	add	r3, r2
    e8e4:	3304      	adds	r3, #4
    e8e6:	2103      	movs	r1, #3
    e8e8:	4618      	mov	r0, r3
    e8ea:	4b13      	ldr	r3, [pc, #76]	; (e938 <_usb_d_dev_reset_epts+0x70>)
    e8ec:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    e8ee:	79fa      	ldrb	r2, [r7, #7]
    e8f0:	4910      	ldr	r1, [pc, #64]	; (e934 <_usb_d_dev_reset_epts+0x6c>)
    e8f2:	4613      	mov	r3, r2
    e8f4:	009b      	lsls	r3, r3, #2
    e8f6:	4413      	add	r3, r2
    e8f8:	009b      	lsls	r3, r3, #2
    e8fa:	440b      	add	r3, r1
    e8fc:	3326      	adds	r3, #38	; 0x26
    e8fe:	22ff      	movs	r2, #255	; 0xff
    e900:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    e902:	79fa      	ldrb	r2, [r7, #7]
    e904:	490b      	ldr	r1, [pc, #44]	; (e934 <_usb_d_dev_reset_epts+0x6c>)
    e906:	4613      	mov	r3, r2
    e908:	009b      	lsls	r3, r3, #2
    e90a:	4413      	add	r3, r2
    e90c:	009b      	lsls	r3, r3, #2
    e90e:	440b      	add	r3, r1
    e910:	3327      	adds	r3, #39	; 0x27
    e912:	2200      	movs	r2, #0
    e914:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    e916:	79fb      	ldrb	r3, [r7, #7]
    e918:	3301      	adds	r3, #1
    e91a:	71fb      	strb	r3, [r7, #7]
    e91c:	79fb      	ldrb	r3, [r7, #7]
    e91e:	2b08      	cmp	r3, #8
    e920:	d9d8      	bls.n	e8d4 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    e922:	22a0      	movs	r2, #160	; 0xa0
    e924:	2100      	movs	r1, #0
    e926:	4805      	ldr	r0, [pc, #20]	; (e93c <_usb_d_dev_reset_epts+0x74>)
    e928:	4b05      	ldr	r3, [pc, #20]	; (e940 <_usb_d_dev_reset_epts+0x78>)
    e92a:	4798      	blx	r3
}
    e92c:	bf00      	nop
    e92e:	3708      	adds	r7, #8
    e930:	46bd      	mov	sp, r7
    e932:	bd80      	pop	{r7, pc}
    e934:	20001b88 	.word	0x20001b88
    e938:	0000f18d 	.word	0x0000f18d
    e93c:	20001c50 	.word	0x20001c50
    e940:	0001c655 	.word	0x0001c655

0000e944 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    e944:	b580      	push	{r7, lr}
    e946:	b084      	sub	sp, #16
    e948:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    e94a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e94e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    e950:	2301      	movs	r3, #1
    e952:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    e954:	2304      	movs	r3, #4
    e956:	713b      	strb	r3, [r7, #4]
    e958:	2300      	movs	r3, #0
    e95a:	717b      	strb	r3, [r7, #5]
    e95c:	2300      	movs	r3, #0
    e95e:	71bb      	strb	r3, [r7, #6]
    e960:	2300      	movs	r3, #0
    e962:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    e964:	2101      	movs	r1, #1
    e966:	68f8      	ldr	r0, [r7, #12]
    e968:	4b26      	ldr	r3, [pc, #152]	; (ea04 <_usb_d_dev_init+0xc0>)
    e96a:	4798      	blx	r3
    e96c:	4603      	mov	r3, r0
    e96e:	f083 0301 	eor.w	r3, r3, #1
    e972:	b2db      	uxtb	r3, r3
    e974:	2b00      	cmp	r3, #0
    e976:	d011      	beq.n	e99c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    e978:	2102      	movs	r1, #2
    e97a:	68f8      	ldr	r0, [r7, #12]
    e97c:	4b22      	ldr	r3, [pc, #136]	; (ea08 <_usb_d_dev_init+0xc4>)
    e97e:	4798      	blx	r3
    e980:	4603      	mov	r3, r0
    e982:	2b00      	cmp	r3, #0
    e984:	d006      	beq.n	e994 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    e986:	68f8      	ldr	r0, [r7, #12]
    e988:	4b20      	ldr	r3, [pc, #128]	; (ea0c <_usb_d_dev_init+0xc8>)
    e98a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    e98c:	2102      	movs	r1, #2
    e98e:	68f8      	ldr	r0, [r7, #12]
    e990:	4b1f      	ldr	r3, [pc, #124]	; (ea10 <_usb_d_dev_init+0xcc>)
    e992:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    e994:	2101      	movs	r1, #1
    e996:	68f8      	ldr	r0, [r7, #12]
    e998:	4b1e      	ldr	r3, [pc, #120]	; (ea14 <_usb_d_dev_init+0xd0>)
    e99a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    e99c:	2101      	movs	r1, #1
    e99e:	68f8      	ldr	r0, [r7, #12]
    e9a0:	4b1b      	ldr	r3, [pc, #108]	; (ea10 <_usb_d_dev_init+0xcc>)
    e9a2:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    e9a4:	4b1c      	ldr	r3, [pc, #112]	; (ea18 <_usb_d_dev_init+0xd4>)
    e9a6:	4a1d      	ldr	r2, [pc, #116]	; (ea1c <_usb_d_dev_init+0xd8>)
    e9a8:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    e9aa:	4b1b      	ldr	r3, [pc, #108]	; (ea18 <_usb_d_dev_init+0xd4>)
    e9ac:	4a1b      	ldr	r2, [pc, #108]	; (ea1c <_usb_d_dev_init+0xd8>)
    e9ae:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    e9b0:	4b19      	ldr	r3, [pc, #100]	; (ea18 <_usb_d_dev_init+0xd4>)
    e9b2:	4a1a      	ldr	r2, [pc, #104]	; (ea1c <_usb_d_dev_init+0xd8>)
    e9b4:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    e9b6:	4b18      	ldr	r3, [pc, #96]	; (ea18 <_usb_d_dev_init+0xd4>)
    e9b8:	4a18      	ldr	r2, [pc, #96]	; (ea1c <_usb_d_dev_init+0xd8>)
    e9ba:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    e9bc:	4b16      	ldr	r3, [pc, #88]	; (ea18 <_usb_d_dev_init+0xd4>)
    e9be:	4a17      	ldr	r2, [pc, #92]	; (ea1c <_usb_d_dev_init+0xd8>)
    e9c0:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    e9c2:	4b17      	ldr	r3, [pc, #92]	; (ea20 <_usb_d_dev_init+0xdc>)
    e9c4:	4798      	blx	r3

	_usb_load_calib();
    e9c6:	4b17      	ldr	r3, [pc, #92]	; (ea24 <_usb_d_dev_init+0xe0>)
    e9c8:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    e9ca:	2104      	movs	r1, #4
    e9cc:	68f8      	ldr	r0, [r7, #12]
    e9ce:	4b11      	ldr	r3, [pc, #68]	; (ea14 <_usb_d_dev_init+0xd0>)
    e9d0:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    e9d2:	4b15      	ldr	r3, [pc, #84]	; (ea28 <_usb_d_dev_init+0xe4>)
    e9d4:	4619      	mov	r1, r3
    e9d6:	68f8      	ldr	r0, [r7, #12]
    e9d8:	4b14      	ldr	r3, [pc, #80]	; (ea2c <_usb_d_dev_init+0xe8>)
    e9da:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    e9dc:	7afb      	ldrb	r3, [r7, #11]
    e9de:	f107 0210 	add.w	r2, r7, #16
    e9e2:	4413      	add	r3, r2
    e9e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    e9e8:	f043 0301 	orr.w	r3, r3, #1
    e9ec:	b2db      	uxtb	r3, r3
    e9ee:	b29b      	uxth	r3, r3
    e9f0:	4619      	mov	r1, r3
    e9f2:	68f8      	ldr	r0, [r7, #12]
    e9f4:	4b0e      	ldr	r3, [pc, #56]	; (ea30 <_usb_d_dev_init+0xec>)
    e9f6:	4798      	blx	r3

	return ERR_NONE;
    e9f8:	2300      	movs	r3, #0
}
    e9fa:	4618      	mov	r0, r3
    e9fc:	3710      	adds	r7, #16
    e9fe:	46bd      	mov	sp, r7
    ea00:	bd80      	pop	{r7, pc}
    ea02:	bf00      	nop
    ea04:	0000cfdd 	.word	0x0000cfdd
    ea08:	0000d32d 	.word	0x0000d32d
    ea0c:	0000d301 	.word	0x0000d301
    ea10:	0000cfb3 	.word	0x0000cfb3
    ea14:	0000d35d 	.word	0x0000d35d
    ea18:	20001b88 	.word	0x20001b88
    ea1c:	0000d425 	.word	0x0000d425
    ea20:	0000e8c9 	.word	0x0000e8c9
    ea24:	0000d43d 	.word	0x0000d43d
    ea28:	20001c50 	.word	0x20001c50
    ea2c:	0000d409 	.word	0x0000d409
    ea30:	0000d3cd 	.word	0x0000d3cd

0000ea34 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ea34:	b580      	push	{r7, lr}
    ea36:	b082      	sub	sp, #8
    ea38:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ea3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ea3e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ea40:	2103      	movs	r1, #3
    ea42:	6878      	ldr	r0, [r7, #4]
    ea44:	4b17      	ldr	r3, [pc, #92]	; (eaa4 <_usb_d_dev_enable+0x70>)
    ea46:	4798      	blx	r3
    ea48:	4603      	mov	r3, r0
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d002      	beq.n	ea54 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ea4e:	f06f 0310 	mvn.w	r3, #16
    ea52:	e023      	b.n	ea9c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ea54:	6878      	ldr	r0, [r7, #4]
    ea56:	4b14      	ldr	r3, [pc, #80]	; (eaa8 <_usb_d_dev_enable+0x74>)
    ea58:	4798      	blx	r3
    ea5a:	4603      	mov	r3, r0
    ea5c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ea5e:	78fb      	ldrb	r3, [r7, #3]
    ea60:	f003 0302 	and.w	r3, r3, #2
    ea64:	2b00      	cmp	r3, #0
    ea66:	d107      	bne.n	ea78 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ea68:	78fb      	ldrb	r3, [r7, #3]
    ea6a:	f043 0302 	orr.w	r3, r3, #2
    ea6e:	b2db      	uxtb	r3, r3
    ea70:	4619      	mov	r1, r3
    ea72:	6878      	ldr	r0, [r7, #4]
    ea74:	4b0d      	ldr	r3, [pc, #52]	; (eaac <_usb_d_dev_enable+0x78>)
    ea76:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ea78:	2050      	movs	r0, #80	; 0x50
    ea7a:	4b0d      	ldr	r3, [pc, #52]	; (eab0 <_usb_d_dev_enable+0x7c>)
    ea7c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ea7e:	2051      	movs	r0, #81	; 0x51
    ea80:	4b0b      	ldr	r3, [pc, #44]	; (eab0 <_usb_d_dev_enable+0x7c>)
    ea82:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ea84:	2052      	movs	r0, #82	; 0x52
    ea86:	4b0a      	ldr	r3, [pc, #40]	; (eab0 <_usb_d_dev_enable+0x7c>)
    ea88:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ea8a:	2053      	movs	r0, #83	; 0x53
    ea8c:	4b08      	ldr	r3, [pc, #32]	; (eab0 <_usb_d_dev_enable+0x7c>)
    ea8e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ea90:	f240 218d 	movw	r1, #653	; 0x28d
    ea94:	6878      	ldr	r0, [r7, #4]
    ea96:	4b07      	ldr	r3, [pc, #28]	; (eab4 <_usb_d_dev_enable+0x80>)
    ea98:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ea9a:	2300      	movs	r3, #0
}
    ea9c:	4618      	mov	r0, r3
    ea9e:	3708      	adds	r7, #8
    eaa0:	46bd      	mov	sp, r7
    eaa2:	bd80      	pop	{r7, pc}
    eaa4:	0000d2d7 	.word	0x0000d2d7
    eaa8:	0000d385 	.word	0x0000d385
    eaac:	0000d35d 	.word	0x0000d35d
    eab0:	0000cee9 	.word	0x0000cee9
    eab4:	0000d281 	.word	0x0000d281

0000eab8 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    eab8:	b580      	push	{r7, lr}
    eaba:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    eabc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eac0:	4b01      	ldr	r3, [pc, #4]	; (eac8 <_usb_d_dev_attach+0x10>)
    eac2:	4798      	blx	r3
}
    eac4:	bf00      	nop
    eac6:	bd80      	pop	{r7, pc}
    eac8:	0000d3a9 	.word	0x0000d3a9

0000eacc <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    eacc:	b580      	push	{r7, lr}
    eace:	b082      	sub	sp, #8
    ead0:	af00      	add	r7, sp, #0
    ead2:	4603      	mov	r3, r0
    ead4:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ead6:	79fb      	ldrb	r3, [r7, #7]
    ead8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    eadc:	b2db      	uxtb	r3, r3
    eade:	4619      	mov	r1, r3
    eae0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eae4:	4b02      	ldr	r3, [pc, #8]	; (eaf0 <_usb_d_dev_set_address+0x24>)
    eae6:	4798      	blx	r3
}
    eae8:	bf00      	nop
    eaea:	3708      	adds	r7, #8
    eaec:	46bd      	mov	sp, r7
    eaee:	bd80      	pop	{r7, pc}
    eaf0:	0000d3eb 	.word	0x0000d3eb

0000eaf4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    eaf4:	b590      	push	{r4, r7, lr}
    eaf6:	b085      	sub	sp, #20
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    eafc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    eb00:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    eb02:	687b      	ldr	r3, [r7, #4]
    eb04:	7c9b      	ldrb	r3, [r3, #18]
    eb06:	f003 030f 	and.w	r3, r3, #15
    eb0a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    eb0c:	687b      	ldr	r3, [r7, #4]
    eb0e:	68db      	ldr	r3, [r3, #12]
    eb10:	461a      	mov	r2, r3
    eb12:	7afb      	ldrb	r3, [r7, #11]
    eb14:	2100      	movs	r1, #0
    eb16:	4618      	mov	r0, r3
    eb18:	4b0f      	ldr	r3, [pc, #60]	; (eb58 <_usb_d_dev_trans_setup+0x64>)
    eb1a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    eb1c:	687b      	ldr	r3, [r7, #4]
    eb1e:	8a1b      	ldrh	r3, [r3, #16]
    eb20:	461a      	mov	r2, r3
    eb22:	7af8      	ldrb	r0, [r7, #11]
    eb24:	2300      	movs	r3, #0
    eb26:	2100      	movs	r1, #0
    eb28:	4c0c      	ldr	r4, [pc, #48]	; (eb5c <_usb_d_dev_trans_setup+0x68>)
    eb2a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    eb2c:	7afb      	ldrb	r3, [r7, #11]
    eb2e:	22b0      	movs	r2, #176	; 0xb0
    eb30:	4619      	mov	r1, r3
    eb32:	68f8      	ldr	r0, [r7, #12]
    eb34:	4b0a      	ldr	r3, [pc, #40]	; (eb60 <_usb_d_dev_trans_setup+0x6c>)
    eb36:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    eb38:	7afb      	ldrb	r3, [r7, #11]
    eb3a:	2200      	movs	r2, #0
    eb3c:	2100      	movs	r1, #0
    eb3e:	4618      	mov	r0, r3
    eb40:	4b08      	ldr	r3, [pc, #32]	; (eb64 <_usb_d_dev_trans_setup+0x70>)
    eb42:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    eb44:	7afb      	ldrb	r3, [r7, #11]
    eb46:	2210      	movs	r2, #16
    eb48:	4619      	mov	r1, r3
    eb4a:	68f8      	ldr	r0, [r7, #12]
    eb4c:	4b06      	ldr	r3, [pc, #24]	; (eb68 <_usb_d_dev_trans_setup+0x74>)
    eb4e:	4798      	blx	r3
}
    eb50:	bf00      	nop
    eb52:	3714      	adds	r7, #20
    eb54:	46bd      	mov	sp, r7
    eb56:	bd90      	pop	{r4, r7, pc}
    eb58:	0000d889 	.word	0x0000d889
    eb5c:	0000da11 	.word	0x0000da11
    eb60:	0000d0e9 	.word	0x0000d0e9
    eb64:	0000dae1 	.word	0x0000dae1
    eb68:	0000d13d 	.word	0x0000d13d

0000eb6c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    eb6c:	b580      	push	{r7, lr}
    eb6e:	b088      	sub	sp, #32
    eb70:	af00      	add	r7, sp, #0
    eb72:	4603      	mov	r3, r0
    eb74:	71fb      	strb	r3, [r7, #7]
    eb76:	460b      	mov	r3, r1
    eb78:	71bb      	strb	r3, [r7, #6]
    eb7a:	4613      	mov	r3, r2
    eb7c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    eb7e:	79fb      	ldrb	r3, [r7, #7]
    eb80:	f003 030f 	and.w	r3, r3, #15
    eb84:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    eb86:	79fb      	ldrb	r3, [r7, #7]
    eb88:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	bf14      	ite	ne
    eb90:	2301      	movne	r3, #1
    eb92:	2300      	moveq	r3, #0
    eb94:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    eb96:	7fba      	ldrb	r2, [r7, #30]
    eb98:	7ffb      	ldrb	r3, [r7, #31]
    eb9a:	4611      	mov	r1, r2
    eb9c:	4618      	mov	r0, r3
    eb9e:	4b3e      	ldr	r3, [pc, #248]	; (ec98 <_usb_d_dev_ep_init+0x12c>)
    eba0:	4798      	blx	r3
    eba2:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    eba4:	79bb      	ldrb	r3, [r7, #6]
    eba6:	f003 0303 	and.w	r3, r3, #3
    ebaa:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ebac:	7ffa      	ldrb	r2, [r7, #31]
    ebae:	4613      	mov	r3, r2
    ebb0:	005b      	lsls	r3, r3, #1
    ebb2:	4413      	add	r3, r2
    ebb4:	009b      	lsls	r3, r3, #2
    ebb6:	4a39      	ldr	r2, [pc, #228]	; (ec9c <_usb_d_dev_ep_init+0x130>)
    ebb8:	4413      	add	r3, r2
    ebba:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ebbc:	7ffb      	ldrb	r3, [r7, #31]
    ebbe:	2b04      	cmp	r3, #4
    ebc0:	d902      	bls.n	ebc8 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ebc2:	f06f 0311 	mvn.w	r3, #17
    ebc6:	e063      	b.n	ec90 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ebc8:	69bb      	ldr	r3, [r7, #24]
    ebca:	7c9b      	ldrb	r3, [r3, #18]
    ebcc:	2bff      	cmp	r3, #255	; 0xff
    ebce:	d002      	beq.n	ebd6 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ebd0:	f06f 0313 	mvn.w	r3, #19
    ebd4:	e05c      	b.n	ec90 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ebd6:	7dfb      	ldrb	r3, [r7, #23]
    ebd8:	2b00      	cmp	r3, #0
    ebda:	d11f      	bne.n	ec1c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ebdc:	7fbb      	ldrb	r3, [r7, #30]
    ebde:	2b00      	cmp	r3, #0
    ebe0:	bf14      	ite	ne
    ebe2:	2301      	movne	r3, #1
    ebe4:	2300      	moveq	r3, #0
    ebe6:	b2db      	uxtb	r3, r3
    ebe8:	f083 0301 	eor.w	r3, r3, #1
    ebec:	b2db      	uxtb	r3, r3
    ebee:	f003 0301 	and.w	r3, r3, #1
    ebf2:	b2da      	uxtb	r2, r3
    ebf4:	7ffb      	ldrb	r3, [r7, #31]
    ebf6:	4611      	mov	r1, r2
    ebf8:	4618      	mov	r0, r3
    ebfa:	4b27      	ldr	r3, [pc, #156]	; (ec98 <_usb_d_dev_ep_init+0x12c>)
    ebfc:	4798      	blx	r3
    ebfe:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ec00:	68fb      	ldr	r3, [r7, #12]
    ec02:	7c9b      	ldrb	r3, [r3, #18]
    ec04:	2bff      	cmp	r3, #255	; 0xff
    ec06:	d002      	beq.n	ec0e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ec08:	f06f 0313 	mvn.w	r3, #19
    ec0c:	e040      	b.n	ec90 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ec0e:	693b      	ldr	r3, [r7, #16]
    ec10:	681b      	ldr	r3, [r3, #0]
    ec12:	2b00      	cmp	r3, #0
    ec14:	d102      	bne.n	ec1c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ec16:	f06f 0312 	mvn.w	r3, #18
    ec1a:	e039      	b.n	ec90 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ec1c:	7fbb      	ldrb	r3, [r7, #30]
    ec1e:	2b00      	cmp	r3, #0
    ec20:	d007      	beq.n	ec32 <_usb_d_dev_ep_init+0xc6>
    ec22:	693b      	ldr	r3, [r7, #16]
    ec24:	685b      	ldr	r3, [r3, #4]
    ec26:	2b00      	cmp	r3, #0
    ec28:	bf14      	ite	ne
    ec2a:	2301      	movne	r3, #1
    ec2c:	2300      	moveq	r3, #0
    ec2e:	b2db      	uxtb	r3, r3
    ec30:	e006      	b.n	ec40 <_usb_d_dev_ep_init+0xd4>
    ec32:	693b      	ldr	r3, [r7, #16]
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	2b00      	cmp	r3, #0
    ec38:	bf14      	ite	ne
    ec3a:	2301      	movne	r3, #1
    ec3c:	2300      	moveq	r3, #0
    ec3e:	b2db      	uxtb	r3, r3
    ec40:	2b00      	cmp	r3, #0
    ec42:	d00f      	beq.n	ec64 <_usb_d_dev_ep_init+0xf8>
    ec44:	7fbb      	ldrb	r3, [r7, #30]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d003      	beq.n	ec52 <_usb_d_dev_ep_init+0xe6>
    ec4a:	693b      	ldr	r3, [r7, #16]
    ec4c:	895b      	ldrh	r3, [r3, #10]
    ec4e:	461a      	mov	r2, r3
    ec50:	e002      	b.n	ec58 <_usb_d_dev_ep_init+0xec>
    ec52:	693b      	ldr	r3, [r7, #16]
    ec54:	891b      	ldrh	r3, [r3, #8]
    ec56:	461a      	mov	r2, r3
    ec58:	88bb      	ldrh	r3, [r7, #4]
    ec5a:	429a      	cmp	r2, r3
    ec5c:	da02      	bge.n	ec64 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ec5e:	f06f 0312 	mvn.w	r3, #18
    ec62:	e015      	b.n	ec90 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ec64:	7fbb      	ldrb	r3, [r7, #30]
    ec66:	2b00      	cmp	r3, #0
    ec68:	d002      	beq.n	ec70 <_usb_d_dev_ep_init+0x104>
    ec6a:	693b      	ldr	r3, [r7, #16]
    ec6c:	685b      	ldr	r3, [r3, #4]
    ec6e:	e001      	b.n	ec74 <_usb_d_dev_ep_init+0x108>
    ec70:	693b      	ldr	r3, [r7, #16]
    ec72:	681b      	ldr	r3, [r3, #0]
    ec74:	69ba      	ldr	r2, [r7, #24]
    ec76:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ec78:	69bb      	ldr	r3, [r7, #24]
    ec7a:	88ba      	ldrh	r2, [r7, #4]
    ec7c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ec7e:	7dfb      	ldrb	r3, [r7, #23]
    ec80:	3301      	adds	r3, #1
    ec82:	b2da      	uxtb	r2, r3
    ec84:	69bb      	ldr	r3, [r7, #24]
    ec86:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ec88:	69bb      	ldr	r3, [r7, #24]
    ec8a:	79fa      	ldrb	r2, [r7, #7]
    ec8c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ec8e:	2300      	movs	r3, #0
}
    ec90:	4618      	mov	r0, r3
    ec92:	3720      	adds	r7, #32
    ec94:	46bd      	mov	sp, r7
    ec96:	bd80      	pop	{r7, pc}
    ec98:	0000db9d 	.word	0x0000db9d
    ec9c:	0001cea0 	.word	0x0001cea0

0000eca0 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    eca0:	b580      	push	{r7, lr}
    eca2:	b086      	sub	sp, #24
    eca4:	af00      	add	r7, sp, #0
    eca6:	4603      	mov	r3, r0
    eca8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ecaa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ecae:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ecb0:	79fb      	ldrb	r3, [r7, #7]
    ecb2:	f003 030f 	and.w	r3, r3, #15
    ecb6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ecb8:	79fb      	ldrb	r3, [r7, #7]
    ecba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	bf14      	ite	ne
    ecc2:	2301      	movne	r3, #1
    ecc4:	2300      	moveq	r3, #0
    ecc6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ecc8:	7cba      	ldrb	r2, [r7, #18]
    ecca:	7cfb      	ldrb	r3, [r7, #19]
    eccc:	4611      	mov	r1, r2
    ecce:	4618      	mov	r0, r3
    ecd0:	4b2a      	ldr	r3, [pc, #168]	; (ed7c <_usb_d_dev_ep_deinit+0xdc>)
    ecd2:	4798      	blx	r3
    ecd4:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ecd6:	7cfb      	ldrb	r3, [r7, #19]
    ecd8:	2b04      	cmp	r3, #4
    ecda:	d84a      	bhi.n	ed72 <_usb_d_dev_ep_deinit+0xd2>
    ecdc:	68fb      	ldr	r3, [r7, #12]
    ecde:	7c9b      	ldrb	r3, [r3, #18]
    ece0:	2bff      	cmp	r3, #255	; 0xff
    ece2:	d046      	beq.n	ed72 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ece4:	7cbb      	ldrb	r3, [r7, #18]
    ece6:	2203      	movs	r2, #3
    ece8:	4619      	mov	r1, r3
    ecea:	68f8      	ldr	r0, [r7, #12]
    ecec:	4b24      	ldr	r3, [pc, #144]	; (ed80 <_usb_d_dev_ep_deinit+0xe0>)
    ecee:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ecf0:	68fb      	ldr	r3, [r7, #12]
    ecf2:	7cdb      	ldrb	r3, [r3, #19]
    ecf4:	f003 0307 	and.w	r3, r3, #7
    ecf8:	b2db      	uxtb	r3, r3
    ecfa:	2b01      	cmp	r3, #1
    ecfc:	d107      	bne.n	ed0e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ecfe:	79fb      	ldrb	r3, [r7, #7]
    ed00:	697a      	ldr	r2, [r7, #20]
    ed02:	3308      	adds	r3, #8
    ed04:	015b      	lsls	r3, r3, #5
    ed06:	4413      	add	r3, r2
    ed08:	2200      	movs	r2, #0
    ed0a:	701a      	strb	r2, [r3, #0]
    ed0c:	e02a      	b.n	ed64 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ed0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ed12:	2b00      	cmp	r3, #0
    ed14:	da15      	bge.n	ed42 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ed16:	79fb      	ldrb	r3, [r7, #7]
    ed18:	f003 030f 	and.w	r3, r3, #15
    ed1c:	79fa      	ldrb	r2, [r7, #7]
    ed1e:	f002 020f 	and.w	r2, r2, #15
    ed22:	6979      	ldr	r1, [r7, #20]
    ed24:	3208      	adds	r2, #8
    ed26:	0152      	lsls	r2, r2, #5
    ed28:	440a      	add	r2, r1
    ed2a:	7812      	ldrb	r2, [r2, #0]
    ed2c:	b2d2      	uxtb	r2, r2
    ed2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ed32:	b2d1      	uxtb	r1, r2
    ed34:	697a      	ldr	r2, [r7, #20]
    ed36:	3308      	adds	r3, #8
    ed38:	015b      	lsls	r3, r3, #5
    ed3a:	4413      	add	r3, r2
    ed3c:	460a      	mov	r2, r1
    ed3e:	701a      	strb	r2, [r3, #0]
    ed40:	e010      	b.n	ed64 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ed42:	79fb      	ldrb	r3, [r7, #7]
    ed44:	79fa      	ldrb	r2, [r7, #7]
    ed46:	6979      	ldr	r1, [r7, #20]
    ed48:	3208      	adds	r2, #8
    ed4a:	0152      	lsls	r2, r2, #5
    ed4c:	440a      	add	r2, r1
    ed4e:	7812      	ldrb	r2, [r2, #0]
    ed50:	b2d2      	uxtb	r2, r2
    ed52:	f022 0207 	bic.w	r2, r2, #7
    ed56:	b2d1      	uxtb	r1, r2
    ed58:	697a      	ldr	r2, [r7, #20]
    ed5a:	3308      	adds	r3, #8
    ed5c:	015b      	lsls	r3, r3, #5
    ed5e:	4413      	add	r3, r2
    ed60:	460a      	mov	r2, r1
    ed62:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ed64:	68fb      	ldr	r3, [r7, #12]
    ed66:	2200      	movs	r2, #0
    ed68:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    ed6a:	68fb      	ldr	r3, [r7, #12]
    ed6c:	22ff      	movs	r2, #255	; 0xff
    ed6e:	749a      	strb	r2, [r3, #18]
    ed70:	e000      	b.n	ed74 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ed72:	bf00      	nop
}
    ed74:	3718      	adds	r7, #24
    ed76:	46bd      	mov	sp, r7
    ed78:	bd80      	pop	{r7, pc}
    ed7a:	bf00      	nop
    ed7c:	0000db9d 	.word	0x0000db9d
    ed80:	0000f1d5 	.word	0x0000f1d5

0000ed84 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ed84:	b5b0      	push	{r4, r5, r7, lr}
    ed86:	b088      	sub	sp, #32
    ed88:	af00      	add	r7, sp, #0
    ed8a:	4603      	mov	r3, r0
    ed8c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ed8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ed92:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ed94:	79fb      	ldrb	r3, [r7, #7]
    ed96:	f003 030f 	and.w	r3, r3, #15
    ed9a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ed9c:	79fb      	ldrb	r3, [r7, #7]
    ed9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eda2:	2b00      	cmp	r3, #0
    eda4:	bf14      	ite	ne
    eda6:	2301      	movne	r3, #1
    eda8:	2300      	moveq	r3, #0
    edaa:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    edac:	7eba      	ldrb	r2, [r7, #26]
    edae:	7efb      	ldrb	r3, [r7, #27]
    edb0:	4611      	mov	r1, r2
    edb2:	4618      	mov	r0, r3
    edb4:	4b70      	ldr	r3, [pc, #448]	; (ef78 <_usb_d_dev_ep_enable+0x1f4>)
    edb6:	4798      	blx	r3
    edb8:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    edba:	7efb      	ldrb	r3, [r7, #27]
    edbc:	4619      	mov	r1, r3
    edbe:	69f8      	ldr	r0, [r7, #28]
    edc0:	4b6e      	ldr	r3, [pc, #440]	; (ef7c <_usb_d_dev_ep_enable+0x1f8>)
    edc2:	4798      	blx	r3
    edc4:	4603      	mov	r3, r0
    edc6:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    edc8:	7efb      	ldrb	r3, [r7, #27]
    edca:	2b04      	cmp	r3, #4
    edcc:	d803      	bhi.n	edd6 <_usb_d_dev_ep_enable+0x52>
    edce:	697b      	ldr	r3, [r7, #20]
    edd0:	7c9b      	ldrb	r3, [r3, #18]
    edd2:	2bff      	cmp	r3, #255	; 0xff
    edd4:	d102      	bne.n	eddc <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    edd6:	f06f 0311 	mvn.w	r3, #17
    edda:	e0c8      	b.n	ef6e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    eddc:	7efb      	ldrb	r3, [r7, #27]
    edde:	015b      	lsls	r3, r3, #5
    ede0:	4a67      	ldr	r2, [pc, #412]	; (ef80 <_usb_d_dev_ep_enable+0x1fc>)
    ede2:	4413      	add	r3, r2
    ede4:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ede6:	697b      	ldr	r3, [r7, #20]
    ede8:	7cdb      	ldrb	r3, [r3, #19]
    edea:	f003 0307 	and.w	r3, r3, #7
    edee:	b2db      	uxtb	r3, r3
    edf0:	2b01      	cmp	r3, #1
    edf2:	d14b      	bne.n	ee8c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    edf4:	7cfb      	ldrb	r3, [r7, #19]
    edf6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    edfa:	2b00      	cmp	r3, #0
    edfc:	d002      	beq.n	ee04 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    edfe:	f06f 0313 	mvn.w	r3, #19
    ee02:	e0b4      	b.n	ef6e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ee04:	7efb      	ldrb	r3, [r7, #27]
    ee06:	2211      	movs	r2, #17
    ee08:	4619      	mov	r1, r3
    ee0a:	69f8      	ldr	r0, [r7, #28]
    ee0c:	4b5d      	ldr	r3, [pc, #372]	; (ef84 <_usb_d_dev_ep_enable+0x200>)
    ee0e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ee10:	697b      	ldr	r3, [r7, #20]
    ee12:	8a1b      	ldrh	r3, [r3, #16]
    ee14:	039b      	lsls	r3, r3, #14
    ee16:	4c5c      	ldr	r4, [pc, #368]	; (ef88 <_usb_d_dev_ep_enable+0x204>)
    ee18:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ee1a:	697b      	ldr	r3, [r7, #20]
    ee1c:	8a1b      	ldrh	r3, [r3, #16]
    ee1e:	4618      	mov	r0, r3
    ee20:	4b5a      	ldr	r3, [pc, #360]	; (ef8c <_usb_d_dev_ep_enable+0x208>)
    ee22:	4798      	blx	r3
    ee24:	4603      	mov	r3, r0
    ee26:	071b      	lsls	r3, r3, #28
    ee28:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ee2c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ee30:	68fb      	ldr	r3, [r7, #12]
    ee32:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ee34:	68fb      	ldr	r3, [r7, #12]
    ee36:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ee3a:	697b      	ldr	r3, [r7, #20]
    ee3c:	8a1b      	ldrh	r3, [r3, #16]
    ee3e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ee42:	697b      	ldr	r3, [r7, #20]
    ee44:	8a1b      	ldrh	r3, [r3, #16]
    ee46:	4618      	mov	r0, r3
    ee48:	4b50      	ldr	r3, [pc, #320]	; (ef8c <_usb_d_dev_ep_enable+0x208>)
    ee4a:	4798      	blx	r3
    ee4c:	4603      	mov	r3, r0
    ee4e:	071b      	lsls	r3, r3, #28
    ee50:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ee54:	432b      	orrs	r3, r5
    ee56:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ee58:	7efb      	ldrb	r3, [r7, #27]
    ee5a:	2200      	movs	r2, #0
    ee5c:	2100      	movs	r1, #0
    ee5e:	4618      	mov	r0, r3
    ee60:	4b4b      	ldr	r3, [pc, #300]	; (ef90 <_usb_d_dev_ep_enable+0x20c>)
    ee62:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ee64:	7efb      	ldrb	r3, [r7, #27]
    ee66:	2200      	movs	r2, #0
    ee68:	2101      	movs	r1, #1
    ee6a:	4618      	mov	r0, r3
    ee6c:	4b49      	ldr	r3, [pc, #292]	; (ef94 <_usb_d_dev_ep_enable+0x210>)
    ee6e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ee70:	7efb      	ldrb	r3, [r7, #27]
    ee72:	2100      	movs	r1, #0
    ee74:	4618      	mov	r0, r3
    ee76:	4b48      	ldr	r3, [pc, #288]	; (ef98 <_usb_d_dev_ep_enable+0x214>)
    ee78:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ee7a:	7efb      	ldrb	r3, [r7, #27]
    ee7c:	2101      	movs	r1, #1
    ee7e:	4618      	mov	r0, r3
    ee80:	4b45      	ldr	r3, [pc, #276]	; (ef98 <_usb_d_dev_ep_enable+0x214>)
    ee82:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ee84:	6978      	ldr	r0, [r7, #20]
    ee86:	4b45      	ldr	r3, [pc, #276]	; (ef9c <_usb_d_dev_ep_enable+0x218>)
    ee88:	4798      	blx	r3
    ee8a:	e06f      	b.n	ef6c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ee8c:	7ebb      	ldrb	r3, [r7, #26]
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d038      	beq.n	ef04 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ee92:	7cfb      	ldrb	r3, [r7, #19]
    ee94:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ee98:	2b00      	cmp	r3, #0
    ee9a:	d002      	beq.n	eea2 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ee9c:	f06f 0313 	mvn.w	r3, #19
    eea0:	e065      	b.n	ef6e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    eea2:	697b      	ldr	r3, [r7, #20]
    eea4:	7cdb      	ldrb	r3, [r3, #19]
    eea6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eeaa:	b2db      	uxtb	r3, r3
    eeac:	011b      	lsls	r3, r3, #4
    eeae:	b2db      	uxtb	r3, r3
    eeb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    eeb4:	b2da      	uxtb	r2, r3
    eeb6:	7cfb      	ldrb	r3, [r7, #19]
    eeb8:	4313      	orrs	r3, r2
    eeba:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    eebc:	7cfa      	ldrb	r2, [r7, #19]
    eebe:	7efb      	ldrb	r3, [r7, #27]
    eec0:	4619      	mov	r1, r3
    eec2:	69f8      	ldr	r0, [r7, #28]
    eec4:	4b2f      	ldr	r3, [pc, #188]	; (ef84 <_usb_d_dev_ep_enable+0x200>)
    eec6:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    eec8:	68fb      	ldr	r3, [r7, #12]
    eeca:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    eece:	697b      	ldr	r3, [r7, #20]
    eed0:	8a1b      	ldrh	r3, [r3, #16]
    eed2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    eed6:	697b      	ldr	r3, [r7, #20]
    eed8:	8a1b      	ldrh	r3, [r3, #16]
    eeda:	4618      	mov	r0, r3
    eedc:	4b2b      	ldr	r3, [pc, #172]	; (ef8c <_usb_d_dev_ep_enable+0x208>)
    eede:	4798      	blx	r3
    eee0:	4603      	mov	r3, r0
    eee2:	071b      	lsls	r3, r3, #28
    eee4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    eee8:	432b      	orrs	r3, r5
    eeea:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    eeec:	7efb      	ldrb	r3, [r7, #27]
    eeee:	2200      	movs	r2, #0
    eef0:	2101      	movs	r1, #1
    eef2:	4618      	mov	r0, r3
    eef4:	4b27      	ldr	r3, [pc, #156]	; (ef94 <_usb_d_dev_ep_enable+0x210>)
    eef6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    eef8:	7efb      	ldrb	r3, [r7, #27]
    eefa:	2101      	movs	r1, #1
    eefc:	4618      	mov	r0, r3
    eefe:	4b26      	ldr	r3, [pc, #152]	; (ef98 <_usb_d_dev_ep_enable+0x214>)
    ef00:	4798      	blx	r3
    ef02:	e033      	b.n	ef6c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    ef04:	7cfb      	ldrb	r3, [r7, #19]
    ef06:	f003 0307 	and.w	r3, r3, #7
    ef0a:	2b00      	cmp	r3, #0
    ef0c:	d002      	beq.n	ef14 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ef0e:	f06f 0313 	mvn.w	r3, #19
    ef12:	e02c      	b.n	ef6e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    ef14:	697b      	ldr	r3, [r7, #20]
    ef16:	7cdb      	ldrb	r3, [r3, #19]
    ef18:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ef1c:	b2db      	uxtb	r3, r3
    ef1e:	461a      	mov	r2, r3
    ef20:	7cfb      	ldrb	r3, [r7, #19]
    ef22:	4313      	orrs	r3, r2
    ef24:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ef26:	7cfa      	ldrb	r2, [r7, #19]
    ef28:	7efb      	ldrb	r3, [r7, #27]
    ef2a:	4619      	mov	r1, r3
    ef2c:	69f8      	ldr	r0, [r7, #28]
    ef2e:	4b15      	ldr	r3, [pc, #84]	; (ef84 <_usb_d_dev_ep_enable+0x200>)
    ef30:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ef32:	697b      	ldr	r3, [r7, #20]
    ef34:	8a1b      	ldrh	r3, [r3, #16]
    ef36:	039b      	lsls	r3, r3, #14
    ef38:	4c13      	ldr	r4, [pc, #76]	; (ef88 <_usb_d_dev_ep_enable+0x204>)
    ef3a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ef3c:	697b      	ldr	r3, [r7, #20]
    ef3e:	8a1b      	ldrh	r3, [r3, #16]
    ef40:	4618      	mov	r0, r3
    ef42:	4b12      	ldr	r3, [pc, #72]	; (ef8c <_usb_d_dev_ep_enable+0x208>)
    ef44:	4798      	blx	r3
    ef46:	4603      	mov	r3, r0
    ef48:	071b      	lsls	r3, r3, #28
    ef4a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ef4e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ef52:	68fb      	ldr	r3, [r7, #12]
    ef54:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ef56:	7efb      	ldrb	r3, [r7, #27]
    ef58:	2200      	movs	r2, #0
    ef5a:	2100      	movs	r1, #0
    ef5c:	4618      	mov	r0, r3
    ef5e:	4b0c      	ldr	r3, [pc, #48]	; (ef90 <_usb_d_dev_ep_enable+0x20c>)
    ef60:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ef62:	7efb      	ldrb	r3, [r7, #27]
    ef64:	2100      	movs	r1, #0
    ef66:	4618      	mov	r0, r3
    ef68:	4b0b      	ldr	r3, [pc, #44]	; (ef98 <_usb_d_dev_ep_enable+0x214>)
    ef6a:	4798      	blx	r3
	}

	return USB_OK;
    ef6c:	2300      	movs	r3, #0
}
    ef6e:	4618      	mov	r0, r3
    ef70:	3720      	adds	r7, #32
    ef72:	46bd      	mov	sp, r7
    ef74:	bdb0      	pop	{r4, r5, r7, pc}
    ef76:	bf00      	nop
    ef78:	0000db9d 	.word	0x0000db9d
    ef7c:	0000d223 	.word	0x0000d223
    ef80:	20001c50 	.word	0x20001c50
    ef84:	0000d1f9 	.word	0x0000d1f9
    ef88:	0fffc000 	.word	0x0fffc000
    ef8c:	0000db39 	.word	0x0000db39
    ef90:	0000dae1 	.word	0x0000dae1
    ef94:	0000da89 	.word	0x0000da89
    ef98:	0000da51 	.word	0x0000da51
    ef9c:	0000eaf5 	.word	0x0000eaf5

0000efa0 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    efa0:	b580      	push	{r7, lr}
    efa2:	b084      	sub	sp, #16
    efa4:	af00      	add	r7, sp, #0
    efa6:	6078      	str	r0, [r7, #4]
    efa8:	460b      	mov	r3, r1
    efaa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    efac:	687b      	ldr	r3, [r7, #4]
    efae:	7c9b      	ldrb	r3, [r3, #18]
    efb0:	f003 030f 	and.w	r3, r3, #15
    efb4:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    efb6:	78fa      	ldrb	r2, [r7, #3]
    efb8:	7bfb      	ldrb	r3, [r7, #15]
    efba:	4611      	mov	r1, r2
    efbc:	4618      	mov	r0, r3
    efbe:	4b03      	ldr	r3, [pc, #12]	; (efcc <_usb_d_dev_ep_stall_get+0x2c>)
    efc0:	4798      	blx	r3
    efc2:	4603      	mov	r3, r0
}
    efc4:	4618      	mov	r0, r3
    efc6:	3710      	adds	r7, #16
    efc8:	46bd      	mov	sp, r7
    efca:	bd80      	pop	{r7, pc}
    efcc:	0000d691 	.word	0x0000d691

0000efd0 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    efd0:	b580      	push	{r7, lr}
    efd2:	b084      	sub	sp, #16
    efd4:	af00      	add	r7, sp, #0
    efd6:	6078      	str	r0, [r7, #4]
    efd8:	460b      	mov	r3, r1
    efda:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    efdc:	687b      	ldr	r3, [r7, #4]
    efde:	7c9b      	ldrb	r3, [r3, #18]
    efe0:	f003 030f 	and.w	r3, r3, #15
    efe4:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    efe6:	78f9      	ldrb	r1, [r7, #3]
    efe8:	7bfb      	ldrb	r3, [r7, #15]
    efea:	2201      	movs	r2, #1
    efec:	4618      	mov	r0, r3
    efee:	4b0a      	ldr	r3, [pc, #40]	; (f018 <_usb_d_dev_ep_stall_set+0x48>)
    eff0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    eff2:	78fb      	ldrb	r3, [r7, #3]
    eff4:	2220      	movs	r2, #32
    eff6:	409a      	lsls	r2, r3
    eff8:	7bfb      	ldrb	r3, [r7, #15]
    effa:	4611      	mov	r1, r2
    effc:	4618      	mov	r0, r3
    effe:	4b07      	ldr	r3, [pc, #28]	; (f01c <_usb_d_dev_ep_stall_set+0x4c>)
    f000:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    f002:	687a      	ldr	r2, [r7, #4]
    f004:	7cd3      	ldrb	r3, [r2, #19]
    f006:	f043 0308 	orr.w	r3, r3, #8
    f00a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    f00c:	2300      	movs	r3, #0
}
    f00e:	4618      	mov	r0, r3
    f010:	3710      	adds	r7, #16
    f012:	46bd      	mov	sp, r7
    f014:	bd80      	pop	{r7, pc}
    f016:	bf00      	nop
    f018:	0000d639 	.word	0x0000d639
    f01c:	0000d5b9 	.word	0x0000d5b9

0000f020 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    f020:	b580      	push	{r7, lr}
    f022:	b084      	sub	sp, #16
    f024:	af00      	add	r7, sp, #0
    f026:	6078      	str	r0, [r7, #4]
    f028:	460b      	mov	r3, r1
    f02a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    f02c:	687b      	ldr	r3, [r7, #4]
    f02e:	7c9b      	ldrb	r3, [r3, #18]
    f030:	f003 030f 	and.w	r3, r3, #15
    f034:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    f036:	78fa      	ldrb	r2, [r7, #3]
    f038:	7bfb      	ldrb	r3, [r7, #15]
    f03a:	4611      	mov	r1, r2
    f03c:	4618      	mov	r0, r3
    f03e:	4b28      	ldr	r3, [pc, #160]	; (f0e0 <_usb_d_dev_ep_stall_clr+0xc0>)
    f040:	4798      	blx	r3
    f042:	4603      	mov	r3, r0
    f044:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    f046:	7bbb      	ldrb	r3, [r7, #14]
    f048:	f083 0301 	eor.w	r3, r3, #1
    f04c:	b2db      	uxtb	r3, r3
    f04e:	2b00      	cmp	r3, #0
    f050:	d001      	beq.n	f056 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    f052:	2300      	movs	r3, #0
    f054:	e040      	b.n	f0d8 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    f056:	78f9      	ldrb	r1, [r7, #3]
    f058:	7bfb      	ldrb	r3, [r7, #15]
    f05a:	2200      	movs	r2, #0
    f05c:	4618      	mov	r0, r3
    f05e:	4b21      	ldr	r3, [pc, #132]	; (f0e4 <_usb_d_dev_ep_stall_clr+0xc4>)
    f060:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    f062:	78fb      	ldrb	r3, [r7, #3]
    f064:	2220      	movs	r2, #32
    f066:	409a      	lsls	r2, r3
    f068:	7bfb      	ldrb	r3, [r7, #15]
    f06a:	4611      	mov	r1, r2
    f06c:	4618      	mov	r0, r3
    f06e:	4b1e      	ldr	r3, [pc, #120]	; (f0e8 <_usb_d_dev_ep_stall_clr+0xc8>)
    f070:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    f072:	78fa      	ldrb	r2, [r7, #3]
    f074:	7bfb      	ldrb	r3, [r7, #15]
    f076:	4611      	mov	r1, r2
    f078:	4618      	mov	r0, r3
    f07a:	4b1c      	ldr	r3, [pc, #112]	; (f0ec <_usb_d_dev_ep_stall_clr+0xcc>)
    f07c:	4798      	blx	r3
    f07e:	4603      	mov	r3, r0
    f080:	2b00      	cmp	r3, #0
    f082:	d00b      	beq.n	f09c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    f084:	78fa      	ldrb	r2, [r7, #3]
    f086:	7bfb      	ldrb	r3, [r7, #15]
    f088:	4611      	mov	r1, r2
    f08a:	4618      	mov	r0, r3
    f08c:	4b18      	ldr	r3, [pc, #96]	; (f0f0 <_usb_d_dev_ep_stall_clr+0xd0>)
    f08e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    f090:	78f9      	ldrb	r1, [r7, #3]
    f092:	7bfb      	ldrb	r3, [r7, #15]
    f094:	2200      	movs	r2, #0
    f096:	4618      	mov	r0, r3
    f098:	4b16      	ldr	r3, [pc, #88]	; (f0f4 <_usb_d_dev_ep_stall_clr+0xd4>)
    f09a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	7cdb      	ldrb	r3, [r3, #19]
    f0a0:	f003 0307 	and.w	r3, r3, #7
    f0a4:	b2db      	uxtb	r3, r3
    f0a6:	2b01      	cmp	r3, #1
    f0a8:	d110      	bne.n	f0cc <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    f0aa:	7bfb      	ldrb	r3, [r7, #15]
    f0ac:	4619      	mov	r1, r3
    f0ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f0b2:	4b11      	ldr	r3, [pc, #68]	; (f0f8 <_usb_d_dev_ep_stall_clr+0xd8>)
    f0b4:	4798      	blx	r3
    f0b6:	4603      	mov	r3, r0
    f0b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d10a      	bne.n	f0d6 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    f0c0:	687a      	ldr	r2, [r7, #4]
    f0c2:	7cd3      	ldrb	r3, [r2, #19]
    f0c4:	f36f 03c3 	bfc	r3, #3, #1
    f0c8:	74d3      	strb	r3, [r2, #19]
    f0ca:	e004      	b.n	f0d6 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    f0cc:	687a      	ldr	r2, [r7, #4]
    f0ce:	7cd3      	ldrb	r3, [r2, #19]
    f0d0:	f36f 03c3 	bfc	r3, #3, #1
    f0d4:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    f0d6:	2300      	movs	r3, #0
}
    f0d8:	4618      	mov	r0, r3
    f0da:	3710      	adds	r7, #16
    f0dc:	46bd      	mov	sp, r7
    f0de:	bd80      	pop	{r7, pc}
    f0e0:	0000d691 	.word	0x0000d691
    f0e4:	0000d639 	.word	0x0000d639
    f0e8:	0000d5e1 	.word	0x0000d5e1
    f0ec:	0000d6d5 	.word	0x0000d6d5
    f0f0:	0000d719 	.word	0x0000d719
    f0f4:	0000d805 	.word	0x0000d805
    f0f8:	0000d0c1 	.word	0x0000d0c1

0000f0fc <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    f0fc:	b580      	push	{r7, lr}
    f0fe:	b086      	sub	sp, #24
    f100:	af00      	add	r7, sp, #0
    f102:	4603      	mov	r3, r0
    f104:	460a      	mov	r2, r1
    f106:	71fb      	strb	r3, [r7, #7]
    f108:	4613      	mov	r3, r2
    f10a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    f10c:	79fb      	ldrb	r3, [r7, #7]
    f10e:	f003 030f 	and.w	r3, r3, #15
    f112:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f114:	79fb      	ldrb	r3, [r7, #7]
    f116:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f11a:	2b00      	cmp	r3, #0
    f11c:	bf14      	ite	ne
    f11e:	2301      	movne	r3, #1
    f120:	2300      	moveq	r3, #0
    f122:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f124:	7cba      	ldrb	r2, [r7, #18]
    f126:	7cfb      	ldrb	r3, [r7, #19]
    f128:	4611      	mov	r1, r2
    f12a:	4618      	mov	r0, r3
    f12c:	4b13      	ldr	r3, [pc, #76]	; (f17c <_usb_d_dev_ep_stall+0x80>)
    f12e:	4798      	blx	r3
    f130:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    f132:	7cfb      	ldrb	r3, [r7, #19]
    f134:	2b04      	cmp	r3, #4
    f136:	d902      	bls.n	f13e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    f138:	f06f 0311 	mvn.w	r3, #17
    f13c:	e01a      	b.n	f174 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    f13e:	79bb      	ldrb	r3, [r7, #6]
    f140:	2b01      	cmp	r3, #1
    f142:	d106      	bne.n	f152 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    f144:	7cbb      	ldrb	r3, [r7, #18]
    f146:	4619      	mov	r1, r3
    f148:	68f8      	ldr	r0, [r7, #12]
    f14a:	4b0d      	ldr	r3, [pc, #52]	; (f180 <_usb_d_dev_ep_stall+0x84>)
    f14c:	4798      	blx	r3
    f14e:	6178      	str	r0, [r7, #20]
    f150:	e00f      	b.n	f172 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    f152:	79bb      	ldrb	r3, [r7, #6]
    f154:	2b00      	cmp	r3, #0
    f156:	d106      	bne.n	f166 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    f158:	7cbb      	ldrb	r3, [r7, #18]
    f15a:	4619      	mov	r1, r3
    f15c:	68f8      	ldr	r0, [r7, #12]
    f15e:	4b09      	ldr	r3, [pc, #36]	; (f184 <_usb_d_dev_ep_stall+0x88>)
    f160:	4798      	blx	r3
    f162:	6178      	str	r0, [r7, #20]
    f164:	e005      	b.n	f172 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    f166:	7cbb      	ldrb	r3, [r7, #18]
    f168:	4619      	mov	r1, r3
    f16a:	68f8      	ldr	r0, [r7, #12]
    f16c:	4b06      	ldr	r3, [pc, #24]	; (f188 <_usb_d_dev_ep_stall+0x8c>)
    f16e:	4798      	blx	r3
    f170:	6178      	str	r0, [r7, #20]
	}
	return rc;
    f172:	697b      	ldr	r3, [r7, #20]
}
    f174:	4618      	mov	r0, r3
    f176:	3718      	adds	r7, #24
    f178:	46bd      	mov	sp, r7
    f17a:	bd80      	pop	{r7, pc}
    f17c:	0000db9d 	.word	0x0000db9d
    f180:	0000efd1 	.word	0x0000efd1
    f184:	0000f021 	.word	0x0000f021
    f188:	0000efa1 	.word	0x0000efa1

0000f18c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    f18c:	b580      	push	{r7, lr}
    f18e:	b082      	sub	sp, #8
    f190:	af00      	add	r7, sp, #0
    f192:	6078      	str	r0, [r7, #4]
    f194:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	7c9b      	ldrb	r3, [r3, #18]
    f19a:	2bff      	cmp	r3, #255	; 0xff
    f19c:	d014      	beq.n	f1c8 <_usb_d_dev_trans_done+0x3c>
    f19e:	687b      	ldr	r3, [r7, #4]
    f1a0:	7cdb      	ldrb	r3, [r3, #19]
    f1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f1a6:	b2db      	uxtb	r3, r3
    f1a8:	2b00      	cmp	r3, #0
    f1aa:	d00d      	beq.n	f1c8 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    f1ac:	687a      	ldr	r2, [r7, #4]
    f1ae:	7cd3      	ldrb	r3, [r2, #19]
    f1b0:	f36f 1386 	bfc	r3, #6, #1
    f1b4:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    f1b6:	4b06      	ldr	r3, [pc, #24]	; (f1d0 <_usb_d_dev_trans_done+0x44>)
    f1b8:	691b      	ldr	r3, [r3, #16]
    f1ba:	687a      	ldr	r2, [r7, #4]
    f1bc:	7c90      	ldrb	r0, [r2, #18]
    f1be:	687a      	ldr	r2, [r7, #4]
    f1c0:	6892      	ldr	r2, [r2, #8]
    f1c2:	6839      	ldr	r1, [r7, #0]
    f1c4:	4798      	blx	r3
    f1c6:	e000      	b.n	f1ca <_usb_d_dev_trans_done+0x3e>
		return;
    f1c8:	bf00      	nop
}
    f1ca:	3708      	adds	r7, #8
    f1cc:	46bd      	mov	sp, r7
    f1ce:	bd80      	pop	{r7, pc}
    f1d0:	20001b88 	.word	0x20001b88

0000f1d4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    f1d4:	b580      	push	{r7, lr}
    f1d6:	b086      	sub	sp, #24
    f1d8:	af00      	add	r7, sp, #0
    f1da:	60f8      	str	r0, [r7, #12]
    f1dc:	460b      	mov	r3, r1
    f1de:	607a      	str	r2, [r7, #4]
    f1e0:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f1e2:	68fb      	ldr	r3, [r7, #12]
    f1e4:	7c9b      	ldrb	r3, [r3, #18]
    f1e6:	f003 030f 	and.w	r3, r3, #15
    f1ea:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    f1ec:	4b1f      	ldr	r3, [pc, #124]	; (f26c <_usb_d_dev_trans_stop+0x98>)
    f1ee:	881b      	ldrh	r3, [r3, #0]
    f1f0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f1f2:	68fb      	ldr	r3, [r7, #12]
    f1f4:	7c9b      	ldrb	r3, [r3, #18]
    f1f6:	2bff      	cmp	r3, #255	; 0xff
    f1f8:	d033      	beq.n	f262 <_usb_d_dev_trans_stop+0x8e>
    f1fa:	68fb      	ldr	r3, [r7, #12]
    f1fc:	7cdb      	ldrb	r3, [r3, #19]
    f1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f202:	b2db      	uxtb	r3, r3
    f204:	2b00      	cmp	r3, #0
    f206:	d02c      	beq.n	f262 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    f208:	7afb      	ldrb	r3, [r7, #11]
    f20a:	2b00      	cmp	r3, #0
    f20c:	d006      	beq.n	f21c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f20e:	7dfb      	ldrb	r3, [r7, #23]
    f210:	2200      	movs	r2, #0
    f212:	2101      	movs	r1, #1
    f214:	4618      	mov	r0, r3
    f216:	4b16      	ldr	r3, [pc, #88]	; (f270 <_usb_d_dev_trans_stop+0x9c>)
    f218:	4798      	blx	r3
    f21a:	e005      	b.n	f228 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f21c:	7dfb      	ldrb	r3, [r7, #23]
    f21e:	2200      	movs	r2, #0
    f220:	2100      	movs	r1, #0
    f222:	4618      	mov	r0, r3
    f224:	4b13      	ldr	r3, [pc, #76]	; (f274 <_usb_d_dev_trans_stop+0xa0>)
    f226:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    f228:	7afb      	ldrb	r3, [r7, #11]
    f22a:	f107 0218 	add.w	r2, r7, #24
    f22e:	4413      	add	r3, r2
    f230:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f234:	461a      	mov	r2, r3
    f236:	7dfb      	ldrb	r3, [r7, #23]
    f238:	4611      	mov	r1, r2
    f23a:	4618      	mov	r0, r3
    f23c:	4b0e      	ldr	r3, [pc, #56]	; (f278 <_usb_d_dev_trans_stop+0xa4>)
    f23e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    f240:	7afb      	ldrb	r3, [r7, #11]
    f242:	f107 0218 	add.w	r2, r7, #24
    f246:	4413      	add	r3, r2
    f248:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f24c:	461a      	mov	r2, r3
    f24e:	7dfb      	ldrb	r3, [r7, #23]
    f250:	4611      	mov	r1, r2
    f252:	4618      	mov	r0, r3
    f254:	4b09      	ldr	r3, [pc, #36]	; (f27c <_usb_d_dev_trans_stop+0xa8>)
    f256:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    f258:	6879      	ldr	r1, [r7, #4]
    f25a:	68f8      	ldr	r0, [r7, #12]
    f25c:	4b08      	ldr	r3, [pc, #32]	; (f280 <_usb_d_dev_trans_stop+0xac>)
    f25e:	4798      	blx	r3
    f260:	e000      	b.n	f264 <_usb_d_dev_trans_stop+0x90>
		return;
    f262:	bf00      	nop
}
    f264:	3718      	adds	r7, #24
    f266:	46bd      	mov	sp, r7
    f268:	bd80      	pop	{r7, pc}
    f26a:	bf00      	nop
    f26c:	0001cee0 	.word	0x0001cee0
    f270:	0000da89 	.word	0x0000da89
    f274:	0000dae1 	.word	0x0000dae1
    f278:	0000d591 	.word	0x0000d591
    f27c:	0000d5e1 	.word	0x0000d5e1
    f280:	0000f18d 	.word	0x0000f18d

0000f284 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    f284:	b580      	push	{r7, lr}
    f286:	b086      	sub	sp, #24
    f288:	af00      	add	r7, sp, #0
    f28a:	4603      	mov	r3, r0
    f28c:	6039      	str	r1, [r7, #0]
    f28e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    f290:	79fb      	ldrb	r3, [r7, #7]
    f292:	f003 030f 	and.w	r3, r3, #15
    f296:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    f298:	7dfb      	ldrb	r3, [r7, #23]
    f29a:	015b      	lsls	r3, r3, #5
    f29c:	4a1e      	ldr	r2, [pc, #120]	; (f318 <_usb_d_dev_ep_read_req+0x94>)
    f29e:	4413      	add	r3, r2
    f2a0:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    f2a2:	693b      	ldr	r3, [r7, #16]
    f2a4:	681b      	ldr	r3, [r3, #0]
    f2a6:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    f2a8:	693b      	ldr	r3, [r7, #16]
    f2aa:	685b      	ldr	r3, [r3, #4]
    f2ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f2b0:	b29b      	uxth	r3, r3
    f2b2:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    f2b4:	7dfb      	ldrb	r3, [r7, #23]
    f2b6:	2b04      	cmp	r3, #4
    f2b8:	d802      	bhi.n	f2c0 <_usb_d_dev_ep_read_req+0x3c>
    f2ba:	683b      	ldr	r3, [r7, #0]
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d102      	bne.n	f2c6 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    f2c0:	f06f 0311 	mvn.w	r3, #17
    f2c4:	e023      	b.n	f30e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    f2c6:	7dfb      	ldrb	r3, [r7, #23]
    f2c8:	4618      	mov	r0, r3
    f2ca:	4b14      	ldr	r3, [pc, #80]	; (f31c <_usb_d_dev_ep_read_req+0x98>)
    f2cc:	4798      	blx	r3
    f2ce:	4603      	mov	r3, r0
    f2d0:	f083 0301 	eor.w	r3, r3, #1
    f2d4:	b2db      	uxtb	r3, r3
    f2d6:	2b00      	cmp	r3, #0
    f2d8:	d002      	beq.n	f2e0 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    f2da:	f06f 0312 	mvn.w	r3, #18
    f2de:	e016      	b.n	f30e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    f2e0:	7dfb      	ldrb	r3, [r7, #23]
    f2e2:	4618      	mov	r0, r3
    f2e4:	4b0e      	ldr	r3, [pc, #56]	; (f320 <_usb_d_dev_ep_read_req+0x9c>)
    f2e6:	4798      	blx	r3
    f2e8:	4603      	mov	r3, r0
    f2ea:	f083 0301 	eor.w	r3, r3, #1
    f2ee:	b2db      	uxtb	r3, r3
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d001      	beq.n	f2f8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    f2f4:	2300      	movs	r3, #0
    f2f6:	e00a      	b.n	f30e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    f2f8:	68fb      	ldr	r3, [r7, #12]
    f2fa:	2208      	movs	r2, #8
    f2fc:	4619      	mov	r1, r3
    f2fe:	6838      	ldr	r0, [r7, #0]
    f300:	4b08      	ldr	r3, [pc, #32]	; (f324 <_usb_d_dev_ep_read_req+0xa0>)
    f302:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    f304:	7dfb      	ldrb	r3, [r7, #23]
    f306:	4618      	mov	r0, r3
    f308:	4b07      	ldr	r3, [pc, #28]	; (f328 <_usb_d_dev_ep_read_req+0xa4>)
    f30a:	4798      	blx	r3

	return bytes;
    f30c:	897b      	ldrh	r3, [r7, #10]
}
    f30e:	4618      	mov	r0, r3
    f310:	3718      	adds	r7, #24
    f312:	46bd      	mov	sp, r7
    f314:	bd80      	pop	{r7, pc}
    f316:	bf00      	nop
    f318:	20001c50 	.word	0x20001c50
    f31c:	0000d609 	.word	0x0000d609
    f320:	0000d7b5 	.word	0x0000d7b5
    f324:	0001c521 	.word	0x0001c521
    f328:	0000d7e5 	.word	0x0000d7e5

0000f32c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	b086      	sub	sp, #24
    f330:	af00      	add	r7, sp, #0
    f332:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    f334:	687b      	ldr	r3, [r7, #4]
    f336:	7a1b      	ldrb	r3, [r3, #8]
    f338:	f003 030f 	and.w	r3, r3, #15
    f33c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	7a1b      	ldrb	r3, [r3, #8]
    f342:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f346:	2b00      	cmp	r3, #0
    f348:	bf14      	ite	ne
    f34a:	2301      	movne	r3, #1
    f34c:	2300      	moveq	r3, #0
    f34e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f350:	7d7a      	ldrb	r2, [r7, #21]
    f352:	7dbb      	ldrb	r3, [r7, #22]
    f354:	4611      	mov	r1, r2
    f356:	4618      	mov	r0, r3
    f358:	4b5f      	ldr	r3, [pc, #380]	; (f4d8 <_usb_d_dev_ep_trans+0x1ac>)
    f35a:	4798      	blx	r3
    f35c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    f35e:	693b      	ldr	r3, [r7, #16]
    f360:	8a1b      	ldrh	r3, [r3, #16]
    f362:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f366:	4293      	cmp	r3, r2
    f368:	d004      	beq.n	f374 <_usb_d_dev_ep_trans+0x48>
    f36a:	693b      	ldr	r3, [r7, #16]
    f36c:	8a1b      	ldrh	r3, [r3, #16]
    f36e:	3b01      	subs	r3, #1
    f370:	b29b      	uxth	r3, r3
    f372:	e001      	b.n	f378 <_usb_d_dev_ep_trans+0x4c>
    f374:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f378:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	685a      	ldr	r2, [r3, #4]
    f37e:	89fb      	ldrh	r3, [r7, #14]
    f380:	4013      	ands	r3, r2
    f382:	2b00      	cmp	r3, #0
    f384:	bf14      	ite	ne
    f386:	2301      	movne	r3, #1
    f388:	2300      	moveq	r3, #0
    f38a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    f38c:	2300      	movs	r3, #0
    f38e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    f390:	7dbb      	ldrb	r3, [r7, #22]
    f392:	2b04      	cmp	r3, #4
    f394:	d902      	bls.n	f39c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    f396:	f06f 0311 	mvn.w	r3, #17
    f39a:	e098      	b.n	f4ce <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    f39c:	687b      	ldr	r3, [r7, #4]
    f39e:	681b      	ldr	r3, [r3, #0]
    f3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f3a4:	d31a      	bcc.n	f3dc <_usb_d_dev_ep_trans+0xb0>
    f3a6:	687b      	ldr	r3, [r7, #4]
    f3a8:	681b      	ldr	r3, [r3, #0]
    f3aa:	461a      	mov	r2, r3
    f3ac:	687b      	ldr	r3, [r7, #4]
    f3ae:	685b      	ldr	r3, [r3, #4]
    f3b0:	4413      	add	r3, r2
    f3b2:	4a4a      	ldr	r2, [pc, #296]	; (f4dc <_usb_d_dev_ep_trans+0x1b0>)
    f3b4:	4293      	cmp	r3, r2
    f3b6:	d811      	bhi.n	f3dc <_usb_d_dev_ep_trans+0xb0>
    f3b8:	687b      	ldr	r3, [r7, #4]
    f3ba:	681b      	ldr	r3, [r3, #0]
    f3bc:	f003 0303 	and.w	r3, r3, #3
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d10b      	bne.n	f3dc <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    f3c4:	7d7b      	ldrb	r3, [r7, #21]
    f3c6:	f083 0301 	eor.w	r3, r3, #1
    f3ca:	b2db      	uxtb	r3, r3
    f3cc:	2b00      	cmp	r3, #0
    f3ce:	d00e      	beq.n	f3ee <_usb_d_dev_ep_trans+0xc2>
    f3d0:	687b      	ldr	r3, [r7, #4]
    f3d2:	685b      	ldr	r3, [r3, #4]
    f3d4:	693a      	ldr	r2, [r7, #16]
    f3d6:	8a12      	ldrh	r2, [r2, #16]
    f3d8:	4293      	cmp	r3, r2
    f3da:	d208      	bcs.n	f3ee <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    f3dc:	693b      	ldr	r3, [r7, #16]
    f3de:	68db      	ldr	r3, [r3, #12]
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	d102      	bne.n	f3ea <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    f3e4:	f06f 0312 	mvn.w	r3, #18
    f3e8:	e071      	b.n	f4ce <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    f3ea:	2301      	movs	r3, #1
    f3ec:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    f3ee:	7d7b      	ldrb	r3, [r7, #21]
    f3f0:	f083 0301 	eor.w	r3, r3, #1
    f3f4:	b2db      	uxtb	r3, r3
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	d009      	beq.n	f40e <_usb_d_dev_ep_trans+0xe2>
    f3fa:	7b7b      	ldrb	r3, [r7, #13]
    f3fc:	2b00      	cmp	r3, #0
    f3fe:	d006      	beq.n	f40e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    f400:	693b      	ldr	r3, [r7, #16]
    f402:	68db      	ldr	r3, [r3, #12]
    f404:	2b00      	cmp	r3, #0
    f406:	d102      	bne.n	f40e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    f408:	f06f 0311 	mvn.w	r3, #17
    f40c:	e05f      	b.n	f4ce <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    f40e:	693b      	ldr	r3, [r7, #16]
    f410:	7cdb      	ldrb	r3, [r3, #19]
    f412:	f003 0308 	and.w	r3, r3, #8
    f416:	b2db      	uxtb	r3, r3
    f418:	2b00      	cmp	r3, #0
    f41a:	d001      	beq.n	f420 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    f41c:	2302      	movs	r3, #2
    f41e:	e056      	b.n	f4ce <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    f420:	f107 0308 	add.w	r3, r7, #8
    f424:	4618      	mov	r0, r3
    f426:	4b2e      	ldr	r3, [pc, #184]	; (f4e0 <_usb_d_dev_ep_trans+0x1b4>)
    f428:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    f42a:	693b      	ldr	r3, [r7, #16]
    f42c:	7cdb      	ldrb	r3, [r3, #19]
    f42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f432:	b2db      	uxtb	r3, r3
    f434:	2b00      	cmp	r3, #0
    f436:	d006      	beq.n	f446 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    f438:	f107 0308 	add.w	r3, r7, #8
    f43c:	4618      	mov	r0, r3
    f43e:	4b29      	ldr	r3, [pc, #164]	; (f4e4 <_usb_d_dev_ep_trans+0x1b8>)
    f440:	4798      	blx	r3
		return USB_BUSY;
    f442:	2301      	movs	r3, #1
    f444:	e043      	b.n	f4ce <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    f446:	693a      	ldr	r2, [r7, #16]
    f448:	7cd3      	ldrb	r3, [r2, #19]
    f44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f44e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    f450:	f107 0308 	add.w	r3, r7, #8
    f454:	4618      	mov	r0, r3
    f456:	4b23      	ldr	r3, [pc, #140]	; (f4e4 <_usb_d_dev_ep_trans+0x1b8>)
    f458:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    f45a:	687b      	ldr	r3, [r7, #4]
    f45c:	681a      	ldr	r2, [r3, #0]
    f45e:	693b      	ldr	r3, [r7, #16]
    f460:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    f462:	687b      	ldr	r3, [r7, #4]
    f464:	685a      	ldr	r2, [r3, #4]
    f466:	693b      	ldr	r3, [r7, #16]
    f468:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    f46a:	693b      	ldr	r3, [r7, #16]
    f46c:	2200      	movs	r2, #0
    f46e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    f470:	693a      	ldr	r2, [r7, #16]
    f472:	7cd3      	ldrb	r3, [r2, #19]
    f474:	7d79      	ldrb	r1, [r7, #21]
    f476:	f361 13c7 	bfi	r3, r1, #7, #1
    f47a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    f47c:	693a      	ldr	r2, [r7, #16]
    f47e:	7cd3      	ldrb	r3, [r2, #19]
    f480:	7df9      	ldrb	r1, [r7, #23]
    f482:	f361 1345 	bfi	r3, r1, #5, #1
    f486:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    f488:	687b      	ldr	r3, [r7, #4]
    f48a:	7a5b      	ldrb	r3, [r3, #9]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d007      	beq.n	f4a0 <_usb_d_dev_ep_trans+0x174>
    f490:	7b7b      	ldrb	r3, [r7, #13]
    f492:	f083 0301 	eor.w	r3, r3, #1
    f496:	b2db      	uxtb	r3, r3
    f498:	2b00      	cmp	r3, #0
    f49a:	d001      	beq.n	f4a0 <_usb_d_dev_ep_trans+0x174>
    f49c:	2301      	movs	r3, #1
    f49e:	e000      	b.n	f4a2 <_usb_d_dev_ep_trans+0x176>
    f4a0:	2300      	movs	r3, #0
    f4a2:	b2db      	uxtb	r3, r3
    f4a4:	f003 0301 	and.w	r3, r3, #1
    f4a8:	b2d9      	uxtb	r1, r3
    f4aa:	693a      	ldr	r2, [r7, #16]
    f4ac:	7cd3      	ldrb	r3, [r2, #19]
    f4ae:	f361 1304 	bfi	r3, r1, #4, #1
    f4b2:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    f4b4:	7d7b      	ldrb	r3, [r7, #21]
    f4b6:	2b00      	cmp	r3, #0
    f4b8:	d004      	beq.n	f4c4 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    f4ba:	2100      	movs	r1, #0
    f4bc:	6938      	ldr	r0, [r7, #16]
    f4be:	4b0a      	ldr	r3, [pc, #40]	; (f4e8 <_usb_d_dev_ep_trans+0x1bc>)
    f4c0:	4798      	blx	r3
    f4c2:	e003      	b.n	f4cc <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    f4c4:	2100      	movs	r1, #0
    f4c6:	6938      	ldr	r0, [r7, #16]
    f4c8:	4b08      	ldr	r3, [pc, #32]	; (f4ec <_usb_d_dev_ep_trans+0x1c0>)
    f4ca:	4798      	blx	r3
	}

	return ERR_NONE;
    f4cc:	2300      	movs	r3, #0
}
    f4ce:	4618      	mov	r0, r3
    f4d0:	3718      	adds	r7, #24
    f4d2:	46bd      	mov	sp, r7
    f4d4:	bd80      	pop	{r7, pc}
    f4d6:	bf00      	nop
    f4d8:	0000db9d 	.word	0x0000db9d
    f4dc:	20041fff 	.word	0x20041fff
    f4e0:	0000ff79 	.word	0x0000ff79
    f4e4:	0000ff9f 	.word	0x0000ff9f
    f4e8:	0000de65 	.word	0x0000de65
    f4ec:	0000e07d 	.word	0x0000e07d

0000f4f0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    f4f0:	b580      	push	{r7, lr}
    f4f2:	b084      	sub	sp, #16
    f4f4:	af00      	add	r7, sp, #0
    f4f6:	4603      	mov	r3, r0
    f4f8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    f4fa:	79fb      	ldrb	r3, [r7, #7]
    f4fc:	f003 030f 	and.w	r3, r3, #15
    f500:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    f502:	79fb      	ldrb	r3, [r7, #7]
    f504:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f508:	2b00      	cmp	r3, #0
    f50a:	bf14      	ite	ne
    f50c:	2301      	movne	r3, #1
    f50e:	2300      	moveq	r3, #0
    f510:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f512:	7bba      	ldrb	r2, [r7, #14]
    f514:	7bfb      	ldrb	r3, [r7, #15]
    f516:	4611      	mov	r1, r2
    f518:	4618      	mov	r0, r3
    f51a:	4b08      	ldr	r3, [pc, #32]	; (f53c <_usb_d_dev_ep_abort+0x4c>)
    f51c:	4798      	blx	r3
    f51e:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    f520:	7bfb      	ldrb	r3, [r7, #15]
    f522:	2b04      	cmp	r3, #4
    f524:	d806      	bhi.n	f534 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    f526:	7bbb      	ldrb	r3, [r7, #14]
    f528:	2202      	movs	r2, #2
    f52a:	4619      	mov	r1, r3
    f52c:	68b8      	ldr	r0, [r7, #8]
    f52e:	4b04      	ldr	r3, [pc, #16]	; (f540 <_usb_d_dev_ep_abort+0x50>)
    f530:	4798      	blx	r3
    f532:	e000      	b.n	f536 <_usb_d_dev_ep_abort+0x46>
		return;
    f534:	bf00      	nop
}
    f536:	3710      	adds	r7, #16
    f538:	46bd      	mov	sp, r7
    f53a:	bd80      	pop	{r7, pc}
    f53c:	0000db9d 	.word	0x0000db9d
    f540:	0000f1d5 	.word	0x0000f1d5

0000f544 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    f544:	b480      	push	{r7}
    f546:	b085      	sub	sp, #20
    f548:	af00      	add	r7, sp, #0
    f54a:	4603      	mov	r3, r0
    f54c:	6039      	str	r1, [r7, #0]
    f54e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    f550:	683b      	ldr	r3, [r7, #0]
    f552:	2b00      	cmp	r3, #0
    f554:	d001      	beq.n	f55a <_usb_d_dev_register_callback+0x16>
    f556:	683b      	ldr	r3, [r7, #0]
    f558:	e000      	b.n	f55c <_usb_d_dev_register_callback+0x18>
    f55a:	4b0a      	ldr	r3, [pc, #40]	; (f584 <_usb_d_dev_register_callback+0x40>)
    f55c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    f55e:	79fb      	ldrb	r3, [r7, #7]
    f560:	2b01      	cmp	r3, #1
    f562:	d103      	bne.n	f56c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    f564:	4a08      	ldr	r2, [pc, #32]	; (f588 <_usb_d_dev_register_callback+0x44>)
    f566:	68fb      	ldr	r3, [r7, #12]
    f568:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    f56a:	e005      	b.n	f578 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    f56c:	79fb      	ldrb	r3, [r7, #7]
    f56e:	2b00      	cmp	r3, #0
    f570:	d102      	bne.n	f578 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    f572:	4a05      	ldr	r2, [pc, #20]	; (f588 <_usb_d_dev_register_callback+0x44>)
    f574:	68fb      	ldr	r3, [r7, #12]
    f576:	6013      	str	r3, [r2, #0]
}
    f578:	bf00      	nop
    f57a:	3714      	adds	r7, #20
    f57c:	46bd      	mov	sp, r7
    f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f582:	4770      	bx	lr
    f584:	0000d425 	.word	0x0000d425
    f588:	20001b88 	.word	0x20001b88

0000f58c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    f58c:	b480      	push	{r7}
    f58e:	b085      	sub	sp, #20
    f590:	af00      	add	r7, sp, #0
    f592:	4603      	mov	r3, r0
    f594:	6039      	str	r1, [r7, #0]
    f596:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    f598:	683b      	ldr	r3, [r7, #0]
    f59a:	2b00      	cmp	r3, #0
    f59c:	d001      	beq.n	f5a2 <_usb_d_dev_register_ep_callback+0x16>
    f59e:	683b      	ldr	r3, [r7, #0]
    f5a0:	e000      	b.n	f5a4 <_usb_d_dev_register_ep_callback+0x18>
    f5a2:	4b0e      	ldr	r3, [pc, #56]	; (f5dc <_usb_d_dev_register_ep_callback+0x50>)
    f5a4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    f5a6:	79fb      	ldrb	r3, [r7, #7]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d103      	bne.n	f5b4 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    f5ac:	4a0c      	ldr	r2, [pc, #48]	; (f5e0 <_usb_d_dev_register_ep_callback+0x54>)
    f5ae:	68fb      	ldr	r3, [r7, #12]
    f5b0:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    f5b2:	e00c      	b.n	f5ce <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    f5b4:	79fb      	ldrb	r3, [r7, #7]
    f5b6:	2b01      	cmp	r3, #1
    f5b8:	d103      	bne.n	f5c2 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    f5ba:	4a09      	ldr	r2, [pc, #36]	; (f5e0 <_usb_d_dev_register_ep_callback+0x54>)
    f5bc:	68fb      	ldr	r3, [r7, #12]
    f5be:	60d3      	str	r3, [r2, #12]
}
    f5c0:	e005      	b.n	f5ce <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    f5c2:	79fb      	ldrb	r3, [r7, #7]
    f5c4:	2b02      	cmp	r3, #2
    f5c6:	d102      	bne.n	f5ce <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    f5c8:	4a05      	ldr	r2, [pc, #20]	; (f5e0 <_usb_d_dev_register_ep_callback+0x54>)
    f5ca:	68fb      	ldr	r3, [r7, #12]
    f5cc:	6113      	str	r3, [r2, #16]
}
    f5ce:	bf00      	nop
    f5d0:	3714      	adds	r7, #20
    f5d2:	46bd      	mov	sp, r7
    f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f5d8:	4770      	bx	lr
    f5da:	bf00      	nop
    f5dc:	0000d425 	.word	0x0000d425
    f5e0:	20001b88 	.word	0x20001b88

0000f5e4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    f5e4:	b580      	push	{r7, lr}
    f5e6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    f5e8:	4b01      	ldr	r3, [pc, #4]	; (f5f0 <USB_0_Handler+0xc>)
    f5ea:	4798      	blx	r3
}
    f5ec:	bf00      	nop
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	0000e855 	.word	0x0000e855

0000f5f4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    f5f4:	b580      	push	{r7, lr}
    f5f6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    f5f8:	4b01      	ldr	r3, [pc, #4]	; (f600 <USB_1_Handler+0xc>)
    f5fa:	4798      	blx	r3
}
    f5fc:	bf00      	nop
    f5fe:	bd80      	pop	{r7, pc}
    f600:	0000e855 	.word	0x0000e855

0000f604 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    f604:	b580      	push	{r7, lr}
    f606:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    f608:	4b01      	ldr	r3, [pc, #4]	; (f610 <USB_2_Handler+0xc>)
    f60a:	4798      	blx	r3
}
    f60c:	bf00      	nop
    f60e:	bd80      	pop	{r7, pc}
    f610:	0000e855 	.word	0x0000e855

0000f614 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    f614:	b580      	push	{r7, lr}
    f616:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    f618:	4b01      	ldr	r3, [pc, #4]	; (f620 <USB_3_Handler+0xc>)
    f61a:	4798      	blx	r3
}
    f61c:	bf00      	nop
    f61e:	bd80      	pop	{r7, pc}
    f620:	0000e855 	.word	0x0000e855

0000f624 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    f624:	b480      	push	{r7}
    f626:	b083      	sub	sp, #12
    f628:	af00      	add	r7, sp, #0
    f62a:	6078      	str	r0, [r7, #4]
    f62c:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    f62e:	bf00      	nop
    f630:	687b      	ldr	r3, [r7, #4]
    f632:	689a      	ldr	r2, [r3, #8]
    f634:	683b      	ldr	r3, [r7, #0]
    f636:	4013      	ands	r3, r2
    f638:	2b00      	cmp	r3, #0
    f63a:	d1f9      	bne.n	f630 <hri_wdt_wait_for_sync+0xc>
	};
}
    f63c:	bf00      	nop
    f63e:	370c      	adds	r7, #12
    f640:	46bd      	mov	sp, r7
    f642:	f85d 7b04 	ldr.w	r7, [sp], #4
    f646:	4770      	bx	lr

0000f648 <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
    f648:	b580      	push	{r7, lr}
    f64a:	b082      	sub	sp, #8
    f64c:	af00      	add	r7, sp, #0
    f64e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	781b      	ldrb	r3, [r3, #0]
    f654:	b2db      	uxtb	r3, r3
    f656:	f043 0302 	orr.w	r3, r3, #2
    f65a:	b2da      	uxtb	r2, r3
    f65c:	687b      	ldr	r3, [r7, #4]
    f65e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    f660:	210e      	movs	r1, #14
    f662:	6878      	ldr	r0, [r7, #4]
    f664:	4b02      	ldr	r3, [pc, #8]	; (f670 <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
    f666:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    f668:	bf00      	nop
    f66a:	3708      	adds	r7, #8
    f66c:	46bd      	mov	sp, r7
    f66e:	bd80      	pop	{r7, pc}
    f670:	0000f625 	.word	0x0000f625

0000f674 <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    f674:	b580      	push	{r7, lr}
    f676:	b084      	sub	sp, #16
    f678:	af00      	add	r7, sp, #0
    f67a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    f67c:	210e      	movs	r1, #14
    f67e:	6878      	ldr	r0, [r7, #4]
    f680:	4b0a      	ldr	r3, [pc, #40]	; (f6ac <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    f682:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    f68a:	7bfb      	ldrb	r3, [r7, #15]
    f68c:	085b      	lsrs	r3, r3, #1
    f68e:	b2db      	uxtb	r3, r3
    f690:	f003 0301 	and.w	r3, r3, #1
    f694:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    f696:	7bfb      	ldrb	r3, [r7, #15]
    f698:	2b00      	cmp	r3, #0
    f69a:	bf14      	ite	ne
    f69c:	2301      	movne	r3, #1
    f69e:	2300      	moveq	r3, #0
    f6a0:	b2db      	uxtb	r3, r3
}
    f6a2:	4618      	mov	r0, r3
    f6a4:	3710      	adds	r7, #16
    f6a6:	46bd      	mov	sp, r7
    f6a8:	bd80      	pop	{r7, pc}
    f6aa:	bf00      	nop
    f6ac:	0000f625 	.word	0x0000f625

0000f6b0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    f6b0:	b580      	push	{r7, lr}
    f6b2:	b082      	sub	sp, #8
    f6b4:	af00      	add	r7, sp, #0
    f6b6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	781b      	ldrb	r3, [r3, #0]
    f6bc:	b2db      	uxtb	r3, r3
    f6be:	f023 0304 	bic.w	r3, r3, #4
    f6c2:	b2da      	uxtb	r2, r3
    f6c4:	687b      	ldr	r3, [r7, #4]
    f6c6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    f6c8:	210e      	movs	r1, #14
    f6ca:	6878      	ldr	r0, [r7, #4]
    f6cc:	4b02      	ldr	r3, [pc, #8]	; (f6d8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    f6ce:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    f6d0:	bf00      	nop
    f6d2:	3708      	adds	r7, #8
    f6d4:	46bd      	mov	sp, r7
    f6d6:	bd80      	pop	{r7, pc}
    f6d8:	0000f625 	.word	0x0000f625

0000f6dc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    f6dc:	b580      	push	{r7, lr}
    f6de:	b084      	sub	sp, #16
    f6e0:	af00      	add	r7, sp, #0
    f6e2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    f6e4:	210e      	movs	r1, #14
    f6e6:	6878      	ldr	r0, [r7, #4]
    f6e8:	4b08      	ldr	r3, [pc, #32]	; (f70c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    f6ea:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    f6ec:	687b      	ldr	r3, [r7, #4]
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    f6f2:	7bfb      	ldrb	r3, [r7, #15]
    f6f4:	09db      	lsrs	r3, r3, #7
    f6f6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    f6f8:	7bfb      	ldrb	r3, [r7, #15]
    f6fa:	2b00      	cmp	r3, #0
    f6fc:	bf14      	ite	ne
    f6fe:	2301      	movne	r3, #1
    f700:	2300      	moveq	r3, #0
    f702:	b2db      	uxtb	r3, r3
}
    f704:	4618      	mov	r0, r3
    f706:	3710      	adds	r7, #16
    f708:	46bd      	mov	sp, r7
    f70a:	bd80      	pop	{r7, pc}
    f70c:	0000f625 	.word	0x0000f625

0000f710 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    f710:	b480      	push	{r7}
    f712:	b085      	sub	sp, #20
    f714:	af00      	add	r7, sp, #0
    f716:	6078      	str	r0, [r7, #4]
    f718:	460b      	mov	r3, r1
    f71a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	785b      	ldrb	r3, [r3, #1]
    f720:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    f722:	7bfb      	ldrb	r3, [r7, #15]
    f724:	f023 030f 	bic.w	r3, r3, #15
    f728:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    f72a:	78fb      	ldrb	r3, [r7, #3]
    f72c:	f003 030f 	and.w	r3, r3, #15
    f730:	b2da      	uxtb	r2, r3
    f732:	7bfb      	ldrb	r3, [r7, #15]
    f734:	4313      	orrs	r3, r2
    f736:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	7bfa      	ldrb	r2, [r7, #15]
    f73c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    f73e:	bf00      	nop
    f740:	3714      	adds	r7, #20
    f742:	46bd      	mov	sp, r7
    f744:	f85d 7b04 	ldr.w	r7, [sp], #4
    f748:	4770      	bx	lr
	...

0000f74c <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
    f74c:	b580      	push	{r7, lr}
    f74e:	b082      	sub	sp, #8
    f750:	af00      	add	r7, sp, #0
    f752:	6078      	str	r0, [r7, #4]
    f754:	460b      	mov	r3, r1
    f756:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    f758:	687b      	ldr	r3, [r7, #4]
    f75a:	78fa      	ldrb	r2, [r7, #3]
    f75c:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
    f75e:	2110      	movs	r1, #16
    f760:	6878      	ldr	r0, [r7, #4]
    f762:	4b03      	ldr	r3, [pc, #12]	; (f770 <hri_wdt_write_CLEAR_reg+0x24>)
    f764:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    f766:	bf00      	nop
    f768:	3708      	adds	r7, #8
    f76a:	46bd      	mov	sp, r7
    f76c:	bd80      	pop	{r7, pc}
    f76e:	bf00      	nop
    f770:	0000f625 	.word	0x0000f625

0000f774 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    f774:	b580      	push	{r7, lr}
    f776:	b082      	sub	sp, #8
    f778:	af00      	add	r7, sp, #0
    f77a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	2b00      	cmp	r3, #0
    f780:	d005      	beq.n	f78e <_wdt_init+0x1a>
    f782:	687b      	ldr	r3, [r7, #4]
    f784:	681b      	ldr	r3, [r3, #0]
    f786:	2b00      	cmp	r3, #0
    f788:	d001      	beq.n	f78e <_wdt_init+0x1a>
    f78a:	2301      	movs	r3, #1
    f78c:	e000      	b.n	f790 <_wdt_init+0x1c>
    f78e:	2300      	movs	r3, #0
    f790:	f003 0301 	and.w	r3, r3, #1
    f794:	b2db      	uxtb	r3, r3
    f796:	2250      	movs	r2, #80	; 0x50
    f798:	4913      	ldr	r1, [pc, #76]	; (f7e8 <_wdt_init+0x74>)
    f79a:	4618      	mov	r0, r3
    f79c:	4b13      	ldr	r3, [pc, #76]	; (f7ec <_wdt_init+0x78>)
    f79e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    f7a0:	687b      	ldr	r3, [r7, #4]
    f7a2:	681b      	ldr	r3, [r3, #0]
    f7a4:	4618      	mov	r0, r3
    f7a6:	4b12      	ldr	r3, [pc, #72]	; (f7f0 <_wdt_init+0x7c>)
    f7a8:	4798      	blx	r3
    f7aa:	4603      	mov	r3, r0
    f7ac:	2b00      	cmp	r3, #0
    f7ae:	d107      	bne.n	f7c0 <_wdt_init+0x4c>
    f7b0:	687b      	ldr	r3, [r7, #4]
    f7b2:	681b      	ldr	r3, [r3, #0]
    f7b4:	4618      	mov	r0, r3
    f7b6:	4b0f      	ldr	r3, [pc, #60]	; (f7f4 <_wdt_init+0x80>)
    f7b8:	4798      	blx	r3
    f7ba:	4603      	mov	r3, r0
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d002      	beq.n	f7c6 <_wdt_init+0x52>
		return ERR_DENIED;
    f7c0:	f06f 0310 	mvn.w	r3, #16
    f7c4:	e00b      	b.n	f7de <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    f7c6:	687b      	ldr	r3, [r7, #4]
    f7c8:	681b      	ldr	r3, [r3, #0]
    f7ca:	4618      	mov	r0, r3
    f7cc:	4b0a      	ldr	r3, [pc, #40]	; (f7f8 <_wdt_init+0x84>)
    f7ce:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    f7d0:	687b      	ldr	r3, [r7, #4]
    f7d2:	681b      	ldr	r3, [r3, #0]
    f7d4:	210b      	movs	r1, #11
    f7d6:	4618      	mov	r0, r3
    f7d8:	4b08      	ldr	r3, [pc, #32]	; (f7fc <_wdt_init+0x88>)
    f7da:	4798      	blx	r3
	}

	return ERR_NONE;
    f7dc:	2300      	movs	r3, #0
}
    f7de:	4618      	mov	r0, r3
    f7e0:	3708      	adds	r7, #8
    f7e2:	46bd      	mov	sp, r7
    f7e4:	bd80      	pop	{r7, pc}
    f7e6:	bf00      	nop
    f7e8:	0001cee4 	.word	0x0001cee4
    f7ec:	00007b0d 	.word	0x00007b0d
    f7f0:	0000f6dd 	.word	0x0000f6dd
    f7f4:	0000f675 	.word	0x0000f675
    f7f8:	0000f6b1 	.word	0x0000f6b1
    f7fc:	0000f711 	.word	0x0000f711

0000f800 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    f800:	b5f0      	push	{r4, r5, r6, r7, lr}
    f802:	b08b      	sub	sp, #44	; 0x2c
    f804:	af00      	add	r7, sp, #0
    f806:	60f8      	str	r0, [r7, #12]
    f808:	60b9      	str	r1, [r7, #8]
    f80a:	4613      	mov	r3, r2
    f80c:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    f80e:	68fb      	ldr	r3, [r7, #12]
    f810:	2b00      	cmp	r3, #0
    f812:	d005      	beq.n	f820 <_wdt_set_timeout_period+0x20>
    f814:	68fb      	ldr	r3, [r7, #12]
    f816:	681b      	ldr	r3, [r3, #0]
    f818:	2b00      	cmp	r3, #0
    f81a:	d001      	beq.n	f820 <_wdt_set_timeout_period+0x20>
    f81c:	2301      	movs	r3, #1
    f81e:	e000      	b.n	f822 <_wdt_set_timeout_period+0x22>
    f820:	2300      	movs	r3, #0
    f822:	f003 0301 	and.w	r3, r3, #1
    f826:	b2db      	uxtb	r3, r3
    f828:	227a      	movs	r2, #122	; 0x7a
    f82a:	4954      	ldr	r1, [pc, #336]	; (f97c <_wdt_set_timeout_period+0x17c>)
    f82c:	4618      	mov	r0, r3
    f82e:	4b54      	ldr	r3, [pc, #336]	; (f980 <_wdt_set_timeout_period+0x180>)
    f830:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    f832:	68fb      	ldr	r3, [r7, #12]
    f834:	681b      	ldr	r3, [r3, #0]
    f836:	4618      	mov	r0, r3
    f838:	4b52      	ldr	r3, [pc, #328]	; (f984 <_wdt_set_timeout_period+0x184>)
    f83a:	4798      	blx	r3
    f83c:	4603      	mov	r3, r0
    f83e:	2b00      	cmp	r3, #0
    f840:	d107      	bne.n	f852 <_wdt_set_timeout_period+0x52>
    f842:	68fb      	ldr	r3, [r7, #12]
    f844:	681b      	ldr	r3, [r3, #0]
    f846:	4618      	mov	r0, r3
    f848:	4b4f      	ldr	r3, [pc, #316]	; (f988 <_wdt_set_timeout_period+0x188>)
    f84a:	4798      	blx	r3
    f84c:	4603      	mov	r3, r0
    f84e:	2b00      	cmp	r3, #0
    f850:	d002      	beq.n	f858 <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
    f852:	f06f 0310 	mvn.w	r3, #16
    f856:	e08c      	b.n	f972 <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    f858:	88f9      	ldrh	r1, [r7, #6]
    f85a:	f04f 0200 	mov.w	r2, #0
    f85e:	68bb      	ldr	r3, [r7, #8]
    f860:	f04f 0400 	mov.w	r4, #0
    f864:	fb03 fe02 	mul.w	lr, r3, r2
    f868:	fb01 f004 	mul.w	r0, r1, r4
    f86c:	4470      	add	r0, lr
    f86e:	fba1 3403 	umull	r3, r4, r1, r3
    f872:	1902      	adds	r2, r0, r4
    f874:	4614      	mov	r4, r2
    f876:	e9c7 3406 	strd	r3, r4, [r7, #24]
    f87a:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
    f87e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    f882:	0025      	movs	r5, r4
    f884:	2600      	movs	r6, #0
    f886:	ea55 0306 	orrs.w	r3, r5, r6
    f88a:	d002      	beq.n	f892 <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
    f88c:	f06f 030c 	mvn.w	r3, #12
    f890:	e06f      	b.n	f972 <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
    f892:	69bb      	ldr	r3, [r7, #24]
    f894:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    f896:	697b      	ldr	r3, [r7, #20]
    f898:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    f89c:	d041      	beq.n	f922 <_wdt_set_timeout_period+0x122>
    f89e:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    f8a2:	d813      	bhi.n	f8cc <_wdt_set_timeout_period+0xcc>
    f8a4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    f8a8:	d02f      	beq.n	f90a <_wdt_set_timeout_period+0x10a>
    f8aa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    f8ae:	d806      	bhi.n	f8be <_wdt_set_timeout_period+0xbe>
    f8b0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    f8b4:	d021      	beq.n	f8fa <_wdt_set_timeout_period+0xfa>
    f8b6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
    f8ba:	d022      	beq.n	f902 <_wdt_set_timeout_period+0x102>
    f8bc:	e04d      	b.n	f95a <_wdt_set_timeout_period+0x15a>
    f8be:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
    f8c2:	d026      	beq.n	f912 <_wdt_set_timeout_period+0x112>
    f8c4:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
    f8c8:	d027      	beq.n	f91a <_wdt_set_timeout_period+0x11a>
    f8ca:	e046      	b.n	f95a <_wdt_set_timeout_period+0x15a>
    f8cc:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    f8d0:	d033      	beq.n	f93a <_wdt_set_timeout_period+0x13a>
    f8d2:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    f8d6:	d806      	bhi.n	f8e6 <_wdt_set_timeout_period+0xe6>
    f8d8:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
    f8dc:	d025      	beq.n	f92a <_wdt_set_timeout_period+0x12a>
    f8de:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
    f8e2:	d026      	beq.n	f932 <_wdt_set_timeout_period+0x132>
    f8e4:	e039      	b.n	f95a <_wdt_set_timeout_period+0x15a>
    f8e6:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
    f8ea:	d02e      	beq.n	f94a <_wdt_set_timeout_period+0x14a>
    f8ec:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
    f8f0:	d02f      	beq.n	f952 <_wdt_set_timeout_period+0x152>
    f8f2:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
    f8f6:	d024      	beq.n	f942 <_wdt_set_timeout_period+0x142>
    f8f8:	e02f      	b.n	f95a <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    f8fa:	2300      	movs	r3, #0
    f8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f900:	e02e      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    f902:	2301      	movs	r3, #1
    f904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f908:	e02a      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    f90a:	2302      	movs	r3, #2
    f90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f910:	e026      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    f912:	2303      	movs	r3, #3
    f914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f918:	e022      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    f91a:	2304      	movs	r3, #4
    f91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f920:	e01e      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    f922:	2305      	movs	r3, #5
    f924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f928:	e01a      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    f92a:	2306      	movs	r3, #6
    f92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f930:	e016      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    f932:	2307      	movs	r3, #7
    f934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f938:	e012      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    f93a:	2308      	movs	r3, #8
    f93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f940:	e00e      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    f942:	2309      	movs	r3, #9
    f944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f948:	e00a      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    f94a:	230a      	movs	r3, #10
    f94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f950:	e006      	b.n	f960 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    f952:	230b      	movs	r3, #11
    f954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    f958:	e002      	b.n	f960 <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
    f95a:	f06f 030c 	mvn.w	r3, #12
    f95e:	e008      	b.n	f972 <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
    f960:	68fb      	ldr	r3, [r7, #12]
    f962:	681b      	ldr	r3, [r3, #0]
    f964:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f968:	4611      	mov	r1, r2
    f96a:	4618      	mov	r0, r3
    f96c:	4b07      	ldr	r3, [pc, #28]	; (f98c <_wdt_set_timeout_period+0x18c>)
    f96e:	4798      	blx	r3

	return ERR_NONE;
    f970:	2300      	movs	r3, #0
}
    f972:	4618      	mov	r0, r3
    f974:	372c      	adds	r7, #44	; 0x2c
    f976:	46bd      	mov	sp, r7
    f978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f97a:	bf00      	nop
    f97c:	0001cee4 	.word	0x0001cee4
    f980:	00007b0d 	.word	0x00007b0d
    f984:	0000f6dd 	.word	0x0000f6dd
    f988:	0000f675 	.word	0x0000f675
    f98c:	0000f711 	.word	0x0000f711

0000f990 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    f990:	b580      	push	{r7, lr}
    f992:	b082      	sub	sp, #8
    f994:	af00      	add	r7, sp, #0
    f996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    f998:	687b      	ldr	r3, [r7, #4]
    f99a:	2b00      	cmp	r3, #0
    f99c:	d005      	beq.n	f9aa <_wdt_enable+0x1a>
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	681b      	ldr	r3, [r3, #0]
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	d001      	beq.n	f9aa <_wdt_enable+0x1a>
    f9a6:	2301      	movs	r3, #1
    f9a8:	e000      	b.n	f9ac <_wdt_enable+0x1c>
    f9aa:	2300      	movs	r3, #0
    f9ac:	f003 0301 	and.w	r3, r3, #1
    f9b0:	b2db      	uxtb	r3, r3
    f9b2:	22fb      	movs	r2, #251	; 0xfb
    f9b4:	4906      	ldr	r1, [pc, #24]	; (f9d0 <_wdt_enable+0x40>)
    f9b6:	4618      	mov	r0, r3
    f9b8:	4b06      	ldr	r3, [pc, #24]	; (f9d4 <_wdt_enable+0x44>)
    f9ba:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    f9bc:	687b      	ldr	r3, [r7, #4]
    f9be:	681b      	ldr	r3, [r3, #0]
    f9c0:	4618      	mov	r0, r3
    f9c2:	4b05      	ldr	r3, [pc, #20]	; (f9d8 <_wdt_enable+0x48>)
    f9c4:	4798      	blx	r3

	return ERR_NONE;
    f9c6:	2300      	movs	r3, #0
}
    f9c8:	4618      	mov	r0, r3
    f9ca:	3708      	adds	r7, #8
    f9cc:	46bd      	mov	sp, r7
    f9ce:	bd80      	pop	{r7, pc}
    f9d0:	0001cee4 	.word	0x0001cee4
    f9d4:	00007b0d 	.word	0x00007b0d
    f9d8:	0000f649 	.word	0x0000f649

0000f9dc <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    f9dc:	b580      	push	{r7, lr}
    f9de:	b082      	sub	sp, #8
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	2b00      	cmp	r3, #0
    f9e8:	d005      	beq.n	f9f6 <_wdt_feed+0x1a>
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	681b      	ldr	r3, [r3, #0]
    f9ee:	2b00      	cmp	r3, #0
    f9f0:	d001      	beq.n	f9f6 <_wdt_feed+0x1a>
    f9f2:	2301      	movs	r3, #1
    f9f4:	e000      	b.n	f9f8 <_wdt_feed+0x1c>
    f9f6:	2300      	movs	r3, #0
    f9f8:	f003 0301 	and.w	r3, r3, #1
    f9fc:	b2db      	uxtb	r3, r3
    f9fe:	f240 1219 	movw	r2, #281	; 0x119
    fa02:	4907      	ldr	r1, [pc, #28]	; (fa20 <_wdt_feed+0x44>)
    fa04:	4618      	mov	r0, r3
    fa06:	4b07      	ldr	r3, [pc, #28]	; (fa24 <_wdt_feed+0x48>)
    fa08:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	681b      	ldr	r3, [r3, #0]
    fa0e:	21a5      	movs	r1, #165	; 0xa5
    fa10:	4618      	mov	r0, r3
    fa12:	4b05      	ldr	r3, [pc, #20]	; (fa28 <_wdt_feed+0x4c>)
    fa14:	4798      	blx	r3

	return ERR_NONE;
    fa16:	2300      	movs	r3, #0
}
    fa18:	4618      	mov	r0, r3
    fa1a:	3708      	adds	r7, #8
    fa1c:	46bd      	mov	sp, r7
    fa1e:	bd80      	pop	{r7, pc}
    fa20:	0001cee4 	.word	0x0001cee4
    fa24:	00007b0d 	.word	0x00007b0d
    fa28:	0000f74d 	.word	0x0000f74d

0000fa2c <hri_port_set_DIR_reg>:
{
    fa2c:	b480      	push	{r7}
    fa2e:	b085      	sub	sp, #20
    fa30:	af00      	add	r7, sp, #0
    fa32:	60f8      	str	r0, [r7, #12]
    fa34:	460b      	mov	r3, r1
    fa36:	607a      	str	r2, [r7, #4]
    fa38:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    fa3a:	7afb      	ldrb	r3, [r7, #11]
    fa3c:	68fa      	ldr	r2, [r7, #12]
    fa3e:	01db      	lsls	r3, r3, #7
    fa40:	4413      	add	r3, r2
    fa42:	3308      	adds	r3, #8
    fa44:	687a      	ldr	r2, [r7, #4]
    fa46:	601a      	str	r2, [r3, #0]
}
    fa48:	bf00      	nop
    fa4a:	3714      	adds	r7, #20
    fa4c:	46bd      	mov	sp, r7
    fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa52:	4770      	bx	lr

0000fa54 <hri_port_clear_DIR_reg>:
{
    fa54:	b480      	push	{r7}
    fa56:	b085      	sub	sp, #20
    fa58:	af00      	add	r7, sp, #0
    fa5a:	60f8      	str	r0, [r7, #12]
    fa5c:	460b      	mov	r3, r1
    fa5e:	607a      	str	r2, [r7, #4]
    fa60:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    fa62:	7afb      	ldrb	r3, [r7, #11]
    fa64:	68fa      	ldr	r2, [r7, #12]
    fa66:	01db      	lsls	r3, r3, #7
    fa68:	4413      	add	r3, r2
    fa6a:	3304      	adds	r3, #4
    fa6c:	687a      	ldr	r2, [r7, #4]
    fa6e:	601a      	str	r2, [r3, #0]
}
    fa70:	bf00      	nop
    fa72:	3714      	adds	r7, #20
    fa74:	46bd      	mov	sp, r7
    fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa7a:	4770      	bx	lr

0000fa7c <hri_port_set_OUT_reg>:
{
    fa7c:	b480      	push	{r7}
    fa7e:	b085      	sub	sp, #20
    fa80:	af00      	add	r7, sp, #0
    fa82:	60f8      	str	r0, [r7, #12]
    fa84:	460b      	mov	r3, r1
    fa86:	607a      	str	r2, [r7, #4]
    fa88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    fa8a:	7afb      	ldrb	r3, [r7, #11]
    fa8c:	68fa      	ldr	r2, [r7, #12]
    fa8e:	01db      	lsls	r3, r3, #7
    fa90:	4413      	add	r3, r2
    fa92:	3318      	adds	r3, #24
    fa94:	687a      	ldr	r2, [r7, #4]
    fa96:	601a      	str	r2, [r3, #0]
}
    fa98:	bf00      	nop
    fa9a:	3714      	adds	r7, #20
    fa9c:	46bd      	mov	sp, r7
    fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    faa2:	4770      	bx	lr

0000faa4 <hri_port_clear_OUT_reg>:
{
    faa4:	b480      	push	{r7}
    faa6:	b085      	sub	sp, #20
    faa8:	af00      	add	r7, sp, #0
    faaa:	60f8      	str	r0, [r7, #12]
    faac:	460b      	mov	r3, r1
    faae:	607a      	str	r2, [r7, #4]
    fab0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fab2:	7afb      	ldrb	r3, [r7, #11]
    fab4:	68fa      	ldr	r2, [r7, #12]
    fab6:	01db      	lsls	r3, r3, #7
    fab8:	4413      	add	r3, r2
    faba:	3314      	adds	r3, #20
    fabc:	687a      	ldr	r2, [r7, #4]
    fabe:	601a      	str	r2, [r3, #0]
}
    fac0:	bf00      	nop
    fac2:	3714      	adds	r7, #20
    fac4:	46bd      	mov	sp, r7
    fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    faca:	4770      	bx	lr

0000facc <hri_port_write_PMUX_PMUXE_bf>:
{
    facc:	b480      	push	{r7}
    face:	b085      	sub	sp, #20
    fad0:	af00      	add	r7, sp, #0
    fad2:	6078      	str	r0, [r7, #4]
    fad4:	4608      	mov	r0, r1
    fad6:	4611      	mov	r1, r2
    fad8:	461a      	mov	r2, r3
    fada:	4603      	mov	r3, r0
    fadc:	70fb      	strb	r3, [r7, #3]
    fade:	460b      	mov	r3, r1
    fae0:	70bb      	strb	r3, [r7, #2]
    fae2:	4613      	mov	r3, r2
    fae4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fae6:	78fa      	ldrb	r2, [r7, #3]
    fae8:	78bb      	ldrb	r3, [r7, #2]
    faea:	6879      	ldr	r1, [r7, #4]
    faec:	01d2      	lsls	r2, r2, #7
    faee:	440a      	add	r2, r1
    faf0:	4413      	add	r3, r2
    faf2:	3330      	adds	r3, #48	; 0x30
    faf4:	781b      	ldrb	r3, [r3, #0]
    faf6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    faf8:	7bfb      	ldrb	r3, [r7, #15]
    fafa:	f023 030f 	bic.w	r3, r3, #15
    fafe:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    fb00:	787b      	ldrb	r3, [r7, #1]
    fb02:	f003 030f 	and.w	r3, r3, #15
    fb06:	b2da      	uxtb	r2, r3
    fb08:	7bfb      	ldrb	r3, [r7, #15]
    fb0a:	4313      	orrs	r3, r2
    fb0c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fb0e:	78fa      	ldrb	r2, [r7, #3]
    fb10:	78bb      	ldrb	r3, [r7, #2]
    fb12:	6879      	ldr	r1, [r7, #4]
    fb14:	01d2      	lsls	r2, r2, #7
    fb16:	440a      	add	r2, r1
    fb18:	4413      	add	r3, r2
    fb1a:	3330      	adds	r3, #48	; 0x30
    fb1c:	7bfa      	ldrb	r2, [r7, #15]
    fb1e:	701a      	strb	r2, [r3, #0]
}
    fb20:	bf00      	nop
    fb22:	3714      	adds	r7, #20
    fb24:	46bd      	mov	sp, r7
    fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
    fb2a:	4770      	bx	lr

0000fb2c <hri_port_write_PMUX_PMUXO_bf>:
{
    fb2c:	b480      	push	{r7}
    fb2e:	b085      	sub	sp, #20
    fb30:	af00      	add	r7, sp, #0
    fb32:	6078      	str	r0, [r7, #4]
    fb34:	4608      	mov	r0, r1
    fb36:	4611      	mov	r1, r2
    fb38:	461a      	mov	r2, r3
    fb3a:	4603      	mov	r3, r0
    fb3c:	70fb      	strb	r3, [r7, #3]
    fb3e:	460b      	mov	r3, r1
    fb40:	70bb      	strb	r3, [r7, #2]
    fb42:	4613      	mov	r3, r2
    fb44:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fb46:	78fa      	ldrb	r2, [r7, #3]
    fb48:	78bb      	ldrb	r3, [r7, #2]
    fb4a:	6879      	ldr	r1, [r7, #4]
    fb4c:	01d2      	lsls	r2, r2, #7
    fb4e:	440a      	add	r2, r1
    fb50:	4413      	add	r3, r2
    fb52:	3330      	adds	r3, #48	; 0x30
    fb54:	781b      	ldrb	r3, [r3, #0]
    fb56:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    fb58:	7bfb      	ldrb	r3, [r7, #15]
    fb5a:	f003 030f 	and.w	r3, r3, #15
    fb5e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    fb60:	787b      	ldrb	r3, [r7, #1]
    fb62:	011b      	lsls	r3, r3, #4
    fb64:	b2da      	uxtb	r2, r3
    fb66:	7bfb      	ldrb	r3, [r7, #15]
    fb68:	4313      	orrs	r3, r2
    fb6a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fb6c:	78fa      	ldrb	r2, [r7, #3]
    fb6e:	78bb      	ldrb	r3, [r7, #2]
    fb70:	6879      	ldr	r1, [r7, #4]
    fb72:	01d2      	lsls	r2, r2, #7
    fb74:	440a      	add	r2, r1
    fb76:	4413      	add	r3, r2
    fb78:	3330      	adds	r3, #48	; 0x30
    fb7a:	7bfa      	ldrb	r2, [r7, #15]
    fb7c:	701a      	strb	r2, [r3, #0]
}
    fb7e:	bf00      	nop
    fb80:	3714      	adds	r7, #20
    fb82:	46bd      	mov	sp, r7
    fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
    fb88:	4770      	bx	lr

0000fb8a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    fb8a:	b480      	push	{r7}
    fb8c:	b085      	sub	sp, #20
    fb8e:	af00      	add	r7, sp, #0
    fb90:	6078      	str	r0, [r7, #4]
    fb92:	4608      	mov	r0, r1
    fb94:	4611      	mov	r1, r2
    fb96:	461a      	mov	r2, r3
    fb98:	4603      	mov	r3, r0
    fb9a:	70fb      	strb	r3, [r7, #3]
    fb9c:	460b      	mov	r3, r1
    fb9e:	70bb      	strb	r3, [r7, #2]
    fba0:	4613      	mov	r3, r2
    fba2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fba4:	78fa      	ldrb	r2, [r7, #3]
    fba6:	78bb      	ldrb	r3, [r7, #2]
    fba8:	6879      	ldr	r1, [r7, #4]
    fbaa:	01d2      	lsls	r2, r2, #7
    fbac:	440a      	add	r2, r1
    fbae:	4413      	add	r3, r2
    fbb0:	3340      	adds	r3, #64	; 0x40
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    fbb6:	7bfb      	ldrb	r3, [r7, #15]
    fbb8:	f023 0301 	bic.w	r3, r3, #1
    fbbc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    fbbe:	787a      	ldrb	r2, [r7, #1]
    fbc0:	7bfb      	ldrb	r3, [r7, #15]
    fbc2:	4313      	orrs	r3, r2
    fbc4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fbc6:	78fa      	ldrb	r2, [r7, #3]
    fbc8:	78bb      	ldrb	r3, [r7, #2]
    fbca:	6879      	ldr	r1, [r7, #4]
    fbcc:	01d2      	lsls	r2, r2, #7
    fbce:	440a      	add	r2, r1
    fbd0:	4413      	add	r3, r2
    fbd2:	3340      	adds	r3, #64	; 0x40
    fbd4:	7bfa      	ldrb	r2, [r7, #15]
    fbd6:	701a      	strb	r2, [r3, #0]
}
    fbd8:	bf00      	nop
    fbda:	3714      	adds	r7, #20
    fbdc:	46bd      	mov	sp, r7
    fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbe2:	4770      	bx	lr

0000fbe4 <hri_port_write_WRCONFIG_reg>:
{
    fbe4:	b480      	push	{r7}
    fbe6:	b085      	sub	sp, #20
    fbe8:	af00      	add	r7, sp, #0
    fbea:	60f8      	str	r0, [r7, #12]
    fbec:	460b      	mov	r3, r1
    fbee:	607a      	str	r2, [r7, #4]
    fbf0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    fbf2:	7afb      	ldrb	r3, [r7, #11]
    fbf4:	68fa      	ldr	r2, [r7, #12]
    fbf6:	01db      	lsls	r3, r3, #7
    fbf8:	4413      	add	r3, r2
    fbfa:	3328      	adds	r3, #40	; 0x28
    fbfc:	687a      	ldr	r2, [r7, #4]
    fbfe:	601a      	str	r2, [r3, #0]
}
    fc00:	bf00      	nop
    fc02:	3714      	adds	r7, #20
    fc04:	46bd      	mov	sp, r7
    fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc0a:	4770      	bx	lr

0000fc0c <_gpio_set_direction>:
{
    fc0c:	b580      	push	{r7, lr}
    fc0e:	b082      	sub	sp, #8
    fc10:	af00      	add	r7, sp, #0
    fc12:	4603      	mov	r3, r0
    fc14:	6039      	str	r1, [r7, #0]
    fc16:	71fb      	strb	r3, [r7, #7]
    fc18:	4613      	mov	r3, r2
    fc1a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    fc1c:	79bb      	ldrb	r3, [r7, #6]
    fc1e:	2b01      	cmp	r3, #1
    fc20:	d01c      	beq.n	fc5c <_gpio_set_direction+0x50>
    fc22:	2b02      	cmp	r3, #2
    fc24:	d037      	beq.n	fc96 <_gpio_set_direction+0x8a>
    fc26:	2b00      	cmp	r3, #0
    fc28:	d14e      	bne.n	fcc8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fc2a:	79fb      	ldrb	r3, [r7, #7]
    fc2c:	683a      	ldr	r2, [r7, #0]
    fc2e:	4619      	mov	r1, r3
    fc30:	482a      	ldr	r0, [pc, #168]	; (fcdc <_gpio_set_direction+0xd0>)
    fc32:	4b2b      	ldr	r3, [pc, #172]	; (fce0 <_gpio_set_direction+0xd4>)
    fc34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fc36:	683b      	ldr	r3, [r7, #0]
    fc38:	b29b      	uxth	r3, r3
    fc3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fc3e:	79fb      	ldrb	r3, [r7, #7]
    fc40:	4619      	mov	r1, r3
    fc42:	4826      	ldr	r0, [pc, #152]	; (fcdc <_gpio_set_direction+0xd0>)
    fc44:	4b27      	ldr	r3, [pc, #156]	; (fce4 <_gpio_set_direction+0xd8>)
    fc46:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fc48:	683b      	ldr	r3, [r7, #0]
    fc4a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fc4c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    fc50:	79fb      	ldrb	r3, [r7, #7]
    fc52:	4619      	mov	r1, r3
    fc54:	4821      	ldr	r0, [pc, #132]	; (fcdc <_gpio_set_direction+0xd0>)
    fc56:	4b23      	ldr	r3, [pc, #140]	; (fce4 <_gpio_set_direction+0xd8>)
    fc58:	4798      	blx	r3
		break;
    fc5a:	e03a      	b.n	fcd2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fc5c:	79fb      	ldrb	r3, [r7, #7]
    fc5e:	683a      	ldr	r2, [r7, #0]
    fc60:	4619      	mov	r1, r3
    fc62:	481e      	ldr	r0, [pc, #120]	; (fcdc <_gpio_set_direction+0xd0>)
    fc64:	4b1e      	ldr	r3, [pc, #120]	; (fce0 <_gpio_set_direction+0xd4>)
    fc66:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    fc68:	683b      	ldr	r3, [r7, #0]
    fc6a:	b29b      	uxth	r3, r3
    fc6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    fc70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fc74:	79f9      	ldrb	r1, [r7, #7]
    fc76:	461a      	mov	r2, r3
    fc78:	4818      	ldr	r0, [pc, #96]	; (fcdc <_gpio_set_direction+0xd0>)
    fc7a:	4b1a      	ldr	r3, [pc, #104]	; (fce4 <_gpio_set_direction+0xd8>)
    fc7c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    fc7e:	683b      	ldr	r3, [r7, #0]
    fc80:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    fc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    fc86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fc8a:	79f9      	ldrb	r1, [r7, #7]
    fc8c:	461a      	mov	r2, r3
    fc8e:	4813      	ldr	r0, [pc, #76]	; (fcdc <_gpio_set_direction+0xd0>)
    fc90:	4b14      	ldr	r3, [pc, #80]	; (fce4 <_gpio_set_direction+0xd8>)
    fc92:	4798      	blx	r3
		break;
    fc94:	e01d      	b.n	fcd2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    fc96:	79fb      	ldrb	r3, [r7, #7]
    fc98:	683a      	ldr	r2, [r7, #0]
    fc9a:	4619      	mov	r1, r3
    fc9c:	480f      	ldr	r0, [pc, #60]	; (fcdc <_gpio_set_direction+0xd0>)
    fc9e:	4b12      	ldr	r3, [pc, #72]	; (fce8 <_gpio_set_direction+0xdc>)
    fca0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fca2:	683b      	ldr	r3, [r7, #0]
    fca4:	b29b      	uxth	r3, r3
    fca6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fcaa:	79fb      	ldrb	r3, [r7, #7]
    fcac:	4619      	mov	r1, r3
    fcae:	480b      	ldr	r0, [pc, #44]	; (fcdc <_gpio_set_direction+0xd0>)
    fcb0:	4b0c      	ldr	r3, [pc, #48]	; (fce4 <_gpio_set_direction+0xd8>)
    fcb2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fcb4:	683b      	ldr	r3, [r7, #0]
    fcb6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fcb8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    fcbc:	79fb      	ldrb	r3, [r7, #7]
    fcbe:	4619      	mov	r1, r3
    fcc0:	4806      	ldr	r0, [pc, #24]	; (fcdc <_gpio_set_direction+0xd0>)
    fcc2:	4b08      	ldr	r3, [pc, #32]	; (fce4 <_gpio_set_direction+0xd8>)
    fcc4:	4798      	blx	r3
		break;
    fcc6:	e004      	b.n	fcd2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    fcc8:	2246      	movs	r2, #70	; 0x46
    fcca:	4908      	ldr	r1, [pc, #32]	; (fcec <_gpio_set_direction+0xe0>)
    fccc:	2000      	movs	r0, #0
    fcce:	4b08      	ldr	r3, [pc, #32]	; (fcf0 <_gpio_set_direction+0xe4>)
    fcd0:	4798      	blx	r3
}
    fcd2:	bf00      	nop
    fcd4:	3708      	adds	r7, #8
    fcd6:	46bd      	mov	sp, r7
    fcd8:	bd80      	pop	{r7, pc}
    fcda:	bf00      	nop
    fcdc:	41008000 	.word	0x41008000
    fce0:	0000fa55 	.word	0x0000fa55
    fce4:	0000fbe5 	.word	0x0000fbe5
    fce8:	0000fa2d 	.word	0x0000fa2d
    fcec:	0001cefc 	.word	0x0001cefc
    fcf0:	00007b0d 	.word	0x00007b0d

0000fcf4 <_gpio_set_level>:
{
    fcf4:	b580      	push	{r7, lr}
    fcf6:	b082      	sub	sp, #8
    fcf8:	af00      	add	r7, sp, #0
    fcfa:	4603      	mov	r3, r0
    fcfc:	6039      	str	r1, [r7, #0]
    fcfe:	71fb      	strb	r3, [r7, #7]
    fd00:	4613      	mov	r3, r2
    fd02:	71bb      	strb	r3, [r7, #6]
	if (level) {
    fd04:	79bb      	ldrb	r3, [r7, #6]
    fd06:	2b00      	cmp	r3, #0
    fd08:	d006      	beq.n	fd18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    fd0a:	79fb      	ldrb	r3, [r7, #7]
    fd0c:	683a      	ldr	r2, [r7, #0]
    fd0e:	4619      	mov	r1, r3
    fd10:	4806      	ldr	r0, [pc, #24]	; (fd2c <_gpio_set_level+0x38>)
    fd12:	4b07      	ldr	r3, [pc, #28]	; (fd30 <_gpio_set_level+0x3c>)
    fd14:	4798      	blx	r3
}
    fd16:	e005      	b.n	fd24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    fd18:	79fb      	ldrb	r3, [r7, #7]
    fd1a:	683a      	ldr	r2, [r7, #0]
    fd1c:	4619      	mov	r1, r3
    fd1e:	4803      	ldr	r0, [pc, #12]	; (fd2c <_gpio_set_level+0x38>)
    fd20:	4b04      	ldr	r3, [pc, #16]	; (fd34 <_gpio_set_level+0x40>)
    fd22:	4798      	blx	r3
}
    fd24:	bf00      	nop
    fd26:	3708      	adds	r7, #8
    fd28:	46bd      	mov	sp, r7
    fd2a:	bd80      	pop	{r7, pc}
    fd2c:	41008000 	.word	0x41008000
    fd30:	0000fa7d 	.word	0x0000fa7d
    fd34:	0000faa5 	.word	0x0000faa5

0000fd38 <_gpio_set_pin_function>:
{
    fd38:	b590      	push	{r4, r7, lr}
    fd3a:	b085      	sub	sp, #20
    fd3c:	af00      	add	r7, sp, #0
    fd3e:	6078      	str	r0, [r7, #4]
    fd40:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    fd42:	687b      	ldr	r3, [r7, #4]
    fd44:	095b      	lsrs	r3, r3, #5
    fd46:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    fd48:	687b      	ldr	r3, [r7, #4]
    fd4a:	b2db      	uxtb	r3, r3
    fd4c:	f003 031f 	and.w	r3, r3, #31
    fd50:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    fd52:	683b      	ldr	r3, [r7, #0]
    fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
    fd58:	d106      	bne.n	fd68 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    fd5a:	7bba      	ldrb	r2, [r7, #14]
    fd5c:	7bf9      	ldrb	r1, [r7, #15]
    fd5e:	2300      	movs	r3, #0
    fd60:	4812      	ldr	r0, [pc, #72]	; (fdac <_gpio_set_pin_function+0x74>)
    fd62:	4c13      	ldr	r4, [pc, #76]	; (fdb0 <_gpio_set_pin_function+0x78>)
    fd64:	47a0      	blx	r4
}
    fd66:	e01d      	b.n	fda4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    fd68:	7bba      	ldrb	r2, [r7, #14]
    fd6a:	7bf9      	ldrb	r1, [r7, #15]
    fd6c:	2301      	movs	r3, #1
    fd6e:	480f      	ldr	r0, [pc, #60]	; (fdac <_gpio_set_pin_function+0x74>)
    fd70:	4c0f      	ldr	r4, [pc, #60]	; (fdb0 <_gpio_set_pin_function+0x78>)
    fd72:	47a0      	blx	r4
		if (pin & 1) {
    fd74:	7bbb      	ldrb	r3, [r7, #14]
    fd76:	f003 0301 	and.w	r3, r3, #1
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d009      	beq.n	fd92 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    fd7e:	7bbb      	ldrb	r3, [r7, #14]
    fd80:	085b      	lsrs	r3, r3, #1
    fd82:	b2da      	uxtb	r2, r3
    fd84:	683b      	ldr	r3, [r7, #0]
    fd86:	b2db      	uxtb	r3, r3
    fd88:	7bf9      	ldrb	r1, [r7, #15]
    fd8a:	4808      	ldr	r0, [pc, #32]	; (fdac <_gpio_set_pin_function+0x74>)
    fd8c:	4c09      	ldr	r4, [pc, #36]	; (fdb4 <_gpio_set_pin_function+0x7c>)
    fd8e:	47a0      	blx	r4
}
    fd90:	e008      	b.n	fda4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    fd92:	7bbb      	ldrb	r3, [r7, #14]
    fd94:	085b      	lsrs	r3, r3, #1
    fd96:	b2da      	uxtb	r2, r3
    fd98:	683b      	ldr	r3, [r7, #0]
    fd9a:	b2db      	uxtb	r3, r3
    fd9c:	7bf9      	ldrb	r1, [r7, #15]
    fd9e:	4803      	ldr	r0, [pc, #12]	; (fdac <_gpio_set_pin_function+0x74>)
    fda0:	4c05      	ldr	r4, [pc, #20]	; (fdb8 <_gpio_set_pin_function+0x80>)
    fda2:	47a0      	blx	r4
}
    fda4:	bf00      	nop
    fda6:	3714      	adds	r7, #20
    fda8:	46bd      	mov	sp, r7
    fdaa:	bd90      	pop	{r4, r7, pc}
    fdac:	41008000 	.word	0x41008000
    fdb0:	0000fb8b 	.word	0x0000fb8b
    fdb4:	0000fb2d 	.word	0x0000fb2d
    fdb8:	0000facd 	.word	0x0000facd

0000fdbc <gpio_set_pin_function>:
{
    fdbc:	b580      	push	{r7, lr}
    fdbe:	b082      	sub	sp, #8
    fdc0:	af00      	add	r7, sp, #0
    fdc2:	6078      	str	r0, [r7, #4]
    fdc4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    fdc6:	6839      	ldr	r1, [r7, #0]
    fdc8:	6878      	ldr	r0, [r7, #4]
    fdca:	4b03      	ldr	r3, [pc, #12]	; (fdd8 <gpio_set_pin_function+0x1c>)
    fdcc:	4798      	blx	r3
}
    fdce:	bf00      	nop
    fdd0:	3708      	adds	r7, #8
    fdd2:	46bd      	mov	sp, r7
    fdd4:	bd80      	pop	{r7, pc}
    fdd6:	bf00      	nop
    fdd8:	0000fd39 	.word	0x0000fd39

0000fddc <gpio_set_pin_direction>:
{
    fddc:	b580      	push	{r7, lr}
    fdde:	b082      	sub	sp, #8
    fde0:	af00      	add	r7, sp, #0
    fde2:	4603      	mov	r3, r0
    fde4:	460a      	mov	r2, r1
    fde6:	71fb      	strb	r3, [r7, #7]
    fde8:	4613      	mov	r3, r2
    fdea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    fdec:	79fb      	ldrb	r3, [r7, #7]
    fdee:	095b      	lsrs	r3, r3, #5
    fdf0:	b2d8      	uxtb	r0, r3
    fdf2:	79fb      	ldrb	r3, [r7, #7]
    fdf4:	f003 031f 	and.w	r3, r3, #31
    fdf8:	2201      	movs	r2, #1
    fdfa:	fa02 f303 	lsl.w	r3, r2, r3
    fdfe:	79ba      	ldrb	r2, [r7, #6]
    fe00:	4619      	mov	r1, r3
    fe02:	4b03      	ldr	r3, [pc, #12]	; (fe10 <gpio_set_pin_direction+0x34>)
    fe04:	4798      	blx	r3
}
    fe06:	bf00      	nop
    fe08:	3708      	adds	r7, #8
    fe0a:	46bd      	mov	sp, r7
    fe0c:	bd80      	pop	{r7, pc}
    fe0e:	bf00      	nop
    fe10:	0000fc0d 	.word	0x0000fc0d

0000fe14 <gpio_set_pin_level>:
{
    fe14:	b580      	push	{r7, lr}
    fe16:	b082      	sub	sp, #8
    fe18:	af00      	add	r7, sp, #0
    fe1a:	4603      	mov	r3, r0
    fe1c:	460a      	mov	r2, r1
    fe1e:	71fb      	strb	r3, [r7, #7]
    fe20:	4613      	mov	r3, r2
    fe22:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    fe24:	79fb      	ldrb	r3, [r7, #7]
    fe26:	095b      	lsrs	r3, r3, #5
    fe28:	b2d8      	uxtb	r0, r3
    fe2a:	79fb      	ldrb	r3, [r7, #7]
    fe2c:	f003 031f 	and.w	r3, r3, #31
    fe30:	2201      	movs	r2, #1
    fe32:	fa02 f303 	lsl.w	r3, r2, r3
    fe36:	79ba      	ldrb	r2, [r7, #6]
    fe38:	4619      	mov	r1, r3
    fe3a:	4b03      	ldr	r3, [pc, #12]	; (fe48 <gpio_set_pin_level+0x34>)
    fe3c:	4798      	blx	r3
}
    fe3e:	bf00      	nop
    fe40:	3708      	adds	r7, #8
    fe42:	46bd      	mov	sp, r7
    fe44:	bd80      	pop	{r7, pc}
    fe46:	bf00      	nop
    fe48:	0000fcf5 	.word	0x0000fcf5

0000fe4c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    fe4c:	b580      	push	{r7, lr}
    fe4e:	b082      	sub	sp, #8
    fe50:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    fe52:	2100      	movs	r1, #0
    fe54:	2008      	movs	r0, #8
    fe56:	4b24      	ldr	r3, [pc, #144]	; (fee8 <QSPI_N25Q256_exit_xip+0x9c>)
    fe58:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    fe5a:	2100      	movs	r1, #0
    fe5c:	202b      	movs	r0, #43	; 0x2b
    fe5e:	4b22      	ldr	r3, [pc, #136]	; (fee8 <QSPI_N25Q256_exit_xip+0x9c>)
    fe60:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    fe62:	2100      	movs	r1, #0
    fe64:	202a      	movs	r0, #42	; 0x2a
    fe66:	4b20      	ldr	r3, [pc, #128]	; (fee8 <QSPI_N25Q256_exit_xip+0x9c>)
    fe68:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    fe6a:	2102      	movs	r1, #2
    fe6c:	2008      	movs	r0, #8
    fe6e:	4b1f      	ldr	r3, [pc, #124]	; (feec <QSPI_N25Q256_exit_xip+0xa0>)
    fe70:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    fe72:	2102      	movs	r1, #2
    fe74:	202b      	movs	r0, #43	; 0x2b
    fe76:	4b1d      	ldr	r3, [pc, #116]	; (feec <QSPI_N25Q256_exit_xip+0xa0>)
    fe78:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    fe7a:	2102      	movs	r1, #2
    fe7c:	202a      	movs	r0, #42	; 0x2a
    fe7e:	4b1b      	ldr	r3, [pc, #108]	; (feec <QSPI_N25Q256_exit_xip+0xa0>)
    fe80:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    fe82:	2101      	movs	r1, #1
    fe84:	2008      	movs	r0, #8
    fe86:	4b1a      	ldr	r3, [pc, #104]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    fe88:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    fe8a:	2100      	movs	r1, #0
    fe8c:	202b      	movs	r0, #43	; 0x2b
    fe8e:	4b18      	ldr	r3, [pc, #96]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    fe90:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    fe92:	2100      	movs	r1, #0
    fe94:	202a      	movs	r0, #42	; 0x2a
    fe96:	4b16      	ldr	r3, [pc, #88]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    fe98:	4798      	blx	r3

	delay_us(1);
    fe9a:	2001      	movs	r0, #1
    fe9c:	4b15      	ldr	r3, [pc, #84]	; (fef4 <QSPI_N25Q256_exit_xip+0xa8>)
    fe9e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    fea0:	2300      	movs	r3, #0
    fea2:	607b      	str	r3, [r7, #4]
    fea4:	e010      	b.n	fec8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    fea6:	2101      	movs	r1, #1
    fea8:	202a      	movs	r0, #42	; 0x2a
    feaa:	4b11      	ldr	r3, [pc, #68]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    feac:	4798      	blx	r3
		delay_us(1);
    feae:	2001      	movs	r0, #1
    feb0:	4b10      	ldr	r3, [pc, #64]	; (fef4 <QSPI_N25Q256_exit_xip+0xa8>)
    feb2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    feb4:	2100      	movs	r1, #0
    feb6:	202a      	movs	r0, #42	; 0x2a
    feb8:	4b0d      	ldr	r3, [pc, #52]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    feba:	4798      	blx	r3
		delay_us(1);
    febc:	2001      	movs	r0, #1
    febe:	4b0d      	ldr	r3, [pc, #52]	; (fef4 <QSPI_N25Q256_exit_xip+0xa8>)
    fec0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    fec2:	687b      	ldr	r3, [r7, #4]
    fec4:	3301      	adds	r3, #1
    fec6:	607b      	str	r3, [r7, #4]
    fec8:	687b      	ldr	r3, [r7, #4]
    feca:	2b06      	cmp	r3, #6
    fecc:	ddeb      	ble.n	fea6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    fece:	2101      	movs	r1, #1
    fed0:	202b      	movs	r0, #43	; 0x2b
    fed2:	4b07      	ldr	r3, [pc, #28]	; (fef0 <QSPI_N25Q256_exit_xip+0xa4>)
    fed4:	4798      	blx	r3
	delay_us(1);
    fed6:	2001      	movs	r0, #1
    fed8:	4b06      	ldr	r3, [pc, #24]	; (fef4 <QSPI_N25Q256_exit_xip+0xa8>)
    feda:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    fedc:	4b06      	ldr	r3, [pc, #24]	; (fef8 <QSPI_N25Q256_exit_xip+0xac>)
    fede:	4798      	blx	r3
}
    fee0:	bf00      	nop
    fee2:	3708      	adds	r7, #8
    fee4:	46bd      	mov	sp, r7
    fee6:	bd80      	pop	{r7, pc}
    fee8:	0000fdbd 	.word	0x0000fdbd
    feec:	0000fddd 	.word	0x0000fddd
    fef0:	0000fe15 	.word	0x0000fe15
    fef4:	00006449 	.word	0x00006449
    fef8:	000054fd 	.word	0x000054fd

0000fefc <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    fefc:	b598      	push	{r3, r4, r7, lr}
    fefe:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    ff00:	4806      	ldr	r0, [pc, #24]	; (ff1c <spi_nor_flash_init+0x20>)
    ff02:	4b07      	ldr	r3, [pc, #28]	; (ff20 <spi_nor_flash_init+0x24>)
    ff04:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    ff06:	2300      	movs	r3, #0
    ff08:	4a06      	ldr	r2, [pc, #24]	; (ff24 <spi_nor_flash_init+0x28>)
    ff0a:	4904      	ldr	r1, [pc, #16]	; (ff1c <spi_nor_flash_init+0x20>)
    ff0c:	4806      	ldr	r0, [pc, #24]	; (ff28 <spi_nor_flash_init+0x2c>)
    ff0e:	4c07      	ldr	r4, [pc, #28]	; (ff2c <spi_nor_flash_init+0x30>)
    ff10:	47a0      	blx	r4
    ff12:	4602      	mov	r2, r0
    ff14:	4b06      	ldr	r3, [pc, #24]	; (ff30 <spi_nor_flash_init+0x34>)
    ff16:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    ff18:	bf00      	nop
    ff1a:	bd98      	pop	{r3, r4, r7, pc}
    ff1c:	2000d768 	.word	0x2000d768
    ff20:	000069b5 	.word	0x000069b5
    ff24:	0000fe4d 	.word	0x0000fe4d
    ff28:	20001cf0 	.word	0x20001cf0
    ff2c:	00010369 	.word	0x00010369
    ff30:	2000d948 	.word	0x2000d948

0000ff34 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ff34:	b580      	push	{r7, lr}
    ff36:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ff38:	4805      	ldr	r0, [pc, #20]	; (ff50 <cdc_device_acm_init+0x1c>)
    ff3a:	4b06      	ldr	r3, [pc, #24]	; (ff54 <cdc_device_acm_init+0x20>)
    ff3c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ff3e:	4b06      	ldr	r3, [pc, #24]	; (ff58 <cdc_device_acm_init+0x24>)
    ff40:	4798      	blx	r3

	usbdc_start(single_desc);
    ff42:	4806      	ldr	r0, [pc, #24]	; (ff5c <cdc_device_acm_init+0x28>)
    ff44:	4b06      	ldr	r3, [pc, #24]	; (ff60 <cdc_device_acm_init+0x2c>)
    ff46:	4798      	blx	r3
	usbdc_attach();
    ff48:	4b06      	ldr	r3, [pc, #24]	; (ff64 <cdc_device_acm_init+0x30>)
    ff4a:	4798      	blx	r3
}
    ff4c:	bf00      	nop
    ff4e:	bd80      	pop	{r7, pc}
    ff50:	20001d40 	.word	0x20001d40
    ff54:	00011a91 	.word	0x00011a91
    ff58:	00010d09 	.word	0x00010d09
    ff5c:	200001d4 	.word	0x200001d4
    ff60:	00011b2d 	.word	0x00011b2d
    ff64:	00011b7d 	.word	0x00011b7d

0000ff68 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ff68:	b580      	push	{r7, lr}
    ff6a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ff6c:	4b01      	ldr	r3, [pc, #4]	; (ff74 <usb_init+0xc>)
    ff6e:	4798      	blx	r3
}
    ff70:	bf00      	nop
    ff72:	bd80      	pop	{r7, pc}
    ff74:	0000ff35 	.word	0x0000ff35

0000ff78 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    ff78:	b480      	push	{r7}
    ff7a:	b085      	sub	sp, #20
    ff7c:	af00      	add	r7, sp, #0
    ff7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ff80:	f3ef 8310 	mrs	r3, PRIMASK
    ff84:	60fb      	str	r3, [r7, #12]
  return(result);
    ff86:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    ff88:	687b      	ldr	r3, [r7, #4]
    ff8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    ff8c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    ff8e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    ff92:	bf00      	nop
    ff94:	3714      	adds	r7, #20
    ff96:	46bd      	mov	sp, r7
    ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff9c:	4770      	bx	lr

0000ff9e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    ff9e:	b480      	push	{r7}
    ffa0:	b085      	sub	sp, #20
    ffa2:	af00      	add	r7, sp, #0
    ffa4:	6078      	str	r0, [r7, #4]
    ffa6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ffaa:	687b      	ldr	r3, [r7, #4]
    ffac:	681b      	ldr	r3, [r3, #0]
    ffae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ffb0:	68fb      	ldr	r3, [r7, #12]
    ffb2:	f383 8810 	msr	PRIMASK, r3
}
    ffb6:	bf00      	nop
    ffb8:	3714      	adds	r7, #20
    ffba:	46bd      	mov	sp, r7
    ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffc0:	4770      	bx	lr
	...

0000ffc4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b08c      	sub	sp, #48	; 0x30
    ffc8:	af00      	add	r7, sp, #0
    ffca:	6078      	str	r0, [r7, #4]
    ffcc:	460b      	mov	r3, r1
    ffce:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ffd0:	687b      	ldr	r3, [r7, #4]
    ffd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ffd4:	687b      	ldr	r3, [r7, #4]
    ffd6:	681b      	ldr	r3, [r3, #0]
    ffd8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    ffda:	f107 030c 	add.w	r3, r7, #12
    ffde:	2200      	movs	r2, #0
    ffe0:	601a      	str	r2, [r3, #0]
    ffe2:	605a      	str	r2, [r3, #4]
    ffe4:	609a      	str	r2, [r3, #8]
    ffe6:	60da      	str	r2, [r3, #12]
    ffe8:	611a      	str	r2, [r3, #16]
    ffea:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ffee:	7b1b      	ldrb	r3, [r3, #12]
    fff0:	2b00      	cmp	r3, #0
    fff2:	d001      	beq.n	fff8 <n25q256a_xip_confirm+0x34>
    fff4:	2206      	movs	r2, #6
    fff6:	e000      	b.n	fffa <n25q256a_xip_confirm+0x36>
    fff8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    fffa:	7b3b      	ldrb	r3, [r7, #12]
    fffc:	f362 0302 	bfi	r3, r2, #0, #3
   10000:	733b      	strb	r3, [r7, #12]
   10002:	7b3b      	ldrb	r3, [r7, #12]
   10004:	f043 0310 	orr.w	r3, r3, #16
   10008:	733b      	strb	r3, [r7, #12]
   1000a:	7b3b      	ldrb	r3, [r7, #12]
   1000c:	f043 0320 	orr.w	r3, r3, #32
   10010:	733b      	strb	r3, [r7, #12]
   10012:	7b3b      	ldrb	r3, [r7, #12]
   10014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10018:	733b      	strb	r3, [r7, #12]
   1001a:	7b3b      	ldrb	r3, [r7, #12]
   1001c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10020:	733b      	strb	r3, [r7, #12]
   10022:	7b7b      	ldrb	r3, [r7, #13]
   10024:	f043 0303 	orr.w	r3, r3, #3
   10028:	737b      	strb	r3, [r7, #13]
   1002a:	7b7b      	ldrb	r3, [r7, #13]
   1002c:	2201      	movs	r2, #1
   1002e:	f362 1305 	bfi	r3, r2, #4, #2
   10032:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10036:	7b1b      	ldrb	r3, [r3, #12]
   10038:	2b00      	cmp	r3, #0
   1003a:	d001      	beq.n	10040 <STACK_SIZE+0x40>
   1003c:	2208      	movs	r2, #8
   1003e:	e000      	b.n	10042 <STACK_SIZE+0x42>
   10040:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10042:	7bbb      	ldrb	r3, [r7, #14]
   10044:	f362 0304 	bfi	r3, r2, #0, #5
   10048:	73bb      	strb	r3, [r7, #14]
   1004a:	230b      	movs	r3, #11
   1004c:	743b      	strb	r3, [r7, #16]
   1004e:	78fb      	ldrb	r3, [r7, #3]
   10050:	2b00      	cmp	r3, #0
   10052:	d001      	beq.n	10058 <STACK_SIZE+0x58>
   10054:	2300      	movs	r3, #0
   10056:	e000      	b.n	1005a <STACK_SIZE+0x5a>
   10058:	23ff      	movs	r3, #255	; 0xff
   1005a:	747b      	strb	r3, [r7, #17]
   1005c:	2301      	movs	r3, #1
   1005e:	61bb      	str	r3, [r7, #24]
   10060:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10064:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   10066:	f107 030c 	add.w	r3, r7, #12
   1006a:	4619      	mov	r1, r3
   1006c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1006e:	4b07      	ldr	r3, [pc, #28]	; (1008c <STACK_SIZE+0x8c>)
   10070:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10072:	78fb      	ldrb	r3, [r7, #3]
   10074:	2b00      	cmp	r3, #0
   10076:	d001      	beq.n	1007c <STACK_SIZE+0x7c>
   10078:	2202      	movs	r2, #2
   1007a:	e000      	b.n	1007e <STACK_SIZE+0x7e>
   1007c:	2201      	movs	r2, #1
   1007e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10080:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10082:	2300      	movs	r3, #0
}
   10084:	4618      	mov	r0, r3
   10086:	3730      	adds	r7, #48	; 0x30
   10088:	46bd      	mov	sp, r7
   1008a:	bd80      	pop	{r7, pc}
   1008c:	00006a2d 	.word	0x00006a2d

00010090 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10090:	b580      	push	{r7, lr}
   10092:	b08c      	sub	sp, #48	; 0x30
   10094:	af00      	add	r7, sp, #0
   10096:	6078      	str	r0, [r7, #4]
   10098:	460b      	mov	r3, r1
   1009a:	70fb      	strb	r3, [r7, #3]
   1009c:	4613      	mov	r3, r2
   1009e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   100a0:	2300      	movs	r3, #0
   100a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   100a4:	687b      	ldr	r3, [r7, #4]
   100a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   100a8:	687b      	ldr	r3, [r7, #4]
   100aa:	681b      	ldr	r3, [r3, #0]
   100ac:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   100ae:	f107 030c 	add.w	r3, r7, #12
   100b2:	2200      	movs	r2, #0
   100b4:	601a      	str	r2, [r3, #0]
   100b6:	605a      	str	r2, [r3, #4]
   100b8:	609a      	str	r2, [r3, #8]
   100ba:	60da      	str	r2, [r3, #12]
   100bc:	611a      	str	r2, [r3, #16]
   100be:	615a      	str	r2, [r3, #20]
   100c0:	78fb      	ldrb	r3, [r7, #3]
   100c2:	f003 0307 	and.w	r3, r3, #7
   100c6:	b2da      	uxtb	r2, r3
   100c8:	7b3b      	ldrb	r3, [r7, #12]
   100ca:	f362 0302 	bfi	r3, r2, #0, #3
   100ce:	733b      	strb	r3, [r7, #12]
   100d0:	7b3b      	ldrb	r3, [r7, #12]
   100d2:	f043 0310 	orr.w	r3, r3, #16
   100d6:	733b      	strb	r3, [r7, #12]
   100d8:	7b3b      	ldrb	r3, [r7, #12]
   100da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   100de:	733b      	strb	r3, [r7, #12]
   100e0:	78bb      	ldrb	r3, [r7, #2]
   100e2:	743b      	strb	r3, [r7, #16]
   100e4:	2301      	movs	r3, #1
   100e6:	61bb      	str	r3, [r7, #24]
   100e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   100ec:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   100ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   100f0:	7b5b      	ldrb	r3, [r3, #13]
   100f2:	2b00      	cmp	r3, #0
   100f4:	d003      	beq.n	100fe <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   100f6:	2100      	movs	r1, #0
   100f8:	6878      	ldr	r0, [r7, #4]
   100fa:	4b0a      	ldr	r3, [pc, #40]	; (10124 <n25q256a_read_reg+0x94>)
   100fc:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   100fe:	f107 030c 	add.w	r3, r7, #12
   10102:	4619      	mov	r1, r3
   10104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10106:	4b08      	ldr	r3, [pc, #32]	; (10128 <n25q256a_read_reg+0x98>)
   10108:	4798      	blx	r3
	if (n25q->xip_mode) {
   1010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1010c:	7b5b      	ldrb	r3, [r3, #13]
   1010e:	2b00      	cmp	r3, #0
   10110:	d003      	beq.n	1011a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10112:	2101      	movs	r1, #1
   10114:	6878      	ldr	r0, [r7, #4]
   10116:	4b03      	ldr	r3, [pc, #12]	; (10124 <n25q256a_read_reg+0x94>)
   10118:	4798      	blx	r3
	}
	return status;
   1011a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1011c:	4618      	mov	r0, r3
   1011e:	3730      	adds	r7, #48	; 0x30
   10120:	46bd      	mov	sp, r7
   10122:	bd80      	pop	{r7, pc}
   10124:	0000ffc5 	.word	0x0000ffc5
   10128:	00006a2d 	.word	0x00006a2d

0001012c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   1012c:	b580      	push	{r7, lr}
   1012e:	b08c      	sub	sp, #48	; 0x30
   10130:	af00      	add	r7, sp, #0
   10132:	60f8      	str	r0, [r7, #12]
   10134:	607b      	str	r3, [r7, #4]
   10136:	460b      	mov	r3, r1
   10138:	72fb      	strb	r3, [r7, #11]
   1013a:	4613      	mov	r3, r2
   1013c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1013e:	68fb      	ldr	r3, [r7, #12]
   10140:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10142:	68fb      	ldr	r3, [r7, #12]
   10144:	681b      	ldr	r3, [r3, #0]
   10146:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10148:	f107 0310 	add.w	r3, r7, #16
   1014c:	2200      	movs	r2, #0
   1014e:	601a      	str	r2, [r3, #0]
   10150:	605a      	str	r2, [r3, #4]
   10152:	609a      	str	r2, [r3, #8]
   10154:	60da      	str	r2, [r3, #12]
   10156:	611a      	str	r2, [r3, #16]
   10158:	615a      	str	r2, [r3, #20]
   1015a:	7afb      	ldrb	r3, [r7, #11]
   1015c:	f003 0307 	and.w	r3, r3, #7
   10160:	b2da      	uxtb	r2, r3
   10162:	7c3b      	ldrb	r3, [r7, #16]
   10164:	f362 0302 	bfi	r3, r2, #0, #3
   10168:	743b      	strb	r3, [r7, #16]
   1016a:	7c3b      	ldrb	r3, [r7, #16]
   1016c:	f043 0310 	orr.w	r3, r3, #16
   10170:	743b      	strb	r3, [r7, #16]
   10172:	7c3b      	ldrb	r3, [r7, #16]
   10174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10178:	743b      	strb	r3, [r7, #16]
   1017a:	7c7b      	ldrb	r3, [r7, #17]
   1017c:	2202      	movs	r2, #2
   1017e:	f362 1305 	bfi	r3, r2, #4, #2
   10182:	747b      	strb	r3, [r7, #17]
   10184:	7abb      	ldrb	r3, [r7, #10]
   10186:	753b      	strb	r3, [r7, #20]
   10188:	2301      	movs	r3, #1
   1018a:	61fb      	str	r3, [r7, #28]
   1018c:	1d3b      	adds	r3, r7, #4
   1018e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10192:	7b5b      	ldrb	r3, [r3, #13]
   10194:	2b00      	cmp	r3, #0
   10196:	d003      	beq.n	101a0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   10198:	2100      	movs	r1, #0
   1019a:	68f8      	ldr	r0, [r7, #12]
   1019c:	4b09      	ldr	r3, [pc, #36]	; (101c4 <n25q256a_write_reg+0x98>)
   1019e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   101a0:	f107 0310 	add.w	r3, r7, #16
   101a4:	4619      	mov	r1, r3
   101a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   101a8:	4b07      	ldr	r3, [pc, #28]	; (101c8 <n25q256a_write_reg+0x9c>)
   101aa:	4798      	blx	r3
	if (n25q->xip_mode) {
   101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   101ae:	7b5b      	ldrb	r3, [r3, #13]
   101b0:	2b00      	cmp	r3, #0
   101b2:	d003      	beq.n	101bc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   101b4:	2101      	movs	r1, #1
   101b6:	68f8      	ldr	r0, [r7, #12]
   101b8:	4b02      	ldr	r3, [pc, #8]	; (101c4 <n25q256a_write_reg+0x98>)
   101ba:	4798      	blx	r3
	}
}
   101bc:	bf00      	nop
   101be:	3730      	adds	r7, #48	; 0x30
   101c0:	46bd      	mov	sp, r7
   101c2:	bd80      	pop	{r7, pc}
   101c4:	0000ffc5 	.word	0x0000ffc5
   101c8:	00006a2d 	.word	0x00006a2d

000101cc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   101cc:	b580      	push	{r7, lr}
   101ce:	b090      	sub	sp, #64	; 0x40
   101d0:	af00      	add	r7, sp, #0
   101d2:	6078      	str	r0, [r7, #4]
   101d4:	460b      	mov	r3, r1
   101d6:	70fb      	strb	r3, [r7, #3]
   101d8:	4613      	mov	r3, r2
   101da:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   101dc:	687b      	ldr	r3, [r7, #4]
   101de:	681b      	ldr	r3, [r3, #0]
   101e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   101e2:	78bb      	ldrb	r3, [r7, #2]
   101e4:	2b00      	cmp	r3, #0
   101e6:	d001      	beq.n	101ec <n25q256a_write_enable+0x20>
   101e8:	2306      	movs	r3, #6
   101ea:	e000      	b.n	101ee <n25q256a_write_enable+0x22>
   101ec:	2304      	movs	r3, #4
   101ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   101f2:	f107 0320 	add.w	r3, r7, #32
   101f6:	2200      	movs	r2, #0
   101f8:	601a      	str	r2, [r3, #0]
   101fa:	605a      	str	r2, [r3, #4]
   101fc:	609a      	str	r2, [r3, #8]
   101fe:	60da      	str	r2, [r3, #12]
   10200:	611a      	str	r2, [r3, #16]
   10202:	615a      	str	r2, [r3, #20]
   10204:	78fb      	ldrb	r3, [r7, #3]
   10206:	f003 0307 	and.w	r3, r3, #7
   1020a:	b2da      	uxtb	r2, r3
   1020c:	f897 3020 	ldrb.w	r3, [r7, #32]
   10210:	f362 0302 	bfi	r3, r2, #0, #3
   10214:	f887 3020 	strb.w	r3, [r7, #32]
   10218:	f897 3020 	ldrb.w	r3, [r7, #32]
   1021c:	f043 0310 	orr.w	r3, r3, #16
   10220:	f887 3020 	strb.w	r3, [r7, #32]
   10224:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   1022c:	f107 0308 	add.w	r3, r7, #8
   10230:	2200      	movs	r2, #0
   10232:	601a      	str	r2, [r3, #0]
   10234:	605a      	str	r2, [r3, #4]
   10236:	609a      	str	r2, [r3, #8]
   10238:	60da      	str	r2, [r3, #12]
   1023a:	611a      	str	r2, [r3, #16]
   1023c:	615a      	str	r2, [r3, #20]
   1023e:	78fb      	ldrb	r3, [r7, #3]
   10240:	f003 0307 	and.w	r3, r3, #7
   10244:	b2da      	uxtb	r2, r3
   10246:	7a3b      	ldrb	r3, [r7, #8]
   10248:	f362 0302 	bfi	r3, r2, #0, #3
   1024c:	723b      	strb	r3, [r7, #8]
   1024e:	7a3b      	ldrb	r3, [r7, #8]
   10250:	f043 0310 	orr.w	r3, r3, #16
   10254:	723b      	strb	r3, [r7, #8]
   10256:	7a3b      	ldrb	r3, [r7, #8]
   10258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1025c:	723b      	strb	r3, [r7, #8]
   1025e:	2305      	movs	r3, #5
   10260:	733b      	strb	r3, [r7, #12]
   10262:	2301      	movs	r3, #1
   10264:	617b      	str	r3, [r7, #20]
   10266:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   1026a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   1026c:	f107 0320 	add.w	r3, r7, #32
   10270:	4619      	mov	r1, r3
   10272:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10274:	4b08      	ldr	r3, [pc, #32]	; (10298 <n25q256a_write_enable+0xcc>)
   10276:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   10278:	f107 0308 	add.w	r3, r7, #8
   1027c:	4619      	mov	r1, r3
   1027e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10280:	4b05      	ldr	r3, [pc, #20]	; (10298 <n25q256a_write_enable+0xcc>)
   10282:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   10284:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   10288:	f003 0302 	and.w	r3, r3, #2
   1028c:	2b00      	cmp	r3, #0
   1028e:	d0ed      	beq.n	1026c <n25q256a_write_enable+0xa0>
}
   10290:	bf00      	nop
   10292:	3740      	adds	r7, #64	; 0x40
   10294:	46bd      	mov	sp, r7
   10296:	bd80      	pop	{r7, pc}
   10298:	00006a2d 	.word	0x00006a2d

0001029c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   1029c:	b590      	push	{r4, r7, lr}
   1029e:	b087      	sub	sp, #28
   102a0:	af00      	add	r7, sp, #0
   102a2:	6078      	str	r0, [r7, #4]
   102a4:	460b      	mov	r3, r1
   102a6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   102a8:	687b      	ldr	r3, [r7, #4]
   102aa:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   102ac:	68fb      	ldr	r3, [r7, #12]
   102ae:	7b1b      	ldrb	r3, [r3, #12]
   102b0:	2b00      	cmp	r3, #0
   102b2:	d001      	beq.n	102b8 <n25q256a_switch_mode+0x1c>
   102b4:	2306      	movs	r3, #6
   102b6:	e000      	b.n	102ba <n25q256a_switch_mode+0x1e>
   102b8:	2300      	movs	r3, #0
   102ba:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   102bc:	7afb      	ldrb	r3, [r7, #11]
   102be:	2265      	movs	r2, #101	; 0x65
   102c0:	4619      	mov	r1, r3
   102c2:	6878      	ldr	r0, [r7, #4]
   102c4:	4b25      	ldr	r3, [pc, #148]	; (1035c <n25q256a_switch_mode+0xc0>)
   102c6:	4798      	blx	r3
   102c8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   102ca:	2300      	movs	r3, #0
   102cc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   102ce:	68fb      	ldr	r3, [r7, #12]
   102d0:	7b1b      	ldrb	r3, [r3, #12]
   102d2:	78fa      	ldrb	r2, [r7, #3]
   102d4:	429a      	cmp	r2, r3
   102d6:	d03d      	beq.n	10354 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   102d8:	78fb      	ldrb	r3, [r7, #3]
   102da:	2b00      	cmp	r3, #0
   102dc:	d00b      	beq.n	102f6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   102de:	697b      	ldr	r3, [r7, #20]
   102e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   102e4:	2b00      	cmp	r3, #0
   102e6:	d011      	beq.n	1030c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   102e8:	697b      	ldr	r3, [r7, #20]
   102ea:	f003 031f 	and.w	r3, r3, #31
   102ee:	617b      	str	r3, [r7, #20]
			modify = 1;
   102f0:	2301      	movs	r3, #1
   102f2:	74fb      	strb	r3, [r7, #19]
   102f4:	e00a      	b.n	1030c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   102f6:	697b      	ldr	r3, [r7, #20]
   102f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   102fc:	2b00      	cmp	r3, #0
   102fe:	d105      	bne.n	1030c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   10300:	697b      	ldr	r3, [r7, #20]
   10302:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   10306:	617b      	str	r3, [r7, #20]
			modify = 1;
   10308:	2301      	movs	r3, #1
   1030a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   1030c:	7cfb      	ldrb	r3, [r7, #19]
   1030e:	2b00      	cmp	r3, #0
   10310:	d021      	beq.n	10356 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   10312:	68fb      	ldr	r3, [r7, #12]
   10314:	78fa      	ldrb	r2, [r7, #3]
   10316:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   10318:	7afb      	ldrb	r3, [r7, #11]
   1031a:	2201      	movs	r2, #1
   1031c:	4619      	mov	r1, r3
   1031e:	6878      	ldr	r0, [r7, #4]
   10320:	4b0f      	ldr	r3, [pc, #60]	; (10360 <n25q256a_switch_mode+0xc4>)
   10322:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   10324:	7af9      	ldrb	r1, [r7, #11]
   10326:	697b      	ldr	r3, [r7, #20]
   10328:	2261      	movs	r2, #97	; 0x61
   1032a:	6878      	ldr	r0, [r7, #4]
   1032c:	4c0d      	ldr	r4, [pc, #52]	; (10364 <n25q256a_switch_mode+0xc8>)
   1032e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10330:	78fb      	ldrb	r3, [r7, #3]
   10332:	2b00      	cmp	r3, #0
   10334:	d001      	beq.n	1033a <n25q256a_switch_mode+0x9e>
   10336:	2306      	movs	r3, #6
   10338:	e000      	b.n	1033c <n25q256a_switch_mode+0xa0>
   1033a:	2300      	movs	r3, #0
   1033c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   1033e:	7afb      	ldrb	r3, [r7, #11]
   10340:	2265      	movs	r2, #101	; 0x65
   10342:	4619      	mov	r1, r3
   10344:	6878      	ldr	r0, [r7, #4]
   10346:	4b05      	ldr	r3, [pc, #20]	; (1035c <n25q256a_switch_mode+0xc0>)
   10348:	4798      	blx	r3
   1034a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   1034c:	68fb      	ldr	r3, [r7, #12]
   1034e:	78fa      	ldrb	r2, [r7, #3]
   10350:	731a      	strb	r2, [r3, #12]
   10352:	e000      	b.n	10356 <n25q256a_switch_mode+0xba>
		return;
   10354:	bf00      	nop
	}
}
   10356:	371c      	adds	r7, #28
   10358:	46bd      	mov	sp, r7
   1035a:	bd90      	pop	{r4, r7, pc}
   1035c:	00010091 	.word	0x00010091
   10360:	000101cd 	.word	0x000101cd
   10364:	0001012d 	.word	0x0001012d

00010368 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   10368:	b580      	push	{r7, lr}
   1036a:	b086      	sub	sp, #24
   1036c:	af00      	add	r7, sp, #0
   1036e:	60f8      	str	r0, [r7, #12]
   10370:	60b9      	str	r1, [r7, #8]
   10372:	607a      	str	r2, [r7, #4]
   10374:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   10376:	68fb      	ldr	r3, [r7, #12]
   10378:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   1037a:	4a0c      	ldr	r2, [pc, #48]	; (103ac <n25q256a_construct+0x44>)
   1037c:	68b9      	ldr	r1, [r7, #8]
   1037e:	68f8      	ldr	r0, [r7, #12]
   10380:	4b0b      	ldr	r3, [pc, #44]	; (103b0 <n25q256a_construct+0x48>)
   10382:	4798      	blx	r3
	n25q->quad_mode    = 0;
   10384:	697b      	ldr	r3, [r7, #20]
   10386:	2200      	movs	r2, #0
   10388:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   1038a:	697b      	ldr	r3, [r7, #20]
   1038c:	2200      	movs	r2, #0
   1038e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   10390:	697b      	ldr	r3, [r7, #20]
   10392:	687a      	ldr	r2, [r7, #4]
   10394:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   10396:	78fb      	ldrb	r3, [r7, #3]
   10398:	4619      	mov	r1, r3
   1039a:	68f8      	ldr	r0, [r7, #12]
   1039c:	4b05      	ldr	r3, [pc, #20]	; (103b4 <n25q256a_construct+0x4c>)
   1039e:	4798      	blx	r3
	return me;
   103a0:	68fb      	ldr	r3, [r7, #12]
}
   103a2:	4618      	mov	r0, r3
   103a4:	3718      	adds	r7, #24
   103a6:	46bd      	mov	sp, r7
   103a8:	bd80      	pop	{r7, pc}
   103aa:	bf00      	nop
   103ac:	0001cf18 	.word	0x0001cf18
   103b0:	00010845 	.word	0x00010845
   103b4:	0001029d 	.word	0x0001029d

000103b8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   103b8:	b580      	push	{r7, lr}
   103ba:	b08c      	sub	sp, #48	; 0x30
   103bc:	af00      	add	r7, sp, #0
   103be:	60f8      	str	r0, [r7, #12]
   103c0:	60b9      	str	r1, [r7, #8]
   103c2:	607a      	str	r2, [r7, #4]
   103c4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   103c6:	68fb      	ldr	r3, [r7, #12]
   103c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   103ca:	68fb      	ldr	r3, [r7, #12]
   103cc:	681b      	ldr	r3, [r3, #0]
   103ce:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   103d0:	f107 0310 	add.w	r3, r7, #16
   103d4:	2200      	movs	r2, #0
   103d6:	601a      	str	r2, [r3, #0]
   103d8:	605a      	str	r2, [r3, #4]
   103da:	609a      	str	r2, [r3, #8]
   103dc:	60da      	str	r2, [r3, #12]
   103de:	611a      	str	r2, [r3, #16]
   103e0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   103e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   103e4:	7b1b      	ldrb	r3, [r3, #12]
   103e6:	2b00      	cmp	r3, #0
   103e8:	d001      	beq.n	103ee <n25q256a_read+0x36>
   103ea:	2206      	movs	r2, #6
   103ec:	e000      	b.n	103f0 <n25q256a_read+0x38>
   103ee:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   103f0:	7c3b      	ldrb	r3, [r7, #16]
   103f2:	f362 0302 	bfi	r3, r2, #0, #3
   103f6:	743b      	strb	r3, [r7, #16]
   103f8:	7c3b      	ldrb	r3, [r7, #16]
   103fa:	f043 0310 	orr.w	r3, r3, #16
   103fe:	743b      	strb	r3, [r7, #16]
   10400:	7c3b      	ldrb	r3, [r7, #16]
   10402:	f043 0320 	orr.w	r3, r3, #32
   10406:	743b      	strb	r3, [r7, #16]
   10408:	7c3b      	ldrb	r3, [r7, #16]
   1040a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1040e:	743b      	strb	r3, [r7, #16]
   10410:	7c7b      	ldrb	r3, [r7, #17]
   10412:	2201      	movs	r2, #1
   10414:	f362 1305 	bfi	r3, r2, #4, #2
   10418:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   1041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1041c:	7b1b      	ldrb	r3, [r3, #12]
   1041e:	2b00      	cmp	r3, #0
   10420:	d001      	beq.n	10426 <n25q256a_read+0x6e>
   10422:	220a      	movs	r2, #10
   10424:	e000      	b.n	10428 <n25q256a_read+0x70>
   10426:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   10428:	7cbb      	ldrb	r3, [r7, #18]
   1042a:	f362 0304 	bfi	r3, r2, #0, #5
   1042e:	74bb      	strb	r3, [r7, #18]
   10430:	230b      	movs	r3, #11
   10432:	753b      	strb	r3, [r7, #20]
   10434:	687b      	ldr	r3, [r7, #4]
   10436:	61bb      	str	r3, [r7, #24]
   10438:	683b      	ldr	r3, [r7, #0]
   1043a:	61fb      	str	r3, [r7, #28]
   1043c:	68bb      	ldr	r3, [r7, #8]
   1043e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   10440:	f107 0310 	add.w	r3, r7, #16
   10444:	4619      	mov	r1, r3
   10446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10448:	4b03      	ldr	r3, [pc, #12]	; (10458 <n25q256a_read+0xa0>)
   1044a:	4798      	blx	r3
	return ERR_NONE;
   1044c:	2300      	movs	r3, #0
}
   1044e:	4618      	mov	r0, r3
   10450:	3730      	adds	r7, #48	; 0x30
   10452:	46bd      	mov	sp, r7
   10454:	bd80      	pop	{r7, pc}
   10456:	bf00      	nop
   10458:	00006a2d 	.word	0x00006a2d

0001045c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   1045c:	b580      	push	{r7, lr}
   1045e:	b08c      	sub	sp, #48	; 0x30
   10460:	af00      	add	r7, sp, #0
   10462:	60f8      	str	r0, [r7, #12]
   10464:	60b9      	str	r1, [r7, #8]
   10466:	607a      	str	r2, [r7, #4]
   10468:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1046a:	68fb      	ldr	r3, [r7, #12]
   1046c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1046e:	68fb      	ldr	r3, [r7, #12]
   10470:	681b      	ldr	r3, [r3, #0]
   10472:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   10474:	f107 0310 	add.w	r3, r7, #16
   10478:	2200      	movs	r2, #0
   1047a:	601a      	str	r2, [r3, #0]
   1047c:	605a      	str	r2, [r3, #4]
   1047e:	609a      	str	r2, [r3, #8]
   10480:	60da      	str	r2, [r3, #12]
   10482:	611a      	str	r2, [r3, #16]
   10484:	615a      	str	r2, [r3, #20]
   10486:	7c3b      	ldrb	r3, [r7, #16]
   10488:	f043 0310 	orr.w	r3, r3, #16
   1048c:	743b      	strb	r3, [r7, #16]
   1048e:	7c3b      	ldrb	r3, [r7, #16]
   10490:	f043 0320 	orr.w	r3, r3, #32
   10494:	743b      	strb	r3, [r7, #16]
   10496:	7c3b      	ldrb	r3, [r7, #16]
   10498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1049c:	743b      	strb	r3, [r7, #16]
   1049e:	7c7b      	ldrb	r3, [r7, #17]
   104a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   104a4:	747b      	strb	r3, [r7, #17]
   104a6:	2302      	movs	r3, #2
   104a8:	753b      	strb	r3, [r7, #20]
   104aa:	687b      	ldr	r3, [r7, #4]
   104ac:	61bb      	str	r3, [r7, #24]
   104ae:	683b      	ldr	r3, [r7, #0]
   104b0:	61fb      	str	r3, [r7, #28]
   104b2:	68bb      	ldr	r3, [r7, #8]
   104b4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   104b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104b8:	7b1b      	ldrb	r3, [r3, #12]
   104ba:	2b00      	cmp	r3, #0
   104bc:	d001      	beq.n	104c2 <n25q256a_write+0x66>
   104be:	2206      	movs	r2, #6
   104c0:	e000      	b.n	104c4 <n25q256a_write+0x68>
   104c2:	2200      	movs	r2, #0
   104c4:	7c3b      	ldrb	r3, [r7, #16]
   104c6:	f362 0302 	bfi	r3, r2, #0, #3
   104ca:	743b      	strb	r3, [r7, #16]
	while (length) {
   104cc:	e035      	b.n	1053a <n25q256a_write+0xde>
		cmd.address = address;
   104ce:	687b      	ldr	r3, [r7, #4]
   104d0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   104d2:	683b      	ldr	r3, [r7, #0]
   104d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   104d8:	d802      	bhi.n	104e0 <n25q256a_write+0x84>
			cmd.buf_len = length;
   104da:	683b      	ldr	r3, [r7, #0]
   104dc:	61fb      	str	r3, [r7, #28]
   104de:	e002      	b.n	104e6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   104e0:	f44f 7380 	mov.w	r3, #256	; 0x100
   104e4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   104e6:	7c3b      	ldrb	r3, [r7, #16]
   104e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   104ec:	b2db      	uxtb	r3, r3
   104ee:	2201      	movs	r2, #1
   104f0:	4619      	mov	r1, r3
   104f2:	68f8      	ldr	r0, [r7, #12]
   104f4:	4b19      	ldr	r3, [pc, #100]	; (1055c <n25q256a_write+0x100>)
   104f6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   104f8:	f107 0310 	add.w	r3, r7, #16
   104fc:	4619      	mov	r1, r3
   104fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10500:	4b17      	ldr	r3, [pc, #92]	; (10560 <n25q256a_write+0x104>)
   10502:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10504:	bf00      	nop
   10506:	7c3b      	ldrb	r3, [r7, #16]
   10508:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1050c:	b2db      	uxtb	r3, r3
   1050e:	2270      	movs	r2, #112	; 0x70
   10510:	4619      	mov	r1, r3
   10512:	68f8      	ldr	r0, [r7, #12]
   10514:	4b13      	ldr	r3, [pc, #76]	; (10564 <n25q256a_write+0x108>)
   10516:	4798      	blx	r3
   10518:	4603      	mov	r3, r0
   1051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1051e:	2b00      	cmp	r3, #0
   10520:	d0f1      	beq.n	10506 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   10522:	6a3a      	ldr	r2, [r7, #32]
   10524:	69fb      	ldr	r3, [r7, #28]
   10526:	4413      	add	r3, r2
   10528:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   1052a:	69fb      	ldr	r3, [r7, #28]
   1052c:	683a      	ldr	r2, [r7, #0]
   1052e:	1ad3      	subs	r3, r2, r3
   10530:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   10532:	69fb      	ldr	r3, [r7, #28]
   10534:	687a      	ldr	r2, [r7, #4]
   10536:	4413      	add	r3, r2
   10538:	607b      	str	r3, [r7, #4]
	while (length) {
   1053a:	683b      	ldr	r3, [r7, #0]
   1053c:	2b00      	cmp	r3, #0
   1053e:	d1c6      	bne.n	104ce <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   10540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10542:	7b5b      	ldrb	r3, [r3, #13]
   10544:	2b00      	cmp	r3, #0
   10546:	d003      	beq.n	10550 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   10548:	2101      	movs	r1, #1
   1054a:	68f8      	ldr	r0, [r7, #12]
   1054c:	4b06      	ldr	r3, [pc, #24]	; (10568 <n25q256a_write+0x10c>)
   1054e:	4798      	blx	r3
	}
	return ERR_NONE;
   10550:	2300      	movs	r3, #0
}
   10552:	4618      	mov	r0, r3
   10554:	3730      	adds	r7, #48	; 0x30
   10556:	46bd      	mov	sp, r7
   10558:	bd80      	pop	{r7, pc}
   1055a:	bf00      	nop
   1055c:	000101cd 	.word	0x000101cd
   10560:	00006a2d 	.word	0x00006a2d
   10564:	00010091 	.word	0x00010091
   10568:	0000ffc5 	.word	0x0000ffc5

0001056c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   1056c:	b580      	push	{r7, lr}
   1056e:	b090      	sub	sp, #64	; 0x40
   10570:	af00      	add	r7, sp, #0
   10572:	60f8      	str	r0, [r7, #12]
   10574:	60b9      	str	r1, [r7, #8]
   10576:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10578:	68fb      	ldr	r3, [r7, #12]
   1057a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1057c:	68fb      	ldr	r3, [r7, #12]
   1057e:	681b      	ldr	r3, [r3, #0]
   10580:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   10582:	f107 0314 	add.w	r3, r7, #20
   10586:	2200      	movs	r2, #0
   10588:	601a      	str	r2, [r3, #0]
   1058a:	605a      	str	r2, [r3, #4]
   1058c:	609a      	str	r2, [r3, #8]
   1058e:	60da      	str	r2, [r3, #12]
   10590:	611a      	str	r2, [r3, #16]
   10592:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10596:	7b1b      	ldrb	r3, [r3, #12]
   10598:	2b00      	cmp	r3, #0
   1059a:	d001      	beq.n	105a0 <n25q256a_erase+0x34>
   1059c:	2206      	movs	r2, #6
   1059e:	e000      	b.n	105a2 <n25q256a_erase+0x36>
   105a0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   105a2:	7d3b      	ldrb	r3, [r7, #20]
   105a4:	f362 0302 	bfi	r3, r2, #0, #3
   105a8:	753b      	strb	r3, [r7, #20]
   105aa:	7d3b      	ldrb	r3, [r7, #20]
   105ac:	f043 0310 	orr.w	r3, r3, #16
   105b0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   105b2:	687b      	ldr	r3, [r7, #4]
   105b4:	4a56      	ldr	r2, [pc, #344]	; (10710 <n25q256a_erase+0x1a4>)
   105b6:	4293      	cmp	r3, r2
   105b8:	bf94      	ite	ls
   105ba:	2301      	movls	r3, #1
   105bc:	2300      	movhi	r3, #0
   105be:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   105c0:	7d3b      	ldrb	r3, [r7, #20]
   105c2:	f362 1345 	bfi	r3, r2, #5, #1
   105c6:	753b      	strb	r3, [r7, #20]
   105c8:	7d7b      	ldrb	r3, [r7, #21]
   105ca:	2202      	movs	r2, #2
   105cc:	f362 1305 	bfi	r3, r2, #4, #2
   105d0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   105d2:	68bb      	ldr	r3, [r7, #8]
   105d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   105da:	2300      	movs	r3, #0
   105dc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   105de:	687b      	ldr	r3, [r7, #4]
   105e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
   105e4:	2b00      	cmp	r3, #0
   105e6:	d104      	bne.n	105f2 <n25q256a_erase+0x86>
   105e8:	68bb      	ldr	r3, [r7, #8]
   105ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
   105ee:	2b00      	cmp	r3, #0
   105f0:	d002      	beq.n	105f8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   105f2:	f06f 030c 	mvn.w	r3, #12
   105f6:	e087      	b.n	10708 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   105fe:	d368      	bcc.n	106d2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   10600:	23c7      	movs	r3, #199	; 0xc7
   10602:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10604:	7d3b      	ldrb	r3, [r7, #20]
   10606:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1060a:	b2db      	uxtb	r3, r3
   1060c:	2201      	movs	r2, #1
   1060e:	4619      	mov	r1, r3
   10610:	68f8      	ldr	r0, [r7, #12]
   10612:	4b40      	ldr	r3, [pc, #256]	; (10714 <n25q256a_erase+0x1a8>)
   10614:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   10616:	f107 0314 	add.w	r3, r7, #20
   1061a:	4619      	mov	r1, r3
   1061c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1061e:	4b3e      	ldr	r3, [pc, #248]	; (10718 <n25q256a_erase+0x1ac>)
   10620:	4798      	blx	r3
   10622:	e059      	b.n	106d8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   10624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10626:	b29b      	uxth	r3, r3
   10628:	2b00      	cmp	r3, #0
   1062a:	d11f      	bne.n	1066c <n25q256a_erase+0x100>
   1062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10632:	d31b      	bcc.n	1066c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   10634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10636:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   10638:	23d8      	movs	r3, #216	; 0xd8
   1063a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   1063c:	7d3b      	ldrb	r3, [r7, #20]
   1063e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10642:	b2db      	uxtb	r3, r3
   10644:	2201      	movs	r2, #1
   10646:	4619      	mov	r1, r3
   10648:	68f8      	ldr	r0, [r7, #12]
   1064a:	4b32      	ldr	r3, [pc, #200]	; (10714 <n25q256a_erase+0x1a8>)
   1064c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1064e:	f107 0314 	add.w	r3, r7, #20
   10652:	4619      	mov	r1, r3
   10654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10656:	4b30      	ldr	r3, [pc, #192]	; (10718 <n25q256a_erase+0x1ac>)
   10658:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   1065a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1065c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   10660:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   10662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10664:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   10668:	63bb      	str	r3, [r7, #56]	; 0x38
   1066a:	e023      	b.n	106b4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   1066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1066e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10672:	d31b      	bcc.n	106ac <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   10674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10676:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   10678:	2320      	movs	r3, #32
   1067a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   1067c:	7d3b      	ldrb	r3, [r7, #20]
   1067e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10682:	b2db      	uxtb	r3, r3
   10684:	2201      	movs	r2, #1
   10686:	4619      	mov	r1, r3
   10688:	68f8      	ldr	r0, [r7, #12]
   1068a:	4b22      	ldr	r3, [pc, #136]	; (10714 <n25q256a_erase+0x1a8>)
   1068c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1068e:	f107 0314 	add.w	r3, r7, #20
   10692:	4619      	mov	r1, r3
   10694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10696:	4b20      	ldr	r3, [pc, #128]	; (10718 <n25q256a_erase+0x1ac>)
   10698:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   1069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   106a4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   106a8:	63bb      	str	r3, [r7, #56]	; 0x38
   106aa:	e003      	b.n	106b4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   106ac:	f06f 030c 	mvn.w	r3, #12
   106b0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   106b2:	e011      	b.n	106d8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   106b4:	bf00      	nop
   106b6:	7d3b      	ldrb	r3, [r7, #20]
   106b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   106bc:	b2db      	uxtb	r3, r3
   106be:	2270      	movs	r2, #112	; 0x70
   106c0:	4619      	mov	r1, r3
   106c2:	68f8      	ldr	r0, [r7, #12]
   106c4:	4b15      	ldr	r3, [pc, #84]	; (1071c <n25q256a_erase+0x1b0>)
   106c6:	4798      	blx	r3
   106c8:	4603      	mov	r3, r0
   106ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
   106ce:	2b00      	cmp	r3, #0
   106d0:	d0f1      	beq.n	106b6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   106d4:	2b00      	cmp	r3, #0
   106d6:	d1a5      	bne.n	10624 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   106d8:	bf00      	nop
   106da:	7d3b      	ldrb	r3, [r7, #20]
   106dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   106e0:	b2db      	uxtb	r3, r3
   106e2:	2270      	movs	r2, #112	; 0x70
   106e4:	4619      	mov	r1, r3
   106e6:	68f8      	ldr	r0, [r7, #12]
   106e8:	4b0c      	ldr	r3, [pc, #48]	; (1071c <n25q256a_erase+0x1b0>)
   106ea:	4798      	blx	r3
   106ec:	4603      	mov	r3, r0
   106ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   106f2:	2b00      	cmp	r3, #0
   106f4:	d0f1      	beq.n	106da <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106f8:	7b5b      	ldrb	r3, [r3, #13]
   106fa:	2b00      	cmp	r3, #0
   106fc:	d003      	beq.n	10706 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   106fe:	2101      	movs	r1, #1
   10700:	68f8      	ldr	r0, [r7, #12]
   10702:	4b07      	ldr	r3, [pc, #28]	; (10720 <n25q256a_erase+0x1b4>)
   10704:	4798      	blx	r3
	}
	return rc;
   10706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   10708:	4618      	mov	r0, r3
   1070a:	3740      	adds	r7, #64	; 0x40
   1070c:	46bd      	mov	sp, r7
   1070e:	bd80      	pop	{r7, pc}
   10710:	001fffff 	.word	0x001fffff
   10714:	000101cd 	.word	0x000101cd
   10718:	00006a2d 	.word	0x00006a2d
   1071c:	00010091 	.word	0x00010091
   10720:	0000ffc5 	.word	0x0000ffc5

00010724 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   10724:	b590      	push	{r4, r7, lr}
   10726:	b085      	sub	sp, #20
   10728:	af00      	add	r7, sp, #0
   1072a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   1072c:	687b      	ldr	r3, [r7, #4]
   1072e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10730:	68fb      	ldr	r3, [r7, #12]
   10732:	7b1b      	ldrb	r3, [r3, #12]
   10734:	2b00      	cmp	r3, #0
   10736:	d001      	beq.n	1073c <n25q256a_enable_xip+0x18>
   10738:	2306      	movs	r3, #6
   1073a:	e000      	b.n	1073e <n25q256a_enable_xip+0x1a>
   1073c:	2300      	movs	r3, #0
   1073e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   10740:	68fb      	ldr	r3, [r7, #12]
   10742:	7b5b      	ldrb	r3, [r3, #13]
   10744:	2b00      	cmp	r3, #0
   10746:	d129      	bne.n	1079c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   10748:	7afb      	ldrb	r3, [r7, #11]
   1074a:	2285      	movs	r2, #133	; 0x85
   1074c:	4619      	mov	r1, r3
   1074e:	6878      	ldr	r0, [r7, #4]
   10750:	4b15      	ldr	r3, [pc, #84]	; (107a8 <n25q256a_enable_xip+0x84>)
   10752:	4798      	blx	r3
   10754:	4603      	mov	r3, r0
   10756:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   10758:	7abb      	ldrb	r3, [r7, #10]
   1075a:	f003 0308 	and.w	r3, r3, #8
   1075e:	2b00      	cmp	r3, #0
   10760:	d015      	beq.n	1078e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   10762:	7abb      	ldrb	r3, [r7, #10]
   10764:	f023 0308 	bic.w	r3, r3, #8
   10768:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   1076a:	7abb      	ldrb	r3, [r7, #10]
   1076c:	7af9      	ldrb	r1, [r7, #11]
   1076e:	2281      	movs	r2, #129	; 0x81
   10770:	6878      	ldr	r0, [r7, #4]
   10772:	4c0e      	ldr	r4, [pc, #56]	; (107ac <n25q256a_enable_xip+0x88>)
   10774:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10776:	bf00      	nop
   10778:	7afb      	ldrb	r3, [r7, #11]
   1077a:	2270      	movs	r2, #112	; 0x70
   1077c:	4619      	mov	r1, r3
   1077e:	6878      	ldr	r0, [r7, #4]
   10780:	4b09      	ldr	r3, [pc, #36]	; (107a8 <n25q256a_enable_xip+0x84>)
   10782:	4798      	blx	r3
   10784:	4603      	mov	r3, r0
   10786:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1078a:	2b00      	cmp	r3, #0
   1078c:	d0f4      	beq.n	10778 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   1078e:	68fb      	ldr	r3, [r7, #12]
   10790:	2201      	movs	r2, #1
   10792:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   10794:	2101      	movs	r1, #1
   10796:	6878      	ldr	r0, [r7, #4]
   10798:	4b05      	ldr	r3, [pc, #20]	; (107b0 <n25q256a_enable_xip+0x8c>)
   1079a:	4798      	blx	r3
	}
	return ERR_NONE;
   1079c:	2300      	movs	r3, #0
}
   1079e:	4618      	mov	r0, r3
   107a0:	3714      	adds	r7, #20
   107a2:	46bd      	mov	sp, r7
   107a4:	bd90      	pop	{r4, r7, pc}
   107a6:	bf00      	nop
   107a8:	00010091 	.word	0x00010091
   107ac:	0001012d 	.word	0x0001012d
   107b0:	0000ffc5 	.word	0x0000ffc5

000107b4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   107b4:	b580      	push	{r7, lr}
   107b6:	b086      	sub	sp, #24
   107b8:	af00      	add	r7, sp, #0
   107ba:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   107bc:	687b      	ldr	r3, [r7, #4]
   107be:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   107c0:	687b      	ldr	r3, [r7, #4]
   107c2:	681b      	ldr	r3, [r3, #0]
   107c4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   107c6:	697b      	ldr	r3, [r7, #20]
   107c8:	7b1b      	ldrb	r3, [r3, #12]
   107ca:	2b00      	cmp	r3, #0
   107cc:	d001      	beq.n	107d2 <n25q256a_disable_xip+0x1e>
   107ce:	2306      	movs	r3, #6
   107d0:	e000      	b.n	107d4 <n25q256a_disable_xip+0x20>
   107d2:	2300      	movs	r3, #0
   107d4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   107d6:	2100      	movs	r1, #0
   107d8:	6878      	ldr	r0, [r7, #4]
   107da:	4b15      	ldr	r3, [pc, #84]	; (10830 <n25q256a_disable_xip+0x7c>)
   107dc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   107de:	7bfb      	ldrb	r3, [r7, #15]
   107e0:	2285      	movs	r2, #133	; 0x85
   107e2:	4619      	mov	r1, r3
   107e4:	6878      	ldr	r0, [r7, #4]
   107e6:	4b13      	ldr	r3, [pc, #76]	; (10834 <n25q256a_disable_xip+0x80>)
   107e8:	4798      	blx	r3
   107ea:	4603      	mov	r3, r0
   107ec:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   107ee:	7bbb      	ldrb	r3, [r7, #14]
   107f0:	f003 0308 	and.w	r3, r3, #8
   107f4:	2b00      	cmp	r3, #0
   107f6:	d113      	bne.n	10820 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   107f8:	697b      	ldr	r3, [r7, #20]
   107fa:	689b      	ldr	r3, [r3, #8]
   107fc:	2b00      	cmp	r3, #0
   107fe:	d00f      	beq.n	10820 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   10800:	693b      	ldr	r3, [r7, #16]
   10802:	681b      	ldr	r3, [r3, #0]
   10804:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   10806:	6938      	ldr	r0, [r7, #16]
   10808:	4b0b      	ldr	r3, [pc, #44]	; (10838 <n25q256a_disable_xip+0x84>)
   1080a:	4798      	blx	r3
			n25q->pin_exit_xip();
   1080c:	697b      	ldr	r3, [r7, #20]
   1080e:	689b      	ldr	r3, [r3, #8]
   10810:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   10812:	68b9      	ldr	r1, [r7, #8]
   10814:	6938      	ldr	r0, [r7, #16]
   10816:	4b09      	ldr	r3, [pc, #36]	; (1083c <n25q256a_disable_xip+0x88>)
   10818:	4798      	blx	r3
			qspi_sync_enable(descr);
   1081a:	6938      	ldr	r0, [r7, #16]
   1081c:	4b08      	ldr	r3, [pc, #32]	; (10840 <n25q256a_disable_xip+0x8c>)
   1081e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   10820:	697b      	ldr	r3, [r7, #20]
   10822:	2200      	movs	r2, #0
   10824:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10826:	2300      	movs	r3, #0
}
   10828:	4618      	mov	r0, r3
   1082a:	3718      	adds	r7, #24
   1082c:	46bd      	mov	sp, r7
   1082e:	bd80      	pop	{r7, pc}
   10830:	0000ffc5 	.word	0x0000ffc5
   10834:	00010091 	.word	0x00010091
   10838:	000069f1 	.word	0x000069f1
   1083c:	00006969 	.word	0x00006969
   10840:	000069b5 	.word	0x000069b5

00010844 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   10844:	b480      	push	{r7}
   10846:	b085      	sub	sp, #20
   10848:	af00      	add	r7, sp, #0
   1084a:	60f8      	str	r0, [r7, #12]
   1084c:	60b9      	str	r1, [r7, #8]
   1084e:	607a      	str	r2, [r7, #4]
	me->io        = io;
   10850:	68fb      	ldr	r3, [r7, #12]
   10852:	68ba      	ldr	r2, [r7, #8]
   10854:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   10856:	68fb      	ldr	r3, [r7, #12]
   10858:	687a      	ldr	r2, [r7, #4]
   1085a:	605a      	str	r2, [r3, #4]

	return me;
   1085c:	68fb      	ldr	r3, [r7, #12]
}
   1085e:	4618      	mov	r0, r3
   10860:	3714      	adds	r7, #20
   10862:	46bd      	mov	sp, r7
   10864:	f85d 7b04 	ldr.w	r7, [sp], #4
   10868:	4770      	bx	lr

0001086a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   1086a:	b480      	push	{r7}
   1086c:	b083      	sub	sp, #12
   1086e:	af00      	add	r7, sp, #0
   10870:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10872:	687b      	ldr	r3, [r7, #4]
   10874:	781b      	ldrb	r3, [r3, #0]
   10876:	b29a      	uxth	r2, r3
   10878:	687b      	ldr	r3, [r7, #4]
   1087a:	3301      	adds	r3, #1
   1087c:	781b      	ldrb	r3, [r3, #0]
   1087e:	b29b      	uxth	r3, r3
   10880:	021b      	lsls	r3, r3, #8
   10882:	b29b      	uxth	r3, r3
   10884:	4413      	add	r3, r2
   10886:	b29b      	uxth	r3, r3
}
   10888:	4618      	mov	r0, r3
   1088a:	370c      	adds	r7, #12
   1088c:	46bd      	mov	sp, r7
   1088e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10892:	4770      	bx	lr

00010894 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   10894:	b480      	push	{r7}
   10896:	b083      	sub	sp, #12
   10898:	af00      	add	r7, sp, #0
   1089a:	6078      	str	r0, [r7, #4]
	return desc[0];
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	781b      	ldrb	r3, [r3, #0]
}
   108a0:	4618      	mov	r0, r3
   108a2:	370c      	adds	r7, #12
   108a4:	46bd      	mov	sp, r7
   108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   108aa:	4770      	bx	lr

000108ac <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   108ac:	b580      	push	{r7, lr}
   108ae:	b082      	sub	sp, #8
   108b0:	af00      	add	r7, sp, #0
   108b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   108b4:	6878      	ldr	r0, [r7, #4]
   108b6:	4b05      	ldr	r3, [pc, #20]	; (108cc <usb_desc_next+0x20>)
   108b8:	4798      	blx	r3
   108ba:	4603      	mov	r3, r0
   108bc:	461a      	mov	r2, r3
   108be:	687b      	ldr	r3, [r7, #4]
   108c0:	4413      	add	r3, r2
}
   108c2:	4618      	mov	r0, r3
   108c4:	3708      	adds	r7, #8
   108c6:	46bd      	mov	sp, r7
   108c8:	bd80      	pop	{r7, pc}
   108ca:	bf00      	nop
   108cc:	00010895 	.word	0x00010895

000108d0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   108d0:	b580      	push	{r7, lr}
   108d2:	b08c      	sub	sp, #48	; 0x30
   108d4:	af00      	add	r7, sp, #0
   108d6:	6078      	str	r0, [r7, #4]
   108d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   108da:	687b      	ldr	r3, [r7, #4]
   108dc:	689b      	ldr	r3, [r3, #8]
   108de:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   108e0:	683b      	ldr	r3, [r7, #0]
   108e2:	681b      	ldr	r3, [r3, #0]
   108e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   108e6:	2300      	movs	r3, #0
   108e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   108ec:	e08f      	b.n	10a0e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   108ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108f0:	2b00      	cmp	r3, #0
   108f2:	d102      	bne.n	108fa <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   108f4:	f06f 0309 	mvn.w	r3, #9
   108f8:	e092      	b.n	10a20 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   108fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108fc:	789b      	ldrb	r3, [r3, #2]
   108fe:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   10900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10902:	795b      	ldrb	r3, [r3, #5]
   10904:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   10906:	7c7b      	ldrb	r3, [r7, #17]
   10908:	2b02      	cmp	r3, #2
   1090a:	d002      	beq.n	10912 <cdcdf_acm_enable+0x42>
   1090c:	7c7b      	ldrb	r3, [r7, #17]
   1090e:	2b0a      	cmp	r3, #10
   10910:	d121      	bne.n	10956 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10916:	6a3a      	ldr	r2, [r7, #32]
   10918:	5cd2      	ldrb	r2, [r2, r3]
   1091a:	7bbb      	ldrb	r3, [r7, #14]
   1091c:	429a      	cmp	r2, r3
   1091e:	d102      	bne.n	10926 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   10920:	f06f 0311 	mvn.w	r3, #17
   10924:	e07c      	b.n	10a20 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   10926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1092a:	6a3a      	ldr	r2, [r7, #32]
   1092c:	5cd3      	ldrb	r3, [r2, r3]
   1092e:	2bff      	cmp	r3, #255	; 0xff
   10930:	d002      	beq.n	10938 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   10932:	f06f 031b 	mvn.w	r3, #27
   10936:	e073      	b.n	10a20 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   10938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1093c:	7bb9      	ldrb	r1, [r7, #14]
   1093e:	6a3a      	ldr	r2, [r7, #32]
   10940:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10942:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   10944:	683b      	ldr	r3, [r7, #0]
   10946:	685b      	ldr	r3, [r3, #4]
   10948:	2205      	movs	r2, #5
   1094a:	4619      	mov	r1, r3
   1094c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1094e:	4b36      	ldr	r3, [pc, #216]	; (10a28 <cdcdf_acm_enable+0x158>)
   10950:	4798      	blx	r3
   10952:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   10954:	e047      	b.n	109e6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   10956:	f06f 0309 	mvn.w	r3, #9
   1095a:	e061      	b.n	10a20 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   1095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1095e:	789b      	ldrb	r3, [r3, #2]
   10960:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   10962:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10964:	78db      	ldrb	r3, [r3, #3]
   10966:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   10968:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1096a:	3304      	adds	r3, #4
   1096c:	4618      	mov	r0, r3
   1096e:	4b2f      	ldr	r3, [pc, #188]	; (10a2c <cdcdf_acm_enable+0x15c>)
   10970:	4798      	blx	r3
   10972:	4603      	mov	r3, r0
   10974:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   10976:	7ebb      	ldrb	r3, [r7, #26]
   10978:	7ef9      	ldrb	r1, [r7, #27]
   1097a:	8bba      	ldrh	r2, [r7, #28]
   1097c:	4618      	mov	r0, r3
   1097e:	4b2c      	ldr	r3, [pc, #176]	; (10a30 <cdcdf_acm_enable+0x160>)
   10980:	4798      	blx	r3
   10982:	4603      	mov	r3, r0
   10984:	2b00      	cmp	r3, #0
   10986:	d002      	beq.n	1098e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   10988:	f06f 0313 	mvn.w	r3, #19
   1098c:	e048      	b.n	10a20 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   1098e:	7ebb      	ldrb	r3, [r7, #26]
   10990:	b25b      	sxtb	r3, r3
   10992:	2b00      	cmp	r3, #0
   10994:	da0f      	bge.n	109b6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   10996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1099a:	7eb9      	ldrb	r1, [r7, #26]
   1099c:	6a3a      	ldr	r2, [r7, #32]
   1099e:	4413      	add	r3, r2
   109a0:	460a      	mov	r2, r1
   109a2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   109a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   109a8:	6a3a      	ldr	r2, [r7, #32]
   109aa:	4413      	add	r3, r2
   109ac:	789b      	ldrb	r3, [r3, #2]
   109ae:	4618      	mov	r0, r3
   109b0:	4b20      	ldr	r3, [pc, #128]	; (10a34 <cdcdf_acm_enable+0x164>)
   109b2:	4798      	blx	r3
   109b4:	e007      	b.n	109c6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   109b6:	7eba      	ldrb	r2, [r7, #26]
   109b8:	6a3b      	ldr	r3, [r7, #32]
   109ba:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   109bc:	6a3b      	ldr	r3, [r7, #32]
   109be:	791b      	ldrb	r3, [r3, #4]
   109c0:	4618      	mov	r0, r3
   109c2:	4b1c      	ldr	r3, [pc, #112]	; (10a34 <cdcdf_acm_enable+0x164>)
   109c4:	4798      	blx	r3
			}
			desc->sod = ep;
   109c6:	683b      	ldr	r3, [r7, #0]
   109c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   109ca:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   109cc:	683b      	ldr	r3, [r7, #0]
   109ce:	681b      	ldr	r3, [r3, #0]
   109d0:	4618      	mov	r0, r3
   109d2:	4b19      	ldr	r3, [pc, #100]	; (10a38 <cdcdf_acm_enable+0x168>)
   109d4:	4798      	blx	r3
   109d6:	4602      	mov	r2, r0
   109d8:	683b      	ldr	r3, [r7, #0]
   109da:	685b      	ldr	r3, [r3, #4]
   109dc:	4619      	mov	r1, r3
   109de:	4610      	mov	r0, r2
   109e0:	4b16      	ldr	r3, [pc, #88]	; (10a3c <cdcdf_acm_enable+0x16c>)
   109e2:	4798      	blx	r3
   109e4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109e8:	2b00      	cmp	r3, #0
   109ea:	d1b7      	bne.n	1095c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   109ec:	683b      	ldr	r3, [r7, #0]
   109ee:	681b      	ldr	r3, [r3, #0]
   109f0:	4618      	mov	r0, r3
   109f2:	4b11      	ldr	r3, [pc, #68]	; (10a38 <cdcdf_acm_enable+0x168>)
   109f4:	4798      	blx	r3
   109f6:	683b      	ldr	r3, [r7, #0]
   109f8:	685b      	ldr	r3, [r3, #4]
   109fa:	2204      	movs	r2, #4
   109fc:	4619      	mov	r1, r3
   109fe:	4b0a      	ldr	r3, [pc, #40]	; (10a28 <cdcdf_acm_enable+0x158>)
   10a00:	4798      	blx	r3
   10a02:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   10a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10a08:	3301      	adds	r3, #1
   10a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   10a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10a12:	2b01      	cmp	r3, #1
   10a14:	f67f af6b 	bls.w	108ee <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   10a18:	4b09      	ldr	r3, [pc, #36]	; (10a40 <cdcdf_acm_enable+0x170>)
   10a1a:	2201      	movs	r2, #1
   10a1c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   10a1e:	2300      	movs	r3, #0
}
   10a20:	4618      	mov	r0, r3
   10a22:	3730      	adds	r7, #48	; 0x30
   10a24:	46bd      	mov	sp, r7
   10a26:	bd80      	pop	{r7, pc}
   10a28:	00011c91 	.word	0x00011c91
   10a2c:	0001086b 	.word	0x0001086b
   10a30:	000076a1 	.word	0x000076a1
   10a34:	0000778d 	.word	0x0000778d
   10a38:	000108ad 	.word	0x000108ad
   10a3c:	00011ced 	.word	0x00011ced
   10a40:	20001d8c 	.word	0x20001d8c

00010a44 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   10a44:	b580      	push	{r7, lr}
   10a46:	b088      	sub	sp, #32
   10a48:	af00      	add	r7, sp, #0
   10a4a:	6078      	str	r0, [r7, #4]
   10a4c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   10a4e:	687b      	ldr	r3, [r7, #4]
   10a50:	689b      	ldr	r3, [r3, #8]
   10a52:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   10a54:	683b      	ldr	r3, [r7, #0]
   10a56:	2b00      	cmp	r3, #0
   10a58:	d00c      	beq.n	10a74 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   10a5a:	683b      	ldr	r3, [r7, #0]
   10a5c:	681b      	ldr	r3, [r3, #0]
   10a5e:	795b      	ldrb	r3, [r3, #5]
   10a60:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   10a62:	7c7b      	ldrb	r3, [r7, #17]
   10a64:	2b02      	cmp	r3, #2
   10a66:	d005      	beq.n	10a74 <cdcdf_acm_disable+0x30>
   10a68:	7c7b      	ldrb	r3, [r7, #17]
   10a6a:	2b0a      	cmp	r3, #10
   10a6c:	d002      	beq.n	10a74 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   10a6e:	f06f 0309 	mvn.w	r3, #9
   10a72:	e035      	b.n	10ae0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   10a74:	2300      	movs	r3, #0
   10a76:	77fb      	strb	r3, [r7, #31]
   10a78:	e01f      	b.n	10aba <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   10a7a:	7ffb      	ldrb	r3, [r7, #31]
   10a7c:	69ba      	ldr	r2, [r7, #24]
   10a7e:	5cd3      	ldrb	r3, [r2, r3]
   10a80:	2bff      	cmp	r3, #255	; 0xff
   10a82:	d016      	beq.n	10ab2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   10a84:	7ffb      	ldrb	r3, [r7, #31]
   10a86:	69ba      	ldr	r2, [r7, #24]
   10a88:	21ff      	movs	r1, #255	; 0xff
   10a8a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   10a8c:	7ffb      	ldrb	r3, [r7, #31]
   10a8e:	69ba      	ldr	r2, [r7, #24]
   10a90:	4413      	add	r3, r2
   10a92:	789b      	ldrb	r3, [r3, #2]
   10a94:	2bff      	cmp	r3, #255	; 0xff
   10a96:	d00d      	beq.n	10ab4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   10a98:	7ffb      	ldrb	r3, [r7, #31]
   10a9a:	69ba      	ldr	r2, [r7, #24]
   10a9c:	4413      	add	r3, r2
   10a9e:	789b      	ldrb	r3, [r3, #2]
   10aa0:	4618      	mov	r0, r3
   10aa2:	4b11      	ldr	r3, [pc, #68]	; (10ae8 <cdcdf_acm_disable+0xa4>)
   10aa4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   10aa6:	7ffb      	ldrb	r3, [r7, #31]
   10aa8:	69ba      	ldr	r2, [r7, #24]
   10aaa:	4413      	add	r3, r2
   10aac:	22ff      	movs	r2, #255	; 0xff
   10aae:	709a      	strb	r2, [r3, #2]
   10ab0:	e000      	b.n	10ab4 <cdcdf_acm_disable+0x70>
			continue;
   10ab2:	bf00      	nop
	for (i = 0; i < 2; i++) {
   10ab4:	7ffb      	ldrb	r3, [r7, #31]
   10ab6:	3301      	adds	r3, #1
   10ab8:	77fb      	strb	r3, [r7, #31]
   10aba:	7ffb      	ldrb	r3, [r7, #31]
   10abc:	2b01      	cmp	r3, #1
   10abe:	d9dc      	bls.n	10a7a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   10ac0:	69bb      	ldr	r3, [r7, #24]
   10ac2:	791b      	ldrb	r3, [r3, #4]
   10ac4:	2bff      	cmp	r3, #255	; 0xff
   10ac6:	d007      	beq.n	10ad8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   10ac8:	69bb      	ldr	r3, [r7, #24]
   10aca:	791b      	ldrb	r3, [r3, #4]
   10acc:	4618      	mov	r0, r3
   10ace:	4b06      	ldr	r3, [pc, #24]	; (10ae8 <cdcdf_acm_disable+0xa4>)
   10ad0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   10ad2:	69bb      	ldr	r3, [r7, #24]
   10ad4:	22ff      	movs	r2, #255	; 0xff
   10ad6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   10ad8:	4b04      	ldr	r3, [pc, #16]	; (10aec <cdcdf_acm_disable+0xa8>)
   10ada:	2200      	movs	r2, #0
   10adc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   10ade:	2300      	movs	r3, #0
}
   10ae0:	4618      	mov	r0, r3
   10ae2:	3720      	adds	r7, #32
   10ae4:	46bd      	mov	sp, r7
   10ae6:	bd80      	pop	{r7, pc}
   10ae8:	0000773d 	.word	0x0000773d
   10aec:	20001d8c 	.word	0x20001d8c

00010af0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   10af0:	b580      	push	{r7, lr}
   10af2:	b084      	sub	sp, #16
   10af4:	af00      	add	r7, sp, #0
   10af6:	60f8      	str	r0, [r7, #12]
   10af8:	460b      	mov	r3, r1
   10afa:	607a      	str	r2, [r7, #4]
   10afc:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   10afe:	7afb      	ldrb	r3, [r7, #11]
   10b00:	2b01      	cmp	r3, #1
   10b02:	d009      	beq.n	10b18 <cdcdf_acm_ctrl+0x28>
   10b04:	2b02      	cmp	r3, #2
   10b06:	d00d      	beq.n	10b24 <cdcdf_acm_ctrl+0x34>
   10b08:	2b00      	cmp	r3, #0
   10b0a:	d10e      	bne.n	10b2a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   10b0c:	6879      	ldr	r1, [r7, #4]
   10b0e:	68f8      	ldr	r0, [r7, #12]
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <cdcdf_acm_ctrl+0x48>)
   10b12:	4798      	blx	r3
   10b14:	4603      	mov	r3, r0
   10b16:	e00a      	b.n	10b2e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   10b18:	6879      	ldr	r1, [r7, #4]
   10b1a:	68f8      	ldr	r0, [r7, #12]
   10b1c:	4b07      	ldr	r3, [pc, #28]	; (10b3c <cdcdf_acm_ctrl+0x4c>)
   10b1e:	4798      	blx	r3
   10b20:	4603      	mov	r3, r0
   10b22:	e004      	b.n	10b2e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   10b24:	f06f 031a 	mvn.w	r3, #26
   10b28:	e001      	b.n	10b2e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   10b2a:	f06f 030c 	mvn.w	r3, #12
	}
}
   10b2e:	4618      	mov	r0, r3
   10b30:	3710      	adds	r7, #16
   10b32:	46bd      	mov	sp, r7
   10b34:	bd80      	pop	{r7, pc}
   10b36:	bf00      	nop
   10b38:	000108d1 	.word	0x000108d1
   10b3c:	00010a45 	.word	0x00010a45

00010b40 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10b40:	b590      	push	{r4, r7, lr}
   10b42:	b087      	sub	sp, #28
   10b44:	af00      	add	r7, sp, #0
   10b46:	4603      	mov	r3, r0
   10b48:	6039      	str	r1, [r7, #0]
   10b4a:	71fb      	strb	r3, [r7, #7]
   10b4c:	4613      	mov	r3, r2
   10b4e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   10b50:	683b      	ldr	r3, [r7, #0]
   10b52:	799a      	ldrb	r2, [r3, #6]
   10b54:	79db      	ldrb	r3, [r3, #7]
   10b56:	021b      	lsls	r3, r3, #8
   10b58:	4313      	orrs	r3, r2
   10b5a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   10b5c:	4b2b      	ldr	r3, [pc, #172]	; (10c0c <cdcdf_acm_set_req+0xcc>)
   10b5e:	4798      	blx	r3
   10b60:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   10b62:	683b      	ldr	r3, [r7, #0]
   10b64:	785b      	ldrb	r3, [r3, #1]
   10b66:	2b20      	cmp	r3, #32
   10b68:	d002      	beq.n	10b70 <cdcdf_acm_set_req+0x30>
   10b6a:	2b22      	cmp	r3, #34	; 0x22
   10b6c:	d034      	beq.n	10bd8 <cdcdf_acm_set_req+0x98>
   10b6e:	e046      	b.n	10bfe <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   10b70:	8afb      	ldrh	r3, [r7, #22]
   10b72:	2b07      	cmp	r3, #7
   10b74:	d002      	beq.n	10b7c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   10b76:	f04f 33ff 	mov.w	r3, #4294967295
   10b7a:	e042      	b.n	10c02 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   10b7c:	79bb      	ldrb	r3, [r7, #6]
   10b7e:	2b00      	cmp	r3, #0
   10b80:	d107      	bne.n	10b92 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   10b82:	8afa      	ldrh	r2, [r7, #22]
   10b84:	79f8      	ldrb	r0, [r7, #7]
   10b86:	2300      	movs	r3, #0
   10b88:	6939      	ldr	r1, [r7, #16]
   10b8a:	4c21      	ldr	r4, [pc, #132]	; (10c10 <cdcdf_acm_set_req+0xd0>)
   10b8c:	47a0      	blx	r4
   10b8e:	4603      	mov	r3, r0
   10b90:	e037      	b.n	10c02 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   10b92:	693a      	ldr	r2, [r7, #16]
   10b94:	f107 0308 	add.w	r3, r7, #8
   10b98:	6810      	ldr	r0, [r2, #0]
   10b9a:	6018      	str	r0, [r3, #0]
   10b9c:	8891      	ldrh	r1, [r2, #4]
   10b9e:	7992      	ldrb	r2, [r2, #6]
   10ba0:	8099      	strh	r1, [r3, #4]
   10ba2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   10ba4:	4b1b      	ldr	r3, [pc, #108]	; (10c14 <cdcdf_acm_set_req+0xd4>)
   10ba6:	681b      	ldr	r3, [r3, #0]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d008      	beq.n	10bbe <cdcdf_acm_set_req+0x7e>
   10bac:	4b19      	ldr	r3, [pc, #100]	; (10c14 <cdcdf_acm_set_req+0xd4>)
   10bae:	681b      	ldr	r3, [r3, #0]
   10bb0:	f107 0208 	add.w	r2, r7, #8
   10bb4:	4610      	mov	r0, r2
   10bb6:	4798      	blx	r3
   10bb8:	4603      	mov	r3, r0
   10bba:	2b00      	cmp	r3, #0
   10bbc:	d00a      	beq.n	10bd4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   10bbe:	4b16      	ldr	r3, [pc, #88]	; (10c18 <cdcdf_acm_set_req+0xd8>)
   10bc0:	f107 0208 	add.w	r2, r7, #8
   10bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
   10bc8:	6018      	str	r0, [r3, #0]
   10bca:	3304      	adds	r3, #4
   10bcc:	8019      	strh	r1, [r3, #0]
   10bce:	3302      	adds	r3, #2
   10bd0:	0c0a      	lsrs	r2, r1, #16
   10bd2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   10bd4:	2300      	movs	r3, #0
   10bd6:	e014      	b.n	10c02 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   10bd8:	2300      	movs	r3, #0
   10bda:	2200      	movs	r2, #0
   10bdc:	2100      	movs	r1, #0
   10bde:	2000      	movs	r0, #0
   10be0:	4c0b      	ldr	r4, [pc, #44]	; (10c10 <cdcdf_acm_set_req+0xd0>)
   10be2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   10be4:	4b0d      	ldr	r3, [pc, #52]	; (10c1c <cdcdf_acm_set_req+0xdc>)
   10be6:	681b      	ldr	r3, [r3, #0]
   10be8:	2b00      	cmp	r3, #0
   10bea:	d006      	beq.n	10bfa <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   10bec:	4b0b      	ldr	r3, [pc, #44]	; (10c1c <cdcdf_acm_set_req+0xdc>)
   10bee:	681b      	ldr	r3, [r3, #0]
   10bf0:	683a      	ldr	r2, [r7, #0]
   10bf2:	8852      	ldrh	r2, [r2, #2]
   10bf4:	b292      	uxth	r2, r2
   10bf6:	4610      	mov	r0, r2
   10bf8:	4798      	blx	r3
		}
		return ERR_NONE;
   10bfa:	2300      	movs	r3, #0
   10bfc:	e001      	b.n	10c02 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   10bfe:	f06f 030c 	mvn.w	r3, #12
	}
}
   10c02:	4618      	mov	r0, r3
   10c04:	371c      	adds	r7, #28
   10c06:	46bd      	mov	sp, r7
   10c08:	bd90      	pop	{r4, r7, pc}
   10c0a:	bf00      	nop
   10c0c:	00011b8d 	.word	0x00011b8d
   10c10:	00011a01 	.word	0x00011a01
   10c14:	20001da0 	.word	0x20001da0
   10c18:	20001d94 	.word	0x20001d94
   10c1c:	20001d9c 	.word	0x20001d9c

00010c20 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10c20:	b590      	push	{r4, r7, lr}
   10c22:	b085      	sub	sp, #20
   10c24:	af00      	add	r7, sp, #0
   10c26:	4603      	mov	r3, r0
   10c28:	6039      	str	r1, [r7, #0]
   10c2a:	71fb      	strb	r3, [r7, #7]
   10c2c:	4613      	mov	r3, r2
   10c2e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   10c30:	683b      	ldr	r3, [r7, #0]
   10c32:	799a      	ldrb	r2, [r3, #6]
   10c34:	79db      	ldrb	r3, [r3, #7]
   10c36:	021b      	lsls	r3, r3, #8
   10c38:	4313      	orrs	r3, r2
   10c3a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   10c3c:	79bb      	ldrb	r3, [r7, #6]
   10c3e:	2b01      	cmp	r3, #1
   10c40:	d101      	bne.n	10c46 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   10c42:	2300      	movs	r3, #0
   10c44:	e013      	b.n	10c6e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   10c46:	683b      	ldr	r3, [r7, #0]
   10c48:	785b      	ldrb	r3, [r3, #1]
   10c4a:	2b21      	cmp	r3, #33	; 0x21
   10c4c:	d10d      	bne.n	10c6a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   10c4e:	89fb      	ldrh	r3, [r7, #14]
   10c50:	2b07      	cmp	r3, #7
   10c52:	d002      	beq.n	10c5a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   10c54:	f04f 33ff 	mov.w	r3, #4294967295
   10c58:	e009      	b.n	10c6e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   10c5a:	89fa      	ldrh	r2, [r7, #14]
   10c5c:	79f8      	ldrb	r0, [r7, #7]
   10c5e:	2300      	movs	r3, #0
   10c60:	4905      	ldr	r1, [pc, #20]	; (10c78 <cdcdf_acm_get_req+0x58>)
   10c62:	4c06      	ldr	r4, [pc, #24]	; (10c7c <cdcdf_acm_get_req+0x5c>)
   10c64:	47a0      	blx	r4
   10c66:	4603      	mov	r3, r0
   10c68:	e001      	b.n	10c6e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   10c6a:	f06f 030c 	mvn.w	r3, #12
	}
}
   10c6e:	4618      	mov	r0, r3
   10c70:	3714      	adds	r7, #20
   10c72:	46bd      	mov	sp, r7
   10c74:	bd90      	pop	{r4, r7, pc}
   10c76:	bf00      	nop
   10c78:	20001d94 	.word	0x20001d94
   10c7c:	00011a01 	.word	0x00011a01

00010c80 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10c80:	b580      	push	{r7, lr}
   10c82:	b082      	sub	sp, #8
   10c84:	af00      	add	r7, sp, #0
   10c86:	4603      	mov	r3, r0
   10c88:	6039      	str	r1, [r7, #0]
   10c8a:	71fb      	strb	r3, [r7, #7]
   10c8c:	4613      	mov	r3, r2
   10c8e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   10c90:	683b      	ldr	r3, [r7, #0]
   10c92:	781b      	ldrb	r3, [r3, #0]
   10c94:	095b      	lsrs	r3, r3, #5
   10c96:	b2db      	uxtb	r3, r3
   10c98:	f003 0303 	and.w	r3, r3, #3
   10c9c:	2b01      	cmp	r3, #1
   10c9e:	d002      	beq.n	10ca6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   10ca0:	f06f 0309 	mvn.w	r3, #9
   10ca4:	e026      	b.n	10cf4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   10ca6:	683b      	ldr	r3, [r7, #0]
   10ca8:	889b      	ldrh	r3, [r3, #4]
   10caa:	b29a      	uxth	r2, r3
   10cac:	4b13      	ldr	r3, [pc, #76]	; (10cfc <cdcdf_acm_req+0x7c>)
   10cae:	781b      	ldrb	r3, [r3, #0]
   10cb0:	b29b      	uxth	r3, r3
   10cb2:	429a      	cmp	r2, r3
   10cb4:	d007      	beq.n	10cc6 <cdcdf_acm_req+0x46>
   10cb6:	683b      	ldr	r3, [r7, #0]
   10cb8:	889b      	ldrh	r3, [r3, #4]
   10cba:	b29a      	uxth	r2, r3
   10cbc:	4b0f      	ldr	r3, [pc, #60]	; (10cfc <cdcdf_acm_req+0x7c>)
   10cbe:	785b      	ldrb	r3, [r3, #1]
   10cc0:	b29b      	uxth	r3, r3
   10cc2:	429a      	cmp	r2, r3
   10cc4:	d114      	bne.n	10cf0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   10cc6:	683b      	ldr	r3, [r7, #0]
   10cc8:	781b      	ldrb	r3, [r3, #0]
   10cca:	b25b      	sxtb	r3, r3
   10ccc:	2b00      	cmp	r3, #0
   10cce:	da07      	bge.n	10ce0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   10cd0:	79ba      	ldrb	r2, [r7, #6]
   10cd2:	79fb      	ldrb	r3, [r7, #7]
   10cd4:	6839      	ldr	r1, [r7, #0]
   10cd6:	4618      	mov	r0, r3
   10cd8:	4b09      	ldr	r3, [pc, #36]	; (10d00 <cdcdf_acm_req+0x80>)
   10cda:	4798      	blx	r3
   10cdc:	4603      	mov	r3, r0
   10cde:	e009      	b.n	10cf4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   10ce0:	79ba      	ldrb	r2, [r7, #6]
   10ce2:	79fb      	ldrb	r3, [r7, #7]
   10ce4:	6839      	ldr	r1, [r7, #0]
   10ce6:	4618      	mov	r0, r3
   10ce8:	4b06      	ldr	r3, [pc, #24]	; (10d04 <cdcdf_acm_req+0x84>)
   10cea:	4798      	blx	r3
   10cec:	4603      	mov	r3, r0
   10cee:	e001      	b.n	10cf4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   10cf0:	f06f 0309 	mvn.w	r3, #9
	}
}
   10cf4:	4618      	mov	r0, r3
   10cf6:	3708      	adds	r7, #8
   10cf8:	46bd      	mov	sp, r7
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	20001d8c 	.word	0x20001d8c
   10d00:	00010c21 	.word	0x00010c21
   10d04:	00010b41 	.word	0x00010b41

00010d08 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   10d08:	b580      	push	{r7, lr}
   10d0a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   10d0c:	4b0b      	ldr	r3, [pc, #44]	; (10d3c <cdcdf_acm_init+0x34>)
   10d0e:	4798      	blx	r3
   10d10:	4603      	mov	r3, r0
   10d12:	2b01      	cmp	r3, #1
   10d14:	d902      	bls.n	10d1c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   10d16:	f06f 0310 	mvn.w	r3, #16
   10d1a:	e00d      	b.n	10d38 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   10d1c:	4b08      	ldr	r3, [pc, #32]	; (10d40 <cdcdf_acm_init+0x38>)
   10d1e:	4a09      	ldr	r2, [pc, #36]	; (10d44 <cdcdf_acm_init+0x3c>)
   10d20:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   10d22:	4b07      	ldr	r3, [pc, #28]	; (10d40 <cdcdf_acm_init+0x38>)
   10d24:	4a08      	ldr	r2, [pc, #32]	; (10d48 <cdcdf_acm_init+0x40>)
   10d26:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   10d28:	4805      	ldr	r0, [pc, #20]	; (10d40 <cdcdf_acm_init+0x38>)
   10d2a:	4b08      	ldr	r3, [pc, #32]	; (10d4c <cdcdf_acm_init+0x44>)
   10d2c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   10d2e:	4908      	ldr	r1, [pc, #32]	; (10d50 <cdcdf_acm_init+0x48>)
   10d30:	2001      	movs	r0, #1
   10d32:	4b08      	ldr	r3, [pc, #32]	; (10d54 <cdcdf_acm_init+0x4c>)
   10d34:	4798      	blx	r3
	return ERR_NONE;
   10d36:	2300      	movs	r3, #0
}
   10d38:	4618      	mov	r0, r3
   10d3a:	bd80      	pop	{r7, pc}
   10d3c:	00011ba5 	.word	0x00011ba5
   10d40:	20001d80 	.word	0x20001d80
   10d44:	00010af1 	.word	0x00010af1
   10d48:	20001d8c 	.word	0x20001d8c
   10d4c:	00011b0d 	.word	0x00011b0d
   10d50:	200001dc 	.word	0x200001dc
   10d54:	00011a3d 	.word	0x00011a3d

00010d58 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   10d58:	b590      	push	{r4, r7, lr}
   10d5a:	b083      	sub	sp, #12
   10d5c:	af00      	add	r7, sp, #0
   10d5e:	6078      	str	r0, [r7, #4]
   10d60:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   10d62:	4b0b      	ldr	r3, [pc, #44]	; (10d90 <cdcdf_acm_read+0x38>)
   10d64:	4798      	blx	r3
   10d66:	4603      	mov	r3, r0
   10d68:	f083 0301 	eor.w	r3, r3, #1
   10d6c:	b2db      	uxtb	r3, r3
   10d6e:	2b00      	cmp	r3, #0
   10d70:	d002      	beq.n	10d78 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   10d72:	f06f 0310 	mvn.w	r3, #16
   10d76:	e007      	b.n	10d88 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   10d78:	4b06      	ldr	r3, [pc, #24]	; (10d94 <cdcdf_acm_read+0x3c>)
   10d7a:	7918      	ldrb	r0, [r3, #4]
   10d7c:	2300      	movs	r3, #0
   10d7e:	683a      	ldr	r2, [r7, #0]
   10d80:	6879      	ldr	r1, [r7, #4]
   10d82:	4c05      	ldr	r4, [pc, #20]	; (10d98 <cdcdf_acm_read+0x40>)
   10d84:	47a0      	blx	r4
   10d86:	4603      	mov	r3, r0
}
   10d88:	4618      	mov	r0, r3
   10d8a:	370c      	adds	r7, #12
   10d8c:	46bd      	mov	sp, r7
   10d8e:	bd90      	pop	{r4, r7, pc}
   10d90:	00010e7d 	.word	0x00010e7d
   10d94:	20001d8c 	.word	0x20001d8c
   10d98:	00011a01 	.word	0x00011a01

00010d9c <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   10d9c:	b590      	push	{r4, r7, lr}
   10d9e:	b083      	sub	sp, #12
   10da0:	af00      	add	r7, sp, #0
   10da2:	6078      	str	r0, [r7, #4]
   10da4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   10da6:	4b0b      	ldr	r3, [pc, #44]	; (10dd4 <cdcdf_acm_write+0x38>)
   10da8:	4798      	blx	r3
   10daa:	4603      	mov	r3, r0
   10dac:	f083 0301 	eor.w	r3, r3, #1
   10db0:	b2db      	uxtb	r3, r3
   10db2:	2b00      	cmp	r3, #0
   10db4:	d002      	beq.n	10dbc <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   10db6:	f06f 0310 	mvn.w	r3, #16
   10dba:	e007      	b.n	10dcc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   10dbc:	4b06      	ldr	r3, [pc, #24]	; (10dd8 <cdcdf_acm_write+0x3c>)
   10dbe:	78d8      	ldrb	r0, [r3, #3]
   10dc0:	2301      	movs	r3, #1
   10dc2:	683a      	ldr	r2, [r7, #0]
   10dc4:	6879      	ldr	r1, [r7, #4]
   10dc6:	4c05      	ldr	r4, [pc, #20]	; (10ddc <cdcdf_acm_write+0x40>)
   10dc8:	47a0      	blx	r4
   10dca:	4603      	mov	r3, r0
}
   10dcc:	4618      	mov	r0, r3
   10dce:	370c      	adds	r7, #12
   10dd0:	46bd      	mov	sp, r7
   10dd2:	bd90      	pop	{r4, r7, pc}
   10dd4:	00010e7d 	.word	0x00010e7d
   10dd8:	20001d8c 	.word	0x20001d8c
   10ddc:	00011a01 	.word	0x00011a01

00010de0 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   10de0:	b580      	push	{r7, lr}
   10de2:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   10de4:	4b05      	ldr	r3, [pc, #20]	; (10dfc <cdcdf_acm_stop_xfer+0x1c>)
   10de6:	78db      	ldrb	r3, [r3, #3]
   10de8:	4618      	mov	r0, r3
   10dea:	4b05      	ldr	r3, [pc, #20]	; (10e00 <cdcdf_acm_stop_xfer+0x20>)
   10dec:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   10dee:	4b03      	ldr	r3, [pc, #12]	; (10dfc <cdcdf_acm_stop_xfer+0x1c>)
   10df0:	791b      	ldrb	r3, [r3, #4]
   10df2:	4618      	mov	r0, r3
   10df4:	4b02      	ldr	r3, [pc, #8]	; (10e00 <cdcdf_acm_stop_xfer+0x20>)
   10df6:	4798      	blx	r3
}
   10df8:	bf00      	nop
   10dfa:	bd80      	pop	{r7, pc}
   10dfc:	20001d8c 	.word	0x20001d8c
   10e00:	00007965 	.word	0x00007965

00010e04 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   10e04:	b580      	push	{r7, lr}
   10e06:	b082      	sub	sp, #8
   10e08:	af00      	add	r7, sp, #0
   10e0a:	4603      	mov	r3, r0
   10e0c:	6039      	str	r1, [r7, #0]
   10e0e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   10e10:	79fb      	ldrb	r3, [r7, #7]
   10e12:	2b03      	cmp	r3, #3
   10e14:	d822      	bhi.n	10e5c <cdcdf_acm_register_callback+0x58>
   10e16:	a201      	add	r2, pc, #4	; (adr r2, 10e1c <cdcdf_acm_register_callback+0x18>)
   10e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10e1c:	00010e2d 	.word	0x00010e2d
   10e20:	00010e3d 	.word	0x00010e3d
   10e24:	00010e4d 	.word	0x00010e4d
   10e28:	00010e55 	.word	0x00010e55
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   10e2c:	4b0f      	ldr	r3, [pc, #60]	; (10e6c <cdcdf_acm_register_callback+0x68>)
   10e2e:	791b      	ldrb	r3, [r3, #4]
   10e30:	683a      	ldr	r2, [r7, #0]
   10e32:	2102      	movs	r1, #2
   10e34:	4618      	mov	r0, r3
   10e36:	4b0e      	ldr	r3, [pc, #56]	; (10e70 <cdcdf_acm_register_callback+0x6c>)
   10e38:	4798      	blx	r3
		break;
   10e3a:	e012      	b.n	10e62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   10e3c:	4b0b      	ldr	r3, [pc, #44]	; (10e6c <cdcdf_acm_register_callback+0x68>)
   10e3e:	78db      	ldrb	r3, [r3, #3]
   10e40:	683a      	ldr	r2, [r7, #0]
   10e42:	2102      	movs	r1, #2
   10e44:	4618      	mov	r0, r3
   10e46:	4b0a      	ldr	r3, [pc, #40]	; (10e70 <cdcdf_acm_register_callback+0x6c>)
   10e48:	4798      	blx	r3
		break;
   10e4a:	e00a      	b.n	10e62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   10e4c:	4a09      	ldr	r2, [pc, #36]	; (10e74 <cdcdf_acm_register_callback+0x70>)
   10e4e:	683b      	ldr	r3, [r7, #0]
   10e50:	6013      	str	r3, [r2, #0]
		break;
   10e52:	e006      	b.n	10e62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   10e54:	4a08      	ldr	r2, [pc, #32]	; (10e78 <cdcdf_acm_register_callback+0x74>)
   10e56:	683b      	ldr	r3, [r7, #0]
   10e58:	6013      	str	r3, [r2, #0]
		break;
   10e5a:	e002      	b.n	10e62 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   10e5c:	f06f 030c 	mvn.w	r3, #12
   10e60:	e000      	b.n	10e64 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   10e62:	2300      	movs	r3, #0
}
   10e64:	4618      	mov	r0, r3
   10e66:	3708      	adds	r7, #8
   10e68:	46bd      	mov	sp, r7
   10e6a:	bd80      	pop	{r7, pc}
   10e6c:	20001d8c 	.word	0x20001d8c
   10e70:	00007a91 	.word	0x00007a91
   10e74:	20001da0 	.word	0x20001da0
   10e78:	20001d9c 	.word	0x20001d9c

00010e7c <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   10e7c:	b480      	push	{r7}
   10e7e:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   10e80:	4b03      	ldr	r3, [pc, #12]	; (10e90 <cdcdf_acm_is_enabled+0x14>)
   10e82:	795b      	ldrb	r3, [r3, #5]
}
   10e84:	4618      	mov	r0, r3
   10e86:	46bd      	mov	sp, r7
   10e88:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e8c:	4770      	bx	lr
   10e8e:	bf00      	nop
   10e90:	20001d8c 	.word	0x20001d8c

00010e94 <usb_get_u16>:
{
   10e94:	b480      	push	{r7}
   10e96:	b083      	sub	sp, #12
   10e98:	af00      	add	r7, sp, #0
   10e9a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10e9c:	687b      	ldr	r3, [r7, #4]
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	b29a      	uxth	r2, r3
   10ea2:	687b      	ldr	r3, [r7, #4]
   10ea4:	3301      	adds	r3, #1
   10ea6:	781b      	ldrb	r3, [r3, #0]
   10ea8:	b29b      	uxth	r3, r3
   10eaa:	021b      	lsls	r3, r3, #8
   10eac:	b29b      	uxth	r3, r3
   10eae:	4413      	add	r3, r2
   10eb0:	b29b      	uxth	r3, r3
}
   10eb2:	4618      	mov	r0, r3
   10eb4:	370c      	adds	r7, #12
   10eb6:	46bd      	mov	sp, r7
   10eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ebc:	4770      	bx	lr

00010ebe <usb_desc_len>:
{
   10ebe:	b480      	push	{r7}
   10ec0:	b083      	sub	sp, #12
   10ec2:	af00      	add	r7, sp, #0
   10ec4:	6078      	str	r0, [r7, #4]
	return desc[0];
   10ec6:	687b      	ldr	r3, [r7, #4]
   10ec8:	781b      	ldrb	r3, [r3, #0]
}
   10eca:	4618      	mov	r0, r3
   10ecc:	370c      	adds	r7, #12
   10ece:	46bd      	mov	sp, r7
   10ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ed4:	4770      	bx	lr
	...

00010ed8 <usb_desc_next>:
{
   10ed8:	b580      	push	{r7, lr}
   10eda:	b082      	sub	sp, #8
   10edc:	af00      	add	r7, sp, #0
   10ede:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10ee0:	6878      	ldr	r0, [r7, #4]
   10ee2:	4b05      	ldr	r3, [pc, #20]	; (10ef8 <usb_desc_next+0x20>)
   10ee4:	4798      	blx	r3
   10ee6:	4603      	mov	r3, r0
   10ee8:	461a      	mov	r2, r3
   10eea:	687b      	ldr	r3, [r7, #4]
   10eec:	4413      	add	r3, r2
}
   10eee:	4618      	mov	r0, r3
   10ef0:	3708      	adds	r7, #8
   10ef2:	46bd      	mov	sp, r7
   10ef4:	bd80      	pop	{r7, pc}
   10ef6:	bf00      	nop
   10ef8:	00010ebf 	.word	0x00010ebf

00010efc <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   10efc:	b580      	push	{r7, lr}
   10efe:	b082      	sub	sp, #8
   10f00:	af00      	add	r7, sp, #0
   10f02:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10f04:	687b      	ldr	r3, [r7, #4]
   10f06:	3302      	adds	r3, #2
   10f08:	4618      	mov	r0, r3
   10f0a:	4b03      	ldr	r3, [pc, #12]	; (10f18 <usb_cfg_desc_total_len+0x1c>)
   10f0c:	4798      	blx	r3
   10f0e:	4603      	mov	r3, r0
}
   10f10:	4618      	mov	r0, r3
   10f12:	3708      	adds	r7, #8
   10f14:	46bd      	mov	sp, r7
   10f16:	bd80      	pop	{r7, pc}
   10f18:	00010e95 	.word	0x00010e95

00010f1c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   10f1c:	b590      	push	{r4, r7, lr}
   10f1e:	b085      	sub	sp, #20
   10f20:	af00      	add	r7, sp, #0
   10f22:	4603      	mov	r3, r0
   10f24:	6039      	str	r1, [r7, #0]
   10f26:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   10f28:	2300      	movs	r3, #0
   10f2a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   10f2c:	683b      	ldr	r3, [r7, #0]
   10f2e:	799a      	ldrb	r2, [r3, #6]
   10f30:	79db      	ldrb	r3, [r3, #7]
   10f32:	021b      	lsls	r3, r3, #8
   10f34:	4313      	orrs	r3, r2
   10f36:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   10f38:	897b      	ldrh	r3, [r7, #10]
   10f3a:	2b12      	cmp	r3, #18
   10f3c:	d901      	bls.n	10f42 <usbdc_get_dev_desc+0x26>
		length = 0x12;
   10f3e:	2312      	movs	r3, #18
   10f40:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   10f42:	68fb      	ldr	r3, [r7, #12]
   10f44:	2b00      	cmp	r3, #0
   10f46:	d10a      	bne.n	10f5e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   10f48:	4b0f      	ldr	r3, [pc, #60]	; (10f88 <usbdc_get_dev_desc+0x6c>)
   10f4a:	681b      	ldr	r3, [r3, #0]
   10f4c:	6818      	ldr	r0, [r3, #0]
   10f4e:	4b0e      	ldr	r3, [pc, #56]	; (10f88 <usbdc_get_dev_desc+0x6c>)
   10f50:	681b      	ldr	r3, [r3, #0]
   10f52:	685b      	ldr	r3, [r3, #4]
   10f54:	2201      	movs	r2, #1
   10f56:	4619      	mov	r1, r3
   10f58:	4b0c      	ldr	r3, [pc, #48]	; (10f8c <usbdc_get_dev_desc+0x70>)
   10f5a:	4798      	blx	r3
   10f5c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   10f5e:	68fb      	ldr	r3, [r7, #12]
   10f60:	2b00      	cmp	r3, #0
   10f62:	d101      	bne.n	10f68 <usbdc_get_dev_desc+0x4c>
		return false;
   10f64:	2300      	movs	r3, #0
   10f66:	e00b      	b.n	10f80 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   10f68:	897a      	ldrh	r2, [r7, #10]
   10f6a:	79f8      	ldrb	r0, [r7, #7]
   10f6c:	2300      	movs	r3, #0
   10f6e:	68f9      	ldr	r1, [r7, #12]
   10f70:	4c07      	ldr	r4, [pc, #28]	; (10f90 <usbdc_get_dev_desc+0x74>)
   10f72:	47a0      	blx	r4
   10f74:	4603      	mov	r3, r0
   10f76:	2b00      	cmp	r3, #0
   10f78:	d001      	beq.n	10f7e <usbdc_get_dev_desc+0x62>
		return false;
   10f7a:	2300      	movs	r3, #0
   10f7c:	e000      	b.n	10f80 <usbdc_get_dev_desc+0x64>
	}
	return true;
   10f7e:	2301      	movs	r3, #1
}
   10f80:	4618      	mov	r0, r3
   10f82:	3714      	adds	r7, #20
   10f84:	46bd      	mov	sp, r7
   10f86:	bd90      	pop	{r4, r7, pc}
   10f88:	20001da4 	.word	0x20001da4
   10f8c:	00011c91 	.word	0x00011c91
   10f90:	00011a01 	.word	0x00011a01

00010f94 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   10f94:	b590      	push	{r4, r7, lr}
   10f96:	b087      	sub	sp, #28
   10f98:	af00      	add	r7, sp, #0
   10f9a:	4603      	mov	r3, r0
   10f9c:	6039      	str	r1, [r7, #0]
   10f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   10fa0:	2300      	movs	r3, #0
   10fa2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   10fa4:	683b      	ldr	r3, [r7, #0]
   10fa6:	799a      	ldrb	r2, [r3, #6]
   10fa8:	79db      	ldrb	r3, [r3, #7]
   10faa:	021b      	lsls	r3, r3, #8
   10fac:	4313      	orrs	r3, r2
   10fae:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   10fb0:	683b      	ldr	r3, [r7, #0]
   10fb2:	885b      	ldrh	r3, [r3, #2]
   10fb4:	b29b      	uxth	r3, r3
   10fb6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   10fb8:	8a7a      	ldrh	r2, [r7, #18]
   10fba:	4b1e      	ldr	r3, [pc, #120]	; (11034 <usbdc_get_cfg_desc+0xa0>)
   10fbc:	7f1b      	ldrb	r3, [r3, #28]
   10fbe:	3b01      	subs	r3, #1
   10fc0:	4013      	ands	r3, r2
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	bf0c      	ite	eq
   10fc6:	2301      	moveq	r3, #1
   10fc8:	2300      	movne	r3, #0
   10fca:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   10fcc:	697b      	ldr	r3, [r7, #20]
   10fce:	2b00      	cmp	r3, #0
   10fd0:	d10c      	bne.n	10fec <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   10fd2:	4b18      	ldr	r3, [pc, #96]	; (11034 <usbdc_get_cfg_desc+0xa0>)
   10fd4:	681b      	ldr	r3, [r3, #0]
   10fd6:	6818      	ldr	r0, [r3, #0]
   10fd8:	4b16      	ldr	r3, [pc, #88]	; (11034 <usbdc_get_cfg_desc+0xa0>)
   10fda:	681b      	ldr	r3, [r3, #0]
   10fdc:	6859      	ldr	r1, [r3, #4]
   10fde:	7c3b      	ldrb	r3, [r7, #16]
   10fe0:	3301      	adds	r3, #1
   10fe2:	b2db      	uxtb	r3, r3
   10fe4:	461a      	mov	r2, r3
   10fe6:	4b14      	ldr	r3, [pc, #80]	; (11038 <usbdc_get_cfg_desc+0xa4>)
   10fe8:	4798      	blx	r3
   10fea:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   10fec:	697b      	ldr	r3, [r7, #20]
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d101      	bne.n	10ff6 <usbdc_get_cfg_desc+0x62>
		return false;
   10ff2:	2300      	movs	r3, #0
   10ff4:	e019      	b.n	1102a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   10ff6:	6978      	ldr	r0, [r7, #20]
   10ff8:	4b10      	ldr	r3, [pc, #64]	; (1103c <usbdc_get_cfg_desc+0xa8>)
   10ffa:	4798      	blx	r3
   10ffc:	4603      	mov	r3, r0
   10ffe:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11000:	8a7a      	ldrh	r2, [r7, #18]
   11002:	89fb      	ldrh	r3, [r7, #14]
   11004:	429a      	cmp	r2, r3
   11006:	d802      	bhi.n	1100e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11008:	2300      	movs	r3, #0
   1100a:	747b      	strb	r3, [r7, #17]
   1100c:	e001      	b.n	11012 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   1100e:	89fb      	ldrh	r3, [r7, #14]
   11010:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11012:	8a7a      	ldrh	r2, [r7, #18]
   11014:	7c7b      	ldrb	r3, [r7, #17]
   11016:	79f8      	ldrb	r0, [r7, #7]
   11018:	6979      	ldr	r1, [r7, #20]
   1101a:	4c09      	ldr	r4, [pc, #36]	; (11040 <usbdc_get_cfg_desc+0xac>)
   1101c:	47a0      	blx	r4
   1101e:	4603      	mov	r3, r0
   11020:	2b00      	cmp	r3, #0
   11022:	d001      	beq.n	11028 <usbdc_get_cfg_desc+0x94>
		return false;
   11024:	2300      	movs	r3, #0
   11026:	e000      	b.n	1102a <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11028:	2301      	movs	r3, #1
}
   1102a:	4618      	mov	r0, r3
   1102c:	371c      	adds	r7, #28
   1102e:	46bd      	mov	sp, r7
   11030:	bd90      	pop	{r4, r7, pc}
   11032:	bf00      	nop
   11034:	20001da4 	.word	0x20001da4
   11038:	00011d51 	.word	0x00011d51
   1103c:	00010efd 	.word	0x00010efd
   11040:	00011a01 	.word	0x00011a01

00011044 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11044:	b590      	push	{r4, r7, lr}
   11046:	b085      	sub	sp, #20
   11048:	af00      	add	r7, sp, #0
   1104a:	4603      	mov	r3, r0
   1104c:	6039      	str	r1, [r7, #0]
   1104e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11050:	683b      	ldr	r3, [r7, #0]
   11052:	799a      	ldrb	r2, [r3, #6]
   11054:	79db      	ldrb	r3, [r3, #7]
   11056:	021b      	lsls	r3, r3, #8
   11058:	4313      	orrs	r3, r2
   1105a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   1105c:	683b      	ldr	r3, [r7, #0]
   1105e:	885b      	ldrh	r3, [r3, #2]
   11060:	b29b      	uxth	r3, r3
   11062:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11064:	89fa      	ldrh	r2, [r7, #14]
   11066:	4b1a      	ldr	r3, [pc, #104]	; (110d0 <usbdc_get_str_desc+0x8c>)
   11068:	7f1b      	ldrb	r3, [r3, #28]
   1106a:	3b01      	subs	r3, #1
   1106c:	4013      	ands	r3, r2
   1106e:	2b00      	cmp	r3, #0
   11070:	bf0c      	ite	eq
   11072:	2301      	moveq	r3, #1
   11074:	2300      	movne	r3, #0
   11076:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11078:	4b15      	ldr	r3, [pc, #84]	; (110d0 <usbdc_get_str_desc+0x8c>)
   1107a:	681b      	ldr	r3, [r3, #0]
   1107c:	6818      	ldr	r0, [r3, #0]
   1107e:	4b14      	ldr	r3, [pc, #80]	; (110d0 <usbdc_get_str_desc+0x8c>)
   11080:	681b      	ldr	r3, [r3, #0]
   11082:	685b      	ldr	r3, [r3, #4]
   11084:	7b3a      	ldrb	r2, [r7, #12]
   11086:	4619      	mov	r1, r3
   11088:	4b12      	ldr	r3, [pc, #72]	; (110d4 <usbdc_get_str_desc+0x90>)
   1108a:	4798      	blx	r3
   1108c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   1108e:	68bb      	ldr	r3, [r7, #8]
   11090:	2b00      	cmp	r3, #0
   11092:	d101      	bne.n	11098 <usbdc_get_str_desc+0x54>
		return false;
   11094:	2300      	movs	r3, #0
   11096:	e017      	b.n	110c8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11098:	68bb      	ldr	r3, [r7, #8]
   1109a:	781b      	ldrb	r3, [r3, #0]
   1109c:	b29b      	uxth	r3, r3
   1109e:	89fa      	ldrh	r2, [r7, #14]
   110a0:	429a      	cmp	r2, r3
   110a2:	d802      	bhi.n	110aa <usbdc_get_str_desc+0x66>
		need_zlp = false;
   110a4:	2300      	movs	r3, #0
   110a6:	737b      	strb	r3, [r7, #13]
   110a8:	e002      	b.n	110b0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   110aa:	68bb      	ldr	r3, [r7, #8]
   110ac:	781b      	ldrb	r3, [r3, #0]
   110ae:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   110b0:	89fa      	ldrh	r2, [r7, #14]
   110b2:	7b7b      	ldrb	r3, [r7, #13]
   110b4:	79f8      	ldrb	r0, [r7, #7]
   110b6:	68b9      	ldr	r1, [r7, #8]
   110b8:	4c07      	ldr	r4, [pc, #28]	; (110d8 <usbdc_get_str_desc+0x94>)
   110ba:	47a0      	blx	r4
   110bc:	4603      	mov	r3, r0
   110be:	2b00      	cmp	r3, #0
   110c0:	d001      	beq.n	110c6 <usbdc_get_str_desc+0x82>
		return false;
   110c2:	2300      	movs	r3, #0
   110c4:	e000      	b.n	110c8 <usbdc_get_str_desc+0x84>
	}
	return true;
   110c6:	2301      	movs	r3, #1
}
   110c8:	4618      	mov	r0, r3
   110ca:	3714      	adds	r7, #20
   110cc:	46bd      	mov	sp, r7
   110ce:	bd90      	pop	{r4, r7, pc}
   110d0:	20001da4 	.word	0x20001da4
   110d4:	00011dc9 	.word	0x00011dc9
   110d8:	00011a01 	.word	0x00011a01

000110dc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   110dc:	b580      	push	{r7, lr}
   110de:	b084      	sub	sp, #16
   110e0:	af00      	add	r7, sp, #0
   110e2:	4603      	mov	r3, r0
   110e4:	6039      	str	r1, [r7, #0]
   110e6:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   110e8:	683b      	ldr	r3, [r7, #0]
   110ea:	885b      	ldrh	r3, [r3, #2]
   110ec:	b29b      	uxth	r3, r3
   110ee:	0a1b      	lsrs	r3, r3, #8
   110f0:	b29b      	uxth	r3, r3
   110f2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   110f4:	7bfb      	ldrb	r3, [r7, #15]
   110f6:	2b02      	cmp	r3, #2
   110f8:	d00d      	beq.n	11116 <usbdc_get_desc_req+0x3a>
   110fa:	2b03      	cmp	r3, #3
   110fc:	d012      	beq.n	11124 <usbdc_get_desc_req+0x48>
   110fe:	2b01      	cmp	r3, #1
   11100:	d002      	beq.n	11108 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11102:	bf00      	nop
	}
	return false;
   11104:	2300      	movs	r3, #0
   11106:	e013      	b.n	11130 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11108:	79fb      	ldrb	r3, [r7, #7]
   1110a:	6839      	ldr	r1, [r7, #0]
   1110c:	4618      	mov	r0, r3
   1110e:	4b0a      	ldr	r3, [pc, #40]	; (11138 <usbdc_get_desc_req+0x5c>)
   11110:	4798      	blx	r3
   11112:	4603      	mov	r3, r0
   11114:	e00c      	b.n	11130 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   11116:	79fb      	ldrb	r3, [r7, #7]
   11118:	6839      	ldr	r1, [r7, #0]
   1111a:	4618      	mov	r0, r3
   1111c:	4b07      	ldr	r3, [pc, #28]	; (1113c <usbdc_get_desc_req+0x60>)
   1111e:	4798      	blx	r3
   11120:	4603      	mov	r3, r0
   11122:	e005      	b.n	11130 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11124:	79fb      	ldrb	r3, [r7, #7]
   11126:	6839      	ldr	r1, [r7, #0]
   11128:	4618      	mov	r0, r3
   1112a:	4b05      	ldr	r3, [pc, #20]	; (11140 <usbdc_get_desc_req+0x64>)
   1112c:	4798      	blx	r3
   1112e:	4603      	mov	r3, r0
}
   11130:	4618      	mov	r0, r3
   11132:	3710      	adds	r7, #16
   11134:	46bd      	mov	sp, r7
   11136:	bd80      	pop	{r7, pc}
   11138:	00010f1d 	.word	0x00010f1d
   1113c:	00010f95 	.word	0x00010f95
   11140:	00011045 	.word	0x00011045

00011144 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11144:	b590      	push	{r4, r7, lr}
   11146:	b085      	sub	sp, #20
   11148:	af00      	add	r7, sp, #0
   1114a:	4603      	mov	r3, r0
   1114c:	6039      	str	r1, [r7, #0]
   1114e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11150:	683b      	ldr	r3, [r7, #0]
   11152:	781b      	ldrb	r3, [r3, #0]
   11154:	f003 031f 	and.w	r3, r3, #31
   11158:	2b00      	cmp	r3, #0
   1115a:	db1b      	blt.n	11194 <usbdc_get_status_req+0x50>
   1115c:	2b01      	cmp	r3, #1
   1115e:	dd02      	ble.n	11166 <usbdc_get_status_req+0x22>
   11160:	2b02      	cmp	r3, #2
   11162:	d003      	beq.n	1116c <usbdc_get_status_req+0x28>
   11164:	e016      	b.n	11194 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   11166:	2300      	movs	r3, #0
   11168:	60fb      	str	r3, [r7, #12]
		break;
   1116a:	e015      	b.n	11198 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   1116c:	683b      	ldr	r3, [r7, #0]
   1116e:	889b      	ldrh	r3, [r3, #4]
   11170:	b29b      	uxth	r3, r3
   11172:	b2db      	uxtb	r3, r3
   11174:	2102      	movs	r1, #2
   11176:	4618      	mov	r0, r3
   11178:	4b0f      	ldr	r3, [pc, #60]	; (111b8 <usbdc_get_status_req+0x74>)
   1117a:	4798      	blx	r3
   1117c:	4603      	mov	r3, r0
   1117e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11180:	68fb      	ldr	r3, [r7, #12]
   11182:	2b00      	cmp	r3, #0
   11184:	da01      	bge.n	1118a <usbdc_get_status_req+0x46>
			return false;
   11186:	2300      	movs	r3, #0
   11188:	e012      	b.n	111b0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   1118a:	68fb      	ldr	r3, [r7, #12]
   1118c:	f003 0301 	and.w	r3, r3, #1
   11190:	60fb      	str	r3, [r7, #12]
		break;
   11192:	e001      	b.n	11198 <usbdc_get_status_req+0x54>
	default:
		return false;
   11194:	2300      	movs	r3, #0
   11196:	e00b      	b.n	111b0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   11198:	4b08      	ldr	r3, [pc, #32]	; (111bc <usbdc_get_status_req+0x78>)
   1119a:	695b      	ldr	r3, [r3, #20]
   1119c:	89ba      	ldrh	r2, [r7, #12]
   1119e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   111a0:	4b06      	ldr	r3, [pc, #24]	; (111bc <usbdc_get_status_req+0x78>)
   111a2:	6959      	ldr	r1, [r3, #20]
   111a4:	79f8      	ldrb	r0, [r7, #7]
   111a6:	2300      	movs	r3, #0
   111a8:	2202      	movs	r2, #2
   111aa:	4c05      	ldr	r4, [pc, #20]	; (111c0 <usbdc_get_status_req+0x7c>)
   111ac:	47a0      	blx	r4
	return true;
   111ae:	2301      	movs	r3, #1
}
   111b0:	4618      	mov	r0, r3
   111b2:	3714      	adds	r7, #20
   111b4:	46bd      	mov	sp, r7
   111b6:	bd90      	pop	{r4, r7, pc}
   111b8:	00007a3d 	.word	0x00007a3d
   111bc:	20001da4 	.word	0x20001da4
   111c0:	00011a01 	.word	0x00011a01

000111c4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   111c4:	b590      	push	{r4, r7, lr}
   111c6:	b085      	sub	sp, #20
   111c8:	af00      	add	r7, sp, #0
   111ca:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   111cc:	4b1f      	ldr	r3, [pc, #124]	; (1124c <usbdc_get_interface+0x88>)
   111ce:	691b      	ldr	r3, [r3, #16]
   111d0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   111d2:	4b1e      	ldr	r3, [pc, #120]	; (1124c <usbdc_get_interface+0x88>)
   111d4:	7f5b      	ldrb	r3, [r3, #29]
   111d6:	461a      	mov	r2, r3
   111d8:	687b      	ldr	r3, [r7, #4]
   111da:	889b      	ldrh	r3, [r3, #4]
   111dc:	b29b      	uxth	r3, r3
   111de:	fa42 f303 	asr.w	r3, r2, r3
   111e2:	f003 0301 	and.w	r3, r3, #1
   111e6:	2b00      	cmp	r3, #0
   111e8:	d128      	bne.n	1123c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   111ea:	4b18      	ldr	r3, [pc, #96]	; (1124c <usbdc_get_interface+0x88>)
   111ec:	695b      	ldr	r3, [r3, #20]
   111ee:	2200      	movs	r2, #0
   111f0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   111f2:	4b16      	ldr	r3, [pc, #88]	; (1124c <usbdc_get_interface+0x88>)
   111f4:	6959      	ldr	r1, [r3, #20]
   111f6:	2300      	movs	r3, #0
   111f8:	2201      	movs	r2, #1
   111fa:	2000      	movs	r0, #0
   111fc:	4c14      	ldr	r4, [pc, #80]	; (11250 <usbdc_get_interface+0x8c>)
   111fe:	47a0      	blx	r4
		return true;
   11200:	2301      	movs	r3, #1
   11202:	e01f      	b.n	11244 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11204:	68fb      	ldr	r3, [r7, #12]
   11206:	685b      	ldr	r3, [r3, #4]
   11208:	687a      	ldr	r2, [r7, #4]
   1120a:	2102      	movs	r1, #2
   1120c:	68f8      	ldr	r0, [r7, #12]
   1120e:	4798      	blx	r3
   11210:	60b8      	str	r0, [r7, #8]
   11212:	68bb      	ldr	r3, [r7, #8]
   11214:	2b00      	cmp	r3, #0
   11216:	da03      	bge.n	11220 <usbdc_get_interface+0x5c>
			func = func->next;
   11218:	68fb      	ldr	r3, [r7, #12]
   1121a:	681b      	ldr	r3, [r3, #0]
   1121c:	60fb      	str	r3, [r7, #12]
   1121e:	e00d      	b.n	1123c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11220:	4b0a      	ldr	r3, [pc, #40]	; (1124c <usbdc_get_interface+0x88>)
   11222:	695b      	ldr	r3, [r3, #20]
   11224:	68ba      	ldr	r2, [r7, #8]
   11226:	b2d2      	uxtb	r2, r2
   11228:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1122a:	4b08      	ldr	r3, [pc, #32]	; (1124c <usbdc_get_interface+0x88>)
   1122c:	6959      	ldr	r1, [r3, #20]
   1122e:	2300      	movs	r3, #0
   11230:	2201      	movs	r2, #1
   11232:	2000      	movs	r0, #0
   11234:	4c06      	ldr	r4, [pc, #24]	; (11250 <usbdc_get_interface+0x8c>)
   11236:	47a0      	blx	r4
			return true;
   11238:	2301      	movs	r3, #1
   1123a:	e003      	b.n	11244 <usbdc_get_interface+0x80>
	while (NULL != func) {
   1123c:	68fb      	ldr	r3, [r7, #12]
   1123e:	2b00      	cmp	r3, #0
   11240:	d1e0      	bne.n	11204 <usbdc_get_interface+0x40>
		}
	}
	return false;
   11242:	2300      	movs	r3, #0
}
   11244:	4618      	mov	r0, r3
   11246:	3714      	adds	r7, #20
   11248:	46bd      	mov	sp, r7
   1124a:	bd90      	pop	{r4, r7, pc}
   1124c:	20001da4 	.word	0x20001da4
   11250:	00011a01 	.word	0x00011a01

00011254 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11254:	b590      	push	{r4, r7, lr}
   11256:	b083      	sub	sp, #12
   11258:	af00      	add	r7, sp, #0
   1125a:	4603      	mov	r3, r0
   1125c:	6039      	str	r1, [r7, #0]
   1125e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11260:	683b      	ldr	r3, [r7, #0]
   11262:	785b      	ldrb	r3, [r3, #1]
   11264:	2b0a      	cmp	r3, #10
   11266:	d83a      	bhi.n	112de <usbdc_get_req+0x8a>
   11268:	a201      	add	r2, pc, #4	; (adr r2, 11270 <usbdc_get_req+0x1c>)
   1126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1126e:	bf00      	nop
   11270:	000112c7 	.word	0x000112c7
   11274:	000112df 	.word	0x000112df
   11278:	000112df 	.word	0x000112df
   1127c:	000112df 	.word	0x000112df
   11280:	000112df 	.word	0x000112df
   11284:	000112df 	.word	0x000112df
   11288:	0001129d 	.word	0x0001129d
   1128c:	000112df 	.word	0x000112df
   11290:	000112ab 	.word	0x000112ab
   11294:	000112df 	.word	0x000112df
   11298:	000112d5 	.word	0x000112d5
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   1129c:	79fb      	ldrb	r3, [r7, #7]
   1129e:	6839      	ldr	r1, [r7, #0]
   112a0:	4618      	mov	r0, r3
   112a2:	4b11      	ldr	r3, [pc, #68]	; (112e8 <usbdc_get_req+0x94>)
   112a4:	4798      	blx	r3
   112a6:	4603      	mov	r3, r0
   112a8:	e01a      	b.n	112e0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   112aa:	4b10      	ldr	r3, [pc, #64]	; (112ec <usbdc_get_req+0x98>)
   112ac:	695b      	ldr	r3, [r3, #20]
   112ae:	4a0f      	ldr	r2, [pc, #60]	; (112ec <usbdc_get_req+0x98>)
   112b0:	7ed2      	ldrb	r2, [r2, #27]
   112b2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   112b4:	4b0d      	ldr	r3, [pc, #52]	; (112ec <usbdc_get_req+0x98>)
   112b6:	6959      	ldr	r1, [r3, #20]
   112b8:	79f8      	ldrb	r0, [r7, #7]
   112ba:	2300      	movs	r3, #0
   112bc:	2201      	movs	r2, #1
   112be:	4c0c      	ldr	r4, [pc, #48]	; (112f0 <usbdc_get_req+0x9c>)
   112c0:	47a0      	blx	r4
		return true;
   112c2:	2301      	movs	r3, #1
   112c4:	e00c      	b.n	112e0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   112c6:	79fb      	ldrb	r3, [r7, #7]
   112c8:	6839      	ldr	r1, [r7, #0]
   112ca:	4618      	mov	r0, r3
   112cc:	4b09      	ldr	r3, [pc, #36]	; (112f4 <usbdc_get_req+0xa0>)
   112ce:	4798      	blx	r3
   112d0:	4603      	mov	r3, r0
   112d2:	e005      	b.n	112e0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   112d4:	6838      	ldr	r0, [r7, #0]
   112d6:	4b08      	ldr	r3, [pc, #32]	; (112f8 <usbdc_get_req+0xa4>)
   112d8:	4798      	blx	r3
   112da:	4603      	mov	r3, r0
   112dc:	e000      	b.n	112e0 <usbdc_get_req+0x8c>
	default:
		return false;
   112de:	2300      	movs	r3, #0
	}
}
   112e0:	4618      	mov	r0, r3
   112e2:	370c      	adds	r7, #12
   112e4:	46bd      	mov	sp, r7
   112e6:	bd90      	pop	{r4, r7, pc}
   112e8:	000110dd 	.word	0x000110dd
   112ec:	20001da4 	.word	0x20001da4
   112f0:	00011a01 	.word	0x00011a01
   112f4:	00011145 	.word	0x00011145
   112f8:	000111c5 	.word	0x000111c5

000112fc <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   112fc:	b590      	push	{r4, r7, lr}
   112fe:	b083      	sub	sp, #12
   11300:	af00      	add	r7, sp, #0
   11302:	4603      	mov	r3, r0
   11304:	6039      	str	r1, [r7, #0]
   11306:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11308:	683b      	ldr	r3, [r7, #0]
   1130a:	781b      	ldrb	r3, [r3, #0]
   1130c:	f003 031f 	and.w	r3, r3, #31
   11310:	2b02      	cmp	r3, #2
   11312:	d116      	bne.n	11342 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11314:	683b      	ldr	r3, [r7, #0]
   11316:	88db      	ldrh	r3, [r3, #6]
   11318:	b29b      	uxth	r3, r3
   1131a:	2b00      	cmp	r3, #0
   1131c:	d001      	beq.n	11322 <usbdc_clear_ftr_req+0x26>
			return false;
   1131e:	2300      	movs	r3, #0
   11320:	e010      	b.n	11344 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11322:	683b      	ldr	r3, [r7, #0]
   11324:	889b      	ldrh	r3, [r3, #4]
   11326:	b29b      	uxth	r3, r3
   11328:	b2db      	uxtb	r3, r3
   1132a:	2100      	movs	r1, #0
   1132c:	4618      	mov	r0, r3
   1132e:	4b07      	ldr	r3, [pc, #28]	; (1134c <usbdc_clear_ftr_req+0x50>)
   11330:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11332:	79f8      	ldrb	r0, [r7, #7]
   11334:	2301      	movs	r3, #1
   11336:	2200      	movs	r2, #0
   11338:	2100      	movs	r1, #0
   1133a:	4c05      	ldr	r4, [pc, #20]	; (11350 <usbdc_clear_ftr_req+0x54>)
   1133c:	47a0      	blx	r4
		return true;
   1133e:	2301      	movs	r3, #1
   11340:	e000      	b.n	11344 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   11342:	2300      	movs	r3, #0
	}
}
   11344:	4618      	mov	r0, r3
   11346:	370c      	adds	r7, #12
   11348:	46bd      	mov	sp, r7
   1134a:	bd90      	pop	{r4, r7, pc}
   1134c:	00007a3d 	.word	0x00007a3d
   11350:	00011a01 	.word	0x00011a01

00011354 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11354:	b590      	push	{r4, r7, lr}
   11356:	b083      	sub	sp, #12
   11358:	af00      	add	r7, sp, #0
   1135a:	4603      	mov	r3, r0
   1135c:	6039      	str	r1, [r7, #0]
   1135e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11360:	683b      	ldr	r3, [r7, #0]
   11362:	781b      	ldrb	r3, [r3, #0]
   11364:	f003 031f 	and.w	r3, r3, #31
   11368:	2b02      	cmp	r3, #2
   1136a:	d116      	bne.n	1139a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   1136c:	683b      	ldr	r3, [r7, #0]
   1136e:	88db      	ldrh	r3, [r3, #6]
   11370:	b29b      	uxth	r3, r3
   11372:	2b00      	cmp	r3, #0
   11374:	d001      	beq.n	1137a <usbdc_set_ftr_req+0x26>
			return false;
   11376:	2300      	movs	r3, #0
   11378:	e010      	b.n	1139c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   1137a:	683b      	ldr	r3, [r7, #0]
   1137c:	889b      	ldrh	r3, [r3, #4]
   1137e:	b29b      	uxth	r3, r3
   11380:	b2db      	uxtb	r3, r3
   11382:	2101      	movs	r1, #1
   11384:	4618      	mov	r0, r3
   11386:	4b07      	ldr	r3, [pc, #28]	; (113a4 <usbdc_set_ftr_req+0x50>)
   11388:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1138a:	79f8      	ldrb	r0, [r7, #7]
   1138c:	2301      	movs	r3, #1
   1138e:	2200      	movs	r2, #0
   11390:	2100      	movs	r1, #0
   11392:	4c05      	ldr	r4, [pc, #20]	; (113a8 <usbdc_set_ftr_req+0x54>)
   11394:	47a0      	blx	r4
		return true;
   11396:	2301      	movs	r3, #1
   11398:	e000      	b.n	1139c <usbdc_set_ftr_req+0x48>
	default:
		return false;
   1139a:	2300      	movs	r3, #0
	}
}
   1139c:	4618      	mov	r0, r3
   1139e:	370c      	adds	r7, #12
   113a0:	46bd      	mov	sp, r7
   113a2:	bd90      	pop	{r4, r7, pc}
   113a4:	00007a3d 	.word	0x00007a3d
   113a8:	00011a01 	.word	0x00011a01

000113ac <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   113ac:	b580      	push	{r7, lr}
   113ae:	b082      	sub	sp, #8
   113b0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   113b2:	4b0a      	ldr	r3, [pc, #40]	; (113dc <usbdc_unconfig+0x30>)
   113b4:	691b      	ldr	r3, [r3, #16]
   113b6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   113b8:	e008      	b.n	113cc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   113ba:	687b      	ldr	r3, [r7, #4]
   113bc:	685b      	ldr	r3, [r3, #4]
   113be:	2200      	movs	r2, #0
   113c0:	2101      	movs	r1, #1
   113c2:	6878      	ldr	r0, [r7, #4]
   113c4:	4798      	blx	r3
		func = func->next;
   113c6:	687b      	ldr	r3, [r7, #4]
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   113cc:	687b      	ldr	r3, [r7, #4]
   113ce:	2b00      	cmp	r3, #0
   113d0:	d1f3      	bne.n	113ba <usbdc_unconfig+0xe>
	}
}
   113d2:	bf00      	nop
   113d4:	3708      	adds	r7, #8
   113d6:	46bd      	mov	sp, r7
   113d8:	bd80      	pop	{r7, pc}
   113da:	bf00      	nop
   113dc:	20001da4 	.word	0x20001da4

000113e0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   113e0:	b580      	push	{r7, lr}
   113e2:	b088      	sub	sp, #32
   113e4:	af00      	add	r7, sp, #0
   113e6:	4603      	mov	r3, r0
   113e8:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   113ea:	2300      	movs	r3, #0
   113ec:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   113ee:	23ff      	movs	r3, #255	; 0xff
   113f0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   113f2:	79fb      	ldrb	r3, [r7, #7]
   113f4:	2b00      	cmp	r3, #0
   113f6:	d103      	bne.n	11400 <usbdc_set_config+0x20>
		usbdc_unconfig();
   113f8:	4b2e      	ldr	r3, [pc, #184]	; (114b4 <usbdc_set_config+0xd4>)
   113fa:	4798      	blx	r3
		return true;
   113fc:	2301      	movs	r3, #1
   113fe:	e055      	b.n	114ac <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11400:	69bb      	ldr	r3, [r7, #24]
   11402:	2b00      	cmp	r3, #0
   11404:	d10a      	bne.n	1141c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   11406:	4b2c      	ldr	r3, [pc, #176]	; (114b8 <usbdc_set_config+0xd8>)
   11408:	681b      	ldr	r3, [r3, #0]
   1140a:	6818      	ldr	r0, [r3, #0]
   1140c:	4b2a      	ldr	r3, [pc, #168]	; (114b8 <usbdc_set_config+0xd8>)
   1140e:	681b      	ldr	r3, [r3, #0]
   11410:	685b      	ldr	r3, [r3, #4]
   11412:	79fa      	ldrb	r2, [r7, #7]
   11414:	4619      	mov	r1, r3
   11416:	4b29      	ldr	r3, [pc, #164]	; (114bc <usbdc_set_config+0xdc>)
   11418:	4798      	blx	r3
   1141a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   1141c:	69bb      	ldr	r3, [r7, #24]
   1141e:	2b00      	cmp	r3, #0
   11420:	d101      	bne.n	11426 <usbdc_set_config+0x46>
		return false;
   11422:	2300      	movs	r3, #0
   11424:	e042      	b.n	114ac <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   11426:	69b8      	ldr	r0, [r7, #24]
   11428:	4b25      	ldr	r3, [pc, #148]	; (114c0 <usbdc_set_config+0xe0>)
   1142a:	4798      	blx	r3
   1142c:	4603      	mov	r3, r0
   1142e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   11430:	8abb      	ldrh	r3, [r7, #20]
   11432:	69ba      	ldr	r2, [r7, #24]
   11434:	4413      	add	r3, r2
   11436:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11438:	693b      	ldr	r3, [r7, #16]
   1143a:	2204      	movs	r2, #4
   1143c:	4619      	mov	r1, r3
   1143e:	69b8      	ldr	r0, [r7, #24]
   11440:	4b20      	ldr	r3, [pc, #128]	; (114c4 <usbdc_set_config+0xe4>)
   11442:	4798      	blx	r3
   11444:	4603      	mov	r3, r0
   11446:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   11448:	e02c      	b.n	114a4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   1144a:	68fb      	ldr	r3, [r7, #12]
   1144c:	3302      	adds	r3, #2
   1144e:	781b      	ldrb	r3, [r3, #0]
   11450:	7dfa      	ldrb	r2, [r7, #23]
   11452:	429a      	cmp	r2, r3
   11454:	d018      	beq.n	11488 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   11456:	68fb      	ldr	r3, [r7, #12]
   11458:	789b      	ldrb	r3, [r3, #2]
   1145a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   1145c:	4b16      	ldr	r3, [pc, #88]	; (114b8 <usbdc_set_config+0xd8>)
   1145e:	691b      	ldr	r3, [r3, #16]
   11460:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11462:	e00c      	b.n	1147e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11464:	69fb      	ldr	r3, [r7, #28]
   11466:	685b      	ldr	r3, [r3, #4]
   11468:	f107 020c 	add.w	r2, r7, #12
   1146c:	2100      	movs	r1, #0
   1146e:	69f8      	ldr	r0, [r7, #28]
   11470:	4798      	blx	r3
   11472:	4603      	mov	r3, r0
   11474:	2b00      	cmp	r3, #0
   11476:	d006      	beq.n	11486 <usbdc_set_config+0xa6>
					func = func->next;
   11478:	69fb      	ldr	r3, [r7, #28]
   1147a:	681b      	ldr	r3, [r3, #0]
   1147c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1147e:	69fb      	ldr	r3, [r7, #28]
   11480:	2b00      	cmp	r3, #0
   11482:	d1ef      	bne.n	11464 <usbdc_set_config+0x84>
   11484:	e000      	b.n	11488 <usbdc_set_config+0xa8>
				} else {
					break;
   11486:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   11488:	68fb      	ldr	r3, [r7, #12]
   1148a:	4618      	mov	r0, r3
   1148c:	4b0e      	ldr	r3, [pc, #56]	; (114c8 <usbdc_set_config+0xe8>)
   1148e:	4798      	blx	r3
   11490:	4603      	mov	r3, r0
   11492:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11494:	68fb      	ldr	r3, [r7, #12]
   11496:	6939      	ldr	r1, [r7, #16]
   11498:	2204      	movs	r2, #4
   1149a:	4618      	mov	r0, r3
   1149c:	4b09      	ldr	r3, [pc, #36]	; (114c4 <usbdc_set_config+0xe4>)
   1149e:	4798      	blx	r3
   114a0:	4603      	mov	r3, r0
   114a2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   114a4:	68fb      	ldr	r3, [r7, #12]
   114a6:	2b00      	cmp	r3, #0
   114a8:	d1cf      	bne.n	1144a <usbdc_set_config+0x6a>
	}
	return true;
   114aa:	2301      	movs	r3, #1
}
   114ac:	4618      	mov	r0, r3
   114ae:	3720      	adds	r7, #32
   114b0:	46bd      	mov	sp, r7
   114b2:	bd80      	pop	{r7, pc}
   114b4:	000113ad 	.word	0x000113ad
   114b8:	20001da4 	.word	0x20001da4
   114bc:	00011d51 	.word	0x00011d51
   114c0:	00010efd 	.word	0x00010efd
   114c4:	00011c91 	.word	0x00011c91
   114c8:	00010ed9 	.word	0x00010ed9

000114cc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   114cc:	b580      	push	{r7, lr}
   114ce:	b082      	sub	sp, #8
   114d0:	af00      	add	r7, sp, #0
   114d2:	4603      	mov	r3, r0
   114d4:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   114d6:	79fb      	ldrb	r3, [r7, #7]
   114d8:	4618      	mov	r0, r3
   114da:	4b03      	ldr	r3, [pc, #12]	; (114e8 <usbdc_set_address+0x1c>)
   114dc:	4798      	blx	r3
}
   114de:	bf00      	nop
   114e0:	3708      	adds	r7, #8
   114e2:	46bd      	mov	sp, r7
   114e4:	bd80      	pop	{r7, pc}
   114e6:	bf00      	nop
   114e8:	00007659 	.word	0x00007659

000114ec <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   114ec:	b590      	push	{r4, r7, lr}
   114ee:	b087      	sub	sp, #28
   114f0:	af00      	add	r7, sp, #0
   114f2:	4603      	mov	r3, r0
   114f4:	460a      	mov	r2, r1
   114f6:	80fb      	strh	r3, [r7, #6]
   114f8:	4613      	mov	r3, r2
   114fa:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   114fc:	2300      	movs	r3, #0
   114fe:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   11500:	693b      	ldr	r3, [r7, #16]
   11502:	2b00      	cmp	r3, #0
   11504:	d10b      	bne.n	1151e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11506:	4b43      	ldr	r3, [pc, #268]	; (11614 <usbdc_set_interface+0x128>)
   11508:	681b      	ldr	r3, [r3, #0]
   1150a:	6818      	ldr	r0, [r3, #0]
   1150c:	4b41      	ldr	r3, [pc, #260]	; (11614 <usbdc_set_interface+0x128>)
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	6859      	ldr	r1, [r3, #4]
   11512:	4b40      	ldr	r3, [pc, #256]	; (11614 <usbdc_set_interface+0x128>)
   11514:	7edb      	ldrb	r3, [r3, #27]
   11516:	461a      	mov	r2, r3
   11518:	4b3f      	ldr	r3, [pc, #252]	; (11618 <usbdc_set_interface+0x12c>)
   1151a:	4798      	blx	r3
   1151c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   1151e:	693b      	ldr	r3, [r7, #16]
   11520:	2b00      	cmp	r3, #0
   11522:	d101      	bne.n	11528 <usbdc_set_interface+0x3c>
		return false;
   11524:	2300      	movs	r3, #0
   11526:	e071      	b.n	1160c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   11528:	693b      	ldr	r3, [r7, #16]
   1152a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   1152c:	6938      	ldr	r0, [r7, #16]
   1152e:	4b3b      	ldr	r3, [pc, #236]	; (1161c <usbdc_set_interface+0x130>)
   11530:	4798      	blx	r3
   11532:	4603      	mov	r3, r0
   11534:	461a      	mov	r2, r3
   11536:	693b      	ldr	r3, [r7, #16]
   11538:	4413      	add	r3, r2
   1153a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   1153c:	68bb      	ldr	r3, [r7, #8]
   1153e:	68f9      	ldr	r1, [r7, #12]
   11540:	2204      	movs	r2, #4
   11542:	4618      	mov	r0, r3
   11544:	4b36      	ldr	r3, [pc, #216]	; (11620 <usbdc_set_interface+0x134>)
   11546:	4798      	blx	r3
   11548:	6138      	str	r0, [r7, #16]
   1154a:	693b      	ldr	r3, [r7, #16]
   1154c:	2b00      	cmp	r3, #0
   1154e:	d113      	bne.n	11578 <usbdc_set_interface+0x8c>
		return false;
   11550:	2300      	movs	r3, #0
   11552:	e05b      	b.n	1160c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   11554:	68bb      	ldr	r3, [r7, #8]
   11556:	4618      	mov	r0, r3
   11558:	4b32      	ldr	r3, [pc, #200]	; (11624 <usbdc_set_interface+0x138>)
   1155a:	4798      	blx	r3
   1155c:	4603      	mov	r3, r0
   1155e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11560:	68bb      	ldr	r3, [r7, #8]
   11562:	68f9      	ldr	r1, [r7, #12]
   11564:	2204      	movs	r2, #4
   11566:	4618      	mov	r0, r3
   11568:	4b2d      	ldr	r3, [pc, #180]	; (11620 <usbdc_set_interface+0x134>)
   1156a:	4798      	blx	r3
   1156c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   1156e:	693b      	ldr	r3, [r7, #16]
   11570:	2b00      	cmp	r3, #0
   11572:	d101      	bne.n	11578 <usbdc_set_interface+0x8c>
			return false;
   11574:	2300      	movs	r3, #0
   11576:	e049      	b.n	1160c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11578:	693b      	ldr	r3, [r7, #16]
   1157a:	3302      	adds	r3, #2
   1157c:	781b      	ldrb	r3, [r3, #0]
   1157e:	b29b      	uxth	r3, r3
   11580:	88ba      	ldrh	r2, [r7, #4]
   11582:	429a      	cmp	r2, r3
   11584:	d1e6      	bne.n	11554 <usbdc_set_interface+0x68>
   11586:	693b      	ldr	r3, [r7, #16]
   11588:	3303      	adds	r3, #3
   1158a:	781b      	ldrb	r3, [r3, #0]
   1158c:	b29b      	uxth	r3, r3
   1158e:	88fa      	ldrh	r2, [r7, #6]
   11590:	429a      	cmp	r2, r3
   11592:	d1df      	bne.n	11554 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   11594:	693b      	ldr	r3, [r7, #16]
   11596:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11598:	4b1e      	ldr	r3, [pc, #120]	; (11614 <usbdc_set_interface+0x128>)
   1159a:	691b      	ldr	r3, [r3, #16]
   1159c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   1159e:	e031      	b.n	11604 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   115a0:	697b      	ldr	r3, [r7, #20]
   115a2:	685b      	ldr	r3, [r3, #4]
   115a4:	f107 0208 	add.w	r2, r7, #8
   115a8:	2101      	movs	r1, #1
   115aa:	6978      	ldr	r0, [r7, #20]
   115ac:	4798      	blx	r3
   115ae:	4603      	mov	r3, r0
   115b0:	2b00      	cmp	r3, #0
   115b2:	d003      	beq.n	115bc <usbdc_set_interface+0xd0>
			func = func->next;
   115b4:	697b      	ldr	r3, [r7, #20]
   115b6:	681b      	ldr	r3, [r3, #0]
   115b8:	617b      	str	r3, [r7, #20]
   115ba:	e023      	b.n	11604 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   115bc:	697b      	ldr	r3, [r7, #20]
   115be:	685b      	ldr	r3, [r3, #4]
   115c0:	f107 0208 	add.w	r2, r7, #8
   115c4:	2100      	movs	r1, #0
   115c6:	6978      	ldr	r0, [r7, #20]
   115c8:	4798      	blx	r3
   115ca:	4603      	mov	r3, r0
   115cc:	2b00      	cmp	r3, #0
   115ce:	d117      	bne.n	11600 <usbdc_set_interface+0x114>
			if (alt_set) {
   115d0:	88fb      	ldrh	r3, [r7, #6]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d00c      	beq.n	115f0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   115d6:	4b0f      	ldr	r3, [pc, #60]	; (11614 <usbdc_set_interface+0x128>)
   115d8:	7f5b      	ldrb	r3, [r3, #29]
   115da:	b25a      	sxtb	r2, r3
   115dc:	88bb      	ldrh	r3, [r7, #4]
   115de:	2101      	movs	r1, #1
   115e0:	fa01 f303 	lsl.w	r3, r1, r3
   115e4:	b25b      	sxtb	r3, r3
   115e6:	4313      	orrs	r3, r2
   115e8:	b25b      	sxtb	r3, r3
   115ea:	b2da      	uxtb	r2, r3
   115ec:	4b09      	ldr	r3, [pc, #36]	; (11614 <usbdc_set_interface+0x128>)
   115ee:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   115f0:	2300      	movs	r3, #0
   115f2:	2200      	movs	r2, #0
   115f4:	2100      	movs	r1, #0
   115f6:	2000      	movs	r0, #0
   115f8:	4c0b      	ldr	r4, [pc, #44]	; (11628 <usbdc_set_interface+0x13c>)
   115fa:	47a0      	blx	r4
			return true;
   115fc:	2301      	movs	r3, #1
   115fe:	e005      	b.n	1160c <usbdc_set_interface+0x120>
		} else {
			return false;
   11600:	2300      	movs	r3, #0
   11602:	e003      	b.n	1160c <usbdc_set_interface+0x120>
	while (NULL != func) {
   11604:	697b      	ldr	r3, [r7, #20]
   11606:	2b00      	cmp	r3, #0
   11608:	d1ca      	bne.n	115a0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   1160a:	2300      	movs	r3, #0
}
   1160c:	4618      	mov	r0, r3
   1160e:	371c      	adds	r7, #28
   11610:	46bd      	mov	sp, r7
   11612:	bd90      	pop	{r4, r7, pc}
   11614:	20001da4 	.word	0x20001da4
   11618:	00011d51 	.word	0x00011d51
   1161c:	00010efd 	.word	0x00010efd
   11620:	00011c91 	.word	0x00011c91
   11624:	00010ed9 	.word	0x00010ed9
   11628:	00011a01 	.word	0x00011a01

0001162c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   1162c:	b590      	push	{r4, r7, lr}
   1162e:	b083      	sub	sp, #12
   11630:	af00      	add	r7, sp, #0
   11632:	4603      	mov	r3, r0
   11634:	6039      	str	r1, [r7, #0]
   11636:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11638:	683b      	ldr	r3, [r7, #0]
   1163a:	785b      	ldrb	r3, [r3, #1]
   1163c:	3b01      	subs	r3, #1
   1163e:	2b0a      	cmp	r3, #10
   11640:	d85b      	bhi.n	116fa <usbdc_set_req+0xce>
   11642:	a201      	add	r2, pc, #4	; (adr r2, 11648 <usbdc_set_req+0x1c>)
   11644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11648:	000116c7 	.word	0x000116c7
   1164c:	000116fb 	.word	0x000116fb
   11650:	000116d5 	.word	0x000116d5
   11654:	000116fb 	.word	0x000116fb
   11658:	00011675 	.word	0x00011675
   1165c:	000116fb 	.word	0x000116fb
   11660:	000116fb 	.word	0x000116fb
   11664:	000116fb 	.word	0x000116fb
   11668:	0001168f 	.word	0x0001168f
   1166c:	000116fb 	.word	0x000116fb
   11670:	000116e3 	.word	0x000116e3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11674:	79f8      	ldrb	r0, [r7, #7]
   11676:	2301      	movs	r3, #1
   11678:	2200      	movs	r2, #0
   1167a:	2100      	movs	r1, #0
   1167c:	4c21      	ldr	r4, [pc, #132]	; (11704 <usbdc_set_req+0xd8>)
   1167e:	47a0      	blx	r4
   11680:	4603      	mov	r3, r0
   11682:	2b00      	cmp	r3, #0
   11684:	bf0c      	ite	eq
   11686:	2301      	moveq	r3, #1
   11688:	2300      	movne	r3, #0
   1168a:	b2db      	uxtb	r3, r3
   1168c:	e036      	b.n	116fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   1168e:	683b      	ldr	r3, [r7, #0]
   11690:	885b      	ldrh	r3, [r3, #2]
   11692:	b29b      	uxth	r3, r3
   11694:	b2db      	uxtb	r3, r3
   11696:	4618      	mov	r0, r3
   11698:	4b1b      	ldr	r3, [pc, #108]	; (11708 <usbdc_set_req+0xdc>)
   1169a:	4798      	blx	r3
   1169c:	4603      	mov	r3, r0
   1169e:	f083 0301 	eor.w	r3, r3, #1
   116a2:	b2db      	uxtb	r3, r3
   116a4:	2b00      	cmp	r3, #0
   116a6:	d001      	beq.n	116ac <usbdc_set_req+0x80>
			return false;
   116a8:	2300      	movs	r3, #0
   116aa:	e027      	b.n	116fc <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   116ac:	79f8      	ldrb	r0, [r7, #7]
   116ae:	2301      	movs	r3, #1
   116b0:	2200      	movs	r2, #0
   116b2:	2100      	movs	r1, #0
   116b4:	4c13      	ldr	r4, [pc, #76]	; (11704 <usbdc_set_req+0xd8>)
   116b6:	47a0      	blx	r4
   116b8:	4603      	mov	r3, r0
   116ba:	2b00      	cmp	r3, #0
   116bc:	bf0c      	ite	eq
   116be:	2301      	moveq	r3, #1
   116c0:	2300      	movne	r3, #0
   116c2:	b2db      	uxtb	r3, r3
   116c4:	e01a      	b.n	116fc <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   116c6:	79fb      	ldrb	r3, [r7, #7]
   116c8:	6839      	ldr	r1, [r7, #0]
   116ca:	4618      	mov	r0, r3
   116cc:	4b0f      	ldr	r3, [pc, #60]	; (1170c <usbdc_set_req+0xe0>)
   116ce:	4798      	blx	r3
   116d0:	4603      	mov	r3, r0
   116d2:	e013      	b.n	116fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   116d4:	79fb      	ldrb	r3, [r7, #7]
   116d6:	6839      	ldr	r1, [r7, #0]
   116d8:	4618      	mov	r0, r3
   116da:	4b0d      	ldr	r3, [pc, #52]	; (11710 <usbdc_set_req+0xe4>)
   116dc:	4798      	blx	r3
   116de:	4603      	mov	r3, r0
   116e0:	e00c      	b.n	116fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   116e2:	683b      	ldr	r3, [r7, #0]
   116e4:	885b      	ldrh	r3, [r3, #2]
   116e6:	b29a      	uxth	r2, r3
   116e8:	683b      	ldr	r3, [r7, #0]
   116ea:	889b      	ldrh	r3, [r3, #4]
   116ec:	b29b      	uxth	r3, r3
   116ee:	4619      	mov	r1, r3
   116f0:	4610      	mov	r0, r2
   116f2:	4b08      	ldr	r3, [pc, #32]	; (11714 <usbdc_set_req+0xe8>)
   116f4:	4798      	blx	r3
   116f6:	4603      	mov	r3, r0
   116f8:	e000      	b.n	116fc <usbdc_set_req+0xd0>
	default:
		return false;
   116fa:	2300      	movs	r3, #0
	}
}
   116fc:	4618      	mov	r0, r3
   116fe:	370c      	adds	r7, #12
   11700:	46bd      	mov	sp, r7
   11702:	bd90      	pop	{r4, r7, pc}
   11704:	00011a01 	.word	0x00011a01
   11708:	000113e1 	.word	0x000113e1
   1170c:	000112fd 	.word	0x000112fd
   11710:	00011355 	.word	0x00011355
   11714:	000114ed 	.word	0x000114ed

00011718 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   11718:	b580      	push	{r7, lr}
   1171a:	b082      	sub	sp, #8
   1171c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1171e:	4b0a      	ldr	r3, [pc, #40]	; (11748 <usbdc_sof_notify+0x30>)
   11720:	685b      	ldr	r3, [r3, #4]
   11722:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   11724:	e009      	b.n	1173a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   11726:	687b      	ldr	r3, [r7, #4]
   11728:	685b      	ldr	r3, [r3, #4]
   1172a:	2b00      	cmp	r3, #0
   1172c:	d002      	beq.n	11734 <usbdc_sof_notify+0x1c>
			sof->cb();
   1172e:	687b      	ldr	r3, [r7, #4]
   11730:	685b      	ldr	r3, [r3, #4]
   11732:	4798      	blx	r3
		}
		sof = sof->next;
   11734:	687b      	ldr	r3, [r7, #4]
   11736:	681b      	ldr	r3, [r3, #0]
   11738:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   1173a:	687b      	ldr	r3, [r7, #4]
   1173c:	2b00      	cmp	r3, #0
   1173e:	d1f2      	bne.n	11726 <usbdc_sof_notify+0xe>
	}
}
   11740:	bf00      	nop
   11742:	3708      	adds	r7, #8
   11744:	46bd      	mov	sp, r7
   11746:	bd80      	pop	{r7, pc}
   11748:	20001da4 	.word	0x20001da4

0001174c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   1174c:	b580      	push	{r7, lr}
   1174e:	b084      	sub	sp, #16
   11750:	af00      	add	r7, sp, #0
   11752:	4603      	mov	r3, r0
   11754:	6039      	str	r1, [r7, #0]
   11756:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   11758:	4b0b      	ldr	r3, [pc, #44]	; (11788 <usbdc_change_notify+0x3c>)
   1175a:	68db      	ldr	r3, [r3, #12]
   1175c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   1175e:	e00c      	b.n	1177a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   11760:	68fb      	ldr	r3, [r7, #12]
   11762:	685b      	ldr	r3, [r3, #4]
   11764:	2b00      	cmp	r3, #0
   11766:	d005      	beq.n	11774 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   11768:	68fb      	ldr	r3, [r7, #12]
   1176a:	685b      	ldr	r3, [r3, #4]
   1176c:	79fa      	ldrb	r2, [r7, #7]
   1176e:	6839      	ldr	r1, [r7, #0]
   11770:	4610      	mov	r0, r2
   11772:	4798      	blx	r3
		}
		cg = cg->next;
   11774:	68fb      	ldr	r3, [r7, #12]
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   1177a:	68fb      	ldr	r3, [r7, #12]
   1177c:	2b00      	cmp	r3, #0
   1177e:	d1ef      	bne.n	11760 <usbdc_change_notify+0x14>
	}
}
   11780:	bf00      	nop
   11782:	3710      	adds	r7, #16
   11784:	46bd      	mov	sp, r7
   11786:	bd80      	pop	{r7, pc}
   11788:	20001da4 	.word	0x20001da4

0001178c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1178c:	b580      	push	{r7, lr}
   1178e:	b084      	sub	sp, #16
   11790:	af00      	add	r7, sp, #0
   11792:	4603      	mov	r3, r0
   11794:	6039      	str	r1, [r7, #0]
   11796:	71fb      	strb	r3, [r7, #7]
   11798:	4613      	mov	r3, r2
   1179a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   1179c:	4b12      	ldr	r3, [pc, #72]	; (117e8 <usbdc_request_handler+0x5c>)
   1179e:	689b      	ldr	r3, [r3, #8]
   117a0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   117a2:	e019      	b.n	117d8 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   117a4:	68fb      	ldr	r3, [r7, #12]
   117a6:	685b      	ldr	r3, [r3, #4]
   117a8:	2b00      	cmp	r3, #0
   117aa:	d012      	beq.n	117d2 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   117ac:	68fb      	ldr	r3, [r7, #12]
   117ae:	685b      	ldr	r3, [r3, #4]
   117b0:	79ba      	ldrb	r2, [r7, #6]
   117b2:	79f8      	ldrb	r0, [r7, #7]
   117b4:	6839      	ldr	r1, [r7, #0]
   117b6:	4798      	blx	r3
   117b8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   117ba:	68bb      	ldr	r3, [r7, #8]
   117bc:	2b00      	cmp	r3, #0
   117be:	d101      	bne.n	117c4 <usbdc_request_handler+0x38>
				return true;
   117c0:	2301      	movs	r3, #1
   117c2:	e00d      	b.n	117e0 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   117c4:	68bb      	ldr	r3, [r7, #8]
   117c6:	f113 0f0a 	cmn.w	r3, #10
   117ca:	d002      	beq.n	117d2 <usbdc_request_handler+0x46>
				return -1;
   117cc:	f04f 33ff 	mov.w	r3, #4294967295
   117d0:	e006      	b.n	117e0 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   117d2:	68fb      	ldr	r3, [r7, #12]
   117d4:	681b      	ldr	r3, [r3, #0]
   117d6:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   117d8:	68fb      	ldr	r3, [r7, #12]
   117da:	2b00      	cmp	r3, #0
   117dc:	d1e2      	bne.n	117a4 <usbdc_request_handler+0x18>
	}
	return false;
   117de:	2300      	movs	r3, #0
}
   117e0:	4618      	mov	r0, r3
   117e2:	3710      	adds	r7, #16
   117e4:	46bd      	mov	sp, r7
   117e6:	bd80      	pop	{r7, pc}
   117e8:	20001da4 	.word	0x20001da4

000117ec <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   117ec:	b580      	push	{r7, lr}
   117ee:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   117f0:	4b01      	ldr	r3, [pc, #4]	; (117f8 <usbd_sof_cb+0xc>)
   117f2:	4798      	blx	r3
}
   117f4:	bf00      	nop
   117f6:	bd80      	pop	{r7, pc}
   117f8:	00011719 	.word	0x00011719

000117fc <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   117fc:	b580      	push	{r7, lr}
   117fe:	b082      	sub	sp, #8
   11800:	af00      	add	r7, sp, #0
   11802:	4603      	mov	r3, r0
   11804:	6039      	str	r1, [r7, #0]
   11806:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11808:	79fb      	ldrb	r3, [r7, #7]
   1180a:	2200      	movs	r2, #0
   1180c:	6839      	ldr	r1, [r7, #0]
   1180e:	4618      	mov	r0, r3
   11810:	4b14      	ldr	r3, [pc, #80]	; (11864 <usbdc_cb_ctl_req+0x68>)
   11812:	4798      	blx	r3
   11814:	4603      	mov	r3, r0
   11816:	f1b3 3fff 	cmp.w	r3, #4294967295
   1181a:	d00b      	beq.n	11834 <usbdc_cb_ctl_req+0x38>
   1181c:	2b01      	cmp	r3, #1
   1181e:	d007      	beq.n	11830 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   11820:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11822:	683b      	ldr	r3, [r7, #0]
   11824:	781b      	ldrb	r3, [r3, #0]
   11826:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1182a:	2b00      	cmp	r3, #0
   1182c:	d007      	beq.n	1183e <usbdc_cb_ctl_req+0x42>
   1182e:	e003      	b.n	11838 <usbdc_cb_ctl_req+0x3c>
		return true;
   11830:	2301      	movs	r3, #1
   11832:	e013      	b.n	1185c <usbdc_cb_ctl_req+0x60>
		return false;
   11834:	2300      	movs	r3, #0
   11836:	e011      	b.n	1185c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11838:	2b80      	cmp	r3, #128	; 0x80
   1183a:	d007      	beq.n	1184c <usbdc_cb_ctl_req+0x50>
   1183c:	e00d      	b.n	1185a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   1183e:	79fb      	ldrb	r3, [r7, #7]
   11840:	6839      	ldr	r1, [r7, #0]
   11842:	4618      	mov	r0, r3
   11844:	4b08      	ldr	r3, [pc, #32]	; (11868 <usbdc_cb_ctl_req+0x6c>)
   11846:	4798      	blx	r3
   11848:	4603      	mov	r3, r0
   1184a:	e007      	b.n	1185c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   1184c:	79fb      	ldrb	r3, [r7, #7]
   1184e:	6839      	ldr	r1, [r7, #0]
   11850:	4618      	mov	r0, r3
   11852:	4b06      	ldr	r3, [pc, #24]	; (1186c <usbdc_cb_ctl_req+0x70>)
   11854:	4798      	blx	r3
   11856:	4603      	mov	r3, r0
   11858:	e000      	b.n	1185c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   1185a:	2300      	movs	r3, #0
	}
}
   1185c:	4618      	mov	r0, r3
   1185e:	3708      	adds	r7, #8
   11860:	46bd      	mov	sp, r7
   11862:	bd80      	pop	{r7, pc}
   11864:	0001178d 	.word	0x0001178d
   11868:	0001162d 	.word	0x0001162d
   1186c:	00011255 	.word	0x00011255

00011870 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   11870:	b580      	push	{r7, lr}
   11872:	b082      	sub	sp, #8
   11874:	af00      	add	r7, sp, #0
   11876:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11878:	687b      	ldr	r3, [r7, #4]
   1187a:	781b      	ldrb	r3, [r3, #0]
   1187c:	2b00      	cmp	r3, #0
   1187e:	d135      	bne.n	118ec <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   11880:	687b      	ldr	r3, [r7, #4]
   11882:	785b      	ldrb	r3, [r3, #1]
   11884:	2b05      	cmp	r3, #5
   11886:	d019      	beq.n	118bc <usbdc_ctrl_status_end+0x4c>
   11888:	2b09      	cmp	r3, #9
   1188a:	d000      	beq.n	1188e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   1188c:	e02f      	b.n	118ee <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   1188e:	687b      	ldr	r3, [r7, #4]
   11890:	885b      	ldrh	r3, [r3, #2]
   11892:	b29b      	uxth	r3, r3
   11894:	b2da      	uxtb	r2, r3
   11896:	4b17      	ldr	r3, [pc, #92]	; (118f4 <usbdc_ctrl_status_end+0x84>)
   11898:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   1189a:	687b      	ldr	r3, [r7, #4]
   1189c:	885b      	ldrh	r3, [r3, #2]
   1189e:	b29b      	uxth	r3, r3
   118a0:	2b00      	cmp	r3, #0
   118a2:	d001      	beq.n	118a8 <usbdc_ctrl_status_end+0x38>
   118a4:	2204      	movs	r2, #4
   118a6:	e000      	b.n	118aa <usbdc_ctrl_status_end+0x3a>
   118a8:	2203      	movs	r2, #3
   118aa:	4b12      	ldr	r3, [pc, #72]	; (118f4 <usbdc_ctrl_status_end+0x84>)
   118ac:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   118ae:	4b11      	ldr	r3, [pc, #68]	; (118f4 <usbdc_ctrl_status_end+0x84>)
   118b0:	7e9b      	ldrb	r3, [r3, #26]
   118b2:	4619      	mov	r1, r3
   118b4:	2001      	movs	r0, #1
   118b6:	4b10      	ldr	r3, [pc, #64]	; (118f8 <usbdc_ctrl_status_end+0x88>)
   118b8:	4798      	blx	r3
		break;
   118ba:	e018      	b.n	118ee <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   118bc:	687b      	ldr	r3, [r7, #4]
   118be:	885b      	ldrh	r3, [r3, #2]
   118c0:	b29b      	uxth	r3, r3
   118c2:	b2db      	uxtb	r3, r3
   118c4:	4618      	mov	r0, r3
   118c6:	4b0d      	ldr	r3, [pc, #52]	; (118fc <usbdc_ctrl_status_end+0x8c>)
   118c8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   118ca:	687b      	ldr	r3, [r7, #4]
   118cc:	885b      	ldrh	r3, [r3, #2]
   118ce:	b29b      	uxth	r3, r3
   118d0:	2b00      	cmp	r3, #0
   118d2:	d001      	beq.n	118d8 <usbdc_ctrl_status_end+0x68>
   118d4:	2203      	movs	r2, #3
   118d6:	e000      	b.n	118da <usbdc_ctrl_status_end+0x6a>
   118d8:	2202      	movs	r2, #2
   118da:	4b06      	ldr	r3, [pc, #24]	; (118f4 <usbdc_ctrl_status_end+0x84>)
   118dc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   118de:	4b05      	ldr	r3, [pc, #20]	; (118f4 <usbdc_ctrl_status_end+0x84>)
   118e0:	7e9b      	ldrb	r3, [r3, #26]
   118e2:	4619      	mov	r1, r3
   118e4:	2001      	movs	r0, #1
   118e6:	4b04      	ldr	r3, [pc, #16]	; (118f8 <usbdc_ctrl_status_end+0x88>)
   118e8:	4798      	blx	r3
		break;
   118ea:	e000      	b.n	118ee <usbdc_ctrl_status_end+0x7e>
		return;
   118ec:	bf00      	nop
	}
}
   118ee:	3708      	adds	r7, #8
   118f0:	46bd      	mov	sp, r7
   118f2:	bd80      	pop	{r7, pc}
   118f4:	20001da4 	.word	0x20001da4
   118f8:	0001174d 	.word	0x0001174d
   118fc:	000114cd 	.word	0x000114cd

00011900 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   11900:	b580      	push	{r7, lr}
   11902:	b082      	sub	sp, #8
   11904:	af00      	add	r7, sp, #0
   11906:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   11908:	2201      	movs	r2, #1
   1190a:	6879      	ldr	r1, [r7, #4]
   1190c:	2000      	movs	r0, #0
   1190e:	4b03      	ldr	r3, [pc, #12]	; (1191c <usbdc_ctrl_data_end+0x1c>)
   11910:	4798      	blx	r3
	return false;
   11912:	2300      	movs	r3, #0
}
   11914:	4618      	mov	r0, r3
   11916:	3708      	adds	r7, #8
   11918:	46bd      	mov	sp, r7
   1191a:	bd80      	pop	{r7, pc}
   1191c:	0001178d 	.word	0x0001178d

00011920 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11920:	b580      	push	{r7, lr}
   11922:	b082      	sub	sp, #8
   11924:	af00      	add	r7, sp, #0
   11926:	4603      	mov	r3, r0
   11928:	603a      	str	r2, [r7, #0]
   1192a:	71fb      	strb	r3, [r7, #7]
   1192c:	460b      	mov	r3, r1
   1192e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   11930:	79bb      	ldrb	r3, [r7, #6]
   11932:	2b00      	cmp	r3, #0
   11934:	d002      	beq.n	1193c <usbdc_cb_ctl_done+0x1c>
   11936:	2b01      	cmp	r3, #1
   11938:	d004      	beq.n	11944 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   1193a:	e008      	b.n	1194e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   1193c:	6838      	ldr	r0, [r7, #0]
   1193e:	4b06      	ldr	r3, [pc, #24]	; (11958 <usbdc_cb_ctl_done+0x38>)
   11940:	4798      	blx	r3
		break;
   11942:	e004      	b.n	1194e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   11944:	6838      	ldr	r0, [r7, #0]
   11946:	4b05      	ldr	r3, [pc, #20]	; (1195c <usbdc_cb_ctl_done+0x3c>)
   11948:	4798      	blx	r3
   1194a:	4603      	mov	r3, r0
   1194c:	e000      	b.n	11950 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   1194e:	2300      	movs	r3, #0
}
   11950:	4618      	mov	r0, r3
   11952:	3708      	adds	r7, #8
   11954:	46bd      	mov	sp, r7
   11956:	bd80      	pop	{r7, pc}
   11958:	00011871 	.word	0x00011871
   1195c:	00011901 	.word	0x00011901

00011960 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   11960:	b580      	push	{r7, lr}
   11962:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   11964:	4b10      	ldr	r3, [pc, #64]	; (119a8 <usbdc_reset+0x48>)
   11966:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   11968:	4b10      	ldr	r3, [pc, #64]	; (119ac <usbdc_reset+0x4c>)
   1196a:	2202      	movs	r2, #2
   1196c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   1196e:	4b0f      	ldr	r3, [pc, #60]	; (119ac <usbdc_reset+0x4c>)
   11970:	2200      	movs	r2, #0
   11972:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   11974:	4b0d      	ldr	r3, [pc, #52]	; (119ac <usbdc_reset+0x4c>)
   11976:	2200      	movs	r2, #0
   11978:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   1197a:	2000      	movs	r0, #0
   1197c:	4b0c      	ldr	r3, [pc, #48]	; (119b0 <usbdc_reset+0x50>)
   1197e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   11980:	4b0a      	ldr	r3, [pc, #40]	; (119ac <usbdc_reset+0x4c>)
   11982:	7f1b      	ldrb	r3, [r3, #28]
   11984:	4618      	mov	r0, r3
   11986:	4b0b      	ldr	r3, [pc, #44]	; (119b4 <usbdc_reset+0x54>)
   11988:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   1198a:	4a0b      	ldr	r2, [pc, #44]	; (119b8 <usbdc_reset+0x58>)
   1198c:	2100      	movs	r1, #0
   1198e:	2000      	movs	r0, #0
   11990:	4b0a      	ldr	r3, [pc, #40]	; (119bc <usbdc_reset+0x5c>)
   11992:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   11994:	4a0a      	ldr	r2, [pc, #40]	; (119c0 <usbdc_reset+0x60>)
   11996:	2102      	movs	r1, #2
   11998:	2000      	movs	r0, #0
   1199a:	4b08      	ldr	r3, [pc, #32]	; (119bc <usbdc_reset+0x5c>)
   1199c:	4798      	blx	r3
	usb_d_ep_enable(0);
   1199e:	2000      	movs	r0, #0
   119a0:	4b08      	ldr	r3, [pc, #32]	; (119c4 <usbdc_reset+0x64>)
   119a2:	4798      	blx	r3
}
   119a4:	bf00      	nop
   119a6:	bd80      	pop	{r7, pc}
   119a8:	000113ad 	.word	0x000113ad
   119ac:	20001da4 	.word	0x20001da4
   119b0:	0000773d 	.word	0x0000773d
   119b4:	00007679 	.word	0x00007679
   119b8:	000117fd 	.word	0x000117fd
   119bc:	00007a91 	.word	0x00007a91
   119c0:	00011921 	.word	0x00011921
   119c4:	0000778d 	.word	0x0000778d

000119c8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   119c8:	b580      	push	{r7, lr}
   119ca:	b082      	sub	sp, #8
   119cc:	af00      	add	r7, sp, #0
   119ce:	4603      	mov	r3, r0
   119d0:	6039      	str	r1, [r7, #0]
   119d2:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   119d4:	79fb      	ldrb	r3, [r7, #7]
   119d6:	2b00      	cmp	r3, #0
   119d8:	d002      	beq.n	119e0 <usbd_event_cb+0x18>
   119da:	2b01      	cmp	r3, #1
   119dc:	d005      	beq.n	119ea <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   119de:	e007      	b.n	119f0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   119e0:	6839      	ldr	r1, [r7, #0]
   119e2:	2000      	movs	r0, #0
   119e4:	4b04      	ldr	r3, [pc, #16]	; (119f8 <usbd_event_cb+0x30>)
   119e6:	4798      	blx	r3
		break;
   119e8:	e002      	b.n	119f0 <usbd_event_cb+0x28>
		usbdc_reset();
   119ea:	4b04      	ldr	r3, [pc, #16]	; (119fc <usbd_event_cb+0x34>)
   119ec:	4798      	blx	r3
		break;
   119ee:	bf00      	nop
	}
}
   119f0:	bf00      	nop
   119f2:	3708      	adds	r7, #8
   119f4:	46bd      	mov	sp, r7
   119f6:	bd80      	pop	{r7, pc}
   119f8:	0001174d 	.word	0x0001174d
   119fc:	00011961 	.word	0x00011961

00011a00 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   11a00:	b580      	push	{r7, lr}
   11a02:	b088      	sub	sp, #32
   11a04:	af00      	add	r7, sp, #0
   11a06:	60b9      	str	r1, [r7, #8]
   11a08:	607a      	str	r2, [r7, #4]
   11a0a:	461a      	mov	r2, r3
   11a0c:	4603      	mov	r3, r0
   11a0e:	73fb      	strb	r3, [r7, #15]
   11a10:	4613      	mov	r3, r2
   11a12:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11a14:	68bb      	ldr	r3, [r7, #8]
   11a16:	617b      	str	r3, [r7, #20]
   11a18:	687b      	ldr	r3, [r7, #4]
   11a1a:	61bb      	str	r3, [r7, #24]
   11a1c:	7bfb      	ldrb	r3, [r7, #15]
   11a1e:	773b      	strb	r3, [r7, #28]
   11a20:	7bbb      	ldrb	r3, [r7, #14]
   11a22:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   11a24:	f107 0314 	add.w	r3, r7, #20
   11a28:	4618      	mov	r0, r3
   11a2a:	4b03      	ldr	r3, [pc, #12]	; (11a38 <usbdc_xfer+0x38>)
   11a2c:	4798      	blx	r3
   11a2e:	4603      	mov	r3, r0
}
   11a30:	4618      	mov	r0, r3
   11a32:	3720      	adds	r7, #32
   11a34:	46bd      	mov	sp, r7
   11a36:	bd80      	pop	{r7, pc}
   11a38:	000077fd 	.word	0x000077fd

00011a3c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   11a3c:	b580      	push	{r7, lr}
   11a3e:	b082      	sub	sp, #8
   11a40:	af00      	add	r7, sp, #0
   11a42:	4603      	mov	r3, r0
   11a44:	6039      	str	r1, [r7, #0]
   11a46:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   11a48:	79fb      	ldrb	r3, [r7, #7]
   11a4a:	2b01      	cmp	r3, #1
   11a4c:	d009      	beq.n	11a62 <usbdc_register_handler+0x26>
   11a4e:	2b02      	cmp	r3, #2
   11a50:	d00c      	beq.n	11a6c <usbdc_register_handler+0x30>
   11a52:	2b00      	cmp	r3, #0
   11a54:	d000      	beq.n	11a58 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   11a56:	e00e      	b.n	11a76 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   11a58:	6839      	ldr	r1, [r7, #0]
   11a5a:	4809      	ldr	r0, [pc, #36]	; (11a80 <usbdc_register_handler+0x44>)
   11a5c:	4b09      	ldr	r3, [pc, #36]	; (11a84 <usbdc_register_handler+0x48>)
   11a5e:	4798      	blx	r3
		break;
   11a60:	e009      	b.n	11a76 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   11a62:	6839      	ldr	r1, [r7, #0]
   11a64:	4808      	ldr	r0, [pc, #32]	; (11a88 <usbdc_register_handler+0x4c>)
   11a66:	4b07      	ldr	r3, [pc, #28]	; (11a84 <usbdc_register_handler+0x48>)
   11a68:	4798      	blx	r3
		break;
   11a6a:	e004      	b.n	11a76 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11a6c:	6839      	ldr	r1, [r7, #0]
   11a6e:	4807      	ldr	r0, [pc, #28]	; (11a8c <usbdc_register_handler+0x50>)
   11a70:	4b04      	ldr	r3, [pc, #16]	; (11a84 <usbdc_register_handler+0x48>)
   11a72:	4798      	blx	r3
		break;
   11a74:	bf00      	nop
	}
}
   11a76:	bf00      	nop
   11a78:	3708      	adds	r7, #8
   11a7a:	46bd      	mov	sp, r7
   11a7c:	bd80      	pop	{r7, pc}
   11a7e:	bf00      	nop
   11a80:	20001da8 	.word	0x20001da8
   11a84:	00007be9 	.word	0x00007be9
   11a88:	20001dac 	.word	0x20001dac
   11a8c:	20001db0 	.word	0x20001db0

00011a90 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   11a90:	b580      	push	{r7, lr}
   11a92:	b084      	sub	sp, #16
   11a94:	af00      	add	r7, sp, #0
   11a96:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   11a98:	687b      	ldr	r3, [r7, #4]
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	bf14      	ite	ne
   11a9e:	2301      	movne	r3, #1
   11aa0:	2300      	moveq	r3, #0
   11aa2:	b2db      	uxtb	r3, r3
   11aa4:	f240 3255 	movw	r2, #853	; 0x355
   11aa8:	4910      	ldr	r1, [pc, #64]	; (11aec <usbdc_init+0x5c>)
   11aaa:	4618      	mov	r0, r3
   11aac:	4b10      	ldr	r3, [pc, #64]	; (11af0 <usbdc_init+0x60>)
   11aae:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   11ab0:	4b10      	ldr	r3, [pc, #64]	; (11af4 <usbdc_init+0x64>)
   11ab2:	4798      	blx	r3
   11ab4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   11ab6:	68fb      	ldr	r3, [r7, #12]
   11ab8:	2b00      	cmp	r3, #0
   11aba:	da01      	bge.n	11ac0 <usbdc_init+0x30>
		return rc;
   11abc:	68fb      	ldr	r3, [r7, #12]
   11abe:	e010      	b.n	11ae2 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   11ac0:	2220      	movs	r2, #32
   11ac2:	2100      	movs	r1, #0
   11ac4:	480c      	ldr	r0, [pc, #48]	; (11af8 <usbdc_init+0x68>)
   11ac6:	4b0d      	ldr	r3, [pc, #52]	; (11afc <usbdc_init+0x6c>)
   11ac8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   11aca:	4a0b      	ldr	r2, [pc, #44]	; (11af8 <usbdc_init+0x68>)
   11acc:	687b      	ldr	r3, [r7, #4]
   11ace:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11ad0:	490b      	ldr	r1, [pc, #44]	; (11b00 <usbdc_init+0x70>)
   11ad2:	2000      	movs	r0, #0
   11ad4:	4b0b      	ldr	r3, [pc, #44]	; (11b04 <usbdc_init+0x74>)
   11ad6:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   11ad8:	490b      	ldr	r1, [pc, #44]	; (11b08 <usbdc_init+0x78>)
   11ada:	2001      	movs	r0, #1
   11adc:	4b09      	ldr	r3, [pc, #36]	; (11b04 <usbdc_init+0x74>)
   11ade:	4798      	blx	r3

	return 0;
   11ae0:	2300      	movs	r3, #0
}
   11ae2:	4618      	mov	r0, r3
   11ae4:	3710      	adds	r7, #16
   11ae6:	46bd      	mov	sp, r7
   11ae8:	bd80      	pop	{r7, pc}
   11aea:	bf00      	nop
   11aec:	0001cf2c 	.word	0x0001cf2c
   11af0:	00007b0d 	.word	0x00007b0d
   11af4:	00007565 	.word	0x00007565
   11af8:	20001da4 	.word	0x20001da4
   11afc:	0001c655 	.word	0x0001c655
   11b00:	000117ed 	.word	0x000117ed
   11b04:	00007611 	.word	0x00007611
   11b08:	000119c9 	.word	0x000119c9

00011b0c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   11b14:	6879      	ldr	r1, [r7, #4]
   11b16:	4803      	ldr	r0, [pc, #12]	; (11b24 <usbdc_register_function+0x18>)
   11b18:	4b03      	ldr	r3, [pc, #12]	; (11b28 <usbdc_register_function+0x1c>)
   11b1a:	4798      	blx	r3
}
   11b1c:	bf00      	nop
   11b1e:	3708      	adds	r7, #8
   11b20:	46bd      	mov	sp, r7
   11b22:	bd80      	pop	{r7, pc}
   11b24:	20001db4 	.word	0x20001db4
   11b28:	00007be9 	.word	0x00007be9

00011b2c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   11b2c:	b580      	push	{r7, lr}
   11b2e:	b082      	sub	sp, #8
   11b30:	af00      	add	r7, sp, #0
   11b32:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   11b34:	4b0f      	ldr	r3, [pc, #60]	; (11b74 <usbdc_start+0x48>)
   11b36:	7e9b      	ldrb	r3, [r3, #26]
   11b38:	2b00      	cmp	r3, #0
   11b3a:	d002      	beq.n	11b42 <usbdc_start+0x16>
		return ERR_BUSY;
   11b3c:	f06f 0303 	mvn.w	r3, #3
   11b40:	e013      	b.n	11b6a <usbdc_start+0x3e>
	}

	if (desces) {
   11b42:	687b      	ldr	r3, [r7, #4]
   11b44:	2b00      	cmp	r3, #0
   11b46:	d00e      	beq.n	11b66 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   11b48:	4a0a      	ldr	r2, [pc, #40]	; (11b74 <usbdc_start+0x48>)
   11b4a:	687b      	ldr	r3, [r7, #4]
   11b4c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   11b4e:	687b      	ldr	r3, [r7, #4]
   11b50:	681b      	ldr	r3, [r3, #0]
   11b52:	79da      	ldrb	r2, [r3, #7]
   11b54:	4b07      	ldr	r3, [pc, #28]	; (11b74 <usbdc_start+0x48>)
   11b56:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   11b58:	4b06      	ldr	r3, [pc, #24]	; (11b74 <usbdc_start+0x48>)
   11b5a:	2201      	movs	r2, #1
   11b5c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   11b5e:	4b06      	ldr	r3, [pc, #24]	; (11b78 <usbdc_start+0x4c>)
   11b60:	4798      	blx	r3
	return ERR_NONE;
   11b62:	2300      	movs	r3, #0
   11b64:	e001      	b.n	11b6a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   11b66:	f06f 0308 	mvn.w	r3, #8
}
   11b6a:	4618      	mov	r0, r3
   11b6c:	3708      	adds	r7, #8
   11b6e:	46bd      	mov	sp, r7
   11b70:	bd80      	pop	{r7, pc}
   11b72:	bf00      	nop
   11b74:	20001da4 	.word	0x20001da4
   11b78:	00007635 	.word	0x00007635

00011b7c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   11b7c:	b580      	push	{r7, lr}
   11b7e:	af00      	add	r7, sp, #0
	usb_d_attach();
   11b80:	4b01      	ldr	r3, [pc, #4]	; (11b88 <usbdc_attach+0xc>)
   11b82:	4798      	blx	r3
}
   11b84:	bf00      	nop
   11b86:	bd80      	pop	{r7, pc}
   11b88:	00007649 	.word	0x00007649

00011b8c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   11b8c:	b480      	push	{r7}
   11b8e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   11b90:	4b03      	ldr	r3, [pc, #12]	; (11ba0 <usbdc_get_ctrl_buffer+0x14>)
   11b92:	695b      	ldr	r3, [r3, #20]
}
   11b94:	4618      	mov	r0, r3
   11b96:	46bd      	mov	sp, r7
   11b98:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b9c:	4770      	bx	lr
   11b9e:	bf00      	nop
   11ba0:	20001da4 	.word	0x20001da4

00011ba4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   11ba4:	b480      	push	{r7}
   11ba6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   11ba8:	4b07      	ldr	r3, [pc, #28]	; (11bc8 <usbdc_get_state+0x24>)
   11baa:	7e9b      	ldrb	r3, [r3, #26]
   11bac:	f003 0310 	and.w	r3, r3, #16
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d001      	beq.n	11bb8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   11bb4:	2310      	movs	r3, #16
   11bb6:	e001      	b.n	11bbc <usbdc_get_state+0x18>
	}
	return usbdc.state;
   11bb8:	4b03      	ldr	r3, [pc, #12]	; (11bc8 <usbdc_get_state+0x24>)
   11bba:	7e9b      	ldrb	r3, [r3, #26]
}
   11bbc:	4618      	mov	r0, r3
   11bbe:	46bd      	mov	sp, r7
   11bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bc4:	4770      	bx	lr
   11bc6:	bf00      	nop
   11bc8:	20001da4 	.word	0x20001da4

00011bcc <usb_get_u16>:
{
   11bcc:	b480      	push	{r7}
   11bce:	b083      	sub	sp, #12
   11bd0:	af00      	add	r7, sp, #0
   11bd2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	781b      	ldrb	r3, [r3, #0]
   11bd8:	b29a      	uxth	r2, r3
   11bda:	687b      	ldr	r3, [r7, #4]
   11bdc:	3301      	adds	r3, #1
   11bde:	781b      	ldrb	r3, [r3, #0]
   11be0:	b29b      	uxth	r3, r3
   11be2:	021b      	lsls	r3, r3, #8
   11be4:	b29b      	uxth	r3, r3
   11be6:	4413      	add	r3, r2
   11be8:	b29b      	uxth	r3, r3
}
   11bea:	4618      	mov	r0, r3
   11bec:	370c      	adds	r7, #12
   11bee:	46bd      	mov	sp, r7
   11bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bf4:	4770      	bx	lr

00011bf6 <usb_desc_len>:
{
   11bf6:	b480      	push	{r7}
   11bf8:	b083      	sub	sp, #12
   11bfa:	af00      	add	r7, sp, #0
   11bfc:	6078      	str	r0, [r7, #4]
	return desc[0];
   11bfe:	687b      	ldr	r3, [r7, #4]
   11c00:	781b      	ldrb	r3, [r3, #0]
}
   11c02:	4618      	mov	r0, r3
   11c04:	370c      	adds	r7, #12
   11c06:	46bd      	mov	sp, r7
   11c08:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c0c:	4770      	bx	lr

00011c0e <usb_desc_type>:
{
   11c0e:	b480      	push	{r7}
   11c10:	b083      	sub	sp, #12
   11c12:	af00      	add	r7, sp, #0
   11c14:	6078      	str	r0, [r7, #4]
	return desc[1];
   11c16:	687b      	ldr	r3, [r7, #4]
   11c18:	3301      	adds	r3, #1
   11c1a:	781b      	ldrb	r3, [r3, #0]
}
   11c1c:	4618      	mov	r0, r3
   11c1e:	370c      	adds	r7, #12
   11c20:	46bd      	mov	sp, r7
   11c22:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c26:	4770      	bx	lr

00011c28 <usb_desc_next>:
{
   11c28:	b580      	push	{r7, lr}
   11c2a:	b082      	sub	sp, #8
   11c2c:	af00      	add	r7, sp, #0
   11c2e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11c30:	6878      	ldr	r0, [r7, #4]
   11c32:	4b05      	ldr	r3, [pc, #20]	; (11c48 <usb_desc_next+0x20>)
   11c34:	4798      	blx	r3
   11c36:	4603      	mov	r3, r0
   11c38:	461a      	mov	r2, r3
   11c3a:	687b      	ldr	r3, [r7, #4]
   11c3c:	4413      	add	r3, r2
}
   11c3e:	4618      	mov	r0, r3
   11c40:	3708      	adds	r7, #8
   11c42:	46bd      	mov	sp, r7
   11c44:	bd80      	pop	{r7, pc}
   11c46:	bf00      	nop
   11c48:	00011bf7 	.word	0x00011bf7

00011c4c <usb_cfg_desc_total_len>:
{
   11c4c:	b580      	push	{r7, lr}
   11c4e:	b082      	sub	sp, #8
   11c50:	af00      	add	r7, sp, #0
   11c52:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11c54:	687b      	ldr	r3, [r7, #4]
   11c56:	3302      	adds	r3, #2
   11c58:	4618      	mov	r0, r3
   11c5a:	4b03      	ldr	r3, [pc, #12]	; (11c68 <usb_cfg_desc_total_len+0x1c>)
   11c5c:	4798      	blx	r3
   11c5e:	4603      	mov	r3, r0
}
   11c60:	4618      	mov	r0, r3
   11c62:	3708      	adds	r7, #8
   11c64:	46bd      	mov	sp, r7
   11c66:	bd80      	pop	{r7, pc}
   11c68:	00011bcd 	.word	0x00011bcd

00011c6c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   11c6c:	b580      	push	{r7, lr}
   11c6e:	b082      	sub	sp, #8
   11c70:	af00      	add	r7, sp, #0
   11c72:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   11c74:	6878      	ldr	r0, [r7, #4]
   11c76:	4b05      	ldr	r3, [pc, #20]	; (11c8c <usb_cfg_desc_next+0x20>)
   11c78:	4798      	blx	r3
   11c7a:	4603      	mov	r3, r0
   11c7c:	461a      	mov	r2, r3
   11c7e:	687b      	ldr	r3, [r7, #4]
   11c80:	4413      	add	r3, r2
}
   11c82:	4618      	mov	r0, r3
   11c84:	3708      	adds	r7, #8
   11c86:	46bd      	mov	sp, r7
   11c88:	bd80      	pop	{r7, pc}
   11c8a:	bf00      	nop
   11c8c:	00011c4d 	.word	0x00011c4d

00011c90 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   11c90:	b580      	push	{r7, lr}
   11c92:	b084      	sub	sp, #16
   11c94:	af00      	add	r7, sp, #0
   11c96:	60f8      	str	r0, [r7, #12]
   11c98:	60b9      	str	r1, [r7, #8]
   11c9a:	4613      	mov	r3, r2
   11c9c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   11c9e:	e015      	b.n	11ccc <usb_find_desc+0x3c>
		_desc_len_check();
   11ca0:	68f8      	ldr	r0, [r7, #12]
   11ca2:	4b0f      	ldr	r3, [pc, #60]	; (11ce0 <usb_find_desc+0x50>)
   11ca4:	4798      	blx	r3
   11ca6:	4603      	mov	r3, r0
   11ca8:	2b01      	cmp	r3, #1
   11caa:	d801      	bhi.n	11cb0 <usb_find_desc+0x20>
   11cac:	2300      	movs	r3, #0
   11cae:	e012      	b.n	11cd6 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   11cb0:	68f8      	ldr	r0, [r7, #12]
   11cb2:	4b0c      	ldr	r3, [pc, #48]	; (11ce4 <usb_find_desc+0x54>)
   11cb4:	4798      	blx	r3
   11cb6:	4603      	mov	r3, r0
   11cb8:	461a      	mov	r2, r3
   11cba:	79fb      	ldrb	r3, [r7, #7]
   11cbc:	4293      	cmp	r3, r2
   11cbe:	d101      	bne.n	11cc4 <usb_find_desc+0x34>
			return desc;
   11cc0:	68fb      	ldr	r3, [r7, #12]
   11cc2:	e008      	b.n	11cd6 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   11cc4:	68f8      	ldr	r0, [r7, #12]
   11cc6:	4b08      	ldr	r3, [pc, #32]	; (11ce8 <usb_find_desc+0x58>)
   11cc8:	4798      	blx	r3
   11cca:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   11ccc:	68fa      	ldr	r2, [r7, #12]
   11cce:	68bb      	ldr	r3, [r7, #8]
   11cd0:	429a      	cmp	r2, r3
   11cd2:	d3e5      	bcc.n	11ca0 <usb_find_desc+0x10>
	}
	return NULL;
   11cd4:	2300      	movs	r3, #0
}
   11cd6:	4618      	mov	r0, r3
   11cd8:	3710      	adds	r7, #16
   11cda:	46bd      	mov	sp, r7
   11cdc:	bd80      	pop	{r7, pc}
   11cde:	bf00      	nop
   11ce0:	00011bf7 	.word	0x00011bf7
   11ce4:	00011c0f 	.word	0x00011c0f
   11ce8:	00011c29 	.word	0x00011c29

00011cec <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   11cec:	b580      	push	{r7, lr}
   11cee:	b082      	sub	sp, #8
   11cf0:	af00      	add	r7, sp, #0
   11cf2:	6078      	str	r0, [r7, #4]
   11cf4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   11cf6:	e019      	b.n	11d2c <usb_find_ep_desc+0x40>
		_desc_len_check();
   11cf8:	6878      	ldr	r0, [r7, #4]
   11cfa:	4b12      	ldr	r3, [pc, #72]	; (11d44 <usb_find_ep_desc+0x58>)
   11cfc:	4798      	blx	r3
   11cfe:	4603      	mov	r3, r0
   11d00:	2b01      	cmp	r3, #1
   11d02:	d801      	bhi.n	11d08 <usb_find_ep_desc+0x1c>
   11d04:	2300      	movs	r3, #0
   11d06:	e018      	b.n	11d3a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   11d08:	6878      	ldr	r0, [r7, #4]
   11d0a:	4b0f      	ldr	r3, [pc, #60]	; (11d48 <usb_find_ep_desc+0x5c>)
   11d0c:	4798      	blx	r3
   11d0e:	4603      	mov	r3, r0
   11d10:	2b04      	cmp	r3, #4
   11d12:	d010      	beq.n	11d36 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   11d14:	6878      	ldr	r0, [r7, #4]
   11d16:	4b0c      	ldr	r3, [pc, #48]	; (11d48 <usb_find_ep_desc+0x5c>)
   11d18:	4798      	blx	r3
   11d1a:	4603      	mov	r3, r0
   11d1c:	2b05      	cmp	r3, #5
   11d1e:	d101      	bne.n	11d24 <usb_find_ep_desc+0x38>
			return desc;
   11d20:	687b      	ldr	r3, [r7, #4]
   11d22:	e00a      	b.n	11d3a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   11d24:	6878      	ldr	r0, [r7, #4]
   11d26:	4b09      	ldr	r3, [pc, #36]	; (11d4c <usb_find_ep_desc+0x60>)
   11d28:	4798      	blx	r3
   11d2a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   11d2c:	687a      	ldr	r2, [r7, #4]
   11d2e:	683b      	ldr	r3, [r7, #0]
   11d30:	429a      	cmp	r2, r3
   11d32:	d3e1      	bcc.n	11cf8 <usb_find_ep_desc+0xc>
   11d34:	e000      	b.n	11d38 <usb_find_ep_desc+0x4c>
			break;
   11d36:	bf00      	nop
	}
	return NULL;
   11d38:	2300      	movs	r3, #0
}
   11d3a:	4618      	mov	r0, r3
   11d3c:	3708      	adds	r7, #8
   11d3e:	46bd      	mov	sp, r7
   11d40:	bd80      	pop	{r7, pc}
   11d42:	bf00      	nop
   11d44:	00011bf7 	.word	0x00011bf7
   11d48:	00011c0f 	.word	0x00011c0f
   11d4c:	00011c29 	.word	0x00011c29

00011d50 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   11d50:	b580      	push	{r7, lr}
   11d52:	b084      	sub	sp, #16
   11d54:	af00      	add	r7, sp, #0
   11d56:	60f8      	str	r0, [r7, #12]
   11d58:	60b9      	str	r1, [r7, #8]
   11d5a:	4613      	mov	r3, r2
   11d5c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   11d5e:	2202      	movs	r2, #2
   11d60:	68b9      	ldr	r1, [r7, #8]
   11d62:	68f8      	ldr	r0, [r7, #12]
   11d64:	4b15      	ldr	r3, [pc, #84]	; (11dbc <usb_find_cfg_desc+0x6c>)
   11d66:	4798      	blx	r3
   11d68:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   11d6a:	68fb      	ldr	r3, [r7, #12]
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	d11a      	bne.n	11da6 <usb_find_cfg_desc+0x56>
		return NULL;
   11d70:	2300      	movs	r3, #0
   11d72:	e01f      	b.n	11db4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   11d74:	68f8      	ldr	r0, [r7, #12]
   11d76:	4b12      	ldr	r3, [pc, #72]	; (11dc0 <usb_find_cfg_desc+0x70>)
   11d78:	4798      	blx	r3
   11d7a:	4603      	mov	r3, r0
   11d7c:	2b01      	cmp	r3, #1
   11d7e:	d801      	bhi.n	11d84 <usb_find_cfg_desc+0x34>
   11d80:	2300      	movs	r3, #0
   11d82:	e017      	b.n	11db4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   11d84:	68fb      	ldr	r3, [r7, #12]
   11d86:	3301      	adds	r3, #1
   11d88:	781b      	ldrb	r3, [r3, #0]
   11d8a:	2b02      	cmp	r3, #2
   11d8c:	d110      	bne.n	11db0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   11d8e:	68fb      	ldr	r3, [r7, #12]
   11d90:	3305      	adds	r3, #5
   11d92:	781b      	ldrb	r3, [r3, #0]
   11d94:	79fa      	ldrb	r2, [r7, #7]
   11d96:	429a      	cmp	r2, r3
   11d98:	d101      	bne.n	11d9e <usb_find_cfg_desc+0x4e>
			return desc;
   11d9a:	68fb      	ldr	r3, [r7, #12]
   11d9c:	e00a      	b.n	11db4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   11d9e:	68f8      	ldr	r0, [r7, #12]
   11da0:	4b08      	ldr	r3, [pc, #32]	; (11dc4 <usb_find_cfg_desc+0x74>)
   11da2:	4798      	blx	r3
   11da4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   11da6:	68fa      	ldr	r2, [r7, #12]
   11da8:	68bb      	ldr	r3, [r7, #8]
   11daa:	429a      	cmp	r2, r3
   11dac:	d3e2      	bcc.n	11d74 <usb_find_cfg_desc+0x24>
   11dae:	e000      	b.n	11db2 <usb_find_cfg_desc+0x62>
			break;
   11db0:	bf00      	nop
	}
	return NULL;
   11db2:	2300      	movs	r3, #0
}
   11db4:	4618      	mov	r0, r3
   11db6:	3710      	adds	r7, #16
   11db8:	46bd      	mov	sp, r7
   11dba:	bd80      	pop	{r7, pc}
   11dbc:	00011c91 	.word	0x00011c91
   11dc0:	00011bf7 	.word	0x00011bf7
   11dc4:	00011c6d 	.word	0x00011c6d

00011dc8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b086      	sub	sp, #24
   11dcc:	af00      	add	r7, sp, #0
   11dce:	60f8      	str	r0, [r7, #12]
   11dd0:	60b9      	str	r1, [r7, #8]
   11dd2:	4613      	mov	r3, r2
   11dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   11dd6:	2300      	movs	r3, #0
   11dd8:	75fb      	strb	r3, [r7, #23]
   11dda:	e020      	b.n	11e1e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   11ddc:	2203      	movs	r2, #3
   11dde:	68b9      	ldr	r1, [r7, #8]
   11de0:	68f8      	ldr	r0, [r7, #12]
   11de2:	4b13      	ldr	r3, [pc, #76]	; (11e30 <usb_find_str_desc+0x68>)
   11de4:	4798      	blx	r3
   11de6:	60f8      	str	r0, [r7, #12]
		if (desc) {
   11de8:	68fb      	ldr	r3, [r7, #12]
   11dea:	2b00      	cmp	r3, #0
   11dec:	d015      	beq.n	11e1a <usb_find_str_desc+0x52>
			_desc_len_check();
   11dee:	68f8      	ldr	r0, [r7, #12]
   11df0:	4b10      	ldr	r3, [pc, #64]	; (11e34 <usb_find_str_desc+0x6c>)
   11df2:	4798      	blx	r3
   11df4:	4603      	mov	r3, r0
   11df6:	2b01      	cmp	r3, #1
   11df8:	d801      	bhi.n	11dfe <usb_find_str_desc+0x36>
   11dfa:	2300      	movs	r3, #0
   11dfc:	e014      	b.n	11e28 <usb_find_str_desc+0x60>
			if (i == str_index) {
   11dfe:	7dfa      	ldrb	r2, [r7, #23]
   11e00:	79fb      	ldrb	r3, [r7, #7]
   11e02:	429a      	cmp	r2, r3
   11e04:	d101      	bne.n	11e0a <usb_find_str_desc+0x42>
				return desc;
   11e06:	68fb      	ldr	r3, [r7, #12]
   11e08:	e00e      	b.n	11e28 <usb_find_str_desc+0x60>
			}
			i++;
   11e0a:	7dfb      	ldrb	r3, [r7, #23]
   11e0c:	3301      	adds	r3, #1
   11e0e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   11e10:	68f8      	ldr	r0, [r7, #12]
   11e12:	4b09      	ldr	r3, [pc, #36]	; (11e38 <usb_find_str_desc+0x70>)
   11e14:	4798      	blx	r3
   11e16:	60f8      	str	r0, [r7, #12]
   11e18:	e001      	b.n	11e1e <usb_find_str_desc+0x56>
		} else {
			return NULL;
   11e1a:	2300      	movs	r3, #0
   11e1c:	e004      	b.n	11e28 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   11e1e:	68fa      	ldr	r2, [r7, #12]
   11e20:	68bb      	ldr	r3, [r7, #8]
   11e22:	429a      	cmp	r2, r3
   11e24:	d3da      	bcc.n	11ddc <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   11e26:	2300      	movs	r3, #0
}
   11e28:	4618      	mov	r0, r3
   11e2a:	3718      	adds	r7, #24
   11e2c:	46bd      	mov	sp, r7
   11e2e:	bd80      	pop	{r7, pc}
   11e30:	00011c91 	.word	0x00011c91
   11e34:	00011bf7 	.word	0x00011bf7
   11e38:	00011c29 	.word	0x00011c29

00011e3c <_ZN10AMMC_ClassD1Ev>:
} //AMMC_Class

// default destructor
AMMC_Class::~AMMC_Class()
{
} //~AMMC_Class
   11e3c:	4770      	bx	lr
	...

00011e40 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
   11e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11e44:	4c27      	ldr	r4, [pc, #156]	; (11ee4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xa4>)
   11e46:	4928      	ldr	r1, [pc, #160]	; (11ee8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xa8>)
   11e48:	4620      	mov	r0, r4
   11e4a:	4f28      	ldr	r7, [pc, #160]	; (11eec <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xac>)
   11e4c:	47b8      	blx	r7
   11e4e:	4e28      	ldr	r6, [pc, #160]	; (11ef0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xb0>)
   11e50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11f14 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xd4>
   11e54:	4632      	mov	r2, r6
   11e56:	4641      	mov	r1, r8
   11e58:	4620      	mov	r0, r4
   11e5a:	4d26      	ldr	r5, [pc, #152]	; (11ef4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xb4>)
   11e5c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11e5e:	f104 0920 	add.w	r9, r4, #32
   11e62:	4925      	ldr	r1, [pc, #148]	; (11ef8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xb8>)
   11e64:	4648      	mov	r0, r9
   11e66:	47b8      	blx	r7
   11e68:	4632      	mov	r2, r6
   11e6a:	4641      	mov	r1, r8
   11e6c:	4648      	mov	r0, r9
   11e6e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11e70:	f104 0940 	add.w	r9, r4, #64	; 0x40
   11e74:	4921      	ldr	r1, [pc, #132]	; (11efc <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xbc>)
   11e76:	4648      	mov	r0, r9
   11e78:	47b8      	blx	r7
   11e7a:	4632      	mov	r2, r6
   11e7c:	4641      	mov	r1, r8
   11e7e:	4648      	mov	r0, r9
   11e80:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11e82:	f104 0960 	add.w	r9, r4, #96	; 0x60
   11e86:	491e      	ldr	r1, [pc, #120]	; (11f00 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xc0>)
   11e88:	4648      	mov	r0, r9
   11e8a:	47b8      	blx	r7
   11e8c:	4632      	mov	r2, r6
   11e8e:	4641      	mov	r1, r8
   11e90:	4648      	mov	r0, r9
   11e92:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11e94:	f104 0980 	add.w	r9, r4, #128	; 0x80
   11e98:	491a      	ldr	r1, [pc, #104]	; (11f04 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xc4>)
   11e9a:	4648      	mov	r0, r9
   11e9c:	47b8      	blx	r7
   11e9e:	4632      	mov	r2, r6
   11ea0:	4641      	mov	r1, r8
   11ea2:	4648      	mov	r0, r9
   11ea4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11ea6:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
   11eaa:	4917      	ldr	r1, [pc, #92]	; (11f08 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xc8>)
   11eac:	4648      	mov	r0, r9
   11eae:	47b8      	blx	r7
   11eb0:	4632      	mov	r2, r6
   11eb2:	4641      	mov	r1, r8
   11eb4:	4648      	mov	r0, r9
   11eb6:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11eb8:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
   11ebc:	4913      	ldr	r1, [pc, #76]	; (11f0c <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xcc>)
   11ebe:	4648      	mov	r0, r9
   11ec0:	47b8      	blx	r7
   11ec2:	4632      	mov	r2, r6
   11ec4:	4641      	mov	r1, r8
   11ec6:	4648      	mov	r0, r9
   11ec8:	47a8      	blx	r5
AMMC_Class	ammc1;
   11eca:	4f11      	ldr	r7, [pc, #68]	; (11f10 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0xd0>)
   11ecc:	4632      	mov	r2, r6
   11ece:	4639      	mov	r1, r7
   11ed0:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   11ed4:	47a8      	blx	r5
AMMC_Class	ammc2;
   11ed6:	4632      	mov	r2, r6
   11ed8:	4639      	mov	r1, r7
   11eda:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
   11ede:	47a8      	blx	r5
   11ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ee4:	20001dc4 	.word	0x20001dc4
   11ee8:	2000d6d8 	.word	0x2000d6d8
   11eec:	00013d09 	.word	0x00013d09
   11ef0:	20000000 	.word	0x20000000
   11ef4:	0001a44d 	.word	0x0001a44d
   11ef8:	2000d76c 	.word	0x2000d76c
   11efc:	2000d870 	.word	0x2000d870
   11f00:	2000d78c 	.word	0x2000d78c
   11f04:	2000d830 	.word	0x2000d830
   11f08:	2000d850 	.word	0x2000d850
   11f0c:	2000d748 	.word	0x2000d748
   11f10:	00011e3d 	.word	0x00011e3d
   11f14:	00013d41 	.word	0x00013d41

00011f18 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   11f18:	b410      	push	{r4}
   11f1a:	680a      	ldr	r2, [r1, #0]
   11f1c:	6002      	str	r2, [r0, #0]
   11f1e:	684c      	ldr	r4, [r1, #4]
   11f20:	f852 2c0c 	ldr.w	r2, [r2, #-12]
   11f24:	5084      	str	r4, [r0, r2]
   11f26:	6889      	ldr	r1, [r1, #8]
   11f28:	6802      	ldr	r2, [r0, #0]
   11f2a:	f852 2c10 	ldr.w	r2, [r2, #-16]
   11f2e:	5081      	str	r1, [r0, r2]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   11f30:	bc10      	pop	{r4}
   11f32:	4770      	bx	lr

00011f34 <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   11f34:	b410      	push	{r4}
   11f36:	680a      	ldr	r2, [r1, #0]
   11f38:	6002      	str	r2, [r0, #0]
   11f3a:	684c      	ldr	r4, [r1, #4]
   11f3c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
   11f40:	5084      	str	r4, [r0, r2]
   11f42:	6889      	ldr	r1, [r1, #8]
   11f44:	6802      	ldr	r2, [r0, #0]
   11f46:	f852 2c10 	ldr.w	r2, [r2, #-16]
   11f4a:	5081      	str	r1, [r0, r2]
{
} //~ARINC_Buffer_Class
   11f4c:	bc10      	pop	{r4}
   11f4e:	4770      	bx	lr

00011f50 <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   11f50:	b430      	push	{r4, r5}
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   11f52:	4d14      	ldr	r5, [pc, #80]	; (11fa4 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>)
   11f54:	6045      	str	r5, [r0, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   11f56:	f105 0320 	add.w	r3, r5, #32
   11f5a:	6083      	str	r3, [r0, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   11f5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   11f60:	60c3      	str	r3, [r0, #12]
   11f62:	f105 0260 	add.w	r2, r5, #96	; 0x60
   11f66:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
   11f6a:	f100 0420 	add.w	r4, r0, #32
   11f6e:	460d      	mov	r5, r1
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
		{
			for (uint8_t j = 0; j < 4; j++)
			{
				bufferReceiverBuffer[i][j]=0;
   11f70:	2300      	movs	r3, #0
   11f72:	7013      	strb	r3, [r2, #0]
				bufferTransmitBuffer[i][j]=0;
   11f74:	700b      	strb	r3, [r1, #0]
				bufferReceiverBuffer[i][j]=0;
   11f76:	7053      	strb	r3, [r2, #1]
				bufferTransmitBuffer[i][j]=0;
   11f78:	704b      	strb	r3, [r1, #1]
				bufferReceiverBuffer[i][j]=0;
   11f7a:	7093      	strb	r3, [r2, #2]
				bufferTransmitBuffer[i][j]=0;
   11f7c:	708b      	strb	r3, [r1, #2]
				bufferReceiverBuffer[i][j]=0;
   11f7e:	70d3      	strb	r3, [r2, #3]
				bufferTransmitBuffer[i][j]=0;
   11f80:	70cb      	strb	r3, [r1, #3]
			}
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   11f82:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   11f86:	f844 1f04 	str.w	r1, [r4, #4]!
   11f8a:	3204      	adds	r2, #4
   11f8c:	3104      	adds	r1, #4
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   11f8e:	4295      	cmp	r5, r2
   11f90:	d1ef      	bne.n	11f72 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x22>
			
		}
		receiverBuffer=pointerArrayRX;
   11f92:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   11f96:	6103      	str	r3, [r0, #16]
		transmitBuffer=pointerArrayTX;
   11f98:	f100 0324 	add.w	r3, r0, #36	; 0x24
   11f9c:	6143      	str	r3, [r0, #20]
}
   11f9e:	bc30      	pop	{r4, r5}
   11fa0:	4770      	bx	lr
   11fa2:	bf00      	nop
   11fa4:	20001eb0 	.word	0x20001eb0

00011fa8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh>:

void ARINC_Buffer_Class::SaveFlapperValveAngle(uint8_t angle){
   11fa8:	b538      	push	{r3, r4, r5, lr}
   11faa:	4604      	mov	r4, r0
   11fac:	460d      	mov	r5, r1
	octalLabel=Label2Byte(FlapperValveAngle);
   11fae:	6803      	ldr	r3, [r0, #0]
   11fb0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   11fb4:	5823      	ldr	r3, [r4, r0]
   11fb6:	685b      	ldr	r3, [r3, #4]
   11fb8:	f240 1177 	movw	r1, #375	; 0x177
   11fbc:	4420      	add	r0, r4
   11fbe:	4798      	blx	r3
   11fc0:	4601      	mov	r1, r0
   11fc2:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   11fc4:	6823      	ldr	r3, [r4, #0]
   11fc6:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   11fca:	6862      	ldr	r2, [r4, #4]
   11fcc:	4420      	add	r0, r4
   11fce:	4b0f      	ldr	r3, [pc, #60]	; (1200c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x64>)
   11fd0:	4798      	blx	r3
   11fd2:	7620      	strb	r0, [r4, #24]
	if (index<0x20)
   11fd4:	281f      	cmp	r0, #31
   11fd6:	dd00      	ble.n	11fda <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x32>
   11fd8:	bd38      	pop	{r3, r4, r5, pc}
	{
			data=MakeTXLabel375(angle);
   11fda:	6823      	ldr	r3, [r4, #0]
   11fdc:	f853 0c10 	ldr.w	r0, [r3, #-16]
   11fe0:	4629      	mov	r1, r5
   11fe2:	4420      	add	r0, r4
   11fe4:	4b0a      	ldr	r3, [pc, #40]	; (12010 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x68>)
   11fe6:	4798      	blx	r3
   11fe8:	4601      	mov	r1, r0
   11fea:	61e0      	str	r0, [r4, #28]
			Uint32FourBytesArray(data,localArray);
   11fec:	6823      	ldr	r3, [r4, #0]
   11fee:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   11ff2:	f104 0220 	add.w	r2, r4, #32
   11ff6:	4420      	add	r0, r4
   11ff8:	4b06      	ldr	r3, [pc, #24]	; (12014 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x6c>)
   11ffa:	4798      	blx	r3
			memcpy(transmitBuffer[index],localArray,4);
   11ffc:	7e22      	ldrb	r2, [r4, #24]
   11ffe:	6963      	ldr	r3, [r4, #20]
   12000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12004:	6a22      	ldr	r2, [r4, #32]
   12006:	601a      	str	r2, [r3, #0]
	} 
	else
	{
	}

}
   12008:	e7e6      	b.n	11fd8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEh+0x30>
   1200a:	bf00      	nop
   1200c:	00012363 	.word	0x00012363
   12010:	00013111 	.word	0x00013111
   12014:	000123a5 	.word	0x000123a5

00012018 <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272>:

void ARINC_Buffer_Class::SaveFansSpeed(Command272 c272){
   12018:	b510      	push	{r4, lr}
   1201a:	b082      	sub	sp, #8
   1201c:	4604      	mov	r4, r0
   1201e:	9101      	str	r1, [sp, #4]
	octalLabel=Label2Byte(FANS_SPEED_CALLBACK);
   12020:	6803      	ldr	r3, [r0, #0]
   12022:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12026:	5823      	ldr	r3, [r4, r0]
   12028:	685b      	ldr	r3, [r3, #4]
   1202a:	f44f 71ba 	mov.w	r1, #372	; 0x174
   1202e:	4420      	add	r0, r4
   12030:	4798      	blx	r3
   12032:	4601      	mov	r1, r0
   12034:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12036:	6823      	ldr	r3, [r4, #0]
   12038:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1203c:	6862      	ldr	r2, [r4, #4]
   1203e:	4420      	add	r0, r4
   12040:	4b0f      	ldr	r3, [pc, #60]	; (12080 <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272+0x68>)
   12042:	4798      	blx	r3
   12044:	7620      	strb	r0, [r4, #24]
	if (index<0x20)
   12046:	281f      	cmp	r0, #31
   12048:	dd01      	ble.n	1204e <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272+0x36>
	}
	else
	{
	}

}
   1204a:	b002      	add	sp, #8
   1204c:	bd10      	pop	{r4, pc}
		data=MakeTXLabel372(c272);
   1204e:	6823      	ldr	r3, [r4, #0]
   12050:	f853 0c10 	ldr.w	r0, [r3, #-16]
   12054:	9901      	ldr	r1, [sp, #4]
   12056:	4420      	add	r0, r4
   12058:	4b0a      	ldr	r3, [pc, #40]	; (12084 <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272+0x6c>)
   1205a:	4798      	blx	r3
   1205c:	4601      	mov	r1, r0
   1205e:	61e0      	str	r0, [r4, #28]
		Uint32FourBytesArray(data,localArray);
   12060:	6823      	ldr	r3, [r4, #0]
   12062:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12066:	f104 0220 	add.w	r2, r4, #32
   1206a:	4420      	add	r0, r4
   1206c:	4b06      	ldr	r3, [pc, #24]	; (12088 <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272+0x70>)
   1206e:	4798      	blx	r3
		memcpy(transmitBuffer[index],localArray,4);
   12070:	7e22      	ldrb	r2, [r4, #24]
   12072:	6963      	ldr	r3, [r4, #20]
   12074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12078:	6a22      	ldr	r2, [r4, #32]
   1207a:	601a      	str	r2, [r3, #0]
}
   1207c:	e7e5      	b.n	1204a <_ZN18ARINC_Buffer_Class13SaveFansSpeedE10Command272+0x32>
   1207e:	bf00      	nop
   12080:	00012363 	.word	0x00012363
   12084:	00013141 	.word	0x00013141
   12088:	000123a5 	.word	0x000123a5

0001208c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   1208c:	b570      	push	{r4, r5, r6, lr}
   1208e:	4604      	mov	r4, r0
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   12090:	6803      	ldr	r3, [r0, #0]
   12092:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12096:	5823      	ldr	r3, [r4, r0]
   12098:	685b      	ldr	r3, [r3, #4]
   1209a:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1209e:	4420      	add	r0, r4
   120a0:	4798      	blx	r3
   120a2:	4601      	mov	r1, r0
   120a4:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   120a6:	6823      	ldr	r3, [r4, #0]
   120a8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   120ac:	6862      	ldr	r2, [r4, #4]
   120ae:	4420      	add	r0, r4
   120b0:	4b12      	ldr	r3, [pc, #72]	; (120fc <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x70>)
   120b2:	4798      	blx	r3
   120b4:	7620      	strb	r0, [r4, #24]
	float temperature=temperatures.values[0][3];
   120b6:	4b12      	ldr	r3, [pc, #72]	; (12100 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x74>)
   120b8:	6f9e      	ldr	r6, [r3, #120]	; 0x78
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   120ba:	6823      	ldr	r3, [r4, #0]
   120bc:	f853 5c10 	ldr.w	r5, [r3, #-16]
   120c0:	4425      	add	r5, r4
   120c2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   120c6:	220f      	movs	r2, #15
   120c8:	4631      	mov	r1, r6
   120ca:	4420      	add	r0, r4
   120cc:	4b0d      	ldr	r3, [pc, #52]	; (12104 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x78>)
   120ce:	4798      	blx	r3
   120d0:	4632      	mov	r2, r6
   120d2:	4601      	mov	r1, r0
   120d4:	4628      	mov	r0, r5
   120d6:	4b0c      	ldr	r3, [pc, #48]	; (12108 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x7c>)
   120d8:	4798      	blx	r3
   120da:	4601      	mov	r1, r0
   120dc:	61e0      	str	r0, [r4, #28]
	Uint32FourBytesArray(data,localArray);
   120de:	6823      	ldr	r3, [r4, #0]
   120e0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   120e4:	f104 0220 	add.w	r2, r4, #32
   120e8:	4420      	add	r0, r4
   120ea:	4b08      	ldr	r3, [pc, #32]	; (1210c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x80>)
   120ec:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   120ee:	7e22      	ldrb	r2, [r4, #24]
   120f0:	6963      	ldr	r3, [r4, #20]
   120f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   120f6:	6a22      	ldr	r2, [r4, #32]
   120f8:	601a      	str	r2, [r3, #0]
   120fa:	bd70      	pop	{r4, r5, r6, pc}
   120fc:	00012363 	.word	0x00012363
   12100:	2000d118 	.word	0x2000d118
   12104:	000123b5 	.word	0x000123b5
   12108:	000130c5 	.word	0x000130c5
   1210c:	000123a5 	.word	0x000123a5

00012110 <_ZN18ARINC_Buffer_Class10SaveStatusEm>:
}

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12110:	b538      	push	{r3, r4, r5, lr}
   12112:	4604      	mov	r4, r0
   12114:	460d      	mov	r5, r1
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   12116:	6803      	ldr	r3, [r0, #0]
   12118:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1211c:	5823      	ldr	r3, [r4, r0]
   1211e:	685b      	ldr	r3, [r3, #4]
   12120:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12124:	4420      	add	r0, r4
   12126:	4798      	blx	r3
   12128:	4601      	mov	r1, r0
   1212a:	7660      	strb	r0, [r4, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   1212c:	6823      	ldr	r3, [r4, #0]
   1212e:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12132:	6862      	ldr	r2, [r4, #4]
   12134:	4420      	add	r0, r4
   12136:	4b0d      	ldr	r3, [pc, #52]	; (1216c <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x5c>)
   12138:	4798      	blx	r3
   1213a:	7620      	strb	r0, [r4, #24]
	data=MakeLabel270(st);
   1213c:	6823      	ldr	r3, [r4, #0]
   1213e:	f853 0c10 	ldr.w	r0, [r3, #-16]
   12142:	4629      	mov	r1, r5
   12144:	4420      	add	r0, r4
   12146:	4b0a      	ldr	r3, [pc, #40]	; (12170 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x60>)
   12148:	4798      	blx	r3
   1214a:	4601      	mov	r1, r0
   1214c:	61e0      	str	r0, [r4, #28]
	Uint32FourBytesArray(data,localArray);
   1214e:	6823      	ldr	r3, [r4, #0]
   12150:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12154:	f104 0220 	add.w	r2, r4, #32
   12158:	4420      	add	r0, r4
   1215a:	4b06      	ldr	r3, [pc, #24]	; (12174 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0x64>)
   1215c:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   1215e:	7e22      	ldrb	r2, [r4, #24]
   12160:	6963      	ldr	r3, [r4, #20]
   12162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12166:	6a22      	ldr	r2, [r4, #32]
   12168:	601a      	str	r2, [r3, #0]
   1216a:	bd38      	pop	{r3, r4, r5, pc}
   1216c:	00012363 	.word	0x00012363
   12170:	00013185 	.word	0x00013185
   12174:	000123a5 	.word	0x000123a5

00012178 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:
}

void ARINC_Buffer_Class::SortReceivedData(uint8_t* localReceiver){
   12178:	2300      	movs	r3, #0
   1217a:	e014      	b.n	121a6 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x2e>
   1217c:	3301      	adds	r3, #1
		uint8_t i;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   1217e:	2b20      	cmp	r3, #32
   12180:	d00c      	beq.n	1219c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x24>
		{
			if (LabelsArrayRX1[i]>0)
   12182:	6882      	ldr	r2, [r0, #8]
   12184:	5cd2      	ldrb	r2, [r2, r3]
   12186:	2a00      	cmp	r2, #0
   12188:	d0f8      	beq.n	1217c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
			{
			
					if (localReceiver[3]==LabelsArrayRX1[i])
   1218a:	78cc      	ldrb	r4, [r1, #3]
   1218c:	4294      	cmp	r4, r2
   1218e:	d1f5      	bne.n	1217c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					{
						memcpy(receiverBuffer[i],localReceiver,4);
   12190:	6902      	ldr	r2, [r0, #16]
   12192:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12196:	680c      	ldr	r4, [r1, #0]
   12198:	6014      	str	r4, [r2, #0]
   1219a:	e7ef      	b.n	1217c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					}
			
	
			}
		}
   1219c:	bc10      	pop	{r4}
   1219e:	4770      	bx	lr
   121a0:	3301      	adds	r3, #1
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   121a2:	2b20      	cmp	r3, #32
   121a4:	d005      	beq.n	121b2 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x3a>
			if (LabelsArrayRX1[i]>0)
   121a6:	6882      	ldr	r2, [r0, #8]
   121a8:	5cd2      	ldrb	r2, [r2, r3]
   121aa:	2a00      	cmp	r2, #0
   121ac:	d0f8      	beq.n	121a0 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x28>
void ARINC_Buffer_Class::SortReceivedData(uint8_t* localReceiver){
   121ae:	b410      	push	{r4}
   121b0:	e7eb      	b.n	1218a <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x12>
   121b2:	4770      	bx	lr

000121b4 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev>:
   121b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   121b8:	4c23      	ldr	r4, [pc, #140]	; (12248 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0x94>)
   121ba:	f504 75b0 	add.w	r5, r4, #352	; 0x160
   121be:	4923      	ldr	r1, [pc, #140]	; (1224c <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0x98>)
   121c0:	4628      	mov	r0, r5
   121c2:	4e23      	ldr	r6, [pc, #140]	; (12250 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0x9c>)
   121c4:	47b0      	blx	r6
   121c6:	4f23      	ldr	r7, [pc, #140]	; (12254 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xa0>)
   121c8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 12274 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xc0>
   121cc:	463a      	mov	r2, r7
   121ce:	4641      	mov	r1, r8
   121d0:	4628      	mov	r0, r5
   121d2:	4d21      	ldr	r5, [pc, #132]	; (12258 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xa4>)
   121d4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   121d6:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   121da:	4920      	ldr	r1, [pc, #128]	; (1225c <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xa8>)
   121dc:	4648      	mov	r0, r9
   121de:	47b0      	blx	r6
   121e0:	463a      	mov	r2, r7
   121e2:	4641      	mov	r1, r8
   121e4:	4648      	mov	r0, r9
   121e6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   121e8:	f504 79d0 	add.w	r9, r4, #416	; 0x1a0
   121ec:	491c      	ldr	r1, [pc, #112]	; (12260 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xac>)
   121ee:	4648      	mov	r0, r9
   121f0:	47b0      	blx	r6
   121f2:	463a      	mov	r2, r7
   121f4:	4641      	mov	r1, r8
   121f6:	4648      	mov	r0, r9
   121f8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   121fa:	f504 79e0 	add.w	r9, r4, #448	; 0x1c0
   121fe:	4919      	ldr	r1, [pc, #100]	; (12264 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xb0>)
   12200:	4648      	mov	r0, r9
   12202:	47b0      	blx	r6
   12204:	463a      	mov	r2, r7
   12206:	4641      	mov	r1, r8
   12208:	4648      	mov	r0, r9
   1220a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1220c:	f504 79f0 	add.w	r9, r4, #480	; 0x1e0
   12210:	4915      	ldr	r1, [pc, #84]	; (12268 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xb4>)
   12212:	4648      	mov	r0, r9
   12214:	47b0      	blx	r6
   12216:	463a      	mov	r2, r7
   12218:	4641      	mov	r1, r8
   1221a:	4648      	mov	r0, r9
   1221c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1221e:	f504 7900 	add.w	r9, r4, #512	; 0x200
   12222:	4912      	ldr	r1, [pc, #72]	; (1226c <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xb8>)
   12224:	4648      	mov	r0, r9
   12226:	47b0      	blx	r6
   12228:	463a      	mov	r2, r7
   1222a:	4641      	mov	r1, r8
   1222c:	4648      	mov	r0, r9
   1222e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   12230:	f504 7408 	add.w	r4, r4, #544	; 0x220
   12234:	490e      	ldr	r1, [pc, #56]	; (12270 <_GLOBAL__sub_I__ZN18ARINC_Buffer_ClassC2Ev+0xbc>)
   12236:	4620      	mov	r0, r4
   12238:	47b0      	blx	r6
   1223a:	463a      	mov	r2, r7
   1223c:	4641      	mov	r1, r8
   1223e:	4620      	mov	r0, r4
   12240:	47a8      	blx	r5
   12242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12246:	bf00      	nop
   12248:	20001eb0 	.word	0x20001eb0
   1224c:	2000d6d8 	.word	0x2000d6d8
   12250:	00013d09 	.word	0x00013d09
   12254:	20000000 	.word	0x20000000
   12258:	0001a44d 	.word	0x0001a44d
   1225c:	2000d76c 	.word	0x2000d76c
   12260:	2000d870 	.word	0x2000d870
   12264:	2000d78c 	.word	0x2000d78c
   12268:	2000d830 	.word	0x2000d830
   1226c:	2000d850 	.word	0x2000d850
   12270:	2000d748 	.word	0x2000d748
   12274:	00013d41 	.word	0x00013d41

00012278 <_ZN17ARINC_Conversions8FlipByteEh>:
}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
	uint8_t rev=0;
	for (int i=0;i<8;i++)
   12278:	2300      	movs	r3, #0
	uint8_t rev=0;
   1227a:	4618      	mov	r0, r3
	{
		rev=rev<<1;
		rev|=(byte>>i)&(0x01);
   1227c:	fa41 f203 	asr.w	r2, r1, r3
   12280:	f002 0201 	and.w	r2, r2, #1
   12284:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
   12288:	b2c0      	uxtb	r0, r0
	for (int i=0;i<8;i++)
   1228a:	3301      	adds	r3, #1
   1228c:	2b08      	cmp	r3, #8
   1228e:	d1f5      	bne.n	1227c <_ZN17ARINC_Conversions8FlipByteEh+0x4>
	}
	return rev;
}
   12290:	4770      	bx	lr
	...

00012294 <_ZN17ARINC_Conversions10Label2ByteEm>:
uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   12294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12298:	b085      	sub	sp, #20
   1229a:	4680      	mov	r8, r0
   1229c:	4608      	mov	r0, r1
   1229e:	f04f 0a02 	mov.w	sl, #2
	result=0;
   122a2:	f04f 0900 	mov.w	r9, #0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   122a6:	4f23      	ldr	r7, [pc, #140]	; (12334 <_ZN17ARINC_Conversions10Label2ByteEm+0xa0>)
   122a8:	464e      	mov	r6, r9
   122aa:	46c3      	mov	fp, r8
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   122ac:	4b22      	ldr	r3, [pc, #136]	; (12338 <_ZN17ARINC_Conversions10Label2ByteEm+0xa4>)
   122ae:	4798      	blx	r3
   122b0:	4604      	mov	r4, r0
   122b2:	460d      	mov	r5, r1
   122b4:	4650      	mov	r0, sl
   122b6:	47b8      	blx	r7
   122b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   122bc:	4602      	mov	r2, r0
   122be:	460b      	mov	r3, r1
   122c0:	2000      	movs	r0, #0
   122c2:	491e      	ldr	r1, [pc, #120]	; (1233c <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
   122c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 12348 <_ZN17ARINC_Conversions10Label2ByteEm+0xb4>
   122c8:	47c0      	blx	r8
   122ca:	4602      	mov	r2, r0
   122cc:	460b      	mov	r3, r1
   122ce:	e9cd 4500 	strd	r4, r5, [sp]
   122d2:	4620      	mov	r0, r4
   122d4:	4629      	mov	r1, r5
   122d6:	4c1a      	ldr	r4, [pc, #104]	; (12340 <_ZN17ARINC_Conversions10Label2ByteEm+0xac>)
   122d8:	47a0      	blx	r4
   122da:	4d1a      	ldr	r5, [pc, #104]	; (12344 <_ZN17ARINC_Conversions10Label2ByteEm+0xb0>)
   122dc:	47a8      	blx	r5
		label-=octals[2-i]*pow(10,2-i);
   122de:	b2c4      	uxtb	r4, r0
   122e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   122e4:	2000      	movs	r0, #0
   122e6:	4915      	ldr	r1, [pc, #84]	; (1233c <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
   122e8:	47c0      	blx	r8
   122ea:	4680      	mov	r8, r0
   122ec:	4689      	mov	r9, r1
   122ee:	4620      	mov	r0, r4
   122f0:	47b8      	blx	r7
   122f2:	4642      	mov	r2, r8
   122f4:	464b      	mov	r3, r9
   122f6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1234c <_ZN17ARINC_Conversions10Label2ByteEm+0xb8>
   122fa:	47c0      	blx	r8
   122fc:	4602      	mov	r2, r0
   122fe:	460b      	mov	r3, r1
   12300:	e9dd 0100 	ldrd	r0, r1, [sp]
   12304:	f8df 8048 	ldr.w	r8, [pc, #72]	; 12350 <_ZN17ARINC_Conversions10Label2ByteEm+0xbc>
   12308:	47c0      	blx	r8
   1230a:	47a8      	blx	r5
		result|=octals[2-i]<<(6-3*i);
   1230c:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   12310:	409c      	lsls	r4, r3
   12312:	4326      	orrs	r6, r4
   12314:	b2f6      	uxtb	r6, r6
   12316:	f10a 3aff 	add.w	sl, sl, #4294967295
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1231a:	f1ba 3fff 	cmp.w	sl, #4294967295
   1231e:	d1c5      	bne.n	122ac <_ZN17ARINC_Conversions10Label2ByteEm+0x18>
	result=FlipByte(result);
   12320:	f8db 3000 	ldr.w	r3, [fp]
   12324:	681b      	ldr	r3, [r3, #0]
   12326:	4631      	mov	r1, r6
   12328:	4658      	mov	r0, fp
   1232a:	4798      	blx	r3
}
   1232c:	b005      	add	sp, #20
   1232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12332:	bf00      	nop
   12334:	0001b849 	.word	0x0001b849
   12338:	0001b829 	.word	0x0001b829
   1233c:	40240000 	.word	0x40240000
   12340:	0001bb69 	.word	0x0001bb69
   12344:	0001be75 	.word	0x0001be75
   12348:	0001a45d 	.word	0x0001a45d
   1234c:	0001b915 	.word	0x0001b915
   12350:	0001b5ad 	.word	0x0001b5ad

00012354 <_ZN17ARINC_ConversionsC1Ev>:
ARINC_Conversions::ARINC_Conversions()
   12354:	4b01      	ldr	r3, [pc, #4]	; (1235c <_ZN17ARINC_ConversionsC1Ev+0x8>)
   12356:	6003      	str	r3, [r0, #0]
} //ARINC_Conversions
   12358:	4770      	bx	lr
   1235a:	bf00      	nop
   1235c:	0001cf4c 	.word	0x0001cf4c

00012360 <_ZN17ARINC_ConversionsD1Ev>:
} //~ARINC_Conversions
   12360:	4770      	bx	lr

00012362 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
	for (uint8_t ii = 0; ii < 32; ii++)
	{
		if (arr[ii]==l)
   12362:	7813      	ldrb	r3, [r2, #0]
   12364:	428b      	cmp	r3, r1
   12366:	d009      	beq.n	1237c <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1a>
   12368:	2001      	movs	r0, #1
   1236a:	5c13      	ldrb	r3, [r2, r0]
   1236c:	428b      	cmp	r3, r1
   1236e:	d006      	beq.n	1237e <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1c>
	for (uint8_t ii = 0; ii < 32; ii++)
   12370:	3001      	adds	r0, #1
   12372:	b2c0      	uxtb	r0, r0
   12374:	281f      	cmp	r0, #31
   12376:	ddf8      	ble.n	1236a <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x8>
		{
			return ii;
		}
		
	}
	return 32;
   12378:	2020      	movs	r0, #32
   1237a:	4770      	bx	lr
	for (uint8_t ii = 0; ii < 32; ii++)
   1237c:	2000      	movs	r0, #0
}
   1237e:	4770      	bx	lr

00012380 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   12380:	b410      	push	{r4}

		result=0;
   12382:	2300      	movs	r3, #0
   12384:	6083      	str	r3, [r0, #8]
   12386:	3901      	subs	r1, #1
   12388:	2218      	movs	r2, #24
		uint8_t array32;
		for (uint8_t ii = 0; ii < 4; ii++)
		{
			array32=*arr;
			result|=((uint32_t)array32)<<(24-ii*8);
   1238a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1238e:	4093      	lsls	r3, r2
   12390:	6884      	ldr	r4, [r0, #8]
   12392:	4323      	orrs	r3, r4
   12394:	6083      	str	r3, [r0, #8]
   12396:	3a08      	subs	r2, #8
		for (uint8_t ii = 0; ii < 4; ii++)
   12398:	f112 0f08 	cmn.w	r2, #8
   1239c:	d1f5      	bne.n	1238a <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0xa>
			arr++;

		}
		return result;
}
   1239e:	4618      	mov	r0, r3
   123a0:	bc10      	pop	{r4}
   123a2:	4770      	bx	lr

000123a4 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   123a4:	0e0b      	lsrs	r3, r1, #24
   123a6:	7013      	strb	r3, [r2, #0]
   123a8:	0c0b      	lsrs	r3, r1, #16
   123aa:	7053      	strb	r3, [r2, #1]
   123ac:	0a0b      	lsrs	r3, r1, #8
   123ae:	7093      	strb	r3, [r2, #2]
   123b0:	70d1      	strb	r1, [r2, #3]
   123b2:	4770      	bx	lr

000123b4 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
		dest[ii]=d;

	}

}
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   123b4:	b570      	push	{r4, r5, r6, lr}
   123b6:	4605      	mov	r5, r0
   123b8:	460c      	mov	r4, r1
   123ba:	4616      	mov	r6, r2
	
	if (f>=0)
   123bc:	2100      	movs	r1, #0
   123be:	4620      	mov	r0, r4
   123c0:	4b0a      	ldr	r3, [pc, #40]	; (123ec <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x38>)
   123c2:	4798      	blx	r3
   123c4:	b128      	cbz	r0, 123d2 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x1e>
	{
		value=(uint32_t)f;
   123c6:	4620      	mov	r0, r4
   123c8:	4b09      	ldr	r3, [pc, #36]	; (123f0 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x3c>)
   123ca:	4798      	blx	r3
   123cc:	60e8      	str	r0, [r5, #12]
		value=(uint32_t)(-1*f);
		value=(~value)&((1<<(size))-1);
		value+=1;
	}
	return value;
}
   123ce:	68e8      	ldr	r0, [r5, #12]
   123d0:	bd70      	pop	{r4, r5, r6, pc}
		value=(uint32_t)(-1*f);
   123d2:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
   123d6:	4b06      	ldr	r3, [pc, #24]	; (123f0 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x3c>)
   123d8:	4798      	blx	r3
		value=(~value)&((1<<(size))-1);
   123da:	2301      	movs	r3, #1
   123dc:	40b3      	lsls	r3, r6
   123de:	3b01      	subs	r3, #1
   123e0:	ea23 0000 	bic.w	r0, r3, r0
		value+=1;
   123e4:	3001      	adds	r0, #1
   123e6:	60e8      	str	r0, [r5, #12]
   123e8:	e7f1      	b.n	123ce <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x1a>
   123ea:	bf00      	nop
   123ec:	0001c435 	.word	0x0001c435
   123f0:	0001c45d 	.word	0x0001c45d

000123f4 <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
	uint32_t y = x ^ (x >> 1);
   123f4:	ea81 0051 	eor.w	r0, r1, r1, lsr #1
	y = y ^ (y >> 2);
   123f8:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
	y = y ^ (y >> 4);
   123fc:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
	y = y ^ (y >> 8);
   12400:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
	y = y ^ (y >> 16);
   12404:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	if (y & 1){
			return 1;
	}

	return 0;
}
   12408:	f000 0001 	and.w	r0, r0, #1
   1240c:	4770      	bx	lr
	...

00012410 <_ZN19ARINC_Handler_ClassD1Ev>:
	
	isOK=false;
} //ARINC_Handler_Class

// default destructor
ARINC_Handler_Class::~ARINC_Handler_Class()
   12410:	b538      	push	{r3, r4, r5, lr}
   12412:	4604      	mov	r4, r0
   12414:	4d0d      	ldr	r5, [pc, #52]	; (1244c <_ZN19ARINC_Handler_ClassD1Ev+0x3c>)
   12416:	f105 0310 	add.w	r3, r5, #16
   1241a:	6003      	str	r3, [r0, #0]
   1241c:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   12420:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
   12424:	f105 0348 	add.w	r3, r5, #72	; 0x48
   12428:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
   1242c:	f105 0158 	add.w	r1, r5, #88	; 0x58
   12430:	4b07      	ldr	r3, [pc, #28]	; (12450 <_ZN19ARINC_Handler_ClassD1Ev+0x40>)
   12432:	4798      	blx	r3
   12434:	f105 0178 	add.w	r1, r5, #120	; 0x78
   12438:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
   1243c:	4b05      	ldr	r3, [pc, #20]	; (12454 <_ZN19ARINC_Handler_ClassD1Ev+0x44>)
   1243e:	4798      	blx	r3
   12440:	f504 702d 	add.w	r0, r4, #692	; 0x2b4
   12444:	4b04      	ldr	r3, [pc, #16]	; (12458 <_ZN19ARINC_Handler_ClassD1Ev+0x48>)
   12446:	4798      	blx	r3
{
} //~ARINC_Handler_Class
   12448:	4620      	mov	r0, r4
   1244a:	bd38      	pop	{r3, r4, r5, pc}
   1244c:	0001cf54 	.word	0x0001cf54
   12450:	000127c9 	.word	0x000127c9
   12454:	00013071 	.word	0x00013071
   12458:	00012361 	.word	0x00012361

0001245c <_ZTv0_n16_N19ARINC_Handler_ClassD1Ev>:
   1245c:	b508      	push	{r3, lr}
   1245e:	6803      	ldr	r3, [r0, #0]
   12460:	f853 3c10 	ldr.w	r3, [r3, #-16]
   12464:	4418      	add	r0, r3
   12466:	4b01      	ldr	r3, [pc, #4]	; (1246c <_ZTv0_n16_N19ARINC_Handler_ClassD1Ev+0x10>)
   12468:	4798      	blx	r3
   1246a:	bd08      	pop	{r3, pc}
   1246c:	00012411 	.word	0x00012411

00012470 <_ZN19ARINC_Handler_ClassD0Ev>:
ARINC_Handler_Class::~ARINC_Handler_Class()
   12470:	b510      	push	{r4, lr}
   12472:	4604      	mov	r4, r0
} //~ARINC_Handler_Class
   12474:	4b04      	ldr	r3, [pc, #16]	; (12488 <_ZN19ARINC_Handler_ClassD0Ev+0x18>)
   12476:	4798      	blx	r3
   12478:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1247c:	4620      	mov	r0, r4
   1247e:	4b03      	ldr	r3, [pc, #12]	; (1248c <_ZN19ARINC_Handler_ClassD0Ev+0x1c>)
   12480:	4798      	blx	r3
   12482:	4620      	mov	r0, r4
   12484:	bd10      	pop	{r4, pc}
   12486:	bf00      	nop
   12488:	00012411 	.word	0x00012411
   1248c:	0001a459 	.word	0x0001a459

00012490 <_ZTv0_n16_N19ARINC_Handler_ClassD0Ev>:
   12490:	b508      	push	{r3, lr}
   12492:	6803      	ldr	r3, [r0, #0]
   12494:	f853 3c10 	ldr.w	r3, [r3, #-16]
   12498:	4418      	add	r0, r3
   1249a:	4b01      	ldr	r3, [pc, #4]	; (124a0 <_ZTv0_n16_N19ARINC_Handler_ClassD0Ev+0x10>)
   1249c:	4798      	blx	r3
   1249e:	bd08      	pop	{r3, pc}
   124a0:	00012471 	.word	0x00012471

000124a4 <_ZN19ARINC_Handler_ClassC1Ev>:
ARINC_Handler_Class::ARINC_Handler_Class()
   124a4:	b538      	push	{r3, r4, r5, lr}
   124a6:	4604      	mov	r4, r0
   124a8:	f500 702d 	add.w	r0, r0, #692	; 0x2b4
   124ac:	4b0f      	ldr	r3, [pc, #60]	; (124ec <_ZN19ARINC_Handler_ClassC1Ev+0x48>)
   124ae:	4798      	blx	r3
	uint8_t	fanSpeed[2];
};



class Protocol_Class: private virtual ARINC_Conversions
   124b0:	4d0f      	ldr	r5, [pc, #60]	; (124f0 <_ZN19ARINC_Handler_ClassC1Ev+0x4c>)
   124b2:	f105 038c 	add.w	r3, r5, #140	; 0x8c
   124b6:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   124ba:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
   124be:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
   124c2:	f105 0158 	add.w	r1, r5, #88	; 0x58
   124c6:	4620      	mov	r0, r4
   124c8:	4b0a      	ldr	r3, [pc, #40]	; (124f4 <_ZN19ARINC_Handler_ClassC1Ev+0x50>)
   124ca:	4798      	blx	r3
   124cc:	f105 0310 	add.w	r3, r5, #16
   124d0:	6023      	str	r3, [r4, #0]
   124d2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   124d6:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
   124da:	3548      	adds	r5, #72	; 0x48
   124dc:	f8c4 52c4 	str.w	r5, [r4, #708]	; 0x2c4
	isOK=false;
   124e0:	2300      	movs	r3, #0
   124e2:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
} //ARINC_Handler_Class
   124e6:	4620      	mov	r0, r4
   124e8:	bd38      	pop	{r3, r4, r5, pc}
   124ea:	bf00      	nop
   124ec:	00012355 	.word	0x00012355
   124f0:	0001cf54 	.word	0x0001cf54
   124f4:	00012729 	.word	0x00012729

000124f8 <_ZN19ARINC_Handler_Class10Init_ARINCEv>:


bool ARINC_Handler_Class::Init_ARINC(void){
   124f8:	b510      	push	{r4, lr}
   124fa:	4604      	mov	r4, r0
	ar=&staticArinc;
   124fc:	4804      	ldr	r0, [pc, #16]	; (12510 <_ZN19ARINC_Handler_Class10Init_ARINCEv+0x18>)
   124fe:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
	isOK=ar->Init();
   12502:	4b04      	ldr	r3, [pc, #16]	; (12514 <_ZN19ARINC_Handler_Class10Init_ARINCEv+0x1c>)
   12504:	4798      	blx	r3
   12506:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
	
	return isOK;
   1250a:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
}
   1250e:	bd10      	pop	{r4, pc}
   12510:	200020f0 	.word	0x200020f0
   12514:	00012801 	.word	0x00012801

00012518 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev>:
}




   12518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1251c:	4c2b      	ldr	r4, [pc, #172]	; (125cc <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xb4>)
   1251e:	f504 7536 	add.w	r5, r4, #728	; 0x2d8
   12522:	492b      	ldr	r1, [pc, #172]	; (125d0 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xb8>)
   12524:	4628      	mov	r0, r5
   12526:	4f2b      	ldr	r7, [pc, #172]	; (125d4 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xbc>)
   12528:	47b8      	blx	r7
   1252a:	4e2b      	ldr	r6, [pc, #172]	; (125d8 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xc0>)
   1252c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12608 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xf0>
   12530:	4632      	mov	r2, r6
   12532:	4641      	mov	r1, r8
   12534:	4628      	mov	r0, r5
   12536:	4d29      	ldr	r5, [pc, #164]	; (125dc <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xc4>)
   12538:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   1253a:	f504 793e 	add.w	r9, r4, #760	; 0x2f8
   1253e:	4928      	ldr	r1, [pc, #160]	; (125e0 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xc8>)
   12540:	4648      	mov	r0, r9
   12542:	47b8      	blx	r7
   12544:	4632      	mov	r2, r6
   12546:	4641      	mov	r1, r8
   12548:	4648      	mov	r0, r9
   1254a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   1254c:	f504 7946 	add.w	r9, r4, #792	; 0x318
   12550:	4924      	ldr	r1, [pc, #144]	; (125e4 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xcc>)
   12552:	4648      	mov	r0, r9
   12554:	47b8      	blx	r7
   12556:	4632      	mov	r2, r6
   12558:	4641      	mov	r1, r8
   1255a:	4648      	mov	r0, r9
   1255c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1255e:	f504 794e 	add.w	r9, r4, #824	; 0x338
   12562:	4921      	ldr	r1, [pc, #132]	; (125e8 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xd0>)
   12564:	4648      	mov	r0, r9
   12566:	47b8      	blx	r7
   12568:	4632      	mov	r2, r6
   1256a:	4641      	mov	r1, r8
   1256c:	4648      	mov	r0, r9
   1256e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   12570:	f504 7956 	add.w	r9, r4, #856	; 0x358
   12574:	491d      	ldr	r1, [pc, #116]	; (125ec <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xd4>)
   12576:	4648      	mov	r0, r9
   12578:	47b8      	blx	r7
   1257a:	4632      	mov	r2, r6
   1257c:	4641      	mov	r1, r8
   1257e:	4648      	mov	r0, r9
   12580:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   12582:	f504 795e 	add.w	r9, r4, #888	; 0x378
   12586:	491a      	ldr	r1, [pc, #104]	; (125f0 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xd8>)
   12588:	4648      	mov	r0, r9
   1258a:	47b8      	blx	r7
   1258c:	4632      	mov	r2, r6
   1258e:	4641      	mov	r1, r8
   12590:	4648      	mov	r0, r9
   12592:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   12594:	f504 7966 	add.w	r9, r4, #920	; 0x398
   12598:	4916      	ldr	r1, [pc, #88]	; (125f4 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xdc>)
   1259a:	4648      	mov	r0, r9
   1259c:	47b8      	blx	r7
   1259e:	4632      	mov	r2, r6
   125a0:	4641      	mov	r1, r8
   125a2:	4648      	mov	r0, r9
   125a4:	47a8      	blx	r5
static ARINC_Interface staticArinc;
   125a6:	4620      	mov	r0, r4
   125a8:	4b13      	ldr	r3, [pc, #76]	; (125f8 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xe0>)
   125aa:	4798      	blx	r3
   125ac:	4632      	mov	r2, r6
   125ae:	4913      	ldr	r1, [pc, #76]	; (125fc <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xe4>)
   125b0:	4620      	mov	r0, r4
   125b2:	47a8      	blx	r5
   125b4:	f504 746e 	add.w	r4, r4, #952	; 0x3b8
   125b8:	4620      	mov	r0, r4
   125ba:	4b11      	ldr	r3, [pc, #68]	; (12600 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xe8>)
   125bc:	4798      	blx	r3
   125be:	4632      	mov	r2, r6
   125c0:	4910      	ldr	r1, [pc, #64]	; (12604 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0xec>)
   125c2:	4620      	mov	r0, r4
   125c4:	47a8      	blx	r5
   125c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   125ca:	bf00      	nop
   125cc:	200020f0 	.word	0x200020f0
   125d0:	2000d6d8 	.word	0x2000d6d8
   125d4:	00013d09 	.word	0x00013d09
   125d8:	20000000 	.word	0x20000000
   125dc:	0001a44d 	.word	0x0001a44d
   125e0:	2000d76c 	.word	0x2000d76c
   125e4:	2000d870 	.word	0x2000d870
   125e8:	2000d78c 	.word	0x2000d78c
   125ec:	2000d830 	.word	0x2000d830
   125f0:	2000d850 	.word	0x2000d850
   125f4:	2000d748 	.word	0x2000d748
   125f8:	00012769 	.word	0x00012769
   125fc:	00012639 	.word	0x00012639
   12600:	000124a5 	.word	0x000124a5
   12604:	00012411 	.word	0x00012411
   12608:	00013d41 	.word	0x00013d41

0001260c <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   1260c:	4770      	bx	lr
	...

00012610 <_ZL9TxTimeoutPK10timer_task>:
	//gpio_toggle_pin_level(LED0);
}
static void TxTimeout(const struct timer_task *const timer_task){
	arinc.ar->txTimeout=true;
   12610:	4b03      	ldr	r3, [pc, #12]	; (12620 <_ZL9TxTimeoutPK10timer_task+0x10>)
   12612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
   12616:	2201      	movs	r2, #1
   12618:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
   1261c:	4770      	bx	lr
   1261e:	bf00      	nop
   12620:	200024a8 	.word	0x200024a8

00012624 <_ZL12Receiver1Intv>:
}

static void Receiver1Int(void){
	arinc.ar->newMessageR1=true;
   12624:	4b03      	ldr	r3, [pc, #12]	; (12634 <_ZL12Receiver1Intv+0x10>)
   12626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
   1262a:	2201      	movs	r2, #1
   1262c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	asm("nop");
   12630:	bf00      	nop
   12632:	4770      	bx	lr
   12634:	200024a8 	.word	0x200024a8

00012638 <_ZN15ARINC_InterfaceD1Ev>:
	//converter=ptrConverter;
} //ARINC_Interface


// default destructor
ARINC_Interface::~ARINC_Interface()
   12638:	b538      	push	{r3, r4, r5, lr}
   1263a:	4604      	mov	r4, r0
   1263c:	4d10      	ldr	r5, [pc, #64]	; (12680 <_ZN15ARINC_InterfaceD1Ev+0x48>)
   1263e:	f105 0310 	add.w	r3, r5, #16
   12642:	6003      	str	r3, [r0, #0]
   12644:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   12648:	f8c0 32ac 	str.w	r3, [r0, #684]	; 0x2ac
   1264c:	f105 0348 	add.w	r3, r5, #72	; 0x48
   12650:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
   12654:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   12658:	4b0a      	ldr	r3, [pc, #40]	; (12684 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   1265a:	4798      	blx	r3
   1265c:	f105 0158 	add.w	r1, r5, #88	; 0x58
   12660:	4620      	mov	r0, r4
   12662:	4b09      	ldr	r3, [pc, #36]	; (12688 <_ZN15ARINC_InterfaceD1Ev+0x50>)
   12664:	4798      	blx	r3
   12666:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   1266a:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
   1266e:	4b07      	ldr	r3, [pc, #28]	; (1268c <_ZN15ARINC_InterfaceD1Ev+0x54>)
   12670:	4798      	blx	r3
   12672:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
   12676:	4b06      	ldr	r3, [pc, #24]	; (12690 <_ZN15ARINC_InterfaceD1Ev+0x58>)
   12678:	4798      	blx	r3
{
} //~ARINC_Interface
   1267a:	4620      	mov	r0, r4
   1267c:	bd38      	pop	{r3, r4, r5, pc}
   1267e:	bf00      	nop
   12680:	0001d0a8 	.word	0x0001d0a8
   12684:	00012b59 	.word	0x00012b59
   12688:	00011f35 	.word	0x00011f35
   1268c:	00013071 	.word	0x00013071
   12690:	00012361 	.word	0x00012361

00012694 <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   12694:	b508      	push	{r3, lr}
   12696:	6803      	ldr	r3, [r0, #0]
   12698:	f853 3c10 	ldr.w	r3, [r3, #-16]
   1269c:	4418      	add	r0, r3
   1269e:	4b01      	ldr	r3, [pc, #4]	; (126a4 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x10>)
   126a0:	4798      	blx	r3
   126a2:	bd08      	pop	{r3, pc}
   126a4:	00012639 	.word	0x00012639

000126a8 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   126a8:	b510      	push	{r4, lr}
   126aa:	4604      	mov	r4, r0
} //~ARINC_Interface
   126ac:	4b04      	ldr	r3, [pc, #16]	; (126c0 <_ZN15ARINC_InterfaceD0Ev+0x18>)
   126ae:	4798      	blx	r3
   126b0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   126b4:	4620      	mov	r0, r4
   126b6:	4b03      	ldr	r3, [pc, #12]	; (126c4 <_ZN15ARINC_InterfaceD0Ev+0x1c>)
   126b8:	4798      	blx	r3
   126ba:	4620      	mov	r0, r4
   126bc:	bd10      	pop	{r4, pc}
   126be:	bf00      	nop
   126c0:	00012639 	.word	0x00012639
   126c4:	0001a459 	.word	0x0001a459

000126c8 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   126c8:	b508      	push	{r3, lr}
   126ca:	6803      	ldr	r3, [r0, #0]
   126cc:	f853 3c10 	ldr.w	r3, [r3, #-16]
   126d0:	4418      	add	r0, r3
   126d2:	4b01      	ldr	r3, [pc, #4]	; (126d8 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x10>)
   126d4:	4798      	blx	r3
   126d6:	bd08      	pop	{r3, pc}
   126d8:	000126a9 	.word	0x000126a9

000126dc <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   126dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
		if (receiverBuffer[i][3]==label)
   126de:	6905      	ldr	r5, [r0, #16]
   126e0:	682a      	ldr	r2, [r5, #0]
   126e2:	78d3      	ldrb	r3, [r2, #3]
   126e4:	428b      	cmp	r3, r1
   126e6:	d00b      	beq.n	12700 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
   126e8:	2301      	movs	r3, #1
   126ea:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   126ee:	78d4      	ldrb	r4, [r2, #3]
   126f0:	428c      	cmp	r4, r1
   126f2:	d005      	beq.n	12700 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   126f4:	3301      	adds	r3, #1
   126f6:	b2db      	uxtb	r3, r3
   126f8:	2b1f      	cmp	r3, #31
   126fa:	ddf6      	ble.n	126ea <_ZN15ARINC_Interface15ReadBufferLabelEh+0xe>
			return data;
		}
		
	}

	return 0;
   126fc:	2000      	movs	r0, #0
}
   126fe:	bd38      	pop	{r3, r4, r5, pc}
			data=FourBytesArray2Uint32(receiverBuffer[i]);
   12700:	6803      	ldr	r3, [r0, #0]
   12702:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   12706:	4611      	mov	r1, r2
   12708:	4418      	add	r0, r3
   1270a:	4b01      	ldr	r3, [pc, #4]	; (12710 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x34>)
   1270c:	4798      	blx	r3
			return data;
   1270e:	bd38      	pop	{r3, r4, r5, pc}
   12710:	00012381 	.word	0x00012381

00012714 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   12714:	b508      	push	{r3, lr}
   12716:	6803      	ldr	r3, [r0, #0]
   12718:	f853 3c14 	ldr.w	r3, [r3, #-20]
   1271c:	4418      	add	r0, r3
   1271e:	4b01      	ldr	r3, [pc, #4]	; (12724 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x10>)
   12720:	4798      	blx	r3
   12722:	bd08      	pop	{r3, pc}
   12724:	000126dd 	.word	0x000126dd

00012728 <_ZN15ARINC_InterfaceC2Ev>:
ARINC_Interface::ARINC_Interface()
   12728:	b538      	push	{r3, r4, r5, lr}
   1272a:	4604      	mov	r4, r0
   1272c:	460d      	mov	r5, r1
   1272e:	3104      	adds	r1, #4
   12730:	4b0a      	ldr	r3, [pc, #40]	; (1275c <_ZN15ARINC_InterfaceC2Ev+0x34>)
   12732:	4798      	blx	r3
   12734:	682b      	ldr	r3, [r5, #0]
   12736:	6023      	str	r3, [r4, #0]
   12738:	692a      	ldr	r2, [r5, #16]
   1273a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1273e:	50e2      	str	r2, [r4, r3]
   12740:	696a      	ldr	r2, [r5, #20]
   12742:	6823      	ldr	r3, [r4, #0]
   12744:	f853 3c10 	ldr.w	r3, [r3, #-16]
   12748:	50e2      	str	r2, [r4, r3]
   1274a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   1274e:	4b04      	ldr	r3, [pc, #16]	; (12760 <_ZN15ARINC_InterfaceC2Ev+0x38>)
   12750:	4798      	blx	r3
	ptrARINCInterface=this;
   12752:	4b04      	ldr	r3, [pc, #16]	; (12764 <_ZN15ARINC_InterfaceC2Ev+0x3c>)
   12754:	601c      	str	r4, [r3, #0]
} //ARINC_Interface
   12756:	4620      	mov	r0, r4
   12758:	bd38      	pop	{r3, r4, r5, pc}
   1275a:	bf00      	nop
   1275c:	00011f19 	.word	0x00011f19
   12760:	00012b4d 	.word	0x00012b4d
   12764:	20002788 	.word	0x20002788

00012768 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   12768:	b538      	push	{r3, r4, r5, lr}
   1276a:	4604      	mov	r4, r0
   1276c:	f500 702b 	add.w	r0, r0, #684	; 0x2ac
   12770:	4b10      	ldr	r3, [pc, #64]	; (127b4 <_ZN15ARINC_InterfaceC1Ev+0x4c>)
   12772:	4798      	blx	r3
   12774:	4d10      	ldr	r5, [pc, #64]	; (127b8 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   12776:	f105 0380 	add.w	r3, r5, #128	; 0x80
   1277a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
   1277e:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   12782:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
   12786:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1278a:	4620      	mov	r0, r4
   1278c:	4b0b      	ldr	r3, [pc, #44]	; (127bc <_ZN15ARINC_InterfaceC1Ev+0x54>)
   1278e:	4798      	blx	r3
   12790:	f105 0310 	add.w	r3, r5, #16
   12794:	6023      	str	r3, [r4, #0]
   12796:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   1279a:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
   1279e:	3548      	adds	r5, #72	; 0x48
   127a0:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
   127a4:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   127a8:	4b05      	ldr	r3, [pc, #20]	; (127c0 <_ZN15ARINC_InterfaceC1Ev+0x58>)
   127aa:	4798      	blx	r3
	ptrARINCInterface=this;
   127ac:	4b05      	ldr	r3, [pc, #20]	; (127c4 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   127ae:	601c      	str	r4, [r3, #0]
} //ARINC_Interface
   127b0:	4620      	mov	r0, r4
   127b2:	bd38      	pop	{r3, r4, r5, pc}
   127b4:	00012355 	.word	0x00012355
   127b8:	0001d0a8 	.word	0x0001d0a8
   127bc:	00011f19 	.word	0x00011f19
   127c0:	00012b4d 	.word	0x00012b4d
   127c4:	20002788 	.word	0x20002788

000127c8 <_ZN15ARINC_InterfaceD2Ev>:
ARINC_Interface::~ARINC_Interface()
   127c8:	b538      	push	{r3, r4, r5, lr}
   127ca:	4604      	mov	r4, r0
   127cc:	460d      	mov	r5, r1
   127ce:	680b      	ldr	r3, [r1, #0]
   127d0:	6003      	str	r3, [r0, #0]
   127d2:	690a      	ldr	r2, [r1, #16]
   127d4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   127d8:	50c2      	str	r2, [r0, r3]
   127da:	694a      	ldr	r2, [r1, #20]
   127dc:	6803      	ldr	r3, [r0, #0]
   127de:	f853 3c10 	ldr.w	r3, [r3, #-16]
   127e2:	50c2      	str	r2, [r0, r3]
   127e4:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   127e8:	4b03      	ldr	r3, [pc, #12]	; (127f8 <_ZN15ARINC_InterfaceD2Ev+0x30>)
   127ea:	4798      	blx	r3
   127ec:	1d29      	adds	r1, r5, #4
   127ee:	4620      	mov	r0, r4
   127f0:	4b02      	ldr	r3, [pc, #8]	; (127fc <_ZN15ARINC_InterfaceD2Ev+0x34>)
   127f2:	4798      	blx	r3
} //~ARINC_Interface
   127f4:	4620      	mov	r0, r4
   127f6:	bd38      	pop	{r3, r4, r5, pc}
   127f8:	00012b59 	.word	0x00012b59
   127fc:	00011f35 	.word	0x00011f35

00012800 <_ZN15ARINC_Interface4InitEv>:
bool	ARINC_Interface::Init(void){
   12800:	b570      	push	{r4, r5, r6, lr}
   12802:	4604      	mov	r4, r0
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   12804:	2300      	movs	r3, #0
   12806:	f880 3155 	strb.w	r3, [r0, #341]	; 0x155
   1280a:	f880 317c 	strb.w	r3, [r0, #380]	; 0x17c
   1280e:	f880 317d 	strb.w	r3, [r0, #381]	; 0x17d
	BITRATE0=false;
   12812:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	BITRATE1=false;
   12816:	f880 3159 	strb.w	r3, [r0, #345]	; 0x159
	BITRATE2=false;
   1281a:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
	PARITY=false;
   1281e:	f880 315b 	strb.w	r3, [r0, #347]	; 0x15b
}

void ARINC_Interface::HW_RESET(void){
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   12822:	2001      	movs	r0, #1
   12824:	4b2a      	ldr	r3, [pc, #168]	; (128d0 <_ZN15ARINC_Interface4InitEv+0xd0>)
   12826:	4798      	blx	r3
	InitBuffer();
   12828:	4620      	mov	r0, r4
   1282a:	4b2a      	ldr	r3, [pc, #168]	; (128d4 <_ZN15ARINC_Interface4InitEv+0xd4>)
   1282c:	4798      	blx	r3
	statusHolt=HI3593.Init();
   1282e:	f504 76c8 	add.w	r6, r4, #400	; 0x190
   12832:	4630      	mov	r0, r6
   12834:	4b28      	ldr	r3, [pc, #160]	; (128d8 <_ZN15ARINC_Interface4InitEv+0xd8>)
   12836:	4798      	blx	r3
   12838:	f884 017f 	strb.w	r0, [r4, #383]	; 0x17f
	if (statusHolt!=TSR_Default){
   1283c:	2801      	cmp	r0, #1
   1283e:	d01f      	beq.n	12880 <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   12840:	4926      	ldr	r1, [pc, #152]	; (128dc <_ZN15ARINC_Interface4InitEv+0xdc>)
   12842:	4827      	ldr	r0, [pc, #156]	; (128e0 <_ZN15ARINC_Interface4InitEv+0xe0>)
   12844:	4b27      	ldr	r3, [pc, #156]	; (128e4 <_ZN15ARINC_Interface4InitEv+0xe4>)
   12846:	4798      	blx	r3
		isOK=false;
   12848:	2300      	movs	r3, #0
   1284a:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
	arincTimer.Init();
   1284e:	4d26      	ldr	r5, [pc, #152]	; (128e8 <_ZN15ARINC_Interface4InitEv+0xe8>)
   12850:	4628      	mov	r0, r5
   12852:	4b26      	ldr	r3, [pc, #152]	; (128ec <_ZN15ARINC_Interface4InitEv+0xec>)
   12854:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   12856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1285a:	4925      	ldr	r1, [pc, #148]	; (128f0 <_ZN15ARINC_Interface4InitEv+0xf0>)
   1285c:	4628      	mov	r0, r5
   1285e:	4e25      	ldr	r6, [pc, #148]	; (128f4 <_ZN15ARINC_Interface4InitEv+0xf4>)
   12860:	47b0      	blx	r6
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   12862:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12866:	4924      	ldr	r1, [pc, #144]	; (128f8 <_ZN15ARINC_Interface4InitEv+0xf8>)
   12868:	4628      	mov	r0, r5
   1286a:	47b0      	blx	r6
	ext_irq_register(ARINCR1Int, Receiver1Int);
   1286c:	4923      	ldr	r1, [pc, #140]	; (128fc <_ZN15ARINC_Interface4InitEv+0xfc>)
   1286e:	2057      	movs	r0, #87	; 0x57
   12870:	4b23      	ldr	r3, [pc, #140]	; (12900 <_ZN15ARINC_Interface4InitEv+0x100>)
   12872:	4798      	blx	r3
	arincTimer.Start();
   12874:	4628      	mov	r0, r5
   12876:	4b23      	ldr	r3, [pc, #140]	; (12904 <_ZN15ARINC_Interface4InitEv+0x104>)
   12878:	4798      	blx	r3
}
   1287a:	f894 0180 	ldrb.w	r0, [r4, #384]	; 0x180
   1287e:	bd70      	pop	{r4, r5, r6, pc}
		isOK=true;
   12880:	2301      	movs	r3, #1
   12882:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
		newMessageR1=false;
   12886:	2500      	movs	r5, #0
   12888:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124
		newMessageR2=false;
   1288c:	f884 5125 	strb.w	r5, [r4, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   12890:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
		MessageCount=0;
   12894:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   12898:	231d      	movs	r3, #29
   1289a:	f884 3188 	strb.w	r3, [r4, #392]	; 0x188
		Arate=0;
   1289e:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   128a2:	f8c4 5127 	str.w	r5, [r4, #295]	; 0x127
   128a6:	f8c4 512b 	str.w	r5, [r4, #299]	; 0x12b
   128aa:	f8c4 512f 	str.w	r5, [r4, #303]	; 0x12f
   128ae:	f8c4 5133 	str.w	r5, [r4, #307]	; 0x133
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   128b2:	4630      	mov	r0, r6
   128b4:	4b14      	ldr	r3, [pc, #80]	; (12908 <_ZN15ARINC_Interface4InitEv+0x108>)
   128b6:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   128b8:	4630      	mov	r0, r6
   128ba:	4b14      	ldr	r3, [pc, #80]	; (1290c <_ZN15ARINC_Interface4InitEv+0x10c>)
   128bc:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   128be:	4630      	mov	r0, r6
   128c0:	4b13      	ldr	r3, [pc, #76]	; (12910 <_ZN15ARINC_Interface4InitEv+0x110>)
   128c2:	4798      	blx	r3
		Rec1Parity =0;
   128c4:	f884 518a 	strb.w	r5, [r4, #394]	; 0x18a
		Rec2Parity =0;
   128c8:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
   128cc:	e7bf      	b.n	1284e <_ZN15ARINC_Interface4InitEv+0x4e>
   128ce:	bf00      	nop
   128d0:	00006449 	.word	0x00006449
   128d4:	00011f51 	.word	0x00011f51
   128d8:	00012f05 	.word	0x00012f05
   128dc:	0001d19c 	.word	0x0001d19c
   128e0:	20003884 	.word	0x20003884
   128e4:	00014a65 	.word	0x00014a65
   128e8:	2000278c 	.word	0x2000278c
   128ec:	00013df5 	.word	0x00013df5
   128f0:	0001260d 	.word	0x0001260d
   128f4:	00013f31 	.word	0x00013f31
   128f8:	00012611 	.word	0x00012611
   128fc:	00012625 	.word	0x00012625
   12900:	00006511 	.word	0x00006511
   12904:	00013e45 	.word	0x00013e45
   12908:	00012bf5 	.word	0x00012bf5
   1290c:	00012c75 	.word	0x00012c75
   12910:	00012dbd 	.word	0x00012dbd

00012914 <_ZN15ARINC_Interface12ReadRXBufferEh>:
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   12914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12918:	b0c3      	sub	sp, #268	; 0x10c
   1291a:	4606      	mov	r6, r0
   1291c:	468b      	mov	fp, r1
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   1291e:	ea4f 1841 	mov.w	r8, r1, lsl #5
   12922:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
   12926:	fa5f f888 	uxtb.w	r8, r8
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   1292a:	1d0b      	adds	r3, r1, #4
   1292c:	015b      	lsls	r3, r3, #5
   1292e:	b2db      	uxtb	r3, r3
   12930:	9301      	str	r3, [sp, #4]
   12932:	2400      	movs	r4, #0
   12934:	4625      	mov	r5, r4
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   12936:	f500 77c8 	add.w	r7, r0, #400	; 0x190
   1293a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 129cc <_ZN15ARINC_Interface12ReadRXBufferEh+0xb8>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   1293e:	f8df a090 	ldr.w	sl, [pc, #144]	; 129d0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xbc>
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   12942:	4641      	mov	r1, r8
   12944:	4638      	mov	r0, r7
   12946:	47c8      	blx	r9
   12948:	f886 017e 	strb.w	r0, [r6, #382]	; 0x17e
		if(((statusRegister & FFEMPTY) == 0))
   1294c:	f010 0f01 	tst.w	r0, #1
   12950:	d111      	bne.n	12976 <_ZN15ARINC_Interface12ReadRXBufferEh+0x62>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   12952:	f506 72b2 	add.w	r2, r6, #356	; 0x164
   12956:	9901      	ldr	r1, [sp, #4]
   12958:	4638      	mov	r0, r7
   1295a:	47d0      	blx	sl
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   1295c:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
   12960:	aa42      	add	r2, sp, #264	; 0x108
   12962:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   12966:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
   1296a:	6023      	str	r3, [r4, #0]
			messagesCounter++;
   1296c:	3501      	adds	r5, #1
   1296e:	b2ed      	uxtb	r5, r5
	for (uint8_t ii = 0; ii <RX_LABELS_NUMBER ; ii++)
   12970:	462c      	mov	r4, r5
   12972:	2d1f      	cmp	r5, #31
   12974:	dde5      	ble.n	12942 <_ZN15ARINC_Interface12ReadRXBufferEh+0x2e>
		if ((n==1))
   12976:	f1bb 0f01 	cmp.w	fp, #1
   1297a:	d00a      	beq.n	12992 <_ZN15ARINC_Interface12ReadRXBufferEh+0x7e>
		else if (n==2)
   1297c:	f1bb 0f02 	cmp.w	fp, #2
			newMessageR2=false;
   12980:	bf04      	itt	eq
   12982:	2300      	moveq	r3, #0
   12984:	f886 3125 	strbeq.w	r3, [r6, #293]	; 0x125
	for (uint8_t i = 0; i < messagesCounter; i++)
   12988:	b1c4      	cbz	r4, 129bc <_ZN15ARINC_Interface12ReadRXBufferEh+0xa8>
   1298a:	2100      	movs	r1, #0
   1298c:	460d      	mov	r5, r1
			SortReceivedData(receiver[i]);
   1298e:	4f0e      	ldr	r7, [pc, #56]	; (129c8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xb4>)
   12990:	e008      	b.n	129a4 <_ZN15ARINC_Interface12ReadRXBufferEh+0x90>
			newMessageR1=false;
   12992:	2300      	movs	r3, #0
   12994:	f886 3124 	strb.w	r3, [r6, #292]	; 0x124
   12998:	e7f6      	b.n	12988 <_ZN15ARINC_Interface12ReadRXBufferEh+0x74>
	for (uint8_t i = 0; i < messagesCounter; i++)
   1299a:	3501      	adds	r5, #1
   1299c:	b2ed      	uxtb	r5, r5
   1299e:	4629      	mov	r1, r5
   129a0:	42a5      	cmp	r5, r4
   129a2:	da0b      	bge.n	129bc <_ZN15ARINC_Interface12ReadRXBufferEh+0xa8>
		if (receiver[i][3]>0)
   129a4:	ab02      	add	r3, sp, #8
   129a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   129aa:	78db      	ldrb	r3, [r3, #3]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d0f4      	beq.n	1299a <_ZN15ARINC_Interface12ReadRXBufferEh+0x86>
			SortReceivedData(receiver[i]);
   129b0:	ab02      	add	r3, sp, #8
   129b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   129b6:	4630      	mov	r0, r6
   129b8:	47b8      	blx	r7
   129ba:	e7ee      	b.n	1299a <_ZN15ARINC_Interface12ReadRXBufferEh+0x86>
}
   129bc:	f896 017e 	ldrb.w	r0, [r6, #382]	; 0x17e
   129c0:	b043      	add	sp, #268	; 0x10c
   129c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c6:	bf00      	nop
   129c8:	00012179 	.word	0x00012179
   129cc:	00012e81 	.word	0x00012e81
   129d0:	00012cc1 	.word	0x00012cc1

000129d4 <_ZN15ARINC_Interface15ReadBufferLabelEm>:
uint32_t ARINC_Interface::ReadBufferLabel(uint32_t label){
   129d4:	b510      	push	{r4, lr}
   129d6:	4604      	mov	r4, r0
	uint8_t	l=Label2Byte((uint32_t)label);
   129d8:	6803      	ldr	r3, [r0, #0]
   129da:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   129de:	5823      	ldr	r3, [r4, r0]
   129e0:	685b      	ldr	r3, [r3, #4]
   129e2:	4420      	add	r0, r4
   129e4:	4798      	blx	r3
	return (uint32_t)ReadBufferLabel(l);
   129e6:	6823      	ldr	r3, [r4, #0]
   129e8:	689b      	ldr	r3, [r3, #8]
   129ea:	4601      	mov	r1, r0
   129ec:	4620      	mov	r0, r4
   129ee:	4798      	blx	r3
}
   129f0:	bd10      	pop	{r4, pc}
	...

000129f4 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:
uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   129f4:	b538      	push	{r3, r4, r5, lr}
   129f6:	4604      	mov	r4, r0
   129f8:	460d      	mov	r5, r1
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   129fa:	6803      	ldr	r3, [r0, #0]
   129fc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   12a00:	6862      	ldr	r2, [r4, #4]
   12a02:	4420      	add	r0, r4
   12a04:	4b0e      	ldr	r3, [pc, #56]	; (12a40 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x4c>)
   12a06:	4798      	blx	r3
   12a08:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (transmitBuffer[index][3]|transmitBuffer[index][2]|transmitBuffer[index][1]>0)
   12a0c:	6963      	ldr	r3, [r4, #20]
   12a0e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   12a12:	78d3      	ldrb	r3, [r2, #3]
   12a14:	7891      	ldrb	r1, [r2, #2]
   12a16:	430b      	orrs	r3, r1
   12a18:	7851      	ldrb	r1, [r2, #1]
   12a1a:	2900      	cmp	r1, #0
   12a1c:	bf18      	it	ne
   12a1e:	f043 0301 	orrne.w	r3, r3, #1
   12a22:	b90b      	cbnz	r3, 12a28 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x34>
}
   12a24:	4628      	mov	r0, r5
   12a26:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(localBuffer,transmitBuffer[index],4);
   12a28:	6813      	ldr	r3, [r2, #0]
   12a2a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
			HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   12a2e:	f504 72b0 	add.w	r2, r4, #352	; 0x160
   12a32:	210c      	movs	r1, #12
   12a34:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   12a38:	4b02      	ldr	r3, [pc, #8]	; (12a44 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x50>)
   12a3a:	4798      	blx	r3
   12a3c:	e7f2      	b.n	12a24 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x30>
   12a3e:	bf00      	nop
   12a40:	00012363 	.word	0x00012363
   12a44:	00012d3d 	.word	0x00012d3d

00012a48 <_ZN15ARINC_Interface16TransmitTXBufferEv>:
void	ARINC_Interface::TransmitTXBuffer(void){
   12a48:	b570      	push	{r4, r5, r6, lr}
   12a4a:	4605      	mov	r5, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12a4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12a50:	4b0c      	ldr	r3, [pc, #48]	; (12a84 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
   12a52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12a56:	2400      	movs	r4, #0
			TrasmitSingleLabel(l);
   12a58:	4e0b      	ldr	r6, [pc, #44]	; (12a88 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x40>)
   12a5a:	e002      	b.n	12a62 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x1a>
   12a5c:	3401      	adds	r4, #1
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   12a5e:	2c20      	cmp	r4, #32
   12a60:	d006      	beq.n	12a70 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x28>
		if (LabelsArrayTX[i]>0)
   12a62:	686b      	ldr	r3, [r5, #4]
   12a64:	5d19      	ldrb	r1, [r3, r4]
   12a66:	2900      	cmp	r1, #0
   12a68:	d0f8      	beq.n	12a5c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
			TrasmitSingleLabel(l);
   12a6a:	4628      	mov	r0, r5
   12a6c:	47b0      	blx	r6
   12a6e:	e7f5      	b.n	12a5c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
	txTimeout=false;
   12a70:	2300      	movs	r3, #0
   12a72:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12a76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12a7a:	4b02      	ldr	r3, [pc, #8]	; (12a84 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
   12a7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   12a80:	bd70      	pop	{r4, r5, r6, pc}
   12a82:	bf00      	nop
   12a84:	41008000 	.word	0x41008000
   12a88:	000129f5 	.word	0x000129f5

00012a8c <_GLOBAL__sub_I_HexSymbols>:
void	ARINC_Interface::xputc(char byte) {
	uint8_t p[]="0";
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}
   12a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   12a90:	4c22      	ldr	r4, [pc, #136]	; (12b1c <_GLOBAL__sub_I_HexSymbols+0x90>)
   12a92:	f104 0524 	add.w	r5, r4, #36	; 0x24
   12a96:	4922      	ldr	r1, [pc, #136]	; (12b20 <_GLOBAL__sub_I_HexSymbols+0x94>)
   12a98:	4628      	mov	r0, r5
   12a9a:	4e22      	ldr	r6, [pc, #136]	; (12b24 <_GLOBAL__sub_I_HexSymbols+0x98>)
   12a9c:	47b0      	blx	r6
   12a9e:	4f22      	ldr	r7, [pc, #136]	; (12b28 <_GLOBAL__sub_I_HexSymbols+0x9c>)
   12aa0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12b48 <_GLOBAL__sub_I_HexSymbols+0xbc>
   12aa4:	463a      	mov	r2, r7
   12aa6:	4641      	mov	r1, r8
   12aa8:	4628      	mov	r0, r5
   12aaa:	4d20      	ldr	r5, [pc, #128]	; (12b2c <_GLOBAL__sub_I_HexSymbols+0xa0>)
   12aac:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   12aae:	f104 0944 	add.w	r9, r4, #68	; 0x44
   12ab2:	491f      	ldr	r1, [pc, #124]	; (12b30 <_GLOBAL__sub_I_HexSymbols+0xa4>)
   12ab4:	4648      	mov	r0, r9
   12ab6:	47b0      	blx	r6
   12ab8:	463a      	mov	r2, r7
   12aba:	4641      	mov	r1, r8
   12abc:	4648      	mov	r0, r9
   12abe:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   12ac0:	f104 0964 	add.w	r9, r4, #100	; 0x64
   12ac4:	491b      	ldr	r1, [pc, #108]	; (12b34 <_GLOBAL__sub_I_HexSymbols+0xa8>)
   12ac6:	4648      	mov	r0, r9
   12ac8:	47b0      	blx	r6
   12aca:	463a      	mov	r2, r7
   12acc:	4641      	mov	r1, r8
   12ace:	4648      	mov	r0, r9
   12ad0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12ad2:	f104 0984 	add.w	r9, r4, #132	; 0x84
   12ad6:	4918      	ldr	r1, [pc, #96]	; (12b38 <_GLOBAL__sub_I_HexSymbols+0xac>)
   12ad8:	4648      	mov	r0, r9
   12ada:	47b0      	blx	r6
   12adc:	463a      	mov	r2, r7
   12ade:	4641      	mov	r1, r8
   12ae0:	4648      	mov	r0, r9
   12ae2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   12ae4:	f104 0904 	add.w	r9, r4, #4
   12ae8:	4914      	ldr	r1, [pc, #80]	; (12b3c <_GLOBAL__sub_I_HexSymbols+0xb0>)
   12aea:	4648      	mov	r0, r9
   12aec:	47b0      	blx	r6
   12aee:	463a      	mov	r2, r7
   12af0:	4641      	mov	r1, r8
   12af2:	4648      	mov	r0, r9
   12af4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   12af6:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
   12afa:	4911      	ldr	r1, [pc, #68]	; (12b40 <_GLOBAL__sub_I_HexSymbols+0xb4>)
   12afc:	4648      	mov	r0, r9
   12afe:	47b0      	blx	r6
   12b00:	463a      	mov	r2, r7
   12b02:	4641      	mov	r1, r8
   12b04:	4648      	mov	r0, r9
   12b06:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   12b08:	34c4      	adds	r4, #196	; 0xc4
   12b0a:	490e      	ldr	r1, [pc, #56]	; (12b44 <_GLOBAL__sub_I_HexSymbols+0xb8>)
   12b0c:	4620      	mov	r0, r4
   12b0e:	47b0      	blx	r6
   12b10:	463a      	mov	r2, r7
   12b12:	4641      	mov	r1, r8
   12b14:	4620      	mov	r0, r4
   12b16:	47a8      	blx	r5
   12b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b1c:	20002788 	.word	0x20002788
   12b20:	2000d6d8 	.word	0x2000d6d8
   12b24:	00013d09 	.word	0x00013d09
   12b28:	20000000 	.word	0x20000000
   12b2c:	0001a44d 	.word	0x0001a44d
   12b30:	2000d76c 	.word	0x2000d76c
   12b34:	2000d870 	.word	0x2000d870
   12b38:	2000d78c 	.word	0x2000d78c
   12b3c:	2000d830 	.word	0x2000d830
   12b40:	2000d850 	.word	0x2000d850
   12b44:	2000d748 	.word	0x2000d748
   12b48:	00013d41 	.word	0x00013d41

00012b4c <_ZN15Holt_3593_ClassC1Ev>:
unsigned char LabelPriority2 [3];
static SPI_Syn_Class	staticSPI(&SPI_HI3593);

Holt_3593_Class::Holt_3593_Class()
{
	spi=&staticSPI;
   12b4c:	4b01      	ldr	r3, [pc, #4]	; (12b54 <_ZN15Holt_3593_ClassC1Ev+0x8>)
   12b4e:	6183      	str	r3, [r0, #24]
} //Holt_3593_Class
   12b50:	4770      	bx	lr
   12b52:	bf00      	nop
   12b54:	2000286c 	.word	0x2000286c

00012b58 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
{
} //~Holt_3593_Class
   12b58:	4770      	bx	lr
	...

00012b5c <_ZN15Holt_3593_Class4openEv>:
	 return R_Register (R_TSR);
	 
	 
 }
 
 void Holt_3593_Class::open(){
   12b5c:	b508      	push	{r3, lr}
	 	spi->Enable();
   12b5e:	6980      	ldr	r0, [r0, #24]
   12b60:	4b03      	ldr	r3, [pc, #12]	; (12b70 <_ZN15Holt_3593_Class4openEv+0x14>)
   12b62:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12b68:	4b02      	ldr	r3, [pc, #8]	; (12b74 <_ZN15Holt_3593_Class4openEv+0x18>)
   12b6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12b6e:	bd08      	pop	{r3, pc}
   12b70:	00013875 	.word	0x00013875
   12b74:	41008000 	.word	0x41008000

00012b78 <_ZN15Holt_3593_Class5closeEv>:
		 SS_Low();
 }
  void Holt_3593_Class::close(){
   12b78:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12b7e:	4b03      	ldr	r3, [pc, #12]	; (12b8c <_ZN15Holt_3593_Class5closeEv+0x14>)
   12b80:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	    SS_High();
	  spi->Disable();
   12b84:	6980      	ldr	r0, [r0, #24]
   12b86:	4b02      	ldr	r3, [pc, #8]	; (12b90 <_ZN15Holt_3593_Class5closeEv+0x18>)
   12b88:	4798      	blx	r3
   12b8a:	bd08      	pop	{r3, pc}
   12b8c:	41008000 	.word	0x41008000
   12b90:	00013939 	.word	0x00013939

00012b94 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   12b94:	b530      	push	{r4, r5, lr}
   12b96:	b083      	sub	sp, #12
   12b98:	4604      	mov	r4, r0
   12b9a:	f88d 1007 	strb.w	r1, [sp, #7]
	while (!spi->IsSPIReady()); 
   12b9e:	4d0a      	ldr	r5, [pc, #40]	; (12bc8 <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
   12ba0:	69a0      	ldr	r0, [r4, #24]
   12ba2:	47a8      	blx	r5
   12ba4:	2800      	cmp	r0, #0
   12ba6:	d0fb      	beq.n	12ba0 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi->Write(&byte,1);
   12ba8:	2201      	movs	r2, #1
   12baa:	f10d 0107 	add.w	r1, sp, #7
   12bae:	69a0      	ldr	r0, [r4, #24]
   12bb0:	4b06      	ldr	r3, [pc, #24]	; (12bcc <_ZN15Holt_3593_Class9Send_ByteEh+0x38>)
   12bb2:	4798      	blx	r3
	while (!spi->IsSPIReady());  
   12bb4:	4d04      	ldr	r5, [pc, #16]	; (12bc8 <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
   12bb6:	69a0      	ldr	r0, [r4, #24]
   12bb8:	47a8      	blx	r5
   12bba:	2800      	cmp	r0, #0
   12bbc:	d0fb      	beq.n	12bb6 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
	return byte;
}
   12bbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12bc2:	b003      	add	sp, #12
   12bc4:	bd30      	pop	{r4, r5, pc}
   12bc6:	bf00      	nop
   12bc8:	00013959 	.word	0x00013959
   12bcc:	000138b1 	.word	0x000138b1

00012bd0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   12bd0:	b570      	push	{r4, r5, r6, lr}
   12bd2:	4604      	mov	r4, r0
   12bd4:	460e      	mov	r6, r1
   12bd6:	4615      	mov	r5, r2
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   12bd8:	4b04      	ldr	r3, [pc, #16]	; (12bec <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x1c>)
   12bda:	4798      	blx	r3
  if (return_when_done) {  // optional wait for SPIF flag
   12bdc:	b125      	cbz	r5, 12be8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x18>
    while (!spi->IsSPIReady());     
   12bde:	4d04      	ldr	r5, [pc, #16]	; (12bf0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x20>)
   12be0:	69a0      	ldr	r0, [r4, #24]
   12be2:	47a8      	blx	r5
   12be4:	2800      	cmp	r0, #0
   12be6:	d0fb      	beq.n	12be0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x10>
}
   12be8:	4630      	mov	r0, r6
   12bea:	bd70      	pop	{r4, r5, r6, pc}
   12bec:	00012b95 	.word	0x00012b95
   12bf0:	00013959 	.word	0x00013959

00012bf4 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:
{
   12bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bf8:	4606      	mov	r6, r0
  open();
   12bfa:	4b0c      	ldr	r3, [pc, #48]	; (12c2c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x38>)
   12bfc:	4798      	blx	r3
  dummy = txrx8bits_8(0x14,1);  
   12bfe:	2201      	movs	r2, #1
   12c00:	2114      	movs	r1, #20
   12c02:	4630      	mov	r0, r6
   12c04:	4b0a      	ldr	r3, [pc, #40]	; (12c30 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
   12c06:	4798      	blx	r3
   12c08:	4d0a      	ldr	r5, [pc, #40]	; (12c34 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x40>)
   12c0a:	f105 0420 	add.w	r4, r5, #32
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   12c0e:	f04f 0801 	mov.w	r8, #1
   12c12:	4f07      	ldr	r7, [pc, #28]	; (12c30 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
   12c14:	4642      	mov	r2, r8
   12c16:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   12c1a:	4630      	mov	r0, r6
   12c1c:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
   12c1e:	42ac      	cmp	r4, r5
   12c20:	d1f8      	bne.n	12c14 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
	close();
   12c22:	4630      	mov	r0, r6
   12c24:	4b04      	ldr	r3, [pc, #16]	; (12c38 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x44>)
   12c26:	4798      	blx	r3
   12c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c2c:	00012b5d 	.word	0x00012b5d
   12c30:	00012bd1 	.word	0x00012bd1
   12c34:	0001db6c 	.word	0x0001db6c
   12c38:	00012b79 	.word	0x00012b79

00012c3c <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   12c3c:	b530      	push	{r4, r5, lr}
   12c3e:	b083      	sub	sp, #12
   12c40:	4604      	mov	r4, r0
	uint8_t byte;
	
	while (!spi->IsSPIReady());
   12c42:	4d0a      	ldr	r5, [pc, #40]	; (12c6c <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
   12c44:	69a0      	ldr	r0, [r4, #24]
   12c46:	47a8      	blx	r5
   12c48:	2800      	cmp	r0, #0
   12c4a:	d0fb      	beq.n	12c44 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi->Read(&byte,1);
   12c4c:	2201      	movs	r2, #1
   12c4e:	f10d 0107 	add.w	r1, sp, #7
   12c52:	69a0      	ldr	r0, [r4, #24]
   12c54:	4b06      	ldr	r3, [pc, #24]	; (12c70 <_ZN15Holt_3593_Class8Get_ByteEv+0x34>)
   12c56:	4798      	blx	r3
	while (!spi->IsSPIReady());
   12c58:	4d04      	ldr	r5, [pc, #16]	; (12c6c <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
   12c5a:	69a0      	ldr	r0, [r4, #24]
   12c5c:	47a8      	blx	r5
   12c5e:	2800      	cmp	r0, #0
   12c60:	d0fb      	beq.n	12c5a <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>


	
	return byte;
}	
   12c62:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12c66:	b003      	add	sp, #12
   12c68:	bd30      	pop	{r4, r5, pc}
   12c6a:	bf00      	nop
   12c6c:	00013959 	.word	0x00013959
   12c70:	000138f5 	.word	0x000138f5

00012c74 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   12c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c78:	4606      	mov	r6, r0
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   12c7a:	4b0d      	ldr	r3, [pc, #52]	; (12cb0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x3c>)
   12c7c:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   12c7e:	2201      	movs	r2, #1
   12c80:	2128      	movs	r1, #40	; 0x28
   12c82:	4630      	mov	r0, r6
   12c84:	4b0b      	ldr	r3, [pc, #44]	; (12cb4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
   12c86:	4798      	blx	r3
   12c88:	4d0b      	ldr	r5, [pc, #44]	; (12cb8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x44>)
   12c8a:	f105 043c 	add.w	r4, r5, #60	; 0x3c
   12c8e:	351c      	adds	r5, #28
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   12c90:	f04f 0801 	mov.w	r8, #1
   12c94:	4f07      	ldr	r7, [pc, #28]	; (12cb4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
   12c96:	4642      	mov	r2, r8
   12c98:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   12c9c:	4630      	mov	r0, r6
   12c9e:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
   12ca0:	42ac      	cmp	r4, r5
   12ca2:	d1f8      	bne.n	12c96 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x22>
  }    
 	  
	close();
   12ca4:	4630      	mov	r0, r6
   12ca6:	4b05      	ldr	r3, [pc, #20]	; (12cbc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x48>)
   12ca8:	4798      	blx	r3
   12caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cae:	bf00      	nop
   12cb0:	00012b5d 	.word	0x00012b5d
   12cb4:	00012bd1 	.word	0x00012bd1
   12cb8:	2000286c 	.word	0x2000286c
   12cbc:	00012b79 	.word	0x00012b79

00012cc0 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   12cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cc4:	4605      	mov	r5, r0
   12cc6:	460c      	mov	r4, r1
   12cc8:	4690      	mov	r8, r2
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   12cca:	29a0      	cmp	r1, #160	; 0xa0
   12ccc:	d019      	beq.n	12d02 <_ZN15Holt_3593_Class9ArincReadEhPh+0x42>
       count++;								 // then it has 4 bytes.
   12cce:	29c0      	cmp	r1, #192	; 0xc0
   12cd0:	bf14      	ite	ne
   12cd2:	2603      	movne	r6, #3
   12cd4:	2604      	moveq	r6, #4
	   }                        
  open();
   12cd6:	4628      	mov	r0, r5
   12cd8:	4b0b      	ldr	r3, [pc, #44]	; (12d08 <_ZN15Holt_3593_Class9ArincReadEhPh+0x48>)
   12cda:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   12cdc:	4621      	mov	r1, r4
   12cde:	4628      	mov	r0, r5
   12ce0:	4b0a      	ldr	r3, [pc, #40]	; (12d0c <_ZN15Holt_3593_Class9ArincReadEhPh+0x4c>)
   12ce2:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   12ce4:	2400      	movs	r4, #0
      dummy = Get_Byte(); 
   12ce6:	4f0a      	ldr	r7, [pc, #40]	; (12d10 <_ZN15Holt_3593_Class9ArincReadEhPh+0x50>)
   12ce8:	4628      	mov	r0, r5
   12cea:	47b8      	blx	r7
      passedArray[ByteCount] = dummy; 
   12cec:	f808 0004 	strb.w	r0, [r8, r4]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   12cf0:	3401      	adds	r4, #1
   12cf2:	b2e4      	uxtb	r4, r4
   12cf4:	42b4      	cmp	r4, r6
   12cf6:	dbf7      	blt.n	12ce8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x28>
     }

  close();
   12cf8:	4628      	mov	r0, r5
   12cfa:	4b06      	ldr	r3, [pc, #24]	; (12d14 <_ZN15Holt_3593_Class9ArincReadEhPh+0x54>)
   12cfc:	4798      	blx	r3
  
}
   12cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       count++;								 // then it has 4 bytes.
   12d02:	2604      	movs	r6, #4
   12d04:	e7e7      	b.n	12cd6 <_ZN15Holt_3593_Class9ArincReadEhPh+0x16>
   12d06:	bf00      	nop
   12d08:	00012b5d 	.word	0x00012b5d
   12d0c:	00012b95 	.word	0x00012b95
   12d10:	00012c3d 	.word	0x00012c3d
   12d14:	00012b79 	.word	0x00012b79

00012d18 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   12d18:	b570      	push	{r4, r5, r6, lr}
   12d1a:	4604      	mov	r4, r0
   12d1c:	460e      	mov	r6, r1
   12d1e:	4615      	mov	r5, r2
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   12d20:	4b04      	ldr	r3, [pc, #16]	; (12d34 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x1c>)
   12d22:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   12d24:	b125      	cbz	r5, 12d30 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x18>
		while (!spi->IsSPIReady());      
   12d26:	4d04      	ldr	r5, [pc, #16]	; (12d38 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x20>)
   12d28:	69a0      	ldr	r0, [r4, #24]
   12d2a:	47a8      	blx	r5
   12d2c:	2800      	cmp	r0, #0
   12d2e:	d0fb      	beq.n	12d28 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x10>

  rxbyte = txbyte;  // get received data byte from Data Register

  return rxbyte;
  
 }
   12d30:	4630      	mov	r0, r6
   12d32:	bd70      	pop	{r4, r5, r6, pc}
   12d34:	00012b95 	.word	0x00012b95
   12d38:	00013959 	.word	0x00013959

00012d3c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   12d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d40:	4605      	mov	r5, r0
   12d42:	460c      	mov	r4, r1
   12d44:	4616      	mov	r6, r2
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   12d46:	4b19      	ldr	r3, [pc, #100]	; (12dac <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x70>)
   12d48:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   12d4a:	2c18      	cmp	r4, #24
   12d4c:	d029      	beq.n	12da2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
   12d4e:	2c2c      	cmp	r4, #44	; 0x2c
   12d50:	d027      	beq.n	12da2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
   transmitCount=4;                                // Standard messages are 4 bytes
   12d52:	2204      	movs	r2, #4
   12d54:	4b16      	ldr	r3, [pc, #88]	; (12db0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   12d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      transmitCount--;
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   12d5a:	2201      	movs	r2, #1
   12d5c:	4621      	mov	r1, r4
   12d5e:	4628      	mov	r0, r5
   12d60:	4b14      	ldr	r3, [pc, #80]	; (12db4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
   12d62:	4798      	blx	r3

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   12d64:	4b12      	ldr	r3, [pc, #72]	; (12db0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   12d66:	2200      	movs	r2, #0
   12d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   12d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12d70:	b193      	cbz	r3, 12d98 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x5c>
   12d72:	4613      	mov	r3, r2
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   12d74:	f04f 0801 	mov.w	r8, #1
   12d78:	4f0e      	ldr	r7, [pc, #56]	; (12db4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   12d7a:	4c0d      	ldr	r4, [pc, #52]	; (12db0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   12d7c:	4642      	mov	r2, r8
   12d7e:	5cf1      	ldrb	r1, [r6, r3]
   12d80:	4628      	mov	r0, r5
   12d82:	47b8      	blx	r7
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   12d84:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   12d88:	3301      	adds	r3, #1
   12d8a:	b2db      	uxtb	r3, r3
   12d8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   12d90:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   12d94:	4293      	cmp	r3, r2
   12d96:	dbf1      	blt.n	12d7c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x40>
      }   
 close();
   12d98:	4628      	mov	r0, r5
   12d9a:	4b07      	ldr	r3, [pc, #28]	; (12db8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x7c>)
   12d9c:	4798      	blx	r3
   12d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      transmitCount--;
   12da2:	2203      	movs	r2, #3
   12da4:	4b02      	ldr	r3, [pc, #8]	; (12db0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
   12da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   12daa:	e7d6      	b.n	12d5a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x1e>
   12dac:	00012b5d 	.word	0x00012b5d
   12db0:	2000286c 	.word	0x2000286c
   12db4:	00012d19 	.word	0x00012d19
   12db8:	00012b79 	.word	0x00012b79

00012dbc <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
{
   12dbc:	b570      	push	{r4, r5, r6, lr}
   12dbe:	4604      	mov	r4, r0
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   12dc0:	4b0d      	ldr	r3, [pc, #52]	; (12df8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x3c>)
   12dc2:	781a      	ldrb	r2, [r3, #0]
   12dc4:	7142      	strb	r2, [r0, #5]
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   12dc6:	785a      	ldrb	r2, [r3, #1]
   12dc8:	7182      	strb	r2, [r0, #6]
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   12dca:	789b      	ldrb	r3, [r3, #2]
   12dcc:	71c3      	strb	r3, [r0, #7]
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   12dce:	1d46      	adds	r6, r0, #5
   12dd0:	4632      	mov	r2, r6
   12dd2:	2118      	movs	r1, #24
   12dd4:	4d09      	ldr	r5, [pc, #36]	; (12dfc <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x40>)
   12dd6:	47a8      	blx	r5
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   12dd8:	4b09      	ldr	r3, [pc, #36]	; (12e00 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x44>)
   12dda:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   12dde:	7162      	strb	r2, [r4, #5]
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   12de0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   12de4:	71a2      	strb	r2, [r4, #6]
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   12de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   12dea:	71e3      	strb	r3, [r4, #7]
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   12dec:	4632      	mov	r2, r6
   12dee:	212c      	movs	r1, #44	; 0x2c
   12df0:	4620      	mov	r0, r4
   12df2:	47a8      	blx	r5
   12df4:	bd70      	pop	{r4, r5, r6, pc}
   12df6:	bf00      	nop
   12df8:	200001e4 	.word	0x200001e4
   12dfc:	00012d3d 	.word	0x00012d3d
   12e00:	2000286c 	.word	0x2000286c

00012e04 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   12e04:	b538      	push	{r3, r4, r5, lr}
   12e06:	4604      	mov	r4, r0
   12e08:	460d      	mov	r5, r1

 	  uint8_t p(cmd); 
  open();
   12e0a:	4b07      	ldr	r3, [pc, #28]	; (12e28 <_ZN15Holt_3593_Class9W_CommandEc+0x24>)
   12e0c:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   12e0e:	4629      	mov	r1, r5
   12e10:	4620      	mov	r0, r4
   12e12:	4b06      	ldr	r3, [pc, #24]	; (12e2c <_ZN15Holt_3593_Class9W_CommandEc+0x28>)
   12e14:	4798      	blx	r3
  while (!spi->IsSPIReady()) {;}      // Wait for data to come back in.
   12e16:	4d06      	ldr	r5, [pc, #24]	; (12e30 <_ZN15Holt_3593_Class9W_CommandEc+0x2c>)
   12e18:	69a0      	ldr	r0, [r4, #24]
   12e1a:	47a8      	blx	r5
   12e1c:	2800      	cmp	r0, #0
   12e1e:	d0fb      	beq.n	12e18 <_ZN15Holt_3593_Class9W_CommandEc+0x14>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   12e20:	4620      	mov	r0, r4
   12e22:	4b04      	ldr	r3, [pc, #16]	; (12e34 <_ZN15Holt_3593_Class9W_CommandEc+0x30>)
   12e24:	4798      	blx	r3
   12e26:	bd38      	pop	{r3, r4, r5, pc}
   12e28:	00012b5d 	.word	0x00012b5d
   12e2c:	00012b95 	.word	0x00012b95
   12e30:	00013959 	.word	0x00013959
   12e34:	00012b79 	.word	0x00012b79

00012e38 <_ZN15Holt_3593_Class14W_CommandValueEhh>:
}

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   12e38:	b570      	push	{r4, r5, r6, lr}
   12e3a:	4604      	mov	r4, r0
   12e3c:	460d      	mov	r5, r1
   12e3e:	4616      	mov	r6, r2

  	
  open();                             // assert the SPI0 /SS strobe
   12e40:	4b0b      	ldr	r3, [pc, #44]	; (12e70 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x38>)
   12e42:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   12e44:	4629      	mov	r1, r5
   12e46:	4620      	mov	r0, r4
   12e48:	4b0a      	ldr	r3, [pc, #40]	; (12e74 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
   12e4a:	4798      	blx	r3
  while (!spi->IsSPIReady());    
   12e4c:	4d0a      	ldr	r5, [pc, #40]	; (12e78 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
   12e4e:	69a0      	ldr	r0, [r4, #24]
   12e50:	47a8      	blx	r5
   12e52:	2800      	cmp	r0, #0
   12e54:	d0fb      	beq.n	12e4e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x16>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   12e56:	4631      	mov	r1, r6
   12e58:	4620      	mov	r0, r4
   12e5a:	4b06      	ldr	r3, [pc, #24]	; (12e74 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
   12e5c:	4798      	blx	r3
  while (!spi->IsSPIReady());    
   12e5e:	4d06      	ldr	r5, [pc, #24]	; (12e78 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
   12e60:	69a0      	ldr	r0, [r4, #24]
   12e62:	47a8      	blx	r5
   12e64:	2800      	cmp	r0, #0
   12e66:	d0fb      	beq.n	12e60 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x28>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   12e68:	4620      	mov	r0, r4
   12e6a:	4b04      	ldr	r3, [pc, #16]	; (12e7c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x44>)
   12e6c:	4798      	blx	r3
   12e6e:	bd70      	pop	{r4, r5, r6, pc}
   12e70:	00012b5d 	.word	0x00012b5d
   12e74:	00012b95 	.word	0x00012b95
   12e78:	00013959 	.word	0x00013959
   12e7c:	00012b79 	.word	0x00012b79

00012e80 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   12e80:	b538      	push	{r3, r4, r5, lr}
   12e82:	4604      	mov	r4, r0
   12e84:	460d      	mov	r5, r1
  unsigned char R_Reg;
	
  open();
   12e86:	4b08      	ldr	r3, [pc, #32]	; (12ea8 <_ZN15Holt_3593_Class10R_RegisterEc+0x28>)
   12e88:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   12e8a:	2201      	movs	r2, #1
   12e8c:	4629      	mov	r1, r5
   12e8e:	4620      	mov	r0, r4
   12e90:	4b06      	ldr	r3, [pc, #24]	; (12eac <_ZN15Holt_3593_Class10R_RegisterEc+0x2c>)
   12e92:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   12e94:	4620      	mov	r0, r4
   12e96:	4b06      	ldr	r3, [pc, #24]	; (12eb0 <_ZN15Holt_3593_Class10R_RegisterEc+0x30>)
   12e98:	4798      	blx	r3
   12e9a:	4605      	mov	r5, r0
         
  close();
   12e9c:	4620      	mov	r0, r4
   12e9e:	4b05      	ldr	r3, [pc, #20]	; (12eb4 <_ZN15Holt_3593_Class10R_RegisterEc+0x34>)
   12ea0:	4798      	blx	r3
  return R_Reg;
}
   12ea2:	4628      	mov	r0, r5
   12ea4:	bd38      	pop	{r3, r4, r5, pc}
   12ea6:	bf00      	nop
   12ea8:	00012b5d 	.word	0x00012b5d
   12eac:	00012d19 	.word	0x00012d19
   12eb0:	00012c3d 	.word	0x00012c3d
   12eb4:	00012b79 	.word	0x00012b79

00012eb8 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 {
   12eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eba:	4604      	mov	r4, r0
   12ebc:	460d      	mov	r5, r1
   12ebe:	4617      	mov	r7, r2
   12ec0:	461e      	mov	r6, r3
	 W_Command(RESETCMD);                // Reset the HI-3593
   12ec2:	2104      	movs	r1, #4
   12ec4:	4b0c      	ldr	r3, [pc, #48]	; (12ef8 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x40>)
   12ec6:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   12ec8:	462a      	mov	r2, r5
   12eca:	2138      	movs	r1, #56	; 0x38
   12ecc:	4620      	mov	r0, r4
   12ece:	4d0b      	ldr	r5, [pc, #44]	; (12efc <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x44>)
   12ed0:	47a8      	blx	r5
	 cmd |= tflip << 6;                  // TFLIP on
   12ed2:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12ed6:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   12eda:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12ede:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
   12ee2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   12ee6:	b2d2      	uxtb	r2, r2
   12ee8:	2108      	movs	r1, #8
   12eea:	4620      	mov	r0, r4
   12eec:	47a8      	blx	r5
	 return R_Register (R_TSR);
   12eee:	2180      	movs	r1, #128	; 0x80
   12ef0:	4620      	mov	r0, r4
   12ef2:	4b03      	ldr	r3, [pc, #12]	; (12f00 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x48>)
   12ef4:	4798      	blx	r3
 }
   12ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ef8:	00012e05 	.word	0x00012e05
   12efc:	00012e39 	.word	0x00012e39
   12f00:	00012e81 	.word	0x00012e81

00012f04 <_ZN15Holt_3593_Class4InitEv>:
 uint8_t	Holt_3593_Class::Init(void){
   12f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f06:	b083      	sub	sp, #12
   12f08:	4605      	mov	r5, r0
	 spi=&staticSPI;
   12f0a:	4c1b      	ldr	r4, [pc, #108]	; (12f78 <_ZN15Holt_3593_Class4InitEv+0x74>)
   12f0c:	6184      	str	r4, [r0, #24]
	  spi->init();
   12f0e:	4620      	mov	r0, r4
   12f10:	4b1a      	ldr	r3, [pc, #104]	; (12f7c <_ZN15Holt_3593_Class4InitEv+0x78>)
   12f12:	4798      	blx	r3
	 TFLIP );
   12f14:	2340      	movs	r3, #64	; 0x40
   12f16:	9301      	str	r3, [sp, #4]
   12f18:	2300      	movs	r3, #0
   12f1a:	9300      	str	r3, [sp, #0]
   12f1c:	2201      	movs	r2, #1
   12f1e:	2104      	movs	r1, #4
   12f20:	4628      	mov	r0, r5
   12f22:	4d17      	ldr	r5, [pc, #92]	; (12f80 <_ZN15Holt_3593_Class4InitEv+0x7c>)
   12f24:	47a8      	blx	r5
   12f26:	4f17      	ldr	r7, [pc, #92]	; (12f84 <_ZN15Holt_3593_Class4InitEv+0x80>)
   12f28:	1e7a      	subs	r2, r7, #1
   12f2a:	f104 031b 	add.w	r3, r4, #27
   12f2e:	371f      	adds	r7, #31
   12f30:	f102 0c01 	add.w	ip, r2, #1
		arinc.ar->LabelsArrayRX1[i]=LabelArray_2[i];
   12f34:	f8df e054 	ldr.w	lr, [pc, #84]	; 12f8c <_ZN15Holt_3593_Class4InitEv+0x88>
		LabelArray_2[i]=LabelArray_1[i];
   12f38:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   12f3c:	705d      	strb	r5, [r3, #1]
   12f3e:	eba2 010c 	sub.w	r1, r2, ip
		arinc.ar->LabelsArrayRX1[i]=LabelArray_2[i];
   12f42:	f8de 42b0 	ldr.w	r4, [lr, #688]	; 0x2b0
   12f46:	68a6      	ldr	r6, [r4, #8]
   12f48:	5475      	strb	r5, [r6, r1]
		arinc.ar->LabelsArrayRX2[i]=LabelArray_2[i];
   12f4a:	785e      	ldrb	r6, [r3, #1]
   12f4c:	68e5      	ldr	r5, [r4, #12]
   12f4e:	546e      	strb	r6, [r5, r1]
		arinc.ar->LabelsArrayTX[i]=LabelArray_2[i];
   12f50:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   12f54:	6864      	ldr	r4, [r4, #4]
   12f56:	5465      	strb	r5, [r4, r1]
	for (int i=0;i<32;i++)
   12f58:	42ba      	cmp	r2, r7
   12f5a:	d1ed      	bne.n	12f38 <_ZN15Holt_3593_Class4InitEv+0x34>
		LabelPriority2[i]=LabelPriority1[i];
   12f5c:	4b06      	ldr	r3, [pc, #24]	; (12f78 <_ZN15Holt_3593_Class4InitEv+0x74>)
   12f5e:	4a0a      	ldr	r2, [pc, #40]	; (12f88 <_ZN15Holt_3593_Class4InitEv+0x84>)
   12f60:	7811      	ldrb	r1, [r2, #0]
   12f62:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
   12f66:	7851      	ldrb	r1, [r2, #1]
   12f68:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
   12f6c:	7892      	ldrb	r2, [r2, #2]
   12f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 } 
   12f72:	b003      	add	sp, #12
   12f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f76:	bf00      	nop
   12f78:	2000286c 	.word	0x2000286c
   12f7c:	00013809 	.word	0x00013809
   12f80:	00012eb9 	.word	0x00012eb9
   12f84:	0001db6c 	.word	0x0001db6c
   12f88:	200001e4 	.word	0x200001e4
   12f8c:	200024a8 	.word	0x200024a8

00012f90 <_GLOBAL__sub_I_LabelArray_2>:
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
}
   12f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   12f94:	4c27      	ldr	r4, [pc, #156]	; (13034 <_GLOBAL__sub_I_LabelArray_2+0xa4>)
   12f96:	f104 0544 	add.w	r5, r4, #68	; 0x44
   12f9a:	4927      	ldr	r1, [pc, #156]	; (13038 <_GLOBAL__sub_I_LabelArray_2+0xa8>)
   12f9c:	4628      	mov	r0, r5
   12f9e:	4f27      	ldr	r7, [pc, #156]	; (1303c <_GLOBAL__sub_I_LabelArray_2+0xac>)
   12fa0:	47b8      	blx	r7
   12fa2:	4e27      	ldr	r6, [pc, #156]	; (13040 <_GLOBAL__sub_I_LabelArray_2+0xb0>)
   12fa4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1306c <_GLOBAL__sub_I_LabelArray_2+0xdc>
   12fa8:	4632      	mov	r2, r6
   12faa:	4641      	mov	r1, r8
   12fac:	4628      	mov	r0, r5
   12fae:	4d25      	ldr	r5, [pc, #148]	; (13044 <_GLOBAL__sub_I_LabelArray_2+0xb4>)
   12fb0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   12fb2:	f104 0964 	add.w	r9, r4, #100	; 0x64
   12fb6:	4924      	ldr	r1, [pc, #144]	; (13048 <_GLOBAL__sub_I_LabelArray_2+0xb8>)
   12fb8:	4648      	mov	r0, r9
   12fba:	47b8      	blx	r7
   12fbc:	4632      	mov	r2, r6
   12fbe:	4641      	mov	r1, r8
   12fc0:	4648      	mov	r0, r9
   12fc2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   12fc4:	f104 0984 	add.w	r9, r4, #132	; 0x84
   12fc8:	4920      	ldr	r1, [pc, #128]	; (1304c <_GLOBAL__sub_I_LabelArray_2+0xbc>)
   12fca:	4648      	mov	r0, r9
   12fcc:	47b8      	blx	r7
   12fce:	4632      	mov	r2, r6
   12fd0:	4641      	mov	r1, r8
   12fd2:	4648      	mov	r0, r9
   12fd4:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12fd6:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
   12fda:	491d      	ldr	r1, [pc, #116]	; (13050 <_GLOBAL__sub_I_LabelArray_2+0xc0>)
   12fdc:	4648      	mov	r0, r9
   12fde:	47b8      	blx	r7
   12fe0:	4632      	mov	r2, r6
   12fe2:	4641      	mov	r1, r8
   12fe4:	4648      	mov	r0, r9
   12fe6:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   12fe8:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
   12fec:	4919      	ldr	r1, [pc, #100]	; (13054 <_GLOBAL__sub_I_LabelArray_2+0xc4>)
   12fee:	4648      	mov	r0, r9
   12ff0:	47b8      	blx	r7
   12ff2:	4632      	mov	r2, r6
   12ff4:	4641      	mov	r1, r8
   12ff6:	4648      	mov	r0, r9
   12ff8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   12ffa:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
   12ffe:	4916      	ldr	r1, [pc, #88]	; (13058 <_GLOBAL__sub_I_LabelArray_2+0xc8>)
   13000:	4648      	mov	r0, r9
   13002:	47b8      	blx	r7
   13004:	4632      	mov	r2, r6
   13006:	4641      	mov	r1, r8
   13008:	4648      	mov	r0, r9
   1300a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1300c:	f504 7982 	add.w	r9, r4, #260	; 0x104
   13010:	4912      	ldr	r1, [pc, #72]	; (1305c <_GLOBAL__sub_I_LabelArray_2+0xcc>)
   13012:	4648      	mov	r0, r9
   13014:	47b8      	blx	r7
   13016:	4632      	mov	r2, r6
   13018:	4641      	mov	r1, r8
   1301a:	4648      	mov	r0, r9
   1301c:	47a8      	blx	r5
static SPI_Syn_Class	staticSPI(&SPI_HI3593);
   1301e:	4910      	ldr	r1, [pc, #64]	; (13060 <_GLOBAL__sub_I_LabelArray_2+0xd0>)
   13020:	4620      	mov	r0, r4
   13022:	4b10      	ldr	r3, [pc, #64]	; (13064 <_GLOBAL__sub_I_LabelArray_2+0xd4>)
   13024:	4798      	blx	r3
   13026:	4632      	mov	r2, r6
   13028:	490f      	ldr	r1, [pc, #60]	; (13068 <_GLOBAL__sub_I_LabelArray_2+0xd8>)
   1302a:	4620      	mov	r0, r4
   1302c:	47a8      	blx	r5
   1302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13032:	bf00      	nop
   13034:	2000286c 	.word	0x2000286c
   13038:	2000d6d8 	.word	0x2000d6d8
   1303c:	00013d09 	.word	0x00013d09
   13040:	20000000 	.word	0x20000000
   13044:	0001a44d 	.word	0x0001a44d
   13048:	2000d76c 	.word	0x2000d76c
   1304c:	2000d870 	.word	0x2000d870
   13050:	2000d78c 	.word	0x2000d78c
   13054:	2000d830 	.word	0x2000d830
   13058:	2000d850 	.word	0x2000d850
   1305c:	2000d748 	.word	0x2000d748
   13060:	2000d6f8 	.word	0x2000d6f8
   13064:	000137cd 	.word	0x000137cd
   13068:	000137f5 	.word	0x000137f5
   1306c:	00013d41 	.word	0x00013d41

00013070 <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   13070:	680a      	ldr	r2, [r1, #0]
   13072:	6002      	str	r2, [r0, #0]
   13074:	6849      	ldr	r1, [r1, #4]
   13076:	f852 2c0c 	ldr.w	r2, [r2, #-12]
   1307a:	5081      	str	r1, [r0, r2]
{
} //~Protocol_Class
   1307c:	4770      	bx	lr

0001307e <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1307e:	b538      	push	{r3, r4, r5, lr}
   13080:	4604      	mov	r4, r0
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   13082:	6803      	ldr	r3, [r0, #0]
   13084:	689d      	ldr	r5, [r3, #8]
   13086:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1308a:	5823      	ldr	r3, [r4, r0]
   1308c:	685b      	ldr	r3, [r3, #4]
   1308e:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13092:	4420      	add	r0, r4
   13094:	4798      	blx	r3
   13096:	4601      	mov	r1, r0
   13098:	4620      	mov	r0, r4
   1309a:	47a8      	blx	r5
	uint8_t	key=uint8_t((data&0xc0000)>>18);

	return key;
}
   1309c:	f3c0 4081 	ubfx	r0, r0, #18, #2
   130a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000130a4 <_ZN14Protocol_Class14MakeEvenParityEm>:
//	value|=(uint32_t)(((uint8_t)WavingValue()))<<19;
	value=MakeEvenParity(value);
	return value;
	
}
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   130a4:	b510      	push	{r4, lr}
   130a6:	460c      	mov	r4, r1
	if (FindParity(data))
   130a8:	6803      	ldr	r3, [r0, #0]
   130aa:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   130ae:	4418      	add	r0, r3
   130b0:	4b03      	ldr	r3, [pc, #12]	; (130c0 <_ZN14Protocol_Class14MakeEvenParityEm+0x1c>)
   130b2:	4798      	blx	r3
   130b4:	b110      	cbz	r0, 130bc <_ZN14Protocol_Class14MakeEvenParityEm+0x18>
	{
		data|=0x01<<31;
   130b6:	f044 4000 	orr.w	r0, r4, #2147483648	; 0x80000000
   130ba:	bd10      	pop	{r4, pc}
   130bc:	4620      	mov	r0, r4
	else
	{
		
	}
	return data;
}
   130be:	bd10      	pop	{r4, pc}
   130c0:	000123f5 	.word	0x000123f5

000130c4 <_ZN14Protocol_Class12MakeLabel374Emf>:
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   130c4:	b570      	push	{r4, r5, r6, lr}
   130c6:	4604      	mov	r4, r0
   130c8:	4616      	mov	r6, r2
	value=d<<12;
   130ca:	0309      	lsls	r1, r1, #12
   130cc:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(374);
   130ce:	6803      	ldr	r3, [r0, #0]
   130d0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   130d4:	5823      	ldr	r3, [r4, r0]
   130d6:	685b      	ldr	r3, [r3, #4]
   130d8:	f44f 71bb 	mov.w	r1, #374	; 0x176
   130dc:	4420      	add	r0, r4
   130de:	4798      	blx	r3
   130e0:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   130e2:	68e5      	ldr	r5, [r4, #12]
   130e4:	4305      	orrs	r5, r0
	if (v<0)
   130e6:	2100      	movs	r1, #0
   130e8:	4630      	mov	r0, r6
   130ea:	4b07      	ldr	r3, [pc, #28]	; (13108 <_ZN14Protocol_Class12MakeLabel374Emf+0x44>)
   130ec:	4798      	blx	r3
   130ee:	b930      	cbnz	r0, 130fe <_ZN14Protocol_Class12MakeLabel374Emf+0x3a>
	value|=(uint32_t)label;
   130f0:	60e5      	str	r5, [r4, #12]
	value=MakeEvenParity(value);
   130f2:	68e1      	ldr	r1, [r4, #12]
   130f4:	4620      	mov	r0, r4
   130f6:	4b05      	ldr	r3, [pc, #20]	; (1310c <_ZN14Protocol_Class12MakeLabel374Emf+0x48>)
   130f8:	4798      	blx	r3
   130fa:	60e0      	str	r0, [r4, #12]
}
   130fc:	bd70      	pop	{r4, r5, r6, pc}
		value|=0x1<<28;
   130fe:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
   13102:	60e5      	str	r5, [r4, #12]
   13104:	e7f5      	b.n	130f2 <_ZN14Protocol_Class12MakeLabel374Emf+0x2e>
   13106:	bf00      	nop
   13108:	0001c40d 	.word	0x0001c40d
   1310c:	000130a5 	.word	0x000130a5

00013110 <_ZN14Protocol_Class14MakeTXLabel375Eh>:
uint32_t Protocol_Class::MakeTXLabel375(uint8_t d){
   13110:	b510      	push	{r4, lr}
   13112:	4604      	mov	r4, r0
	value=((uint32_t)d)<<10;
   13114:	0289      	lsls	r1, r1, #10
   13116:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(375);
   13118:	6803      	ldr	r3, [r0, #0]
   1311a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1311e:	5823      	ldr	r3, [r4, r0]
   13120:	685b      	ldr	r3, [r3, #4]
   13122:	f240 1177 	movw	r1, #375	; 0x177
   13126:	4420      	add	r0, r4
   13128:	4798      	blx	r3
   1312a:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   1312c:	68e1      	ldr	r1, [r4, #12]
   1312e:	4301      	orrs	r1, r0
   13130:	60e1      	str	r1, [r4, #12]
	value=MakeEvenParity(value);
   13132:	4620      	mov	r0, r4
   13134:	4b01      	ldr	r3, [pc, #4]	; (1313c <_ZN14Protocol_Class14MakeTXLabel375Eh+0x2c>)
   13136:	4798      	blx	r3
   13138:	60e0      	str	r0, [r4, #12]
}
   1313a:	bd10      	pop	{r4, pc}
   1313c:	000130a5 	.word	0x000130a5

00013140 <_ZN14Protocol_Class14MakeTXLabel372E10Command272>:
uint32_t Protocol_Class::MakeTXLabel372(Command272 c272){
   13140:	b510      	push	{r4, lr}
   13142:	b082      	sub	sp, #8
   13144:	4604      	mov	r4, r0
   13146:	9101      	str	r1, [sp, #4]
	value=((uint32_t)c272.fanSpeed[0])<<10;
   13148:	f3c1 2307 	ubfx	r3, r1, #8, #8
	value|=((uint32_t)c272.fanSpeed[1])<<20;
   1314c:	f3c1 4107 	ubfx	r1, r1, #16, #8
   13150:	0509      	lsls	r1, r1, #20
   13152:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   13156:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(372);
   13158:	6803      	ldr	r3, [r0, #0]
   1315a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1315e:	5823      	ldr	r3, [r4, r0]
   13160:	685b      	ldr	r3, [r3, #4]
   13162:	f44f 71ba 	mov.w	r1, #372	; 0x174
   13166:	4420      	add	r0, r4
   13168:	4798      	blx	r3
   1316a:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   1316c:	68e1      	ldr	r1, [r4, #12]
   1316e:	4301      	orrs	r1, r0
   13170:	60e1      	str	r1, [r4, #12]
	value=MakeEvenParity(value);
   13172:	4620      	mov	r0, r4
   13174:	4b02      	ldr	r3, [pc, #8]	; (13180 <_ZN14Protocol_Class14MakeTXLabel372E10Command272+0x40>)
   13176:	4798      	blx	r3
   13178:	60e0      	str	r0, [r4, #12]
}
   1317a:	b002      	add	sp, #8
   1317c:	bd10      	pop	{r4, pc}
   1317e:	bf00      	nop
   13180:	000130a5 	.word	0x000130a5

00013184 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   13184:	b510      	push	{r4, lr}
   13186:	4604      	mov	r4, r0
	value=d<<10;
   13188:	0289      	lsls	r1, r1, #10
   1318a:	60c1      	str	r1, [r0, #12]
	label=Label2Byte(270);
   1318c:	6803      	ldr	r3, [r0, #0]
   1318e:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   13192:	5823      	ldr	r3, [r4, r0]
   13194:	685b      	ldr	r3, [r3, #4]
   13196:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1319a:	4420      	add	r0, r4
   1319c:	4798      	blx	r3
   1319e:	7420      	strb	r0, [r4, #16]
	value|=(uint32_t)label;
   131a0:	68e1      	ldr	r1, [r4, #12]
   131a2:	4301      	orrs	r1, r0
   131a4:	60e1      	str	r1, [r4, #12]
	value=MakeEvenParity(value);
   131a6:	4620      	mov	r0, r4
   131a8:	4b01      	ldr	r3, [pc, #4]	; (131b0 <_ZN14Protocol_Class12MakeLabel270Em+0x2c>)
   131aa:	4798      	blx	r3
   131ac:	60e0      	str	r0, [r4, #12]
}
   131ae:	bd10      	pop	{r4, pc}
   131b0:	000130a5 	.word	0x000130a5

000131b4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   131b4:	b480      	push	{r7}
   131b6:	b083      	sub	sp, #12
   131b8:	af00      	add	r7, sp, #0
   131ba:	6078      	str	r0, [r7, #4]
    return (void *)0;
   131bc:	2300      	movs	r3, #0
	}
   131be:	4618      	mov	r0, r3
   131c0:	370c      	adds	r7, #12
   131c2:	46bd      	mov	sp, r7
   131c4:	bc80      	pop	{r7}
   131c6:	4770      	bx	lr

000131c8 <free>:
//............................................................................
extern "C" void free(void *)
	{
   131c8:	b480      	push	{r7}
   131ca:	b083      	sub	sp, #12
   131cc:	af00      	add	r7, sp, #0
   131ce:	6078      	str	r0, [r7, #4]
	}
   131d0:	bf00      	nop
   131d2:	370c      	adds	r7, #12
   131d4:	46bd      	mov	sp, r7
   131d6:	bc80      	pop	{r7}
   131d8:	4770      	bx	lr

000131da <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   131da:	b480      	push	{r7}
   131dc:	af00      	add	r7, sp, #0
		}
   131de:	bf00      	nop
   131e0:	46bd      	mov	sp, r7
   131e2:	bc80      	pop	{r7}
   131e4:	4770      	bx	lr
	...

000131e8 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   131e8:	b580      	push	{r7, lr}
   131ea:	b082      	sub	sp, #8
   131ec:	af00      	add	r7, sp, #0
   131ee:	6078      	str	r0, [r7, #4]
	free(p);
   131f0:	6878      	ldr	r0, [r7, #4]
   131f2:	4b03      	ldr	r3, [pc, #12]	; (13200 <_ZdlPv+0x18>)
   131f4:	4798      	blx	r3
	}
   131f6:	bf00      	nop
   131f8:	3708      	adds	r7, #8
   131fa:	46bd      	mov	sp, r7
   131fc:	bd80      	pop	{r7, pc}
   131fe:	bf00      	nop
   13200:	000131c9 	.word	0x000131c9

00013204 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   13204:	b480      	push	{r7}
   13206:	b083      	sub	sp, #12
   13208:	af00      	add	r7, sp, #0
   1320a:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   1320c:	4b04      	ldr	r3, [pc, #16]	; (13220 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   1320e:	681b      	ldr	r3, [r3, #0]
   13210:	2201      	movs	r2, #1
   13212:	741a      	strb	r2, [r3, #16]
}
   13214:	bf00      	nop
   13216:	370c      	adds	r7, #12
   13218:	46bd      	mov	sp, r7
   1321a:	bc80      	pop	{r7}
   1321c:	4770      	bx	lr
   1321e:	bf00      	nop
   13220:	20003274 	.word	0x20003274

00013224 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   13224:	b480      	push	{r7}
   13226:	b083      	sub	sp, #12
   13228:	af00      	add	r7, sp, #0
   1322a:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   1322c:	4b04      	ldr	r3, [pc, #16]	; (13240 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   1322e:	689b      	ldr	r3, [r3, #8]
   13230:	3301      	adds	r3, #1
   13232:	4a03      	ldr	r2, [pc, #12]	; (13240 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   13234:	6093      	str	r3, [r2, #8]
}
   13236:	bf00      	nop
   13238:	370c      	adds	r7, #12
   1323a:	46bd      	mov	sp, r7
   1323c:	bc80      	pop	{r7}
   1323e:	4770      	bx	lr
   13240:	200029b0 	.word	0x200029b0

00013244 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   13244:	b580      	push	{r7, lr}
   13246:	b082      	sub	sp, #8
   13248:	af00      	add	r7, sp, #0
   1324a:	6078      	str	r0, [r7, #4]
   1324c:	687b      	ldr	r3, [r7, #4]
   1324e:	4618      	mov	r0, r3
   13250:	4b06      	ldr	r3, [pc, #24]	; (1326c <_ZN18EventHandler_ClassC1Ev+0x28>)
   13252:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   13254:	4a06      	ldr	r2, [pc, #24]	; (13270 <_ZN18EventHandler_ClassC1Ev+0x2c>)
   13256:	687b      	ldr	r3, [r7, #4]
   13258:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   1325a:	687b      	ldr	r3, [r7, #4]
   1325c:	4a05      	ldr	r2, [pc, #20]	; (13274 <_ZN18EventHandler_ClassC1Ev+0x30>)
   1325e:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   13260:	687b      	ldr	r3, [r7, #4]
   13262:	4618      	mov	r0, r3
   13264:	3708      	adds	r7, #8
   13266:	46bd      	mov	sp, r7
   13268:	bd80      	pop	{r7, pc}
   1326a:	bf00      	nop
   1326c:	000003c5 	.word	0x000003c5
   13270:	20003274 	.word	0x20003274
   13274:	20002a70 	.word	0x20002a70

00013278 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   13278:	b480      	push	{r7}
   1327a:	b083      	sub	sp, #12
   1327c:	af00      	add	r7, sp, #0
   1327e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   13280:	4a04      	ldr	r2, [pc, #16]	; (13294 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   13282:	687b      	ldr	r3, [r7, #4]
   13284:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   13286:	687b      	ldr	r3, [r7, #4]
   13288:	4618      	mov	r0, r3
   1328a:	370c      	adds	r7, #12
   1328c:	46bd      	mov	sp, r7
   1328e:	bc80      	pop	{r7}
   13290:	4770      	bx	lr
   13292:	bf00      	nop
   13294:	20003274 	.word	0x20003274

00013298 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   13298:	b580      	push	{r7, lr}
   1329a:	b084      	sub	sp, #16
   1329c:	af00      	add	r7, sp, #0
   1329e:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   132a0:	687b      	ldr	r3, [r7, #4]
   132a2:	2200      	movs	r2, #0
   132a4:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   132a6:	687b      	ldr	r3, [r7, #4]
   132a8:	2200      	movs	r2, #0
   132aa:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   132ac:	687b      	ldr	r3, [r7, #4]
   132ae:	2200      	movs	r2, #0
   132b0:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   132b2:	687b      	ldr	r3, [r7, #4]
   132b4:	2200      	movs	r2, #0
   132b6:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   132b8:	687b      	ldr	r3, [r7, #4]
   132ba:	2200      	movs	r2, #0
   132bc:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   132be:	687b      	ldr	r3, [r7, #4]
   132c0:	2200      	movs	r2, #0
   132c2:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   132c4:	2301      	movs	r3, #1
   132c6:	81fb      	strh	r3, [r7, #14]
   132c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   132cc:	2b7f      	cmp	r3, #127	; 0x7f
   132ce:	dc1b      	bgt.n	13308 <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   132d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   132d4:	4a15      	ldr	r2, [pc, #84]	; (1332c <_ZN18EventHandler_Class4InitEv+0x94>)
   132d6:	011b      	lsls	r3, r3, #4
   132d8:	4413      	add	r3, r2
   132da:	330c      	adds	r3, #12
   132dc:	2200      	movs	r2, #0
   132de:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   132e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   132e4:	3b01      	subs	r3, #1
   132e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   132ea:	0112      	lsls	r2, r2, #4
   132ec:	490f      	ldr	r1, [pc, #60]	; (1332c <_ZN18EventHandler_Class4InitEv+0x94>)
   132ee:	440a      	add	r2, r1
   132f0:	490e      	ldr	r1, [pc, #56]	; (1332c <_ZN18EventHandler_Class4InitEv+0x94>)
   132f2:	011b      	lsls	r3, r3, #4
   132f4:	440b      	add	r3, r1
   132f6:	330c      	adds	r3, #12
   132f8:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   132fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   132fe:	b29b      	uxth	r3, r3
   13300:	3301      	adds	r3, #1
   13302:	b29b      	uxth	r3, r3
   13304:	81fb      	strh	r3, [r7, #14]
   13306:	e7df      	b.n	132c8 <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   13308:	4809      	ldr	r0, [pc, #36]	; (13330 <_ZN18EventHandler_Class4InitEv+0x98>)
   1330a:	4b0a      	ldr	r3, [pc, #40]	; (13334 <_ZN18EventHandler_Class4InitEv+0x9c>)
   1330c:	4798      	blx	r3
   1330e:	4603      	mov	r3, r0
   13310:	461a      	mov	r2, r3
   13312:	687b      	ldr	r3, [r7, #4]
   13314:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   13316:	2201      	movs	r2, #1
   13318:	4907      	ldr	r1, [pc, #28]	; (13338 <_ZN18EventHandler_Class4InitEv+0xa0>)
   1331a:	4805      	ldr	r0, [pc, #20]	; (13330 <_ZN18EventHandler_Class4InitEv+0x98>)
   1331c:	4b07      	ldr	r3, [pc, #28]	; (1333c <_ZN18EventHandler_Class4InitEv+0xa4>)
   1331e:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   13320:	2301      	movs	r3, #1
}
   13322:	4618      	mov	r0, r3
   13324:	3710      	adds	r7, #16
   13326:	46bd      	mov	sp, r7
   13328:	bd80      	pop	{r7, pc}
   1332a:	bf00      	nop
   1332c:	20002a70 	.word	0x20002a70
   13330:	200029b0 	.word	0x200029b0
   13334:	00013df5 	.word	0x00013df5
   13338:	00013225 	.word	0x00013225
   1333c:	00013ee5 	.word	0x00013ee5

00013340 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   13340:	b590      	push	{r4, r7, lr}
   13342:	b087      	sub	sp, #28
   13344:	af02      	add	r7, sp, #8
   13346:	60f8      	str	r0, [r7, #12]
   13348:	60b9      	str	r1, [r7, #8]
   1334a:	4611      	mov	r1, r2
   1334c:	461a      	mov	r2, r3
   1334e:	460b      	mov	r3, r1
   13350:	80fb      	strh	r3, [r7, #6]
   13352:	4613      	mov	r3, r2
   13354:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   13356:	88b9      	ldrh	r1, [r7, #4]
   13358:	88fa      	ldrh	r2, [r7, #6]
   1335a:	6a3b      	ldr	r3, [r7, #32]
   1335c:	9300      	str	r3, [sp, #0]
   1335e:	460b      	mov	r3, r1
   13360:	68b9      	ldr	r1, [r7, #8]
   13362:	68f8      	ldr	r0, [r7, #12]
   13364:	4c03      	ldr	r4, [pc, #12]	; (13374 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   13366:	47a0      	blx	r4
   13368:	4603      	mov	r3, r0
}
   1336a:	4618      	mov	r0, r3
   1336c:	3714      	adds	r7, #20
   1336e:	46bd      	mov	sp, r7
   13370:	bd90      	pop	{r4, r7, pc}
   13372:	bf00      	nop
   13374:	00013379 	.word	0x00013379

00013378 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   13378:	b590      	push	{r4, r7, lr}
   1337a:	b089      	sub	sp, #36	; 0x24
   1337c:	af00      	add	r7, sp, #0
   1337e:	60f8      	str	r0, [r7, #12]
   13380:	60b9      	str	r1, [r7, #8]
   13382:	4611      	mov	r1, r2
   13384:	461a      	mov	r2, r3
   13386:	460b      	mov	r3, r1
   13388:	80fb      	strh	r3, [r7, #6]
   1338a:	4613      	mov	r3, r2
   1338c:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   1338e:	2300      	movs	r3, #0
   13390:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   13392:	2300      	movs	r3, #0
   13394:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   13396:	68fb      	ldr	r3, [r7, #12]
   13398:	2200      	movs	r2, #0
   1339a:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   1339c:	68bb      	ldr	r3, [r7, #8]
   1339e:	88fa      	ldrh	r2, [r7, #6]
   133a0:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   133a2:	68bb      	ldr	r3, [r7, #8]
   133a4:	88ba      	ldrh	r2, [r7, #4]
   133a6:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   133a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   133aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   133ae:	4293      	cmp	r3, r2
   133b0:	d006      	beq.n	133c0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   133b4:	461a      	mov	r2, r3
   133b6:	493a      	ldr	r1, [pc, #232]	; (134a0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   133b8:	483a      	ldr	r0, [pc, #232]	; (134a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   133ba:	4b3b      	ldr	r3, [pc, #236]	; (134a8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   133bc:	4798      	blx	r3
   133be:	e004      	b.n	133ca <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   133c0:	2232      	movs	r2, #50	; 0x32
   133c2:	4937      	ldr	r1, [pc, #220]	; (134a0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   133c4:	4837      	ldr	r0, [pc, #220]	; (134a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   133c6:	4b38      	ldr	r3, [pc, #224]	; (134a8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   133c8:	4798      	blx	r3
	}
	do 
	{
		if (eventHandler)
   133ca:	68fb      	ldr	r3, [r7, #12]
   133cc:	695b      	ldr	r3, [r3, #20]
   133ce:	2b00      	cmp	r3, #0
   133d0:	d002      	beq.n	133d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x60>
		{
			eventHandler();
   133d2:	68fb      	ldr	r3, [r7, #12]
   133d4:	695b      	ldr	r3, [r3, #20]
   133d6:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   133d8:	4b34      	ldr	r3, [pc, #208]	; (134ac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   133da:	681b      	ldr	r3, [r3, #0]
   133dc:	61bb      	str	r3, [r7, #24]

		while (queue)
   133de:	69bb      	ldr	r3, [r7, #24]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d040      	beq.n	13466 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xee>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   133e4:	68bb      	ldr	r3, [r7, #8]
   133e6:	881b      	ldrh	r3, [r3, #0]
   133e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   133ec:	4293      	cmp	r3, r2
   133ee:	d005      	beq.n	133fc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x84>
   133f0:	69bb      	ldr	r3, [r7, #24]
   133f2:	881a      	ldrh	r2, [r3, #0]
   133f4:	68bb      	ldr	r3, [r7, #8]
   133f6:	881b      	ldrh	r3, [r3, #0]
   133f8:	429a      	cmp	r2, r3
   133fa:	d12e      	bne.n	1345a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xe2>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   133fc:	68bb      	ldr	r3, [r7, #8]
   133fe:	885b      	ldrh	r3, [r3, #2]
   13400:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13404:	4293      	cmp	r3, r2
   13406:	d005      	beq.n	13414 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x9c>
   13408:	69bb      	ldr	r3, [r7, #24]
   1340a:	885a      	ldrh	r2, [r3, #2]
   1340c:	68bb      	ldr	r3, [r7, #8]
   1340e:	885b      	ldrh	r3, [r3, #2]
   13410:	429a      	cmp	r2, r3
   13412:	d122      	bne.n	1345a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xe2>
			{
				if (queuePrev)
   13414:	697b      	ldr	r3, [r7, #20]
   13416:	2b00      	cmp	r3, #0
   13418:	d004      	beq.n	13424 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xac>
				{
					queuePrev->next = queue->next;
   1341a:	69bb      	ldr	r3, [r7, #24]
   1341c:	68da      	ldr	r2, [r3, #12]
   1341e:	697b      	ldr	r3, [r7, #20]
   13420:	60da      	str	r2, [r3, #12]
   13422:	e003      	b.n	1342c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xb4>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   13424:	69bb      	ldr	r3, [r7, #24]
   13426:	68db      	ldr	r3, [r3, #12]
   13428:	4a20      	ldr	r2, [pc, #128]	; (134ac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   1342a:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   1342c:	68ba      	ldr	r2, [r7, #8]
   1342e:	69bb      	ldr	r3, [r7, #24]
   13430:	4614      	mov	r4, r2
   13432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   13438:	68fb      	ldr	r3, [r7, #12]
   1343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1343c:	69bb      	ldr	r3, [r7, #24]
   1343e:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   13440:	68fb      	ldr	r3, [r7, #12]
   13442:	69ba      	ldr	r2, [r7, #24]
   13444:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   13446:	68fb      	ldr	r3, [r7, #12]
   13448:	69db      	ldr	r3, [r3, #28]
   1344a:	1e5a      	subs	r2, r3, #1
   1344c:	68fb      	ldr	r3, [r7, #12]
   1344e:	61da      	str	r2, [r3, #28]

				queue = NULL;
   13450:	2300      	movs	r3, #0
   13452:	61bb      	str	r3, [r7, #24]
				result = true;
   13454:	2301      	movs	r3, #1
   13456:	77fb      	strb	r3, [r7, #31]
   13458:	e004      	b.n	13464 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xec>
			}
			else
			{
				queuePrev = queue;
   1345a:	69bb      	ldr	r3, [r7, #24]
   1345c:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   1345e:	69bb      	ldr	r3, [r7, #24]
   13460:	68db      	ldr	r3, [r3, #12]
   13462:	61bb      	str	r3, [r7, #24]
		while (queue)
   13464:	e7bb      	b.n	133de <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x66>
			
			
			//while (!eventTimeout);
			
		}
	} while ((!result )&& (!eventTimeout));
   13466:	7ffb      	ldrb	r3, [r7, #31]
   13468:	f083 0301 	eor.w	r3, r3, #1
   1346c:	b2db      	uxtb	r3, r3
   1346e:	2b00      	cmp	r3, #0
   13470:	d009      	beq.n	13486 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x10e>
   13472:	68fb      	ldr	r3, [r7, #12]
   13474:	7c1b      	ldrb	r3, [r3, #16]
   13476:	b2db      	uxtb	r3, r3
   13478:	f083 0301 	eor.w	r3, r3, #1
   1347c:	b2db      	uxtb	r3, r3
   1347e:	2b00      	cmp	r3, #0
   13480:	d001      	beq.n	13486 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x10e>
   13482:	2301      	movs	r3, #1
   13484:	e000      	b.n	13488 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
   13486:	2300      	movs	r3, #0
	do 
   13488:	2b00      	cmp	r3, #0
   1348a:	d000      	beq.n	1348e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x116>
   1348c:	e79d      	b.n	133ca <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
// 	while ()
// 	{
// 		
// 		
// 	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   1348e:	4904      	ldr	r1, [pc, #16]	; (134a0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   13490:	4804      	ldr	r0, [pc, #16]	; (134a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   13492:	4b07      	ldr	r3, [pc, #28]	; (134b0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   13494:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   13496:	7ffb      	ldrb	r3, [r7, #31]
}
   13498:	4618      	mov	r0, r3
   1349a:	3724      	adds	r7, #36	; 0x24
   1349c:	46bd      	mov	sp, r7
   1349e:	bd90      	pop	{r4, r7, pc}
   134a0:	00013205 	.word	0x00013205
   134a4:	200029b0 	.word	0x200029b0
   134a8:	00013ff5 	.word	0x00013ff5
   134ac:	20003270 	.word	0x20003270
   134b0:	00013f85 	.word	0x00013f85

000134b4 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   134b4:	b480      	push	{r7}
   134b6:	b087      	sub	sp, #28
   134b8:	af00      	add	r7, sp, #0
   134ba:	6078      	str	r0, [r7, #4]
   134bc:	460b      	mov	r3, r1
   134be:	807b      	strh	r3, [r7, #2]
   134c0:	4613      	mov	r3, r2
   134c2:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   134c4:	2300      	movs	r3, #0
   134c6:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   134c8:	2300      	movs	r3, #0
   134ca:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   134cc:	687b      	ldr	r3, [r7, #4]
   134ce:	69db      	ldr	r3, [r3, #28]
   134d0:	2b00      	cmp	r3, #0
   134d2:	d102      	bne.n	134da <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   134d4:	2300      	movs	r3, #0
   134d6:	75fb      	strb	r3, [r7, #23]
   134d8:	e027      	b.n	1352a <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   134da:	4b17      	ldr	r3, [pc, #92]	; (13538 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	613b      	str	r3, [r7, #16]
		while (queue)
   134e0:	693b      	ldr	r3, [r7, #16]
   134e2:	2b00      	cmp	r3, #0
   134e4:	d021      	beq.n	1352a <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   134e6:	883b      	ldrh	r3, [r7, #0]
   134e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   134ec:	4293      	cmp	r3, r2
   134ee:	bf0c      	ite	eq
   134f0:	2301      	moveq	r3, #1
   134f2:	2300      	movne	r3, #0
   134f4:	b2da      	uxtb	r2, r3
   134f6:	693b      	ldr	r3, [r7, #16]
   134f8:	881b      	ldrh	r3, [r3, #0]
   134fa:	8839      	ldrh	r1, [r7, #0]
   134fc:	4299      	cmp	r1, r3
   134fe:	bf0c      	ite	eq
   13500:	2301      	moveq	r3, #1
   13502:	2300      	movne	r3, #0
   13504:	b2db      	uxtb	r3, r3
   13506:	4313      	orrs	r3, r2
   13508:	b2db      	uxtb	r3, r3
   1350a:	2b00      	cmp	r3, #0
   1350c:	d007      	beq.n	1351e <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   1350e:	693b      	ldr	r3, [r7, #16]
   13510:	885b      	ldrh	r3, [r3, #2]
   13512:	887a      	ldrh	r2, [r7, #2]
   13514:	429a      	cmp	r2, r3
   13516:	d102      	bne.n	1351e <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   13518:	2301      	movs	r3, #1
   1351a:	75fb      	strb	r3, [r7, #23]
				break;
   1351c:	e005      	b.n	1352a <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   1351e:	693b      	ldr	r3, [r7, #16]
   13520:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   13522:	693b      	ldr	r3, [r7, #16]
   13524:	68db      	ldr	r3, [r3, #12]
   13526:	613b      	str	r3, [r7, #16]
		while (queue)
   13528:	e7da      	b.n	134e0 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   1352a:	7dfb      	ldrb	r3, [r7, #23]
}
   1352c:	4618      	mov	r0, r3
   1352e:	371c      	adds	r7, #28
   13530:	46bd      	mov	sp, r7
   13532:	bc80      	pop	{r7}
   13534:	4770      	bx	lr
   13536:	bf00      	nop
   13538:	20003270 	.word	0x20003270

0001353c <_ZN18EventHandler_Class13SendEventSelfERK5event>:
}



void EventHandler_Class::SendEventSelf(const event& e)
{
   1353c:	b580      	push	{r7, lr}
   1353e:	b084      	sub	sp, #16
   13540:	af00      	add	r7, sp, #0
   13542:	6078      	str	r0, [r7, #4]
   13544:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   13546:	683b      	ldr	r3, [r7, #0]
   13548:	8859      	ldrh	r1, [r3, #2]
   1354a:	683b      	ldr	r3, [r7, #0]
   1354c:	881b      	ldrh	r3, [r3, #0]
   1354e:	461a      	mov	r2, r3
   13550:	6878      	ldr	r0, [r7, #4]
   13552:	4b25      	ldr	r3, [pc, #148]	; (135e8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   13554:	4798      	blx	r3
   13556:	4603      	mov	r3, r0
   13558:	2b00      	cmp	r3, #0
   1355a:	d140      	bne.n	135de <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   1355c:	687b      	ldr	r3, [r7, #4]
   1355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13560:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   13562:	68bb      	ldr	r3, [r7, #8]
   13564:	2b00      	cmp	r3, #0
   13566:	d035      	beq.n	135d4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   13568:	687b      	ldr	r3, [r7, #4]
   1356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1356c:	68da      	ldr	r2, [r3, #12]
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   13572:	68bb      	ldr	r3, [r7, #8]
   13574:	2200      	movs	r2, #0
   13576:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   13578:	687b      	ldr	r3, [r7, #4]
   1357a:	69db      	ldr	r3, [r3, #28]
   1357c:	1c5a      	adds	r2, r3, #1
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   13582:	4b1a      	ldr	r3, [pc, #104]	; (135ec <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   13584:	681b      	ldr	r3, [r3, #0]
   13586:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   13588:	68fb      	ldr	r3, [r7, #12]
   1358a:	2b00      	cmp	r3, #0
   1358c:	d103      	bne.n	13596 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   1358e:	4a17      	ldr	r2, [pc, #92]	; (135ec <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   13590:	68bb      	ldr	r3, [r7, #8]
   13592:	6013      	str	r3, [r2, #0]
   13594:	e00a      	b.n	135ac <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   13596:	68fb      	ldr	r3, [r7, #12]
   13598:	68db      	ldr	r3, [r3, #12]
   1359a:	2b00      	cmp	r3, #0
   1359c:	d003      	beq.n	135a6 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   1359e:	68fb      	ldr	r3, [r7, #12]
   135a0:	68db      	ldr	r3, [r3, #12]
   135a2:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   135a4:	e7f7      	b.n	13596 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   135a6:	68fb      	ldr	r3, [r7, #12]
   135a8:	68ba      	ldr	r2, [r7, #8]
   135aa:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   135ac:	683b      	ldr	r3, [r7, #0]
   135ae:	881a      	ldrh	r2, [r3, #0]
   135b0:	68bb      	ldr	r3, [r7, #8]
   135b2:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   135b4:	683b      	ldr	r3, [r7, #0]
   135b6:	885a      	ldrh	r2, [r3, #2]
   135b8:	68bb      	ldr	r3, [r7, #8]
   135ba:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   135bc:	68bb      	ldr	r3, [r7, #8]
   135be:	683a      	ldr	r2, [r7, #0]
   135c0:	6892      	ldr	r2, [r2, #8]
   135c2:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   135c4:	480a      	ldr	r0, [pc, #40]	; (135f0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   135c6:	4b0b      	ldr	r3, [pc, #44]	; (135f4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   135c8:	4798      	blx	r3
   135ca:	4603      	mov	r3, r0
   135cc:	461a      	mov	r2, r3
   135ce:	68bb      	ldr	r3, [r7, #8]
   135d0:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   135d2:	e004      	b.n	135de <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   135d8:	1c5a      	adds	r2, r3, #1
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
   135de:	bf00      	nop
   135e0:	3710      	adds	r7, #16
   135e2:	46bd      	mov	sp, r7
   135e4:	bd80      	pop	{r7, pc}
   135e6:	bf00      	nop
   135e8:	000134b5 	.word	0x000134b5
   135ec:	20003270 	.word	0x20003270
   135f0:	200029b0 	.word	0x200029b0
   135f4:	00013fdd 	.word	0x00013fdd

000135f8 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendEventSelf(EventClass eventClass, EventType eventType, const eventData& data)
{
   135f8:	b580      	push	{r7, lr}
   135fa:	b088      	sub	sp, #32
   135fc:	af00      	add	r7, sp, #0
   135fe:	60f8      	str	r0, [r7, #12]
   13600:	607b      	str	r3, [r7, #4]
   13602:	460b      	mov	r3, r1
   13604:	817b      	strh	r3, [r7, #10]
   13606:	4613      	mov	r3, r2
   13608:	813b      	strh	r3, [r7, #8]
	event		theEvent;
   1360a:	f107 0310 	add.w	r3, r7, #16
   1360e:	4618      	mov	r0, r3
   13610:	4b09      	ldr	r3, [pc, #36]	; (13638 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x40>)
   13612:	4798      	blx	r3

	theEvent.eventClass = eventClass;
   13614:	897b      	ldrh	r3, [r7, #10]
   13616:	823b      	strh	r3, [r7, #16]
	theEvent.eventType = eventType;
   13618:	893b      	ldrh	r3, [r7, #8]
   1361a:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	681b      	ldr	r3, [r3, #0]
   13620:	61bb      	str	r3, [r7, #24]
	
	SendEventSelf(theEvent);
   13622:	f107 0310 	add.w	r3, r7, #16
   13626:	4619      	mov	r1, r3
   13628:	68f8      	ldr	r0, [r7, #12]
   1362a:	4b04      	ldr	r3, [pc, #16]	; (1363c <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x44>)
   1362c:	4798      	blx	r3
}
   1362e:	bf00      	nop
   13630:	3720      	adds	r7, #32
   13632:	46bd      	mov	sp, r7
   13634:	bd80      	pop	{r7, pc}
   13636:	bf00      	nop
   13638:	000003c5 	.word	0x000003c5
   1363c:	0001353d 	.word	0x0001353d

00013640 <_ZN18EventHandler_Class10CheckEventEv>:
	theEvent.eventType =(EventType)et ;
	theEvent.data = data;
	SendEventSelf(theEvent);
}
uint32_t EventHandler_Class::CheckEvent(void)
{
   13640:	b580      	push	{r7, lr}
   13642:	b08a      	sub	sp, #40	; 0x28
   13644:	af00      	add	r7, sp, #0
   13646:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   13648:	f04f 0300 	mov.w	r3, #0
   1364c:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   1364e:	f04f 0300 	mov.w	r3, #0
   13652:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   13654:	f04f 0300 	mov.w	r3, #0
   13658:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   1365a:	f107 030c 	add.w	r3, r7, #12
   1365e:	4618      	mov	r0, r3
   13660:	4b03      	ldr	r3, [pc, #12]	; (13670 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   13662:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   13664:	687b      	ldr	r3, [r7, #4]
   13666:	69db      	ldr	r3, [r3, #28]
	
}
   13668:	4618      	mov	r0, r3
   1366a:	3728      	adds	r7, #40	; 0x28
   1366c:	46bd      	mov	sp, r7
   1366e:	bd80      	pop	{r7, pc}
   13670:	000003c5 	.word	0x000003c5

00013674 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   13674:	b5b0      	push	{r4, r5, r7, lr}
   13676:	b082      	sub	sp, #8
   13678:	af00      	add	r7, sp, #0
   1367a:	6078      	str	r0, [r7, #4]
   1367c:	6039      	str	r1, [r7, #0]
   1367e:	687b      	ldr	r3, [r7, #4]
   13680:	2b01      	cmp	r3, #1
   13682:	d156      	bne.n	13732 <_Z41__static_initialization_and_destruction_0ii+0xbe>
   13684:	683b      	ldr	r3, [r7, #0]
   13686:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1368a:	4293      	cmp	r3, r2
   1368c:	d151      	bne.n	13732 <_Z41__static_initialization_and_destruction_0ii+0xbe>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1368e:	492b      	ldr	r1, [pc, #172]	; (1373c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13690:	482b      	ldr	r0, [pc, #172]	; (13740 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   13692:	4b2c      	ldr	r3, [pc, #176]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   13694:	4798      	blx	r3
   13696:	4a2c      	ldr	r2, [pc, #176]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   13698:	492c      	ldr	r1, [pc, #176]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1369a:	4829      	ldr	r0, [pc, #164]	; (13740 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1369c:	4b2c      	ldr	r3, [pc, #176]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1369e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   136a0:	492c      	ldr	r1, [pc, #176]	; (13754 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   136a2:	482d      	ldr	r0, [pc, #180]	; (13758 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   136a4:	4b27      	ldr	r3, [pc, #156]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   136a6:	4798      	blx	r3
   136a8:	4a27      	ldr	r2, [pc, #156]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   136aa:	4928      	ldr	r1, [pc, #160]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   136ac:	482a      	ldr	r0, [pc, #168]	; (13758 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   136ae:	4b28      	ldr	r3, [pc, #160]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   136b0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   136b2:	492a      	ldr	r1, [pc, #168]	; (1375c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   136b4:	482a      	ldr	r0, [pc, #168]	; (13760 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   136b6:	4b23      	ldr	r3, [pc, #140]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   136b8:	4798      	blx	r3
   136ba:	4a23      	ldr	r2, [pc, #140]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   136bc:	4923      	ldr	r1, [pc, #140]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   136be:	4828      	ldr	r0, [pc, #160]	; (13760 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   136c0:	4b23      	ldr	r3, [pc, #140]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   136c2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   136c4:	4927      	ldr	r1, [pc, #156]	; (13764 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   136c6:	4828      	ldr	r0, [pc, #160]	; (13768 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   136c8:	4b1e      	ldr	r3, [pc, #120]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   136ca:	4798      	blx	r3
   136cc:	4a1e      	ldr	r2, [pc, #120]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   136ce:	491f      	ldr	r1, [pc, #124]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   136d0:	4825      	ldr	r0, [pc, #148]	; (13768 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   136d2:	4b1f      	ldr	r3, [pc, #124]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   136d4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   136d6:	4925      	ldr	r1, [pc, #148]	; (1376c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   136d8:	4825      	ldr	r0, [pc, #148]	; (13770 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   136da:	4b1a      	ldr	r3, [pc, #104]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   136dc:	4798      	blx	r3
   136de:	4a1a      	ldr	r2, [pc, #104]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   136e0:	491a      	ldr	r1, [pc, #104]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   136e2:	4823      	ldr	r0, [pc, #140]	; (13770 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   136e4:	4b1a      	ldr	r3, [pc, #104]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   136e6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   136e8:	4922      	ldr	r1, [pc, #136]	; (13774 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   136ea:	4823      	ldr	r0, [pc, #140]	; (13778 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   136ec:	4b15      	ldr	r3, [pc, #84]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   136ee:	4798      	blx	r3
   136f0:	4a15      	ldr	r2, [pc, #84]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   136f2:	4916      	ldr	r1, [pc, #88]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   136f4:	4820      	ldr	r0, [pc, #128]	; (13778 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   136f6:	4b16      	ldr	r3, [pc, #88]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   136f8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   136fa:	4920      	ldr	r1, [pc, #128]	; (1377c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   136fc:	4820      	ldr	r0, [pc, #128]	; (13780 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   136fe:	4b11      	ldr	r3, [pc, #68]	; (13744 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   13700:	4798      	blx	r3
   13702:	4a11      	ldr	r2, [pc, #68]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   13704:	4911      	ldr	r1, [pc, #68]	; (1374c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   13706:	481e      	ldr	r0, [pc, #120]	; (13780 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13708:	4b11      	ldr	r3, [pc, #68]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1370a:	4798      	blx	r3
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1370c:	4b1d      	ldr	r3, [pc, #116]	; (13784 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1370e:	247f      	movs	r4, #127	; 0x7f
   13710:	461d      	mov	r5, r3
   13712:	2c00      	cmp	r4, #0
   13714:	db05      	blt.n	13722 <_Z41__static_initialization_and_destruction_0ii+0xae>
   13716:	4628      	mov	r0, r5
   13718:	4b1b      	ldr	r3, [pc, #108]	; (13788 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1371a:	4798      	blx	r3
   1371c:	3510      	adds	r5, #16
   1371e:	3c01      	subs	r4, #1
   13720:	e7f7      	b.n	13712 <_Z41__static_initialization_and_destruction_0ii+0x9e>
	EventHandler_Class	listener;
   13722:	481a      	ldr	r0, [pc, #104]	; (1378c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13724:	4b1a      	ldr	r3, [pc, #104]	; (13790 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13726:	4798      	blx	r3
   13728:	4a07      	ldr	r2, [pc, #28]	; (13748 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1372a:	491a      	ldr	r1, [pc, #104]	; (13794 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1372c:	4817      	ldr	r0, [pc, #92]	; (1378c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1372e:	4b08      	ldr	r3, [pc, #32]	; (13750 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   13730:	4798      	blx	r3
   13732:	bf00      	nop
   13734:	3708      	adds	r7, #8
   13736:	46bd      	mov	sp, r7
   13738:	bdb0      	pop	{r4, r5, r7, pc}
   1373a:	bf00      	nop
   1373c:	2000d6d8 	.word	0x2000d6d8
   13740:	20002990 	.word	0x20002990
   13744:	00013d09 	.word	0x00013d09
   13748:	20000000 	.word	0x20000000
   1374c:	00013d41 	.word	0x00013d41
   13750:	0001a44d 	.word	0x0001a44d
   13754:	2000d76c 	.word	0x2000d76c
   13758:	200029b0 	.word	0x200029b0
   1375c:	2000d870 	.word	0x2000d870
   13760:	200029d0 	.word	0x200029d0
   13764:	2000d78c 	.word	0x2000d78c
   13768:	200029f0 	.word	0x200029f0
   1376c:	2000d830 	.word	0x2000d830
   13770:	20002a10 	.word	0x20002a10
   13774:	2000d850 	.word	0x2000d850
   13778:	20002a30 	.word	0x20002a30
   1377c:	2000d748 	.word	0x2000d748
   13780:	20002a50 	.word	0x20002a50
   13784:	20002a70 	.word	0x20002a70
   13788:	000003c5 	.word	0x000003c5
   1378c:	20003284 	.word	0x20003284
   13790:	00013245 	.word	0x00013245
   13794:	00013279 	.word	0x00013279

00013798 <_GLOBAL__sub_I_maxEventCount>:
   13798:	b580      	push	{r7, lr}
   1379a:	af00      	add	r7, sp, #0
   1379c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   137a0:	2001      	movs	r0, #1
   137a2:	4b01      	ldr	r3, [pc, #4]	; (137a8 <_GLOBAL__sub_I_maxEventCount+0x10>)
   137a4:	4798      	blx	r3
   137a6:	bd80      	pop	{r7, pc}
   137a8:	00013675 	.word	0x00013675

000137ac <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   137ac:	b480      	push	{r7}
   137ae:	b083      	sub	sp, #12
   137b0:	af00      	add	r7, sp, #0
   137b2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   137b4:	4a04      	ldr	r2, [pc, #16]	; (137c8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   137b6:	687b      	ldr	r3, [r7, #4]
   137b8:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   137ba:	687b      	ldr	r3, [r7, #4]
   137bc:	4618      	mov	r0, r3
   137be:	370c      	adds	r7, #12
   137c0:	46bd      	mov	sp, r7
   137c2:	bc80      	pop	{r7}
   137c4:	4770      	bx	lr
   137c6:	bf00      	nop
   137c8:	200032b8 	.word	0x200032b8

000137cc <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor>:

SPI_Syn_Class::SPI_Syn_Class(spi_m_sync_descriptor * spiDesc)
   137cc:	b480      	push	{r7}
   137ce:	b083      	sub	sp, #12
   137d0:	af00      	add	r7, sp, #0
   137d2:	6078      	str	r0, [r7, #4]
   137d4:	6039      	str	r1, [r7, #0]
{
	SPI=spiDesc;
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	683a      	ldr	r2, [r7, #0]
   137da:	60da      	str	r2, [r3, #12]
	ptrSPISync=this;
   137dc:	4a04      	ldr	r2, [pc, #16]	; (137f0 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor+0x24>)
   137de:	687b      	ldr	r3, [r7, #4]
   137e0:	6013      	str	r3, [r2, #0]
} //SPI_Syn_Class
   137e2:	687b      	ldr	r3, [r7, #4]
   137e4:	4618      	mov	r0, r3
   137e6:	370c      	adds	r7, #12
   137e8:	46bd      	mov	sp, r7
   137ea:	bc80      	pop	{r7}
   137ec:	4770      	bx	lr
   137ee:	bf00      	nop
   137f0:	200032b8 	.word	0x200032b8

000137f4 <_ZN13SPI_Syn_ClassD1Ev>:

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   137f4:	b480      	push	{r7}
   137f6:	b083      	sub	sp, #12
   137f8:	af00      	add	r7, sp, #0
   137fa:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   137fc:	687b      	ldr	r3, [r7, #4]
   137fe:	4618      	mov	r0, r3
   13800:	370c      	adds	r7, #12
   13802:	46bd      	mov	sp, r7
   13804:	bc80      	pop	{r7}
   13806:	4770      	bx	lr

00013808 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   13808:	b580      	push	{r7, lr}
   1380a:	b082      	sub	sp, #8
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   13810:	687b      	ldr	r3, [r7, #4]
   13812:	68da      	ldr	r2, [r3, #12]
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	3310      	adds	r3, #16
   13818:	4619      	mov	r1, r3
   1381a:	4610      	mov	r0, r2
   1381c:	4b09      	ldr	r3, [pc, #36]	; (13844 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   1381e:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	68db      	ldr	r3, [r3, #12]
   13824:	4618      	mov	r0, r3
   13826:	4b08      	ldr	r3, [pc, #32]	; (13848 <_ZN13SPI_Syn_Class4initEv+0x40>)
   13828:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	4a07      	ldr	r2, [pc, #28]	; (1384c <_ZN13SPI_Syn_Class4initEv+0x44>)
   1382e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   13830:	687b      	ldr	r3, [r7, #4]
   13832:	4a06      	ldr	r2, [pc, #24]	; (1384c <_ZN13SPI_Syn_Class4initEv+0x44>)
   13834:	609a      	str	r2, [r3, #8]
	ready=true;
   13836:	687b      	ldr	r3, [r7, #4]
   13838:	2201      	movs	r2, #1
   1383a:	701a      	strb	r2, [r3, #0]
	
}
   1383c:	bf00      	nop
   1383e:	3708      	adds	r7, #8
   13840:	46bd      	mov	sp, r7
   13842:	bd80      	pop	{r7, pc}
   13844:	00006c85 	.word	0x00006c85
   13848:	00006af9 	.word	0x00006af9
   1384c:	200032bc 	.word	0x200032bc

00013850 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   13850:	b480      	push	{r7}
   13852:	b083      	sub	sp, #12
   13854:	af00      	add	r7, sp, #0
   13856:	6078      	str	r0, [r7, #4]
   13858:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   1385a:	4a05      	ldr	r2, [pc, #20]	; (13870 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	683a      	ldr	r2, [r7, #0]
   13864:	60da      	str	r2, [r3, #12]
}
   13866:	bf00      	nop
   13868:	370c      	adds	r7, #12
   1386a:	46bd      	mov	sp, r7
   1386c:	bc80      	pop	{r7}
   1386e:	4770      	bx	lr
   13870:	200032b8 	.word	0x200032b8

00013874 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   13874:	b580      	push	{r7, lr}
   13876:	b082      	sub	sp, #8
   13878:	af00      	add	r7, sp, #0
   1387a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   1387c:	687b      	ldr	r3, [r7, #4]
   1387e:	68da      	ldr	r2, [r3, #12]
   13880:	687b      	ldr	r3, [r7, #4]
   13882:	3310      	adds	r3, #16
   13884:	4619      	mov	r1, r3
   13886:	4610      	mov	r0, r2
   13888:	4b07      	ldr	r3, [pc, #28]	; (138a8 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   1388a:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   1388c:	687b      	ldr	r3, [r7, #4]
   1388e:	68db      	ldr	r3, [r3, #12]
   13890:	4618      	mov	r0, r3
   13892:	4b06      	ldr	r3, [pc, #24]	; (138ac <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   13894:	4798      	blx	r3
	ready=true;
   13896:	687b      	ldr	r3, [r7, #4]
   13898:	2201      	movs	r2, #1
   1389a:	701a      	strb	r2, [r3, #0]
	return 0;
   1389c:	2300      	movs	r3, #0
}
   1389e:	4618      	mov	r0, r3
   138a0:	3708      	adds	r7, #8
   138a2:	46bd      	mov	sp, r7
   138a4:	bd80      	pop	{r7, pc}
   138a6:	bf00      	nop
   138a8:	00006c85 	.word	0x00006c85
   138ac:	00006af9 	.word	0x00006af9

000138b0 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   138b0:	b580      	push	{r7, lr}
   138b2:	b086      	sub	sp, #24
   138b4:	af00      	add	r7, sp, #0
   138b6:	60f8      	str	r0, [r7, #12]
   138b8:	60b9      	str	r1, [r7, #8]
   138ba:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   138bc:	68fb      	ldr	r3, [r7, #12]
   138be:	2201      	movs	r2, #1
   138c0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   138c2:	68fb      	ldr	r3, [r7, #12]
   138c4:	691b      	ldr	r3, [r3, #16]
   138c6:	687a      	ldr	r2, [r7, #4]
   138c8:	b292      	uxth	r2, r2
   138ca:	68b9      	ldr	r1, [r7, #8]
   138cc:	4618      	mov	r0, r3
   138ce:	4b08      	ldr	r3, [pc, #32]	; (138f0 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   138d0:	4798      	blx	r3
   138d2:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   138d4:	697b      	ldr	r3, [r7, #20]
   138d6:	2b00      	cmp	r3, #0
   138d8:	bf14      	ite	ne
   138da:	2301      	movne	r3, #1
   138dc:	2300      	moveq	r3, #0
   138de:	b2da      	uxtb	r2, r3
   138e0:	68fb      	ldr	r3, [r7, #12]
   138e2:	761a      	strb	r2, [r3, #24]
	 return w;
   138e4:	697b      	ldr	r3, [r7, #20]
	
}
   138e6:	4618      	mov	r0, r3
   138e8:	3718      	adds	r7, #24
   138ea:	46bd      	mov	sp, r7
   138ec:	bd80      	pop	{r7, pc}
   138ee:	bf00      	nop
   138f0:	00018885 	.word	0x00018885

000138f4 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   138f4:	b580      	push	{r7, lr}
   138f6:	b086      	sub	sp, #24
   138f8:	af00      	add	r7, sp, #0
   138fa:	60f8      	str	r0, [r7, #12]
   138fc:	60b9      	str	r1, [r7, #8]
   138fe:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   13900:	68fb      	ldr	r3, [r7, #12]
   13902:	2201      	movs	r2, #1
   13904:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   13906:	68fb      	ldr	r3, [r7, #12]
   13908:	691b      	ldr	r3, [r3, #16]
   1390a:	687a      	ldr	r2, [r7, #4]
   1390c:	b292      	uxth	r2, r2
   1390e:	68b9      	ldr	r1, [r7, #8]
   13910:	4618      	mov	r0, r3
   13912:	4b08      	ldr	r3, [pc, #32]	; (13934 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   13914:	4798      	blx	r3
   13916:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   13918:	697b      	ldr	r3, [r7, #20]
   1391a:	2b00      	cmp	r3, #0
   1391c:	bf14      	ite	ne
   1391e:	2301      	movne	r3, #1
   13920:	2300      	moveq	r3, #0
   13922:	b2da      	uxtb	r2, r3
   13924:	68fb      	ldr	r3, [r7, #12]
   13926:	765a      	strb	r2, [r3, #25]
	return  r;
   13928:	697b      	ldr	r3, [r7, #20]
}
   1392a:	4618      	mov	r0, r3
   1392c:	3718      	adds	r7, #24
   1392e:	46bd      	mov	sp, r7
   13930:	bd80      	pop	{r7, pc}
   13932:	bf00      	nop
   13934:	000188d5 	.word	0x000188d5

00013938 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   13938:	b580      	push	{r7, lr}
   1393a:	b082      	sub	sp, #8
   1393c:	af00      	add	r7, sp, #0
   1393e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   13940:	687b      	ldr	r3, [r7, #4]
   13942:	68db      	ldr	r3, [r3, #12]
   13944:	4618      	mov	r0, r3
   13946:	4b03      	ldr	r3, [pc, #12]	; (13954 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   13948:	4798      	blx	r3
	
}
   1394a:	bf00      	nop
   1394c:	3708      	adds	r7, #8
   1394e:	46bd      	mov	sp, r7
   13950:	bd80      	pop	{r7, pc}
   13952:	bf00      	nop
   13954:	00006b35 	.word	0x00006b35

00013958 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   13958:	b480      	push	{r7}
   1395a:	b083      	sub	sp, #12
   1395c:	af00      	add	r7, sp, #0
   1395e:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	2201      	movs	r2, #1
   13964:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   13966:	687b      	ldr	r3, [r7, #4]
   13968:	781b      	ldrb	r3, [r3, #0]
   1396a:	b2db      	uxtb	r3, r3
   1396c:	2b00      	cmp	r3, #0
   1396e:	d001      	beq.n	13974 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   13970:	2301      	movs	r3, #1
   13972:	e000      	b.n	13976 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   13974:	2300      	movs	r3, #0
	}
	return ready;
	
}
   13976:	4618      	mov	r0, r3
   13978:	370c      	adds	r7, #12
   1397a:	46bd      	mov	sp, r7
   1397c:	bc80      	pop	{r7}
   1397e:	4770      	bx	lr

00013980 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   13980:	b580      	push	{r7, lr}
   13982:	b082      	sub	sp, #8
   13984:	af00      	add	r7, sp, #0
   13986:	6078      	str	r0, [r7, #4]
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	4618      	mov	r0, r3
   1398c:	4b06      	ldr	r3, [pc, #24]	; (139a8 <_ZN14Calendar_ClassC1Ev+0x28>)
   1398e:	4798      	blx	r3
   13990:	4a06      	ldr	r2, [pc, #24]	; (139ac <_ZN14Calendar_ClassC1Ev+0x2c>)
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   13996:	4a06      	ldr	r2, [pc, #24]	; (139b0 <_ZN14Calendar_ClassC1Ev+0x30>)
   13998:	687b      	ldr	r3, [r7, #4]
   1399a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	4618      	mov	r0, r3
   139a0:	3708      	adds	r7, #8
   139a2:	46bd      	mov	sp, r7
   139a4:	bd80      	pop	{r7, pc}
   139a6:	bf00      	nop
   139a8:	00013cc9 	.word	0x00013cc9
   139ac:	0001db9c 	.word	0x0001db9c
   139b0:	20003300 	.word	0x20003300

000139b4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   139b4:	b580      	push	{r7, lr}
   139b6:	b082      	sub	sp, #8
   139b8:	af00      	add	r7, sp, #0
   139ba:	6078      	str	r0, [r7, #4]
   139bc:	6039      	str	r1, [r7, #0]
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	4618      	mov	r0, r3
   139c2:	4b08      	ldr	r3, [pc, #32]	; (139e4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   139c4:	4798      	blx	r3
   139c6:	4a08      	ldr	r2, [pc, #32]	; (139e8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   139c8:	687b      	ldr	r3, [r7, #4]
   139ca:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   139cc:	687b      	ldr	r3, [r7, #4]
   139ce:	683a      	ldr	r2, [r7, #0]
   139d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   139d4:	4a05      	ldr	r2, [pc, #20]	; (139ec <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	4618      	mov	r0, r3
   139de:	3708      	adds	r7, #8
   139e0:	46bd      	mov	sp, r7
   139e2:	bd80      	pop	{r7, pc}
   139e4:	00013cc9 	.word	0x00013cc9
   139e8:	0001db9c 	.word	0x0001db9c
   139ec:	20003300 	.word	0x20003300

000139f0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   139f0:	b580      	push	{r7, lr}
   139f2:	b082      	sub	sp, #8
   139f4:	af00      	add	r7, sp, #0
   139f6:	6078      	str	r0, [r7, #4]
   139f8:	4a05      	ldr	r2, [pc, #20]	; (13a10 <_ZN14Calendar_ClassD1Ev+0x20>)
   139fa:	687b      	ldr	r3, [r7, #4]
   139fc:	601a      	str	r2, [r3, #0]
   139fe:	687b      	ldr	r3, [r7, #4]
   13a00:	4618      	mov	r0, r3
   13a02:	4b04      	ldr	r3, [pc, #16]	; (13a14 <_ZN14Calendar_ClassD1Ev+0x24>)
   13a04:	4798      	blx	r3
{
} //~Calendar_Class
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	4618      	mov	r0, r3
   13a0a:	3708      	adds	r7, #8
   13a0c:	46bd      	mov	sp, r7
   13a0e:	bd80      	pop	{r7, pc}
   13a10:	0001db9c 	.word	0x0001db9c
   13a14:	00013ce9 	.word	0x00013ce9

00013a18 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   13a18:	b580      	push	{r7, lr}
   13a1a:	b082      	sub	sp, #8
   13a1c:	af00      	add	r7, sp, #0
   13a1e:	6078      	str	r0, [r7, #4]
   13a20:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   13a22:	687b      	ldr	r3, [r7, #4]
   13a24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   13a28:	6839      	ldr	r1, [r7, #0]
   13a2a:	4618      	mov	r0, r3
   13a2c:	4b03      	ldr	r3, [pc, #12]	; (13a3c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   13a2e:	4798      	blx	r3
   13a30:	4603      	mov	r3, r0
}
   13a32:	4618      	mov	r0, r3
   13a34:	3708      	adds	r7, #8
   13a36:	46bd      	mov	sp, r7
   13a38:	bd80      	pop	{r7, pc}
   13a3a:	bf00      	nop
   13a3c:	00006225 	.word	0x00006225

00013a40 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   13a40:	b480      	push	{r7}
   13a42:	b083      	sub	sp, #12
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
   13a48:	460b      	mov	r3, r1
   13a4a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   13a4c:	887b      	ldrh	r3, [r7, #2]
   13a4e:	f003 0303 	and.w	r3, r3, #3
   13a52:	2b00      	cmp	r3, #0
   13a54:	d001      	beq.n	13a5a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   13a56:	2300      	movs	r3, #0
   13a58:	e000      	b.n	13a5c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   13a5a:	2301      	movs	r3, #1
	}
}
   13a5c:	4618      	mov	r0, r3
   13a5e:	370c      	adds	r7, #12
   13a60:	46bd      	mov	sp, r7
   13a62:	bc80      	pop	{r7}
   13a64:	4770      	bx	lr
	...

00013a68 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   13a68:	b580      	push	{r7, lr}
   13a6a:	b086      	sub	sp, #24
   13a6c:	af00      	add	r7, sp, #0
   13a6e:	6078      	str	r0, [r7, #4]
   13a70:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   13a72:	2300      	movs	r3, #0
   13a74:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   13a76:	2300      	movs	r3, #0
   13a78:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   13a7a:	683b      	ldr	r3, [r7, #0]
   13a7c:	88db      	ldrh	r3, [r3, #6]
   13a7e:	b2da      	uxtb	r2, r3
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   13a86:	699b      	ldr	r3, [r3, #24]
   13a88:	b2db      	uxtb	r3, r3
   13a8a:	1ad3      	subs	r3, r2, r3
   13a8c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   13a8e:	683b      	ldr	r3, [r7, #0]
   13a90:	795b      	ldrb	r3, [r3, #5]
   13a92:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   13a94:	683b      	ldr	r3, [r7, #0]
   13a96:	791b      	ldrb	r3, [r3, #4]
   13a98:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   13a9a:	683b      	ldr	r3, [r7, #0]
   13a9c:	789b      	ldrb	r3, [r3, #2]
   13a9e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   13aa0:	683b      	ldr	r3, [r7, #0]
   13aa2:	785b      	ldrb	r3, [r3, #1]
   13aa4:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   13aa6:	683b      	ldr	r3, [r7, #0]
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   13aac:	2300      	movs	r3, #0
   13aae:	613b      	str	r3, [r7, #16]
   13ab0:	7bfa      	ldrb	r2, [r7, #15]
   13ab2:	693b      	ldr	r3, [r7, #16]
   13ab4:	429a      	cmp	r2, r3
   13ab6:	d91e      	bls.n	13af6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   13ab8:	687b      	ldr	r3, [r7, #4]
   13aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   13abe:	699b      	ldr	r3, [r3, #24]
   13ac0:	b29a      	uxth	r2, r3
   13ac2:	693b      	ldr	r3, [r7, #16]
   13ac4:	b29b      	uxth	r3, r3
   13ac6:	4413      	add	r3, r2
   13ac8:	b29b      	uxth	r3, r3
   13aca:	4619      	mov	r1, r3
   13acc:	6878      	ldr	r0, [r7, #4]
   13ace:	4b27      	ldr	r3, [pc, #156]	; (13b6c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   13ad0:	4798      	blx	r3
   13ad2:	4603      	mov	r3, r0
   13ad4:	2b00      	cmp	r3, #0
   13ad6:	d006      	beq.n	13ae6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   13ad8:	697b      	ldr	r3, [r7, #20]
   13ada:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   13ade:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   13ae2:	617b      	str	r3, [r7, #20]
   13ae4:	e003      	b.n	13aee <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   13ae6:	697a      	ldr	r2, [r7, #20]
   13ae8:	4b21      	ldr	r3, [pc, #132]	; (13b70 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   13aea:	4413      	add	r3, r2
   13aec:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   13aee:	693b      	ldr	r3, [r7, #16]
   13af0:	3301      	adds	r3, #1
   13af2:	613b      	str	r3, [r7, #16]
   13af4:	e7dc      	b.n	13ab0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   13af6:	2301      	movs	r3, #1
   13af8:	613b      	str	r3, [r7, #16]
   13afa:	7bba      	ldrb	r2, [r7, #14]
   13afc:	693b      	ldr	r3, [r7, #16]
   13afe:	429a      	cmp	r2, r3
   13b00:	d910      	bls.n	13b24 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   13b02:	683b      	ldr	r3, [r7, #0]
   13b04:	88db      	ldrh	r3, [r3, #6]
   13b06:	4619      	mov	r1, r3
   13b08:	693b      	ldr	r3, [r7, #16]
   13b0a:	b2db      	uxtb	r3, r3
   13b0c:	461a      	mov	r2, r3
   13b0e:	6878      	ldr	r0, [r7, #4]
   13b10:	4b18      	ldr	r3, [pc, #96]	; (13b74 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   13b12:	4798      	blx	r3
   13b14:	4602      	mov	r2, r0
   13b16:	697b      	ldr	r3, [r7, #20]
   13b18:	4413      	add	r3, r2
   13b1a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   13b1c:	693b      	ldr	r3, [r7, #16]
   13b1e:	3301      	adds	r3, #1
   13b20:	613b      	str	r3, [r7, #16]
   13b22:	e7ea      	b.n	13afa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   13b24:	7b7b      	ldrb	r3, [r7, #13]
   13b26:	3b01      	subs	r3, #1
   13b28:	4a13      	ldr	r2, [pc, #76]	; (13b78 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   13b2a:	fb02 f303 	mul.w	r3, r2, r3
   13b2e:	461a      	mov	r2, r3
   13b30:	697b      	ldr	r3, [r7, #20]
   13b32:	4413      	add	r3, r2
   13b34:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   13b36:	7b3b      	ldrb	r3, [r7, #12]
   13b38:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13b3c:	fb02 f303 	mul.w	r3, r2, r3
   13b40:	461a      	mov	r2, r3
   13b42:	697b      	ldr	r3, [r7, #20]
   13b44:	4413      	add	r3, r2
   13b46:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   13b48:	7afa      	ldrb	r2, [r7, #11]
   13b4a:	4613      	mov	r3, r2
   13b4c:	011b      	lsls	r3, r3, #4
   13b4e:	1a9b      	subs	r3, r3, r2
   13b50:	009b      	lsls	r3, r3, #2
   13b52:	461a      	mov	r2, r3
   13b54:	697b      	ldr	r3, [r7, #20]
   13b56:	4413      	add	r3, r2
   13b58:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   13b5a:	7abb      	ldrb	r3, [r7, #10]
   13b5c:	697a      	ldr	r2, [r7, #20]
   13b5e:	4413      	add	r3, r2
   13b60:	617b      	str	r3, [r7, #20]

	return tmp;
   13b62:	697b      	ldr	r3, [r7, #20]
}
   13b64:	4618      	mov	r0, r3
   13b66:	3718      	adds	r7, #24
   13b68:	46bd      	mov	sp, r7
   13b6a:	bd80      	pop	{r7, pc}
   13b6c:	00013a41 	.word	0x00013a41
   13b70:	01e13380 	.word	0x01e13380
   13b74:	00013b7d 	.word	0x00013b7d
   13b78:	00015180 	.word	0x00015180

00013b7c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   13b7c:	b580      	push	{r7, lr}
   13b7e:	b086      	sub	sp, #24
   13b80:	af00      	add	r7, sp, #0
   13b82:	60f8      	str	r0, [r7, #12]
   13b84:	60b9      	str	r1, [r7, #8]
   13b86:	4613      	mov	r3, r2
   13b88:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   13b8a:	2300      	movs	r3, #0
   13b8c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   13b8e:	68bb      	ldr	r3, [r7, #8]
   13b90:	b29b      	uxth	r3, r3
   13b92:	4619      	mov	r1, r3
   13b94:	68f8      	ldr	r0, [r7, #12]
   13b96:	4b2f      	ldr	r3, [pc, #188]	; (13c54 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   13b98:	4798      	blx	r3
   13b9a:	4603      	mov	r3, r0
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d028      	beq.n	13bf2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   13ba0:	79fb      	ldrb	r3, [r7, #7]
   13ba2:	3b01      	subs	r3, #1
   13ba4:	2b0b      	cmp	r3, #11
   13ba6:	d84c      	bhi.n	13c42 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   13ba8:	a201      	add	r2, pc, #4	; (adr r2, 13bb0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   13baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13bae:	bf00      	nop
   13bb0:	00013be1 	.word	0x00013be1
   13bb4:	00013be7 	.word	0x00013be7
   13bb8:	00013be1 	.word	0x00013be1
   13bbc:	00013bed 	.word	0x00013bed
   13bc0:	00013be1 	.word	0x00013be1
   13bc4:	00013bed 	.word	0x00013bed
   13bc8:	00013be1 	.word	0x00013be1
   13bcc:	00013be1 	.word	0x00013be1
   13bd0:	00013bed 	.word	0x00013bed
   13bd4:	00013be1 	.word	0x00013be1
   13bd8:	00013bed 	.word	0x00013bed
   13bdc:	00013be1 	.word	0x00013be1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13be0:	4b1d      	ldr	r3, [pc, #116]	; (13c58 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13be2:	617b      	str	r3, [r7, #20]
			break;
   13be4:	e030      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   13be6:	4b1d      	ldr	r3, [pc, #116]	; (13c5c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   13be8:	617b      	str	r3, [r7, #20]
			break;
   13bea:	e02d      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13bec:	4b1c      	ldr	r3, [pc, #112]	; (13c60 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13bee:	617b      	str	r3, [r7, #20]
			break;
   13bf0:	e02a      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   13bf2:	79fb      	ldrb	r3, [r7, #7]
   13bf4:	3b01      	subs	r3, #1
   13bf6:	2b0b      	cmp	r3, #11
   13bf8:	d825      	bhi.n	13c46 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   13bfa:	a201      	add	r2, pc, #4	; (adr r2, 13c00 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   13bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13c00:	00013c31 	.word	0x00013c31
   13c04:	00013c37 	.word	0x00013c37
   13c08:	00013c31 	.word	0x00013c31
   13c0c:	00013c3d 	.word	0x00013c3d
   13c10:	00013c31 	.word	0x00013c31
   13c14:	00013c3d 	.word	0x00013c3d
   13c18:	00013c31 	.word	0x00013c31
   13c1c:	00013c31 	.word	0x00013c31
   13c20:	00013c3d 	.word	0x00013c3d
   13c24:	00013c31 	.word	0x00013c31
   13c28:	00013c3d 	.word	0x00013c3d
   13c2c:	00013c31 	.word	0x00013c31
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13c30:	4b09      	ldr	r3, [pc, #36]	; (13c58 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13c32:	617b      	str	r3, [r7, #20]
			break;
   13c34:	e008      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   13c36:	4b0b      	ldr	r3, [pc, #44]	; (13c64 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   13c38:	617b      	str	r3, [r7, #20]
			break;
   13c3a:	e005      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13c3c:	4b08      	ldr	r3, [pc, #32]	; (13c60 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13c3e:	617b      	str	r3, [r7, #20]
			break;
   13c40:	e002      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   13c42:	bf00      	nop
   13c44:	e000      	b.n	13c48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   13c46:	bf00      	nop
		}
	}

	return sec_in_month;
   13c48:	697b      	ldr	r3, [r7, #20]
}
   13c4a:	4618      	mov	r0, r3
   13c4c:	3718      	adds	r7, #24
   13c4e:	46bd      	mov	sp, r7
   13c50:	bd80      	pop	{r7, pc}
   13c52:	bf00      	nop
   13c54:	00013a41 	.word	0x00013a41
   13c58:	0028de80 	.word	0x0028de80
   13c5c:	00263b80 	.word	0x00263b80
   13c60:	00278d00 	.word	0x00278d00
   13c64:	0024ea00 	.word	0x0024ea00

00013c68 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   13c68:	b580      	push	{r7, lr}
   13c6a:	b082      	sub	sp, #8
   13c6c:	af00      	add	r7, sp, #0
   13c6e:	6078      	str	r0, [r7, #4]
   13c70:	6039      	str	r1, [r7, #0]
   13c72:	687b      	ldr	r3, [r7, #4]
   13c74:	2b01      	cmp	r3, #1
   13c76:	d10d      	bne.n	13c94 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13c78:	683b      	ldr	r3, [r7, #0]
   13c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c7e:	4293      	cmp	r3, r2
   13c80:	d108      	bne.n	13c94 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13c82:	4906      	ldr	r1, [pc, #24]	; (13c9c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13c84:	4806      	ldr	r0, [pc, #24]	; (13ca0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13c86:	4b07      	ldr	r3, [pc, #28]	; (13ca4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13c88:	4798      	blx	r3
   13c8a:	4a07      	ldr	r2, [pc, #28]	; (13ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13c8c:	4907      	ldr	r1, [pc, #28]	; (13cac <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13c8e:	4804      	ldr	r0, [pc, #16]	; (13ca0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13c90:	4b07      	ldr	r3, [pc, #28]	; (13cb0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13c92:	4798      	blx	r3
   13c94:	bf00      	nop
   13c96:	3708      	adds	r7, #8
   13c98:	46bd      	mov	sp, r7
   13c9a:	bd80      	pop	{r7, pc}
   13c9c:	2000d890 	.word	0x2000d890
   13ca0:	20003308 	.word	0x20003308
   13ca4:	000139b5 	.word	0x000139b5
   13ca8:	20000000 	.word	0x20000000
   13cac:	000139f1 	.word	0x000139f1
   13cb0:	0001a44d 	.word	0x0001a44d

00013cb4 <_GLOBAL__sub_I_ptrCalendarClass>:
   13cb4:	b580      	push	{r7, lr}
   13cb6:	af00      	add	r7, sp, #0
   13cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13cbc:	2001      	movs	r0, #1
   13cbe:	4b01      	ldr	r3, [pc, #4]	; (13cc4 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   13cc0:	4798      	blx	r3
   13cc2:	bd80      	pop	{r7, pc}
   13cc4:	00013c69 	.word	0x00013c69

00013cc8 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   13cc8:	b480      	push	{r7}
   13cca:	b083      	sub	sp, #12
   13ccc:	af00      	add	r7, sp, #0
   13cce:	6078      	str	r0, [r7, #4]
   13cd0:	4a04      	ldr	r2, [pc, #16]	; (13ce4 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	601a      	str	r2, [r3, #0]
{
} //~D
   13cd6:	687b      	ldr	r3, [r7, #4]
   13cd8:	4618      	mov	r0, r3
   13cda:	370c      	adds	r7, #12
   13cdc:	46bd      	mov	sp, r7
   13cde:	bc80      	pop	{r7}
   13ce0:	4770      	bx	lr
   13ce2:	bf00      	nop
   13ce4:	0001dbac 	.word	0x0001dbac

00013ce8 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   13ce8:	b480      	push	{r7}
   13cea:	b083      	sub	sp, #12
   13cec:	af00      	add	r7, sp, #0
   13cee:	6078      	str	r0, [r7, #4]
   13cf0:	4a04      	ldr	r2, [pc, #16]	; (13d04 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   13cf2:	687b      	ldr	r3, [r7, #4]
   13cf4:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	4618      	mov	r0, r3
   13cfa:	370c      	adds	r7, #12
   13cfc:	46bd      	mov	sp, r7
   13cfe:	bc80      	pop	{r7}
   13d00:	4770      	bx	lr
   13d02:	bf00      	nop
   13d04:	0001dbac 	.word	0x0001dbac

00013d08 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   13d08:	b480      	push	{r7}
   13d0a:	b083      	sub	sp, #12
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	6078      	str	r0, [r7, #4]
   13d10:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   13d12:	687b      	ldr	r3, [r7, #4]
   13d14:	683a      	ldr	r2, [r7, #0]
   13d16:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   13d18:	687b      	ldr	r3, [r7, #4]
   13d1a:	68db      	ldr	r3, [r3, #12]
   13d1c:	2200      	movs	r2, #0
   13d1e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   13d20:	4a06      	ldr	r2, [pc, #24]	; (13d3c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13d26:	687b      	ldr	r3, [r7, #4]
   13d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13d2c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   13d2e:	687b      	ldr	r3, [r7, #4]
   13d30:	4618      	mov	r0, r3
   13d32:	370c      	adds	r7, #12
   13d34:	46bd      	mov	sp, r7
   13d36:	bc80      	pop	{r7}
   13d38:	4770      	bx	lr
   13d3a:	bf00      	nop
   13d3c:	20003498 	.word	0x20003498

00013d40 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   13d40:	b480      	push	{r7}
   13d42:	b083      	sub	sp, #12
   13d44:	af00      	add	r7, sp, #0
   13d46:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   13d48:	687b      	ldr	r3, [r7, #4]
   13d4a:	2200      	movs	r2, #0
   13d4c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   13d4e:	687b      	ldr	r3, [r7, #4]
   13d50:	4618      	mov	r0, r3
   13d52:	370c      	adds	r7, #12
   13d54:	46bd      	mov	sp, r7
   13d56:	bc80      	pop	{r7}
   13d58:	4770      	bx	lr
	...

00013d5c <_ZL9InitArrayv>:


static void InitArray(){
   13d5c:	b480      	push	{r7}
   13d5e:	b083      	sub	sp, #12
   13d60:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   13d62:	2301      	movs	r3, #1
   13d64:	607b      	str	r3, [r7, #4]
   13d66:	687b      	ldr	r3, [r7, #4]
   13d68:	2b1f      	cmp	r3, #31
   13d6a:	dc34      	bgt.n	13dd6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   13d6c:	491e      	ldr	r1, [pc, #120]	; (13de8 <_ZL9InitArrayv+0x8c>)
   13d6e:	687a      	ldr	r2, [r7, #4]
   13d70:	4613      	mov	r3, r2
   13d72:	009b      	lsls	r3, r3, #2
   13d74:	4413      	add	r3, r2
   13d76:	009b      	lsls	r3, r3, #2
   13d78:	440b      	add	r3, r1
   13d7a:	2200      	movs	r2, #0
   13d7c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   13d7e:	491a      	ldr	r1, [pc, #104]	; (13de8 <_ZL9InitArrayv+0x8c>)
   13d80:	687a      	ldr	r2, [r7, #4]
   13d82:	4613      	mov	r3, r2
   13d84:	009b      	lsls	r3, r3, #2
   13d86:	4413      	add	r3, r2
   13d88:	009b      	lsls	r3, r3, #2
   13d8a:	440b      	add	r3, r1
   13d8c:	330c      	adds	r3, #12
   13d8e:	2200      	movs	r2, #0
   13d90:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   13d92:	687b      	ldr	r3, [r7, #4]
   13d94:	1e5a      	subs	r2, r3, #1
   13d96:	6879      	ldr	r1, [r7, #4]
   13d98:	460b      	mov	r3, r1
   13d9a:	009b      	lsls	r3, r3, #2
   13d9c:	440b      	add	r3, r1
   13d9e:	009b      	lsls	r3, r3, #2
   13da0:	4911      	ldr	r1, [pc, #68]	; (13de8 <_ZL9InitArrayv+0x8c>)
   13da2:	4419      	add	r1, r3
   13da4:	4810      	ldr	r0, [pc, #64]	; (13de8 <_ZL9InitArrayv+0x8c>)
   13da6:	4613      	mov	r3, r2
   13da8:	009b      	lsls	r3, r3, #2
   13daa:	4413      	add	r3, r2
   13dac:	009b      	lsls	r3, r3, #2
   13dae:	4403      	add	r3, r0
   13db0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
   13db2:	4a0e      	ldr	r2, [pc, #56]	; (13dec <_ZL9InitArrayv+0x90>)
   13db4:	687b      	ldr	r3, [r7, #4]
   13db6:	2100      	movs	r1, #0
   13db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
   13dbc:	687b      	ldr	r3, [r7, #4]
   13dbe:	3b01      	subs	r3, #1
   13dc0:	687a      	ldr	r2, [r7, #4]
   13dc2:	0092      	lsls	r2, r2, #2
   13dc4:	4909      	ldr	r1, [pc, #36]	; (13dec <_ZL9InitArrayv+0x90>)
   13dc6:	440a      	add	r2, r1
   13dc8:	4908      	ldr	r1, [pc, #32]	; (13dec <_ZL9InitArrayv+0x90>)
   13dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
   13dce:	687b      	ldr	r3, [r7, #4]
   13dd0:	3301      	adds	r3, #1
   13dd2:	607b      	str	r3, [r7, #4]
   13dd4:	e7c7      	b.n	13d66 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
   13dd6:	4b06      	ldr	r3, [pc, #24]	; (13df0 <_ZL9InitArrayv+0x94>)
   13dd8:	2201      	movs	r2, #1
   13dda:	701a      	strb	r2, [r3, #0]
		
}
   13ddc:	bf00      	nop
   13dde:	370c      	adds	r7, #12
   13de0:	46bd      	mov	sp, r7
   13de2:	bc80      	pop	{r7}
   13de4:	4770      	bx	lr
   13de6:	bf00      	nop
   13de8:	2000349c 	.word	0x2000349c
   13dec:	2000371c 	.word	0x2000371c
   13df0:	2000379c 	.word	0x2000379c

00013df4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   13df4:	b580      	push	{r7, lr}
   13df6:	b082      	sub	sp, #8
   13df8:	af00      	add	r7, sp, #0
   13dfa:	6078      	str	r0, [r7, #4]
	ticks=0;
   13dfc:	687b      	ldr	r3, [r7, #4]
   13dfe:	2200      	movs	r2, #0
   13e00:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   13e02:	4b0d      	ldr	r3, [pc, #52]	; (13e38 <_ZN11Timer_Class4InitEv+0x44>)
   13e04:	781b      	ldrb	r3, [r3, #0]
   13e06:	f083 0301 	eor.w	r3, r3, #1
   13e0a:	b2db      	uxtb	r3, r3
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d001      	beq.n	13e14 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   13e10:	4b0a      	ldr	r3, [pc, #40]	; (13e3c <_ZN11Timer_Class4InitEv+0x48>)
   13e12:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
   13e14:	6878      	ldr	r0, [r7, #4]
   13e16:	4b0a      	ldr	r3, [pc, #40]	; (13e40 <_ZN11Timer_Class4InitEv+0x4c>)
   13e18:	4798      	blx	r3
   13e1a:	4603      	mov	r3, r0
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	bf0c      	ite	eq
   13e20:	2301      	moveq	r3, #1
   13e22:	2300      	movne	r3, #0
   13e24:	b2da      	uxtb	r2, r3
   13e26:	687b      	ldr	r3, [r7, #4]
   13e28:	709a      	strb	r2, [r3, #2]
	return isOK;
   13e2a:	687b      	ldr	r3, [r7, #4]
   13e2c:	789b      	ldrb	r3, [r3, #2]
   13e2e:	b2db      	uxtb	r3, r3
}
   13e30:	4618      	mov	r0, r3
   13e32:	3708      	adds	r7, #8
   13e34:	46bd      	mov	sp, r7
   13e36:	bd80      	pop	{r7, pc}
   13e38:	2000379c 	.word	0x2000379c
   13e3c:	00013d5d 	.word	0x00013d5d
   13e40:	00013e45 	.word	0x00013e45

00013e44 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
   13e44:	b580      	push	{r7, lr}
   13e46:	b084      	sub	sp, #16
   13e48:	af00      	add	r7, sp, #0
   13e4a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   13e4c:	687b      	ldr	r3, [r7, #4]
   13e4e:	68db      	ldr	r3, [r3, #12]
   13e50:	4618      	mov	r0, r3
   13e52:	4b04      	ldr	r3, [pc, #16]	; (13e64 <_ZN11Timer_Class5StartEv+0x20>)
   13e54:	4798      	blx	r3
   13e56:	60f8      	str	r0, [r7, #12]
	return status;
   13e58:	68fb      	ldr	r3, [r7, #12]
	
}
   13e5a:	4618      	mov	r0, r3
   13e5c:	3710      	adds	r7, #16
   13e5e:	46bd      	mov	sp, r7
   13e60:	bd80      	pop	{r7, pc}
   13e62:	bf00      	nop
   13e64:	00006d75 	.word	0x00006d75

00013e68 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
   13e68:	b580      	push	{r7, lr}
   13e6a:	b084      	sub	sp, #16
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	68db      	ldr	r3, [r3, #12]
   13e74:	4618      	mov	r0, r3
   13e76:	4b05      	ldr	r3, [pc, #20]	; (13e8c <_ZN11Timer_Class4StopEv+0x24>)
   13e78:	4798      	blx	r3
   13e7a:	60f8      	str	r0, [r7, #12]
	timeout=0;
   13e7c:	687b      	ldr	r3, [r7, #4]
   13e7e:	2200      	movs	r2, #0
   13e80:	705a      	strb	r2, [r3, #1]
	return status;
   13e82:	68fb      	ldr	r3, [r7, #12]
}
   13e84:	4618      	mov	r0, r3
   13e86:	3710      	adds	r7, #16
   13e88:	46bd      	mov	sp, r7
   13e8a:	bd80      	pop	{r7, pc}
   13e8c:	00006ddd 	.word	0x00006ddd

00013e90 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13e90:	b580      	push	{r7, lr}
   13e92:	b086      	sub	sp, #24
   13e94:	af00      	add	r7, sp, #0
   13e96:	60f8      	str	r0, [r7, #12]
   13e98:	60b9      	str	r1, [r7, #8]
   13e9a:	607a      	str	r2, [r7, #4]
   13e9c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   13e9e:	68b9      	ldr	r1, [r7, #8]
   13ea0:	68f8      	ldr	r0, [r7, #12]
   13ea2:	4b0e      	ldr	r3, [pc, #56]	; (13edc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   13ea4:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   13ea6:	68fb      	ldr	r3, [r7, #12]
   13ea8:	699b      	ldr	r3, [r3, #24]
   13eaa:	687a      	ldr	r2, [r7, #4]
   13eac:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   13eae:	68fb      	ldr	r3, [r7, #12]
   13eb0:	699b      	ldr	r3, [r3, #24]
   13eb2:	68ba      	ldr	r2, [r7, #8]
   13eb4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   13eb6:	68fb      	ldr	r3, [r7, #12]
   13eb8:	699b      	ldr	r3, [r3, #24]
   13eba:	78fa      	ldrb	r2, [r7, #3]
   13ebc:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   13ebe:	68fb      	ldr	r3, [r7, #12]
   13ec0:	68da      	ldr	r2, [r3, #12]
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	699b      	ldr	r3, [r3, #24]
   13ec6:	4619      	mov	r1, r3
   13ec8:	4610      	mov	r0, r2
   13eca:	4b05      	ldr	r3, [pc, #20]	; (13ee0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   13ecc:	4798      	blx	r3
   13ece:	6178      	str	r0, [r7, #20]
	
	return status;
   13ed0:	697b      	ldr	r3, [r7, #20]
}
   13ed2:	4618      	mov	r0, r3
   13ed4:	3718      	adds	r7, #24
   13ed6:	46bd      	mov	sp, r7
   13ed8:	bd80      	pop	{r7, pc}
   13eda:	bf00      	nop
   13edc:	000140b1 	.word	0x000140b1
   13ee0:	00006e49 	.word	0x00006e49

00013ee4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   13ee4:	b580      	push	{r7, lr}
   13ee6:	b086      	sub	sp, #24
   13ee8:	af00      	add	r7, sp, #0
   13eea:	60f8      	str	r0, [r7, #12]
   13eec:	60b9      	str	r1, [r7, #8]
   13eee:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   13ef0:	687a      	ldr	r2, [r7, #4]
   13ef2:	68b9      	ldr	r1, [r7, #8]
   13ef4:	68f8      	ldr	r0, [r7, #12]
   13ef6:	4b0c      	ldr	r3, [pc, #48]	; (13f28 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   13ef8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   13efa:	68fb      	ldr	r3, [r7, #12]
   13efc:	68db      	ldr	r3, [r3, #12]
   13efe:	681b      	ldr	r3, [r3, #0]
   13f00:	699b      	ldr	r3, [r3, #24]
   13f02:	68fa      	ldr	r2, [r7, #12]
   13f04:	68d2      	ldr	r2, [r2, #12]
   13f06:	3204      	adds	r2, #4
   13f08:	4610      	mov	r0, r2
   13f0a:	4798      	blx	r3
   13f0c:	4603      	mov	r3, r0
   13f0e:	2b00      	cmp	r3, #0
   13f10:	d105      	bne.n	13f1e <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   13f12:	68fb      	ldr	r3, [r7, #12]
   13f14:	68db      	ldr	r3, [r3, #12]
   13f16:	4618      	mov	r0, r3
   13f18:	4b04      	ldr	r3, [pc, #16]	; (13f2c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   13f1a:	4798      	blx	r3
   13f1c:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   13f1e:	697b      	ldr	r3, [r7, #20]
}
   13f20:	4618      	mov	r0, r3
   13f22:	3718      	adds	r7, #24
   13f24:	46bd      	mov	sp, r7
   13f26:	bd80      	pop	{r7, pc}
   13f28:	00013f31 	.word	0x00013f31
   13f2c:	00006d75 	.word	0x00006d75

00013f30 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   13f30:	b590      	push	{r4, r7, lr}
   13f32:	b087      	sub	sp, #28
   13f34:	af00      	add	r7, sp, #0
   13f36:	60f8      	str	r0, [r7, #12]
   13f38:	60b9      	str	r1, [r7, #8]
   13f3a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   13f3c:	2301      	movs	r3, #1
   13f3e:	687a      	ldr	r2, [r7, #4]
   13f40:	68b9      	ldr	r1, [r7, #8]
   13f42:	68f8      	ldr	r0, [r7, #12]
   13f44:	4c03      	ldr	r4, [pc, #12]	; (13f54 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   13f46:	47a0      	blx	r4
   13f48:	6178      	str	r0, [r7, #20]
		return status;
   13f4a:	697b      	ldr	r3, [r7, #20]
}
   13f4c:	4618      	mov	r0, r3
   13f4e:	371c      	adds	r7, #28
   13f50:	46bd      	mov	sp, r7
   13f52:	bd90      	pop	{r4, r7, pc}
   13f54:	00013e91 	.word	0x00013e91

00013f58 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
   13f58:	b580      	push	{r7, lr}
   13f5a:	b082      	sub	sp, #8
   13f5c:	af00      	add	r7, sp, #0
   13f5e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	68da      	ldr	r2, [r3, #12]
   13f64:	687b      	ldr	r3, [r7, #4]
   13f66:	699b      	ldr	r3, [r3, #24]
   13f68:	4619      	mov	r1, r3
   13f6a:	4610      	mov	r0, r2
   13f6c:	4b04      	ldr	r3, [pc, #16]	; (13f80 <_ZN11Timer_Class11Remove_taskEv+0x28>)
   13f6e:	4798      	blx	r3
	task->cb=NULL;
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	699b      	ldr	r3, [r3, #24]
   13f74:	2200      	movs	r2, #0
   13f76:	60da      	str	r2, [r3, #12]
}
   13f78:	bf00      	nop
   13f7a:	3708      	adds	r7, #8
   13f7c:	46bd      	mov	sp, r7
   13f7e:	bd80      	pop	{r7, pc}
   13f80:	00006f4d 	.word	0x00006f4d

00013f84 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
   13f84:	b580      	push	{r7, lr}
   13f86:	b082      	sub	sp, #8
   13f88:	af00      	add	r7, sp, #0
   13f8a:	6078      	str	r0, [r7, #4]
   13f8c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   13f8e:	6839      	ldr	r1, [r7, #0]
   13f90:	6878      	ldr	r0, [r7, #4]
   13f92:	4b0f      	ldr	r3, [pc, #60]	; (13fd0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   13f94:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	68db      	ldr	r3, [r3, #12]
   13f9a:	f103 0218 	add.w	r2, r3, #24
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	699b      	ldr	r3, [r3, #24]
   13fa2:	4619      	mov	r1, r3
   13fa4:	4610      	mov	r0, r2
   13fa6:	4b0b      	ldr	r3, [pc, #44]	; (13fd4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   13fa8:	4798      	blx	r3
   13faa:	4603      	mov	r3, r0
   13fac:	2b00      	cmp	r3, #0
   13fae:	d007      	beq.n	13fc0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	68da      	ldr	r2, [r3, #12]
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	699b      	ldr	r3, [r3, #24]
   13fb8:	4619      	mov	r1, r3
   13fba:	4610      	mov	r0, r2
   13fbc:	4b06      	ldr	r3, [pc, #24]	; (13fd8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   13fbe:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   13fc0:	687b      	ldr	r3, [r7, #4]
   13fc2:	699b      	ldr	r3, [r3, #24]
   13fc4:	2200      	movs	r2, #0
   13fc6:	60da      	str	r2, [r3, #12]
}
   13fc8:	bf00      	nop
   13fca:	3708      	adds	r7, #8
   13fcc:	46bd      	mov	sp, r7
   13fce:	bd80      	pop	{r7, pc}
   13fd0:	00014131 	.word	0x00014131
   13fd4:	00007b35 	.word	0x00007b35
   13fd8:	00006f4d 	.word	0x00006f4d

00013fdc <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   13fdc:	b480      	push	{r7}
   13fde:	b083      	sub	sp, #12
   13fe0:	af00      	add	r7, sp, #0
   13fe2:	6078      	str	r0, [r7, #4]
	
		return ticks;
   13fe4:	687b      	ldr	r3, [r7, #4]
   13fe6:	689b      	ldr	r3, [r3, #8]
}
   13fe8:	4618      	mov	r0, r3
   13fea:	370c      	adds	r7, #12
   13fec:	46bd      	mov	sp, r7
   13fee:	bc80      	pop	{r7}
   13ff0:	4770      	bx	lr
	...

00013ff4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   13ff4:	b590      	push	{r4, r7, lr}
   13ff6:	b087      	sub	sp, #28
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	60f8      	str	r0, [r7, #12]
   13ffc:	60b9      	str	r1, [r7, #8]
   13ffe:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   14000:	2300      	movs	r3, #0
   14002:	687a      	ldr	r2, [r7, #4]
   14004:	68b9      	ldr	r1, [r7, #8]
   14006:	68f8      	ldr	r0, [r7, #12]
   14008:	4c0c      	ldr	r4, [pc, #48]	; (1403c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   1400a:	47a0      	blx	r4
   1400c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   1400e:	68fb      	ldr	r3, [r7, #12]
   14010:	68db      	ldr	r3, [r3, #12]
   14012:	681b      	ldr	r3, [r3, #0]
   14014:	699b      	ldr	r3, [r3, #24]
   14016:	68fa      	ldr	r2, [r7, #12]
   14018:	68d2      	ldr	r2, [r2, #12]
   1401a:	3204      	adds	r2, #4
   1401c:	4610      	mov	r0, r2
   1401e:	4798      	blx	r3
   14020:	4603      	mov	r3, r0
   14022:	2b00      	cmp	r3, #0
   14024:	d105      	bne.n	14032 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	68db      	ldr	r3, [r3, #12]
   1402a:	4618      	mov	r0, r3
   1402c:	4b04      	ldr	r3, [pc, #16]	; (14040 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   1402e:	4798      	blx	r3
   14030:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   14032:	697b      	ldr	r3, [r7, #20]
}
   14034:	4618      	mov	r0, r3
   14036:	371c      	adds	r7, #28
   14038:	46bd      	mov	sp, r7
   1403a:	bd90      	pop	{r4, r7, pc}
   1403c:	00013e91 	.word	0x00013e91
   14040:	00006d75 	.word	0x00006d75

00014044 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   14044:	b480      	push	{r7}
   14046:	b085      	sub	sp, #20
   14048:	af00      	add	r7, sp, #0
   1404a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1404c:	2300      	movs	r3, #0
   1404e:	73fb      	strb	r3, [r7, #15]
   14050:	7bfb      	ldrb	r3, [r7, #15]
   14052:	2b1f      	cmp	r3, #31
   14054:	dc23      	bgt.n	1409e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   14056:	687b      	ldr	r3, [r7, #4]
   14058:	7f1a      	ldrb	r2, [r3, #28]
   1405a:	7bfb      	ldrb	r3, [r7, #15]
   1405c:	4413      	add	r3, r2
   1405e:	b2db      	uxtb	r3, r3
   14060:	f003 031f 	and.w	r3, r3, #31
   14064:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   14066:	7bba      	ldrb	r2, [r7, #14]
   14068:	4910      	ldr	r1, [pc, #64]	; (140ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1406a:	4613      	mov	r3, r2
   1406c:	009b      	lsls	r3, r3, #2
   1406e:	4413      	add	r3, r2
   14070:	009b      	lsls	r3, r3, #2
   14072:	440b      	add	r3, r1
   14074:	330c      	adds	r3, #12
   14076:	681b      	ldr	r3, [r3, #0]
   14078:	2b00      	cmp	r3, #0
   1407a:	d10c      	bne.n	14096 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   1407c:	7bba      	ldrb	r2, [r7, #14]
   1407e:	4613      	mov	r3, r2
   14080:	009b      	lsls	r3, r3, #2
   14082:	4413      	add	r3, r2
   14084:	009b      	lsls	r3, r3, #2
   14086:	4a09      	ldr	r2, [pc, #36]	; (140ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   14088:	441a      	add	r2, r3
   1408a:	687b      	ldr	r3, [r7, #4]
   1408c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   1408e:	687b      	ldr	r3, [r7, #4]
   14090:	7bba      	ldrb	r2, [r7, #14]
   14092:	771a      	strb	r2, [r3, #28]
			return;
   14094:	e006      	b.n	140a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   14096:	7bfb      	ldrb	r3, [r7, #15]
   14098:	3301      	adds	r3, #1
   1409a:	73fb      	strb	r3, [r7, #15]
   1409c:	e7d8      	b.n	14050 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   1409e:	687b      	ldr	r3, [r7, #4]
   140a0:	4a02      	ldr	r2, [pc, #8]	; (140ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   140a2:	619a      	str	r2, [r3, #24]

}
   140a4:	3714      	adds	r7, #20
   140a6:	46bd      	mov	sp, r7
   140a8:	bc80      	pop	{r7}
   140aa:	4770      	bx	lr
   140ac:	2000349c 	.word	0x2000349c

000140b0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   140b0:	b580      	push	{r7, lr}
   140b2:	b084      	sub	sp, #16
   140b4:	af00      	add	r7, sp, #0
   140b6:	6078      	str	r0, [r7, #4]
   140b8:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   140ba:	2300      	movs	r3, #0
   140bc:	73fb      	strb	r3, [r7, #15]
   140be:	7bfb      	ldrb	r3, [r7, #15]
   140c0:	2b1f      	cmp	r3, #31
   140c2:	dc28      	bgt.n	14116 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   140c4:	687b      	ldr	r3, [r7, #4]
   140c6:	7f1a      	ldrb	r2, [r3, #28]
   140c8:	7bfb      	ldrb	r3, [r7, #15]
   140ca:	4413      	add	r3, r2
   140cc:	b2db      	uxtb	r3, r3
   140ce:	f003 031f 	and.w	r3, r3, #31
   140d2:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   140d4:	7bba      	ldrb	r2, [r7, #14]
   140d6:	4913      	ldr	r1, [pc, #76]	; (14124 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   140d8:	4613      	mov	r3, r2
   140da:	009b      	lsls	r3, r3, #2
   140dc:	4413      	add	r3, r2
   140de:	009b      	lsls	r3, r3, #2
   140e0:	440b      	add	r3, r1
   140e2:	330c      	adds	r3, #12
   140e4:	681a      	ldr	r2, [r3, #0]
   140e6:	683b      	ldr	r3, [r7, #0]
   140e8:	429a      	cmp	r2, r3
   140ea:	d110      	bne.n	1410e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   140ec:	6839      	ldr	r1, [r7, #0]
   140ee:	6878      	ldr	r0, [r7, #4]
   140f0:	4b0d      	ldr	r3, [pc, #52]	; (14128 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   140f2:	4798      	blx	r3
			task=&taskArray[j];
   140f4:	7bba      	ldrb	r2, [r7, #14]
   140f6:	4613      	mov	r3, r2
   140f8:	009b      	lsls	r3, r3, #2
   140fa:	4413      	add	r3, r2
   140fc:	009b      	lsls	r3, r3, #2
   140fe:	4a09      	ldr	r2, [pc, #36]	; (14124 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   14100:	441a      	add	r2, r3
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   14106:	687b      	ldr	r3, [r7, #4]
   14108:	7bba      	ldrb	r2, [r7, #14]
   1410a:	771a      	strb	r2, [r3, #28]
			return;
   1410c:	e006      	b.n	1411c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1410e:	7bfb      	ldrb	r3, [r7, #15]
   14110:	3301      	adds	r3, #1
   14112:	73fb      	strb	r3, [r7, #15]
   14114:	e7d3      	b.n	140be <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   14116:	6878      	ldr	r0, [r7, #4]
   14118:	4b04      	ldr	r3, [pc, #16]	; (1412c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   1411a:	4798      	blx	r3
	//task=&taskArray[0];

}
   1411c:	3710      	adds	r7, #16
   1411e:	46bd      	mov	sp, r7
   14120:	bd80      	pop	{r7, pc}
   14122:	bf00      	nop
   14124:	2000349c 	.word	0x2000349c
   14128:	00013f85 	.word	0x00013f85
   1412c:	00014045 	.word	0x00014045

00014130 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   14130:	b480      	push	{r7}
   14132:	b085      	sub	sp, #20
   14134:	af00      	add	r7, sp, #0
   14136:	6078      	str	r0, [r7, #4]
   14138:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1413a:	2300      	movs	r3, #0
   1413c:	73fb      	strb	r3, [r7, #15]
   1413e:	7bfb      	ldrb	r3, [r7, #15]
   14140:	2b1f      	cmp	r3, #31
   14142:	dc19      	bgt.n	14178 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   14144:	7bfa      	ldrb	r2, [r7, #15]
   14146:	490f      	ldr	r1, [pc, #60]	; (14184 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   14148:	4613      	mov	r3, r2
   1414a:	009b      	lsls	r3, r3, #2
   1414c:	4413      	add	r3, r2
   1414e:	009b      	lsls	r3, r3, #2
   14150:	440b      	add	r3, r1
   14152:	330c      	adds	r3, #12
   14154:	681a      	ldr	r2, [r3, #0]
   14156:	683b      	ldr	r3, [r7, #0]
   14158:	429a      	cmp	r2, r3
   1415a:	d109      	bne.n	14170 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   1415c:	7bfa      	ldrb	r2, [r7, #15]
   1415e:	4613      	mov	r3, r2
   14160:	009b      	lsls	r3, r3, #2
   14162:	4413      	add	r3, r2
   14164:	009b      	lsls	r3, r3, #2
   14166:	4a07      	ldr	r2, [pc, #28]	; (14184 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   14168:	441a      	add	r2, r3
   1416a:	687b      	ldr	r3, [r7, #4]
   1416c:	619a      	str	r2, [r3, #24]
			return;
   1416e:	e004      	b.n	1417a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   14170:	7bfb      	ldrb	r3, [r7, #15]
   14172:	3301      	adds	r3, #1
   14174:	73fb      	strb	r3, [r7, #15]
   14176:	e7e2      	b.n	1413e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   14178:	bf00      	nop
}
   1417a:	3714      	adds	r7, #20
   1417c:	46bd      	mov	sp, r7
   1417e:	bc80      	pop	{r7}
   14180:	4770      	bx	lr
   14182:	bf00      	nop
   14184:	2000349c 	.word	0x2000349c

00014188 <_Z41__static_initialization_and_destruction_0ii>:
   14188:	b580      	push	{r7, lr}
   1418a:	b082      	sub	sp, #8
   1418c:	af00      	add	r7, sp, #0
   1418e:	6078      	str	r0, [r7, #4]
   14190:	6039      	str	r1, [r7, #0]
   14192:	687b      	ldr	r3, [r7, #4]
   14194:	2b01      	cmp	r3, #1
   14196:	d143      	bne.n	14220 <_Z41__static_initialization_and_destruction_0ii+0x98>
   14198:	683b      	ldr	r3, [r7, #0]
   1419a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1419e:	4293      	cmp	r3, r2
   141a0:	d13e      	bne.n	14220 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   141a2:	4921      	ldr	r1, [pc, #132]	; (14228 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   141a4:	4821      	ldr	r0, [pc, #132]	; (1422c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   141a6:	4b22      	ldr	r3, [pc, #136]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   141a8:	4798      	blx	r3
   141aa:	4a22      	ldr	r2, [pc, #136]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   141ac:	4922      	ldr	r1, [pc, #136]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   141ae:	481f      	ldr	r0, [pc, #124]	; (1422c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   141b0:	4b22      	ldr	r3, [pc, #136]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   141b2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   141b4:	4922      	ldr	r1, [pc, #136]	; (14240 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   141b6:	4823      	ldr	r0, [pc, #140]	; (14244 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   141b8:	4b1d      	ldr	r3, [pc, #116]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   141ba:	4798      	blx	r3
   141bc:	4a1d      	ldr	r2, [pc, #116]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   141be:	491e      	ldr	r1, [pc, #120]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   141c0:	4820      	ldr	r0, [pc, #128]	; (14244 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   141c2:	4b1e      	ldr	r3, [pc, #120]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   141c4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   141c6:	4920      	ldr	r1, [pc, #128]	; (14248 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   141c8:	4820      	ldr	r0, [pc, #128]	; (1424c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   141ca:	4b19      	ldr	r3, [pc, #100]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   141cc:	4798      	blx	r3
   141ce:	4a19      	ldr	r2, [pc, #100]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   141d0:	4919      	ldr	r1, [pc, #100]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   141d2:	481e      	ldr	r0, [pc, #120]	; (1424c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   141d4:	4b19      	ldr	r3, [pc, #100]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   141d6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   141d8:	491d      	ldr	r1, [pc, #116]	; (14250 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   141da:	481e      	ldr	r0, [pc, #120]	; (14254 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   141dc:	4b14      	ldr	r3, [pc, #80]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   141de:	4798      	blx	r3
   141e0:	4a14      	ldr	r2, [pc, #80]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   141e2:	4915      	ldr	r1, [pc, #84]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   141e4:	481b      	ldr	r0, [pc, #108]	; (14254 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   141e6:	4b15      	ldr	r3, [pc, #84]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   141e8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   141ea:	491b      	ldr	r1, [pc, #108]	; (14258 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   141ec:	481b      	ldr	r0, [pc, #108]	; (1425c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   141ee:	4b10      	ldr	r3, [pc, #64]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   141f0:	4798      	blx	r3
   141f2:	4a10      	ldr	r2, [pc, #64]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   141f4:	4910      	ldr	r1, [pc, #64]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   141f6:	4819      	ldr	r0, [pc, #100]	; (1425c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   141f8:	4b10      	ldr	r3, [pc, #64]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   141fa:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   141fc:	4918      	ldr	r1, [pc, #96]	; (14260 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   141fe:	4819      	ldr	r0, [pc, #100]	; (14264 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   14200:	4b0b      	ldr	r3, [pc, #44]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14202:	4798      	blx	r3
   14204:	4a0b      	ldr	r2, [pc, #44]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14206:	490c      	ldr	r1, [pc, #48]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14208:	4816      	ldr	r0, [pc, #88]	; (14264 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1420a:	4b0c      	ldr	r3, [pc, #48]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   1420c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1420e:	4916      	ldr	r1, [pc, #88]	; (14268 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   14210:	4816      	ldr	r0, [pc, #88]	; (1426c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   14212:	4b07      	ldr	r3, [pc, #28]	; (14230 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14214:	4798      	blx	r3
   14216:	4a07      	ldr	r2, [pc, #28]	; (14234 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14218:	4907      	ldr	r1, [pc, #28]	; (14238 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   1421a:	4814      	ldr	r0, [pc, #80]	; (1426c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1421c:	4b07      	ldr	r3, [pc, #28]	; (1423c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   1421e:	4798      	blx	r3
   14220:	bf00      	nop
   14222:	3708      	adds	r7, #8
   14224:	46bd      	mov	sp, r7
   14226:	bd80      	pop	{r7, pc}
   14228:	2000d6d8 	.word	0x2000d6d8
   1422c:	200033b8 	.word	0x200033b8
   14230:	00013d09 	.word	0x00013d09
   14234:	20000000 	.word	0x20000000
   14238:	00013d41 	.word	0x00013d41
   1423c:	0001a44d 	.word	0x0001a44d
   14240:	2000d76c 	.word	0x2000d76c
   14244:	200033d8 	.word	0x200033d8
   14248:	2000d870 	.word	0x2000d870
   1424c:	200033f8 	.word	0x200033f8
   14250:	2000d78c 	.word	0x2000d78c
   14254:	20003418 	.word	0x20003418
   14258:	2000d830 	.word	0x2000d830
   1425c:	20003438 	.word	0x20003438
   14260:	2000d850 	.word	0x2000d850
   14264:	20003458 	.word	0x20003458
   14268:	2000d748 	.word	0x2000d748
   1426c:	20003478 	.word	0x20003478

00014270 <_GLOBAL__sub_I_ptrTimerClass>:
   14270:	b580      	push	{r7, lr}
   14272:	af00      	add	r7, sp, #0
   14274:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14278:	2001      	movs	r0, #1
   1427a:	4b01      	ldr	r3, [pc, #4]	; (14280 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   1427c:	4798      	blx	r3
   1427e:	bd80      	pop	{r7, pc}
   14280:	00014189 	.word	0x00014189

00014284 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   14284:	b480      	push	{r7}
   14286:	b083      	sub	sp, #12
   14288:	af00      	add	r7, sp, #0
   1428a:	6078      	str	r0, [r7, #4]
   1428c:	4a05      	ldr	r2, [pc, #20]	; (142a4 <_ZN5PrintC1Ev+0x20>)
   1428e:	687b      	ldr	r3, [r7, #4]
   14290:	601a      	str	r2, [r3, #0]
   14292:	687b      	ldr	r3, [r7, #4]
   14294:	2200      	movs	r2, #0
   14296:	605a      	str	r2, [r3, #4]
   14298:	687b      	ldr	r3, [r7, #4]
   1429a:	4618      	mov	r0, r3
   1429c:	370c      	adds	r7, #12
   1429e:	46bd      	mov	sp, r7
   142a0:	bc80      	pop	{r7}
   142a2:	4770      	bx	lr
   142a4:	0001dc28 	.word	0x0001dc28

000142a8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   142a8:	b480      	push	{r7}
   142aa:	b083      	sub	sp, #12
   142ac:	af00      	add	r7, sp, #0
   142ae:	6078      	str	r0, [r7, #4]
   142b0:	2300      	movs	r3, #0
   142b2:	4618      	mov	r0, r3
   142b4:	370c      	adds	r7, #12
   142b6:	46bd      	mov	sp, r7
   142b8:	bc80      	pop	{r7}
   142ba:	4770      	bx	lr

000142bc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   142bc:	b480      	push	{r7}
   142be:	b083      	sub	sp, #12
   142c0:	af00      	add	r7, sp, #0
   142c2:	6078      	str	r0, [r7, #4]
   142c4:	bf00      	nop
   142c6:	370c      	adds	r7, #12
   142c8:	46bd      	mov	sp, r7
   142ca:	bc80      	pop	{r7}
   142cc:	4770      	bx	lr
	...

000142d0 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   142d0:	b580      	push	{r7, lr}
   142d2:	b082      	sub	sp, #8
   142d4:	af00      	add	r7, sp, #0
   142d6:	6078      	str	r0, [r7, #4]
   142d8:	687b      	ldr	r3, [r7, #4]
   142da:	4618      	mov	r0, r3
   142dc:	4b06      	ldr	r3, [pc, #24]	; (142f8 <_ZN6StreamC1Ev+0x28>)
   142de:	4798      	blx	r3
   142e0:	4a06      	ldr	r2, [pc, #24]	; (142fc <_ZN6StreamC1Ev+0x2c>)
   142e2:	687b      	ldr	r3, [r7, #4]
   142e4:	601a      	str	r2, [r3, #0]
   142e6:	687b      	ldr	r3, [r7, #4]
   142e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   142ec:	609a      	str	r2, [r3, #8]
   142ee:	687b      	ldr	r3, [r7, #4]
   142f0:	4618      	mov	r0, r3
   142f2:	3708      	adds	r7, #8
   142f4:	46bd      	mov	sp, r7
   142f6:	bd80      	pop	{r7, pc}
   142f8:	00014285 	.word	0x00014285
   142fc:	0001dbec 	.word	0x0001dbec

00014300 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   14300:	b480      	push	{r7}
   14302:	b083      	sub	sp, #12
   14304:	af00      	add	r7, sp, #0
   14306:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   14308:	4b06      	ldr	r3, [pc, #24]	; (14324 <_ZL10USBTimeoutPK10timer_task+0x24>)
   1430a:	681b      	ldr	r3, [r3, #0]
   1430c:	2201      	movs	r2, #1
   1430e:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   14310:	4b04      	ldr	r3, [pc, #16]	; (14324 <_ZL10USBTimeoutPK10timer_task+0x24>)
   14312:	681b      	ldr	r3, [r3, #0]
   14314:	2200      	movs	r2, #0
   14316:	741a      	strb	r2, [r3, #16]
	
}
   14318:	bf00      	nop
   1431a:	370c      	adds	r7, #12
   1431c:	46bd      	mov	sp, r7
   1431e:	bc80      	pop	{r7}
   14320:	4770      	bx	lr
   14322:	bf00      	nop
   14324:	20003880 	.word	0x20003880

00014328 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   14328:	b480      	push	{r7}
   1432a:	b083      	sub	sp, #12
   1432c:	af00      	add	r7, sp, #0
   1432e:	4603      	mov	r3, r0
   14330:	603a      	str	r2, [r7, #0]
   14332:	71fb      	strb	r3, [r7, #7]
   14334:	460b      	mov	r3, r1
   14336:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   14338:	4b08      	ldr	r3, [pc, #32]	; (1435c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1433a:	681b      	ldr	r3, [r3, #0]
   1433c:	2201      	movs	r2, #1
   1433e:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   14340:	4b06      	ldr	r3, [pc, #24]	; (1435c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   14342:	681b      	ldr	r3, [r3, #0]
   14344:	2201      	movs	r2, #1
   14346:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   14348:	4b04      	ldr	r3, [pc, #16]	; (1435c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1434a:	681b      	ldr	r3, [r3, #0]
   1434c:	2201      	movs	r2, #1
   1434e:	741a      	strb	r2, [r3, #16]


	return false;
   14350:	2300      	movs	r3, #0
}
   14352:	4618      	mov	r0, r3
   14354:	370c      	adds	r7, #12
   14356:	46bd      	mov	sp, r7
   14358:	bc80      	pop	{r7}
   1435a:	4770      	bx	lr
   1435c:	20003880 	.word	0x20003880

00014360 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   14360:	b480      	push	{r7}
   14362:	b083      	sub	sp, #12
   14364:	af00      	add	r7, sp, #0
   14366:	4603      	mov	r3, r0
   14368:	603a      	str	r2, [r7, #0]
   1436a:	71fb      	strb	r3, [r7, #7]
   1436c:	460b      	mov	r3, r1
   1436e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   14370:	4b08      	ldr	r3, [pc, #32]	; (14394 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   14372:	681b      	ldr	r3, [r3, #0]
   14374:	2201      	movs	r2, #1
   14376:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   14378:	4b06      	ldr	r3, [pc, #24]	; (14394 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1437a:	681b      	ldr	r3, [r3, #0]
   1437c:	2201      	movs	r2, #1
   1437e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   14380:	4b04      	ldr	r3, [pc, #16]	; (14394 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	2201      	movs	r2, #1
   14386:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   14388:	2300      	movs	r3, #0
}
   1438a:	4618      	mov	r0, r3
   1438c:	370c      	adds	r7, #12
   1438e:	46bd      	mov	sp, r7
   14390:	bc80      	pop	{r7}
   14392:	4770      	bx	lr
   14394:	20003880 	.word	0x20003880

00014398 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   14398:	b580      	push	{r7, lr}
   1439a:	b082      	sub	sp, #8
   1439c:	af00      	add	r7, sp, #0
   1439e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   143a0:	793b      	ldrb	r3, [r7, #4]
   143a2:	f003 0301 	and.w	r3, r3, #1
   143a6:	b2db      	uxtb	r3, r3
   143a8:	2b00      	cmp	r3, #0
   143aa:	d013      	beq.n	143d4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   143ac:	490c      	ldr	r1, [pc, #48]	; (143e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   143ae:	2000      	movs	r0, #0
   143b0:	4b0c      	ldr	r3, [pc, #48]	; (143e4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   143b2:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   143b4:	490c      	ldr	r1, [pc, #48]	; (143e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   143b6:	2001      	movs	r0, #1
   143b8:	4b0a      	ldr	r3, [pc, #40]	; (143e4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   143ba:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   143bc:	4b0b      	ldr	r3, [pc, #44]	; (143ec <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   143be:	681b      	ldr	r3, [r3, #0]
   143c0:	2201      	movs	r2, #1
   143c2:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   143c4:	4b09      	ldr	r3, [pc, #36]	; (143ec <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   143c6:	681b      	ldr	r3, [r3, #0]
   143c8:	2201      	movs	r2, #1
   143ca:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   143cc:	4b07      	ldr	r3, [pc, #28]	; (143ec <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   143ce:	681b      	ldr	r3, [r3, #0]
   143d0:	2201      	movs	r2, #1
   143d2:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   143d4:	2300      	movs	r3, #0
}
   143d6:	4618      	mov	r0, r3
   143d8:	3708      	adds	r7, #8
   143da:	46bd      	mov	sp, r7
   143dc:	bd80      	pop	{r7, pc}
   143de:	bf00      	nop
   143e0:	00014329 	.word	0x00014329
   143e4:	00010e05 	.word	0x00010e05
   143e8:	00014361 	.word	0x00014361
   143ec:	20003880 	.word	0x20003880

000143f0 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   143f0:	b580      	push	{r7, lr}
   143f2:	b082      	sub	sp, #8
   143f4:	af00      	add	r7, sp, #0
   143f6:	6078      	str	r0, [r7, #4]
   143f8:	687b      	ldr	r3, [r7, #4]
   143fa:	4618      	mov	r0, r3
   143fc:	4b0a      	ldr	r3, [pc, #40]	; (14428 <_ZN9CDC_ClassC1Ev+0x38>)
   143fe:	4798      	blx	r3
   14400:	687b      	ldr	r3, [r7, #4]
   14402:	3310      	adds	r3, #16
   14404:	4618      	mov	r0, r3
   14406:	4b09      	ldr	r3, [pc, #36]	; (1442c <_ZN9CDC_ClassC1Ev+0x3c>)
   14408:	4798      	blx	r3
   1440a:	4a09      	ldr	r2, [pc, #36]	; (14430 <_ZN9CDC_ClassC1Ev+0x40>)
   1440c:	687b      	ldr	r3, [r7, #4]
   1440e:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   14410:	687b      	ldr	r3, [r7, #4]
   14412:	f04f 32ff 	mov.w	r2, #4294967295
   14416:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   14418:	4a06      	ldr	r2, [pc, #24]	; (14434 <_ZN9CDC_ClassC1Ev+0x44>)
   1441a:	687b      	ldr	r3, [r7, #4]
   1441c:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   1441e:	687b      	ldr	r3, [r7, #4]
   14420:	4618      	mov	r0, r3
   14422:	3708      	adds	r7, #8
   14424:	46bd      	mov	sp, r7
   14426:	bd80      	pop	{r7, pc}
   14428:	000142d1 	.word	0x000142d1
   1442c:	00014c95 	.word	0x00014c95
   14430:	0001dbbc 	.word	0x0001dbbc
   14434:	20003880 	.word	0x20003880

00014438 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   14438:	b580      	push	{r7, lr}
   1443a:	b082      	sub	sp, #8
   1443c:	af00      	add	r7, sp, #0
   1443e:	6078      	str	r0, [r7, #4]
   14440:	4a06      	ldr	r2, [pc, #24]	; (1445c <_ZN9CDC_ClassD1Ev+0x24>)
   14442:	687b      	ldr	r3, [r7, #4]
   14444:	601a      	str	r2, [r3, #0]
   14446:	687b      	ldr	r3, [r7, #4]
   14448:	3310      	adds	r3, #16
   1444a:	4618      	mov	r0, r3
   1444c:	4b04      	ldr	r3, [pc, #16]	; (14460 <_ZN9CDC_ClassD1Ev+0x28>)
   1444e:	4798      	blx	r3
{
} //~CDC_Class
   14450:	687b      	ldr	r3, [r7, #4]
   14452:	4618      	mov	r0, r3
   14454:	3708      	adds	r7, #8
   14456:	46bd      	mov	sp, r7
   14458:	bd80      	pop	{r7, pc}
   1445a:	bf00      	nop
   1445c:	0001dbbc 	.word	0x0001dbbc
   14460:	00014cb5 	.word	0x00014cb5

00014464 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   14464:	b580      	push	{r7, lr}
   14466:	b082      	sub	sp, #8
   14468:	af00      	add	r7, sp, #0
   1446a:	6078      	str	r0, [r7, #4]
	
	OnInit();
   1446c:	687b      	ldr	r3, [r7, #4]
   1446e:	3310      	adds	r3, #16
   14470:	4618      	mov	r0, r3
   14472:	4b09      	ldr	r3, [pc, #36]	; (14498 <_ZN9CDC_Class4InitEv+0x34>)
   14474:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   14476:	4909      	ldr	r1, [pc, #36]	; (1449c <_ZN9CDC_Class4InitEv+0x38>)
   14478:	2003      	movs	r0, #3
   1447a:	4b09      	ldr	r3, [pc, #36]	; (144a0 <_ZN9CDC_Class4InitEv+0x3c>)
   1447c:	4798      	blx	r3
	delay_ms(100);
   1447e:	2064      	movs	r0, #100	; 0x64
   14480:	4b08      	ldr	r3, [pc, #32]	; (144a4 <_ZN9CDC_Class4InitEv+0x40>)
   14482:	4798      	blx	r3
		
	if (connected)
   14484:	687b      	ldr	r3, [r7, #4]
   14486:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   14488:	2064      	movs	r0, #100	; 0x64
   1448a:	4b06      	ldr	r3, [pc, #24]	; (144a4 <_ZN9CDC_Class4InitEv+0x40>)
   1448c:	4798      	blx	r3

	

}
   1448e:	bf00      	nop
   14490:	3708      	adds	r7, #8
   14492:	46bd      	mov	sp, r7
   14494:	bd80      	pop	{r7, pc}
   14496:	bf00      	nop
   14498:	00014cc9 	.word	0x00014cc9
   1449c:	00014399 	.word	0x00014399
   144a0:	00010e05 	.word	0x00010e05
   144a4:	0000647d 	.word	0x0000647d

000144a8 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   144a8:	b580      	push	{r7, lr}
   144aa:	b082      	sub	sp, #8
   144ac:	af00      	add	r7, sp, #0
   144ae:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   144b0:	4b03      	ldr	r3, [pc, #12]	; (144c0 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   144b2:	4798      	blx	r3
   144b4:	4603      	mov	r3, r0
	
}
   144b6:	4618      	mov	r0, r3
   144b8:	3708      	adds	r7, #8
   144ba:	46bd      	mov	sp, r7
   144bc:	bd80      	pop	{r7, pc}
   144be:	bf00      	nop
   144c0:	00010e7d 	.word	0x00010e7d

000144c4 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   144c4:	b580      	push	{r7, lr}
   144c6:	b084      	sub	sp, #16
   144c8:	af00      	add	r7, sp, #0
   144ca:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   144cc:	687b      	ldr	r3, [r7, #4]
   144ce:	699b      	ldr	r3, [r3, #24]
   144d0:	f1b3 3fff 	cmp.w	r3, #4294967295
   144d4:	bf14      	ite	ne
   144d6:	2301      	movne	r3, #1
   144d8:	2300      	moveq	r3, #0
   144da:	b2db      	uxtb	r3, r3
   144dc:	2b00      	cmp	r3, #0
   144de:	d002      	beq.n	144e6 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   144e0:	687b      	ldr	r3, [r7, #4]
   144e2:	699b      	ldr	r3, [r3, #24]
   144e4:	e011      	b.n	1450a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   144e6:	687b      	ldr	r3, [r7, #4]
   144e8:	681b      	ldr	r3, [r3, #0]
   144ea:	331c      	adds	r3, #28
   144ec:	681b      	ldr	r3, [r3, #0]
   144ee:	f107 010f 	add.w	r1, r7, #15
   144f2:	2201      	movs	r2, #1
   144f4:	6878      	ldr	r0, [r7, #4]
   144f6:	4798      	blx	r3
   144f8:	4602      	mov	r2, r0
   144fa:	687b      	ldr	r3, [r7, #4]
   144fc:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   144fe:	7bfb      	ldrb	r3, [r7, #15]
   14500:	461a      	mov	r2, r3
   14502:	687b      	ldr	r3, [r7, #4]
   14504:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   14506:	687b      	ldr	r3, [r7, #4]
   14508:	699b      	ldr	r3, [r3, #24]
}
   1450a:	4618      	mov	r0, r3
   1450c:	3710      	adds	r7, #16
   1450e:	46bd      	mov	sp, r7
   14510:	bd80      	pop	{r7, pc}
	...

00014514 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   14514:	b580      	push	{r7, lr}
   14516:	b086      	sub	sp, #24
   14518:	af00      	add	r7, sp, #0
   1451a:	60f8      	str	r0, [r7, #12]
   1451c:	60b9      	str	r1, [r7, #8]
   1451e:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   14520:	68fb      	ldr	r3, [r7, #12]
   14522:	7c1b      	ldrb	r3, [r3, #16]
   14524:	b2db      	uxtb	r3, r3
   14526:	2b00      	cmp	r3, #0
   14528:	d02e      	beq.n	14588 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1452a:	687a      	ldr	r2, [r7, #4]
   1452c:	4613      	mov	r3, r2
   1452e:	009b      	lsls	r3, r3, #2
   14530:	4413      	add	r3, r2
   14532:	005b      	lsls	r3, r3, #1
   14534:	461a      	mov	r2, r3
   14536:	4918      	ldr	r1, [pc, #96]	; (14598 <_ZN9CDC_Class8readDataEPvl+0x84>)
   14538:	4818      	ldr	r0, [pc, #96]	; (1459c <_ZN9CDC_Class8readDataEPvl+0x88>)
   1453a:	4b19      	ldr	r3, [pc, #100]	; (145a0 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   1453c:	4798      	blx	r3
		rxReady=false;
   1453e:	68fb      	ldr	r3, [r7, #12]
   14540:	2200      	movs	r2, #0
   14542:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   14544:	687b      	ldr	r3, [r7, #4]
   14546:	4619      	mov	r1, r3
   14548:	68b8      	ldr	r0, [r7, #8]
   1454a:	4b16      	ldr	r3, [pc, #88]	; (145a4 <_ZN9CDC_Class8readDataEPvl+0x90>)
   1454c:	4798      	blx	r3
   1454e:	4603      	mov	r3, r0
   14550:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   14552:	68fb      	ldr	r3, [r7, #12]
   14554:	7d5b      	ldrb	r3, [r3, #21]
   14556:	b2db      	uxtb	r3, r3
   14558:	f083 0301 	eor.w	r3, r3, #1
   1455c:	b2db      	uxtb	r3, r3
   1455e:	2b00      	cmp	r3, #0
   14560:	d006      	beq.n	14570 <_ZN9CDC_Class8readDataEPvl+0x5c>
   14562:	68fb      	ldr	r3, [r7, #12]
   14564:	7c1b      	ldrb	r3, [r3, #16]
   14566:	b2db      	uxtb	r3, r3
   14568:	2b00      	cmp	r3, #0
   1456a:	d001      	beq.n	14570 <_ZN9CDC_Class8readDataEPvl+0x5c>
   1456c:	2301      	movs	r3, #1
   1456e:	e000      	b.n	14572 <_ZN9CDC_Class8readDataEPvl+0x5e>
   14570:	2300      	movs	r3, #0
   14572:	2b00      	cmp	r3, #0
   14574:	d000      	beq.n	14578 <_ZN9CDC_Class8readDataEPvl+0x64>
   14576:	e7ec      	b.n	14552 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   14578:	4808      	ldr	r0, [pc, #32]	; (1459c <_ZN9CDC_Class8readDataEPvl+0x88>)
   1457a:	4b0b      	ldr	r3, [pc, #44]	; (145a8 <_ZN9CDC_Class8readDataEPvl+0x94>)
   1457c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1457e:	4906      	ldr	r1, [pc, #24]	; (14598 <_ZN9CDC_Class8readDataEPvl+0x84>)
   14580:	4806      	ldr	r0, [pc, #24]	; (1459c <_ZN9CDC_Class8readDataEPvl+0x88>)
   14582:	4b0a      	ldr	r3, [pc, #40]	; (145ac <_ZN9CDC_Class8readDataEPvl+0x98>)
   14584:	4798      	blx	r3
   14586:	e001      	b.n	1458c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   14588:	2300      	movs	r3, #0
   1458a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   1458c:	7dfb      	ldrb	r3, [r7, #23]
}
   1458e:	4618      	mov	r0, r3
   14590:	3718      	adds	r7, #24
   14592:	46bd      	mov	sp, r7
   14594:	bd80      	pop	{r7, pc}
   14596:	bf00      	nop
   14598:	00014301 	.word	0x00014301
   1459c:	20003840 	.word	0x20003840
   145a0:	00013ff5 	.word	0x00013ff5
   145a4:	00010d59 	.word	0x00010d59
   145a8:	00013e69 	.word	0x00013e69
   145ac:	00013f85 	.word	0x00013f85

000145b0 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   145b0:	b580      	push	{r7, lr}
   145b2:	b086      	sub	sp, #24
   145b4:	af00      	add	r7, sp, #0
   145b6:	60f8      	str	r0, [r7, #12]
   145b8:	60b9      	str	r1, [r7, #8]
   145ba:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   145bc:	68fb      	ldr	r3, [r7, #12]
   145be:	2200      	movs	r2, #0
   145c0:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   145c2:	687b      	ldr	r3, [r7, #4]
   145c4:	4619      	mov	r1, r3
   145c6:	68b8      	ldr	r0, [r7, #8]
   145c8:	4b04      	ldr	r3, [pc, #16]	; (145dc <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   145ca:	4798      	blx	r3
   145cc:	4603      	mov	r3, r0
   145ce:	617b      	str	r3, [r7, #20]
	return r;
   145d0:	697b      	ldr	r3, [r7, #20]
}
   145d2:	4618      	mov	r0, r3
   145d4:	3718      	adds	r7, #24
   145d6:	46bd      	mov	sp, r7
   145d8:	bd80      	pop	{r7, pc}
   145da:	bf00      	nop
   145dc:	00010d59 	.word	0x00010d59

000145e0 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   145e0:	b580      	push	{r7, lr}
   145e2:	b084      	sub	sp, #16
   145e4:	af00      	add	r7, sp, #0
   145e6:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   145e8:	687b      	ldr	r3, [r7, #4]
   145ea:	2200      	movs	r2, #0
   145ec:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   145ee:	f107 030f 	add.w	r3, r7, #15
   145f2:	2101      	movs	r1, #1
   145f4:	4618      	mov	r0, r3
   145f6:	4b08      	ldr	r3, [pc, #32]	; (14618 <_ZN9CDC_Class4readEv+0x38>)
   145f8:	4798      	blx	r3
	while(!rxReady);
   145fa:	687b      	ldr	r3, [r7, #4]
   145fc:	7d5b      	ldrb	r3, [r3, #21]
   145fe:	b2db      	uxtb	r3, r3
   14600:	f083 0301 	eor.w	r3, r3, #1
   14604:	b2db      	uxtb	r3, r3
   14606:	2b00      	cmp	r3, #0
   14608:	d000      	beq.n	1460c <_ZN9CDC_Class4readEv+0x2c>
   1460a:	e7f6      	b.n	145fa <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   1460c:	7bfb      	ldrb	r3, [r7, #15]
}
   1460e:	4618      	mov	r0, r3
   14610:	3710      	adds	r7, #16
   14612:	46bd      	mov	sp, r7
   14614:	bd80      	pop	{r7, pc}
   14616:	bf00      	nop
   14618:	00010d59 	.word	0x00010d59

0001461c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   1461c:	b580      	push	{r7, lr}
   1461e:	b082      	sub	sp, #8
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	331c      	adds	r3, #28
   14628:	2140      	movs	r1, #64	; 0x40
   1462a:	4618      	mov	r0, r3
   1462c:	4b02      	ldr	r3, [pc, #8]	; (14638 <_ZN9CDC_Class5flushEv+0x1c>)
   1462e:	4798      	blx	r3
}
   14630:	bf00      	nop
   14632:	3708      	adds	r7, #8
   14634:	46bd      	mov	sp, r7
   14636:	bd80      	pop	{r7, pc}
   14638:	00010d9d 	.word	0x00010d9d

0001463c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   1463c:	b580      	push	{r7, lr}
   1463e:	b082      	sub	sp, #8
   14640:	af00      	add	r7, sp, #0
   14642:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   14644:	4b02      	ldr	r3, [pc, #8]	; (14650 <_ZN9CDC_Class5clearEv+0x14>)
   14646:	4798      	blx	r3
}
   14648:	bf00      	nop
   1464a:	3708      	adds	r7, #8
   1464c:	46bd      	mov	sp, r7
   1464e:	bd80      	pop	{r7, pc}
   14650:	00010de1 	.word	0x00010de1

00014654 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   14654:	b580      	push	{r7, lr}
   14656:	b082      	sub	sp, #8
   14658:	af00      	add	r7, sp, #0
   1465a:	6078      	str	r0, [r7, #4]
   1465c:	460b      	mov	r3, r1
   1465e:	70fb      	strb	r3, [r7, #3]
	if (connected){
   14660:	687b      	ldr	r3, [r7, #4]
   14662:	7c1b      	ldrb	r3, [r3, #16]
   14664:	b2db      	uxtb	r3, r3
   14666:	2b00      	cmp	r3, #0
   14668:	d012      	beq.n	14690 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   1466a:	687b      	ldr	r3, [r7, #4]
   1466c:	7d1b      	ldrb	r3, [r3, #20]
   1466e:	b2db      	uxtb	r3, r3
   14670:	f083 0301 	eor.w	r3, r3, #1
   14674:	b2db      	uxtb	r3, r3
   14676:	2b00      	cmp	r3, #0
   14678:	d000      	beq.n	1467c <_ZN9CDC_Class5writeEh+0x28>
   1467a:	e7f6      	b.n	1466a <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   1467c:	687b      	ldr	r3, [r7, #4]
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	3324      	adds	r3, #36	; 0x24
   14682:	681b      	ldr	r3, [r3, #0]
   14684:	1cf9      	adds	r1, r7, #3
   14686:	2201      	movs	r2, #1
   14688:	6878      	ldr	r0, [r7, #4]
   1468a:	4798      	blx	r3
   1468c:	4603      	mov	r3, r0
   1468e:	e000      	b.n	14692 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   14690:	2300      	movs	r3, #0
	}
		
}
   14692:	4618      	mov	r0, r3
   14694:	3708      	adds	r7, #8
   14696:	46bd      	mov	sp, r7
   14698:	bd80      	pop	{r7, pc}
	...

0001469c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   1469c:	b580      	push	{r7, lr}
   1469e:	b086      	sub	sp, #24
   146a0:	af00      	add	r7, sp, #0
   146a2:	60f8      	str	r0, [r7, #12]
   146a4:	60b9      	str	r1, [r7, #8]
   146a6:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   146a8:	68fb      	ldr	r3, [r7, #12]
   146aa:	7c1b      	ldrb	r3, [r3, #16]
   146ac:	b2db      	uxtb	r3, r3
   146ae:	2b00      	cmp	r3, #0
   146b0:	d02f      	beq.n	14712 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   146b2:	687a      	ldr	r2, [r7, #4]
   146b4:	4613      	mov	r3, r2
   146b6:	009b      	lsls	r3, r3, #2
   146b8:	4413      	add	r3, r2
   146ba:	005b      	lsls	r3, r3, #1
   146bc:	461a      	mov	r2, r3
   146be:	4917      	ldr	r1, [pc, #92]	; (1471c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   146c0:	4817      	ldr	r0, [pc, #92]	; (14720 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   146c2:	4b18      	ldr	r3, [pc, #96]	; (14724 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   146c4:	4798      	blx	r3
		txReady=false;
   146c6:	68fb      	ldr	r3, [r7, #12]
   146c8:	2200      	movs	r2, #0
   146ca:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   146cc:	687b      	ldr	r3, [r7, #4]
   146ce:	4619      	mov	r1, r3
   146d0:	68b8      	ldr	r0, [r7, #8]
   146d2:	4b15      	ldr	r3, [pc, #84]	; (14728 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   146d4:	4798      	blx	r3
   146d6:	4603      	mov	r3, r0
   146d8:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   146da:	68fb      	ldr	r3, [r7, #12]
   146dc:	7d1b      	ldrb	r3, [r3, #20]
   146de:	b2db      	uxtb	r3, r3
   146e0:	f083 0301 	eor.w	r3, r3, #1
   146e4:	b2db      	uxtb	r3, r3
   146e6:	2b00      	cmp	r3, #0
   146e8:	d006      	beq.n	146f8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   146ea:	68fb      	ldr	r3, [r7, #12]
   146ec:	7c1b      	ldrb	r3, [r3, #16]
   146ee:	b2db      	uxtb	r3, r3
   146f0:	2b00      	cmp	r3, #0
   146f2:	d001      	beq.n	146f8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   146f4:	2301      	movs	r3, #1
   146f6:	e000      	b.n	146fa <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   146f8:	2300      	movs	r3, #0
   146fa:	2b00      	cmp	r3, #0
   146fc:	d000      	beq.n	14700 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   146fe:	e7ec      	b.n	146da <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   14700:	4807      	ldr	r0, [pc, #28]	; (14720 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   14702:	4b0a      	ldr	r3, [pc, #40]	; (1472c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   14704:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   14706:	4905      	ldr	r1, [pc, #20]	; (1471c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   14708:	4805      	ldr	r0, [pc, #20]	; (14720 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1470a:	4b09      	ldr	r3, [pc, #36]	; (14730 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   1470c:	4798      	blx	r3
		return r;
   1470e:	697b      	ldr	r3, [r7, #20]
   14710:	e000      	b.n	14714 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   14712:	2300      	movs	r3, #0
	}
	

}
   14714:	4618      	mov	r0, r3
   14716:	3718      	adds	r7, #24
   14718:	46bd      	mov	sp, r7
   1471a:	bd80      	pop	{r7, pc}
   1471c:	00014301 	.word	0x00014301
   14720:	20003840 	.word	0x20003840
   14724:	00013ff5 	.word	0x00013ff5
   14728:	00010d9d 	.word	0x00010d9d
   1472c:	00013e69 	.word	0x00013e69
   14730:	00013f85 	.word	0x00013f85

00014734 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   14734:	b580      	push	{r7, lr}
   14736:	b086      	sub	sp, #24
   14738:	af00      	add	r7, sp, #0
   1473a:	60f8      	str	r0, [r7, #12]
   1473c:	60b9      	str	r1, [r7, #8]
   1473e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   14740:	68fb      	ldr	r3, [r7, #12]
   14742:	2200      	movs	r2, #0
   14744:	751a      	strb	r2, [r3, #20]

 	if (connected){
   14746:	68fb      	ldr	r3, [r7, #12]
   14748:	7c1b      	ldrb	r3, [r3, #16]
   1474a:	b2db      	uxtb	r3, r3
   1474c:	2b00      	cmp	r3, #0
   1474e:	d02a      	beq.n	147a6 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   14750:	687a      	ldr	r2, [r7, #4]
   14752:	4613      	mov	r3, r2
   14754:	009b      	lsls	r3, r3, #2
   14756:	4413      	add	r3, r2
   14758:	005b      	lsls	r3, r3, #1
   1475a:	461a      	mov	r2, r3
   1475c:	4915      	ldr	r1, [pc, #84]	; (147b4 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1475e:	4816      	ldr	r0, [pc, #88]	; (147b8 <_ZN9CDC_Class5writeEPKhj+0x84>)
   14760:	4b16      	ldr	r3, [pc, #88]	; (147bc <_ZN9CDC_Class5writeEPKhj+0x88>)
   14762:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   14764:	6879      	ldr	r1, [r7, #4]
   14766:	68b8      	ldr	r0, [r7, #8]
   14768:	4b15      	ldr	r3, [pc, #84]	; (147c0 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   1476a:	4798      	blx	r3
   1476c:	4603      	mov	r3, r0
   1476e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   14770:	68fb      	ldr	r3, [r7, #12]
   14772:	7d1b      	ldrb	r3, [r3, #20]
   14774:	b2db      	uxtb	r3, r3
   14776:	f083 0301 	eor.w	r3, r3, #1
   1477a:	b2db      	uxtb	r3, r3
   1477c:	2b00      	cmp	r3, #0
   1477e:	d006      	beq.n	1478e <_ZN9CDC_Class5writeEPKhj+0x5a>
   14780:	68fb      	ldr	r3, [r7, #12]
   14782:	7c1b      	ldrb	r3, [r3, #16]
   14784:	b2db      	uxtb	r3, r3
   14786:	2b00      	cmp	r3, #0
   14788:	d001      	beq.n	1478e <_ZN9CDC_Class5writeEPKhj+0x5a>
   1478a:	2301      	movs	r3, #1
   1478c:	e000      	b.n	14790 <_ZN9CDC_Class5writeEPKhj+0x5c>
   1478e:	2300      	movs	r3, #0
   14790:	2b00      	cmp	r3, #0
   14792:	d000      	beq.n	14796 <_ZN9CDC_Class5writeEPKhj+0x62>
   14794:	e7ec      	b.n	14770 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   14796:	4808      	ldr	r0, [pc, #32]	; (147b8 <_ZN9CDC_Class5writeEPKhj+0x84>)
   14798:	4b0a      	ldr	r3, [pc, #40]	; (147c4 <_ZN9CDC_Class5writeEPKhj+0x90>)
   1479a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1479c:	4905      	ldr	r1, [pc, #20]	; (147b4 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1479e:	4806      	ldr	r0, [pc, #24]	; (147b8 <_ZN9CDC_Class5writeEPKhj+0x84>)
   147a0:	4b09      	ldr	r3, [pc, #36]	; (147c8 <_ZN9CDC_Class5writeEPKhj+0x94>)
   147a2:	4798      	blx	r3
   147a4:	e001      	b.n	147aa <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   147a6:	2300      	movs	r3, #0
   147a8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   147aa:	697b      	ldr	r3, [r7, #20]
}
   147ac:	4618      	mov	r0, r3
   147ae:	3718      	adds	r7, #24
   147b0:	46bd      	mov	sp, r7
   147b2:	bd80      	pop	{r7, pc}
   147b4:	00014301 	.word	0x00014301
   147b8:	20003840 	.word	0x20003840
   147bc:	00013ff5 	.word	0x00013ff5
   147c0:	00010d9d 	.word	0x00010d9d
   147c4:	00013e69 	.word	0x00013e69
   147c8:	00013f85 	.word	0x00013f85

000147cc <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   147cc:	b480      	push	{r7}
   147ce:	b083      	sub	sp, #12
   147d0:	af00      	add	r7, sp, #0
   147d2:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   147d4:	687b      	ldr	r3, [r7, #4]
   147d6:	7d5b      	ldrb	r3, [r3, #21]
   147d8:	b2db      	uxtb	r3, r3
   147da:	2b00      	cmp	r3, #0
   147dc:	d006      	beq.n	147ec <_ZN9CDC_Class9availableEv+0x20>
   147de:	687b      	ldr	r3, [r7, #4]
   147e0:	7d1b      	ldrb	r3, [r3, #20]
   147e2:	b2db      	uxtb	r3, r3
   147e4:	2b00      	cmp	r3, #0
   147e6:	d001      	beq.n	147ec <_ZN9CDC_Class9availableEv+0x20>
   147e8:	2301      	movs	r3, #1
   147ea:	e000      	b.n	147ee <_ZN9CDC_Class9availableEv+0x22>
   147ec:	2300      	movs	r3, #0
   147ee:	2b00      	cmp	r3, #0
   147f0:	d001      	beq.n	147f6 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   147f2:	2301      	movs	r3, #1
   147f4:	e000      	b.n	147f8 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   147f6:	2300      	movs	r3, #0
	}
	
}
   147f8:	4618      	mov	r0, r3
   147fa:	370c      	adds	r7, #12
   147fc:	46bd      	mov	sp, r7
   147fe:	bc80      	pop	{r7}
   14800:	4770      	bx	lr
	...

00014804 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   14804:	b580      	push	{r7, lr}
   14806:	b082      	sub	sp, #8
   14808:	af00      	add	r7, sp, #0
   1480a:	6078      	str	r0, [r7, #4]
   1480c:	6039      	str	r1, [r7, #0]
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2b01      	cmp	r3, #1
   14812:	d14b      	bne.n	148ac <_Z41__static_initialization_and_destruction_0ii+0xa8>
   14814:	683b      	ldr	r3, [r7, #0]
   14816:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1481a:	4293      	cmp	r3, r2
   1481c:	d146      	bne.n	148ac <_Z41__static_initialization_and_destruction_0ii+0xa8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1481e:	4925      	ldr	r1, [pc, #148]	; (148b4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14820:	4825      	ldr	r0, [pc, #148]	; (148b8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14822:	4b26      	ldr	r3, [pc, #152]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   14824:	4798      	blx	r3
   14826:	4a26      	ldr	r2, [pc, #152]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14828:	4926      	ldr	r1, [pc, #152]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1482a:	4823      	ldr	r0, [pc, #140]	; (148b8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   1482c:	4b26      	ldr	r3, [pc, #152]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1482e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   14830:	4926      	ldr	r1, [pc, #152]	; (148cc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   14832:	4827      	ldr	r0, [pc, #156]	; (148d0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   14834:	4b21      	ldr	r3, [pc, #132]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   14836:	4798      	blx	r3
   14838:	4a21      	ldr	r2, [pc, #132]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1483a:	4922      	ldr	r1, [pc, #136]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1483c:	4824      	ldr	r0, [pc, #144]	; (148d0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1483e:	4b22      	ldr	r3, [pc, #136]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14840:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   14842:	4924      	ldr	r1, [pc, #144]	; (148d4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   14844:	4824      	ldr	r0, [pc, #144]	; (148d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   14846:	4b1d      	ldr	r3, [pc, #116]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   14848:	4798      	blx	r3
   1484a:	4a1d      	ldr	r2, [pc, #116]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1484c:	491d      	ldr	r1, [pc, #116]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1484e:	4822      	ldr	r0, [pc, #136]	; (148d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   14850:	4b1d      	ldr	r3, [pc, #116]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14852:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14854:	4921      	ldr	r1, [pc, #132]	; (148dc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   14856:	4822      	ldr	r0, [pc, #136]	; (148e0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   14858:	4b18      	ldr	r3, [pc, #96]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1485a:	4798      	blx	r3
   1485c:	4a18      	ldr	r2, [pc, #96]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1485e:	4919      	ldr	r1, [pc, #100]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   14860:	481f      	ldr	r0, [pc, #124]	; (148e0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   14862:	4b19      	ldr	r3, [pc, #100]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14864:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   14866:	491f      	ldr	r1, [pc, #124]	; (148e4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   14868:	481f      	ldr	r0, [pc, #124]	; (148e8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1486a:	4b14      	ldr	r3, [pc, #80]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1486c:	4798      	blx	r3
   1486e:	4a14      	ldr	r2, [pc, #80]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14870:	4914      	ldr	r1, [pc, #80]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   14872:	481d      	ldr	r0, [pc, #116]	; (148e8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   14874:	4b14      	ldr	r3, [pc, #80]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14876:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   14878:	491c      	ldr	r1, [pc, #112]	; (148ec <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1487a:	481d      	ldr	r0, [pc, #116]	; (148f0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1487c:	4b0f      	ldr	r3, [pc, #60]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1487e:	4798      	blx	r3
   14880:	4a0f      	ldr	r2, [pc, #60]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14882:	4910      	ldr	r1, [pc, #64]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   14884:	481a      	ldr	r0, [pc, #104]	; (148f0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   14886:	4b10      	ldr	r3, [pc, #64]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14888:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1488a:	491a      	ldr	r1, [pc, #104]	; (148f4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1488c:	481a      	ldr	r0, [pc, #104]	; (148f8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1488e:	4b0b      	ldr	r3, [pc, #44]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   14890:	4798      	blx	r3
   14892:	4a0b      	ldr	r2, [pc, #44]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14894:	490b      	ldr	r1, [pc, #44]	; (148c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   14896:	4818      	ldr	r0, [pc, #96]	; (148f8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   14898:	4b0b      	ldr	r3, [pc, #44]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1489a:	4798      	blx	r3
   1489c:	4817      	ldr	r0, [pc, #92]	; (148fc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1489e:	4b18      	ldr	r3, [pc, #96]	; (14900 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   148a0:	4798      	blx	r3
   148a2:	4a07      	ldr	r2, [pc, #28]	; (148c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   148a4:	4917      	ldr	r1, [pc, #92]	; (14904 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   148a6:	4815      	ldr	r0, [pc, #84]	; (148fc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   148a8:	4b07      	ldr	r3, [pc, #28]	; (148c8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   148aa:	4798      	blx	r3
   148ac:	bf00      	nop
   148ae:	3708      	adds	r7, #8
   148b0:	46bd      	mov	sp, r7
   148b2:	bd80      	pop	{r7, pc}
   148b4:	2000d6d8 	.word	0x2000d6d8
   148b8:	200037a0 	.word	0x200037a0
   148bc:	00013d09 	.word	0x00013d09
   148c0:	20000000 	.word	0x20000000
   148c4:	00013d41 	.word	0x00013d41
   148c8:	0001a44d 	.word	0x0001a44d
   148cc:	2000d76c 	.word	0x2000d76c
   148d0:	200037c0 	.word	0x200037c0
   148d4:	2000d870 	.word	0x2000d870
   148d8:	200037e0 	.word	0x200037e0
   148dc:	2000d78c 	.word	0x2000d78c
   148e0:	20003800 	.word	0x20003800
   148e4:	2000d830 	.word	0x2000d830
   148e8:	20003820 	.word	0x20003820
   148ec:	2000d850 	.word	0x2000d850
   148f0:	20003840 	.word	0x20003840
   148f4:	2000d748 	.word	0x2000d748
   148f8:	20003860 	.word	0x20003860
   148fc:	20003884 	.word	0x20003884
   14900:	000143f1 	.word	0x000143f1
   14904:	00014439 	.word	0x00014439

00014908 <_GLOBAL__sub_I_ptrCDCClass>:
   14908:	b580      	push	{r7, lr}
   1490a:	af00      	add	r7, sp, #0
   1490c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14910:	2001      	movs	r0, #1
   14912:	4b01      	ldr	r3, [pc, #4]	; (14918 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   14914:	4798      	blx	r3
   14916:	bd80      	pop	{r7, pc}
   14918:	00014805 	.word	0x00014805

0001491c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   1491c:	b590      	push	{r4, r7, lr}
   1491e:	b083      	sub	sp, #12
   14920:	af00      	add	r7, sp, #0
   14922:	6078      	str	r0, [r7, #4]
   14924:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   14926:	683b      	ldr	r3, [r7, #0]
   14928:	2b00      	cmp	r3, #0
   1492a:	d101      	bne.n	14930 <_ZN5Print5writeEPKc+0x14>
   1492c:	2300      	movs	r3, #0
   1492e:	e00c      	b.n	1494a <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   14930:	687b      	ldr	r3, [r7, #4]
   14932:	681b      	ldr	r3, [r3, #0]
   14934:	3304      	adds	r3, #4
   14936:	681c      	ldr	r4, [r3, #0]
   14938:	6838      	ldr	r0, [r7, #0]
   1493a:	4b06      	ldr	r3, [pc, #24]	; (14954 <_ZN5Print5writeEPKc+0x38>)
   1493c:	4798      	blx	r3
   1493e:	4603      	mov	r3, r0
   14940:	461a      	mov	r2, r3
   14942:	6839      	ldr	r1, [r7, #0]
   14944:	6878      	ldr	r0, [r7, #4]
   14946:	47a0      	blx	r4
   14948:	4603      	mov	r3, r0
    }
   1494a:	4618      	mov	r0, r3
   1494c:	370c      	adds	r7, #12
   1494e:	46bd      	mov	sp, r7
   14950:	bd90      	pop	{r4, r7, pc}
   14952:	bf00      	nop
   14954:	0001c701 	.word	0x0001c701

00014958 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   14958:	b580      	push	{r7, lr}
   1495a:	b086      	sub	sp, #24
   1495c:	af00      	add	r7, sp, #0
   1495e:	60f8      	str	r0, [r7, #12]
   14960:	60b9      	str	r1, [r7, #8]
   14962:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   14964:	2300      	movs	r3, #0
   14966:	617b      	str	r3, [r7, #20]
  while (size--) {
   14968:	687b      	ldr	r3, [r7, #4]
   1496a:	1e5a      	subs	r2, r3, #1
   1496c:	607a      	str	r2, [r7, #4]
   1496e:	2b00      	cmp	r3, #0
   14970:	bf14      	ite	ne
   14972:	2301      	movne	r3, #1
   14974:	2300      	moveq	r3, #0
   14976:	b2db      	uxtb	r3, r3
   14978:	2b00      	cmp	r3, #0
   1497a:	d016      	beq.n	149aa <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   1497c:	68fb      	ldr	r3, [r7, #12]
   1497e:	681b      	ldr	r3, [r3, #0]
   14980:	681a      	ldr	r2, [r3, #0]
   14982:	68bb      	ldr	r3, [r7, #8]
   14984:	1c59      	adds	r1, r3, #1
   14986:	60b9      	str	r1, [r7, #8]
   14988:	781b      	ldrb	r3, [r3, #0]
   1498a:	4619      	mov	r1, r3
   1498c:	68f8      	ldr	r0, [r7, #12]
   1498e:	4790      	blx	r2
   14990:	4603      	mov	r3, r0
   14992:	2b00      	cmp	r3, #0
   14994:	bf14      	ite	ne
   14996:	2301      	movne	r3, #1
   14998:	2300      	moveq	r3, #0
   1499a:	b2db      	uxtb	r3, r3
   1499c:	2b00      	cmp	r3, #0
   1499e:	d003      	beq.n	149a8 <_ZN5Print5writeEPKhj+0x50>
   149a0:	697b      	ldr	r3, [r7, #20]
   149a2:	3301      	adds	r3, #1
   149a4:	617b      	str	r3, [r7, #20]
  while (size--) {
   149a6:	e7df      	b.n	14968 <_ZN5Print5writeEPKhj+0x10>
    else break;
   149a8:	bf00      	nop
  }
  return n;
   149aa:	697b      	ldr	r3, [r7, #20]
}
   149ac:	4618      	mov	r0, r3
   149ae:	3718      	adds	r7, #24
   149b0:	46bd      	mov	sp, r7
   149b2:	bd80      	pop	{r7, pc}

000149b4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   149b4:	b580      	push	{r7, lr}
   149b6:	b082      	sub	sp, #8
   149b8:	af00      	add	r7, sp, #0
   149ba:	6078      	str	r0, [r7, #4]
   149bc:	6039      	str	r1, [r7, #0]
  return write(str);
   149be:	6839      	ldr	r1, [r7, #0]
   149c0:	6878      	ldr	r0, [r7, #4]
   149c2:	4b03      	ldr	r3, [pc, #12]	; (149d0 <_ZN5Print5printEPKc+0x1c>)
   149c4:	4798      	blx	r3
   149c6:	4603      	mov	r3, r0
}
   149c8:	4618      	mov	r0, r3
   149ca:	3708      	adds	r7, #8
   149cc:	46bd      	mov	sp, r7
   149ce:	bd80      	pop	{r7, pc}
   149d0:	0001491d 	.word	0x0001491d

000149d4 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   149d4:	b580      	push	{r7, lr}
   149d6:	b084      	sub	sp, #16
   149d8:	af00      	add	r7, sp, #0
   149da:	60f8      	str	r0, [r7, #12]
   149dc:	460b      	mov	r3, r1
   149de:	607a      	str	r2, [r7, #4]
   149e0:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   149e2:	7afb      	ldrb	r3, [r7, #11]
   149e4:	687a      	ldr	r2, [r7, #4]
   149e6:	4619      	mov	r1, r3
   149e8:	68f8      	ldr	r0, [r7, #12]
   149ea:	4b03      	ldr	r3, [pc, #12]	; (149f8 <_ZN5Print5printEhi+0x24>)
   149ec:	4798      	blx	r3
   149ee:	4603      	mov	r3, r0
}
   149f0:	4618      	mov	r0, r3
   149f2:	3710      	adds	r7, #16
   149f4:	46bd      	mov	sp, r7
   149f6:	bd80      	pop	{r7, pc}
   149f8:	000149fd 	.word	0x000149fd

000149fc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   149fc:	b580      	push	{r7, lr}
   149fe:	b084      	sub	sp, #16
   14a00:	af00      	add	r7, sp, #0
   14a02:	60f8      	str	r0, [r7, #12]
   14a04:	60b9      	str	r1, [r7, #8]
   14a06:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   14a08:	687b      	ldr	r3, [r7, #4]
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d109      	bne.n	14a22 <_ZN5Print5printEmi+0x26>
   14a0e:	68fb      	ldr	r3, [r7, #12]
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	681b      	ldr	r3, [r3, #0]
   14a14:	68ba      	ldr	r2, [r7, #8]
   14a16:	b2d2      	uxtb	r2, r2
   14a18:	4611      	mov	r1, r2
   14a1a:	68f8      	ldr	r0, [r7, #12]
   14a1c:	4798      	blx	r3
   14a1e:	4603      	mov	r3, r0
   14a20:	e007      	b.n	14a32 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   14a22:	687b      	ldr	r3, [r7, #4]
   14a24:	b2db      	uxtb	r3, r3
   14a26:	461a      	mov	r2, r3
   14a28:	68b9      	ldr	r1, [r7, #8]
   14a2a:	68f8      	ldr	r0, [r7, #12]
   14a2c:	4b03      	ldr	r3, [pc, #12]	; (14a3c <_ZN5Print5printEmi+0x40>)
   14a2e:	4798      	blx	r3
   14a30:	4603      	mov	r3, r0
}
   14a32:	4618      	mov	r0, r3
   14a34:	3710      	adds	r7, #16
   14a36:	46bd      	mov	sp, r7
   14a38:	bd80      	pop	{r7, pc}
   14a3a:	bf00      	nop
   14a3c:	00014a99 	.word	0x00014a99

00014a40 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   14a40:	b580      	push	{r7, lr}
   14a42:	b082      	sub	sp, #8
   14a44:	af00      	add	r7, sp, #0
   14a46:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   14a48:	4904      	ldr	r1, [pc, #16]	; (14a5c <_ZN5Print7printlnEv+0x1c>)
   14a4a:	6878      	ldr	r0, [r7, #4]
   14a4c:	4b04      	ldr	r3, [pc, #16]	; (14a60 <_ZN5Print7printlnEv+0x20>)
   14a4e:	4798      	blx	r3
   14a50:	4603      	mov	r3, r0
}
   14a52:	4618      	mov	r0, r3
   14a54:	3708      	adds	r7, #8
   14a56:	46bd      	mov	sp, r7
   14a58:	bd80      	pop	{r7, pc}
   14a5a:	bf00      	nop
   14a5c:	0001dc10 	.word	0x0001dc10
   14a60:	0001491d 	.word	0x0001491d

00014a64 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   14a64:	b580      	push	{r7, lr}
   14a66:	b084      	sub	sp, #16
   14a68:	af00      	add	r7, sp, #0
   14a6a:	6078      	str	r0, [r7, #4]
   14a6c:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   14a6e:	6839      	ldr	r1, [r7, #0]
   14a70:	6878      	ldr	r0, [r7, #4]
   14a72:	4b07      	ldr	r3, [pc, #28]	; (14a90 <_ZN5Print7printlnEPKc+0x2c>)
   14a74:	4798      	blx	r3
   14a76:	60f8      	str	r0, [r7, #12]
  n += println();
   14a78:	6878      	ldr	r0, [r7, #4]
   14a7a:	4b06      	ldr	r3, [pc, #24]	; (14a94 <_ZN5Print7printlnEPKc+0x30>)
   14a7c:	4798      	blx	r3
   14a7e:	4602      	mov	r2, r0
   14a80:	68fb      	ldr	r3, [r7, #12]
   14a82:	4413      	add	r3, r2
   14a84:	60fb      	str	r3, [r7, #12]
  return n;
   14a86:	68fb      	ldr	r3, [r7, #12]
}
   14a88:	4618      	mov	r0, r3
   14a8a:	3710      	adds	r7, #16
   14a8c:	46bd      	mov	sp, r7
   14a8e:	bd80      	pop	{r7, pc}
   14a90:	000149b5 	.word	0x000149b5
   14a94:	00014a41 	.word	0x00014a41

00014a98 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   14a98:	b580      	push	{r7, lr}
   14a9a:	b08e      	sub	sp, #56	; 0x38
   14a9c:	af00      	add	r7, sp, #0
   14a9e:	60f8      	str	r0, [r7, #12]
   14aa0:	60b9      	str	r1, [r7, #8]
   14aa2:	4613      	mov	r3, r2
   14aa4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   14aa6:	f107 0310 	add.w	r3, r7, #16
   14aaa:	3320      	adds	r3, #32
   14aac:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   14aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ab0:	2200      	movs	r2, #0
   14ab2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   14ab4:	79fb      	ldrb	r3, [r7, #7]
   14ab6:	2b01      	cmp	r3, #1
   14ab8:	dc01      	bgt.n	14abe <_ZN5Print11printNumberEmh+0x26>
   14aba:	230a      	movs	r3, #10
   14abc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   14abe:	79fa      	ldrb	r2, [r7, #7]
   14ac0:	68bb      	ldr	r3, [r7, #8]
   14ac2:	fbb3 f1f2 	udiv	r1, r3, r2
   14ac6:	fb02 f201 	mul.w	r2, r2, r1
   14aca:	1a9b      	subs	r3, r3, r2
   14acc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   14ad0:	79fb      	ldrb	r3, [r7, #7]
   14ad2:	68ba      	ldr	r2, [r7, #8]
   14ad4:	fbb2 f3f3 	udiv	r3, r2, r3
   14ad8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   14ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14adc:	3b01      	subs	r3, #1
   14ade:	637b      	str	r3, [r7, #52]	; 0x34
   14ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14ae4:	2b09      	cmp	r3, #9
   14ae6:	dc04      	bgt.n	14af2 <_ZN5Print11printNumberEmh+0x5a>
   14ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14aec:	3330      	adds	r3, #48	; 0x30
   14aee:	b2db      	uxtb	r3, r3
   14af0:	e003      	b.n	14afa <_ZN5Print11printNumberEmh+0x62>
   14af2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14af6:	3337      	adds	r3, #55	; 0x37
   14af8:	b2db      	uxtb	r3, r3
   14afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14afc:	7013      	strb	r3, [r2, #0]
  } while(n);
   14afe:	68bb      	ldr	r3, [r7, #8]
   14b00:	2b00      	cmp	r3, #0
   14b02:	d000      	beq.n	14b06 <_ZN5Print11printNumberEmh+0x6e>
  do {
   14b04:	e7db      	b.n	14abe <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   14b06:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14b08:	68f8      	ldr	r0, [r7, #12]
   14b0a:	4b03      	ldr	r3, [pc, #12]	; (14b18 <_ZN5Print11printNumberEmh+0x80>)
   14b0c:	4798      	blx	r3
   14b0e:	4603      	mov	r3, r0
}
   14b10:	4618      	mov	r0, r3
   14b12:	3738      	adds	r7, #56	; 0x38
   14b14:	46bd      	mov	sp, r7
   14b16:	bd80      	pop	{r7, pc}
   14b18:	0001491d 	.word	0x0001491d

00014b1c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   14b1c:	b480      	push	{r7}
   14b1e:	b083      	sub	sp, #12
   14b20:	af00      	add	r7, sp, #0
   14b22:	6078      	str	r0, [r7, #4]
   14b24:	460b      	mov	r3, r1
   14b26:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   14b28:	78fb      	ldrb	r3, [r7, #3]
   14b2a:	687a      	ldr	r2, [r7, #4]
   14b2c:	01db      	lsls	r3, r3, #7
   14b2e:	4413      	add	r3, r2
   14b30:	681b      	ldr	r3, [r3, #0]
}
   14b32:	4618      	mov	r0, r3
   14b34:	370c      	adds	r7, #12
   14b36:	46bd      	mov	sp, r7
   14b38:	bc80      	pop	{r7}
   14b3a:	4770      	bx	lr

00014b3c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   14b3c:	b480      	push	{r7}
   14b3e:	b083      	sub	sp, #12
   14b40:	af00      	add	r7, sp, #0
   14b42:	6078      	str	r0, [r7, #4]
   14b44:	460b      	mov	r3, r1
   14b46:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   14b48:	78fb      	ldrb	r3, [r7, #3]
   14b4a:	687a      	ldr	r2, [r7, #4]
   14b4c:	01db      	lsls	r3, r3, #7
   14b4e:	4413      	add	r3, r2
   14b50:	3310      	adds	r3, #16
   14b52:	681b      	ldr	r3, [r3, #0]
}
   14b54:	4618      	mov	r0, r3
   14b56:	370c      	adds	r7, #12
   14b58:	46bd      	mov	sp, r7
   14b5a:	bc80      	pop	{r7}
   14b5c:	4770      	bx	lr

00014b5e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   14b5e:	b480      	push	{r7}
   14b60:	b083      	sub	sp, #12
   14b62:	af00      	add	r7, sp, #0
   14b64:	6078      	str	r0, [r7, #4]
   14b66:	460b      	mov	r3, r1
   14b68:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   14b6a:	78fb      	ldrb	r3, [r7, #3]
   14b6c:	687a      	ldr	r2, [r7, #4]
   14b6e:	01db      	lsls	r3, r3, #7
   14b70:	4413      	add	r3, r2
   14b72:	3320      	adds	r3, #32
   14b74:	681b      	ldr	r3, [r3, #0]
}
   14b76:	4618      	mov	r0, r3
   14b78:	370c      	adds	r7, #12
   14b7a:	46bd      	mov	sp, r7
   14b7c:	bc80      	pop	{r7}
   14b7e:	4770      	bx	lr

00014b80 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   14b80:	b580      	push	{r7, lr}
   14b82:	b086      	sub	sp, #24
   14b84:	af00      	add	r7, sp, #0
   14b86:	4603      	mov	r3, r0
   14b88:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   14b8a:	f107 030c 	add.w	r3, r7, #12
   14b8e:	4618      	mov	r0, r3
   14b90:	4b13      	ldr	r3, [pc, #76]	; (14be0 <_gpio_get_level+0x60>)
   14b92:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   14b94:	79fb      	ldrb	r3, [r7, #7]
   14b96:	4619      	mov	r1, r3
   14b98:	4812      	ldr	r0, [pc, #72]	; (14be4 <_gpio_get_level+0x64>)
   14b9a:	4b13      	ldr	r3, [pc, #76]	; (14be8 <_gpio_get_level+0x68>)
   14b9c:	4798      	blx	r3
   14b9e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   14ba0:	79fb      	ldrb	r3, [r7, #7]
   14ba2:	4619      	mov	r1, r3
   14ba4:	480f      	ldr	r0, [pc, #60]	; (14be4 <_gpio_get_level+0x64>)
   14ba6:	4b11      	ldr	r3, [pc, #68]	; (14bec <_gpio_get_level+0x6c>)
   14ba8:	4798      	blx	r3
   14baa:	4602      	mov	r2, r0
   14bac:	697b      	ldr	r3, [r7, #20]
   14bae:	43db      	mvns	r3, r3
   14bb0:	4013      	ands	r3, r2
   14bb2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   14bb4:	79fb      	ldrb	r3, [r7, #7]
   14bb6:	4619      	mov	r1, r3
   14bb8:	480a      	ldr	r0, [pc, #40]	; (14be4 <_gpio_get_level+0x64>)
   14bba:	4b0d      	ldr	r3, [pc, #52]	; (14bf0 <_gpio_get_level+0x70>)
   14bbc:	4798      	blx	r3
   14bbe:	4602      	mov	r2, r0
   14bc0:	697b      	ldr	r3, [r7, #20]
   14bc2:	4013      	ands	r3, r2
   14bc4:	693a      	ldr	r2, [r7, #16]
   14bc6:	4313      	orrs	r3, r2
   14bc8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   14bca:	f107 030c 	add.w	r3, r7, #12
   14bce:	4618      	mov	r0, r3
   14bd0:	4b08      	ldr	r3, [pc, #32]	; (14bf4 <_gpio_get_level+0x74>)
   14bd2:	4798      	blx	r3

	return tmp;
   14bd4:	693b      	ldr	r3, [r7, #16]
}
   14bd6:	4618      	mov	r0, r3
   14bd8:	3718      	adds	r7, #24
   14bda:	46bd      	mov	sp, r7
   14bdc:	bd80      	pop	{r7, pc}
   14bde:	bf00      	nop
   14be0:	0000ff79 	.word	0x0000ff79
   14be4:	41008000 	.word	0x41008000
   14be8:	00014b1d 	.word	0x00014b1d
   14bec:	00014b5f 	.word	0x00014b5f
   14bf0:	00014b3d 	.word	0x00014b3d
   14bf4:	0000ff9f 	.word	0x0000ff9f

00014bf8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   14bf8:	b580      	push	{r7, lr}
   14bfa:	b082      	sub	sp, #8
   14bfc:	af00      	add	r7, sp, #0
   14bfe:	4603      	mov	r3, r0
   14c00:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   14c02:	79fb      	ldrb	r3, [r7, #7]
   14c04:	115b      	asrs	r3, r3, #5
   14c06:	b2db      	uxtb	r3, r3
   14c08:	4618      	mov	r0, r3
   14c0a:	4b09      	ldr	r3, [pc, #36]	; (14c30 <gpio_get_pin_level+0x38>)
   14c0c:	4798      	blx	r3
   14c0e:	4601      	mov	r1, r0
   14c10:	79fb      	ldrb	r3, [r7, #7]
   14c12:	f003 031f 	and.w	r3, r3, #31
   14c16:	2201      	movs	r2, #1
   14c18:	fa02 f303 	lsl.w	r3, r2, r3
   14c1c:	400b      	ands	r3, r1
   14c1e:	2b00      	cmp	r3, #0
   14c20:	bf14      	ite	ne
   14c22:	2301      	movne	r3, #1
   14c24:	2300      	moveq	r3, #0
   14c26:	b2db      	uxtb	r3, r3
}
   14c28:	4618      	mov	r0, r3
   14c2a:	3708      	adds	r7, #8
   14c2c:	46bd      	mov	sp, r7
   14c2e:	bd80      	pop	{r7, pc}
   14c30:	00014b81 	.word	0x00014b81

00014c34 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   14c34:	b480      	push	{r7}
   14c36:	b083      	sub	sp, #12
   14c38:	af00      	add	r7, sp, #0
   14c3a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   14c3c:	4b06      	ldr	r3, [pc, #24]	; (14c58 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   14c3e:	681b      	ldr	r3, [r3, #0]
   14c40:	2201      	movs	r2, #1
   14c42:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   14c44:	4b04      	ldr	r3, [pc, #16]	; (14c58 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   14c46:	681b      	ldr	r3, [r3, #0]
   14c48:	2200      	movs	r2, #0
   14c4a:	705a      	strb	r2, [r3, #1]
}
   14c4c:	bf00      	nop
   14c4e:	370c      	adds	r7, #12
   14c50:	46bd      	mov	sp, r7
   14c52:	bc80      	pop	{r7}
   14c54:	4770      	bx	lr
   14c56:	bf00      	nop
   14c58:	200039c4 	.word	0x200039c4

00014c5c <_ZL10USBPluggedv>:

static void USBPlugged(void){
   14c5c:	b580      	push	{r7, lr}
   14c5e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   14c60:	2040      	movs	r0, #64	; 0x40
   14c62:	4b0a      	ldr	r3, [pc, #40]	; (14c8c <_ZL10USBPluggedv+0x30>)
   14c64:	4798      	blx	r3
   14c66:	4603      	mov	r3, r0
   14c68:	2b00      	cmp	r3, #0
   14c6a:	d004      	beq.n	14c76 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   14c6c:	4b08      	ldr	r3, [pc, #32]	; (14c90 <_ZL10USBPluggedv+0x34>)
   14c6e:	681b      	ldr	r3, [r3, #0]
   14c70:	2201      	movs	r2, #1
   14c72:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   14c74:	e007      	b.n	14c86 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   14c76:	4b06      	ldr	r3, [pc, #24]	; (14c90 <_ZL10USBPluggedv+0x34>)
   14c78:	681b      	ldr	r3, [r3, #0]
   14c7a:	2200      	movs	r2, #0
   14c7c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   14c7e:	4b04      	ldr	r3, [pc, #16]	; (14c90 <_ZL10USBPluggedv+0x34>)
   14c80:	681b      	ldr	r3, [r3, #0]
   14c82:	2200      	movs	r2, #0
   14c84:	701a      	strb	r2, [r3, #0]
}
   14c86:	bf00      	nop
   14c88:	bd80      	pop	{r7, pc}
   14c8a:	bf00      	nop
   14c8c:	00014bf9 	.word	0x00014bf9
   14c90:	200039c4 	.word	0x200039c4

00014c94 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   14c94:	b480      	push	{r7}
   14c96:	b083      	sub	sp, #12
   14c98:	af00      	add	r7, sp, #0
   14c9a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   14c9c:	4a04      	ldr	r2, [pc, #16]	; (14cb0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   14c9e:	687b      	ldr	r3, [r7, #4]
   14ca0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   14ca2:	687b      	ldr	r3, [r7, #4]
   14ca4:	4618      	mov	r0, r3
   14ca6:	370c      	adds	r7, #12
   14ca8:	46bd      	mov	sp, r7
   14caa:	bc80      	pop	{r7}
   14cac:	4770      	bx	lr
   14cae:	bf00      	nop
   14cb0:	200039c4 	.word	0x200039c4

00014cb4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   14cb4:	b480      	push	{r7}
   14cb6:	b083      	sub	sp, #12
   14cb8:	af00      	add	r7, sp, #0
   14cba:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   14cbc:	687b      	ldr	r3, [r7, #4]
   14cbe:	4618      	mov	r0, r3
   14cc0:	370c      	adds	r7, #12
   14cc2:	46bd      	mov	sp, r7
   14cc4:	bc80      	pop	{r7}
   14cc6:	4770      	bx	lr

00014cc8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   14cc8:	b580      	push	{r7, lr}
   14cca:	b082      	sub	sp, #8
   14ccc:	af00      	add	r7, sp, #0
   14cce:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   14cd0:	491e      	ldr	r1, [pc, #120]	; (14d4c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   14cd2:	2040      	movs	r0, #64	; 0x40
   14cd4:	4b1e      	ldr	r3, [pc, #120]	; (14d50 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   14cd6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   14cd8:	481e      	ldr	r0, [pc, #120]	; (14d54 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   14cda:	4b1f      	ldr	r3, [pc, #124]	; (14d58 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   14cdc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   14cde:	2040      	movs	r0, #64	; 0x40
   14ce0:	4b1e      	ldr	r3, [pc, #120]	; (14d5c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   14ce2:	4798      	blx	r3
   14ce4:	4603      	mov	r3, r0
   14ce6:	461a      	mov	r2, r3
   14ce8:	687b      	ldr	r3, [r7, #4]
   14cea:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   14cec:	687b      	ldr	r3, [r7, #4]
   14cee:	78db      	ldrb	r3, [r3, #3]
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d021      	beq.n	14d38 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   14cf4:	687b      	ldr	r3, [r7, #4]
   14cf6:	2200      	movs	r2, #0
   14cf8:	709a      	strb	r2, [r3, #2]
			plugged=true;
   14cfa:	687b      	ldr	r3, [r7, #4]
   14cfc:	2201      	movs	r2, #1
   14cfe:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   14d00:	f44f 7216 	mov.w	r2, #600	; 0x258
   14d04:	4916      	ldr	r1, [pc, #88]	; (14d60 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   14d06:	4813      	ldr	r0, [pc, #76]	; (14d54 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   14d08:	4b16      	ldr	r3, [pc, #88]	; (14d64 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   14d0a:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   14d0c:	4816      	ldr	r0, [pc, #88]	; (14d68 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   14d0e:	4b17      	ldr	r3, [pc, #92]	; (14d6c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   14d10:	4798      	blx	r3
   14d12:	4603      	mov	r3, r0
   14d14:	f083 0301 	eor.w	r3, r3, #1
   14d18:	b2db      	uxtb	r3, r3
   14d1a:	2b00      	cmp	r3, #0
   14d1c:	d008      	beq.n	14d30 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   14d1e:	687b      	ldr	r3, [r7, #4]
   14d20:	789b      	ldrb	r3, [r3, #2]
   14d22:	b2db      	uxtb	r3, r3
   14d24:	2b00      	cmp	r3, #0
   14d26:	d0f1      	beq.n	14d0c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   14d28:	687b      	ldr	r3, [r7, #4]
   14d2a:	2200      	movs	r2, #0
   14d2c:	701a      	strb	r2, [r3, #0]
					return;
   14d2e:	e009      	b.n	14d44 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   14d30:	4808      	ldr	r0, [pc, #32]	; (14d54 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   14d32:	4b0f      	ldr	r3, [pc, #60]	; (14d70 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   14d34:	4798      	blx	r3
   14d36:	e005      	b.n	14d44 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   14d38:	687b      	ldr	r3, [r7, #4]
   14d3a:	2200      	movs	r2, #0
   14d3c:	701a      	strb	r2, [r3, #0]
			plugged=false;
   14d3e:	687b      	ldr	r3, [r7, #4]
   14d40:	2200      	movs	r2, #0
   14d42:	705a      	strb	r2, [r3, #1]
		}
		
}
   14d44:	3708      	adds	r7, #8
   14d46:	46bd      	mov	sp, r7
   14d48:	bd80      	pop	{r7, pc}
   14d4a:	bf00      	nop
   14d4c:	00014c5d 	.word	0x00014c5d
   14d50:	00006511 	.word	0x00006511
   14d54:	20003984 	.word	0x20003984
   14d58:	00013df5 	.word	0x00013df5
   14d5c:	00014bf9 	.word	0x00014bf9
   14d60:	00014c35 	.word	0x00014c35
   14d64:	00013ff5 	.word	0x00013ff5
   14d68:	20003884 	.word	0x20003884
   14d6c:	000144a9 	.word	0x000144a9
   14d70:	00013e69 	.word	0x00013e69

00014d74 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   14d74:	b580      	push	{r7, lr}
   14d76:	b082      	sub	sp, #8
   14d78:	af00      	add	r7, sp, #0
   14d7a:	6078      	str	r0, [r7, #4]
   14d7c:	6039      	str	r1, [r7, #0]
   14d7e:	687b      	ldr	r3, [r7, #4]
   14d80:	2b01      	cmp	r3, #1
   14d82:	d143      	bne.n	14e0c <_Z41__static_initialization_and_destruction_0ii+0x98>
   14d84:	683b      	ldr	r3, [r7, #0]
   14d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d8a:	4293      	cmp	r3, r2
   14d8c:	d13e      	bne.n	14e0c <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   14d8e:	4921      	ldr	r1, [pc, #132]	; (14e14 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   14d90:	4821      	ldr	r0, [pc, #132]	; (14e18 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   14d92:	4b22      	ldr	r3, [pc, #136]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14d94:	4798      	blx	r3
   14d96:	4a22      	ldr	r2, [pc, #136]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14d98:	4922      	ldr	r1, [pc, #136]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14d9a:	481f      	ldr	r0, [pc, #124]	; (14e18 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   14d9c:	4b22      	ldr	r3, [pc, #136]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14d9e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   14da0:	4922      	ldr	r1, [pc, #136]	; (14e2c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   14da2:	4823      	ldr	r0, [pc, #140]	; (14e30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14da4:	4b1d      	ldr	r3, [pc, #116]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14da6:	4798      	blx	r3
   14da8:	4a1d      	ldr	r2, [pc, #116]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14daa:	491e      	ldr	r1, [pc, #120]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14dac:	4820      	ldr	r0, [pc, #128]	; (14e30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   14dae:	4b1e      	ldr	r3, [pc, #120]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14db0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   14db2:	4920      	ldr	r1, [pc, #128]	; (14e34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   14db4:	4820      	ldr	r0, [pc, #128]	; (14e38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14db6:	4b19      	ldr	r3, [pc, #100]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14db8:	4798      	blx	r3
   14dba:	4a19      	ldr	r2, [pc, #100]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14dbc:	4919      	ldr	r1, [pc, #100]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14dbe:	481e      	ldr	r0, [pc, #120]	; (14e38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   14dc0:	4b19      	ldr	r3, [pc, #100]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14dc2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14dc4:	491d      	ldr	r1, [pc, #116]	; (14e3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   14dc6:	481e      	ldr	r0, [pc, #120]	; (14e40 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   14dc8:	4b14      	ldr	r3, [pc, #80]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14dca:	4798      	blx	r3
   14dcc:	4a14      	ldr	r2, [pc, #80]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14dce:	4915      	ldr	r1, [pc, #84]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14dd0:	481b      	ldr	r0, [pc, #108]	; (14e40 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   14dd2:	4b15      	ldr	r3, [pc, #84]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14dd4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   14dd6:	491b      	ldr	r1, [pc, #108]	; (14e44 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   14dd8:	481b      	ldr	r0, [pc, #108]	; (14e48 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   14dda:	4b10      	ldr	r3, [pc, #64]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14ddc:	4798      	blx	r3
   14dde:	4a10      	ldr	r2, [pc, #64]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14de0:	4910      	ldr	r1, [pc, #64]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14de2:	4819      	ldr	r0, [pc, #100]	; (14e48 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   14de4:	4b10      	ldr	r3, [pc, #64]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14de6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   14de8:	4918      	ldr	r1, [pc, #96]	; (14e4c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   14dea:	4819      	ldr	r0, [pc, #100]	; (14e50 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   14dec:	4b0b      	ldr	r3, [pc, #44]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14dee:	4798      	blx	r3
   14df0:	4a0b      	ldr	r2, [pc, #44]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14df2:	490c      	ldr	r1, [pc, #48]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14df4:	4816      	ldr	r0, [pc, #88]	; (14e50 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   14df6:	4b0c      	ldr	r3, [pc, #48]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14df8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14dfa:	4916      	ldr	r1, [pc, #88]	; (14e54 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   14dfc:	4816      	ldr	r0, [pc, #88]	; (14e58 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   14dfe:	4b07      	ldr	r3, [pc, #28]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   14e00:	4798      	blx	r3
   14e02:	4a07      	ldr	r2, [pc, #28]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   14e04:	4907      	ldr	r1, [pc, #28]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   14e06:	4814      	ldr	r0, [pc, #80]	; (14e58 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   14e08:	4b07      	ldr	r3, [pc, #28]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   14e0a:	4798      	blx	r3
   14e0c:	bf00      	nop
   14e0e:	3708      	adds	r7, #8
   14e10:	46bd      	mov	sp, r7
   14e12:	bd80      	pop	{r7, pc}
   14e14:	2000d6d8 	.word	0x2000d6d8
   14e18:	200038e4 	.word	0x200038e4
   14e1c:	00013d09 	.word	0x00013d09
   14e20:	20000000 	.word	0x20000000
   14e24:	00013d41 	.word	0x00013d41
   14e28:	0001a44d 	.word	0x0001a44d
   14e2c:	2000d76c 	.word	0x2000d76c
   14e30:	20003904 	.word	0x20003904
   14e34:	2000d870 	.word	0x2000d870
   14e38:	20003924 	.word	0x20003924
   14e3c:	2000d78c 	.word	0x2000d78c
   14e40:	20003944 	.word	0x20003944
   14e44:	2000d830 	.word	0x2000d830
   14e48:	20003964 	.word	0x20003964
   14e4c:	2000d850 	.word	0x2000d850
   14e50:	20003984 	.word	0x20003984
   14e54:	2000d748 	.word	0x2000d748
   14e58:	200039a4 	.word	0x200039a4

00014e5c <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   14e5c:	b580      	push	{r7, lr}
   14e5e:	af00      	add	r7, sp, #0
   14e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14e64:	2001      	movs	r0, #1
   14e66:	4b01      	ldr	r3, [pc, #4]	; (14e6c <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   14e68:	4798      	blx	r3
   14e6a:	bd80      	pop	{r7, pc}
   14e6c:	00014d75 	.word	0x00014d75

00014e70 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   14e70:	4770      	bx	lr

00014e72 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   14e72:	4770      	bx	lr

00014e74 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   14e74:	1f0b      	subs	r3, r1, #4
   14e76:	300c      	adds	r0, #12
   14e78:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   14e7a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   14e7e:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   14e82:	428b      	cmp	r3, r1
   14e84:	d1f9      	bne.n	14e7a <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   14e86:	2000      	movs	r0, #0
   14e88:	4770      	bx	lr
	...

00014e8c <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   14e8c:	b510      	push	{r4, lr}
   14e8e:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   14e90:	68c0      	ldr	r0, [r0, #12]
   14e92:	4b08      	ldr	r3, [pc, #32]	; (14eb4 <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
   14e94:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   14e96:	f3c0 1100 	ubfx	r1, r0, #4, #1
   14e9a:	78e3      	ldrb	r3, [r4, #3]
   14e9c:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   14ea0:	f3c0 1140 	ubfx	r1, r0, #5, #1
   14ea4:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   14ea8:	f3c0 1280 	ubfx	r2, r0, #6, #1
   14eac:	f362 0300 	bfi	r3, r2, #0, #1
   14eb0:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
   14eb2:	bd10      	pop	{r4, pc}
   14eb4:	00018d45 	.word	0x00018d45

00014eb8 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   14eb8:	b510      	push	{r4, lr}
   14eba:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,state);
   14ebc:	460a      	mov	r2, r1
   14ebe:	2100      	movs	r1, #0
   14ec0:	68c0      	ldr	r0, [r0, #12]
   14ec2:	4b02      	ldr	r3, [pc, #8]	; (14ecc <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   14ec4:	4798      	blx	r3
   14ec6:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
   14ec8:	bd10      	pop	{r4, pc}
   14eca:	bf00      	nop
   14ecc:	00018fb5 	.word	0x00018fb5

00014ed0 <_ZN19CondesatorFan_Class9IsEnabledEv>:
uint8_t	CondesatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
	return uint8_t(enabled);
}
bool CondesatorFan_Class::IsEnabled(void){
   14ed0:	b510      	push	{r4, lr}
   14ed2:	4604      	mov	r4, r0
	uint8_t value=expanders[0]->ReadGPIORegister();
   14ed4:	68c0      	ldr	r0, [r0, #12]
   14ed6:	4b03      	ldr	r3, [pc, #12]	; (14ee4 <_ZN19CondesatorFan_Class9IsEnabledEv+0x14>)
   14ed8:	4798      	blx	r3
	enabled=(value&0x01);
   14eda:	f000 0001 	and.w	r0, r0, #1
   14ede:	7060      	strb	r0, [r4, #1]
	return enabled;
}
   14ee0:	bd10      	pop	{r4, pc}
   14ee2:	bf00      	nop
   14ee4:	00018d45 	.word	0x00018d45

00014ee8 <_ZN19CondesatorFan_Class6SetPWMEh>:


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   14ee8:	b510      	push	{r4, lr}
   14eea:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   14eec:	6a40      	ldr	r0, [r0, #36]	; 0x24
   14eee:	4b02      	ldr	r3, [pc, #8]	; (14ef8 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   14ef0:	4798      	blx	r3
   14ef2:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
   14ef4:	bd10      	pop	{r4, pc}
   14ef6:	bf00      	nop
   14ef8:	00018dc9 	.word	0x00018dc9

00014efc <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   14efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f00:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
   14f02:	2100      	movs	r1, #0
   14f04:	4c0f      	ldr	r4, [pc, #60]	; (14f44 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
   14f06:	47a0      	blx	r4
		SetPWM(0xff);
   14f08:	21ff      	movs	r1, #255	; 0xff
   14f0a:	4628      	mov	r0, r5
   14f0c:	4b0e      	ldr	r3, [pc, #56]	; (14f48 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
   14f0e:	4798      	blx	r3
		SetEnable(true);
   14f10:	2101      	movs	r1, #1
   14f12:	4628      	mov	r0, r5
   14f14:	47a0      	blx	r4
   14f16:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
   14f18:	4f0b      	ldr	r7, [pc, #44]	; (14f48 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
   14f1a:	f04f 080a 	mov.w	r8, #10
   14f1e:	4e0b      	ldr	r6, [pc, #44]	; (14f4c <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
   14f20:	4621      	mov	r1, r4
   14f22:	4628      	mov	r0, r5
   14f24:	47b8      	blx	r7
			delay_us(10);
   14f26:	4640      	mov	r0, r8
   14f28:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
   14f2a:	3c01      	subs	r4, #1
   14f2c:	b2e4      	uxtb	r4, r4
   14f2e:	2c10      	cmp	r4, #16
   14f30:	d1f6      	bne.n	14f20 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
   14f32:	4628      	mov	r0, r5
   14f34:	4b06      	ldr	r3, [pc, #24]	; (14f50 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
   14f36:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   14f38:	78e8      	ldrb	r0, [r5, #3]
		return result;
   14f3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   14f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f42:	bf00      	nop
   14f44:	00014eb9 	.word	0x00014eb9
   14f48:	00014ee9 	.word	0x00014ee9
   14f4c:	00006449 	.word	0x00006449
   14f50:	00014e8d 	.word	0x00014e8d

00014f54 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   14f54:	b510      	push	{r4, lr}
   14f56:	4604      	mov	r4, r0
	i2c=i2cClass;
   14f58:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   14f5a:	7a4b      	ldrb	r3, [r1, #9]
   14f5c:	b90b      	cbnz	r3, 14f62 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   14f5e:	78a0      	ldrb	r0, [r4, #2]
   14f60:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   14f62:	4611      	mov	r1, r2
   14f64:	4b04      	ldr	r3, [pc, #16]	; (14f78 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   14f66:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   14f68:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14f6a:	4b04      	ldr	r3, [pc, #16]	; (14f7c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   14f6c:	4798      	blx	r3
		isOK=SelfTest();
   14f6e:	4620      	mov	r0, r4
   14f70:	4b03      	ldr	r3, [pc, #12]	; (14f80 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   14f72:	4798      	blx	r3
   14f74:	70a0      	strb	r0, [r4, #2]
   14f76:	e7f2      	b.n	14f5e <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   14f78:	00014e75 	.word	0x00014e75
   14f7c:	00018ebd 	.word	0x00018ebd
   14f80:	00014efd 	.word	0x00014efd

00014f84 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   14f84:	b510      	push	{r4, lr}
   14f86:	4604      	mov	r4, r0
   14f88:	302c      	adds	r0, #44	; 0x2c
   14f8a:	4b03      	ldr	r3, [pc, #12]	; (14f98 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   14f8c:	4798      	blx	r3
   14f8e:	4620      	mov	r0, r4
   14f90:	4b02      	ldr	r3, [pc, #8]	; (14f9c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   14f92:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   14f94:	4620      	mov	r0, r4
   14f96:	bd10      	pop	{r4, pc}
   14f98:	00014e73 	.word	0x00014e73
   14f9c:	000151cd 	.word	0x000151cd

00014fa0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   14fa0:	b570      	push	{r4, r5, r6, lr}
   14fa2:	4c05      	ldr	r4, [pc, #20]	; (14fb8 <__tcf_1+0x18>)
   14fa4:	4e05      	ldr	r6, [pc, #20]	; (14fbc <__tcf_1+0x1c>)
   14fa6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   14faa:	3c1c      	subs	r4, #28
   14fac:	4620      	mov	r0, r4
   14fae:	47b0      	blx	r6
   14fb0:	42ac      	cmp	r4, r5
   14fb2:	d1fa      	bne.n	14faa <__tcf_1+0xa>
   14fb4:	bd70      	pop	{r4, r5, r6, pc}
   14fb6:	bf00      	nop
   14fb8:	20003a8c 	.word	0x20003a8c
   14fbc:	00018c4b 	.word	0x00018c4b

00014fc0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   14fc0:	b510      	push	{r4, lr}
   14fc2:	4803      	ldr	r0, [pc, #12]	; (14fd0 <__tcf_0+0x10>)
   14fc4:	4c03      	ldr	r4, [pc, #12]	; (14fd4 <__tcf_0+0x14>)
   14fc6:	47a0      	blx	r4
   14fc8:	4803      	ldr	r0, [pc, #12]	; (14fd8 <__tcf_0+0x18>)
   14fca:	47a0      	blx	r4
   14fcc:	bd10      	pop	{r4, pc}
   14fce:	bf00      	nop
   14fd0:	20003ab8 	.word	0x20003ab8
   14fd4:	000151cd 	.word	0x000151cd
   14fd8:	20003a8c 	.word	0x20003a8c

00014fdc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   14fdc:	b510      	push	{r4, lr}
   14fde:	4604      	mov	r4, r0
   14fe0:	4b0d      	ldr	r3, [pc, #52]	; (15018 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   14fe2:	4798      	blx	r3
   14fe4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14fe8:	4b0c      	ldr	r3, [pc, #48]	; (1501c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   14fea:	4798      	blx	r3
	i2c=&i2cSharedStatic;
   14fec:	4b0c      	ldr	r3, [pc, #48]	; (15020 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   14fee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   14ff2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   14ff6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   14ffa:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   14ffc:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   15000:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   15002:	f503 7298 	add.w	r2, r3, #304	; 0x130
   15006:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   15008:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
   1500c:	2300      	movs	r3, #0
   1500e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
   15012:	4620      	mov	r0, r4
   15014:	bd10      	pop	{r4, pc}
   15016:	bf00      	nop
   15018:	000151b5 	.word	0x000151b5
   1501c:	00014e71 	.word	0x00014e71
   15020:	200039c8 	.word	0x200039c8

00015024 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   15024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15028:	4606      	mov	r6, r0
   1502a:	4c0c      	ldr	r4, [pc, #48]	; (1505c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   1502c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   15030:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   15032:	f8df 802c 	ldr.w	r8, [pc, #44]	; 15060 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   15036:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   1503a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1503e:	f045 0120 	orr.w	r1, r5, #32
   15042:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   15046:	b2c9      	uxtb	r1, r1
   15048:	4620      	mov	r0, r4
   1504a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   1504c:	3501      	adds	r5, #1
   1504e:	341c      	adds	r4, #28
   15050:	2d07      	cmp	r5, #7
   15052:	d1f0      	bne.n	15036 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   15054:	2000      	movs	r0, #0
   15056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1505a:	bf00      	nop
   1505c:	200039c8 	.word	0x200039c8
   15060:	00018c5f 	.word	0x00018c5f

00015064 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   15064:	b570      	push	{r4, r5, r6, lr}
   15066:	4604      	mov	r4, r0
	i2c->Init();
   15068:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   1506c:	4b17      	ldr	r3, [pc, #92]	; (150cc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   1506e:	4798      	blx	r3
	if (i2c->isOK)
   15070:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   15074:	7a5b      	ldrb	r3, [r3, #9]
   15076:	b943      	cbnz	r3, 1508a <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   15078:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1507c:	7a5b      	ldrb	r3, [r3, #9]
   1507e:	b2db      	uxtb	r3, r3
   15080:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
   15084:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
   15088:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   1508a:	4620      	mov	r0, r4
   1508c:	4b10      	ldr	r3, [pc, #64]	; (150d0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   1508e:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   15090:	f104 0568 	add.w	r5, r4, #104	; 0x68
   15094:	462b      	mov	r3, r5
   15096:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1509a:	2100      	movs	r1, #0
   1509c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1509e:	4e0d      	ldr	r6, [pc, #52]	; (150d4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   150a0:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   150a2:	462b      	mov	r3, r5
   150a4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   150a8:	2101      	movs	r1, #1
   150aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
   150ac:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   150ae:	462a      	mov	r2, r5
   150b0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   150b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   150b6:	4b08      	ldr	r3, [pc, #32]	; (150d8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   150b8:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   150ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   150bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
   150be:	791b      	ldrb	r3, [r3, #4]
   150c0:	7912      	ldrb	r2, [r2, #4]
   150c2:	4013      	ands	r3, r2
   150c4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   150c8:	e7d6      	b.n	15078 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   150ca:	bf00      	nop
   150cc:	00018955 	.word	0x00018955
   150d0:	00015025 	.word	0x00015025
   150d4:	00015301 	.word	0x00015301
   150d8:	00014f55 	.word	0x00014f55

000150dc <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150de:	f100 0468 	add.w	r4, r0, #104	; 0x68
   150e2:	1e4d      	subs	r5, r1, #1
   150e4:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   150e8:	4f04      	ldr	r7, [pc, #16]	; (150fc <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   150ea:	f854 0b04 	ldr.w	r0, [r4], #4
   150ee:	47b8      	blx	r7
   150f0:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   150f4:	42b4      	cmp	r4, r6
   150f6:	d1f8      	bne.n	150ea <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   150f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150fa:	bf00      	nop
   150fc:	00018d45 	.word	0x00018d45

00015100 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   15100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
   15104:	4c1c      	ldr	r4, [pc, #112]	; (15178 <_GLOBAL__sub_I_ptrFansClass+0x78>)
   15106:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   1510a:	491c      	ldr	r1, [pc, #112]	; (1517c <_GLOBAL__sub_I_ptrFansClass+0x7c>)
   1510c:	4628      	mov	r0, r5
   1510e:	4b1c      	ldr	r3, [pc, #112]	; (15180 <_GLOBAL__sub_I_ptrFansClass+0x80>)
   15110:	4798      	blx	r3
   15112:	4f1c      	ldr	r7, [pc, #112]	; (15184 <_GLOBAL__sub_I_ptrFansClass+0x84>)
   15114:	463a      	mov	r2, r7
   15116:	491c      	ldr	r1, [pc, #112]	; (15188 <_GLOBAL__sub_I_ptrFansClass+0x88>)
   15118:	4628      	mov	r0, r5
   1511a:	4e1c      	ldr	r6, [pc, #112]	; (1518c <_GLOBAL__sub_I_ptrFansClass+0x8c>)
   1511c:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   1511e:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   15122:	4628      	mov	r0, r5
   15124:	f8df 8088 	ldr.w	r8, [pc, #136]	; 151b0 <_GLOBAL__sub_I_ptrFansClass+0xb0>
   15128:	47c0      	blx	r8
   1512a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1512e:	47c0      	blx	r8
   15130:	463a      	mov	r2, r7
   15132:	4917      	ldr	r1, [pc, #92]	; (15190 <_GLOBAL__sub_I_ptrFansClass+0x90>)
   15134:	2000      	movs	r0, #0
   15136:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   15138:	f504 7898 	add.w	r8, r4, #304	; 0x130
   1513c:	4640      	mov	r0, r8
   1513e:	4b15      	ldr	r3, [pc, #84]	; (15194 <_GLOBAL__sub_I_ptrFansClass+0x94>)
   15140:	4798      	blx	r3
   15142:	463a      	mov	r2, r7
   15144:	4914      	ldr	r1, [pc, #80]	; (15198 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   15146:	4640      	mov	r0, r8
   15148:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   1514a:	4e14      	ldr	r6, [pc, #80]	; (1519c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   1514c:	4620      	mov	r0, r4
   1514e:	47b0      	blx	r6
   15150:	341c      	adds	r4, #28
   15152:	42a5      	cmp	r5, r4
   15154:	d1fa      	bne.n	1514c <_GLOBAL__sub_I_ptrFansClass+0x4c>
   15156:	4e0b      	ldr	r6, [pc, #44]	; (15184 <_GLOBAL__sub_I_ptrFansClass+0x84>)
   15158:	4632      	mov	r2, r6
   1515a:	4911      	ldr	r1, [pc, #68]	; (151a0 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   1515c:	2000      	movs	r0, #0
   1515e:	4c0b      	ldr	r4, [pc, #44]	; (1518c <_GLOBAL__sub_I_ptrFansClass+0x8c>)
   15160:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   15162:	4d10      	ldr	r5, [pc, #64]	; (151a4 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   15164:	4628      	mov	r0, r5
   15166:	4b10      	ldr	r3, [pc, #64]	; (151a8 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   15168:	4798      	blx	r3
   1516a:	4632      	mov	r2, r6
   1516c:	490f      	ldr	r1, [pc, #60]	; (151ac <_GLOBAL__sub_I_ptrFansClass+0xac>)
   1516e:	4628      	mov	r0, r5
   15170:	47a0      	blx	r4
   15172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15176:	bf00      	nop
   15178:	200039c8 	.word	0x200039c8
   1517c:	2000d728 	.word	0x2000d728
   15180:	00018925 	.word	0x00018925
   15184:	20000000 	.word	0x20000000
   15188:	00018941 	.word	0x00018941
   1518c:	0001a44d 	.word	0x0001a44d
   15190:	00014fc1 	.word	0x00014fc1
   15194:	00014e71 	.word	0x00014e71
   15198:	00014e73 	.word	0x00014e73
   1519c:	00018c37 	.word	0x00018c37
   151a0:	00014fa1 	.word	0x00014fa1
   151a4:	20003b28 	.word	0x20003b28
   151a8:	00014fdd 	.word	0x00014fdd
   151ac:	00014f85 	.word	0x00014f85
   151b0:	000151b5 	.word	0x000151b5

000151b4 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   151b4:	b510      	push	{r4, lr}
   151b6:	4604      	mov	r4, r0
   151b8:	4b02      	ldr	r3, [pc, #8]	; (151c4 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   151ba:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   151bc:	4b02      	ldr	r3, [pc, #8]	; (151c8 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   151be:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   151c0:	4620      	mov	r0, r4
   151c2:	bd10      	pop	{r4, pc}
   151c4:	0001535d 	.word	0x0001535d
   151c8:	20003bb4 	.word	0x20003bb4

000151cc <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   151cc:	b510      	push	{r4, lr}
   151ce:	4604      	mov	r4, r0
   151d0:	4b01      	ldr	r3, [pc, #4]	; (151d8 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   151d2:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   151d4:	4620      	mov	r0, r4
   151d6:	bd10      	pop	{r4, pc}
   151d8:	0001535f 	.word	0x0001535f

000151dc <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   151dc:	1f0b      	subs	r3, r1, #4
   151de:	300c      	adds	r0, #12
   151e0:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   151e2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   151e6:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   151ea:	428b      	cmp	r3, r1
   151ec:	d1f9      	bne.n	151e2 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   151ee:	2000      	movs	r0, #0
   151f0:	4770      	bx	lr
	...

000151f4 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   151f4:	b570      	push	{r4, r5, r6, lr}
   151f6:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   151f8:	6900      	ldr	r0, [r0, #16]
   151fa:	4b0e      	ldr	r3, [pc, #56]	; (15234 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
   151fc:	4798      	blx	r3
   151fe:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   15200:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   15204:	0096      	lsls	r6, r2, #2
   15206:	fa40 f506 	asr.w	r5, r0, r6
   1520a:	5ca3      	ldrb	r3, [r4, r2]
   1520c:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   15210:	2502      	movs	r5, #2
   15212:	40b5      	lsls	r5, r6
   15214:	4205      	tst	r5, r0
   15216:	bf14      	ite	ne
   15218:	2501      	movne	r5, #1
   1521a:	2500      	moveq	r5, #0
   1521c:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   15220:	2504      	movs	r5, #4
   15222:	40b5      	lsls	r5, r6
   15224:	4205      	tst	r5, r0
   15226:	bf14      	ite	ne
   15228:	2101      	movne	r1, #1
   1522a:	2100      	moveq	r1, #0
   1522c:	f361 0300 	bfi	r3, r1, #0, #1
   15230:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
   15232:	bd70      	pop	{r4, r5, r6, pc}
   15234:	00018d45 	.word	0x00018d45

00015238 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   15238:	b510      	push	{r4, lr}
   1523a:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   1523c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15240:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   15242:	f081 0201 	eor.w	r2, r1, #1
   15246:	bf0c      	ite	eq
   15248:	2102      	moveq	r1, #2
   1524a:	2101      	movne	r1, #1
   1524c:	68c0      	ldr	r0, [r0, #12]
   1524e:	4b02      	ldr	r3, [pc, #8]	; (15258 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   15250:	4798      	blx	r3
   15252:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   15254:	bd10      	pop	{r4, pc}
   15256:	bf00      	nop
   15258:	00018fb5 	.word	0x00018fb5

0001525c <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   1525c:	b510      	push	{r4, lr}
   1525e:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   15260:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15264:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15268:	69d8      	ldr	r0, [r3, #28]
   1526a:	4b02      	ldr	r3, [pc, #8]	; (15274 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   1526c:	4798      	blx	r3
   1526e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
   15272:	bd10      	pop	{r4, pc}
   15274:	00018dc9 	.word	0x00018dc9

00015278 <_ZN19EvaporatorFan_Class7ReadPWMEv>:
uint8_t	EvaporatorFan_Class::ReadPWM(void){
	return pwmValue;

}
   15278:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1527c:	4770      	bx	lr
	...

00015280 <_ZN19EvaporatorFan_Class9IsEnabledEv>:
bool EvaporatorFan_Class::IsEnabled(void){
   15280:	b538      	push	{r3, r4, r5, lr}
   15282:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   15284:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15288:	2b01      	cmp	r3, #1
   1528a:	bf0c      	ite	eq
   1528c:	2502      	moveq	r5, #2
   1528e:	2501      	movne	r5, #1
	uint8_t value=expanders[0]->ReadGPIORegister();
   15290:	68c0      	ldr	r0, [r0, #12]
   15292:	4b04      	ldr	r3, [pc, #16]	; (152a4 <_ZN19EvaporatorFan_Class9IsEnabledEv+0x24>)
   15294:	4798      	blx	r3
	enabled=!(value&fanCorrrection);
   15296:	4205      	tst	r5, r0
   15298:	bf0c      	ite	eq
   1529a:	2001      	moveq	r0, #1
   1529c:	2000      	movne	r0, #0
   1529e:	70e0      	strb	r0, [r4, #3]
	return enabled;
}
   152a0:	bd38      	pop	{r3, r4, r5, pc}
   152a2:	bf00      	nop
   152a4:	00018d45 	.word	0x00018d45

000152a8 <_ZN19EvaporatorFan_Class8SelfTestEv>:

bool EvaporatorFan_Class::SelfTest(void){
   152a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152ac:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
   152ae:	2100      	movs	r1, #0
   152b0:	4c0f      	ldr	r4, [pc, #60]	; (152f0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
   152b2:	47a0      	blx	r4
	SetPWM(0xff);
   152b4:	21ff      	movs	r1, #255	; 0xff
   152b6:	4628      	mov	r0, r5
   152b8:	4b0e      	ldr	r3, [pc, #56]	; (152f4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
   152ba:	4798      	blx	r3
	SetEnable(true);
   152bc:	2101      	movs	r1, #1
   152be:	4628      	mov	r0, r5
   152c0:	47a0      	blx	r4
   152c2:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
   152c4:	4f0b      	ldr	r7, [pc, #44]	; (152f4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
   152c6:	f04f 080a 	mov.w	r8, #10
   152ca:	4e0b      	ldr	r6, [pc, #44]	; (152f8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
   152cc:	4621      	mov	r1, r4
   152ce:	4628      	mov	r0, r5
   152d0:	47b8      	blx	r7
		delay_us(10);
   152d2:	4640      	mov	r0, r8
   152d4:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
   152d6:	3c01      	subs	r4, #1
   152d8:	b2e4      	uxtb	r4, r4
   152da:	2c0c      	cmp	r4, #12
   152dc:	d1f6      	bne.n	152cc <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
   152de:	4628      	mov	r0, r5
   152e0:	4b06      	ldr	r3, [pc, #24]	; (152fc <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
   152e2:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   152e4:	7828      	ldrb	r0, [r5, #0]
	return result;
}
   152e6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   152ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152ee:	bf00      	nop
   152f0:	00015239 	.word	0x00015239
   152f4:	0001525d 	.word	0x0001525d
   152f8:	00006449 	.word	0x00006449
   152fc:	000151f5 	.word	0x000151f5

00015300 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   15300:	b510      	push	{r4, lr}
   15302:	4604      	mov	r4, r0
	i2c=i2cClass;
   15304:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   15306:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   1530a:	7a52      	ldrb	r2, [r2, #9]
   1530c:	b90a      	cbnz	r2, 15312 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   1530e:	7920      	ldrb	r0, [r4, #4]
   15310:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   15312:	4619      	mov	r1, r3
   15314:	4b0c      	ldr	r3, [pc, #48]	; (15348 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
   15316:	4798      	blx	r3
			if (fanNumber==0)
   15318:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1531c:	b15b      	cbz	r3, 15336 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   1531e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15322:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   15326:	69d8      	ldr	r0, [r3, #28]
   15328:	4b08      	ldr	r3, [pc, #32]	; (1534c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
   1532a:	4798      	blx	r3
			isOK=SelfTest();
   1532c:	4620      	mov	r0, r4
   1532e:	4b08      	ldr	r3, [pc, #32]	; (15350 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   15330:	4798      	blx	r3
   15332:	7120      	strb	r0, [r4, #4]
   15334:	e7eb      	b.n	1530e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   15336:	2170      	movs	r1, #112	; 0x70
   15338:	68e0      	ldr	r0, [r4, #12]
   1533a:	4b06      	ldr	r3, [pc, #24]	; (15354 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   1533c:	4798      	blx	r3
				expanders[1]->SetPortInput();
   1533e:	6920      	ldr	r0, [r4, #16]
   15340:	4b05      	ldr	r3, [pc, #20]	; (15358 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   15342:	4798      	blx	r3
   15344:	e7eb      	b.n	1531e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   15346:	bf00      	nop
   15348:	000151dd 	.word	0x000151dd
   1534c:	00018ebd 	.word	0x00018ebd
   15350:	000152a9 	.word	0x000152a9
   15354:	00018e49 	.word	0x00018e49
   15358:	00018e05 	.word	0x00018e05

0001535c <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   1535c:	4770      	bx	lr

0001535e <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   1535e:	4770      	bx	lr

00015360 <_ZN18Event_Logger_ClassD1Ev>:
{
	cal=&staticClock;
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   15360:	b510      	push	{r4, lr}
   15362:	4604      	mov	r4, r0
   15364:	4b06      	ldr	r3, [pc, #24]	; (15380 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   15366:	f840 3bb0 	str.w	r3, [r0], #176
   1536a:	4b06      	ldr	r3, [pc, #24]	; (15384 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   1536c:	4798      	blx	r3
   1536e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   15372:	4b05      	ldr	r3, [pc, #20]	; (15388 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   15374:	4798      	blx	r3
   15376:	4620      	mov	r0, r4
   15378:	4b04      	ldr	r3, [pc, #16]	; (1538c <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1537a:	4798      	blx	r3
{
} //~Event_Logger_Class
   1537c:	4620      	mov	r0, r4
   1537e:	bd10      	pop	{r4, pc}
   15380:	0001dc40 	.word	0x0001dc40
   15384:	00015639 	.word	0x00015639
   15388:	00015583 	.word	0x00015583
   1538c:	000139f1 	.word	0x000139f1

00015390 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   15390:	b510      	push	{r4, lr}
   15392:	4604      	mov	r4, r0
   15394:	4b08      	ldr	r3, [pc, #32]	; (153b8 <_ZN18Event_Logger_ClassC1Ev+0x28>)
   15396:	4798      	blx	r3
   15398:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1539c:	4b07      	ldr	r3, [pc, #28]	; (153bc <_ZN18Event_Logger_ClassC1Ev+0x2c>)
   1539e:	4798      	blx	r3
   153a0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   153a4:	4b06      	ldr	r3, [pc, #24]	; (153c0 <_ZN18Event_Logger_ClassC1Ev+0x30>)
   153a6:	4798      	blx	r3
   153a8:	4b06      	ldr	r3, [pc, #24]	; (153c4 <_ZN18Event_Logger_ClassC1Ev+0x34>)
   153aa:	6023      	str	r3, [r4, #0]
	cal=&staticClock;
   153ac:	4b06      	ldr	r3, [pc, #24]	; (153c8 <_ZN18Event_Logger_ClassC1Ev+0x38>)
   153ae:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
} //Event_Logger_Class
   153b2:	4620      	mov	r0, r4
   153b4:	bd10      	pop	{r4, pc}
   153b6:	bf00      	nop
   153b8:	00013981 	.word	0x00013981
   153bc:	00015581 	.word	0x00015581
   153c0:	00015601 	.word	0x00015601
   153c4:	0001dc40 	.word	0x0001dc40
   153c8:	20003bb8 	.word	0x20003bb8

000153cc <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   153cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153ce:	4604      	mov	r4, r0
   153d0:	460d      	mov	r5, r1
	
	GetDateTime(&currentDateTime);
   153d2:	f200 57f4 	addw	r7, r0, #1524	; 0x5f4
   153d6:	4606      	mov	r6, r0
   153d8:	f856 3bac 	ldr.w	r3, [r6], #172
   153dc:	681b      	ldr	r3, [r3, #0]
   153de:	4639      	mov	r1, r7
   153e0:	4798      	blx	r3
	semiColonPosition=FindSemiColon(text);
   153e2:	4629      	mov	r1, r5
   153e4:	4630      	mov	r0, r6
   153e6:	4b21      	ldr	r3, [pc, #132]	; (1546c <_ZN18Event_Logger_Class9SaveEventEPh+0xa0>)
   153e8:	4798      	blx	r3
   153ea:	4602      	mov	r2, r0
   153ec:	f884 06ec 	strb.w	r0, [r4, #1772]	; 0x6ec
	memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   153f0:	4629      	mov	r1, r5
   153f2:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   153f6:	4b1e      	ldr	r3, [pc, #120]	; (15470 <_ZN18Event_Logger_Class9SaveEventEPh+0xa4>)
   153f8:	4798      	blx	r3

	ChopStringDescription(text);
   153fa:	4629      	mov	r1, r5
   153fc:	4630      	mov	r0, r6
   153fe:	4b1d      	ldr	r3, [pc, #116]	; (15474 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>)
   15400:	4798      	blx	r3
	memcpy(&entry.description,&text[semiColonPosition],44);
   15402:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
   15406:	442b      	add	r3, r5
   15408:	f504 62d8 	add.w	r2, r4, #1728	; 0x6c0
   1540c:	f103 0120 	add.w	r1, r3, #32
   15410:	f8d3 c000 	ldr.w	ip, [r3]
   15414:	f8d3 e004 	ldr.w	lr, [r3, #4]
   15418:	689e      	ldr	r6, [r3, #8]
   1541a:	68d8      	ldr	r0, [r3, #12]
   1541c:	f8c2 c000 	str.w	ip, [r2]
   15420:	f8c2 e004 	str.w	lr, [r2, #4]
   15424:	6096      	str	r6, [r2, #8]
   15426:	60d0      	str	r0, [r2, #12]
   15428:	3310      	adds	r3, #16
   1542a:	3210      	adds	r2, #16
   1542c:	428b      	cmp	r3, r1
   1542e:	d1ef      	bne.n	15410 <_ZN18Event_Logger_Class9SaveEventEPh+0x44>
   15430:	6818      	ldr	r0, [r3, #0]
   15432:	6859      	ldr	r1, [r3, #4]
   15434:	689b      	ldr	r3, [r3, #8]
   15436:	6010      	str	r0, [r2, #0]
   15438:	6051      	str	r1, [r2, #4]
   1543a:	6093      	str	r3, [r2, #8]
	currentTimestamp=convert_datetime_to_timestamp(&currentDateTime);
   1543c:	6823      	ldr	r3, [r4, #0]
   1543e:	685b      	ldr	r3, [r3, #4]
   15440:	4639      	mov	r1, r7
   15442:	4620      	mov	r0, r4
   15444:	4798      	blx	r3
   15446:	f8c4 06f4 	str.w	r0, [r4, #1780]	; 0x6f4
	entry.timestamp=currentTimestamp;
   1544a:	f8c4 06ac 	str.w	r0, [r4, #1708]	; 0x6ac
	StackEventEntry(&entry);
   1544e:	f204 61ac 	addw	r1, r4, #1708	; 0x6ac
   15452:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   15456:	4b08      	ldr	r3, [pc, #32]	; (15478 <_ZN18Event_Logger_Class9SaveEventEPh+0xac>)
   15458:	4798      	blx	r3
	
	if (usb.IsEnabled())
   1545a:	4808      	ldr	r0, [pc, #32]	; (1547c <_ZN18Event_Logger_Class9SaveEventEPh+0xb0>)
   1545c:	4b08      	ldr	r3, [pc, #32]	; (15480 <_ZN18Event_Logger_Class9SaveEventEPh+0xb4>)
   1545e:	4798      	blx	r3
   15460:	b118      	cbz	r0, 1546a <_ZN18Event_Logger_Class9SaveEventEPh+0x9e>
	{
	
		usb.println((char *)text);
   15462:	4629      	mov	r1, r5
   15464:	4805      	ldr	r0, [pc, #20]	; (1547c <_ZN18Event_Logger_Class9SaveEventEPh+0xb0>)
   15466:	4b07      	ldr	r3, [pc, #28]	; (15484 <_ZN18Event_Logger_Class9SaveEventEPh+0xb8>)
   15468:	4798      	blx	r3
   1546a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1546c:	000155d1 	.word	0x000155d1
   15470:	0001c521 	.word	0x0001c521
   15474:	000155a9 	.word	0x000155a9
   15478:	00015661 	.word	0x00015661
   1547c:	20003884 	.word	0x20003884
   15480:	000144a9 	.word	0x000144a9
   15484:	00014a65 	.word	0x00014a65

00015488 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev>:
	else
	{
	}
}

 Event_Logger_Class	logger;
   15488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1548c:	4c2b      	ldr	r4, [pc, #172]	; (1553c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xb4>)
   1548e:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
   15492:	492b      	ldr	r1, [pc, #172]	; (15540 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xb8>)
   15494:	4628      	mov	r0, r5
   15496:	4f2b      	ldr	r7, [pc, #172]	; (15544 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xbc>)
   15498:	47b8      	blx	r7
   1549a:	4e2b      	ldr	r6, [pc, #172]	; (15548 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc0>)
   1549c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1557c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf4>
   154a0:	4632      	mov	r2, r6
   154a2:	4641      	mov	r1, r8
   154a4:	4628      	mov	r0, r5
   154a6:	4d29      	ldr	r5, [pc, #164]	; (1554c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc4>)
   154a8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   154aa:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
   154ae:	4928      	ldr	r1, [pc, #160]	; (15550 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc8>)
   154b0:	4648      	mov	r0, r9
   154b2:	47b8      	blx	r7
   154b4:	4632      	mov	r2, r6
   154b6:	4641      	mov	r1, r8
   154b8:	4648      	mov	r0, r9
   154ba:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   154bc:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
   154c0:	4924      	ldr	r1, [pc, #144]	; (15554 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xcc>)
   154c2:	4648      	mov	r0, r9
   154c4:	47b8      	blx	r7
   154c6:	4632      	mov	r2, r6
   154c8:	4641      	mov	r1, r8
   154ca:	4648      	mov	r0, r9
   154cc:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   154ce:	f504 7988 	add.w	r9, r4, #272	; 0x110
   154d2:	4921      	ldr	r1, [pc, #132]	; (15558 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd0>)
   154d4:	4648      	mov	r0, r9
   154d6:	47b8      	blx	r7
   154d8:	4632      	mov	r2, r6
   154da:	4641      	mov	r1, r8
   154dc:	4648      	mov	r0, r9
   154de:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   154e0:	f504 7998 	add.w	r9, r4, #304	; 0x130
   154e4:	491d      	ldr	r1, [pc, #116]	; (1555c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd4>)
   154e6:	4648      	mov	r0, r9
   154e8:	47b8      	blx	r7
   154ea:	4632      	mov	r2, r6
   154ec:	4641      	mov	r1, r8
   154ee:	4648      	mov	r0, r9
   154f0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   154f2:	f504 79a8 	add.w	r9, r4, #336	; 0x150
   154f6:	491a      	ldr	r1, [pc, #104]	; (15560 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd8>)
   154f8:	4648      	mov	r0, r9
   154fa:	47b8      	blx	r7
   154fc:	4632      	mov	r2, r6
   154fe:	4641      	mov	r1, r8
   15500:	4648      	mov	r0, r9
   15502:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   15504:	f504 79b8 	add.w	r9, r4, #368	; 0x170
   15508:	4916      	ldr	r1, [pc, #88]	; (15564 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xdc>)
   1550a:	4648      	mov	r0, r9
   1550c:	47b8      	blx	r7
   1550e:	4632      	mov	r2, r6
   15510:	4641      	mov	r1, r8
   15512:	4648      	mov	r0, r9
   15514:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   15516:	4914      	ldr	r1, [pc, #80]	; (15568 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe0>)
   15518:	4620      	mov	r0, r4
   1551a:	4b14      	ldr	r3, [pc, #80]	; (1556c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe4>)
   1551c:	4798      	blx	r3
   1551e:	4632      	mov	r2, r6
   15520:	4913      	ldr	r1, [pc, #76]	; (15570 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe8>)
   15522:	4620      	mov	r0, r4
   15524:	47a8      	blx	r5
 Event_Logger_Class	logger;
   15526:	f504 74c8 	add.w	r4, r4, #400	; 0x190
   1552a:	4620      	mov	r0, r4
   1552c:	4b11      	ldr	r3, [pc, #68]	; (15574 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xec>)
   1552e:	4798      	blx	r3
   15530:	4632      	mov	r2, r6
   15532:	4911      	ldr	r1, [pc, #68]	; (15578 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf0>)
   15534:	4620      	mov	r0, r4
   15536:	47a8      	blx	r5
   15538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1553c:	20003bb8 	.word	0x20003bb8
   15540:	2000d6d8 	.word	0x2000d6d8
   15544:	00013d09 	.word	0x00013d09
   15548:	20000000 	.word	0x20000000
   1554c:	0001a44d 	.word	0x0001a44d
   15550:	2000d76c 	.word	0x2000d76c
   15554:	2000d870 	.word	0x2000d870
   15558:	2000d78c 	.word	0x2000d78c
   1555c:	2000d830 	.word	0x2000d830
   15560:	2000d850 	.word	0x2000d850
   15564:	2000d748 	.word	0x2000d748
   15568:	2000d890 	.word	0x2000d890
   1556c:	000139b5 	.word	0x000139b5
   15570:	000139f1 	.word	0x000139f1
   15574:	00015391 	.word	0x00015391
   15578:	00015361 	.word	0x00015361
   1557c:	00013d41 	.word	0x00013d41

00015580 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   15580:	4770      	bx	lr

00015582 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   15582:	4770      	bx	lr

00015584 <_ZN19Event_Logger_Struct12RemoveSpacesEPc>:
	// To keep track of non-space character count
	int count = 0;
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; str[i]; i++){
   15584:	780b      	ldrb	r3, [r1, #0]
   15586:	b163      	cbz	r3, 155a2 <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x1e>
   15588:	4608      	mov	r0, r1
   1558a:	2200      	movs	r2, #0
		if (str[i] != ' '){
   1558c:	2b20      	cmp	r3, #32
			str[count++] = str[i]; // here count is
   1558e:	bf1c      	itt	ne
   15590:	548b      	strbne	r3, [r1, r2]
   15592:	3201      	addne	r2, #1
	for (int i = 0; str[i]; i++){
   15594:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15598:	2b00      	cmp	r3, #0
   1559a:	d1f7      	bne.n	1558c <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x8>
		}
	}
	

	// incremented
	str[count] = '\0';
   1559c:	2300      	movs	r3, #0
   1559e:	548b      	strb	r3, [r1, r2]
   155a0:	4770      	bx	lr
	int count = 0;
   155a2:	2200      	movs	r2, #0
   155a4:	e7fa      	b.n	1559c <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x18>
	...

000155a8 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:
void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   155a8:	b538      	push	{r3, r4, r5, lr}
   155aa:	4605      	mov	r5, r0
   155ac:	460c      	mov	r4, r1
	RemoveSpaces((char *)str);
   155ae:	4b06      	ldr	r3, [pc, #24]	; (155c8 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x20>)
   155b0:	4798      	blx	r3
	sizeText=strlen((char *)str);
   155b2:	4620      	mov	r0, r4
   155b4:	4b05      	ldr	r3, [pc, #20]	; (155cc <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x24>)
   155b6:	4798      	blx	r3
   155b8:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   155ba:	b2c0      	uxtb	r0, r0
   155bc:	282c      	cmp	r0, #44	; 0x2c
		str[44]='\0';
   155be:	bfc4      	itt	gt
   155c0:	2300      	movgt	r3, #0
   155c2:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   155c6:	bd38      	pop	{r3, r4, r5, pc}
   155c8:	00015585 	.word	0x00015585
   155cc:	0001c701 	.word	0x0001c701

000155d0 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
}

uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
   155d0:	b508      	push	{r3, lr}
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; strlen((char *)str); i++){
   155d2:	780b      	ldrb	r3, [r1, #0]
   155d4:	b163      	cbz	r3, 155f0 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x20>
		if (str[i] == ':'){
   155d6:	2b3a      	cmp	r3, #58	; 0x3a
   155d8:	bf18      	it	ne
   155da:	2000      	movne	r0, #0
   155dc:	d006      	beq.n	155ec <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
	for (int i = 0; strlen((char *)str); i++){
   155de:	3001      	adds	r0, #1
		if (str[i] == ':'){
   155e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   155e4:	2b3a      	cmp	r3, #58	; 0x3a
   155e6:	d1fa      	bne.n	155de <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xe>
			return i;
   155e8:	b2c0      	uxtb	r0, r0
   155ea:	bd08      	pop	{r3, pc}
	for (int i = 0; strlen((char *)str); i++){
   155ec:	2000      	movs	r0, #0
   155ee:	e7fb      	b.n	155e8 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
   155f0:	4608      	mov	r0, r1
		}
	}
	
	return strlen((char *)str);
   155f2:	4b02      	ldr	r3, [pc, #8]	; (155fc <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x2c>)
   155f4:	4798      	blx	r3
   155f6:	b2c0      	uxtb	r0, r0
}
   155f8:	bd08      	pop	{r3, pc}
   155fa:	bf00      	nop
   155fc:	0001c701 	.word	0x0001c701

00015600 <_ZN15DataLoger_ClassC1Ev>:


static uint8_t staticEventLogs[QSPI_ERBLK];

// default constructor
DataLoger_Class::DataLoger_Class()
   15600:	b510      	push	{r4, lr}
   15602:	4604      	mov	r4, r0
   15604:	4b09      	ldr	r3, [pc, #36]	; (1562c <_ZN15DataLoger_ClassC1Ev+0x2c>)
   15606:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   15608:	f44f 7200 	mov.w	r2, #512	; 0x200
   1560c:	2100      	movs	r1, #0
   1560e:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   15612:	4b07      	ldr	r3, [pc, #28]	; (15630 <_ZN15DataLoger_ClassC1Ev+0x30>)
   15614:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   15616:	2300      	movs	r3, #0
   15618:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   1561c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
{
	stackPointer=&staticEventLogs[0];
   15620:	4b04      	ldr	r3, [pc, #16]	; (15634 <_ZN15DataLoger_ClassC1Ev+0x34>)
   15622:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
} //DataLoger_Class
   15626:	4620      	mov	r0, r4
   15628:	bd10      	pop	{r4, pc}
   1562a:	bf00      	nop
   1562c:	0001a055 	.word	0x0001a055
   15630:	0001c655 	.word	0x0001c655
   15634:	20004440 	.word	0x20004440

00015638 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   15638:	b510      	push	{r4, lr}
   1563a:	4604      	mov	r4, r0
   1563c:	4b01      	ldr	r3, [pc, #4]	; (15644 <_ZN15DataLoger_ClassD1Ev+0xc>)
   1563e:	4798      	blx	r3
{
} //~DataLoger_Class
   15640:	4620      	mov	r0, r4
   15642:	bd10      	pop	{r4, pc}
   15644:	0001a091 	.word	0x0001a091

00015648 <_ZN15DataLoger_Class11IsStackFullEv>:
	stackValue+=sizeof(Event_Log_Entry);
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if ((stackPointer+(sizeof(Event_Log_Entry))>&staticEventLogs[QSPI_ERBLK-1]))
   15648:	f8d0 3534 	ldr.w	r3, [r0, #1332]	; 0x534
   1564c:	3340      	adds	r3, #64	; 0x40
	} 
	else
	{
		return false;
	}
   1564e:	4803      	ldr	r0, [pc, #12]	; (1565c <_ZN15DataLoger_Class11IsStackFullEv+0x14>)
   15650:	4283      	cmp	r3, r0
   15652:	bf94      	ite	ls
   15654:	2000      	movls	r0, #0
   15656:	2001      	movhi	r0, #1
   15658:	4770      	bx	lr
   1565a:	bf00      	nop
   1565c:	2000543f 	.word	0x2000543f

00015660 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent){
   15660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15662:	4605      	mov	r5, r0
   15664:	460c      	mov	r4, r1
	if (IsStackFull())
   15666:	4b13      	ldr	r3, [pc, #76]	; (156b4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x54>)
   15668:	4798      	blx	r3
   1566a:	b9c0      	cbnz	r0, 1569e <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x3e>
	memcpy(&stackPointer[stackValue],ent,sizeof(Event_Log_Entry));
   1566c:	f8d5 3534 	ldr.w	r3, [r5, #1332]	; 0x534
   15670:	f8d5 14f0 	ldr.w	r1, [r5, #1264]	; 0x4f0
   15674:	4622      	mov	r2, r4
   15676:	440b      	add	r3, r1
   15678:	3440      	adds	r4, #64	; 0x40
   1567a:	6817      	ldr	r7, [r2, #0]
   1567c:	6856      	ldr	r6, [r2, #4]
   1567e:	6890      	ldr	r0, [r2, #8]
   15680:	68d1      	ldr	r1, [r2, #12]
   15682:	601f      	str	r7, [r3, #0]
   15684:	605e      	str	r6, [r3, #4]
   15686:	6098      	str	r0, [r3, #8]
   15688:	60d9      	str	r1, [r3, #12]
   1568a:	3210      	adds	r2, #16
   1568c:	3310      	adds	r3, #16
   1568e:	42a2      	cmp	r2, r4
   15690:	d1f3      	bne.n	1567a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x1a>
	stackValue+=sizeof(Event_Log_Entry);
   15692:	f8d5 04f0 	ldr.w	r0, [r5, #1264]	; 0x4f0
   15696:	3040      	adds	r0, #64	; 0x40
   15698:	f8c5 04f0 	str.w	r0, [r5, #1264]	; 0x4f0
}
   1569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memory.SaveEventLog(&staticEventLogs[0]);
   1569e:	4e06      	ldr	r6, [pc, #24]	; (156b8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x58>)
   156a0:	4631      	mov	r1, r6
   156a2:	4806      	ldr	r0, [pc, #24]	; (156bc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x5c>)
   156a4:	4b06      	ldr	r3, [pc, #24]	; (156c0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x60>)
   156a6:	4798      	blx	r3
		stackPointer=&staticEventLogs[stk];
   156a8:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
	stackValue=stk;
   156ac:	2300      	movs	r3, #0
   156ae:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
   156b2:	e7db      	b.n	1566c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0xc>
   156b4:	00015649 	.word	0x00015649
   156b8:	20004440 	.word	0x20004440
   156bc:	20006c64 	.word	0x20006c64
   156c0:	00018351 	.word	0x00018351

000156c4 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   156c4:	b480      	push	{r7}
   156c6:	b083      	sub	sp, #12
   156c8:	af00      	add	r7, sp, #0
   156ca:	6078      	str	r0, [r7, #4]
   156cc:	460b      	mov	r3, r1
   156ce:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   156d0:	78fb      	ldrb	r3, [r7, #3]
   156d2:	687a      	ldr	r2, [r7, #4]
   156d4:	01db      	lsls	r3, r3, #7
   156d6:	4413      	add	r3, r2
   156d8:	681b      	ldr	r3, [r3, #0]
}
   156da:	4618      	mov	r0, r3
   156dc:	370c      	adds	r7, #12
   156de:	46bd      	mov	sp, r7
   156e0:	bc80      	pop	{r7}
   156e2:	4770      	bx	lr

000156e4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   156e4:	b480      	push	{r7}
   156e6:	b085      	sub	sp, #20
   156e8:	af00      	add	r7, sp, #0
   156ea:	60f8      	str	r0, [r7, #12]
   156ec:	460b      	mov	r3, r1
   156ee:	607a      	str	r2, [r7, #4]
   156f0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   156f2:	7afb      	ldrb	r3, [r7, #11]
   156f4:	68fa      	ldr	r2, [r7, #12]
   156f6:	01db      	lsls	r3, r3, #7
   156f8:	4413      	add	r3, r2
   156fa:	3318      	adds	r3, #24
   156fc:	687a      	ldr	r2, [r7, #4]
   156fe:	601a      	str	r2, [r3, #0]
}
   15700:	bf00      	nop
   15702:	3714      	adds	r7, #20
   15704:	46bd      	mov	sp, r7
   15706:	bc80      	pop	{r7}
   15708:	4770      	bx	lr

0001570a <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   1570a:	b480      	push	{r7}
   1570c:	b083      	sub	sp, #12
   1570e:	af00      	add	r7, sp, #0
   15710:	6078      	str	r0, [r7, #4]
   15712:	460b      	mov	r3, r1
   15714:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   15716:	78fb      	ldrb	r3, [r7, #3]
   15718:	687a      	ldr	r2, [r7, #4]
   1571a:	01db      	lsls	r3, r3, #7
   1571c:	4413      	add	r3, r2
   1571e:	3310      	adds	r3, #16
   15720:	681b      	ldr	r3, [r3, #0]
}
   15722:	4618      	mov	r0, r3
   15724:	370c      	adds	r7, #12
   15726:	46bd      	mov	sp, r7
   15728:	bc80      	pop	{r7}
   1572a:	4770      	bx	lr

0001572c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1572c:	b480      	push	{r7}
   1572e:	b085      	sub	sp, #20
   15730:	af00      	add	r7, sp, #0
   15732:	60f8      	str	r0, [r7, #12]
   15734:	460b      	mov	r3, r1
   15736:	607a      	str	r2, [r7, #4]
   15738:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1573a:	7afb      	ldrb	r3, [r7, #11]
   1573c:	68fa      	ldr	r2, [r7, #12]
   1573e:	01db      	lsls	r3, r3, #7
   15740:	4413      	add	r3, r2
   15742:	3314      	adds	r3, #20
   15744:	687a      	ldr	r2, [r7, #4]
   15746:	601a      	str	r2, [r3, #0]
}
   15748:	bf00      	nop
   1574a:	3714      	adds	r7, #20
   1574c:	46bd      	mov	sp, r7
   1574e:	bc80      	pop	{r7}
   15750:	4770      	bx	lr

00015752 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   15752:	b480      	push	{r7}
   15754:	b085      	sub	sp, #20
   15756:	af00      	add	r7, sp, #0
   15758:	60f8      	str	r0, [r7, #12]
   1575a:	460b      	mov	r3, r1
   1575c:	607a      	str	r2, [r7, #4]
   1575e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   15760:	7afb      	ldrb	r3, [r7, #11]
   15762:	68fa      	ldr	r2, [r7, #12]
   15764:	01db      	lsls	r3, r3, #7
   15766:	4413      	add	r3, r2
   15768:	331c      	adds	r3, #28
   1576a:	687a      	ldr	r2, [r7, #4]
   1576c:	601a      	str	r2, [r3, #0]
}
   1576e:	bf00      	nop
   15770:	3714      	adds	r7, #20
   15772:	46bd      	mov	sp, r7
   15774:	bc80      	pop	{r7}
   15776:	4770      	bx	lr

00015778 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   15778:	b480      	push	{r7}
   1577a:	b083      	sub	sp, #12
   1577c:	af00      	add	r7, sp, #0
   1577e:	6078      	str	r0, [r7, #4]
   15780:	460b      	mov	r3, r1
   15782:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   15784:	78fb      	ldrb	r3, [r7, #3]
   15786:	687a      	ldr	r2, [r7, #4]
   15788:	01db      	lsls	r3, r3, #7
   1578a:	4413      	add	r3, r2
   1578c:	3320      	adds	r3, #32
   1578e:	681b      	ldr	r3, [r3, #0]
}
   15790:	4618      	mov	r0, r3
   15792:	370c      	adds	r7, #12
   15794:	46bd      	mov	sp, r7
   15796:	bc80      	pop	{r7}
   15798:	4770      	bx	lr
	...

0001579c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   1579c:	b580      	push	{r7, lr}
   1579e:	b082      	sub	sp, #8
   157a0:	af00      	add	r7, sp, #0
   157a2:	4603      	mov	r3, r0
   157a4:	6039      	str	r1, [r7, #0]
   157a6:	71fb      	strb	r3, [r7, #7]
   157a8:	4613      	mov	r3, r2
   157aa:	71bb      	strb	r3, [r7, #6]
	if (level) {
   157ac:	79bb      	ldrb	r3, [r7, #6]
   157ae:	2b00      	cmp	r3, #0
   157b0:	d006      	beq.n	157c0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   157b2:	79fb      	ldrb	r3, [r7, #7]
   157b4:	683a      	ldr	r2, [r7, #0]
   157b6:	4619      	mov	r1, r3
   157b8:	4806      	ldr	r0, [pc, #24]	; (157d4 <_gpio_set_level+0x38>)
   157ba:	4b07      	ldr	r3, [pc, #28]	; (157d8 <_gpio_set_level+0x3c>)
   157bc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   157be:	e005      	b.n	157cc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   157c0:	79fb      	ldrb	r3, [r7, #7]
   157c2:	683a      	ldr	r2, [r7, #0]
   157c4:	4619      	mov	r1, r3
   157c6:	4803      	ldr	r0, [pc, #12]	; (157d4 <_gpio_set_level+0x38>)
   157c8:	4b04      	ldr	r3, [pc, #16]	; (157dc <_gpio_set_level+0x40>)
   157ca:	4798      	blx	r3
}
   157cc:	bf00      	nop
   157ce:	3708      	adds	r7, #8
   157d0:	46bd      	mov	sp, r7
   157d2:	bd80      	pop	{r7, pc}
   157d4:	41008000 	.word	0x41008000
   157d8:	000156e5 	.word	0x000156e5
   157dc:	0001572d 	.word	0x0001572d

000157e0 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   157e0:	b580      	push	{r7, lr}
   157e2:	b082      	sub	sp, #8
   157e4:	af00      	add	r7, sp, #0
   157e6:	4603      	mov	r3, r0
   157e8:	6039      	str	r1, [r7, #0]
   157ea:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   157ec:	79fb      	ldrb	r3, [r7, #7]
   157ee:	683a      	ldr	r2, [r7, #0]
   157f0:	4619      	mov	r1, r3
   157f2:	4803      	ldr	r0, [pc, #12]	; (15800 <_gpio_toggle_level+0x20>)
   157f4:	4b03      	ldr	r3, [pc, #12]	; (15804 <_gpio_toggle_level+0x24>)
   157f6:	4798      	blx	r3
}
   157f8:	bf00      	nop
   157fa:	3708      	adds	r7, #8
   157fc:	46bd      	mov	sp, r7
   157fe:	bd80      	pop	{r7, pc}
   15800:	41008000 	.word	0x41008000
   15804:	00015753 	.word	0x00015753

00015808 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   15808:	b580      	push	{r7, lr}
   1580a:	b086      	sub	sp, #24
   1580c:	af00      	add	r7, sp, #0
   1580e:	4603      	mov	r3, r0
   15810:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   15812:	f107 030c 	add.w	r3, r7, #12
   15816:	4618      	mov	r0, r3
   15818:	4b13      	ldr	r3, [pc, #76]	; (15868 <_gpio_get_level+0x60>)
   1581a:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   1581c:	79fb      	ldrb	r3, [r7, #7]
   1581e:	4619      	mov	r1, r3
   15820:	4812      	ldr	r0, [pc, #72]	; (1586c <_gpio_get_level+0x64>)
   15822:	4b13      	ldr	r3, [pc, #76]	; (15870 <_gpio_get_level+0x68>)
   15824:	4798      	blx	r3
   15826:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   15828:	79fb      	ldrb	r3, [r7, #7]
   1582a:	4619      	mov	r1, r3
   1582c:	480f      	ldr	r0, [pc, #60]	; (1586c <_gpio_get_level+0x64>)
   1582e:	4b11      	ldr	r3, [pc, #68]	; (15874 <_gpio_get_level+0x6c>)
   15830:	4798      	blx	r3
   15832:	4602      	mov	r2, r0
   15834:	697b      	ldr	r3, [r7, #20]
   15836:	43db      	mvns	r3, r3
   15838:	4013      	ands	r3, r2
   1583a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   1583c:	79fb      	ldrb	r3, [r7, #7]
   1583e:	4619      	mov	r1, r3
   15840:	480a      	ldr	r0, [pc, #40]	; (1586c <_gpio_get_level+0x64>)
   15842:	4b0d      	ldr	r3, [pc, #52]	; (15878 <_gpio_get_level+0x70>)
   15844:	4798      	blx	r3
   15846:	4602      	mov	r2, r0
   15848:	697b      	ldr	r3, [r7, #20]
   1584a:	4013      	ands	r3, r2
   1584c:	693a      	ldr	r2, [r7, #16]
   1584e:	4313      	orrs	r3, r2
   15850:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   15852:	f107 030c 	add.w	r3, r7, #12
   15856:	4618      	mov	r0, r3
   15858:	4b08      	ldr	r3, [pc, #32]	; (1587c <_gpio_get_level+0x74>)
   1585a:	4798      	blx	r3

	return tmp;
   1585c:	693b      	ldr	r3, [r7, #16]
}
   1585e:	4618      	mov	r0, r3
   15860:	3718      	adds	r7, #24
   15862:	46bd      	mov	sp, r7
   15864:	bd80      	pop	{r7, pc}
   15866:	bf00      	nop
   15868:	0000ff79 	.word	0x0000ff79
   1586c:	41008000 	.word	0x41008000
   15870:	000156c5 	.word	0x000156c5
   15874:	00015779 	.word	0x00015779
   15878:	0001570b 	.word	0x0001570b
   1587c:	0000ff9f 	.word	0x0000ff9f

00015880 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   15880:	b580      	push	{r7, lr}
   15882:	b082      	sub	sp, #8
   15884:	af00      	add	r7, sp, #0
   15886:	4603      	mov	r3, r0
   15888:	460a      	mov	r2, r1
   1588a:	71fb      	strb	r3, [r7, #7]
   1588c:	4613      	mov	r3, r2
   1588e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   15890:	79fb      	ldrb	r3, [r7, #7]
   15892:	115b      	asrs	r3, r3, #5
   15894:	b2d8      	uxtb	r0, r3
   15896:	79fb      	ldrb	r3, [r7, #7]
   15898:	f003 031f 	and.w	r3, r3, #31
   1589c:	2201      	movs	r2, #1
   1589e:	fa02 f303 	lsl.w	r3, r2, r3
   158a2:	79ba      	ldrb	r2, [r7, #6]
   158a4:	4619      	mov	r1, r3
   158a6:	4b03      	ldr	r3, [pc, #12]	; (158b4 <gpio_set_pin_level+0x34>)
   158a8:	4798      	blx	r3
}
   158aa:	bf00      	nop
   158ac:	3708      	adds	r7, #8
   158ae:	46bd      	mov	sp, r7
   158b0:	bd80      	pop	{r7, pc}
   158b2:	bf00      	nop
   158b4:	0001579d 	.word	0x0001579d

000158b8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   158b8:	b580      	push	{r7, lr}
   158ba:	b082      	sub	sp, #8
   158bc:	af00      	add	r7, sp, #0
   158be:	4603      	mov	r3, r0
   158c0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   158c2:	79fb      	ldrb	r3, [r7, #7]
   158c4:	115b      	asrs	r3, r3, #5
   158c6:	b2d8      	uxtb	r0, r3
   158c8:	79fb      	ldrb	r3, [r7, #7]
   158ca:	f003 031f 	and.w	r3, r3, #31
   158ce:	2201      	movs	r2, #1
   158d0:	fa02 f303 	lsl.w	r3, r2, r3
   158d4:	4619      	mov	r1, r3
   158d6:	4b03      	ldr	r3, [pc, #12]	; (158e4 <gpio_toggle_pin_level+0x2c>)
   158d8:	4798      	blx	r3
}
   158da:	bf00      	nop
   158dc:	3708      	adds	r7, #8
   158de:	46bd      	mov	sp, r7
   158e0:	bd80      	pop	{r7, pc}
   158e2:	bf00      	nop
   158e4:	000157e1 	.word	0x000157e1

000158e8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   158e8:	b580      	push	{r7, lr}
   158ea:	b082      	sub	sp, #8
   158ec:	af00      	add	r7, sp, #0
   158ee:	4603      	mov	r3, r0
   158f0:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   158f2:	79fb      	ldrb	r3, [r7, #7]
   158f4:	115b      	asrs	r3, r3, #5
   158f6:	b2db      	uxtb	r3, r3
   158f8:	4618      	mov	r0, r3
   158fa:	4b09      	ldr	r3, [pc, #36]	; (15920 <gpio_get_pin_level+0x38>)
   158fc:	4798      	blx	r3
   158fe:	4601      	mov	r1, r0
   15900:	79fb      	ldrb	r3, [r7, #7]
   15902:	f003 031f 	and.w	r3, r3, #31
   15906:	2201      	movs	r2, #1
   15908:	fa02 f303 	lsl.w	r3, r2, r3
   1590c:	400b      	ands	r3, r1
   1590e:	2b00      	cmp	r3, #0
   15910:	bf14      	ite	ne
   15912:	2301      	movne	r3, #1
   15914:	2300      	moveq	r3, #0
   15916:	b2db      	uxtb	r3, r3
}
   15918:	4618      	mov	r0, r3
   1591a:	3708      	adds	r7, #8
   1591c:	46bd      	mov	sp, r7
   1591e:	bd80      	pop	{r7, pc}
   15920:	00015809 	.word	0x00015809

00015924 <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
   15924:	b480      	push	{r7}
   15926:	b083      	sub	sp, #12
   15928:	af00      	add	r7, sp, #0
   1592a:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController->timeoutFlapperValveController=true;
   1592c:	4b07      	ldr	r3, [pc, #28]	; (1594c <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
   1592e:	681b      	ldr	r3, [r3, #0]
   15930:	2201      	movs	r2, #1
   15932:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
   15936:	4b05      	ldr	r3, [pc, #20]	; (1594c <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
   15938:	681b      	ldr	r3, [r3, #0]
   1593a:	2201      	movs	r2, #1
   1593c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
   15940:	bf00      	nop
   15942:	370c      	adds	r7, #12
   15944:	46bd      	mov	sp, r7
   15946:	bc80      	pop	{r7}
   15948:	4770      	bx	lr
   1594a:	bf00      	nop
   1594c:	20005520 	.word	0x20005520

00015950 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
   15950:	b480      	push	{r7}
   15952:	b083      	sub	sp, #12
   15954:	af00      	add	r7, sp, #0
   15956:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
   15958:	4b04      	ldr	r3, [pc, #16]	; (1596c <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
   1595a:	681b      	ldr	r3, [r3, #0]
   1595c:	2201      	movs	r2, #1
   1595e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
   15962:	bf00      	nop
   15964:	370c      	adds	r7, #12
   15966:	46bd      	mov	sp, r7
   15968:	bc80      	pop	{r7}
   1596a:	4770      	bx	lr
   1596c:	20005520 	.word	0x20005520

00015970 <_ZL17ResetValveTimeoutPK10timer_task>:

static void ResetValveTimeout(const struct timer_task *const timer_task)
{
   15970:	b480      	push	{r7}
   15972:	b083      	sub	sp, #12
   15974:	af00      	add	r7, sp, #0
   15976:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController->resetTimeout=true;
   15978:	4b04      	ldr	r3, [pc, #16]	; (1598c <_ZL17ResetValveTimeoutPK10timer_task+0x1c>)
   1597a:	681b      	ldr	r3, [r3, #0]
   1597c:	2201      	movs	r2, #1
   1597e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
   15982:	bf00      	nop
   15984:	370c      	adds	r7, #12
   15986:	46bd      	mov	sp, r7
   15988:	bc80      	pop	{r7}
   1598a:	4770      	bx	lr
   1598c:	20005520 	.word	0x20005520

00015990 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   15990:	b580      	push	{r7, lr}
   15992:	b082      	sub	sp, #8
   15994:	af00      	add	r7, sp, #0
   15996:	6078      	str	r0, [r7, #4]
   15998:	687b      	ldr	r3, [r7, #4]
   1599a:	4618      	mov	r0, r3
   1599c:	4b1e      	ldr	r3, [pc, #120]	; (15a18 <_ZN22FlapperValveControllerC1Ev+0x88>)
   1599e:	4798      	blx	r3
{
	fv=&fvStatic;
   159a0:	687b      	ldr	r3, [r7, #4]
   159a2:	4a1e      	ldr	r2, [pc, #120]	; (15a1c <_ZN22FlapperValveControllerC1Ev+0x8c>)
   159a4:	67da      	str	r2, [r3, #124]	; 0x7c
	ptrFlapperValveController=this;
   159a6:	4a1e      	ldr	r2, [pc, #120]	; (15a20 <_ZN22FlapperValveControllerC1Ev+0x90>)
   159a8:	687b      	ldr	r3, [r7, #4]
   159aa:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
   159ac:	687b      	ldr	r3, [r7, #4]
   159ae:	2200      	movs	r2, #0
   159b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
   159b4:	687b      	ldr	r3, [r7, #4]
   159b6:	2200      	movs	r2, #0
   159b8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
   159bc:	687b      	ldr	r3, [r7, #4]
   159be:	2200      	movs	r2, #0
   159c0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
   159c4:	687b      	ldr	r3, [r7, #4]
   159c6:	2200      	movs	r2, #0
   159c8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
   159cc:	687b      	ldr	r3, [r7, #4]
   159ce:	2200      	movs	r2, #0
   159d0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   159d4:	687b      	ldr	r3, [r7, #4]
   159d6:	22da      	movs	r2, #218	; 0xda
   159d8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
   159dc:	687b      	ldr	r3, [r7, #4]
   159de:	2200      	movs	r2, #0
   159e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
   159e4:	687b      	ldr	r3, [r7, #4]
   159e6:	2200      	movs	r2, #0
   159e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
   159ec:	687b      	ldr	r3, [r7, #4]
   159ee:	2200      	movs	r2, #0
   159f0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
   159f4:	687b      	ldr	r3, [r7, #4]
   159f6:	2200      	movs	r2, #0
   159f8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
   159fc:	687b      	ldr	r3, [r7, #4]
   159fe:	2200      	movs	r2, #0
   15a00:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
   15a04:	687b      	ldr	r3, [r7, #4]
   15a06:	2200      	movs	r2, #0
   15a08:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
   15a0c:	687b      	ldr	r3, [r7, #4]
   15a0e:	4618      	mov	r0, r3
   15a10:	3708      	adds	r7, #8
   15a12:	46bd      	mov	sp, r7
   15a14:	bd80      	pop	{r7, pc}
   15a16:	bf00      	nop
   15a18:	00016a49 	.word	0x00016a49
   15a1c:	20005524 	.word	0x20005524
   15a20:	20005520 	.word	0x20005520

00015a24 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   15a24:	b580      	push	{r7, lr}
   15a26:	b082      	sub	sp, #8
   15a28:	af00      	add	r7, sp, #0
   15a2a:	6078      	str	r0, [r7, #4]
   15a2c:	687b      	ldr	r3, [r7, #4]
   15a2e:	4618      	mov	r0, r3
   15a30:	4b03      	ldr	r3, [pc, #12]	; (15a40 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   15a32:	4798      	blx	r3
{
} //~FlapperValveController
   15a34:	687b      	ldr	r3, [r7, #4]
   15a36:	4618      	mov	r0, r3
   15a38:	3708      	adds	r7, #8
   15a3a:	46bd      	mov	sp, r7
   15a3c:	bd80      	pop	{r7, pc}
   15a3e:	bf00      	nop
   15a40:	00016a95 	.word	0x00016a95

00015a44 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
   15a44:	b580      	push	{r7, lr}
   15a46:	b082      	sub	sp, #8
   15a48:	af00      	add	r7, sp, #0
   15a4a:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	4a0d      	ldr	r2, [pc, #52]	; (15a84 <_ZN22FlapperValveController14InitControllerEv+0x40>)
   15a50:	67da      	str	r2, [r3, #124]	; 0x7c
	if (fv->Init())
   15a52:	687b      	ldr	r3, [r7, #4]
   15a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   15a56:	4618      	mov	r0, r3
   15a58:	4b0b      	ldr	r3, [pc, #44]	; (15a88 <_ZN22FlapperValveController14InitControllerEv+0x44>)
   15a5a:	4798      	blx	r3
   15a5c:	4603      	mov	r3, r0
   15a5e:	2b00      	cmp	r3, #0
   15a60:	d007      	beq.n	15a72 <_ZN22FlapperValveController14InitControllerEv+0x2e>
	{
		isOK=Selftest();
   15a62:	6878      	ldr	r0, [r7, #4]
   15a64:	4b09      	ldr	r3, [pc, #36]	; (15a8c <_ZN22FlapperValveController14InitControllerEv+0x48>)
   15a66:	4798      	blx	r3
   15a68:	4603      	mov	r3, r0
   15a6a:	461a      	mov	r2, r3
   15a6c:	687b      	ldr	r3, [r7, #4]
   15a6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	return	isOK;	
   15a72:	687b      	ldr	r3, [r7, #4]
   15a74:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15a78:	b2db      	uxtb	r3, r3
}
   15a7a:	4618      	mov	r0, r3
   15a7c:	3708      	adds	r7, #8
   15a7e:	46bd      	mov	sp, r7
   15a80:	bd80      	pop	{r7, pc}
   15a82:	bf00      	nop
   15a84:	20005524 	.word	0x20005524
   15a88:	00016ab5 	.word	0x00016ab5
   15a8c:	00016749 	.word	0x00016749

00015a90 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   15a90:	b480      	push	{r7}
   15a92:	b083      	sub	sp, #12
   15a94:	af00      	add	r7, sp, #0
   15a96:	6078      	str	r0, [r7, #4]
   15a98:	460b      	mov	r3, r1
   15a9a:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   15a9c:	687b      	ldr	r3, [r7, #4]
   15a9e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
   15aa2:	687b      	ldr	r3, [r7, #4]
   15aa4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
   15aa8:	687b      	ldr	r3, [r7, #4]
   15aaa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15aae:	461a      	mov	r2, r3
   15ab0:	78fb      	ldrb	r3, [r7, #3]
   15ab2:	429a      	cmp	r2, r3
   15ab4:	bfcc      	ite	gt
   15ab6:	2301      	movgt	r3, #1
   15ab8:	2300      	movle	r3, #0
   15aba:	b2da      	uxtb	r2, r3
   15abc:	687b      	ldr	r3, [r7, #4]
   15abe:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
   15ac2:	687b      	ldr	r3, [r7, #4]
   15ac4:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
   15ac8:	4618      	mov	r0, r3
   15aca:	370c      	adds	r7, #12
   15acc:	46bd      	mov	sp, r7
   15ace:	bc80      	pop	{r7}
   15ad0:	4770      	bx	lr
	...

00015ad4 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   15ad4:	b580      	push	{r7, lr}
   15ad6:	b082      	sub	sp, #8
   15ad8:	af00      	add	r7, sp, #0
   15ada:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   15adc:	687b      	ldr	r3, [r7, #4]
   15ade:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15ae2:	4619      	mov	r1, r3
   15ae4:	6878      	ldr	r0, [r7, #4]
   15ae6:	4b03      	ldr	r3, [pc, #12]	; (15af4 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   15ae8:	4798      	blx	r3
   15aea:	4603      	mov	r3, r0
	
}
   15aec:	4618      	mov	r0, r3
   15aee:	3708      	adds	r7, #8
   15af0:	46bd      	mov	sp, r7
   15af2:	bd80      	pop	{r7, pc}
   15af4:	00015a91 	.word	0x00015a91

00015af8 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	fv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   15af8:	b590      	push	{r4, r7, lr}
   15afa:	b083      	sub	sp, #12
   15afc:	af00      	add	r7, sp, #0
   15afe:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   15b00:	687b      	ldr	r3, [r7, #4]
   15b02:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   15b06:	687b      	ldr	r3, [r7, #4]
   15b08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
   15b0c:	687b      	ldr	r3, [r7, #4]
   15b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   15b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   15b14:	2b00      	cmp	r3, #0
   15b16:	d008      	beq.n	15b2a <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
   15b18:	687b      	ldr	r3, [r7, #4]
   15b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   15b1c:	2100      	movs	r1, #0
   15b1e:	4618      	mov	r0, r3
   15b20:	4b0b      	ldr	r3, [pc, #44]	; (15b50 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
   15b22:	4798      	blx	r3
		delay_ms(10);
   15b24:	200a      	movs	r0, #10
   15b26:	4b0b      	ldr	r3, [pc, #44]	; (15b54 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   15b28:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
   15b2e:	6878      	ldr	r0, [r7, #4]
   15b30:	4b09      	ldr	r3, [pc, #36]	; (15b58 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   15b32:	4798      	blx	r3
   15b34:	4603      	mov	r3, r0
   15b36:	4619      	mov	r1, r3
   15b38:	4620      	mov	r0, r4
   15b3a:	4b08      	ldr	r3, [pc, #32]	; (15b5c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   15b3c:	4798      	blx	r3
	StartMotor();
   15b3e:	6878      	ldr	r0, [r7, #4]
   15b40:	4b07      	ldr	r3, [pc, #28]	; (15b60 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   15b42:	4798      	blx	r3
	return 0;
   15b44:	2300      	movs	r3, #0
}
   15b46:	4618      	mov	r0, r3
   15b48:	370c      	adds	r7, #12
   15b4a:	46bd      	mov	sp, r7
   15b4c:	bd90      	pop	{r4, r7, pc}
   15b4e:	bf00      	nop
   15b50:	00016c69 	.word	0x00016c69
   15b54:	0000647d 	.word	0x0000647d
   15b58:	00015ad5 	.word	0x00015ad5
   15b5c:	00016ce9 	.word	0x00016ce9
   15b60:	000163e1 	.word	0x000163e1

00015b64 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   15b64:	b580      	push	{r7, lr}
   15b66:	b082      	sub	sp, #8
   15b68:	af00      	add	r7, sp, #0
   15b6a:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   15b6c:	6878      	ldr	r0, [r7, #4]
   15b6e:	4b13      	ldr	r3, [pc, #76]	; (15bbc <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   15b70:	4798      	blx	r3
   15b72:	4603      	mov	r3, r0
   15b74:	2b00      	cmp	r3, #0
   15b76:	d003      	beq.n	15b80 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   15b78:	6878      	ldr	r0, [r7, #4]
   15b7a:	4b11      	ldr	r3, [pc, #68]	; (15bc0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   15b7c:	4798      	blx	r3
   15b7e:	e013      	b.n	15ba8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   15b80:	687b      	ldr	r3, [r7, #4]
   15b82:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   15b86:	2b00      	cmp	r3, #0
   15b88:	d00b      	beq.n	15ba2 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   15b8a:	687b      	ldr	r3, [r7, #4]
   15b8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   15b90:	4619      	mov	r1, r3
   15b92:	6878      	ldr	r0, [r7, #4]
   15b94:	4b0b      	ldr	r3, [pc, #44]	; (15bc4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   15b96:	4798      	blx	r3
			NBC_Activated=false;
   15b98:	687b      	ldr	r3, [r7, #4]
   15b9a:	2200      	movs	r2, #0
   15b9c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
   15ba0:	e002      	b.n	15ba8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   15ba2:	6878      	ldr	r0, [r7, #4]
   15ba4:	4b08      	ldr	r3, [pc, #32]	; (15bc8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   15ba6:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   15ba8:	687b      	ldr	r3, [r7, #4]
   15baa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   15bae:	f083 0301 	eor.w	r3, r3, #1
   15bb2:	b2db      	uxtb	r3, r3
}
   15bb4:	4618      	mov	r0, r3
   15bb6:	3708      	adds	r7, #8
   15bb8:	46bd      	mov	sp, r7
   15bba:	bd80      	pop	{r7, pc}
   15bbc:	00016209 	.word	0x00016209
   15bc0:	000161a9 	.word	0x000161a9
   15bc4:	00016471 	.word	0x00016471
   15bc8:	00015da1 	.word	0x00015da1

00015bcc <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   15bcc:	b590      	push	{r4, r7, lr}
   15bce:	b085      	sub	sp, #20
   15bd0:	af00      	add	r7, sp, #0
   15bd2:	6078      	str	r0, [r7, #4]
	bool result=false;
   15bd4:	2300      	movs	r3, #0
   15bd6:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   15bd8:	687b      	ldr	r3, [r7, #4]
   15bda:	33bf      	adds	r3, #191	; 0xbf
   15bdc:	4619      	mov	r1, r3
   15bde:	4817      	ldr	r0, [pc, #92]	; (15c3c <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   15be0:	4b17      	ldr	r3, [pc, #92]	; (15c40 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   15be2:	4798      	blx	r3
	UpdateFlapperValveData();
   15be4:	6878      	ldr	r0, [r7, #4]
   15be6:	4b17      	ldr	r3, [pc, #92]	; (15c44 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   15be8:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   15bea:	687b      	ldr	r3, [r7, #4]
   15bec:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
   15bf0:	f083 0301 	eor.w	r3, r3, #1
   15bf4:	b2db      	uxtb	r3, r3
   15bf6:	461c      	mov	r4, r3
   15bf8:	6878      	ldr	r0, [r7, #4]
   15bfa:	4b13      	ldr	r3, [pc, #76]	; (15c48 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   15bfc:	4798      	blx	r3
   15bfe:	4603      	mov	r3, r0
   15c00:	f083 0301 	eor.w	r3, r3, #1
   15c04:	b2db      	uxtb	r3, r3
   15c06:	4023      	ands	r3, r4
   15c08:	2b00      	cmp	r3, #0
   15c0a:	bf14      	ite	ne
   15c0c:	2301      	movne	r3, #1
   15c0e:	2300      	moveq	r3, #0
   15c10:	b2db      	uxtb	r3, r3
   15c12:	2b00      	cmp	r3, #0
   15c14:	d00d      	beq.n	15c32 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   15c16:	687b      	ldr	r3, [r7, #4]
   15c18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15c1c:	461a      	mov	r2, r3
   15c1e:	687b      	ldr	r3, [r7, #4]
   15c20:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   15c24:	429a      	cmp	r2, r3
   15c26:	dd02      	ble.n	15c2e <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   15c28:	2301      	movs	r3, #1
   15c2a:	73fb      	strb	r3, [r7, #15]
   15c2c:	e001      	b.n	15c32 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   15c2e:	2300      	movs	r3, #0
   15c30:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   15c32:	7bfb      	ldrb	r3, [r7, #15]
}
   15c34:	4618      	mov	r0, r3
   15c36:	3714      	adds	r7, #20
   15c38:	46bd      	mov	sp, r7
   15c3a:	bd90      	pop	{r4, r7, pc}
   15c3c:	20006c64 	.word	0x20006c64
   15c40:	00018129 	.word	0x00018129
   15c44:	00016651 	.word	0x00016651
   15c48:	00016209 	.word	0x00016209

00015c4c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b082      	sub	sp, #8
   15c50:	af00      	add	r7, sp, #0
   15c52:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   15c54:	6878      	ldr	r0, [r7, #4]
   15c56:	4b11      	ldr	r3, [pc, #68]	; (15c9c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
   15c58:	4798      	blx	r3
   15c5a:	4603      	mov	r3, r0
   15c5c:	461a      	mov	r2, r3
   15c5e:	687b      	ldr	r3, [r7, #4]
   15c60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15c64:	b2db      	uxtb	r3, r3
   15c66:	f083 0301 	eor.w	r3, r3, #1
   15c6a:	b2db      	uxtb	r3, r3
   15c6c:	4013      	ands	r3, r2
   15c6e:	2b00      	cmp	r3, #0
   15c70:	bf14      	ite	ne
   15c72:	2301      	movne	r3, #1
   15c74:	2300      	moveq	r3, #0
   15c76:	b2db      	uxtb	r3, r3
   15c78:	2b00      	cmp	r3, #0
   15c7a:	d003      	beq.n	15c84 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   15c7c:	6878      	ldr	r0, [r7, #4]
   15c7e:	4b08      	ldr	r3, [pc, #32]	; (15ca0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
   15c80:	4798      	blx	r3
   15c82:	e002      	b.n	15c8a <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
   15c84:	6878      	ldr	r0, [r7, #4]
   15c86:	4b07      	ldr	r3, [pc, #28]	; (15ca4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
   15c88:	4798      	blx	r3
	}
	return resetTimeout;
   15c8a:	687b      	ldr	r3, [r7, #4]
   15c8c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   15c90:	b2db      	uxtb	r3, r3
}
   15c92:	4618      	mov	r0, r3
   15c94:	3708      	adds	r7, #8
   15c96:	46bd      	mov	sp, r7
   15c98:	bd80      	pop	{r7, pc}
   15c9a:	bf00      	nop
   15c9c:	00015bcd 	.word	0x00015bcd
   15ca0:	00016015 	.word	0x00016015
   15ca4:	00015ca9 	.word	0x00015ca9

00015ca8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   15ca8:	b580      	push	{r7, lr}
   15caa:	b082      	sub	sp, #8
   15cac:	af00      	add	r7, sp, #0
   15cae:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   15cb0:	6878      	ldr	r0, [r7, #4]
   15cb2:	4b29      	ldr	r3, [pc, #164]	; (15d58 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   15cb4:	4798      	blx	r3
   15cb6:	4603      	mov	r3, r0
   15cb8:	2b00      	cmp	r3, #0
   15cba:	d031      	beq.n	15d20 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   15cbc:	687b      	ldr	r3, [r7, #4]
   15cbe:	2201      	movs	r2, #1
   15cc0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   15cca:	2b00      	cmp	r3, #0
   15ccc:	d003      	beq.n	15cd6 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   15cce:	6878      	ldr	r0, [r7, #4]
   15cd0:	4b22      	ldr	r3, [pc, #136]	; (15d5c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   15cd2:	4798      	blx	r3
   15cd4:	e038      	b.n	15d48 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   15cd6:	687b      	ldr	r3, [r7, #4]
   15cd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15cdc:	461a      	mov	r2, r3
   15cde:	687b      	ldr	r3, [r7, #4]
   15ce0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   15ce4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   15ce8:	429a      	cmp	r2, r3
   15cea:	dd0c      	ble.n	15d06 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   15cec:	687b      	ldr	r3, [r7, #4]
   15cee:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   15cf2:	43db      	mvns	r3, r3
   15cf4:	b2db      	uxtb	r3, r3
   15cf6:	4619      	mov	r1, r3
   15cf8:	6878      	ldr	r0, [r7, #4]
   15cfa:	4b19      	ldr	r3, [pc, #100]	; (15d60 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   15cfc:	4798      	blx	r3
					standAloneReturning=true;
   15cfe:	687b      	ldr	r3, [r7, #4]
   15d00:	2201      	movs	r2, #1
   15d02:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   15d06:	687b      	ldr	r3, [r7, #4]
   15d08:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   15d0c:	43db      	mvns	r3, r3
   15d0e:	b2da      	uxtb	r2, r3
   15d10:	687b      	ldr	r3, [r7, #4]
   15d12:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
   15d16:	687b      	ldr	r3, [r7, #4]
   15d18:	2201      	movs	r2, #1
   15d1a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
   15d1e:	e013      	b.n	15d48 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   15d20:	687b      	ldr	r3, [r7, #4]
   15d22:	2200      	movs	r2, #0
   15d24:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
   15d28:	687b      	ldr	r3, [r7, #4]
   15d2a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   15d2e:	2b00      	cmp	r3, #0
   15d30:	d007      	beq.n	15d42 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   15d32:	687b      	ldr	r3, [r7, #4]
   15d34:	2200      	movs	r2, #0
   15d36:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
   15d3a:	687b      	ldr	r3, [r7, #4]
   15d3c:	2200      	movs	r2, #0
   15d3e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   15d42:	6878      	ldr	r0, [r7, #4]
   15d44:	4b05      	ldr	r3, [pc, #20]	; (15d5c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   15d46:	4798      	blx	r3
		
	}
	return standAloneMode;
   15d48:	687b      	ldr	r3, [r7, #4]
   15d4a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
   15d4e:	4618      	mov	r0, r3
   15d50:	3708      	adds	r7, #8
   15d52:	46bd      	mov	sp, r7
   15d54:	bd80      	pop	{r7, pc}
   15d56:	bf00      	nop
   15d58:	00015d65 	.word	0x00015d65
   15d5c:	00015b65 	.word	0x00015b65
   15d60:	00016471 	.word	0x00016471

00015d64 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   15d64:	b480      	push	{r7}
   15d66:	b085      	sub	sp, #20
   15d68:	af00      	add	r7, sp, #0
   15d6a:	6078      	str	r0, [r7, #4]
	bool result=false;
   15d6c:	2300      	movs	r3, #0
   15d6e:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
   15d70:	687b      	ldr	r3, [r7, #4]
   15d72:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   15d76:	461a      	mov	r2, r3
   15d78:	687b      	ldr	r3, [r7, #4]
   15d7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   15d7e:	f083 0301 	eor.w	r3, r3, #1
   15d82:	b2db      	uxtb	r3, r3
   15d84:	4013      	ands	r3, r2
   15d86:	2b00      	cmp	r3, #0
   15d88:	d002      	beq.n	15d90 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
   15d8a:	2301      	movs	r3, #1
   15d8c:	73fb      	strb	r3, [r7, #15]
   15d8e:	e001      	b.n	15d94 <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
   15d90:	2300      	movs	r3, #0
   15d92:	73fb      	strb	r3, [r7, #15]
	}
	return result;
   15d94:	7bfb      	ldrb	r3, [r7, #15]
}
   15d96:	4618      	mov	r0, r3
   15d98:	3714      	adds	r7, #20
   15d9a:	46bd      	mov	sp, r7
   15d9c:	bc80      	pop	{r7}
   15d9e:	4770      	bx	lr

00015da0 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   15da0:	b590      	push	{r4, r7, lr}
   15da2:	b083      	sub	sp, #12
   15da4:	af00      	add	r7, sp, #0
   15da6:	6078      	str	r0, [r7, #4]
	if (isControlling)
   15da8:	687b      	ldr	r3, [r7, #4]
   15daa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
   15dae:	2b00      	cmp	r3, #0
   15db0:	f000 8117 	beq.w	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
   15dba:	687b      	ldr	r3, [r7, #4]
   15dbc:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
   15dc0:	4313      	orrs	r3, r2
   15dc2:	b2db      	uxtb	r3, r3
   15dc4:	461a      	mov	r2, r3
   15dc6:	687b      	ldr	r3, [r7, #4]
   15dc8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   15dcc:	4013      	ands	r3, r2
   15dce:	687a      	ldr	r2, [r7, #4]
   15dd0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   15dd4:	b2d2      	uxtb	r2, r2
   15dd6:	4013      	ands	r3, r2
   15dd8:	2b00      	cmp	r3, #0
   15dda:	bf14      	ite	ne
   15ddc:	2301      	movne	r3, #1
   15dde:	2300      	moveq	r3, #0
   15de0:	b2db      	uxtb	r3, r3
   15de2:	2b00      	cmp	r3, #0
   15de4:	d003      	beq.n	15dee <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   15de6:	6878      	ldr	r0, [r7, #4]
   15de8:	4b80      	ldr	r3, [pc, #512]	; (15fec <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   15dea:	4798      	blx	r3
   15dec:	e0f9      	b.n	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
		} 
		else
		{
			
		//	currentPosition=fv->ReadActualPosition();
			if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   15dee:	687b      	ldr	r3, [r7, #4]
   15df0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15df4:	2b05      	cmp	r3, #5
   15df6:	bfd4      	ite	le
   15df8:	2301      	movle	r3, #1
   15dfa:	2300      	movgt	r3, #0
   15dfc:	b2da      	uxtb	r2, r3
   15dfe:	687b      	ldr	r3, [r7, #4]
   15e00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15e04:	2b05      	cmp	r3, #5
   15e06:	bfd4      	ite	le
   15e08:	2301      	movle	r3, #1
   15e0a:	2300      	movgt	r3, #0
   15e0c:	b2db      	uxtb	r3, r3
   15e0e:	4013      	ands	r3, r2
   15e10:	b2da      	uxtb	r2, r3
   15e12:	687b      	ldr	r3, [r7, #4]
   15e14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15e18:	2bfa      	cmp	r3, #250	; 0xfa
   15e1a:	bfcc      	ite	gt
   15e1c:	2301      	movgt	r3, #1
   15e1e:	2300      	movle	r3, #0
   15e20:	b2d9      	uxtb	r1, r3
   15e22:	687b      	ldr	r3, [r7, #4]
   15e24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15e28:	2bf5      	cmp	r3, #245	; 0xf5
   15e2a:	bfcc      	ite	gt
   15e2c:	2301      	movgt	r3, #1
   15e2e:	2300      	movle	r3, #0
   15e30:	b2db      	uxtb	r3, r3
   15e32:	400b      	ands	r3, r1
   15e34:	b2db      	uxtb	r3, r3
   15e36:	4313      	orrs	r3, r2
   15e38:	b2db      	uxtb	r3, r3
   15e3a:	461a      	mov	r2, r3
   15e3c:	687b      	ldr	r3, [r7, #4]
   15e3e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   15e42:	f083 0301 	eor.w	r3, r3, #1
   15e46:	b2db      	uxtb	r3, r3
   15e48:	4619      	mov	r1, r3
   15e4a:	687b      	ldr	r3, [r7, #4]
   15e4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15e50:	b2db      	uxtb	r3, r3
   15e52:	400b      	ands	r3, r1
   15e54:	4013      	ands	r3, r2
   15e56:	2b00      	cmp	r3, #0
   15e58:	bf14      	ite	ne
   15e5a:	2301      	movne	r3, #1
   15e5c:	2300      	moveq	r3, #0
   15e5e:	b2db      	uxtb	r3, r3
   15e60:	2b00      	cmp	r3, #0
   15e62:	d014      	beq.n	15e8e <_ZN22FlapperValveController15ControlMovementEv+0xee>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   15e64:	22c8      	movs	r2, #200	; 0xc8
   15e66:	4962      	ldr	r1, [pc, #392]	; (15ff0 <_ZN22FlapperValveController15ControlMovementEv+0x250>)
   15e68:	4862      	ldr	r0, [pc, #392]	; (15ff4 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
   15e6a:	4b63      	ldr	r3, [pc, #396]	; (15ff8 <_ZN22FlapperValveController15ControlMovementEv+0x258>)
   15e6c:	4798      	blx	r3
				fullClosedTimeout=false;
   15e6e:	687b      	ldr	r3, [r7, #4]
   15e70:	2200      	movs	r2, #0
   15e72:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				gotSetpoint=false;
   15e76:	687b      	ldr	r3, [r7, #4]
   15e78:	2200      	movs	r2, #0
   15e7a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				closing=true;
   15e7e:	687b      	ldr	r3, [r7, #4]
   15e80:	2201      	movs	r2, #1
   15e82:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
				unLockTimeout=true;
   15e86:	687b      	ldr	r3, [r7, #4]
   15e88:	2201      	movs	r2, #1
   15e8a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   15e8e:	687b      	ldr	r3, [r7, #4]
   15e90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15e94:	461a      	mov	r2, r3
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15e9c:	1ad3      	subs	r3, r2, r3
   15e9e:	2b00      	cmp	r3, #0
   15ea0:	bfb8      	it	lt
   15ea2:	425b      	neglt	r3, r3
   15ea4:	687a      	ldr	r2, [r7, #4]
   15ea6:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
   15eaa:	4293      	cmp	r3, r2
   15eac:	bfcc      	ite	gt
   15eae:	2301      	movgt	r3, #1
   15eb0:	2300      	movle	r3, #0
   15eb2:	b2db      	uxtb	r3, r3
   15eb4:	461a      	mov	r2, r3
   15eb6:	687b      	ldr	r3, [r7, #4]
   15eb8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   15ebc:	4313      	orrs	r3, r2
   15ebe:	2b00      	cmp	r3, #0
   15ec0:	d079      	beq.n	15fb6 <_ZN22FlapperValveController15ControlMovementEv+0x216>
			{
				if (flapperValveIsMoving)
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15ec8:	b2db      	uxtb	r3, r3
   15eca:	2b00      	cmp	r3, #0
   15ecc:	d04b      	beq.n	15f66 <_ZN22FlapperValveController15ControlMovementEv+0x1c6>
				{
					if (closing)
   15ece:	687b      	ldr	r3, [r7, #4]
   15ed0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   15ed4:	2b00      	cmp	r3, #0
   15ed6:	d00e      	beq.n	15ef6 <_ZN22FlapperValveController15ControlMovementEv+0x156>
					{
						if (keepControlling)
   15ed8:	687b      	ldr	r3, [r7, #4]
   15eda:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d054      	beq.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						{
							if (fullClosedTimeout)
   15ee2:	687b      	ldr	r3, [r7, #4]
   15ee4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   15ee8:	b2db      	uxtb	r3, r3
   15eea:	2b00      	cmp	r3, #0
   15eec:	d04e      	beq.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
							{
								StopValveAtLimit();
   15eee:	6878      	ldr	r0, [r7, #4]
   15ef0:	4b3e      	ldr	r3, [pc, #248]	; (15fec <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   15ef2:	4798      	blx	r3
   15ef4:	e04a      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   15ef6:	687b      	ldr	r3, [r7, #4]
   15ef8:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
   15efc:	6878      	ldr	r0, [r7, #4]
   15efe:	4b3f      	ldr	r3, [pc, #252]	; (15ffc <_ZN22FlapperValveController15ControlMovementEv+0x25c>)
   15f00:	4798      	blx	r3
   15f02:	4603      	mov	r3, r0
   15f04:	429c      	cmp	r4, r3
   15f06:	bf14      	ite	ne
   15f08:	2301      	movne	r3, #1
   15f0a:	2300      	moveq	r3, #0
   15f0c:	b2db      	uxtb	r3, r3
   15f0e:	2b00      	cmp	r3, #0
   15f10:	d00b      	beq.n	15f2a <_ZN22FlapperValveController15ControlMovementEv+0x18a>
						{
							StopMotor();
   15f12:	6878      	ldr	r0, [r7, #4]
   15f14:	4b3a      	ldr	r3, [pc, #232]	; (16000 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   15f16:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   15f18:	493a      	ldr	r1, [pc, #232]	; (16004 <_ZN22FlapperValveController15ControlMovementEv+0x264>)
   15f1a:	4836      	ldr	r0, [pc, #216]	; (15ff4 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
   15f1c:	4b3a      	ldr	r3, [pc, #232]	; (16008 <_ZN22FlapperValveController15ControlMovementEv+0x268>)
   15f1e:	4798      	blx	r3
							keepControlling=true;
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	2201      	movs	r2, #1
   15f24:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   15f28:	e030      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							if (timeoutFlapperValveController)
   15f2a:	687b      	ldr	r3, [r7, #4]
   15f2c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   15f30:	b2db      	uxtb	r3, r3
   15f32:	2b00      	cmp	r3, #0
   15f34:	d003      	beq.n	15f3e <_ZN22FlapperValveController15ControlMovementEv+0x19e>
							{
								StopMotor();
   15f36:	6878      	ldr	r0, [r7, #4]
   15f38:	4b31      	ldr	r3, [pc, #196]	; (16000 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   15f3a:	4798      	blx	r3
   15f3c:	e026      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								
							}
							else
							{
								if (keepControlling)
   15f3e:	687b      	ldr	r3, [r7, #4]
   15f40:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   15f44:	2b00      	cmp	r3, #0
   15f46:	d021      	beq.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								{
									if (timeoutKeepControlling)
   15f48:	687b      	ldr	r3, [r7, #4]
   15f4a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   15f4e:	b2db      	uxtb	r3, r3
   15f50:	2b00      	cmp	r3, #0
   15f52:	d003      	beq.n	15f5c <_ZN22FlapperValveController15ControlMovementEv+0x1bc>
									{
										StopMotor();
   15f54:	6878      	ldr	r0, [r7, #4]
   15f56:	4b2a      	ldr	r3, [pc, #168]	; (16000 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
   15f58:	4798      	blx	r3
   15f5a:	e017      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
									}
									else
									{
										KeepControlling();
   15f5c:	2100      	movs	r1, #0
   15f5e:	6878      	ldr	r0, [r7, #4]
   15f60:	4b2a      	ldr	r3, [pc, #168]	; (1600c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
   15f62:	4798      	blx	r3
   15f64:	e012      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					}
					
				}
				else
				{
					if (keepControlling)
   15f66:	687b      	ldr	r3, [r7, #4]
   15f68:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d00d      	beq.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					{
						if (timeoutKeepControlling)
   15f70:	687b      	ldr	r3, [r7, #4]
   15f72:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   15f76:	b2db      	uxtb	r3, r3
   15f78:	2b00      	cmp	r3, #0
   15f7a:	d003      	beq.n	15f84 <_ZN22FlapperValveController15ControlMovementEv+0x1e4>
						{
							StopValveinBetween();
   15f7c:	6878      	ldr	r0, [r7, #4]
   15f7e:	4b24      	ldr	r3, [pc, #144]	; (16010 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
   15f80:	4798      	blx	r3
   15f82:	e003      	b.n	15f8c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							KeepControlling();
   15f84:	2100      	movs	r1, #0
   15f86:	6878      	ldr	r0, [r7, #4]
   15f88:	4b20      	ldr	r3, [pc, #128]	; (1600c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
   15f8a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   15f8c:	687b      	ldr	r3, [r7, #4]
   15f8e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15f92:	461a      	mov	r2, r3
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15f9a:	1ad3      	subs	r3, r2, r3
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	bfb8      	it	lt
   15fa0:	425b      	neglt	r3, r3
   15fa2:	687a      	ldr	r2, [r7, #4]
   15fa4:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
   15fa8:	4293      	cmp	r3, r2
   15faa:	dd1a      	ble.n	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				{
					gotSetpoint=false;
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	2200      	movs	r2, #0
   15fb0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
   15fb4:	e015      	b.n	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				
				
			}
			else
			{
				if (closing)
   15fb6:	687b      	ldr	r3, [r7, #4]
   15fb8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d009      	beq.n	15fd4 <_ZN22FlapperValveController15ControlMovementEv+0x234>
				{
					if (fullClosedTimeout)
   15fc0:	687b      	ldr	r3, [r7, #4]
   15fc2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   15fc6:	b2db      	uxtb	r3, r3
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d00a      	beq.n	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
						StopValveAtLimit();
   15fcc:	6878      	ldr	r0, [r7, #4]
   15fce:	4b07      	ldr	r3, [pc, #28]	; (15fec <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
   15fd0:	4798      	blx	r3
   15fd2:	e006      	b.n	15fe2 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   15fd4:	6878      	ldr	r0, [r7, #4]
   15fd6:	4b0e      	ldr	r3, [pc, #56]	; (16010 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
   15fd8:	4798      	blx	r3
					gotSetpoint=true;
   15fda:	687b      	ldr	r3, [r7, #4]
   15fdc:	2201      	movs	r2, #1
   15fde:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
   15fe2:	2300      	movs	r3, #0
	
}
   15fe4:	4618      	mov	r0, r3
   15fe6:	370c      	adds	r7, #12
   15fe8:	46bd      	mov	sp, r7
   15fea:	bd90      	pop	{r4, r7, pc}
   15fec:	000162ad 	.word	0x000162ad
   15ff0:	00015951 	.word	0x00015951
   15ff4:	20005480 	.word	0x20005480
   15ff8:	00013ff5 	.word	0x00013ff5
   15ffc:	00015ad5 	.word	0x00015ad5
   16000:	00016281 	.word	0x00016281
   16004:	00015925 	.word	0x00015925
   16008:	00013f85 	.word	0x00013f85
   1600c:	00016619 	.word	0x00016619
   16010:	00016321 	.word	0x00016321

00016014 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   16014:	b580      	push	{r7, lr}
   16016:	b084      	sub	sp, #16
   16018:	af00      	add	r7, sp, #0
   1601a:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   1601c:	2052      	movs	r0, #82	; 0x52
   1601e:	4b54      	ldr	r3, [pc, #336]	; (16170 <_ZN22FlapperValveController18ResetValvePositionEv+0x15c>)
   16020:	4798      	blx	r3
   16022:	4603      	mov	r3, r0
   16024:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   16026:	6878      	ldr	r0, [r7, #4]
   16028:	4b52      	ldr	r3, [pc, #328]	; (16174 <_ZN22FlapperValveController18ResetValvePositionEv+0x160>)
   1602a:	4798      	blx	r3
   1602c:	4603      	mov	r3, r0
   1602e:	2b00      	cmp	r3, #0
   16030:	f000 8099 	beq.w	16166 <_ZN22FlapperValveController18ResetValvePositionEv+0x152>
	{
		
		localSetpoint=currentMaximum;
   16034:	687b      	ldr	r3, [r7, #4]
   16036:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   1603a:	73bb      	strb	r3, [r7, #14]
		
		fv->SetEnable(false);
   1603c:	687b      	ldr	r3, [r7, #4]
   1603e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16040:	2100      	movs	r1, #0
   16042:	4618      	mov	r0, r3
   16044:	4b4c      	ldr	r3, [pc, #304]	; (16178 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   16046:	4798      	blx	r3
		fv->SetInvalidPosition(false);
   16048:	687b      	ldr	r3, [r7, #4]
   1604a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1604c:	2100      	movs	r1, #0
   1604e:	4618      	mov	r0, r3
   16050:	4b4a      	ldr	r3, [pc, #296]	; (1617c <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
   16052:	4798      	blx	r3
		fv->ClearMoveFault(false);
   16054:	687b      	ldr	r3, [r7, #4]
   16056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16058:	2100      	movs	r1, #0
   1605a:	4618      	mov	r0, r3
   1605c:	4b48      	ldr	r3, [pc, #288]	; (16180 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
   1605e:	4798      	blx	r3
		delay_ms(100);
   16060:	2064      	movs	r0, #100	; 0x64
   16062:	4b48      	ldr	r3, [pc, #288]	; (16184 <_ZN22FlapperValveController18ResetValvePositionEv+0x170>)
   16064:	4798      	blx	r3
		if (fv->ReadActualPosition()>localSetpoint)
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1606a:	4618      	mov	r0, r3
   1606c:	4b46      	ldr	r3, [pc, #280]	; (16188 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   1606e:	4798      	blx	r3
   16070:	4603      	mov	r3, r0
   16072:	461a      	mov	r2, r3
   16074:	7bbb      	ldrb	r3, [r7, #14]
   16076:	429a      	cmp	r2, r3
   16078:	bfcc      	ite	gt
   1607a:	2301      	movgt	r3, #1
   1607c:	2300      	movle	r3, #0
   1607e:	b2db      	uxtb	r3, r3
   16080:	2b00      	cmp	r3, #0
   16082:	d006      	beq.n	16092 <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			fv->SetDirection(true);
   16084:	687b      	ldr	r3, [r7, #4]
   16086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16088:	2101      	movs	r1, #1
   1608a:	4618      	mov	r0, r3
   1608c:	4b3f      	ldr	r3, [pc, #252]	; (1618c <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
   1608e:	4798      	blx	r3
   16090:	e005      	b.n	1609e <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			fv->SetDirection(false);
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16096:	2100      	movs	r1, #0
   16098:	4618      	mov	r0, r3
   1609a:	4b3c      	ldr	r3, [pc, #240]	; (1618c <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
   1609c:	4798      	blx	r3
		}
		fv->SetInvalidPosition(true);
   1609e:	687b      	ldr	r3, [r7, #4]
   160a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   160a2:	2101      	movs	r1, #1
   160a4:	4618      	mov	r0, r3
   160a6:	4b35      	ldr	r3, [pc, #212]	; (1617c <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
   160a8:	4798      	blx	r3
		fv->ClearMoveFault(true);
   160aa:	687b      	ldr	r3, [r7, #4]
   160ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   160ae:	2101      	movs	r1, #1
   160b0:	4618      	mov	r0, r3
   160b2:	4b33      	ldr	r3, [pc, #204]	; (16180 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
   160b4:	4798      	blx	r3
		fv->WriteSetpoint(localSetpoint);
   160b6:	687b      	ldr	r3, [r7, #4]
   160b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   160ba:	7bba      	ldrb	r2, [r7, #14]
   160bc:	4611      	mov	r1, r2
   160be:	4618      	mov	r0, r3
   160c0:	4b33      	ldr	r3, [pc, #204]	; (16190 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
   160c2:	4798      	blx	r3
		

		currentPosition=fv->ReadActualPosition();
   160c4:	687b      	ldr	r3, [r7, #4]
   160c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   160c8:	4618      	mov	r0, r3
   160ca:	4b2f      	ldr	r3, [pc, #188]	; (16188 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   160cc:	4798      	blx	r3
   160ce:	4603      	mov	r3, r0
   160d0:	461a      	mov	r2, r3
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	2200      	movs	r2, #0
   160dc:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValveTimeout),1000);
   160e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   160e4:	492b      	ldr	r1, [pc, #172]	; (16194 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
   160e6:	482c      	ldr	r0, [pc, #176]	; (16198 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
   160e8:	4b2c      	ldr	r3, [pc, #176]	; (1619c <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
   160ea:	4798      	blx	r3
		
		fv->SetEnable(true);
   160ec:	687b      	ldr	r3, [r7, #4]
   160ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   160f0:	2101      	movs	r1, #1
   160f2:	4618      	mov	r0, r3
   160f4:	4b20      	ldr	r3, [pc, #128]	; (16178 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   160f6:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   160f8:	687b      	ldr	r3, [r7, #4]
   160fa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   160fe:	461a      	mov	r2, r3
   16100:	7bbb      	ldrb	r3, [r7, #14]
   16102:	1ad3      	subs	r3, r2, r3
   16104:	2b00      	cmp	r3, #0
   16106:	bfb8      	it	lt
   16108:	425b      	neglt	r3, r3
   1610a:	2b06      	cmp	r3, #6
   1610c:	bfcc      	ite	gt
   1610e:	2301      	movgt	r3, #1
   16110:	2300      	movle	r3, #0
   16112:	b2db      	uxtb	r3, r3
   16114:	461a      	mov	r2, r3
   16116:	687b      	ldr	r3, [r7, #4]
   16118:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   1611c:	b2db      	uxtb	r3, r3
   1611e:	f083 0301 	eor.w	r3, r3, #1
   16122:	b2db      	uxtb	r3, r3
   16124:	4013      	ands	r3, r2
   16126:	2b00      	cmp	r3, #0
   16128:	bf14      	ite	ne
   1612a:	2301      	movne	r3, #1
   1612c:	2300      	moveq	r3, #0
   1612e:	b2db      	uxtb	r3, r3
   16130:	2b00      	cmp	r3, #0
   16132:	d00d      	beq.n	16150 <_ZN22FlapperValveController18ResetValvePositionEv+0x13c>

		{
			gpio_toggle_pin_level(LED0);
   16134:	2052      	movs	r0, #82	; 0x52
   16136:	4b1a      	ldr	r3, [pc, #104]	; (161a0 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   16138:	4798      	blx	r3
			currentPosition=fv->ReadActualPosition();
   1613a:	687b      	ldr	r3, [r7, #4]
   1613c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1613e:	4618      	mov	r0, r3
   16140:	4b11      	ldr	r3, [pc, #68]	; (16188 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
   16142:	4798      	blx	r3
   16144:	4603      	mov	r3, r0
   16146:	461a      	mov	r2, r3
   16148:	687b      	ldr	r3, [r7, #4]
   1614a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   1614e:	e7d3      	b.n	160f8 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>

		}
		fv->SetEnable(false);
   16150:	687b      	ldr	r3, [r7, #4]
   16152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16154:	2100      	movs	r1, #0
   16156:	4618      	mov	r0, r3
   16158:	4b07      	ldr	r3, [pc, #28]	; (16178 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
   1615a:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   1615c:	7bfb      	ldrb	r3, [r7, #15]
   1615e:	4619      	mov	r1, r3
   16160:	2052      	movs	r0, #82	; 0x52
   16162:	4b10      	ldr	r3, [pc, #64]	; (161a4 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   16164:	4798      	blx	r3
	} 
	else
	{
	}
}
   16166:	bf00      	nop
   16168:	3710      	adds	r7, #16
   1616a:	46bd      	mov	sp, r7
   1616c:	bd80      	pop	{r7, pc}
   1616e:	bf00      	nop
   16170:	000158e9 	.word	0x000158e9
   16174:	00015bcd 	.word	0x00015bcd
   16178:	00016c69 	.word	0x00016c69
   1617c:	00016dd9 	.word	0x00016dd9
   16180:	00016d61 	.word	0x00016d61
   16184:	0000647d 	.word	0x0000647d
   16188:	00016e89 	.word	0x00016e89
   1618c:	00016ce9 	.word	0x00016ce9
   16190:	00016e51 	.word	0x00016e51
   16194:	00015971 	.word	0x00015971
   16198:	20005480 	.word	0x20005480
   1619c:	00013ff5 	.word	0x00013ff5
   161a0:	000158b9 	.word	0x000158b9
   161a4:	00015881 	.word	0x00015881

000161a8 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   161a8:	b580      	push	{r7, lr}
   161aa:	b082      	sub	sp, #8
   161ac:	af00      	add	r7, sp, #0
   161ae:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   161b0:	687b      	ldr	r3, [r7, #4]
   161b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   161b6:	2b00      	cmp	r3, #0
   161b8:	d014      	beq.n	161e4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   161ba:	687b      	ldr	r3, [r7, #4]
   161bc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   161c0:	2b00      	cmp	r3, #0
   161c2:	d003      	beq.n	161cc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   161c4:	6878      	ldr	r0, [r7, #4]
   161c6:	4b0e      	ldr	r3, [pc, #56]	; (16200 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   161c8:	4798      	blx	r3
   161ca:	e013      	b.n	161f4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   161d2:	4619      	mov	r1, r3
   161d4:	6878      	ldr	r0, [r7, #4]
   161d6:	4b0b      	ldr	r3, [pc, #44]	; (16204 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   161d8:	4798      	blx	r3
			NBC_Activated=false;
   161da:	687b      	ldr	r3, [r7, #4]
   161dc:	2200      	movs	r2, #0
   161de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
   161e2:	e007      	b.n	161f4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   161e4:	21ff      	movs	r1, #255	; 0xff
   161e6:	6878      	ldr	r0, [r7, #4]
   161e8:	4b06      	ldr	r3, [pc, #24]	; (16204 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   161ea:	4798      	blx	r3
			NBC_Activated=true;
   161ec:	687b      	ldr	r3, [r7, #4]
   161ee:	2201      	movs	r2, #1
   161f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
   161f4:	2300      	movs	r3, #0
	
}
   161f6:	4618      	mov	r0, r3
   161f8:	3708      	adds	r7, #8
   161fa:	46bd      	mov	sp, r7
   161fc:	bd80      	pop	{r7, pc}
   161fe:	bf00      	nop
   16200:	00015da1 	.word	0x00015da1
   16204:	00016471 	.word	0x00016471

00016208 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   16208:	b480      	push	{r7}
   1620a:	b083      	sub	sp, #12
   1620c:	af00      	add	r7, sp, #0
   1620e:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   16210:	687b      	ldr	r3, [r7, #4]
   16212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   16216:	461a      	mov	r2, r3
   16218:	687b      	ldr	r3, [r7, #4]
   1621a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   1621e:	4013      	ands	r3, r2
   16220:	687a      	ldr	r2, [r7, #4]
   16222:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
   16226:	4313      	orrs	r3, r2
   16228:	2b00      	cmp	r3, #0
   1622a:	bf14      	ite	ne
   1622c:	2301      	movne	r3, #1
   1622e:	2300      	moveq	r3, #0
   16230:	b2da      	uxtb	r2, r3
   16232:	687b      	ldr	r3, [r7, #4]
   16234:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
   16238:	687b      	ldr	r3, [r7, #4]
   1623a:	22ff      	movs	r2, #255	; 0xff
   1623c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
   16240:	687b      	ldr	r3, [r7, #4]
   16242:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
   16246:	4618      	mov	r0, r3
   16248:	370c      	adds	r7, #12
   1624a:	46bd      	mov	sp, r7
   1624c:	bc80      	pop	{r7}
   1624e:	4770      	bx	lr

00016250 <_ZN22FlapperValveController16SetRemoteNBCModeEb>:

bool FlapperValveController::SetRemoteNBCMode(bool st){
   16250:	b480      	push	{r7}
   16252:	b083      	sub	sp, #12
   16254:	af00      	add	r7, sp, #0
   16256:	6078      	str	r0, [r7, #4]
   16258:	460b      	mov	r3, r1
   1625a:	70fb      	strb	r3, [r7, #3]
	if (st!=NBC_Mode)
   1625c:	687b      	ldr	r3, [r7, #4]
   1625e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   16262:	78fa      	ldrb	r2, [r7, #3]
   16264:	429a      	cmp	r2, r3
   16266:	d003      	beq.n	16270 <_ZN22FlapperValveController16SetRemoteNBCModeEb+0x20>
	{
		NBC_Remote=st;
   16268:	687b      	ldr	r3, [r7, #4]
   1626a:	78fa      	ldrb	r2, [r7, #3]
   1626c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	} 
	else
	{
		
	}
	return NBC_Remote;
   16270:	687b      	ldr	r3, [r7, #4]
   16272:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
}
   16276:	4618      	mov	r0, r3
   16278:	370c      	adds	r7, #12
   1627a:	46bd      	mov	sp, r7
   1627c:	bc80      	pop	{r7}
   1627e:	4770      	bx	lr

00016280 <_ZN22FlapperValveController9StopMotorEv>:


uint8_t	FlapperValveController::StopMotor(){
   16280:	b580      	push	{r7, lr}
   16282:	b082      	sub	sp, #8
   16284:	af00      	add	r7, sp, #0
   16286:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
   16288:	687b      	ldr	r3, [r7, #4]
   1628a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1628c:	2100      	movs	r1, #0
   1628e:	4618      	mov	r0, r3
   16290:	4b05      	ldr	r3, [pc, #20]	; (162a8 <_ZN22FlapperValveController9StopMotorEv+0x28>)
   16292:	4798      	blx	r3
	flapperValveIsMoving=false;
   16294:	687b      	ldr	r3, [r7, #4]
   16296:	2200      	movs	r2, #0
   16298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
   1629c:	2300      	movs	r3, #0
}
   1629e:	4618      	mov	r0, r3
   162a0:	3708      	adds	r7, #8
   162a2:	46bd      	mov	sp, r7
   162a4:	bd80      	pop	{r7, pc}
   162a6:	bf00      	nop
   162a8:	00016c69 	.word	0x00016c69

000162ac <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
   162ac:	b580      	push	{r7, lr}
   162ae:	b082      	sub	sp, #8
   162b0:	af00      	add	r7, sp, #0
   162b2:	6078      	str	r0, [r7, #4]
		if (closing)
   162b4:	687b      	ldr	r3, [r7, #4]
   162b6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   162ba:	2b00      	cmp	r3, #0
   162bc:	d003      	beq.n	162c6 <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   162be:	687b      	ldr	r3, [r7, #4]
   162c0:	2200      	movs	r2, #0
   162c2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
   162c6:	6878      	ldr	r0, [r7, #4]
   162c8:	4b10      	ldr	r3, [pc, #64]	; (1630c <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
   162ca:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   162cc:	4910      	ldr	r1, [pc, #64]	; (16310 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
   162ce:	4811      	ldr	r0, [pc, #68]	; (16314 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
   162d0:	4b11      	ldr	r3, [pc, #68]	; (16318 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
   162d2:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
   162d4:	4911      	ldr	r1, [pc, #68]	; (1631c <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
   162d6:	480f      	ldr	r0, [pc, #60]	; (16314 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
   162d8:	4b0f      	ldr	r3, [pc, #60]	; (16318 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
   162da:	4798      	blx	r3
		timeoutFlapperValveController=false;
   162dc:	687b      	ldr	r3, [r7, #4]
   162de:	2200      	movs	r2, #0
   162e0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   162e4:	687b      	ldr	r3, [r7, #4]
   162e6:	2200      	movs	r2, #0
   162e8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
   162ec:	687b      	ldr	r3, [r7, #4]
   162ee:	2200      	movs	r2, #0
   162f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
   162f4:	687b      	ldr	r3, [r7, #4]
   162f6:	2200      	movs	r2, #0
   162f8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
   162fc:	687b      	ldr	r3, [r7, #4]
   162fe:	2200      	movs	r2, #0
   16300:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   16304:	bf00      	nop
   16306:	3708      	adds	r7, #8
   16308:	46bd      	mov	sp, r7
   1630a:	bd80      	pop	{r7, pc}
   1630c:	00016281 	.word	0x00016281
   16310:	00015925 	.word	0x00015925
   16314:	20005480 	.word	0x20005480
   16318:	00013f85 	.word	0x00013f85
   1631c:	00015951 	.word	0x00015951

00016320 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   16320:	b580      	push	{r7, lr}
   16322:	b082      	sub	sp, #8
   16324:	af00      	add	r7, sp, #0
   16326:	6078      	str	r0, [r7, #4]
		StopMotor();
   16328:	6878      	ldr	r0, [r7, #4]
   1632a:	4b0d      	ldr	r3, [pc, #52]	; (16360 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   1632c:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   1632e:	490d      	ldr	r1, [pc, #52]	; (16364 <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
   16330:	480d      	ldr	r0, [pc, #52]	; (16368 <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
   16332:	4b0e      	ldr	r3, [pc, #56]	; (1636c <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
   16334:	4798      	blx	r3
		timeoutFlapperValveController=false;
   16336:	687b      	ldr	r3, [r7, #4]
   16338:	2200      	movs	r2, #0
   1633a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
   1633e:	687b      	ldr	r3, [r7, #4]
   16340:	2200      	movs	r2, #0
   16342:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
   16346:	687b      	ldr	r3, [r7, #4]
   16348:	2200      	movs	r2, #0
   1634a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
   1634e:	687b      	ldr	r3, [r7, #4]
   16350:	2201      	movs	r2, #1
   16352:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   16356:	bf00      	nop
   16358:	3708      	adds	r7, #8
   1635a:	46bd      	mov	sp, r7
   1635c:	bd80      	pop	{r7, pc}
   1635e:	bf00      	nop
   16360:	00016281 	.word	0x00016281
   16364:	00015925 	.word	0x00015925
   16368:	20005480 	.word	0x20005480
   1636c:	00013f85 	.word	0x00013f85

00016370 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   16370:	b580      	push	{r7, lr}
   16372:	b084      	sub	sp, #16
   16374:	af00      	add	r7, sp, #0
   16376:	6078      	str	r0, [r7, #4]
   16378:	460b      	mov	r3, r1
   1637a:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   1637c:	78fb      	ldrb	r3, [r7, #3]
   1637e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   16382:	2b00      	cmp	r3, #0
   16384:	dd0c      	ble.n	163a0 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   16386:	78fb      	ldrb	r3, [r7, #3]
   16388:	43db      	mvns	r3, r3
   1638a:	009b      	lsls	r3, r3, #2
   1638c:	2b00      	cmp	r3, #0
   1638e:	da00      	bge.n	16392 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   16390:	33ff      	adds	r3, #255	; 0xff
   16392:	121b      	asrs	r3, r3, #8
   16394:	461a      	mov	r2, r3
   16396:	4b10      	ldr	r3, [pc, #64]	; (163d8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   16398:	4610      	mov	r0, r2
   1639a:	4798      	blx	r3
   1639c:	4603      	mov	r3, r0
   1639e:	e00b      	b.n	163b8 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   163a0:	78fb      	ldrb	r3, [r7, #3]
   163a2:	3bff      	subs	r3, #255	; 0xff
   163a4:	009b      	lsls	r3, r3, #2
   163a6:	2b00      	cmp	r3, #0
   163a8:	da00      	bge.n	163ac <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   163aa:	33ff      	adds	r3, #255	; 0xff
   163ac:	121b      	asrs	r3, r3, #8
   163ae:	461a      	mov	r2, r3
   163b0:	4b09      	ldr	r3, [pc, #36]	; (163d8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   163b2:	4610      	mov	r0, r2
   163b4:	4798      	blx	r3
   163b6:	4603      	mov	r3, r0
   163b8:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   163ba:	4b08      	ldr	r3, [pc, #32]	; (163dc <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   163bc:	68f8      	ldr	r0, [r7, #12]
   163be:	4798      	blx	r3
   163c0:	4603      	mov	r3, r0
   163c2:	b2da      	uxtb	r2, r3
   163c4:	687b      	ldr	r3, [r7, #4]
   163c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
   163ca:	687b      	ldr	r3, [r7, #4]
   163cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
   163d0:	4618      	mov	r0, r3
   163d2:	3710      	adds	r7, #16
   163d4:	46bd      	mov	sp, r7
   163d6:	bd80      	pop	{r7, pc}
   163d8:	0001c029 	.word	0x0001c029
   163dc:	0001c45d 	.word	0x0001c45d

000163e0 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   163e0:	b580      	push	{r7, lr}
   163e2:	b082      	sub	sp, #8
   163e4:	af00      	add	r7, sp, #0
   163e6:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
   163e8:	687b      	ldr	r3, [r7, #4]
   163ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   163ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   163f0:	2b00      	cmp	r3, #0
   163f2:	d008      	beq.n	16406 <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
   163f4:	687b      	ldr	r3, [r7, #4]
   163f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   163f8:	2100      	movs	r1, #0
   163fa:	4618      	mov	r0, r3
   163fc:	4b09      	ldr	r3, [pc, #36]	; (16424 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   163fe:	4798      	blx	r3
		delay_ms(10);
   16400:	200a      	movs	r0, #10
   16402:	4b09      	ldr	r3, [pc, #36]	; (16428 <_ZN22FlapperValveController10StartMotorEv+0x48>)
   16404:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
   16406:	687b      	ldr	r3, [r7, #4]
   16408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1640a:	2101      	movs	r1, #1
   1640c:	4618      	mov	r0, r3
   1640e:	4b05      	ldr	r3, [pc, #20]	; (16424 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   16410:	4798      	blx	r3
	flapperValveIsMoving=true;
   16412:	687b      	ldr	r3, [r7, #4]
   16414:	2201      	movs	r2, #1
   16416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
   1641a:	2300      	movs	r3, #0
}
   1641c:	4618      	mov	r0, r3
   1641e:	3708      	adds	r7, #8
   16420:	46bd      	mov	sp, r7
   16422:	bd80      	pop	{r7, pc}
   16424:	00016c69 	.word	0x00016c69
   16428:	0000647d 	.word	0x0000647d

0001642c <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   1642c:	b580      	push	{r7, lr}
   1642e:	b082      	sub	sp, #8
   16430:	af00      	add	r7, sp, #0
   16432:	6078      	str	r0, [r7, #4]
	StopMotor();
   16434:	6878      	ldr	r0, [r7, #4]
   16436:	4b0d      	ldr	r3, [pc, #52]	; (1646c <_ZN22FlapperValveController15StopControllingEv+0x40>)
   16438:	4798      	blx	r3
	timeoutKeepControlling=false;
   1643a:	687b      	ldr	r3, [r7, #4]
   1643c:	2200      	movs	r2, #0
   1643e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	2200      	movs	r2, #0
   16446:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
   1644a:	687b      	ldr	r3, [r7, #4]
   1644c:	2200      	movs	r2, #0
   1644e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
   16452:	687b      	ldr	r3, [r7, #4]
   16454:	2200      	movs	r2, #0
   16456:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
   1645a:	687b      	ldr	r3, [r7, #4]
   1645c:	2200      	movs	r2, #0
   1645e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
   16462:	2300      	movs	r3, #0
}
   16464:	4618      	mov	r0, r3
   16466:	3708      	adds	r7, #8
   16468:	46bd      	mov	sp, r7
   1646a:	bd80      	pop	{r7, pc}
   1646c:	00016281 	.word	0x00016281

00016470 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   16470:	b580      	push	{r7, lr}
   16472:	b082      	sub	sp, #8
   16474:	af00      	add	r7, sp, #0
   16476:	6078      	str	r0, [r7, #4]
   16478:	460b      	mov	r3, r1
   1647a:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   1647c:	78fb      	ldrb	r3, [r7, #3]
   1647e:	4619      	mov	r1, r3
   16480:	6878      	ldr	r0, [r7, #4]
   16482:	4b25      	ldr	r3, [pc, #148]	; (16518 <_ZN22FlapperValveController16StartControllingEh+0xa8>)
   16484:	4798      	blx	r3
   16486:	4603      	mov	r3, r0
   16488:	461a      	mov	r2, r3
   1648a:	687b      	ldr	r3, [r7, #4]
   1648c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
   16490:	687b      	ldr	r3, [r7, #4]
   16492:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16496:	4619      	mov	r1, r3
   16498:	6878      	ldr	r0, [r7, #4]
   1649a:	4b20      	ldr	r3, [pc, #128]	; (1651c <_ZN22FlapperValveController16StartControllingEh+0xac>)
   1649c:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   1649e:	687b      	ldr	r3, [r7, #4]
   164a0:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   164a4:	4b1e      	ldr	r3, [pc, #120]	; (16520 <_ZN22FlapperValveController16StartControllingEh+0xb0>)
   164a6:	4610      	mov	r0, r2
   164a8:	4798      	blx	r3
   164aa:	4602      	mov	r2, r0
   164ac:	687b      	ldr	r3, [r7, #4]
   164ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
   164b2:	687b      	ldr	r3, [r7, #4]
   164b4:	2200      	movs	r2, #0
   164b6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   164ba:	687b      	ldr	r3, [r7, #4]
   164bc:	2200      	movs	r2, #0
   164be:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
   164c2:	687b      	ldr	r3, [r7, #4]
   164c4:	2200      	movs	r2, #0
   164c6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
   164ca:	687b      	ldr	r3, [r7, #4]
   164cc:	2201      	movs	r2, #1
   164ce:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
   164d2:	687b      	ldr	r3, [r7, #4]
   164d4:	2200      	movs	r2, #0
   164d6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT);
   164da:	f242 7210 	movw	r2, #10000	; 0x2710
   164de:	4911      	ldr	r1, [pc, #68]	; (16524 <_ZN22FlapperValveController16StartControllingEh+0xb4>)
   164e0:	4811      	ldr	r0, [pc, #68]	; (16528 <_ZN22FlapperValveController16StartControllingEh+0xb8>)
   164e2:	4b12      	ldr	r3, [pc, #72]	; (1652c <_ZN22FlapperValveController16StartControllingEh+0xbc>)
   164e4:	4798      	blx	r3
		isControlling=true;
   164e6:	687b      	ldr	r3, [r7, #4]
   164e8:	2201      	movs	r2, #1
   164ea:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   164ee:	6878      	ldr	r0, [r7, #4]
   164f0:	4b0f      	ldr	r3, [pc, #60]	; (16530 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   164f2:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   164f4:	6878      	ldr	r0, [r7, #4]
   164f6:	4b0f      	ldr	r3, [pc, #60]	; (16534 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   164f8:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   164fa:	687b      	ldr	r3, [r7, #4]
   164fc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   16500:	b2db      	uxtb	r3, r3
   16502:	2b00      	cmp	r3, #0
   16504:	d003      	beq.n	1650e <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
   16506:	687b      	ldr	r3, [r7, #4]
   16508:	2201      	movs	r2, #1
   1650a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
   1650e:	2300      	movs	r3, #0
	
}
   16510:	4618      	mov	r0, r3
   16512:	3708      	adds	r7, #8
   16514:	46bd      	mov	sp, r7
   16516:	bd80      	pop	{r7, pc}
   16518:	00016539 	.word	0x00016539
   1651c:	00016371 	.word	0x00016371
   16520:	0001c021 	.word	0x0001c021
   16524:	00015925 	.word	0x00015925
   16528:	20005480 	.word	0x20005480
   1652c:	00013ff5 	.word	0x00013ff5
   16530:	00015af9 	.word	0x00015af9
   16534:	00015da1 	.word	0x00015da1

00016538 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   16538:	b580      	push	{r7, lr}
   1653a:	b082      	sub	sp, #8
   1653c:	af00      	add	r7, sp, #0
   1653e:	6078      	str	r0, [r7, #4]
   16540:	460b      	mov	r3, r1
   16542:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   16544:	6878      	ldr	r0, [r7, #4]
   16546:	4b2a      	ldr	r3, [pc, #168]	; (165f0 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   16548:	4798      	blx	r3
   1654a:	4603      	mov	r3, r0
   1654c:	2b00      	cmp	r3, #0
   1654e:	d004      	beq.n	1655a <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   16550:	687b      	ldr	r3, [r7, #4]
   16552:	78fa      	ldrb	r2, [r7, #3]
   16554:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   16558:	e043      	b.n	165e2 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   1655a:	687b      	ldr	r3, [r7, #4]
   1655c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   16560:	2b00      	cmp	r3, #0
   16562:	d01f      	beq.n	165a4 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   16564:	687b      	ldr	r3, [r7, #4]
   16566:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   1656a:	43db      	mvns	r3, r3
   1656c:	b2da      	uxtb	r2, r3
   1656e:	687b      	ldr	r3, [r7, #4]
   16570:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
   16574:	78fb      	ldrb	r3, [r7, #3]
   16576:	687a      	ldr	r2, [r7, #4]
   16578:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   1657c:	4293      	cmp	r3, r2
   1657e:	dd0c      	ble.n	1659a <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   16580:	687b      	ldr	r3, [r7, #4]
   16582:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   16586:	687b      	ldr	r3, [r7, #4]
   16588:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
   1658c:	687b      	ldr	r3, [r7, #4]
   1658e:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   16592:	687b      	ldr	r3, [r7, #4]
   16594:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   16598:	e023      	b.n	165e2 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1659a:	687b      	ldr	r3, [r7, #4]
   1659c:	78fa      	ldrb	r2, [r7, #3]
   1659e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   165a2:	e01e      	b.n	165e2 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   165a4:	687b      	ldr	r3, [r7, #4]
   165a6:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   165aa:	43db      	mvns	r3, r3
   165ac:	b2da      	uxtb	r2, r3
   165ae:	687b      	ldr	r3, [r7, #4]
   165b0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
   165b4:	78fb      	ldrb	r3, [r7, #3]
   165b6:	687a      	ldr	r2, [r7, #4]
   165b8:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
   165bc:	4293      	cmp	r3, r2
   165be:	dd0c      	ble.n	165da <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   165c0:	687b      	ldr	r3, [r7, #4]
   165c2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   165c6:	687b      	ldr	r3, [r7, #4]
   165c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
   165cc:	687b      	ldr	r3, [r7, #4]
   165ce:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   165d2:	687b      	ldr	r3, [r7, #4]
   165d4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   165d8:	e003      	b.n	165e2 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   165da:	687b      	ldr	r3, [r7, #4]
   165dc:	78fa      	ldrb	r2, [r7, #3]
   165de:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
   165e2:	687b      	ldr	r3, [r7, #4]
   165e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
   165e8:	4618      	mov	r0, r3
   165ea:	3708      	adds	r7, #8
   165ec:	46bd      	mov	sp, r7
   165ee:	bd80      	pop	{r7, pc}
   165f0:	00016209 	.word	0x00016209

000165f4 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=fv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   165f4:	b580      	push	{r7, lr}
   165f6:	b082      	sub	sp, #8
   165f8:	af00      	add	r7, sp, #0
   165fa:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   165fc:	687b      	ldr	r3, [r7, #4]
   165fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   16602:	4619      	mov	r1, r3
   16604:	6878      	ldr	r0, [r7, #4]
   16606:	4b03      	ldr	r3, [pc, #12]	; (16614 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   16608:	4798      	blx	r3
   1660a:	4603      	mov	r3, r0
	
}
   1660c:	4618      	mov	r0, r3
   1660e:	3708      	adds	r7, #8
   16610:	46bd      	mov	sp, r7
   16612:	bd80      	pop	{r7, pc}
   16614:	00016471 	.word	0x00016471

00016618 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   16618:	b580      	push	{r7, lr}
   1661a:	b082      	sub	sp, #8
   1661c:	af00      	add	r7, sp, #0
   1661e:	6078      	str	r0, [r7, #4]
   16620:	460b      	mov	r3, r1
   16622:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   16624:	687b      	ldr	r3, [r7, #4]
   16626:	2200      	movs	r2, #0
   16628:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   1662c:	687b      	ldr	r3, [r7, #4]
   1662e:	2201      	movs	r2, #1
   16630:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   16634:	6878      	ldr	r0, [r7, #4]
   16636:	4b05      	ldr	r3, [pc, #20]	; (1664c <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   16638:	4798      	blx	r3
		keepControlling=false;
   1663a:	687b      	ldr	r3, [r7, #4]
   1663c:	2200      	movs	r2, #0
   1663e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
   16642:	2300      	movs	r3, #0
	
}
   16644:	4618      	mov	r0, r3
   16646:	3708      	adds	r7, #8
   16648:	46bd      	mov	sp, r7
   1664a:	bd80      	pop	{r7, pc}
   1664c:	00015af9 	.word	0x00015af9

00016650 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   16650:	b590      	push	{r4, r7, lr}
   16652:	b085      	sub	sp, #20
   16654:	af00      	add	r7, sp, #0
   16656:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
   16658:	68fb      	ldr	r3, [r7, #12]
   1665a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1665c:	4618      	mov	r0, r3
   1665e:	4b2f      	ldr	r3, [pc, #188]	; (1671c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
   16660:	4798      	blx	r3
   16662:	4603      	mov	r3, r0
   16664:	461a      	mov	r2, r3
   16666:	68fb      	ldr	r3, [r7, #12]
   16668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
   1666c:	68fb      	ldr	r3, [r7, #12]
   1666e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   16672:	68fb      	ldr	r3, [r7, #12]
   16674:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
   16678:	68fb      	ldr	r3, [r7, #12]
   1667a:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   1667e:	68fb      	ldr	r3, [r7, #12]
   16680:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=fv->ReadStatusInputs();
   16684:	68fb      	ldr	r3, [r7, #12]
   16686:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   16688:	68fc      	ldr	r4, [r7, #12]
   1668a:	463b      	mov	r3, r7
   1668c:	4611      	mov	r1, r2
   1668e:	4618      	mov	r0, r3
   16690:	4b23      	ldr	r3, [pc, #140]	; (16720 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
   16692:	4798      	blx	r3
   16694:	f104 0380 	add.w	r3, r4, #128	; 0x80
   16698:	463a      	mov	r2, r7
   1669a:	6810      	ldr	r0, [r2, #0]
   1669c:	6018      	str	r0, [r3, #0]
   1669e:	8892      	ldrh	r2, [r2, #4]
   166a0:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
   166a2:	68fb      	ldr	r3, [r7, #12]
   166a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   166a6:	68fc      	ldr	r4, [r7, #12]
   166a8:	463b      	mov	r3, r7
   166aa:	4611      	mov	r1, r2
   166ac:	4618      	mov	r0, r3
   166ae:	4b1d      	ldr	r3, [pc, #116]	; (16724 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
   166b0:	4798      	blx	r3
   166b2:	f104 0386 	add.w	r3, r4, #134	; 0x86
   166b6:	463a      	mov	r2, r7
   166b8:	6811      	ldr	r1, [r2, #0]
   166ba:	6852      	ldr	r2, [r2, #4]
   166bc:	6019      	str	r1, [r3, #0]
   166be:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   166c6:	b2da      	uxtb	r2, r3
   166c8:	68fb      	ldr	r3, [r7, #12]
   166ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
   166ce:	68fb      	ldr	r3, [r7, #12]
   166d0:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
   166d4:	68fb      	ldr	r3, [r7, #12]
   166d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   166da:	68fb      	ldr	r3, [r7, #12]
   166dc:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   166e0:	68fb      	ldr	r3, [r7, #12]
   166e2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	if (standAloneActivated)
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   166ec:	2b00      	cmp	r3, #0
   166ee:	d008      	beq.n	16702 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   166f0:	68fb      	ldr	r3, [r7, #12]
   166f2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   166f6:	43db      	mvns	r3, r3
   166f8:	b2da      	uxtb	r2, r3
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
   16700:	e007      	b.n	16712 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   16702:	68fb      	ldr	r3, [r7, #12]
   16704:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   16708:	43db      	mvns	r3, r3
   1670a:	b2da      	uxtb	r2, r3
   1670c:	68fb      	ldr	r3, [r7, #12]
   1670e:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
}
   16712:	bf00      	nop
   16714:	3714      	adds	r7, #20
   16716:	46bd      	mov	sp, r7
   16718:	bd90      	pop	{r4, r7, pc}
   1671a:	bf00      	nop
   1671c:	00016e89 	.word	0x00016e89
   16720:	00016c0d 	.word	0x00016c0d
   16724:	00016bb1 	.word	0x00016bb1

00016728 <_ZN22FlapperValveController18GetCurrentPositionEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
   16728:	b580      	push	{r7, lr}
   1672a:	b082      	sub	sp, #8
   1672c:	af00      	add	r7, sp, #0
   1672e:	6078      	str	r0, [r7, #4]
	return fv->ReadActualPosition();
   16730:	687b      	ldr	r3, [r7, #4]
   16732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16734:	4618      	mov	r0, r3
   16736:	4b03      	ldr	r3, [pc, #12]	; (16744 <_ZN22FlapperValveController18GetCurrentPositionEv+0x1c>)
   16738:	4798      	blx	r3
   1673a:	4603      	mov	r3, r0
}
   1673c:	4618      	mov	r0, r3
   1673e:	3708      	adds	r7, #8
   16740:	46bd      	mov	sp, r7
   16742:	bd80      	pop	{r7, pc}
   16744:	00016e89 	.word	0x00016e89

00016748 <_ZN22FlapperValveController8SelftestEv>:
bool	FlapperValveController::Selftest(void){
   16748:	b580      	push	{r7, lr}
   1674a:	b084      	sub	sp, #16
   1674c:	af00      	add	r7, sp, #0
   1674e:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   16750:	23b4      	movs	r3, #180	; 0xb4
   16752:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   16754:	687b      	ldr	r3, [r7, #4]
   16756:	4a4d      	ldr	r2, [pc, #308]	; (1688c <_ZN22FlapperValveController8SelftestEv+0x144>)
   16758:	33bf      	adds	r3, #191	; 0xbf
   1675a:	8812      	ldrh	r2, [r2, #0]
   1675c:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   1675e:	6878      	ldr	r0, [r7, #4]
   16760:	4b4b      	ldr	r3, [pc, #300]	; (16890 <_ZN22FlapperValveController8SelftestEv+0x148>)
   16762:	4798      	blx	r3
	fv->SetEnable(false);
   16764:	687b      	ldr	r3, [r7, #4]
   16766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16768:	2100      	movs	r1, #0
   1676a:	4618      	mov	r0, r3
   1676c:	4b49      	ldr	r3, [pc, #292]	; (16894 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   1676e:	4798      	blx	r3
	fv->SetInvalidPosition(false);
   16770:	687b      	ldr	r3, [r7, #4]
   16772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16774:	2100      	movs	r1, #0
   16776:	4618      	mov	r0, r3
   16778:	4b47      	ldr	r3, [pc, #284]	; (16898 <_ZN22FlapperValveController8SelftestEv+0x150>)
   1677a:	4798      	blx	r3
	fv->ClearMoveFault(false);
   1677c:	687b      	ldr	r3, [r7, #4]
   1677e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16780:	2100      	movs	r1, #0
   16782:	4618      	mov	r0, r3
   16784:	4b45      	ldr	r3, [pc, #276]	; (1689c <_ZN22FlapperValveController8SelftestEv+0x154>)
   16786:	4798      	blx	r3
	delay_ms(10);
   16788:	200a      	movs	r0, #10
   1678a:	4b45      	ldr	r3, [pc, #276]	; (168a0 <_ZN22FlapperValveController8SelftestEv+0x158>)
   1678c:	4798      	blx	r3
	fv->ClearMoveFault(true);
   1678e:	687b      	ldr	r3, [r7, #4]
   16790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16792:	2101      	movs	r1, #1
   16794:	4618      	mov	r0, r3
   16796:	4b41      	ldr	r3, [pc, #260]	; (1689c <_ZN22FlapperValveController8SelftestEv+0x154>)
   16798:	4798      	blx	r3
	fv->WriteSetpoint(localSetpoint);
   1679a:	687b      	ldr	r3, [r7, #4]
   1679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1679e:	7bba      	ldrb	r2, [r7, #14]
   167a0:	4611      	mov	r1, r2
   167a2:	4618      	mov	r0, r3
   167a4:	4b3f      	ldr	r3, [pc, #252]	; (168a4 <_ZN22FlapperValveController8SelftestEv+0x15c>)
   167a6:	4798      	blx	r3
	fv->SetDirection(false);
   167a8:	687b      	ldr	r3, [r7, #4]
   167aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   167ac:	2100      	movs	r1, #0
   167ae:	4618      	mov	r0, r3
   167b0:	4b3d      	ldr	r3, [pc, #244]	; (168a8 <_ZN22FlapperValveController8SelftestEv+0x160>)
   167b2:	4798      	blx	r3
	if (fv->ReadActualPosition()>localSetpoint)
   167b4:	687b      	ldr	r3, [r7, #4]
   167b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   167b8:	4618      	mov	r0, r3
   167ba:	4b3c      	ldr	r3, [pc, #240]	; (168ac <_ZN22FlapperValveController8SelftestEv+0x164>)
   167bc:	4798      	blx	r3
   167be:	4603      	mov	r3, r0
   167c0:	461a      	mov	r2, r3
   167c2:	7bbb      	ldrb	r3, [r7, #14]
   167c4:	429a      	cmp	r2, r3
   167c6:	bfcc      	ite	gt
   167c8:	2301      	movgt	r3, #1
   167ca:	2300      	movle	r3, #0
   167cc:	b2db      	uxtb	r3, r3
   167ce:	2b00      	cmp	r3, #0
   167d0:	d006      	beq.n	167e0 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		fv->SetDirection(true);
   167d2:	687b      	ldr	r3, [r7, #4]
   167d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   167d6:	2101      	movs	r1, #1
   167d8:	4618      	mov	r0, r3
   167da:	4b33      	ldr	r3, [pc, #204]	; (168a8 <_ZN22FlapperValveController8SelftestEv+0x160>)
   167dc:	4798      	blx	r3
   167de:	e005      	b.n	167ec <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		fv->SetDirection(false);
   167e0:	687b      	ldr	r3, [r7, #4]
   167e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   167e4:	2100      	movs	r1, #0
   167e6:	4618      	mov	r0, r3
   167e8:	4b2f      	ldr	r3, [pc, #188]	; (168a8 <_ZN22FlapperValveController8SelftestEv+0x160>)
   167ea:	4798      	blx	r3
	}
	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),1000);
   167ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   167f0:	492f      	ldr	r1, [pc, #188]	; (168b0 <_ZN22FlapperValveController8SelftestEv+0x168>)
   167f2:	4830      	ldr	r0, [pc, #192]	; (168b4 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   167f4:	4b30      	ldr	r3, [pc, #192]	; (168b8 <_ZN22FlapperValveController8SelftestEv+0x170>)
   167f6:	4798      	blx	r3
	fv->SetEnable(true);
   167f8:	687b      	ldr	r3, [r7, #4]
   167fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   167fc:	2101      	movs	r1, #1
   167fe:	4618      	mov	r0, r3
   16800:	4b24      	ldr	r3, [pc, #144]	; (16894 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   16802:	4798      	blx	r3

	localPosition=fv->ReadActualPosition();
   16804:	687b      	ldr	r3, [r7, #4]
   16806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16808:	4618      	mov	r0, r3
   1680a:	4b28      	ldr	r3, [pc, #160]	; (168ac <_ZN22FlapperValveController8SelftestEv+0x164>)
   1680c:	4798      	blx	r3
   1680e:	4603      	mov	r3, r0
   16810:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   16812:	687b      	ldr	r3, [r7, #4]
   16814:	2200      	movs	r2, #0
   16816:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   1681a:	7bfa      	ldrb	r2, [r7, #15]
   1681c:	7bbb      	ldrb	r3, [r7, #14]
   1681e:	1ad3      	subs	r3, r2, r3
   16820:	2b00      	cmp	r3, #0
   16822:	bfb8      	it	lt
   16824:	425b      	neglt	r3, r3
   16826:	2b0c      	cmp	r3, #12
   16828:	bfcc      	ite	gt
   1682a:	2301      	movgt	r3, #1
   1682c:	2300      	movle	r3, #0
   1682e:	b2db      	uxtb	r3, r3
   16830:	461a      	mov	r2, r3
   16832:	687b      	ldr	r3, [r7, #4]
   16834:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   16838:	b2db      	uxtb	r3, r3
   1683a:	f083 0301 	eor.w	r3, r3, #1
   1683e:	b2db      	uxtb	r3, r3
   16840:	4013      	ands	r3, r2
   16842:	2b00      	cmp	r3, #0
   16844:	bf14      	ite	ne
   16846:	2301      	movne	r3, #1
   16848:	2300      	moveq	r3, #0
   1684a:	b2db      	uxtb	r3, r3
   1684c:	2b00      	cmp	r3, #0
   1684e:	d007      	beq.n	16860 <_ZN22FlapperValveController8SelftestEv+0x118>

	{

		localPosition=fv->ReadActualPosition();
   16850:	687b      	ldr	r3, [r7, #4]
   16852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   16854:	4618      	mov	r0, r3
   16856:	4b15      	ldr	r3, [pc, #84]	; (168ac <_ZN22FlapperValveController8SelftestEv+0x164>)
   16858:	4798      	blx	r3
   1685a:	4603      	mov	r3, r0
   1685c:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   1685e:	e7dc      	b.n	1681a <_ZN22FlapperValveController8SelftestEv+0xd2>

	}
	hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
   16860:	4913      	ldr	r1, [pc, #76]	; (168b0 <_ZN22FlapperValveController8SelftestEv+0x168>)
   16862:	4814      	ldr	r0, [pc, #80]	; (168b4 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   16864:	4b15      	ldr	r3, [pc, #84]	; (168bc <_ZN22FlapperValveController8SelftestEv+0x174>)
   16866:	4798      	blx	r3
	fv->SetEnable(false);
   16868:	687b      	ldr	r3, [r7, #4]
   1686a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1686c:	2100      	movs	r1, #0
   1686e:	4618      	mov	r0, r3
   16870:	4b08      	ldr	r3, [pc, #32]	; (16894 <_ZN22FlapperValveController8SelftestEv+0x14c>)
   16872:	4798      	blx	r3
	return !timeoutFlapperValveController;
   16874:	687b      	ldr	r3, [r7, #4]
   16876:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1687a:	b2db      	uxtb	r3, r3
   1687c:	f083 0301 	eor.w	r3, r3, #1
   16880:	b2db      	uxtb	r3, r3
}
   16882:	4618      	mov	r0, r3
   16884:	3710      	adds	r7, #16
   16886:	46bd      	mov	sp, r7
   16888:	bd80      	pop	{r7, pc}
   1688a:	bf00      	nop
   1688c:	0001dcf8 	.word	0x0001dcf8
   16890:	00016651 	.word	0x00016651
   16894:	00016c69 	.word	0x00016c69
   16898:	00016dd9 	.word	0x00016dd9
   1689c:	00016d61 	.word	0x00016d61
   168a0:	0000647d 	.word	0x0000647d
   168a4:	00016e51 	.word	0x00016e51
   168a8:	00016ce9 	.word	0x00016ce9
   168ac:	00016e89 	.word	0x00016e89
   168b0:	00015925 	.word	0x00015925
   168b4:	20005480 	.word	0x20005480
   168b8:	00013ff5 	.word	0x00013ff5
   168bc:	00013f85 	.word	0x00013f85

000168c0 <_Z41__static_initialization_and_destruction_0ii>:

   168c0:	b580      	push	{r7, lr}
   168c2:	b082      	sub	sp, #8
   168c4:	af00      	add	r7, sp, #0
   168c6:	6078      	str	r0, [r7, #4]
   168c8:	6039      	str	r1, [r7, #0]
   168ca:	687b      	ldr	r3, [r7, #4]
   168cc:	2b01      	cmp	r3, #1
   168ce:	d154      	bne.n	1697a <_Z41__static_initialization_and_destruction_0ii+0xba>
   168d0:	683b      	ldr	r3, [r7, #0]
   168d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   168d6:	4293      	cmp	r3, r2
   168d8:	d14f      	bne.n	1697a <_Z41__static_initialization_and_destruction_0ii+0xba>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   168da:	492a      	ldr	r1, [pc, #168]	; (16984 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   168dc:	482a      	ldr	r0, [pc, #168]	; (16988 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   168de:	4b2b      	ldr	r3, [pc, #172]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   168e0:	4798      	blx	r3
   168e2:	4a2b      	ldr	r2, [pc, #172]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   168e4:	492b      	ldr	r1, [pc, #172]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   168e6:	4828      	ldr	r0, [pc, #160]	; (16988 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   168e8:	4b2b      	ldr	r3, [pc, #172]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   168ea:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   168ec:	492b      	ldr	r1, [pc, #172]	; (1699c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   168ee:	482c      	ldr	r0, [pc, #176]	; (169a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   168f0:	4b26      	ldr	r3, [pc, #152]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   168f2:	4798      	blx	r3
   168f4:	4a26      	ldr	r2, [pc, #152]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   168f6:	4927      	ldr	r1, [pc, #156]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   168f8:	4829      	ldr	r0, [pc, #164]	; (169a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   168fa:	4b27      	ldr	r3, [pc, #156]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   168fc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   168fe:	4929      	ldr	r1, [pc, #164]	; (169a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16900:	4829      	ldr	r0, [pc, #164]	; (169a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16902:	4b22      	ldr	r3, [pc, #136]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   16904:	4798      	blx	r3
   16906:	4a22      	ldr	r2, [pc, #136]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   16908:	4922      	ldr	r1, [pc, #136]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1690a:	4827      	ldr	r0, [pc, #156]	; (169a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1690c:	4b22      	ldr	r3, [pc, #136]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1690e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   16910:	4926      	ldr	r1, [pc, #152]	; (169ac <_Z41__static_initialization_and_destruction_0ii+0xec>)
   16912:	4827      	ldr	r0, [pc, #156]	; (169b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   16914:	4b1d      	ldr	r3, [pc, #116]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   16916:	4798      	blx	r3
   16918:	4a1d      	ldr	r2, [pc, #116]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1691a:	491e      	ldr	r1, [pc, #120]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1691c:	4824      	ldr	r0, [pc, #144]	; (169b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1691e:	4b1e      	ldr	r3, [pc, #120]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16920:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   16922:	4924      	ldr	r1, [pc, #144]	; (169b4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   16924:	4824      	ldr	r0, [pc, #144]	; (169b8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   16926:	4b19      	ldr	r3, [pc, #100]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   16928:	4798      	blx	r3
   1692a:	4a19      	ldr	r2, [pc, #100]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1692c:	4919      	ldr	r1, [pc, #100]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1692e:	4822      	ldr	r0, [pc, #136]	; (169b8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   16930:	4b19      	ldr	r3, [pc, #100]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16932:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   16934:	4921      	ldr	r1, [pc, #132]	; (169bc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   16936:	4822      	ldr	r0, [pc, #136]	; (169c0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   16938:	4b14      	ldr	r3, [pc, #80]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1693a:	4798      	blx	r3
   1693c:	4a14      	ldr	r2, [pc, #80]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1693e:	4915      	ldr	r1, [pc, #84]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   16940:	481f      	ldr	r0, [pc, #124]	; (169c0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   16942:	4b15      	ldr	r3, [pc, #84]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16944:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   16946:	491f      	ldr	r1, [pc, #124]	; (169c4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   16948:	481f      	ldr	r0, [pc, #124]	; (169c8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1694a:	4b10      	ldr	r3, [pc, #64]	; (1698c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1694c:	4798      	blx	r3
   1694e:	4a10      	ldr	r2, [pc, #64]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   16950:	4910      	ldr	r1, [pc, #64]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   16952:	481d      	ldr	r0, [pc, #116]	; (169c8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   16954:	4b10      	ldr	r3, [pc, #64]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16956:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic(0);
   16958:	2100      	movs	r1, #0
   1695a:	481c      	ldr	r0, [pc, #112]	; (169cc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1695c:	4b1c      	ldr	r3, [pc, #112]	; (169d0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1695e:	4798      	blx	r3
   16960:	4a0b      	ldr	r2, [pc, #44]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   16962:	491c      	ldr	r1, [pc, #112]	; (169d4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   16964:	4819      	ldr	r0, [pc, #100]	; (169cc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   16966:	4b0c      	ldr	r3, [pc, #48]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16968:	4798      	blx	r3
   1696a:	481b      	ldr	r0, [pc, #108]	; (169d8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1696c:	4b1b      	ldr	r3, [pc, #108]	; (169dc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   1696e:	4798      	blx	r3
   16970:	4a07      	ldr	r2, [pc, #28]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   16972:	491b      	ldr	r1, [pc, #108]	; (169e0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   16974:	4818      	ldr	r0, [pc, #96]	; (169d8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   16976:	4b08      	ldr	r3, [pc, #32]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16978:	4798      	blx	r3
   1697a:	bf00      	nop
   1697c:	3708      	adds	r7, #8
   1697e:	46bd      	mov	sp, r7
   16980:	bd80      	pop	{r7, pc}
   16982:	bf00      	nop
   16984:	2000d6d8 	.word	0x2000d6d8
   16988:	20005440 	.word	0x20005440
   1698c:	00013d09 	.word	0x00013d09
   16990:	20000000 	.word	0x20000000
   16994:	00013d41 	.word	0x00013d41
   16998:	0001a44d 	.word	0x0001a44d
   1699c:	2000d76c 	.word	0x2000d76c
   169a0:	20005460 	.word	0x20005460
   169a4:	2000d870 	.word	0x2000d870
   169a8:	20005480 	.word	0x20005480
   169ac:	2000d78c 	.word	0x2000d78c
   169b0:	200054a0 	.word	0x200054a0
   169b4:	2000d830 	.word	0x2000d830
   169b8:	200054c0 	.word	0x200054c0
   169bc:	2000d850 	.word	0x2000d850
   169c0:	200054e0 	.word	0x200054e0
   169c4:	2000d748 	.word	0x2000d748
   169c8:	20005500 	.word	0x20005500
   169cc:	20005524 	.word	0x20005524
   169d0:	000169f9 	.word	0x000169f9
   169d4:	00016a95 	.word	0x00016a95
   169d8:	20005598 	.word	0x20005598
   169dc:	00015991 	.word	0x00015991
   169e0:	00015a25 	.word	0x00015a25

000169e4 <_GLOBAL__sub_I_ptrFlapperValveController>:
   169e4:	b580      	push	{r7, lr}
   169e6:	af00      	add	r7, sp, #0
   169e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   169ec:	2001      	movs	r0, #1
   169ee:	4b01      	ldr	r3, [pc, #4]	; (169f4 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   169f0:	4798      	blx	r3
   169f2:	bd80      	pop	{r7, pc}
   169f4:	000168c1 	.word	0x000168c1

000169f8 <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
   169f8:	b580      	push	{r7, lr}
   169fa:	b082      	sub	sp, #8
   169fc:	af00      	add	r7, sp, #0
   169fe:	6078      	str	r0, [r7, #4]
   16a00:	460b      	mov	r3, r1
   16a02:	70fb      	strb	r3, [r7, #3]
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	4618      	mov	r0, r3
   16a08:	4b0c      	ldr	r3, [pc, #48]	; (16a3c <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
   16a0a:	4798      	blx	r3
{	
	valveID=_iD;
   16a0c:	687b      	ldr	r3, [r7, #4]
   16a0e:	78fa      	ldrb	r2, [r7, #3]
   16a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   16a14:	687b      	ldr	r3, [r7, #4]
   16a16:	4a0a      	ldr	r2, [pc, #40]	; (16a40 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
   16a18:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   16a1a:	687b      	ldr	r3, [r7, #4]
   16a1c:	2200      	movs	r2, #0
   16a1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   16a22:	4a08      	ldr	r2, [pc, #32]	; (16a44 <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
   16a24:	687b      	ldr	r3, [r7, #4]
   16a26:	6013      	str	r3, [r2, #0]
	isOK=false;
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	2200      	movs	r2, #0
   16a2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	4618      	mov	r0, r3
   16a34:	3708      	adds	r7, #8
   16a36:	46bd      	mov	sp, r7
   16a38:	bd80      	pop	{r7, pc}
   16a3a:	bf00      	nop
   16a3c:	00018a41 	.word	0x00018a41
   16a40:	20005740 	.word	0x20005740
   16a44:	2000573c 	.word	0x2000573c

00016a48 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   16a48:	b580      	push	{r7, lr}
   16a4a:	b082      	sub	sp, #8
   16a4c:	af00      	add	r7, sp, #0
   16a4e:	6078      	str	r0, [r7, #4]
   16a50:	687b      	ldr	r3, [r7, #4]
   16a52:	4618      	mov	r0, r3
   16a54:	4b0c      	ldr	r3, [pc, #48]	; (16a88 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   16a56:	4798      	blx	r3
{
	valveID=0;
   16a58:	687b      	ldr	r3, [r7, #4]
   16a5a:	2200      	movs	r2, #0
   16a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   16a60:	687b      	ldr	r3, [r7, #4]
   16a62:	4a0a      	ldr	r2, [pc, #40]	; (16a8c <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   16a64:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   16a66:	687b      	ldr	r3, [r7, #4]
   16a68:	2200      	movs	r2, #0
   16a6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   16a6e:	4a08      	ldr	r2, [pc, #32]	; (16a90 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   16a70:	687b      	ldr	r3, [r7, #4]
   16a72:	6013      	str	r3, [r2, #0]
	isOK=false;
   16a74:	687b      	ldr	r3, [r7, #4]
   16a76:	2200      	movs	r2, #0
   16a78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   16a7c:	687b      	ldr	r3, [r7, #4]
   16a7e:	4618      	mov	r0, r3
   16a80:	3708      	adds	r7, #8
   16a82:	46bd      	mov	sp, r7
   16a84:	bd80      	pop	{r7, pc}
   16a86:	bf00      	nop
   16a88:	00018a41 	.word	0x00018a41
   16a8c:	20005740 	.word	0x20005740
   16a90:	2000573c 	.word	0x2000573c

00016a94 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   16a94:	b580      	push	{r7, lr}
   16a96:	b082      	sub	sp, #8
   16a98:	af00      	add	r7, sp, #0
   16a9a:	6078      	str	r0, [r7, #4]
   16a9c:	687b      	ldr	r3, [r7, #4]
   16a9e:	4618      	mov	r0, r3
   16aa0:	4b03      	ldr	r3, [pc, #12]	; (16ab0 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   16aa2:	4798      	blx	r3
{
} //~FlapperValve_Class
   16aa4:	687b      	ldr	r3, [r7, #4]
   16aa6:	4618      	mov	r0, r3
   16aa8:	3708      	adds	r7, #8
   16aaa:	46bd      	mov	sp, r7
   16aac:	bd80      	pop	{r7, pc}
   16aae:	bf00      	nop
   16ab0:	00018a55 	.word	0x00018a55

00016ab4 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   16ab4:	b580      	push	{r7, lr}
   16ab6:	b082      	sub	sp, #8
   16ab8:	af00      	add	r7, sp, #0
   16aba:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
   16abc:	687b      	ldr	r3, [r7, #4]
   16abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16ac0:	4618      	mov	r0, r3
   16ac2:	4b19      	ldr	r3, [pc, #100]	; (16b28 <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
   16ac4:	4798      	blx	r3

		if (i2c->isOK)
   16ac6:	687b      	ldr	r3, [r7, #4]
   16ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16aca:	7a5b      	ldrb	r3, [r3, #9]
   16acc:	b2db      	uxtb	r3, r3
   16ace:	2b00      	cmp	r3, #0
   16ad0:	d01b      	beq.n	16b0a <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   16ad2:	687b      	ldr	r3, [r7, #4]
   16ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   16ad8:	4619      	mov	r1, r3
   16ada:	6878      	ldr	r0, [r7, #4]
   16adc:	4b13      	ldr	r3, [pc, #76]	; (16b2c <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
   16ade:	4798      	blx	r3
			expanders[0]->SetPortInput();
   16ae0:	687b      	ldr	r3, [r7, #4]
   16ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   16ae4:	4618      	mov	r0, r3
   16ae6:	4b12      	ldr	r3, [pc, #72]	; (16b30 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   16ae8:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
   16aea:	687b      	ldr	r3, [r7, #4]
   16aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16aee:	2180      	movs	r1, #128	; 0x80
   16af0:	4618      	mov	r0, r3
   16af2:	4b10      	ldr	r3, [pc, #64]	; (16b34 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   16af4:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   16af6:	687b      	ldr	r3, [r7, #4]
   16af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   16afa:	4618      	mov	r0, r3
   16afc:	4b0e      	ldr	r3, [pc, #56]	; (16b38 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   16afe:	4798      	blx	r3
			expanders[3]->SetPortInput();
   16b00:	687b      	ldr	r3, [r7, #4]
   16b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16b04:	4618      	mov	r0, r3
   16b06:	4b0a      	ldr	r3, [pc, #40]	; (16b30 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   16b08:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   16b0a:	687b      	ldr	r3, [r7, #4]
   16b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16b0e:	7a5b      	ldrb	r3, [r3, #9]
   16b10:	b2da      	uxtb	r2, r3
   16b12:	687b      	ldr	r3, [r7, #4]
   16b14:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
   16b18:	687b      	ldr	r3, [r7, #4]
   16b1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16b1e:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
   16b20:	4618      	mov	r0, r3
   16b22:	3708      	adds	r7, #8
   16b24:	46bd      	mov	sp, r7
   16b26:	bd80      	pop	{r7, pc}
   16b28:	00018955 	.word	0x00018955
   16b2c:	00016b3d 	.word	0x00016b3d
   16b30:	00018e05 	.word	0x00018e05
   16b34:	00018e49 	.word	0x00018e49
   16b38:	00018ebd 	.word	0x00018ebd

00016b3c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   16b3c:	b580      	push	{r7, lr}
   16b3e:	b084      	sub	sp, #16
   16b40:	af00      	add	r7, sp, #0
   16b42:	6078      	str	r0, [r7, #4]
   16b44:	460b      	mov	r3, r1
   16b46:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   16b48:	2300      	movs	r3, #0
   16b4a:	60fb      	str	r3, [r7, #12]
   16b4c:	68fb      	ldr	r3, [r7, #12]
   16b4e:	2b03      	cmp	r3, #3
   16b50:	dc24      	bgt.n	16b9c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
   16b52:	68fa      	ldr	r2, [r7, #12]
   16b54:	4613      	mov	r3, r2
   16b56:	00db      	lsls	r3, r3, #3
   16b58:	1a9b      	subs	r3, r3, r2
   16b5a:	009b      	lsls	r3, r3, #2
   16b5c:	4a12      	ldr	r2, [pc, #72]	; (16ba8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
   16b5e:	441a      	add	r2, r3
   16b60:	687b      	ldr	r3, [r7, #4]
   16b62:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   16b64:	687b      	ldr	r3, [r7, #4]
   16b66:	6e58      	ldr	r0, [r3, #100]	; 0x64
   16b68:	68fb      	ldr	r3, [r7, #12]
   16b6a:	b2da      	uxtb	r2, r3
   16b6c:	78fb      	ldrb	r3, [r7, #3]
   16b6e:	009b      	lsls	r3, r3, #2
   16b70:	b2db      	uxtb	r3, r3
   16b72:	4413      	add	r3, r2
   16b74:	b2db      	uxtb	r3, r3
   16b76:	3320      	adds	r3, #32
   16b78:	b2d9      	uxtb	r1, r3
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16b7e:	461a      	mov	r2, r3
   16b80:	4b0a      	ldr	r3, [pc, #40]	; (16bac <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
   16b82:	4798      	blx	r3
		expanders[i]=currentExpander;
   16b84:	687b      	ldr	r3, [r7, #4]
   16b86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   16b88:	6879      	ldr	r1, [r7, #4]
   16b8a:	68fb      	ldr	r3, [r7, #12]
   16b8c:	3314      	adds	r3, #20
   16b8e:	009b      	lsls	r3, r3, #2
   16b90:	440b      	add	r3, r1
   16b92:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   16b94:	68fb      	ldr	r3, [r7, #12]
   16b96:	3301      	adds	r3, #1
   16b98:	60fb      	str	r3, [r7, #12]
   16b9a:	e7d7      	b.n	16b4c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   16b9c:	2300      	movs	r3, #0
}
   16b9e:	4618      	mov	r0, r3
   16ba0:	3710      	adds	r7, #16
   16ba2:	46bd      	mov	sp, r7
   16ba4:	bd80      	pop	{r7, pc}
   16ba6:	bf00      	nop
   16ba8:	20005754 	.word	0x20005754
   16bac:	00018c5f 	.word	0x00018c5f

00016bb0 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   16bb0:	b590      	push	{r4, r7, lr}
   16bb2:	b085      	sub	sp, #20
   16bb4:	af00      	add	r7, sp, #0
   16bb6:	60f8      	str	r0, [r7, #12]
   16bb8:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   16bba:	68bb      	ldr	r3, [r7, #8]
   16bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16bbe:	4618      	mov	r0, r3
   16bc0:	4b10      	ldr	r3, [pc, #64]	; (16c04 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   16bc2:	4798      	blx	r3
   16bc4:	4603      	mov	r3, r0
   16bc6:	461a      	mov	r2, r3
   16bc8:	68bb      	ldr	r3, [r7, #8]
   16bca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
   16bce:	68b9      	ldr	r1, [r7, #8]
   16bd0:	68bb      	ldr	r3, [r7, #8]
   16bd2:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   16bd6:	68bc      	ldr	r4, [r7, #8]
   16bd8:	463b      	mov	r3, r7
   16bda:	4618      	mov	r0, r3
   16bdc:	4b0a      	ldr	r3, [pc, #40]	; (16c08 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
   16bde:	4798      	blx	r3
   16be0:	f104 033a 	add.w	r3, r4, #58	; 0x3a
   16be4:	463a      	mov	r2, r7
   16be6:	6811      	ldr	r1, [r2, #0]
   16be8:	6852      	ldr	r2, [r2, #4]
   16bea:	6019      	str	r1, [r3, #0]
   16bec:	605a      	str	r2, [r3, #4]
	return controlOutputs;
   16bee:	68fa      	ldr	r2, [r7, #12]
   16bf0:	68bb      	ldr	r3, [r7, #8]
   16bf2:	333a      	adds	r3, #58	; 0x3a
   16bf4:	6819      	ldr	r1, [r3, #0]
   16bf6:	685b      	ldr	r3, [r3, #4]
   16bf8:	6011      	str	r1, [r2, #0]
   16bfa:	6053      	str	r3, [r2, #4]
}
   16bfc:	68f8      	ldr	r0, [r7, #12]
   16bfe:	3714      	adds	r7, #20
   16c00:	46bd      	mov	sp, r7
   16c02:	bd90      	pop	{r4, r7, pc}
   16c04:	00018d45 	.word	0x00018d45
   16c08:	00018b51 	.word	0x00018b51

00016c0c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   16c0c:	b590      	push	{r4, r7, lr}
   16c0e:	b085      	sub	sp, #20
   16c10:	af00      	add	r7, sp, #0
   16c12:	60f8      	str	r0, [r7, #12]
   16c14:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   16c16:	68bb      	ldr	r3, [r7, #8]
   16c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   16c1a:	4618      	mov	r0, r3
   16c1c:	4b10      	ldr	r3, [pc, #64]	; (16c60 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   16c1e:	4798      	blx	r3
   16c20:	4603      	mov	r3, r0
   16c22:	461a      	mov	r2, r3
   16c24:	68bb      	ldr	r3, [r7, #8]
   16c26:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
   16c2a:	68b9      	ldr	r1, [r7, #8]
   16c2c:	68bb      	ldr	r3, [r7, #8]
   16c2e:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   16c32:	68bc      	ldr	r4, [r7, #8]
   16c34:	463b      	mov	r3, r7
   16c36:	4618      	mov	r0, r3
   16c38:	4b0a      	ldr	r3, [pc, #40]	; (16c64 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   16c3a:	4798      	blx	r3
   16c3c:	f104 0342 	add.w	r3, r4, #66	; 0x42
   16c40:	463a      	mov	r2, r7
   16c42:	6811      	ldr	r1, [r2, #0]
   16c44:	6019      	str	r1, [r3, #0]
   16c46:	8892      	ldrh	r2, [r2, #4]
   16c48:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   16c4a:	68fa      	ldr	r2, [r7, #12]
   16c4c:	68bb      	ldr	r3, [r7, #8]
   16c4e:	3342      	adds	r3, #66	; 0x42
   16c50:	6819      	ldr	r1, [r3, #0]
   16c52:	6011      	str	r1, [r2, #0]
   16c54:	889b      	ldrh	r3, [r3, #4]
   16c56:	8093      	strh	r3, [r2, #4]
}
   16c58:	68f8      	ldr	r0, [r7, #12]
   16c5a:	3714      	adds	r7, #20
   16c5c:	46bd      	mov	sp, r7
   16c5e:	bd90      	pop	{r4, r7, pc}
   16c60:	00018d45 	.word	0x00018d45
   16c64:	00018afd 	.word	0x00018afd

00016c68 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   16c68:	b580      	push	{r7, lr}
   16c6a:	b082      	sub	sp, #8
   16c6c:	af00      	add	r7, sp, #0
   16c6e:	6078      	str	r0, [r7, #4]
   16c70:	460b      	mov	r3, r1
   16c72:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   16c74:	687b      	ldr	r3, [r7, #4]
   16c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16c78:	4618      	mov	r0, r3
   16c7a:	4b19      	ldr	r3, [pc, #100]	; (16ce0 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   16c7c:	4798      	blx	r3
   16c7e:	4603      	mov	r3, r0
   16c80:	461a      	mov	r2, r3
   16c82:	687b      	ldr	r3, [r7, #4]
   16c84:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
   16c88:	78fb      	ldrb	r3, [r7, #3]
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d006      	beq.n	16c9c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   16c8e:	687b      	ldr	r3, [r7, #4]
   16c90:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16c94:	f023 0301 	bic.w	r3, r3, #1
   16c98:	b2db      	uxtb	r3, r3
   16c9a:	e005      	b.n	16ca8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   16c9c:	687b      	ldr	r3, [r7, #4]
   16c9e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16ca2:	f043 0301 	orr.w	r3, r3, #1
   16ca6:	b2db      	uxtb	r3, r3
   16ca8:	687a      	ldr	r2, [r7, #4]
   16caa:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	78fa      	ldrb	r2, [r7, #3]
   16cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
   16cb6:	687b      	ldr	r3, [r7, #4]
   16cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   16cba:	687b      	ldr	r3, [r7, #4]
   16cbc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16cc0:	4619      	mov	r1, r3
   16cc2:	4610      	mov	r0, r2
   16cc4:	4b07      	ldr	r3, [pc, #28]	; (16ce4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   16cc6:	4798      	blx	r3
   16cc8:	4603      	mov	r3, r0
   16cca:	461a      	mov	r2, r3
   16ccc:	687b      	ldr	r3, [r7, #4]
   16cce:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   16cd2:	687b      	ldr	r3, [r7, #4]
   16cd4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   16cd8:	4618      	mov	r0, r3
   16cda:	3708      	adds	r7, #8
   16cdc:	46bd      	mov	sp, r7
   16cde:	bd80      	pop	{r7, pc}
   16ce0:	00018d45 	.word	0x00018d45
   16ce4:	00018dc9 	.word	0x00018dc9

00016ce8 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   16ce8:	b580      	push	{r7, lr}
   16cea:	b082      	sub	sp, #8
   16cec:	af00      	add	r7, sp, #0
   16cee:	6078      	str	r0, [r7, #4]
   16cf0:	460b      	mov	r3, r1
   16cf2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   16cf4:	687b      	ldr	r3, [r7, #4]
   16cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16cf8:	4618      	mov	r0, r3
   16cfa:	4b17      	ldr	r3, [pc, #92]	; (16d58 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   16cfc:	4798      	blx	r3
   16cfe:	4603      	mov	r3, r0
   16d00:	461a      	mov	r2, r3
   16d02:	687b      	ldr	r3, [r7, #4]
   16d04:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
   16d08:	78fb      	ldrb	r3, [r7, #3]
   16d0a:	2b00      	cmp	r3, #0
   16d0c:	d006      	beq.n	16d1c <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   16d0e:	687b      	ldr	r3, [r7, #4]
   16d10:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16d14:	f043 0320 	orr.w	r3, r3, #32
   16d18:	b2db      	uxtb	r3, r3
   16d1a:	e005      	b.n	16d28 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16d22:	f023 0320 	bic.w	r3, r3, #32
   16d26:	b2db      	uxtb	r3, r3
   16d28:	687a      	ldr	r2, [r7, #4]
   16d2a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   16d2e:	687b      	ldr	r3, [r7, #4]
   16d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   16d32:	687b      	ldr	r3, [r7, #4]
   16d34:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16d38:	4619      	mov	r1, r3
   16d3a:	4610      	mov	r0, r2
   16d3c:	4b07      	ldr	r3, [pc, #28]	; (16d5c <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   16d3e:	4798      	blx	r3
   16d40:	4603      	mov	r3, r0
   16d42:	461a      	mov	r2, r3
   16d44:	687b      	ldr	r3, [r7, #4]
   16d46:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   16d4a:	687b      	ldr	r3, [r7, #4]
   16d4c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   16d50:	4618      	mov	r0, r3
   16d52:	3708      	adds	r7, #8
   16d54:	46bd      	mov	sp, r7
   16d56:	bd80      	pop	{r7, pc}
   16d58:	00018d45 	.word	0x00018d45
   16d5c:	00018dc9 	.word	0x00018dc9

00016d60 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   16d60:	b580      	push	{r7, lr}
   16d62:	b082      	sub	sp, #8
   16d64:	af00      	add	r7, sp, #0
   16d66:	6078      	str	r0, [r7, #4]
   16d68:	460b      	mov	r3, r1
   16d6a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   16d6c:	687b      	ldr	r3, [r7, #4]
   16d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16d70:	4618      	mov	r0, r3
   16d72:	4b17      	ldr	r3, [pc, #92]	; (16dd0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   16d74:	4798      	blx	r3
   16d76:	4603      	mov	r3, r0
   16d78:	461a      	mov	r2, r3
   16d7a:	687b      	ldr	r3, [r7, #4]
   16d7c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   16d80:	78fb      	ldrb	r3, [r7, #3]
   16d82:	2b00      	cmp	r3, #0
   16d84:	d006      	beq.n	16d94 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   16d86:	687b      	ldr	r3, [r7, #4]
   16d88:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16d90:	b2db      	uxtb	r3, r3
   16d92:	e005      	b.n	16da0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   16d94:	687b      	ldr	r3, [r7, #4]
   16d96:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16d9e:	b2db      	uxtb	r3, r3
   16da0:	687a      	ldr	r2, [r7, #4]
   16da2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   16da6:	687b      	ldr	r3, [r7, #4]
   16da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   16daa:	687b      	ldr	r3, [r7, #4]
   16dac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16db0:	4619      	mov	r1, r3
   16db2:	4610      	mov	r0, r2
   16db4:	4b07      	ldr	r3, [pc, #28]	; (16dd4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   16db6:	4798      	blx	r3
   16db8:	4603      	mov	r3, r0
   16dba:	461a      	mov	r2, r3
   16dbc:	687b      	ldr	r3, [r7, #4]
   16dbe:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   16dc2:	687b      	ldr	r3, [r7, #4]
   16dc4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   16dc8:	4618      	mov	r0, r3
   16dca:	3708      	adds	r7, #8
   16dcc:	46bd      	mov	sp, r7
   16dce:	bd80      	pop	{r7, pc}
   16dd0:	00018d45 	.word	0x00018d45
   16dd4:	00018dc9 	.word	0x00018dc9

00016dd8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   16dd8:	b580      	push	{r7, lr}
   16dda:	b082      	sub	sp, #8
   16ddc:	af00      	add	r7, sp, #0
   16dde:	6078      	str	r0, [r7, #4]
   16de0:	460b      	mov	r3, r1
   16de2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   16de4:	687b      	ldr	r3, [r7, #4]
   16de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16de8:	4618      	mov	r0, r3
   16dea:	4b17      	ldr	r3, [pc, #92]	; (16e48 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   16dec:	4798      	blx	r3
   16dee:	4603      	mov	r3, r0
   16df0:	461a      	mov	r2, r3
   16df2:	687b      	ldr	r3, [r7, #4]
   16df4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   16df8:	78fb      	ldrb	r3, [r7, #3]
   16dfa:	2b00      	cmp	r3, #0
   16dfc:	d006      	beq.n	16e0c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   16dfe:	687b      	ldr	r3, [r7, #4]
   16e00:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16e04:	f043 0304 	orr.w	r3, r3, #4
   16e08:	b2db      	uxtb	r3, r3
   16e0a:	e005      	b.n	16e18 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   16e0c:	687b      	ldr	r3, [r7, #4]
   16e0e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16e12:	f023 0304 	bic.w	r3, r3, #4
   16e16:	b2db      	uxtb	r3, r3
   16e18:	687a      	ldr	r2, [r7, #4]
   16e1a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   16e22:	687b      	ldr	r3, [r7, #4]
   16e24:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   16e28:	4619      	mov	r1, r3
   16e2a:	4610      	mov	r0, r2
   16e2c:	4b07      	ldr	r3, [pc, #28]	; (16e4c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   16e2e:	4798      	blx	r3
   16e30:	4603      	mov	r3, r0
   16e32:	461a      	mov	r2, r3
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   16e3a:	687b      	ldr	r3, [r7, #4]
   16e3c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   16e40:	4618      	mov	r0, r3
   16e42:	3708      	adds	r7, #8
   16e44:	46bd      	mov	sp, r7
   16e46:	bd80      	pop	{r7, pc}
   16e48:	00018d45 	.word	0x00018d45
   16e4c:	00018dc9 	.word	0x00018dc9

00016e50 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   16e50:	b580      	push	{r7, lr}
   16e52:	b082      	sub	sp, #8
   16e54:	af00      	add	r7, sp, #0
   16e56:	6078      	str	r0, [r7, #4]
   16e58:	460b      	mov	r3, r1
   16e5a:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   16e5c:	687b      	ldr	r3, [r7, #4]
   16e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   16e60:	78fa      	ldrb	r2, [r7, #3]
   16e62:	4611      	mov	r1, r2
   16e64:	4618      	mov	r0, r3
   16e66:	4b07      	ldr	r3, [pc, #28]	; (16e84 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   16e68:	4798      	blx	r3
   16e6a:	4603      	mov	r3, r0
   16e6c:	461a      	mov	r2, r3
   16e6e:	687b      	ldr	r3, [r7, #4]
   16e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   16e7a:	4618      	mov	r0, r3
   16e7c:	3708      	adds	r7, #8
   16e7e:	46bd      	mov	sp, r7
   16e80:	bd80      	pop	{r7, pc}
   16e82:	bf00      	nop
   16e84:	00018dc9 	.word	0x00018dc9

00016e88 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   16e88:	b580      	push	{r7, lr}
   16e8a:	b082      	sub	sp, #8
   16e8c:	af00      	add	r7, sp, #0
   16e8e:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   16e90:	687b      	ldr	r3, [r7, #4]
   16e92:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   16e96:	687b      	ldr	r3, [r7, #4]
   16e98:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   16e9c:	687b      	ldr	r3, [r7, #4]
   16e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16ea0:	4618      	mov	r0, r3
   16ea2:	4b18      	ldr	r3, [pc, #96]	; (16f04 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   16ea4:	4798      	blx	r3
   16ea6:	4603      	mov	r3, r0
   16ea8:	461a      	mov	r2, r3
   16eaa:	687b      	ldr	r3, [r7, #4]
   16eac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   16eb0:	687b      	ldr	r3, [r7, #4]
   16eb2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   16eb6:	2bda      	cmp	r3, #218	; 0xda
   16eb8:	dd04      	ble.n	16ec4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   16eba:	687b      	ldr	r3, [r7, #4]
   16ebc:	2203      	movs	r2, #3
   16ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   16ec2:	e017      	b.n	16ef4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   16ec4:	687b      	ldr	r3, [r7, #4]
   16ec6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   16eca:	2b6d      	cmp	r3, #109	; 0x6d
   16ecc:	dd04      	ble.n	16ed8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   16ece:	687b      	ldr	r3, [r7, #4]
   16ed0:	2202      	movs	r2, #2
   16ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   16ed6:	e00d      	b.n	16ef4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   16ed8:	687b      	ldr	r3, [r7, #4]
   16eda:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   16ede:	2b36      	cmp	r3, #54	; 0x36
   16ee0:	dd04      	ble.n	16eec <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	2201      	movs	r2, #1
   16ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   16eea:	e003      	b.n	16ef4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	2200      	movs	r2, #0
   16ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   16ef4:	687b      	ldr	r3, [r7, #4]
   16ef6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   16efa:	4618      	mov	r0, r3
   16efc:	3708      	adds	r7, #8
   16efe:	46bd      	mov	sp, r7
   16f00:	bd80      	pop	{r7, pc}
   16f02:	bf00      	nop
   16f04:	00018d45 	.word	0x00018d45

00016f08 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv>:
void SingleFlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlOutputs=ReadControlStatus();
	fvData.inputStatus=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool SingleFlapperValve_Class::IsPositionChanged(void){
   16f08:	b590      	push	{r4, r7, lr}
   16f0a:	b083      	sub	sp, #12
   16f0c:	af00      	add	r7, sp, #0
   16f0e:	6078      	str	r0, [r7, #4]
	if (lastPosition==ReadActualPosition())
   16f10:	687b      	ldr	r3, [r7, #4]
   16f12:	f893 4072 	ldrb.w	r4, [r3, #114]	; 0x72
   16f16:	6878      	ldr	r0, [r7, #4]
   16f18:	4b08      	ldr	r3, [pc, #32]	; (16f3c <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x34>)
   16f1a:	4798      	blx	r3
   16f1c:	4603      	mov	r3, r0
   16f1e:	429c      	cmp	r4, r3
   16f20:	bf0c      	ite	eq
   16f22:	2301      	moveq	r3, #1
   16f24:	2300      	movne	r3, #0
   16f26:	b2db      	uxtb	r3, r3
   16f28:	2b00      	cmp	r3, #0
   16f2a:	d001      	beq.n	16f30 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x28>
	{
		return false;
   16f2c:	2300      	movs	r3, #0
   16f2e:	e000      	b.n	16f32 <_ZN24SingleFlapperValve_Class17IsPositionChangedEv+0x2a>
	} 
	else
	{
		return true;
   16f30:	2301      	movs	r3, #1
	}
	return true;
}
   16f32:	4618      	mov	r0, r3
   16f34:	370c      	adds	r7, #12
   16f36:	46bd      	mov	sp, r7
   16f38:	bd90      	pop	{r4, r7, pc}
   16f3a:	bf00      	nop
   16f3c:	00016e89 	.word	0x00016e89

00016f40 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   16f40:	b590      	push	{r4, r7, lr}
   16f42:	b083      	sub	sp, #12
   16f44:	af00      	add	r7, sp, #0
   16f46:	6078      	str	r0, [r7, #4]
   16f48:	4c05      	ldr	r4, [pc, #20]	; (16f60 <__tcf_0+0x20>)
   16f4a:	4b06      	ldr	r3, [pc, #24]	; (16f64 <__tcf_0+0x24>)
   16f4c:	429c      	cmp	r4, r3
   16f4e:	d004      	beq.n	16f5a <__tcf_0+0x1a>
   16f50:	3c1c      	subs	r4, #28
   16f52:	4620      	mov	r0, r4
   16f54:	4b04      	ldr	r3, [pc, #16]	; (16f68 <__tcf_0+0x28>)
   16f56:	4798      	blx	r3
   16f58:	e7f7      	b.n	16f4a <__tcf_0+0xa>
   16f5a:	370c      	adds	r7, #12
   16f5c:	46bd      	mov	sp, r7
   16f5e:	bd90      	pop	{r4, r7, pc}
   16f60:	200057c4 	.word	0x200057c4
   16f64:	20005754 	.word	0x20005754
   16f68:	00018c4b 	.word	0x00018c4b

00016f6c <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   16f6c:	b5b0      	push	{r4, r5, r7, lr}
   16f6e:	b082      	sub	sp, #8
   16f70:	af00      	add	r7, sp, #0
   16f72:	6078      	str	r0, [r7, #4]
   16f74:	6039      	str	r1, [r7, #0]
   16f76:	687b      	ldr	r3, [r7, #4]
   16f78:	2b01      	cmp	r3, #1
   16f7a:	d15c      	bne.n	17036 <_Z41__static_initialization_and_destruction_0ii+0xca>
   16f7c:	683b      	ldr	r3, [r7, #0]
   16f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16f82:	4293      	cmp	r3, r2
   16f84:	d157      	bne.n	17036 <_Z41__static_initialization_and_destruction_0ii+0xca>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   16f86:	492e      	ldr	r1, [pc, #184]	; (17040 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   16f88:	482e      	ldr	r0, [pc, #184]	; (17044 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16f8a:	4b2f      	ldr	r3, [pc, #188]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16f8c:	4798      	blx	r3
   16f8e:	4a2f      	ldr	r2, [pc, #188]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16f90:	492f      	ldr	r1, [pc, #188]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16f92:	482c      	ldr	r0, [pc, #176]	; (17044 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   16f94:	4b2f      	ldr	r3, [pc, #188]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16f96:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   16f98:	492f      	ldr	r1, [pc, #188]	; (17058 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   16f9a:	4830      	ldr	r0, [pc, #192]	; (1705c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   16f9c:	4b2a      	ldr	r3, [pc, #168]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16f9e:	4798      	blx	r3
   16fa0:	4a2a      	ldr	r2, [pc, #168]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16fa2:	492b      	ldr	r1, [pc, #172]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16fa4:	482d      	ldr	r0, [pc, #180]	; (1705c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   16fa6:	4b2b      	ldr	r3, [pc, #172]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16fa8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   16faa:	492d      	ldr	r1, [pc, #180]	; (17060 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   16fac:	482d      	ldr	r0, [pc, #180]	; (17064 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   16fae:	4b26      	ldr	r3, [pc, #152]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16fb0:	4798      	blx	r3
   16fb2:	4a26      	ldr	r2, [pc, #152]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16fb4:	4926      	ldr	r1, [pc, #152]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16fb6:	482b      	ldr	r0, [pc, #172]	; (17064 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   16fb8:	4b26      	ldr	r3, [pc, #152]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16fba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   16fbc:	492a      	ldr	r1, [pc, #168]	; (17068 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   16fbe:	482b      	ldr	r0, [pc, #172]	; (1706c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   16fc0:	4b21      	ldr	r3, [pc, #132]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16fc2:	4798      	blx	r3
   16fc4:	4a21      	ldr	r2, [pc, #132]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16fc6:	4922      	ldr	r1, [pc, #136]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16fc8:	4828      	ldr	r0, [pc, #160]	; (1706c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   16fca:	4b22      	ldr	r3, [pc, #136]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16fcc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   16fce:	4928      	ldr	r1, [pc, #160]	; (17070 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   16fd0:	4828      	ldr	r0, [pc, #160]	; (17074 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   16fd2:	4b1d      	ldr	r3, [pc, #116]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16fd4:	4798      	blx	r3
   16fd6:	4a1d      	ldr	r2, [pc, #116]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16fd8:	491d      	ldr	r1, [pc, #116]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16fda:	4826      	ldr	r0, [pc, #152]	; (17074 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   16fdc:	4b1d      	ldr	r3, [pc, #116]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16fde:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   16fe0:	4925      	ldr	r1, [pc, #148]	; (17078 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   16fe2:	4826      	ldr	r0, [pc, #152]	; (1707c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   16fe4:	4b18      	ldr	r3, [pc, #96]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16fe6:	4798      	blx	r3
   16fe8:	4a18      	ldr	r2, [pc, #96]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16fea:	4919      	ldr	r1, [pc, #100]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16fec:	4823      	ldr	r0, [pc, #140]	; (1707c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   16fee:	4b19      	ldr	r3, [pc, #100]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   16ff0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   16ff2:	4923      	ldr	r1, [pc, #140]	; (17080 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   16ff4:	4823      	ldr	r0, [pc, #140]	; (17084 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   16ff6:	4b14      	ldr	r3, [pc, #80]	; (17048 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   16ff8:	4798      	blx	r3
   16ffa:	4a14      	ldr	r2, [pc, #80]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   16ffc:	4914      	ldr	r1, [pc, #80]	; (17050 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   16ffe:	4821      	ldr	r0, [pc, #132]	; (17084 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   17000:	4b14      	ldr	r3, [pc, #80]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   17002:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   17004:	4920      	ldr	r1, [pc, #128]	; (17088 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   17006:	4821      	ldr	r0, [pc, #132]	; (1708c <_Z41__static_initialization_and_destruction_0ii+0x120>)
   17008:	4b21      	ldr	r3, [pc, #132]	; (17090 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   1700a:	4798      	blx	r3
   1700c:	4a0f      	ldr	r2, [pc, #60]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1700e:	4921      	ldr	r1, [pc, #132]	; (17094 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   17010:	481e      	ldr	r0, [pc, #120]	; (1708c <_Z41__static_initialization_and_destruction_0ii+0x120>)
   17012:	4b10      	ldr	r3, [pc, #64]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   17014:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   17016:	4b20      	ldr	r3, [pc, #128]	; (17098 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   17018:	2403      	movs	r4, #3
   1701a:	461d      	mov	r5, r3
   1701c:	2c00      	cmp	r4, #0
   1701e:	db05      	blt.n	1702c <_Z41__static_initialization_and_destruction_0ii+0xc0>
   17020:	4628      	mov	r0, r5
   17022:	4b1e      	ldr	r3, [pc, #120]	; (1709c <_Z41__static_initialization_and_destruction_0ii+0x130>)
   17024:	4798      	blx	r3
   17026:	351c      	adds	r5, #28
   17028:	3c01      	subs	r4, #1
   1702a:	e7f7      	b.n	1701c <_Z41__static_initialization_and_destruction_0ii+0xb0>
   1702c:	4a07      	ldr	r2, [pc, #28]	; (1704c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1702e:	491c      	ldr	r1, [pc, #112]	; (170a0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   17030:	2000      	movs	r0, #0
   17032:	4b08      	ldr	r3, [pc, #32]	; (17054 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   17034:	4798      	blx	r3
}
   17036:	bf00      	nop
   17038:	3708      	adds	r7, #8
   1703a:	46bd      	mov	sp, r7
   1703c:	bdb0      	pop	{r4, r5, r7, pc}
   1703e:	bf00      	nop
   17040:	2000d6d8 	.word	0x2000d6d8
   17044:	2000565c 	.word	0x2000565c
   17048:	00013d09 	.word	0x00013d09
   1704c:	20000000 	.word	0x20000000
   17050:	00013d41 	.word	0x00013d41
   17054:	0001a44d 	.word	0x0001a44d
   17058:	2000d76c 	.word	0x2000d76c
   1705c:	2000567c 	.word	0x2000567c
   17060:	2000d870 	.word	0x2000d870
   17064:	2000569c 	.word	0x2000569c
   17068:	2000d78c 	.word	0x2000d78c
   1706c:	200056bc 	.word	0x200056bc
   17070:	2000d830 	.word	0x2000d830
   17074:	200056dc 	.word	0x200056dc
   17078:	2000d850 	.word	0x2000d850
   1707c:	200056fc 	.word	0x200056fc
   17080:	2000d748 	.word	0x2000d748
   17084:	2000571c 	.word	0x2000571c
   17088:	2000d7ac 	.word	0x2000d7ac
   1708c:	20005740 	.word	0x20005740
   17090:	00018925 	.word	0x00018925
   17094:	00018941 	.word	0x00018941
   17098:	20005754 	.word	0x20005754
   1709c:	00018c37 	.word	0x00018c37
   170a0:	00016f41 	.word	0x00016f41

000170a4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   170a4:	b580      	push	{r7, lr}
   170a6:	af00      	add	r7, sp, #0
   170a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   170ac:	2001      	movs	r0, #1
   170ae:	4b01      	ldr	r3, [pc, #4]	; (170b4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   170b0:	4798      	blx	r3
   170b2:	bd80      	pop	{r7, pc}
   170b4:	00016f6d 	.word	0x00016f6d

000170b8 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   170b8:	b480      	push	{r7}
   170ba:	b083      	sub	sp, #12
   170bc:	af00      	add	r7, sp, #0
   170be:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   170c0:	4a07      	ldr	r2, [pc, #28]	; (170e0 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   170c2:	687b      	ldr	r3, [r7, #4]
   170c4:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   170c6:	687b      	ldr	r3, [r7, #4]
   170c8:	4a06      	ldr	r2, [pc, #24]	; (170e4 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   170ca:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   170cc:	687b      	ldr	r3, [r7, #4]
   170ce:	2200      	movs	r2, #0
   170d0:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   170d2:	687b      	ldr	r3, [r7, #4]
   170d4:	4618      	mov	r0, r3
   170d6:	370c      	adds	r7, #12
   170d8:	46bd      	mov	sp, r7
   170da:	bc80      	pop	{r7}
   170dc:	4770      	bx	lr
   170de:	bf00      	nop
   170e0:	200057c4 	.word	0x200057c4
   170e4:	200057c8 	.word	0x200057c8

000170e8 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   170e8:	b480      	push	{r7}
   170ea:	b083      	sub	sp, #12
   170ec:	af00      	add	r7, sp, #0
   170ee:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	4618      	mov	r0, r3
   170f4:	370c      	adds	r7, #12
   170f6:	46bd      	mov	sp, r7
   170f8:	bc80      	pop	{r7}
   170fa:	4770      	bx	lr

000170fc <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
   170fc:	b580      	push	{r7, lr}
   170fe:	b082      	sub	sp, #8
   17100:	af00      	add	r7, sp, #0
   17102:	6078      	str	r0, [r7, #4]
		i2c->Init();
   17104:	687b      	ldr	r3, [r7, #4]
   17106:	699b      	ldr	r3, [r3, #24]
   17108:	4618      	mov	r0, r3
   1710a:	4b15      	ldr	r3, [pc, #84]	; (17160 <_ZN18SingleHeater_Class4InitEv+0x64>)
   1710c:	4798      	blx	r3
		if (i2c->isOK)
   1710e:	687b      	ldr	r3, [r7, #4]
   17110:	699b      	ldr	r3, [r3, #24]
   17112:	7a5b      	ldrb	r3, [r3, #9]
   17114:	b2db      	uxtb	r3, r3
   17116:	2b00      	cmp	r3, #0
   17118:	d014      	beq.n	17144 <_ZN18SingleHeater_Class4InitEv+0x48>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
   1711a:	6878      	ldr	r0, [r7, #4]
   1711c:	4b11      	ldr	r3, [pc, #68]	; (17164 <_ZN18SingleHeater_Class4InitEv+0x68>)
   1711e:	4798      	blx	r3
			expanders[0]->SetPortInput();
   17120:	687b      	ldr	r3, [r7, #4]
   17122:	68db      	ldr	r3, [r3, #12]
   17124:	4618      	mov	r0, r3
   17126:	4b10      	ldr	r3, [pc, #64]	; (17168 <_ZN18SingleHeater_Class4InitEv+0x6c>)
   17128:	4798      	blx	r3
			expanders[1]->SetPortOutput();
   1712a:	687b      	ldr	r3, [r7, #4]
   1712c:	691b      	ldr	r3, [r3, #16]
   1712e:	4618      	mov	r0, r3
   17130:	4b0e      	ldr	r3, [pc, #56]	; (1716c <_ZN18SingleHeater_Class4InitEv+0x70>)
   17132:	4798      	blx	r3
			isOK=SelfTest();
   17134:	6878      	ldr	r0, [r7, #4]
   17136:	4b0e      	ldr	r3, [pc, #56]	; (17170 <_ZN18SingleHeater_Class4InitEv+0x74>)
   17138:	4798      	blx	r3
   1713a:	4603      	mov	r3, r0
   1713c:	461a      	mov	r2, r3
   1713e:	687b      	ldr	r3, [r7, #4]
   17140:	701a      	strb	r2, [r3, #0]
   17142:	e000      	b.n	17146 <_ZN18SingleHeater_Class4InitEv+0x4a>
		}
		else
		{
			asm("nop");
   17144:	bf00      	nop
		}
		isOK=i2c->isOK;
   17146:	687b      	ldr	r3, [r7, #4]
   17148:	699b      	ldr	r3, [r3, #24]
   1714a:	7a5b      	ldrb	r3, [r3, #9]
   1714c:	b2da      	uxtb	r2, r3
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	701a      	strb	r2, [r3, #0]
		return isOK;
   17152:	687b      	ldr	r3, [r7, #4]
   17154:	781b      	ldrb	r3, [r3, #0]
   17156:	b2db      	uxtb	r3, r3
}
   17158:	4618      	mov	r0, r3
   1715a:	3708      	adds	r7, #8
   1715c:	46bd      	mov	sp, r7
   1715e:	bd80      	pop	{r7, pc}
   17160:	00018955 	.word	0x00018955
   17164:	00017175 	.word	0x00017175
   17168:	00018e05 	.word	0x00018e05
   1716c:	00018ebd 	.word	0x00018ebd
   17170:	000173e9 	.word	0x000173e9

00017174 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
   17174:	b580      	push	{r7, lr}
   17176:	b084      	sub	sp, #16
   17178:	af00      	add	r7, sp, #0
   1717a:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   1717c:	2300      	movs	r3, #0
   1717e:	60fb      	str	r3, [r7, #12]
   17180:	68fb      	ldr	r3, [r7, #12]
   17182:	2b01      	cmp	r3, #1
   17184:	dc25      	bgt.n	171d2 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
   17186:	68fa      	ldr	r2, [r7, #12]
   17188:	4613      	mov	r3, r2
   1718a:	00db      	lsls	r3, r3, #3
   1718c:	1a9b      	subs	r3, r3, r2
   1718e:	009b      	lsls	r3, r3, #2
   17190:	4a12      	ldr	r2, [pc, #72]	; (171dc <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
   17192:	441a      	add	r2, r3
   17194:	6879      	ldr	r1, [r7, #4]
   17196:	68fb      	ldr	r3, [r7, #12]
   17198:	3302      	adds	r3, #2
   1719a:	009b      	lsls	r3, r3, #2
   1719c:	440b      	add	r3, r1
   1719e:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   171a0:	687a      	ldr	r2, [r7, #4]
   171a2:	68fb      	ldr	r3, [r7, #12]
   171a4:	3302      	adds	r3, #2
   171a6:	009b      	lsls	r3, r3, #2
   171a8:	4413      	add	r3, r2
   171aa:	685a      	ldr	r2, [r3, #4]
   171ac:	687b      	ldr	r3, [r7, #4]
   171ae:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   171b0:	687b      	ldr	r3, [r7, #4]
   171b2:	6958      	ldr	r0, [r3, #20]
   171b4:	68fb      	ldr	r3, [r7, #12]
   171b6:	b25b      	sxtb	r3, r3
   171b8:	f043 0320 	orr.w	r3, r3, #32
   171bc:	b25b      	sxtb	r3, r3
   171be:	b2d9      	uxtb	r1, r3
   171c0:	687b      	ldr	r3, [r7, #4]
   171c2:	699b      	ldr	r3, [r3, #24]
   171c4:	461a      	mov	r2, r3
   171c6:	4b06      	ldr	r3, [pc, #24]	; (171e0 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
   171c8:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   171ca:	68fb      	ldr	r3, [r7, #12]
   171cc:	3301      	adds	r3, #1
   171ce:	60fb      	str	r3, [r7, #12]
   171d0:	e7d6      	b.n	17180 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
   171d2:	bf00      	nop
   171d4:	4618      	mov	r0, r3
   171d6:	3710      	adds	r7, #16
   171d8:	46bd      	mov	sp, r7
   171da:	bd80      	pop	{r7, pc}
   171dc:	200057dc 	.word	0x200057dc
   171e0:	00018c5f 	.word	0x00018c5f

000171e4 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   171e4:	b580      	push	{r7, lr}
   171e6:	b084      	sub	sp, #16
   171e8:	af00      	add	r7, sp, #0
   171ea:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   171ec:	687b      	ldr	r3, [r7, #4]
   171ee:	68db      	ldr	r3, [r3, #12]
   171f0:	4618      	mov	r0, r3
   171f2:	4b16      	ldr	r3, [pc, #88]	; (1724c <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   171f4:	4798      	blx	r3
   171f6:	4603      	mov	r3, r0
   171f8:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   171fa:	7bbb      	ldrb	r3, [r7, #14]
   171fc:	f003 0301 	and.w	r3, r3, #1
   17200:	2b00      	cmp	r3, #0
   17202:	bf14      	ite	ne
   17204:	2301      	movne	r3, #1
   17206:	2300      	moveq	r3, #0
   17208:	b2da      	uxtb	r2, r3
   1720a:	687b      	ldr	r3, [r7, #4]
   1720c:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   1720e:	2300      	movs	r3, #0
   17210:	73fb      	strb	r3, [r7, #15]
   17212:	7bfb      	ldrb	r3, [r7, #15]
   17214:	2b03      	cmp	r3, #3
   17216:	dc14      	bgt.n	17242 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   17218:	7bfb      	ldrb	r3, [r7, #15]
   1721a:	7bb9      	ldrb	r1, [r7, #14]
   1721c:	7bfa      	ldrb	r2, [r7, #15]
   1721e:	3201      	adds	r2, #1
   17220:	fa41 f202 	asr.w	r2, r1, r2
   17224:	f002 0201 	and.w	r2, r2, #1
   17228:	2a00      	cmp	r2, #0
   1722a:	bf14      	ite	ne
   1722c:	2201      	movne	r2, #1
   1722e:	2200      	moveq	r2, #0
   17230:	b2d1      	uxtb	r1, r2
   17232:	687a      	ldr	r2, [r7, #4]
   17234:	4413      	add	r3, r2
   17236:	460a      	mov	r2, r1
   17238:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   1723a:	7bfb      	ldrb	r3, [r7, #15]
   1723c:	3301      	adds	r3, #1
   1723e:	73fb      	strb	r3, [r7, #15]
   17240:	e7e7      	b.n	17212 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   17242:	7bbb      	ldrb	r3, [r7, #14]
}
   17244:	4618      	mov	r0, r3
   17246:	3710      	adds	r7, #16
   17248:	46bd      	mov	sp, r7
   1724a:	bd80      	pop	{r7, pc}
   1724c:	00018d45 	.word	0x00018d45

00017250 <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   17250:	b580      	push	{r7, lr}
   17252:	b084      	sub	sp, #16
   17254:	af00      	add	r7, sp, #0
   17256:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   17258:	687b      	ldr	r3, [r7, #4]
   1725a:	691b      	ldr	r3, [r3, #16]
   1725c:	4618      	mov	r0, r3
   1725e:	4b11      	ldr	r3, [pc, #68]	; (172a4 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x54>)
   17260:	4798      	blx	r3
   17262:	4603      	mov	r3, r0
   17264:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   17266:	2300      	movs	r3, #0
   17268:	73fb      	strb	r3, [r7, #15]
   1726a:	7bfb      	ldrb	r3, [r7, #15]
   1726c:	2b03      	cmp	r3, #3
   1726e:	dc13      	bgt.n	17298 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x48>
	{
		enables[i]=!(r&(0x01<<i));
   17270:	7bfb      	ldrb	r3, [r7, #15]
   17272:	7bb9      	ldrb	r1, [r7, #14]
   17274:	7bfa      	ldrb	r2, [r7, #15]
   17276:	fa41 f202 	asr.w	r2, r1, r2
   1727a:	f002 0201 	and.w	r2, r2, #1
   1727e:	2a00      	cmp	r2, #0
   17280:	bf0c      	ite	eq
   17282:	2201      	moveq	r2, #1
   17284:	2200      	movne	r2, #0
   17286:	b2d1      	uxtb	r1, r2
   17288:	687a      	ldr	r2, [r7, #4]
   1728a:	4413      	add	r3, r2
   1728c:	460a      	mov	r2, r1
   1728e:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   17290:	7bfb      	ldrb	r3, [r7, #15]
   17292:	3301      	adds	r3, #1
   17294:	73fb      	strb	r3, [r7, #15]
   17296:	e7e8      	b.n	1726a <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   17298:	7bbb      	ldrb	r3, [r7, #14]
}
   1729a:	4618      	mov	r0, r3
   1729c:	3710      	adds	r7, #16
   1729e:	46bd      	mov	sp, r7
   172a0:	bd80      	pop	{r7, pc}
   172a2:	bf00      	nop
   172a4:	00018d45 	.word	0x00018d45

000172a8 <_ZN18SingleHeater_Class11EnableIndexEh>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   172a8:	b580      	push	{r7, lr}
   172aa:	b082      	sub	sp, #8
   172ac:	af00      	add	r7, sp, #0
   172ae:	6078      	str	r0, [r7, #4]
   172b0:	460b      	mov	r3, r1
   172b2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   172b4:	687b      	ldr	r3, [r7, #4]
   172b6:	691b      	ldr	r3, [r3, #16]
   172b8:	78f9      	ldrb	r1, [r7, #3]
   172ba:	2200      	movs	r2, #0
   172bc:	4618      	mov	r0, r3
   172be:	4b06      	ldr	r3, [pc, #24]	; (172d8 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   172c0:	4798      	blx	r3
   172c2:	4603      	mov	r3, r0
   172c4:	461a      	mov	r2, r3
   172c6:	687b      	ldr	r3, [r7, #4]
   172c8:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   172ca:	687b      	ldr	r3, [r7, #4]
   172cc:	7adb      	ldrb	r3, [r3, #11]
}
   172ce:	4618      	mov	r0, r3
   172d0:	3708      	adds	r7, #8
   172d2:	46bd      	mov	sp, r7
   172d4:	bd80      	pop	{r7, pc}
   172d6:	bf00      	nop
   172d8:	00018fb5 	.word	0x00018fb5

000172dc <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   172dc:	b580      	push	{r7, lr}
   172de:	b082      	sub	sp, #8
   172e0:	af00      	add	r7, sp, #0
   172e2:	6078      	str	r0, [r7, #4]
   172e4:	460b      	mov	r3, r1
   172e6:	70fb      	strb	r3, [r7, #3]
   172e8:	4613      	mov	r3, r2
   172ea:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   172ec:	687b      	ldr	r3, [r7, #4]
   172ee:	6918      	ldr	r0, [r3, #16]
   172f0:	78bb      	ldrb	r3, [r7, #2]
   172f2:	f083 0301 	eor.w	r3, r3, #1
   172f6:	b2da      	uxtb	r2, r3
   172f8:	78fb      	ldrb	r3, [r7, #3]
   172fa:	4619      	mov	r1, r3
   172fc:	4b05      	ldr	r3, [pc, #20]	; (17314 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   172fe:	4798      	blx	r3
   17300:	4603      	mov	r3, r0
   17302:	461a      	mov	r2, r3
   17304:	687b      	ldr	r3, [r7, #4]
   17306:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	7adb      	ldrb	r3, [r3, #11]
}
   1730c:	4618      	mov	r0, r3
   1730e:	3708      	adds	r7, #8
   17310:	46bd      	mov	sp, r7
   17312:	bd80      	pop	{r7, pc}
   17314:	00018fb5 	.word	0x00018fb5

00017318 <_ZN18SingleHeater_Class10DisableAllEv>:
void SingleHeater_Class::DisableAll(void){
   17318:	b580      	push	{r7, lr}
   1731a:	b084      	sub	sp, #16
   1731c:	af00      	add	r7, sp, #0
   1731e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++)
   17320:	2300      	movs	r3, #0
   17322:	73fb      	strb	r3, [r7, #15]
   17324:	7bfb      	ldrb	r3, [r7, #15]
   17326:	2b03      	cmp	r3, #3
   17328:	dc08      	bgt.n	1733c <_ZN18SingleHeater_Class10DisableAllEv+0x24>
	{
		DisableIndex(i);
   1732a:	7bfb      	ldrb	r3, [r7, #15]
   1732c:	4619      	mov	r1, r3
   1732e:	6878      	ldr	r0, [r7, #4]
   17330:	4b04      	ldr	r3, [pc, #16]	; (17344 <_ZN18SingleHeater_Class10DisableAllEv+0x2c>)
   17332:	4798      	blx	r3
	for (uint8_t i = 0; i < 4; i++)
   17334:	7bfb      	ldrb	r3, [r7, #15]
   17336:	3301      	adds	r3, #1
   17338:	73fb      	strb	r3, [r7, #15]
   1733a:	e7f3      	b.n	17324 <_ZN18SingleHeater_Class10DisableAllEv+0xc>
	}
}
   1733c:	bf00      	nop
   1733e:	3710      	adds	r7, #16
   17340:	46bd      	mov	sp, r7
   17342:	bd80      	pop	{r7, pc}
   17344:	00017349 	.word	0x00017349

00017348 <_ZN18SingleHeater_Class12DisableIndexEh>:

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   17348:	b580      	push	{r7, lr}
   1734a:	b082      	sub	sp, #8
   1734c:	af00      	add	r7, sp, #0
   1734e:	6078      	str	r0, [r7, #4]
   17350:	460b      	mov	r3, r1
   17352:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   17354:	687b      	ldr	r3, [r7, #4]
   17356:	691b      	ldr	r3, [r3, #16]
   17358:	78f9      	ldrb	r1, [r7, #3]
   1735a:	2201      	movs	r2, #1
   1735c:	4618      	mov	r0, r3
   1735e:	4b08      	ldr	r3, [pc, #32]	; (17380 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   17360:	4798      	blx	r3
   17362:	4603      	mov	r3, r0
   17364:	2b00      	cmp	r3, #0
   17366:	d001      	beq.n	1736c <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   17368:	2200      	movs	r2, #0
   1736a:	e000      	b.n	1736e <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   1736c:	2201      	movs	r2, #1
   1736e:	687b      	ldr	r3, [r7, #4]
   17370:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   17372:	687b      	ldr	r3, [r7, #4]
   17374:	7adb      	ldrb	r3, [r3, #11]
}
   17376:	4618      	mov	r0, r3
   17378:	3708      	adds	r7, #8
   1737a:	46bd      	mov	sp, r7
   1737c:	bd80      	pop	{r7, pc}
   1737e:	bf00      	nop
   17380:	00018fb5 	.word	0x00018fb5

00017384 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv>:

uint8_t SingleHeater_Class::GetHeaterPowerLevel(void){
   17384:	b580      	push	{r7, lr}
   17386:	b084      	sub	sp, #16
   17388:	af00      	add	r7, sp, #0
   1738a:	6078      	str	r0, [r7, #4]
	ReadEnableGIPO();
   1738c:	6878      	ldr	r0, [r7, #4]
   1738e:	4b15      	ldr	r3, [pc, #84]	; (173e4 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x60>)
   17390:	4798      	blx	r3
	powerLevel=0;
   17392:	687b      	ldr	r3, [r7, #4]
   17394:	2200      	movs	r2, #0
   17396:	f883 2020 	strb.w	r2, [r3, #32]
	uint8_t aux=0;
   1739a:	2300      	movs	r3, #0
   1739c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
   1739e:	2300      	movs	r3, #0
   173a0:	73fb      	strb	r3, [r7, #15]
   173a2:	7bfb      	ldrb	r3, [r7, #15]
   173a4:	2b03      	cmp	r3, #3
   173a6:	dc16      	bgt.n	173d6 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x52>
	{
		aux=enables[i]?1:0;
   173a8:	7bfb      	ldrb	r3, [r7, #15]
   173aa:	687a      	ldr	r2, [r7, #4]
   173ac:	4413      	add	r3, r2
   173ae:	7f1b      	ldrb	r3, [r3, #28]
   173b0:	2b00      	cmp	r3, #0
   173b2:	d001      	beq.n	173b8 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x34>
   173b4:	2301      	movs	r3, #1
   173b6:	e000      	b.n	173ba <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x36>
   173b8:	2300      	movs	r3, #0
   173ba:	73bb      	strb	r3, [r7, #14]
		powerLevel+=aux;
   173bc:	687b      	ldr	r3, [r7, #4]
   173be:	f893 2020 	ldrb.w	r2, [r3, #32]
   173c2:	7bbb      	ldrb	r3, [r7, #14]
   173c4:	4413      	add	r3, r2
   173c6:	b2da      	uxtb	r2, r3
   173c8:	687b      	ldr	r3, [r7, #4]
   173ca:	f883 2020 	strb.w	r2, [r3, #32]
	for (uint8_t i = 0; i < 4; i++)
   173ce:	7bfb      	ldrb	r3, [r7, #15]
   173d0:	3301      	adds	r3, #1
   173d2:	73fb      	strb	r3, [r7, #15]
   173d4:	e7e5      	b.n	173a2 <_ZN18SingleHeater_Class19GetHeaterPowerLevelEv+0x1e>
	}
	return powerLevel;
   173d6:	687b      	ldr	r3, [r7, #4]
   173d8:	f893 3020 	ldrb.w	r3, [r3, #32]
}
   173dc:	4618      	mov	r0, r3
   173de:	3710      	adds	r7, #16
   173e0:	46bd      	mov	sp, r7
   173e2:	bd80      	pop	{r7, pc}
   173e4:	00017251 	.word	0x00017251

000173e8 <_ZN18SingleHeater_Class8SelfTestEv>:


bool SingleHeater_Class::SelfTest(void){
   173e8:	b580      	push	{r7, lr}
   173ea:	b084      	sub	sp, #16
   173ec:	af00      	add	r7, sp, #0
   173ee:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   173f0:	2300      	movs	r3, #0
   173f2:	73bb      	strb	r3, [r7, #14]
   173f4:	7bbb      	ldrb	r3, [r7, #14]
   173f6:	2b03      	cmp	r3, #3
   173f8:	dc1f      	bgt.n	1743a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
			EnableIndex(i);
   173fa:	7bbb      	ldrb	r3, [r7, #14]
   173fc:	4619      	mov	r1, r3
   173fe:	6878      	ldr	r0, [r7, #4]
   17400:	4b10      	ldr	r3, [pc, #64]	; (17444 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   17402:	4798      	blx	r3
			delay_ms(100);
   17404:	2064      	movs	r0, #100	; 0x64
   17406:	4b10      	ldr	r3, [pc, #64]	; (17448 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   17408:	4798      	blx	r3
			DisableIndex(i);
   1740a:	7bbb      	ldrb	r3, [r7, #14]
   1740c:	4619      	mov	r1, r3
   1740e:	6878      	ldr	r0, [r7, #4]
   17410:	4b0e      	ldr	r3, [pc, #56]	; (1744c <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   17412:	4798      	blx	r3
			ReadStatus();
   17414:	6878      	ldr	r0, [r7, #4]
   17416:	4b0e      	ldr	r3, [pc, #56]	; (17450 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   17418:	4798      	blx	r3
			if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   1741a:	7bbb      	ldrb	r3, [r7, #14]
   1741c:	687a      	ldr	r2, [r7, #4]
   1741e:	4413      	add	r3, r2
   17420:	78db      	ldrb	r3, [r3, #3]
   17422:	2b00      	cmp	r3, #0
   17424:	d002      	beq.n	1742c <_ZN18SingleHeater_Class8SelfTestEv+0x44>
			{
				result=true;
   17426:	2301      	movs	r3, #1
   17428:	73fb      	strb	r3, [r7, #15]
   1742a:	e002      	b.n	17432 <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
			} 
			else
			{
				result=false;
   1742c:	2300      	movs	r3, #0
   1742e:	73fb      	strb	r3, [r7, #15]
				break;
   17430:	e003      	b.n	1743a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   17432:	7bbb      	ldrb	r3, [r7, #14]
   17434:	3301      	adds	r3, #1
   17436:	73bb      	strb	r3, [r7, #14]
   17438:	e7dc      	b.n	173f4 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
			
			
	}
	

	return result;
   1743a:	7bfb      	ldrb	r3, [r7, #15]
}
   1743c:	4618      	mov	r0, r3
   1743e:	3710      	adds	r7, #16
   17440:	46bd      	mov	sp, r7
   17442:	bd80      	pop	{r7, pc}
   17444:	000172a9 	.word	0x000172a9
   17448:	0000647d 	.word	0x0000647d
   1744c:	00017349 	.word	0x00017349
   17450:	000171e5 	.word	0x000171e5

00017454 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   17454:	b590      	push	{r4, r7, lr}
   17456:	b083      	sub	sp, #12
   17458:	af00      	add	r7, sp, #0
   1745a:	6078      	str	r0, [r7, #4]
   1745c:	4c05      	ldr	r4, [pc, #20]	; (17474 <__tcf_0+0x20>)
   1745e:	4b06      	ldr	r3, [pc, #24]	; (17478 <__tcf_0+0x24>)
   17460:	429c      	cmp	r4, r3
   17462:	d004      	beq.n	1746e <__tcf_0+0x1a>
   17464:	3c1c      	subs	r4, #28
   17466:	4620      	mov	r0, r4
   17468:	4b04      	ldr	r3, [pc, #16]	; (1747c <__tcf_0+0x28>)
   1746a:	4798      	blx	r3
   1746c:	e7f7      	b.n	1745e <__tcf_0+0xa>
   1746e:	370c      	adds	r7, #12
   17470:	46bd      	mov	sp, r7
   17472:	bd90      	pop	{r4, r7, pc}
   17474:	20005814 	.word	0x20005814
   17478:	200057dc 	.word	0x200057dc
   1747c:	00018c4b 	.word	0x00018c4b

00017480 <_Z41__static_initialization_and_destruction_0ii>:

   17480:	b5b0      	push	{r4, r5, r7, lr}
   17482:	b082      	sub	sp, #8
   17484:	af00      	add	r7, sp, #0
   17486:	6078      	str	r0, [r7, #4]
   17488:	6039      	str	r1, [r7, #0]
   1748a:	687b      	ldr	r3, [r7, #4]
   1748c:	2b01      	cmp	r3, #1
   1748e:	d125      	bne.n	174dc <_Z41__static_initialization_and_destruction_0ii+0x5c>
   17490:	683b      	ldr	r3, [r7, #0]
   17492:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17496:	4293      	cmp	r3, r2
   17498:	d120      	bne.n	174dc <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1749a:	4912      	ldr	r1, [pc, #72]	; (174e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1749c:	4812      	ldr	r0, [pc, #72]	; (174e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1749e:	4b13      	ldr	r3, [pc, #76]	; (174ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   174a0:	4798      	blx	r3
   174a2:	4a13      	ldr	r2, [pc, #76]	; (174f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   174a4:	4913      	ldr	r1, [pc, #76]	; (174f4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   174a6:	4810      	ldr	r0, [pc, #64]	; (174e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   174a8:	4b13      	ldr	r3, [pc, #76]	; (174f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   174aa:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   174ac:	4b13      	ldr	r3, [pc, #76]	; (174fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   174ae:	2401      	movs	r4, #1
   174b0:	461d      	mov	r5, r3
   174b2:	2c00      	cmp	r4, #0
   174b4:	db05      	blt.n	174c2 <_Z41__static_initialization_and_destruction_0ii+0x42>
   174b6:	4628      	mov	r0, r5
   174b8:	4b11      	ldr	r3, [pc, #68]	; (17500 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   174ba:	4798      	blx	r3
   174bc:	351c      	adds	r5, #28
   174be:	3c01      	subs	r4, #1
   174c0:	e7f7      	b.n	174b2 <_Z41__static_initialization_and_destruction_0ii+0x32>
   174c2:	4a0b      	ldr	r2, [pc, #44]	; (174f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   174c4:	490f      	ldr	r1, [pc, #60]	; (17504 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   174c6:	2000      	movs	r0, #0
   174c8:	4b0b      	ldr	r3, [pc, #44]	; (174f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   174ca:	4798      	blx	r3
   174cc:	480e      	ldr	r0, [pc, #56]	; (17508 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   174ce:	4b0f      	ldr	r3, [pc, #60]	; (1750c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   174d0:	4798      	blx	r3
   174d2:	4a07      	ldr	r2, [pc, #28]	; (174f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   174d4:	490e      	ldr	r1, [pc, #56]	; (17510 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   174d6:	480c      	ldr	r0, [pc, #48]	; (17508 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   174d8:	4b07      	ldr	r3, [pc, #28]	; (174f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   174da:	4798      	blx	r3
   174dc:	bf00      	nop
   174de:	3708      	adds	r7, #8
   174e0:	46bd      	mov	sp, r7
   174e2:	bdb0      	pop	{r4, r5, r7, pc}
   174e4:	2000d7e8 	.word	0x2000d7e8
   174e8:	200057c8 	.word	0x200057c8
   174ec:	00018925 	.word	0x00018925
   174f0:	20000000 	.word	0x20000000
   174f4:	00018941 	.word	0x00018941
   174f8:	0001a44d 	.word	0x0001a44d
   174fc:	200057dc 	.word	0x200057dc
   17500:	00018c37 	.word	0x00018c37
   17504:	00017455 	.word	0x00017455
   17508:	20005814 	.word	0x20005814
   1750c:	000170b9 	.word	0x000170b9
   17510:	000170e9 	.word	0x000170e9

00017514 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   17514:	b580      	push	{r7, lr}
   17516:	af00      	add	r7, sp, #0
   17518:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1751c:	2001      	movs	r0, #1
   1751e:	4b01      	ldr	r3, [pc, #4]	; (17524 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   17520:	4798      	blx	r3
   17522:	bd80      	pop	{r7, pc}
   17524:	00017481 	.word	0x00017481

00017528 <_ZL21MaintenaceToolTimeoutPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimeout( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;
   17528:	4a03      	ldr	r2, [pc, #12]	; (17538 <_ZL21MaintenaceToolTimeoutPK10timer_task+0x10>)
   1752a:	6811      	ldr	r1, [r2, #0]
   1752c:	690b      	ldr	r3, [r1, #16]
   1752e:	3301      	adds	r3, #1
   17530:	610b      	str	r3, [r1, #16]
	toolApp.gotAccess=false;
   17532:	2300      	movs	r3, #0
   17534:	7653      	strb	r3, [r2, #25]
   17536:	4770      	bx	lr
   17538:	20005838 	.word	0x20005838

0001753c <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   1753c:	4b02      	ldr	r3, [pc, #8]	; (17548 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   1753e:	681b      	ldr	r3, [r3, #0]
   17540:	2200      	movs	r2, #0
   17542:	751a      	strb	r2, [r3, #20]
   17544:	4770      	bx	lr
   17546:	bf00      	nop
   17548:	20005838 	.word	0x20005838

0001754c <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   1754c:	b538      	push	{r3, r4, r5, lr}
   1754e:	4604      	mov	r4, r0
   17550:	4b0a      	ldr	r3, [pc, #40]	; (1757c <_ZN16Maintenance_ToolD1Ev+0x30>)
   17552:	6003      	str	r3, [r0, #0]
{
	ticks=0;
   17554:	2300      	movs	r3, #0
   17556:	6103      	str	r3, [r0, #16]
	interfaceTimer.Stop();
   17558:	4d09      	ldr	r5, [pc, #36]	; (17580 <_ZN16Maintenance_ToolD1Ev+0x34>)
   1755a:	4628      	mov	r0, r5
   1755c:	4b09      	ldr	r3, [pc, #36]	; (17584 <_ZN16Maintenance_ToolD1Ev+0x38>)
   1755e:	4798      	blx	r3
	interfaceTimer.Remove_task();
   17560:	4628      	mov	r0, r5
   17562:	4b09      	ldr	r3, [pc, #36]	; (17588 <_ZN16Maintenance_ToolD1Ev+0x3c>)
   17564:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
   17566:	4909      	ldr	r1, [pc, #36]	; (1758c <_ZN16Maintenance_ToolD1Ev+0x40>)
   17568:	4620      	mov	r0, r4
   1756a:	4b09      	ldr	r3, [pc, #36]	; (17590 <_ZN16Maintenance_ToolD1Ev+0x44>)
   1756c:	4798      	blx	r3
   1756e:	f504 7080 	add.w	r0, r4, #256	; 0x100
   17572:	4b08      	ldr	r3, [pc, #32]	; (17594 <_ZN16Maintenance_ToolD1Ev+0x48>)
   17574:	4798      	blx	r3
	
} //~Maintenance_Tool
   17576:	4620      	mov	r0, r4
   17578:	bd38      	pop	{r3, r4, r5, pc}
   1757a:	bf00      	nop
   1757c:	0001dc68 	.word	0x0001dc68
   17580:	20005980 	.word	0x20005980
   17584:	00013e69 	.word	0x00013e69
   17588:	00013f59 	.word	0x00013f59
   1758c:	0001dc58 	.word	0x0001dc58
   17590:	00017e63 	.word	0x00017e63
   17594:	00018095 	.word	0x00018095

00017598 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
   17598:	b538      	push	{r3, r4, r5, lr}
   1759a:	4604      	mov	r4, r0
   1759c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   175a0:	4b16      	ldr	r3, [pc, #88]	; (175fc <_ZN16Maintenance_ToolC1Ev+0x64>)
   175a2:	4798      	blx	r3
   175a4:	4916      	ldr	r1, [pc, #88]	; (17600 <_ZN16Maintenance_ToolC1Ev+0x68>)
   175a6:	4620      	mov	r0, r4
   175a8:	4b16      	ldr	r3, [pc, #88]	; (17604 <_ZN16Maintenance_ToolC1Ev+0x6c>)
   175aa:	4798      	blx	r3
   175ac:	4b16      	ldr	r3, [pc, #88]	; (17608 <_ZN16Maintenance_ToolC1Ev+0x70>)
   175ae:	6023      	str	r3, [r4, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
   175b0:	2300      	movs	r3, #0
   175b2:	2564      	movs	r5, #100	; 0x64
   175b4:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
   175b8:	2063      	movs	r0, #99	; 0x63
   175ba:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
   175be:	2162      	movs	r1, #98	; 0x62
   175c0:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
   175c4:	2261      	movs	r2, #97	; 0x61
   175c6:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
   175ca:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   175ce:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
   175d2:	f884 00f3 	strb.w	r0, [r4, #243]	; 0xf3
   175d6:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
   175da:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
   175de:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	ptrMaintenanceTool=this;
   175e2:	4a0a      	ldr	r2, [pc, #40]	; (1760c <_ZN16Maintenance_ToolC1Ev+0x74>)
   175e4:	6014      	str	r4, [r2, #0]
	maintenanceIsConnected = false;
   175e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	nextMaintenanceSyncTime = 0;
   175ea:	61a3      	str	r3, [r4, #24]
	nextMaintenanceUsageTimerSyncTime = 0;
   175ec:	61e3      	str	r3, [r4, #28]
	ticks=0;
   175ee:	6123      	str	r3, [r4, #16]
	localBuffer=staticBuffer;
   175f0:	f502 72b4 	add.w	r2, r2, #360	; 0x168
   175f4:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
} //Maintenance_Tool
   175f8:	4620      	mov	r0, r4
   175fa:	bd38      	pop	{r3, r4, r5, pc}
   175fc:	00018079 	.word	0x00018079
   17600:	0001dc58 	.word	0x0001dc58
   17604:	00017e49 	.word	0x00017e49
   17608:	0001dc68 	.word	0x0001dc68
   1760c:	20005838 	.word	0x20005838

00017610 <_ZN16Maintenance_Tool12SetConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::SetConnected(bool isConnected)
	{
   17610:	b538      	push	{r3, r4, r5, lr}
		maintenanceIsConnected = isConnected;
   17612:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		if (isConnected)
   17616:	b919      	cbnz	r1, 17620 <_ZN16Maintenance_Tool12SetConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   17618:	4809      	ldr	r0, [pc, #36]	; (17640 <_ZN16Maintenance_Tool12SetConnectedEb+0x30>)
   1761a:	4b0a      	ldr	r3, [pc, #40]	; (17644 <_ZN16Maintenance_Tool12SetConnectedEb+0x34>)
   1761c:	4798      	blx	r3
   1761e:	bd38      	pop	{r3, r4, r5, pc}
			interfaceTimer.Stop();
   17620:	4c07      	ldr	r4, [pc, #28]	; (17640 <_ZN16Maintenance_Tool12SetConnectedEb+0x30>)
   17622:	4620      	mov	r0, r4
   17624:	4b07      	ldr	r3, [pc, #28]	; (17644 <_ZN16Maintenance_Tool12SetConnectedEb+0x34>)
   17626:	4798      	blx	r3
			interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolTimeout);
   17628:	4d07      	ldr	r5, [pc, #28]	; (17648 <_ZN16Maintenance_Tool12SetConnectedEb+0x38>)
   1762a:	4629      	mov	r1, r5
   1762c:	4620      	mov	r0, r4
   1762e:	4b07      	ldr	r3, [pc, #28]	; (1764c <_ZN16Maintenance_Tool12SetConnectedEb+0x3c>)
   17630:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolTimeout,60*1000);
   17632:	f64e 2260 	movw	r2, #60000	; 0xea60
   17636:	4629      	mov	r1, r5
   17638:	4620      	mov	r0, r4
   1763a:	4b05      	ldr	r3, [pc, #20]	; (17650 <_ZN16Maintenance_Tool12SetConnectedEb+0x40>)
   1763c:	4798      	blx	r3
   1763e:	bd38      	pop	{r3, r4, r5, pc}
   17640:	20005980 	.word	0x20005980
   17644:	00013e69 	.word	0x00013e69
   17648:	00017529 	.word	0x00017529
   1764c:	00013f85 	.word	0x00013f85
   17650:	00013ff5 	.word	0x00013ff5

00017654 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   17654:	b510      	push	{r4, lr}
   17656:	4604      	mov	r4, r0
	result=false;
   17658:	2300      	movs	r3, #0
   1765a:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	magic=0;
   1765e:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	if (gotAccess==true)
   17662:	7d43      	ldrb	r3, [r0, #21]
   17664:	b12b      	cbz	r3, 17672 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1e>
		result=gotAccess;
   17666:	7d43      	ldrb	r3, [r0, #21]
   17668:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	return	result;
   1766c:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
}
   17670:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
   17672:	4b16      	ldr	r3, [pc, #88]	; (176cc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   17674:	7d5b      	ldrb	r3, [r3, #21]
   17676:	b1b3      	cbz	r3, 176a6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
				magic|= localBuffer[i];
   17678:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1767c:	1e41      	subs	r1, r0, #1
   1767e:	3003      	adds	r0, #3
				magic=magic<<8;
   17680:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   17684:	021b      	lsls	r3, r3, #8
   17686:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				magic|= localBuffer[i];
   1768a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1768e:	4313      	orrs	r3, r2
   17690:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			for (int i = 0; i < 4; i++)
   17694:	4281      	cmp	r1, r0
   17696:	d1f3      	bne.n	17680 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   17698:	4a0d      	ldr	r2, [pc, #52]	; (176d0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   1769a:	ea83 0102 	eor.w	r1, r3, r2
   1769e:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
			if (xorResult==0)
   176a2:	4293      	cmp	r3, r2
   176a4:	d006      	beq.n	176b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x60>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   176a6:	2240      	movs	r2, #64	; 0x40
   176a8:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   176ac:	4807      	ldr	r0, [pc, #28]	; (176cc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   176ae:	4b09      	ldr	r3, [pc, #36]	; (176d4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   176b0:	4798      	blx	r3
   176b2:	e7db      	b.n	1766c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x18>
				gotAccess=true;
   176b4:	2101      	movs	r1, #1
   176b6:	7561      	strb	r1, [r4, #21]
				result=true;
   176b8:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
				is_MTPC_Beaming=true;
   176bc:	7521      	strb	r1, [r4, #20]
				SetConnected(true);
   176be:	4620      	mov	r0, r4
   176c0:	4b05      	ldr	r3, [pc, #20]	; (176d8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   176c2:	4798      	blx	r3
				return	result;
   176c4:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   176c8:	bd10      	pop	{r4, pc}
   176ca:	bf00      	nop
   176cc:	20003884 	.word	0x20003884
   176d0:	61626364 	.word	0x61626364
   176d4:	000145b1 	.word	0x000145b1
   176d8:	00017611 	.word	0x00017611

000176dc <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
   176dc:	b410      	push	{r4}
   176de:	4604      	mov	r4, r0
   176e0:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
   176e2:	4619      	mov	r1, r3
   176e4:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
   176e8:	54d1      	strb	r1, [r2, r3]
   176ea:	1c58      	adds	r0, r3, #1
   176ec:	b2c0      	uxtb	r0, r0
   176ee:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
   176f0:	2b40      	cmp	r3, #64	; 0x40
   176f2:	d1f7      	bne.n	176e4 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
   176f4:	bc10      	pop	{r4}
   176f6:	4770      	bx	lr

000176f8 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
   176f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   176fc:	b92b      	cbnz	r3, 1770a <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
   176fe:	6183      	str	r3, [r0, #24]
		maintenanceIsConnected = true;
   17700:	2301      	movs	r3, #1
   17702:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		bSendNotifications = true;
   17706:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
   1770a:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
   1770e:	4770      	bx	lr

00017710 <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
   17710:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
   17712:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17716:	2b47      	cmp	r3, #71	; 0x47
   17718:	d001      	beq.n	1771e <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
   1771a:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
   1771c:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
   1771e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17722:	88db      	ldrh	r3, [r3, #6]
   17724:	4601      	mov	r1, r0
   17726:	f821 3fd4 	strh.w	r3, [r1, #212]!
		r=memory.SaveParameters(parameters);
   1772a:	4803      	ldr	r0, [pc, #12]	; (17738 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x28>)
   1772c:	4b03      	ldr	r3, [pc, #12]	; (1773c <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
   1772e:	4798      	blx	r3
			result=(bool)(r==0);
   17730:	fab0 f080 	clz	r0, r0
   17734:	0940      	lsrs	r0, r0, #5
   17736:	bd08      	pop	{r3, pc}
   17738:	20006c64 	.word	0x20006c64
   1773c:	000182f5 	.word	0x000182f5

00017740 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
   17740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   17744:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17748:	6819      	ldr	r1, [r3, #0]
   1774a:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   1774e:	8899      	ldrh	r1, [r3, #4]
   17750:	799b      	ldrb	r3, [r3, #6]
   17752:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   17756:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
   1775a:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   1775e:	2b49      	cmp	r3, #73	; 0x49
   17760:	bf0c      	ite	eq
   17762:	f04f 0801 	moveq.w	r8, #1
   17766:	f04f 0800 	movne.w	r8, #0
	if (result){
   1776a:	d002      	beq.n	17772 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
   1776c:	4640      	mov	r0, r8
   1776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
   17772:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   17776:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
		enableHeaters=singleTaskMessage.description;
   1777a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1777e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (enableHeaters!=lastEnableHeaters)
   17782:	429a      	cmp	r2, r3
   17784:	d0f2      	beq.n	1776c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
   17786:	4605      	mov	r5, r0
   17788:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
   1778a:	4f07      	ldr	r7, [pc, #28]	; (177a8 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
   1778c:	4e07      	ldr	r6, [pc, #28]	; (177ac <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
   1778e:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   17792:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
   17794:	f002 0201 	and.w	r2, r2, #1
   17798:	b2e1      	uxtb	r1, r4
   1779a:	4638      	mov	r0, r7
   1779c:	47b0      	blx	r6
   1779e:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
   177a0:	2c04      	cmp	r4, #4
   177a2:	d1f4      	bne.n	1778e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
   177a4:	e7e2      	b.n	1776c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
   177a6:	bf00      	nop
   177a8:	20005814 	.word	0x20005814
   177ac:	000172dd 	.word	0x000172dd

000177b0 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv>:


	

bool Maintenance_Tool::CommandSetFlapperValve(void){
   177b0:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   177b2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   177b6:	6819      	ldr	r1, [r3, #0]
   177b8:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   177bc:	8899      	ldrh	r1, [r3, #4]
   177be:	799b      	ldrb	r3, [r3, #6]
   177c0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   177c4:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandFlapperValve);
   177c8:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   177cc:	2b4f      	cmp	r3, #79	; 0x4f
   177ce:	bf0c      	ite	eq
   177d0:	2401      	moveq	r4, #1
   177d2:	2400      	movne	r4, #0
	if (result){
   177d4:	d001      	beq.n	177da <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x2a>
	}else{

	}
	
	return result;
}
   177d6:	4620      	mov	r0, r4
   177d8:	bd10      	pop	{r4, pc}
		if ((data&(0x01))>0)
   177da:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   177de:	f013 0f01 	tst.w	r3, #1
			fvc.StartControlling();
   177e2:	4803      	ldr	r0, [pc, #12]	; (177f0 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x40>)
   177e4:	bf14      	ite	ne
   177e6:	4b03      	ldrne	r3, [pc, #12]	; (177f4 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x44>)
			fvc.StopControlling();
   177e8:	4b03      	ldreq	r3, [pc, #12]	; (177f8 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x48>)
   177ea:	4798      	blx	r3
   177ec:	e7f3      	b.n	177d6 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x26>
   177ee:	bf00      	nop
   177f0:	20005598 	.word	0x20005598
   177f4:	000165f5 	.word	0x000165f5
   177f8:	0001642d 	.word	0x0001642d

000177fc <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv>:


bool Maintenance_Tool::CommandSetFlapperPosition(void){
   177fc:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
   177fe:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17802:	6819      	ldr	r1, [r3, #0]
   17804:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
   17808:	8899      	ldrh	r1, [r3, #4]
   1780a:	799b      	ldrb	r3, [r3, #6]
   1780c:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   17810:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
   17814:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17818:	2b50      	cmp	r3, #80	; 0x50
   1781a:	bf0c      	ite	eq
   1781c:	2401      	moveq	r4, #1
   1781e:	2400      	movne	r4, #0
	if (result){
   17820:	d001      	beq.n	17826 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x2a>
		}else{

	}
	
	return result;
}
   17822:	4620      	mov	r0, r4
   17824:	bd10      	pop	{r4, pc}
		if (fvc.controllerEnabled)
   17826:	4b07      	ldr	r3, [pc, #28]	; (17844 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   17828:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1782c:	b923      	cbnz	r3, 17838 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x3c>
		fvc.doPeriodicTask=false;
   1782e:	2200      	movs	r2, #0
   17830:	4b04      	ldr	r3, [pc, #16]	; (17844 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   17832:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   17836:	e7f4      	b.n	17822 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x26>
			fvc.StartControlling(data);
   17838:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   1783c:	4801      	ldr	r0, [pc, #4]	; (17844 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
   1783e:	4b02      	ldr	r3, [pc, #8]	; (17848 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x4c>)
   17840:	4798      	blx	r3
   17842:	e7f4      	b.n	1782e <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x32>
   17844:	20005598 	.word	0x20005598
   17848:	00016471 	.word	0x00016471

0001784c <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
   1784c:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
   1784e:	0855      	lsrs	r5, r2, #1
   17850:	d007      	beq.n	17862 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
   17852:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
   17854:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
   17858:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
   1785a:	3401      	adds	r4, #1
   1785c:	b2a4      	uxth	r4, r4
   1785e:	42ac      	cmp	r4, r5
   17860:	dbf8      	blt.n	17854 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
   17862:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
   17866:	bf1d      	ittte	ne
   17868:	189b      	addne	r3, r3, r2
   1786a:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
   1786e:	4048      	eorne	r0, r1
   17870:	4608      	moveq	r0, r1

	return checksum;
	}
   17872:	bc30      	pop	{r4, r5}
   17874:	4770      	bx	lr
	...

00017878 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
   17878:	b538      	push	{r3, r4, r5, lr}
   1787a:	4604      	mov	r4, r0
	checksum=0;
   1787c:	2500      	movs	r5, #0
   1787e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
	checksum = calculateChecksum(0, sizeof(header), &header);
   17882:	460b      	mov	r3, r1
   17884:	2206      	movs	r2, #6
   17886:	4629      	mov	r1, r5
   17888:	4d02      	ldr	r5, [pc, #8]	; (17894 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
   1788a:	47a8      	blx	r5
   1788c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
	}
   17890:	bd38      	pop	{r3, r4, r5, pc}
   17892:	bf00      	nop
   17894:	0001784d 	.word	0x0001784d

00017898 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
   17898:	4b06      	ldr	r3, [pc, #24]	; (178b4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
   1789a:	681b      	ldr	r3, [r3, #0]
   1789c:	600b      	str	r3, [r1, #0]
   1789e:	4b06      	ldr	r3, [pc, #24]	; (178b8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
   178a0:	681b      	ldr	r3, [r3, #0]
   178a2:	604b      	str	r3, [r1, #4]
   178a4:	4b05      	ldr	r3, [pc, #20]	; (178bc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
   178a6:	681b      	ldr	r3, [r3, #0]
   178a8:	608b      	str	r3, [r1, #8]
   178aa:	4b05      	ldr	r3, [pc, #20]	; (178c0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
   178ac:	681b      	ldr	r3, [r3, #0]
   178ae:	60cb      	str	r3, [r1, #12]
   178b0:	4770      	bx	lr
   178b2:	bf00      	nop
   178b4:	41002018 	.word	0x41002018
   178b8:	4100201c 	.word	0x4100201c
   178bc:	41002020 	.word	0x41002020
   178c0:	41002024 	.word	0x41002024

000178c4 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
   178c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178c6:	4604      	mov	r4, r0
	ticks=0;
   178c8:	2600      	movs	r6, #0
   178ca:	6106      	str	r6, [r0, #16]
	interfaceTimer.Init();
   178cc:	480f      	ldr	r0, [pc, #60]	; (1790c <_ZN16Maintenance_Tool4InitEv+0x48>)
   178ce:	4b10      	ldr	r3, [pc, #64]	; (17910 <_ZN16Maintenance_Tool4InitEv+0x4c>)
   178d0:	4798      	blx	r3
	InitCommandHandler(localBuffer);
   178d2:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   178d6:	4620      	mov	r0, r4
   178d8:	4b0e      	ldr	r3, [pc, #56]	; (17914 <_ZN16Maintenance_Tool4InitEv+0x50>)
   178da:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
   178dc:	f104 05d7 	add.w	r5, r4, #215	; 0xd7
   178e0:	4629      	mov	r1, r5
   178e2:	4620      	mov	r0, r4
   178e4:	4b0c      	ldr	r3, [pc, #48]	; (17918 <_ZN16Maintenance_Tool4InitEv+0x54>)
   178e6:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
   178e8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   178ec:	f8d4 70d7 	ldr.w	r7, [r4, #215]	; 0xd7
   178f0:	f8d4 00db 	ldr.w	r0, [r4, #219]	; 0xdb
   178f4:	f8d4 10df 	ldr.w	r1, [r4, #223]	; 0xdf
   178f8:	f8d4 20e3 	ldr.w	r2, [r4, #227]	; 0xe3
   178fc:	601f      	str	r7, [r3, #0]
   178fe:	6058      	str	r0, [r3, #4]
   17900:	6099      	str	r1, [r3, #8]
   17902:	60da      	str	r2, [r3, #12]
	gotAccess=false;
   17904:	7566      	strb	r6, [r4, #21]
}
   17906:	2001      	movs	r0, #1
   17908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1790a:	bf00      	nop
   1790c:	20005980 	.word	0x20005980
   17910:	00013df5 	.word	0x00013df5
   17914:	00017e69 	.word	0x00017e69
   17918:	00017899 	.word	0x00017899

0001791c <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
   1791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   17920:	4c27      	ldr	r4, [pc, #156]	; (179c0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xa4>)
   17922:	f504 75d4 	add.w	r5, r4, #424	; 0x1a8
   17926:	4927      	ldr	r1, [pc, #156]	; (179c4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xa8>)
   17928:	4628      	mov	r0, r5
   1792a:	4f27      	ldr	r7, [pc, #156]	; (179c8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xac>)
   1792c:	47b8      	blx	r7
   1792e:	4e27      	ldr	r6, [pc, #156]	; (179cc <_GLOBAL__sub_I_ptrMaintenanceTool+0xb0>)
   17930:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 179f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>
   17934:	4632      	mov	r2, r6
   17936:	4641      	mov	r1, r8
   17938:	4628      	mov	r0, r5
   1793a:	4d25      	ldr	r5, [pc, #148]	; (179d0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xb4>)
   1793c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   1793e:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
   17942:	4924      	ldr	r1, [pc, #144]	; (179d4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xb8>)
   17944:	4648      	mov	r0, r9
   17946:	47b8      	blx	r7
   17948:	4632      	mov	r2, r6
   1794a:	4641      	mov	r1, r8
   1794c:	4648      	mov	r0, r9
   1794e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   17950:	f504 79f4 	add.w	r9, r4, #488	; 0x1e8
   17954:	4920      	ldr	r1, [pc, #128]	; (179d8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xbc>)
   17956:	4648      	mov	r0, r9
   17958:	47b8      	blx	r7
   1795a:	4632      	mov	r2, r6
   1795c:	4641      	mov	r1, r8
   1795e:	4648      	mov	r0, r9
   17960:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   17962:	f504 7902 	add.w	r9, r4, #520	; 0x208
   17966:	491d      	ldr	r1, [pc, #116]	; (179dc <_GLOBAL__sub_I_ptrMaintenanceTool+0xc0>)
   17968:	4648      	mov	r0, r9
   1796a:	47b8      	blx	r7
   1796c:	4632      	mov	r2, r6
   1796e:	4641      	mov	r1, r8
   17970:	4648      	mov	r0, r9
   17972:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   17974:	f504 790a 	add.w	r9, r4, #552	; 0x228
   17978:	4919      	ldr	r1, [pc, #100]	; (179e0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xc4>)
   1797a:	4648      	mov	r0, r9
   1797c:	47b8      	blx	r7
   1797e:	4632      	mov	r2, r6
   17980:	4641      	mov	r1, r8
   17982:	4648      	mov	r0, r9
   17984:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   17986:	f504 7912 	add.w	r9, r4, #584	; 0x248
   1798a:	4916      	ldr	r1, [pc, #88]	; (179e4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xc8>)
   1798c:	4648      	mov	r0, r9
   1798e:	47b8      	blx	r7
   17990:	4632      	mov	r2, r6
   17992:	4641      	mov	r1, r8
   17994:	4648      	mov	r0, r9
   17996:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   17998:	f504 79a4 	add.w	r9, r4, #328	; 0x148
   1799c:	4912      	ldr	r1, [pc, #72]	; (179e8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
   1799e:	4648      	mov	r0, r9
   179a0:	47b8      	blx	r7
   179a2:	4632      	mov	r2, r6
   179a4:	4641      	mov	r1, r8
   179a6:	4648      	mov	r0, r9
   179a8:	47a8      	blx	r5
   179aa:	3404      	adds	r4, #4
   179ac:	4620      	mov	r0, r4
   179ae:	4b0f      	ldr	r3, [pc, #60]	; (179ec <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
   179b0:	4798      	blx	r3
   179b2:	4632      	mov	r2, r6
   179b4:	490e      	ldr	r1, [pc, #56]	; (179f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
   179b6:	4620      	mov	r0, r4
   179b8:	47a8      	blx	r5
   179ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   179be:	bf00      	nop
   179c0:	20005838 	.word	0x20005838
   179c4:	2000d6d8 	.word	0x2000d6d8
   179c8:	00013d09 	.word	0x00013d09
   179cc:	20000000 	.word	0x20000000
   179d0:	0001a44d 	.word	0x0001a44d
   179d4:	2000d76c 	.word	0x2000d76c
   179d8:	2000d870 	.word	0x2000d870
   179dc:	2000d78c 	.word	0x2000d78c
   179e0:	2000d830 	.word	0x2000d830
   179e4:	2000d850 	.word	0x2000d850
   179e8:	2000d748 	.word	0x2000d748
   179ec:	00017599 	.word	0x00017599
   179f0:	0001754d 	.word	0x0001754d
   179f4:	00013d41 	.word	0x00013d41

000179f8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
   179f8:	b538      	push	{r3, r4, r5, lr}
   179fa:	4605      	mov	r5, r0
   179fc:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
   179fe:	4b05      	ldr	r3, [pc, #20]	; (17a14 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
   17a00:	4798      	blx	r3
   17a02:	f8a5 00d0 	strh.w	r0, [r5, #208]	; 0xd0
	usb.writeData(&header, sizeof(header));
   17a06:	2206      	movs	r2, #6
   17a08:	4621      	mov	r1, r4
   17a0a:	4803      	ldr	r0, [pc, #12]	; (17a18 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
   17a0c:	4b03      	ldr	r3, [pc, #12]	; (17a1c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
   17a0e:	4798      	blx	r3
   17a10:	bd38      	pop	{r3, r4, r5, pc}
   17a12:	bf00      	nop
   17a14:	00017879 	.word	0x00017879
   17a18:	20003884 	.word	0x20003884
   17a1c:	0001469d 	.word	0x0001469d

00017a20 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
   17a20:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
   17a22:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17a26:	2b48      	cmp	r3, #72	; 0x48
   17a28:	bf0c      	ite	eq
   17a2a:	2501      	moveq	r5, #1
   17a2c:	2500      	movne	r5, #0
		if (result){
   17a2e:	d001      	beq.n	17a34 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
   17a30:	4628      	mov	r0, r5
   17a32:	bd38      	pop	{r3, r4, r5, pc}
   17a34:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
   17a36:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   17a3a:	4812      	ldr	r0, [pc, #72]	; (17a84 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
   17a3c:	4b12      	ldr	r3, [pc, #72]	; (17a88 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
   17a3e:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
   17a40:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17a44:	4a11      	ldr	r2, [pc, #68]	; (17a8c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
   17a46:	601a      	str	r2, [r3, #0]
   17a48:	2200      	movs	r2, #0
   17a4a:	711a      	strb	r2, [r3, #4]
   17a4c:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
   17a4e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17a52:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
   17a56:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
   17a58:	4b0d      	ldr	r3, [pc, #52]	; (17a90 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
   17a5a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   17a5e:	b15b      	cbz	r3, 17a78 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
   17a60:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17a64:	f894 20d5 	ldrb.w	r2, [r4, #213]	; 0xd5
   17a68:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   17a6a:	2240      	movs	r2, #64	; 0x40
   17a6c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   17a70:	4808      	ldr	r0, [pc, #32]	; (17a94 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
   17a72:	4b09      	ldr	r3, [pc, #36]	; (17a98 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
   17a74:	4798      	blx	r3
   17a76:	e7db      	b.n	17a30 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
   17a78:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17a7c:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
   17a80:	721a      	strb	r2, [r3, #8]
   17a82:	e7f2      	b.n	17a6a <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
   17a84:	20006c64 	.word	0x20006c64
   17a88:	00018129 	.word	0x00018129
   17a8c:	61626364 	.word	0x61626364
   17a90:	20005598 	.word	0x20005598
   17a94:	20003884 	.word	0x20003884
   17a98:	00014735 	.word	0x00014735

00017a9c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
   17a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
   17a9e:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17aa2:	2b4a      	cmp	r3, #74	; 0x4a
   17aa4:	bf0c      	ite	eq
   17aa6:	2501      	moveq	r5, #1
   17aa8:	2500      	movne	r5, #0
	if (result){
   17aaa:	d001      	beq.n	17ab0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
   17aac:	4628      	mov	r0, r5
   17aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ab0:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
   17ab2:	4f11      	ldr	r7, [pc, #68]	; (17af8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
   17ab4:	4638      	mov	r0, r7
   17ab6:	4b11      	ldr	r3, [pc, #68]	; (17afc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
   17ab8:	4798      	blx	r3
   17aba:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
   17abc:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17ac0:	4a0f      	ldr	r2, [pc, #60]	; (17b00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
   17ac2:	601a      	str	r2, [r3, #0]
   17ac4:	2200      	movs	r2, #0
   17ac6:	711a      	strb	r2, [r3, #4]
   17ac8:	224a      	movs	r2, #74	; 0x4a
   17aca:	715a      	strb	r2, [r3, #5]
   17acc:	7198      	strb	r0, [r3, #6]
			if (!heater.heaterStatusChanged)
   17ace:	787b      	ldrb	r3, [r7, #1]
   17ad0:	b15b      	cbz	r3, 17aea <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4e>
			singleTaskMessage=singleTask;
   17ad2:	4b0b      	ldr	r3, [pc, #44]	; (17b00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
   17ad4:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   17ad8:	2200      	movs	r2, #0
   17ada:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
   17ade:	234a      	movs	r3, #74	; 0x4a
   17ae0:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   17ae4:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
   17ae8:	e7e0      	b.n	17aac <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   17aea:	2240      	movs	r2, #64	; 0x40
   17aec:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   17af0:	4804      	ldr	r0, [pc, #16]	; (17b04 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
   17af2:	4b05      	ldr	r3, [pc, #20]	; (17b08 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
   17af4:	4798      	blx	r3
   17af6:	e7ec      	b.n	17ad2 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x36>
   17af8:	20005814 	.word	0x20005814
   17afc:	000171e5 	.word	0x000171e5
   17b00:	61626364 	.word	0x61626364
   17b04:	20003884 	.word	0x20003884
   17b08:	00014735 	.word	0x00014735

00017b0c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv>:
bool Maintenance_Tool::CommandReadFlapperData(){
   17b0c:	b570      	push	{r4, r5, r6, lr}
	bool	result(header.task == kHVACReadPositionFlapperValve);
   17b0e:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17b12:	2b4e      	cmp	r3, #78	; 0x4e
   17b14:	bf0c      	ite	eq
   17b16:	2501      	moveq	r5, #1
   17b18:	2500      	movne	r5, #0
	if (result){
   17b1a:	d001      	beq.n	17b20 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x14>
}
   17b1c:	4628      	mov	r0, r5
   17b1e:	bd70      	pop	{r4, r5, r6, pc}
   17b20:	4604      	mov	r4, r0
		fvc.UpdateFlapperValveData();
   17b22:	4e0f      	ldr	r6, [pc, #60]	; (17b60 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x54>)
   17b24:	4630      	mov	r0, r6
   17b26:	4b0f      	ldr	r3, [pc, #60]	; (17b64 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x58>)
   17b28:	4798      	blx	r3
		CreateFullBufferMessage(localBuffer,(uint8_t*)&fvc.dataStruct);
   17b2a:	6823      	ldr	r3, [r4, #0]
   17b2c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   17b30:	f106 0280 	add.w	r2, r6, #128	; 0x80
   17b34:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   17b38:	4420      	add	r0, r4
   17b3a:	4b0b      	ldr	r3, [pc, #44]	; (17b68 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x5c>)
   17b3c:	4798      	blx	r3
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   17b3e:	2240      	movs	r2, #64	; 0x40
   17b40:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   17b44:	4809      	ldr	r0, [pc, #36]	; (17b6c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x60>)
   17b46:	4b0a      	ldr	r3, [pc, #40]	; (17b70 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x64>)
   17b48:	4798      	blx	r3
		singleTaskMessage=singleTask;
   17b4a:	4b0a      	ldr	r3, [pc, #40]	; (17b74 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x68>)
   17b4c:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   17b50:	2300      	movs	r3, #0
   17b52:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   17b56:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   17b5a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   17b5e:	e7dd      	b.n	17b1c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x10>
   17b60:	20005598 	.word	0x20005598
   17b64:	00016651 	.word	0x00016651
   17b68:	00018099 	.word	0x00018099
   17b6c:	20003884 	.word	0x20003884
   17b70:	00014735 	.word	0x00014735
   17b74:	61626364 	.word	0x61626364

00017b78 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
   17b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
   17b7c:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17b80:	2b4d      	cmp	r3, #77	; 0x4d
   17b82:	bf0c      	ite	eq
   17b84:	2501      	moveq	r5, #1
   17b86:	2500      	movne	r5, #0
	if (result){
   17b88:	d002      	beq.n	17b90 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
   17b8a:	4628      	mov	r0, r5
   17b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
   17b90:	4b18      	ldr	r3, [pc, #96]	; (17bf4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
   17b92:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
   17b96:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17b9a:	4a17      	ldr	r2, [pc, #92]	; (17bf8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
   17b9c:	601a      	str	r2, [r3, #0]
   17b9e:	2200      	movs	r2, #0
   17ba0:	711a      	strb	r2, [r3, #4]
   17ba2:	224d      	movs	r2, #77	; 0x4d
   17ba4:	715a      	strb	r2, [r3, #5]
   17ba6:	f883 8006 	strb.w	r8, [r3, #6]
   17baa:	2307      	movs	r3, #7
   17bac:	4911      	ldr	r1, [pc, #68]	; (17bf4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
   17bae:	f103 0261 	add.w	r2, r3, #97	; 0x61
   17bb2:	440a      	add	r2, r1
   17bb4:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
   17bb8:	f852 4f04 	ldr.w	r4, [r2, #4]!
   17bbc:	f8d0 60fc 	ldr.w	r6, [r0, #252]	; 0xfc
   17bc0:	50f4      	str	r4, [r6, r3]
   17bc2:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
   17bc4:	42bb      	cmp	r3, r7
   17bc6:	d1f7      	bne.n	17bb8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
   17bc8:	2b37      	cmp	r3, #55	; 0x37
   17bca:	d1f0      	bne.n	17bae <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
   17bcc:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   17bce:	2240      	movs	r2, #64	; 0x40
   17bd0:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
   17bd4:	4809      	ldr	r0, [pc, #36]	; (17bfc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
   17bd6:	4b0a      	ldr	r3, [pc, #40]	; (17c00 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
   17bd8:	4798      	blx	r3
		singleTaskMessage=singleTask;
   17bda:	4b07      	ldr	r3, [pc, #28]	; (17bf8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
   17bdc:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
   17be0:	2200      	movs	r2, #0
   17be2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
   17be6:	234d      	movs	r3, #77	; 0x4d
   17be8:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   17bec:	f884 80f8 	strb.w	r8, [r4, #248]	; 0xf8
   17bf0:	e7cb      	b.n	17b8a <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
   17bf2:	bf00      	nop
   17bf4:	2000d118 	.word	0x2000d118
   17bf8:	61626364 	.word	0x61626364
   17bfc:	20003884 	.word	0x20003884
   17c00:	00014735 	.word	0x00014735

00017c04 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
   17c04:	b570      	push	{r4, r5, r6, lr}
   17c06:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
   17c08:	f100 0568 	add.w	r5, r0, #104	; 0x68
   17c0c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17c10:	681a      	ldr	r2, [r3, #0]
   17c12:	6682      	str	r2, [r0, #104]	; 0x68
   17c14:	889b      	ldrh	r3, [r3, #4]
   17c16:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
   17c18:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   17c1c:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
   17c1e:	b2db      	uxtb	r3, r3
   17c20:	2b16      	cmp	r3, #22
   17c22:	d817      	bhi.n	17c54 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x50>
		gotTask=true;
   17c24:	2301      	movs	r3, #1
   17c26:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
		result=gotTask;
   17c2a:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
		switch (header.task)
   17c2e:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   17c32:	3b41      	subs	r3, #65	; 0x41
   17c34:	2b16      	cmp	r3, #22
   17c36:	d878      	bhi.n	17d2a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x126>
   17c38:	e8df f003 	tbb	[pc, r3]
   17c3c:	2c1c261f 	.word	0x2c1c261f
   17c40:	3b351c1c 	.word	0x3b351c1c
   17c44:	534d4741 	.word	0x534d4741
   17c48:	716b655f 	.word	0x716b655f
   17c4c:	1c1c1c59 	.word	0x1c1c1c59
   17c50:	7777      	.short	0x7777
   17c52:	1c          	.byte	0x1c
   17c53:	00          	.byte	0x00
		gotTask=false;
   17c54:	2300      	movs	r3, #0
   17c56:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
   17c5a:	4e36      	ldr	r6, [pc, #216]	; (17d34 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
   17c5c:	2240      	movs	r2, #64	; 0x40
   17c5e:	f100 01fc 	add.w	r1, r0, #252	; 0xfc
   17c62:	4630      	mov	r0, r6
   17c64:	4b34      	ldr	r3, [pc, #208]	; (17d38 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
   17c66:	4798      	blx	r3
		result=usb.rxReady;
   17c68:	7d73      	ldrb	r3, [r6, #21]
   17c6a:	b2db      	uxtb	r3, r3
   17c6c:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (result)
   17c70:	2b00      	cmp	r3, #0
   17c72:	d1dc      	bne.n	17c2e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2a>
	}
   17c74:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   17c78:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
   17c7a:	4629      	mov	r1, r5
   17c7c:	4620      	mov	r0, r4
   17c7e:	4b2f      	ldr	r3, [pc, #188]	; (17d3c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
   17c80:	4798      	blx	r3
   17c82:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17c86:	e7f5      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
	maintenanceIsConnected = false;
   17c88:	2300      	movs	r3, #0
   17c8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	bSendNotifications = false;
   17c8e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
				break;
   17c92:	e7ef      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				notifyGAINCommandReceived( header, result);
   17c94:	2201      	movs	r2, #1
   17c96:	4629      	mov	r1, r5
   17c98:	4620      	mov	r0, r4
   17c9a:	4b29      	ldr	r3, [pc, #164]	; (17d40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
   17c9c:	4798      	blx	r3
				result = handleGAINCommandReset(header);
   17c9e:	2301      	movs	r3, #1
   17ca0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   17ca4:	e7e6      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandWriteParameters();
   17ca6:	4620      	mov	r0, r4
   17ca8:	4b26      	ldr	r3, [pc, #152]	; (17d44 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
   17caa:	4798      	blx	r3
   17cac:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cb0:	e7e0      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadParameters();
   17cb2:	4620      	mov	r0, r4
   17cb4:	4b24      	ldr	r3, [pc, #144]	; (17d48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
   17cb6:	4798      	blx	r3
   17cb8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cbc:	e7da      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetHeaters();
   17cbe:	4620      	mov	r0, r4
   17cc0:	4b22      	ldr	r3, [pc, #136]	; (17d4c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
   17cc2:	4798      	blx	r3
   17cc4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cc8:	e7d4      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadHeaterStatus();
   17cca:	4620      	mov	r0, r4
   17ccc:	4b20      	ldr	r3, [pc, #128]	; (17d50 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
   17cce:	4798      	blx	r3
   17cd0:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cd4:	e7ce      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetEnableFans();
   17cd6:	4620      	mov	r0, r4
   17cd8:	4b1e      	ldr	r3, [pc, #120]	; (17d54 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
   17cda:	4798      	blx	r3
   17cdc:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17ce0:	e7c8      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetPWMFans();
   17ce2:	4620      	mov	r0, r4
   17ce4:	4b1c      	ldr	r3, [pc, #112]	; (17d58 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
   17ce6:	4798      	blx	r3
   17ce8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cec:	e7c2      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandFansStatus();
   17cee:	4620      	mov	r0, r4
   17cf0:	4b1a      	ldr	r3, [pc, #104]	; (17d5c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
   17cf2:	4798      	blx	r3
   17cf4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17cf8:	e7bc      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadTemmperatures();
   17cfa:	4620      	mov	r0, r4
   17cfc:	4b18      	ldr	r3, [pc, #96]	; (17d60 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
   17cfe:	4798      	blx	r3
   17d00:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17d04:	e7b6      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadFlapperData();
   17d06:	4620      	mov	r0, r4
   17d08:	4b16      	ldr	r3, [pc, #88]	; (17d64 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
   17d0a:	4798      	blx	r3
   17d0c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17d10:	e7b0      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperValve();
   17d12:	4620      	mov	r0, r4
   17d14:	4b14      	ldr	r3, [pc, #80]	; (17d68 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
   17d16:	4798      	blx	r3
   17d18:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17d1c:	e7aa      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperPosition();
   17d1e:	4620      	mov	r0, r4
   17d20:	4b12      	ldr	r3, [pc, #72]	; (17d6c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
   17d22:	4798      	blx	r3
   17d24:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17d28:	e7a4      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = false;
   17d2a:	2300      	movs	r3, #0
   17d2c:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   17d30:	e7a0      	b.n	17c74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
   17d32:	bf00      	nop
   17d34:	20003884 	.word	0x20003884
   17d38:	000145b1 	.word	0x000145b1
   17d3c:	000176f9 	.word	0x000176f9
   17d40:	000179f9 	.word	0x000179f9
   17d44:	00017711 	.word	0x00017711
   17d48:	00017a21 	.word	0x00017a21
   17d4c:	00017741 	.word	0x00017741
   17d50:	00017a9d 	.word	0x00017a9d
   17d54:	00017ef1 	.word	0x00017ef1
   17d58:	00017f1d 	.word	0x00017f1d
   17d5c:	00018025 	.word	0x00018025
   17d60:	00017b79 	.word	0x00017b79
   17d64:	00017b0d 	.word	0x00017b0d
   17d68:	000177b1 	.word	0x000177b1
   17d6c:	000177fd 	.word	0x000177fd

00017d70 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
   17d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d72:	4604      	mov	r4, r0
	result=false;
   17d74:	2300      	movs	r3, #0
   17d76:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	if (gotAccess)
   17d7a:	7d43      	ldrb	r3, [r0, #21]
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d04c      	beq.n	17e1a <_ZN16Maintenance_Tool19handleCommunicationEv+0xaa>
		if (usb.rxReady)
   17d80:	4b28      	ldr	r3, [pc, #160]	; (17e24 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
   17d82:	7d5b      	ldrb	r3, [r3, #21]
   17d84:	b95b      	cbnz	r3, 17d9e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
   17d86:	2300      	movs	r3, #0
   17d88:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   17d8c:	2240      	movs	r2, #64	; 0x40
   17d8e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   17d92:	4824      	ldr	r0, [pc, #144]	; (17e24 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
   17d94:	4b24      	ldr	r3, [pc, #144]	; (17e28 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
   17d96:	4798      	blx	r3
	}
   17d98:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   17d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
   17d9e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   17da2:	681a      	ldr	r2, [r3, #0]
   17da4:	6682      	str	r2, [r0, #104]	; 0x68
   17da6:	889b      	ldrh	r3, [r3, #4]
   17da8:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
			switch (input){
   17dac:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   17db0:	2b3d      	cmp	r3, #61	; 0x3d
   17db2:	d017      	beq.n	17de4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x74>
   17db4:	2b3e      	cmp	r3, #62	; 0x3e
   17db6:	d010      	beq.n	17dda <_ZN16Maintenance_Tool19handleCommunicationEv+0x6a>
   17db8:	2b3c      	cmp	r3, #60	; 0x3c
   17dba:	d003      	beq.n	17dc4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
					gotCommand=false;
   17dbc:	2300      	movs	r3, #0
   17dbe:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
				break;
   17dc2:	e006      	b.n	17dd2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x62>
					gotCommand=true;
   17dc4:	2301      	movs	r3, #1
   17dc6:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
					result = handleHVACTask();
   17dca:	4b18      	ldr	r3, [pc, #96]	; (17e2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
   17dcc:	4798      	blx	r3
   17dce:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
			ClearLocalBuffer();
   17dd2:	4620      	mov	r0, r4
   17dd4:	4b16      	ldr	r3, [pc, #88]	; (17e30 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
   17dd6:	4798      	blx	r3
   17dd8:	e7d8      	b.n	17d8c <_ZN16Maintenance_Tool19handleCommunicationEv+0x1c>
					result = handleHVACTask();
   17dda:	4b14      	ldr	r3, [pc, #80]	; (17e2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
   17ddc:	4798      	blx	r3
   17dde:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
   17de2:	e7f6      	b.n	17dd2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x62>
					is_MTPC_Beaming=true;
   17de4:	2501      	movs	r5, #1
   17de6:	7505      	strb	r5, [r0, #20]
					interfaceTimer.Stop();
   17de8:	4e12      	ldr	r6, [pc, #72]	; (17e34 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
   17dea:	4630      	mov	r0, r6
   17dec:	4b12      	ldr	r3, [pc, #72]	; (17e38 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
   17dee:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
   17df0:	4f12      	ldr	r7, [pc, #72]	; (17e3c <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
   17df2:	4639      	mov	r1, r7
   17df4:	4630      	mov	r0, r6
   17df6:	4b12      	ldr	r3, [pc, #72]	; (17e40 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
   17df8:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
   17dfa:	f242 7210 	movw	r2, #10000	; 0x2710
   17dfe:	4639      	mov	r1, r7
   17e00:	4630      	mov	r0, r6
   17e02:	4b10      	ldr	r3, [pc, #64]	; (17e44 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
   17e04:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
   17e06:	2300      	movs	r3, #0
   17e08:	61a3      	str	r3, [r4, #24]
					maintenanceIsConnected = true;
   17e0a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
					bSendNotifications = true;
   17e0e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
					result=is_MTPC_Beaming;
   17e12:	7d23      	ldrb	r3, [r4, #20]
   17e14:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
   17e18:	e7db      	b.n	17dd2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x62>
		gotCommand=false;
   17e1a:	2300      	movs	r3, #0
   17e1c:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
   17e20:	e7ba      	b.n	17d98 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
   17e22:	bf00      	nop
   17e24:	20003884 	.word	0x20003884
   17e28:	000145b1 	.word	0x000145b1
   17e2c:	00017c05 	.word	0x00017c05
   17e30:	000176dd 	.word	0x000176dd
   17e34:	20005980 	.word	0x20005980
   17e38:	00013e69 	.word	0x00013e69
   17e3c:	0001753d 	.word	0x0001753d
   17e40:	00013f85 	.word	0x00013f85
   17e44:	00013ff5 	.word	0x00013ff5

00017e48 <_ZN16Commands_HandlerC2Ev>:
#include "string.h"
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"

// default constructor
Commands_Handler::Commands_Handler()
   17e48:	680a      	ldr	r2, [r1, #0]
   17e4a:	6002      	str	r2, [r0, #0]
   17e4c:	2264      	movs	r2, #100	; 0x64
   17e4e:	7102      	strb	r2, [r0, #4]
   17e50:	2263      	movs	r2, #99	; 0x63
   17e52:	7142      	strb	r2, [r0, #5]
   17e54:	2262      	movs	r2, #98	; 0x62
   17e56:	7182      	strb	r2, [r0, #6]
   17e58:	2261      	movs	r2, #97	; 0x61
   17e5a:	71c2      	strb	r2, [r0, #7]
   17e5c:	2200      	movs	r2, #0
   17e5e:	7242      	strb	r2, [r0, #9]
{
	
} //Commands_Handler
   17e60:	4770      	bx	lr

00017e62 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
   17e62:	680b      	ldr	r3, [r1, #0]
   17e64:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
   17e66:	4770      	bx	lr

00017e68 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
   17e68:	60c1      	str	r1, [r0, #12]
   17e6a:	4770      	bx	lr

00017e6c <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
   17e6c:	b510      	push	{r4, lr}
   17e6e:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
   17e70:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
   17e74:	bf14      	ite	ne
   17e76:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
   17e78:	2100      	moveq	r1, #0
   17e7a:	4b03      	ldr	r3, [pc, #12]	; (17e88 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
   17e7c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   17e7e:	4b03      	ldr	r3, [pc, #12]	; (17e8c <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
   17e80:	4798      	blx	r3
	}
	return data;
}
   17e82:	4620      	mov	r0, r4
   17e84:	bd10      	pop	{r4, pc}
   17e86:	bf00      	nop
   17e88:	20003b28 	.word	0x20003b28
   17e8c:	00015239 	.word	0x00015239

00017e90 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
   17e90:	b538      	push	{r3, r4, r5, lr}
   17e92:	4605      	mov	r5, r0
   17e94:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
   17e96:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
   17e9a:	bf14      	ite	ne
   17e9c:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
   17e9e:	2100      	moveq	r1, #0
   17ea0:	4b04      	ldr	r3, [pc, #16]	; (17eb4 <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
   17ea2:	6e18      	ldr	r0, [r3, #96]	; 0x60
   17ea4:	4b04      	ldr	r3, [pc, #16]	; (17eb8 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
   17ea6:	4798      	blx	r3
	return SetEnableFan1(data);
   17ea8:	4621      	mov	r1, r4
   17eaa:	4628      	mov	r0, r5
   17eac:	4b03      	ldr	r3, [pc, #12]	; (17ebc <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
   17eae:	4798      	blx	r3
}
   17eb0:	bd38      	pop	{r3, r4, r5, pc}
   17eb2:	bf00      	nop
   17eb4:	20003b28 	.word	0x20003b28
   17eb8:	00015239 	.word	0x00015239
   17ebc:	00017e6d 	.word	0x00017e6d

00017ec0 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
   17ec0:	b538      	push	{r3, r4, r5, lr}
   17ec2:	4605      	mov	r5, r0
   17ec4:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
   17ec6:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
   17eca:	bf14      	ite	ne
   17ecc:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
   17ece:	2100      	moveq	r1, #0
   17ed0:	4b04      	ldr	r3, [pc, #16]	; (17ee4 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
   17ed2:	6e58      	ldr	r0, [r3, #100]	; 0x64
   17ed4:	4b04      	ldr	r3, [pc, #16]	; (17ee8 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
   17ed6:	4798      	blx	r3
	return SetEnableFan2(data);
   17ed8:	4621      	mov	r1, r4
   17eda:	4628      	mov	r0, r5
   17edc:	4b03      	ldr	r3, [pc, #12]	; (17eec <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
   17ede:	4798      	blx	r3
}
   17ee0:	bd38      	pop	{r3, r4, r5, pc}
   17ee2:	bf00      	nop
   17ee4:	20003b28 	.word	0x20003b28
   17ee8:	00014eb9 	.word	0x00014eb9
   17eec:	00017e91 	.word	0x00017e91

00017ef0 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
   17ef0:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
   17ef2:	68c3      	ldr	r3, [r0, #12]
   17ef4:	6819      	ldr	r1, [r3, #0]
   17ef6:	6041      	str	r1, [r0, #4]
   17ef8:	8899      	ldrh	r1, [r3, #4]
   17efa:	799b      	ldrb	r3, [r3, #6]
   17efc:	8101      	strh	r1, [r0, #8]
   17efe:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
   17f00:	7a43      	ldrb	r3, [r0, #9]
   17f02:	2b4b      	cmp	r3, #75	; 0x4b
   17f04:	bf0c      	ite	eq
   17f06:	2401      	moveq	r4, #1
   17f08:	2400      	movne	r4, #0
	if (result){
   17f0a:	d001      	beq.n	17f10 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
   17f0c:	4620      	mov	r0, r4
   17f0e:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
   17f10:	7a81      	ldrb	r1, [r0, #10]
   17f12:	4b01      	ldr	r3, [pc, #4]	; (17f18 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
   17f14:	4798      	blx	r3
   17f16:	e7f9      	b.n	17f0c <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
   17f18:	00017ec1 	.word	0x00017ec1

00017f1c <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
   17f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
   17f1e:	68c3      	ldr	r3, [r0, #12]
   17f20:	6819      	ldr	r1, [r3, #0]
   17f22:	6041      	str	r1, [r0, #4]
   17f24:	8899      	ldrh	r1, [r3, #4]
   17f26:	799b      	ldrb	r3, [r3, #6]
   17f28:	8101      	strh	r1, [r0, #8]
   17f2a:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == 	kHVACCommandSetPWMFans);
   17f2c:	7a43      	ldrb	r3, [r0, #9]
   17f2e:	2b4c      	cmp	r3, #76	; 0x4c
   17f30:	bf0c      	ite	eq
   17f32:	2401      	moveq	r4, #1
   17f34:	2400      	movne	r4, #0
	if (result){
   17f36:	d001      	beq.n	17f3c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x20>
		}else{

	}
	
	return result;
}
   17f38:	4620      	mov	r0, r4
   17f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
   17f3c:	7a85      	ldrb	r5, [r0, #10]
		if (data>0)
   17f3e:	2d00      	cmp	r5, #0
   17f40:	d0fa      	beq.n	17f38 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
			fans.evaporator[0]->SetPWM(data);
   17f42:	4e06      	ldr	r6, [pc, #24]	; (17f5c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x40>)
   17f44:	4629      	mov	r1, r5
   17f46:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   17f48:	4f05      	ldr	r7, [pc, #20]	; (17f60 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x44>)
   17f4a:	47b8      	blx	r7
			fans.evaporator[1]->SetPWM(data);
   17f4c:	4629      	mov	r1, r5
   17f4e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   17f50:	47b8      	blx	r7
			fans.condesator->SetPWM(data);
   17f52:	4629      	mov	r1, r5
   17f54:	6e70      	ldr	r0, [r6, #100]	; 0x64
   17f56:	4b03      	ldr	r3, [pc, #12]	; (17f64 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x48>)
   17f58:	4798      	blx	r3
   17f5a:	e7ed      	b.n	17f38 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
   17f5c:	20003b28 	.word	0x20003b28
   17f60:	0001525d 	.word	0x0001525d
   17f64:	00014ee9 	.word	0x00014ee9

00017f68 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:

		
	}
	
	return result;
   17f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   17f6c:	4c21      	ldr	r4, [pc, #132]	; (17ff4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0x8c>)
   17f6e:	4922      	ldr	r1, [pc, #136]	; (17ff8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0x90>)
   17f70:	4620      	mov	r0, r4
   17f72:	4e22      	ldr	r6, [pc, #136]	; (17ffc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0x94>)
   17f74:	47b0      	blx	r6
   17f76:	4f22      	ldr	r7, [pc, #136]	; (18000 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0x98>)
   17f78:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 18020 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>
   17f7c:	463a      	mov	r2, r7
   17f7e:	4641      	mov	r1, r8
   17f80:	4620      	mov	r0, r4
   17f82:	4d20      	ldr	r5, [pc, #128]	; (18004 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0x9c>)
   17f84:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   17f86:	f104 0920 	add.w	r9, r4, #32
   17f8a:	491f      	ldr	r1, [pc, #124]	; (18008 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa0>)
   17f8c:	4648      	mov	r0, r9
   17f8e:	47b0      	blx	r6
   17f90:	463a      	mov	r2, r7
   17f92:	4641      	mov	r1, r8
   17f94:	4648      	mov	r0, r9
   17f96:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   17f98:	f104 0940 	add.w	r9, r4, #64	; 0x40
   17f9c:	491b      	ldr	r1, [pc, #108]	; (1800c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa4>)
   17f9e:	4648      	mov	r0, r9
   17fa0:	47b0      	blx	r6
   17fa2:	463a      	mov	r2, r7
   17fa4:	4641      	mov	r1, r8
   17fa6:	4648      	mov	r0, r9
   17fa8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   17faa:	f104 0960 	add.w	r9, r4, #96	; 0x60
   17fae:	4918      	ldr	r1, [pc, #96]	; (18010 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa8>)
   17fb0:	4648      	mov	r0, r9
   17fb2:	47b0      	blx	r6
   17fb4:	463a      	mov	r2, r7
   17fb6:	4641      	mov	r1, r8
   17fb8:	4648      	mov	r0, r9
   17fba:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   17fbc:	f104 0980 	add.w	r9, r4, #128	; 0x80
   17fc0:	4914      	ldr	r1, [pc, #80]	; (18014 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xac>)
   17fc2:	4648      	mov	r0, r9
   17fc4:	47b0      	blx	r6
   17fc6:	463a      	mov	r2, r7
   17fc8:	4641      	mov	r1, r8
   17fca:	4648      	mov	r0, r9
   17fcc:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   17fce:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
   17fd2:	4911      	ldr	r1, [pc, #68]	; (18018 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb0>)
   17fd4:	4648      	mov	r0, r9
   17fd6:	47b0      	blx	r6
   17fd8:	463a      	mov	r2, r7
   17fda:	4641      	mov	r1, r8
   17fdc:	4648      	mov	r0, r9
   17fde:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   17fe0:	34c0      	adds	r4, #192	; 0xc0
   17fe2:	490e      	ldr	r1, [pc, #56]	; (1801c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
   17fe4:	4620      	mov	r0, r4
   17fe6:	47b0      	blx	r6
   17fe8:	463a      	mov	r2, r7
   17fea:	4641      	mov	r1, r8
   17fec:	4620      	mov	r0, r4
   17fee:	47a8      	blx	r5
   17ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17ff4:	20005aa0 	.word	0x20005aa0
   17ff8:	2000d6d8 	.word	0x2000d6d8
   17ffc:	00013d09 	.word	0x00013d09
   18000:	20000000 	.word	0x20000000
   18004:	0001a44d 	.word	0x0001a44d
   18008:	2000d76c 	.word	0x2000d76c
   1800c:	2000d870 	.word	0x2000d870
   18010:	2000d78c 	.word	0x2000d78c
   18014:	2000d830 	.word	0x2000d830
   18018:	2000d850 	.word	0x2000d850
   1801c:	2000d748 	.word	0x2000d748
   18020:	00013d41 	.word	0x00013d41

00018024 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
   18024:	b530      	push	{r4, r5, lr}
   18026:	b083      	sub	sp, #12
	memcpy(&singleTask,usbMessageBuffer,sizeof(SingleTaskMessage));
   18028:	68c3      	ldr	r3, [r0, #12]
   1802a:	795b      	ldrb	r3, [r3, #5]
	bool	result(singleTask.header.task == kHVACCommandRedStatusFans);
   1802c:	2b51      	cmp	r3, #81	; 0x51
   1802e:	bf0c      	ite	eq
   18030:	2501      	moveq	r5, #1
   18032:	2500      	movne	r5, #0
	if (result){
   18034:	d002      	beq.n	1803c <_ZN16Commands_Handler17CommandFansStatusEv+0x18>
   18036:	4628      	mov	r0, r5
   18038:	b003      	add	sp, #12
   1803a:	bd30      	pop	{r4, r5, pc}
   1803c:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
   1803e:	a901      	add	r1, sp, #4
   18040:	4808      	ldr	r0, [pc, #32]	; (18064 <_ZN16Commands_Handler17CommandFansStatusEv+0x40>)
   18042:	4b09      	ldr	r3, [pc, #36]	; (18068 <_ZN16Commands_Handler17CommandFansStatusEv+0x44>)
   18044:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
   18046:	6823      	ldr	r3, [r4, #0]
   18048:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   1804c:	aa01      	add	r2, sp, #4
   1804e:	68e1      	ldr	r1, [r4, #12]
   18050:	4420      	add	r0, r4
   18052:	4b06      	ldr	r3, [pc, #24]	; (1806c <_ZN16Commands_Handler17CommandFansStatusEv+0x48>)
   18054:	4798      	blx	r3
			usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   18056:	2240      	movs	r2, #64	; 0x40
   18058:	68e1      	ldr	r1, [r4, #12]
   1805a:	4805      	ldr	r0, [pc, #20]	; (18070 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
   1805c:	4b05      	ldr	r3, [pc, #20]	; (18074 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
   1805e:	4798      	blx	r3
   18060:	e7e9      	b.n	18036 <_ZN16Commands_Handler17CommandFansStatusEv+0x12>
   18062:	bf00      	nop
   18064:	20003b28 	.word	0x20003b28
   18068:	000150dd 	.word	0x000150dd
   1806c:	00018099 	.word	0x00018099
   18070:	20003884 	.word	0x20003884
   18074:	00014735 	.word	0x00014735

00018078 <_ZN22MaintenanceDataHandlerC1Ev>:
   18078:	2264      	movs	r2, #100	; 0x64
   1807a:	7002      	strb	r2, [r0, #0]
   1807c:	2263      	movs	r2, #99	; 0x63
   1807e:	7042      	strb	r2, [r0, #1]
   18080:	2262      	movs	r2, #98	; 0x62
   18082:	7082      	strb	r2, [r0, #2]
   18084:	2261      	movs	r2, #97	; 0x61
   18086:	70c2      	strb	r2, [r0, #3]
   18088:	2200      	movs	r2, #0
   1808a:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
   1808c:	223a      	movs	r2, #58	; 0x3a
   1808e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
   18092:	4770      	bx	lr

00018094 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
   18094:	4770      	bx	lr
	...

00018098 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
   18098:	b570      	push	{r4, r5, r6, lr}
   1809a:	4605      	mov	r5, r0
   1809c:	460c      	mov	r4, r1
   1809e:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
   180a0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   180a4:	3006      	adds	r0, #6
   180a6:	4b09      	ldr	r3, [pc, #36]	; (180cc <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
   180a8:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
   180aa:	462b      	mov	r3, r5
   180ac:	4621      	mov	r1, r4
   180ae:	3540      	adds	r5, #64	; 0x40
   180b0:	681e      	ldr	r6, [r3, #0]
   180b2:	685c      	ldr	r4, [r3, #4]
   180b4:	6898      	ldr	r0, [r3, #8]
   180b6:	68da      	ldr	r2, [r3, #12]
   180b8:	600e      	str	r6, [r1, #0]
   180ba:	604c      	str	r4, [r1, #4]
   180bc:	6088      	str	r0, [r1, #8]
   180be:	60ca      	str	r2, [r1, #12]
   180c0:	3310      	adds	r3, #16
   180c2:	3110      	adds	r1, #16
   180c4:	42ab      	cmp	r3, r5
   180c6:	d1f3      	bne.n	180b0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
   180c8:	2000      	movs	r0, #0
   180ca:	bd70      	pop	{r4, r5, r6, pc}
   180cc:	0001c521 	.word	0x0001c521

000180d0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   180d0:	4770      	bx	lr

000180d2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   180d2:	4770      	bx	lr

000180d4 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
   180d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   180d6:	b083      	sub	sp, #12
   180d8:	4607      	mov	r7, r0
   180da:	460d      	mov	r5, r1
   180dc:	4616      	mov	r6, r2
	crc_sync_enable(&CRC_CALC);
   180de:	4c09      	ldr	r4, [pc, #36]	; (18104 <_ZN11CRC32_Class12CalculateCRCEPmm+0x30>)
   180e0:	4620      	mov	r0, r4
   180e2:	4b09      	ldr	r3, [pc, #36]	; (18108 <_ZN11CRC32_Class12CalculateCRCEPmm+0x34>)
   180e4:	4798      	blx	r3
	refCRC32=refCRC;
   180e6:	f04f 32ff 	mov.w	r2, #4294967295
   180ea:	603a      	str	r2, [r7, #0]
	uint32_t	lenght32=(uint32_t)floor(len/4);
	uint32_t crc=Init();
   180ec:	ab02      	add	r3, sp, #8
   180ee:	f843 2d04 	str.w	r2, [r3, #-4]!
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
   180f2:	08b2      	lsrs	r2, r6, #2
   180f4:	4629      	mov	r1, r5
   180f6:	4620      	mov	r0, r4
   180f8:	4c04      	ldr	r4, [pc, #16]	; (1810c <_ZN11CRC32_Class12CalculateCRCEPmm+0x38>)
   180fa:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
   180fc:	9801      	ldr	r0, [sp, #4]
   180fe:	43c0      	mvns	r0, r0
   18100:	b003      	add	sp, #12
   18102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18104:	2000d8b4 	.word	0x2000d8b4
   18108:	000063ad 	.word	0x000063ad
   1810c:	000063e9 	.word	0x000063e9

00018110 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   18110:	4770      	bx	lr

00018112 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   18112:	4770      	bx	lr

00018114 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   18114:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   18116:	2302      	movs	r3, #2
   18118:	4801      	ldr	r0, [pc, #4]	; (18120 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   1811a:	4c02      	ldr	r4, [pc, #8]	; (18124 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   1811c:	47a0      	blx	r4
	return	r;
}
   1811e:	bd10      	pop	{r4, pc}
   18120:	2000d4a8 	.word	0x2000d4a8
   18124:	0001a175 	.word	0x0001a175

00018128 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   18128:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   1812a:	4b03      	ldr	r3, [pc, #12]	; (18138 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   1812c:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   1812e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18132:	4b02      	ldr	r3, [pc, #8]	; (1813c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   18134:	4798      	blx	r3
}
   18136:	bd08      	pop	{r3, pc}
   18138:	20005b80 	.word	0x20005b80
   1813c:	00018115 	.word	0x00018115

00018140 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   18140:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   18142:	2302      	movs	r3, #2
   18144:	4801      	ldr	r0, [pc, #4]	; (1814c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   18146:	4c02      	ldr	r4, [pc, #8]	; (18150 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   18148:	47a0      	blx	r4
	return	w;
}
   1814a:	bd10      	pop	{r4, pc}
   1814c:	2000d4a8 	.word	0x2000d4a8
   18150:	0001a141 	.word	0x0001a141

00018154 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   18154:	b500      	push	{lr}
   18156:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   18158:	4b07      	ldr	r3, [pc, #28]	; (18178 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   1815a:	881b      	ldrh	r3, [r3, #0]
   1815c:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   18160:	4b06      	ldr	r3, [pc, #24]	; (1817c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   18162:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   18164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18168:	3202      	adds	r2, #2
   1816a:	a901      	add	r1, sp, #4
   1816c:	4b04      	ldr	r3, [pc, #16]	; (18180 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   1816e:	4798      	blx	r3
	return	w;
}
   18170:	b003      	add	sp, #12
   18172:	f85d fb04 	ldr.w	pc, [sp], #4
   18176:	bf00      	nop
   18178:	0001dcf8 	.word	0x0001dcf8
   1817c:	20005b80 	.word	0x20005b80
   18180:	00018141 	.word	0x00018141

00018184 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
	return	w;
}
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
   18184:	b510      	push	{r4, lr}
   18186:	b082      	sub	sp, #8
   18188:	a802      	add	r0, sp, #8
   1818a:	f840 1d04 	str.w	r1, [r0, #-4]!
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
   1818e:	4b06      	ldr	r3, [pc, #24]	; (181a8 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x24>)
   18190:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
   18192:	2304      	movs	r3, #4
   18194:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
   18198:	441a      	add	r2, r3
   1819a:	4601      	mov	r1, r0
   1819c:	4803      	ldr	r0, [pc, #12]	; (181ac <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x28>)
   1819e:	4c04      	ldr	r4, [pc, #16]	; (181b0 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x2c>)
   181a0:	47a0      	blx	r4
	return	w;
}
   181a2:	b002      	add	sp, #8
   181a4:	bd10      	pop	{r4, pc}
   181a6:	bf00      	nop
   181a8:	20005b80 	.word	0x20005b80
   181ac:	2000d4a8 	.word	0x2000d4a8
   181b0:	0001a141 	.word	0x0001a141

000181b4 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   181b4:	b510      	push	{r4, lr}
   181b6:	4604      	mov	r4, r0
   181b8:	30b8      	adds	r0, #184	; 0xb8
   181ba:	4b03      	ldr	r3, [pc, #12]	; (181c8 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   181bc:	4798      	blx	r3
   181be:	4620      	mov	r0, r4
   181c0:	4b02      	ldr	r3, [pc, #8]	; (181cc <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   181c2:	4798      	blx	r3
{
} //~MemoryManagment_Class
   181c4:	4620      	mov	r0, r4
   181c6:	bd10      	pop	{r4, pc}
   181c8:	000180d3 	.word	0x000180d3
   181cc:	00018113 	.word	0x00018113

000181d0 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   181d0:	b538      	push	{r3, r4, r5, lr}
   181d2:	4604      	mov	r4, r0
   181d4:	4b14      	ldr	r3, [pc, #80]	; (18228 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   181d6:	4798      	blx	r3
   181d8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   181dc:	4b13      	ldr	r3, [pc, #76]	; (1822c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   181de:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   181e0:	f44f 7500 	mov.w	r5, #512	; 0x200
   181e4:	462a      	mov	r2, r5
   181e6:	2100      	movs	r1, #0
   181e8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   181ec:	4b10      	ldr	r3, [pc, #64]	; (18230 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   181ee:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   181f0:	2300      	movs	r3, #0
   181f2:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   181f6:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   181fa:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   181fe:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   18202:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   18206:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   1820a:	4a0a      	ldr	r2, [pc, #40]	; (18234 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   1820c:	f246 33b4 	movw	r3, #25524	; 0x63b4
   18210:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   18212:	4b09      	ldr	r3, [pc, #36]	; (18238 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   18214:	681b      	ldr	r3, [r3, #0]
   18216:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   1821a:	332c      	adds	r3, #44	; 0x2c
   1821c:	f246 32b8 	movw	r2, #25528	; 0x63b8
   18220:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
   18222:	4620      	mov	r0, r4
   18224:	bd38      	pop	{r3, r4, r5, pc}
   18226:	bf00      	nop
   18228:	00018111 	.word	0x00018111
   1822c:	000180d1 	.word	0x000180d1
   18230:	0001c655 	.word	0x0001c655
   18234:	20005b84 	.word	0x20005b84
   18238:	20005b80 	.word	0x20005b80

0001823c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   1823c:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   1823e:	480b      	ldr	r0, [pc, #44]	; (1826c <_ZN17MemoryFlash_Class4InitEm+0x30>)
   18240:	4b0b      	ldr	r3, [pc, #44]	; (18270 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   18242:	4798      	blx	r3
   18244:	b948      	cbnz	r0, 1825a <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   18246:	4d0b      	ldr	r5, [pc, #44]	; (18274 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   18248:	490b      	ldr	r1, [pc, #44]	; (18278 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   1824a:	4628      	mov	r0, r5
   1824c:	4c0b      	ldr	r4, [pc, #44]	; (1827c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   1824e:	47a0      	blx	r4
   18250:	490b      	ldr	r1, [pc, #44]	; (18280 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   18252:	4628      	mov	r0, r5
   18254:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   18256:	2001      	movs	r0, #1
   18258:	bd38      	pop	{r3, r4, r5, pc}
   1825a:	4d06      	ldr	r5, [pc, #24]	; (18274 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   1825c:	4909      	ldr	r1, [pc, #36]	; (18284 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   1825e:	4628      	mov	r0, r5
   18260:	4c06      	ldr	r4, [pc, #24]	; (1827c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   18262:	47a0      	blx	r4
   18264:	4906      	ldr	r1, [pc, #24]	; (18280 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   18266:	4628      	mov	r0, r5
   18268:	47a0      	blx	r4
   1826a:	e7f4      	b.n	18256 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   1826c:	2000d4a8 	.word	0x2000d4a8
   18270:	0001a0a5 	.word	0x0001a0a5
   18274:	20003884 	.word	0x20003884
   18278:	0001dc8c 	.word	0x0001dc8c
   1827c:	000149b5 	.word	0x000149b5
   18280:	0001dc88 	.word	0x0001dc88
   18284:	0001dc68 	.word	0x0001dc68

00018288 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState>:
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
	 return w;
 };
 uint32_t	MemoryFlash_Class::SaveCurrentState(HVACState& hs){
   18288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1828a:	460f      	mov	r7, r1
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
   1828c:	4b13      	ldr	r3, [pc, #76]	; (182dc <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x54>)
   1828e:	681c      	ldr	r4, [r3, #0]
   18290:	f504 4481 	add.w	r4, r4, #16512	; 0x4080
   18294:	342c      	adds	r4, #44	; 0x2c
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
   18296:	f246 33b4 	movw	r3, #25524	; 0x63b4
   1829a:	58c5      	ldr	r5, [r0, r3]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
   1829c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   182a0:	4622      	mov	r2, r4
   182a2:	4629      	mov	r1, r5
   182a4:	480e      	ldr	r0, [pc, #56]	; (182e0 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x58>)
   182a6:	4e0f      	ldr	r6, [pc, #60]	; (182e4 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x5c>)
   182a8:	47b0      	blx	r6
	 if (r==0)
   182aa:	4603      	mov	r3, r0
   182ac:	b108      	cbz	r0, 182b2 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x2a>
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
		  return	w;
	 }

	 return	r;
 }
   182ae:	4618      	mov	r0, r3
   182b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
   182b2:	2268      	movs	r2, #104	; 0x68
   182b4:	4639      	mov	r1, r7
   182b6:	f105 0070 	add.w	r0, r5, #112	; 0x70
   182ba:	4b0b      	ldr	r3, [pc, #44]	; (182e8 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x60>)
   182bc:	4798      	blx	r3
		 qspiFlash.Erase(add);
   182be:	4e08      	ldr	r6, [pc, #32]	; (182e0 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x58>)
   182c0:	4621      	mov	r1, r4
   182c2:	4630      	mov	r0, r6
   182c4:	4b09      	ldr	r3, [pc, #36]	; (182ec <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x64>)
   182c6:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
   182c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   182cc:	4622      	mov	r2, r4
   182ce:	4629      	mov	r1, r5
   182d0:	4630      	mov	r0, r6
   182d2:	4c07      	ldr	r4, [pc, #28]	; (182f0 <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x68>)
   182d4:	47a0      	blx	r4
   182d6:	4603      	mov	r3, r0
		  return	w;
   182d8:	e7e9      	b.n	182ae <_ZN17MemoryFlash_Class16SaveCurrentStateER9HVACState+0x26>
   182da:	bf00      	nop
   182dc:	20005b80 	.word	0x20005b80
   182e0:	2000d4a8 	.word	0x2000d4a8
   182e4:	0001a175 	.word	0x0001a175
   182e8:	0001c521 	.word	0x0001c521
   182ec:	0001a111 	.word	0x0001a111
   182f0:	0001a141 	.word	0x0001a141

000182f4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   182f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182f6:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   182f8:	4b10      	ldr	r3, [pc, #64]	; (1833c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   182fa:	681c      	ldr	r4, [r3, #0]
   182fc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   18300:	f246 33b4 	movw	r3, #25524	; 0x63b4
   18304:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   18306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1830a:	4622      	mov	r2, r4
   1830c:	4629      	mov	r1, r5
   1830e:	480c      	ldr	r0, [pc, #48]	; (18340 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   18310:	4e0c      	ldr	r6, [pc, #48]	; (18344 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   18312:	47b0      	blx	r6
	  if (r==0)
   18314:	4603      	mov	r3, r0
   18316:	b108      	cbz	r0, 1831c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   18318:	4618      	mov	r0, r3
   1831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   1831c:	883b      	ldrh	r3, [r7, #0]
   1831e:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   18320:	4e07      	ldr	r6, [pc, #28]	; (18340 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   18322:	4621      	mov	r1, r4
   18324:	4630      	mov	r0, r6
   18326:	4b08      	ldr	r3, [pc, #32]	; (18348 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   18328:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1832a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1832e:	4622      	mov	r2, r4
   18330:	4629      	mov	r1, r5
   18332:	4630      	mov	r0, r6
   18334:	4c05      	ldr	r4, [pc, #20]	; (1834c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   18336:	47a0      	blx	r4
   18338:	4603      	mov	r3, r0
		  return	w;
   1833a:	e7ed      	b.n	18318 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   1833c:	20005b80 	.word	0x20005b80
   18340:	2000d4a8 	.word	0x2000d4a8
   18344:	0001a175 	.word	0x0001a175
   18348:	0001a111 	.word	0x0001a111
   1834c:	0001a141 	.word	0x0001a141

00018350 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
   uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
   18350:	b510      	push	{r4, lr}
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
   18352:	f246 33b8 	movw	r3, #25528	; 0x63b8
   18356:	58c3      	ldr	r3, [r0, r3]
   18358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1835c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   18360:	d907      	bls.n	18372 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x22>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
   18362:	4b0a      	ldr	r3, [pc, #40]	; (1838c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x3c>)
   18364:	681b      	ldr	r3, [r3, #0]
   18366:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   1836a:	332c      	adds	r3, #44	; 0x2c
			   stackpointerEventloger=addRef;
   1836c:	f246 32b8 	movw	r2, #25528	; 0x63b8
   18370:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
   18372:	f246 33b8 	movw	r3, #25528	; 0x63b8
   18376:	58c2      	ldr	r2, [r0, r3]
   18378:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1837c:	50c2      	str	r2, [r0, r3]
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
   1837e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   18382:	4803      	ldr	r0, [pc, #12]	; (18390 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x40>)
   18384:	4c03      	ldr	r4, [pc, #12]	; (18394 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x44>)
   18386:	47a0      	blx	r4
		   return	w;

	 
   }
   18388:	bd10      	pop	{r4, pc}
   1838a:	bf00      	nop
   1838c:	20005b80 	.word	0x20005b80
   18390:	2000d4a8 	.word	0x2000d4a8
   18394:	0001a141 	.word	0x0001a141

00018398 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryFlash_Class::SaveApplicationState(HVACState& hs ){
   18398:	b538      	push	{r3, r4, r5, lr}
   1839a:	4604      	mov	r4, r0
   1839c:	460d      	mov	r5, r1
	  uint32_t w=  SaveCurrentState(hs);
   1839e:	4b08      	ldr	r3, [pc, #32]	; (183c0 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x28>)
   183a0:	4798      	blx	r3
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
   183a2:	2268      	movs	r2, #104	; 0x68
   183a4:	4629      	mov	r1, r5
   183a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   183aa:	4b06      	ldr	r3, [pc, #24]	; (183c4 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x2c>)
   183ac:	4798      	blx	r3
   183ae:	4601      	mov	r1, r0
   183b0:	f246 33b0 	movw	r3, #25520	; 0x63b0
   183b4:	50e0      	str	r0, [r4, r3]
uint32_t	MemoryFlash_Class::SaveCRCAppState(uint32_t crc){
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
   183b6:	4620      	mov	r0, r4
   183b8:	4b03      	ldr	r3, [pc, #12]	; (183c8 <_ZN17MemoryFlash_Class20SaveApplicationStateER9HVACState+0x30>)
   183ba:	4798      	blx	r3
  }
   183bc:	bd38      	pop	{r3, r4, r5, pc}
   183be:	bf00      	nop
   183c0:	00018289 	.word	0x00018289
   183c4:	000180d5 	.word	0x000180d5
   183c8:	00018185 	.word	0x00018185

000183cc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
}
 
   183cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   183d0:	4c27      	ldr	r4, [pc, #156]	; (18470 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xa4>)
   183d2:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   183d6:	4927      	ldr	r1, [pc, #156]	; (18474 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xa8>)
   183d8:	4628      	mov	r0, r5
   183da:	4f27      	ldr	r7, [pc, #156]	; (18478 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xac>)
   183dc:	47b8      	blx	r7
   183de:	4e27      	ldr	r6, [pc, #156]	; (1847c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb0>)
   183e0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 184a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>
   183e4:	4632      	mov	r2, r6
   183e6:	4641      	mov	r1, r8
   183e8:	4628      	mov	r0, r5
   183ea:	4d25      	ldr	r5, [pc, #148]	; (18480 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   183ec:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   183ee:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   183f2:	4924      	ldr	r1, [pc, #144]	; (18484 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   183f4:	4648      	mov	r0, r9
   183f6:	47b8      	blx	r7
   183f8:	4632      	mov	r2, r6
   183fa:	4641      	mov	r1, r8
   183fc:	4648      	mov	r0, r9
   183fe:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   18400:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   18404:	4920      	ldr	r1, [pc, #128]	; (18488 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   18406:	4648      	mov	r0, r9
   18408:	47b8      	blx	r7
   1840a:	4632      	mov	r2, r6
   1840c:	4641      	mov	r1, r8
   1840e:	4648      	mov	r0, r9
   18410:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   18412:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   18416:	491d      	ldr	r1, [pc, #116]	; (1848c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   18418:	4648      	mov	r0, r9
   1841a:	47b8      	blx	r7
   1841c:	4632      	mov	r2, r6
   1841e:	4641      	mov	r1, r8
   18420:	4648      	mov	r0, r9
   18422:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   18424:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   18428:	4919      	ldr	r1, [pc, #100]	; (18490 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   1842a:	4648      	mov	r0, r9
   1842c:	47b8      	blx	r7
   1842e:	4632      	mov	r2, r6
   18430:	4641      	mov	r1, r8
   18432:	4648      	mov	r0, r9
   18434:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   18436:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   1843a:	4916      	ldr	r1, [pc, #88]	; (18494 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   1843c:	4648      	mov	r0, r9
   1843e:	47b8      	blx	r7
   18440:	4632      	mov	r2, r6
   18442:	4641      	mov	r1, r8
   18444:	4648      	mov	r0, r9
   18446:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   18448:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   1844c:	4912      	ldr	r1, [pc, #72]	; (18498 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   1844e:	4648      	mov	r0, r9
   18450:	47b8      	blx	r7
   18452:	4632      	mov	r2, r6
   18454:	4641      	mov	r1, r8
   18456:	4648      	mov	r0, r9
   18458:	47a8      	blx	r5
   1845a:	3c18      	subs	r4, #24
   1845c:	4620      	mov	r0, r4
   1845e:	4b0f      	ldr	r3, [pc, #60]	; (1849c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   18460:	4798      	blx	r3
   18462:	4632      	mov	r2, r6
   18464:	490e      	ldr	r1, [pc, #56]	; (184a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   18466:	4620      	mov	r0, r4
   18468:	47a8      	blx	r5
   1846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1846e:	bf00      	nop
   18470:	20006c7c 	.word	0x20006c7c
   18474:	2000d6d8 	.word	0x2000d6d8
   18478:	00013d09 	.word	0x00013d09
   1847c:	20000000 	.word	0x20000000
   18480:	0001a44d 	.word	0x0001a44d
   18484:	2000d76c 	.word	0x2000d76c
   18488:	2000d870 	.word	0x2000d870
   1848c:	2000d78c 	.word	0x2000d78c
   18490:	2000d830 	.word	0x2000d830
   18494:	2000d850 	.word	0x2000d850
   18498:	2000d748 	.word	0x2000d748
   1849c:	000181d1 	.word	0x000181d1
   184a0:	000181b5 	.word	0x000181b5
   184a4:	00013d41 	.word	0x00013d41

000184a8 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   184a8:	4b03      	ldr	r3, [pc, #12]	; (184b8 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   184aa:	681b      	ldr	r3, [r3, #0]
   184ac:	2201      	movs	r2, #1
   184ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   184b2:	bf00      	nop
   184b4:	4770      	bx	lr
   184b6:	bf00      	nop
   184b8:	2000d020 	.word	0x2000d020

000184bc <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184be:	4607      	mov	r7, r0
   184c0:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   184c4:	d007      	beq.n	184d6 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   184c6:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   184ca:	4e05      	ldr	r6, [pc, #20]	; (184e0 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   184cc:	3c68      	subs	r4, #104	; 0x68
   184ce:	4620      	mov	r0, r4
   184d0:	47b0      	blx	r6
   184d2:	42a5      	cmp	r5, r4
   184d4:	d1fa      	bne.n	184cc <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   184d6:	4638      	mov	r0, r7
   184d8:	4b02      	ldr	r3, [pc, #8]	; (184e4 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   184da:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   184dc:	4638      	mov	r0, r7
   184de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184e0:	000190c1 	.word	0x000190c1
   184e4:	000190c1 	.word	0x000190c1

000184e8 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   184e8:	4b06      	ldr	r3, [pc, #24]	; (18504 <_ZL15Converter1Readyv+0x1c>)
   184ea:	681b      	ldr	r3, [r3, #0]
   184ec:	2201      	movs	r2, #1
   184ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   184f2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   184f6:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   184fa:	2200      	movs	r2, #0
   184fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   18500:	4770      	bx	lr
   18502:	bf00      	nop
   18504:	2000d020 	.word	0x2000d020

00018508 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   18508:	4b06      	ldr	r3, [pc, #24]	; (18524 <_ZL15Converter2Readyv+0x1c>)
   1850a:	681b      	ldr	r3, [r3, #0]
   1850c:	2201      	movs	r2, #1
   1850e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   18512:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   18516:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   1851a:	2200      	movs	r2, #0
   1851c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   18520:	4770      	bx	lr
   18522:	bf00      	nop
   18524:	2000d020 	.word	0x2000d020

00018528 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   18528:	4b06      	ldr	r3, [pc, #24]	; (18544 <_ZL15Converter3Readyv+0x1c>)
   1852a:	681b      	ldr	r3, [r3, #0]
   1852c:	2201      	movs	r2, #1
   1852e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   18532:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   18536:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   1853a:	2200      	movs	r2, #0
   1853c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   18540:	4770      	bx	lr
   18542:	bf00      	nop
   18544:	2000d020 	.word	0x2000d020

00018548 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   18548:	b570      	push	{r4, r5, r6, lr}
   1854a:	4604      	mov	r4, r0
   1854c:	460e      	mov	r6, r1
   1854e:	4b0a      	ldr	r3, [pc, #40]	; (18578 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   18550:	4798      	blx	r3
   18552:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   18556:	4d09      	ldr	r5, [pc, #36]	; (1857c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   18558:	47a8      	blx	r5
   1855a:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1855e:	47a8      	blx	r5
   18560:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   18564:	47a8      	blx	r5
		spiLite=&ltSPI;
   18566:	4b06      	ldr	r3, [pc, #24]	; (18580 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   18568:	1d1a      	adds	r2, r3, #4
   1856a:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   1856e:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   18570:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   18574:	4620      	mov	r0, r4
   18576:	bd70      	pop	{r4, r5, r6, pc}
   18578:	000190ad 	.word	0x000190ad
   1857c:	000190ad 	.word	0x000190ad
   18580:	2000d020 	.word	0x2000d020

00018584 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   18584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18588:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1858a:	233d      	movs	r3, #61	; 0x3d
   1858c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   18590:	231b      	movs	r3, #27
   18592:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   18596:	2327      	movs	r3, #39	; 0x27
   18598:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   1859c:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   185a0:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   185a4:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   185a8:	4f06      	ldr	r7, [pc, #24]	; (185c4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   185aa:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   185ae:	f856 1b04 	ldr.w	r1, [r6], #4
   185b2:	4628      	mov	r0, r5
   185b4:	47b8      	blx	r7
   185b6:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   185b8:	4546      	cmp	r6, r8
   185ba:	d1f6      	bne.n	185aa <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   185bc:	2001      	movs	r0, #1
   185be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185c2:	bf00      	nop
   185c4:	000190d5 	.word	0x000190d5

000185c8 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   185c8:	b538      	push	{r3, r4, r5, lr}
   185ca:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   185cc:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   185d0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   185d4:	4b16      	ldr	r3, [pc, #88]	; (18630 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   185d6:	4798      	blx	r3
	spiLite->init();
   185d8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   185dc:	4b15      	ldr	r3, [pc, #84]	; (18634 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   185de:	4798      	blx	r3
	ptrTemperaturesClass=this;
   185e0:	4b15      	ldr	r3, [pc, #84]	; (18638 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   185e2:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   185e4:	4915      	ldr	r1, [pc, #84]	; (1863c <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   185e6:	2028      	movs	r0, #40	; 0x28
   185e8:	4d15      	ldr	r5, [pc, #84]	; (18640 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   185ea:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   185ec:	4915      	ldr	r1, [pc, #84]	; (18644 <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   185ee:	2029      	movs	r0, #41	; 0x29
   185f0:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   185f2:	4915      	ldr	r1, [pc, #84]	; (18648 <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   185f4:	2021      	movs	r0, #33	; 0x21
   185f6:	47a8      	blx	r5
	InitModules();
   185f8:	4620      	mov	r0, r4
   185fa:	4b14      	ldr	r3, [pc, #80]	; (1864c <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   185fc:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   185fe:	2301      	movs	r3, #1
   18600:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   18604:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   18608:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   1860c:	2300      	movs	r3, #0
   1860e:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   18612:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   18616:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1861a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   1861e:	4013      	ands	r3, r2
   18620:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   18624:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   18626:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   1862a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   1862e:	bd38      	pop	{r3, r4, r5, pc}
   18630:	000199c5 	.word	0x000199c5
   18634:	00019969 	.word	0x00019969
   18638:	2000d020 	.word	0x2000d020
   1863c:	000184e9 	.word	0x000184e9
   18640:	00006511 	.word	0x00006511
   18644:	00018509 	.word	0x00018509
   18648:	00018529 	.word	0x00018529
   1864c:	00018585 	.word	0x00018585

00018650 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   18650:	b510      	push	{r4, lr}
   18652:	4604      	mov	r4, r0
	converterTimeout=false;
   18654:	2200      	movs	r2, #0
   18656:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   1865a:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   1865e:	4403      	add	r3, r0
   18660:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   18664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18668:	4907      	ldr	r1, [pc, #28]	; (18688 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   1866a:	4808      	ldr	r0, [pc, #32]	; (1868c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   1866c:	4b08      	ldr	r3, [pc, #32]	; (18690 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   1866e:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   18670:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   18674:	2368      	movs	r3, #104	; 0x68
   18676:	fb03 4000 	mla	r0, r3, r0, r4
   1867a:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   1867e:	30a8      	adds	r0, #168	; 0xa8
   18680:	4b04      	ldr	r3, [pc, #16]	; (18694 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   18682:	4798      	blx	r3
   18684:	bd10      	pop	{r4, pc}
   18686:	bf00      	nop
   18688:	000184a9 	.word	0x000184a9
   1868c:	2000d038 	.word	0x2000d038
   18690:	00013ff5 	.word	0x00013ff5
   18694:	000191c9 	.word	0x000191c9

00018698 <_ZN24TemperatureSensors_Class18StartOneConversionEhh>:
void	TemperatureSensors_Class::StartOneConversion(uint8_t mod,uint8_t sen){
   18698:	b510      	push	{r4, lr}
   1869a:	4604      	mov	r4, r0
	converterTimeout=false;
   1869c:	2300      	movs	r3, #0
   1869e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
	currentModule=mod; currentChannelIndex=sen;
   186a2:	f880 11f3 	strb.w	r1, [r0, #499]	; 0x1f3
   186a6:	f880 21f4 	strb.w	r2, [r0, #500]	; 0x1f4
	converterReady[currentModule]=false;
   186aa:	4401      	add	r1, r0
   186ac:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   186b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   186b4:	4907      	ldr	r1, [pc, #28]	; (186d4 <_ZN24TemperatureSensors_Class18StartOneConversionEhh+0x3c>)
   186b6:	4808      	ldr	r0, [pc, #32]	; (186d8 <_ZN24TemperatureSensors_Class18StartOneConversionEhh+0x40>)
   186b8:	4b08      	ldr	r3, [pc, #32]	; (186dc <_ZN24TemperatureSensors_Class18StartOneConversionEhh+0x44>)
   186ba:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   186bc:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   186c0:	2368      	movs	r3, #104	; 0x68
   186c2:	fb03 4000 	mla	r0, r3, r0, r4
   186c6:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   186ca:	30a8      	adds	r0, #168	; 0xa8
   186cc:	4b04      	ldr	r3, [pc, #16]	; (186e0 <_ZN24TemperatureSensors_Class18StartOneConversionEhh+0x48>)
   186ce:	4798      	blx	r3
   186d0:	bd10      	pop	{r4, pc}
   186d2:	bf00      	nop
   186d4:	000184a9 	.word	0x000184a9
   186d8:	2000d038 	.word	0x2000d038
   186dc:	00013ff5 	.word	0x00013ff5
   186e0:	000191c9 	.word	0x000191c9

000186e4 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   186e4:	b538      	push	{r3, r4, r5, lr}
   186e6:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   186e8:	491e      	ldr	r1, [pc, #120]	; (18764 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   186ea:	481f      	ldr	r0, [pc, #124]	; (18768 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   186ec:	4b1f      	ldr	r3, [pc, #124]	; (1876c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   186ee:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   186f0:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   186f4:	2568      	movs	r5, #104	; 0x68
   186f6:	fb05 4000 	mla	r0, r5, r0, r4
   186fa:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   186fe:	30a8      	adds	r0, #168	; 0xa8
   18700:	4b1b      	ldr	r3, [pc, #108]	; (18770 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   18702:	4798      	blx	r3
   18704:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   18708:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   1870c:	fb05 4502 	mla	r5, r5, r2, r4
   18710:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   18714:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   18718:	2b01      	cmp	r3, #1
   1871a:	d00d      	beq.n	18738 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   1871c:	4b15      	ldr	r3, [pc, #84]	; (18774 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   1871e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   18722:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   18726:	3301      	adds	r3, #1
   18728:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   1872a:	2b04      	cmp	r3, #4
   1872c:	d00c      	beq.n	18748 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   1872e:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   18732:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   18736:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   18738:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   1873c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18740:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   18744:	66d8      	str	r0, [r3, #108]	; 0x6c
   18746:	e7ec      	b.n	18722 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   18748:	2300      	movs	r3, #0
   1874a:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   1874e:	3201      	adds	r2, #1
   18750:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   18752:	2a03      	cmp	r2, #3
		currentModule++;
   18754:	bf12      	itee	ne
   18756:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   1875a:	2300      	moveq	r3, #0
   1875c:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   18760:	e7e7      	b.n	18732 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   18762:	bf00      	nop
   18764:	000184a9 	.word	0x000184a9
   18768:	2000d038 	.word	0x2000d038
   1876c:	00013f85 	.word	0x00013f85
   18770:	000192d1 	.word	0x000192d1
   18774:	c479c000 	.word	0xc479c000

00018778 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   18778:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   1877c:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   18780:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   18784:	4013      	ands	r3, r2
}
   18786:	4018      	ands	r0, r3
   18788:	4770      	bx	lr
	...

0001878c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   1878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   18790:	4c2b      	ldr	r4, [pc, #172]	; (18840 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xb4>)
   18792:	f104 0518 	add.w	r5, r4, #24
   18796:	492b      	ldr	r1, [pc, #172]	; (18844 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xb8>)
   18798:	4628      	mov	r0, r5
   1879a:	4f2b      	ldr	r7, [pc, #172]	; (18848 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xbc>)
   1879c:	47b8      	blx	r7
   1879e:	4e2b      	ldr	r6, [pc, #172]	; (1884c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc0>)
   187a0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 18880 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>
   187a4:	4632      	mov	r2, r6
   187a6:	4641      	mov	r1, r8
   187a8:	4628      	mov	r0, r5
   187aa:	4d29      	ldr	r5, [pc, #164]	; (18850 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc4>)
   187ac:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   187ae:	f104 0938 	add.w	r9, r4, #56	; 0x38
   187b2:	4928      	ldr	r1, [pc, #160]	; (18854 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
   187b4:	4648      	mov	r0, r9
   187b6:	47b8      	blx	r7
   187b8:	4632      	mov	r2, r6
   187ba:	4641      	mov	r1, r8
   187bc:	4648      	mov	r0, r9
   187be:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   187c0:	f104 0958 	add.w	r9, r4, #88	; 0x58
   187c4:	4924      	ldr	r1, [pc, #144]	; (18858 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
   187c6:	4648      	mov	r0, r9
   187c8:	47b8      	blx	r7
   187ca:	4632      	mov	r2, r6
   187cc:	4641      	mov	r1, r8
   187ce:	4648      	mov	r0, r9
   187d0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   187d2:	f104 0978 	add.w	r9, r4, #120	; 0x78
   187d6:	4921      	ldr	r1, [pc, #132]	; (1885c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
   187d8:	4648      	mov	r0, r9
   187da:	47b8      	blx	r7
   187dc:	4632      	mov	r2, r6
   187de:	4641      	mov	r1, r8
   187e0:	4648      	mov	r0, r9
   187e2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   187e4:	f104 0998 	add.w	r9, r4, #152	; 0x98
   187e8:	491d      	ldr	r1, [pc, #116]	; (18860 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
   187ea:	4648      	mov	r0, r9
   187ec:	47b8      	blx	r7
   187ee:	4632      	mov	r2, r6
   187f0:	4641      	mov	r1, r8
   187f2:	4648      	mov	r0, r9
   187f4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   187f6:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   187fa:	491a      	ldr	r1, [pc, #104]	; (18864 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
   187fc:	4648      	mov	r0, r9
   187fe:	47b8      	blx	r7
   18800:	4632      	mov	r2, r6
   18802:	4641      	mov	r1, r8
   18804:	4648      	mov	r0, r9
   18806:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   18808:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
   1880c:	4916      	ldr	r1, [pc, #88]	; (18868 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
   1880e:	4648      	mov	r0, r9
   18810:	47b8      	blx	r7
   18812:	4632      	mov	r2, r6
   18814:	4641      	mov	r1, r8
   18816:	4648      	mov	r0, r9
   18818:	47a8      	blx	r5
static LT_SPI	ltSPI;
   1881a:	1d27      	adds	r7, r4, #4
   1881c:	4638      	mov	r0, r7
   1881e:	4b13      	ldr	r3, [pc, #76]	; (1886c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
   18820:	4798      	blx	r3
   18822:	4632      	mov	r2, r6
   18824:	4912      	ldr	r1, [pc, #72]	; (18870 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
   18826:	4638      	mov	r0, r7
   18828:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   1882a:	34f8      	adds	r4, #248	; 0xf8
   1882c:	4911      	ldr	r1, [pc, #68]	; (18874 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
   1882e:	4620      	mov	r0, r4
   18830:	4b11      	ldr	r3, [pc, #68]	; (18878 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
   18832:	4798      	blx	r3
   18834:	4632      	mov	r2, r6
   18836:	4911      	ldr	r1, [pc, #68]	; (1887c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
   18838:	4620      	mov	r0, r4
   1883a:	47a8      	blx	r5
   1883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18840:	2000d020 	.word	0x2000d020
   18844:	2000d6d8 	.word	0x2000d6d8
   18848:	00013d09 	.word	0x00013d09
   1884c:	20000000 	.word	0x20000000
   18850:	0001a44d 	.word	0x0001a44d
   18854:	2000d76c 	.word	0x2000d76c
   18858:	2000d870 	.word	0x2000d870
   1885c:	2000d78c 	.word	0x2000d78c
   18860:	2000d830 	.word	0x2000d830
   18864:	2000d850 	.word	0x2000d850
   18868:	2000d748 	.word	0x2000d748
   1886c:	0001992d 	.word	0x0001992d
   18870:	00019955 	.word	0x00019955
   18874:	2000d710 	.word	0x2000d710
   18878:	00018549 	.word	0x00018549
   1887c:	000184bd 	.word	0x000184bd
   18880:	00013d41 	.word	0x00013d41

00018884 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   18884:	b580      	push	{r7, lr}
   18886:	b084      	sub	sp, #16
   18888:	af00      	add	r7, sp, #0
   1888a:	60f8      	str	r0, [r7, #12]
   1888c:	60b9      	str	r1, [r7, #8]
   1888e:	4613      	mov	r3, r2
   18890:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18892:	68fb      	ldr	r3, [r7, #12]
   18894:	2b00      	cmp	r3, #0
   18896:	d004      	beq.n	188a2 <io_write+0x1e>
   18898:	68bb      	ldr	r3, [r7, #8]
   1889a:	2b00      	cmp	r3, #0
   1889c:	d001      	beq.n	188a2 <io_write+0x1e>
   1889e:	2301      	movs	r3, #1
   188a0:	e000      	b.n	188a4 <io_write+0x20>
   188a2:	2300      	movs	r3, #0
   188a4:	f003 0301 	and.w	r3, r3, #1
   188a8:	b2db      	uxtb	r3, r3
   188aa:	2234      	movs	r2, #52	; 0x34
   188ac:	4907      	ldr	r1, [pc, #28]	; (188cc <io_write+0x48>)
   188ae:	4618      	mov	r0, r3
   188b0:	4b07      	ldr	r3, [pc, #28]	; (188d0 <io_write+0x4c>)
   188b2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   188b4:	68fb      	ldr	r3, [r7, #12]
   188b6:	681b      	ldr	r3, [r3, #0]
   188b8:	88fa      	ldrh	r2, [r7, #6]
   188ba:	68b9      	ldr	r1, [r7, #8]
   188bc:	68f8      	ldr	r0, [r7, #12]
   188be:	4798      	blx	r3
   188c0:	4603      	mov	r3, r0
}
   188c2:	4618      	mov	r0, r3
   188c4:	3710      	adds	r7, #16
   188c6:	46bd      	mov	sp, r7
   188c8:	bd80      	pop	{r7, pc}
   188ca:	bf00      	nop
   188cc:	0001dcac 	.word	0x0001dcac
   188d0:	00007b0d 	.word	0x00007b0d

000188d4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   188d4:	b580      	push	{r7, lr}
   188d6:	b084      	sub	sp, #16
   188d8:	af00      	add	r7, sp, #0
   188da:	60f8      	str	r0, [r7, #12]
   188dc:	60b9      	str	r1, [r7, #8]
   188de:	4613      	mov	r3, r2
   188e0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   188e2:	68fb      	ldr	r3, [r7, #12]
   188e4:	2b00      	cmp	r3, #0
   188e6:	d004      	beq.n	188f2 <io_read+0x1e>
   188e8:	68bb      	ldr	r3, [r7, #8]
   188ea:	2b00      	cmp	r3, #0
   188ec:	d001      	beq.n	188f2 <io_read+0x1e>
   188ee:	2301      	movs	r3, #1
   188f0:	e000      	b.n	188f4 <io_read+0x20>
   188f2:	2300      	movs	r3, #0
   188f4:	f003 0301 	and.w	r3, r3, #1
   188f8:	b2db      	uxtb	r3, r3
   188fa:	223d      	movs	r2, #61	; 0x3d
   188fc:	4907      	ldr	r1, [pc, #28]	; (1891c <io_read+0x48>)
   188fe:	4618      	mov	r0, r3
   18900:	4b07      	ldr	r3, [pc, #28]	; (18920 <io_read+0x4c>)
   18902:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   18904:	68fb      	ldr	r3, [r7, #12]
   18906:	685b      	ldr	r3, [r3, #4]
   18908:	88fa      	ldrh	r2, [r7, #6]
   1890a:	68b9      	ldr	r1, [r7, #8]
   1890c:	68f8      	ldr	r0, [r7, #12]
   1890e:	4798      	blx	r3
   18910:	4603      	mov	r3, r0
}
   18912:	4618      	mov	r0, r3
   18914:	3710      	adds	r7, #16
   18916:	46bd      	mov	sp, r7
   18918:	bd80      	pop	{r7, pc}
   1891a:	bf00      	nop
   1891c:	0001dcac 	.word	0x0001dcac
   18920:	00007b0d 	.word	0x00007b0d

00018924 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   18924:	b480      	push	{r7}
   18926:	b083      	sub	sp, #12
   18928:	af00      	add	r7, sp, #0
   1892a:	6078      	str	r0, [r7, #4]
   1892c:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   1892e:	687b      	ldr	r3, [r7, #4]
   18930:	683a      	ldr	r2, [r7, #0]
   18932:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   18934:	687b      	ldr	r3, [r7, #4]
   18936:	4618      	mov	r0, r3
   18938:	370c      	adds	r7, #12
   1893a:	46bd      	mov	sp, r7
   1893c:	bc80      	pop	{r7}
   1893e:	4770      	bx	lr

00018940 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   18940:	b480      	push	{r7}
   18942:	b083      	sub	sp, #12
   18944:	af00      	add	r7, sp, #0
   18946:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   18948:	687b      	ldr	r3, [r7, #4]
   1894a:	4618      	mov	r0, r3
   1894c:	370c      	adds	r7, #12
   1894e:	46bd      	mov	sp, r7
   18950:	bc80      	pop	{r7}
   18952:	4770      	bx	lr

00018954 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   18954:	b580      	push	{r7, lr}
   18956:	b084      	sub	sp, #16
   18958:	af00      	add	r7, sp, #0
   1895a:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   1895c:	687b      	ldr	r3, [r7, #4]
   1895e:	4a14      	ldr	r2, [pc, #80]	; (189b0 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   18960:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   18962:	687b      	ldr	r3, [r7, #4]
   18964:	4a12      	ldr	r2, [pc, #72]	; (189b0 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   18966:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   18968:	687b      	ldr	r3, [r7, #4]
   1896a:	691a      	ldr	r2, [r3, #16]
   1896c:	687b      	ldr	r3, [r7, #4]
   1896e:	330c      	adds	r3, #12
   18970:	4619      	mov	r1, r3
   18972:	4610      	mov	r0, r2
   18974:	4b0f      	ldr	r3, [pc, #60]	; (189b4 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   18976:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   18978:	687b      	ldr	r3, [r7, #4]
   1897a:	691b      	ldr	r3, [r3, #16]
   1897c:	4618      	mov	r0, r3
   1897e:	4b0e      	ldr	r3, [pc, #56]	; (189b8 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   18980:	4798      	blx	r3
   18982:	4603      	mov	r3, r0
   18984:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   18986:	7bfb      	ldrb	r3, [r7, #15]
   18988:	2b00      	cmp	r3, #0
   1898a:	bf0c      	ite	eq
   1898c:	2301      	moveq	r3, #1
   1898e:	2300      	movne	r3, #0
   18990:	b2da      	uxtb	r2, r3
   18992:	687b      	ldr	r3, [r7, #4]
   18994:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   18996:	687b      	ldr	r3, [r7, #4]
   18998:	7a5b      	ldrb	r3, [r3, #9]
   1899a:	b2da      	uxtb	r2, r3
   1899c:	687b      	ldr	r3, [r7, #4]
   1899e:	721a      	strb	r2, [r3, #8]
	return isOK;
   189a0:	687b      	ldr	r3, [r7, #4]
   189a2:	7a5b      	ldrb	r3, [r3, #9]
   189a4:	b2db      	uxtb	r3, r3
	
}
   189a6:	4618      	mov	r0, r3
   189a8:	3710      	adds	r7, #16
   189aa:	46bd      	mov	sp, r7
   189ac:	bd80      	pop	{r7, pc}
   189ae:	bf00      	nop
   189b0:	2000d310 	.word	0x2000d310
   189b4:	00006847 	.word	0x00006847
   189b8:	000067ed 	.word	0x000067ed

000189bc <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   189bc:	b580      	push	{r7, lr}
   189be:	b082      	sub	sp, #8
   189c0:	af00      	add	r7, sp, #0
   189c2:	6078      	str	r0, [r7, #4]
   189c4:	460b      	mov	r3, r1
   189c6:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   189c8:	687b      	ldr	r3, [r7, #4]
   189ca:	691b      	ldr	r3, [r3, #16]
   189cc:	78fa      	ldrb	r2, [r7, #3]
   189ce:	b211      	sxth	r1, r2
   189d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   189d4:	4618      	mov	r0, r3
   189d6:	4b03      	ldr	r3, [pc, #12]	; (189e4 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   189d8:	4798      	blx	r3
   189da:	4603      	mov	r3, r0
}
   189dc:	4618      	mov	r0, r3
   189de:	3708      	adds	r7, #8
   189e0:	46bd      	mov	sp, r7
   189e2:	bd80      	pop	{r7, pc}
   189e4:	0000680d 	.word	0x0000680d

000189e8 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   189e8:	b580      	push	{r7, lr}
   189ea:	b086      	sub	sp, #24
   189ec:	af00      	add	r7, sp, #0
   189ee:	60f8      	str	r0, [r7, #12]
   189f0:	60b9      	str	r1, [r7, #8]
   189f2:	4613      	mov	r3, r2
   189f4:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   189f6:	68fb      	ldr	r3, [r7, #12]
   189f8:	68db      	ldr	r3, [r3, #12]
   189fa:	88fa      	ldrh	r2, [r7, #6]
   189fc:	68b9      	ldr	r1, [r7, #8]
   189fe:	4618      	mov	r0, r3
   18a00:	4b03      	ldr	r3, [pc, #12]	; (18a10 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   18a02:	4798      	blx	r3
   18a04:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   18a06:	697b      	ldr	r3, [r7, #20]
}
   18a08:	4618      	mov	r0, r3
   18a0a:	3718      	adds	r7, #24
   18a0c:	46bd      	mov	sp, r7
   18a0e:	bd80      	pop	{r7, pc}
   18a10:	00018885 	.word	0x00018885

00018a14 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   18a14:	b580      	push	{r7, lr}
   18a16:	b086      	sub	sp, #24
   18a18:	af00      	add	r7, sp, #0
   18a1a:	60f8      	str	r0, [r7, #12]
   18a1c:	60b9      	str	r1, [r7, #8]
   18a1e:	4613      	mov	r3, r2
   18a20:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   18a22:	68fb      	ldr	r3, [r7, #12]
   18a24:	68db      	ldr	r3, [r3, #12]
   18a26:	88fa      	ldrh	r2, [r7, #6]
   18a28:	68b9      	ldr	r1, [r7, #8]
   18a2a:	4618      	mov	r0, r3
   18a2c:	4b03      	ldr	r3, [pc, #12]	; (18a3c <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   18a2e:	4798      	blx	r3
   18a30:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   18a32:	697b      	ldr	r3, [r7, #20]
}
   18a34:	4618      	mov	r0, r3
   18a36:	3718      	adds	r7, #24
   18a38:	46bd      	mov	sp, r7
   18a3a:	bd80      	pop	{r7, pc}
   18a3c:	000188d5 	.word	0x000188d5

00018a40 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   18a40:	b480      	push	{r7}
   18a42:	b083      	sub	sp, #12
   18a44:	af00      	add	r7, sp, #0
   18a46:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   18a48:	687b      	ldr	r3, [r7, #4]
   18a4a:	4618      	mov	r0, r3
   18a4c:	370c      	adds	r7, #12
   18a4e:	46bd      	mov	sp, r7
   18a50:	bc80      	pop	{r7}
   18a52:	4770      	bx	lr

00018a54 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   18a54:	b480      	push	{r7}
   18a56:	b083      	sub	sp, #12
   18a58:	af00      	add	r7, sp, #0
   18a5a:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   18a5c:	687b      	ldr	r3, [r7, #4]
   18a5e:	4618      	mov	r0, r3
   18a60:	370c      	adds	r7, #12
   18a62:	46bd      	mov	sp, r7
   18a64:	bc80      	pop	{r7}
   18a66:	4770      	bx	lr

00018a68 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   18a68:	b480      	push	{r7}
   18a6a:	b085      	sub	sp, #20
   18a6c:	af00      	add	r7, sp, #0
   18a6e:	6078      	str	r0, [r7, #4]
   18a70:	460b      	mov	r3, r1
   18a72:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   18a74:	2300      	movs	r3, #0
   18a76:	73fb      	strb	r3, [r7, #15]
   18a78:	7bfb      	ldrb	r3, [r7, #15]
   18a7a:	2b01      	cmp	r3, #1
   18a7c:	dc13      	bgt.n	18aa6 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   18a7e:	7bfb      	ldrb	r3, [r7, #15]
   18a80:	78f9      	ldrb	r1, [r7, #3]
   18a82:	7bfa      	ldrb	r2, [r7, #15]
   18a84:	2080      	movs	r0, #128	; 0x80
   18a86:	fa40 f202 	asr.w	r2, r0, r2
   18a8a:	400a      	ands	r2, r1
   18a8c:	2a00      	cmp	r2, #0
   18a8e:	bfcc      	ite	gt
   18a90:	2201      	movgt	r2, #1
   18a92:	2200      	movle	r2, #0
   18a94:	b2d1      	uxtb	r1, r2
   18a96:	687a      	ldr	r2, [r7, #4]
   18a98:	4413      	add	r3, r2
   18a9a:	460a      	mov	r2, r1
   18a9c:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   18a9e:	7bfb      	ldrb	r3, [r7, #15]
   18aa0:	3301      	adds	r3, #1
   18aa2:	73fb      	strb	r3, [r7, #15]
   18aa4:	e7e8      	b.n	18a78 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   18aa6:	bf00      	nop
   18aa8:	3714      	adds	r7, #20
   18aaa:	46bd      	mov	sp, r7
   18aac:	bc80      	pop	{r7}
   18aae:	4770      	bx	lr

00018ab0 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   18ab0:	b480      	push	{r7}
   18ab2:	b085      	sub	sp, #20
   18ab4:	af00      	add	r7, sp, #0
   18ab6:	6078      	str	r0, [r7, #4]
   18ab8:	460b      	mov	r3, r1
   18aba:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   18abc:	2300      	movs	r3, #0
   18abe:	73fb      	strb	r3, [r7, #15]
   18ac0:	7bfb      	ldrb	r3, [r7, #15]
   18ac2:	2b02      	cmp	r3, #2
   18ac4:	dc15      	bgt.n	18af2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   18ac6:	7bfb      	ldrb	r3, [r7, #15]
   18ac8:	f1c3 0302 	rsb	r3, r3, #2
   18acc:	78f9      	ldrb	r1, [r7, #3]
   18ace:	7bfa      	ldrb	r2, [r7, #15]
   18ad0:	2020      	movs	r0, #32
   18ad2:	fa40 f202 	asr.w	r2, r0, r2
   18ad6:	400a      	ands	r2, r1
   18ad8:	2a00      	cmp	r2, #0
   18ada:	bfcc      	ite	gt
   18adc:	2201      	movgt	r2, #1
   18ade:	2200      	movle	r2, #0
   18ae0:	b2d1      	uxtb	r1, r2
   18ae2:	687a      	ldr	r2, [r7, #4]
   18ae4:	4413      	add	r3, r2
   18ae6:	460a      	mov	r2, r1
   18ae8:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   18aea:	7bfb      	ldrb	r3, [r7, #15]
   18aec:	3301      	adds	r3, #1
   18aee:	73fb      	strb	r3, [r7, #15]
   18af0:	e7e6      	b.n	18ac0 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   18af2:	bf00      	nop
   18af4:	3714      	adds	r7, #20
   18af6:	46bd      	mov	sp, r7
   18af8:	bc80      	pop	{r7}
   18afa:	4770      	bx	lr

00018afc <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   18afc:	b580      	push	{r7, lr}
   18afe:	b084      	sub	sp, #16
   18b00:	af00      	add	r7, sp, #0
   18b02:	60f8      	str	r0, [r7, #12]
   18b04:	60b9      	str	r1, [r7, #8]
   18b06:	4613      	mov	r3, r2
   18b08:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   18b0a:	79fb      	ldrb	r3, [r7, #7]
   18b0c:	4619      	mov	r1, r3
   18b0e:	68b8      	ldr	r0, [r7, #8]
   18b10:	4b0d      	ldr	r3, [pc, #52]	; (18b48 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   18b12:	4798      	blx	r3
	FillLimitSwitch(v);
   18b14:	79fb      	ldrb	r3, [r7, #7]
   18b16:	4619      	mov	r1, r3
   18b18:	68b8      	ldr	r0, [r7, #8]
   18b1a:	4b0c      	ldr	r3, [pc, #48]	; (18b4c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   18b1c:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   18b1e:	79fb      	ldrb	r3, [r7, #7]
   18b20:	f003 0301 	and.w	r3, r3, #1
   18b24:	2b00      	cmp	r3, #0
   18b26:	bfcc      	ite	gt
   18b28:	2301      	movgt	r3, #1
   18b2a:	2300      	movle	r3, #0
   18b2c:	b2da      	uxtb	r2, r3
   18b2e:	68bb      	ldr	r3, [r7, #8]
   18b30:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   18b32:	68fa      	ldr	r2, [r7, #12]
   18b34:	68bb      	ldr	r3, [r7, #8]
   18b36:	3314      	adds	r3, #20
   18b38:	6819      	ldr	r1, [r3, #0]
   18b3a:	6011      	str	r1, [r2, #0]
   18b3c:	889b      	ldrh	r3, [r3, #4]
   18b3e:	8093      	strh	r3, [r2, #4]
}
   18b40:	68f8      	ldr	r0, [r7, #12]
   18b42:	3710      	adds	r7, #16
   18b44:	46bd      	mov	sp, r7
   18b46:	bd80      	pop	{r7, pc}
   18b48:	00018a69 	.word	0x00018a69
   18b4c:	00018ab1 	.word	0x00018ab1

00018b50 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   18b50:	b480      	push	{r7}
   18b52:	b085      	sub	sp, #20
   18b54:	af00      	add	r7, sp, #0
   18b56:	60f8      	str	r0, [r7, #12]
   18b58:	60b9      	str	r1, [r7, #8]
   18b5a:	4613      	mov	r3, r2
   18b5c:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   18b5e:	68bb      	ldr	r3, [r7, #8]
   18b60:	7d5b      	ldrb	r3, [r3, #21]
   18b62:	f083 0301 	eor.w	r3, r3, #1
   18b66:	b2db      	uxtb	r3, r3
   18b68:	f003 0301 	and.w	r3, r3, #1
   18b6c:	2b00      	cmp	r3, #0
   18b6e:	d004      	beq.n	18b7a <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   18b70:	68bb      	ldr	r3, [r7, #8]
   18b72:	7d1a      	ldrb	r2, [r3, #20]
   18b74:	68bb      	ldr	r3, [r7, #8]
   18b76:	769a      	strb	r2, [r3, #26]
   18b78:	e009      	b.n	18b8e <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   18b7a:	79fb      	ldrb	r3, [r7, #7]
   18b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   18b80:	2b00      	cmp	r3, #0
   18b82:	bfcc      	ite	gt
   18b84:	2301      	movgt	r3, #1
   18b86:	2300      	movle	r3, #0
   18b88:	b2da      	uxtb	r2, r3
   18b8a:	68bb      	ldr	r3, [r7, #8]
   18b8c:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   18b8e:	79fb      	ldrb	r3, [r7, #7]
   18b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18b94:	2b00      	cmp	r3, #0
   18b96:	bfcc      	ite	gt
   18b98:	2301      	movgt	r3, #1
   18b9a:	2300      	movle	r3, #0
   18b9c:	b2da      	uxtb	r2, r3
   18b9e:	68bb      	ldr	r3, [r7, #8]
   18ba0:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   18ba2:	79fb      	ldrb	r3, [r7, #7]
   18ba4:	f003 0320 	and.w	r3, r3, #32
   18ba8:	2b00      	cmp	r3, #0
   18baa:	bfcc      	ite	gt
   18bac:	2301      	movgt	r3, #1
   18bae:	2300      	movle	r3, #0
   18bb0:	b2da      	uxtb	r2, r3
   18bb2:	68bb      	ldr	r3, [r7, #8]
   18bb4:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   18bb6:	79fb      	ldrb	r3, [r7, #7]
   18bb8:	f003 0310 	and.w	r3, r3, #16
   18bbc:	2b00      	cmp	r3, #0
   18bbe:	bfcc      	ite	gt
   18bc0:	2301      	movgt	r3, #1
   18bc2:	2300      	movle	r3, #0
   18bc4:	b2da      	uxtb	r2, r3
   18bc6:	68bb      	ldr	r3, [r7, #8]
   18bc8:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   18bca:	79fb      	ldrb	r3, [r7, #7]
   18bcc:	f003 0308 	and.w	r3, r3, #8
   18bd0:	2b00      	cmp	r3, #0
   18bd2:	bfcc      	ite	gt
   18bd4:	2301      	movgt	r3, #1
   18bd6:	2300      	movle	r3, #0
   18bd8:	b2da      	uxtb	r2, r3
   18bda:	68bb      	ldr	r3, [r7, #8]
   18bdc:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   18bde:	79fb      	ldrb	r3, [r7, #7]
   18be0:	f003 0304 	and.w	r3, r3, #4
   18be4:	2b00      	cmp	r3, #0
   18be6:	bfcc      	ite	gt
   18be8:	2301      	movgt	r3, #1
   18bea:	2300      	movle	r3, #0
   18bec:	b2da      	uxtb	r2, r3
   18bee:	68bb      	ldr	r3, [r7, #8]
   18bf0:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   18bf2:	79fb      	ldrb	r3, [r7, #7]
   18bf4:	f003 0302 	and.w	r3, r3, #2
   18bf8:	2b00      	cmp	r3, #0
   18bfa:	bfcc      	ite	gt
   18bfc:	2301      	movgt	r3, #1
   18bfe:	2300      	movle	r3, #0
   18c00:	b2da      	uxtb	r2, r3
   18c02:	68bb      	ldr	r3, [r7, #8]
   18c04:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   18c08:	79fb      	ldrb	r3, [r7, #7]
   18c0a:	f003 0301 	and.w	r3, r3, #1
   18c0e:	2b00      	cmp	r3, #0
   18c10:	bfcc      	ite	gt
   18c12:	2301      	movgt	r3, #1
   18c14:	2300      	movle	r3, #0
   18c16:	b2da      	uxtb	r2, r3
   18c18:	68bb      	ldr	r3, [r7, #8]
   18c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   18c1e:	68fa      	ldr	r2, [r7, #12]
   18c20:	68bb      	ldr	r3, [r7, #8]
   18c22:	331a      	adds	r3, #26
   18c24:	6819      	ldr	r1, [r3, #0]
   18c26:	685b      	ldr	r3, [r3, #4]
   18c28:	6011      	str	r1, [r2, #0]
   18c2a:	6053      	str	r3, [r2, #4]
   18c2c:	68f8      	ldr	r0, [r7, #12]
   18c2e:	3714      	adds	r7, #20
   18c30:	46bd      	mov	sp, r7
   18c32:	bc80      	pop	{r7}
   18c34:	4770      	bx	lr

00018c36 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   18c36:	b480      	push	{r7}
   18c38:	b083      	sub	sp, #12
   18c3a:	af00      	add	r7, sp, #0
   18c3c:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   18c3e:	687b      	ldr	r3, [r7, #4]
   18c40:	4618      	mov	r0, r3
   18c42:	370c      	adds	r7, #12
   18c44:	46bd      	mov	sp, r7
   18c46:	bc80      	pop	{r7}
   18c48:	4770      	bx	lr

00018c4a <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   18c4a:	b480      	push	{r7}
   18c4c:	b083      	sub	sp, #12
   18c4e:	af00      	add	r7, sp, #0
   18c50:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   18c52:	687b      	ldr	r3, [r7, #4]
   18c54:	4618      	mov	r0, r3
   18c56:	370c      	adds	r7, #12
   18c58:	46bd      	mov	sp, r7
   18c5a:	bc80      	pop	{r7}
   18c5c:	4770      	bx	lr

00018c5e <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   18c5e:	b480      	push	{r7}
   18c60:	b085      	sub	sp, #20
   18c62:	af00      	add	r7, sp, #0
   18c64:	60f8      	str	r0, [r7, #12]
   18c66:	460b      	mov	r3, r1
   18c68:	607a      	str	r2, [r7, #4]
   18c6a:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   18c6c:	687b      	ldr	r3, [r7, #4]
   18c6e:	681a      	ldr	r2, [r3, #0]
   18c70:	68fb      	ldr	r3, [r7, #12]
   18c72:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   18c74:	687b      	ldr	r3, [r7, #4]
   18c76:	685a      	ldr	r2, [r3, #4]
   18c78:	68fb      	ldr	r3, [r7, #12]
   18c7a:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   18c7c:	68fb      	ldr	r3, [r7, #12]
   18c7e:	7afa      	ldrb	r2, [r7, #11]
   18c80:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   18c82:	68fb      	ldr	r3, [r7, #12]
   18c84:	687a      	ldr	r2, [r7, #4]
   18c86:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   18c88:	68fb      	ldr	r3, [r7, #12]
   18c8a:	68db      	ldr	r3, [r3, #12]
   18c8c:	7a5b      	ldrb	r3, [r3, #9]
   18c8e:	b2da      	uxtb	r2, r3
   18c90:	68fb      	ldr	r3, [r7, #12]
   18c92:	719a      	strb	r2, [r3, #6]
	return isOK;
   18c94:	68fb      	ldr	r3, [r7, #12]
   18c96:	799b      	ldrb	r3, [r3, #6]
   18c98:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   18c9a:	4618      	mov	r0, r3
   18c9c:	3714      	adds	r7, #20
   18c9e:	46bd      	mov	sp, r7
   18ca0:	bc80      	pop	{r7}
   18ca2:	4770      	bx	lr

00018ca4 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   18ca4:	b480      	push	{r7}
   18ca6:	b083      	sub	sp, #12
   18ca8:	af00      	add	r7, sp, #0
   18caa:	6078      	str	r0, [r7, #4]
   18cac:	460b      	mov	r3, r1
   18cae:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   18cb0:	78fb      	ldrb	r3, [r7, #3]
   18cb2:	f003 0307 	and.w	r3, r3, #7
   18cb6:	b2db      	uxtb	r3, r3
}
   18cb8:	4618      	mov	r0, r3
   18cba:	370c      	adds	r7, #12
   18cbc:	46bd      	mov	sp, r7
   18cbe:	bc80      	pop	{r7}
   18cc0:	4770      	bx	lr

00018cc2 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   18cc2:	b480      	push	{r7}
   18cc4:	b083      	sub	sp, #12
   18cc6:	af00      	add	r7, sp, #0
   18cc8:	6078      	str	r0, [r7, #4]
   18cca:	4608      	mov	r0, r1
   18ccc:	4611      	mov	r1, r2
   18cce:	461a      	mov	r2, r3
   18cd0:	4603      	mov	r3, r0
   18cd2:	70fb      	strb	r3, [r7, #3]
   18cd4:	460b      	mov	r3, r1
   18cd6:	70bb      	strb	r3, [r7, #2]
   18cd8:	4613      	mov	r3, r2
   18cda:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   18cdc:	78fb      	ldrb	r3, [r7, #3]
   18cde:	2b07      	cmp	r3, #7
   18ce0:	dc01      	bgt.n	18ce6 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   18ce2:	78bb      	ldrb	r3, [r7, #2]
   18ce4:	e000      	b.n	18ce8 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   18ce6:	787b      	ldrb	r3, [r7, #1]
}
   18ce8:	4618      	mov	r0, r3
   18cea:	370c      	adds	r7, #12
   18cec:	46bd      	mov	sp, r7
   18cee:	bc80      	pop	{r7}
   18cf0:	4770      	bx	lr
	...

00018cf4 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   18cf4:	b580      	push	{r7, lr}
   18cf6:	b082      	sub	sp, #8
   18cf8:	af00      	add	r7, sp, #0
   18cfa:	6078      	str	r0, [r7, #4]
   18cfc:	460b      	mov	r3, r1
   18cfe:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   18d00:	687b      	ldr	r3, [r7, #4]
   18d02:	68da      	ldr	r2, [r3, #12]
   18d04:	687b      	ldr	r3, [r7, #4]
   18d06:	7a1b      	ldrb	r3, [r3, #8]
   18d08:	4619      	mov	r1, r3
   18d0a:	4610      	mov	r0, r2
   18d0c:	4b0a      	ldr	r3, [pc, #40]	; (18d38 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   18d0e:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   18d10:	687b      	ldr	r3, [r7, #4]
   18d12:	68db      	ldr	r3, [r3, #12]
   18d14:	1cf9      	adds	r1, r7, #3
   18d16:	2201      	movs	r2, #1
   18d18:	4618      	mov	r0, r3
   18d1a:	4b08      	ldr	r3, [pc, #32]	; (18d3c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   18d1c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   18d1e:	687b      	ldr	r3, [r7, #4]
   18d20:	68db      	ldr	r3, [r3, #12]
   18d22:	6879      	ldr	r1, [r7, #4]
   18d24:	2201      	movs	r2, #1
   18d26:	4618      	mov	r0, r3
   18d28:	4b05      	ldr	r3, [pc, #20]	; (18d40 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   18d2a:	4798      	blx	r3

	return registerValue;
   18d2c:	687b      	ldr	r3, [r7, #4]
   18d2e:	781b      	ldrb	r3, [r3, #0]
}
   18d30:	4618      	mov	r0, r3
   18d32:	3708      	adds	r7, #8
   18d34:	46bd      	mov	sp, r7
   18d36:	bd80      	pop	{r7, pc}
   18d38:	000189bd 	.word	0x000189bd
   18d3c:	000189e9 	.word	0x000189e9
   18d40:	00018a15 	.word	0x00018a15

00018d44 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   18d44:	b580      	push	{r7, lr}
   18d46:	b084      	sub	sp, #16
   18d48:	af00      	add	r7, sp, #0
   18d4a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	68da      	ldr	r2, [r3, #12]
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	7a1b      	ldrb	r3, [r3, #8]
   18d54:	4619      	mov	r1, r3
   18d56:	4610      	mov	r0, r2
   18d58:	4b06      	ldr	r3, [pc, #24]	; (18d74 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   18d5a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   18d5c:	2109      	movs	r1, #9
   18d5e:	6878      	ldr	r0, [r7, #4]
   18d60:	4b05      	ldr	r3, [pc, #20]	; (18d78 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   18d62:	4798      	blx	r3
   18d64:	4603      	mov	r3, r0
   18d66:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   18d68:	7bfb      	ldrb	r3, [r7, #15]
}
   18d6a:	4618      	mov	r0, r3
   18d6c:	3710      	adds	r7, #16
   18d6e:	46bd      	mov	sp, r7
   18d70:	bd80      	pop	{r7, pc}
   18d72:	bf00      	nop
   18d74:	000189bd 	.word	0x000189bd
   18d78:	00018cf5 	.word	0x00018cf5

00018d7c <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   18d7c:	b580      	push	{r7, lr}
   18d7e:	b084      	sub	sp, #16
   18d80:	af00      	add	r7, sp, #0
   18d82:	6078      	str	r0, [r7, #4]
   18d84:	460b      	mov	r3, r1
   18d86:	70fb      	strb	r3, [r7, #3]
   18d88:	4613      	mov	r3, r2
   18d8a:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   18d8c:	687b      	ldr	r3, [r7, #4]
   18d8e:	68da      	ldr	r2, [r3, #12]
   18d90:	687b      	ldr	r3, [r7, #4]
   18d92:	7a1b      	ldrb	r3, [r3, #8]
   18d94:	4619      	mov	r1, r3
   18d96:	4610      	mov	r0, r2
   18d98:	4b09      	ldr	r3, [pc, #36]	; (18dc0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   18d9a:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   18d9c:	78fb      	ldrb	r3, [r7, #3]
   18d9e:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   18da0:	78bb      	ldrb	r3, [r7, #2]
   18da2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   18da4:	687b      	ldr	r3, [r7, #4]
   18da6:	68db      	ldr	r3, [r3, #12]
   18da8:	f107 010c 	add.w	r1, r7, #12
   18dac:	2202      	movs	r2, #2
   18dae:	4618      	mov	r0, r3
   18db0:	4b04      	ldr	r3, [pc, #16]	; (18dc4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   18db2:	4798      	blx	r3
   18db4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   18db6:	4618      	mov	r0, r3
   18db8:	3710      	adds	r7, #16
   18dba:	46bd      	mov	sp, r7
   18dbc:	bd80      	pop	{r7, pc}
   18dbe:	bf00      	nop
   18dc0:	000189bd 	.word	0x000189bd
   18dc4:	000189e9 	.word	0x000189e9

00018dc8 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   18dc8:	b580      	push	{r7, lr}
   18dca:	b082      	sub	sp, #8
   18dcc:	af00      	add	r7, sp, #0
   18dce:	6078      	str	r0, [r7, #4]
   18dd0:	460b      	mov	r3, r1
   18dd2:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   18dd4:	687b      	ldr	r3, [r7, #4]
   18dd6:	68da      	ldr	r2, [r3, #12]
   18dd8:	687b      	ldr	r3, [r7, #4]
   18dda:	7a1b      	ldrb	r3, [r3, #8]
   18ddc:	4619      	mov	r1, r3
   18dde:	4610      	mov	r0, r2
   18de0:	4b06      	ldr	r3, [pc, #24]	; (18dfc <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   18de2:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   18de4:	78fb      	ldrb	r3, [r7, #3]
   18de6:	461a      	mov	r2, r3
   18de8:	2109      	movs	r1, #9
   18dea:	6878      	ldr	r0, [r7, #4]
   18dec:	4b04      	ldr	r3, [pc, #16]	; (18e00 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   18dee:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   18df0:	78fb      	ldrb	r3, [r7, #3]
}
   18df2:	4618      	mov	r0, r3
   18df4:	3708      	adds	r7, #8
   18df6:	46bd      	mov	sp, r7
   18df8:	bd80      	pop	{r7, pc}
   18dfa:	bf00      	nop
   18dfc:	000189bd 	.word	0x000189bd
   18e00:	00018d7d 	.word	0x00018d7d

00018e04 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   18e04:	b580      	push	{r7, lr}
   18e06:	b084      	sub	sp, #16
   18e08:	af00      	add	r7, sp, #0
   18e0a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   18e0c:	2300      	movs	r3, #0
   18e0e:	73fb      	strb	r3, [r7, #15]
   18e10:	7bfb      	ldrb	r3, [r7, #15]
   18e12:	2b07      	cmp	r3, #7
   18e14:	dc0f      	bgt.n	18e36 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   18e16:	7bfb      	ldrb	r3, [r7, #15]
   18e18:	2201      	movs	r2, #1
   18e1a:	4619      	mov	r1, r3
   18e1c:	6878      	ldr	r0, [r7, #4]
   18e1e:	4b08      	ldr	r3, [pc, #32]	; (18e40 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   18e20:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   18e22:	7bfb      	ldrb	r3, [r7, #15]
   18e24:	2201      	movs	r2, #1
   18e26:	4619      	mov	r1, r3
   18e28:	6878      	ldr	r0, [r7, #4]
   18e2a:	4b06      	ldr	r3, [pc, #24]	; (18e44 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   18e2c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   18e2e:	7bfb      	ldrb	r3, [r7, #15]
   18e30:	3301      	adds	r3, #1
   18e32:	73fb      	strb	r3, [r7, #15]
   18e34:	e7ec      	b.n	18e10 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   18e36:	bf00      	nop
   18e38:	3710      	adds	r7, #16
   18e3a:	46bd      	mov	sp, r7
   18e3c:	bd80      	pop	{r7, pc}
   18e3e:	bf00      	nop
   18e40:	00018f7d 	.word	0x00018f7d
   18e44:	00019061 	.word	0x00019061

00018e48 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   18e48:	b580      	push	{r7, lr}
   18e4a:	b084      	sub	sp, #16
   18e4c:	af00      	add	r7, sp, #0
   18e4e:	6078      	str	r0, [r7, #4]
   18e50:	460b      	mov	r3, r1
   18e52:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   18e54:	78fb      	ldrb	r3, [r7, #3]
   18e56:	2b00      	cmp	r3, #0
   18e58:	dd23      	ble.n	18ea2 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   18e5a:	2300      	movs	r3, #0
   18e5c:	73fb      	strb	r3, [r7, #15]
   18e5e:	7bfb      	ldrb	r3, [r7, #15]
   18e60:	2b07      	cmp	r3, #7
   18e62:	dc21      	bgt.n	18ea8 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   18e64:	78fa      	ldrb	r2, [r7, #3]
   18e66:	7bfb      	ldrb	r3, [r7, #15]
   18e68:	fa42 f303 	asr.w	r3, r2, r3
   18e6c:	f003 0301 	and.w	r3, r3, #1
   18e70:	2b00      	cmp	r3, #0
   18e72:	d00c      	beq.n	18e8e <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   18e74:	7bfb      	ldrb	r3, [r7, #15]
   18e76:	2201      	movs	r2, #1
   18e78:	4619      	mov	r1, r3
   18e7a:	6878      	ldr	r0, [r7, #4]
   18e7c:	4b0c      	ldr	r3, [pc, #48]	; (18eb0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   18e7e:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   18e80:	7bfb      	ldrb	r3, [r7, #15]
   18e82:	2201      	movs	r2, #1
   18e84:	4619      	mov	r1, r3
   18e86:	6878      	ldr	r0, [r7, #4]
   18e88:	4b0a      	ldr	r3, [pc, #40]	; (18eb4 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   18e8a:	4798      	blx	r3
   18e8c:	e005      	b.n	18e9a <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   18e8e:	7bfb      	ldrb	r3, [r7, #15]
   18e90:	2200      	movs	r2, #0
   18e92:	4619      	mov	r1, r3
   18e94:	6878      	ldr	r0, [r7, #4]
   18e96:	4b06      	ldr	r3, [pc, #24]	; (18eb0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   18e98:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   18e9a:	7bfb      	ldrb	r3, [r7, #15]
   18e9c:	3301      	adds	r3, #1
   18e9e:	73fb      	strb	r3, [r7, #15]
   18ea0:	e7dd      	b.n	18e5e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   18ea2:	6878      	ldr	r0, [r7, #4]
   18ea4:	4b04      	ldr	r3, [pc, #16]	; (18eb8 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   18ea6:	4798      	blx	r3
	}
	
}
   18ea8:	bf00      	nop
   18eaa:	3710      	adds	r7, #16
   18eac:	46bd      	mov	sp, r7
   18eae:	bd80      	pop	{r7, pc}
   18eb0:	00018f7d 	.word	0x00018f7d
   18eb4:	00019061 	.word	0x00019061
   18eb8:	00018ebd 	.word	0x00018ebd

00018ebc <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   18ebc:	b580      	push	{r7, lr}
   18ebe:	b084      	sub	sp, #16
   18ec0:	af00      	add	r7, sp, #0
   18ec2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   18ec4:	2300      	movs	r3, #0
   18ec6:	73fb      	strb	r3, [r7, #15]
   18ec8:	7bfb      	ldrb	r3, [r7, #15]
   18eca:	2b07      	cmp	r3, #7
   18ecc:	dc09      	bgt.n	18ee2 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   18ece:	7bfb      	ldrb	r3, [r7, #15]
   18ed0:	2200      	movs	r2, #0
   18ed2:	4619      	mov	r1, r3
   18ed4:	6878      	ldr	r0, [r7, #4]
   18ed6:	4b05      	ldr	r3, [pc, #20]	; (18eec <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   18ed8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   18eda:	7bfb      	ldrb	r3, [r7, #15]
   18edc:	3301      	adds	r3, #1
   18ede:	73fb      	strb	r3, [r7, #15]
   18ee0:	e7f2      	b.n	18ec8 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   18ee2:	bf00      	nop
   18ee4:	3710      	adds	r7, #16
   18ee6:	46bd      	mov	sp, r7
   18ee8:	bd80      	pop	{r7, pc}
   18eea:	bf00      	nop
   18eec:	00018f7d 	.word	0x00018f7d

00018ef0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   18ef0:	b580      	push	{r7, lr}
   18ef2:	b084      	sub	sp, #16
   18ef4:	af00      	add	r7, sp, #0
   18ef6:	6078      	str	r0, [r7, #4]
   18ef8:	4608      	mov	r0, r1
   18efa:	4611      	mov	r1, r2
   18efc:	461a      	mov	r2, r3
   18efe:	4603      	mov	r3, r0
   18f00:	70fb      	strb	r3, [r7, #3]
   18f02:	460b      	mov	r3, r1
   18f04:	70bb      	strb	r3, [r7, #2]
   18f06:	4613      	mov	r3, r2
   18f08:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   18f0a:	787b      	ldrb	r3, [r7, #1]
   18f0c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   18f0e:	78fb      	ldrb	r3, [r7, #3]
   18f10:	4619      	mov	r1, r3
   18f12:	6878      	ldr	r0, [r7, #4]
   18f14:	4b16      	ldr	r3, [pc, #88]	; (18f70 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   18f16:	4798      	blx	r3
   18f18:	4603      	mov	r3, r0
   18f1a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   18f1c:	7bfb      	ldrb	r3, [r7, #15]
   18f1e:	4619      	mov	r1, r3
   18f20:	6878      	ldr	r0, [r7, #4]
   18f22:	4b14      	ldr	r3, [pc, #80]	; (18f74 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   18f24:	4798      	blx	r3
   18f26:	4603      	mov	r3, r0
   18f28:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   18f2a:	78bb      	ldrb	r3, [r7, #2]
   18f2c:	2b00      	cmp	r3, #0
   18f2e:	d009      	beq.n	18f44 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   18f30:	7bba      	ldrb	r2, [r7, #14]
   18f32:	7b7b      	ldrb	r3, [r7, #13]
   18f34:	4619      	mov	r1, r3
   18f36:	2301      	movs	r3, #1
   18f38:	408b      	lsls	r3, r1
   18f3a:	b2db      	uxtb	r3, r3
   18f3c:	4313      	orrs	r3, r2
   18f3e:	b2db      	uxtb	r3, r3
   18f40:	73bb      	strb	r3, [r7, #14]
   18f42:	e00a      	b.n	18f5a <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   18f44:	7bba      	ldrb	r2, [r7, #14]
   18f46:	7b7b      	ldrb	r3, [r7, #13]
   18f48:	4619      	mov	r1, r3
   18f4a:	2301      	movs	r3, #1
   18f4c:	408b      	lsls	r3, r1
   18f4e:	b2db      	uxtb	r3, r3
   18f50:	43db      	mvns	r3, r3
   18f52:	b2db      	uxtb	r3, r3
   18f54:	4013      	ands	r3, r2
   18f56:	b2db      	uxtb	r3, r3
   18f58:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   18f5a:	7bba      	ldrb	r2, [r7, #14]
   18f5c:	7bfb      	ldrb	r3, [r7, #15]
   18f5e:	4619      	mov	r1, r3
   18f60:	6878      	ldr	r0, [r7, #4]
   18f62:	4b05      	ldr	r3, [pc, #20]	; (18f78 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   18f64:	4798      	blx	r3
}
   18f66:	bf00      	nop
   18f68:	3710      	adds	r7, #16
   18f6a:	46bd      	mov	sp, r7
   18f6c:	bd80      	pop	{r7, pc}
   18f6e:	bf00      	nop
   18f70:	00018ca5 	.word	0x00018ca5
   18f74:	00018cf5 	.word	0x00018cf5
   18f78:	00018d7d 	.word	0x00018d7d

00018f7c <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   18f7c:	b590      	push	{r4, r7, lr}
   18f7e:	b085      	sub	sp, #20
   18f80:	af02      	add	r7, sp, #8
   18f82:	6078      	str	r0, [r7, #4]
   18f84:	460b      	mov	r3, r1
   18f86:	70fb      	strb	r3, [r7, #3]
   18f88:	4613      	mov	r3, r2
   18f8a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   18f8c:	78bb      	ldrb	r3, [r7, #2]
   18f8e:	2b01      	cmp	r3, #1
   18f90:	bf0c      	ite	eq
   18f92:	2301      	moveq	r3, #1
   18f94:	2300      	movne	r3, #0
   18f96:	b2db      	uxtb	r3, r3
   18f98:	461a      	mov	r2, r3
   18f9a:	78f9      	ldrb	r1, [r7, #3]
   18f9c:	2300      	movs	r3, #0
   18f9e:	9300      	str	r3, [sp, #0]
   18fa0:	2300      	movs	r3, #0
   18fa2:	6878      	ldr	r0, [r7, #4]
   18fa4:	4c02      	ldr	r4, [pc, #8]	; (18fb0 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   18fa6:	47a0      	blx	r4
}
   18fa8:	bf00      	nop
   18faa:	370c      	adds	r7, #12
   18fac:	46bd      	mov	sp, r7
   18fae:	bd90      	pop	{r4, r7, pc}
   18fb0:	00018ef1 	.word	0x00018ef1

00018fb4 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   18fb4:	b590      	push	{r4, r7, lr}
   18fb6:	b085      	sub	sp, #20
   18fb8:	af00      	add	r7, sp, #0
   18fba:	6078      	str	r0, [r7, #4]
   18fbc:	460b      	mov	r3, r1
   18fbe:	70fb      	strb	r3, [r7, #3]
   18fc0:	4613      	mov	r3, r2
   18fc2:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   18fc4:	78fb      	ldrb	r3, [r7, #3]
   18fc6:	4619      	mov	r1, r3
   18fc8:	6878      	ldr	r0, [r7, #4]
   18fca:	4b21      	ldr	r3, [pc, #132]	; (19050 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   18fcc:	4798      	blx	r3
   18fce:	4603      	mov	r3, r0
   18fd0:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   18fd2:	78f9      	ldrb	r1, [r7, #3]
   18fd4:	230a      	movs	r3, #10
   18fd6:	220a      	movs	r2, #10
   18fd8:	6878      	ldr	r0, [r7, #4]
   18fda:	4c1e      	ldr	r4, [pc, #120]	; (19054 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   18fdc:	47a0      	blx	r4
   18fde:	4603      	mov	r3, r0
   18fe0:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   18fe2:	7bfb      	ldrb	r3, [r7, #15]
   18fe4:	4619      	mov	r1, r3
   18fe6:	6878      	ldr	r0, [r7, #4]
   18fe8:	4b1b      	ldr	r3, [pc, #108]	; (19058 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   18fea:	4798      	blx	r3
   18fec:	4603      	mov	r3, r0
   18fee:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   18ff0:	78bb      	ldrb	r3, [r7, #2]
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	d009      	beq.n	1900a <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   18ff6:	7bba      	ldrb	r2, [r7, #14]
   18ff8:	7b7b      	ldrb	r3, [r7, #13]
   18ffa:	4619      	mov	r1, r3
   18ffc:	2301      	movs	r3, #1
   18ffe:	408b      	lsls	r3, r1
   19000:	b2db      	uxtb	r3, r3
   19002:	4313      	orrs	r3, r2
   19004:	b2db      	uxtb	r3, r3
   19006:	73bb      	strb	r3, [r7, #14]
   19008:	e00a      	b.n	19020 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   1900a:	7bba      	ldrb	r2, [r7, #14]
   1900c:	7b7b      	ldrb	r3, [r7, #13]
   1900e:	4619      	mov	r1, r3
   19010:	2301      	movs	r3, #1
   19012:	408b      	lsls	r3, r1
   19014:	b2db      	uxtb	r3, r3
   19016:	43db      	mvns	r3, r3
   19018:	b2db      	uxtb	r3, r3
   1901a:	4013      	ands	r3, r2
   1901c:	b2db      	uxtb	r3, r3
   1901e:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   19020:	78f9      	ldrb	r1, [r7, #3]
   19022:	2309      	movs	r3, #9
   19024:	2209      	movs	r2, #9
   19026:	6878      	ldr	r0, [r7, #4]
   19028:	4c0a      	ldr	r4, [pc, #40]	; (19054 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   1902a:	47a0      	blx	r4
   1902c:	4603      	mov	r3, r0
   1902e:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   19030:	7bba      	ldrb	r2, [r7, #14]
   19032:	7bfb      	ldrb	r3, [r7, #15]
   19034:	4619      	mov	r1, r3
   19036:	6878      	ldr	r0, [r7, #4]
   19038:	4b08      	ldr	r3, [pc, #32]	; (1905c <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   1903a:	4798      	blx	r3
   1903c:	4603      	mov	r3, r0
   1903e:	2b00      	cmp	r3, #0
   19040:	bf0c      	ite	eq
   19042:	2301      	moveq	r3, #1
   19044:	2300      	movne	r3, #0
   19046:	b2db      	uxtb	r3, r3
}
   19048:	4618      	mov	r0, r3
   1904a:	3714      	adds	r7, #20
   1904c:	46bd      	mov	sp, r7
   1904e:	bd90      	pop	{r4, r7, pc}
   19050:	00018ca5 	.word	0x00018ca5
   19054:	00018cc3 	.word	0x00018cc3
   19058:	00018cf5 	.word	0x00018cf5
   1905c:	00018d7d 	.word	0x00018d7d

00019060 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   19060:	b590      	push	{r4, r7, lr}
   19062:	b085      	sub	sp, #20
   19064:	af02      	add	r7, sp, #8
   19066:	6078      	str	r0, [r7, #4]
   19068:	460b      	mov	r3, r1
   1906a:	70fb      	strb	r3, [r7, #3]
   1906c:	4613      	mov	r3, r2
   1906e:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   19070:	78ba      	ldrb	r2, [r7, #2]
   19072:	78f9      	ldrb	r1, [r7, #3]
   19074:	2306      	movs	r3, #6
   19076:	9300      	str	r3, [sp, #0]
   19078:	2306      	movs	r3, #6
   1907a:	6878      	ldr	r0, [r7, #4]
   1907c:	4c02      	ldr	r4, [pc, #8]	; (19088 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1907e:	47a0      	blx	r4
}
   19080:	bf00      	nop
   19082:	370c      	adds	r7, #12
   19084:	46bd      	mov	sp, r7
   19086:	bd90      	pop	{r4, r7, pc}
   19088:	00018ef1 	.word	0x00018ef1

0001908c <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   1908c:	b480      	push	{r7}
   1908e:	b083      	sub	sp, #12
   19090:	af00      	add	r7, sp, #0
   19092:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   19094:	4b04      	ldr	r3, [pc, #16]	; (190a8 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   19096:	681b      	ldr	r3, [r3, #0]
   19098:	2201      	movs	r2, #1
   1909a:	709a      	strb	r2, [r3, #2]
	asm("nop");
   1909c:	bf00      	nop
}
   1909e:	bf00      	nop
   190a0:	370c      	adds	r7, #12
   190a2:	46bd      	mov	sp, r7
   190a4:	bc80      	pop	{r7}
   190a6:	4770      	bx	lr
   190a8:	2000d470 	.word	0x2000d470

000190ac <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   190ac:	b480      	push	{r7}
   190ae:	b083      	sub	sp, #12
   190b0:	af00      	add	r7, sp, #0
   190b2:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   190b4:	687b      	ldr	r3, [r7, #4]
   190b6:	4618      	mov	r0, r3
   190b8:	370c      	adds	r7, #12
   190ba:	46bd      	mov	sp, r7
   190bc:	bc80      	pop	{r7}
   190be:	4770      	bx	lr

000190c0 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   190c0:	b480      	push	{r7}
   190c2:	b083      	sub	sp, #12
   190c4:	af00      	add	r7, sp, #0
   190c6:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   190c8:	687b      	ldr	r3, [r7, #4]
   190ca:	4618      	mov	r0, r3
   190cc:	370c      	adds	r7, #12
   190ce:	46bd      	mov	sp, r7
   190d0:	bc80      	pop	{r7}
   190d2:	4770      	bx	lr

000190d4 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   190d4:	b580      	push	{r7, lr}
   190d6:	b084      	sub	sp, #16
   190d8:	af00      	add	r7, sp, #0
   190da:	60f8      	str	r0, [r7, #12]
   190dc:	60b9      	str	r1, [r7, #8]
   190de:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   190e0:	4a1c      	ldr	r2, [pc, #112]	; (19154 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   190e2:	68fb      	ldr	r3, [r7, #12]
   190e4:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   190e6:	68fb      	ldr	r3, [r7, #12]
   190e8:	68ba      	ldr	r2, [r7, #8]
   190ea:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   190ec:	68fb      	ldr	r3, [r7, #12]
   190ee:	687a      	ldr	r2, [r7, #4]
   190f0:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   190f2:	68fb      	ldr	r3, [r7, #12]
   190f4:	6a1b      	ldr	r3, [r3, #32]
   190f6:	68da      	ldr	r2, [r3, #12]
   190f8:	68fb      	ldr	r3, [r7, #12]
   190fa:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   190fc:	68fb      	ldr	r3, [r7, #12]
   190fe:	6a1b      	ldr	r3, [r3, #32]
   19100:	689a      	ldr	r2, [r3, #8]
   19102:	68fb      	ldr	r3, [r7, #12]
   19104:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   19106:	68fb      	ldr	r3, [r7, #12]
   19108:	4a13      	ldr	r2, [pc, #76]	; (19158 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   1910a:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   1910c:	68fb      	ldr	r3, [r7, #12]
   1910e:	2204      	movs	r2, #4
   19110:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   19112:	68fb      	ldr	r3, [r7, #12]
   19114:	2209      	movs	r2, #9
   19116:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   19118:	68fb      	ldr	r3, [r7, #12]
   1911a:	220e      	movs	r2, #14
   1911c:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   1911e:	68fb      	ldr	r3, [r7, #12]
   19120:	2213      	movs	r2, #19
   19122:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   19124:	20c8      	movs	r0, #200	; 0xc8
   19126:	4b0d      	ldr	r3, [pc, #52]	; (1915c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   19128:	4798      	blx	r3
	temperatureTimer.Init();
   1912a:	480d      	ldr	r0, [pc, #52]	; (19160 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   1912c:	4b0d      	ldr	r3, [pc, #52]	; (19164 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1912e:	4798      	blx	r3
	configure_channels();
   19130:	68f8      	ldr	r0, [r7, #12]
   19132:	4b0d      	ldr	r3, [pc, #52]	; (19168 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   19134:	4798      	blx	r3
	configure_global_parameters();
   19136:	68f8      	ldr	r0, [r7, #12]
   19138:	4b0c      	ldr	r3, [pc, #48]	; (1916c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   1913a:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   1913c:	68fb      	ldr	r3, [r7, #12]
   1913e:	2201      	movs	r2, #1
   19140:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   19142:	68f8      	ldr	r0, [r7, #12]
   19144:	4b0a      	ldr	r3, [pc, #40]	; (19170 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   19146:	4798      	blx	r3
   19148:	4603      	mov	r3, r0
}
   1914a:	4618      	mov	r0, r3
   1914c:	3710      	adds	r7, #16
   1914e:	46bd      	mov	sp, r7
   19150:	bd80      	pop	{r7, pc}
   19152:	bf00      	nop
   19154:	2000d470 	.word	0x2000d470
   19158:	2000d3d0 	.word	0x2000d3d0
   1915c:	0000647d 	.word	0x0000647d
   19160:	2000d390 	.word	0x2000d390
   19164:	00013df5 	.word	0x00013df5
   19168:	0001957d 	.word	0x0001957d
   1916c:	00019635 	.word	0x00019635
   19170:	0001966d 	.word	0x0001966d

00019174 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   19174:	b590      	push	{r4, r7, lr}
   19176:	b089      	sub	sp, #36	; 0x24
   19178:	af02      	add	r7, sp, #8
   1917a:	60f8      	str	r0, [r7, #12]
   1917c:	60b9      	str	r1, [r7, #8]
   1917e:	603b      	str	r3, [r7, #0]
   19180:	4613      	mov	r3, r2
   19182:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   19184:	79fb      	ldrb	r3, [r7, #7]
   19186:	461a      	mov	r2, r3
   19188:	f44f 7100 	mov.w	r1, #512	; 0x200
   1918c:	68f8      	ldr	r0, [r7, #12]
   1918e:	4b0b      	ldr	r3, [pc, #44]	; (191bc <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   19190:	4798      	blx	r3
   19192:	4603      	mov	r3, r0
   19194:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   19196:	8afa      	ldrh	r2, [r7, #22]
   19198:	683b      	ldr	r3, [r7, #0]
   1919a:	9300      	str	r3, [sp, #0]
   1919c:	4613      	mov	r3, r2
   1919e:	2202      	movs	r2, #2
   191a0:	68b9      	ldr	r1, [r7, #8]
   191a2:	68f8      	ldr	r0, [r7, #12]
   191a4:	4c06      	ldr	r4, [pc, #24]	; (191c0 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   191a6:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   191a8:	8afb      	ldrh	r3, [r7, #22]
   191aa:	79fa      	ldrb	r2, [r7, #7]
   191ac:	68b9      	ldr	r1, [r7, #8]
   191ae:	68f8      	ldr	r0, [r7, #12]
   191b0:	4c04      	ldr	r4, [pc, #16]	; (191c4 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   191b2:	47a0      	blx	r4
}
   191b4:	bf00      	nop
   191b6:	371c      	adds	r7, #28
   191b8:	46bd      	mov	sp, r7
   191ba:	bd90      	pop	{r4, r7, pc}
   191bc:	00019551 	.word	0x00019551
   191c0:	00019411 	.word	0x00019411
   191c4:	00019215 	.word	0x00019215

000191c8 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   191c8:	b590      	push	{r4, r7, lr}
   191ca:	b087      	sub	sp, #28
   191cc:	af02      	add	r7, sp, #8
   191ce:	6078      	str	r0, [r7, #4]
   191d0:	460b      	mov	r3, r1
   191d2:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   191d4:	78fb      	ldrb	r3, [r7, #3]
   191d6:	687a      	ldr	r2, [r7, #4]
   191d8:	4413      	add	r3, r2
   191da:	78db      	ldrb	r3, [r3, #3]
   191dc:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   191de:	687b      	ldr	r3, [r7, #4]
   191e0:	2200      	movs	r2, #0
   191e2:	705a      	strb	r2, [r3, #1]
	ready=false;
   191e4:	687b      	ldr	r3, [r7, #4]
   191e6:	2200      	movs	r2, #0
   191e8:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   191ea:	687b      	ldr	r3, [r7, #4]
   191ec:	6d99      	ldr	r1, [r3, #88]	; 0x58
   191ee:	7bfb      	ldrb	r3, [r7, #15]
   191f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   191f4:	b2db      	uxtb	r3, r3
   191f6:	9300      	str	r3, [sp, #0]
   191f8:	2300      	movs	r3, #0
   191fa:	2202      	movs	r2, #2
   191fc:	6878      	ldr	r0, [r7, #4]
   191fe:	4c04      	ldr	r4, [pc, #16]	; (19210 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   19200:	47a0      	blx	r4
	channelOnProcess=channel_number;
   19202:	687b      	ldr	r3, [r7, #4]
   19204:	7bfa      	ldrb	r2, [r7, #15]
   19206:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   19208:	bf00      	nop
   1920a:	3714      	adds	r7, #20
   1920c:	46bd      	mov	sp, r7
   1920e:	bd90      	pop	{r4, r7, pc}
   19210:	000194e1 	.word	0x000194e1

00019214 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   19214:	b590      	push	{r4, r7, lr}
   19216:	b089      	sub	sp, #36	; 0x24
   19218:	af02      	add	r7, sp, #8
   1921a:	60f8      	str	r0, [r7, #12]
   1921c:	60b9      	str	r1, [r7, #8]
   1921e:	4611      	mov	r1, r2
   19220:	461a      	mov	r2, r3
   19222:	460b      	mov	r3, r1
   19224:	71fb      	strb	r3, [r7, #7]
   19226:	4613      	mov	r3, r2
   19228:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   1922a:	88ba      	ldrh	r2, [r7, #4]
   1922c:	2300      	movs	r3, #0
   1922e:	9300      	str	r3, [sp, #0]
   19230:	4613      	mov	r3, r2
   19232:	2203      	movs	r2, #3
   19234:	68b9      	ldr	r1, [r7, #8]
   19236:	68f8      	ldr	r0, [r7, #12]
   19238:	4c03      	ldr	r4, [pc, #12]	; (19248 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   1923a:	47a0      	blx	r4
   1923c:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   1923e:	bf00      	nop
   19240:	371c      	adds	r7, #28
   19242:	46bd      	mov	sp, r7
   19244:	bd90      	pop	{r4, r7, pc}
   19246:	bf00      	nop
   19248:	00019411 	.word	0x00019411

0001924c <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   1924c:	b590      	push	{r4, r7, lr}
   1924e:	b085      	sub	sp, #20
   19250:	af02      	add	r7, sp, #8
   19252:	6078      	str	r0, [r7, #4]
   19254:	460b      	mov	r3, r1
   19256:	70fb      	strb	r3, [r7, #3]
   19258:	4613      	mov	r3, r2
   1925a:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   1925c:	78fb      	ldrb	r3, [r7, #3]
   1925e:	461a      	mov	r2, r3
   19260:	2110      	movs	r1, #16
   19262:	6878      	ldr	r0, [r7, #4]
   19264:	4b17      	ldr	r3, [pc, #92]	; (192c4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   19266:	4798      	blx	r3
   19268:	4603      	mov	r3, r0
   1926a:	461a      	mov	r2, r3
   1926c:	687b      	ldr	r3, [r7, #4]
   1926e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   19272:	687b      	ldr	r3, [r7, #4]
   19274:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19276:	687b      	ldr	r3, [r7, #4]
   19278:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1927c:	2300      	movs	r3, #0
   1927e:	9300      	str	r3, [sp, #0]
   19280:	4613      	mov	r3, r2
   19282:	2203      	movs	r2, #3
   19284:	6878      	ldr	r0, [r7, #4]
   19286:	4c10      	ldr	r4, [pc, #64]	; (192c8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   19288:	47a0      	blx	r4
   1928a:	4602      	mov	r2, r0
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   19290:	687b      	ldr	r3, [r7, #4]
   19292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19294:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   19298:	687b      	ldr	r3, [r7, #4]
   1929a:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   1929c:	687b      	ldr	r3, [r7, #4]
   1929e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   192a0:	78bb      	ldrb	r3, [r7, #2]
   192a2:	78fa      	ldrb	r2, [r7, #3]
   192a4:	6878      	ldr	r0, [r7, #4]
   192a6:	4c09      	ldr	r4, [pc, #36]	; (192cc <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   192a8:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   192aa:	687b      	ldr	r3, [r7, #4]
   192ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   192ae:	0e1b      	lsrs	r3, r3, #24
   192b0:	b2da      	uxtb	r2, r3
   192b2:	687b      	ldr	r3, [r7, #4]
   192b4:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   192b6:	687b      	ldr	r3, [r7, #4]
   192b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   192ba:	4618      	mov	r0, r3
   192bc:	370c      	adds	r7, #12
   192be:	46bd      	mov	sp, r7
   192c0:	bd90      	pop	{r4, r7, pc}
   192c2:	bf00      	nop
   192c4:	00019551 	.word	0x00019551
   192c8:	00019411 	.word	0x00019411
   192cc:	00019325 	.word	0x00019325

000192d0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   192d0:	b580      	push	{r7, lr}
   192d2:	b082      	sub	sp, #8
   192d4:	af00      	add	r7, sp, #0
   192d6:	6078      	str	r0, [r7, #4]
   192d8:	460b      	mov	r3, r1
   192da:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   192dc:	78fb      	ldrb	r3, [r7, #3]
   192de:	687a      	ldr	r2, [r7, #4]
   192e0:	4413      	add	r3, r2
   192e2:	78db      	ldrb	r3, [r3, #3]
   192e4:	4619      	mov	r1, r3
   192e6:	6878      	ldr	r0, [r7, #4]
   192e8:	4b03      	ldr	r3, [pc, #12]	; (192f8 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   192ea:	4798      	blx	r3
   192ec:	4603      	mov	r3, r0
}
   192ee:	4618      	mov	r0, r3
   192f0:	3708      	adds	r7, #8
   192f2:	46bd      	mov	sp, r7
   192f4:	bd80      	pop	{r7, pc}
   192f6:	bf00      	nop
   192f8:	000192fd 	.word	0x000192fd

000192fc <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   192fc:	b580      	push	{r7, lr}
   192fe:	b082      	sub	sp, #8
   19300:	af00      	add	r7, sp, #0
   19302:	6078      	str	r0, [r7, #4]
   19304:	460b      	mov	r3, r1
   19306:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   19308:	78fb      	ldrb	r3, [r7, #3]
   1930a:	2202      	movs	r2, #2
   1930c:	4619      	mov	r1, r3
   1930e:	6878      	ldr	r0, [r7, #4]
   19310:	4b03      	ldr	r3, [pc, #12]	; (19320 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   19312:	4798      	blx	r3
   19314:	4603      	mov	r3, r0
}
   19316:	4618      	mov	r0, r3
   19318:	3708      	adds	r7, #8
   1931a:	46bd      	mov	sp, r7
   1931c:	bd80      	pop	{r7, pc}
   1931e:	bf00      	nop
   19320:	0001924d 	.word	0x0001924d

00019324 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   19324:	b580      	push	{r7, lr}
   19326:	b084      	sub	sp, #16
   19328:	af00      	add	r7, sp, #0
   1932a:	60f8      	str	r0, [r7, #12]
   1932c:	60b9      	str	r1, [r7, #8]
   1932e:	4611      	mov	r1, r2
   19330:	461a      	mov	r2, r3
   19332:	460b      	mov	r3, r1
   19334:	71fb      	strb	r3, [r7, #7]
   19336:	4613      	mov	r3, r2
   19338:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   1933a:	68ba      	ldr	r2, [r7, #8]
   1933c:	68fb      	ldr	r3, [r7, #12]
   1933e:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   19340:	68fb      	ldr	r3, [r7, #12]
   19342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   19344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   19348:	2b00      	cmp	r3, #0
   1934a:	d006      	beq.n	1935a <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   1934c:	68fb      	ldr	r3, [r7, #12]
   1934e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   19350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   19354:	461a      	mov	r2, r3
   19356:	68fb      	ldr	r3, [r7, #12]
   19358:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   1935a:	79bb      	ldrb	r3, [r7, #6]
   1935c:	2b02      	cmp	r3, #2
   1935e:	d11d      	bne.n	1939c <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   19360:	68fb      	ldr	r3, [r7, #12]
   19362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   19364:	4b18      	ldr	r3, [pc, #96]	; (193c8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   19366:	4610      	mov	r0, r2
   19368:	4798      	blx	r3
   1936a:	4602      	mov	r2, r0
   1936c:	4b17      	ldr	r3, [pc, #92]	; (193cc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1936e:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   19372:	4610      	mov	r0, r2
   19374:	4798      	blx	r3
   19376:	4603      	mov	r3, r0
   19378:	461a      	mov	r2, r3
   1937a:	68fb      	ldr	r3, [r7, #12]
   1937c:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1937e:	79fb      	ldrb	r3, [r7, #7]
   19380:	4619      	mov	r1, r3
   19382:	68f8      	ldr	r0, [r7, #12]
   19384:	4b12      	ldr	r3, [pc, #72]	; (193d0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   19386:	4798      	blx	r3
   19388:	4603      	mov	r3, r0
   1938a:	4618      	mov	r0, r3
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   19390:	68f9      	ldr	r1, [r7, #12]
   19392:	1c83      	adds	r3, r0, #2
   19394:	009b      	lsls	r3, r3, #2
   19396:	440b      	add	r3, r1
   19398:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   1939a:	e011      	b.n	193c0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   1939c:	79bb      	ldrb	r3, [r7, #6]
   1939e:	2b01      	cmp	r3, #1
   193a0:	d10e      	bne.n	193c0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   193a2:	68fb      	ldr	r3, [r7, #12]
   193a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   193a6:	4b08      	ldr	r3, [pc, #32]	; (193c8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   193a8:	4610      	mov	r0, r2
   193aa:	4798      	blx	r3
   193ac:	4602      	mov	r2, r0
   193ae:	4b07      	ldr	r3, [pc, #28]	; (193cc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   193b0:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   193b4:	4610      	mov	r0, r2
   193b6:	4798      	blx	r3
   193b8:	4603      	mov	r3, r0
   193ba:	461a      	mov	r2, r3
   193bc:	68fb      	ldr	r3, [r7, #12]
   193be:	65da      	str	r2, [r3, #92]	; 0x5c
}
   193c0:	bf00      	nop
   193c2:	3710      	adds	r7, #16
   193c4:	46bd      	mov	sp, r7
   193c6:	bd80      	pop	{r7, pc}
   193c8:	0001c029 	.word	0x0001c029
   193cc:	0001c239 	.word	0x0001c239
   193d0:	000193d5 	.word	0x000193d5

000193d4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   193d4:	b480      	push	{r7}
   193d6:	b085      	sub	sp, #20
   193d8:	af00      	add	r7, sp, #0
   193da:	6078      	str	r0, [r7, #4]
   193dc:	460b      	mov	r3, r1
   193de:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   193e0:	2300      	movs	r3, #0
   193e2:	73fb      	strb	r3, [r7, #15]
   193e4:	7bfb      	ldrb	r3, [r7, #15]
   193e6:	2b03      	cmp	r3, #3
   193e8:	dc0c      	bgt.n	19404 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   193ea:	7bfb      	ldrb	r3, [r7, #15]
   193ec:	687a      	ldr	r2, [r7, #4]
   193ee:	4413      	add	r3, r2
   193f0:	78db      	ldrb	r3, [r3, #3]
   193f2:	78fa      	ldrb	r2, [r7, #3]
   193f4:	429a      	cmp	r2, r3
   193f6:	d101      	bne.n	193fc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   193f8:	7bfb      	ldrb	r3, [r7, #15]
   193fa:	e004      	b.n	19406 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   193fc:	7bfb      	ldrb	r3, [r7, #15]
   193fe:	3301      	adds	r3, #1
   19400:	73fb      	strb	r3, [r7, #15]
   19402:	e7ef      	b.n	193e4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   19404:	2300      	movs	r3, #0
}
   19406:	4618      	mov	r0, r3
   19408:	3714      	adds	r7, #20
   1940a:	46bd      	mov	sp, r7
   1940c:	bc80      	pop	{r7}
   1940e:	4770      	bx	lr

00019410 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   19410:	b590      	push	{r4, r7, lr}
   19412:	b089      	sub	sp, #36	; 0x24
   19414:	af02      	add	r7, sp, #8
   19416:	60f8      	str	r0, [r7, #12]
   19418:	60b9      	str	r1, [r7, #8]
   1941a:	4611      	mov	r1, r2
   1941c:	461a      	mov	r2, r3
   1941e:	460b      	mov	r3, r1
   19420:	71fb      	strb	r3, [r7, #7]
   19422:	4613      	mov	r3, r2
   19424:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   19426:	2300      	movs	r3, #0
   19428:	75fb      	strb	r3, [r7, #23]
   1942a:	7dfb      	ldrb	r3, [r7, #23]
   1942c:	2b06      	cmp	r3, #6
   1942e:	dc09      	bgt.n	19444 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   19430:	68fb      	ldr	r3, [r7, #12]
   19432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19434:	7dfb      	ldrb	r3, [r7, #23]
   19436:	4413      	add	r3, r2
   19438:	2200      	movs	r2, #0
   1943a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   1943c:	7dfb      	ldrb	r3, [r7, #23]
   1943e:	3301      	adds	r3, #1
   19440:	75fb      	strb	r3, [r7, #23]
   19442:	e7f2      	b.n	1942a <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   19444:	68fb      	ldr	r3, [r7, #12]
   19446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19448:	79fa      	ldrb	r2, [r7, #7]
   1944a:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   1944c:	68fb      	ldr	r3, [r7, #12]
   1944e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19450:	3301      	adds	r3, #1
   19452:	88ba      	ldrh	r2, [r7, #4]
   19454:	1212      	asrs	r2, r2, #8
   19456:	b2d2      	uxtb	r2, r2
   19458:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1945e:	3302      	adds	r3, #2
   19460:	88ba      	ldrh	r2, [r7, #4]
   19462:	b2d2      	uxtb	r2, r2
   19464:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   19466:	68fb      	ldr	r3, [r7, #12]
   19468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1946a:	3303      	adds	r3, #3
   1946c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1946e:	0e12      	lsrs	r2, r2, #24
   19470:	b2d2      	uxtb	r2, r2
   19472:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   19474:	68fb      	ldr	r3, [r7, #12]
   19476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19478:	3304      	adds	r3, #4
   1947a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1947c:	0c12      	lsrs	r2, r2, #16
   1947e:	b2d2      	uxtb	r2, r2
   19480:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   19482:	68fb      	ldr	r3, [r7, #12]
   19484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19486:	3305      	adds	r3, #5
   19488:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1948a:	0a12      	lsrs	r2, r2, #8
   1948c:	b2d2      	uxtb	r2, r2
   1948e:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   19490:	68fb      	ldr	r3, [r7, #12]
   19492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19494:	3306      	adds	r3, #6
   19496:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19498:	b2d2      	uxtb	r2, r2
   1949a:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   1949c:	68fb      	ldr	r3, [r7, #12]
   1949e:	6a18      	ldr	r0, [r3, #32]
   194a0:	68fb      	ldr	r3, [r7, #12]
   194a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   194a4:	f107 0110 	add.w	r1, r7, #16
   194a8:	2307      	movs	r3, #7
   194aa:	9300      	str	r3, [sp, #0]
   194ac:	460b      	mov	r3, r1
   194ae:	68b9      	ldr	r1, [r7, #8]
   194b0:	4c0a      	ldr	r4, [pc, #40]	; (194dc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   194b2:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   194b4:	7c3b      	ldrb	r3, [r7, #16]
   194b6:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   194b8:	7c7b      	ldrb	r3, [r7, #17]
   194ba:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   194bc:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   194be:	7cbb      	ldrb	r3, [r7, #18]
   194c0:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   194c2:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   194c4:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   194c6:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   194c8:	68fb      	ldr	r3, [r7, #12]
   194ca:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   194cc:	bf00      	nop
	return output_data;
   194ce:	68fb      	ldr	r3, [r7, #12]
   194d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   194d2:	4618      	mov	r0, r3
   194d4:	371c      	adds	r7, #28
   194d6:	46bd      	mov	sp, r7
   194d8:	bd90      	pop	{r4, r7, pc}
   194da:	bf00      	nop
   194dc:	000199e9 	.word	0x000199e9

000194e0 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   194e0:	b590      	push	{r4, r7, lr}
   194e2:	b087      	sub	sp, #28
   194e4:	af02      	add	r7, sp, #8
   194e6:	60f8      	str	r0, [r7, #12]
   194e8:	60b9      	str	r1, [r7, #8]
   194ea:	4611      	mov	r1, r2
   194ec:	461a      	mov	r2, r3
   194ee:	460b      	mov	r3, r1
   194f0:	71fb      	strb	r3, [r7, #7]
   194f2:	4613      	mov	r3, r2
   194f4:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   194f6:	68fb      	ldr	r3, [r7, #12]
   194f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   194fa:	79fa      	ldrb	r2, [r7, #7]
   194fc:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   194fe:	68fb      	ldr	r3, [r7, #12]
   19500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19502:	3301      	adds	r3, #1
   19504:	88ba      	ldrh	r2, [r7, #4]
   19506:	1212      	asrs	r2, r2, #8
   19508:	b2d2      	uxtb	r2, r2
   1950a:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   1950c:	68fb      	ldr	r3, [r7, #12]
   1950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19510:	3302      	adds	r3, #2
   19512:	88ba      	ldrh	r2, [r7, #4]
   19514:	b2d2      	uxtb	r2, r2
   19516:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   19518:	68fb      	ldr	r3, [r7, #12]
   1951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1951c:	3303      	adds	r3, #3
   1951e:	f897 2020 	ldrb.w	r2, [r7, #32]
   19522:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   19524:	68fb      	ldr	r3, [r7, #12]
   19526:	6a18      	ldr	r0, [r3, #32]
   19528:	68fb      	ldr	r3, [r7, #12]
   1952a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1952c:	68fb      	ldr	r3, [r7, #12]
   1952e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   19530:	2304      	movs	r3, #4
   19532:	9300      	str	r3, [sp, #0]
   19534:	460b      	mov	r3, r1
   19536:	68b9      	ldr	r1, [r7, #8]
   19538:	4c04      	ldr	r4, [pc, #16]	; (1954c <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   1953a:	47a0      	blx	r4
	return rx[0];
   1953c:	68fb      	ldr	r3, [r7, #12]
   1953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19540:	781b      	ldrb	r3, [r3, #0]
}
   19542:	4618      	mov	r0, r3
   19544:	3714      	adds	r7, #20
   19546:	46bd      	mov	sp, r7
   19548:	bd90      	pop	{r4, r7, pc}
   1954a:	bf00      	nop
   1954c:	000199e9 	.word	0x000199e9

00019550 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   19550:	b480      	push	{r7}
   19552:	b083      	sub	sp, #12
   19554:	af00      	add	r7, sp, #0
   19556:	6078      	str	r0, [r7, #4]
   19558:	460b      	mov	r3, r1
   1955a:	807b      	strh	r3, [r7, #2]
   1955c:	4613      	mov	r3, r2
   1955e:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   19560:	787b      	ldrb	r3, [r7, #1]
   19562:	3b01      	subs	r3, #1
   19564:	b29b      	uxth	r3, r3
   19566:	009b      	lsls	r3, r3, #2
   19568:	b29a      	uxth	r2, r3
   1956a:	887b      	ldrh	r3, [r7, #2]
   1956c:	4413      	add	r3, r2
   1956e:	b29b      	uxth	r3, r3
}
   19570:	4618      	mov	r0, r3
   19572:	370c      	adds	r7, #12
   19574:	46bd      	mov	sp, r7
   19576:	bc80      	pop	{r7}
   19578:	4770      	bx	lr
	...

0001957c <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   1957c:	b590      	push	{r4, r7, lr}
   1957e:	b085      	sub	sp, #20
   19580:	af00      	add	r7, sp, #0
   19582:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   19584:	4b25      	ldr	r3, [pc, #148]	; (1961c <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   19586:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   19588:	687b      	ldr	r3, [r7, #4]
   1958a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1958c:	68fb      	ldr	r3, [r7, #12]
   1958e:	2202      	movs	r2, #2
   19590:	6878      	ldr	r0, [r7, #4]
   19592:	4c23      	ldr	r4, [pc, #140]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19594:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   19596:	4b23      	ldr	r3, [pc, #140]	; (19624 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   19598:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   1959a:	687b      	ldr	r3, [r7, #4]
   1959c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1959e:	68fb      	ldr	r3, [r7, #12]
   195a0:	2204      	movs	r2, #4
   195a2:	6878      	ldr	r0, [r7, #4]
   195a4:	4c1e      	ldr	r4, [pc, #120]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   195a6:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   195a8:	4b1c      	ldr	r3, [pc, #112]	; (1961c <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   195aa:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   195ac:	687b      	ldr	r3, [r7, #4]
   195ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
   195b0:	68fb      	ldr	r3, [r7, #12]
   195b2:	2207      	movs	r2, #7
   195b4:	6878      	ldr	r0, [r7, #4]
   195b6:	4c1a      	ldr	r4, [pc, #104]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   195b8:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   195ba:	4b1b      	ldr	r3, [pc, #108]	; (19628 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   195bc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   195be:	687b      	ldr	r3, [r7, #4]
   195c0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   195c2:	68fb      	ldr	r3, [r7, #12]
   195c4:	2209      	movs	r2, #9
   195c6:	6878      	ldr	r0, [r7, #4]
   195c8:	4c15      	ldr	r4, [pc, #84]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   195ca:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   195cc:	4b13      	ldr	r3, [pc, #76]	; (1961c <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   195ce:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   195d0:	687b      	ldr	r3, [r7, #4]
   195d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   195d4:	68fb      	ldr	r3, [r7, #12]
   195d6:	220c      	movs	r2, #12
   195d8:	6878      	ldr	r0, [r7, #4]
   195da:	4c11      	ldr	r4, [pc, #68]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   195dc:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   195de:	4b13      	ldr	r3, [pc, #76]	; (1962c <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   195e0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   195e2:	687b      	ldr	r3, [r7, #4]
   195e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   195e6:	68fb      	ldr	r3, [r7, #12]
   195e8:	220e      	movs	r2, #14
   195ea:	6878      	ldr	r0, [r7, #4]
   195ec:	4c0c      	ldr	r4, [pc, #48]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   195ee:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   195f0:	4b0a      	ldr	r3, [pc, #40]	; (1961c <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   195f2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   195f4:	687b      	ldr	r3, [r7, #4]
   195f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
   195f8:	68fb      	ldr	r3, [r7, #12]
   195fa:	2211      	movs	r2, #17
   195fc:	6878      	ldr	r0, [r7, #4]
   195fe:	4c08      	ldr	r4, [pc, #32]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19600:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   19602:	4b0b      	ldr	r3, [pc, #44]	; (19630 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   19604:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   19606:	687b      	ldr	r3, [r7, #4]
   19608:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1960a:	68fb      	ldr	r3, [r7, #12]
   1960c:	2213      	movs	r2, #19
   1960e:	6878      	ldr	r0, [r7, #4]
   19610:	4c03      	ldr	r4, [pc, #12]	; (19620 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19612:	47a0      	blx	r4

}
   19614:	bf00      	nop
   19616:	3714      	adds	r7, #20
   19618:	46bd      	mov	sp, r7
   1961a:	bd90      	pop	{r4, r7, pc}
   1961c:	e89c4000 	.word	0xe89c4000
   19620:	00019175 	.word	0x00019175
   19624:	60a91000 	.word	0x60a91000
   19628:	61e91000 	.word	0x61e91000
   1962c:	63291000 	.word	0x63291000
   19630:	64691000 	.word	0x64691000

00019634 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   19634:	b590      	push	{r4, r7, lr}
   19636:	b085      	sub	sp, #20
   19638:	af02      	add	r7, sp, #8
   1963a:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   19640:	2300      	movs	r3, #0
   19642:	9300      	str	r3, [sp, #0]
   19644:	23f0      	movs	r3, #240	; 0xf0
   19646:	2202      	movs	r2, #2
   19648:	6878      	ldr	r0, [r7, #4]
   1964a:	4c07      	ldr	r4, [pc, #28]	; (19668 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1964c:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   1964e:	687b      	ldr	r3, [r7, #4]
   19650:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19652:	2300      	movs	r3, #0
   19654:	9300      	str	r3, [sp, #0]
   19656:	23ff      	movs	r3, #255	; 0xff
   19658:	2202      	movs	r2, #2
   1965a:	6878      	ldr	r0, [r7, #4]
   1965c:	4c02      	ldr	r4, [pc, #8]	; (19668 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1965e:	47a0      	blx	r4
}
   19660:	bf00      	nop
   19662:	370c      	adds	r7, #12
   19664:	46bd      	mov	sp, r7
   19666:	bd90      	pop	{r4, r7, pc}
   19668:	000194e1 	.word	0x000194e1

0001966c <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   1966c:	b580      	push	{r7, lr}
   1966e:	b082      	sub	sp, #8
   19670:	af00      	add	r7, sp, #0
   19672:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   19674:	687b      	ldr	r3, [r7, #4]
   19676:	2200      	movs	r2, #0
   19678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   1967c:	687b      	ldr	r3, [r7, #4]
   1967e:	2200      	movs	r2, #0
   19680:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   19682:	4a31      	ldr	r2, [pc, #196]	; (19748 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   19684:	687b      	ldr	r3, [r7, #4]
   19686:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   19688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1968c:	492f      	ldr	r1, [pc, #188]	; (1974c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1968e:	4830      	ldr	r0, [pc, #192]	; (19750 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19690:	4b30      	ldr	r3, [pc, #192]	; (19754 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   19692:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   19694:	687b      	ldr	r3, [r7, #4]
   19696:	79db      	ldrb	r3, [r3, #7]
   19698:	2b01      	cmp	r3, #1
   1969a:	d009      	beq.n	196b0 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   1969c:	687b      	ldr	r3, [r7, #4]
   1969e:	789b      	ldrb	r3, [r3, #2]
   196a0:	b2db      	uxtb	r3, r3
   196a2:	f083 0301 	eor.w	r3, r3, #1
   196a6:	b2db      	uxtb	r3, r3
   196a8:	2b00      	cmp	r3, #0
   196aa:	d001      	beq.n	196b0 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   196ac:	2301      	movs	r3, #1
   196ae:	e000      	b.n	196b2 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   196b0:	2300      	movs	r3, #0
   196b2:	2b00      	cmp	r3, #0
   196b4:	d034      	beq.n	19720 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   196b6:	2100      	movs	r1, #0
   196b8:	6878      	ldr	r0, [r7, #4]
   196ba:	4b27      	ldr	r3, [pc, #156]	; (19758 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   196bc:	4798      	blx	r3
		delay_ms(1);
   196be:	2001      	movs	r0, #1
   196c0:	4b26      	ldr	r3, [pc, #152]	; (1975c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   196c2:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   196c4:	687b      	ldr	r3, [r7, #4]
   196c6:	781b      	ldrb	r3, [r3, #0]
   196c8:	b2db      	uxtb	r3, r3
   196ca:	f083 0301 	eor.w	r3, r3, #1
   196ce:	b2db      	uxtb	r3, r3
   196d0:	2b00      	cmp	r3, #0
   196d2:	d009      	beq.n	196e8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   196d4:	687b      	ldr	r3, [r7, #4]
   196d6:	789b      	ldrb	r3, [r3, #2]
   196d8:	b2db      	uxtb	r3, r3
   196da:	f083 0301 	eor.w	r3, r3, #1
   196de:	b2db      	uxtb	r3, r3
   196e0:	2b00      	cmp	r3, #0
   196e2:	d001      	beq.n	196e8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   196e4:	2301      	movs	r3, #1
   196e6:	e000      	b.n	196ea <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   196e8:	2300      	movs	r3, #0
   196ea:	2b00      	cmp	r3, #0
   196ec:	d000      	beq.n	196f0 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   196ee:	e7e9      	b.n	196c4 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   196f0:	687b      	ldr	r3, [r7, #4]
   196f2:	789b      	ldrb	r3, [r3, #2]
   196f4:	b2db      	uxtb	r3, r3
   196f6:	f083 0301 	eor.w	r3, r3, #1
   196fa:	b2db      	uxtb	r3, r3
   196fc:	2b00      	cmp	r3, #0
   196fe:	d0c9      	beq.n	19694 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   19700:	687b      	ldr	r3, [r7, #4]
   19702:	781b      	ldrb	r3, [r3, #0]
   19704:	b2db      	uxtb	r3, r3
   19706:	2b00      	cmp	r3, #0
   19708:	d006      	beq.n	19718 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1970a:	687b      	ldr	r3, [r7, #4]
   1970c:	78db      	ldrb	r3, [r3, #3]
   1970e:	4619      	mov	r1, r3
   19710:	6878      	ldr	r0, [r7, #4]
   19712:	4b13      	ldr	r3, [pc, #76]	; (19760 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   19714:	4798      	blx	r3
   19716:	e7bd      	b.n	19694 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   19718:	2001      	movs	r0, #1
   1971a:	4b10      	ldr	r3, [pc, #64]	; (1975c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   1971c:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1971e:	e7b9      	b.n	19694 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   19720:	490a      	ldr	r1, [pc, #40]	; (1974c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   19722:	480b      	ldr	r0, [pc, #44]	; (19750 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19724:	4b0f      	ldr	r3, [pc, #60]	; (19764 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   19726:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   19728:	687b      	ldr	r3, [r7, #4]
   1972a:	79db      	ldrb	r3, [r3, #7]
   1972c:	2b01      	cmp	r3, #1
   1972e:	bf0c      	ite	eq
   19730:	2301      	moveq	r3, #1
   19732:	2300      	movne	r3, #0
   19734:	b2da      	uxtb	r2, r3
   19736:	687b      	ldr	r3, [r7, #4]
   19738:	771a      	strb	r2, [r3, #28]
	return	isOK;
   1973a:	687b      	ldr	r3, [r7, #4]
   1973c:	7f1b      	ldrb	r3, [r3, #28]
	}
   1973e:	4618      	mov	r0, r3
   19740:	3708      	adds	r7, #8
   19742:	46bd      	mov	sp, r7
   19744:	bd80      	pop	{r7, pc}
   19746:	bf00      	nop
   19748:	2000d470 	.word	0x2000d470
   1974c:	0001908d 	.word	0x0001908d
   19750:	2000d390 	.word	0x2000d390
   19754:	00013ff5 	.word	0x00013ff5
   19758:	000191c9 	.word	0x000191c9
   1975c:	0000647d 	.word	0x0000647d
   19760:	000192fd 	.word	0x000192fd
   19764:	00013f85 	.word	0x00013f85

00019768 <_Z41__static_initialization_and_destruction_0ii>:
   19768:	b580      	push	{r7, lr}
   1976a:	b082      	sub	sp, #8
   1976c:	af00      	add	r7, sp, #0
   1976e:	6078      	str	r0, [r7, #4]
   19770:	6039      	str	r1, [r7, #0]
   19772:	687b      	ldr	r3, [r7, #4]
   19774:	2b01      	cmp	r3, #1
   19776:	d143      	bne.n	19800 <_Z41__static_initialization_and_destruction_0ii+0x98>
   19778:	683b      	ldr	r3, [r7, #0]
   1977a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1977e:	4293      	cmp	r3, r2
   19780:	d13e      	bne.n	19800 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   19782:	4921      	ldr	r1, [pc, #132]	; (19808 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   19784:	4821      	ldr	r0, [pc, #132]	; (1980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   19786:	4b22      	ldr	r3, [pc, #136]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   19788:	4798      	blx	r3
   1978a:	4a22      	ldr	r2, [pc, #136]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   1978c:	4922      	ldr	r1, [pc, #136]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   1978e:	481f      	ldr	r0, [pc, #124]	; (1980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   19790:	4b22      	ldr	r3, [pc, #136]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   19792:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   19794:	4922      	ldr	r1, [pc, #136]	; (19820 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   19796:	4823      	ldr	r0, [pc, #140]	; (19824 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19798:	4b1d      	ldr	r3, [pc, #116]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   1979a:	4798      	blx	r3
   1979c:	4a1d      	ldr	r2, [pc, #116]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   1979e:	491e      	ldr	r1, [pc, #120]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197a0:	4820      	ldr	r0, [pc, #128]	; (19824 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   197a2:	4b1e      	ldr	r3, [pc, #120]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197a4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   197a6:	4920      	ldr	r1, [pc, #128]	; (19828 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   197a8:	4820      	ldr	r0, [pc, #128]	; (1982c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   197aa:	4b19      	ldr	r3, [pc, #100]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   197ac:	4798      	blx	r3
   197ae:	4a19      	ldr	r2, [pc, #100]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   197b0:	4919      	ldr	r1, [pc, #100]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197b2:	481e      	ldr	r0, [pc, #120]	; (1982c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   197b4:	4b19      	ldr	r3, [pc, #100]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197b6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   197b8:	491d      	ldr	r1, [pc, #116]	; (19830 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   197ba:	481e      	ldr	r0, [pc, #120]	; (19834 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   197bc:	4b14      	ldr	r3, [pc, #80]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   197be:	4798      	blx	r3
   197c0:	4a14      	ldr	r2, [pc, #80]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   197c2:	4915      	ldr	r1, [pc, #84]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197c4:	481b      	ldr	r0, [pc, #108]	; (19834 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   197c6:	4b15      	ldr	r3, [pc, #84]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197c8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   197ca:	491b      	ldr	r1, [pc, #108]	; (19838 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   197cc:	481b      	ldr	r0, [pc, #108]	; (1983c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   197ce:	4b10      	ldr	r3, [pc, #64]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   197d0:	4798      	blx	r3
   197d2:	4a10      	ldr	r2, [pc, #64]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   197d4:	4910      	ldr	r1, [pc, #64]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197d6:	4819      	ldr	r0, [pc, #100]	; (1983c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   197d8:	4b10      	ldr	r3, [pc, #64]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197da:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   197dc:	4918      	ldr	r1, [pc, #96]	; (19840 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   197de:	4819      	ldr	r0, [pc, #100]	; (19844 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   197e0:	4b0b      	ldr	r3, [pc, #44]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   197e2:	4798      	blx	r3
   197e4:	4a0b      	ldr	r2, [pc, #44]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   197e6:	490c      	ldr	r1, [pc, #48]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197e8:	4816      	ldr	r0, [pc, #88]	; (19844 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   197ea:	4b0c      	ldr	r3, [pc, #48]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197ec:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   197ee:	4916      	ldr	r1, [pc, #88]	; (19848 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   197f0:	4816      	ldr	r0, [pc, #88]	; (1984c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   197f2:	4b07      	ldr	r3, [pc, #28]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   197f4:	4798      	blx	r3
   197f6:	4a07      	ldr	r2, [pc, #28]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   197f8:	4907      	ldr	r1, [pc, #28]	; (19818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   197fa:	4814      	ldr	r0, [pc, #80]	; (1984c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   197fc:	4b07      	ldr	r3, [pc, #28]	; (1981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   197fe:	4798      	blx	r3
   19800:	bf00      	nop
   19802:	3708      	adds	r7, #8
   19804:	46bd      	mov	sp, r7
   19806:	bd80      	pop	{r7, pc}
   19808:	2000d6d8 	.word	0x2000d6d8
   1980c:	2000d390 	.word	0x2000d390
   19810:	00013d09 	.word	0x00013d09
   19814:	20000000 	.word	0x20000000
   19818:	00013d41 	.word	0x00013d41
   1981c:	0001a44d 	.word	0x0001a44d
   19820:	2000d76c 	.word	0x2000d76c
   19824:	2000d3b0 	.word	0x2000d3b0
   19828:	2000d870 	.word	0x2000d870
   1982c:	2000d3d0 	.word	0x2000d3d0
   19830:	2000d78c 	.word	0x2000d78c
   19834:	2000d3f0 	.word	0x2000d3f0
   19838:	2000d830 	.word	0x2000d830
   1983c:	2000d410 	.word	0x2000d410
   19840:	2000d850 	.word	0x2000d850
   19844:	2000d430 	.word	0x2000d430
   19848:	2000d748 	.word	0x2000d748
   1984c:	2000d450 	.word	0x2000d450

00019850 <_GLOBAL__sub_I_ptrLTCClass>:
   19850:	b580      	push	{r7, lr}
   19852:	af00      	add	r7, sp, #0
   19854:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19858:	2001      	movs	r0, #1
   1985a:	4b01      	ldr	r3, [pc, #4]	; (19860 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   1985c:	4798      	blx	r3
   1985e:	bd80      	pop	{r7, pc}
   19860:	00019769 	.word	0x00019769

00019864 <hri_port_set_OUT_reg>:
{
   19864:	b480      	push	{r7}
   19866:	b085      	sub	sp, #20
   19868:	af00      	add	r7, sp, #0
   1986a:	60f8      	str	r0, [r7, #12]
   1986c:	460b      	mov	r3, r1
   1986e:	607a      	str	r2, [r7, #4]
   19870:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19872:	7afb      	ldrb	r3, [r7, #11]
   19874:	68fa      	ldr	r2, [r7, #12]
   19876:	01db      	lsls	r3, r3, #7
   19878:	4413      	add	r3, r2
   1987a:	3318      	adds	r3, #24
   1987c:	687a      	ldr	r2, [r7, #4]
   1987e:	601a      	str	r2, [r3, #0]
}
   19880:	bf00      	nop
   19882:	3714      	adds	r7, #20
   19884:	46bd      	mov	sp, r7
   19886:	bc80      	pop	{r7}
   19888:	4770      	bx	lr

0001988a <hri_port_clear_OUT_reg>:
{
   1988a:	b480      	push	{r7}
   1988c:	b085      	sub	sp, #20
   1988e:	af00      	add	r7, sp, #0
   19890:	60f8      	str	r0, [r7, #12]
   19892:	460b      	mov	r3, r1
   19894:	607a      	str	r2, [r7, #4]
   19896:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   19898:	7afb      	ldrb	r3, [r7, #11]
   1989a:	68fa      	ldr	r2, [r7, #12]
   1989c:	01db      	lsls	r3, r3, #7
   1989e:	4413      	add	r3, r2
   198a0:	3314      	adds	r3, #20
   198a2:	687a      	ldr	r2, [r7, #4]
   198a4:	601a      	str	r2, [r3, #0]
}
   198a6:	bf00      	nop
   198a8:	3714      	adds	r7, #20
   198aa:	46bd      	mov	sp, r7
   198ac:	bc80      	pop	{r7}
   198ae:	4770      	bx	lr

000198b0 <_gpio_set_level>:
{
   198b0:	b580      	push	{r7, lr}
   198b2:	b082      	sub	sp, #8
   198b4:	af00      	add	r7, sp, #0
   198b6:	4603      	mov	r3, r0
   198b8:	6039      	str	r1, [r7, #0]
   198ba:	71fb      	strb	r3, [r7, #7]
   198bc:	4613      	mov	r3, r2
   198be:	71bb      	strb	r3, [r7, #6]
	if (level) {
   198c0:	79bb      	ldrb	r3, [r7, #6]
   198c2:	2b00      	cmp	r3, #0
   198c4:	d006      	beq.n	198d4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   198c6:	79fb      	ldrb	r3, [r7, #7]
   198c8:	683a      	ldr	r2, [r7, #0]
   198ca:	4619      	mov	r1, r3
   198cc:	4806      	ldr	r0, [pc, #24]	; (198e8 <_gpio_set_level+0x38>)
   198ce:	4b07      	ldr	r3, [pc, #28]	; (198ec <_gpio_set_level+0x3c>)
   198d0:	4798      	blx	r3
}
   198d2:	e005      	b.n	198e0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   198d4:	79fb      	ldrb	r3, [r7, #7]
   198d6:	683a      	ldr	r2, [r7, #0]
   198d8:	4619      	mov	r1, r3
   198da:	4803      	ldr	r0, [pc, #12]	; (198e8 <_gpio_set_level+0x38>)
   198dc:	4b04      	ldr	r3, [pc, #16]	; (198f0 <_gpio_set_level+0x40>)
   198de:	4798      	blx	r3
}
   198e0:	bf00      	nop
   198e2:	3708      	adds	r7, #8
   198e4:	46bd      	mov	sp, r7
   198e6:	bd80      	pop	{r7, pc}
   198e8:	41008000 	.word	0x41008000
   198ec:	00019865 	.word	0x00019865
   198f0:	0001988b 	.word	0x0001988b

000198f4 <gpio_set_pin_level>:
{
   198f4:	b580      	push	{r7, lr}
   198f6:	b082      	sub	sp, #8
   198f8:	af00      	add	r7, sp, #0
   198fa:	4603      	mov	r3, r0
   198fc:	460a      	mov	r2, r1
   198fe:	71fb      	strb	r3, [r7, #7]
   19900:	4613      	mov	r3, r2
   19902:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19904:	79fb      	ldrb	r3, [r7, #7]
   19906:	115b      	asrs	r3, r3, #5
   19908:	b2d8      	uxtb	r0, r3
   1990a:	79fb      	ldrb	r3, [r7, #7]
   1990c:	f003 031f 	and.w	r3, r3, #31
   19910:	2201      	movs	r2, #1
   19912:	fa02 f303 	lsl.w	r3, r2, r3
   19916:	79ba      	ldrb	r2, [r7, #6]
   19918:	4619      	mov	r1, r3
   1991a:	4b03      	ldr	r3, [pc, #12]	; (19928 <gpio_set_pin_level+0x34>)
   1991c:	4798      	blx	r3
}
   1991e:	bf00      	nop
   19920:	3708      	adds	r7, #8
   19922:	46bd      	mov	sp, r7
   19924:	bd80      	pop	{r7, pc}
   19926:	bf00      	nop
   19928:	000198b1 	.word	0x000198b1

0001992c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   1992c:	b480      	push	{r7}
   1992e:	b083      	sub	sp, #12
   19930:	af00      	add	r7, sp, #0
   19932:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   19934:	4a05      	ldr	r2, [pc, #20]	; (1994c <_ZN6LT_SPIC1Ev+0x20>)
   19936:	687b      	ldr	r3, [r7, #4]
   19938:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   1993a:	687b      	ldr	r3, [r7, #4]
   1993c:	4a04      	ldr	r2, [pc, #16]	; (19950 <_ZN6LT_SPIC1Ev+0x24>)
   1993e:	605a      	str	r2, [r3, #4]
} //LT_SPI
   19940:	687b      	ldr	r3, [r7, #4]
   19942:	4618      	mov	r0, r3
   19944:	370c      	adds	r7, #12
   19946:	46bd      	mov	sp, r7
   19948:	bc80      	pop	{r7}
   1994a:	4770      	bx	lr
   1994c:	2000d474 	.word	0x2000d474
   19950:	2000d478 	.word	0x2000d478

00019954 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   19954:	b480      	push	{r7}
   19956:	b083      	sub	sp, #12
   19958:	af00      	add	r7, sp, #0
   1995a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   1995c:	687b      	ldr	r3, [r7, #4]
   1995e:	4618      	mov	r0, r3
   19960:	370c      	adds	r7, #12
   19962:	46bd      	mov	sp, r7
   19964:	bc80      	pop	{r7}
   19966:	4770      	bx	lr

00019968 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   19968:	b580      	push	{r7, lr}
   1996a:	b082      	sub	sp, #8
   1996c:	af00      	add	r7, sp, #0
   1996e:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   19970:	687b      	ldr	r3, [r7, #4]
   19972:	685a      	ldr	r2, [r3, #4]
   19974:	687b      	ldr	r3, [r7, #4]
   19976:	691b      	ldr	r3, [r3, #16]
   19978:	4619      	mov	r1, r3
   1997a:	4610      	mov	r0, r2
   1997c:	4b0e      	ldr	r3, [pc, #56]	; (199b8 <_ZN6LT_SPI4initEv+0x50>)
   1997e:	4798      	blx	r3
	spiTemp->init();
   19980:	687b      	ldr	r3, [r7, #4]
   19982:	685b      	ldr	r3, [r3, #4]
   19984:	4618      	mov	r0, r3
   19986:	4b0d      	ldr	r3, [pc, #52]	; (199bc <_ZN6LT_SPI4initEv+0x54>)
   19988:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   1998a:	687b      	ldr	r3, [r7, #4]
   1998c:	685b      	ldr	r3, [r3, #4]
   1998e:	685a      	ldr	r2, [r3, #4]
   19990:	687b      	ldr	r3, [r7, #4]
   19992:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   19994:	687b      	ldr	r3, [r7, #4]
   19996:	685b      	ldr	r3, [r3, #4]
   19998:	689a      	ldr	r2, [r3, #8]
   1999a:	687b      	ldr	r3, [r7, #4]
   1999c:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   1999e:	687b      	ldr	r3, [r7, #4]
   199a0:	685b      	ldr	r3, [r3, #4]
   199a2:	4618      	mov	r0, r3
   199a4:	4b06      	ldr	r3, [pc, #24]	; (199c0 <_ZN6LT_SPI4initEv+0x58>)
   199a6:	4798      	blx	r3
	ready=true;
   199a8:	687b      	ldr	r3, [r7, #4]
   199aa:	2201      	movs	r2, #1
   199ac:	701a      	strb	r2, [r3, #0]
}
   199ae:	bf00      	nop
   199b0:	3708      	adds	r7, #8
   199b2:	46bd      	mov	sp, r7
   199b4:	bd80      	pop	{r7, pc}
   199b6:	bf00      	nop
   199b8:	00013851 	.word	0x00013851
   199bc:	00013809 	.word	0x00013809
   199c0:	00013875 	.word	0x00013875

000199c4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   199c4:	b480      	push	{r7}
   199c6:	b083      	sub	sp, #12
   199c8:	af00      	add	r7, sp, #0
   199ca:	6078      	str	r0, [r7, #4]
   199cc:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   199ce:	687b      	ldr	r3, [r7, #4]
   199d0:	683a      	ldr	r2, [r7, #0]
   199d2:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   199d4:	4a03      	ldr	r2, [pc, #12]	; (199e4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   199d6:	687b      	ldr	r3, [r7, #4]
   199d8:	6013      	str	r3, [r2, #0]
}
   199da:	bf00      	nop
   199dc:	370c      	adds	r7, #12
   199de:	46bd      	mov	sp, r7
   199e0:	bc80      	pop	{r7}
   199e2:	4770      	bx	lr
   199e4:	2000d474 	.word	0x2000d474

000199e8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   199e8:	b580      	push	{r7, lr}
   199ea:	b086      	sub	sp, #24
   199ec:	af00      	add	r7, sp, #0
   199ee:	60f8      	str	r0, [r7, #12]
   199f0:	60b9      	str	r1, [r7, #8]
   199f2:	607a      	str	r2, [r7, #4]
   199f4:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   199f6:	687b      	ldr	r3, [r7, #4]
   199f8:	781b      	ldrb	r3, [r3, #0]
   199fa:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   199fc:	68b9      	ldr	r1, [r7, #8]
   199fe:	68f8      	ldr	r0, [r7, #12]
   19a00:	4b25      	ldr	r3, [pc, #148]	; (19a98 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   19a02:	4798      	blx	r3
	
	switch(rOrw){
   19a04:	7dfb      	ldrb	r3, [r7, #23]
   19a06:	2b02      	cmp	r3, #2
   19a08:	d002      	beq.n	19a10 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   19a0a:	2b03      	cmp	r3, #3
   19a0c:	d009      	beq.n	19a22 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   19a0e:	e028      	b.n	19a62 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   19a10:	68fb      	ldr	r3, [r7, #12]
   19a12:	685b      	ldr	r3, [r3, #4]
   19a14:	f897 2020 	ldrb.w	r2, [r7, #32]
   19a18:	6879      	ldr	r1, [r7, #4]
   19a1a:	4618      	mov	r0, r3
   19a1c:	4b1f      	ldr	r3, [pc, #124]	; (19a9c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19a1e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   19a20:	e031      	b.n	19a86 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   19a22:	68fb      	ldr	r3, [r7, #12]
   19a24:	685b      	ldr	r3, [r3, #4]
   19a26:	2203      	movs	r2, #3
   19a28:	6879      	ldr	r1, [r7, #4]
   19a2a:	4618      	mov	r0, r3
   19a2c:	4b1b      	ldr	r3, [pc, #108]	; (19a9c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19a2e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   19a30:	f897 3020 	ldrb.w	r3, [r7, #32]
   19a34:	2b04      	cmp	r3, #4
   19a36:	dd0b      	ble.n	19a50 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   19a38:	68fb      	ldr	r3, [r7, #12]
   19a3a:	6858      	ldr	r0, [r3, #4]
   19a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
   19a40:	3b03      	subs	r3, #3
   19a42:	461a      	mov	r2, r3
   19a44:	6839      	ldr	r1, [r7, #0]
   19a46:	4b16      	ldr	r3, [pc, #88]	; (19aa0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19a48:	4798      	blx	r3
					asm("nop");
   19a4a:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   19a4c:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   19a4e:	e01a      	b.n	19a86 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   19a50:	68fb      	ldr	r3, [r7, #12]
   19a52:	685b      	ldr	r3, [r3, #4]
   19a54:	2201      	movs	r2, #1
   19a56:	6839      	ldr	r1, [r7, #0]
   19a58:	4618      	mov	r0, r3
   19a5a:	4b11      	ldr	r3, [pc, #68]	; (19aa0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19a5c:	4798      	blx	r3
				asm("nop");
   19a5e:	bf00      	nop
			break;
   19a60:	e011      	b.n	19a86 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   19a62:	68fb      	ldr	r3, [r7, #12]
   19a64:	685b      	ldr	r3, [r3, #4]
   19a66:	f897 2020 	ldrb.w	r2, [r7, #32]
   19a6a:	6879      	ldr	r1, [r7, #4]
   19a6c:	4618      	mov	r0, r3
   19a6e:	4b0b      	ldr	r3, [pc, #44]	; (19a9c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19a70:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   19a72:	68fb      	ldr	r3, [r7, #12]
   19a74:	6858      	ldr	r0, [r3, #4]
   19a76:	f897 3020 	ldrb.w	r3, [r7, #32]
   19a7a:	3b03      	subs	r3, #3
   19a7c:	461a      	mov	r2, r3
   19a7e:	6839      	ldr	r1, [r7, #0]
   19a80:	4b07      	ldr	r3, [pc, #28]	; (19aa0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19a82:	4798      	blx	r3
			break;
   19a84:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   19a86:	68b9      	ldr	r1, [r7, #8]
   19a88:	68f8      	ldr	r0, [r7, #12]
   19a8a:	4b06      	ldr	r3, [pc, #24]	; (19aa4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   19a8c:	4798      	blx	r3
	asm("nop");
   19a8e:	bf00      	nop
	
}
   19a90:	bf00      	nop
   19a92:	3718      	adds	r7, #24
   19a94:	46bd      	mov	sp, r7
   19a96:	bd80      	pop	{r7, pc}
   19a98:	00019aa9 	.word	0x00019aa9
   19a9c:	000138b1 	.word	0x000138b1
   19aa0:	000138f5 	.word	0x000138f5
   19aa4:	00019af1 	.word	0x00019af1

00019aa8 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   19aa8:	b580      	push	{r7, lr}
   19aaa:	b082      	sub	sp, #8
   19aac:	af00      	add	r7, sp, #0
   19aae:	6078      	str	r0, [r7, #4]
   19ab0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19ab2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   19ab6:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   19ab8:	683b      	ldr	r3, [r7, #0]
   19aba:	b2db      	uxtb	r3, r3
   19abc:	2100      	movs	r1, #0
   19abe:	4618      	mov	r0, r3
   19ac0:	4b08      	ldr	r3, [pc, #32]	; (19ae4 <_ZN6LT_SPI4OpenEm+0x3c>)
   19ac2:	4798      	blx	r3
	 delay_us(10);
   19ac4:	200a      	movs	r0, #10
   19ac6:	4b08      	ldr	r3, [pc, #32]	; (19ae8 <_ZN6LT_SPI4OpenEm+0x40>)
   19ac8:	4798      	blx	r3
	spiTemp->Enable();
   19aca:	687b      	ldr	r3, [r7, #4]
   19acc:	685b      	ldr	r3, [r3, #4]
   19ace:	4618      	mov	r0, r3
   19ad0:	4b06      	ldr	r3, [pc, #24]	; (19aec <_ZN6LT_SPI4OpenEm+0x44>)
   19ad2:	4798      	blx	r3
	 delay_us(10);
   19ad4:	200a      	movs	r0, #10
   19ad6:	4b04      	ldr	r3, [pc, #16]	; (19ae8 <_ZN6LT_SPI4OpenEm+0x40>)
   19ad8:	4798      	blx	r3
 }
   19ada:	bf00      	nop
   19adc:	3708      	adds	r7, #8
   19ade:	46bd      	mov	sp, r7
   19ae0:	bd80      	pop	{r7, pc}
   19ae2:	bf00      	nop
   19ae4:	000198f5 	.word	0x000198f5
   19ae8:	00006449 	.word	0x00006449
   19aec:	00013875 	.word	0x00013875

00019af0 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   19af0:	b580      	push	{r7, lr}
   19af2:	b082      	sub	sp, #8
   19af4:	af00      	add	r7, sp, #0
   19af6:	6078      	str	r0, [r7, #4]
   19af8:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   19afa:	200a      	movs	r0, #10
   19afc:	4b0b      	ldr	r3, [pc, #44]	; (19b2c <_ZN6LT_SPI5CloseEm+0x3c>)
   19afe:	4798      	blx	r3
	 spiTemp->Disable();
   19b00:	687b      	ldr	r3, [r7, #4]
   19b02:	685b      	ldr	r3, [r3, #4]
   19b04:	4618      	mov	r0, r3
   19b06:	4b0a      	ldr	r3, [pc, #40]	; (19b30 <_ZN6LT_SPI5CloseEm+0x40>)
   19b08:	4798      	blx	r3
	delay_us(10);
   19b0a:	200a      	movs	r0, #10
   19b0c:	4b07      	ldr	r3, [pc, #28]	; (19b2c <_ZN6LT_SPI5CloseEm+0x3c>)
   19b0e:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   19b10:	683b      	ldr	r3, [r7, #0]
   19b12:	b2db      	uxtb	r3, r3
   19b14:	2101      	movs	r1, #1
   19b16:	4618      	mov	r0, r3
   19b18:	4b06      	ldr	r3, [pc, #24]	; (19b34 <_ZN6LT_SPI5CloseEm+0x44>)
   19b1a:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   19b1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19b20:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   19b22:	bf00      	nop
   19b24:	3708      	adds	r7, #8
   19b26:	46bd      	mov	sp, r7
   19b28:	bd80      	pop	{r7, pc}
   19b2a:	bf00      	nop
   19b2c:	00006449 	.word	0x00006449
   19b30:	00013939 	.word	0x00013939
   19b34:	000198f5 	.word	0x000198f5

00019b38 <_Z41__static_initialization_and_destruction_0ii>:
   19b38:	b580      	push	{r7, lr}
   19b3a:	b082      	sub	sp, #8
   19b3c:	af00      	add	r7, sp, #0
   19b3e:	6078      	str	r0, [r7, #4]
   19b40:	6039      	str	r1, [r7, #0]
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	2b01      	cmp	r3, #1
   19b46:	d10c      	bne.n	19b62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   19b48:	683b      	ldr	r3, [r7, #0]
   19b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b4e:	4293      	cmp	r3, r2
   19b50:	d107      	bne.n	19b62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   19b52:	4806      	ldr	r0, [pc, #24]	; (19b6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19b54:	4b06      	ldr	r3, [pc, #24]	; (19b70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19b56:	4798      	blx	r3
   19b58:	4a06      	ldr	r2, [pc, #24]	; (19b74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   19b5a:	4907      	ldr	r1, [pc, #28]	; (19b78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19b5c:	4803      	ldr	r0, [pc, #12]	; (19b6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19b5e:	4b07      	ldr	r3, [pc, #28]	; (19b7c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19b60:	4798      	blx	r3
   19b62:	bf00      	nop
   19b64:	3708      	adds	r7, #8
   19b66:	46bd      	mov	sp, r7
   19b68:	bd80      	pop	{r7, pc}
   19b6a:	bf00      	nop
   19b6c:	2000d478 	.word	0x2000d478
   19b70:	000137ad 	.word	0x000137ad
   19b74:	20000000 	.word	0x20000000
   19b78:	000137f5 	.word	0x000137f5
   19b7c:	0001a44d 	.word	0x0001a44d

00019b80 <_GLOBAL__sub_I_ptrLTSPIClass>:
   19b80:	b580      	push	{r7, lr}
   19b82:	af00      	add	r7, sp, #0
   19b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19b88:	2001      	movs	r0, #1
   19b8a:	4b01      	ldr	r3, [pc, #4]	; (19b90 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   19b8c:	4798      	blx	r3
   19b8e:	bd80      	pop	{r7, pc}
   19b90:	00019b39 	.word	0x00019b39

00019b94 <hri_port_set_DIR_reg>:
{
   19b94:	b480      	push	{r7}
   19b96:	b085      	sub	sp, #20
   19b98:	af00      	add	r7, sp, #0
   19b9a:	60f8      	str	r0, [r7, #12]
   19b9c:	460b      	mov	r3, r1
   19b9e:	607a      	str	r2, [r7, #4]
   19ba0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   19ba2:	7afb      	ldrb	r3, [r7, #11]
   19ba4:	68fa      	ldr	r2, [r7, #12]
   19ba6:	01db      	lsls	r3, r3, #7
   19ba8:	4413      	add	r3, r2
   19baa:	3308      	adds	r3, #8
   19bac:	687a      	ldr	r2, [r7, #4]
   19bae:	601a      	str	r2, [r3, #0]
}
   19bb0:	bf00      	nop
   19bb2:	3714      	adds	r7, #20
   19bb4:	46bd      	mov	sp, r7
   19bb6:	bc80      	pop	{r7}
   19bb8:	4770      	bx	lr

00019bba <hri_port_clear_DIR_reg>:
{
   19bba:	b480      	push	{r7}
   19bbc:	b085      	sub	sp, #20
   19bbe:	af00      	add	r7, sp, #0
   19bc0:	60f8      	str	r0, [r7, #12]
   19bc2:	460b      	mov	r3, r1
   19bc4:	607a      	str	r2, [r7, #4]
   19bc6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   19bc8:	7afb      	ldrb	r3, [r7, #11]
   19bca:	68fa      	ldr	r2, [r7, #12]
   19bcc:	01db      	lsls	r3, r3, #7
   19bce:	4413      	add	r3, r2
   19bd0:	3304      	adds	r3, #4
   19bd2:	687a      	ldr	r2, [r7, #4]
   19bd4:	601a      	str	r2, [r3, #0]
}
   19bd6:	bf00      	nop
   19bd8:	3714      	adds	r7, #20
   19bda:	46bd      	mov	sp, r7
   19bdc:	bc80      	pop	{r7}
   19bde:	4770      	bx	lr

00019be0 <hri_port_set_OUT_reg>:
{
   19be0:	b480      	push	{r7}
   19be2:	b085      	sub	sp, #20
   19be4:	af00      	add	r7, sp, #0
   19be6:	60f8      	str	r0, [r7, #12]
   19be8:	460b      	mov	r3, r1
   19bea:	607a      	str	r2, [r7, #4]
   19bec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19bee:	7afb      	ldrb	r3, [r7, #11]
   19bf0:	68fa      	ldr	r2, [r7, #12]
   19bf2:	01db      	lsls	r3, r3, #7
   19bf4:	4413      	add	r3, r2
   19bf6:	3318      	adds	r3, #24
   19bf8:	687a      	ldr	r2, [r7, #4]
   19bfa:	601a      	str	r2, [r3, #0]
}
   19bfc:	bf00      	nop
   19bfe:	3714      	adds	r7, #20
   19c00:	46bd      	mov	sp, r7
   19c02:	bc80      	pop	{r7}
   19c04:	4770      	bx	lr

00019c06 <hri_port_clear_OUT_reg>:
{
   19c06:	b480      	push	{r7}
   19c08:	b085      	sub	sp, #20
   19c0a:	af00      	add	r7, sp, #0
   19c0c:	60f8      	str	r0, [r7, #12]
   19c0e:	460b      	mov	r3, r1
   19c10:	607a      	str	r2, [r7, #4]
   19c12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   19c14:	7afb      	ldrb	r3, [r7, #11]
   19c16:	68fa      	ldr	r2, [r7, #12]
   19c18:	01db      	lsls	r3, r3, #7
   19c1a:	4413      	add	r3, r2
   19c1c:	3314      	adds	r3, #20
   19c1e:	687a      	ldr	r2, [r7, #4]
   19c20:	601a      	str	r2, [r3, #0]
}
   19c22:	bf00      	nop
   19c24:	3714      	adds	r7, #20
   19c26:	46bd      	mov	sp, r7
   19c28:	bc80      	pop	{r7}
   19c2a:	4770      	bx	lr

00019c2c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19c2c:	b480      	push	{r7}
   19c2e:	b085      	sub	sp, #20
   19c30:	af00      	add	r7, sp, #0
   19c32:	6078      	str	r0, [r7, #4]
   19c34:	4608      	mov	r0, r1
   19c36:	4611      	mov	r1, r2
   19c38:	461a      	mov	r2, r3
   19c3a:	4603      	mov	r3, r0
   19c3c:	70fb      	strb	r3, [r7, #3]
   19c3e:	460b      	mov	r3, r1
   19c40:	70bb      	strb	r3, [r7, #2]
   19c42:	4613      	mov	r3, r2
   19c44:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19c46:	78fa      	ldrb	r2, [r7, #3]
   19c48:	78bb      	ldrb	r3, [r7, #2]
   19c4a:	6879      	ldr	r1, [r7, #4]
   19c4c:	01d2      	lsls	r2, r2, #7
   19c4e:	440a      	add	r2, r1
   19c50:	4413      	add	r3, r2
   19c52:	3330      	adds	r3, #48	; 0x30
   19c54:	781b      	ldrb	r3, [r3, #0]
   19c56:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   19c58:	7bfb      	ldrb	r3, [r7, #15]
   19c5a:	f023 030f 	bic.w	r3, r3, #15
   19c5e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   19c60:	787b      	ldrb	r3, [r7, #1]
   19c62:	f003 030f 	and.w	r3, r3, #15
   19c66:	b2da      	uxtb	r2, r3
   19c68:	7bfb      	ldrb	r3, [r7, #15]
   19c6a:	4313      	orrs	r3, r2
   19c6c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19c6e:	78fa      	ldrb	r2, [r7, #3]
   19c70:	78bb      	ldrb	r3, [r7, #2]
   19c72:	6879      	ldr	r1, [r7, #4]
   19c74:	01d2      	lsls	r2, r2, #7
   19c76:	440a      	add	r2, r1
   19c78:	4413      	add	r3, r2
   19c7a:	3330      	adds	r3, #48	; 0x30
   19c7c:	7bfa      	ldrb	r2, [r7, #15]
   19c7e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19c80:	bf00      	nop
   19c82:	3714      	adds	r7, #20
   19c84:	46bd      	mov	sp, r7
   19c86:	bc80      	pop	{r7}
   19c88:	4770      	bx	lr

00019c8a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19c8a:	b480      	push	{r7}
   19c8c:	b085      	sub	sp, #20
   19c8e:	af00      	add	r7, sp, #0
   19c90:	6078      	str	r0, [r7, #4]
   19c92:	4608      	mov	r0, r1
   19c94:	4611      	mov	r1, r2
   19c96:	461a      	mov	r2, r3
   19c98:	4603      	mov	r3, r0
   19c9a:	70fb      	strb	r3, [r7, #3]
   19c9c:	460b      	mov	r3, r1
   19c9e:	70bb      	strb	r3, [r7, #2]
   19ca0:	4613      	mov	r3, r2
   19ca2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19ca4:	78fa      	ldrb	r2, [r7, #3]
   19ca6:	78bb      	ldrb	r3, [r7, #2]
   19ca8:	6879      	ldr	r1, [r7, #4]
   19caa:	01d2      	lsls	r2, r2, #7
   19cac:	440a      	add	r2, r1
   19cae:	4413      	add	r3, r2
   19cb0:	3330      	adds	r3, #48	; 0x30
   19cb2:	781b      	ldrb	r3, [r3, #0]
   19cb4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   19cb6:	7bfb      	ldrb	r3, [r7, #15]
   19cb8:	f003 030f 	and.w	r3, r3, #15
   19cbc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   19cbe:	787b      	ldrb	r3, [r7, #1]
   19cc0:	011b      	lsls	r3, r3, #4
   19cc2:	b2da      	uxtb	r2, r3
   19cc4:	7bfb      	ldrb	r3, [r7, #15]
   19cc6:	4313      	orrs	r3, r2
   19cc8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19cca:	78fa      	ldrb	r2, [r7, #3]
   19ccc:	78bb      	ldrb	r3, [r7, #2]
   19cce:	6879      	ldr	r1, [r7, #4]
   19cd0:	01d2      	lsls	r2, r2, #7
   19cd2:	440a      	add	r2, r1
   19cd4:	4413      	add	r3, r2
   19cd6:	3330      	adds	r3, #48	; 0x30
   19cd8:	7bfa      	ldrb	r2, [r7, #15]
   19cda:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19cdc:	bf00      	nop
   19cde:	3714      	adds	r7, #20
   19ce0:	46bd      	mov	sp, r7
   19ce2:	bc80      	pop	{r7}
   19ce4:	4770      	bx	lr

00019ce6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   19ce6:	b480      	push	{r7}
   19ce8:	b085      	sub	sp, #20
   19cea:	af00      	add	r7, sp, #0
   19cec:	6078      	str	r0, [r7, #4]
   19cee:	4608      	mov	r0, r1
   19cf0:	4611      	mov	r1, r2
   19cf2:	461a      	mov	r2, r3
   19cf4:	4603      	mov	r3, r0
   19cf6:	70fb      	strb	r3, [r7, #3]
   19cf8:	460b      	mov	r3, r1
   19cfa:	70bb      	strb	r3, [r7, #2]
   19cfc:	4613      	mov	r3, r2
   19cfe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   19d00:	78fa      	ldrb	r2, [r7, #3]
   19d02:	78bb      	ldrb	r3, [r7, #2]
   19d04:	6879      	ldr	r1, [r7, #4]
   19d06:	01d2      	lsls	r2, r2, #7
   19d08:	440a      	add	r2, r1
   19d0a:	4413      	add	r3, r2
   19d0c:	3340      	adds	r3, #64	; 0x40
   19d0e:	781b      	ldrb	r3, [r3, #0]
   19d10:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   19d12:	7bfb      	ldrb	r3, [r7, #15]
   19d14:	f023 0301 	bic.w	r3, r3, #1
   19d18:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   19d1a:	787a      	ldrb	r2, [r7, #1]
   19d1c:	7bfb      	ldrb	r3, [r7, #15]
   19d1e:	4313      	orrs	r3, r2
   19d20:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   19d22:	78fa      	ldrb	r2, [r7, #3]
   19d24:	78bb      	ldrb	r3, [r7, #2]
   19d26:	6879      	ldr	r1, [r7, #4]
   19d28:	01d2      	lsls	r2, r2, #7
   19d2a:	440a      	add	r2, r1
   19d2c:	4413      	add	r3, r2
   19d2e:	3340      	adds	r3, #64	; 0x40
   19d30:	7bfa      	ldrb	r2, [r7, #15]
   19d32:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19d34:	bf00      	nop
   19d36:	3714      	adds	r7, #20
   19d38:	46bd      	mov	sp, r7
   19d3a:	bc80      	pop	{r7}
   19d3c:	4770      	bx	lr

00019d3e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   19d3e:	b480      	push	{r7}
   19d40:	b085      	sub	sp, #20
   19d42:	af00      	add	r7, sp, #0
   19d44:	60f8      	str	r0, [r7, #12]
   19d46:	460b      	mov	r3, r1
   19d48:	607a      	str	r2, [r7, #4]
   19d4a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   19d4c:	7afb      	ldrb	r3, [r7, #11]
   19d4e:	68fa      	ldr	r2, [r7, #12]
   19d50:	01db      	lsls	r3, r3, #7
   19d52:	4413      	add	r3, r2
   19d54:	3328      	adds	r3, #40	; 0x28
   19d56:	687a      	ldr	r2, [r7, #4]
   19d58:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19d5a:	bf00      	nop
   19d5c:	3714      	adds	r7, #20
   19d5e:	46bd      	mov	sp, r7
   19d60:	bc80      	pop	{r7}
   19d62:	4770      	bx	lr

00019d64 <_gpio_set_direction>:
{
   19d64:	b580      	push	{r7, lr}
   19d66:	b082      	sub	sp, #8
   19d68:	af00      	add	r7, sp, #0
   19d6a:	4603      	mov	r3, r0
   19d6c:	6039      	str	r1, [r7, #0]
   19d6e:	71fb      	strb	r3, [r7, #7]
   19d70:	4613      	mov	r3, r2
   19d72:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   19d74:	79bb      	ldrb	r3, [r7, #6]
   19d76:	2b01      	cmp	r3, #1
   19d78:	d01c      	beq.n	19db4 <_gpio_set_direction+0x50>
   19d7a:	2b02      	cmp	r3, #2
   19d7c:	d037      	beq.n	19dee <_gpio_set_direction+0x8a>
   19d7e:	2b00      	cmp	r3, #0
   19d80:	d14e      	bne.n	19e20 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19d82:	79fb      	ldrb	r3, [r7, #7]
   19d84:	683a      	ldr	r2, [r7, #0]
   19d86:	4619      	mov	r1, r3
   19d88:	482a      	ldr	r0, [pc, #168]	; (19e34 <_gpio_set_direction+0xd0>)
   19d8a:	4b2b      	ldr	r3, [pc, #172]	; (19e38 <_gpio_set_direction+0xd4>)
   19d8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19d8e:	683b      	ldr	r3, [r7, #0]
   19d90:	b29b      	uxth	r3, r3
   19d92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   19d96:	79fb      	ldrb	r3, [r7, #7]
   19d98:	4619      	mov	r1, r3
   19d9a:	4826      	ldr	r0, [pc, #152]	; (19e34 <_gpio_set_direction+0xd0>)
   19d9c:	4b27      	ldr	r3, [pc, #156]	; (19e3c <_gpio_set_direction+0xd8>)
   19d9e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19da0:	683b      	ldr	r3, [r7, #0]
   19da2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19da4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19da8:	79fb      	ldrb	r3, [r7, #7]
   19daa:	4619      	mov	r1, r3
   19dac:	4821      	ldr	r0, [pc, #132]	; (19e34 <_gpio_set_direction+0xd0>)
   19dae:	4b23      	ldr	r3, [pc, #140]	; (19e3c <_gpio_set_direction+0xd8>)
   19db0:	4798      	blx	r3
		break;
   19db2:	e03a      	b.n	19e2a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19db4:	79fb      	ldrb	r3, [r7, #7]
   19db6:	683a      	ldr	r2, [r7, #0]
   19db8:	4619      	mov	r1, r3
   19dba:	481e      	ldr	r0, [pc, #120]	; (19e34 <_gpio_set_direction+0xd0>)
   19dbc:	4b1e      	ldr	r3, [pc, #120]	; (19e38 <_gpio_set_direction+0xd4>)
   19dbe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   19dc0:	683b      	ldr	r3, [r7, #0]
   19dc2:	b29b      	uxth	r3, r3
   19dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   19dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19dcc:	79f9      	ldrb	r1, [r7, #7]
   19dce:	461a      	mov	r2, r3
   19dd0:	4818      	ldr	r0, [pc, #96]	; (19e34 <_gpio_set_direction+0xd0>)
   19dd2:	4b1a      	ldr	r3, [pc, #104]	; (19e3c <_gpio_set_direction+0xd8>)
   19dd4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   19dd6:	683b      	ldr	r3, [r7, #0]
   19dd8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   19dda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   19dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   19de2:	79f9      	ldrb	r1, [r7, #7]
   19de4:	461a      	mov	r2, r3
   19de6:	4813      	ldr	r0, [pc, #76]	; (19e34 <_gpio_set_direction+0xd0>)
   19de8:	4b14      	ldr	r3, [pc, #80]	; (19e3c <_gpio_set_direction+0xd8>)
   19dea:	4798      	blx	r3
		break;
   19dec:	e01d      	b.n	19e2a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   19dee:	79fb      	ldrb	r3, [r7, #7]
   19df0:	683a      	ldr	r2, [r7, #0]
   19df2:	4619      	mov	r1, r3
   19df4:	480f      	ldr	r0, [pc, #60]	; (19e34 <_gpio_set_direction+0xd0>)
   19df6:	4b12      	ldr	r3, [pc, #72]	; (19e40 <_gpio_set_direction+0xdc>)
   19df8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19dfa:	683b      	ldr	r3, [r7, #0]
   19dfc:	b29b      	uxth	r3, r3
   19dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   19e02:	79fb      	ldrb	r3, [r7, #7]
   19e04:	4619      	mov	r1, r3
   19e06:	480b      	ldr	r0, [pc, #44]	; (19e34 <_gpio_set_direction+0xd0>)
   19e08:	4b0c      	ldr	r3, [pc, #48]	; (19e3c <_gpio_set_direction+0xd8>)
   19e0a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19e0c:	683b      	ldr	r3, [r7, #0]
   19e0e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19e10:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19e14:	79fb      	ldrb	r3, [r7, #7]
   19e16:	4619      	mov	r1, r3
   19e18:	4806      	ldr	r0, [pc, #24]	; (19e34 <_gpio_set_direction+0xd0>)
   19e1a:	4b08      	ldr	r3, [pc, #32]	; (19e3c <_gpio_set_direction+0xd8>)
   19e1c:	4798      	blx	r3
		break;
   19e1e:	e004      	b.n	19e2a <_gpio_set_direction+0xc6>
		ASSERT(false);
   19e20:	2246      	movs	r2, #70	; 0x46
   19e22:	4908      	ldr	r1, [pc, #32]	; (19e44 <_gpio_set_direction+0xe0>)
   19e24:	2000      	movs	r0, #0
   19e26:	4b08      	ldr	r3, [pc, #32]	; (19e48 <_gpio_set_direction+0xe4>)
   19e28:	4798      	blx	r3
}
   19e2a:	bf00      	nop
   19e2c:	3708      	adds	r7, #8
   19e2e:	46bd      	mov	sp, r7
   19e30:	bd80      	pop	{r7, pc}
   19e32:	bf00      	nop
   19e34:	41008000 	.word	0x41008000
   19e38:	00019bbb 	.word	0x00019bbb
   19e3c:	00019d3f 	.word	0x00019d3f
   19e40:	00019b95 	.word	0x00019b95
   19e44:	0001dcc0 	.word	0x0001dcc0
   19e48:	00007b0d 	.word	0x00007b0d

00019e4c <_gpio_set_level>:
{
   19e4c:	b580      	push	{r7, lr}
   19e4e:	b082      	sub	sp, #8
   19e50:	af00      	add	r7, sp, #0
   19e52:	4603      	mov	r3, r0
   19e54:	6039      	str	r1, [r7, #0]
   19e56:	71fb      	strb	r3, [r7, #7]
   19e58:	4613      	mov	r3, r2
   19e5a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19e5c:	79bb      	ldrb	r3, [r7, #6]
   19e5e:	2b00      	cmp	r3, #0
   19e60:	d006      	beq.n	19e70 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   19e62:	79fb      	ldrb	r3, [r7, #7]
   19e64:	683a      	ldr	r2, [r7, #0]
   19e66:	4619      	mov	r1, r3
   19e68:	4806      	ldr	r0, [pc, #24]	; (19e84 <_gpio_set_level+0x38>)
   19e6a:	4b07      	ldr	r3, [pc, #28]	; (19e88 <_gpio_set_level+0x3c>)
   19e6c:	4798      	blx	r3
}
   19e6e:	e005      	b.n	19e7c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19e70:	79fb      	ldrb	r3, [r7, #7]
   19e72:	683a      	ldr	r2, [r7, #0]
   19e74:	4619      	mov	r1, r3
   19e76:	4803      	ldr	r0, [pc, #12]	; (19e84 <_gpio_set_level+0x38>)
   19e78:	4b04      	ldr	r3, [pc, #16]	; (19e8c <_gpio_set_level+0x40>)
   19e7a:	4798      	blx	r3
}
   19e7c:	bf00      	nop
   19e7e:	3708      	adds	r7, #8
   19e80:	46bd      	mov	sp, r7
   19e82:	bd80      	pop	{r7, pc}
   19e84:	41008000 	.word	0x41008000
   19e88:	00019be1 	.word	0x00019be1
   19e8c:	00019c07 	.word	0x00019c07

00019e90 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   19e90:	b590      	push	{r4, r7, lr}
   19e92:	b085      	sub	sp, #20
   19e94:	af00      	add	r7, sp, #0
   19e96:	6078      	str	r0, [r7, #4]
   19e98:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   19e9a:	687b      	ldr	r3, [r7, #4]
   19e9c:	095b      	lsrs	r3, r3, #5
   19e9e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   19ea0:	687b      	ldr	r3, [r7, #4]
   19ea2:	b2db      	uxtb	r3, r3
   19ea4:	f003 031f 	and.w	r3, r3, #31
   19ea8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   19eaa:	683b      	ldr	r3, [r7, #0]
   19eac:	f1b3 3fff 	cmp.w	r3, #4294967295
   19eb0:	d106      	bne.n	19ec0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   19eb2:	7bba      	ldrb	r2, [r7, #14]
   19eb4:	7bf9      	ldrb	r1, [r7, #15]
   19eb6:	2300      	movs	r3, #0
   19eb8:	4812      	ldr	r0, [pc, #72]	; (19f04 <_gpio_set_pin_function+0x74>)
   19eba:	4c13      	ldr	r4, [pc, #76]	; (19f08 <_gpio_set_pin_function+0x78>)
   19ebc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   19ebe:	e01d      	b.n	19efc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   19ec0:	7bba      	ldrb	r2, [r7, #14]
   19ec2:	7bf9      	ldrb	r1, [r7, #15]
   19ec4:	2301      	movs	r3, #1
   19ec6:	480f      	ldr	r0, [pc, #60]	; (19f04 <_gpio_set_pin_function+0x74>)
   19ec8:	4c0f      	ldr	r4, [pc, #60]	; (19f08 <_gpio_set_pin_function+0x78>)
   19eca:	47a0      	blx	r4
		if (pin & 1) {
   19ecc:	7bbb      	ldrb	r3, [r7, #14]
   19ece:	f003 0301 	and.w	r3, r3, #1
   19ed2:	2b00      	cmp	r3, #0
   19ed4:	d009      	beq.n	19eea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   19ed6:	7bbb      	ldrb	r3, [r7, #14]
   19ed8:	105b      	asrs	r3, r3, #1
   19eda:	b2da      	uxtb	r2, r3
   19edc:	683b      	ldr	r3, [r7, #0]
   19ede:	b2db      	uxtb	r3, r3
   19ee0:	7bf9      	ldrb	r1, [r7, #15]
   19ee2:	4808      	ldr	r0, [pc, #32]	; (19f04 <_gpio_set_pin_function+0x74>)
   19ee4:	4c09      	ldr	r4, [pc, #36]	; (19f0c <_gpio_set_pin_function+0x7c>)
   19ee6:	47a0      	blx	r4
}
   19ee8:	e008      	b.n	19efc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   19eea:	7bbb      	ldrb	r3, [r7, #14]
   19eec:	105b      	asrs	r3, r3, #1
   19eee:	b2da      	uxtb	r2, r3
   19ef0:	683b      	ldr	r3, [r7, #0]
   19ef2:	b2db      	uxtb	r3, r3
   19ef4:	7bf9      	ldrb	r1, [r7, #15]
   19ef6:	4803      	ldr	r0, [pc, #12]	; (19f04 <_gpio_set_pin_function+0x74>)
   19ef8:	4c05      	ldr	r4, [pc, #20]	; (19f10 <_gpio_set_pin_function+0x80>)
   19efa:	47a0      	blx	r4
}
   19efc:	bf00      	nop
   19efe:	3714      	adds	r7, #20
   19f00:	46bd      	mov	sp, r7
   19f02:	bd90      	pop	{r4, r7, pc}
   19f04:	41008000 	.word	0x41008000
   19f08:	00019ce7 	.word	0x00019ce7
   19f0c:	00019c8b 	.word	0x00019c8b
   19f10:	00019c2d 	.word	0x00019c2d

00019f14 <gpio_set_pin_function>:
{
   19f14:	b580      	push	{r7, lr}
   19f16:	b082      	sub	sp, #8
   19f18:	af00      	add	r7, sp, #0
   19f1a:	6078      	str	r0, [r7, #4]
   19f1c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   19f1e:	6839      	ldr	r1, [r7, #0]
   19f20:	6878      	ldr	r0, [r7, #4]
   19f22:	4b03      	ldr	r3, [pc, #12]	; (19f30 <gpio_set_pin_function+0x1c>)
   19f24:	4798      	blx	r3
}
   19f26:	bf00      	nop
   19f28:	3708      	adds	r7, #8
   19f2a:	46bd      	mov	sp, r7
   19f2c:	bd80      	pop	{r7, pc}
   19f2e:	bf00      	nop
   19f30:	00019e91 	.word	0x00019e91

00019f34 <gpio_set_pin_direction>:
{
   19f34:	b580      	push	{r7, lr}
   19f36:	b082      	sub	sp, #8
   19f38:	af00      	add	r7, sp, #0
   19f3a:	4603      	mov	r3, r0
   19f3c:	460a      	mov	r2, r1
   19f3e:	71fb      	strb	r3, [r7, #7]
   19f40:	4613      	mov	r3, r2
   19f42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   19f44:	79fb      	ldrb	r3, [r7, #7]
   19f46:	115b      	asrs	r3, r3, #5
   19f48:	b2d8      	uxtb	r0, r3
   19f4a:	79fb      	ldrb	r3, [r7, #7]
   19f4c:	f003 031f 	and.w	r3, r3, #31
   19f50:	2201      	movs	r2, #1
   19f52:	fa02 f303 	lsl.w	r3, r2, r3
   19f56:	79ba      	ldrb	r2, [r7, #6]
   19f58:	4619      	mov	r1, r3
   19f5a:	4b03      	ldr	r3, [pc, #12]	; (19f68 <gpio_set_pin_direction+0x34>)
   19f5c:	4798      	blx	r3
}
   19f5e:	bf00      	nop
   19f60:	3708      	adds	r7, #8
   19f62:	46bd      	mov	sp, r7
   19f64:	bd80      	pop	{r7, pc}
   19f66:	bf00      	nop
   19f68:	00019d65 	.word	0x00019d65

00019f6c <gpio_set_pin_level>:
{
   19f6c:	b580      	push	{r7, lr}
   19f6e:	b082      	sub	sp, #8
   19f70:	af00      	add	r7, sp, #0
   19f72:	4603      	mov	r3, r0
   19f74:	460a      	mov	r2, r1
   19f76:	71fb      	strb	r3, [r7, #7]
   19f78:	4613      	mov	r3, r2
   19f7a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19f7c:	79fb      	ldrb	r3, [r7, #7]
   19f7e:	115b      	asrs	r3, r3, #5
   19f80:	b2d8      	uxtb	r0, r3
   19f82:	79fb      	ldrb	r3, [r7, #7]
   19f84:	f003 031f 	and.w	r3, r3, #31
   19f88:	2201      	movs	r2, #1
   19f8a:	fa02 f303 	lsl.w	r3, r2, r3
   19f8e:	79ba      	ldrb	r2, [r7, #6]
   19f90:	4619      	mov	r1, r3
   19f92:	4b03      	ldr	r3, [pc, #12]	; (19fa0 <gpio_set_pin_level+0x34>)
   19f94:	4798      	blx	r3
}
   19f96:	bf00      	nop
   19f98:	3708      	adds	r7, #8
   19f9a:	46bd      	mov	sp, r7
   19f9c:	bd80      	pop	{r7, pc}
   19f9e:	bf00      	nop
   19fa0:	00019e4d 	.word	0x00019e4d

00019fa4 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   19fa4:	b580      	push	{r7, lr}
   19fa6:	b082      	sub	sp, #8
   19fa8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   19faa:	2100      	movs	r1, #0
   19fac:	2008      	movs	r0, #8
   19fae:	4b24      	ldr	r3, [pc, #144]	; (1a040 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19fb0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   19fb2:	2100      	movs	r1, #0
   19fb4:	202b      	movs	r0, #43	; 0x2b
   19fb6:	4b22      	ldr	r3, [pc, #136]	; (1a040 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19fb8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   19fba:	2100      	movs	r1, #0
   19fbc:	202a      	movs	r0, #42	; 0x2a
   19fbe:	4b20      	ldr	r3, [pc, #128]	; (1a040 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19fc0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   19fc2:	2102      	movs	r1, #2
   19fc4:	2008      	movs	r0, #8
   19fc6:	4b1f      	ldr	r3, [pc, #124]	; (1a044 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19fc8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   19fca:	2102      	movs	r1, #2
   19fcc:	202b      	movs	r0, #43	; 0x2b
   19fce:	4b1d      	ldr	r3, [pc, #116]	; (1a044 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19fd0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   19fd2:	2102      	movs	r1, #2
   19fd4:	202a      	movs	r0, #42	; 0x2a
   19fd6:	4b1b      	ldr	r3, [pc, #108]	; (1a044 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19fd8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   19fda:	2101      	movs	r1, #1
   19fdc:	2008      	movs	r0, #8
   19fde:	4b1a      	ldr	r3, [pc, #104]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19fe0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   19fe2:	2100      	movs	r1, #0
   19fe4:	202b      	movs	r0, #43	; 0x2b
   19fe6:	4b18      	ldr	r3, [pc, #96]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19fe8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   19fea:	2100      	movs	r1, #0
   19fec:	202a      	movs	r0, #42	; 0x2a
   19fee:	4b16      	ldr	r3, [pc, #88]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19ff0:	4798      	blx	r3

	delay_us(1);
   19ff2:	2001      	movs	r0, #1
   19ff4:	4b15      	ldr	r3, [pc, #84]	; (1a04c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19ff6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   19ff8:	2300      	movs	r3, #0
   19ffa:	607b      	str	r3, [r7, #4]
   19ffc:	687b      	ldr	r3, [r7, #4]
   19ffe:	2b06      	cmp	r3, #6
   1a000:	dc11      	bgt.n	1a026 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1a002:	2101      	movs	r1, #1
   1a004:	202a      	movs	r0, #42	; 0x2a
   1a006:	4b10      	ldr	r3, [pc, #64]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1a008:	4798      	blx	r3
		delay_us(1);
   1a00a:	2001      	movs	r0, #1
   1a00c:	4b0f      	ldr	r3, [pc, #60]	; (1a04c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1a00e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   1a010:	2100      	movs	r1, #0
   1a012:	202a      	movs	r0, #42	; 0x2a
   1a014:	4b0c      	ldr	r3, [pc, #48]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1a016:	4798      	blx	r3
		delay_us(1);
   1a018:	2001      	movs	r0, #1
   1a01a:	4b0c      	ldr	r3, [pc, #48]	; (1a04c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1a01c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1a01e:	687b      	ldr	r3, [r7, #4]
   1a020:	3301      	adds	r3, #1
   1a022:	607b      	str	r3, [r7, #4]
   1a024:	e7ea      	b.n	19ffc <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1a026:	2101      	movs	r1, #1
   1a028:	202b      	movs	r0, #43	; 0x2b
   1a02a:	4b07      	ldr	r3, [pc, #28]	; (1a048 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1a02c:	4798      	blx	r3
	delay_us(1);
   1a02e:	2001      	movs	r0, #1
   1a030:	4b06      	ldr	r3, [pc, #24]	; (1a04c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1a032:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   1a034:	4b06      	ldr	r3, [pc, #24]	; (1a050 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   1a036:	4798      	blx	r3
}
   1a038:	bf00      	nop
   1a03a:	3708      	adds	r7, #8
   1a03c:	46bd      	mov	sp, r7
   1a03e:	bd80      	pop	{r7, pc}
   1a040:	00019f15 	.word	0x00019f15
   1a044:	00019f35 	.word	0x00019f35
   1a048:	00019f6d 	.word	0x00019f6d
   1a04c:	00006449 	.word	0x00006449
   1a050:	000054fd 	.word	0x000054fd

0001a054 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   1a054:	b480      	push	{r7}
   1a056:	b083      	sub	sp, #12
   1a058:	af00      	add	r7, sp, #0
   1a05a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   1a05c:	687b      	ldr	r3, [r7, #4]
   1a05e:	4618      	mov	r0, r3
   1a060:	370c      	adds	r7, #12
   1a062:	46bd      	mov	sp, r7
   1a064:	bc80      	pop	{r7}
   1a066:	4770      	bx	lr

0001a068 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   1a068:	b480      	push	{r7}
   1a06a:	b083      	sub	sp, #12
   1a06c:	af00      	add	r7, sp, #0
   1a06e:	6078      	str	r0, [r7, #4]
   1a070:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1a072:	687b      	ldr	r3, [r7, #4]
   1a074:	683a      	ldr	r2, [r7, #0]
   1a076:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   1a078:	687b      	ldr	r3, [r7, #4]
   1a07a:	4a04      	ldr	r2, [pc, #16]	; (1a08c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   1a07c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   1a080:	687b      	ldr	r3, [r7, #4]
   1a082:	4618      	mov	r0, r3
   1a084:	370c      	adds	r7, #12
   1a086:	46bd      	mov	sp, r7
   1a088:	bc80      	pop	{r7}
   1a08a:	4770      	bx	lr
   1a08c:	001fff00 	.word	0x001fff00

0001a090 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   1a090:	b480      	push	{r7}
   1a092:	b083      	sub	sp, #12
   1a094:	af00      	add	r7, sp, #0
   1a096:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   1a098:	687b      	ldr	r3, [r7, #4]
   1a09a:	4618      	mov	r0, r3
   1a09c:	370c      	adds	r7, #12
   1a09e:	46bd      	mov	sp, r7
   1a0a0:	bc80      	pop	{r7}
   1a0a2:	4770      	bx	lr

0001a0a4 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   1a0a4:	b580      	push	{r7, lr}
   1a0a6:	b082      	sub	sp, #8
   1a0a8:	af00      	add	r7, sp, #0
   1a0aa:	6078      	str	r0, [r7, #4]
	xferDone=false;
   1a0ac:	687b      	ldr	r3, [r7, #4]
   1a0ae:	2200      	movs	r2, #0
   1a0b0:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1a0b2:	6878      	ldr	r0, [r7, #4]
   1a0b4:	4b04      	ldr	r3, [pc, #16]	; (1a0c8 <_ZN13N25Q256_Class4InitEv+0x24>)
   1a0b6:	4798      	blx	r3
	return SelfTest();
   1a0b8:	6878      	ldr	r0, [r7, #4]
   1a0ba:	4b04      	ldr	r3, [pc, #16]	; (1a0cc <_ZN13N25Q256_Class4InitEv+0x28>)
   1a0bc:	4798      	blx	r3
   1a0be:	4603      	mov	r3, r0
}
   1a0c0:	4618      	mov	r0, r3
   1a0c2:	3708      	adds	r7, #8
   1a0c4:	46bd      	mov	sp, r7
   1a0c6:	bd80      	pop	{r7, pc}
   1a0c8:	0001a0d1 	.word	0x0001a0d1
   1a0cc:	0001a26d 	.word	0x0001a26d

0001a0d0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   1a0d0:	b590      	push	{r4, r7, lr}
   1a0d2:	b083      	sub	sp, #12
   1a0d4:	af00      	add	r7, sp, #0
   1a0d6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   1a0d8:	687b      	ldr	r3, [r7, #4]
   1a0da:	685b      	ldr	r3, [r3, #4]
   1a0dc:	4618      	mov	r0, r3
   1a0de:	4b08      	ldr	r3, [pc, #32]	; (1a100 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   1a0e0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1a0e2:	687b      	ldr	r3, [r7, #4]
   1a0e4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	4a06      	ldr	r2, [pc, #24]	; (1a104 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   1a0ea:	4807      	ldr	r0, [pc, #28]	; (1a108 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   1a0ec:	4c07      	ldr	r4, [pc, #28]	; (1a10c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1a0ee:	47a0      	blx	r4
   1a0f0:	4602      	mov	r2, r0
   1a0f2:	687b      	ldr	r3, [r7, #4]
   1a0f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   1a0f8:	bf00      	nop
   1a0fa:	370c      	adds	r7, #12
   1a0fc:	46bd      	mov	sp, r7
   1a0fe:	bd90      	pop	{r4, r7, pc}
   1a100:	000069b5 	.word	0x000069b5
   1a104:	00019fa5 	.word	0x00019fa5
   1a108:	2000d498 	.word	0x2000d498
   1a10c:	00010369 	.word	0x00010369

0001a110 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   1a110:	b580      	push	{r7, lr}
   1a112:	b084      	sub	sp, #16
   1a114:	af00      	add	r7, sp, #0
   1a116:	6078      	str	r0, [r7, #4]
   1a118:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   1a11a:	687b      	ldr	r3, [r7, #4]
   1a11c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a120:	685b      	ldr	r3, [r3, #4]
   1a122:	689b      	ldr	r3, [r3, #8]
   1a124:	687a      	ldr	r2, [r7, #4]
   1a126:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   1a12a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a12e:	6839      	ldr	r1, [r7, #0]
   1a130:	4798      	blx	r3
   1a132:	4603      	mov	r3, r0
   1a134:	60fb      	str	r3, [r7, #12]
	return	e;
   1a136:	68fb      	ldr	r3, [r7, #12]
}
   1a138:	4618      	mov	r0, r3
   1a13a:	3710      	adds	r7, #16
   1a13c:	46bd      	mov	sp, r7
   1a13e:	bd80      	pop	{r7, pc}

0001a140 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1a140:	b590      	push	{r4, r7, lr}
   1a142:	b087      	sub	sp, #28
   1a144:	af00      	add	r7, sp, #0
   1a146:	60f8      	str	r0, [r7, #12]
   1a148:	60b9      	str	r1, [r7, #8]
   1a14a:	607a      	str	r2, [r7, #4]
   1a14c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1a14e:	68fb      	ldr	r3, [r7, #12]
   1a150:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a154:	685b      	ldr	r3, [r3, #4]
   1a156:	685c      	ldr	r4, [r3, #4]
   1a158:	68fb      	ldr	r3, [r7, #12]
   1a15a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1a15e:	683b      	ldr	r3, [r7, #0]
   1a160:	687a      	ldr	r2, [r7, #4]
   1a162:	68b9      	ldr	r1, [r7, #8]
   1a164:	47a0      	blx	r4
   1a166:	4603      	mov	r3, r0
   1a168:	617b      	str	r3, [r7, #20]
	return	w;
   1a16a:	697b      	ldr	r3, [r7, #20]
}
   1a16c:	4618      	mov	r0, r3
   1a16e:	371c      	adds	r7, #28
   1a170:	46bd      	mov	sp, r7
   1a172:	bd90      	pop	{r4, r7, pc}

0001a174 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1a174:	b590      	push	{r4, r7, lr}
   1a176:	b087      	sub	sp, #28
   1a178:	af00      	add	r7, sp, #0
   1a17a:	60f8      	str	r0, [r7, #12]
   1a17c:	60b9      	str	r1, [r7, #8]
   1a17e:	607a      	str	r2, [r7, #4]
   1a180:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1a182:	68fb      	ldr	r3, [r7, #12]
   1a184:	2200      	movs	r2, #0
   1a186:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   1a188:	68fb      	ldr	r3, [r7, #12]
   1a18a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a18e:	685b      	ldr	r3, [r3, #4]
   1a190:	681c      	ldr	r4, [r3, #0]
   1a192:	68fb      	ldr	r3, [r7, #12]
   1a194:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1a198:	683b      	ldr	r3, [r7, #0]
   1a19a:	687a      	ldr	r2, [r7, #4]
   1a19c:	68b9      	ldr	r1, [r7, #8]
   1a19e:	47a0      	blx	r4
   1a1a0:	4603      	mov	r3, r0
   1a1a2:	617b      	str	r3, [r7, #20]
	return	r;
   1a1a4:	697b      	ldr	r3, [r7, #20]
}
   1a1a6:	4618      	mov	r0, r3
   1a1a8:	371c      	adds	r7, #28
   1a1aa:	46bd      	mov	sp, r7
   1a1ac:	bd90      	pop	{r4, r7, pc}
	...

0001a1b0 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   1a1b0:	b580      	push	{r7, lr}
   1a1b2:	b082      	sub	sp, #8
   1a1b4:	af00      	add	r7, sp, #0
   1a1b6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   1a1b8:	687a      	ldr	r2, [r7, #4]
   1a1ba:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1a1be:	f043 0310 	orr.w	r3, r3, #16
   1a1c2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1a1c6:	687a      	ldr	r2, [r7, #4]
   1a1c8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a1d0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1a1d4:	687a      	ldr	r2, [r7, #4]
   1a1d6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   1a1da:	f36f 1305 	bfc	r3, #4, #2
   1a1de:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1a1e2:	687b      	ldr	r3, [r7, #4]
   1a1e4:	2205      	movs	r2, #5
   1a1e6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   1a1ea:	687b      	ldr	r3, [r7, #4]
   1a1ec:	2201      	movs	r2, #1
   1a1ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1a1f2:	687b      	ldr	r3, [r7, #4]
   1a1f4:	f203 2212 	addw	r2, r3, #530	; 0x212
   1a1f8:	687b      	ldr	r3, [r7, #4]
   1a1fa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1a1fe:	687b      	ldr	r3, [r7, #4]
   1a200:	685a      	ldr	r2, [r3, #4]
   1a202:	687b      	ldr	r3, [r7, #4]
   1a204:	f503 7305 	add.w	r3, r3, #532	; 0x214
   1a208:	4619      	mov	r1, r3
   1a20a:	4610      	mov	r0, r2
   1a20c:	4b04      	ldr	r3, [pc, #16]	; (1a220 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1a20e:	4798      	blx	r3
		return status;
   1a210:	687b      	ldr	r3, [r7, #4]
   1a212:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1a216:	4618      	mov	r0, r3
   1a218:	3708      	adds	r7, #8
   1a21a:	46bd      	mov	sp, r7
   1a21c:	bd80      	pop	{r7, pc}
   1a21e:	bf00      	nop
   1a220:	00006a2d 	.word	0x00006a2d

0001a224 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1a224:	b580      	push	{r7, lr}
   1a226:	b082      	sub	sp, #8
   1a228:	af00      	add	r7, sp, #0
   1a22a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   1a22c:	6878      	ldr	r0, [r7, #4]
   1a22e:	4b0e      	ldr	r3, [pc, #56]	; (1a268 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   1a230:	4798      	blx	r3
   1a232:	4603      	mov	r3, r0
   1a234:	461a      	mov	r2, r3
   1a236:	687b      	ldr	r3, [r7, #4]
   1a238:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   1a23c:	687b      	ldr	r3, [r7, #4]
   1a23e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1a242:	f003 0301 	and.w	r3, r3, #1
   1a246:	2b00      	cmp	r3, #0
   1a248:	d000      	beq.n	1a24c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1a24a:	e7ef      	b.n	1a22c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   1a24c:	687b      	ldr	r3, [r7, #4]
   1a24e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1a252:	f003 0301 	and.w	r3, r3, #1
   1a256:	2b00      	cmp	r3, #0
   1a258:	bf0c      	ite	eq
   1a25a:	2301      	moveq	r3, #1
   1a25c:	2300      	movne	r3, #0
   1a25e:	b2db      	uxtb	r3, r3
}
   1a260:	4618      	mov	r0, r3
   1a262:	3708      	adds	r7, #8
   1a264:	46bd      	mov	sp, r7
   1a266:	bd80      	pop	{r7, pc}
   1a268:	0001a1b1 	.word	0x0001a1b1

0001a26c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1a26c:	b590      	push	{r4, r7, lr}
   1a26e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1a272:	b085      	sub	sp, #20
   1a274:	af00      	add	r7, sp, #0
   1a276:	f107 0310 	add.w	r3, r7, #16
   1a27a:	3b0c      	subs	r3, #12
   1a27c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1a27e:	f107 0310 	add.w	r3, r7, #16
   1a282:	3b0c      	subs	r3, #12
   1a284:	681b      	ldr	r3, [r3, #0]
   1a286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1a28a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1a28e:	f107 0310 	add.w	r3, r7, #16
   1a292:	3b0c      	subs	r3, #12
   1a294:	681b      	ldr	r3, [r3, #0]
   1a296:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a29a:	f107 0110 	add.w	r1, r7, #16
   1a29e:	3904      	subs	r1, #4
   1a2a0:	f107 0010 	add.w	r0, r7, #16
   1a2a4:	380c      	subs	r0, #12
   1a2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a2aa:	6800      	ldr	r0, [r0, #0]
   1a2ac:	4c4b      	ldr	r4, [pc, #300]	; (1a3dc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1a2ae:	47a0      	blx	r4
	WaitOnBusy();
   1a2b0:	f107 0310 	add.w	r3, r7, #16
   1a2b4:	3b0c      	subs	r3, #12
   1a2b6:	6818      	ldr	r0, [r3, #0]
   1a2b8:	4b49      	ldr	r3, [pc, #292]	; (1a3e0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1a2ba:	4798      	blx	r3
	Erase(currentAddress);
   1a2bc:	f107 0310 	add.w	r3, r7, #16
   1a2c0:	3b0c      	subs	r3, #12
   1a2c2:	681b      	ldr	r3, [r3, #0]
   1a2c4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a2c8:	f107 0310 	add.w	r3, r7, #16
   1a2cc:	3b0c      	subs	r3, #12
   1a2ce:	4611      	mov	r1, r2
   1a2d0:	6818      	ldr	r0, [r3, #0]
   1a2d2:	4b44      	ldr	r3, [pc, #272]	; (1a3e4 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   1a2d4:	4798      	blx	r3
	WaitOnBusy();
   1a2d6:	f107 0310 	add.w	r3, r7, #16
   1a2da:	3b0c      	subs	r3, #12
   1a2dc:	6818      	ldr	r0, [r3, #0]
   1a2de:	4b40      	ldr	r3, [pc, #256]	; (1a3e0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1a2e0:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1a2e2:	f107 0310 	add.w	r3, r7, #16
   1a2e6:	3b0c      	subs	r3, #12
   1a2e8:	681b      	ldr	r3, [r3, #0]
   1a2ea:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a2ee:	f107 0110 	add.w	r1, r7, #16
   1a2f2:	3904      	subs	r1, #4
   1a2f4:	f107 0010 	add.w	r0, r7, #16
   1a2f8:	380c      	subs	r0, #12
   1a2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a2fe:	6800      	ldr	r0, [r0, #0]
   1a300:	4c39      	ldr	r4, [pc, #228]	; (1a3e8 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   1a302:	47a0      	blx	r4
	WaitOnBusy();
   1a304:	f107 0310 	add.w	r3, r7, #16
   1a308:	3b0c      	subs	r3, #12
   1a30a:	6818      	ldr	r0, [r3, #0]
   1a30c:	4b34      	ldr	r3, [pc, #208]	; (1a3e0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1a30e:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   1a310:	f107 0310 	add.w	r3, r7, #16
   1a314:	3b0c      	subs	r3, #12
   1a316:	681b      	ldr	r3, [r3, #0]
   1a318:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a31c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   1a320:	f101 0110 	add.w	r1, r1, #16
   1a324:	3904      	subs	r1, #4
   1a326:	f107 0010 	add.w	r0, r7, #16
   1a32a:	380c      	subs	r0, #12
   1a32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a330:	6800      	ldr	r0, [r0, #0]
   1a332:	4c2a      	ldr	r4, [pc, #168]	; (1a3dc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1a334:	47a0      	blx	r4
	WaitOnBusy();
   1a336:	f107 0310 	add.w	r3, r7, #16
   1a33a:	3b0c      	subs	r3, #12
   1a33c:	6818      	ldr	r0, [r3, #0]
   1a33e:	4b28      	ldr	r3, [pc, #160]	; (1a3e0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1a340:	4798      	blx	r3
	isOK	 = true;
   1a342:	f107 0310 	add.w	r3, r7, #16
   1a346:	3b0c      	subs	r3, #12
   1a348:	681b      	ldr	r3, [r3, #0]
   1a34a:	2201      	movs	r2, #1
   1a34c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1a350:	2300      	movs	r3, #0
   1a352:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a356:	f102 020c 	add.w	r2, r2, #12
   1a35a:	6013      	str	r3, [r2, #0]
   1a35c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a360:	f103 030c 	add.w	r3, r3, #12
   1a364:	681b      	ldr	r3, [r3, #0]
   1a366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a36a:	da2b      	bge.n	1a3c4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1a36c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1a370:	f103 0310 	add.w	r3, r3, #16
   1a374:	3b04      	subs	r3, #4
   1a376:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a37a:	f102 020c 	add.w	r2, r2, #12
   1a37e:	6812      	ldr	r2, [r2, #0]
   1a380:	4413      	add	r3, r2
   1a382:	781a      	ldrb	r2, [r3, #0]
   1a384:	f107 0310 	add.w	r3, r7, #16
   1a388:	3b04      	subs	r3, #4
   1a38a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1a38e:	f101 010c 	add.w	r1, r1, #12
   1a392:	6809      	ldr	r1, [r1, #0]
   1a394:	440b      	add	r3, r1
   1a396:	781b      	ldrb	r3, [r3, #0]
   1a398:	429a      	cmp	r2, r3
   1a39a:	d007      	beq.n	1a3ac <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   1a39c:	f107 0310 	add.w	r3, r7, #16
   1a3a0:	3b0c      	subs	r3, #12
   1a3a2:	681b      	ldr	r3, [r3, #0]
   1a3a4:	2200      	movs	r2, #0
   1a3a6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1a3aa:	e00b      	b.n	1a3c4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1a3ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a3b0:	f103 030c 	add.w	r3, r3, #12
   1a3b4:	681b      	ldr	r3, [r3, #0]
   1a3b6:	3301      	adds	r3, #1
   1a3b8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a3bc:	f102 020c 	add.w	r2, r2, #12
   1a3c0:	6013      	str	r3, [r2, #0]
   1a3c2:	e7cb      	b.n	1a35c <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   1a3c4:	f107 0310 	add.w	r3, r7, #16
   1a3c8:	3b0c      	subs	r3, #12
   1a3ca:	681b      	ldr	r3, [r3, #0]
   1a3cc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   1a3d0:	4618      	mov	r0, r3
   1a3d2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1a3d6:	3714      	adds	r7, #20
   1a3d8:	46bd      	mov	sp, r7
   1a3da:	bd90      	pop	{r4, r7, pc}
   1a3dc:	0001a175 	.word	0x0001a175
   1a3e0:	0001a225 	.word	0x0001a225
   1a3e4:	0001a111 	.word	0x0001a111
   1a3e8:	0001a141 	.word	0x0001a141

0001a3ec <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   1a3ec:	b580      	push	{r7, lr}
   1a3ee:	b082      	sub	sp, #8
   1a3f0:	af00      	add	r7, sp, #0
   1a3f2:	6078      	str	r0, [r7, #4]
   1a3f4:	6039      	str	r1, [r7, #0]
   1a3f6:	687b      	ldr	r3, [r7, #4]
   1a3f8:	2b01      	cmp	r3, #1
   1a3fa:	d10d      	bne.n	1a418 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a3fc:	683b      	ldr	r3, [r7, #0]
   1a3fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a402:	4293      	cmp	r3, r2
   1a404:	d108      	bne.n	1a418 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a406:	4906      	ldr	r1, [pc, #24]	; (1a420 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1a408:	4806      	ldr	r0, [pc, #24]	; (1a424 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a40a:	4b07      	ldr	r3, [pc, #28]	; (1a428 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1a40c:	4798      	blx	r3
   1a40e:	4a07      	ldr	r2, [pc, #28]	; (1a42c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1a410:	4907      	ldr	r1, [pc, #28]	; (1a430 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1a412:	4804      	ldr	r0, [pc, #16]	; (1a424 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a414:	4b07      	ldr	r3, [pc, #28]	; (1a434 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1a416:	4798      	blx	r3
   1a418:	bf00      	nop
   1a41a:	3708      	adds	r7, #8
   1a41c:	46bd      	mov	sp, r7
   1a41e:	bd80      	pop	{r7, pc}
   1a420:	2000d768 	.word	0x2000d768
   1a424:	2000d4a8 	.word	0x2000d4a8
   1a428:	0001a069 	.word	0x0001a069
   1a42c:	20000000 	.word	0x20000000
   1a430:	0001a091 	.word	0x0001a091
   1a434:	0001a44d 	.word	0x0001a44d

0001a438 <_GLOBAL__sub_I_ptrN25Q256Class>:
   1a438:	b580      	push	{r7, lr}
   1a43a:	af00      	add	r7, sp, #0
   1a43c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a440:	2001      	movs	r0, #1
   1a442:	4b01      	ldr	r3, [pc, #4]	; (1a448 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1a444:	4798      	blx	r3
   1a446:	bd80      	pop	{r7, pc}
   1a448:	0001a3ed 	.word	0x0001a3ed

0001a44c <__aeabi_atexit>:
   1a44c:	460b      	mov	r3, r1
   1a44e:	4601      	mov	r1, r0
   1a450:	4618      	mov	r0, r3
   1a452:	f002 b823 	b.w	1c49c <__cxa_atexit>
   1a456:	bf00      	nop

0001a458 <_ZdlPvj>:
   1a458:	f7f8 bec6 	b.w	131e8 <_ZdlPv>

0001a45c <pow>:
   1a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a460:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 1a754 <pow+0x2f8>
   1a464:	b08d      	sub	sp, #52	; 0x34
   1a466:	4606      	mov	r6, r0
   1a468:	460f      	mov	r7, r1
   1a46a:	4614      	mov	r4, r2
   1a46c:	461d      	mov	r5, r3
   1a46e:	f000 f973 	bl	1a758 <__ieee754_pow>
   1a472:	f999 8000 	ldrsb.w	r8, [r9]
   1a476:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a47a:	e9cd 0100 	strd	r0, r1, [sp]
   1a47e:	d036      	beq.n	1a4ee <pow+0x92>
   1a480:	4622      	mov	r2, r4
   1a482:	462b      	mov	r3, r5
   1a484:	4620      	mov	r0, r4
   1a486:	4629      	mov	r1, r5
   1a488:	f001 fcde 	bl	1be48 <__aeabi_dcmpun>
   1a48c:	4683      	mov	fp, r0
   1a48e:	bb70      	cbnz	r0, 1a4ee <pow+0x92>
   1a490:	4632      	mov	r2, r6
   1a492:	463b      	mov	r3, r7
   1a494:	4630      	mov	r0, r6
   1a496:	4639      	mov	r1, r7
   1a498:	f001 fcd6 	bl	1be48 <__aeabi_dcmpun>
   1a49c:	2200      	movs	r2, #0
   1a49e:	4682      	mov	sl, r0
   1a4a0:	2300      	movs	r3, #0
   1a4a2:	2800      	cmp	r0, #0
   1a4a4:	f040 80a0 	bne.w	1a5e8 <pow+0x18c>
   1a4a8:	4630      	mov	r0, r6
   1a4aa:	4639      	mov	r1, r7
   1a4ac:	f001 fc9a 	bl	1bde4 <__aeabi_dcmpeq>
   1a4b0:	b310      	cbz	r0, 1a4f8 <pow+0x9c>
   1a4b2:	2200      	movs	r2, #0
   1a4b4:	2300      	movs	r3, #0
   1a4b6:	4620      	mov	r0, r4
   1a4b8:	4629      	mov	r1, r5
   1a4ba:	f001 fc93 	bl	1bde4 <__aeabi_dcmpeq>
   1a4be:	4683      	mov	fp, r0
   1a4c0:	2800      	cmp	r0, #0
   1a4c2:	d06a      	beq.n	1a59a <pow+0x13e>
   1a4c4:	2201      	movs	r2, #1
   1a4c6:	4b9c      	ldr	r3, [pc, #624]	; (1a738 <pow+0x2dc>)
   1a4c8:	9202      	str	r2, [sp, #8]
   1a4ca:	2100      	movs	r1, #0
   1a4cc:	2200      	movs	r2, #0
   1a4ce:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1a4d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a4d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a4da:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1a4de:	9303      	str	r3, [sp, #12]
   1a4e0:	f1b8 0f00 	cmp.w	r8, #0
   1a4e4:	d045      	beq.n	1a572 <pow+0x116>
   1a4e6:	4c95      	ldr	r4, [pc, #596]	; (1a73c <pow+0x2e0>)
   1a4e8:	2300      	movs	r3, #0
   1a4ea:	e9cd 3400 	strd	r3, r4, [sp]
   1a4ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a4f2:	b00d      	add	sp, #52	; 0x34
   1a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a4fc:	f000 ff32 	bl	1b364 <finite>
   1a500:	4680      	mov	r8, r0
   1a502:	2800      	cmp	r0, #0
   1a504:	f000 808b 	beq.w	1a61e <pow+0x1c2>
   1a508:	f04f 0a00 	mov.w	sl, #0
   1a50c:	f04f 0b00 	mov.w	fp, #0
   1a510:	4652      	mov	r2, sl
   1a512:	465b      	mov	r3, fp
   1a514:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a518:	f001 fc64 	bl	1bde4 <__aeabi_dcmpeq>
   1a51c:	2800      	cmp	r0, #0
   1a51e:	d0e6      	beq.n	1a4ee <pow+0x92>
   1a520:	4630      	mov	r0, r6
   1a522:	4639      	mov	r1, r7
   1a524:	f000 ff1e 	bl	1b364 <finite>
   1a528:	2800      	cmp	r0, #0
   1a52a:	d0e0      	beq.n	1a4ee <pow+0x92>
   1a52c:	4620      	mov	r0, r4
   1a52e:	4629      	mov	r1, r5
   1a530:	f000 ff18 	bl	1b364 <finite>
   1a534:	2800      	cmp	r0, #0
   1a536:	d0da      	beq.n	1a4ee <pow+0x92>
   1a538:	f999 3000 	ldrsb.w	r3, [r9]
   1a53c:	4a7e      	ldr	r2, [pc, #504]	; (1a738 <pow+0x2dc>)
   1a53e:	9203      	str	r2, [sp, #12]
   1a540:	2104      	movs	r1, #4
   1a542:	2200      	movs	r2, #0
   1a544:	2b02      	cmp	r3, #2
   1a546:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a54a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a54e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1a552:	9102      	str	r1, [sp, #8]
   1a554:	920a      	str	r2, [sp, #40]	; 0x28
   1a556:	d003      	beq.n	1a560 <pow+0x104>
   1a558:	a802      	add	r0, sp, #8
   1a55a:	f000 ff09 	bl	1b370 <matherr>
   1a55e:	b968      	cbnz	r0, 1a57c <pow+0x120>
   1a560:	f001 ffa2 	bl	1c4a8 <__errno>
   1a564:	2322      	movs	r3, #34	; 0x22
   1a566:	6003      	str	r3, [r0, #0]
   1a568:	e008      	b.n	1a57c <pow+0x120>
   1a56a:	2300      	movs	r3, #0
   1a56c:	2400      	movs	r4, #0
   1a56e:	e9cd 3408 	strd	r3, r4, [sp, #32]
   1a572:	a802      	add	r0, sp, #8
   1a574:	f000 fefc 	bl	1b370 <matherr>
   1a578:	2800      	cmp	r0, #0
   1a57a:	d030      	beq.n	1a5de <pow+0x182>
   1a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a57e:	b11b      	cbz	r3, 1a588 <pow+0x12c>
   1a580:	f001 ff92 	bl	1c4a8 <__errno>
   1a584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a586:	6003      	str	r3, [r0, #0]
   1a588:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1a58c:	e9cd 3400 	strd	r3, r4, [sp]
   1a590:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a594:	b00d      	add	sp, #52	; 0x34
   1a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a59a:	4620      	mov	r0, r4
   1a59c:	4629      	mov	r1, r5
   1a59e:	f000 fee1 	bl	1b364 <finite>
   1a5a2:	2800      	cmp	r0, #0
   1a5a4:	d0a3      	beq.n	1a4ee <pow+0x92>
   1a5a6:	2200      	movs	r2, #0
   1a5a8:	2300      	movs	r3, #0
   1a5aa:	4620      	mov	r0, r4
   1a5ac:	4629      	mov	r1, r5
   1a5ae:	f001 fc23 	bl	1bdf8 <__aeabi_dcmplt>
   1a5b2:	2800      	cmp	r0, #0
   1a5b4:	d09b      	beq.n	1a4ee <pow+0x92>
   1a5b6:	f999 3000 	ldrsb.w	r3, [r9]
   1a5ba:	4a5f      	ldr	r2, [pc, #380]	; (1a738 <pow+0x2dc>)
   1a5bc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1a5c0:	2101      	movs	r1, #1
   1a5c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a5c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a5ca:	9102      	str	r1, [sp, #8]
   1a5cc:	9203      	str	r2, [sp, #12]
   1a5ce:	2b00      	cmp	r3, #0
   1a5d0:	d0cb      	beq.n	1a56a <pow+0x10e>
   1a5d2:	495b      	ldr	r1, [pc, #364]	; (1a740 <pow+0x2e4>)
   1a5d4:	2000      	movs	r0, #0
   1a5d6:	2b02      	cmp	r3, #2
   1a5d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1a5dc:	d1c9      	bne.n	1a572 <pow+0x116>
   1a5de:	f001 ff63 	bl	1c4a8 <__errno>
   1a5e2:	2321      	movs	r3, #33	; 0x21
   1a5e4:	6003      	str	r3, [r0, #0]
   1a5e6:	e7c9      	b.n	1a57c <pow+0x120>
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	4629      	mov	r1, r5
   1a5ec:	f001 fbfa 	bl	1bde4 <__aeabi_dcmpeq>
   1a5f0:	2800      	cmp	r0, #0
   1a5f2:	f43f af7c 	beq.w	1a4ee <pow+0x92>
   1a5f6:	4b51      	ldr	r3, [pc, #324]	; (1a73c <pow+0x2e0>)
   1a5f8:	494f      	ldr	r1, [pc, #316]	; (1a738 <pow+0x2dc>)
   1a5fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1a5fe:	2001      	movs	r0, #1
   1a600:	2200      	movs	r2, #0
   1a602:	f1b8 0f02 	cmp.w	r8, #2
   1a606:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a60a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a60e:	9002      	str	r0, [sp, #8]
   1a610:	9103      	str	r1, [sp, #12]
   1a612:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a616:	d1ac      	bne.n	1a572 <pow+0x116>
   1a618:	e9cd 2300 	strd	r2, r3, [sp]
   1a61c:	e767      	b.n	1a4ee <pow+0x92>
   1a61e:	4630      	mov	r0, r6
   1a620:	4639      	mov	r1, r7
   1a622:	f000 fe9f 	bl	1b364 <finite>
   1a626:	2800      	cmp	r0, #0
   1a628:	f43f af6e 	beq.w	1a508 <pow+0xac>
   1a62c:	4620      	mov	r0, r4
   1a62e:	4629      	mov	r1, r5
   1a630:	f000 fe98 	bl	1b364 <finite>
   1a634:	2800      	cmp	r0, #0
   1a636:	f43f af67 	beq.w	1a508 <pow+0xac>
   1a63a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a63e:	4610      	mov	r0, r2
   1a640:	4619      	mov	r1, r3
   1a642:	f001 fc01 	bl	1be48 <__aeabi_dcmpun>
   1a646:	2800      	cmp	r0, #0
   1a648:	d158      	bne.n	1a6fc <pow+0x2a0>
   1a64a:	2303      	movs	r3, #3
   1a64c:	f999 8000 	ldrsb.w	r8, [r9]
   1a650:	9302      	str	r3, [sp, #8]
   1a652:	4b39      	ldr	r3, [pc, #228]	; (1a738 <pow+0x2dc>)
   1a654:	900a      	str	r0, [sp, #40]	; 0x28
   1a656:	9303      	str	r3, [sp, #12]
   1a658:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a65c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a660:	2200      	movs	r2, #0
   1a662:	2300      	movs	r3, #0
   1a664:	4630      	mov	r0, r6
   1a666:	4639      	mov	r1, r7
   1a668:	f1b8 0f00 	cmp.w	r8, #0
   1a66c:	d126      	bne.n	1a6bc <pow+0x260>
   1a66e:	4f35      	ldr	r7, [pc, #212]	; (1a744 <pow+0x2e8>)
   1a670:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   1a674:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a678:	f001 fbbe 	bl	1bdf8 <__aeabi_dcmplt>
   1a67c:	2800      	cmp	r0, #0
   1a67e:	f43f af6b 	beq.w	1a558 <pow+0xfc>
   1a682:	2200      	movs	r2, #0
   1a684:	4b30      	ldr	r3, [pc, #192]	; (1a748 <pow+0x2ec>)
   1a686:	4620      	mov	r0, r4
   1a688:	4629      	mov	r1, r5
   1a68a:	f001 f943 	bl	1b914 <__aeabi_dmul>
   1a68e:	4604      	mov	r4, r0
   1a690:	460d      	mov	r5, r1
   1a692:	f000 fe75 	bl	1b380 <rint>
   1a696:	4602      	mov	r2, r0
   1a698:	460b      	mov	r3, r1
   1a69a:	4620      	mov	r0, r4
   1a69c:	4629      	mov	r1, r5
   1a69e:	f001 fba1 	bl	1bde4 <__aeabi_dcmpeq>
   1a6a2:	bb40      	cbnz	r0, 1a6f6 <pow+0x29a>
   1a6a4:	4b29      	ldr	r3, [pc, #164]	; (1a74c <pow+0x2f0>)
   1a6a6:	f999 8000 	ldrsb.w	r8, [r9]
   1a6aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1a6ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a6b2:	f1b8 0f02 	cmp.w	r8, #2
   1a6b6:	f47f af4f 	bne.w	1a558 <pow+0xfc>
   1a6ba:	e751      	b.n	1a560 <pow+0x104>
   1a6bc:	4f24      	ldr	r7, [pc, #144]	; (1a750 <pow+0x2f4>)
   1a6be:	2600      	movs	r6, #0
   1a6c0:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a6c4:	f001 fb98 	bl	1bdf8 <__aeabi_dcmplt>
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	d0f2      	beq.n	1a6b2 <pow+0x256>
   1a6cc:	2200      	movs	r2, #0
   1a6ce:	4b1e      	ldr	r3, [pc, #120]	; (1a748 <pow+0x2ec>)
   1a6d0:	4620      	mov	r0, r4
   1a6d2:	4629      	mov	r1, r5
   1a6d4:	f001 f91e 	bl	1b914 <__aeabi_dmul>
   1a6d8:	4604      	mov	r4, r0
   1a6da:	460d      	mov	r5, r1
   1a6dc:	f000 fe50 	bl	1b380 <rint>
   1a6e0:	4602      	mov	r2, r0
   1a6e2:	460b      	mov	r3, r1
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	4629      	mov	r1, r5
   1a6e8:	f001 fb7c 	bl	1bde4 <__aeabi_dcmpeq>
   1a6ec:	b918      	cbnz	r0, 1a6f6 <pow+0x29a>
   1a6ee:	4b14      	ldr	r3, [pc, #80]	; (1a740 <pow+0x2e4>)
   1a6f0:	2200      	movs	r2, #0
   1a6f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a6f6:	f999 8000 	ldrsb.w	r8, [r9]
   1a6fa:	e7da      	b.n	1a6b2 <pow+0x256>
   1a6fc:	f999 9000 	ldrsb.w	r9, [r9]
   1a700:	4b0d      	ldr	r3, [pc, #52]	; (1a738 <pow+0x2dc>)
   1a702:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1a706:	2201      	movs	r2, #1
   1a708:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a70c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a710:	9202      	str	r2, [sp, #8]
   1a712:	9303      	str	r3, [sp, #12]
   1a714:	f1b9 0f00 	cmp.w	r9, #0
   1a718:	f43f af27 	beq.w	1a56a <pow+0x10e>
   1a71c:	2200      	movs	r2, #0
   1a71e:	2300      	movs	r3, #0
   1a720:	4610      	mov	r0, r2
   1a722:	4619      	mov	r1, r3
   1a724:	f001 fa20 	bl	1bb68 <__aeabi_ddiv>
   1a728:	f1b9 0f02 	cmp.w	r9, #2
   1a72c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1a730:	f43f af55 	beq.w	1a5de <pow+0x182>
   1a734:	e71d      	b.n	1a572 <pow+0x116>
   1a736:	bf00      	nop
   1a738:	0001dd04 	.word	0x0001dd04
   1a73c:	3ff00000 	.word	0x3ff00000
   1a740:	fff00000 	.word	0xfff00000
   1a744:	47efffff 	.word	0x47efffff
   1a748:	3fe00000 	.word	0x3fe00000
   1a74c:	c7efffff 	.word	0xc7efffff
   1a750:	7ff00000 	.word	0x7ff00000
   1a754:	200001e7 	.word	0x200001e7

0001a758 <__ieee754_pow>:
   1a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a75c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1a760:	ea57 0402 	orrs.w	r4, r7, r2
   1a764:	b093      	sub	sp, #76	; 0x4c
   1a766:	d037      	beq.n	1a7d8 <__ieee754_pow+0x80>
   1a768:	4c67      	ldr	r4, [pc, #412]	; (1a908 <__ieee754_pow+0x1b0>)
   1a76a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1a76e:	42a6      	cmp	r6, r4
   1a770:	4683      	mov	fp, r0
   1a772:	460d      	mov	r5, r1
   1a774:	dc29      	bgt.n	1a7ca <__ieee754_pow+0x72>
   1a776:	469a      	mov	sl, r3
   1a778:	4696      	mov	lr, r2
   1a77a:	d025      	beq.n	1a7c8 <__ieee754_pow+0x70>
   1a77c:	42a7      	cmp	r7, r4
   1a77e:	dc24      	bgt.n	1a7ca <__ieee754_pow+0x72>
   1a780:	4c61      	ldr	r4, [pc, #388]	; (1a908 <__ieee754_pow+0x1b0>)
   1a782:	42a7      	cmp	r7, r4
   1a784:	d079      	beq.n	1a87a <__ieee754_pow+0x122>
   1a786:	2d00      	cmp	r5, #0
   1a788:	4689      	mov	r9, r1
   1a78a:	4680      	mov	r8, r0
   1a78c:	e9cd 2300 	strd	r2, r3, [sp]
   1a790:	db77      	blt.n	1a882 <__ieee754_pow+0x12a>
   1a792:	2400      	movs	r4, #0
   1a794:	f1be 0f00 	cmp.w	lr, #0
   1a798:	d12c      	bne.n	1a7f4 <__ieee754_pow+0x9c>
   1a79a:	4b5b      	ldr	r3, [pc, #364]	; (1a908 <__ieee754_pow+0x1b0>)
   1a79c:	429f      	cmp	r7, r3
   1a79e:	f000 808b 	beq.w	1a8b8 <__ieee754_pow+0x160>
   1a7a2:	4b5a      	ldr	r3, [pc, #360]	; (1a90c <__ieee754_pow+0x1b4>)
   1a7a4:	429f      	cmp	r7, r3
   1a7a6:	d061      	beq.n	1a86c <__ieee754_pow+0x114>
   1a7a8:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   1a7ac:	f000 83ba 	beq.w	1af24 <__ieee754_pow+0x7cc>
   1a7b0:	4b57      	ldr	r3, [pc, #348]	; (1a910 <__ieee754_pow+0x1b8>)
   1a7b2:	459a      	cmp	sl, r3
   1a7b4:	d11e      	bne.n	1a7f4 <__ieee754_pow+0x9c>
   1a7b6:	2d00      	cmp	r5, #0
   1a7b8:	db1c      	blt.n	1a7f4 <__ieee754_pow+0x9c>
   1a7ba:	4640      	mov	r0, r8
   1a7bc:	4649      	mov	r1, r9
   1a7be:	b013      	add	sp, #76	; 0x4c
   1a7c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7c4:	f000 bd0e 	b.w	1b1e4 <__ieee754_sqrt>
   1a7c8:	b158      	cbz	r0, 1a7e2 <__ieee754_pow+0x8a>
   1a7ca:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a7ce:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a7d2:	ea56 030b 	orrs.w	r3, r6, fp
   1a7d6:	d106      	bne.n	1a7e6 <__ieee754_pow+0x8e>
   1a7d8:	494c      	ldr	r1, [pc, #304]	; (1a90c <__ieee754_pow+0x1b4>)
   1a7da:	2000      	movs	r0, #0
   1a7dc:	b013      	add	sp, #76	; 0x4c
   1a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7e2:	42b7      	cmp	r7, r6
   1a7e4:	ddcc      	ble.n	1a780 <__ieee754_pow+0x28>
   1a7e6:	484b      	ldr	r0, [pc, #300]	; (1a914 <__ieee754_pow+0x1bc>)
   1a7e8:	b013      	add	sp, #76	; 0x4c
   1a7ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7ee:	f000 bdc1 	b.w	1b374 <nan>
   1a7f2:	2400      	movs	r4, #0
   1a7f4:	4640      	mov	r0, r8
   1a7f6:	4649      	mov	r1, r9
   1a7f8:	f000 fdb0 	bl	1b35c <fabs>
   1a7fc:	f1bb 0f00 	cmp.w	fp, #0
   1a800:	d119      	bne.n	1a836 <__ieee754_pow+0xde>
   1a802:	b126      	cbz	r6, 1a80e <__ieee754_pow+0xb6>
   1a804:	4b41      	ldr	r3, [pc, #260]	; (1a90c <__ieee754_pow+0x1b4>)
   1a806:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1a80a:	429a      	cmp	r2, r3
   1a80c:	d113      	bne.n	1a836 <__ieee754_pow+0xde>
   1a80e:	f1ba 0f00 	cmp.w	sl, #0
   1a812:	f2c0 83bc 	blt.w	1af8e <__ieee754_pow+0x836>
   1a816:	2d00      	cmp	r5, #0
   1a818:	dae0      	bge.n	1a7dc <__ieee754_pow+0x84>
   1a81a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a81e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a822:	ea56 0304 	orrs.w	r3, r6, r4
   1a826:	f000 848f 	beq.w	1b148 <__ieee754_pow+0x9f0>
   1a82a:	2c01      	cmp	r4, #1
   1a82c:	d1d6      	bne.n	1a7dc <__ieee754_pow+0x84>
   1a82e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1a832:	4619      	mov	r1, r3
   1a834:	e7d2      	b.n	1a7dc <__ieee754_pow+0x84>
   1a836:	0fed      	lsrs	r5, r5, #31
   1a838:	3d01      	subs	r5, #1
   1a83a:	ea54 0305 	orrs.w	r3, r4, r5
   1a83e:	d04e      	beq.n	1a8de <__ieee754_pow+0x186>
   1a840:	4b35      	ldr	r3, [pc, #212]	; (1a918 <__ieee754_pow+0x1c0>)
   1a842:	429f      	cmp	r7, r3
   1a844:	dd6e      	ble.n	1a924 <__ieee754_pow+0x1cc>
   1a846:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   1a84a:	429f      	cmp	r7, r3
   1a84c:	f340 83e8 	ble.w	1b020 <__ieee754_pow+0x8c8>
   1a850:	4b32      	ldr	r3, [pc, #200]	; (1a91c <__ieee754_pow+0x1c4>)
   1a852:	429e      	cmp	r6, r3
   1a854:	dd4e      	ble.n	1a8f4 <__ieee754_pow+0x19c>
   1a856:	f1ba 0f00 	cmp.w	sl, #0
   1a85a:	dd4e      	ble.n	1a8fa <__ieee754_pow+0x1a2>
   1a85c:	a328      	add	r3, pc, #160	; (adr r3, 1a900 <__ieee754_pow+0x1a8>)
   1a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a862:	4610      	mov	r0, r2
   1a864:	4619      	mov	r1, r3
   1a866:	f001 f855 	bl	1b914 <__aeabi_dmul>
   1a86a:	e7b7      	b.n	1a7dc <__ieee754_pow+0x84>
   1a86c:	f1ba 0f00 	cmp.w	sl, #0
   1a870:	f2c0 843c 	blt.w	1b0ec <__ieee754_pow+0x994>
   1a874:	4640      	mov	r0, r8
   1a876:	4649      	mov	r1, r9
   1a878:	e7b0      	b.n	1a7dc <__ieee754_pow+0x84>
   1a87a:	f1be 0f00 	cmp.w	lr, #0
   1a87e:	d082      	beq.n	1a786 <__ieee754_pow+0x2e>
   1a880:	e7a3      	b.n	1a7ca <__ieee754_pow+0x72>
   1a882:	4b27      	ldr	r3, [pc, #156]	; (1a920 <__ieee754_pow+0x1c8>)
   1a884:	429f      	cmp	r7, r3
   1a886:	dc28      	bgt.n	1a8da <__ieee754_pow+0x182>
   1a888:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1a88c:	429f      	cmp	r7, r3
   1a88e:	dd80      	ble.n	1a792 <__ieee754_pow+0x3a>
   1a890:	153b      	asrs	r3, r7, #20
   1a892:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a896:	2b14      	cmp	r3, #20
   1a898:	f340 843e 	ble.w	1b118 <__ieee754_pow+0x9c0>
   1a89c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1a8a0:	fa2e f203 	lsr.w	r2, lr, r3
   1a8a4:	fa02 f303 	lsl.w	r3, r2, r3
   1a8a8:	459e      	cmp	lr, r3
   1a8aa:	f47f af72 	bne.w	1a792 <__ieee754_pow+0x3a>
   1a8ae:	f002 0201 	and.w	r2, r2, #1
   1a8b2:	f1c2 0402 	rsb	r4, r2, #2
   1a8b6:	e76d      	b.n	1a794 <__ieee754_pow+0x3c>
   1a8b8:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   1a8bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1a8c0:	ea53 030b 	orrs.w	r3, r3, fp
   1a8c4:	d088      	beq.n	1a7d8 <__ieee754_pow+0x80>
   1a8c6:	4b15      	ldr	r3, [pc, #84]	; (1a91c <__ieee754_pow+0x1c4>)
   1a8c8:	429e      	cmp	r6, r3
   1a8ca:	f340 8332 	ble.w	1af32 <__ieee754_pow+0x7da>
   1a8ce:	f1ba 0f00 	cmp.w	sl, #0
   1a8d2:	db12      	blt.n	1a8fa <__ieee754_pow+0x1a2>
   1a8d4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a8d8:	e780      	b.n	1a7dc <__ieee754_pow+0x84>
   1a8da:	2402      	movs	r4, #2
   1a8dc:	e75a      	b.n	1a794 <__ieee754_pow+0x3c>
   1a8de:	4642      	mov	r2, r8
   1a8e0:	464b      	mov	r3, r9
   1a8e2:	4640      	mov	r0, r8
   1a8e4:	4649      	mov	r1, r9
   1a8e6:	f000 fe61 	bl	1b5ac <__aeabi_dsub>
   1a8ea:	4602      	mov	r2, r0
   1a8ec:	460b      	mov	r3, r1
   1a8ee:	f001 f93b 	bl	1bb68 <__aeabi_ddiv>
   1a8f2:	e773      	b.n	1a7dc <__ieee754_pow+0x84>
   1a8f4:	f1ba 0f00 	cmp.w	sl, #0
   1a8f8:	dbb0      	blt.n	1a85c <__ieee754_pow+0x104>
   1a8fa:	2000      	movs	r0, #0
   1a8fc:	2100      	movs	r1, #0
   1a8fe:	e76d      	b.n	1a7dc <__ieee754_pow+0x84>
   1a900:	8800759c 	.word	0x8800759c
   1a904:	7e37e43c 	.word	0x7e37e43c
   1a908:	7ff00000 	.word	0x7ff00000
   1a90c:	3ff00000 	.word	0x3ff00000
   1a910:	3fe00000 	.word	0x3fe00000
   1a914:	0001d77c 	.word	0x0001d77c
   1a918:	41e00000 	.word	0x41e00000
   1a91c:	3fefffff 	.word	0x3fefffff
   1a920:	433fffff 	.word	0x433fffff
   1a924:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1a928:	f04f 0200 	mov.w	r2, #0
   1a92c:	da05      	bge.n	1a93a <__ieee754_pow+0x1e2>
   1a92e:	4bd4      	ldr	r3, [pc, #848]	; (1ac80 <__ieee754_pow+0x528>)
   1a930:	f000 fff0 	bl	1b914 <__aeabi_dmul>
   1a934:	f06f 0234 	mvn.w	r2, #52	; 0x34
   1a938:	460e      	mov	r6, r1
   1a93a:	1533      	asrs	r3, r6, #20
   1a93c:	4fd1      	ldr	r7, [pc, #836]	; (1ac84 <__ieee754_pow+0x52c>)
   1a93e:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1a942:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a946:	4413      	add	r3, r2
   1a948:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   1a94c:	42be      	cmp	r6, r7
   1a94e:	461a      	mov	r2, r3
   1a950:	930d      	str	r3, [sp, #52]	; 0x34
   1a952:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1a956:	f340 8321 	ble.w	1af9c <__ieee754_pow+0x844>
   1a95a:	4bcb      	ldr	r3, [pc, #812]	; (1ac88 <__ieee754_pow+0x530>)
   1a95c:	429e      	cmp	r6, r3
   1a95e:	f340 83fd 	ble.w	1b15c <__ieee754_pow+0xa04>
   1a962:	4613      	mov	r3, r2
   1a964:	3301      	adds	r3, #1
   1a966:	930d      	str	r3, [sp, #52]	; 0x34
   1a968:	4bc8      	ldr	r3, [pc, #800]	; (1ac8c <__ieee754_pow+0x534>)
   1a96a:	2200      	movs	r2, #0
   1a96c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a970:	2700      	movs	r7, #0
   1a972:	2600      	movs	r6, #0
   1a974:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a978:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1a97c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   1a980:	2700      	movs	r7, #0
   1a982:	4602      	mov	r2, r0
   1a984:	4653      	mov	r3, sl
   1a986:	4651      	mov	r1, sl
   1a988:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1a98c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a990:	f000 fe0c 	bl	1b5ac <__aeabi_dsub>
   1a994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a998:	4680      	mov	r8, r0
   1a99a:	4689      	mov	r9, r1
   1a99c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a9a0:	f000 fe06 	bl	1b5b0 <__adddf3>
   1a9a4:	4602      	mov	r2, r0
   1a9a6:	460b      	mov	r3, r1
   1a9a8:	2000      	movs	r0, #0
   1a9aa:	49b8      	ldr	r1, [pc, #736]	; (1ac8c <__ieee754_pow+0x534>)
   1a9ac:	f001 f8dc 	bl	1bb68 <__aeabi_ddiv>
   1a9b0:	460a      	mov	r2, r1
   1a9b2:	4601      	mov	r1, r0
   1a9b4:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1a9b8:	4613      	mov	r3, r2
   1a9ba:	4649      	mov	r1, r9
   1a9bc:	4602      	mov	r2, r0
   1a9be:	4640      	mov	r0, r8
   1a9c0:	f000 ffa8 	bl	1b914 <__aeabi_dmul>
   1a9c4:	ea4f 036a 	mov.w	r3, sl, asr #1
   1a9c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a9cc:	468c      	mov	ip, r1
   1a9ce:	4683      	mov	fp, r0
   1a9d0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1a9d4:	e9cd bc04 	strd	fp, ip, [sp, #16]
   1a9d8:	46da      	mov	sl, fp
   1a9da:	468b      	mov	fp, r1
   1a9dc:	19d9      	adds	r1, r3, r7
   1a9de:	2300      	movs	r3, #0
   1a9e0:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1a9e4:	9302      	str	r3, [sp, #8]
   1a9e6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a9ea:	2000      	movs	r0, #0
   1a9ec:	4606      	mov	r6, r0
   1a9ee:	460f      	mov	r7, r1
   1a9f0:	4602      	mov	r2, r0
   1a9f2:	460b      	mov	r3, r1
   1a9f4:	4650      	mov	r0, sl
   1a9f6:	4659      	mov	r1, fp
   1a9f8:	f000 ff8c 	bl	1b914 <__aeabi_dmul>
   1a9fc:	4602      	mov	r2, r0
   1a9fe:	460b      	mov	r3, r1
   1aa00:	4640      	mov	r0, r8
   1aa02:	4649      	mov	r1, r9
   1aa04:	f000 fdd2 	bl	1b5ac <__aeabi_dsub>
   1aa08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1aa0c:	4680      	mov	r8, r0
   1aa0e:	4689      	mov	r9, r1
   1aa10:	4630      	mov	r0, r6
   1aa12:	4639      	mov	r1, r7
   1aa14:	f000 fdca 	bl	1b5ac <__aeabi_dsub>
   1aa18:	4602      	mov	r2, r0
   1aa1a:	460b      	mov	r3, r1
   1aa1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1aa20:	f000 fdc4 	bl	1b5ac <__aeabi_dsub>
   1aa24:	4652      	mov	r2, sl
   1aa26:	465b      	mov	r3, fp
   1aa28:	f000 ff74 	bl	1b914 <__aeabi_dmul>
   1aa2c:	4602      	mov	r2, r0
   1aa2e:	460b      	mov	r3, r1
   1aa30:	4640      	mov	r0, r8
   1aa32:	4649      	mov	r1, r9
   1aa34:	f000 fdba 	bl	1b5ac <__aeabi_dsub>
   1aa38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1aa3c:	f000 ff6a 	bl	1b914 <__aeabi_dmul>
   1aa40:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1aa44:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aa48:	4632      	mov	r2, r6
   1aa4a:	463b      	mov	r3, r7
   1aa4c:	4630      	mov	r0, r6
   1aa4e:	4639      	mov	r1, r7
   1aa50:	f000 ff60 	bl	1b914 <__aeabi_dmul>
   1aa54:	a378      	add	r3, pc, #480	; (adr r3, 1ac38 <__ieee754_pow+0x4e0>)
   1aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa5a:	4606      	mov	r6, r0
   1aa5c:	460f      	mov	r7, r1
   1aa5e:	f000 ff59 	bl	1b914 <__aeabi_dmul>
   1aa62:	a377      	add	r3, pc, #476	; (adr r3, 1ac40 <__ieee754_pow+0x4e8>)
   1aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa68:	f000 fda2 	bl	1b5b0 <__adddf3>
   1aa6c:	4632      	mov	r2, r6
   1aa6e:	463b      	mov	r3, r7
   1aa70:	f000 ff50 	bl	1b914 <__aeabi_dmul>
   1aa74:	a374      	add	r3, pc, #464	; (adr r3, 1ac48 <__ieee754_pow+0x4f0>)
   1aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa7a:	f000 fd99 	bl	1b5b0 <__adddf3>
   1aa7e:	4632      	mov	r2, r6
   1aa80:	463b      	mov	r3, r7
   1aa82:	f000 ff47 	bl	1b914 <__aeabi_dmul>
   1aa86:	a372      	add	r3, pc, #456	; (adr r3, 1ac50 <__ieee754_pow+0x4f8>)
   1aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa8c:	f000 fd90 	bl	1b5b0 <__adddf3>
   1aa90:	4632      	mov	r2, r6
   1aa92:	463b      	mov	r3, r7
   1aa94:	f000 ff3e 	bl	1b914 <__aeabi_dmul>
   1aa98:	a36f      	add	r3, pc, #444	; (adr r3, 1ac58 <__ieee754_pow+0x500>)
   1aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa9e:	f000 fd87 	bl	1b5b0 <__adddf3>
   1aaa2:	4632      	mov	r2, r6
   1aaa4:	463b      	mov	r3, r7
   1aaa6:	f000 ff35 	bl	1b914 <__aeabi_dmul>
   1aaaa:	a36d      	add	r3, pc, #436	; (adr r3, 1ac60 <__ieee754_pow+0x508>)
   1aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aab0:	f000 fd7e 	bl	1b5b0 <__adddf3>
   1aab4:	4632      	mov	r2, r6
   1aab6:	4680      	mov	r8, r0
   1aab8:	4689      	mov	r9, r1
   1aaba:	463b      	mov	r3, r7
   1aabc:	4630      	mov	r0, r6
   1aabe:	4639      	mov	r1, r7
   1aac0:	f000 ff28 	bl	1b914 <__aeabi_dmul>
   1aac4:	4602      	mov	r2, r0
   1aac6:	460b      	mov	r3, r1
   1aac8:	4640      	mov	r0, r8
   1aaca:	4649      	mov	r1, r9
   1aacc:	f000 ff22 	bl	1b914 <__aeabi_dmul>
   1aad0:	4652      	mov	r2, sl
   1aad2:	4606      	mov	r6, r0
   1aad4:	460f      	mov	r7, r1
   1aad6:	465b      	mov	r3, fp
   1aad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1aadc:	f000 fd68 	bl	1b5b0 <__adddf3>
   1aae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1aae4:	f000 ff16 	bl	1b914 <__aeabi_dmul>
   1aae8:	4632      	mov	r2, r6
   1aaea:	463b      	mov	r3, r7
   1aaec:	f000 fd60 	bl	1b5b0 <__adddf3>
   1aaf0:	4652      	mov	r2, sl
   1aaf2:	4680      	mov	r8, r0
   1aaf4:	4689      	mov	r9, r1
   1aaf6:	465b      	mov	r3, fp
   1aaf8:	4650      	mov	r0, sl
   1aafa:	4659      	mov	r1, fp
   1aafc:	f000 ff0a 	bl	1b914 <__aeabi_dmul>
   1ab00:	2200      	movs	r2, #0
   1ab02:	4b63      	ldr	r3, [pc, #396]	; (1ac90 <__ieee754_pow+0x538>)
   1ab04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1ab08:	f000 fd52 	bl	1b5b0 <__adddf3>
   1ab0c:	4642      	mov	r2, r8
   1ab0e:	464b      	mov	r3, r9
   1ab10:	f000 fd4e 	bl	1b5b0 <__adddf3>
   1ab14:	9802      	ldr	r0, [sp, #8]
   1ab16:	460f      	mov	r7, r1
   1ab18:	4606      	mov	r6, r0
   1ab1a:	4632      	mov	r2, r6
   1ab1c:	463b      	mov	r3, r7
   1ab1e:	4650      	mov	r0, sl
   1ab20:	4659      	mov	r1, fp
   1ab22:	f000 fef7 	bl	1b914 <__aeabi_dmul>
   1ab26:	2200      	movs	r2, #0
   1ab28:	4682      	mov	sl, r0
   1ab2a:	468b      	mov	fp, r1
   1ab2c:	4b58      	ldr	r3, [pc, #352]	; (1ac90 <__ieee754_pow+0x538>)
   1ab2e:	4630      	mov	r0, r6
   1ab30:	4639      	mov	r1, r7
   1ab32:	f000 fd3b 	bl	1b5ac <__aeabi_dsub>
   1ab36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1ab3a:	f000 fd37 	bl	1b5ac <__aeabi_dsub>
   1ab3e:	4602      	mov	r2, r0
   1ab40:	460b      	mov	r3, r1
   1ab42:	4640      	mov	r0, r8
   1ab44:	4649      	mov	r1, r9
   1ab46:	f000 fd31 	bl	1b5ac <__aeabi_dsub>
   1ab4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ab4e:	f000 fee1 	bl	1b914 <__aeabi_dmul>
   1ab52:	4632      	mov	r2, r6
   1ab54:	4680      	mov	r8, r0
   1ab56:	4689      	mov	r9, r1
   1ab58:	463b      	mov	r3, r7
   1ab5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ab5e:	f000 fed9 	bl	1b914 <__aeabi_dmul>
   1ab62:	4602      	mov	r2, r0
   1ab64:	460b      	mov	r3, r1
   1ab66:	4640      	mov	r0, r8
   1ab68:	4649      	mov	r1, r9
   1ab6a:	f000 fd21 	bl	1b5b0 <__adddf3>
   1ab6e:	4680      	mov	r8, r0
   1ab70:	4689      	mov	r9, r1
   1ab72:	4602      	mov	r2, r0
   1ab74:	460b      	mov	r3, r1
   1ab76:	4650      	mov	r0, sl
   1ab78:	4659      	mov	r1, fp
   1ab7a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1ab7e:	f000 fd17 	bl	1b5b0 <__adddf3>
   1ab82:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1ab86:	a338      	add	r3, pc, #224	; (adr r3, 1ac68 <__ieee754_pow+0x510>)
   1ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab8c:	4650      	mov	r0, sl
   1ab8e:	460f      	mov	r7, r1
   1ab90:	f000 fec0 	bl	1b914 <__aeabi_dmul>
   1ab94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ab98:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ab9c:	4639      	mov	r1, r7
   1ab9e:	4650      	mov	r0, sl
   1aba0:	f000 fd04 	bl	1b5ac <__aeabi_dsub>
   1aba4:	4602      	mov	r2, r0
   1aba6:	460b      	mov	r3, r1
   1aba8:	4640      	mov	r0, r8
   1abaa:	4649      	mov	r1, r9
   1abac:	f000 fcfe 	bl	1b5ac <__aeabi_dsub>
   1abb0:	a32f      	add	r3, pc, #188	; (adr r3, 1ac70 <__ieee754_pow+0x518>)
   1abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abb6:	f000 fead 	bl	1b914 <__aeabi_dmul>
   1abba:	a32f      	add	r3, pc, #188	; (adr r3, 1ac78 <__ieee754_pow+0x520>)
   1abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abc0:	4680      	mov	r8, r0
   1abc2:	4689      	mov	r9, r1
   1abc4:	4650      	mov	r0, sl
   1abc6:	4639      	mov	r1, r7
   1abc8:	f000 fea4 	bl	1b914 <__aeabi_dmul>
   1abcc:	4602      	mov	r2, r0
   1abce:	460b      	mov	r3, r1
   1abd0:	4640      	mov	r0, r8
   1abd2:	4649      	mov	r1, r9
   1abd4:	f000 fcec 	bl	1b5b0 <__adddf3>
   1abd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1abdc:	f000 fce8 	bl	1b5b0 <__adddf3>
   1abe0:	4680      	mov	r8, r0
   1abe2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1abe4:	4689      	mov	r9, r1
   1abe6:	f000 fe2f 	bl	1b848 <__aeabi_i2d>
   1abea:	4642      	mov	r2, r8
   1abec:	4606      	mov	r6, r0
   1abee:	460f      	mov	r7, r1
   1abf0:	464b      	mov	r3, r9
   1abf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1abf6:	f000 fcdb 	bl	1b5b0 <__adddf3>
   1abfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1abfe:	f000 fcd7 	bl	1b5b0 <__adddf3>
   1ac02:	4632      	mov	r2, r6
   1ac04:	463b      	mov	r3, r7
   1ac06:	f000 fcd3 	bl	1b5b0 <__adddf3>
   1ac0a:	4632      	mov	r2, r6
   1ac0c:	463b      	mov	r3, r7
   1ac0e:	4650      	mov	r0, sl
   1ac10:	468b      	mov	fp, r1
   1ac12:	f000 fccb 	bl	1b5ac <__aeabi_dsub>
   1ac16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1ac1a:	f000 fcc7 	bl	1b5ac <__aeabi_dsub>
   1ac1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ac22:	f000 fcc3 	bl	1b5ac <__aeabi_dsub>
   1ac26:	4602      	mov	r2, r0
   1ac28:	460b      	mov	r3, r1
   1ac2a:	4640      	mov	r0, r8
   1ac2c:	4649      	mov	r1, r9
   1ac2e:	f000 fcbd 	bl	1b5ac <__aeabi_dsub>
   1ac32:	4680      	mov	r8, r0
   1ac34:	e02e      	b.n	1ac94 <__ieee754_pow+0x53c>
   1ac36:	bf00      	nop
   1ac38:	4a454eef 	.word	0x4a454eef
   1ac3c:	3fca7e28 	.word	0x3fca7e28
   1ac40:	93c9db65 	.word	0x93c9db65
   1ac44:	3fcd864a 	.word	0x3fcd864a
   1ac48:	a91d4101 	.word	0xa91d4101
   1ac4c:	3fd17460 	.word	0x3fd17460
   1ac50:	518f264d 	.word	0x518f264d
   1ac54:	3fd55555 	.word	0x3fd55555
   1ac58:	db6fabff 	.word	0xdb6fabff
   1ac5c:	3fdb6db6 	.word	0x3fdb6db6
   1ac60:	33333303 	.word	0x33333303
   1ac64:	3fe33333 	.word	0x3fe33333
   1ac68:	e0000000 	.word	0xe0000000
   1ac6c:	3feec709 	.word	0x3feec709
   1ac70:	dc3a03fd 	.word	0xdc3a03fd
   1ac74:	3feec709 	.word	0x3feec709
   1ac78:	145b01f5 	.word	0x145b01f5
   1ac7c:	be3e2fe0 	.word	0xbe3e2fe0
   1ac80:	43400000 	.word	0x43400000
   1ac84:	0003988e 	.word	0x0003988e
   1ac88:	000bb679 	.word	0x000bb679
   1ac8c:	3ff00000 	.word	0x3ff00000
   1ac90:	40080000 	.word	0x40080000
   1ac94:	4689      	mov	r9, r1
   1ac96:	3c01      	subs	r4, #1
   1ac98:	ea54 0305 	orrs.w	r3, r4, r5
   1ac9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1aca0:	bf14      	ite	ne
   1aca2:	4cd9      	ldrne	r4, [pc, #868]	; (1b008 <__ieee754_pow+0x8b0>)
   1aca4:	4cd9      	ldreq	r4, [pc, #868]	; (1b00c <__ieee754_pow+0x8b4>)
   1aca6:	2300      	movs	r3, #0
   1aca8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1acac:	4603      	mov	r3, r0
   1acae:	460c      	mov	r4, r1
   1acb0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1acb4:	2300      	movs	r3, #0
   1acb6:	9302      	str	r3, [sp, #8]
   1acb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1acbc:	4622      	mov	r2, r4
   1acbe:	462b      	mov	r3, r5
   1acc0:	f000 fc74 	bl	1b5ac <__aeabi_dsub>
   1acc4:	4652      	mov	r2, sl
   1acc6:	465b      	mov	r3, fp
   1acc8:	f000 fe24 	bl	1b914 <__aeabi_dmul>
   1accc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1acd0:	4606      	mov	r6, r0
   1acd2:	460f      	mov	r7, r1
   1acd4:	4640      	mov	r0, r8
   1acd6:	4649      	mov	r1, r9
   1acd8:	f000 fe1c 	bl	1b914 <__aeabi_dmul>
   1acdc:	4602      	mov	r2, r0
   1acde:	460b      	mov	r3, r1
   1ace0:	4630      	mov	r0, r6
   1ace2:	4639      	mov	r1, r7
   1ace4:	f000 fc64 	bl	1b5b0 <__adddf3>
   1ace8:	4622      	mov	r2, r4
   1acea:	4680      	mov	r8, r0
   1acec:	4689      	mov	r9, r1
   1acee:	462b      	mov	r3, r5
   1acf0:	4650      	mov	r0, sl
   1acf2:	4659      	mov	r1, fp
   1acf4:	e9cd 8900 	strd	r8, r9, [sp]
   1acf8:	f000 fe0c 	bl	1b914 <__aeabi_dmul>
   1acfc:	460b      	mov	r3, r1
   1acfe:	4602      	mov	r2, r0
   1ad00:	4606      	mov	r6, r0
   1ad02:	460f      	mov	r7, r1
   1ad04:	4640      	mov	r0, r8
   1ad06:	4649      	mov	r1, r9
   1ad08:	f000 fc52 	bl	1b5b0 <__adddf3>
   1ad0c:	4bc0      	ldr	r3, [pc, #768]	; (1b010 <__ieee754_pow+0x8b8>)
   1ad0e:	4299      	cmp	r1, r3
   1ad10:	4604      	mov	r4, r0
   1ad12:	460d      	mov	r5, r1
   1ad14:	468a      	mov	sl, r1
   1ad16:	f340 8116 	ble.w	1af46 <__ieee754_pow+0x7ee>
   1ad1a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   1ad1e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1ad22:	4303      	orrs	r3, r0
   1ad24:	f040 81ea 	bne.w	1b0fc <__ieee754_pow+0x9a4>
   1ad28:	a3a3      	add	r3, pc, #652	; (adr r3, 1afb8 <__ieee754_pow+0x860>)
   1ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad2e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ad32:	f000 fc3d 	bl	1b5b0 <__adddf3>
   1ad36:	4632      	mov	r2, r6
   1ad38:	4680      	mov	r8, r0
   1ad3a:	4689      	mov	r9, r1
   1ad3c:	463b      	mov	r3, r7
   1ad3e:	4620      	mov	r0, r4
   1ad40:	4629      	mov	r1, r5
   1ad42:	f000 fc33 	bl	1b5ac <__aeabi_dsub>
   1ad46:	4602      	mov	r2, r0
   1ad48:	460b      	mov	r3, r1
   1ad4a:	4640      	mov	r0, r8
   1ad4c:	4649      	mov	r1, r9
   1ad4e:	f001 f871 	bl	1be34 <__aeabi_dcmpgt>
   1ad52:	2800      	cmp	r0, #0
   1ad54:	f040 81d2 	bne.w	1b0fc <__ieee754_pow+0x9a4>
   1ad58:	46a8      	mov	r8, r5
   1ad5a:	ea4f 5328 	mov.w	r3, r8, asr #20
   1ad5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1ad62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1ad66:	fa42 f303 	asr.w	r3, r2, r3
   1ad6a:	4453      	add	r3, sl
   1ad6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   1ad70:	4da8      	ldr	r5, [pc, #672]	; (1b014 <__ieee754_pow+0x8bc>)
   1ad72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1ad76:	4115      	asrs	r5, r2
   1ad78:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1ad7c:	ea23 0105 	bic.w	r1, r3, r5
   1ad80:	2000      	movs	r0, #0
   1ad82:	f1c2 0b14 	rsb	fp, r2, #20
   1ad86:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1ad8a:	f1ba 0f00 	cmp.w	sl, #0
   1ad8e:	4602      	mov	r2, r0
   1ad90:	460b      	mov	r3, r1
   1ad92:	fa44 fb0b 	asr.w	fp, r4, fp
   1ad96:	4630      	mov	r0, r6
   1ad98:	4639      	mov	r1, r7
   1ad9a:	bfb8      	it	lt
   1ad9c:	f1cb 0b00 	rsblt	fp, fp, #0
   1ada0:	f000 fc04 	bl	1b5ac <__aeabi_dsub>
   1ada4:	4602      	mov	r2, r0
   1ada6:	460b      	mov	r3, r1
   1ada8:	4606      	mov	r6, r0
   1adaa:	460f      	mov	r7, r1
   1adac:	e9dd 0100 	ldrd	r0, r1, [sp]
   1adb0:	f000 fbfe 	bl	1b5b0 <__adddf3>
   1adb4:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   1adb8:	460d      	mov	r5, r1
   1adba:	2400      	movs	r4, #0
   1adbc:	a380      	add	r3, pc, #512	; (adr r3, 1afc0 <__ieee754_pow+0x868>)
   1adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adc2:	4620      	mov	r0, r4
   1adc4:	4629      	mov	r1, r5
   1adc6:	f000 fda5 	bl	1b914 <__aeabi_dmul>
   1adca:	4632      	mov	r2, r6
   1adcc:	4680      	mov	r8, r0
   1adce:	4689      	mov	r9, r1
   1add0:	463b      	mov	r3, r7
   1add2:	4620      	mov	r0, r4
   1add4:	4629      	mov	r1, r5
   1add6:	f000 fbe9 	bl	1b5ac <__aeabi_dsub>
   1adda:	4602      	mov	r2, r0
   1addc:	460b      	mov	r3, r1
   1adde:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ade2:	f000 fbe3 	bl	1b5ac <__aeabi_dsub>
   1ade6:	a378      	add	r3, pc, #480	; (adr r3, 1afc8 <__ieee754_pow+0x870>)
   1ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adec:	f000 fd92 	bl	1b914 <__aeabi_dmul>
   1adf0:	a377      	add	r3, pc, #476	; (adr r3, 1afd0 <__ieee754_pow+0x878>)
   1adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adf6:	4606      	mov	r6, r0
   1adf8:	460f      	mov	r7, r1
   1adfa:	4620      	mov	r0, r4
   1adfc:	4629      	mov	r1, r5
   1adfe:	f000 fd89 	bl	1b914 <__aeabi_dmul>
   1ae02:	4602      	mov	r2, r0
   1ae04:	460b      	mov	r3, r1
   1ae06:	4630      	mov	r0, r6
   1ae08:	4639      	mov	r1, r7
   1ae0a:	f000 fbd1 	bl	1b5b0 <__adddf3>
   1ae0e:	4606      	mov	r6, r0
   1ae10:	460f      	mov	r7, r1
   1ae12:	4602      	mov	r2, r0
   1ae14:	460b      	mov	r3, r1
   1ae16:	4640      	mov	r0, r8
   1ae18:	4649      	mov	r1, r9
   1ae1a:	f000 fbc9 	bl	1b5b0 <__adddf3>
   1ae1e:	4642      	mov	r2, r8
   1ae20:	464b      	mov	r3, r9
   1ae22:	4604      	mov	r4, r0
   1ae24:	460d      	mov	r5, r1
   1ae26:	f000 fbc1 	bl	1b5ac <__aeabi_dsub>
   1ae2a:	4602      	mov	r2, r0
   1ae2c:	460b      	mov	r3, r1
   1ae2e:	4630      	mov	r0, r6
   1ae30:	4639      	mov	r1, r7
   1ae32:	f000 fbbb 	bl	1b5ac <__aeabi_dsub>
   1ae36:	4622      	mov	r2, r4
   1ae38:	4680      	mov	r8, r0
   1ae3a:	4689      	mov	r9, r1
   1ae3c:	462b      	mov	r3, r5
   1ae3e:	4620      	mov	r0, r4
   1ae40:	4629      	mov	r1, r5
   1ae42:	f000 fd67 	bl	1b914 <__aeabi_dmul>
   1ae46:	a364      	add	r3, pc, #400	; (adr r3, 1afd8 <__ieee754_pow+0x880>)
   1ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae4c:	4606      	mov	r6, r0
   1ae4e:	460f      	mov	r7, r1
   1ae50:	f000 fd60 	bl	1b914 <__aeabi_dmul>
   1ae54:	a362      	add	r3, pc, #392	; (adr r3, 1afe0 <__ieee754_pow+0x888>)
   1ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae5a:	f000 fba7 	bl	1b5ac <__aeabi_dsub>
   1ae5e:	4632      	mov	r2, r6
   1ae60:	463b      	mov	r3, r7
   1ae62:	f000 fd57 	bl	1b914 <__aeabi_dmul>
   1ae66:	a360      	add	r3, pc, #384	; (adr r3, 1afe8 <__ieee754_pow+0x890>)
   1ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae6c:	f000 fba0 	bl	1b5b0 <__adddf3>
   1ae70:	4632      	mov	r2, r6
   1ae72:	463b      	mov	r3, r7
   1ae74:	f000 fd4e 	bl	1b914 <__aeabi_dmul>
   1ae78:	a35d      	add	r3, pc, #372	; (adr r3, 1aff0 <__ieee754_pow+0x898>)
   1ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae7e:	f000 fb95 	bl	1b5ac <__aeabi_dsub>
   1ae82:	4632      	mov	r2, r6
   1ae84:	463b      	mov	r3, r7
   1ae86:	f000 fd45 	bl	1b914 <__aeabi_dmul>
   1ae8a:	a35b      	add	r3, pc, #364	; (adr r3, 1aff8 <__ieee754_pow+0x8a0>)
   1ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae90:	f000 fb8e 	bl	1b5b0 <__adddf3>
   1ae94:	4632      	mov	r2, r6
   1ae96:	463b      	mov	r3, r7
   1ae98:	f000 fd3c 	bl	1b914 <__aeabi_dmul>
   1ae9c:	4602      	mov	r2, r0
   1ae9e:	460b      	mov	r3, r1
   1aea0:	4620      	mov	r0, r4
   1aea2:	4629      	mov	r1, r5
   1aea4:	f000 fb82 	bl	1b5ac <__aeabi_dsub>
   1aea8:	4606      	mov	r6, r0
   1aeaa:	460f      	mov	r7, r1
   1aeac:	4602      	mov	r2, r0
   1aeae:	460b      	mov	r3, r1
   1aeb0:	4620      	mov	r0, r4
   1aeb2:	4629      	mov	r1, r5
   1aeb4:	f000 fd2e 	bl	1b914 <__aeabi_dmul>
   1aeb8:	2200      	movs	r2, #0
   1aeba:	e9cd 0100 	strd	r0, r1, [sp]
   1aebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1aec2:	4630      	mov	r0, r6
   1aec4:	4639      	mov	r1, r7
   1aec6:	f000 fb71 	bl	1b5ac <__aeabi_dsub>
   1aeca:	4602      	mov	r2, r0
   1aecc:	460b      	mov	r3, r1
   1aece:	e9dd 0100 	ldrd	r0, r1, [sp]
   1aed2:	f000 fe49 	bl	1bb68 <__aeabi_ddiv>
   1aed6:	4642      	mov	r2, r8
   1aed8:	4606      	mov	r6, r0
   1aeda:	460f      	mov	r7, r1
   1aedc:	464b      	mov	r3, r9
   1aede:	4620      	mov	r0, r4
   1aee0:	4629      	mov	r1, r5
   1aee2:	f000 fd17 	bl	1b914 <__aeabi_dmul>
   1aee6:	4642      	mov	r2, r8
   1aee8:	464b      	mov	r3, r9
   1aeea:	f000 fb61 	bl	1b5b0 <__adddf3>
   1aeee:	4602      	mov	r2, r0
   1aef0:	460b      	mov	r3, r1
   1aef2:	4630      	mov	r0, r6
   1aef4:	4639      	mov	r1, r7
   1aef6:	f000 fb59 	bl	1b5ac <__aeabi_dsub>
   1aefa:	4622      	mov	r2, r4
   1aefc:	462b      	mov	r3, r5
   1aefe:	f000 fb55 	bl	1b5ac <__aeabi_dsub>
   1af02:	4602      	mov	r2, r0
   1af04:	460b      	mov	r3, r1
   1af06:	2000      	movs	r0, #0
   1af08:	493f      	ldr	r1, [pc, #252]	; (1b008 <__ieee754_pow+0x8b0>)
   1af0a:	f000 fb4f 	bl	1b5ac <__aeabi_dsub>
   1af0e:	448a      	add	sl, r1
   1af10:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1af14:	f2c0 8133 	blt.w	1b17e <__ieee754_pow+0xa26>
   1af18:	4651      	mov	r1, sl
   1af1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1af1e:	f000 fcf9 	bl	1b914 <__aeabi_dmul>
   1af22:	e45b      	b.n	1a7dc <__ieee754_pow+0x84>
   1af24:	4642      	mov	r2, r8
   1af26:	4640      	mov	r0, r8
   1af28:	464b      	mov	r3, r9
   1af2a:	4649      	mov	r1, r9
   1af2c:	f000 fcf2 	bl	1b914 <__aeabi_dmul>
   1af30:	e454      	b.n	1a7dc <__ieee754_pow+0x84>
   1af32:	f1ba 0f00 	cmp.w	sl, #0
   1af36:	f6bf ace0 	bge.w	1a8fa <__ieee754_pow+0x1a2>
   1af3a:	e9dd 3400 	ldrd	r3, r4, [sp]
   1af3e:	4618      	mov	r0, r3
   1af40:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1af44:	e44a      	b.n	1a7dc <__ieee754_pow+0x84>
   1af46:	4b34      	ldr	r3, [pc, #208]	; (1b018 <__ieee754_pow+0x8c0>)
   1af48:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1af4c:	4598      	cmp	r8, r3
   1af4e:	f340 80f2 	ble.w	1b136 <__ieee754_pow+0x9de>
   1af52:	4b32      	ldr	r3, [pc, #200]	; (1b01c <__ieee754_pow+0x8c4>)
   1af54:	440b      	add	r3, r1
   1af56:	4303      	orrs	r3, r0
   1af58:	d10c      	bne.n	1af74 <__ieee754_pow+0x81c>
   1af5a:	4632      	mov	r2, r6
   1af5c:	463b      	mov	r3, r7
   1af5e:	f000 fb25 	bl	1b5ac <__aeabi_dsub>
   1af62:	4602      	mov	r2, r0
   1af64:	460b      	mov	r3, r1
   1af66:	e9dd 0100 	ldrd	r0, r1, [sp]
   1af6a:	f000 ff4f 	bl	1be0c <__aeabi_dcmple>
   1af6e:	2800      	cmp	r0, #0
   1af70:	f43f aef3 	beq.w	1ad5a <__ieee754_pow+0x602>
   1af74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1af78:	a321      	add	r3, pc, #132	; (adr r3, 1b000 <__ieee754_pow+0x8a8>)
   1af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af7e:	f000 fcc9 	bl	1b914 <__aeabi_dmul>
   1af82:	a31f      	add	r3, pc, #124	; (adr r3, 1b000 <__ieee754_pow+0x8a8>)
   1af84:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af88:	f000 fcc4 	bl	1b914 <__aeabi_dmul>
   1af8c:	e426      	b.n	1a7dc <__ieee754_pow+0x84>
   1af8e:	4602      	mov	r2, r0
   1af90:	460b      	mov	r3, r1
   1af92:	2000      	movs	r0, #0
   1af94:	491c      	ldr	r1, [pc, #112]	; (1b008 <__ieee754_pow+0x8b0>)
   1af96:	f000 fde7 	bl	1bb68 <__aeabi_ddiv>
   1af9a:	e43c      	b.n	1a816 <__ieee754_pow+0xbe>
   1af9c:	2200      	movs	r2, #0
   1af9e:	2300      	movs	r3, #0
   1afa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1afa4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1afa8:	4b17      	ldr	r3, [pc, #92]	; (1b008 <__ieee754_pow+0x8b0>)
   1afaa:	2200      	movs	r2, #0
   1afac:	2700      	movs	r7, #0
   1afae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1afb2:	e4e6      	b.n	1a982 <__ieee754_pow+0x22a>
   1afb4:	f3af 8000 	nop.w
   1afb8:	652b82fe 	.word	0x652b82fe
   1afbc:	3c971547 	.word	0x3c971547
   1afc0:	00000000 	.word	0x00000000
   1afc4:	3fe62e43 	.word	0x3fe62e43
   1afc8:	fefa39ef 	.word	0xfefa39ef
   1afcc:	3fe62e42 	.word	0x3fe62e42
   1afd0:	0ca86c39 	.word	0x0ca86c39
   1afd4:	be205c61 	.word	0xbe205c61
   1afd8:	72bea4d0 	.word	0x72bea4d0
   1afdc:	3e663769 	.word	0x3e663769
   1afe0:	c5d26bf1 	.word	0xc5d26bf1
   1afe4:	3ebbbd41 	.word	0x3ebbbd41
   1afe8:	af25de2c 	.word	0xaf25de2c
   1afec:	3f11566a 	.word	0x3f11566a
   1aff0:	16bebd93 	.word	0x16bebd93
   1aff4:	3f66c16c 	.word	0x3f66c16c
   1aff8:	5555553e 	.word	0x5555553e
   1affc:	3fc55555 	.word	0x3fc55555
   1b000:	c2f8f359 	.word	0xc2f8f359
   1b004:	01a56e1f 	.word	0x01a56e1f
   1b008:	3ff00000 	.word	0x3ff00000
   1b00c:	bff00000 	.word	0xbff00000
   1b010:	408fffff 	.word	0x408fffff
   1b014:	000fffff 	.word	0x000fffff
   1b018:	4090cbff 	.word	0x4090cbff
   1b01c:	3f6f3400 	.word	0x3f6f3400
   1b020:	4b6b      	ldr	r3, [pc, #428]	; (1b1d0 <__ieee754_pow+0xa78>)
   1b022:	429e      	cmp	r6, r3
   1b024:	f77f ac66 	ble.w	1a8f4 <__ieee754_pow+0x19c>
   1b028:	4b6a      	ldr	r3, [pc, #424]	; (1b1d4 <__ieee754_pow+0xa7c>)
   1b02a:	429e      	cmp	r6, r3
   1b02c:	f73f ac13 	bgt.w	1a856 <__ieee754_pow+0xfe>
   1b030:	2200      	movs	r2, #0
   1b032:	4b68      	ldr	r3, [pc, #416]	; (1b1d4 <__ieee754_pow+0xa7c>)
   1b034:	f000 faba 	bl	1b5ac <__aeabi_dsub>
   1b038:	a357      	add	r3, pc, #348	; (adr r3, 1b198 <__ieee754_pow+0xa40>)
   1b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b03e:	4606      	mov	r6, r0
   1b040:	460f      	mov	r7, r1
   1b042:	f000 fc67 	bl	1b914 <__aeabi_dmul>
   1b046:	a356      	add	r3, pc, #344	; (adr r3, 1b1a0 <__ieee754_pow+0xa48>)
   1b048:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b04c:	4680      	mov	r8, r0
   1b04e:	4689      	mov	r9, r1
   1b050:	4630      	mov	r0, r6
   1b052:	4639      	mov	r1, r7
   1b054:	f000 fc5e 	bl	1b914 <__aeabi_dmul>
   1b058:	2200      	movs	r2, #0
   1b05a:	4682      	mov	sl, r0
   1b05c:	468b      	mov	fp, r1
   1b05e:	4b5e      	ldr	r3, [pc, #376]	; (1b1d8 <__ieee754_pow+0xa80>)
   1b060:	4630      	mov	r0, r6
   1b062:	4639      	mov	r1, r7
   1b064:	f000 fc56 	bl	1b914 <__aeabi_dmul>
   1b068:	4602      	mov	r2, r0
   1b06a:	460b      	mov	r3, r1
   1b06c:	a14e      	add	r1, pc, #312	; (adr r1, 1b1a8 <__ieee754_pow+0xa50>)
   1b06e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b072:	f000 fa9b 	bl	1b5ac <__aeabi_dsub>
   1b076:	4632      	mov	r2, r6
   1b078:	463b      	mov	r3, r7
   1b07a:	f000 fc4b 	bl	1b914 <__aeabi_dmul>
   1b07e:	4602      	mov	r2, r0
   1b080:	460b      	mov	r3, r1
   1b082:	2000      	movs	r0, #0
   1b084:	4955      	ldr	r1, [pc, #340]	; (1b1dc <__ieee754_pow+0xa84>)
   1b086:	f000 fa91 	bl	1b5ac <__aeabi_dsub>
   1b08a:	4632      	mov	r2, r6
   1b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b090:	463b      	mov	r3, r7
   1b092:	4630      	mov	r0, r6
   1b094:	4639      	mov	r1, r7
   1b096:	f000 fc3d 	bl	1b914 <__aeabi_dmul>
   1b09a:	4602      	mov	r2, r0
   1b09c:	460b      	mov	r3, r1
   1b09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1b0a2:	f000 fc37 	bl	1b914 <__aeabi_dmul>
   1b0a6:	a342      	add	r3, pc, #264	; (adr r3, 1b1b0 <__ieee754_pow+0xa58>)
   1b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0ac:	f000 fc32 	bl	1b914 <__aeabi_dmul>
   1b0b0:	4602      	mov	r2, r0
   1b0b2:	460b      	mov	r3, r1
   1b0b4:	4650      	mov	r0, sl
   1b0b6:	4659      	mov	r1, fp
   1b0b8:	f000 fa78 	bl	1b5ac <__aeabi_dsub>
   1b0bc:	4602      	mov	r2, r0
   1b0be:	460b      	mov	r3, r1
   1b0c0:	4606      	mov	r6, r0
   1b0c2:	460f      	mov	r7, r1
   1b0c4:	4640      	mov	r0, r8
   1b0c6:	4649      	mov	r1, r9
   1b0c8:	f000 fa72 	bl	1b5b0 <__adddf3>
   1b0cc:	4642      	mov	r2, r8
   1b0ce:	464b      	mov	r3, r9
   1b0d0:	2000      	movs	r0, #0
   1b0d2:	4682      	mov	sl, r0
   1b0d4:	468b      	mov	fp, r1
   1b0d6:	f000 fa69 	bl	1b5ac <__aeabi_dsub>
   1b0da:	4602      	mov	r2, r0
   1b0dc:	460b      	mov	r3, r1
   1b0de:	4630      	mov	r0, r6
   1b0e0:	4639      	mov	r1, r7
   1b0e2:	f000 fa63 	bl	1b5ac <__aeabi_dsub>
   1b0e6:	4680      	mov	r8, r0
   1b0e8:	4689      	mov	r9, r1
   1b0ea:	e5d4      	b.n	1ac96 <__ieee754_pow+0x53e>
   1b0ec:	4642      	mov	r2, r8
   1b0ee:	464b      	mov	r3, r9
   1b0f0:	2000      	movs	r0, #0
   1b0f2:	4938      	ldr	r1, [pc, #224]	; (1b1d4 <__ieee754_pow+0xa7c>)
   1b0f4:	f000 fd38 	bl	1bb68 <__aeabi_ddiv>
   1b0f8:	f7ff bb70 	b.w	1a7dc <__ieee754_pow+0x84>
   1b0fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b100:	a32d      	add	r3, pc, #180	; (adr r3, 1b1b8 <__ieee754_pow+0xa60>)
   1b102:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b106:	f000 fc05 	bl	1b914 <__aeabi_dmul>
   1b10a:	a32b      	add	r3, pc, #172	; (adr r3, 1b1b8 <__ieee754_pow+0xa60>)
   1b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b110:	f000 fc00 	bl	1b914 <__aeabi_dmul>
   1b114:	f7ff bb62 	b.w	1a7dc <__ieee754_pow+0x84>
   1b118:	f1be 0f00 	cmp.w	lr, #0
   1b11c:	f47f ab69 	bne.w	1a7f2 <__ieee754_pow+0x9a>
   1b120:	f1c3 0314 	rsb	r3, r3, #20
   1b124:	fa47 f203 	asr.w	r2, r7, r3
   1b128:	fa02 f303 	lsl.w	r3, r2, r3
   1b12c:	429f      	cmp	r7, r3
   1b12e:	d02a      	beq.n	1b186 <__ieee754_pow+0xa2e>
   1b130:	4674      	mov	r4, lr
   1b132:	f7ff bb36 	b.w	1a7a2 <__ieee754_pow+0x4a>
   1b136:	4b29      	ldr	r3, [pc, #164]	; (1b1dc <__ieee754_pow+0xa84>)
   1b138:	4598      	cmp	r8, r3
   1b13a:	f73f ae0e 	bgt.w	1ad5a <__ieee754_pow+0x602>
   1b13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b142:	4692      	mov	sl, r2
   1b144:	4693      	mov	fp, r2
   1b146:	e638      	b.n	1adba <__ieee754_pow+0x662>
   1b148:	4602      	mov	r2, r0
   1b14a:	460b      	mov	r3, r1
   1b14c:	f000 fa2e 	bl	1b5ac <__aeabi_dsub>
   1b150:	4602      	mov	r2, r0
   1b152:	460b      	mov	r3, r1
   1b154:	f000 fd08 	bl	1bb68 <__aeabi_ddiv>
   1b158:	f7ff bb40 	b.w	1a7dc <__ieee754_pow+0x84>
   1b15c:	a318      	add	r3, pc, #96	; (adr r3, 1b1c0 <__ieee754_pow+0xa68>)
   1b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b162:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1b166:	a318      	add	r3, pc, #96	; (adr r3, 1b1c8 <__ieee754_pow+0xa70>)
   1b168:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b16c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1b170:	4b1b      	ldr	r3, [pc, #108]	; (1b1e0 <__ieee754_pow+0xa88>)
   1b172:	2200      	movs	r2, #0
   1b174:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   1b178:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b17c:	e401      	b.n	1a982 <__ieee754_pow+0x22a>
   1b17e:	465a      	mov	r2, fp
   1b180:	f000 f98a 	bl	1b498 <scalbn>
   1b184:	e6c9      	b.n	1af1a <__ieee754_pow+0x7c2>
   1b186:	f002 0201 	and.w	r2, r2, #1
   1b18a:	f1c2 0402 	rsb	r4, r2, #2
   1b18e:	f7ff bb08 	b.w	1a7a2 <__ieee754_pow+0x4a>
   1b192:	bf00      	nop
   1b194:	f3af 8000 	nop.w
   1b198:	60000000 	.word	0x60000000
   1b19c:	3ff71547 	.word	0x3ff71547
   1b1a0:	f85ddf44 	.word	0xf85ddf44
   1b1a4:	3e54ae0b 	.word	0x3e54ae0b
   1b1a8:	55555555 	.word	0x55555555
   1b1ac:	3fd55555 	.word	0x3fd55555
   1b1b0:	652b82fe 	.word	0x652b82fe
   1b1b4:	3ff71547 	.word	0x3ff71547
   1b1b8:	8800759c 	.word	0x8800759c
   1b1bc:	7e37e43c 	.word	0x7e37e43c
   1b1c0:	40000000 	.word	0x40000000
   1b1c4:	3fe2b803 	.word	0x3fe2b803
   1b1c8:	43cfd006 	.word	0x43cfd006
   1b1cc:	3e4cfdeb 	.word	0x3e4cfdeb
   1b1d0:	3feffffe 	.word	0x3feffffe
   1b1d4:	3ff00000 	.word	0x3ff00000
   1b1d8:	3fd00000 	.word	0x3fd00000
   1b1dc:	3fe00000 	.word	0x3fe00000
   1b1e0:	3ff80000 	.word	0x3ff80000

0001b1e4 <__ieee754_sqrt>:
   1b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1e8:	4f5b      	ldr	r7, [pc, #364]	; (1b358 <__ieee754_sqrt+0x174>)
   1b1ea:	438f      	bics	r7, r1
   1b1ec:	4605      	mov	r5, r0
   1b1ee:	460c      	mov	r4, r1
   1b1f0:	f000 8092 	beq.w	1b318 <__ieee754_sqrt+0x134>
   1b1f4:	2900      	cmp	r1, #0
   1b1f6:	460b      	mov	r3, r1
   1b1f8:	4602      	mov	r2, r0
   1b1fa:	dd6f      	ble.n	1b2dc <__ieee754_sqrt+0xf8>
   1b1fc:	150f      	asrs	r7, r1, #20
   1b1fe:	d07b      	beq.n	1b2f8 <__ieee754_sqrt+0x114>
   1b200:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1b204:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1b208:	07f8      	lsls	r0, r7, #31
   1b20a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b20e:	d45c      	bmi.n	1b2ca <__ieee754_sqrt+0xe6>
   1b210:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1b214:	2600      	movs	r6, #0
   1b216:	440b      	add	r3, r1
   1b218:	107f      	asrs	r7, r7, #1
   1b21a:	0052      	lsls	r2, r2, #1
   1b21c:	46b6      	mov	lr, r6
   1b21e:	2016      	movs	r0, #22
   1b220:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1b224:	eb0e 0401 	add.w	r4, lr, r1
   1b228:	429c      	cmp	r4, r3
   1b22a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1b22e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1b232:	dc03      	bgt.n	1b23c <__ieee754_sqrt+0x58>
   1b234:	1b1b      	subs	r3, r3, r4
   1b236:	eb04 0e01 	add.w	lr, r4, r1
   1b23a:	440e      	add	r6, r1
   1b23c:	3801      	subs	r0, #1
   1b23e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1b242:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1b246:	d1ed      	bne.n	1b224 <__ieee754_sqrt+0x40>
   1b248:	4684      	mov	ip, r0
   1b24a:	2420      	movs	r4, #32
   1b24c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1b250:	e009      	b.n	1b266 <__ieee754_sqrt+0x82>
   1b252:	d020      	beq.n	1b296 <__ieee754_sqrt+0xb2>
   1b254:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   1b258:	3c01      	subs	r4, #1
   1b25a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1b25e:	442b      	add	r3, r5
   1b260:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1b264:	d020      	beq.n	1b2a8 <__ieee754_sqrt+0xc4>
   1b266:	4573      	cmp	r3, lr
   1b268:	eb01 050c 	add.w	r5, r1, ip
   1b26c:	ddf1      	ble.n	1b252 <__ieee754_sqrt+0x6e>
   1b26e:	2d00      	cmp	r5, #0
   1b270:	eb05 0c01 	add.w	ip, r5, r1
   1b274:	db09      	blt.n	1b28a <__ieee754_sqrt+0xa6>
   1b276:	46f0      	mov	r8, lr
   1b278:	4295      	cmp	r5, r2
   1b27a:	eba3 030e 	sub.w	r3, r3, lr
   1b27e:	d900      	bls.n	1b282 <__ieee754_sqrt+0x9e>
   1b280:	3b01      	subs	r3, #1
   1b282:	1b52      	subs	r2, r2, r5
   1b284:	4408      	add	r0, r1
   1b286:	46c6      	mov	lr, r8
   1b288:	e7e4      	b.n	1b254 <__ieee754_sqrt+0x70>
   1b28a:	f1bc 0f00 	cmp.w	ip, #0
   1b28e:	dbf2      	blt.n	1b276 <__ieee754_sqrt+0x92>
   1b290:	f10e 0801 	add.w	r8, lr, #1
   1b294:	e7f0      	b.n	1b278 <__ieee754_sqrt+0x94>
   1b296:	4295      	cmp	r5, r2
   1b298:	d8dc      	bhi.n	1b254 <__ieee754_sqrt+0x70>
   1b29a:	2d00      	cmp	r5, #0
   1b29c:	eb05 0c01 	add.w	ip, r5, r1
   1b2a0:	db44      	blt.n	1b32c <__ieee754_sqrt+0x148>
   1b2a2:	4698      	mov	r8, r3
   1b2a4:	2300      	movs	r3, #0
   1b2a6:	e7ec      	b.n	1b282 <__ieee754_sqrt+0x9e>
   1b2a8:	4313      	orrs	r3, r2
   1b2aa:	d113      	bne.n	1b2d4 <__ieee754_sqrt+0xf0>
   1b2ac:	0840      	lsrs	r0, r0, #1
   1b2ae:	1073      	asrs	r3, r6, #1
   1b2b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1b2b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   1b2b8:	07f2      	lsls	r2, r6, #31
   1b2ba:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1b2be:	bf48      	it	mi
   1b2c0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1b2c4:	4649      	mov	r1, r9
   1b2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2ca:	005b      	lsls	r3, r3, #1
   1b2cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   1b2d0:	0052      	lsls	r2, r2, #1
   1b2d2:	e79d      	b.n	1b210 <__ieee754_sqrt+0x2c>
   1b2d4:	1c41      	adds	r1, r0, #1
   1b2d6:	d02d      	beq.n	1b334 <__ieee754_sqrt+0x150>
   1b2d8:	3001      	adds	r0, #1
   1b2da:	e7e7      	b.n	1b2ac <__ieee754_sqrt+0xc8>
   1b2dc:	4606      	mov	r6, r0
   1b2de:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1b2e2:	433e      	orrs	r6, r7
   1b2e4:	d0ef      	beq.n	1b2c6 <__ieee754_sqrt+0xe2>
   1b2e6:	bb69      	cbnz	r1, 1b344 <__ieee754_sqrt+0x160>
   1b2e8:	460f      	mov	r7, r1
   1b2ea:	0ad3      	lsrs	r3, r2, #11
   1b2ec:	3f15      	subs	r7, #21
   1b2ee:	0552      	lsls	r2, r2, #21
   1b2f0:	2b00      	cmp	r3, #0
   1b2f2:	d0fa      	beq.n	1b2ea <__ieee754_sqrt+0x106>
   1b2f4:	02de      	lsls	r6, r3, #11
   1b2f6:	d420      	bmi.n	1b33a <__ieee754_sqrt+0x156>
   1b2f8:	2400      	movs	r4, #0
   1b2fa:	e000      	b.n	1b2fe <__ieee754_sqrt+0x11a>
   1b2fc:	4604      	mov	r4, r0
   1b2fe:	005b      	lsls	r3, r3, #1
   1b300:	02dd      	lsls	r5, r3, #11
   1b302:	f104 0001 	add.w	r0, r4, #1
   1b306:	d5f9      	bpl.n	1b2fc <__ieee754_sqrt+0x118>
   1b308:	f1c0 0120 	rsb	r1, r0, #32
   1b30c:	fa22 f101 	lsr.w	r1, r2, r1
   1b310:	430b      	orrs	r3, r1
   1b312:	1b3f      	subs	r7, r7, r4
   1b314:	4082      	lsls	r2, r0
   1b316:	e773      	b.n	1b200 <__ieee754_sqrt+0x1c>
   1b318:	4602      	mov	r2, r0
   1b31a:	460b      	mov	r3, r1
   1b31c:	f000 fafa 	bl	1b914 <__aeabi_dmul>
   1b320:	462a      	mov	r2, r5
   1b322:	4623      	mov	r3, r4
   1b324:	f000 f944 	bl	1b5b0 <__adddf3>
   1b328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b32c:	f1bc 0f00 	cmp.w	ip, #0
   1b330:	daae      	bge.n	1b290 <__ieee754_sqrt+0xac>
   1b332:	e7b6      	b.n	1b2a2 <__ieee754_sqrt+0xbe>
   1b334:	3601      	adds	r6, #1
   1b336:	4620      	mov	r0, r4
   1b338:	e7b9      	b.n	1b2ae <__ieee754_sqrt+0xca>
   1b33a:	2000      	movs	r0, #0
   1b33c:	2120      	movs	r1, #32
   1b33e:	f04f 34ff 	mov.w	r4, #4294967295
   1b342:	e7e3      	b.n	1b30c <__ieee754_sqrt+0x128>
   1b344:	4602      	mov	r2, r0
   1b346:	460b      	mov	r3, r1
   1b348:	f000 f930 	bl	1b5ac <__aeabi_dsub>
   1b34c:	4602      	mov	r2, r0
   1b34e:	460b      	mov	r3, r1
   1b350:	f000 fc0a 	bl	1bb68 <__aeabi_ddiv>
   1b354:	e7b7      	b.n	1b2c6 <__ieee754_sqrt+0xe2>
   1b356:	bf00      	nop
   1b358:	7ff00000 	.word	0x7ff00000

0001b35c <fabs>:
   1b35c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b360:	4770      	bx	lr
   1b362:	bf00      	nop

0001b364 <finite>:
   1b364:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1b368:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1b36c:	0fc0      	lsrs	r0, r0, #31
   1b36e:	4770      	bx	lr

0001b370 <matherr>:
   1b370:	2000      	movs	r0, #0
   1b372:	4770      	bx	lr

0001b374 <nan>:
   1b374:	2000      	movs	r0, #0
   1b376:	4901      	ldr	r1, [pc, #4]	; (1b37c <nan+0x8>)
   1b378:	4770      	bx	lr
   1b37a:	bf00      	nop
   1b37c:	7ff80000 	.word	0x7ff80000

0001b380 <rint>:
   1b380:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b382:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1b386:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1b38a:	2e13      	cmp	r6, #19
   1b38c:	b083      	sub	sp, #12
   1b38e:	4602      	mov	r2, r0
   1b390:	460b      	mov	r3, r1
   1b392:	460c      	mov	r4, r1
   1b394:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   1b398:	4607      	mov	r7, r0
   1b39a:	dc2e      	bgt.n	1b3fa <rint+0x7a>
   1b39c:	2e00      	cmp	r6, #0
   1b39e:	db49      	blt.n	1b434 <rint+0xb4>
   1b3a0:	493a      	ldr	r1, [pc, #232]	; (1b48c <rint+0x10c>)
   1b3a2:	4131      	asrs	r1, r6
   1b3a4:	ea03 0001 	and.w	r0, r3, r1
   1b3a8:	4310      	orrs	r0, r2
   1b3aa:	d02b      	beq.n	1b404 <rint+0x84>
   1b3ac:	0849      	lsrs	r1, r1, #1
   1b3ae:	400b      	ands	r3, r1
   1b3b0:	ea53 0702 	orrs.w	r7, r3, r2
   1b3b4:	d00c      	beq.n	1b3d0 <rint+0x50>
   1b3b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b3ba:	2e13      	cmp	r6, #19
   1b3bc:	ea24 0101 	bic.w	r1, r4, r1
   1b3c0:	fa43 f406 	asr.w	r4, r3, r6
   1b3c4:	ea44 0401 	orr.w	r4, r4, r1
   1b3c8:	bf0c      	ite	eq
   1b3ca:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1b3ce:	2700      	movne	r7, #0
   1b3d0:	4b2f      	ldr	r3, [pc, #188]	; (1b490 <rint+0x110>)
   1b3d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1b3d6:	4621      	mov	r1, r4
   1b3d8:	e9d5 4500 	ldrd	r4, r5, [r5]
   1b3dc:	4638      	mov	r0, r7
   1b3de:	4622      	mov	r2, r4
   1b3e0:	462b      	mov	r3, r5
   1b3e2:	f000 f8e5 	bl	1b5b0 <__adddf3>
   1b3e6:	e9cd 0100 	strd	r0, r1, [sp]
   1b3ea:	4622      	mov	r2, r4
   1b3ec:	462b      	mov	r3, r5
   1b3ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b3f2:	f000 f8db 	bl	1b5ac <__aeabi_dsub>
   1b3f6:	b003      	add	sp, #12
   1b3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b3fa:	2e33      	cmp	r6, #51	; 0x33
   1b3fc:	dd06      	ble.n	1b40c <rint+0x8c>
   1b3fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1b402:	d040      	beq.n	1b486 <rint+0x106>
   1b404:	4610      	mov	r0, r2
   1b406:	4619      	mov	r1, r3
   1b408:	b003      	add	sp, #12
   1b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b40c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   1b410:	f04f 31ff 	mov.w	r1, #4294967295
   1b414:	fa21 f10e 	lsr.w	r1, r1, lr
   1b418:	4208      	tst	r0, r1
   1b41a:	d0f3      	beq.n	1b404 <rint+0x84>
   1b41c:	0849      	lsrs	r1, r1, #1
   1b41e:	4208      	tst	r0, r1
   1b420:	d0d6      	beq.n	1b3d0 <rint+0x50>
   1b422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b426:	ea20 0101 	bic.w	r1, r0, r1
   1b42a:	fa43 fe0e 	asr.w	lr, r3, lr
   1b42e:	ea4e 0701 	orr.w	r7, lr, r1
   1b432:	e7cd      	b.n	1b3d0 <rint+0x50>
   1b434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b438:	4301      	orrs	r1, r0
   1b43a:	d0e3      	beq.n	1b404 <rint+0x84>
   1b43c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1b440:	4e13      	ldr	r6, [pc, #76]	; (1b490 <rint+0x110>)
   1b442:	4301      	orrs	r1, r0
   1b444:	f1c1 0c00 	rsb	ip, r1, #0
   1b448:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1b44c:	e9d6 6700 	ldrd	r6, r7, [r6]
   1b450:	ea4c 0c01 	orr.w	ip, ip, r1
   1b454:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   1b458:	0c5c      	lsrs	r4, r3, #17
   1b45a:	0464      	lsls	r4, r4, #17
   1b45c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   1b460:	ea43 0104 	orr.w	r1, r3, r4
   1b464:	4632      	mov	r2, r6
   1b466:	463b      	mov	r3, r7
   1b468:	f000 f8a2 	bl	1b5b0 <__adddf3>
   1b46c:	e9cd 0100 	strd	r0, r1, [sp]
   1b470:	4632      	mov	r2, r6
   1b472:	463b      	mov	r3, r7
   1b474:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b478:	f000 f898 	bl	1b5ac <__aeabi_dsub>
   1b47c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1b480:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1b484:	e7c0      	b.n	1b408 <rint+0x88>
   1b486:	f000 f893 	bl	1b5b0 <__adddf3>
   1b48a:	e7bd      	b.n	1b408 <rint+0x88>
   1b48c:	000fffff 	.word	0x000fffff
   1b490:	0001dd08 	.word	0x0001dd08
   1b494:	00000000 	.word	0x00000000

0001b498 <scalbn>:
   1b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b49a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1b49e:	4604      	mov	r4, r0
   1b4a0:	460d      	mov	r5, r1
   1b4a2:	460b      	mov	r3, r1
   1b4a4:	4617      	mov	r7, r2
   1b4a6:	bb0e      	cbnz	r6, 1b4ec <scalbn+0x54>
   1b4a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b4ac:	4303      	orrs	r3, r0
   1b4ae:	4686      	mov	lr, r0
   1b4b0:	d025      	beq.n	1b4fe <scalbn+0x66>
   1b4b2:	2200      	movs	r2, #0
   1b4b4:	4b34      	ldr	r3, [pc, #208]	; (1b588 <scalbn+0xf0>)
   1b4b6:	f000 fa2d 	bl	1b914 <__aeabi_dmul>
   1b4ba:	4a34      	ldr	r2, [pc, #208]	; (1b58c <scalbn+0xf4>)
   1b4bc:	4297      	cmp	r7, r2
   1b4be:	4604      	mov	r4, r0
   1b4c0:	460d      	mov	r5, r1
   1b4c2:	460b      	mov	r3, r1
   1b4c4:	db2a      	blt.n	1b51c <scalbn+0x84>
   1b4c6:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1b4ca:	3e36      	subs	r6, #54	; 0x36
   1b4cc:	443e      	add	r6, r7
   1b4ce:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1b4d2:	4296      	cmp	r6, r2
   1b4d4:	dc28      	bgt.n	1b528 <scalbn+0x90>
   1b4d6:	2e00      	cmp	r6, #0
   1b4d8:	dd12      	ble.n	1b500 <scalbn+0x68>
   1b4da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b4de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1b4e2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1b4e6:	4620      	mov	r0, r4
   1b4e8:	4629      	mov	r1, r5
   1b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1b4f0:	4296      	cmp	r6, r2
   1b4f2:	d1eb      	bne.n	1b4cc <scalbn+0x34>
   1b4f4:	4602      	mov	r2, r0
   1b4f6:	460b      	mov	r3, r1
   1b4f8:	f000 f85a 	bl	1b5b0 <__adddf3>
   1b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b500:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1b504:	da1d      	bge.n	1b542 <scalbn+0xaa>
   1b506:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b50a:	429f      	cmp	r7, r3
   1b50c:	4622      	mov	r2, r4
   1b50e:	462b      	mov	r3, r5
   1b510:	dc25      	bgt.n	1b55e <scalbn+0xc6>
   1b512:	a119      	add	r1, pc, #100	; (adr r1, 1b578 <scalbn+0xe0>)
   1b514:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b518:	f000 f83c 	bl	1b594 <copysign>
   1b51c:	a316      	add	r3, pc, #88	; (adr r3, 1b578 <scalbn+0xe0>)
   1b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b522:	f000 f9f7 	bl	1b914 <__aeabi_dmul>
   1b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b528:	4622      	mov	r2, r4
   1b52a:	462b      	mov	r3, r5
   1b52c:	a114      	add	r1, pc, #80	; (adr r1, 1b580 <scalbn+0xe8>)
   1b52e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b532:	f000 f82f 	bl	1b594 <copysign>
   1b536:	a312      	add	r3, pc, #72	; (adr r3, 1b580 <scalbn+0xe8>)
   1b538:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b53c:	f000 f9ea 	bl	1b914 <__aeabi_dmul>
   1b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b542:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b546:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1b54a:	3636      	adds	r6, #54	; 0x36
   1b54c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1b550:	4620      	mov	r0, r4
   1b552:	4629      	mov	r1, r5
   1b554:	2200      	movs	r2, #0
   1b556:	4b0e      	ldr	r3, [pc, #56]	; (1b590 <scalbn+0xf8>)
   1b558:	f000 f9dc 	bl	1b914 <__aeabi_dmul>
   1b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b55e:	a108      	add	r1, pc, #32	; (adr r1, 1b580 <scalbn+0xe8>)
   1b560:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b564:	f000 f816 	bl	1b594 <copysign>
   1b568:	a305      	add	r3, pc, #20	; (adr r3, 1b580 <scalbn+0xe8>)
   1b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b56e:	f000 f9d1 	bl	1b914 <__aeabi_dmul>
   1b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b574:	f3af 8000 	nop.w
   1b578:	c2f8f359 	.word	0xc2f8f359
   1b57c:	01a56e1f 	.word	0x01a56e1f
   1b580:	8800759c 	.word	0x8800759c
   1b584:	7e37e43c 	.word	0x7e37e43c
   1b588:	43500000 	.word	0x43500000
   1b58c:	ffff3cb0 	.word	0xffff3cb0
   1b590:	3c900000 	.word	0x3c900000

0001b594 <copysign>:
   1b594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1b598:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1b59c:	ea42 0103 	orr.w	r1, r2, r3
   1b5a0:	4770      	bx	lr
   1b5a2:	bf00      	nop

0001b5a4 <__aeabi_drsub>:
   1b5a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b5a8:	e002      	b.n	1b5b0 <__adddf3>
   1b5aa:	bf00      	nop

0001b5ac <__aeabi_dsub>:
   1b5ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b5b0 <__adddf3>:
   1b5b0:	b530      	push	{r4, r5, lr}
   1b5b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b5b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b5ba:	ea94 0f05 	teq	r4, r5
   1b5be:	bf08      	it	eq
   1b5c0:	ea90 0f02 	teqeq	r0, r2
   1b5c4:	bf1f      	itttt	ne
   1b5c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b5ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b5ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b5d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b5d6:	f000 80e2 	beq.w	1b79e <__adddf3+0x1ee>
   1b5da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b5de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b5e2:	bfb8      	it	lt
   1b5e4:	426d      	neglt	r5, r5
   1b5e6:	dd0c      	ble.n	1b602 <__adddf3+0x52>
   1b5e8:	442c      	add	r4, r5
   1b5ea:	ea80 0202 	eor.w	r2, r0, r2
   1b5ee:	ea81 0303 	eor.w	r3, r1, r3
   1b5f2:	ea82 0000 	eor.w	r0, r2, r0
   1b5f6:	ea83 0101 	eor.w	r1, r3, r1
   1b5fa:	ea80 0202 	eor.w	r2, r0, r2
   1b5fe:	ea81 0303 	eor.w	r3, r1, r3
   1b602:	2d36      	cmp	r5, #54	; 0x36
   1b604:	bf88      	it	hi
   1b606:	bd30      	pophi	{r4, r5, pc}
   1b608:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b60c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b610:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b614:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b618:	d002      	beq.n	1b620 <__adddf3+0x70>
   1b61a:	4240      	negs	r0, r0
   1b61c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b620:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b624:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b628:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b62c:	d002      	beq.n	1b634 <__adddf3+0x84>
   1b62e:	4252      	negs	r2, r2
   1b630:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b634:	ea94 0f05 	teq	r4, r5
   1b638:	f000 80a7 	beq.w	1b78a <__adddf3+0x1da>
   1b63c:	f1a4 0401 	sub.w	r4, r4, #1
   1b640:	f1d5 0e20 	rsbs	lr, r5, #32
   1b644:	db0d      	blt.n	1b662 <__adddf3+0xb2>
   1b646:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b64a:	fa22 f205 	lsr.w	r2, r2, r5
   1b64e:	1880      	adds	r0, r0, r2
   1b650:	f141 0100 	adc.w	r1, r1, #0
   1b654:	fa03 f20e 	lsl.w	r2, r3, lr
   1b658:	1880      	adds	r0, r0, r2
   1b65a:	fa43 f305 	asr.w	r3, r3, r5
   1b65e:	4159      	adcs	r1, r3
   1b660:	e00e      	b.n	1b680 <__adddf3+0xd0>
   1b662:	f1a5 0520 	sub.w	r5, r5, #32
   1b666:	f10e 0e20 	add.w	lr, lr, #32
   1b66a:	2a01      	cmp	r2, #1
   1b66c:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b670:	bf28      	it	cs
   1b672:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b676:	fa43 f305 	asr.w	r3, r3, r5
   1b67a:	18c0      	adds	r0, r0, r3
   1b67c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b684:	d507      	bpl.n	1b696 <__adddf3+0xe6>
   1b686:	f04f 0e00 	mov.w	lr, #0
   1b68a:	f1dc 0c00 	rsbs	ip, ip, #0
   1b68e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b692:	eb6e 0101 	sbc.w	r1, lr, r1
   1b696:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b69a:	d31b      	bcc.n	1b6d4 <__adddf3+0x124>
   1b69c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b6a0:	d30c      	bcc.n	1b6bc <__adddf3+0x10c>
   1b6a2:	0849      	lsrs	r1, r1, #1
   1b6a4:	ea5f 0030 	movs.w	r0, r0, rrx
   1b6a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b6ac:	f104 0401 	add.w	r4, r4, #1
   1b6b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b6b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b6b8:	f080 809a 	bcs.w	1b7f0 <__adddf3+0x240>
   1b6bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b6c0:	bf08      	it	eq
   1b6c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b6c6:	f150 0000 	adcs.w	r0, r0, #0
   1b6ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b6ce:	ea41 0105 	orr.w	r1, r1, r5
   1b6d2:	bd30      	pop	{r4, r5, pc}
   1b6d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b6d8:	4140      	adcs	r0, r0
   1b6da:	eb41 0101 	adc.w	r1, r1, r1
   1b6de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b6e2:	f1a4 0401 	sub.w	r4, r4, #1
   1b6e6:	d1e9      	bne.n	1b6bc <__adddf3+0x10c>
   1b6e8:	f091 0f00 	teq	r1, #0
   1b6ec:	bf04      	itt	eq
   1b6ee:	4601      	moveq	r1, r0
   1b6f0:	2000      	moveq	r0, #0
   1b6f2:	fab1 f381 	clz	r3, r1
   1b6f6:	bf08      	it	eq
   1b6f8:	3320      	addeq	r3, #32
   1b6fa:	f1a3 030b 	sub.w	r3, r3, #11
   1b6fe:	f1b3 0220 	subs.w	r2, r3, #32
   1b702:	da0c      	bge.n	1b71e <__adddf3+0x16e>
   1b704:	320c      	adds	r2, #12
   1b706:	dd08      	ble.n	1b71a <__adddf3+0x16a>
   1b708:	f102 0c14 	add.w	ip, r2, #20
   1b70c:	f1c2 020c 	rsb	r2, r2, #12
   1b710:	fa01 f00c 	lsl.w	r0, r1, ip
   1b714:	fa21 f102 	lsr.w	r1, r1, r2
   1b718:	e00c      	b.n	1b734 <__adddf3+0x184>
   1b71a:	f102 0214 	add.w	r2, r2, #20
   1b71e:	bfd8      	it	le
   1b720:	f1c2 0c20 	rsble	ip, r2, #32
   1b724:	fa01 f102 	lsl.w	r1, r1, r2
   1b728:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b72c:	bfdc      	itt	le
   1b72e:	ea41 010c 	orrle.w	r1, r1, ip
   1b732:	4090      	lslle	r0, r2
   1b734:	1ae4      	subs	r4, r4, r3
   1b736:	bfa2      	ittt	ge
   1b738:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b73c:	4329      	orrge	r1, r5
   1b73e:	bd30      	popge	{r4, r5, pc}
   1b740:	ea6f 0404 	mvn.w	r4, r4
   1b744:	3c1f      	subs	r4, #31
   1b746:	da1c      	bge.n	1b782 <__adddf3+0x1d2>
   1b748:	340c      	adds	r4, #12
   1b74a:	dc0e      	bgt.n	1b76a <__adddf3+0x1ba>
   1b74c:	f104 0414 	add.w	r4, r4, #20
   1b750:	f1c4 0220 	rsb	r2, r4, #32
   1b754:	fa20 f004 	lsr.w	r0, r0, r4
   1b758:	fa01 f302 	lsl.w	r3, r1, r2
   1b75c:	ea40 0003 	orr.w	r0, r0, r3
   1b760:	fa21 f304 	lsr.w	r3, r1, r4
   1b764:	ea45 0103 	orr.w	r1, r5, r3
   1b768:	bd30      	pop	{r4, r5, pc}
   1b76a:	f1c4 040c 	rsb	r4, r4, #12
   1b76e:	f1c4 0220 	rsb	r2, r4, #32
   1b772:	fa20 f002 	lsr.w	r0, r0, r2
   1b776:	fa01 f304 	lsl.w	r3, r1, r4
   1b77a:	ea40 0003 	orr.w	r0, r0, r3
   1b77e:	4629      	mov	r1, r5
   1b780:	bd30      	pop	{r4, r5, pc}
   1b782:	fa21 f004 	lsr.w	r0, r1, r4
   1b786:	4629      	mov	r1, r5
   1b788:	bd30      	pop	{r4, r5, pc}
   1b78a:	f094 0f00 	teq	r4, #0
   1b78e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b792:	bf06      	itte	eq
   1b794:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b798:	3401      	addeq	r4, #1
   1b79a:	3d01      	subne	r5, #1
   1b79c:	e74e      	b.n	1b63c <__adddf3+0x8c>
   1b79e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b7a2:	bf18      	it	ne
   1b7a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b7a8:	d029      	beq.n	1b7fe <__adddf3+0x24e>
   1b7aa:	ea94 0f05 	teq	r4, r5
   1b7ae:	bf08      	it	eq
   1b7b0:	ea90 0f02 	teqeq	r0, r2
   1b7b4:	d005      	beq.n	1b7c2 <__adddf3+0x212>
   1b7b6:	ea54 0c00 	orrs.w	ip, r4, r0
   1b7ba:	bf04      	itt	eq
   1b7bc:	4619      	moveq	r1, r3
   1b7be:	4610      	moveq	r0, r2
   1b7c0:	bd30      	pop	{r4, r5, pc}
   1b7c2:	ea91 0f03 	teq	r1, r3
   1b7c6:	bf1e      	ittt	ne
   1b7c8:	2100      	movne	r1, #0
   1b7ca:	2000      	movne	r0, #0
   1b7cc:	bd30      	popne	{r4, r5, pc}
   1b7ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b7d2:	d105      	bne.n	1b7e0 <__adddf3+0x230>
   1b7d4:	0040      	lsls	r0, r0, #1
   1b7d6:	4149      	adcs	r1, r1
   1b7d8:	bf28      	it	cs
   1b7da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b7de:	bd30      	pop	{r4, r5, pc}
   1b7e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b7e4:	bf3c      	itt	cc
   1b7e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b7ea:	bd30      	popcc	{r4, r5, pc}
   1b7ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b7f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b7f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b7f8:	f04f 0000 	mov.w	r0, #0
   1b7fc:	bd30      	pop	{r4, r5, pc}
   1b7fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b802:	bf1a      	itte	ne
   1b804:	4619      	movne	r1, r3
   1b806:	4610      	movne	r0, r2
   1b808:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b80c:	bf1c      	itt	ne
   1b80e:	460b      	movne	r3, r1
   1b810:	4602      	movne	r2, r0
   1b812:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b816:	bf06      	itte	eq
   1b818:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b81c:	ea91 0f03 	teqeq	r1, r3
   1b820:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b824:	bd30      	pop	{r4, r5, pc}
   1b826:	bf00      	nop

0001b828 <__aeabi_ui2d>:
   1b828:	f090 0f00 	teq	r0, #0
   1b82c:	bf04      	itt	eq
   1b82e:	2100      	moveq	r1, #0
   1b830:	4770      	bxeq	lr
   1b832:	b530      	push	{r4, r5, lr}
   1b834:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b838:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b83c:	f04f 0500 	mov.w	r5, #0
   1b840:	f04f 0100 	mov.w	r1, #0
   1b844:	e750      	b.n	1b6e8 <__adddf3+0x138>
   1b846:	bf00      	nop

0001b848 <__aeabi_i2d>:
   1b848:	f090 0f00 	teq	r0, #0
   1b84c:	bf04      	itt	eq
   1b84e:	2100      	moveq	r1, #0
   1b850:	4770      	bxeq	lr
   1b852:	b530      	push	{r4, r5, lr}
   1b854:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b858:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b85c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b860:	bf48      	it	mi
   1b862:	4240      	negmi	r0, r0
   1b864:	f04f 0100 	mov.w	r1, #0
   1b868:	e73e      	b.n	1b6e8 <__adddf3+0x138>
   1b86a:	bf00      	nop

0001b86c <__aeabi_f2d>:
   1b86c:	0042      	lsls	r2, r0, #1
   1b86e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b872:	ea4f 0131 	mov.w	r1, r1, rrx
   1b876:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b87a:	bf1f      	itttt	ne
   1b87c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b880:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b884:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b888:	4770      	bxne	lr
   1b88a:	f092 0f00 	teq	r2, #0
   1b88e:	bf14      	ite	ne
   1b890:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b894:	4770      	bxeq	lr
   1b896:	b530      	push	{r4, r5, lr}
   1b898:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b89c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b8a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b8a4:	e720      	b.n	1b6e8 <__adddf3+0x138>
   1b8a6:	bf00      	nop

0001b8a8 <__aeabi_ul2d>:
   1b8a8:	ea50 0201 	orrs.w	r2, r0, r1
   1b8ac:	bf08      	it	eq
   1b8ae:	4770      	bxeq	lr
   1b8b0:	b530      	push	{r4, r5, lr}
   1b8b2:	f04f 0500 	mov.w	r5, #0
   1b8b6:	e00a      	b.n	1b8ce <__aeabi_l2d+0x16>

0001b8b8 <__aeabi_l2d>:
   1b8b8:	ea50 0201 	orrs.w	r2, r0, r1
   1b8bc:	bf08      	it	eq
   1b8be:	4770      	bxeq	lr
   1b8c0:	b530      	push	{r4, r5, lr}
   1b8c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b8c6:	d502      	bpl.n	1b8ce <__aeabi_l2d+0x16>
   1b8c8:	4240      	negs	r0, r0
   1b8ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b8ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b8d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b8d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b8da:	f43f aedc 	beq.w	1b696 <__adddf3+0xe6>
   1b8de:	f04f 0203 	mov.w	r2, #3
   1b8e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b8e6:	bf18      	it	ne
   1b8e8:	3203      	addne	r2, #3
   1b8ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b8ee:	bf18      	it	ne
   1b8f0:	3203      	addne	r2, #3
   1b8f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b8f6:	f1c2 0320 	rsb	r3, r2, #32
   1b8fa:	fa00 fc03 	lsl.w	ip, r0, r3
   1b8fe:	fa20 f002 	lsr.w	r0, r0, r2
   1b902:	fa01 fe03 	lsl.w	lr, r1, r3
   1b906:	ea40 000e 	orr.w	r0, r0, lr
   1b90a:	fa21 f102 	lsr.w	r1, r1, r2
   1b90e:	4414      	add	r4, r2
   1b910:	e6c1      	b.n	1b696 <__adddf3+0xe6>
   1b912:	bf00      	nop

0001b914 <__aeabi_dmul>:
   1b914:	b570      	push	{r4, r5, r6, lr}
   1b916:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b91a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b91e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b922:	bf1d      	ittte	ne
   1b924:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b928:	ea94 0f0c 	teqne	r4, ip
   1b92c:	ea95 0f0c 	teqne	r5, ip
   1b930:	f000 f8de 	bleq	1baf0 <__aeabi_dmul+0x1dc>
   1b934:	442c      	add	r4, r5
   1b936:	ea81 0603 	eor.w	r6, r1, r3
   1b93a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1b93e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1b942:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1b946:	bf18      	it	ne
   1b948:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1b94c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b954:	d038      	beq.n	1b9c8 <__aeabi_dmul+0xb4>
   1b956:	fba0 ce02 	umull	ip, lr, r0, r2
   1b95a:	f04f 0500 	mov.w	r5, #0
   1b95e:	fbe1 e502 	umlal	lr, r5, r1, r2
   1b962:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1b966:	fbe0 e503 	umlal	lr, r5, r0, r3
   1b96a:	f04f 0600 	mov.w	r6, #0
   1b96e:	fbe1 5603 	umlal	r5, r6, r1, r3
   1b972:	f09c 0f00 	teq	ip, #0
   1b976:	bf18      	it	ne
   1b978:	f04e 0e01 	orrne.w	lr, lr, #1
   1b97c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1b980:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1b984:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1b988:	d204      	bcs.n	1b994 <__aeabi_dmul+0x80>
   1b98a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1b98e:	416d      	adcs	r5, r5
   1b990:	eb46 0606 	adc.w	r6, r6, r6
   1b994:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1b998:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1b99c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1b9a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1b9a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1b9a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b9ac:	bf88      	it	hi
   1b9ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b9b2:	d81e      	bhi.n	1b9f2 <__aeabi_dmul+0xde>
   1b9b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1b9b8:	bf08      	it	eq
   1b9ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1b9be:	f150 0000 	adcs.w	r0, r0, #0
   1b9c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b9c6:	bd70      	pop	{r4, r5, r6, pc}
   1b9c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1b9cc:	ea46 0101 	orr.w	r1, r6, r1
   1b9d0:	ea40 0002 	orr.w	r0, r0, r2
   1b9d4:	ea81 0103 	eor.w	r1, r1, r3
   1b9d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1b9dc:	bfc2      	ittt	gt
   1b9de:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b9e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b9e6:	bd70      	popgt	{r4, r5, r6, pc}
   1b9e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b9ec:	f04f 0e00 	mov.w	lr, #0
   1b9f0:	3c01      	subs	r4, #1
   1b9f2:	f300 80ab 	bgt.w	1bb4c <__aeabi_dmul+0x238>
   1b9f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1b9fa:	bfde      	ittt	le
   1b9fc:	2000      	movle	r0, #0
   1b9fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ba02:	bd70      	pople	{r4, r5, r6, pc}
   1ba04:	f1c4 0400 	rsb	r4, r4, #0
   1ba08:	3c20      	subs	r4, #32
   1ba0a:	da35      	bge.n	1ba78 <__aeabi_dmul+0x164>
   1ba0c:	340c      	adds	r4, #12
   1ba0e:	dc1b      	bgt.n	1ba48 <__aeabi_dmul+0x134>
   1ba10:	f104 0414 	add.w	r4, r4, #20
   1ba14:	f1c4 0520 	rsb	r5, r4, #32
   1ba18:	fa00 f305 	lsl.w	r3, r0, r5
   1ba1c:	fa20 f004 	lsr.w	r0, r0, r4
   1ba20:	fa01 f205 	lsl.w	r2, r1, r5
   1ba24:	ea40 0002 	orr.w	r0, r0, r2
   1ba28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ba2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ba30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ba34:	fa21 f604 	lsr.w	r6, r1, r4
   1ba38:	eb42 0106 	adc.w	r1, r2, r6
   1ba3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ba40:	bf08      	it	eq
   1ba42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ba46:	bd70      	pop	{r4, r5, r6, pc}
   1ba48:	f1c4 040c 	rsb	r4, r4, #12
   1ba4c:	f1c4 0520 	rsb	r5, r4, #32
   1ba50:	fa00 f304 	lsl.w	r3, r0, r4
   1ba54:	fa20 f005 	lsr.w	r0, r0, r5
   1ba58:	fa01 f204 	lsl.w	r2, r1, r4
   1ba5c:	ea40 0002 	orr.w	r0, r0, r2
   1ba60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ba64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ba68:	f141 0100 	adc.w	r1, r1, #0
   1ba6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ba70:	bf08      	it	eq
   1ba72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ba76:	bd70      	pop	{r4, r5, r6, pc}
   1ba78:	f1c4 0520 	rsb	r5, r4, #32
   1ba7c:	fa00 f205 	lsl.w	r2, r0, r5
   1ba80:	ea4e 0e02 	orr.w	lr, lr, r2
   1ba84:	fa20 f304 	lsr.w	r3, r0, r4
   1ba88:	fa01 f205 	lsl.w	r2, r1, r5
   1ba8c:	ea43 0302 	orr.w	r3, r3, r2
   1ba90:	fa21 f004 	lsr.w	r0, r1, r4
   1ba94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ba98:	fa21 f204 	lsr.w	r2, r1, r4
   1ba9c:	ea20 0002 	bic.w	r0, r0, r2
   1baa0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1baa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1baa8:	bf08      	it	eq
   1baaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1baae:	bd70      	pop	{r4, r5, r6, pc}
   1bab0:	f094 0f00 	teq	r4, #0
   1bab4:	d10f      	bne.n	1bad6 <__aeabi_dmul+0x1c2>
   1bab6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1baba:	0040      	lsls	r0, r0, #1
   1babc:	eb41 0101 	adc.w	r1, r1, r1
   1bac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bac4:	bf08      	it	eq
   1bac6:	3c01      	subeq	r4, #1
   1bac8:	d0f7      	beq.n	1baba <__aeabi_dmul+0x1a6>
   1baca:	ea41 0106 	orr.w	r1, r1, r6
   1bace:	f095 0f00 	teq	r5, #0
   1bad2:	bf18      	it	ne
   1bad4:	4770      	bxne	lr
   1bad6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bada:	0052      	lsls	r2, r2, #1
   1badc:	eb43 0303 	adc.w	r3, r3, r3
   1bae0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bae4:	bf08      	it	eq
   1bae6:	3d01      	subeq	r5, #1
   1bae8:	d0f7      	beq.n	1bada <__aeabi_dmul+0x1c6>
   1baea:	ea43 0306 	orr.w	r3, r3, r6
   1baee:	4770      	bx	lr
   1baf0:	ea94 0f0c 	teq	r4, ip
   1baf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1baf8:	bf18      	it	ne
   1bafa:	ea95 0f0c 	teqne	r5, ip
   1bafe:	d00c      	beq.n	1bb1a <__aeabi_dmul+0x206>
   1bb00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bb04:	bf18      	it	ne
   1bb06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bb0a:	d1d1      	bne.n	1bab0 <__aeabi_dmul+0x19c>
   1bb0c:	ea81 0103 	eor.w	r1, r1, r3
   1bb10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bb14:	f04f 0000 	mov.w	r0, #0
   1bb18:	bd70      	pop	{r4, r5, r6, pc}
   1bb1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bb1e:	bf06      	itte	eq
   1bb20:	4610      	moveq	r0, r2
   1bb22:	4619      	moveq	r1, r3
   1bb24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bb28:	d019      	beq.n	1bb5e <__aeabi_dmul+0x24a>
   1bb2a:	ea94 0f0c 	teq	r4, ip
   1bb2e:	d102      	bne.n	1bb36 <__aeabi_dmul+0x222>
   1bb30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bb34:	d113      	bne.n	1bb5e <__aeabi_dmul+0x24a>
   1bb36:	ea95 0f0c 	teq	r5, ip
   1bb3a:	d105      	bne.n	1bb48 <__aeabi_dmul+0x234>
   1bb3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bb40:	bf1c      	itt	ne
   1bb42:	4610      	movne	r0, r2
   1bb44:	4619      	movne	r1, r3
   1bb46:	d10a      	bne.n	1bb5e <__aeabi_dmul+0x24a>
   1bb48:	ea81 0103 	eor.w	r1, r1, r3
   1bb4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bb50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bb54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bb58:	f04f 0000 	mov.w	r0, #0
   1bb5c:	bd70      	pop	{r4, r5, r6, pc}
   1bb5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bb62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bb66:	bd70      	pop	{r4, r5, r6, pc}

0001bb68 <__aeabi_ddiv>:
   1bb68:	b570      	push	{r4, r5, r6, lr}
   1bb6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bb6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bb72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bb76:	bf1d      	ittte	ne
   1bb78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bb7c:	ea94 0f0c 	teqne	r4, ip
   1bb80:	ea95 0f0c 	teqne	r5, ip
   1bb84:	f000 f8a7 	bleq	1bcd6 <__aeabi_ddiv+0x16e>
   1bb88:	eba4 0405 	sub.w	r4, r4, r5
   1bb8c:	ea81 0e03 	eor.w	lr, r1, r3
   1bb90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bb94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bb98:	f000 8088 	beq.w	1bcac <__aeabi_ddiv+0x144>
   1bb9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bba0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bba4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bba8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bbac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bbb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bbb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bbb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bbbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bbc0:	429d      	cmp	r5, r3
   1bbc2:	bf08      	it	eq
   1bbc4:	4296      	cmpeq	r6, r2
   1bbc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bbca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bbce:	d202      	bcs.n	1bbd6 <__aeabi_ddiv+0x6e>
   1bbd0:	085b      	lsrs	r3, r3, #1
   1bbd2:	ea4f 0232 	mov.w	r2, r2, rrx
   1bbd6:	1ab6      	subs	r6, r6, r2
   1bbd8:	eb65 0503 	sbc.w	r5, r5, r3
   1bbdc:	085b      	lsrs	r3, r3, #1
   1bbde:	ea4f 0232 	mov.w	r2, r2, rrx
   1bbe2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bbe6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bbea:	ebb6 0e02 	subs.w	lr, r6, r2
   1bbee:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bbf2:	bf22      	ittt	cs
   1bbf4:	1ab6      	subcs	r6, r6, r2
   1bbf6:	4675      	movcs	r5, lr
   1bbf8:	ea40 000c 	orrcs.w	r0, r0, ip
   1bbfc:	085b      	lsrs	r3, r3, #1
   1bbfe:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc02:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc06:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc0a:	bf22      	ittt	cs
   1bc0c:	1ab6      	subcs	r6, r6, r2
   1bc0e:	4675      	movcs	r5, lr
   1bc10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bc14:	085b      	lsrs	r3, r3, #1
   1bc16:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc1a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc22:	bf22      	ittt	cs
   1bc24:	1ab6      	subcs	r6, r6, r2
   1bc26:	4675      	movcs	r5, lr
   1bc28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bc2c:	085b      	lsrs	r3, r3, #1
   1bc2e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc32:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc36:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc3a:	bf22      	ittt	cs
   1bc3c:	1ab6      	subcs	r6, r6, r2
   1bc3e:	4675      	movcs	r5, lr
   1bc40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bc44:	ea55 0e06 	orrs.w	lr, r5, r6
   1bc48:	d018      	beq.n	1bc7c <__aeabi_ddiv+0x114>
   1bc4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bc4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bc52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bc56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bc5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bc5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bc62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bc66:	d1c0      	bne.n	1bbea <__aeabi_ddiv+0x82>
   1bc68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc6c:	d10b      	bne.n	1bc86 <__aeabi_ddiv+0x11e>
   1bc6e:	ea41 0100 	orr.w	r1, r1, r0
   1bc72:	f04f 0000 	mov.w	r0, #0
   1bc76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bc7a:	e7b6      	b.n	1bbea <__aeabi_ddiv+0x82>
   1bc7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc80:	bf04      	itt	eq
   1bc82:	4301      	orreq	r1, r0
   1bc84:	2000      	moveq	r0, #0
   1bc86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bc8a:	bf88      	it	hi
   1bc8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bc90:	f63f aeaf 	bhi.w	1b9f2 <__aeabi_dmul+0xde>
   1bc94:	ebb5 0c03 	subs.w	ip, r5, r3
   1bc98:	bf04      	itt	eq
   1bc9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bc9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bca2:	f150 0000 	adcs.w	r0, r0, #0
   1bca6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bcaa:	bd70      	pop	{r4, r5, r6, pc}
   1bcac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1bcb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1bcb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1bcb8:	bfc2      	ittt	gt
   1bcba:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bcbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bcc2:	bd70      	popgt	{r4, r5, r6, pc}
   1bcc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bcc8:	f04f 0e00 	mov.w	lr, #0
   1bccc:	3c01      	subs	r4, #1
   1bcce:	e690      	b.n	1b9f2 <__aeabi_dmul+0xde>
   1bcd0:	ea45 0e06 	orr.w	lr, r5, r6
   1bcd4:	e68d      	b.n	1b9f2 <__aeabi_dmul+0xde>
   1bcd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bcda:	ea94 0f0c 	teq	r4, ip
   1bcde:	bf08      	it	eq
   1bce0:	ea95 0f0c 	teqeq	r5, ip
   1bce4:	f43f af3b 	beq.w	1bb5e <__aeabi_dmul+0x24a>
   1bce8:	ea94 0f0c 	teq	r4, ip
   1bcec:	d10a      	bne.n	1bd04 <__aeabi_ddiv+0x19c>
   1bcee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bcf2:	f47f af34 	bne.w	1bb5e <__aeabi_dmul+0x24a>
   1bcf6:	ea95 0f0c 	teq	r5, ip
   1bcfa:	f47f af25 	bne.w	1bb48 <__aeabi_dmul+0x234>
   1bcfe:	4610      	mov	r0, r2
   1bd00:	4619      	mov	r1, r3
   1bd02:	e72c      	b.n	1bb5e <__aeabi_dmul+0x24a>
   1bd04:	ea95 0f0c 	teq	r5, ip
   1bd08:	d106      	bne.n	1bd18 <__aeabi_ddiv+0x1b0>
   1bd0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bd0e:	f43f aefd 	beq.w	1bb0c <__aeabi_dmul+0x1f8>
   1bd12:	4610      	mov	r0, r2
   1bd14:	4619      	mov	r1, r3
   1bd16:	e722      	b.n	1bb5e <__aeabi_dmul+0x24a>
   1bd18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bd1c:	bf18      	it	ne
   1bd1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bd22:	f47f aec5 	bne.w	1bab0 <__aeabi_dmul+0x19c>
   1bd26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bd2a:	f47f af0d 	bne.w	1bb48 <__aeabi_dmul+0x234>
   1bd2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bd32:	f47f aeeb 	bne.w	1bb0c <__aeabi_dmul+0x1f8>
   1bd36:	e712      	b.n	1bb5e <__aeabi_dmul+0x24a>

0001bd38 <__gedf2>:
   1bd38:	f04f 3cff 	mov.w	ip, #4294967295
   1bd3c:	e006      	b.n	1bd4c <__cmpdf2+0x4>
   1bd3e:	bf00      	nop

0001bd40 <__ledf2>:
   1bd40:	f04f 0c01 	mov.w	ip, #1
   1bd44:	e002      	b.n	1bd4c <__cmpdf2+0x4>
   1bd46:	bf00      	nop

0001bd48 <__cmpdf2>:
   1bd48:	f04f 0c01 	mov.w	ip, #1
   1bd4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bd50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bd54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bd58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bd5c:	bf18      	it	ne
   1bd5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bd62:	d01b      	beq.n	1bd9c <__cmpdf2+0x54>
   1bd64:	b001      	add	sp, #4
   1bd66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bd6a:	bf0c      	ite	eq
   1bd6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bd70:	ea91 0f03 	teqne	r1, r3
   1bd74:	bf02      	ittt	eq
   1bd76:	ea90 0f02 	teqeq	r0, r2
   1bd7a:	2000      	moveq	r0, #0
   1bd7c:	4770      	bxeq	lr
   1bd7e:	f110 0f00 	cmn.w	r0, #0
   1bd82:	ea91 0f03 	teq	r1, r3
   1bd86:	bf58      	it	pl
   1bd88:	4299      	cmppl	r1, r3
   1bd8a:	bf08      	it	eq
   1bd8c:	4290      	cmpeq	r0, r2
   1bd8e:	bf2c      	ite	cs
   1bd90:	17d8      	asrcs	r0, r3, #31
   1bd92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bd96:	f040 0001 	orr.w	r0, r0, #1
   1bd9a:	4770      	bx	lr
   1bd9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bda0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bda4:	d102      	bne.n	1bdac <__cmpdf2+0x64>
   1bda6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bdaa:	d107      	bne.n	1bdbc <__cmpdf2+0x74>
   1bdac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bdb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bdb4:	d1d6      	bne.n	1bd64 <__cmpdf2+0x1c>
   1bdb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bdba:	d0d3      	beq.n	1bd64 <__cmpdf2+0x1c>
   1bdbc:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bdc0:	4770      	bx	lr
   1bdc2:	bf00      	nop

0001bdc4 <__aeabi_cdrcmple>:
   1bdc4:	4684      	mov	ip, r0
   1bdc6:	4610      	mov	r0, r2
   1bdc8:	4662      	mov	r2, ip
   1bdca:	468c      	mov	ip, r1
   1bdcc:	4619      	mov	r1, r3
   1bdce:	4663      	mov	r3, ip
   1bdd0:	e000      	b.n	1bdd4 <__aeabi_cdcmpeq>
   1bdd2:	bf00      	nop

0001bdd4 <__aeabi_cdcmpeq>:
   1bdd4:	b501      	push	{r0, lr}
   1bdd6:	f7ff ffb7 	bl	1bd48 <__cmpdf2>
   1bdda:	2800      	cmp	r0, #0
   1bddc:	bf48      	it	mi
   1bdde:	f110 0f00 	cmnmi.w	r0, #0
   1bde2:	bd01      	pop	{r0, pc}

0001bde4 <__aeabi_dcmpeq>:
   1bde4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bde8:	f7ff fff4 	bl	1bdd4 <__aeabi_cdcmpeq>
   1bdec:	bf0c      	ite	eq
   1bdee:	2001      	moveq	r0, #1
   1bdf0:	2000      	movne	r0, #0
   1bdf2:	f85d fb08 	ldr.w	pc, [sp], #8
   1bdf6:	bf00      	nop

0001bdf8 <__aeabi_dcmplt>:
   1bdf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bdfc:	f7ff ffea 	bl	1bdd4 <__aeabi_cdcmpeq>
   1be00:	bf34      	ite	cc
   1be02:	2001      	movcc	r0, #1
   1be04:	2000      	movcs	r0, #0
   1be06:	f85d fb08 	ldr.w	pc, [sp], #8
   1be0a:	bf00      	nop

0001be0c <__aeabi_dcmple>:
   1be0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be10:	f7ff ffe0 	bl	1bdd4 <__aeabi_cdcmpeq>
   1be14:	bf94      	ite	ls
   1be16:	2001      	movls	r0, #1
   1be18:	2000      	movhi	r0, #0
   1be1a:	f85d fb08 	ldr.w	pc, [sp], #8
   1be1e:	bf00      	nop

0001be20 <__aeabi_dcmpge>:
   1be20:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be24:	f7ff ffce 	bl	1bdc4 <__aeabi_cdrcmple>
   1be28:	bf94      	ite	ls
   1be2a:	2001      	movls	r0, #1
   1be2c:	2000      	movhi	r0, #0
   1be2e:	f85d fb08 	ldr.w	pc, [sp], #8
   1be32:	bf00      	nop

0001be34 <__aeabi_dcmpgt>:
   1be34:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be38:	f7ff ffc4 	bl	1bdc4 <__aeabi_cdrcmple>
   1be3c:	bf34      	ite	cc
   1be3e:	2001      	movcc	r0, #1
   1be40:	2000      	movcs	r0, #0
   1be42:	f85d fb08 	ldr.w	pc, [sp], #8
   1be46:	bf00      	nop

0001be48 <__aeabi_dcmpun>:
   1be48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1be4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1be50:	d102      	bne.n	1be58 <__aeabi_dcmpun+0x10>
   1be52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1be56:	d10a      	bne.n	1be6e <__aeabi_dcmpun+0x26>
   1be58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1be5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1be60:	d102      	bne.n	1be68 <__aeabi_dcmpun+0x20>
   1be62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1be66:	d102      	bne.n	1be6e <__aeabi_dcmpun+0x26>
   1be68:	f04f 0000 	mov.w	r0, #0
   1be6c:	4770      	bx	lr
   1be6e:	f04f 0001 	mov.w	r0, #1
   1be72:	4770      	bx	lr

0001be74 <__aeabi_d2uiz>:
   1be74:	004a      	lsls	r2, r1, #1
   1be76:	d211      	bcs.n	1be9c <__aeabi_d2uiz+0x28>
   1be78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1be7c:	d211      	bcs.n	1bea2 <__aeabi_d2uiz+0x2e>
   1be7e:	d50d      	bpl.n	1be9c <__aeabi_d2uiz+0x28>
   1be80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1be84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1be88:	d40e      	bmi.n	1bea8 <__aeabi_d2uiz+0x34>
   1be8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1be8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1be92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1be96:	fa23 f002 	lsr.w	r0, r3, r2
   1be9a:	4770      	bx	lr
   1be9c:	f04f 0000 	mov.w	r0, #0
   1bea0:	4770      	bx	lr
   1bea2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bea6:	d102      	bne.n	1beae <__aeabi_d2uiz+0x3a>
   1bea8:	f04f 30ff 	mov.w	r0, #4294967295
   1beac:	4770      	bx	lr
   1beae:	f04f 0000 	mov.w	r0, #0
   1beb2:	4770      	bx	lr

0001beb4 <__aeabi_frsub>:
   1beb4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1beb8:	e002      	b.n	1bec0 <__addsf3>
   1beba:	bf00      	nop

0001bebc <__aeabi_fsub>:
   1bebc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001bec0 <__addsf3>:
   1bec0:	0042      	lsls	r2, r0, #1
   1bec2:	bf1f      	itttt	ne
   1bec4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1bec8:	ea92 0f03 	teqne	r2, r3
   1becc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1bed0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bed4:	d06a      	beq.n	1bfac <__addsf3+0xec>
   1bed6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1beda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1bede:	bfc1      	itttt	gt
   1bee0:	18d2      	addgt	r2, r2, r3
   1bee2:	4041      	eorgt	r1, r0
   1bee4:	4048      	eorgt	r0, r1
   1bee6:	4041      	eorgt	r1, r0
   1bee8:	bfb8      	it	lt
   1beea:	425b      	neglt	r3, r3
   1beec:	2b19      	cmp	r3, #25
   1beee:	bf88      	it	hi
   1bef0:	4770      	bxhi	lr
   1bef2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1bef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1befa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1befe:	bf18      	it	ne
   1bf00:	4240      	negne	r0, r0
   1bf02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bf06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1bf0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bf0e:	bf18      	it	ne
   1bf10:	4249      	negne	r1, r1
   1bf12:	ea92 0f03 	teq	r2, r3
   1bf16:	d03f      	beq.n	1bf98 <__addsf3+0xd8>
   1bf18:	f1a2 0201 	sub.w	r2, r2, #1
   1bf1c:	fa41 fc03 	asr.w	ip, r1, r3
   1bf20:	eb10 000c 	adds.w	r0, r0, ip
   1bf24:	f1c3 0320 	rsb	r3, r3, #32
   1bf28:	fa01 f103 	lsl.w	r1, r1, r3
   1bf2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1bf30:	d502      	bpl.n	1bf38 <__addsf3+0x78>
   1bf32:	4249      	negs	r1, r1
   1bf34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1bf38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bf3c:	d313      	bcc.n	1bf66 <__addsf3+0xa6>
   1bf3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1bf42:	d306      	bcc.n	1bf52 <__addsf3+0x92>
   1bf44:	0840      	lsrs	r0, r0, #1
   1bf46:	ea4f 0131 	mov.w	r1, r1, rrx
   1bf4a:	f102 0201 	add.w	r2, r2, #1
   1bf4e:	2afe      	cmp	r2, #254	; 0xfe
   1bf50:	d251      	bcs.n	1bff6 <__addsf3+0x136>
   1bf52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1bf56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bf5a:	bf08      	it	eq
   1bf5c:	f020 0001 	biceq.w	r0, r0, #1
   1bf60:	ea40 0003 	orr.w	r0, r0, r3
   1bf64:	4770      	bx	lr
   1bf66:	0049      	lsls	r1, r1, #1
   1bf68:	eb40 0000 	adc.w	r0, r0, r0
   1bf6c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1bf70:	f1a2 0201 	sub.w	r2, r2, #1
   1bf74:	d1ed      	bne.n	1bf52 <__addsf3+0x92>
   1bf76:	fab0 fc80 	clz	ip, r0
   1bf7a:	f1ac 0c08 	sub.w	ip, ip, #8
   1bf7e:	ebb2 020c 	subs.w	r2, r2, ip
   1bf82:	fa00 f00c 	lsl.w	r0, r0, ip
   1bf86:	bfaa      	itet	ge
   1bf88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1bf8c:	4252      	neglt	r2, r2
   1bf8e:	4318      	orrge	r0, r3
   1bf90:	bfbc      	itt	lt
   1bf92:	40d0      	lsrlt	r0, r2
   1bf94:	4318      	orrlt	r0, r3
   1bf96:	4770      	bx	lr
   1bf98:	f092 0f00 	teq	r2, #0
   1bf9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1bfa0:	bf06      	itte	eq
   1bfa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1bfa6:	3201      	addeq	r2, #1
   1bfa8:	3b01      	subne	r3, #1
   1bfaa:	e7b5      	b.n	1bf18 <__addsf3+0x58>
   1bfac:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1bfb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bfb4:	bf18      	it	ne
   1bfb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bfba:	d021      	beq.n	1c000 <__addsf3+0x140>
   1bfbc:	ea92 0f03 	teq	r2, r3
   1bfc0:	d004      	beq.n	1bfcc <__addsf3+0x10c>
   1bfc2:	f092 0f00 	teq	r2, #0
   1bfc6:	bf08      	it	eq
   1bfc8:	4608      	moveq	r0, r1
   1bfca:	4770      	bx	lr
   1bfcc:	ea90 0f01 	teq	r0, r1
   1bfd0:	bf1c      	itt	ne
   1bfd2:	2000      	movne	r0, #0
   1bfd4:	4770      	bxne	lr
   1bfd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1bfda:	d104      	bne.n	1bfe6 <__addsf3+0x126>
   1bfdc:	0040      	lsls	r0, r0, #1
   1bfde:	bf28      	it	cs
   1bfe0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1bfe4:	4770      	bx	lr
   1bfe6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1bfea:	bf3c      	itt	cc
   1bfec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1bff0:	4770      	bxcc	lr
   1bff2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1bff6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1bffa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bffe:	4770      	bx	lr
   1c000:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c004:	bf16      	itet	ne
   1c006:	4608      	movne	r0, r1
   1c008:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c00c:	4601      	movne	r1, r0
   1c00e:	0242      	lsls	r2, r0, #9
   1c010:	bf06      	itte	eq
   1c012:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c016:	ea90 0f01 	teqeq	r0, r1
   1c01a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c01e:	4770      	bx	lr

0001c020 <__aeabi_ui2f>:
   1c020:	f04f 0300 	mov.w	r3, #0
   1c024:	e004      	b.n	1c030 <__aeabi_i2f+0x8>
   1c026:	bf00      	nop

0001c028 <__aeabi_i2f>:
   1c028:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c02c:	bf48      	it	mi
   1c02e:	4240      	negmi	r0, r0
   1c030:	ea5f 0c00 	movs.w	ip, r0
   1c034:	bf08      	it	eq
   1c036:	4770      	bxeq	lr
   1c038:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c03c:	4601      	mov	r1, r0
   1c03e:	f04f 0000 	mov.w	r0, #0
   1c042:	e01c      	b.n	1c07e <__aeabi_l2f+0x2a>

0001c044 <__aeabi_ul2f>:
   1c044:	ea50 0201 	orrs.w	r2, r0, r1
   1c048:	bf08      	it	eq
   1c04a:	4770      	bxeq	lr
   1c04c:	f04f 0300 	mov.w	r3, #0
   1c050:	e00a      	b.n	1c068 <__aeabi_l2f+0x14>
   1c052:	bf00      	nop

0001c054 <__aeabi_l2f>:
   1c054:	ea50 0201 	orrs.w	r2, r0, r1
   1c058:	bf08      	it	eq
   1c05a:	4770      	bxeq	lr
   1c05c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c060:	d502      	bpl.n	1c068 <__aeabi_l2f+0x14>
   1c062:	4240      	negs	r0, r0
   1c064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c068:	ea5f 0c01 	movs.w	ip, r1
   1c06c:	bf02      	ittt	eq
   1c06e:	4684      	moveq	ip, r0
   1c070:	4601      	moveq	r1, r0
   1c072:	2000      	moveq	r0, #0
   1c074:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c078:	bf08      	it	eq
   1c07a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c07e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c082:	fabc f28c 	clz	r2, ip
   1c086:	3a08      	subs	r2, #8
   1c088:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c08c:	db10      	blt.n	1c0b0 <__aeabi_l2f+0x5c>
   1c08e:	fa01 fc02 	lsl.w	ip, r1, r2
   1c092:	4463      	add	r3, ip
   1c094:	fa00 fc02 	lsl.w	ip, r0, r2
   1c098:	f1c2 0220 	rsb	r2, r2, #32
   1c09c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c0a0:	fa20 f202 	lsr.w	r2, r0, r2
   1c0a4:	eb43 0002 	adc.w	r0, r3, r2
   1c0a8:	bf08      	it	eq
   1c0aa:	f020 0001 	biceq.w	r0, r0, #1
   1c0ae:	4770      	bx	lr
   1c0b0:	f102 0220 	add.w	r2, r2, #32
   1c0b4:	fa01 fc02 	lsl.w	ip, r1, r2
   1c0b8:	f1c2 0220 	rsb	r2, r2, #32
   1c0bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c0c0:	fa21 f202 	lsr.w	r2, r1, r2
   1c0c4:	eb43 0002 	adc.w	r0, r3, r2
   1c0c8:	bf08      	it	eq
   1c0ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c0ce:	4770      	bx	lr

0001c0d0 <__aeabi_fmul>:
   1c0d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c0d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1c0d8:	bf1e      	ittt	ne
   1c0da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1c0de:	ea92 0f0c 	teqne	r2, ip
   1c0e2:	ea93 0f0c 	teqne	r3, ip
   1c0e6:	d06f      	beq.n	1c1c8 <__aeabi_fmul+0xf8>
   1c0e8:	441a      	add	r2, r3
   1c0ea:	ea80 0c01 	eor.w	ip, r0, r1
   1c0ee:	0240      	lsls	r0, r0, #9
   1c0f0:	bf18      	it	ne
   1c0f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1c0f6:	d01e      	beq.n	1c136 <__aeabi_fmul+0x66>
   1c0f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1c0fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1c100:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1c104:	fba0 3101 	umull	r3, r1, r0, r1
   1c108:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1c10c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1c110:	bf3e      	ittt	cc
   1c112:	0049      	lslcc	r1, r1, #1
   1c114:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1c118:	005b      	lslcc	r3, r3, #1
   1c11a:	ea40 0001 	orr.w	r0, r0, r1
   1c11e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1c122:	2afd      	cmp	r2, #253	; 0xfd
   1c124:	d81d      	bhi.n	1c162 <__aeabi_fmul+0x92>
   1c126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1c12a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c12e:	bf08      	it	eq
   1c130:	f020 0001 	biceq.w	r0, r0, #1
   1c134:	4770      	bx	lr
   1c136:	f090 0f00 	teq	r0, #0
   1c13a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1c13e:	bf08      	it	eq
   1c140:	0249      	lsleq	r1, r1, #9
   1c142:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1c146:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1c14a:	3a7f      	subs	r2, #127	; 0x7f
   1c14c:	bfc2      	ittt	gt
   1c14e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1c152:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1c156:	4770      	bxgt	lr
   1c158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c15c:	f04f 0300 	mov.w	r3, #0
   1c160:	3a01      	subs	r2, #1
   1c162:	dc5d      	bgt.n	1c220 <__aeabi_fmul+0x150>
   1c164:	f112 0f19 	cmn.w	r2, #25
   1c168:	bfdc      	itt	le
   1c16a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1c16e:	4770      	bxle	lr
   1c170:	f1c2 0200 	rsb	r2, r2, #0
   1c174:	0041      	lsls	r1, r0, #1
   1c176:	fa21 f102 	lsr.w	r1, r1, r2
   1c17a:	f1c2 0220 	rsb	r2, r2, #32
   1c17e:	fa00 fc02 	lsl.w	ip, r0, r2
   1c182:	ea5f 0031 	movs.w	r0, r1, rrx
   1c186:	f140 0000 	adc.w	r0, r0, #0
   1c18a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1c18e:	bf08      	it	eq
   1c190:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c194:	4770      	bx	lr
   1c196:	f092 0f00 	teq	r2, #0
   1c19a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1c19e:	bf02      	ittt	eq
   1c1a0:	0040      	lsleq	r0, r0, #1
   1c1a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1c1a6:	3a01      	subeq	r2, #1
   1c1a8:	d0f9      	beq.n	1c19e <__aeabi_fmul+0xce>
   1c1aa:	ea40 000c 	orr.w	r0, r0, ip
   1c1ae:	f093 0f00 	teq	r3, #0
   1c1b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c1b6:	bf02      	ittt	eq
   1c1b8:	0049      	lsleq	r1, r1, #1
   1c1ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1c1be:	3b01      	subeq	r3, #1
   1c1c0:	d0f9      	beq.n	1c1b6 <__aeabi_fmul+0xe6>
   1c1c2:	ea41 010c 	orr.w	r1, r1, ip
   1c1c6:	e78f      	b.n	1c0e8 <__aeabi_fmul+0x18>
   1c1c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1c1cc:	ea92 0f0c 	teq	r2, ip
   1c1d0:	bf18      	it	ne
   1c1d2:	ea93 0f0c 	teqne	r3, ip
   1c1d6:	d00a      	beq.n	1c1ee <__aeabi_fmul+0x11e>
   1c1d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1c1dc:	bf18      	it	ne
   1c1de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1c1e2:	d1d8      	bne.n	1c196 <__aeabi_fmul+0xc6>
   1c1e4:	ea80 0001 	eor.w	r0, r0, r1
   1c1e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1c1ec:	4770      	bx	lr
   1c1ee:	f090 0f00 	teq	r0, #0
   1c1f2:	bf17      	itett	ne
   1c1f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1c1f8:	4608      	moveq	r0, r1
   1c1fa:	f091 0f00 	teqne	r1, #0
   1c1fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1c202:	d014      	beq.n	1c22e <__aeabi_fmul+0x15e>
   1c204:	ea92 0f0c 	teq	r2, ip
   1c208:	d101      	bne.n	1c20e <__aeabi_fmul+0x13e>
   1c20a:	0242      	lsls	r2, r0, #9
   1c20c:	d10f      	bne.n	1c22e <__aeabi_fmul+0x15e>
   1c20e:	ea93 0f0c 	teq	r3, ip
   1c212:	d103      	bne.n	1c21c <__aeabi_fmul+0x14c>
   1c214:	024b      	lsls	r3, r1, #9
   1c216:	bf18      	it	ne
   1c218:	4608      	movne	r0, r1
   1c21a:	d108      	bne.n	1c22e <__aeabi_fmul+0x15e>
   1c21c:	ea80 0001 	eor.w	r0, r0, r1
   1c220:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1c224:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c22c:	4770      	bx	lr
   1c22e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c232:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1c236:	4770      	bx	lr

0001c238 <__aeabi_fdiv>:
   1c238:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c23c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1c240:	bf1e      	ittt	ne
   1c242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1c246:	ea92 0f0c 	teqne	r2, ip
   1c24a:	ea93 0f0c 	teqne	r3, ip
   1c24e:	d069      	beq.n	1c324 <__aeabi_fdiv+0xec>
   1c250:	eba2 0203 	sub.w	r2, r2, r3
   1c254:	ea80 0c01 	eor.w	ip, r0, r1
   1c258:	0249      	lsls	r1, r1, #9
   1c25a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1c25e:	d037      	beq.n	1c2d0 <__aeabi_fdiv+0x98>
   1c260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c264:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1c268:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1c26c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1c270:	428b      	cmp	r3, r1
   1c272:	bf38      	it	cc
   1c274:	005b      	lslcc	r3, r3, #1
   1c276:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1c27a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1c27e:	428b      	cmp	r3, r1
   1c280:	bf24      	itt	cs
   1c282:	1a5b      	subcs	r3, r3, r1
   1c284:	ea40 000c 	orrcs.w	r0, r0, ip
   1c288:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1c28c:	bf24      	itt	cs
   1c28e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1c292:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c296:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1c29a:	bf24      	itt	cs
   1c29c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1c2a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c2a4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c2a8:	bf24      	itt	cs
   1c2aa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1c2ae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c2b2:	011b      	lsls	r3, r3, #4
   1c2b4:	bf18      	it	ne
   1c2b6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1c2ba:	d1e0      	bne.n	1c27e <__aeabi_fdiv+0x46>
   1c2bc:	2afd      	cmp	r2, #253	; 0xfd
   1c2be:	f63f af50 	bhi.w	1c162 <__aeabi_fmul+0x92>
   1c2c2:	428b      	cmp	r3, r1
   1c2c4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c2c8:	bf08      	it	eq
   1c2ca:	f020 0001 	biceq.w	r0, r0, #1
   1c2ce:	4770      	bx	lr
   1c2d0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1c2d4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1c2d8:	327f      	adds	r2, #127	; 0x7f
   1c2da:	bfc2      	ittt	gt
   1c2dc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1c2e0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1c2e4:	4770      	bxgt	lr
   1c2e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c2ea:	f04f 0300 	mov.w	r3, #0
   1c2ee:	3a01      	subs	r2, #1
   1c2f0:	e737      	b.n	1c162 <__aeabi_fmul+0x92>
   1c2f2:	f092 0f00 	teq	r2, #0
   1c2f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1c2fa:	bf02      	ittt	eq
   1c2fc:	0040      	lsleq	r0, r0, #1
   1c2fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1c302:	3a01      	subeq	r2, #1
   1c304:	d0f9      	beq.n	1c2fa <__aeabi_fdiv+0xc2>
   1c306:	ea40 000c 	orr.w	r0, r0, ip
   1c30a:	f093 0f00 	teq	r3, #0
   1c30e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c312:	bf02      	ittt	eq
   1c314:	0049      	lsleq	r1, r1, #1
   1c316:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1c31a:	3b01      	subeq	r3, #1
   1c31c:	d0f9      	beq.n	1c312 <__aeabi_fdiv+0xda>
   1c31e:	ea41 010c 	orr.w	r1, r1, ip
   1c322:	e795      	b.n	1c250 <__aeabi_fdiv+0x18>
   1c324:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1c328:	ea92 0f0c 	teq	r2, ip
   1c32c:	d108      	bne.n	1c340 <__aeabi_fdiv+0x108>
   1c32e:	0242      	lsls	r2, r0, #9
   1c330:	f47f af7d 	bne.w	1c22e <__aeabi_fmul+0x15e>
   1c334:	ea93 0f0c 	teq	r3, ip
   1c338:	f47f af70 	bne.w	1c21c <__aeabi_fmul+0x14c>
   1c33c:	4608      	mov	r0, r1
   1c33e:	e776      	b.n	1c22e <__aeabi_fmul+0x15e>
   1c340:	ea93 0f0c 	teq	r3, ip
   1c344:	d104      	bne.n	1c350 <__aeabi_fdiv+0x118>
   1c346:	024b      	lsls	r3, r1, #9
   1c348:	f43f af4c 	beq.w	1c1e4 <__aeabi_fmul+0x114>
   1c34c:	4608      	mov	r0, r1
   1c34e:	e76e      	b.n	1c22e <__aeabi_fmul+0x15e>
   1c350:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1c354:	bf18      	it	ne
   1c356:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1c35a:	d1ca      	bne.n	1c2f2 <__aeabi_fdiv+0xba>
   1c35c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1c360:	f47f af5c 	bne.w	1c21c <__aeabi_fmul+0x14c>
   1c364:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1c368:	f47f af3c 	bne.w	1c1e4 <__aeabi_fmul+0x114>
   1c36c:	e75f      	b.n	1c22e <__aeabi_fmul+0x15e>
   1c36e:	bf00      	nop

0001c370 <__gesf2>:
   1c370:	f04f 3cff 	mov.w	ip, #4294967295
   1c374:	e006      	b.n	1c384 <__cmpsf2+0x4>
   1c376:	bf00      	nop

0001c378 <__lesf2>:
   1c378:	f04f 0c01 	mov.w	ip, #1
   1c37c:	e002      	b.n	1c384 <__cmpsf2+0x4>
   1c37e:	bf00      	nop

0001c380 <__cmpsf2>:
   1c380:	f04f 0c01 	mov.w	ip, #1
   1c384:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c388:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1c38c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c390:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c394:	bf18      	it	ne
   1c396:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c39a:	d011      	beq.n	1c3c0 <__cmpsf2+0x40>
   1c39c:	b001      	add	sp, #4
   1c39e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1c3a2:	bf18      	it	ne
   1c3a4:	ea90 0f01 	teqne	r0, r1
   1c3a8:	bf58      	it	pl
   1c3aa:	ebb2 0003 	subspl.w	r0, r2, r3
   1c3ae:	bf88      	it	hi
   1c3b0:	17c8      	asrhi	r0, r1, #31
   1c3b2:	bf38      	it	cc
   1c3b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1c3b8:	bf18      	it	ne
   1c3ba:	f040 0001 	orrne.w	r0, r0, #1
   1c3be:	4770      	bx	lr
   1c3c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c3c4:	d102      	bne.n	1c3cc <__cmpsf2+0x4c>
   1c3c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1c3ca:	d105      	bne.n	1c3d8 <__cmpsf2+0x58>
   1c3cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1c3d0:	d1e4      	bne.n	1c39c <__cmpsf2+0x1c>
   1c3d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1c3d6:	d0e1      	beq.n	1c39c <__cmpsf2+0x1c>
   1c3d8:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c3dc:	4770      	bx	lr
   1c3de:	bf00      	nop

0001c3e0 <__aeabi_cfrcmple>:
   1c3e0:	4684      	mov	ip, r0
   1c3e2:	4608      	mov	r0, r1
   1c3e4:	4661      	mov	r1, ip
   1c3e6:	e7ff      	b.n	1c3e8 <__aeabi_cfcmpeq>

0001c3e8 <__aeabi_cfcmpeq>:
   1c3e8:	b50f      	push	{r0, r1, r2, r3, lr}
   1c3ea:	f7ff ffc9 	bl	1c380 <__cmpsf2>
   1c3ee:	2800      	cmp	r0, #0
   1c3f0:	bf48      	it	mi
   1c3f2:	f110 0f00 	cmnmi.w	r0, #0
   1c3f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001c3f8 <__aeabi_fcmpeq>:
   1c3f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c3fc:	f7ff fff4 	bl	1c3e8 <__aeabi_cfcmpeq>
   1c400:	bf0c      	ite	eq
   1c402:	2001      	moveq	r0, #1
   1c404:	2000      	movne	r0, #0
   1c406:	f85d fb08 	ldr.w	pc, [sp], #8
   1c40a:	bf00      	nop

0001c40c <__aeabi_fcmplt>:
   1c40c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c410:	f7ff ffea 	bl	1c3e8 <__aeabi_cfcmpeq>
   1c414:	bf34      	ite	cc
   1c416:	2001      	movcc	r0, #1
   1c418:	2000      	movcs	r0, #0
   1c41a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c41e:	bf00      	nop

0001c420 <__aeabi_fcmple>:
   1c420:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c424:	f7ff ffe0 	bl	1c3e8 <__aeabi_cfcmpeq>
   1c428:	bf94      	ite	ls
   1c42a:	2001      	movls	r0, #1
   1c42c:	2000      	movhi	r0, #0
   1c42e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c432:	bf00      	nop

0001c434 <__aeabi_fcmpge>:
   1c434:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c438:	f7ff ffd2 	bl	1c3e0 <__aeabi_cfrcmple>
   1c43c:	bf94      	ite	ls
   1c43e:	2001      	movls	r0, #1
   1c440:	2000      	movhi	r0, #0
   1c442:	f85d fb08 	ldr.w	pc, [sp], #8
   1c446:	bf00      	nop

0001c448 <__aeabi_fcmpgt>:
   1c448:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c44c:	f7ff ffc8 	bl	1c3e0 <__aeabi_cfrcmple>
   1c450:	bf34      	ite	cc
   1c452:	2001      	movcc	r0, #1
   1c454:	2000      	movcs	r0, #0
   1c456:	f85d fb08 	ldr.w	pc, [sp], #8
   1c45a:	bf00      	nop

0001c45c <__aeabi_f2uiz>:
   1c45c:	0042      	lsls	r2, r0, #1
   1c45e:	d20e      	bcs.n	1c47e <__aeabi_f2uiz+0x22>
   1c460:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1c464:	d30b      	bcc.n	1c47e <__aeabi_f2uiz+0x22>
   1c466:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1c46a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1c46e:	d409      	bmi.n	1c484 <__aeabi_f2uiz+0x28>
   1c470:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1c474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c478:	fa23 f002 	lsr.w	r0, r3, r2
   1c47c:	4770      	bx	lr
   1c47e:	f04f 0000 	mov.w	r0, #0
   1c482:	4770      	bx	lr
   1c484:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1c488:	d101      	bne.n	1c48e <__aeabi_f2uiz+0x32>
   1c48a:	0242      	lsls	r2, r0, #9
   1c48c:	d102      	bne.n	1c494 <__aeabi_f2uiz+0x38>
   1c48e:	f04f 30ff 	mov.w	r0, #4294967295
   1c492:	4770      	bx	lr
   1c494:	f04f 0000 	mov.w	r0, #0
   1c498:	4770      	bx	lr
   1c49a:	bf00      	nop

0001c49c <__cxa_atexit>:
   1c49c:	4613      	mov	r3, r2
   1c49e:	460a      	mov	r2, r1
   1c4a0:	4601      	mov	r1, r0
   1c4a2:	2002      	movs	r0, #2
   1c4a4:	f000 b99a 	b.w	1c7dc <__register_exitproc>

0001c4a8 <__errno>:
   1c4a8:	4b01      	ldr	r3, [pc, #4]	; (1c4b0 <__errno+0x8>)
   1c4aa:	6818      	ldr	r0, [r3, #0]
   1c4ac:	4770      	bx	lr
   1c4ae:	bf00      	nop
   1c4b0:	200001e8 	.word	0x200001e8

0001c4b4 <ffs>:
   1c4b4:	b140      	cbz	r0, 1c4c8 <ffs+0x14>
   1c4b6:	2300      	movs	r3, #0
   1c4b8:	fa40 f103 	asr.w	r1, r0, r3
   1c4bc:	1c5a      	adds	r2, r3, #1
   1c4be:	07c9      	lsls	r1, r1, #31
   1c4c0:	4613      	mov	r3, r2
   1c4c2:	d5f9      	bpl.n	1c4b8 <ffs+0x4>
   1c4c4:	4610      	mov	r0, r2
   1c4c6:	4770      	bx	lr
   1c4c8:	4602      	mov	r2, r0
   1c4ca:	4610      	mov	r0, r2
   1c4cc:	4770      	bx	lr
   1c4ce:	bf00      	nop

0001c4d0 <__libc_init_array>:
   1c4d0:	b570      	push	{r4, r5, r6, lr}
   1c4d2:	4e0f      	ldr	r6, [pc, #60]	; (1c510 <__libc_init_array+0x40>)
   1c4d4:	4d0f      	ldr	r5, [pc, #60]	; (1c514 <__libc_init_array+0x44>)
   1c4d6:	1b76      	subs	r6, r6, r5
   1c4d8:	10b6      	asrs	r6, r6, #2
   1c4da:	bf18      	it	ne
   1c4dc:	2400      	movne	r4, #0
   1c4de:	d005      	beq.n	1c4ec <__libc_init_array+0x1c>
   1c4e0:	3401      	adds	r4, #1
   1c4e2:	f855 3b04 	ldr.w	r3, [r5], #4
   1c4e6:	4798      	blx	r3
   1c4e8:	42a6      	cmp	r6, r4
   1c4ea:	d1f9      	bne.n	1c4e0 <__libc_init_array+0x10>
   1c4ec:	4e0a      	ldr	r6, [pc, #40]	; (1c518 <__libc_init_array+0x48>)
   1c4ee:	4d0b      	ldr	r5, [pc, #44]	; (1c51c <__libc_init_array+0x4c>)
   1c4f0:	1b76      	subs	r6, r6, r5
   1c4f2:	f001 fc13 	bl	1dd1c <_init>
   1c4f6:	10b6      	asrs	r6, r6, #2
   1c4f8:	bf18      	it	ne
   1c4fa:	2400      	movne	r4, #0
   1c4fc:	d006      	beq.n	1c50c <__libc_init_array+0x3c>
   1c4fe:	3401      	adds	r4, #1
   1c500:	f855 3b04 	ldr.w	r3, [r5], #4
   1c504:	4798      	blx	r3
   1c506:	42a6      	cmp	r6, r4
   1c508:	d1f9      	bne.n	1c4fe <__libc_init_array+0x2e>
   1c50a:	bd70      	pop	{r4, r5, r6, pc}
   1c50c:	bd70      	pop	{r4, r5, r6, pc}
   1c50e:	bf00      	nop
   1c510:	0001dd28 	.word	0x0001dd28
   1c514:	0001dd28 	.word	0x0001dd28
   1c518:	0001ddb4 	.word	0x0001ddb4
   1c51c:	0001dd28 	.word	0x0001dd28

0001c520 <memcpy>:
   1c520:	4684      	mov	ip, r0
   1c522:	ea41 0300 	orr.w	r3, r1, r0
   1c526:	f013 0303 	ands.w	r3, r3, #3
   1c52a:	d16d      	bne.n	1c608 <memcpy+0xe8>
   1c52c:	3a40      	subs	r2, #64	; 0x40
   1c52e:	d341      	bcc.n	1c5b4 <memcpy+0x94>
   1c530:	f851 3b04 	ldr.w	r3, [r1], #4
   1c534:	f840 3b04 	str.w	r3, [r0], #4
   1c538:	f851 3b04 	ldr.w	r3, [r1], #4
   1c53c:	f840 3b04 	str.w	r3, [r0], #4
   1c540:	f851 3b04 	ldr.w	r3, [r1], #4
   1c544:	f840 3b04 	str.w	r3, [r0], #4
   1c548:	f851 3b04 	ldr.w	r3, [r1], #4
   1c54c:	f840 3b04 	str.w	r3, [r0], #4
   1c550:	f851 3b04 	ldr.w	r3, [r1], #4
   1c554:	f840 3b04 	str.w	r3, [r0], #4
   1c558:	f851 3b04 	ldr.w	r3, [r1], #4
   1c55c:	f840 3b04 	str.w	r3, [r0], #4
   1c560:	f851 3b04 	ldr.w	r3, [r1], #4
   1c564:	f840 3b04 	str.w	r3, [r0], #4
   1c568:	f851 3b04 	ldr.w	r3, [r1], #4
   1c56c:	f840 3b04 	str.w	r3, [r0], #4
   1c570:	f851 3b04 	ldr.w	r3, [r1], #4
   1c574:	f840 3b04 	str.w	r3, [r0], #4
   1c578:	f851 3b04 	ldr.w	r3, [r1], #4
   1c57c:	f840 3b04 	str.w	r3, [r0], #4
   1c580:	f851 3b04 	ldr.w	r3, [r1], #4
   1c584:	f840 3b04 	str.w	r3, [r0], #4
   1c588:	f851 3b04 	ldr.w	r3, [r1], #4
   1c58c:	f840 3b04 	str.w	r3, [r0], #4
   1c590:	f851 3b04 	ldr.w	r3, [r1], #4
   1c594:	f840 3b04 	str.w	r3, [r0], #4
   1c598:	f851 3b04 	ldr.w	r3, [r1], #4
   1c59c:	f840 3b04 	str.w	r3, [r0], #4
   1c5a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5a4:	f840 3b04 	str.w	r3, [r0], #4
   1c5a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5ac:	f840 3b04 	str.w	r3, [r0], #4
   1c5b0:	3a40      	subs	r2, #64	; 0x40
   1c5b2:	d2bd      	bcs.n	1c530 <memcpy+0x10>
   1c5b4:	3230      	adds	r2, #48	; 0x30
   1c5b6:	d311      	bcc.n	1c5dc <memcpy+0xbc>
   1c5b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5bc:	f840 3b04 	str.w	r3, [r0], #4
   1c5c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5c4:	f840 3b04 	str.w	r3, [r0], #4
   1c5c8:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5cc:	f840 3b04 	str.w	r3, [r0], #4
   1c5d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5d4:	f840 3b04 	str.w	r3, [r0], #4
   1c5d8:	3a10      	subs	r2, #16
   1c5da:	d2ed      	bcs.n	1c5b8 <memcpy+0x98>
   1c5dc:	320c      	adds	r2, #12
   1c5de:	d305      	bcc.n	1c5ec <memcpy+0xcc>
   1c5e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c5e4:	f840 3b04 	str.w	r3, [r0], #4
   1c5e8:	3a04      	subs	r2, #4
   1c5ea:	d2f9      	bcs.n	1c5e0 <memcpy+0xc0>
   1c5ec:	3204      	adds	r2, #4
   1c5ee:	d008      	beq.n	1c602 <memcpy+0xe2>
   1c5f0:	07d2      	lsls	r2, r2, #31
   1c5f2:	bf1c      	itt	ne
   1c5f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c5f8:	f800 3b01 	strbne.w	r3, [r0], #1
   1c5fc:	d301      	bcc.n	1c602 <memcpy+0xe2>
   1c5fe:	880b      	ldrh	r3, [r1, #0]
   1c600:	8003      	strh	r3, [r0, #0]
   1c602:	4660      	mov	r0, ip
   1c604:	4770      	bx	lr
   1c606:	bf00      	nop
   1c608:	2a08      	cmp	r2, #8
   1c60a:	d313      	bcc.n	1c634 <memcpy+0x114>
   1c60c:	078b      	lsls	r3, r1, #30
   1c60e:	d08d      	beq.n	1c52c <memcpy+0xc>
   1c610:	f010 0303 	ands.w	r3, r0, #3
   1c614:	d08a      	beq.n	1c52c <memcpy+0xc>
   1c616:	f1c3 0304 	rsb	r3, r3, #4
   1c61a:	1ad2      	subs	r2, r2, r3
   1c61c:	07db      	lsls	r3, r3, #31
   1c61e:	bf1c      	itt	ne
   1c620:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c624:	f800 3b01 	strbne.w	r3, [r0], #1
   1c628:	d380      	bcc.n	1c52c <memcpy+0xc>
   1c62a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1c62e:	f820 3b02 	strh.w	r3, [r0], #2
   1c632:	e77b      	b.n	1c52c <memcpy+0xc>
   1c634:	3a04      	subs	r2, #4
   1c636:	d3d9      	bcc.n	1c5ec <memcpy+0xcc>
   1c638:	3a01      	subs	r2, #1
   1c63a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c63e:	f800 3b01 	strb.w	r3, [r0], #1
   1c642:	d2f9      	bcs.n	1c638 <memcpy+0x118>
   1c644:	780b      	ldrb	r3, [r1, #0]
   1c646:	7003      	strb	r3, [r0, #0]
   1c648:	784b      	ldrb	r3, [r1, #1]
   1c64a:	7043      	strb	r3, [r0, #1]
   1c64c:	788b      	ldrb	r3, [r1, #2]
   1c64e:	7083      	strb	r3, [r0, #2]
   1c650:	4660      	mov	r0, ip
   1c652:	4770      	bx	lr

0001c654 <memset>:
   1c654:	b470      	push	{r4, r5, r6}
   1c656:	0786      	lsls	r6, r0, #30
   1c658:	d046      	beq.n	1c6e8 <memset+0x94>
   1c65a:	1e54      	subs	r4, r2, #1
   1c65c:	2a00      	cmp	r2, #0
   1c65e:	d041      	beq.n	1c6e4 <memset+0x90>
   1c660:	b2ca      	uxtb	r2, r1
   1c662:	4603      	mov	r3, r0
   1c664:	e002      	b.n	1c66c <memset+0x18>
   1c666:	f114 34ff 	adds.w	r4, r4, #4294967295
   1c66a:	d33b      	bcc.n	1c6e4 <memset+0x90>
   1c66c:	f803 2b01 	strb.w	r2, [r3], #1
   1c670:	079d      	lsls	r5, r3, #30
   1c672:	d1f8      	bne.n	1c666 <memset+0x12>
   1c674:	2c03      	cmp	r4, #3
   1c676:	d92e      	bls.n	1c6d6 <memset+0x82>
   1c678:	b2cd      	uxtb	r5, r1
   1c67a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1c67e:	2c0f      	cmp	r4, #15
   1c680:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1c684:	d919      	bls.n	1c6ba <memset+0x66>
   1c686:	f103 0210 	add.w	r2, r3, #16
   1c68a:	4626      	mov	r6, r4
   1c68c:	3e10      	subs	r6, #16
   1c68e:	2e0f      	cmp	r6, #15
   1c690:	f842 5c10 	str.w	r5, [r2, #-16]
   1c694:	f842 5c0c 	str.w	r5, [r2, #-12]
   1c698:	f842 5c08 	str.w	r5, [r2, #-8]
   1c69c:	f842 5c04 	str.w	r5, [r2, #-4]
   1c6a0:	f102 0210 	add.w	r2, r2, #16
   1c6a4:	d8f2      	bhi.n	1c68c <memset+0x38>
   1c6a6:	f1a4 0210 	sub.w	r2, r4, #16
   1c6aa:	f022 020f 	bic.w	r2, r2, #15
   1c6ae:	f004 040f 	and.w	r4, r4, #15
   1c6b2:	3210      	adds	r2, #16
   1c6b4:	2c03      	cmp	r4, #3
   1c6b6:	4413      	add	r3, r2
   1c6b8:	d90d      	bls.n	1c6d6 <memset+0x82>
   1c6ba:	461e      	mov	r6, r3
   1c6bc:	4622      	mov	r2, r4
   1c6be:	3a04      	subs	r2, #4
   1c6c0:	2a03      	cmp	r2, #3
   1c6c2:	f846 5b04 	str.w	r5, [r6], #4
   1c6c6:	d8fa      	bhi.n	1c6be <memset+0x6a>
   1c6c8:	1f22      	subs	r2, r4, #4
   1c6ca:	f022 0203 	bic.w	r2, r2, #3
   1c6ce:	3204      	adds	r2, #4
   1c6d0:	4413      	add	r3, r2
   1c6d2:	f004 0403 	and.w	r4, r4, #3
   1c6d6:	b12c      	cbz	r4, 1c6e4 <memset+0x90>
   1c6d8:	b2c9      	uxtb	r1, r1
   1c6da:	441c      	add	r4, r3
   1c6dc:	f803 1b01 	strb.w	r1, [r3], #1
   1c6e0:	429c      	cmp	r4, r3
   1c6e2:	d1fb      	bne.n	1c6dc <memset+0x88>
   1c6e4:	bc70      	pop	{r4, r5, r6}
   1c6e6:	4770      	bx	lr
   1c6e8:	4614      	mov	r4, r2
   1c6ea:	4603      	mov	r3, r0
   1c6ec:	e7c2      	b.n	1c674 <memset+0x20>
   1c6ee:	bf00      	nop
	...

0001c700 <strlen>:
   1c700:	f890 f000 	pld	[r0]
   1c704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1c708:	f020 0107 	bic.w	r1, r0, #7
   1c70c:	f06f 0c00 	mvn.w	ip, #0
   1c710:	f010 0407 	ands.w	r4, r0, #7
   1c714:	f891 f020 	pld	[r1, #32]
   1c718:	f040 8049 	bne.w	1c7ae <strlen+0xae>
   1c71c:	f04f 0400 	mov.w	r4, #0
   1c720:	f06f 0007 	mvn.w	r0, #7
   1c724:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c728:	f891 f040 	pld	[r1, #64]	; 0x40
   1c72c:	f100 0008 	add.w	r0, r0, #8
   1c730:	fa82 f24c 	uadd8	r2, r2, ip
   1c734:	faa4 f28c 	sel	r2, r4, ip
   1c738:	fa83 f34c 	uadd8	r3, r3, ip
   1c73c:	faa2 f38c 	sel	r3, r2, ip
   1c740:	bb4b      	cbnz	r3, 1c796 <strlen+0x96>
   1c742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1c746:	fa82 f24c 	uadd8	r2, r2, ip
   1c74a:	f100 0008 	add.w	r0, r0, #8
   1c74e:	faa4 f28c 	sel	r2, r4, ip
   1c752:	fa83 f34c 	uadd8	r3, r3, ip
   1c756:	faa2 f38c 	sel	r3, r2, ip
   1c75a:	b9e3      	cbnz	r3, 1c796 <strlen+0x96>
   1c75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1c760:	fa82 f24c 	uadd8	r2, r2, ip
   1c764:	f100 0008 	add.w	r0, r0, #8
   1c768:	faa4 f28c 	sel	r2, r4, ip
   1c76c:	fa83 f34c 	uadd8	r3, r3, ip
   1c770:	faa2 f38c 	sel	r3, r2, ip
   1c774:	b97b      	cbnz	r3, 1c796 <strlen+0x96>
   1c776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1c77a:	f101 0120 	add.w	r1, r1, #32
   1c77e:	fa82 f24c 	uadd8	r2, r2, ip
   1c782:	f100 0008 	add.w	r0, r0, #8
   1c786:	faa4 f28c 	sel	r2, r4, ip
   1c78a:	fa83 f34c 	uadd8	r3, r3, ip
   1c78e:	faa2 f38c 	sel	r3, r2, ip
   1c792:	2b00      	cmp	r3, #0
   1c794:	d0c6      	beq.n	1c724 <strlen+0x24>
   1c796:	2a00      	cmp	r2, #0
   1c798:	bf04      	itt	eq
   1c79a:	3004      	addeq	r0, #4
   1c79c:	461a      	moveq	r2, r3
   1c79e:	ba12      	rev	r2, r2
   1c7a0:	fab2 f282 	clz	r2, r2
   1c7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1c7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1c7ac:	4770      	bx	lr
   1c7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c7b2:	f004 0503 	and.w	r5, r4, #3
   1c7b6:	f1c4 0000 	rsb	r0, r4, #0
   1c7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1c7be:	f014 0f04 	tst.w	r4, #4
   1c7c2:	f891 f040 	pld	[r1, #64]	; 0x40
   1c7c6:	fa0c f505 	lsl.w	r5, ip, r5
   1c7ca:	ea62 0205 	orn	r2, r2, r5
   1c7ce:	bf1c      	itt	ne
   1c7d0:	ea63 0305 	ornne	r3, r3, r5
   1c7d4:	4662      	movne	r2, ip
   1c7d6:	f04f 0400 	mov.w	r4, #0
   1c7da:	e7a9      	b.n	1c730 <strlen+0x30>

0001c7dc <__register_exitproc>:
   1c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c7e0:	4d2c      	ldr	r5, [pc, #176]	; (1c894 <__register_exitproc+0xb8>)
   1c7e2:	4606      	mov	r6, r0
   1c7e4:	6828      	ldr	r0, [r5, #0]
   1c7e6:	4698      	mov	r8, r3
   1c7e8:	460f      	mov	r7, r1
   1c7ea:	4691      	mov	r9, r2
   1c7ec:	f000 f882 	bl	1c8f4 <__retarget_lock_acquire_recursive>
   1c7f0:	4b29      	ldr	r3, [pc, #164]	; (1c898 <__register_exitproc+0xbc>)
   1c7f2:	681c      	ldr	r4, [r3, #0]
   1c7f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d03e      	beq.n	1c87a <__register_exitproc+0x9e>
   1c7fc:	685a      	ldr	r2, [r3, #4]
   1c7fe:	2a1f      	cmp	r2, #31
   1c800:	dc1c      	bgt.n	1c83c <__register_exitproc+0x60>
   1c802:	f102 0e01 	add.w	lr, r2, #1
   1c806:	b176      	cbz	r6, 1c826 <__register_exitproc+0x4a>
   1c808:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1c80c:	2401      	movs	r4, #1
   1c80e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1c812:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1c816:	4094      	lsls	r4, r2
   1c818:	4320      	orrs	r0, r4
   1c81a:	2e02      	cmp	r6, #2
   1c81c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1c820:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1c824:	d023      	beq.n	1c86e <__register_exitproc+0x92>
   1c826:	3202      	adds	r2, #2
   1c828:	f8c3 e004 	str.w	lr, [r3, #4]
   1c82c:	6828      	ldr	r0, [r5, #0]
   1c82e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1c832:	f000 f861 	bl	1c8f8 <__retarget_lock_release_recursive>
   1c836:	2000      	movs	r0, #0
   1c838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c83c:	4b17      	ldr	r3, [pc, #92]	; (1c89c <__register_exitproc+0xc0>)
   1c83e:	b30b      	cbz	r3, 1c884 <__register_exitproc+0xa8>
   1c840:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1c844:	f7f6 fcb6 	bl	131b4 <malloc>
   1c848:	4603      	mov	r3, r0
   1c84a:	b1d8      	cbz	r0, 1c884 <__register_exitproc+0xa8>
   1c84c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1c850:	6002      	str	r2, [r0, #0]
   1c852:	2100      	movs	r1, #0
   1c854:	6041      	str	r1, [r0, #4]
   1c856:	460a      	mov	r2, r1
   1c858:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1c85c:	f04f 0e01 	mov.w	lr, #1
   1c860:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1c864:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1c868:	2e00      	cmp	r6, #0
   1c86a:	d0dc      	beq.n	1c826 <__register_exitproc+0x4a>
   1c86c:	e7cc      	b.n	1c808 <__register_exitproc+0x2c>
   1c86e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1c872:	430c      	orrs	r4, r1
   1c874:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1c878:	e7d5      	b.n	1c826 <__register_exitproc+0x4a>
   1c87a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1c87e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1c882:	e7bb      	b.n	1c7fc <__register_exitproc+0x20>
   1c884:	6828      	ldr	r0, [r5, #0]
   1c886:	f000 f837 	bl	1c8f8 <__retarget_lock_release_recursive>
   1c88a:	f04f 30ff 	mov.w	r0, #4294967295
   1c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c892:	bf00      	nop
   1c894:	20000618 	.word	0x20000618
   1c898:	0001dd18 	.word	0x0001dd18
   1c89c:	000131b5 	.word	0x000131b5

0001c8a0 <register_fini>:
   1c8a0:	4b02      	ldr	r3, [pc, #8]	; (1c8ac <register_fini+0xc>)
   1c8a2:	b113      	cbz	r3, 1c8aa <register_fini+0xa>
   1c8a4:	4802      	ldr	r0, [pc, #8]	; (1c8b0 <register_fini+0x10>)
   1c8a6:	f000 b805 	b.w	1c8b4 <atexit>
   1c8aa:	4770      	bx	lr
   1c8ac:	00000000 	.word	0x00000000
   1c8b0:	0001c8c1 	.word	0x0001c8c1

0001c8b4 <atexit>:
   1c8b4:	2300      	movs	r3, #0
   1c8b6:	4601      	mov	r1, r0
   1c8b8:	461a      	mov	r2, r3
   1c8ba:	4618      	mov	r0, r3
   1c8bc:	f7ff bf8e 	b.w	1c7dc <__register_exitproc>

0001c8c0 <__libc_fini_array>:
   1c8c0:	b538      	push	{r3, r4, r5, lr}
   1c8c2:	4c0a      	ldr	r4, [pc, #40]	; (1c8ec <__libc_fini_array+0x2c>)
   1c8c4:	4d0a      	ldr	r5, [pc, #40]	; (1c8f0 <__libc_fini_array+0x30>)
   1c8c6:	1b64      	subs	r4, r4, r5
   1c8c8:	10a4      	asrs	r4, r4, #2
   1c8ca:	d00a      	beq.n	1c8e2 <__libc_fini_array+0x22>
   1c8cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1c8d0:	3b01      	subs	r3, #1
   1c8d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1c8d6:	3c01      	subs	r4, #1
   1c8d8:	f855 3904 	ldr.w	r3, [r5], #-4
   1c8dc:	4798      	blx	r3
   1c8de:	2c00      	cmp	r4, #0
   1c8e0:	d1f9      	bne.n	1c8d6 <__libc_fini_array+0x16>
   1c8e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c8e6:	f001 ba65 	b.w	1ddb4 <_fini>
   1c8ea:	bf00      	nop
   1c8ec:	0001ddc4 	.word	0x0001ddc4
   1c8f0:	0001ddc0 	.word	0x0001ddc0

0001c8f4 <__retarget_lock_acquire_recursive>:
   1c8f4:	4770      	bx	lr
   1c8f6:	bf00      	nop

0001c8f8 <__retarget_lock_release_recursive>:
   1c8f8:	4770      	bx	lr
   1c8fa:	bf00      	nop
   1c8fc:	2e2f2e2e 	.word	0x2e2f2e2e
   1c900:	2e2e2f2e 	.word	0x2e2e2f2e
   1c904:	554c412f 	.word	0x554c412f
   1c908:	6972445f 	.word	0x6972445f
   1c90c:	2f726576 	.word	0x2f726576
   1c910:	5f554c41 	.word	0x5f554c41
   1c914:	76697244 	.word	0x76697244
   1c918:	682f7265 	.word	0x682f7265
   1c91c:	692f6c61 	.word	0x692f6c61
   1c920:	756c636e 	.word	0x756c636e
   1c924:	682f6564 	.word	0x682f6564
   1c928:	775f6c61 	.word	0x775f6c61
   1c92c:	682e7464 	.word	0x682e7464
   1c930:	00000000 	.word	0x00000000
   1c934:	2a2a2a2a 	.word	0x2a2a2a2a
   1c938:	66694c20 	.word	0x66694c20
   1c93c:	75502065 	.word	0x75502065
   1c940:	2065736c 	.word	0x2065736c
   1c944:	69746341 	.word	0x69746341
   1c948:	65746176 	.word	0x65746176
   1c94c:	2a2a2a64 	.word	0x2a2a2a64
   1c950:	0000002a 	.word	0x0000002a
   1c954:	00000a0d 	.word	0x00000a0d

0001c958 <_ZTV17ConfigState_Class>:
	...
   1c960:	000131db                                .1..

0001c964 <_ZTV15HVAC_Controller>:
	...
   1c96c:	000016b5 0000177d ffffffd8 00000000     ....}...........
   1c97c:	00001775 00001801 00000a0d 202a2a2a     u...........*** 
   1c98c:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   1c99c:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   1c9ac:	202a2a2a 65746144 0020203a 20636544     *** Date:  .Dec 
   1c9bc:	32203531 00303230 6d695420 00203a65     15 2020. Time: .
   1c9cc:	323a3031 34343a36 00000000 6f666e49     10:26:44....Info
   1c9dc:	6d654d3a 2079726f 72617453 00646574     :Memory Started.
   1c9ec:	202a2a2a 20554c41 74696e69 65746169     *** ALU initiate
   1c9fc:	2a2a2064 0000002a 69746341 6c206576     d ***...Active l
   1ca0c:	3a656e69 00000020 20726941 646e6f43     ine: ...Air Cond
   1ca1c:	6f697469 676e696e 73795320 206d6574     itioning System 
   1ca2c:	7265704f 6e697461 00000067 00000a0d     Operating.......
   1ca3c:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1ca4c:	73795320 206d6574 72617453 00646574      System Started.
   1ca5c:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1ca6c:	73795320 206d6574 706f7453 00646570      System Stopped.

0001ca7c <_ZTV12States_Class>:
   1ca7c:	00000514 00000274 00000000 00000000     ....t...........
   1ca8c:	000016b5 0000177d 00003a01 ffffffd8     ....}....:......
   1ca9c:	00000000 00001775 00001801 fffffd8c     ....u...........
   1caac:	fffffd8c 00000000 00003a2d fffffd60     ........-:..`...
   1cabc:	fffffaec 00000000                       ........

0001cac4 <_ZTT12States_Class>:
   1cac4:	0001ca8c 0001cab4 0001cac4 0001cae4     ................
   1cad4:	0001caf0                                ....

0001cad8 <_ZTC12States_Class1300_19HVAC_Commando_Class>:
   1cad8:	fffffd60 00000000 00000000 00000000     `...............
   1cae8:	000002a0 00000000 000131db 2e2f2e2e     .........1..../.
   1caf8:	7361542f 6e61486b 72656c64 616c435f     /TaskHandler_Cla
   1cb08:	632e7373 00007070                       ss.cpp..

0001cb10 <_ZTV20AUTO_MODE_Controller>:
	...
   1cb18:	000131db 000131db                       .1...1..

0001cb20 <_ZTV9VENT_Mode>:
	...
   1cb28:	000131db 000131db 682f2e2e 702f6c70     .1...1..../hpl/p
   1cb38:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   1cb48:	00682e65 682f2e2e 692f6c61 756c636e     e.h.../hal/inclu
   1cb58:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
   1cb68:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1cb78:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
   1cb88:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
   1cb98:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1cba8:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
   1cbb8:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   1cbc8:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
   1cbd8:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   1cbe8:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   1cbf8:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   1cc08:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1cc18:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   1cc28:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   1cc38:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   1cc48:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   1cc58:	2e747369 00000063                       ist.c...

0001cc60 <_map>:
   1cc60:	00000000 00000040 00000001 00000021     ....@.......!...
   1cc70:	00000003 00000003 00000004 00000004     ................
   1cc80:	00000005 00000005 00000006 00000056     ............V...
   1cc90:	00000007 00000057 00000008 00000028     ....W.......(...
   1cca0:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1ccb0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001ccc0 <user_mux_confs>:
   1ccc0:	00020100 00000000 00000000 00000000     ................
	...

0001cd04 <channel_confs>:
   1cd04:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001cd44 <interrupt_cfg>:
	...
   1cdc4:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1cdd4:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1cde4:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1cdf4:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1ce04:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1ce14:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1ce24:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1ce34:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1ce44:	43000c00                                ...C

0001ce48 <sercomspi_regs>:
   1ce48:	0020000c 00020000 00000000 01ff0001     .. .............
   1ce58:	30000c04 02000000 00000000 ff001700     ...0............
   1ce68:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1ce78:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1ce88:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1ce98:	43001400 43001800                       ...C...C

0001cea0 <_usb_ep_cfgs>:
   1cea0:	20001948 00000000 00000040 20001988     H.. ....@...... 
   1ceb0:	200019c8 00400040 20001a08 20001a48     ... @.@.... H.. 
   1cec0:	00400040 20001a88 20001ac8 00400040     @.@.... ... @.@.
   1ced0:	20001b08 20001b48 00400040 00000804     ... H.. @.@.....
   1cee0:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1cef0:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1cf00:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1cf10:	7361625f 00682e65                       _base.h.

0001cf18 <n25q256a_interface>:
   1cf18:	000103b9 0001045d 0001056d 00010725     ....]...m...%...
   1cf28:	000107b5 752f2e2e 642f6273 63697665     ....../usb/devic
   1cf38:	73752f65 2e636462 00000063              e/usbdc.c...

0001cf44 <_ZTV17ARINC_Conversions>:
	...
   1cf4c:	00012279 00012295                       y"..."..

0001cf54 <_ZTV19ARINC_Handler_Class>:
   1cf54:	000002c4 000002b4 00000000 00000000     ................
   1cf64:	00012411 00012471 000126dd 00000000     .$..q$...&......
   1cf74:	00000000 fffffd4c 00000000 00012279     ....L.......y"..
   1cf84:	00012295 fffffd3c fffffd3c fffffff0     ."..<...<.......
   1cf94:	fffffd3c 00000000 0001245d 00012491     <.......]$...$..
   1cfa4:	00012715                                .'..

0001cfa8 <_ZTT19ARINC_Handler_Class>:
   1cfa8:	0001cf64 0001d064 0001d014 0001d02c     d...d.......,...
   1cfb8:	0001d048 0001d080 0001d09c 0001cf80     H...............
   1cfc8:	0001cf9c 0001cfe0 0001cffc              ............

0001cfd4 <_ZTC19ARINC_Handler_Class708_14Protocol_Class>:
   1cfd4:	fffffff0 00000000 00000000 00000000     ................
   1cfe4:	00000000 000131db 00000000 00000000     .....1..........
   1cff4:	00000010 00000000 00012279 00012295     ........y"..."..

0001d004 <_ZTC19ARINC_Handler_Class0_18ARINC_Buffer_Class>:
   1d004:	000002c4 000002b4 00000000 00000000     ................
	...
   1d024:	fffffd4c 00000000 00012279 00012295     L.......y"..."..
   1d034:	00000000 fffffd3c fffffff0 fffffd3c     ....<.......<...
	...
   1d050:	000131db                                .1..

0001d054 <_ZTC19ARINC_Handler_Class0_15ARINC_Interface>:
   1d054:	000002c4 000002b4 00000000 00000000     ................
	...
   1d06c:	000126dd 00000000 00000000 fffffd4c     .&..........L...
   1d07c:	00000000 00012279 00012295 fffffd3c     ....y"..."..<...
   1d08c:	fffffd3c fffffff0 fffffd3c 00000000     <.......<.......
	...
   1d0a4:	00012715                                .'..

0001d0a8 <_ZTV15ARINC_Interface>:
   1d0a8:	000002bc 000002ac 00000000 00000000     ................
   1d0b8:	00012639 000126a9 000126dd 00000000     9&...&...&......
   1d0c8:	00000000 fffffd54 00000000 00012279     ....T.......y"..
   1d0d8:	00012295 fffffd44 fffffd44 fffffff0     ."..D...D.......
   1d0e8:	fffffd44 00000000 00012695 000126c9     D........&...&..
   1d0f8:	00012715                                .'..

0001d0fc <_ZTT15ARINC_Interface>:
   1d0fc:	0001d0b8 0001d15c 0001d174 0001d190     ....\...t.......
   1d10c:	0001d0d4 0001d0f0 0001d128 0001d144     ........(...D...

0001d11c <_ZTC15ARINC_Interface700_14Protocol_Class>:
   1d11c:	fffffff0 00000000 00000000 00000000     ................
   1d12c:	00000000 000131db 00000000 00000000     .....1..........
   1d13c:	00000010 00000000 00012279 00012295     ........y"..."..

0001d14c <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   1d14c:	000002bc 000002ac 00000000 00000000     ................
	...
   1d16c:	fffffd54 00000000 00012279 00012295     T.......y"..."..
   1d17c:	00000000 fffffd44 fffffff0 fffffd44     ....D.......D...
	...
   1d198:	000131db 49480d0a 3935332d 61662033     .1....HI-3593 fa
   1d1a8:	64656c69 206f7420 74696e49 7a696c69     iled to Initiliz
   1d1b8:	000d0a65 2d0a0d0a 68202d2d 41203273     e......--- hs2 A
   1d1c8:	434e4952 746e4920 61667265 20206563     RINC Interface  
   1d1d8:	2d2d2d2d 00000d0a 2d0a0d0a 43202d2d     ----.......--- C
   1d1e8:	6f736e6f 4320656c 616d6d6f 2073646e     onsole Commands 
   1d1f8:	706c6548 2d2d2d20 00000000 20502020     Help ---....  P 
   1d208:	6150203d 79746972 676f5420 20656c67     = Parity Toggle 
   1d218:	6f2f6e6f 00006666 20542020 4654203d     on/off..  T = TF
   1d228:	2050494c 676f5420 20656c67 6f2f6e6f     LIP  Toggle on/o
   1d238:	00006666 20522020 4652203d 2050494c     ff..  R = RFLIP 
   1d248:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   1d258:	20532020 4453203d 202c4e4f 2c394453       S = SDON, SD9,
   1d268:	31445320 6f542030 656c6767 2f6e6f20      SD10 Toggle on/
   1d278:	0066666f 20482020 6854203d 48207369     off.  H = This H
   1d288:	20706c65 65676150 00000000 70532020     elp Page....  Sp
   1d298:	20656361 20726142 6944203d 616c7073     ace Bar = Displa
   1d2a8:	74532079 73757461 646e6120 6e6f4320     y Status and Con
   1d2b8:	6c6f7274 67657220 00000073 20492020     trol regs...  I 
   1d2c8:	6e49203d 6d657263 20746e65 7373654d     = Increment Mess
   1d2d8:	20656761 20646e61 6e617254 74696d73     age and Transmit
   1d2e8:	7845202e 726f6c70 4d207265 2065646f     . Explorer Mode 
   1d2f8:	4f202d20 21594c4e 00000000 204d2020      - ONLY!....  M 
   1d308:	6e45203d 20726574 74737543 4d206d6f     = Enter Custom M
   1d318:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   1d328:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   1d338:	4e452020 3d524554 61725420 696d736e       ENTER= Transmi
   1d348:	656e2074 6d207478 61737365 202e6567     t next message. 
   1d358:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   1d368:	4c4e4f20 00002159 00207830 30307826      ONLY!..0x .&x00
   1d378:	00002030 6562614c 2020736c 202d2030     0 ..Labels  0 - 
   1d388:	203a3336 00000020 614c0d0a 736c6562     63:  .....Labels
   1d398:	34362020 3732312d 0020203a 614c0d0a       64-127:  ...La
   1d3a8:	736c6562 38323120 3139312d 0020203a     bels 128-191:  .
   1d3b8:	614c0d0a 736c6562 32393120 3535322d     ..Labels 192-255
   1d3c8:	0020203a 614c0d0a 736c6562 20302020     :  ...Labels  0 
   1d3d8:	3336202d 0020203a 543e0d0a 20202058     - 63:  ...>TX   
   1d3e8:	74614420 00003a61 6562614c 00003a6c      Data:..Label:..
   1d3f8:	2d636552 61442031 003a6174 2d314c50     Rec-1 Data:.PL1-
   1d408:	61442031 003a6174 6374614d 00003a68     1 Data:.Match:..
   1d418:	2d314c50 61442032 003a6174 2d314c50     PL1-2 Data:.PL1-
   1d428:	61442033 003a6174 2d636552 61442032     3 Data:.Rec-2 Da
   1d438:	003a6174 2d324c50 61442031 003a6174     ta:.PL2-1 Data:.
   1d448:	2d324c50 61442032 003a6174 2d324c50     PL2-2 Data:.PL2-
   1d458:	61442033 003a6174 50205854 74697261     3 Data:.TX Parit
   1d468:	52412079 5f434e49 0d0a4e4f 0000003e     y ARINC_ON..>...
   1d478:	50205854 74697261 52412079 5f434e49     TX Parity ARINC_
   1d488:	0a46464f 00003e0d 494c4654 65532050     OFF..>..TFLIP Se
   1d498:	3e0d0a74 00000000 494c4654 6c432050     t..>....TFLIP Cl
   1d4a8:	65726165 3e0d0a64 00000000 2d434552     eared..>....REC-
   1d4b8:	46522031 2050494c 0a746553 00003e0d     1 RFLIP Set..>..
   1d4c8:	2d434552 46522031 2050494c 61656c43     REC-1 RFLIP Clea
   1d4d8:	0a646572 00003e0d 2d434552 46522032     red..>..REC-2 RF
   1d4e8:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
   1d4f8:	46522032 2050494c 61656c43 0a646572     2 RFLIP Cleared.
   1d508:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1d518:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
   1d528:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1d538:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
   1d548:	0a646572 00003e0d 2d434552 44532032     red..>..REC-2 SD
   1d558:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1d568:	0a746553 00003e0d 2d434552 44532032     Set..>..REC-2 SD
   1d578:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1d588:	61656c43 0a646572 00003e0d 500a0d0a     Cleared..>.....P
   1d598:	73736572 61705320 42206563 6f207261     ress Space Bar o
   1d5a8:	57532072 7420342d 6572206f 656d7573     r SW-4 to resume
   1d5b8:	00000000 72540d0a 6d736e61 26207469     ......Transmit &
   1d5c8:	63655220 65766965 74695720 614c2068      Receive With La
   1d5d8:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   1d5e8:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   1d5f8:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   1d608:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   1d618:	6e617274 74696d73 20646574 65747865     transmitted exte
   1d628:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   1d638:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   1d648:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   1d658:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   1d668:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   1d678:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   1d688:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   1d698:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   1d6a8:	53207961 75746174 6e612073 6f432064     ay Status and Co
   1d6b8:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   1d6c8:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   1d6d8:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   1d6e8:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   1d6f8:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   1d708:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   1d718:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   1d728:	6552206c 74736967 0d737265 0000000a     l Registers.....
   1d738:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   1d748:	70732020 62656361 74207261 6f63206f       spacebar to co
   1d758:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   1d768:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   1d778:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   1d788:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   1d798:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   1d7a8:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   1d7b8:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1d7c8:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   1d7d8:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   1d7e8:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   1d7f8:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   1d808:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   1d818:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   1d828:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   1d838:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   1d848:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   1d858:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   1d868:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   1d878:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   1d888:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   1d898:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   1d8a8:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   1d8b8:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   1d8c8:	78450d0a 726f6c70 4d207265 0a65646f     ..Explorer Mode.
   1d8d8:	0000000d 6c200d0a 6c656261 61542073     ...... labels Ta
   1d8e8:	20656c62 45207369 6c62616e 00006465     ble is Enabled..
   1d8f8:	2d0a0d0a 42202d2d 6f747475 6f43206e     ...--- Button Co
   1d908:	6e616d6d 2d207364 00002d2d 20200d0a     mmands ---....  
   1d918:	63617073 72616265 206f7420 70736944     spacebar to Disp
   1d928:	2079616c 74617453 61207375 4320646e     lay Status and C
   1d938:	72746e6f 52206c6f 73696765 73726574     ontrol Registers
   1d948:	00000000 20200d0a 44454c4f 5455422d     ......  OLED-BUT
   1d958:	324e4f54 61727420 696d736e 6e6f2074     TON2 transmit on
   1d968:	656d2065 67617373 72662065 74206d6f     e message from t
   1d978:	736e6172 2074696d 66667562 00007265     ransmit buffer..
   1d988:	20200d0a 6f74204c 69725020 4c20746e     ..  L to Print L
   1d998:	6c656261 6d654d20 0a79726f 0000000d     abel Memory.....
   1d9a8:	72500d0a 20737365 45544e45 6f742052     ..Press ENTER to
   1d9b8:	61725420 696d736e 726f2074 65737520      Transmit or use
   1d9c8:	65687420 294d2820 6d6f6320 646e616d      the (M) command
   1d9d8:	206f7420 65746e65 20612072 74737563      to enter a cust
   1d9e8:	6d206d6f 61737365 00006567 73657250     om message..Pres
   1d9f8:	57532073 726f2034 61707320 61626563     s SW4 or spaceba
   1da08:	6f742072 6e6f6320 756e6974 00000065     r to continue...
   1da18:	73657250 70732073 62656361 74207261     Press spacebar t
   1da28:	6f63206f 6e69746e 00006575 433e0d0a     o continue....>C
   1da38:	616d6d6f 4d20646e 00000000 6e450d0a     ommand M......En
   1da48:	20726574 79622033 20736574 414c202b     ter 3 bytes + LA
   1da58:	204c4542 54206f74 736e6172 2074696d     BEL to Transmit 
   1da68:	6c6c6f66 6465776f 20796220 45544e45     followed by ENTE
   1da78:	000d0a52 6f540d0a 61725420 696d736e     R.....To Transmi
   1da88:	65202c74 7265746e 62203320 73657479     t, enter 3 bytes
   1da98:	6c6f6620 65776f6c 79622064 4c206120      followed by a L
   1daa8:	6c656261 74796220 6f662065 776f6c6c     abel byte follow
   1dab8:	62206465 4e452079 0a524554 0000000d     ed by ENTER.....
   1dac8:	6d726f46 203a7461 73746942 322d3233     Format: Bits32-2
   1dad8:	42202c35 32737469 37312d34 6942202c     5, Bits24-17, Bi
   1dae8:	36317374 202c392d 4542414c 3a0d0a4c     ts16-9, LABEL..:
   1daf8:	00000000 6d617845 3a656c70 20313020     ....Example: 01 
   1db08:	34203332 37362035 544e4520 0d0a5245     23 45 67 ENTER..
   1db18:	0000003a 65725020 52207373 52555445     :... Press RETUR
   1db28:	0000004e 61725420 696d736e 676e6974     N... Transmiting
   1db38:	002e2e2e 61725420 696d736e 21646574     .... Transmited!
   1db48:	00000000 6d6d6f43 20646e61 49203a49     ....Command I: I
   1db58:	6572636e 746e656d 74616420 3e0d0a61     ncrement data..>
   1db68:	00000000                                ....

0001db6c <_ZL12LabelArray_1>:
   1db6c:	c1215d1d 9616efdd 3f5f9f0d 0000ffbf     .]!......._?....
	...

0001db8c <maxEventCount>:
   1db8c:	00800008                                         ..

0001db8e <sizeOfEventQueue>:
   1db8e:	ffff0080                                         ..

0001db90 <forever>:
   1db90:	7fffffff                                ....

0001db94 <_ZTV14Calendar_Class>:
	...
   1db9c:	00013a19 00013a69                       .:..i:..

0001dba4 <_ZTV17DateTimeLog_Class>:
	...
   1dbac:	000131db 000131db                       .1...1..

0001dbb4 <_ZTV9CDC_Class>:
	...
   1dbbc:	00014655 00014735 000142a9 0001461d     UF..5G...B...F..
   1dbcc:	000147cd 000145e1 000144c5 00014515     .G...E...D...E..
   1dbdc:	0001463d 0001469d                       =F...F..

0001dbe4 <_ZTV6Stream>:
	...
   1dbec:	000131db 00014959 000142a9 000142bd     .1..YI...B...B..
   1dbfc:	000131db 000131db 000131db 2e257830     .1...1...1..0x%.
   1dc0c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1dc1c:	0066766f                                ovf.

0001dc20 <_ZTV5Print>:
	...
   1dc28:	000131db 00014959 000142a9 000142bd     .1..YI...B...B..

0001dc38 <_ZTV18Event_Logger_Class>:
	...
   1dc40:	00013a19 00013a69                       .:..i:..

0001dc48 <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1dc48:	00000100 00000000 00000000              ............

0001dc54 <_ZTT16Maintenance_Tool>:
   1dc54:	0001dc68 0001dc54                       h...T...

0001dc5c <_ZTV16Maintenance_Tool>:
   1dc5c:	00000100 00000000 00000000 73616c46     ............Flas
   1dc6c:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   1dc7c:	41502074 44455353 00000000 00000a0d     t PASSED........
   1dc8c:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   1dc9c:	73655466 41462074 44454c49 00000000     fTest FAILED....
   1dcac:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1dcbc:	00632e6f 2e2f2e2e 2e2e2f2e 554c412f     o.c.../../../ALU
   1dccc:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1dcdc:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   1dcec:	6f697067 7361625f 00682e65              gpio_base.h.

0001dcf8 <defaultParameters>:
   1dcf8:	00004020                                 @..

0001dcfc <defaultPreferences>:
   1dcfc:	000000fa 00000032 00776f70              ....2...pow.

0001dd08 <TWO52>:
   1dd08:	00000000 43300000 00000000 c3300000     ......0C......0.

0001dd18 <_global_impure_ptr>:
   1dd18:	200001f0                                ... 

0001dd1c <_init>:
   1dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd1e:	bf00      	nop
   1dd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1dd22:	bc08      	pop	{r3}
   1dd24:	469e      	mov	lr, r3
   1dd26:	4770      	bx	lr

0001dd28 <__init_array_start>:
   1dd28:	0001c8a1 	.word	0x0001c8a1

0001dd2c <__frame_dummy_init_array_entry>:
   1dd2c:	00000289 00000c45 00000ce9 00000f1d     ....E...........
   1dd3c:	000015d5 00001a01 00001f69 0000232d     ........i...-#..
   1dd4c:	0000248d 00003ddd 0000470d 00004a15     .$...=...G...J..
   1dd5c:	00011e41 000121b5 00012519 00012a8d     A....!...%...*..
   1dd6c:	00012f91 00013799 00013cb5 00014271     ./...7...<..qB..
   1dd7c:	00014909 00014e5d 00015101 00015489     .I..]N...Q...T..
   1dd8c:	000169e5 000170a5 00017515 0001791d     .i...p...u...y..
   1dd9c:	00017f69 000183cd 0001878d 00019851     i...........Q...
   1ddac:	00019b81 0001a439                       ....9...

0001ddb4 <_fini>:
   1ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddb6:	bf00      	nop
   1ddb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1ddba:	bc08      	pop	{r3}
   1ddbc:	469e      	mov	lr, r3
   1ddbe:	4770      	bx	lr

0001ddc0 <__fini_array_start>:
   1ddc0:	00000265 	.word	0x00000265
