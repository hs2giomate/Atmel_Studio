
Compresor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000153c0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000153c0  000153c0  000253c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a34  20000000  000153c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a34  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a34  2**0
                  CONTENTS
  5 .bss          00001cac  20000a34  00015dfc  00030a34  2**2
                  ALLOC
  6 .stack        00010000  200026e0  00017aa8  00030a34  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a34  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a62  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007de32  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a360  00000000  00000000  000ae8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001aa11  00000000  00000000  000b8c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003018  00000000  00000000  000d365e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c90  00000000  00000000  000d6676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ff41  00000000  00000000  000d9306  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003e721  00000000  00000000  00129247  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013ca7e  00000000  00000000  00167968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c8a4  00000000  00000000  002a43e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	e0 26 01 20 35 07 00 00 31 07 00 00 31 07 00 00     .&. 5...1...1...
{
} //CO_OD
      10:	31 07 00 00 31 07 00 00 31 07 00 00 00 00 00 00     1...1...1.......
	...
      2c:	31 07 00 00 31 07 00 00 00 00 00 00 31 07 00 00     1...1.......1...
      3c:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      4c:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      5c:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      6c:	65 c4 00 00 69 b2 00 00 79 b2 00 00 31 07 00 00     e...i...y...1...
      7c:	89 b2 00 00 99 b2 00 00 a9 b2 00 00 b9 b2 00 00     ................
      8c:	c9 b2 00 00 d9 b2 00 00 e9 b2 00 00 31 07 00 00     ............1...
      9c:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      ac:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      bc:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      cc:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
      dc:	31 07 00 00 31 07 00 00 31 07 00 00 00 00 00 00     1...1...1.......
	...
      f4:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     104:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     114:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     124:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     134:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     144:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     154:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     164:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     174:	31 07 00 00 31 07 00 00 85 a7 00 00 f1 12 01 00     1...1...........
     184:	01 13 01 00 11 13 01 00 21 13 01 00 31 07 00 00     ........!...1...
     194:	85 dd 00 00 31 07 00 00 31 07 00 00 31 07 00 00     ....1...1...1...
     1a4:	31 07 00 00 31 07 00 00 31 07 00 00 a1 dd 00 00     1...1...1.......
     1b4:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     1c4:	bd dd 00 00 31 07 00 00 31 07 00 00 31 07 00 00     ....1...1...1...
     1d4:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     1e4:	31 07 00 00 31 07 00 00 41 ea 00 00 31 07 00 00     1...1...A...1...
     1f4:	5d ea 00 00 31 07 00 00 79 ea 00 00 95 ea 00 00     ]...1...y.......
     204:	b1 ea 00 00 cd ea 00 00 31 07 00 00 31 07 00 00     ........1...1...
     214:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     224:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     234:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     244:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...
     254:	31 07 00 00 31 07 00 00 31 07 00 00 31 07 00 00     1...1...1...1...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a34 	.word	0x20000a34
     280:	00000000 	.word	0x00000000
     284:	000153c8 	.word	0x000153c8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000153c8 	.word	0x000153c8
     2c4:	20000a38 	.word	0x20000a38
     2c8:	000153c8 	.word	0x000153c8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN20Compresor_ControllerD1Ev>:
Compresor_Controller::Compresor_Controller()
{
} //Compresor_Controller

// default destructor
Compresor_Controller::~Compresor_Controller()
     2d0:	b510      	push	{r4, lr}
     2d2:	4604      	mov	r4, r0
     2d4:	4b04      	ldr	r3, [pc, #16]	; (2e8 <_ZN20Compresor_ControllerD1Ev+0x18>)
     2d6:	6003      	str	r3, [r0, #0]
     2d8:	4b04      	ldr	r3, [pc, #16]	; (2ec <_ZN20Compresor_ControllerD1Ev+0x1c>)
     2da:	4798      	blx	r3
     2dc:	f504 70b2 	add.w	r0, r4, #356	; 0x164
     2e0:	4b03      	ldr	r3, [pc, #12]	; (2f0 <_ZN20Compresor_ControllerD1Ev+0x20>)
     2e2:	4798      	blx	r3
{
} //~Compresor_Controller
     2e4:	4620      	mov	r0, r4
     2e6:	bd10      	pop	{r4, pc}
     2e8:	000142cc 	.word	0x000142cc
     2ec:	00000541 	.word	0x00000541
     2f0:	00000471 	.word	0x00000471

000002f4 <_ZN20Compresor_ControllerC1Ev>:
Compresor_Controller::Compresor_Controller()
     2f4:	b510      	push	{r4, lr}
     2f6:	4604      	mov	r4, r0
     2f8:	f500 70b2 	add.w	r0, r0, #356	; 0x164
     2fc:	4b04      	ldr	r3, [pc, #16]	; (310 <_ZN20Compresor_ControllerC1Ev+0x1c>)
     2fe:	4798      	blx	r3
     300:	4620      	mov	r0, r4
     302:	4b04      	ldr	r3, [pc, #16]	; (314 <_ZN20Compresor_ControllerC1Ev+0x20>)
     304:	4798      	blx	r3
     306:	4b04      	ldr	r3, [pc, #16]	; (318 <_ZN20Compresor_ControllerC1Ev+0x24>)
     308:	6023      	str	r3, [r4, #0]
} //Compresor_Controller
     30a:	4620      	mov	r0, r4
     30c:	bd10      	pop	{r4, pc}
     30e:	bf00      	nop
     310:	00000465 	.word	0x00000465
     314:	00000519 	.word	0x00000519
     318:	000142cc 	.word	0x000142cc

0000031c <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
     31c:	b510      	push	{r4, lr}
     31e:	4604      	mov	r4, r0
	isOK=InitExpander();
     320:	f500 70b2 	add.w	r0, r0, #356	; 0x164
     324:	4b09      	ldr	r3, [pc, #36]	; (34c <_ZN20Compresor_Controller4InitEv+0x30>)
     326:	4798      	blx	r3
     328:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	if (isOK)
     32c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
     330:	b913      	cbnz	r3, 338 <_ZN20Compresor_Controller4InitEv+0x1c>
		}
	} 
	else
	{
	}
	return isOK;
     332:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
}
     336:	bd10      	pop	{r4, pc}
		if (InitCANOpen())
     338:	4620      	mov	r0, r4
     33a:	4b05      	ldr	r3, [pc, #20]	; (350 <_ZN20Compresor_Controller4InitEv+0x34>)
     33c:	4798      	blx	r3
     33e:	2800      	cmp	r0, #0
     340:	d0f7      	beq.n	332 <_ZN20Compresor_Controller4InitEv+0x16>
			isOK=true;
     342:	2301      	movs	r3, #1
     344:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
     348:	e7f3      	b.n	332 <_ZN20Compresor_Controller4InitEv+0x16>
     34a:	bf00      	nop
     34c:	00000475 	.word	0x00000475
     350:	00000559 	.word	0x00000559

00000354 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
     354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     358:	4c30      	ldr	r4, [pc, #192]	; (41c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xc8>)
     35a:	4931      	ldr	r1, [pc, #196]	; (420 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xcc>)
     35c:	4620      	mov	r0, r4
     35e:	4b31      	ldr	r3, [pc, #196]	; (424 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xd0>)
     360:	4798      	blx	r3
     362:	4e31      	ldr	r6, [pc, #196]	; (428 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xd4>)
     364:	4632      	mov	r2, r6
     366:	4931      	ldr	r1, [pc, #196]	; (42c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xd8>)
     368:	4620      	mov	r0, r4
     36a:	4d31      	ldr	r5, [pc, #196]	; (430 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xdc>)
     36c:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     36e:	f104 0914 	add.w	r9, r4, #20
     372:	4930      	ldr	r1, [pc, #192]	; (434 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xe0>)
     374:	4648      	mov	r0, r9
     376:	4f30      	ldr	r7, [pc, #192]	; (438 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xe4>)
     378:	47b8      	blx	r7
     37a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 460 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10c>
     37e:	4632      	mov	r2, r6
     380:	4641      	mov	r1, r8
     382:	4648      	mov	r0, r9
     384:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     386:	f104 0934 	add.w	r9, r4, #52	; 0x34
     38a:	492c      	ldr	r1, [pc, #176]	; (43c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xe8>)
     38c:	4648      	mov	r0, r9
     38e:	47b8      	blx	r7
     390:	4632      	mov	r2, r6
     392:	4641      	mov	r1, r8
     394:	4648      	mov	r0, r9
     396:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     398:	f104 0954 	add.w	r9, r4, #84	; 0x54
     39c:	4928      	ldr	r1, [pc, #160]	; (440 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xec>)
     39e:	4648      	mov	r0, r9
     3a0:	47b8      	blx	r7
     3a2:	4632      	mov	r2, r6
     3a4:	4641      	mov	r1, r8
     3a6:	4648      	mov	r0, r9
     3a8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     3aa:	f104 0974 	add.w	r9, r4, #116	; 0x74
     3ae:	4925      	ldr	r1, [pc, #148]	; (444 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xf0>)
     3b0:	4648      	mov	r0, r9
     3b2:	47b8      	blx	r7
     3b4:	4632      	mov	r2, r6
     3b6:	4641      	mov	r1, r8
     3b8:	4648      	mov	r0, r9
     3ba:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     3bc:	f104 0994 	add.w	r9, r4, #148	; 0x94
     3c0:	4921      	ldr	r1, [pc, #132]	; (448 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xf4>)
     3c2:	4648      	mov	r0, r9
     3c4:	47b8      	blx	r7
     3c6:	4632      	mov	r2, r6
     3c8:	4641      	mov	r1, r8
     3ca:	4648      	mov	r0, r9
     3cc:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     3ce:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
     3d2:	491e      	ldr	r1, [pc, #120]	; (44c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xf8>)
     3d4:	4648      	mov	r0, r9
     3d6:	47b8      	blx	r7
     3d8:	4632      	mov	r2, r6
     3da:	4641      	mov	r1, r8
     3dc:	4648      	mov	r0, r9
     3de:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     3e0:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
     3e4:	491a      	ldr	r1, [pc, #104]	; (450 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0xfc>)
     3e6:	4648      	mov	r0, r9
     3e8:	47b8      	blx	r7
     3ea:	4632      	mov	r2, r6
     3ec:	4641      	mov	r1, r8
     3ee:	4648      	mov	r0, r9
     3f0:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     3f2:	f104 09f4 	add.w	r9, r4, #244	; 0xf4
     3f6:	4917      	ldr	r1, [pc, #92]	; (454 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x100>)
     3f8:	4648      	mov	r0, r9
     3fa:	47b8      	blx	r7
     3fc:	4632      	mov	r2, r6
     3fe:	4641      	mov	r1, r8
     400:	4648      	mov	r0, r9
     402:	47a8      	blx	r5
     404:	f504 748a 	add.w	r4, r4, #276	; 0x114
     408:	4620      	mov	r0, r4
     40a:	4b13      	ldr	r3, [pc, #76]	; (458 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x104>)
     40c:	4798      	blx	r3
     40e:	4632      	mov	r2, r6
     410:	4912      	ldr	r1, [pc, #72]	; (45c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x108>)
     412:	4620      	mov	r0, r4
     414:	47a8      	blx	r5
     416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     41a:	bf00      	nop
     41c:	20000a50 	.word	0x20000a50
     420:	20002558 	.word	0x20002558
     424:	0001378d 	.word	0x0001378d
     428:	20000000 	.word	0x20000000
     42c:	000137a9 	.word	0x000137a9
     430:	00013f51 	.word	0x00013f51
     434:	20002428 	.word	0x20002428
     438:	00013b05 	.word	0x00013b05
     43c:	200024bc 	.word	0x200024bc
     440:	200025e0 	.word	0x200025e0
     444:	200024dc 	.word	0x200024dc
     448:	200025a0 	.word	0x200025a0
     44c:	200025c0 	.word	0x200025c0
     450:	20002498 	.word	0x20002498
     454:	20002538 	.word	0x20002538
     458:	000002f5 	.word	0x000002f5
     45c:	000002d1 	.word	0x000002d1
     460:	00013b3d 	.word	0x00013b3d

00000464 <_ZN23Compresor_I2C_InterfaceC1Ev>:

static	MCP23008_Class expandersCompresorStatic;
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
{
	i2c=&i2cSharedStatic;
     464:	4b01      	ldr	r3, [pc, #4]	; (46c <_ZN23Compresor_I2C_InterfaceC1Ev+0x8>)
     466:	60c3      	str	r3, [r0, #12]
} //Compresor_I2C_Interface
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	20000cdc 	.word	0x20000cdc

00000470 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
{
} //~Compresor_I2C_Interface
     470:	4770      	bx	lr
	...

00000474 <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
     474:	b510      	push	{r4, lr}
     476:	4604      	mov	r4, r0
	if (i2c->i2c_initiated)
     478:	68c0      	ldr	r0, [r0, #12]
     47a:	7a03      	ldrb	r3, [r0, #8]
     47c:	b143      	cbz	r3, 490 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1c>
	else
	{
		
		i2c->Init();
	}
	if (i2c->isOK)
     47e:	68e2      	ldr	r2, [r4, #12]
     480:	7a53      	ldrb	r3, [r2, #9]
     482:	b943      	cbnz	r3, 496 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x22>
		expander->SetPortOutput();
		isOK=SelfTest();
	}
	else
	{
		asm("nop");
     484:	bf00      	nop
	}
	isOK=i2c->isOK;
     486:	68e3      	ldr	r3, [r4, #12]
     488:	7a58      	ldrb	r0, [r3, #9]
     48a:	b2c0      	uxtb	r0, r0
     48c:	7420      	strb	r0, [r4, #16]
		return isOK;
}
     48e:	bd10      	pop	{r4, pc}
		i2c->Init();
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x38>)
     492:	4798      	blx	r3
     494:	e7f3      	b.n	47e <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa>
		expander=&expandersCompresorStatic;
     496:	4806      	ldr	r0, [pc, #24]	; (4b0 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x3c>)
     498:	60a0      	str	r0, [r4, #8]
		expander->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
     49a:	2124      	movs	r1, #36	; 0x24
     49c:	4b05      	ldr	r3, [pc, #20]	; (4b4 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x40>)
     49e:	4798      	blx	r3
		expander->SetPortOutput();
     4a0:	68a0      	ldr	r0, [r4, #8]
     4a2:	4b05      	ldr	r3, [pc, #20]	; (4b8 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x44>)
     4a4:	4798      	blx	r3
		isOK=SelfTest();
     4a6:	2301      	movs	r3, #1
     4a8:	7423      	strb	r3, [r4, #16]
     4aa:	e7ec      	b.n	486 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x12>
     4ac:	000137bd 	.word	0x000137bd
     4b0:	20000cf0 	.word	0x20000cf0
     4b4:	000138d1 	.word	0x000138d1
     4b8:	00013a0d 	.word	0x00013a0d

000004bc <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
		
	}
	

	return result;
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	4c0a      	ldr	r4, [pc, #40]	; (4e8 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x2c>)
     4c0:	490a      	ldr	r1, [pc, #40]	; (4ec <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x30>)
     4c2:	4620      	mov	r0, r4
     4c4:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x34>)
     4c6:	4798      	blx	r3
     4c8:	4e0a      	ldr	r6, [pc, #40]	; (4f4 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x38>)
     4ca:	4632      	mov	r2, r6
     4cc:	490a      	ldr	r1, [pc, #40]	; (4f8 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x3c>)
     4ce:	4620      	mov	r0, r4
     4d0:	4d0a      	ldr	r5, [pc, #40]	; (4fc <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x40>)
     4d2:	47a8      	blx	r5
static	MCP23008_Class expandersCompresorStatic;
     4d4:	3414      	adds	r4, #20
     4d6:	4620      	mov	r0, r4
     4d8:	4b09      	ldr	r3, [pc, #36]	; (500 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x44>)
     4da:	4798      	blx	r3
     4dc:	4632      	mov	r2, r6
     4de:	4909      	ldr	r1, [pc, #36]	; (504 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x48>)
     4e0:	4620      	mov	r0, r4
     4e2:	47a8      	blx	r5
     4e4:	bd70      	pop	{r4, r5, r6, pc}
     4e6:	bf00      	nop
     4e8:	20000cdc 	.word	0x20000cdc
     4ec:	20002558 	.word	0x20002558
     4f0:	0001378d 	.word	0x0001378d
     4f4:	20000000 	.word	0x20000000
     4f8:	000137a9 	.word	0x000137a9
     4fc:	00013f51 	.word	0x00013f51
     500:	000138a9 	.word	0x000138a9
     504:	000138bd 	.word	0x000138bd

00000508 <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	CANOpen_Class canoStatic(&CAN_CCU);
static bool syncCANOpenTimeoutStatic=false;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
	syncCANOpenTimeoutStatic=true;
     508:	2201      	movs	r2, #1
     50a:	4b02      	ldr	r3, [pc, #8]	; (514 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0xc>)
     50c:	701a      	strb	r2, [r3, #0]
	asm("nop" );
     50e:	bf00      	nop
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	20000d0c 	.word	0x20000d0c

00000518 <_ZN28Compressor_CANOpen_InterfaceC1Ev>:
}

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
     518:	b510      	push	{r4, lr}
     51a:	4604      	mov	r4, r0
     51c:	4b05      	ldr	r3, [pc, #20]	; (534 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x1c>)
     51e:	4798      	blx	r3
     520:	4b05      	ldr	r3, [pc, #20]	; (538 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x20>)
     522:	6023      	str	r3, [r4, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     524:	4b05      	ldr	r3, [pc, #20]	; (53c <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x24>)
     526:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     52a:	2301      	movs	r3, #1
     52c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
} //Compressor_Can_Interface
     530:	4620      	mov	r0, r4
     532:	bd10      	pop	{r4, pc}
     534:	0000090d 	.word	0x0000090d
     538:	000142d8 	.word	0x000142d8
     53c:	20000d0c 	.word	0x20000d0c

00000540 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
     540:	b510      	push	{r4, lr}
     542:	4604      	mov	r4, r0
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x10>)
     546:	6003      	str	r3, [r0, #0]
     548:	4b02      	ldr	r3, [pc, #8]	; (554 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x14>)
     54a:	4798      	blx	r3
{
} //~Compressor_Can_Interface
     54c:	4620      	mov	r0, r4
     54e:	bd10      	pop	{r4, pc}
     550:	000142d8 	.word	0x000142d8
     554:	0000097d 	.word	0x0000097d

00000558 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
     558:	b510      	push	{r4, lr}
     55a:	4604      	mov	r4, r0
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     55c:	480f      	ldr	r0, [pc, #60]	; (59c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x44>)
     55e:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     562:	2101      	movs	r1, #1
     564:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
	cano=&canoStatic;
     568:	3004      	adds	r0, #4
     56a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	int_result=cano->Init(NMT_MASTER_NODE);
     56e:	4b0c      	ldr	r3, [pc, #48]	; (5a0 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x48>)
     570:	4798      	blx	r3
     572:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
	if (int_result==0)
     576:	b140      	cbz	r0, 58a <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x32>
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     57c:	4909      	ldr	r1, [pc, #36]	; (5a4 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x4c>)
     57e:	480a      	ldr	r0, [pc, #40]	; (5a8 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x50>)
     580:	4b0a      	ldr	r3, [pc, #40]	; (5ac <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x54>)
     582:	4798      	blx	r3
	
	return boolResult;
	
}
     584:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
     588:	bd10      	pop	{r4, pc}
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
     58a:	2102      	movs	r1, #2
     58c:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
     590:	4b07      	ldr	r3, [pc, #28]	; (5b0 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x58>)
     592:	4798      	blx	r3
     594:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
     598:	e7ee      	b.n	578 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x20>
     59a:	bf00      	nop
     59c:	20000d0c 	.word	0x20000d0c
     5a0:	000009a5 	.word	0x000009a5
     5a4:	00000509 	.word	0x00000509
     5a8:	20000e5c 	.word	0x20000e5c
     5ac:	00013c05 	.word	0x00013c05
     5b0:	00000a59 	.word	0x00000a59

000005b4 <_ZN28Compressor_CANOpen_Interface18Comporesor_ProcessEv>:

int	Compressor_CANOpen_Interface::Comporesor_Process(void){
     5b4:	b508      	push	{r3, lr}
		CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
// 
// 		if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
// 		NMTisPreOrOperational = true;

		reset = Process(1000);
     5b6:	2200      	movs	r2, #0
     5b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     5bc:	4b01      	ldr	r3, [pc, #4]	; (5c4 <_ZN28Compressor_CANOpen_Interface18Comporesor_ProcessEv+0x10>)
     5be:	4798      	blx	r3

	

		return (int)reset;
}
     5c0:	bd08      	pop	{r3, pc}
     5c2:	bf00      	nop
     5c4:	000013a9 	.word	0x000013a9

000005c8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:

void Compressor_CANOpen_Interface::Periodic_Task(void){
	
	if (syncCANOpenTimeoutStatic)
     5c8:	4b14      	ldr	r3, [pc, #80]	; (61c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x54>)
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	b903      	cbnz	r3, 5d0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x8>
     5ce:	4770      	bx	lr
void Compressor_CANOpen_Interface::Periodic_Task(void){
     5d0:	b510      	push	{r4, lr}
     5d2:	4604      	mov	r4, r0
	{
		Comporesor_Process();
     5d4:	4b12      	ldr	r3, [pc, #72]	; (620 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x58>)
     5d6:	4798      	blx	r3
		if (ptrCO->CANmodule[0]->CANnormal)
     5d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	7d1b      	ldrb	r3, [r3, #20]
     5e0:	b953      	cbnz	r3, 5f8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x30>
				CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
     5e2:	480e      	ldr	r0, [pc, #56]	; (61c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x54>)
     5e4:	2300      	movs	r3, #0
     5e6:	7003      	strb	r3, [r0, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     5e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     5ec:	490d      	ldr	r1, [pc, #52]	; (624 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x5c>)
     5ee:	f500 70a8 	add.w	r0, r0, #336	; 0x150
     5f2:	4b0d      	ldr	r3, [pc, #52]	; (628 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x60>)
     5f4:	4798      	blx	r3
     5f6:	bd10      	pop	{r4, pc}
				syncWas=CO_process_SYNC_RPDO(timeDifference_ms);
     5f8:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
     5fc:	4620      	mov	r0, r4
     5fe:	4b0b      	ldr	r3, [pc, #44]	; (62c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x64>)
     600:	4798      	blx	r3
     602:	4601      	mov	r1, r0
     604:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
				CO_process_TPDO(syncWas,timeDifference_ms);
     608:	f8d4 215c 	ldr.w	r2, [r4, #348]	; 0x15c
     60c:	4620      	mov	r0, r4
     60e:	4b08      	ldr	r3, [pc, #32]	; (630 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x68>)
     610:	4798      	blx	r3
				CAN_Polling_Tx();
     612:	4620      	mov	r0, r4
     614:	4b07      	ldr	r3, [pc, #28]	; (634 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x6c>)
     616:	4798      	blx	r3
     618:	e7e3      	b.n	5e2 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x1a>
     61a:	bf00      	nop
     61c:	20000d0c 	.word	0x20000d0c
     620:	000005b5 	.word	0x000005b5
     624:	00000509 	.word	0x00000509
     628:	00013c05 	.word	0x00013c05
     62c:	00001495 	.word	0x00001495
     630:	00001519 	.word	0x00001519
     634:	0000201d 	.word	0x0000201d

00000638 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
	} 
	else
	{
	}

}
     638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     63c:	4c2c      	ldr	r4, [pc, #176]	; (6f0 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xb8>)
     63e:	f504 75b8 	add.w	r5, r4, #368	; 0x170
     642:	492c      	ldr	r1, [pc, #176]	; (6f4 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xbc>)
     644:	4628      	mov	r0, r5
     646:	4f2c      	ldr	r7, [pc, #176]	; (6f8 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xc0>)
     648:	47b8      	blx	r7
     64a:	4e2c      	ldr	r6, [pc, #176]	; (6fc <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xc4>)
     64c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 72c <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xf4>
     650:	4632      	mov	r2, r6
     652:	4641      	mov	r1, r8
     654:	4628      	mov	r0, r5
     656:	4d2a      	ldr	r5, [pc, #168]	; (700 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xc8>)
     658:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     65a:	f504 79c8 	add.w	r9, r4, #400	; 0x190
     65e:	4929      	ldr	r1, [pc, #164]	; (704 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xcc>)
     660:	4648      	mov	r0, r9
     662:	47b8      	blx	r7
     664:	4632      	mov	r2, r6
     666:	4641      	mov	r1, r8
     668:	4648      	mov	r0, r9
     66a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     66c:	f504 79d8 	add.w	r9, r4, #432	; 0x1b0
     670:	4925      	ldr	r1, [pc, #148]	; (708 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xd0>)
     672:	4648      	mov	r0, r9
     674:	47b8      	blx	r7
     676:	4632      	mov	r2, r6
     678:	4641      	mov	r1, r8
     67a:	4648      	mov	r0, r9
     67c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     67e:	f504 79e8 	add.w	r9, r4, #464	; 0x1d0
     682:	4922      	ldr	r1, [pc, #136]	; (70c <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xd4>)
     684:	4648      	mov	r0, r9
     686:	47b8      	blx	r7
     688:	4632      	mov	r2, r6
     68a:	4641      	mov	r1, r8
     68c:	4648      	mov	r0, r9
     68e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     690:	f504 79f8 	add.w	r9, r4, #496	; 0x1f0
     694:	491e      	ldr	r1, [pc, #120]	; (710 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xd8>)
     696:	4648      	mov	r0, r9
     698:	47b8      	blx	r7
     69a:	4632      	mov	r2, r6
     69c:	4641      	mov	r1, r8
     69e:	4648      	mov	r0, r9
     6a0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     6a2:	f504 7904 	add.w	r9, r4, #528	; 0x210
     6a6:	491b      	ldr	r1, [pc, #108]	; (714 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xdc>)
     6a8:	4648      	mov	r0, r9
     6aa:	47b8      	blx	r7
     6ac:	4632      	mov	r2, r6
     6ae:	4641      	mov	r1, r8
     6b0:	4648      	mov	r0, r9
     6b2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     6b4:	f504 790c 	add.w	r9, r4, #560	; 0x230
     6b8:	4917      	ldr	r1, [pc, #92]	; (718 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xe0>)
     6ba:	4648      	mov	r0, r9
     6bc:	47b8      	blx	r7
     6be:	4632      	mov	r2, r6
     6c0:	4641      	mov	r1, r8
     6c2:	4648      	mov	r0, r9
     6c4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     6c6:	f504 79a8 	add.w	r9, r4, #336	; 0x150
     6ca:	4914      	ldr	r1, [pc, #80]	; (71c <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xe4>)
     6cc:	4648      	mov	r0, r9
     6ce:	47b8      	blx	r7
     6d0:	4632      	mov	r2, r6
     6d2:	4641      	mov	r1, r8
     6d4:	4648      	mov	r0, r9
     6d6:	47a8      	blx	r5
static	CANOpen_Class canoStatic(&CAN_CCU);
     6d8:	3404      	adds	r4, #4
     6da:	4911      	ldr	r1, [pc, #68]	; (720 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xe8>)
     6dc:	4620      	mov	r0, r4
     6de:	4b11      	ldr	r3, [pc, #68]	; (724 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xec>)
     6e0:	4798      	blx	r3
     6e2:	4632      	mov	r2, r6
     6e4:	4910      	ldr	r1, [pc, #64]	; (728 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0xf0>)
     6e6:	4620      	mov	r0, r4
     6e8:	47a8      	blx	r5
     6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     6ee:	bf00      	nop
     6f0:	20000d0c 	.word	0x20000d0c
     6f4:	20002428 	.word	0x20002428
     6f8:	00013b05 	.word	0x00013b05
     6fc:	20000000 	.word	0x20000000
     700:	00013f51 	.word	0x00013f51
     704:	200024bc 	.word	0x200024bc
     708:	200025e0 	.word	0x200025e0
     70c:	200024dc 	.word	0x200024dc
     710:	200025a0 	.word	0x200025a0
     714:	200025c0 	.word	0x200025c0
     718:	20002498 	.word	0x20002498
     71c:	20002538 	.word	0x20002538
     720:	20002578 	.word	0x20002578
     724:	00000941 	.word	0x00000941
     728:	0000097d 	.word	0x0000097d
     72c:	00013b3d 	.word	0x00013b3d

00000730 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     730:	e7fe      	b.n	730 <Dummy_Handler>
	...

00000734 <Reset_Handler>:
{
     734:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     736:	4b17      	ldr	r3, [pc, #92]	; (794 <Reset_Handler+0x60>)
     738:	4a17      	ldr	r2, [pc, #92]	; (798 <Reset_Handler+0x64>)
     73a:	429a      	cmp	r2, r3
     73c:	d010      	beq.n	760 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     73e:	4b17      	ldr	r3, [pc, #92]	; (79c <Reset_Handler+0x68>)
     740:	4a14      	ldr	r2, [pc, #80]	; (794 <Reset_Handler+0x60>)
     742:	429a      	cmp	r2, r3
     744:	d20c      	bcs.n	760 <Reset_Handler+0x2c>
     746:	3b01      	subs	r3, #1
     748:	1a9b      	subs	r3, r3, r2
     74a:	f023 0303 	bic.w	r3, r3, #3
     74e:	3304      	adds	r3, #4
     750:	4413      	add	r3, r2
     752:	4911      	ldr	r1, [pc, #68]	; (798 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     754:	f851 0b04 	ldr.w	r0, [r1], #4
     758:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     75c:	429a      	cmp	r2, r3
     75e:	d1f9      	bne.n	754 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     760:	4b0f      	ldr	r3, [pc, #60]	; (7a0 <Reset_Handler+0x6c>)
     762:	4a10      	ldr	r2, [pc, #64]	; (7a4 <Reset_Handler+0x70>)
     764:	429a      	cmp	r2, r3
     766:	d20a      	bcs.n	77e <Reset_Handler+0x4a>
     768:	3b01      	subs	r3, #1
     76a:	1a9b      	subs	r3, r3, r2
     76c:	f023 0303 	bic.w	r3, r3, #3
     770:	3304      	adds	r3, #4
     772:	4413      	add	r3, r2
                *pDest++ = 0;
     774:	2100      	movs	r1, #0
     776:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     77a:	4293      	cmp	r3, r2
     77c:	d1fb      	bne.n	776 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     77e:	4a0a      	ldr	r2, [pc, #40]	; (7a8 <Reset_Handler+0x74>)
     780:	4b0a      	ldr	r3, [pc, #40]	; (7ac <Reset_Handler+0x78>)
     782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     786:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     788:	4b09      	ldr	r3, [pc, #36]	; (7b0 <Reset_Handler+0x7c>)
     78a:	4798      	blx	r3
        main();
     78c:	4b09      	ldr	r3, [pc, #36]	; (7b4 <Reset_Handler+0x80>)
     78e:	4798      	blx	r3
     790:	e7fe      	b.n	790 <Reset_Handler+0x5c>
     792:	bf00      	nop
     794:	20000000 	.word	0x20000000
     798:	000153c8 	.word	0x000153c8
     79c:	20000a34 	.word	0x20000a34
     7a0:	200026e0 	.word	0x200026e0
     7a4:	20000a34 	.word	0x20000a34
     7a8:	e000ed00 	.word	0xe000ed00
     7ac:	00000000 	.word	0x00000000
     7b0:	00013f85 	.word	0x00013f85
     7b4:	000007b9 	.word	0x000007b9

000007b8 <main>:
#include "Compresor_Controller.h"



int main(void)
{
     7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	atmel_start_init();
     7bc:	4b0e      	ldr	r3, [pc, #56]	; (7f8 <main+0x40>)
     7be:	4798      	blx	r3
	
	ccu.Init();
     7c0:	480e      	ldr	r0, [pc, #56]	; (7fc <main+0x44>)
     7c2:	4b0f      	ldr	r3, [pc, #60]	; (800 <main+0x48>)
     7c4:	4798      	blx	r3
     7c6:	2400      	movs	r4, #0
	uint8_t i = 0;
	/* Replace with your application code */
	while (1)
	{
		if (ccu.IsSlaveOpeational())
     7c8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 814 <main+0x5c>
     7cc:	4f0d      	ldr	r7, [pc, #52]	; (804 <main+0x4c>)
		{
			ccu.Periodic_Task();
     7ce:	f1a8 060c 	sub.w	r6, r8, #12
     7d2:	e008      	b.n	7e6 <main+0x2e>
		{
			
			
				
		}
		ccu.expander->WriteGPIORegister(i);
     7d4:	4629      	mov	r1, r5
     7d6:	f8d6 016c 	ldr.w	r0, [r6, #364]	; 0x16c
     7da:	4b0b      	ldr	r3, [pc, #44]	; (808 <main+0x50>)
     7dc:	4798      	blx	r3
		delay_ms(10);
     7de:	200a      	movs	r0, #10
     7e0:	4b0a      	ldr	r3, [pc, #40]	; (80c <main+0x54>)
     7e2:	4798      	blx	r3
     7e4:	3401      	adds	r4, #1
     7e6:	b2e5      	uxtb	r5, r4
		if (ccu.IsSlaveOpeational())
     7e8:	4640      	mov	r0, r8
     7ea:	47b8      	blx	r7
     7ec:	2800      	cmp	r0, #0
     7ee:	d0f1      	beq.n	7d4 <main+0x1c>
			ccu.Periodic_Task();
     7f0:	4630      	mov	r0, r6
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <main+0x58>)
     7f4:	4798      	blx	r3
     7f6:	e7ed      	b.n	7d4 <main+0x1c>
     7f8:	00006d25 	.word	0x00006d25
     7fc:	20000b64 	.word	0x20000b64
     800:	0000031d 	.word	0x0000031d
     804:	00002cad 	.word	0x00002cad
     808:	000139d1 	.word	0x000139d1
     80c:	0000868d 	.word	0x0000868d
     810:	000005c9 	.word	0x000005c9
     814:	20000b70 	.word	0x20000b70

00000818 <_GLOBAL__sub_I_main>:
// 		cano.Process();
// 		delay_ms(1);
		// 		cano.Periodic_Process();
		//  		delay_ms(1);
	}
     818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     81c:	4c2b      	ldr	r4, [pc, #172]	; (8cc <_GLOBAL__sub_I_main+0xb4>)
     81e:	492c      	ldr	r1, [pc, #176]	; (8d0 <_GLOBAL__sub_I_main+0xb8>)
     820:	4620      	mov	r0, r4
     822:	4b2c      	ldr	r3, [pc, #176]	; (8d4 <_GLOBAL__sub_I_main+0xbc>)
     824:	4798      	blx	r3
     826:	4e2c      	ldr	r6, [pc, #176]	; (8d8 <_GLOBAL__sub_I_main+0xc0>)
     828:	4632      	mov	r2, r6
     82a:	492c      	ldr	r1, [pc, #176]	; (8dc <_GLOBAL__sub_I_main+0xc4>)
     82c:	4620      	mov	r0, r4
     82e:	4d2c      	ldr	r5, [pc, #176]	; (8e0 <_GLOBAL__sub_I_main+0xc8>)
     830:	47a8      	blx	r5
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     832:	f104 0914 	add.w	r9, r4, #20
     836:	492b      	ldr	r1, [pc, #172]	; (8e4 <_GLOBAL__sub_I_main+0xcc>)
     838:	4648      	mov	r0, r9
     83a:	4f2b      	ldr	r7, [pc, #172]	; (8e8 <_GLOBAL__sub_I_main+0xd0>)
     83c:	47b8      	blx	r7
     83e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 908 <_GLOBAL__sub_I_main+0xf0>
     842:	4632      	mov	r2, r6
     844:	4641      	mov	r1, r8
     846:	4648      	mov	r0, r9
     848:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     84a:	f104 0934 	add.w	r9, r4, #52	; 0x34
     84e:	4927      	ldr	r1, [pc, #156]	; (8ec <_GLOBAL__sub_I_main+0xd4>)
     850:	4648      	mov	r0, r9
     852:	47b8      	blx	r7
     854:	4632      	mov	r2, r6
     856:	4641      	mov	r1, r8
     858:	4648      	mov	r0, r9
     85a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     85c:	f104 0954 	add.w	r9, r4, #84	; 0x54
     860:	4923      	ldr	r1, [pc, #140]	; (8f0 <_GLOBAL__sub_I_main+0xd8>)
     862:	4648      	mov	r0, r9
     864:	47b8      	blx	r7
     866:	4632      	mov	r2, r6
     868:	4641      	mov	r1, r8
     86a:	4648      	mov	r0, r9
     86c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     86e:	f104 0974 	add.w	r9, r4, #116	; 0x74
     872:	4920      	ldr	r1, [pc, #128]	; (8f4 <_GLOBAL__sub_I_main+0xdc>)
     874:	4648      	mov	r0, r9
     876:	47b8      	blx	r7
     878:	4632      	mov	r2, r6
     87a:	4641      	mov	r1, r8
     87c:	4648      	mov	r0, r9
     87e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     880:	f104 0994 	add.w	r9, r4, #148	; 0x94
     884:	491c      	ldr	r1, [pc, #112]	; (8f8 <_GLOBAL__sub_I_main+0xe0>)
     886:	4648      	mov	r0, r9
     888:	47b8      	blx	r7
     88a:	4632      	mov	r2, r6
     88c:	4641      	mov	r1, r8
     88e:	4648      	mov	r0, r9
     890:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     892:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
     896:	4919      	ldr	r1, [pc, #100]	; (8fc <_GLOBAL__sub_I_main+0xe4>)
     898:	4648      	mov	r0, r9
     89a:	47b8      	blx	r7
     89c:	4632      	mov	r2, r6
     89e:	4641      	mov	r1, r8
     8a0:	4648      	mov	r0, r9
     8a2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     8a4:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
     8a8:	4915      	ldr	r1, [pc, #84]	; (900 <_GLOBAL__sub_I_main+0xe8>)
     8aa:	4648      	mov	r0, r9
     8ac:	47b8      	blx	r7
     8ae:	4632      	mov	r2, r6
     8b0:	4641      	mov	r1, r8
     8b2:	4648      	mov	r0, r9
     8b4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     8b6:	34f4      	adds	r4, #244	; 0xf4
     8b8:	4912      	ldr	r1, [pc, #72]	; (904 <_GLOBAL__sub_I_main+0xec>)
     8ba:	4620      	mov	r0, r4
     8bc:	47b8      	blx	r7
     8be:	4632      	mov	r2, r6
     8c0:	4641      	mov	r1, r8
     8c2:	4620      	mov	r0, r4
     8c4:	47a8      	blx	r5
     8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     8ca:	bf00      	nop
     8cc:	20000f5c 	.word	0x20000f5c
     8d0:	20002558 	.word	0x20002558
     8d4:	0001378d 	.word	0x0001378d
     8d8:	20000000 	.word	0x20000000
     8dc:	000137a9 	.word	0x000137a9
     8e0:	00013f51 	.word	0x00013f51
     8e4:	20002428 	.word	0x20002428
     8e8:	00013b05 	.word	0x00013b05
     8ec:	200024bc 	.word	0x200024bc
     8f0:	200025e0 	.word	0x200025e0
     8f4:	200024dc 	.word	0x200024dc
     8f8:	200025a0 	.word	0x200025a0
     8fc:	200025c0 	.word	0x200025c0
     900:	20002498 	.word	0x20002498
     904:	20002538 	.word	0x20002538
     908:	00013b3d 	.word	0x00013b3d

0000090c <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
     90c:	b580      	push	{r7, lr}
     90e:	b082      	sub	sp, #8
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	687b      	ldr	r3, [r7, #4]
     916:	4618      	mov	r0, r3
     918:	4b06      	ldr	r3, [pc, #24]	; (934 <_ZN13CANOpen_ClassC1Ev+0x28>)
     91a:	4798      	blx	r3
     91c:	4a06      	ldr	r2, [pc, #24]	; (938 <_ZN13CANOpen_ClassC1Ev+0x2c>)
     91e:	687b      	ldr	r3, [r7, #4]
     920:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     922:	4a06      	ldr	r2, [pc, #24]	; (93c <_ZN13CANOpen_ClassC1Ev+0x30>)
     924:	687b      	ldr	r3, [r7, #4]
     926:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
     928:	687b      	ldr	r3, [r7, #4]
     92a:	4618      	mov	r0, r3
     92c:	3708      	adds	r7, #8
     92e:	46bd      	mov	sp, r7
     930:	bd80      	pop	{r7, pc}
     932:	bf00      	nop
     934:	00000ab1 	.word	0x00000ab1
     938:	000142e4 	.word	0x000142e4
     93c:	20001070 	.word	0x20001070

00000940 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
     940:	b580      	push	{r7, lr}
     942:	b082      	sub	sp, #8
     944:	af00      	add	r7, sp, #0
     946:	6078      	str	r0, [r7, #4]
     948:	6039      	str	r1, [r7, #0]
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	4618      	mov	r0, r3
     94e:	4b08      	ldr	r3, [pc, #32]	; (970 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
     950:	4798      	blx	r3
     952:	4a08      	ldr	r2, [pc, #32]	; (974 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
     954:	687b      	ldr	r3, [r7, #4]
     956:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     958:	4a07      	ldr	r2, [pc, #28]	; (978 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	6013      	str	r3, [r2, #0]
	canDescr=descr;
     95e:	687b      	ldr	r3, [r7, #4]
     960:	683a      	ldr	r2, [r7, #0]
     962:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
} //CANOpen_Class
     966:	687b      	ldr	r3, [r7, #4]
     968:	4618      	mov	r0, r3
     96a:	3708      	adds	r7, #8
     96c:	46bd      	mov	sp, r7
     96e:	bd80      	pop	{r7, pc}
     970:	00000ab1 	.word	0x00000ab1
     974:	000142e4 	.word	0x000142e4
     978:	20001070 	.word	0x20001070

0000097c <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
     97c:	b580      	push	{r7, lr}
     97e:	b082      	sub	sp, #8
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
     984:	4a05      	ldr	r2, [pc, #20]	; (99c <_ZN13CANOpen_ClassD1Ev+0x20>)
     986:	687b      	ldr	r3, [r7, #4]
     988:	601a      	str	r2, [r3, #0]
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	4618      	mov	r0, r3
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <_ZN13CANOpen_ClassD1Ev+0x24>)
     990:	4798      	blx	r3
{
} //~CANOpen_Class
     992:	687b      	ldr	r3, [r7, #4]
     994:	4618      	mov	r0, r3
     996:	3708      	adds	r7, #8
     998:	46bd      	mov	sp, r7
     99a:	bd80      	pop	{r7, pc}
     99c:	000142e4 	.word	0x000142e4
     9a0:	00000af9 	.word	0x00000af9

000009a4 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
     9a4:	b590      	push	{r4, r7, lr}
     9a6:	b083      	sub	sp, #12
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
     9ac:	460b      	mov	r3, r1
     9ae:	70fb      	strb	r3, [r7, #3]
	coNode=node;
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	78fa      	ldrb	r2, [r7, #3]
     9b4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
     9c0:	78fa      	ldrb	r2, [r7, #3]
     9c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     9c6:	4c14      	ldr	r4, [pc, #80]	; (a18 <_ZN13CANOpen_Class4InitEh+0x74>)
     9c8:	47a0      	blx	r4
     9ca:	4603      	mov	r3, r0
     9cc:	461a      	mov	r2, r3
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	
	if (err==0)
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	f993 3149 	ldrsb.w	r3, [r3, #329]	; 0x149
     9da:	2b00      	cmp	r3, #0
     9dc:	d111      	bne.n	a02 <_ZN13CANOpen_Class4InitEh+0x5e>
	{
	
		err=(CO_ReturnError_t)SetInitialMode();
     9de:	6878      	ldr	r0, [r7, #4]
     9e0:	4b0e      	ldr	r3, [pc, #56]	; (a1c <_ZN13CANOpen_Class4InitEh+0x78>)
     9e2:	4798      	blx	r3
     9e4:	4603      	mov	r3, r0
     9e6:	b25a      	sxtb	r2, r3
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
		if (node==1)
     9ee:	78fb      	ldrb	r3, [r7, #3]
     9f0:	2b01      	cmp	r3, #1
     9f2:	d10a      	bne.n	a0a <_ZN13CANOpen_Class4InitEh+0x66>
		{
			CO_sendNMTcommand(1,0);
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	2200      	movs	r2, #0
     9f8:	2101      	movs	r1, #1
     9fa:	4618      	mov	r0, r3
     9fc:	4b08      	ldr	r3, [pc, #32]	; (a20 <_ZN13CANOpen_Class4InitEh+0x7c>)
     9fe:	4798      	blx	r3
     a00:	e003      	b.n	a0a <_ZN13CANOpen_Class4InitEh+0x66>
		}
			

		
	}else{
		return	(int)err;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	f993 3149 	ldrsb.w	r3, [r3, #329]	; 0x149
     a08:	e002      	b.n	a10 <_ZN13CANOpen_Class4InitEh+0x6c>
	}
	return	(int)err;
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	f993 3149 	ldrsb.w	r3, [r3, #329]	; 0x149
}
     a10:	4618      	mov	r0, r3
     a12:	370c      	adds	r7, #12
     a14:	46bd      	mov	sp, r7
     a16:	bd90      	pop	{r4, r7, pc}
     a18:	00000bf9 	.word	0x00000bf9
     a1c:	00000a25 	.word	0x00000a25
     a20:	00000b21 	.word	0x00000b21

00000a24 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
     a24:	b580      	push	{r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	4618      	mov	r0, r3
     a30:	4b08      	ldr	r3, [pc, #32]	; (a54 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
     a32:	4798      	blx	r3
     a34:	4603      	mov	r3, r0
     a36:	461a      	mov	r2, r3
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	2200      	movs	r2, #0
     a42:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	return	(int)err;
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	f993 3149 	ldrsb.w	r3, [r3, #329]	; 0x149
}
     a4c:	4618      	mov	r0, r3
     a4e:	3708      	adds	r7, #8
     a50:	46bd      	mov	sp, r7
     a52:	bd80      	pop	{r7, pc}
     a54:	000017e9 	.word	0x000017e9

00000a58 <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
     a58:	b580      	push	{r7, lr}
     a5a:	b084      	sub	sp, #16
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
     a60:	460b      	mov	r3, r1
     a62:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
     a64:	2300      	movs	r3, #0
     a66:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	78fa      	ldrb	r2, [r7, #3]
     a6c:	2101      	movs	r1, #1
     a6e:	4618      	mov	r0, r3
     a70:	4b0d      	ldr	r3, [pc, #52]	; (aa8 <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
     a72:	4798      	blx	r3
		delay_ms(100);
     a74:	2064      	movs	r0, #100	; 0x64
     a76:	4b0d      	ldr	r3, [pc, #52]	; (aac <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
     a78:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
     a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     a82:	689a      	ldr	r2, [r3, #8]
     a84:	78fb      	ldrb	r3, [r7, #3]
     a86:	011b      	lsls	r3, r3, #4
     a88:	4413      	add	r3, r2
     a8a:	781b      	ldrb	r3, [r3, #0]
     a8c:	2b05      	cmp	r3, #5
     a8e:	bf0c      	ite	eq
     a90:	2301      	moveq	r3, #1
     a92:	2300      	movne	r3, #0
     a94:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	7bfa      	ldrb	r2, [r7, #15]
     a9a:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
//	}
	return	localOperational;
     a9e:	7bfb      	ldrb	r3, [r7, #15]
}
     aa0:	4618      	mov	r0, r3
     aa2:	3710      	adds	r7, #16
     aa4:	46bd      	mov	sp, r7
     aa6:	bd80      	pop	{r7, pc}
     aa8:	00000b21 	.word	0x00000b21
     aac:	0000868d 	.word	0x0000868d

00000ab0 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
     ab0:	b580      	push	{r7, lr}
     ab2:	b082      	sub	sp, #8
     ab4:	af00      	add	r7, sp, #0
     ab6:	6078      	str	r0, [r7, #4]
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	4618      	mov	r0, r3
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <_ZN8CO_ClassC1Ev+0x3c>)
     abe:	4798      	blx	r3
     ac0:	4a0b      	ldr	r2, [pc, #44]	; (af0 <_ZN8CO_ClassC1Ev+0x40>)
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
     ac6:	4b0b      	ldr	r3, [pc, #44]	; (af4 <_ZN8CO_ClassC1Ev+0x44>)
     ac8:	681a      	ldr	r2, [r3, #0]
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	coCanDescr=NULL;
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	2200      	movs	r2, #0
     ad4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	CO_memoryUsed=sizeof(COO);
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	223c      	movs	r2, #60	; 0x3c
     adc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
} //CO_Class
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	4618      	mov	r0, r3
     ae4:	3708      	adds	r7, #8
     ae6:	46bd      	mov	sp, r7
     ae8:	bd80      	pop	{r7, pc}
     aea:	bf00      	nop
     aec:	00001679 	.word	0x00001679
     af0:	000142f0 	.word	0x000142f0
     af4:	200010b0 	.word	0x200010b0

00000af8 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
     af8:	b580      	push	{r7, lr}
     afa:	b082      	sub	sp, #8
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
     b00:	4a05      	ldr	r2, [pc, #20]	; (b18 <_ZN8CO_ClassD1Ev+0x20>)
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	601a      	str	r2, [r3, #0]
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	4618      	mov	r0, r3
     b0a:	4b04      	ldr	r3, [pc, #16]	; (b1c <_ZN8CO_ClassD1Ev+0x24>)
     b0c:	4798      	blx	r3
{
} //~CO_Class
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	4618      	mov	r0, r3
     b12:	3708      	adds	r7, #8
     b14:	46bd      	mov	sp, r7
     b16:	bd80      	pop	{r7, pc}
     b18:	000142f0 	.word	0x000142f0
     b1c:	000016e1 	.word	0x000016e1

00000b20 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
     b28:	460b      	mov	r3, r1
     b2a:	70fb      	strb	r3, [r7, #3]
     b2c:	4613      	mov	r3, r2
     b2e:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
     b36:	2b00      	cmp	r3, #0
     b38:	d101      	bne.n	b3e <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
     b3a:	23f5      	movs	r3, #245	; 0xf5
     b3c:	e053      	b.n	be6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
     b44:	78fa      	ldrb	r2, [r7, #3]
     b46:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
     b4e:	78ba      	ldrb	r2, [r7, #2]
     b50:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
     b52:	78bb      	ldrb	r3, [r7, #2]
     b54:	2b00      	cmp	r3, #0
     b56:	d006      	beq.n	b66 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
     b58:	4b25      	ldr	r3, [pc, #148]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	691b      	ldr	r3, [r3, #16]
     b5e:	7a9b      	ldrb	r3, [r3, #10]
     b60:	78ba      	ldrb	r2, [r7, #2]
     b62:	429a      	cmp	r2, r3
     b64:	d135      	bne.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
     b66:	78fb      	ldrb	r3, [r7, #3]
     b68:	2b80      	cmp	r3, #128	; 0x80
     b6a:	d01f      	beq.n	bac <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
     b6c:	2b80      	cmp	r3, #128	; 0x80
     b6e:	dc04      	bgt.n	b7a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
     b70:	2b01      	cmp	r3, #1
     b72:	d007      	beq.n	b84 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
     b74:	2b02      	cmp	r3, #2
     b76:	d013      	beq.n	ba0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
     b78:	e02b      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
     b7a:	2b81      	cmp	r3, #129	; 0x81
     b7c:	d01c      	beq.n	bb8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
     b7e:	2b82      	cmp	r3, #130	; 0x82
     b80:	d020      	beq.n	bc4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
     b82:	e026      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
     b84:	4b1a      	ldr	r3, [pc, #104]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	691b      	ldr	r3, [r3, #16]
     b8a:	695b      	ldr	r3, [r3, #20]
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	2b00      	cmp	r3, #0
     b92:	d11d      	bne.n	bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
     b94:	4b16      	ldr	r3, [pc, #88]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	691b      	ldr	r3, [r3, #16]
     b9a:	2205      	movs	r2, #5
     b9c:	701a      	strb	r2, [r3, #0]
			}
			break;
     b9e:	e017      	b.n	bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
     ba0:	4b13      	ldr	r3, [pc, #76]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	691b      	ldr	r3, [r3, #16]
     ba6:	2204      	movs	r2, #4
     ba8:	701a      	strb	r2, [r3, #0]
			break;
     baa:	e012      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
     bac:	4b10      	ldr	r3, [pc, #64]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	691b      	ldr	r3, [r3, #16]
     bb2:	227f      	movs	r2, #127	; 0x7f
     bb4:	701a      	strb	r2, [r3, #0]
			break;
     bb6:	e00c      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
     bb8:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	691b      	ldr	r3, [r3, #16]
     bbe:	2202      	movs	r2, #2
     bc0:	725a      	strb	r2, [r3, #9]
			break;
     bc2:	e006      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
     bc4:	4b0a      	ldr	r3, [pc, #40]	; (bf0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	691b      	ldr	r3, [r3, #16]
     bca:	2201      	movs	r2, #1
     bcc:	725a      	strb	r2, [r3, #9]
			break;
     bce:	e000      	b.n	bd2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
     bd0:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
     bd2:	687a      	ldr	r2, [r7, #4]
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
     bda:	4619      	mov	r1, r3
     bdc:	4610      	mov	r0, r2
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
     be0:	4798      	blx	r3
     be2:	4603      	mov	r3, r0
     be4:	b2db      	uxtb	r3, r3
}
     be6:	4618      	mov	r0, r3
     be8:	3708      	adds	r7, #8
     bea:	46bd      	mov	sp, r7
     bec:	bd80      	pop	{r7, pc}
     bee:	bf00      	nop
     bf0:	200010b0 	.word	0x200010b0
     bf4:	00001b45 	.word	0x00001b45

00000bf8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	b099      	sub	sp, #100	; 0x64
     bfc:	af0c      	add	r7, sp, #48	; 0x30
     bfe:	61f8      	str	r0, [r7, #28]
     c00:	61b9      	str	r1, [r7, #24]
     c02:	613b      	str	r3, [r7, #16]
     c04:	4613      	mov	r3, r2
     c06:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
     c08:	69fb      	ldr	r3, [r7, #28]
     c0a:	69ba      	ldr	r2, [r7, #24]
     c0c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	coNode=nodeId;
     c10:	69fb      	ldr	r3, [r7, #28]
     c12:	7dfa      	ldrb	r2, [r7, #23]
     c14:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
     c18:	4ba3      	ldr	r3, [pc, #652]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c1a:	4aa4      	ldr	r2, [pc, #656]	; (eac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
     c1c:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
     c1e:	4ba2      	ldr	r3, [pc, #648]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	4aa3      	ldr	r2, [pc, #652]	; (eb0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
     c24:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
     c26:	4ba3      	ldr	r3, [pc, #652]	; (eb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
     c28:	4aa3      	ldr	r2, [pc, #652]	; (eb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
     c2a:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
     c2c:	4ba3      	ldr	r3, [pc, #652]	; (ebc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
     c2e:	4aa4      	ldr	r2, [pc, #656]	; (ec0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
     c30:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
     c32:	69fb      	ldr	r3, [r7, #28]
     c34:	2200      	movs	r2, #0
     c36:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     c3a:	69fb      	ldr	r3, [r7, #28]
     c3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     c40:	2b00      	cmp	r3, #0
     c42:	d118      	bne.n	c76 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
     c44:	4b98      	ldr	r3, [pc, #608]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c46:	6819      	ldr	r1, [r3, #0]
     c48:	69fb      	ldr	r3, [r7, #28]
     c4a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
     c4e:	69fb      	ldr	r3, [r7, #28]
     c50:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
     c54:	4613      	mov	r3, r2
     c56:	011b      	lsls	r3, r3, #4
     c58:	4413      	add	r3, r2
     c5a:	00db      	lsls	r3, r3, #3
     c5c:	4a99      	ldr	r2, [pc, #612]	; (ec4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
     c5e:	441a      	add	r2, r3
     c60:	0083      	lsls	r3, r0, #2
     c62:	440b      	add	r3, r1
     c64:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
     c66:	69fb      	ldr	r3, [r7, #28]
     c68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     c6c:	1c5a      	adds	r2, r3, #1
     c6e:	69fb      	ldr	r3, [r7, #28]
     c70:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     c74:	e7e1      	b.n	c3a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
     c76:	4b94      	ldr	r3, [pc, #592]	; (ec8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
     c78:	4a94      	ldr	r2, [pc, #592]	; (ecc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
     c7a:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
     c7c:	4b8a      	ldr	r3, [pc, #552]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	4a93      	ldr	r2, [pc, #588]	; (ed0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
     c82:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
     c84:	4b88      	ldr	r3, [pc, #544]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	4a92      	ldr	r2, [pc, #584]	; (ed4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
     c8a:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
     c8c:	4b86      	ldr	r3, [pc, #536]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	4a91      	ldr	r2, [pc, #580]	; (ed8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
     c92:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
     c94:	4b84      	ldr	r3, [pc, #528]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     c96:	681b      	ldr	r3, [r3, #0]
     c98:	4a90      	ldr	r2, [pc, #576]	; (edc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
     c9a:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
     c9c:	69fb      	ldr	r3, [r7, #28]
     c9e:	2200      	movs	r2, #0
     ca0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     ca4:	69fb      	ldr	r3, [r7, #28]
     ca6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     caa:	2b03      	cmp	r3, #3
     cac:	d818      	bhi.n	ce0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
     cae:	4b7e      	ldr	r3, [pc, #504]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     cb0:	6819      	ldr	r1, [r3, #0]
     cb2:	69fb      	ldr	r3, [r7, #28]
     cb4:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
     cb8:	69fb      	ldr	r3, [r7, #28]
     cba:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
     cbe:	4613      	mov	r3, r2
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	4413      	add	r3, r2
     cc4:	015b      	lsls	r3, r3, #5
     cc6:	4a86      	ldr	r2, [pc, #536]	; (ee0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
     cc8:	441a      	add	r2, r3
     cca:	1d83      	adds	r3, r0, #6
     ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
     cd0:	69fb      	ldr	r3, [r7, #28]
     cd2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     cd6:	1c5a      	adds	r2, r3, #1
     cd8:	69fb      	ldr	r3, [r7, #28]
     cda:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     cde:	e7e1      	b.n	ca4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
     ce0:	69fb      	ldr	r3, [r7, #28]
     ce2:	2200      	movs	r2, #0
     ce4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     ce8:	69fb      	ldr	r3, [r7, #28]
     cea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     cee:	2b03      	cmp	r3, #3
     cf0:	d817      	bhi.n	d22 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
     cf2:	4b6d      	ldr	r3, [pc, #436]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	69fa      	ldr	r2, [r7, #28]
     cf8:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
     cfc:	69f9      	ldr	r1, [r7, #28]
     cfe:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
     d02:	2058      	movs	r0, #88	; 0x58
     d04:	fb00 f101 	mul.w	r1, r0, r1
     d08:	4876      	ldr	r0, [pc, #472]	; (ee4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
     d0a:	4401      	add	r1, r0
     d0c:	320a      	adds	r2, #10
     d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
     d12:	69fb      	ldr	r3, [r7, #28]
     d14:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     d18:	1c5a      	adds	r2, r3, #1
     d1a:	69fb      	ldr	r3, [r7, #28]
     d1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     d20:	e7e2      	b.n	ce8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
     d22:	4b61      	ldr	r3, [pc, #388]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	4a70      	ldr	r2, [pc, #448]	; (ee8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
     d28:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
     d2a:	4b70      	ldr	r3, [pc, #448]	; (eec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
     d2c:	4a70      	ldr	r2, [pc, #448]	; (ef0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
     d2e:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
     d30:	4b5d      	ldr	r3, [pc, #372]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	2200      	movs	r2, #0
     d38:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
     d3a:	69fa      	ldr	r2, [r7, #28]
     d3c:	69fb      	ldr	r3, [r7, #28]
     d3e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
     d42:	4619      	mov	r1, r3
     d44:	4610      	mov	r0, r2
     d46:	4b6b      	ldr	r3, [pc, #428]	; (ef4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
     d48:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
     d4a:	7dfb      	ldrb	r3, [r7, #23]
     d4c:	2b00      	cmp	r3, #0
     d4e:	dd02      	ble.n	d56 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
     d50:	7dfb      	ldrb	r3, [r7, #23]
     d52:	2b7f      	cmp	r3, #127	; 0x7f
     d54:	dd05      	ble.n	d62 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
     d56:	69f8      	ldr	r0, [r7, #28]
     d58:	4b67      	ldr	r3, [pc, #412]	; (ef8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
     d5a:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
     d5c:	f06f 030b 	mvn.w	r3, #11
     d60:	e2f3      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>
	}


	err = CANmodule_init(
     d62:	69f8      	ldr	r0, [r7, #28]
     d64:	4b50      	ldr	r3, [pc, #320]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	6819      	ldr	r1, [r3, #0]
     d6a:	69fb      	ldr	r3, [r7, #28]
     d6c:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
     d70:	4b50      	ldr	r3, [pc, #320]	; (eb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
     d72:	681d      	ldr	r5, [r3, #0]
     d74:	4b51      	ldr	r3, [pc, #324]	; (ebc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	693a      	ldr	r2, [r7, #16]
     d7a:	9203      	str	r2, [sp, #12]
     d7c:	2209      	movs	r2, #9
     d7e:	9202      	str	r2, [sp, #8]
     d80:	9301      	str	r3, [sp, #4]
     d82:	230b      	movs	r3, #11
     d84:	9300      	str	r3, [sp, #0]
     d86:	462b      	mov	r3, r5
     d88:	4622      	mov	r2, r4
     d8a:	4c5c      	ldr	r4, [pc, #368]	; (efc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
     d8c:	47a0      	blx	r4
     d8e:	4603      	mov	r3, r0
     d90:	461a      	mov	r2, r3
     d92:	69fb      	ldr	r3, [r7, #28]
     d94:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
     d98:	69fb      	ldr	r3, [r7, #28]
     d9a:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     d9e:	2b00      	cmp	r3, #0
     da0:	d006      	beq.n	db0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
     da2:	69f8      	ldr	r0, [r7, #28]
     da4:	4b54      	ldr	r3, [pc, #336]	; (ef8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
     da6:	4798      	blx	r3
     da8:	69fb      	ldr	r3, [r7, #28]
     daa:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     dae:	e2cc      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
     db0:	69fb      	ldr	r3, [r7, #28]
     db2:	2200      	movs	r2, #0
     db4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     db8:	69fb      	ldr	r3, [r7, #28]
     dba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     dbe:	2b00      	cmp	r3, #0
     dc0:	f040 80a4 	bne.w	f0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
     dc4:	69fb      	ldr	r3, [r7, #28]
     dc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     dca:	2b00      	cmp	r3, #0
     dcc:	d108      	bne.n	de0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
     dce:	7dfb      	ldrb	r3, [r7, #23]
     dd0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
     dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
     dd6:	7dfb      	ldrb	r3, [r7, #23]
     dd8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
     ddc:	62bb      	str	r3, [r7, #40]	; 0x28
     dde:	e017      	b.n	e10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
     de0:	69fb      	ldr	r3, [r7, #28]
     de2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
     de6:	4946      	ldr	r1, [pc, #280]	; (f00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
     de8:	4613      	mov	r3, r2
     dea:	005b      	lsls	r3, r3, #1
     dec:	4413      	add	r3, r2
     dee:	009b      	lsls	r3, r3, #2
     df0:	440b      	add	r3, r1
     df2:	3364      	adds	r3, #100	; 0x64
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
     df8:	69fb      	ldr	r3, [r7, #28]
     dfa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
     dfe:	4940      	ldr	r1, [pc, #256]	; (f00 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
     e00:	4613      	mov	r3, r2
     e02:	005b      	lsls	r3, r3, #1
     e04:	4413      	add	r3, r2
     e06:	009b      	lsls	r3, r3, #2
     e08:	440b      	add	r3, r1
     e0a:	3368      	adds	r3, #104	; 0x68
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
     e10:	69fb      	ldr	r3, [r7, #28]
     e12:	f103 0e04 	add.w	lr, r3, #4
     e16:	4b24      	ldr	r3, [pc, #144]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     e18:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
     e1a:	69fb      	ldr	r3, [r7, #28]
     e1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_SDO_init(
     e20:	009b      	lsls	r3, r3, #2
     e22:	4413      	add	r3, r2
     e24:	685b      	ldr	r3, [r3, #4]
     e26:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
     e28:	69fb      	ldr	r3, [r7, #28]
     e2a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_SDO_init(
     e2e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
     e32:	69fb      	ldr	r3, [r7, #28]
     e34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_SDO_init(
     e38:	2b00      	cmp	r3, #0
     e3a:	d003      	beq.n	e44 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
     e3c:	4b1a      	ldr	r3, [pc, #104]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     e3e:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
     e40:	685b      	ldr	r3, [r3, #4]
     e42:	e000      	b.n	e46 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
     e44:	2300      	movs	r3, #0
     e46:	4920      	ldr	r1, [pc, #128]	; (ec8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
     e48:	6809      	ldr	r1, [r1, #0]
     e4a:	4817      	ldr	r0, [pc, #92]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     e4c:	6800      	ldr	r0, [r0, #0]
     e4e:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
     e50:	69fc      	ldr	r4, [r7, #28]
     e52:	f8d4 4134 	ldr.w	r4, [r4, #308]	; 0x134
		err = CO_SDO_init(
     e56:	3406      	adds	r4, #6
     e58:	4d13      	ldr	r5, [pc, #76]	; (ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
     e5a:	682d      	ldr	r5, [r5, #0]
     e5c:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
     e5e:	69fe      	ldr	r6, [r7, #28]
     e60:	f8d6 6134 	ldr.w	r6, [r6, #308]	; 0x134
		err = CO_SDO_init(
     e64:	3607      	adds	r6, #7
     e66:	9609      	str	r6, [sp, #36]	; 0x24
     e68:	9508      	str	r5, [sp, #32]
     e6a:	9407      	str	r4, [sp, #28]
     e6c:	9006      	str	r0, [sp, #24]
     e6e:	7df8      	ldrb	r0, [r7, #23]
     e70:	9005      	str	r0, [sp, #20]
     e72:	9104      	str	r1, [sp, #16]
     e74:	2137      	movs	r1, #55	; 0x37
     e76:	9103      	str	r1, [sp, #12]
     e78:	4922      	ldr	r1, [pc, #136]	; (f04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
     e7a:	9102      	str	r1, [sp, #8]
     e7c:	9301      	str	r3, [sp, #4]
     e7e:	9200      	str	r2, [sp, #0]
     e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e84:	68f9      	ldr	r1, [r7, #12]
     e86:	4670      	mov	r0, lr
     e88:	4c1f      	ldr	r4, [pc, #124]	; (f08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
     e8a:	47a0      	blx	r4
     e8c:	4603      	mov	r3, r0
     e8e:	461a      	mov	r2, r3
     e90:	69fb      	ldr	r3, [r7, #28]
     e92:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	for (i=0; i<CO_NO_SDO_SERVER; i++)
     e96:	69fb      	ldr	r3, [r7, #28]
     e98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     e9c:	1c5a      	adds	r2, r3, #1
     e9e:	69fb      	ldr	r3, [r7, #28]
     ea0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     ea4:	e788      	b.n	db8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
     ea6:	bf00      	nop
     ea8:	200010b0 	.word	0x200010b0
     eac:	20001074 	.word	0x20001074
     eb0:	200010c4 	.word	0x200010c4
     eb4:	200010b4 	.word	0x200010b4
     eb8:	200010e8 	.word	0x200010e8
     ebc:	200010b8 	.word	0x200010b8
     ec0:	20001198 	.word	0x20001198
     ec4:	20001228 	.word	0x20001228
     ec8:	200010bc 	.word	0x200010bc
     ecc:	200012b0 	.word	0x200012b0
     ed0:	20001544 	.word	0x20001544
     ed4:	200015b0 	.word	0x200015b0
     ed8:	200015cc 	.word	0x200015cc
     edc:	200015f0 	.word	0x200015f0
     ee0:	2000162c 	.word	0x2000162c
     ee4:	200017ac 	.word	0x200017ac
     ee8:	2000190c 	.word	0x2000190c
     eec:	200010c0 	.word	0x200010c0
     ef0:	20001924 	.word	0x20001924
     ef4:	000017cd 	.word	0x000017cd
     ef8:	00001379 	.word	0x00001379
     efc:	00001831 	.word	0x00001831
     f00:	20000184 	.word	0x20000184
     f04:	00014918 	.word	0x00014918
     f08:	00004959 	.word	0x00004959
	}

	if(err){CO_delete(); return err;}
     f0c:	69fb      	ldr	r3, [r7, #28]
     f0e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     f12:	2b00      	cmp	r3, #0
     f14:	d006      	beq.n	f24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
     f16:	69f8      	ldr	r0, [r7, #28]
     f18:	4b79      	ldr	r3, [pc, #484]	; (1100 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x508>)
     f1a:	4798      	blx	r3
     f1c:	69fb      	ldr	r3, [r7, #28]
     f1e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     f22:	e212      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>


	err = EM_Init(
     f24:	69fb      	ldr	r3, [r7, #28]
     f26:	1d18      	adds	r0, r3, #4
     f28:	4b76      	ldr	r3, [pc, #472]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	6899      	ldr	r1, [r3, #8]
     f2e:	4b75      	ldr	r3, [pc, #468]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	68dc      	ldr	r4, [r3, #12]
     f34:	4b73      	ldr	r3, [pc, #460]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	685d      	ldr	r5, [r3, #4]
     f3a:	4b72      	ldr	r3, [pc, #456]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f3c:	681b      	ldr	r3, [r3, #0]
     f3e:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
     f40:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
     f42:	3280      	adds	r2, #128	; 0x80
     f44:	9207      	str	r2, [sp, #28]
     f46:	2202      	movs	r2, #2
     f48:	9206      	str	r2, [sp, #24]
     f4a:	9305      	str	r3, [sp, #20]
     f4c:	2308      	movs	r3, #8
     f4e:	9304      	str	r3, [sp, #16]
     f50:	4b6d      	ldr	r3, [pc, #436]	; (1108 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
     f52:	9303      	str	r3, [sp, #12]
     f54:	4b6d      	ldr	r3, [pc, #436]	; (110c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
     f56:	9302      	str	r3, [sp, #8]
     f58:	230a      	movs	r3, #10
     f5a:	9301      	str	r3, [sp, #4]
     f5c:	4b6c      	ldr	r3, [pc, #432]	; (1110 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
     f5e:	9300      	str	r3, [sp, #0]
     f60:	462b      	mov	r3, r5
     f62:	4622      	mov	r2, r4
     f64:	4c6b      	ldr	r4, [pc, #428]	; (1114 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
     f66:	47a0      	blx	r4
     f68:	4603      	mov	r3, r0
     f6a:	461a      	mov	r2, r3
     f6c:	69fb      	ldr	r3, [r7, #28]
     f6e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

	if(err){CO_delete(); return err;}
     f72:	69fb      	ldr	r3, [r7, #28]
     f74:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     f78:	2b00      	cmp	r3, #0
     f7a:	d006      	beq.n	f8a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
     f7c:	69f8      	ldr	r0, [r7, #28]
     f7e:	4b60      	ldr	r3, [pc, #384]	; (1100 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x508>)
     f80:	4798      	blx	r3
     f82:	69fb      	ldr	r3, [r7, #28]
     f84:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     f88:	e1df      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>


	err = NMT_Init(
     f8a:	4b5e      	ldr	r3, [pc, #376]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	6918      	ldr	r0, [r3, #16]
     f90:	4b5c      	ldr	r3, [pc, #368]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	68dc      	ldr	r4, [r3, #12]
     f96:	4b5b      	ldr	r3, [pc, #364]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	4a59      	ldr	r2, [pc, #356]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
     f9e:	6812      	ldr	r2, [r2, #0]
     fa0:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
     fa2:	7df9      	ldrb	r1, [r7, #23]
     fa4:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
     fa8:	7dfd      	ldrb	r5, [r7, #23]
     faa:	9106      	str	r1, [sp, #24]
     fac:	2108      	movs	r1, #8
     fae:	9105      	str	r1, [sp, #20]
     fb0:	9204      	str	r2, [sp, #16]
     fb2:	2200      	movs	r2, #0
     fb4:	9203      	str	r2, [sp, #12]
     fb6:	2200      	movs	r2, #0
     fb8:	9202      	str	r2, [sp, #8]
     fba:	9301      	str	r3, [sp, #4]
     fbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     fc0:	9300      	str	r3, [sp, #0]
     fc2:	462b      	mov	r3, r5
     fc4:	4622      	mov	r2, r4
     fc6:	4601      	mov	r1, r0
     fc8:	69f8      	ldr	r0, [r7, #28]
     fca:	4c53      	ldr	r4, [pc, #332]	; (1118 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
     fcc:	47a0      	blx	r4
     fce:	4603      	mov	r3, r0
     fd0:	461a      	mov	r2, r3
     fd2:	69fb      	ldr	r3, [r7, #28]
     fd4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

	if(err){CO_delete(); return err;}
     fd8:	69fb      	ldr	r3, [r7, #28]
     fda:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     fde:	2b00      	cmp	r3, #0
     fe0:	d006      	beq.n	ff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
     fe2:	69f8      	ldr	r0, [r7, #28]
     fe4:	4b46      	ldr	r3, [pc, #280]	; (1100 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x508>)
     fe6:	4798      	blx	r3
     fe8:	69fb      	ldr	r3, [r7, #28]
     fea:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
     fee:	e1ac      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>


	if (nodeId==1)
     ff0:	7dfb      	ldrb	r3, [r7, #23]
     ff2:	2b01      	cmp	r3, #1
     ff4:	d10d      	bne.n	1012 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
     ff6:	69f8      	ldr	r0, [r7, #28]
     ff8:	2300      	movs	r3, #0
     ffa:	9301      	str	r3, [sp, #4]
     ffc:	2302      	movs	r3, #2
     ffe:	9300      	str	r3, [sp, #0]
    1000:	2300      	movs	r3, #0
    1002:	2200      	movs	r2, #0
    1004:	2100      	movs	r1, #0
    1006:	4c45      	ldr	r4, [pc, #276]	; (111c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    1008:	47a0      	blx	r4
    100a:	4602      	mov	r2, r0
    100c:	69fb      	ldr	r3, [r7, #28]
    100e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	}else{

	}
       
	err = SYNC_Init(
    1012:	4b3c      	ldr	r3, [pc, #240]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	695e      	ldr	r6, [r3, #20]
    1018:	4b3a      	ldr	r3, [pc, #232]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	689b      	ldr	r3, [r3, #8]
    101e:	60fb      	str	r3, [r7, #12]
    1020:	4b38      	ldr	r3, [pc, #224]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	6859      	ldr	r1, [r3, #4]
    1026:	60b9      	str	r1, [r7, #8]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    1028:	4b36      	ldr	r3, [pc, #216]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    102a:	681b      	ldr	r3, [r3, #0]
    102c:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    102e:	607b      	str	r3, [r7, #4]
    1030:	4b3b      	ldr	r3, [pc, #236]	; (1120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    1032:	689b      	ldr	r3, [r3, #8]
    1034:	4a3a      	ldr	r2, [pc, #232]	; (1120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    1036:	68d2      	ldr	r2, [r2, #12]
    1038:	4939      	ldr	r1, [pc, #228]	; (1120 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    103a:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    103e:	4831      	ldr	r0, [pc, #196]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    1040:	6800      	ldr	r0, [r0, #0]
    1042:	6800      	ldr	r0, [r0, #0]
    1044:	4c2f      	ldr	r4, [pc, #188]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    1046:	6824      	ldr	r4, [r4, #0]
    1048:	6824      	ldr	r4, [r4, #0]
    104a:	2501      	movs	r5, #1
    104c:	9507      	str	r5, [sp, #28]
    104e:	9406      	str	r4, [sp, #24]
    1050:	2401      	movs	r4, #1
    1052:	9405      	str	r4, [sp, #20]
    1054:	9004      	str	r0, [sp, #16]
    1056:	9103      	str	r1, [sp, #12]
    1058:	9202      	str	r2, [sp, #8]
    105a:	9301      	str	r3, [sp, #4]
    105c:	6878      	ldr	r0, [r7, #4]
    105e:	9000      	str	r0, [sp, #0]
    1060:	68bb      	ldr	r3, [r7, #8]
    1062:	68fa      	ldr	r2, [r7, #12]
    1064:	4631      	mov	r1, r6
    1066:	69f8      	ldr	r0, [r7, #28]
    1068:	4c2e      	ldr	r4, [pc, #184]	; (1124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    106a:	47a0      	blx	r4
    106c:	4603      	mov	r3, r0
    106e:	461a      	mov	r2, r3
    1070:	69fb      	ldr	r3, [r7, #28]
    1072:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    1076:	69fb      	ldr	r3, [r7, #28]
    1078:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    107c:	2b00      	cmp	r3, #0
    107e:	d006      	beq.n	108e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x496>
    1080:	69f8      	ldr	r0, [r7, #28]
    1082:	4b1f      	ldr	r3, [pc, #124]	; (1100 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x508>)
    1084:	4798      	blx	r3
    1086:	69fb      	ldr	r3, [r7, #28]
    1088:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    108c:	e15d      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>





	for(i=0; i<CO_NO_RPDO; i++){
    108e:	69fb      	ldr	r3, [r7, #28]
    1090:	2200      	movs	r2, #0
    1092:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    1096:	69fb      	ldr	r3, [r7, #28]
    1098:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    109c:	2b03      	cmp	r3, #3
    109e:	f200 8095 	bhi.w	11cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d4>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    10a2:	4b18      	ldr	r3, [pc, #96]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    10aa:	69fb      	ldr	r3, [r7, #28]
    10ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    10b0:	1c9a      	adds	r2, r3, #2
    10b2:	69fb      	ldr	r3, [r7, #28]
    10b4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

		err = CO_RPDO_init(
    10b8:	4b12      	ldr	r3, [pc, #72]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10ba:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    10bc:	69fa      	ldr	r2, [r7, #28]
    10be:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
		err = CO_RPDO_init(
    10c2:	3206      	adds	r2, #6
    10c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    10c8:	60fb      	str	r3, [r7, #12]
    10ca:	4b0e      	ldr	r3, [pc, #56]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	689b      	ldr	r3, [r3, #8]
    10d0:	60bb      	str	r3, [r7, #8]
    10d2:	4b0c      	ldr	r3, [pc, #48]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	685b      	ldr	r3, [r3, #4]
    10d8:	607b      	str	r3, [r7, #4]
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    10e0:	4b08      	ldr	r3, [pc, #32]	; (1104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    10e6:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    10e8:	69fb      	ldr	r3, [r7, #28]
    10ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_RPDO_init(
    10ee:	2b03      	cmp	r3, #3
    10f0:	d81a      	bhi.n	1128 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    10f2:	69fb      	ldr	r3, [r7, #28]
    10f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_RPDO_init(
    10f8:	3302      	adds	r3, #2
    10fa:	021a      	lsls	r2, r3, #8
    10fc:	e015      	b.n	112a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x532>
    10fe:	bf00      	nop
    1100:	00001379 	.word	0x00001379
    1104:	200010b0 	.word	0x200010b0
    1108:	20000014 	.word	0x20000014
    110c:	2000000c 	.word	0x2000000c
    1110:	2000003c 	.word	0x2000003c
    1114:	00002281 	.word	0x00002281
    1118:	00002db9 	.word	0x00002db9
    111c:	00001a99 	.word	0x00001a99
    1120:	20000184 	.word	0x20000184
    1124:	00006981 	.word	0x00006981
    1128:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    112a:	69fb      	ldr	r3, [r7, #28]
    112c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
    1130:	460b      	mov	r3, r1
    1132:	005b      	lsls	r3, r3, #1
    1134:	440b      	add	r3, r1
    1136:	009b      	lsls	r3, r3, #2
    1138:	3368      	adds	r3, #104	; 0x68
    113a:	4986      	ldr	r1, [pc, #536]	; (1354 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x75c>)
    113c:	440b      	add	r3, r1
    113e:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    1140:	69fb      	ldr	r3, [r7, #28]
    1142:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
    1146:	460b      	mov	r3, r1
    1148:	00db      	lsls	r3, r3, #3
    114a:	440b      	add	r3, r1
    114c:	009b      	lsls	r3, r3, #2
    114e:	3398      	adds	r3, #152	; 0x98
    1150:	4980      	ldr	r1, [pc, #512]	; (1354 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x75c>)
    1152:	440b      	add	r3, r1
    1154:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    1156:	69f9      	ldr	r1, [r7, #28]
    1158:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
		err = CO_RPDO_init(
    115c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    1160:	69fd      	ldr	r5, [r7, #28]
    1162:	f8d5 5134 	ldr.w	r5, [r5, #308]	; 0x134
		err = CO_RPDO_init(
    1166:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    116a:	69fe      	ldr	r6, [r7, #28]
    116c:	f8d6 612c 	ldr.w	r6, [r6, #300]	; 0x12c
    1170:	960a      	str	r6, [sp, #40]	; 0x28
    1172:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    1174:	9609      	str	r6, [sp, #36]	; 0x24
    1176:	9508      	str	r5, [sp, #32]
    1178:	9107      	str	r1, [sp, #28]
    117a:	9306      	str	r3, [sp, #24]
    117c:	9405      	str	r4, [sp, #20]
    117e:	2300      	movs	r3, #0
    1180:	9304      	str	r3, [sp, #16]
    1182:	9203      	str	r2, [sp, #12]
    1184:	7dfb      	ldrb	r3, [r7, #23]
    1186:	9302      	str	r3, [sp, #8]
    1188:	683b      	ldr	r3, [r7, #0]
    118a:	9301      	str	r3, [sp, #4]
    118c:	9000      	str	r0, [sp, #0]
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	68ba      	ldr	r2, [r7, #8]
    1192:	68f9      	ldr	r1, [r7, #12]
    1194:	69f8      	ldr	r0, [r7, #28]
    1196:	4c70      	ldr	r4, [pc, #448]	; (1358 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    1198:	47a0      	blx	r4
    119a:	4603      	mov	r3, r0
    119c:	461a      	mov	r2, r3
    119e:	69fb      	ldr	r3, [r7, #28]
    11a0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    11a4:	69fb      	ldr	r3, [r7, #28]
    11a6:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    11aa:	2b00      	cmp	r3, #0
    11ac:	d006      	beq.n	11bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5c4>
    11ae:	69f8      	ldr	r0, [r7, #28]
    11b0:	4b6a      	ldr	r3, [pc, #424]	; (135c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>)
    11b2:	4798      	blx	r3
    11b4:	69fb      	ldr	r3, [r7, #28]
    11b6:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    11ba:	e0c6      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>
	for(i=0; i<CO_NO_RPDO; i++){
    11bc:	69fb      	ldr	r3, [r7, #28]
    11be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    11c2:	1c5a      	adds	r2, r3, #1
    11c4:	69fb      	ldr	r3, [r7, #28]
    11c6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    11ca:	e764      	b.n	1096 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    11cc:	69fb      	ldr	r3, [r7, #28]
    11ce:	2200      	movs	r2, #0
    11d0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    11d4:	69fb      	ldr	r3, [r7, #28]
    11d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    11da:	2b03      	cmp	r3, #3
    11dc:	d876      	bhi.n	12cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d4>
		err = CO_TPDO_init(
    11de:	4b60      	ldr	r3, [pc, #384]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    11e0:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    11e2:	69fa      	ldr	r2, [r7, #28]
    11e4:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
		err = CO_TPDO_init(
    11e8:	320a      	adds	r2, #10
    11ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    11ee:	60fb      	str	r3, [r7, #12]
    11f0:	4b5b      	ldr	r3, [pc, #364]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	689b      	ldr	r3, [r3, #8]
    11f6:	60bb      	str	r3, [r7, #8]
    11f8:	4b59      	ldr	r3, [pc, #356]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    11fa:	681b      	ldr	r3, [r3, #0]
    11fc:	685b      	ldr	r3, [r3, #4]
    11fe:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    1200:	4b57      	ldr	r3, [pc, #348]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    1206:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    1208:	69fb      	ldr	r3, [r7, #28]
    120a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
		err = CO_TPDO_init(
    120e:	2b03      	cmp	r3, #3
    1210:	d806      	bhi.n	1220 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x628>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    1212:	69fb      	ldr	r3, [r7, #28]
    1214:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    1218:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    121a:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    121e:	e000      	b.n	1222 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x62a>
    1220:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    1222:	69fb      	ldr	r3, [r7, #28]
    1224:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
    1228:	460b      	mov	r3, r1
    122a:	00db      	lsls	r3, r3, #3
    122c:	1a5b      	subs	r3, r3, r1
    122e:	009b      	lsls	r3, r3, #2
    1230:	f503 7394 	add.w	r3, r3, #296	; 0x128
    1234:	4947      	ldr	r1, [pc, #284]	; (1354 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x75c>)
    1236:	440b      	add	r3, r1
    1238:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    123a:	69fb      	ldr	r3, [r7, #28]
    123c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
    1240:	460b      	mov	r3, r1
    1242:	00db      	lsls	r3, r3, #3
    1244:	440b      	add	r3, r1
    1246:	009b      	lsls	r3, r3, #2
    1248:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    124c:	4941      	ldr	r1, [pc, #260]	; (1354 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x75c>)
    124e:	440b      	add	r3, r1
    1250:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    1252:	69f9      	ldr	r1, [r7, #28]
    1254:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
		err = CO_TPDO_init(
    1258:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    125c:	69fc      	ldr	r4, [r7, #28]
    125e:	f8d4 4134 	ldr.w	r4, [r4, #308]	; 0x134
		err = CO_TPDO_init(
    1262:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    1266:	4d3e      	ldr	r5, [pc, #248]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    1268:	682d      	ldr	r5, [r5, #0]
    126a:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    126c:	69fe      	ldr	r6, [r7, #28]
    126e:	f8d6 6134 	ldr.w	r6, [r6, #308]	; 0x134
		err = CO_TPDO_init(
    1272:	3603      	adds	r6, #3
    1274:	9609      	str	r6, [sp, #36]	; 0x24
    1276:	9508      	str	r5, [sp, #32]
    1278:	9407      	str	r4, [sp, #28]
    127a:	9106      	str	r1, [sp, #24]
    127c:	9305      	str	r3, [sp, #20]
    127e:	9004      	str	r0, [sp, #16]
    1280:	2300      	movs	r3, #0
    1282:	9303      	str	r3, [sp, #12]
    1284:	9202      	str	r2, [sp, #8]
    1286:	7dfb      	ldrb	r3, [r7, #23]
    1288:	9301      	str	r3, [sp, #4]
    128a:	683b      	ldr	r3, [r7, #0]
    128c:	9300      	str	r3, [sp, #0]
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	68ba      	ldr	r2, [r7, #8]
    1292:	68f9      	ldr	r1, [r7, #12]
    1294:	69f8      	ldr	r0, [r7, #28]
    1296:	4c33      	ldr	r4, [pc, #204]	; (1364 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    1298:	47a0      	blx	r4
    129a:	4603      	mov	r3, r0
    129c:	461a      	mov	r2, r3
    129e:	69fb      	ldr	r3, [r7, #28]
    12a0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
		if(err){CO_delete(); return err;}
    12a4:	69fb      	ldr	r3, [r7, #28]
    12a6:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    12aa:	2b00      	cmp	r3, #0
    12ac:	d006      	beq.n	12bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6c4>
    12ae:	69f8      	ldr	r0, [r7, #28]
    12b0:	4b2a      	ldr	r3, [pc, #168]	; (135c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>)
    12b2:	4798      	blx	r3
    12b4:	69fb      	ldr	r3, [r7, #28]
    12b6:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    12ba:	e046      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>
	for(i=0; i<CO_NO_TPDO; i++){
    12bc:	69fb      	ldr	r3, [r7, #28]
    12be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    12c2:	1c5a      	adds	r2, r3, #1
    12c4:	69fb      	ldr	r3, [r7, #28]
    12c6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    12ca:	e783      	b.n	11d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5dc>
	}

	HB_SetNode(coNode);
    12cc:	69fb      	ldr	r3, [r7, #28]
    12ce:	f103 020c 	add.w	r2, r3, #12
    12d2:	69fb      	ldr	r3, [r7, #28]
    12d4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
    12d8:	4619      	mov	r1, r3
    12da:	4610      	mov	r0, r2
    12dc:	4b22      	ldr	r3, [pc, #136]	; (1368 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    12de:	4798      	blx	r3
	err = CO_HBconsumer_init(
    12e0:	69fb      	ldr	r3, [r7, #28]
    12e2:	f103 000c 	add.w	r0, r3, #12
    12e6:	4b1e      	ldr	r3, [pc, #120]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    12ec:	4b1c      	ldr	r3, [pc, #112]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	689d      	ldr	r5, [r3, #8]
    12f2:	4b1b      	ldr	r3, [pc, #108]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	685e      	ldr	r6, [r3, #4]
    12f8:	4b1c      	ldr	r3, [pc, #112]	; (136c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	4a18      	ldr	r2, [pc, #96]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    12fe:	6812      	ldr	r2, [r2, #0]
    1300:	6812      	ldr	r2, [r2, #0]
    1302:	2107      	movs	r1, #7
    1304:	9104      	str	r1, [sp, #16]
    1306:	9203      	str	r2, [sp, #12]
    1308:	2204      	movs	r2, #4
    130a:	9202      	str	r2, [sp, #8]
    130c:	9301      	str	r3, [sp, #4]
    130e:	4b18      	ldr	r3, [pc, #96]	; (1370 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1310:	9300      	str	r3, [sp, #0]
    1312:	4633      	mov	r3, r6
    1314:	462a      	mov	r2, r5
    1316:	4621      	mov	r1, r4
    1318:	4c16      	ldr	r4, [pc, #88]	; (1374 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    131a:	47a0      	blx	r4
    131c:	4603      	mov	r3, r0
    131e:	461a      	mov	r2, r3
    1320:	69fb      	ldr	r3, [r7, #28]
    1322:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    1326:	69fb      	ldr	r3, [r7, #28]
    1328:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    132c:	2b00      	cmp	r3, #0
    132e:	d006      	beq.n	133e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x746>
    1330:	69f8      	ldr	r0, [r7, #28]
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>)
    1334:	4798      	blx	r3
    1336:	69fb      	ldr	r3, [r7, #28]
    1338:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
    133c:	e005      	b.n	134a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x752>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    133e:	4b08      	ldr	r3, [pc, #32]	; (1360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    1340:	681a      	ldr	r2, [r3, #0]
    1342:	69fb      	ldr	r3, [r7, #28]
    1344:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	return CO_ERROR_NO;
    1348:	2300      	movs	r3, #0
}
    134a:	4618      	mov	r0, r3
    134c:	3734      	adds	r7, #52	; 0x34
    134e:	46bd      	mov	sp, r7
    1350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1352:	bf00      	nop
    1354:	20000184 	.word	0x20000184
    1358:	00003ee5 	.word	0x00003ee5
    135c:	00001379 	.word	0x00001379
    1360:	200010b0 	.word	0x200010b0
    1364:	00003fed 	.word	0x00003fed
    1368:	00002c91 	.word	0x00002c91
    136c:	200010c0 	.word	0x200010c0
    1370:	200001b4 	.word	0x200001b4
    1374:	00002a95 	.word	0x00002a95

00001378 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    1378:	b580      	push	{r7, lr}
    137a:	b082      	sub	sp, #8
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    1380:	687a      	ldr	r2, [r7, #4]
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1388:	4619      	mov	r1, r3
    138a:	4610      	mov	r0, r2
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <_ZN8CO_Class9CO_deleteEv+0x28>)
    138e:	4798      	blx	r3
	CANmodule_Disable();
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	4618      	mov	r0, r3
    1394:	4b03      	ldr	r3, [pc, #12]	; (13a4 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    1396:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    1398:	bf00      	nop
    139a:	3708      	adds	r7, #8
    139c:	46bd      	mov	sp, r7
    139e:	bd80      	pop	{r7, pc}
    13a0:	000017cd 	.word	0x000017cd
    13a4:	00001985 	.word	0x00001985

000013a8 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    13a8:	b590      	push	{r4, r7, lr}
    13aa:	b08b      	sub	sp, #44	; 0x2c
    13ac:	af04      	add	r7, sp, #16
    13ae:	60f8      	str	r0, [r7, #12]
    13b0:	60b9      	str	r1, [r7, #8]
    13b2:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    13b4:	2300      	movs	r3, #0
    13b6:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    13b8:	2300      	movs	r3, #0
    13ba:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	2200      	movs	r2, #0
    13c0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL){
    13c4:	4b2b      	ldr	r3, [pc, #172]	; (1474 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	691b      	ldr	r3, [r3, #16]
    13ca:	781b      	ldrb	r3, [r3, #0]
    13cc:	2b7f      	cmp	r3, #127	; 0x7f
    13ce:	d005      	beq.n	13dc <_ZN8CO_Class7ProcessEmPm+0x34>
    13d0:	4b28      	ldr	r3, [pc, #160]	; (1474 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	691b      	ldr	r3, [r3, #16]
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	2b05      	cmp	r3, #5
    13da:	d101      	bne.n	13e0 <_ZN8CO_Class7ProcessEmPm+0x38>
		
		NMTisPreOrOperational = true;
    13dc:	2301      	movs	r3, #1
    13de:	75bb      	strb	r3, [r7, #22]

	



	for(i=0; i<CO_NO_SDO_SERVER; i++){
    13e0:	2300      	movs	r3, #0
    13e2:	75fb      	strb	r3, [r7, #23]
    13e4:	7dfb      	ldrb	r3, [r7, #23]
    13e6:	2b00      	cmp	r3, #0
    13e8:	dc0d      	bgt.n	1406 <_ZN8CO_Class7ProcessEmPm+0x5e>
		CO_SDO_process(
    13ea:	68fb      	ldr	r3, [r7, #12]
    13ec:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    13ee:	7db9      	ldrb	r1, [r7, #22]
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	9300      	str	r3, [sp, #0]
    13f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    13f8:	68ba      	ldr	r2, [r7, #8]
    13fa:	4c1f      	ldr	r4, [pc, #124]	; (1478 <_ZN8CO_Class7ProcessEmPm+0xd0>)
    13fc:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    13fe:	7dfb      	ldrb	r3, [r7, #23]
    1400:	3301      	adds	r3, #1
    1402:	75fb      	strb	r3, [r7, #23]
    1404:	e7ee      	b.n	13e4 <_ZN8CO_Class7ProcessEmPm+0x3c>
	}

	EM_process(
    1406:	68fb      	ldr	r3, [r7, #12]
    1408:	1d18      	adds	r0, r3, #4
    140a:	4b1a      	ldr	r3, [pc, #104]	; (1474 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	68d9      	ldr	r1, [r3, #12]
    1410:	68ba      	ldr	r2, [r7, #8]
    1412:	4613      	mov	r3, r2
    1414:	009b      	lsls	r3, r3, #2
    1416:	4413      	add	r3, r2
    1418:	005b      	lsls	r3, r3, #1
    141a:	461c      	mov	r4, r3
	CO->emPr,
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    141c:	4b17      	ldr	r3, [pc, #92]	; (147c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    141e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1420:	7dba      	ldrb	r2, [r7, #22]
    1422:	9300      	str	r3, [sp, #0]
    1424:	4623      	mov	r3, r4
    1426:	4c16      	ldr	r4, [pc, #88]	; (1480 <_ZN8CO_Class7ProcessEmPm+0xd8>)
    1428:	47a0      	blx	r4


	reset = NMT_Process(
	timeDifference_ms,
	OD_producerHeartbeatTime,
    142a:	4b14      	ldr	r3, [pc, #80]	; (147c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    142c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = NMT_Process(
    1430:	4618      	mov	r0, r3
    1432:	4b12      	ldr	r3, [pc, #72]	; (147c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    1434:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    1438:	4b12      	ldr	r3, [pc, #72]	; (1484 <_ZN8CO_Class7ProcessEmPm+0xdc>)
    143a:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    143c:	687a      	ldr	r2, [r7, #4]
    143e:	9202      	str	r2, [sp, #8]
    1440:	4a11      	ldr	r2, [pc, #68]	; (1488 <_ZN8CO_Class7ProcessEmPm+0xe0>)
    1442:	9201      	str	r2, [sp, #4]
    1444:	9300      	str	r3, [sp, #0]
    1446:	460b      	mov	r3, r1
    1448:	4602      	mov	r2, r0
    144a:	68b9      	ldr	r1, [r7, #8]
    144c:	68f8      	ldr	r0, [r7, #12]
    144e:	4c0f      	ldr	r4, [pc, #60]	; (148c <_ZN8CO_Class7ProcessEmPm+0xe4>)
    1450:	47a0      	blx	r4
    1452:	4603      	mov	r3, r0
    1454:	757b      	strb	r3, [r7, #21]

	CO_HBconsumer_process(
    1456:	68fb      	ldr	r3, [r7, #12]
    1458:	f103 000c 	add.w	r0, r3, #12
    145c:	4b05      	ldr	r3, [pc, #20]	; (1474 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	6b99      	ldr	r1, [r3, #56]	; 0x38
	CO->HBcons,
	NMTisPreOrOperational,
	timeDifference_ms);
    1462:	7dba      	ldrb	r2, [r7, #22]
    1464:	68bb      	ldr	r3, [r7, #8]
    1466:	4c0a      	ldr	r4, [pc, #40]	; (1490 <_ZN8CO_Class7ProcessEmPm+0xe8>)
    1468:	47a0      	blx	r4

	return reset;
    146a:	7d7b      	ldrb	r3, [r7, #21]
}
    146c:	4618      	mov	r0, r3
    146e:	371c      	adds	r7, #28
    1470:	46bd      	mov	sp, r7
    1472:	bd90      	pop	{r4, r7, pc}
    1474:	200010b0 	.word	0x200010b0
    1478:	0000531d 	.word	0x0000531d
    147c:	20000184 	.word	0x20000184
    1480:	000023c9 	.word	0x000023c9
    1484:	20000008 	.word	0x20000008
    1488:	200001dd 	.word	0x200001dd
    148c:	00002ec9 	.word	0x00002ec9
    1490:	00002b65 	.word	0x00002b65

00001494 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    1494:	b590      	push	{r4, r7, lr}
    1496:	b085      	sub	sp, #20
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
    149c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    149e:	2300      	movs	r3, #0
    14a0:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    14a2:	4b18      	ldr	r3, [pc, #96]	; (1504 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	6959      	ldr	r1, [r3, #20]
    14a8:	4b17      	ldr	r3, [pc, #92]	; (1508 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
    14aa:	691b      	ldr	r3, [r3, #16]
    14ac:	683a      	ldr	r2, [r7, #0]
    14ae:	6878      	ldr	r0, [r7, #4]
    14b0:	4c16      	ldr	r4, [pc, #88]	; (150c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    14b2:	47a0      	blx	r4
    14b4:	4603      	mov	r3, r0
    14b6:	2b01      	cmp	r3, #1
    14b8:	d002      	beq.n	14c0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2c>
    14ba:	2b02      	cmp	r3, #2
    14bc:	d003      	beq.n	14c6 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x32>
    14be:	e007      	b.n	14d0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    14c0:	2301      	movs	r3, #1
    14c2:	72fb      	strb	r3, [r7, #11]
		break;
    14c4:	e004      	b.n	14d0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	4618      	mov	r0, r3
    14ca:	4b11      	ldr	r3, [pc, #68]	; (1510 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    14cc:	4798      	blx	r3
		break;
    14ce:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    14d0:	2300      	movs	r3, #0
    14d2:	60fb      	str	r3, [r7, #12]
    14d4:	68fb      	ldr	r3, [r7, #12]
    14d6:	2b03      	cmp	r3, #3
    14d8:	d80e      	bhi.n	14f8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x64>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    14da:	4b0a      	ldr	r3, [pc, #40]	; (1504 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    14dc:	681b      	ldr	r3, [r3, #0]
    14de:	68fa      	ldr	r2, [r7, #12]
    14e0:	3206      	adds	r2, #6
    14e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    14e6:	7afa      	ldrb	r2, [r7, #11]
    14e8:	4619      	mov	r1, r3
    14ea:	6878      	ldr	r0, [r7, #4]
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    14ee:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    14f0:	68fb      	ldr	r3, [r7, #12]
    14f2:	3301      	adds	r3, #1
    14f4:	60fb      	str	r3, [r7, #12]
    14f6:	e7ed      	b.n	14d4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
	}

	return syncWas;
    14f8:	7afb      	ldrb	r3, [r7, #11]
}
    14fa:	4618      	mov	r0, r3
    14fc:	3714      	adds	r7, #20
    14fe:	46bd      	mov	sp, r7
    1500:	bd90      	pop	{r4, r7, pc}
    1502:	bf00      	nop
    1504:	200010b0 	.word	0x200010b0
    1508:	20000184 	.word	0x20000184
    150c:	00006b15 	.word	0x00006b15
    1510:	00001c85 	.word	0x00001c85
    1514:	000043a9 	.word	0x000043a9

00001518 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    1518:	b590      	push	{r4, r7, lr}
    151a:	b089      	sub	sp, #36	; 0x24
    151c:	af02      	add	r7, sp, #8
    151e:	60f8      	str	r0, [r7, #12]
    1520:	460b      	mov	r3, r1
    1522:	607a      	str	r2, [r7, #4]
    1524:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    1526:	2300      	movs	r3, #0
    1528:	617b      	str	r3, [r7, #20]
    152a:	697b      	ldr	r3, [r7, #20]
    152c:	2b03      	cmp	r3, #3
    152e:	d82e      	bhi.n	158e <_ZN8CO_Class15CO_process_TPDOEhm+0x76>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    1530:	4b19      	ldr	r3, [pc, #100]	; (1598 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	697a      	ldr	r2, [r7, #20]
    1536:	320a      	adds	r2, #10
    1538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    153c:	7fdb      	ldrb	r3, [r3, #31]
    153e:	2b00      	cmp	r3, #0
    1540:	d111      	bne.n	1566 <_ZN8CO_Class15CO_process_TPDOEhm+0x4e>
    1542:	4b15      	ldr	r3, [pc, #84]	; (1598 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    1544:	681b      	ldr	r3, [r3, #0]
    1546:	697a      	ldr	r2, [r7, #20]
    1548:	320a      	adds	r2, #10
    154a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    154e:	4b12      	ldr	r3, [pc, #72]	; (1598 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    1550:	681b      	ldr	r3, [r3, #0]
    1552:	697a      	ldr	r2, [r7, #20]
    1554:	320a      	adds	r2, #10
    1556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    155a:	4619      	mov	r1, r3
    155c:	68f8      	ldr	r0, [r7, #12]
    155e:	4b0f      	ldr	r3, [pc, #60]	; (159c <_ZN8CO_Class15CO_process_TPDOEhm+0x84>)
    1560:	4798      	blx	r3
    1562:	4603      	mov	r3, r0
    1564:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    1566:	4b0c      	ldr	r3, [pc, #48]	; (1598 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    1568:	681b      	ldr	r3, [r3, #0]
    156a:	697a      	ldr	r2, [r7, #20]
    156c:	320a      	adds	r2, #10
    156e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    1572:	4b09      	ldr	r3, [pc, #36]	; (1598 <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    1574:	681b      	ldr	r3, [r3, #0]
    1576:	695a      	ldr	r2, [r3, #20]
    1578:	7af8      	ldrb	r0, [r7, #11]
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	9300      	str	r3, [sp, #0]
    157e:	4603      	mov	r3, r0
    1580:	68f8      	ldr	r0, [r7, #12]
    1582:	4c07      	ldr	r4, [pc, #28]	; (15a0 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
    1584:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    1586:	697b      	ldr	r3, [r7, #20]
    1588:	3301      	adds	r3, #1
    158a:	617b      	str	r3, [r7, #20]
    158c:	e7cd      	b.n	152a <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    158e:	bf00      	nop
    1590:	371c      	adds	r7, #28
    1592:	46bd      	mov	sp, r7
    1594:	bd90      	pop	{r4, r7, pc}
    1596:	bf00      	nop
    1598:	200010b0 	.word	0x200010b0
    159c:	0000412d 	.word	0x0000412d
    15a0:	00004479 	.word	0x00004479

000015a4 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    15a4:	b480      	push	{r7}
    15a6:	b083      	sub	sp, #12
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    15b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    15b6:	4618      	mov	r0, r3
    15b8:	370c      	adds	r7, #12
    15ba:	46bd      	mov	sp, r7
    15bc:	bc80      	pop	{r7}
    15be:	4770      	bx	lr

000015c0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    15c0:	b480      	push	{r7}
    15c2:	b083      	sub	sp, #12
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    15cc:	4618      	mov	r0, r3
    15ce:	370c      	adds	r7, #12
    15d0:	46bd      	mov	sp, r7
    15d2:	bc80      	pop	{r7}
    15d4:	4770      	bx	lr
	...

000015d8 <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
	canopen->receivedCOMsg.data=canopen->co_rx_buffer_64;
    15e0:	4b0e      	ldr	r3, [pc, #56]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	4a0d      	ldr	r2, [pc, #52]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    15e6:	6812      	ldr	r2, [r2, #0]
    15e8:	321b      	adds	r2, #27
    15ea:	665a      	str	r2, [r3, #100]	; 0x64
	can_async_read(descr, &(canopen->receivedCOMsg));
    15ec:	4b0b      	ldr	r3, [pc, #44]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	335c      	adds	r3, #92	; 0x5c
    15f2:	4619      	mov	r1, r3
    15f4:	6878      	ldr	r0, [r7, #4]
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <_ZL14CO_rx_callbackP20can_async_descriptor+0x48>)
    15f8:	4798      	blx	r3
	canopen->ProcessInterrupt_Rx();
    15fa:	4b08      	ldr	r3, [pc, #32]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	4a06      	ldr	r2, [pc, #24]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    1604:	6812      	ldr	r2, [r2, #0]
    1606:	4610      	mov	r0, r2
    1608:	4798      	blx	r3
	canopen->receivedRxCOCallback=true;
    160a:	4b04      	ldr	r3, [pc, #16]	; (161c <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	2201      	movs	r2, #1
    1610:	761a      	strb	r2, [r3, #24]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    1612:	bf00      	nop
    1614:	3708      	adds	r7, #8
    1616:	46bd      	mov	sp, r7
    1618:	bd80      	pop	{r7, pc}
    161a:	bf00      	nop
    161c:	20001964 	.word	0x20001964
    1620:	00008439 	.word	0x00008439

00001624 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    1624:	b590      	push	{r4, r7, lr}
    1626:	b083      	sub	sp, #12
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]

	canopen->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    162e:	681c      	ldr	r4, [r3, #0]
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	4618      	mov	r0, r3
    1636:	4b07      	ldr	r3, [pc, #28]	; (1654 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    1638:	4798      	blx	r3
    163a:	4603      	mov	r3, r0
    163c:	6163      	str	r3, [r4, #20]
	canopen->receivedIntCOCallback=true;
    163e:	4b04      	ldr	r3, [pc, #16]	; (1650 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    1640:	681b      	ldr	r3, [r3, #0]
    1642:	2201      	movs	r2, #1
    1644:	769a      	strb	r2, [r3, #26]
}
    1646:	bf00      	nop
    1648:	370c      	adds	r7, #12
    164a:	46bd      	mov	sp, r7
    164c:	bd90      	pop	{r4, r7, pc}
    164e:	bf00      	nop
    1650:	20001964 	.word	0x20001964
    1654:	000015c1 	.word	0x000015c1

00001658 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    1658:	b480      	push	{r7}
    165a:	b083      	sub	sp, #12
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen->receivedtxCOCallback=true;
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	2201      	movs	r2, #1
    1666:	765a      	strb	r2, [r3, #25]
	
}
    1668:	bf00      	nop
    166a:	370c      	adds	r7, #12
    166c:	46bd      	mov	sp, r7
    166e:	bc80      	pop	{r7}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	20001964 	.word	0x20001964

00001678 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	3304      	adds	r3, #4
    1684:	4618      	mov	r0, r3
    1686:	4b0f      	ldr	r3, [pc, #60]	; (16c4 <_ZN15CO_Driver_ClassC1Ev+0x4c>)
    1688:	4798      	blx	r3
    168a:	6878      	ldr	r0, [r7, #4]
    168c:	4b0e      	ldr	r3, [pc, #56]	; (16c8 <_ZN15CO_Driver_ClassC1Ev+0x50>)
    168e:	4798      	blx	r3
    1690:	6878      	ldr	r0, [r7, #4]
    1692:	4b0e      	ldr	r3, [pc, #56]	; (16cc <_ZN15CO_Driver_ClassC1Ev+0x54>)
    1694:	4798      	blx	r3
    1696:	6878      	ldr	r0, [r7, #4]
    1698:	4b0d      	ldr	r3, [pc, #52]	; (16d0 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    169a:	4798      	blx	r3
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	330c      	adds	r3, #12
    16a0:	4618      	mov	r0, r3
    16a2:	4b0c      	ldr	r3, [pc, #48]	; (16d4 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    16a4:	4798      	blx	r3
    16a6:	4a0c      	ldr	r2, [pc, #48]	; (16d8 <_ZN15CO_Driver_ClassC1Ev+0x60>)
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    16ac:	687b      	ldr	r3, [r7, #4]
    16ae:	2200      	movs	r2, #0
    16b0:	66da      	str	r2, [r3, #108]	; 0x6c
	canopen=this;
    16b2:	4a0a      	ldr	r2, [pc, #40]	; (16dc <_ZN15CO_Driver_ClassC1Ev+0x64>)
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	4618      	mov	r0, r3
    16bc:	3708      	adds	r7, #8
    16be:	46bd      	mov	sp, r7
    16c0:	bd80      	pop	{r7, pc}
    16c2:	bf00      	nop
    16c4:	00002155 	.word	0x00002155
    16c8:	00002d8f 	.word	0x00002d8f
    16cc:	000066a9 	.word	0x000066a9
    16d0:	0000334d 	.word	0x0000334d
    16d4:	00002a61 	.word	0x00002a61
    16d8:	000142fc 	.word	0x000142fc
    16dc:	20001964 	.word	0x20001964

000016e0 <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    16e0:	b580      	push	{r7, lr}
    16e2:	b082      	sub	sp, #8
    16e4:	af00      	add	r7, sp, #0
    16e6:	6078      	str	r0, [r7, #4]
    16e8:	4a0d      	ldr	r2, [pc, #52]	; (1720 <_ZN15CO_Driver_ClassD1Ev+0x40>)
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	601a      	str	r2, [r3, #0]
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	330c      	adds	r3, #12
    16f2:	4618      	mov	r0, r3
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <_ZN15CO_Driver_ClassD1Ev+0x44>)
    16f6:	4798      	blx	r3
    16f8:	6878      	ldr	r0, [r7, #4]
    16fa:	4b0b      	ldr	r3, [pc, #44]	; (1728 <_ZN15CO_Driver_ClassD1Ev+0x48>)
    16fc:	4798      	blx	r3
    16fe:	6878      	ldr	r0, [r7, #4]
    1700:	4b0a      	ldr	r3, [pc, #40]	; (172c <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    1702:	4798      	blx	r3
    1704:	6878      	ldr	r0, [r7, #4]
    1706:	4b0a      	ldr	r3, [pc, #40]	; (1730 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    1708:	4798      	blx	r3
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	3304      	adds	r3, #4
    170e:	4618      	mov	r0, r3
    1710:	4b08      	ldr	r3, [pc, #32]	; (1734 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    1712:	4798      	blx	r3
{
} //~CO_Driver_Class
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	4618      	mov	r0, r3
    1718:	3708      	adds	r7, #8
    171a:	46bd      	mov	sp, r7
    171c:	bd80      	pop	{r7, pc}
    171e:	bf00      	nop
    1720:	000142fc 	.word	0x000142fc
    1724:	00002a81 	.word	0x00002a81
    1728:	00003361 	.word	0x00003361
    172c:	000066bd 	.word	0x000066bd
    1730:	00002da3 	.word	0x00002da3
    1734:	0000217d 	.word	0x0000217d

00001738 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    1738:	b480      	push	{r7}
    173a:	b085      	sub	sp, #20
    173c:	af00      	add	r7, sp, #0
    173e:	60f8      	str	r0, [r7, #12]
    1740:	60b9      	str	r1, [r7, #8]
    1742:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    1744:	68bb      	ldr	r3, [r7, #8]
    1746:	2200      	movs	r2, #0
    1748:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    174a:	68bb      	ldr	r3, [r7, #8]
    174c:	2200      	movs	r2, #0
    174e:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	791a      	ldrb	r2, [r3, #4]
    1754:	68bb      	ldr	r3, [r7, #8]
    1756:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	089a      	lsrs	r2, r3, #2
    175e:	68bb      	ldr	r3, [r7, #8]
    1760:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	b2db      	uxtb	r3, r3
    1768:	f003 0302 	and.w	r3, r3, #2
    176c:	b2da      	uxtb	r2, r3
    176e:	68bb      	ldr	r3, [r7, #8]
    1770:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	1d5a      	adds	r2, r3, #5
    1776:	68bb      	ldr	r3, [r7, #8]
    1778:	609a      	str	r2, [r3, #8]
}
    177a:	bf00      	nop
    177c:	3714      	adds	r7, #20
    177e:	46bd      	mov	sp, r7
    1780:	bc80      	pop	{r7}
    1782:	4770      	bx	lr

00001784 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    1784:	b590      	push	{r4, r7, lr}
    1786:	b085      	sub	sp, #20
    1788:	af00      	add	r7, sp, #0
    178a:	60f8      	str	r0, [r7, #12]
    178c:	60b9      	str	r1, [r7, #8]
    178e:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    1790:	687a      	ldr	r2, [r7, #4]
    1792:	68bb      	ldr	r3, [r7, #8]
    1794:	4614      	mov	r4, r2
    1796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    179c:	68bb      	ldr	r3, [r7, #8]
    179e:	7b1a      	ldrb	r2, [r3, #12]
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    17a4:	68bb      	ldr	r3, [r7, #8]
    17a6:	681a      	ldr	r2, [r3, #0]
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	f103 0015 	add.w	r0, r3, #21
    17b2:	68bb      	ldr	r3, [r7, #8]
    17b4:	6899      	ldr	r1, [r3, #8]
    17b6:	68bb      	ldr	r3, [r7, #8]
    17b8:	7b1b      	ldrb	r3, [r3, #12]
    17ba:	461a      	mov	r2, r3
    17bc:	4b02      	ldr	r3, [pc, #8]	; (17c8 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    17be:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    17c0:	bf00      	nop
    17c2:	3714      	adds	r7, #20
    17c4:	46bd      	mov	sp, r7
    17c6:	bd90      	pop	{r4, r7, pc}
    17c8:	00013fd5 	.word	0x00013fd5

000017cc <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    17cc:	b480      	push	{r7}
    17ce:	b083      	sub	sp, #12
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
    17d4:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	683a      	ldr	r2, [r7, #0]
    17da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    17de:	bf00      	nop
    17e0:	370c      	adds	r7, #12
    17e2:	46bd      	mov	sp, r7
    17e4:	bc80      	pop	{r7}
    17e6:	4770      	bx	lr

000017e8 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    17e8:	b580      	push	{r7, lr}
    17ea:	b084      	sub	sp, #16
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	2200      	movs	r2, #0
    17f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    17fe:	681b      	ldr	r3, [r3, #0]
    1800:	4618      	mov	r0, r3
    1802:	4b0a      	ldr	r3, [pc, #40]	; (182c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    1804:	4798      	blx	r3
    1806:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    180e:	f06f 030e 	mvn.w	r3, #14
    1812:	e007      	b.n	1824 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    181a:	2201      	movs	r2, #1
    181c:	751a      	strb	r2, [r3, #20]
	return Error;
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	f993 3094 	ldrsb.w	r3, [r3, #148]	; 0x94
}
    1824:	4618      	mov	r0, r3
    1826:	3710      	adds	r7, #16
    1828:	46bd      	mov	sp, r7
    182a:	bd80      	pop	{r7, pc}
    182c:	000083fd 	.word	0x000083fd

00001830 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    1830:	b580      	push	{r7, lr}
    1832:	b086      	sub	sp, #24
    1834:	af00      	add	r7, sp, #0
    1836:	60f8      	str	r0, [r7, #12]
    1838:	60b9      	str	r1, [r7, #8]
    183a:	607a      	str	r2, [r7, #4]
    183c:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	687a      	ldr	r2, [r7, #4]
    1842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    1846:	68bb      	ldr	r3, [r7, #8]
    1848:	2b00      	cmp	r3, #0
    184a:	d005      	beq.n	1858 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    184c:	683b      	ldr	r3, [r7, #0]
    184e:	2b00      	cmp	r3, #0
    1850:	d002      	beq.n	1858 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1854:	2b00      	cmp	r3, #0
    1856:	d102      	bne.n	185e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    1858:	f04f 33ff 	mov.w	r3, #4294967295
    185c:	e084      	b.n	1968 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    185e:	68fb      	ldr	r3, [r7, #12]
    1860:	68ba      	ldr	r2, [r7, #8]
    1862:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    1864:	68bb      	ldr	r3, [r7, #8]
    1866:	687a      	ldr	r2, [r7, #4]
    1868:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    186a:	68bb      	ldr	r3, [r7, #8]
    186c:	683a      	ldr	r2, [r7, #0]
    186e:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    1870:	68bb      	ldr	r3, [r7, #8]
    1872:	6a3a      	ldr	r2, [r7, #32]
    1874:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    1876:	68bb      	ldr	r3, [r7, #8]
    1878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    187a:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    187c:	68bb      	ldr	r3, [r7, #8]
    187e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1880:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    1882:	68bb      	ldr	r3, [r7, #8]
    1884:	2200      	movs	r2, #0
    1886:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    1888:	68bb      	ldr	r3, [r7, #8]
    188a:	2200      	movs	r2, #0
    188c:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    188e:	68bb      	ldr	r3, [r7, #8]
    1890:	2200      	movs	r2, #0
    1892:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    1894:	68bb      	ldr	r3, [r7, #8]
    1896:	2201      	movs	r2, #1
    1898:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    189a:	68bb      	ldr	r3, [r7, #8]
    189c:	2200      	movs	r2, #0
    189e:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    18a0:	68bb      	ldr	r3, [r7, #8]
    18a2:	2200      	movs	r2, #0
    18a4:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    18a6:	68bb      	ldr	r3, [r7, #8]
    18a8:	2200      	movs	r2, #0
    18aa:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	2200      	movs	r2, #0
    18b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    18ba:	6a3b      	ldr	r3, [r7, #32]
    18bc:	429a      	cmp	r2, r3
    18be:	d217      	bcs.n	18f0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    18c0:	68fb      	ldr	r3, [r7, #12]
    18c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    18c6:	011b      	lsls	r3, r3, #4
    18c8:	683a      	ldr	r2, [r7, #0]
    18ca:	4413      	add	r3, r2
    18cc:	2200      	movs	r2, #0
    18ce:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    18d0:	68fb      	ldr	r3, [r7, #12]
    18d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    18d6:	011b      	lsls	r3, r3, #4
    18d8:	683a      	ldr	r2, [r7, #0]
    18da:	4413      	add	r3, r2
    18dc:	2200      	movs	r2, #0
    18de:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    18e0:	68fb      	ldr	r3, [r7, #12]
    18e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    18e6:	1c5a      	adds	r2, r3, #1
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    18ee:	e7e1      	b.n	18b4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    18f0:	68fb      	ldr	r3, [r7, #12]
    18f2:	2200      	movs	r2, #0
    18f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    18fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1900:	429a      	cmp	r2, r3
    1902:	d20f      	bcs.n	1924 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    190a:	011b      	lsls	r3, r3, #4
    190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    190e:	4413      	add	r3, r2
    1910:	2200      	movs	r2, #0
    1912:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    191a:	1c5a      	adds	r2, r3, #1
    191c:	68fb      	ldr	r3, [r7, #12]
    191e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1922:	e7e9      	b.n	18f8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    1924:	68f8      	ldr	r0, [r7, #12]
    1926:	4b12      	ldr	r3, [pc, #72]	; (1970 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    1928:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1930:	4a10      	ldr	r2, [pc, #64]	; (1974 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    1932:	2100      	movs	r1, #0
    1934:	4618      	mov	r0, r3
    1936:	4b10      	ldr	r3, [pc, #64]	; (1978 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    1938:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1940:	4a0e      	ldr	r2, [pc, #56]	; (197c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1942:	2102      	movs	r1, #2
    1944:	4618      	mov	r0, r3
    1946:	4b0c      	ldr	r3, [pc, #48]	; (1978 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    1948:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    194a:	6878      	ldr	r0, [r7, #4]
    194c:	4b0c      	ldr	r3, [pc, #48]	; (1980 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    194e:	4798      	blx	r3
    1950:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    1952:	697b      	ldr	r3, [r7, #20]
    1954:	2b00      	cmp	r3, #0
    1956:	d002      	beq.n	195e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1958:	f06f 030e 	mvn.w	r3, #14
    195c:	e004      	b.n	1968 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	68ba      	ldr	r2, [r7, #8]
    1962:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return CO_ERROR_NO;
    1966:	2300      	movs	r3, #0
}
    1968:	4618      	mov	r0, r3
    196a:	3718      	adds	r7, #24
    196c:	46bd      	mov	sp, r7
    196e:	bd80      	pop	{r7, pc}
    1970:	00001985 	.word	0x00001985
    1974:	000015d9 	.word	0x000015d9
    1978:	000084d1 	.word	0x000084d1
    197c:	00001625 	.word	0x00001625
    1980:	000083fd 	.word	0x000083fd

00001984 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    1984:	b480      	push	{r7}
    1986:	b083      	sub	sp, #12
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    198c:	bf00      	nop
    198e:	370c      	adds	r7, #12
    1990:	46bd      	mov	sp, r7
    1992:	bc80      	pop	{r7}
    1994:	4770      	bx	lr
	...

00001998 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    1998:	b590      	push	{r4, r7, lr}
    199a:	b087      	sub	sp, #28
    199c:	af00      	add	r7, sp, #0
    199e:	60f8      	str	r0, [r7, #12]
    19a0:	60b9      	str	r1, [r7, #8]
    19a2:	607a      	str	r2, [r7, #4]
    19a4:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	2200      	movs	r2, #0
    19aa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    19b4:	2b00      	cmp	r3, #0
    19b6:	d060      	beq.n	1a7a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    19b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19ba:	2b00      	cmp	r3, #0
    19bc:	d05d      	beq.n	1a7a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    19be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    19c0:	2b00      	cmp	r3, #0
    19c2:	d05a      	beq.n	1a7a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    19ca:	689a      	ldr	r2, [r3, #8]
    19cc:	68bb      	ldr	r3, [r7, #8]
    19ce:	429a      	cmp	r2, r3
    19d0:	d953      	bls.n	1a7a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    19d8:	685a      	ldr	r2, [r3, #4]
    19da:	68bb      	ldr	r3, [r7, #8]
    19dc:	011b      	lsls	r3, r3, #4
    19de:	4413      	add	r3, r2
    19e0:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    19e2:	697b      	ldr	r3, [r7, #20]
    19e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19e6:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    19e8:	697b      	ldr	r3, [r7, #20]
    19ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    19ec:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	009a      	lsls	r2, r3, #2
    19f2:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    19f6:	4013      	ands	r3, r2
    19f8:	697a      	ldr	r2, [r7, #20]
    19fa:	6013      	str	r3, [r2, #0]
		if (rtr)
    19fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1a00:	2b00      	cmp	r3, #0
    1a02:	d005      	beq.n	1a10 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    1a04:	697b      	ldr	r3, [r7, #20]
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	f043 0202 	orr.w	r2, r3, #2
    1a0c:	697b      	ldr	r3, [r7, #20]
    1a0e:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    1a10:	683b      	ldr	r3, [r7, #0]
    1a12:	009a      	lsls	r2, r3, #2
    1a14:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    1a18:	4013      	ands	r3, r2
    1a1a:	697a      	ldr	r2, [r7, #20]
    1a1c:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    1a1e:	697b      	ldr	r3, [r7, #20]
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	f043 0202 	orr.w	r2, r3, #2
    1a26:	697b      	ldr	r3, [r7, #20]
    1a28:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    1a2a:	68fb      	ldr	r3, [r7, #12]
    1a2c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1a30:	7d5b      	ldrb	r3, [r3, #21]
    1a32:	b2db      	uxtb	r3, r3
    1a34:	2b00      	cmp	r3, #0
    1a36:	bf14      	ite	ne
    1a38:	2301      	movne	r3, #1
    1a3a:	2300      	moveq	r3, #0
    1a3c:	b2db      	uxtb	r3, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d120      	bne.n	1a84 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    1a42:	697b      	ldr	r3, [r7, #20]
    1a44:	681a      	ldr	r2, [r3, #0]
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			CO_Filter.mask = buffer->mask;
    1a4c:	697b      	ldr	r3, [r7, #20]
    1a4e:	685a      	ldr	r2, [r3, #4]
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    1a56:	68fb      	ldr	r3, [r7, #12]
    1a58:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1a5c:	6818      	ldr	r0, [r3, #0]
    1a5e:	68bb      	ldr	r3, [r7, #8]
    1a60:	b2d9      	uxtb	r1, r3
    1a62:	68fb      	ldr	r3, [r7, #12]
    1a64:	f503 738c 	add.w	r3, r3, #280	; 0x118
    1a68:	2200      	movs	r2, #0
    1a6a:	4c0a      	ldr	r4, [pc, #40]	; (1a94 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    1a6c:	47a0      	blx	r4
    1a6e:	4603      	mov	r3, r0
    1a70:	b25a      	sxtb	r2, r3
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		}
    1a78:	e004      	b.n	1a84 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    1a7a:	68fb      	ldr	r3, [r7, #12]
    1a7c:	22ff      	movs	r2, #255	; 0xff
    1a7e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    1a82:	e000      	b.n	1a86 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    1a84:	bf00      	nop
	}
	return ret;
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	f993 3095 	ldrsb.w	r3, [r3, #149]	; 0x95
}
    1a8c:	4618      	mov	r0, r3
    1a8e:	371c      	adds	r7, #28
    1a90:	46bd      	mov	sp, r7
    1a92:	bd90      	pop	{r4, r7, pc}
    1a94:	0000854d 	.word	0x0000854d

00001a98 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    1a98:	b480      	push	{r7}
    1a9a:	b085      	sub	sp, #20
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	60f8      	str	r0, [r7, #12]
    1aa0:	60b9      	str	r1, [r7, #8]
    1aa2:	607a      	str	r2, [r7, #4]
    1aa4:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    1aa6:	68fb      	ldr	r3, [r7, #12]
    1aa8:	2200      	movs	r2, #0
    1aaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    1aae:	68fb      	ldr	r3, [r7, #12]
    1ab0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d03c      	beq.n	1b32 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    1ab8:	68fb      	ldr	r3, [r7, #12]
    1aba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1abe:	691a      	ldr	r2, [r3, #16]
    1ac0:	68bb      	ldr	r3, [r7, #8]
    1ac2:	429a      	cmp	r2, r3
    1ac4:	d935      	bls.n	1b32 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1acc:	68da      	ldr	r2, [r3, #12]
    1ace:	68bb      	ldr	r3, [r7, #8]
    1ad0:	011b      	lsls	r3, r3, #4
    1ad2:	441a      	add	r2, r3
    1ad4:	68fb      	ldr	r3, [r7, #12]
    1ad6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    1ada:	68fb      	ldr	r3, [r7, #12]
    1adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1ae0:	68fa      	ldr	r2, [r7, #12]
    1ae2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    1ae6:	6812      	ldr	r2, [r2, #0]
    1ae8:	f3c2 020a 	ubfx	r2, r2, #0, #11
    1aec:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1af4:	687a      	ldr	r2, [r7, #4]
    1af6:	0092      	lsls	r2, r2, #2
    1af8:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    1afa:	78fb      	ldrb	r3, [r7, #3]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d009      	beq.n	1b14 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    1b00:	68fb      	ldr	r3, [r7, #12]
    1b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b06:	68fa      	ldr	r2, [r7, #12]
    1b08:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    1b0c:	6812      	ldr	r2, [r2, #0]
    1b0e:	f042 0202 	orr.w	r2, r2, #2
    1b12:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    1b14:	68fb      	ldr	r3, [r7, #12]
    1b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b1a:	7e3a      	ldrb	r2, [r7, #24]
    1b1c:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    1b1e:	68fb      	ldr	r3, [r7, #12]
    1b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b24:	2200      	movs	r2, #0
    1b26:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    1b28:	68fb      	ldr	r3, [r7, #12]
    1b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b2e:	7f3a      	ldrb	r2, [r7, #28]
    1b30:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    1b32:	68fb      	ldr	r3, [r7, #12]
    1b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
    1b38:	4618      	mov	r0, r3
    1b3a:	3714      	adds	r7, #20
    1b3c:	46bd      	mov	sp, r7
    1b3e:	bc80      	pop	{r7}
    1b40:	4770      	bx	lr
	...

00001b44 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    1b44:	b590      	push	{r4, r7, lr}
    1b46:	b089      	sub	sp, #36	; 0x24
    1b48:	af02      	add	r7, sp, #8
    1b4a:	6078      	str	r0, [r7, #4]
    1b4c:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	2200      	movs	r2, #0
    1b52:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

	if(buffer->bufferFull){
    1b56:	683b      	ldr	r3, [r7, #0]
    1b58:	7b5b      	ldrb	r3, [r3, #13]
    1b5a:	b2db      	uxtb	r3, r3
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	bf14      	ite	ne
    1b60:	2301      	movne	r3, #1
    1b62:	2300      	moveq	r3, #0
    1b64:	b2db      	uxtb	r3, r3
    1b66:	2b00      	cmp	r3, #0
    1b68:	d01d      	beq.n	1ba6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1b70:	7ddb      	ldrb	r3, [r3, #23]
    1b72:	b2db      	uxtb	r3, r3
    1b74:	2b00      	cmp	r3, #0
    1b76:	bf0c      	ite	eq
    1b78:	2301      	moveq	r3, #1
    1b7a:	2300      	movne	r3, #0
    1b7c:	b2db      	uxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d00d      	beq.n	1b9e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    1b82:	687b      	ldr	r3, [r7, #4]
    1b84:	1d18      	adds	r0, r3, #4
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1b8c:	6a19      	ldr	r1, [r3, #32]
    1b8e:	683b      	ldr	r3, [r7, #0]
    1b90:	681b      	ldr	r3, [r3, #0]
    1b92:	9300      	str	r3, [sp, #0]
    1b94:	f248 1310 	movw	r3, #33040	; 0x8110
    1b98:	2214      	movs	r2, #20
    1b9a:	4c34      	ldr	r4, [pc, #208]	; (1c6c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x128>)
    1b9c:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	22f7      	movs	r2, #247	; 0xf7
    1ba2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	3370      	adds	r3, #112	; 0x70
    1baa:	683a      	ldr	r2, [r7, #0]
    1bac:	4619      	mov	r1, r3
    1bae:	6878      	ldr	r0, [r7, #4]
    1bb0:	4b2f      	ldr	r3, [pc, #188]	; (1c70 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    1bb2:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1bba:	699b      	ldr	r3, [r3, #24]
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	bf0c      	ite	eq
    1bc0:	2301      	moveq	r3, #1
    1bc2:	2300      	movne	r3, #0
    1bc4:	b2db      	uxtb	r3, r3
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d040      	beq.n	1c4c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x108>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1bd0:	683a      	ldr	r2, [r7, #0]
    1bd2:	7b92      	ldrb	r2, [r2, #14]
    1bd4:	b2d2      	uxtb	r2, r2
    1bd6:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1bde:	681b      	ldr	r3, [r3, #0]
    1be0:	4a24      	ldr	r2, [pc, #144]	; (1c74 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    1be2:	2101      	movs	r1, #1
    1be4:	4618      	mov	r0, r3
    1be6:	4b24      	ldr	r3, [pc, #144]	; (1c78 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    1be8:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	4618      	mov	r0, r3
    1bf4:	4b21      	ldr	r3, [pc, #132]	; (1c7c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    1bf6:	4798      	blx	r3
		receivedtxCOCallback=false;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	2200      	movs	r2, #0
    1bfc:	765a      	strb	r2, [r3, #25]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1bfe:	f3ef 8310 	mrs	r3, PRIMASK
    1c02:	60fb      	str	r3, [r7, #12]
  return(result);
    1c04:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    1c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1c08:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1c10:	681a      	ldr	r2, [r3, #0]
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	3370      	adds	r3, #112	; 0x70
    1c16:	4619      	mov	r1, r3
    1c18:	4610      	mov	r0, r2
    1c1a:	4b19      	ldr	r3, [pc, #100]	; (1c80 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    1c1c:	4798      	blx	r3
    1c1e:	4603      	mov	r3, r0
    1c20:	461a      	mov	r2, r3
    1c22:	687b      	ldr	r3, [r7, #4]
    1c24:	615a      	str	r2, [r3, #20]
    1c26:	697b      	ldr	r3, [r7, #20]
    1c28:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1c2a:	693b      	ldr	r3, [r7, #16]
    1c2c:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	695b      	ldr	r3, [r3, #20]
    1c34:	2b00      	cmp	r3, #0
    1c36:	bf14      	ite	ne
    1c38:	2301      	movne	r3, #1
    1c3a:	2300      	moveq	r3, #0
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d00d      	beq.n	1c5e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11a>
		{
			err = CO_ERROR_HAL;
    1c42:	687b      	ldr	r3, [r7, #4]
    1c44:	22f1      	movs	r2, #241	; 0xf1
    1c46:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    1c4a:	e008      	b.n	1c5e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11a>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    1c4c:	683b      	ldr	r3, [r7, #0]
    1c4e:	2201      	movs	r2, #1
    1c50:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1c58:	699a      	ldr	r2, [r3, #24]
    1c5a:	3201      	adds	r2, #1
    1c5c:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
}
    1c64:	4618      	mov	r0, r3
    1c66:	371c      	adds	r7, #28
    1c68:	46bd      	mov	sp, r7
    1c6a:	bd90      	pop	{r4, r7, pc}
    1c6c:	000025ad 	.word	0x000025ad
    1c70:	00001739 	.word	0x00001739
    1c74:	00001659 	.word	0x00001659
    1c78:	000084d1 	.word	0x000084d1
    1c7c:	000083fd 	.word	0x000083fd
    1c80:	00008485 	.word	0x00008485

00001c84 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    1c84:	b590      	push	{r4, r7, lr}
    1c86:	b089      	sub	sp, #36	; 0x24
    1c88:	af02      	add	r7, sp, #8
    1c8a:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	2200      	movs	r2, #0
    1c90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c94:	f3ef 8310 	mrs	r3, PRIMASK
    1c98:	60bb      	str	r3, [r7, #8]
  return(result);
    1c9a:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    1c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    1c9e:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1ca6:	7d9b      	ldrb	r3, [r3, #22]
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	2b00      	cmp	r3, #0
    1cac:	bf14      	ite	ne
    1cae:	2301      	movne	r3, #1
    1cb0:	2300      	moveq	r3, #0
    1cb2:	b2db      	uxtb	r3, r3
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d008      	beq.n	1cca <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1cbe:	2200      	movs	r2, #0
    1cc0:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	2201      	movs	r2, #1
    1cc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1cd0:	699b      	ldr	r3, [r3, #24]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	bf14      	ite	ne
    1cd6:	2301      	movne	r3, #1
    1cd8:	2300      	moveq	r3, #0
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d03c      	beq.n	1d5a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1ce6:	68db      	ldr	r3, [r3, #12]
    1ce8:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1cf0:	691a      	ldr	r2, [r3, #16]
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d02b      	beq.n	1d5a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    1d02:	697b      	ldr	r3, [r7, #20]
    1d04:	7b5b      	ldrb	r3, [r3, #13]
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2b00      	cmp	r3, #0
    1d0a:	bf14      	ite	ne
    1d0c:	2301      	movne	r3, #1
    1d0e:	2300      	moveq	r3, #0
    1d10:	b2db      	uxtb	r3, r3
    1d12:	2b00      	cmp	r3, #0
    1d14:	d016      	beq.n	1d44 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    1d16:	697b      	ldr	r3, [r7, #20]
    1d18:	7b9b      	ldrb	r3, [r3, #14]
    1d1a:	b2db      	uxtb	r3, r3
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	bf14      	ite	ne
    1d20:	2301      	movne	r3, #1
    1d22:	2300      	moveq	r3, #0
    1d24:	b2db      	uxtb	r3, r3
    1d26:	2b00      	cmp	r3, #0
    1d28:	d00c      	beq.n	1d44 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    1d2a:	697b      	ldr	r3, [r7, #20]
    1d2c:	2200      	movs	r2, #0
    1d2e:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1d36:	699a      	ldr	r2, [r3, #24]
    1d38:	3a01      	subs	r2, #1
    1d3a:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	2202      	movs	r2, #2
    1d40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				}
			}
			buffer++;
    1d44:	697b      	ldr	r3, [r7, #20]
    1d46:	3310      	adds	r3, #16
    1d48:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    1d50:	1e5a      	subs	r2, r3, #1
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1d58:	e7ce      	b.n	1cf8 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    1d5a:	693b      	ldr	r3, [r7, #16]
    1d5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d00e      	beq.n	1d8c <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	1d18      	adds	r0, r3, #4
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1d78:	6a19      	ldr	r1, [r3, #32]
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1d80:	9300      	str	r3, [sp, #0]
    1d82:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    1d86:	2215      	movs	r2, #21
    1d88:	4c02      	ldr	r4, [pc, #8]	; (1d94 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    1d8a:	47a0      	blx	r4
	}
}
    1d8c:	bf00      	nop
    1d8e:	371c      	adds	r7, #28
    1d90:	46bd      	mov	sp, r7
    1d92:	bd90      	pop	{r4, r7, pc}
    1d94:	000025ad 	.word	0x000025ad

00001d98 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    1d98:	b590      	push	{r4, r7, lr}
    1d9a:	b087      	sub	sp, #28
    1d9c:	af02      	add	r7, sp, #8
    1d9e:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1da6:	6a1a      	ldr	r2, [r3, #32]
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1db4:	69da      	ldr	r2, [r3, #28]
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	695b      	ldr	r3, [r3, #20]
    1dba:	429a      	cmp	r2, r3
    1dbc:	bf14      	ite	ne
    1dbe:	2301      	movne	r3, #1
    1dc0:	2300      	moveq	r3, #0
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	f000 80ae 	beq.w	1f26 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1dd0:	687a      	ldr	r2, [r7, #4]
    1dd2:	6952      	ldr	r2, [r2, #20]
    1dd4:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	695b      	ldr	r3, [r3, #20]
    1dda:	f003 0303 	and.w	r3, r3, #3
    1dde:	2b00      	cmp	r3, #0
    1de0:	bf14      	ite	ne
    1de2:	2301      	movne	r3, #1
    1de4:	2300      	moveq	r3, #0
    1de6:	b2db      	uxtb	r3, r3
    1de8:	2b00      	cmp	r3, #0
    1dea:	d00d      	beq.n	1e08 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	1d18      	adds	r0, r3, #4
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	695b      	ldr	r3, [r3, #20]
    1dfa:	9300      	str	r3, [sp, #0]
    1dfc:	f248 1340 	movw	r3, #33088	; 0x8140
    1e00:	2212      	movs	r2, #18
    1e02:	4c4c      	ldr	r4, [pc, #304]	; (1f34 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    1e04:	47a0      	blx	r4
    1e06:	e076      	b.n	1ef6 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	1d18      	adds	r0, r3, #4
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	695b      	ldr	r3, [r3, #20]
    1e16:	2212      	movs	r2, #18
    1e18:	4c47      	ldr	r4, [pc, #284]	; (1f38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    1e1a:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	695b      	ldr	r3, [r3, #20]
    1e20:	2300      	movs	r3, #0
    1e22:	2b00      	cmp	r3, #0
    1e24:	d00b      	beq.n	1e3e <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	1d18      	adds	r0, r3, #4
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	695b      	ldr	r3, [r3, #20]
    1e34:	9300      	str	r3, [sp, #0]
    1e36:	2300      	movs	r3, #0
    1e38:	2201      	movs	r2, #1
    1e3a:	4c3e      	ldr	r4, [pc, #248]	; (1f34 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    1e3c:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	695b      	ldr	r3, [r3, #20]
    1e42:	f003 0302 	and.w	r3, r3, #2
    1e46:	2b00      	cmp	r3, #0
    1e48:	bf14      	ite	ne
    1e4a:	2301      	movne	r3, #1
    1e4c:	2300      	moveq	r3, #0
    1e4e:	b2db      	uxtb	r3, r3
    1e50:	2b00      	cmp	r3, #0
    1e52:	d019      	beq.n	1e88 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1e5a:	7ddb      	ldrb	r3, [r3, #23]
    1e5c:	b2db      	uxtb	r3, r3
    1e5e:	2b00      	cmp	r3, #0
    1e60:	bf0c      	ite	eq
    1e62:	2301      	moveq	r3, #1
    1e64:	2300      	movne	r3, #0
    1e66:	b2db      	uxtb	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d02f      	beq.n	1ecc <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	1d18      	adds	r0, r3, #4
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	695b      	ldr	r3, [r3, #20]
    1e7a:	9300      	str	r3, [sp, #0]
    1e7c:	f248 1320 	movw	r3, #33056	; 0x8120
    1e80:	2207      	movs	r2, #7
    1e82:	4c2c      	ldr	r4, [pc, #176]	; (1f34 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    1e84:	47a0      	blx	r4
    1e86:	e021      	b.n	1ecc <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	1d18      	adds	r0, r3, #4
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1e92:	2207      	movs	r2, #7
    1e94:	4619      	mov	r1, r3
    1e96:	4b29      	ldr	r3, [pc, #164]	; (1f3c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    1e98:	4798      	blx	r3
    1e9a:	4603      	mov	r3, r0
    1e9c:	73fb      	strb	r3, [r7, #15]
				if(isError)
    1e9e:	7bfb      	ldrb	r3, [r7, #15]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d013      	beq.n	1ecc <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	1d18      	adds	r0, r3, #4
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	695b      	ldr	r3, [r3, #20]
    1eb2:	2207      	movs	r2, #7
    1eb4:	4c20      	ldr	r4, [pc, #128]	; (1f38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    1eb6:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	1d18      	adds	r0, r3, #4
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	695b      	ldr	r3, [r3, #20]
    1ec6:	2214      	movs	r2, #20
    1ec8:	4c1b      	ldr	r4, [pc, #108]	; (1f38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    1eca:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	695b      	ldr	r3, [r3, #20]
    1ed0:	f003 0301 	and.w	r3, r3, #1
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	bf14      	ite	ne
    1ed8:	2301      	movne	r3, #1
    1eda:	2300      	moveq	r3, #0
    1edc:	b2db      	uxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d009      	beq.n	1ef6 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	1d18      	adds	r0, r3, #4
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	695b      	ldr	r3, [r3, #20]
    1ef0:	2201      	movs	r2, #1
    1ef2:	4c11      	ldr	r4, [pc, #68]	; (1f38 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    1ef4:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	695b      	ldr	r3, [r3, #20]
    1efa:	f003 0304 	and.w	r3, r3, #4
    1efe:	2b00      	cmp	r3, #0
    1f00:	bf14      	ite	ne
    1f02:	2301      	movne	r3, #1
    1f04:	2300      	moveq	r3, #0
    1f06:	b2db      	uxtb	r3, r3
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d00c      	beq.n	1f26 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	1d18      	adds	r0, r3, #4
    1f10:	687b      	ldr	r3, [r7, #4]
    1f12:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	695b      	ldr	r3, [r3, #20]
    1f1a:	9300      	str	r3, [sp, #0]
    1f1c:	f248 1310 	movw	r3, #33040	; 0x8110
    1f20:	2213      	movs	r2, #19
    1f22:	4c04      	ldr	r4, [pc, #16]	; (1f34 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x19c>)
    1f24:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	2200      	movs	r2, #0
    1f2a:	769a      	strb	r2, [r3, #26]
}
    1f2c:	bf00      	nop
    1f2e:	3714      	adds	r7, #20
    1f30:	46bd      	mov	sp, r7
    1f32:	bd90      	pop	{r4, r7, pc}
    1f34:	000025ad 	.word	0x000025ad
    1f38:	00002701 	.word	0x00002701
    1f3c:	0000284d 	.word	0x0000284d

00001f40 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	b084      	sub	sp, #16
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	33ec      	adds	r3, #236	; 0xec
    1f52:	461a      	mov	r2, r3
    1f54:	6878      	ldr	r0, [r7, #4]
    1f56:	4b30      	ldr	r3, [pc, #192]	; (2018 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd8>)
    1f58:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    1f60:	685a      	ldr	r2, [r3, #4]
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    1f6e:	009b      	lsls	r3, r3, #2
    1f70:	687a      	ldr	r2, [r7, #4]
    1f72:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
    1f76:	4313      	orrs	r3, r2
    1f78:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	2200      	movs	r2, #0
    1f7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1f8c:	689b      	ldr	r3, [r3, #8]
    1f8e:	429a      	cmp	r2, r3
    1f90:	d221      	bcs.n	1fd6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1f98:	681a      	ldr	r2, [r3, #0]
    1f9a:	68fb      	ldr	r3, [r7, #12]
    1f9c:	405a      	eors	r2, r3
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1fa4:	685b      	ldr	r3, [r3, #4]
    1fa6:	4013      	ands	r3, r2
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d104      	bne.n	1fb6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x76>
		{
			msgMatched = true;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	2201      	movs	r2, #1
    1fb0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			break;
    1fb4:	e00f      	b.n	1fd6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
		}
		MsgBuff++;
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1fbc:	f103 0210 	add.w	r2, r3, #16
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    1fcc:	1c5a      	adds	r2, r3, #1
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1fd4:	e7d5      	b.n	1f82 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x42>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d016      	beq.n	200e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    1fe0:	687b      	ldr	r3, [r7, #4]
    1fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d011      	beq.n	200e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1ff0:	68db      	ldr	r3, [r3, #12]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d00b      	beq.n	200e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1ffc:	68db      	ldr	r3, [r3, #12]
    1ffe:	687a      	ldr	r2, [r7, #4]
    2000:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    2004:	6890      	ldr	r0, [r2, #8]
    2006:	687a      	ldr	r2, [r7, #4]
    2008:	32ec      	adds	r2, #236	; 0xec
    200a:	4611      	mov	r1, r2
    200c:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    200e:	bf00      	nop
    2010:	3710      	adds	r7, #16
    2012:	46bd      	mov	sp, r7
    2014:	bd80      	pop	{r7, pc}
    2016:	bf00      	nop
    2018:	00001785 	.word	0x00001785

0000201c <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    201c:	b580      	push	{r7, lr}
    201e:	b084      	sub	sp, #16
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    2024:	4844      	ldr	r0, [pc, #272]	; (2138 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x11c>)
    2026:	4b45      	ldr	r3, [pc, #276]	; (213c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    2028:	4798      	blx	r3
    202a:	4603      	mov	r3, r0
    202c:	2b00      	cmp	r3, #0
    202e:	bf14      	ite	ne
    2030:	2301      	movne	r3, #1
    2032:	2300      	moveq	r3, #0
    2034:	b2db      	uxtb	r3, r3
    2036:	2b00      	cmp	r3, #0
    2038:	d07a      	beq.n	2130 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x114>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2040:	2200      	movs	r2, #0
    2042:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    204a:	2200      	movs	r2, #0
    204c:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2054:	699b      	ldr	r3, [r3, #24]
    2056:	2b00      	cmp	r3, #0
    2058:	bf14      	ite	ne
    205a:	2301      	movne	r3, #1
    205c:	2300      	moveq	r3, #0
    205e:	b2db      	uxtb	r3, r3
    2060:	2b00      	cmp	r3, #0
    2062:	d065      	beq.n	2130 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x114>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    206a:	68db      	ldr	r3, [r3, #12]
    206c:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2074:	691b      	ldr	r3, [r3, #16]
    2076:	60fb      	str	r3, [r7, #12]
    2078:	68fb      	ldr	r3, [r7, #12]
    207a:	2b00      	cmp	r3, #0
    207c:	d050      	beq.n	2120 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    207e:	68bb      	ldr	r3, [r7, #8]
    2080:	7b5b      	ldrb	r3, [r3, #13]
    2082:	b2db      	uxtb	r3, r3
    2084:	2b00      	cmp	r3, #0
    2086:	bf14      	ite	ne
    2088:	2301      	movne	r3, #1
    208a:	2300      	moveq	r3, #0
    208c:	b2db      	uxtb	r3, r3
    208e:	2b00      	cmp	r3, #0
    2090:	d03e      	beq.n	2110 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xf4>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    2092:	687b      	ldr	r3, [r7, #4]
    2094:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2098:	68ba      	ldr	r2, [r7, #8]
    209a:	7b92      	ldrb	r2, [r2, #14]
    209c:	b2d2      	uxtb	r2, r2
    209e:	759a      	strb	r2, [r3, #22]

					

					PrepareTxMessage(&msgHeader, buffer);
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	3370      	adds	r3, #112	; 0x70
    20a4:	68ba      	ldr	r2, [r7, #8]
    20a6:	4619      	mov	r1, r3
    20a8:	6878      	ldr	r0, [r7, #4]
    20aa:	4b25      	ldr	r3, [pc, #148]	; (2140 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    20ac:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    20b4:	4a23      	ldr	r2, [pc, #140]	; (2144 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    20b6:	2101      	movs	r1, #1
    20b8:	4618      	mov	r0, r3
    20ba:	4b23      	ldr	r3, [pc, #140]	; (2148 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    20bc:	4798      	blx	r3
					can_async_enable(canDescr);
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    20c4:	4618      	mov	r0, r3
    20c6:	4b21      	ldr	r3, [pc, #132]	; (214c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    20c8:	4798      	blx	r3
					receivedtxCOCallback=false;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	2200      	movs	r2, #0
    20ce:	765a      	strb	r2, [r3, #25]
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	3370      	adds	r3, #112	; 0x70
    20da:	4619      	mov	r1, r3
    20dc:	4610      	mov	r0, r2
    20de:	4b1c      	ldr	r3, [pc, #112]	; (2150 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x134>)
    20e0:	4798      	blx	r3
    20e2:	4603      	mov	r3, r0
    20e4:	461a      	mov	r2, r3
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	615a      	str	r2, [r3, #20]
					if( HalCanErrorCode != CO_ERROR_NO)
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	695b      	ldr	r3, [r3, #20]
    20ee:	2b00      	cmp	r3, #0
    20f0:	bf14      	ite	ne
    20f2:	2301      	movne	r3, #1
    20f4:	2300      	moveq	r3, #0
    20f6:	b2db      	uxtb	r3, r3
    20f8:	2b00      	cmp	r3, #0
    20fa:	d110      	bne.n	211e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x102>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    20fc:	68bb      	ldr	r3, [r7, #8]
    20fe:	2200      	movs	r2, #0
    2100:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2108:	699a      	ldr	r2, [r3, #24]
    210a:	3a01      	subs	r2, #1
    210c:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    210e:	e006      	b.n	211e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x102>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    2110:	68bb      	ldr	r3, [r7, #8]
    2112:	3310      	adds	r3, #16
    2114:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    2116:	68fb      	ldr	r3, [r7, #12]
    2118:	3b01      	subs	r3, #1
    211a:	60fb      	str	r3, [r7, #12]
    211c:	e7ac      	b.n	2078 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    211e:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    2120:	68fb      	ldr	r3, [r7, #12]
    2122:	2b00      	cmp	r3, #0
    2124:	d104      	bne.n	2130 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x114>
			{
				CAN_Module->CANtxCount = 0U;
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    212c:	2200      	movs	r2, #0
    212e:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    2130:	bf00      	nop
    2132:	3710      	adds	r7, #16
    2134:	46bd      	mov	sp, r7
    2136:	bd80      	pop	{r7, pc}
    2138:	42000400 	.word	0x42000400
    213c:	000015a5 	.word	0x000015a5
    2140:	00001739 	.word	0x00001739
    2144:	00001659 	.word	0x00001659
    2148:	000084d1 	.word	0x000084d1
    214c:	000083fd 	.word	0x000083fd
    2150:	00008485 	.word	0x00008485

00002154 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	6878      	ldr	r0, [r7, #4]
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    2160:	4798      	blx	r3
{
	ptrCOEMClass=this;
    2162:	4a05      	ldr	r2, [pc, #20]	; (2178 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	4618      	mov	r0, r3
    216c:	3708      	adds	r7, #8
    216e:	46bd      	mov	sp, r7
    2170:	bd80      	pop	{r7, pc}
    2172:	bf00      	nop
    2174:	00004629 	.word	0x00004629
    2178:	20001968 	.word	0x20001968

0000217c <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    217c:	b580      	push	{r7, lr}
    217e:	b082      	sub	sp, #8
    2180:	af00      	add	r7, sp, #0
    2182:	6078      	str	r0, [r7, #4]
    2184:	6878      	ldr	r0, [r7, #4]
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
    2188:	4798      	blx	r3
{
} //~CO_Emergency_Class
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	4618      	mov	r0, r3
    218e:	3708      	adds	r7, #8
    2190:	46bd      	mov	sp, r7
    2192:	bd80      	pop	{r7, pc}
    2194:	00004651 	.word	0x00004651

00002198 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    2198:	b480      	push	{r7}
    219a:	b087      	sub	sp, #28
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    21a0:	2300      	movs	r3, #0
    21a2:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	685b      	ldr	r3, [r3, #4]
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	7f5b      	ldrb	r3, [r3, #29]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d017      	beq.n	21ea <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    21ba:	693b      	ldr	r3, [r7, #16]
    21bc:	7a5b      	ldrb	r3, [r3, #9]
    21be:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	7f1b      	ldrb	r3, [r3, #28]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d104      	bne.n	21d2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	685b      	ldr	r3, [r3, #4]
    21cc:	7bba      	ldrb	r2, [r7, #14]
    21ce:	701a      	strb	r2, [r3, #0]
    21d0:	e01b      	b.n	220a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	7f1b      	ldrb	r3, [r3, #28]
    21d6:	461a      	mov	r2, r3
    21d8:	7bbb      	ldrb	r3, [r7, #14]
    21da:	429a      	cmp	r2, r3
    21dc:	dd02      	ble.n	21e4 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    21de:	4b0e      	ldr	r3, [pc, #56]	; (2218 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    21e0:	617b      	str	r3, [r7, #20]
    21e2:	e012      	b.n	220a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    21e4:	2300      	movs	r3, #0
    21e6:	617b      	str	r3, [r7, #20]
    21e8:	e00f      	b.n	220a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	7f1b      	ldrb	r3, [r3, #28]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d109      	bne.n	2206 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    21f2:	7bfb      	ldrb	r3, [r7, #15]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d103      	bne.n	2200 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    21f8:	693b      	ldr	r3, [r7, #16]
    21fa:	2200      	movs	r2, #0
    21fc:	725a      	strb	r2, [r3, #9]
    21fe:	e004      	b.n	220a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    2200:	4b06      	ldr	r3, [pc, #24]	; (221c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    2202:	617b      	str	r3, [r7, #20]
    2204:	e001      	b.n	220a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    2206:	4b06      	ldr	r3, [pc, #24]	; (2220 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    2208:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    220a:	697b      	ldr	r3, [r7, #20]
}
    220c:	4618      	mov	r0, r3
    220e:	371c      	adds	r7, #28
    2210:	46bd      	mov	sp, r7
    2212:	bc80      	pop	{r7}
    2214:	4770      	bx	lr
    2216:	bf00      	nop
    2218:	08000024 	.word	0x08000024
    221c:	06090030 	.word	0x06090030
    2220:	06010002 	.word	0x06010002

00002224 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    2224:	b580      	push	{r7, lr}
    2226:	b086      	sub	sp, #24
    2228:	af00      	add	r7, sp, #0
    222a:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    222c:	2300      	movs	r3, #0
    222e:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	681b      	ldr	r3, [r3, #0]
    2234:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    2236:	4b0f      	ldr	r3, [pc, #60]	; (2274 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    2238:	681a      	ldr	r2, [r3, #0]
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	685b      	ldr	r3, [r3, #4]
    223e:	4619      	mov	r1, r3
    2240:	4610      	mov	r0, r2
    2242:	4b0d      	ldr	r3, [pc, #52]	; (2278 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    2244:	4798      	blx	r3
    2246:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	7f5b      	ldrb	r3, [r3, #29]
    224c:	2b00      	cmp	r3, #0
    224e:	d00b      	beq.n	2268 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    2250:	4b08      	ldr	r3, [pc, #32]	; (2274 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    2252:	6818      	ldr	r0, [r3, #0]
    2254:	687b      	ldr	r3, [r7, #4]
    2256:	6859      	ldr	r1, [r3, #4]
    2258:	693b      	ldr	r3, [r7, #16]
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	461a      	mov	r2, r3
    225e:	68fb      	ldr	r3, [r7, #12]
    2260:	4413      	add	r3, r2
    2262:	461a      	mov	r2, r3
    2264:	4b05      	ldr	r3, [pc, #20]	; (227c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    2266:	4798      	blx	r3
    }

    return ret;
    2268:	697b      	ldr	r3, [r7, #20]
}
    226a:	4618      	mov	r0, r3
    226c:	3718      	adds	r7, #24
    226e:	46bd      	mov	sp, r7
    2270:	bd80      	pop	{r7, pc}
    2272:	bf00      	nop
    2274:	20001968 	.word	0x20001968
    2278:	000046a9 	.word	0x000046a9
    227c:	000046dd 	.word	0x000046dd

00002280 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    2280:	b590      	push	{r4, r7, lr}
    2282:	b089      	sub	sp, #36	; 0x24
    2284:	af02      	add	r7, sp, #8
    2286:	60f8      	str	r0, [r7, #12]
    2288:	60b9      	str	r1, [r7, #8]
    228a:	607a      	str	r2, [r7, #4]
    228c:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    228e:	68bb      	ldr	r3, [r7, #8]
    2290:	2b00      	cmp	r3, #0
    2292:	d015      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2b00      	cmp	r3, #0
    2298:	d012      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    229a:	683b      	ldr	r3, [r7, #0]
    229c:	2b00      	cmp	r3, #0
    229e:	d00f      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    22a2:	2b00      	cmp	r3, #0
    22a4:	d00c      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    22aa:	2b05      	cmp	r3, #5
    22ac:	d908      	bls.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    22ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22b0:	2b00      	cmp	r3, #0
    22b2:	d005      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22b6:	2b00      	cmp	r3, #0
    22b8:	d002      	beq.n	22c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22bc:	2b00      	cmp	r3, #0
    22be:	d102      	bne.n	22c6 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    22c0:	f04f 33ff 	mov.w	r3, #4294967295
    22c4:	e072      	b.n	23ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    22c6:	68bb      	ldr	r3, [r7, #8]
    22c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    22ca:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    22cc:	68bb      	ldr	r3, [r7, #8]
    22ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    22d2:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    22d4:	68bb      	ldr	r3, [r7, #8]
    22d6:	3305      	adds	r3, #5
    22d8:	f103 0250 	add.w	r2, r3, #80	; 0x50
    22dc:	68bb      	ldr	r3, [r7, #8]
    22de:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    22e0:	68bb      	ldr	r3, [r7, #8]
    22e2:	1d5a      	adds	r2, r3, #5
    22e4:	68bb      	ldr	r3, [r7, #8]
    22e6:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    22e8:	68bb      	ldr	r3, [r7, #8]
    22ea:	1d5a      	adds	r2, r3, #5
    22ec:	68bb      	ldr	r3, [r7, #8]
    22ee:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	2200      	movs	r2, #0
    22f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    22f8:	68bb      	ldr	r3, [r7, #8]
    22fa:	2200      	movs	r2, #0
    22fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    2300:	68bb      	ldr	r3, [r7, #8]
    2302:	2200      	movs	r2, #0
    2304:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	68ba      	ldr	r2, [r7, #8]
    230a:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2310:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2316:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    231e:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	2200      	movs	r2, #0
    2324:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	2200      	movs	r2, #0
    232a:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    232c:	2300      	movs	r3, #0
    232e:	75fb      	strb	r3, [r7, #23]
    2330:	7dfa      	ldrb	r2, [r7, #23]
    2332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    2336:	429a      	cmp	r2, r3
    2338:	da09      	bge.n	234e <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    233a:	68bb      	ldr	r3, [r7, #8]
    233c:	681a      	ldr	r2, [r3, #0]
    233e:	7dfb      	ldrb	r3, [r7, #23]
    2340:	4413      	add	r3, r2
    2342:	2200      	movs	r2, #0
    2344:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    2346:	7dfb      	ldrb	r3, [r7, #23]
    2348:	3301      	adds	r3, #1
    234a:	75fb      	strb	r3, [r7, #23]
    234c:	e7f0      	b.n	2330 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    234e:	2300      	movs	r3, #0
    2350:	9301      	str	r3, [sp, #4]
    2352:	2300      	movs	r3, #0
    2354:	9300      	str	r3, [sp, #0]
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	4a16      	ldr	r2, [pc, #88]	; (23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    235a:	f241 0103 	movw	r1, #4099	; 0x1003
    235e:	68f8      	ldr	r0, [r7, #12]
    2360:	4c15      	ldr	r4, [pc, #84]	; (23b8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    2362:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    2364:	683b      	ldr	r3, [r7, #0]
    2366:	f103 0268 	add.w	r2, r3, #104	; 0x68
    236a:	2300      	movs	r3, #0
    236c:	9301      	str	r3, [sp, #4]
    236e:	2300      	movs	r3, #0
    2370:	9300      	str	r3, [sp, #0]
    2372:	4613      	mov	r3, r2
    2374:	4a11      	ldr	r2, [pc, #68]	; (23bc <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    2376:	f241 0114 	movw	r1, #4116	; 0x1014
    237a:	68f8      	ldr	r0, [r7, #12]
    237c:	4c0e      	ldr	r4, [pc, #56]	; (23b8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    237e:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2384:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    2386:	687b      	ldr	r3, [r7, #4]
    2388:	695b      	ldr	r3, [r3, #20]
    238a:	68ba      	ldr	r2, [r7, #8]
    238c:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen->CAN_Tx_BufferInit(
    238e:	4b0c      	ldr	r3, [pc, #48]	; (23c0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    2390:	6818      	ldr	r0, [r3, #0]
    2392:	2300      	movs	r3, #0
    2394:	9301      	str	r3, [sp, #4]
    2396:	2308      	movs	r3, #8
    2398:	9300      	str	r3, [sp, #0]
    239a:	2300      	movs	r3, #0
    239c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    239e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    23a0:	4c08      	ldr	r4, [pc, #32]	; (23c4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    23a2:	47a0      	blx	r4
    23a4:	4602      	mov	r2, r0
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    23aa:	2300      	movs	r3, #0
}
    23ac:	4618      	mov	r0, r3
    23ae:	371c      	adds	r7, #28
    23b0:	46bd      	mov	sp, r7
    23b2:	bd90      	pop	{r4, r7, pc}
    23b4:	00002199 	.word	0x00002199
    23b8:	00004afd 	.word	0x00004afd
    23bc:	00002225 	.word	0x00002225
    23c0:	20001964 	.word	0x20001964
    23c4:	00001a99 	.word	0x00001a99

000023c8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    23c8:	b590      	push	{r4, r7, lr}
    23ca:	b08b      	sub	sp, #44	; 0x2c
    23cc:	af02      	add	r7, sp, #8
    23ce:	60f8      	str	r0, [r7, #12]
    23d0:	60b9      	str	r1, [r7, #8]
    23d2:	603b      	str	r3, [r7, #0]
    23d4:	4613      	mov	r3, r2
    23d6:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    23d8:	68bb      	ldr	r3, [r7, #8]
    23da:	691b      	ldr	r3, [r3, #16]
    23dc:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   canopen->CAN_VerifyErrors();
    23de:	4b6e      	ldr	r3, [pc, #440]	; (2598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d0>)
    23e0:	681b      	ldr	r3, [r3, #0]
    23e2:	4618      	mov	r0, r3
    23e4:	4b6d      	ldr	r3, [pc, #436]	; (259c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d4>)
    23e6:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    23e8:	69bb      	ldr	r3, [r7, #24]
    23ea:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    23ee:	2b00      	cmp	r3, #0
    23f0:	d00e      	beq.n	2410 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    23f2:	69bb      	ldr	r3, [r7, #24]
    23f4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    23f8:	9300      	str	r3, [sp, #0]
    23fa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    23fe:	2228      	movs	r2, #40	; 0x28
    2400:	69b9      	ldr	r1, [r7, #24]
    2402:	68f8      	ldr	r0, [r7, #12]
    2404:	4c66      	ldr	r4, [pc, #408]	; (25a0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d8>)
    2406:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    2408:	69bb      	ldr	r3, [r7, #24]
    240a:	2200      	movs	r2, #0
    240c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    2410:	2300      	movs	r3, #0
    2412:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    2414:	69bb      	ldr	r3, [r7, #24]
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	3305      	adds	r3, #5
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	2b00      	cmp	r3, #0
    241e:	d003      	beq.n	2428 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    2420:	7ffb      	ldrb	r3, [r7, #31]
    2422:	f043 0301 	orr.w	r3, r3, #1
    2426:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    2428:	69bb      	ldr	r3, [r7, #24]
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	3302      	adds	r3, #2
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	2b00      	cmp	r3, #0
      //  errorRegister |= CO_ERR_REG_COMM_ERR;
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    2432:	68bb      	ldr	r3, [r7, #8]
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	6812      	ldr	r2, [r2, #0]
    243a:	7812      	ldrb	r2, [r2, #0]
    243c:	f022 0211 	bic.w	r2, r2, #17
    2440:	b2d1      	uxtb	r1, r2
    2442:	7ffa      	ldrb	r2, [r7, #31]
    2444:	430a      	orrs	r2, r1
    2446:	b2d2      	uxtb	r2, r2
    2448:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    244a:	68bb      	ldr	r3, [r7, #8]
    244c:	68da      	ldr	r2, [r3, #12]
    244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2450:	429a      	cmp	r2, r3
    2452:	d205      	bcs.n	2460 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x98>
        emPr->inhibitEmTimer += timeDifference_100us;
    2454:	68bb      	ldr	r3, [r7, #8]
    2456:	68da      	ldr	r2, [r3, #12]
    2458:	683b      	ldr	r3, [r7, #0]
    245a:	441a      	add	r2, r3
    245c:	68bb      	ldr	r3, [r7, #8]
    245e:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    2460:	79fb      	ldrb	r3, [r7, #7]
    2462:	2b00      	cmp	r3, #0
    2464:	d017      	beq.n	2496 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            !emPr->CANtxBuff->bufferFull &&
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	699b      	ldr	r3, [r3, #24]
    246a:	7b5b      	ldrb	r3, [r3, #13]
    246c:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    246e:	2b00      	cmp	r3, #0
    2470:	d111      	bne.n	2496 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            emPr->inhibitEmTimer >= emInhTime &&
    2472:	68bb      	ldr	r3, [r7, #8]
    2474:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    2476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2478:	429a      	cmp	r2, r3
    247a:	d30c      	bcc.n	2496 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    247c:	69bb      	ldr	r3, [r7, #24]
    247e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2480:	69bb      	ldr	r3, [r7, #24]
    2482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    2484:	429a      	cmp	r2, r3
    2486:	d104      	bne.n	2492 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xca>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    2488:	69bb      	ldr	r3, [r7, #24]
    248a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    248e:	2b00      	cmp	r3, #0
    2490:	d001      	beq.n	2496 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            emPr->inhibitEmTimer >= emInhTime &&
    2492:	2301      	movs	r3, #1
    2494:	e000      	b.n	2498 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xd0>
    2496:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    2498:	2b00      	cmp	r3, #0
    249a:	d079      	beq.n	2590 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c8>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    249c:	69bb      	ldr	r3, [r7, #24]
    249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    24a0:	3302      	adds	r3, #2
    24a2:	68ba      	ldr	r2, [r7, #8]
    24a4:	6812      	ldr	r2, [r2, #0]
    24a6:	7812      	ldrb	r2, [r2, #0]
    24a8:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    24aa:	68bb      	ldr	r3, [r7, #8]
    24ac:	699b      	ldr	r3, [r3, #24]
    24ae:	1d59      	adds	r1, r3, #5
    24b0:	69bb      	ldr	r3, [r7, #24]
    24b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    24b4:	2308      	movs	r3, #8
    24b6:	68f8      	ldr	r0, [r7, #12]
    24b8:	4c3a      	ldr	r4, [pc, #232]	; (25a4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1dc>)
    24ba:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    24bc:	69bb      	ldr	r3, [r7, #24]
    24be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    24c0:	f107 0114 	add.w	r1, r7, #20
    24c4:	2304      	movs	r3, #4
    24c6:	68f8      	ldr	r0, [r7, #12]
    24c8:	4c36      	ldr	r4, [pc, #216]	; (25a4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1dc>)
    24ca:	47a0      	blx	r4
        em->bufReadPtr += 8;
    24cc:	69bb      	ldr	r3, [r7, #24]
    24ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    24d0:	f103 0208 	add.w	r2, r3, #8
    24d4:	69bb      	ldr	r3, [r7, #24]
    24d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    24d8:	69bb      	ldr	r3, [r7, #24]
    24da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    24dc:	69bb      	ldr	r3, [r7, #24]
    24de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    24e0:	429a      	cmp	r2, r3
    24e2:	d103      	bne.n	24ec <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x124>
            em->bufReadPtr = em->buf;
    24e4:	69bb      	ldr	r3, [r7, #24]
    24e6:	1d5a      	adds	r2, r3, #5
    24e8:	69bb      	ldr	r3, [r7, #24]
    24ea:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    24ec:	68bb      	ldr	r3, [r7, #8]
    24ee:	2200      	movs	r2, #0
    24f0:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    24f2:	69bb      	ldr	r3, [r7, #24]
    24f4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    24f8:	2b02      	cmp	r3, #2
    24fa:	d10d      	bne.n	2518 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x150>
            em->bufFull = 0U;    /* will be updated below */
    24fc:	69bb      	ldr	r3, [r7, #24]
    24fe:	2200      	movs	r2, #0
    2500:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    2504:	2300      	movs	r3, #0
    2506:	9300      	str	r3, [sp, #0]
    2508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    250c:	2220      	movs	r2, #32
    250e:	69b9      	ldr	r1, [r7, #24]
    2510:	68f8      	ldr	r0, [r7, #12]
    2512:	4c23      	ldr	r4, [pc, #140]	; (25a0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d8>)
    2514:	47a0      	blx	r4
    2516:	e003      	b.n	2520 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x158>
        }
        else{
            em->bufFull = 0;
    2518:	69bb      	ldr	r3, [r7, #24]
    251a:	2200      	movs	r2, #0
    251c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    2520:	68bb      	ldr	r3, [r7, #8]
    2522:	685b      	ldr	r3, [r3, #4]
    2524:	2b00      	cmp	r3, #0
    2526:	d02a      	beq.n	257e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1b6>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    2528:	68bb      	ldr	r3, [r7, #8]
    252a:	7a5b      	ldrb	r3, [r3, #9]
    252c:	461a      	mov	r2, r3
    252e:	68bb      	ldr	r3, [r7, #8]
    2530:	7a1b      	ldrb	r3, [r3, #8]
    2532:	429a      	cmp	r2, r3
    2534:	da05      	bge.n	2542 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x17a>
                emPr->preDefErrNoOfErrors++;
    2536:	68bb      	ldr	r3, [r7, #8]
    2538:	7a5b      	ldrb	r3, [r3, #9]
    253a:	3301      	adds	r3, #1
    253c:	b2da      	uxtb	r2, r3
    253e:	68bb      	ldr	r3, [r7, #8]
    2540:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    2542:	68bb      	ldr	r3, [r7, #8]
    2544:	7a5b      	ldrb	r3, [r3, #9]
    2546:	3b01      	subs	r3, #1
    2548:	77bb      	strb	r3, [r7, #30]
    254a:	7fbb      	ldrb	r3, [r7, #30]
    254c:	2b00      	cmp	r3, #0
    254e:	dd12      	ble.n	2576 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ae>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    2550:	68bb      	ldr	r3, [r7, #8]
    2552:	685a      	ldr	r2, [r3, #4]
    2554:	7fbb      	ldrb	r3, [r7, #30]
    2556:	009b      	lsls	r3, r3, #2
    2558:	441a      	add	r2, r3
    255a:	68bb      	ldr	r3, [r7, #8]
    255c:	6859      	ldr	r1, [r3, #4]
    255e:	7fbb      	ldrb	r3, [r7, #30]
    2560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2564:	3b01      	subs	r3, #1
    2566:	009b      	lsls	r3, r3, #2
    2568:	440b      	add	r3, r1
    256a:	681b      	ldr	r3, [r3, #0]
    256c:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    256e:	7fbb      	ldrb	r3, [r7, #30]
    2570:	3b01      	subs	r3, #1
    2572:	77bb      	strb	r3, [r7, #30]
    2574:	e7e9      	b.n	254a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x182>
            emPr->preDefErr[0] = preDEF;
    2576:	68bb      	ldr	r3, [r7, #8]
    2578:	685b      	ldr	r3, [r3, #4]
    257a:	697a      	ldr	r2, [r7, #20]
    257c:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        canopen->CAN_Send(emPr->CANtxBuff);
    257e:	4b06      	ldr	r3, [pc, #24]	; (2598 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d0>)
    2580:	681a      	ldr	r2, [r3, #0]
    2582:	68bb      	ldr	r3, [r7, #8]
    2584:	699b      	ldr	r3, [r3, #24]
    2586:	4619      	mov	r1, r3
    2588:	4610      	mov	r0, r2
    258a:	4b07      	ldr	r3, [pc, #28]	; (25a8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e0>)
    258c:	4798      	blx	r3
    }

    return;
    258e:	bf00      	nop
    2590:	bf00      	nop
}
    2592:	3724      	adds	r7, #36	; 0x24
    2594:	46bd      	mov	sp, r7
    2596:	bd90      	pop	{r4, r7, pc}
    2598:	20001964 	.word	0x20001964
    259c:	00001d99 	.word	0x00001d99
    25a0:	000025ad 	.word	0x000025ad
    25a4:	0000466d 	.word	0x0000466d
    25a8:	00001b45 	.word	0x00001b45

000025ac <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    25ac:	b590      	push	{r4, r7, lr}
    25ae:	b08d      	sub	sp, #52	; 0x34
    25b0:	af00      	add	r7, sp, #0
    25b2:	60f8      	str	r0, [r7, #12]
    25b4:	60b9      	str	r1, [r7, #8]
    25b6:	603b      	str	r3, [r7, #0]
    25b8:	4613      	mov	r3, r2
    25ba:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    25bc:	79fb      	ldrb	r3, [r7, #7]
    25be:	10db      	asrs	r3, r3, #3
    25c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    25c4:	79fb      	ldrb	r3, [r7, #7]
    25c6:	f003 0307 	and.w	r3, r3, #7
    25ca:	2201      	movs	r2, #1
    25cc:	fa02 f303 	lsl.w	r3, r2, r3
    25d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    25d4:	2300      	movs	r3, #0
    25d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    25d8:	2301      	movs	r3, #1
    25da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    25de:	68bb      	ldr	r3, [r7, #8]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d103      	bne.n	25ec <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    25e4:	2300      	movs	r3, #0
    25e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    25ea:	e01e      	b.n	262a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    25ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    25f0:	68ba      	ldr	r2, [r7, #8]
    25f2:	7912      	ldrb	r2, [r2, #4]
    25f4:	4293      	cmp	r3, r2
    25f6:	db07      	blt.n	2608 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    25f8:	68bb      	ldr	r3, [r7, #8]
    25fa:	79fa      	ldrb	r2, [r7, #7]
    25fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    2600:	2300      	movs	r3, #0
    2602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2606:	e010      	b.n	262a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    2608:	68bb      	ldr	r3, [r7, #8]
    260a:	681a      	ldr	r2, [r3, #0]
    260c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2610:	4413      	add	r3, r2
    2612:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    2614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2616:	781a      	ldrb	r2, [r3, #0]
    2618:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    261c:	4013      	ands	r3, r2
    261e:	b2db      	uxtb	r3, r3
    2620:	2b00      	cmp	r3, #0
    2622:	d002      	beq.n	262a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    2624:	2300      	movs	r3, #0
    2626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    262a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    262e:	2b00      	cmp	r3, #0
    2630:	d05c      	beq.n	26ec <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    2632:	79fb      	ldrb	r3, [r7, #7]
    2634:	2b00      	cmp	r3, #0
    2636:	d007      	beq.n	2648 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    2638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    263a:	781a      	ldrb	r2, [r3, #0]
    263c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2640:	4313      	orrs	r3, r2
    2642:	b2da      	uxtb	r2, r3
    2644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2646:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    2648:	68bb      	ldr	r3, [r7, #8]
    264a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    264e:	2b00      	cmp	r3, #0
    2650:	d004      	beq.n	265c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	2202      	movs	r2, #2
    2656:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    265a:	e047      	b.n	26ec <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    265c:	463a      	mov	r2, r7
    265e:	f107 0318 	add.w	r3, r7, #24
    2662:	4619      	mov	r1, r3
    2664:	68f8      	ldr	r0, [r7, #12]
    2666:	4b23      	ldr	r3, [pc, #140]	; (26f4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    2668:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    266a:	2300      	movs	r3, #0
    266c:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    266e:	79fb      	ldrb	r3, [r7, #7]
    2670:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    2672:	f107 0318 	add.w	r3, r7, #24
    2676:	3304      	adds	r3, #4
    2678:	f107 0240 	add.w	r2, r7, #64	; 0x40
    267c:	4619      	mov	r1, r3
    267e:	68f8      	ldr	r0, [r7, #12]
    2680:	4b1d      	ldr	r3, [pc, #116]	; (26f8 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    2682:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2684:	f3ef 8310 	mrs	r3, PRIMASK
    2688:	617b      	str	r3, [r7, #20]
  return(result);
    268a:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    268c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    268e:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    2690:	68bb      	ldr	r3, [r7, #8]
    2692:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    2694:	f107 0218 	add.w	r2, r7, #24
    2698:	2308      	movs	r3, #8
    269a:	68f8      	ldr	r0, [r7, #12]
    269c:	4c17      	ldr	r4, [pc, #92]	; (26fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    269e:	47a0      	blx	r4
            em->bufWritePtr += 8;
    26a0:	68bb      	ldr	r3, [r7, #8]
    26a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    26a4:	f103 0208 	add.w	r2, r3, #8
    26a8:	68bb      	ldr	r3, [r7, #8]
    26aa:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    26ac:	68bb      	ldr	r3, [r7, #8]
    26ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    26b0:	68bb      	ldr	r3, [r7, #8]
    26b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    26b4:	429a      	cmp	r2, r3
    26b6:	d103      	bne.n	26c0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    26b8:	68bb      	ldr	r3, [r7, #8]
    26ba:	1d5a      	adds	r2, r3, #5
    26bc:	68bb      	ldr	r3, [r7, #8]
    26be:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    26c0:	68bb      	ldr	r3, [r7, #8]
    26c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    26c4:	68bb      	ldr	r3, [r7, #8]
    26c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    26c8:	429a      	cmp	r2, r3
    26ca:	d103      	bne.n	26d4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    26cc:	68bb      	ldr	r3, [r7, #8]
    26ce:	2201      	movs	r2, #1
    26d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    26d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    26d8:	6a3b      	ldr	r3, [r7, #32]
    26da:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    26de:	68bb      	ldr	r3, [r7, #8]
    26e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26e2:	2b00      	cmp	r3, #0
    26e4:	d002      	beq.n	26ec <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    26e6:	68bb      	ldr	r3, [r7, #8]
    26e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26ea:	4798      	blx	r3
}
    26ec:	bf00      	nop
    26ee:	3734      	adds	r7, #52	; 0x34
    26f0:	46bd      	mov	sp, r7
    26f2:	bd90      	pop	{r4, r7, pc}
    26f4:	00004715 	.word	0x00004715
    26f8:	00004745 	.word	0x00004745
    26fc:	0000466d 	.word	0x0000466d

00002700 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    2700:	b590      	push	{r4, r7, lr}
    2702:	b08d      	sub	sp, #52	; 0x34
    2704:	af00      	add	r7, sp, #0
    2706:	60f8      	str	r0, [r7, #12]
    2708:	60b9      	str	r1, [r7, #8]
    270a:	603b      	str	r3, [r7, #0]
    270c:	4613      	mov	r3, r2
    270e:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    2710:	79fb      	ldrb	r3, [r7, #7]
    2712:	10db      	asrs	r3, r3, #3
    2714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    2718:	79fb      	ldrb	r3, [r7, #7]
    271a:	f003 0307 	and.w	r3, r3, #7
    271e:	2201      	movs	r2, #1
    2720:	fa02 f303 	lsl.w	r3, r2, r3
    2724:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    2728:	2300      	movs	r3, #0
    272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    272c:	2301      	movs	r3, #1
    272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    2732:	68bb      	ldr	r3, [r7, #8]
    2734:	2b00      	cmp	r3, #0
    2736:	d103      	bne.n	2740 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    2738:	2300      	movs	r3, #0
    273a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    273e:	e01e      	b.n	277e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    2740:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2744:	68ba      	ldr	r2, [r7, #8]
    2746:	7912      	ldrb	r2, [r2, #4]
    2748:	4293      	cmp	r3, r2
    274a:	db07      	blt.n	275c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    274c:	68bb      	ldr	r3, [r7, #8]
    274e:	79fa      	ldrb	r2, [r7, #7]
    2750:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    2754:	2300      	movs	r3, #0
    2756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    275a:	e010      	b.n	277e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    275c:	68bb      	ldr	r3, [r7, #8]
    275e:	681a      	ldr	r2, [r3, #0]
    2760:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2764:	4413      	add	r3, r2
    2766:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    2768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    276a:	781a      	ldrb	r2, [r3, #0]
    276c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2770:	4013      	ands	r3, r2
    2772:	b2db      	uxtb	r3, r3
    2774:	2b00      	cmp	r3, #0
    2776:	d102      	bne.n	277e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    2778:	2300      	movs	r3, #0
    277a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    277e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2782:	2b00      	cmp	r3, #0
    2784:	d059      	beq.n	283a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    2786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2788:	781b      	ldrb	r3, [r3, #0]
    278a:	b25a      	sxtb	r2, r3
    278c:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    2790:	43db      	mvns	r3, r3
    2792:	b25b      	sxtb	r3, r3
    2794:	4013      	ands	r3, r2
    2796:	b25b      	sxtb	r3, r3
    2798:	b2da      	uxtb	r2, r3
    279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    279c:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    279e:	68bb      	ldr	r3, [r7, #8]
    27a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    27a4:	2b00      	cmp	r3, #0
    27a6:	d004      	beq.n	27b2 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    27a8:	68bb      	ldr	r3, [r7, #8]
    27aa:	2202      	movs	r2, #2
    27ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    27b0:	e043      	b.n	283a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    27b2:	2300      	movs	r3, #0
    27b4:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    27b6:	2300      	movs	r3, #0
    27b8:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    27ba:	2300      	movs	r3, #0
    27bc:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    27be:	79fb      	ldrb	r3, [r7, #7]
    27c0:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    27c2:	463a      	mov	r2, r7
    27c4:	f107 0318 	add.w	r3, r7, #24
    27c8:	3304      	adds	r3, #4
    27ca:	4619      	mov	r1, r3
    27cc:	68f8      	ldr	r0, [r7, #12]
    27ce:	4b1d      	ldr	r3, [pc, #116]	; (2844 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    27d0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    27d2:	f3ef 8310 	mrs	r3, PRIMASK
    27d6:	617b      	str	r3, [r7, #20]
  return(result);
    27d8:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    27da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    27dc:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    27de:	68bb      	ldr	r3, [r7, #8]
    27e0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    27e2:	f107 0218 	add.w	r2, r7, #24
    27e6:	2308      	movs	r3, #8
    27e8:	68f8      	ldr	r0, [r7, #12]
    27ea:	4c17      	ldr	r4, [pc, #92]	; (2848 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    27ec:	47a0      	blx	r4
            em->bufWritePtr += 8;
    27ee:	68bb      	ldr	r3, [r7, #8]
    27f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    27f2:	f103 0208 	add.w	r2, r3, #8
    27f6:	68bb      	ldr	r3, [r7, #8]
    27f8:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    27fa:	68bb      	ldr	r3, [r7, #8]
    27fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    27fe:	68bb      	ldr	r3, [r7, #8]
    2800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2802:	429a      	cmp	r2, r3
    2804:	d103      	bne.n	280e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    2806:	68bb      	ldr	r3, [r7, #8]
    2808:	1d5a      	adds	r2, r3, #5
    280a:	68bb      	ldr	r3, [r7, #8]
    280c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    280e:	68bb      	ldr	r3, [r7, #8]
    2810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    2812:	68bb      	ldr	r3, [r7, #8]
    2814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2816:	429a      	cmp	r2, r3
    2818:	d103      	bne.n	2822 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    281a:	68bb      	ldr	r3, [r7, #8]
    281c:	2201      	movs	r2, #1
    281e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    2822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2826:	6a3b      	ldr	r3, [r7, #32]
    2828:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    282c:	68bb      	ldr	r3, [r7, #8]
    282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2830:	2b00      	cmp	r3, #0
    2832:	d002      	beq.n	283a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    2834:	68bb      	ldr	r3, [r7, #8]
    2836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2838:	4798      	blx	r3
}
    283a:	bf00      	nop
    283c:	3734      	adds	r7, #52	; 0x34
    283e:	46bd      	mov	sp, r7
    2840:	bd90      	pop	{r4, r7, pc}
    2842:	bf00      	nop
    2844:	00004745 	.word	0x00004745
    2848:	0000466d 	.word	0x0000466d

0000284c <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    284c:	b480      	push	{r7}
    284e:	b087      	sub	sp, #28
    2850:	af00      	add	r7, sp, #0
    2852:	60f8      	str	r0, [r7, #12]
    2854:	60b9      	str	r1, [r7, #8]
    2856:	4613      	mov	r3, r2
    2858:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    285a:	79fb      	ldrb	r3, [r7, #7]
    285c:	10db      	asrs	r3, r3, #3
    285e:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    2860:	79fb      	ldrb	r3, [r7, #7]
    2862:	f003 0307 	and.w	r3, r3, #7
    2866:	2201      	movs	r2, #1
    2868:	fa02 f303 	lsl.w	r3, r2, r3
    286c:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    286e:	2300      	movs	r3, #0
    2870:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    2872:	68bb      	ldr	r3, [r7, #8]
    2874:	2b00      	cmp	r3, #0
    2876:	d010      	beq.n	289a <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    2878:	7dbb      	ldrb	r3, [r7, #22]
    287a:	68ba      	ldr	r2, [r7, #8]
    287c:	7912      	ldrb	r2, [r2, #4]
    287e:	4293      	cmp	r3, r2
    2880:	da0b      	bge.n	289a <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    2882:	68bb      	ldr	r3, [r7, #8]
    2884:	681a      	ldr	r2, [r3, #0]
    2886:	7dbb      	ldrb	r3, [r7, #22]
    2888:	4413      	add	r3, r2
    288a:	781a      	ldrb	r2, [r3, #0]
    288c:	7d7b      	ldrb	r3, [r7, #21]
    288e:	4013      	ands	r3, r2
    2890:	b2db      	uxtb	r3, r3
    2892:	2b00      	cmp	r3, #0
    2894:	d001      	beq.n	289a <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    2896:	2301      	movs	r3, #1
    2898:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    289a:	7dfb      	ldrb	r3, [r7, #23]
    289c:	4618      	mov	r0, r3
    289e:	371c      	adds	r7, #28
    28a0:	46bd      	mov	sp, r7
    28a2:	bc80      	pop	{r7}
    28a4:	4770      	bx	lr

000028a6 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    28a6:	b480      	push	{r7}
    28a8:	b085      	sub	sp, #20
    28aa:	af00      	add	r7, sp, #0
    28ac:	6078      	str	r0, [r7, #4]
    28ae:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    28b4:	683b      	ldr	r3, [r7, #0]
    28b6:	7d1b      	ldrb	r3, [r3, #20]
    28b8:	2b01      	cmp	r3, #1
    28ba:	d106      	bne.n	28ca <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    28bc:	683b      	ldr	r3, [r7, #0]
    28be:	7d5a      	ldrb	r2, [r3, #21]
    28c0:	68fb      	ldr	r3, [r7, #12]
    28c2:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    28c4:	68fb      	ldr	r3, [r7, #12]
    28c6:	2201      	movs	r2, #1
    28c8:	731a      	strb	r2, [r3, #12]
	}
	
	
}
    28ca:	bf00      	nop
    28cc:	3714      	adds	r7, #20
    28ce:	46bd      	mov	sp, r7
    28d0:	bc80      	pop	{r7}
    28d2:	4770      	bx	lr

000028d4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    28d4:	b590      	push	{r4, r7, lr}
    28d6:	b08d      	sub	sp, #52	; 0x34
    28d8:	af04      	add	r7, sp, #16
    28da:	60f8      	str	r0, [r7, #12]
    28dc:	460b      	mov	r3, r1
    28de:	607a      	str	r2, [r7, #4]
    28e0:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    28e2:	7afb      	ldrb	r3, [r7, #11]
    28e4:	461a      	mov	r2, r3
    28e6:	68fb      	ldr	r3, [r7, #12]
    28e8:	7b1b      	ldrb	r3, [r3, #12]
    28ea:	429a      	cmp	r2, r3
    28ec:	da37      	bge.n	295e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
    28ee:	7afb      	ldrb	r3, [r7, #11]
    28f0:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	689a      	ldr	r2, [r3, #8]
    28f6:	7afb      	ldrb	r3, [r7, #11]
    28f8:	011b      	lsls	r3, r3, #4
    28fa:	4413      	add	r3, r2
    28fc:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    28fe:	697b      	ldr	r3, [r7, #20]
    2900:	687a      	ldr	r2, [r7, #4]
    2902:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    2904:	697b      	ldr	r3, [r7, #20]
    2906:	2200      	movs	r2, #0
    2908:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    290a:	697b      	ldr	r3, [r7, #20]
    290c:	2200      	movs	r2, #0
    290e:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
    2910:	69bb      	ldr	r3, [r7, #24]
    2912:	2b00      	cmp	r3, #0
    2914:	d008      	beq.n	2928 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
    2916:	697b      	ldr	r3, [r7, #20]
    2918:	689b      	ldr	r3, [r3, #8]
    291a:	2b00      	cmp	r3, #0
    291c:	d004      	beq.n	2928 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
    291e:	69bb      	ldr	r3, [r7, #24]
    2920:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    2924:	61fb      	str	r3, [r7, #28]
    2926:	e004      	b.n	2932 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
    2928:	2300      	movs	r3, #0
    292a:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    292c:	697b      	ldr	r3, [r7, #20]
    292e:	2200      	movs	r2, #0
    2930:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen->CAN_Rx_BufferInit(
    2932:	4b0d      	ldr	r3, [pc, #52]	; (2968 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    2934:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    2936:	68fb      	ldr	r3, [r7, #12]
    2938:	695b      	ldr	r3, [r3, #20]
	canopen->CAN_Rx_BufferInit(
    293a:	7afa      	ldrb	r2, [r7, #11]
    293c:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	689a      	ldr	r2, [r3, #8]
    2942:	7afb      	ldrb	r3, [r7, #11]
    2944:	011b      	lsls	r3, r3, #4
    2946:	4413      	add	r3, r2
	CO_HBcons_receive);
    2948:	4a08      	ldr	r2, [pc, #32]	; (296c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    294a:	9202      	str	r2, [sp, #8]
    294c:	9301      	str	r3, [sp, #4]
    294e:	2300      	movs	r3, #0
    2950:	9300      	str	r3, [sp, #0]
    2952:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2956:	69fa      	ldr	r2, [r7, #28]
    2958:	4c05      	ldr	r4, [pc, #20]	; (2970 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    295a:	47a0      	blx	r4
    295c:	e000      	b.n	2960 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    295e:	bf00      	nop
}
    2960:	3724      	adds	r7, #36	; 0x24
    2962:	46bd      	mov	sp, r7
    2964:	bd90      	pop	{r4, r7, pc}
    2966:	bf00      	nop
    2968:	20001964 	.word	0x20001964
    296c:	000028a7 	.word	0x000028a7
    2970:	00001999 	.word	0x00001999

00002974 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    2974:	b580      	push	{r7, lr}
    2976:	b08c      	sub	sp, #48	; 0x30
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    297c:	2300      	movs	r3, #0
    297e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen->CO_getUint32(ODF_arg->data);
    2986:	4b32      	ldr	r3, [pc, #200]	; (2a50 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	1d1a      	adds	r2, r3, #4
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	685b      	ldr	r3, [r3, #4]
    2990:	4619      	mov	r1, r3
    2992:	4610      	mov	r0, r2
    2994:	4b2f      	ldr	r3, [pc, #188]	; (2a54 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    2996:	4798      	blx	r3
    2998:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	7f5b      	ldrb	r3, [r3, #29]
    299e:	2b00      	cmp	r3, #0
    29a0:	d150      	bne.n	2a44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    29a2:	6a3b      	ldr	r3, [r7, #32]
    29a4:	0c1b      	lsrs	r3, r3, #16
    29a6:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    29a8:	6a3b      	ldr	r3, [r7, #32]
    29aa:	b29b      	uxth	r3, r3
    29ac:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    29ae:	6a3b      	ldr	r3, [r7, #32]
    29b0:	0ddb      	lsrs	r3, r3, #23
    29b2:	05db      	lsls	r3, r3, #23
    29b4:	2b00      	cmp	r3, #0
    29b6:	d002      	beq.n	29be <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    29b8:	4b27      	ldr	r3, [pc, #156]	; (2a58 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    29ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    29bc:	e036      	b.n	2a2c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    29be:	69bb      	ldr	r3, [r7, #24]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d02f      	beq.n	2a24 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    29c4:	7ffb      	ldrb	r3, [r7, #31]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d02c      	beq.n	2a24 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    29ca:	2300      	movs	r3, #0
    29cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    29d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    29d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    29d6:	7b12      	ldrb	r2, [r2, #12]
    29d8:	4293      	cmp	r3, r2
    29da:	da26      	bge.n	2a2a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    29dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29de:	685a      	ldr	r2, [r3, #4]
    29e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    29e4:	009b      	lsls	r3, r3, #2
    29e6:	4413      	add	r3, r2
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    29ec:	697b      	ldr	r3, [r7, #20]
    29ee:	0c1b      	lsrs	r3, r3, #16
    29f0:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    29f2:	697b      	ldr	r3, [r7, #20]
    29f4:	b29b      	uxth	r3, r3
    29f6:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	7f1b      	ldrb	r3, [r3, #28]
    29fc:	1e5a      	subs	r2, r3, #1
    29fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2a02:	429a      	cmp	r2, r3
    2a04:	d008      	beq.n	2a18 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2a06:	68fb      	ldr	r3, [r7, #12]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d005      	beq.n	2a18 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2a0c:	7ffa      	ldrb	r2, [r7, #31]
    2a0e:	7cfb      	ldrb	r3, [r7, #19]
    2a10:	429a      	cmp	r2, r3
    2a12:	d101      	bne.n	2a18 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    2a14:	4b10      	ldr	r3, [pc, #64]	; (2a58 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2a16:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2a18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2a1c:	3301      	adds	r3, #1
    2a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2a22:	e7d5      	b.n	29d0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    2a24:	2300      	movs	r3, #0
    2a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    2a28:	e000      	b.n	2a2c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    2a2a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    2a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d108      	bne.n	2a44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	7f1b      	ldrb	r3, [r3, #28]
    2a36:	3b01      	subs	r3, #1
    2a38:	b2db      	uxtb	r3, r3
    2a3a:	6a3a      	ldr	r2, [r7, #32]
    2a3c:	4619      	mov	r1, r3
    2a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2a40:	4b06      	ldr	r3, [pc, #24]	; (2a5c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    2a42:	4798      	blx	r3
		}
	}

	return ret;
    2a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    2a46:	4618      	mov	r0, r3
    2a48:	3730      	adds	r7, #48	; 0x30
    2a4a:	46bd      	mov	sp, r7
    2a4c:	bd80      	pop	{r7, pc}
    2a4e:	bf00      	nop
    2a50:	20001964 	.word	0x20001964
    2a54:	000046a9 	.word	0x000046a9
    2a58:	06040043 	.word	0x06040043
    2a5c:	000028d5 	.word	0x000028d5

00002a60 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    2a60:	b480      	push	{r7}
    2a62:	b083      	sub	sp, #12
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
    2a68:	4a04      	ldr	r2, [pc, #16]	; (2a7c <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	4618      	mov	r0, r3
    2a72:	370c      	adds	r7, #12
    2a74:	46bd      	mov	sp, r7
    2a76:	bc80      	pop	{r7}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	2000196c 	.word	0x2000196c

00002a80 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    2a80:	b480      	push	{r7}
    2a82:	b083      	sub	sp, #12
    2a84:	af00      	add	r7, sp, #0
    2a86:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	4618      	mov	r0, r3
    2a8c:	370c      	adds	r7, #12
    2a8e:	46bd      	mov	sp, r7
    2a90:	bc80      	pop	{r7}
    2a92:	4770      	bx	lr

00002a94 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    2a94:	b590      	push	{r4, r7, lr}
    2a96:	b089      	sub	sp, #36	; 0x24
    2a98:	af02      	add	r7, sp, #8
    2a9a:	60f8      	str	r0, [r7, #12]
    2a9c:	60b9      	str	r1, [r7, #8]
    2a9e:	607a      	str	r2, [r7, #4]
    2aa0:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
    2aa2:	4a2b      	ldr	r2, [pc, #172]	; (2b50 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    2aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2aa6:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    2aa8:	68bb      	ldr	r3, [r7, #8]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d00e      	beq.n	2acc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d00b      	beq.n	2acc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2ab4:	683b      	ldr	r3, [r7, #0]
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d008      	beq.n	2acc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2abc:	2b00      	cmp	r3, #0
    2abe:	d005      	beq.n	2acc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d002      	beq.n	2acc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
    2ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d102      	bne.n	2ad2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    2acc:	f04f 33ff 	mov.w	r3, #4294967295
    2ad0:	e039      	b.n	2b46 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	687a      	ldr	r2, [r7, #4]
    2ad6:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    2ad8:	68bb      	ldr	r3, [r7, #8]
    2ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2adc:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    2ade:	68bb      	ldr	r3, [r7, #8]
    2ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2ae2:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    2ae4:	68bb      	ldr	r3, [r7, #8]
    2ae6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    2aea:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    2aec:	68bb      	ldr	r3, [r7, #8]
    2aee:	2200      	movs	r2, #0
    2af0:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    2af2:	68bb      	ldr	r3, [r7, #8]
    2af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2af6:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    2af8:	68bb      	ldr	r3, [r7, #8]
    2afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2afc:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2afe:	2300      	movs	r3, #0
    2b00:	75fb      	strb	r3, [r7, #23]
    2b02:	7dfb      	ldrb	r3, [r7, #23]
    2b04:	68ba      	ldr	r2, [r7, #8]
    2b06:	7b12      	ldrb	r2, [r2, #12]
    2b08:	4293      	cmp	r3, r2
    2b0a:	da0e      	bge.n	2b2a <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    2b0c:	68bb      	ldr	r3, [r7, #8]
    2b0e:	685a      	ldr	r2, [r3, #4]
    2b10:	7dfb      	ldrb	r3, [r7, #23]
    2b12:	009b      	lsls	r3, r3, #2
    2b14:	4413      	add	r3, r2
    2b16:	681a      	ldr	r2, [r3, #0]
    2b18:	7dfb      	ldrb	r3, [r7, #23]
    2b1a:	4619      	mov	r1, r3
    2b1c:	68b8      	ldr	r0, [r7, #8]
    2b1e:	4b0d      	ldr	r3, [pc, #52]	; (2b54 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    2b20:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2b22:	7dfb      	ldrb	r3, [r7, #23]
    2b24:	3301      	adds	r3, #1
    2b26:	75fb      	strb	r3, [r7, #23]
    2b28:	e7eb      	b.n	2b02 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    2b2a:	4b0b      	ldr	r3, [pc, #44]	; (2b58 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
    2b2c:	681b      	ldr	r3, [r3, #0]
    2b2e:	1d18      	adds	r0, r3, #4
    2b30:	2300      	movs	r3, #0
    2b32:	9301      	str	r3, [sp, #4]
    2b34:	2300      	movs	r3, #0
    2b36:	9300      	str	r3, [sp, #0]
    2b38:	68bb      	ldr	r3, [r7, #8]
    2b3a:	4a08      	ldr	r2, [pc, #32]	; (2b5c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
    2b3c:	f241 0116 	movw	r1, #4118	; 0x1016
    2b40:	4c07      	ldr	r4, [pc, #28]	; (2b60 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
    2b42:	47a0      	blx	r4

	return CO_ERROR_NO;
    2b44:	2300      	movs	r3, #0
}
    2b46:	4618      	mov	r0, r3
    2b48:	371c      	adds	r7, #28
    2b4a:	46bd      	mov	sp, r7
    2b4c:	bd90      	pop	{r4, r7, pc}
    2b4e:	bf00      	nop
    2b50:	20001970 	.word	0x20001970
    2b54:	000028d5 	.word	0x000028d5
    2b58:	20001964 	.word	0x20001964
    2b5c:	00002975 	.word	0x00002975
    2b60:	00004afd 	.word	0x00004afd

00002b64 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    2b64:	b590      	push	{r4, r7, lr}
    2b66:	b089      	sub	sp, #36	; 0x24
    2b68:	af02      	add	r7, sp, #8
    2b6a:	60f8      	str	r0, [r7, #12]
    2b6c:	60b9      	str	r1, [r7, #8]
    2b6e:	603b      	str	r3, [r7, #0]
    2b70:	4613      	mov	r3, r2
    2b72:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    2b74:	2305      	movs	r3, #5
    2b76:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    2b78:	68bb      	ldr	r3, [r7, #8]
    2b7a:	689b      	ldr	r3, [r3, #8]
    2b7c:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    2b7e:	79fb      	ldrb	r3, [r7, #7]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d060      	beq.n	2c46 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2b84:	2300      	movs	r3, #0
    2b86:	75fb      	strb	r3, [r7, #23]
    2b88:	7dfb      	ldrb	r3, [r7, #23]
    2b8a:	68ba      	ldr	r2, [r7, #8]
    2b8c:	7b12      	ldrb	r2, [r2, #12]
    2b8e:	4293      	cmp	r3, r2
    2b90:	da72      	bge.n	2c78 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    2b92:	693b      	ldr	r3, [r7, #16]
    2b94:	689b      	ldr	r3, [r3, #8]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d04e      	beq.n	2c38 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    2b9a:	693b      	ldr	r3, [r7, #16]
    2b9c:	7b1b      	ldrb	r3, [r3, #12]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d00e      	beq.n	2bc0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    2ba2:	693b      	ldr	r3, [r7, #16]
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d007      	beq.n	2bba <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    2baa:	693b      	ldr	r3, [r7, #16]
    2bac:	2201      	movs	r2, #1
    2bae:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    2bb0:	693b      	ldr	r3, [r7, #16]
    2bb2:	2200      	movs	r2, #0
    2bb4:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    2bb6:	2300      	movs	r3, #0
    2bb8:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    2bba:	693b      	ldr	r3, [r7, #16]
    2bbc:	2200      	movs	r2, #0
    2bbe:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    2bc0:	693b      	ldr	r3, [r7, #16]
    2bc2:	685a      	ldr	r2, [r3, #4]
    2bc4:	693b      	ldr	r3, [r7, #16]
    2bc6:	689b      	ldr	r3, [r3, #8]
    2bc8:	429a      	cmp	r2, r3
    2bca:	d205      	bcs.n	2bd8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	685a      	ldr	r2, [r3, #4]
    2bd0:	683b      	ldr	r3, [r7, #0]
    2bd2:	441a      	add	r2, r3
    2bd4:	693b      	ldr	r3, [r7, #16]
    2bd6:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    2bd8:	693b      	ldr	r3, [r7, #16]
    2bda:	785b      	ldrb	r3, [r3, #1]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d025      	beq.n	2c2c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    2be0:	693b      	ldr	r3, [r7, #16]
    2be2:	685a      	ldr	r2, [r3, #4]
    2be4:	693b      	ldr	r3, [r7, #16]
    2be6:	689b      	ldr	r3, [r3, #8]
    2be8:	429a      	cmp	r2, r3
    2bea:	d30f      	bcc.n	2c0c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						canopen->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    2bec:	4b26      	ldr	r3, [pc, #152]	; (2c88 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	1d18      	adds	r0, r3, #4
    2bf2:	68bb      	ldr	r3, [r7, #8]
    2bf4:	6819      	ldr	r1, [r3, #0]
    2bf6:	7dfb      	ldrb	r3, [r7, #23]
    2bf8:	9300      	str	r3, [sp, #0]
    2bfa:	f248 1330 	movw	r3, #33072	; 0x8130
    2bfe:	221b      	movs	r2, #27
    2c00:	4c22      	ldr	r4, [pc, #136]	; (2c8c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    2c02:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    2c04:	693b      	ldr	r3, [r7, #16]
    2c06:	2200      	movs	r2, #0
    2c08:	701a      	strb	r2, [r3, #0]
    2c0a:	e00f      	b.n	2c2c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    2c0c:	693b      	ldr	r3, [r7, #16]
    2c0e:	781b      	ldrb	r3, [r3, #0]
    2c10:	2b00      	cmp	r3, #0
    2c12:	d10b      	bne.n	2c2c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						canopen->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    2c14:	4b1c      	ldr	r3, [pc, #112]	; (2c88 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	1d18      	adds	r0, r3, #4
    2c1a:	68bb      	ldr	r3, [r7, #8]
    2c1c:	6819      	ldr	r1, [r3, #0]
    2c1e:	7dfb      	ldrb	r3, [r7, #23]
    2c20:	9300      	str	r3, [sp, #0]
    2c22:	f248 1330 	movw	r3, #33072	; 0x8130
    2c26:	221c      	movs	r2, #28
    2c28:	4c18      	ldr	r4, [pc, #96]	; (2c8c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    2c2a:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    2c2c:	693b      	ldr	r3, [r7, #16]
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	2b05      	cmp	r3, #5
    2c32:	d001      	beq.n	2c38 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    2c34:	2300      	movs	r3, #0
    2c36:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    2c38:	693b      	ldr	r3, [r7, #16]
    2c3a:	3310      	adds	r3, #16
    2c3c:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2c3e:	7dfb      	ldrb	r3, [r7, #23]
    2c40:	3301      	adds	r3, #1
    2c42:	75fb      	strb	r3, [r7, #23]
    2c44:	e7a0      	b.n	2b88 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2c46:	2300      	movs	r3, #0
    2c48:	75fb      	strb	r3, [r7, #23]
    2c4a:	7dfb      	ldrb	r3, [r7, #23]
    2c4c:	68ba      	ldr	r2, [r7, #8]
    2c4e:	7b12      	ldrb	r2, [r2, #12]
    2c50:	4293      	cmp	r3, r2
    2c52:	da0f      	bge.n	2c74 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    2c54:	693b      	ldr	r3, [r7, #16]
    2c56:	2200      	movs	r2, #0
    2c58:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    2c5a:	693b      	ldr	r3, [r7, #16]
    2c5c:	2200      	movs	r2, #0
    2c5e:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    2c60:	693b      	ldr	r3, [r7, #16]
    2c62:	2200      	movs	r2, #0
    2c64:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    2c66:	693b      	ldr	r3, [r7, #16]
    2c68:	3310      	adds	r3, #16
    2c6a:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    2c6c:	7dfb      	ldrb	r3, [r7, #23]
    2c6e:	3301      	adds	r3, #1
    2c70:	75fb      	strb	r3, [r7, #23]
    2c72:	e7ea      	b.n	2c4a <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    2c74:	2300      	movs	r3, #0
    2c76:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    2c78:	68bb      	ldr	r3, [r7, #8]
    2c7a:	7dba      	ldrb	r2, [r7, #22]
    2c7c:	735a      	strb	r2, [r3, #13]
}
    2c7e:	bf00      	nop
    2c80:	371c      	adds	r7, #28
    2c82:	46bd      	mov	sp, r7
    2c84:	bd90      	pop	{r4, r7, pc}
    2c86:	bf00      	nop
    2c88:	20001964 	.word	0x20001964
    2c8c:	000025ad 	.word	0x000025ad

00002c90 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    2c90:	b480      	push	{r7}
    2c92:	b083      	sub	sp, #12
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
    2c98:	460b      	mov	r3, r1
    2c9a:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	78fa      	ldrb	r2, [r7, #3]
    2ca0:	711a      	strb	r2, [r3, #4]
}
    2ca2:	bf00      	nop
    2ca4:	370c      	adds	r7, #12
    2ca6:	46bd      	mov	sp, r7
    2ca8:	bc80      	pop	{r7}
    2caa:	4770      	bx	lr

00002cac <_ZN20CO_HB_Consumer_Class17IsSlaveOpeationalEv>:
 bool CO_HB_Consumer_Class::IsSlaveOpeational(void){
    2cac:	b480      	push	{r7}
    2cae:	b083      	sub	sp, #12
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
	 
	slaveOperational=(ptrMonitoredNodes[2].NMTstate==5);
    2cb4:	4b08      	ldr	r3, [pc, #32]	; (2cd8 <_ZN20CO_HB_Consumer_Class17IsSlaveOpeationalEv+0x2c>)
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	3320      	adds	r3, #32
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	2b05      	cmp	r3, #5
    2cbe:	bf0c      	ite	eq
    2cc0:	2301      	moveq	r3, #1
    2cc2:	2300      	movne	r3, #0
    2cc4:	b2da      	uxtb	r2, r3
    2cc6:	687b      	ldr	r3, [r7, #4]
    2cc8:	715a      	strb	r2, [r3, #5]
	return slaveOperational;
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	795b      	ldrb	r3, [r3, #5]
    2cce:	4618      	mov	r0, r3
    2cd0:	370c      	adds	r7, #12
    2cd2:	46bd      	mov	sp, r7
    2cd4:	bc80      	pop	{r7}
    2cd6:	4770      	bx	lr
    2cd8:	20001970 	.word	0x20001970

00002cdc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
    2ce4:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	7d9b      	ldrb	r3, [r3, #22]
    2cee:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    2cf0:	683b      	ldr	r3, [r7, #0]
    2cf2:	7d1b      	ldrb	r3, [r3, #20]
    2cf4:	2b02      	cmp	r3, #2
    2cf6:	d146      	bne.n	2d86 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2cf8:	7afb      	ldrb	r3, [r7, #11]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d004      	beq.n	2d08 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    2cfe:	68fb      	ldr	r3, [r7, #12]
    2d00:	7a9b      	ldrb	r3, [r3, #10]
    2d02:	7afa      	ldrb	r2, [r7, #11]
    2d04:	429a      	cmp	r2, r3
    2d06:	d13e      	bne.n	2d86 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    2d08:	683b      	ldr	r3, [r7, #0]
    2d0a:	7d5b      	ldrb	r3, [r3, #21]
    2d0c:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    2d0e:	68fb      	ldr	r3, [r7, #12]
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	727b      	strb	r3, [r7, #9]

        switch(command){
    2d14:	7abb      	ldrb	r3, [r7, #10]
    2d16:	2b80      	cmp	r3, #128	; 0x80
    2d18:	d019      	beq.n	2d4e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    2d1a:	2b80      	cmp	r3, #128	; 0x80
    2d1c:	dc04      	bgt.n	2d28 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    2d1e:	2b01      	cmp	r3, #1
    2d20:	d007      	beq.n	2d32 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    2d22:	2b02      	cmp	r3, #2
    2d24:	d00f      	beq.n	2d46 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    2d26:	e01f      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    2d28:	2b81      	cmp	r3, #129	; 0x81
    2d2a:	d014      	beq.n	2d56 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    2d2c:	2b82      	cmp	r3, #130	; 0x82
    2d2e:	d016      	beq.n	2d5e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    2d30:	e01a      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	695b      	ldr	r3, [r3, #20]
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	781b      	ldrb	r3, [r3, #0]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d113      	bne.n	2d66 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    2d3e:	68fb      	ldr	r3, [r7, #12]
    2d40:	2205      	movs	r2, #5
    2d42:	701a      	strb	r2, [r3, #0]
                }
                break;
    2d44:	e00f      	b.n	2d66 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	2204      	movs	r2, #4
    2d4a:	701a      	strb	r2, [r3, #0]
                break;
    2d4c:	e00c      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	227f      	movs	r2, #127	; 0x7f
    2d52:	701a      	strb	r2, [r3, #0]
                break;
    2d54:	e008      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    2d56:	68fb      	ldr	r3, [r7, #12]
    2d58:	2202      	movs	r2, #2
    2d5a:	725a      	strb	r2, [r3, #9]
                break;
    2d5c:	e004      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	2201      	movs	r2, #1
    2d62:	725a      	strb	r2, [r3, #9]
                break;
    2d64:	e000      	b.n	2d68 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    2d66:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    2d68:	68fb      	ldr	r3, [r7, #12]
    2d6a:	69db      	ldr	r3, [r3, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d00a      	beq.n	2d86 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	7a7a      	ldrb	r2, [r7, #9]
    2d76:	429a      	cmp	r2, r3
    2d78:	d005      	beq.n	2d86 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	69db      	ldr	r3, [r3, #28]
    2d7e:	68fa      	ldr	r2, [r7, #12]
    2d80:	7812      	ldrb	r2, [r2, #0]
    2d82:	4610      	mov	r0, r2
    2d84:	4798      	blx	r3
        }
    }
}
    2d86:	bf00      	nop
    2d88:	3710      	adds	r7, #16
    2d8a:	46bd      	mov	sp, r7
    2d8c:	bd80      	pop	{r7, pc}

00002d8e <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    2d8e:	b480      	push	{r7}
    2d90:	b083      	sub	sp, #12
    2d92:	af00      	add	r7, sp, #0
    2d94:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	4618      	mov	r0, r3
    2d9a:	370c      	adds	r7, #12
    2d9c:	46bd      	mov	sp, r7
    2d9e:	bc80      	pop	{r7}
    2da0:	4770      	bx	lr

00002da2 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    2da2:	b480      	push	{r7}
    2da4:	b083      	sub	sp, #12
    2da6:	af00      	add	r7, sp, #0
    2da8:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	4618      	mov	r0, r3
    2dae:	370c      	adds	r7, #12
    2db0:	46bd      	mov	sp, r7
    2db2:	bc80      	pop	{r7}
    2db4:	4770      	bx	lr
	...

00002db8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    2db8:	b5b0      	push	{r4, r5, r7, lr}
    2dba:	b088      	sub	sp, #32
    2dbc:	af04      	add	r7, sp, #16
    2dbe:	60f8      	str	r0, [r7, #12]
    2dc0:	60b9      	str	r1, [r7, #8]
    2dc2:	607a      	str	r2, [r7, #4]
    2dc4:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    2dc6:	68bb      	ldr	r3, [r7, #8]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d008      	beq.n	2dde <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d005      	beq.n	2dde <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    2dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d002      	beq.n	2dde <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    2dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d102      	bne.n	2de4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    2dde:	f04f 33ff 	mov.w	r3, #4294967295
    2de2:	e062      	b.n	2eaa <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    2de4:	4a33      	ldr	r2, [pc, #204]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2de6:	68bb      	ldr	r3, [r7, #8]
    2de8:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    2dea:	4b32      	ldr	r3, [pc, #200]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	2200      	movs	r2, #0
    2df0:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    2df2:	4b30      	ldr	r3, [pc, #192]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2df4:	681b      	ldr	r3, [r3, #0]
    2df6:	2200      	movs	r2, #0
    2df8:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    2dfa:	4b2e      	ldr	r3, [pc, #184]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2200      	movs	r2, #0
    2e00:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    2e02:	4b2c      	ldr	r3, [pc, #176]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	2200      	movs	r2, #0
    2e08:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    2e0a:	4b2a      	ldr	r3, [pc, #168]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	2200      	movs	r2, #0
    2e10:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    2e12:	4b28      	ldr	r3, [pc, #160]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	2200      	movs	r2, #0
    2e18:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    2e1a:	4b26      	ldr	r3, [pc, #152]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	2200      	movs	r2, #0
    2e20:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    2e22:	4b24      	ldr	r3, [pc, #144]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	22ff      	movs	r2, #255	; 0xff
    2e28:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    2e2a:	4b22      	ldr	r3, [pc, #136]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	2201      	movs	r2, #1
    2e30:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    2e32:	4b20      	ldr	r3, [pc, #128]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	78fa      	ldrb	r2, [r7, #3]
    2e38:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    2e3a:	4b1e      	ldr	r3, [pc, #120]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	6a3a      	ldr	r2, [r7, #32]
    2e40:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    2e42:	4b1c      	ldr	r3, [pc, #112]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	2200      	movs	r2, #0
    2e48:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    2e4a:	4b1a      	ldr	r3, [pc, #104]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e52:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    2e54:	4b17      	ldr	r3, [pc, #92]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	687a      	ldr	r2, [r7, #4]
    2e5a:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    2e5c:	4b15      	ldr	r3, [pc, #84]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	2200      	movs	r2, #0
    2e62:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen->CAN_Rx_BufferInit(
    2e64:	4b14      	ldr	r3, [pc, #80]	; (2eb8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    2e66:	6818      	ldr	r0, [r3, #0]
    2e68:	4b12      	ldr	r3, [pc, #72]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e6a:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
    2e6c:	4a13      	ldr	r2, [pc, #76]	; (2ebc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    2e6e:	9202      	str	r2, [sp, #8]
    2e70:	9301      	str	r3, [sp, #4]
    2e72:	2300      	movs	r3, #0
    2e74:	9300      	str	r3, [sp, #0]
    2e76:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2e7e:	4c10      	ldr	r4, [pc, #64]	; (2ec0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    2e80:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    2e82:	4b0c      	ldr	r3, [pc, #48]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e88:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen->CAN_Tx_BufferInit(
    2e8a:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2e8c:	681c      	ldr	r4, [r3, #0]
    2e8e:	4b0a      	ldr	r3, [pc, #40]	; (2eb8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    2e90:	6818      	ldr	r0, [r3, #0]
    2e92:	2300      	movs	r3, #0
    2e94:	9301      	str	r3, [sp, #4]
    2e96:	2301      	movs	r3, #1
    2e98:	9300      	str	r3, [sp, #0]
    2e9a:	2300      	movs	r3, #0
    2e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2ea0:	4d08      	ldr	r5, [pc, #32]	; (2ec4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
    2ea2:	47a8      	blx	r5
    2ea4:	4603      	mov	r3, r0
    2ea6:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    2ea8:	2300      	movs	r3, #0
}
    2eaa:	4618      	mov	r0, r3
    2eac:	3710      	adds	r7, #16
    2eae:	46bd      	mov	sp, r7
    2eb0:	bdb0      	pop	{r4, r5, r7, pc}
    2eb2:	bf00      	nop
    2eb4:	20001974 	.word	0x20001974
    2eb8:	20001964 	.word	0x20001964
    2ebc:	00002cdd 	.word	0x00002cdd
    2ec0:	00001999 	.word	0x00001999
    2ec4:	00001a99 	.word	0x00001a99

00002ec8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b086      	sub	sp, #24
    2ecc:	af00      	add	r7, sp, #0
    2ece:	60f8      	str	r0, [r7, #12]
    2ed0:	60b9      	str	r1, [r7, #8]
    2ed2:	607a      	str	r2, [r7, #4]
    2ed4:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    2ed6:	4b97      	ldr	r3, [pc, #604]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    2ede:	4b95      	ldr	r3, [pc, #596]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	4a94      	ldr	r2, [pc, #592]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2ee4:	6812      	ldr	r2, [r2, #0]
    2ee6:	68d1      	ldr	r1, [r2, #12]
    2ee8:	68ba      	ldr	r2, [r7, #8]
    2eea:	440a      	add	r2, r1
    2eec:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d005      	beq.n	2f00 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38>
    2ef4:	4b8f      	ldr	r3, [pc, #572]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	68da      	ldr	r2, [r3, #12]
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	429a      	cmp	r2, r3
    2efe:	d204      	bcs.n	2f0a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42>
    2f00:	4b8c      	ldr	r3, [pc, #560]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d139      	bne.n	2f7e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    2f0a:	4b8a      	ldr	r3, [pc, #552]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	2200      	movs	r2, #0
    2f10:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    2f12:	4b88      	ldr	r3, [pc, #544]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f14:	681b      	ldr	r3, [r3, #0]
    2f16:	6a1b      	ldr	r3, [r3, #32]
    2f18:	4a86      	ldr	r2, [pc, #536]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f1a:	6812      	ldr	r2, [r2, #0]
    2f1c:	7812      	ldrb	r2, [r2, #0]
    2f1e:	715a      	strb	r2, [r3, #5]
        canopen->CAN_Send(NMT->HB_TXbuff);
    2f20:	4b85      	ldr	r3, [pc, #532]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    2f22:	681a      	ldr	r2, [r3, #0]
    2f24:	4b83      	ldr	r3, [pc, #524]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f26:	681b      	ldr	r3, [r3, #0]
    2f28:	6a1b      	ldr	r3, [r3, #32]
    2f2a:	4619      	mov	r1, r3
    2f2c:	4610      	mov	r0, r2
    2f2e:	4b83      	ldr	r3, [pc, #524]	; (313c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x274>)
    2f30:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    2f32:	4b80      	ldr	r3, [pc, #512]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d120      	bne.n	2f7e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    2f3c:	4b7d      	ldr	r3, [pc, #500]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	691a      	ldr	r2, [r3, #16]
    2f42:	687b      	ldr	r3, [r7, #4]
    2f44:	429a      	cmp	r2, r3
    2f46:	d208      	bcs.n	2f5a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x92>
    2f48:	4b7a      	ldr	r3, [pc, #488]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	4a79      	ldr	r2, [pc, #484]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f4e:	6812      	ldr	r2, [r2, #0]
    2f50:	6912      	ldr	r2, [r2, #16]
    2f52:	6879      	ldr	r1, [r7, #4]
    2f54:	1a8a      	subs	r2, r1, r2
    2f56:	60da      	str	r2, [r3, #12]
    2f58:	e003      	b.n	2f62 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    2f5a:	4b76      	ldr	r3, [pc, #472]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f5c:	681b      	ldr	r3, [r3, #0]
    2f5e:	2200      	movs	r2, #0
    2f60:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    2f62:	683b      	ldr	r3, [r7, #0]
    2f64:	f003 0304 	and.w	r3, r3, #4
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d104      	bne.n	2f76 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xae>
    2f6c:	4b71      	ldr	r3, [pc, #452]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f6e:	681b      	ldr	r3, [r3, #0]
    2f70:	2205      	movs	r2, #5
    2f72:	701a      	strb	r2, [r3, #0]
    2f74:	e003      	b.n	2f7e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    2f76:	4b6f      	ldr	r3, [pc, #444]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f78:	681b      	ldr	r3, [r3, #0]
    2f7a:	227f      	movs	r2, #127	; 0x7f
    2f7c:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d01a      	beq.n	2fba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
    2f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f86:	2b00      	cmp	r3, #0
    2f88:	d017      	beq.n	2fba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    2f8a:	4b6a      	ldr	r3, [pc, #424]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	68da      	ldr	r2, [r3, #12]
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	429a      	cmp	r2, r3
    2f94:	d20e      	bcs.n	2fb4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    2f96:	4b67      	ldr	r3, [pc, #412]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	68db      	ldr	r3, [r3, #12]
    2f9c:	687a      	ldr	r2, [r7, #4]
    2f9e:	1ad3      	subs	r3, r2, r3
    2fa0:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    2fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2fa4:	681a      	ldr	r2, [r3, #0]
    2fa6:	693b      	ldr	r3, [r7, #16]
    2fa8:	429a      	cmp	r2, r3
    2faa:	d906      	bls.n	2fba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    2fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2fae:	693a      	ldr	r2, [r7, #16]
    2fb0:	601a      	str	r2, [r3, #0]
    2fb2:	e002      	b.n	2fba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    2fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2fb6:	2200      	movs	r2, #0
    2fb8:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    2fba:	2300      	movs	r3, #0
    2fbc:	75fb      	strb	r3, [r7, #23]
    if(canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    2fbe:	4b5e      	ldr	r3, [pc, #376]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	1d18      	adds	r0, r3, #4
    2fc4:	4b5b      	ldr	r3, [pc, #364]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2fc6:	681b      	ldr	r3, [r3, #0]
    2fc8:	695b      	ldr	r3, [r3, #20]
    2fca:	691b      	ldr	r3, [r3, #16]
    2fcc:	2207      	movs	r2, #7
    2fce:	4619      	mov	r1, r3
    2fd0:	4b5b      	ldr	r3, [pc, #364]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    2fd2:	4798      	blx	r3
    2fd4:	4603      	mov	r3, r0
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10d      	bne.n	2ff6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x12e>
    2fda:	4b57      	ldr	r3, [pc, #348]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    2fdc:	681b      	ldr	r3, [r3, #0]
    2fde:	1d18      	adds	r0, r3, #4
    2fe0:	4b54      	ldr	r3, [pc, #336]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	695b      	ldr	r3, [r3, #20]
    2fe6:	691b      	ldr	r3, [r3, #16]
    2fe8:	2206      	movs	r2, #6
    2fea:	4619      	mov	r1, r3
    2fec:	4b54      	ldr	r3, [pc, #336]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    2fee:	4798      	blx	r3
    2ff0:	4603      	mov	r3, r0
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d001      	beq.n	2ffa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x132>
    2ff6:	2301      	movs	r3, #1
    2ff8:	e000      	b.n	2ffc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x134>
    2ffa:	2300      	movs	r3, #0
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d001      	beq.n	3004 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x13c>
        CANpassive = 1;
    3000:	2301      	movs	r3, #1
    3002:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    3004:	4b4b      	ldr	r3, [pc, #300]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	2b05      	cmp	r3, #5
    300c:	d013      	beq.n	3036 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x16e>
    300e:	2b7f      	cmp	r3, #127	; 0x7f
    3010:	d009      	beq.n	3026 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x15e>
    3012:	2b04      	cmp	r3, #4
    3014:	d114      	bne.n	3040 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    3016:	4b47      	ldr	r3, [pc, #284]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	4a46      	ldr	r2, [pc, #280]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    301c:	6812      	ldr	r2, [r2, #0]
    301e:	f992 2003 	ldrsb.w	r2, [r2, #3]
    3022:	71da      	strb	r2, [r3, #7]
    3024:	e00c      	b.n	3040 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    3026:	4b43      	ldr	r3, [pc, #268]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	4a42      	ldr	r2, [pc, #264]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    302c:	6812      	ldr	r2, [r2, #0]
    302e:	f992 2002 	ldrsb.w	r2, [r2, #2]
    3032:	71da      	strb	r2, [r3, #7]
    3034:	e004      	b.n	3040 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    3036:	4b3f      	ldr	r3, [pc, #252]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	2201      	movs	r2, #1
    303c:	71da      	strb	r2, [r3, #7]
    303e:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    3040:	4b3d      	ldr	r3, [pc, #244]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	1d18      	adds	r0, r3, #4
    3046:	4b3b      	ldr	r3, [pc, #236]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	695b      	ldr	r3, [r3, #20]
    304c:	691b      	ldr	r3, [r3, #16]
    304e:	2212      	movs	r2, #18
    3050:	4619      	mov	r1, r3
    3052:	4b3b      	ldr	r3, [pc, #236]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    3054:	4798      	blx	r3
    3056:	4603      	mov	r3, r0
    3058:	2b00      	cmp	r3, #0
    305a:	bf14      	ite	ne
    305c:	2301      	movne	r3, #1
    305e:	2300      	moveq	r3, #0
    3060:	b2db      	uxtb	r3, r3
    3062:	2b00      	cmp	r3, #0
    3064:	d004      	beq.n	3070 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    3066:	4b33      	ldr	r3, [pc, #204]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	2201      	movs	r2, #1
    306c:	721a      	strb	r2, [r3, #8]
    306e:	e07f      	b.n	3170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(canopen->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    3070:	4b31      	ldr	r3, [pc, #196]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    3072:	681b      	ldr	r3, [r3, #0]
    3074:	1d18      	adds	r0, r3, #4
    3076:	4b2f      	ldr	r3, [pc, #188]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	695b      	ldr	r3, [r3, #20]
    307c:	691b      	ldr	r3, [r3, #16]
    307e:	2218      	movs	r2, #24
    3080:	4619      	mov	r1, r3
    3082:	4b2f      	ldr	r3, [pc, #188]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    3084:	4798      	blx	r3
    3086:	4603      	mov	r3, r0
    3088:	2b00      	cmp	r3, #0
    308a:	bf14      	ite	ne
    308c:	2301      	movne	r3, #1
    308e:	2300      	moveq	r3, #0
    3090:	b2db      	uxtb	r3, r3
    3092:	2b00      	cmp	r3, #0
    3094:	d007      	beq.n	30a6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    3096:	4b27      	ldr	r3, [pc, #156]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3098:	681b      	ldr	r3, [r3, #0]
    309a:	4a26      	ldr	r2, [pc, #152]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    309c:	6812      	ldr	r2, [r2, #0]
    309e:	f992 2005 	ldrsb.w	r2, [r2, #5]
    30a2:	721a      	strb	r2, [r3, #8]
    30a4:	e064      	b.n	3170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(canopen->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || canopen->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    30a6:	4b24      	ldr	r3, [pc, #144]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	1d18      	adds	r0, r3, #4
    30ac:	4b21      	ldr	r3, [pc, #132]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	695b      	ldr	r3, [r3, #20]
    30b2:	691b      	ldr	r3, [r3, #16]
    30b4:	221b      	movs	r2, #27
    30b6:	4619      	mov	r1, r3
    30b8:	4b21      	ldr	r3, [pc, #132]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    30ba:	4798      	blx	r3
    30bc:	4603      	mov	r3, r0
    30be:	2b00      	cmp	r3, #0
    30c0:	d10d      	bne.n	30de <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x216>
    30c2:	4b1d      	ldr	r3, [pc, #116]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	1d18      	adds	r0, r3, #4
    30c8:	4b1a      	ldr	r3, [pc, #104]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	695b      	ldr	r3, [r3, #20]
    30ce:	691b      	ldr	r3, [r3, #16]
    30d0:	221c      	movs	r2, #28
    30d2:	4619      	mov	r1, r3
    30d4:	4b1a      	ldr	r3, [pc, #104]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    30d6:	4798      	blx	r3
    30d8:	4603      	mov	r3, r0
    30da:	2b00      	cmp	r3, #0
    30dc:	d001      	beq.n	30e2 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21a>
    30de:	2301      	movs	r3, #1
    30e0:	e000      	b.n	30e4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21c>
    30e2:	2300      	movs	r3, #0
    30e4:	2b00      	cmp	r3, #0
    30e6:	d007      	beq.n	30f8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    30e8:	4b12      	ldr	r3, [pc, #72]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	4a11      	ldr	r2, [pc, #68]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    30ee:	6812      	ldr	r2, [r2, #0]
    30f0:	f992 2004 	ldrsb.w	r2, [r2, #4]
    30f4:	721a      	strb	r2, [r3, #8]
    30f6:	e03b      	b.n	3170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(CANpassive ||  canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    30f8:	7dfb      	ldrb	r3, [r7, #23]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d10d      	bne.n	311a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x252>
    30fe:	4b0e      	ldr	r3, [pc, #56]	; (3138 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	1d18      	adds	r0, r3, #4
    3104:	4b0b      	ldr	r3, [pc, #44]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3106:	681b      	ldr	r3, [r3, #0]
    3108:	695b      	ldr	r3, [r3, #20]
    310a:	691b      	ldr	r3, [r3, #16]
    310c:	2201      	movs	r2, #1
    310e:	4619      	mov	r1, r3
    3110:	4b0b      	ldr	r3, [pc, #44]	; (3140 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    3112:	4798      	blx	r3
    3114:	4603      	mov	r3, r0
    3116:	2b00      	cmp	r3, #0
    3118:	d001      	beq.n	311e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x256>
    311a:	2301      	movs	r3, #1
    311c:	e000      	b.n	3120 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x258>
    311e:	2300      	movs	r3, #0
    3120:	2b00      	cmp	r3, #0
    3122:	d00f      	beq.n	3144 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x27c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    3124:	4b03      	ldr	r3, [pc, #12]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	4a02      	ldr	r2, [pc, #8]	; (3134 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    312a:	6812      	ldr	r2, [r2, #0]
    312c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    3130:	721a      	strb	r2, [r3, #8]
    3132:	e01d      	b.n	3170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>
    3134:	20001974 	.word	0x20001974
    3138:	20001964 	.word	0x20001964
    313c:	00001b45 	.word	0x00001b45
    3140:	0000284d 	.word	0x0000284d

    else if(errorRegister)
    3144:	f897 3020 	ldrb.w	r3, [r7, #32]
    3148:	2b00      	cmp	r3, #0
    314a:	d00d      	beq.n	3168 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a0>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    314c:	4b7c      	ldr	r3, [pc, #496]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	4a7b      	ldr	r2, [pc, #492]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3152:	6812      	ldr	r2, [r2, #0]
    3154:	f992 2002 	ldrsb.w	r2, [r2, #2]
    3158:	2a00      	cmp	r2, #0
    315a:	db02      	blt.n	3162 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29a>
    315c:	f04f 32ff 	mov.w	r2, #4294967295
    3160:	e000      	b.n	3164 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29c>
    3162:	2201      	movs	r2, #1
    3164:	721a      	strb	r2, [r3, #8]
    3166:	e003      	b.n	3170 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else
        NMT->LEDredError = -1;
    3168:	4b75      	ldr	r3, [pc, #468]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	22ff      	movs	r2, #255	; 0xff
    316e:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    3170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3172:	2b00      	cmp	r3, #0
    3174:	f000 80ca 	beq.w	330c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
    3178:	4b71      	ldr	r3, [pc, #452]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	2b05      	cmp	r3, #5
    3180:	f040 80c4 	bne.w	330c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    3184:	7dfb      	ldrb	r3, [r7, #23]
    3186:	2b00      	cmp	r3, #0
    3188:	d00f      	beq.n	31aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2e2>
    318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    318c:	3302      	adds	r3, #2
    318e:	781b      	ldrb	r3, [r3, #0]
    3190:	2b00      	cmp	r3, #0
    3192:	d004      	beq.n	319e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2d6>
    3194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3196:	3302      	adds	r3, #2
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	2b02      	cmp	r3, #2
    319c:	d105      	bne.n	31aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2e2>
    319e:	f897 3020 	ldrb.w	r3, [r7, #32]
    31a2:	f043 0310 	orr.w	r3, r3, #16
    31a6:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    31aa:	f897 3020 	ldrb.w	r3, [r7, #32]
    31ae:	2b00      	cmp	r3, #0
    31b0:	f000 80ac 	beq.w	330c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    31b4:	f897 3020 	ldrb.w	r3, [r7, #32]
    31b8:	f003 0310 	and.w	r3, r3, #16
    31bc:	2b00      	cmp	r3, #0
    31be:	d053      	beq.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                if(errorBehavior[1] == 0){
    31c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31c2:	3301      	adds	r3, #1
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2b00      	cmp	r3, #0
    31c8:	d104      	bne.n	31d4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x30c>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    31ca:	4b5d      	ldr	r3, [pc, #372]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    31cc:	681b      	ldr	r3, [r3, #0]
    31ce:	227f      	movs	r2, #127	; 0x7f
    31d0:	701a      	strb	r2, [r3, #0]
    31d2:	e049      	b.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                }
                else if(errorBehavior[1] == 2){
    31d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31d6:	3301      	adds	r3, #1
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	2b02      	cmp	r3, #2
    31dc:	d104      	bne.n	31e8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x320>
                    NMT->operatingState = CO_NMT_STOPPED;
    31de:	4b58      	ldr	r3, [pc, #352]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    31e0:	681b      	ldr	r3, [r3, #0]
    31e2:	2204      	movs	r2, #4
    31e4:	701a      	strb	r2, [r3, #0]
    31e6:	e03f      	b.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                }
                else if( canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    31e8:	4b56      	ldr	r3, [pc, #344]	; (3344 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    31ea:	681b      	ldr	r3, [r3, #0]
    31ec:	1d18      	adds	r0, r3, #4
    31ee:	4b54      	ldr	r3, [pc, #336]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	695b      	ldr	r3, [r3, #20]
    31f4:	691b      	ldr	r3, [r3, #16]
    31f6:	2212      	movs	r2, #18
    31f8:	4619      	mov	r1, r3
    31fa:	4b53      	ldr	r3, [pc, #332]	; (3348 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    31fc:	4798      	blx	r3
    31fe:	4603      	mov	r3, r0
                     ||  canopen->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  canopen->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    3200:	2b00      	cmp	r3, #0
    3202:	d11b      	bne.n	323c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
                     ||  canopen->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    3204:	4b4f      	ldr	r3, [pc, #316]	; (3344 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	1d18      	adds	r0, r3, #4
    320a:	4b4d      	ldr	r3, [pc, #308]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	695b      	ldr	r3, [r3, #20]
    3210:	691b      	ldr	r3, [r3, #16]
    3212:	221b      	movs	r2, #27
    3214:	4619      	mov	r1, r3
    3216:	4b4c      	ldr	r3, [pc, #304]	; (3348 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    3218:	4798      	blx	r3
    321a:	4603      	mov	r3, r0
    321c:	2b00      	cmp	r3, #0
    321e:	d10d      	bne.n	323c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
                     ||  canopen->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    3220:	4b48      	ldr	r3, [pc, #288]	; (3344 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    3222:	681b      	ldr	r3, [r3, #0]
    3224:	1d18      	adds	r0, r3, #4
    3226:	4b46      	ldr	r3, [pc, #280]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3228:	681b      	ldr	r3, [r3, #0]
    322a:	695b      	ldr	r3, [r3, #20]
    322c:	691b      	ldr	r3, [r3, #16]
    322e:	221c      	movs	r2, #28
    3230:	4619      	mov	r1, r3
    3232:	4b45      	ldr	r3, [pc, #276]	; (3348 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    3234:	4798      	blx	r3
    3236:	4603      	mov	r3, r0
    3238:	2b00      	cmp	r3, #0
    323a:	d001      	beq.n	3240 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x378>
    323c:	2301      	movs	r3, #1
    323e:	e000      	b.n	3242 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x37a>
    3240:	2300      	movs	r3, #0
                else if( canopen->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    3242:	2b00      	cmp	r3, #0
    3244:	d010      	beq.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                {
                    if(errorBehavior[0] == 0){
    3246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d104      	bne.n	3258 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x390>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    324e:	4b3c      	ldr	r3, [pc, #240]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3250:	681b      	ldr	r3, [r3, #0]
    3252:	227f      	movs	r2, #127	; 0x7f
    3254:	701a      	strb	r2, [r3, #0]
    3256:	e007      	b.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                    }
                    else if(errorBehavior[0] == 2){
    3258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    325a:	781b      	ldrb	r3, [r3, #0]
    325c:	2b02      	cmp	r3, #2
    325e:	d103      	bne.n	3268 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                        NMT->operatingState = CO_NMT_STOPPED;
    3260:	4b37      	ldr	r3, [pc, #220]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	2204      	movs	r2, #4
    3266:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    3268:	f897 3020 	ldrb.w	r3, [r7, #32]
    326c:	f003 0301 	and.w	r3, r3, #1
    3270:	2b00      	cmp	r3, #0
    3272:	d012      	beq.n	329a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    3274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3276:	3303      	adds	r3, #3
    3278:	781b      	ldrb	r3, [r3, #0]
    327a:	2b00      	cmp	r3, #0
    327c:	d104      	bne.n	3288 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3c0>
    327e:	4b30      	ldr	r3, [pc, #192]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	227f      	movs	r2, #127	; 0x7f
    3284:	701a      	strb	r2, [r3, #0]
    3286:	e008      	b.n	329a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    3288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    328a:	3303      	adds	r3, #3
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b02      	cmp	r3, #2
    3290:	d103      	bne.n	329a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
    3292:	4b2b      	ldr	r3, [pc, #172]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	2204      	movs	r2, #4
    3298:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    329a:	f897 3020 	ldrb.w	r3, [r7, #32]
    329e:	f003 0320 	and.w	r3, r3, #32
    32a2:	2b00      	cmp	r3, #0
    32a4:	d012      	beq.n	32cc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    32a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32a8:	3304      	adds	r3, #4
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d104      	bne.n	32ba <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3f2>
    32b0:	4b23      	ldr	r3, [pc, #140]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    32b2:	681b      	ldr	r3, [r3, #0]
    32b4:	227f      	movs	r2, #127	; 0x7f
    32b6:	701a      	strb	r2, [r3, #0]
    32b8:	e008      	b.n	32cc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    32ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32bc:	3304      	adds	r3, #4
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	2b02      	cmp	r3, #2
    32c2:	d103      	bne.n	32cc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
    32c4:	4b1e      	ldr	r3, [pc, #120]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	2204      	movs	r2, #4
    32ca:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    32cc:	f997 3020 	ldrsb.w	r3, [r7, #32]
    32d0:	2b00      	cmp	r3, #0
    32d2:	da12      	bge.n	32fa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    32d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32d6:	3305      	adds	r3, #5
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	2b00      	cmp	r3, #0
    32dc:	d104      	bne.n	32e8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x420>
    32de:	4b18      	ldr	r3, [pc, #96]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	227f      	movs	r2, #127	; 0x7f
    32e4:	701a      	strb	r2, [r3, #0]
    32e6:	e008      	b.n	32fa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    32e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32ea:	3305      	adds	r3, #5
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b02      	cmp	r3, #2
    32f0:	d103      	bne.n	32fa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
    32f2:	4b13      	ldr	r3, [pc, #76]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	2204      	movs	r2, #4
    32f8:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    32fa:	4b11      	ldr	r3, [pc, #68]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	2b05      	cmp	r3, #5
    3302:	d003      	beq.n	330c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
                NMT->HBproducerTimer = HBtime;
    3304:	4b0e      	ldr	r3, [pc, #56]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	687a      	ldr	r2, [r7, #4]
    330a:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    330c:	4b0c      	ldr	r3, [pc, #48]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	69db      	ldr	r3, [r3, #28]
    3312:	2b00      	cmp	r3, #0
    3314:	d00d      	beq.n	3332 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x46a>
    3316:	4b0a      	ldr	r3, [pc, #40]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	781b      	ldrb	r3, [r3, #0]
    331c:	7dba      	ldrb	r2, [r7, #22]
    331e:	429a      	cmp	r2, r3
    3320:	d007      	beq.n	3332 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x46a>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    3322:	4b07      	ldr	r3, [pc, #28]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	69db      	ldr	r3, [r3, #28]
    3328:	4a05      	ldr	r2, [pc, #20]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    332a:	6812      	ldr	r2, [r2, #0]
    332c:	7812      	ldrb	r2, [r2, #0]
    332e:	4610      	mov	r0, r2
    3330:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    3332:	4b03      	ldr	r3, [pc, #12]	; (3340 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	7a5b      	ldrb	r3, [r3, #9]
}
    3338:	4618      	mov	r0, r3
    333a:	3718      	adds	r7, #24
    333c:	46bd      	mov	sp, r7
    333e:	bd80      	pop	{r7, pc}
    3340:	20001974 	.word	0x20001974
    3344:	20001964 	.word	0x20001964
    3348:	0000284d 	.word	0x0000284d

0000334c <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    334c:	b480      	push	{r7}
    334e:	b083      	sub	sp, #12
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	4618      	mov	r0, r3
    3358:	370c      	adds	r7, #12
    335a:	46bd      	mov	sp, r7
    335c:	bc80      	pop	{r7}
    335e:	4770      	bx	lr

00003360 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    3360:	b480      	push	{r7}
    3362:	b083      	sub	sp, #12
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	4618      	mov	r0, r3
    336c:	370c      	adds	r7, #12
    336e:	46bd      	mov	sp, r7
    3370:	bc80      	pop	{r7}
    3372:	4770      	bx	lr

00003374 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    3374:	b480      	push	{r7}
    3376:	b085      	sub	sp, #20
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    3382:	68fb      	ldr	r3, [r7, #12]
    3384:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3388:	2b00      	cmp	r3, #0
    338a:	d070      	beq.n	346e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	695b      	ldr	r3, [r3, #20]
    3390:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    3392:	2b05      	cmp	r3, #5
    3394:	d16b      	bne.n	346e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    3396:	683b      	ldr	r3, [r7, #0]
    3398:	7d1b      	ldrb	r3, [r3, #20]
    339a:	461a      	mov	r2, r3
    339c:	68fb      	ldr	r3, [r7, #12]
    339e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    33a2:	429a      	cmp	r2, r3
    33a4:	db63      	blt.n	346e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    33a6:	68fb      	ldr	r3, [r7, #12]
    33a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    33ac:	2b00      	cmp	r3, #0
    33ae:	d032      	beq.n	3416 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    33b0:	68fb      	ldr	r3, [r7, #12]
    33b2:	689b      	ldr	r3, [r3, #8]
    33b4:	7edb      	ldrb	r3, [r3, #27]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d02d      	beq.n	3416 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    33ba:	683b      	ldr	r3, [r7, #0]
    33bc:	7d5a      	ldrb	r2, [r3, #21]
    33be:	68fb      	ldr	r3, [r7, #12]
    33c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    33c4:	683b      	ldr	r3, [r7, #0]
    33c6:	7d9a      	ldrb	r2, [r3, #22]
    33c8:	68fb      	ldr	r3, [r7, #12]
    33ca:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    33ce:	683b      	ldr	r3, [r7, #0]
    33d0:	7dda      	ldrb	r2, [r3, #23]
    33d2:	68fb      	ldr	r3, [r7, #12]
    33d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    33d8:	683b      	ldr	r3, [r7, #0]
    33da:	7e1a      	ldrb	r2, [r3, #24]
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    33e2:	683b      	ldr	r3, [r7, #0]
    33e4:	7e5a      	ldrb	r2, [r3, #25]
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    33ec:	683b      	ldr	r3, [r7, #0]
    33ee:	7e9a      	ldrb	r2, [r3, #26]
    33f0:	68fb      	ldr	r3, [r7, #12]
    33f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    33f6:	683b      	ldr	r3, [r7, #0]
    33f8:	7eda      	ldrb	r2, [r3, #27]
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    3400:	683b      	ldr	r3, [r7, #0]
    3402:	7f1a      	ldrb	r2, [r3, #28]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    340a:	68fb      	ldr	r3, [r7, #12]
    340c:	2201      	movs	r2, #1
    340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3412:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    3414:	e02b      	b.n	346e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    3416:	683b      	ldr	r3, [r7, #0]
    3418:	7d5a      	ldrb	r2, [r3, #21]
    341a:	68fb      	ldr	r3, [r7, #12]
    341c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    3420:	683b      	ldr	r3, [r7, #0]
    3422:	7d9a      	ldrb	r2, [r3, #22]
    3424:	68fb      	ldr	r3, [r7, #12]
    3426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    342a:	683b      	ldr	r3, [r7, #0]
    342c:	7dda      	ldrb	r2, [r3, #23]
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    3434:	683b      	ldr	r3, [r7, #0]
    3436:	7e1a      	ldrb	r2, [r3, #24]
    3438:	68fb      	ldr	r3, [r7, #12]
    343a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    343e:	683b      	ldr	r3, [r7, #0]
    3440:	7e5a      	ldrb	r2, [r3, #25]
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	7e9a      	ldrb	r2, [r3, #26]
    344c:	68fb      	ldr	r3, [r7, #12]
    344e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    3452:	683b      	ldr	r3, [r7, #0]
    3454:	7eda      	ldrb	r2, [r3, #27]
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    345c:	683b      	ldr	r3, [r7, #0]
    345e:	7f1a      	ldrb	r2, [r3, #28]
    3460:	68fb      	ldr	r3, [r7, #12]
    3462:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	2201      	movs	r2, #1
    346a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    346e:	bf00      	nop
    3470:	3714      	adds	r7, #20
    3472:	46bd      	mov	sp, r7
    3474:	bc80      	pop	{r7}
    3476:	4770      	bx	lr

00003478 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    3478:	b590      	push	{r4, r7, lr}
    347a:	b089      	sub	sp, #36	; 0x24
    347c:	af04      	add	r7, sp, #16
    347e:	6078      	str	r0, [r7, #4]
    3480:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    3482:	683b      	ldr	r3, [r7, #0]
    3484:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    3486:	683a      	ldr	r2, [r7, #0]
    3488:	4b2d      	ldr	r3, [pc, #180]	; (3540 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    348a:	4013      	ands	r3, r2
    348c:	2b00      	cmp	r3, #0
    348e:	d123      	bne.n	34d8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3496:	2b00      	cmp	r3, #0
    3498:	d01e      	beq.n	34d8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	2b00      	cmp	r3, #0
    349e:	d01b      	beq.n	34d8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    34a0:	687b      	ldr	r3, [r7, #4]
    34a2:	69da      	ldr	r2, [r3, #28]
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	429a      	cmp	r2, r3
    34a8:	d105      	bne.n	34b6 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	7e1b      	ldrb	r3, [r3, #24]
    34ae:	461a      	mov	r2, r3
    34b0:	68fb      	ldr	r3, [r7, #12]
    34b2:	4413      	add	r3, r2
    34b4:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	2201      	movs	r2, #1
    34ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	68db      	ldr	r3, [r3, #12]
    34c2:	7a1b      	ldrb	r3, [r3, #8]
    34c4:	2bf0      	cmp	r3, #240	; 0xf0
    34c6:	bfd4      	ite	le
    34c8:	2301      	movle	r3, #1
    34ca:	2300      	movgt	r3, #0
    34cc:	b2db      	uxtb	r3, r3
    34ce:	461a      	mov	r2, r3
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    34d6:	e00d      	b.n	34f4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    34d8:	2300      	movs	r3, #0
    34da:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	2200      	movs	r2, #0
    34e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	2200      	movs	r2, #0
    34e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	2200      	movs	r2, #0
    34f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen->CAN_Rx_BufferInit(
    34f4:	4b13      	ldr	r3, [pc, #76]	; (3544 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    34f6:	6818      	ldr	r0, [r3, #0]
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    34fc:	4b12      	ldr	r3, [pc, #72]	; (3548 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    34fe:	9302      	str	r3, [sp, #8]
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	9301      	str	r3, [sp, #4]
    3504:	2300      	movs	r3, #0
    3506:	9300      	str	r3, [sp, #0]
    3508:	f240 73ff 	movw	r3, #2047	; 0x7ff
    350c:	68fa      	ldr	r2, [r7, #12]
    350e:	4c0f      	ldr	r4, [pc, #60]	; (354c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    3510:	47a0      	blx	r4
    3512:	4603      	mov	r3, r0
    3514:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    3516:	f997 300b 	ldrsb.w	r3, [r7, #11]
    351a:	2b00      	cmp	r3, #0
    351c:	d00b      	beq.n	3536 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	2200      	movs	r2, #0
    3522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	2200      	movs	r2, #0
    352a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	2200      	movs	r2, #0
    3532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    3536:	bf00      	nop
    3538:	3714      	adds	r7, #20
    353a:	46bd      	mov	sp, r7
    353c:	bd90      	pop	{r4, r7, pc}
    353e:	bf00      	nop
    3540:	bffff800 	.word	0xbffff800
    3544:	20001964 	.word	0x20001964
    3548:	00003375 	.word	0x00003375
    354c:	00001999 	.word	0x00001999

00003550 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    3550:	b590      	push	{r4, r7, lr}
    3552:	b089      	sub	sp, #36	; 0x24
    3554:	af02      	add	r7, sp, #8
    3556:	60f8      	str	r0, [r7, #12]
    3558:	60b9      	str	r1, [r7, #8]
    355a:	4613      	mov	r3, r2
    355c:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    355e:	68bb      	ldr	r3, [r7, #8]
    3560:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    3562:	68ba      	ldr	r2, [r7, #8]
    3564:	4b1c      	ldr	r3, [pc, #112]	; (35d8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    3566:	4013      	ands	r3, r2
    3568:	2b00      	cmp	r3, #0
    356a:	d115      	bne.n	3598 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    356c:	68fb      	ldr	r3, [r7, #12]
    356e:	7f9b      	ldrb	r3, [r3, #30]
    3570:	2b00      	cmp	r3, #0
    3572:	d011      	beq.n	3598 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    3574:	697b      	ldr	r3, [r7, #20]
    3576:	2b00      	cmp	r3, #0
    3578:	d00e      	beq.n	3598 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    357a:	68fb      	ldr	r3, [r7, #12]
    357c:	699a      	ldr	r2, [r3, #24]
    357e:	697b      	ldr	r3, [r7, #20]
    3580:	429a      	cmp	r2, r3
    3582:	d105      	bne.n	3590 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	7d1b      	ldrb	r3, [r3, #20]
    3588:	461a      	mov	r2, r3
    358a:	697b      	ldr	r3, [r7, #20]
    358c:	4413      	add	r3, r2
    358e:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	2201      	movs	r2, #1
    3594:	775a      	strb	r2, [r3, #29]
    3596:	e004      	b.n	35a2 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    3598:	2300      	movs	r3, #0
    359a:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    359c:	68fb      	ldr	r3, [r7, #12]
    359e:	2200      	movs	r2, #0
    35a0:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen->CAN_Tx_BufferInit(
    35a2:	4b0e      	ldr	r3, [pc, #56]	; (35dc <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    35a4:	6818      	ldr	r0, [r3, #0]
    35a6:	68fb      	ldr	r3, [r7, #12]
    35a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
    35aa:	68fb      	ldr	r3, [r7, #12]
    35ac:	7f9b      	ldrb	r3, [r3, #30]
    35ae:	79fa      	ldrb	r2, [r7, #7]
    35b0:	9201      	str	r2, [sp, #4]
    35b2:	9300      	str	r3, [sp, #0]
    35b4:	2300      	movs	r3, #0
    35b6:	697a      	ldr	r2, [r7, #20]
    35b8:	4c09      	ldr	r4, [pc, #36]	; (35e0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    35ba:	47a0      	blx	r4
    35bc:	4602      	mov	r2, r0
    35be:	68fb      	ldr	r3, [r7, #12]
    35c0:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    35c2:	68fb      	ldr	r3, [r7, #12]
    35c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    35c6:	2b00      	cmp	r3, #0
    35c8:	d102      	bne.n	35d0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    35ca:	68fb      	ldr	r3, [r7, #12]
    35cc:	2200      	movs	r2, #0
    35ce:	775a      	strb	r2, [r3, #29]
    }
}
    35d0:	bf00      	nop
    35d2:	371c      	adds	r7, #28
    35d4:	46bd      	mov	sp, r7
    35d6:	bd90      	pop	{r4, r7, pc}
    35d8:	bffff800 	.word	0xbffff800
    35dc:	20001964 	.word	0x20001964
    35e0:	00001a99 	.word	0x00001a99

000035e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b08a      	sub	sp, #40	; 0x28
    35e8:	af00      	add	r7, sp, #0
    35ea:	60f8      	str	r0, [r7, #12]
    35ec:	60b9      	str	r1, [r7, #8]
    35ee:	603b      	str	r3, [r7, #0]
    35f0:	4613      	mov	r3, r2
    35f2:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    35f4:	68bb      	ldr	r3, [r7, #8]
    35f6:	0c1b      	lsrs	r3, r3, #16
    35f8:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    35fa:	68bb      	ldr	r3, [r7, #8]
    35fc:	0a1b      	lsrs	r3, r3, #8
    35fe:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    3600:	68bb      	ldr	r3, [r7, #8]
    3602:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3604:	7ebb      	ldrb	r3, [r7, #26]
    3606:	f003 0307 	and.w	r3, r3, #7
    360a:	2b00      	cmp	r3, #0
    360c:	d001      	beq.n	3612 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    360e:	4b6b      	ldr	r3, [pc, #428]	; (37bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3610:	e0cf      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    3612:	7ebb      	ldrb	r3, [r7, #26]
    3614:	10db      	asrs	r3, r3, #3
    3616:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    3618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    361a:	781a      	ldrb	r2, [r3, #0]
    361c:	7ebb      	ldrb	r3, [r7, #26]
    361e:	4413      	add	r3, r2
    3620:	b2da      	uxtb	r2, r3
    3622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3624:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    3626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	2b08      	cmp	r3, #8
    362c:	dd01      	ble.n	3632 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    362e:	4b64      	ldr	r3, [pc, #400]	; (37c0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    3630:	e0bf      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    3632:	69fb      	ldr	r3, [r7, #28]
    3634:	2b07      	cmp	r3, #7
    3636:	d832      	bhi.n	369e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    3638:	7efb      	ldrb	r3, [r7, #27]
    363a:	2b00      	cmp	r3, #0
    363c:	d12f      	bne.n	369e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    363e:	2304      	movs	r3, #4
    3640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    3644:	69fb      	ldr	r3, [r7, #28]
    3646:	2b01      	cmp	r3, #1
    3648:	d803      	bhi.n	3652 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    364a:	2300      	movs	r3, #0
    364c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3650:	e012      	b.n	3678 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    3652:	69fb      	ldr	r3, [r7, #28]
    3654:	2b02      	cmp	r3, #2
    3656:	d002      	beq.n	365e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    3658:	69fb      	ldr	r3, [r7, #28]
    365a:	2b05      	cmp	r3, #5
    365c:	d103      	bne.n	3666 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    365e:	2301      	movs	r3, #1
    3660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3664:	e008      	b.n	3678 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    3666:	69fb      	ldr	r3, [r7, #28]
    3668:	2b03      	cmp	r3, #3
    366a:	d002      	beq.n	3672 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    366c:	69fb      	ldr	r3, [r7, #28]
    366e:	2b06      	cmp	r3, #6
    3670:	d102      	bne.n	3678 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    3672:	2302      	movs	r3, #2
    3674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3678:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    367c:	7ebb      	ldrb	r3, [r7, #26]
    367e:	429a      	cmp	r2, r3
    3680:	da01      	bge.n	3686 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    3682:	4b4e      	ldr	r3, [pc, #312]	; (37bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3684:	e095      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    3686:	79fb      	ldrb	r3, [r7, #7]
    3688:	2b00      	cmp	r3, #0
    368a:	d103      	bne.n	3694 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    368c:	683b      	ldr	r3, [r7, #0]
    368e:	4a4d      	ldr	r2, [pc, #308]	; (37c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    3690:	601a      	str	r2, [r3, #0]
    3692:	e002      	b.n	369a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    3694:	683b      	ldr	r3, [r7, #0]
    3696:	4a4c      	ldr	r2, [pc, #304]	; (37c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    3698:	601a      	str	r2, [r3, #0]

        return 0;
    369a:	2300      	movs	r3, #0
    369c:	e089      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen->CO_OD_find( index);
    369e:	4b4b      	ldr	r3, [pc, #300]	; (37cc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	3304      	adds	r3, #4
    36a4:	69f9      	ldr	r1, [r7, #28]
    36a6:	4618      	mov	r0, r3
    36a8:	4b49      	ldr	r3, [pc, #292]	; (37d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    36aa:	4798      	blx	r3
    36ac:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    36ae:	697b      	ldr	r3, [r7, #20]
    36b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36b4:	4293      	cmp	r3, r2
    36b6:	d00b      	beq.n	36d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    36b8:	7ef9      	ldrb	r1, [r7, #27]
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    36be:	697a      	ldr	r2, [r7, #20]
    36c0:	4613      	mov	r3, r2
    36c2:	009b      	lsls	r3, r3, #2
    36c4:	4413      	add	r3, r2
    36c6:	009b      	lsls	r3, r3, #2
    36c8:	4403      	add	r3, r0
    36ca:	791b      	ldrb	r3, [r3, #4]
    36cc:	4299      	cmp	r1, r3
    36ce:	dd01      	ble.n	36d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    36d0:	4b40      	ldr	r3, [pc, #256]	; (37d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    36d2:	e06e      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen->CO_OD_getAttribute( entryNo, subIndex);
    36d4:	4b3d      	ldr	r3, [pc, #244]	; (37cc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	3304      	adds	r3, #4
    36da:	7efa      	ldrb	r2, [r7, #27]
    36dc:	6979      	ldr	r1, [r7, #20]
    36de:	4618      	mov	r0, r3
    36e0:	4b3d      	ldr	r3, [pc, #244]	; (37d8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    36e2:	4798      	blx	r3
    36e4:	4603      	mov	r3, r0
    36e6:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    36e8:	79fb      	ldrb	r3, [r7, #7]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d10b      	bne.n	3706 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    36ee:	7cfb      	ldrb	r3, [r7, #19]
    36f0:	f003 0310 	and.w	r3, r3, #16
    36f4:	2b00      	cmp	r3, #0
    36f6:	d004      	beq.n	3702 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    36f8:	7cfb      	ldrb	r3, [r7, #19]
    36fa:	f003 0308 	and.w	r3, r3, #8
    36fe:	2b00      	cmp	r3, #0
    3700:	d101      	bne.n	3706 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    3702:	4b2e      	ldr	r3, [pc, #184]	; (37bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3704:	e055      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3706:	79fb      	ldrb	r3, [r7, #7]
    3708:	2b00      	cmp	r3, #0
    370a:	d00b      	beq.n	3724 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    370c:	7cfb      	ldrb	r3, [r7, #19]
    370e:	f003 0320 	and.w	r3, r3, #32
    3712:	2b00      	cmp	r3, #0
    3714:	d004      	beq.n	3720 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    3716:	7cfb      	ldrb	r3, [r7, #19]
    3718:	f003 0304 	and.w	r3, r3, #4
    371c:	2b00      	cmp	r3, #0
    371e:	d101      	bne.n	3724 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    3720:	4b26      	ldr	r3, [pc, #152]	; (37bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3722:	e046      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen->CO_OD_getLength( entryNo, subIndex);
    3724:	4b29      	ldr	r3, [pc, #164]	; (37cc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	3304      	adds	r3, #4
    372a:	7efa      	ldrb	r2, [r7, #27]
    372c:	6979      	ldr	r1, [r7, #20]
    372e:	4618      	mov	r0, r3
    3730:	4b2a      	ldr	r3, [pc, #168]	; (37dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    3732:	4798      	blx	r3
    3734:	4603      	mov	r3, r0
    3736:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    3738:	7cba      	ldrb	r2, [r7, #18]
    373a:	7ebb      	ldrb	r3, [r7, #26]
    373c:	429a      	cmp	r2, r3
    373e:	da01      	bge.n	3744 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    3740:	4b1e      	ldr	r3, [pc, #120]	; (37bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    3742:	e036      	b.n	37b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    3744:	f997 3013 	ldrsb.w	r3, [r7, #19]
    3748:	2b00      	cmp	r3, #0
    374a:	da01      	bge.n	3750 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    374c:	2201      	movs	r2, #1
    374e:	e000      	b.n	3752 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    3750:	2200      	movs	r2, #0
    3752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3754:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen->CO_OD_getDataPointer( entryNo, subIndex));
    3756:	4b1d      	ldr	r3, [pc, #116]	; (37cc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    3758:	681b      	ldr	r3, [r3, #0]
    375a:	3304      	adds	r3, #4
    375c:	7efa      	ldrb	r2, [r7, #27]
    375e:	6979      	ldr	r1, [r7, #20]
    3760:	4618      	mov	r0, r3
    3762:	4b1f      	ldr	r3, [pc, #124]	; (37e0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    3764:	4798      	blx	r3
    3766:	4602      	mov	r2, r0
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    376c:	7cfb      	ldrb	r3, [r7, #19]
    376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3772:	2b00      	cmp	r3, #0
    3774:	d01c      	beq.n	37b0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    3776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3778:	781b      	ldrb	r3, [r3, #0]
    377a:	461a      	mov	r2, r3
    377c:	7ebb      	ldrb	r3, [r7, #26]
    377e:	1ad3      	subs	r3, r2, r3
    3780:	623b      	str	r3, [r7, #32]
    3782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	461a      	mov	r2, r3
    3788:	6a3b      	ldr	r3, [r7, #32]
    378a:	429a      	cmp	r2, r3
    378c:	d910      	bls.n	37b0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3790:	781b      	ldrb	r3, [r3, #0]
    3792:	b25a      	sxtb	r2, r3
    3794:	2101      	movs	r1, #1
    3796:	6a3b      	ldr	r3, [r7, #32]
    3798:	fa01 f303 	lsl.w	r3, r1, r3
    379c:	b25b      	sxtb	r3, r3
    379e:	4313      	orrs	r3, r2
    37a0:	b25b      	sxtb	r3, r3
    37a2:	b2da      	uxtb	r2, r3
    37a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37a6:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    37a8:	6a3b      	ldr	r3, [r7, #32]
    37aa:	3301      	adds	r3, #1
    37ac:	623b      	str	r3, [r7, #32]
    37ae:	e7e8      	b.n	3782 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    37b0:	2300      	movs	r3, #0
}
    37b2:	4618      	mov	r0, r3
    37b4:	3728      	adds	r7, #40	; 0x28
    37b6:	46bd      	mov	sp, r7
    37b8:	bd80      	pop	{r7, pc}
    37ba:	bf00      	nop
    37bc:	06040041 	.word	0x06040041
    37c0:	06040042 	.word	0x06040042
    37c4:	2000197c 	.word	0x2000197c
    37c8:	20001978 	.word	0x20001978
    37cc:	20001964 	.word	0x20001964
    37d0:	00004bb9 	.word	0x00004bb9
    37d4:	06020000 	.word	0x06020000
    37d8:	00004d0d 	.word	0x00004d0d
    37dc:	00004c65 	.word	0x00004c65
    37e0:	00004dbd 	.word	0x00004dbd

000037e4 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    37e4:	b590      	push	{r4, r7, lr}
    37e6:	b091      	sub	sp, #68	; 0x44
    37e8:	af04      	add	r7, sp, #16
    37ea:	6078      	str	r0, [r7, #4]
    37ec:	460b      	mov	r3, r1
    37ee:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    37f0:	2300      	movs	r3, #0
    37f2:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    37f4:	2300      	movs	r3, #0
    37f6:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	691b      	ldr	r3, [r3, #16]
    37fc:	3304      	adds	r3, #4
    37fe:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    3800:	78fb      	ldrb	r3, [r7, #3]
    3802:	62fb      	str	r3, [r7, #44]	; 0x2c
    3804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3806:	2b00      	cmp	r3, #0
    3808:	d045      	beq.n	3896 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    380a:	2300      	movs	r3, #0
    380c:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    380e:	7dfb      	ldrb	r3, [r7, #23]
    3810:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    3812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3814:	1d1a      	adds	r2, r3, #4
    3816:	627a      	str	r2, [r7, #36]	; 0x24
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    3820:	f107 0210 	add.w	r2, r7, #16
    3824:	f107 030e 	add.w	r3, r7, #14
    3828:	9302      	str	r3, [sp, #8]
    382a:	f107 030f 	add.w	r3, r7, #15
    382e:	9301      	str	r3, [sp, #4]
    3830:	f107 0317 	add.w	r3, r7, #23
    3834:	9300      	str	r3, [sp, #0]
    3836:	4613      	mov	r3, r2
    3838:	2200      	movs	r2, #0
    383a:	69b9      	ldr	r1, [r7, #24]
    383c:	4c1a      	ldr	r4, [pc, #104]	; (38a8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    383e:	47a0      	blx	r4
    3840:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    3842:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3844:	2b00      	cmp	r3, #0
    3846:	d00e      	beq.n	3866 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    3848:	2300      	movs	r3, #0
    384a:	75fb      	strb	r3, [r7, #23]
           canopen->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    384c:	4b17      	ldr	r3, [pc, #92]	; (38ac <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	1d18      	adds	r0, r3, #4
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	6819      	ldr	r1, [r3, #0]
    3856:	69bb      	ldr	r3, [r7, #24]
    3858:	9300      	str	r3, [sp, #0]
    385a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    385e:	221a      	movs	r2, #26
    3860:	4c13      	ldr	r4, [pc, #76]	; (38b0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    3862:	47a0      	blx	r4
    3864:	e017      	b.n	3896 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    3866:	7ffb      	ldrb	r3, [r7, #31]
    3868:	623b      	str	r3, [r7, #32]
    386a:	7dfb      	ldrb	r3, [r7, #23]
    386c:	461a      	mov	r2, r3
    386e:	6a3b      	ldr	r3, [r7, #32]
    3870:	429a      	cmp	r2, r3
    3872:	d90c      	bls.n	388e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    3874:	693a      	ldr	r2, [r7, #16]
    3876:	1c53      	adds	r3, r2, #1
    3878:	613b      	str	r3, [r7, #16]
    387a:	6879      	ldr	r1, [r7, #4]
    387c:	6a3b      	ldr	r3, [r7, #32]
    387e:	3308      	adds	r3, #8
    3880:	009b      	lsls	r3, r3, #2
    3882:	440b      	add	r3, r1
    3884:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    3886:	6a3b      	ldr	r3, [r7, #32]
    3888:	3301      	adds	r3, #1
    388a:	623b      	str	r3, [r7, #32]
    388c:	e7ed      	b.n	386a <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3890:	3b01      	subs	r3, #1
    3892:	62fb      	str	r3, [r7, #44]	; 0x2c
    3894:	e7b6      	b.n	3804 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    3896:	7dfa      	ldrb	r2, [r7, #23]
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    38a0:	4618      	mov	r0, r3
    38a2:	3734      	adds	r7, #52	; 0x34
    38a4:	46bd      	mov	sp, r7
    38a6:	bd90      	pop	{r4, r7, pc}
    38a8:	000035e5 	.word	0x000035e5
    38ac:	20001964 	.word	0x20001964
    38b0:	000025ad 	.word	0x000025ad

000038b4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    38b4:	b590      	push	{r4, r7, lr}
    38b6:	b091      	sub	sp, #68	; 0x44
    38b8:	af04      	add	r7, sp, #16
    38ba:	6078      	str	r0, [r7, #4]
    38bc:	460b      	mov	r3, r1
    38be:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    38c0:	2300      	movs	r3, #0
    38c2:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    38c4:	2300      	movs	r3, #0
    38c6:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	68db      	ldr	r3, [r3, #12]
    38cc:	3304      	adds	r3, #4
    38ce:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	2200      	movs	r2, #0
    38d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    38d8:	78fb      	ldrb	r3, [r7, #3]
    38da:	62fb      	str	r3, [r7, #44]	; 0x2c
    38dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38de:	2b00      	cmp	r3, #0
    38e0:	d042      	beq.n	3968 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    38e2:	7dfb      	ldrb	r3, [r7, #23]
    38e4:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    38e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38e8:	1d1a      	adds	r2, r3, #4
    38ea:	627a      	str	r2, [r7, #36]	; 0x24
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	6858      	ldr	r0, [r3, #4]
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    38f8:	f107 0110 	add.w	r1, r7, #16
    38fc:	f107 020f 	add.w	r2, r7, #15
    3900:	9202      	str	r2, [sp, #8]
    3902:	9301      	str	r3, [sp, #4]
    3904:	f107 0317 	add.w	r3, r7, #23
    3908:	9300      	str	r3, [sp, #0]
    390a:	460b      	mov	r3, r1
    390c:	2201      	movs	r2, #1
    390e:	69b9      	ldr	r1, [r7, #24]
    3910:	4c19      	ldr	r4, [pc, #100]	; (3978 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    3912:	47a0      	blx	r4
    3914:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    3916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3918:	2b00      	cmp	r3, #0
    391a:	d00e      	beq.n	393a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    391c:	2300      	movs	r3, #0
    391e:	75fb      	strb	r3, [r7, #23]
            canopen->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    3920:	4b16      	ldr	r3, [pc, #88]	; (397c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	1d18      	adds	r0, r3, #4
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	6819      	ldr	r1, [r3, #0]
    392a:	69bb      	ldr	r3, [r7, #24]
    392c:	9300      	str	r3, [sp, #0]
    392e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    3932:	221a      	movs	r2, #26
    3934:	4c12      	ldr	r4, [pc, #72]	; (3980 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    3936:	47a0      	blx	r4
    3938:	e016      	b.n	3968 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    393a:	7ffb      	ldrb	r3, [r7, #31]
    393c:	623b      	str	r3, [r7, #32]
    393e:	7dfb      	ldrb	r3, [r7, #23]
    3940:	461a      	mov	r2, r3
    3942:	6a3b      	ldr	r3, [r7, #32]
    3944:	429a      	cmp	r2, r3
    3946:	d90b      	bls.n	3960 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    3948:	693b      	ldr	r3, [r7, #16]
    394a:	1c5a      	adds	r2, r3, #1
    394c:	613a      	str	r2, [r7, #16]
    394e:	687a      	ldr	r2, [r7, #4]
    3950:	6a39      	ldr	r1, [r7, #32]
    3952:	3108      	adds	r1, #8
    3954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    3958:	6a3b      	ldr	r3, [r7, #32]
    395a:	3301      	adds	r3, #1
    395c:	623b      	str	r3, [r7, #32]
    395e:	e7ee      	b.n	393e <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    3960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3962:	3b01      	subs	r3, #1
    3964:	62fb      	str	r3, [r7, #44]	; 0x2c
    3966:	e7b9      	b.n	38dc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    3968:	7dfa      	ldrb	r2, [r7, #23]
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	779a      	strb	r2, [r3, #30]

    return ret;
    396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    3970:	4618      	mov	r0, r3
    3972:	3734      	adds	r7, #52	; 0x34
    3974:	46bd      	mov	sp, r7
    3976:	bd90      	pop	{r4, r7, pc}
    3978:	000035e5 	.word	0x000035e5
    397c:	20001964 	.word	0x20001964
    3980:	000025ad 	.word	0x000025ad

00003984 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    3984:	b580      	push	{r7, lr}
    3986:	b088      	sub	sp, #32
    3988:	af00      	add	r7, sp, #0
    398a:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	681b      	ldr	r3, [r3, #0]
    3990:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	7f5b      	ldrb	r3, [r3, #29]
    3996:	2b00      	cmp	r3, #0
    3998:	d025      	beq.n	39e6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	7f1b      	ldrb	r3, [r3, #28]
    399e:	2b01      	cmp	r3, #1
    39a0:	d11f      	bne.n	39e2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	685b      	ldr	r3, [r3, #4]
    39a6:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    39a8:	69bb      	ldr	r3, [r7, #24]
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	b29a      	uxth	r2, r3
    39ae:	69fb      	ldr	r3, [r7, #28]
    39b0:	69db      	ldr	r3, [r3, #28]
    39b2:	429a      	cmp	r2, r3
    39b4:	d10a      	bne.n	39cc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    39b6:	69fb      	ldr	r3, [r7, #28]
    39b8:	69db      	ldr	r3, [r3, #28]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d006      	beq.n	39cc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    39be:	69bb      	ldr	r3, [r7, #24]
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	69fa      	ldr	r2, [r7, #28]
    39c4:	7e12      	ldrb	r2, [r2, #24]
    39c6:	441a      	add	r2, r3
    39c8:	69bb      	ldr	r3, [r7, #24]
    39ca:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    39cc:	69fb      	ldr	r3, [r7, #28]
    39ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    39d2:	2b00      	cmp	r3, #0
    39d4:	d105      	bne.n	39e2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    39d6:	69bb      	ldr	r3, [r7, #24]
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    39de:	69bb      	ldr	r3, [r7, #24]
    39e0:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    39e2:	2300      	movs	r3, #0
    39e4:	e07f      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    39e6:	69fb      	ldr	r3, [r7, #28]
    39e8:	f893 3020 	ldrb.w	r3, [r3, #32]
    39ec:	f003 0304 	and.w	r3, r3, #4
    39f0:	2b00      	cmp	r3, #0
    39f2:	d001      	beq.n	39f8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    39f4:	4b3e      	ldr	r3, [pc, #248]	; (3af0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    39f6:	e076      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    39f8:	69fb      	ldr	r3, [r7, #28]
    39fa:	695b      	ldr	r3, [r3, #20]
    39fc:	781b      	ldrb	r3, [r3, #0]
    39fe:	2b05      	cmp	r3, #5
    3a00:	d108      	bne.n	3a14 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    3a02:	69fb      	ldr	r3, [r7, #28]
    3a04:	f893 3020 	ldrb.w	r3, [r3, #32]
    3a08:	f003 0301 	and.w	r3, r3, #1
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d001      	beq.n	3a14 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3a10:	4b38      	ldr	r3, [pc, #224]	; (3af4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    3a12:	e068      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	7f1b      	ldrb	r3, [r3, #28]
    3a18:	2b01      	cmp	r3, #1
    3a1a:	d139      	bne.n	3a90 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	685b      	ldr	r3, [r3, #4]
    3a20:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    3a22:	697b      	ldr	r3, [r7, #20]
    3a24:	681a      	ldr	r2, [r3, #0]
    3a26:	4b34      	ldr	r3, [pc, #208]	; (3af8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    3a28:	4013      	ands	r3, r2
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d001      	beq.n	3a32 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3a2e:	4b33      	ldr	r3, [pc, #204]	; (3afc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3a30:	e059      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    3a32:	697b      	ldr	r3, [r7, #20]
    3a34:	681b      	ldr	r3, [r3, #0]
    3a36:	b29a      	uxth	r2, r3
    3a38:	69fb      	ldr	r3, [r7, #28]
    3a3a:	69db      	ldr	r3, [r3, #28]
    3a3c:	69f9      	ldr	r1, [r7, #28]
    3a3e:	7e09      	ldrb	r1, [r1, #24]
    3a40:	440b      	add	r3, r1
    3a42:	429a      	cmp	r2, r3
    3a44:	d10c      	bne.n	3a60 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    3a46:	697b      	ldr	r3, [r7, #20]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    3a4e:	697b      	ldr	r3, [r7, #20]
    3a50:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    3a52:	697b      	ldr	r3, [r7, #20]
    3a54:	681a      	ldr	r2, [r3, #0]
    3a56:	69fb      	ldr	r3, [r7, #28]
    3a58:	69db      	ldr	r3, [r3, #28]
    3a5a:	441a      	add	r2, r3
    3a5c:	697b      	ldr	r3, [r7, #20]
    3a5e:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    3a60:	69fb      	ldr	r3, [r7, #28]
    3a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3a66:	2b00      	cmp	r3, #0
    3a68:	d00b      	beq.n	3a82 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    3a6a:	697b      	ldr	r3, [r7, #20]
    3a6c:	681a      	ldr	r2, [r3, #0]
    3a6e:	69fb      	ldr	r3, [r7, #28]
    3a70:	68db      	ldr	r3, [r3, #12]
    3a72:	685b      	ldr	r3, [r3, #4]
    3a74:	4053      	eors	r3, r2
    3a76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d001      	beq.n	3a82 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3a7e:	4b1f      	ldr	r3, [pc, #124]	; (3afc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3a80:	e031      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    3a82:	697b      	ldr	r3, [r7, #20]
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	4619      	mov	r1, r3
    3a88:	69f8      	ldr	r0, [r7, #28]
    3a8a:	4b1d      	ldr	r3, [pc, #116]	; (3b00 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    3a8c:	4798      	blx	r3
    3a8e:	e029      	b.n	3ae4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	7f1b      	ldrb	r3, [r3, #28]
    3a94:	2b02      	cmp	r3, #2
    3a96:	d125      	bne.n	3ae4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3a98:	687b      	ldr	r3, [r7, #4]
    3a9a:	685b      	ldr	r3, [r3, #4]
    3a9c:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    3a9e:	69fb      	ldr	r3, [r7, #28]
    3aa0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    3aa4:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    3aa6:	693b      	ldr	r3, [r7, #16]
    3aa8:	781b      	ldrb	r3, [r3, #0]
    3aaa:	2bf0      	cmp	r3, #240	; 0xf0
    3aac:	dd05      	ble.n	3aba <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    3aae:	693b      	ldr	r3, [r7, #16]
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2bfd      	cmp	r3, #253	; 0xfd
    3ab4:	dc01      	bgt.n	3aba <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3ab6:	4b11      	ldr	r3, [pc, #68]	; (3afc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3ab8:	e015      	b.n	3ae6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    3aba:	693b      	ldr	r3, [r7, #16]
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2bf0      	cmp	r3, #240	; 0xf0
    3ac0:	bfd4      	ite	le
    3ac2:	2301      	movle	r3, #1
    3ac4:	2300      	movgt	r3, #0
    3ac6:	b2db      	uxtb	r3, r3
    3ac8:	461a      	mov	r2, r3
    3aca:	69fb      	ldr	r3, [r7, #28]
    3acc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    3ad0:	69fb      	ldr	r3, [r7, #28]
    3ad2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    3ad6:	7bfa      	ldrb	r2, [r7, #15]
    3ad8:	429a      	cmp	r2, r3
    3ada:	d003      	beq.n	3ae4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    3adc:	69fb      	ldr	r3, [r7, #28]
    3ade:	2200      	movs	r2, #0
    3ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    3ae4:	2300      	movs	r3, #0
}
    3ae6:	4618      	mov	r0, r3
    3ae8:	3720      	adds	r7, #32
    3aea:	46bd      	mov	sp, r7
    3aec:	bd80      	pop	{r7, pc}
    3aee:	bf00      	nop
    3af0:	06010002 	.word	0x06010002
    3af4:	08000022 	.word	0x08000022
    3af8:	3fff8000 	.word	0x3fff8000
    3afc:	06090030 	.word	0x06090030
    3b00:	00003479 	.word	0x00003479

00003b04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    3b04:	b580      	push	{r7, lr}
    3b06:	b088      	sub	sp, #32
    3b08:	af00      	add	r7, sp, #0
    3b0a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	7f1b      	ldrb	r3, [r3, #28]
    3b16:	2b04      	cmp	r3, #4
    3b18:	d101      	bne.n	3b1e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    3b1a:	4b6d      	ldr	r3, [pc, #436]	; (3cd0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    3b1c:	e0d4      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	7f5b      	ldrb	r3, [r3, #29]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d024      	beq.n	3b70 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	7f1b      	ldrb	r3, [r3, #28]
    3b2a:	2b01      	cmp	r3, #1
    3b2c:	d11e      	bne.n	3b6c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	685b      	ldr	r3, [r3, #4]
    3b32:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    3b34:	69bb      	ldr	r3, [r7, #24]
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	b29a      	uxth	r2, r3
    3b3a:	69fb      	ldr	r3, [r7, #28]
    3b3c:	699b      	ldr	r3, [r3, #24]
    3b3e:	429a      	cmp	r2, r3
    3b40:	d10a      	bne.n	3b58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    3b42:	69fb      	ldr	r3, [r7, #28]
    3b44:	699b      	ldr	r3, [r3, #24]
    3b46:	2b00      	cmp	r3, #0
    3b48:	d006      	beq.n	3b58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    3b4a:	69bb      	ldr	r3, [r7, #24]
    3b4c:	681b      	ldr	r3, [r3, #0]
    3b4e:	69fa      	ldr	r2, [r7, #28]
    3b50:	7d12      	ldrb	r2, [r2, #20]
    3b52:	441a      	add	r2, r3
    3b54:	69bb      	ldr	r3, [r7, #24]
    3b56:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    3b58:	69fb      	ldr	r3, [r7, #28]
    3b5a:	7f5b      	ldrb	r3, [r3, #29]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d105      	bne.n	3b6c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    3b60:	69bb      	ldr	r3, [r7, #24]
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    3b68:	69bb      	ldr	r3, [r7, #24]
    3b6a:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3b6c:	2300      	movs	r3, #0
    3b6e:	e0ab      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    3b70:	69fb      	ldr	r3, [r7, #28]
    3b72:	7f1b      	ldrb	r3, [r3, #28]
    3b74:	f003 0304 	and.w	r3, r3, #4
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d001      	beq.n	3b80 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3b7c:	4b55      	ldr	r3, [pc, #340]	; (3cd4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    3b7e:	e0a3      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    3b80:	69fb      	ldr	r3, [r7, #28]
    3b82:	691b      	ldr	r3, [r3, #16]
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	2b05      	cmp	r3, #5
    3b88:	d107      	bne.n	3b9a <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    3b8a:	69fb      	ldr	r3, [r7, #28]
    3b8c:	7f1b      	ldrb	r3, [r3, #28]
    3b8e:	f003 0301 	and.w	r3, r3, #1
    3b92:	2b00      	cmp	r3, #0
    3b94:	d001      	beq.n	3b9a <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3b96:	4b50      	ldr	r3, [pc, #320]	; (3cd8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    3b98:	e096      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	7f1b      	ldrb	r3, [r3, #28]
    3b9e:	2b01      	cmp	r3, #1
    3ba0:	d140      	bne.n	3c24 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3ba2:	687b      	ldr	r3, [r7, #4]
    3ba4:	685b      	ldr	r3, [r3, #4]
    3ba6:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    3ba8:	697b      	ldr	r3, [r7, #20]
    3baa:	681a      	ldr	r2, [r3, #0]
    3bac:	4b4b      	ldr	r3, [pc, #300]	; (3cdc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    3bae:	4013      	ands	r3, r2
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d001      	beq.n	3bb8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3bb4:	4b4a      	ldr	r3, [pc, #296]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3bb6:	e087      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    3bb8:	697b      	ldr	r3, [r7, #20]
    3bba:	681b      	ldr	r3, [r3, #0]
    3bbc:	b29a      	uxth	r2, r3
    3bbe:	69fb      	ldr	r3, [r7, #28]
    3bc0:	699b      	ldr	r3, [r3, #24]
    3bc2:	69f9      	ldr	r1, [r7, #28]
    3bc4:	7d09      	ldrb	r1, [r1, #20]
    3bc6:	440b      	add	r3, r1
    3bc8:	429a      	cmp	r2, r3
    3bca:	d10c      	bne.n	3be6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    3bcc:	697b      	ldr	r3, [r7, #20]
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    3bd4:	697b      	ldr	r3, [r7, #20]
    3bd6:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    3bd8:	697b      	ldr	r3, [r7, #20]
    3bda:	681a      	ldr	r2, [r3, #0]
    3bdc:	69fb      	ldr	r3, [r7, #28]
    3bde:	699b      	ldr	r3, [r3, #24]
    3be0:	441a      	add	r2, r3
    3be2:	697b      	ldr	r3, [r7, #20]
    3be4:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    3be6:	69fb      	ldr	r3, [r7, #28]
    3be8:	7f5b      	ldrb	r3, [r3, #29]
    3bea:	2b00      	cmp	r3, #0
    3bec:	d00b      	beq.n	3c06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    3bee:	697b      	ldr	r3, [r7, #20]
    3bf0:	681a      	ldr	r2, [r3, #0]
    3bf2:	69fb      	ldr	r3, [r7, #28]
    3bf4:	689b      	ldr	r3, [r3, #8]
    3bf6:	685b      	ldr	r3, [r3, #4]
    3bf8:	4053      	eors	r3, r2
    3bfa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d001      	beq.n	3c06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3c02:	4b37      	ldr	r3, [pc, #220]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3c04:	e060      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    3c06:	697b      	ldr	r3, [r7, #20]
    3c08:	6819      	ldr	r1, [r3, #0]
    3c0a:	69fb      	ldr	r3, [r7, #28]
    3c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3c0e:	7b9b      	ldrb	r3, [r3, #14]
    3c10:	b2db      	uxtb	r3, r3
    3c12:	461a      	mov	r2, r3
    3c14:	69f8      	ldr	r0, [r7, #28]
    3c16:	4b33      	ldr	r3, [pc, #204]	; (3ce4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    3c18:	4798      	blx	r3
        TPDO->syncCounter = 255;
    3c1a:	69fb      	ldr	r3, [r7, #28]
    3c1c:	22ff      	movs	r2, #255	; 0xff
    3c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    3c22:	e050      	b.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	7f1b      	ldrb	r3, [r3, #28]
    3c28:	2b02      	cmp	r3, #2
    3c2a:	d11b      	bne.n	3c64 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3c2c:	687b      	ldr	r3, [r7, #4]
    3c2e:	685b      	ldr	r3, [r3, #4]
    3c30:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    3c32:	693b      	ldr	r3, [r7, #16]
    3c34:	781b      	ldrb	r3, [r3, #0]
    3c36:	2bf0      	cmp	r3, #240	; 0xf0
    3c38:	dd05      	ble.n	3c46 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    3c3a:	693b      	ldr	r3, [r7, #16]
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	2bfd      	cmp	r3, #253	; 0xfd
    3c40:	dc01      	bgt.n	3c46 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3c42:	4b27      	ldr	r3, [pc, #156]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3c44:	e040      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    3c46:	69fb      	ldr	r3, [r7, #28]
    3c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3c4a:	693a      	ldr	r2, [r7, #16]
    3c4c:	7812      	ldrb	r2, [r2, #0]
    3c4e:	2af0      	cmp	r2, #240	; 0xf0
    3c50:	dc01      	bgt.n	3c56 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    3c52:	2201      	movs	r2, #1
    3c54:	e000      	b.n	3c58 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    3c56:	2200      	movs	r2, #0
    3c58:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    3c5a:	69fb      	ldr	r3, [r7, #28]
    3c5c:	22ff      	movs	r2, #255	; 0xff
    3c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    3c62:	e030      	b.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	7f1b      	ldrb	r3, [r3, #28]
    3c68:	2b03      	cmp	r3, #3
    3c6a:	d109      	bne.n	3c80 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3c6c:	69fb      	ldr	r3, [r7, #28]
    3c6e:	7f5b      	ldrb	r3, [r3, #29]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d001      	beq.n	3c78 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3c74:	4b1a      	ldr	r3, [pc, #104]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3c76:	e027      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    3c78:	69fb      	ldr	r3, [r7, #28]
    3c7a:	2200      	movs	r2, #0
    3c7c:	645a      	str	r2, [r3, #68]	; 0x44
    3c7e:	e022      	b.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	7f1b      	ldrb	r3, [r3, #28]
    3c84:	2b05      	cmp	r3, #5
    3c86:	d10b      	bne.n	3ca0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	685b      	ldr	r3, [r3, #4]
    3c8c:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    3c8e:	68bb      	ldr	r3, [r7, #8]
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c96:	fb02 f203 	mul.w	r2, r2, r3
    3c9a:	69fb      	ldr	r3, [r7, #28]
    3c9c:	649a      	str	r2, [r3, #72]	; 0x48
    3c9e:	e012      	b.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	7f1b      	ldrb	r3, [r3, #28]
    3ca4:	2b06      	cmp	r3, #6
    3ca6:	d10e      	bne.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	685b      	ldr	r3, [r3, #4]
    3cac:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3cae:	69fb      	ldr	r3, [r7, #28]
    3cb0:	7f5b      	ldrb	r3, [r3, #29]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d001      	beq.n	3cba <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3cb6:	4b0a      	ldr	r3, [pc, #40]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3cb8:	e006      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	2bf0      	cmp	r3, #240	; 0xf0
    3cc0:	dd01      	ble.n	3cc6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3cc2:	4b07      	ldr	r3, [pc, #28]	; (3ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3cc4:	e000      	b.n	3cc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    3cc6:	2300      	movs	r3, #0
}
    3cc8:	4618      	mov	r0, r3
    3cca:	3720      	adds	r7, #32
    3ccc:	46bd      	mov	sp, r7
    3cce:	bd80      	pop	{r7, pc}
    3cd0:	06090011 	.word	0x06090011
    3cd4:	06010002 	.word	0x06010002
    3cd8:	08000022 	.word	0x08000022
    3cdc:	3fff8000 	.word	0x3fff8000
    3ce0:	06090030 	.word	0x06090030
    3ce4:	00003551 	.word	0x00003551

00003ce8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    3ce8:	b590      	push	{r4, r7, lr}
    3cea:	b08d      	sub	sp, #52	; 0x34
    3cec:	af04      	add	r7, sp, #16
    3cee:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	7f5b      	ldrb	r3, [r3, #29]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d010      	beq.n	3d20 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	685b      	ldr	r3, [r3, #4]
    3d02:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	7f1b      	ldrb	r3, [r3, #28]
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d107      	bne.n	3d1c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    3d0c:	69fb      	ldr	r3, [r7, #28]
    3d0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3d12:	2b00      	cmp	r3, #0
    3d14:	d102      	bne.n	3d1c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    3d16:	69bb      	ldr	r3, [r7, #24]
    3d18:	2200      	movs	r2, #0
    3d1a:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3d1c:	2300      	movs	r3, #0
    3d1e:	e054      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    3d20:	69fb      	ldr	r3, [r7, #28]
    3d22:	f893 3020 	ldrb.w	r3, [r3, #32]
    3d26:	f003 0308 	and.w	r3, r3, #8
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d001      	beq.n	3d32 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3d2e:	4b29      	ldr	r3, [pc, #164]	; (3dd4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    3d30:	e04b      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    3d32:	69fb      	ldr	r3, [r7, #28]
    3d34:	695b      	ldr	r3, [r3, #20]
    3d36:	781b      	ldrb	r3, [r3, #0]
    3d38:	2b05      	cmp	r3, #5
    3d3a:	d108      	bne.n	3d4e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    3d3c:	69fb      	ldr	r3, [r7, #28]
    3d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
    3d42:	f003 0302 	and.w	r3, r3, #2
    3d46:	2b00      	cmp	r3, #0
    3d48:	d001      	beq.n	3d4e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3d4a:	4b23      	ldr	r3, [pc, #140]	; (3dd8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    3d4c:	e03d      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    3d4e:	69fb      	ldr	r3, [r7, #28]
    3d50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    3d54:	2b00      	cmp	r3, #0
    3d56:	d001      	beq.n	3d5c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3d58:	4b20      	ldr	r3, [pc, #128]	; (3ddc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3d5a:	e036      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	7f1b      	ldrb	r3, [r3, #28]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d110      	bne.n	3d86 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	685b      	ldr	r3, [r3, #4]
    3d68:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    3d6a:	697b      	ldr	r3, [r7, #20]
    3d6c:	781b      	ldrb	r3, [r3, #0]
    3d6e:	2b08      	cmp	r3, #8
    3d70:	dd01      	ble.n	3d76 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3d72:	4b1b      	ldr	r3, [pc, #108]	; (3de0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    3d74:	e029      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    3d76:	697b      	ldr	r3, [r7, #20]
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	4619      	mov	r1, r3
    3d7c:	69f8      	ldr	r0, [r7, #28]
    3d7e:	4b19      	ldr	r3, [pc, #100]	; (3de4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    3d80:	4798      	blx	r3
    3d82:	4603      	mov	r3, r0
    3d84:	e021      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	685b      	ldr	r3, [r3, #4]
    3d8a:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3d8c:	2300      	movs	r3, #0
    3d8e:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3d90:	2300      	movs	r3, #0
    3d92:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    3d94:	69fb      	ldr	r3, [r7, #28]
    3d96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d001      	beq.n	3da2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3d9e:	4b0f      	ldr	r3, [pc, #60]	; (3ddc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3da0:	e013      	b.n	3dca <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    3da2:	69fb      	ldr	r3, [r7, #28]
    3da4:	6858      	ldr	r0, [r3, #4]
    3da6:	693b      	ldr	r3, [r7, #16]
    3da8:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    3daa:	f107 020c 	add.w	r2, r7, #12
    3dae:	f107 0309 	add.w	r3, r7, #9
    3db2:	9302      	str	r3, [sp, #8]
    3db4:	f107 030a 	add.w	r3, r7, #10
    3db8:	9301      	str	r3, [sp, #4]
    3dba:	f107 030b 	add.w	r3, r7, #11
    3dbe:	9300      	str	r3, [sp, #0]
    3dc0:	4613      	mov	r3, r2
    3dc2:	2200      	movs	r2, #0
    3dc4:	4c08      	ldr	r4, [pc, #32]	; (3de8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    3dc6:	47a0      	blx	r4
    3dc8:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    3dca:	4618      	mov	r0, r3
    3dcc:	3724      	adds	r7, #36	; 0x24
    3dce:	46bd      	mov	sp, r7
    3dd0:	bd90      	pop	{r4, r7, pc}
    3dd2:	bf00      	nop
    3dd4:	06010002 	.word	0x06010002
    3dd8:	08000022 	.word	0x08000022
    3ddc:	06010000 	.word	0x06010000
    3de0:	06040042 	.word	0x06040042
    3de4:	000037e5 	.word	0x000037e5
    3de8:	000035e5 	.word	0x000035e5

00003dec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    3dec:	b590      	push	{r4, r7, lr}
    3dee:	b08d      	sub	sp, #52	; 0x34
    3df0:	af04      	add	r7, sp, #16
    3df2:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	681b      	ldr	r3, [r3, #0]
    3df8:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	7f5b      	ldrb	r3, [r3, #29]
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d00f      	beq.n	3e22 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	685b      	ldr	r3, [r3, #4]
    3e06:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	7f1b      	ldrb	r3, [r3, #28]
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	d106      	bne.n	3e1e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    3e10:	69fb      	ldr	r3, [r7, #28]
    3e12:	7f9b      	ldrb	r3, [r3, #30]
    3e14:	2b00      	cmp	r3, #0
    3e16:	d102      	bne.n	3e1e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    3e18:	69bb      	ldr	r3, [r7, #24]
    3e1a:	2200      	movs	r2, #0
    3e1c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3e1e:	2300      	movs	r3, #0
    3e20:	e050      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    3e22:	69fb      	ldr	r3, [r7, #28]
    3e24:	7f1b      	ldrb	r3, [r3, #28]
    3e26:	f003 0308 	and.w	r3, r3, #8
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d001      	beq.n	3e32 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3e2e:	4b27      	ldr	r3, [pc, #156]	; (3ecc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    3e30:	e048      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    3e32:	69fb      	ldr	r3, [r7, #28]
    3e34:	691b      	ldr	r3, [r3, #16]
    3e36:	781b      	ldrb	r3, [r3, #0]
    3e38:	2b05      	cmp	r3, #5
    3e3a:	d107      	bne.n	3e4c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    3e3c:	69fb      	ldr	r3, [r7, #28]
    3e3e:	7f1b      	ldrb	r3, [r3, #28]
    3e40:	f003 0302 	and.w	r3, r3, #2
    3e44:	2b00      	cmp	r3, #0
    3e46:	d001      	beq.n	3e4c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3e48:	4b21      	ldr	r3, [pc, #132]	; (3ed0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    3e4a:	e03b      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    3e4c:	69fb      	ldr	r3, [r7, #28]
    3e4e:	7f5b      	ldrb	r3, [r3, #29]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d001      	beq.n	3e58 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3e54:	4b1f      	ldr	r3, [pc, #124]	; (3ed4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3e56:	e035      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	7f1b      	ldrb	r3, [r3, #28]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d110      	bne.n	3e82 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	685b      	ldr	r3, [r3, #4]
    3e64:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    3e66:	697b      	ldr	r3, [r7, #20]
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	2b08      	cmp	r3, #8
    3e6c:	dd01      	ble.n	3e72 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3e6e:	4b1a      	ldr	r3, [pc, #104]	; (3ed8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    3e70:	e028      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    3e72:	697b      	ldr	r3, [r7, #20]
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	4619      	mov	r1, r3
    3e78:	69f8      	ldr	r0, [r7, #28]
    3e7a:	4b18      	ldr	r3, [pc, #96]	; (3edc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    3e7c:	4798      	blx	r3
    3e7e:	4603      	mov	r3, r0
    3e80:	e020      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	685b      	ldr	r3, [r3, #4]
    3e86:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3e88:	2300      	movs	r3, #0
    3e8a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3e8c:	2300      	movs	r3, #0
    3e8e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    3e90:	69fb      	ldr	r3, [r7, #28]
    3e92:	7f9b      	ldrb	r3, [r3, #30]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d001      	beq.n	3e9c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3e98:	4b0e      	ldr	r3, [pc, #56]	; (3ed4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3e9a:	e013      	b.n	3ec4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    3e9c:	69fb      	ldr	r3, [r7, #28]
    3e9e:	6858      	ldr	r0, [r3, #4]
    3ea0:	693b      	ldr	r3, [r7, #16]
    3ea2:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    3ea4:	f107 020c 	add.w	r2, r7, #12
    3ea8:	f107 0309 	add.w	r3, r7, #9
    3eac:	9302      	str	r3, [sp, #8]
    3eae:	f107 030a 	add.w	r3, r7, #10
    3eb2:	9301      	str	r3, [sp, #4]
    3eb4:	f107 030b 	add.w	r3, r7, #11
    3eb8:	9300      	str	r3, [sp, #0]
    3eba:	4613      	mov	r3, r2
    3ebc:	2201      	movs	r2, #1
    3ebe:	4c08      	ldr	r4, [pc, #32]	; (3ee0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    3ec0:	47a0      	blx	r4
    3ec2:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    3ec4:	4618      	mov	r0, r3
    3ec6:	3724      	adds	r7, #36	; 0x24
    3ec8:	46bd      	mov	sp, r7
    3eca:	bd90      	pop	{r4, r7, pc}
    3ecc:	06010002 	.word	0x06010002
    3ed0:	08000022 	.word	0x08000022
    3ed4:	06010000 	.word	0x06010000
    3ed8:	06040042 	.word	0x06040042
    3edc:	000038b5 	.word	0x000038b5
    3ee0:	000035e5 	.word	0x000035e5

00003ee4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    3ee4:	b590      	push	{r4, r7, lr}
    3ee6:	b087      	sub	sp, #28
    3ee8:	af02      	add	r7, sp, #8
    3eea:	60f8      	str	r0, [r7, #12]
    3eec:	60b9      	str	r1, [r7, #8]
    3eee:	607a      	str	r2, [r7, #4]
    3ef0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    3ef2:	68bb      	ldr	r3, [r7, #8]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d014      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	2b00      	cmp	r3, #0
    3efc:	d011      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3efe:	683b      	ldr	r3, [r7, #0]
    3f00:	2b00      	cmp	r3, #0
    3f02:	d00e      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3f04:	6a3b      	ldr	r3, [r7, #32]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d00b      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d008      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f12:	2b00      	cmp	r3, #0
    3f14:	d005      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    3f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d002      	beq.n	3f22 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    3f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d102      	bne.n	3f28 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    3f22:	f04f 33ff 	mov.w	r3, #4294967295
    3f26:	e050      	b.n	3fca <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    3f28:	68bb      	ldr	r3, [r7, #8]
    3f2a:	687a      	ldr	r2, [r7, #4]
    3f2c:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    3f2e:	68bb      	ldr	r3, [r7, #8]
    3f30:	683a      	ldr	r2, [r7, #0]
    3f32:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    3f34:	68bb      	ldr	r3, [r7, #8]
    3f36:	6a3a      	ldr	r2, [r7, #32]
    3f38:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    3f3a:	68bb      	ldr	r3, [r7, #8]
    3f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3f3e:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    3f40:	68bb      	ldr	r3, [r7, #8]
    3f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3f44:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    3f46:	68bb      	ldr	r3, [r7, #8]
    3f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3f4a:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    3f4c:	68bb      	ldr	r3, [r7, #8]
    3f4e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    3f52:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    3f54:	68bb      	ldr	r3, [r7, #8]
    3f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3f58:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    3f5a:	68bb      	ldr	r3, [r7, #8]
    3f5c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    3f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    3f64:	4b1b      	ldr	r3, [pc, #108]	; (3fd4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	1d18      	adds	r0, r3, #4
    3f6a:	2300      	movs	r3, #0
    3f6c:	9301      	str	r3, [sp, #4]
    3f6e:	2300      	movs	r3, #0
    3f70:	9300      	str	r3, [sp, #0]
    3f72:	68bb      	ldr	r3, [r7, #8]
    3f74:	4a18      	ldr	r2, [pc, #96]	; (3fd8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    3f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3f78:	4c18      	ldr	r4, [pc, #96]	; (3fdc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3f7a:	47a0      	blx	r4
    canopen->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    3f7c:	4b15      	ldr	r3, [pc, #84]	; (3fd4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	1d18      	adds	r0, r3, #4
    3f82:	2300      	movs	r3, #0
    3f84:	9301      	str	r3, [sp, #4]
    3f86:	2300      	movs	r3, #0
    3f88:	9300      	str	r3, [sp, #0]
    3f8a:	68bb      	ldr	r3, [r7, #8]
    3f8c:	4a14      	ldr	r2, [pc, #80]	; (3fe0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    3f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3f90:	4c12      	ldr	r4, [pc, #72]	; (3fdc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3f92:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    3f94:	68bb      	ldr	r3, [r7, #8]
    3f96:	2200      	movs	r2, #0
    3f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3f9c:	68bb      	ldr	r3, [r7, #8]
    3f9e:	2200      	movs	r2, #0
    3fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    3fa4:	68bb      	ldr	r3, [r7, #8]
    3fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3fa8:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    3faa:	68bb      	ldr	r3, [r7, #8]
    3fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3fae:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    3fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fb2:	781b      	ldrb	r3, [r3, #0]
    3fb4:	4619      	mov	r1, r3
    3fb6:	68b8      	ldr	r0, [r7, #8]
    3fb8:	4b0a      	ldr	r3, [pc, #40]	; (3fe4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    3fba:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    3fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fbe:	685b      	ldr	r3, [r3, #4]
    3fc0:	4619      	mov	r1, r3
    3fc2:	68b8      	ldr	r0, [r7, #8]
    3fc4:	4b08      	ldr	r3, [pc, #32]	; (3fe8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    3fc6:	4798      	blx	r3

    return CO_ERROR_NO;
    3fc8:	2300      	movs	r3, #0
}
    3fca:	4618      	mov	r0, r3
    3fcc:	3714      	adds	r7, #20
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd90      	pop	{r4, r7, pc}
    3fd2:	bf00      	nop
    3fd4:	20001964 	.word	0x20001964
    3fd8:	00003985 	.word	0x00003985
    3fdc:	00004afd 	.word	0x00004afd
    3fe0:	00003ce9 	.word	0x00003ce9
    3fe4:	000037e5 	.word	0x000037e5
    3fe8:	00003479 	.word	0x00003479

00003fec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    3fec:	b590      	push	{r4, r7, lr}
    3fee:	b087      	sub	sp, #28
    3ff0:	af02      	add	r7, sp, #8
    3ff2:	60f8      	str	r0, [r7, #12]
    3ff4:	60b9      	str	r1, [r7, #8]
    3ff6:	607a      	str	r2, [r7, #4]
    3ff8:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    3ffa:	68bb      	ldr	r3, [r7, #8]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d011      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2b00      	cmp	r3, #0
    4004:	d00e      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    4006:	683b      	ldr	r3, [r7, #0]
    4008:	2b00      	cmp	r3, #0
    400a:	d00b      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    400c:	6a3b      	ldr	r3, [r7, #32]
    400e:	2b00      	cmp	r3, #0
    4010:	d008      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    4012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4014:	2b00      	cmp	r3, #0
    4016:	d005      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    4018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    401a:	2b00      	cmp	r3, #0
    401c:	d002      	beq.n	4024 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4020:	2b00      	cmp	r3, #0
    4022:	d102      	bne.n	402a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    4024:	f04f 33ff 	mov.w	r3, #4294967295
    4028:	e070      	b.n	410c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
    402a:	68bb      	ldr	r3, [r7, #8]
    402c:	687a      	ldr	r2, [r7, #4]
    402e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    4030:	68bb      	ldr	r3, [r7, #8]
    4032:	683a      	ldr	r2, [r7, #0]
    4034:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    4036:	68bb      	ldr	r3, [r7, #8]
    4038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    403a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    403c:	68bb      	ldr	r3, [r7, #8]
    403e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4040:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    4042:	68bb      	ldr	r3, [r7, #8]
    4044:	6a3a      	ldr	r2, [r7, #32]
    4046:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    4048:	68bb      	ldr	r3, [r7, #8]
    404a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    404e:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    4050:	68bb      	ldr	r3, [r7, #8]
    4052:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4054:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    4056:	68bb      	ldr	r3, [r7, #8]
    4058:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    405c:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    405e:	4b2d      	ldr	r3, [pc, #180]	; (4114 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	1d18      	adds	r0, r3, #4
    4064:	2300      	movs	r3, #0
    4066:	9301      	str	r3, [sp, #4]
    4068:	2300      	movs	r3, #0
    406a:	9300      	str	r3, [sp, #0]
    406c:	68bb      	ldr	r3, [r7, #8]
    406e:	4a2a      	ldr	r2, [pc, #168]	; (4118 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
    4070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    4072:	4c2a      	ldr	r4, [pc, #168]	; (411c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    4074:	47a0      	blx	r4
    canopen->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    4076:	4b27      	ldr	r3, [pc, #156]	; (4114 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	1d18      	adds	r0, r3, #4
    407c:	2300      	movs	r3, #0
    407e:	9301      	str	r3, [sp, #4]
    4080:	2300      	movs	r3, #0
    4082:	9300      	str	r3, [sp, #0]
    4084:	68bb      	ldr	r3, [r7, #8]
    4086:	4a26      	ldr	r2, [pc, #152]	; (4120 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
    4088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    408a:	4c24      	ldr	r4, [pc, #144]	; (411c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    408c:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    408e:	68bb      	ldr	r3, [r7, #8]
    4090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4092:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    4094:	68bb      	ldr	r3, [r7, #8]
    4096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4098:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    409a:	68bb      	ldr	r3, [r7, #8]
    409c:	22ff      	movs	r2, #255	; 0xff
    409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    40a2:	68bb      	ldr	r3, [r7, #8]
    40a4:	2200      	movs	r2, #0
    40a6:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    40a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40aa:	695b      	ldr	r3, [r3, #20]
    40ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    40b0:	fb02 f203 	mul.w	r2, r2, r3
    40b4:	68bb      	ldr	r3, [r7, #8]
    40b6:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    40b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40ba:	7a1b      	ldrb	r3, [r3, #8]
    40bc:	2bfd      	cmp	r3, #253	; 0xfd
    40be:	dd02      	ble.n	40c6 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    40c0:	68bb      	ldr	r3, [r7, #8]
    40c2:	2201      	movs	r2, #1
    40c4:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    40c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40c8:	781b      	ldrb	r3, [r3, #0]
    40ca:	4619      	mov	r1, r3
    40cc:	68b8      	ldr	r0, [r7, #8]
    40ce:	4b15      	ldr	r3, [pc, #84]	; (4124 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
    40d0:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    40d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40d4:	6859      	ldr	r1, [r3, #4]
    40d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40d8:	7a1b      	ldrb	r3, [r3, #8]
    40da:	2bf0      	cmp	r3, #240	; 0xf0
    40dc:	dc01      	bgt.n	40e2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    40de:	2301      	movs	r3, #1
    40e0:	e000      	b.n	40e4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    40e2:	2300      	movs	r3, #0
    40e4:	461a      	mov	r2, r3
    40e6:	68b8      	ldr	r0, [r7, #8]
    40e8:	4b0f      	ldr	r3, [pc, #60]	; (4128 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
    40ea:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    40ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40ee:	7a1b      	ldrb	r3, [r3, #8]
    40f0:	2bf0      	cmp	r3, #240	; 0xf0
    40f2:	dd03      	ble.n	40fc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    40f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40f6:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    40f8:	2bfd      	cmp	r3, #253	; 0xfd
    40fa:	dd03      	ble.n	4104 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    40fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40fe:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    4100:	2bf0      	cmp	r3, #240	; 0xf0
    4102:	dd02      	ble.n	410a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    4104:	68bb      	ldr	r3, [r7, #8]
    4106:	2200      	movs	r2, #0
    4108:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
    410a:	2300      	movs	r3, #0
}
    410c:	4618      	mov	r0, r3
    410e:	3714      	adds	r7, #20
    4110:	46bd      	mov	sp, r7
    4112:	bd90      	pop	{r4, r7, pc}
    4114:	20001964 	.word	0x20001964
    4118:	00003b05 	.word	0x00003b05
    411c:	00004afd 	.word	0x00004afd
    4120:	00003ded 	.word	0x00003ded
    4124:	000038b5 	.word	0x000038b5
    4128:	00003551 	.word	0x00003551

0000412c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
    412c:	b480      	push	{r7}
    412e:	b085      	sub	sp, #20
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
    4134:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
    4136:	683b      	ldr	r3, [r7, #0]
    4138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    413a:	683a      	ldr	r2, [r7, #0]
    413c:	7f92      	ldrb	r2, [r2, #30]
    413e:	4413      	add	r3, r2
    4140:	3305      	adds	r3, #5
    4142:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
    4144:	683b      	ldr	r3, [r7, #0]
    4146:	7f9b      	ldrb	r3, [r3, #30]
    4148:	3308      	adds	r3, #8
    414a:	009b      	lsls	r3, r3, #2
    414c:	683a      	ldr	r2, [r7, #0]
    414e:	4413      	add	r3, r2
    4150:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
    4152:	683b      	ldr	r3, [r7, #0]
    4154:	7f9b      	ldrb	r3, [r3, #30]
    4156:	3b01      	subs	r3, #1
    4158:	2b07      	cmp	r3, #7
    415a:	f200 80ea 	bhi.w	4332 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
    415e:	a201      	add	r2, pc, #4	; (adr r2, 4164 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
    4160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4164:	000042fd 	.word	0x000042fd
    4168:	000042c7 	.word	0x000042c7
    416c:	00004291 	.word	0x00004291
    4170:	0000425b 	.word	0x0000425b
    4174:	00004225 	.word	0x00004225
    4178:	000041ef 	.word	0x000041ef
    417c:	000041b9 	.word	0x000041b9
    4180:	00004185 	.word	0x00004185
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
    4184:	68fb      	ldr	r3, [r7, #12]
    4186:	3b01      	subs	r3, #1
    4188:	60fb      	str	r3, [r7, #12]
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	781a      	ldrb	r2, [r3, #0]
    418e:	68bb      	ldr	r3, [r7, #8]
    4190:	3b04      	subs	r3, #4
    4192:	60bb      	str	r3, [r7, #8]
    4194:	68bb      	ldr	r3, [r7, #8]
    4196:	681b      	ldr	r3, [r3, #0]
    4198:	781b      	ldrb	r3, [r3, #0]
    419a:	429a      	cmp	r2, r3
    419c:	d007      	beq.n	41ae <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    419e:	683b      	ldr	r3, [r7, #0]
    41a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    41a4:	b25b      	sxtb	r3, r3
    41a6:	2b00      	cmp	r3, #0
    41a8:	da01      	bge.n	41ae <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    41aa:	2301      	movs	r3, #1
    41ac:	e000      	b.n	41b0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
    41ae:	2300      	movs	r3, #0
    41b0:	2b00      	cmp	r3, #0
    41b2:	d001      	beq.n	41b8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
    41b4:	2301      	movs	r3, #1
    41b6:	e0bd      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	3b01      	subs	r3, #1
    41bc:	60fb      	str	r3, [r7, #12]
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	781a      	ldrb	r2, [r3, #0]
    41c2:	68bb      	ldr	r3, [r7, #8]
    41c4:	3b04      	subs	r3, #4
    41c6:	60bb      	str	r3, [r7, #8]
    41c8:	68bb      	ldr	r3, [r7, #8]
    41ca:	681b      	ldr	r3, [r3, #0]
    41cc:	781b      	ldrb	r3, [r3, #0]
    41ce:	429a      	cmp	r2, r3
    41d0:	d008      	beq.n	41e4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    41d2:	683b      	ldr	r3, [r7, #0]
    41d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    41d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    41dc:	2b00      	cmp	r3, #0
    41de:	d001      	beq.n	41e4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    41e0:	2301      	movs	r3, #1
    41e2:	e000      	b.n	41e6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xba>
    41e4:	2300      	movs	r3, #0
    41e6:	2b00      	cmp	r3, #0
    41e8:	d001      	beq.n	41ee <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xc2>
    41ea:	2301      	movs	r3, #1
    41ec:	e0a2      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
    41ee:	68fb      	ldr	r3, [r7, #12]
    41f0:	3b01      	subs	r3, #1
    41f2:	60fb      	str	r3, [r7, #12]
    41f4:	68fb      	ldr	r3, [r7, #12]
    41f6:	781a      	ldrb	r2, [r3, #0]
    41f8:	68bb      	ldr	r3, [r7, #8]
    41fa:	3b04      	subs	r3, #4
    41fc:	60bb      	str	r3, [r7, #8]
    41fe:	68bb      	ldr	r3, [r7, #8]
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	429a      	cmp	r2, r3
    4206:	d008      	beq.n	421a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    4208:	683b      	ldr	r3, [r7, #0]
    420a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    420e:	f003 0320 	and.w	r3, r3, #32
    4212:	2b00      	cmp	r3, #0
    4214:	d001      	beq.n	421a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    4216:	2301      	movs	r3, #1
    4218:	e000      	b.n	421c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf0>
    421a:	2300      	movs	r3, #0
    421c:	2b00      	cmp	r3, #0
    421e:	d001      	beq.n	4224 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf8>
    4220:	2301      	movs	r3, #1
    4222:	e087      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	3b01      	subs	r3, #1
    4228:	60fb      	str	r3, [r7, #12]
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	781a      	ldrb	r2, [r3, #0]
    422e:	68bb      	ldr	r3, [r7, #8]
    4230:	3b04      	subs	r3, #4
    4232:	60bb      	str	r3, [r7, #8]
    4234:	68bb      	ldr	r3, [r7, #8]
    4236:	681b      	ldr	r3, [r3, #0]
    4238:	781b      	ldrb	r3, [r3, #0]
    423a:	429a      	cmp	r2, r3
    423c:	d008      	beq.n	4250 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    4244:	f003 0310 	and.w	r3, r3, #16
    4248:	2b00      	cmp	r3, #0
    424a:	d001      	beq.n	4250 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
    424c:	2301      	movs	r3, #1
    424e:	e000      	b.n	4252 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x126>
    4250:	2300      	movs	r3, #0
    4252:	2b00      	cmp	r3, #0
    4254:	d001      	beq.n	425a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x12e>
    4256:	2301      	movs	r3, #1
    4258:	e06c      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
    425a:	68fb      	ldr	r3, [r7, #12]
    425c:	3b01      	subs	r3, #1
    425e:	60fb      	str	r3, [r7, #12]
    4260:	68fb      	ldr	r3, [r7, #12]
    4262:	781a      	ldrb	r2, [r3, #0]
    4264:	68bb      	ldr	r3, [r7, #8]
    4266:	3b04      	subs	r3, #4
    4268:	60bb      	str	r3, [r7, #8]
    426a:	68bb      	ldr	r3, [r7, #8]
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	781b      	ldrb	r3, [r3, #0]
    4270:	429a      	cmp	r2, r3
    4272:	d008      	beq.n	4286 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
    4274:	683b      	ldr	r3, [r7, #0]
    4276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    427a:	f003 0308 	and.w	r3, r3, #8
    427e:	2b00      	cmp	r3, #0
    4280:	d001      	beq.n	4286 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
    4282:	2301      	movs	r3, #1
    4284:	e000      	b.n	4288 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15c>
    4286:	2300      	movs	r3, #0
    4288:	2b00      	cmp	r3, #0
    428a:	d001      	beq.n	4290 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x164>
    428c:	2301      	movs	r3, #1
    428e:	e051      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	3b01      	subs	r3, #1
    4294:	60fb      	str	r3, [r7, #12]
    4296:	68fb      	ldr	r3, [r7, #12]
    4298:	781a      	ldrb	r2, [r3, #0]
    429a:	68bb      	ldr	r3, [r7, #8]
    429c:	3b04      	subs	r3, #4
    429e:	60bb      	str	r3, [r7, #8]
    42a0:	68bb      	ldr	r3, [r7, #8]
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	429a      	cmp	r2, r3
    42a8:	d008      	beq.n	42bc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
    42aa:	683b      	ldr	r3, [r7, #0]
    42ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    42b0:	f003 0304 	and.w	r3, r3, #4
    42b4:	2b00      	cmp	r3, #0
    42b6:	d001      	beq.n	42bc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
    42b8:	2301      	movs	r3, #1
    42ba:	e000      	b.n	42be <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x192>
    42bc:	2300      	movs	r3, #0
    42be:	2b00      	cmp	r3, #0
    42c0:	d001      	beq.n	42c6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x19a>
    42c2:	2301      	movs	r3, #1
    42c4:	e036      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	3b01      	subs	r3, #1
    42ca:	60fb      	str	r3, [r7, #12]
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	781a      	ldrb	r2, [r3, #0]
    42d0:	68bb      	ldr	r3, [r7, #8]
    42d2:	3b04      	subs	r3, #4
    42d4:	60bb      	str	r3, [r7, #8]
    42d6:	68bb      	ldr	r3, [r7, #8]
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	781b      	ldrb	r3, [r3, #0]
    42dc:	429a      	cmp	r2, r3
    42de:	d008      	beq.n	42f2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    42e6:	f003 0302 	and.w	r3, r3, #2
    42ea:	2b00      	cmp	r3, #0
    42ec:	d001      	beq.n	42f2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
    42ee:	2301      	movs	r3, #1
    42f0:	e000      	b.n	42f4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c8>
    42f2:	2300      	movs	r3, #0
    42f4:	2b00      	cmp	r3, #0
    42f6:	d001      	beq.n	42fc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1d0>
    42f8:	2301      	movs	r3, #1
    42fa:	e01b      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
    42fc:	68fb      	ldr	r3, [r7, #12]
    42fe:	3b01      	subs	r3, #1
    4300:	60fb      	str	r3, [r7, #12]
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	781a      	ldrb	r2, [r3, #0]
    4306:	68bb      	ldr	r3, [r7, #8]
    4308:	3b04      	subs	r3, #4
    430a:	60bb      	str	r3, [r7, #8]
    430c:	68bb      	ldr	r3, [r7, #8]
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	781b      	ldrb	r3, [r3, #0]
    4312:	429a      	cmp	r2, r3
    4314:	d008      	beq.n	4328 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
    4316:	683b      	ldr	r3, [r7, #0]
    4318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    431c:	f003 0301 	and.w	r3, r3, #1
    4320:	2b00      	cmp	r3, #0
    4322:	d001      	beq.n	4328 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
    4324:	2301      	movs	r3, #1
    4326:	e000      	b.n	432a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fe>
    4328:	2300      	movs	r3, #0
    432a:	2b00      	cmp	r3, #0
    432c:	d001      	beq.n	4332 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
    432e:	2301      	movs	r3, #1
    4330:	e000      	b.n	4334 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
    }

    return 0;
    4332:	2300      	movs	r3, #0
}
    4334:	4618      	mov	r0, r3
    4336:	3714      	adds	r7, #20
    4338:	46bd      	mov	sp, r7
    433a:	bc80      	pop	{r7}
    433c:	4770      	bx	lr
    433e:	bf00      	nop

00004340 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
    4340:	b580      	push	{r7, lr}
    4342:	b086      	sub	sp, #24
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
    4348:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
    434a:	683b      	ldr	r3, [r7, #0]
    434c:	7f9b      	ldrb	r3, [r3, #30]
    434e:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
    4350:	683b      	ldr	r3, [r7, #0]
    4352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4354:	3305      	adds	r3, #5
    4356:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
    4358:	683b      	ldr	r3, [r7, #0]
    435a:	3320      	adds	r3, #32
    435c:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
    435e:	697b      	ldr	r3, [r7, #20]
    4360:	2b00      	cmp	r3, #0
    4362:	d00c      	beq.n	437e <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
    4364:	693b      	ldr	r3, [r7, #16]
    4366:	1c5a      	adds	r2, r3, #1
    4368:	613a      	str	r2, [r7, #16]
    436a:	68fa      	ldr	r2, [r7, #12]
    436c:	1d11      	adds	r1, r2, #4
    436e:	60f9      	str	r1, [r7, #12]
    4370:	6812      	ldr	r2, [r2, #0]
    4372:	7812      	ldrb	r2, [r2, #0]
    4374:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
    4376:	697b      	ldr	r3, [r7, #20]
    4378:	3b01      	subs	r3, #1
    437a:	617b      	str	r3, [r7, #20]
    437c:	e7ef      	b.n	435e <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
    437e:	683b      	ldr	r3, [r7, #0]
    4380:	2200      	movs	r2, #0
    4382:	77da      	strb	r2, [r3, #31]

    return   canopen->CAN_Send( TPDO->CANtxBuff);
    4384:	4b06      	ldr	r3, [pc, #24]	; (43a0 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
    4386:	681a      	ldr	r2, [r3, #0]
    4388:	683b      	ldr	r3, [r7, #0]
    438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    438c:	4619      	mov	r1, r3
    438e:	4610      	mov	r0, r2
    4390:	4b04      	ldr	r3, [pc, #16]	; (43a4 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
    4392:	4798      	blx	r3
    4394:	4603      	mov	r3, r0
}
    4396:	4618      	mov	r0, r3
    4398:	3718      	adds	r7, #24
    439a:	46bd      	mov	sp, r7
    439c:	bd80      	pop	{r7, pc}
    439e:	bf00      	nop
    43a0:	20001964 	.word	0x20001964
    43a4:	00001b45 	.word	0x00001b45

000043a8 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
    43a8:	b480      	push	{r7}
    43aa:	b089      	sub	sp, #36	; 0x24
    43ac:	af00      	add	r7, sp, #0
    43ae:	60f8      	str	r0, [r7, #12]
    43b0:	60b9      	str	r1, [r7, #8]
    43b2:	4613      	mov	r3, r2
    43b4:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
    43b6:	68bb      	ldr	r3, [r7, #8]
    43b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    43bc:	2b00      	cmp	r3, #0
    43be:	d004      	beq.n	43ca <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
    43c0:	68bb      	ldr	r3, [r7, #8]
    43c2:	695b      	ldr	r3, [r3, #20]
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	2b05      	cmp	r3, #5
    43c8:	d009      	beq.n	43de <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    43ca:	68bb      	ldr	r3, [r7, #8]
    43cc:	2200      	movs	r2, #0
    43ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    43d2:	68bb      	ldr	r3, [r7, #8]
    43d4:	2200      	movs	r2, #0
    43d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    43da:	bf00      	nop
                }
            }
#endif
        }
    }
}
    43dc:	e046      	b.n	446c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
    43de:	68bb      	ldr	r3, [r7, #8]
    43e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    43e4:	2b00      	cmp	r3, #0
    43e6:	d002      	beq.n	43ee <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
    43e8:	79fb      	ldrb	r3, [r7, #7]
    43ea:	2b00      	cmp	r3, #0
    43ec:	d03e      	beq.n	446c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
    43ee:	2300      	movs	r3, #0
    43f0:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
    43f2:	68bb      	ldr	r3, [r7, #8]
    43f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    43f8:	2b00      	cmp	r3, #0
    43fa:	d006      	beq.n	440a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
    43fc:	68bb      	ldr	r3, [r7, #8]
    43fe:	689b      	ldr	r3, [r3, #8]
    4400:	7edb      	ldrb	r3, [r3, #27]
    4402:	2b00      	cmp	r3, #0
    4404:	d101      	bne.n	440a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
    4406:	2301      	movs	r3, #1
    4408:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
    440a:	7ffb      	ldrb	r3, [r7, #31]
    440c:	68ba      	ldr	r2, [r7, #8]
    440e:	4413      	add	r3, r2
    4410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4414:	b2db      	uxtb	r3, r3
    4416:	2b00      	cmp	r3, #0
    4418:	bf14      	ite	ne
    441a:	2301      	movne	r3, #1
    441c:	2300      	moveq	r3, #0
    441e:	b2db      	uxtb	r3, r3
    4420:	2b00      	cmp	r3, #0
    4422:	d023      	beq.n	446c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
    4424:	68bb      	ldr	r3, [r7, #8]
    4426:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    442a:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
    442c:	7ffb      	ldrb	r3, [r7, #31]
    442e:	3308      	adds	r3, #8
    4430:	00db      	lsls	r3, r3, #3
    4432:	68ba      	ldr	r2, [r7, #8]
    4434:	4413      	add	r3, r2
    4436:	3306      	adds	r3, #6
    4438:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
    443a:	68bb      	ldr	r3, [r7, #8]
    443c:	3324      	adds	r3, #36	; 0x24
    443e:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
    4440:	7ffb      	ldrb	r3, [r7, #31]
    4442:	68ba      	ldr	r2, [r7, #8]
    4444:	4413      	add	r3, r2
    4446:	2200      	movs	r2, #0
    4448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
    444c:	69bb      	ldr	r3, [r7, #24]
    444e:	2b00      	cmp	r3, #0
    4450:	d0db      	beq.n	440a <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
    4452:	693b      	ldr	r3, [r7, #16]
    4454:	1d1a      	adds	r2, r3, #4
    4456:	613a      	str	r2, [r7, #16]
    4458:	681a      	ldr	r2, [r3, #0]
    445a:	697b      	ldr	r3, [r7, #20]
    445c:	1c59      	adds	r1, r3, #1
    445e:	6179      	str	r1, [r7, #20]
    4460:	781b      	ldrb	r3, [r3, #0]
    4462:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
    4464:	69bb      	ldr	r3, [r7, #24]
    4466:	3b01      	subs	r3, #1
    4468:	61bb      	str	r3, [r7, #24]
    446a:	e7ef      	b.n	444c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
    446c:	bf00      	nop
    446e:	3724      	adds	r7, #36	; 0x24
    4470:	46bd      	mov	sp, r7
    4472:	bc80      	pop	{r7}
    4474:	4770      	bx	lr
	...

00004478 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
    4478:	b580      	push	{r7, lr}
    447a:	b084      	sub	sp, #16
    447c:	af00      	add	r7, sp, #0
    447e:	60f8      	str	r0, [r7, #12]
    4480:	60b9      	str	r1, [r7, #8]
    4482:	607a      	str	r2, [r7, #4]
    4484:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
    4486:	68bb      	ldr	r3, [r7, #8]
    4488:	7f5b      	ldrb	r3, [r3, #29]
    448a:	2b00      	cmp	r3, #0
    448c:	f000 809e 	beq.w	45cc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
    4490:	68bb      	ldr	r3, [r7, #8]
    4492:	691b      	ldr	r3, [r3, #16]
    4494:	781b      	ldrb	r3, [r3, #0]
    4496:	2b05      	cmp	r3, #5
    4498:	f040 8098 	bne.w	45cc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    449c:	68bb      	ldr	r3, [r7, #8]
    449e:	689b      	ldr	r3, [r3, #8]
    44a0:	7a1b      	ldrb	r3, [r3, #8]
    44a2:	2bfc      	cmp	r3, #252	; 0xfc
    44a4:	dd31      	ble.n	450a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
    44a6:	68bb      	ldr	r3, [r7, #8]
    44a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44aa:	2b00      	cmp	r3, #0
    44ac:	f040 809b 	bne.w	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    44b0:	68bb      	ldr	r3, [r7, #8]
    44b2:	7fdb      	ldrb	r3, [r3, #31]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d10a      	bne.n	44ce <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
    44b8:	68bb      	ldr	r3, [r7, #8]
    44ba:	689b      	ldr	r3, [r3, #8]
    44bc:	695b      	ldr	r3, [r3, #20]
    44be:	2b00      	cmp	r3, #0
    44c0:	f000 8091 	beq.w	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    44c4:	68bb      	ldr	r3, [r7, #8]
    44c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44c8:	2b00      	cmp	r3, #0
    44ca:	f040 808c 	bne.w	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
    44ce:	68b9      	ldr	r1, [r7, #8]
    44d0:	68f8      	ldr	r0, [r7, #12]
    44d2:	4b54      	ldr	r3, [pc, #336]	; (4624 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    44d4:	4798      	blx	r3
    44d6:	4603      	mov	r3, r0
    44d8:	2b00      	cmp	r3, #0
    44da:	bf0c      	ite	eq
    44dc:	2301      	moveq	r3, #1
    44de:	2300      	movne	r3, #0
    44e0:	b2db      	uxtb	r3, r3
    44e2:	2b00      	cmp	r3, #0
    44e4:	d07f      	beq.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
    44e6:	68bb      	ldr	r3, [r7, #8]
    44e8:	689b      	ldr	r3, [r3, #8]
    44ea:	68db      	ldr	r3, [r3, #12]
    44ec:	2264      	movs	r2, #100	; 0x64
    44ee:	fb02 f203 	mul.w	r2, r2, r3
    44f2:	68bb      	ldr	r3, [r7, #8]
    44f4:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
    44f6:	68bb      	ldr	r3, [r7, #8]
    44f8:	689b      	ldr	r3, [r3, #8]
    44fa:	695b      	ldr	r3, [r3, #20]
    44fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4500:	fb02 f203 	mul.w	r2, r2, r3
    4504:	68bb      	ldr	r3, [r7, #8]
    4506:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4508:	e06d      	b.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	2b00      	cmp	r3, #0
    450e:	d06a      	beq.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    4510:	78fb      	ldrb	r3, [r7, #3]
    4512:	2b00      	cmp	r3, #0
    4514:	d067      	beq.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
    4516:	68bb      	ldr	r3, [r7, #8]
    4518:	689b      	ldr	r3, [r3, #8]
    451a:	7a1b      	ldrb	r3, [r3, #8]
    451c:	2b00      	cmp	r3, #0
    451e:	d108      	bne.n	4532 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
    4520:	68bb      	ldr	r3, [r7, #8]
    4522:	7fdb      	ldrb	r3, [r3, #31]
    4524:	2b00      	cmp	r3, #0
    4526:	d05e      	beq.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
    4528:	68b9      	ldr	r1, [r7, #8]
    452a:	68f8      	ldr	r0, [r7, #12]
    452c:	4b3d      	ldr	r3, [pc, #244]	; (4624 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    452e:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4530:	e059      	b.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
    4532:	68bb      	ldr	r3, [r7, #8]
    4534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    4538:	2bff      	cmp	r3, #255	; 0xff
    453a:	d113      	bne.n	4564 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	7e1b      	ldrb	r3, [r3, #24]
    4540:	2b00      	cmp	r3, #0
    4542:	d009      	beq.n	4558 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
    4544:	68bb      	ldr	r3, [r7, #8]
    4546:	689b      	ldr	r3, [r3, #8]
    4548:	7e1b      	ldrb	r3, [r3, #24]
    454a:	2b00      	cmp	r3, #0
    454c:	d004      	beq.n	4558 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
    454e:	68bb      	ldr	r3, [r7, #8]
    4550:	22fe      	movs	r2, #254	; 0xfe
    4552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    4556:	e005      	b.n	4564 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    4558:	68bb      	ldr	r3, [r7, #8]
    455a:	689b      	ldr	r3, [r3, #8]
    455c:	7a1a      	ldrb	r2, [r3, #8]
    455e:	68bb      	ldr	r3, [r7, #8]
    4560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
    4564:	68bb      	ldr	r3, [r7, #8]
    4566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    456a:	2bfe      	cmp	r3, #254	; 0xfe
    456c:	d111      	bne.n	4592 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	7f1a      	ldrb	r2, [r3, #28]
    4572:	68bb      	ldr	r3, [r7, #8]
    4574:	689b      	ldr	r3, [r3, #8]
    4576:	7e1b      	ldrb	r3, [r3, #24]
    4578:	429a      	cmp	r2, r3
    457a:	d134      	bne.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    457c:	68bb      	ldr	r3, [r7, #8]
    457e:	689b      	ldr	r3, [r3, #8]
    4580:	7a1a      	ldrb	r2, [r3, #8]
    4582:	68bb      	ldr	r3, [r7, #8]
    4584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
    4588:	68b9      	ldr	r1, [r7, #8]
    458a:	68f8      	ldr	r0, [r7, #12]
    458c:	4b25      	ldr	r3, [pc, #148]	; (4624 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    458e:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    4590:	e029      	b.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
    4592:	68bb      	ldr	r3, [r7, #8]
    4594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    4598:	3b01      	subs	r3, #1
    459a:	b2da      	uxtb	r2, r3
    459c:	68bb      	ldr	r3, [r7, #8]
    459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    45a2:	68bb      	ldr	r3, [r7, #8]
    45a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    45a8:	2b00      	cmp	r3, #0
    45aa:	bf0c      	ite	eq
    45ac:	2301      	moveq	r3, #1
    45ae:	2300      	movne	r3, #0
    45b0:	b2db      	uxtb	r3, r3
    45b2:	2b00      	cmp	r3, #0
    45b4:	d017      	beq.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
    45b6:	68bb      	ldr	r3, [r7, #8]
    45b8:	689b      	ldr	r3, [r3, #8]
    45ba:	7a1a      	ldrb	r2, [r3, #8]
    45bc:	68bb      	ldr	r3, [r7, #8]
    45be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
    45c2:	68b9      	ldr	r1, [r7, #8]
    45c4:	68f8      	ldr	r0, [r7, #12]
    45c6:	4b17      	ldr	r3, [pc, #92]	; (4624 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
    45c8:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    45ca:	e00c      	b.n	45e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    45cc:	68bb      	ldr	r3, [r7, #8]
    45ce:	689b      	ldr	r3, [r3, #8]
    45d0:	7a1b      	ldrb	r3, [r3, #8]
    45d2:	2bfd      	cmp	r3, #253	; 0xfd
    45d4:	dd03      	ble.n	45de <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
    45d6:	68bb      	ldr	r3, [r7, #8]
    45d8:	2201      	movs	r2, #1
    45da:	77da      	strb	r2, [r3, #31]
    45dc:	e004      	b.n	45e8 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
    45de:	68bb      	ldr	r3, [r7, #8]
    45e0:	2200      	movs	r2, #0
    45e2:	77da      	strb	r2, [r3, #31]
    45e4:	e000      	b.n	45e8 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
    45e6:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
    45e8:	68bb      	ldr	r3, [r7, #8]
    45ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    45ec:	69bb      	ldr	r3, [r7, #24]
    45ee:	429a      	cmp	r2, r3
    45f0:	d904      	bls.n	45fc <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
    45f2:	68bb      	ldr	r3, [r7, #8]
    45f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    45f6:	69bb      	ldr	r3, [r7, #24]
    45f8:	1ad3      	subs	r3, r2, r3
    45fa:	e000      	b.n	45fe <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
    45fc:	2300      	movs	r3, #0
    45fe:	68ba      	ldr	r2, [r7, #8]
    4600:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
    4602:	68bb      	ldr	r3, [r7, #8]
    4604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4606:	69bb      	ldr	r3, [r7, #24]
    4608:	429a      	cmp	r2, r3
    460a:	d904      	bls.n	4616 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
    460c:	68bb      	ldr	r3, [r7, #8]
    460e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4610:	69bb      	ldr	r3, [r7, #24]
    4612:	1ad3      	subs	r3, r2, r3
    4614:	e000      	b.n	4618 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
    4616:	2300      	movs	r3, #0
    4618:	68ba      	ldr	r2, [r7, #8]
    461a:	6493      	str	r3, [r2, #72]	; 0x48
    461c:	bf00      	nop
    461e:	3710      	adds	r7, #16
    4620:	46bd      	mov	sp, r7
    4622:	bd80      	pop	{r7, pc}
    4624:	00004341 	.word	0x00004341

00004628 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
    4628:	b580      	push	{r7, lr}
    462a:	b082      	sub	sp, #8
    462c:	af00      	add	r7, sp, #0
    462e:	6078      	str	r0, [r7, #4]
    4630:	6878      	ldr	r0, [r7, #4]
    4632:	4b05      	ldr	r3, [pc, #20]	; (4648 <_ZN12CO_SDO_ClassC1Ev+0x20>)
    4634:	4798      	blx	r3
{
	ptrCOSDOClass=this;
    4636:	4a05      	ldr	r2, [pc, #20]	; (464c <_ZN12CO_SDO_ClassC1Ev+0x24>)
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	4618      	mov	r0, r3
    4640:	3708      	adds	r7, #8
    4642:	46bd      	mov	sp, r7
    4644:	bd80      	pop	{r7, pc}
    4646:	bf00      	nop
    4648:	00006ca1 	.word	0x00006ca1
    464c:	20001980 	.word	0x20001980

00004650 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
    4656:	6078      	str	r0, [r7, #4]
    4658:	6878      	ldr	r0, [r7, #4]
    465a:	4b03      	ldr	r3, [pc, #12]	; (4668 <_ZN12CO_SDO_ClassD1Ev+0x18>)
    465c:	4798      	blx	r3
{
} //~CO_SDO_Class
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	4618      	mov	r0, r3
    4662:	3708      	adds	r7, #8
    4664:	46bd      	mov	sp, r7
    4666:	bd80      	pop	{r7, pc}
    4668:	00006cb5 	.word	0x00006cb5

0000466c <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
    466c:	b480      	push	{r7}
    466e:	b087      	sub	sp, #28
    4670:	af00      	add	r7, sp, #0
    4672:	60f8      	str	r0, [r7, #12]
    4674:	60b9      	str	r1, [r7, #8]
    4676:	607a      	str	r2, [r7, #4]
    4678:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
    467a:	2300      	movs	r3, #0
    467c:	617b      	str	r3, [r7, #20]
    467e:	697a      	ldr	r2, [r7, #20]
    4680:	683b      	ldr	r3, [r7, #0]
    4682:	429a      	cmp	r2, r3
    4684:	d20b      	bcs.n	469e <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
    4686:	68ba      	ldr	r2, [r7, #8]
    4688:	697b      	ldr	r3, [r7, #20]
    468a:	4413      	add	r3, r2
    468c:	6879      	ldr	r1, [r7, #4]
    468e:	697a      	ldr	r2, [r7, #20]
    4690:	440a      	add	r2, r1
    4692:	7812      	ldrb	r2, [r2, #0]
    4694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
    4696:	697b      	ldr	r3, [r7, #20]
    4698:	3301      	adds	r3, #1
    469a:	617b      	str	r3, [r7, #20]
    469c:	e7ef      	b.n	467e <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
    469e:	bf00      	nop
    46a0:	371c      	adds	r7, #28
    46a2:	46bd      	mov	sp, r7
    46a4:	bc80      	pop	{r7}
    46a6:	4770      	bx	lr

000046a8 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
    46a8:	b480      	push	{r7}
    46aa:	b087      	sub	sp, #28
    46ac:	af00      	add	r7, sp, #0
    46ae:	6078      	str	r0, [r7, #4]
    46b0:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
    46b8:	683b      	ldr	r3, [r7, #0]
    46ba:	3301      	adds	r3, #1
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
    46c0:	683b      	ldr	r3, [r7, #0]
    46c2:	3302      	adds	r3, #2
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	3303      	adds	r3, #3
    46cc:	781b      	ldrb	r3, [r3, #0]
    46ce:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
    46d0:	68bb      	ldr	r3, [r7, #8]
}
    46d2:	4618      	mov	r0, r3
    46d4:	371c      	adds	r7, #28
    46d6:	46bd      	mov	sp, r7
    46d8:	bc80      	pop	{r7}
    46da:	4770      	bx	lr

000046dc <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
    46dc:	b480      	push	{r7}
    46de:	b089      	sub	sp, #36	; 0x24
    46e0:	af00      	add	r7, sp, #0
    46e2:	60f8      	str	r0, [r7, #12]
    46e4:	60b9      	str	r1, [r7, #8]
    46e6:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
    46ec:	7c3a      	ldrb	r2, [r7, #16]
    46ee:	68bb      	ldr	r3, [r7, #8]
    46f0:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
    46f2:	68bb      	ldr	r3, [r7, #8]
    46f4:	3301      	adds	r3, #1
    46f6:	7c7a      	ldrb	r2, [r7, #17]
    46f8:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
    46fa:	68bb      	ldr	r3, [r7, #8]
    46fc:	3302      	adds	r3, #2
    46fe:	7cba      	ldrb	r2, [r7, #18]
    4700:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
    4702:	68bb      	ldr	r3, [r7, #8]
    4704:	3303      	adds	r3, #3
    4706:	7cfa      	ldrb	r2, [r7, #19]
    4708:	701a      	strb	r2, [r3, #0]
}
    470a:	bf00      	nop
    470c:	3724      	adds	r7, #36	; 0x24
    470e:	46bd      	mov	sp, r7
    4710:	bc80      	pop	{r7}
    4712:	4770      	bx	lr

00004714 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
    4714:	b480      	push	{r7}
    4716:	b087      	sub	sp, #28
    4718:	af00      	add	r7, sp, #0
    471a:	60f8      	str	r0, [r7, #12]
    471c:	60b9      	str	r1, [r7, #8]
    471e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    4720:	68bb      	ldr	r3, [r7, #8]
    4722:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    4724:	687b      	ldr	r3, [r7, #4]
    4726:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    4728:	693b      	ldr	r3, [r7, #16]
    472a:	781a      	ldrb	r2, [r3, #0]
    472c:	697b      	ldr	r3, [r7, #20]
    472e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    4730:	697b      	ldr	r3, [r7, #20]
    4732:	3301      	adds	r3, #1
    4734:	693a      	ldr	r2, [r7, #16]
    4736:	7852      	ldrb	r2, [r2, #1]
    4738:	701a      	strb	r2, [r3, #0]
}
    473a:	bf00      	nop
    473c:	371c      	adds	r7, #28
    473e:	46bd      	mov	sp, r7
    4740:	bc80      	pop	{r7}
    4742:	4770      	bx	lr

00004744 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
    4744:	b480      	push	{r7}
    4746:	b087      	sub	sp, #28
    4748:	af00      	add	r7, sp, #0
    474a:	60f8      	str	r0, [r7, #12]
    474c:	60b9      	str	r1, [r7, #8]
    474e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    4750:	68bb      	ldr	r3, [r7, #8]
    4752:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    4758:	693b      	ldr	r3, [r7, #16]
    475a:	781a      	ldrb	r2, [r3, #0]
    475c:	697b      	ldr	r3, [r7, #20]
    475e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    4760:	697b      	ldr	r3, [r7, #20]
    4762:	3301      	adds	r3, #1
    4764:	693a      	ldr	r2, [r7, #16]
    4766:	7852      	ldrb	r2, [r2, #1]
    4768:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
    476a:	697b      	ldr	r3, [r7, #20]
    476c:	3302      	adds	r3, #2
    476e:	693a      	ldr	r2, [r7, #16]
    4770:	7892      	ldrb	r2, [r2, #2]
    4772:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
    4774:	697b      	ldr	r3, [r7, #20]
    4776:	3303      	adds	r3, #3
    4778:	693a      	ldr	r2, [r7, #16]
    477a:	78d2      	ldrb	r2, [r2, #3]
    477c:	701a      	strb	r2, [r3, #0]
}
    477e:	bf00      	nop
    4780:	371c      	adds	r7, #28
    4782:	46bd      	mov	sp, r7
    4784:	bc80      	pop	{r7}
    4786:	4770      	bx	lr

00004788 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
    4788:	b580      	push	{r7, lr}
    478a:	b086      	sub	sp, #24
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
    4790:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
    4792:	687b      	ldr	r3, [r7, #4]
    4794:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
    4796:	683b      	ldr	r3, [r7, #0]
    4798:	7d1b      	ldrb	r3, [r3, #20]
    479a:	2b08      	cmp	r3, #8
    479c:	f040 80a4 	bne.w	48e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    47a0:	693b      	ldr	r3, [r7, #16]
    47a2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    47a6:	2b00      	cmp	r3, #0
    47a8:	f040 809e 	bne.w	48e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
    47ac:	693b      	ldr	r3, [r7, #16]
    47ae:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    47b2:	2b15      	cmp	r3, #21
    47b4:	d024      	beq.n	4800 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
    47b6:	683b      	ldr	r3, [r7, #0]
    47b8:	7d5a      	ldrb	r2, [r3, #21]
    47ba:	693b      	ldr	r3, [r7, #16]
    47bc:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
    47be:	683b      	ldr	r3, [r7, #0]
    47c0:	7d9a      	ldrb	r2, [r3, #22]
    47c2:	693b      	ldr	r3, [r7, #16]
    47c4:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
    47c6:	683b      	ldr	r3, [r7, #0]
    47c8:	7dda      	ldrb	r2, [r3, #23]
    47ca:	693b      	ldr	r3, [r7, #16]
    47cc:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
    47ce:	683b      	ldr	r3, [r7, #0]
    47d0:	7e1a      	ldrb	r2, [r3, #24]
    47d2:	693b      	ldr	r3, [r7, #16]
    47d4:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
    47d6:	683b      	ldr	r3, [r7, #0]
    47d8:	7e5a      	ldrb	r2, [r3, #25]
    47da:	693b      	ldr	r3, [r7, #16]
    47dc:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
    47de:	683b      	ldr	r3, [r7, #0]
    47e0:	7e9a      	ldrb	r2, [r3, #26]
    47e2:	693b      	ldr	r3, [r7, #16]
    47e4:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
    47e6:	683b      	ldr	r3, [r7, #0]
    47e8:	7eda      	ldrb	r2, [r3, #27]
    47ea:	693b      	ldr	r3, [r7, #16]
    47ec:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
    47ee:	683b      	ldr	r3, [r7, #0]
    47f0:	7f1a      	ldrb	r2, [r3, #28]
    47f2:	693b      	ldr	r3, [r7, #16]
    47f4:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
    47f6:	693b      	ldr	r3, [r7, #16]
    47f8:	2201      	movs	r2, #1
    47fa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    47fe:	e067      	b.n	48d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
    4800:	683b      	ldr	r3, [r7, #0]
    4802:	7d5a      	ldrb	r2, [r3, #21]
    4804:	693b      	ldr	r3, [r7, #16]
    4806:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
    4808:	693b      	ldr	r3, [r7, #16]
    480a:	781b      	ldrb	r3, [r3, #0]
    480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4810:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
    4812:	693b      	ldr	r3, [r7, #16]
    4814:	2200      	movs	r2, #0
    4816:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
    4818:	7bfa      	ldrb	r2, [r7, #15]
    481a:	693b      	ldr	r3, [r7, #16]
    481c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    4820:	3301      	adds	r3, #1
    4822:	429a      	cmp	r2, r3
    4824:	d141      	bne.n	48aa <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
    4826:	693b      	ldr	r3, [r7, #16]
    4828:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    482c:	3301      	adds	r3, #1
    482e:	b2da      	uxtb	r2, r3
    4830:	693b      	ldr	r3, [r7, #16]
    4832:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
    4836:	2301      	movs	r3, #1
    4838:	75fb      	strb	r3, [r7, #23]
    483a:	7dfb      	ldrb	r3, [r7, #23]
    483c:	2b07      	cmp	r3, #7
    483e:	dc1d      	bgt.n	487c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
    4840:	693b      	ldr	r3, [r7, #16]
    4842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4844:	693b      	ldr	r3, [r7, #16]
    4846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4848:	1c58      	adds	r0, r3, #1
    484a:	6939      	ldr	r1, [r7, #16]
    484c:	6388      	str	r0, [r1, #56]	; 0x38
    484e:	4413      	add	r3, r2
    4850:	7dfa      	ldrb	r2, [r7, #23]
    4852:	6839      	ldr	r1, [r7, #0]
    4854:	440a      	add	r2, r1
    4856:	7d52      	ldrb	r2, [r2, #21]
    4858:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    485a:	693b      	ldr	r3, [r7, #16]
    485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    485e:	2b1f      	cmp	r3, #31
    4860:	d908      	bls.n	4874 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    4862:	693b      	ldr	r3, [r7, #16]
    4864:	2216      	movs	r2, #22
    4866:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
    486a:	693b      	ldr	r3, [r7, #16]
    486c:	2201      	movs	r2, #1
    486e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
    4872:	e003      	b.n	487c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
    4874:	7dfb      	ldrb	r3, [r7, #23]
    4876:	3301      	adds	r3, #1
    4878:	75fb      	strb	r3, [r7, #23]
    487a:	e7de      	b.n	483a <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
    487c:	693b      	ldr	r3, [r7, #16]
    487e:	781b      	ldrb	r3, [r3, #0]
    4880:	b25b      	sxtb	r3, r3
    4882:	2b00      	cmp	r3, #0
    4884:	db08      	blt.n	4898 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
    4886:	693b      	ldr	r3, [r7, #16]
    4888:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    488c:	461a      	mov	r2, r3
    488e:	693b      	ldr	r3, [r7, #16]
    4890:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    4894:	429a      	cmp	r2, r3
    4896:	db1b      	blt.n	48d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    4898:	693b      	ldr	r3, [r7, #16]
    489a:	2216      	movs	r2, #22
    489c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
    48a0:	693b      	ldr	r3, [r7, #16]
    48a2:	2201      	movs	r2, #1
    48a4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    48a8:	e012      	b.n	48d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
    48aa:	693b      	ldr	r3, [r7, #16]
    48ac:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    48b0:	7bfa      	ldrb	r2, [r7, #15]
    48b2:	429a      	cmp	r2, r3
    48b4:	d00c      	beq.n	48d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
    48b6:	693b      	ldr	r3, [r7, #16]
    48b8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    48bc:	2b00      	cmp	r3, #0
    48be:	d007      	beq.n	48d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    48c0:	693b      	ldr	r3, [r7, #16]
    48c2:	2216      	movs	r2, #22
    48c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
    48c8:	693b      	ldr	r3, [r7, #16]
    48ca:	2201      	movs	r2, #1
    48cc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
    48d0:	693b      	ldr	r3, [r7, #16]
    48d2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    48d6:	2b00      	cmp	r3, #0
    48d8:	d006      	beq.n	48e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    48da:	693b      	ldr	r3, [r7, #16]
    48dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    48de:	2b00      	cmp	r3, #0
    48e0:	d002      	beq.n	48e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
    48e2:	693b      	ldr	r3, [r7, #16]
    48e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    48e6:	4798      	blx	r3
        }
    }
}
    48e8:	bf00      	nop
    48ea:	3718      	adds	r7, #24
    48ec:	46bd      	mov	sp, r7
    48ee:	bd80      	pop	{r7, pc}

000048f0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
    48f0:	b580      	push	{r7, lr}
    48f2:	b086      	sub	sp, #24
    48f4:	af00      	add	r7, sp, #0
    48f6:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    48f8:	2300      	movs	r3, #0
    48fa:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	613b      	str	r3, [r7, #16]
    value = canopen->CO_getUint32(ODF_arg->data);
    4902:	4b12      	ldr	r3, [pc, #72]	; (494c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    4904:	681b      	ldr	r3, [r3, #0]
    4906:	1d1a      	adds	r2, r3, #4
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	685b      	ldr	r3, [r3, #4]
    490c:	4619      	mov	r1, r3
    490e:	4610      	mov	r0, r2
    4910:	4b0f      	ldr	r3, [pc, #60]	; (4950 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
    4912:	4798      	blx	r3
    4914:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	7f5b      	ldrb	r3, [r3, #29]
    491a:	2b00      	cmp	r3, #0
    491c:	d010      	beq.n	4940 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	7f1b      	ldrb	r3, [r3, #28]
    4922:	2b00      	cmp	r3, #0
    4924:	d00c      	beq.n	4940 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen->CO_setUint32(ODF_arg->data, value + *nodeId);
    4926:	4b09      	ldr	r3, [pc, #36]	; (494c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	1d18      	adds	r0, r3, #4
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	6859      	ldr	r1, [r3, #4]
    4930:	693b      	ldr	r3, [r7, #16]
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	461a      	mov	r2, r3
    4936:	68fb      	ldr	r3, [r7, #12]
    4938:	4413      	add	r3, r2
    493a:	461a      	mov	r2, r3
    493c:	4b05      	ldr	r3, [pc, #20]	; (4954 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
    493e:	4798      	blx	r3
    }

    return ret;
    4940:	697b      	ldr	r3, [r7, #20]
}
    4942:	4618      	mov	r0, r3
    4944:	3718      	adds	r7, #24
    4946:	46bd      	mov	sp, r7
    4948:	bd80      	pop	{r7, pc}
    494a:	bf00      	nop
    494c:	20001964 	.word	0x20001964
    4950:	000046a9 	.word	0x000046a9
    4954:	000046dd 	.word	0x000046dd

00004958 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    4958:	b5b0      	push	{r4, r5, r7, lr}
    495a:	b08a      	sub	sp, #40	; 0x28
    495c:	af04      	add	r7, sp, #16
    495e:	60f8      	str	r0, [r7, #12]
    4960:	60b9      	str	r1, [r7, #8]
    4962:	607a      	str	r2, [r7, #4]
    4964:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
    4966:	68bb      	ldr	r3, [r7, #8]
    4968:	2b00      	cmp	r3, #0
    496a:	d005      	beq.n	4978 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    496e:	2b00      	cmp	r3, #0
    4970:	d002      	beq.n	4978 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    4972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4974:	2b00      	cmp	r3, #0
    4976:	d102      	bne.n	497e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    4978:	f04f 33ff 	mov.w	r3, #4294967295
    497c:	e0ac      	b.n	4ad8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
    497e:	4a58      	ldr	r2, [pc, #352]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4980:	68bb      	ldr	r3, [r7, #8]
    4982:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
    4984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4986:	2b00      	cmp	r3, #0
    4988:	d13b      	bne.n	4a02 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
    498a:	4b55      	ldr	r3, [pc, #340]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	2201      	movs	r2, #1
    4990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
    4994:	4b52      	ldr	r3, [pc, #328]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4996:	681b      	ldr	r3, [r3, #0]
    4998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    499a:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
    499c:	4b50      	ldr	r3, [pc, #320]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    499e:	681b      	ldr	r3, [r3, #0]
    49a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    49a2:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
    49a4:	4b4e      	ldr	r3, [pc, #312]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    49aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
    49ac:	2300      	movs	r3, #0
    49ae:	617b      	str	r3, [r7, #20]
    49b0:	697a      	ldr	r2, [r7, #20]
    49b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    49b4:	429a      	cmp	r2, r3
    49b6:	d238      	bcs.n	4a2a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
    49b8:	4b49      	ldr	r3, [pc, #292]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    49be:	697a      	ldr	r2, [r7, #20]
    49c0:	4613      	mov	r3, r2
    49c2:	005b      	lsls	r3, r3, #1
    49c4:	4413      	add	r3, r2
    49c6:	009b      	lsls	r3, r3, #2
    49c8:	440b      	add	r3, r1
    49ca:	2200      	movs	r2, #0
    49cc:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
    49ce:	4b44      	ldr	r3, [pc, #272]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    49d4:	697a      	ldr	r2, [r7, #20]
    49d6:	4613      	mov	r3, r2
    49d8:	005b      	lsls	r3, r3, #1
    49da:	4413      	add	r3, r2
    49dc:	009b      	lsls	r3, r3, #2
    49de:	440b      	add	r3, r1
    49e0:	2200      	movs	r2, #0
    49e2:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
    49e4:	4b3e      	ldr	r3, [pc, #248]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    49ea:	697a      	ldr	r2, [r7, #20]
    49ec:	4613      	mov	r3, r2
    49ee:	005b      	lsls	r3, r3, #1
    49f0:	4413      	add	r3, r2
    49f2:	009b      	lsls	r3, r3, #2
    49f4:	440b      	add	r3, r1
    49f6:	2200      	movs	r2, #0
    49f8:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
    49fa:	697b      	ldr	r3, [r7, #20]
    49fc:	3301      	adds	r3, #1
    49fe:	617b      	str	r3, [r7, #20]
    4a00:	e7d6      	b.n	49b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
    4a02:	4b37      	ldr	r3, [pc, #220]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	2200      	movs	r2, #0
    4a08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
    4a0c:	4b34      	ldr	r3, [pc, #208]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4a12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4a14:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
    4a16:	4b32      	ldr	r3, [pc, #200]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    4a1e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
    4a20:	4b2f      	ldr	r3, [pc, #188]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4a26:	6b52      	ldr	r2, [r2, #52]	; 0x34
    4a28:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
    4a2a:	4b2d      	ldr	r3, [pc, #180]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    4a32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
    4a36:	4b2a      	ldr	r3, [pc, #168]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a38:	681b      	ldr	r3, [r3, #0]
    4a3a:	2200      	movs	r2, #0
    4a3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    4a40:	4b27      	ldr	r3, [pc, #156]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	2200      	movs	r2, #0
    4a46:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
    4a4a:	4b25      	ldr	r3, [pc, #148]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	2200      	movs	r2, #0
    4a50:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
    4a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a54:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    4a58:	d10f      	bne.n	4a7a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
    4a5a:	4b22      	ldr	r3, [pc, #136]	; (4ae4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	1d18      	adds	r0, r3, #4
    4a60:	4b1f      	ldr	r3, [pc, #124]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	f103 0268 	add.w	r2, r3, #104	; 0x68
    4a68:	2300      	movs	r3, #0
    4a6a:	9301      	str	r3, [sp, #4]
    4a6c:	2300      	movs	r3, #0
    4a6e:	9300      	str	r3, [sp, #0]
    4a70:	4613      	mov	r3, r2
    4a72:	4a1d      	ldr	r2, [pc, #116]	; (4ae8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
    4a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4a76:	4c1d      	ldr	r4, [pc, #116]	; (4aec <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
    4a78:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	db02      	blt.n	4a86 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
    4a80:	683b      	ldr	r3, [r7, #0]
    4a82:	2b00      	cmp	r3, #0
    4a84:	da03      	bge.n	4a8e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
    4a86:	2300      	movs	r3, #0
    4a88:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
    4a8a:	2300      	movs	r3, #0
    4a8c:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen->CAN_Rx_BufferInit(
    4a8e:	4b15      	ldr	r3, [pc, #84]	; (4ae4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    4a90:	6818      	ldr	r0, [r3, #0]
    4a92:	4b13      	ldr	r3, [pc, #76]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4a94:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
    4a96:	4a16      	ldr	r2, [pc, #88]	; (4af0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
    4a98:	9202      	str	r2, [sp, #8]
    4a9a:	9301      	str	r3, [sp, #4]
    4a9c:	2300      	movs	r3, #0
    4a9e:	9300      	str	r3, [sp, #0]
    4aa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    4aa4:	687a      	ldr	r2, [r7, #4]
    4aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4aa8:	4c12      	ldr	r4, [pc, #72]	; (4af4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
    4aaa:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
    4aac:	4b0c      	ldr	r3, [pc, #48]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen->CAN_Tx_BufferInit(
    4ab6:	4b0a      	ldr	r3, [pc, #40]	; (4ae0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    4ab8:	681c      	ldr	r4, [r3, #0]
    4aba:	4b0a      	ldr	r3, [pc, #40]	; (4ae4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    4abc:	6818      	ldr	r0, [r3, #0]
    4abe:	2300      	movs	r3, #0
    4ac0:	9301      	str	r3, [sp, #4]
    4ac2:	2308      	movs	r3, #8
    4ac4:	9300      	str	r3, [sp, #0]
    4ac6:	2300      	movs	r3, #0
    4ac8:	683a      	ldr	r2, [r7, #0]
    4aca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4acc:	4d0a      	ldr	r5, [pc, #40]	; (4af8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
    4ace:	47a8      	blx	r5
    4ad0:	4603      	mov	r3, r0
    4ad2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
    4ad6:	2300      	movs	r3, #0
}
    4ad8:	4618      	mov	r0, r3
    4ada:	3718      	adds	r7, #24
    4adc:	46bd      	mov	sp, r7
    4ade:	bdb0      	pop	{r4, r5, r7, pc}
    4ae0:	20001984 	.word	0x20001984
    4ae4:	20001964 	.word	0x20001964
    4ae8:	000048f1 	.word	0x000048f1
    4aec:	00004afd 	.word	0x00004afd
    4af0:	00004789 	.word	0x00004789
    4af4:	00001999 	.word	0x00001999
    4af8:	00001a99 	.word	0x00001a99

00004afc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
    4afc:	b580      	push	{r7, lr}
    4afe:	b088      	sub	sp, #32
    4b00:	af00      	add	r7, sp, #0
    4b02:	60f8      	str	r0, [r7, #12]
    4b04:	60b9      	str	r1, [r7, #8]
    4b06:	607a      	str	r2, [r7, #4]
    4b08:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen->CO_OD_find(index);
    4b0a:	4b28      	ldr	r3, [pc, #160]	; (4bac <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	3304      	adds	r3, #4
    4b10:	68b9      	ldr	r1, [r7, #8]
    4b12:	4618      	mov	r0, r3
    4b14:	4b26      	ldr	r3, [pc, #152]	; (4bb0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
    4b16:	4798      	blx	r3
    4b18:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
    4b1a:	69bb      	ldr	r3, [r7, #24]
    4b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    4b20:	4293      	cmp	r3, r2
    4b22:	d83e      	bhi.n	4ba2 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
    4b24:	4b23      	ldr	r3, [pc, #140]	; (4bb4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4b2a:	69ba      	ldr	r2, [r7, #24]
    4b2c:	4613      	mov	r3, r2
    4b2e:	005b      	lsls	r3, r3, #1
    4b30:	4413      	add	r3, r2
    4b32:	009b      	lsls	r3, r3, #2
    4b34:	440b      	add	r3, r1
    4b36:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
    4b38:	4b1e      	ldr	r3, [pc, #120]	; (4bb4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4b3e:	69ba      	ldr	r2, [r7, #24]
    4b40:	4613      	mov	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	4413      	add	r3, r2
    4b46:	009b      	lsls	r3, r3, #2
    4b48:	440b      	add	r3, r1
    4b4a:	791b      	ldrb	r3, [r3, #4]
    4b4c:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
    4b4e:	697b      	ldr	r3, [r7, #20]
    4b50:	687a      	ldr	r2, [r7, #4]
    4b52:	601a      	str	r2, [r3, #0]
        ext->object = object;
    4b54:	697b      	ldr	r3, [r7, #20]
    4b56:	683a      	ldr	r2, [r7, #0]
    4b58:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
    4b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d01b      	beq.n	4b98 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    4b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4b64:	2b00      	cmp	r3, #0
    4b66:	d017      	beq.n	4b98 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    4b68:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    4b6c:	7cfb      	ldrb	r3, [r7, #19]
    4b6e:	429a      	cmp	r2, r3
    4b70:	d112      	bne.n	4b98 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
    4b72:	697b      	ldr	r3, [r7, #20]
    4b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4b76:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
    4b78:	2300      	movs	r3, #0
    4b7a:	61fb      	str	r3, [r7, #28]
    4b7c:	7cfa      	ldrb	r2, [r7, #19]
    4b7e:	69fb      	ldr	r3, [r7, #28]
    4b80:	429a      	cmp	r2, r3
    4b82:	d30d      	bcc.n	4ba0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
    4b84:	697b      	ldr	r3, [r7, #20]
    4b86:	689a      	ldr	r2, [r3, #8]
    4b88:	69fb      	ldr	r3, [r7, #28]
    4b8a:	4413      	add	r3, r2
    4b8c:	2200      	movs	r2, #0
    4b8e:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
    4b90:	69fb      	ldr	r3, [r7, #28]
    4b92:	3301      	adds	r3, #1
    4b94:	61fb      	str	r3, [r7, #28]
    4b96:	e7f1      	b.n	4b7c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
    4b98:	697b      	ldr	r3, [r7, #20]
    4b9a:	2200      	movs	r2, #0
    4b9c:	609a      	str	r2, [r3, #8]
        }
    }
}
    4b9e:	e000      	b.n	4ba2 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
    4ba0:	bf00      	nop
}
    4ba2:	bf00      	nop
    4ba4:	3720      	adds	r7, #32
    4ba6:	46bd      	mov	sp, r7
    4ba8:	bd80      	pop	{r7, pc}
    4baa:	bf00      	nop
    4bac:	20001964 	.word	0x20001964
    4bb0:	00004bb9 	.word	0x00004bb9
    4bb4:	20001984 	.word	0x20001984

00004bb8 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
    4bb8:	b480      	push	{r7}
    4bba:	b087      	sub	sp, #28
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	6078      	str	r0, [r7, #4]
    4bc0:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
    4bc2:	2300      	movs	r3, #0
    4bc4:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
    4bc6:	4b26      	ldr	r3, [pc, #152]	; (4c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4bcc:	3b01      	subs	r3, #1
    4bce:	613b      	str	r3, [r7, #16]
    while(min < max){
    4bd0:	697a      	ldr	r2, [r7, #20]
    4bd2:	693b      	ldr	r3, [r7, #16]
    4bd4:	429a      	cmp	r2, r3
    4bd6:	d227      	bcs.n	4c28 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
    4bd8:	697a      	ldr	r2, [r7, #20]
    4bda:	693b      	ldr	r3, [r7, #16]
    4bdc:	4413      	add	r3, r2
    4bde:	085b      	lsrs	r3, r3, #1
    4be0:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
    4be2:	4b1f      	ldr	r3, [pc, #124]	; (4c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    4be4:	681b      	ldr	r3, [r3, #0]
    4be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4be8:	68fa      	ldr	r2, [r7, #12]
    4bea:	4613      	mov	r3, r2
    4bec:	009b      	lsls	r3, r3, #2
    4bee:	4413      	add	r3, r2
    4bf0:	009b      	lsls	r3, r3, #2
    4bf2:	440b      	add	r3, r1
    4bf4:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    4bf6:	68bb      	ldr	r3, [r7, #8]
    4bf8:	681a      	ldr	r2, [r3, #0]
    4bfa:	683b      	ldr	r3, [r7, #0]
    4bfc:	429a      	cmp	r2, r3
    4bfe:	d101      	bne.n	4c04 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
    4c00:	68fb      	ldr	r3, [r7, #12]
    4c02:	e028      	b.n	4c56 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
    4c04:	68bb      	ldr	r3, [r7, #8]
    4c06:	681a      	ldr	r2, [r3, #0]
    4c08:	683b      	ldr	r3, [r7, #0]
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d908      	bls.n	4c20 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	613b      	str	r3, [r7, #16]
            if(max) max--;
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d0db      	beq.n	4bd0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    4c18:	693b      	ldr	r3, [r7, #16]
    4c1a:	3b01      	subs	r3, #1
    4c1c:	613b      	str	r3, [r7, #16]
    4c1e:	e7d7      	b.n	4bd0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
    4c20:	68fb      	ldr	r3, [r7, #12]
    4c22:	3301      	adds	r3, #1
    4c24:	617b      	str	r3, [r7, #20]
    while(min < max){
    4c26:	e7d3      	b.n	4bd0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
    4c28:	697a      	ldr	r2, [r7, #20]
    4c2a:	693b      	ldr	r3, [r7, #16]
    4c2c:	429a      	cmp	r2, r3
    4c2e:	d110      	bne.n	4c52 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
    4c30:	4b0b      	ldr	r3, [pc, #44]	; (4c60 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    4c32:	681b      	ldr	r3, [r3, #0]
    4c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4c36:	697a      	ldr	r2, [r7, #20]
    4c38:	4613      	mov	r3, r2
    4c3a:	009b      	lsls	r3, r3, #2
    4c3c:	4413      	add	r3, r2
    4c3e:	009b      	lsls	r3, r3, #2
    4c40:	440b      	add	r3, r1
    4c42:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    4c44:	68bb      	ldr	r3, [r7, #8]
    4c46:	681a      	ldr	r2, [r3, #0]
    4c48:	683b      	ldr	r3, [r7, #0]
    4c4a:	429a      	cmp	r2, r3
    4c4c:	d101      	bne.n	4c52 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
    4c4e:	697b      	ldr	r3, [r7, #20]
    4c50:	e001      	b.n	4c56 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
    4c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    4c56:	4618      	mov	r0, r3
    4c58:	371c      	adds	r7, #28
    4c5a:	46bd      	mov	sp, r7
    4c5c:	bc80      	pop	{r7}
    4c5e:	4770      	bx	lr
    4c60:	20001984 	.word	0x20001984

00004c64 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
    4c64:	b480      	push	{r7}
    4c66:	b087      	sub	sp, #28
    4c68:	af00      	add	r7, sp, #0
    4c6a:	60f8      	str	r0, [r7, #12]
    4c6c:	60b9      	str	r1, [r7, #8]
    4c6e:	4613      	mov	r3, r2
    4c70:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4c72:	4b25      	ldr	r3, [pc, #148]	; (4d08 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4c78:	68ba      	ldr	r2, [r7, #8]
    4c7a:	4613      	mov	r3, r2
    4c7c:	009b      	lsls	r3, r3, #2
    4c7e:	4413      	add	r3, r2
    4c80:	009b      	lsls	r3, r3, #2
    4c82:	440b      	add	r3, r1
    4c84:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    4c86:	68bb      	ldr	r3, [r7, #8]
    4c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4c8c:	4293      	cmp	r3, r2
    4c8e:	d101      	bne.n	4c94 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
    4c90:	2300      	movs	r3, #0
    4c92:	e034      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
    4c94:	697b      	ldr	r3, [r7, #20]
    4c96:	791b      	ldrb	r3, [r3, #4]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d108      	bne.n	4cae <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
    4c9c:	697b      	ldr	r3, [r7, #20]
    4c9e:	691b      	ldr	r3, [r3, #16]
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d101      	bne.n	4ca8 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
    4ca4:	2320      	movs	r3, #32
    4ca6:	e02a      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    4ca8:	697b      	ldr	r3, [r7, #20]
    4caa:	68db      	ldr	r3, [r3, #12]
    4cac:	e027      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
    4cae:	697b      	ldr	r3, [r7, #20]
    4cb0:	689b      	ldr	r3, [r3, #8]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d00d      	beq.n	4cd2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
    4cb6:	79fb      	ldrb	r3, [r7, #7]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d101      	bne.n	4cc0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
    4cbc:	2301      	movs	r3, #1
    4cbe:	e01e      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
    4cc0:	697b      	ldr	r3, [r7, #20]
    4cc2:	691b      	ldr	r3, [r3, #16]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d101      	bne.n	4ccc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    4cc8:	2320      	movs	r3, #32
    4cca:	e018      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    4ccc:	697b      	ldr	r3, [r7, #20]
    4cce:	68db      	ldr	r3, [r3, #12]
    4cd0:	e015      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
    4cd2:	697b      	ldr	r3, [r7, #20]
    4cd4:	6919      	ldr	r1, [r3, #16]
    4cd6:	79fa      	ldrb	r2, [r7, #7]
    4cd8:	4613      	mov	r3, r2
    4cda:	005b      	lsls	r3, r3, #1
    4cdc:	4413      	add	r3, r2
    4cde:	009b      	lsls	r3, r3, #2
    4ce0:	440b      	add	r3, r1
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	d101      	bne.n	4cec <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    4ce8:	2320      	movs	r3, #32
    4cea:	e008      	b.n	4cfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
    4cec:	697b      	ldr	r3, [r7, #20]
    4cee:	6919      	ldr	r1, [r3, #16]
    4cf0:	79fa      	ldrb	r2, [r7, #7]
    4cf2:	4613      	mov	r3, r2
    4cf4:	005b      	lsls	r3, r3, #1
    4cf6:	4413      	add	r3, r2
    4cf8:	009b      	lsls	r3, r3, #2
    4cfa:	440b      	add	r3, r1
    4cfc:	689b      	ldr	r3, [r3, #8]
        }
    }
}
    4cfe:	4618      	mov	r0, r3
    4d00:	371c      	adds	r7, #28
    4d02:	46bd      	mov	sp, r7
    4d04:	bc80      	pop	{r7}
    4d06:	4770      	bx	lr
    4d08:	20001984 	.word	0x20001984

00004d0c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
    4d0c:	b480      	push	{r7}
    4d0e:	b089      	sub	sp, #36	; 0x24
    4d10:	af00      	add	r7, sp, #0
    4d12:	60f8      	str	r0, [r7, #12]
    4d14:	60b9      	str	r1, [r7, #8]
    4d16:	4613      	mov	r3, r2
    4d18:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4d1a:	4b27      	ldr	r3, [pc, #156]	; (4db8 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4d20:	68ba      	ldr	r2, [r7, #8]
    4d22:	4613      	mov	r3, r2
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	4413      	add	r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	440b      	add	r3, r1
    4d2c:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    4d2e:	68bb      	ldr	r3, [r7, #8]
    4d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4d34:	4293      	cmp	r3, r2
    4d36:	d101      	bne.n	4d3c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
    4d38:	2300      	movs	r3, #0
    4d3a:	e037      	b.n	4dac <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    4d3c:	697b      	ldr	r3, [r7, #20]
    4d3e:	791b      	ldrb	r3, [r3, #4]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d102      	bne.n	4d4a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
    4d44:	697b      	ldr	r3, [r7, #20]
    4d46:	689b      	ldr	r3, [r3, #8]
    4d48:	e030      	b.n	4dac <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    4d4a:	697b      	ldr	r3, [r7, #20]
    4d4c:	689b      	ldr	r3, [r3, #8]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d023      	beq.n	4d9a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
    4d52:	2300      	movs	r3, #0
    4d54:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
    4d56:	697b      	ldr	r3, [r7, #20]
    4d58:	689b      	ldr	r3, [r3, #8]
    4d5a:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
    4d5c:	697b      	ldr	r3, [r7, #20]
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	f241 0203 	movw	r2, #4099	; 0x1003
    4d64:	4293      	cmp	r3, r2
    4d66:	d108      	bne.n	4d7a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
    4d68:	79fb      	ldrb	r3, [r7, #7]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d105      	bne.n	4d7a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
    4d6e:	2301      	movs	r3, #1
    4d70:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
    4d72:	69bb      	ldr	r3, [r7, #24]
    4d74:	f043 0308 	orr.w	r3, r3, #8
    4d78:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
    4d7a:	79fb      	ldrb	r3, [r7, #7]
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d10a      	bne.n	4d96 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
    4d80:	7ffb      	ldrb	r3, [r7, #31]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d107      	bne.n	4d96 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
    4d86:	69bb      	ldr	r3, [r7, #24]
    4d88:	f023 0318 	bic.w	r3, r3, #24
    4d8c:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
    4d8e:	69bb      	ldr	r3, [r7, #24]
    4d90:	f043 0304 	orr.w	r3, r3, #4
    4d94:	61bb      	str	r3, [r7, #24]
        }
        return attr;
    4d96:	69bb      	ldr	r3, [r7, #24]
    4d98:	e008      	b.n	4dac <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
    4d9a:	697b      	ldr	r3, [r7, #20]
    4d9c:	6919      	ldr	r1, [r3, #16]
    4d9e:	79fa      	ldrb	r2, [r7, #7]
    4da0:	4613      	mov	r3, r2
    4da2:	005b      	lsls	r3, r3, #1
    4da4:	4413      	add	r3, r2
    4da6:	009b      	lsls	r3, r3, #2
    4da8:	440b      	add	r3, r1
    4daa:	685b      	ldr	r3, [r3, #4]
    }
}
    4dac:	4618      	mov	r0, r3
    4dae:	3724      	adds	r7, #36	; 0x24
    4db0:	46bd      	mov	sp, r7
    4db2:	bc80      	pop	{r7}
    4db4:	4770      	bx	lr
    4db6:	bf00      	nop
    4db8:	20001984 	.word	0x20001984

00004dbc <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
    4dbc:	b480      	push	{r7}
    4dbe:	b087      	sub	sp, #28
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	60f8      	str	r0, [r7, #12]
    4dc4:	60b9      	str	r1, [r7, #8]
    4dc6:	4613      	mov	r3, r2
    4dc8:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4dca:	4b20      	ldr	r3, [pc, #128]	; (4e4c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4dd0:	68ba      	ldr	r2, [r7, #8]
    4dd2:	4613      	mov	r3, r2
    4dd4:	009b      	lsls	r3, r3, #2
    4dd6:	4413      	add	r3, r2
    4dd8:	009b      	lsls	r3, r3, #2
    4dda:	440b      	add	r3, r1
    4ddc:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    4dde:	68bb      	ldr	r3, [r7, #8]
    4de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4de4:	4293      	cmp	r3, r2
    4de6:	d101      	bne.n	4dec <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
    4de8:	2300      	movs	r3, #0
    4dea:	e02a      	b.n	4e42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    4dec:	697b      	ldr	r3, [r7, #20]
    4dee:	791b      	ldrb	r3, [r3, #4]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d102      	bne.n	4dfa <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
    4df4:	697b      	ldr	r3, [r7, #20]
    4df6:	691b      	ldr	r3, [r3, #16]
    4df8:	e023      	b.n	4e42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    4dfa:	697b      	ldr	r3, [r7, #20]
    4dfc:	689b      	ldr	r3, [r3, #8]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d016      	beq.n	4e30 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
    4e02:	79fb      	ldrb	r3, [r7, #7]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d102      	bne.n	4e0e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
    4e08:	697b      	ldr	r3, [r7, #20]
    4e0a:	3304      	adds	r3, #4
    4e0c:	e019      	b.n	4e42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
    4e0e:	697b      	ldr	r3, [r7, #20]
    4e10:	691b      	ldr	r3, [r3, #16]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d101      	bne.n	4e1a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
    4e16:	2300      	movs	r3, #0
    4e18:	e013      	b.n	4e42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
    4e1a:	697b      	ldr	r3, [r7, #20]
    4e1c:	691a      	ldr	r2, [r3, #16]
    4e1e:	79fb      	ldrb	r3, [r7, #7]
    4e20:	3b01      	subs	r3, #1
    4e22:	4619      	mov	r1, r3
    4e24:	697b      	ldr	r3, [r7, #20]
    4e26:	68db      	ldr	r3, [r3, #12]
    4e28:	fb03 f301 	mul.w	r3, r3, r1
    4e2c:	4413      	add	r3, r2
    4e2e:	e008      	b.n	4e42 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
    4e30:	697b      	ldr	r3, [r7, #20]
    4e32:	6919      	ldr	r1, [r3, #16]
    4e34:	79fa      	ldrb	r2, [r7, #7]
    4e36:	4613      	mov	r3, r2
    4e38:	005b      	lsls	r3, r3, #1
    4e3a:	4413      	add	r3, r2
    4e3c:	009b      	lsls	r3, r3, #2
    4e3e:	440b      	add	r3, r1
    4e40:	681b      	ldr	r3, [r3, #0]
    }
}
    4e42:	4618      	mov	r0, r3
    4e44:	371c      	adds	r7, #28
    4e46:	46bd      	mov	sp, r7
    4e48:	bc80      	pop	{r7}
    4e4a:	4770      	bx	lr
    4e4c:	20001984 	.word	0x20001984

00004e50 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
    4e50:	b480      	push	{r7}
    4e52:	b087      	sub	sp, #28
    4e54:	af00      	add	r7, sp, #0
    4e56:	60f8      	str	r0, [r7, #12]
    4e58:	60b9      	str	r1, [r7, #8]
    4e5a:	4613      	mov	r3, r2
    4e5c:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
    4e5e:	68bb      	ldr	r3, [r7, #8]
    4e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4e64:	4293      	cmp	r3, r2
    4e66:	d004      	beq.n	4e72 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
    4e68:	4b0c      	ldr	r3, [pc, #48]	; (4e9c <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x4c>)
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d101      	bne.n	4e76 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
    4e72:	2300      	movs	r3, #0
    4e74:	e00d      	b.n	4e92 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
    4e76:	4b09      	ldr	r3, [pc, #36]	; (4e9c <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x4c>)
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4e7c:	68ba      	ldr	r2, [r7, #8]
    4e7e:	4613      	mov	r3, r2
    4e80:	005b      	lsls	r3, r3, #1
    4e82:	4413      	add	r3, r2
    4e84:	009b      	lsls	r3, r3, #2
    4e86:	440b      	add	r3, r1
    4e88:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
    4e8a:	697b      	ldr	r3, [r7, #20]
    4e8c:	689a      	ldr	r2, [r3, #8]
    4e8e:	79fb      	ldrb	r3, [r7, #7]
    4e90:	4413      	add	r3, r2
}
    4e92:	4618      	mov	r0, r3
    4e94:	371c      	adds	r7, #28
    4e96:	46bd      	mov	sp, r7
    4e98:	bc80      	pop	{r7}
    4e9a:	4770      	bx	lr
    4e9c:	20001984 	.word	0x20001984

00004ea0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
    4ea0:	b590      	push	{r4, r7, lr}
    4ea2:	b087      	sub	sp, #28
    4ea4:	af00      	add	r7, sp, #0
    4ea6:	60f8      	str	r0, [r7, #12]
    4ea8:	60b9      	str	r1, [r7, #8]
    4eaa:	4613      	mov	r3, r2
    4eac:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
    4eae:	4b58      	ldr	r3, [pc, #352]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	68ba      	ldr	r2, [r7, #8]
    4eb4:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
    4eb6:	4b56      	ldr	r3, [pc, #344]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	79fa      	ldrb	r2, [r7, #7]
    4ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
    4ec0:	4b53      	ldr	r3, [pc, #332]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ec2:	681c      	ldr	r4, [r3, #0]
    4ec4:	68b9      	ldr	r1, [r7, #8]
    4ec6:	68f8      	ldr	r0, [r7, #12]
    4ec8:	4b52      	ldr	r3, [pc, #328]	; (5014 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
    4eca:	4798      	blx	r3
    4ecc:	4603      	mov	r3, r0
    4ece:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
    4ed0:	4b4f      	ldr	r3, [pc, #316]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4eda:	4293      	cmp	r3, r2
    4edc:	d101      	bne.n	4ee2 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
    4ede:	4b4e      	ldr	r3, [pc, #312]	; (5018 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
    4ee0:	e091      	b.n	5006 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
    4ee2:	79f9      	ldrb	r1, [r7, #7]
    4ee4:	4b4a      	ldr	r3, [pc, #296]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ee6:	681b      	ldr	r3, [r3, #0]
    4ee8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4eea:	4b49      	ldr	r3, [pc, #292]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4ef0:	4613      	mov	r3, r2
    4ef2:	009b      	lsls	r3, r3, #2
    4ef4:	4413      	add	r3, r2
    4ef6:	009b      	lsls	r3, r3, #2
    4ef8:	4403      	add	r3, r0
    4efa:	791b      	ldrb	r3, [r3, #4]
    4efc:	4299      	cmp	r1, r3
    4efe:	dd0f      	ble.n	4f20 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
    4f00:	4b43      	ldr	r3, [pc, #268]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f02:	681b      	ldr	r3, [r3, #0]
    4f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4f06:	4b42      	ldr	r3, [pc, #264]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f0c:	4613      	mov	r3, r2
    4f0e:	009b      	lsls	r3, r3, #2
    4f10:	4413      	add	r3, r2
    4f12:	009b      	lsls	r3, r3, #2
    4f14:	440b      	add	r3, r1
    4f16:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d001      	beq.n	4f20 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
    4f1c:	4b3f      	ldr	r3, [pc, #252]	; (501c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
    4f1e:	e072      	b.n	5006 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
    4f20:	4b3b      	ldr	r3, [pc, #236]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f22:	681c      	ldr	r4, [r3, #0]
    4f24:	4b3a      	ldr	r3, [pc, #232]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f2a:	79fa      	ldrb	r2, [r7, #7]
    4f2c:	4619      	mov	r1, r3
    4f2e:	68f8      	ldr	r0, [r7, #12]
    4f30:	4b3b      	ldr	r3, [pc, #236]	; (5020 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
    4f32:	4798      	blx	r3
    4f34:	4603      	mov	r3, r0
    4f36:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
    4f38:	4b35      	ldr	r3, [pc, #212]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	2200      	movs	r2, #0
    4f3e:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
    4f40:	4b33      	ldr	r3, [pc, #204]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4f46:	2b00      	cmp	r3, #0
    4f48:	d010      	beq.n	4f6c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
    4f4a:	4b31      	ldr	r3, [pc, #196]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4f50:	4b2f      	ldr	r3, [pc, #188]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f56:	4613      	mov	r3, r2
    4f58:	005b      	lsls	r3, r3, #1
    4f5a:	4413      	add	r3, r2
    4f5c:	009b      	lsls	r3, r3, #2
    4f5e:	440b      	add	r3, r1
    4f60:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
    4f62:	4b2b      	ldr	r3, [pc, #172]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	697a      	ldr	r2, [r7, #20]
    4f68:	6852      	ldr	r2, [r2, #4]
    4f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
    4f6c:	4b28      	ldr	r3, [pc, #160]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f6e:	681b      	ldr	r3, [r3, #0]
    4f70:	4a27      	ldr	r2, [pc, #156]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f72:	6812      	ldr	r2, [r2, #0]
    4f74:	3208      	adds	r2, #8
    4f76:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
    4f78:	4b25      	ldr	r3, [pc, #148]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f7a:	681c      	ldr	r4, [r3, #0]
    4f7c:	4b24      	ldr	r3, [pc, #144]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f82:	79fa      	ldrb	r2, [r7, #7]
    4f84:	4619      	mov	r1, r3
    4f86:	68f8      	ldr	r0, [r7, #12]
    4f88:	4b26      	ldr	r3, [pc, #152]	; (5024 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
    4f8a:	4798      	blx	r3
    4f8c:	4603      	mov	r3, r0
    4f8e:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
    4f90:	4b1f      	ldr	r3, [pc, #124]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f92:	681c      	ldr	r4, [r3, #0]
    4f94:	4b1e      	ldr	r3, [pc, #120]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4f96:	681b      	ldr	r3, [r3, #0]
    4f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f9a:	79fa      	ldrb	r2, [r7, #7]
    4f9c:	4619      	mov	r1, r3
    4f9e:	68f8      	ldr	r0, [r7, #12]
    4fa0:	4b21      	ldr	r3, [pc, #132]	; (5028 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
    4fa2:	4798      	blx	r3
    4fa4:	4603      	mov	r3, r0
    4fa6:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
    4fa8:	4b19      	ldr	r3, [pc, #100]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4faa:	681c      	ldr	r4, [r3, #0]
    4fac:	4b18      	ldr	r3, [pc, #96]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fae:	681b      	ldr	r3, [r3, #0]
    4fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4fb2:	79fa      	ldrb	r2, [r7, #7]
    4fb4:	4619      	mov	r1, r3
    4fb6:	68f8      	ldr	r0, [r7, #12]
    4fb8:	4b1c      	ldr	r3, [pc, #112]	; (502c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
    4fba:	4798      	blx	r3
    4fbc:	4603      	mov	r3, r0
    4fbe:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
    4fc0:	4b13      	ldr	r3, [pc, #76]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	2201      	movs	r2, #1
    4fc6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
    4fca:	4b11      	ldr	r3, [pc, #68]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fcc:	681b      	ldr	r3, [r3, #0]
    4fce:	2201      	movs	r2, #1
    4fd0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
    4fd4:	4b0e      	ldr	r3, [pc, #56]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fd6:	681a      	ldr	r2, [r3, #0]
    4fd8:	4b0d      	ldr	r3, [pc, #52]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d003      	beq.n	4fea <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
    4fe2:	4b0b      	ldr	r3, [pc, #44]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4fe8:	e000      	b.n	4fec <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
    4fea:	2300      	movs	r3, #0
    4fec:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
    4fee:	4b08      	ldr	r3, [pc, #32]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	2200      	movs	r2, #0
    4ff4:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
    4ff6:	4b06      	ldr	r3, [pc, #24]	; (5010 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4ffc:	2b20      	cmp	r3, #32
    4ffe:	d901      	bls.n	5004 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    5000:	4b0b      	ldr	r3, [pc, #44]	; (5030 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x190>)
    5002:	e000      	b.n	5006 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
    5004:	2300      	movs	r3, #0
}
    5006:	4618      	mov	r0, r3
    5008:	371c      	adds	r7, #28
    500a:	46bd      	mov	sp, r7
    500c:	bd90      	pop	{r4, r7, pc}
    500e:	bf00      	nop
    5010:	20001984 	.word	0x20001984
    5014:	00004bb9 	.word	0x00004bb9
    5018:	06020000 	.word	0x06020000
    501c:	06090011 	.word	0x06090011
    5020:	00004dbd 	.word	0x00004dbd
    5024:	00004c65 	.word	0x00004c65
    5028:	00004d0d 	.word	0x00004d0d
    502c:	00004e51 	.word	0x00004e51
    5030:	06040047 	.word	0x06040047

00005034 <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
    5034:	b580      	push	{r7, lr}
    5036:	b08a      	sub	sp, #40	; 0x28
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
    503c:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
    503e:	4b43      	ldr	r3, [pc, #268]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5044:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
    5046:	4b41      	ldr	r3, [pc, #260]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5048:	681b      	ldr	r3, [r3, #0]
    504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    504c:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
    504e:	4b3f      	ldr	r3, [pc, #252]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5054:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
    5056:	2300      	movs	r3, #0
    5058:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
    505a:	4b3c      	ldr	r3, [pc, #240]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5060:	f003 0304 	and.w	r3, r3, #4
    5064:	2b00      	cmp	r3, #0
    5066:	d101      	bne.n	506c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
    5068:	4b39      	ldr	r3, [pc, #228]	; (5150 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
    506a:	e06b      	b.n	5144 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
    506c:	4b37      	ldr	r3, [pc, #220]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    506e:	681b      	ldr	r3, [r3, #0]
    5070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5072:	2b00      	cmp	r3, #0
    5074:	d00b      	beq.n	508e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
    5076:	4b35      	ldr	r3, [pc, #212]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    507c:	4b33      	ldr	r3, [pc, #204]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5082:	4613      	mov	r3, r2
    5084:	005b      	lsls	r3, r3, #1
    5086:	4413      	add	r3, r2
    5088:	009b      	lsls	r3, r3, #2
    508a:	440b      	add	r3, r1
    508c:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
    508e:	6a3b      	ldr	r3, [r7, #32]
    5090:	2b00      	cmp	r3, #0
    5092:	d01e      	beq.n	50d2 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5094:	f3ef 8310 	mrs	r3, PRIMASK
    5098:	60bb      	str	r3, [r7, #8]
  return(result);
    509a:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
    509c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    509e:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
    50a0:	69fb      	ldr	r3, [r7, #28]
    50a2:	1e5a      	subs	r2, r3, #1
    50a4:	61fa      	str	r2, [r7, #28]
    50a6:	2b00      	cmp	r3, #0
    50a8:	bf14      	ite	ne
    50aa:	2301      	movne	r3, #1
    50ac:	2300      	moveq	r3, #0
    50ae:	b2db      	uxtb	r3, r3
    50b0:	2b00      	cmp	r3, #0
    50b2:	d008      	beq.n	50c6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
    50b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50b6:	1c5a      	adds	r2, r3, #1
    50b8:	627a      	str	r2, [r7, #36]	; 0x24
    50ba:	6a3a      	ldr	r2, [r7, #32]
    50bc:	1c51      	adds	r1, r2, #1
    50be:	6239      	str	r1, [r7, #32]
    50c0:	7812      	ldrb	r2, [r2, #0]
    50c2:	701a      	strb	r2, [r3, #0]
    50c4:	e7ec      	b.n	50a0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
    50c6:	697b      	ldr	r3, [r7, #20]
    50c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	f383 8810 	msr	PRIMASK, r3
    50d0:	e005      	b.n	50de <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
    50d2:	69bb      	ldr	r3, [r7, #24]
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d101      	bne.n	50de <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    50da:	4b1e      	ldr	r3, [pc, #120]	; (5154 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x120>)
    50dc:	e032      	b.n	5144 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
    50de:	4b1b      	ldr	r3, [pc, #108]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	2201      	movs	r2, #1
    50e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
    50e8:	69bb      	ldr	r3, [r7, #24]
    50ea:	681b      	ldr	r3, [r3, #0]
    50ec:	2b00      	cmp	r3, #0
    50ee:	d019      	beq.n	5124 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
    50f0:	69bb      	ldr	r3, [r7, #24]
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	4a15      	ldr	r2, [pc, #84]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    50f6:	6812      	ldr	r2, [r2, #0]
    50f8:	3240      	adds	r2, #64	; 0x40
    50fa:	4610      	mov	r0, r2
    50fc:	4798      	blx	r3
    50fe:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
    5100:	693b      	ldr	r3, [r7, #16]
    5102:	2b00      	cmp	r3, #0
    5104:	d001      	beq.n	510a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
    5106:	693b      	ldr	r3, [r7, #16]
    5108:	e01c      	b.n	5144 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
    510a:	4b10      	ldr	r3, [pc, #64]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5110:	2b00      	cmp	r3, #0
    5112:	d005      	beq.n	5120 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
    5114:	4b0d      	ldr	r3, [pc, #52]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    511a:	683b      	ldr	r3, [r7, #0]
    511c:	429a      	cmp	r2, r3
    511e:	d901      	bls.n	5124 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
    5120:	4b0c      	ldr	r3, [pc, #48]	; (5154 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x120>)
    5122:	e00f      	b.n	5144 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
    5124:	4b09      	ldr	r3, [pc, #36]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	4a08      	ldr	r2, [pc, #32]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    512a:	6812      	ldr	r2, [r2, #0]
    512c:	6e51      	ldr	r1, [r2, #100]	; 0x64
    512e:	4a07      	ldr	r2, [pc, #28]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    5130:	6812      	ldr	r2, [r2, #0]
    5132:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    5134:	440a      	add	r2, r1
    5136:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
    5138:	4b04      	ldr	r3, [pc, #16]	; (514c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	2200      	movs	r2, #0
    513e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
    5142:	2300      	movs	r3, #0
}
    5144:	4618      	mov	r0, r3
    5146:	3728      	adds	r7, #40	; 0x28
    5148:	46bd      	mov	sp, r7
    514a:	bd80      	pop	{r7, pc}
    514c:	20001984 	.word	0x20001984
    5150:	06010001 	.word	0x06010001
    5154:	06040047 	.word	0x06040047

00005158 <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
    5158:	b580      	push	{r7, lr}
    515a:	b08a      	sub	sp, #40	; 0x28
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
    5160:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
    5162:	4b48      	ldr	r3, [pc, #288]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5164:	681b      	ldr	r3, [r3, #0]
    5166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5168:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
    516a:	4b46      	ldr	r3, [pc, #280]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5170:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
    5172:	2300      	movs	r3, #0
    5174:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
    5176:	4b43      	ldr	r3, [pc, #268]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    517c:	f003 0308 	and.w	r3, r3, #8
    5180:	2b00      	cmp	r3, #0
    5182:	d101      	bne.n	5188 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
    5184:	4b40      	ldr	r3, [pc, #256]	; (5288 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
    5186:	e079      	b.n	527c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
    5188:	6a3b      	ldr	r3, [r7, #32]
    518a:	2b00      	cmp	r3, #0
    518c:	d104      	bne.n	5198 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
    518e:	4b3d      	ldr	r3, [pc, #244]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	683a      	ldr	r2, [r7, #0]
    5194:	64da      	str	r2, [r3, #76]	; 0x4c
    5196:	e007      	b.n	51a8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
    5198:	4b3a      	ldr	r3, [pc, #232]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    519e:	683b      	ldr	r3, [r7, #0]
    51a0:	429a      	cmp	r2, r3
    51a2:	d001      	beq.n	51a8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
    51a4:	4b39      	ldr	r3, [pc, #228]	; (528c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x134>)
    51a6:	e069      	b.n	527c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
    51a8:	4b36      	ldr	r3, [pc, #216]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	2200      	movs	r2, #0
    51ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
    51b2:	4b34      	ldr	r3, [pc, #208]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51b8:	2b00      	cmp	r3, #0
    51ba:	d01c      	beq.n	51f6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
    51bc:	4b31      	ldr	r3, [pc, #196]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    51c2:	4b30      	ldr	r3, [pc, #192]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    51c8:	4613      	mov	r3, r2
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	4413      	add	r3, r2
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	440b      	add	r3, r1
    51d2:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
    51d4:	69bb      	ldr	r3, [r7, #24]
    51d6:	681b      	ldr	r3, [r3, #0]
    51d8:	2b00      	cmp	r3, #0
    51da:	d00c      	beq.n	51f6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
    51dc:	69bb      	ldr	r3, [r7, #24]
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	4a28      	ldr	r2, [pc, #160]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51e2:	6812      	ldr	r2, [r2, #0]
    51e4:	3240      	adds	r2, #64	; 0x40
    51e6:	4610      	mov	r0, r2
    51e8:	4798      	blx	r3
    51ea:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
    51ec:	697b      	ldr	r3, [r7, #20]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d001      	beq.n	51f6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
    51f2:	697b      	ldr	r3, [r7, #20]
    51f4:	e042      	b.n	527c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
    51f6:	4b23      	ldr	r3, [pc, #140]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	4a22      	ldr	r2, [pc, #136]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    51fc:	6812      	ldr	r2, [r2, #0]
    51fe:	6e51      	ldr	r1, [r2, #100]	; 0x64
    5200:	4a20      	ldr	r2, [pc, #128]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5202:	6812      	ldr	r2, [r2, #0]
    5204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    5206:	440a      	add	r2, r1
    5208:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
    520a:	4b1e      	ldr	r3, [pc, #120]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	2200      	movs	r2, #0
    5210:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
    5214:	4b1b      	ldr	r3, [pc, #108]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    521a:	f241 0203 	movw	r2, #4099	; 0x1003
    521e:	4293      	cmp	r3, r2
    5220:	d107      	bne.n	5232 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
    5222:	4b18      	ldr	r3, [pc, #96]	; (5284 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    522a:	2b00      	cmp	r3, #0
    522c:	d101      	bne.n	5232 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
    522e:	2301      	movs	r3, #1
    5230:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
    5232:	6a3b      	ldr	r3, [r7, #32]
    5234:	2b00      	cmp	r3, #0
    5236:	d020      	beq.n	527a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
    5238:	7ffb      	ldrb	r3, [r7, #31]
    523a:	2b00      	cmp	r3, #0
    523c:	d11d      	bne.n	527a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    523e:	f3ef 8310 	mrs	r3, PRIMASK
    5242:	60bb      	str	r3, [r7, #8]
  return(result);
    5244:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
    5246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    5248:	b672      	cpsid	i
        while(length--){
    524a:	683b      	ldr	r3, [r7, #0]
    524c:	1e5a      	subs	r2, r3, #1
    524e:	603a      	str	r2, [r7, #0]
    5250:	2b00      	cmp	r3, #0
    5252:	bf14      	ite	ne
    5254:	2301      	movne	r3, #1
    5256:	2300      	moveq	r3, #0
    5258:	b2db      	uxtb	r3, r3
    525a:	2b00      	cmp	r3, #0
    525c:	d008      	beq.n	5270 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
    525e:	6a3b      	ldr	r3, [r7, #32]
    5260:	1c5a      	adds	r2, r3, #1
    5262:	623a      	str	r2, [r7, #32]
    5264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5266:	1c51      	adds	r1, r2, #1
    5268:	6279      	str	r1, [r7, #36]	; 0x24
    526a:	7812      	ldrb	r2, [r2, #0]
    526c:	701a      	strb	r2, [r3, #0]
        while(length--){
    526e:	e7ec      	b.n	524a <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
    5270:	693b      	ldr	r3, [r7, #16]
    5272:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5274:	68fb      	ldr	r3, [r7, #12]
    5276:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
    527a:	2300      	movs	r3, #0
}
    527c:	4618      	mov	r0, r3
    527e:	3728      	adds	r7, #40	; 0x28
    5280:	46bd      	mov	sp, r7
    5282:	bd80      	pop	{r7, pc}
    5284:	20001984 	.word	0x20001984
    5288:	06010002 	.word	0x06010002
    528c:	06070010 	.word	0x06070010

00005290 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
    5290:	b580      	push	{r7, lr}
    5292:	b082      	sub	sp, #8
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
    5298:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52a0:	2280      	movs	r2, #128	; 0x80
    52a2:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52aa:	687a      	ldr	r2, [r7, #4]
    52ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
    52ae:	b2d2      	uxtb	r2, r2
    52b0:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
    52b2:	687b      	ldr	r3, [r7, #4]
    52b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52b8:	687a      	ldr	r2, [r7, #4]
    52ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
    52bc:	0a12      	lsrs	r2, r2, #8
    52be:	b2d2      	uxtb	r2, r2
    52c0:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
    52c2:	687b      	ldr	r3, [r7, #4]
    52c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52c8:	687a      	ldr	r2, [r7, #4]
    52ca:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
    52ce:	721a      	strb	r2, [r3, #8]
   canopen->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
    52d0:	4b0f      	ldr	r3, [pc, #60]	; (5310 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	1d18      	adds	r0, r3, #4
    52d6:	687b      	ldr	r3, [r7, #4]
    52d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    52dc:	3309      	adds	r3, #9
    52de:	463a      	mov	r2, r7
    52e0:	4619      	mov	r1, r3
    52e2:	4b0c      	ldr	r3, [pc, #48]	; (5314 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
    52e4:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	2200      	movs	r2, #0
    52ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	2200      	movs	r2, #0
    52f2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    canopen->CAN_Send(SDO->CANtxBuff);
    52f6:	4b06      	ldr	r3, [pc, #24]	; (5310 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
    52f8:	681a      	ldr	r2, [r3, #0]
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5300:	4619      	mov	r1, r3
    5302:	4610      	mov	r0, r2
    5304:	4b04      	ldr	r3, [pc, #16]	; (5318 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
    5306:	4798      	blx	r3
}
    5308:	bf00      	nop
    530a:	3708      	adds	r7, #8
    530c:	46bd      	mov	sp, r7
    530e:	bd80      	pop	{r7, pc}
    5310:	20001964 	.word	0x20001964
    5314:	00004745 	.word	0x00004745
    5318:	00001b45 	.word	0x00001b45

0000531c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
    531c:	b5b0      	push	{r4, r5, r7, lr}
    531e:	b092      	sub	sp, #72	; 0x48
    5320:	af00      	add	r7, sp, #0
    5322:	60f8      	str	r0, [r7, #12]
    5324:	607a      	str	r2, [r7, #4]
    5326:	603b      	str	r3, [r7, #0]
    5328:	460b      	mov	r3, r1
    532a:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
    532c:	2300      	movs	r3, #0
    532e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
    5332:	2300      	movs	r3, #0
    5334:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
    5338:	2300      	movs	r3, #0
    533a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
    533e:	4ba7      	ldr	r3, [pc, #668]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5340:	681b      	ldr	r3, [r3, #0]
    5342:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    5346:	2b00      	cmp	r3, #0
    5348:	d108      	bne.n	535c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
    534a:	4ba4      	ldr	r3, [pc, #656]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    5352:	2b00      	cmp	r3, #0
    5354:	d102      	bne.n	535c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
    5356:	2300      	movs	r3, #0
    5358:	f001 b995 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
    535c:	7afb      	ldrb	r3, [r7, #11]
    535e:	2b00      	cmp	r3, #0
    5360:	d10c      	bne.n	537c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
    5362:	4b9e      	ldr	r3, [pc, #632]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	2200      	movs	r2, #0
    5368:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
    536c:	4b9b      	ldr	r3, [pc, #620]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    536e:	681b      	ldr	r3, [r3, #0]
    5370:	2200      	movs	r2, #0
    5372:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
    5376:	2300      	movs	r3, #0
    5378:	f001 b985 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
    537c:	4b97      	ldr	r3, [pc, #604]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    537e:	681b      	ldr	r3, [r3, #0]
    5380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5384:	7b5b      	ldrb	r3, [r3, #13]
    5386:	b2db      	uxtb	r3, r3
    5388:	2b00      	cmp	r3, #0
    538a:	d10d      	bne.n	53a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
    538c:	4b93      	ldr	r3, [pc, #588]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    538e:	681b      	ldr	r3, [r3, #0]
    5390:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    5394:	2b00      	cmp	r3, #0
    5396:	d105      	bne.n	53a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
    5398:	4b90      	ldr	r3, [pc, #576]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    53a0:	2b26      	cmp	r3, #38	; 0x26
    53a2:	d101      	bne.n	53a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
    53a4:	2301      	movs	r3, #1
    53a6:	e000      	b.n	53aa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
    53a8:	2300      	movs	r3, #0
    53aa:	2b00      	cmp	r3, #0
    53ac:	f000 80eb 	beq.w	5586 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
    53b0:	4b8a      	ldr	r3, [pc, #552]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	115b      	asrs	r3, r3, #5
    53b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
    53bc:	4b87      	ldr	r3, [pc, #540]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    53c4:	2b26      	cmp	r3, #38	; 0x26
    53c6:	d003      	beq.n	53d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
    53c8:	4b84      	ldr	r3, [pc, #528]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2200      	movs	r2, #0
    53ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
    53d0:	4b82      	ldr	r3, [pc, #520]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    53d8:	4b80      	ldr	r3, [pc, #512]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    53e0:	4a7e      	ldr	r2, [pc, #504]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53e2:	6812      	ldr	r2, [r2, #0]
    53e4:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    53e8:	497c      	ldr	r1, [pc, #496]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    53ea:	6809      	ldr	r1, [r1, #0]
    53ec:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
    53f0:	2400      	movs	r4, #0
    53f2:	720c      	strb	r4, [r1, #8]
    53f4:	7a09      	ldrb	r1, [r1, #8]
    53f6:	71d1      	strb	r1, [r2, #7]
    53f8:	79d2      	ldrb	r2, [r2, #7]
    53fa:	719a      	strb	r2, [r3, #6]
    53fc:	799b      	ldrb	r3, [r3, #6]
    53fe:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
    5400:	4b76      	ldr	r3, [pc, #472]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    5408:	4b74      	ldr	r3, [pc, #464]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5410:	4a72      	ldr	r2, [pc, #456]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5412:	6812      	ldr	r2, [r2, #0]
    5414:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    5418:	4970      	ldr	r1, [pc, #448]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    541a:	6809      	ldr	r1, [r1, #0]
    541c:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
    5420:	2400      	movs	r4, #0
    5422:	730c      	strb	r4, [r1, #12]
    5424:	7b09      	ldrb	r1, [r1, #12]
    5426:	72d1      	strb	r1, [r2, #11]
    5428:	7ad2      	ldrb	r2, [r2, #11]
    542a:	729a      	strb	r2, [r3, #10]
    542c:	7a9b      	ldrb	r3, [r3, #10]
    542e:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
    5430:	4b6a      	ldr	r3, [pc, #424]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    5438:	2b00      	cmp	r3, #0
    543a:	d012      	beq.n	5462 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
    543c:	4b67      	ldr	r3, [pc, #412]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	781b      	ldrb	r3, [r3, #0]
    5442:	2b04      	cmp	r3, #4
    5444:	d10d      	bne.n	5462 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
    5446:	4b65      	ldr	r3, [pc, #404]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	2200      	movs	r2, #0
    544c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
    5450:	4b62      	ldr	r3, [pc, #392]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	2200      	movs	r2, #0
    5456:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
    545a:	f04f 33ff 	mov.w	r3, #4294967295
    545e:	f001 b912 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
    5462:	4b5e      	ldr	r3, [pc, #376]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    546a:	2b00      	cmp	r3, #0
    546c:	d006      	beq.n	547c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
    546e:	4b5b      	ldr	r3, [pc, #364]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    5476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    547a:	e084      	b.n	5586 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
    547c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5480:	2b01      	cmp	r3, #1
    5482:	d015      	beq.n	54b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
    5484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5488:	2b02      	cmp	r3, #2
    548a:	d011      	beq.n	54b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
    548c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5490:	2b06      	cmp	r3, #6
    5492:	d00d      	beq.n	54b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
    5494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5498:	2b05      	cmp	r3, #5
    549a:	d009      	beq.n	54b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    549c:	4b4f      	ldr	r3, [pc, #316]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	494f      	ldr	r1, [pc, #316]	; (55e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c4>)
    54a2:	4618      	mov	r0, r3
    54a4:	4b4f      	ldr	r3, [pc, #316]	; (55e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
    54a6:	4798      	blx	r3
                return -1;
    54a8:	f04f 33ff 	mov.w	r3, #4294967295
    54ac:	f001 b8eb 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
    54b0:	4b4a      	ldr	r3, [pc, #296]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	789b      	ldrb	r3, [r3, #2]
    54b6:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
    54b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    54ba:	021b      	lsls	r3, r3, #8
    54bc:	4a47      	ldr	r2, [pc, #284]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	7852      	ldrb	r2, [r2, #1]
    54c2:	4313      	orrs	r3, r2
    54c4:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
    54c6:	4b45      	ldr	r3, [pc, #276]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	78db      	ldrb	r3, [r3, #3]
    54cc:	461a      	mov	r2, r3
    54ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
    54d0:	68f8      	ldr	r0, [r7, #12]
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2cc>)
    54d4:	4798      	blx	r3
    54d6:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
    54d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54da:	2b00      	cmp	r3, #0
    54dc:	d009      	beq.n	54f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
    54de:	4b3f      	ldr	r3, [pc, #252]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    54e4:	4618      	mov	r0, r3
    54e6:	4b3f      	ldr	r3, [pc, #252]	; (55e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
    54e8:	4798      	blx	r3
                return -1;
    54ea:	f04f 33ff 	mov.w	r3, #4294967295
    54ee:	f001 b8ca 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
    54f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    54f6:	2b01      	cmp	r3, #1
    54f8:	d003      	beq.n	5502 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
    54fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    54fe:	2b06      	cmp	r3, #6
    5500:	d11c      	bne.n	553c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
    5502:	4b36      	ldr	r3, [pc, #216]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5504:	681b      	ldr	r3, [r3, #0]
    5506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5508:	f003 0308 	and.w	r3, r3, #8
    550c:	2b00      	cmp	r3, #0
    550e:	d109      	bne.n	5524 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
    5510:	4b32      	ldr	r3, [pc, #200]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	4935      	ldr	r1, [pc, #212]	; (55ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d0>)
    5516:	4618      	mov	r0, r3
    5518:	4b32      	ldr	r3, [pc, #200]	; (55e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
    551a:	4798      	blx	r3
                    return -1;
    551c:	f04f 33ff 	mov.w	r3, #4294967295
    5520:	f001 b8b1 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
    5524:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5528:	2b01      	cmp	r3, #1
    552a:	d103      	bne.n	5534 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
    552c:	2311      	movs	r3, #17
    552e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
    5532:	e028      	b.n	5586 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
    5534:	2314      	movs	r3, #20
    5536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
    553a:	e024      	b.n	5586 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    553c:	2120      	movs	r1, #32
    553e:	68f8      	ldr	r0, [r7, #12]
    5540:	4b2b      	ldr	r3, [pc, #172]	; (55f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d4>)
    5542:	4798      	blx	r3
    5544:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
    5546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5548:	2b00      	cmp	r3, #0
    554a:	d009      	beq.n	5560 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
    554c:	4b23      	ldr	r3, [pc, #140]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5552:	4618      	mov	r0, r3
    5554:	4b23      	ldr	r3, [pc, #140]	; (55e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
    5556:	4798      	blx	r3
                    return -1;
    5558:	f04f 33ff 	mov.w	r3, #4294967295
    555c:	f001 b893 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
    5560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    5564:	2b05      	cmp	r3, #5
    5566:	d10b      	bne.n	5580 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
    5568:	4b1c      	ldr	r3, [pc, #112]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    556e:	4a1b      	ldr	r2, [pc, #108]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5570:	6812      	ldr	r2, [r2, #0]
    5572:	7952      	ldrb	r2, [r2, #5]
    5574:	4293      	cmp	r3, r2
    5576:	d903      	bls.n	5580 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
    5578:	2324      	movs	r3, #36	; 0x24
    557a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    557e:	e002      	b.n	5586 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
    5580:	2321      	movs	r3, #33	; 0x21
    5582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
    5586:	4b15      	ldr	r3, [pc, #84]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    558c:	683b      	ldr	r3, [r7, #0]
    558e:	429a      	cmp	r2, r3
    5590:	d207      	bcs.n	55a2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
    5592:	4b12      	ldr	r3, [pc, #72]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	4a11      	ldr	r2, [pc, #68]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    5598:	6812      	ldr	r2, [r2, #0]
    559a:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    559c:	687a      	ldr	r2, [r7, #4]
    559e:	440a      	add	r2, r1
    55a0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
    55a2:	4b0e      	ldr	r3, [pc, #56]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    55a8:	683b      	ldr	r3, [r7, #0]
    55aa:	429a      	cmp	r2, r3
    55ac:	d336      	bcc.n	561c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x300>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
    55ae:	4b0b      	ldr	r3, [pc, #44]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    55b6:	2b15      	cmp	r3, #21
    55b8:	d11c      	bne.n	55f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
    55ba:	4b08      	ldr	r3, [pc, #32]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    55c2:	2b00      	cmp	r3, #0
    55c4:	d016      	beq.n	55f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
    55c6:	4b05      	ldr	r3, [pc, #20]	; (55dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    55ce:	7b5b      	ldrb	r3, [r3, #13]
    55d0:	b2db      	uxtb	r3, r3
    55d2:	2b00      	cmp	r3, #0
    55d4:	d10e      	bne.n	55f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
    55d6:	2301      	movs	r3, #1
    55d8:	e00d      	b.n	55f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2da>
    55da:	bf00      	nop
    55dc:	20001984 	.word	0x20001984
    55e0:	05040001 	.word	0x05040001
    55e4:	00005291 	.word	0x00005291
    55e8:	00004ea1 	.word	0x00004ea1
    55ec:	06010002 	.word	0x06010002
    55f0:	00005035 	.word	0x00005035
    55f4:	2300      	movs	r3, #0
    55f6:	2b00      	cmp	r3, #0
    55f8:	d006      	beq.n	5608 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2ec>
            timeoutSubblockDownolad = true;
    55fa:	2301      	movs	r3, #1
    55fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    5600:	2316      	movs	r3, #22
    5602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    5606:	e009      	b.n	561c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x300>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
    5608:	4ba3      	ldr	r3, [pc, #652]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    560a:	681b      	ldr	r3, [r3, #0]
    560c:	49a3      	ldr	r1, [pc, #652]	; (589c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x580>)
    560e:	4618      	mov	r0, r3
    5610:	4ba3      	ldr	r3, [pc, #652]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    5612:	4798      	blx	r3
            return -1;
    5614:	f04f 33ff 	mov.w	r3, #4294967295
    5618:	f001 b835 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
    561c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    5620:	2b00      	cmp	r3, #0
    5622:	d102      	bne.n	562a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x30e>
        return 0;
    5624:	2300      	movs	r3, #0
    5626:	f001 b82e 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
    562a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    562e:	3b11      	subs	r3, #17
    5630:	2b16      	cmp	r3, #22
    5632:	f201 8002 	bhi.w	663a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131e>
    5636:	a201      	add	r2, pc, #4	; (adr r2, 563c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x320>)
    5638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    563c:	00005699 	.word	0x00005699
    5640:	000057fb 	.word	0x000057fb
    5644:	0000663b 	.word	0x0000663b
    5648:	000059bf 	.word	0x000059bf
    564c:	0000664d 	.word	0x0000664d
    5650:	00005ad5 	.word	0x00005ad5
    5654:	00005c4d 	.word	0x00005c4d
    5658:	0000663b 	.word	0x0000663b
    565c:	0000663b 	.word	0x0000663b
    5660:	0000663b 	.word	0x0000663b
    5664:	0000663b 	.word	0x0000663b
    5668:	0000663b 	.word	0x0000663b
    566c:	0000663b 	.word	0x0000663b
    5670:	0000663b 	.word	0x0000663b
    5674:	0000663b 	.word	0x0000663b
    5678:	0000663b 	.word	0x0000663b
    567c:	00005d65 	.word	0x00005d65
    5680:	00005e71 	.word	0x00005e71
    5684:	0000663b 	.word	0x0000663b
    5688:	000060a9 	.word	0x000060a9
    568c:	000061f5 	.word	0x000061f5
    5690:	0000625d 	.word	0x0000625d
    5694:	0000660f 	.word	0x0000660f
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
    5698:	4b7f      	ldr	r3, [pc, #508]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56a0:	2260      	movs	r2, #96	; 0x60
    56a2:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    56a4:	4b7c      	ldr	r3, [pc, #496]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56ac:	4a7a      	ldr	r2, [pc, #488]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56ae:	6812      	ldr	r2, [r2, #0]
    56b0:	7852      	ldrb	r2, [r2, #1]
    56b2:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    56b4:	4b78      	ldr	r3, [pc, #480]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56bc:	4a76      	ldr	r2, [pc, #472]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56be:	6812      	ldr	r2, [r2, #0]
    56c0:	7892      	ldrb	r2, [r2, #2]
    56c2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    56c4:	4b74      	ldr	r3, [pc, #464]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    56cc:	4a72      	ldr	r2, [pc, #456]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56ce:	6812      	ldr	r2, [r2, #0]
    56d0:	78d2      	ldrb	r2, [r2, #3]
    56d2:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
    56d4:	4b70      	ldr	r3, [pc, #448]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	f003 0302 	and.w	r3, r3, #2
    56de:	2b00      	cmp	r3, #0
    56e0:	d04f      	beq.n	5782 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
    56e2:	4b6d      	ldr	r3, [pc, #436]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	781b      	ldrb	r3, [r3, #0]
    56e8:	f003 0301 	and.w	r3, r3, #1
    56ec:	2b00      	cmp	r3, #0
    56ee:	d009      	beq.n	5704 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
    56f0:	4b69      	ldr	r3, [pc, #420]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	109b      	asrs	r3, r3, #2
    56f8:	f003 0303 	and.w	r3, r3, #3
    56fc:	f1c3 0304 	rsb	r3, r3, #4
    5700:	643b      	str	r3, [r7, #64]	; 0x40
    5702:	e003      	b.n	570c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
    5704:	4b64      	ldr	r3, [pc, #400]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    570a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
    570c:	4b62      	ldr	r3, [pc, #392]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5712:	4a61      	ldr	r2, [pc, #388]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5714:	6812      	ldr	r2, [r2, #0]
    5716:	7912      	ldrb	r2, [r2, #4]
    5718:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
    571a:	4b5f      	ldr	r3, [pc, #380]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5720:	3301      	adds	r3, #1
    5722:	4a5d      	ldr	r2, [pc, #372]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5724:	6812      	ldr	r2, [r2, #0]
    5726:	7952      	ldrb	r2, [r2, #5]
    5728:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
    572a:	4b5b      	ldr	r3, [pc, #364]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5730:	3302      	adds	r3, #2
    5732:	4a59      	ldr	r2, [pc, #356]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5734:	6812      	ldr	r2, [r2, #0]
    5736:	7992      	ldrb	r2, [r2, #6]
    5738:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
    573a:	4b57      	ldr	r3, [pc, #348]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5740:	3303      	adds	r3, #3
    5742:	4a55      	ldr	r2, [pc, #340]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5744:	6812      	ldr	r2, [r2, #0]
    5746:	79d2      	ldrb	r2, [r2, #7]
    5748:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
    574a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	4b55      	ldr	r3, [pc, #340]	; (58a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x588>)
    5750:	4798      	blx	r3
    5752:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    5754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5756:	2b00      	cmp	r3, #0
    5758:	d009      	beq.n	576e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
    575a:	4b4f      	ldr	r3, [pc, #316]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5760:	4618      	mov	r0, r3
    5762:	4b4f      	ldr	r3, [pc, #316]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    5764:	4798      	blx	r3
                    return -1;
    5766:	f04f 33ff 	mov.w	r3, #4294967295
    576a:	f000 bf8c 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
    576e:	4b4a      	ldr	r3, [pc, #296]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5770:	681b      	ldr	r3, [r3, #0]
    5772:	2200      	movs	r2, #0
    5774:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
    5778:	2301      	movs	r3, #1
    577a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
    577e:	f000 bf66 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                if((SDO->CANrxData[0]&0x01) != 0){
    5782:	4b45      	ldr	r3, [pc, #276]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	781b      	ldrb	r3, [r3, #0]
    5788:	f003 0301 	and.w	r3, r3, #1
    578c:	2b00      	cmp	r3, #0
    578e:	d021      	beq.n	57d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
    5790:	4b41      	ldr	r3, [pc, #260]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	1d1a      	adds	r2, r3, #4
    5796:	f107 0320 	add.w	r3, r7, #32
    579a:	4619      	mov	r1, r3
    579c:	68f8      	ldr	r0, [r7, #12]
    579e:	4b42      	ldr	r3, [pc, #264]	; (58a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x58c>)
    57a0:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
    57a2:	4b3d      	ldr	r3, [pc, #244]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57a4:	681b      	ldr	r3, [r3, #0]
    57a6:	6a3a      	ldr	r2, [r7, #32]
    57a8:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
    57aa:	4b3b      	ldr	r3, [pc, #236]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    57b0:	6a3b      	ldr	r3, [r7, #32]
    57b2:	429a      	cmp	r2, r3
    57b4:	d00e      	beq.n	57d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
    57b6:	4b38      	ldr	r3, [pc, #224]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    57bc:	2b00      	cmp	r3, #0
    57be:	d009      	beq.n	57d4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
    57c0:	4b35      	ldr	r3, [pc, #212]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	4939      	ldr	r1, [pc, #228]	; (58ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x590>)
    57c6:	4618      	mov	r0, r3
    57c8:	4b35      	ldr	r3, [pc, #212]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    57ca:	4798      	blx	r3
                        return -1;
    57cc:	f04f 33ff 	mov.w	r3, #4294967295
    57d0:	f000 bf59 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                SDO->bufferOffset = 0;
    57d4:	4b30      	ldr	r3, [pc, #192]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	2200      	movs	r2, #0
    57da:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
    57dc:	4b2e      	ldr	r3, [pc, #184]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57de:	681b      	ldr	r3, [r3, #0]
    57e0:	2200      	movs	r2, #0
    57e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
    57e6:	4b2c      	ldr	r3, [pc, #176]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	2212      	movs	r2, #18
    57ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
    57f0:	2301      	movs	r3, #1
    57f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    57f6:	f000 bf2a 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
    57fa:	4b27      	ldr	r3, [pc, #156]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    5804:	2b00      	cmp	r3, #0
    5806:	d009      	beq.n	581c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5808:	4b23      	ldr	r3, [pc, #140]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	4928      	ldr	r1, [pc, #160]	; (58b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x594>)
    580e:	4618      	mov	r0, r3
    5810:	4b23      	ldr	r3, [pc, #140]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    5812:	4798      	blx	r3
                return -1;
    5814:	f04f 33ff 	mov.w	r3, #4294967295
    5818:	f000 bf35 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
    581c:	4b1e      	ldr	r3, [pc, #120]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    581e:	681b      	ldr	r3, [r3, #0]
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	f003 0310 	and.w	r3, r3, #16
    5826:	2b00      	cmp	r3, #0
    5828:	d001      	beq.n	582e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
    582a:	2301      	movs	r3, #1
    582c:	e000      	b.n	5830 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
    582e:	2300      	movs	r3, #0
    5830:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
    5832:	4b19      	ldr	r3, [pc, #100]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    583a:	461a      	mov	r2, r3
    583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    583e:	429a      	cmp	r2, r3
    5840:	d009      	beq.n	5856 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
    5842:	4b15      	ldr	r3, [pc, #84]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	491b      	ldr	r1, [pc, #108]	; (58b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x598>)
    5848:	4618      	mov	r0, r3
    584a:	4b15      	ldr	r3, [pc, #84]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    584c:	4798      	blx	r3
                return -1;
    584e:	f04f 33ff 	mov.w	r3, #4294967295
    5852:	f000 bf18 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
    5856:	4b10      	ldr	r3, [pc, #64]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	105b      	asrs	r3, r3, #1
    585e:	43db      	mvns	r3, r3
    5860:	f003 0307 	and.w	r3, r3, #7
    5864:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
    5866:	4b0c      	ldr	r3, [pc, #48]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    586c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    586e:	441a      	add	r2, r3
    5870:	4b09      	ldr	r3, [pc, #36]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5876:	429a      	cmp	r2, r3
    5878:	d942      	bls.n	5900 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5e4>
                if(SDO->ODF_arg.ODdataStorage != 0){
    587a:	4b07      	ldr	r3, [pc, #28]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5880:	2b00      	cmp	r3, #0
    5882:	d01b      	beq.n	58bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5a0>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
    5884:	4b04      	ldr	r3, [pc, #16]	; (5898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	490b      	ldr	r1, [pc, #44]	; (58b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x59c>)
    588a:	4618      	mov	r0, r3
    588c:	4b04      	ldr	r3, [pc, #16]	; (58a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
    588e:	4798      	blx	r3
                    return -1;
    5890:	f04f 33ff 	mov.w	r3, #4294967295
    5894:	f000 bef7 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    5898:	20001984 	.word	0x20001984
    589c:	05040000 	.word	0x05040000
    58a0:	00005291 	.word	0x00005291
    58a4:	00005159 	.word	0x00005159
    58a8:	00004745 	.word	0x00004745
    58ac:	06070010 	.word	0x06070010
    58b0:	05040001 	.word	0x05040001
    58b4:	05030000 	.word	0x05030000
    58b8:	06070012 	.word	0x06070012
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
    58bc:	4b8b      	ldr	r3, [pc, #556]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	2200      	movs	r2, #0
    58c2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    58c6:	4b89      	ldr	r3, [pc, #548]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    58cc:	4619      	mov	r1, r3
    58ce:	68f8      	ldr	r0, [r7, #12]
    58d0:	4b87      	ldr	r3, [pc, #540]	; (5af0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d4>)
    58d2:	4798      	blx	r3
    58d4:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
    58d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    58d8:	2b00      	cmp	r3, #0
    58da:	d009      	beq.n	58f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5d4>
                        CO_SDO_abort(SDO, abortCode);
    58dc:	4b83      	ldr	r3, [pc, #524]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    58e2:	4618      	mov	r0, r3
    58e4:	4b83      	ldr	r3, [pc, #524]	; (5af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
    58e6:	4798      	blx	r3
                        return -1;
    58e8:	f04f 33ff 	mov.w	r3, #4294967295
    58ec:	f000 becb 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
    58f0:	4b7e      	ldr	r3, [pc, #504]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	2220      	movs	r2, #32
    58f6:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
    58f8:	4b7c      	ldr	r3, [pc, #496]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	2200      	movs	r2, #0
    58fe:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
    5900:	2300      	movs	r3, #0
    5902:	63fb      	str	r3, [r7, #60]	; 0x3c
    5904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5908:	429a      	cmp	r2, r3
    590a:	d212      	bcs.n	5932 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x616>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
    590c:	4b77      	ldr	r3, [pc, #476]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	6c59      	ldr	r1, [r3, #68]	; 0x44
    5912:	4b76      	ldr	r3, [pc, #472]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5914:	681a      	ldr	r2, [r3, #0]
    5916:	6b93      	ldr	r3, [r2, #56]	; 0x38
    5918:	1c58      	adds	r0, r3, #1
    591a:	6390      	str	r0, [r2, #56]	; 0x38
    591c:	440b      	add	r3, r1
    591e:	4a73      	ldr	r2, [pc, #460]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5920:	6811      	ldr	r1, [r2, #0]
    5922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5924:	3201      	adds	r2, #1
    5926:	5c8a      	ldrb	r2, [r1, r2]
    5928:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
    592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    592c:	3301      	adds	r3, #1
    592e:	63fb      	str	r3, [r7, #60]	; 0x3c
    5930:	e7e8      	b.n	5904 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5e8>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
    5932:	4b6e      	ldr	r3, [pc, #440]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	781b      	ldrb	r3, [r3, #0]
    5938:	f003 0301 	and.w	r3, r3, #1
    593c:	2b00      	cmp	r3, #0
    593e:	d01e      	beq.n	597e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x662>
                SDO->ODF_arg.lastSegment = true;
    5940:	4b6a      	ldr	r3, [pc, #424]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	2201      	movs	r2, #1
    5946:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    594a:	4b68      	ldr	r3, [pc, #416]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5950:	4619      	mov	r1, r3
    5952:	68f8      	ldr	r0, [r7, #12]
    5954:	4b66      	ldr	r3, [pc, #408]	; (5af0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d4>)
    5956:	4798      	blx	r3
    5958:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    595c:	2b00      	cmp	r3, #0
    595e:	d009      	beq.n	5974 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
                    CO_SDO_abort(SDO, abortCode);
    5960:	4b62      	ldr	r3, [pc, #392]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5962:	681b      	ldr	r3, [r3, #0]
    5964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5966:	4618      	mov	r0, r3
    5968:	4b62      	ldr	r3, [pc, #392]	; (5af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
    596a:	4798      	blx	r3
                    return -1;
    596c:	f04f 33ff 	mov.w	r3, #4294967295
    5970:	f000 be89 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
    5974:	4b5d      	ldr	r3, [pc, #372]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	2200      	movs	r2, #0
    597a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
    597e:	4b5b      	ldr	r3, [pc, #364]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5980:	681b      	ldr	r3, [r3, #0]
    5982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5986:	4a59      	ldr	r2, [pc, #356]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5988:	6812      	ldr	r2, [r2, #0]
    598a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    598e:	2a00      	cmp	r2, #0
    5990:	d001      	beq.n	5996 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x67a>
    5992:	2230      	movs	r2, #48	; 0x30
    5994:	e000      	b.n	5998 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x67c>
    5996:	2220      	movs	r2, #32
    5998:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
    599a:	4b54      	ldr	r3, [pc, #336]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	4a53      	ldr	r2, [pc, #332]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59a0:	6812      	ldr	r2, [r2, #0]
    59a2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    59a6:	2a00      	cmp	r2, #0
    59a8:	bf0c      	ite	eq
    59aa:	2201      	moveq	r2, #1
    59ac:	2200      	movne	r2, #0
    59ae:	b2d2      	uxtb	r2, r2
    59b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
    59b4:	2301      	movs	r3, #1
    59b6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    59ba:	f000 be48 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
    59be:	4b4b      	ldr	r3, [pc, #300]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	781b      	ldrb	r3, [r3, #0]
    59c4:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    59c8:	2bc0      	cmp	r3, #192	; 0xc0
    59ca:	d009      	beq.n	59e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6c4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    59cc:	4b47      	ldr	r3, [pc, #284]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	4949      	ldr	r1, [pc, #292]	; (5af8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7dc>)
    59d2:	4618      	mov	r0, r3
    59d4:	4b47      	ldr	r3, [pc, #284]	; (5af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
    59d6:	4798      	blx	r3
                return -1;
    59d8:	f04f 33ff 	mov.w	r3, #4294967295
    59dc:	f000 be53 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
    59e0:	4b42      	ldr	r3, [pc, #264]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    59e8:	22a4      	movs	r2, #164	; 0xa4
    59ea:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    59ec:	4b3f      	ldr	r3, [pc, #252]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    59f4:	4a3d      	ldr	r2, [pc, #244]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59f6:	6812      	ldr	r2, [r2, #0]
    59f8:	7852      	ldrb	r2, [r2, #1]
    59fa:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    59fc:	4b3b      	ldr	r3, [pc, #236]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a04:	4a39      	ldr	r2, [pc, #228]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a06:	6812      	ldr	r2, [r2, #0]
    5a08:	7892      	ldrb	r2, [r2, #2]
    5a0a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    5a0c:	4b37      	ldr	r3, [pc, #220]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a0e:	681b      	ldr	r3, [r3, #0]
    5a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a14:	4a35      	ldr	r2, [pc, #212]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a16:	6812      	ldr	r2, [r2, #0]
    5a18:	78d2      	ldrb	r2, [r2, #3]
    5a1a:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
    5a1c:	4b33      	ldr	r3, [pc, #204]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a1e:	681b      	ldr	r3, [r3, #0]
    5a20:	2204      	movs	r2, #4
    5a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
    5a26:	4b31      	ldr	r3, [pc, #196]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5a2e:	4a2f      	ldr	r2, [pc, #188]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a30:	6812      	ldr	r2, [r2, #0]
    5a32:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    5a36:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
    5a38:	4b2c      	ldr	r3, [pc, #176]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a3a:	681b      	ldr	r3, [r3, #0]
    5a3c:	4a2b      	ldr	r2, [pc, #172]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a3e:	6812      	ldr	r2, [r2, #0]
    5a40:	7812      	ldrb	r2, [r2, #0]
    5a42:	f002 0204 	and.w	r2, r2, #4
    5a46:	2a00      	cmp	r2, #0
    5a48:	bf14      	ite	ne
    5a4a:	2201      	movne	r2, #1
    5a4c:	2200      	moveq	r2, #0
    5a4e:	b2d2      	uxtb	r2, r2
    5a50:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
    5a54:	4b25      	ldr	r3, [pc, #148]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	2200      	movs	r2, #0
    5a5a:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
    5a5c:	4b23      	ldr	r3, [pc, #140]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	f003 0302 	and.w	r3, r3, #2
    5a66:	2b00      	cmp	r3, #0
    5a68:	d021      	beq.n	5aae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
    5a6a:	4b20      	ldr	r3, [pc, #128]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	1d1a      	adds	r2, r3, #4
    5a70:	f107 031c 	add.w	r3, r7, #28
    5a74:	4619      	mov	r1, r3
    5a76:	68f8      	ldr	r0, [r7, #12]
    5a78:	4b20      	ldr	r3, [pc, #128]	; (5afc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e0>)
    5a7a:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
    5a7c:	4b1b      	ldr	r3, [pc, #108]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	69fa      	ldr	r2, [r7, #28]
    5a82:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
    5a84:	4b19      	ldr	r3, [pc, #100]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5a8a:	69fb      	ldr	r3, [r7, #28]
    5a8c:	429a      	cmp	r2, r3
    5a8e:	d00e      	beq.n	5aae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
    5a90:	4b16      	ldr	r3, [pc, #88]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a92:	681b      	ldr	r3, [r3, #0]
    5a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5a96:	2b00      	cmp	r3, #0
    5a98:	d009      	beq.n	5aae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
    5a9a:	4b14      	ldr	r3, [pc, #80]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	4918      	ldr	r1, [pc, #96]	; (5b00 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e4>)
    5aa0:	4618      	mov	r0, r3
    5aa2:	4b14      	ldr	r3, [pc, #80]	; (5af4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
    5aa4:	4798      	blx	r3
                    return -1;
    5aa6:	f04f 33ff 	mov.w	r3, #4294967295
    5aaa:	f000 bdec 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }
            }

            SDO->bufferOffset = 0;
    5aae:	4b0f      	ldr	r3, [pc, #60]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	2200      	movs	r2, #0
    5ab4:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
    5ab6:	4b0d      	ldr	r3, [pc, #52]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	2200      	movs	r2, #0
    5abc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
    5ac0:	4b0a      	ldr	r3, [pc, #40]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5ac2:	681b      	ldr	r3, [r3, #0]
    5ac4:	2215      	movs	r2, #21
    5ac6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
    5aca:	2301      	movs	r3, #1
    5acc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5ad0:	f000 bdbd 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
    5ad4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d113      	bne.n	5b04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e8>
    5adc:	4b03      	ldr	r3, [pc, #12]	; (5aec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	b25b      	sxtb	r3, r3
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	da0d      	bge.n	5b04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e8>
    5ae8:	2301      	movs	r3, #1
    5aea:	e00c      	b.n	5b06 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ea>
    5aec:	20001984 	.word	0x20001984
    5af0:	00005159 	.word	0x00005159
    5af4:	00005291 	.word	0x00005291
    5af8:	05040001 	.word	0x05040001
    5afc:	00004745 	.word	0x00004745
    5b00:	06070010 	.word	0x06070010
    5b04:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
    5b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
    5b0a:	4b8d      	ldr	r3, [pc, #564]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5b12:	22a2      	movs	r2, #162	; 0xa2
    5b14:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
    5b16:	4b8a      	ldr	r3, [pc, #552]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5b1e:	4a88      	ldr	r2, [pc, #544]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b20:	6812      	ldr	r2, [r2, #0]
    5b22:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    5b26:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
    5b28:	4b85      	ldr	r3, [pc, #532]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	2200      	movs	r2, #0
    5b2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
    5b32:	4b83      	ldr	r3, [pc, #524]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5b38:	2b00      	cmp	r3, #0
    5b3a:	d141      	bne.n	5bc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
    5b3c:	4b80      	ldr	r3, [pc, #512]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5b42:	2b00      	cmp	r3, #0
    5b44:	d03c      	beq.n	5bc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
    5b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d138      	bne.n	5bc0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
    5b4e:	4b7c      	ldr	r3, [pc, #496]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    5b56:	2b00      	cmp	r3, #0
    5b58:	d010      	beq.n	5b7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x860>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
    5b5a:	4b79      	ldr	r3, [pc, #484]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b5c:	681c      	ldr	r4, [r3, #0]
    5b5e:	4b78      	ldr	r3, [pc, #480]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b60:	681b      	ldr	r3, [r3, #0]
    5b62:	6c59      	ldr	r1, [r3, #68]	; 0x44
    5b64:	4b76      	ldr	r3, [pc, #472]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5b6a:	4b75      	ldr	r3, [pc, #468]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b6c:	681b      	ldr	r3, [r3, #0]
    5b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5b70:	b29b      	uxth	r3, r3
    5b72:	68f8      	ldr	r0, [r7, #12]
    5b74:	4d73      	ldr	r5, [pc, #460]	; (5d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa28>)
    5b76:	47a8      	blx	r5
    5b78:	4603      	mov	r3, r0
    5b7a:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
    5b7c:	4b70      	ldr	r3, [pc, #448]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	2200      	movs	r2, #0
    5b82:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
    5b86:	4b6e      	ldr	r3, [pc, #440]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5b8c:	4619      	mov	r1, r3
    5b8e:	68f8      	ldr	r0, [r7, #12]
    5b90:	4b6d      	ldr	r3, [pc, #436]	; (5d48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa2c>)
    5b92:	4798      	blx	r3
    5b94:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    5b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d009      	beq.n	5bb0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x894>
                    CO_SDO_abort(SDO, abortCode);
    5b9c:	4b68      	ldr	r3, [pc, #416]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5ba2:	4618      	mov	r0, r3
    5ba4:	4b69      	ldr	r3, [pc, #420]	; (5d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
    5ba6:	4798      	blx	r3
                    return -1;
    5ba8:	f04f 33ff 	mov.w	r3, #4294967295
    5bac:	f000 bd6b 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
    5bb0:	4b63      	ldr	r3, [pc, #396]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bb2:	681b      	ldr	r3, [r3, #0]
    5bb4:	2220      	movs	r2, #32
    5bb6:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
    5bb8:	4b61      	ldr	r3, [pc, #388]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bba:	681b      	ldr	r3, [r3, #0]
    5bbc:	2200      	movs	r2, #0
    5bbe:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
    5bc0:	4b5f      	ldr	r3, [pc, #380]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bc2:	681b      	ldr	r3, [r3, #0]
    5bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5bc6:	f1c3 0320 	rsb	r3, r3, #32
    5bca:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
    5bcc:	4b5c      	ldr	r3, [pc, #368]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bce:	6819      	ldr	r1, [r3, #0]
    5bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5bd2:	f240 3279 	movw	r2, #889	; 0x379
    5bd6:	4293      	cmp	r3, r2
    5bd8:	d809      	bhi.n	5bee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8d2>
    5bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5bdc:	4b5c      	ldr	r3, [pc, #368]	; (5d50 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa34>)
    5bde:	fba3 0302 	umull	r0, r3, r3, r2
    5be2:	1ad2      	subs	r2, r2, r3
    5be4:	0852      	lsrs	r2, r2, #1
    5be6:	4413      	add	r3, r2
    5be8:	089b      	lsrs	r3, r3, #2
    5bea:	b2db      	uxtb	r3, r3
    5bec:	e000      	b.n	5bf0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8d4>
    5bee:	237f      	movs	r3, #127	; 0x7f
    5bf0:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
    5bf4:	4b52      	ldr	r3, [pc, #328]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bf6:	681b      	ldr	r3, [r3, #0]
    5bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5bfc:	4a50      	ldr	r2, [pc, #320]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5bfe:	6812      	ldr	r2, [r2, #0]
    5c00:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    5c04:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
    5c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d005      	beq.n	5c1a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fe>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
    5c0e:	4b4c      	ldr	r3, [pc, #304]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	2217      	movs	r2, #23
    5c14:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    5c18:	e013      	b.n	5c42 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x926>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    5c1a:	4b49      	ldr	r3, [pc, #292]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5c20:	2b1f      	cmp	r3, #31
    5c22:	d909      	bls.n	5c38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x91c>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
    5c24:	4b46      	ldr	r3, [pc, #280]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c26:	681b      	ldr	r3, [r3, #0]
    5c28:	494a      	ldr	r1, [pc, #296]	; (5d54 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa38>)
    5c2a:	4618      	mov	r0, r3
    5c2c:	4b47      	ldr	r3, [pc, #284]	; (5d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
    5c2e:	4798      	blx	r3
                return -1;
    5c30:	f04f 33ff 	mov.w	r3, #4294967295
    5c34:	f000 bd27 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
    5c38:	4b41      	ldr	r3, [pc, #260]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c3a:	681b      	ldr	r3, [r3, #0]
    5c3c:	2215      	movs	r2, #21
    5c3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
    5c42:	2301      	movs	r3, #1
    5c44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
    5c48:	f000 bd01 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
    5c4c:	4b3c      	ldr	r3, [pc, #240]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c4e:	681b      	ldr	r3, [r3, #0]
    5c50:	781b      	ldrb	r3, [r3, #0]
    5c52:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    5c56:	2bc1      	cmp	r3, #193	; 0xc1
    5c58:	d009      	beq.n	5c6e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x952>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5c5a:	4b39      	ldr	r3, [pc, #228]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	493e      	ldr	r1, [pc, #248]	; (5d58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa3c>)
    5c60:	4618      	mov	r0, r3
    5c62:	4b3a      	ldr	r3, [pc, #232]	; (5d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
    5c64:	4798      	blx	r3
                return -1;
    5c66:	f04f 33ff 	mov.w	r3, #4294967295
    5c6a:	f000 bd0c 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
    5c6e:	4b34      	ldr	r3, [pc, #208]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	781b      	ldrb	r3, [r3, #0]
    5c74:	109b      	asrs	r3, r3, #2
    5c76:	f003 0307 	and.w	r3, r3, #7
    5c7a:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
    5c7c:	4b30      	ldr	r3, [pc, #192]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c7e:	681b      	ldr	r3, [r3, #0]
    5c80:	4a2f      	ldr	r2, [pc, #188]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c82:	6812      	ldr	r2, [r2, #0]
    5c84:	6b91      	ldr	r1, [r2, #56]	; 0x38
    5c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5c88:	1a8a      	subs	r2, r1, r2
    5c8a:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
    5c8c:	4b2c      	ldr	r3, [pc, #176]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    5c94:	2b00      	cmp	r3, #0
    5c96:	d029      	beq.n	5cec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
    5c98:	4b29      	ldr	r3, [pc, #164]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c9a:	681c      	ldr	r4, [r3, #0]
    5c9c:	4b28      	ldr	r3, [pc, #160]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    5ca2:	4b27      	ldr	r3, [pc, #156]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5ca8:	4b25      	ldr	r3, [pc, #148]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5cae:	b29b      	uxth	r3, r3
    5cb0:	68f8      	ldr	r0, [r7, #12]
    5cb2:	4d24      	ldr	r5, [pc, #144]	; (5d44 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa28>)
    5cb4:	47a8      	blx	r5
    5cb6:	4603      	mov	r3, r0
    5cb8:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
    5cba:	4b21      	ldr	r3, [pc, #132]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	1c5a      	adds	r2, r3, #1
    5cc0:	f107 0318 	add.w	r3, r7, #24
    5cc4:	4619      	mov	r1, r3
    5cc6:	68f8      	ldr	r0, [r7, #12]
    5cc8:	4b24      	ldr	r3, [pc, #144]	; (5d5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa40>)
    5cca:	4798      	blx	r3

                if(SDO->crc != crc){
    5ccc:	4b1c      	ldr	r3, [pc, #112]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5cce:	681b      	ldr	r3, [r3, #0]
    5cd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    5cd2:	69bb      	ldr	r3, [r7, #24]
    5cd4:	429a      	cmp	r2, r3
    5cd6:	d009      	beq.n	5cec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
    5cd8:	4b19      	ldr	r3, [pc, #100]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5cda:	681b      	ldr	r3, [r3, #0]
    5cdc:	4920      	ldr	r1, [pc, #128]	; (5d60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa44>)
    5cde:	4618      	mov	r0, r3
    5ce0:	4b1a      	ldr	r3, [pc, #104]	; (5d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
    5ce2:	4798      	blx	r3
                    return -1;
    5ce4:	f04f 33ff 	mov.w	r3, #4294967295
    5ce8:	f000 bccd 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
    5cec:	4b14      	ldr	r3, [pc, #80]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	2201      	movs	r2, #1
    5cf2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
    5cf6:	4b12      	ldr	r3, [pc, #72]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5cfc:	4619      	mov	r1, r3
    5cfe:	68f8      	ldr	r0, [r7, #12]
    5d00:	4b11      	ldr	r3, [pc, #68]	; (5d48 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa2c>)
    5d02:	4798      	blx	r3
    5d04:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
    5d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d009      	beq.n	5d20 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa04>
                CO_SDO_abort(SDO, abortCode);
    5d0c:	4b0c      	ldr	r3, [pc, #48]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5d0e:	681b      	ldr	r3, [r3, #0]
    5d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5d12:	4618      	mov	r0, r3
    5d14:	4b0d      	ldr	r3, [pc, #52]	; (5d4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
    5d16:	4798      	blx	r3
                return -1;
    5d18:	f04f 33ff 	mov.w	r3, #4294967295
    5d1c:	f000 bcb3 	b.w	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
    5d20:	4b07      	ldr	r3, [pc, #28]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5d28:	22a1      	movs	r2, #161	; 0xa1
    5d2a:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
    5d2c:	4b04      	ldr	r3, [pc, #16]	; (5d40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
    5d2e:	681b      	ldr	r3, [r3, #0]
    5d30:	2200      	movs	r2, #0
    5d32:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
    5d36:	2301      	movs	r3, #1
    5d38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5d3c:	f000 bc87 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
    5d40:	20001984 	.word	0x20001984
    5d44:	00006cc9 	.word	0x00006cc9
    5d48:	00005159 	.word	0x00005159
    5d4c:	00005291 	.word	0x00005291
    5d50:	24924925 	.word	0x24924925
    5d54:	06040047 	.word	0x06040047
    5d58:	05040001 	.word	0x05040001
    5d5c:	00004715 	.word	0x00004715
    5d60:	05040004 	.word	0x05040004
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    5d64:	4b88      	ldr	r3, [pc, #544]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5d6c:	4a86      	ldr	r2, [pc, #536]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d6e:	6812      	ldr	r2, [r2, #0]
    5d70:	7852      	ldrb	r2, [r2, #1]
    5d72:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    5d74:	4b84      	ldr	r3, [pc, #528]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5d7c:	4a82      	ldr	r2, [pc, #520]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d7e:	6812      	ldr	r2, [r2, #0]
    5d80:	7892      	ldrb	r2, [r2, #2]
    5d82:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    5d84:	4b80      	ldr	r3, [pc, #512]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d86:	681b      	ldr	r3, [r3, #0]
    5d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5d8c:	4a7e      	ldr	r2, [pc, #504]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d8e:	6812      	ldr	r2, [r2, #0]
    5d90:	78d2      	ldrb	r2, [r2, #3]
    5d92:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
    5d94:	4b7c      	ldr	r3, [pc, #496]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5d96:	681b      	ldr	r3, [r3, #0]
    5d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5d9a:	2b04      	cmp	r3, #4
    5d9c:	d835      	bhi.n	5e0a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xaee>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
    5d9e:	2300      	movs	r3, #0
    5da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    5da2:	4b79      	ldr	r3, [pc, #484]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5da4:	681b      	ldr	r3, [r3, #0]
    5da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5daa:	429a      	cmp	r2, r3
    5dac:	d912      	bls.n	5dd4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xab8>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
    5dae:	4b76      	ldr	r3, [pc, #472]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5db0:	681b      	ldr	r3, [r3, #0]
    5db2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    5db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5db8:	3304      	adds	r3, #4
    5dba:	4973      	ldr	r1, [pc, #460]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5dbc:	6809      	ldr	r1, [r1, #0]
    5dbe:	6c48      	ldr	r0, [r1, #68]	; 0x44
    5dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5dc2:	4401      	add	r1, r0
    5dc4:	7809      	ldrb	r1, [r1, #0]
    5dc6:	4413      	add	r3, r2
    5dc8:	460a      	mov	r2, r1
    5dca:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
    5dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5dce:	3301      	adds	r3, #1
    5dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    5dd2:	e7e6      	b.n	5da2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa86>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
    5dd4:	4b6c      	ldr	r3, [pc, #432]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5ddc:	4a6a      	ldr	r2, [pc, #424]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5dde:	6812      	ldr	r2, [r2, #0]
    5de0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    5de2:	b2d2      	uxtb	r2, r2
    5de4:	f1c2 0204 	rsb	r2, r2, #4
    5de8:	b2d2      	uxtb	r2, r2
    5dea:	0092      	lsls	r2, r2, #2
    5dec:	b2d2      	uxtb	r2, r2
    5dee:	f042 0243 	orr.w	r2, r2, #67	; 0x43
    5df2:	b2d2      	uxtb	r2, r2
    5df4:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
    5df6:	4b64      	ldr	r3, [pc, #400]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	2200      	movs	r2, #0
    5dfc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
    5e00:	2301      	movs	r3, #1
    5e02:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
    5e06:	f000 bc22 	b.w	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                SDO->bufferOffset = 0U;
    5e0a:	4b5f      	ldr	r3, [pc, #380]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e0c:	681b      	ldr	r3, [r3, #0]
    5e0e:	2200      	movs	r2, #0
    5e10:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
    5e12:	4b5d      	ldr	r3, [pc, #372]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e14:	681b      	ldr	r3, [r3, #0]
    5e16:	2200      	movs	r2, #0
    5e18:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
    5e1c:	4b5a      	ldr	r3, [pc, #360]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e1e:	681b      	ldr	r3, [r3, #0]
    5e20:	2222      	movs	r2, #34	; 0x22
    5e22:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
    5e26:	4b58      	ldr	r3, [pc, #352]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e28:	681b      	ldr	r3, [r3, #0]
    5e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d015      	beq.n	5e5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb40>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
    5e30:	4b55      	ldr	r3, [pc, #340]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5e36:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
    5e38:	4b53      	ldr	r3, [pc, #332]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e3a:	681b      	ldr	r3, [r3, #0]
    5e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5e40:	3309      	adds	r3, #9
    5e42:	f107 0214 	add.w	r2, r7, #20
    5e46:	4619      	mov	r1, r3
    5e48:	68f8      	ldr	r0, [r7, #12]
    5e4a:	4b50      	ldr	r3, [pc, #320]	; (5f8c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc70>)
    5e4c:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
    5e4e:	4b4e      	ldr	r3, [pc, #312]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5e56:	2241      	movs	r2, #65	; 0x41
    5e58:	715a      	strb	r2, [r3, #5]
    5e5a:	e005      	b.n	5e68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4c>
                    SDO->CANtxBuff->data[0] = 0x40U;
    5e5c:	4b4a      	ldr	r3, [pc, #296]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5e64:	2240      	movs	r2, #64	; 0x40
    5e66:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
    5e68:	2301      	movs	r3, #1
    5e6a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    5e6e:	e3ee      	b.n	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
    5e70:	4b45      	ldr	r3, [pc, #276]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e72:	681b      	ldr	r3, [r3, #0]
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    5e7a:	2b60      	cmp	r3, #96	; 0x60
    5e7c:	d008      	beq.n	5e90 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb74>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    5e7e:	4b42      	ldr	r3, [pc, #264]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e80:	681b      	ldr	r3, [r3, #0]
    5e82:	4943      	ldr	r1, [pc, #268]	; (5f90 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc74>)
    5e84:	4618      	mov	r0, r3
    5e86:	4b43      	ldr	r3, [pc, #268]	; (5f94 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
    5e88:	4798      	blx	r3
                return -1;
    5e8a:	f04f 33ff 	mov.w	r3, #4294967295
    5e8e:	e3fa      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
    5e90:	4b3d      	ldr	r3, [pc, #244]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5e92:	681b      	ldr	r3, [r3, #0]
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	f003 0310 	and.w	r3, r3, #16
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d001      	beq.n	5ea2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb86>
    5e9e:	2301      	movs	r3, #1
    5ea0:	e000      	b.n	5ea4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb88>
    5ea2:	2300      	movs	r3, #0
    5ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
    5ea6:	4b38      	ldr	r3, [pc, #224]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    5eae:	461a      	mov	r2, r3
    5eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5eb2:	429a      	cmp	r2, r3
    5eb4:	d008      	beq.n	5ec8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbac>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
    5eb6:	4b34      	ldr	r3, [pc, #208]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5eb8:	681b      	ldr	r3, [r3, #0]
    5eba:	4937      	ldr	r1, [pc, #220]	; (5f98 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc7c>)
    5ebc:	4618      	mov	r0, r3
    5ebe:	4b35      	ldr	r3, [pc, #212]	; (5f94 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
    5ec0:	4798      	blx	r3
                return -1;
    5ec2:	f04f 33ff 	mov.w	r3, #4294967295
    5ec6:	e3de      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
    5ec8:	4b2f      	ldr	r3, [pc, #188]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5eca:	681b      	ldr	r3, [r3, #0]
    5ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5ece:	4b2e      	ldr	r3, [pc, #184]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5ed4:	1ad3      	subs	r3, r2, r3
    5ed6:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
    5ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5eda:	2b07      	cmp	r3, #7
    5edc:	d901      	bls.n	5ee2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbc6>
    5ede:	2307      	movs	r3, #7
    5ee0:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
    5ee2:	4b29      	ldr	r3, [pc, #164]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d179      	bne.n	5fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
    5eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5eee:	2b06      	cmp	r3, #6
    5ef0:	d876      	bhi.n	5fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
    5ef2:	4b25      	ldr	r3, [pc, #148]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    5efa:	2b00      	cmp	r3, #0
    5efc:	d170      	bne.n	5fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
    5efe:	2300      	movs	r3, #0
    5f00:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5f06:	429a      	cmp	r2, r3
    5f08:	d213      	bcs.n	5f32 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc16>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
    5f0a:	4b1f      	ldr	r3, [pc, #124]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5f12:	4413      	add	r3, r2
    5f14:	4a1c      	ldr	r2, [pc, #112]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f16:	6812      	ldr	r2, [r2, #0]
    5f18:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5f1a:	4a1b      	ldr	r2, [pc, #108]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f1c:	6812      	ldr	r2, [r2, #0]
    5f1e:	6b90      	ldr	r0, [r2, #56]	; 0x38
    5f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5f22:	4402      	add	r2, r0
    5f24:	440a      	add	r2, r1
    5f26:	7812      	ldrb	r2, [r2, #0]
    5f28:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
    5f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5f2c:	3301      	adds	r3, #1
    5f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f30:	e7e7      	b.n	5f02 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbe6>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
    5f32:	4b15      	ldr	r3, [pc, #84]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	4a14      	ldr	r2, [pc, #80]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f38:	6812      	ldr	r2, [r2, #0]
    5f3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5f3e:	440a      	add	r2, r1
    5f40:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
    5f42:	4b11      	ldr	r3, [pc, #68]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f44:	681c      	ldr	r4, [r3, #0]
    5f46:	4b10      	ldr	r3, [pc, #64]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5f4c:	4b0e      	ldr	r3, [pc, #56]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f4e:	681b      	ldr	r3, [r3, #0]
    5f50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    5f54:	461a      	mov	r2, r3
    5f56:	68f8      	ldr	r0, [r7, #12]
    5f58:	4b10      	ldr	r3, [pc, #64]	; (5f9c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc80>)
    5f5a:	4798      	blx	r3
    5f5c:	4602      	mov	r2, r0
    5f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5f60:	1ad3      	subs	r3, r2, r3
    5f62:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    5f64:	2120      	movs	r1, #32
    5f66:	68f8      	ldr	r0, [r7, #12]
    5f68:	4b0d      	ldr	r3, [pc, #52]	; (5fa0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc84>)
    5f6a:	4798      	blx	r3
    5f6c:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
    5f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f70:	2b00      	cmp	r3, #0
    5f72:	d017      	beq.n	5fa4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc88>
                    CO_SDO_abort(SDO, abortCode);
    5f74:	4b04      	ldr	r3, [pc, #16]	; (5f88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5f7a:	4618      	mov	r0, r3
    5f7c:	4b05      	ldr	r3, [pc, #20]	; (5f94 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
    5f7e:	4798      	blx	r3
                    return -1;
    5f80:	f04f 33ff 	mov.w	r3, #4294967295
    5f84:	e37f      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    5f86:	bf00      	nop
    5f88:	20001984 	.word	0x20001984
    5f8c:	00004745 	.word	0x00004745
    5f90:	05040001 	.word	0x05040001
    5f94:	00005291 	.word	0x00005291
    5f98:	05030000 	.word	0x05030000
    5f9c:	00004c65 	.word	0x00004c65
    5fa0:	00005035 	.word	0x00005035
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
    5fa4:	4b9b      	ldr	r3, [pc, #620]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fa6:	681b      	ldr	r3, [r3, #0]
    5fa8:	4a9a      	ldr	r2, [pc, #616]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5faa:	6812      	ldr	r2, [r2, #0]
    5fac:	6c51      	ldr	r1, [r2, #68]	; 0x44
    5fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5fb0:	4252      	negs	r2, r2
    5fb2:	440a      	add	r2, r1
    5fb4:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
    5fb6:	4b97      	ldr	r3, [pc, #604]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	4a96      	ldr	r2, [pc, #600]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fbc:	6812      	ldr	r2, [r2, #0]
    5fbe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    5fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5fc2:	440a      	add	r2, r1
    5fc4:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
    5fc6:	4b93      	ldr	r3, [pc, #588]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	2200      	movs	r2, #0
    5fcc:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
    5fce:	4b91      	ldr	r3, [pc, #580]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5fd4:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
    5fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fd8:	2b07      	cmp	r3, #7
    5fda:	d901      	bls.n	5fe0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
    5fdc:	2307      	movs	r3, #7
    5fde:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
    5fe0:	2300      	movs	r3, #0
    5fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    5fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fe8:	429a      	cmp	r2, r3
    5fea:	d215      	bcs.n	6018 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfc>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
    5fec:	4b89      	ldr	r3, [pc, #548]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5fee:	681b      	ldr	r3, [r3, #0]
    5ff0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    5ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5ff6:	1c59      	adds	r1, r3, #1
    5ff8:	4b86      	ldr	r3, [pc, #536]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    5ffe:	4b85      	ldr	r3, [pc, #532]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6000:	681a      	ldr	r2, [r3, #0]
    6002:	6b93      	ldr	r3, [r2, #56]	; 0x38
    6004:	1c5d      	adds	r5, r3, #1
    6006:	6395      	str	r5, [r2, #56]	; 0x38
    6008:	4423      	add	r3, r4
    600a:	781a      	ldrb	r2, [r3, #0]
    600c:	1843      	adds	r3, r0, r1
    600e:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
    6010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6012:	3301      	adds	r3, #1
    6014:	63fb      	str	r3, [r7, #60]	; 0x3c
    6016:	e7e5      	b.n	5fe4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc8>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
    6018:	4b7e      	ldr	r3, [pc, #504]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6020:	4a7c      	ldr	r2, [pc, #496]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6022:	6812      	ldr	r2, [r2, #0]
    6024:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    6028:	2a00      	cmp	r2, #0
    602a:	d001      	beq.n	6030 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd14>
    602c:	2110      	movs	r1, #16
    602e:	e000      	b.n	6032 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd16>
    6030:	2100      	movs	r1, #0
    6032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6034:	b2d2      	uxtb	r2, r2
    6036:	f1c2 0207 	rsb	r2, r2, #7
    603a:	b2d2      	uxtb	r2, r2
    603c:	0052      	lsls	r2, r2, #1
    603e:	b2d2      	uxtb	r2, r2
    6040:	430a      	orrs	r2, r1
    6042:	b2d2      	uxtb	r2, r2
    6044:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
    6046:	4b73      	ldr	r3, [pc, #460]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6048:	681b      	ldr	r3, [r3, #0]
    604a:	4a72      	ldr	r2, [pc, #456]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    604c:	6812      	ldr	r2, [r2, #0]
    604e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    6052:	2a00      	cmp	r2, #0
    6054:	bf0c      	ite	eq
    6056:	2201      	moveq	r2, #1
    6058:	2200      	movne	r2, #0
    605a:	b2d2      	uxtb	r2, r2
    605c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
    6060:	4b6c      	ldr	r3, [pc, #432]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6066:	4b6b      	ldr	r3, [pc, #428]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    606c:	429a      	cmp	r2, r3
    606e:	d117      	bne.n	60a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd84>
    6070:	4b68      	ldr	r3, [pc, #416]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    6078:	2b00      	cmp	r3, #0
    607a:	d011      	beq.n	60a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd84>
                SDO->CANtxBuff->data[0] |= 0x01;
    607c:	4b65      	ldr	r3, [pc, #404]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6084:	4a63      	ldr	r2, [pc, #396]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6086:	6812      	ldr	r2, [r2, #0]
    6088:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    608c:	7952      	ldrb	r2, [r2, #5]
    608e:	f042 0201 	orr.w	r2, r2, #1
    6092:	b2d2      	uxtb	r2, r2
    6094:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
    6096:	4b5f      	ldr	r3, [pc, #380]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6098:	681b      	ldr	r3, [r3, #0]
    609a:	2200      	movs	r2, #0
    609c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
    60a0:	2301      	movs	r3, #1
    60a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    60a6:	e2d2      	b.n	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
    60a8:	4b5a      	ldr	r3, [pc, #360]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    60b0:	4a58      	ldr	r2, [pc, #352]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60b2:	6812      	ldr	r2, [r2, #0]
    60b4:	7852      	ldrb	r2, [r2, #1]
    60b6:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
    60b8:	4b56      	ldr	r3, [pc, #344]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60ba:	681b      	ldr	r3, [r3, #0]
    60bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    60c0:	4a54      	ldr	r2, [pc, #336]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60c2:	6812      	ldr	r2, [r2, #0]
    60c4:	7892      	ldrb	r2, [r2, #2]
    60c6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
    60c8:	4b52      	ldr	r3, [pc, #328]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    60d0:	4a50      	ldr	r2, [pc, #320]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60d2:	6812      	ldr	r2, [r2, #0]
    60d4:	78d2      	ldrb	r2, [r2, #3]
    60d6:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
    60d8:	4b4e      	ldr	r3, [pc, #312]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	f003 0304 	and.w	r3, r3, #4
    60e2:	2b00      	cmp	r3, #0
    60e4:	d013      	beq.n	610e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdf2>
                SDO->crcEnabled = true;
    60e6:	4b4b      	ldr	r3, [pc, #300]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60e8:	681b      	ldr	r3, [r3, #0]
    60ea:	2201      	movs	r2, #1
    60ec:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
    60f0:	4b48      	ldr	r3, [pc, #288]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60f2:	681c      	ldr	r4, [r3, #0]
    60f4:	4b47      	ldr	r3, [pc, #284]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
    60fa:	4b46      	ldr	r3, [pc, #280]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    60fc:	681b      	ldr	r3, [r3, #0]
    60fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    6100:	2300      	movs	r3, #0
    6102:	68f8      	ldr	r0, [r7, #12]
    6104:	4d44      	ldr	r5, [pc, #272]	; (6218 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xefc>)
    6106:	47a8      	blx	r5
    6108:	4603      	mov	r3, r0
    610a:	6763      	str	r3, [r4, #116]	; 0x74
    610c:	e008      	b.n	6120 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe04>
            }
            else{
                SDO->crcEnabled = false;
    610e:	4b41      	ldr	r3, [pc, #260]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	2200      	movs	r2, #0
    6114:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
    6118:	4b3e      	ldr	r3, [pc, #248]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	2200      	movs	r2, #0
    611e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
    6120:	4b3c      	ldr	r3, [pc, #240]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	4a3b      	ldr	r2, [pc, #236]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6126:	6812      	ldr	r2, [r2, #0]
    6128:	7912      	ldrb	r2, [r2, #4]
    612a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
    612e:	4b39      	ldr	r3, [pc, #228]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6130:	681b      	ldr	r3, [r3, #0]
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	f003 0303 	and.w	r3, r3, #3
    6138:	2b00      	cmp	r3, #0
    613a:	d008      	beq.n	614e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe32>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    613c:	4b35      	ldr	r3, [pc, #212]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	4936      	ldr	r1, [pc, #216]	; (621c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf00>)
    6142:	4618      	mov	r0, r3
    6144:	4b36      	ldr	r3, [pc, #216]	; (6220 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
    6146:	4798      	blx	r3
                return -1;
    6148:	f04f 33ff 	mov.w	r3, #4294967295
    614c:	e29b      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
    614e:	4b31      	ldr	r3, [pc, #196]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6156:	2b00      	cmp	r3, #0
    6158:	d019      	beq.n	618e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe72>
    615a:	4b2e      	ldr	r3, [pc, #184]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    615c:	681b      	ldr	r3, [r3, #0]
    615e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6162:	b25b      	sxtb	r3, r3
    6164:	2b00      	cmp	r3, #0
    6166:	db12      	blt.n	618e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe72>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
    6168:	4b2a      	ldr	r3, [pc, #168]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    616a:	681b      	ldr	r3, [r3, #0]
    616c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6170:	461a      	mov	r2, r3
    6172:	4613      	mov	r3, r2
    6174:	00db      	lsls	r3, r3, #3
    6176:	1a9a      	subs	r2, r3, r2
    6178:	4b26      	ldr	r3, [pc, #152]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    617a:	681b      	ldr	r3, [r3, #0]
    617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
    617e:	429a      	cmp	r2, r3
    6180:	d90e      	bls.n	61a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe84>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
    6182:	4b24      	ldr	r3, [pc, #144]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6184:	681b      	ldr	r3, [r3, #0]
    6186:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    618a:	2b00      	cmp	r3, #0
    618c:	d108      	bne.n	61a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe84>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
    618e:	4b21      	ldr	r3, [pc, #132]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6190:	681b      	ldr	r3, [r3, #0]
    6192:	4924      	ldr	r1, [pc, #144]	; (6224 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf08>)
    6194:	4618      	mov	r0, r3
    6196:	4b22      	ldr	r3, [pc, #136]	; (6220 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
    6198:	4798      	blx	r3
                return -1;
    619a:	f04f 33ff 	mov.w	r3, #4294967295
    619e:	e272      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
    61a0:	4b1c      	ldr	r3, [pc, #112]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    61a6:	2b00      	cmp	r3, #0
    61a8:	d015      	beq.n	61d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeba>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
    61aa:	4b1a      	ldr	r3, [pc, #104]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61ac:	681b      	ldr	r3, [r3, #0]
    61ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    61b0:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
    61b2:	4b18      	ldr	r3, [pc, #96]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61b4:	681b      	ldr	r3, [r3, #0]
    61b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61ba:	3309      	adds	r3, #9
    61bc:	f107 0210 	add.w	r2, r7, #16
    61c0:	4619      	mov	r1, r3
    61c2:	68f8      	ldr	r0, [r7, #12]
    61c4:	4b18      	ldr	r3, [pc, #96]	; (6228 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf0c>)
    61c6:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
    61c8:	4b12      	ldr	r3, [pc, #72]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61d0:	22c6      	movs	r2, #198	; 0xc6
    61d2:	715a      	strb	r2, [r3, #5]
    61d4:	e005      	b.n	61e2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xec6>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
    61d6:	4b0f      	ldr	r3, [pc, #60]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61de:	22c4      	movs	r2, #196	; 0xc4
    61e0:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
    61e2:	4b0c      	ldr	r3, [pc, #48]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	2225      	movs	r2, #37	; 0x25
    61e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
    61ec:	2301      	movs	r3, #1
    61ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
    61f2:	e22c      	b.n	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
    61f4:	4b07      	ldr	r3, [pc, #28]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    61f6:	681b      	ldr	r3, [r3, #0]
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    61fe:	2ba3      	cmp	r3, #163	; 0xa3
    6200:	d014      	beq.n	622c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf10>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    6202:	4b04      	ldr	r3, [pc, #16]	; (6214 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
    6204:	681b      	ldr	r3, [r3, #0]
    6206:	4905      	ldr	r1, [pc, #20]	; (621c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf00>)
    6208:	4618      	mov	r0, r3
    620a:	4b05      	ldr	r3, [pc, #20]	; (6220 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
    620c:	4798      	blx	r3
                return -1;
    620e:	f04f 33ff 	mov.w	r3, #4294967295
    6212:	e238      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    6214:	20001984 	.word	0x20001984
    6218:	00006cc9 	.word	0x00006cc9
    621c:	05040001 	.word	0x05040001
    6220:	00005291 	.word	0x00005291
    6224:	05040002 	.word	0x05040002
    6228:	00004745 	.word	0x00004745
            }

            SDO->bufferOffset = 0;
    622c:	4b9e      	ldr	r3, [pc, #632]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    622e:	681b      	ldr	r3, [r3, #0]
    6230:	2200      	movs	r2, #0
    6232:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
    6234:	4b9c      	ldr	r3, [pc, #624]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6236:	681b      	ldr	r3, [r3, #0]
    6238:	2200      	movs	r2, #0
    623a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
    623e:	4b9a      	ldr	r3, [pc, #616]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6240:	681b      	ldr	r3, [r3, #0]
    6242:	2200      	movs	r2, #0
    6244:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
    6248:	4b97      	ldr	r3, [pc, #604]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	2200      	movs	r2, #0
    624e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
    6252:	4b95      	ldr	r3, [pc, #596]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6254:	681b      	ldr	r3, [r3, #0]
    6256:	2226      	movs	r2, #38	; 0x26
    6258:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
    625c:	4b92      	ldr	r3, [pc, #584]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    625e:	681b      	ldr	r3, [r3, #0]
    6260:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    6264:	2b00      	cmp	r3, #0
    6266:	f000 8144 	beq.w	64f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11d6>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
    626a:	4b8f      	ldr	r3, [pc, #572]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    626c:	681b      	ldr	r3, [r3, #0]
    626e:	781b      	ldrb	r3, [r3, #0]
    6270:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
    6274:	2ba2      	cmp	r3, #162	; 0xa2
    6276:	d008      	beq.n	628a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf6e>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    6278:	4b8b      	ldr	r3, [pc, #556]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    627a:	681b      	ldr	r3, [r3, #0]
    627c:	498b      	ldr	r1, [pc, #556]	; (64ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1190>)
    627e:	4618      	mov	r0, r3
    6280:	4b8b      	ldr	r3, [pc, #556]	; (64b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
    6282:	4798      	blx	r3
                    return -1;
    6284:	f04f 33ff 	mov.w	r3, #4294967295
    6288:	e1fd      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
    628a:	4b87      	ldr	r3, [pc, #540]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	785b      	ldrb	r3, [r3, #1]
    6290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
    6294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    6298:	4a83      	ldr	r2, [pc, #524]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    629a:	6812      	ldr	r2, [r2, #0]
    629c:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    62a0:	4293      	cmp	r3, r2
    62a2:	dd08      	ble.n	62b6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf9a>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
    62a4:	4b80      	ldr	r3, [pc, #512]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	4982      	ldr	r1, [pc, #520]	; (64b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>)
    62aa:	4618      	mov	r0, r3
    62ac:	4b80      	ldr	r3, [pc, #512]	; (64b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
    62ae:	4798      	blx	r3
                    return -1;
    62b0:	f04f 33ff 	mov.w	r3, #4294967295
    62b4:	e1e7      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
    62b6:	4b7c      	ldr	r3, [pc, #496]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62b8:	681b      	ldr	r3, [r3, #0]
    62ba:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    62be:	2b00      	cmp	r3, #0
    62c0:	d033      	beq.n	632a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x100e>
    62c2:	4b79      	ldr	r3, [pc, #484]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62c4:	681b      	ldr	r3, [r3, #0]
    62c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    62ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    62ce:	429a      	cmp	r2, r3
    62d0:	d12b      	bne.n	632a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x100e>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
    62d2:	4b75      	ldr	r3, [pc, #468]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62d4:	681b      	ldr	r3, [r3, #0]
    62d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    62da:	4a73      	ldr	r2, [pc, #460]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62dc:	6812      	ldr	r2, [r2, #0]
    62de:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    62e2:	f1c2 0207 	rsb	r2, r2, #7
    62e6:	0092      	lsls	r2, r2, #2
    62e8:	b252      	sxtb	r2, r2
    62ea:	f062 023e 	orn	r2, r2, #62	; 0x3e
    62ee:	b252      	sxtb	r2, r2
    62f0:	b2d2      	uxtb	r2, r2
    62f2:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
    62f4:	4b6c      	ldr	r3, [pc, #432]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    62fc:	2b00      	cmp	r3, #0
    62fe:	d00b      	beq.n	6318 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xffc>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
    6300:	4b69      	ldr	r3, [pc, #420]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6302:	681b      	ldr	r3, [r3, #0]
    6304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6308:	1d99      	adds	r1, r3, #6
    630a:	4b67      	ldr	r3, [pc, #412]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	3374      	adds	r3, #116	; 0x74
    6310:	461a      	mov	r2, r3
    6312:	68f8      	ldr	r0, [r7, #12]
    6314:	4b68      	ldr	r3, [pc, #416]	; (64b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x119c>)
    6316:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
    6318:	4b63      	ldr	r3, [pc, #396]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	2227      	movs	r2, #39	; 0x27
    631e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
    6322:	2301      	movs	r3, #1
    6324:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
    6328:	e191      	b.n	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
    632a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    632e:	4613      	mov	r3, r2
    6330:	00db      	lsls	r3, r3, #3
    6332:	1a9b      	subs	r3, r3, r2
    6334:	63fb      	str	r3, [r7, #60]	; 0x3c
    6336:	2300      	movs	r3, #0
    6338:	63bb      	str	r3, [r7, #56]	; 0x38
    633a:	4b5b      	ldr	r3, [pc, #364]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    6340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6342:	429a      	cmp	r2, r3
    6344:	d912      	bls.n	636c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1050>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
    6346:	4b58      	ldr	r3, [pc, #352]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6348:	681b      	ldr	r3, [r3, #0]
    634a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    634e:	4413      	add	r3, r2
    6350:	4a55      	ldr	r2, [pc, #340]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6352:	6812      	ldr	r2, [r2, #0]
    6354:	6c51      	ldr	r1, [r2, #68]	; 0x44
    6356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6358:	440a      	add	r2, r1
    635a:	7812      	ldrb	r2, [r2, #0]
    635c:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
    635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6360:	3301      	adds	r3, #1
    6362:	63fb      	str	r3, [r7, #60]	; 0x3c
    6364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6366:	3301      	adds	r3, #1
    6368:	63bb      	str	r3, [r7, #56]	; 0x38
    636a:	e7e6      	b.n	633a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101e>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
    636c:	4b4e      	ldr	r3, [pc, #312]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    636e:	6819      	ldr	r1, [r3, #0]
    6370:	4b4d      	ldr	r3, [pc, #308]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6372:	681b      	ldr	r3, [r3, #0]
    6374:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    6376:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    637a:	4613      	mov	r3, r2
    637c:	00db      	lsls	r3, r3, #3
    637e:	1a9b      	subs	r3, r3, r2
    6380:	1ac3      	subs	r3, r0, r3
    6382:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
    6384:	4b48      	ldr	r3, [pc, #288]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	4a47      	ldr	r2, [pc, #284]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    638a:	6812      	ldr	r2, [r2, #0]
    638c:	7892      	ldrb	r2, [r2, #2]
    638e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
    6392:	4b45      	ldr	r3, [pc, #276]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6394:	681b      	ldr	r3, [r3, #0]
    6396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6398:	2b00      	cmp	r3, #0
    639a:	d168      	bne.n	646e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
    639c:	4b42      	ldr	r3, [pc, #264]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    63a2:	4b41      	ldr	r3, [pc, #260]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63a4:	681b      	ldr	r3, [r3, #0]
    63a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    63aa:	4619      	mov	r1, r3
    63ac:	460b      	mov	r3, r1
    63ae:	00db      	lsls	r3, r3, #3
    63b0:	1a5b      	subs	r3, r3, r1
    63b2:	429a      	cmp	r2, r3
    63b4:	d25b      	bcs.n	646e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
    63b6:	4b3c      	ldr	r3, [pc, #240]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63b8:	681b      	ldr	r3, [r3, #0]
    63ba:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    63be:	2b00      	cmp	r3, #0
    63c0:	d155      	bne.n	646e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
    63c2:	4b39      	ldr	r3, [pc, #228]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63c4:	681b      	ldr	r3, [r3, #0]
    63c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    63c8:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
    63ca:	4b37      	ldr	r3, [pc, #220]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63cc:	681b      	ldr	r3, [r3, #0]
    63ce:	4a36      	ldr	r2, [pc, #216]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63d0:	6812      	ldr	r2, [r2, #0]
    63d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
    63d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    63d6:	440a      	add	r2, r1
    63d8:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
    63da:	4b33      	ldr	r3, [pc, #204]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63dc:	681c      	ldr	r4, [r3, #0]
    63de:	4b32      	ldr	r3, [pc, #200]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63e0:	681b      	ldr	r3, [r3, #0]
    63e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    63e4:	4b30      	ldr	r3, [pc, #192]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    63ec:	461a      	mov	r2, r3
    63ee:	68f8      	ldr	r0, [r7, #12]
    63f0:	4b32      	ldr	r3, [pc, #200]	; (64bc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a0>)
    63f2:	4798      	blx	r3
    63f4:	4602      	mov	r2, r0
    63f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63f8:	1ad3      	subs	r3, r2, r3
    63fa:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
    63fc:	2120      	movs	r1, #32
    63fe:	68f8      	ldr	r0, [r7, #12]
    6400:	4b2f      	ldr	r3, [pc, #188]	; (64c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a4>)
    6402:	4798      	blx	r3
    6404:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
    6406:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6408:	2b00      	cmp	r3, #0
    640a:	d008      	beq.n	641e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1102>
                        CO_SDO_abort(SDO, abortCode);
    640c:	4b26      	ldr	r3, [pc, #152]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6412:	4618      	mov	r0, r3
    6414:	4b26      	ldr	r3, [pc, #152]	; (64b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
    6416:	4798      	blx	r3
                        return -1;
    6418:	f04f 33ff 	mov.w	r3, #4294967295
    641c:	e133      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
    641e:	4b22      	ldr	r3, [pc, #136]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6420:	681b      	ldr	r3, [r3, #0]
    6422:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    6426:	2b00      	cmp	r3, #0
    6428:	d010      	beq.n	644c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1130>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
    642a:	4b1f      	ldr	r3, [pc, #124]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    642c:	681c      	ldr	r4, [r3, #0]
    642e:	4b1e      	ldr	r3, [pc, #120]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6430:	681b      	ldr	r3, [r3, #0]
    6432:	6c59      	ldr	r1, [r3, #68]	; 0x44
    6434:	4b1c      	ldr	r3, [pc, #112]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    643a:	4b1b      	ldr	r3, [pc, #108]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6440:	b29b      	uxth	r3, r3
    6442:	68f8      	ldr	r0, [r7, #12]
    6444:	4d1f      	ldr	r5, [pc, #124]	; (64c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a8>)
    6446:	47a8      	blx	r5
    6448:	4603      	mov	r3, r0
    644a:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
    644c:	4b16      	ldr	r3, [pc, #88]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    644e:	681b      	ldr	r3, [r3, #0]
    6450:	4a15      	ldr	r2, [pc, #84]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6452:	6812      	ldr	r2, [r2, #0]
    6454:	6c51      	ldr	r1, [r2, #68]	; 0x44
    6456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6458:	4252      	negs	r2, r2
    645a:	440a      	add	r2, r1
    645c:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
    645e:	4b12      	ldr	r3, [pc, #72]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6460:	681b      	ldr	r3, [r3, #0]
    6462:	4a11      	ldr	r2, [pc, #68]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6464:	6812      	ldr	r2, [r2, #0]
    6466:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    6468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    646a:	440a      	add	r2, r1
    646c:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
    646e:	4b0e      	ldr	r3, [pc, #56]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6470:	681b      	ldr	r3, [r3, #0]
    6472:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6476:	461a      	mov	r2, r3
    6478:	4613      	mov	r3, r2
    647a:	00db      	lsls	r3, r3, #3
    647c:	1a9a      	subs	r2, r3, r2
    647e:	4b0a      	ldr	r3, [pc, #40]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6480:	681b      	ldr	r3, [r3, #0]
    6482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6484:	429a      	cmp	r2, r3
    6486:	d921      	bls.n	64cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b0>
    6488:	4b07      	ldr	r3, [pc, #28]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    648a:	681b      	ldr	r3, [r3, #0]
    648c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    6490:	2b00      	cmp	r3, #0
    6492:	d11b      	bne.n	64cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b0>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
    6494:	4b04      	ldr	r3, [pc, #16]	; (64a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
    6496:	681b      	ldr	r3, [r3, #0]
    6498:	490b      	ldr	r1, [pc, #44]	; (64c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11ac>)
    649a:	4618      	mov	r0, r3
    649c:	4b04      	ldr	r3, [pc, #16]	; (64b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
    649e:	4798      	blx	r3
                    return -1;
    64a0:	f04f 33ff 	mov.w	r3, #4294967295
    64a4:	e0ef      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    64a6:	bf00      	nop
    64a8:	20001984 	.word	0x20001984
    64ac:	05040001 	.word	0x05040001
    64b0:	00005291 	.word	0x00005291
    64b4:	05040003 	.word	0x05040003
    64b8:	00004715 	.word	0x00004715
    64bc:	00004c65 	.word	0x00004c65
    64c0:	00005035 	.word	0x00005035
    64c4:	00006cc9 	.word	0x00006cc9
    64c8:	05040002 	.word	0x05040002
                }

                SDO->bufferOffset = 0U;
    64cc:	4b70      	ldr	r3, [pc, #448]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64ce:	681b      	ldr	r3, [r3, #0]
    64d0:	2200      	movs	r2, #0
    64d2:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
    64d4:	4b6e      	ldr	r3, [pc, #440]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64d6:	681b      	ldr	r3, [r3, #0]
    64d8:	2200      	movs	r2, #0
    64da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
    64de:	4b6c      	ldr	r3, [pc, #432]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64e0:	681b      	ldr	r3, [r3, #0]
    64e2:	2200      	movs	r2, #0
    64e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
    64e8:	4b69      	ldr	r3, [pc, #420]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	2200      	movs	r2, #0
    64ee:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
    64f2:	4b67      	ldr	r3, [pc, #412]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64f4:	681b      	ldr	r3, [r3, #0]
    64f6:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    64fa:	4b65      	ldr	r3, [pc, #404]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    6502:	429a      	cmp	r2, r3
    6504:	d005      	beq.n	6512 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11f6>
    6506:	4b62      	ldr	r3, [pc, #392]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6508:	681b      	ldr	r3, [r3, #0]
    650a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    650e:	2b00      	cmp	r3, #0
    6510:	d001      	beq.n	6516 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11fa>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
    6512:	2301      	movs	r3, #1
    6514:	e0b7      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
    6516:	4b5e      	ldr	r3, [pc, #376]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6518:	681b      	ldr	r3, [r3, #0]
    651a:	2200      	movs	r2, #0
    651c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
    651e:	4b5c      	ldr	r3, [pc, #368]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6520:	681b      	ldr	r3, [r3, #0]
    6522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    6524:	4b5a      	ldr	r3, [pc, #360]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6526:	681b      	ldr	r3, [r3, #0]
    6528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    652a:	1ad3      	subs	r3, r2, r3
    652c:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
    652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6530:	2b07      	cmp	r3, #7
    6532:	d901      	bls.n	6538 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x121c>
                len = 7U;
    6534:	2307      	movs	r3, #7
    6536:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
    6538:	2300      	movs	r3, #0
    653a:	63fb      	str	r3, [r7, #60]	; 0x3c
    653c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    653e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6540:	429a      	cmp	r2, r3
    6542:	d215      	bcs.n	6570 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1254>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
    6544:	4b52      	ldr	r3, [pc, #328]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6546:	681b      	ldr	r3, [r3, #0]
    6548:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    654e:	1c59      	adds	r1, r3, #1
    6550:	4b4f      	ldr	r3, [pc, #316]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6552:	681b      	ldr	r3, [r3, #0]
    6554:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    6556:	4b4e      	ldr	r3, [pc, #312]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6558:	681a      	ldr	r2, [r3, #0]
    655a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    655c:	1c5d      	adds	r5, r3, #1
    655e:	6395      	str	r5, [r2, #56]	; 0x38
    6560:	4423      	add	r3, r4
    6562:	781a      	ldrb	r2, [r3, #0]
    6564:	1843      	adds	r3, r0, r1
    6566:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
    6568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    656a:	3301      	adds	r3, #1
    656c:	63fb      	str	r3, [r7, #60]	; 0x3c
    656e:	e7e5      	b.n	653c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1220>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
    6570:	4b47      	ldr	r3, [pc, #284]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    6578:	4b45      	ldr	r3, [pc, #276]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    657a:	681b      	ldr	r3, [r3, #0]
    657c:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    6580:	3101      	adds	r1, #1
    6582:	b2c9      	uxtb	r1, r1
    6584:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    6588:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    658c:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
    658e:	4b40      	ldr	r3, [pc, #256]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6590:	681b      	ldr	r3, [r3, #0]
    6592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6594:	4b3e      	ldr	r3, [pc, #248]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6596:	681b      	ldr	r3, [r3, #0]
    6598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    659a:	429a      	cmp	r2, r3
    659c:	d125      	bne.n	65ea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ce>
    659e:	4b3c      	ldr	r3, [pc, #240]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65a0:	681b      	ldr	r3, [r3, #0]
    65a2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    65a6:	2b00      	cmp	r3, #0
    65a8:	d01f      	beq.n	65ea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ce>
                SDO->CANtxBuff->data[0] |= 0x80;
    65aa:	4b39      	ldr	r3, [pc, #228]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65ac:	681b      	ldr	r3, [r3, #0]
    65ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    65b2:	4a37      	ldr	r2, [pc, #220]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65b4:	6812      	ldr	r2, [r2, #0]
    65b6:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
    65ba:	7952      	ldrb	r2, [r2, #5]
    65bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    65c0:	b2d2      	uxtb	r2, r2
    65c2:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
    65c4:	4b32      	ldr	r3, [pc, #200]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65c6:	681b      	ldr	r3, [r3, #0]
    65c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    65ca:	b2d2      	uxtb	r2, r2
    65cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
    65d0:	4b2f      	ldr	r3, [pc, #188]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	4a2e      	ldr	r2, [pc, #184]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65d6:	6812      	ldr	r2, [r2, #0]
    65d8:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
    65dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
    65e0:	4b2b      	ldr	r3, [pc, #172]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65e2:	681b      	ldr	r3, [r3, #0]
    65e4:	2201      	movs	r2, #1
    65e6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             canopen->CAN_Send(SDO->CANtxBuff);
    65ea:	4b2a      	ldr	r3, [pc, #168]	; (6694 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1378>)
    65ec:	681a      	ldr	r2, [r3, #0]
    65ee:	4b28      	ldr	r3, [pc, #160]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    65f6:	4619      	mov	r1, r3
    65f8:	4610      	mov	r0, r2
    65fa:	4b27      	ldr	r3, [pc, #156]	; (6698 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x137c>)
    65fc:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
    65fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6600:	2b00      	cmp	r3, #0
    6602:	d002      	beq.n	660a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ee>
                *timerNext_ms = 0;
    6604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6606:	2200      	movs	r2, #0
    6608:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
    660a:	2301      	movs	r3, #1
    660c:	e03b      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
    660e:	4b20      	ldr	r3, [pc, #128]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6610:	681b      	ldr	r3, [r3, #0]
    6612:	781b      	ldrb	r3, [r3, #0]
    6614:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    6618:	2ba1      	cmp	r3, #161	; 0xa1
    661a:	d008      	beq.n	662e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1312>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
    661c:	4b1c      	ldr	r3, [pc, #112]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	491e      	ldr	r1, [pc, #120]	; (669c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1380>)
    6622:	4618      	mov	r0, r3
    6624:	4b1e      	ldr	r3, [pc, #120]	; (66a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1384>)
    6626:	4798      	blx	r3
                return -1;
    6628:	f04f 33ff 	mov.w	r3, #4294967295
    662c:	e02b      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            SDO->state = CO_SDO_ST_IDLE;
    662e:	4b18      	ldr	r3, [pc, #96]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	2200      	movs	r2, #0
    6634:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
    6638:	e009      	b.n	664e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
    663a:	4b15      	ldr	r3, [pc, #84]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    663c:	681b      	ldr	r3, [r3, #0]
    663e:	4919      	ldr	r1, [pc, #100]	; (66a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1388>)
    6640:	4618      	mov	r0, r3
    6642:	4b17      	ldr	r3, [pc, #92]	; (66a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1384>)
    6644:	4798      	blx	r3
            return -1;
    6646:	f04f 33ff 	mov.w	r3, #4294967295
    664a:	e01c      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            break;
    664c:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
    664e:	4b10      	ldr	r3, [pc, #64]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6650:	681b      	ldr	r3, [r3, #0]
    6652:	2200      	movs	r2, #0
    6654:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
    6658:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
    665c:	2b00      	cmp	r3, #0
    665e:	d009      	beq.n	6674 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1358>
        canopen->CAN_Send(SDO->CANtxBuff);
    6660:	4b0c      	ldr	r3, [pc, #48]	; (6694 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1378>)
    6662:	681a      	ldr	r2, [r3, #0]
    6664:	4b0a      	ldr	r3, [pc, #40]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    666c:	4619      	mov	r1, r3
    666e:	4610      	mov	r0, r2
    6670:	4b09      	ldr	r3, [pc, #36]	; (6698 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x137c>)
    6672:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
    6674:	4b06      	ldr	r3, [pc, #24]	; (6690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    667c:	2b00      	cmp	r3, #0
    667e:	d001      	beq.n	6684 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1368>
        return 1;
    6680:	2301      	movs	r3, #1
    6682:	e000      	b.n	6686 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    return 0;
    6684:	2300      	movs	r3, #0
}
    6686:	4618      	mov	r0, r3
    6688:	3748      	adds	r7, #72	; 0x48
    668a:	46bd      	mov	sp, r7
    668c:	bdb0      	pop	{r4, r5, r7, pc}
    668e:	bf00      	nop
    6690:	20001984 	.word	0x20001984
    6694:	20001964 	.word	0x20001964
    6698:	00001b45 	.word	0x00001b45
    669c:	05040001 	.word	0x05040001
    66a0:	00005291 	.word	0x00005291
    66a4:	06040047 	.word	0x06040047

000066a8 <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
    66a8:	b480      	push	{r7}
    66aa:	b083      	sub	sp, #12
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	4618      	mov	r0, r3
    66b4:	370c      	adds	r7, #12
    66b6:	46bd      	mov	sp, r7
    66b8:	bc80      	pop	{r7}
    66ba:	4770      	bx	lr

000066bc <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
    66bc:	b480      	push	{r7}
    66be:	b083      	sub	sp, #12
    66c0:	af00      	add	r7, sp, #0
    66c2:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	4618      	mov	r0, r3
    66c8:	370c      	adds	r7, #12
    66ca:	46bd      	mov	sp, r7
    66cc:	bc80      	pop	{r7}
    66ce:	4770      	bx	lr

000066d0 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
    66d0:	b480      	push	{r7}
    66d2:	b085      	sub	sp, #20
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
    66de:	68fb      	ldr	r3, [r7, #12]
    66e0:	685b      	ldr	r3, [r3, #4]
    66e2:	781b      	ldrb	r3, [r3, #0]
    66e4:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
    66e6:	7afb      	ldrb	r3, [r7, #11]
    66e8:	2b05      	cmp	r3, #5
    66ea:	d002      	beq.n	66f2 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
    66ec:	7afb      	ldrb	r3, [r7, #11]
    66ee:	2b7f      	cmp	r3, #127	; 0x7f
    66f0:	d132      	bne.n	6758 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
    66f2:	68fb      	ldr	r3, [r7, #12]
    66f4:	7e1b      	ldrb	r3, [r3, #24]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d10e      	bne.n	6718 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
    66fa:	683b      	ldr	r3, [r7, #0]
    66fc:	7d1b      	ldrb	r3, [r3, #20]
    66fe:	2b00      	cmp	r3, #0
    6700:	d103      	bne.n	670a <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
    6702:	68fb      	ldr	r3, [r7, #12]
    6704:	2201      	movs	r2, #1
    6706:	769a      	strb	r2, [r3, #26]
    6708:	e018      	b.n	673c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
    670a:	683b      	ldr	r3, [r7, #0]
    670c:	7d1b      	ldrb	r3, [r3, #20]
    670e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6712:	68fb      	ldr	r3, [r7, #12]
    6714:	625a      	str	r2, [r3, #36]	; 0x24
    6716:	e011      	b.n	673c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
    6718:	683b      	ldr	r3, [r7, #0]
    671a:	7d1b      	ldrb	r3, [r3, #20]
    671c:	2b01      	cmp	r3, #1
    671e:	d107      	bne.n	6730 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
    6720:	683b      	ldr	r3, [r7, #0]
    6722:	7d5a      	ldrb	r2, [r3, #21]
    6724:	68fb      	ldr	r3, [r7, #12]
    6726:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
    6728:	68fb      	ldr	r3, [r7, #12]
    672a:	2201      	movs	r2, #1
    672c:	769a      	strb	r2, [r3, #26]
    672e:	e005      	b.n	673c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
    6730:	683b      	ldr	r3, [r7, #0]
    6732:	7d1b      	ldrb	r3, [r3, #20]
    6734:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
    673c:	68fb      	ldr	r3, [r7, #12]
    673e:	7e9b      	ldrb	r3, [r3, #26]
    6740:	2b00      	cmp	r3, #0
    6742:	d009      	beq.n	6758 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    6744:	68fb      	ldr	r3, [r7, #12]
    6746:	7edb      	ldrb	r3, [r3, #27]
    6748:	2b00      	cmp	r3, #0
    674a:	bf0c      	ite	eq
    674c:	2301      	moveq	r3, #1
    674e:	2300      	movne	r3, #0
    6750:	b2db      	uxtb	r3, r3
    6752:	461a      	mov	r2, r3
    6754:	68fb      	ldr	r3, [r7, #12]
    6756:	76da      	strb	r2, [r3, #27]
        }
    }
}
    6758:	bf00      	nop
    675a:	3714      	adds	r7, #20
    675c:	46bd      	mov	sp, r7
    675e:	bc80      	pop	{r7}
    6760:	4770      	bx	lr
	...

00006764 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
    6764:	b590      	push	{r4, r7, lr}
    6766:	b08b      	sub	sp, #44	; 0x2c
    6768:	af04      	add	r7, sp, #16
    676a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    676c:	2300      	movs	r3, #0
    676e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	681b      	ldr	r3, [r3, #0]
    6774:	60fb      	str	r3, [r7, #12]
    value =canopen->CO_getUint32(ODF_arg->data);
    6776:	4b35      	ldr	r3, [pc, #212]	; (684c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	1d1a      	adds	r2, r3, #4
    677c:	687b      	ldr	r3, [r7, #4]
    677e:	685b      	ldr	r3, [r3, #4]
    6780:	4619      	mov	r1, r3
    6782:	4610      	mov	r0, r2
    6784:	4b32      	ldr	r3, [pc, #200]	; (6850 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
    6786:	4798      	blx	r3
    6788:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	7f5b      	ldrb	r3, [r3, #29]
    678e:	2b00      	cmp	r3, #0
    6790:	d157      	bne.n	6842 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
    6792:	2300      	movs	r3, #0
    6794:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
    6796:	68bb      	ldr	r3, [r7, #8]
    6798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    679c:	2b00      	cmp	r3, #0
    679e:	d002      	beq.n	67a6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
    67a0:	4b2c      	ldr	r3, [pc, #176]	; (6854 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
    67a2:	617b      	str	r3, [r7, #20]
    67a4:	e00d      	b.n	67c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
    67a6:	68bb      	ldr	r3, [r7, #8]
    67a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    67ac:	2b00      	cmp	r3, #0
    67ae:	d008      	beq.n	67c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
    67b0:	68fb      	ldr	r3, [r7, #12]
    67b2:	7a1b      	ldrb	r3, [r3, #8]
    67b4:	2b00      	cmp	r3, #0
    67b6:	d002      	beq.n	67be <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
    67b8:	4b27      	ldr	r3, [pc, #156]	; (6858 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
    67ba:	617b      	str	r3, [r7, #20]
    67bc:	e001      	b.n	67c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
    67be:	2301      	movs	r3, #1
    67c0:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
    67c2:	697b      	ldr	r3, [r7, #20]
    67c4:	2b00      	cmp	r3, #0
    67c6:	d13c      	bne.n	6842 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
    67c8:	68bb      	ldr	r3, [r7, #8]
    67ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
    67ce:	68fb      	ldr	r3, [r7, #12]
    67d0:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
    67d2:	7cfb      	ldrb	r3, [r7, #19]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d021      	beq.n	681c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
    67d8:	2300      	movs	r3, #0
    67da:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	7e1b      	ldrb	r3, [r3, #24]
    67e0:	2b00      	cmp	r3, #0
    67e2:	d007      	beq.n	67f4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
    67e4:	2301      	movs	r3, #1
    67e6:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
    67e8:	68fb      	ldr	r3, [r7, #12]
    67ea:	2200      	movs	r2, #0
    67ec:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
    67ee:	68fb      	ldr	r3, [r7, #12]
    67f0:	2200      	movs	r2, #0
    67f2:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen->CAN_Tx_BufferInit(
    67f4:	4b15      	ldr	r3, [pc, #84]	; (684c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    67f6:	6818      	ldr	r0, [r3, #0]
    67f8:	68fb      	ldr	r3, [r7, #12]
    67fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    67fc:	68fb      	ldr	r3, [r7, #12]
    67fe:	68da      	ldr	r2, [r3, #12]
    6800:	2300      	movs	r3, #0
    6802:	9301      	str	r3, [sp, #4]
    6804:	7cbb      	ldrb	r3, [r7, #18]
    6806:	9300      	str	r3, [sp, #0]
    6808:	2300      	movs	r3, #0
    680a:	4c14      	ldr	r4, [pc, #80]	; (685c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
    680c:	47a0      	blx	r4
    680e:	4602      	mov	r2, r0
    6810:	68fb      	ldr	r3, [r7, #12]
    6812:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
    6814:	68fb      	ldr	r3, [r7, #12]
    6816:	2201      	movs	r2, #1
    6818:	721a      	strb	r2, [r3, #8]
    681a:	e002      	b.n	6822 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
    681c:	68fb      	ldr	r3, [r7, #12]
    681e:	2200      	movs	r2, #0
    6820:	721a      	strb	r2, [r3, #8]
            }

            canopen->CAN_Rx_BufferInit(
    6822:	4b0a      	ldr	r3, [pc, #40]	; (684c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    6824:	6818      	ldr	r0, [r3, #0]
    6826:	68fb      	ldr	r3, [r7, #12]
    6828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    682a:	68fb      	ldr	r3, [r7, #12]
    682c:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
    682e:	4b0c      	ldr	r3, [pc, #48]	; (6860 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
    6830:	9302      	str	r3, [sp, #8]
    6832:	68fb      	ldr	r3, [r7, #12]
    6834:	9301      	str	r3, [sp, #4]
    6836:	2300      	movs	r3, #0
    6838:	9300      	str	r3, [sp, #0]
    683a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    683e:	4c09      	ldr	r4, [pc, #36]	; (6864 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
    6840:	47a0      	blx	r4
        }
    }

    return ret;
    6842:	697b      	ldr	r3, [r7, #20]
}
    6844:	4618      	mov	r0, r3
    6846:	371c      	adds	r7, #28
    6848:	46bd      	mov	sp, r7
    684a:	bd90      	pop	{r4, r7, pc}
    684c:	20001964 	.word	0x20001964
    6850:	000046a9 	.word	0x000046a9
    6854:	06090030 	.word	0x06090030
    6858:	08000022 	.word	0x08000022
    685c:	00001a99 	.word	0x00001a99
    6860:	000066d1 	.word	0x000066d1
    6864:	00001999 	.word	0x00001999

00006868 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
    6868:	b580      	push	{r7, lr}
    686a:	b086      	sub	sp, #24
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    6870:	2300      	movs	r3, #0
    6872:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	681b      	ldr	r3, [r3, #0]
    6878:	613b      	str	r3, [r7, #16]
    value = canopen->CO_getUint32(ODF_arg->data);
    687a:	4b19      	ldr	r3, [pc, #100]	; (68e0 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	1d1a      	adds	r2, r3, #4
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	685b      	ldr	r3, [r3, #4]
    6884:	4619      	mov	r1, r3
    6886:	4610      	mov	r0, r2
    6888:	4b16      	ldr	r3, [pc, #88]	; (68e4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
    688a:	4798      	blx	r3
    688c:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	7f5b      	ldrb	r3, [r3, #29]
    6892:	2b00      	cmp	r3, #0
    6894:	d11f      	bne.n	68d6 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
    6896:	693b      	ldr	r3, [r7, #16]
    6898:	691b      	ldr	r3, [r3, #16]
    689a:	2b00      	cmp	r3, #0
    689c:	d105      	bne.n	68aa <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
    689e:	68fb      	ldr	r3, [r7, #12]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d002      	beq.n	68aa <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
    68a4:	693b      	ldr	r3, [r7, #16]
    68a6:	2200      	movs	r2, #0
    68a8:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
    68aa:	693b      	ldr	r3, [r7, #16]
    68ac:	68fa      	ldr	r2, [r7, #12]
    68ae:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
    68b0:	68fb      	ldr	r3, [r7, #12]
    68b2:	085a      	lsrs	r2, r3, #1
    68b4:	4613      	mov	r3, r2
    68b6:	005b      	lsls	r3, r3, #1
    68b8:	441a      	add	r2, r3
    68ba:	693b      	ldr	r3, [r7, #16]
    68bc:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
    68be:	693b      	ldr	r3, [r7, #16]
    68c0:	695a      	ldr	r2, [r3, #20]
    68c2:	68fb      	ldr	r3, [r7, #12]
    68c4:	429a      	cmp	r2, r3
    68c6:	d203      	bcs.n	68d0 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
    68c8:	693b      	ldr	r3, [r7, #16]
    68ca:	f04f 32ff 	mov.w	r2, #4294967295
    68ce:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
    68d0:	693b      	ldr	r3, [r7, #16]
    68d2:	2200      	movs	r2, #0
    68d4:	621a      	str	r2, [r3, #32]
    }

    return ret;
    68d6:	697b      	ldr	r3, [r7, #20]
}
    68d8:	4618      	mov	r0, r3
    68da:	3718      	adds	r7, #24
    68dc:	46bd      	mov	sp, r7
    68de:	bd80      	pop	{r7, pc}
    68e0:	20001964 	.word	0x20001964
    68e4:	000046a9 	.word	0x000046a9

000068e8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
    68e8:	b590      	push	{r4, r7, lr}
    68ea:	b089      	sub	sp, #36	; 0x24
    68ec:	af02      	add	r7, sp, #8
    68ee:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    68f0:	2300      	movs	r3, #0
    68f2:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	685b      	ldr	r3, [r3, #4]
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	7f5b      	ldrb	r3, [r3, #29]
    6906:	2b00      	cmp	r3, #0
    6908:	d12c      	bne.n	6964 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
    690a:	2300      	movs	r3, #0
    690c:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
    690e:	68fb      	ldr	r3, [r7, #12]
    6910:	691b      	ldr	r3, [r3, #16]
    6912:	2b00      	cmp	r3, #0
    6914:	d002      	beq.n	691c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
    6916:	4b16      	ldr	r3, [pc, #88]	; (6970 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
    6918:	617b      	str	r3, [r7, #20]
    691a:	e023      	b.n	6964 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
    691c:	7afb      	ldrb	r3, [r7, #11]
    691e:	2b01      	cmp	r3, #1
    6920:	d005      	beq.n	692e <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
    6922:	7afb      	ldrb	r3, [r7, #11]
    6924:	2bf0      	cmp	r3, #240	; 0xf0
    6926:	dd05      	ble.n	6934 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
    6928:	7afb      	ldrb	r3, [r7, #11]
    692a:	2bff      	cmp	r3, #255	; 0xff
    692c:	dc02      	bgt.n	6934 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
    692e:	4b11      	ldr	r3, [pc, #68]	; (6974 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
    6930:	617b      	str	r3, [r7, #20]
    6932:	e017      	b.n	6964 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
    6934:	68fb      	ldr	r3, [r7, #12]
    6936:	7afa      	ldrb	r2, [r7, #11]
    6938:	761a      	strb	r2, [r3, #24]
            if(value != 0){
    693a:	7afb      	ldrb	r3, [r7, #11]
    693c:	2b00      	cmp	r3, #0
    693e:	d001      	beq.n	6944 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
    6940:	2301      	movs	r3, #1
    6942:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen->CAN_Tx_BufferInit(
    6944:	4b0c      	ldr	r3, [pc, #48]	; (6978 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
    6946:	6818      	ldr	r0, [r3, #0]
    6948:	68fb      	ldr	r3, [r7, #12]
    694a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    694c:	68fb      	ldr	r3, [r7, #12]
    694e:	68da      	ldr	r2, [r3, #12]
    6950:	2300      	movs	r3, #0
    6952:	9301      	str	r3, [sp, #4]
    6954:	7cfb      	ldrb	r3, [r7, #19]
    6956:	9300      	str	r3, [sp, #0]
    6958:	2300      	movs	r3, #0
    695a:	4c08      	ldr	r4, [pc, #32]	; (697c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
    695c:	47a0      	blx	r4
    695e:	4602      	mov	r2, r0
    6960:	68fb      	ldr	r3, [r7, #12]
    6962:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
    6964:	697b      	ldr	r3, [r7, #20]
}
    6966:	4618      	mov	r0, r3
    6968:	371c      	adds	r7, #28
    696a:	46bd      	mov	sp, r7
    696c:	bd90      	pop	{r4, r7, pc}
    696e:	bf00      	nop
    6970:	08000022 	.word	0x08000022
    6974:	06090030 	.word	0x06090030
    6978:	20001964 	.word	0x20001964
    697c:	00001a99 	.word	0x00001a99

00006980 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    6980:	b590      	push	{r4, r7, lr}
    6982:	b08b      	sub	sp, #44	; 0x2c
    6984:	af04      	add	r7, sp, #16
    6986:	60f8      	str	r0, [r7, #12]
    6988:	60b9      	str	r1, [r7, #8]
    698a:	607a      	str	r2, [r7, #4]
    698c:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
    698e:	2300      	movs	r3, #0
    6990:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    6992:	68bb      	ldr	r3, [r7, #8]
    6994:	2b00      	cmp	r3, #0
    6996:	d00e      	beq.n	69b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	2b00      	cmp	r3, #0
    699c:	d00b      	beq.n	69b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    699e:	683b      	ldr	r3, [r7, #0]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d008      	beq.n	69b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    69a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    69a6:	2b00      	cmp	r3, #0
    69a8:	d005      	beq.n	69b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    69aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    69ac:	2b00      	cmp	r3, #0
    69ae:	d002      	beq.n	69b6 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
    69b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69b2:	2b00      	cmp	r3, #0
    69b4:	d102      	bne.n	69bc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    69b6:	f04f 33ff 	mov.w	r3, #4294967295
    69ba:	e096      	b.n	6aea <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    69bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    69c2:	2b00      	cmp	r3, #0
    69c4:	bf14      	ite	ne
    69c6:	2301      	movne	r3, #1
    69c8:	2300      	moveq	r3, #0
    69ca:	b2db      	uxtb	r3, r3
    69cc:	461a      	mov	r2, r3
    69ce:	68bb      	ldr	r3, [r7, #8]
    69d0:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
    69d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
    69d8:	68bb      	ldr	r3, [r7, #8]
    69da:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
    69dc:	68bb      	ldr	r3, [r7, #8]
    69de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    69e0:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
    69e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    69e4:	085a      	lsrs	r2, r3, #1
    69e6:	4613      	mov	r3, r2
    69e8:	005b      	lsls	r3, r3, #1
    69ea:	441a      	add	r2, r3
    69ec:	68bb      	ldr	r3, [r7, #8]
    69ee:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
    69f0:	68bb      	ldr	r3, [r7, #8]
    69f2:	695a      	ldr	r2, [r3, #20]
    69f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    69f6:	429a      	cmp	r2, r3
    69f8:	d203      	bcs.n	6a02 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
    69fa:	68bb      	ldr	r3, [r7, #8]
    69fc:	f04f 32ff 	mov.w	r2, #4294967295
    6a00:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
    6a02:	68bb      	ldr	r3, [r7, #8]
    6a04:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    6a08:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
    6a0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d001      	beq.n	6a16 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
    6a12:	2301      	movs	r3, #1
    6a14:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
    6a16:	68bb      	ldr	r3, [r7, #8]
    6a18:	2201      	movs	r2, #1
    6a1a:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
    6a1c:	68bb      	ldr	r3, [r7, #8]
    6a1e:	2200      	movs	r2, #0
    6a20:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
    6a22:	68bb      	ldr	r3, [r7, #8]
    6a24:	2200      	movs	r2, #0
    6a26:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
    6a28:	68bb      	ldr	r3, [r7, #8]
    6a2a:	2200      	movs	r2, #0
    6a2c:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
    6a2e:	68bb      	ldr	r3, [r7, #8]
    6a30:	2200      	movs	r2, #0
    6a32:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
    6a34:	68bb      	ldr	r3, [r7, #8]
    6a36:	2200      	movs	r2, #0
    6a38:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
    6a3a:	68bb      	ldr	r3, [r7, #8]
    6a3c:	687a      	ldr	r2, [r7, #4]
    6a3e:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
    6a40:	68bb      	ldr	r3, [r7, #8]
    6a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6a44:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
    6a46:	68bb      	ldr	r3, [r7, #8]
    6a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6a4a:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
    6a4c:	68bb      	ldr	r3, [r7, #8]
    6a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
    6a52:	4b28      	ldr	r3, [pc, #160]	; (6af4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6a54:	681b      	ldr	r3, [r3, #0]
    6a56:	1d18      	adds	r0, r3, #4
    6a58:	2300      	movs	r3, #0
    6a5a:	9301      	str	r3, [sp, #4]
    6a5c:	2300      	movs	r3, #0
    6a5e:	9300      	str	r3, [sp, #0]
    6a60:	68bb      	ldr	r3, [r7, #8]
    6a62:	4a25      	ldr	r2, [pc, #148]	; (6af8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
    6a64:	f241 0105 	movw	r1, #4101	; 0x1005
    6a68:	4c24      	ldr	r4, [pc, #144]	; (6afc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    6a6a:	47a0      	blx	r4
    canopen->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
    6a6c:	4b21      	ldr	r3, [pc, #132]	; (6af4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6a6e:	681b      	ldr	r3, [r3, #0]
    6a70:	1d18      	adds	r0, r3, #4
    6a72:	2300      	movs	r3, #0
    6a74:	9301      	str	r3, [sp, #4]
    6a76:	2300      	movs	r3, #0
    6a78:	9300      	str	r3, [sp, #0]
    6a7a:	68bb      	ldr	r3, [r7, #8]
    6a7c:	4a20      	ldr	r2, [pc, #128]	; (6b00 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
    6a7e:	f241 0106 	movw	r1, #4102	; 0x1006
    6a82:	4c1e      	ldr	r4, [pc, #120]	; (6afc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    6a84:	47a0      	blx	r4
    canopen->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
    6a86:	4b1b      	ldr	r3, [pc, #108]	; (6af4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6a88:	681b      	ldr	r3, [r3, #0]
    6a8a:	1d18      	adds	r0, r3, #4
    6a8c:	2300      	movs	r3, #0
    6a8e:	9301      	str	r3, [sp, #4]
    6a90:	2300      	movs	r3, #0
    6a92:	9300      	str	r3, [sp, #0]
    6a94:	68bb      	ldr	r3, [r7, #8]
    6a96:	4a1b      	ldr	r2, [pc, #108]	; (6b04 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
    6a98:	f241 0119 	movw	r1, #4121	; 0x1019
    6a9c:	4c17      	ldr	r4, [pc, #92]	; (6afc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    6a9e:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen->CAN_Rx_BufferInit(
    6aa0:	4b14      	ldr	r3, [pc, #80]	; (6af4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6aa2:	6818      	ldr	r0, [r3, #0]
    6aa4:	68bb      	ldr	r3, [r7, #8]
    6aa6:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
    6aa8:	4b17      	ldr	r3, [pc, #92]	; (6b08 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
    6aaa:	9302      	str	r3, [sp, #8]
    6aac:	68bb      	ldr	r3, [r7, #8]
    6aae:	9301      	str	r3, [sp, #4]
    6ab0:	2300      	movs	r3, #0
    6ab2:	9300      	str	r3, [sp, #0]
    6ab4:	f240 73ff 	movw	r3, #2047	; 0x7ff
    6ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6aba:	4c14      	ldr	r4, [pc, #80]	; (6b0c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
    6abc:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
    6abe:	68bb      	ldr	r3, [r7, #8]
    6ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6ac2:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
    6ac4:	68bb      	ldr	r3, [r7, #8]
    6ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6ac8:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen->CAN_Tx_BufferInit(
    6aca:	4b0a      	ldr	r3, [pc, #40]	; (6af4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    6acc:	6818      	ldr	r0, [r3, #0]
    6ace:	68bb      	ldr	r3, [r7, #8]
    6ad0:	68da      	ldr	r2, [r3, #12]
    6ad2:	2300      	movs	r3, #0
    6ad4:	9301      	str	r3, [sp, #4]
    6ad6:	7dfb      	ldrb	r3, [r7, #23]
    6ad8:	9300      	str	r3, [sp, #0]
    6ada:	2300      	movs	r3, #0
    6adc:	6c79      	ldr	r1, [r7, #68]	; 0x44
    6ade:	4c0c      	ldr	r4, [pc, #48]	; (6b10 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
    6ae0:	47a0      	blx	r4
    6ae2:	4602      	mov	r2, r0
    6ae4:	68bb      	ldr	r3, [r7, #8]
    6ae6:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
    6ae8:	2300      	movs	r3, #0
}
    6aea:	4618      	mov	r0, r3
    6aec:	371c      	adds	r7, #28
    6aee:	46bd      	mov	sp, r7
    6af0:	bd90      	pop	{r4, r7, pc}
    6af2:	bf00      	nop
    6af4:	20001964 	.word	0x20001964
    6af8:	00006765 	.word	0x00006765
    6afc:	00004afd 	.word	0x00004afd
    6b00:	00006869 	.word	0x00006869
    6b04:	000068e9 	.word	0x000068e9
    6b08:	000066d1 	.word	0x000066d1
    6b0c:	00001999 	.word	0x00001999
    6b10:	00001a99 	.word	0x00001a99

00006b14 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
    6b14:	b590      	push	{r4, r7, lr}
    6b16:	b089      	sub	sp, #36	; 0x24
    6b18:	af02      	add	r7, sp, #8
    6b1a:	60f8      	str	r0, [r7, #12]
    6b1c:	60b9      	str	r1, [r7, #8]
    6b1e:	607a      	str	r2, [r7, #4]
    6b20:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
    6b22:	2300      	movs	r3, #0
    6b24:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
    6b26:	68bb      	ldr	r3, [r7, #8]
    6b28:	685b      	ldr	r3, [r3, #4]
    6b2a:	781b      	ldrb	r3, [r3, #0]
    6b2c:	2b05      	cmp	r3, #5
    6b2e:	d005      	beq.n	6b3c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
    6b30:	68bb      	ldr	r3, [r7, #8]
    6b32:	685b      	ldr	r3, [r3, #4]
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	2b7f      	cmp	r3, #127	; 0x7f
    6b38:	f040 808e 	bne.w	6c58 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
    6b3c:	68bb      	ldr	r3, [r7, #8]
    6b3e:	6a1a      	ldr	r2, [r3, #32]
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	4413      	add	r3, r2
    6b44:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
    6b46:	68bb      	ldr	r3, [r7, #8]
    6b48:	6a1a      	ldr	r2, [r3, #32]
    6b4a:	693b      	ldr	r3, [r7, #16]
    6b4c:	429a      	cmp	r2, r3
    6b4e:	d202      	bcs.n	6b56 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
    6b50:	68bb      	ldr	r3, [r7, #8]
    6b52:	693a      	ldr	r2, [r7, #16]
    6b54:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
    6b56:	68bb      	ldr	r3, [r7, #8]
    6b58:	7e9b      	ldrb	r3, [r3, #26]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d007      	beq.n	6b6e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
    6b5e:	68bb      	ldr	r3, [r7, #8]
    6b60:	2200      	movs	r2, #0
    6b62:	621a      	str	r2, [r3, #32]
            ret = 1;
    6b64:	2301      	movs	r3, #1
    6b66:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
    6b68:	68bb      	ldr	r3, [r7, #8]
    6b6a:	2200      	movs	r2, #0
    6b6c:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
    6b6e:	68bb      	ldr	r3, [r7, #8]
    6b70:	7a1b      	ldrb	r3, [r3, #8]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d03a      	beq.n	6bec <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
    6b76:	68bb      	ldr	r3, [r7, #8]
    6b78:	691b      	ldr	r3, [r3, #16]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d036      	beq.n	6bec <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
    6b7e:	68bb      	ldr	r3, [r7, #8]
    6b80:	6a1a      	ldr	r2, [r3, #32]
    6b82:	68bb      	ldr	r3, [r7, #8]
    6b84:	691b      	ldr	r3, [r3, #16]
    6b86:	429a      	cmp	r2, r3
    6b88:	d330      	bcc.n	6bec <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
    6b8a:	68bb      	ldr	r3, [r7, #8]
    6b8c:	7f1b      	ldrb	r3, [r3, #28]
    6b8e:	3301      	adds	r3, #1
    6b90:	b2da      	uxtb	r2, r3
    6b92:	68bb      	ldr	r3, [r7, #8]
    6b94:	771a      	strb	r2, [r3, #28]
    6b96:	68bb      	ldr	r3, [r7, #8]
    6b98:	7f1b      	ldrb	r3, [r3, #28]
    6b9a:	461a      	mov	r2, r3
    6b9c:	68bb      	ldr	r3, [r7, #8]
    6b9e:	7e1b      	ldrb	r3, [r3, #24]
    6ba0:	429a      	cmp	r2, r3
    6ba2:	bfcc      	ite	gt
    6ba4:	2301      	movgt	r3, #1
    6ba6:	2300      	movle	r3, #0
    6ba8:	b2db      	uxtb	r3, r3
    6baa:	2b00      	cmp	r3, #0
    6bac:	d002      	beq.n	6bb4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
    6bae:	68bb      	ldr	r3, [r7, #8]
    6bb0:	2201      	movs	r2, #1
    6bb2:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
    6bb4:	68bb      	ldr	r3, [r7, #8]
    6bb6:	2200      	movs	r2, #0
    6bb8:	621a      	str	r2, [r3, #32]
                ret = 1;
    6bba:	2301      	movs	r3, #1
    6bbc:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    6bbe:	68bb      	ldr	r3, [r7, #8]
    6bc0:	7edb      	ldrb	r3, [r3, #27]
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	bf0c      	ite	eq
    6bc6:	2301      	moveq	r3, #1
    6bc8:	2300      	movne	r3, #0
    6bca:	b2db      	uxtb	r3, r3
    6bcc:	461a      	mov	r2, r3
    6bce:	68bb      	ldr	r3, [r7, #8]
    6bd0:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
    6bd2:	68bb      	ldr	r3, [r7, #8]
    6bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6bd6:	68ba      	ldr	r2, [r7, #8]
    6bd8:	7f12      	ldrb	r2, [r2, #28]
    6bda:	715a      	strb	r2, [r3, #5]
                canopen->CAN_Send(SYNC->CANtxBuff);
    6bdc:	4b2d      	ldr	r3, [pc, #180]	; (6c94 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    6bde:	681a      	ldr	r2, [r3, #0]
    6be0:	68bb      	ldr	r3, [r7, #8]
    6be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6be4:	4619      	mov	r1, r3
    6be6:	4610      	mov	r0, r2
    6be8:	4b2b      	ldr	r3, [pc, #172]	; (6c98 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
    6bea:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
    6bec:	683b      	ldr	r3, [r7, #0]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d012      	beq.n	6c18 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
    6bf2:	68bb      	ldr	r3, [r7, #8]
    6bf4:	6a1a      	ldr	r2, [r3, #32]
    6bf6:	683b      	ldr	r3, [r7, #0]
    6bf8:	429a      	cmp	r2, r3
    6bfa:	d909      	bls.n	6c10 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
    6bfc:	68bb      	ldr	r3, [r7, #8]
    6bfe:	7e5b      	ldrb	r3, [r3, #25]
    6c00:	2b00      	cmp	r3, #0
    6c02:	d001      	beq.n	6c08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
    6c04:	2302      	movs	r3, #2
    6c06:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
    6c08:	68bb      	ldr	r3, [r7, #8]
    6c0a:	2200      	movs	r2, #0
    6c0c:	765a      	strb	r2, [r3, #25]
    6c0e:	e006      	b.n	6c1e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
    6c10:	68bb      	ldr	r3, [r7, #8]
    6c12:	2201      	movs	r2, #1
    6c14:	765a      	strb	r2, [r3, #25]
    6c16:	e002      	b.n	6c1e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
    6c18:	68bb      	ldr	r3, [r7, #8]
    6c1a:	2201      	movs	r2, #1
    6c1c:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    6c1e:	68bb      	ldr	r3, [r7, #8]
    6c20:	691b      	ldr	r3, [r3, #16]
    6c22:	2b00      	cmp	r3, #0
    6c24:	d01c      	beq.n	6c60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    6c26:	68bb      	ldr	r3, [r7, #8]
    6c28:	6a1a      	ldr	r2, [r3, #32]
    6c2a:	68bb      	ldr	r3, [r7, #8]
    6c2c:	695b      	ldr	r3, [r3, #20]
    6c2e:	429a      	cmp	r2, r3
    6c30:	d916      	bls.n	6c60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    6c32:	68bb      	ldr	r3, [r7, #8]
    6c34:	685b      	ldr	r3, [r3, #4]
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	2b05      	cmp	r3, #5
    6c3a:	d111      	bne.n	6c60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             canopen->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
    6c3c:	4b15      	ldr	r3, [pc, #84]	; (6c94 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	1d18      	adds	r0, r3, #4
    6c42:	68bb      	ldr	r3, [r7, #8]
    6c44:	6819      	ldr	r1, [r3, #0]
    6c46:	68bb      	ldr	r3, [r7, #8]
    6c48:	6a1b      	ldr	r3, [r3, #32]
    6c4a:	9300      	str	r3, [sp, #0]
    6c4c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    6c50:	2218      	movs	r2, #24
    6c52:	4c12      	ldr	r4, [pc, #72]	; (6c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
    6c54:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    6c56:	e003      	b.n	6c60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
    6c58:	68bb      	ldr	r3, [r7, #8]
    6c5a:	2200      	movs	r2, #0
    6c5c:	769a      	strb	r2, [r3, #26]
    6c5e:	e000      	b.n	6c62 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
    6c60:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
    6c62:	68bb      	ldr	r3, [r7, #8]
    6c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c66:	2b00      	cmp	r3, #0
    6c68:	d00f      	beq.n	6c8a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        canopen->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
    6c6a:	4b0a      	ldr	r3, [pc, #40]	; (6c94 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	1d18      	adds	r0, r3, #4
    6c70:	68bb      	ldr	r3, [r7, #8]
    6c72:	6819      	ldr	r1, [r3, #0]
    6c74:	68bb      	ldr	r3, [r7, #8]
    6c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c78:	9300      	str	r3, [sp, #0]
    6c7a:	f248 2340 	movw	r3, #33344	; 0x8240
    6c7e:	2219      	movs	r2, #25
    6c80:	4c06      	ldr	r4, [pc, #24]	; (6c9c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
    6c82:	47a0      	blx	r4
        SYNC->receiveError = 0U;
    6c84:	68bb      	ldr	r3, [r7, #8]
    6c86:	2200      	movs	r2, #0
    6c88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
    6c8a:	7dfb      	ldrb	r3, [r7, #23]
    6c8c:	4618      	mov	r0, r3
    6c8e:	371c      	adds	r7, #28
    6c90:	46bd      	mov	sp, r7
    6c92:	bd90      	pop	{r4, r7, pc}
    6c94:	20001964 	.word	0x20001964
    6c98:	00001b45 	.word	0x00001b45
    6c9c:	000025ad 	.word	0x000025ad

00006ca0 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
    6ca0:	b480      	push	{r7}
    6ca2:	b083      	sub	sp, #12
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	4618      	mov	r0, r3
    6cac:	370c      	adds	r7, #12
    6cae:	46bd      	mov	sp, r7
    6cb0:	bc80      	pop	{r7}
    6cb2:	4770      	bx	lr

00006cb4 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
    6cb4:	b480      	push	{r7}
    6cb6:	b083      	sub	sp, #12
    6cb8:	af00      	add	r7, sp, #0
    6cba:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	4618      	mov	r0, r3
    6cc0:	370c      	adds	r7, #12
    6cc2:	46bd      	mov	sp, r7
    6cc4:	bc80      	pop	{r7}
    6cc6:	4770      	bx	lr

00006cc8 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
    6cc8:	b480      	push	{r7}
    6cca:	b087      	sub	sp, #28
    6ccc:	af00      	add	r7, sp, #0
    6cce:	60f8      	str	r0, [r7, #12]
    6cd0:	60b9      	str	r1, [r7, #8]
    6cd2:	607a      	str	r2, [r7, #4]
    6cd4:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
    6cd6:	2300      	movs	r3, #0
    6cd8:	617b      	str	r3, [r7, #20]
    6cda:	697a      	ldr	r2, [r7, #20]
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	429a      	cmp	r2, r3
    6ce0:	d217      	bcs.n	6d12 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
    6ce2:	887b      	ldrh	r3, [r7, #2]
    6ce4:	121b      	asrs	r3, r3, #8
    6ce6:	b21a      	sxth	r2, r3
    6ce8:	68b9      	ldr	r1, [r7, #8]
    6cea:	697b      	ldr	r3, [r7, #20]
    6cec:	440b      	add	r3, r1
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	b21b      	sxth	r3, r3
    6cf2:	4053      	eors	r3, r2
    6cf4:	b21b      	sxth	r3, r3
    6cf6:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
    6cf8:	887b      	ldrh	r3, [r7, #2]
    6cfa:	021b      	lsls	r3, r3, #8
    6cfc:	b29a      	uxth	r2, r3
    6cfe:	8a7b      	ldrh	r3, [r7, #18]
    6d00:	4907      	ldr	r1, [pc, #28]	; (6d20 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
    6d02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6d06:	4053      	eors	r3, r2
    6d08:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
    6d0a:	697b      	ldr	r3, [r7, #20]
    6d0c:	3301      	adds	r3, #1
    6d0e:	617b      	str	r3, [r7, #20]
    6d10:	e7e3      	b.n	6cda <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
    6d12:	887b      	ldrh	r3, [r7, #2]
    6d14:	4618      	mov	r0, r3
    6d16:	371c      	adds	r7, #28
    6d18:	46bd      	mov	sp, r7
    6d1a:	bc80      	pop	{r7}
    6d1c:	4770      	bx	lr
    6d1e:	bf00      	nop
    6d20:	00014d64 	.word	0x00014d64

00006d24 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    6d24:	b580      	push	{r7, lr}
    6d26:	af00      	add	r7, sp, #0
	system_init();
    6d28:	4b03      	ldr	r3, [pc, #12]	; (6d38 <atmel_start_init+0x14>)
    6d2a:	4798      	blx	r3
	usb_init();
    6d2c:	4b03      	ldr	r3, [pc, #12]	; (6d3c <atmel_start_init+0x18>)
    6d2e:	4798      	blx	r3
	spi_nor_flash_init();
    6d30:	4b03      	ldr	r3, [pc, #12]	; (6d40 <atmel_start_init+0x1c>)
    6d32:	4798      	blx	r3
}
    6d34:	bf00      	nop
    6d36:	bd80      	pop	{r7, pc}
    6d38:	00008125 	.word	0x00008125
    6d3c:	000119f5 	.word	0x000119f5
    6d40:	00011989 	.word	0x00011989

00006d44 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    6d44:	b480      	push	{r7}
    6d46:	b085      	sub	sp, #20
    6d48:	af00      	add	r7, sp, #0
    6d4a:	60f8      	str	r0, [r7, #12]
    6d4c:	460b      	mov	r3, r1
    6d4e:	607a      	str	r2, [r7, #4]
    6d50:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6d52:	7afa      	ldrb	r2, [r7, #11]
    6d54:	68fb      	ldr	r3, [r7, #12]
    6d56:	3220      	adds	r2, #32
    6d58:	6879      	ldr	r1, [r7, #4]
    6d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    6d5e:	bf00      	nop
    6d60:	3714      	adds	r7, #20
    6d62:	46bd      	mov	sp, r7
    6d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d68:	4770      	bx	lr

00006d6a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    6d6a:	b480      	push	{r7}
    6d6c:	b083      	sub	sp, #12
    6d6e:	af00      	add	r7, sp, #0
    6d70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	691b      	ldr	r3, [r3, #16]
    6d76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6d7e:	bf00      	nop
    6d80:	370c      	adds	r7, #12
    6d82:	46bd      	mov	sp, r7
    6d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d88:	4770      	bx	lr

00006d8a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    6d8a:	b480      	push	{r7}
    6d8c:	b083      	sub	sp, #12
    6d8e:	af00      	add	r7, sp, #0
    6d90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	691b      	ldr	r3, [r3, #16]
    6d96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6d9e:	bf00      	nop
    6da0:	370c      	adds	r7, #12
    6da2:	46bd      	mov	sp, r7
    6da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6da8:	4770      	bx	lr

00006daa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    6daa:	b480      	push	{r7}
    6dac:	b083      	sub	sp, #12
    6dae:	af00      	add	r7, sp, #0
    6db0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	691b      	ldr	r3, [r3, #16]
    6db6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6dbe:	bf00      	nop
    6dc0:	370c      	adds	r7, #12
    6dc2:	46bd      	mov	sp, r7
    6dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dc8:	4770      	bx	lr

00006dca <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    6dca:	b480      	push	{r7}
    6dcc:	b083      	sub	sp, #12
    6dce:	af00      	add	r7, sp, #0
    6dd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	691b      	ldr	r3, [r3, #16]
    6dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6dde:	bf00      	nop
    6de0:	370c      	adds	r7, #12
    6de2:	46bd      	mov	sp, r7
    6de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6de8:	4770      	bx	lr

00006dea <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    6dea:	b480      	push	{r7}
    6dec:	b083      	sub	sp, #12
    6dee:	af00      	add	r7, sp, #0
    6df0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	695b      	ldr	r3, [r3, #20]
    6df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6dfe:	bf00      	nop
    6e00:	370c      	adds	r7, #12
    6e02:	46bd      	mov	sp, r7
    6e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e08:	4770      	bx	lr

00006e0a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    6e0a:	b480      	push	{r7}
    6e0c:	b083      	sub	sp, #12
    6e0e:	af00      	add	r7, sp, #0
    6e10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	695b      	ldr	r3, [r3, #20]
    6e16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6e1e:	bf00      	nop
    6e20:	370c      	adds	r7, #12
    6e22:	46bd      	mov	sp, r7
    6e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e28:	4770      	bx	lr

00006e2a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    6e2a:	b480      	push	{r7}
    6e2c:	b083      	sub	sp, #12
    6e2e:	af00      	add	r7, sp, #0
    6e30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	695b      	ldr	r3, [r3, #20]
    6e36:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6e3e:	bf00      	nop
    6e40:	370c      	adds	r7, #12
    6e42:	46bd      	mov	sp, r7
    6e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e48:	4770      	bx	lr

00006e4a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    6e4a:	b480      	push	{r7}
    6e4c:	b083      	sub	sp, #12
    6e4e:	af00      	add	r7, sp, #0
    6e50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	695b      	ldr	r3, [r3, #20]
    6e56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6e5e:	bf00      	nop
    6e60:	370c      	adds	r7, #12
    6e62:	46bd      	mov	sp, r7
    6e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e68:	4770      	bx	lr

00006e6a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    6e6a:	b480      	push	{r7}
    6e6c:	b083      	sub	sp, #12
    6e6e:	af00      	add	r7, sp, #0
    6e70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	695b      	ldr	r3, [r3, #20]
    6e76:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6e7e:	bf00      	nop
    6e80:	370c      	adds	r7, #12
    6e82:	46bd      	mov	sp, r7
    6e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e88:	4770      	bx	lr

00006e8a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    6e8a:	b480      	push	{r7}
    6e8c:	b083      	sub	sp, #12
    6e8e:	af00      	add	r7, sp, #0
    6e90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	699b      	ldr	r3, [r3, #24]
    6e96:	f043 0201 	orr.w	r2, r3, #1
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6e9e:	bf00      	nop
    6ea0:	370c      	adds	r7, #12
    6ea2:	46bd      	mov	sp, r7
    6ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea8:	4770      	bx	lr

00006eaa <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    6eaa:	b480      	push	{r7}
    6eac:	b083      	sub	sp, #12
    6eae:	af00      	add	r7, sp, #0
    6eb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	699b      	ldr	r3, [r3, #24]
    6eb6:	f043 0202 	orr.w	r2, r3, #2
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6ebe:	bf00      	nop
    6ec0:	370c      	adds	r7, #12
    6ec2:	46bd      	mov	sp, r7
    6ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec8:	4770      	bx	lr

00006eca <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    6eca:	b480      	push	{r7}
    6ecc:	b083      	sub	sp, #12
    6ece:	af00      	add	r7, sp, #0
    6ed0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	699b      	ldr	r3, [r3, #24]
    6ed6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6ede:	bf00      	nop
    6ee0:	370c      	adds	r7, #12
    6ee2:	46bd      	mov	sp, r7
    6ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee8:	4770      	bx	lr

00006eea <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    6eea:	b480      	push	{r7}
    6eec:	b083      	sub	sp, #12
    6eee:	af00      	add	r7, sp, #0
    6ef0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	699b      	ldr	r3, [r3, #24]
    6ef6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6efe:	bf00      	nop
    6f00:	370c      	adds	r7, #12
    6f02:	46bd      	mov	sp, r7
    6f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f08:	4770      	bx	lr

00006f0a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    6f0a:	b480      	push	{r7}
    6f0c:	b083      	sub	sp, #12
    6f0e:	af00      	add	r7, sp, #0
    6f10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	699b      	ldr	r3, [r3, #24]
    6f16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6f1e:	bf00      	nop
    6f20:	370c      	adds	r7, #12
    6f22:	46bd      	mov	sp, r7
    6f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f28:	4770      	bx	lr

00006f2a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    6f2a:	b480      	push	{r7}
    6f2c:	b083      	sub	sp, #12
    6f2e:	af00      	add	r7, sp, #0
    6f30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	699b      	ldr	r3, [r3, #24]
    6f36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6f3e:	bf00      	nop
    6f40:	370c      	adds	r7, #12
    6f42:	46bd      	mov	sp, r7
    6f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f48:	4770      	bx	lr

00006f4a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    6f4a:	b480      	push	{r7}
    6f4c:	b083      	sub	sp, #12
    6f4e:	af00      	add	r7, sp, #0
    6f50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	69db      	ldr	r3, [r3, #28]
    6f56:	f043 0208 	orr.w	r2, r3, #8
    6f5a:	687b      	ldr	r3, [r7, #4]
    6f5c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6f5e:	bf00      	nop
    6f60:	370c      	adds	r7, #12
    6f62:	46bd      	mov	sp, r7
    6f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f68:	4770      	bx	lr

00006f6a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    6f6a:	b480      	push	{r7}
    6f6c:	b083      	sub	sp, #12
    6f6e:	af00      	add	r7, sp, #0
    6f70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	69db      	ldr	r3, [r3, #28]
    6f76:	f043 0220 	orr.w	r2, r3, #32
    6f7a:	687b      	ldr	r3, [r7, #4]
    6f7c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6f7e:	bf00      	nop
    6f80:	370c      	adds	r7, #12
    6f82:	46bd      	mov	sp, r7
    6f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f88:	4770      	bx	lr

00006f8a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    6f8a:	b480      	push	{r7}
    6f8c:	b083      	sub	sp, #12
    6f8e:	af00      	add	r7, sp, #0
    6f90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	69db      	ldr	r3, [r3, #28]
    6f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6f9a:	687b      	ldr	r3, [r7, #4]
    6f9c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6f9e:	bf00      	nop
    6fa0:	370c      	adds	r7, #12
    6fa2:	46bd      	mov	sp, r7
    6fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fa8:	4770      	bx	lr

00006faa <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    6faa:	b480      	push	{r7}
    6fac:	b083      	sub	sp, #12
    6fae:	af00      	add	r7, sp, #0
    6fb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	69db      	ldr	r3, [r3, #28]
    6fb6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6fbe:	bf00      	nop
    6fc0:	370c      	adds	r7, #12
    6fc2:	46bd      	mov	sp, r7
    6fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fc8:	4770      	bx	lr

00006fca <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    6fca:	b480      	push	{r7}
    6fcc:	b083      	sub	sp, #12
    6fce:	af00      	add	r7, sp, #0
    6fd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	6a1b      	ldr	r3, [r3, #32]
    6fd6:	f043 0201 	orr.w	r2, r3, #1
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6fde:	bf00      	nop
    6fe0:	370c      	adds	r7, #12
    6fe2:	46bd      	mov	sp, r7
    6fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fe8:	4770      	bx	lr

00006fea <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    6fea:	b480      	push	{r7}
    6fec:	b083      	sub	sp, #12
    6fee:	af00      	add	r7, sp, #0
    6ff0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	6a1b      	ldr	r3, [r3, #32]
    6ff6:	f043 0202 	orr.w	r2, r3, #2
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    6ffe:	bf00      	nop
    7000:	370c      	adds	r7, #12
    7002:	46bd      	mov	sp, r7
    7004:	f85d 7b04 	ldr.w	r7, [sp], #4
    7008:	4770      	bx	lr

0000700a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    700a:	b480      	push	{r7}
    700c:	b083      	sub	sp, #12
    700e:	af00      	add	r7, sp, #0
    7010:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	6a1b      	ldr	r3, [r3, #32]
    7016:	f043 0204 	orr.w	r2, r3, #4
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    701e:	bf00      	nop
    7020:	370c      	adds	r7, #12
    7022:	46bd      	mov	sp, r7
    7024:	f85d 7b04 	ldr.w	r7, [sp], #4
    7028:	4770      	bx	lr

0000702a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    702a:	b480      	push	{r7}
    702c:	b083      	sub	sp, #12
    702e:	af00      	add	r7, sp, #0
    7030:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    7032:	687b      	ldr	r3, [r7, #4]
    7034:	6a1b      	ldr	r3, [r3, #32]
    7036:	f043 0208 	orr.w	r2, r3, #8
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    703e:	bf00      	nop
    7040:	370c      	adds	r7, #12
    7042:	46bd      	mov	sp, r7
    7044:	f85d 7b04 	ldr.w	r7, [sp], #4
    7048:	4770      	bx	lr

0000704a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    704a:	b480      	push	{r7}
    704c:	b083      	sub	sp, #12
    704e:	af00      	add	r7, sp, #0
    7050:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	6a1b      	ldr	r3, [r3, #32]
    7056:	f043 0220 	orr.w	r2, r3, #32
    705a:	687b      	ldr	r3, [r7, #4]
    705c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    705e:	bf00      	nop
    7060:	370c      	adds	r7, #12
    7062:	46bd      	mov	sp, r7
    7064:	f85d 7b04 	ldr.w	r7, [sp], #4
    7068:	4770      	bx	lr

0000706a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    706a:	b480      	push	{r7}
    706c:	b083      	sub	sp, #12
    706e:	af00      	add	r7, sp, #0
    7070:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	6a1b      	ldr	r3, [r3, #32]
    7076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    707e:	bf00      	nop
    7080:	370c      	adds	r7, #12
    7082:	46bd      	mov	sp, r7
    7084:	f85d 7b04 	ldr.w	r7, [sp], #4
    7088:	4770      	bx	lr

0000708a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    708a:	b480      	push	{r7}
    708c:	b085      	sub	sp, #20
    708e:	af00      	add	r7, sp, #0
    7090:	60f8      	str	r0, [r7, #12]
    7092:	460b      	mov	r3, r1
    7094:	607a      	str	r2, [r7, #4]
    7096:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7098:	7afb      	ldrb	r3, [r7, #11]
    709a:	68fa      	ldr	r2, [r7, #12]
    709c:	01db      	lsls	r3, r3, #7
    709e:	4413      	add	r3, r2
    70a0:	3308      	adds	r3, #8
    70a2:	687a      	ldr	r2, [r7, #4]
    70a4:	601a      	str	r2, [r3, #0]
}
    70a6:	bf00      	nop
    70a8:	3714      	adds	r7, #20
    70aa:	46bd      	mov	sp, r7
    70ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    70b0:	4770      	bx	lr

000070b2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    70b2:	b480      	push	{r7}
    70b4:	b085      	sub	sp, #20
    70b6:	af00      	add	r7, sp, #0
    70b8:	60f8      	str	r0, [r7, #12]
    70ba:	460b      	mov	r3, r1
    70bc:	607a      	str	r2, [r7, #4]
    70be:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    70c0:	7afb      	ldrb	r3, [r7, #11]
    70c2:	68fa      	ldr	r2, [r7, #12]
    70c4:	01db      	lsls	r3, r3, #7
    70c6:	4413      	add	r3, r2
    70c8:	3304      	adds	r3, #4
    70ca:	687a      	ldr	r2, [r7, #4]
    70cc:	601a      	str	r2, [r3, #0]
}
    70ce:	bf00      	nop
    70d0:	3714      	adds	r7, #20
    70d2:	46bd      	mov	sp, r7
    70d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    70d8:	4770      	bx	lr

000070da <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    70da:	b480      	push	{r7}
    70dc:	b085      	sub	sp, #20
    70de:	af00      	add	r7, sp, #0
    70e0:	60f8      	str	r0, [r7, #12]
    70e2:	460b      	mov	r3, r1
    70e4:	607a      	str	r2, [r7, #4]
    70e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70e8:	7afb      	ldrb	r3, [r7, #11]
    70ea:	68fa      	ldr	r2, [r7, #12]
    70ec:	01db      	lsls	r3, r3, #7
    70ee:	4413      	add	r3, r2
    70f0:	3318      	adds	r3, #24
    70f2:	687a      	ldr	r2, [r7, #4]
    70f4:	601a      	str	r2, [r3, #0]
}
    70f6:	bf00      	nop
    70f8:	3714      	adds	r7, #20
    70fa:	46bd      	mov	sp, r7
    70fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7100:	4770      	bx	lr

00007102 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    7102:	b480      	push	{r7}
    7104:	b085      	sub	sp, #20
    7106:	af00      	add	r7, sp, #0
    7108:	60f8      	str	r0, [r7, #12]
    710a:	460b      	mov	r3, r1
    710c:	607a      	str	r2, [r7, #4]
    710e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7110:	7afb      	ldrb	r3, [r7, #11]
    7112:	68fa      	ldr	r2, [r7, #12]
    7114:	01db      	lsls	r3, r3, #7
    7116:	4413      	add	r3, r2
    7118:	3314      	adds	r3, #20
    711a:	687a      	ldr	r2, [r7, #4]
    711c:	601a      	str	r2, [r3, #0]
}
    711e:	bf00      	nop
    7120:	3714      	adds	r7, #20
    7122:	46bd      	mov	sp, r7
    7124:	f85d 7b04 	ldr.w	r7, [sp], #4
    7128:	4770      	bx	lr

0000712a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    712a:	b480      	push	{r7}
    712c:	b085      	sub	sp, #20
    712e:	af00      	add	r7, sp, #0
    7130:	6078      	str	r0, [r7, #4]
    7132:	4608      	mov	r0, r1
    7134:	4611      	mov	r1, r2
    7136:	461a      	mov	r2, r3
    7138:	4603      	mov	r3, r0
    713a:	70fb      	strb	r3, [r7, #3]
    713c:	460b      	mov	r3, r1
    713e:	70bb      	strb	r3, [r7, #2]
    7140:	4613      	mov	r3, r2
    7142:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    7144:	78fa      	ldrb	r2, [r7, #3]
    7146:	78bb      	ldrb	r3, [r7, #2]
    7148:	6879      	ldr	r1, [r7, #4]
    714a:	01d2      	lsls	r2, r2, #7
    714c:	440a      	add	r2, r1
    714e:	4413      	add	r3, r2
    7150:	3330      	adds	r3, #48	; 0x30
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    7156:	7bfb      	ldrb	r3, [r7, #15]
    7158:	f023 030f 	bic.w	r3, r3, #15
    715c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    715e:	787b      	ldrb	r3, [r7, #1]
    7160:	f003 030f 	and.w	r3, r3, #15
    7164:	b2da      	uxtb	r2, r3
    7166:	7bfb      	ldrb	r3, [r7, #15]
    7168:	4313      	orrs	r3, r2
    716a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    716c:	78fa      	ldrb	r2, [r7, #3]
    716e:	78bb      	ldrb	r3, [r7, #2]
    7170:	6879      	ldr	r1, [r7, #4]
    7172:	01d2      	lsls	r2, r2, #7
    7174:	440a      	add	r2, r1
    7176:	4413      	add	r3, r2
    7178:	3330      	adds	r3, #48	; 0x30
    717a:	7bfa      	ldrb	r2, [r7, #15]
    717c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    717e:	bf00      	nop
    7180:	3714      	adds	r7, #20
    7182:	46bd      	mov	sp, r7
    7184:	f85d 7b04 	ldr.w	r7, [sp], #4
    7188:	4770      	bx	lr

0000718a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    718a:	b480      	push	{r7}
    718c:	b085      	sub	sp, #20
    718e:	af00      	add	r7, sp, #0
    7190:	6078      	str	r0, [r7, #4]
    7192:	4608      	mov	r0, r1
    7194:	4611      	mov	r1, r2
    7196:	461a      	mov	r2, r3
    7198:	4603      	mov	r3, r0
    719a:	70fb      	strb	r3, [r7, #3]
    719c:	460b      	mov	r3, r1
    719e:	70bb      	strb	r3, [r7, #2]
    71a0:	4613      	mov	r3, r2
    71a2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    71a4:	78fa      	ldrb	r2, [r7, #3]
    71a6:	78bb      	ldrb	r3, [r7, #2]
    71a8:	6879      	ldr	r1, [r7, #4]
    71aa:	01d2      	lsls	r2, r2, #7
    71ac:	440a      	add	r2, r1
    71ae:	4413      	add	r3, r2
    71b0:	3330      	adds	r3, #48	; 0x30
    71b2:	781b      	ldrb	r3, [r3, #0]
    71b4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    71b6:	7bfb      	ldrb	r3, [r7, #15]
    71b8:	f003 030f 	and.w	r3, r3, #15
    71bc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    71be:	787b      	ldrb	r3, [r7, #1]
    71c0:	011b      	lsls	r3, r3, #4
    71c2:	b2da      	uxtb	r2, r3
    71c4:	7bfb      	ldrb	r3, [r7, #15]
    71c6:	4313      	orrs	r3, r2
    71c8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    71ca:	78fa      	ldrb	r2, [r7, #3]
    71cc:	78bb      	ldrb	r3, [r7, #2]
    71ce:	6879      	ldr	r1, [r7, #4]
    71d0:	01d2      	lsls	r2, r2, #7
    71d2:	440a      	add	r2, r1
    71d4:	4413      	add	r3, r2
    71d6:	3330      	adds	r3, #48	; 0x30
    71d8:	7bfa      	ldrb	r2, [r7, #15]
    71da:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    71dc:	bf00      	nop
    71de:	3714      	adds	r7, #20
    71e0:	46bd      	mov	sp, r7
    71e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e6:	4770      	bx	lr

000071e8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    71e8:	b480      	push	{r7}
    71ea:	b085      	sub	sp, #20
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
    71f0:	4608      	mov	r0, r1
    71f2:	4611      	mov	r1, r2
    71f4:	461a      	mov	r2, r3
    71f6:	4603      	mov	r3, r0
    71f8:	70fb      	strb	r3, [r7, #3]
    71fa:	460b      	mov	r3, r1
    71fc:	70bb      	strb	r3, [r7, #2]
    71fe:	4613      	mov	r3, r2
    7200:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7202:	78fa      	ldrb	r2, [r7, #3]
    7204:	78bb      	ldrb	r3, [r7, #2]
    7206:	6879      	ldr	r1, [r7, #4]
    7208:	01d2      	lsls	r2, r2, #7
    720a:	440a      	add	r2, r1
    720c:	4413      	add	r3, r2
    720e:	3340      	adds	r3, #64	; 0x40
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    7214:	7bfb      	ldrb	r3, [r7, #15]
    7216:	f023 0301 	bic.w	r3, r3, #1
    721a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    721c:	787a      	ldrb	r2, [r7, #1]
    721e:	7bfb      	ldrb	r3, [r7, #15]
    7220:	4313      	orrs	r3, r2
    7222:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7224:	78fa      	ldrb	r2, [r7, #3]
    7226:	78bb      	ldrb	r3, [r7, #2]
    7228:	6879      	ldr	r1, [r7, #4]
    722a:	01d2      	lsls	r2, r2, #7
    722c:	440a      	add	r2, r1
    722e:	4413      	add	r3, r2
    7230:	3340      	adds	r3, #64	; 0x40
    7232:	7bfa      	ldrb	r2, [r7, #15]
    7234:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    7236:	bf00      	nop
    7238:	3714      	adds	r7, #20
    723a:	46bd      	mov	sp, r7
    723c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7240:	4770      	bx	lr

00007242 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    7242:	b490      	push	{r4, r7}
    7244:	b082      	sub	sp, #8
    7246:	af00      	add	r7, sp, #0
    7248:	6078      	str	r0, [r7, #4]
    724a:	460b      	mov	r3, r1
    724c:	70fb      	strb	r3, [r7, #3]
    724e:	4613      	mov	r3, r2
    7250:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7252:	78fa      	ldrb	r2, [r7, #3]
    7254:	78bb      	ldrb	r3, [r7, #2]
    7256:	78f8      	ldrb	r0, [r7, #3]
    7258:	78b9      	ldrb	r1, [r7, #2]
    725a:	687c      	ldr	r4, [r7, #4]
    725c:	01c0      	lsls	r0, r0, #7
    725e:	4420      	add	r0, r4
    7260:	4401      	add	r1, r0
    7262:	3140      	adds	r1, #64	; 0x40
    7264:	7809      	ldrb	r1, [r1, #0]
    7266:	b2c9      	uxtb	r1, r1
    7268:	f041 0104 	orr.w	r1, r1, #4
    726c:	b2c8      	uxtb	r0, r1
    726e:	6879      	ldr	r1, [r7, #4]
    7270:	01d2      	lsls	r2, r2, #7
    7272:	440a      	add	r2, r1
    7274:	4413      	add	r3, r2
    7276:	3340      	adds	r3, #64	; 0x40
    7278:	4602      	mov	r2, r0
    727a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    727c:	bf00      	nop
    727e:	3708      	adds	r7, #8
    7280:	46bd      	mov	sp, r7
    7282:	bc90      	pop	{r4, r7}
    7284:	4770      	bx	lr

00007286 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    7286:	b490      	push	{r4, r7}
    7288:	b082      	sub	sp, #8
    728a:	af00      	add	r7, sp, #0
    728c:	6078      	str	r0, [r7, #4]
    728e:	460b      	mov	r3, r1
    7290:	70fb      	strb	r3, [r7, #3]
    7292:	4613      	mov	r3, r2
    7294:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7296:	78fa      	ldrb	r2, [r7, #3]
    7298:	78bb      	ldrb	r3, [r7, #2]
    729a:	78f8      	ldrb	r0, [r7, #3]
    729c:	78b9      	ldrb	r1, [r7, #2]
    729e:	687c      	ldr	r4, [r7, #4]
    72a0:	01c0      	lsls	r0, r0, #7
    72a2:	4420      	add	r0, r4
    72a4:	4401      	add	r1, r0
    72a6:	3140      	adds	r1, #64	; 0x40
    72a8:	7809      	ldrb	r1, [r1, #0]
    72aa:	b2c9      	uxtb	r1, r1
    72ac:	f021 0104 	bic.w	r1, r1, #4
    72b0:	b2c8      	uxtb	r0, r1
    72b2:	6879      	ldr	r1, [r7, #4]
    72b4:	01d2      	lsls	r2, r2, #7
    72b6:	440a      	add	r2, r1
    72b8:	4413      	add	r3, r2
    72ba:	3340      	adds	r3, #64	; 0x40
    72bc:	4602      	mov	r2, r0
    72be:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    72c0:	bf00      	nop
    72c2:	3708      	adds	r7, #8
    72c4:	46bd      	mov	sp, r7
    72c6:	bc90      	pop	{r4, r7}
    72c8:	4770      	bx	lr

000072ca <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    72ca:	b480      	push	{r7}
    72cc:	b085      	sub	sp, #20
    72ce:	af00      	add	r7, sp, #0
    72d0:	60f8      	str	r0, [r7, #12]
    72d2:	460b      	mov	r3, r1
    72d4:	607a      	str	r2, [r7, #4]
    72d6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72d8:	7afb      	ldrb	r3, [r7, #11]
    72da:	68fa      	ldr	r2, [r7, #12]
    72dc:	01db      	lsls	r3, r3, #7
    72de:	4413      	add	r3, r2
    72e0:	3328      	adds	r3, #40	; 0x28
    72e2:	687a      	ldr	r2, [r7, #4]
    72e4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    72e6:	bf00      	nop
    72e8:	3714      	adds	r7, #20
    72ea:	46bd      	mov	sp, r7
    72ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f0:	4770      	bx	lr
	...

000072f4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    72f4:	b580      	push	{r7, lr}
    72f6:	b082      	sub	sp, #8
    72f8:	af00      	add	r7, sp, #0
    72fa:	4603      	mov	r3, r0
    72fc:	6039      	str	r1, [r7, #0]
    72fe:	71fb      	strb	r3, [r7, #7]
    7300:	4613      	mov	r3, r2
    7302:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    7304:	79bb      	ldrb	r3, [r7, #6]
    7306:	2b01      	cmp	r3, #1
    7308:	d01c      	beq.n	7344 <_gpio_set_direction+0x50>
    730a:	2b02      	cmp	r3, #2
    730c:	d037      	beq.n	737e <_gpio_set_direction+0x8a>
    730e:	2b00      	cmp	r3, #0
    7310:	d14e      	bne.n	73b0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    7312:	79fb      	ldrb	r3, [r7, #7]
    7314:	683a      	ldr	r2, [r7, #0]
    7316:	4619      	mov	r1, r3
    7318:	482a      	ldr	r0, [pc, #168]	; (73c4 <_gpio_set_direction+0xd0>)
    731a:	4b2b      	ldr	r3, [pc, #172]	; (73c8 <_gpio_set_direction+0xd4>)
    731c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    731e:	683b      	ldr	r3, [r7, #0]
    7320:	b29b      	uxth	r3, r3
    7322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7326:	79fb      	ldrb	r3, [r7, #7]
    7328:	4619      	mov	r1, r3
    732a:	4826      	ldr	r0, [pc, #152]	; (73c4 <_gpio_set_direction+0xd0>)
    732c:	4b27      	ldr	r3, [pc, #156]	; (73cc <_gpio_set_direction+0xd8>)
    732e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    7330:	683b      	ldr	r3, [r7, #0]
    7332:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    7334:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    7338:	79fb      	ldrb	r3, [r7, #7]
    733a:	4619      	mov	r1, r3
    733c:	4821      	ldr	r0, [pc, #132]	; (73c4 <_gpio_set_direction+0xd0>)
    733e:	4b23      	ldr	r3, [pc, #140]	; (73cc <_gpio_set_direction+0xd8>)
    7340:	4798      	blx	r3
		break;
    7342:	e03a      	b.n	73ba <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    7344:	79fb      	ldrb	r3, [r7, #7]
    7346:	683a      	ldr	r2, [r7, #0]
    7348:	4619      	mov	r1, r3
    734a:	481e      	ldr	r0, [pc, #120]	; (73c4 <_gpio_set_direction+0xd0>)
    734c:	4b1e      	ldr	r3, [pc, #120]	; (73c8 <_gpio_set_direction+0xd4>)
    734e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    7350:	683b      	ldr	r3, [r7, #0]
    7352:	b29b      	uxth	r3, r3
    7354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    7358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    735c:	79f9      	ldrb	r1, [r7, #7]
    735e:	461a      	mov	r2, r3
    7360:	4818      	ldr	r0, [pc, #96]	; (73c4 <_gpio_set_direction+0xd0>)
    7362:	4b1a      	ldr	r3, [pc, #104]	; (73cc <_gpio_set_direction+0xd8>)
    7364:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    7366:	683b      	ldr	r3, [r7, #0]
    7368:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    736a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    736e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7372:	79f9      	ldrb	r1, [r7, #7]
    7374:	461a      	mov	r2, r3
    7376:	4813      	ldr	r0, [pc, #76]	; (73c4 <_gpio_set_direction+0xd0>)
    7378:	4b14      	ldr	r3, [pc, #80]	; (73cc <_gpio_set_direction+0xd8>)
    737a:	4798      	blx	r3
		break;
    737c:	e01d      	b.n	73ba <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    737e:	79fb      	ldrb	r3, [r7, #7]
    7380:	683a      	ldr	r2, [r7, #0]
    7382:	4619      	mov	r1, r3
    7384:	480f      	ldr	r0, [pc, #60]	; (73c4 <_gpio_set_direction+0xd0>)
    7386:	4b12      	ldr	r3, [pc, #72]	; (73d0 <_gpio_set_direction+0xdc>)
    7388:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    738a:	683b      	ldr	r3, [r7, #0]
    738c:	b29b      	uxth	r3, r3
    738e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7392:	79fb      	ldrb	r3, [r7, #7]
    7394:	4619      	mov	r1, r3
    7396:	480b      	ldr	r0, [pc, #44]	; (73c4 <_gpio_set_direction+0xd0>)
    7398:	4b0c      	ldr	r3, [pc, #48]	; (73cc <_gpio_set_direction+0xd8>)
    739a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    739c:	683b      	ldr	r3, [r7, #0]
    739e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    73a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    73a4:	79fb      	ldrb	r3, [r7, #7]
    73a6:	4619      	mov	r1, r3
    73a8:	4806      	ldr	r0, [pc, #24]	; (73c4 <_gpio_set_direction+0xd0>)
    73aa:	4b08      	ldr	r3, [pc, #32]	; (73cc <_gpio_set_direction+0xd8>)
    73ac:	4798      	blx	r3
		break;
    73ae:	e004      	b.n	73ba <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    73b0:	2246      	movs	r2, #70	; 0x46
    73b2:	4908      	ldr	r1, [pc, #32]	; (73d4 <_gpio_set_direction+0xe0>)
    73b4:	2000      	movs	r0, #0
    73b6:	4b08      	ldr	r3, [pc, #32]	; (73d8 <_gpio_set_direction+0xe4>)
    73b8:	4798      	blx	r3
	}
}
    73ba:	bf00      	nop
    73bc:	3708      	adds	r7, #8
    73be:	46bd      	mov	sp, r7
    73c0:	bd80      	pop	{r7, pc}
    73c2:	bf00      	nop
    73c4:	41008000 	.word	0x41008000
    73c8:	000070b3 	.word	0x000070b3
    73cc:	000072cb 	.word	0x000072cb
    73d0:	0000708b 	.word	0x0000708b
    73d4:	00014f64 	.word	0x00014f64
    73d8:	000099f1 	.word	0x000099f1

000073dc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    73dc:	b580      	push	{r7, lr}
    73de:	b082      	sub	sp, #8
    73e0:	af00      	add	r7, sp, #0
    73e2:	4603      	mov	r3, r0
    73e4:	6039      	str	r1, [r7, #0]
    73e6:	71fb      	strb	r3, [r7, #7]
    73e8:	4613      	mov	r3, r2
    73ea:	71bb      	strb	r3, [r7, #6]
	if (level) {
    73ec:	79bb      	ldrb	r3, [r7, #6]
    73ee:	2b00      	cmp	r3, #0
    73f0:	d006      	beq.n	7400 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    73f2:	79fb      	ldrb	r3, [r7, #7]
    73f4:	683a      	ldr	r2, [r7, #0]
    73f6:	4619      	mov	r1, r3
    73f8:	4806      	ldr	r0, [pc, #24]	; (7414 <_gpio_set_level+0x38>)
    73fa:	4b07      	ldr	r3, [pc, #28]	; (7418 <_gpio_set_level+0x3c>)
    73fc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    73fe:	e005      	b.n	740c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    7400:	79fb      	ldrb	r3, [r7, #7]
    7402:	683a      	ldr	r2, [r7, #0]
    7404:	4619      	mov	r1, r3
    7406:	4803      	ldr	r0, [pc, #12]	; (7414 <_gpio_set_level+0x38>)
    7408:	4b04      	ldr	r3, [pc, #16]	; (741c <_gpio_set_level+0x40>)
    740a:	4798      	blx	r3
}
    740c:	bf00      	nop
    740e:	3708      	adds	r7, #8
    7410:	46bd      	mov	sp, r7
    7412:	bd80      	pop	{r7, pc}
    7414:	41008000 	.word	0x41008000
    7418:	000070db 	.word	0x000070db
    741c:	00007103 	.word	0x00007103

00007420 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    7420:	b580      	push	{r7, lr}
    7422:	b082      	sub	sp, #8
    7424:	af00      	add	r7, sp, #0
    7426:	4603      	mov	r3, r0
    7428:	71fb      	strb	r3, [r7, #7]
    742a:	460b      	mov	r3, r1
    742c:	71bb      	strb	r3, [r7, #6]
    742e:	4613      	mov	r3, r2
    7430:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    7432:	797b      	ldrb	r3, [r7, #5]
    7434:	2b01      	cmp	r3, #1
    7436:	d00a      	beq.n	744e <_gpio_set_pin_pull_mode+0x2e>
    7438:	2b02      	cmp	r3, #2
    743a:	d01f      	beq.n	747c <_gpio_set_pin_pull_mode+0x5c>
    743c:	2b00      	cmp	r3, #0
    743e:	d134      	bne.n	74aa <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    7440:	79ba      	ldrb	r2, [r7, #6]
    7442:	79fb      	ldrb	r3, [r7, #7]
    7444:	4619      	mov	r1, r3
    7446:	481e      	ldr	r0, [pc, #120]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    7448:	4b1e      	ldr	r3, [pc, #120]	; (74c4 <_gpio_set_pin_pull_mode+0xa4>)
    744a:	4798      	blx	r3
		break;
    744c:	e033      	b.n	74b6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    744e:	79bb      	ldrb	r3, [r7, #6]
    7450:	2201      	movs	r2, #1
    7452:	409a      	lsls	r2, r3
    7454:	79fb      	ldrb	r3, [r7, #7]
    7456:	4619      	mov	r1, r3
    7458:	4819      	ldr	r0, [pc, #100]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    745a:	4b1b      	ldr	r3, [pc, #108]	; (74c8 <_gpio_set_pin_pull_mode+0xa8>)
    745c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    745e:	79ba      	ldrb	r2, [r7, #6]
    7460:	79fb      	ldrb	r3, [r7, #7]
    7462:	4619      	mov	r1, r3
    7464:	4816      	ldr	r0, [pc, #88]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    7466:	4b19      	ldr	r3, [pc, #100]	; (74cc <_gpio_set_pin_pull_mode+0xac>)
    7468:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    746a:	79bb      	ldrb	r3, [r7, #6]
    746c:	2201      	movs	r2, #1
    746e:	409a      	lsls	r2, r3
    7470:	79fb      	ldrb	r3, [r7, #7]
    7472:	4619      	mov	r1, r3
    7474:	4812      	ldr	r0, [pc, #72]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    7476:	4b16      	ldr	r3, [pc, #88]	; (74d0 <_gpio_set_pin_pull_mode+0xb0>)
    7478:	4798      	blx	r3
		break;
    747a:	e01c      	b.n	74b6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    747c:	79bb      	ldrb	r3, [r7, #6]
    747e:	2201      	movs	r2, #1
    7480:	409a      	lsls	r2, r3
    7482:	79fb      	ldrb	r3, [r7, #7]
    7484:	4619      	mov	r1, r3
    7486:	480e      	ldr	r0, [pc, #56]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    7488:	4b0f      	ldr	r3, [pc, #60]	; (74c8 <_gpio_set_pin_pull_mode+0xa8>)
    748a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    748c:	79ba      	ldrb	r2, [r7, #6]
    748e:	79fb      	ldrb	r3, [r7, #7]
    7490:	4619      	mov	r1, r3
    7492:	480b      	ldr	r0, [pc, #44]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    7494:	4b0d      	ldr	r3, [pc, #52]	; (74cc <_gpio_set_pin_pull_mode+0xac>)
    7496:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    7498:	79bb      	ldrb	r3, [r7, #6]
    749a:	2201      	movs	r2, #1
    749c:	409a      	lsls	r2, r3
    749e:	79fb      	ldrb	r3, [r7, #7]
    74a0:	4619      	mov	r1, r3
    74a2:	4807      	ldr	r0, [pc, #28]	; (74c0 <_gpio_set_pin_pull_mode+0xa0>)
    74a4:	4b0b      	ldr	r3, [pc, #44]	; (74d4 <_gpio_set_pin_pull_mode+0xb4>)
    74a6:	4798      	blx	r3
		break;
    74a8:	e005      	b.n	74b6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    74aa:	2289      	movs	r2, #137	; 0x89
    74ac:	490a      	ldr	r1, [pc, #40]	; (74d8 <_gpio_set_pin_pull_mode+0xb8>)
    74ae:	2000      	movs	r0, #0
    74b0:	4b0a      	ldr	r3, [pc, #40]	; (74dc <_gpio_set_pin_pull_mode+0xbc>)
    74b2:	4798      	blx	r3
		break;
    74b4:	bf00      	nop
	}
}
    74b6:	bf00      	nop
    74b8:	3708      	adds	r7, #8
    74ba:	46bd      	mov	sp, r7
    74bc:	bd80      	pop	{r7, pc}
    74be:	bf00      	nop
    74c0:	41008000 	.word	0x41008000
    74c4:	00007287 	.word	0x00007287
    74c8:	000070b3 	.word	0x000070b3
    74cc:	00007243 	.word	0x00007243
    74d0:	000070db 	.word	0x000070db
    74d4:	00007103 	.word	0x00007103
    74d8:	00014f64 	.word	0x00014f64
    74dc:	000099f1 	.word	0x000099f1

000074e0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    74e0:	b590      	push	{r4, r7, lr}
    74e2:	b085      	sub	sp, #20
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
    74e8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	095b      	lsrs	r3, r3, #5
    74ee:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	b2db      	uxtb	r3, r3
    74f4:	f003 031f 	and.w	r3, r3, #31
    74f8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    74fa:	683b      	ldr	r3, [r7, #0]
    74fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    7500:	d106      	bne.n	7510 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    7502:	7bba      	ldrb	r2, [r7, #14]
    7504:	7bf9      	ldrb	r1, [r7, #15]
    7506:	2300      	movs	r3, #0
    7508:	4812      	ldr	r0, [pc, #72]	; (7554 <_gpio_set_pin_function+0x74>)
    750a:	4c13      	ldr	r4, [pc, #76]	; (7558 <_gpio_set_pin_function+0x78>)
    750c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    750e:	e01d      	b.n	754c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    7510:	7bba      	ldrb	r2, [r7, #14]
    7512:	7bf9      	ldrb	r1, [r7, #15]
    7514:	2301      	movs	r3, #1
    7516:	480f      	ldr	r0, [pc, #60]	; (7554 <_gpio_set_pin_function+0x74>)
    7518:	4c0f      	ldr	r4, [pc, #60]	; (7558 <_gpio_set_pin_function+0x78>)
    751a:	47a0      	blx	r4
		if (pin & 1) {
    751c:	7bbb      	ldrb	r3, [r7, #14]
    751e:	f003 0301 	and.w	r3, r3, #1
    7522:	2b00      	cmp	r3, #0
    7524:	d009      	beq.n	753a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    7526:	7bbb      	ldrb	r3, [r7, #14]
    7528:	085b      	lsrs	r3, r3, #1
    752a:	b2da      	uxtb	r2, r3
    752c:	683b      	ldr	r3, [r7, #0]
    752e:	b2db      	uxtb	r3, r3
    7530:	7bf9      	ldrb	r1, [r7, #15]
    7532:	4808      	ldr	r0, [pc, #32]	; (7554 <_gpio_set_pin_function+0x74>)
    7534:	4c09      	ldr	r4, [pc, #36]	; (755c <_gpio_set_pin_function+0x7c>)
    7536:	47a0      	blx	r4
}
    7538:	e008      	b.n	754c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    753a:	7bbb      	ldrb	r3, [r7, #14]
    753c:	085b      	lsrs	r3, r3, #1
    753e:	b2da      	uxtb	r2, r3
    7540:	683b      	ldr	r3, [r7, #0]
    7542:	b2db      	uxtb	r3, r3
    7544:	7bf9      	ldrb	r1, [r7, #15]
    7546:	4803      	ldr	r0, [pc, #12]	; (7554 <_gpio_set_pin_function+0x74>)
    7548:	4c05      	ldr	r4, [pc, #20]	; (7560 <_gpio_set_pin_function+0x80>)
    754a:	47a0      	blx	r4
}
    754c:	bf00      	nop
    754e:	3714      	adds	r7, #20
    7550:	46bd      	mov	sp, r7
    7552:	bd90      	pop	{r4, r7, pc}
    7554:	41008000 	.word	0x41008000
    7558:	000071e9 	.word	0x000071e9
    755c:	0000718b 	.word	0x0000718b
    7560:	0000712b 	.word	0x0000712b

00007564 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    7564:	b580      	push	{r7, lr}
    7566:	b082      	sub	sp, #8
    7568:	af00      	add	r7, sp, #0
    756a:	4603      	mov	r3, r0
    756c:	460a      	mov	r2, r1
    756e:	71fb      	strb	r3, [r7, #7]
    7570:	4613      	mov	r3, r2
    7572:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    7574:	79fb      	ldrb	r3, [r7, #7]
    7576:	095b      	lsrs	r3, r3, #5
    7578:	b2d8      	uxtb	r0, r3
    757a:	79fb      	ldrb	r3, [r7, #7]
    757c:	f003 031f 	and.w	r3, r3, #31
    7580:	b2db      	uxtb	r3, r3
    7582:	79ba      	ldrb	r2, [r7, #6]
    7584:	4619      	mov	r1, r3
    7586:	4b03      	ldr	r3, [pc, #12]	; (7594 <gpio_set_pin_pull_mode+0x30>)
    7588:	4798      	blx	r3
}
    758a:	bf00      	nop
    758c:	3708      	adds	r7, #8
    758e:	46bd      	mov	sp, r7
    7590:	bd80      	pop	{r7, pc}
    7592:	bf00      	nop
    7594:	00007421 	.word	0x00007421

00007598 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    7598:	b580      	push	{r7, lr}
    759a:	b082      	sub	sp, #8
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    75a2:	6839      	ldr	r1, [r7, #0]
    75a4:	6878      	ldr	r0, [r7, #4]
    75a6:	4b03      	ldr	r3, [pc, #12]	; (75b4 <gpio_set_pin_function+0x1c>)
    75a8:	4798      	blx	r3
}
    75aa:	bf00      	nop
    75ac:	3708      	adds	r7, #8
    75ae:	46bd      	mov	sp, r7
    75b0:	bd80      	pop	{r7, pc}
    75b2:	bf00      	nop
    75b4:	000074e1 	.word	0x000074e1

000075b8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    75b8:	b580      	push	{r7, lr}
    75ba:	b082      	sub	sp, #8
    75bc:	af00      	add	r7, sp, #0
    75be:	4603      	mov	r3, r0
    75c0:	460a      	mov	r2, r1
    75c2:	71fb      	strb	r3, [r7, #7]
    75c4:	4613      	mov	r3, r2
    75c6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    75c8:	79fb      	ldrb	r3, [r7, #7]
    75ca:	095b      	lsrs	r3, r3, #5
    75cc:	b2d8      	uxtb	r0, r3
    75ce:	79fb      	ldrb	r3, [r7, #7]
    75d0:	f003 031f 	and.w	r3, r3, #31
    75d4:	2201      	movs	r2, #1
    75d6:	fa02 f303 	lsl.w	r3, r2, r3
    75da:	79ba      	ldrb	r2, [r7, #6]
    75dc:	4619      	mov	r1, r3
    75de:	4b03      	ldr	r3, [pc, #12]	; (75ec <gpio_set_pin_direction+0x34>)
    75e0:	4798      	blx	r3
}
    75e2:	bf00      	nop
    75e4:	3708      	adds	r7, #8
    75e6:	46bd      	mov	sp, r7
    75e8:	bd80      	pop	{r7, pc}
    75ea:	bf00      	nop
    75ec:	000072f5 	.word	0x000072f5

000075f0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    75f0:	b580      	push	{r7, lr}
    75f2:	b082      	sub	sp, #8
    75f4:	af00      	add	r7, sp, #0
    75f6:	4603      	mov	r3, r0
    75f8:	460a      	mov	r2, r1
    75fa:	71fb      	strb	r3, [r7, #7]
    75fc:	4613      	mov	r3, r2
    75fe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    7600:	79fb      	ldrb	r3, [r7, #7]
    7602:	095b      	lsrs	r3, r3, #5
    7604:	b2d8      	uxtb	r0, r3
    7606:	79fb      	ldrb	r3, [r7, #7]
    7608:	f003 031f 	and.w	r3, r3, #31
    760c:	2201      	movs	r2, #1
    760e:	fa02 f303 	lsl.w	r3, r2, r3
    7612:	79ba      	ldrb	r2, [r7, #6]
    7614:	4619      	mov	r1, r3
    7616:	4b03      	ldr	r3, [pc, #12]	; (7624 <gpio_set_pin_level+0x34>)
    7618:	4798      	blx	r3
}
    761a:	bf00      	nop
    761c:	3708      	adds	r7, #8
    761e:	46bd      	mov	sp, r7
    7620:	bd80      	pop	{r7, pc}
    7622:	bf00      	nop
    7624:	000073dd 	.word	0x000073dd

00007628 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    7628:	b580      	push	{r7, lr}
    762a:	af00      	add	r7, sp, #0
	_init_chip();
    762c:	4b01      	ldr	r3, [pc, #4]	; (7634 <init_mcu+0xc>)
    762e:	4798      	blx	r3
}
    7630:	bf00      	nop
    7632:	bd80      	pop	{r7, pc}
    7634:	0000ac4d 	.word	0x0000ac4d

00007638 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    7638:	b580      	push	{r7, lr}
    763a:	b082      	sub	sp, #8
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
    7640:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    7642:	687b      	ldr	r3, [r7, #4]
    7644:	2b00      	cmp	r3, #0
    7646:	d004      	beq.n	7652 <wdt_init+0x1a>
    7648:	683b      	ldr	r3, [r7, #0]
    764a:	2b00      	cmp	r3, #0
    764c:	d001      	beq.n	7652 <wdt_init+0x1a>
    764e:	2301      	movs	r3, #1
    7650:	e000      	b.n	7654 <wdt_init+0x1c>
    7652:	2300      	movs	r3, #0
    7654:	f003 0301 	and.w	r3, r3, #1
    7658:	b2db      	uxtb	r3, r3
    765a:	2248      	movs	r2, #72	; 0x48
    765c:	4907      	ldr	r1, [pc, #28]	; (767c <wdt_init+0x44>)
    765e:	4618      	mov	r0, r3
    7660:	4b07      	ldr	r3, [pc, #28]	; (7680 <wdt_init+0x48>)
    7662:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	683a      	ldr	r2, [r7, #0]
    7668:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    766a:	687b      	ldr	r3, [r7, #4]
    766c:	4618      	mov	r0, r3
    766e:	4b05      	ldr	r3, [pc, #20]	; (7684 <wdt_init+0x4c>)
    7670:	4798      	blx	r3
    7672:	4603      	mov	r3, r0
}
    7674:	4618      	mov	r0, r3
    7676:	3708      	adds	r7, #8
    7678:	46bd      	mov	sp, r7
    767a:	bd80      	pop	{r7, pc}
    767c:	00014f80 	.word	0x00014f80
    7680:	000099f1 	.word	0x000099f1
    7684:	0001142d 	.word	0x0001142d

00007688 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    7688:	b580      	push	{r7, lr}
    768a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    768c:	4804      	ldr	r0, [pc, #16]	; (76a0 <CRC_CALC_init+0x18>)
    768e:	4b05      	ldr	r3, [pc, #20]	; (76a4 <CRC_CALC_init+0x1c>)
    7690:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    7692:	4905      	ldr	r1, [pc, #20]	; (76a8 <CRC_CALC_init+0x20>)
    7694:	4805      	ldr	r0, [pc, #20]	; (76ac <CRC_CALC_init+0x24>)
    7696:	4b06      	ldr	r3, [pc, #24]	; (76b0 <CRC_CALC_init+0x28>)
    7698:	4798      	blx	r3
}
    769a:	bf00      	nop
    769c:	bd80      	pop	{r7, pc}
    769e:	bf00      	nop
    76a0:	40000800 	.word	0x40000800
    76a4:	00006eab 	.word	0x00006eab
    76a8:	41002000 	.word	0x41002000
    76ac:	20002624 	.word	0x20002624
    76b0:	0000860d 	.word	0x0000860d

000076b4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    76b8:	2244      	movs	r2, #68	; 0x44
    76ba:	2104      	movs	r1, #4
    76bc:	483f      	ldr	r0, [pc, #252]	; (77bc <EXTERNAL_IRQ_0_init+0x108>)
    76be:	4b40      	ldr	r3, [pc, #256]	; (77c0 <EXTERNAL_IRQ_0_init+0x10c>)
    76c0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    76c2:	4840      	ldr	r0, [pc, #256]	; (77c4 <EXTERNAL_IRQ_0_init+0x110>)
    76c4:	4b40      	ldr	r3, [pc, #256]	; (77c8 <EXTERNAL_IRQ_0_init+0x114>)
    76c6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    76c8:	2101      	movs	r1, #1
    76ca:	2040      	movs	r0, #64	; 0x40
    76cc:	4b3f      	ldr	r3, [pc, #252]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    76ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    76d0:	2100      	movs	r1, #0
    76d2:	2040      	movs	r0, #64	; 0x40
    76d4:	4b3e      	ldr	r3, [pc, #248]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    76d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    76d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    76dc:	2040      	movs	r0, #64	; 0x40
    76de:	4b3d      	ldr	r3, [pc, #244]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    76e0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    76e2:	2101      	movs	r1, #1
    76e4:	2021      	movs	r0, #33	; 0x21
    76e6:	4b39      	ldr	r3, [pc, #228]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    76e8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    76ea:	2100      	movs	r1, #0
    76ec:	2021      	movs	r0, #33	; 0x21
    76ee:	4b38      	ldr	r3, [pc, #224]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    76f0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    76f2:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    76f6:	2021      	movs	r0, #33	; 0x21
    76f8:	4b36      	ldr	r3, [pc, #216]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    76fa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    76fc:	2101      	movs	r1, #1
    76fe:	2003      	movs	r0, #3
    7700:	4b32      	ldr	r3, [pc, #200]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    7702:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    7704:	2102      	movs	r1, #2
    7706:	2003      	movs	r0, #3
    7708:	4b31      	ldr	r3, [pc, #196]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    770a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    770c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    7710:	2003      	movs	r0, #3
    7712:	4b30      	ldr	r3, [pc, #192]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    7714:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    7716:	2101      	movs	r1, #1
    7718:	2004      	movs	r0, #4
    771a:	4b2c      	ldr	r3, [pc, #176]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    771c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    771e:	2102      	movs	r1, #2
    7720:	2004      	movs	r0, #4
    7722:	4b2b      	ldr	r3, [pc, #172]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    7724:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    7726:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    772a:	2004      	movs	r0, #4
    772c:	4b29      	ldr	r3, [pc, #164]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    772e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    7730:	2101      	movs	r1, #1
    7732:	2005      	movs	r0, #5
    7734:	4b25      	ldr	r3, [pc, #148]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    7736:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    7738:	2102      	movs	r1, #2
    773a:	2005      	movs	r0, #5
    773c:	4b24      	ldr	r3, [pc, #144]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    773e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    7740:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    7744:	2005      	movs	r0, #5
    7746:	4b23      	ldr	r3, [pc, #140]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    7748:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    774a:	2101      	movs	r1, #1
    774c:	2056      	movs	r0, #86	; 0x56
    774e:	4b1f      	ldr	r3, [pc, #124]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    7750:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    7752:	2102      	movs	r1, #2
    7754:	2056      	movs	r0, #86	; 0x56
    7756:	4b1e      	ldr	r3, [pc, #120]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    7758:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    775a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    775e:	2056      	movs	r0, #86	; 0x56
    7760:	4b1c      	ldr	r3, [pc, #112]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    7762:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    7764:	2101      	movs	r1, #1
    7766:	2057      	movs	r0, #87	; 0x57
    7768:	4b18      	ldr	r3, [pc, #96]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    776a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    776c:	2102      	movs	r1, #2
    776e:	2057      	movs	r0, #87	; 0x57
    7770:	4b17      	ldr	r3, [pc, #92]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    7772:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    7774:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    7778:	2057      	movs	r0, #87	; 0x57
    777a:	4b16      	ldr	r3, [pc, #88]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    777c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    777e:	2101      	movs	r1, #1
    7780:	2028      	movs	r0, #40	; 0x28
    7782:	4b12      	ldr	r3, [pc, #72]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    7784:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    7786:	2100      	movs	r1, #0
    7788:	2028      	movs	r0, #40	; 0x28
    778a:	4b11      	ldr	r3, [pc, #68]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    778c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    778e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    7792:	2028      	movs	r0, #40	; 0x28
    7794:	4b0f      	ldr	r3, [pc, #60]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    7796:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    7798:	2101      	movs	r1, #1
    779a:	2029      	movs	r0, #41	; 0x29
    779c:	4b0b      	ldr	r3, [pc, #44]	; (77cc <EXTERNAL_IRQ_0_init+0x118>)
    779e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    77a0:	2100      	movs	r1, #0
    77a2:	2029      	movs	r0, #41	; 0x29
    77a4:	4b0a      	ldr	r3, [pc, #40]	; (77d0 <EXTERNAL_IRQ_0_init+0x11c>)
    77a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    77a8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    77ac:	2029      	movs	r0, #41	; 0x29
    77ae:	4b09      	ldr	r3, [pc, #36]	; (77d4 <EXTERNAL_IRQ_0_init+0x120>)
    77b0:	4798      	blx	r3

	ext_irq_init();
    77b2:	4b09      	ldr	r3, [pc, #36]	; (77d8 <EXTERNAL_IRQ_0_init+0x124>)
    77b4:	4798      	blx	r3
}
    77b6:	bf00      	nop
    77b8:	bd80      	pop	{r7, pc}
    77ba:	bf00      	nop
    77bc:	40001c00 	.word	0x40001c00
    77c0:	00006d45 	.word	0x00006d45
    77c4:	40000800 	.word	0x40000800
    77c8:	00006e2b 	.word	0x00006e2b
    77cc:	000075b9 	.word	0x000075b9
    77d0:	00007565 	.word	0x00007565
    77d4:	00007599 	.word	0x00007599
    77d8:	000086d5 	.word	0x000086d5

000077dc <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    77dc:	b580      	push	{r7, lr}
    77de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    77e0:	2244      	movs	r2, #68	; 0x44
    77e2:	210b      	movs	r1, #11
    77e4:	4807      	ldr	r0, [pc, #28]	; (7804 <EVENT_SYSTEM_0_init+0x28>)
    77e6:	4b08      	ldr	r3, [pc, #32]	; (7808 <EVENT_SYSTEM_0_init+0x2c>)
    77e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    77ea:	2244      	movs	r2, #68	; 0x44
    77ec:	210c      	movs	r1, #12
    77ee:	4805      	ldr	r0, [pc, #20]	; (7804 <EVENT_SYSTEM_0_init+0x28>)
    77f0:	4b05      	ldr	r3, [pc, #20]	; (7808 <EVENT_SYSTEM_0_init+0x2c>)
    77f2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    77f4:	4805      	ldr	r0, [pc, #20]	; (780c <EVENT_SYSTEM_0_init+0x30>)
    77f6:	4b06      	ldr	r3, [pc, #24]	; (7810 <EVENT_SYSTEM_0_init+0x34>)
    77f8:	4798      	blx	r3

	event_system_init();
    77fa:	4b06      	ldr	r3, [pc, #24]	; (7814 <EVENT_SYSTEM_0_init+0x38>)
    77fc:	4798      	blx	r3
}
    77fe:	bf00      	nop
    7800:	bd80      	pop	{r7, pc}
    7802:	bf00      	nop
    7804:	40001c00 	.word	0x40001c00
    7808:	00006d45 	.word	0x00006d45
    780c:	40000800 	.word	0x40000800
    7810:	00006ecb 	.word	0x00006ecb
    7814:	000086c1 	.word	0x000086c1

00007818 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    7818:	b580      	push	{r7, lr}
    781a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    781c:	2101      	movs	r1, #1
    781e:	202b      	movs	r0, #43	; 0x2b
    7820:	4b2b      	ldr	r3, [pc, #172]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    7822:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    7824:	2100      	movs	r1, #0
    7826:	202b      	movs	r0, #43	; 0x2b
    7828:	4b2a      	ldr	r3, [pc, #168]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    782a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    782c:	492a      	ldr	r1, [pc, #168]	; (78d8 <QSPI_N25Q256_PORT_init+0xc0>)
    782e:	202b      	movs	r0, #43	; 0x2b
    7830:	4b2a      	ldr	r3, [pc, #168]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    7832:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    7834:	2102      	movs	r1, #2
    7836:	2008      	movs	r0, #8
    7838:	4b25      	ldr	r3, [pc, #148]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    783a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    783c:	2100      	movs	r1, #0
    783e:	2008      	movs	r0, #8
    7840:	4b27      	ldr	r3, [pc, #156]	; (78e0 <QSPI_N25Q256_PORT_init+0xc8>)
    7842:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    7844:	2100      	movs	r1, #0
    7846:	2008      	movs	r0, #8
    7848:	4b22      	ldr	r3, [pc, #136]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    784a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    784c:	4925      	ldr	r1, [pc, #148]	; (78e4 <QSPI_N25Q256_PORT_init+0xcc>)
    784e:	2008      	movs	r0, #8
    7850:	4b22      	ldr	r3, [pc, #136]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    7852:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    7854:	2102      	movs	r1, #2
    7856:	2009      	movs	r0, #9
    7858:	4b1d      	ldr	r3, [pc, #116]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    785a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    785c:	2100      	movs	r1, #0
    785e:	2009      	movs	r0, #9
    7860:	4b1f      	ldr	r3, [pc, #124]	; (78e0 <QSPI_N25Q256_PORT_init+0xc8>)
    7862:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    7864:	2100      	movs	r1, #0
    7866:	2009      	movs	r0, #9
    7868:	4b1a      	ldr	r3, [pc, #104]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    786a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    786c:	491e      	ldr	r1, [pc, #120]	; (78e8 <QSPI_N25Q256_PORT_init+0xd0>)
    786e:	2009      	movs	r0, #9
    7870:	4b1a      	ldr	r3, [pc, #104]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    7872:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    7874:	2102      	movs	r1, #2
    7876:	200a      	movs	r0, #10
    7878:	4b15      	ldr	r3, [pc, #84]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    787a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    787c:	2100      	movs	r1, #0
    787e:	200a      	movs	r0, #10
    7880:	4b17      	ldr	r3, [pc, #92]	; (78e0 <QSPI_N25Q256_PORT_init+0xc8>)
    7882:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    7884:	2100      	movs	r1, #0
    7886:	200a      	movs	r0, #10
    7888:	4b12      	ldr	r3, [pc, #72]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    788a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    788c:	4917      	ldr	r1, [pc, #92]	; (78ec <QSPI_N25Q256_PORT_init+0xd4>)
    788e:	200a      	movs	r0, #10
    7890:	4b12      	ldr	r3, [pc, #72]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    7892:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    7894:	2102      	movs	r1, #2
    7896:	200b      	movs	r0, #11
    7898:	4b0d      	ldr	r3, [pc, #52]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    789a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    789c:	2100      	movs	r1, #0
    789e:	200b      	movs	r0, #11
    78a0:	4b0f      	ldr	r3, [pc, #60]	; (78e0 <QSPI_N25Q256_PORT_init+0xc8>)
    78a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    78a4:	2100      	movs	r1, #0
    78a6:	200b      	movs	r0, #11
    78a8:	4b0a      	ldr	r3, [pc, #40]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    78aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    78ac:	4910      	ldr	r1, [pc, #64]	; (78f0 <QSPI_N25Q256_PORT_init+0xd8>)
    78ae:	200b      	movs	r0, #11
    78b0:	4b0a      	ldr	r3, [pc, #40]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    78b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    78b4:	2101      	movs	r1, #1
    78b6:	202a      	movs	r0, #42	; 0x2a
    78b8:	4b05      	ldr	r3, [pc, #20]	; (78d0 <QSPI_N25Q256_PORT_init+0xb8>)
    78ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    78bc:	2100      	movs	r1, #0
    78be:	202a      	movs	r0, #42	; 0x2a
    78c0:	4b04      	ldr	r3, [pc, #16]	; (78d4 <QSPI_N25Q256_PORT_init+0xbc>)
    78c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    78c4:	490b      	ldr	r1, [pc, #44]	; (78f4 <QSPI_N25Q256_PORT_init+0xdc>)
    78c6:	202a      	movs	r0, #42	; 0x2a
    78c8:	4b04      	ldr	r3, [pc, #16]	; (78dc <QSPI_N25Q256_PORT_init+0xc4>)
    78ca:	4798      	blx	r3
}
    78cc:	bf00      	nop
    78ce:	bd80      	pop	{r7, pc}
    78d0:	000075b9 	.word	0x000075b9
    78d4:	00007565 	.word	0x00007565
    78d8:	002b0007 	.word	0x002b0007
    78dc:	00007599 	.word	0x00007599
    78e0:	000075f1 	.word	0x000075f1
    78e4:	00080007 	.word	0x00080007
    78e8:	00090007 	.word	0x00090007
    78ec:	000a0007 	.word	0x000a0007
    78f0:	000b0007 	.word	0x000b0007
    78f4:	002a0007 	.word	0x002a0007

000078f8 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    78fc:	4805      	ldr	r0, [pc, #20]	; (7914 <QSPI_N25Q256_CLOCK_init+0x1c>)
    78fe:	4b06      	ldr	r3, [pc, #24]	; (7918 <QSPI_N25Q256_CLOCK_init+0x20>)
    7900:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    7902:	4804      	ldr	r0, [pc, #16]	; (7914 <QSPI_N25Q256_CLOCK_init+0x1c>)
    7904:	4b05      	ldr	r3, [pc, #20]	; (791c <QSPI_N25Q256_CLOCK_init+0x24>)
    7906:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    7908:	4802      	ldr	r0, [pc, #8]	; (7914 <QSPI_N25Q256_CLOCK_init+0x1c>)
    790a:	4b05      	ldr	r3, [pc, #20]	; (7920 <QSPI_N25Q256_CLOCK_init+0x28>)
    790c:	4798      	blx	r3
}
    790e:	bf00      	nop
    7910:	bd80      	pop	{r7, pc}
    7912:	bf00      	nop
    7914:	40000800 	.word	0x40000800
    7918:	00006d8b 	.word	0x00006d8b
    791c:	00006dcb 	.word	0x00006dcb
    7920:	00006fab 	.word	0x00006fab

00007924 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    7924:	b580      	push	{r7, lr}
    7926:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    7928:	4b04      	ldr	r3, [pc, #16]	; (793c <QSPI_N25Q256_init+0x18>)
    792a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    792c:	4904      	ldr	r1, [pc, #16]	; (7940 <QSPI_N25Q256_init+0x1c>)
    792e:	4805      	ldr	r0, [pc, #20]	; (7944 <QSPI_N25Q256_init+0x20>)
    7930:	4b05      	ldr	r3, [pc, #20]	; (7948 <QSPI_N25Q256_init+0x24>)
    7932:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    7934:	4b05      	ldr	r3, [pc, #20]	; (794c <QSPI_N25Q256_init+0x28>)
    7936:	4798      	blx	r3
}
    7938:	bf00      	nop
    793a:	bd80      	pop	{r7, pc}
    793c:	000078f9 	.word	0x000078f9
    7940:	42003400 	.word	0x42003400
    7944:	200024b8 	.word	0x200024b8
    7948:	000089cd 	.word	0x000089cd
    794c:	00007819 	.word	0x00007819

00007950 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    7950:	b580      	push	{r7, lr}
    7952:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    7954:	4802      	ldr	r0, [pc, #8]	; (7960 <DATETIME_CLOCK_CLOCK_init+0x10>)
    7956:	4b03      	ldr	r3, [pc, #12]	; (7964 <DATETIME_CLOCK_CLOCK_init+0x14>)
    7958:	4798      	blx	r3
}
    795a:	bf00      	nop
    795c:	bd80      	pop	{r7, pc}
    795e:	bf00      	nop
    7960:	40000800 	.word	0x40000800
    7964:	00006e0b 	.word	0x00006e0b

00007968 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    7968:	b580      	push	{r7, lr}
    796a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    796c:	4b03      	ldr	r3, [pc, #12]	; (797c <DATETIME_CLOCK_init+0x14>)
    796e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    7970:	4903      	ldr	r1, [pc, #12]	; (7980 <DATETIME_CLOCK_init+0x18>)
    7972:	4804      	ldr	r0, [pc, #16]	; (7984 <DATETIME_CLOCK_init+0x1c>)
    7974:	4b04      	ldr	r3, [pc, #16]	; (7988 <DATETIME_CLOCK_init+0x20>)
    7976:	4798      	blx	r3
}
    7978:	bf00      	nop
    797a:	bd80      	pop	{r7, pc}
    797c:	00007951 	.word	0x00007951
    7980:	40002400 	.word	0x40002400
    7984:	20002600 	.word	0x20002600
    7988:	00008315 	.word	0x00008315

0000798c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    798c:	b580      	push	{r7, lr}
    798e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    7990:	2101      	movs	r1, #1
    7992:	2010      	movs	r0, #16
    7994:	4b07      	ldr	r3, [pc, #28]	; (79b4 <I2C_HEATERS_PORT_init+0x28>)
    7996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    7998:	4907      	ldr	r1, [pc, #28]	; (79b8 <I2C_HEATERS_PORT_init+0x2c>)
    799a:	2010      	movs	r0, #16
    799c:	4b07      	ldr	r3, [pc, #28]	; (79bc <I2C_HEATERS_PORT_init+0x30>)
    799e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    79a0:	2101      	movs	r1, #1
    79a2:	2011      	movs	r0, #17
    79a4:	4b03      	ldr	r3, [pc, #12]	; (79b4 <I2C_HEATERS_PORT_init+0x28>)
    79a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    79a8:	4905      	ldr	r1, [pc, #20]	; (79c0 <I2C_HEATERS_PORT_init+0x34>)
    79aa:	2011      	movs	r0, #17
    79ac:	4b03      	ldr	r3, [pc, #12]	; (79bc <I2C_HEATERS_PORT_init+0x30>)
    79ae:	4798      	blx	r3
}
    79b0:	bf00      	nop
    79b2:	bd80      	pop	{r7, pc}
    79b4:	00007565 	.word	0x00007565
    79b8:	00100002 	.word	0x00100002
    79bc:	00007599 	.word	0x00007599
    79c0:	00110002 	.word	0x00110002

000079c4 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    79c4:	b580      	push	{r7, lr}
    79c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    79c8:	2242      	movs	r2, #66	; 0x42
    79ca:	2108      	movs	r1, #8
    79cc:	4806      	ldr	r0, [pc, #24]	; (79e8 <I2C_HEATERS_CLOCK_init+0x24>)
    79ce:	4b07      	ldr	r3, [pc, #28]	; (79ec <I2C_HEATERS_CLOCK_init+0x28>)
    79d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    79d2:	224a      	movs	r2, #74	; 0x4a
    79d4:	2103      	movs	r1, #3
    79d6:	4804      	ldr	r0, [pc, #16]	; (79e8 <I2C_HEATERS_CLOCK_init+0x24>)
    79d8:	4b04      	ldr	r3, [pc, #16]	; (79ec <I2C_HEATERS_CLOCK_init+0x28>)
    79da:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    79dc:	4804      	ldr	r0, [pc, #16]	; (79f0 <I2C_HEATERS_CLOCK_init+0x2c>)
    79de:	4b05      	ldr	r3, [pc, #20]	; (79f4 <I2C_HEATERS_CLOCK_init+0x30>)
    79e0:	4798      	blx	r3
}
    79e2:	bf00      	nop
    79e4:	bd80      	pop	{r7, pc}
    79e6:	bf00      	nop
    79e8:	40001c00 	.word	0x40001c00
    79ec:	00006d45 	.word	0x00006d45
    79f0:	40000800 	.word	0x40000800
    79f4:	00006e4b 	.word	0x00006e4b

000079f8 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    79fc:	4b04      	ldr	r3, [pc, #16]	; (7a10 <I2C_HEATERS_init+0x18>)
    79fe:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    7a00:	4904      	ldr	r1, [pc, #16]	; (7a14 <I2C_HEATERS_init+0x1c>)
    7a02:	4805      	ldr	r0, [pc, #20]	; (7a18 <I2C_HEATERS_init+0x20>)
    7a04:	4b05      	ldr	r3, [pc, #20]	; (7a1c <I2C_HEATERS_init+0x24>)
    7a06:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    7a08:	4b05      	ldr	r3, [pc, #20]	; (7a20 <I2C_HEATERS_init+0x28>)
    7a0a:	4798      	blx	r3
}
    7a0c:	bf00      	nop
    7a0e:	bd80      	pop	{r7, pc}
    7a10:	000079c5 	.word	0x000079c5
    7a14:	40003400 	.word	0x40003400
    7a18:	20002558 	.word	0x20002558
    7a1c:	00008845 	.word	0x00008845
    7a20:	0000798d 	.word	0x0000798d

00007a24 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    7a28:	2100      	movs	r1, #0
    7a2a:	203b      	movs	r0, #59	; 0x3b
    7a2c:	4b11      	ldr	r3, [pc, #68]	; (7a74 <SPI_TEMP_PORT_init+0x50>)
    7a2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    7a30:	2102      	movs	r1, #2
    7a32:	203b      	movs	r0, #59	; 0x3b
    7a34:	4b10      	ldr	r3, [pc, #64]	; (7a78 <SPI_TEMP_PORT_init+0x54>)
    7a36:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    7a38:	4910      	ldr	r1, [pc, #64]	; (7a7c <SPI_TEMP_PORT_init+0x58>)
    7a3a:	203b      	movs	r0, #59	; 0x3b
    7a3c:	4b10      	ldr	r3, [pc, #64]	; (7a80 <SPI_TEMP_PORT_init+0x5c>)
    7a3e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    7a40:	2100      	movs	r1, #0
    7a42:	203a      	movs	r0, #58	; 0x3a
    7a44:	4b0b      	ldr	r3, [pc, #44]	; (7a74 <SPI_TEMP_PORT_init+0x50>)
    7a46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    7a48:	2102      	movs	r1, #2
    7a4a:	203a      	movs	r0, #58	; 0x3a
    7a4c:	4b0a      	ldr	r3, [pc, #40]	; (7a78 <SPI_TEMP_PORT_init+0x54>)
    7a4e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    7a50:	490c      	ldr	r1, [pc, #48]	; (7a84 <SPI_TEMP_PORT_init+0x60>)
    7a52:	203a      	movs	r0, #58	; 0x3a
    7a54:	4b0a      	ldr	r3, [pc, #40]	; (7a80 <SPI_TEMP_PORT_init+0x5c>)
    7a56:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    7a58:	2101      	movs	r1, #1
    7a5a:	203c      	movs	r0, #60	; 0x3c
    7a5c:	4b06      	ldr	r3, [pc, #24]	; (7a78 <SPI_TEMP_PORT_init+0x54>)
    7a5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    7a60:	2100      	movs	r1, #0
    7a62:	203c      	movs	r0, #60	; 0x3c
    7a64:	4b08      	ldr	r3, [pc, #32]	; (7a88 <SPI_TEMP_PORT_init+0x64>)
    7a66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    7a68:	4908      	ldr	r1, [pc, #32]	; (7a8c <SPI_TEMP_PORT_init+0x68>)
    7a6a:	203c      	movs	r0, #60	; 0x3c
    7a6c:	4b04      	ldr	r3, [pc, #16]	; (7a80 <SPI_TEMP_PORT_init+0x5c>)
    7a6e:	4798      	blx	r3
}
    7a70:	bf00      	nop
    7a72:	bd80      	pop	{r7, pc}
    7a74:	000075f1 	.word	0x000075f1
    7a78:	000075b9 	.word	0x000075b9
    7a7c:	003b0003 	.word	0x003b0003
    7a80:	00007599 	.word	0x00007599
    7a84:	003a0003 	.word	0x003a0003
    7a88:	00007565 	.word	0x00007565
    7a8c:	003c0003 	.word	0x003c0003

00007a90 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7a94:	2245      	movs	r2, #69	; 0x45
    7a96:	2122      	movs	r1, #34	; 0x22
    7a98:	4806      	ldr	r0, [pc, #24]	; (7ab4 <SPI_TEMP_CLOCK_init+0x24>)
    7a9a:	4b07      	ldr	r3, [pc, #28]	; (7ab8 <SPI_TEMP_CLOCK_init+0x28>)
    7a9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7a9e:	224a      	movs	r2, #74	; 0x4a
    7aa0:	2103      	movs	r1, #3
    7aa2:	4804      	ldr	r0, [pc, #16]	; (7ab4 <SPI_TEMP_CLOCK_init+0x24>)
    7aa4:	4b04      	ldr	r3, [pc, #16]	; (7ab8 <SPI_TEMP_CLOCK_init+0x28>)
    7aa6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    7aa8:	4804      	ldr	r0, [pc, #16]	; (7abc <SPI_TEMP_CLOCK_init+0x2c>)
    7aaa:	4b05      	ldr	r3, [pc, #20]	; (7ac0 <SPI_TEMP_CLOCK_init+0x30>)
    7aac:	4798      	blx	r3
}
    7aae:	bf00      	nop
    7ab0:	bd80      	pop	{r7, pc}
    7ab2:	bf00      	nop
    7ab4:	40001c00 	.word	0x40001c00
    7ab8:	00006d45 	.word	0x00006d45
    7abc:	40000800 	.word	0x40000800
    7ac0:	00006fcb 	.word	0x00006fcb

00007ac4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    7ac4:	b580      	push	{r7, lr}
    7ac6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    7ac8:	4b05      	ldr	r3, [pc, #20]	; (7ae0 <SPI_TEMP_init+0x1c>)
    7aca:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    7acc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    7ad0:	4804      	ldr	r0, [pc, #16]	; (7ae4 <SPI_TEMP_init+0x20>)
    7ad2:	4b05      	ldr	r3, [pc, #20]	; (7ae8 <SPI_TEMP_init+0x24>)
    7ad4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    7ad6:	4b05      	ldr	r3, [pc, #20]	; (7aec <SPI_TEMP_init+0x28>)
    7ad8:	4798      	blx	r3
}
    7ada:	bf00      	nop
    7adc:	bd80      	pop	{r7, pc}
    7ade:	bf00      	nop
    7ae0:	00007a91 	.word	0x00007a91
    7ae4:	20002460 	.word	0x20002460
    7ae8:	00008add 	.word	0x00008add
    7aec:	00007a25 	.word	0x00007a25

00007af0 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    7af0:	b580      	push	{r7, lr}
    7af2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    7af4:	2100      	movs	r1, #0
    7af6:	2017      	movs	r0, #23
    7af8:	4b07      	ldr	r3, [pc, #28]	; (7b18 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    7afa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    7afc:	4907      	ldr	r1, [pc, #28]	; (7b1c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    7afe:	2017      	movs	r0, #23
    7b00:	4b07      	ldr	r3, [pc, #28]	; (7b20 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    7b02:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    7b04:	2100      	movs	r1, #0
    7b06:	2016      	movs	r0, #22
    7b08:	4b03      	ldr	r3, [pc, #12]	; (7b18 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    7b0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    7b0c:	4905      	ldr	r1, [pc, #20]	; (7b24 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    7b0e:	2016      	movs	r0, #22
    7b10:	4b03      	ldr	r3, [pc, #12]	; (7b20 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    7b12:	4798      	blx	r3
}
    7b14:	bf00      	nop
    7b16:	bd80      	pop	{r7, pc}
    7b18:	00007565 	.word	0x00007565
    7b1c:	00170003 	.word	0x00170003
    7b20:	00007599 	.word	0x00007599
    7b24:	00160003 	.word	0x00160003

00007b28 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7b2c:	2244      	movs	r2, #68	; 0x44
    7b2e:	2123      	movs	r1, #35	; 0x23
    7b30:	4806      	ldr	r0, [pc, #24]	; (7b4c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    7b32:	4b07      	ldr	r3, [pc, #28]	; (7b50 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    7b34:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7b36:	224a      	movs	r2, #74	; 0x4a
    7b38:	2103      	movs	r1, #3
    7b3a:	4804      	ldr	r0, [pc, #16]	; (7b4c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    7b3c:	4b04      	ldr	r3, [pc, #16]	; (7b50 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    7b3e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    7b40:	4804      	ldr	r0, [pc, #16]	; (7b54 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    7b42:	4b05      	ldr	r3, [pc, #20]	; (7b58 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    7b44:	4798      	blx	r3
}
    7b46:	bf00      	nop
    7b48:	bd80      	pop	{r7, pc}
    7b4a:	bf00      	nop
    7b4c:	40001c00 	.word	0x40001c00
    7b50:	00006d45 	.word	0x00006d45
    7b54:	40000800 	.word	0x40000800
    7b58:	00006feb 	.word	0x00006feb

00007b5c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    7b60:	4b04      	ldr	r3, [pc, #16]	; (7b74 <I2C_FLAPPER_VALVE_init+0x18>)
    7b62:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    7b64:	4904      	ldr	r1, [pc, #16]	; (7b78 <I2C_FLAPPER_VALVE_init+0x1c>)
    7b66:	4805      	ldr	r0, [pc, #20]	; (7b7c <I2C_FLAPPER_VALVE_init+0x20>)
    7b68:	4b05      	ldr	r3, [pc, #20]	; (7b80 <I2C_FLAPPER_VALVE_init+0x24>)
    7b6a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    7b6c:	4b05      	ldr	r3, [pc, #20]	; (7b84 <I2C_FLAPPER_VALVE_init+0x28>)
    7b6e:	4798      	blx	r3
}
    7b70:	bf00      	nop
    7b72:	bd80      	pop	{r7, pc}
    7b74:	00007b29 	.word	0x00007b29
    7b78:	43000400 	.word	0x43000400
    7b7c:	200024fc 	.word	0x200024fc
    7b80:	00008845 	.word	0x00008845
    7b84:	00007af1 	.word	0x00007af1

00007b88 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    7b88:	b580      	push	{r7, lr}
    7b8a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    7b8c:	2100      	movs	r1, #0
    7b8e:	2044      	movs	r0, #68	; 0x44
    7b90:	4b11      	ldr	r3, [pc, #68]	; (7bd8 <SPI_HI3593_PORT_init+0x50>)
    7b92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    7b94:	2102      	movs	r1, #2
    7b96:	2044      	movs	r0, #68	; 0x44
    7b98:	4b10      	ldr	r3, [pc, #64]	; (7bdc <SPI_HI3593_PORT_init+0x54>)
    7b9a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    7b9c:	4910      	ldr	r1, [pc, #64]	; (7be0 <SPI_HI3593_PORT_init+0x58>)
    7b9e:	2044      	movs	r0, #68	; 0x44
    7ba0:	4b10      	ldr	r3, [pc, #64]	; (7be4 <SPI_HI3593_PORT_init+0x5c>)
    7ba2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    7ba4:	2100      	movs	r1, #0
    7ba6:	2045      	movs	r0, #69	; 0x45
    7ba8:	4b0b      	ldr	r3, [pc, #44]	; (7bd8 <SPI_HI3593_PORT_init+0x50>)
    7baa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    7bac:	2102      	movs	r1, #2
    7bae:	2045      	movs	r0, #69	; 0x45
    7bb0:	4b0a      	ldr	r3, [pc, #40]	; (7bdc <SPI_HI3593_PORT_init+0x54>)
    7bb2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    7bb4:	490c      	ldr	r1, [pc, #48]	; (7be8 <SPI_HI3593_PORT_init+0x60>)
    7bb6:	2045      	movs	r0, #69	; 0x45
    7bb8:	4b0a      	ldr	r3, [pc, #40]	; (7be4 <SPI_HI3593_PORT_init+0x5c>)
    7bba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    7bbc:	2101      	movs	r1, #1
    7bbe:	2047      	movs	r0, #71	; 0x47
    7bc0:	4b06      	ldr	r3, [pc, #24]	; (7bdc <SPI_HI3593_PORT_init+0x54>)
    7bc2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    7bc4:	2100      	movs	r1, #0
    7bc6:	2047      	movs	r0, #71	; 0x47
    7bc8:	4b08      	ldr	r3, [pc, #32]	; (7bec <SPI_HI3593_PORT_init+0x64>)
    7bca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    7bcc:	4908      	ldr	r1, [pc, #32]	; (7bf0 <SPI_HI3593_PORT_init+0x68>)
    7bce:	2047      	movs	r0, #71	; 0x47
    7bd0:	4b04      	ldr	r3, [pc, #16]	; (7be4 <SPI_HI3593_PORT_init+0x5c>)
    7bd2:	4798      	blx	r3
}
    7bd4:	bf00      	nop
    7bd6:	bd80      	pop	{r7, pc}
    7bd8:	000075f1 	.word	0x000075f1
    7bdc:	000075b9 	.word	0x000075b9
    7be0:	00440002 	.word	0x00440002
    7be4:	00007599 	.word	0x00007599
    7be8:	00450002 	.word	0x00450002
    7bec:	00007565 	.word	0x00007565
    7bf0:	00470002 	.word	0x00470002

00007bf4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    7bf4:	b580      	push	{r7, lr}
    7bf6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7bf8:	2242      	movs	r2, #66	; 0x42
    7bfa:	2124      	movs	r1, #36	; 0x24
    7bfc:	4806      	ldr	r0, [pc, #24]	; (7c18 <SPI_HI3593_CLOCK_init+0x24>)
    7bfe:	4b07      	ldr	r3, [pc, #28]	; (7c1c <SPI_HI3593_CLOCK_init+0x28>)
    7c00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7c02:	224a      	movs	r2, #74	; 0x4a
    7c04:	2103      	movs	r1, #3
    7c06:	4804      	ldr	r0, [pc, #16]	; (7c18 <SPI_HI3593_CLOCK_init+0x24>)
    7c08:	4b04      	ldr	r3, [pc, #16]	; (7c1c <SPI_HI3593_CLOCK_init+0x28>)
    7c0a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    7c0c:	4804      	ldr	r0, [pc, #16]	; (7c20 <SPI_HI3593_CLOCK_init+0x2c>)
    7c0e:	4b05      	ldr	r3, [pc, #20]	; (7c24 <SPI_HI3593_CLOCK_init+0x30>)
    7c10:	4798      	blx	r3
}
    7c12:	bf00      	nop
    7c14:	bd80      	pop	{r7, pc}
    7c16:	bf00      	nop
    7c18:	40001c00 	.word	0x40001c00
    7c1c:	00006d45 	.word	0x00006d45
    7c20:	40000800 	.word	0x40000800
    7c24:	0000700b 	.word	0x0000700b

00007c28 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    7c28:	b580      	push	{r7, lr}
    7c2a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    7c2c:	4b04      	ldr	r3, [pc, #16]	; (7c40 <SPI_HI3593_init+0x18>)
    7c2e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    7c30:	4904      	ldr	r1, [pc, #16]	; (7c44 <SPI_HI3593_init+0x1c>)
    7c32:	4805      	ldr	r0, [pc, #20]	; (7c48 <SPI_HI3593_init+0x20>)
    7c34:	4b05      	ldr	r3, [pc, #20]	; (7c4c <SPI_HI3593_init+0x24>)
    7c36:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    7c38:	4b05      	ldr	r3, [pc, #20]	; (7c50 <SPI_HI3593_init+0x28>)
    7c3a:	4798      	blx	r3
}
    7c3c:	bf00      	nop
    7c3e:	bd80      	pop	{r7, pc}
    7c40:	00007bf5 	.word	0x00007bf5
    7c44:	43000800 	.word	0x43000800
    7c48:	20002448 	.word	0x20002448
    7c4c:	00008add 	.word	0x00008add
    7c50:	00007b89 	.word	0x00007b89

00007c54 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    7c58:	2100      	movs	r1, #0
    7c5a:	2068      	movs	r0, #104	; 0x68
    7c5c:	4b07      	ldr	r3, [pc, #28]	; (7c7c <I2C_FANS_PORT_init+0x28>)
    7c5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    7c60:	4907      	ldr	r1, [pc, #28]	; (7c80 <I2C_FANS_PORT_init+0x2c>)
    7c62:	2068      	movs	r0, #104	; 0x68
    7c64:	4b07      	ldr	r3, [pc, #28]	; (7c84 <I2C_FANS_PORT_init+0x30>)
    7c66:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    7c68:	2100      	movs	r1, #0
    7c6a:	2069      	movs	r0, #105	; 0x69
    7c6c:	4b03      	ldr	r3, [pc, #12]	; (7c7c <I2C_FANS_PORT_init+0x28>)
    7c6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    7c70:	4905      	ldr	r1, [pc, #20]	; (7c88 <I2C_FANS_PORT_init+0x34>)
    7c72:	2069      	movs	r0, #105	; 0x69
    7c74:	4b03      	ldr	r3, [pc, #12]	; (7c84 <I2C_FANS_PORT_init+0x30>)
    7c76:	4798      	blx	r3
}
    7c78:	bf00      	nop
    7c7a:	bd80      	pop	{r7, pc}
    7c7c:	00007565 	.word	0x00007565
    7c80:	00680002 	.word	0x00680002
    7c84:	00007599 	.word	0x00007599
    7c88:	00690002 	.word	0x00690002

00007c8c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7c90:	2244      	movs	r2, #68	; 0x44
    7c92:	2125      	movs	r1, #37	; 0x25
    7c94:	4806      	ldr	r0, [pc, #24]	; (7cb0 <I2C_FANS_CLOCK_init+0x24>)
    7c96:	4b07      	ldr	r3, [pc, #28]	; (7cb4 <I2C_FANS_CLOCK_init+0x28>)
    7c98:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7c9a:	224a      	movs	r2, #74	; 0x4a
    7c9c:	2103      	movs	r1, #3
    7c9e:	4804      	ldr	r0, [pc, #16]	; (7cb0 <I2C_FANS_CLOCK_init+0x24>)
    7ca0:	4b04      	ldr	r3, [pc, #16]	; (7cb4 <I2C_FANS_CLOCK_init+0x28>)
    7ca2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    7ca4:	4804      	ldr	r0, [pc, #16]	; (7cb8 <I2C_FANS_CLOCK_init+0x2c>)
    7ca6:	4b05      	ldr	r3, [pc, #20]	; (7cbc <I2C_FANS_CLOCK_init+0x30>)
    7ca8:	4798      	blx	r3
}
    7caa:	bf00      	nop
    7cac:	bd80      	pop	{r7, pc}
    7cae:	bf00      	nop
    7cb0:	40001c00 	.word	0x40001c00
    7cb4:	00006d45 	.word	0x00006d45
    7cb8:	40000800 	.word	0x40000800
    7cbc:	0000702b 	.word	0x0000702b

00007cc0 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    7cc0:	b580      	push	{r7, lr}
    7cc2:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    7cc4:	4b04      	ldr	r3, [pc, #16]	; (7cd8 <I2C_FANS_init+0x18>)
    7cc6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    7cc8:	4904      	ldr	r1, [pc, #16]	; (7cdc <I2C_FANS_init+0x1c>)
    7cca:	4805      	ldr	r0, [pc, #20]	; (7ce0 <I2C_FANS_init+0x20>)
    7ccc:	4b05      	ldr	r3, [pc, #20]	; (7ce4 <I2C_FANS_init+0x24>)
    7cce:	4798      	blx	r3
	I2C_FANS_PORT_init();
    7cd0:	4b05      	ldr	r3, [pc, #20]	; (7ce8 <I2C_FANS_init+0x28>)
    7cd2:	4798      	blx	r3
}
    7cd4:	bf00      	nop
    7cd6:	bd80      	pop	{r7, pc}
    7cd8:	00007c8d 	.word	0x00007c8d
    7cdc:	43000c00 	.word	0x43000c00
    7ce0:	20002478 	.word	0x20002478
    7ce4:	00008845 	.word	0x00008845
    7ce8:	00007c55 	.word	0x00007c55

00007cec <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    7cec:	b580      	push	{r7, lr}
    7cee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    7cf0:	4808      	ldr	r0, [pc, #32]	; (7d14 <TIMER_USB_init+0x28>)
    7cf2:	4b09      	ldr	r3, [pc, #36]	; (7d18 <TIMER_USB_init+0x2c>)
    7cf4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7cf6:	2243      	movs	r2, #67	; 0x43
    7cf8:	2109      	movs	r1, #9
    7cfa:	4808      	ldr	r0, [pc, #32]	; (7d1c <TIMER_USB_init+0x30>)
    7cfc:	4b08      	ldr	r3, [pc, #32]	; (7d20 <TIMER_USB_init+0x34>)
    7cfe:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    7d00:	4b08      	ldr	r3, [pc, #32]	; (7d24 <TIMER_USB_init+0x38>)
    7d02:	4798      	blx	r3
    7d04:	4603      	mov	r3, r0
    7d06:	461a      	mov	r2, r3
    7d08:	4907      	ldr	r1, [pc, #28]	; (7d28 <TIMER_USB_init+0x3c>)
    7d0a:	4808      	ldr	r0, [pc, #32]	; (7d2c <TIMER_USB_init+0x40>)
    7d0c:	4b08      	ldr	r3, [pc, #32]	; (7d30 <TIMER_USB_init+0x44>)
    7d0e:	4798      	blx	r3
}
    7d10:	bf00      	nop
    7d12:	bd80      	pop	{r7, pc}
    7d14:	40000800 	.word	0x40000800
    7d18:	00006e6b 	.word	0x00006e6b
    7d1c:	40001c00 	.word	0x40001c00
    7d20:	00006d45 	.word	0x00006d45
    7d24:	0000e919 	.word	0x0000e919
    7d28:	40003800 	.word	0x40003800
    7d2c:	200025c0 	.word	0x200025c0
    7d30:	00008cad 	.word	0x00008cad

00007d34 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    7d34:	b580      	push	{r7, lr}
    7d36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    7d38:	4808      	ldr	r0, [pc, #32]	; (7d5c <TIMER_ARINC_init+0x28>)
    7d3a:	4b09      	ldr	r3, [pc, #36]	; (7d60 <TIMER_ARINC_init+0x2c>)
    7d3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7d3e:	2244      	movs	r2, #68	; 0x44
    7d40:	211a      	movs	r1, #26
    7d42:	4808      	ldr	r0, [pc, #32]	; (7d64 <TIMER_ARINC_init+0x30>)
    7d44:	4b08      	ldr	r3, [pc, #32]	; (7d68 <TIMER_ARINC_init+0x34>)
    7d46:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    7d48:	4b08      	ldr	r3, [pc, #32]	; (7d6c <TIMER_ARINC_init+0x38>)
    7d4a:	4798      	blx	r3
    7d4c:	4603      	mov	r3, r0
    7d4e:	461a      	mov	r2, r3
    7d50:	4907      	ldr	r1, [pc, #28]	; (7d70 <TIMER_ARINC_init+0x3c>)
    7d52:	4808      	ldr	r0, [pc, #32]	; (7d74 <TIMER_ARINC_init+0x40>)
    7d54:	4b08      	ldr	r3, [pc, #32]	; (7d78 <TIMER_ARINC_init+0x44>)
    7d56:	4798      	blx	r3
}
    7d58:	bf00      	nop
    7d5a:	bd80      	pop	{r7, pc}
    7d5c:	40000800 	.word	0x40000800
    7d60:	00006f2b 	.word	0x00006f2b
    7d64:	40001c00 	.word	0x40001c00
    7d68:	00006d45 	.word	0x00006d45
    7d6c:	0000e919 	.word	0x0000e919
    7d70:	4101a000 	.word	0x4101a000
    7d74:	200025a0 	.word	0x200025a0
    7d78:	00008cad 	.word	0x00008cad

00007d7c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    7d80:	4808      	ldr	r0, [pc, #32]	; (7da4 <TIMER_MAINTENANCE_init+0x28>)
    7d82:	4b09      	ldr	r3, [pc, #36]	; (7da8 <TIMER_MAINTENANCE_init+0x2c>)
    7d84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7d86:	2246      	movs	r2, #70	; 0x46
    7d88:	211e      	movs	r1, #30
    7d8a:	4808      	ldr	r0, [pc, #32]	; (7dac <TIMER_MAINTENANCE_init+0x30>)
    7d8c:	4b08      	ldr	r3, [pc, #32]	; (7db0 <TIMER_MAINTENANCE_init+0x34>)
    7d8e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    7d90:	4b08      	ldr	r3, [pc, #32]	; (7db4 <TIMER_MAINTENANCE_init+0x38>)
    7d92:	4798      	blx	r3
    7d94:	4603      	mov	r3, r0
    7d96:	461a      	mov	r2, r3
    7d98:	4907      	ldr	r1, [pc, #28]	; (7db8 <TIMER_MAINTENANCE_init+0x3c>)
    7d9a:	4808      	ldr	r0, [pc, #32]	; (7dbc <TIMER_MAINTENANCE_init+0x40>)
    7d9c:	4b08      	ldr	r3, [pc, #32]	; (7dc0 <TIMER_MAINTENANCE_init+0x44>)
    7d9e:	4798      	blx	r3
}
    7da0:	bf00      	nop
    7da2:	bd80      	pop	{r7, pc}
    7da4:	40000800 	.word	0x40000800
    7da8:	00006f6b 	.word	0x00006f6b
    7dac:	40001c00 	.word	0x40001c00
    7db0:	00006d45 	.word	0x00006d45
    7db4:	0000e919 	.word	0x0000e919
    7db8:	42001400 	.word	0x42001400
    7dbc:	20002498 	.word	0x20002498
    7dc0:	00008cad 	.word	0x00008cad

00007dc4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    7dc8:	4808      	ldr	r0, [pc, #32]	; (7dec <TIMER_INTERFACE_init+0x28>)
    7dca:	4b09      	ldr	r3, [pc, #36]	; (7df0 <TIMER_INTERFACE_init+0x2c>)
    7dcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7dce:	2246      	movs	r2, #70	; 0x46
    7dd0:	211e      	movs	r1, #30
    7dd2:	4808      	ldr	r0, [pc, #32]	; (7df4 <TIMER_INTERFACE_init+0x30>)
    7dd4:	4b08      	ldr	r3, [pc, #32]	; (7df8 <TIMER_INTERFACE_init+0x34>)
    7dd6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    7dd8:	4b08      	ldr	r3, [pc, #32]	; (7dfc <TIMER_INTERFACE_init+0x38>)
    7dda:	4798      	blx	r3
    7ddc:	4603      	mov	r3, r0
    7dde:	461a      	mov	r2, r3
    7de0:	4907      	ldr	r1, [pc, #28]	; (7e00 <TIMER_INTERFACE_init+0x3c>)
    7de2:	4808      	ldr	r0, [pc, #32]	; (7e04 <TIMER_INTERFACE_init+0x40>)
    7de4:	4b08      	ldr	r3, [pc, #32]	; (7e08 <TIMER_INTERFACE_init+0x44>)
    7de6:	4798      	blx	r3
}
    7de8:	bf00      	nop
    7dea:	bd80      	pop	{r7, pc}
    7dec:	40000800 	.word	0x40000800
    7df0:	00006f8b 	.word	0x00006f8b
    7df4:	40001c00 	.word	0x40001c00
    7df8:	00006d45 	.word	0x00006d45
    7dfc:	0000e919 	.word	0x0000e919
    7e00:	42001800 	.word	0x42001800
    7e04:	200024dc 	.word	0x200024dc
    7e08:	00008cad 	.word	0x00008cad

00007e0c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    7e0c:	b580      	push	{r7, lr}
    7e0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    7e10:	4808      	ldr	r0, [pc, #32]	; (7e34 <TIMER_EVENT_init+0x28>)
    7e12:	4b09      	ldr	r3, [pc, #36]	; (7e38 <TIMER_EVENT_init+0x2c>)
    7e14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7e16:	2246      	movs	r2, #70	; 0x46
    7e18:	2127      	movs	r1, #39	; 0x27
    7e1a:	4808      	ldr	r0, [pc, #32]	; (7e3c <TIMER_EVENT_init+0x30>)
    7e1c:	4b08      	ldr	r3, [pc, #32]	; (7e40 <TIMER_EVENT_init+0x34>)
    7e1e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    7e20:	4b08      	ldr	r3, [pc, #32]	; (7e44 <TIMER_EVENT_init+0x38>)
    7e22:	4798      	blx	r3
    7e24:	4603      	mov	r3, r0
    7e26:	461a      	mov	r2, r3
    7e28:	4907      	ldr	r1, [pc, #28]	; (7e48 <TIMER_EVENT_init+0x3c>)
    7e2a:	4808      	ldr	r0, [pc, #32]	; (7e4c <TIMER_EVENT_init+0x40>)
    7e2c:	4b08      	ldr	r3, [pc, #32]	; (7e50 <TIMER_EVENT_init+0x44>)
    7e2e:	4798      	blx	r3
}
    7e30:	bf00      	nop
    7e32:	bd80      	pop	{r7, pc}
    7e34:	40000800 	.word	0x40000800
    7e38:	0000704b 	.word	0x0000704b
    7e3c:	40001c00 	.word	0x40001c00
    7e40:	00006d45 	.word	0x00006d45
    7e44:	0000e919 	.word	0x0000e919
    7e48:	43001400 	.word	0x43001400
    7e4c:	200024bc 	.word	0x200024bc
    7e50:	00008cad 	.word	0x00008cad

00007e54 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    7e54:	b480      	push	{r7}
    7e56:	af00      	add	r7, sp, #0
}
    7e58:	bf00      	nop
    7e5a:	46bd      	mov	sp, r7
    7e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e60:	4770      	bx	lr
	...

00007e64 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    7e64:	b580      	push	{r7, lr}
    7e66:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    7e68:	4804      	ldr	r0, [pc, #16]	; (7e7c <LIVE_PULSE_CLOCK_init+0x18>)
    7e6a:	4b05      	ldr	r3, [pc, #20]	; (7e80 <LIVE_PULSE_CLOCK_init+0x1c>)
    7e6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7e6e:	2240      	movs	r2, #64	; 0x40
    7e70:	2127      	movs	r1, #39	; 0x27
    7e72:	4804      	ldr	r0, [pc, #16]	; (7e84 <LIVE_PULSE_CLOCK_init+0x20>)
    7e74:	4b04      	ldr	r3, [pc, #16]	; (7e88 <LIVE_PULSE_CLOCK_init+0x24>)
    7e76:	4798      	blx	r3
}
    7e78:	bf00      	nop
    7e7a:	bd80      	pop	{r7, pc}
    7e7c:	40000800 	.word	0x40000800
    7e80:	0000706b 	.word	0x0000706b
    7e84:	40001c00 	.word	0x40001c00
    7e88:	00006d45 	.word	0x00006d45

00007e8c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    7e90:	4b06      	ldr	r3, [pc, #24]	; (7eac <LIVE_PULSE_init+0x20>)
    7e92:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    7e94:	4b06      	ldr	r3, [pc, #24]	; (7eb0 <LIVE_PULSE_init+0x24>)
    7e96:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    7e98:	4b06      	ldr	r3, [pc, #24]	; (7eb4 <LIVE_PULSE_init+0x28>)
    7e9a:	4798      	blx	r3
    7e9c:	4603      	mov	r3, r0
    7e9e:	461a      	mov	r2, r3
    7ea0:	4905      	ldr	r1, [pc, #20]	; (7eb8 <LIVE_PULSE_init+0x2c>)
    7ea2:	4806      	ldr	r0, [pc, #24]	; (7ebc <LIVE_PULSE_init+0x30>)
    7ea4:	4b06      	ldr	r3, [pc, #24]	; (7ec0 <LIVE_PULSE_init+0x34>)
    7ea6:	4798      	blx	r3
}
    7ea8:	bf00      	nop
    7eaa:	bd80      	pop	{r7, pc}
    7eac:	00007e65 	.word	0x00007e65
    7eb0:	00007e55 	.word	0x00007e55
    7eb4:	0000e92d 	.word	0x0000e92d
    7eb8:	43001800 	.word	0x43001800
    7ebc:	2000251c 	.word	0x2000251c
    7ec0:	00008921 	.word	0x00008921

00007ec4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    7ec4:	b580      	push	{r7, lr}
    7ec6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    7ec8:	4804      	ldr	r0, [pc, #16]	; (7edc <TIMER_HVAC_CLOCK_init+0x18>)
    7eca:	4b05      	ldr	r3, [pc, #20]	; (7ee0 <TIMER_HVAC_CLOCK_init+0x1c>)
    7ecc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7ece:	2244      	movs	r2, #68	; 0x44
    7ed0:	2119      	movs	r1, #25
    7ed2:	4804      	ldr	r0, [pc, #16]	; (7ee4 <TIMER_HVAC_CLOCK_init+0x20>)
    7ed4:	4b04      	ldr	r3, [pc, #16]	; (7ee8 <TIMER_HVAC_CLOCK_init+0x24>)
    7ed6:	4798      	blx	r3
}
    7ed8:	bf00      	nop
    7eda:	bd80      	pop	{r7, pc}
    7edc:	40000800 	.word	0x40000800
    7ee0:	00006eeb 	.word	0x00006eeb
    7ee4:	40001c00 	.word	0x40001c00
    7ee8:	00006d45 	.word	0x00006d45

00007eec <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    7eec:	b580      	push	{r7, lr}
    7eee:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    7ef0:	4b05      	ldr	r3, [pc, #20]	; (7f08 <TIMER_HVAC_init+0x1c>)
    7ef2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    7ef4:	4b05      	ldr	r3, [pc, #20]	; (7f0c <TIMER_HVAC_init+0x20>)
    7ef6:	4798      	blx	r3
    7ef8:	4603      	mov	r3, r0
    7efa:	461a      	mov	r2, r3
    7efc:	4904      	ldr	r1, [pc, #16]	; (7f10 <TIMER_HVAC_init+0x24>)
    7efe:	4805      	ldr	r0, [pc, #20]	; (7f14 <TIMER_HVAC_init+0x28>)
    7f00:	4b05      	ldr	r3, [pc, #20]	; (7f18 <TIMER_HVAC_init+0x2c>)
    7f02:	4798      	blx	r3
}
    7f04:	bf00      	nop
    7f06:	bd80      	pop	{r7, pc}
    7f08:	00007ec5 	.word	0x00007ec5
    7f0c:	0000dcfd 	.word	0x0000dcfd
    7f10:	41016000 	.word	0x41016000
    7f14:	200025e0 	.word	0x200025e0
    7f18:	00008cad 	.word	0x00008cad

00007f1c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    7f1c:	b580      	push	{r7, lr}
    7f1e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    7f20:	4804      	ldr	r0, [pc, #16]	; (7f34 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    7f22:	4b05      	ldr	r3, [pc, #20]	; (7f38 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    7f24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7f26:	2244      	movs	r2, #68	; 0x44
    7f28:	2119      	movs	r1, #25
    7f2a:	4804      	ldr	r0, [pc, #16]	; (7f3c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    7f2c:	4b04      	ldr	r3, [pc, #16]	; (7f40 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    7f2e:	4798      	blx	r3
}
    7f30:	bf00      	nop
    7f32:	bd80      	pop	{r7, pc}
    7f34:	40000800 	.word	0x40000800
    7f38:	00006f0b 	.word	0x00006f0b
    7f3c:	40001c00 	.word	0x40001c00
    7f40:	00006d45 	.word	0x00006d45

00007f44 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    7f44:	b580      	push	{r7, lr}
    7f46:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    7f48:	4b05      	ldr	r3, [pc, #20]	; (7f60 <TIMER_TEMPERATURES_init+0x1c>)
    7f4a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    7f4c:	4b05      	ldr	r3, [pc, #20]	; (7f64 <TIMER_TEMPERATURES_init+0x20>)
    7f4e:	4798      	blx	r3
    7f50:	4603      	mov	r3, r0
    7f52:	461a      	mov	r2, r3
    7f54:	4904      	ldr	r1, [pc, #16]	; (7f68 <TIMER_TEMPERATURES_init+0x24>)
    7f56:	4805      	ldr	r0, [pc, #20]	; (7f6c <TIMER_TEMPERATURES_init+0x28>)
    7f58:	4b05      	ldr	r3, [pc, #20]	; (7f70 <TIMER_TEMPERATURES_init+0x2c>)
    7f5a:	4798      	blx	r3
}
    7f5c:	bf00      	nop
    7f5e:	bd80      	pop	{r7, pc}
    7f60:	00007f1d 	.word	0x00007f1d
    7f64:	0000dcfd 	.word	0x0000dcfd
    7f68:	41018000 	.word	0x41018000
    7f6c:	20002428 	.word	0x20002428
    7f70:	00008cad 	.word	0x00008cad

00007f74 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    7f74:	b580      	push	{r7, lr}
    7f76:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    7f78:	4804      	ldr	r0, [pc, #16]	; (7f8c <TIMER_CCU_CLOCK_init+0x18>)
    7f7a:	4b05      	ldr	r3, [pc, #20]	; (7f90 <TIMER_CCU_CLOCK_init+0x1c>)
    7f7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    7f7e:	2240      	movs	r2, #64	; 0x40
    7f80:	211d      	movs	r1, #29
    7f82:	4804      	ldr	r0, [pc, #16]	; (7f94 <TIMER_CCU_CLOCK_init+0x20>)
    7f84:	4b04      	ldr	r3, [pc, #16]	; (7f98 <TIMER_CCU_CLOCK_init+0x24>)
    7f86:	4798      	blx	r3
}
    7f88:	bf00      	nop
    7f8a:	bd80      	pop	{r7, pc}
    7f8c:	40000800 	.word	0x40000800
    7f90:	00006f4b 	.word	0x00006f4b
    7f94:	40001c00 	.word	0x40001c00
    7f98:	00006d45 	.word	0x00006d45

00007f9c <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    7fa0:	4b05      	ldr	r3, [pc, #20]	; (7fb8 <TIMER_CCU_init+0x1c>)
    7fa2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    7fa4:	4b05      	ldr	r3, [pc, #20]	; (7fbc <TIMER_CCU_init+0x20>)
    7fa6:	4798      	blx	r3
    7fa8:	4603      	mov	r3, r0
    7faa:	461a      	mov	r2, r3
    7fac:	4904      	ldr	r1, [pc, #16]	; (7fc0 <TIMER_CCU_init+0x24>)
    7fae:	4805      	ldr	r0, [pc, #20]	; (7fc4 <TIMER_CCU_init+0x28>)
    7fb0:	4b05      	ldr	r3, [pc, #20]	; (7fc8 <TIMER_CCU_init+0x2c>)
    7fb2:	4798      	blx	r3
}
    7fb4:	bf00      	nop
    7fb6:	bd80      	pop	{r7, pc}
    7fb8:	00007f75 	.word	0x00007f75
    7fbc:	0000dcfd 	.word	0x0000dcfd
    7fc0:	42000c00 	.word	0x42000c00
    7fc4:	20002538 	.word	0x20002538
    7fc8:	00008cad 	.word	0x00008cad

00007fcc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    7fcc:	b580      	push	{r7, lr}
    7fce:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    7fd0:	2102      	movs	r1, #2
    7fd2:	2018      	movs	r0, #24
    7fd4:	4b0f      	ldr	r3, [pc, #60]	; (8014 <CDCUSB_PORT_init+0x48>)
    7fd6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    7fd8:	2100      	movs	r1, #0
    7fda:	2018      	movs	r0, #24
    7fdc:	4b0e      	ldr	r3, [pc, #56]	; (8018 <CDCUSB_PORT_init+0x4c>)
    7fde:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    7fe0:	2100      	movs	r1, #0
    7fe2:	2018      	movs	r0, #24
    7fe4:	4b0d      	ldr	r3, [pc, #52]	; (801c <CDCUSB_PORT_init+0x50>)
    7fe6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    7fe8:	490d      	ldr	r1, [pc, #52]	; (8020 <CDCUSB_PORT_init+0x54>)
    7fea:	2018      	movs	r0, #24
    7fec:	4b0d      	ldr	r3, [pc, #52]	; (8024 <CDCUSB_PORT_init+0x58>)
    7fee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    7ff0:	2102      	movs	r1, #2
    7ff2:	2019      	movs	r0, #25
    7ff4:	4b07      	ldr	r3, [pc, #28]	; (8014 <CDCUSB_PORT_init+0x48>)
    7ff6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    7ff8:	2100      	movs	r1, #0
    7ffa:	2019      	movs	r0, #25
    7ffc:	4b06      	ldr	r3, [pc, #24]	; (8018 <CDCUSB_PORT_init+0x4c>)
    7ffe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    8000:	2100      	movs	r1, #0
    8002:	2019      	movs	r0, #25
    8004:	4b05      	ldr	r3, [pc, #20]	; (801c <CDCUSB_PORT_init+0x50>)
    8006:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    8008:	4907      	ldr	r1, [pc, #28]	; (8028 <CDCUSB_PORT_init+0x5c>)
    800a:	2019      	movs	r0, #25
    800c:	4b05      	ldr	r3, [pc, #20]	; (8024 <CDCUSB_PORT_init+0x58>)
    800e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    8010:	bf00      	nop
    8012:	bd80      	pop	{r7, pc}
    8014:	000075b9 	.word	0x000075b9
    8018:	000075f1 	.word	0x000075f1
    801c:	00007565 	.word	0x00007565
    8020:	00180007 	.word	0x00180007
    8024:	00007599 	.word	0x00007599
    8028:	00190007 	.word	0x00190007

0000802c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    802c:	b580      	push	{r7, lr}
    802e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    8030:	2242      	movs	r2, #66	; 0x42
    8032:	210a      	movs	r1, #10
    8034:	4805      	ldr	r0, [pc, #20]	; (804c <CDCUSB_CLOCK_init+0x20>)
    8036:	4b06      	ldr	r3, [pc, #24]	; (8050 <CDCUSB_CLOCK_init+0x24>)
    8038:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    803a:	4806      	ldr	r0, [pc, #24]	; (8054 <CDCUSB_CLOCK_init+0x28>)
    803c:	4b06      	ldr	r3, [pc, #24]	; (8058 <CDCUSB_CLOCK_init+0x2c>)
    803e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    8040:	4804      	ldr	r0, [pc, #16]	; (8054 <CDCUSB_CLOCK_init+0x28>)
    8042:	4b06      	ldr	r3, [pc, #24]	; (805c <CDCUSB_CLOCK_init+0x30>)
    8044:	4798      	blx	r3
}
    8046:	bf00      	nop
    8048:	bd80      	pop	{r7, pc}
    804a:	bf00      	nop
    804c:	40001c00 	.word	0x40001c00
    8050:	00006d45 	.word	0x00006d45
    8054:	40000800 	.word	0x40000800
    8058:	00006d6b 	.word	0x00006d6b
    805c:	00006e8b 	.word	0x00006e8b

00008060 <CDCUSB_init>:

void CDCUSB_init(void)
{
    8060:	b580      	push	{r7, lr}
    8062:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    8064:	4b03      	ldr	r3, [pc, #12]	; (8074 <CDCUSB_init+0x14>)
    8066:	4798      	blx	r3
	usb_d_init();
    8068:	4b03      	ldr	r3, [pc, #12]	; (8078 <CDCUSB_init+0x18>)
    806a:	4798      	blx	r3
	CDCUSB_PORT_init();
    806c:	4b03      	ldr	r3, [pc, #12]	; (807c <CDCUSB_init+0x1c>)
    806e:	4798      	blx	r3
}
    8070:	bf00      	nop
    8072:	bd80      	pop	{r7, pc}
    8074:	0000802d 	.word	0x0000802d
    8078:	0000949d 	.word	0x0000949d
    807c:	00007fcd 	.word	0x00007fcd

00008080 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    8080:	b580      	push	{r7, lr}
    8082:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    8084:	4802      	ldr	r0, [pc, #8]	; (8090 <WATCHDOG_CLOCK_init+0x10>)
    8086:	4b03      	ldr	r3, [pc, #12]	; (8094 <WATCHDOG_CLOCK_init+0x14>)
    8088:	4798      	blx	r3
}
    808a:	bf00      	nop
    808c:	bd80      	pop	{r7, pc}
    808e:	bf00      	nop
    8090:	40000800 	.word	0x40000800
    8094:	00006deb 	.word	0x00006deb

00008098 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    8098:	b580      	push	{r7, lr}
    809a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    809c:	4b03      	ldr	r3, [pc, #12]	; (80ac <WATCHDOG_init+0x14>)
    809e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    80a0:	4903      	ldr	r1, [pc, #12]	; (80b0 <WATCHDOG_init+0x18>)
    80a2:	4804      	ldr	r0, [pc, #16]	; (80b4 <WATCHDOG_init+0x1c>)
    80a4:	4b04      	ldr	r3, [pc, #16]	; (80b8 <WATCHDOG_init+0x20>)
    80a6:	4798      	blx	r3
}
    80a8:	bf00      	nop
    80aa:	bd80      	pop	{r7, pc}
    80ac:	00008081 	.word	0x00008081
    80b0:	40002000 	.word	0x40002000
    80b4:	20002620 	.word	0x20002620
    80b8:	00007639 	.word	0x00007639

000080bc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    80bc:	b580      	push	{r7, lr}
    80be:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    80c0:	4904      	ldr	r1, [pc, #16]	; (80d4 <CAN_CCU_PORT_init+0x18>)
    80c2:	202d      	movs	r0, #45	; 0x2d
    80c4:	4b04      	ldr	r3, [pc, #16]	; (80d8 <CAN_CCU_PORT_init+0x1c>)
    80c6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    80c8:	4904      	ldr	r1, [pc, #16]	; (80dc <CAN_CCU_PORT_init+0x20>)
    80ca:	202c      	movs	r0, #44	; 0x2c
    80cc:	4b02      	ldr	r3, [pc, #8]	; (80d8 <CAN_CCU_PORT_init+0x1c>)
    80ce:	4798      	blx	r3
}
    80d0:	bf00      	nop
    80d2:	bd80      	pop	{r7, pc}
    80d4:	002d0007 	.word	0x002d0007
    80d8:	00007599 	.word	0x00007599
    80dc:	002c0007 	.word	0x002c0007

000080e0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    80e0:	b580      	push	{r7, lr}
    80e2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    80e4:	4807      	ldr	r0, [pc, #28]	; (8104 <CAN_CCU_init+0x24>)
    80e6:	4b08      	ldr	r3, [pc, #32]	; (8108 <CAN_CCU_init+0x28>)
    80e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    80ea:	2249      	movs	r2, #73	; 0x49
    80ec:	211c      	movs	r1, #28
    80ee:	4807      	ldr	r0, [pc, #28]	; (810c <CAN_CCU_init+0x2c>)
    80f0:	4b07      	ldr	r3, [pc, #28]	; (8110 <CAN_CCU_init+0x30>)
    80f2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    80f4:	4907      	ldr	r1, [pc, #28]	; (8114 <CAN_CCU_init+0x34>)
    80f6:	4808      	ldr	r0, [pc, #32]	; (8118 <CAN_CCU_init+0x38>)
    80f8:	4b08      	ldr	r3, [pc, #32]	; (811c <CAN_CCU_init+0x3c>)
    80fa:	4798      	blx	r3
	CAN_CCU_PORT_init();
    80fc:	4b08      	ldr	r3, [pc, #32]	; (8120 <CAN_CCU_init+0x40>)
    80fe:	4798      	blx	r3
}
    8100:	bf00      	nop
    8102:	bd80      	pop	{r7, pc}
    8104:	40000800 	.word	0x40000800
    8108:	00006dab 	.word	0x00006dab
    810c:	40001c00 	.word	0x40001c00
    8110:	00006d45 	.word	0x00006d45
    8114:	42000400 	.word	0x42000400
    8118:	20002578 	.word	0x20002578
    811c:	00008385 	.word	0x00008385
    8120:	000080bd 	.word	0x000080bd

00008124 <system_init>:

void system_init(void)
{
    8124:	b580      	push	{r7, lr}
    8126:	af00      	add	r7, sp, #0
	init_mcu();
    8128:	4b5f      	ldr	r3, [pc, #380]	; (82a8 <system_init+0x184>)
    812a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    812c:	2100      	movs	r1, #0
    812e:	2007      	movs	r0, #7
    8130:	4b5e      	ldr	r3, [pc, #376]	; (82ac <system_init+0x188>)
    8132:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    8134:	2102      	movs	r1, #2
    8136:	2007      	movs	r0, #7
    8138:	4b5d      	ldr	r3, [pc, #372]	; (82b0 <system_init+0x18c>)
    813a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    813c:	f04f 31ff 	mov.w	r1, #4294967295
    8140:	2007      	movs	r0, #7
    8142:	4b5c      	ldr	r3, [pc, #368]	; (82b4 <system_init+0x190>)
    8144:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    8146:	2101      	movs	r1, #1
    8148:	200f      	movs	r0, #15
    814a:	4b58      	ldr	r3, [pc, #352]	; (82ac <system_init+0x188>)
    814c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    814e:	2102      	movs	r1, #2
    8150:	200f      	movs	r0, #15
    8152:	4b57      	ldr	r3, [pc, #348]	; (82b0 <system_init+0x18c>)
    8154:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    8156:	f04f 31ff 	mov.w	r1, #4294967295
    815a:	200f      	movs	r0, #15
    815c:	4b55      	ldr	r3, [pc, #340]	; (82b4 <system_init+0x190>)
    815e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    8160:	2101      	movs	r1, #1
    8162:	2013      	movs	r0, #19
    8164:	4b51      	ldr	r3, [pc, #324]	; (82ac <system_init+0x188>)
    8166:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    8168:	2102      	movs	r1, #2
    816a:	2013      	movs	r0, #19
    816c:	4b50      	ldr	r3, [pc, #320]	; (82b0 <system_init+0x18c>)
    816e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    8170:	f04f 31ff 	mov.w	r1, #4294967295
    8174:	2013      	movs	r0, #19
    8176:	4b4f      	ldr	r3, [pc, #316]	; (82b4 <system_init+0x190>)
    8178:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    817a:	2101      	movs	r1, #1
    817c:	201b      	movs	r0, #27
    817e:	4b4b      	ldr	r3, [pc, #300]	; (82ac <system_init+0x188>)
    8180:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    8182:	2102      	movs	r1, #2
    8184:	201b      	movs	r0, #27
    8186:	4b4a      	ldr	r3, [pc, #296]	; (82b0 <system_init+0x18c>)
    8188:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    818a:	f04f 31ff 	mov.w	r1, #4294967295
    818e:	201b      	movs	r0, #27
    8190:	4b48      	ldr	r3, [pc, #288]	; (82b4 <system_init+0x190>)
    8192:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    8194:	2101      	movs	r1, #1
    8196:	2027      	movs	r0, #39	; 0x27
    8198:	4b44      	ldr	r3, [pc, #272]	; (82ac <system_init+0x188>)
    819a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    819c:	2102      	movs	r1, #2
    819e:	2027      	movs	r0, #39	; 0x27
    81a0:	4b43      	ldr	r3, [pc, #268]	; (82b0 <system_init+0x18c>)
    81a2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    81a4:	f04f 31ff 	mov.w	r1, #4294967295
    81a8:	2027      	movs	r0, #39	; 0x27
    81aa:	4b42      	ldr	r3, [pc, #264]	; (82b4 <system_init+0x190>)
    81ac:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    81ae:	2101      	movs	r1, #1
    81b0:	203d      	movs	r0, #61	; 0x3d
    81b2:	4b3e      	ldr	r3, [pc, #248]	; (82ac <system_init+0x188>)
    81b4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    81b6:	2102      	movs	r1, #2
    81b8:	203d      	movs	r0, #61	; 0x3d
    81ba:	4b3d      	ldr	r3, [pc, #244]	; (82b0 <system_init+0x18c>)
    81bc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    81be:	f04f 31ff 	mov.w	r1, #4294967295
    81c2:	203d      	movs	r0, #61	; 0x3d
    81c4:	4b3b      	ldr	r3, [pc, #236]	; (82b4 <system_init+0x190>)
    81c6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    81c8:	2101      	movs	r1, #1
    81ca:	203f      	movs	r0, #63	; 0x3f
    81cc:	4b38      	ldr	r3, [pc, #224]	; (82b0 <system_init+0x18c>)
    81ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    81d0:	2101      	movs	r1, #1
    81d2:	203f      	movs	r0, #63	; 0x3f
    81d4:	4b38      	ldr	r3, [pc, #224]	; (82b8 <system_init+0x194>)
    81d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    81d8:	f04f 31ff 	mov.w	r1, #4294967295
    81dc:	203f      	movs	r0, #63	; 0x3f
    81de:	4b35      	ldr	r3, [pc, #212]	; (82b4 <system_init+0x190>)
    81e0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    81e2:	2100      	movs	r1, #0
    81e4:	204d      	movs	r0, #77	; 0x4d
    81e6:	4b31      	ldr	r3, [pc, #196]	; (82ac <system_init+0x188>)
    81e8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    81ea:	2102      	movs	r1, #2
    81ec:	204d      	movs	r0, #77	; 0x4d
    81ee:	4b30      	ldr	r3, [pc, #192]	; (82b0 <system_init+0x18c>)
    81f0:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    81f2:	f04f 31ff 	mov.w	r1, #4294967295
    81f6:	204d      	movs	r0, #77	; 0x4d
    81f8:	4b2e      	ldr	r3, [pc, #184]	; (82b4 <system_init+0x190>)
    81fa:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    81fc:	2101      	movs	r1, #1
    81fe:	204e      	movs	r0, #78	; 0x4e
    8200:	4b2a      	ldr	r3, [pc, #168]	; (82ac <system_init+0x188>)
    8202:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    8204:	2102      	movs	r1, #2
    8206:	204e      	movs	r0, #78	; 0x4e
    8208:	4b29      	ldr	r3, [pc, #164]	; (82b0 <system_init+0x18c>)
    820a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    820c:	f04f 31ff 	mov.w	r1, #4294967295
    8210:	204e      	movs	r0, #78	; 0x4e
    8212:	4b28      	ldr	r3, [pc, #160]	; (82b4 <system_init+0x190>)
    8214:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    8216:	2100      	movs	r1, #0
    8218:	204f      	movs	r0, #79	; 0x4f
    821a:	4b24      	ldr	r3, [pc, #144]	; (82ac <system_init+0x188>)
    821c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    821e:	2102      	movs	r1, #2
    8220:	204f      	movs	r0, #79	; 0x4f
    8222:	4b23      	ldr	r3, [pc, #140]	; (82b0 <system_init+0x18c>)
    8224:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    8226:	f04f 31ff 	mov.w	r1, #4294967295
    822a:	204f      	movs	r0, #79	; 0x4f
    822c:	4b21      	ldr	r3, [pc, #132]	; (82b4 <system_init+0x190>)
    822e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    8230:	2100      	movs	r1, #0
    8232:	2052      	movs	r0, #82	; 0x52
    8234:	4b1d      	ldr	r3, [pc, #116]	; (82ac <system_init+0x188>)
    8236:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    8238:	2102      	movs	r1, #2
    823a:	2052      	movs	r0, #82	; 0x52
    823c:	4b1c      	ldr	r3, [pc, #112]	; (82b0 <system_init+0x18c>)
    823e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    8240:	f04f 31ff 	mov.w	r1, #4294967295
    8244:	2052      	movs	r0, #82	; 0x52
    8246:	4b1b      	ldr	r3, [pc, #108]	; (82b4 <system_init+0x190>)
    8248:	4798      	blx	r3

	CRC_CALC_init();
    824a:	4b1c      	ldr	r3, [pc, #112]	; (82bc <system_init+0x198>)
    824c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    824e:	4b1c      	ldr	r3, [pc, #112]	; (82c0 <system_init+0x19c>)
    8250:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    8252:	4b1c      	ldr	r3, [pc, #112]	; (82c4 <system_init+0x1a0>)
    8254:	4798      	blx	r3

	QSPI_N25Q256_init();
    8256:	4b1c      	ldr	r3, [pc, #112]	; (82c8 <system_init+0x1a4>)
    8258:	4798      	blx	r3

	DATETIME_CLOCK_init();
    825a:	4b1c      	ldr	r3, [pc, #112]	; (82cc <system_init+0x1a8>)
    825c:	4798      	blx	r3

	I2C_HEATERS_init();
    825e:	4b1c      	ldr	r3, [pc, #112]	; (82d0 <system_init+0x1ac>)
    8260:	4798      	blx	r3

	SPI_TEMP_init();
    8262:	4b1c      	ldr	r3, [pc, #112]	; (82d4 <system_init+0x1b0>)
    8264:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    8266:	4b1c      	ldr	r3, [pc, #112]	; (82d8 <system_init+0x1b4>)
    8268:	4798      	blx	r3

	SPI_HI3593_init();
    826a:	4b1c      	ldr	r3, [pc, #112]	; (82dc <system_init+0x1b8>)
    826c:	4798      	blx	r3

	I2C_FANS_init();
    826e:	4b1c      	ldr	r3, [pc, #112]	; (82e0 <system_init+0x1bc>)
    8270:	4798      	blx	r3

	TIMER_USB_init();
    8272:	4b1c      	ldr	r3, [pc, #112]	; (82e4 <system_init+0x1c0>)
    8274:	4798      	blx	r3
	TIMER_ARINC_init();
    8276:	4b1c      	ldr	r3, [pc, #112]	; (82e8 <system_init+0x1c4>)
    8278:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    827a:	4b1c      	ldr	r3, [pc, #112]	; (82ec <system_init+0x1c8>)
    827c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    827e:	4b1c      	ldr	r3, [pc, #112]	; (82f0 <system_init+0x1cc>)
    8280:	4798      	blx	r3
	TIMER_EVENT_init();
    8282:	4b1c      	ldr	r3, [pc, #112]	; (82f4 <system_init+0x1d0>)
    8284:	4798      	blx	r3
	LIVE_PULSE_init();
    8286:	4b1c      	ldr	r3, [pc, #112]	; (82f8 <system_init+0x1d4>)
    8288:	4798      	blx	r3

	TIMER_HVAC_init();
    828a:	4b1c      	ldr	r3, [pc, #112]	; (82fc <system_init+0x1d8>)
    828c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    828e:	4b1c      	ldr	r3, [pc, #112]	; (8300 <system_init+0x1dc>)
    8290:	4798      	blx	r3

	TIMER_CCU_init();
    8292:	4b1c      	ldr	r3, [pc, #112]	; (8304 <system_init+0x1e0>)
    8294:	4798      	blx	r3

	CDCUSB_init();
    8296:	4b1c      	ldr	r3, [pc, #112]	; (8308 <system_init+0x1e4>)
    8298:	4798      	blx	r3

	WATCHDOG_init();
    829a:	4b1c      	ldr	r3, [pc, #112]	; (830c <system_init+0x1e8>)
    829c:	4798      	blx	r3
	CAN_CCU_init();
    829e:	4b1c      	ldr	r3, [pc, #112]	; (8310 <system_init+0x1ec>)
    82a0:	4798      	blx	r3
}
    82a2:	bf00      	nop
    82a4:	bd80      	pop	{r7, pc}
    82a6:	bf00      	nop
    82a8:	00007629 	.word	0x00007629
    82ac:	000075f1 	.word	0x000075f1
    82b0:	000075b9 	.word	0x000075b9
    82b4:	00007599 	.word	0x00007599
    82b8:	00007565 	.word	0x00007565
    82bc:	00007689 	.word	0x00007689
    82c0:	000076b5 	.word	0x000076b5
    82c4:	000077dd 	.word	0x000077dd
    82c8:	00007925 	.word	0x00007925
    82cc:	00007969 	.word	0x00007969
    82d0:	000079f9 	.word	0x000079f9
    82d4:	00007ac5 	.word	0x00007ac5
    82d8:	00007b5d 	.word	0x00007b5d
    82dc:	00007c29 	.word	0x00007c29
    82e0:	00007cc1 	.word	0x00007cc1
    82e4:	00007ced 	.word	0x00007ced
    82e8:	00007d35 	.word	0x00007d35
    82ec:	00007d7d 	.word	0x00007d7d
    82f0:	00007dc5 	.word	0x00007dc5
    82f4:	00007e0d 	.word	0x00007e0d
    82f8:	00007e8d 	.word	0x00007e8d
    82fc:	00007eed 	.word	0x00007eed
    8300:	00007f45 	.word	0x00007f45
    8304:	00007f9d 	.word	0x00007f9d
    8308:	00008061 	.word	0x00008061
    830c:	00008099 	.word	0x00008099
    8310:	000080e1 	.word	0x000080e1

00008314 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    8314:	b580      	push	{r7, lr}
    8316:	b084      	sub	sp, #16
    8318:	af00      	add	r7, sp, #0
    831a:	6078      	str	r0, [r7, #4]
    831c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    831e:	2300      	movs	r3, #0
    8320:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	2b00      	cmp	r3, #0
    8326:	bf14      	ite	ne
    8328:	2301      	movne	r3, #1
    832a:	2300      	moveq	r3, #0
    832c:	b2db      	uxtb	r3, r3
    832e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    8332:	4911      	ldr	r1, [pc, #68]	; (8378 <calendar_init+0x64>)
    8334:	4618      	mov	r0, r3
    8336:	4b11      	ldr	r3, [pc, #68]	; (837c <calendar_init+0x68>)
    8338:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	681a      	ldr	r2, [r3, #0]
    833e:	683b      	ldr	r3, [r7, #0]
    8340:	429a      	cmp	r2, r3
    8342:	d101      	bne.n	8348 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    8344:	2300      	movs	r3, #0
    8346:	e013      	b.n	8370 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    8348:	687b      	ldr	r3, [r7, #4]
    834a:	681b      	ldr	r3, [r3, #0]
    834c:	2b00      	cmp	r3, #0
    834e:	d002      	beq.n	8356 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    8350:	f06f 0311 	mvn.w	r3, #17
    8354:	e00c      	b.n	8370 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    8356:	687b      	ldr	r3, [r7, #4]
    8358:	683a      	ldr	r2, [r7, #0]
    835a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    835c:	687b      	ldr	r3, [r7, #4]
    835e:	4618      	mov	r0, r3
    8360:	4b07      	ldr	r3, [pc, #28]	; (8380 <calendar_init+0x6c>)
    8362:	4798      	blx	r3
    8364:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	f240 72b2 	movw	r2, #1970	; 0x7b2
    836c:	619a      	str	r2, [r3, #24]

	return ret;
    836e:	68fb      	ldr	r3, [r7, #12]
}
    8370:	4618      	mov	r0, r3
    8372:	3710      	adds	r7, #16
    8374:	46bd      	mov	sp, r7
    8376:	bd80      	pop	{r7, pc}
    8378:	00014f9c 	.word	0x00014f9c
    837c:	000099f1 	.word	0x000099f1
    8380:	0000c329 	.word	0x0000c329

00008384 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    8384:	b580      	push	{r7, lr}
    8386:	b084      	sub	sp, #16
    8388:	af00      	add	r7, sp, #0
    838a:	6078      	str	r0, [r7, #4]
    838c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	2b00      	cmp	r3, #0
    8392:	d004      	beq.n	839e <can_async_init+0x1a>
    8394:	683b      	ldr	r3, [r7, #0]
    8396:	2b00      	cmp	r3, #0
    8398:	d001      	beq.n	839e <can_async_init+0x1a>
    839a:	2301      	movs	r3, #1
    839c:	e000      	b.n	83a0 <can_async_init+0x1c>
    839e:	2300      	movs	r3, #0
    83a0:	f003 0301 	and.w	r3, r3, #1
    83a4:	b2db      	uxtb	r3, r3
    83a6:	2241      	movs	r2, #65	; 0x41
    83a8:	490e      	ldr	r1, [pc, #56]	; (83e4 <can_async_init+0x60>)
    83aa:	4618      	mov	r0, r3
    83ac:	4b0e      	ldr	r3, [pc, #56]	; (83e8 <can_async_init+0x64>)
    83ae:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    83b0:	687b      	ldr	r3, [r7, #4]
    83b2:	6839      	ldr	r1, [r7, #0]
    83b4:	4618      	mov	r0, r3
    83b6:	4b0d      	ldr	r3, [pc, #52]	; (83ec <can_async_init+0x68>)
    83b8:	4798      	blx	r3
    83ba:	60f8      	str	r0, [r7, #12]
	if (rc) {
    83bc:	68fb      	ldr	r3, [r7, #12]
    83be:	2b00      	cmp	r3, #0
    83c0:	d001      	beq.n	83c6 <can_async_init+0x42>
		return rc;
    83c2:	68fb      	ldr	r3, [r7, #12]
    83c4:	e009      	b.n	83da <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	4a09      	ldr	r2, [pc, #36]	; (83f0 <can_async_init+0x6c>)
    83ca:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	4a09      	ldr	r2, [pc, #36]	; (83f4 <can_async_init+0x70>)
    83d0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    83d2:	687b      	ldr	r3, [r7, #4]
    83d4:	4a08      	ldr	r2, [pc, #32]	; (83f8 <can_async_init+0x74>)
    83d6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    83d8:	2300      	movs	r3, #0
}
    83da:	4618      	mov	r0, r3
    83dc:	3710      	adds	r7, #16
    83de:	46bd      	mov	sp, r7
    83e0:	bd80      	pop	{r7, pc}
    83e2:	bf00      	nop
    83e4:	00014fb8 	.word	0x00014fb8
    83e8:	000099f1 	.word	0x000099f1
    83ec:	0000a159 	.word	0x0000a159
    83f0:	00008599 	.word	0x00008599
    83f4:	000085bd 	.word	0x000085bd
    83f8:	000085e1 	.word	0x000085e1

000083fc <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b082      	sub	sp, #8
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	2b00      	cmp	r3, #0
    8408:	bf14      	ite	ne
    840a:	2301      	movne	r3, #1
    840c:	2300      	moveq	r3, #0
    840e:	b2db      	uxtb	r3, r3
    8410:	225c      	movs	r2, #92	; 0x5c
    8412:	4906      	ldr	r1, [pc, #24]	; (842c <can_async_enable+0x30>)
    8414:	4618      	mov	r0, r3
    8416:	4b06      	ldr	r3, [pc, #24]	; (8430 <can_async_enable+0x34>)
    8418:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    841a:	687b      	ldr	r3, [r7, #4]
    841c:	4618      	mov	r0, r3
    841e:	4b05      	ldr	r3, [pc, #20]	; (8434 <can_async_enable+0x38>)
    8420:	4798      	blx	r3
    8422:	4603      	mov	r3, r0
}
    8424:	4618      	mov	r0, r3
    8426:	3708      	adds	r7, #8
    8428:	46bd      	mov	sp, r7
    842a:	bd80      	pop	{r7, pc}
    842c:	00014fb8 	.word	0x00014fb8
    8430:	000099f1 	.word	0x000099f1
    8434:	0000a341 	.word	0x0000a341

00008438 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    8438:	b580      	push	{r7, lr}
    843a:	b082      	sub	sp, #8
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	2b00      	cmp	r3, #0
    8446:	d004      	beq.n	8452 <can_async_read+0x1a>
    8448:	683b      	ldr	r3, [r7, #0]
    844a:	2b00      	cmp	r3, #0
    844c:	d001      	beq.n	8452 <can_async_read+0x1a>
    844e:	2301      	movs	r3, #1
    8450:	e000      	b.n	8454 <can_async_read+0x1c>
    8452:	2300      	movs	r3, #0
    8454:	f003 0301 	and.w	r3, r3, #1
    8458:	b2db      	uxtb	r3, r3
    845a:	226e      	movs	r2, #110	; 0x6e
    845c:	4906      	ldr	r1, [pc, #24]	; (8478 <can_async_read+0x40>)
    845e:	4618      	mov	r0, r3
    8460:	4b06      	ldr	r3, [pc, #24]	; (847c <can_async_read+0x44>)
    8462:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	6839      	ldr	r1, [r7, #0]
    8468:	4618      	mov	r0, r3
    846a:	4b05      	ldr	r3, [pc, #20]	; (8480 <can_async_read+0x48>)
    846c:	4798      	blx	r3
    846e:	4603      	mov	r3, r0
}
    8470:	4618      	mov	r0, r3
    8472:	3708      	adds	r7, #8
    8474:	46bd      	mov	sp, r7
    8476:	bd80      	pop	{r7, pc}
    8478:	00014fb8 	.word	0x00014fb8
    847c:	000099f1 	.word	0x000099f1
    8480:	0000a361 	.word	0x0000a361

00008484 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    8484:	b580      	push	{r7, lr}
    8486:	b082      	sub	sp, #8
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
    848c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    848e:	687b      	ldr	r3, [r7, #4]
    8490:	2b00      	cmp	r3, #0
    8492:	d004      	beq.n	849e <can_async_write+0x1a>
    8494:	683b      	ldr	r3, [r7, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	d001      	beq.n	849e <can_async_write+0x1a>
    849a:	2301      	movs	r3, #1
    849c:	e000      	b.n	84a0 <can_async_write+0x1c>
    849e:	2300      	movs	r3, #0
    84a0:	f003 0301 	and.w	r3, r3, #1
    84a4:	b2db      	uxtb	r3, r3
    84a6:	2277      	movs	r2, #119	; 0x77
    84a8:	4906      	ldr	r1, [pc, #24]	; (84c4 <can_async_write+0x40>)
    84aa:	4618      	mov	r0, r3
    84ac:	4b06      	ldr	r3, [pc, #24]	; (84c8 <can_async_write+0x44>)
    84ae:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	6839      	ldr	r1, [r7, #0]
    84b4:	4618      	mov	r0, r3
    84b6:	4b05      	ldr	r3, [pc, #20]	; (84cc <can_async_write+0x48>)
    84b8:	4798      	blx	r3
    84ba:	4603      	mov	r3, r0
}
    84bc:	4618      	mov	r0, r3
    84be:	3708      	adds	r7, #8
    84c0:	46bd      	mov	sp, r7
    84c2:	bd80      	pop	{r7, pc}
    84c4:	00014fb8 	.word	0x00014fb8
    84c8:	000099f1 	.word	0x000099f1
    84cc:	0000a471 	.word	0x0000a471

000084d0 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b084      	sub	sp, #16
    84d4:	af00      	add	r7, sp, #0
    84d6:	60f8      	str	r0, [r7, #12]
    84d8:	460b      	mov	r3, r1
    84da:	607a      	str	r2, [r7, #4]
    84dc:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    84de:	68fb      	ldr	r3, [r7, #12]
    84e0:	2b00      	cmp	r3, #0
    84e2:	bf14      	ite	ne
    84e4:	2301      	movne	r3, #1
    84e6:	2300      	moveq	r3, #0
    84e8:	b2db      	uxtb	r3, r3
    84ea:	2281      	movs	r2, #129	; 0x81
    84ec:	4914      	ldr	r1, [pc, #80]	; (8540 <can_async_register_callback+0x70>)
    84ee:	4618      	mov	r0, r3
    84f0:	4b14      	ldr	r3, [pc, #80]	; (8544 <can_async_register_callback+0x74>)
    84f2:	4798      	blx	r3

	switch (type) {
    84f4:	7afb      	ldrb	r3, [r7, #11]
    84f6:	2b01      	cmp	r3, #1
    84f8:	d007      	beq.n	850a <can_async_register_callback+0x3a>
    84fa:	2b02      	cmp	r3, #2
    84fc:	d009      	beq.n	8512 <can_async_register_callback+0x42>
    84fe:	2b00      	cmp	r3, #0
    8500:	d10b      	bne.n	851a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    8502:	68fb      	ldr	r3, [r7, #12]
    8504:	687a      	ldr	r2, [r7, #4]
    8506:	621a      	str	r2, [r3, #32]
		break;
    8508:	e00a      	b.n	8520 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    850a:	68fb      	ldr	r3, [r7, #12]
    850c:	687a      	ldr	r2, [r7, #4]
    850e:	61da      	str	r2, [r3, #28]
		break;
    8510:	e006      	b.n	8520 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    8512:	68fb      	ldr	r3, [r7, #12]
    8514:	687a      	ldr	r2, [r7, #4]
    8516:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    8518:	e002      	b.n	8520 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    851a:	f06f 030c 	mvn.w	r3, #12
    851e:	e00b      	b.n	8538 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    8520:	68f8      	ldr	r0, [r7, #12]
    8522:	687b      	ldr	r3, [r7, #4]
    8524:	2b00      	cmp	r3, #0
    8526:	bf14      	ite	ne
    8528:	2301      	movne	r3, #1
    852a:	2300      	moveq	r3, #0
    852c:	b2da      	uxtb	r2, r3
    852e:	7afb      	ldrb	r3, [r7, #11]
    8530:	4619      	mov	r1, r3
    8532:	4b05      	ldr	r3, [pc, #20]	; (8548 <can_async_register_callback+0x78>)
    8534:	4798      	blx	r3

	return ERR_NONE;
    8536:	2300      	movs	r3, #0
}
    8538:	4618      	mov	r0, r3
    853a:	3710      	adds	r7, #16
    853c:	46bd      	mov	sp, r7
    853e:	bd80      	pop	{r7, pc}
    8540:	00014fb8 	.word	0x00014fb8
    8544:	000099f1 	.word	0x000099f1
    8548:	0000a62d 	.word	0x0000a62d

0000854c <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    854c:	b590      	push	{r4, r7, lr}
    854e:	b085      	sub	sp, #20
    8550:	af00      	add	r7, sp, #0
    8552:	60f8      	str	r0, [r7, #12]
    8554:	607b      	str	r3, [r7, #4]
    8556:	460b      	mov	r3, r1
    8558:	72fb      	strb	r3, [r7, #11]
    855a:	4613      	mov	r3, r2
    855c:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    855e:	68fb      	ldr	r3, [r7, #12]
    8560:	2b00      	cmp	r3, #0
    8562:	bf14      	ite	ne
    8564:	2301      	movne	r3, #1
    8566:	2300      	moveq	r3, #0
    8568:	b2db      	uxtb	r3, r3
    856a:	22b8      	movs	r2, #184	; 0xb8
    856c:	4907      	ldr	r1, [pc, #28]	; (858c <can_async_set_filter+0x40>)
    856e:	4618      	mov	r0, r3
    8570:	4b07      	ldr	r3, [pc, #28]	; (8590 <can_async_set_filter+0x44>)
    8572:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    8574:	68f8      	ldr	r0, [r7, #12]
    8576:	7aba      	ldrb	r2, [r7, #10]
    8578:	7af9      	ldrb	r1, [r7, #11]
    857a:	687b      	ldr	r3, [r7, #4]
    857c:	4c05      	ldr	r4, [pc, #20]	; (8594 <can_async_set_filter+0x48>)
    857e:	47a0      	blx	r4
    8580:	4603      	mov	r3, r0
}
    8582:	4618      	mov	r0, r3
    8584:	3714      	adds	r7, #20
    8586:	46bd      	mov	sp, r7
    8588:	bd90      	pop	{r4, r7, pc}
    858a:	bf00      	nop
    858c:	00014fb8 	.word	0x00014fb8
    8590:	000099f1 	.word	0x000099f1
    8594:	0000a6bd 	.word	0x0000a6bd

00008598 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    8598:	b580      	push	{r7, lr}
    859a:	b084      	sub	sp, #16
    859c:	af00      	add	r7, sp, #0
    859e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    85a4:	68fb      	ldr	r3, [r7, #12]
    85a6:	69db      	ldr	r3, [r3, #28]
    85a8:	2b00      	cmp	r3, #0
    85aa:	d003      	beq.n	85b4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    85ac:	68fb      	ldr	r3, [r7, #12]
    85ae:	69db      	ldr	r3, [r3, #28]
    85b0:	68f8      	ldr	r0, [r7, #12]
    85b2:	4798      	blx	r3
	}
}
    85b4:	bf00      	nop
    85b6:	3710      	adds	r7, #16
    85b8:	46bd      	mov	sp, r7
    85ba:	bd80      	pop	{r7, pc}

000085bc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    85bc:	b580      	push	{r7, lr}
    85be:	b084      	sub	sp, #16
    85c0:	af00      	add	r7, sp, #0
    85c2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    85c8:	68fb      	ldr	r3, [r7, #12]
    85ca:	6a1b      	ldr	r3, [r3, #32]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d003      	beq.n	85d8 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    85d0:	68fb      	ldr	r3, [r7, #12]
    85d2:	6a1b      	ldr	r3, [r3, #32]
    85d4:	68f8      	ldr	r0, [r7, #12]
    85d6:	4798      	blx	r3
	}
}
    85d8:	bf00      	nop
    85da:	3710      	adds	r7, #16
    85dc:	46bd      	mov	sp, r7
    85de:	bd80      	pop	{r7, pc}

000085e0 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b084      	sub	sp, #16
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
    85e8:	460b      	mov	r3, r1
    85ea:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    85f0:	68fb      	ldr	r3, [r7, #12]
    85f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85f4:	2b00      	cmp	r3, #0
    85f6:	d005      	beq.n	8604 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    85f8:	68fb      	ldr	r3, [r7, #12]
    85fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85fc:	78fa      	ldrb	r2, [r7, #3]
    85fe:	4611      	mov	r1, r2
    8600:	68f8      	ldr	r0, [r7, #12]
    8602:	4798      	blx	r3
	}
}
    8604:	bf00      	nop
    8606:	3710      	adds	r7, #16
    8608:	46bd      	mov	sp, r7
    860a:	bd80      	pop	{r7, pc}

0000860c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    860c:	b580      	push	{r7, lr}
    860e:	b082      	sub	sp, #8
    8610:	af00      	add	r7, sp, #0
    8612:	6078      	str	r0, [r7, #4]
    8614:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	2b00      	cmp	r3, #0
    861a:	d004      	beq.n	8626 <crc_sync_init+0x1a>
    861c:	683b      	ldr	r3, [r7, #0]
    861e:	2b00      	cmp	r3, #0
    8620:	d001      	beq.n	8626 <crc_sync_init+0x1a>
    8622:	2301      	movs	r3, #1
    8624:	e000      	b.n	8628 <crc_sync_init+0x1c>
    8626:	2300      	movs	r3, #0
    8628:	f003 0301 	and.w	r3, r3, #1
    862c:	b2db      	uxtb	r3, r3
    862e:	222b      	movs	r2, #43	; 0x2b
    8630:	4906      	ldr	r1, [pc, #24]	; (864c <crc_sync_init+0x40>)
    8632:	4618      	mov	r0, r3
    8634:	4b06      	ldr	r3, [pc, #24]	; (8650 <crc_sync_init+0x44>)
    8636:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    8638:	687b      	ldr	r3, [r7, #4]
    863a:	6839      	ldr	r1, [r7, #0]
    863c:	4618      	mov	r0, r3
    863e:	4b05      	ldr	r3, [pc, #20]	; (8654 <crc_sync_init+0x48>)
    8640:	4798      	blx	r3
    8642:	4603      	mov	r3, r0
}
    8644:	4618      	mov	r0, r3
    8646:	3708      	adds	r7, #8
    8648:	46bd      	mov	sp, r7
    864a:	bd80      	pop	{r7, pc}
    864c:	00014fd4 	.word	0x00014fd4
    8650:	000099f1 	.word	0x000099f1
    8654:	0000aca1 	.word	0x0000aca1

00008658 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    8658:	b590      	push	{r4, r7, lr}
    865a:	b083      	sub	sp, #12
    865c:	af00      	add	r7, sp, #0
    865e:	4603      	mov	r3, r0
    8660:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    8662:	4b07      	ldr	r3, [pc, #28]	; (8680 <delay_us+0x28>)
    8664:	681c      	ldr	r4, [r3, #0]
    8666:	88fb      	ldrh	r3, [r7, #6]
    8668:	4618      	mov	r0, r3
    866a:	4b06      	ldr	r3, [pc, #24]	; (8684 <delay_us+0x2c>)
    866c:	4798      	blx	r3
    866e:	4603      	mov	r3, r0
    8670:	4619      	mov	r1, r3
    8672:	4620      	mov	r0, r4
    8674:	4b04      	ldr	r3, [pc, #16]	; (8688 <delay_us+0x30>)
    8676:	4798      	blx	r3
}
    8678:	bf00      	nop
    867a:	370c      	adds	r7, #12
    867c:	46bd      	mov	sp, r7
    867e:	bd90      	pop	{r4, r7, pc}
    8680:	20001988 	.word	0x20001988
    8684:	0000a9f1 	.word	0x0000a9f1
    8688:	0000ab89 	.word	0x0000ab89

0000868c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    868c:	b590      	push	{r4, r7, lr}
    868e:	b083      	sub	sp, #12
    8690:	af00      	add	r7, sp, #0
    8692:	4603      	mov	r3, r0
    8694:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    8696:	4b07      	ldr	r3, [pc, #28]	; (86b4 <delay_ms+0x28>)
    8698:	681c      	ldr	r4, [r3, #0]
    869a:	88fb      	ldrh	r3, [r7, #6]
    869c:	4618      	mov	r0, r3
    869e:	4b06      	ldr	r3, [pc, #24]	; (86b8 <delay_ms+0x2c>)
    86a0:	4798      	blx	r3
    86a2:	4603      	mov	r3, r0
    86a4:	4619      	mov	r1, r3
    86a6:	4620      	mov	r0, r4
    86a8:	4b04      	ldr	r3, [pc, #16]	; (86bc <delay_ms+0x30>)
    86aa:	4798      	blx	r3
}
    86ac:	bf00      	nop
    86ae:	370c      	adds	r7, #12
    86b0:	46bd      	mov	sp, r7
    86b2:	bd90      	pop	{r4, r7, pc}
    86b4:	20001988 	.word	0x20001988
    86b8:	0000ab5d 	.word	0x0000ab5d
    86bc:	0000ab89 	.word	0x0000ab89

000086c0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    86c0:	b580      	push	{r7, lr}
    86c2:	af00      	add	r7, sp, #0
	return _event_system_init();
    86c4:	4b02      	ldr	r3, [pc, #8]	; (86d0 <event_system_init+0x10>)
    86c6:	4798      	blx	r3
    86c8:	4603      	mov	r3, r0
}
    86ca:	4618      	mov	r0, r3
    86cc:	bd80      	pop	{r7, pc}
    86ce:	bf00      	nop
    86d0:	0000b385 	.word	0x0000b385

000086d4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b082      	sub	sp, #8
    86d8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    86da:	2300      	movs	r3, #0
    86dc:	80fb      	strh	r3, [r7, #6]
    86de:	e00e      	b.n	86fe <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    86e0:	88fb      	ldrh	r3, [r7, #6]
    86e2:	4a0c      	ldr	r2, [pc, #48]	; (8714 <ext_irq_init+0x40>)
    86e4:	00db      	lsls	r3, r3, #3
    86e6:	4413      	add	r3, r2
    86e8:	f04f 32ff 	mov.w	r2, #4294967295
    86ec:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    86ee:	88fb      	ldrh	r3, [r7, #6]
    86f0:	4a08      	ldr	r2, [pc, #32]	; (8714 <ext_irq_init+0x40>)
    86f2:	2100      	movs	r1, #0
    86f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    86f8:	88fb      	ldrh	r3, [r7, #6]
    86fa:	3301      	adds	r3, #1
    86fc:	80fb      	strh	r3, [r7, #6]
    86fe:	88fb      	ldrh	r3, [r7, #6]
    8700:	2b08      	cmp	r3, #8
    8702:	d9ed      	bls.n	86e0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    8704:	4804      	ldr	r0, [pc, #16]	; (8718 <ext_irq_init+0x44>)
    8706:	4b05      	ldr	r3, [pc, #20]	; (871c <ext_irq_init+0x48>)
    8708:	4798      	blx	r3
    870a:	4603      	mov	r3, r0
}
    870c:	4618      	mov	r0, r3
    870e:	3708      	adds	r7, #8
    8710:	46bd      	mov	sp, r7
    8712:	bd80      	pop	{r7, pc}
    8714:	2000198c 	.word	0x2000198c
    8718:	00008721 	.word	0x00008721
    871c:	0000afa9 	.word	0x0000afa9

00008720 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    8720:	b580      	push	{r7, lr}
    8722:	b084      	sub	sp, #16
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    8728:	2300      	movs	r3, #0
    872a:	73fb      	strb	r3, [r7, #15]
    872c:	2309      	movs	r3, #9
    872e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    8730:	e02a      	b.n	8788 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    8732:	7bba      	ldrb	r2, [r7, #14]
    8734:	7bfb      	ldrb	r3, [r7, #15]
    8736:	4413      	add	r3, r2
    8738:	105b      	asrs	r3, r3, #1
    873a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    873c:	7b7b      	ldrb	r3, [r7, #13]
    873e:	2b08      	cmp	r3, #8
    8740:	d827      	bhi.n	8792 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    8742:	7b7b      	ldrb	r3, [r7, #13]
    8744:	4a16      	ldr	r2, [pc, #88]	; (87a0 <process_ext_irq+0x80>)
    8746:	00db      	lsls	r3, r3, #3
    8748:	4413      	add	r3, r2
    874a:	685a      	ldr	r2, [r3, #4]
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	429a      	cmp	r2, r3
    8750:	d10b      	bne.n	876a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    8752:	7b7b      	ldrb	r3, [r7, #13]
    8754:	4a12      	ldr	r2, [pc, #72]	; (87a0 <process_ext_irq+0x80>)
    8756:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    875a:	2b00      	cmp	r3, #0
    875c:	d01b      	beq.n	8796 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    875e:	7b7b      	ldrb	r3, [r7, #13]
    8760:	4a0f      	ldr	r2, [pc, #60]	; (87a0 <process_ext_irq+0x80>)
    8762:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    8766:	4798      	blx	r3
			}
			return;
    8768:	e015      	b.n	8796 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    876a:	7b7b      	ldrb	r3, [r7, #13]
    876c:	4a0c      	ldr	r2, [pc, #48]	; (87a0 <process_ext_irq+0x80>)
    876e:	00db      	lsls	r3, r3, #3
    8770:	4413      	add	r3, r2
    8772:	685a      	ldr	r2, [r3, #4]
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	429a      	cmp	r2, r3
    8778:	d203      	bcs.n	8782 <process_ext_irq+0x62>
			lower = middle + 1;
    877a:	7b7b      	ldrb	r3, [r7, #13]
    877c:	3301      	adds	r3, #1
    877e:	73fb      	strb	r3, [r7, #15]
    8780:	e002      	b.n	8788 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    8782:	7b7b      	ldrb	r3, [r7, #13]
    8784:	3b01      	subs	r3, #1
    8786:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    8788:	7bba      	ldrb	r2, [r7, #14]
    878a:	7bfb      	ldrb	r3, [r7, #15]
    878c:	429a      	cmp	r2, r3
    878e:	d2d0      	bcs.n	8732 <process_ext_irq+0x12>
    8790:	e002      	b.n	8798 <process_ext_irq+0x78>
			return;
    8792:	bf00      	nop
    8794:	e000      	b.n	8798 <process_ext_irq+0x78>
			return;
    8796:	bf00      	nop
		}
	}
}
    8798:	3710      	adds	r7, #16
    879a:	46bd      	mov	sp, r7
    879c:	bd80      	pop	{r7, pc}
    879e:	bf00      	nop
    87a0:	2000198c 	.word	0x2000198c

000087a4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    87a4:	b580      	push	{r7, lr}
    87a6:	b08a      	sub	sp, #40	; 0x28
    87a8:	af00      	add	r7, sp, #0
    87aa:	60f8      	str	r0, [r7, #12]
    87ac:	60b9      	str	r1, [r7, #8]
    87ae:	4613      	mov	r3, r2
    87b0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    87b2:	68fb      	ldr	r3, [r7, #12]
    87b4:	3b14      	subs	r3, #20
    87b6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    87b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87ba:	8b9b      	ldrh	r3, [r3, #28]
    87bc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    87be:	88fb      	ldrh	r3, [r7, #6]
    87c0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    87c2:	f248 0301 	movw	r3, #32769	; 0x8001
    87c6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    87c8:	68bb      	ldr	r3, [r7, #8]
    87ca:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    87cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87ce:	f107 0214 	add.w	r2, r7, #20
    87d2:	4611      	mov	r1, r2
    87d4:	4618      	mov	r0, r3
    87d6:	4b06      	ldr	r3, [pc, #24]	; (87f0 <i2c_m_sync_read+0x4c>)
    87d8:	4798      	blx	r3
    87da:	6238      	str	r0, [r7, #32]

	if (ret) {
    87dc:	6a3b      	ldr	r3, [r7, #32]
    87de:	2b00      	cmp	r3, #0
    87e0:	d001      	beq.n	87e6 <i2c_m_sync_read+0x42>
		return ret;
    87e2:	6a3b      	ldr	r3, [r7, #32]
    87e4:	e000      	b.n	87e8 <i2c_m_sync_read+0x44>
	}

	return n;
    87e6:	88fb      	ldrh	r3, [r7, #6]
}
    87e8:	4618      	mov	r0, r3
    87ea:	3728      	adds	r7, #40	; 0x28
    87ec:	46bd      	mov	sp, r7
    87ee:	bd80      	pop	{r7, pc}
    87f0:	0000cf89 	.word	0x0000cf89

000087f4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    87f4:	b580      	push	{r7, lr}
    87f6:	b08a      	sub	sp, #40	; 0x28
    87f8:	af00      	add	r7, sp, #0
    87fa:	60f8      	str	r0, [r7, #12]
    87fc:	60b9      	str	r1, [r7, #8]
    87fe:	4613      	mov	r3, r2
    8800:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    8802:	68fb      	ldr	r3, [r7, #12]
    8804:	3b14      	subs	r3, #20
    8806:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    8808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    880a:	8b9b      	ldrh	r3, [r3, #28]
    880c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    880e:	88fb      	ldrh	r3, [r7, #6]
    8810:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    8812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    8816:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    8818:	68bb      	ldr	r3, [r7, #8]
    881a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    881e:	f107 0214 	add.w	r2, r7, #20
    8822:	4611      	mov	r1, r2
    8824:	4618      	mov	r0, r3
    8826:	4b06      	ldr	r3, [pc, #24]	; (8840 <i2c_m_sync_write+0x4c>)
    8828:	4798      	blx	r3
    882a:	6238      	str	r0, [r7, #32]

	if (ret) {
    882c:	6a3b      	ldr	r3, [r7, #32]
    882e:	2b00      	cmp	r3, #0
    8830:	d001      	beq.n	8836 <i2c_m_sync_write+0x42>
		return ret;
    8832:	6a3b      	ldr	r3, [r7, #32]
    8834:	e000      	b.n	8838 <i2c_m_sync_write+0x44>
	}

	return n;
    8836:	88fb      	ldrh	r3, [r7, #6]
}
    8838:	4618      	mov	r0, r3
    883a:	3728      	adds	r7, #40	; 0x28
    883c:	46bd      	mov	sp, r7
    883e:	bd80      	pop	{r7, pc}
    8840:	0000cf89 	.word	0x0000cf89

00008844 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    884e:	687b      	ldr	r3, [r7, #4]
    8850:	2b00      	cmp	r3, #0
    8852:	bf14      	ite	ne
    8854:	2301      	movne	r3, #1
    8856:	2300      	moveq	r3, #0
    8858:	b2db      	uxtb	r3, r3
    885a:	225e      	movs	r2, #94	; 0x5e
    885c:	490c      	ldr	r1, [pc, #48]	; (8890 <i2c_m_sync_init+0x4c>)
    885e:	4618      	mov	r0, r3
    8860:	4b0c      	ldr	r3, [pc, #48]	; (8894 <i2c_m_sync_init+0x50>)
    8862:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    8864:	687b      	ldr	r3, [r7, #4]
    8866:	6839      	ldr	r1, [r7, #0]
    8868:	4618      	mov	r0, r3
    886a:	4b0b      	ldr	r3, [pc, #44]	; (8898 <i2c_m_sync_init+0x54>)
    886c:	4798      	blx	r3
    886e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    8870:	68fb      	ldr	r3, [r7, #12]
    8872:	2b00      	cmp	r3, #0
    8874:	d001      	beq.n	887a <i2c_m_sync_init+0x36>
		return init_status;
    8876:	68fb      	ldr	r3, [r7, #12]
    8878:	e006      	b.n	8888 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	4a07      	ldr	r2, [pc, #28]	; (889c <i2c_m_sync_init+0x58>)
    887e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	4a07      	ldr	r2, [pc, #28]	; (88a0 <i2c_m_sync_init+0x5c>)
    8884:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    8886:	2300      	movs	r3, #0
}
    8888:	4618      	mov	r0, r3
    888a:	3710      	adds	r7, #16
    888c:	46bd      	mov	sp, r7
    888e:	bd80      	pop	{r7, pc}
    8890:	00014ff0 	.word	0x00014ff0
    8894:	000099f1 	.word	0x000099f1
    8898:	0000cd85 	.word	0x0000cd85
    889c:	000087a5 	.word	0x000087a5
    88a0:	000087f5 	.word	0x000087f5

000088a4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    88a4:	b580      	push	{r7, lr}
    88a6:	b082      	sub	sp, #8
    88a8:	af00      	add	r7, sp, #0
    88aa:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	4618      	mov	r0, r3
    88b0:	4b03      	ldr	r3, [pc, #12]	; (88c0 <i2c_m_sync_enable+0x1c>)
    88b2:	4798      	blx	r3
    88b4:	4603      	mov	r3, r0
}
    88b6:	4618      	mov	r0, r3
    88b8:	3708      	adds	r7, #8
    88ba:	46bd      	mov	sp, r7
    88bc:	bd80      	pop	{r7, pc}
    88be:	bf00      	nop
    88c0:	0000cdcd 	.word	0x0000cdcd

000088c4 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    88c4:	b480      	push	{r7}
    88c6:	b085      	sub	sp, #20
    88c8:	af00      	add	r7, sp, #0
    88ca:	60f8      	str	r0, [r7, #12]
    88cc:	460b      	mov	r3, r1
    88ce:	607a      	str	r2, [r7, #4]
    88d0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    88d2:	897b      	ldrh	r3, [r7, #10]
    88d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    88d8:	b21a      	sxth	r2, r3
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	b21b      	sxth	r3, r3
    88de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    88e2:	b21b      	sxth	r3, r3
    88e4:	4313      	orrs	r3, r2
    88e6:	b21b      	sxth	r3, r3
    88e8:	b29a      	uxth	r2, r3
    88ea:	68fb      	ldr	r3, [r7, #12]
    88ec:	839a      	strh	r2, [r3, #28]
    88ee:	68fb      	ldr	r3, [r7, #12]
    88f0:	8b9b      	ldrh	r3, [r3, #28]
}
    88f2:	4618      	mov	r0, r3
    88f4:	3714      	adds	r7, #20
    88f6:	46bd      	mov	sp, r7
    88f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88fc:	4770      	bx	lr

000088fe <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    88fe:	b480      	push	{r7}
    8900:	b083      	sub	sp, #12
    8902:	af00      	add	r7, sp, #0
    8904:	6078      	str	r0, [r7, #4]
    8906:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    8908:	687b      	ldr	r3, [r7, #4]
    890a:	f103 0214 	add.w	r2, r3, #20
    890e:	683b      	ldr	r3, [r7, #0]
    8910:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    8912:	2300      	movs	r3, #0
}
    8914:	4618      	mov	r0, r3
    8916:	370c      	adds	r7, #12
    8918:	46bd      	mov	sp, r7
    891a:	f85d 7b04 	ldr.w	r7, [sp], #4
    891e:	4770      	bx	lr

00008920 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    8920:	b580      	push	{r7, lr}
    8922:	b084      	sub	sp, #16
    8924:	af00      	add	r7, sp, #0
    8926:	60f8      	str	r0, [r7, #12]
    8928:	60b9      	str	r1, [r7, #8]
    892a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    892c:	68fb      	ldr	r3, [r7, #12]
    892e:	2b00      	cmp	r3, #0
    8930:	d004      	beq.n	893c <pwm_init+0x1c>
    8932:	68bb      	ldr	r3, [r7, #8]
    8934:	2b00      	cmp	r3, #0
    8936:	d001      	beq.n	893c <pwm_init+0x1c>
    8938:	2301      	movs	r3, #1
    893a:	e000      	b.n	893e <pwm_init+0x1e>
    893c:	2300      	movs	r3, #0
    893e:	f003 0301 	and.w	r3, r3, #1
    8942:	b2db      	uxtb	r3, r3
    8944:	2233      	movs	r2, #51	; 0x33
    8946:	490a      	ldr	r1, [pc, #40]	; (8970 <pwm_init+0x50>)
    8948:	4618      	mov	r0, r3
    894a:	4b0a      	ldr	r3, [pc, #40]	; (8974 <pwm_init+0x54>)
    894c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    894e:	68fb      	ldr	r3, [r7, #12]
    8950:	68b9      	ldr	r1, [r7, #8]
    8952:	4618      	mov	r0, r3
    8954:	4b08      	ldr	r3, [pc, #32]	; (8978 <pwm_init+0x58>)
    8956:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    8958:	68fb      	ldr	r3, [r7, #12]
    895a:	4a08      	ldr	r2, [pc, #32]	; (897c <pwm_init+0x5c>)
    895c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    895e:	68fb      	ldr	r3, [r7, #12]
    8960:	4a07      	ldr	r2, [pc, #28]	; (8980 <pwm_init+0x60>)
    8962:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    8964:	2300      	movs	r3, #0
}
    8966:	4618      	mov	r0, r3
    8968:	3710      	adds	r7, #16
    896a:	46bd      	mov	sp, r7
    896c:	bd80      	pop	{r7, pc}
    896e:	bf00      	nop
    8970:	0001500c 	.word	0x0001500c
    8974:	000099f1 	.word	0x000099f1
    8978:	0000e549 	.word	0x0000e549
    897c:	00008985 	.word	0x00008985
    8980:	000089a9 	.word	0x000089a9

00008984 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    8984:	b580      	push	{r7, lr}
    8986:	b084      	sub	sp, #16
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    8990:	68fb      	ldr	r3, [r7, #12]
    8992:	695b      	ldr	r3, [r3, #20]
    8994:	2b00      	cmp	r3, #0
    8996:	d003      	beq.n	89a0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    8998:	68fb      	ldr	r3, [r7, #12]
    899a:	695b      	ldr	r3, [r3, #20]
    899c:	68f8      	ldr	r0, [r7, #12]
    899e:	4798      	blx	r3
	}
}
    89a0:	bf00      	nop
    89a2:	3710      	adds	r7, #16
    89a4:	46bd      	mov	sp, r7
    89a6:	bd80      	pop	{r7, pc}

000089a8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    89a8:	b580      	push	{r7, lr}
    89aa:	b084      	sub	sp, #16
    89ac:	af00      	add	r7, sp, #0
    89ae:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    89b0:	687b      	ldr	r3, [r7, #4]
    89b2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	699b      	ldr	r3, [r3, #24]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d003      	beq.n	89c4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    89bc:	68fb      	ldr	r3, [r7, #12]
    89be:	699b      	ldr	r3, [r3, #24]
    89c0:	68f8      	ldr	r0, [r7, #12]
    89c2:	4798      	blx	r3
	}
}
    89c4:	bf00      	nop
    89c6:	3710      	adds	r7, #16
    89c8:	46bd      	mov	sp, r7
    89ca:	bd80      	pop	{r7, pc}

000089cc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	2b00      	cmp	r3, #0
    89da:	d004      	beq.n	89e6 <qspi_sync_init+0x1a>
    89dc:	683b      	ldr	r3, [r7, #0]
    89de:	2b00      	cmp	r3, #0
    89e0:	d001      	beq.n	89e6 <qspi_sync_init+0x1a>
    89e2:	2301      	movs	r3, #1
    89e4:	e000      	b.n	89e8 <qspi_sync_init+0x1c>
    89e6:	2300      	movs	r3, #0
    89e8:	f003 0301 	and.w	r3, r3, #1
    89ec:	b2db      	uxtb	r3, r3
    89ee:	2231      	movs	r2, #49	; 0x31
    89f0:	4906      	ldr	r1, [pc, #24]	; (8a0c <qspi_sync_init+0x40>)
    89f2:	4618      	mov	r0, r3
    89f4:	4b06      	ldr	r3, [pc, #24]	; (8a10 <qspi_sync_init+0x44>)
    89f6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    89f8:	687b      	ldr	r3, [r7, #4]
    89fa:	6839      	ldr	r1, [r7, #0]
    89fc:	4618      	mov	r0, r3
    89fe:	4b05      	ldr	r3, [pc, #20]	; (8a14 <qspi_sync_init+0x48>)
    8a00:	4798      	blx	r3
    8a02:	4603      	mov	r3, r0
}
    8a04:	4618      	mov	r0, r3
    8a06:	3708      	adds	r7, #8
    8a08:	46bd      	mov	sp, r7
    8a0a:	bd80      	pop	{r7, pc}
    8a0c:	00015024 	.word	0x00015024
    8a10:	000099f1 	.word	0x000099f1
    8a14:	0000bf65 	.word	0x0000bf65

00008a18 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    8a18:	b580      	push	{r7, lr}
    8a1a:	b082      	sub	sp, #8
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	2b00      	cmp	r3, #0
    8a24:	bf14      	ite	ne
    8a26:	2301      	movne	r3, #1
    8a28:	2300      	moveq	r3, #0
    8a2a:	b2db      	uxtb	r3, r3
    8a2c:	223f      	movs	r2, #63	; 0x3f
    8a2e:	4906      	ldr	r1, [pc, #24]	; (8a48 <qspi_sync_enable+0x30>)
    8a30:	4618      	mov	r0, r3
    8a32:	4b06      	ldr	r3, [pc, #24]	; (8a4c <qspi_sync_enable+0x34>)
    8a34:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    8a36:	687b      	ldr	r3, [r7, #4]
    8a38:	4618      	mov	r0, r3
    8a3a:	4b05      	ldr	r3, [pc, #20]	; (8a50 <qspi_sync_enable+0x38>)
    8a3c:	4798      	blx	r3
    8a3e:	4603      	mov	r3, r0
}
    8a40:	4618      	mov	r0, r3
    8a42:	3708      	adds	r7, #8
    8a44:	46bd      	mov	sp, r7
    8a46:	bd80      	pop	{r7, pc}
    8a48:	00015024 	.word	0x00015024
    8a4c:	000099f1 	.word	0x000099f1
    8a50:	0000bfd9 	.word	0x0000bfd9

00008a54 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    8a54:	b580      	push	{r7, lr}
    8a56:	b082      	sub	sp, #8
    8a58:	af00      	add	r7, sp, #0
    8a5a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    8a5c:	687b      	ldr	r3, [r7, #4]
    8a5e:	2b00      	cmp	r3, #0
    8a60:	bf14      	ite	ne
    8a62:	2301      	movne	r3, #1
    8a64:	2300      	moveq	r3, #0
    8a66:	b2db      	uxtb	r3, r3
    8a68:	2246      	movs	r2, #70	; 0x46
    8a6a:	4906      	ldr	r1, [pc, #24]	; (8a84 <qspi_sync_disable+0x30>)
    8a6c:	4618      	mov	r0, r3
    8a6e:	4b06      	ldr	r3, [pc, #24]	; (8a88 <qspi_sync_disable+0x34>)
    8a70:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	4618      	mov	r0, r3
    8a76:	4b05      	ldr	r3, [pc, #20]	; (8a8c <qspi_sync_disable+0x38>)
    8a78:	4798      	blx	r3
    8a7a:	4603      	mov	r3, r0
}
    8a7c:	4618      	mov	r0, r3
    8a7e:	3708      	adds	r7, #8
    8a80:	46bd      	mov	sp, r7
    8a82:	bd80      	pop	{r7, pc}
    8a84:	00015024 	.word	0x00015024
    8a88:	000099f1 	.word	0x000099f1
    8a8c:	0000bffd 	.word	0x0000bffd

00008a90 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    8a90:	b580      	push	{r7, lr}
    8a92:	b082      	sub	sp, #8
    8a94:	af00      	add	r7, sp, #0
    8a96:	6078      	str	r0, [r7, #4]
    8a98:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d004      	beq.n	8aaa <qspi_sync_serial_run_command+0x1a>
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d001      	beq.n	8aaa <qspi_sync_serial_run_command+0x1a>
    8aa6:	2301      	movs	r3, #1
    8aa8:	e000      	b.n	8aac <qspi_sync_serial_run_command+0x1c>
    8aaa:	2300      	movs	r3, #0
    8aac:	f003 0301 	and.w	r3, r3, #1
    8ab0:	b2db      	uxtb	r3, r3
    8ab2:	224d      	movs	r2, #77	; 0x4d
    8ab4:	4906      	ldr	r1, [pc, #24]	; (8ad0 <qspi_sync_serial_run_command+0x40>)
    8ab6:	4618      	mov	r0, r3
    8ab8:	4b06      	ldr	r3, [pc, #24]	; (8ad4 <qspi_sync_serial_run_command+0x44>)
    8aba:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    8abc:	687b      	ldr	r3, [r7, #4]
    8abe:	6839      	ldr	r1, [r7, #0]
    8ac0:	4618      	mov	r0, r3
    8ac2:	4b05      	ldr	r3, [pc, #20]	; (8ad8 <qspi_sync_serial_run_command+0x48>)
    8ac4:	4798      	blx	r3
    8ac6:	4603      	mov	r3, r0
}
    8ac8:	4618      	mov	r0, r3
    8aca:	3708      	adds	r7, #8
    8acc:	46bd      	mov	sp, r7
    8ace:	bd80      	pop	{r7, pc}
    8ad0:	00015024 	.word	0x00015024
    8ad4:	000099f1 	.word	0x000099f1
    8ad8:	0000c149 	.word	0x0000c149

00008adc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b084      	sub	sp, #16
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	6078      	str	r0, [r7, #4]
    8ae4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    8ae6:	2300      	movs	r3, #0
    8ae8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    8aea:	687b      	ldr	r3, [r7, #4]
    8aec:	2b00      	cmp	r3, #0
    8aee:	d004      	beq.n	8afa <spi_m_sync_init+0x1e>
    8af0:	683b      	ldr	r3, [r7, #0]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d001      	beq.n	8afa <spi_m_sync_init+0x1e>
    8af6:	2301      	movs	r3, #1
    8af8:	e000      	b.n	8afc <spi_m_sync_init+0x20>
    8afa:	2300      	movs	r3, #0
    8afc:	f003 0301 	and.w	r3, r3, #1
    8b00:	b2db      	uxtb	r3, r3
    8b02:	2240      	movs	r2, #64	; 0x40
    8b04:	4910      	ldr	r1, [pc, #64]	; (8b48 <spi_m_sync_init+0x6c>)
    8b06:	4618      	mov	r0, r3
    8b08:	4b10      	ldr	r3, [pc, #64]	; (8b4c <spi_m_sync_init+0x70>)
    8b0a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	683a      	ldr	r2, [r7, #0]
    8b10:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	3304      	adds	r3, #4
    8b16:	6839      	ldr	r1, [r7, #0]
    8b18:	4618      	mov	r0, r3
    8b1a:	4b0d      	ldr	r3, [pc, #52]	; (8b50 <spi_m_sync_init+0x74>)
    8b1c:	4798      	blx	r3
    8b1e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    8b20:	68fb      	ldr	r3, [r7, #12]
    8b22:	2b00      	cmp	r3, #0
    8b24:	da01      	bge.n	8b2a <spi_m_sync_init+0x4e>
		return rc;
    8b26:	68fb      	ldr	r3, [r7, #12]
    8b28:	e00a      	b.n	8b40 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    8b30:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    8b32:	687b      	ldr	r3, [r7, #4]
    8b34:	4a07      	ldr	r2, [pc, #28]	; (8b54 <spi_m_sync_init+0x78>)
    8b36:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	4a07      	ldr	r2, [pc, #28]	; (8b58 <spi_m_sync_init+0x7c>)
    8b3c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    8b3e:	2300      	movs	r3, #0
}
    8b40:	4618      	mov	r0, r3
    8b42:	3710      	adds	r7, #16
    8b44:	46bd      	mov	sp, r7
    8b46:	bd80      	pop	{r7, pc}
    8b48:	00015040 	.word	0x00015040
    8b4c:	000099f1 	.word	0x000099f1
    8b50:	0000d41d 	.word	0x0000d41d
    8b54:	00008b5d 	.word	0x00008b5d
    8b58:	00008bb5 	.word	0x00008bb5

00008b5c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b088      	sub	sp, #32
    8b60:	af00      	add	r7, sp, #0
    8b62:	60f8      	str	r0, [r7, #12]
    8b64:	60b9      	str	r1, [r7, #8]
    8b66:	4613      	mov	r3, r2
    8b68:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    8b6a:	68fb      	ldr	r3, [r7, #12]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	bf14      	ite	ne
    8b70:	2301      	movne	r3, #1
    8b72:	2300      	moveq	r3, #0
    8b74:	b2db      	uxtb	r3, r3
    8b76:	2287      	movs	r2, #135	; 0x87
    8b78:	490b      	ldr	r1, [pc, #44]	; (8ba8 <_spi_m_sync_io_read+0x4c>)
    8b7a:	4618      	mov	r0, r3
    8b7c:	4b0b      	ldr	r3, [pc, #44]	; (8bac <_spi_m_sync_io_read+0x50>)
    8b7e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    8b80:	68fb      	ldr	r3, [r7, #12]
    8b82:	3b0c      	subs	r3, #12
    8b84:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    8b86:	68bb      	ldr	r3, [r7, #8]
    8b88:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    8b8a:	2300      	movs	r3, #0
    8b8c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    8b8e:	88fb      	ldrh	r3, [r7, #6]
    8b90:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    8b92:	f107 0310 	add.w	r3, r7, #16
    8b96:	4619      	mov	r1, r3
    8b98:	69f8      	ldr	r0, [r7, #28]
    8b9a:	4b05      	ldr	r3, [pc, #20]	; (8bb0 <_spi_m_sync_io_read+0x54>)
    8b9c:	4798      	blx	r3
    8b9e:	4603      	mov	r3, r0
}
    8ba0:	4618      	mov	r0, r3
    8ba2:	3720      	adds	r7, #32
    8ba4:	46bd      	mov	sp, r7
    8ba6:	bd80      	pop	{r7, pc}
    8ba8:	00015040 	.word	0x00015040
    8bac:	000099f1 	.word	0x000099f1
    8bb0:	00008c0d 	.word	0x00008c0d

00008bb4 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    8bb4:	b580      	push	{r7, lr}
    8bb6:	b088      	sub	sp, #32
    8bb8:	af00      	add	r7, sp, #0
    8bba:	60f8      	str	r0, [r7, #12]
    8bbc:	60b9      	str	r1, [r7, #8]
    8bbe:	4613      	mov	r3, r2
    8bc0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    8bc2:	68fb      	ldr	r3, [r7, #12]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	bf14      	ite	ne
    8bc8:	2301      	movne	r3, #1
    8bca:	2300      	moveq	r3, #0
    8bcc:	b2db      	uxtb	r3, r3
    8bce:	22a3      	movs	r2, #163	; 0xa3
    8bd0:	490b      	ldr	r1, [pc, #44]	; (8c00 <_spi_m_sync_io_write+0x4c>)
    8bd2:	4618      	mov	r0, r3
    8bd4:	4b0b      	ldr	r3, [pc, #44]	; (8c04 <_spi_m_sync_io_write+0x50>)
    8bd6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    8bd8:	68fb      	ldr	r3, [r7, #12]
    8bda:	3b0c      	subs	r3, #12
    8bdc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    8bde:	2300      	movs	r3, #0
    8be0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    8be2:	68bb      	ldr	r3, [r7, #8]
    8be4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    8be6:	88fb      	ldrh	r3, [r7, #6]
    8be8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    8bea:	f107 0310 	add.w	r3, r7, #16
    8bee:	4619      	mov	r1, r3
    8bf0:	69f8      	ldr	r0, [r7, #28]
    8bf2:	4b05      	ldr	r3, [pc, #20]	; (8c08 <_spi_m_sync_io_write+0x54>)
    8bf4:	4798      	blx	r3
    8bf6:	4603      	mov	r3, r0
}
    8bf8:	4618      	mov	r0, r3
    8bfa:	3720      	adds	r7, #32
    8bfc:	46bd      	mov	sp, r7
    8bfe:	bd80      	pop	{r7, pc}
    8c00:	00015040 	.word	0x00015040
    8c04:	000099f1 	.word	0x000099f1
    8c08:	00008c0d 	.word	0x00008c0d

00008c0c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    8c0c:	b580      	push	{r7, lr}
    8c0e:	b086      	sub	sp, #24
    8c10:	af00      	add	r7, sp, #0
    8c12:	6078      	str	r0, [r7, #4]
    8c14:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d004      	beq.n	8c26 <spi_m_sync_transfer+0x1a>
    8c1c:	683b      	ldr	r3, [r7, #0]
    8c1e:	2b00      	cmp	r3, #0
    8c20:	d001      	beq.n	8c26 <spi_m_sync_transfer+0x1a>
    8c22:	2301      	movs	r3, #1
    8c24:	e000      	b.n	8c28 <spi_m_sync_transfer+0x1c>
    8c26:	2300      	movs	r3, #0
    8c28:	f003 0301 	and.w	r3, r3, #1
    8c2c:	b2db      	uxtb	r3, r3
    8c2e:	22b3      	movs	r2, #179	; 0xb3
    8c30:	490c      	ldr	r1, [pc, #48]	; (8c64 <spi_m_sync_transfer+0x58>)
    8c32:	4618      	mov	r0, r3
    8c34:	4b0c      	ldr	r3, [pc, #48]	; (8c68 <spi_m_sync_transfer+0x5c>)
    8c36:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    8c38:	683b      	ldr	r3, [r7, #0]
    8c3a:	681b      	ldr	r3, [r3, #0]
    8c3c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    8c3e:	683b      	ldr	r3, [r7, #0]
    8c40:	685b      	ldr	r3, [r3, #4]
    8c42:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    8c44:	683b      	ldr	r3, [r7, #0]
    8c46:	689b      	ldr	r3, [r3, #8]
    8c48:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    8c4a:	687b      	ldr	r3, [r7, #4]
    8c4c:	3304      	adds	r3, #4
    8c4e:	f107 020c 	add.w	r2, r7, #12
    8c52:	4611      	mov	r1, r2
    8c54:	4618      	mov	r0, r3
    8c56:	4b05      	ldr	r3, [pc, #20]	; (8c6c <spi_m_sync_transfer+0x60>)
    8c58:	4798      	blx	r3
    8c5a:	4603      	mov	r3, r0
}
    8c5c:	4618      	mov	r0, r3
    8c5e:	3718      	adds	r7, #24
    8c60:	46bd      	mov	sp, r7
    8c62:	bd80      	pop	{r7, pc}
    8c64:	00015040 	.word	0x00015040
    8c68:	000099f1 	.word	0x000099f1
    8c6c:	0000d67d 	.word	0x0000d67d

00008c70 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    8c70:	b480      	push	{r7}
    8c72:	b083      	sub	sp, #12
    8c74:	af00      	add	r7, sp, #0
    8c76:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    8c78:	687b      	ldr	r3, [r7, #4]
    8c7a:	681b      	ldr	r3, [r3, #0]
}
    8c7c:	4618      	mov	r0, r3
    8c7e:	370c      	adds	r7, #12
    8c80:	46bd      	mov	sp, r7
    8c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c86:	4770      	bx	lr

00008c88 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    8c88:	b480      	push	{r7}
    8c8a:	b083      	sub	sp, #12
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d002      	beq.n	8c9c <list_get_next_element+0x14>
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	681b      	ldr	r3, [r3, #0]
    8c9a:	e000      	b.n	8c9e <list_get_next_element+0x16>
    8c9c:	2300      	movs	r3, #0
}
    8c9e:	4618      	mov	r0, r3
    8ca0:	370c      	adds	r7, #12
    8ca2:	46bd      	mov	sp, r7
    8ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca8:	4770      	bx	lr
	...

00008cac <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    8cac:	b580      	push	{r7, lr}
    8cae:	b084      	sub	sp, #16
    8cb0:	af00      	add	r7, sp, #0
    8cb2:	60f8      	str	r0, [r7, #12]
    8cb4:	60b9      	str	r1, [r7, #8]
    8cb6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    8cb8:	68fb      	ldr	r3, [r7, #12]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d007      	beq.n	8cce <timer_init+0x22>
    8cbe:	68bb      	ldr	r3, [r7, #8]
    8cc0:	2b00      	cmp	r3, #0
    8cc2:	d004      	beq.n	8cce <timer_init+0x22>
    8cc4:	687b      	ldr	r3, [r7, #4]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d001      	beq.n	8cce <timer_init+0x22>
    8cca:	2301      	movs	r3, #1
    8ccc:	e000      	b.n	8cd0 <timer_init+0x24>
    8cce:	2300      	movs	r3, #0
    8cd0:	f003 0301 	and.w	r3, r3, #1
    8cd4:	b2db      	uxtb	r3, r3
    8cd6:	223b      	movs	r2, #59	; 0x3b
    8cd8:	490c      	ldr	r1, [pc, #48]	; (8d0c <timer_init+0x60>)
    8cda:	4618      	mov	r0, r3
    8cdc:	4b0c      	ldr	r3, [pc, #48]	; (8d10 <timer_init+0x64>)
    8cde:	4798      	blx	r3
	descr->func = func;
    8ce0:	68fb      	ldr	r3, [r7, #12]
    8ce2:	687a      	ldr	r2, [r7, #4]
    8ce4:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    8ce6:	68fb      	ldr	r3, [r7, #12]
    8ce8:	681b      	ldr	r3, [r3, #0]
    8cea:	681b      	ldr	r3, [r3, #0]
    8cec:	68fa      	ldr	r2, [r7, #12]
    8cee:	3204      	adds	r2, #4
    8cf0:	68b9      	ldr	r1, [r7, #8]
    8cf2:	4610      	mov	r0, r2
    8cf4:	4798      	blx	r3
	descr->time                           = 0;
    8cf6:	68fb      	ldr	r3, [r7, #12]
    8cf8:	2200      	movs	r2, #0
    8cfa:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    8cfc:	68fb      	ldr	r3, [r7, #12]
    8cfe:	4a05      	ldr	r2, [pc, #20]	; (8d14 <timer_init+0x68>)
    8d00:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    8d02:	2300      	movs	r3, #0
}
    8d04:	4618      	mov	r0, r3
    8d06:	3710      	adds	r7, #16
    8d08:	46bd      	mov	sp, r7
    8d0a:	bd80      	pop	{r7, pc}
    8d0c:	0001505c 	.word	0x0001505c
    8d10:	000099f1 	.word	0x000099f1
    8d14:	00009031 	.word	0x00009031

00008d18 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	b082      	sub	sp, #8
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    8d20:	687b      	ldr	r3, [r7, #4]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d005      	beq.n	8d32 <timer_start+0x1a>
    8d26:	687b      	ldr	r3, [r7, #4]
    8d28:	681b      	ldr	r3, [r3, #0]
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d001      	beq.n	8d32 <timer_start+0x1a>
    8d2e:	2301      	movs	r3, #1
    8d30:	e000      	b.n	8d34 <timer_start+0x1c>
    8d32:	2300      	movs	r3, #0
    8d34:	f003 0301 	and.w	r3, r3, #1
    8d38:	b2db      	uxtb	r3, r3
    8d3a:	2254      	movs	r2, #84	; 0x54
    8d3c:	490e      	ldr	r1, [pc, #56]	; (8d78 <timer_start+0x60>)
    8d3e:	4618      	mov	r0, r3
    8d40:	4b0e      	ldr	r3, [pc, #56]	; (8d7c <timer_start+0x64>)
    8d42:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	681b      	ldr	r3, [r3, #0]
    8d48:	699b      	ldr	r3, [r3, #24]
    8d4a:	687a      	ldr	r2, [r7, #4]
    8d4c:	3204      	adds	r2, #4
    8d4e:	4610      	mov	r0, r2
    8d50:	4798      	blx	r3
    8d52:	4603      	mov	r3, r0
    8d54:	2b00      	cmp	r3, #0
    8d56:	d002      	beq.n	8d5e <timer_start+0x46>
		return ERR_DENIED;
    8d58:	f06f 0310 	mvn.w	r3, #16
    8d5c:	e007      	b.n	8d6e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    8d5e:	687b      	ldr	r3, [r7, #4]
    8d60:	681b      	ldr	r3, [r3, #0]
    8d62:	689b      	ldr	r3, [r3, #8]
    8d64:	687a      	ldr	r2, [r7, #4]
    8d66:	3204      	adds	r2, #4
    8d68:	4610      	mov	r0, r2
    8d6a:	4798      	blx	r3

	return ERR_NONE;
    8d6c:	2300      	movs	r3, #0
}
    8d6e:	4618      	mov	r0, r3
    8d70:	3708      	adds	r7, #8
    8d72:	46bd      	mov	sp, r7
    8d74:	bd80      	pop	{r7, pc}
    8d76:	bf00      	nop
    8d78:	0001505c 	.word	0x0001505c
    8d7c:	000099f1 	.word	0x000099f1

00008d80 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    8d80:	b580      	push	{r7, lr}
    8d82:	b084      	sub	sp, #16
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    8d8a:	687b      	ldr	r3, [r7, #4]
    8d8c:	2b00      	cmp	r3, #0
    8d8e:	d008      	beq.n	8da2 <timer_add_task+0x22>
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d005      	beq.n	8da2 <timer_add_task+0x22>
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	681b      	ldr	r3, [r3, #0]
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d001      	beq.n	8da2 <timer_add_task+0x22>
    8d9e:	2301      	movs	r3, #1
    8da0:	e000      	b.n	8da4 <timer_add_task+0x24>
    8da2:	2300      	movs	r3, #0
    8da4:	f003 0301 	and.w	r3, r3, #1
    8da8:	b2db      	uxtb	r3, r3
    8daa:	227b      	movs	r2, #123	; 0x7b
    8dac:	492f      	ldr	r1, [pc, #188]	; (8e6c <timer_add_task+0xec>)
    8dae:	4618      	mov	r0, r3
    8db0:	4b2f      	ldr	r3, [pc, #188]	; (8e70 <timer_add_task+0xf0>)
    8db2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	7f1b      	ldrb	r3, [r3, #28]
    8db8:	b2db      	uxtb	r3, r3
    8dba:	f043 0301 	orr.w	r3, r3, #1
    8dbe:	b2da      	uxtb	r2, r3
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    8dc4:	687b      	ldr	r3, [r7, #4]
    8dc6:	3318      	adds	r3, #24
    8dc8:	6839      	ldr	r1, [r7, #0]
    8dca:	4618      	mov	r0, r3
    8dcc:	4b29      	ldr	r3, [pc, #164]	; (8e74 <timer_add_task+0xf4>)
    8dce:	4798      	blx	r3
    8dd0:	4603      	mov	r3, r0
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d00f      	beq.n	8df6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8dd6:	687b      	ldr	r3, [r7, #4]
    8dd8:	7f1b      	ldrb	r3, [r3, #28]
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	f023 0301 	bic.w	r3, r3, #1
    8de0:	b2da      	uxtb	r2, r3
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    8de6:	2280      	movs	r2, #128	; 0x80
    8de8:	4920      	ldr	r1, [pc, #128]	; (8e6c <timer_add_task+0xec>)
    8dea:	2000      	movs	r0, #0
    8dec:	4b20      	ldr	r3, [pc, #128]	; (8e70 <timer_add_task+0xf0>)
    8dee:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    8df0:	f06f 0311 	mvn.w	r3, #17
    8df4:	e035      	b.n	8e62 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	695a      	ldr	r2, [r3, #20]
    8dfa:	683b      	ldr	r3, [r7, #0]
    8dfc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	f103 0018 	add.w	r0, r3, #24
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	695b      	ldr	r3, [r3, #20]
    8e08:	461a      	mov	r2, r3
    8e0a:	6839      	ldr	r1, [r7, #0]
    8e0c:	4b1a      	ldr	r3, [pc, #104]	; (8e78 <timer_add_task+0xf8>)
    8e0e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	7f1b      	ldrb	r3, [r3, #28]
    8e14:	b2db      	uxtb	r3, r3
    8e16:	f023 0301 	bic.w	r3, r3, #1
    8e1a:	b2da      	uxtb	r2, r3
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	7f1b      	ldrb	r3, [r3, #28]
    8e24:	b2db      	uxtb	r3, r3
    8e26:	f003 0302 	and.w	r3, r3, #2
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d018      	beq.n	8e60 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    8e2e:	f107 030c 	add.w	r3, r7, #12
    8e32:	4618      	mov	r0, r3
    8e34:	4b11      	ldr	r3, [pc, #68]	; (8e7c <timer_add_task+0xfc>)
    8e36:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    8e38:	687b      	ldr	r3, [r7, #4]
    8e3a:	7f1b      	ldrb	r3, [r3, #28]
    8e3c:	b2db      	uxtb	r3, r3
    8e3e:	f023 0302 	bic.w	r3, r3, #2
    8e42:	b2da      	uxtb	r2, r3
    8e44:	687b      	ldr	r3, [r7, #4]
    8e46:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	681b      	ldr	r3, [r3, #0]
    8e4c:	69db      	ldr	r3, [r3, #28]
    8e4e:	687a      	ldr	r2, [r7, #4]
    8e50:	3204      	adds	r2, #4
    8e52:	4610      	mov	r0, r2
    8e54:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    8e56:	f107 030c 	add.w	r3, r7, #12
    8e5a:	4618      	mov	r0, r3
    8e5c:	4b08      	ldr	r3, [pc, #32]	; (8e80 <timer_add_task+0x100>)
    8e5e:	4798      	blx	r3
	}

	return ERR_NONE;
    8e60:	2300      	movs	r3, #0
}
    8e62:	4618      	mov	r0, r3
    8e64:	3710      	adds	r7, #16
    8e66:	46bd      	mov	sp, r7
    8e68:	bd80      	pop	{r7, pc}
    8e6a:	bf00      	nop
    8e6c:	0001505c 	.word	0x0001505c
    8e70:	000099f1 	.word	0x000099f1
    8e74:	00009a19 	.word	0x00009a19
    8e78:	00008f81 	.word	0x00008f81
    8e7c:	00011a05 	.word	0x00011a05
    8e80:	00011a2b 	.word	0x00011a2b

00008e84 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    8e84:	b580      	push	{r7, lr}
    8e86:	b084      	sub	sp, #16
    8e88:	af00      	add	r7, sp, #0
    8e8a:	6078      	str	r0, [r7, #4]
    8e8c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	2b00      	cmp	r3, #0
    8e92:	d008      	beq.n	8ea6 <timer_remove_task+0x22>
    8e94:	683b      	ldr	r3, [r7, #0]
    8e96:	2b00      	cmp	r3, #0
    8e98:	d005      	beq.n	8ea6 <timer_remove_task+0x22>
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	681b      	ldr	r3, [r3, #0]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d001      	beq.n	8ea6 <timer_remove_task+0x22>
    8ea2:	2301      	movs	r3, #1
    8ea4:	e000      	b.n	8ea8 <timer_remove_task+0x24>
    8ea6:	2300      	movs	r3, #0
    8ea8:	f003 0301 	and.w	r3, r3, #1
    8eac:	b2db      	uxtb	r3, r3
    8eae:	2296      	movs	r2, #150	; 0x96
    8eb0:	492d      	ldr	r1, [pc, #180]	; (8f68 <timer_remove_task+0xe4>)
    8eb2:	4618      	mov	r0, r3
    8eb4:	4b2d      	ldr	r3, [pc, #180]	; (8f6c <timer_remove_task+0xe8>)
    8eb6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	7f1b      	ldrb	r3, [r3, #28]
    8ebc:	b2db      	uxtb	r3, r3
    8ebe:	f043 0301 	orr.w	r3, r3, #1
    8ec2:	b2da      	uxtb	r2, r3
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	3318      	adds	r3, #24
    8ecc:	6839      	ldr	r1, [r7, #0]
    8ece:	4618      	mov	r0, r3
    8ed0:	4b27      	ldr	r3, [pc, #156]	; (8f70 <timer_remove_task+0xec>)
    8ed2:	4798      	blx	r3
    8ed4:	4603      	mov	r3, r0
    8ed6:	f083 0301 	eor.w	r3, r3, #1
    8eda:	b2db      	uxtb	r3, r3
    8edc:	2b00      	cmp	r3, #0
    8ede:	d00f      	beq.n	8f00 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	7f1b      	ldrb	r3, [r3, #28]
    8ee4:	b2db      	uxtb	r3, r3
    8ee6:	f023 0301 	bic.w	r3, r3, #1
    8eea:	b2da      	uxtb	r2, r3
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    8ef0:	229b      	movs	r2, #155	; 0x9b
    8ef2:	491d      	ldr	r1, [pc, #116]	; (8f68 <timer_remove_task+0xe4>)
    8ef4:	2000      	movs	r0, #0
    8ef6:	4b1d      	ldr	r3, [pc, #116]	; (8f6c <timer_remove_task+0xe8>)
    8ef8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    8efa:	f06f 0309 	mvn.w	r3, #9
    8efe:	e02e      	b.n	8f5e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	3318      	adds	r3, #24
    8f04:	6839      	ldr	r1, [r7, #0]
    8f06:	4618      	mov	r0, r3
    8f08:	4b1a      	ldr	r3, [pc, #104]	; (8f74 <timer_remove_task+0xf0>)
    8f0a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	7f1b      	ldrb	r3, [r3, #28]
    8f10:	b2db      	uxtb	r3, r3
    8f12:	f023 0301 	bic.w	r3, r3, #1
    8f16:	b2da      	uxtb	r2, r3
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	7f1b      	ldrb	r3, [r3, #28]
    8f20:	b2db      	uxtb	r3, r3
    8f22:	f003 0302 	and.w	r3, r3, #2
    8f26:	2b00      	cmp	r3, #0
    8f28:	d018      	beq.n	8f5c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    8f2a:	f107 030c 	add.w	r3, r7, #12
    8f2e:	4618      	mov	r0, r3
    8f30:	4b11      	ldr	r3, [pc, #68]	; (8f78 <timer_remove_task+0xf4>)
    8f32:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	7f1b      	ldrb	r3, [r3, #28]
    8f38:	b2db      	uxtb	r3, r3
    8f3a:	f023 0302 	bic.w	r3, r3, #2
    8f3e:	b2da      	uxtb	r2, r3
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	681b      	ldr	r3, [r3, #0]
    8f48:	69db      	ldr	r3, [r3, #28]
    8f4a:	687a      	ldr	r2, [r7, #4]
    8f4c:	3204      	adds	r2, #4
    8f4e:	4610      	mov	r0, r2
    8f50:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    8f52:	f107 030c 	add.w	r3, r7, #12
    8f56:	4618      	mov	r0, r3
    8f58:	4b08      	ldr	r3, [pc, #32]	; (8f7c <timer_remove_task+0xf8>)
    8f5a:	4798      	blx	r3
	}

	return ERR_NONE;
    8f5c:	2300      	movs	r3, #0
}
    8f5e:	4618      	mov	r0, r3
    8f60:	3710      	adds	r7, #16
    8f62:	46bd      	mov	sp, r7
    8f64:	bd80      	pop	{r7, pc}
    8f66:	bf00      	nop
    8f68:	0001505c 	.word	0x0001505c
    8f6c:	000099f1 	.word	0x000099f1
    8f70:	00009a19 	.word	0x00009a19
    8f74:	00009b7b 	.word	0x00009b7b
    8f78:	00011a05 	.word	0x00011a05
    8f7c:	00011a2b 	.word	0x00011a2b

00008f80 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    8f80:	b580      	push	{r7, lr}
    8f82:	b088      	sub	sp, #32
    8f84:	af00      	add	r7, sp, #0
    8f86:	60f8      	str	r0, [r7, #12]
    8f88:	60b9      	str	r1, [r7, #8]
    8f8a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    8f8c:	2300      	movs	r3, #0
    8f8e:	61bb      	str	r3, [r7, #24]
    8f90:	68f8      	ldr	r0, [r7, #12]
    8f92:	4b23      	ldr	r3, [pc, #140]	; (9020 <timer_add_timer_task+0xa0>)
    8f94:	4798      	blx	r3
    8f96:	6138      	str	r0, [r7, #16]

	if (!head) {
    8f98:	693b      	ldr	r3, [r7, #16]
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d104      	bne.n	8fa8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    8f9e:	68b9      	ldr	r1, [r7, #8]
    8fa0:	68f8      	ldr	r0, [r7, #12]
    8fa2:	4b20      	ldr	r3, [pc, #128]	; (9024 <timer_add_timer_task+0xa4>)
    8fa4:	4798      	blx	r3
		return;
    8fa6:	e037      	b.n	9018 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    8fa8:	693b      	ldr	r3, [r7, #16]
    8faa:	61fb      	str	r3, [r7, #28]
    8fac:	e022      	b.n	8ff4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    8fae:	69fb      	ldr	r3, [r7, #28]
    8fb0:	685a      	ldr	r2, [r3, #4]
    8fb2:	687b      	ldr	r3, [r7, #4]
    8fb4:	429a      	cmp	r2, r3
    8fb6:	d808      	bhi.n	8fca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    8fb8:	69fb      	ldr	r3, [r7, #28]
    8fba:	689a      	ldr	r2, [r3, #8]
    8fbc:	69fb      	ldr	r3, [r7, #28]
    8fbe:	6859      	ldr	r1, [r3, #4]
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	1acb      	subs	r3, r1, r3
    8fc4:	4413      	add	r3, r2
    8fc6:	617b      	str	r3, [r7, #20]
    8fc8:	e009      	b.n	8fde <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    8fca:	69fb      	ldr	r3, [r7, #28]
    8fcc:	689a      	ldr	r2, [r3, #8]
    8fce:	69fb      	ldr	r3, [r7, #28]
    8fd0:	685b      	ldr	r3, [r3, #4]
    8fd2:	441a      	add	r2, r3
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	425b      	negs	r3, r3
    8fd8:	4413      	add	r3, r2
    8fda:	3301      	adds	r3, #1
    8fdc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    8fde:	68bb      	ldr	r3, [r7, #8]
    8fe0:	689a      	ldr	r2, [r3, #8]
    8fe2:	697b      	ldr	r3, [r7, #20]
    8fe4:	429a      	cmp	r2, r3
    8fe6:	d909      	bls.n	8ffc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    8fe8:	69fb      	ldr	r3, [r7, #28]
    8fea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    8fec:	69f8      	ldr	r0, [r7, #28]
    8fee:	4b0e      	ldr	r3, [pc, #56]	; (9028 <timer_add_timer_task+0xa8>)
    8ff0:	4798      	blx	r3
    8ff2:	61f8      	str	r0, [r7, #28]
    8ff4:	69fb      	ldr	r3, [r7, #28]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d1d9      	bne.n	8fae <timer_add_timer_task+0x2e>
    8ffa:	e000      	b.n	8ffe <timer_add_timer_task+0x7e>
			break;
    8ffc:	bf00      	nop
	}

	if (it == head) {
    8ffe:	69fa      	ldr	r2, [r7, #28]
    9000:	693b      	ldr	r3, [r7, #16]
    9002:	429a      	cmp	r2, r3
    9004:	d104      	bne.n	9010 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    9006:	68b9      	ldr	r1, [r7, #8]
    9008:	68f8      	ldr	r0, [r7, #12]
    900a:	4b06      	ldr	r3, [pc, #24]	; (9024 <timer_add_timer_task+0xa4>)
    900c:	4798      	blx	r3
    900e:	e003      	b.n	9018 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    9010:	68b9      	ldr	r1, [r7, #8]
    9012:	69b8      	ldr	r0, [r7, #24]
    9014:	4b05      	ldr	r3, [pc, #20]	; (902c <timer_add_timer_task+0xac>)
    9016:	4798      	blx	r3
	}
}
    9018:	3720      	adds	r7, #32
    901a:	46bd      	mov	sp, r7
    901c:	bd80      	pop	{r7, pc}
    901e:	bf00      	nop
    9020:	00008c71 	.word	0x00008c71
    9024:	00009a51 	.word	0x00009a51
    9028:	00008c89 	.word	0x00008c89
    902c:	00009aa9 	.word	0x00009aa9

00009030 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    9030:	b580      	push	{r7, lr}
    9032:	b086      	sub	sp, #24
    9034:	af00      	add	r7, sp, #0
    9036:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	3b04      	subs	r3, #4
    903c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    903e:	693b      	ldr	r3, [r7, #16]
    9040:	3318      	adds	r3, #24
    9042:	4618      	mov	r0, r3
    9044:	4b27      	ldr	r3, [pc, #156]	; (90e4 <timer_process_counted+0xb4>)
    9046:	4798      	blx	r3
    9048:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    904a:	693b      	ldr	r3, [r7, #16]
    904c:	695b      	ldr	r3, [r3, #20]
    904e:	1c5a      	adds	r2, r3, #1
    9050:	693b      	ldr	r3, [r7, #16]
    9052:	615a      	str	r2, [r3, #20]
    9054:	693b      	ldr	r3, [r7, #16]
    9056:	695b      	ldr	r3, [r3, #20]
    9058:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    905a:	693b      	ldr	r3, [r7, #16]
    905c:	7f1b      	ldrb	r3, [r3, #28]
    905e:	b2db      	uxtb	r3, r3
    9060:	f003 0301 	and.w	r3, r3, #1
    9064:	2b00      	cmp	r3, #0
    9066:	d106      	bne.n	9076 <timer_process_counted+0x46>
    9068:	693b      	ldr	r3, [r7, #16]
    906a:	7f1b      	ldrb	r3, [r3, #28]
    906c:	b2db      	uxtb	r3, r3
    906e:	f003 0302 	and.w	r3, r3, #2
    9072:	2b00      	cmp	r3, #0
    9074:	d027      	beq.n	90c6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    9076:	693b      	ldr	r3, [r7, #16]
    9078:	7f1b      	ldrb	r3, [r3, #28]
    907a:	b2db      	uxtb	r3, r3
    907c:	f043 0302 	orr.w	r3, r3, #2
    9080:	b2da      	uxtb	r2, r3
    9082:	693b      	ldr	r3, [r7, #16]
    9084:	771a      	strb	r2, [r3, #28]
		return;
    9086:	e029      	b.n	90dc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    9088:	697b      	ldr	r3, [r7, #20]
    908a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    908c:	693b      	ldr	r3, [r7, #16]
    908e:	3318      	adds	r3, #24
    9090:	4618      	mov	r0, r3
    9092:	4b15      	ldr	r3, [pc, #84]	; (90e8 <timer_process_counted+0xb8>)
    9094:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    9096:	68bb      	ldr	r3, [r7, #8]
    9098:	7c1b      	ldrb	r3, [r3, #16]
    909a:	2b01      	cmp	r3, #1
    909c:	d109      	bne.n	90b2 <timer_process_counted+0x82>
			tmp->time_label = time;
    909e:	68bb      	ldr	r3, [r7, #8]
    90a0:	68fa      	ldr	r2, [r7, #12]
    90a2:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    90a4:	693b      	ldr	r3, [r7, #16]
    90a6:	3318      	adds	r3, #24
    90a8:	68fa      	ldr	r2, [r7, #12]
    90aa:	68b9      	ldr	r1, [r7, #8]
    90ac:	4618      	mov	r0, r3
    90ae:	4b0f      	ldr	r3, [pc, #60]	; (90ec <timer_process_counted+0xbc>)
    90b0:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    90b2:	693b      	ldr	r3, [r7, #16]
    90b4:	3318      	adds	r3, #24
    90b6:	4618      	mov	r0, r3
    90b8:	4b0a      	ldr	r3, [pc, #40]	; (90e4 <timer_process_counted+0xb4>)
    90ba:	4798      	blx	r3
    90bc:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    90be:	68bb      	ldr	r3, [r7, #8]
    90c0:	68db      	ldr	r3, [r3, #12]
    90c2:	68b8      	ldr	r0, [r7, #8]
    90c4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    90c6:	697b      	ldr	r3, [r7, #20]
    90c8:	2b00      	cmp	r3, #0
    90ca:	d007      	beq.n	90dc <timer_process_counted+0xac>
    90cc:	697b      	ldr	r3, [r7, #20]
    90ce:	685b      	ldr	r3, [r3, #4]
    90d0:	68fa      	ldr	r2, [r7, #12]
    90d2:	1ad2      	subs	r2, r2, r3
    90d4:	697b      	ldr	r3, [r7, #20]
    90d6:	689b      	ldr	r3, [r3, #8]
    90d8:	429a      	cmp	r2, r3
    90da:	d2d5      	bcs.n	9088 <timer_process_counted+0x58>
	}
}
    90dc:	3718      	adds	r7, #24
    90de:	46bd      	mov	sp, r7
    90e0:	bd80      	pop	{r7, pc}
    90e2:	bf00      	nop
    90e4:	00008c71 	.word	0x00008c71
    90e8:	00009b49 	.word	0x00009b49
    90ec:	00008f81 	.word	0x00008f81

000090f0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    90f0:	b480      	push	{r7}
    90f2:	b085      	sub	sp, #20
    90f4:	af00      	add	r7, sp, #0
    90f6:	4603      	mov	r3, r0
    90f8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    90fa:	2300      	movs	r3, #0
    90fc:	73fb      	strb	r3, [r7, #15]
    90fe:	e029      	b.n	9154 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    9100:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9104:	4a19      	ldr	r2, [pc, #100]	; (916c <_usb_d_find_ep+0x7c>)
    9106:	015b      	lsls	r3, r3, #5
    9108:	4413      	add	r3, r2
    910a:	3301      	adds	r3, #1
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	79fa      	ldrb	r2, [r7, #7]
    9110:	429a      	cmp	r2, r3
    9112:	d102      	bne.n	911a <_usb_d_find_ep+0x2a>
			return i;
    9114:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9118:	e022      	b.n	9160 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    911a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    911e:	4a13      	ldr	r2, [pc, #76]	; (916c <_usb_d_find_ep+0x7c>)
    9120:	015b      	lsls	r3, r3, #5
    9122:	4413      	add	r3, r2
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	2b00      	cmp	r3, #0
    9128:	d10e      	bne.n	9148 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    912a:	79fb      	ldrb	r3, [r7, #7]
    912c:	f003 030f 	and.w	r3, r3, #15
    9130:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9134:	490d      	ldr	r1, [pc, #52]	; (916c <_usb_d_find_ep+0x7c>)
    9136:	0152      	lsls	r2, r2, #5
    9138:	440a      	add	r2, r1
    913a:	3201      	adds	r2, #1
    913c:	7812      	ldrb	r2, [r2, #0]
    913e:	4293      	cmp	r3, r2
    9140:	d102      	bne.n	9148 <_usb_d_find_ep+0x58>
			return i;
    9142:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9146:	e00b      	b.n	9160 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9148:	f997 300f 	ldrsb.w	r3, [r7, #15]
    914c:	b2db      	uxtb	r3, r3
    914e:	3301      	adds	r3, #1
    9150:	b2db      	uxtb	r3, r3
    9152:	73fb      	strb	r3, [r7, #15]
    9154:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9158:	2b03      	cmp	r3, #3
    915a:	ddd1      	ble.n	9100 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    915c:	f04f 33ff 	mov.w	r3, #4294967295
}
    9160:	4618      	mov	r0, r3
    9162:	3714      	adds	r7, #20
    9164:	46bd      	mov	sp, r7
    9166:	f85d 7b04 	ldr.w	r7, [sp], #4
    916a:	4770      	bx	lr
    916c:	200019d4 	.word	0x200019d4

00009170 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    9170:	b580      	push	{r7, lr}
    9172:	b088      	sub	sp, #32
    9174:	af00      	add	r7, sp, #0
    9176:	60ba      	str	r2, [r7, #8]
    9178:	607b      	str	r3, [r7, #4]
    917a:	4603      	mov	r3, r0
    917c:	73fb      	strb	r3, [r7, #15]
    917e:	460b      	mov	r3, r1
    9180:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    9182:	68bb      	ldr	r3, [r7, #8]
    9184:	617b      	str	r3, [r7, #20]
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	61bb      	str	r3, [r7, #24]
    918a:	7bbb      	ldrb	r3, [r7, #14]
    918c:	2b00      	cmp	r3, #0
    918e:	d004      	beq.n	919a <_usb_d_trans+0x2a>
    9190:	7bfb      	ldrb	r3, [r7, #15]
    9192:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9196:	b2db      	uxtb	r3, r3
    9198:	e003      	b.n	91a2 <_usb_d_trans+0x32>
    919a:	7bfb      	ldrb	r3, [r7, #15]
    919c:	f003 030f 	and.w	r3, r3, #15
    91a0:	b2db      	uxtb	r3, r3
    91a2:	773b      	strb	r3, [r7, #28]
    91a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    91a8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    91aa:	f107 0314 	add.w	r3, r7, #20
    91ae:	4618      	mov	r0, r3
    91b0:	4b03      	ldr	r3, [pc, #12]	; (91c0 <_usb_d_trans+0x50>)
    91b2:	4798      	blx	r3
    91b4:	4603      	mov	r3, r0
}
    91b6:	4618      	mov	r0, r3
    91b8:	3720      	adds	r7, #32
    91ba:	46bd      	mov	sp, r7
    91bc:	bd80      	pop	{r7, pc}
    91be:	bf00      	nop
    91c0:	0001108d 	.word	0x0001108d

000091c4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    91c4:	b480      	push	{r7}
    91c6:	b085      	sub	sp, #20
    91c8:	af00      	add	r7, sp, #0
    91ca:	60f8      	str	r0, [r7, #12]
    91cc:	60b9      	str	r1, [r7, #8]
    91ce:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    91d0:	2300      	movs	r3, #0
}
    91d2:	4618      	mov	r0, r3
    91d4:	3714      	adds	r7, #20
    91d6:	46bd      	mov	sp, r7
    91d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    91dc:	4770      	bx	lr
	...

000091e0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	b086      	sub	sp, #24
    91e4:	af00      	add	r7, sp, #0
    91e6:	4603      	mov	r3, r0
    91e8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    91ea:	79fb      	ldrb	r3, [r7, #7]
    91ec:	4618      	mov	r0, r3
    91ee:	4b2a      	ldr	r3, [pc, #168]	; (9298 <usb_d_cb_trans_setup+0xb8>)
    91f0:	4798      	blx	r3
    91f2:	4603      	mov	r3, r0
    91f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    91f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    91fa:	015b      	lsls	r3, r3, #5
    91fc:	4a27      	ldr	r2, [pc, #156]	; (929c <usb_d_cb_trans_setup+0xbc>)
    91fe:	4413      	add	r3, r2
    9200:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    9202:	693b      	ldr	r3, [r7, #16]
    9204:	330c      	adds	r3, #12
    9206:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    9208:	79fb      	ldrb	r3, [r7, #7]
    920a:	68f9      	ldr	r1, [r7, #12]
    920c:	4618      	mov	r0, r3
    920e:	4b24      	ldr	r3, [pc, #144]	; (92a0 <usb_d_cb_trans_setup+0xc0>)
    9210:	4798      	blx	r3
    9212:	4603      	mov	r3, r0
    9214:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    9216:	7afb      	ldrb	r3, [r7, #11]
    9218:	2b08      	cmp	r3, #8
    921a:	d00d      	beq.n	9238 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    921c:	79fb      	ldrb	r3, [r7, #7]
    921e:	2101      	movs	r1, #1
    9220:	4618      	mov	r0, r3
    9222:	4b20      	ldr	r3, [pc, #128]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    9224:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    9226:	79fb      	ldrb	r3, [r7, #7]
    9228:	f063 037f 	orn	r3, r3, #127	; 0x7f
    922c:	b2db      	uxtb	r3, r3
    922e:	2101      	movs	r1, #1
    9230:	4618      	mov	r0, r3
    9232:	4b1c      	ldr	r3, [pc, #112]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    9234:	4798      	blx	r3
		return;
    9236:	e02b      	b.n	9290 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    9238:	79fb      	ldrb	r3, [r7, #7]
    923a:	2100      	movs	r1, #0
    923c:	4618      	mov	r0, r3
    923e:	4b19      	ldr	r3, [pc, #100]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    9240:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    9242:	79fb      	ldrb	r3, [r7, #7]
    9244:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9248:	b2db      	uxtb	r3, r3
    924a:	2100      	movs	r1, #0
    924c:	4618      	mov	r0, r3
    924e:	4b15      	ldr	r3, [pc, #84]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    9250:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    9252:	693b      	ldr	r3, [r7, #16]
    9254:	2201      	movs	r2, #1
    9256:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    9258:	693b      	ldr	r3, [r7, #16]
    925a:	695b      	ldr	r3, [r3, #20]
    925c:	79fa      	ldrb	r2, [r7, #7]
    925e:	68f9      	ldr	r1, [r7, #12]
    9260:	4610      	mov	r0, r2
    9262:	4798      	blx	r3
    9264:	4603      	mov	r3, r0
    9266:	f083 0301 	eor.w	r3, r3, #1
    926a:	b2db      	uxtb	r3, r3
    926c:	2b00      	cmp	r3, #0
    926e:	d00f      	beq.n	9290 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    9270:	693b      	ldr	r3, [r7, #16]
    9272:	2205      	movs	r2, #5
    9274:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9276:	79fb      	ldrb	r3, [r7, #7]
    9278:	2101      	movs	r1, #1
    927a:	4618      	mov	r0, r3
    927c:	4b09      	ldr	r3, [pc, #36]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    927e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    9280:	79fb      	ldrb	r3, [r7, #7]
    9282:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9286:	b2db      	uxtb	r3, r3
    9288:	2101      	movs	r1, #1
    928a:	4618      	mov	r0, r3
    928c:	4b05      	ldr	r3, [pc, #20]	; (92a4 <usb_d_cb_trans_setup+0xc4>)
    928e:	4798      	blx	r3
	}
}
    9290:	3718      	adds	r7, #24
    9292:	46bd      	mov	sp, r7
    9294:	bd80      	pop	{r7, pc}
    9296:	bf00      	nop
    9298:	000090f1 	.word	0x000090f1
    929c:	200019d4 	.word	0x200019d4
    92a0:	00010fe5 	.word	0x00010fe5
    92a4:	00010e5d 	.word	0x00010e5d

000092a8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	b084      	sub	sp, #16
    92ac:	af00      	add	r7, sp, #0
    92ae:	4603      	mov	r3, r0
    92b0:	6039      	str	r1, [r7, #0]
    92b2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    92b4:	79fb      	ldrb	r3, [r7, #7]
    92b6:	4618      	mov	r0, r3
    92b8:	4b0d      	ldr	r3, [pc, #52]	; (92f0 <usb_d_cb_trans_more+0x48>)
    92ba:	4798      	blx	r3
    92bc:	4603      	mov	r3, r0
    92be:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    92c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    92c4:	015b      	lsls	r3, r3, #5
    92c6:	4a0b      	ldr	r2, [pc, #44]	; (92f4 <usb_d_cb_trans_more+0x4c>)
    92c8:	4413      	add	r3, r2
    92ca:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    92cc:	68bb      	ldr	r3, [r7, #8]
    92ce:	789b      	ldrb	r3, [r3, #2]
    92d0:	2b03      	cmp	r3, #3
    92d2:	d107      	bne.n	92e4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    92d4:	68bb      	ldr	r3, [r7, #8]
    92d6:	699b      	ldr	r3, [r3, #24]
    92d8:	79fa      	ldrb	r2, [r7, #7]
    92da:	6839      	ldr	r1, [r7, #0]
    92dc:	4610      	mov	r0, r2
    92de:	4798      	blx	r3
    92e0:	4603      	mov	r3, r0
    92e2:	e000      	b.n	92e6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    92e4:	2300      	movs	r3, #0
}
    92e6:	4618      	mov	r0, r3
    92e8:	3710      	adds	r7, #16
    92ea:	46bd      	mov	sp, r7
    92ec:	bd80      	pop	{r7, pc}
    92ee:	bf00      	nop
    92f0:	000090f1 	.word	0x000090f1
    92f4:	200019d4 	.word	0x200019d4

000092f8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    92f8:	b590      	push	{r4, r7, lr}
    92fa:	b087      	sub	sp, #28
    92fc:	af02      	add	r7, sp, #8
    92fe:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	789b      	ldrb	r3, [r3, #2]
    9304:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	7b1b      	ldrb	r3, [r3, #12]
    930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    930e:	2b00      	cmp	r3, #0
    9310:	bf14      	ite	ne
    9312:	2301      	movne	r3, #1
    9314:	2300      	moveq	r3, #0
    9316:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    9318:	7bfb      	ldrb	r3, [r7, #15]
    931a:	2b03      	cmp	r3, #3
    931c:	d13a      	bne.n	9394 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	69db      	ldr	r3, [r3, #28]
    9322:	687a      	ldr	r2, [r7, #4]
    9324:	7850      	ldrb	r0, [r2, #1]
    9326:	687a      	ldr	r2, [r7, #4]
    9328:	320c      	adds	r2, #12
    932a:	2101      	movs	r1, #1
    932c:	4798      	blx	r3
    932e:	4603      	mov	r3, r0
    9330:	737b      	strb	r3, [r7, #13]
		if (err) {
    9332:	7b7b      	ldrb	r3, [r7, #13]
    9334:	2b00      	cmp	r3, #0
    9336:	d015      	beq.n	9364 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	2205      	movs	r2, #5
    933c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	2202      	movs	r2, #2
    9342:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    9344:	7bbb      	ldrb	r3, [r7, #14]
    9346:	2b00      	cmp	r3, #0
    9348:	d002      	beq.n	9350 <usb_d_ctrl_trans_done+0x58>
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	785b      	ldrb	r3, [r3, #1]
    934e:	e004      	b.n	935a <usb_d_ctrl_trans_done+0x62>
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	785b      	ldrb	r3, [r3, #1]
    9354:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9358:	b2db      	uxtb	r3, r3
    935a:	2101      	movs	r1, #1
    935c:	4618      	mov	r0, r3
    935e:	4b15      	ldr	r3, [pc, #84]	; (93b4 <usb_d_ctrl_trans_done+0xbc>)
    9360:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    9362:	e022      	b.n	93aa <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	2204      	movs	r2, #4
    9368:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	7858      	ldrb	r0, [r3, #1]
    936e:	7bbb      	ldrb	r3, [r7, #14]
    9370:	2b00      	cmp	r3, #0
    9372:	bf14      	ite	ne
    9374:	2301      	movne	r3, #1
    9376:	2300      	moveq	r3, #0
    9378:	b2db      	uxtb	r3, r3
    937a:	f083 0301 	eor.w	r3, r3, #1
    937e:	b2db      	uxtb	r3, r3
    9380:	f003 0301 	and.w	r3, r3, #1
    9384:	b2d9      	uxtb	r1, r3
    9386:	2301      	movs	r3, #1
    9388:	9300      	str	r3, [sp, #0]
    938a:	2300      	movs	r3, #0
    938c:	2200      	movs	r2, #0
    938e:	4c0a      	ldr	r4, [pc, #40]	; (93b8 <usb_d_ctrl_trans_done+0xc0>)
    9390:	47a0      	blx	r4
}
    9392:	e00a      	b.n	93aa <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	69db      	ldr	r3, [r3, #28]
    9398:	687a      	ldr	r2, [r7, #4]
    939a:	7850      	ldrb	r0, [r2, #1]
    939c:	687a      	ldr	r2, [r7, #4]
    939e:	320c      	adds	r2, #12
    93a0:	2100      	movs	r1, #0
    93a2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	2202      	movs	r2, #2
    93a8:	709a      	strb	r2, [r3, #2]
}
    93aa:	bf00      	nop
    93ac:	3714      	adds	r7, #20
    93ae:	46bd      	mov	sp, r7
    93b0:	bd90      	pop	{r4, r7, pc}
    93b2:	bf00      	nop
    93b4:	00010e5d 	.word	0x00010e5d
    93b8:	00009171 	.word	0x00009171

000093bc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    93bc:	b580      	push	{r7, lr}
    93be:	b086      	sub	sp, #24
    93c0:	af00      	add	r7, sp, #0
    93c2:	4603      	mov	r3, r0
    93c4:	60b9      	str	r1, [r7, #8]
    93c6:	607a      	str	r2, [r7, #4]
    93c8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    93ca:	7bfb      	ldrb	r3, [r7, #15]
    93cc:	4618      	mov	r0, r3
    93ce:	4b2f      	ldr	r3, [pc, #188]	; (948c <_usb_d_cb_trans_done+0xd0>)
    93d0:	4798      	blx	r3
    93d2:	4603      	mov	r3, r0
    93d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    93d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    93da:	015b      	lsls	r3, r3, #5
    93dc:	4a2c      	ldr	r2, [pc, #176]	; (9490 <_usb_d_cb_trans_done+0xd4>)
    93de:	4413      	add	r3, r2
    93e0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    93e2:	68bb      	ldr	r3, [r7, #8]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d10e      	bne.n	9406 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    93e8:	693b      	ldr	r3, [r7, #16]
    93ea:	2200      	movs	r2, #0
    93ec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    93ee:	693b      	ldr	r3, [r7, #16]
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d103      	bne.n	93fe <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    93f6:	6938      	ldr	r0, [r7, #16]
    93f8:	4b26      	ldr	r3, [pc, #152]	; (9494 <_usb_d_cb_trans_done+0xd8>)
    93fa:	4798      	blx	r3
			return;
    93fc:	e043      	b.n	9486 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    93fe:	693b      	ldr	r3, [r7, #16]
    9400:	2201      	movs	r2, #1
    9402:	709a      	strb	r2, [r3, #2]
    9404:	e038      	b.n	9478 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    9406:	68bb      	ldr	r3, [r7, #8]
    9408:	2b01      	cmp	r3, #1
    940a:	d113      	bne.n	9434 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    940c:	693b      	ldr	r3, [r7, #16]
    940e:	2202      	movs	r2, #2
    9410:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9412:	693b      	ldr	r3, [r7, #16]
    9414:	781b      	ldrb	r3, [r3, #0]
    9416:	2b00      	cmp	r3, #0
    9418:	d108      	bne.n	942c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    941a:	693b      	ldr	r3, [r7, #16]
    941c:	2202      	movs	r2, #2
    941e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    9420:	7bfb      	ldrb	r3, [r7, #15]
    9422:	2100      	movs	r1, #0
    9424:	4618      	mov	r0, r3
    9426:	4b1c      	ldr	r3, [pc, #112]	; (9498 <_usb_d_cb_trans_done+0xdc>)
    9428:	4798      	blx	r3
    942a:	e025      	b.n	9478 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    942c:	693b      	ldr	r3, [r7, #16]
    942e:	2205      	movs	r2, #5
    9430:	709a      	strb	r2, [r3, #2]
    9432:	e021      	b.n	9478 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    9434:	68bb      	ldr	r3, [r7, #8]
    9436:	2b02      	cmp	r3, #2
    9438:	d10e      	bne.n	9458 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    943a:	693b      	ldr	r3, [r7, #16]
    943c:	2204      	movs	r2, #4
    943e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9440:	693b      	ldr	r3, [r7, #16]
    9442:	781b      	ldrb	r3, [r3, #0]
    9444:	2b00      	cmp	r3, #0
    9446:	d103      	bne.n	9450 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9448:	693b      	ldr	r3, [r7, #16]
    944a:	2202      	movs	r2, #2
    944c:	709a      	strb	r2, [r3, #2]
			return;
    944e:	e01a      	b.n	9486 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    9450:	693b      	ldr	r3, [r7, #16]
    9452:	2201      	movs	r2, #1
    9454:	709a      	strb	r2, [r3, #2]
    9456:	e00f      	b.n	9478 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    9458:	68bb      	ldr	r3, [r7, #8]
    945a:	2b03      	cmp	r3, #3
    945c:	d106      	bne.n	946c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    945e:	693b      	ldr	r3, [r7, #16]
    9460:	2200      	movs	r2, #0
    9462:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    9464:	693b      	ldr	r3, [r7, #16]
    9466:	2205      	movs	r2, #5
    9468:	70da      	strb	r2, [r3, #3]
    946a:	e005      	b.n	9478 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    946c:	693b      	ldr	r3, [r7, #16]
    946e:	2206      	movs	r2, #6
    9470:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    9472:	693b      	ldr	r3, [r7, #16]
    9474:	2206      	movs	r2, #6
    9476:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    9478:	693b      	ldr	r3, [r7, #16]
    947a:	69db      	ldr	r3, [r3, #28]
    947c:	693a      	ldr	r2, [r7, #16]
    947e:	78d1      	ldrb	r1, [r2, #3]
    9480:	687a      	ldr	r2, [r7, #4]
    9482:	7bf8      	ldrb	r0, [r7, #15]
    9484:	4798      	blx	r3
}
    9486:	3718      	adds	r7, #24
    9488:	46bd      	mov	sp, r7
    948a:	bd80      	pop	{r7, pc}
    948c:	000090f1 	.word	0x000090f1
    9490:	200019d4 	.word	0x200019d4
    9494:	000092f9 	.word	0x000092f9
    9498:	00010e5d 	.word	0x00010e5d

0000949c <usb_d_init>:

int32_t usb_d_init(void)
{
    949c:	b580      	push	{r7, lr}
    949e:	b082      	sub	sp, #8
    94a0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    94a2:	4b21      	ldr	r3, [pc, #132]	; (9528 <usb_d_init+0x8c>)
    94a4:	4798      	blx	r3
    94a6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    94a8:	683b      	ldr	r3, [r7, #0]
    94aa:	2b00      	cmp	r3, #0
    94ac:	da01      	bge.n	94b2 <usb_d_init+0x16>
		return rc;
    94ae:	683b      	ldr	r3, [r7, #0]
    94b0:	e036      	b.n	9520 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    94b2:	2280      	movs	r2, #128	; 0x80
    94b4:	2100      	movs	r1, #0
    94b6:	481d      	ldr	r0, [pc, #116]	; (952c <usb_d_init+0x90>)
    94b8:	4b1d      	ldr	r3, [pc, #116]	; (9530 <usb_d_init+0x94>)
    94ba:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    94bc:	2300      	movs	r3, #0
    94be:	71fb      	strb	r3, [r7, #7]
    94c0:	e01e      	b.n	9500 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    94c2:	79fb      	ldrb	r3, [r7, #7]
    94c4:	4a19      	ldr	r2, [pc, #100]	; (952c <usb_d_init+0x90>)
    94c6:	015b      	lsls	r3, r3, #5
    94c8:	4413      	add	r3, r2
    94ca:	3301      	adds	r3, #1
    94cc:	22ff      	movs	r2, #255	; 0xff
    94ce:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    94d0:	79fb      	ldrb	r3, [r7, #7]
    94d2:	4a16      	ldr	r2, [pc, #88]	; (952c <usb_d_init+0x90>)
    94d4:	015b      	lsls	r3, r3, #5
    94d6:	4413      	add	r3, r2
    94d8:	3314      	adds	r3, #20
    94da:	4a16      	ldr	r2, [pc, #88]	; (9534 <usb_d_init+0x98>)
    94dc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    94de:	79fb      	ldrb	r3, [r7, #7]
    94e0:	4a12      	ldr	r2, [pc, #72]	; (952c <usb_d_init+0x90>)
    94e2:	015b      	lsls	r3, r3, #5
    94e4:	4413      	add	r3, r2
    94e6:	3318      	adds	r3, #24
    94e8:	4a12      	ldr	r2, [pc, #72]	; (9534 <usb_d_init+0x98>)
    94ea:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    94ec:	79fb      	ldrb	r3, [r7, #7]
    94ee:	4a0f      	ldr	r2, [pc, #60]	; (952c <usb_d_init+0x90>)
    94f0:	015b      	lsls	r3, r3, #5
    94f2:	4413      	add	r3, r2
    94f4:	331c      	adds	r3, #28
    94f6:	4a0f      	ldr	r2, [pc, #60]	; (9534 <usb_d_init+0x98>)
    94f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    94fa:	79fb      	ldrb	r3, [r7, #7]
    94fc:	3301      	adds	r3, #1
    94fe:	71fb      	strb	r3, [r7, #7]
    9500:	79fb      	ldrb	r3, [r7, #7]
    9502:	2b03      	cmp	r3, #3
    9504:	d9dd      	bls.n	94c2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    9506:	490c      	ldr	r1, [pc, #48]	; (9538 <usb_d_init+0x9c>)
    9508:	2000      	movs	r0, #0
    950a:	4b0c      	ldr	r3, [pc, #48]	; (953c <usb_d_init+0xa0>)
    950c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    950e:	490c      	ldr	r1, [pc, #48]	; (9540 <usb_d_init+0xa4>)
    9510:	2001      	movs	r0, #1
    9512:	4b0a      	ldr	r3, [pc, #40]	; (953c <usb_d_init+0xa0>)
    9514:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    9516:	490b      	ldr	r1, [pc, #44]	; (9544 <usb_d_init+0xa8>)
    9518:	2002      	movs	r0, #2
    951a:	4b08      	ldr	r3, [pc, #32]	; (953c <usb_d_init+0xa0>)
    951c:	4798      	blx	r3
	return ERR_NONE;
    951e:	2300      	movs	r3, #0
}
    9520:	4618      	mov	r0, r3
    9522:	3708      	adds	r7, #8
    9524:	46bd      	mov	sp, r7
    9526:	bd80      	pop	{r7, pc}
    9528:	000106a5 	.word	0x000106a5
    952c:	200019d4 	.word	0x200019d4
    9530:	00014109 	.word	0x00014109
    9534:	000091c5 	.word	0x000091c5
    9538:	000091e1 	.word	0x000091e1
    953c:	00011299 	.word	0x00011299
    9540:	000092a9 	.word	0x000092a9
    9544:	000093bd 	.word	0x000093bd

00009548 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9548:	b580      	push	{r7, lr}
    954a:	b082      	sub	sp, #8
    954c:	af00      	add	r7, sp, #0
    954e:	4603      	mov	r3, r0
    9550:	6039      	str	r1, [r7, #0]
    9552:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    9554:	79fb      	ldrb	r3, [r7, #7]
    9556:	6839      	ldr	r1, [r7, #0]
    9558:	4618      	mov	r0, r3
    955a:	4b03      	ldr	r3, [pc, #12]	; (9568 <usb_d_register_callback+0x20>)
    955c:	4798      	blx	r3
}
    955e:	bf00      	nop
    9560:	3708      	adds	r7, #8
    9562:	46bd      	mov	sp, r7
    9564:	bd80      	pop	{r7, pc}
    9566:	bf00      	nop
    9568:	00011251 	.word	0x00011251

0000956c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    956c:	b580      	push	{r7, lr}
    956e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    9570:	4b02      	ldr	r3, [pc, #8]	; (957c <usb_d_enable+0x10>)
    9572:	4798      	blx	r3
    9574:	4603      	mov	r3, r0
}
    9576:	4618      	mov	r0, r3
    9578:	bd80      	pop	{r7, pc}
    957a:	bf00      	nop
    957c:	00010795 	.word	0x00010795

00009580 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    9580:	b580      	push	{r7, lr}
    9582:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    9584:	4b01      	ldr	r3, [pc, #4]	; (958c <usb_d_attach+0xc>)
    9586:	4798      	blx	r3
}
    9588:	bf00      	nop
    958a:	bd80      	pop	{r7, pc}
    958c:	00010819 	.word	0x00010819

00009590 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    9590:	b580      	push	{r7, lr}
    9592:	b082      	sub	sp, #8
    9594:	af00      	add	r7, sp, #0
    9596:	4603      	mov	r3, r0
    9598:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    959a:	79fb      	ldrb	r3, [r7, #7]
    959c:	4618      	mov	r0, r3
    959e:	4b03      	ldr	r3, [pc, #12]	; (95ac <usb_d_set_address+0x1c>)
    95a0:	4798      	blx	r3
}
    95a2:	bf00      	nop
    95a4:	3708      	adds	r7, #8
    95a6:	46bd      	mov	sp, r7
    95a8:	bd80      	pop	{r7, pc}
    95aa:	bf00      	nop
    95ac:	0001082d 	.word	0x0001082d

000095b0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    95b0:	b580      	push	{r7, lr}
    95b2:	b082      	sub	sp, #8
    95b4:	af00      	add	r7, sp, #0
    95b6:	4603      	mov	r3, r0
    95b8:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    95ba:	79fb      	ldrb	r3, [r7, #7]
    95bc:	b29b      	uxth	r3, r3
    95be:	461a      	mov	r2, r3
    95c0:	2100      	movs	r1, #0
    95c2:	2000      	movs	r0, #0
    95c4:	4b03      	ldr	r3, [pc, #12]	; (95d4 <usb_d_ep0_init+0x24>)
    95c6:	4798      	blx	r3
    95c8:	4603      	mov	r3, r0
}
    95ca:	4618      	mov	r0, r3
    95cc:	3708      	adds	r7, #8
    95ce:	46bd      	mov	sp, r7
    95d0:	bd80      	pop	{r7, pc}
    95d2:	bf00      	nop
    95d4:	000095d9 	.word	0x000095d9

000095d8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    95d8:	b580      	push	{r7, lr}
    95da:	b086      	sub	sp, #24
    95dc:	af00      	add	r7, sp, #0
    95de:	4603      	mov	r3, r0
    95e0:	71fb      	strb	r3, [r7, #7]
    95e2:	460b      	mov	r3, r1
    95e4:	71bb      	strb	r3, [r7, #6]
    95e6:	4613      	mov	r3, r2
    95e8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    95ea:	79fb      	ldrb	r3, [r7, #7]
    95ec:	4618      	mov	r0, r3
    95ee:	4b1e      	ldr	r3, [pc, #120]	; (9668 <usb_d_ep_init+0x90>)
    95f0:	4798      	blx	r3
    95f2:	4603      	mov	r3, r0
    95f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    95f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    95fa:	015b      	lsls	r3, r3, #5
    95fc:	4a1b      	ldr	r2, [pc, #108]	; (966c <usb_d_ep_init+0x94>)
    95fe:	4413      	add	r3, r2
    9600:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    9602:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9606:	2b00      	cmp	r3, #0
    9608:	db02      	blt.n	9610 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    960a:	f06f 0313 	mvn.w	r3, #19
    960e:	e027      	b.n	9660 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    9610:	20ff      	movs	r0, #255	; 0xff
    9612:	4b15      	ldr	r3, [pc, #84]	; (9668 <usb_d_ep_init+0x90>)
    9614:	4798      	blx	r3
    9616:	4603      	mov	r3, r0
    9618:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    961a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    961e:	2b00      	cmp	r3, #0
    9620:	da02      	bge.n	9628 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    9622:	f06f 0314 	mvn.w	r3, #20
    9626:	e01b      	b.n	9660 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    9628:	f997 3017 	ldrsb.w	r3, [r7, #23]
    962c:	015b      	lsls	r3, r3, #5
    962e:	4a0f      	ldr	r2, [pc, #60]	; (966c <usb_d_ep_init+0x94>)
    9630:	4413      	add	r3, r2
    9632:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    9634:	88ba      	ldrh	r2, [r7, #4]
    9636:	79b9      	ldrb	r1, [r7, #6]
    9638:	79fb      	ldrb	r3, [r7, #7]
    963a:	4618      	mov	r0, r3
    963c:	4b0c      	ldr	r3, [pc, #48]	; (9670 <usb_d_ep_init+0x98>)
    963e:	4798      	blx	r3
    9640:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    9642:	68fb      	ldr	r3, [r7, #12]
    9644:	2b00      	cmp	r3, #0
    9646:	da01      	bge.n	964c <usb_d_ep_init+0x74>
		return rc;
    9648:	68fb      	ldr	r3, [r7, #12]
    964a:	e009      	b.n	9660 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    964c:	693b      	ldr	r3, [r7, #16]
    964e:	79fa      	ldrb	r2, [r7, #7]
    9650:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    9652:	79bb      	ldrb	r3, [r7, #6]
    9654:	f003 0303 	and.w	r3, r3, #3
    9658:	b2da      	uxtb	r2, r3
    965a:	693b      	ldr	r3, [r7, #16]
    965c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    965e:	2300      	movs	r3, #0
}
    9660:	4618      	mov	r0, r3
    9662:	3718      	adds	r7, #24
    9664:	46bd      	mov	sp, r7
    9666:	bd80      	pop	{r7, pc}
    9668:	000090f1 	.word	0x000090f1
    966c:	200019d4 	.word	0x200019d4
    9670:	000108cd 	.word	0x000108cd

00009674 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    9674:	b580      	push	{r7, lr}
    9676:	b084      	sub	sp, #16
    9678:	af00      	add	r7, sp, #0
    967a:	4603      	mov	r3, r0
    967c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    967e:	79fb      	ldrb	r3, [r7, #7]
    9680:	4618      	mov	r0, r3
    9682:	4b0d      	ldr	r3, [pc, #52]	; (96b8 <usb_d_ep_deinit+0x44>)
    9684:	4798      	blx	r3
    9686:	4603      	mov	r3, r0
    9688:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    968a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    968e:	015b      	lsls	r3, r3, #5
    9690:	4a0a      	ldr	r2, [pc, #40]	; (96bc <usb_d_ep_deinit+0x48>)
    9692:	4413      	add	r3, r2
    9694:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    9696:	f997 300f 	ldrsb.w	r3, [r7, #15]
    969a:	2b00      	cmp	r3, #0
    969c:	db07      	blt.n	96ae <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    969e:	79fb      	ldrb	r3, [r7, #7]
    96a0:	4618      	mov	r0, r3
    96a2:	4b07      	ldr	r3, [pc, #28]	; (96c0 <usb_d_ep_deinit+0x4c>)
    96a4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    96a6:	68bb      	ldr	r3, [r7, #8]
    96a8:	22ff      	movs	r2, #255	; 0xff
    96aa:	705a      	strb	r2, [r3, #1]
    96ac:	e000      	b.n	96b0 <usb_d_ep_deinit+0x3c>
		return;
    96ae:	bf00      	nop
}
    96b0:	3710      	adds	r7, #16
    96b2:	46bd      	mov	sp, r7
    96b4:	bd80      	pop	{r7, pc}
    96b6:	bf00      	nop
    96b8:	000090f1 	.word	0x000090f1
    96bc:	200019d4 	.word	0x200019d4
    96c0:	00010a01 	.word	0x00010a01

000096c4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b086      	sub	sp, #24
    96c8:	af00      	add	r7, sp, #0
    96ca:	4603      	mov	r3, r0
    96cc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    96ce:	79fb      	ldrb	r3, [r7, #7]
    96d0:	4618      	mov	r0, r3
    96d2:	4b15      	ldr	r3, [pc, #84]	; (9728 <usb_d_ep_enable+0x64>)
    96d4:	4798      	blx	r3
    96d6:	4603      	mov	r3, r0
    96d8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    96da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    96de:	015b      	lsls	r3, r3, #5
    96e0:	4a12      	ldr	r2, [pc, #72]	; (972c <usb_d_ep_enable+0x68>)
    96e2:	4413      	add	r3, r2
    96e4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    96e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    96ea:	2b00      	cmp	r3, #0
    96ec:	da02      	bge.n	96f4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    96ee:	f06f 0311 	mvn.w	r3, #17
    96f2:	e014      	b.n	971e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    96f4:	693b      	ldr	r3, [r7, #16]
    96f6:	781b      	ldrb	r3, [r3, #0]
    96f8:	2b00      	cmp	r3, #0
    96fa:	d101      	bne.n	9700 <usb_d_ep_enable+0x3c>
    96fc:	2202      	movs	r2, #2
    96fe:	e000      	b.n	9702 <usb_d_ep_enable+0x3e>
    9700:	2201      	movs	r2, #1
    9702:	693b      	ldr	r3, [r7, #16]
    9704:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    9706:	79fb      	ldrb	r3, [r7, #7]
    9708:	4618      	mov	r0, r3
    970a:	4b09      	ldr	r3, [pc, #36]	; (9730 <usb_d_ep_enable+0x6c>)
    970c:	4798      	blx	r3
    970e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	2b00      	cmp	r3, #0
    9714:	da02      	bge.n	971c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    9716:	693b      	ldr	r3, [r7, #16]
    9718:	2200      	movs	r2, #0
    971a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    971c:	68fb      	ldr	r3, [r7, #12]
}
    971e:	4618      	mov	r0, r3
    9720:	3718      	adds	r7, #24
    9722:	46bd      	mov	sp, r7
    9724:	bd80      	pop	{r7, pc}
    9726:	bf00      	nop
    9728:	000090f1 	.word	0x000090f1
    972c:	200019d4 	.word	0x200019d4
    9730:	00010ae5 	.word	0x00010ae5

00009734 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    9734:	b590      	push	{r4, r7, lr}
    9736:	b08d      	sub	sp, #52	; 0x34
    9738:	af02      	add	r7, sp, #8
    973a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	7a1b      	ldrb	r3, [r3, #8]
    9740:	4618      	mov	r0, r3
    9742:	4b51      	ldr	r3, [pc, #324]	; (9888 <usb_d_ep_transfer+0x154>)
    9744:	4798      	blx	r3
    9746:	4603      	mov	r3, r0
    9748:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    974a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    974e:	015b      	lsls	r3, r3, #5
    9750:	4a4e      	ldr	r2, [pc, #312]	; (988c <usb_d_ep_transfer+0x158>)
    9752:	4413      	add	r3, r2
    9754:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    9756:	687b      	ldr	r3, [r7, #4]
    9758:	7a1b      	ldrb	r3, [r3, #8]
    975a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    975e:	2b00      	cmp	r3, #0
    9760:	bf14      	ite	ne
    9762:	2301      	movne	r3, #1
    9764:	2300      	moveq	r3, #0
    9766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    976a:	687b      	ldr	r3, [r7, #4]
    976c:	7a5b      	ldrb	r3, [r3, #9]
    976e:	2b00      	cmp	r3, #0
    9770:	bf14      	ite	ne
    9772:	2301      	movne	r3, #1
    9774:	2300      	moveq	r3, #0
    9776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	685b      	ldr	r3, [r3, #4]
    977e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    9780:	f997 301f 	ldrsb.w	r3, [r7, #31]
    9784:	2b00      	cmp	r3, #0
    9786:	da02      	bge.n	978e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    9788:	f06f 0311 	mvn.w	r3, #17
    978c:	e077      	b.n	987e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    978e:	f107 0308 	add.w	r3, r7, #8
    9792:	4618      	mov	r0, r3
    9794:	4b3e      	ldr	r3, [pc, #248]	; (9890 <usb_d_ep_transfer+0x15c>)
    9796:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    9798:	69bb      	ldr	r3, [r7, #24]
    979a:	789b      	ldrb	r3, [r3, #2]
    979c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    979e:	7bfb      	ldrb	r3, [r7, #15]
    97a0:	b2db      	uxtb	r3, r3
    97a2:	2b01      	cmp	r3, #1
    97a4:	d10c      	bne.n	97c0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    97a6:	69bb      	ldr	r3, [r7, #24]
    97a8:	2203      	movs	r2, #3
    97aa:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    97ac:	f107 0308 	add.w	r3, r7, #8
    97b0:	4618      	mov	r0, r3
    97b2:	4b38      	ldr	r3, [pc, #224]	; (9894 <usb_d_ep_transfer+0x160>)
    97b4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    97b6:	69bb      	ldr	r3, [r7, #24]
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	2b00      	cmp	r3, #0
    97bc:	d151      	bne.n	9862 <usb_d_ep_transfer+0x12e>
    97be:	e017      	b.n	97f0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    97c0:	f107 0308 	add.w	r3, r7, #8
    97c4:	4618      	mov	r0, r3
    97c6:	4b33      	ldr	r3, [pc, #204]	; (9894 <usb_d_ep_transfer+0x160>)
    97c8:	4798      	blx	r3
		switch (state) {
    97ca:	7bfb      	ldrb	r3, [r7, #15]
    97cc:	b2db      	uxtb	r3, r3
    97ce:	2b05      	cmp	r3, #5
    97d0:	d004      	beq.n	97dc <usb_d_ep_transfer+0xa8>
    97d2:	2b06      	cmp	r3, #6
    97d4:	d004      	beq.n	97e0 <usb_d_ep_transfer+0xac>
    97d6:	2b00      	cmp	r3, #0
    97d8:	d005      	beq.n	97e6 <usb_d_ep_transfer+0xb2>
    97da:	e007      	b.n	97ec <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    97dc:	2302      	movs	r3, #2
    97de:	e04e      	b.n	987e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    97e0:	f06f 030f 	mvn.w	r3, #15
    97e4:	e04b      	b.n	987e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    97e6:	f06f 0312 	mvn.w	r3, #18
    97ea:	e048      	b.n	987e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    97ec:	2301      	movs	r3, #1
    97ee:	e046      	b.n	987e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    97f0:	69bb      	ldr	r3, [r7, #24]
    97f2:	7c9b      	ldrb	r3, [r3, #18]
    97f4:	b29a      	uxth	r2, r3
    97f6:	69bb      	ldr	r3, [r7, #24]
    97f8:	7cdb      	ldrb	r3, [r3, #19]
    97fa:	b29b      	uxth	r3, r3
    97fc:	021b      	lsls	r3, r3, #8
    97fe:	b29b      	uxth	r3, r3
    9800:	4413      	add	r3, r2
    9802:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    9804:	8afb      	ldrh	r3, [r7, #22]
    9806:	2b00      	cmp	r3, #0
    9808:	d10b      	bne.n	9822 <usb_d_ep_transfer+0xee>
			dir                 = true;
    980a:	2301      	movs	r3, #1
    980c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    9810:	2300      	movs	r3, #0
    9812:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    9814:	2301      	movs	r3, #1
    9816:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    981a:	69bb      	ldr	r3, [r7, #24]
    981c:	2204      	movs	r2, #4
    981e:	709a      	strb	r2, [r3, #2]
    9820:	e01f      	b.n	9862 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    9822:	69bb      	ldr	r3, [r7, #24]
    9824:	7b1b      	ldrb	r3, [r3, #12]
    9826:	f003 0380 	and.w	r3, r3, #128	; 0x80
    982a:	2b00      	cmp	r3, #0
    982c:	bf14      	ite	ne
    982e:	2301      	movne	r3, #1
    9830:	2300      	moveq	r3, #0
    9832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    9836:	8afa      	ldrh	r2, [r7, #22]
    9838:	6a3b      	ldr	r3, [r7, #32]
    983a:	429a      	cmp	r2, r3
    983c:	d201      	bcs.n	9842 <usb_d_ep_transfer+0x10e>
				len = req_len;
    983e:	8afb      	ldrh	r3, [r7, #22]
    9840:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    9842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9846:	2b00      	cmp	r3, #0
    9848:	d008      	beq.n	985c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    984a:	8afa      	ldrh	r2, [r7, #22]
    984c:	6a3b      	ldr	r3, [r7, #32]
    984e:	429a      	cmp	r2, r3
    9850:	bf8c      	ite	hi
    9852:	2301      	movhi	r3, #1
    9854:	2300      	movls	r3, #0
    9856:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    985a:	e002      	b.n	9862 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    985c:	2300      	movs	r3, #0
    985e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9862:	687b      	ldr	r3, [r7, #4]
    9864:	7a18      	ldrb	r0, [r3, #8]
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	681a      	ldr	r2, [r3, #0]
    986a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    986e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    9872:	9300      	str	r3, [sp, #0]
    9874:	6a3b      	ldr	r3, [r7, #32]
    9876:	4c08      	ldr	r4, [pc, #32]	; (9898 <usb_d_ep_transfer+0x164>)
    9878:	47a0      	blx	r4
    987a:	6138      	str	r0, [r7, #16]
	return rc;
    987c:	693b      	ldr	r3, [r7, #16]
}
    987e:	4618      	mov	r0, r3
    9880:	372c      	adds	r7, #44	; 0x2c
    9882:	46bd      	mov	sp, r7
    9884:	bd90      	pop	{r4, r7, pc}
    9886:	bf00      	nop
    9888:	000090f1 	.word	0x000090f1
    988c:	200019d4 	.word	0x200019d4
    9890:	00011a05 	.word	0x00011a05
    9894:	00011a2b 	.word	0x00011a2b
    9898:	00009171 	.word	0x00009171

0000989c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    989c:	b580      	push	{r7, lr}
    989e:	b086      	sub	sp, #24
    98a0:	af00      	add	r7, sp, #0
    98a2:	4603      	mov	r3, r0
    98a4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    98a6:	79fb      	ldrb	r3, [r7, #7]
    98a8:	4618      	mov	r0, r3
    98aa:	4b1a      	ldr	r3, [pc, #104]	; (9914 <_usb_d_ep_halt_clr+0x78>)
    98ac:	4798      	blx	r3
    98ae:	4603      	mov	r3, r0
    98b0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    98b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    98b6:	015b      	lsls	r3, r3, #5
    98b8:	4a17      	ldr	r2, [pc, #92]	; (9918 <_usb_d_ep_halt_clr+0x7c>)
    98ba:	4413      	add	r3, r2
    98bc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    98be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    98c2:	2b00      	cmp	r3, #0
    98c4:	da02      	bge.n	98cc <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    98c6:	f06f 0311 	mvn.w	r3, #17
    98ca:	e01f      	b.n	990c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    98cc:	79fb      	ldrb	r3, [r7, #7]
    98ce:	2102      	movs	r1, #2
    98d0:	4618      	mov	r0, r3
    98d2:	4b12      	ldr	r3, [pc, #72]	; (991c <_usb_d_ep_halt_clr+0x80>)
    98d4:	4798      	blx	r3
    98d6:	4603      	mov	r3, r0
    98d8:	2b00      	cmp	r3, #0
    98da:	d016      	beq.n	990a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    98dc:	79fb      	ldrb	r3, [r7, #7]
    98de:	2100      	movs	r1, #0
    98e0:	4618      	mov	r0, r3
    98e2:	4b0e      	ldr	r3, [pc, #56]	; (991c <_usb_d_ep_halt_clr+0x80>)
    98e4:	4798      	blx	r3
    98e6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    98e8:	68fb      	ldr	r3, [r7, #12]
    98ea:	2b00      	cmp	r3, #0
    98ec:	da01      	bge.n	98f2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    98ee:	68fb      	ldr	r3, [r7, #12]
    98f0:	e00c      	b.n	990c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    98f2:	693b      	ldr	r3, [r7, #16]
    98f4:	2201      	movs	r2, #1
    98f6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    98f8:	693b      	ldr	r3, [r7, #16]
    98fa:	2203      	movs	r2, #3
    98fc:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    98fe:	693b      	ldr	r3, [r7, #16]
    9900:	69db      	ldr	r3, [r3, #28]
    9902:	79f8      	ldrb	r0, [r7, #7]
    9904:	2200      	movs	r2, #0
    9906:	2103      	movs	r1, #3
    9908:	4798      	blx	r3
	}
	return ERR_NONE;
    990a:	2300      	movs	r3, #0
}
    990c:	4618      	mov	r0, r3
    990e:	3718      	adds	r7, #24
    9910:	46bd      	mov	sp, r7
    9912:	bd80      	pop	{r7, pc}
    9914:	000090f1 	.word	0x000090f1
    9918:	200019d4 	.word	0x200019d4
    991c:	00010e5d 	.word	0x00010e5d

00009920 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    9920:	b580      	push	{r7, lr}
    9922:	b082      	sub	sp, #8
    9924:	af00      	add	r7, sp, #0
    9926:	4603      	mov	r3, r0
    9928:	460a      	mov	r2, r1
    992a:	71fb      	strb	r3, [r7, #7]
    992c:	4613      	mov	r3, r2
    992e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    9930:	79bb      	ldrb	r3, [r7, #6]
    9932:	2b00      	cmp	r3, #0
    9934:	d105      	bne.n	9942 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    9936:	79fb      	ldrb	r3, [r7, #7]
    9938:	4618      	mov	r0, r3
    993a:	4b0c      	ldr	r3, [pc, #48]	; (996c <usb_d_ep_halt+0x4c>)
    993c:	4798      	blx	r3
    993e:	4603      	mov	r3, r0
    9940:	e00f      	b.n	9962 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    9942:	79bb      	ldrb	r3, [r7, #6]
    9944:	2b01      	cmp	r3, #1
    9946:	d106      	bne.n	9956 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9948:	79fb      	ldrb	r3, [r7, #7]
    994a:	2101      	movs	r1, #1
    994c:	4618      	mov	r0, r3
    994e:	4b08      	ldr	r3, [pc, #32]	; (9970 <usb_d_ep_halt+0x50>)
    9950:	4798      	blx	r3
    9952:	4603      	mov	r3, r0
    9954:	e005      	b.n	9962 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    9956:	79fb      	ldrb	r3, [r7, #7]
    9958:	2102      	movs	r1, #2
    995a:	4618      	mov	r0, r3
    995c:	4b04      	ldr	r3, [pc, #16]	; (9970 <usb_d_ep_halt+0x50>)
    995e:	4798      	blx	r3
    9960:	4603      	mov	r3, r0
	}
}
    9962:	4618      	mov	r0, r3
    9964:	3708      	adds	r7, #8
    9966:	46bd      	mov	sp, r7
    9968:	bd80      	pop	{r7, pc}
    996a:	bf00      	nop
    996c:	0000989d 	.word	0x0000989d
    9970:	00010e5d 	.word	0x00010e5d

00009974 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    9974:	b580      	push	{r7, lr}
    9976:	b086      	sub	sp, #24
    9978:	af00      	add	r7, sp, #0
    997a:	4603      	mov	r3, r0
    997c:	603a      	str	r2, [r7, #0]
    997e:	71fb      	strb	r3, [r7, #7]
    9980:	460b      	mov	r3, r1
    9982:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    9984:	79fb      	ldrb	r3, [r7, #7]
    9986:	4618      	mov	r0, r3
    9988:	4b16      	ldr	r3, [pc, #88]	; (99e4 <usb_d_ep_register_callback+0x70>)
    998a:	4798      	blx	r3
    998c:	4603      	mov	r3, r0
    998e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    9990:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9994:	015b      	lsls	r3, r3, #5
    9996:	4a14      	ldr	r2, [pc, #80]	; (99e8 <usb_d_ep_register_callback+0x74>)
    9998:	4413      	add	r3, r2
    999a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    999c:	683b      	ldr	r3, [r7, #0]
    999e:	2b00      	cmp	r3, #0
    99a0:	d001      	beq.n	99a6 <usb_d_ep_register_callback+0x32>
    99a2:	683b      	ldr	r3, [r7, #0]
    99a4:	e000      	b.n	99a8 <usb_d_ep_register_callback+0x34>
    99a6:	4b11      	ldr	r3, [pc, #68]	; (99ec <usb_d_ep_register_callback+0x78>)
    99a8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    99aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    99ae:	2b00      	cmp	r3, #0
    99b0:	db13      	blt.n	99da <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    99b2:	79bb      	ldrb	r3, [r7, #6]
    99b4:	2b01      	cmp	r3, #1
    99b6:	d008      	beq.n	99ca <usb_d_ep_register_callback+0x56>
    99b8:	2b02      	cmp	r3, #2
    99ba:	d00a      	beq.n	99d2 <usb_d_ep_register_callback+0x5e>
    99bc:	2b00      	cmp	r3, #0
    99be:	d000      	beq.n	99c2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    99c0:	e00c      	b.n	99dc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    99c2:	693b      	ldr	r3, [r7, #16]
    99c4:	68fa      	ldr	r2, [r7, #12]
    99c6:	615a      	str	r2, [r3, #20]
		break;
    99c8:	e008      	b.n	99dc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    99ca:	693b      	ldr	r3, [r7, #16]
    99cc:	68fa      	ldr	r2, [r7, #12]
    99ce:	619a      	str	r2, [r3, #24]
		break;
    99d0:	e004      	b.n	99dc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    99d2:	693b      	ldr	r3, [r7, #16]
    99d4:	68fa      	ldr	r2, [r7, #12]
    99d6:	61da      	str	r2, [r3, #28]
		break;
    99d8:	e000      	b.n	99dc <usb_d_ep_register_callback+0x68>
		return;
    99da:	bf00      	nop
	}
}
    99dc:	3718      	adds	r7, #24
    99de:	46bd      	mov	sp, r7
    99e0:	bd80      	pop	{r7, pc}
    99e2:	bf00      	nop
    99e4:	000090f1 	.word	0x000090f1
    99e8:	200019d4 	.word	0x200019d4
    99ec:	000091c5 	.word	0x000091c5

000099f0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    99f0:	b480      	push	{r7}
    99f2:	b085      	sub	sp, #20
    99f4:	af00      	add	r7, sp, #0
    99f6:	4603      	mov	r3, r0
    99f8:	60b9      	str	r1, [r7, #8]
    99fa:	607a      	str	r2, [r7, #4]
    99fc:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    99fe:	7bfb      	ldrb	r3, [r7, #15]
    9a00:	f083 0301 	eor.w	r3, r3, #1
    9a04:	b2db      	uxtb	r3, r3
    9a06:	2b00      	cmp	r3, #0
    9a08:	d000      	beq.n	9a0c <assert+0x1c>
		__asm("BKPT #0");
    9a0a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    9a0c:	bf00      	nop
    9a0e:	3714      	adds	r7, #20
    9a10:	46bd      	mov	sp, r7
    9a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a16:	4770      	bx	lr

00009a18 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    9a18:	b480      	push	{r7}
    9a1a:	b085      	sub	sp, #20
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
    9a20:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	60fb      	str	r3, [r7, #12]
    9a28:	e008      	b.n	9a3c <is_list_element+0x24>
		if (it == element) {
    9a2a:	68fa      	ldr	r2, [r7, #12]
    9a2c:	683b      	ldr	r3, [r7, #0]
    9a2e:	429a      	cmp	r2, r3
    9a30:	d101      	bne.n	9a36 <is_list_element+0x1e>
			return true;
    9a32:	2301      	movs	r3, #1
    9a34:	e006      	b.n	9a44 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    9a36:	68fb      	ldr	r3, [r7, #12]
    9a38:	681b      	ldr	r3, [r3, #0]
    9a3a:	60fb      	str	r3, [r7, #12]
    9a3c:	68fb      	ldr	r3, [r7, #12]
    9a3e:	2b00      	cmp	r3, #0
    9a40:	d1f3      	bne.n	9a2a <is_list_element+0x12>
		}
	}

	return false;
    9a42:	2300      	movs	r3, #0
}
    9a44:	4618      	mov	r0, r3
    9a46:	3714      	adds	r7, #20
    9a48:	46bd      	mov	sp, r7
    9a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a4e:	4770      	bx	lr

00009a50 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    9a50:	b580      	push	{r7, lr}
    9a52:	b082      	sub	sp, #8
    9a54:	af00      	add	r7, sp, #0
    9a56:	6078      	str	r0, [r7, #4]
    9a58:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    9a5a:	6839      	ldr	r1, [r7, #0]
    9a5c:	6878      	ldr	r0, [r7, #4]
    9a5e:	4b0f      	ldr	r3, [pc, #60]	; (9a9c <list_insert_as_head+0x4c>)
    9a60:	4798      	blx	r3
    9a62:	4603      	mov	r3, r0
    9a64:	2b00      	cmp	r3, #0
    9a66:	bf14      	ite	ne
    9a68:	2301      	movne	r3, #1
    9a6a:	2300      	moveq	r3, #0
    9a6c:	b2db      	uxtb	r3, r3
    9a6e:	f083 0301 	eor.w	r3, r3, #1
    9a72:	b2db      	uxtb	r3, r3
    9a74:	f003 0301 	and.w	r3, r3, #1
    9a78:	b2db      	uxtb	r3, r3
    9a7a:	2239      	movs	r2, #57	; 0x39
    9a7c:	4908      	ldr	r1, [pc, #32]	; (9aa0 <list_insert_as_head+0x50>)
    9a7e:	4618      	mov	r0, r3
    9a80:	4b08      	ldr	r3, [pc, #32]	; (9aa4 <list_insert_as_head+0x54>)
    9a82:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    9a84:	687b      	ldr	r3, [r7, #4]
    9a86:	681a      	ldr	r2, [r3, #0]
    9a88:	683b      	ldr	r3, [r7, #0]
    9a8a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	683a      	ldr	r2, [r7, #0]
    9a90:	601a      	str	r2, [r3, #0]
}
    9a92:	bf00      	nop
    9a94:	3708      	adds	r7, #8
    9a96:	46bd      	mov	sp, r7
    9a98:	bd80      	pop	{r7, pc}
    9a9a:	bf00      	nop
    9a9c:	00009a19 	.word	0x00009a19
    9aa0:	00015074 	.word	0x00015074
    9aa4:	000099f1 	.word	0x000099f1

00009aa8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    9aa8:	b480      	push	{r7}
    9aaa:	b083      	sub	sp, #12
    9aac:	af00      	add	r7, sp, #0
    9aae:	6078      	str	r0, [r7, #4]
    9ab0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    9ab2:	687b      	ldr	r3, [r7, #4]
    9ab4:	681a      	ldr	r2, [r3, #0]
    9ab6:	683b      	ldr	r3, [r7, #0]
    9ab8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    9aba:	687b      	ldr	r3, [r7, #4]
    9abc:	683a      	ldr	r2, [r7, #0]
    9abe:	601a      	str	r2, [r3, #0]
}
    9ac0:	bf00      	nop
    9ac2:	370c      	adds	r7, #12
    9ac4:	46bd      	mov	sp, r7
    9ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aca:	4770      	bx	lr

00009acc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    9acc:	b580      	push	{r7, lr}
    9ace:	b084      	sub	sp, #16
    9ad0:	af00      	add	r7, sp, #0
    9ad2:	6078      	str	r0, [r7, #4]
    9ad4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    9ad6:	687b      	ldr	r3, [r7, #4]
    9ad8:	681b      	ldr	r3, [r3, #0]
    9ada:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    9adc:	6839      	ldr	r1, [r7, #0]
    9ade:	6878      	ldr	r0, [r7, #4]
    9ae0:	4b16      	ldr	r3, [pc, #88]	; (9b3c <list_insert_at_end+0x70>)
    9ae2:	4798      	blx	r3
    9ae4:	4603      	mov	r3, r0
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	bf14      	ite	ne
    9aea:	2301      	movne	r3, #1
    9aec:	2300      	moveq	r3, #0
    9aee:	b2db      	uxtb	r3, r3
    9af0:	f083 0301 	eor.w	r3, r3, #1
    9af4:	b2db      	uxtb	r3, r3
    9af6:	f003 0301 	and.w	r3, r3, #1
    9afa:	b2db      	uxtb	r3, r3
    9afc:	224f      	movs	r2, #79	; 0x4f
    9afe:	4910      	ldr	r1, [pc, #64]	; (9b40 <list_insert_at_end+0x74>)
    9b00:	4618      	mov	r0, r3
    9b02:	4b10      	ldr	r3, [pc, #64]	; (9b44 <list_insert_at_end+0x78>)
    9b04:	4798      	blx	r3

	if (!list->head) {
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d109      	bne.n	9b22 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	683a      	ldr	r2, [r7, #0]
    9b12:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    9b14:	683b      	ldr	r3, [r7, #0]
    9b16:	2200      	movs	r2, #0
    9b18:	601a      	str	r2, [r3, #0]
		return;
    9b1a:	e00c      	b.n	9b36 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    9b1c:	68fb      	ldr	r3, [r7, #12]
    9b1e:	681b      	ldr	r3, [r3, #0]
    9b20:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    9b22:	68fb      	ldr	r3, [r7, #12]
    9b24:	681b      	ldr	r3, [r3, #0]
    9b26:	2b00      	cmp	r3, #0
    9b28:	d1f8      	bne.n	9b1c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    9b2a:	68fb      	ldr	r3, [r7, #12]
    9b2c:	683a      	ldr	r2, [r7, #0]
    9b2e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    9b30:	683b      	ldr	r3, [r7, #0]
    9b32:	2200      	movs	r2, #0
    9b34:	601a      	str	r2, [r3, #0]
}
    9b36:	3710      	adds	r7, #16
    9b38:	46bd      	mov	sp, r7
    9b3a:	bd80      	pop	{r7, pc}
    9b3c:	00009a19 	.word	0x00009a19
    9b40:	00015074 	.word	0x00015074
    9b44:	000099f1 	.word	0x000099f1

00009b48 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    9b48:	b480      	push	{r7}
    9b4a:	b085      	sub	sp, #20
    9b4c:	af00      	add	r7, sp, #0
    9b4e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    9b50:	687b      	ldr	r3, [r7, #4]
    9b52:	681b      	ldr	r3, [r3, #0]
    9b54:	2b00      	cmp	r3, #0
    9b56:	d009      	beq.n	9b6c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	681b      	ldr	r3, [r3, #0]
    9b5c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	681b      	ldr	r3, [r3, #0]
    9b62:	681a      	ldr	r2, [r3, #0]
    9b64:	687b      	ldr	r3, [r7, #4]
    9b66:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    9b68:	68fb      	ldr	r3, [r7, #12]
    9b6a:	e000      	b.n	9b6e <list_remove_head+0x26>
	}

	return NULL;
    9b6c:	2300      	movs	r3, #0
}
    9b6e:	4618      	mov	r0, r3
    9b70:	3714      	adds	r7, #20
    9b72:	46bd      	mov	sp, r7
    9b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b78:	4770      	bx	lr

00009b7a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    9b7a:	b480      	push	{r7}
    9b7c:	b085      	sub	sp, #20
    9b7e:	af00      	add	r7, sp, #0
    9b80:	6078      	str	r0, [r7, #4]
    9b82:	6039      	str	r1, [r7, #0]
	if (!element) {
    9b84:	683b      	ldr	r3, [r7, #0]
    9b86:	2b00      	cmp	r3, #0
    9b88:	d101      	bne.n	9b8e <list_delete_element+0x14>
		return false;
    9b8a:	2300      	movs	r3, #0
    9b8c:	e024      	b.n	9bd8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    9b8e:	687b      	ldr	r3, [r7, #4]
    9b90:	681a      	ldr	r2, [r3, #0]
    9b92:	683b      	ldr	r3, [r7, #0]
    9b94:	429a      	cmp	r2, r3
    9b96:	d106      	bne.n	9ba6 <list_delete_element+0x2c>
		list->head = list->head->next;
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	681b      	ldr	r3, [r3, #0]
    9b9c:	681a      	ldr	r2, [r3, #0]
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	601a      	str	r2, [r3, #0]
		return true;
    9ba2:	2301      	movs	r3, #1
    9ba4:	e018      	b.n	9bd8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	681b      	ldr	r3, [r3, #0]
    9baa:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    9bac:	e002      	b.n	9bb4 <list_delete_element+0x3a>
			it = it->next;
    9bae:	68fb      	ldr	r3, [r7, #12]
    9bb0:	681b      	ldr	r3, [r3, #0]
    9bb2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    9bb4:	68fb      	ldr	r3, [r7, #12]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d004      	beq.n	9bc4 <list_delete_element+0x4a>
    9bba:	68fb      	ldr	r3, [r7, #12]
    9bbc:	681a      	ldr	r2, [r3, #0]
    9bbe:	683b      	ldr	r3, [r7, #0]
    9bc0:	429a      	cmp	r2, r3
    9bc2:	d1f4      	bne.n	9bae <list_delete_element+0x34>
		}
		if (it) {
    9bc4:	68fb      	ldr	r3, [r7, #12]
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d005      	beq.n	9bd6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    9bca:	683b      	ldr	r3, [r7, #0]
    9bcc:	681a      	ldr	r2, [r3, #0]
    9bce:	68fb      	ldr	r3, [r7, #12]
    9bd0:	601a      	str	r2, [r3, #0]
			return true;
    9bd2:	2301      	movs	r3, #1
    9bd4:	e000      	b.n	9bd8 <list_delete_element+0x5e>
		}
	}

	return false;
    9bd6:	2300      	movs	r3, #0
}
    9bd8:	4618      	mov	r0, r3
    9bda:	3714      	adds	r7, #20
    9bdc:	46bd      	mov	sp, r7
    9bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be2:	4770      	bx	lr

00009be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    9be4:	b480      	push	{r7}
    9be6:	b083      	sub	sp, #12
    9be8:	af00      	add	r7, sp, #0
    9bea:	4603      	mov	r3, r0
    9bec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	db0b      	blt.n	9c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9bf6:	4909      	ldr	r1, [pc, #36]	; (9c1c <__NVIC_EnableIRQ+0x38>)
    9bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9bfc:	095b      	lsrs	r3, r3, #5
    9bfe:	88fa      	ldrh	r2, [r7, #6]
    9c00:	f002 021f 	and.w	r2, r2, #31
    9c04:	2001      	movs	r0, #1
    9c06:	fa00 f202 	lsl.w	r2, r0, r2
    9c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    9c0e:	bf00      	nop
    9c10:	370c      	adds	r7, #12
    9c12:	46bd      	mov	sp, r7
    9c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c18:	4770      	bx	lr
    9c1a:	bf00      	nop
    9c1c:	e000e100 	.word	0xe000e100

00009c20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    9c20:	b480      	push	{r7}
    9c22:	b083      	sub	sp, #12
    9c24:	af00      	add	r7, sp, #0
    9c26:	4603      	mov	r3, r0
    9c28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	db10      	blt.n	9c54 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9c32:	490b      	ldr	r1, [pc, #44]	; (9c60 <__NVIC_DisableIRQ+0x40>)
    9c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9c38:	095b      	lsrs	r3, r3, #5
    9c3a:	88fa      	ldrh	r2, [r7, #6]
    9c3c:	f002 021f 	and.w	r2, r2, #31
    9c40:	2001      	movs	r0, #1
    9c42:	fa00 f202 	lsl.w	r2, r0, r2
    9c46:	3320      	adds	r3, #32
    9c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    9c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9c50:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    9c54:	bf00      	nop
    9c56:	370c      	adds	r7, #12
    9c58:	46bd      	mov	sp, r7
    9c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c5e:	4770      	bx	lr
    9c60:	e000e100 	.word	0xe000e100

00009c64 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    9c64:	b480      	push	{r7}
    9c66:	b083      	sub	sp, #12
    9c68:	af00      	add	r7, sp, #0
    9c6a:	4603      	mov	r3, r0
    9c6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9c72:	2b00      	cmp	r3, #0
    9c74:	db0c      	blt.n	9c90 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9c76:	4909      	ldr	r1, [pc, #36]	; (9c9c <__NVIC_ClearPendingIRQ+0x38>)
    9c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9c7c:	095b      	lsrs	r3, r3, #5
    9c7e:	88fa      	ldrh	r2, [r7, #6]
    9c80:	f002 021f 	and.w	r2, r2, #31
    9c84:	2001      	movs	r0, #1
    9c86:	fa00 f202 	lsl.w	r2, r0, r2
    9c8a:	3360      	adds	r3, #96	; 0x60
    9c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    9c90:	bf00      	nop
    9c92:	370c      	adds	r7, #12
    9c94:	46bd      	mov	sp, r7
    9c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c9a:	4770      	bx	lr
    9c9c:	e000e100 	.word	0xe000e100

00009ca0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    9ca0:	b480      	push	{r7}
    9ca2:	b083      	sub	sp, #12
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9cac:	095b      	lsrs	r3, r3, #5
    9cae:	f003 0301 	and.w	r3, r3, #1
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	bf14      	ite	ne
    9cb6:	2301      	movne	r3, #1
    9cb8:	2300      	moveq	r3, #0
    9cba:	b2db      	uxtb	r3, r3
}
    9cbc:	4618      	mov	r0, r3
    9cbe:	370c      	adds	r7, #12
    9cc0:	46bd      	mov	sp, r7
    9cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cc6:	4770      	bx	lr

00009cc8 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    9cc8:	b480      	push	{r7}
    9cca:	b083      	sub	sp, #12
    9ccc:	af00      	add	r7, sp, #0
    9cce:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    9cda:	4618      	mov	r0, r3
    9cdc:	370c      	adds	r7, #12
    9cde:	46bd      	mov	sp, r7
    9ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ce4:	4770      	bx	lr

00009ce6 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    9ce6:	b480      	push	{r7}
    9ce8:	b083      	sub	sp, #12
    9cea:	af00      	add	r7, sp, #0
    9cec:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    9cee:	687b      	ldr	r3, [r7, #4]
    9cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9cf4:	0a1b      	lsrs	r3, r3, #8
    9cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    9cfa:	4618      	mov	r0, r3
    9cfc:	370c      	adds	r7, #12
    9cfe:	46bd      	mov	sp, r7
    9d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d04:	4770      	bx	lr

00009d06 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    9d06:	b480      	push	{r7}
    9d08:	b083      	sub	sp, #12
    9d0a:	af00      	add	r7, sp, #0
    9d0c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    9d0e:	687b      	ldr	r3, [r7, #4]
    9d10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9d14:	0d5b      	lsrs	r3, r3, #21
    9d16:	f003 0301 	and.w	r3, r3, #1
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	bf14      	ite	ne
    9d1e:	2301      	movne	r3, #1
    9d20:	2300      	moveq	r3, #0
    9d22:	b2db      	uxtb	r3, r3
}
    9d24:	4618      	mov	r0, r3
    9d26:	370c      	adds	r7, #12
    9d28:	46bd      	mov	sp, r7
    9d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d2e:	4770      	bx	lr

00009d30 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    9d30:	b480      	push	{r7}
    9d32:	b083      	sub	sp, #12
    9d34:	af00      	add	r7, sp, #0
    9d36:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9d3e:	0c1b      	lsrs	r3, r3, #16
    9d40:	f003 031f 	and.w	r3, r3, #31
}
    9d44:	4618      	mov	r0, r3
    9d46:	370c      	adds	r7, #12
    9d48:	46bd      	mov	sp, r7
    9d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d4e:	4770      	bx	lr

00009d50 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    9d50:	b480      	push	{r7}
    9d52:	b083      	sub	sp, #12
    9d54:	af00      	add	r7, sp, #0
    9d56:	6078      	str	r0, [r7, #4]
    9d58:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    9d5a:	687b      	ldr	r3, [r7, #4]
    9d5c:	683a      	ldr	r2, [r7, #0]
    9d5e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9d60:	bf00      	nop
    9d62:	370c      	adds	r7, #12
    9d64:	46bd      	mov	sp, r7
    9d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d6a:	4770      	bx	lr

00009d6c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    9d6c:	b480      	push	{r7}
    9d6e:	b083      	sub	sp, #12
    9d70:	af00      	add	r7, sp, #0
    9d72:	6078      	str	r0, [r7, #4]
    9d74:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	683a      	ldr	r2, [r7, #0]
    9d7a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9d7c:	bf00      	nop
    9d7e:	370c      	adds	r7, #12
    9d80:	46bd      	mov	sp, r7
    9d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d86:	4770      	bx	lr

00009d88 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    9d88:	b480      	push	{r7}
    9d8a:	b083      	sub	sp, #12
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	699b      	ldr	r3, [r3, #24]
    9d94:	f043 0201 	orr.w	r2, r3, #1
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9d9c:	bf00      	nop
    9d9e:	370c      	adds	r7, #12
    9da0:	46bd      	mov	sp, r7
    9da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9da6:	4770      	bx	lr

00009da8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    9da8:	b480      	push	{r7}
    9daa:	b085      	sub	sp, #20
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	699b      	ldr	r3, [r3, #24]
    9db4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    9db6:	68fb      	ldr	r3, [r7, #12]
    9db8:	f003 0301 	and.w	r3, r3, #1
    9dbc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9dbe:	68fb      	ldr	r3, [r7, #12]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	bf14      	ite	ne
    9dc4:	2301      	movne	r3, #1
    9dc6:	2300      	moveq	r3, #0
    9dc8:	b2db      	uxtb	r3, r3
}
    9dca:	4618      	mov	r0, r3
    9dcc:	3714      	adds	r7, #20
    9dce:	46bd      	mov	sp, r7
    9dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd4:	4770      	bx	lr

00009dd6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    9dd6:	b480      	push	{r7}
    9dd8:	b083      	sub	sp, #12
    9dda:	af00      	add	r7, sp, #0
    9ddc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    9dde:	687b      	ldr	r3, [r7, #4]
    9de0:	699b      	ldr	r3, [r3, #24]
    9de2:	f023 0201 	bic.w	r2, r3, #1
    9de6:	687b      	ldr	r3, [r7, #4]
    9de8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9dea:	bf00      	nop
    9dec:	370c      	adds	r7, #12
    9dee:	46bd      	mov	sp, r7
    9df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9df4:	4770      	bx	lr

00009df6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    9df6:	b480      	push	{r7}
    9df8:	b083      	sub	sp, #12
    9dfa:	af00      	add	r7, sp, #0
    9dfc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	699b      	ldr	r3, [r3, #24]
    9e02:	f043 0202 	orr.w	r2, r3, #2
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9e0a:	bf00      	nop
    9e0c:	370c      	adds	r7, #12
    9e0e:	46bd      	mov	sp, r7
    9e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e14:	4770      	bx	lr

00009e16 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    9e16:	b480      	push	{r7}
    9e18:	b083      	sub	sp, #12
    9e1a:	af00      	add	r7, sp, #0
    9e1c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	699b      	ldr	r3, [r3, #24]
    9e22:	f023 0202 	bic.w	r2, r3, #2
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9e2a:	bf00      	nop
    9e2c:	370c      	adds	r7, #12
    9e2e:	46bd      	mov	sp, r7
    9e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e34:	4770      	bx	lr

00009e36 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    9e36:	b480      	push	{r7}
    9e38:	b085      	sub	sp, #20
    9e3a:	af00      	add	r7, sp, #0
    9e3c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    9e3e:	687b      	ldr	r3, [r7, #4]
    9e40:	699b      	ldr	r3, [r3, #24]
    9e42:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    9e44:	68fb      	ldr	r3, [r7, #12]
    9e46:	0a1b      	lsrs	r3, r3, #8
    9e48:	f003 0301 	and.w	r3, r3, #1
    9e4c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9e4e:	68fb      	ldr	r3, [r7, #12]
    9e50:	2b00      	cmp	r3, #0
    9e52:	bf14      	ite	ne
    9e54:	2301      	movne	r3, #1
    9e56:	2300      	moveq	r3, #0
    9e58:	b2db      	uxtb	r3, r3
}
    9e5a:	4618      	mov	r0, r3
    9e5c:	3714      	adds	r7, #20
    9e5e:	46bd      	mov	sp, r7
    9e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e64:	4770      	bx	lr

00009e66 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    9e66:	b480      	push	{r7}
    9e68:	b085      	sub	sp, #20
    9e6a:	af00      	add	r7, sp, #0
    9e6c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	699b      	ldr	r3, [r3, #24]
    9e72:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    9e74:	68fb      	ldr	r3, [r7, #12]
    9e76:	0a5b      	lsrs	r3, r3, #9
    9e78:	f003 0301 	and.w	r3, r3, #1
    9e7c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9e7e:	68fb      	ldr	r3, [r7, #12]
    9e80:	2b00      	cmp	r3, #0
    9e82:	bf14      	ite	ne
    9e84:	2301      	movne	r3, #1
    9e86:	2300      	moveq	r3, #0
    9e88:	b2db      	uxtb	r3, r3
}
    9e8a:	4618      	mov	r0, r3
    9e8c:	3714      	adds	r7, #20
    9e8e:	46bd      	mov	sp, r7
    9e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e94:	4770      	bx	lr

00009e96 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    9e96:	b480      	push	{r7}
    9e98:	b083      	sub	sp, #12
    9e9a:	af00      	add	r7, sp, #0
    9e9c:	6078      	str	r0, [r7, #4]
    9e9e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	699a      	ldr	r2, [r3, #24]
    9ea4:	683b      	ldr	r3, [r7, #0]
    9ea6:	431a      	orrs	r2, r3
    9ea8:	687b      	ldr	r3, [r7, #4]
    9eaa:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9eac:	bf00      	nop
    9eae:	370c      	adds	r7, #12
    9eb0:	46bd      	mov	sp, r7
    9eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eb6:	4770      	bx	lr

00009eb8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    9eb8:	b480      	push	{r7}
    9eba:	b083      	sub	sp, #12
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	6078      	str	r0, [r7, #4]
    9ec0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	683a      	ldr	r2, [r7, #0]
    9ec6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    9ec8:	bf00      	nop
    9eca:	370c      	adds	r7, #12
    9ecc:	46bd      	mov	sp, r7
    9ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ed2:	4770      	bx	lr

00009ed4 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    9ed4:	b480      	push	{r7}
    9ed6:	b083      	sub	sp, #12
    9ed8:	af00      	add	r7, sp, #0
    9eda:	6078      	str	r0, [r7, #4]
    9edc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	683a      	ldr	r2, [r7, #0]
    9ee2:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    9ee4:	bf00      	nop
    9ee6:	370c      	adds	r7, #12
    9ee8:	46bd      	mov	sp, r7
    9eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eee:	4770      	bx	lr

00009ef0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    9ef0:	b480      	push	{r7}
    9ef2:	b083      	sub	sp, #12
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    9efc:	4618      	mov	r0, r3
    9efe:	370c      	adds	r7, #12
    9f00:	46bd      	mov	sp, r7
    9f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f06:	4770      	bx	lr

00009f08 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    9f08:	b480      	push	{r7}
    9f0a:	b085      	sub	sp, #20
    9f0c:	af00      	add	r7, sp, #0
    9f0e:	6078      	str	r0, [r7, #4]
    9f10:	460b      	mov	r3, r1
    9f12:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9f18:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    9f1a:	68fb      	ldr	r3, [r7, #12]
    9f1c:	f023 0301 	bic.w	r3, r3, #1
    9f20:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    9f22:	78fb      	ldrb	r3, [r7, #3]
    9f24:	68fa      	ldr	r2, [r7, #12]
    9f26:	4313      	orrs	r3, r2
    9f28:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    9f2a:	687b      	ldr	r3, [r7, #4]
    9f2c:	68fa      	ldr	r2, [r7, #12]
    9f2e:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    9f30:	bf00      	nop
    9f32:	3714      	adds	r7, #20
    9f34:	46bd      	mov	sp, r7
    9f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f3a:	4770      	bx	lr

00009f3c <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    9f3c:	b480      	push	{r7}
    9f3e:	b085      	sub	sp, #20
    9f40:	af00      	add	r7, sp, #0
    9f42:	6078      	str	r0, [r7, #4]
    9f44:	460b      	mov	r3, r1
    9f46:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9f4c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    9f4e:	68fb      	ldr	r3, [r7, #12]
    9f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    9f54:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    9f56:	78fb      	ldrb	r3, [r7, #3]
    9f58:	025b      	lsls	r3, r3, #9
    9f5a:	461a      	mov	r2, r3
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	4313      	orrs	r3, r2
    9f60:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	68fa      	ldr	r2, [r7, #12]
    9f66:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    9f68:	bf00      	nop
    9f6a:	3714      	adds	r7, #20
    9f6c:	46bd      	mov	sp, r7
    9f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f72:	4770      	bx	lr

00009f74 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    9f74:	b480      	push	{r7}
    9f76:	b085      	sub	sp, #20
    9f78:	af00      	add	r7, sp, #0
    9f7a:	6078      	str	r0, [r7, #4]
    9f7c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9f82:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9f84:	68fa      	ldr	r2, [r7, #12]
    9f86:	683b      	ldr	r3, [r7, #0]
    9f88:	4013      	ands	r3, r2
    9f8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    9f8c:	68fb      	ldr	r3, [r7, #12]
}
    9f8e:	4618      	mov	r0, r3
    9f90:	3714      	adds	r7, #20
    9f92:	46bd      	mov	sp, r7
    9f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f98:	4770      	bx	lr

00009f9a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    9f9a:	b480      	push	{r7}
    9f9c:	b083      	sub	sp, #12
    9f9e:	af00      	add	r7, sp, #0
    9fa0:	6078      	str	r0, [r7, #4]
    9fa2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    9fa4:	687b      	ldr	r3, [r7, #4]
    9fa6:	683a      	ldr	r2, [r7, #0]
    9fa8:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    9faa:	bf00      	nop
    9fac:	370c      	adds	r7, #12
    9fae:	46bd      	mov	sp, r7
    9fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fb4:	4770      	bx	lr

00009fb6 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    9fb6:	b480      	push	{r7}
    9fb8:	b083      	sub	sp, #12
    9fba:	af00      	add	r7, sp, #0
    9fbc:	6078      	str	r0, [r7, #4]
    9fbe:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	683a      	ldr	r2, [r7, #0]
    9fc4:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    9fc6:	bf00      	nop
    9fc8:	370c      	adds	r7, #12
    9fca:	46bd      	mov	sp, r7
    9fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fd0:	4770      	bx	lr

00009fd2 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    9fd2:	b480      	push	{r7}
    9fd4:	b083      	sub	sp, #12
    9fd6:	af00      	add	r7, sp, #0
    9fd8:	6078      	str	r0, [r7, #4]
    9fda:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	683a      	ldr	r2, [r7, #0]
    9fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    9fe4:	bf00      	nop
    9fe6:	370c      	adds	r7, #12
    9fe8:	46bd      	mov	sp, r7
    9fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fee:	4770      	bx	lr

00009ff0 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    9ff0:	b480      	push	{r7}
    9ff2:	b083      	sub	sp, #12
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	6078      	str	r0, [r7, #4]
    9ff8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	683a      	ldr	r2, [r7, #0]
    9ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    a002:	bf00      	nop
    a004:	370c      	adds	r7, #12
    a006:	46bd      	mov	sp, r7
    a008:	f85d 7b04 	ldr.w	r7, [sp], #4
    a00c:	4770      	bx	lr

0000a00e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    a00e:	b480      	push	{r7}
    a010:	b083      	sub	sp, #12
    a012:	af00      	add	r7, sp, #0
    a014:	6078      	str	r0, [r7, #4]
    a016:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	683a      	ldr	r2, [r7, #0]
    a01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    a020:	bf00      	nop
    a022:	370c      	adds	r7, #12
    a024:	46bd      	mov	sp, r7
    a026:	f85d 7b04 	ldr.w	r7, [sp], #4
    a02a:	4770      	bx	lr

0000a02c <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    a02c:	b480      	push	{r7}
    a02e:	b083      	sub	sp, #12
    a030:	af00      	add	r7, sp, #0
    a032:	6078      	str	r0, [r7, #4]
    a034:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    a036:	687b      	ldr	r3, [r7, #4]
    a038:	683a      	ldr	r2, [r7, #0]
    a03a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    a03e:	bf00      	nop
    a040:	370c      	adds	r7, #12
    a042:	46bd      	mov	sp, r7
    a044:	f85d 7b04 	ldr.w	r7, [sp], #4
    a048:	4770      	bx	lr

0000a04a <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    a04a:	b480      	push	{r7}
    a04c:	b083      	sub	sp, #12
    a04e:	af00      	add	r7, sp, #0
    a050:	6078      	str	r0, [r7, #4]
    a052:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	683a      	ldr	r2, [r7, #0]
    a058:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    a05c:	bf00      	nop
    a05e:	370c      	adds	r7, #12
    a060:	46bd      	mov	sp, r7
    a062:	f85d 7b04 	ldr.w	r7, [sp], #4
    a066:	4770      	bx	lr

0000a068 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    a068:	b480      	push	{r7}
    a06a:	b085      	sub	sp, #20
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
    a070:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    a078:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    a07a:	68fb      	ldr	r3, [r7, #12]
    a07c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    a080:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    a082:	683b      	ldr	r3, [r7, #0]
    a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a088:	68fa      	ldr	r2, [r7, #12]
    a08a:	4313      	orrs	r3, r2
    a08c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    a08e:	687b      	ldr	r3, [r7, #4]
    a090:	68fa      	ldr	r2, [r7, #12]
    a092:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    a096:	bf00      	nop
    a098:	3714      	adds	r7, #20
    a09a:	46bd      	mov	sp, r7
    a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0a0:	4770      	bx	lr

0000a0a2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    a0a2:	b480      	push	{r7}
    a0a4:	b083      	sub	sp, #12
    a0a6:	af00      	add	r7, sp, #0
    a0a8:	6078      	str	r0, [r7, #4]
    a0aa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	683a      	ldr	r2, [r7, #0]
    a0b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    a0b4:	bf00      	nop
    a0b6:	370c      	adds	r7, #12
    a0b8:	46bd      	mov	sp, r7
    a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0be:	4770      	bx	lr

0000a0c0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    a0c0:	b480      	push	{r7}
    a0c2:	b083      	sub	sp, #12
    a0c4:	af00      	add	r7, sp, #0
    a0c6:	6078      	str	r0, [r7, #4]
    a0c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    a0ca:	687b      	ldr	r3, [r7, #4]
    a0cc:	683a      	ldr	r2, [r7, #0]
    a0ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    a0d2:	bf00      	nop
    a0d4:	370c      	adds	r7, #12
    a0d6:	46bd      	mov	sp, r7
    a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0dc:	4770      	bx	lr

0000a0de <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    a0de:	b480      	push	{r7}
    a0e0:	b083      	sub	sp, #12
    a0e2:	af00      	add	r7, sp, #0
    a0e4:	6078      	str	r0, [r7, #4]
    a0e6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	683a      	ldr	r2, [r7, #0]
    a0ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    a0f0:	bf00      	nop
    a0f2:	370c      	adds	r7, #12
    a0f4:	46bd      	mov	sp, r7
    a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0fa:	4770      	bx	lr

0000a0fc <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    a0fc:	b480      	push	{r7}
    a0fe:	b083      	sub	sp, #12
    a100:	af00      	add	r7, sp, #0
    a102:	6078      	str	r0, [r7, #4]
    a104:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    a106:	687b      	ldr	r3, [r7, #4]
    a108:	683a      	ldr	r2, [r7, #0]
    a10a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    a10e:	bf00      	nop
    a110:	370c      	adds	r7, #12
    a112:	46bd      	mov	sp, r7
    a114:	f85d 7b04 	ldr.w	r7, [sp], #4
    a118:	4770      	bx	lr

0000a11a <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    a11a:	b480      	push	{r7}
    a11c:	b083      	sub	sp, #12
    a11e:	af00      	add	r7, sp, #0
    a120:	6078      	str	r0, [r7, #4]
    a122:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    a124:	687b      	ldr	r3, [r7, #4]
    a126:	683a      	ldr	r2, [r7, #0]
    a128:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    a12c:	bf00      	nop
    a12e:	370c      	adds	r7, #12
    a130:	46bd      	mov	sp, r7
    a132:	f85d 7b04 	ldr.w	r7, [sp], #4
    a136:	4770      	bx	lr

0000a138 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    a138:	b480      	push	{r7}
    a13a:	b083      	sub	sp, #12
    a13c:	af00      	add	r7, sp, #0
    a13e:	6078      	str	r0, [r7, #4]
    a140:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	683a      	ldr	r2, [r7, #0]
    a146:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    a14a:	bf00      	nop
    a14c:	370c      	adds	r7, #12
    a14e:	46bd      	mov	sp, r7
    a150:	f85d 7b04 	ldr.w	r7, [sp], #4
    a154:	4770      	bx	lr
	...

0000a158 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    a158:	b580      	push	{r7, lr}
    a15a:	b082      	sub	sp, #8
    a15c:	af00      	add	r7, sp, #0
    a15e:	6078      	str	r0, [r7, #4]
    a160:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    a162:	687b      	ldr	r3, [r7, #4]
    a164:	683a      	ldr	r2, [r7, #0]
    a166:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    a168:	687b      	ldr	r3, [r7, #4]
    a16a:	681b      	ldr	r3, [r3, #0]
    a16c:	4618      	mov	r0, r3
    a16e:	4b56      	ldr	r3, [pc, #344]	; (a2c8 <_can_async_init+0x170>)
    a170:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    a172:	bf00      	nop
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	681b      	ldr	r3, [r3, #0]
    a178:	4618      	mov	r0, r3
    a17a:	4b54      	ldr	r3, [pc, #336]	; (a2cc <_can_async_init+0x174>)
    a17c:	4798      	blx	r3
    a17e:	4603      	mov	r3, r0
    a180:	f083 0301 	eor.w	r3, r3, #1
    a184:	b2db      	uxtb	r3, r3
    a186:	2b00      	cmp	r3, #0
    a188:	d1f4      	bne.n	a174 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    a18a:	687b      	ldr	r3, [r7, #4]
    a18c:	681b      	ldr	r3, [r3, #0]
    a18e:	4618      	mov	r0, r3
    a190:	4b4f      	ldr	r3, [pc, #316]	; (a2d0 <_can_async_init+0x178>)
    a192:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    a194:	683b      	ldr	r3, [r7, #0]
    a196:	4a4f      	ldr	r2, [pc, #316]	; (a2d4 <_can_async_init+0x17c>)
    a198:	4293      	cmp	r3, r2
    a19a:	d17c      	bne.n	a296 <_can_async_init+0x13e>
		_can1_dev    = dev;
    a19c:	4a4e      	ldr	r2, [pc, #312]	; (a2d8 <_can_async_init+0x180>)
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	4a4d      	ldr	r2, [pc, #308]	; (a2dc <_can_async_init+0x184>)
    a1a6:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	681b      	ldr	r3, [r3, #0]
    a1ac:	f44f 7100 	mov.w	r1, #512	; 0x200
    a1b0:	4618      	mov	r0, r3
    a1b2:	4b4b      	ldr	r3, [pc, #300]	; (a2e0 <_can_async_init+0x188>)
    a1b4:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	681b      	ldr	r3, [r3, #0]
    a1ba:	2102      	movs	r1, #2
    a1bc:	4618      	mov	r0, r3
    a1be:	4b49      	ldr	r3, [pc, #292]	; (a2e4 <_can_async_init+0x18c>)
    a1c0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	681b      	ldr	r3, [r3, #0]
    a1c6:	f640 2103 	movw	r1, #2563	; 0xa03
    a1ca:	4618      	mov	r0, r3
    a1cc:	4b46      	ldr	r3, [pc, #280]	; (a2e8 <_can_async_init+0x190>)
    a1ce:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	681b      	ldr	r3, [r3, #0]
    a1d4:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    a1d8:	4618      	mov	r0, r3
    a1da:	4b44      	ldr	r3, [pc, #272]	; (a2ec <_can_async_init+0x194>)
    a1dc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	681a      	ldr	r2, [r3, #0]
    a1e2:	4b43      	ldr	r3, [pc, #268]	; (a2f0 <_can_async_init+0x198>)
    a1e4:	b29b      	uxth	r3, r3
    a1e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a1ee:	4619      	mov	r1, r3
    a1f0:	4610      	mov	r0, r2
    a1f2:	4b40      	ldr	r3, [pc, #256]	; (a2f4 <_can_async_init+0x19c>)
    a1f4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    a1f6:	687b      	ldr	r3, [r7, #4]
    a1f8:	681b      	ldr	r3, [r3, #0]
    a1fa:	2107      	movs	r1, #7
    a1fc:	4618      	mov	r0, r3
    a1fe:	4b3e      	ldr	r3, [pc, #248]	; (a2f8 <_can_async_init+0x1a0>)
    a200:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	681b      	ldr	r3, [r3, #0]
    a206:	2107      	movs	r1, #7
    a208:	4618      	mov	r0, r3
    a20a:	4b3c      	ldr	r3, [pc, #240]	; (a2fc <_can_async_init+0x1a4>)
    a20c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	681a      	ldr	r2, [r3, #0]
    a212:	4b3b      	ldr	r3, [pc, #236]	; (a300 <_can_async_init+0x1a8>)
    a214:	b29b      	uxth	r3, r3
    a216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a21a:	4619      	mov	r1, r3
    a21c:	4610      	mov	r0, r2
    a21e:	4b39      	ldr	r3, [pc, #228]	; (a304 <_can_async_init+0x1ac>)
    a220:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	681a      	ldr	r2, [r3, #0]
    a226:	4b38      	ldr	r3, [pc, #224]	; (a308 <_can_async_init+0x1b0>)
    a228:	b29b      	uxth	r3, r3
    a22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a22e:	4619      	mov	r1, r3
    a230:	4610      	mov	r0, r2
    a232:	4b36      	ldr	r3, [pc, #216]	; (a30c <_can_async_init+0x1b4>)
    a234:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    a236:	687b      	ldr	r3, [r7, #4]
    a238:	681b      	ldr	r3, [r3, #0]
    a23a:	2108      	movs	r1, #8
    a23c:	4618      	mov	r0, r3
    a23e:	4b34      	ldr	r3, [pc, #208]	; (a310 <_can_async_init+0x1b8>)
    a240:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    a242:	687b      	ldr	r3, [r7, #4]
    a244:	681a      	ldr	r2, [r3, #0]
    a246:	4b33      	ldr	r3, [pc, #204]	; (a314 <_can_async_init+0x1bc>)
    a248:	b29b      	uxth	r3, r3
    a24a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    a24e:	4619      	mov	r1, r3
    a250:	4610      	mov	r0, r2
    a252:	4b31      	ldr	r3, [pc, #196]	; (a318 <_can_async_init+0x1c0>)
    a254:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	681a      	ldr	r2, [r3, #0]
    a25a:	4b30      	ldr	r3, [pc, #192]	; (a31c <_can_async_init+0x1c4>)
    a25c:	b29b      	uxth	r3, r3
    a25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a262:	4619      	mov	r1, r3
    a264:	4610      	mov	r0, r2
    a266:	4b2e      	ldr	r3, [pc, #184]	; (a320 <_can_async_init+0x1c8>)
    a268:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    a26a:	687b      	ldr	r3, [r7, #4]
    a26c:	681b      	ldr	r3, [r3, #0]
    a26e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    a272:	4618      	mov	r0, r3
    a274:	4b2b      	ldr	r3, [pc, #172]	; (a324 <_can_async_init+0x1cc>)
    a276:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    a278:	204f      	movs	r0, #79	; 0x4f
    a27a:	4b2b      	ldr	r3, [pc, #172]	; (a328 <_can_async_init+0x1d0>)
    a27c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    a27e:	204f      	movs	r0, #79	; 0x4f
    a280:	4b2a      	ldr	r3, [pc, #168]	; (a32c <_can_async_init+0x1d4>)
    a282:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    a284:	204f      	movs	r0, #79	; 0x4f
    a286:	4b2a      	ldr	r3, [pc, #168]	; (a330 <_can_async_init+0x1d8>)
    a288:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	681b      	ldr	r3, [r3, #0]
    a28e:	2101      	movs	r1, #1
    a290:	4618      	mov	r0, r3
    a292:	4b28      	ldr	r3, [pc, #160]	; (a334 <_can_async_init+0x1dc>)
    a294:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	4618      	mov	r0, r3
    a29c:	4b26      	ldr	r3, [pc, #152]	; (a338 <_can_async_init+0x1e0>)
    a29e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    a2a0:	687b      	ldr	r3, [r7, #4]
    a2a2:	681b      	ldr	r3, [r3, #0]
    a2a4:	4618      	mov	r0, r3
    a2a6:	4b25      	ldr	r3, [pc, #148]	; (a33c <_can_async_init+0x1e4>)
    a2a8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    a2aa:	bf00      	nop
    a2ac:	687b      	ldr	r3, [r7, #4]
    a2ae:	681b      	ldr	r3, [r3, #0]
    a2b0:	4618      	mov	r0, r3
    a2b2:	4b06      	ldr	r3, [pc, #24]	; (a2cc <_can_async_init+0x174>)
    a2b4:	4798      	blx	r3
    a2b6:	4603      	mov	r3, r0
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d1f7      	bne.n	a2ac <_can_async_init+0x154>
	};

	return ERR_NONE;
    a2bc:	2300      	movs	r3, #0
}
    a2be:	4618      	mov	r0, r3
    a2c0:	3708      	adds	r7, #8
    a2c2:	46bd      	mov	sp, r7
    a2c4:	bd80      	pop	{r7, pc}
    a2c6:	bf00      	nop
    a2c8:	00009d89 	.word	0x00009d89
    a2cc:	00009da9 	.word	0x00009da9
    a2d0:	00009df7 	.word	0x00009df7
    a2d4:	42000400 	.word	0x42000400
    a2d8:	20001af4 	.word	0x20001af4
    a2dc:	200003fc 	.word	0x200003fc
    a2e0:	00009e97 	.word	0x00009e97
    a2e4:	00009d51 	.word	0x00009d51
    a2e8:	00009eb9 	.word	0x00009eb9
    a2ec:	00009d6d 	.word	0x00009d6d
    a2f0:	20002670 	.word	0x20002670
    a2f4:	0000a04b 	.word	0x0000a04b
    a2f8:	0000a0a3 	.word	0x0000a0a3
    a2fc:	0000a0df 	.word	0x0000a0df
    a300:	20002628 	.word	0x20002628
    a304:	0000a0c1 	.word	0x0000a0c1
    a308:	20001a54 	.word	0x20001a54
    a30c:	0000a139 	.word	0x0000a139
    a310:	00009fd3 	.word	0x00009fd3
    a314:	20001a64 	.word	0x20001a64
    a318:	00009ff1 	.word	0x00009ff1
    a31c:	20001ae4 	.word	0x20001ae4
    a320:	0000a00f 	.word	0x0000a00f
    a324:	0000a02d 	.word	0x0000a02d
    a328:	00009c21 	.word	0x00009c21
    a32c:	00009c65 	.word	0x00009c65
    a330:	00009be5 	.word	0x00009be5
    a334:	00009fb7 	.word	0x00009fb7
    a338:	00009e17 	.word	0x00009e17
    a33c:	00009dd7 	.word	0x00009dd7

0000a340 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    a340:	b580      	push	{r7, lr}
    a342:	b082      	sub	sp, #8
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	681b      	ldr	r3, [r3, #0]
    a34c:	4618      	mov	r0, r3
    a34e:	4b03      	ldr	r3, [pc, #12]	; (a35c <_can_async_enable+0x1c>)
    a350:	4798      	blx	r3
	return ERR_NONE;
    a352:	2300      	movs	r3, #0
}
    a354:	4618      	mov	r0, r3
    a356:	3708      	adds	r7, #8
    a358:	46bd      	mov	sp, r7
    a35a:	bd80      	pop	{r7, pc}
    a35c:	00009dd7 	.word	0x00009dd7

0000a360 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    a360:	b590      	push	{r4, r7, lr}
    a362:	b089      	sub	sp, #36	; 0x24
    a364:	af00      	add	r7, sp, #0
    a366:	6078      	str	r0, [r7, #4]
    a368:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    a36a:	2300      	movs	r3, #0
    a36c:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    a36e:	687b      	ldr	r3, [r7, #4]
    a370:	681b      	ldr	r3, [r3, #0]
    a372:	4618      	mov	r0, r3
    a374:	4b37      	ldr	r3, [pc, #220]	; (a454 <_can_async_read+0xf4>)
    a376:	4798      	blx	r3
    a378:	4603      	mov	r3, r0
    a37a:	2b00      	cmp	r3, #0
    a37c:	d102      	bne.n	a384 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    a37e:	f06f 0309 	mvn.w	r3, #9
    a382:	e063      	b.n	a44c <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    a384:	687b      	ldr	r3, [r7, #4]
    a386:	681b      	ldr	r3, [r3, #0]
    a388:	4618      	mov	r0, r3
    a38a:	4b33      	ldr	r3, [pc, #204]	; (a458 <_can_async_read+0xf8>)
    a38c:	4798      	blx	r3
    a38e:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	681b      	ldr	r3, [r3, #0]
    a394:	4a31      	ldr	r2, [pc, #196]	; (a45c <_can_async_read+0xfc>)
    a396:	4293      	cmp	r3, r2
    a398:	d108      	bne.n	a3ac <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    a39a:	69ba      	ldr	r2, [r7, #24]
    a39c:	4613      	mov	r3, r2
    a39e:	00db      	lsls	r3, r3, #3
    a3a0:	4413      	add	r3, r2
    a3a2:	00db      	lsls	r3, r3, #3
    a3a4:	461a      	mov	r2, r3
    a3a6:	4b2e      	ldr	r3, [pc, #184]	; (a460 <_can_async_read+0x100>)
    a3a8:	4413      	add	r3, r2
    a3aa:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    a3ac:	69fb      	ldr	r3, [r7, #28]
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d102      	bne.n	a3b8 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    a3b2:	f06f 031b 	mvn.w	r3, #27
    a3b6:	e049      	b.n	a44c <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    a3b8:	69fb      	ldr	r3, [r7, #28]
    a3ba:	681b      	ldr	r3, [r3, #0]
    a3bc:	f3c3 7380 	ubfx	r3, r3, #30, #1
    a3c0:	b2db      	uxtb	r3, r3
    a3c2:	2b01      	cmp	r3, #1
    a3c4:	d10a      	bne.n	a3dc <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    a3c6:	683b      	ldr	r3, [r7, #0]
    a3c8:	2201      	movs	r2, #1
    a3ca:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    a3cc:	69fb      	ldr	r3, [r7, #28]
    a3ce:	681b      	ldr	r3, [r3, #0]
    a3d0:	f3c3 031c 	ubfx	r3, r3, #0, #29
    a3d4:	461a      	mov	r2, r3
    a3d6:	683b      	ldr	r3, [r7, #0]
    a3d8:	601a      	str	r2, [r3, #0]
    a3da:	e00a      	b.n	a3f2 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    a3dc:	683b      	ldr	r3, [r7, #0]
    a3de:	2200      	movs	r2, #0
    a3e0:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    a3e2:	69fb      	ldr	r3, [r7, #28]
    a3e4:	681b      	ldr	r3, [r3, #0]
    a3e6:	f3c3 031c 	ubfx	r3, r3, #0, #29
    a3ea:	149b      	asrs	r3, r3, #18
    a3ec:	461a      	mov	r2, r3
    a3ee:	683b      	ldr	r3, [r7, #0]
    a3f0:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    a3f2:	69fb      	ldr	r3, [r7, #28]
    a3f4:	681b      	ldr	r3, [r3, #0]
    a3f6:	f3c3 7340 	ubfx	r3, r3, #29, #1
    a3fa:	b2db      	uxtb	r3, r3
    a3fc:	2b01      	cmp	r3, #1
    a3fe:	d102      	bne.n	a406 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    a400:	683b      	ldr	r3, [r7, #0]
    a402:	2201      	movs	r2, #1
    a404:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    a406:	4b17      	ldr	r3, [pc, #92]	; (a464 <_can_async_read+0x104>)
    a408:	f107 0408 	add.w	r4, r7, #8
    a40c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a40e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    a412:	69fb      	ldr	r3, [r7, #28]
    a414:	685b      	ldr	r3, [r3, #4]
    a416:	f3c3 4303 	ubfx	r3, r3, #16, #4
    a41a:	b2db      	uxtb	r3, r3
    a41c:	f107 0220 	add.w	r2, r7, #32
    a420:	4413      	add	r3, r2
    a422:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    a426:	683b      	ldr	r3, [r7, #0]
    a428:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    a42a:	683b      	ldr	r3, [r7, #0]
    a42c:	6898      	ldr	r0, [r3, #8]
    a42e:	69fb      	ldr	r3, [r7, #28]
    a430:	f103 0108 	add.w	r1, r3, #8
    a434:	683b      	ldr	r3, [r7, #0]
    a436:	7b1b      	ldrb	r3, [r3, #12]
    a438:	461a      	mov	r2, r3
    a43a:	4b0b      	ldr	r3, [pc, #44]	; (a468 <_can_async_read+0x108>)
    a43c:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	681b      	ldr	r3, [r3, #0]
    a442:	69b9      	ldr	r1, [r7, #24]
    a444:	4618      	mov	r0, r3
    a446:	4b09      	ldr	r3, [pc, #36]	; (a46c <_can_async_read+0x10c>)
    a448:	4798      	blx	r3

	return ERR_NONE;
    a44a:	2300      	movs	r3, #0
}
    a44c:	4618      	mov	r0, r3
    a44e:	3724      	adds	r7, #36	; 0x24
    a450:	46bd      	mov	sp, r7
    a452:	bd90      	pop	{r4, r7, pc}
    a454:	00009cc9 	.word	0x00009cc9
    a458:	00009ce7 	.word	0x00009ce7
    a45c:	42000400 	.word	0x42000400
    a460:	20002670 	.word	0x20002670
    a464:	00015094 	.word	0x00015094
    a468:	00013fd5 	.word	0x00013fd5
    a46c:	0000a069 	.word	0x0000a069

0000a470 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    a470:	b590      	push	{r4, r7, lr}
    a472:	b085      	sub	sp, #20
    a474:	af00      	add	r7, sp, #0
    a476:	6078      	str	r0, [r7, #4]
    a478:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    a47a:	2300      	movs	r3, #0
    a47c:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	4618      	mov	r0, r3
    a484:	4b61      	ldr	r3, [pc, #388]	; (a60c <_can_async_write+0x19c>)
    a486:	4798      	blx	r3
    a488:	4603      	mov	r3, r0
    a48a:	2b00      	cmp	r3, #0
    a48c:	d002      	beq.n	a494 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    a48e:	f06f 031b 	mvn.w	r3, #27
    a492:	e0b7      	b.n	a604 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	681b      	ldr	r3, [r3, #0]
    a498:	4618      	mov	r0, r3
    a49a:	4b5d      	ldr	r3, [pc, #372]	; (a610 <_can_async_write+0x1a0>)
    a49c:	4798      	blx	r3
    a49e:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	681b      	ldr	r3, [r3, #0]
    a4a4:	4a5b      	ldr	r2, [pc, #364]	; (a614 <_can_async_write+0x1a4>)
    a4a6:	4293      	cmp	r3, r2
    a4a8:	d108      	bne.n	a4bc <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    a4aa:	68ba      	ldr	r2, [r7, #8]
    a4ac:	4613      	mov	r3, r2
    a4ae:	00db      	lsls	r3, r3, #3
    a4b0:	4413      	add	r3, r2
    a4b2:	00db      	lsls	r3, r3, #3
    a4b4:	461a      	mov	r2, r3
    a4b6:	4b58      	ldr	r3, [pc, #352]	; (a618 <_can_async_write+0x1a8>)
    a4b8:	4413      	add	r3, r2
    a4ba:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    a4bc:	68fb      	ldr	r3, [r7, #12]
    a4be:	2b00      	cmp	r3, #0
    a4c0:	d102      	bne.n	a4c8 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    a4c2:	f06f 031b 	mvn.w	r3, #27
    a4c6:	e09d      	b.n	a604 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    a4c8:	683b      	ldr	r3, [r7, #0]
    a4ca:	7b5b      	ldrb	r3, [r3, #13]
    a4cc:	2b01      	cmp	r3, #1
    a4ce:	d109      	bne.n	a4e4 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    a4d0:	683b      	ldr	r3, [r7, #0]
    a4d2:	681a      	ldr	r2, [r3, #0]
    a4d4:	68fb      	ldr	r3, [r7, #12]
    a4d6:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    a4d8:	68fa      	ldr	r2, [r7, #12]
    a4da:	6813      	ldr	r3, [r2, #0]
    a4dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a4e0:	6013      	str	r3, [r2, #0]
    a4e2:	e004      	b.n	a4ee <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    a4e4:	683b      	ldr	r3, [r7, #0]
    a4e6:	681b      	ldr	r3, [r3, #0]
    a4e8:	049a      	lsls	r2, r3, #18
    a4ea:	68fb      	ldr	r3, [r7, #12]
    a4ec:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    a4ee:	683b      	ldr	r3, [r7, #0]
    a4f0:	7b1b      	ldrb	r3, [r3, #12]
    a4f2:	2b08      	cmp	r3, #8
    a4f4:	d80a      	bhi.n	a50c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    a4f6:	683b      	ldr	r3, [r7, #0]
    a4f8:	7b1b      	ldrb	r3, [r3, #12]
    a4fa:	f003 030f 	and.w	r3, r3, #15
    a4fe:	b2d9      	uxtb	r1, r3
    a500:	68fa      	ldr	r2, [r7, #12]
    a502:	6853      	ldr	r3, [r2, #4]
    a504:	f361 4313 	bfi	r3, r1, #16, #4
    a508:	6053      	str	r3, [r2, #4]
    a50a:	e04a      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    a50c:	683b      	ldr	r3, [r7, #0]
    a50e:	7b1b      	ldrb	r3, [r3, #12]
    a510:	2b0c      	cmp	r3, #12
    a512:	d806      	bhi.n	a522 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    a514:	68fa      	ldr	r2, [r7, #12]
    a516:	6853      	ldr	r3, [r2, #4]
    a518:	2109      	movs	r1, #9
    a51a:	f361 4313 	bfi	r3, r1, #16, #4
    a51e:	6053      	str	r3, [r2, #4]
    a520:	e03f      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    a522:	683b      	ldr	r3, [r7, #0]
    a524:	7b1b      	ldrb	r3, [r3, #12]
    a526:	2b10      	cmp	r3, #16
    a528:	d806      	bhi.n	a538 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    a52a:	68fa      	ldr	r2, [r7, #12]
    a52c:	6853      	ldr	r3, [r2, #4]
    a52e:	210a      	movs	r1, #10
    a530:	f361 4313 	bfi	r3, r1, #16, #4
    a534:	6053      	str	r3, [r2, #4]
    a536:	e034      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    a538:	683b      	ldr	r3, [r7, #0]
    a53a:	7b1b      	ldrb	r3, [r3, #12]
    a53c:	2b14      	cmp	r3, #20
    a53e:	d806      	bhi.n	a54e <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    a540:	68fa      	ldr	r2, [r7, #12]
    a542:	6853      	ldr	r3, [r2, #4]
    a544:	210b      	movs	r1, #11
    a546:	f361 4313 	bfi	r3, r1, #16, #4
    a54a:	6053      	str	r3, [r2, #4]
    a54c:	e029      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    a54e:	683b      	ldr	r3, [r7, #0]
    a550:	7b1b      	ldrb	r3, [r3, #12]
    a552:	2b18      	cmp	r3, #24
    a554:	d806      	bhi.n	a564 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    a556:	68fa      	ldr	r2, [r7, #12]
    a558:	6853      	ldr	r3, [r2, #4]
    a55a:	210c      	movs	r1, #12
    a55c:	f361 4313 	bfi	r3, r1, #16, #4
    a560:	6053      	str	r3, [r2, #4]
    a562:	e01e      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    a564:	683b      	ldr	r3, [r7, #0]
    a566:	7b1b      	ldrb	r3, [r3, #12]
    a568:	2b20      	cmp	r3, #32
    a56a:	d806      	bhi.n	a57a <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    a56c:	68fa      	ldr	r2, [r7, #12]
    a56e:	6853      	ldr	r3, [r2, #4]
    a570:	210d      	movs	r1, #13
    a572:	f361 4313 	bfi	r3, r1, #16, #4
    a576:	6053      	str	r3, [r2, #4]
    a578:	e013      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    a57a:	683b      	ldr	r3, [r7, #0]
    a57c:	7b1b      	ldrb	r3, [r3, #12]
    a57e:	2b30      	cmp	r3, #48	; 0x30
    a580:	d806      	bhi.n	a590 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    a582:	68fa      	ldr	r2, [r7, #12]
    a584:	6853      	ldr	r3, [r2, #4]
    a586:	210e      	movs	r1, #14
    a588:	f361 4313 	bfi	r3, r1, #16, #4
    a58c:	6053      	str	r3, [r2, #4]
    a58e:	e008      	b.n	a5a2 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    a590:	683b      	ldr	r3, [r7, #0]
    a592:	7b1b      	ldrb	r3, [r3, #12]
    a594:	2b40      	cmp	r3, #64	; 0x40
    a596:	d804      	bhi.n	a5a2 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    a598:	68fa      	ldr	r2, [r7, #12]
    a59a:	6853      	ldr	r3, [r2, #4]
    a59c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    a5a0:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    a5a2:	687b      	ldr	r3, [r7, #4]
    a5a4:	681b      	ldr	r3, [r3, #0]
    a5a6:	4618      	mov	r0, r3
    a5a8:	4b1c      	ldr	r3, [pc, #112]	; (a61c <_can_async_write+0x1ac>)
    a5aa:	4798      	blx	r3
    a5ac:	4603      	mov	r3, r0
    a5ae:	4619      	mov	r1, r3
    a5b0:	68fa      	ldr	r2, [r7, #12]
    a5b2:	6853      	ldr	r3, [r2, #4]
    a5b4:	f361 5355 	bfi	r3, r1, #21, #1
    a5b8:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	681b      	ldr	r3, [r3, #0]
    a5be:	4618      	mov	r0, r3
    a5c0:	4b17      	ldr	r3, [pc, #92]	; (a620 <_can_async_write+0x1b0>)
    a5c2:	4798      	blx	r3
    a5c4:	4603      	mov	r3, r0
    a5c6:	4619      	mov	r1, r3
    a5c8:	68fa      	ldr	r2, [r7, #12]
    a5ca:	6853      	ldr	r3, [r2, #4]
    a5cc:	f361 5314 	bfi	r3, r1, #20, #1
    a5d0:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    a5d2:	68fb      	ldr	r3, [r7, #12]
    a5d4:	f103 0008 	add.w	r0, r3, #8
    a5d8:	683b      	ldr	r3, [r7, #0]
    a5da:	6899      	ldr	r1, [r3, #8]
    a5dc:	683b      	ldr	r3, [r7, #0]
    a5de:	7b1b      	ldrb	r3, [r3, #12]
    a5e0:	461a      	mov	r2, r3
    a5e2:	4b10      	ldr	r3, [pc, #64]	; (a624 <_can_async_write+0x1b4>)
    a5e4:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	681c      	ldr	r4, [r3, #0]
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	681b      	ldr	r3, [r3, #0]
    a5ee:	4618      	mov	r0, r3
    a5f0:	4b07      	ldr	r3, [pc, #28]	; (a610 <_can_async_write+0x1a0>)
    a5f2:	4798      	blx	r3
    a5f4:	4602      	mov	r2, r0
    a5f6:	2301      	movs	r3, #1
    a5f8:	4093      	lsls	r3, r2
    a5fa:	4619      	mov	r1, r3
    a5fc:	4620      	mov	r0, r4
    a5fe:	4b0a      	ldr	r3, [pc, #40]	; (a628 <_can_async_write+0x1b8>)
    a600:	4798      	blx	r3
	return ERR_NONE;
    a602:	2300      	movs	r3, #0
}
    a604:	4618      	mov	r0, r3
    a606:	3714      	adds	r7, #20
    a608:	46bd      	mov	sp, r7
    a60a:	bd90      	pop	{r4, r7, pc}
    a60c:	00009d07 	.word	0x00009d07
    a610:	00009d31 	.word	0x00009d31
    a614:	42000400 	.word	0x42000400
    a618:	20002628 	.word	0x20002628
    a61c:	00009e37 	.word	0x00009e37
    a620:	00009e67 	.word	0x00009e67
    a624:	00013fd5 	.word	0x00013fd5
    a628:	0000a0fd 	.word	0x0000a0fd

0000a62c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    a62c:	b580      	push	{r7, lr}
    a62e:	b084      	sub	sp, #16
    a630:	af00      	add	r7, sp, #0
    a632:	6078      	str	r0, [r7, #4]
    a634:	460b      	mov	r3, r1
    a636:	70fb      	strb	r3, [r7, #3]
    a638:	4613      	mov	r3, r2
    a63a:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    a63c:	78fb      	ldrb	r3, [r7, #3]
    a63e:	2b00      	cmp	r3, #0
    a640:	d107      	bne.n	a652 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    a642:	687b      	ldr	r3, [r7, #4]
    a644:	681b      	ldr	r3, [r3, #0]
    a646:	78ba      	ldrb	r2, [r7, #2]
    a648:	4611      	mov	r1, r2
    a64a:	4618      	mov	r0, r3
    a64c:	4b16      	ldr	r3, [pc, #88]	; (a6a8 <_can_async_set_irq_state+0x7c>)
    a64e:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    a650:	e026      	b.n	a6a0 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    a652:	78fb      	ldrb	r3, [r7, #3]
    a654:	2b01      	cmp	r3, #1
    a656:	d10e      	bne.n	a676 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    a658:	687b      	ldr	r3, [r7, #4]
    a65a:	681b      	ldr	r3, [r3, #0]
    a65c:	78ba      	ldrb	r2, [r7, #2]
    a65e:	4611      	mov	r1, r2
    a660:	4618      	mov	r0, r3
    a662:	4b12      	ldr	r3, [pc, #72]	; (a6ac <_can_async_set_irq_state+0x80>)
    a664:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	681b      	ldr	r3, [r3, #0]
    a66a:	f04f 31ff 	mov.w	r1, #4294967295
    a66e:	4618      	mov	r0, r3
    a670:	4b0f      	ldr	r3, [pc, #60]	; (a6b0 <_can_async_set_irq_state+0x84>)
    a672:	4798      	blx	r3
	return;
    a674:	e014      	b.n	a6a0 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    a676:	78fb      	ldrb	r3, [r7, #3]
    a678:	2b02      	cmp	r3, #2
    a67a:	d111      	bne.n	a6a0 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    a67c:	687b      	ldr	r3, [r7, #4]
    a67e:	681b      	ldr	r3, [r3, #0]
    a680:	f240 2101 	movw	r1, #513	; 0x201
    a684:	4618      	mov	r0, r3
    a686:	4b0b      	ldr	r3, [pc, #44]	; (a6b4 <_can_async_set_irq_state+0x88>)
    a688:	4798      	blx	r3
    a68a:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	681a      	ldr	r2, [r3, #0]
    a690:	68fb      	ldr	r3, [r7, #12]
    a692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    a696:	4619      	mov	r1, r3
    a698:	4610      	mov	r0, r2
    a69a:	4b07      	ldr	r3, [pc, #28]	; (a6b8 <_can_async_set_irq_state+0x8c>)
    a69c:	4798      	blx	r3
	return;
    a69e:	bf00      	nop
    a6a0:	bf00      	nop
}
    a6a2:	3710      	adds	r7, #16
    a6a4:	46bd      	mov	sp, r7
    a6a6:	bd80      	pop	{r7, pc}
    a6a8:	00009f09 	.word	0x00009f09
    a6ac:	00009f3d 	.word	0x00009f3d
    a6b0:	0000a11b 	.word	0x0000a11b
    a6b4:	00009f75 	.word	0x00009f75
    a6b8:	00009f9b 	.word	0x00009f9b

0000a6bc <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    a6bc:	b480      	push	{r7}
    a6be:	b087      	sub	sp, #28
    a6c0:	af00      	add	r7, sp, #0
    a6c2:	60f8      	str	r0, [r7, #12]
    a6c4:	607b      	str	r3, [r7, #4]
    a6c6:	460b      	mov	r3, r1
    a6c8:	72fb      	strb	r3, [r7, #11]
    a6ca:	4613      	mov	r3, r2
    a6cc:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    a6ce:	68fb      	ldr	r3, [r7, #12]
    a6d0:	699b      	ldr	r3, [r3, #24]
    a6d2:	68da      	ldr	r2, [r3, #12]
    a6d4:	7afb      	ldrb	r3, [r7, #11]
    a6d6:	009b      	lsls	r3, r3, #2
    a6d8:	4413      	add	r3, r2
    a6da:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    a6dc:	68fb      	ldr	r3, [r7, #12]
    a6de:	699b      	ldr	r3, [r3, #24]
    a6e0:	691a      	ldr	r2, [r3, #16]
    a6e2:	7afb      	ldrb	r3, [r7, #11]
    a6e4:	00db      	lsls	r3, r3, #3
    a6e6:	4413      	add	r3, r2
    a6e8:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    a6ea:	7abb      	ldrb	r3, [r7, #10]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d123      	bne.n	a738 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d104      	bne.n	a700 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    a6f6:	697b      	ldr	r3, [r7, #20]
    a6f8:	2200      	movs	r2, #0
    a6fa:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    a6fc:	2300      	movs	r3, #0
    a6fe:	e03b      	b.n	a778 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    a700:	687b      	ldr	r3, [r7, #4]
    a702:	685a      	ldr	r2, [r3, #4]
    a704:	697b      	ldr	r3, [r7, #20]
    a706:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    a708:	687b      	ldr	r3, [r7, #4]
    a70a:	681b      	ldr	r3, [r3, #0]
    a70c:	b29b      	uxth	r3, r3
    a70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    a712:	b299      	uxth	r1, r3
    a714:	697a      	ldr	r2, [r7, #20]
    a716:	6813      	ldr	r3, [r2, #0]
    a718:	f361 431a 	bfi	r3, r1, #16, #11
    a71c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    a71e:	697a      	ldr	r2, [r7, #20]
    a720:	6813      	ldr	r3, [r2, #0]
    a722:	2102      	movs	r1, #2
    a724:	f361 739f 	bfi	r3, r1, #30, #2
    a728:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    a72a:	697a      	ldr	r2, [r7, #20]
    a72c:	6813      	ldr	r3, [r2, #0]
    a72e:	2101      	movs	r1, #1
    a730:	f361 63dd 	bfi	r3, r1, #27, #3
    a734:	6013      	str	r3, [r2, #0]
    a736:	e01e      	b.n	a776 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    a738:	7abb      	ldrb	r3, [r7, #10]
    a73a:	2b01      	cmp	r3, #1
    a73c:	d11b      	bne.n	a776 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    a73e:	687b      	ldr	r3, [r7, #4]
    a740:	2b00      	cmp	r3, #0
    a742:	d104      	bne.n	a74e <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    a744:	693b      	ldr	r3, [r7, #16]
    a746:	2200      	movs	r2, #0
    a748:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    a74a:	2300      	movs	r3, #0
    a74c:	e014      	b.n	a778 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    a74e:	687b      	ldr	r3, [r7, #4]
    a750:	681a      	ldr	r2, [r3, #0]
    a752:	693b      	ldr	r3, [r7, #16]
    a754:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    a756:	693a      	ldr	r2, [r7, #16]
    a758:	6813      	ldr	r3, [r2, #0]
    a75a:	2101      	movs	r1, #1
    a75c:	f361 735f 	bfi	r3, r1, #29, #3
    a760:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	685a      	ldr	r2, [r3, #4]
    a766:	693b      	ldr	r3, [r7, #16]
    a768:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    a76a:	693a      	ldr	r2, [r7, #16]
    a76c:	6853      	ldr	r3, [r2, #4]
    a76e:	2102      	movs	r1, #2
    a770:	f361 739f 	bfi	r3, r1, #30, #2
    a774:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    a776:	2300      	movs	r3, #0
}
    a778:	4618      	mov	r0, r3
    a77a:	371c      	adds	r7, #28
    a77c:	46bd      	mov	sp, r7
    a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a782:	4770      	bx	lr

0000a784 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    a784:	b590      	push	{r4, r7, lr}
    a786:	b083      	sub	sp, #12
    a788:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    a78a:	4b2c      	ldr	r3, [pc, #176]	; (a83c <CAN1_Handler+0xb8>)
    a78c:	681b      	ldr	r3, [r3, #0]
    a78e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	681b      	ldr	r3, [r3, #0]
    a794:	4618      	mov	r0, r3
    a796:	4b2a      	ldr	r3, [pc, #168]	; (a840 <CAN1_Handler+0xbc>)
    a798:	4798      	blx	r3
    a79a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    a79c:	683b      	ldr	r3, [r7, #0]
    a79e:	f003 0301 	and.w	r3, r3, #1
    a7a2:	2b00      	cmp	r3, #0
    a7a4:	d003      	beq.n	a7ae <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	689b      	ldr	r3, [r3, #8]
    a7aa:	6878      	ldr	r0, [r7, #4]
    a7ac:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    a7ae:	683b      	ldr	r3, [r7, #0]
    a7b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d003      	beq.n	a7c0 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	685b      	ldr	r3, [r3, #4]
    a7bc:	6878      	ldr	r0, [r7, #4]
    a7be:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    a7c0:	683b      	ldr	r3, [r7, #0]
    a7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d004      	beq.n	a7d4 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	68db      	ldr	r3, [r3, #12]
    a7ce:	2103      	movs	r1, #3
    a7d0:	6878      	ldr	r0, [r7, #4]
    a7d2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    a7d4:	683b      	ldr	r3, [r7, #0]
    a7d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d004      	beq.n	a7e8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    a7de:	687b      	ldr	r3, [r7, #4]
    a7e0:	68db      	ldr	r3, [r3, #12]
    a7e2:	2100      	movs	r1, #0
    a7e4:	6878      	ldr	r0, [r7, #4]
    a7e6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    a7e8:	683b      	ldr	r3, [r7, #0]
    a7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d00f      	beq.n	a812 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    a7f2:	687b      	ldr	r3, [r7, #4]
    a7f4:	68dc      	ldr	r4, [r3, #12]
    a7f6:	687b      	ldr	r3, [r7, #4]
    a7f8:	681b      	ldr	r3, [r3, #0]
    a7fa:	4618      	mov	r0, r3
    a7fc:	4b11      	ldr	r3, [pc, #68]	; (a844 <CAN1_Handler+0xc0>)
    a7fe:	4798      	blx	r3
    a800:	4603      	mov	r3, r0
    a802:	2b00      	cmp	r3, #0
    a804:	d001      	beq.n	a80a <CAN1_Handler+0x86>
    a806:	2302      	movs	r3, #2
    a808:	e000      	b.n	a80c <CAN1_Handler+0x88>
    a80a:	2301      	movs	r3, #1
    a80c:	4619      	mov	r1, r3
    a80e:	6878      	ldr	r0, [r7, #4]
    a810:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    a812:	683b      	ldr	r3, [r7, #0]
    a814:	f003 0308 	and.w	r3, r3, #8
    a818:	2b00      	cmp	r3, #0
    a81a:	d004      	beq.n	a826 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	68db      	ldr	r3, [r3, #12]
    a820:	2104      	movs	r1, #4
    a822:	6878      	ldr	r0, [r7, #4]
    a824:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    a826:	687b      	ldr	r3, [r7, #4]
    a828:	681b      	ldr	r3, [r3, #0]
    a82a:	6839      	ldr	r1, [r7, #0]
    a82c:	4618      	mov	r0, r3
    a82e:	4b06      	ldr	r3, [pc, #24]	; (a848 <CAN1_Handler+0xc4>)
    a830:	4798      	blx	r3
}
    a832:	bf00      	nop
    a834:	370c      	adds	r7, #12
    a836:	46bd      	mov	sp, r7
    a838:	bd90      	pop	{r4, r7, pc}
    a83a:	bf00      	nop
    a83c:	20001af4 	.word	0x20001af4
    a840:	00009ef1 	.word	0x00009ef1
    a844:	00009ca1 	.word	0x00009ca1
    a848:	00009ed5 	.word	0x00009ed5

0000a84c <__NVIC_SetPendingIRQ>:
{
    a84c:	b480      	push	{r7}
    a84e:	b083      	sub	sp, #12
    a850:	af00      	add	r7, sp, #0
    a852:	4603      	mov	r3, r0
    a854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a85a:	2b00      	cmp	r3, #0
    a85c:	db0c      	blt.n	a878 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a85e:	4909      	ldr	r1, [pc, #36]	; (a884 <__NVIC_SetPendingIRQ+0x38>)
    a860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a864:	095b      	lsrs	r3, r3, #5
    a866:	88fa      	ldrh	r2, [r7, #6]
    a868:	f002 021f 	and.w	r2, r2, #31
    a86c:	2001      	movs	r0, #1
    a86e:	fa00 f202 	lsl.w	r2, r0, r2
    a872:	3340      	adds	r3, #64	; 0x40
    a874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a878:	bf00      	nop
    a87a:	370c      	adds	r7, #12
    a87c:	46bd      	mov	sp, r7
    a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a882:	4770      	bx	lr
    a884:	e000e100 	.word	0xe000e100

0000a888 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    a888:	b580      	push	{r7, lr}
    a88a:	b082      	sub	sp, #8
    a88c:	af00      	add	r7, sp, #0
    a88e:	4603      	mov	r3, r0
    a890:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    a892:	79fb      	ldrb	r3, [r7, #7]
    a894:	b21b      	sxth	r3, r3
    a896:	4618      	mov	r0, r3
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <_irq_set+0x1c>)
    a89a:	4798      	blx	r3
}
    a89c:	bf00      	nop
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	0000a84d 	.word	0x0000a84d

0000a8a8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    a8a8:	b480      	push	{r7}
    a8aa:	b083      	sub	sp, #12
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	4603      	mov	r3, r0
    a8b0:	6039      	str	r1, [r7, #0]
    a8b2:	80fb      	strh	r3, [r7, #6]
    a8b4:	4613      	mov	r3, r2
    a8b6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    a8b8:	797b      	ldrb	r3, [r7, #5]
    a8ba:	3b04      	subs	r3, #4
    a8bc:	2b05      	cmp	r3, #5
    a8be:	d86b      	bhi.n	a998 <_get_cycles_for_us_internal+0xf0>
    a8c0:	a201      	add	r2, pc, #4	; (adr r2, a8c8 <_get_cycles_for_us_internal+0x20>)
    a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a8c6:	bf00      	nop
    a8c8:	0000a977 	.word	0x0000a977
    a8cc:	0000a957 	.word	0x0000a957
    a8d0:	0000a939 	.word	0x0000a939
    a8d4:	0000a91b 	.word	0x0000a91b
    a8d8:	0000a8fd 	.word	0x0000a8fd
    a8dc:	0000a8e1 	.word	0x0000a8e1
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    a8e0:	88fb      	ldrh	r3, [r7, #6]
    a8e2:	683a      	ldr	r2, [r7, #0]
    a8e4:	4935      	ldr	r1, [pc, #212]	; (a9bc <_get_cycles_for_us_internal+0x114>)
    a8e6:	fba1 1202 	umull	r1, r2, r1, r2
    a8ea:	0c92      	lsrs	r2, r2, #18
    a8ec:	fb02 f303 	mul.w	r3, r2, r3
    a8f0:	3302      	adds	r3, #2
    a8f2:	4a33      	ldr	r2, [pc, #204]	; (a9c0 <_get_cycles_for_us_internal+0x118>)
    a8f4:	fba2 2303 	umull	r2, r3, r2, r3
    a8f8:	085b      	lsrs	r3, r3, #1
    a8fa:	e059      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    a8fc:	88fb      	ldrh	r3, [r7, #6]
    a8fe:	683a      	ldr	r2, [r7, #0]
    a900:	0952      	lsrs	r2, r2, #5
    a902:	4930      	ldr	r1, [pc, #192]	; (a9c4 <_get_cycles_for_us_internal+0x11c>)
    a904:	fba1 1202 	umull	r1, r2, r1, r2
    a908:	09d2      	lsrs	r2, r2, #7
    a90a:	fb02 f303 	mul.w	r3, r2, r3
    a90e:	331d      	adds	r3, #29
    a910:	4a2d      	ldr	r2, [pc, #180]	; (a9c8 <_get_cycles_for_us_internal+0x120>)
    a912:	fba2 2303 	umull	r2, r3, r2, r3
    a916:	091b      	lsrs	r3, r3, #4
    a918:	e04a      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    a91a:	88fb      	ldrh	r3, [r7, #6]
    a91c:	683a      	ldr	r2, [r7, #0]
    a91e:	492b      	ldr	r1, [pc, #172]	; (a9cc <_get_cycles_for_us_internal+0x124>)
    a920:	fba1 1202 	umull	r1, r2, r1, r2
    a924:	0b52      	lsrs	r2, r2, #13
    a926:	fb02 f303 	mul.w	r3, r2, r3
    a92a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    a92e:	4a28      	ldr	r2, [pc, #160]	; (a9d0 <_get_cycles_for_us_internal+0x128>)
    a930:	fba2 2303 	umull	r2, r3, r2, r3
    a934:	095b      	lsrs	r3, r3, #5
    a936:	e03b      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    a938:	88fb      	ldrh	r3, [r7, #6]
    a93a:	683a      	ldr	r2, [r7, #0]
    a93c:	4925      	ldr	r1, [pc, #148]	; (a9d4 <_get_cycles_for_us_internal+0x12c>)
    a93e:	fba1 1202 	umull	r1, r2, r1, r2
    a942:	0992      	lsrs	r2, r2, #6
    a944:	fb02 f303 	mul.w	r3, r2, r3
    a948:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    a94c:	4a22      	ldr	r2, [pc, #136]	; (a9d8 <_get_cycles_for_us_internal+0x130>)
    a94e:	fba2 2303 	umull	r2, r3, r2, r3
    a952:	099b      	lsrs	r3, r3, #6
    a954:	e02c      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    a956:	88fb      	ldrh	r3, [r7, #6]
    a958:	683a      	ldr	r2, [r7, #0]
    a95a:	4920      	ldr	r1, [pc, #128]	; (a9dc <_get_cycles_for_us_internal+0x134>)
    a95c:	fba1 1202 	umull	r1, r2, r1, r2
    a960:	0952      	lsrs	r2, r2, #5
    a962:	fb02 f303 	mul.w	r3, r2, r3
    a966:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    a96a:	332f      	adds	r3, #47	; 0x2f
    a96c:	4a1c      	ldr	r2, [pc, #112]	; (a9e0 <_get_cycles_for_us_internal+0x138>)
    a96e:	fba2 2303 	umull	r2, r3, r2, r3
    a972:	0b5b      	lsrs	r3, r3, #13
    a974:	e01c      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    a976:	88fb      	ldrh	r3, [r7, #6]
    a978:	683a      	ldr	r2, [r7, #0]
    a97a:	491a      	ldr	r1, [pc, #104]	; (a9e4 <_get_cycles_for_us_internal+0x13c>)
    a97c:	fba1 1202 	umull	r1, r2, r1, r2
    a980:	08d2      	lsrs	r2, r2, #3
    a982:	fb02 f303 	mul.w	r3, r2, r3
    a986:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    a98a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    a98e:	4a16      	ldr	r2, [pc, #88]	; (a9e8 <_get_cycles_for_us_internal+0x140>)
    a990:	fba2 2303 	umull	r2, r3, r2, r3
    a994:	0c5b      	lsrs	r3, r3, #17
    a996:	e00b      	b.n	a9b0 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    a998:	88fb      	ldrh	r3, [r7, #6]
    a99a:	683a      	ldr	r2, [r7, #0]
    a99c:	fb02 f303 	mul.w	r3, r2, r3
    a9a0:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    a9a4:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    a9a8:	4a10      	ldr	r2, [pc, #64]	; (a9ec <_get_cycles_for_us_internal+0x144>)
    a9aa:	fba2 2303 	umull	r2, r3, r2, r3
    a9ae:	0c9b      	lsrs	r3, r3, #18
	}
}
    a9b0:	4618      	mov	r0, r3
    a9b2:	370c      	adds	r7, #12
    a9b4:	46bd      	mov	sp, r7
    a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ba:	4770      	bx	lr
    a9bc:	431bde83 	.word	0x431bde83
    a9c0:	aaaaaaab 	.word	0xaaaaaaab
    a9c4:	0a7c5ac5 	.word	0x0a7c5ac5
    a9c8:	88888889 	.word	0x88888889
    a9cc:	d1b71759 	.word	0xd1b71759
    a9d0:	1b4e81b5 	.word	0x1b4e81b5
    a9d4:	10624dd3 	.word	0x10624dd3
    a9d8:	057619f1 	.word	0x057619f1
    a9dc:	51eb851f 	.word	0x51eb851f
    a9e0:	45e7b273 	.word	0x45e7b273
    a9e4:	cccccccd 	.word	0xcccccccd
    a9e8:	6fd91d85 	.word	0x6fd91d85
    a9ec:	165e9f81 	.word	0x165e9f81

0000a9f0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	b082      	sub	sp, #8
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	4603      	mov	r3, r0
    a9f8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    a9fa:	88fb      	ldrh	r3, [r7, #6]
    a9fc:	2209      	movs	r2, #9
    a9fe:	4904      	ldr	r1, [pc, #16]	; (aa10 <_get_cycles_for_us+0x20>)
    aa00:	4618      	mov	r0, r3
    aa02:	4b04      	ldr	r3, [pc, #16]	; (aa14 <_get_cycles_for_us+0x24>)
    aa04:	4798      	blx	r3
    aa06:	4603      	mov	r3, r0
}
    aa08:	4618      	mov	r0, r3
    aa0a:	3708      	adds	r7, #8
    aa0c:	46bd      	mov	sp, r7
    aa0e:	bd80      	pop	{r7, pc}
    aa10:	07270e00 	.word	0x07270e00
    aa14:	0000a8a9 	.word	0x0000a8a9

0000aa18 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    aa18:	b480      	push	{r7}
    aa1a:	b083      	sub	sp, #12
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	4603      	mov	r3, r0
    aa20:	6039      	str	r1, [r7, #0]
    aa22:	80fb      	strh	r3, [r7, #6]
    aa24:	4613      	mov	r3, r2
    aa26:	717b      	strb	r3, [r7, #5]
	switch (power) {
    aa28:	797b      	ldrb	r3, [r7, #5]
    aa2a:	3b04      	subs	r3, #4
    aa2c:	2b05      	cmp	r3, #5
    aa2e:	d870      	bhi.n	ab12 <_get_cycles_for_ms_internal+0xfa>
    aa30:	a201      	add	r2, pc, #4	; (adr r2, aa38 <_get_cycles_for_ms_internal+0x20>)
    aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aa36:	bf00      	nop
    aa38:	0000aaf5 	.word	0x0000aaf5
    aa3c:	0000aad9 	.word	0x0000aad9
    aa40:	0000aabd 	.word	0x0000aabd
    aa44:	0000aa99 	.word	0x0000aa99
    aa48:	0000aa75 	.word	0x0000aa75
    aa4c:	0000aa51 	.word	0x0000aa51
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    aa50:	88fb      	ldrh	r3, [r7, #6]
    aa52:	683a      	ldr	r2, [r7, #0]
    aa54:	4937      	ldr	r1, [pc, #220]	; (ab34 <_get_cycles_for_ms_internal+0x11c>)
    aa56:	fba1 1202 	umull	r1, r2, r1, r2
    aa5a:	0c92      	lsrs	r2, r2, #18
    aa5c:	fb02 f303 	mul.w	r3, r2, r3
    aa60:	3302      	adds	r3, #2
    aa62:	4a35      	ldr	r2, [pc, #212]	; (ab38 <_get_cycles_for_ms_internal+0x120>)
    aa64:	fba2 2303 	umull	r2, r3, r2, r3
    aa68:	085b      	lsrs	r3, r3, #1
    aa6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aa6e:	fb02 f303 	mul.w	r3, r2, r3
    aa72:	e058      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    aa74:	88fb      	ldrh	r3, [r7, #6]
    aa76:	683a      	ldr	r2, [r7, #0]
    aa78:	0952      	lsrs	r2, r2, #5
    aa7a:	4930      	ldr	r1, [pc, #192]	; (ab3c <_get_cycles_for_ms_internal+0x124>)
    aa7c:	fba1 1202 	umull	r1, r2, r1, r2
    aa80:	09d2      	lsrs	r2, r2, #7
    aa82:	fb02 f303 	mul.w	r3, r2, r3
    aa86:	3302      	adds	r3, #2
    aa88:	4a2b      	ldr	r2, [pc, #172]	; (ab38 <_get_cycles_for_ms_internal+0x120>)
    aa8a:	fba2 2303 	umull	r2, r3, r2, r3
    aa8e:	085b      	lsrs	r3, r3, #1
    aa90:	2264      	movs	r2, #100	; 0x64
    aa92:	fb02 f303 	mul.w	r3, r2, r3
    aa96:	e046      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    aa98:	88fb      	ldrh	r3, [r7, #6]
    aa9a:	683a      	ldr	r2, [r7, #0]
    aa9c:	4928      	ldr	r1, [pc, #160]	; (ab40 <_get_cycles_for_ms_internal+0x128>)
    aa9e:	fba1 1202 	umull	r1, r2, r1, r2
    aaa2:	0b52      	lsrs	r2, r2, #13
    aaa4:	fb02 f303 	mul.w	r3, r2, r3
    aaa8:	3302      	adds	r3, #2
    aaaa:	4a23      	ldr	r2, [pc, #140]	; (ab38 <_get_cycles_for_ms_internal+0x120>)
    aaac:	fba2 2303 	umull	r2, r3, r2, r3
    aab0:	085a      	lsrs	r2, r3, #1
    aab2:	4613      	mov	r3, r2
    aab4:	009b      	lsls	r3, r3, #2
    aab6:	4413      	add	r3, r2
    aab8:	005b      	lsls	r3, r3, #1
    aaba:	e034      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    aabc:	88fb      	ldrh	r3, [r7, #6]
    aabe:	683a      	ldr	r2, [r7, #0]
    aac0:	4920      	ldr	r1, [pc, #128]	; (ab44 <_get_cycles_for_ms_internal+0x12c>)
    aac2:	fba1 1202 	umull	r1, r2, r1, r2
    aac6:	0992      	lsrs	r2, r2, #6
    aac8:	fb02 f303 	mul.w	r3, r2, r3
    aacc:	3302      	adds	r3, #2
    aace:	4a1a      	ldr	r2, [pc, #104]	; (ab38 <_get_cycles_for_ms_internal+0x120>)
    aad0:	fba2 2303 	umull	r2, r3, r2, r3
    aad4:	085b      	lsrs	r3, r3, #1
    aad6:	e026      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    aad8:	88fb      	ldrh	r3, [r7, #6]
    aada:	683a      	ldr	r2, [r7, #0]
    aadc:	491a      	ldr	r1, [pc, #104]	; (ab48 <_get_cycles_for_ms_internal+0x130>)
    aade:	fba1 1202 	umull	r1, r2, r1, r2
    aae2:	0952      	lsrs	r2, r2, #5
    aae4:	fb02 f303 	mul.w	r3, r2, r3
    aae8:	331d      	adds	r3, #29
    aaea:	4a18      	ldr	r2, [pc, #96]	; (ab4c <_get_cycles_for_ms_internal+0x134>)
    aaec:	fba2 2303 	umull	r2, r3, r2, r3
    aaf0:	091b      	lsrs	r3, r3, #4
    aaf2:	e018      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    aaf4:	88fb      	ldrh	r3, [r7, #6]
    aaf6:	683a      	ldr	r2, [r7, #0]
    aaf8:	4915      	ldr	r1, [pc, #84]	; (ab50 <_get_cycles_for_ms_internal+0x138>)
    aafa:	fba1 1202 	umull	r1, r2, r1, r2
    aafe:	08d2      	lsrs	r2, r2, #3
    ab00:	fb02 f303 	mul.w	r3, r2, r3
    ab04:	f203 132b 	addw	r3, r3, #299	; 0x12b
    ab08:	4a12      	ldr	r2, [pc, #72]	; (ab54 <_get_cycles_for_ms_internal+0x13c>)
    ab0a:	fba2 2303 	umull	r2, r3, r2, r3
    ab0e:	095b      	lsrs	r3, r3, #5
    ab10:	e009      	b.n	ab26 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    ab12:	88fb      	ldrh	r3, [r7, #6]
    ab14:	683a      	ldr	r2, [r7, #0]
    ab16:	fb02 f303 	mul.w	r3, r2, r3
    ab1a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    ab1e:	4a0e      	ldr	r2, [pc, #56]	; (ab58 <_get_cycles_for_ms_internal+0x140>)
    ab20:	fba2 2303 	umull	r2, r3, r2, r3
    ab24:	099b      	lsrs	r3, r3, #6
	}
}
    ab26:	4618      	mov	r0, r3
    ab28:	370c      	adds	r7, #12
    ab2a:	46bd      	mov	sp, r7
    ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab30:	4770      	bx	lr
    ab32:	bf00      	nop
    ab34:	431bde83 	.word	0x431bde83
    ab38:	aaaaaaab 	.word	0xaaaaaaab
    ab3c:	0a7c5ac5 	.word	0x0a7c5ac5
    ab40:	d1b71759 	.word	0xd1b71759
    ab44:	10624dd3 	.word	0x10624dd3
    ab48:	51eb851f 	.word	0x51eb851f
    ab4c:	88888889 	.word	0x88888889
    ab50:	cccccccd 	.word	0xcccccccd
    ab54:	1b4e81b5 	.word	0x1b4e81b5
    ab58:	057619f1 	.word	0x057619f1

0000ab5c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	b082      	sub	sp, #8
    ab60:	af00      	add	r7, sp, #0
    ab62:	4603      	mov	r3, r0
    ab64:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    ab66:	88fb      	ldrh	r3, [r7, #6]
    ab68:	2209      	movs	r2, #9
    ab6a:	4904      	ldr	r1, [pc, #16]	; (ab7c <_get_cycles_for_ms+0x20>)
    ab6c:	4618      	mov	r0, r3
    ab6e:	4b04      	ldr	r3, [pc, #16]	; (ab80 <_get_cycles_for_ms+0x24>)
    ab70:	4798      	blx	r3
    ab72:	4603      	mov	r3, r0
}
    ab74:	4618      	mov	r0, r3
    ab76:	3708      	adds	r7, #8
    ab78:	46bd      	mov	sp, r7
    ab7a:	bd80      	pop	{r7, pc}
    ab7c:	07270e00 	.word	0x07270e00
    ab80:	0000aa19 	.word	0x0000aa19
    ab84:	00000000 	.word	0x00000000

0000ab88 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    ab88:	b480      	push	{r7}
    ab8a:	b083      	sub	sp, #12
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	6078      	str	r0, [r7, #4]
    ab90:	6039      	str	r1, [r7, #0]
    ab92:	bf00      	nop
    ab94:	f3af 8000 	nop.w

0000ab98 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    ab98:	3901      	subs	r1, #1
    ab9a:	d8fd      	bhi.n	ab98 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    ab9c:	bf00      	nop
    ab9e:	370c      	adds	r7, #12
    aba0:	46bd      	mov	sp, r7
    aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aba6:	4770      	bx	lr

0000aba8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    aba8:	b480      	push	{r7}
    abaa:	b083      	sub	sp, #12
    abac:	af00      	add	r7, sp, #0
    abae:	6078      	str	r0, [r7, #4]
    abb0:	460b      	mov	r3, r1
    abb2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    abb4:	687b      	ldr	r3, [r7, #4]
    abb6:	881b      	ldrh	r3, [r3, #0]
    abb8:	b29a      	uxth	r2, r3
    abba:	887b      	ldrh	r3, [r7, #2]
    abbc:	021b      	lsls	r3, r3, #8
    abbe:	b29b      	uxth	r3, r3
    abc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    abc4:	b29b      	uxth	r3, r3
    abc6:	4313      	orrs	r3, r2
    abc8:	b29a      	uxth	r2, r3
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    abce:	bf00      	nop
    abd0:	370c      	adds	r7, #12
    abd2:	46bd      	mov	sp, r7
    abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    abd8:	4770      	bx	lr

0000abda <hri_port_set_EVCTRL_reg>:
{
    abda:	b480      	push	{r7}
    abdc:	b085      	sub	sp, #20
    abde:	af00      	add	r7, sp, #0
    abe0:	60f8      	str	r0, [r7, #12]
    abe2:	460b      	mov	r3, r1
    abe4:	607a      	str	r2, [r7, #4]
    abe6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    abe8:	7afb      	ldrb	r3, [r7, #11]
    abea:	7afa      	ldrb	r2, [r7, #11]
    abec:	68f9      	ldr	r1, [r7, #12]
    abee:	01d2      	lsls	r2, r2, #7
    abf0:	440a      	add	r2, r1
    abf2:	322c      	adds	r2, #44	; 0x2c
    abf4:	6811      	ldr	r1, [r2, #0]
    abf6:	687a      	ldr	r2, [r7, #4]
    abf8:	430a      	orrs	r2, r1
    abfa:	68f9      	ldr	r1, [r7, #12]
    abfc:	01db      	lsls	r3, r3, #7
    abfe:	440b      	add	r3, r1
    ac00:	332c      	adds	r3, #44	; 0x2c
    ac02:	601a      	str	r2, [r3, #0]
}
    ac04:	bf00      	nop
    ac06:	3714      	adds	r7, #20
    ac08:	46bd      	mov	sp, r7
    ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac0e:	4770      	bx	lr

0000ac10 <_port_event_init>:

static inline void _port_event_init()
{
    ac10:	b580      	push	{r7, lr}
    ac12:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    ac14:	2200      	movs	r2, #0
    ac16:	2100      	movs	r1, #0
    ac18:	480a      	ldr	r0, [pc, #40]	; (ac44 <_port_event_init+0x34>)
    ac1a:	4b0b      	ldr	r3, [pc, #44]	; (ac48 <_port_event_init+0x38>)
    ac1c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    ac1e:	2200      	movs	r2, #0
    ac20:	2101      	movs	r1, #1
    ac22:	4808      	ldr	r0, [pc, #32]	; (ac44 <_port_event_init+0x34>)
    ac24:	4b08      	ldr	r3, [pc, #32]	; (ac48 <_port_event_init+0x38>)
    ac26:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    ac28:	f64e 72ef 	movw	r2, #61423	; 0xefef
    ac2c:	2102      	movs	r1, #2
    ac2e:	4805      	ldr	r0, [pc, #20]	; (ac44 <_port_event_init+0x34>)
    ac30:	4b05      	ldr	r3, [pc, #20]	; (ac48 <_port_event_init+0x38>)
    ac32:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    ac34:	2200      	movs	r2, #0
    ac36:	2103      	movs	r1, #3
    ac38:	4802      	ldr	r0, [pc, #8]	; (ac44 <_port_event_init+0x34>)
    ac3a:	4b03      	ldr	r3, [pc, #12]	; (ac48 <_port_event_init+0x38>)
    ac3c:	4798      	blx	r3
}
    ac3e:	bf00      	nop
    ac40:	bd80      	pop	{r7, pc}
    ac42:	bf00      	nop
    ac44:	41008000 	.word	0x41008000
    ac48:	0000abdb 	.word	0x0000abdb

0000ac4c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    ac50:	2104      	movs	r1, #4
    ac52:	480b      	ldr	r0, [pc, #44]	; (ac80 <_init_chip+0x34>)
    ac54:	4b0b      	ldr	r3, [pc, #44]	; (ac84 <_init_chip+0x38>)
    ac56:	4798      	blx	r3

	_osc32kctrl_init_sources();
    ac58:	4b0b      	ldr	r3, [pc, #44]	; (ac88 <_init_chip+0x3c>)
    ac5a:	4798      	blx	r3
	_oscctrl_init_sources();
    ac5c:	4b0b      	ldr	r3, [pc, #44]	; (ac8c <_init_chip+0x40>)
    ac5e:	4798      	blx	r3
	_mclk_init();
    ac60:	4b0b      	ldr	r3, [pc, #44]	; (ac90 <_init_chip+0x44>)
    ac62:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    ac64:	f44f 6084 	mov.w	r0, #1056	; 0x420
    ac68:	4b0a      	ldr	r3, [pc, #40]	; (ac94 <_init_chip+0x48>)
    ac6a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    ac6c:	4b0a      	ldr	r3, [pc, #40]	; (ac98 <_init_chip+0x4c>)
    ac6e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    ac70:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac74:	4b07      	ldr	r3, [pc, #28]	; (ac94 <_init_chip+0x48>)
    ac76:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    ac78:	4b08      	ldr	r3, [pc, #32]	; (ac9c <_init_chip+0x50>)
    ac7a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    ac7c:	bf00      	nop
    ac7e:	bd80      	pop	{r7, pc}
    ac80:	41004000 	.word	0x41004000
    ac84:	0000aba9 	.word	0x0000aba9
    ac88:	0000b69d 	.word	0x0000b69d
    ac8c:	0000bb65 	.word	0x0000bb65
    ac90:	0000b5bd 	.word	0x0000b5bd
    ac94:	0000b465 	.word	0x0000b465
    ac98:	0000bba5 	.word	0x0000bba5
    ac9c:	0000ac11 	.word	0x0000ac11

0000aca0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    aca0:	b480      	push	{r7}
    aca2:	b083      	sub	sp, #12
    aca4:	af00      	add	r7, sp, #0
    aca6:	6078      	str	r0, [r7, #4]
    aca8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	683a      	ldr	r2, [r7, #0]
    acae:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    acb0:	2300      	movs	r3, #0
}
    acb2:	4618      	mov	r0, r3
    acb4:	370c      	adds	r7, #12
    acb6:	46bd      	mov	sp, r7
    acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    acbc:	4770      	bx	lr
	...

0000acc0 <__NVIC_EnableIRQ>:
{
    acc0:	b480      	push	{r7}
    acc2:	b083      	sub	sp, #12
    acc4:	af00      	add	r7, sp, #0
    acc6:	4603      	mov	r3, r0
    acc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    acca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    acce:	2b00      	cmp	r3, #0
    acd0:	db0b      	blt.n	acea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    acd2:	4909      	ldr	r1, [pc, #36]	; (acf8 <__NVIC_EnableIRQ+0x38>)
    acd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    acd8:	095b      	lsrs	r3, r3, #5
    acda:	88fa      	ldrh	r2, [r7, #6]
    acdc:	f002 021f 	and.w	r2, r2, #31
    ace0:	2001      	movs	r0, #1
    ace2:	fa00 f202 	lsl.w	r2, r0, r2
    ace6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acea:	bf00      	nop
    acec:	370c      	adds	r7, #12
    acee:	46bd      	mov	sp, r7
    acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf4:	4770      	bx	lr
    acf6:	bf00      	nop
    acf8:	e000e100 	.word	0xe000e100

0000acfc <__NVIC_DisableIRQ>:
{
    acfc:	b480      	push	{r7}
    acfe:	b083      	sub	sp, #12
    ad00:	af00      	add	r7, sp, #0
    ad02:	4603      	mov	r3, r0
    ad04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	db10      	blt.n	ad30 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad0e:	490b      	ldr	r1, [pc, #44]	; (ad3c <__NVIC_DisableIRQ+0x40>)
    ad10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad14:	095b      	lsrs	r3, r3, #5
    ad16:	88fa      	ldrh	r2, [r7, #6]
    ad18:	f002 021f 	and.w	r2, r2, #31
    ad1c:	2001      	movs	r0, #1
    ad1e:	fa00 f202 	lsl.w	r2, r0, r2
    ad22:	3320      	adds	r3, #32
    ad24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ad28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ad2c:	f3bf 8f6f 	isb	sy
}
    ad30:	bf00      	nop
    ad32:	370c      	adds	r7, #12
    ad34:	46bd      	mov	sp, r7
    ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad3a:	4770      	bx	lr
    ad3c:	e000e100 	.word	0xe000e100

0000ad40 <__NVIC_ClearPendingIRQ>:
{
    ad40:	b480      	push	{r7}
    ad42:	b083      	sub	sp, #12
    ad44:	af00      	add	r7, sp, #0
    ad46:	4603      	mov	r3, r0
    ad48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	db0c      	blt.n	ad6c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad52:	4909      	ldr	r1, [pc, #36]	; (ad78 <__NVIC_ClearPendingIRQ+0x38>)
    ad54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad58:	095b      	lsrs	r3, r3, #5
    ad5a:	88fa      	ldrh	r2, [r7, #6]
    ad5c:	f002 021f 	and.w	r2, r2, #31
    ad60:	2001      	movs	r0, #1
    ad62:	fa00 f202 	lsl.w	r2, r0, r2
    ad66:	3360      	adds	r3, #96	; 0x60
    ad68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad6c:	bf00      	nop
    ad6e:	370c      	adds	r7, #12
    ad70:	46bd      	mov	sp, r7
    ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad76:	4770      	bx	lr
    ad78:	e000e100 	.word	0xe000e100

0000ad7c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    ad7c:	b480      	push	{r7}
    ad7e:	b083      	sub	sp, #12
    ad80:	af00      	add	r7, sp, #0
    ad82:	6078      	str	r0, [r7, #4]
    ad84:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    ad86:	bf00      	nop
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	685a      	ldr	r2, [r3, #4]
    ad8c:	683b      	ldr	r3, [r7, #0]
    ad8e:	4013      	ands	r3, r2
    ad90:	2b00      	cmp	r3, #0
    ad92:	d1f9      	bne.n	ad88 <hri_eic_wait_for_sync+0xc>
	};
}
    ad94:	bf00      	nop
    ad96:	370c      	adds	r7, #12
    ad98:	46bd      	mov	sp, r7
    ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad9e:	4770      	bx	lr

0000ada0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    ada0:	b480      	push	{r7}
    ada2:	b083      	sub	sp, #12
    ada4:	af00      	add	r7, sp, #0
    ada6:	6078      	str	r0, [r7, #4]
    ada8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    adaa:	687b      	ldr	r3, [r7, #4]
    adac:	685a      	ldr	r2, [r3, #4]
    adae:	683b      	ldr	r3, [r7, #0]
    adb0:	4013      	ands	r3, r2
    adb2:	2b00      	cmp	r3, #0
    adb4:	bf14      	ite	ne
    adb6:	2301      	movne	r3, #1
    adb8:	2300      	moveq	r3, #0
    adba:	b2db      	uxtb	r3, r3
}
    adbc:	4618      	mov	r0, r3
    adbe:	370c      	adds	r7, #12
    adc0:	46bd      	mov	sp, r7
    adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adc6:	4770      	bx	lr

0000adc8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    adc8:	b480      	push	{r7}
    adca:	b083      	sub	sp, #12
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    add0:	687b      	ldr	r3, [r7, #4]
    add2:	695b      	ldr	r3, [r3, #20]
}
    add4:	4618      	mov	r0, r3
    add6:	370c      	adds	r7, #12
    add8:	46bd      	mov	sp, r7
    adda:	f85d 7b04 	ldr.w	r7, [sp], #4
    adde:	4770      	bx	lr

0000ade0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    ade0:	b480      	push	{r7}
    ade2:	b083      	sub	sp, #12
    ade4:	af00      	add	r7, sp, #0
    ade6:	6078      	str	r0, [r7, #4]
    ade8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	683a      	ldr	r2, [r7, #0]
    adee:	615a      	str	r2, [r3, #20]
}
    adf0:	bf00      	nop
    adf2:	370c      	adds	r7, #12
    adf4:	46bd      	mov	sp, r7
    adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    adfa:	4770      	bx	lr

0000adfc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    adfc:	b580      	push	{r7, lr}
    adfe:	b082      	sub	sp, #8
    ae00:	af00      	add	r7, sp, #0
    ae02:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	b2db      	uxtb	r3, r3
    ae0a:	f043 0302 	orr.w	r3, r3, #2
    ae0e:	b2da      	uxtb	r2, r3
    ae10:	687b      	ldr	r3, [r7, #4]
    ae12:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    ae14:	2103      	movs	r1, #3
    ae16:	6878      	ldr	r0, [r7, #4]
    ae18:	4b02      	ldr	r3, [pc, #8]	; (ae24 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    ae1a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    ae1c:	bf00      	nop
    ae1e:	3708      	adds	r7, #8
    ae20:	46bd      	mov	sp, r7
    ae22:	bd80      	pop	{r7, pc}
    ae24:	0000ad7d 	.word	0x0000ad7d

0000ae28 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ae28:	b580      	push	{r7, lr}
    ae2a:	b082      	sub	sp, #8
    ae2c:	af00      	add	r7, sp, #0
    ae2e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    ae30:	687b      	ldr	r3, [r7, #4]
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	b2db      	uxtb	r3, r3
    ae36:	f023 0302 	bic.w	r3, r3, #2
    ae3a:	b2da      	uxtb	r2, r3
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    ae40:	2103      	movs	r1, #3
    ae42:	6878      	ldr	r0, [r7, #4]
    ae44:	4b02      	ldr	r3, [pc, #8]	; (ae50 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    ae46:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    ae48:	bf00      	nop
    ae4a:	3708      	adds	r7, #8
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bd80      	pop	{r7, pc}
    ae50:	0000ad7d 	.word	0x0000ad7d

0000ae54 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	b084      	sub	sp, #16
    ae58:	af00      	add	r7, sp, #0
    ae5a:	6078      	str	r0, [r7, #4]
    ae5c:	460b      	mov	r3, r1
    ae5e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	781b      	ldrb	r3, [r3, #0]
    ae64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    ae66:	7bfb      	ldrb	r3, [r7, #15]
    ae68:	f023 0310 	bic.w	r3, r3, #16
    ae6c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    ae6e:	78fb      	ldrb	r3, [r7, #3]
    ae70:	011b      	lsls	r3, r3, #4
    ae72:	b25a      	sxtb	r2, r3
    ae74:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ae78:	4313      	orrs	r3, r2
    ae7a:	b25b      	sxtb	r3, r3
    ae7c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	7bfa      	ldrb	r2, [r7, #15]
    ae82:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    ae84:	2103      	movs	r1, #3
    ae86:	6878      	ldr	r0, [r7, #4]
    ae88:	4b02      	ldr	r3, [pc, #8]	; (ae94 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    ae8a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    ae8c:	bf00      	nop
    ae8e:	3710      	adds	r7, #16
    ae90:	46bd      	mov	sp, r7
    ae92:	bd80      	pop	{r7, pc}
    ae94:	0000ad7d 	.word	0x0000ad7d

0000ae98 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    ae98:	b580      	push	{r7, lr}
    ae9a:	b084      	sub	sp, #16
    ae9c:	af00      	add	r7, sp, #0
    ae9e:	6078      	str	r0, [r7, #4]
    aea0:	460b      	mov	r3, r1
    aea2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    aea4:	2103      	movs	r1, #3
    aea6:	6878      	ldr	r0, [r7, #4]
    aea8:	4b06      	ldr	r3, [pc, #24]	; (aec4 <hri_eic_get_CTRLA_reg+0x2c>)
    aeaa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	781b      	ldrb	r3, [r3, #0]
    aeb0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    aeb2:	7bfa      	ldrb	r2, [r7, #15]
    aeb4:	78fb      	ldrb	r3, [r7, #3]
    aeb6:	4013      	ands	r3, r2
    aeb8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aeba:	7bfb      	ldrb	r3, [r7, #15]
}
    aebc:	4618      	mov	r0, r3
    aebe:	3710      	adds	r7, #16
    aec0:	46bd      	mov	sp, r7
    aec2:	bd80      	pop	{r7, pc}
    aec4:	0000ad7d 	.word	0x0000ad7d

0000aec8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    aec8:	b580      	push	{r7, lr}
    aeca:	b082      	sub	sp, #8
    aecc:	af00      	add	r7, sp, #0
    aece:	6078      	str	r0, [r7, #4]
    aed0:	460b      	mov	r3, r1
    aed2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    aed4:	687b      	ldr	r3, [r7, #4]
    aed6:	78fa      	ldrb	r2, [r7, #3]
    aed8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    aeda:	2103      	movs	r1, #3
    aedc:	6878      	ldr	r0, [r7, #4]
    aede:	4b03      	ldr	r3, [pc, #12]	; (aeec <hri_eic_write_CTRLA_reg+0x24>)
    aee0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    aee2:	bf00      	nop
    aee4:	3708      	adds	r7, #8
    aee6:	46bd      	mov	sp, r7
    aee8:	bd80      	pop	{r7, pc}
    aeea:	bf00      	nop
    aeec:	0000ad7d 	.word	0x0000ad7d

0000aef0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    aef0:	b480      	push	{r7}
    aef2:	b083      	sub	sp, #12
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
    aef8:	460b      	mov	r3, r1
    aefa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	78fa      	ldrb	r2, [r7, #3]
    af00:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    af02:	bf00      	nop
    af04:	370c      	adds	r7, #12
    af06:	46bd      	mov	sp, r7
    af08:	f85d 7b04 	ldr.w	r7, [sp], #4
    af0c:	4770      	bx	lr

0000af0e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    af0e:	b480      	push	{r7}
    af10:	b083      	sub	sp, #12
    af12:	af00      	add	r7, sp, #0
    af14:	6078      	str	r0, [r7, #4]
    af16:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    af18:	687b      	ldr	r3, [r7, #4]
    af1a:	683a      	ldr	r2, [r7, #0]
    af1c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    af1e:	bf00      	nop
    af20:	370c      	adds	r7, #12
    af22:	46bd      	mov	sp, r7
    af24:	f85d 7b04 	ldr.w	r7, [sp], #4
    af28:	4770      	bx	lr

0000af2a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    af2a:	b480      	push	{r7}
    af2c:	b083      	sub	sp, #12
    af2e:	af00      	add	r7, sp, #0
    af30:	6078      	str	r0, [r7, #4]
    af32:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	683a      	ldr	r2, [r7, #0]
    af38:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    af3a:	bf00      	nop
    af3c:	370c      	adds	r7, #12
    af3e:	46bd      	mov	sp, r7
    af40:	f85d 7b04 	ldr.w	r7, [sp], #4
    af44:	4770      	bx	lr

0000af46 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    af46:	b480      	push	{r7}
    af48:	b085      	sub	sp, #20
    af4a:	af00      	add	r7, sp, #0
    af4c:	60f8      	str	r0, [r7, #12]
    af4e:	460b      	mov	r3, r1
    af50:	607a      	str	r2, [r7, #4]
    af52:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    af54:	7afb      	ldrb	r3, [r7, #11]
    af56:	68fa      	ldr	r2, [r7, #12]
    af58:	3306      	adds	r3, #6
    af5a:	009b      	lsls	r3, r3, #2
    af5c:	4413      	add	r3, r2
    af5e:	687a      	ldr	r2, [r7, #4]
    af60:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    af62:	bf00      	nop
    af64:	3714      	adds	r7, #20
    af66:	46bd      	mov	sp, r7
    af68:	f85d 7b04 	ldr.w	r7, [sp], #4
    af6c:	4770      	bx	lr

0000af6e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    af6e:	b480      	push	{r7}
    af70:	b083      	sub	sp, #12
    af72:	af00      	add	r7, sp, #0
    af74:	6078      	str	r0, [r7, #4]
    af76:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	683a      	ldr	r2, [r7, #0]
    af7c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    af7e:	bf00      	nop
    af80:	370c      	adds	r7, #12
    af82:	46bd      	mov	sp, r7
    af84:	f85d 7b04 	ldr.w	r7, [sp], #4
    af88:	4770      	bx	lr

0000af8a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    af8a:	b480      	push	{r7}
    af8c:	b083      	sub	sp, #12
    af8e:	af00      	add	r7, sp, #0
    af90:	6078      	str	r0, [r7, #4]
    af92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	683a      	ldr	r2, [r7, #0]
    af98:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    af9a:	bf00      	nop
    af9c:	370c      	adds	r7, #12
    af9e:	46bd      	mov	sp, r7
    afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    afa4:	4770      	bx	lr
	...

0000afa8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    afa8:	b580      	push	{r7, lr}
    afaa:	b082      	sub	sp, #8
    afac:	af00      	add	r7, sp, #0
    afae:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    afb0:	2101      	movs	r1, #1
    afb2:	484f      	ldr	r0, [pc, #316]	; (b0f0 <_ext_irq_init+0x148>)
    afb4:	4b4f      	ldr	r3, [pc, #316]	; (b0f4 <_ext_irq_init+0x14c>)
    afb6:	4798      	blx	r3
    afb8:	4603      	mov	r3, r0
    afba:	f083 0301 	eor.w	r3, r3, #1
    afbe:	b2db      	uxtb	r3, r3
    afc0:	2b00      	cmp	r3, #0
    afc2:	d011      	beq.n	afe8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    afc4:	2102      	movs	r1, #2
    afc6:	484a      	ldr	r0, [pc, #296]	; (b0f0 <_ext_irq_init+0x148>)
    afc8:	4b4b      	ldr	r3, [pc, #300]	; (b0f8 <_ext_irq_init+0x150>)
    afca:	4798      	blx	r3
    afcc:	4603      	mov	r3, r0
    afce:	2b00      	cmp	r3, #0
    afd0:	d006      	beq.n	afe0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    afd2:	4847      	ldr	r0, [pc, #284]	; (b0f0 <_ext_irq_init+0x148>)
    afd4:	4b49      	ldr	r3, [pc, #292]	; (b0fc <_ext_irq_init+0x154>)
    afd6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    afd8:	2102      	movs	r1, #2
    afda:	4845      	ldr	r0, [pc, #276]	; (b0f0 <_ext_irq_init+0x148>)
    afdc:	4b48      	ldr	r3, [pc, #288]	; (b100 <_ext_irq_init+0x158>)
    afde:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    afe0:	2101      	movs	r1, #1
    afe2:	4843      	ldr	r0, [pc, #268]	; (b0f0 <_ext_irq_init+0x148>)
    afe4:	4b47      	ldr	r3, [pc, #284]	; (b104 <_ext_irq_init+0x15c>)
    afe6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    afe8:	2101      	movs	r1, #1
    afea:	4841      	ldr	r0, [pc, #260]	; (b0f0 <_ext_irq_init+0x148>)
    afec:	4b44      	ldr	r3, [pc, #272]	; (b100 <_ext_irq_init+0x158>)
    afee:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    aff0:	2100      	movs	r1, #0
    aff2:	483f      	ldr	r0, [pc, #252]	; (b0f0 <_ext_irq_init+0x148>)
    aff4:	4b44      	ldr	r3, [pc, #272]	; (b108 <_ext_irq_init+0x160>)
    aff6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    aff8:	2100      	movs	r1, #0
    affa:	483d      	ldr	r0, [pc, #244]	; (b0f0 <_ext_irq_init+0x148>)
    affc:	4b43      	ldr	r3, [pc, #268]	; (b10c <_ext_irq_init+0x164>)
    affe:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    b000:	2100      	movs	r1, #0
    b002:	483b      	ldr	r0, [pc, #236]	; (b0f0 <_ext_irq_init+0x148>)
    b004:	4b42      	ldr	r3, [pc, #264]	; (b110 <_ext_irq_init+0x168>)
    b006:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    b008:	f240 31bb 	movw	r1, #955	; 0x3bb
    b00c:	4838      	ldr	r0, [pc, #224]	; (b0f0 <_ext_irq_init+0x148>)
    b00e:	4b41      	ldr	r3, [pc, #260]	; (b114 <_ext_irq_init+0x16c>)
    b010:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    b012:	f240 313b 	movw	r1, #827	; 0x33b
    b016:	4836      	ldr	r0, [pc, #216]	; (b0f0 <_ext_irq_init+0x148>)
    b018:	4b3f      	ldr	r3, [pc, #252]	; (b118 <_ext_irq_init+0x170>)
    b01a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    b01c:	2100      	movs	r1, #0
    b01e:	4834      	ldr	r0, [pc, #208]	; (b0f0 <_ext_irq_init+0x148>)
    b020:	4b3e      	ldr	r3, [pc, #248]	; (b11c <_ext_irq_init+0x174>)
    b022:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    b024:	4a3e      	ldr	r2, [pc, #248]	; (b120 <_ext_irq_init+0x178>)
    b026:	2100      	movs	r1, #0
    b028:	4831      	ldr	r0, [pc, #196]	; (b0f0 <_ext_irq_init+0x148>)
    b02a:	4b3e      	ldr	r3, [pc, #248]	; (b124 <_ext_irq_init+0x17c>)
    b02c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    b02e:	2211      	movs	r2, #17
    b030:	2101      	movs	r1, #1
    b032:	482f      	ldr	r0, [pc, #188]	; (b0f0 <_ext_irq_init+0x148>)
    b034:	4b3b      	ldr	r3, [pc, #236]	; (b124 <_ext_irq_init+0x17c>)
    b036:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    b038:	482d      	ldr	r0, [pc, #180]	; (b0f0 <_ext_irq_init+0x148>)
    b03a:	4b3b      	ldr	r3, [pc, #236]	; (b128 <_ext_irq_init+0x180>)
    b03c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    b03e:	200c      	movs	r0, #12
    b040:	4b3a      	ldr	r3, [pc, #232]	; (b12c <_ext_irq_init+0x184>)
    b042:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    b044:	200c      	movs	r0, #12
    b046:	4b3a      	ldr	r3, [pc, #232]	; (b130 <_ext_irq_init+0x188>)
    b048:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    b04a:	200c      	movs	r0, #12
    b04c:	4b39      	ldr	r3, [pc, #228]	; (b134 <_ext_irq_init+0x18c>)
    b04e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    b050:	200d      	movs	r0, #13
    b052:	4b36      	ldr	r3, [pc, #216]	; (b12c <_ext_irq_init+0x184>)
    b054:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    b056:	200d      	movs	r0, #13
    b058:	4b35      	ldr	r3, [pc, #212]	; (b130 <_ext_irq_init+0x188>)
    b05a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    b05c:	200d      	movs	r0, #13
    b05e:	4b35      	ldr	r3, [pc, #212]	; (b134 <_ext_irq_init+0x18c>)
    b060:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    b062:	200f      	movs	r0, #15
    b064:	4b31      	ldr	r3, [pc, #196]	; (b12c <_ext_irq_init+0x184>)
    b066:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    b068:	200f      	movs	r0, #15
    b06a:	4b31      	ldr	r3, [pc, #196]	; (b130 <_ext_irq_init+0x188>)
    b06c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    b06e:	200f      	movs	r0, #15
    b070:	4b30      	ldr	r3, [pc, #192]	; (b134 <_ext_irq_init+0x18c>)
    b072:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    b074:	2010      	movs	r0, #16
    b076:	4b2d      	ldr	r3, [pc, #180]	; (b12c <_ext_irq_init+0x184>)
    b078:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    b07a:	2010      	movs	r0, #16
    b07c:	4b2c      	ldr	r3, [pc, #176]	; (b130 <_ext_irq_init+0x188>)
    b07e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    b080:	2010      	movs	r0, #16
    b082:	4b2c      	ldr	r3, [pc, #176]	; (b134 <_ext_irq_init+0x18c>)
    b084:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    b086:	2011      	movs	r0, #17
    b088:	4b28      	ldr	r3, [pc, #160]	; (b12c <_ext_irq_init+0x184>)
    b08a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    b08c:	2011      	movs	r0, #17
    b08e:	4b28      	ldr	r3, [pc, #160]	; (b130 <_ext_irq_init+0x188>)
    b090:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    b092:	2011      	movs	r0, #17
    b094:	4b27      	ldr	r3, [pc, #156]	; (b134 <_ext_irq_init+0x18c>)
    b096:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    b098:	2012      	movs	r0, #18
    b09a:	4b24      	ldr	r3, [pc, #144]	; (b12c <_ext_irq_init+0x184>)
    b09c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    b09e:	2012      	movs	r0, #18
    b0a0:	4b23      	ldr	r3, [pc, #140]	; (b130 <_ext_irq_init+0x188>)
    b0a2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    b0a4:	2012      	movs	r0, #18
    b0a6:	4b23      	ldr	r3, [pc, #140]	; (b134 <_ext_irq_init+0x18c>)
    b0a8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    b0aa:	2013      	movs	r0, #19
    b0ac:	4b1f      	ldr	r3, [pc, #124]	; (b12c <_ext_irq_init+0x184>)
    b0ae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    b0b0:	2013      	movs	r0, #19
    b0b2:	4b1f      	ldr	r3, [pc, #124]	; (b130 <_ext_irq_init+0x188>)
    b0b4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    b0b6:	2013      	movs	r0, #19
    b0b8:	4b1e      	ldr	r3, [pc, #120]	; (b134 <_ext_irq_init+0x18c>)
    b0ba:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    b0bc:	2014      	movs	r0, #20
    b0be:	4b1b      	ldr	r3, [pc, #108]	; (b12c <_ext_irq_init+0x184>)
    b0c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    b0c2:	2014      	movs	r0, #20
    b0c4:	4b1a      	ldr	r3, [pc, #104]	; (b130 <_ext_irq_init+0x188>)
    b0c6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    b0c8:	2014      	movs	r0, #20
    b0ca:	4b1a      	ldr	r3, [pc, #104]	; (b134 <_ext_irq_init+0x18c>)
    b0cc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    b0ce:	2015      	movs	r0, #21
    b0d0:	4b16      	ldr	r3, [pc, #88]	; (b12c <_ext_irq_init+0x184>)
    b0d2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    b0d4:	2015      	movs	r0, #21
    b0d6:	4b16      	ldr	r3, [pc, #88]	; (b130 <_ext_irq_init+0x188>)
    b0d8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    b0da:	2015      	movs	r0, #21
    b0dc:	4b15      	ldr	r3, [pc, #84]	; (b134 <_ext_irq_init+0x18c>)
    b0de:	4798      	blx	r3

	callback = cb;
    b0e0:	4a15      	ldr	r2, [pc, #84]	; (b138 <_ext_irq_init+0x190>)
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    b0e6:	2300      	movs	r3, #0
}
    b0e8:	4618      	mov	r0, r3
    b0ea:	3708      	adds	r7, #8
    b0ec:	46bd      	mov	sp, r7
    b0ee:	bd80      	pop	{r7, pc}
    b0f0:	40002800 	.word	0x40002800
    b0f4:	0000ada1 	.word	0x0000ada1
    b0f8:	0000ae99 	.word	0x0000ae99
    b0fc:	0000ae29 	.word	0x0000ae29
    b100:	0000ad7d 	.word	0x0000ad7d
    b104:	0000aec9 	.word	0x0000aec9
    b108:	0000ae55 	.word	0x0000ae55
    b10c:	0000aef1 	.word	0x0000aef1
    b110:	0000af0f 	.word	0x0000af0f
    b114:	0000af2b 	.word	0x0000af2b
    b118:	0000af6f 	.word	0x0000af6f
    b11c:	0000af8b 	.word	0x0000af8b
    b120:	90999013 	.word	0x90999013
    b124:	0000af47 	.word	0x0000af47
    b128:	0000adfd 	.word	0x0000adfd
    b12c:	0000acfd 	.word	0x0000acfd
    b130:	0000ad41 	.word	0x0000ad41
    b134:	0000acc1 	.word	0x0000acc1
    b138:	20001af8 	.word	0x20001af8

0000b13c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    b13c:	b580      	push	{r7, lr}
    b13e:	b084      	sub	sp, #16
    b140:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    b142:	4841      	ldr	r0, [pc, #260]	; (b248 <_ext_irq_handler+0x10c>)
    b144:	4b41      	ldr	r3, [pc, #260]	; (b24c <_ext_irq_handler+0x110>)
    b146:	4798      	blx	r3
    b148:	4603      	mov	r3, r0
    b14a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    b14c:	f04f 33ff 	mov.w	r3, #4294967295
    b150:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    b152:	683b      	ldr	r3, [r7, #0]
    b154:	4619      	mov	r1, r3
    b156:	483c      	ldr	r0, [pc, #240]	; (b248 <_ext_irq_handler+0x10c>)
    b158:	4b3d      	ldr	r3, [pc, #244]	; (b250 <_ext_irq_handler+0x114>)
    b15a:	4798      	blx	r3

	ASSERT(callback);
    b15c:	4b3d      	ldr	r3, [pc, #244]	; (b254 <_ext_irq_handler+0x118>)
    b15e:	681b      	ldr	r3, [r3, #0]
    b160:	2b00      	cmp	r3, #0
    b162:	bf14      	ite	ne
    b164:	2301      	movne	r3, #1
    b166:	2300      	moveq	r3, #0
    b168:	b2db      	uxtb	r3, r3
    b16a:	f44f 7284 	mov.w	r2, #264	; 0x108
    b16e:	493a      	ldr	r1, [pc, #232]	; (b258 <_ext_irq_handler+0x11c>)
    b170:	4618      	mov	r0, r3
    b172:	4b3a      	ldr	r3, [pc, #232]	; (b25c <_ext_irq_handler+0x120>)
    b174:	4798      	blx	r3

	while (flags) {
    b176:	e060      	b.n	b23a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    b178:	683b      	ldr	r3, [r7, #0]
    b17a:	4618      	mov	r0, r3
    b17c:	4b38      	ldr	r3, [pc, #224]	; (b260 <_ext_irq_handler+0x124>)
    b17e:	4798      	blx	r3
    b180:	4603      	mov	r3, r0
    b182:	b2db      	uxtb	r3, r3
    b184:	3b01      	subs	r3, #1
    b186:	b2db      	uxtb	r3, r3
    b188:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    b18a:	e047      	b.n	b21c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    b18c:	2300      	movs	r3, #0
    b18e:	71fb      	strb	r3, [r7, #7]
    b190:	2309      	movs	r3, #9
    b192:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    b194:	e024      	b.n	b1e0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    b196:	79ba      	ldrb	r2, [r7, #6]
    b198:	79fb      	ldrb	r3, [r7, #7]
    b19a:	4413      	add	r3, r2
    b19c:	105b      	asrs	r3, r3, #1
    b19e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    b1a0:	797b      	ldrb	r3, [r7, #5]
    b1a2:	4a30      	ldr	r2, [pc, #192]	; (b264 <_ext_irq_handler+0x128>)
    b1a4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    b1a8:	461a      	mov	r2, r3
    b1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b1ae:	429a      	cmp	r2, r3
    b1b0:	d106      	bne.n	b1c0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    b1b2:	797b      	ldrb	r3, [r7, #5]
    b1b4:	4a2b      	ldr	r2, [pc, #172]	; (b264 <_ext_irq_handler+0x128>)
    b1b6:	00db      	lsls	r3, r3, #3
    b1b8:	4413      	add	r3, r2
    b1ba:	685b      	ldr	r3, [r3, #4]
    b1bc:	60bb      	str	r3, [r7, #8]
					break;
    b1be:	e013      	b.n	b1e8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    b1c0:	797b      	ldrb	r3, [r7, #5]
    b1c2:	4a28      	ldr	r2, [pc, #160]	; (b264 <_ext_irq_handler+0x128>)
    b1c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    b1c8:	461a      	mov	r2, r3
    b1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b1ce:	429a      	cmp	r2, r3
    b1d0:	da03      	bge.n	b1da <_ext_irq_handler+0x9e>
					lower = middle + 1;
    b1d2:	797b      	ldrb	r3, [r7, #5]
    b1d4:	3301      	adds	r3, #1
    b1d6:	71fb      	strb	r3, [r7, #7]
    b1d8:	e002      	b.n	b1e0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    b1da:	797b      	ldrb	r3, [r7, #5]
    b1dc:	3b01      	subs	r3, #1
    b1de:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    b1e0:	79ba      	ldrb	r2, [r7, #6]
    b1e2:	79fb      	ldrb	r3, [r7, #7]
    b1e4:	429a      	cmp	r2, r3
    b1e6:	d2d6      	bcs.n	b196 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    b1e8:	68bb      	ldr	r3, [r7, #8]
    b1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    b1ee:	d003      	beq.n	b1f8 <_ext_irq_handler+0xbc>
				callback(pin);
    b1f0:	4b18      	ldr	r3, [pc, #96]	; (b254 <_ext_irq_handler+0x118>)
    b1f2:	681b      	ldr	r3, [r3, #0]
    b1f4:	68b8      	ldr	r0, [r7, #8]
    b1f6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    b1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b1fc:	2201      	movs	r2, #1
    b1fe:	fa02 f303 	lsl.w	r3, r2, r3
    b202:	43da      	mvns	r2, r3
    b204:	683b      	ldr	r3, [r7, #0]
    b206:	4013      	ands	r3, r2
    b208:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    b20a:	683b      	ldr	r3, [r7, #0]
    b20c:	4618      	mov	r0, r3
    b20e:	4b14      	ldr	r3, [pc, #80]	; (b260 <_ext_irq_handler+0x124>)
    b210:	4798      	blx	r3
    b212:	4603      	mov	r3, r0
    b214:	b2db      	uxtb	r3, r3
    b216:	3b01      	subs	r3, #1
    b218:	b2db      	uxtb	r3, r3
    b21a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    b21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b220:	f1b3 3fff 	cmp.w	r3, #4294967295
    b224:	d1b2      	bne.n	b18c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    b226:	4808      	ldr	r0, [pc, #32]	; (b248 <_ext_irq_handler+0x10c>)
    b228:	4b08      	ldr	r3, [pc, #32]	; (b24c <_ext_irq_handler+0x110>)
    b22a:	4798      	blx	r3
    b22c:	4603      	mov	r3, r0
    b22e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    b230:	683b      	ldr	r3, [r7, #0]
    b232:	4619      	mov	r1, r3
    b234:	4804      	ldr	r0, [pc, #16]	; (b248 <_ext_irq_handler+0x10c>)
    b236:	4b06      	ldr	r3, [pc, #24]	; (b250 <_ext_irq_handler+0x114>)
    b238:	4798      	blx	r3
	while (flags) {
    b23a:	683b      	ldr	r3, [r7, #0]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d19b      	bne.n	b178 <_ext_irq_handler+0x3c>
	}
}
    b240:	bf00      	nop
    b242:	3710      	adds	r7, #16
    b244:	46bd      	mov	sp, r7
    b246:	bd80      	pop	{r7, pc}
    b248:	40002800 	.word	0x40002800
    b24c:	0000adc9 	.word	0x0000adc9
    b250:	0000ade1 	.word	0x0000ade1
    b254:	20001af8 	.word	0x20001af8
    b258:	000150ec 	.word	0x000150ec
    b25c:	000099f1 	.word	0x000099f1
    b260:	00013f69 	.word	0x00013f69
    b264:	000150a4 	.word	0x000150a4

0000b268 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    b268:	b580      	push	{r7, lr}
    b26a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b26c:	4b01      	ldr	r3, [pc, #4]	; (b274 <EIC_0_Handler+0xc>)
    b26e:	4798      	blx	r3
} /**
    b270:	bf00      	nop
    b272:	bd80      	pop	{r7, pc}
    b274:	0000b13d 	.word	0x0000b13d

0000b278 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    b278:	b580      	push	{r7, lr}
    b27a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b27c:	4b01      	ldr	r3, [pc, #4]	; (b284 <EIC_1_Handler+0xc>)
    b27e:	4798      	blx	r3
} /**
    b280:	bf00      	nop
    b282:	bd80      	pop	{r7, pc}
    b284:	0000b13d 	.word	0x0000b13d

0000b288 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    b288:	b580      	push	{r7, lr}
    b28a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b28c:	4b01      	ldr	r3, [pc, #4]	; (b294 <EIC_3_Handler+0xc>)
    b28e:	4798      	blx	r3
} /**
    b290:	bf00      	nop
    b292:	bd80      	pop	{r7, pc}
    b294:	0000b13d 	.word	0x0000b13d

0000b298 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    b298:	b580      	push	{r7, lr}
    b29a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b29c:	4b01      	ldr	r3, [pc, #4]	; (b2a4 <EIC_4_Handler+0xc>)
    b29e:	4798      	blx	r3
} /**
    b2a0:	bf00      	nop
    b2a2:	bd80      	pop	{r7, pc}
    b2a4:	0000b13d 	.word	0x0000b13d

0000b2a8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    b2a8:	b580      	push	{r7, lr}
    b2aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b2ac:	4b01      	ldr	r3, [pc, #4]	; (b2b4 <EIC_5_Handler+0xc>)
    b2ae:	4798      	blx	r3
} /**
    b2b0:	bf00      	nop
    b2b2:	bd80      	pop	{r7, pc}
    b2b4:	0000b13d 	.word	0x0000b13d

0000b2b8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    b2b8:	b580      	push	{r7, lr}
    b2ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b2bc:	4b01      	ldr	r3, [pc, #4]	; (b2c4 <EIC_6_Handler+0xc>)
    b2be:	4798      	blx	r3
} /**
    b2c0:	bf00      	nop
    b2c2:	bd80      	pop	{r7, pc}
    b2c4:	0000b13d 	.word	0x0000b13d

0000b2c8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    b2c8:	b580      	push	{r7, lr}
    b2ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b2cc:	4b01      	ldr	r3, [pc, #4]	; (b2d4 <EIC_7_Handler+0xc>)
    b2ce:	4798      	blx	r3
} /**
    b2d0:	bf00      	nop
    b2d2:	bd80      	pop	{r7, pc}
    b2d4:	0000b13d 	.word	0x0000b13d

0000b2d8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    b2d8:	b580      	push	{r7, lr}
    b2da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b2dc:	4b01      	ldr	r3, [pc, #4]	; (b2e4 <EIC_8_Handler+0xc>)
    b2de:	4798      	blx	r3
} /**
    b2e0:	bf00      	nop
    b2e2:	bd80      	pop	{r7, pc}
    b2e4:	0000b13d 	.word	0x0000b13d

0000b2e8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    b2e8:	b580      	push	{r7, lr}
    b2ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    b2ec:	4b01      	ldr	r3, [pc, #4]	; (b2f4 <EIC_9_Handler+0xc>)
    b2ee:	4798      	blx	r3
}
    b2f0:	bf00      	nop
    b2f2:	bd80      	pop	{r7, pc}
    b2f4:	0000b13d 	.word	0x0000b13d

0000b2f8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    b2f8:	b480      	push	{r7}
    b2fa:	b085      	sub	sp, #20
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	60f8      	str	r0, [r7, #12]
    b300:	460b      	mov	r3, r1
    b302:	607a      	str	r2, [r7, #4]
    b304:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    b306:	7afa      	ldrb	r2, [r7, #11]
    b308:	68fb      	ldr	r3, [r7, #12]
    b30a:	3248      	adds	r2, #72	; 0x48
    b30c:	6879      	ldr	r1, [r7, #4]
    b30e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    b312:	bf00      	nop
    b314:	3714      	adds	r7, #20
    b316:	46bd      	mov	sp, r7
    b318:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31c:	4770      	bx	lr

0000b31e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    b31e:	b480      	push	{r7}
    b320:	b083      	sub	sp, #12
    b322:	af00      	add	r7, sp, #0
    b324:	6078      	str	r0, [r7, #4]
    b326:	460b      	mov	r3, r1
    b328:	70fb      	strb	r3, [r7, #3]
    b32a:	4613      	mov	r3, r2
    b32c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    b32e:	78fb      	ldrb	r3, [r7, #3]
    b330:	687a      	ldr	r2, [r7, #4]
    b332:	3304      	adds	r3, #4
    b334:	00db      	lsls	r3, r3, #3
    b336:	4413      	add	r3, r2
    b338:	78ba      	ldrb	r2, [r7, #2]
    b33a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    b33c:	78fb      	ldrb	r3, [r7, #3]
    b33e:	78ba      	ldrb	r2, [r7, #2]
    b340:	43d2      	mvns	r2, r2
    b342:	b2d1      	uxtb	r1, r2
    b344:	687a      	ldr	r2, [r7, #4]
    b346:	3304      	adds	r3, #4
    b348:	00db      	lsls	r3, r3, #3
    b34a:	4413      	add	r3, r2
    b34c:	460a      	mov	r2, r1
    b34e:	711a      	strb	r2, [r3, #4]
}
    b350:	bf00      	nop
    b352:	370c      	adds	r7, #12
    b354:	46bd      	mov	sp, r7
    b356:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35a:	4770      	bx	lr

0000b35c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    b35c:	b480      	push	{r7}
    b35e:	b085      	sub	sp, #20
    b360:	af00      	add	r7, sp, #0
    b362:	60f8      	str	r0, [r7, #12]
    b364:	460b      	mov	r3, r1
    b366:	607a      	str	r2, [r7, #4]
    b368:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    b36a:	7afa      	ldrb	r2, [r7, #11]
    b36c:	68fb      	ldr	r3, [r7, #12]
    b36e:	3204      	adds	r2, #4
    b370:	6879      	ldr	r1, [r7, #4]
    b372:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    b376:	bf00      	nop
    b378:	3714      	adds	r7, #20
    b37a:	46bd      	mov	sp, r7
    b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b380:	4770      	bx	lr
	...

0000b384 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    b384:	b580      	push	{r7, lr}
    b386:	b082      	sub	sp, #8
    b388:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    b38a:	2300      	movs	r3, #0
    b38c:	71fb      	strb	r3, [r7, #7]
    b38e:	e00b      	b.n	b3a8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    b390:	79fb      	ldrb	r3, [r7, #7]
    b392:	4a18      	ldr	r2, [pc, #96]	; (b3f4 <_event_system_init+0x70>)
    b394:	5cd3      	ldrb	r3, [r2, r3]
    b396:	461a      	mov	r2, r3
    b398:	79fb      	ldrb	r3, [r7, #7]
    b39a:	4619      	mov	r1, r3
    b39c:	4816      	ldr	r0, [pc, #88]	; (b3f8 <_event_system_init+0x74>)
    b39e:	4b17      	ldr	r3, [pc, #92]	; (b3fc <_event_system_init+0x78>)
    b3a0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    b3a2:	79fb      	ldrb	r3, [r7, #7]
    b3a4:	3301      	adds	r3, #1
    b3a6:	71fb      	strb	r3, [r7, #7]
    b3a8:	79fb      	ldrb	r3, [r7, #7]
    b3aa:	2b42      	cmp	r3, #66	; 0x42
    b3ac:	d9f0      	bls.n	b390 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    b3ae:	2300      	movs	r3, #0
    b3b0:	71fb      	strb	r3, [r7, #7]
    b3b2:	e016      	b.n	b3e2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    b3b4:	79fb      	ldrb	r3, [r7, #7]
    b3b6:	4a12      	ldr	r2, [pc, #72]	; (b400 <_event_system_init+0x7c>)
    b3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    b3bc:	461a      	mov	r2, r3
    b3be:	79fb      	ldrb	r3, [r7, #7]
    b3c0:	4619      	mov	r1, r3
    b3c2:	480d      	ldr	r0, [pc, #52]	; (b3f8 <_event_system_init+0x74>)
    b3c4:	4b0f      	ldr	r3, [pc, #60]	; (b404 <_event_system_init+0x80>)
    b3c6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    b3c8:	79fb      	ldrb	r3, [r7, #7]
    b3ca:	4a0f      	ldr	r2, [pc, #60]	; (b408 <_event_system_init+0x84>)
    b3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d0:	b2da      	uxtb	r2, r3
    b3d2:	79fb      	ldrb	r3, [r7, #7]
    b3d4:	4619      	mov	r1, r3
    b3d6:	4808      	ldr	r0, [pc, #32]	; (b3f8 <_event_system_init+0x74>)
    b3d8:	4b0c      	ldr	r3, [pc, #48]	; (b40c <_event_system_init+0x88>)
    b3da:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    b3dc:	79fb      	ldrb	r3, [r7, #7]
    b3de:	3301      	adds	r3, #1
    b3e0:	71fb      	strb	r3, [r7, #7]
    b3e2:	79fb      	ldrb	r3, [r7, #7]
    b3e4:	2b1f      	cmp	r3, #31
    b3e6:	d9e5      	bls.n	b3b4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    b3e8:	2300      	movs	r3, #0
}
    b3ea:	4618      	mov	r0, r3
    b3ec:	3708      	adds	r7, #8
    b3ee:	46bd      	mov	sp, r7
    b3f0:	bd80      	pop	{r7, pc}
    b3f2:	bf00      	nop
    b3f4:	00015104 	.word	0x00015104
    b3f8:	4100e000 	.word	0x4100e000
    b3fc:	0000b2f9 	.word	0x0000b2f9
    b400:	00015148 	.word	0x00015148
    b404:	0000b35d 	.word	0x0000b35d
    b408:	00015188 	.word	0x00015188
    b40c:	0000b31f 	.word	0x0000b31f

0000b410 <hri_gclk_wait_for_sync>:
{
    b410:	b480      	push	{r7}
    b412:	b083      	sub	sp, #12
    b414:	af00      	add	r7, sp, #0
    b416:	6078      	str	r0, [r7, #4]
    b418:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    b41a:	bf00      	nop
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	685a      	ldr	r2, [r3, #4]
    b420:	683b      	ldr	r3, [r7, #0]
    b422:	4013      	ands	r3, r2
    b424:	2b00      	cmp	r3, #0
    b426:	d1f9      	bne.n	b41c <hri_gclk_wait_for_sync+0xc>
}
    b428:	bf00      	nop
    b42a:	370c      	adds	r7, #12
    b42c:	46bd      	mov	sp, r7
    b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b432:	4770      	bx	lr

0000b434 <hri_gclk_write_GENCTRL_reg>:
{
    b434:	b580      	push	{r7, lr}
    b436:	b084      	sub	sp, #16
    b438:	af00      	add	r7, sp, #0
    b43a:	60f8      	str	r0, [r7, #12]
    b43c:	460b      	mov	r3, r1
    b43e:	607a      	str	r2, [r7, #4]
    b440:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    b442:	7afa      	ldrb	r2, [r7, #11]
    b444:	68fb      	ldr	r3, [r7, #12]
    b446:	3208      	adds	r2, #8
    b448:	6879      	ldr	r1, [r7, #4]
    b44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    b44e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    b452:	68f8      	ldr	r0, [r7, #12]
    b454:	4b02      	ldr	r3, [pc, #8]	; (b460 <hri_gclk_write_GENCTRL_reg+0x2c>)
    b456:	4798      	blx	r3
}
    b458:	bf00      	nop
    b45a:	3710      	adds	r7, #16
    b45c:	46bd      	mov	sp, r7
    b45e:	bd80      	pop	{r7, pc}
    b460:	0000b411 	.word	0x0000b411

0000b464 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    b464:	b580      	push	{r7, lr}
    b466:	b082      	sub	sp, #8
    b468:	af00      	add	r7, sp, #0
    b46a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    b46c:	687b      	ldr	r3, [r7, #4]
    b46e:	f003 0301 	and.w	r3, r3, #1
    b472:	2b00      	cmp	r3, #0
    b474:	d004      	beq.n	b480 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    b476:	4a3b      	ldr	r2, [pc, #236]	; (b564 <_gclk_init_generators_by_fref+0x100>)
    b478:	2100      	movs	r1, #0
    b47a:	483b      	ldr	r0, [pc, #236]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b47c:	4b3b      	ldr	r3, [pc, #236]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b47e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	f003 0302 	and.w	r3, r3, #2
    b486:	2b00      	cmp	r3, #0
    b488:	d004      	beq.n	b494 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    b48a:	4a39      	ldr	r2, [pc, #228]	; (b570 <_gclk_init_generators_by_fref+0x10c>)
    b48c:	2101      	movs	r1, #1
    b48e:	4836      	ldr	r0, [pc, #216]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b490:	4b36      	ldr	r3, [pc, #216]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b492:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	f003 0304 	and.w	r3, r3, #4
    b49a:	2b00      	cmp	r3, #0
    b49c:	d004      	beq.n	b4a8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    b49e:	4a35      	ldr	r2, [pc, #212]	; (b574 <_gclk_init_generators_by_fref+0x110>)
    b4a0:	2102      	movs	r1, #2
    b4a2:	4831      	ldr	r0, [pc, #196]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b4a4:	4b31      	ldr	r3, [pc, #196]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b4a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    b4a8:	687b      	ldr	r3, [r7, #4]
    b4aa:	f003 0308 	and.w	r3, r3, #8
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d004      	beq.n	b4bc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    b4b2:	4a31      	ldr	r2, [pc, #196]	; (b578 <_gclk_init_generators_by_fref+0x114>)
    b4b4:	2103      	movs	r1, #3
    b4b6:	482c      	ldr	r0, [pc, #176]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b4b8:	4b2c      	ldr	r3, [pc, #176]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b4ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	f003 0310 	and.w	r3, r3, #16
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d004      	beq.n	b4d0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    b4c6:	4a2d      	ldr	r2, [pc, #180]	; (b57c <_gclk_init_generators_by_fref+0x118>)
    b4c8:	2104      	movs	r1, #4
    b4ca:	4827      	ldr	r0, [pc, #156]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b4cc:	4b27      	ldr	r3, [pc, #156]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b4ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    b4d0:	687b      	ldr	r3, [r7, #4]
    b4d2:	f003 0320 	and.w	r3, r3, #32
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d004      	beq.n	b4e4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    b4da:	4a29      	ldr	r2, [pc, #164]	; (b580 <_gclk_init_generators_by_fref+0x11c>)
    b4dc:	2105      	movs	r1, #5
    b4de:	4822      	ldr	r0, [pc, #136]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b4e0:	4b22      	ldr	r3, [pc, #136]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b4e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d004      	beq.n	b4f8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    b4ee:	4a25      	ldr	r2, [pc, #148]	; (b584 <_gclk_init_generators_by_fref+0x120>)
    b4f0:	2106      	movs	r1, #6
    b4f2:	481d      	ldr	r0, [pc, #116]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b4f4:	4b1d      	ldr	r3, [pc, #116]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b4f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4fe:	2b00      	cmp	r3, #0
    b500:	d004      	beq.n	b50c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    b502:	4a21      	ldr	r2, [pc, #132]	; (b588 <_gclk_init_generators_by_fref+0x124>)
    b504:	2107      	movs	r1, #7
    b506:	4818      	ldr	r0, [pc, #96]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b508:	4b18      	ldr	r3, [pc, #96]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b50a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    b50c:	687b      	ldr	r3, [r7, #4]
    b50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b512:	2b00      	cmp	r3, #0
    b514:	d004      	beq.n	b520 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    b516:	4a1d      	ldr	r2, [pc, #116]	; (b58c <_gclk_init_generators_by_fref+0x128>)
    b518:	2108      	movs	r1, #8
    b51a:	4813      	ldr	r0, [pc, #76]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b51c:	4b13      	ldr	r3, [pc, #76]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b51e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    b520:	687b      	ldr	r3, [r7, #4]
    b522:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b526:	2b00      	cmp	r3, #0
    b528:	d004      	beq.n	b534 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    b52a:	4a19      	ldr	r2, [pc, #100]	; (b590 <_gclk_init_generators_by_fref+0x12c>)
    b52c:	2109      	movs	r1, #9
    b52e:	480e      	ldr	r0, [pc, #56]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b530:	4b0e      	ldr	r3, [pc, #56]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b532:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    b534:	687b      	ldr	r3, [r7, #4]
    b536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b53a:	2b00      	cmp	r3, #0
    b53c:	d004      	beq.n	b548 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    b53e:	4a15      	ldr	r2, [pc, #84]	; (b594 <_gclk_init_generators_by_fref+0x130>)
    b540:	210a      	movs	r1, #10
    b542:	4809      	ldr	r0, [pc, #36]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b544:	4b09      	ldr	r3, [pc, #36]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b546:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    b548:	687b      	ldr	r3, [r7, #4]
    b54a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b54e:	2b00      	cmp	r3, #0
    b550:	d004      	beq.n	b55c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    b552:	4a11      	ldr	r2, [pc, #68]	; (b598 <_gclk_init_generators_by_fref+0x134>)
    b554:	210b      	movs	r1, #11
    b556:	4804      	ldr	r0, [pc, #16]	; (b568 <_gclk_init_generators_by_fref+0x104>)
    b558:	4b04      	ldr	r3, [pc, #16]	; (b56c <_gclk_init_generators_by_fref+0x108>)
    b55a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    b55c:	bf00      	nop
    b55e:	3708      	adds	r7, #8
    b560:	46bd      	mov	sp, r7
    b562:	bd80      	pop	{r7, pc}
    b564:	00010107 	.word	0x00010107
    b568:	40001c00 	.word	0x40001c00
    b56c:	0000b435 	.word	0x0000b435
    b570:	00010907 	.word	0x00010907
    b574:	00010906 	.word	0x00010906
    b578:	00020908 	.word	0x00020908
    b57c:	00010901 	.word	0x00010901
    b580:	00062901 	.word	0x00062901
    b584:	000c2901 	.word	0x000c2901
    b588:	00082908 	.word	0x00082908
    b58c:	00032901 	.word	0x00032901
    b590:	00011908 	.word	0x00011908
    b594:	00010905 	.word	0x00010905
    b598:	00041905 	.word	0x00041905

0000b59c <hri_mclk_write_CPUDIV_reg>:
{
    b59c:	b480      	push	{r7}
    b59e:	b083      	sub	sp, #12
    b5a0:	af00      	add	r7, sp, #0
    b5a2:	6078      	str	r0, [r7, #4]
    b5a4:	460b      	mov	r3, r1
    b5a6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    b5a8:	687b      	ldr	r3, [r7, #4]
    b5aa:	78fa      	ldrb	r2, [r7, #3]
    b5ac:	715a      	strb	r2, [r3, #5]
}
    b5ae:	bf00      	nop
    b5b0:	370c      	adds	r7, #12
    b5b2:	46bd      	mov	sp, r7
    b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5b8:	4770      	bx	lr
	...

0000b5bc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    b5bc:	b580      	push	{r7, lr}
    b5be:	b082      	sub	sp, #8
    b5c0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    b5c2:	4b05      	ldr	r3, [pc, #20]	; (b5d8 <_mclk_init+0x1c>)
    b5c4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    b5c6:	2101      	movs	r1, #1
    b5c8:	6878      	ldr	r0, [r7, #4]
    b5ca:	4b04      	ldr	r3, [pc, #16]	; (b5dc <_mclk_init+0x20>)
    b5cc:	4798      	blx	r3
}
    b5ce:	bf00      	nop
    b5d0:	3708      	adds	r7, #8
    b5d2:	46bd      	mov	sp, r7
    b5d4:	bd80      	pop	{r7, pc}
    b5d6:	bf00      	nop
    b5d8:	40000800 	.word	0x40000800
    b5dc:	0000b59d 	.word	0x0000b59d

0000b5e0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    b5e0:	b480      	push	{r7}
    b5e2:	b083      	sub	sp, #12
    b5e4:	af00      	add	r7, sp, #0
    b5e6:	6078      	str	r0, [r7, #4]
    b5e8:	460b      	mov	r3, r1
    b5ea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    b5ec:	687b      	ldr	r3, [r7, #4]
    b5ee:	78fa      	ldrb	r2, [r7, #3]
    b5f0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    b5f2:	bf00      	nop
    b5f4:	370c      	adds	r7, #12
    b5f6:	46bd      	mov	sp, r7
    b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5fc:	4770      	bx	lr

0000b5fe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    b5fe:	b480      	push	{r7}
    b600:	b083      	sub	sp, #12
    b602:	af00      	add	r7, sp, #0
    b604:	6078      	str	r0, [r7, #4]
    b606:	460b      	mov	r3, r1
    b608:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	887a      	ldrh	r2, [r7, #2]
    b60e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    b610:	bf00      	nop
    b612:	370c      	adds	r7, #12
    b614:	46bd      	mov	sp, r7
    b616:	f85d 7b04 	ldr.w	r7, [sp], #4
    b61a:	4770      	bx	lr

0000b61c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    b61c:	b480      	push	{r7}
    b61e:	b083      	sub	sp, #12
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
    b624:	460b      	mov	r3, r1
    b626:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	78fa      	ldrb	r2, [r7, #3]
    b62c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    b62e:	bf00      	nop
    b630:	370c      	adds	r7, #12
    b632:	46bd      	mov	sp, r7
    b634:	f85d 7b04 	ldr.w	r7, [sp], #4
    b638:	4770      	bx	lr

0000b63a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    b63a:	b480      	push	{r7}
    b63c:	b083      	sub	sp, #12
    b63e:	af00      	add	r7, sp, #0
    b640:	6078      	str	r0, [r7, #4]
    b642:	460b      	mov	r3, r1
    b644:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	78fa      	ldrb	r2, [r7, #3]
    b64a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    b64c:	bf00      	nop
    b64e:	370c      	adds	r7, #12
    b650:	46bd      	mov	sp, r7
    b652:	f85d 7b04 	ldr.w	r7, [sp], #4
    b656:	4770      	bx	lr

0000b658 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    b658:	b480      	push	{r7}
    b65a:	b085      	sub	sp, #20
    b65c:	af00      	add	r7, sp, #0
    b65e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	69db      	ldr	r3, [r3, #28]
    b664:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    b666:	68fb      	ldr	r3, [r7, #12]
    b668:	0a1b      	lsrs	r3, r3, #8
    b66a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b66e:	60fb      	str	r3, [r7, #12]
	return tmp;
    b670:	68fb      	ldr	r3, [r7, #12]
}
    b672:	4618      	mov	r0, r3
    b674:	3714      	adds	r7, #20
    b676:	46bd      	mov	sp, r7
    b678:	f85d 7b04 	ldr.w	r7, [sp], #4
    b67c:	4770      	bx	lr

0000b67e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    b67e:	b480      	push	{r7}
    b680:	b083      	sub	sp, #12
    b682:	af00      	add	r7, sp, #0
    b684:	6078      	str	r0, [r7, #4]
    b686:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    b688:	687b      	ldr	r3, [r7, #4]
    b68a:	683a      	ldr	r2, [r7, #0]
    b68c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    b68e:	bf00      	nop
    b690:	370c      	adds	r7, #12
    b692:	46bd      	mov	sp, r7
    b694:	f85d 7b04 	ldr.w	r7, [sp], #4
    b698:	4770      	bx	lr
	...

0000b69c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    b69c:	b580      	push	{r7, lr}
    b69e:	b082      	sub	sp, #8
    b6a0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    b6a2:	4b13      	ldr	r3, [pc, #76]	; (b6f0 <_osc32kctrl_init_sources+0x54>)
    b6a4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    b6a6:	2300      	movs	r3, #0
    b6a8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    b6aa:	f242 018e 	movw	r1, #8334	; 0x208e
    b6ae:	6878      	ldr	r0, [r7, #4]
    b6b0:	4b10      	ldr	r3, [pc, #64]	; (b6f4 <_osc32kctrl_init_sources+0x58>)
    b6b2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    b6b4:	2100      	movs	r1, #0
    b6b6:	6878      	ldr	r0, [r7, #4]
    b6b8:	4b0f      	ldr	r3, [pc, #60]	; (b6f8 <_osc32kctrl_init_sources+0x5c>)
    b6ba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    b6bc:	2100      	movs	r1, #0
    b6be:	6878      	ldr	r0, [r7, #4]
    b6c0:	4b0e      	ldr	r3, [pc, #56]	; (b6fc <_osc32kctrl_init_sources+0x60>)
    b6c2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    b6c4:	6878      	ldr	r0, [r7, #4]
    b6c6:	4b0e      	ldr	r3, [pc, #56]	; (b700 <_osc32kctrl_init_sources+0x64>)
    b6c8:	4798      	blx	r3
    b6ca:	4603      	mov	r3, r0
    b6cc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    b6ce:	887b      	ldrh	r3, [r7, #2]
    b6d0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    b6d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    b6d6:	4619      	mov	r1, r3
    b6d8:	6878      	ldr	r0, [r7, #4]
    b6da:	4b0a      	ldr	r3, [pc, #40]	; (b704 <_osc32kctrl_init_sources+0x68>)
    b6dc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    b6de:	2100      	movs	r1, #0
    b6e0:	6878      	ldr	r0, [r7, #4]
    b6e2:	4b09      	ldr	r3, [pc, #36]	; (b708 <_osc32kctrl_init_sources+0x6c>)
    b6e4:	4798      	blx	r3
	(void)calib;
}
    b6e6:	bf00      	nop
    b6e8:	3708      	adds	r7, #8
    b6ea:	46bd      	mov	sp, r7
    b6ec:	bd80      	pop	{r7, pc}
    b6ee:	bf00      	nop
    b6f0:	40001400 	.word	0x40001400
    b6f4:	0000b5ff 	.word	0x0000b5ff
    b6f8:	0000b61d 	.word	0x0000b61d
    b6fc:	0000b63b 	.word	0x0000b63b
    b700:	0000b659 	.word	0x0000b659
    b704:	0000b67f 	.word	0x0000b67f
    b708:	0000b5e1 	.word	0x0000b5e1

0000b70c <hri_gclk_wait_for_sync>:
{
    b70c:	b480      	push	{r7}
    b70e:	b083      	sub	sp, #12
    b710:	af00      	add	r7, sp, #0
    b712:	6078      	str	r0, [r7, #4]
    b714:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    b716:	bf00      	nop
    b718:	687b      	ldr	r3, [r7, #4]
    b71a:	685a      	ldr	r2, [r3, #4]
    b71c:	683b      	ldr	r3, [r7, #0]
    b71e:	4013      	ands	r3, r2
    b720:	2b00      	cmp	r3, #0
    b722:	d1f9      	bne.n	b718 <hri_gclk_wait_for_sync+0xc>
}
    b724:	bf00      	nop
    b726:	370c      	adds	r7, #12
    b728:	46bd      	mov	sp, r7
    b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b72e:	4770      	bx	lr

0000b730 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    b730:	b480      	push	{r7}
    b732:	b083      	sub	sp, #12
    b734:	af00      	add	r7, sp, #0
    b736:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	685b      	ldr	r3, [r3, #4]
    b73c:	089b      	lsrs	r3, r3, #2
    b73e:	f003 0301 	and.w	r3, r3, #1
    b742:	2b00      	cmp	r3, #0
    b744:	bf14      	ite	ne
    b746:	2301      	movne	r3, #1
    b748:	2300      	moveq	r3, #0
    b74a:	b2db      	uxtb	r3, r3
}
    b74c:	4618      	mov	r0, r3
    b74e:	370c      	adds	r7, #12
    b750:	46bd      	mov	sp, r7
    b752:	f85d 7b04 	ldr.w	r7, [sp], #4
    b756:	4770      	bx	lr

0000b758 <hri_gclk_read_SYNCBUSY_reg>:
{
    b758:	b480      	push	{r7}
    b75a:	b083      	sub	sp, #12
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    b760:	687b      	ldr	r3, [r7, #4]
    b762:	685b      	ldr	r3, [r3, #4]
}
    b764:	4618      	mov	r0, r3
    b766:	370c      	adds	r7, #12
    b768:	46bd      	mov	sp, r7
    b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b76e:	4770      	bx	lr

0000b770 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    b770:	b580      	push	{r7, lr}
    b772:	b086      	sub	sp, #24
    b774:	af00      	add	r7, sp, #0
    b776:	60f8      	str	r0, [r7, #12]
    b778:	460b      	mov	r3, r1
    b77a:	607a      	str	r2, [r7, #4]
    b77c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    b77e:	7afa      	ldrb	r2, [r7, #11]
    b780:	68fb      	ldr	r3, [r7, #12]
    b782:	3208      	adds	r2, #8
    b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b788:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    b78a:	697b      	ldr	r3, [r7, #20]
    b78c:	f023 030f 	bic.w	r3, r3, #15
    b790:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	f003 030f 	and.w	r3, r3, #15
    b798:	697a      	ldr	r2, [r7, #20]
    b79a:	4313      	orrs	r3, r2
    b79c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    b79e:	7afa      	ldrb	r2, [r7, #11]
    b7a0:	68fb      	ldr	r3, [r7, #12]
    b7a2:	3208      	adds	r2, #8
    b7a4:	6979      	ldr	r1, [r7, #20]
    b7a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    b7aa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    b7ae:	68f8      	ldr	r0, [r7, #12]
    b7b0:	4b02      	ldr	r3, [pc, #8]	; (b7bc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    b7b2:	4798      	blx	r3
}
    b7b4:	bf00      	nop
    b7b6:	3718      	adds	r7, #24
    b7b8:	46bd      	mov	sp, r7
    b7ba:	bd80      	pop	{r7, pc}
    b7bc:	0000b70d 	.word	0x0000b70d

0000b7c0 <hri_gclk_write_PCHCTRL_reg>:
{
    b7c0:	b480      	push	{r7}
    b7c2:	b085      	sub	sp, #20
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	60f8      	str	r0, [r7, #12]
    b7c8:	460b      	mov	r3, r1
    b7ca:	607a      	str	r2, [r7, #4]
    b7cc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    b7ce:	7afa      	ldrb	r2, [r7, #11]
    b7d0:	68fb      	ldr	r3, [r7, #12]
    b7d2:	3220      	adds	r2, #32
    b7d4:	6879      	ldr	r1, [r7, #4]
    b7d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    b7da:	bf00      	nop
    b7dc:	3714      	adds	r7, #20
    b7de:	46bd      	mov	sp, r7
    b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7e4:	4770      	bx	lr

0000b7e6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    b7e6:	b480      	push	{r7}
    b7e8:	b085      	sub	sp, #20
    b7ea:	af00      	add	r7, sp, #0
    b7ec:	60f8      	str	r0, [r7, #12]
    b7ee:	460b      	mov	r3, r1
    b7f0:	607a      	str	r2, [r7, #4]
    b7f2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    b7f4:	bf00      	nop
    b7f6:	7afa      	ldrb	r2, [r7, #11]
    b7f8:	68f9      	ldr	r1, [r7, #12]
    b7fa:	4613      	mov	r3, r2
    b7fc:	009b      	lsls	r3, r3, #2
    b7fe:	4413      	add	r3, r2
    b800:	009b      	lsls	r3, r3, #2
    b802:	440b      	add	r3, r1
    b804:	333c      	adds	r3, #60	; 0x3c
    b806:	681a      	ldr	r2, [r3, #0]
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	4013      	ands	r3, r2
    b80c:	2b00      	cmp	r3, #0
    b80e:	d1f2      	bne.n	b7f6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    b810:	bf00      	nop
    b812:	3714      	adds	r7, #20
    b814:	46bd      	mov	sp, r7
    b816:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81a:	4770      	bx	lr

0000b81c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    b81c:	b480      	push	{r7}
    b81e:	b083      	sub	sp, #12
    b820:	af00      	add	r7, sp, #0
    b822:	6078      	str	r0, [r7, #4]
    b824:	460b      	mov	r3, r1
    b826:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    b828:	78fa      	ldrb	r2, [r7, #3]
    b82a:	6879      	ldr	r1, [r7, #4]
    b82c:	4613      	mov	r3, r2
    b82e:	009b      	lsls	r3, r3, #2
    b830:	4413      	add	r3, r2
    b832:	009b      	lsls	r3, r3, #2
    b834:	440b      	add	r3, r1
    b836:	3340      	adds	r3, #64	; 0x40
    b838:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    b83a:	f003 0301 	and.w	r3, r3, #1
    b83e:	2b00      	cmp	r3, #0
    b840:	bf14      	ite	ne
    b842:	2301      	movne	r3, #1
    b844:	2300      	moveq	r3, #0
    b846:	b2db      	uxtb	r3, r3
}
    b848:	4618      	mov	r0, r3
    b84a:	370c      	adds	r7, #12
    b84c:	46bd      	mov	sp, r7
    b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b852:	4770      	bx	lr

0000b854 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    b854:	b480      	push	{r7}
    b856:	b083      	sub	sp, #12
    b858:	af00      	add	r7, sp, #0
    b85a:	6078      	str	r0, [r7, #4]
    b85c:	460b      	mov	r3, r1
    b85e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    b860:	78fa      	ldrb	r2, [r7, #3]
    b862:	6879      	ldr	r1, [r7, #4]
    b864:	4613      	mov	r3, r2
    b866:	009b      	lsls	r3, r3, #2
    b868:	4413      	add	r3, r2
    b86a:	009b      	lsls	r3, r3, #2
    b86c:	440b      	add	r3, r1
    b86e:	3340      	adds	r3, #64	; 0x40
    b870:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    b872:	085b      	lsrs	r3, r3, #1
    b874:	f003 0301 	and.w	r3, r3, #1
    b878:	2b00      	cmp	r3, #0
    b87a:	bf14      	ite	ne
    b87c:	2301      	movne	r3, #1
    b87e:	2300      	moveq	r3, #0
    b880:	b2db      	uxtb	r3, r3
}
    b882:	4618      	mov	r0, r3
    b884:	370c      	adds	r7, #12
    b886:	46bd      	mov	sp, r7
    b888:	f85d 7b04 	ldr.w	r7, [sp], #4
    b88c:	4770      	bx	lr
	...

0000b890 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    b890:	b580      	push	{r7, lr}
    b892:	b082      	sub	sp, #8
    b894:	af00      	add	r7, sp, #0
    b896:	6078      	str	r0, [r7, #4]
    b898:	460b      	mov	r3, r1
    b89a:	70fb      	strb	r3, [r7, #3]
    b89c:	4613      	mov	r3, r2
    b89e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    b8a0:	78fa      	ldrb	r2, [r7, #3]
    b8a2:	6879      	ldr	r1, [r7, #4]
    b8a4:	4613      	mov	r3, r2
    b8a6:	009b      	lsls	r3, r3, #2
    b8a8:	4413      	add	r3, r2
    b8aa:	009b      	lsls	r3, r3, #2
    b8ac:	440b      	add	r3, r1
    b8ae:	3330      	adds	r3, #48	; 0x30
    b8b0:	78ba      	ldrb	r2, [r7, #2]
    b8b2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    b8b4:	78fb      	ldrb	r3, [r7, #3]
    b8b6:	2202      	movs	r2, #2
    b8b8:	4619      	mov	r1, r3
    b8ba:	6878      	ldr	r0, [r7, #4]
    b8bc:	4b02      	ldr	r3, [pc, #8]	; (b8c8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    b8be:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b8c0:	bf00      	nop
    b8c2:	3708      	adds	r7, #8
    b8c4:	46bd      	mov	sp, r7
    b8c6:	bd80      	pop	{r7, pc}
    b8c8:	0000b7e7 	.word	0x0000b7e7

0000b8cc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b084      	sub	sp, #16
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	60f8      	str	r0, [r7, #12]
    b8d4:	460b      	mov	r3, r1
    b8d6:	607a      	str	r2, [r7, #4]
    b8d8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    b8da:	7afa      	ldrb	r2, [r7, #11]
    b8dc:	68f9      	ldr	r1, [r7, #12]
    b8de:	4613      	mov	r3, r2
    b8e0:	009b      	lsls	r3, r3, #2
    b8e2:	4413      	add	r3, r2
    b8e4:	009b      	lsls	r3, r3, #2
    b8e6:	440b      	add	r3, r1
    b8e8:	3334      	adds	r3, #52	; 0x34
    b8ea:	687a      	ldr	r2, [r7, #4]
    b8ec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    b8ee:	7afb      	ldrb	r3, [r7, #11]
    b8f0:	2206      	movs	r2, #6
    b8f2:	4619      	mov	r1, r3
    b8f4:	68f8      	ldr	r0, [r7, #12]
    b8f6:	4b03      	ldr	r3, [pc, #12]	; (b904 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    b8f8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b8fa:	bf00      	nop
    b8fc:	3710      	adds	r7, #16
    b8fe:	46bd      	mov	sp, r7
    b900:	bd80      	pop	{r7, pc}
    b902:	bf00      	nop
    b904:	0000b7e7 	.word	0x0000b7e7

0000b908 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    b908:	b480      	push	{r7}
    b90a:	b085      	sub	sp, #20
    b90c:	af00      	add	r7, sp, #0
    b90e:	60f8      	str	r0, [r7, #12]
    b910:	460b      	mov	r3, r1
    b912:	607a      	str	r2, [r7, #4]
    b914:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    b916:	7afa      	ldrb	r2, [r7, #11]
    b918:	68f9      	ldr	r1, [r7, #12]
    b91a:	4613      	mov	r3, r2
    b91c:	009b      	lsls	r3, r3, #2
    b91e:	4413      	add	r3, r2
    b920:	009b      	lsls	r3, r3, #2
    b922:	440b      	add	r3, r1
    b924:	3338      	adds	r3, #56	; 0x38
    b926:	687a      	ldr	r2, [r7, #4]
    b928:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b92a:	bf00      	nop
    b92c:	3714      	adds	r7, #20
    b92e:	46bd      	mov	sp, r7
    b930:	f85d 7b04 	ldr.w	r7, [sp], #4
    b934:	4770      	bx	lr

0000b936 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    b936:	b480      	push	{r7}
    b938:	b083      	sub	sp, #12
    b93a:	af00      	add	r7, sp, #0
    b93c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    b93e:	687b      	ldr	r3, [r7, #4]
    b940:	691b      	ldr	r3, [r3, #16]
    b942:	085b      	lsrs	r3, r3, #1
    b944:	f003 0301 	and.w	r3, r3, #1
    b948:	2b00      	cmp	r3, #0
    b94a:	bf14      	ite	ne
    b94c:	2301      	movne	r3, #1
    b94e:	2300      	moveq	r3, #0
    b950:	b2db      	uxtb	r3, r3
}
    b952:	4618      	mov	r0, r3
    b954:	370c      	adds	r7, #12
    b956:	46bd      	mov	sp, r7
    b958:	f85d 7b04 	ldr.w	r7, [sp], #4
    b95c:	4770      	bx	lr

0000b95e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    b95e:	b480      	push	{r7}
    b960:	b083      	sub	sp, #12
    b962:	af00      	add	r7, sp, #0
    b964:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    b966:	687b      	ldr	r3, [r7, #4]
    b968:	691b      	ldr	r3, [r3, #16]
    b96a:	0a1b      	lsrs	r3, r3, #8
    b96c:	f003 0301 	and.w	r3, r3, #1
    b970:	2b00      	cmp	r3, #0
    b972:	bf14      	ite	ne
    b974:	2301      	movne	r3, #1
    b976:	2300      	moveq	r3, #0
    b978:	b2db      	uxtb	r3, r3
}
    b97a:	4618      	mov	r0, r3
    b97c:	370c      	adds	r7, #12
    b97e:	46bd      	mov	sp, r7
    b980:	f85d 7b04 	ldr.w	r7, [sp], #4
    b984:	4770      	bx	lr

0000b986 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    b986:	b480      	push	{r7}
    b988:	b085      	sub	sp, #20
    b98a:	af00      	add	r7, sp, #0
    b98c:	6078      	str	r0, [r7, #4]
    b98e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b990:	687b      	ldr	r3, [r7, #4]
    b992:	691b      	ldr	r3, [r3, #16]
    b994:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b996:	68fa      	ldr	r2, [r7, #12]
    b998:	683b      	ldr	r3, [r7, #0]
    b99a:	4013      	ands	r3, r2
    b99c:	60fb      	str	r3, [r7, #12]
	return tmp;
    b99e:	68fb      	ldr	r3, [r7, #12]
}
    b9a0:	4618      	mov	r0, r3
    b9a2:	3714      	adds	r7, #20
    b9a4:	46bd      	mov	sp, r7
    b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9aa:	4770      	bx	lr

0000b9ac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    b9ac:	b480      	push	{r7}
    b9ae:	b085      	sub	sp, #20
    b9b0:	af00      	add	r7, sp, #0
    b9b2:	60f8      	str	r0, [r7, #12]
    b9b4:	460b      	mov	r3, r1
    b9b6:	607a      	str	r2, [r7, #4]
    b9b8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    b9ba:	7afb      	ldrb	r3, [r7, #11]
    b9bc:	68fa      	ldr	r2, [r7, #12]
    b9be:	3304      	adds	r3, #4
    b9c0:	009b      	lsls	r3, r3, #2
    b9c2:	4413      	add	r3, r2
    b9c4:	687a      	ldr	r2, [r7, #4]
    b9c6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b9c8:	bf00      	nop
    b9ca:	3714      	adds	r7, #20
    b9cc:	46bd      	mov	sp, r7
    b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9d2:	4770      	bx	lr

0000b9d4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    b9d4:	b480      	push	{r7}
    b9d6:	b083      	sub	sp, #12
    b9d8:	af00      	add	r7, sp, #0
    b9da:	6078      	str	r0, [r7, #4]
    b9dc:	460b      	mov	r3, r1
    b9de:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    b9e0:	687b      	ldr	r3, [r7, #4]
    b9e2:	78fa      	ldrb	r2, [r7, #3]
    b9e4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    b9e6:	bf00      	nop
    b9e8:	370c      	adds	r7, #12
    b9ea:	46bd      	mov	sp, r7
    b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9f0:	4770      	bx	lr

0000b9f2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    b9f2:	b480      	push	{r7}
    b9f4:	b085      	sub	sp, #20
    b9f6:	af00      	add	r7, sp, #0
    b9f8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b9fa:	687b      	ldr	r3, [r7, #4]
    b9fc:	f893 3020 	ldrb.w	r3, [r3, #32]
    ba00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    ba02:	7bfb      	ldrb	r3, [r7, #15]
    ba04:	f003 0301 	and.w	r3, r3, #1
    ba08:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ba0a:	7bfb      	ldrb	r3, [r7, #15]
    ba0c:	2b00      	cmp	r3, #0
    ba0e:	bf14      	ite	ne
    ba10:	2301      	movne	r3, #1
    ba12:	2300      	moveq	r3, #0
    ba14:	b2db      	uxtb	r3, r3
}
    ba16:	4618      	mov	r0, r3
    ba18:	3714      	adds	r7, #20
    ba1a:	46bd      	mov	sp, r7
    ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba20:	4770      	bx	lr

0000ba22 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    ba22:	b480      	push	{r7}
    ba24:	b083      	sub	sp, #12
    ba26:	af00      	add	r7, sp, #0
    ba28:	6078      	str	r0, [r7, #4]
    ba2a:	460b      	mov	r3, r1
    ba2c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    ba2e:	687b      	ldr	r3, [r7, #4]
    ba30:	78fa      	ldrb	r2, [r7, #3]
    ba32:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    ba36:	bf00      	nop
    ba38:	370c      	adds	r7, #12
    ba3a:	46bd      	mov	sp, r7
    ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba40:	4770      	bx	lr

0000ba42 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    ba42:	b480      	push	{r7}
    ba44:	b083      	sub	sp, #12
    ba46:	af00      	add	r7, sp, #0
    ba48:	6078      	str	r0, [r7, #4]
    ba4a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    ba4c:	687b      	ldr	r3, [r7, #4]
    ba4e:	683a      	ldr	r2, [r7, #0]
    ba50:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    ba52:	bf00      	nop
    ba54:	370c      	adds	r7, #12
    ba56:	46bd      	mov	sp, r7
    ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba5c:	4770      	bx	lr

0000ba5e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    ba5e:	b480      	push	{r7}
    ba60:	b083      	sub	sp, #12
    ba62:	af00      	add	r7, sp, #0
    ba64:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    ba66:	687b      	ldr	r3, [r7, #4]
    ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    ba6a:	4618      	mov	r0, r3
    ba6c:	370c      	adds	r7, #12
    ba6e:	46bd      	mov	sp, r7
    ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba74:	4770      	bx	lr

0000ba76 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    ba76:	b480      	push	{r7}
    ba78:	b083      	sub	sp, #12
    ba7a:	af00      	add	r7, sp, #0
    ba7c:	6078      	str	r0, [r7, #4]
    ba7e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    ba80:	687b      	ldr	r3, [r7, #4]
    ba82:	683a      	ldr	r2, [r7, #0]
    ba84:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    ba86:	bf00      	nop
    ba88:	370c      	adds	r7, #12
    ba8a:	46bd      	mov	sp, r7
    ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba90:	4770      	bx	lr

0000ba92 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    ba92:	b480      	push	{r7}
    ba94:	b085      	sub	sp, #20
    ba96:	af00      	add	r7, sp, #0
    ba98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    baa0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    baa2:	7bfb      	ldrb	r3, [r7, #15]
    baa4:	085b      	lsrs	r3, r3, #1
    baa6:	b2db      	uxtb	r3, r3
    baa8:	f003 0301 	and.w	r3, r3, #1
    baac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    baae:	7bfb      	ldrb	r3, [r7, #15]
    bab0:	2b00      	cmp	r3, #0
    bab2:	bf14      	ite	ne
    bab4:	2301      	movne	r3, #1
    bab6:	2300      	moveq	r3, #0
    bab8:	b2db      	uxtb	r3, r3
}
    baba:	4618      	mov	r0, r3
    babc:	3714      	adds	r7, #20
    babe:	46bd      	mov	sp, r7
    bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac4:	4770      	bx	lr

0000bac6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    bac6:	b480      	push	{r7}
    bac8:	b085      	sub	sp, #20
    baca:	af00      	add	r7, sp, #0
    bacc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    bace:	687b      	ldr	r3, [r7, #4]
    bad0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    bad4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    bad6:	7bfb      	ldrb	r3, [r7, #15]
    bad8:	089b      	lsrs	r3, r3, #2
    bada:	b2db      	uxtb	r3, r3
    badc:	f003 0301 	and.w	r3, r3, #1
    bae0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bae2:	7bfb      	ldrb	r3, [r7, #15]
    bae4:	2b00      	cmp	r3, #0
    bae6:	bf14      	ite	ne
    bae8:	2301      	movne	r3, #1
    baea:	2300      	moveq	r3, #0
    baec:	b2db      	uxtb	r3, r3
}
    baee:	4618      	mov	r0, r3
    baf0:	3714      	adds	r7, #20
    baf2:	46bd      	mov	sp, r7
    baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    baf8:	4770      	bx	lr

0000bafa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    bafa:	b480      	push	{r7}
    bafc:	b085      	sub	sp, #20
    bafe:	af00      	add	r7, sp, #0
    bb00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    bb02:	687b      	ldr	r3, [r7, #4]
    bb04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    bb08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    bb0a:	7bfb      	ldrb	r3, [r7, #15]
    bb0c:	08db      	lsrs	r3, r3, #3
    bb0e:	b2db      	uxtb	r3, r3
    bb10:	f003 0301 	and.w	r3, r3, #1
    bb14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bb16:	7bfb      	ldrb	r3, [r7, #15]
    bb18:	2b00      	cmp	r3, #0
    bb1a:	bf14      	ite	ne
    bb1c:	2301      	movne	r3, #1
    bb1e:	2300      	moveq	r3, #0
    bb20:	b2db      	uxtb	r3, r3
}
    bb22:	4618      	mov	r0, r3
    bb24:	3714      	adds	r7, #20
    bb26:	46bd      	mov	sp, r7
    bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb2c:	4770      	bx	lr

0000bb2e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    bb2e:	b480      	push	{r7}
    bb30:	b085      	sub	sp, #20
    bb32:	af00      	add	r7, sp, #0
    bb34:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    bb36:	687b      	ldr	r3, [r7, #4]
    bb38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    bb3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    bb3e:	7bfb      	ldrb	r3, [r7, #15]
    bb40:	091b      	lsrs	r3, r3, #4
    bb42:	b2db      	uxtb	r3, r3
    bb44:	f003 0301 	and.w	r3, r3, #1
    bb48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bb4a:	7bfb      	ldrb	r3, [r7, #15]
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	bf14      	ite	ne
    bb50:	2301      	movne	r3, #1
    bb52:	2300      	moveq	r3, #0
    bb54:	b2db      	uxtb	r3, r3
}
    bb56:	4618      	mov	r0, r3
    bb58:	3714      	adds	r7, #20
    bb5a:	46bd      	mov	sp, r7
    bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb60:	4770      	bx	lr
	...

0000bb64 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    bb64:	b580      	push	{r7, lr}
    bb66:	b082      	sub	sp, #8
    bb68:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    bb6a:	4b0a      	ldr	r3, [pc, #40]	; (bb94 <_oscctrl_init_sources+0x30>)
    bb6c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    bb6e:	4a0a      	ldr	r2, [pc, #40]	; (bb98 <_oscctrl_init_sources+0x34>)
    bb70:	2101      	movs	r1, #1
    bb72:	6878      	ldr	r0, [r7, #4]
    bb74:	4b09      	ldr	r3, [pc, #36]	; (bb9c <_oscctrl_init_sources+0x38>)
    bb76:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    bb78:	bf00      	nop
    bb7a:	6878      	ldr	r0, [r7, #4]
    bb7c:	4b08      	ldr	r3, [pc, #32]	; (bba0 <_oscctrl_init_sources+0x3c>)
    bb7e:	4798      	blx	r3
    bb80:	4603      	mov	r3, r0
    bb82:	f083 0301 	eor.w	r3, r3, #1
    bb86:	b2db      	uxtb	r3, r3
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d1f6      	bne.n	bb7a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    bb8c:	bf00      	nop
    bb8e:	3708      	adds	r7, #8
    bb90:	46bd      	mov	sp, r7
    bb92:	bd80      	pop	{r7, pc}
    bb94:	40001000 	.word	0x40001000
    bb98:	03002646 	.word	0x03002646
    bb9c:	0000b9ad 	.word	0x0000b9ad
    bba0:	0000b937 	.word	0x0000b937

0000bba4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	b084      	sub	sp, #16
    bba8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    bbaa:	4b6b      	ldr	r3, [pc, #428]	; (bd58 <_oscctrl_init_referenced_generators+0x1b4>)
    bbac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    bbae:	2204      	movs	r2, #4
    bbb0:	2100      	movs	r1, #0
    bbb2:	486a      	ldr	r0, [pc, #424]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bbb4:	4b6a      	ldr	r3, [pc, #424]	; (bd60 <_oscctrl_init_referenced_generators+0x1bc>)
    bbb6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    bbb8:	bf00      	nop
    bbba:	4868      	ldr	r0, [pc, #416]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bbbc:	4b69      	ldr	r3, [pc, #420]	; (bd64 <_oscctrl_init_referenced_generators+0x1c0>)
    bbbe:	4798      	blx	r3
    bbc0:	4603      	mov	r3, r0
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d1f9      	bne.n	bbba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    bbc6:	2100      	movs	r1, #0
    bbc8:	68f8      	ldr	r0, [r7, #12]
    bbca:	4b67      	ldr	r3, [pc, #412]	; (bd68 <_oscctrl_init_referenced_generators+0x1c4>)
    bbcc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    bbce:	4967      	ldr	r1, [pc, #412]	; (bd6c <_oscctrl_init_referenced_generators+0x1c8>)
    bbd0:	68f8      	ldr	r0, [r7, #12]
    bbd2:	4b67      	ldr	r3, [pc, #412]	; (bd70 <_oscctrl_init_referenced_generators+0x1cc>)
    bbd4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    bbd6:	bf00      	nop
    bbd8:	68f8      	ldr	r0, [r7, #12]
    bbda:	4b66      	ldr	r3, [pc, #408]	; (bd74 <_oscctrl_init_referenced_generators+0x1d0>)
    bbdc:	4798      	blx	r3
    bbde:	4603      	mov	r3, r0
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	d1f9      	bne.n	bbd8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    bbe4:	2100      	movs	r1, #0
    bbe6:	68f8      	ldr	r0, [r7, #12]
    bbe8:	4b63      	ldr	r3, [pc, #396]	; (bd78 <_oscctrl_init_referenced_generators+0x1d4>)
    bbea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    bbec:	bf00      	nop
    bbee:	68f8      	ldr	r0, [r7, #12]
    bbf0:	4b62      	ldr	r3, [pc, #392]	; (bd7c <_oscctrl_init_referenced_generators+0x1d8>)
    bbf2:	4798      	blx	r3
    bbf4:	4603      	mov	r3, r0
    bbf6:	2b00      	cmp	r3, #0
    bbf8:	d1f9      	bne.n	bbee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    bbfa:	2302      	movs	r3, #2
    bbfc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    bbfe:	7afb      	ldrb	r3, [r7, #11]
    bc00:	4619      	mov	r1, r3
    bc02:	68f8      	ldr	r0, [r7, #12]
    bc04:	4b58      	ldr	r3, [pc, #352]	; (bd68 <_oscctrl_init_referenced_generators+0x1c4>)
    bc06:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    bc08:	bf00      	nop
    bc0a:	68f8      	ldr	r0, [r7, #12]
    bc0c:	4b5c      	ldr	r3, [pc, #368]	; (bd80 <_oscctrl_init_referenced_generators+0x1dc>)
    bc0e:	4798      	blx	r3
    bc10:	4603      	mov	r3, r0
    bc12:	2b00      	cmp	r3, #0
    bc14:	d1f9      	bne.n	bc0a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    bc16:	68f8      	ldr	r0, [r7, #12]
    bc18:	4b5a      	ldr	r3, [pc, #360]	; (bd84 <_oscctrl_init_referenced_generators+0x1e0>)
    bc1a:	4798      	blx	r3
    bc1c:	4603      	mov	r3, r0
    bc1e:	4619      	mov	r1, r3
    bc20:	68f8      	ldr	r0, [r7, #12]
    bc22:	4b59      	ldr	r3, [pc, #356]	; (bd88 <_oscctrl_init_referenced_generators+0x1e4>)
    bc24:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    bc26:	bf00      	nop
    bc28:	68f8      	ldr	r0, [r7, #12]
    bc2a:	4b58      	ldr	r3, [pc, #352]	; (bd8c <_oscctrl_init_referenced_generators+0x1e8>)
    bc2c:	4798      	blx	r3
    bc2e:	4603      	mov	r3, r0
    bc30:	2b00      	cmp	r3, #0
    bc32:	d1f9      	bne.n	bc28 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    bc34:	2319      	movs	r3, #25
    bc36:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    bc38:	7afb      	ldrb	r3, [r7, #11]
    bc3a:	4619      	mov	r1, r3
    bc3c:	68f8      	ldr	r0, [r7, #12]
    bc3e:	4b4e      	ldr	r3, [pc, #312]	; (bd78 <_oscctrl_init_referenced_generators+0x1d4>)
    bc40:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    bc42:	bf00      	nop
    bc44:	68f8      	ldr	r0, [r7, #12]
    bc46:	4b4d      	ldr	r3, [pc, #308]	; (bd7c <_oscctrl_init_referenced_generators+0x1d8>)
    bc48:	4798      	blx	r3
    bc4a:	4603      	mov	r3, r0
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d1f9      	bne.n	bc44 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    bc50:	2245      	movs	r2, #69	; 0x45
    bc52:	2101      	movs	r1, #1
    bc54:	4841      	ldr	r0, [pc, #260]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bc56:	4b4e      	ldr	r3, [pc, #312]	; (bd90 <_oscctrl_init_referenced_generators+0x1ec>)
    bc58:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    bc5a:	223b      	movs	r2, #59	; 0x3b
    bc5c:	2100      	movs	r1, #0
    bc5e:	68f8      	ldr	r0, [r7, #12]
    bc60:	4b4c      	ldr	r3, [pc, #304]	; (bd94 <_oscctrl_init_referenced_generators+0x1f0>)
    bc62:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    bc64:	f44f 6201 	mov.w	r2, #2064	; 0x810
    bc68:	2100      	movs	r1, #0
    bc6a:	68f8      	ldr	r0, [r7, #12]
    bc6c:	4b4a      	ldr	r3, [pc, #296]	; (bd98 <_oscctrl_init_referenced_generators+0x1f4>)
    bc6e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    bc70:	2242      	movs	r2, #66	; 0x42
    bc72:	2100      	movs	r1, #0
    bc74:	68f8      	ldr	r0, [r7, #12]
    bc76:	4b49      	ldr	r3, [pc, #292]	; (bd9c <_oscctrl_init_referenced_generators+0x1f8>)
    bc78:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    bc7a:	4a49      	ldr	r2, [pc, #292]	; (bda0 <_oscctrl_init_referenced_generators+0x1fc>)
    bc7c:	2101      	movs	r1, #1
    bc7e:	68f8      	ldr	r0, [r7, #12]
    bc80:	4b44      	ldr	r3, [pc, #272]	; (bd94 <_oscctrl_init_referenced_generators+0x1f0>)
    bc82:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    bc84:	f44f 6203 	mov.w	r2, #2096	; 0x830
    bc88:	2101      	movs	r1, #1
    bc8a:	68f8      	ldr	r0, [r7, #12]
    bc8c:	4b42      	ldr	r3, [pc, #264]	; (bd98 <_oscctrl_init_referenced_generators+0x1f4>)
    bc8e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    bc90:	2202      	movs	r2, #2
    bc92:	2101      	movs	r1, #1
    bc94:	68f8      	ldr	r0, [r7, #12]
    bc96:	4b41      	ldr	r3, [pc, #260]	; (bd9c <_oscctrl_init_referenced_generators+0x1f8>)
    bc98:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    bc9a:	68f8      	ldr	r0, [r7, #12]
    bc9c:	4b41      	ldr	r3, [pc, #260]	; (bda4 <_oscctrl_init_referenced_generators+0x200>)
    bc9e:	4798      	blx	r3
    bca0:	4603      	mov	r3, r0
    bca2:	2b00      	cmp	r3, #0
    bca4:	d00c      	beq.n	bcc0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    bca6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    bcaa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    bcac:	bf00      	nop
    bcae:	6879      	ldr	r1, [r7, #4]
    bcb0:	68f8      	ldr	r0, [r7, #12]
    bcb2:	4b3d      	ldr	r3, [pc, #244]	; (bda8 <_oscctrl_init_referenced_generators+0x204>)
    bcb4:	4798      	blx	r3
    bcb6:	4602      	mov	r2, r0
    bcb8:	687b      	ldr	r3, [r7, #4]
    bcba:	429a      	cmp	r2, r3
    bcbc:	d1f7      	bne.n	bcae <_oscctrl_init_referenced_generators+0x10a>
    bcbe:	e009      	b.n	bcd4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    bcc0:	bf00      	nop
    bcc2:	68f8      	ldr	r0, [r7, #12]
    bcc4:	4b39      	ldr	r3, [pc, #228]	; (bdac <_oscctrl_init_referenced_generators+0x208>)
    bcc6:	4798      	blx	r3
    bcc8:	4603      	mov	r3, r0
    bcca:	f083 0301 	eor.w	r3, r3, #1
    bcce:	b2db      	uxtb	r3, r3
    bcd0:	2b00      	cmp	r3, #0
    bcd2:	d1f6      	bne.n	bcc2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    bcd4:	bf00      	nop
    bcd6:	2100      	movs	r1, #0
    bcd8:	68f8      	ldr	r0, [r7, #12]
    bcda:	4b35      	ldr	r3, [pc, #212]	; (bdb0 <_oscctrl_init_referenced_generators+0x20c>)
    bcdc:	4798      	blx	r3
    bcde:	4603      	mov	r3, r0
    bce0:	f083 0301 	eor.w	r3, r3, #1
    bce4:	b2db      	uxtb	r3, r3
    bce6:	2b00      	cmp	r3, #0
    bce8:	d009      	beq.n	bcfe <_oscctrl_init_referenced_generators+0x15a>
    bcea:	2100      	movs	r1, #0
    bcec:	68f8      	ldr	r0, [r7, #12]
    bcee:	4b31      	ldr	r3, [pc, #196]	; (bdb4 <_oscctrl_init_referenced_generators+0x210>)
    bcf0:	4798      	blx	r3
    bcf2:	4603      	mov	r3, r0
    bcf4:	f083 0301 	eor.w	r3, r3, #1
    bcf8:	b2db      	uxtb	r3, r3
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	d1eb      	bne.n	bcd6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    bcfe:	bf00      	nop
    bd00:	2101      	movs	r1, #1
    bd02:	68f8      	ldr	r0, [r7, #12]
    bd04:	4b2a      	ldr	r3, [pc, #168]	; (bdb0 <_oscctrl_init_referenced_generators+0x20c>)
    bd06:	4798      	blx	r3
    bd08:	4603      	mov	r3, r0
    bd0a:	f083 0301 	eor.w	r3, r3, #1
    bd0e:	b2db      	uxtb	r3, r3
    bd10:	2b00      	cmp	r3, #0
    bd12:	d009      	beq.n	bd28 <_oscctrl_init_referenced_generators+0x184>
    bd14:	2101      	movs	r1, #1
    bd16:	68f8      	ldr	r0, [r7, #12]
    bd18:	4b26      	ldr	r3, [pc, #152]	; (bdb4 <_oscctrl_init_referenced_generators+0x210>)
    bd1a:	4798      	blx	r3
    bd1c:	4603      	mov	r3, r0
    bd1e:	f083 0301 	eor.w	r3, r3, #1
    bd22:	b2db      	uxtb	r3, r3
    bd24:	2b00      	cmp	r3, #0
    bd26:	d1eb      	bne.n	bd00 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    bd28:	bf00      	nop
    bd2a:	480c      	ldr	r0, [pc, #48]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bd2c:	4b22      	ldr	r3, [pc, #136]	; (bdb8 <_oscctrl_init_referenced_generators+0x214>)
    bd2e:	4798      	blx	r3
    bd30:	4603      	mov	r3, r0
    bd32:	2b00      	cmp	r3, #0
    bd34:	d1f9      	bne.n	bd2a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    bd36:	2207      	movs	r2, #7
    bd38:	2100      	movs	r1, #0
    bd3a:	4808      	ldr	r0, [pc, #32]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bd3c:	4b08      	ldr	r3, [pc, #32]	; (bd60 <_oscctrl_init_referenced_generators+0x1bc>)
    bd3e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    bd40:	bf00      	nop
    bd42:	4806      	ldr	r0, [pc, #24]	; (bd5c <_oscctrl_init_referenced_generators+0x1b8>)
    bd44:	4b07      	ldr	r3, [pc, #28]	; (bd64 <_oscctrl_init_referenced_generators+0x1c0>)
    bd46:	4798      	blx	r3
    bd48:	4603      	mov	r3, r0
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d1f9      	bne.n	bd42 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    bd4e:	bf00      	nop
    bd50:	3710      	adds	r7, #16
    bd52:	46bd      	mov	sp, r7
    bd54:	bd80      	pop	{r7, pc}
    bd56:	bf00      	nop
    bd58:	40001000 	.word	0x40001000
    bd5c:	40001c00 	.word	0x40001c00
    bd60:	0000b771 	.word	0x0000b771
    bd64:	0000b731 	.word	0x0000b731
    bd68:	0000b9d5 	.word	0x0000b9d5
    bd6c:	0401bb80 	.word	0x0401bb80
    bd70:	0000ba77 	.word	0x0000ba77
    bd74:	0000bb2f 	.word	0x0000bb2f
    bd78:	0000ba23 	.word	0x0000ba23
    bd7c:	0000bac7 	.word	0x0000bac7
    bd80:	0000ba93 	.word	0x0000ba93
    bd84:	0000ba5f 	.word	0x0000ba5f
    bd88:	0000ba43 	.word	0x0000ba43
    bd8c:	0000bafb 	.word	0x0000bafb
    bd90:	0000b7c1 	.word	0x0000b7c1
    bd94:	0000b8cd 	.word	0x0000b8cd
    bd98:	0000b909 	.word	0x0000b909
    bd9c:	0000b891 	.word	0x0000b891
    bda0:	000407a0 	.word	0x000407a0
    bda4:	0000b9f3 	.word	0x0000b9f3
    bda8:	0000b987 	.word	0x0000b987
    bdac:	0000b95f 	.word	0x0000b95f
    bdb0:	0000b81d 	.word	0x0000b81d
    bdb4:	0000b855 	.word	0x0000b855
    bdb8:	0000b759 	.word	0x0000b759

0000bdbc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    bdbc:	b480      	push	{r7}
    bdbe:	b083      	sub	sp, #12
    bdc0:	af00      	add	r7, sp, #0
    bdc2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    bdc4:	687b      	ldr	r3, [r7, #4]
    bdc6:	69db      	ldr	r3, [r3, #28]
    bdc8:	0a9b      	lsrs	r3, r3, #10
    bdca:	f003 0301 	and.w	r3, r3, #1
    bdce:	2b00      	cmp	r3, #0
    bdd0:	bf14      	ite	ne
    bdd2:	2301      	movne	r3, #1
    bdd4:	2300      	moveq	r3, #0
    bdd6:	b2db      	uxtb	r3, r3
}
    bdd8:	4618      	mov	r0, r3
    bdda:	370c      	adds	r7, #12
    bddc:	46bd      	mov	sp, r7
    bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
    bde2:	4770      	bx	lr

0000bde4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    bde4:	b480      	push	{r7}
    bde6:	b083      	sub	sp, #12
    bde8:	af00      	add	r7, sp, #0
    bdea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bdf2:	61da      	str	r2, [r3, #28]
}
    bdf4:	bf00      	nop
    bdf6:	370c      	adds	r7, #12
    bdf8:	46bd      	mov	sp, r7
    bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdfe:	4770      	bx	lr

0000be00 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    be00:	b480      	push	{r7}
    be02:	b083      	sub	sp, #12
    be04:	af00      	add	r7, sp, #0
    be06:	6078      	str	r0, [r7, #4]
    be08:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	683a      	ldr	r2, [r7, #0]
    be0e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    be10:	bf00      	nop
    be12:	370c      	adds	r7, #12
    be14:	46bd      	mov	sp, r7
    be16:	f85d 7b04 	ldr.w	r7, [sp], #4
    be1a:	4770      	bx	lr

0000be1c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    be1c:	b480      	push	{r7}
    be1e:	b083      	sub	sp, #12
    be20:	af00      	add	r7, sp, #0
    be22:	6078      	str	r0, [r7, #4]
    be24:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    be26:	687b      	ldr	r3, [r7, #4]
    be28:	683a      	ldr	r2, [r7, #0]
    be2a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    be2c:	bf00      	nop
    be2e:	370c      	adds	r7, #12
    be30:	46bd      	mov	sp, r7
    be32:	f85d 7b04 	ldr.w	r7, [sp], #4
    be36:	4770      	bx	lr

0000be38 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    be38:	b480      	push	{r7}
    be3a:	b083      	sub	sp, #12
    be3c:	af00      	add	r7, sp, #0
    be3e:	6078      	str	r0, [r7, #4]
    be40:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    be42:	687b      	ldr	r3, [r7, #4]
    be44:	683a      	ldr	r2, [r7, #0]
    be46:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    be48:	bf00      	nop
    be4a:	370c      	adds	r7, #12
    be4c:	46bd      	mov	sp, r7
    be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    be52:	4770      	bx	lr

0000be54 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    be54:	b480      	push	{r7}
    be56:	b083      	sub	sp, #12
    be58:	af00      	add	r7, sp, #0
    be5a:	6078      	str	r0, [r7, #4]
    be5c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    be5e:	687b      	ldr	r3, [r7, #4]
    be60:	683a      	ldr	r2, [r7, #0]
    be62:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    be64:	bf00      	nop
    be66:	370c      	adds	r7, #12
    be68:	46bd      	mov	sp, r7
    be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be6e:	4770      	bx	lr

0000be70 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    be70:	b480      	push	{r7}
    be72:	b085      	sub	sp, #20
    be74:	af00      	add	r7, sp, #0
    be76:	6078      	str	r0, [r7, #4]
    be78:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    be7a:	687b      	ldr	r3, [r7, #4]
    be7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be7e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    be80:	68fb      	ldr	r3, [r7, #12]
    be82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    be86:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    be88:	683b      	ldr	r3, [r7, #0]
    be8a:	b2db      	uxtb	r3, r3
    be8c:	68fa      	ldr	r2, [r7, #12]
    be8e:	4313      	orrs	r3, r2
    be90:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    be92:	687b      	ldr	r3, [r7, #4]
    be94:	68fa      	ldr	r2, [r7, #12]
    be96:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    be98:	bf00      	nop
    be9a:	3714      	adds	r7, #20
    be9c:	46bd      	mov	sp, r7
    be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bea2:	4770      	bx	lr

0000bea4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    bea4:	b480      	push	{r7}
    bea6:	b085      	sub	sp, #20
    bea8:	af00      	add	r7, sp, #0
    beaa:	6078      	str	r0, [r7, #4]
    beac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    beb2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    beb4:	68fb      	ldr	r3, [r7, #12]
    beb6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    beba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    bebc:	683b      	ldr	r3, [r7, #0]
    bebe:	041b      	lsls	r3, r3, #16
    bec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    bec4:	68fa      	ldr	r2, [r7, #12]
    bec6:	4313      	orrs	r3, r2
    bec8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    beca:	687b      	ldr	r3, [r7, #4]
    becc:	68fa      	ldr	r2, [r7, #12]
    bece:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    bed0:	bf00      	nop
    bed2:	3714      	adds	r7, #20
    bed4:	46bd      	mov	sp, r7
    bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    beda:	4770      	bx	lr

0000bedc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    bedc:	b480      	push	{r7}
    bede:	b083      	sub	sp, #12
    bee0:	af00      	add	r7, sp, #0
    bee2:	6078      	str	r0, [r7, #4]
    bee4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    bee6:	687b      	ldr	r3, [r7, #4]
    bee8:	683a      	ldr	r2, [r7, #0]
    beea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    beec:	bf00      	nop
    beee:	370c      	adds	r7, #12
    bef0:	46bd      	mov	sp, r7
    bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bef6:	4770      	bx	lr

0000bef8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    bef8:	b480      	push	{r7}
    befa:	b083      	sub	sp, #12
    befc:	af00      	add	r7, sp, #0
    befe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    bf00:	687b      	ldr	r3, [r7, #4]
    bf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    bf04:	4618      	mov	r0, r3
    bf06:	370c      	adds	r7, #12
    bf08:	46bd      	mov	sp, r7
    bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf0e:	4770      	bx	lr

0000bf10 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    bf10:	b480      	push	{r7}
    bf12:	b085      	sub	sp, #20
    bf14:	af00      	add	r7, sp, #0
    bf16:	60f8      	str	r0, [r7, #12]
    bf18:	60b9      	str	r1, [r7, #8]
    bf1a:	607a      	str	r2, [r7, #4]
	while (count--) {
    bf1c:	e007      	b.n	bf2e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    bf1e:	68fb      	ldr	r3, [r7, #12]
    bf20:	1c5a      	adds	r2, r3, #1
    bf22:	60fa      	str	r2, [r7, #12]
    bf24:	68ba      	ldr	r2, [r7, #8]
    bf26:	1c51      	adds	r1, r2, #1
    bf28:	60b9      	str	r1, [r7, #8]
    bf2a:	7812      	ldrb	r2, [r2, #0]
    bf2c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	1e5a      	subs	r2, r3, #1
    bf32:	607a      	str	r2, [r7, #4]
    bf34:	2b00      	cmp	r3, #0
    bf36:	d1f2      	bne.n	bf1e <_qspi_memcpy+0xe>
	}
}
    bf38:	bf00      	nop
    bf3a:	3714      	adds	r7, #20
    bf3c:	46bd      	mov	sp, r7
    bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf42:	4770      	bx	lr

0000bf44 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    bf44:	b580      	push	{r7, lr}
    bf46:	b082      	sub	sp, #8
    bf48:	af00      	add	r7, sp, #0
    bf4a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    bf4c:	4903      	ldr	r1, [pc, #12]	; (bf5c <_qspi_end_transfer+0x18>)
    bf4e:	6878      	ldr	r0, [r7, #4]
    bf50:	4b03      	ldr	r3, [pc, #12]	; (bf60 <_qspi_end_transfer+0x1c>)
    bf52:	4798      	blx	r3
}
    bf54:	bf00      	nop
    bf56:	3708      	adds	r7, #8
    bf58:	46bd      	mov	sp, r7
    bf5a:	bd80      	pop	{r7, pc}
    bf5c:	01000002 	.word	0x01000002
    bf60:	0000be01 	.word	0x0000be01

0000bf64 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    bf64:	b580      	push	{r7, lr}
    bf66:	b082      	sub	sp, #8
    bf68:	af00      	add	r7, sp, #0
    bf6a:	6078      	str	r0, [r7, #4]
    bf6c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    bf6e:	687b      	ldr	r3, [r7, #4]
    bf70:	2b00      	cmp	r3, #0
    bf72:	d004      	beq.n	bf7e <_qspi_sync_init+0x1a>
    bf74:	683b      	ldr	r3, [r7, #0]
    bf76:	2b00      	cmp	r3, #0
    bf78:	d001      	beq.n	bf7e <_qspi_sync_init+0x1a>
    bf7a:	2301      	movs	r3, #1
    bf7c:	e000      	b.n	bf80 <_qspi_sync_init+0x1c>
    bf7e:	2300      	movs	r3, #0
    bf80:	f003 0301 	and.w	r3, r3, #1
    bf84:	b2db      	uxtb	r3, r3
    bf86:	2240      	movs	r2, #64	; 0x40
    bf88:	490c      	ldr	r1, [pc, #48]	; (bfbc <_qspi_sync_init+0x58>)
    bf8a:	4618      	mov	r0, r3
    bf8c:	4b0c      	ldr	r3, [pc, #48]	; (bfc0 <_qspi_sync_init+0x5c>)
    bf8e:	4798      	blx	r3
	dev->prvt = hw;
    bf90:	687b      	ldr	r3, [r7, #4]
    bf92:	683a      	ldr	r2, [r7, #0]
    bf94:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    bf96:	687b      	ldr	r3, [r7, #4]
    bf98:	681b      	ldr	r3, [r3, #0]
    bf9a:	2101      	movs	r1, #1
    bf9c:	4618      	mov	r0, r3
    bf9e:	4b09      	ldr	r3, [pc, #36]	; (bfc4 <_qspi_sync_init+0x60>)
    bfa0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    bfa2:	4909      	ldr	r1, [pc, #36]	; (bfc8 <_qspi_sync_init+0x64>)
    bfa4:	6838      	ldr	r0, [r7, #0]
    bfa6:	4b09      	ldr	r3, [pc, #36]	; (bfcc <_qspi_sync_init+0x68>)
    bfa8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    bfaa:	4909      	ldr	r1, [pc, #36]	; (bfd0 <_qspi_sync_init+0x6c>)
    bfac:	6838      	ldr	r0, [r7, #0]
    bfae:	4b09      	ldr	r3, [pc, #36]	; (bfd4 <_qspi_sync_init+0x70>)
    bfb0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    bfb2:	2300      	movs	r3, #0
}
    bfb4:	4618      	mov	r0, r3
    bfb6:	3708      	adds	r7, #8
    bfb8:	46bd      	mov	sp, r7
    bfba:	bd80      	pop	{r7, pc}
    bfbc:	00015208 	.word	0x00015208
    bfc0:	000099f1 	.word	0x000099f1
    bfc4:	0000be01 	.word	0x0000be01
    bfc8:	06000011 	.word	0x06000011
    bfcc:	0000be1d 	.word	0x0000be1d
    bfd0:	00241300 	.word	0x00241300
    bfd4:	0000be39 	.word	0x0000be39

0000bfd8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    bfd8:	b580      	push	{r7, lr}
    bfda:	b082      	sub	sp, #8
    bfdc:	af00      	add	r7, sp, #0
    bfde:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    bfe0:	687b      	ldr	r3, [r7, #4]
    bfe2:	681b      	ldr	r3, [r3, #0]
    bfe4:	2102      	movs	r1, #2
    bfe6:	4618      	mov	r0, r3
    bfe8:	4b03      	ldr	r3, [pc, #12]	; (bff8 <_qspi_sync_enable+0x20>)
    bfea:	4798      	blx	r3
	return ERR_NONE;
    bfec:	2300      	movs	r3, #0
}
    bfee:	4618      	mov	r0, r3
    bff0:	3708      	adds	r7, #8
    bff2:	46bd      	mov	sp, r7
    bff4:	bd80      	pop	{r7, pc}
    bff6:	bf00      	nop
    bff8:	0000be01 	.word	0x0000be01

0000bffc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b082      	sub	sp, #8
    c000:	af00      	add	r7, sp, #0
    c002:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	681b      	ldr	r3, [r3, #0]
    c008:	2100      	movs	r1, #0
    c00a:	4618      	mov	r0, r3
    c00c:	4b03      	ldr	r3, [pc, #12]	; (c01c <_qspi_sync_disable+0x20>)
    c00e:	4798      	blx	r3
	return ERR_NONE;
    c010:	2300      	movs	r3, #0
}
    c012:	4618      	mov	r0, r3
    c014:	3708      	adds	r7, #8
    c016:	46bd      	mov	sp, r7
    c018:	bd80      	pop	{r7, pc}
    c01a:	bf00      	nop
    c01c:	0000be01 	.word	0x0000be01

0000c020 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    c020:	b580      	push	{r7, lr}
    c022:	b084      	sub	sp, #16
    c024:	af00      	add	r7, sp, #0
    c026:	6078      	str	r0, [r7, #4]
    c028:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    c02a:	687b      	ldr	r3, [r7, #4]
    c02c:	681b      	ldr	r3, [r3, #0]
    c02e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    c030:	683b      	ldr	r3, [r7, #0]
    c032:	781b      	ldrb	r3, [r3, #0]
    c034:	f003 0320 	and.w	r3, r3, #32
    c038:	b2db      	uxtb	r3, r3
    c03a:	2b00      	cmp	r3, #0
    c03c:	d005      	beq.n	c04a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    c03e:	683b      	ldr	r3, [r7, #0]
    c040:	689b      	ldr	r3, [r3, #8]
    c042:	4619      	mov	r1, r3
    c044:	68f8      	ldr	r0, [r7, #12]
    c046:	4b13      	ldr	r3, [pc, #76]	; (c094 <_qspi_sync_command_set_ifr+0x74>)
    c048:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    c04a:	683b      	ldr	r3, [r7, #0]
    c04c:	781b      	ldrb	r3, [r3, #0]
    c04e:	f003 0310 	and.w	r3, r3, #16
    c052:	b2db      	uxtb	r3, r3
    c054:	2b00      	cmp	r3, #0
    c056:	d005      	beq.n	c064 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    c058:	683b      	ldr	r3, [r7, #0]
    c05a:	791b      	ldrb	r3, [r3, #4]
    c05c:	4619      	mov	r1, r3
    c05e:	68f8      	ldr	r0, [r7, #12]
    c060:	4b0d      	ldr	r3, [pc, #52]	; (c098 <_qspi_sync_command_set_ifr+0x78>)
    c062:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    c064:	683b      	ldr	r3, [r7, #0]
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c06c:	b2db      	uxtb	r3, r3
    c06e:	2b00      	cmp	r3, #0
    c070:	d005      	beq.n	c07e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    c072:	683b      	ldr	r3, [r7, #0]
    c074:	795b      	ldrb	r3, [r3, #5]
    c076:	4619      	mov	r1, r3
    c078:	68f8      	ldr	r0, [r7, #12]
    c07a:	4b08      	ldr	r3, [pc, #32]	; (c09c <_qspi_sync_command_set_ifr+0x7c>)
    c07c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    c07e:	683b      	ldr	r3, [r7, #0]
    c080:	681b      	ldr	r3, [r3, #0]
    c082:	4619      	mov	r1, r3
    c084:	68f8      	ldr	r0, [r7, #12]
    c086:	4b06      	ldr	r3, [pc, #24]	; (c0a0 <_qspi_sync_command_set_ifr+0x80>)
    c088:	4798      	blx	r3
}
    c08a:	bf00      	nop
    c08c:	3710      	adds	r7, #16
    c08e:	46bd      	mov	sp, r7
    c090:	bd80      	pop	{r7, pc}
    c092:	bf00      	nop
    c094:	0000be55 	.word	0x0000be55
    c098:	0000be71 	.word	0x0000be71
    c09c:	0000bea5 	.word	0x0000bea5
    c0a0:	0000bedd 	.word	0x0000bedd

0000c0a4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    c0a4:	b580      	push	{r7, lr}
    c0a6:	b084      	sub	sp, #16
    c0a8:	af00      	add	r7, sp, #0
    c0aa:	6078      	str	r0, [r7, #4]
    c0ac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    c0ae:	687b      	ldr	r3, [r7, #4]
    c0b0:	681b      	ldr	r3, [r3, #0]
    c0b2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    c0b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    c0b8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    c0ba:	683b      	ldr	r3, [r7, #0]
    c0bc:	781b      	ldrb	r3, [r3, #0]
    c0be:	f003 0320 	and.w	r3, r3, #32
    c0c2:	b2db      	uxtb	r3, r3
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d004      	beq.n	c0d2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    c0c8:	683b      	ldr	r3, [r7, #0]
    c0ca:	689b      	ldr	r3, [r3, #8]
    c0cc:	68fa      	ldr	r2, [r7, #12]
    c0ce:	4413      	add	r3, r2
    c0d0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    c0d2:	68b8      	ldr	r0, [r7, #8]
    c0d4:	4b18      	ldr	r3, [pc, #96]	; (c138 <_qspi_sync_run_transfer+0x94>)
    c0d6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    c0d8:	683b      	ldr	r3, [r7, #0]
    c0da:	691b      	ldr	r3, [r3, #16]
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d103      	bne.n	c0e8 <_qspi_sync_run_transfer+0x44>
    c0e0:	683b      	ldr	r3, [r7, #0]
    c0e2:	695b      	ldr	r3, [r3, #20]
    c0e4:	2b00      	cmp	r3, #0
    c0e6:	d001      	beq.n	c0ec <_qspi_sync_run_transfer+0x48>
    c0e8:	2301      	movs	r3, #1
    c0ea:	e000      	b.n	c0ee <_qspi_sync_run_transfer+0x4a>
    c0ec:	2300      	movs	r3, #0
    c0ee:	f003 0301 	and.w	r3, r3, #1
    c0f2:	b2db      	uxtb	r3, r3
    c0f4:	2282      	movs	r2, #130	; 0x82
    c0f6:	4911      	ldr	r1, [pc, #68]	; (c13c <_qspi_sync_run_transfer+0x98>)
    c0f8:	4618      	mov	r0, r3
    c0fa:	4b11      	ldr	r3, [pc, #68]	; (c140 <_qspi_sync_run_transfer+0x9c>)
    c0fc:	4798      	blx	r3

	if (cmd->tx_buf) {
    c0fe:	683b      	ldr	r3, [r7, #0]
    c100:	691b      	ldr	r3, [r3, #16]
    c102:	2b00      	cmp	r3, #0
    c104:	d008      	beq.n	c118 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    c106:	683b      	ldr	r3, [r7, #0]
    c108:	6919      	ldr	r1, [r3, #16]
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	68db      	ldr	r3, [r3, #12]
    c10e:	461a      	mov	r2, r3
    c110:	68f8      	ldr	r0, [r7, #12]
    c112:	4b0c      	ldr	r3, [pc, #48]	; (c144 <_qspi_sync_run_transfer+0xa0>)
    c114:	4798      	blx	r3
    c116:	e007      	b.n	c128 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    c118:	683b      	ldr	r3, [r7, #0]
    c11a:	6958      	ldr	r0, [r3, #20]
    c11c:	683b      	ldr	r3, [r7, #0]
    c11e:	68db      	ldr	r3, [r3, #12]
    c120:	461a      	mov	r2, r3
    c122:	68f9      	ldr	r1, [r7, #12]
    c124:	4b07      	ldr	r3, [pc, #28]	; (c144 <_qspi_sync_run_transfer+0xa0>)
    c126:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    c128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c12c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    c130:	bf00      	nop
    c132:	3710      	adds	r7, #16
    c134:	46bd      	mov	sp, r7
    c136:	bd80      	pop	{r7, pc}
    c138:	0000bef9 	.word	0x0000bef9
    c13c:	00015208 	.word	0x00015208
    c140:	000099f1 	.word	0x000099f1
    c144:	0000bf11 	.word	0x0000bf11

0000c148 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    c148:	b580      	push	{r7, lr}
    c14a:	b082      	sub	sp, #8
    c14c:	af00      	add	r7, sp, #0
    c14e:	6078      	str	r0, [r7, #4]
    c150:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    c152:	6839      	ldr	r1, [r7, #0]
    c154:	6878      	ldr	r0, [r7, #4]
    c156:	4b14      	ldr	r3, [pc, #80]	; (c1a8 <_qspi_sync_serial_run_command+0x60>)
    c158:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    c15a:	683b      	ldr	r3, [r7, #0]
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c162:	b2db      	uxtb	r3, r3
    c164:	2b00      	cmp	r3, #0
    c166:	d003      	beq.n	c170 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    c168:	6839      	ldr	r1, [r7, #0]
    c16a:	6878      	ldr	r0, [r7, #4]
    c16c:	4b0f      	ldr	r3, [pc, #60]	; (c1ac <_qspi_sync_serial_run_command+0x64>)
    c16e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    c170:	687b      	ldr	r3, [r7, #4]
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	4618      	mov	r0, r3
    c176:	4b0e      	ldr	r3, [pc, #56]	; (c1b0 <_qspi_sync_serial_run_command+0x68>)
    c178:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    c17a:	bf00      	nop
    c17c:	687b      	ldr	r3, [r7, #4]
    c17e:	681b      	ldr	r3, [r3, #0]
    c180:	4618      	mov	r0, r3
    c182:	4b0c      	ldr	r3, [pc, #48]	; (c1b4 <_qspi_sync_serial_run_command+0x6c>)
    c184:	4798      	blx	r3
    c186:	4603      	mov	r3, r0
    c188:	f083 0301 	eor.w	r3, r3, #1
    c18c:	b2db      	uxtb	r3, r3
    c18e:	2b00      	cmp	r3, #0
    c190:	d1f4      	bne.n	c17c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    c192:	687b      	ldr	r3, [r7, #4]
    c194:	681b      	ldr	r3, [r3, #0]
    c196:	4618      	mov	r0, r3
    c198:	4b07      	ldr	r3, [pc, #28]	; (c1b8 <_qspi_sync_serial_run_command+0x70>)
    c19a:	4798      	blx	r3
	return ERR_NONE;
    c19c:	2300      	movs	r3, #0
}
    c19e:	4618      	mov	r0, r3
    c1a0:	3708      	adds	r7, #8
    c1a2:	46bd      	mov	sp, r7
    c1a4:	bd80      	pop	{r7, pc}
    c1a6:	bf00      	nop
    c1a8:	0000c021 	.word	0x0000c021
    c1ac:	0000c0a5 	.word	0x0000c0a5
    c1b0:	0000bf45 	.word	0x0000bf45
    c1b4:	0000bdbd 	.word	0x0000bdbd
    c1b8:	0000bde5 	.word	0x0000bde5

0000c1bc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    c1bc:	b480      	push	{r7}
    c1be:	b083      	sub	sp, #12
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	6078      	str	r0, [r7, #4]
    c1c4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    c1c6:	bf00      	nop
    c1c8:	687b      	ldr	r3, [r7, #4]
    c1ca:	691a      	ldr	r2, [r3, #16]
    c1cc:	683b      	ldr	r3, [r7, #0]
    c1ce:	4013      	ands	r3, r2
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d1f9      	bne.n	c1c8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    c1d4:	bf00      	nop
    c1d6:	370c      	adds	r7, #12
    c1d8:	46bd      	mov	sp, r7
    c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1de:	4770      	bx	lr

0000c1e0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    c1e0:	b480      	push	{r7}
    c1e2:	b083      	sub	sp, #12
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    c1e8:	687b      	ldr	r3, [r7, #4]
    c1ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    c1ee:	819a      	strh	r2, [r3, #12]
}
    c1f0:	bf00      	nop
    c1f2:	370c      	adds	r7, #12
    c1f4:	46bd      	mov	sp, r7
    c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1fa:	4770      	bx	lr

0000c1fc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    c1fc:	b480      	push	{r7}
    c1fe:	b083      	sub	sp, #12
    c200:	af00      	add	r7, sp, #0
    c202:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    c204:	687b      	ldr	r3, [r7, #4]
    c206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c20a:	819a      	strh	r2, [r3, #12]
}
    c20c:	bf00      	nop
    c20e:	370c      	adds	r7, #12
    c210:	46bd      	mov	sp, r7
    c212:	f85d 7b04 	ldr.w	r7, [sp], #4
    c216:	4770      	bx	lr

0000c218 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    c218:	b480      	push	{r7}
    c21a:	b083      	sub	sp, #12
    c21c:	af00      	add	r7, sp, #0
    c21e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    c220:	687b      	ldr	r3, [r7, #4]
    c222:	899b      	ldrh	r3, [r3, #12]
    c224:	b29b      	uxth	r3, r3
}
    c226:	4618      	mov	r0, r3
    c228:	370c      	adds	r7, #12
    c22a:	46bd      	mov	sp, r7
    c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c230:	4770      	bx	lr

0000c232 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    c232:	b480      	push	{r7}
    c234:	b083      	sub	sp, #12
    c236:	af00      	add	r7, sp, #0
    c238:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    c23a:	687b      	ldr	r3, [r7, #4]
    c23c:	895b      	ldrh	r3, [r3, #10]
    c23e:	b29b      	uxth	r3, r3
}
    c240:	4618      	mov	r0, r3
    c242:	370c      	adds	r7, #12
    c244:	46bd      	mov	sp, r7
    c246:	f85d 7b04 	ldr.w	r7, [sp], #4
    c24a:	4770      	bx	lr

0000c24c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    c24c:	b580      	push	{r7, lr}
    c24e:	b082      	sub	sp, #8
    c250:	af00      	add	r7, sp, #0
    c252:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    c254:	687b      	ldr	r3, [r7, #4]
    c256:	881b      	ldrh	r3, [r3, #0]
    c258:	b29b      	uxth	r3, r3
    c25a:	f043 0301 	orr.w	r3, r3, #1
    c25e:	b29a      	uxth	r2, r3
    c260:	687b      	ldr	r3, [r7, #4]
    c262:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    c264:	2101      	movs	r1, #1
    c266:	6878      	ldr	r0, [r7, #4]
    c268:	4b02      	ldr	r3, [pc, #8]	; (c274 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    c26a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    c26c:	bf00      	nop
    c26e:	3708      	adds	r7, #8
    c270:	46bd      	mov	sp, r7
    c272:	bd80      	pop	{r7, pc}
    c274:	0000c1bd 	.word	0x0000c1bd

0000c278 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c278:	b580      	push	{r7, lr}
    c27a:	b084      	sub	sp, #16
    c27c:	af00      	add	r7, sp, #0
    c27e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    c280:	f248 0103 	movw	r1, #32771	; 0x8003
    c284:	6878      	ldr	r0, [r7, #4]
    c286:	4b0a      	ldr	r3, [pc, #40]	; (c2b0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    c288:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    c28a:	687b      	ldr	r3, [r7, #4]
    c28c:	881b      	ldrh	r3, [r3, #0]
    c28e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    c290:	89fb      	ldrh	r3, [r7, #14]
    c292:	085b      	lsrs	r3, r3, #1
    c294:	b29b      	uxth	r3, r3
    c296:	f003 0301 	and.w	r3, r3, #1
    c29a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    c29c:	89fb      	ldrh	r3, [r7, #14]
    c29e:	2b00      	cmp	r3, #0
    c2a0:	bf14      	ite	ne
    c2a2:	2301      	movne	r3, #1
    c2a4:	2300      	moveq	r3, #0
    c2a6:	b2db      	uxtb	r3, r3
}
    c2a8:	4618      	mov	r0, r3
    c2aa:	3710      	adds	r7, #16
    c2ac:	46bd      	mov	sp, r7
    c2ae:	bd80      	pop	{r7, pc}
    c2b0:	0000c1bd 	.word	0x0000c1bd

0000c2b4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c2b4:	b580      	push	{r7, lr}
    c2b6:	b082      	sub	sp, #8
    c2b8:	af00      	add	r7, sp, #0
    c2ba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	881b      	ldrh	r3, [r3, #0]
    c2c0:	b29b      	uxth	r3, r3
    c2c2:	f023 0302 	bic.w	r3, r3, #2
    c2c6:	b29a      	uxth	r2, r3
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    c2cc:	f248 0103 	movw	r1, #32771	; 0x8003
    c2d0:	6878      	ldr	r0, [r7, #4]
    c2d2:	4b03      	ldr	r3, [pc, #12]	; (c2e0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    c2d4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    c2d6:	bf00      	nop
    c2d8:	3708      	adds	r7, #8
    c2da:	46bd      	mov	sp, r7
    c2dc:	bd80      	pop	{r7, pc}
    c2de:	bf00      	nop
    c2e0:	0000c1bd 	.word	0x0000c1bd

0000c2e4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b082      	sub	sp, #8
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	6078      	str	r0, [r7, #4]
    c2ec:	460b      	mov	r3, r1
    c2ee:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    c2f0:	687b      	ldr	r3, [r7, #4]
    c2f2:	887a      	ldrh	r2, [r7, #2]
    c2f4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    c2f6:	f248 0103 	movw	r1, #32771	; 0x8003
    c2fa:	6878      	ldr	r0, [r7, #4]
    c2fc:	4b02      	ldr	r3, [pc, #8]	; (c308 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    c2fe:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    c300:	bf00      	nop
    c302:	3708      	adds	r7, #8
    c304:	46bd      	mov	sp, r7
    c306:	bd80      	pop	{r7, pc}
    c308:	0000c1bd 	.word	0x0000c1bd

0000c30c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    c30c:	b480      	push	{r7}
    c30e:	b083      	sub	sp, #12
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
    c314:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	683a      	ldr	r2, [r7, #0]
    c31a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    c31c:	bf00      	nop
    c31e:	370c      	adds	r7, #12
    c320:	46bd      	mov	sp, r7
    c322:	f85d 7b04 	ldr.w	r7, [sp], #4
    c326:	4770      	bx	lr

0000c328 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    c328:	b580      	push	{r7, lr}
    c32a:	b082      	sub	sp, #8
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	2b00      	cmp	r3, #0
    c334:	d005      	beq.n	c342 <_calendar_init+0x1a>
    c336:	687b      	ldr	r3, [r7, #4]
    c338:	681b      	ldr	r3, [r3, #0]
    c33a:	2b00      	cmp	r3, #0
    c33c:	d001      	beq.n	c342 <_calendar_init+0x1a>
    c33e:	2301      	movs	r3, #1
    c340:	e000      	b.n	c344 <_calendar_init+0x1c>
    c342:	2300      	movs	r3, #0
    c344:	f003 0301 	and.w	r3, r3, #1
    c348:	b2db      	uxtb	r3, r3
    c34a:	222f      	movs	r2, #47	; 0x2f
    c34c:	491b      	ldr	r1, [pc, #108]	; (c3bc <_calendar_init+0x94>)
    c34e:	4618      	mov	r0, r3
    c350:	4b1b      	ldr	r3, [pc, #108]	; (c3c0 <_calendar_init+0x98>)
    c352:	4798      	blx	r3

	_rtc_dev = dev;
    c354:	4a1b      	ldr	r2, [pc, #108]	; (c3c4 <_calendar_init+0x9c>)
    c356:	687b      	ldr	r3, [r7, #4]
    c358:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    c35a:	687b      	ldr	r3, [r7, #4]
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	4618      	mov	r0, r3
    c360:	4b19      	ldr	r3, [pc, #100]	; (c3c8 <_calendar_init+0xa0>)
    c362:	4798      	blx	r3
    c364:	4603      	mov	r3, r0
    c366:	2b00      	cmp	r3, #0
    c368:	d00a      	beq.n	c380 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    c36a:	687b      	ldr	r3, [r7, #4]
    c36c:	681b      	ldr	r3, [r3, #0]
    c36e:	4618      	mov	r0, r3
    c370:	4b16      	ldr	r3, [pc, #88]	; (c3cc <_calendar_init+0xa4>)
    c372:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    c374:	687b      	ldr	r3, [r7, #4]
    c376:	681b      	ldr	r3, [r3, #0]
    c378:	2102      	movs	r1, #2
    c37a:	4618      	mov	r0, r3
    c37c:	4b14      	ldr	r3, [pc, #80]	; (c3d0 <_calendar_init+0xa8>)
    c37e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    c380:	687b      	ldr	r3, [r7, #4]
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	4618      	mov	r0, r3
    c386:	4b13      	ldr	r3, [pc, #76]	; (c3d4 <_calendar_init+0xac>)
    c388:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    c38a:	687b      	ldr	r3, [r7, #4]
    c38c:	681b      	ldr	r3, [r3, #0]
    c38e:	2101      	movs	r1, #1
    c390:	4618      	mov	r0, r3
    c392:	4b0f      	ldr	r3, [pc, #60]	; (c3d0 <_calendar_init+0xa8>)
    c394:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    c39e:	4618      	mov	r0, r3
    c3a0:	4b0d      	ldr	r3, [pc, #52]	; (c3d8 <_calendar_init+0xb0>)
    c3a2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    c3a4:	687b      	ldr	r3, [r7, #4]
    c3a6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    c3a8:	2100      	movs	r1, #0
    c3aa:	4618      	mov	r0, r3
    c3ac:	4b0b      	ldr	r3, [pc, #44]	; (c3dc <_calendar_init+0xb4>)
    c3ae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    c3b0:	2300      	movs	r3, #0
}
    c3b2:	4618      	mov	r0, r3
    c3b4:	3708      	adds	r7, #8
    c3b6:	46bd      	mov	sp, r7
    c3b8:	bd80      	pop	{r7, pc}
    c3ba:	bf00      	nop
    c3bc:	00015220 	.word	0x00015220
    c3c0:	000099f1 	.word	0x000099f1
    c3c4:	20001afc 	.word	0x20001afc
    c3c8:	0000c279 	.word	0x0000c279
    c3cc:	0000c2b5 	.word	0x0000c2b5
    c3d0:	0000c1bd 	.word	0x0000c1bd
    c3d4:	0000c24d 	.word	0x0000c24d
    c3d8:	0000c2e5 	.word	0x0000c2e5
    c3dc:	0000c30d 	.word	0x0000c30d

0000c3e0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    c3e0:	b580      	push	{r7, lr}
    c3e2:	b084      	sub	sp, #16
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    c3e8:	687b      	ldr	r3, [r7, #4]
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	4618      	mov	r0, r3
    c3ee:	4b19      	ldr	r3, [pc, #100]	; (c454 <_rtc_interrupt_handler+0x74>)
    c3f0:	4798      	blx	r3
    c3f2:	4603      	mov	r3, r0
    c3f4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    c3f6:	687b      	ldr	r3, [r7, #4]
    c3f8:	681b      	ldr	r3, [r3, #0]
    c3fa:	4618      	mov	r0, r3
    c3fc:	4b16      	ldr	r3, [pc, #88]	; (c458 <_rtc_interrupt_handler+0x78>)
    c3fe:	4798      	blx	r3
    c400:	4603      	mov	r3, r0
    c402:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    c404:	89fa      	ldrh	r2, [r7, #14]
    c406:	89bb      	ldrh	r3, [r7, #12]
    c408:	4013      	ands	r3, r2
    c40a:	b29b      	uxth	r3, r3
    c40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    c410:	2b00      	cmp	r3, #0
    c412:	d009      	beq.n	c428 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    c414:	687b      	ldr	r3, [r7, #4]
    c416:	685b      	ldr	r3, [r3, #4]
    c418:	6878      	ldr	r0, [r7, #4]
    c41a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    c41c:	687b      	ldr	r3, [r7, #4]
    c41e:	681b      	ldr	r3, [r3, #0]
    c420:	4618      	mov	r0, r3
    c422:	4b0e      	ldr	r3, [pc, #56]	; (c45c <_rtc_interrupt_handler+0x7c>)
    c424:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    c426:	e010      	b.n	c44a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    c428:	89fa      	ldrh	r2, [r7, #14]
    c42a:	89bb      	ldrh	r3, [r7, #12]
    c42c:	4013      	ands	r3, r2
    c42e:	b29b      	uxth	r3, r3
    c430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    c434:	2b00      	cmp	r3, #0
    c436:	d008      	beq.n	c44a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    c438:	687b      	ldr	r3, [r7, #4]
    c43a:	689b      	ldr	r3, [r3, #8]
    c43c:	6878      	ldr	r0, [r7, #4]
    c43e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    c440:	687b      	ldr	r3, [r7, #4]
    c442:	681b      	ldr	r3, [r3, #0]
    c444:	4618      	mov	r0, r3
    c446:	4b06      	ldr	r3, [pc, #24]	; (c460 <_rtc_interrupt_handler+0x80>)
    c448:	4798      	blx	r3
}
    c44a:	bf00      	nop
    c44c:	3710      	adds	r7, #16
    c44e:	46bd      	mov	sp, r7
    c450:	bd80      	pop	{r7, pc}
    c452:	bf00      	nop
    c454:	0000c219 	.word	0x0000c219
    c458:	0000c233 	.word	0x0000c233
    c45c:	0000c1e1 	.word	0x0000c1e1
    c460:	0000c1fd 	.word	0x0000c1fd

0000c464 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    c464:	b580      	push	{r7, lr}
    c466:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    c468:	4b03      	ldr	r3, [pc, #12]	; (c478 <RTC_Handler+0x14>)
    c46a:	681b      	ldr	r3, [r3, #0]
    c46c:	4618      	mov	r0, r3
    c46e:	4b03      	ldr	r3, [pc, #12]	; (c47c <RTC_Handler+0x18>)
    c470:	4798      	blx	r3
}
    c472:	bf00      	nop
    c474:	bd80      	pop	{r7, pc}
    c476:	bf00      	nop
    c478:	20001afc 	.word	0x20001afc
    c47c:	0000c3e1 	.word	0x0000c3e1

0000c480 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    c480:	b480      	push	{r7}
    c482:	b083      	sub	sp, #12
    c484:	af00      	add	r7, sp, #0
    c486:	6078      	str	r0, [r7, #4]
    c488:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    c48a:	bf00      	nop
    c48c:	687b      	ldr	r3, [r7, #4]
    c48e:	69da      	ldr	r2, [r3, #28]
    c490:	683b      	ldr	r3, [r7, #0]
    c492:	4013      	ands	r3, r2
    c494:	2b00      	cmp	r3, #0
    c496:	d1f9      	bne.n	c48c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    c498:	bf00      	nop
    c49a:	370c      	adds	r7, #12
    c49c:	46bd      	mov	sp, r7
    c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4a2:	4770      	bx	lr

0000c4a4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    c4a4:	b480      	push	{r7}
    c4a6:	b083      	sub	sp, #12
    c4a8:	af00      	add	r7, sp, #0
    c4aa:	6078      	str	r0, [r7, #4]
    c4ac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    c4ae:	687b      	ldr	r3, [r7, #4]
    c4b0:	69da      	ldr	r2, [r3, #28]
    c4b2:	683b      	ldr	r3, [r7, #0]
    c4b4:	4013      	ands	r3, r2
    c4b6:	2b00      	cmp	r3, #0
    c4b8:	bf14      	ite	ne
    c4ba:	2301      	movne	r3, #1
    c4bc:	2300      	moveq	r3, #0
    c4be:	b2db      	uxtb	r3, r3
}
    c4c0:	4618      	mov	r0, r3
    c4c2:	370c      	adds	r7, #12
    c4c4:	46bd      	mov	sp, r7
    c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4ca:	4770      	bx	lr

0000c4cc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    c4cc:	b480      	push	{r7}
    c4ce:	b083      	sub	sp, #12
    c4d0:	af00      	add	r7, sp, #0
    c4d2:	6078      	str	r0, [r7, #4]
    c4d4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    c4d6:	bf00      	nop
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	69da      	ldr	r2, [r3, #28]
    c4dc:	683b      	ldr	r3, [r7, #0]
    c4de:	4013      	ands	r3, r2
    c4e0:	2b00      	cmp	r3, #0
    c4e2:	d1f9      	bne.n	c4d8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    c4e4:	bf00      	nop
    c4e6:	370c      	adds	r7, #12
    c4e8:	46bd      	mov	sp, r7
    c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4ee:	4770      	bx	lr

0000c4f0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    c4f0:	b480      	push	{r7}
    c4f2:	b083      	sub	sp, #12
    c4f4:	af00      	add	r7, sp, #0
    c4f6:	6078      	str	r0, [r7, #4]
    c4f8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	69da      	ldr	r2, [r3, #28]
    c4fe:	683b      	ldr	r3, [r7, #0]
    c500:	4013      	ands	r3, r2
    c502:	2b00      	cmp	r3, #0
    c504:	bf14      	ite	ne
    c506:	2301      	movne	r3, #1
    c508:	2300      	moveq	r3, #0
    c50a:	b2db      	uxtb	r3, r3
}
    c50c:	4618      	mov	r0, r3
    c50e:	370c      	adds	r7, #12
    c510:	46bd      	mov	sp, r7
    c512:	f85d 7b04 	ldr.w	r7, [sp], #4
    c516:	4770      	bx	lr

0000c518 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    c518:	b480      	push	{r7}
    c51a:	b083      	sub	sp, #12
    c51c:	af00      	add	r7, sp, #0
    c51e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	2201      	movs	r2, #1
    c524:	761a      	strb	r2, [r3, #24]
}
    c526:	bf00      	nop
    c528:	370c      	adds	r7, #12
    c52a:	46bd      	mov	sp, r7
    c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c530:	4770      	bx	lr

0000c532 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    c532:	b480      	push	{r7}
    c534:	b083      	sub	sp, #12
    c536:	af00      	add	r7, sp, #0
    c538:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    c53a:	687b      	ldr	r3, [r7, #4]
    c53c:	2202      	movs	r2, #2
    c53e:	761a      	strb	r2, [r3, #24]
}
    c540:	bf00      	nop
    c542:	370c      	adds	r7, #12
    c544:	46bd      	mov	sp, r7
    c546:	f85d 7b04 	ldr.w	r7, [sp], #4
    c54a:	4770      	bx	lr

0000c54c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    c54c:	b480      	push	{r7}
    c54e:	b083      	sub	sp, #12
    c550:	af00      	add	r7, sp, #0
    c552:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    c554:	687b      	ldr	r3, [r7, #4]
    c556:	7e1b      	ldrb	r3, [r3, #24]
    c558:	b2db      	uxtb	r3, r3
}
    c55a:	4618      	mov	r0, r3
    c55c:	370c      	adds	r7, #12
    c55e:	46bd      	mov	sp, r7
    c560:	f85d 7b04 	ldr.w	r7, [sp], #4
    c564:	4770      	bx	lr

0000c566 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    c566:	b480      	push	{r7}
    c568:	b085      	sub	sp, #20
    c56a:	af00      	add	r7, sp, #0
    c56c:	6078      	str	r0, [r7, #4]
    c56e:	460b      	mov	r3, r1
    c570:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	7e1b      	ldrb	r3, [r3, #24]
    c576:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c578:	7bfa      	ldrb	r2, [r7, #15]
    c57a:	78fb      	ldrb	r3, [r7, #3]
    c57c:	4013      	ands	r3, r2
    c57e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c580:	7bfb      	ldrb	r3, [r7, #15]
}
    c582:	4618      	mov	r0, r3
    c584:	3714      	adds	r7, #20
    c586:	46bd      	mov	sp, r7
    c588:	f85d 7b04 	ldr.w	r7, [sp], #4
    c58c:	4770      	bx	lr

0000c58e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    c58e:	b480      	push	{r7}
    c590:	b083      	sub	sp, #12
    c592:	af00      	add	r7, sp, #0
    c594:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    c596:	687b      	ldr	r3, [r7, #4]
    c598:	7e1b      	ldrb	r3, [r3, #24]
    c59a:	b2db      	uxtb	r3, r3
}
    c59c:	4618      	mov	r0, r3
    c59e:	370c      	adds	r7, #12
    c5a0:	46bd      	mov	sp, r7
    c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5a6:	4770      	bx	lr

0000c5a8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    c5a8:	b480      	push	{r7}
    c5aa:	b083      	sub	sp, #12
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	6078      	str	r0, [r7, #4]
    c5b0:	460b      	mov	r3, r1
    c5b2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	78fa      	ldrb	r2, [r7, #3]
    c5b8:	761a      	strb	r2, [r3, #24]
}
    c5ba:	bf00      	nop
    c5bc:	370c      	adds	r7, #12
    c5be:	46bd      	mov	sp, r7
    c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5c4:	4770      	bx	lr
	...

0000c5c8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c5c8:	b580      	push	{r7, lr}
    c5ca:	b082      	sub	sp, #8
    c5cc:	af00      	add	r7, sp, #0
    c5ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	681b      	ldr	r3, [r3, #0]
    c5d4:	f043 0202 	orr.w	r2, r3, #2
    c5d8:	687b      	ldr	r3, [r7, #4]
    c5da:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c5dc:	2103      	movs	r1, #3
    c5de:	6878      	ldr	r0, [r7, #4]
    c5e0:	4b02      	ldr	r3, [pc, #8]	; (c5ec <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    c5e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c5e4:	bf00      	nop
    c5e6:	3708      	adds	r7, #8
    c5e8:	46bd      	mov	sp, r7
    c5ea:	bd80      	pop	{r7, pc}
    c5ec:	0000c481 	.word	0x0000c481

0000c5f0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b082      	sub	sp, #8
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    c5f8:	687b      	ldr	r3, [r7, #4]
    c5fa:	681b      	ldr	r3, [r3, #0]
    c5fc:	f023 0202 	bic.w	r2, r3, #2
    c600:	687b      	ldr	r3, [r7, #4]
    c602:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c604:	2103      	movs	r1, #3
    c606:	6878      	ldr	r0, [r7, #4]
    c608:	4b02      	ldr	r3, [pc, #8]	; (c614 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    c60a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c60c:	bf00      	nop
    c60e:	3708      	adds	r7, #8
    c610:	46bd      	mov	sp, r7
    c612:	bd80      	pop	{r7, pc}
    c614:	0000c481 	.word	0x0000c481

0000c618 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    c618:	b480      	push	{r7}
    c61a:	b085      	sub	sp, #20
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    c620:	687b      	ldr	r3, [r7, #4]
    c622:	681b      	ldr	r3, [r3, #0]
    c624:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    c626:	68fb      	ldr	r3, [r7, #12]
    c628:	0edb      	lsrs	r3, r3, #27
    c62a:	f003 0301 	and.w	r3, r3, #1
    c62e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c630:	68fb      	ldr	r3, [r7, #12]
    c632:	2b00      	cmp	r3, #0
    c634:	bf14      	ite	ne
    c636:	2301      	movne	r3, #1
    c638:	2300      	moveq	r3, #0
    c63a:	b2db      	uxtb	r3, r3
}
    c63c:	4618      	mov	r0, r3
    c63e:	3714      	adds	r7, #20
    c640:	46bd      	mov	sp, r7
    c642:	f85d 7b04 	ldr.w	r7, [sp], #4
    c646:	4770      	bx	lr

0000c648 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    c648:	b580      	push	{r7, lr}
    c64a:	b084      	sub	sp, #16
    c64c:	af00      	add	r7, sp, #0
    c64e:	6078      	str	r0, [r7, #4]
    c650:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c652:	2103      	movs	r1, #3
    c654:	6878      	ldr	r0, [r7, #4]
    c656:	4b07      	ldr	r3, [pc, #28]	; (c674 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    c658:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    c65a:	687b      	ldr	r3, [r7, #4]
    c65c:	681b      	ldr	r3, [r3, #0]
    c65e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c660:	68fa      	ldr	r2, [r7, #12]
    c662:	683b      	ldr	r3, [r7, #0]
    c664:	4013      	ands	r3, r2
    c666:	60fb      	str	r3, [r7, #12]
	return tmp;
    c668:	68fb      	ldr	r3, [r7, #12]
}
    c66a:	4618      	mov	r0, r3
    c66c:	3710      	adds	r7, #16
    c66e:	46bd      	mov	sp, r7
    c670:	bd80      	pop	{r7, pc}
    c672:	bf00      	nop
    c674:	0000c481 	.word	0x0000c481

0000c678 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    c678:	b580      	push	{r7, lr}
    c67a:	b082      	sub	sp, #8
    c67c:	af00      	add	r7, sp, #0
    c67e:	6078      	str	r0, [r7, #4]
    c680:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    c682:	687b      	ldr	r3, [r7, #4]
    c684:	683a      	ldr	r2, [r7, #0]
    c686:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    c688:	2103      	movs	r1, #3
    c68a:	6878      	ldr	r0, [r7, #4]
    c68c:	4b02      	ldr	r3, [pc, #8]	; (c698 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    c68e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c690:	bf00      	nop
    c692:	3708      	adds	r7, #8
    c694:	46bd      	mov	sp, r7
    c696:	bd80      	pop	{r7, pc}
    c698:	0000c481 	.word	0x0000c481

0000c69c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b084      	sub	sp, #16
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c6a4:	2103      	movs	r1, #3
    c6a6:	6878      	ldr	r0, [r7, #4]
    c6a8:	4b09      	ldr	r3, [pc, #36]	; (c6d0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    c6aa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    c6ac:	687b      	ldr	r3, [r7, #4]
    c6ae:	681b      	ldr	r3, [r3, #0]
    c6b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    c6b2:	68fb      	ldr	r3, [r7, #12]
    c6b4:	085b      	lsrs	r3, r3, #1
    c6b6:	f003 0301 	and.w	r3, r3, #1
    c6ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c6bc:	68fb      	ldr	r3, [r7, #12]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	bf14      	ite	ne
    c6c2:	2301      	movne	r3, #1
    c6c4:	2300      	moveq	r3, #0
    c6c6:	b2db      	uxtb	r3, r3
}
    c6c8:	4618      	mov	r0, r3
    c6ca:	3710      	adds	r7, #16
    c6cc:	46bd      	mov	sp, r7
    c6ce:	bd80      	pop	{r7, pc}
    c6d0:	0000c4cd 	.word	0x0000c4cd

0000c6d4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b082      	sub	sp, #8
    c6d8:	af00      	add	r7, sp, #0
    c6da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    c6dc:	687b      	ldr	r3, [r7, #4]
    c6de:	681b      	ldr	r3, [r3, #0]
    c6e0:	f023 0202 	bic.w	r2, r3, #2
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c6e8:	2103      	movs	r1, #3
    c6ea:	6878      	ldr	r0, [r7, #4]
    c6ec:	4b02      	ldr	r3, [pc, #8]	; (c6f8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    c6ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c6f0:	bf00      	nop
    c6f2:	3708      	adds	r7, #8
    c6f4:	46bd      	mov	sp, r7
    c6f6:	bd80      	pop	{r7, pc}
    c6f8:	0000c4cd 	.word	0x0000c4cd

0000c6fc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b084      	sub	sp, #16
    c700:	af00      	add	r7, sp, #0
    c702:	6078      	str	r0, [r7, #4]
    c704:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c706:	2103      	movs	r1, #3
    c708:	6878      	ldr	r0, [r7, #4]
    c70a:	4b07      	ldr	r3, [pc, #28]	; (c728 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    c70c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c714:	68fa      	ldr	r2, [r7, #12]
    c716:	683b      	ldr	r3, [r7, #0]
    c718:	4013      	ands	r3, r2
    c71a:	60fb      	str	r3, [r7, #12]
	return tmp;
    c71c:	68fb      	ldr	r3, [r7, #12]
}
    c71e:	4618      	mov	r0, r3
    c720:	3710      	adds	r7, #16
    c722:	46bd      	mov	sp, r7
    c724:	bd80      	pop	{r7, pc}
    c726:	bf00      	nop
    c728:	0000c4cd 	.word	0x0000c4cd

0000c72c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    c72c:	b580      	push	{r7, lr}
    c72e:	b082      	sub	sp, #8
    c730:	af00      	add	r7, sp, #0
    c732:	6078      	str	r0, [r7, #4]
    c734:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    c736:	687b      	ldr	r3, [r7, #4]
    c738:	683a      	ldr	r2, [r7, #0]
    c73a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    c73c:	2103      	movs	r1, #3
    c73e:	6878      	ldr	r0, [r7, #4]
    c740:	4b02      	ldr	r3, [pc, #8]	; (c74c <hri_sercomspi_write_CTRLA_reg+0x20>)
    c742:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c744:	bf00      	nop
    c746:	3708      	adds	r7, #8
    c748:	46bd      	mov	sp, r7
    c74a:	bd80      	pop	{r7, pc}
    c74c:	0000c4cd 	.word	0x0000c4cd

0000c750 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    c750:	b580      	push	{r7, lr}
    c752:	b082      	sub	sp, #8
    c754:	af00      	add	r7, sp, #0
    c756:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	685b      	ldr	r3, [r3, #4]
    c75c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c764:	2104      	movs	r1, #4
    c766:	6878      	ldr	r0, [r7, #4]
    c768:	4b02      	ldr	r3, [pc, #8]	; (c774 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    c76a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c76c:	bf00      	nop
    c76e:	3708      	adds	r7, #8
    c770:	46bd      	mov	sp, r7
    c772:	bd80      	pop	{r7, pc}
    c774:	0000c481 	.word	0x0000c481

0000c778 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    c778:	b580      	push	{r7, lr}
    c77a:	b082      	sub	sp, #8
    c77c:	af00      	add	r7, sp, #0
    c77e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	685b      	ldr	r3, [r3, #4]
    c784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c78c:	2104      	movs	r1, #4
    c78e:	6878      	ldr	r0, [r7, #4]
    c790:	4b02      	ldr	r3, [pc, #8]	; (c79c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    c792:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c794:	bf00      	nop
    c796:	3708      	adds	r7, #8
    c798:	46bd      	mov	sp, r7
    c79a:	bd80      	pop	{r7, pc}
    c79c:	0000c481 	.word	0x0000c481

0000c7a0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b082      	sub	sp, #8
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	685b      	ldr	r3, [r3, #4]
    c7ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c7b4:	2104      	movs	r1, #4
    c7b6:	6878      	ldr	r0, [r7, #4]
    c7b8:	4b02      	ldr	r3, [pc, #8]	; (c7c4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    c7ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c7bc:	bf00      	nop
    c7be:	3708      	adds	r7, #8
    c7c0:	46bd      	mov	sp, r7
    c7c2:	bd80      	pop	{r7, pc}
    c7c4:	0000c481 	.word	0x0000c481

0000c7c8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b082      	sub	sp, #8
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    c7d0:	687b      	ldr	r3, [r7, #4]
    c7d2:	685b      	ldr	r3, [r3, #4]
    c7d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c7dc:	2104      	movs	r1, #4
    c7de:	6878      	ldr	r0, [r7, #4]
    c7e0:	4b02      	ldr	r3, [pc, #8]	; (c7ec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    c7e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c7e4:	bf00      	nop
    c7e6:	3708      	adds	r7, #8
    c7e8:	46bd      	mov	sp, r7
    c7ea:	bd80      	pop	{r7, pc}
    c7ec:	0000c481 	.word	0x0000c481

0000c7f0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b082      	sub	sp, #8
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
    c7f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    c7fa:	687b      	ldr	r3, [r7, #4]
    c7fc:	685a      	ldr	r2, [r3, #4]
    c7fe:	683b      	ldr	r3, [r7, #0]
    c800:	041b      	lsls	r3, r3, #16
    c802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    c806:	431a      	orrs	r2, r3
    c808:	687b      	ldr	r3, [r7, #4]
    c80a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c80c:	2104      	movs	r1, #4
    c80e:	6878      	ldr	r0, [r7, #4]
    c810:	4b02      	ldr	r3, [pc, #8]	; (c81c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    c812:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c814:	bf00      	nop
    c816:	3708      	adds	r7, #8
    c818:	46bd      	mov	sp, r7
    c81a:	bd80      	pop	{r7, pc}
    c81c:	0000c481 	.word	0x0000c481

0000c820 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    c820:	b580      	push	{r7, lr}
    c822:	b082      	sub	sp, #8
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
    c828:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	683a      	ldr	r2, [r7, #0]
    c82e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c830:	2104      	movs	r1, #4
    c832:	6878      	ldr	r0, [r7, #4]
    c834:	4b02      	ldr	r3, [pc, #8]	; (c840 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    c836:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c838:	bf00      	nop
    c83a:	3708      	adds	r7, #8
    c83c:	46bd      	mov	sp, r7
    c83e:	bd80      	pop	{r7, pc}
    c840:	0000c481 	.word	0x0000c481

0000c844 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    c844:	b580      	push	{r7, lr}
    c846:	b082      	sub	sp, #8
    c848:	af00      	add	r7, sp, #0
    c84a:	6078      	str	r0, [r7, #4]
    c84c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    c84e:	687b      	ldr	r3, [r7, #4]
    c850:	683a      	ldr	r2, [r7, #0]
    c852:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    c854:	2117      	movs	r1, #23
    c856:	6878      	ldr	r0, [r7, #4]
    c858:	4b02      	ldr	r3, [pc, #8]	; (c864 <hri_sercomspi_write_CTRLB_reg+0x20>)
    c85a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c85c:	bf00      	nop
    c85e:	3708      	adds	r7, #8
    c860:	46bd      	mov	sp, r7
    c862:	bd80      	pop	{r7, pc}
    c864:	0000c4cd 	.word	0x0000c4cd

0000c868 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    c868:	b480      	push	{r7}
    c86a:	b083      	sub	sp, #12
    c86c:	af00      	add	r7, sp, #0
    c86e:	6078      	str	r0, [r7, #4]
    c870:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	683a      	ldr	r2, [r7, #0]
    c876:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c878:	bf00      	nop
    c87a:	370c      	adds	r7, #12
    c87c:	46bd      	mov	sp, r7
    c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c882:	4770      	bx	lr

0000c884 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    c884:	b480      	push	{r7}
    c886:	b083      	sub	sp, #12
    c888:	af00      	add	r7, sp, #0
    c88a:	6078      	str	r0, [r7, #4]
    c88c:	460b      	mov	r3, r1
    c88e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	78fa      	ldrb	r2, [r7, #3]
    c894:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c896:	bf00      	nop
    c898:	370c      	adds	r7, #12
    c89a:	46bd      	mov	sp, r7
    c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8a0:	4770      	bx	lr
	...

0000c8a4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    c8a4:	b580      	push	{r7, lr}
    c8a6:	b084      	sub	sp, #16
    c8a8:	af00      	add	r7, sp, #0
    c8aa:	6078      	str	r0, [r7, #4]
    c8ac:	460b      	mov	r3, r1
    c8ae:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    c8b0:	687b      	ldr	r3, [r7, #4]
    c8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c8b4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    c8b6:	68fb      	ldr	r3, [r7, #12]
    c8b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    c8bc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    c8be:	78fb      	ldrb	r3, [r7, #3]
    c8c0:	039b      	lsls	r3, r3, #14
    c8c2:	461a      	mov	r2, r3
    c8c4:	68fb      	ldr	r3, [r7, #12]
    c8c6:	4313      	orrs	r3, r2
    c8c8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	68fa      	ldr	r2, [r7, #12]
    c8ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c8d0:	2104      	movs	r1, #4
    c8d2:	6878      	ldr	r0, [r7, #4]
    c8d4:	4b02      	ldr	r3, [pc, #8]	; (c8e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    c8d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c8d8:	bf00      	nop
    c8da:	3710      	adds	r7, #16
    c8dc:	46bd      	mov	sp, r7
    c8de:	bd80      	pop	{r7, pc}
    c8e0:	0000c481 	.word	0x0000c481

0000c8e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    c8e4:	b580      	push	{r7, lr}
    c8e6:	b082      	sub	sp, #8
    c8e8:	af00      	add	r7, sp, #0
    c8ea:	6078      	str	r0, [r7, #4]
    c8ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	683a      	ldr	r2, [r7, #0]
    c8f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c8f4:	2104      	movs	r1, #4
    c8f6:	6878      	ldr	r0, [r7, #4]
    c8f8:	4b02      	ldr	r3, [pc, #8]	; (c904 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    c8fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c8fc:	bf00      	nop
    c8fe:	3708      	adds	r7, #8
    c900:	46bd      	mov	sp, r7
    c902:	bd80      	pop	{r7, pc}
    c904:	0000c481 	.word	0x0000c481

0000c908 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    c908:	b580      	push	{r7, lr}
    c90a:	b082      	sub	sp, #8
    c90c:	af00      	add	r7, sp, #0
    c90e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c910:	2104      	movs	r1, #4
    c912:	6878      	ldr	r0, [r7, #4]
    c914:	4b03      	ldr	r3, [pc, #12]	; (c924 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    c916:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    c91c:	4618      	mov	r0, r3
    c91e:	3708      	adds	r7, #8
    c920:	46bd      	mov	sp, r7
    c922:	bd80      	pop	{r7, pc}
    c924:	0000c481 	.word	0x0000c481

0000c928 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    c928:	b480      	push	{r7}
    c92a:	b083      	sub	sp, #12
    c92c:	af00      	add	r7, sp, #0
    c92e:	6078      	str	r0, [r7, #4]
    c930:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	683a      	ldr	r2, [r7, #0]
    c936:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c938:	bf00      	nop
    c93a:	370c      	adds	r7, #12
    c93c:	46bd      	mov	sp, r7
    c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c942:	4770      	bx	lr

0000c944 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    c944:	b580      	push	{r7, lr}
    c946:	b082      	sub	sp, #8
    c948:	af00      	add	r7, sp, #0
    c94a:	6078      	str	r0, [r7, #4]
    c94c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    c94e:	687b      	ldr	r3, [r7, #4]
    c950:	683a      	ldr	r2, [r7, #0]
    c952:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c954:	2104      	movs	r1, #4
    c956:	6878      	ldr	r0, [r7, #4]
    c958:	4b02      	ldr	r3, [pc, #8]	; (c964 <hri_sercomi2cm_write_DATA_reg+0x20>)
    c95a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c95c:	bf00      	nop
    c95e:	3708      	adds	r7, #8
    c960:	46bd      	mov	sp, r7
    c962:	bd80      	pop	{r7, pc}
    c964:	0000c481 	.word	0x0000c481

0000c968 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    c968:	b580      	push	{r7, lr}
    c96a:	b082      	sub	sp, #8
    c96c:	af00      	add	r7, sp, #0
    c96e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    c970:	2104      	movs	r1, #4
    c972:	6878      	ldr	r0, [r7, #4]
    c974:	4b03      	ldr	r3, [pc, #12]	; (c984 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    c976:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    c978:	687b      	ldr	r3, [r7, #4]
    c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    c97c:	4618      	mov	r0, r3
    c97e:	3708      	adds	r7, #8
    c980:	46bd      	mov	sp, r7
    c982:	bd80      	pop	{r7, pc}
    c984:	0000c481 	.word	0x0000c481

0000c988 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    c988:	b480      	push	{r7}
    c98a:	b083      	sub	sp, #12
    c98c:	af00      	add	r7, sp, #0
    c98e:	6078      	str	r0, [r7, #4]
    c990:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	683a      	ldr	r2, [r7, #0]
    c996:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c998:	bf00      	nop
    c99a:	370c      	adds	r7, #12
    c99c:	46bd      	mov	sp, r7
    c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9a2:	4770      	bx	lr

0000c9a4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    c9a4:	b480      	push	{r7}
    c9a6:	b083      	sub	sp, #12
    c9a8:	af00      	add	r7, sp, #0
    c9aa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    c9ac:	687b      	ldr	r3, [r7, #4]
    c9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    c9b0:	4618      	mov	r0, r3
    c9b2:	370c      	adds	r7, #12
    c9b4:	46bd      	mov	sp, r7
    c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9ba:	4770      	bx	lr

0000c9bc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    c9bc:	b480      	push	{r7}
    c9be:	b083      	sub	sp, #12
    c9c0:	af00      	add	r7, sp, #0
    c9c2:	6078      	str	r0, [r7, #4]
    c9c4:	460b      	mov	r3, r1
    c9c6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	78fa      	ldrb	r2, [r7, #3]
    c9cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c9d0:	bf00      	nop
    c9d2:	370c      	adds	r7, #12
    c9d4:	46bd      	mov	sp, r7
    c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9da:	4770      	bx	lr

0000c9dc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    c9dc:	b480      	push	{r7}
    c9de:	b083      	sub	sp, #12
    c9e0:	af00      	add	r7, sp, #0
    c9e2:	6078      	str	r0, [r7, #4]
    c9e4:	460b      	mov	r3, r1
    c9e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    c9e8:	687b      	ldr	r3, [r7, #4]
    c9ea:	887a      	ldrh	r2, [r7, #2]
    c9ec:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    c9ee:	bf00      	nop
    c9f0:	370c      	adds	r7, #12
    c9f2:	46bd      	mov	sp, r7
    c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f8:	4770      	bx	lr
	...

0000c9fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    c9fc:	b580      	push	{r7, lr}
    c9fe:	b082      	sub	sp, #8
    ca00:	af00      	add	r7, sp, #0
    ca02:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ca04:	2104      	movs	r1, #4
    ca06:	6878      	ldr	r0, [r7, #4]
    ca08:	4b06      	ldr	r3, [pc, #24]	; (ca24 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    ca0a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    ca0c:	687b      	ldr	r3, [r7, #4]
    ca0e:	8b5b      	ldrh	r3, [r3, #26]
    ca10:	b29b      	uxth	r3, r3
    ca12:	091b      	lsrs	r3, r3, #4
    ca14:	b29b      	uxth	r3, r3
    ca16:	f003 0303 	and.w	r3, r3, #3
    ca1a:	b29b      	uxth	r3, r3
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3708      	adds	r7, #8
    ca20:	46bd      	mov	sp, r7
    ca22:	bd80      	pop	{r7, pc}
    ca24:	0000c481 	.word	0x0000c481

0000ca28 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    ca28:	b580      	push	{r7, lr}
    ca2a:	b082      	sub	sp, #8
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ca30:	2104      	movs	r1, #4
    ca32:	6878      	ldr	r0, [r7, #4]
    ca34:	4b04      	ldr	r3, [pc, #16]	; (ca48 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    ca36:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    ca38:	687b      	ldr	r3, [r7, #4]
    ca3a:	8b5b      	ldrh	r3, [r3, #26]
    ca3c:	b29b      	uxth	r3, r3
}
    ca3e:	4618      	mov	r0, r3
    ca40:	3708      	adds	r7, #8
    ca42:	46bd      	mov	sp, r7
    ca44:	bd80      	pop	{r7, pc}
    ca46:	bf00      	nop
    ca48:	0000c481 	.word	0x0000c481

0000ca4c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    ca4c:	b580      	push	{r7, lr}
    ca4e:	b082      	sub	sp, #8
    ca50:	af00      	add	r7, sp, #0
    ca52:	6078      	str	r0, [r7, #4]
    ca54:	460b      	mov	r3, r1
    ca56:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	887a      	ldrh	r2, [r7, #2]
    ca5c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ca5e:	2104      	movs	r1, #4
    ca60:	6878      	ldr	r0, [r7, #4]
    ca62:	4b03      	ldr	r3, [pc, #12]	; (ca70 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    ca64:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ca66:	bf00      	nop
    ca68:	3708      	adds	r7, #8
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd80      	pop	{r7, pc}
    ca6e:	bf00      	nop
    ca70:	0000c481 	.word	0x0000c481

0000ca74 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    ca74:	b4b0      	push	{r4, r5, r7}
    ca76:	b08d      	sub	sp, #52	; 0x34
    ca78:	af00      	add	r7, sp, #0
    ca7a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    ca7c:	4b13      	ldr	r3, [pc, #76]	; (cacc <_sercom_get_hardware_index+0x58>)
    ca7e:	f107 040c 	add.w	r4, r7, #12
    ca82:	461d      	mov	r5, r3
    ca84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ca86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ca8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ca90:	2300      	movs	r3, #0
    ca92:	62fb      	str	r3, [r7, #44]	; 0x2c
    ca94:	e010      	b.n	cab8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca98:	009b      	lsls	r3, r3, #2
    ca9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ca9e:	4413      	add	r3, r2
    caa0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    caa4:	461a      	mov	r2, r3
    caa6:	687b      	ldr	r3, [r7, #4]
    caa8:	429a      	cmp	r2, r3
    caaa:	d102      	bne.n	cab2 <_sercom_get_hardware_index+0x3e>
			return i;
    caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caae:	b2db      	uxtb	r3, r3
    cab0:	e006      	b.n	cac0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cab4:	3301      	adds	r3, #1
    cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caba:	2b07      	cmp	r3, #7
    cabc:	d9eb      	bls.n	ca96 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    cabe:	2300      	movs	r3, #0
}
    cac0:	4618      	mov	r0, r3
    cac2:	3734      	adds	r7, #52	; 0x34
    cac4:	46bd      	mov	sp, r7
    cac6:	bcb0      	pop	{r4, r5, r7}
    cac8:	4770      	bx	lr
    caca:	bf00      	nop
    cacc:	00015254 	.word	0x00015254

0000cad0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b084      	sub	sp, #16
    cad4:	af00      	add	r7, sp, #0
    cad6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    cad8:	6878      	ldr	r0, [r7, #4]
    cada:	4b13      	ldr	r3, [pc, #76]	; (cb28 <_get_i2cm_index+0x58>)
    cadc:	4798      	blx	r3
    cade:	4603      	mov	r3, r0
    cae0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    cae2:	2300      	movs	r3, #0
    cae4:	73fb      	strb	r3, [r7, #15]
    cae6:	e010      	b.n	cb0a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    cae8:	7bfa      	ldrb	r2, [r7, #15]
    caea:	4910      	ldr	r1, [pc, #64]	; (cb2c <_get_i2cm_index+0x5c>)
    caec:	4613      	mov	r3, r2
    caee:	005b      	lsls	r3, r3, #1
    caf0:	4413      	add	r3, r2
    caf2:	00db      	lsls	r3, r3, #3
    caf4:	440b      	add	r3, r1
    caf6:	781b      	ldrb	r3, [r3, #0]
    caf8:	7bba      	ldrb	r2, [r7, #14]
    cafa:	429a      	cmp	r2, r3
    cafc:	d102      	bne.n	cb04 <_get_i2cm_index+0x34>
			return i;
    cafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    cb02:	e00d      	b.n	cb20 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    cb04:	7bfb      	ldrb	r3, [r7, #15]
    cb06:	3301      	adds	r3, #1
    cb08:	73fb      	strb	r3, [r7, #15]
    cb0a:	7bfb      	ldrb	r3, [r7, #15]
    cb0c:	2b02      	cmp	r3, #2
    cb0e:	d9eb      	bls.n	cae8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    cb10:	f240 32a6 	movw	r2, #934	; 0x3a6
    cb14:	4906      	ldr	r1, [pc, #24]	; (cb30 <_get_i2cm_index+0x60>)
    cb16:	2000      	movs	r0, #0
    cb18:	4b06      	ldr	r3, [pc, #24]	; (cb34 <_get_i2cm_index+0x64>)
    cb1a:	4798      	blx	r3
	return -1;
    cb1c:	f04f 33ff 	mov.w	r3, #4294967295
}
    cb20:	4618      	mov	r0, r3
    cb22:	3710      	adds	r7, #16
    cb24:	46bd      	mov	sp, r7
    cb26:	bd80      	pop	{r7, pc}
    cb28:	0000ca75 	.word	0x0000ca75
    cb2c:	20000410 	.word	0x20000410
    cb30:	00015238 	.word	0x00015238
    cb34:	000099f1 	.word	0x000099f1

0000cb38 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    cb38:	b580      	push	{r7, lr}
    cb3a:	b082      	sub	sp, #8
    cb3c:	af00      	add	r7, sp, #0
    cb3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    cb40:	2103      	movs	r1, #3
    cb42:	6878      	ldr	r0, [r7, #4]
    cb44:	4b02      	ldr	r3, [pc, #8]	; (cb50 <_sercom_i2c_send_stop+0x18>)
    cb46:	4798      	blx	r3
}
    cb48:	bf00      	nop
    cb4a:	3708      	adds	r7, #8
    cb4c:	46bd      	mov	sp, r7
    cb4e:	bd80      	pop	{r7, pc}
    cb50:	0000c7f1 	.word	0x0000c7f1

0000cb54 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    cb54:	b590      	push	{r4, r7, lr}
    cb56:	b087      	sub	sp, #28
    cb58:	af00      	add	r7, sp, #0
    cb5a:	60f8      	str	r0, [r7, #12]
    cb5c:	60b9      	str	r1, [r7, #8]
    cb5e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    cb60:	68f8      	ldr	r0, [r7, #12]
    cb62:	4b7d      	ldr	r3, [pc, #500]	; (cd58 <_sercom_i2c_sync_analyse_flags+0x204>)
    cb64:	4798      	blx	r3
    cb66:	4603      	mov	r3, r0
    cb68:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    cb6a:	68f8      	ldr	r0, [r7, #12]
    cb6c:	4b7b      	ldr	r3, [pc, #492]	; (cd5c <_sercom_i2c_sync_analyse_flags+0x208>)
    cb6e:	4798      	blx	r3
    cb70:	4603      	mov	r3, r0
    cb72:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    cb74:	68bb      	ldr	r3, [r7, #8]
    cb76:	f003 0301 	and.w	r3, r3, #1
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	f000 8095 	beq.w	ccaa <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    cb80:	8a7b      	ldrh	r3, [r7, #18]
    cb82:	f003 0302 	and.w	r3, r3, #2
    cb86:	2b00      	cmp	r3, #0
    cb88:	d01d      	beq.n	cbc6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    cb8a:	68f8      	ldr	r0, [r7, #12]
    cb8c:	4b74      	ldr	r3, [pc, #464]	; (cd60 <_sercom_i2c_sync_analyse_flags+0x20c>)
    cb8e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    cb90:	687b      	ldr	r3, [r7, #4]
    cb92:	885b      	ldrh	r3, [r3, #2]
    cb94:	b29b      	uxth	r3, r3
    cb96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cb9a:	b29a      	uxth	r2, r3
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    cba0:	687b      	ldr	r3, [r7, #4]
    cba2:	885b      	ldrh	r3, [r3, #2]
    cba4:	b29b      	uxth	r3, r3
    cba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cbaa:	b29a      	uxth	r2, r3
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    cbb0:	8a7b      	ldrh	r3, [r7, #18]
    cbb2:	f003 0301 	and.w	r3, r3, #1
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d002      	beq.n	cbc0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    cbba:	f06f 0304 	mvn.w	r3, #4
    cbbe:	e0c6      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    cbc0:	f06f 0303 	mvn.w	r3, #3
    cbc4:	e0c3      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    cbc6:	8a7b      	ldrh	r3, [r7, #18]
    cbc8:	f003 0304 	and.w	r3, r3, #4
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d01f      	beq.n	cc10 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	685b      	ldr	r3, [r3, #4]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	dd07      	ble.n	cbe8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    cbd8:	687b      	ldr	r3, [r7, #4]
    cbda:	885b      	ldrh	r3, [r3, #2]
    cbdc:	b29b      	uxth	r3, r3
    cbde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cbe2:	b29a      	uxth	r2, r3
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    cbe8:	687b      	ldr	r3, [r7, #4]
    cbea:	885b      	ldrh	r3, [r3, #2]
    cbec:	b29b      	uxth	r3, r3
    cbee:	b21b      	sxth	r3, r3
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	da02      	bge.n	cbfa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    cbf4:	68f8      	ldr	r0, [r7, #12]
    cbf6:	4b5b      	ldr	r3, [pc, #364]	; (cd64 <_sercom_i2c_sync_analyse_flags+0x210>)
    cbf8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    cbfa:	687b      	ldr	r3, [r7, #4]
    cbfc:	885b      	ldrh	r3, [r3, #2]
    cbfe:	b29b      	uxth	r3, r3
    cc00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cc04:	b29a      	uxth	r2, r3
    cc06:	687b      	ldr	r3, [r7, #4]
    cc08:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    cc0a:	f06f 0301 	mvn.w	r3, #1
    cc0e:	e09e      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	885b      	ldrh	r3, [r3, #2]
    cc14:	b29b      	uxth	r3, r3
    cc16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	d01c      	beq.n	cc58 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	881b      	ldrh	r3, [r3, #0]
    cc22:	121b      	asrs	r3, r3, #8
    cc24:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    cc26:	f003 0406 	and.w	r4, r3, #6
    cc2a:	68f8      	ldr	r0, [r7, #12]
    cc2c:	4b4e      	ldr	r3, [pc, #312]	; (cd68 <_sercom_i2c_sync_analyse_flags+0x214>)
    cc2e:	4798      	blx	r3
    cc30:	4603      	mov	r3, r0
    cc32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    cc36:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    cc38:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    cc3c:	4619      	mov	r1, r3
    cc3e:	68f8      	ldr	r0, [r7, #12]
    cc40:	4b4a      	ldr	r3, [pc, #296]	; (cd6c <_sercom_i2c_sync_analyse_flags+0x218>)
    cc42:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	885b      	ldrh	r3, [r3, #2]
    cc48:	b29b      	uxth	r3, r3
    cc4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    cc4e:	b29a      	uxth	r2, r3
    cc50:	687b      	ldr	r3, [r7, #4]
    cc52:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    cc54:	2300      	movs	r3, #0
    cc56:	e07a      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	685b      	ldr	r3, [r3, #4]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d111      	bne.n	cc84 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    cc60:	687b      	ldr	r3, [r7, #4]
    cc62:	885b      	ldrh	r3, [r3, #2]
    cc64:	b29b      	uxth	r3, r3
    cc66:	b21b      	sxth	r3, r3
    cc68:	2b00      	cmp	r3, #0
    cc6a:	da02      	bge.n	cc72 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    cc6c:	68f8      	ldr	r0, [r7, #12]
    cc6e:	4b3d      	ldr	r3, [pc, #244]	; (cd64 <_sercom_i2c_sync_analyse_flags+0x210>)
    cc70:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    cc72:	687b      	ldr	r3, [r7, #4]
    cc74:	885b      	ldrh	r3, [r3, #2]
    cc76:	b29b      	uxth	r3, r3
    cc78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cc7c:	b29a      	uxth	r2, r3
    cc7e:	687b      	ldr	r3, [r7, #4]
    cc80:	805a      	strh	r2, [r3, #2]
    cc82:	e010      	b.n	cca6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	689b      	ldr	r3, [r3, #8]
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	4619      	mov	r1, r3
    cc8c:	68f8      	ldr	r0, [r7, #12]
    cc8e:	4b38      	ldr	r3, [pc, #224]	; (cd70 <_sercom_i2c_sync_analyse_flags+0x21c>)
    cc90:	4798      	blx	r3
				msg->buffer++;
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	689b      	ldr	r3, [r3, #8]
    cc96:	1c5a      	adds	r2, r3, #1
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	609a      	str	r2, [r3, #8]
				msg->len--;
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	685b      	ldr	r3, [r3, #4]
    cca0:	1e5a      	subs	r2, r3, #1
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    cca6:	2300      	movs	r3, #0
    cca8:	e051      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    ccaa:	68bb      	ldr	r3, [r7, #8]
    ccac:	f003 0302 	and.w	r3, r3, #2
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d04b      	beq.n	cd4c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    ccb4:	687b      	ldr	r3, [r7, #4]
    ccb6:	685b      	ldr	r3, [r3, #4]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d041      	beq.n	cd40 <_sercom_i2c_sync_analyse_flags+0x1ec>
    ccbc:	8a7b      	ldrh	r3, [r7, #18]
    ccbe:	f003 0304 	and.w	r3, r3, #4
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	d13c      	bne.n	cd40 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	685b      	ldr	r3, [r3, #4]
    ccca:	1e5a      	subs	r2, r3, #1
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	685b      	ldr	r3, [r3, #4]
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d102      	bne.n	ccde <_sercom_i2c_sync_analyse_flags+0x18a>
    ccd8:	697b      	ldr	r3, [r7, #20]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d006      	beq.n	ccec <_sercom_i2c_sync_analyse_flags+0x198>
    ccde:	687b      	ldr	r3, [r7, #4]
    cce0:	685b      	ldr	r3, [r3, #4]
    cce2:	2b01      	cmp	r3, #1
    cce4:	d105      	bne.n	ccf2 <_sercom_i2c_sync_analyse_flags+0x19e>
    cce6:	697b      	ldr	r3, [r7, #20]
    cce8:	2b00      	cmp	r3, #0
    ccea:	d002      	beq.n	ccf2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ccec:	68f8      	ldr	r0, [r7, #12]
    ccee:	4b21      	ldr	r3, [pc, #132]	; (cd74 <_sercom_i2c_sync_analyse_flags+0x220>)
    ccf0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    ccf2:	687b      	ldr	r3, [r7, #4]
    ccf4:	685b      	ldr	r3, [r3, #4]
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d113      	bne.n	cd22 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    ccfa:	687b      	ldr	r3, [r7, #4]
    ccfc:	885b      	ldrh	r3, [r3, #2]
    ccfe:	b29b      	uxth	r3, r3
    cd00:	b21b      	sxth	r3, r3
    cd02:	2b00      	cmp	r3, #0
    cd04:	da05      	bge.n	cd12 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    cd06:	68f8      	ldr	r0, [r7, #12]
    cd08:	4b1b      	ldr	r3, [pc, #108]	; (cd78 <_sercom_i2c_sync_analyse_flags+0x224>)
    cd0a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    cd0c:	68f8      	ldr	r0, [r7, #12]
    cd0e:	4b15      	ldr	r3, [pc, #84]	; (cd64 <_sercom_i2c_sync_analyse_flags+0x210>)
    cd10:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    cd12:	687b      	ldr	r3, [r7, #4]
    cd14:	885b      	ldrh	r3, [r3, #2]
    cd16:	b29b      	uxth	r3, r3
    cd18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cd1c:	b29a      	uxth	r2, r3
    cd1e:	687b      	ldr	r3, [r7, #4]
    cd20:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    cd22:	687b      	ldr	r3, [r7, #4]
    cd24:	689c      	ldr	r4, [r3, #8]
    cd26:	1c62      	adds	r2, r4, #1
    cd28:	687b      	ldr	r3, [r7, #4]
    cd2a:	609a      	str	r2, [r3, #8]
    cd2c:	68f8      	ldr	r0, [r7, #12]
    cd2e:	4b13      	ldr	r3, [pc, #76]	; (cd7c <_sercom_i2c_sync_analyse_flags+0x228>)
    cd30:	4798      	blx	r3
    cd32:	4603      	mov	r3, r0
    cd34:	b2db      	uxtb	r3, r3
    cd36:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    cd38:	68f8      	ldr	r0, [r7, #12]
    cd3a:	4b11      	ldr	r3, [pc, #68]	; (cd80 <_sercom_i2c_sync_analyse_flags+0x22c>)
    cd3c:	4798      	blx	r3
    cd3e:	e005      	b.n	cd4c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    cd40:	68f8      	ldr	r0, [r7, #12]
    cd42:	4b0f      	ldr	r3, [pc, #60]	; (cd80 <_sercom_i2c_sync_analyse_flags+0x22c>)
    cd44:	4798      	blx	r3
			return I2C_NACK;
    cd46:	f06f 0301 	mvn.w	r3, #1
    cd4a:	e000      	b.n	cd4e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    cd4c:	2300      	movs	r3, #0
}
    cd4e:	4618      	mov	r0, r3
    cd50:	371c      	adds	r7, #28
    cd52:	46bd      	mov	sp, r7
    cd54:	bd90      	pop	{r4, r7, pc}
    cd56:	bf00      	nop
    cd58:	0000c619 	.word	0x0000c619
    cd5c:	0000ca29 	.word	0x0000ca29
    cd60:	0000c519 	.word	0x0000c519
    cd64:	0000cb39 	.word	0x0000cb39
    cd68:	0000c909 	.word	0x0000c909
    cd6c:	0000c8e5 	.word	0x0000c8e5
    cd70:	0000c945 	.word	0x0000c945
    cd74:	0000c7a1 	.word	0x0000c7a1
    cd78:	0000c779 	.word	0x0000c779
    cd7c:	0000c969 	.word	0x0000c969
    cd80:	0000c533 	.word	0x0000c533

0000cd84 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    cd84:	b580      	push	{r7, lr}
    cd86:	b082      	sub	sp, #8
    cd88:	af00      	add	r7, sp, #0
    cd8a:	6078      	str	r0, [r7, #4]
    cd8c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    cd8e:	687b      	ldr	r3, [r7, #4]
    cd90:	2b00      	cmp	r3, #0
    cd92:	bf14      	ite	ne
    cd94:	2301      	movne	r3, #1
    cd96:	2300      	moveq	r3, #0
    cd98:	b2db      	uxtb	r3, r3
    cd9a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    cd9e:	4908      	ldr	r1, [pc, #32]	; (cdc0 <_i2c_m_sync_init+0x3c>)
    cda0:	4618      	mov	r0, r3
    cda2:	4b08      	ldr	r3, [pc, #32]	; (cdc4 <_i2c_m_sync_init+0x40>)
    cda4:	4798      	blx	r3

	i2c_dev->hw = hw;
    cda6:	687b      	ldr	r3, [r7, #4]
    cda8:	683a      	ldr	r2, [r7, #0]
    cdaa:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    cdac:	687b      	ldr	r3, [r7, #4]
    cdae:	6839      	ldr	r1, [r7, #0]
    cdb0:	4618      	mov	r0, r3
    cdb2:	4b05      	ldr	r3, [pc, #20]	; (cdc8 <_i2c_m_sync_init+0x44>)
    cdb4:	4798      	blx	r3
    cdb6:	4603      	mov	r3, r0
}
    cdb8:	4618      	mov	r0, r3
    cdba:	3708      	adds	r7, #8
    cdbc:	46bd      	mov	sp, r7
    cdbe:	bd80      	pop	{r7, pc}
    cdc0:	00015238 	.word	0x00015238
    cdc4:	000099f1 	.word	0x000099f1
    cdc8:	0000d141 	.word	0x0000d141

0000cdcc <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    cdcc:	b580      	push	{r7, lr}
    cdce:	b082      	sub	sp, #8
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    cdd4:	687b      	ldr	r3, [r7, #4]
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	bf14      	ite	ne
    cdda:	2301      	movne	r3, #1
    cddc:	2300      	moveq	r3, #0
    cdde:	b2db      	uxtb	r3, r3
    cde0:	f240 5235 	movw	r2, #1333	; 0x535
    cde4:	4906      	ldr	r1, [pc, #24]	; (ce00 <_i2c_m_sync_enable+0x34>)
    cde6:	4618      	mov	r0, r3
    cde8:	4b06      	ldr	r3, [pc, #24]	; (ce04 <_i2c_m_sync_enable+0x38>)
    cdea:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    cdec:	687b      	ldr	r3, [r7, #4]
    cdee:	691b      	ldr	r3, [r3, #16]
    cdf0:	4618      	mov	r0, r3
    cdf2:	4b05      	ldr	r3, [pc, #20]	; (ce08 <_i2c_m_sync_enable+0x3c>)
    cdf4:	4798      	blx	r3
    cdf6:	4603      	mov	r3, r0
}
    cdf8:	4618      	mov	r0, r3
    cdfa:	3708      	adds	r7, #8
    cdfc:	46bd      	mov	sp, r7
    cdfe:	bd80      	pop	{r7, pc}
    ce00:	00015238 	.word	0x00015238
    ce04:	000099f1 	.word	0x000099f1
    ce08:	0000d0b5 	.word	0x0000d0b5

0000ce0c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    ce0c:	b580      	push	{r7, lr}
    ce0e:	b084      	sub	sp, #16
    ce10:	af00      	add	r7, sp, #0
    ce12:	6078      	str	r0, [r7, #4]
    ce14:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    ce16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce1a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    ce1c:	687b      	ldr	r3, [r7, #4]
    ce1e:	691b      	ldr	r3, [r3, #16]
    ce20:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    ce22:	68b8      	ldr	r0, [r7, #8]
    ce24:	4b0f      	ldr	r3, [pc, #60]	; (ce64 <_sercom_i2c_sync_wait_bus+0x58>)
    ce26:	4798      	blx	r3
    ce28:	4603      	mov	r3, r0
    ce2a:	461a      	mov	r2, r3
    ce2c:	683b      	ldr	r3, [r7, #0]
    ce2e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    ce30:	68fb      	ldr	r3, [r7, #12]
    ce32:	1e5a      	subs	r2, r3, #1
    ce34:	60fa      	str	r2, [r7, #12]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d102      	bne.n	ce40 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    ce3a:	f06f 0304 	mvn.w	r3, #4
    ce3e:	e00c      	b.n	ce5a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    ce40:	683b      	ldr	r3, [r7, #0]
    ce42:	681b      	ldr	r3, [r3, #0]
    ce44:	f003 0301 	and.w	r3, r3, #1
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d105      	bne.n	ce58 <_sercom_i2c_sync_wait_bus+0x4c>
    ce4c:	683b      	ldr	r3, [r7, #0]
    ce4e:	681b      	ldr	r3, [r3, #0]
    ce50:	f003 0302 	and.w	r3, r3, #2
    ce54:	2b00      	cmp	r3, #0
    ce56:	d0e4      	beq.n	ce22 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    ce58:	2300      	movs	r3, #0
}
    ce5a:	4618      	mov	r0, r3
    ce5c:	3710      	adds	r7, #16
    ce5e:	46bd      	mov	sp, r7
    ce60:	bd80      	pop	{r7, pc}
    ce62:	bf00      	nop
    ce64:	0000c54d 	.word	0x0000c54d

0000ce68 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    ce68:	b590      	push	{r4, r7, lr}
    ce6a:	b087      	sub	sp, #28
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    ce70:	687b      	ldr	r3, [r7, #4]
    ce72:	691b      	ldr	r3, [r3, #16]
    ce74:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    ce76:	687b      	ldr	r3, [r7, #4]
    ce78:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    ce7a:	6978      	ldr	r0, [r7, #20]
    ce7c:	4b39      	ldr	r3, [pc, #228]	; (cf64 <_sercom_i2c_sync_send_address+0xfc>)
    ce7e:	4798      	blx	r3
    ce80:	4603      	mov	r3, r0
    ce82:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    ce84:	687b      	ldr	r3, [r7, #4]
    ce86:	2b00      	cmp	r3, #0
    ce88:	bf14      	ite	ne
    ce8a:	2301      	movne	r3, #1
    ce8c:	2300      	moveq	r3, #0
    ce8e:	b2db      	uxtb	r3, r3
    ce90:	f240 52a5 	movw	r2, #1445	; 0x5a5
    ce94:	4934      	ldr	r1, [pc, #208]	; (cf68 <_sercom_i2c_sync_send_address+0x100>)
    ce96:	4618      	mov	r0, r3
    ce98:	4b34      	ldr	r3, [pc, #208]	; (cf6c <_sercom_i2c_sync_send_address+0x104>)
    ce9a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    ce9c:	693b      	ldr	r3, [r7, #16]
    ce9e:	685b      	ldr	r3, [r3, #4]
    cea0:	2b01      	cmp	r3, #1
    cea2:	d106      	bne.n	ceb2 <_sercom_i2c_sync_send_address+0x4a>
    cea4:	68fb      	ldr	r3, [r7, #12]
    cea6:	2b00      	cmp	r3, #0
    cea8:	d003      	beq.n	ceb2 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ceaa:	6978      	ldr	r0, [r7, #20]
    ceac:	4b30      	ldr	r3, [pc, #192]	; (cf70 <_sercom_i2c_sync_send_address+0x108>)
    ceae:	4798      	blx	r3
    ceb0:	e002      	b.n	ceb8 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ceb2:	6978      	ldr	r0, [r7, #20]
    ceb4:	4b2f      	ldr	r3, [pc, #188]	; (cf74 <_sercom_i2c_sync_send_address+0x10c>)
    ceb6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ceb8:	693b      	ldr	r3, [r7, #16]
    ceba:	881b      	ldrh	r3, [r3, #0]
    cebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    cec0:	2b00      	cmp	r3, #0
    cec2:	d022      	beq.n	cf0a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    cec4:	693b      	ldr	r3, [r7, #16]
    cec6:	885b      	ldrh	r3, [r3, #2]
    cec8:	b29b      	uxth	r3, r3
    ceca:	f003 0301 	and.w	r3, r3, #1
    cece:	2b00      	cmp	r3, #0
    ced0:	d007      	beq.n	cee2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ced2:	693b      	ldr	r3, [r7, #16]
    ced4:	885b      	ldrh	r3, [r3, #2]
    ced6:	b29b      	uxth	r3, r3
    ced8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    cedc:	b29a      	uxth	r2, r3
    cede:	693b      	ldr	r3, [r7, #16]
    cee0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    cee2:	693b      	ldr	r3, [r7, #16]
    cee4:	881b      	ldrh	r3, [r3, #0]
    cee6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    cee8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    ceec:	401c      	ands	r4, r3
    ceee:	6978      	ldr	r0, [r7, #20]
    cef0:	4b21      	ldr	r3, [pc, #132]	; (cf78 <_sercom_i2c_sync_send_address+0x110>)
    cef2:	4798      	blx	r3
    cef4:	4603      	mov	r3, r0
    cef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    cefa:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    cefc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    cf00:	4619      	mov	r1, r3
    cf02:	6978      	ldr	r0, [r7, #20]
    cf04:	4b1d      	ldr	r3, [pc, #116]	; (cf7c <_sercom_i2c_sync_send_address+0x114>)
    cf06:	4798      	blx	r3
    cf08:	e01a      	b.n	cf40 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    cf0a:	693b      	ldr	r3, [r7, #16]
    cf0c:	881b      	ldrh	r3, [r3, #0]
    cf0e:	005b      	lsls	r3, r3, #1
    cf10:	b2db      	uxtb	r3, r3
    cf12:	693a      	ldr	r2, [r7, #16]
    cf14:	8852      	ldrh	r2, [r2, #2]
    cf16:	b292      	uxth	r2, r2
    cf18:	f002 0201 	and.w	r2, r2, #1
    cf1c:	2a00      	cmp	r2, #0
    cf1e:	bf14      	ite	ne
    cf20:	2201      	movne	r2, #1
    cf22:	2200      	moveq	r2, #0
    cf24:	b2d2      	uxtb	r2, r2
    cf26:	4313      	orrs	r3, r2
    cf28:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    cf2a:	6978      	ldr	r0, [r7, #20]
    cf2c:	4b12      	ldr	r3, [pc, #72]	; (cf78 <_sercom_i2c_sync_send_address+0x110>)
    cf2e:	4798      	blx	r3
    cf30:	4603      	mov	r3, r0
    cf32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    cf36:	4323      	orrs	r3, r4
    cf38:	4619      	mov	r1, r3
    cf3a:	6978      	ldr	r0, [r7, #20]
    cf3c:	4b0f      	ldr	r3, [pc, #60]	; (cf7c <_sercom_i2c_sync_send_address+0x114>)
    cf3e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    cf40:	f107 0308 	add.w	r3, r7, #8
    cf44:	4619      	mov	r1, r3
    cf46:	6878      	ldr	r0, [r7, #4]
    cf48:	4b0d      	ldr	r3, [pc, #52]	; (cf80 <_sercom_i2c_sync_send_address+0x118>)
    cf4a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    cf4c:	68bb      	ldr	r3, [r7, #8]
    cf4e:	693a      	ldr	r2, [r7, #16]
    cf50:	4619      	mov	r1, r3
    cf52:	6978      	ldr	r0, [r7, #20]
    cf54:	4b0b      	ldr	r3, [pc, #44]	; (cf84 <_sercom_i2c_sync_send_address+0x11c>)
    cf56:	4798      	blx	r3
    cf58:	4603      	mov	r3, r0
}
    cf5a:	4618      	mov	r0, r3
    cf5c:	371c      	adds	r7, #28
    cf5e:	46bd      	mov	sp, r7
    cf60:	bd90      	pop	{r4, r7, pc}
    cf62:	bf00      	nop
    cf64:	0000c619 	.word	0x0000c619
    cf68:	00015238 	.word	0x00015238
    cf6c:	000099f1 	.word	0x000099f1
    cf70:	0000c7a1 	.word	0x0000c7a1
    cf74:	0000c7c9 	.word	0x0000c7c9
    cf78:	0000c909 	.word	0x0000c909
    cf7c:	0000c8e5 	.word	0x0000c8e5
    cf80:	0000ce0d 	.word	0x0000ce0d
    cf84:	0000cb55 	.word	0x0000cb55

0000cf88 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b086      	sub	sp, #24
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	6078      	str	r0, [r7, #4]
    cf90:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    cf92:	687b      	ldr	r3, [r7, #4]
    cf94:	691b      	ldr	r3, [r3, #16]
    cf96:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    cf98:	687b      	ldr	r3, [r7, #4]
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	bf14      	ite	ne
    cf9e:	2301      	movne	r3, #1
    cfa0:	2300      	moveq	r3, #0
    cfa2:	b2db      	uxtb	r3, r3
    cfa4:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    cfa8:	493b      	ldr	r1, [pc, #236]	; (d098 <_i2c_m_sync_transfer+0x110>)
    cfaa:	4618      	mov	r0, r3
    cfac:	4b3b      	ldr	r3, [pc, #236]	; (d09c <_i2c_m_sync_transfer+0x114>)
    cfae:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	691b      	ldr	r3, [r3, #16]
    cfb4:	2b00      	cmp	r3, #0
    cfb6:	bf14      	ite	ne
    cfb8:	2301      	movne	r3, #1
    cfba:	2300      	moveq	r3, #0
    cfbc:	b2db      	uxtb	r3, r3
    cfbe:	f240 52d1 	movw	r2, #1489	; 0x5d1
    cfc2:	4935      	ldr	r1, [pc, #212]	; (d098 <_i2c_m_sync_transfer+0x110>)
    cfc4:	4618      	mov	r0, r3
    cfc6:	4b35      	ldr	r3, [pc, #212]	; (d09c <_i2c_m_sync_transfer+0x114>)
    cfc8:	4798      	blx	r3
	ASSERT(msg);
    cfca:	683b      	ldr	r3, [r7, #0]
    cfcc:	2b00      	cmp	r3, #0
    cfce:	bf14      	ite	ne
    cfd0:	2301      	movne	r3, #1
    cfd2:	2300      	moveq	r3, #0
    cfd4:	b2db      	uxtb	r3, r3
    cfd6:	f240 52d2 	movw	r2, #1490	; 0x5d2
    cfda:	492f      	ldr	r1, [pc, #188]	; (d098 <_i2c_m_sync_transfer+0x110>)
    cfdc:	4618      	mov	r0, r3
    cfde:	4b2f      	ldr	r3, [pc, #188]	; (d09c <_i2c_m_sync_transfer+0x114>)
    cfe0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    cfe2:	687b      	ldr	r3, [r7, #4]
    cfe4:	885b      	ldrh	r3, [r3, #2]
    cfe6:	b29b      	uxth	r3, r3
    cfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cfec:	2b00      	cmp	r3, #0
    cfee:	d002      	beq.n	cff6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    cff0:	f06f 0305 	mvn.w	r3, #5
    cff4:	e04c      	b.n	d090 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    cff6:	683b      	ldr	r3, [r7, #0]
    cff8:	885b      	ldrh	r3, [r3, #2]
    cffa:	b29b      	uxth	r3, r3
    cffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d000:	b29a      	uxth	r2, r3
    d002:	683b      	ldr	r3, [r7, #0]
    d004:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    d006:	687b      	ldr	r3, [r7, #4]
    d008:	683a      	ldr	r2, [r7, #0]
    d00a:	ca07      	ldmia	r2, {r0, r1, r2}
    d00c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    d010:	6938      	ldr	r0, [r7, #16]
    d012:	4b23      	ldr	r3, [pc, #140]	; (d0a0 <_i2c_m_sync_transfer+0x118>)
    d014:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    d016:	6878      	ldr	r0, [r7, #4]
    d018:	4b22      	ldr	r3, [pc, #136]	; (d0a4 <_i2c_m_sync_transfer+0x11c>)
    d01a:	4798      	blx	r3
    d01c:	6178      	str	r0, [r7, #20]

	if (ret) {
    d01e:	697b      	ldr	r3, [r7, #20]
    d020:	2b00      	cmp	r3, #0
    d022:	d02d      	beq.n	d080 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    d024:	687b      	ldr	r3, [r7, #4]
    d026:	885b      	ldrh	r3, [r3, #2]
    d028:	b29b      	uxth	r3, r3
    d02a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d02e:	b29a      	uxth	r2, r3
    d030:	687b      	ldr	r3, [r7, #4]
    d032:	805a      	strh	r2, [r3, #2]

		return ret;
    d034:	697b      	ldr	r3, [r7, #20]
    d036:	e02b      	b.n	d090 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    d038:	f107 030c 	add.w	r3, r7, #12
    d03c:	4619      	mov	r1, r3
    d03e:	6878      	ldr	r0, [r7, #4]
    d040:	4b19      	ldr	r3, [pc, #100]	; (d0a8 <_i2c_m_sync_transfer+0x120>)
    d042:	4798      	blx	r3
    d044:	6178      	str	r0, [r7, #20]

		if (ret) {
    d046:	697b      	ldr	r3, [r7, #20]
    d048:	2b00      	cmp	r3, #0
    d04a:	d012      	beq.n	d072 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    d04c:	683b      	ldr	r3, [r7, #0]
    d04e:	885b      	ldrh	r3, [r3, #2]
    d050:	b29b      	uxth	r3, r3
    d052:	b21b      	sxth	r3, r3
    d054:	2b00      	cmp	r3, #0
    d056:	da02      	bge.n	d05e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    d058:	6938      	ldr	r0, [r7, #16]
    d05a:	4b14      	ldr	r3, [pc, #80]	; (d0ac <_i2c_m_sync_transfer+0x124>)
    d05c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	885b      	ldrh	r3, [r3, #2]
    d062:	b29b      	uxth	r3, r3
    d064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d068:	b29a      	uxth	r2, r3
    d06a:	687b      	ldr	r3, [r7, #4]
    d06c:	805a      	strh	r2, [r3, #2]

			return ret;
    d06e:	697b      	ldr	r3, [r7, #20]
    d070:	e00e      	b.n	d090 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    d072:	68fb      	ldr	r3, [r7, #12]
    d074:	687a      	ldr	r2, [r7, #4]
    d076:	4619      	mov	r1, r3
    d078:	6938      	ldr	r0, [r7, #16]
    d07a:	4b0d      	ldr	r3, [pc, #52]	; (d0b0 <_i2c_m_sync_transfer+0x128>)
    d07c:	4798      	blx	r3
    d07e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	885b      	ldrh	r3, [r3, #2]
    d084:	b29b      	uxth	r3, r3
    d086:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d08a:	2b00      	cmp	r3, #0
    d08c:	d1d4      	bne.n	d038 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    d08e:	697b      	ldr	r3, [r7, #20]
}
    d090:	4618      	mov	r0, r3
    d092:	3718      	adds	r7, #24
    d094:	46bd      	mov	sp, r7
    d096:	bd80      	pop	{r7, pc}
    d098:	00015238 	.word	0x00015238
    d09c:	000099f1 	.word	0x000099f1
    d0a0:	0000c751 	.word	0x0000c751
    d0a4:	0000ce69 	.word	0x0000ce69
    d0a8:	0000ce0d 	.word	0x0000ce0d
    d0ac:	0000cb39 	.word	0x0000cb39
    d0b0:	0000cb55 	.word	0x0000cb55

0000d0b4 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b084      	sub	sp, #16
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    d0bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d0c0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    d0c2:	2304      	movs	r3, #4
    d0c4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	bf14      	ite	ne
    d0cc:	2301      	movne	r3, #1
    d0ce:	2300      	moveq	r3, #0
    d0d0:	b2db      	uxtb	r3, r3
    d0d2:	f240 6205 	movw	r2, #1541	; 0x605
    d0d6:	4915      	ldr	r1, [pc, #84]	; (d12c <_i2c_m_enable_implementation+0x78>)
    d0d8:	4618      	mov	r0, r3
    d0da:	4b15      	ldr	r3, [pc, #84]	; (d130 <_i2c_m_enable_implementation+0x7c>)
    d0dc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    d0de:	6878      	ldr	r0, [r7, #4]
    d0e0:	4b14      	ldr	r3, [pc, #80]	; (d134 <_i2c_m_enable_implementation+0x80>)
    d0e2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    d0e4:	e016      	b.n	d114 <_i2c_m_enable_implementation+0x60>
		timeout--;
    d0e6:	68fb      	ldr	r3, [r7, #12]
    d0e8:	3b01      	subs	r3, #1
    d0ea:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    d0ec:	68fb      	ldr	r3, [r7, #12]
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	dc10      	bgt.n	d114 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    d0f2:	68bb      	ldr	r3, [r7, #8]
    d0f4:	3b01      	subs	r3, #1
    d0f6:	60bb      	str	r3, [r7, #8]
    d0f8:	68bb      	ldr	r3, [r7, #8]
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d007      	beq.n	d10e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    d0fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d102:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    d104:	2110      	movs	r1, #16
    d106:	6878      	ldr	r0, [r7, #4]
    d108:	4b0b      	ldr	r3, [pc, #44]	; (d138 <_i2c_m_enable_implementation+0x84>)
    d10a:	4798      	blx	r3
    d10c:	e002      	b.n	d114 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    d10e:	f06f 0305 	mvn.w	r3, #5
    d112:	e006      	b.n	d122 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    d114:	6878      	ldr	r0, [r7, #4]
    d116:	4b09      	ldr	r3, [pc, #36]	; (d13c <_i2c_m_enable_implementation+0x88>)
    d118:	4798      	blx	r3
    d11a:	4603      	mov	r3, r0
    d11c:	2b01      	cmp	r3, #1
    d11e:	d1e2      	bne.n	d0e6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    d120:	2300      	movs	r3, #0
}
    d122:	4618      	mov	r0, r3
    d124:	3710      	adds	r7, #16
    d126:	46bd      	mov	sp, r7
    d128:	bd80      	pop	{r7, pc}
    d12a:	bf00      	nop
    d12c:	00015238 	.word	0x00015238
    d130:	000099f1 	.word	0x000099f1
    d134:	0000c5c9 	.word	0x0000c5c9
    d138:	0000ca4d 	.word	0x0000ca4d
    d13c:	0000c9fd 	.word	0x0000c9fd

0000d140 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    d140:	b580      	push	{r7, lr}
    d142:	b084      	sub	sp, #16
    d144:	af00      	add	r7, sp, #0
    d146:	6078      	str	r0, [r7, #4]
    d148:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    d14a:	6838      	ldr	r0, [r7, #0]
    d14c:	4b42      	ldr	r3, [pc, #264]	; (d258 <_i2c_m_sync_init_impl+0x118>)
    d14e:	4798      	blx	r3
    d150:	4603      	mov	r3, r0
    d152:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    d154:	2101      	movs	r1, #1
    d156:	6838      	ldr	r0, [r7, #0]
    d158:	4b40      	ldr	r3, [pc, #256]	; (d25c <_i2c_m_sync_init_impl+0x11c>)
    d15a:	4798      	blx	r3
    d15c:	4603      	mov	r3, r0
    d15e:	f083 0301 	eor.w	r3, r3, #1
    d162:	b2db      	uxtb	r3, r3
    d164:	2b00      	cmp	r3, #0
    d166:	d020      	beq.n	d1aa <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    d168:	7bfa      	ldrb	r2, [r7, #15]
    d16a:	493d      	ldr	r1, [pc, #244]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d16c:	4613      	mov	r3, r2
    d16e:	005b      	lsls	r3, r3, #1
    d170:	4413      	add	r3, r2
    d172:	00db      	lsls	r3, r3, #3
    d174:	440b      	add	r3, r1
    d176:	3304      	adds	r3, #4
    d178:	681b      	ldr	r3, [r3, #0]
    d17a:	f003 031c 	and.w	r3, r3, #28
    d17e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    d180:	2102      	movs	r1, #2
    d182:	6838      	ldr	r0, [r7, #0]
    d184:	4b37      	ldr	r3, [pc, #220]	; (d264 <_i2c_m_sync_init_impl+0x124>)
    d186:	4798      	blx	r3
    d188:	4603      	mov	r3, r0
    d18a:	2b00      	cmp	r3, #0
    d18c:	d006      	beq.n	d19c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    d18e:	6838      	ldr	r0, [r7, #0]
    d190:	4b35      	ldr	r3, [pc, #212]	; (d268 <_i2c_m_sync_init_impl+0x128>)
    d192:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    d194:	2102      	movs	r1, #2
    d196:	6838      	ldr	r0, [r7, #0]
    d198:	4b34      	ldr	r3, [pc, #208]	; (d26c <_i2c_m_sync_init_impl+0x12c>)
    d19a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    d19c:	68bb      	ldr	r3, [r7, #8]
    d19e:	f043 0301 	orr.w	r3, r3, #1
    d1a2:	4619      	mov	r1, r3
    d1a4:	6838      	ldr	r0, [r7, #0]
    d1a6:	4b32      	ldr	r3, [pc, #200]	; (d270 <_i2c_m_sync_init_impl+0x130>)
    d1a8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    d1aa:	2101      	movs	r1, #1
    d1ac:	6838      	ldr	r0, [r7, #0]
    d1ae:	4b2f      	ldr	r3, [pc, #188]	; (d26c <_i2c_m_sync_init_impl+0x12c>)
    d1b0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    d1b2:	7bfa      	ldrb	r2, [r7, #15]
    d1b4:	492a      	ldr	r1, [pc, #168]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d1b6:	4613      	mov	r3, r2
    d1b8:	005b      	lsls	r3, r3, #1
    d1ba:	4413      	add	r3, r2
    d1bc:	00db      	lsls	r3, r3, #3
    d1be:	440b      	add	r3, r1
    d1c0:	3304      	adds	r3, #4
    d1c2:	681b      	ldr	r3, [r3, #0]
    d1c4:	4619      	mov	r1, r3
    d1c6:	6838      	ldr	r0, [r7, #0]
    d1c8:	4b29      	ldr	r3, [pc, #164]	; (d270 <_i2c_m_sync_init_impl+0x130>)
    d1ca:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    d1cc:	7bfa      	ldrb	r2, [r7, #15]
    d1ce:	4924      	ldr	r1, [pc, #144]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d1d0:	4613      	mov	r3, r2
    d1d2:	005b      	lsls	r3, r3, #1
    d1d4:	4413      	add	r3, r2
    d1d6:	00db      	lsls	r3, r3, #3
    d1d8:	440b      	add	r3, r1
    d1da:	3308      	adds	r3, #8
    d1dc:	681b      	ldr	r3, [r3, #0]
    d1de:	4619      	mov	r1, r3
    d1e0:	6838      	ldr	r0, [r7, #0]
    d1e2:	4b24      	ldr	r3, [pc, #144]	; (d274 <_i2c_m_sync_init_impl+0x134>)
    d1e4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    d1e6:	7bfa      	ldrb	r2, [r7, #15]
    d1e8:	491d      	ldr	r1, [pc, #116]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d1ea:	4613      	mov	r3, r2
    d1ec:	005b      	lsls	r3, r3, #1
    d1ee:	4413      	add	r3, r2
    d1f0:	00db      	lsls	r3, r3, #3
    d1f2:	440b      	add	r3, r1
    d1f4:	330c      	adds	r3, #12
    d1f6:	681b      	ldr	r3, [r3, #0]
    d1f8:	4619      	mov	r1, r3
    d1fa:	6838      	ldr	r0, [r7, #0]
    d1fc:	4b1e      	ldr	r3, [pc, #120]	; (d278 <_i2c_m_sync_init_impl+0x138>)
    d1fe:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    d200:	7bfa      	ldrb	r2, [r7, #15]
    d202:	4917      	ldr	r1, [pc, #92]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d204:	4613      	mov	r3, r2
    d206:	005b      	lsls	r3, r3, #1
    d208:	4413      	add	r3, r2
    d20a:	00db      	lsls	r3, r3, #3
    d20c:	440b      	add	r3, r1
    d20e:	3304      	adds	r3, #4
    d210:	681b      	ldr	r3, [r3, #0]
    d212:	0e1b      	lsrs	r3, r3, #24
    d214:	b29b      	uxth	r3, r3
    d216:	f003 0303 	and.w	r3, r3, #3
    d21a:	b29a      	uxth	r2, r3
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    d220:	687b      	ldr	r3, [r7, #4]
    d222:	899b      	ldrh	r3, [r3, #12]
    d224:	2b01      	cmp	r3, #1
    d226:	bf8c      	ite	hi
    d228:	2301      	movhi	r3, #1
    d22a:	2300      	movls	r3, #0
    d22c:	b2db      	uxtb	r3, r3
    d22e:	4619      	mov	r1, r3
    d230:	6838      	ldr	r0, [r7, #0]
    d232:	4b12      	ldr	r3, [pc, #72]	; (d27c <_i2c_m_sync_init_impl+0x13c>)
    d234:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    d236:	7bfa      	ldrb	r2, [r7, #15]
    d238:	4909      	ldr	r1, [pc, #36]	; (d260 <_i2c_m_sync_init_impl+0x120>)
    d23a:	4613      	mov	r3, r2
    d23c:	005b      	lsls	r3, r3, #1
    d23e:	4413      	add	r3, r2
    d240:	00db      	lsls	r3, r3, #3
    d242:	440b      	add	r3, r1
    d244:	3312      	adds	r3, #18
    d246:	881a      	ldrh	r2, [r3, #0]
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    d24c:	2300      	movs	r3, #0
}
    d24e:	4618      	mov	r0, r3
    d250:	3710      	adds	r7, #16
    d252:	46bd      	mov	sp, r7
    d254:	bd80      	pop	{r7, pc}
    d256:	bf00      	nop
    d258:	0000cad1 	.word	0x0000cad1
    d25c:	0000c4a5 	.word	0x0000c4a5
    d260:	20000410 	.word	0x20000410
    d264:	0000c649 	.word	0x0000c649
    d268:	0000c5f1 	.word	0x0000c5f1
    d26c:	0000c481 	.word	0x0000c481
    d270:	0000c679 	.word	0x0000c679
    d274:	0000c821 	.word	0x0000c821
    d278:	0000c869 	.word	0x0000c869
    d27c:	0000c8a5 	.word	0x0000c8a5

0000d280 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    d280:	b580      	push	{r7, lr}
    d282:	b082      	sub	sp, #8
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
    d288:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    d28a:	687b      	ldr	r3, [r7, #4]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d004      	beq.n	d29a <_spi_load_regs_master+0x1a>
    d290:	683b      	ldr	r3, [r7, #0]
    d292:	2b00      	cmp	r3, #0
    d294:	d001      	beq.n	d29a <_spi_load_regs_master+0x1a>
    d296:	2301      	movs	r3, #1
    d298:	e000      	b.n	d29c <_spi_load_regs_master+0x1c>
    d29a:	2300      	movs	r3, #0
    d29c:	f003 0301 	and.w	r3, r3, #1
    d2a0:	b2db      	uxtb	r3, r3
    d2a2:	f640 1209 	movw	r2, #2313	; 0x909
    d2a6:	4915      	ldr	r1, [pc, #84]	; (d2fc <_spi_load_regs_master+0x7c>)
    d2a8:	4618      	mov	r0, r3
    d2aa:	4b15      	ldr	r3, [pc, #84]	; (d300 <_spi_load_regs_master+0x80>)
    d2ac:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    d2ae:	683b      	ldr	r3, [r7, #0]
    d2b0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    d2b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    d2b6:	f023 0301 	bic.w	r3, r3, #1
    d2ba:	4619      	mov	r1, r3
    d2bc:	6878      	ldr	r0, [r7, #4]
    d2be:	4b11      	ldr	r3, [pc, #68]	; (d304 <_spi_load_regs_master+0x84>)
    d2c0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    d2c2:	683b      	ldr	r3, [r7, #0]
    d2c4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    d2c6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    d2ca:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    d2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d2d2:	4619      	mov	r1, r3
    d2d4:	6878      	ldr	r0, [r7, #4]
    d2d6:	4b0c      	ldr	r3, [pc, #48]	; (d308 <_spi_load_regs_master+0x88>)
    d2d8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    d2da:	683b      	ldr	r3, [r7, #0]
    d2dc:	7b1b      	ldrb	r3, [r3, #12]
    d2de:	4619      	mov	r1, r3
    d2e0:	6878      	ldr	r0, [r7, #4]
    d2e2:	4b0a      	ldr	r3, [pc, #40]	; (d30c <_spi_load_regs_master+0x8c>)
    d2e4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    d2e6:	683b      	ldr	r3, [r7, #0]
    d2e8:	7b5b      	ldrb	r3, [r3, #13]
    d2ea:	4619      	mov	r1, r3
    d2ec:	6878      	ldr	r0, [r7, #4]
    d2ee:	4b08      	ldr	r3, [pc, #32]	; (d310 <_spi_load_regs_master+0x90>)
    d2f0:	4798      	blx	r3
}
    d2f2:	bf00      	nop
    d2f4:	3708      	adds	r7, #8
    d2f6:	46bd      	mov	sp, r7
    d2f8:	bd80      	pop	{r7, pc}
    d2fa:	bf00      	nop
    d2fc:	00015238 	.word	0x00015238
    d300:	000099f1 	.word	0x000099f1
    d304:	0000c72d 	.word	0x0000c72d
    d308:	0000c845 	.word	0x0000c845
    d30c:	0000c885 	.word	0x0000c885
    d310:	0000c9bd 	.word	0x0000c9bd

0000d314 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    d314:	b580      	push	{r7, lr}
    d316:	b082      	sub	sp, #8
    d318:	af00      	add	r7, sp, #0
    d31a:	6078      	str	r0, [r7, #4]
    d31c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    d31e:	687b      	ldr	r3, [r7, #4]
    d320:	2b00      	cmp	r3, #0
    d322:	d004      	beq.n	d32e <_spi_load_regs_slave+0x1a>
    d324:	683b      	ldr	r3, [r7, #0]
    d326:	2b00      	cmp	r3, #0
    d328:	d001      	beq.n	d32e <_spi_load_regs_slave+0x1a>
    d32a:	2301      	movs	r3, #1
    d32c:	e000      	b.n	d330 <_spi_load_regs_slave+0x1c>
    d32e:	2300      	movs	r3, #0
    d330:	f003 0301 	and.w	r3, r3, #1
    d334:	b2db      	uxtb	r3, r3
    d336:	f640 121d 	movw	r2, #2333	; 0x91d
    d33a:	491a      	ldr	r1, [pc, #104]	; (d3a4 <_spi_load_regs_slave+0x90>)
    d33c:	4618      	mov	r0, r3
    d33e:	4b1a      	ldr	r3, [pc, #104]	; (d3a8 <_spi_load_regs_slave+0x94>)
    d340:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    d342:	683b      	ldr	r3, [r7, #0]
    d344:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    d346:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    d34a:	f023 0301 	bic.w	r3, r3, #1
    d34e:	4619      	mov	r1, r3
    d350:	6878      	ldr	r0, [r7, #4]
    d352:	4b16      	ldr	r3, [pc, #88]	; (d3ac <_spi_load_regs_slave+0x98>)
    d354:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    d356:	683b      	ldr	r3, [r7, #0]
    d358:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    d35a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    d35e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    d362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d366:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    d36a:	4619      	mov	r1, r3
    d36c:	6878      	ldr	r0, [r7, #4]
    d36e:	4b10      	ldr	r3, [pc, #64]	; (d3b0 <_spi_load_regs_slave+0x9c>)
    d370:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    d372:	683b      	ldr	r3, [r7, #0]
    d374:	689b      	ldr	r3, [r3, #8]
    d376:	4619      	mov	r1, r3
    d378:	6878      	ldr	r0, [r7, #4]
    d37a:	4b0e      	ldr	r3, [pc, #56]	; (d3b4 <_spi_load_regs_slave+0xa0>)
    d37c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    d37e:	683b      	ldr	r3, [r7, #0]
    d380:	7b5b      	ldrb	r3, [r3, #13]
    d382:	4619      	mov	r1, r3
    d384:	6878      	ldr	r0, [r7, #4]
    d386:	4b0c      	ldr	r3, [pc, #48]	; (d3b8 <_spi_load_regs_slave+0xa4>)
    d388:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    d38a:	bf00      	nop
    d38c:	f04f 31ff 	mov.w	r1, #4294967295
    d390:	6878      	ldr	r0, [r7, #4]
    d392:	4b0a      	ldr	r3, [pc, #40]	; (d3bc <_spi_load_regs_slave+0xa8>)
    d394:	4798      	blx	r3
    d396:	4603      	mov	r3, r0
    d398:	2b00      	cmp	r3, #0
    d39a:	d1f7      	bne.n	d38c <_spi_load_regs_slave+0x78>
		;
}
    d39c:	bf00      	nop
    d39e:	3708      	adds	r7, #8
    d3a0:	46bd      	mov	sp, r7
    d3a2:	bd80      	pop	{r7, pc}
    d3a4:	00015238 	.word	0x00015238
    d3a8:	000099f1 	.word	0x000099f1
    d3ac:	0000c72d 	.word	0x0000c72d
    d3b0:	0000c845 	.word	0x0000c845
    d3b4:	0000c929 	.word	0x0000c929
    d3b8:	0000c9bd 	.word	0x0000c9bd
    d3bc:	0000c4f1 	.word	0x0000c4f1

0000d3c0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b084      	sub	sp, #16
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	4618      	mov	r0, r3
    d3cc:	4b11      	ldr	r3, [pc, #68]	; (d414 <_spi_get_regs+0x54>)
    d3ce:	4798      	blx	r3
    d3d0:	4603      	mov	r3, r0
    d3d2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    d3d4:	2300      	movs	r3, #0
    d3d6:	73fb      	strb	r3, [r7, #15]
    d3d8:	e014      	b.n	d404 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    d3da:	7bfa      	ldrb	r2, [r7, #15]
    d3dc:	490e      	ldr	r1, [pc, #56]	; (d418 <_spi_get_regs+0x58>)
    d3de:	4613      	mov	r3, r2
    d3e0:	011b      	lsls	r3, r3, #4
    d3e2:	4413      	add	r3, r2
    d3e4:	440b      	add	r3, r1
    d3e6:	3310      	adds	r3, #16
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	7bba      	ldrb	r2, [r7, #14]
    d3ec:	429a      	cmp	r2, r3
    d3ee:	d106      	bne.n	d3fe <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    d3f0:	7bfa      	ldrb	r2, [r7, #15]
    d3f2:	4613      	mov	r3, r2
    d3f4:	011b      	lsls	r3, r3, #4
    d3f6:	4413      	add	r3, r2
    d3f8:	4a07      	ldr	r2, [pc, #28]	; (d418 <_spi_get_regs+0x58>)
    d3fa:	4413      	add	r3, r2
    d3fc:	e006      	b.n	d40c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    d3fe:	7bfb      	ldrb	r3, [r7, #15]
    d400:	3301      	adds	r3, #1
    d402:	73fb      	strb	r3, [r7, #15]
    d404:	7bfb      	ldrb	r3, [r7, #15]
    d406:	2b01      	cmp	r3, #1
    d408:	d9e7      	bls.n	d3da <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    d40a:	2300      	movs	r3, #0
}
    d40c:	4618      	mov	r0, r3
    d40e:	3710      	adds	r7, #16
    d410:	46bd      	mov	sp, r7
    d412:	bd80      	pop	{r7, pc}
    d414:	0000ca75 	.word	0x0000ca75
    d418:	00015274 	.word	0x00015274

0000d41c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    d41c:	b580      	push	{r7, lr}
    d41e:	b084      	sub	sp, #16
    d420:	af00      	add	r7, sp, #0
    d422:	6078      	str	r0, [r7, #4]
    d424:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    d426:	683b      	ldr	r3, [r7, #0]
    d428:	4618      	mov	r0, r3
    d42a:	4b35      	ldr	r3, [pc, #212]	; (d500 <_spi_m_sync_init+0xe4>)
    d42c:	4798      	blx	r3
    d42e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	2b00      	cmp	r3, #0
    d434:	d004      	beq.n	d440 <_spi_m_sync_init+0x24>
    d436:	683b      	ldr	r3, [r7, #0]
    d438:	2b00      	cmp	r3, #0
    d43a:	d001      	beq.n	d440 <_spi_m_sync_init+0x24>
    d43c:	2301      	movs	r3, #1
    d43e:	e000      	b.n	d442 <_spi_m_sync_init+0x26>
    d440:	2300      	movs	r3, #0
    d442:	f003 0301 	and.w	r3, r3, #1
    d446:	b2db      	uxtb	r3, r3
    d448:	f640 123f 	movw	r2, #2367	; 0x93f
    d44c:	492d      	ldr	r1, [pc, #180]	; (d504 <_spi_m_sync_init+0xe8>)
    d44e:	4618      	mov	r0, r3
    d450:	4b2d      	ldr	r3, [pc, #180]	; (d508 <_spi_m_sync_init+0xec>)
    d452:	4798      	blx	r3

	if (regs == NULL) {
    d454:	68fb      	ldr	r3, [r7, #12]
    d456:	2b00      	cmp	r3, #0
    d458:	d102      	bne.n	d460 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    d45a:	f06f 030c 	mvn.w	r3, #12
    d45e:	e04a      	b.n	d4f6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    d460:	2101      	movs	r1, #1
    d462:	6838      	ldr	r0, [r7, #0]
    d464:	4b29      	ldr	r3, [pc, #164]	; (d50c <_spi_m_sync_init+0xf0>)
    d466:	4798      	blx	r3
    d468:	4603      	mov	r3, r0
    d46a:	f083 0301 	eor.w	r3, r3, #1
    d46e:	b2db      	uxtb	r3, r3
    d470:	2b00      	cmp	r3, #0
    d472:	d019      	beq.n	d4a8 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    d474:	68fb      	ldr	r3, [r7, #12]
    d476:	681b      	ldr	r3, [r3, #0]
    d478:	f003 031c 	and.w	r3, r3, #28
    d47c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    d47e:	2102      	movs	r1, #2
    d480:	6838      	ldr	r0, [r7, #0]
    d482:	4b23      	ldr	r3, [pc, #140]	; (d510 <_spi_m_sync_init+0xf4>)
    d484:	4798      	blx	r3
    d486:	4603      	mov	r3, r0
    d488:	2b00      	cmp	r3, #0
    d48a:	d006      	beq.n	d49a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    d48c:	6838      	ldr	r0, [r7, #0]
    d48e:	4b21      	ldr	r3, [pc, #132]	; (d514 <_spi_m_sync_init+0xf8>)
    d490:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    d492:	2102      	movs	r1, #2
    d494:	6838      	ldr	r0, [r7, #0]
    d496:	4b20      	ldr	r3, [pc, #128]	; (d518 <_spi_m_sync_init+0xfc>)
    d498:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    d49a:	68bb      	ldr	r3, [r7, #8]
    d49c:	f043 0301 	orr.w	r3, r3, #1
    d4a0:	4619      	mov	r1, r3
    d4a2:	6838      	ldr	r0, [r7, #0]
    d4a4:	4b1d      	ldr	r3, [pc, #116]	; (d51c <_spi_m_sync_init+0x100>)
    d4a6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    d4a8:	2101      	movs	r1, #1
    d4aa:	6838      	ldr	r0, [r7, #0]
    d4ac:	4b1a      	ldr	r3, [pc, #104]	; (d518 <_spi_m_sync_init+0xfc>)
    d4ae:	4798      	blx	r3

	dev->prvt = hw;
    d4b0:	687b      	ldr	r3, [r7, #4]
    d4b2:	683a      	ldr	r2, [r7, #0]
    d4b4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    d4b6:	68fb      	ldr	r3, [r7, #12]
    d4b8:	681b      	ldr	r3, [r3, #0]
    d4ba:	f003 031c 	and.w	r3, r3, #28
    d4be:	2b08      	cmp	r3, #8
    d4c0:	d104      	bne.n	d4cc <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    d4c2:	68f9      	ldr	r1, [r7, #12]
    d4c4:	6838      	ldr	r0, [r7, #0]
    d4c6:	4b16      	ldr	r3, [pc, #88]	; (d520 <_spi_m_sync_init+0x104>)
    d4c8:	4798      	blx	r3
    d4ca:	e003      	b.n	d4d4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    d4cc:	68f9      	ldr	r1, [r7, #12]
    d4ce:	6838      	ldr	r0, [r7, #0]
    d4d0:	4b14      	ldr	r3, [pc, #80]	; (d524 <_spi_m_sync_init+0x108>)
    d4d2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    d4d4:	68fb      	ldr	r3, [r7, #12]
    d4d6:	685b      	ldr	r3, [r3, #4]
    d4d8:	f003 0307 	and.w	r3, r3, #7
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d101      	bne.n	d4e4 <_spi_m_sync_init+0xc8>
    d4e0:	2201      	movs	r2, #1
    d4e2:	e000      	b.n	d4e6 <_spi_m_sync_init+0xca>
    d4e4:	2202      	movs	r2, #2
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    d4ea:	68fb      	ldr	r3, [r7, #12]
    d4ec:	89db      	ldrh	r3, [r3, #14]
    d4ee:	b29a      	uxth	r2, r3
    d4f0:	687b      	ldr	r3, [r7, #4]
    d4f2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    d4f4:	2300      	movs	r3, #0
}
    d4f6:	4618      	mov	r0, r3
    d4f8:	3710      	adds	r7, #16
    d4fa:	46bd      	mov	sp, r7
    d4fc:	bd80      	pop	{r7, pc}
    d4fe:	bf00      	nop
    d500:	0000d3c1 	.word	0x0000d3c1
    d504:	00015238 	.word	0x00015238
    d508:	000099f1 	.word	0x000099f1
    d50c:	0000c4f1 	.word	0x0000c4f1
    d510:	0000c6fd 	.word	0x0000c6fd
    d514:	0000c6d5 	.word	0x0000c6d5
    d518:	0000c4cd 	.word	0x0000c4cd
    d51c:	0000c72d 	.word	0x0000c72d
    d520:	0000d315 	.word	0x0000d315
    d524:	0000d281 	.word	0x0000d281

0000d528 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    d528:	b580      	push	{r7, lr}
    d52a:	b082      	sub	sp, #8
    d52c:	af00      	add	r7, sp, #0
    d52e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    d530:	bf00      	nop
    d532:	2103      	movs	r1, #3
    d534:	6878      	ldr	r0, [r7, #4]
    d536:	4b06      	ldr	r3, [pc, #24]	; (d550 <_spi_wait_bus_idle+0x28>)
    d538:	4798      	blx	r3
    d53a:	4603      	mov	r3, r0
    d53c:	2b00      	cmp	r3, #0
    d53e:	d0f8      	beq.n	d532 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    d540:	2103      	movs	r1, #3
    d542:	6878      	ldr	r0, [r7, #4]
    d544:	4b03      	ldr	r3, [pc, #12]	; (d554 <_spi_wait_bus_idle+0x2c>)
    d546:	4798      	blx	r3
}
    d548:	bf00      	nop
    d54a:	3708      	adds	r7, #8
    d54c:	46bd      	mov	sp, r7
    d54e:	bd80      	pop	{r7, pc}
    d550:	0000c567 	.word	0x0000c567
    d554:	0000c5a9 	.word	0x0000c5a9

0000d558 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    d558:	b580      	push	{r7, lr}
    d55a:	b086      	sub	sp, #24
    d55c:	af00      	add	r7, sp, #0
    d55e:	60f8      	str	r0, [r7, #12]
    d560:	60b9      	str	r1, [r7, #8]
    d562:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    d564:	68bb      	ldr	r3, [r7, #8]
    d566:	f003 0304 	and.w	r3, r3, #4
    d56a:	2b00      	cmp	r3, #0
    d56c:	d101      	bne.n	d572 <_spi_rx_check_and_receive+0x1a>
		return false;
    d56e:	2300      	movs	r3, #0
    d570:	e022      	b.n	d5b8 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    d572:	68f8      	ldr	r0, [r7, #12]
    d574:	4b12      	ldr	r3, [pc, #72]	; (d5c0 <_spi_rx_check_and_receive+0x68>)
    d576:	4798      	blx	r3
    d578:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    d57a:	687b      	ldr	r3, [r7, #4]
    d57c:	685b      	ldr	r3, [r3, #4]
    d57e:	2b00      	cmp	r3, #0
    d580:	d014      	beq.n	d5ac <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    d582:	687b      	ldr	r3, [r7, #4]
    d584:	685b      	ldr	r3, [r3, #4]
    d586:	1c59      	adds	r1, r3, #1
    d588:	687a      	ldr	r2, [r7, #4]
    d58a:	6051      	str	r1, [r2, #4]
    d58c:	697a      	ldr	r2, [r7, #20]
    d58e:	b2d2      	uxtb	r2, r2
    d590:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    d592:	687b      	ldr	r3, [r7, #4]
    d594:	7c1b      	ldrb	r3, [r3, #16]
    d596:	2b01      	cmp	r3, #1
    d598:	d908      	bls.n	d5ac <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	685b      	ldr	r3, [r3, #4]
    d59e:	1c59      	adds	r1, r3, #1
    d5a0:	687a      	ldr	r2, [r7, #4]
    d5a2:	6051      	str	r1, [r2, #4]
    d5a4:	697a      	ldr	r2, [r7, #20]
    d5a6:	0a12      	lsrs	r2, r2, #8
    d5a8:	b2d2      	uxtb	r2, r2
    d5aa:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    d5ac:	687b      	ldr	r3, [r7, #4]
    d5ae:	68db      	ldr	r3, [r3, #12]
    d5b0:	1c5a      	adds	r2, r3, #1
    d5b2:	687b      	ldr	r3, [r7, #4]
    d5b4:	60da      	str	r2, [r3, #12]

	return true;
    d5b6:	2301      	movs	r3, #1
}
    d5b8:	4618      	mov	r0, r3
    d5ba:	3718      	adds	r7, #24
    d5bc:	46bd      	mov	sp, r7
    d5be:	bd80      	pop	{r7, pc}
    d5c0:	0000c9a5 	.word	0x0000c9a5

0000d5c4 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    d5c4:	b580      	push	{r7, lr}
    d5c6:	b086      	sub	sp, #24
    d5c8:	af00      	add	r7, sp, #0
    d5ca:	60f8      	str	r0, [r7, #12]
    d5cc:	60b9      	str	r1, [r7, #8]
    d5ce:	607a      	str	r2, [r7, #4]
    d5d0:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    d5d2:	68bb      	ldr	r3, [r7, #8]
    d5d4:	f003 0301 	and.w	r3, r3, #1
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d028      	beq.n	d62e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    d5dc:	687b      	ldr	r3, [r7, #4]
    d5de:	681b      	ldr	r3, [r3, #0]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d018      	beq.n	d616 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	681b      	ldr	r3, [r3, #0]
    d5e8:	1c59      	adds	r1, r3, #1
    d5ea:	687a      	ldr	r2, [r7, #4]
    d5ec:	6011      	str	r1, [r2, #0]
    d5ee:	781b      	ldrb	r3, [r3, #0]
    d5f0:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	7c1b      	ldrb	r3, [r3, #16]
    d5f6:	2b01      	cmp	r3, #1
    d5f8:	d90f      	bls.n	d61a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	681b      	ldr	r3, [r3, #0]
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	021b      	lsls	r3, r3, #8
    d602:	461a      	mov	r2, r3
    d604:	697b      	ldr	r3, [r7, #20]
    d606:	4313      	orrs	r3, r2
    d608:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    d60a:	687b      	ldr	r3, [r7, #4]
    d60c:	681b      	ldr	r3, [r3, #0]
    d60e:	1c5a      	adds	r2, r3, #1
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	601a      	str	r2, [r3, #0]
    d614:	e001      	b.n	d61a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    d616:	887b      	ldrh	r3, [r7, #2]
    d618:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    d61a:	687b      	ldr	r3, [r7, #4]
    d61c:	689b      	ldr	r3, [r3, #8]
    d61e:	1c5a      	adds	r2, r3, #1
    d620:	687b      	ldr	r3, [r7, #4]
    d622:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    d624:	6979      	ldr	r1, [r7, #20]
    d626:	68f8      	ldr	r0, [r7, #12]
    d628:	4b03      	ldr	r3, [pc, #12]	; (d638 <_spi_tx_check_and_send+0x74>)
    d62a:	4798      	blx	r3
    d62c:	e000      	b.n	d630 <_spi_tx_check_and_send+0x6c>
		return;
    d62e:	bf00      	nop
}
    d630:	3718      	adds	r7, #24
    d632:	46bd      	mov	sp, r7
    d634:	bd80      	pop	{r7, pc}
    d636:	bf00      	nop
    d638:	0000c989 	.word	0x0000c989

0000d63c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    d63c:	b580      	push	{r7, lr}
    d63e:	b082      	sub	sp, #8
    d640:	af00      	add	r7, sp, #0
    d642:	6078      	str	r0, [r7, #4]
    d644:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d64c:	2b00      	cmp	r3, #0
    d64e:	d00b      	beq.n	d668 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    d650:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d654:	6838      	ldr	r0, [r7, #0]
    d656:	4b07      	ldr	r3, [pc, #28]	; (d674 <_spi_err_check+0x38>)
    d658:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    d65a:	2180      	movs	r1, #128	; 0x80
    d65c:	6838      	ldr	r0, [r7, #0]
    d65e:	4b06      	ldr	r3, [pc, #24]	; (d678 <_spi_err_check+0x3c>)
    d660:	4798      	blx	r3
		return ERR_OVERFLOW;
    d662:	f06f 0312 	mvn.w	r3, #18
    d666:	e000      	b.n	d66a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    d668:	2300      	movs	r3, #0
}
    d66a:	4618      	mov	r0, r3
    d66c:	3708      	adds	r7, #8
    d66e:	46bd      	mov	sp, r7
    d670:	bd80      	pop	{r7, pc}
    d672:	bf00      	nop
    d674:	0000c9dd 	.word	0x0000c9dd
    d678:	0000c5a9 	.word	0x0000c5a9

0000d67c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    d67c:	b590      	push	{r4, r7, lr}
    d67e:	b08b      	sub	sp, #44	; 0x2c
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
    d684:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    d686:	687b      	ldr	r3, [r7, #4]
    d688:	681b      	ldr	r3, [r3, #0]
    d68a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    d68c:	2300      	movs	r3, #0
    d68e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    d690:	683b      	ldr	r3, [r7, #0]
    d692:	681b      	ldr	r3, [r3, #0]
    d694:	60bb      	str	r3, [r7, #8]
    d696:	683b      	ldr	r3, [r7, #0]
    d698:	685b      	ldr	r3, [r3, #4]
    d69a:	60fb      	str	r3, [r7, #12]
    d69c:	2300      	movs	r3, #0
    d69e:	613b      	str	r3, [r7, #16]
    d6a0:	2300      	movs	r3, #0
    d6a2:	617b      	str	r3, [r7, #20]
    d6a4:	687b      	ldr	r3, [r7, #4]
    d6a6:	791b      	ldrb	r3, [r3, #4]
    d6a8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    d6aa:	687b      	ldr	r3, [r7, #4]
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	d004      	beq.n	d6ba <_spi_m_sync_trans+0x3e>
    d6b0:	6a3b      	ldr	r3, [r7, #32]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d001      	beq.n	d6ba <_spi_m_sync_trans+0x3e>
    d6b6:	2301      	movs	r3, #1
    d6b8:	e000      	b.n	d6bc <_spi_m_sync_trans+0x40>
    d6ba:	2300      	movs	r3, #0
    d6bc:	f003 0301 	and.w	r3, r3, #1
    d6c0:	b2db      	uxtb	r3, r3
    d6c2:	f640 22a3 	movw	r2, #2723	; 0xaa3
    d6c6:	492b      	ldr	r1, [pc, #172]	; (d774 <_spi_m_sync_trans+0xf8>)
    d6c8:	4618      	mov	r0, r3
    d6ca:	4b2b      	ldr	r3, [pc, #172]	; (d778 <_spi_m_sync_trans+0xfc>)
    d6cc:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    d6ce:	2107      	movs	r1, #7
    d6d0:	6a38      	ldr	r0, [r7, #32]
    d6d2:	4b2a      	ldr	r3, [pc, #168]	; (d77c <_spi_m_sync_trans+0x100>)
    d6d4:	4798      	blx	r3
    d6d6:	4603      	mov	r3, r0
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d002      	beq.n	d6e2 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    d6dc:	f06f 0303 	mvn.w	r3, #3
    d6e0:	e043      	b.n	d76a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    d6e2:	6a38      	ldr	r0, [r7, #32]
    d6e4:	4b26      	ldr	r3, [pc, #152]	; (d780 <_spi_m_sync_trans+0x104>)
    d6e6:	4798      	blx	r3
    d6e8:	4603      	mov	r3, r0
    d6ea:	f083 0301 	eor.w	r3, r3, #1
    d6ee:	b2db      	uxtb	r3, r3
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d002      	beq.n	d6fa <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    d6f4:	f06f 0313 	mvn.w	r3, #19
    d6f8:	e037      	b.n	d76a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    d6fa:	6a38      	ldr	r0, [r7, #32]
    d6fc:	4b21      	ldr	r3, [pc, #132]	; (d784 <_spi_m_sync_trans+0x108>)
    d6fe:	4798      	blx	r3
    d700:	4603      	mov	r3, r0
    d702:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    d704:	f107 0308 	add.w	r3, r7, #8
    d708:	461a      	mov	r2, r3
    d70a:	69f9      	ldr	r1, [r7, #28]
    d70c:	6a38      	ldr	r0, [r7, #32]
    d70e:	4b1e      	ldr	r3, [pc, #120]	; (d788 <_spi_m_sync_trans+0x10c>)
    d710:	4798      	blx	r3
    d712:	4603      	mov	r3, r0
    d714:	f083 0301 	eor.w	r3, r3, #1
    d718:	b2db      	uxtb	r3, r3
    d71a:	2b00      	cmp	r3, #0
    d71c:	d00b      	beq.n	d736 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    d71e:	697a      	ldr	r2, [r7, #20]
    d720:	693b      	ldr	r3, [r7, #16]
    d722:	429a      	cmp	r2, r3
    d724:	d307      	bcc.n	d736 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    d726:	687b      	ldr	r3, [r7, #4]
    d728:	88db      	ldrh	r3, [r3, #6]
    d72a:	f107 0208 	add.w	r2, r7, #8
    d72e:	69f9      	ldr	r1, [r7, #28]
    d730:	6a38      	ldr	r0, [r7, #32]
    d732:	4c16      	ldr	r4, [pc, #88]	; (d78c <_spi_m_sync_trans+0x110>)
    d734:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    d736:	6a39      	ldr	r1, [r7, #32]
    d738:	69f8      	ldr	r0, [r7, #28]
    d73a:	4b15      	ldr	r3, [pc, #84]	; (d790 <_spi_m_sync_trans+0x114>)
    d73c:	4798      	blx	r3
    d73e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d742:	2b00      	cmp	r3, #0
    d744:	db0c      	blt.n	d760 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    d746:	693a      	ldr	r2, [r7, #16]
    d748:	683b      	ldr	r3, [r7, #0]
    d74a:	689b      	ldr	r3, [r3, #8]
    d74c:	429a      	cmp	r2, r3
    d74e:	d3d4      	bcc.n	d6fa <_spi_m_sync_trans+0x7e>
    d750:	697a      	ldr	r2, [r7, #20]
    d752:	683b      	ldr	r3, [r7, #0]
    d754:	689b      	ldr	r3, [r3, #8]
    d756:	429a      	cmp	r2, r3
    d758:	d3cf      	bcc.n	d6fa <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    d75a:	693b      	ldr	r3, [r7, #16]
    d75c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    d75e:	e000      	b.n	d762 <_spi_m_sync_trans+0xe6>
			break;
    d760:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    d762:	6a38      	ldr	r0, [r7, #32]
    d764:	4b0b      	ldr	r3, [pc, #44]	; (d794 <_spi_m_sync_trans+0x118>)
    d766:	4798      	blx	r3

	return rc;
    d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d76a:	4618      	mov	r0, r3
    d76c:	372c      	adds	r7, #44	; 0x2c
    d76e:	46bd      	mov	sp, r7
    d770:	bd90      	pop	{r4, r7, pc}
    d772:	bf00      	nop
    d774:	00015238 	.word	0x00015238
    d778:	000099f1 	.word	0x000099f1
    d77c:	0000c4f1 	.word	0x0000c4f1
    d780:	0000c69d 	.word	0x0000c69d
    d784:	0000c58f 	.word	0x0000c58f
    d788:	0000d559 	.word	0x0000d559
    d78c:	0000d5c5 	.word	0x0000d5c5
    d790:	0000d63d 	.word	0x0000d63d
    d794:	0000d529 	.word	0x0000d529

0000d798 <__NVIC_EnableIRQ>:
{
    d798:	b480      	push	{r7}
    d79a:	b083      	sub	sp, #12
    d79c:	af00      	add	r7, sp, #0
    d79e:	4603      	mov	r3, r0
    d7a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d7a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	db0b      	blt.n	d7c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7aa:	4909      	ldr	r1, [pc, #36]	; (d7d0 <__NVIC_EnableIRQ+0x38>)
    d7ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7b0:	095b      	lsrs	r3, r3, #5
    d7b2:	88fa      	ldrh	r2, [r7, #6]
    d7b4:	f002 021f 	and.w	r2, r2, #31
    d7b8:	2001      	movs	r0, #1
    d7ba:	fa00 f202 	lsl.w	r2, r0, r2
    d7be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7c2:	bf00      	nop
    d7c4:	370c      	adds	r7, #12
    d7c6:	46bd      	mov	sp, r7
    d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7cc:	4770      	bx	lr
    d7ce:	bf00      	nop
    d7d0:	e000e100 	.word	0xe000e100

0000d7d4 <__NVIC_DisableIRQ>:
{
    d7d4:	b480      	push	{r7}
    d7d6:	b083      	sub	sp, #12
    d7d8:	af00      	add	r7, sp, #0
    d7da:	4603      	mov	r3, r0
    d7dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d7de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7e2:	2b00      	cmp	r3, #0
    d7e4:	db10      	blt.n	d808 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7e6:	490b      	ldr	r1, [pc, #44]	; (d814 <__NVIC_DisableIRQ+0x40>)
    d7e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d7ec:	095b      	lsrs	r3, r3, #5
    d7ee:	88fa      	ldrh	r2, [r7, #6]
    d7f0:	f002 021f 	and.w	r2, r2, #31
    d7f4:	2001      	movs	r0, #1
    d7f6:	fa00 f202 	lsl.w	r2, r0, r2
    d7fa:	3320      	adds	r3, #32
    d7fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    d800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d804:	f3bf 8f6f 	isb	sy
}
    d808:	bf00      	nop
    d80a:	370c      	adds	r7, #12
    d80c:	46bd      	mov	sp, r7
    d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d812:	4770      	bx	lr
    d814:	e000e100 	.word	0xe000e100

0000d818 <__NVIC_ClearPendingIRQ>:
{
    d818:	b480      	push	{r7}
    d81a:	b083      	sub	sp, #12
    d81c:	af00      	add	r7, sp, #0
    d81e:	4603      	mov	r3, r0
    d820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d826:	2b00      	cmp	r3, #0
    d828:	db0c      	blt.n	d844 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d82a:	4909      	ldr	r1, [pc, #36]	; (d850 <__NVIC_ClearPendingIRQ+0x38>)
    d82c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d830:	095b      	lsrs	r3, r3, #5
    d832:	88fa      	ldrh	r2, [r7, #6]
    d834:	f002 021f 	and.w	r2, r2, #31
    d838:	2001      	movs	r0, #1
    d83a:	fa00 f202 	lsl.w	r2, r0, r2
    d83e:	3360      	adds	r3, #96	; 0x60
    d840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d844:	bf00      	nop
    d846:	370c      	adds	r7, #12
    d848:	46bd      	mov	sp, r7
    d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d84e:	4770      	bx	lr
    d850:	e000e100 	.word	0xe000e100

0000d854 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    d854:	b480      	push	{r7}
    d856:	b083      	sub	sp, #12
    d858:	af00      	add	r7, sp, #0
    d85a:	6078      	str	r0, [r7, #4]
    d85c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    d85e:	bf00      	nop
    d860:	687b      	ldr	r3, [r7, #4]
    d862:	689a      	ldr	r2, [r3, #8]
    d864:	683b      	ldr	r3, [r7, #0]
    d866:	4013      	ands	r3, r2
    d868:	2b00      	cmp	r3, #0
    d86a:	d1f9      	bne.n	d860 <hri_tcc_wait_for_sync+0xc>
	};
}
    d86c:	bf00      	nop
    d86e:	370c      	adds	r7, #12
    d870:	46bd      	mov	sp, r7
    d872:	f85d 7b04 	ldr.w	r7, [sp], #4
    d876:	4770      	bx	lr

0000d878 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    d878:	b480      	push	{r7}
    d87a:	b083      	sub	sp, #12
    d87c:	af00      	add	r7, sp, #0
    d87e:	6078      	str	r0, [r7, #4]
    d880:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	689a      	ldr	r2, [r3, #8]
    d886:	683b      	ldr	r3, [r7, #0]
    d888:	4013      	ands	r3, r2
    d88a:	2b00      	cmp	r3, #0
    d88c:	bf14      	ite	ne
    d88e:	2301      	movne	r3, #1
    d890:	2300      	moveq	r3, #0
    d892:	b2db      	uxtb	r3, r3
}
    d894:	4618      	mov	r0, r3
    d896:	370c      	adds	r7, #12
    d898:	46bd      	mov	sp, r7
    d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d89e:	4770      	bx	lr

0000d8a0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    d8a0:	b480      	push	{r7}
    d8a2:	b083      	sub	sp, #12
    d8a4:	af00      	add	r7, sp, #0
    d8a6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d8ac:	f003 0301 	and.w	r3, r3, #1
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	bf14      	ite	ne
    d8b4:	2301      	movne	r3, #1
    d8b6:	2300      	moveq	r3, #0
    d8b8:	b2db      	uxtb	r3, r3
}
    d8ba:	4618      	mov	r0, r3
    d8bc:	370c      	adds	r7, #12
    d8be:	46bd      	mov	sp, r7
    d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8c4:	4770      	bx	lr

0000d8c6 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    d8c6:	b480      	push	{r7}
    d8c8:	b083      	sub	sp, #12
    d8ca:	af00      	add	r7, sp, #0
    d8cc:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	2201      	movs	r2, #1
    d8d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
    d8d4:	bf00      	nop
    d8d6:	370c      	adds	r7, #12
    d8d8:	46bd      	mov	sp, r7
    d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8de:	4770      	bx	lr

0000d8e0 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    d8e0:	b480      	push	{r7}
    d8e2:	b083      	sub	sp, #12
    d8e4:	af00      	add	r7, sp, #0
    d8e6:	6078      	str	r0, [r7, #4]
    d8e8:	460b      	mov	r3, r1
    d8ea:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	78fa      	ldrb	r2, [r7, #3]
    d8f0:	715a      	strb	r2, [r3, #5]
}
    d8f2:	bf00      	nop
    d8f4:	370c      	adds	r7, #12
    d8f6:	46bd      	mov	sp, r7
    d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8fc:	4770      	bx	lr

0000d8fe <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    d8fe:	b480      	push	{r7}
    d900:	b083      	sub	sp, #12
    d902:	af00      	add	r7, sp, #0
    d904:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	2201      	movs	r2, #1
    d90a:	629a      	str	r2, [r3, #40]	; 0x28
}
    d90c:	bf00      	nop
    d90e:	370c      	adds	r7, #12
    d910:	46bd      	mov	sp, r7
    d912:	f85d 7b04 	ldr.w	r7, [sp], #4
    d916:	4770      	bx	lr

0000d918 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    d918:	b580      	push	{r7, lr}
    d91a:	b082      	sub	sp, #8
    d91c:	af00      	add	r7, sp, #0
    d91e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	681b      	ldr	r3, [r3, #0]
    d924:	f043 0201 	orr.w	r2, r3, #1
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    d92c:	2101      	movs	r1, #1
    d92e:	6878      	ldr	r0, [r7, #4]
    d930:	4b02      	ldr	r3, [pc, #8]	; (d93c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    d932:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    d934:	bf00      	nop
    d936:	3708      	adds	r7, #8
    d938:	46bd      	mov	sp, r7
    d93a:	bd80      	pop	{r7, pc}
    d93c:	0000d855 	.word	0x0000d855

0000d940 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    d940:	b580      	push	{r7, lr}
    d942:	b082      	sub	sp, #8
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	f043 0202 	orr.w	r2, r3, #2
    d950:	687b      	ldr	r3, [r7, #4]
    d952:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    d954:	2103      	movs	r1, #3
    d956:	6878      	ldr	r0, [r7, #4]
    d958:	4b02      	ldr	r3, [pc, #8]	; (d964 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    d95a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    d95c:	bf00      	nop
    d95e:	3708      	adds	r7, #8
    d960:	46bd      	mov	sp, r7
    d962:	bd80      	pop	{r7, pc}
    d964:	0000d855 	.word	0x0000d855

0000d968 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d968:	b580      	push	{r7, lr}
    d96a:	b084      	sub	sp, #16
    d96c:	af00      	add	r7, sp, #0
    d96e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    d970:	2103      	movs	r1, #3
    d972:	6878      	ldr	r0, [r7, #4]
    d974:	4b09      	ldr	r3, [pc, #36]	; (d99c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    d976:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    d978:	687b      	ldr	r3, [r7, #4]
    d97a:	681b      	ldr	r3, [r3, #0]
    d97c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    d97e:	68fb      	ldr	r3, [r7, #12]
    d980:	085b      	lsrs	r3, r3, #1
    d982:	f003 0301 	and.w	r3, r3, #1
    d986:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    d988:	68fb      	ldr	r3, [r7, #12]
    d98a:	2b00      	cmp	r3, #0
    d98c:	bf14      	ite	ne
    d98e:	2301      	movne	r3, #1
    d990:	2300      	moveq	r3, #0
    d992:	b2db      	uxtb	r3, r3
}
    d994:	4618      	mov	r0, r3
    d996:	3710      	adds	r7, #16
    d998:	46bd      	mov	sp, r7
    d99a:	bd80      	pop	{r7, pc}
    d99c:	0000d855 	.word	0x0000d855

0000d9a0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d9a0:	b580      	push	{r7, lr}
    d9a2:	b082      	sub	sp, #8
    d9a4:	af00      	add	r7, sp, #0
    d9a6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	f023 0202 	bic.w	r2, r3, #2
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    d9b4:	2103      	movs	r1, #3
    d9b6:	6878      	ldr	r0, [r7, #4]
    d9b8:	4b02      	ldr	r3, [pc, #8]	; (d9c4 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    d9ba:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    d9bc:	bf00      	nop
    d9be:	3708      	adds	r7, #8
    d9c0:	46bd      	mov	sp, r7
    d9c2:	bd80      	pop	{r7, pc}
    d9c4:	0000d855 	.word	0x0000d855

0000d9c8 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    d9c8:	b580      	push	{r7, lr}
    d9ca:	b084      	sub	sp, #16
    d9cc:	af00      	add	r7, sp, #0
    d9ce:	6078      	str	r0, [r7, #4]
    d9d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    d9d2:	2103      	movs	r1, #3
    d9d4:	6878      	ldr	r0, [r7, #4]
    d9d6:	4b07      	ldr	r3, [pc, #28]	; (d9f4 <hri_tcc_get_CTRLA_reg+0x2c>)
    d9d8:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d9e0:	68fa      	ldr	r2, [r7, #12]
    d9e2:	683b      	ldr	r3, [r7, #0]
    d9e4:	4013      	ands	r3, r2
    d9e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    d9e8:	68fb      	ldr	r3, [r7, #12]
}
    d9ea:	4618      	mov	r0, r3
    d9ec:	3710      	adds	r7, #16
    d9ee:	46bd      	mov	sp, r7
    d9f0:	bd80      	pop	{r7, pc}
    d9f2:	bf00      	nop
    d9f4:	0000d855 	.word	0x0000d855

0000d9f8 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    d9f8:	b580      	push	{r7, lr}
    d9fa:	b082      	sub	sp, #8
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	6078      	str	r0, [r7, #4]
    da00:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    da02:	687b      	ldr	r3, [r7, #4]
    da04:	683a      	ldr	r2, [r7, #0]
    da06:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    da08:	2103      	movs	r1, #3
    da0a:	6878      	ldr	r0, [r7, #4]
    da0c:	4b02      	ldr	r3, [pc, #8]	; (da18 <hri_tcc_write_CTRLA_reg+0x20>)
    da0e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    da10:	bf00      	nop
    da12:	3708      	adds	r7, #8
    da14:	46bd      	mov	sp, r7
    da16:	bd80      	pop	{r7, pc}
    da18:	0000d855 	.word	0x0000d855

0000da1c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    da1c:	b480      	push	{r7}
    da1e:	b083      	sub	sp, #12
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
    da24:	460b      	mov	r3, r1
    da26:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    da28:	687b      	ldr	r3, [r7, #4]
    da2a:	78fa      	ldrb	r2, [r7, #3]
    da2c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    da2e:	bf00      	nop
    da30:	370c      	adds	r7, #12
    da32:	46bd      	mov	sp, r7
    da34:	f85d 7b04 	ldr.w	r7, [sp], #4
    da38:	4770      	bx	lr

0000da3a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    da3a:	b480      	push	{r7}
    da3c:	b083      	sub	sp, #12
    da3e:	af00      	add	r7, sp, #0
    da40:	6078      	str	r0, [r7, #4]
    da42:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	683a      	ldr	r2, [r7, #0]
    da48:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    da4a:	bf00      	nop
    da4c:	370c      	adds	r7, #12
    da4e:	46bd      	mov	sp, r7
    da50:	f85d 7b04 	ldr.w	r7, [sp], #4
    da54:	4770      	bx	lr
	...

0000da58 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    da58:	b580      	push	{r7, lr}
    da5a:	b082      	sub	sp, #8
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
    da60:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	683a      	ldr	r2, [r7, #0]
    da66:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    da68:	2180      	movs	r1, #128	; 0x80
    da6a:	6878      	ldr	r0, [r7, #4]
    da6c:	4b02      	ldr	r3, [pc, #8]	; (da78 <hri_tcc_write_PER_reg+0x20>)
    da6e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    da70:	bf00      	nop
    da72:	3708      	adds	r7, #8
    da74:	46bd      	mov	sp, r7
    da76:	bd80      	pop	{r7, pc}
    da78:	0000d855 	.word	0x0000d855

0000da7c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    da7c:	b580      	push	{r7, lr}
    da7e:	b082      	sub	sp, #8
    da80:	af00      	add	r7, sp, #0
    da82:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    da84:	2180      	movs	r1, #128	; 0x80
    da86:	6878      	ldr	r0, [r7, #4]
    da88:	4b03      	ldr	r3, [pc, #12]	; (da98 <hri_tcc_read_PER_reg+0x1c>)
    da8a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    da8c:	687b      	ldr	r3, [r7, #4]
    da8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    da90:	4618      	mov	r0, r3
    da92:	3708      	adds	r7, #8
    da94:	46bd      	mov	sp, r7
    da96:	bd80      	pop	{r7, pc}
    da98:	0000d855 	.word	0x0000d855

0000da9c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    da9c:	b480      	push	{r7}
    da9e:	b083      	sub	sp, #12
    daa0:	af00      	add	r7, sp, #0
    daa2:	6078      	str	r0, [r7, #4]
    daa4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    daa6:	687b      	ldr	r3, [r7, #4]
    daa8:	4a0c      	ldr	r2, [pc, #48]	; (dadc <_tcc_init_irq_param+0x40>)
    daaa:	4293      	cmp	r3, r2
    daac:	d102      	bne.n	dab4 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    daae:	4a0c      	ldr	r2, [pc, #48]	; (dae0 <_tcc_init_irq_param+0x44>)
    dab0:	683b      	ldr	r3, [r7, #0]
    dab2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	4a0b      	ldr	r2, [pc, #44]	; (dae4 <_tcc_init_irq_param+0x48>)
    dab8:	4293      	cmp	r3, r2
    daba:	d102      	bne.n	dac2 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    dabc:	4a0a      	ldr	r2, [pc, #40]	; (dae8 <_tcc_init_irq_param+0x4c>)
    dabe:	683b      	ldr	r3, [r7, #0]
    dac0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	4a09      	ldr	r2, [pc, #36]	; (daec <_tcc_init_irq_param+0x50>)
    dac6:	4293      	cmp	r3, r2
    dac8:	d102      	bne.n	dad0 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    daca:	4a09      	ldr	r2, [pc, #36]	; (daf0 <_tcc_init_irq_param+0x54>)
    dacc:	683b      	ldr	r3, [r7, #0]
    dace:	6013      	str	r3, [r2, #0]
	}
}
    dad0:	bf00      	nop
    dad2:	370c      	adds	r7, #12
    dad4:	46bd      	mov	sp, r7
    dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dada:	4770      	bx	lr
    dadc:	41016000 	.word	0x41016000
    dae0:	20001b00 	.word	0x20001b00
    dae4:	41018000 	.word	0x41018000
    dae8:	20001b04 	.word	0x20001b04
    daec:	42000c00 	.word	0x42000c00
    daf0:	20001b08 	.word	0x20001b08

0000daf4 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    daf4:	b580      	push	{r7, lr}
    daf6:	b084      	sub	sp, #16
    daf8:	af00      	add	r7, sp, #0
    dafa:	6078      	str	r0, [r7, #4]
    dafc:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    dafe:	6838      	ldr	r0, [r7, #0]
    db00:	4b33      	ldr	r3, [pc, #204]	; (dbd0 <_tcc_timer_init+0xdc>)
    db02:	4798      	blx	r3
    db04:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    db06:	68fb      	ldr	r3, [r7, #12]
    db08:	2b00      	cmp	r3, #0
    db0a:	d102      	bne.n	db12 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    db0c:	f06f 0309 	mvn.w	r3, #9
    db10:	e05a      	b.n	dbc8 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    db12:	687b      	ldr	r3, [r7, #4]
    db14:	683a      	ldr	r2, [r7, #0]
    db16:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    db18:	2101      	movs	r1, #1
    db1a:	6838      	ldr	r0, [r7, #0]
    db1c:	4b2d      	ldr	r3, [pc, #180]	; (dbd4 <_tcc_timer_init+0xe0>)
    db1e:	4798      	blx	r3
    db20:	4603      	mov	r3, r0
    db22:	f083 0301 	eor.w	r3, r3, #1
    db26:	b2db      	uxtb	r3, r3
    db28:	2b00      	cmp	r3, #0
    db2a:	d011      	beq.n	db50 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    db2c:	2102      	movs	r1, #2
    db2e:	6838      	ldr	r0, [r7, #0]
    db30:	4b29      	ldr	r3, [pc, #164]	; (dbd8 <_tcc_timer_init+0xe4>)
    db32:	4798      	blx	r3
    db34:	4603      	mov	r3, r0
    db36:	2b00      	cmp	r3, #0
    db38:	d006      	beq.n	db48 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    db3a:	6838      	ldr	r0, [r7, #0]
    db3c:	4b27      	ldr	r3, [pc, #156]	; (dbdc <_tcc_timer_init+0xe8>)
    db3e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    db40:	2102      	movs	r1, #2
    db42:	6838      	ldr	r0, [r7, #0]
    db44:	4b26      	ldr	r3, [pc, #152]	; (dbe0 <_tcc_timer_init+0xec>)
    db46:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    db48:	2101      	movs	r1, #1
    db4a:	6838      	ldr	r0, [r7, #0]
    db4c:	4b25      	ldr	r3, [pc, #148]	; (dbe4 <_tcc_timer_init+0xf0>)
    db4e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    db50:	2101      	movs	r1, #1
    db52:	6838      	ldr	r0, [r7, #0]
    db54:	4b22      	ldr	r3, [pc, #136]	; (dbe0 <_tcc_timer_init+0xec>)
    db56:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    db58:	68fb      	ldr	r3, [r7, #12]
    db5a:	689b      	ldr	r3, [r3, #8]
    db5c:	4619      	mov	r1, r3
    db5e:	6838      	ldr	r0, [r7, #0]
    db60:	4b20      	ldr	r3, [pc, #128]	; (dbe4 <_tcc_timer_init+0xf0>)
    db62:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    db64:	68fb      	ldr	r3, [r7, #12]
    db66:	7b1b      	ldrb	r3, [r3, #12]
    db68:	4619      	mov	r1, r3
    db6a:	6838      	ldr	r0, [r7, #0]
    db6c:	4b1e      	ldr	r3, [pc, #120]	; (dbe8 <_tcc_timer_init+0xf4>)
    db6e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    db70:	68fb      	ldr	r3, [r7, #12]
    db72:	7b5b      	ldrb	r3, [r3, #13]
    db74:	4619      	mov	r1, r3
    db76:	6838      	ldr	r0, [r7, #0]
    db78:	4b1c      	ldr	r3, [pc, #112]	; (dbec <_tcc_timer_init+0xf8>)
    db7a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    db7c:	68fb      	ldr	r3, [r7, #12]
    db7e:	691b      	ldr	r3, [r3, #16]
    db80:	4619      	mov	r1, r3
    db82:	6838      	ldr	r0, [r7, #0]
    db84:	4b1a      	ldr	r3, [pc, #104]	; (dbf0 <_tcc_timer_init+0xfc>)
    db86:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    db88:	68fb      	ldr	r3, [r7, #12]
    db8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    db8c:	4619      	mov	r1, r3
    db8e:	6838      	ldr	r0, [r7, #0]
    db90:	4b18      	ldr	r3, [pc, #96]	; (dbf4 <_tcc_timer_init+0x100>)
    db92:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    db94:	6838      	ldr	r0, [r7, #0]
    db96:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <_tcc_timer_init+0x104>)
    db98:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    db9a:	6879      	ldr	r1, [r7, #4]
    db9c:	6838      	ldr	r0, [r7, #0]
    db9e:	4b17      	ldr	r3, [pc, #92]	; (dbfc <_tcc_timer_init+0x108>)
    dba0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dba8:	4618      	mov	r0, r3
    dbaa:	4b15      	ldr	r3, [pc, #84]	; (dc00 <_tcc_timer_init+0x10c>)
    dbac:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    dbae:	68fb      	ldr	r3, [r7, #12]
    dbb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dbb4:	4618      	mov	r0, r3
    dbb6:	4b13      	ldr	r3, [pc, #76]	; (dc04 <_tcc_timer_init+0x110>)
    dbb8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    dbba:	68fb      	ldr	r3, [r7, #12]
    dbbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dbc0:	4618      	mov	r0, r3
    dbc2:	4b11      	ldr	r3, [pc, #68]	; (dc08 <_tcc_timer_init+0x114>)
    dbc4:	4798      	blx	r3

	return ERR_NONE;
    dbc6:	2300      	movs	r3, #0
}
    dbc8:	4618      	mov	r0, r3
    dbca:	3710      	adds	r7, #16
    dbcc:	46bd      	mov	sp, r7
    dbce:	bd80      	pop	{r7, pc}
    dbd0:	0000ddd9 	.word	0x0000ddd9
    dbd4:	0000d879 	.word	0x0000d879
    dbd8:	0000d9c9 	.word	0x0000d9c9
    dbdc:	0000d9a1 	.word	0x0000d9a1
    dbe0:	0000d855 	.word	0x0000d855
    dbe4:	0000d9f9 	.word	0x0000d9f9
    dbe8:	0000d8e1 	.word	0x0000d8e1
    dbec:	0000da1d 	.word	0x0000da1d
    dbf0:	0000da3b 	.word	0x0000da3b
    dbf4:	0000da59 	.word	0x0000da59
    dbf8:	0000d8ff 	.word	0x0000d8ff
    dbfc:	0000da9d 	.word	0x0000da9d
    dc00:	0000d7d5 	.word	0x0000d7d5
    dc04:	0000d819 	.word	0x0000d819
    dc08:	0000d799 	.word	0x0000d799

0000dc0c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b084      	sub	sp, #16
    dc10:	af00      	add	r7, sp, #0
    dc12:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    dc14:	687b      	ldr	r3, [r7, #4]
    dc16:	68db      	ldr	r3, [r3, #12]
    dc18:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    dc1a:	68f8      	ldr	r0, [r7, #12]
    dc1c:	4b0a      	ldr	r3, [pc, #40]	; (dc48 <_tcc_timer_deinit+0x3c>)
    dc1e:	4798      	blx	r3
    dc20:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    dc22:	68bb      	ldr	r3, [r7, #8]
    dc24:	2b00      	cmp	r3, #0
    dc26:	d00b      	beq.n	dc40 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    dc28:	68bb      	ldr	r3, [r7, #8]
    dc2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dc2e:	4618      	mov	r0, r3
    dc30:	4b06      	ldr	r3, [pc, #24]	; (dc4c <_tcc_timer_deinit+0x40>)
    dc32:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    dc34:	68f8      	ldr	r0, [r7, #12]
    dc36:	4b06      	ldr	r3, [pc, #24]	; (dc50 <_tcc_timer_deinit+0x44>)
    dc38:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    dc3a:	68f8      	ldr	r0, [r7, #12]
    dc3c:	4b05      	ldr	r3, [pc, #20]	; (dc54 <_tcc_timer_deinit+0x48>)
    dc3e:	4798      	blx	r3
	}
}
    dc40:	bf00      	nop
    dc42:	3710      	adds	r7, #16
    dc44:	46bd      	mov	sp, r7
    dc46:	bd80      	pop	{r7, pc}
    dc48:	0000ddd9 	.word	0x0000ddd9
    dc4c:	0000d7d5 	.word	0x0000d7d5
    dc50:	0000d9a1 	.word	0x0000d9a1
    dc54:	0000d919 	.word	0x0000d919

0000dc58 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    dc58:	b580      	push	{r7, lr}
    dc5a:	b082      	sub	sp, #8
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	68db      	ldr	r3, [r3, #12]
    dc64:	4618      	mov	r0, r3
    dc66:	4b03      	ldr	r3, [pc, #12]	; (dc74 <_tcc_timer_start+0x1c>)
    dc68:	4798      	blx	r3
}
    dc6a:	bf00      	nop
    dc6c:	3708      	adds	r7, #8
    dc6e:	46bd      	mov	sp, r7
    dc70:	bd80      	pop	{r7, pc}
    dc72:	bf00      	nop
    dc74:	0000d941 	.word	0x0000d941

0000dc78 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    dc78:	b580      	push	{r7, lr}
    dc7a:	b082      	sub	sp, #8
    dc7c:	af00      	add	r7, sp, #0
    dc7e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    dc80:	687b      	ldr	r3, [r7, #4]
    dc82:	68db      	ldr	r3, [r3, #12]
    dc84:	4618      	mov	r0, r3
    dc86:	4b03      	ldr	r3, [pc, #12]	; (dc94 <_tcc_timer_stop+0x1c>)
    dc88:	4798      	blx	r3
}
    dc8a:	bf00      	nop
    dc8c:	3708      	adds	r7, #8
    dc8e:	46bd      	mov	sp, r7
    dc90:	bd80      	pop	{r7, pc}
    dc92:	bf00      	nop
    dc94:	0000d9a1 	.word	0x0000d9a1

0000dc98 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    dc98:	b580      	push	{r7, lr}
    dc9a:	b082      	sub	sp, #8
    dc9c:	af00      	add	r7, sp, #0
    dc9e:	6078      	str	r0, [r7, #4]
    dca0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	68db      	ldr	r3, [r3, #12]
    dca6:	6839      	ldr	r1, [r7, #0]
    dca8:	4618      	mov	r0, r3
    dcaa:	4b03      	ldr	r3, [pc, #12]	; (dcb8 <_tcc_timer_set_period+0x20>)
    dcac:	4798      	blx	r3
}
    dcae:	bf00      	nop
    dcb0:	3708      	adds	r7, #8
    dcb2:	46bd      	mov	sp, r7
    dcb4:	bd80      	pop	{r7, pc}
    dcb6:	bf00      	nop
    dcb8:	0000da59 	.word	0x0000da59

0000dcbc <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b082      	sub	sp, #8
    dcc0:	af00      	add	r7, sp, #0
    dcc2:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	68db      	ldr	r3, [r3, #12]
    dcc8:	4618      	mov	r0, r3
    dcca:	4b03      	ldr	r3, [pc, #12]	; (dcd8 <_tcc_timer_get_period+0x1c>)
    dccc:	4798      	blx	r3
    dcce:	4603      	mov	r3, r0
}
    dcd0:	4618      	mov	r0, r3
    dcd2:	3708      	adds	r7, #8
    dcd4:	46bd      	mov	sp, r7
    dcd6:	bd80      	pop	{r7, pc}
    dcd8:	0000da7d 	.word	0x0000da7d

0000dcdc <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    dcdc:	b580      	push	{r7, lr}
    dcde:	b082      	sub	sp, #8
    dce0:	af00      	add	r7, sp, #0
    dce2:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    dce4:	687b      	ldr	r3, [r7, #4]
    dce6:	68db      	ldr	r3, [r3, #12]
    dce8:	4618      	mov	r0, r3
    dcea:	4b03      	ldr	r3, [pc, #12]	; (dcf8 <_tcc_timer_is_started+0x1c>)
    dcec:	4798      	blx	r3
    dcee:	4603      	mov	r3, r0
}
    dcf0:	4618      	mov	r0, r3
    dcf2:	3708      	adds	r7, #8
    dcf4:	46bd      	mov	sp, r7
    dcf6:	bd80      	pop	{r7, pc}
    dcf8:	0000d969 	.word	0x0000d969

0000dcfc <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    dcfc:	b480      	push	{r7}
    dcfe:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    dd00:	4b02      	ldr	r3, [pc, #8]	; (dd0c <_tcc_get_timer+0x10>)
}
    dd02:	4618      	mov	r0, r3
    dd04:	46bd      	mov	sp, r7
    dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd0a:	4770      	bx	lr
    dd0c:	200004e8 	.word	0x200004e8

0000dd10 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    dd10:	b580      	push	{r7, lr}
    dd12:	b084      	sub	sp, #16
    dd14:	af00      	add	r7, sp, #0
    dd16:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    dd18:	687b      	ldr	r3, [r7, #4]
    dd1a:	68db      	ldr	r3, [r3, #12]
    dd1c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    dd1e:	68f8      	ldr	r0, [r7, #12]
    dd20:	4b08      	ldr	r3, [pc, #32]	; (dd44 <_tcc_timer_set_irq+0x34>)
    dd22:	4798      	blx	r3
    dd24:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    dd26:	68bb      	ldr	r3, [r7, #8]
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d006      	beq.n	dd3a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    dd2c:	68bb      	ldr	r3, [r7, #8]
    dd2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dd32:	b2db      	uxtb	r3, r3
    dd34:	4618      	mov	r0, r3
    dd36:	4b04      	ldr	r3, [pc, #16]	; (dd48 <_tcc_timer_set_irq+0x38>)
    dd38:	4798      	blx	r3
	}
}
    dd3a:	bf00      	nop
    dd3c:	3710      	adds	r7, #16
    dd3e:	46bd      	mov	sp, r7
    dd40:	bd80      	pop	{r7, pc}
    dd42:	bf00      	nop
    dd44:	0000ddd9 	.word	0x0000ddd9
    dd48:	0000a889 	.word	0x0000a889

0000dd4c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    dd4c:	b580      	push	{r7, lr}
    dd4e:	b084      	sub	sp, #16
    dd50:	af00      	add	r7, sp, #0
    dd52:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    dd54:	687b      	ldr	r3, [r7, #4]
    dd56:	68db      	ldr	r3, [r3, #12]
    dd58:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    dd5a:	68f8      	ldr	r0, [r7, #12]
    dd5c:	4b07      	ldr	r3, [pc, #28]	; (dd7c <tcc_interrupt_handler+0x30>)
    dd5e:	4798      	blx	r3
    dd60:	4603      	mov	r3, r0
    dd62:	2b00      	cmp	r3, #0
    dd64:	d006      	beq.n	dd74 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    dd66:	68f8      	ldr	r0, [r7, #12]
    dd68:	4b05      	ldr	r3, [pc, #20]	; (dd80 <tcc_interrupt_handler+0x34>)
    dd6a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	681b      	ldr	r3, [r3, #0]
    dd70:	6878      	ldr	r0, [r7, #4]
    dd72:	4798      	blx	r3
	}
}
    dd74:	bf00      	nop
    dd76:	3710      	adds	r7, #16
    dd78:	46bd      	mov	sp, r7
    dd7a:	bd80      	pop	{r7, pc}
    dd7c:	0000d8a1 	.word	0x0000d8a1
    dd80:	0000d8c7 	.word	0x0000d8c7

0000dd84 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    dd84:	b580      	push	{r7, lr}
    dd86:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    dd88:	4b03      	ldr	r3, [pc, #12]	; (dd98 <TCC0_0_Handler+0x14>)
    dd8a:	681b      	ldr	r3, [r3, #0]
    dd8c:	4618      	mov	r0, r3
    dd8e:	4b03      	ldr	r3, [pc, #12]	; (dd9c <TCC0_0_Handler+0x18>)
    dd90:	4798      	blx	r3
}
    dd92:	bf00      	nop
    dd94:	bd80      	pop	{r7, pc}
    dd96:	bf00      	nop
    dd98:	20001b00 	.word	0x20001b00
    dd9c:	0000dd4d 	.word	0x0000dd4d

0000dda0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    dda0:	b580      	push	{r7, lr}
    dda2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    dda4:	4b03      	ldr	r3, [pc, #12]	; (ddb4 <TCC1_0_Handler+0x14>)
    dda6:	681b      	ldr	r3, [r3, #0]
    dda8:	4618      	mov	r0, r3
    ddaa:	4b03      	ldr	r3, [pc, #12]	; (ddb8 <TCC1_0_Handler+0x18>)
    ddac:	4798      	blx	r3
}
    ddae:	bf00      	nop
    ddb0:	bd80      	pop	{r7, pc}
    ddb2:	bf00      	nop
    ddb4:	20001b04 	.word	0x20001b04
    ddb8:	0000dd4d 	.word	0x0000dd4d

0000ddbc <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    ddbc:	b580      	push	{r7, lr}
    ddbe:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    ddc0:	4b03      	ldr	r3, [pc, #12]	; (ddd0 <TCC2_0_Handler+0x14>)
    ddc2:	681b      	ldr	r3, [r3, #0]
    ddc4:	4618      	mov	r0, r3
    ddc6:	4b03      	ldr	r3, [pc, #12]	; (ddd4 <TCC2_0_Handler+0x18>)
    ddc8:	4798      	blx	r3
}
    ddca:	bf00      	nop
    ddcc:	bd80      	pop	{r7, pc}
    ddce:	bf00      	nop
    ddd0:	20001b08 	.word	0x20001b08
    ddd4:	0000dd4d 	.word	0x0000dd4d

0000ddd8 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    ddd8:	b480      	push	{r7}
    ddda:	b085      	sub	sp, #20
    dddc:	af00      	add	r7, sp, #0
    ddde:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    dde0:	2300      	movs	r3, #0
    dde2:	73fb      	strb	r3, [r7, #15]
    dde4:	e015      	b.n	de12 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    dde6:	7bfa      	ldrb	r2, [r7, #15]
    dde8:	490f      	ldr	r1, [pc, #60]	; (de28 <_get_tcc_cfg+0x50>)
    ddea:	4613      	mov	r3, r2
    ddec:	005b      	lsls	r3, r3, #1
    ddee:	4413      	add	r3, r2
    ddf0:	011b      	lsls	r3, r3, #4
    ddf2:	440b      	add	r3, r1
    ddf4:	681a      	ldr	r2, [r3, #0]
    ddf6:	687b      	ldr	r3, [r7, #4]
    ddf8:	429a      	cmp	r2, r3
    ddfa:	d107      	bne.n	de0c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    ddfc:	7bfa      	ldrb	r2, [r7, #15]
    ddfe:	4613      	mov	r3, r2
    de00:	005b      	lsls	r3, r3, #1
    de02:	4413      	add	r3, r2
    de04:	011b      	lsls	r3, r3, #4
    de06:	4a08      	ldr	r2, [pc, #32]	; (de28 <_get_tcc_cfg+0x50>)
    de08:	4413      	add	r3, r2
    de0a:	e006      	b.n	de1a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    de0c:	7bfb      	ldrb	r3, [r7, #15]
    de0e:	3301      	adds	r3, #1
    de10:	73fb      	strb	r3, [r7, #15]
    de12:	7bfb      	ldrb	r3, [r7, #15]
    de14:	2b02      	cmp	r3, #2
    de16:	d9e6      	bls.n	dde6 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    de18:	2300      	movs	r3, #0
}
    de1a:	4618      	mov	r0, r3
    de1c:	3714      	adds	r7, #20
    de1e:	46bd      	mov	sp, r7
    de20:	f85d 7b04 	ldr.w	r7, [sp], #4
    de24:	4770      	bx	lr
    de26:	bf00      	nop
    de28:	20000458 	.word	0x20000458

0000de2c <__NVIC_EnableIRQ>:
{
    de2c:	b480      	push	{r7}
    de2e:	b083      	sub	sp, #12
    de30:	af00      	add	r7, sp, #0
    de32:	4603      	mov	r3, r0
    de34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    de36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    de3a:	2b00      	cmp	r3, #0
    de3c:	db0b      	blt.n	de56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    de3e:	4909      	ldr	r1, [pc, #36]	; (de64 <__NVIC_EnableIRQ+0x38>)
    de40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    de44:	095b      	lsrs	r3, r3, #5
    de46:	88fa      	ldrh	r2, [r7, #6]
    de48:	f002 021f 	and.w	r2, r2, #31
    de4c:	2001      	movs	r0, #1
    de4e:	fa00 f202 	lsl.w	r2, r0, r2
    de52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de56:	bf00      	nop
    de58:	370c      	adds	r7, #12
    de5a:	46bd      	mov	sp, r7
    de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    de60:	4770      	bx	lr
    de62:	bf00      	nop
    de64:	e000e100 	.word	0xe000e100

0000de68 <__NVIC_DisableIRQ>:
{
    de68:	b480      	push	{r7}
    de6a:	b083      	sub	sp, #12
    de6c:	af00      	add	r7, sp, #0
    de6e:	4603      	mov	r3, r0
    de70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    de72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    de76:	2b00      	cmp	r3, #0
    de78:	db10      	blt.n	de9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    de7a:	490b      	ldr	r1, [pc, #44]	; (dea8 <__NVIC_DisableIRQ+0x40>)
    de7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    de80:	095b      	lsrs	r3, r3, #5
    de82:	88fa      	ldrh	r2, [r7, #6]
    de84:	f002 021f 	and.w	r2, r2, #31
    de88:	2001      	movs	r0, #1
    de8a:	fa00 f202 	lsl.w	r2, r0, r2
    de8e:	3320      	adds	r3, #32
    de90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    de94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de98:	f3bf 8f6f 	isb	sy
}
    de9c:	bf00      	nop
    de9e:	370c      	adds	r7, #12
    dea0:	46bd      	mov	sp, r7
    dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    dea6:	4770      	bx	lr
    dea8:	e000e100 	.word	0xe000e100

0000deac <__NVIC_ClearPendingIRQ>:
{
    deac:	b480      	push	{r7}
    deae:	b083      	sub	sp, #12
    deb0:	af00      	add	r7, sp, #0
    deb2:	4603      	mov	r3, r0
    deb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    deb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    deba:	2b00      	cmp	r3, #0
    debc:	db0c      	blt.n	ded8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    debe:	4909      	ldr	r1, [pc, #36]	; (dee4 <__NVIC_ClearPendingIRQ+0x38>)
    dec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    dec4:	095b      	lsrs	r3, r3, #5
    dec6:	88fa      	ldrh	r2, [r7, #6]
    dec8:	f002 021f 	and.w	r2, r2, #31
    decc:	2001      	movs	r0, #1
    dece:	fa00 f202 	lsl.w	r2, r0, r2
    ded2:	3360      	adds	r3, #96	; 0x60
    ded4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ded8:	bf00      	nop
    deda:	370c      	adds	r7, #12
    dedc:	46bd      	mov	sp, r7
    dede:	f85d 7b04 	ldr.w	r7, [sp], #4
    dee2:	4770      	bx	lr
    dee4:	e000e100 	.word	0xe000e100

0000dee8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    dee8:	b480      	push	{r7}
    deea:	b083      	sub	sp, #12
    deec:	af00      	add	r7, sp, #0
    deee:	6078      	str	r0, [r7, #4]
    def0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    def2:	bf00      	nop
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	691a      	ldr	r2, [r3, #16]
    def8:	683b      	ldr	r3, [r7, #0]
    defa:	4013      	ands	r3, r2
    defc:	2b00      	cmp	r3, #0
    defe:	d1f9      	bne.n	def4 <hri_tc_wait_for_sync+0xc>
	};
}
    df00:	bf00      	nop
    df02:	370c      	adds	r7, #12
    df04:	46bd      	mov	sp, r7
    df06:	f85d 7b04 	ldr.w	r7, [sp], #4
    df0a:	4770      	bx	lr

0000df0c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    df0c:	b480      	push	{r7}
    df0e:	b083      	sub	sp, #12
    df10:	af00      	add	r7, sp, #0
    df12:	6078      	str	r0, [r7, #4]
    df14:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	691a      	ldr	r2, [r3, #16]
    df1a:	683b      	ldr	r3, [r7, #0]
    df1c:	4013      	ands	r3, r2
    df1e:	2b00      	cmp	r3, #0
    df20:	bf14      	ite	ne
    df22:	2301      	movne	r3, #1
    df24:	2300      	moveq	r3, #0
    df26:	b2db      	uxtb	r3, r3
}
    df28:	4618      	mov	r0, r3
    df2a:	370c      	adds	r7, #12
    df2c:	46bd      	mov	sp, r7
    df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df32:	4770      	bx	lr

0000df34 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    df34:	b480      	push	{r7}
    df36:	b083      	sub	sp, #12
    df38:	af00      	add	r7, sp, #0
    df3a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    df3c:	687b      	ldr	r3, [r7, #4]
    df3e:	7a9b      	ldrb	r3, [r3, #10]
    df40:	b2db      	uxtb	r3, r3
    df42:	f003 0301 	and.w	r3, r3, #1
    df46:	2b00      	cmp	r3, #0
    df48:	bf14      	ite	ne
    df4a:	2301      	movne	r3, #1
    df4c:	2300      	moveq	r3, #0
    df4e:	b2db      	uxtb	r3, r3
}
    df50:	4618      	mov	r0, r3
    df52:	370c      	adds	r7, #12
    df54:	46bd      	mov	sp, r7
    df56:	f85d 7b04 	ldr.w	r7, [sp], #4
    df5a:	4770      	bx	lr

0000df5c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    df5c:	b480      	push	{r7}
    df5e:	b083      	sub	sp, #12
    df60:	af00      	add	r7, sp, #0
    df62:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	2201      	movs	r2, #1
    df68:	729a      	strb	r2, [r3, #10]
}
    df6a:	bf00      	nop
    df6c:	370c      	adds	r7, #12
    df6e:	46bd      	mov	sp, r7
    df70:	f85d 7b04 	ldr.w	r7, [sp], #4
    df74:	4770      	bx	lr

0000df76 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    df76:	b480      	push	{r7}
    df78:	b083      	sub	sp, #12
    df7a:	af00      	add	r7, sp, #0
    df7c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	2202      	movs	r2, #2
    df82:	729a      	strb	r2, [r3, #10]
}
    df84:	bf00      	nop
    df86:	370c      	adds	r7, #12
    df88:	46bd      	mov	sp, r7
    df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df8e:	4770      	bx	lr

0000df90 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    df90:	b480      	push	{r7}
    df92:	b083      	sub	sp, #12
    df94:	af00      	add	r7, sp, #0
    df96:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	2201      	movs	r2, #1
    df9c:	725a      	strb	r2, [r3, #9]
}
    df9e:	bf00      	nop
    dfa0:	370c      	adds	r7, #12
    dfa2:	46bd      	mov	sp, r7
    dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfa8:	4770      	bx	lr

0000dfaa <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    dfaa:	b480      	push	{r7}
    dfac:	b083      	sub	sp, #12
    dfae:	af00      	add	r7, sp, #0
    dfb0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    dfb2:	687b      	ldr	r3, [r7, #4]
    dfb4:	7a5b      	ldrb	r3, [r3, #9]
    dfb6:	b2db      	uxtb	r3, r3
    dfb8:	085b      	lsrs	r3, r3, #1
    dfba:	f003 0301 	and.w	r3, r3, #1
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	bf14      	ite	ne
    dfc2:	2301      	movne	r3, #1
    dfc4:	2300      	moveq	r3, #0
    dfc6:	b2db      	uxtb	r3, r3
}
    dfc8:	4618      	mov	r0, r3
    dfca:	370c      	adds	r7, #12
    dfcc:	46bd      	mov	sp, r7
    dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfd2:	4770      	bx	lr

0000dfd4 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    dfd4:	b580      	push	{r7, lr}
    dfd6:	b082      	sub	sp, #8
    dfd8:	af00      	add	r7, sp, #0
    dfda:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    dfdc:	687b      	ldr	r3, [r7, #4]
    dfde:	681b      	ldr	r3, [r3, #0]
    dfe0:	f043 0201 	orr.w	r2, r3, #1
    dfe4:	687b      	ldr	r3, [r7, #4]
    dfe6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    dfe8:	2101      	movs	r1, #1
    dfea:	6878      	ldr	r0, [r7, #4]
    dfec:	4b02      	ldr	r3, [pc, #8]	; (dff8 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    dfee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    dff0:	bf00      	nop
    dff2:	3708      	adds	r7, #8
    dff4:	46bd      	mov	sp, r7
    dff6:	bd80      	pop	{r7, pc}
    dff8:	0000dee9 	.word	0x0000dee9

0000dffc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    dffc:	b580      	push	{r7, lr}
    dffe:	b082      	sub	sp, #8
    e000:	af00      	add	r7, sp, #0
    e002:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    e004:	687b      	ldr	r3, [r7, #4]
    e006:	681b      	ldr	r3, [r3, #0]
    e008:	f043 0202 	orr.w	r2, r3, #2
    e00c:	687b      	ldr	r3, [r7, #4]
    e00e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    e010:	2103      	movs	r1, #3
    e012:	6878      	ldr	r0, [r7, #4]
    e014:	4b02      	ldr	r3, [pc, #8]	; (e020 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    e016:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e018:	bf00      	nop
    e01a:	3708      	adds	r7, #8
    e01c:	46bd      	mov	sp, r7
    e01e:	bd80      	pop	{r7, pc}
    e020:	0000dee9 	.word	0x0000dee9

0000e024 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    e024:	b580      	push	{r7, lr}
    e026:	b084      	sub	sp, #16
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    e02c:	2103      	movs	r1, #3
    e02e:	6878      	ldr	r0, [r7, #4]
    e030:	4b09      	ldr	r3, [pc, #36]	; (e058 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    e032:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	681b      	ldr	r3, [r3, #0]
    e038:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    e03a:	68fb      	ldr	r3, [r7, #12]
    e03c:	085b      	lsrs	r3, r3, #1
    e03e:	f003 0301 	and.w	r3, r3, #1
    e042:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    e044:	68fb      	ldr	r3, [r7, #12]
    e046:	2b00      	cmp	r3, #0
    e048:	bf14      	ite	ne
    e04a:	2301      	movne	r3, #1
    e04c:	2300      	moveq	r3, #0
    e04e:	b2db      	uxtb	r3, r3
}
    e050:	4618      	mov	r0, r3
    e052:	3710      	adds	r7, #16
    e054:	46bd      	mov	sp, r7
    e056:	bd80      	pop	{r7, pc}
    e058:	0000dee9 	.word	0x0000dee9

0000e05c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    e05c:	b580      	push	{r7, lr}
    e05e:	b082      	sub	sp, #8
    e060:	af00      	add	r7, sp, #0
    e062:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    e064:	687b      	ldr	r3, [r7, #4]
    e066:	681b      	ldr	r3, [r3, #0]
    e068:	f023 0202 	bic.w	r2, r3, #2
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    e070:	2103      	movs	r1, #3
    e072:	6878      	ldr	r0, [r7, #4]
    e074:	4b02      	ldr	r3, [pc, #8]	; (e080 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    e076:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e078:	bf00      	nop
    e07a:	3708      	adds	r7, #8
    e07c:	46bd      	mov	sp, r7
    e07e:	bd80      	pop	{r7, pc}
    e080:	0000dee9 	.word	0x0000dee9

0000e084 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    e084:	b480      	push	{r7}
    e086:	b085      	sub	sp, #20
    e088:	af00      	add	r7, sp, #0
    e08a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	681b      	ldr	r3, [r3, #0]
    e090:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    e092:	68fb      	ldr	r3, [r7, #12]
    e094:	089b      	lsrs	r3, r3, #2
    e096:	f003 0303 	and.w	r3, r3, #3
    e09a:	60fb      	str	r3, [r7, #12]
	return tmp;
    e09c:	68fb      	ldr	r3, [r7, #12]
}
    e09e:	4618      	mov	r0, r3
    e0a0:	3714      	adds	r7, #20
    e0a2:	46bd      	mov	sp, r7
    e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0a8:	4770      	bx	lr
	...

0000e0ac <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    e0ac:	b580      	push	{r7, lr}
    e0ae:	b084      	sub	sp, #16
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	6078      	str	r0, [r7, #4]
    e0b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    e0b6:	2103      	movs	r1, #3
    e0b8:	6878      	ldr	r0, [r7, #4]
    e0ba:	4b07      	ldr	r3, [pc, #28]	; (e0d8 <hri_tc_get_CTRLA_reg+0x2c>)
    e0bc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    e0be:	687b      	ldr	r3, [r7, #4]
    e0c0:	681b      	ldr	r3, [r3, #0]
    e0c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    e0c4:	68fa      	ldr	r2, [r7, #12]
    e0c6:	683b      	ldr	r3, [r7, #0]
    e0c8:	4013      	ands	r3, r2
    e0ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    e0cc:	68fb      	ldr	r3, [r7, #12]
}
    e0ce:	4618      	mov	r0, r3
    e0d0:	3710      	adds	r7, #16
    e0d2:	46bd      	mov	sp, r7
    e0d4:	bd80      	pop	{r7, pc}
    e0d6:	bf00      	nop
    e0d8:	0000dee9 	.word	0x0000dee9

0000e0dc <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    e0dc:	b580      	push	{r7, lr}
    e0de:	b082      	sub	sp, #8
    e0e0:	af00      	add	r7, sp, #0
    e0e2:	6078      	str	r0, [r7, #4]
    e0e4:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    e0e6:	687b      	ldr	r3, [r7, #4]
    e0e8:	683a      	ldr	r2, [r7, #0]
    e0ea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    e0ec:	2103      	movs	r1, #3
    e0ee:	6878      	ldr	r0, [r7, #4]
    e0f0:	4b02      	ldr	r3, [pc, #8]	; (e0fc <hri_tc_write_CTRLA_reg+0x20>)
    e0f2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e0f4:	bf00      	nop
    e0f6:	3708      	adds	r7, #8
    e0f8:	46bd      	mov	sp, r7
    e0fa:	bd80      	pop	{r7, pc}
    e0fc:	0000dee9 	.word	0x0000dee9

0000e100 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    e100:	b480      	push	{r7}
    e102:	b083      	sub	sp, #12
    e104:	af00      	add	r7, sp, #0
    e106:	6078      	str	r0, [r7, #4]
    e108:	460b      	mov	r3, r1
    e10a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	887a      	ldrh	r2, [r7, #2]
    e110:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    e112:	bf00      	nop
    e114:	370c      	adds	r7, #12
    e116:	46bd      	mov	sp, r7
    e118:	f85d 7b04 	ldr.w	r7, [sp], #4
    e11c:	4770      	bx	lr

0000e11e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    e11e:	b480      	push	{r7}
    e120:	b083      	sub	sp, #12
    e122:	af00      	add	r7, sp, #0
    e124:	6078      	str	r0, [r7, #4]
    e126:	460b      	mov	r3, r1
    e128:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    e12a:	687b      	ldr	r3, [r7, #4]
    e12c:	78fa      	ldrb	r2, [r7, #3]
    e12e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    e130:	bf00      	nop
    e132:	370c      	adds	r7, #12
    e134:	46bd      	mov	sp, r7
    e136:	f85d 7b04 	ldr.w	r7, [sp], #4
    e13a:	4770      	bx	lr

0000e13c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    e13c:	b480      	push	{r7}
    e13e:	b083      	sub	sp, #12
    e140:	af00      	add	r7, sp, #0
    e142:	6078      	str	r0, [r7, #4]
    e144:	460b      	mov	r3, r1
    e146:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    e148:	687b      	ldr	r3, [r7, #4]
    e14a:	78fa      	ldrb	r2, [r7, #3]
    e14c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    e14e:	bf00      	nop
    e150:	370c      	adds	r7, #12
    e152:	46bd      	mov	sp, r7
    e154:	f85d 7b04 	ldr.w	r7, [sp], #4
    e158:	4770      	bx	lr
	...

0000e15c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    e15c:	b580      	push	{r7, lr}
    e15e:	b082      	sub	sp, #8
    e160:	af00      	add	r7, sp, #0
    e162:	6078      	str	r0, [r7, #4]
    e164:	460b      	mov	r3, r1
    e166:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    e168:	687b      	ldr	r3, [r7, #4]
    e16a:	78fa      	ldrb	r2, [r7, #3]
    e16c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    e16e:	2120      	movs	r1, #32
    e170:	6878      	ldr	r0, [r7, #4]
    e172:	4b03      	ldr	r3, [pc, #12]	; (e180 <hri_tccount8_write_PER_reg+0x24>)
    e174:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e176:	bf00      	nop
    e178:	3708      	adds	r7, #8
    e17a:	46bd      	mov	sp, r7
    e17c:	bd80      	pop	{r7, pc}
    e17e:	bf00      	nop
    e180:	0000dee9 	.word	0x0000dee9

0000e184 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    e184:	b580      	push	{r7, lr}
    e186:	b082      	sub	sp, #8
    e188:	af00      	add	r7, sp, #0
    e18a:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    e18c:	2120      	movs	r1, #32
    e18e:	6878      	ldr	r0, [r7, #4]
    e190:	4b04      	ldr	r3, [pc, #16]	; (e1a4 <hri_tccount8_read_PER_reg+0x20>)
    e192:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	7edb      	ldrb	r3, [r3, #27]
    e198:	b2db      	uxtb	r3, r3
}
    e19a:	4618      	mov	r0, r3
    e19c:	3708      	adds	r7, #8
    e19e:	46bd      	mov	sp, r7
    e1a0:	bd80      	pop	{r7, pc}
    e1a2:	bf00      	nop
    e1a4:	0000dee9 	.word	0x0000dee9

0000e1a8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b082      	sub	sp, #8
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
    e1b0:	460b      	mov	r3, r1
    e1b2:	70fb      	strb	r3, [r7, #3]
    e1b4:	4613      	mov	r3, r2
    e1b6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    e1b8:	78fb      	ldrb	r3, [r7, #3]
    e1ba:	687a      	ldr	r2, [r7, #4]
    e1bc:	4413      	add	r3, r2
    e1be:	78ba      	ldrb	r2, [r7, #2]
    e1c0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    e1c2:	21c0      	movs	r1, #192	; 0xc0
    e1c4:	6878      	ldr	r0, [r7, #4]
    e1c6:	4b03      	ldr	r3, [pc, #12]	; (e1d4 <hri_tccount8_write_CC_reg+0x2c>)
    e1c8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e1ca:	bf00      	nop
    e1cc:	3708      	adds	r7, #8
    e1ce:	46bd      	mov	sp, r7
    e1d0:	bd80      	pop	{r7, pc}
    e1d2:	bf00      	nop
    e1d4:	0000dee9 	.word	0x0000dee9

0000e1d8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    e1d8:	b580      	push	{r7, lr}
    e1da:	b082      	sub	sp, #8
    e1dc:	af00      	add	r7, sp, #0
    e1de:	6078      	str	r0, [r7, #4]
    e1e0:	460b      	mov	r3, r1
    e1e2:	70fb      	strb	r3, [r7, #3]
    e1e4:	4613      	mov	r3, r2
    e1e6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    e1e8:	78fb      	ldrb	r3, [r7, #3]
    e1ea:	687a      	ldr	r2, [r7, #4]
    e1ec:	330c      	adds	r3, #12
    e1ee:	005b      	lsls	r3, r3, #1
    e1f0:	4413      	add	r3, r2
    e1f2:	883a      	ldrh	r2, [r7, #0]
    e1f4:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    e1f6:	21c0      	movs	r1, #192	; 0xc0
    e1f8:	6878      	ldr	r0, [r7, #4]
    e1fa:	4b03      	ldr	r3, [pc, #12]	; (e208 <hri_tccount16_write_CC_reg+0x30>)
    e1fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e1fe:	bf00      	nop
    e200:	3708      	adds	r7, #8
    e202:	46bd      	mov	sp, r7
    e204:	bd80      	pop	{r7, pc}
    e206:	bf00      	nop
    e208:	0000dee9 	.word	0x0000dee9

0000e20c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    e20c:	b580      	push	{r7, lr}
    e20e:	b082      	sub	sp, #8
    e210:	af00      	add	r7, sp, #0
    e212:	6078      	str	r0, [r7, #4]
    e214:	460b      	mov	r3, r1
    e216:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    e218:	21c0      	movs	r1, #192	; 0xc0
    e21a:	6878      	ldr	r0, [r7, #4]
    e21c:	4b06      	ldr	r3, [pc, #24]	; (e238 <hri_tccount16_read_CC_reg+0x2c>)
    e21e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    e220:	78fb      	ldrb	r3, [r7, #3]
    e222:	687a      	ldr	r2, [r7, #4]
    e224:	330c      	adds	r3, #12
    e226:	005b      	lsls	r3, r3, #1
    e228:	4413      	add	r3, r2
    e22a:	889b      	ldrh	r3, [r3, #4]
    e22c:	b29b      	uxth	r3, r3
}
    e22e:	4618      	mov	r0, r3
    e230:	3708      	adds	r7, #8
    e232:	46bd      	mov	sp, r7
    e234:	bd80      	pop	{r7, pc}
    e236:	bf00      	nop
    e238:	0000dee9 	.word	0x0000dee9

0000e23c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    e23c:	b580      	push	{r7, lr}
    e23e:	b084      	sub	sp, #16
    e240:	af00      	add	r7, sp, #0
    e242:	60f8      	str	r0, [r7, #12]
    e244:	460b      	mov	r3, r1
    e246:	607a      	str	r2, [r7, #4]
    e248:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    e24a:	7afb      	ldrb	r3, [r7, #11]
    e24c:	68fa      	ldr	r2, [r7, #12]
    e24e:	3306      	adds	r3, #6
    e250:	009b      	lsls	r3, r3, #2
    e252:	4413      	add	r3, r2
    e254:	687a      	ldr	r2, [r7, #4]
    e256:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    e258:	21c0      	movs	r1, #192	; 0xc0
    e25a:	68f8      	ldr	r0, [r7, #12]
    e25c:	4b02      	ldr	r3, [pc, #8]	; (e268 <hri_tccount32_write_CC_reg+0x2c>)
    e25e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    e260:	bf00      	nop
    e262:	3710      	adds	r7, #16
    e264:	46bd      	mov	sp, r7
    e266:	bd80      	pop	{r7, pc}
    e268:	0000dee9 	.word	0x0000dee9

0000e26c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    e26c:	b580      	push	{r7, lr}
    e26e:	b082      	sub	sp, #8
    e270:	af00      	add	r7, sp, #0
    e272:	6078      	str	r0, [r7, #4]
    e274:	460b      	mov	r3, r1
    e276:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    e278:	21c0      	movs	r1, #192	; 0xc0
    e27a:	6878      	ldr	r0, [r7, #4]
    e27c:	4b05      	ldr	r3, [pc, #20]	; (e294 <hri_tccount32_read_CC_reg+0x28>)
    e27e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    e280:	78fb      	ldrb	r3, [r7, #3]
    e282:	687a      	ldr	r2, [r7, #4]
    e284:	3306      	adds	r3, #6
    e286:	009b      	lsls	r3, r3, #2
    e288:	4413      	add	r3, r2
    e28a:	685b      	ldr	r3, [r3, #4]
}
    e28c:	4618      	mov	r0, r3
    e28e:	3708      	adds	r7, #8
    e290:	46bd      	mov	sp, r7
    e292:	bd80      	pop	{r7, pc}
    e294:	0000dee9 	.word	0x0000dee9

0000e298 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    e298:	b580      	push	{r7, lr}
    e29a:	b084      	sub	sp, #16
    e29c:	af00      	add	r7, sp, #0
    e29e:	6078      	str	r0, [r7, #4]
    e2a0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    e2a2:	6838      	ldr	r0, [r7, #0]
    e2a4:	4b93      	ldr	r3, [pc, #588]	; (e4f4 <_tc_timer_init+0x25c>)
    e2a6:	4798      	blx	r3
    e2a8:	4603      	mov	r3, r0
    e2aa:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    e2ac:	687b      	ldr	r3, [r7, #4]
    e2ae:	683a      	ldr	r2, [r7, #0]
    e2b0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    e2b2:	22a4      	movs	r2, #164	; 0xa4
    e2b4:	4990      	ldr	r1, [pc, #576]	; (e4f8 <_tc_timer_init+0x260>)
    e2b6:	2001      	movs	r0, #1
    e2b8:	4b90      	ldr	r3, [pc, #576]	; (e4fc <_tc_timer_init+0x264>)
    e2ba:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    e2bc:	2101      	movs	r1, #1
    e2be:	6838      	ldr	r0, [r7, #0]
    e2c0:	4b8f      	ldr	r3, [pc, #572]	; (e500 <_tc_timer_init+0x268>)
    e2c2:	4798      	blx	r3
    e2c4:	4603      	mov	r3, r0
    e2c6:	f083 0301 	eor.w	r3, r3, #1
    e2ca:	b2db      	uxtb	r3, r3
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d011      	beq.n	e2f4 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    e2d0:	2102      	movs	r1, #2
    e2d2:	6838      	ldr	r0, [r7, #0]
    e2d4:	4b8b      	ldr	r3, [pc, #556]	; (e504 <_tc_timer_init+0x26c>)
    e2d6:	4798      	blx	r3
    e2d8:	4603      	mov	r3, r0
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d006      	beq.n	e2ec <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    e2de:	6838      	ldr	r0, [r7, #0]
    e2e0:	4b89      	ldr	r3, [pc, #548]	; (e508 <_tc_timer_init+0x270>)
    e2e2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    e2e4:	2102      	movs	r1, #2
    e2e6:	6838      	ldr	r0, [r7, #0]
    e2e8:	4b88      	ldr	r3, [pc, #544]	; (e50c <_tc_timer_init+0x274>)
    e2ea:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    e2ec:	2101      	movs	r1, #1
    e2ee:	6838      	ldr	r0, [r7, #0]
    e2f0:	4b87      	ldr	r3, [pc, #540]	; (e510 <_tc_timer_init+0x278>)
    e2f2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    e2f4:	2101      	movs	r1, #1
    e2f6:	6838      	ldr	r0, [r7, #0]
    e2f8:	4b84      	ldr	r3, [pc, #528]	; (e50c <_tc_timer_init+0x274>)
    e2fa:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    e2fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e300:	4984      	ldr	r1, [pc, #528]	; (e514 <_tc_timer_init+0x27c>)
    e302:	4613      	mov	r3, r2
    e304:	009b      	lsls	r3, r3, #2
    e306:	4413      	add	r3, r2
    e308:	009b      	lsls	r3, r3, #2
    e30a:	440b      	add	r3, r1
    e30c:	3304      	adds	r3, #4
    e30e:	681b      	ldr	r3, [r3, #0]
    e310:	4619      	mov	r1, r3
    e312:	6838      	ldr	r0, [r7, #0]
    e314:	4b7e      	ldr	r3, [pc, #504]	; (e510 <_tc_timer_init+0x278>)
    e316:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    e318:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e31c:	497d      	ldr	r1, [pc, #500]	; (e514 <_tc_timer_init+0x27c>)
    e31e:	4613      	mov	r3, r2
    e320:	009b      	lsls	r3, r3, #2
    e322:	4413      	add	r3, r2
    e324:	009b      	lsls	r3, r3, #2
    e326:	440b      	add	r3, r1
    e328:	330a      	adds	r3, #10
    e32a:	781b      	ldrb	r3, [r3, #0]
    e32c:	4619      	mov	r1, r3
    e32e:	6838      	ldr	r0, [r7, #0]
    e330:	4b79      	ldr	r3, [pc, #484]	; (e518 <_tc_timer_init+0x280>)
    e332:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    e334:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e338:	4976      	ldr	r1, [pc, #472]	; (e514 <_tc_timer_init+0x27c>)
    e33a:	4613      	mov	r3, r2
    e33c:	009b      	lsls	r3, r3, #2
    e33e:	4413      	add	r3, r2
    e340:	009b      	lsls	r3, r3, #2
    e342:	440b      	add	r3, r1
    e344:	3308      	adds	r3, #8
    e346:	881b      	ldrh	r3, [r3, #0]
    e348:	4619      	mov	r1, r3
    e34a:	6838      	ldr	r0, [r7, #0]
    e34c:	4b73      	ldr	r3, [pc, #460]	; (e51c <_tc_timer_init+0x284>)
    e34e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    e350:	2101      	movs	r1, #1
    e352:	6838      	ldr	r0, [r7, #0]
    e354:	4b72      	ldr	r3, [pc, #456]	; (e520 <_tc_timer_init+0x288>)
    e356:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    e358:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e35c:	496d      	ldr	r1, [pc, #436]	; (e514 <_tc_timer_init+0x27c>)
    e35e:	4613      	mov	r3, r2
    e360:	009b      	lsls	r3, r3, #2
    e362:	4413      	add	r3, r2
    e364:	009b      	lsls	r3, r3, #2
    e366:	440b      	add	r3, r1
    e368:	3304      	adds	r3, #4
    e36a:	681b      	ldr	r3, [r3, #0]
    e36c:	f003 030c 	and.w	r3, r3, #12
    e370:	2b08      	cmp	r3, #8
    e372:	d11e      	bne.n	e3b2 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    e374:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e378:	4966      	ldr	r1, [pc, #408]	; (e514 <_tc_timer_init+0x27c>)
    e37a:	4613      	mov	r3, r2
    e37c:	009b      	lsls	r3, r3, #2
    e37e:	4413      	add	r3, r2
    e380:	009b      	lsls	r3, r3, #2
    e382:	440b      	add	r3, r1
    e384:	330c      	adds	r3, #12
    e386:	681b      	ldr	r3, [r3, #0]
    e388:	461a      	mov	r2, r3
    e38a:	2100      	movs	r1, #0
    e38c:	6838      	ldr	r0, [r7, #0]
    e38e:	4b65      	ldr	r3, [pc, #404]	; (e524 <_tc_timer_init+0x28c>)
    e390:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    e392:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e396:	495f      	ldr	r1, [pc, #380]	; (e514 <_tc_timer_init+0x27c>)
    e398:	4613      	mov	r3, r2
    e39a:	009b      	lsls	r3, r3, #2
    e39c:	4413      	add	r3, r2
    e39e:	009b      	lsls	r3, r3, #2
    e3a0:	440b      	add	r3, r1
    e3a2:	3310      	adds	r3, #16
    e3a4:	681b      	ldr	r3, [r3, #0]
    e3a6:	461a      	mov	r2, r3
    e3a8:	2101      	movs	r1, #1
    e3aa:	6838      	ldr	r0, [r7, #0]
    e3ac:	4b5d      	ldr	r3, [pc, #372]	; (e524 <_tc_timer_init+0x28c>)
    e3ae:	4798      	blx	r3
    e3b0:	e06a      	b.n	e488 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    e3b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e3b6:	4957      	ldr	r1, [pc, #348]	; (e514 <_tc_timer_init+0x27c>)
    e3b8:	4613      	mov	r3, r2
    e3ba:	009b      	lsls	r3, r3, #2
    e3bc:	4413      	add	r3, r2
    e3be:	009b      	lsls	r3, r3, #2
    e3c0:	440b      	add	r3, r1
    e3c2:	3304      	adds	r3, #4
    e3c4:	681b      	ldr	r3, [r3, #0]
    e3c6:	f003 030c 	and.w	r3, r3, #12
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d120      	bne.n	e410 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    e3ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e3d2:	4950      	ldr	r1, [pc, #320]	; (e514 <_tc_timer_init+0x27c>)
    e3d4:	4613      	mov	r3, r2
    e3d6:	009b      	lsls	r3, r3, #2
    e3d8:	4413      	add	r3, r2
    e3da:	009b      	lsls	r3, r3, #2
    e3dc:	440b      	add	r3, r1
    e3de:	330c      	adds	r3, #12
    e3e0:	681b      	ldr	r3, [r3, #0]
    e3e2:	b29b      	uxth	r3, r3
    e3e4:	461a      	mov	r2, r3
    e3e6:	2100      	movs	r1, #0
    e3e8:	6838      	ldr	r0, [r7, #0]
    e3ea:	4b4f      	ldr	r3, [pc, #316]	; (e528 <_tc_timer_init+0x290>)
    e3ec:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    e3ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e3f2:	4948      	ldr	r1, [pc, #288]	; (e514 <_tc_timer_init+0x27c>)
    e3f4:	4613      	mov	r3, r2
    e3f6:	009b      	lsls	r3, r3, #2
    e3f8:	4413      	add	r3, r2
    e3fa:	009b      	lsls	r3, r3, #2
    e3fc:	440b      	add	r3, r1
    e3fe:	3310      	adds	r3, #16
    e400:	681b      	ldr	r3, [r3, #0]
    e402:	b29b      	uxth	r3, r3
    e404:	461a      	mov	r2, r3
    e406:	2101      	movs	r1, #1
    e408:	6838      	ldr	r0, [r7, #0]
    e40a:	4b47      	ldr	r3, [pc, #284]	; (e528 <_tc_timer_init+0x290>)
    e40c:	4798      	blx	r3
    e40e:	e03b      	b.n	e488 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    e410:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e414:	493f      	ldr	r1, [pc, #252]	; (e514 <_tc_timer_init+0x27c>)
    e416:	4613      	mov	r3, r2
    e418:	009b      	lsls	r3, r3, #2
    e41a:	4413      	add	r3, r2
    e41c:	009b      	lsls	r3, r3, #2
    e41e:	440b      	add	r3, r1
    e420:	3304      	adds	r3, #4
    e422:	681b      	ldr	r3, [r3, #0]
    e424:	f003 030c 	and.w	r3, r3, #12
    e428:	2b04      	cmp	r3, #4
    e42a:	d12d      	bne.n	e488 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    e42c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e430:	4938      	ldr	r1, [pc, #224]	; (e514 <_tc_timer_init+0x27c>)
    e432:	4613      	mov	r3, r2
    e434:	009b      	lsls	r3, r3, #2
    e436:	4413      	add	r3, r2
    e438:	009b      	lsls	r3, r3, #2
    e43a:	440b      	add	r3, r1
    e43c:	330c      	adds	r3, #12
    e43e:	681b      	ldr	r3, [r3, #0]
    e440:	b2db      	uxtb	r3, r3
    e442:	461a      	mov	r2, r3
    e444:	2100      	movs	r1, #0
    e446:	6838      	ldr	r0, [r7, #0]
    e448:	4b38      	ldr	r3, [pc, #224]	; (e52c <_tc_timer_init+0x294>)
    e44a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    e44c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e450:	4930      	ldr	r1, [pc, #192]	; (e514 <_tc_timer_init+0x27c>)
    e452:	4613      	mov	r3, r2
    e454:	009b      	lsls	r3, r3, #2
    e456:	4413      	add	r3, r2
    e458:	009b      	lsls	r3, r3, #2
    e45a:	440b      	add	r3, r1
    e45c:	3310      	adds	r3, #16
    e45e:	681b      	ldr	r3, [r3, #0]
    e460:	b2db      	uxtb	r3, r3
    e462:	461a      	mov	r2, r3
    e464:	2101      	movs	r1, #1
    e466:	6838      	ldr	r0, [r7, #0]
    e468:	4b30      	ldr	r3, [pc, #192]	; (e52c <_tc_timer_init+0x294>)
    e46a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    e46c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e470:	4928      	ldr	r1, [pc, #160]	; (e514 <_tc_timer_init+0x27c>)
    e472:	4613      	mov	r3, r2
    e474:	009b      	lsls	r3, r3, #2
    e476:	4413      	add	r3, r2
    e478:	009b      	lsls	r3, r3, #2
    e47a:	440b      	add	r3, r1
    e47c:	330b      	adds	r3, #11
    e47e:	781b      	ldrb	r3, [r3, #0]
    e480:	4619      	mov	r1, r3
    e482:	6838      	ldr	r0, [r7, #0]
    e484:	4b2a      	ldr	r3, [pc, #168]	; (e530 <_tc_timer_init+0x298>)
    e486:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    e488:	6838      	ldr	r0, [r7, #0]
    e48a:	4b2a      	ldr	r3, [pc, #168]	; (e534 <_tc_timer_init+0x29c>)
    e48c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    e48e:	6879      	ldr	r1, [r7, #4]
    e490:	6838      	ldr	r0, [r7, #0]
    e492:	4b29      	ldr	r3, [pc, #164]	; (e538 <_tc_timer_init+0x2a0>)
    e494:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    e496:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e49a:	491e      	ldr	r1, [pc, #120]	; (e514 <_tc_timer_init+0x27c>)
    e49c:	4613      	mov	r3, r2
    e49e:	009b      	lsls	r3, r3, #2
    e4a0:	4413      	add	r3, r2
    e4a2:	009b      	lsls	r3, r3, #2
    e4a4:	440b      	add	r3, r1
    e4a6:	3302      	adds	r3, #2
    e4a8:	f9b3 3000 	ldrsh.w	r3, [r3]
    e4ac:	4618      	mov	r0, r3
    e4ae:	4b23      	ldr	r3, [pc, #140]	; (e53c <_tc_timer_init+0x2a4>)
    e4b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    e4b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e4b6:	4917      	ldr	r1, [pc, #92]	; (e514 <_tc_timer_init+0x27c>)
    e4b8:	4613      	mov	r3, r2
    e4ba:	009b      	lsls	r3, r3, #2
    e4bc:	4413      	add	r3, r2
    e4be:	009b      	lsls	r3, r3, #2
    e4c0:	440b      	add	r3, r1
    e4c2:	3302      	adds	r3, #2
    e4c4:	f9b3 3000 	ldrsh.w	r3, [r3]
    e4c8:	4618      	mov	r0, r3
    e4ca:	4b1d      	ldr	r3, [pc, #116]	; (e540 <_tc_timer_init+0x2a8>)
    e4cc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    e4ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e4d2:	4910      	ldr	r1, [pc, #64]	; (e514 <_tc_timer_init+0x27c>)
    e4d4:	4613      	mov	r3, r2
    e4d6:	009b      	lsls	r3, r3, #2
    e4d8:	4413      	add	r3, r2
    e4da:	009b      	lsls	r3, r3, #2
    e4dc:	440b      	add	r3, r1
    e4de:	3302      	adds	r3, #2
    e4e0:	f9b3 3000 	ldrsh.w	r3, [r3]
    e4e4:	4618      	mov	r0, r3
    e4e6:	4b17      	ldr	r3, [pc, #92]	; (e544 <_tc_timer_init+0x2ac>)
    e4e8:	4798      	blx	r3

	return ERR_NONE;
    e4ea:	2300      	movs	r3, #0
}
    e4ec:	4618      	mov	r0, r3
    e4ee:	3710      	adds	r7, #16
    e4f0:	46bd      	mov	sp, r7
    e4f2:	bd80      	pop	{r7, pc}
    e4f4:	0000eae9 	.word	0x0000eae9
    e4f8:	00015298 	.word	0x00015298
    e4fc:	000099f1 	.word	0x000099f1
    e500:	0000df0d 	.word	0x0000df0d
    e504:	0000e0ad 	.word	0x0000e0ad
    e508:	0000e05d 	.word	0x0000e05d
    e50c:	0000dee9 	.word	0x0000dee9
    e510:	0000e0dd 	.word	0x0000e0dd
    e514:	20000508 	.word	0x20000508
    e518:	0000e13d 	.word	0x0000e13d
    e51c:	0000e101 	.word	0x0000e101
    e520:	0000e11f 	.word	0x0000e11f
    e524:	0000e23d 	.word	0x0000e23d
    e528:	0000e1d9 	.word	0x0000e1d9
    e52c:	0000e1a9 	.word	0x0000e1a9
    e530:	0000e15d 	.word	0x0000e15d
    e534:	0000df91 	.word	0x0000df91
    e538:	0000eb51 	.word	0x0000eb51
    e53c:	0000de69 	.word	0x0000de69
    e540:	0000dead 	.word	0x0000dead
    e544:	0000de2d 	.word	0x0000de2d

0000e548 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    e548:	b580      	push	{r7, lr}
    e54a:	b084      	sub	sp, #16
    e54c:	af00      	add	r7, sp, #0
    e54e:	6078      	str	r0, [r7, #4]
    e550:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    e552:	6838      	ldr	r0, [r7, #0]
    e554:	4b73      	ldr	r3, [pc, #460]	; (e724 <_pwm_init+0x1dc>)
    e556:	4798      	blx	r3
    e558:	4603      	mov	r3, r0
    e55a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	683a      	ldr	r2, [r7, #0]
    e560:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    e562:	2101      	movs	r1, #1
    e564:	6838      	ldr	r0, [r7, #0]
    e566:	4b70      	ldr	r3, [pc, #448]	; (e728 <_pwm_init+0x1e0>)
    e568:	4798      	blx	r3
    e56a:	4603      	mov	r3, r0
    e56c:	f083 0301 	eor.w	r3, r3, #1
    e570:	b2db      	uxtb	r3, r3
    e572:	2b00      	cmp	r3, #0
    e574:	d011      	beq.n	e59a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    e576:	2102      	movs	r1, #2
    e578:	6838      	ldr	r0, [r7, #0]
    e57a:	4b6c      	ldr	r3, [pc, #432]	; (e72c <_pwm_init+0x1e4>)
    e57c:	4798      	blx	r3
    e57e:	4603      	mov	r3, r0
    e580:	2b00      	cmp	r3, #0
    e582:	d006      	beq.n	e592 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    e584:	6838      	ldr	r0, [r7, #0]
    e586:	4b6a      	ldr	r3, [pc, #424]	; (e730 <_pwm_init+0x1e8>)
    e588:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    e58a:	2102      	movs	r1, #2
    e58c:	6838      	ldr	r0, [r7, #0]
    e58e:	4b69      	ldr	r3, [pc, #420]	; (e734 <_pwm_init+0x1ec>)
    e590:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    e592:	2101      	movs	r1, #1
    e594:	6838      	ldr	r0, [r7, #0]
    e596:	4b68      	ldr	r3, [pc, #416]	; (e738 <_pwm_init+0x1f0>)
    e598:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    e59a:	2101      	movs	r1, #1
    e59c:	6838      	ldr	r0, [r7, #0]
    e59e:	4b65      	ldr	r3, [pc, #404]	; (e734 <_pwm_init+0x1ec>)
    e5a0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    e5a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e5a6:	4965      	ldr	r1, [pc, #404]	; (e73c <_pwm_init+0x1f4>)
    e5a8:	4613      	mov	r3, r2
    e5aa:	009b      	lsls	r3, r3, #2
    e5ac:	4413      	add	r3, r2
    e5ae:	009b      	lsls	r3, r3, #2
    e5b0:	440b      	add	r3, r1
    e5b2:	3304      	adds	r3, #4
    e5b4:	681b      	ldr	r3, [r3, #0]
    e5b6:	4619      	mov	r1, r3
    e5b8:	6838      	ldr	r0, [r7, #0]
    e5ba:	4b5f      	ldr	r3, [pc, #380]	; (e738 <_pwm_init+0x1f0>)
    e5bc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    e5be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e5c2:	495e      	ldr	r1, [pc, #376]	; (e73c <_pwm_init+0x1f4>)
    e5c4:	4613      	mov	r3, r2
    e5c6:	009b      	lsls	r3, r3, #2
    e5c8:	4413      	add	r3, r2
    e5ca:	009b      	lsls	r3, r3, #2
    e5cc:	440b      	add	r3, r1
    e5ce:	330a      	adds	r3, #10
    e5d0:	781b      	ldrb	r3, [r3, #0]
    e5d2:	4619      	mov	r1, r3
    e5d4:	6838      	ldr	r0, [r7, #0]
    e5d6:	4b5a      	ldr	r3, [pc, #360]	; (e740 <_pwm_init+0x1f8>)
    e5d8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    e5da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e5de:	4957      	ldr	r1, [pc, #348]	; (e73c <_pwm_init+0x1f4>)
    e5e0:	4613      	mov	r3, r2
    e5e2:	009b      	lsls	r3, r3, #2
    e5e4:	4413      	add	r3, r2
    e5e6:	009b      	lsls	r3, r3, #2
    e5e8:	440b      	add	r3, r1
    e5ea:	3308      	adds	r3, #8
    e5ec:	881b      	ldrh	r3, [r3, #0]
    e5ee:	4619      	mov	r1, r3
    e5f0:	6838      	ldr	r0, [r7, #0]
    e5f2:	4b54      	ldr	r3, [pc, #336]	; (e744 <_pwm_init+0x1fc>)
    e5f4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    e5f6:	2103      	movs	r1, #3
    e5f8:	6838      	ldr	r0, [r7, #0]
    e5fa:	4b53      	ldr	r3, [pc, #332]	; (e748 <_pwm_init+0x200>)
    e5fc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    e5fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e602:	494e      	ldr	r1, [pc, #312]	; (e73c <_pwm_init+0x1f4>)
    e604:	4613      	mov	r3, r2
    e606:	009b      	lsls	r3, r3, #2
    e608:	4413      	add	r3, r2
    e60a:	009b      	lsls	r3, r3, #2
    e60c:	440b      	add	r3, r1
    e60e:	3304      	adds	r3, #4
    e610:	681b      	ldr	r3, [r3, #0]
    e612:	f003 030c 	and.w	r3, r3, #12
    e616:	2b08      	cmp	r3, #8
    e618:	d11e      	bne.n	e658 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    e61a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e61e:	4947      	ldr	r1, [pc, #284]	; (e73c <_pwm_init+0x1f4>)
    e620:	4613      	mov	r3, r2
    e622:	009b      	lsls	r3, r3, #2
    e624:	4413      	add	r3, r2
    e626:	009b      	lsls	r3, r3, #2
    e628:	440b      	add	r3, r1
    e62a:	330c      	adds	r3, #12
    e62c:	681b      	ldr	r3, [r3, #0]
    e62e:	461a      	mov	r2, r3
    e630:	2100      	movs	r1, #0
    e632:	6838      	ldr	r0, [r7, #0]
    e634:	4b45      	ldr	r3, [pc, #276]	; (e74c <_pwm_init+0x204>)
    e636:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    e638:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e63c:	493f      	ldr	r1, [pc, #252]	; (e73c <_pwm_init+0x1f4>)
    e63e:	4613      	mov	r3, r2
    e640:	009b      	lsls	r3, r3, #2
    e642:	4413      	add	r3, r2
    e644:	009b      	lsls	r3, r3, #2
    e646:	440b      	add	r3, r1
    e648:	3310      	adds	r3, #16
    e64a:	681b      	ldr	r3, [r3, #0]
    e64c:	461a      	mov	r2, r3
    e64e:	2101      	movs	r1, #1
    e650:	6838      	ldr	r0, [r7, #0]
    e652:	4b3e      	ldr	r3, [pc, #248]	; (e74c <_pwm_init+0x204>)
    e654:	4798      	blx	r3
    e656:	e031      	b.n	e6bc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    e658:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e65c:	4937      	ldr	r1, [pc, #220]	; (e73c <_pwm_init+0x1f4>)
    e65e:	4613      	mov	r3, r2
    e660:	009b      	lsls	r3, r3, #2
    e662:	4413      	add	r3, r2
    e664:	009b      	lsls	r3, r3, #2
    e666:	440b      	add	r3, r1
    e668:	3304      	adds	r3, #4
    e66a:	681b      	ldr	r3, [r3, #0]
    e66c:	f003 030c 	and.w	r3, r3, #12
    e670:	2b00      	cmp	r3, #0
    e672:	d120      	bne.n	e6b6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    e674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e678:	4930      	ldr	r1, [pc, #192]	; (e73c <_pwm_init+0x1f4>)
    e67a:	4613      	mov	r3, r2
    e67c:	009b      	lsls	r3, r3, #2
    e67e:	4413      	add	r3, r2
    e680:	009b      	lsls	r3, r3, #2
    e682:	440b      	add	r3, r1
    e684:	330c      	adds	r3, #12
    e686:	681b      	ldr	r3, [r3, #0]
    e688:	b29b      	uxth	r3, r3
    e68a:	461a      	mov	r2, r3
    e68c:	2100      	movs	r1, #0
    e68e:	6838      	ldr	r0, [r7, #0]
    e690:	4b2f      	ldr	r3, [pc, #188]	; (e750 <_pwm_init+0x208>)
    e692:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    e694:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e698:	4928      	ldr	r1, [pc, #160]	; (e73c <_pwm_init+0x1f4>)
    e69a:	4613      	mov	r3, r2
    e69c:	009b      	lsls	r3, r3, #2
    e69e:	4413      	add	r3, r2
    e6a0:	009b      	lsls	r3, r3, #2
    e6a2:	440b      	add	r3, r1
    e6a4:	3310      	adds	r3, #16
    e6a6:	681b      	ldr	r3, [r3, #0]
    e6a8:	b29b      	uxth	r3, r3
    e6aa:	461a      	mov	r2, r3
    e6ac:	2101      	movs	r1, #1
    e6ae:	6838      	ldr	r0, [r7, #0]
    e6b0:	4b27      	ldr	r3, [pc, #156]	; (e750 <_pwm_init+0x208>)
    e6b2:	4798      	blx	r3
    e6b4:	e002      	b.n	e6bc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    e6b6:	f04f 33ff 	mov.w	r3, #4294967295
    e6ba:	e02e      	b.n	e71a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    e6bc:	6879      	ldr	r1, [r7, #4]
    e6be:	6838      	ldr	r0, [r7, #0]
    e6c0:	4b24      	ldr	r3, [pc, #144]	; (e754 <_pwm_init+0x20c>)
    e6c2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    e6c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e6c8:	491c      	ldr	r1, [pc, #112]	; (e73c <_pwm_init+0x1f4>)
    e6ca:	4613      	mov	r3, r2
    e6cc:	009b      	lsls	r3, r3, #2
    e6ce:	4413      	add	r3, r2
    e6d0:	009b      	lsls	r3, r3, #2
    e6d2:	440b      	add	r3, r1
    e6d4:	3302      	adds	r3, #2
    e6d6:	f9b3 3000 	ldrsh.w	r3, [r3]
    e6da:	4618      	mov	r0, r3
    e6dc:	4b1e      	ldr	r3, [pc, #120]	; (e758 <_pwm_init+0x210>)
    e6de:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    e6e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e6e4:	4915      	ldr	r1, [pc, #84]	; (e73c <_pwm_init+0x1f4>)
    e6e6:	4613      	mov	r3, r2
    e6e8:	009b      	lsls	r3, r3, #2
    e6ea:	4413      	add	r3, r2
    e6ec:	009b      	lsls	r3, r3, #2
    e6ee:	440b      	add	r3, r1
    e6f0:	3302      	adds	r3, #2
    e6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
    e6f6:	4618      	mov	r0, r3
    e6f8:	4b18      	ldr	r3, [pc, #96]	; (e75c <_pwm_init+0x214>)
    e6fa:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    e6fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    e700:	490e      	ldr	r1, [pc, #56]	; (e73c <_pwm_init+0x1f4>)
    e702:	4613      	mov	r3, r2
    e704:	009b      	lsls	r3, r3, #2
    e706:	4413      	add	r3, r2
    e708:	009b      	lsls	r3, r3, #2
    e70a:	440b      	add	r3, r1
    e70c:	3302      	adds	r3, #2
    e70e:	f9b3 3000 	ldrsh.w	r3, [r3]
    e712:	4618      	mov	r0, r3
    e714:	4b12      	ldr	r3, [pc, #72]	; (e760 <_pwm_init+0x218>)
    e716:	4798      	blx	r3

	return 0;
    e718:	2300      	movs	r3, #0
}
    e71a:	4618      	mov	r0, r3
    e71c:	3710      	adds	r7, #16
    e71e:	46bd      	mov	sp, r7
    e720:	bd80      	pop	{r7, pc}
    e722:	bf00      	nop
    e724:	0000eae9 	.word	0x0000eae9
    e728:	0000df0d 	.word	0x0000df0d
    e72c:	0000e0ad 	.word	0x0000e0ad
    e730:	0000e05d 	.word	0x0000e05d
    e734:	0000dee9 	.word	0x0000dee9
    e738:	0000e0dd 	.word	0x0000e0dd
    e73c:	20000508 	.word	0x20000508
    e740:	0000e13d 	.word	0x0000e13d
    e744:	0000e101 	.word	0x0000e101
    e748:	0000e11f 	.word	0x0000e11f
    e74c:	0000e23d 	.word	0x0000e23d
    e750:	0000e1d9 	.word	0x0000e1d9
    e754:	0000eb51 	.word	0x0000eb51
    e758:	0000de69 	.word	0x0000de69
    e75c:	0000dead 	.word	0x0000dead
    e760:	0000de2d 	.word	0x0000de2d

0000e764 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    e764:	b580      	push	{r7, lr}
    e766:	b084      	sub	sp, #16
    e768:	af00      	add	r7, sp, #0
    e76a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    e76c:	687b      	ldr	r3, [r7, #4]
    e76e:	68db      	ldr	r3, [r3, #12]
    e770:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    e772:	68f8      	ldr	r0, [r7, #12]
    e774:	4b10      	ldr	r3, [pc, #64]	; (e7b8 <_tc_timer_deinit+0x54>)
    e776:	4798      	blx	r3
    e778:	4603      	mov	r3, r0
    e77a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    e77c:	22f9      	movs	r2, #249	; 0xf9
    e77e:	490f      	ldr	r1, [pc, #60]	; (e7bc <_tc_timer_deinit+0x58>)
    e780:	2001      	movs	r0, #1
    e782:	4b0f      	ldr	r3, [pc, #60]	; (e7c0 <_tc_timer_deinit+0x5c>)
    e784:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    e786:	f997 200b 	ldrsb.w	r2, [r7, #11]
    e78a:	490e      	ldr	r1, [pc, #56]	; (e7c4 <_tc_timer_deinit+0x60>)
    e78c:	4613      	mov	r3, r2
    e78e:	009b      	lsls	r3, r3, #2
    e790:	4413      	add	r3, r2
    e792:	009b      	lsls	r3, r3, #2
    e794:	440b      	add	r3, r1
    e796:	3302      	adds	r3, #2
    e798:	f9b3 3000 	ldrsh.w	r3, [r3]
    e79c:	4618      	mov	r0, r3
    e79e:	4b0a      	ldr	r3, [pc, #40]	; (e7c8 <_tc_timer_deinit+0x64>)
    e7a0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    e7a2:	68f8      	ldr	r0, [r7, #12]
    e7a4:	4b09      	ldr	r3, [pc, #36]	; (e7cc <_tc_timer_deinit+0x68>)
    e7a6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    e7a8:	68f8      	ldr	r0, [r7, #12]
    e7aa:	4b09      	ldr	r3, [pc, #36]	; (e7d0 <_tc_timer_deinit+0x6c>)
    e7ac:	4798      	blx	r3
}
    e7ae:	bf00      	nop
    e7b0:	3710      	adds	r7, #16
    e7b2:	46bd      	mov	sp, r7
    e7b4:	bd80      	pop	{r7, pc}
    e7b6:	bf00      	nop
    e7b8:	0000eae9 	.word	0x0000eae9
    e7bc:	00015298 	.word	0x00015298
    e7c0:	000099f1 	.word	0x000099f1
    e7c4:	20000508 	.word	0x20000508
    e7c8:	0000de69 	.word	0x0000de69
    e7cc:	0000e05d 	.word	0x0000e05d
    e7d0:	0000dfd5 	.word	0x0000dfd5

0000e7d4 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    e7d4:	b580      	push	{r7, lr}
    e7d6:	b082      	sub	sp, #8
    e7d8:	af00      	add	r7, sp, #0
    e7da:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    e7dc:	687b      	ldr	r3, [r7, #4]
    e7de:	68db      	ldr	r3, [r3, #12]
    e7e0:	4618      	mov	r0, r3
    e7e2:	4b03      	ldr	r3, [pc, #12]	; (e7f0 <_tc_timer_start+0x1c>)
    e7e4:	4798      	blx	r3
}
    e7e6:	bf00      	nop
    e7e8:	3708      	adds	r7, #8
    e7ea:	46bd      	mov	sp, r7
    e7ec:	bd80      	pop	{r7, pc}
    e7ee:	bf00      	nop
    e7f0:	0000dffd 	.word	0x0000dffd

0000e7f4 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    e7f4:	b580      	push	{r7, lr}
    e7f6:	b082      	sub	sp, #8
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	68db      	ldr	r3, [r3, #12]
    e800:	4618      	mov	r0, r3
    e802:	4b03      	ldr	r3, [pc, #12]	; (e810 <_tc_timer_stop+0x1c>)
    e804:	4798      	blx	r3
}
    e806:	bf00      	nop
    e808:	3708      	adds	r7, #8
    e80a:	46bd      	mov	sp, r7
    e80c:	bd80      	pop	{r7, pc}
    e80e:	bf00      	nop
    e810:	0000e05d 	.word	0x0000e05d

0000e814 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    e814:	b580      	push	{r7, lr}
    e816:	b084      	sub	sp, #16
    e818:	af00      	add	r7, sp, #0
    e81a:	6078      	str	r0, [r7, #4]
    e81c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    e81e:	687b      	ldr	r3, [r7, #4]
    e820:	68db      	ldr	r3, [r3, #12]
    e822:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e824:	68f8      	ldr	r0, [r7, #12]
    e826:	4b14      	ldr	r3, [pc, #80]	; (e878 <_tc_timer_set_period+0x64>)
    e828:	4798      	blx	r3
    e82a:	4603      	mov	r3, r0
    e82c:	2b02      	cmp	r3, #2
    e82e:	d105      	bne.n	e83c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    e830:	683a      	ldr	r2, [r7, #0]
    e832:	2100      	movs	r1, #0
    e834:	68f8      	ldr	r0, [r7, #12]
    e836:	4b11      	ldr	r3, [pc, #68]	; (e87c <_tc_timer_set_period+0x68>)
    e838:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    e83a:	e019      	b.n	e870 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e83c:	68f8      	ldr	r0, [r7, #12]
    e83e:	4b0e      	ldr	r3, [pc, #56]	; (e878 <_tc_timer_set_period+0x64>)
    e840:	4798      	blx	r3
    e842:	4603      	mov	r3, r0
    e844:	2b00      	cmp	r3, #0
    e846:	d107      	bne.n	e858 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    e848:	683b      	ldr	r3, [r7, #0]
    e84a:	b29b      	uxth	r3, r3
    e84c:	461a      	mov	r2, r3
    e84e:	2100      	movs	r1, #0
    e850:	68f8      	ldr	r0, [r7, #12]
    e852:	4b0b      	ldr	r3, [pc, #44]	; (e880 <_tc_timer_set_period+0x6c>)
    e854:	4798      	blx	r3
}
    e856:	e00b      	b.n	e870 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e858:	68f8      	ldr	r0, [r7, #12]
    e85a:	4b07      	ldr	r3, [pc, #28]	; (e878 <_tc_timer_set_period+0x64>)
    e85c:	4798      	blx	r3
    e85e:	4603      	mov	r3, r0
    e860:	2b01      	cmp	r3, #1
    e862:	d105      	bne.n	e870 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    e864:	683b      	ldr	r3, [r7, #0]
    e866:	b2db      	uxtb	r3, r3
    e868:	4619      	mov	r1, r3
    e86a:	68f8      	ldr	r0, [r7, #12]
    e86c:	4b05      	ldr	r3, [pc, #20]	; (e884 <_tc_timer_set_period+0x70>)
    e86e:	4798      	blx	r3
}
    e870:	bf00      	nop
    e872:	3710      	adds	r7, #16
    e874:	46bd      	mov	sp, r7
    e876:	bd80      	pop	{r7, pc}
    e878:	0000e085 	.word	0x0000e085
    e87c:	0000e23d 	.word	0x0000e23d
    e880:	0000e1d9 	.word	0x0000e1d9
    e884:	0000e15d 	.word	0x0000e15d

0000e888 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    e888:	b580      	push	{r7, lr}
    e88a:	b084      	sub	sp, #16
    e88c:	af00      	add	r7, sp, #0
    e88e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    e890:	687b      	ldr	r3, [r7, #4]
    e892:	68db      	ldr	r3, [r3, #12]
    e894:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e896:	68f8      	ldr	r0, [r7, #12]
    e898:	4b13      	ldr	r3, [pc, #76]	; (e8e8 <_tc_timer_get_period+0x60>)
    e89a:	4798      	blx	r3
    e89c:	4603      	mov	r3, r0
    e89e:	2b02      	cmp	r3, #2
    e8a0:	d105      	bne.n	e8ae <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    e8a2:	2100      	movs	r1, #0
    e8a4:	68f8      	ldr	r0, [r7, #12]
    e8a6:	4b11      	ldr	r3, [pc, #68]	; (e8ec <_tc_timer_get_period+0x64>)
    e8a8:	4798      	blx	r3
    e8aa:	4603      	mov	r3, r0
    e8ac:	e017      	b.n	e8de <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e8ae:	68f8      	ldr	r0, [r7, #12]
    e8b0:	4b0d      	ldr	r3, [pc, #52]	; (e8e8 <_tc_timer_get_period+0x60>)
    e8b2:	4798      	blx	r3
    e8b4:	4603      	mov	r3, r0
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	d105      	bne.n	e8c6 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    e8ba:	2100      	movs	r1, #0
    e8bc:	68f8      	ldr	r0, [r7, #12]
    e8be:	4b0c      	ldr	r3, [pc, #48]	; (e8f0 <_tc_timer_get_period+0x68>)
    e8c0:	4798      	blx	r3
    e8c2:	4603      	mov	r3, r0
    e8c4:	e00b      	b.n	e8de <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    e8c6:	68f8      	ldr	r0, [r7, #12]
    e8c8:	4b07      	ldr	r3, [pc, #28]	; (e8e8 <_tc_timer_get_period+0x60>)
    e8ca:	4798      	blx	r3
    e8cc:	4603      	mov	r3, r0
    e8ce:	2b01      	cmp	r3, #1
    e8d0:	d104      	bne.n	e8dc <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    e8d2:	68f8      	ldr	r0, [r7, #12]
    e8d4:	4b07      	ldr	r3, [pc, #28]	; (e8f4 <_tc_timer_get_period+0x6c>)
    e8d6:	4798      	blx	r3
    e8d8:	4603      	mov	r3, r0
    e8da:	e000      	b.n	e8de <_tc_timer_get_period+0x56>
	}

	return 0;
    e8dc:	2300      	movs	r3, #0
}
    e8de:	4618      	mov	r0, r3
    e8e0:	3710      	adds	r7, #16
    e8e2:	46bd      	mov	sp, r7
    e8e4:	bd80      	pop	{r7, pc}
    e8e6:	bf00      	nop
    e8e8:	0000e085 	.word	0x0000e085
    e8ec:	0000e26d 	.word	0x0000e26d
    e8f0:	0000e20d 	.word	0x0000e20d
    e8f4:	0000e185 	.word	0x0000e185

0000e8f8 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    e8f8:	b580      	push	{r7, lr}
    e8fa:	b082      	sub	sp, #8
    e8fc:	af00      	add	r7, sp, #0
    e8fe:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    e900:	687b      	ldr	r3, [r7, #4]
    e902:	68db      	ldr	r3, [r3, #12]
    e904:	4618      	mov	r0, r3
    e906:	4b03      	ldr	r3, [pc, #12]	; (e914 <_tc_timer_is_started+0x1c>)
    e908:	4798      	blx	r3
    e90a:	4603      	mov	r3, r0
}
    e90c:	4618      	mov	r0, r3
    e90e:	3708      	adds	r7, #8
    e910:	46bd      	mov	sp, r7
    e912:	bd80      	pop	{r7, pc}
    e914:	0000e025 	.word	0x0000e025

0000e918 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    e918:	b480      	push	{r7}
    e91a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    e91c:	4b02      	ldr	r3, [pc, #8]	; (e928 <_tc_get_timer+0x10>)
}
    e91e:	4618      	mov	r0, r3
    e920:	46bd      	mov	sp, r7
    e922:	f85d 7b04 	ldr.w	r7, [sp], #4
    e926:	4770      	bx	lr
    e928:	20000580 	.word	0x20000580

0000e92c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    e92c:	b480      	push	{r7}
    e92e:	af00      	add	r7, sp, #0
	return NULL;
    e930:	2300      	movs	r3, #0
}
    e932:	4618      	mov	r0, r3
    e934:	46bd      	mov	sp, r7
    e936:	f85d 7b04 	ldr.w	r7, [sp], #4
    e93a:	4770      	bx	lr

0000e93c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    e93c:	b580      	push	{r7, lr}
    e93e:	b084      	sub	sp, #16
    e940:	af00      	add	r7, sp, #0
    e942:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    e944:	687b      	ldr	r3, [r7, #4]
    e946:	68db      	ldr	r3, [r3, #12]
    e948:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    e94a:	68f8      	ldr	r0, [r7, #12]
    e94c:	4b0e      	ldr	r3, [pc, #56]	; (e988 <_tc_timer_set_irq+0x4c>)
    e94e:	4798      	blx	r3
    e950:	4603      	mov	r3, r0
    e952:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    e954:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    e958:	490c      	ldr	r1, [pc, #48]	; (e98c <_tc_timer_set_irq+0x50>)
    e95a:	2001      	movs	r0, #1
    e95c:	4b0c      	ldr	r3, [pc, #48]	; (e990 <_tc_timer_set_irq+0x54>)
    e95e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    e960:	f997 200b 	ldrsb.w	r2, [r7, #11]
    e964:	490b      	ldr	r1, [pc, #44]	; (e994 <_tc_timer_set_irq+0x58>)
    e966:	4613      	mov	r3, r2
    e968:	009b      	lsls	r3, r3, #2
    e96a:	4413      	add	r3, r2
    e96c:	009b      	lsls	r3, r3, #2
    e96e:	440b      	add	r3, r1
    e970:	3302      	adds	r3, #2
    e972:	f9b3 3000 	ldrsh.w	r3, [r3]
    e976:	b2db      	uxtb	r3, r3
    e978:	4618      	mov	r0, r3
    e97a:	4b07      	ldr	r3, [pc, #28]	; (e998 <_tc_timer_set_irq+0x5c>)
    e97c:	4798      	blx	r3
}
    e97e:	bf00      	nop
    e980:	3710      	adds	r7, #16
    e982:	46bd      	mov	sp, r7
    e984:	bd80      	pop	{r7, pc}
    e986:	bf00      	nop
    e988:	0000eae9 	.word	0x0000eae9
    e98c:	00015298 	.word	0x00015298
    e990:	000099f1 	.word	0x000099f1
    e994:	20000508 	.word	0x20000508
    e998:	0000a889 	.word	0x0000a889

0000e99c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    e99c:	b580      	push	{r7, lr}
    e99e:	b084      	sub	sp, #16
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	68db      	ldr	r3, [r3, #12]
    e9a8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    e9aa:	68f8      	ldr	r0, [r7, #12]
    e9ac:	4b07      	ldr	r3, [pc, #28]	; (e9cc <tc_interrupt_handler+0x30>)
    e9ae:	4798      	blx	r3
    e9b0:	4603      	mov	r3, r0
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d006      	beq.n	e9c4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    e9b6:	68f8      	ldr	r0, [r7, #12]
    e9b8:	4b05      	ldr	r3, [pc, #20]	; (e9d0 <tc_interrupt_handler+0x34>)
    e9ba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    e9bc:	687b      	ldr	r3, [r7, #4]
    e9be:	681b      	ldr	r3, [r3, #0]
    e9c0:	6878      	ldr	r0, [r7, #4]
    e9c2:	4798      	blx	r3
	}
}
    e9c4:	bf00      	nop
    e9c6:	3710      	adds	r7, #16
    e9c8:	46bd      	mov	sp, r7
    e9ca:	bd80      	pop	{r7, pc}
    e9cc:	0000df35 	.word	0x0000df35
    e9d0:	0000df5d 	.word	0x0000df5d

0000e9d4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    e9d4:	b580      	push	{r7, lr}
    e9d6:	b084      	sub	sp, #16
    e9d8:	af00      	add	r7, sp, #0
    e9da:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    e9dc:	687b      	ldr	r3, [r7, #4]
    e9de:	691b      	ldr	r3, [r3, #16]
    e9e0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    e9e2:	68f8      	ldr	r0, [r7, #12]
    e9e4:	4b12      	ldr	r3, [pc, #72]	; (ea30 <tc_pwm_interrupt_handler+0x5c>)
    e9e6:	4798      	blx	r3
    e9e8:	4603      	mov	r3, r0
    e9ea:	2b00      	cmp	r3, #0
    e9ec:	d00a      	beq.n	ea04 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    e9ee:	68f8      	ldr	r0, [r7, #12]
    e9f0:	4b10      	ldr	r3, [pc, #64]	; (ea34 <tc_pwm_interrupt_handler+0x60>)
    e9f2:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	681b      	ldr	r3, [r3, #0]
    e9f8:	2b00      	cmp	r3, #0
    e9fa:	d003      	beq.n	ea04 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    e9fc:	687b      	ldr	r3, [r7, #4]
    e9fe:	681b      	ldr	r3, [r3, #0]
    ea00:	6878      	ldr	r0, [r7, #4]
    ea02:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    ea04:	68f8      	ldr	r0, [r7, #12]
    ea06:	4b0c      	ldr	r3, [pc, #48]	; (ea38 <tc_pwm_interrupt_handler+0x64>)
    ea08:	4798      	blx	r3
    ea0a:	4603      	mov	r3, r0
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	d00a      	beq.n	ea26 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    ea10:	68f8      	ldr	r0, [r7, #12]
    ea12:	4b0a      	ldr	r3, [pc, #40]	; (ea3c <tc_pwm_interrupt_handler+0x68>)
    ea14:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    ea16:	687b      	ldr	r3, [r7, #4]
    ea18:	685b      	ldr	r3, [r3, #4]
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d003      	beq.n	ea26 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    ea1e:	687b      	ldr	r3, [r7, #4]
    ea20:	685b      	ldr	r3, [r3, #4]
    ea22:	6878      	ldr	r0, [r7, #4]
    ea24:	4798      	blx	r3
		}
	}
}
    ea26:	bf00      	nop
    ea28:	3710      	adds	r7, #16
    ea2a:	46bd      	mov	sp, r7
    ea2c:	bd80      	pop	{r7, pc}
    ea2e:	bf00      	nop
    ea30:	0000df35 	.word	0x0000df35
    ea34:	0000df5d 	.word	0x0000df5d
    ea38:	0000dfab 	.word	0x0000dfab
    ea3c:	0000df77 	.word	0x0000df77

0000ea40 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    ea40:	b580      	push	{r7, lr}
    ea42:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    ea44:	4b03      	ldr	r3, [pc, #12]	; (ea54 <TC0_Handler+0x14>)
    ea46:	681b      	ldr	r3, [r3, #0]
    ea48:	4618      	mov	r0, r3
    ea4a:	4b03      	ldr	r3, [pc, #12]	; (ea58 <TC0_Handler+0x18>)
    ea4c:	4798      	blx	r3
}
    ea4e:	bf00      	nop
    ea50:	bd80      	pop	{r7, pc}
    ea52:	bf00      	nop
    ea54:	20001b0c 	.word	0x20001b0c
    ea58:	0000e99d 	.word	0x0000e99d

0000ea5c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    ea5c:	b580      	push	{r7, lr}
    ea5e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    ea60:	4b03      	ldr	r3, [pc, #12]	; (ea70 <TC2_Handler+0x14>)
    ea62:	681b      	ldr	r3, [r3, #0]
    ea64:	4618      	mov	r0, r3
    ea66:	4b03      	ldr	r3, [pc, #12]	; (ea74 <TC2_Handler+0x18>)
    ea68:	4798      	blx	r3
}
    ea6a:	bf00      	nop
    ea6c:	bd80      	pop	{r7, pc}
    ea6e:	bf00      	nop
    ea70:	20001b10 	.word	0x20001b10
    ea74:	0000e99d 	.word	0x0000e99d

0000ea78 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    ea78:	b580      	push	{r7, lr}
    ea7a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    ea7c:	4b03      	ldr	r3, [pc, #12]	; (ea8c <TC4_Handler+0x14>)
    ea7e:	681b      	ldr	r3, [r3, #0]
    ea80:	4618      	mov	r0, r3
    ea82:	4b03      	ldr	r3, [pc, #12]	; (ea90 <TC4_Handler+0x18>)
    ea84:	4798      	blx	r3
}
    ea86:	bf00      	nop
    ea88:	bd80      	pop	{r7, pc}
    ea8a:	bf00      	nop
    ea8c:	20001b14 	.word	0x20001b14
    ea90:	0000e99d 	.word	0x0000e99d

0000ea94 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    ea94:	b580      	push	{r7, lr}
    ea96:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    ea98:	4b03      	ldr	r3, [pc, #12]	; (eaa8 <TC5_Handler+0x14>)
    ea9a:	681b      	ldr	r3, [r3, #0]
    ea9c:	4618      	mov	r0, r3
    ea9e:	4b03      	ldr	r3, [pc, #12]	; (eaac <TC5_Handler+0x18>)
    eaa0:	4798      	blx	r3
}
    eaa2:	bf00      	nop
    eaa4:	bd80      	pop	{r7, pc}
    eaa6:	bf00      	nop
    eaa8:	20001b18 	.word	0x20001b18
    eaac:	0000e99d 	.word	0x0000e99d

0000eab0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    eab0:	b580      	push	{r7, lr}
    eab2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    eab4:	4b03      	ldr	r3, [pc, #12]	; (eac4 <TC6_Handler+0x14>)
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	4618      	mov	r0, r3
    eaba:	4b03      	ldr	r3, [pc, #12]	; (eac8 <TC6_Handler+0x18>)
    eabc:	4798      	blx	r3
}
    eabe:	bf00      	nop
    eac0:	bd80      	pop	{r7, pc}
    eac2:	bf00      	nop
    eac4:	20001b1c 	.word	0x20001b1c
    eac8:	0000e99d 	.word	0x0000e99d

0000eacc <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    eacc:	b580      	push	{r7, lr}
    eace:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    ead0:	4b03      	ldr	r3, [pc, #12]	; (eae0 <TC7_Handler+0x14>)
    ead2:	681b      	ldr	r3, [r3, #0]
    ead4:	4618      	mov	r0, r3
    ead6:	4b03      	ldr	r3, [pc, #12]	; (eae4 <TC7_Handler+0x18>)
    ead8:	4798      	blx	r3
}
    eada:	bf00      	nop
    eadc:	bd80      	pop	{r7, pc}
    eade:	bf00      	nop
    eae0:	20001b20 	.word	0x20001b20
    eae4:	0000e9d5 	.word	0x0000e9d5

0000eae8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    eae8:	b580      	push	{r7, lr}
    eaea:	b084      	sub	sp, #16
    eaec:	af00      	add	r7, sp, #0
    eaee:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    eaf0:	6878      	ldr	r0, [r7, #4]
    eaf2:	4b13      	ldr	r3, [pc, #76]	; (eb40 <get_tc_index+0x58>)
    eaf4:	4798      	blx	r3
    eaf6:	4603      	mov	r3, r0
    eaf8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    eafa:	2300      	movs	r3, #0
    eafc:	73fb      	strb	r3, [r7, #15]
    eafe:	e010      	b.n	eb22 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    eb00:	7bfa      	ldrb	r2, [r7, #15]
    eb02:	4910      	ldr	r1, [pc, #64]	; (eb44 <get_tc_index+0x5c>)
    eb04:	4613      	mov	r3, r2
    eb06:	009b      	lsls	r3, r3, #2
    eb08:	4413      	add	r3, r2
    eb0a:	009b      	lsls	r3, r3, #2
    eb0c:	440b      	add	r3, r1
    eb0e:	781b      	ldrb	r3, [r3, #0]
    eb10:	7bba      	ldrb	r2, [r7, #14]
    eb12:	429a      	cmp	r2, r3
    eb14:	d102      	bne.n	eb1c <get_tc_index+0x34>
			return i;
    eb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    eb1a:	e00d      	b.n	eb38 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    eb1c:	7bfb      	ldrb	r3, [r7, #15]
    eb1e:	3301      	adds	r3, #1
    eb20:	73fb      	strb	r3, [r7, #15]
    eb22:	7bfb      	ldrb	r3, [r7, #15]
    eb24:	2b05      	cmp	r3, #5
    eb26:	d9eb      	bls.n	eb00 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    eb28:	f240 221d 	movw	r2, #541	; 0x21d
    eb2c:	4906      	ldr	r1, [pc, #24]	; (eb48 <get_tc_index+0x60>)
    eb2e:	2000      	movs	r0, #0
    eb30:	4b06      	ldr	r3, [pc, #24]	; (eb4c <get_tc_index+0x64>)
    eb32:	4798      	blx	r3
	return -1;
    eb34:	f04f 33ff 	mov.w	r3, #4294967295
}
    eb38:	4618      	mov	r0, r3
    eb3a:	3710      	adds	r7, #16
    eb3c:	46bd      	mov	sp, r7
    eb3e:	bd80      	pop	{r7, pc}
    eb40:	0000ebed 	.word	0x0000ebed
    eb44:	20000508 	.word	0x20000508
    eb48:	00015298 	.word	0x00015298
    eb4c:	000099f1 	.word	0x000099f1

0000eb50 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    eb50:	b480      	push	{r7}
    eb52:	b083      	sub	sp, #12
    eb54:	af00      	add	r7, sp, #0
    eb56:	6078      	str	r0, [r7, #4]
    eb58:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	4a17      	ldr	r2, [pc, #92]	; (ebbc <_tc_init_irq_param+0x6c>)
    eb5e:	4293      	cmp	r3, r2
    eb60:	d102      	bne.n	eb68 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    eb62:	4a17      	ldr	r2, [pc, #92]	; (ebc0 <_tc_init_irq_param+0x70>)
    eb64:	683b      	ldr	r3, [r7, #0]
    eb66:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	4a16      	ldr	r2, [pc, #88]	; (ebc4 <_tc_init_irq_param+0x74>)
    eb6c:	4293      	cmp	r3, r2
    eb6e:	d102      	bne.n	eb76 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    eb70:	4a15      	ldr	r2, [pc, #84]	; (ebc8 <_tc_init_irq_param+0x78>)
    eb72:	683b      	ldr	r3, [r7, #0]
    eb74:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    eb76:	687b      	ldr	r3, [r7, #4]
    eb78:	4a14      	ldr	r2, [pc, #80]	; (ebcc <_tc_init_irq_param+0x7c>)
    eb7a:	4293      	cmp	r3, r2
    eb7c:	d102      	bne.n	eb84 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    eb7e:	4a14      	ldr	r2, [pc, #80]	; (ebd0 <_tc_init_irq_param+0x80>)
    eb80:	683b      	ldr	r3, [r7, #0]
    eb82:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    eb84:	687b      	ldr	r3, [r7, #4]
    eb86:	4a13      	ldr	r2, [pc, #76]	; (ebd4 <_tc_init_irq_param+0x84>)
    eb88:	4293      	cmp	r3, r2
    eb8a:	d102      	bne.n	eb92 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    eb8c:	4a12      	ldr	r2, [pc, #72]	; (ebd8 <_tc_init_irq_param+0x88>)
    eb8e:	683b      	ldr	r3, [r7, #0]
    eb90:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    eb92:	687b      	ldr	r3, [r7, #4]
    eb94:	4a11      	ldr	r2, [pc, #68]	; (ebdc <_tc_init_irq_param+0x8c>)
    eb96:	4293      	cmp	r3, r2
    eb98:	d102      	bne.n	eba0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    eb9a:	4a11      	ldr	r2, [pc, #68]	; (ebe0 <_tc_init_irq_param+0x90>)
    eb9c:	683b      	ldr	r3, [r7, #0]
    eb9e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    eba0:	687b      	ldr	r3, [r7, #4]
    eba2:	4a10      	ldr	r2, [pc, #64]	; (ebe4 <_tc_init_irq_param+0x94>)
    eba4:	4293      	cmp	r3, r2
    eba6:	d102      	bne.n	ebae <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    eba8:	4a0f      	ldr	r2, [pc, #60]	; (ebe8 <_tc_init_irq_param+0x98>)
    ebaa:	683b      	ldr	r3, [r7, #0]
    ebac:	6013      	str	r3, [r2, #0]
	}
}
    ebae:	bf00      	nop
    ebb0:	370c      	adds	r7, #12
    ebb2:	46bd      	mov	sp, r7
    ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebb8:	4770      	bx	lr
    ebba:	bf00      	nop
    ebbc:	40003800 	.word	0x40003800
    ebc0:	20001b0c 	.word	0x20001b0c
    ebc4:	4101a000 	.word	0x4101a000
    ebc8:	20001b10 	.word	0x20001b10
    ebcc:	42001400 	.word	0x42001400
    ebd0:	20001b14 	.word	0x20001b14
    ebd4:	42001800 	.word	0x42001800
    ebd8:	20001b18 	.word	0x20001b18
    ebdc:	43001400 	.word	0x43001400
    ebe0:	20001b1c 	.word	0x20001b1c
    ebe4:	43001800 	.word	0x43001800
    ebe8:	20001b20 	.word	0x20001b20

0000ebec <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    ebec:	b4b0      	push	{r4, r5, r7}
    ebee:	b08d      	sub	sp, #52	; 0x34
    ebf0:	af00      	add	r7, sp, #0
    ebf2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    ebf4:	4b13      	ldr	r3, [pc, #76]	; (ec44 <_get_hardware_offset+0x58>)
    ebf6:	f107 040c 	add.w	r4, r7, #12
    ebfa:	461d      	mov	r5, r3
    ebfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ebfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ec00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ec04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ec08:	2300      	movs	r3, #0
    ec0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec0c:	e010      	b.n	ec30 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec10:	009b      	lsls	r3, r3, #2
    ec12:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ec16:	4413      	add	r3, r2
    ec18:	f853 3c24 	ldr.w	r3, [r3, #-36]
    ec1c:	461a      	mov	r2, r3
    ec1e:	687b      	ldr	r3, [r7, #4]
    ec20:	429a      	cmp	r2, r3
    ec22:	d102      	bne.n	ec2a <_get_hardware_offset+0x3e>
			return i;
    ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec26:	b2db      	uxtb	r3, r3
    ec28:	e006      	b.n	ec38 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec2c:	3301      	adds	r3, #1
    ec2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec32:	2b07      	cmp	r3, #7
    ec34:	d9eb      	bls.n	ec0e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    ec36:	2300      	movs	r3, #0
}
    ec38:	4618      	mov	r0, r3
    ec3a:	3734      	adds	r7, #52	; 0x34
    ec3c:	46bd      	mov	sp, r7
    ec3e:	bcb0      	pop	{r4, r5, r7}
    ec40:	4770      	bx	lr
    ec42:	bf00      	nop
    ec44:	000152ac 	.word	0x000152ac

0000ec48 <__NVIC_EnableIRQ>:
{
    ec48:	b480      	push	{r7}
    ec4a:	b083      	sub	sp, #12
    ec4c:	af00      	add	r7, sp, #0
    ec4e:	4603      	mov	r3, r0
    ec50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ec52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ec56:	2b00      	cmp	r3, #0
    ec58:	db0b      	blt.n	ec72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec5a:	4909      	ldr	r1, [pc, #36]	; (ec80 <__NVIC_EnableIRQ+0x38>)
    ec5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ec60:	095b      	lsrs	r3, r3, #5
    ec62:	88fa      	ldrh	r2, [r7, #6]
    ec64:	f002 021f 	and.w	r2, r2, #31
    ec68:	2001      	movs	r0, #1
    ec6a:	fa00 f202 	lsl.w	r2, r0, r2
    ec6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec72:	bf00      	nop
    ec74:	370c      	adds	r7, #12
    ec76:	46bd      	mov	sp, r7
    ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec7c:	4770      	bx	lr
    ec7e:	bf00      	nop
    ec80:	e000e100 	.word	0xe000e100

0000ec84 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    ec84:	b480      	push	{r7}
    ec86:	b087      	sub	sp, #28
    ec88:	af00      	add	r7, sp, #0
    ec8a:	60f8      	str	r0, [r7, #12]
    ec8c:	460b      	mov	r3, r1
    ec8e:	607a      	str	r2, [r7, #4]
    ec90:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    ec92:	7afa      	ldrb	r2, [r7, #11]
    ec94:	68f9      	ldr	r1, [r7, #12]
    ec96:	4613      	mov	r3, r2
    ec98:	009b      	lsls	r3, r3, #2
    ec9a:	4413      	add	r3, r2
    ec9c:	009b      	lsls	r3, r3, #2
    ec9e:	440b      	add	r3, r1
    eca0:	3340      	adds	r3, #64	; 0x40
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    eca6:	697a      	ldr	r2, [r7, #20]
    eca8:	687b      	ldr	r3, [r7, #4]
    ecaa:	4013      	ands	r3, r2
    ecac:	617b      	str	r3, [r7, #20]
	return tmp;
    ecae:	697b      	ldr	r3, [r7, #20]
}
    ecb0:	4618      	mov	r0, r3
    ecb2:	371c      	adds	r7, #28
    ecb4:	46bd      	mov	sp, r7
    ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecba:	4770      	bx	lr

0000ecbc <hri_oscctrl_get_STATUS_reg>:
{
    ecbc:	b480      	push	{r7}
    ecbe:	b085      	sub	sp, #20
    ecc0:	af00      	add	r7, sp, #0
    ecc2:	6078      	str	r0, [r7, #4]
    ecc4:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    ecc6:	687b      	ldr	r3, [r7, #4]
    ecc8:	691b      	ldr	r3, [r3, #16]
    ecca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    eccc:	68fa      	ldr	r2, [r7, #12]
    ecce:	683b      	ldr	r3, [r7, #0]
    ecd0:	4013      	ands	r3, r2
    ecd2:	60fb      	str	r3, [r7, #12]
	return tmp;
    ecd4:	68fb      	ldr	r3, [r7, #12]
}
    ecd6:	4618      	mov	r0, r3
    ecd8:	3714      	adds	r7, #20
    ecda:	46bd      	mov	sp, r7
    ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ece0:	4770      	bx	lr

0000ece2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    ece2:	b480      	push	{r7}
    ece4:	b085      	sub	sp, #20
    ece6:	af00      	add	r7, sp, #0
    ece8:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    ecea:	687b      	ldr	r3, [r7, #4]
    ecec:	f893 3020 	ldrb.w	r3, [r3, #32]
    ecf0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    ecf2:	7bfb      	ldrb	r3, [r7, #15]
    ecf4:	f003 0301 	and.w	r3, r3, #1
    ecf8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ecfa:	7bfb      	ldrb	r3, [r7, #15]
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	bf14      	ite	ne
    ed00:	2301      	movne	r3, #1
    ed02:	2300      	moveq	r3, #0
    ed04:	b2db      	uxtb	r3, r3
}
    ed06:	4618      	mov	r0, r3
    ed08:	3714      	adds	r7, #20
    ed0a:	46bd      	mov	sp, r7
    ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed10:	4770      	bx	lr

0000ed12 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ed12:	b480      	push	{r7}
    ed14:	b083      	sub	sp, #12
    ed16:	af00      	add	r7, sp, #0
    ed18:	6078      	str	r0, [r7, #4]
    ed1a:	460b      	mov	r3, r1
    ed1c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ed1e:	bf00      	nop
    ed20:	687b      	ldr	r3, [r7, #4]
    ed22:	789b      	ldrb	r3, [r3, #2]
    ed24:	b2da      	uxtb	r2, r3
    ed26:	78fb      	ldrb	r3, [r7, #3]
    ed28:	4013      	ands	r3, r2
    ed2a:	b2db      	uxtb	r3, r3
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d1f7      	bne.n	ed20 <hri_usb_wait_for_sync+0xe>
	};
}
    ed30:	bf00      	nop
    ed32:	370c      	adds	r7, #12
    ed34:	46bd      	mov	sp, r7
    ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed3a:	4770      	bx	lr

0000ed3c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ed3c:	b480      	push	{r7}
    ed3e:	b083      	sub	sp, #12
    ed40:	af00      	add	r7, sp, #0
    ed42:	6078      	str	r0, [r7, #4]
    ed44:	460b      	mov	r3, r1
    ed46:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    ed48:	687b      	ldr	r3, [r7, #4]
    ed4a:	789b      	ldrb	r3, [r3, #2]
    ed4c:	b2da      	uxtb	r2, r3
    ed4e:	78fb      	ldrb	r3, [r7, #3]
    ed50:	4013      	ands	r3, r2
    ed52:	b2db      	uxtb	r3, r3
    ed54:	2b00      	cmp	r3, #0
    ed56:	bf14      	ite	ne
    ed58:	2301      	movne	r3, #1
    ed5a:	2300      	moveq	r3, #0
    ed5c:	b2db      	uxtb	r3, r3
}
    ed5e:	4618      	mov	r0, r3
    ed60:	370c      	adds	r7, #12
    ed62:	46bd      	mov	sp, r7
    ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed68:	4770      	bx	lr

0000ed6a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    ed6a:	b480      	push	{r7}
    ed6c:	b085      	sub	sp, #20
    ed6e:	af00      	add	r7, sp, #0
    ed70:	6078      	str	r0, [r7, #4]
    ed72:	460b      	mov	r3, r1
    ed74:	70fb      	strb	r3, [r7, #3]
    ed76:	4613      	mov	r3, r2
    ed78:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    ed7a:	78fb      	ldrb	r3, [r7, #3]
    ed7c:	687a      	ldr	r2, [r7, #4]
    ed7e:	3308      	adds	r3, #8
    ed80:	015b      	lsls	r3, r3, #5
    ed82:	4413      	add	r3, r2
    ed84:	3307      	adds	r3, #7
    ed86:	781b      	ldrb	r3, [r3, #0]
    ed88:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ed8a:	7bfa      	ldrb	r2, [r7, #15]
    ed8c:	78bb      	ldrb	r3, [r7, #2]
    ed8e:	4013      	ands	r3, r2
    ed90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ed92:	7bfb      	ldrb	r3, [r7, #15]
}
    ed94:	4618      	mov	r0, r3
    ed96:	3714      	adds	r7, #20
    ed98:	46bd      	mov	sp, r7
    ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed9e:	4770      	bx	lr

0000eda0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    eda0:	b480      	push	{r7}
    eda2:	b083      	sub	sp, #12
    eda4:	af00      	add	r7, sp, #0
    eda6:	6078      	str	r0, [r7, #4]
    eda8:	460b      	mov	r3, r1
    edaa:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    edac:	78fb      	ldrb	r3, [r7, #3]
    edae:	687a      	ldr	r2, [r7, #4]
    edb0:	3308      	adds	r3, #8
    edb2:	015b      	lsls	r3, r3, #5
    edb4:	4413      	add	r3, r2
    edb6:	3307      	adds	r3, #7
    edb8:	781b      	ldrb	r3, [r3, #0]
    edba:	b2db      	uxtb	r3, r3
}
    edbc:	4618      	mov	r0, r3
    edbe:	370c      	adds	r7, #12
    edc0:	46bd      	mov	sp, r7
    edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    edc6:	4770      	bx	lr

0000edc8 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    edc8:	b480      	push	{r7}
    edca:	b083      	sub	sp, #12
    edcc:	af00      	add	r7, sp, #0
    edce:	6078      	str	r0, [r7, #4]
    edd0:	460b      	mov	r3, r1
    edd2:	70fb      	strb	r3, [r7, #3]
    edd4:	4613      	mov	r3, r2
    edd6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    edd8:	78fb      	ldrb	r3, [r7, #3]
    edda:	687a      	ldr	r2, [r7, #4]
    eddc:	3308      	adds	r3, #8
    edde:	015b      	lsls	r3, r3, #5
    ede0:	4413      	add	r3, r2
    ede2:	3307      	adds	r3, #7
    ede4:	78ba      	ldrb	r2, [r7, #2]
    ede6:	701a      	strb	r2, [r3, #0]
}
    ede8:	bf00      	nop
    edea:	370c      	adds	r7, #12
    edec:	46bd      	mov	sp, r7
    edee:	f85d 7b04 	ldr.w	r7, [sp], #4
    edf2:	4770      	bx	lr

0000edf4 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    edf4:	b480      	push	{r7}
    edf6:	b083      	sub	sp, #12
    edf8:	af00      	add	r7, sp, #0
    edfa:	6078      	str	r0, [r7, #4]
    edfc:	460b      	mov	r3, r1
    edfe:	70fb      	strb	r3, [r7, #3]
    ee00:	4613      	mov	r3, r2
    ee02:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ee04:	78fb      	ldrb	r3, [r7, #3]
    ee06:	687a      	ldr	r2, [r7, #4]
    ee08:	3308      	adds	r3, #8
    ee0a:	015b      	lsls	r3, r3, #5
    ee0c:	4413      	add	r3, r2
    ee0e:	3305      	adds	r3, #5
    ee10:	78ba      	ldrb	r2, [r7, #2]
    ee12:	701a      	strb	r2, [r3, #0]
}
    ee14:	bf00      	nop
    ee16:	370c      	adds	r7, #12
    ee18:	46bd      	mov	sp, r7
    ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee1e:	4770      	bx	lr

0000ee20 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    ee20:	b480      	push	{r7}
    ee22:	b083      	sub	sp, #12
    ee24:	af00      	add	r7, sp, #0
    ee26:	6078      	str	r0, [r7, #4]
    ee28:	460b      	mov	r3, r1
    ee2a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ee2c:	78fb      	ldrb	r3, [r7, #3]
    ee2e:	687a      	ldr	r2, [r7, #4]
    ee30:	3308      	adds	r3, #8
    ee32:	015b      	lsls	r3, r3, #5
    ee34:	4413      	add	r3, r2
    ee36:	3306      	adds	r3, #6
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	b2db      	uxtb	r3, r3
}
    ee3c:	4618      	mov	r0, r3
    ee3e:	370c      	adds	r7, #12
    ee40:	46bd      	mov	sp, r7
    ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee46:	4770      	bx	lr

0000ee48 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    ee48:	b480      	push	{r7}
    ee4a:	b083      	sub	sp, #12
    ee4c:	af00      	add	r7, sp, #0
    ee4e:	6078      	str	r0, [r7, #4]
    ee50:	460b      	mov	r3, r1
    ee52:	70fb      	strb	r3, [r7, #3]
    ee54:	4613      	mov	r3, r2
    ee56:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ee58:	78fb      	ldrb	r3, [r7, #3]
    ee5a:	687a      	ldr	r2, [r7, #4]
    ee5c:	3308      	adds	r3, #8
    ee5e:	015b      	lsls	r3, r3, #5
    ee60:	4413      	add	r3, r2
    ee62:	3304      	adds	r3, #4
    ee64:	78ba      	ldrb	r2, [r7, #2]
    ee66:	701a      	strb	r2, [r3, #0]
}
    ee68:	bf00      	nop
    ee6a:	370c      	adds	r7, #12
    ee6c:	46bd      	mov	sp, r7
    ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee72:	4770      	bx	lr

0000ee74 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    ee74:	b480      	push	{r7}
    ee76:	b083      	sub	sp, #12
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
    ee7c:	460b      	mov	r3, r1
    ee7e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    ee80:	78fb      	ldrb	r3, [r7, #3]
    ee82:	687a      	ldr	r2, [r7, #4]
    ee84:	015b      	lsls	r3, r3, #5
    ee86:	4413      	add	r3, r2
    ee88:	f503 7384 	add.w	r3, r3, #264	; 0x108
    ee8c:	2210      	movs	r2, #16
    ee8e:	701a      	strb	r2, [r3, #0]
}
    ee90:	bf00      	nop
    ee92:	370c      	adds	r7, #12
    ee94:	46bd      	mov	sp, r7
    ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee9a:	4770      	bx	lr

0000ee9c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    ee9c:	b480      	push	{r7}
    ee9e:	b083      	sub	sp, #12
    eea0:	af00      	add	r7, sp, #0
    eea2:	6078      	str	r0, [r7, #4]
    eea4:	460b      	mov	r3, r1
    eea6:	70fb      	strb	r3, [r7, #3]
    eea8:	4613      	mov	r3, r2
    eeaa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    eeac:	78fb      	ldrb	r3, [r7, #3]
    eeae:	687a      	ldr	r2, [r7, #4]
    eeb0:	015b      	lsls	r3, r3, #5
    eeb2:	4413      	add	r3, r2
    eeb4:	f203 1309 	addw	r3, r3, #265	; 0x109
    eeb8:	78ba      	ldrb	r2, [r7, #2]
    eeba:	701a      	strb	r2, [r3, #0]
}
    eebc:	bf00      	nop
    eebe:	370c      	adds	r7, #12
    eec0:	46bd      	mov	sp, r7
    eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    eec6:	4770      	bx	lr

0000eec8 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    eec8:	b480      	push	{r7}
    eeca:	b083      	sub	sp, #12
    eecc:	af00      	add	r7, sp, #0
    eece:	6078      	str	r0, [r7, #4]
    eed0:	460b      	mov	r3, r1
    eed2:	70fb      	strb	r3, [r7, #3]
    eed4:	4613      	mov	r3, r2
    eed6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    eed8:	78fb      	ldrb	r3, [r7, #3]
    eeda:	687a      	ldr	r2, [r7, #4]
    eedc:	015b      	lsls	r3, r3, #5
    eede:	4413      	add	r3, r2
    eee0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    eee4:	78ba      	ldrb	r2, [r7, #2]
    eee6:	701a      	strb	r2, [r3, #0]
}
    eee8:	bf00      	nop
    eeea:	370c      	adds	r7, #12
    eeec:	46bd      	mov	sp, r7
    eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
    eef2:	4770      	bx	lr

0000eef4 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    eef4:	b480      	push	{r7}
    eef6:	b085      	sub	sp, #20
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
    eefc:	460b      	mov	r3, r1
    eefe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ef00:	78fb      	ldrb	r3, [r7, #3]
    ef02:	687a      	ldr	r2, [r7, #4]
    ef04:	3308      	adds	r3, #8
    ef06:	015b      	lsls	r3, r3, #5
    ef08:	4413      	add	r3, r2
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    ef0e:	7bfb      	ldrb	r3, [r7, #15]
    ef10:	f003 0307 	and.w	r3, r3, #7
    ef14:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ef16:	7bfb      	ldrb	r3, [r7, #15]
}
    ef18:	4618      	mov	r0, r3
    ef1a:	3714      	adds	r7, #20
    ef1c:	46bd      	mov	sp, r7
    ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef22:	4770      	bx	lr

0000ef24 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ef24:	b480      	push	{r7}
    ef26:	b085      	sub	sp, #20
    ef28:	af00      	add	r7, sp, #0
    ef2a:	6078      	str	r0, [r7, #4]
    ef2c:	460b      	mov	r3, r1
    ef2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ef30:	78fb      	ldrb	r3, [r7, #3]
    ef32:	687a      	ldr	r2, [r7, #4]
    ef34:	3308      	adds	r3, #8
    ef36:	015b      	lsls	r3, r3, #5
    ef38:	4413      	add	r3, r2
    ef3a:	781b      	ldrb	r3, [r3, #0]
    ef3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ef3e:	7bfb      	ldrb	r3, [r7, #15]
    ef40:	091b      	lsrs	r3, r3, #4
    ef42:	b2db      	uxtb	r3, r3
    ef44:	f003 0307 	and.w	r3, r3, #7
    ef48:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ef4a:	7bfb      	ldrb	r3, [r7, #15]
}
    ef4c:	4618      	mov	r0, r3
    ef4e:	3714      	adds	r7, #20
    ef50:	46bd      	mov	sp, r7
    ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef56:	4770      	bx	lr

0000ef58 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ef58:	b480      	push	{r7}
    ef5a:	b083      	sub	sp, #12
    ef5c:	af00      	add	r7, sp, #0
    ef5e:	6078      	str	r0, [r7, #4]
    ef60:	460b      	mov	r3, r1
    ef62:	70fb      	strb	r3, [r7, #3]
    ef64:	4613      	mov	r3, r2
    ef66:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ef68:	78fb      	ldrb	r3, [r7, #3]
    ef6a:	687a      	ldr	r2, [r7, #4]
    ef6c:	3308      	adds	r3, #8
    ef6e:	015b      	lsls	r3, r3, #5
    ef70:	4413      	add	r3, r2
    ef72:	78ba      	ldrb	r2, [r7, #2]
    ef74:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    ef76:	bf00      	nop
    ef78:	370c      	adds	r7, #12
    ef7a:	46bd      	mov	sp, r7
    ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef80:	4770      	bx	lr

0000ef82 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    ef82:	b480      	push	{r7}
    ef84:	b083      	sub	sp, #12
    ef86:	af00      	add	r7, sp, #0
    ef88:	6078      	str	r0, [r7, #4]
    ef8a:	460b      	mov	r3, r1
    ef8c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ef8e:	78fb      	ldrb	r3, [r7, #3]
    ef90:	687a      	ldr	r2, [r7, #4]
    ef92:	3308      	adds	r3, #8
    ef94:	015b      	lsls	r3, r3, #5
    ef96:	4413      	add	r3, r2
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	b2db      	uxtb	r3, r3
}
    ef9c:	4618      	mov	r0, r3
    ef9e:	370c      	adds	r7, #12
    efa0:	46bd      	mov	sp, r7
    efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    efa6:	4770      	bx	lr

0000efa8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    efa8:	b480      	push	{r7}
    efaa:	b083      	sub	sp, #12
    efac:	af00      	add	r7, sp, #0
    efae:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    efb0:	687b      	ldr	r3, [r7, #4]
    efb2:	8b9b      	ldrh	r3, [r3, #28]
    efb4:	b29b      	uxth	r3, r3
}
    efb6:	4618      	mov	r0, r3
    efb8:	370c      	adds	r7, #12
    efba:	46bd      	mov	sp, r7
    efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    efc0:	4770      	bx	lr

0000efc2 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    efc2:	b480      	push	{r7}
    efc4:	b083      	sub	sp, #12
    efc6:	af00      	add	r7, sp, #0
    efc8:	6078      	str	r0, [r7, #4]
    efca:	460b      	mov	r3, r1
    efcc:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    efce:	687b      	ldr	r3, [r7, #4]
    efd0:	887a      	ldrh	r2, [r7, #2]
    efd2:	839a      	strh	r2, [r3, #28]
}
    efd4:	bf00      	nop
    efd6:	370c      	adds	r7, #12
    efd8:	46bd      	mov	sp, r7
    efda:	f85d 7b04 	ldr.w	r7, [sp], #4
    efde:	4770      	bx	lr

0000efe0 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    efe0:	b480      	push	{r7}
    efe2:	b083      	sub	sp, #12
    efe4:	af00      	add	r7, sp, #0
    efe6:	6078      	str	r0, [r7, #4]
    efe8:	460b      	mov	r3, r1
    efea:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	887a      	ldrh	r2, [r7, #2]
    eff0:	831a      	strh	r2, [r3, #24]
}
    eff2:	bf00      	nop
    eff4:	370c      	adds	r7, #12
    eff6:	46bd      	mov	sp, r7
    eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    effc:	4770      	bx	lr

0000effe <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    effe:	b480      	push	{r7}
    f000:	b083      	sub	sp, #12
    f002:	af00      	add	r7, sp, #0
    f004:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    f006:	687b      	ldr	r3, [r7, #4]
    f008:	8b1b      	ldrh	r3, [r3, #24]
    f00a:	b29b      	uxth	r3, r3
}
    f00c:	4618      	mov	r0, r3
    f00e:	370c      	adds	r7, #12
    f010:	46bd      	mov	sp, r7
    f012:	f85d 7b04 	ldr.w	r7, [sp], #4
    f016:	4770      	bx	lr

0000f018 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    f018:	b480      	push	{r7}
    f01a:	b083      	sub	sp, #12
    f01c:	af00      	add	r7, sp, #0
    f01e:	6078      	str	r0, [r7, #4]
    f020:	460b      	mov	r3, r1
    f022:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    f024:	687b      	ldr	r3, [r7, #4]
    f026:	887a      	ldrh	r2, [r7, #2]
    f028:	829a      	strh	r2, [r3, #20]
}
    f02a:	bf00      	nop
    f02c:	370c      	adds	r7, #12
    f02e:	46bd      	mov	sp, r7
    f030:	f85d 7b04 	ldr.w	r7, [sp], #4
    f034:	4770      	bx	lr

0000f036 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    f036:	b480      	push	{r7}
    f038:	b085      	sub	sp, #20
    f03a:	af00      	add	r7, sp, #0
    f03c:	6078      	str	r0, [r7, #4]
    f03e:	460b      	mov	r3, r1
    f040:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    f042:	687b      	ldr	r3, [r7, #4]
    f044:	789b      	ldrb	r3, [r3, #2]
    f046:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    f048:	7bfa      	ldrb	r2, [r7, #15]
    f04a:	78fb      	ldrb	r3, [r7, #3]
    f04c:	4013      	ands	r3, r2
    f04e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    f050:	7bfb      	ldrb	r3, [r7, #15]
}
    f052:	4618      	mov	r0, r3
    f054:	3714      	adds	r7, #20
    f056:	46bd      	mov	sp, r7
    f058:	f85d 7b04 	ldr.w	r7, [sp], #4
    f05c:	4770      	bx	lr
	...

0000f060 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    f060:	b580      	push	{r7, lr}
    f062:	b082      	sub	sp, #8
    f064:	af00      	add	r7, sp, #0
    f066:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    f068:	687b      	ldr	r3, [r7, #4]
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	b2db      	uxtb	r3, r3
    f06e:	f023 0302 	bic.w	r3, r3, #2
    f072:	b2da      	uxtb	r2, r3
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    f078:	2103      	movs	r1, #3
    f07a:	6878      	ldr	r0, [r7, #4]
    f07c:	4b02      	ldr	r3, [pc, #8]	; (f088 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    f07e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    f080:	bf00      	nop
    f082:	3708      	adds	r7, #8
    f084:	46bd      	mov	sp, r7
    f086:	bd80      	pop	{r7, pc}
    f088:	0000ed13 	.word	0x0000ed13

0000f08c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    f08c:	b580      	push	{r7, lr}
    f08e:	b084      	sub	sp, #16
    f090:	af00      	add	r7, sp, #0
    f092:	6078      	str	r0, [r7, #4]
    f094:	460b      	mov	r3, r1
    f096:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    f098:	2103      	movs	r1, #3
    f09a:	6878      	ldr	r0, [r7, #4]
    f09c:	4b06      	ldr	r3, [pc, #24]	; (f0b8 <hri_usb_get_CTRLA_reg+0x2c>)
    f09e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	781b      	ldrb	r3, [r3, #0]
    f0a4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    f0a6:	7bfa      	ldrb	r2, [r7, #15]
    f0a8:	78fb      	ldrb	r3, [r7, #3]
    f0aa:	4013      	ands	r3, r2
    f0ac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    f0ae:	7bfb      	ldrb	r3, [r7, #15]
}
    f0b0:	4618      	mov	r0, r3
    f0b2:	3710      	adds	r7, #16
    f0b4:	46bd      	mov	sp, r7
    f0b6:	bd80      	pop	{r7, pc}
    f0b8:	0000ed13 	.word	0x0000ed13

0000f0bc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    f0bc:	b580      	push	{r7, lr}
    f0be:	b082      	sub	sp, #8
    f0c0:	af00      	add	r7, sp, #0
    f0c2:	6078      	str	r0, [r7, #4]
    f0c4:	460b      	mov	r3, r1
    f0c6:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	78fa      	ldrb	r2, [r7, #3]
    f0cc:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    f0ce:	2103      	movs	r1, #3
    f0d0:	6878      	ldr	r0, [r7, #4]
    f0d2:	4b03      	ldr	r3, [pc, #12]	; (f0e0 <hri_usb_write_CTRLA_reg+0x24>)
    f0d4:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    f0d6:	bf00      	nop
    f0d8:	3708      	adds	r7, #8
    f0da:	46bd      	mov	sp, r7
    f0dc:	bd80      	pop	{r7, pc}
    f0de:	bf00      	nop
    f0e0:	0000ed13 	.word	0x0000ed13

0000f0e4 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    f0e4:	b580      	push	{r7, lr}
    f0e6:	b082      	sub	sp, #8
    f0e8:	af00      	add	r7, sp, #0
    f0ea:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    f0ec:	2103      	movs	r1, #3
    f0ee:	6878      	ldr	r0, [r7, #4]
    f0f0:	4b04      	ldr	r3, [pc, #16]	; (f104 <hri_usb_read_CTRLA_reg+0x20>)
    f0f2:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    f0f4:	687b      	ldr	r3, [r7, #4]
    f0f6:	781b      	ldrb	r3, [r3, #0]
    f0f8:	b2db      	uxtb	r3, r3
}
    f0fa:	4618      	mov	r0, r3
    f0fc:	3708      	adds	r7, #8
    f0fe:	46bd      	mov	sp, r7
    f100:	bd80      	pop	{r7, pc}
    f102:	bf00      	nop
    f104:	0000ed13 	.word	0x0000ed13

0000f108 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    f108:	b480      	push	{r7}
    f10a:	b083      	sub	sp, #12
    f10c:	af00      	add	r7, sp, #0
    f10e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    f110:	687b      	ldr	r3, [r7, #4]
    f112:	891b      	ldrh	r3, [r3, #8]
    f114:	b29b      	uxth	r3, r3
    f116:	f023 0301 	bic.w	r3, r3, #1
    f11a:	b29a      	uxth	r2, r3
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    f120:	bf00      	nop
    f122:	370c      	adds	r7, #12
    f124:	46bd      	mov	sp, r7
    f126:	f85d 7b04 	ldr.w	r7, [sp], #4
    f12a:	4770      	bx	lr

0000f12c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    f12c:	b480      	push	{r7}
    f12e:	b083      	sub	sp, #12
    f130:	af00      	add	r7, sp, #0
    f132:	6078      	str	r0, [r7, #4]
    f134:	460b      	mov	r3, r1
    f136:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	887a      	ldrh	r2, [r7, #2]
    f13c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    f13e:	bf00      	nop
    f140:	370c      	adds	r7, #12
    f142:	46bd      	mov	sp, r7
    f144:	f85d 7b04 	ldr.w	r7, [sp], #4
    f148:	4770      	bx	lr

0000f14a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    f14a:	b480      	push	{r7}
    f14c:	b083      	sub	sp, #12
    f14e:	af00      	add	r7, sp, #0
    f150:	6078      	str	r0, [r7, #4]
    f152:	460b      	mov	r3, r1
    f154:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    f156:	687b      	ldr	r3, [r7, #4]
    f158:	78fa      	ldrb	r2, [r7, #3]
    f15a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    f15c:	bf00      	nop
    f15e:	370c      	adds	r7, #12
    f160:	46bd      	mov	sp, r7
    f162:	f85d 7b04 	ldr.w	r7, [sp], #4
    f166:	4770      	bx	lr

0000f168 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    f168:	b480      	push	{r7}
    f16a:	b083      	sub	sp, #12
    f16c:	af00      	add	r7, sp, #0
    f16e:	6078      	str	r0, [r7, #4]
    f170:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    f172:	687b      	ldr	r3, [r7, #4]
    f174:	683a      	ldr	r2, [r7, #0]
    f176:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    f178:	bf00      	nop
    f17a:	370c      	adds	r7, #12
    f17c:	46bd      	mov	sp, r7
    f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f182:	4770      	bx	lr

0000f184 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    f184:	b480      	push	{r7}
    f186:	b083      	sub	sp, #12
    f188:	af00      	add	r7, sp, #0
    f18a:	6078      	str	r0, [r7, #4]
    f18c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    f18e:	2300      	movs	r3, #0
}
    f190:	4618      	mov	r0, r3
    f192:	370c      	adds	r7, #12
    f194:	46bd      	mov	sp, r7
    f196:	f85d 7b04 	ldr.w	r7, [sp], #4
    f19a:	4770      	bx	lr

0000f19c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    f19c:	b480      	push	{r7}
    f19e:	b085      	sub	sp, #20
    f1a0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    f1a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f1a6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    f1a8:	4b28      	ldr	r3, [pc, #160]	; (f24c <_usb_load_calib+0xb0>)
    f1aa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    f1ac:	f003 031f 	and.w	r3, r3, #31
    f1b0:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    f1b2:	4b26      	ldr	r3, [pc, #152]	; (f24c <_usb_load_calib+0xb0>)
    f1b4:	681b      	ldr	r3, [r3, #0]
    f1b6:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    f1b8:	f003 031f 	and.w	r3, r3, #31
    f1bc:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    f1be:	4b23      	ldr	r3, [pc, #140]	; (f24c <_usb_load_calib+0xb0>)
    f1c0:	681b      	ldr	r3, [r3, #0]
    f1c2:	0a9b      	lsrs	r3, r3, #10
    f1c4:	f003 0307 	and.w	r3, r3, #7
    f1c8:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    f1ca:	68fb      	ldr	r3, [r7, #12]
    f1cc:	2b00      	cmp	r3, #0
    f1ce:	d002      	beq.n	f1d6 <_usb_load_calib+0x3a>
    f1d0:	68fb      	ldr	r3, [r7, #12]
    f1d2:	2b1f      	cmp	r3, #31
    f1d4:	d101      	bne.n	f1da <_usb_load_calib+0x3e>
		pad_transn = 9;
    f1d6:	2309      	movs	r3, #9
    f1d8:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    f1da:	68bb      	ldr	r3, [r7, #8]
    f1dc:	2b00      	cmp	r3, #0
    f1de:	d002      	beq.n	f1e6 <_usb_load_calib+0x4a>
    f1e0:	68bb      	ldr	r3, [r7, #8]
    f1e2:	2b1f      	cmp	r3, #31
    f1e4:	d101      	bne.n	f1ea <_usb_load_calib+0x4e>
		pad_transp = 25;
    f1e6:	2319      	movs	r3, #25
    f1e8:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    f1ea:	687b      	ldr	r3, [r7, #4]
    f1ec:	2b00      	cmp	r3, #0
    f1ee:	d002      	beq.n	f1f6 <_usb_load_calib+0x5a>
    f1f0:	687b      	ldr	r3, [r7, #4]
    f1f2:	2b07      	cmp	r3, #7
    f1f4:	d101      	bne.n	f1fa <_usb_load_calib+0x5e>
		pad_trim = 6;
    f1f6:	2306      	movs	r3, #6
    f1f8:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    f1fa:	68fb      	ldr	r3, [r7, #12]
    f1fc:	b29b      	uxth	r3, r3
    f1fe:	019b      	lsls	r3, r3, #6
    f200:	b29b      	uxth	r3, r3
    f202:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    f206:	b29a      	uxth	r2, r3
    f208:	68bb      	ldr	r3, [r7, #8]
    f20a:	b29b      	uxth	r3, r3
    f20c:	f003 031f 	and.w	r3, r3, #31
    f210:	b29b      	uxth	r3, r3
    f212:	4313      	orrs	r3, r2
    f214:	b29a      	uxth	r2, r3
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	b29b      	uxth	r3, r3
    f21a:	031b      	lsls	r3, r3, #12
    f21c:	b29b      	uxth	r3, r3
    f21e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    f222:	b29b      	uxth	r3, r3
    f224:	4313      	orrs	r3, r2
    f226:	b29a      	uxth	r2, r3
    f228:	683b      	ldr	r3, [r7, #0]
    f22a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    f22c:	683a      	ldr	r2, [r7, #0]
    f22e:	78d3      	ldrb	r3, [r2, #3]
    f230:	f043 0303 	orr.w	r3, r3, #3
    f234:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    f236:	683a      	ldr	r2, [r7, #0]
    f238:	78d3      	ldrb	r3, [r2, #3]
    f23a:	f043 030c 	orr.w	r3, r3, #12
    f23e:	70d3      	strb	r3, [r2, #3]
}
    f240:	bf00      	nop
    f242:	3714      	adds	r7, #20
    f244:	46bd      	mov	sp, r7
    f246:	f85d 7b04 	ldr.w	r7, [sp], #4
    f24a:	4770      	bx	lr
    f24c:	00800084 	.word	0x00800084

0000f250 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    f250:	b580      	push	{r7, lr}
    f252:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    f254:	bf00      	nop
    f256:	2203      	movs	r2, #3
    f258:	2100      	movs	r1, #0
    f25a:	4804      	ldr	r0, [pc, #16]	; (f26c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    f25c:	4b04      	ldr	r3, [pc, #16]	; (f270 <_usb_d_dev_wait_dpll_rdy+0x20>)
    f25e:	4798      	blx	r3
    f260:	4603      	mov	r3, r0
    f262:	2b03      	cmp	r3, #3
    f264:	d1f7      	bne.n	f256 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    f266:	bf00      	nop
    f268:	bd80      	pop	{r7, pc}
    f26a:	bf00      	nop
    f26c:	40001000 	.word	0x40001000
    f270:	0000ec85 	.word	0x0000ec85

0000f274 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    f274:	b580      	push	{r7, lr}
    f276:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    f278:	480e      	ldr	r0, [pc, #56]	; (f2b4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    f27a:	4b0f      	ldr	r3, [pc, #60]	; (f2b8 <_usb_d_dev_wait_dfll_rdy+0x44>)
    f27c:	4798      	blx	r3
    f27e:	4603      	mov	r3, r0
    f280:	2b00      	cmp	r3, #0
    f282:	d00a      	beq.n	f29a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    f284:	bf00      	nop
    f286:	f44f 6110 	mov.w	r1, #2304	; 0x900
    f28a:	480a      	ldr	r0, [pc, #40]	; (f2b4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    f28c:	4b0b      	ldr	r3, [pc, #44]	; (f2bc <_usb_d_dev_wait_dfll_rdy+0x48>)
    f28e:	4798      	blx	r3
    f290:	4603      	mov	r3, r0
    f292:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    f296:	d1f6      	bne.n	f286 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    f298:	e009      	b.n	f2ae <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    f29a:	bf00      	nop
    f29c:	f44f 7180 	mov.w	r1, #256	; 0x100
    f2a0:	4804      	ldr	r0, [pc, #16]	; (f2b4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    f2a2:	4b06      	ldr	r3, [pc, #24]	; (f2bc <_usb_d_dev_wait_dfll_rdy+0x48>)
    f2a4:	4798      	blx	r3
    f2a6:	4603      	mov	r3, r0
    f2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f2ac:	d1f6      	bne.n	f29c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    f2ae:	bf00      	nop
    f2b0:	bd80      	pop	{r7, pc}
    f2b2:	bf00      	nop
    f2b4:	40001000 	.word	0x40001000
    f2b8:	0000ece3 	.word	0x0000ece3
    f2bc:	0000ecbd 	.word	0x0000ecbd

0000f2c0 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    f2c0:	b580      	push	{r7, lr}
    f2c2:	b082      	sub	sp, #8
    f2c4:	af00      	add	r7, sp, #0
    f2c6:	4603      	mov	r3, r0
    f2c8:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    f2ca:	79fb      	ldrb	r3, [r7, #7]
    f2cc:	2b00      	cmp	r3, #0
    f2ce:	d102      	bne.n	f2d6 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    f2d0:	4b05      	ldr	r3, [pc, #20]	; (f2e8 <_usb_d_dev_wait_clk_rdy+0x28>)
    f2d2:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    f2d4:	e004      	b.n	f2e0 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    f2d6:	79fb      	ldrb	r3, [r7, #7]
    f2d8:	2b01      	cmp	r3, #1
    f2da:	d101      	bne.n	f2e0 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    f2dc:	4b03      	ldr	r3, [pc, #12]	; (f2ec <_usb_d_dev_wait_clk_rdy+0x2c>)
    f2de:	4798      	blx	r3
}
    f2e0:	bf00      	nop
    f2e2:	3708      	adds	r7, #8
    f2e4:	46bd      	mov	sp, r7
    f2e6:	bd80      	pop	{r7, pc}
    f2e8:	0000f275 	.word	0x0000f275
    f2ec:	0000f251 	.word	0x0000f251

0000f2f0 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    f2f0:	b580      	push	{r7, lr}
    f2f2:	b082      	sub	sp, #8
    f2f4:	af00      	add	r7, sp, #0
    f2f6:	4603      	mov	r3, r0
    f2f8:	6039      	str	r1, [r7, #0]
    f2fa:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    f2fc:	683b      	ldr	r3, [r7, #0]
    f2fe:	b2da      	uxtb	r2, r3
    f300:	79fb      	ldrb	r3, [r7, #7]
    f302:	4619      	mov	r1, r3
    f304:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f308:	4b02      	ldr	r3, [pc, #8]	; (f314 <_usbd_ep_int_ack+0x24>)
    f30a:	4798      	blx	r3
}
    f30c:	bf00      	nop
    f30e:	3708      	adds	r7, #8
    f310:	46bd      	mov	sp, r7
    f312:	bd80      	pop	{r7, pc}
    f314:	0000edc9 	.word	0x0000edc9

0000f318 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    f318:	b580      	push	{r7, lr}
    f31a:	b082      	sub	sp, #8
    f31c:	af00      	add	r7, sp, #0
    f31e:	4603      	mov	r3, r0
    f320:	6039      	str	r1, [r7, #0]
    f322:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    f324:	683b      	ldr	r3, [r7, #0]
    f326:	b2da      	uxtb	r2, r3
    f328:	79fb      	ldrb	r3, [r7, #7]
    f32a:	4619      	mov	r1, r3
    f32c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f330:	4b02      	ldr	r3, [pc, #8]	; (f33c <_usbd_ep_int_en+0x24>)
    f332:	4798      	blx	r3
}
    f334:	bf00      	nop
    f336:	3708      	adds	r7, #8
    f338:	46bd      	mov	sp, r7
    f33a:	bd80      	pop	{r7, pc}
    f33c:	0000ee9d 	.word	0x0000ee9d

0000f340 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    f340:	b580      	push	{r7, lr}
    f342:	b082      	sub	sp, #8
    f344:	af00      	add	r7, sp, #0
    f346:	4603      	mov	r3, r0
    f348:	6039      	str	r1, [r7, #0]
    f34a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    f34c:	683b      	ldr	r3, [r7, #0]
    f34e:	b2da      	uxtb	r2, r3
    f350:	79fb      	ldrb	r3, [r7, #7]
    f352:	4619      	mov	r1, r3
    f354:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f358:	4b02      	ldr	r3, [pc, #8]	; (f364 <_usbd_ep_int_dis+0x24>)
    f35a:	4798      	blx	r3
}
    f35c:	bf00      	nop
    f35e:	3708      	adds	r7, #8
    f360:	46bd      	mov	sp, r7
    f362:	bd80      	pop	{r7, pc}
    f364:	0000eec9 	.word	0x0000eec9

0000f368 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    f368:	b580      	push	{r7, lr}
    f36a:	b082      	sub	sp, #8
    f36c:	af00      	add	r7, sp, #0
    f36e:	4603      	mov	r3, r0
    f370:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    f372:	79fb      	ldrb	r3, [r7, #7]
    f374:	4619      	mov	r1, r3
    f376:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f37a:	4b06      	ldr	r3, [pc, #24]	; (f394 <_usbd_ep_is_ctrl+0x2c>)
    f37c:	4798      	blx	r3
    f37e:	4603      	mov	r3, r0
    f380:	2b11      	cmp	r3, #17
    f382:	bf0c      	ite	eq
    f384:	2301      	moveq	r3, #1
    f386:	2300      	movne	r3, #0
    f388:	b2db      	uxtb	r3, r3
}
    f38a:	4618      	mov	r0, r3
    f38c:	3708      	adds	r7, #8
    f38e:	46bd      	mov	sp, r7
    f390:	bd80      	pop	{r7, pc}
    f392:	bf00      	nop
    f394:	0000ef83 	.word	0x0000ef83

0000f398 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    f398:	b580      	push	{r7, lr}
    f39a:	b082      	sub	sp, #8
    f39c:	af00      	add	r7, sp, #0
    f39e:	4603      	mov	r3, r0
    f3a0:	71fb      	strb	r3, [r7, #7]
    f3a2:	460b      	mov	r3, r1
    f3a4:	71bb      	strb	r3, [r7, #6]
    f3a6:	4613      	mov	r3, r2
    f3a8:	717b      	strb	r3, [r7, #5]
	if (st) {
    f3aa:	797b      	ldrb	r3, [r7, #5]
    f3ac:	2b00      	cmp	r3, #0
    f3ae:	d00b      	beq.n	f3c8 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    f3b0:	79bb      	ldrb	r3, [r7, #6]
    f3b2:	2210      	movs	r2, #16
    f3b4:	fa02 f303 	lsl.w	r3, r2, r3
    f3b8:	b2da      	uxtb	r2, r3
    f3ba:	79fb      	ldrb	r3, [r7, #7]
    f3bc:	4619      	mov	r1, r3
    f3be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f3c2:	4b09      	ldr	r3, [pc, #36]	; (f3e8 <_usbd_ep_set_stall+0x50>)
    f3c4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    f3c6:	e00a      	b.n	f3de <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    f3c8:	79bb      	ldrb	r3, [r7, #6]
    f3ca:	2210      	movs	r2, #16
    f3cc:	fa02 f303 	lsl.w	r3, r2, r3
    f3d0:	b2da      	uxtb	r2, r3
    f3d2:	79fb      	ldrb	r3, [r7, #7]
    f3d4:	4619      	mov	r1, r3
    f3d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f3da:	4b04      	ldr	r3, [pc, #16]	; (f3ec <_usbd_ep_set_stall+0x54>)
    f3dc:	4798      	blx	r3
}
    f3de:	bf00      	nop
    f3e0:	3708      	adds	r7, #8
    f3e2:	46bd      	mov	sp, r7
    f3e4:	bd80      	pop	{r7, pc}
    f3e6:	bf00      	nop
    f3e8:	0000edf5 	.word	0x0000edf5
    f3ec:	0000ee49 	.word	0x0000ee49

0000f3f0 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    f3f0:	b580      	push	{r7, lr}
    f3f2:	b084      	sub	sp, #16
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	4603      	mov	r3, r0
    f3f8:	460a      	mov	r2, r1
    f3fa:	71fb      	strb	r3, [r7, #7]
    f3fc:	4613      	mov	r3, r2
    f3fe:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    f400:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f404:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    f406:	79fb      	ldrb	r3, [r7, #7]
    f408:	4619      	mov	r1, r3
    f40a:	68f8      	ldr	r0, [r7, #12]
    f40c:	4b08      	ldr	r3, [pc, #32]	; (f430 <_usbd_ep_is_stalled+0x40>)
    f40e:	4798      	blx	r3
    f410:	4603      	mov	r3, r0
    f412:	4619      	mov	r1, r3
    f414:	79bb      	ldrb	r3, [r7, #6]
    f416:	2210      	movs	r2, #16
    f418:	fa02 f303 	lsl.w	r3, r2, r3
    f41c:	400b      	ands	r3, r1
    f41e:	2b00      	cmp	r3, #0
    f420:	bf14      	ite	ne
    f422:	2301      	movne	r3, #1
    f424:	2300      	moveq	r3, #0
    f426:	b2db      	uxtb	r3, r3
}
    f428:	4618      	mov	r0, r3
    f42a:	3710      	adds	r7, #16
    f42c:	46bd      	mov	sp, r7
    f42e:	bd80      	pop	{r7, pc}
    f430:	0000ee21 	.word	0x0000ee21

0000f434 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    f434:	b580      	push	{r7, lr}
    f436:	b084      	sub	sp, #16
    f438:	af00      	add	r7, sp, #0
    f43a:	4603      	mov	r3, r0
    f43c:	460a      	mov	r2, r1
    f43e:	71fb      	strb	r3, [r7, #7]
    f440:	4613      	mov	r3, r2
    f442:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    f444:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f448:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    f44a:	79fb      	ldrb	r3, [r7, #7]
    f44c:	4619      	mov	r1, r3
    f44e:	68f8      	ldr	r0, [r7, #12]
    f450:	4b08      	ldr	r3, [pc, #32]	; (f474 <_usbd_ep_is_stall_sent+0x40>)
    f452:	4798      	blx	r3
    f454:	4603      	mov	r3, r0
    f456:	4619      	mov	r1, r3
    f458:	79bb      	ldrb	r3, [r7, #6]
    f45a:	2220      	movs	r2, #32
    f45c:	fa02 f303 	lsl.w	r3, r2, r3
    f460:	400b      	ands	r3, r1
    f462:	2b00      	cmp	r3, #0
    f464:	bf14      	ite	ne
    f466:	2301      	movne	r3, #1
    f468:	2300      	moveq	r3, #0
    f46a:	b2db      	uxtb	r3, r3
}
    f46c:	4618      	mov	r0, r3
    f46e:	3710      	adds	r7, #16
    f470:	46bd      	mov	sp, r7
    f472:	bd80      	pop	{r7, pc}
    f474:	0000eda1 	.word	0x0000eda1

0000f478 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    f478:	b580      	push	{r7, lr}
    f47a:	b082      	sub	sp, #8
    f47c:	af00      	add	r7, sp, #0
    f47e:	4603      	mov	r3, r0
    f480:	460a      	mov	r2, r1
    f482:	71fb      	strb	r3, [r7, #7]
    f484:	4613      	mov	r3, r2
    f486:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    f488:	79bb      	ldrb	r3, [r7, #6]
    f48a:	2220      	movs	r2, #32
    f48c:	409a      	lsls	r2, r3
    f48e:	79fb      	ldrb	r3, [r7, #7]
    f490:	4611      	mov	r1, r2
    f492:	4618      	mov	r0, r3
    f494:	4b02      	ldr	r3, [pc, #8]	; (f4a0 <_usbd_ep_ack_stall+0x28>)
    f496:	4798      	blx	r3
}
    f498:	bf00      	nop
    f49a:	3708      	adds	r7, #8
    f49c:	46bd      	mov	sp, r7
    f49e:	bd80      	pop	{r7, pc}
    f4a0:	0000f2f1 	.word	0x0000f2f1

0000f4a4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    f4a4:	b580      	push	{r7, lr}
    f4a6:	b082      	sub	sp, #8
    f4a8:	af00      	add	r7, sp, #0
    f4aa:	4603      	mov	r3, r0
    f4ac:	71fb      	strb	r3, [r7, #7]
    f4ae:	460b      	mov	r3, r1
    f4b0:	71bb      	strb	r3, [r7, #6]
    f4b2:	4613      	mov	r3, r2
    f4b4:	717b      	strb	r3, [r7, #5]
	if (en) {
    f4b6:	797b      	ldrb	r3, [r7, #5]
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d008      	beq.n	f4ce <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    f4bc:	79bb      	ldrb	r3, [r7, #6]
    f4be:	2220      	movs	r2, #32
    f4c0:	409a      	lsls	r2, r3
    f4c2:	79fb      	ldrb	r3, [r7, #7]
    f4c4:	4611      	mov	r1, r2
    f4c6:	4618      	mov	r0, r3
    f4c8:	4b07      	ldr	r3, [pc, #28]	; (f4e8 <_usbd_ep_int_stall_en+0x44>)
    f4ca:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    f4cc:	e007      	b.n	f4de <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    f4ce:	79bb      	ldrb	r3, [r7, #6]
    f4d0:	2220      	movs	r2, #32
    f4d2:	409a      	lsls	r2, r3
    f4d4:	79fb      	ldrb	r3, [r7, #7]
    f4d6:	4611      	mov	r1, r2
    f4d8:	4618      	mov	r0, r3
    f4da:	4b04      	ldr	r3, [pc, #16]	; (f4ec <_usbd_ep_int_stall_en+0x48>)
    f4dc:	4798      	blx	r3
}
    f4de:	bf00      	nop
    f4e0:	3708      	adds	r7, #8
    f4e2:	46bd      	mov	sp, r7
    f4e4:	bd80      	pop	{r7, pc}
    f4e6:	bf00      	nop
    f4e8:	0000f319 	.word	0x0000f319
    f4ec:	0000f341 	.word	0x0000f341

0000f4f0 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    f4f0:	b580      	push	{r7, lr}
    f4f2:	b082      	sub	sp, #8
    f4f4:	af00      	add	r7, sp, #0
    f4f6:	4603      	mov	r3, r0
    f4f8:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    f4fa:	79fb      	ldrb	r3, [r7, #7]
    f4fc:	4619      	mov	r1, r3
    f4fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f502:	4b03      	ldr	r3, [pc, #12]	; (f510 <_usbd_ep_stop_setup+0x20>)
    f504:	4798      	blx	r3
}
    f506:	bf00      	nop
    f508:	3708      	adds	r7, #8
    f50a:	46bd      	mov	sp, r7
    f50c:	bd80      	pop	{r7, pc}
    f50e:	bf00      	nop
    f510:	0000ee75 	.word	0x0000ee75

0000f514 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    f514:	b580      	push	{r7, lr}
    f516:	b082      	sub	sp, #8
    f518:	af00      	add	r7, sp, #0
    f51a:	4603      	mov	r3, r0
    f51c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    f51e:	79fb      	ldrb	r3, [r7, #7]
    f520:	2210      	movs	r2, #16
    f522:	4619      	mov	r1, r3
    f524:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f528:	4b05      	ldr	r3, [pc, #20]	; (f540 <_usbd_ep_is_setup+0x2c>)
    f52a:	4798      	blx	r3
    f52c:	4603      	mov	r3, r0
    f52e:	2b00      	cmp	r3, #0
    f530:	bf14      	ite	ne
    f532:	2301      	movne	r3, #1
    f534:	2300      	moveq	r3, #0
    f536:	b2db      	uxtb	r3, r3
}
    f538:	4618      	mov	r0, r3
    f53a:	3708      	adds	r7, #8
    f53c:	46bd      	mov	sp, r7
    f53e:	bd80      	pop	{r7, pc}
    f540:	0000ed6b 	.word	0x0000ed6b

0000f544 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    f544:	b580      	push	{r7, lr}
    f546:	b082      	sub	sp, #8
    f548:	af00      	add	r7, sp, #0
    f54a:	4603      	mov	r3, r0
    f54c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    f54e:	79fb      	ldrb	r3, [r7, #7]
    f550:	2110      	movs	r1, #16
    f552:	4618      	mov	r0, r3
    f554:	4b02      	ldr	r3, [pc, #8]	; (f560 <_usbd_ep_ack_setup+0x1c>)
    f556:	4798      	blx	r3
}
    f558:	bf00      	nop
    f55a:	3708      	adds	r7, #8
    f55c:	46bd      	mov	sp, r7
    f55e:	bd80      	pop	{r7, pc}
    f560:	0000f2f1 	.word	0x0000f2f1

0000f564 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    f564:	b580      	push	{r7, lr}
    f566:	b082      	sub	sp, #8
    f568:	af00      	add	r7, sp, #0
    f56a:	4603      	mov	r3, r0
    f56c:	71fb      	strb	r3, [r7, #7]
    f56e:	460b      	mov	r3, r1
    f570:	71bb      	strb	r3, [r7, #6]
    f572:	4613      	mov	r3, r2
    f574:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    f576:	797b      	ldrb	r3, [r7, #5]
    f578:	2b00      	cmp	r3, #0
    f57a:	d00b      	beq.n	f594 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    f57c:	79bb      	ldrb	r3, [r7, #6]
    f57e:	2201      	movs	r2, #1
    f580:	fa02 f303 	lsl.w	r3, r2, r3
    f584:	b2da      	uxtb	r2, r3
    f586:	79fb      	ldrb	r3, [r7, #7]
    f588:	4619      	mov	r1, r3
    f58a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f58e:	4b09      	ldr	r3, [pc, #36]	; (f5b4 <_usbd_ep_set_toggle+0x50>)
    f590:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    f592:	e00a      	b.n	f5aa <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    f594:	79bb      	ldrb	r3, [r7, #6]
    f596:	2201      	movs	r2, #1
    f598:	fa02 f303 	lsl.w	r3, r2, r3
    f59c:	b2da      	uxtb	r2, r3
    f59e:	79fb      	ldrb	r3, [r7, #7]
    f5a0:	4619      	mov	r1, r3
    f5a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f5a6:	4b04      	ldr	r3, [pc, #16]	; (f5b8 <_usbd_ep_set_toggle+0x54>)
    f5a8:	4798      	blx	r3
}
    f5aa:	bf00      	nop
    f5ac:	3708      	adds	r7, #8
    f5ae:	46bd      	mov	sp, r7
    f5b0:	bd80      	pop	{r7, pc}
    f5b2:	bf00      	nop
    f5b4:	0000edf5 	.word	0x0000edf5
    f5b8:	0000ee49 	.word	0x0000ee49

0000f5bc <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    f5bc:	b580      	push	{r7, lr}
    f5be:	b082      	sub	sp, #8
    f5c0:	af00      	add	r7, sp, #0
    f5c2:	4603      	mov	r3, r0
    f5c4:	460a      	mov	r2, r1
    f5c6:	71fb      	strb	r3, [r7, #7]
    f5c8:	4613      	mov	r3, r2
    f5ca:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    f5cc:	79bb      	ldrb	r3, [r7, #6]
    f5ce:	2201      	movs	r2, #1
    f5d0:	409a      	lsls	r2, r3
    f5d2:	79fb      	ldrb	r3, [r7, #7]
    f5d4:	4611      	mov	r1, r2
    f5d6:	4618      	mov	r0, r3
    f5d8:	4b02      	ldr	r3, [pc, #8]	; (f5e4 <_usbd_ep_ack_io_cpt+0x28>)
    f5da:	4798      	blx	r3
}
    f5dc:	bf00      	nop
    f5de:	3708      	adds	r7, #8
    f5e0:	46bd      	mov	sp, r7
    f5e2:	bd80      	pop	{r7, pc}
    f5e4:	0000f2f1 	.word	0x0000f2f1

0000f5e8 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    f5e8:	b480      	push	{r7}
    f5ea:	b085      	sub	sp, #20
    f5ec:	af00      	add	r7, sp, #0
    f5ee:	4603      	mov	r3, r0
    f5f0:	603a      	str	r2, [r7, #0]
    f5f2:	71fb      	strb	r3, [r7, #7]
    f5f4:	460b      	mov	r3, r1
    f5f6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f5f8:	79fa      	ldrb	r2, [r7, #7]
    f5fa:	79bb      	ldrb	r3, [r7, #6]
    f5fc:	0052      	lsls	r2, r2, #1
    f5fe:	4413      	add	r3, r2
    f600:	011b      	lsls	r3, r3, #4
    f602:	4a06      	ldr	r2, [pc, #24]	; (f61c <_usbd_ep_set_buf+0x34>)
    f604:	4413      	add	r3, r2
    f606:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    f608:	68fb      	ldr	r3, [r7, #12]
    f60a:	683a      	ldr	r2, [r7, #0]
    f60c:	601a      	str	r2, [r3, #0]
}
    f60e:	bf00      	nop
    f610:	3714      	adds	r7, #20
    f612:	46bd      	mov	sp, r7
    f614:	f85d 7b04 	ldr.w	r7, [sp], #4
    f618:	4770      	bx	lr
    f61a:	bf00      	nop
    f61c:	20001e2c 	.word	0x20001e2c

0000f620 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    f620:	b480      	push	{r7}
    f622:	b085      	sub	sp, #20
    f624:	af00      	add	r7, sp, #0
    f626:	4603      	mov	r3, r0
    f628:	71fb      	strb	r3, [r7, #7]
    f62a:	460b      	mov	r3, r1
    f62c:	71bb      	strb	r3, [r7, #6]
    f62e:	4613      	mov	r3, r2
    f630:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f632:	79fa      	ldrb	r2, [r7, #7]
    f634:	79bb      	ldrb	r3, [r7, #6]
    f636:	0052      	lsls	r2, r2, #1
    f638:	4413      	add	r3, r2
    f63a:	011b      	lsls	r3, r3, #4
    f63c:	4a08      	ldr	r2, [pc, #32]	; (f660 <_usbd_ep_set_in_count+0x40>)
    f63e:	4413      	add	r3, r2
    f640:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    f642:	88bb      	ldrh	r3, [r7, #4]
    f644:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f648:	b299      	uxth	r1, r3
    f64a:	68fa      	ldr	r2, [r7, #12]
    f64c:	6853      	ldr	r3, [r2, #4]
    f64e:	f361 339b 	bfi	r3, r1, #14, #14
    f652:	6053      	str	r3, [r2, #4]
}
    f654:	bf00      	nop
    f656:	3714      	adds	r7, #20
    f658:	46bd      	mov	sp, r7
    f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f65e:	4770      	bx	lr
    f660:	20001e2c 	.word	0x20001e2c

0000f664 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    f664:	b480      	push	{r7}
    f666:	b085      	sub	sp, #20
    f668:	af00      	add	r7, sp, #0
    f66a:	4603      	mov	r3, r0
    f66c:	71fb      	strb	r3, [r7, #7]
    f66e:	460b      	mov	r3, r1
    f670:	71bb      	strb	r3, [r7, #6]
    f672:	4613      	mov	r3, r2
    f674:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f676:	79fa      	ldrb	r2, [r7, #7]
    f678:	79bb      	ldrb	r3, [r7, #6]
    f67a:	0052      	lsls	r2, r2, #1
    f67c:	4413      	add	r3, r2
    f67e:	011b      	lsls	r3, r3, #4
    f680:	4a08      	ldr	r2, [pc, #32]	; (f6a4 <_usbd_ep_set_in_size+0x40>)
    f682:	4413      	add	r3, r2
    f684:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    f686:	88bb      	ldrh	r3, [r7, #4]
    f688:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f68c:	b299      	uxth	r1, r3
    f68e:	68fa      	ldr	r2, [r7, #12]
    f690:	6853      	ldr	r3, [r2, #4]
    f692:	f361 030d 	bfi	r3, r1, #0, #14
    f696:	6053      	str	r3, [r2, #4]
}
    f698:	bf00      	nop
    f69a:	3714      	adds	r7, #20
    f69c:	46bd      	mov	sp, r7
    f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f6a2:	4770      	bx	lr
    f6a4:	20001e2c 	.word	0x20001e2c

0000f6a8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    f6a8:	b480      	push	{r7}
    f6aa:	b085      	sub	sp, #20
    f6ac:	af00      	add	r7, sp, #0
    f6ae:	4603      	mov	r3, r0
    f6b0:	71fb      	strb	r3, [r7, #7]
    f6b2:	460b      	mov	r3, r1
    f6b4:	71bb      	strb	r3, [r7, #6]
    f6b6:	4613      	mov	r3, r2
    f6b8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f6ba:	79fa      	ldrb	r2, [r7, #7]
    f6bc:	79bb      	ldrb	r3, [r7, #6]
    f6be:	0052      	lsls	r2, r2, #1
    f6c0:	4413      	add	r3, r2
    f6c2:	011b      	lsls	r3, r3, #4
    f6c4:	4a08      	ldr	r2, [pc, #32]	; (f6e8 <_usbd_ep_set_out_count+0x40>)
    f6c6:	4413      	add	r3, r2
    f6c8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    f6ca:	88bb      	ldrh	r3, [r7, #4]
    f6cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f6d0:	b299      	uxth	r1, r3
    f6d2:	68fa      	ldr	r2, [r7, #12]
    f6d4:	6853      	ldr	r3, [r2, #4]
    f6d6:	f361 030d 	bfi	r3, r1, #0, #14
    f6da:	6053      	str	r3, [r2, #4]
}
    f6dc:	bf00      	nop
    f6de:	3714      	adds	r7, #20
    f6e0:	46bd      	mov	sp, r7
    f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    f6e6:	4770      	bx	lr
    f6e8:	20001e2c 	.word	0x20001e2c

0000f6ec <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    f6ec:	b480      	push	{r7}
    f6ee:	b085      	sub	sp, #20
    f6f0:	af00      	add	r7, sp, #0
    f6f2:	4603      	mov	r3, r0
    f6f4:	71fb      	strb	r3, [r7, #7]
    f6f6:	460b      	mov	r3, r1
    f6f8:	71bb      	strb	r3, [r7, #6]
    f6fa:	4613      	mov	r3, r2
    f6fc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f6fe:	79fa      	ldrb	r2, [r7, #7]
    f700:	79bb      	ldrb	r3, [r7, #6]
    f702:	0052      	lsls	r2, r2, #1
    f704:	4413      	add	r3, r2
    f706:	011b      	lsls	r3, r3, #4
    f708:	4a08      	ldr	r2, [pc, #32]	; (f72c <_usbd_ep_set_out_size+0x40>)
    f70a:	4413      	add	r3, r2
    f70c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    f70e:	88bb      	ldrh	r3, [r7, #4]
    f710:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f714:	b299      	uxth	r1, r3
    f716:	68fa      	ldr	r2, [r7, #12]
    f718:	6853      	ldr	r3, [r2, #4]
    f71a:	f361 339b 	bfi	r3, r1, #14, #14
    f71e:	6053      	str	r3, [r2, #4]
}
    f720:	bf00      	nop
    f722:	3714      	adds	r7, #20
    f724:	46bd      	mov	sp, r7
    f726:	f85d 7b04 	ldr.w	r7, [sp], #4
    f72a:	4770      	bx	lr
    f72c:	20001e2c 	.word	0x20001e2c

0000f730 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    f730:	b580      	push	{r7, lr}
    f732:	b084      	sub	sp, #16
    f734:	af00      	add	r7, sp, #0
    f736:	60ba      	str	r2, [r7, #8]
    f738:	607b      	str	r3, [r7, #4]
    f73a:	4603      	mov	r3, r0
    f73c:	73fb      	strb	r3, [r7, #15]
    f73e:	460b      	mov	r3, r1
    f740:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    f742:	68bb      	ldr	r3, [r7, #8]
    f744:	b29a      	uxth	r2, r3
    f746:	7bb9      	ldrb	r1, [r7, #14]
    f748:	7bfb      	ldrb	r3, [r7, #15]
    f74a:	4618      	mov	r0, r3
    f74c:	4b06      	ldr	r3, [pc, #24]	; (f768 <_usbd_ep_set_in_trans+0x38>)
    f74e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    f750:	687b      	ldr	r3, [r7, #4]
    f752:	b29a      	uxth	r2, r3
    f754:	7bb9      	ldrb	r1, [r7, #14]
    f756:	7bfb      	ldrb	r3, [r7, #15]
    f758:	4618      	mov	r0, r3
    f75a:	4b04      	ldr	r3, [pc, #16]	; (f76c <_usbd_ep_set_in_trans+0x3c>)
    f75c:	4798      	blx	r3
}
    f75e:	bf00      	nop
    f760:	3710      	adds	r7, #16
    f762:	46bd      	mov	sp, r7
    f764:	bd80      	pop	{r7, pc}
    f766:	bf00      	nop
    f768:	0000f665 	.word	0x0000f665
    f76c:	0000f621 	.word	0x0000f621

0000f770 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    f770:	b580      	push	{r7, lr}
    f772:	b084      	sub	sp, #16
    f774:	af00      	add	r7, sp, #0
    f776:	60ba      	str	r2, [r7, #8]
    f778:	607b      	str	r3, [r7, #4]
    f77a:	4603      	mov	r3, r0
    f77c:	73fb      	strb	r3, [r7, #15]
    f77e:	460b      	mov	r3, r1
    f780:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    f782:	68bb      	ldr	r3, [r7, #8]
    f784:	b29a      	uxth	r2, r3
    f786:	7bb9      	ldrb	r1, [r7, #14]
    f788:	7bfb      	ldrb	r3, [r7, #15]
    f78a:	4618      	mov	r0, r3
    f78c:	4b06      	ldr	r3, [pc, #24]	; (f7a8 <_usbd_ep_set_out_trans+0x38>)
    f78e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	b29a      	uxth	r2, r3
    f794:	7bb9      	ldrb	r1, [r7, #14]
    f796:	7bfb      	ldrb	r3, [r7, #15]
    f798:	4618      	mov	r0, r3
    f79a:	4b04      	ldr	r3, [pc, #16]	; (f7ac <_usbd_ep_set_out_trans+0x3c>)
    f79c:	4798      	blx	r3
}
    f79e:	bf00      	nop
    f7a0:	3710      	adds	r7, #16
    f7a2:	46bd      	mov	sp, r7
    f7a4:	bd80      	pop	{r7, pc}
    f7a6:	bf00      	nop
    f7a8:	0000f6ed 	.word	0x0000f6ed
    f7ac:	0000f6a9 	.word	0x0000f6a9

0000f7b0 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    f7b0:	b480      	push	{r7}
    f7b2:	b085      	sub	sp, #20
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	4603      	mov	r3, r0
    f7b8:	460a      	mov	r2, r1
    f7ba:	71fb      	strb	r3, [r7, #7]
    f7bc:	4613      	mov	r3, r2
    f7be:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    f7c0:	79fa      	ldrb	r2, [r7, #7]
    f7c2:	79bb      	ldrb	r3, [r7, #6]
    f7c4:	0052      	lsls	r2, r2, #1
    f7c6:	4413      	add	r3, r2
    f7c8:	011b      	lsls	r3, r3, #4
    f7ca:	4a06      	ldr	r2, [pc, #24]	; (f7e4 <_usbd_ep_clear_bank_status+0x34>)
    f7cc:	4413      	add	r3, r2
    f7ce:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    f7d0:	68fb      	ldr	r3, [r7, #12]
    f7d2:	2200      	movs	r2, #0
    f7d4:	729a      	strb	r2, [r3, #10]
}
    f7d6:	bf00      	nop
    f7d8:	3714      	adds	r7, #20
    f7da:	46bd      	mov	sp, r7
    f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    f7e0:	4770      	bx	lr
    f7e2:	bf00      	nop
    f7e4:	20001e2c 	.word	0x20001e2c

0000f7e8 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    f7e8:	b580      	push	{r7, lr}
    f7ea:	b082      	sub	sp, #8
    f7ec:	af00      	add	r7, sp, #0
    f7ee:	4603      	mov	r3, r0
    f7f0:	71fb      	strb	r3, [r7, #7]
    f7f2:	460b      	mov	r3, r1
    f7f4:	71bb      	strb	r3, [r7, #6]
    f7f6:	4613      	mov	r3, r2
    f7f8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    f7fa:	797b      	ldrb	r3, [r7, #5]
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	d00b      	beq.n	f818 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    f800:	79bb      	ldrb	r3, [r7, #6]
    f802:	2240      	movs	r2, #64	; 0x40
    f804:	fa02 f303 	lsl.w	r3, r2, r3
    f808:	b2da      	uxtb	r2, r3
    f80a:	79fb      	ldrb	r3, [r7, #7]
    f80c:	4619      	mov	r1, r3
    f80e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f812:	4b09      	ldr	r3, [pc, #36]	; (f838 <_usbd_ep_set_in_rdy+0x50>)
    f814:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    f816:	e00a      	b.n	f82e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    f818:	79bb      	ldrb	r3, [r7, #6]
    f81a:	2240      	movs	r2, #64	; 0x40
    f81c:	fa02 f303 	lsl.w	r3, r2, r3
    f820:	b2da      	uxtb	r2, r3
    f822:	79fb      	ldrb	r3, [r7, #7]
    f824:	4619      	mov	r1, r3
    f826:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f82a:	4b04      	ldr	r3, [pc, #16]	; (f83c <_usbd_ep_set_in_rdy+0x54>)
    f82c:	4798      	blx	r3
}
    f82e:	bf00      	nop
    f830:	3708      	adds	r7, #8
    f832:	46bd      	mov	sp, r7
    f834:	bd80      	pop	{r7, pc}
    f836:	bf00      	nop
    f838:	0000edf5 	.word	0x0000edf5
    f83c:	0000ee49 	.word	0x0000ee49

0000f840 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    f840:	b580      	push	{r7, lr}
    f842:	b082      	sub	sp, #8
    f844:	af00      	add	r7, sp, #0
    f846:	4603      	mov	r3, r0
    f848:	71fb      	strb	r3, [r7, #7]
    f84a:	460b      	mov	r3, r1
    f84c:	71bb      	strb	r3, [r7, #6]
    f84e:	4613      	mov	r3, r2
    f850:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    f852:	797b      	ldrb	r3, [r7, #5]
    f854:	2b00      	cmp	r3, #0
    f856:	d00b      	beq.n	f870 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    f858:	79bb      	ldrb	r3, [r7, #6]
    f85a:	2240      	movs	r2, #64	; 0x40
    f85c:	fa02 f303 	lsl.w	r3, r2, r3
    f860:	b2da      	uxtb	r2, r3
    f862:	79fb      	ldrb	r3, [r7, #7]
    f864:	4619      	mov	r1, r3
    f866:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f86a:	4b09      	ldr	r3, [pc, #36]	; (f890 <_usbd_ep_set_out_rdy+0x50>)
    f86c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    f86e:	e00a      	b.n	f886 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    f870:	79bb      	ldrb	r3, [r7, #6]
    f872:	2240      	movs	r2, #64	; 0x40
    f874:	fa02 f303 	lsl.w	r3, r2, r3
    f878:	b2da      	uxtb	r2, r3
    f87a:	79fb      	ldrb	r3, [r7, #7]
    f87c:	4619      	mov	r1, r3
    f87e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f882:	4b04      	ldr	r3, [pc, #16]	; (f894 <_usbd_ep_set_out_rdy+0x54>)
    f884:	4798      	blx	r3
}
    f886:	bf00      	nop
    f888:	3708      	adds	r7, #8
    f88a:	46bd      	mov	sp, r7
    f88c:	bd80      	pop	{r7, pc}
    f88e:	bf00      	nop
    f890:	0000ee49 	.word	0x0000ee49
    f894:	0000edf5 	.word	0x0000edf5

0000f898 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    f898:	b480      	push	{r7}
    f89a:	b083      	sub	sp, #12
    f89c:	af00      	add	r7, sp, #0
    f89e:	4603      	mov	r3, r0
    f8a0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    f8a2:	88fb      	ldrh	r3, [r7, #6]
    f8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f8a8:	d820      	bhi.n	f8ec <_usbd_ep_pcksize_size+0x54>
    f8aa:	88fb      	ldrh	r3, [r7, #6]
    f8ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f8b0:	d81a      	bhi.n	f8e8 <_usbd_ep_pcksize_size+0x50>
    f8b2:	88fb      	ldrh	r3, [r7, #6]
    f8b4:	2b80      	cmp	r3, #128	; 0x80
    f8b6:	d815      	bhi.n	f8e4 <_usbd_ep_pcksize_size+0x4c>
    f8b8:	88fb      	ldrh	r3, [r7, #6]
    f8ba:	2b40      	cmp	r3, #64	; 0x40
    f8bc:	d810      	bhi.n	f8e0 <_usbd_ep_pcksize_size+0x48>
    f8be:	88fb      	ldrh	r3, [r7, #6]
    f8c0:	2b20      	cmp	r3, #32
    f8c2:	d80b      	bhi.n	f8dc <_usbd_ep_pcksize_size+0x44>
    f8c4:	88fb      	ldrh	r3, [r7, #6]
    f8c6:	2b10      	cmp	r3, #16
    f8c8:	d806      	bhi.n	f8d8 <_usbd_ep_pcksize_size+0x40>
    f8ca:	88fb      	ldrh	r3, [r7, #6]
    f8cc:	2b08      	cmp	r3, #8
    f8ce:	bf8c      	ite	hi
    f8d0:	2301      	movhi	r3, #1
    f8d2:	2300      	movls	r3, #0
    f8d4:	b2db      	uxtb	r3, r3
    f8d6:	e00a      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8d8:	2302      	movs	r3, #2
    f8da:	e008      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8dc:	2303      	movs	r3, #3
    f8de:	e006      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8e0:	2304      	movs	r3, #4
    f8e2:	e004      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8e4:	2305      	movs	r3, #5
    f8e6:	e002      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8e8:	2306      	movs	r3, #6
    f8ea:	e000      	b.n	f8ee <_usbd_ep_pcksize_size+0x56>
    f8ec:	2307      	movs	r3, #7
}
    f8ee:	4618      	mov	r0, r3
    f8f0:	370c      	adds	r7, #12
    f8f2:	46bd      	mov	sp, r7
    f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8f8:	4770      	bx	lr
	...

0000f8fc <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    f8fc:	b480      	push	{r7}
    f8fe:	b085      	sub	sp, #20
    f900:	af00      	add	r7, sp, #0
    f902:	4603      	mov	r3, r0
    f904:	460a      	mov	r2, r1
    f906:	71fb      	strb	r3, [r7, #7]
    f908:	4613      	mov	r3, r2
    f90a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    f90c:	79fb      	ldrb	r3, [r7, #7]
    f90e:	2b00      	cmp	r3, #0
    f910:	d008      	beq.n	f924 <_usb_d_dev_ept+0x28>
    f912:	79bb      	ldrb	r3, [r7, #6]
    f914:	2b00      	cmp	r3, #0
    f916:	d003      	beq.n	f920 <_usb_d_dev_ept+0x24>
    f918:	79fb      	ldrb	r3, [r7, #7]
    f91a:	3304      	adds	r3, #4
    f91c:	b2db      	uxtb	r3, r3
    f91e:	e002      	b.n	f926 <_usb_d_dev_ept+0x2a>
    f920:	79fb      	ldrb	r3, [r7, #7]
    f922:	e000      	b.n	f926 <_usb_d_dev_ept+0x2a>
    f924:	2300      	movs	r3, #0
    f926:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    f928:	7bfa      	ldrb	r2, [r7, #15]
    f92a:	4613      	mov	r3, r2
    f92c:	009b      	lsls	r3, r3, #2
    f92e:	4413      	add	r3, r2
    f930:	009b      	lsls	r3, r3, #2
    f932:	3310      	adds	r3, #16
    f934:	4a04      	ldr	r2, [pc, #16]	; (f948 <_usb_d_dev_ept+0x4c>)
    f936:	4413      	add	r3, r2
    f938:	3304      	adds	r3, #4
}
    f93a:	4618      	mov	r0, r3
    f93c:	3714      	adds	r7, #20
    f93e:	46bd      	mov	sp, r7
    f940:	f85d 7b04 	ldr.w	r7, [sp], #4
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	20001d64 	.word	0x20001d64

0000f94c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    f94c:	b580      	push	{r7, lr}
    f94e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    f950:	2104      	movs	r1, #4
    f952:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f956:	4b03      	ldr	r3, [pc, #12]	; (f964 <_usb_d_dev_sof+0x18>)
    f958:	4798      	blx	r3
	dev_inst.callbacks.sof();
    f95a:	4b03      	ldr	r3, [pc, #12]	; (f968 <_usb_d_dev_sof+0x1c>)
    f95c:	681b      	ldr	r3, [r3, #0]
    f95e:	4798      	blx	r3
}
    f960:	bf00      	nop
    f962:	bd80      	pop	{r7, pc}
    f964:	0000efc3 	.word	0x0000efc3
    f968:	20001d64 	.word	0x20001d64

0000f96c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    f96c:	b580      	push	{r7, lr}
    f96e:	b084      	sub	sp, #16
    f970:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    f972:	2300      	movs	r3, #0
    f974:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    f976:	f240 2101 	movw	r1, #513	; 0x201
    f97a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f97e:	4b1a      	ldr	r3, [pc, #104]	; (f9e8 <_usb_d_dev_lpmsusp+0x7c>)
    f980:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    f982:	f240 2101 	movw	r1, #513	; 0x201
    f986:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f98a:	4b18      	ldr	r3, [pc, #96]	; (f9ec <_usb_d_dev_lpmsusp+0x80>)
    f98c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    f98e:	2170      	movs	r1, #112	; 0x70
    f990:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f994:	4b16      	ldr	r3, [pc, #88]	; (f9f0 <_usb_d_dev_lpmsusp+0x84>)
    f996:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    f998:	2300      	movs	r3, #0
    f99a:	73fb      	strb	r3, [r7, #15]
    f99c:	e018      	b.n	f9d0 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    f99e:	7bfb      	ldrb	r3, [r7, #15]
    f9a0:	015b      	lsls	r3, r3, #5
    f9a2:	4a14      	ldr	r2, [pc, #80]	; (f9f4 <_usb_d_dev_lpmsusp+0x88>)
    f9a4:	4413      	add	r3, r2
    f9a6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    f9a8:	687b      	ldr	r3, [r7, #4]
    f9aa:	891b      	ldrh	r3, [r3, #8]
    f9ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
    f9b0:	b2db      	uxtb	r3, r3
    f9b2:	2b03      	cmp	r3, #3
    f9b4:	d109      	bne.n	f9ca <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    f9b6:	687b      	ldr	r3, [r7, #4]
    f9b8:	891b      	ldrh	r3, [r3, #8]
    f9ba:	f3c3 130a 	ubfx	r3, r3, #4, #11
    f9be:	b29b      	uxth	r3, r3
    f9c0:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    f9c2:	687b      	ldr	r3, [r7, #4]
    f9c4:	2200      	movs	r2, #0
    f9c6:	811a      	strh	r2, [r3, #8]
			break;
    f9c8:	e005      	b.n	f9d6 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    f9ca:	7bfb      	ldrb	r3, [r7, #15]
    f9cc:	3301      	adds	r3, #1
    f9ce:	73fb      	strb	r3, [r7, #15]
    f9d0:	7bfb      	ldrb	r3, [r7, #15]
    f9d2:	2b03      	cmp	r3, #3
    f9d4:	d9e3      	bls.n	f99e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    f9d6:	4b08      	ldr	r3, [pc, #32]	; (f9f8 <_usb_d_dev_lpmsusp+0x8c>)
    f9d8:	685b      	ldr	r3, [r3, #4]
    f9da:	68b9      	ldr	r1, [r7, #8]
    f9dc:	2003      	movs	r0, #3
    f9de:	4798      	blx	r3
}
    f9e0:	bf00      	nop
    f9e2:	3710      	adds	r7, #16
    f9e4:	46bd      	mov	sp, r7
    f9e6:	bd80      	pop	{r7, pc}
    f9e8:	0000efc3 	.word	0x0000efc3
    f9ec:	0000f019 	.word	0x0000f019
    f9f0:	0000efe1 	.word	0x0000efe1
    f9f4:	20001e2c 	.word	0x20001e2c
    f9f8:	20001d64 	.word	0x20001d64

0000f9fc <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    f9fc:	b580      	push	{r7, lr}
    f9fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    fa00:	2180      	movs	r1, #128	; 0x80
    fa02:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa06:	4b04      	ldr	r3, [pc, #16]	; (fa18 <_usb_d_dev_ramerr+0x1c>)
    fa08:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    fa0a:	4b04      	ldr	r3, [pc, #16]	; (fa1c <_usb_d_dev_ramerr+0x20>)
    fa0c:	685b      	ldr	r3, [r3, #4]
    fa0e:	2100      	movs	r1, #0
    fa10:	2005      	movs	r0, #5
    fa12:	4798      	blx	r3
}
    fa14:	bf00      	nop
    fa16:	bd80      	pop	{r7, pc}
    fa18:	0000efc3 	.word	0x0000efc3
    fa1c:	20001d64 	.word	0x20001d64

0000fa20 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    fa20:	b580      	push	{r7, lr}
    fa22:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    fa24:	2170      	movs	r1, #112	; 0x70
    fa26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa2a:	4b0b      	ldr	r3, [pc, #44]	; (fa58 <_usb_d_dev_wakeup+0x38>)
    fa2c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    fa2e:	2170      	movs	r1, #112	; 0x70
    fa30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa34:	4b09      	ldr	r3, [pc, #36]	; (fa5c <_usb_d_dev_wakeup+0x3c>)
    fa36:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    fa38:	f240 2101 	movw	r1, #513	; 0x201
    fa3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa40:	4b07      	ldr	r3, [pc, #28]	; (fa60 <_usb_d_dev_wakeup+0x40>)
    fa42:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    fa44:	2000      	movs	r0, #0
    fa46:	4b07      	ldr	r3, [pc, #28]	; (fa64 <_usb_d_dev_wakeup+0x44>)
    fa48:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    fa4a:	4b07      	ldr	r3, [pc, #28]	; (fa68 <_usb_d_dev_wakeup+0x48>)
    fa4c:	685b      	ldr	r3, [r3, #4]
    fa4e:	2100      	movs	r1, #0
    fa50:	2002      	movs	r0, #2
    fa52:	4798      	blx	r3
}
    fa54:	bf00      	nop
    fa56:	bd80      	pop	{r7, pc}
    fa58:	0000efc3 	.word	0x0000efc3
    fa5c:	0000f019 	.word	0x0000f019
    fa60:	0000efe1 	.word	0x0000efe1
    fa64:	0000f2c1 	.word	0x0000f2c1
    fa68:	20001d64 	.word	0x20001d64

0000fa6c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    fa6c:	b580      	push	{r7, lr}
    fa6e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    fa70:	2200      	movs	r2, #0
    fa72:	2100      	movs	r1, #0
    fa74:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa78:	4b0d      	ldr	r3, [pc, #52]	; (fab0 <_usb_d_dev_reset+0x44>)
    fa7a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    fa7c:	2108      	movs	r1, #8
    fa7e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa82:	4b0c      	ldr	r3, [pc, #48]	; (fab4 <_usb_d_dev_reset+0x48>)
    fa84:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    fa86:	2170      	movs	r1, #112	; 0x70
    fa88:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa8c:	4b0a      	ldr	r3, [pc, #40]	; (fab8 <_usb_d_dev_reset+0x4c>)
    fa8e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    fa90:	f240 2101 	movw	r1, #513	; 0x201
    fa94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fa98:	4b08      	ldr	r3, [pc, #32]	; (fabc <_usb_d_dev_reset+0x50>)
    fa9a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    fa9c:	4b08      	ldr	r3, [pc, #32]	; (fac0 <_usb_d_dev_reset+0x54>)
    fa9e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    faa0:	4b08      	ldr	r3, [pc, #32]	; (fac4 <_usb_d_dev_reset+0x58>)
    faa2:	685b      	ldr	r3, [r3, #4]
    faa4:	2100      	movs	r1, #0
    faa6:	2001      	movs	r0, #1
    faa8:	4798      	blx	r3
}
    faaa:	bf00      	nop
    faac:	bd80      	pop	{r7, pc}
    faae:	bf00      	nop
    fab0:	0000ef59 	.word	0x0000ef59
    fab4:	0000efc3 	.word	0x0000efc3
    fab8:	0000f019 	.word	0x0000f019
    fabc:	0000efe1 	.word	0x0000efe1
    fac0:	00010629 	.word	0x00010629
    fac4:	20001d64 	.word	0x20001d64

0000fac8 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    fac8:	b580      	push	{r7, lr}
    faca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    facc:	f240 2101 	movw	r1, #513	; 0x201
    fad0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fad4:	4b09      	ldr	r3, [pc, #36]	; (fafc <_usb_d_dev_suspend+0x34>)
    fad6:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    fad8:	f240 2101 	movw	r1, #513	; 0x201
    fadc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fae0:	4b07      	ldr	r3, [pc, #28]	; (fb00 <_usb_d_dev_suspend+0x38>)
    fae2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    fae4:	2170      	movs	r1, #112	; 0x70
    fae6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    faea:	4b06      	ldr	r3, [pc, #24]	; (fb04 <_usb_d_dev_suspend+0x3c>)
    faec:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    faee:	4b06      	ldr	r3, [pc, #24]	; (fb08 <_usb_d_dev_suspend+0x40>)
    faf0:	685b      	ldr	r3, [r3, #4]
    faf2:	2100      	movs	r1, #0
    faf4:	2004      	movs	r0, #4
    faf6:	4798      	blx	r3
}
    faf8:	bf00      	nop
    fafa:	bd80      	pop	{r7, pc}
    fafc:	0000efc3 	.word	0x0000efc3
    fb00:	0000f019 	.word	0x0000f019
    fb04:	0000efe1 	.word	0x0000efe1
    fb08:	20001d64 	.word	0x20001d64

0000fb0c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    fb0c:	b580      	push	{r7, lr}
    fb0e:	b082      	sub	sp, #8
    fb10:	af00      	add	r7, sp, #0
	bool     rc    = true;
    fb12:	2301      	movs	r3, #1
    fb14:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    fb16:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fb1a:	4b22      	ldr	r3, [pc, #136]	; (fba4 <_usb_d_dev_handle_nep+0x98>)
    fb1c:	4798      	blx	r3
    fb1e:	4603      	mov	r3, r0
    fb20:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    fb22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fb26:	4b20      	ldr	r3, [pc, #128]	; (fba8 <_usb_d_dev_handle_nep+0x9c>)
    fb28:	4798      	blx	r3
    fb2a:	4603      	mov	r3, r0
    fb2c:	461a      	mov	r2, r3
    fb2e:	88bb      	ldrh	r3, [r7, #4]
    fb30:	4013      	ands	r3, r2
    fb32:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    fb34:	88bb      	ldrh	r3, [r7, #4]
    fb36:	f003 0304 	and.w	r3, r3, #4
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d003      	beq.n	fb46 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    fb3e:	4b1b      	ldr	r3, [pc, #108]	; (fbac <_usb_d_dev_handle_nep+0xa0>)
    fb40:	4798      	blx	r3
		return true;
    fb42:	2301      	movs	r3, #1
    fb44:	e02a      	b.n	fb9c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    fb46:	88bb      	ldrh	r3, [r7, #4]
    fb48:	f403 7300 	and.w	r3, r3, #512	; 0x200
    fb4c:	2b00      	cmp	r3, #0
    fb4e:	d002      	beq.n	fb56 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    fb50:	4b17      	ldr	r3, [pc, #92]	; (fbb0 <_usb_d_dev_handle_nep+0xa4>)
    fb52:	4798      	blx	r3
    fb54:	e021      	b.n	fb9a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    fb56:	88bb      	ldrh	r3, [r7, #4]
    fb58:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	d002      	beq.n	fb66 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    fb60:	4b14      	ldr	r3, [pc, #80]	; (fbb4 <_usb_d_dev_handle_nep+0xa8>)
    fb62:	4798      	blx	r3
    fb64:	e019      	b.n	fb9a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    fb66:	88bb      	ldrh	r3, [r7, #4]
    fb68:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d002      	beq.n	fb76 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    fb70:	4b11      	ldr	r3, [pc, #68]	; (fbb8 <_usb_d_dev_handle_nep+0xac>)
    fb72:	4798      	blx	r3
    fb74:	e011      	b.n	fb9a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    fb76:	88bb      	ldrh	r3, [r7, #4]
    fb78:	f003 0308 	and.w	r3, r3, #8
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d002      	beq.n	fb86 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    fb80:	4b0e      	ldr	r3, [pc, #56]	; (fbbc <_usb_d_dev_handle_nep+0xb0>)
    fb82:	4798      	blx	r3
    fb84:	e009      	b.n	fb9a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    fb86:	88bb      	ldrh	r3, [r7, #4]
    fb88:	f003 0301 	and.w	r3, r3, #1
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d002      	beq.n	fb96 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    fb90:	4b0b      	ldr	r3, [pc, #44]	; (fbc0 <_usb_d_dev_handle_nep+0xb4>)
    fb92:	4798      	blx	r3
    fb94:	e001      	b.n	fb9a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    fb96:	2300      	movs	r3, #0
    fb98:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    fb9a:	79fb      	ldrb	r3, [r7, #7]
}
    fb9c:	4618      	mov	r0, r3
    fb9e:	3708      	adds	r7, #8
    fba0:	46bd      	mov	sp, r7
    fba2:	bd80      	pop	{r7, pc}
    fba4:	0000efa9 	.word	0x0000efa9
    fba8:	0000efff 	.word	0x0000efff
    fbac:	0000f94d 	.word	0x0000f94d
    fbb0:	0000f96d 	.word	0x0000f96d
    fbb4:	0000f9fd 	.word	0x0000f9fd
    fbb8:	0000fa21 	.word	0x0000fa21
    fbbc:	0000fa6d 	.word	0x0000fa6d
    fbc0:	0000fac9 	.word	0x0000fac9

0000fbc4 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    fbc4:	b590      	push	{r4, r7, lr}
    fbc6:	b089      	sub	sp, #36	; 0x24
    fbc8:	af00      	add	r7, sp, #0
    fbca:	6078      	str	r0, [r7, #4]
    fbcc:	460b      	mov	r3, r1
    fbce:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    fbd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fbd4:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    fbd6:	687b      	ldr	r3, [r7, #4]
    fbd8:	7c9b      	ldrb	r3, [r3, #18]
    fbda:	f003 030f 	and.w	r3, r3, #15
    fbde:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    fbe0:	7dfb      	ldrb	r3, [r7, #23]
    fbe2:	015b      	lsls	r3, r3, #5
    fbe4:	4a73      	ldr	r2, [pc, #460]	; (fdb4 <_usb_d_dev_in_next+0x1f0>)
    fbe6:	4413      	add	r3, r2
    fbe8:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    fbea:	78fb      	ldrb	r3, [r7, #3]
    fbec:	2b00      	cmp	r3, #0
    fbee:	d006      	beq.n	fbfe <_usb_d_dev_in_next+0x3a>
    fbf0:	693b      	ldr	r3, [r7, #16]
    fbf2:	3310      	adds	r3, #16
    fbf4:	685b      	ldr	r3, [r3, #4]
    fbf6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fbfa:	b29b      	uxth	r3, r3
    fbfc:	e000      	b.n	fc00 <_usb_d_dev_in_next+0x3c>
    fbfe:	2300      	movs	r3, #0
    fc00:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    fc02:	687b      	ldr	r3, [r7, #4]
    fc04:	8a1b      	ldrh	r3, [r3, #16]
    fc06:	f240 32ff 	movw	r2, #1023	; 0x3ff
    fc0a:	4293      	cmp	r3, r2
    fc0c:	d103      	bne.n	fc16 <_usb_d_dev_in_next+0x52>
    fc0e:	687b      	ldr	r3, [r7, #4]
    fc10:	8a1b      	ldrh	r3, [r3, #16]
    fc12:	b21b      	sxth	r3, r3
    fc14:	e004      	b.n	fc20 <_usb_d_dev_in_next+0x5c>
    fc16:	687b      	ldr	r3, [r7, #4]
    fc18:	8a1b      	ldrh	r3, [r3, #16]
    fc1a:	3b01      	subs	r3, #1
    fc1c:	b29b      	uxth	r3, r3
    fc1e:	b21b      	sxth	r3, r3
    fc20:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    fc24:	4013      	ands	r3, r2
    fc26:	b21b      	sxth	r3, r3
    fc28:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    fc2a:	2300      	movs	r3, #0
    fc2c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    fc2e:	687b      	ldr	r3, [r7, #4]
    fc30:	7cdb      	ldrb	r3, [r3, #19]
    fc32:	f003 0307 	and.w	r3, r3, #7
    fc36:	b2db      	uxtb	r3, r3
    fc38:	2b01      	cmp	r3, #1
    fc3a:	bf0c      	ite	eq
    fc3c:	2301      	moveq	r3, #1
    fc3e:	2300      	movne	r3, #0
    fc40:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    fc42:	78fb      	ldrb	r3, [r7, #3]
    fc44:	2b00      	cmp	r3, #0
    fc46:	d004      	beq.n	fc52 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    fc48:	7dfb      	ldrb	r3, [r7, #23]
    fc4a:	2101      	movs	r1, #1
    fc4c:	4618      	mov	r0, r3
    fc4e:	4b5a      	ldr	r3, [pc, #360]	; (fdb8 <_usb_d_dev_in_next+0x1f4>)
    fc50:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    fc52:	687b      	ldr	r3, [r7, #4]
    fc54:	689a      	ldr	r2, [r3, #8]
    fc56:	89fb      	ldrh	r3, [r7, #14]
    fc58:	441a      	add	r2, r3
    fc5a:	687b      	ldr	r3, [r7, #4]
    fc5c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	689a      	ldr	r2, [r3, #8]
    fc62:	687b      	ldr	r3, [r7, #4]
    fc64:	685b      	ldr	r3, [r3, #4]
    fc66:	429a      	cmp	r2, r3
    fc68:	d243      	bcs.n	fcf2 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    fc6a:	687b      	ldr	r3, [r7, #4]
    fc6c:	685b      	ldr	r3, [r3, #4]
    fc6e:	b29a      	uxth	r2, r3
    fc70:	687b      	ldr	r3, [r7, #4]
    fc72:	689b      	ldr	r3, [r3, #8]
    fc74:	b29b      	uxth	r3, r3
    fc76:	1ad3      	subs	r3, r2, r3
    fc78:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    fc7a:	687b      	ldr	r3, [r7, #4]
    fc7c:	7cdb      	ldrb	r3, [r3, #19]
    fc7e:	f003 0320 	and.w	r3, r3, #32
    fc82:	b2db      	uxtb	r3, r3
    fc84:	2b00      	cmp	r3, #0
    fc86:	d01b      	beq.n	fcc0 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    fc88:	687b      	ldr	r3, [r7, #4]
    fc8a:	8a1b      	ldrh	r3, [r3, #16]
    fc8c:	8bfa      	ldrh	r2, [r7, #30]
    fc8e:	429a      	cmp	r2, r3
    fc90:	d902      	bls.n	fc98 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    fc92:	687b      	ldr	r3, [r7, #4]
    fc94:	8a1b      	ldrh	r3, [r3, #16]
    fc96:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    fc98:	687b      	ldr	r3, [r7, #4]
    fc9a:	68d8      	ldr	r0, [r3, #12]
    fc9c:	687b      	ldr	r3, [r7, #4]
    fc9e:	681a      	ldr	r2, [r3, #0]
    fca0:	687b      	ldr	r3, [r7, #4]
    fca2:	689b      	ldr	r3, [r3, #8]
    fca4:	4413      	add	r3, r2
    fca6:	8bfa      	ldrh	r2, [r7, #30]
    fca8:	4619      	mov	r1, r3
    fcaa:	4b44      	ldr	r3, [pc, #272]	; (fdbc <_usb_d_dev_in_next+0x1f8>)
    fcac:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    fcae:	687b      	ldr	r3, [r7, #4]
    fcb0:	68db      	ldr	r3, [r3, #12]
    fcb2:	461a      	mov	r2, r3
    fcb4:	7dfb      	ldrb	r3, [r7, #23]
    fcb6:	2101      	movs	r1, #1
    fcb8:	4618      	mov	r0, r3
    fcba:	4b41      	ldr	r3, [pc, #260]	; (fdc0 <_usb_d_dev_in_next+0x1fc>)
    fcbc:	4798      	blx	r3
    fcbe:	e011      	b.n	fce4 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    fcc0:	8bfb      	ldrh	r3, [r7, #30]
    fcc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fcc6:	d902      	bls.n	fcce <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    fcc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    fccc:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    fcce:	687b      	ldr	r3, [r7, #4]
    fcd0:	681a      	ldr	r2, [r3, #0]
    fcd2:	687b      	ldr	r3, [r7, #4]
    fcd4:	689b      	ldr	r3, [r3, #8]
    fcd6:	4413      	add	r3, r2
    fcd8:	461a      	mov	r2, r3
    fcda:	7dfb      	ldrb	r3, [r7, #23]
    fcdc:	2101      	movs	r1, #1
    fcde:	4618      	mov	r0, r3
    fce0:	4b37      	ldr	r3, [pc, #220]	; (fdc0 <_usb_d_dev_in_next+0x1fc>)
    fce2:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    fce4:	8bfa      	ldrh	r2, [r7, #30]
    fce6:	7df8      	ldrb	r0, [r7, #23]
    fce8:	2300      	movs	r3, #0
    fcea:	2101      	movs	r1, #1
    fcec:	4c35      	ldr	r4, [pc, #212]	; (fdc4 <_usb_d_dev_in_next+0x200>)
    fcee:	47a0      	blx	r4
		goto _in_tx_exec;
    fcf0:	e041      	b.n	fd76 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    fcf2:	687b      	ldr	r3, [r7, #4]
    fcf4:	7cdb      	ldrb	r3, [r3, #19]
    fcf6:	f003 0310 	and.w	r3, r3, #16
    fcfa:	b2db      	uxtb	r3, r3
    fcfc:	2b00      	cmp	r3, #0
    fcfe:	d00b      	beq.n	fd18 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    fd00:	687a      	ldr	r2, [r7, #4]
    fd02:	7cd3      	ldrb	r3, [r2, #19]
    fd04:	f36f 1304 	bfc	r3, #4, #1
    fd08:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    fd0a:	7df8      	ldrb	r0, [r7, #23]
    fd0c:	2300      	movs	r3, #0
    fd0e:	2200      	movs	r2, #0
    fd10:	2101      	movs	r1, #1
    fd12:	4c2c      	ldr	r4, [pc, #176]	; (fdc4 <_usb_d_dev_in_next+0x200>)
    fd14:	47a0      	blx	r4
		goto _in_tx_exec;
    fd16:	e02e      	b.n	fd76 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    fd18:	7afb      	ldrb	r3, [r7, #11]
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d006      	beq.n	fd2c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    fd1e:	7dfb      	ldrb	r3, [r7, #23]
    fd20:	224b      	movs	r2, #75	; 0x4b
    fd22:	4619      	mov	r1, r3
    fd24:	69b8      	ldr	r0, [r7, #24]
    fd26:	4b28      	ldr	r3, [pc, #160]	; (fdc8 <_usb_d_dev_in_next+0x204>)
    fd28:	4798      	blx	r3
    fd2a:	e005      	b.n	fd38 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    fd2c:	7dfb      	ldrb	r3, [r7, #23]
    fd2e:	224a      	movs	r2, #74	; 0x4a
    fd30:	4619      	mov	r1, r3
    fd32:	69b8      	ldr	r0, [r7, #24]
    fd34:	4b24      	ldr	r3, [pc, #144]	; (fdc8 <_usb_d_dev_in_next+0x204>)
    fd36:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	8a1b      	ldrh	r3, [r3, #16]
    fd3c:	89ba      	ldrh	r2, [r7, #12]
    fd3e:	429a      	cmp	r2, r3
    fd40:	d114      	bne.n	fd6c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    fd42:	687a      	ldr	r2, [r7, #4]
    fd44:	7cd3      	ldrb	r3, [r2, #19]
    fd46:	f36f 1386 	bfc	r3, #6, #1
    fd4a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    fd4c:	4b1f      	ldr	r3, [pc, #124]	; (fdcc <_usb_d_dev_in_next+0x208>)
    fd4e:	68db      	ldr	r3, [r3, #12]
    fd50:	687a      	ldr	r2, [r7, #4]
    fd52:	7c90      	ldrb	r0, [r2, #18]
    fd54:	687a      	ldr	r2, [r7, #4]
    fd56:	6892      	ldr	r2, [r2, #8]
    fd58:	4611      	mov	r1, r2
    fd5a:	4798      	blx	r3
    fd5c:	4603      	mov	r3, r0
    fd5e:	2b00      	cmp	r3, #0
    fd60:	d124      	bne.n	fdac <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    fd62:	687a      	ldr	r2, [r7, #4]
    fd64:	7cd3      	ldrb	r3, [r2, #19]
    fd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd6a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    fd6c:	2100      	movs	r1, #0
    fd6e:	6878      	ldr	r0, [r7, #4]
    fd70:	4b17      	ldr	r3, [pc, #92]	; (fdd0 <_usb_d_dev_in_next+0x20c>)
    fd72:	4798      	blx	r3
	return;
    fd74:	e01b      	b.n	fdae <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    fd76:	78fb      	ldrb	r3, [r7, #3]
    fd78:	f083 0301 	eor.w	r3, r3, #1
    fd7c:	b2db      	uxtb	r3, r3
    fd7e:	2b00      	cmp	r3, #0
    fd80:	d00d      	beq.n	fd9e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    fd82:	7afb      	ldrb	r3, [r7, #11]
    fd84:	2b00      	cmp	r3, #0
    fd86:	d002      	beq.n	fd8e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    fd88:	234e      	movs	r3, #78	; 0x4e
    fd8a:	777b      	strb	r3, [r7, #29]
    fd8c:	e001      	b.n	fd92 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    fd8e:	234a      	movs	r3, #74	; 0x4a
    fd90:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    fd92:	7f7a      	ldrb	r2, [r7, #29]
    fd94:	7dfb      	ldrb	r3, [r7, #23]
    fd96:	4619      	mov	r1, r3
    fd98:	69b8      	ldr	r0, [r7, #24]
    fd9a:	4b0e      	ldr	r3, [pc, #56]	; (fdd4 <_usb_d_dev_in_next+0x210>)
    fd9c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    fd9e:	7dfb      	ldrb	r3, [r7, #23]
    fda0:	2201      	movs	r2, #1
    fda2:	2101      	movs	r1, #1
    fda4:	4618      	mov	r0, r3
    fda6:	4b0c      	ldr	r3, [pc, #48]	; (fdd8 <_usb_d_dev_in_next+0x214>)
    fda8:	4798      	blx	r3
    fdaa:	e000      	b.n	fdae <_usb_d_dev_in_next+0x1ea>
			return;
    fdac:	bf00      	nop
}
    fdae:	3724      	adds	r7, #36	; 0x24
    fdb0:	46bd      	mov	sp, r7
    fdb2:	bd90      	pop	{r4, r7, pc}
    fdb4:	20001e2c 	.word	0x20001e2c
    fdb8:	0000f5bd 	.word	0x0000f5bd
    fdbc:	00013fd5 	.word	0x00013fd5
    fdc0:	0000f5e9 	.word	0x0000f5e9
    fdc4:	0000f731 	.word	0x0000f731
    fdc8:	0000eec9 	.word	0x0000eec9
    fdcc:	20001d64 	.word	0x20001d64
    fdd0:	00010eed 	.word	0x00010eed
    fdd4:	0000ee9d 	.word	0x0000ee9d
    fdd8:	0000f7e9 	.word	0x0000f7e9

0000fddc <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    fddc:	b590      	push	{r4, r7, lr}
    fdde:	b08b      	sub	sp, #44	; 0x2c
    fde0:	af00      	add	r7, sp, #0
    fde2:	6078      	str	r0, [r7, #4]
    fde4:	460b      	mov	r3, r1
    fde6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    fde8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fdec:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    fdee:	687b      	ldr	r3, [r7, #4]
    fdf0:	7c9b      	ldrb	r3, [r3, #18]
    fdf2:	f003 030f 	and.w	r3, r3, #15
    fdf6:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    fdf8:	7ffb      	ldrb	r3, [r7, #31]
    fdfa:	015b      	lsls	r3, r3, #5
    fdfc:	4a94      	ldr	r2, [pc, #592]	; (10050 <STACK_SIZE+0x50>)
    fdfe:	4413      	add	r3, r2
    fe00:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    fe02:	78fb      	ldrb	r3, [r7, #3]
    fe04:	2b00      	cmp	r3, #0
    fe06:	d005      	beq.n	fe14 <_usb_d_dev_out_next+0x38>
    fe08:	69bb      	ldr	r3, [r7, #24]
    fe0a:	685b      	ldr	r3, [r3, #4]
    fe0c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    fe10:	b29b      	uxth	r3, r3
    fe12:	e000      	b.n	fe16 <_usb_d_dev_out_next+0x3a>
    fe14:	2300      	movs	r3, #0
    fe16:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    fe18:	78fb      	ldrb	r3, [r7, #3]
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d005      	beq.n	fe2a <_usb_d_dev_out_next+0x4e>
    fe1e:	69bb      	ldr	r3, [r7, #24]
    fe20:	685b      	ldr	r3, [r3, #4]
    fe22:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fe26:	b29b      	uxth	r3, r3
    fe28:	e000      	b.n	fe2c <_usb_d_dev_out_next+0x50>
    fe2a:	2300      	movs	r3, #0
    fe2c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    fe2e:	687b      	ldr	r3, [r7, #4]
    fe30:	8a1b      	ldrh	r3, [r3, #16]
    fe32:	f240 32ff 	movw	r2, #1023	; 0x3ff
    fe36:	4293      	cmp	r3, r2
    fe38:	d004      	beq.n	fe44 <_usb_d_dev_out_next+0x68>
    fe3a:	687b      	ldr	r3, [r7, #4]
    fe3c:	8a1b      	ldrh	r3, [r3, #16]
    fe3e:	3b01      	subs	r3, #1
    fe40:	b29b      	uxth	r3, r3
    fe42:	e001      	b.n	fe48 <_usb_d_dev_out_next+0x6c>
    fe44:	f240 33ff 	movw	r3, #1023	; 0x3ff
    fe48:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    fe4a:	8aba      	ldrh	r2, [r7, #20]
    fe4c:	8a7b      	ldrh	r3, [r7, #18]
    fe4e:	4013      	ands	r3, r2
    fe50:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    fe52:	687b      	ldr	r3, [r7, #4]
    fe54:	7cdb      	ldrb	r3, [r3, #19]
    fe56:	f003 0307 	and.w	r3, r3, #7
    fe5a:	b2db      	uxtb	r3, r3
    fe5c:	2b01      	cmp	r3, #1
    fe5e:	bf0c      	ite	eq
    fe60:	2301      	moveq	r3, #1
    fe62:	2300      	movne	r3, #0
    fe64:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    fe66:	78fb      	ldrb	r3, [r7, #3]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d004      	beq.n	fe76 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    fe6c:	7ffb      	ldrb	r3, [r7, #31]
    fe6e:	2100      	movs	r1, #0
    fe70:	4618      	mov	r0, r3
    fe72:	4b78      	ldr	r3, [pc, #480]	; (10054 <STACK_SIZE+0x54>)
    fe74:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    fe76:	687b      	ldr	r3, [r7, #4]
    fe78:	7cdb      	ldrb	r3, [r3, #19]
    fe7a:	f003 0320 	and.w	r3, r3, #32
    fe7e:	b2db      	uxtb	r3, r3
    fe80:	2b00      	cmp	r3, #0
    fe82:	d01c      	beq.n	febe <_usb_d_dev_out_next+0xe2>
    fe84:	687b      	ldr	r3, [r7, #4]
    fe86:	685b      	ldr	r3, [r3, #4]
    fe88:	2b00      	cmp	r3, #0
    fe8a:	d018      	beq.n	febe <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	685b      	ldr	r3, [r3, #4]
    fe90:	b29a      	uxth	r2, r3
    fe92:	687b      	ldr	r3, [r7, #4]
    fe94:	689b      	ldr	r3, [r3, #8]
    fe96:	b29b      	uxth	r3, r3
    fe98:	1ad3      	subs	r3, r2, r3
    fe9a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    fe9c:	687b      	ldr	r3, [r7, #4]
    fe9e:	681a      	ldr	r2, [r3, #0]
    fea0:	687b      	ldr	r3, [r7, #4]
    fea2:	689b      	ldr	r3, [r3, #8]
    fea4:	18d0      	adds	r0, r2, r3
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	68d9      	ldr	r1, [r3, #12]
    feaa:	89ba      	ldrh	r2, [r7, #12]
    feac:	8a3b      	ldrh	r3, [r7, #16]
    feae:	429a      	cmp	r2, r3
    feb0:	d901      	bls.n	feb6 <_usb_d_dev_out_next+0xda>
    feb2:	8a3b      	ldrh	r3, [r7, #16]
    feb4:	e000      	b.n	feb8 <_usb_d_dev_out_next+0xdc>
    feb6:	89bb      	ldrh	r3, [r7, #12]
    feb8:	461a      	mov	r2, r3
    feba:	4b67      	ldr	r3, [pc, #412]	; (10058 <STACK_SIZE+0x58>)
    febc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    febe:	687b      	ldr	r3, [r7, #4]
    fec0:	685b      	ldr	r3, [r3, #4]
    fec2:	2b00      	cmp	r3, #0
    fec4:	d121      	bne.n	ff0a <_usb_d_dev_out_next+0x12e>
    fec6:	687b      	ldr	r3, [r7, #4]
    fec8:	7cdb      	ldrb	r3, [r3, #19]
    feca:	f003 0310 	and.w	r3, r3, #16
    fece:	b2db      	uxtb	r3, r3
    fed0:	2b00      	cmp	r3, #0
    fed2:	d01a      	beq.n	ff0a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    fed4:	687a      	ldr	r2, [r7, #4]
    fed6:	7cd3      	ldrb	r3, [r2, #19]
    fed8:	f36f 1304 	bfc	r3, #4, #1
    fedc:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    fede:	687a      	ldr	r2, [r7, #4]
    fee0:	7cd3      	ldrb	r3, [r2, #19]
    fee2:	f043 0320 	orr.w	r3, r3, #32
    fee6:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    fee8:	687b      	ldr	r3, [r7, #4]
    feea:	68db      	ldr	r3, [r3, #12]
    feec:	461a      	mov	r2, r3
    feee:	7ffb      	ldrb	r3, [r7, #31]
    fef0:	2100      	movs	r1, #0
    fef2:	4618      	mov	r0, r3
    fef4:	4b59      	ldr	r3, [pc, #356]	; (1005c <STACK_SIZE+0x5c>)
    fef6:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    fef8:	687b      	ldr	r3, [r7, #4]
    fefa:	8a1b      	ldrh	r3, [r3, #16]
    fefc:	461a      	mov	r2, r3
    fefe:	7ff8      	ldrb	r0, [r7, #31]
    ff00:	2300      	movs	r3, #0
    ff02:	2100      	movs	r1, #0
    ff04:	4c56      	ldr	r4, [pc, #344]	; (10060 <STACK_SIZE+0x60>)
    ff06:	47a0      	blx	r4
		goto _out_rx_exec;
    ff08:	e090      	b.n	1002c <STACK_SIZE+0x2c>
	} else if (isr && last_pkt < ept->size) {
    ff0a:	78fb      	ldrb	r3, [r7, #3]
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	d010      	beq.n	ff32 <_usb_d_dev_out_next+0x156>
    ff10:	687b      	ldr	r3, [r7, #4]
    ff12:	8a1b      	ldrh	r3, [r3, #16]
    ff14:	8a3a      	ldrh	r2, [r7, #16]
    ff16:	429a      	cmp	r2, r3
    ff18:	d20b      	bcs.n	ff32 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    ff1a:	687a      	ldr	r2, [r7, #4]
    ff1c:	7cd3      	ldrb	r3, [r2, #19]
    ff1e:	f36f 1304 	bfc	r3, #4, #1
    ff22:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ff24:	687b      	ldr	r3, [r7, #4]
    ff26:	689a      	ldr	r2, [r3, #8]
    ff28:	8abb      	ldrh	r3, [r7, #20]
    ff2a:	441a      	add	r2, r3
    ff2c:	687b      	ldr	r3, [r7, #4]
    ff2e:	609a      	str	r2, [r3, #8]
    ff30:	e05c      	b.n	ffec <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ff32:	687b      	ldr	r3, [r7, #4]
    ff34:	689a      	ldr	r2, [r3, #8]
    ff36:	8afb      	ldrh	r3, [r7, #22]
    ff38:	441a      	add	r2, r3
    ff3a:	687b      	ldr	r3, [r7, #4]
    ff3c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ff3e:	687b      	ldr	r3, [r7, #4]
    ff40:	689a      	ldr	r2, [r3, #8]
    ff42:	687b      	ldr	r3, [r7, #4]
    ff44:	685b      	ldr	r3, [r3, #4]
    ff46:	429a      	cmp	r2, r3
    ff48:	d250      	bcs.n	ffec <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ff4a:	687b      	ldr	r3, [r7, #4]
    ff4c:	685b      	ldr	r3, [r3, #4]
    ff4e:	b29a      	uxth	r2, r3
    ff50:	687b      	ldr	r3, [r7, #4]
    ff52:	689b      	ldr	r3, [r3, #8]
    ff54:	b29b      	uxth	r3, r3
    ff56:	1ad3      	subs	r3, r2, r3
    ff58:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ff5a:	687b      	ldr	r3, [r7, #4]
    ff5c:	7cdb      	ldrb	r3, [r3, #19]
    ff5e:	f003 0320 	and.w	r3, r3, #32
    ff62:	b2db      	uxtb	r3, r3
    ff64:	2b00      	cmp	r3, #0
    ff66:	d010      	beq.n	ff8a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ff68:	687b      	ldr	r3, [r7, #4]
    ff6a:	8a1b      	ldrh	r3, [r3, #16]
    ff6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ff6e:	429a      	cmp	r2, r3
    ff70:	d902      	bls.n	ff78 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ff72:	687b      	ldr	r3, [r7, #4]
    ff74:	8a1b      	ldrh	r3, [r3, #16]
    ff76:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ff78:	687b      	ldr	r3, [r7, #4]
    ff7a:	68db      	ldr	r3, [r3, #12]
    ff7c:	461a      	mov	r2, r3
    ff7e:	7ffb      	ldrb	r3, [r7, #31]
    ff80:	2100      	movs	r1, #0
    ff82:	4618      	mov	r0, r3
    ff84:	4b35      	ldr	r3, [pc, #212]	; (1005c <STACK_SIZE+0x5c>)
    ff86:	4798      	blx	r3
    ff88:	e029      	b.n	ffde <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ff8a:	687b      	ldr	r3, [r7, #4]
    ff8c:	8a1b      	ldrh	r3, [r3, #16]
    ff8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ff90:	429a      	cmp	r2, r3
    ff92:	d90f      	bls.n	ffb4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ff94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ff96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ff9a:	d903      	bls.n	ffa4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ff9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ffa0:	84fb      	strh	r3, [r7, #38]	; 0x26
    ffa2:	e011      	b.n	ffc8 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    ffa4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ffa6:	8a7b      	ldrh	r3, [r7, #18]
    ffa8:	4013      	ands	r3, r2
    ffaa:	b29b      	uxth	r3, r3
    ffac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ffae:	1ad3      	subs	r3, r2, r3
    ffb0:	84fb      	strh	r3, [r7, #38]	; 0x26
    ffb2:	e009      	b.n	ffc8 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	8a1b      	ldrh	r3, [r3, #16]
    ffb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ffba:	429a      	cmp	r2, r3
    ffbc:	d204      	bcs.n	ffc8 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    ffbe:	687a      	ldr	r2, [r7, #4]
    ffc0:	7cd3      	ldrb	r3, [r2, #19]
    ffc2:	f043 0320 	orr.w	r3, r3, #32
    ffc6:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	681a      	ldr	r2, [r3, #0]
    ffcc:	687b      	ldr	r3, [r7, #4]
    ffce:	689b      	ldr	r3, [r3, #8]
    ffd0:	4413      	add	r3, r2
    ffd2:	461a      	mov	r2, r3
    ffd4:	7ffb      	ldrb	r3, [r7, #31]
    ffd6:	2100      	movs	r1, #0
    ffd8:	4618      	mov	r0, r3
    ffda:	4b20      	ldr	r3, [pc, #128]	; (1005c <STACK_SIZE+0x5c>)
    ffdc:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    ffde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ffe0:	7ff8      	ldrb	r0, [r7, #31]
    ffe2:	2300      	movs	r3, #0
    ffe4:	2100      	movs	r1, #0
    ffe6:	4c1e      	ldr	r4, [pc, #120]	; (10060 <STACK_SIZE+0x60>)
    ffe8:	47a0      	blx	r4
			goto _out_rx_exec;
    ffea:	e01f      	b.n	1002c <STACK_SIZE+0x2c>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ffec:	7bfb      	ldrb	r3, [r7, #15]
    ffee:	2b00      	cmp	r3, #0
    fff0:	d006      	beq.n	10000 <STACK_SIZE>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    fff2:	7ffb      	ldrb	r3, [r7, #31]
    fff4:	222d      	movs	r2, #45	; 0x2d
    fff6:	4619      	mov	r1, r3
    fff8:	6a38      	ldr	r0, [r7, #32]
    fffa:	4b1a      	ldr	r3, [pc, #104]	; (10064 <STACK_SIZE+0x64>)
    fffc:	4798      	blx	r3
    fffe:	e005      	b.n	1000c <STACK_SIZE+0xc>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
   10000:	7ffb      	ldrb	r3, [r7, #31]
   10002:	2225      	movs	r2, #37	; 0x25
   10004:	4619      	mov	r1, r3
   10006:	6a38      	ldr	r0, [r7, #32]
   10008:	4b16      	ldr	r3, [pc, #88]	; (10064 <STACK_SIZE+0x64>)
   1000a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
   1000c:	7ffb      	ldrb	r3, [r7, #31]
   1000e:	2b00      	cmp	r3, #0
   10010:	d107      	bne.n	10022 <STACK_SIZE+0x22>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   10012:	687b      	ldr	r3, [r7, #4]
   10014:	68db      	ldr	r3, [r3, #12]
   10016:	461a      	mov	r2, r3
   10018:	7ffb      	ldrb	r3, [r7, #31]
   1001a:	2100      	movs	r1, #0
   1001c:	4618      	mov	r0, r3
   1001e:	4b0f      	ldr	r3, [pc, #60]	; (1005c <STACK_SIZE+0x5c>)
   10020:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
   10022:	2100      	movs	r1, #0
   10024:	6878      	ldr	r0, [r7, #4]
   10026:	4b10      	ldr	r3, [pc, #64]	; (10068 <STACK_SIZE+0x68>)
   10028:	4798      	blx	r3
	return;
   1002a:	e031      	b.n	10090 <STACK_SIZE+0x90>

_out_rx_exec:
	if (!isr) {
   1002c:	78fb      	ldrb	r3, [r7, #3]
   1002e:	f083 0301 	eor.w	r3, r3, #1
   10032:	b2db      	uxtb	r3, r3
   10034:	2b00      	cmp	r3, #0
   10036:	d025      	beq.n	10084 <STACK_SIZE+0x84>
		if (is_ctrl) {
   10038:	7bfb      	ldrb	r3, [r7, #15]
   1003a:	2b00      	cmp	r3, #0
   1003c:	d018      	beq.n	10070 <STACK_SIZE+0x70>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
   1003e:	7ffb      	ldrb	r3, [r7, #31]
   10040:	2101      	movs	r1, #1
   10042:	4618      	mov	r0, r3
   10044:	4b09      	ldr	r3, [pc, #36]	; (1006c <STACK_SIZE+0x6c>)
   10046:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   10048:	232d      	movs	r3, #45	; 0x2d
   1004a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   1004e:	e012      	b.n	10076 <STACK_SIZE+0x76>
   10050:	20001e2c 	.word	0x20001e2c
   10054:	0000f5bd 	.word	0x0000f5bd
   10058:	00013fd5 	.word	0x00013fd5
   1005c:	0000f5e9 	.word	0x0000f5e9
   10060:	0000f771 	.word	0x0000f771
   10064:	0000eec9 	.word	0x0000eec9
   10068:	00010eed 	.word	0x00010eed
   1006c:	0000f7b1 	.word	0x0000f7b1
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
   10070:	2325      	movs	r3, #37	; 0x25
   10072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
   10076:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
   1007a:	7ffb      	ldrb	r3, [r7, #31]
   1007c:	4619      	mov	r1, r3
   1007e:	6a38      	ldr	r0, [r7, #32]
   10080:	4b05      	ldr	r3, [pc, #20]	; (10098 <STACK_SIZE+0x98>)
   10082:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
   10084:	7ffb      	ldrb	r3, [r7, #31]
   10086:	2201      	movs	r2, #1
   10088:	2100      	movs	r1, #0
   1008a:	4618      	mov	r0, r3
   1008c:	4b03      	ldr	r3, [pc, #12]	; (1009c <STACK_SIZE+0x9c>)
   1008e:	4798      	blx	r3
}
   10090:	372c      	adds	r7, #44	; 0x2c
   10092:	46bd      	mov	sp, r7
   10094:	bd90      	pop	{r4, r7, pc}
   10096:	bf00      	nop
   10098:	0000ee9d 	.word	0x0000ee9d
   1009c:	0000f841 	.word	0x0000f841

000100a0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
   100a0:	b580      	push	{r7, lr}
   100a2:	b084      	sub	sp, #16
   100a4:	af00      	add	r7, sp, #0
   100a6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
   100a8:	687b      	ldr	r3, [r7, #4]
   100aa:	7c9b      	ldrb	r3, [r3, #18]
   100ac:	f003 030f 	and.w	r3, r3, #15
   100b0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   100b2:	687b      	ldr	r3, [r7, #4]
   100b4:	7cdb      	ldrb	r3, [r3, #19]
   100b6:	f003 0307 	and.w	r3, r3, #7
   100ba:	b2db      	uxtb	r3, r3
   100bc:	2b01      	cmp	r3, #1
   100be:	bf0c      	ite	eq
   100c0:	2301      	moveq	r3, #1
   100c2:	2300      	movne	r3, #0
   100c4:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
   100c6:	7bbb      	ldrb	r3, [r7, #14]
   100c8:	f083 0301 	eor.w	r3, r3, #1
   100cc:	b2db      	uxtb	r3, r3
   100ce:	2b00      	cmp	r3, #0
   100d0:	d008      	beq.n	100e4 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
   100d2:	7bfb      	ldrb	r3, [r7, #15]
   100d4:	4618      	mov	r0, r3
   100d6:	4b20      	ldr	r3, [pc, #128]	; (10158 <_usb_d_dev_handle_setup+0xb8>)
   100d8:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
   100da:	7bfb      	ldrb	r3, [r7, #15]
   100dc:	4618      	mov	r0, r3
   100de:	4b1f      	ldr	r3, [pc, #124]	; (1015c <_usb_d_dev_handle_setup+0xbc>)
   100e0:	4798      	blx	r3
		return;
   100e2:	e036      	b.n	10152 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
   100e4:	687b      	ldr	r3, [r7, #4]
   100e6:	7cdb      	ldrb	r3, [r3, #19]
   100e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   100ec:	b2db      	uxtb	r3, r3
   100ee:	2b00      	cmp	r3, #0
   100f0:	d010      	beq.n	10114 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
   100f2:	687a      	ldr	r2, [r7, #4]
   100f4:	7cd3      	ldrb	r3, [r2, #19]
   100f6:	f36f 1386 	bfc	r3, #6, #1
   100fa:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
   100fc:	7bfb      	ldrb	r3, [r7, #15]
   100fe:	2200      	movs	r2, #0
   10100:	2101      	movs	r1, #1
   10102:	4618      	mov	r0, r3
   10104:	4b16      	ldr	r3, [pc, #88]	; (10160 <_usb_d_dev_handle_setup+0xc0>)
   10106:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
   10108:	7bfb      	ldrb	r3, [r7, #15]
   1010a:	2200      	movs	r2, #0
   1010c:	2100      	movs	r1, #0
   1010e:	4618      	mov	r0, r3
   10110:	4b14      	ldr	r3, [pc, #80]	; (10164 <_usb_d_dev_handle_setup+0xc4>)
   10112:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
   10114:	687a      	ldr	r2, [r7, #4]
   10116:	7cd3      	ldrb	r3, [r2, #19]
   10118:	f36f 03c3 	bfc	r3, #3, #1
   1011c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
   1011e:	7bfb      	ldrb	r3, [r7, #15]
   10120:	2100      	movs	r1, #0
   10122:	4618      	mov	r0, r3
   10124:	4b10      	ldr	r3, [pc, #64]	; (10168 <_usb_d_dev_handle_setup+0xc8>)
   10126:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
   10128:	7bfb      	ldrb	r3, [r7, #15]
   1012a:	2101      	movs	r1, #1
   1012c:	4618      	mov	r0, r3
   1012e:	4b0e      	ldr	r3, [pc, #56]	; (10168 <_usb_d_dev_handle_setup+0xc8>)
   10130:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
   10132:	7bfb      	ldrb	r3, [r7, #15]
   10134:	216f      	movs	r1, #111	; 0x6f
   10136:	4618      	mov	r0, r3
   10138:	4b0c      	ldr	r3, [pc, #48]	; (1016c <_usb_d_dev_handle_setup+0xcc>)
   1013a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
   1013c:	7bfb      	ldrb	r3, [r7, #15]
   1013e:	216f      	movs	r1, #111	; 0x6f
   10140:	4618      	mov	r0, r3
   10142:	4b0b      	ldr	r3, [pc, #44]	; (10170 <_usb_d_dev_handle_setup+0xd0>)
   10144:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
   10146:	4b0b      	ldr	r3, [pc, #44]	; (10174 <_usb_d_dev_handle_setup+0xd4>)
   10148:	689b      	ldr	r3, [r3, #8]
   1014a:	687a      	ldr	r2, [r7, #4]
   1014c:	7c92      	ldrb	r2, [r2, #18]
   1014e:	4610      	mov	r0, r2
   10150:	4798      	blx	r3
}
   10152:	3710      	adds	r7, #16
   10154:	46bd      	mov	sp, r7
   10156:	bd80      	pop	{r7, pc}
   10158:	0000f545 	.word	0x0000f545
   1015c:	0000f4f1 	.word	0x0000f4f1
   10160:	0000f7e9 	.word	0x0000f7e9
   10164:	0000f841 	.word	0x0000f841
   10168:	0000f7b1 	.word	0x0000f7b1
   1016c:	0000f2f1 	.word	0x0000f2f1
   10170:	0000f341 	.word	0x0000f341
   10174:	20001d64 	.word	0x20001d64

00010178 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
   10178:	b580      	push	{r7, lr}
   1017a:	b084      	sub	sp, #16
   1017c:	af00      	add	r7, sp, #0
   1017e:	6078      	str	r0, [r7, #4]
   10180:	460b      	mov	r3, r1
   10182:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10184:	687b      	ldr	r3, [r7, #4]
   10186:	7c9b      	ldrb	r3, [r3, #18]
   10188:	f003 030f 	and.w	r3, r3, #15
   1018c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
   1018e:	78f9      	ldrb	r1, [r7, #3]
   10190:	7bfb      	ldrb	r3, [r7, #15]
   10192:	2200      	movs	r2, #0
   10194:	4618      	mov	r0, r3
   10196:	4b07      	ldr	r3, [pc, #28]	; (101b4 <_usb_d_dev_handle_stall+0x3c>)
   10198:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   1019a:	4b07      	ldr	r3, [pc, #28]	; (101b8 <_usb_d_dev_handle_stall+0x40>)
   1019c:	691b      	ldr	r3, [r3, #16]
   1019e:	687a      	ldr	r2, [r7, #4]
   101a0:	7c90      	ldrb	r0, [r2, #18]
   101a2:	687a      	ldr	r2, [r7, #4]
   101a4:	6892      	ldr	r2, [r2, #8]
   101a6:	2101      	movs	r1, #1
   101a8:	4798      	blx	r3
}
   101aa:	bf00      	nop
   101ac:	3710      	adds	r7, #16
   101ae:	46bd      	mov	sp, r7
   101b0:	bd80      	pop	{r7, pc}
   101b2:	bf00      	nop
   101b4:	0000f4a5 	.word	0x0000f4a5
   101b8:	20001d64 	.word	0x20001d64

000101bc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
   101bc:	b580      	push	{r7, lr}
   101be:	b088      	sub	sp, #32
   101c0:	af00      	add	r7, sp, #0
   101c2:	6078      	str	r0, [r7, #4]
   101c4:	460b      	mov	r3, r1
   101c6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
   101c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   101cc:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
   101ce:	687b      	ldr	r3, [r7, #4]
   101d0:	7c9b      	ldrb	r3, [r3, #18]
   101d2:	f003 030f 	and.w	r3, r3, #15
   101d6:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
   101d8:	4b61      	ldr	r3, [pc, #388]	; (10360 <_usb_d_dev_handle_trfail+0x1a4>)
   101da:	881b      	ldrh	r3, [r3, #0]
   101dc:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   101de:	7efb      	ldrb	r3, [r7, #27]
   101e0:	015b      	lsls	r3, r3, #5
   101e2:	4a60      	ldr	r2, [pc, #384]	; (10364 <_usb_d_dev_handle_trfail+0x1a8>)
   101e4:	4413      	add	r3, r2
   101e6:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
   101e8:	78fb      	ldrb	r3, [r7, #3]
   101ea:	2b00      	cmp	r3, #0
   101ec:	d006      	beq.n	101fc <_usb_d_dev_handle_trfail+0x40>
   101ee:	7efb      	ldrb	r3, [r7, #27]
   101f0:	4619      	mov	r1, r3
   101f2:	69f8      	ldr	r0, [r7, #28]
   101f4:	4b5c      	ldr	r3, [pc, #368]	; (10368 <_usb_d_dev_handle_trfail+0x1ac>)
   101f6:	4798      	blx	r3
   101f8:	4603      	mov	r3, r0
   101fa:	e005      	b.n	10208 <_usb_d_dev_handle_trfail+0x4c>
   101fc:	7efb      	ldrb	r3, [r7, #27]
   101fe:	4619      	mov	r1, r3
   10200:	69f8      	ldr	r0, [r7, #28]
   10202:	4b5a      	ldr	r3, [pc, #360]	; (1036c <_usb_d_dev_handle_trfail+0x1b0>)
   10204:	4798      	blx	r3
   10206:	4603      	mov	r3, r0
   10208:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	7cdb      	ldrb	r3, [r3, #19]
   1020e:	f003 0307 	and.w	r3, r3, #7
   10212:	b2db      	uxtb	r3, r3
   10214:	2b01      	cmp	r3, #1
   10216:	bf0c      	ite	eq
   10218:	2301      	moveq	r3, #1
   1021a:	2300      	movne	r3, #0
   1021c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
   1021e:	78fb      	ldrb	r3, [r7, #3]
   10220:	011b      	lsls	r3, r3, #4
   10222:	697a      	ldr	r2, [r7, #20]
   10224:	4413      	add	r3, r2
   10226:	7a9b      	ldrb	r3, [r3, #10]
   10228:	b2db      	uxtb	r3, r3
   1022a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1022c:	7cfb      	ldrb	r3, [r7, #19]
   1022e:	2b02      	cmp	r3, #2
   10230:	d12f      	bne.n	10292 <_usb_d_dev_handle_trfail+0xd6>
   10232:	7b3b      	ldrb	r3, [r7, #12]
   10234:	f003 0301 	and.w	r3, r3, #1
   10238:	b2db      	uxtb	r3, r3
   1023a:	2b00      	cmp	r3, #0
   1023c:	d029      	beq.n	10292 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1023e:	78fb      	ldrb	r3, [r7, #3]
   10240:	011b      	lsls	r3, r3, #4
   10242:	697a      	ldr	r2, [r7, #20]
   10244:	441a      	add	r2, r3
   10246:	7a93      	ldrb	r3, [r2, #10]
   10248:	f36f 0300 	bfc	r3, #0, #1
   1024c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
   1024e:	78fb      	ldrb	r3, [r7, #3]
   10250:	f107 0220 	add.w	r2, r7, #32
   10254:	4413      	add	r3, r2
   10256:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   1025a:	7efb      	ldrb	r3, [r7, #27]
   1025c:	4619      	mov	r1, r3
   1025e:	69f8      	ldr	r0, [r7, #28]
   10260:	4b43      	ldr	r3, [pc, #268]	; (10370 <_usb_d_dev_handle_trfail+0x1b4>)
   10262:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
   10264:	78fb      	ldrb	r3, [r7, #3]
   10266:	f107 0220 	add.w	r2, r7, #32
   1026a:	4413      	add	r3, r2
   1026c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   10270:	7efb      	ldrb	r3, [r7, #27]
   10272:	4619      	mov	r1, r3
   10274:	69f8      	ldr	r0, [r7, #28]
   10276:	4b3f      	ldr	r3, [pc, #252]	; (10374 <_usb_d_dev_handle_trfail+0x1b8>)
   10278:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
   1027a:	78fb      	ldrb	r3, [r7, #3]
   1027c:	2b00      	cmp	r3, #0
   1027e:	bf14      	ite	ne
   10280:	2301      	movne	r3, #1
   10282:	2300      	moveq	r3, #0
   10284:	b2db      	uxtb	r3, r3
   10286:	2204      	movs	r2, #4
   10288:	4619      	mov	r1, r3
   1028a:	6878      	ldr	r0, [r7, #4]
   1028c:	4b3a      	ldr	r3, [pc, #232]	; (10378 <_usb_d_dev_handle_trfail+0x1bc>)
   1028e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
   10290:	e062      	b.n	10358 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
   10292:	7b3b      	ldrb	r3, [r7, #12]
   10294:	f003 0302 	and.w	r3, r3, #2
   10298:	b2db      	uxtb	r3, r3
   1029a:	2b00      	cmp	r3, #0
   1029c:	d040      	beq.n	10320 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1029e:	78fb      	ldrb	r3, [r7, #3]
   102a0:	011b      	lsls	r3, r3, #4
   102a2:	697a      	ldr	r2, [r7, #20]
   102a4:	441a      	add	r2, r3
   102a6:	7a93      	ldrb	r3, [r2, #10]
   102a8:	f36f 0341 	bfc	r3, #1, #1
   102ac:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
   102ae:	78fb      	ldrb	r3, [r7, #3]
   102b0:	f107 0220 	add.w	r2, r7, #32
   102b4:	4413      	add	r3, r2
   102b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   102ba:	7efb      	ldrb	r3, [r7, #27]
   102bc:	4619      	mov	r1, r3
   102be:	69f8      	ldr	r0, [r7, #28]
   102c0:	4b2b      	ldr	r3, [pc, #172]	; (10370 <_usb_d_dev_handle_trfail+0x1b4>)
   102c2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
   102c4:	78fb      	ldrb	r3, [r7, #3]
   102c6:	f107 0220 	add.w	r2, r7, #32
   102ca:	4413      	add	r3, r2
   102cc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   102d0:	7efb      	ldrb	r3, [r7, #27]
   102d2:	4619      	mov	r1, r3
   102d4:	69f8      	ldr	r0, [r7, #28]
   102d6:	4b27      	ldr	r3, [pc, #156]	; (10374 <_usb_d_dev_handle_trfail+0x1b8>)
   102d8:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   102da:	7cbb      	ldrb	r3, [r7, #18]
   102dc:	2b00      	cmp	r3, #0
   102de:	d03b      	beq.n	10358 <_usb_d_dev_handle_trfail+0x19c>
   102e0:	687b      	ldr	r3, [r7, #4]
   102e2:	7cdb      	ldrb	r3, [r3, #19]
   102e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   102e8:	b2db      	uxtb	r3, r3
   102ea:	2b00      	cmp	r3, #0
   102ec:	d034      	beq.n	10358 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   102ee:	687b      	ldr	r3, [r7, #4]
   102f0:	7cdb      	ldrb	r3, [r3, #19]
   102f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   102f6:	b2db      	uxtb	r3, r3
   102f8:	461a      	mov	r2, r3
   102fa:	78fb      	ldrb	r3, [r7, #3]
   102fc:	4293      	cmp	r3, r2
   102fe:	d02b      	beq.n	10358 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
   10300:	687b      	ldr	r3, [r7, #4]
   10302:	7cdb      	ldrb	r3, [r3, #19]
   10304:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   10308:	b2db      	uxtb	r3, r3
   1030a:	2b00      	cmp	r3, #0
   1030c:	bf14      	ite	ne
   1030e:	2301      	movne	r3, #1
   10310:	2300      	moveq	r3, #0
   10312:	b2db      	uxtb	r3, r3
   10314:	2200      	movs	r2, #0
   10316:	4619      	mov	r1, r3
   10318:	6878      	ldr	r0, [r7, #4]
   1031a:	4b17      	ldr	r3, [pc, #92]	; (10378 <_usb_d_dev_handle_trfail+0x1bc>)
   1031c:	4798      	blx	r3
}
   1031e:	e01b      	b.n	10358 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
   10320:	78fa      	ldrb	r2, [r7, #3]
   10322:	7efb      	ldrb	r3, [r7, #27]
   10324:	4611      	mov	r1, r2
   10326:	4618      	mov	r0, r3
   10328:	4b14      	ldr	r3, [pc, #80]	; (1037c <_usb_d_dev_handle_trfail+0x1c0>)
   1032a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
   1032c:	78fb      	ldrb	r3, [r7, #3]
   1032e:	f107 0220 	add.w	r2, r7, #32
   10332:	4413      	add	r3, r2
   10334:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   10338:	7efb      	ldrb	r3, [r7, #27]
   1033a:	4619      	mov	r1, r3
   1033c:	69f8      	ldr	r0, [r7, #28]
   1033e:	4b0c      	ldr	r3, [pc, #48]	; (10370 <_usb_d_dev_handle_trfail+0x1b4>)
   10340:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
   10342:	78fb      	ldrb	r3, [r7, #3]
   10344:	f107 0220 	add.w	r2, r7, #32
   10348:	4413      	add	r3, r2
   1034a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
   1034e:	7efb      	ldrb	r3, [r7, #27]
   10350:	4619      	mov	r1, r3
   10352:	69f8      	ldr	r0, [r7, #28]
   10354:	4b07      	ldr	r3, [pc, #28]	; (10374 <_usb_d_dev_handle_trfail+0x1b8>)
   10356:	4798      	blx	r3
}
   10358:	bf00      	nop
   1035a:	3720      	adds	r7, #32
   1035c:	46bd      	mov	sp, r7
   1035e:	bd80      	pop	{r7, pc}
   10360:	00015308 	.word	0x00015308
   10364:	20001e2c 	.word	0x20001e2c
   10368:	0000ef25 	.word	0x0000ef25
   1036c:	0000eef5 	.word	0x0000eef5
   10370:	0000edc9 	.word	0x0000edc9
   10374:	0000eec9 	.word	0x0000eec9
   10378:	00010f35 	.word	0x00010f35
   1037c:	0000f7b1 	.word	0x0000f7b1

00010380 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
   10380:	b580      	push	{r7, lr}
   10382:	b082      	sub	sp, #8
   10384:	af00      	add	r7, sp, #0
   10386:	6078      	str	r0, [r7, #4]
   10388:	460b      	mov	r3, r1
   1038a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1038c:	78fb      	ldrb	r3, [r7, #3]
   1038e:	f003 0310 	and.w	r3, r3, #16
   10392:	2b00      	cmp	r3, #0
   10394:	d003      	beq.n	1039e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
   10396:	6878      	ldr	r0, [r7, #4]
   10398:	4b0c      	ldr	r3, [pc, #48]	; (103cc <_usb_d_dev_trans_setup_isr+0x4c>)
   1039a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
   1039c:	e012      	b.n	103c4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1039e:	78fb      	ldrb	r3, [r7, #3]
   103a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
   103a4:	2b00      	cmp	r3, #0
   103a6:	d004      	beq.n	103b2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
   103a8:	2101      	movs	r1, #1
   103aa:	6878      	ldr	r0, [r7, #4]
   103ac:	4b08      	ldr	r3, [pc, #32]	; (103d0 <_usb_d_dev_trans_setup_isr+0x50>)
   103ae:	4798      	blx	r3
}
   103b0:	e008      	b.n	103c4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   103b2:	78fb      	ldrb	r3, [r7, #3]
   103b4:	f003 0320 	and.w	r3, r3, #32
   103b8:	2b00      	cmp	r3, #0
   103ba:	d003      	beq.n	103c4 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
   103bc:	2100      	movs	r1, #0
   103be:	6878      	ldr	r0, [r7, #4]
   103c0:	4b03      	ldr	r3, [pc, #12]	; (103d0 <_usb_d_dev_trans_setup_isr+0x50>)
   103c2:	4798      	blx	r3
}
   103c4:	bf00      	nop
   103c6:	3708      	adds	r7, #8
   103c8:	46bd      	mov	sp, r7
   103ca:	bd80      	pop	{r7, pc}
   103cc:	000100a1 	.word	0x000100a1
   103d0:	00010179 	.word	0x00010179

000103d4 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
   103d4:	b580      	push	{r7, lr}
   103d6:	b082      	sub	sp, #8
   103d8:	af00      	add	r7, sp, #0
   103da:	6078      	str	r0, [r7, #4]
   103dc:	460b      	mov	r3, r1
   103de:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   103e0:	78fb      	ldrb	r3, [r7, #3]
   103e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   103e6:	2b00      	cmp	r3, #0
   103e8:	d004      	beq.n	103f4 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
   103ea:	2101      	movs	r1, #1
   103ec:	6878      	ldr	r0, [r7, #4]
   103ee:	4b1a      	ldr	r3, [pc, #104]	; (10458 <_usb_d_dev_trans_in_isr+0x84>)
   103f0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
   103f2:	e02c      	b.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   103f4:	78fb      	ldrb	r3, [r7, #3]
   103f6:	f003 0308 	and.w	r3, r3, #8
   103fa:	2b00      	cmp	r3, #0
   103fc:	d004      	beq.n	10408 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
   103fe:	2101      	movs	r1, #1
   10400:	6878      	ldr	r0, [r7, #4]
   10402:	4b16      	ldr	r3, [pc, #88]	; (1045c <_usb_d_dev_trans_in_isr+0x88>)
   10404:	4798      	blx	r3
}
   10406:	e022      	b.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   10408:	78fb      	ldrb	r3, [r7, #3]
   1040a:	f003 0302 	and.w	r3, r3, #2
   1040e:	2b00      	cmp	r3, #0
   10410:	d004      	beq.n	1041c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
   10412:	2101      	movs	r1, #1
   10414:	6878      	ldr	r0, [r7, #4]
   10416:	4b12      	ldr	r3, [pc, #72]	; (10460 <_usb_d_dev_trans_in_isr+0x8c>)
   10418:	4798      	blx	r3
}
   1041a:	e018      	b.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1041c:	687b      	ldr	r3, [r7, #4]
   1041e:	7cdb      	ldrb	r3, [r3, #19]
   10420:	f003 0307 	and.w	r3, r3, #7
   10424:	b2db      	uxtb	r3, r3
   10426:	2b01      	cmp	r3, #1
   10428:	d111      	bne.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   1042a:	78fb      	ldrb	r3, [r7, #3]
   1042c:	f003 0304 	and.w	r3, r3, #4
   10430:	2b00      	cmp	r3, #0
   10432:	d004      	beq.n	1043e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
   10434:	2100      	movs	r1, #0
   10436:	6878      	ldr	r0, [r7, #4]
   10438:	4b08      	ldr	r3, [pc, #32]	; (1045c <_usb_d_dev_trans_in_isr+0x88>)
   1043a:	4798      	blx	r3
}
   1043c:	e007      	b.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1043e:	78fb      	ldrb	r3, [r7, #3]
   10440:	f003 0310 	and.w	r3, r3, #16
   10444:	2b00      	cmp	r3, #0
   10446:	d002      	beq.n	1044e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
   10448:	6878      	ldr	r0, [r7, #4]
   1044a:	4b06      	ldr	r3, [pc, #24]	; (10464 <_usb_d_dev_trans_in_isr+0x90>)
   1044c:	4798      	blx	r3
}
   1044e:	bf00      	nop
   10450:	3708      	adds	r7, #8
   10452:	46bd      	mov	sp, r7
   10454:	bd80      	pop	{r7, pc}
   10456:	bf00      	nop
   10458:	00010179 	.word	0x00010179
   1045c:	000101bd 	.word	0x000101bd
   10460:	0000fbc5 	.word	0x0000fbc5
   10464:	000100a1 	.word	0x000100a1

00010468 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
   10468:	b580      	push	{r7, lr}
   1046a:	b082      	sub	sp, #8
   1046c:	af00      	add	r7, sp, #0
   1046e:	6078      	str	r0, [r7, #4]
   10470:	460b      	mov	r3, r1
   10472:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   10474:	78fb      	ldrb	r3, [r7, #3]
   10476:	f003 0320 	and.w	r3, r3, #32
   1047a:	2b00      	cmp	r3, #0
   1047c:	d004      	beq.n	10488 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
   1047e:	2100      	movs	r1, #0
   10480:	6878      	ldr	r0, [r7, #4]
   10482:	4b1a      	ldr	r3, [pc, #104]	; (104ec <_usb_d_dev_trans_out_isr+0x84>)
   10484:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
   10486:	e02c      	b.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   10488:	78fb      	ldrb	r3, [r7, #3]
   1048a:	f003 0304 	and.w	r3, r3, #4
   1048e:	2b00      	cmp	r3, #0
   10490:	d004      	beq.n	1049c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
   10492:	2100      	movs	r1, #0
   10494:	6878      	ldr	r0, [r7, #4]
   10496:	4b16      	ldr	r3, [pc, #88]	; (104f0 <_usb_d_dev_trans_out_isr+0x88>)
   10498:	4798      	blx	r3
}
   1049a:	e022      	b.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   1049c:	78fb      	ldrb	r3, [r7, #3]
   1049e:	f003 0301 	and.w	r3, r3, #1
   104a2:	2b00      	cmp	r3, #0
   104a4:	d004      	beq.n	104b0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
   104a6:	2101      	movs	r1, #1
   104a8:	6878      	ldr	r0, [r7, #4]
   104aa:	4b12      	ldr	r3, [pc, #72]	; (104f4 <_usb_d_dev_trans_out_isr+0x8c>)
   104ac:	4798      	blx	r3
}
   104ae:	e018      	b.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   104b0:	687b      	ldr	r3, [r7, #4]
   104b2:	7cdb      	ldrb	r3, [r3, #19]
   104b4:	f003 0307 	and.w	r3, r3, #7
   104b8:	b2db      	uxtb	r3, r3
   104ba:	2b01      	cmp	r3, #1
   104bc:	d111      	bne.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   104be:	78fb      	ldrb	r3, [r7, #3]
   104c0:	f003 0308 	and.w	r3, r3, #8
   104c4:	2b00      	cmp	r3, #0
   104c6:	d004      	beq.n	104d2 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
   104c8:	2101      	movs	r1, #1
   104ca:	6878      	ldr	r0, [r7, #4]
   104cc:	4b08      	ldr	r3, [pc, #32]	; (104f0 <_usb_d_dev_trans_out_isr+0x88>)
   104ce:	4798      	blx	r3
}
   104d0:	e007      	b.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   104d2:	78fb      	ldrb	r3, [r7, #3]
   104d4:	f003 0310 	and.w	r3, r3, #16
   104d8:	2b00      	cmp	r3, #0
   104da:	d002      	beq.n	104e2 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
   104dc:	6878      	ldr	r0, [r7, #4]
   104de:	4b06      	ldr	r3, [pc, #24]	; (104f8 <_usb_d_dev_trans_out_isr+0x90>)
   104e0:	4798      	blx	r3
}
   104e2:	bf00      	nop
   104e4:	3708      	adds	r7, #8
   104e6:	46bd      	mov	sp, r7
   104e8:	bd80      	pop	{r7, pc}
   104ea:	bf00      	nop
   104ec:	00010179 	.word	0x00010179
   104f0:	000101bd 	.word	0x000101bd
   104f4:	0000fddd 	.word	0x0000fddd
   104f8:	000100a1 	.word	0x000100a1

000104fc <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
   104fc:	b580      	push	{r7, lr}
   104fe:	b084      	sub	sp, #16
   10500:	af00      	add	r7, sp, #0
   10502:	6078      	str	r0, [r7, #4]
   10504:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
   10506:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   1050a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1050c:	683b      	ldr	r3, [r7, #0]
   1050e:	7c9b      	ldrb	r3, [r3, #18]
   10510:	f003 030f 	and.w	r3, r3, #15
   10514:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
   10516:	7afb      	ldrb	r3, [r7, #11]
   10518:	2201      	movs	r2, #1
   1051a:	409a      	lsls	r2, r3
   1051c:	687b      	ldr	r3, [r7, #4]
   1051e:	4013      	ands	r3, r2
   10520:	2b00      	cmp	r3, #0
   10522:	d03d      	beq.n	105a0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   10524:	7afb      	ldrb	r3, [r7, #11]
   10526:	68fa      	ldr	r2, [r7, #12]
   10528:	3308      	adds	r3, #8
   1052a:	015b      	lsls	r3, r3, #5
   1052c:	4413      	add	r3, r2
   1052e:	3307      	adds	r3, #7
   10530:	781b      	ldrb	r3, [r3, #0]
   10532:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   10534:	7afb      	ldrb	r3, [r7, #11]
   10536:	68fa      	ldr	r2, [r7, #12]
   10538:	015b      	lsls	r3, r3, #5
   1053a:	4413      	add	r3, r2
   1053c:	f203 1309 	addw	r3, r3, #265	; 0x109
   10540:	781b      	ldrb	r3, [r3, #0]
   10542:	727b      	strb	r3, [r7, #9]
	flags &= mask;
   10544:	7aba      	ldrb	r2, [r7, #10]
   10546:	7a7b      	ldrb	r3, [r7, #9]
   10548:	4013      	ands	r3, r2
   1054a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
   1054c:	7abb      	ldrb	r3, [r7, #10]
   1054e:	2b00      	cmp	r3, #0
   10550:	d027      	beq.n	105a2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   10552:	683b      	ldr	r3, [r7, #0]
   10554:	7cdb      	ldrb	r3, [r3, #19]
   10556:	f003 0307 	and.w	r3, r3, #7
   1055a:	b2db      	uxtb	r3, r3
   1055c:	2b01      	cmp	r3, #1
   1055e:	d10c      	bne.n	1057a <_usb_d_dev_handle_eps+0x7e>
   10560:	683b      	ldr	r3, [r7, #0]
   10562:	7cdb      	ldrb	r3, [r3, #19]
   10564:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10568:	b2db      	uxtb	r3, r3
   1056a:	2b00      	cmp	r3, #0
   1056c:	d105      	bne.n	1057a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
   1056e:	7abb      	ldrb	r3, [r7, #10]
   10570:	4619      	mov	r1, r3
   10572:	6838      	ldr	r0, [r7, #0]
   10574:	4b0c      	ldr	r3, [pc, #48]	; (105a8 <_usb_d_dev_handle_eps+0xac>)
   10576:	4798      	blx	r3
   10578:	e013      	b.n	105a2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   1057a:	683b      	ldr	r3, [r7, #0]
   1057c:	7cdb      	ldrb	r3, [r3, #19]
   1057e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   10582:	b2db      	uxtb	r3, r3
   10584:	2b00      	cmp	r3, #0
   10586:	d005      	beq.n	10594 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
   10588:	7abb      	ldrb	r3, [r7, #10]
   1058a:	4619      	mov	r1, r3
   1058c:	6838      	ldr	r0, [r7, #0]
   1058e:	4b07      	ldr	r3, [pc, #28]	; (105ac <_usb_d_dev_handle_eps+0xb0>)
   10590:	4798      	blx	r3
   10592:	e006      	b.n	105a2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
   10594:	7abb      	ldrb	r3, [r7, #10]
   10596:	4619      	mov	r1, r3
   10598:	6838      	ldr	r0, [r7, #0]
   1059a:	4b05      	ldr	r3, [pc, #20]	; (105b0 <_usb_d_dev_handle_eps+0xb4>)
   1059c:	4798      	blx	r3
   1059e:	e000      	b.n	105a2 <_usb_d_dev_handle_eps+0xa6>
		return;
   105a0:	bf00      	nop
		}
	}
}
   105a2:	3710      	adds	r7, #16
   105a4:	46bd      	mov	sp, r7
   105a6:	bd80      	pop	{r7, pc}
   105a8:	00010381 	.word	0x00010381
   105ac:	000103d5 	.word	0x000103d5
   105b0:	00010469 	.word	0x00010469

000105b4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
   105b4:	b580      	push	{r7, lr}
   105b6:	b084      	sub	sp, #16
   105b8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
   105ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   105be:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   105c0:	68bb      	ldr	r3, [r7, #8]
   105c2:	8c1b      	ldrh	r3, [r3, #32]
   105c4:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
   105c6:	88fb      	ldrh	r3, [r7, #6]
   105c8:	2b00      	cmp	r3, #0
   105ca:	d104      	bne.n	105d6 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
   105cc:	4b13      	ldr	r3, [pc, #76]	; (1061c <_usb_d_dev_handler+0x68>)
   105ce:	4798      	blx	r3
   105d0:	4603      	mov	r3, r0
   105d2:	2b00      	cmp	r3, #0
   105d4:	d11e      	bne.n	10614 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
   105d6:	2300      	movs	r3, #0
   105d8:	73fb      	strb	r3, [r7, #15]
   105da:	e017      	b.n	1060c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
   105dc:	7bfa      	ldrb	r2, [r7, #15]
   105de:	4613      	mov	r3, r2
   105e0:	009b      	lsls	r3, r3, #2
   105e2:	4413      	add	r3, r2
   105e4:	009b      	lsls	r3, r3, #2
   105e6:	3310      	adds	r3, #16
   105e8:	4a0d      	ldr	r2, [pc, #52]	; (10620 <_usb_d_dev_handler+0x6c>)
   105ea:	4413      	add	r3, r2
   105ec:	3304      	adds	r3, #4
   105ee:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
   105f0:	683b      	ldr	r3, [r7, #0]
   105f2:	7c9b      	ldrb	r3, [r3, #18]
   105f4:	2bff      	cmp	r3, #255	; 0xff
   105f6:	d005      	beq.n	10604 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
   105f8:	88fb      	ldrh	r3, [r7, #6]
   105fa:	6839      	ldr	r1, [r7, #0]
   105fc:	4618      	mov	r0, r3
   105fe:	4b09      	ldr	r3, [pc, #36]	; (10624 <_usb_d_dev_handler+0x70>)
   10600:	4798      	blx	r3
   10602:	e000      	b.n	10606 <_usb_d_dev_handler+0x52>
			continue;
   10604:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
   10606:	7bfb      	ldrb	r3, [r7, #15]
   10608:	3301      	adds	r3, #1
   1060a:	73fb      	strb	r3, [r7, #15]
   1060c:	7bfb      	ldrb	r3, [r7, #15]
   1060e:	2b08      	cmp	r3, #8
   10610:	d9e4      	bls.n	105dc <_usb_d_dev_handler+0x28>
   10612:	e000      	b.n	10616 <_usb_d_dev_handler+0x62>
			return;
   10614:	bf00      	nop
	}
}
   10616:	3710      	adds	r7, #16
   10618:	46bd      	mov	sp, r7
   1061a:	bd80      	pop	{r7, pc}
   1061c:	0000fb0d 	.word	0x0000fb0d
   10620:	20001d64 	.word	0x20001d64
   10624:	000104fd 	.word	0x000104fd

00010628 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
   10628:	b580      	push	{r7, lr}
   1062a:	b082      	sub	sp, #8
   1062c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
   1062e:	2300      	movs	r3, #0
   10630:	71fb      	strb	r3, [r7, #7]
   10632:	e023      	b.n	1067c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
   10634:	79fa      	ldrb	r2, [r7, #7]
   10636:	4613      	mov	r3, r2
   10638:	009b      	lsls	r3, r3, #2
   1063a:	4413      	add	r3, r2
   1063c:	009b      	lsls	r3, r3, #2
   1063e:	3310      	adds	r3, #16
   10640:	4a14      	ldr	r2, [pc, #80]	; (10694 <_usb_d_dev_reset_epts+0x6c>)
   10642:	4413      	add	r3, r2
   10644:	3304      	adds	r3, #4
   10646:	2103      	movs	r1, #3
   10648:	4618      	mov	r0, r3
   1064a:	4b13      	ldr	r3, [pc, #76]	; (10698 <_usb_d_dev_reset_epts+0x70>)
   1064c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
   1064e:	79fa      	ldrb	r2, [r7, #7]
   10650:	4910      	ldr	r1, [pc, #64]	; (10694 <_usb_d_dev_reset_epts+0x6c>)
   10652:	4613      	mov	r3, r2
   10654:	009b      	lsls	r3, r3, #2
   10656:	4413      	add	r3, r2
   10658:	009b      	lsls	r3, r3, #2
   1065a:	440b      	add	r3, r1
   1065c:	3326      	adds	r3, #38	; 0x26
   1065e:	22ff      	movs	r2, #255	; 0xff
   10660:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
   10662:	79fa      	ldrb	r2, [r7, #7]
   10664:	490b      	ldr	r1, [pc, #44]	; (10694 <_usb_d_dev_reset_epts+0x6c>)
   10666:	4613      	mov	r3, r2
   10668:	009b      	lsls	r3, r3, #2
   1066a:	4413      	add	r3, r2
   1066c:	009b      	lsls	r3, r3, #2
   1066e:	440b      	add	r3, r1
   10670:	3327      	adds	r3, #39	; 0x27
   10672:	2200      	movs	r2, #0
   10674:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
   10676:	79fb      	ldrb	r3, [r7, #7]
   10678:	3301      	adds	r3, #1
   1067a:	71fb      	strb	r3, [r7, #7]
   1067c:	79fb      	ldrb	r3, [r7, #7]
   1067e:	2b08      	cmp	r3, #8
   10680:	d9d8      	bls.n	10634 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   10682:	22a0      	movs	r2, #160	; 0xa0
   10684:	2100      	movs	r1, #0
   10686:	4805      	ldr	r0, [pc, #20]	; (1069c <_usb_d_dev_reset_epts+0x74>)
   10688:	4b05      	ldr	r3, [pc, #20]	; (106a0 <_usb_d_dev_reset_epts+0x78>)
   1068a:	4798      	blx	r3
}
   1068c:	bf00      	nop
   1068e:	3708      	adds	r7, #8
   10690:	46bd      	mov	sp, r7
   10692:	bd80      	pop	{r7, pc}
   10694:	20001d64 	.word	0x20001d64
   10698:	00010eed 	.word	0x00010eed
   1069c:	20001e2c 	.word	0x20001e2c
   106a0:	00014109 	.word	0x00014109

000106a4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
   106a4:	b580      	push	{r7, lr}
   106a6:	b084      	sub	sp, #16
   106a8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
   106aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   106ae:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
   106b0:	2301      	movs	r3, #1
   106b2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
   106b4:	2304      	movs	r3, #4
   106b6:	713b      	strb	r3, [r7, #4]
   106b8:	2300      	movs	r3, #0
   106ba:	717b      	strb	r3, [r7, #5]
   106bc:	2300      	movs	r3, #0
   106be:	71bb      	strb	r3, [r7, #6]
   106c0:	2300      	movs	r3, #0
   106c2:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   106c4:	2101      	movs	r1, #1
   106c6:	68f8      	ldr	r0, [r7, #12]
   106c8:	4b26      	ldr	r3, [pc, #152]	; (10764 <_usb_d_dev_init+0xc0>)
   106ca:	4798      	blx	r3
   106cc:	4603      	mov	r3, r0
   106ce:	f083 0301 	eor.w	r3, r3, #1
   106d2:	b2db      	uxtb	r3, r3
   106d4:	2b00      	cmp	r3, #0
   106d6:	d011      	beq.n	106fc <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   106d8:	2102      	movs	r1, #2
   106da:	68f8      	ldr	r0, [r7, #12]
   106dc:	4b22      	ldr	r3, [pc, #136]	; (10768 <_usb_d_dev_init+0xc4>)
   106de:	4798      	blx	r3
   106e0:	4603      	mov	r3, r0
   106e2:	2b00      	cmp	r3, #0
   106e4:	d006      	beq.n	106f4 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
   106e6:	68f8      	ldr	r0, [r7, #12]
   106e8:	4b20      	ldr	r3, [pc, #128]	; (1076c <_usb_d_dev_init+0xc8>)
   106ea:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
   106ec:	2102      	movs	r1, #2
   106ee:	68f8      	ldr	r0, [r7, #12]
   106f0:	4b1f      	ldr	r3, [pc, #124]	; (10770 <_usb_d_dev_init+0xcc>)
   106f2:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
   106f4:	2101      	movs	r1, #1
   106f6:	68f8      	ldr	r0, [r7, #12]
   106f8:	4b1e      	ldr	r3, [pc, #120]	; (10774 <_usb_d_dev_init+0xd0>)
   106fa:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
   106fc:	2101      	movs	r1, #1
   106fe:	68f8      	ldr	r0, [r7, #12]
   10700:	4b1b      	ldr	r3, [pc, #108]	; (10770 <_usb_d_dev_init+0xcc>)
   10702:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   10704:	4b1c      	ldr	r3, [pc, #112]	; (10778 <_usb_d_dev_init+0xd4>)
   10706:	4a1d      	ldr	r2, [pc, #116]	; (1077c <_usb_d_dev_init+0xd8>)
   10708:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   1070a:	4b1b      	ldr	r3, [pc, #108]	; (10778 <_usb_d_dev_init+0xd4>)
   1070c:	4a1b      	ldr	r2, [pc, #108]	; (1077c <_usb_d_dev_init+0xd8>)
   1070e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   10710:	4b19      	ldr	r3, [pc, #100]	; (10778 <_usb_d_dev_init+0xd4>)
   10712:	4a1a      	ldr	r2, [pc, #104]	; (1077c <_usb_d_dev_init+0xd8>)
   10714:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   10716:	4b18      	ldr	r3, [pc, #96]	; (10778 <_usb_d_dev_init+0xd4>)
   10718:	4a18      	ldr	r2, [pc, #96]	; (1077c <_usb_d_dev_init+0xd8>)
   1071a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   1071c:	4b16      	ldr	r3, [pc, #88]	; (10778 <_usb_d_dev_init+0xd4>)
   1071e:	4a17      	ldr	r2, [pc, #92]	; (1077c <_usb_d_dev_init+0xd8>)
   10720:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
   10722:	4b17      	ldr	r3, [pc, #92]	; (10780 <_usb_d_dev_init+0xdc>)
   10724:	4798      	blx	r3

	_usb_load_calib();
   10726:	4b17      	ldr	r3, [pc, #92]	; (10784 <_usb_d_dev_init+0xe0>)
   10728:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
   1072a:	2104      	movs	r1, #4
   1072c:	68f8      	ldr	r0, [r7, #12]
   1072e:	4b11      	ldr	r3, [pc, #68]	; (10774 <_usb_d_dev_init+0xd0>)
   10730:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   10732:	4b15      	ldr	r3, [pc, #84]	; (10788 <_usb_d_dev_init+0xe4>)
   10734:	4619      	mov	r1, r3
   10736:	68f8      	ldr	r0, [r7, #12]
   10738:	4b14      	ldr	r3, [pc, #80]	; (1078c <_usb_d_dev_init+0xe8>)
   1073a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
   1073c:	7afb      	ldrb	r3, [r7, #11]
   1073e:	f107 0210 	add.w	r2, r7, #16
   10742:	4413      	add	r3, r2
   10744:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
   10748:	f043 0301 	orr.w	r3, r3, #1
   1074c:	b2db      	uxtb	r3, r3
   1074e:	b29b      	uxth	r3, r3
   10750:	4619      	mov	r1, r3
   10752:	68f8      	ldr	r0, [r7, #12]
   10754:	4b0e      	ldr	r3, [pc, #56]	; (10790 <_usb_d_dev_init+0xec>)
   10756:	4798      	blx	r3

	return ERR_NONE;
   10758:	2300      	movs	r3, #0
}
   1075a:	4618      	mov	r0, r3
   1075c:	3710      	adds	r7, #16
   1075e:	46bd      	mov	sp, r7
   10760:	bd80      	pop	{r7, pc}
   10762:	bf00      	nop
   10764:	0000ed3d 	.word	0x0000ed3d
   10768:	0000f08d 	.word	0x0000f08d
   1076c:	0000f061 	.word	0x0000f061
   10770:	0000ed13 	.word	0x0000ed13
   10774:	0000f0bd 	.word	0x0000f0bd
   10778:	20001d64 	.word	0x20001d64
   1077c:	0000f185 	.word	0x0000f185
   10780:	00010629 	.word	0x00010629
   10784:	0000f19d 	.word	0x0000f19d
   10788:	20001e2c 	.word	0x20001e2c
   1078c:	0000f169 	.word	0x0000f169
   10790:	0000f12d 	.word	0x0000f12d

00010794 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
   10794:	b580      	push	{r7, lr}
   10796:	b082      	sub	sp, #8
   10798:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
   1079a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   1079e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   107a0:	2103      	movs	r1, #3
   107a2:	6878      	ldr	r0, [r7, #4]
   107a4:	4b17      	ldr	r3, [pc, #92]	; (10804 <_usb_d_dev_enable+0x70>)
   107a6:	4798      	blx	r3
   107a8:	4603      	mov	r3, r0
   107aa:	2b00      	cmp	r3, #0
   107ac:	d002      	beq.n	107b4 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
   107ae:	f06f 0310 	mvn.w	r3, #16
   107b2:	e023      	b.n	107fc <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
   107b4:	6878      	ldr	r0, [r7, #4]
   107b6:	4b14      	ldr	r3, [pc, #80]	; (10808 <_usb_d_dev_enable+0x74>)
   107b8:	4798      	blx	r3
   107ba:	4603      	mov	r3, r0
   107bc:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   107be:	78fb      	ldrb	r3, [r7, #3]
   107c0:	f003 0302 	and.w	r3, r3, #2
   107c4:	2b00      	cmp	r3, #0
   107c6:	d107      	bne.n	107d8 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   107c8:	78fb      	ldrb	r3, [r7, #3]
   107ca:	f043 0302 	orr.w	r3, r3, #2
   107ce:	b2db      	uxtb	r3, r3
   107d0:	4619      	mov	r1, r3
   107d2:	6878      	ldr	r0, [r7, #4]
   107d4:	4b0d      	ldr	r3, [pc, #52]	; (1080c <_usb_d_dev_enable+0x78>)
   107d6:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
   107d8:	2050      	movs	r0, #80	; 0x50
   107da:	4b0d      	ldr	r3, [pc, #52]	; (10810 <_usb_d_dev_enable+0x7c>)
   107dc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
   107de:	2051      	movs	r0, #81	; 0x51
   107e0:	4b0b      	ldr	r3, [pc, #44]	; (10810 <_usb_d_dev_enable+0x7c>)
   107e2:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
   107e4:	2052      	movs	r0, #82	; 0x52
   107e6:	4b0a      	ldr	r3, [pc, #40]	; (10810 <_usb_d_dev_enable+0x7c>)
   107e8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
   107ea:	2053      	movs	r0, #83	; 0x53
   107ec:	4b08      	ldr	r3, [pc, #32]	; (10810 <_usb_d_dev_enable+0x7c>)
   107ee:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
   107f0:	f240 218d 	movw	r1, #653	; 0x28d
   107f4:	6878      	ldr	r0, [r7, #4]
   107f6:	4b07      	ldr	r3, [pc, #28]	; (10814 <_usb_d_dev_enable+0x80>)
   107f8:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
   107fa:	2300      	movs	r3, #0
}
   107fc:	4618      	mov	r0, r3
   107fe:	3708      	adds	r7, #8
   10800:	46bd      	mov	sp, r7
   10802:	bd80      	pop	{r7, pc}
   10804:	0000f037 	.word	0x0000f037
   10808:	0000f0e5 	.word	0x0000f0e5
   1080c:	0000f0bd 	.word	0x0000f0bd
   10810:	0000ec49 	.word	0x0000ec49
   10814:	0000efe1 	.word	0x0000efe1

00010818 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
   10818:	b580      	push	{r7, lr}
   1081a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
   1081c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
   10820:	4b01      	ldr	r3, [pc, #4]	; (10828 <_usb_d_dev_attach+0x10>)
   10822:	4798      	blx	r3
}
   10824:	bf00      	nop
   10826:	bd80      	pop	{r7, pc}
   10828:	0000f109 	.word	0x0000f109

0001082c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
   1082c:	b580      	push	{r7, lr}
   1082e:	b082      	sub	sp, #8
   10830:	af00      	add	r7, sp, #0
   10832:	4603      	mov	r3, r0
   10834:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   10836:	79fb      	ldrb	r3, [r7, #7]
   10838:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1083c:	b2db      	uxtb	r3, r3
   1083e:	4619      	mov	r1, r3
   10840:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
   10844:	4b02      	ldr	r3, [pc, #8]	; (10850 <_usb_d_dev_set_address+0x24>)
   10846:	4798      	blx	r3
}
   10848:	bf00      	nop
   1084a:	3708      	adds	r7, #8
   1084c:	46bd      	mov	sp, r7
   1084e:	bd80      	pop	{r7, pc}
   10850:	0000f14b 	.word	0x0000f14b

00010854 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
   10854:	b590      	push	{r4, r7, lr}
   10856:	b085      	sub	sp, #20
   10858:	af00      	add	r7, sp, #0
   1085a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
   1085c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   10860:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10862:	687b      	ldr	r3, [r7, #4]
   10864:	7c9b      	ldrb	r3, [r3, #18]
   10866:	f003 030f 	and.w	r3, r3, #15
   1086a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   1086c:	687b      	ldr	r3, [r7, #4]
   1086e:	68db      	ldr	r3, [r3, #12]
   10870:	461a      	mov	r2, r3
   10872:	7afb      	ldrb	r3, [r7, #11]
   10874:	2100      	movs	r1, #0
   10876:	4618      	mov	r0, r3
   10878:	4b0f      	ldr	r3, [pc, #60]	; (108b8 <_usb_d_dev_trans_setup+0x64>)
   1087a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
   1087c:	687b      	ldr	r3, [r7, #4]
   1087e:	8a1b      	ldrh	r3, [r3, #16]
   10880:	461a      	mov	r2, r3
   10882:	7af8      	ldrb	r0, [r7, #11]
   10884:	2300      	movs	r3, #0
   10886:	2100      	movs	r1, #0
   10888:	4c0c      	ldr	r4, [pc, #48]	; (108bc <_usb_d_dev_trans_setup+0x68>)
   1088a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
   1088c:	7afb      	ldrb	r3, [r7, #11]
   1088e:	22b0      	movs	r2, #176	; 0xb0
   10890:	4619      	mov	r1, r3
   10892:	68f8      	ldr	r0, [r7, #12]
   10894:	4b0a      	ldr	r3, [pc, #40]	; (108c0 <_usb_d_dev_trans_setup+0x6c>)
   10896:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
   10898:	7afb      	ldrb	r3, [r7, #11]
   1089a:	2200      	movs	r2, #0
   1089c:	2100      	movs	r1, #0
   1089e:	4618      	mov	r0, r3
   108a0:	4b08      	ldr	r3, [pc, #32]	; (108c4 <_usb_d_dev_trans_setup+0x70>)
   108a2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
   108a4:	7afb      	ldrb	r3, [r7, #11]
   108a6:	2210      	movs	r2, #16
   108a8:	4619      	mov	r1, r3
   108aa:	68f8      	ldr	r0, [r7, #12]
   108ac:	4b06      	ldr	r3, [pc, #24]	; (108c8 <_usb_d_dev_trans_setup+0x74>)
   108ae:	4798      	blx	r3
}
   108b0:	bf00      	nop
   108b2:	3714      	adds	r7, #20
   108b4:	46bd      	mov	sp, r7
   108b6:	bd90      	pop	{r4, r7, pc}
   108b8:	0000f5e9 	.word	0x0000f5e9
   108bc:	0000f771 	.word	0x0000f771
   108c0:	0000ee49 	.word	0x0000ee49
   108c4:	0000f841 	.word	0x0000f841
   108c8:	0000ee9d 	.word	0x0000ee9d

000108cc <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
   108cc:	b580      	push	{r7, lr}
   108ce:	b088      	sub	sp, #32
   108d0:	af00      	add	r7, sp, #0
   108d2:	4603      	mov	r3, r0
   108d4:	71fb      	strb	r3, [r7, #7]
   108d6:	460b      	mov	r3, r1
   108d8:	71bb      	strb	r3, [r7, #6]
   108da:	4613      	mov	r3, r2
   108dc:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
   108de:	79fb      	ldrb	r3, [r7, #7]
   108e0:	f003 030f 	and.w	r3, r3, #15
   108e4:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
   108e6:	79fb      	ldrb	r3, [r7, #7]
   108e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   108ec:	2b00      	cmp	r3, #0
   108ee:	bf14      	ite	ne
   108f0:	2301      	movne	r3, #1
   108f2:	2300      	moveq	r3, #0
   108f4:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   108f6:	7fba      	ldrb	r2, [r7, #30]
   108f8:	7ffb      	ldrb	r3, [r7, #31]
   108fa:	4611      	mov	r1, r2
   108fc:	4618      	mov	r0, r3
   108fe:	4b3e      	ldr	r3, [pc, #248]	; (109f8 <_usb_d_dev_ep_init+0x12c>)
   10900:	4798      	blx	r3
   10902:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   10904:	79bb      	ldrb	r3, [r7, #6]
   10906:	f003 0303 	and.w	r3, r3, #3
   1090a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
   1090c:	7ffa      	ldrb	r2, [r7, #31]
   1090e:	4613      	mov	r3, r2
   10910:	005b      	lsls	r3, r3, #1
   10912:	4413      	add	r3, r2
   10914:	009b      	lsls	r3, r3, #2
   10916:	4a39      	ldr	r2, [pc, #228]	; (109fc <_usb_d_dev_ep_init+0x130>)
   10918:	4413      	add	r3, r2
   1091a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
   1091c:	7ffb      	ldrb	r3, [r7, #31]
   1091e:	2b04      	cmp	r3, #4
   10920:	d902      	bls.n	10928 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
   10922:	f06f 0311 	mvn.w	r3, #17
   10926:	e063      	b.n	109f0 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
   10928:	69bb      	ldr	r3, [r7, #24]
   1092a:	7c9b      	ldrb	r3, [r3, #18]
   1092c:	2bff      	cmp	r3, #255	; 0xff
   1092e:	d002      	beq.n	10936 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
   10930:	f06f 0313 	mvn.w	r3, #19
   10934:	e05c      	b.n	109f0 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
   10936:	7dfb      	ldrb	r3, [r7, #23]
   10938:	2b00      	cmp	r3, #0
   1093a:	d11f      	bne.n	1097c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
   1093c:	7fbb      	ldrb	r3, [r7, #30]
   1093e:	2b00      	cmp	r3, #0
   10940:	bf14      	ite	ne
   10942:	2301      	movne	r3, #1
   10944:	2300      	moveq	r3, #0
   10946:	b2db      	uxtb	r3, r3
   10948:	f083 0301 	eor.w	r3, r3, #1
   1094c:	b2db      	uxtb	r3, r3
   1094e:	f003 0301 	and.w	r3, r3, #1
   10952:	b2da      	uxtb	r2, r3
   10954:	7ffb      	ldrb	r3, [r7, #31]
   10956:	4611      	mov	r1, r2
   10958:	4618      	mov	r0, r3
   1095a:	4b27      	ldr	r3, [pc, #156]	; (109f8 <_usb_d_dev_ep_init+0x12c>)
   1095c:	4798      	blx	r3
   1095e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
   10960:	68fb      	ldr	r3, [r7, #12]
   10962:	7c9b      	ldrb	r3, [r3, #18]
   10964:	2bff      	cmp	r3, #255	; 0xff
   10966:	d002      	beq.n	1096e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
   10968:	f06f 0313 	mvn.w	r3, #19
   1096c:	e040      	b.n	109f0 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
   1096e:	693b      	ldr	r3, [r7, #16]
   10970:	681b      	ldr	r3, [r3, #0]
   10972:	2b00      	cmp	r3, #0
   10974:	d102      	bne.n	1097c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
   10976:	f06f 0312 	mvn.w	r3, #18
   1097a:	e039      	b.n	109f0 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   1097c:	7fbb      	ldrb	r3, [r7, #30]
   1097e:	2b00      	cmp	r3, #0
   10980:	d007      	beq.n	10992 <_usb_d_dev_ep_init+0xc6>
   10982:	693b      	ldr	r3, [r7, #16]
   10984:	685b      	ldr	r3, [r3, #4]
   10986:	2b00      	cmp	r3, #0
   10988:	bf14      	ite	ne
   1098a:	2301      	movne	r3, #1
   1098c:	2300      	moveq	r3, #0
   1098e:	b2db      	uxtb	r3, r3
   10990:	e006      	b.n	109a0 <_usb_d_dev_ep_init+0xd4>
   10992:	693b      	ldr	r3, [r7, #16]
   10994:	681b      	ldr	r3, [r3, #0]
   10996:	2b00      	cmp	r3, #0
   10998:	bf14      	ite	ne
   1099a:	2301      	movne	r3, #1
   1099c:	2300      	moveq	r3, #0
   1099e:	b2db      	uxtb	r3, r3
   109a0:	2b00      	cmp	r3, #0
   109a2:	d00f      	beq.n	109c4 <_usb_d_dev_ep_init+0xf8>
   109a4:	7fbb      	ldrb	r3, [r7, #30]
   109a6:	2b00      	cmp	r3, #0
   109a8:	d003      	beq.n	109b2 <_usb_d_dev_ep_init+0xe6>
   109aa:	693b      	ldr	r3, [r7, #16]
   109ac:	895b      	ldrh	r3, [r3, #10]
   109ae:	461a      	mov	r2, r3
   109b0:	e002      	b.n	109b8 <_usb_d_dev_ep_init+0xec>
   109b2:	693b      	ldr	r3, [r7, #16]
   109b4:	891b      	ldrh	r3, [r3, #8]
   109b6:	461a      	mov	r2, r3
   109b8:	88bb      	ldrh	r3, [r7, #4]
   109ba:	429a      	cmp	r2, r3
   109bc:	da02      	bge.n	109c4 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
   109be:	f06f 0312 	mvn.w	r3, #18
   109c2:	e015      	b.n	109f0 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   109c4:	7fbb      	ldrb	r3, [r7, #30]
   109c6:	2b00      	cmp	r3, #0
   109c8:	d002      	beq.n	109d0 <_usb_d_dev_ep_init+0x104>
   109ca:	693b      	ldr	r3, [r7, #16]
   109cc:	685b      	ldr	r3, [r3, #4]
   109ce:	e001      	b.n	109d4 <_usb_d_dev_ep_init+0x108>
   109d0:	693b      	ldr	r3, [r7, #16]
   109d2:	681b      	ldr	r3, [r3, #0]
   109d4:	69ba      	ldr	r2, [r7, #24]
   109d6:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
   109d8:	69bb      	ldr	r3, [r7, #24]
   109da:	88ba      	ldrh	r2, [r7, #4]
   109dc:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
   109de:	7dfb      	ldrb	r3, [r7, #23]
   109e0:	3301      	adds	r3, #1
   109e2:	b2da      	uxtb	r2, r3
   109e4:	69bb      	ldr	r3, [r7, #24]
   109e6:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
   109e8:	69bb      	ldr	r3, [r7, #24]
   109ea:	79fa      	ldrb	r2, [r7, #7]
   109ec:	749a      	strb	r2, [r3, #18]

	return USB_OK;
   109ee:	2300      	movs	r3, #0
}
   109f0:	4618      	mov	r0, r3
   109f2:	3720      	adds	r7, #32
   109f4:	46bd      	mov	sp, r7
   109f6:	bd80      	pop	{r7, pc}
   109f8:	0000f8fd 	.word	0x0000f8fd
   109fc:	000152cc 	.word	0x000152cc

00010a00 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
   10a00:	b580      	push	{r7, lr}
   10a02:	b086      	sub	sp, #24
   10a04:	af00      	add	r7, sp, #0
   10a06:	4603      	mov	r3, r0
   10a08:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
   10a0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   10a0e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
   10a10:	79fb      	ldrb	r3, [r7, #7]
   10a12:	f003 030f 	and.w	r3, r3, #15
   10a16:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
   10a18:	79fb      	ldrb	r3, [r7, #7]
   10a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10a1e:	2b00      	cmp	r3, #0
   10a20:	bf14      	ite	ne
   10a22:	2301      	movne	r3, #1
   10a24:	2300      	moveq	r3, #0
   10a26:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   10a28:	7cba      	ldrb	r2, [r7, #18]
   10a2a:	7cfb      	ldrb	r3, [r7, #19]
   10a2c:	4611      	mov	r1, r2
   10a2e:	4618      	mov	r0, r3
   10a30:	4b2a      	ldr	r3, [pc, #168]	; (10adc <_usb_d_dev_ep_deinit+0xdc>)
   10a32:	4798      	blx	r3
   10a34:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   10a36:	7cfb      	ldrb	r3, [r7, #19]
   10a38:	2b04      	cmp	r3, #4
   10a3a:	d84a      	bhi.n	10ad2 <_usb_d_dev_ep_deinit+0xd2>
   10a3c:	68fb      	ldr	r3, [r7, #12]
   10a3e:	7c9b      	ldrb	r3, [r3, #18]
   10a40:	2bff      	cmp	r3, #255	; 0xff
   10a42:	d046      	beq.n	10ad2 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
   10a44:	7cbb      	ldrb	r3, [r7, #18]
   10a46:	2203      	movs	r2, #3
   10a48:	4619      	mov	r1, r3
   10a4a:	68f8      	ldr	r0, [r7, #12]
   10a4c:	4b24      	ldr	r3, [pc, #144]	; (10ae0 <_usb_d_dev_ep_deinit+0xe0>)
   10a4e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   10a50:	68fb      	ldr	r3, [r7, #12]
   10a52:	7cdb      	ldrb	r3, [r3, #19]
   10a54:	f003 0307 	and.w	r3, r3, #7
   10a58:	b2db      	uxtb	r3, r3
   10a5a:	2b01      	cmp	r3, #1
   10a5c:	d107      	bne.n	10a6e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   10a5e:	79fb      	ldrb	r3, [r7, #7]
   10a60:	697a      	ldr	r2, [r7, #20]
   10a62:	3308      	adds	r3, #8
   10a64:	015b      	lsls	r3, r3, #5
   10a66:	4413      	add	r3, r2
   10a68:	2200      	movs	r2, #0
   10a6a:	701a      	strb	r2, [r3, #0]
   10a6c:	e02a      	b.n	10ac4 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
   10a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   10a72:	2b00      	cmp	r3, #0
   10a74:	da15      	bge.n	10aa2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   10a76:	79fb      	ldrb	r3, [r7, #7]
   10a78:	f003 030f 	and.w	r3, r3, #15
   10a7c:	79fa      	ldrb	r2, [r7, #7]
   10a7e:	f002 020f 	and.w	r2, r2, #15
   10a82:	6979      	ldr	r1, [r7, #20]
   10a84:	3208      	adds	r2, #8
   10a86:	0152      	lsls	r2, r2, #5
   10a88:	440a      	add	r2, r1
   10a8a:	7812      	ldrb	r2, [r2, #0]
   10a8c:	b2d2      	uxtb	r2, r2
   10a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   10a92:	b2d1      	uxtb	r1, r2
   10a94:	697a      	ldr	r2, [r7, #20]
   10a96:	3308      	adds	r3, #8
   10a98:	015b      	lsls	r3, r3, #5
   10a9a:	4413      	add	r3, r2
   10a9c:	460a      	mov	r2, r1
   10a9e:	701a      	strb	r2, [r3, #0]
   10aa0:	e010      	b.n	10ac4 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   10aa2:	79fb      	ldrb	r3, [r7, #7]
   10aa4:	79fa      	ldrb	r2, [r7, #7]
   10aa6:	6979      	ldr	r1, [r7, #20]
   10aa8:	3208      	adds	r2, #8
   10aaa:	0152      	lsls	r2, r2, #5
   10aac:	440a      	add	r2, r1
   10aae:	7812      	ldrb	r2, [r2, #0]
   10ab0:	b2d2      	uxtb	r2, r2
   10ab2:	f022 0207 	bic.w	r2, r2, #7
   10ab6:	b2d1      	uxtb	r1, r2
   10ab8:	697a      	ldr	r2, [r7, #20]
   10aba:	3308      	adds	r3, #8
   10abc:	015b      	lsls	r3, r3, #5
   10abe:	4413      	add	r3, r2
   10ac0:	460a      	mov	r2, r1
   10ac2:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
   10ac4:	68fb      	ldr	r3, [r7, #12]
   10ac6:	2200      	movs	r2, #0
   10ac8:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
   10aca:	68fb      	ldr	r3, [r7, #12]
   10acc:	22ff      	movs	r2, #255	; 0xff
   10ace:	749a      	strb	r2, [r3, #18]
   10ad0:	e000      	b.n	10ad4 <_usb_d_dev_ep_deinit+0xd4>
		return;
   10ad2:	bf00      	nop
}
   10ad4:	3718      	adds	r7, #24
   10ad6:	46bd      	mov	sp, r7
   10ad8:	bd80      	pop	{r7, pc}
   10ada:	bf00      	nop
   10adc:	0000f8fd 	.word	0x0000f8fd
   10ae0:	00010f35 	.word	0x00010f35

00010ae4 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
   10ae4:	b5b0      	push	{r4, r5, r7, lr}
   10ae6:	b088      	sub	sp, #32
   10ae8:	af00      	add	r7, sp, #0
   10aea:	4603      	mov	r3, r0
   10aec:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
   10aee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   10af2:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
   10af4:	79fb      	ldrb	r3, [r7, #7]
   10af6:	f003 030f 	and.w	r3, r3, #15
   10afa:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
   10afc:	79fb      	ldrb	r3, [r7, #7]
   10afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10b02:	2b00      	cmp	r3, #0
   10b04:	bf14      	ite	ne
   10b06:	2301      	movne	r3, #1
   10b08:	2300      	moveq	r3, #0
   10b0a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
   10b0c:	7eba      	ldrb	r2, [r7, #26]
   10b0e:	7efb      	ldrb	r3, [r7, #27]
   10b10:	4611      	mov	r1, r2
   10b12:	4618      	mov	r0, r3
   10b14:	4b70      	ldr	r3, [pc, #448]	; (10cd8 <_usb_d_dev_ep_enable+0x1f4>)
   10b16:	4798      	blx	r3
   10b18:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
   10b1a:	7efb      	ldrb	r3, [r7, #27]
   10b1c:	4619      	mov	r1, r3
   10b1e:	69f8      	ldr	r0, [r7, #28]
   10b20:	4b6e      	ldr	r3, [pc, #440]	; (10cdc <_usb_d_dev_ep_enable+0x1f8>)
   10b22:	4798      	blx	r3
   10b24:	4603      	mov	r3, r0
   10b26:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   10b28:	7efb      	ldrb	r3, [r7, #27]
   10b2a:	2b04      	cmp	r3, #4
   10b2c:	d803      	bhi.n	10b36 <_usb_d_dev_ep_enable+0x52>
   10b2e:	697b      	ldr	r3, [r7, #20]
   10b30:	7c9b      	ldrb	r3, [r3, #18]
   10b32:	2bff      	cmp	r3, #255	; 0xff
   10b34:	d102      	bne.n	10b3c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
   10b36:	f06f 0311 	mvn.w	r3, #17
   10b3a:	e0c8      	b.n	10cce <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   10b3c:	7efb      	ldrb	r3, [r7, #27]
   10b3e:	015b      	lsls	r3, r3, #5
   10b40:	4a67      	ldr	r2, [pc, #412]	; (10ce0 <_usb_d_dev_ep_enable+0x1fc>)
   10b42:	4413      	add	r3, r2
   10b44:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   10b46:	697b      	ldr	r3, [r7, #20]
   10b48:	7cdb      	ldrb	r3, [r3, #19]
   10b4a:	f003 0307 	and.w	r3, r3, #7
   10b4e:	b2db      	uxtb	r3, r3
   10b50:	2b01      	cmp	r3, #1
   10b52:	d14b      	bne.n	10bec <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   10b54:	7cfb      	ldrb	r3, [r7, #19]
   10b56:	f003 0377 	and.w	r3, r3, #119	; 0x77
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	d002      	beq.n	10b64 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
   10b5e:	f06f 0313 	mvn.w	r3, #19
   10b62:	e0b4      	b.n	10cce <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
   10b64:	7efb      	ldrb	r3, [r7, #27]
   10b66:	2211      	movs	r2, #17
   10b68:	4619      	mov	r1, r3
   10b6a:	69f8      	ldr	r0, [r7, #28]
   10b6c:	4b5d      	ldr	r3, [pc, #372]	; (10ce4 <_usb_d_dev_ep_enable+0x200>)
   10b6e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10b70:	697b      	ldr	r3, [r7, #20]
   10b72:	8a1b      	ldrh	r3, [r3, #16]
   10b74:	039b      	lsls	r3, r3, #14
   10b76:	4c5c      	ldr	r4, [pc, #368]	; (10ce8 <_usb_d_dev_ep_enable+0x204>)
   10b78:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   10b7a:	697b      	ldr	r3, [r7, #20]
   10b7c:	8a1b      	ldrh	r3, [r3, #16]
   10b7e:	4618      	mov	r0, r3
   10b80:	4b5a      	ldr	r3, [pc, #360]	; (10cec <_usb_d_dev_ep_enable+0x208>)
   10b82:	4798      	blx	r3
   10b84:	4603      	mov	r3, r0
   10b86:	071b      	lsls	r3, r3, #28
   10b88:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10b8c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10b90:	68fb      	ldr	r3, [r7, #12]
   10b92:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
   10b94:	68fb      	ldr	r3, [r7, #12]
   10b96:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   10b9a:	697b      	ldr	r3, [r7, #20]
   10b9c:	8a1b      	ldrh	r3, [r3, #16]
   10b9e:	f3c3 050d 	ubfx	r5, r3, #0, #14
   10ba2:	697b      	ldr	r3, [r7, #20]
   10ba4:	8a1b      	ldrh	r3, [r3, #16]
   10ba6:	4618      	mov	r0, r3
   10ba8:	4b50      	ldr	r3, [pc, #320]	; (10cec <_usb_d_dev_ep_enable+0x208>)
   10baa:	4798      	blx	r3
   10bac:	4603      	mov	r3, r0
   10bae:	071b      	lsls	r3, r3, #28
   10bb0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10bb4:	432b      	orrs	r3, r5
   10bb6:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
   10bb8:	7efb      	ldrb	r3, [r7, #27]
   10bba:	2200      	movs	r2, #0
   10bbc:	2100      	movs	r1, #0
   10bbe:	4618      	mov	r0, r3
   10bc0:	4b4b      	ldr	r3, [pc, #300]	; (10cf0 <_usb_d_dev_ep_enable+0x20c>)
   10bc2:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
   10bc4:	7efb      	ldrb	r3, [r7, #27]
   10bc6:	2200      	movs	r2, #0
   10bc8:	2101      	movs	r1, #1
   10bca:	4618      	mov	r0, r3
   10bcc:	4b49      	ldr	r3, [pc, #292]	; (10cf4 <_usb_d_dev_ep_enable+0x210>)
   10bce:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
   10bd0:	7efb      	ldrb	r3, [r7, #27]
   10bd2:	2100      	movs	r1, #0
   10bd4:	4618      	mov	r0, r3
   10bd6:	4b48      	ldr	r3, [pc, #288]	; (10cf8 <_usb_d_dev_ep_enable+0x214>)
   10bd8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
   10bda:	7efb      	ldrb	r3, [r7, #27]
   10bdc:	2101      	movs	r1, #1
   10bde:	4618      	mov	r0, r3
   10be0:	4b45      	ldr	r3, [pc, #276]	; (10cf8 <_usb_d_dev_ep_enable+0x214>)
   10be2:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
   10be4:	6978      	ldr	r0, [r7, #20]
   10be6:	4b45      	ldr	r3, [pc, #276]	; (10cfc <_usb_d_dev_ep_enable+0x218>)
   10be8:	4798      	blx	r3
   10bea:	e06f      	b.n	10ccc <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
   10bec:	7ebb      	ldrb	r3, [r7, #26]
   10bee:	2b00      	cmp	r3, #0
   10bf0:	d038      	beq.n	10c64 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   10bf2:	7cfb      	ldrb	r3, [r7, #19]
   10bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d002      	beq.n	10c02 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
   10bfc:	f06f 0313 	mvn.w	r3, #19
   10c00:	e065      	b.n	10cce <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   10c02:	697b      	ldr	r3, [r7, #20]
   10c04:	7cdb      	ldrb	r3, [r3, #19]
   10c06:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10c0a:	b2db      	uxtb	r3, r3
   10c0c:	011b      	lsls	r3, r3, #4
   10c0e:	b2db      	uxtb	r3, r3
   10c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
   10c14:	b2da      	uxtb	r2, r3
   10c16:	7cfb      	ldrb	r3, [r7, #19]
   10c18:	4313      	orrs	r3, r2
   10c1a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
   10c1c:	7cfa      	ldrb	r2, [r7, #19]
   10c1e:	7efb      	ldrb	r3, [r7, #27]
   10c20:	4619      	mov	r1, r3
   10c22:	69f8      	ldr	r0, [r7, #28]
   10c24:	4b2f      	ldr	r3, [pc, #188]	; (10ce4 <_usb_d_dev_ep_enable+0x200>)
   10c26:	4798      	blx	r3

		bank[1].PCKSIZE.reg
   10c28:	68fb      	ldr	r3, [r7, #12]
   10c2a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   10c2e:	697b      	ldr	r3, [r7, #20]
   10c30:	8a1b      	ldrh	r3, [r3, #16]
   10c32:	f3c3 050d 	ubfx	r5, r3, #0, #14
   10c36:	697b      	ldr	r3, [r7, #20]
   10c38:	8a1b      	ldrh	r3, [r3, #16]
   10c3a:	4618      	mov	r0, r3
   10c3c:	4b2b      	ldr	r3, [pc, #172]	; (10cec <_usb_d_dev_ep_enable+0x208>)
   10c3e:	4798      	blx	r3
   10c40:	4603      	mov	r3, r0
   10c42:	071b      	lsls	r3, r3, #28
   10c44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10c48:	432b      	orrs	r3, r5
   10c4a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
   10c4c:	7efb      	ldrb	r3, [r7, #27]
   10c4e:	2200      	movs	r2, #0
   10c50:	2101      	movs	r1, #1
   10c52:	4618      	mov	r0, r3
   10c54:	4b27      	ldr	r3, [pc, #156]	; (10cf4 <_usb_d_dev_ep_enable+0x210>)
   10c56:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
   10c58:	7efb      	ldrb	r3, [r7, #27]
   10c5a:	2101      	movs	r1, #1
   10c5c:	4618      	mov	r0, r3
   10c5e:	4b26      	ldr	r3, [pc, #152]	; (10cf8 <_usb_d_dev_ep_enable+0x214>)
   10c60:	4798      	blx	r3
   10c62:	e033      	b.n	10ccc <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   10c64:	7cfb      	ldrb	r3, [r7, #19]
   10c66:	f003 0307 	and.w	r3, r3, #7
   10c6a:	2b00      	cmp	r3, #0
   10c6c:	d002      	beq.n	10c74 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
   10c6e:	f06f 0313 	mvn.w	r3, #19
   10c72:	e02c      	b.n	10cce <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   10c74:	697b      	ldr	r3, [r7, #20]
   10c76:	7cdb      	ldrb	r3, [r3, #19]
   10c78:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10c7c:	b2db      	uxtb	r3, r3
   10c7e:	461a      	mov	r2, r3
   10c80:	7cfb      	ldrb	r3, [r7, #19]
   10c82:	4313      	orrs	r3, r2
   10c84:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
   10c86:	7cfa      	ldrb	r2, [r7, #19]
   10c88:	7efb      	ldrb	r3, [r7, #27]
   10c8a:	4619      	mov	r1, r3
   10c8c:	69f8      	ldr	r0, [r7, #28]
   10c8e:	4b15      	ldr	r3, [pc, #84]	; (10ce4 <_usb_d_dev_ep_enable+0x200>)
   10c90:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10c92:	697b      	ldr	r3, [r7, #20]
   10c94:	8a1b      	ldrh	r3, [r3, #16]
   10c96:	039b      	lsls	r3, r3, #14
   10c98:	4c13      	ldr	r4, [pc, #76]	; (10ce8 <_usb_d_dev_ep_enable+0x204>)
   10c9a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   10c9c:	697b      	ldr	r3, [r7, #20]
   10c9e:	8a1b      	ldrh	r3, [r3, #16]
   10ca0:	4618      	mov	r0, r3
   10ca2:	4b12      	ldr	r3, [pc, #72]	; (10cec <_usb_d_dev_ep_enable+0x208>)
   10ca4:	4798      	blx	r3
   10ca6:	4603      	mov	r3, r0
   10ca8:	071b      	lsls	r3, r3, #28
   10caa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   10cae:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   10cb2:	68fb      	ldr	r3, [r7, #12]
   10cb4:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
   10cb6:	7efb      	ldrb	r3, [r7, #27]
   10cb8:	2200      	movs	r2, #0
   10cba:	2100      	movs	r1, #0
   10cbc:	4618      	mov	r0, r3
   10cbe:	4b0c      	ldr	r3, [pc, #48]	; (10cf0 <_usb_d_dev_ep_enable+0x20c>)
   10cc0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
   10cc2:	7efb      	ldrb	r3, [r7, #27]
   10cc4:	2100      	movs	r1, #0
   10cc6:	4618      	mov	r0, r3
   10cc8:	4b0b      	ldr	r3, [pc, #44]	; (10cf8 <_usb_d_dev_ep_enable+0x214>)
   10cca:	4798      	blx	r3
	}

	return USB_OK;
   10ccc:	2300      	movs	r3, #0
}
   10cce:	4618      	mov	r0, r3
   10cd0:	3720      	adds	r7, #32
   10cd2:	46bd      	mov	sp, r7
   10cd4:	bdb0      	pop	{r4, r5, r7, pc}
   10cd6:	bf00      	nop
   10cd8:	0000f8fd 	.word	0x0000f8fd
   10cdc:	0000ef83 	.word	0x0000ef83
   10ce0:	20001e2c 	.word	0x20001e2c
   10ce4:	0000ef59 	.word	0x0000ef59
   10ce8:	0fffc000 	.word	0x0fffc000
   10cec:	0000f899 	.word	0x0000f899
   10cf0:	0000f841 	.word	0x0000f841
   10cf4:	0000f7e9 	.word	0x0000f7e9
   10cf8:	0000f7b1 	.word	0x0000f7b1
   10cfc:	00010855 	.word	0x00010855

00010d00 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
   10d00:	b580      	push	{r7, lr}
   10d02:	b084      	sub	sp, #16
   10d04:	af00      	add	r7, sp, #0
   10d06:	6078      	str	r0, [r7, #4]
   10d08:	460b      	mov	r3, r1
   10d0a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10d0c:	687b      	ldr	r3, [r7, #4]
   10d0e:	7c9b      	ldrb	r3, [r3, #18]
   10d10:	f003 030f 	and.w	r3, r3, #15
   10d14:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
   10d16:	78fa      	ldrb	r2, [r7, #3]
   10d18:	7bfb      	ldrb	r3, [r7, #15]
   10d1a:	4611      	mov	r1, r2
   10d1c:	4618      	mov	r0, r3
   10d1e:	4b03      	ldr	r3, [pc, #12]	; (10d2c <_usb_d_dev_ep_stall_get+0x2c>)
   10d20:	4798      	blx	r3
   10d22:	4603      	mov	r3, r0
}
   10d24:	4618      	mov	r0, r3
   10d26:	3710      	adds	r7, #16
   10d28:	46bd      	mov	sp, r7
   10d2a:	bd80      	pop	{r7, pc}
   10d2c:	0000f3f1 	.word	0x0000f3f1

00010d30 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
   10d30:	b580      	push	{r7, lr}
   10d32:	b084      	sub	sp, #16
   10d34:	af00      	add	r7, sp, #0
   10d36:	6078      	str	r0, [r7, #4]
   10d38:	460b      	mov	r3, r1
   10d3a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10d3c:	687b      	ldr	r3, [r7, #4]
   10d3e:	7c9b      	ldrb	r3, [r3, #18]
   10d40:	f003 030f 	and.w	r3, r3, #15
   10d44:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
   10d46:	78f9      	ldrb	r1, [r7, #3]
   10d48:	7bfb      	ldrb	r3, [r7, #15]
   10d4a:	2201      	movs	r2, #1
   10d4c:	4618      	mov	r0, r3
   10d4e:	4b0a      	ldr	r3, [pc, #40]	; (10d78 <_usb_d_dev_ep_stall_set+0x48>)
   10d50:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   10d52:	78fb      	ldrb	r3, [r7, #3]
   10d54:	2220      	movs	r2, #32
   10d56:	409a      	lsls	r2, r3
   10d58:	7bfb      	ldrb	r3, [r7, #15]
   10d5a:	4611      	mov	r1, r2
   10d5c:	4618      	mov	r0, r3
   10d5e:	4b07      	ldr	r3, [pc, #28]	; (10d7c <_usb_d_dev_ep_stall_set+0x4c>)
   10d60:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
   10d62:	687a      	ldr	r2, [r7, #4]
   10d64:	7cd3      	ldrb	r3, [r2, #19]
   10d66:	f043 0308 	orr.w	r3, r3, #8
   10d6a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
   10d6c:	2300      	movs	r3, #0
}
   10d6e:	4618      	mov	r0, r3
   10d70:	3710      	adds	r7, #16
   10d72:	46bd      	mov	sp, r7
   10d74:	bd80      	pop	{r7, pc}
   10d76:	bf00      	nop
   10d78:	0000f399 	.word	0x0000f399
   10d7c:	0000f319 	.word	0x0000f319

00010d80 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
   10d80:	b580      	push	{r7, lr}
   10d82:	b084      	sub	sp, #16
   10d84:	af00      	add	r7, sp, #0
   10d86:	6078      	str	r0, [r7, #4]
   10d88:	460b      	mov	r3, r1
   10d8a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   10d8c:	687b      	ldr	r3, [r7, #4]
   10d8e:	7c9b      	ldrb	r3, [r3, #18]
   10d90:	f003 030f 	and.w	r3, r3, #15
   10d94:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
   10d96:	78fa      	ldrb	r2, [r7, #3]
   10d98:	7bfb      	ldrb	r3, [r7, #15]
   10d9a:	4611      	mov	r1, r2
   10d9c:	4618      	mov	r0, r3
   10d9e:	4b28      	ldr	r3, [pc, #160]	; (10e40 <_usb_d_dev_ep_stall_clr+0xc0>)
   10da0:	4798      	blx	r3
   10da2:	4603      	mov	r3, r0
   10da4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
   10da6:	7bbb      	ldrb	r3, [r7, #14]
   10da8:	f083 0301 	eor.w	r3, r3, #1
   10dac:	b2db      	uxtb	r3, r3
   10dae:	2b00      	cmp	r3, #0
   10db0:	d001      	beq.n	10db6 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
   10db2:	2300      	movs	r3, #0
   10db4:	e040      	b.n	10e38 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
   10db6:	78f9      	ldrb	r1, [r7, #3]
   10db8:	7bfb      	ldrb	r3, [r7, #15]
   10dba:	2200      	movs	r2, #0
   10dbc:	4618      	mov	r0, r3
   10dbe:	4b21      	ldr	r3, [pc, #132]	; (10e44 <_usb_d_dev_ep_stall_clr+0xc4>)
   10dc0:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   10dc2:	78fb      	ldrb	r3, [r7, #3]
   10dc4:	2220      	movs	r2, #32
   10dc6:	409a      	lsls	r2, r3
   10dc8:	7bfb      	ldrb	r3, [r7, #15]
   10dca:	4611      	mov	r1, r2
   10dcc:	4618      	mov	r0, r3
   10dce:	4b1e      	ldr	r3, [pc, #120]	; (10e48 <_usb_d_dev_ep_stall_clr+0xc8>)
   10dd0:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   10dd2:	78fa      	ldrb	r2, [r7, #3]
   10dd4:	7bfb      	ldrb	r3, [r7, #15]
   10dd6:	4611      	mov	r1, r2
   10dd8:	4618      	mov	r0, r3
   10dda:	4b1c      	ldr	r3, [pc, #112]	; (10e4c <_usb_d_dev_ep_stall_clr+0xcc>)
   10ddc:	4798      	blx	r3
   10dde:	4603      	mov	r3, r0
   10de0:	2b00      	cmp	r3, #0
   10de2:	d00b      	beq.n	10dfc <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
   10de4:	78fa      	ldrb	r2, [r7, #3]
   10de6:	7bfb      	ldrb	r3, [r7, #15]
   10de8:	4611      	mov	r1, r2
   10dea:	4618      	mov	r0, r3
   10dec:	4b18      	ldr	r3, [pc, #96]	; (10e50 <_usb_d_dev_ep_stall_clr+0xd0>)
   10dee:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
   10df0:	78f9      	ldrb	r1, [r7, #3]
   10df2:	7bfb      	ldrb	r3, [r7, #15]
   10df4:	2200      	movs	r2, #0
   10df6:	4618      	mov	r0, r3
   10df8:	4b16      	ldr	r3, [pc, #88]	; (10e54 <_usb_d_dev_ep_stall_clr+0xd4>)
   10dfa:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   10dfc:	687b      	ldr	r3, [r7, #4]
   10dfe:	7cdb      	ldrb	r3, [r3, #19]
   10e00:	f003 0307 	and.w	r3, r3, #7
   10e04:	b2db      	uxtb	r3, r3
   10e06:	2b01      	cmp	r3, #1
   10e08:	d110      	bne.n	10e2c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   10e0a:	7bfb      	ldrb	r3, [r7, #15]
   10e0c:	4619      	mov	r1, r3
   10e0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
   10e12:	4b11      	ldr	r3, [pc, #68]	; (10e58 <_usb_d_dev_ep_stall_clr+0xd8>)
   10e14:	4798      	blx	r3
   10e16:	4603      	mov	r3, r0
   10e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
   10e1c:	2b00      	cmp	r3, #0
   10e1e:	d10a      	bne.n	10e36 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
   10e20:	687a      	ldr	r2, [r7, #4]
   10e22:	7cd3      	ldrb	r3, [r2, #19]
   10e24:	f36f 03c3 	bfc	r3, #3, #1
   10e28:	74d3      	strb	r3, [r2, #19]
   10e2a:	e004      	b.n	10e36 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
   10e2c:	687a      	ldr	r2, [r7, #4]
   10e2e:	7cd3      	ldrb	r3, [r2, #19]
   10e30:	f36f 03c3 	bfc	r3, #3, #1
   10e34:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
   10e36:	2300      	movs	r3, #0
}
   10e38:	4618      	mov	r0, r3
   10e3a:	3710      	adds	r7, #16
   10e3c:	46bd      	mov	sp, r7
   10e3e:	bd80      	pop	{r7, pc}
   10e40:	0000f3f1 	.word	0x0000f3f1
   10e44:	0000f399 	.word	0x0000f399
   10e48:	0000f341 	.word	0x0000f341
   10e4c:	0000f435 	.word	0x0000f435
   10e50:	0000f479 	.word	0x0000f479
   10e54:	0000f565 	.word	0x0000f565
   10e58:	0000ee21 	.word	0x0000ee21

00010e5c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
   10e5c:	b580      	push	{r7, lr}
   10e5e:	b086      	sub	sp, #24
   10e60:	af00      	add	r7, sp, #0
   10e62:	4603      	mov	r3, r0
   10e64:	460a      	mov	r2, r1
   10e66:	71fb      	strb	r3, [r7, #7]
   10e68:	4613      	mov	r3, r2
   10e6a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
   10e6c:	79fb      	ldrb	r3, [r7, #7]
   10e6e:	f003 030f 	and.w	r3, r3, #15
   10e72:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
   10e74:	79fb      	ldrb	r3, [r7, #7]
   10e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	bf14      	ite	ne
   10e7e:	2301      	movne	r3, #1
   10e80:	2300      	moveq	r3, #0
   10e82:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   10e84:	7cba      	ldrb	r2, [r7, #18]
   10e86:	7cfb      	ldrb	r3, [r7, #19]
   10e88:	4611      	mov	r1, r2
   10e8a:	4618      	mov	r0, r3
   10e8c:	4b13      	ldr	r3, [pc, #76]	; (10edc <_usb_d_dev_ep_stall+0x80>)
   10e8e:	4798      	blx	r3
   10e90:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
   10e92:	7cfb      	ldrb	r3, [r7, #19]
   10e94:	2b04      	cmp	r3, #4
   10e96:	d902      	bls.n	10e9e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
   10e98:	f06f 0311 	mvn.w	r3, #17
   10e9c:	e01a      	b.n	10ed4 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
   10e9e:	79bb      	ldrb	r3, [r7, #6]
   10ea0:	2b01      	cmp	r3, #1
   10ea2:	d106      	bne.n	10eb2 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   10ea4:	7cbb      	ldrb	r3, [r7, #18]
   10ea6:	4619      	mov	r1, r3
   10ea8:	68f8      	ldr	r0, [r7, #12]
   10eaa:	4b0d      	ldr	r3, [pc, #52]	; (10ee0 <_usb_d_dev_ep_stall+0x84>)
   10eac:	4798      	blx	r3
   10eae:	6178      	str	r0, [r7, #20]
   10eb0:	e00f      	b.n	10ed2 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
   10eb2:	79bb      	ldrb	r3, [r7, #6]
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d106      	bne.n	10ec6 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   10eb8:	7cbb      	ldrb	r3, [r7, #18]
   10eba:	4619      	mov	r1, r3
   10ebc:	68f8      	ldr	r0, [r7, #12]
   10ebe:	4b09      	ldr	r3, [pc, #36]	; (10ee4 <_usb_d_dev_ep_stall+0x88>)
   10ec0:	4798      	blx	r3
   10ec2:	6178      	str	r0, [r7, #20]
   10ec4:	e005      	b.n	10ed2 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
   10ec6:	7cbb      	ldrb	r3, [r7, #18]
   10ec8:	4619      	mov	r1, r3
   10eca:	68f8      	ldr	r0, [r7, #12]
   10ecc:	4b06      	ldr	r3, [pc, #24]	; (10ee8 <_usb_d_dev_ep_stall+0x8c>)
   10ece:	4798      	blx	r3
   10ed0:	6178      	str	r0, [r7, #20]
	}
	return rc;
   10ed2:	697b      	ldr	r3, [r7, #20]
}
   10ed4:	4618      	mov	r0, r3
   10ed6:	3718      	adds	r7, #24
   10ed8:	46bd      	mov	sp, r7
   10eda:	bd80      	pop	{r7, pc}
   10edc:	0000f8fd 	.word	0x0000f8fd
   10ee0:	00010d31 	.word	0x00010d31
   10ee4:	00010d81 	.word	0x00010d81
   10ee8:	00010d01 	.word	0x00010d01

00010eec <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
   10eec:	b580      	push	{r7, lr}
   10eee:	b082      	sub	sp, #8
   10ef0:	af00      	add	r7, sp, #0
   10ef2:	6078      	str	r0, [r7, #4]
   10ef4:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   10ef6:	687b      	ldr	r3, [r7, #4]
   10ef8:	7c9b      	ldrb	r3, [r3, #18]
   10efa:	2bff      	cmp	r3, #255	; 0xff
   10efc:	d014      	beq.n	10f28 <_usb_d_dev_trans_done+0x3c>
   10efe:	687b      	ldr	r3, [r7, #4]
   10f00:	7cdb      	ldrb	r3, [r3, #19]
   10f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10f06:	b2db      	uxtb	r3, r3
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d00d      	beq.n	10f28 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
   10f0c:	687a      	ldr	r2, [r7, #4]
   10f0e:	7cd3      	ldrb	r3, [r2, #19]
   10f10:	f36f 1386 	bfc	r3, #6, #1
   10f14:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   10f16:	4b06      	ldr	r3, [pc, #24]	; (10f30 <_usb_d_dev_trans_done+0x44>)
   10f18:	691b      	ldr	r3, [r3, #16]
   10f1a:	687a      	ldr	r2, [r7, #4]
   10f1c:	7c90      	ldrb	r0, [r2, #18]
   10f1e:	687a      	ldr	r2, [r7, #4]
   10f20:	6892      	ldr	r2, [r2, #8]
   10f22:	6839      	ldr	r1, [r7, #0]
   10f24:	4798      	blx	r3
   10f26:	e000      	b.n	10f2a <_usb_d_dev_trans_done+0x3e>
		return;
   10f28:	bf00      	nop
}
   10f2a:	3708      	adds	r7, #8
   10f2c:	46bd      	mov	sp, r7
   10f2e:	bd80      	pop	{r7, pc}
   10f30:	20001d64 	.word	0x20001d64

00010f34 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
   10f34:	b580      	push	{r7, lr}
   10f36:	b086      	sub	sp, #24
   10f38:	af00      	add	r7, sp, #0
   10f3a:	60f8      	str	r0, [r7, #12]
   10f3c:	460b      	mov	r3, r1
   10f3e:	607a      	str	r2, [r7, #4]
   10f40:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   10f42:	68fb      	ldr	r3, [r7, #12]
   10f44:	7c9b      	ldrb	r3, [r3, #18]
   10f46:	f003 030f 	and.w	r3, r3, #15
   10f4a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   10f4c:	4b1f      	ldr	r3, [pc, #124]	; (10fcc <_usb_d_dev_trans_stop+0x98>)
   10f4e:	881b      	ldrh	r3, [r3, #0]
   10f50:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   10f52:	68fb      	ldr	r3, [r7, #12]
   10f54:	7c9b      	ldrb	r3, [r3, #18]
   10f56:	2bff      	cmp	r3, #255	; 0xff
   10f58:	d033      	beq.n	10fc2 <_usb_d_dev_trans_stop+0x8e>
   10f5a:	68fb      	ldr	r3, [r7, #12]
   10f5c:	7cdb      	ldrb	r3, [r3, #19]
   10f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10f62:	b2db      	uxtb	r3, r3
   10f64:	2b00      	cmp	r3, #0
   10f66:	d02c      	beq.n	10fc2 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
   10f68:	7afb      	ldrb	r3, [r7, #11]
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	d006      	beq.n	10f7c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
   10f6e:	7dfb      	ldrb	r3, [r7, #23]
   10f70:	2200      	movs	r2, #0
   10f72:	2101      	movs	r1, #1
   10f74:	4618      	mov	r0, r3
   10f76:	4b16      	ldr	r3, [pc, #88]	; (10fd0 <_usb_d_dev_trans_stop+0x9c>)
   10f78:	4798      	blx	r3
   10f7a:	e005      	b.n	10f88 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
   10f7c:	7dfb      	ldrb	r3, [r7, #23]
   10f7e:	2200      	movs	r2, #0
   10f80:	2100      	movs	r1, #0
   10f82:	4618      	mov	r0, r3
   10f84:	4b13      	ldr	r3, [pc, #76]	; (10fd4 <_usb_d_dev_trans_stop+0xa0>)
   10f86:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   10f88:	7afb      	ldrb	r3, [r7, #11]
   10f8a:	f107 0218 	add.w	r2, r7, #24
   10f8e:	4413      	add	r3, r2
   10f90:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   10f94:	461a      	mov	r2, r3
   10f96:	7dfb      	ldrb	r3, [r7, #23]
   10f98:	4611      	mov	r1, r2
   10f9a:	4618      	mov	r0, r3
   10f9c:	4b0e      	ldr	r3, [pc, #56]	; (10fd8 <_usb_d_dev_trans_stop+0xa4>)
   10f9e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
   10fa0:	7afb      	ldrb	r3, [r7, #11]
   10fa2:	f107 0218 	add.w	r2, r7, #24
   10fa6:	4413      	add	r3, r2
   10fa8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
   10fac:	461a      	mov	r2, r3
   10fae:	7dfb      	ldrb	r3, [r7, #23]
   10fb0:	4611      	mov	r1, r2
   10fb2:	4618      	mov	r0, r3
   10fb4:	4b09      	ldr	r3, [pc, #36]	; (10fdc <_usb_d_dev_trans_stop+0xa8>)
   10fb6:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
   10fb8:	6879      	ldr	r1, [r7, #4]
   10fba:	68f8      	ldr	r0, [r7, #12]
   10fbc:	4b08      	ldr	r3, [pc, #32]	; (10fe0 <_usb_d_dev_trans_stop+0xac>)
   10fbe:	4798      	blx	r3
   10fc0:	e000      	b.n	10fc4 <_usb_d_dev_trans_stop+0x90>
		return;
   10fc2:	bf00      	nop
}
   10fc4:	3718      	adds	r7, #24
   10fc6:	46bd      	mov	sp, r7
   10fc8:	bd80      	pop	{r7, pc}
   10fca:	bf00      	nop
   10fcc:	0001530c 	.word	0x0001530c
   10fd0:	0000f7e9 	.word	0x0000f7e9
   10fd4:	0000f841 	.word	0x0000f841
   10fd8:	0000f2f1 	.word	0x0000f2f1
   10fdc:	0000f341 	.word	0x0000f341
   10fe0:	00010eed 	.word	0x00010eed

00010fe4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   10fe4:	b580      	push	{r7, lr}
   10fe6:	b086      	sub	sp, #24
   10fe8:	af00      	add	r7, sp, #0
   10fea:	4603      	mov	r3, r0
   10fec:	6039      	str	r1, [r7, #0]
   10fee:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
   10ff0:	79fb      	ldrb	r3, [r7, #7]
   10ff2:	f003 030f 	and.w	r3, r3, #15
   10ff6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   10ff8:	7dfb      	ldrb	r3, [r7, #23]
   10ffa:	015b      	lsls	r3, r3, #5
   10ffc:	4a1e      	ldr	r2, [pc, #120]	; (11078 <_usb_d_dev_ep_read_req+0x94>)
   10ffe:	4413      	add	r3, r2
   11000:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
   11002:	693b      	ldr	r3, [r7, #16]
   11004:	681b      	ldr	r3, [r3, #0]
   11006:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   11008:	693b      	ldr	r3, [r7, #16]
   1100a:	685b      	ldr	r3, [r3, #4]
   1100c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11010:	b29b      	uxth	r3, r3
   11012:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   11014:	7dfb      	ldrb	r3, [r7, #23]
   11016:	2b04      	cmp	r3, #4
   11018:	d802      	bhi.n	11020 <_usb_d_dev_ep_read_req+0x3c>
   1101a:	683b      	ldr	r3, [r7, #0]
   1101c:	2b00      	cmp	r3, #0
   1101e:	d102      	bne.n	11026 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
   11020:	f06f 0311 	mvn.w	r3, #17
   11024:	e023      	b.n	1106e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   11026:	7dfb      	ldrb	r3, [r7, #23]
   11028:	4618      	mov	r0, r3
   1102a:	4b14      	ldr	r3, [pc, #80]	; (1107c <_usb_d_dev_ep_read_req+0x98>)
   1102c:	4798      	blx	r3
   1102e:	4603      	mov	r3, r0
   11030:	f083 0301 	eor.w	r3, r3, #1
   11034:	b2db      	uxtb	r3, r3
   11036:	2b00      	cmp	r3, #0
   11038:	d002      	beq.n	11040 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
   1103a:	f06f 0312 	mvn.w	r3, #18
   1103e:	e016      	b.n	1106e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
   11040:	7dfb      	ldrb	r3, [r7, #23]
   11042:	4618      	mov	r0, r3
   11044:	4b0e      	ldr	r3, [pc, #56]	; (11080 <_usb_d_dev_ep_read_req+0x9c>)
   11046:	4798      	blx	r3
   11048:	4603      	mov	r3, r0
   1104a:	f083 0301 	eor.w	r3, r3, #1
   1104e:	b2db      	uxtb	r3, r3
   11050:	2b00      	cmp	r3, #0
   11052:	d001      	beq.n	11058 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
   11054:	2300      	movs	r3, #0
   11056:	e00a      	b.n	1106e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
   11058:	68fb      	ldr	r3, [r7, #12]
   1105a:	2208      	movs	r2, #8
   1105c:	4619      	mov	r1, r3
   1105e:	6838      	ldr	r0, [r7, #0]
   11060:	4b08      	ldr	r3, [pc, #32]	; (11084 <_usb_d_dev_ep_read_req+0xa0>)
   11062:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
   11064:	7dfb      	ldrb	r3, [r7, #23]
   11066:	4618      	mov	r0, r3
   11068:	4b07      	ldr	r3, [pc, #28]	; (11088 <_usb_d_dev_ep_read_req+0xa4>)
   1106a:	4798      	blx	r3

	return bytes;
   1106c:	897b      	ldrh	r3, [r7, #10]
}
   1106e:	4618      	mov	r0, r3
   11070:	3718      	adds	r7, #24
   11072:	46bd      	mov	sp, r7
   11074:	bd80      	pop	{r7, pc}
   11076:	bf00      	nop
   11078:	20001e2c 	.word	0x20001e2c
   1107c:	0000f369 	.word	0x0000f369
   11080:	0000f515 	.word	0x0000f515
   11084:	00013fd5 	.word	0x00013fd5
   11088:	0000f545 	.word	0x0000f545

0001108c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   1108c:	b580      	push	{r7, lr}
   1108e:	b086      	sub	sp, #24
   11090:	af00      	add	r7, sp, #0
   11092:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   11094:	687b      	ldr	r3, [r7, #4]
   11096:	7a1b      	ldrb	r3, [r3, #8]
   11098:	f003 030f 	and.w	r3, r3, #15
   1109c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   1109e:	687b      	ldr	r3, [r7, #4]
   110a0:	7a1b      	ldrb	r3, [r3, #8]
   110a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   110a6:	2b00      	cmp	r3, #0
   110a8:	bf14      	ite	ne
   110aa:	2301      	movne	r3, #1
   110ac:	2300      	moveq	r3, #0
   110ae:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   110b0:	7d7a      	ldrb	r2, [r7, #21]
   110b2:	7dbb      	ldrb	r3, [r7, #22]
   110b4:	4611      	mov	r1, r2
   110b6:	4618      	mov	r0, r3
   110b8:	4b5f      	ldr	r3, [pc, #380]	; (11238 <_usb_d_dev_ep_trans+0x1ac>)
   110ba:	4798      	blx	r3
   110bc:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   110be:	693b      	ldr	r3, [r7, #16]
   110c0:	8a1b      	ldrh	r3, [r3, #16]
   110c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
   110c6:	4293      	cmp	r3, r2
   110c8:	d004      	beq.n	110d4 <_usb_d_dev_ep_trans+0x48>
   110ca:	693b      	ldr	r3, [r7, #16]
   110cc:	8a1b      	ldrh	r3, [r3, #16]
   110ce:	3b01      	subs	r3, #1
   110d0:	b29b      	uxth	r3, r3
   110d2:	e001      	b.n	110d8 <_usb_d_dev_ep_trans+0x4c>
   110d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
   110d8:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
   110da:	687b      	ldr	r3, [r7, #4]
   110dc:	685a      	ldr	r2, [r3, #4]
   110de:	89fb      	ldrh	r3, [r7, #14]
   110e0:	4013      	ands	r3, r2
   110e2:	2b00      	cmp	r3, #0
   110e4:	bf14      	ite	ne
   110e6:	2301      	movne	r3, #1
   110e8:	2300      	moveq	r3, #0
   110ea:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
   110ec:	2300      	movs	r3, #0
   110ee:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   110f0:	7dbb      	ldrb	r3, [r7, #22]
   110f2:	2b04      	cmp	r3, #4
   110f4:	d902      	bls.n	110fc <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
   110f6:	f06f 0311 	mvn.w	r3, #17
   110fa:	e098      	b.n	1122e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   110fc:	687b      	ldr	r3, [r7, #4]
   110fe:	681b      	ldr	r3, [r3, #0]
   11100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   11104:	d31a      	bcc.n	1113c <_usb_d_dev_ep_trans+0xb0>
   11106:	687b      	ldr	r3, [r7, #4]
   11108:	681b      	ldr	r3, [r3, #0]
   1110a:	461a      	mov	r2, r3
   1110c:	687b      	ldr	r3, [r7, #4]
   1110e:	685b      	ldr	r3, [r3, #4]
   11110:	4413      	add	r3, r2
   11112:	4a4a      	ldr	r2, [pc, #296]	; (1123c <_usb_d_dev_ep_trans+0x1b0>)
   11114:	4293      	cmp	r3, r2
   11116:	d811      	bhi.n	1113c <_usb_d_dev_ep_trans+0xb0>
   11118:	687b      	ldr	r3, [r7, #4]
   1111a:	681b      	ldr	r3, [r3, #0]
   1111c:	f003 0303 	and.w	r3, r3, #3
   11120:	2b00      	cmp	r3, #0
   11122:	d10b      	bne.n	1113c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
   11124:	7d7b      	ldrb	r3, [r7, #21]
   11126:	f083 0301 	eor.w	r3, r3, #1
   1112a:	b2db      	uxtb	r3, r3
   1112c:	2b00      	cmp	r3, #0
   1112e:	d00e      	beq.n	1114e <_usb_d_dev_ep_trans+0xc2>
   11130:	687b      	ldr	r3, [r7, #4]
   11132:	685b      	ldr	r3, [r3, #4]
   11134:	693a      	ldr	r2, [r7, #16]
   11136:	8a12      	ldrh	r2, [r2, #16]
   11138:	4293      	cmp	r3, r2
   1113a:	d208      	bcs.n	1114e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
   1113c:	693b      	ldr	r3, [r7, #16]
   1113e:	68db      	ldr	r3, [r3, #12]
   11140:	2b00      	cmp	r3, #0
   11142:	d102      	bne.n	1114a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
   11144:	f06f 0312 	mvn.w	r3, #18
   11148:	e071      	b.n	1122e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
   1114a:	2301      	movs	r3, #1
   1114c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
   1114e:	7d7b      	ldrb	r3, [r7, #21]
   11150:	f083 0301 	eor.w	r3, r3, #1
   11154:	b2db      	uxtb	r3, r3
   11156:	2b00      	cmp	r3, #0
   11158:	d009      	beq.n	1116e <_usb_d_dev_ep_trans+0xe2>
   1115a:	7b7b      	ldrb	r3, [r7, #13]
   1115c:	2b00      	cmp	r3, #0
   1115e:	d006      	beq.n	1116e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
   11160:	693b      	ldr	r3, [r7, #16]
   11162:	68db      	ldr	r3, [r3, #12]
   11164:	2b00      	cmp	r3, #0
   11166:	d102      	bne.n	1116e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
   11168:	f06f 0311 	mvn.w	r3, #17
   1116c:	e05f      	b.n	1122e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   1116e:	693b      	ldr	r3, [r7, #16]
   11170:	7cdb      	ldrb	r3, [r3, #19]
   11172:	f003 0308 	and.w	r3, r3, #8
   11176:	b2db      	uxtb	r3, r3
   11178:	2b00      	cmp	r3, #0
   1117a:	d001      	beq.n	11180 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
   1117c:	2302      	movs	r3, #2
   1117e:	e056      	b.n	1122e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
   11180:	f107 0308 	add.w	r3, r7, #8
   11184:	4618      	mov	r0, r3
   11186:	4b2e      	ldr	r3, [pc, #184]	; (11240 <_usb_d_dev_ep_trans+0x1b4>)
   11188:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
   1118a:	693b      	ldr	r3, [r7, #16]
   1118c:	7cdb      	ldrb	r3, [r3, #19]
   1118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11192:	b2db      	uxtb	r3, r3
   11194:	2b00      	cmp	r3, #0
   11196:	d006      	beq.n	111a6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
   11198:	f107 0308 	add.w	r3, r7, #8
   1119c:	4618      	mov	r0, r3
   1119e:	4b29      	ldr	r3, [pc, #164]	; (11244 <_usb_d_dev_ep_trans+0x1b8>)
   111a0:	4798      	blx	r3
		return USB_BUSY;
   111a2:	2301      	movs	r3, #1
   111a4:	e043      	b.n	1122e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
   111a6:	693a      	ldr	r2, [r7, #16]
   111a8:	7cd3      	ldrb	r3, [r2, #19]
   111aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111ae:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
   111b0:	f107 0308 	add.w	r3, r7, #8
   111b4:	4618      	mov	r0, r3
   111b6:	4b23      	ldr	r3, [pc, #140]	; (11244 <_usb_d_dev_ep_trans+0x1b8>)
   111b8:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
   111ba:	687b      	ldr	r3, [r7, #4]
   111bc:	681a      	ldr	r2, [r3, #0]
   111be:	693b      	ldr	r3, [r7, #16]
   111c0:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
   111c2:	687b      	ldr	r3, [r7, #4]
   111c4:	685a      	ldr	r2, [r3, #4]
   111c6:	693b      	ldr	r3, [r7, #16]
   111c8:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
   111ca:	693b      	ldr	r3, [r7, #16]
   111cc:	2200      	movs	r2, #0
   111ce:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
   111d0:	693a      	ldr	r2, [r7, #16]
   111d2:	7cd3      	ldrb	r3, [r2, #19]
   111d4:	7d79      	ldrb	r1, [r7, #21]
   111d6:	f361 13c7 	bfi	r3, r1, #7, #1
   111da:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
   111dc:	693a      	ldr	r2, [r7, #16]
   111de:	7cd3      	ldrb	r3, [r2, #19]
   111e0:	7df9      	ldrb	r1, [r7, #23]
   111e2:	f361 1345 	bfi	r3, r1, #5, #1
   111e6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   111e8:	687b      	ldr	r3, [r7, #4]
   111ea:	7a5b      	ldrb	r3, [r3, #9]
   111ec:	2b00      	cmp	r3, #0
   111ee:	d007      	beq.n	11200 <_usb_d_dev_ep_trans+0x174>
   111f0:	7b7b      	ldrb	r3, [r7, #13]
   111f2:	f083 0301 	eor.w	r3, r3, #1
   111f6:	b2db      	uxtb	r3, r3
   111f8:	2b00      	cmp	r3, #0
   111fa:	d001      	beq.n	11200 <_usb_d_dev_ep_trans+0x174>
   111fc:	2301      	movs	r3, #1
   111fe:	e000      	b.n	11202 <_usb_d_dev_ep_trans+0x176>
   11200:	2300      	movs	r3, #0
   11202:	b2db      	uxtb	r3, r3
   11204:	f003 0301 	and.w	r3, r3, #1
   11208:	b2d9      	uxtb	r1, r3
   1120a:	693a      	ldr	r2, [r7, #16]
   1120c:	7cd3      	ldrb	r3, [r2, #19]
   1120e:	f361 1304 	bfi	r3, r1, #4, #1
   11212:	74d3      	strb	r3, [r2, #19]

	if (dir) {
   11214:	7d7b      	ldrb	r3, [r7, #21]
   11216:	2b00      	cmp	r3, #0
   11218:	d004      	beq.n	11224 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
   1121a:	2100      	movs	r1, #0
   1121c:	6938      	ldr	r0, [r7, #16]
   1121e:	4b0a      	ldr	r3, [pc, #40]	; (11248 <_usb_d_dev_ep_trans+0x1bc>)
   11220:	4798      	blx	r3
   11222:	e003      	b.n	1122c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
   11224:	2100      	movs	r1, #0
   11226:	6938      	ldr	r0, [r7, #16]
   11228:	4b08      	ldr	r3, [pc, #32]	; (1124c <_usb_d_dev_ep_trans+0x1c0>)
   1122a:	4798      	blx	r3
	}

	return ERR_NONE;
   1122c:	2300      	movs	r3, #0
}
   1122e:	4618      	mov	r0, r3
   11230:	3718      	adds	r7, #24
   11232:	46bd      	mov	sp, r7
   11234:	bd80      	pop	{r7, pc}
   11236:	bf00      	nop
   11238:	0000f8fd 	.word	0x0000f8fd
   1123c:	20041fff 	.word	0x20041fff
   11240:	00011a05 	.word	0x00011a05
   11244:	00011a2b 	.word	0x00011a2b
   11248:	0000fbc5 	.word	0x0000fbc5
   1124c:	0000fddd 	.word	0x0000fddd

00011250 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
   11250:	b480      	push	{r7}
   11252:	b085      	sub	sp, #20
   11254:	af00      	add	r7, sp, #0
   11256:	4603      	mov	r3, r0
   11258:	6039      	str	r1, [r7, #0]
   1125a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   1125c:	683b      	ldr	r3, [r7, #0]
   1125e:	2b00      	cmp	r3, #0
   11260:	d001      	beq.n	11266 <_usb_d_dev_register_callback+0x16>
   11262:	683b      	ldr	r3, [r7, #0]
   11264:	e000      	b.n	11268 <_usb_d_dev_register_callback+0x18>
   11266:	4b0a      	ldr	r3, [pc, #40]	; (11290 <_usb_d_dev_register_callback+0x40>)
   11268:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
   1126a:	79fb      	ldrb	r3, [r7, #7]
   1126c:	2b01      	cmp	r3, #1
   1126e:	d103      	bne.n	11278 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   11270:	4a08      	ldr	r2, [pc, #32]	; (11294 <_usb_d_dev_register_callback+0x44>)
   11272:	68fb      	ldr	r3, [r7, #12]
   11274:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
   11276:	e005      	b.n	11284 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
   11278:	79fb      	ldrb	r3, [r7, #7]
   1127a:	2b00      	cmp	r3, #0
   1127c:	d102      	bne.n	11284 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   1127e:	4a05      	ldr	r2, [pc, #20]	; (11294 <_usb_d_dev_register_callback+0x44>)
   11280:	68fb      	ldr	r3, [r7, #12]
   11282:	6013      	str	r3, [r2, #0]
}
   11284:	bf00      	nop
   11286:	3714      	adds	r7, #20
   11288:	46bd      	mov	sp, r7
   1128a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1128e:	4770      	bx	lr
   11290:	0000f185 	.word	0x0000f185
   11294:	20001d64 	.word	0x20001d64

00011298 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
   11298:	b480      	push	{r7}
   1129a:	b085      	sub	sp, #20
   1129c:	af00      	add	r7, sp, #0
   1129e:	4603      	mov	r3, r0
   112a0:	6039      	str	r1, [r7, #0]
   112a2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   112a4:	683b      	ldr	r3, [r7, #0]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d001      	beq.n	112ae <_usb_d_dev_register_ep_callback+0x16>
   112aa:	683b      	ldr	r3, [r7, #0]
   112ac:	e000      	b.n	112b0 <_usb_d_dev_register_ep_callback+0x18>
   112ae:	4b0e      	ldr	r3, [pc, #56]	; (112e8 <_usb_d_dev_register_ep_callback+0x50>)
   112b0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   112b2:	79fb      	ldrb	r3, [r7, #7]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d103      	bne.n	112c0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   112b8:	4a0c      	ldr	r2, [pc, #48]	; (112ec <_usb_d_dev_register_ep_callback+0x54>)
   112ba:	68fb      	ldr	r3, [r7, #12]
   112bc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   112be:	e00c      	b.n	112da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   112c0:	79fb      	ldrb	r3, [r7, #7]
   112c2:	2b01      	cmp	r3, #1
   112c4:	d103      	bne.n	112ce <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   112c6:	4a09      	ldr	r2, [pc, #36]	; (112ec <_usb_d_dev_register_ep_callback+0x54>)
   112c8:	68fb      	ldr	r3, [r7, #12]
   112ca:	60d3      	str	r3, [r2, #12]
}
   112cc:	e005      	b.n	112da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   112ce:	79fb      	ldrb	r3, [r7, #7]
   112d0:	2b02      	cmp	r3, #2
   112d2:	d102      	bne.n	112da <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   112d4:	4a05      	ldr	r2, [pc, #20]	; (112ec <_usb_d_dev_register_ep_callback+0x54>)
   112d6:	68fb      	ldr	r3, [r7, #12]
   112d8:	6113      	str	r3, [r2, #16]
}
   112da:	bf00      	nop
   112dc:	3714      	adds	r7, #20
   112de:	46bd      	mov	sp, r7
   112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   112e4:	4770      	bx	lr
   112e6:	bf00      	nop
   112e8:	0000f185 	.word	0x0000f185
   112ec:	20001d64 	.word	0x20001d64

000112f0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   112f0:	b580      	push	{r7, lr}
   112f2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   112f4:	4b01      	ldr	r3, [pc, #4]	; (112fc <USB_0_Handler+0xc>)
   112f6:	4798      	blx	r3
}
   112f8:	bf00      	nop
   112fa:	bd80      	pop	{r7, pc}
   112fc:	000105b5 	.word	0x000105b5

00011300 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   11300:	b580      	push	{r7, lr}
   11302:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   11304:	4b01      	ldr	r3, [pc, #4]	; (1130c <USB_1_Handler+0xc>)
   11306:	4798      	blx	r3
}
   11308:	bf00      	nop
   1130a:	bd80      	pop	{r7, pc}
   1130c:	000105b5 	.word	0x000105b5

00011310 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   11310:	b580      	push	{r7, lr}
   11312:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   11314:	4b01      	ldr	r3, [pc, #4]	; (1131c <USB_2_Handler+0xc>)
   11316:	4798      	blx	r3
}
   11318:	bf00      	nop
   1131a:	bd80      	pop	{r7, pc}
   1131c:	000105b5 	.word	0x000105b5

00011320 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   11320:	b580      	push	{r7, lr}
   11322:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   11324:	4b01      	ldr	r3, [pc, #4]	; (1132c <USB_3_Handler+0xc>)
   11326:	4798      	blx	r3
}
   11328:	bf00      	nop
   1132a:	bd80      	pop	{r7, pc}
   1132c:	000105b5 	.word	0x000105b5

00011330 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   11330:	b480      	push	{r7}
   11332:	b083      	sub	sp, #12
   11334:	af00      	add	r7, sp, #0
   11336:	6078      	str	r0, [r7, #4]
   11338:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   1133a:	bf00      	nop
   1133c:	687b      	ldr	r3, [r7, #4]
   1133e:	689a      	ldr	r2, [r3, #8]
   11340:	683b      	ldr	r3, [r7, #0]
   11342:	4013      	ands	r3, r2
   11344:	2b00      	cmp	r3, #0
   11346:	d1f9      	bne.n	1133c <hri_wdt_wait_for_sync+0xc>
	};
}
   11348:	bf00      	nop
   1134a:	370c      	adds	r7, #12
   1134c:	46bd      	mov	sp, r7
   1134e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11352:	4770      	bx	lr

00011354 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   11354:	b580      	push	{r7, lr}
   11356:	b084      	sub	sp, #16
   11358:	af00      	add	r7, sp, #0
   1135a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   1135c:	210e      	movs	r1, #14
   1135e:	6878      	ldr	r0, [r7, #4]
   11360:	4b0a      	ldr	r3, [pc, #40]	; (1138c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   11362:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   11364:	687b      	ldr	r3, [r7, #4]
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   1136a:	7bfb      	ldrb	r3, [r7, #15]
   1136c:	085b      	lsrs	r3, r3, #1
   1136e:	b2db      	uxtb	r3, r3
   11370:	f003 0301 	and.w	r3, r3, #1
   11374:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   11376:	7bfb      	ldrb	r3, [r7, #15]
   11378:	2b00      	cmp	r3, #0
   1137a:	bf14      	ite	ne
   1137c:	2301      	movne	r3, #1
   1137e:	2300      	moveq	r3, #0
   11380:	b2db      	uxtb	r3, r3
}
   11382:	4618      	mov	r0, r3
   11384:	3710      	adds	r7, #16
   11386:	46bd      	mov	sp, r7
   11388:	bd80      	pop	{r7, pc}
   1138a:	bf00      	nop
   1138c:	00011331 	.word	0x00011331

00011390 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   11390:	b580      	push	{r7, lr}
   11392:	b082      	sub	sp, #8
   11394:	af00      	add	r7, sp, #0
   11396:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   11398:	687b      	ldr	r3, [r7, #4]
   1139a:	781b      	ldrb	r3, [r3, #0]
   1139c:	b2db      	uxtb	r3, r3
   1139e:	f023 0304 	bic.w	r3, r3, #4
   113a2:	b2da      	uxtb	r2, r3
   113a4:	687b      	ldr	r3, [r7, #4]
   113a6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   113a8:	210e      	movs	r1, #14
   113aa:	6878      	ldr	r0, [r7, #4]
   113ac:	4b02      	ldr	r3, [pc, #8]	; (113b8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   113ae:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   113b0:	bf00      	nop
   113b2:	3708      	adds	r7, #8
   113b4:	46bd      	mov	sp, r7
   113b6:	bd80      	pop	{r7, pc}
   113b8:	00011331 	.word	0x00011331

000113bc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   113bc:	b580      	push	{r7, lr}
   113be:	b084      	sub	sp, #16
   113c0:	af00      	add	r7, sp, #0
   113c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   113c4:	210e      	movs	r1, #14
   113c6:	6878      	ldr	r0, [r7, #4]
   113c8:	4b08      	ldr	r3, [pc, #32]	; (113ec <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   113ca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   113cc:	687b      	ldr	r3, [r7, #4]
   113ce:	781b      	ldrb	r3, [r3, #0]
   113d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   113d2:	7bfb      	ldrb	r3, [r7, #15]
   113d4:	09db      	lsrs	r3, r3, #7
   113d6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   113d8:	7bfb      	ldrb	r3, [r7, #15]
   113da:	2b00      	cmp	r3, #0
   113dc:	bf14      	ite	ne
   113de:	2301      	movne	r3, #1
   113e0:	2300      	moveq	r3, #0
   113e2:	b2db      	uxtb	r3, r3
}
   113e4:	4618      	mov	r0, r3
   113e6:	3710      	adds	r7, #16
   113e8:	46bd      	mov	sp, r7
   113ea:	bd80      	pop	{r7, pc}
   113ec:	00011331 	.word	0x00011331

000113f0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   113f0:	b480      	push	{r7}
   113f2:	b085      	sub	sp, #20
   113f4:	af00      	add	r7, sp, #0
   113f6:	6078      	str	r0, [r7, #4]
   113f8:	460b      	mov	r3, r1
   113fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   113fc:	687b      	ldr	r3, [r7, #4]
   113fe:	785b      	ldrb	r3, [r3, #1]
   11400:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   11402:	7bfb      	ldrb	r3, [r7, #15]
   11404:	f023 030f 	bic.w	r3, r3, #15
   11408:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   1140a:	78fb      	ldrb	r3, [r7, #3]
   1140c:	f003 030f 	and.w	r3, r3, #15
   11410:	b2da      	uxtb	r2, r3
   11412:	7bfb      	ldrb	r3, [r7, #15]
   11414:	4313      	orrs	r3, r2
   11416:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   11418:	687b      	ldr	r3, [r7, #4]
   1141a:	7bfa      	ldrb	r2, [r7, #15]
   1141c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   1141e:	bf00      	nop
   11420:	3714      	adds	r7, #20
   11422:	46bd      	mov	sp, r7
   11424:	f85d 7b04 	ldr.w	r7, [sp], #4
   11428:	4770      	bx	lr
	...

0001142c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   1142c:	b580      	push	{r7, lr}
   1142e:	b082      	sub	sp, #8
   11430:	af00      	add	r7, sp, #0
   11432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   11434:	687b      	ldr	r3, [r7, #4]
   11436:	2b00      	cmp	r3, #0
   11438:	d005      	beq.n	11446 <_wdt_init+0x1a>
   1143a:	687b      	ldr	r3, [r7, #4]
   1143c:	681b      	ldr	r3, [r3, #0]
   1143e:	2b00      	cmp	r3, #0
   11440:	d001      	beq.n	11446 <_wdt_init+0x1a>
   11442:	2301      	movs	r3, #1
   11444:	e000      	b.n	11448 <_wdt_init+0x1c>
   11446:	2300      	movs	r3, #0
   11448:	f003 0301 	and.w	r3, r3, #1
   1144c:	b2db      	uxtb	r3, r3
   1144e:	2250      	movs	r2, #80	; 0x50
   11450:	4913      	ldr	r1, [pc, #76]	; (114a0 <_wdt_init+0x74>)
   11452:	4618      	mov	r0, r3
   11454:	4b13      	ldr	r3, [pc, #76]	; (114a4 <_wdt_init+0x78>)
   11456:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   11458:	687b      	ldr	r3, [r7, #4]
   1145a:	681b      	ldr	r3, [r3, #0]
   1145c:	4618      	mov	r0, r3
   1145e:	4b12      	ldr	r3, [pc, #72]	; (114a8 <_wdt_init+0x7c>)
   11460:	4798      	blx	r3
   11462:	4603      	mov	r3, r0
   11464:	2b00      	cmp	r3, #0
   11466:	d107      	bne.n	11478 <_wdt_init+0x4c>
   11468:	687b      	ldr	r3, [r7, #4]
   1146a:	681b      	ldr	r3, [r3, #0]
   1146c:	4618      	mov	r0, r3
   1146e:	4b0f      	ldr	r3, [pc, #60]	; (114ac <_wdt_init+0x80>)
   11470:	4798      	blx	r3
   11472:	4603      	mov	r3, r0
   11474:	2b00      	cmp	r3, #0
   11476:	d002      	beq.n	1147e <_wdt_init+0x52>
		return ERR_DENIED;
   11478:	f06f 0310 	mvn.w	r3, #16
   1147c:	e00b      	b.n	11496 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   1147e:	687b      	ldr	r3, [r7, #4]
   11480:	681b      	ldr	r3, [r3, #0]
   11482:	4618      	mov	r0, r3
   11484:	4b0a      	ldr	r3, [pc, #40]	; (114b0 <_wdt_init+0x84>)
   11486:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   11488:	687b      	ldr	r3, [r7, #4]
   1148a:	681b      	ldr	r3, [r3, #0]
   1148c:	210b      	movs	r1, #11
   1148e:	4618      	mov	r0, r3
   11490:	4b08      	ldr	r3, [pc, #32]	; (114b4 <_wdt_init+0x88>)
   11492:	4798      	blx	r3
	}

	return ERR_NONE;
   11494:	2300      	movs	r3, #0
}
   11496:	4618      	mov	r0, r3
   11498:	3708      	adds	r7, #8
   1149a:	46bd      	mov	sp, r7
   1149c:	bd80      	pop	{r7, pc}
   1149e:	bf00      	nop
   114a0:	00015310 	.word	0x00015310
   114a4:	000099f1 	.word	0x000099f1
   114a8:	000113bd 	.word	0x000113bd
   114ac:	00011355 	.word	0x00011355
   114b0:	00011391 	.word	0x00011391
   114b4:	000113f1 	.word	0x000113f1

000114b8 <hri_port_set_DIR_reg>:
{
   114b8:	b480      	push	{r7}
   114ba:	b085      	sub	sp, #20
   114bc:	af00      	add	r7, sp, #0
   114be:	60f8      	str	r0, [r7, #12]
   114c0:	460b      	mov	r3, r1
   114c2:	607a      	str	r2, [r7, #4]
   114c4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   114c6:	7afb      	ldrb	r3, [r7, #11]
   114c8:	68fa      	ldr	r2, [r7, #12]
   114ca:	01db      	lsls	r3, r3, #7
   114cc:	4413      	add	r3, r2
   114ce:	3308      	adds	r3, #8
   114d0:	687a      	ldr	r2, [r7, #4]
   114d2:	601a      	str	r2, [r3, #0]
}
   114d4:	bf00      	nop
   114d6:	3714      	adds	r7, #20
   114d8:	46bd      	mov	sp, r7
   114da:	f85d 7b04 	ldr.w	r7, [sp], #4
   114de:	4770      	bx	lr

000114e0 <hri_port_clear_DIR_reg>:
{
   114e0:	b480      	push	{r7}
   114e2:	b085      	sub	sp, #20
   114e4:	af00      	add	r7, sp, #0
   114e6:	60f8      	str	r0, [r7, #12]
   114e8:	460b      	mov	r3, r1
   114ea:	607a      	str	r2, [r7, #4]
   114ec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   114ee:	7afb      	ldrb	r3, [r7, #11]
   114f0:	68fa      	ldr	r2, [r7, #12]
   114f2:	01db      	lsls	r3, r3, #7
   114f4:	4413      	add	r3, r2
   114f6:	3304      	adds	r3, #4
   114f8:	687a      	ldr	r2, [r7, #4]
   114fa:	601a      	str	r2, [r3, #0]
}
   114fc:	bf00      	nop
   114fe:	3714      	adds	r7, #20
   11500:	46bd      	mov	sp, r7
   11502:	f85d 7b04 	ldr.w	r7, [sp], #4
   11506:	4770      	bx	lr

00011508 <hri_port_set_OUT_reg>:
{
   11508:	b480      	push	{r7}
   1150a:	b085      	sub	sp, #20
   1150c:	af00      	add	r7, sp, #0
   1150e:	60f8      	str	r0, [r7, #12]
   11510:	460b      	mov	r3, r1
   11512:	607a      	str	r2, [r7, #4]
   11514:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11516:	7afb      	ldrb	r3, [r7, #11]
   11518:	68fa      	ldr	r2, [r7, #12]
   1151a:	01db      	lsls	r3, r3, #7
   1151c:	4413      	add	r3, r2
   1151e:	3318      	adds	r3, #24
   11520:	687a      	ldr	r2, [r7, #4]
   11522:	601a      	str	r2, [r3, #0]
}
   11524:	bf00      	nop
   11526:	3714      	adds	r7, #20
   11528:	46bd      	mov	sp, r7
   1152a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1152e:	4770      	bx	lr

00011530 <hri_port_clear_OUT_reg>:
{
   11530:	b480      	push	{r7}
   11532:	b085      	sub	sp, #20
   11534:	af00      	add	r7, sp, #0
   11536:	60f8      	str	r0, [r7, #12]
   11538:	460b      	mov	r3, r1
   1153a:	607a      	str	r2, [r7, #4]
   1153c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1153e:	7afb      	ldrb	r3, [r7, #11]
   11540:	68fa      	ldr	r2, [r7, #12]
   11542:	01db      	lsls	r3, r3, #7
   11544:	4413      	add	r3, r2
   11546:	3314      	adds	r3, #20
   11548:	687a      	ldr	r2, [r7, #4]
   1154a:	601a      	str	r2, [r3, #0]
}
   1154c:	bf00      	nop
   1154e:	3714      	adds	r7, #20
   11550:	46bd      	mov	sp, r7
   11552:	f85d 7b04 	ldr.w	r7, [sp], #4
   11556:	4770      	bx	lr

00011558 <hri_port_write_PMUX_PMUXE_bf>:
{
   11558:	b480      	push	{r7}
   1155a:	b085      	sub	sp, #20
   1155c:	af00      	add	r7, sp, #0
   1155e:	6078      	str	r0, [r7, #4]
   11560:	4608      	mov	r0, r1
   11562:	4611      	mov	r1, r2
   11564:	461a      	mov	r2, r3
   11566:	4603      	mov	r3, r0
   11568:	70fb      	strb	r3, [r7, #3]
   1156a:	460b      	mov	r3, r1
   1156c:	70bb      	strb	r3, [r7, #2]
   1156e:	4613      	mov	r3, r2
   11570:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   11572:	78fa      	ldrb	r2, [r7, #3]
   11574:	78bb      	ldrb	r3, [r7, #2]
   11576:	6879      	ldr	r1, [r7, #4]
   11578:	01d2      	lsls	r2, r2, #7
   1157a:	440a      	add	r2, r1
   1157c:	4413      	add	r3, r2
   1157e:	3330      	adds	r3, #48	; 0x30
   11580:	781b      	ldrb	r3, [r3, #0]
   11582:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   11584:	7bfb      	ldrb	r3, [r7, #15]
   11586:	f023 030f 	bic.w	r3, r3, #15
   1158a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   1158c:	787b      	ldrb	r3, [r7, #1]
   1158e:	f003 030f 	and.w	r3, r3, #15
   11592:	b2da      	uxtb	r2, r3
   11594:	7bfb      	ldrb	r3, [r7, #15]
   11596:	4313      	orrs	r3, r2
   11598:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1159a:	78fa      	ldrb	r2, [r7, #3]
   1159c:	78bb      	ldrb	r3, [r7, #2]
   1159e:	6879      	ldr	r1, [r7, #4]
   115a0:	01d2      	lsls	r2, r2, #7
   115a2:	440a      	add	r2, r1
   115a4:	4413      	add	r3, r2
   115a6:	3330      	adds	r3, #48	; 0x30
   115a8:	7bfa      	ldrb	r2, [r7, #15]
   115aa:	701a      	strb	r2, [r3, #0]
}
   115ac:	bf00      	nop
   115ae:	3714      	adds	r7, #20
   115b0:	46bd      	mov	sp, r7
   115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b6:	4770      	bx	lr

000115b8 <hri_port_write_PMUX_PMUXO_bf>:
{
   115b8:	b480      	push	{r7}
   115ba:	b085      	sub	sp, #20
   115bc:	af00      	add	r7, sp, #0
   115be:	6078      	str	r0, [r7, #4]
   115c0:	4608      	mov	r0, r1
   115c2:	4611      	mov	r1, r2
   115c4:	461a      	mov	r2, r3
   115c6:	4603      	mov	r3, r0
   115c8:	70fb      	strb	r3, [r7, #3]
   115ca:	460b      	mov	r3, r1
   115cc:	70bb      	strb	r3, [r7, #2]
   115ce:	4613      	mov	r3, r2
   115d0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   115d2:	78fa      	ldrb	r2, [r7, #3]
   115d4:	78bb      	ldrb	r3, [r7, #2]
   115d6:	6879      	ldr	r1, [r7, #4]
   115d8:	01d2      	lsls	r2, r2, #7
   115da:	440a      	add	r2, r1
   115dc:	4413      	add	r3, r2
   115de:	3330      	adds	r3, #48	; 0x30
   115e0:	781b      	ldrb	r3, [r3, #0]
   115e2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   115e4:	7bfb      	ldrb	r3, [r7, #15]
   115e6:	f003 030f 	and.w	r3, r3, #15
   115ea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   115ec:	787b      	ldrb	r3, [r7, #1]
   115ee:	011b      	lsls	r3, r3, #4
   115f0:	b2da      	uxtb	r2, r3
   115f2:	7bfb      	ldrb	r3, [r7, #15]
   115f4:	4313      	orrs	r3, r2
   115f6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   115f8:	78fa      	ldrb	r2, [r7, #3]
   115fa:	78bb      	ldrb	r3, [r7, #2]
   115fc:	6879      	ldr	r1, [r7, #4]
   115fe:	01d2      	lsls	r2, r2, #7
   11600:	440a      	add	r2, r1
   11602:	4413      	add	r3, r2
   11604:	3330      	adds	r3, #48	; 0x30
   11606:	7bfa      	ldrb	r2, [r7, #15]
   11608:	701a      	strb	r2, [r3, #0]
}
   1160a:	bf00      	nop
   1160c:	3714      	adds	r7, #20
   1160e:	46bd      	mov	sp, r7
   11610:	f85d 7b04 	ldr.w	r7, [sp], #4
   11614:	4770      	bx	lr

00011616 <hri_port_write_PINCFG_PMUXEN_bit>:
{
   11616:	b480      	push	{r7}
   11618:	b085      	sub	sp, #20
   1161a:	af00      	add	r7, sp, #0
   1161c:	6078      	str	r0, [r7, #4]
   1161e:	4608      	mov	r0, r1
   11620:	4611      	mov	r1, r2
   11622:	461a      	mov	r2, r3
   11624:	4603      	mov	r3, r0
   11626:	70fb      	strb	r3, [r7, #3]
   11628:	460b      	mov	r3, r1
   1162a:	70bb      	strb	r3, [r7, #2]
   1162c:	4613      	mov	r3, r2
   1162e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   11630:	78fa      	ldrb	r2, [r7, #3]
   11632:	78bb      	ldrb	r3, [r7, #2]
   11634:	6879      	ldr	r1, [r7, #4]
   11636:	01d2      	lsls	r2, r2, #7
   11638:	440a      	add	r2, r1
   1163a:	4413      	add	r3, r2
   1163c:	3340      	adds	r3, #64	; 0x40
   1163e:	781b      	ldrb	r3, [r3, #0]
   11640:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   11642:	7bfb      	ldrb	r3, [r7, #15]
   11644:	f023 0301 	bic.w	r3, r3, #1
   11648:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   1164a:	787a      	ldrb	r2, [r7, #1]
   1164c:	7bfb      	ldrb	r3, [r7, #15]
   1164e:	4313      	orrs	r3, r2
   11650:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   11652:	78fa      	ldrb	r2, [r7, #3]
   11654:	78bb      	ldrb	r3, [r7, #2]
   11656:	6879      	ldr	r1, [r7, #4]
   11658:	01d2      	lsls	r2, r2, #7
   1165a:	440a      	add	r2, r1
   1165c:	4413      	add	r3, r2
   1165e:	3340      	adds	r3, #64	; 0x40
   11660:	7bfa      	ldrb	r2, [r7, #15]
   11662:	701a      	strb	r2, [r3, #0]
}
   11664:	bf00      	nop
   11666:	3714      	adds	r7, #20
   11668:	46bd      	mov	sp, r7
   1166a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1166e:	4770      	bx	lr

00011670 <hri_port_write_WRCONFIG_reg>:
{
   11670:	b480      	push	{r7}
   11672:	b085      	sub	sp, #20
   11674:	af00      	add	r7, sp, #0
   11676:	60f8      	str	r0, [r7, #12]
   11678:	460b      	mov	r3, r1
   1167a:	607a      	str	r2, [r7, #4]
   1167c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1167e:	7afb      	ldrb	r3, [r7, #11]
   11680:	68fa      	ldr	r2, [r7, #12]
   11682:	01db      	lsls	r3, r3, #7
   11684:	4413      	add	r3, r2
   11686:	3328      	adds	r3, #40	; 0x28
   11688:	687a      	ldr	r2, [r7, #4]
   1168a:	601a      	str	r2, [r3, #0]
}
   1168c:	bf00      	nop
   1168e:	3714      	adds	r7, #20
   11690:	46bd      	mov	sp, r7
   11692:	f85d 7b04 	ldr.w	r7, [sp], #4
   11696:	4770      	bx	lr

00011698 <_gpio_set_direction>:
{
   11698:	b580      	push	{r7, lr}
   1169a:	b082      	sub	sp, #8
   1169c:	af00      	add	r7, sp, #0
   1169e:	4603      	mov	r3, r0
   116a0:	6039      	str	r1, [r7, #0]
   116a2:	71fb      	strb	r3, [r7, #7]
   116a4:	4613      	mov	r3, r2
   116a6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   116a8:	79bb      	ldrb	r3, [r7, #6]
   116aa:	2b01      	cmp	r3, #1
   116ac:	d01c      	beq.n	116e8 <_gpio_set_direction+0x50>
   116ae:	2b02      	cmp	r3, #2
   116b0:	d037      	beq.n	11722 <_gpio_set_direction+0x8a>
   116b2:	2b00      	cmp	r3, #0
   116b4:	d14e      	bne.n	11754 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   116b6:	79fb      	ldrb	r3, [r7, #7]
   116b8:	683a      	ldr	r2, [r7, #0]
   116ba:	4619      	mov	r1, r3
   116bc:	482a      	ldr	r0, [pc, #168]	; (11768 <_gpio_set_direction+0xd0>)
   116be:	4b2b      	ldr	r3, [pc, #172]	; (1176c <_gpio_set_direction+0xd4>)
   116c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   116c2:	683b      	ldr	r3, [r7, #0]
   116c4:	b29b      	uxth	r3, r3
   116c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   116ca:	79fb      	ldrb	r3, [r7, #7]
   116cc:	4619      	mov	r1, r3
   116ce:	4826      	ldr	r0, [pc, #152]	; (11768 <_gpio_set_direction+0xd0>)
   116d0:	4b27      	ldr	r3, [pc, #156]	; (11770 <_gpio_set_direction+0xd8>)
   116d2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   116d4:	683b      	ldr	r3, [r7, #0]
   116d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   116d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   116dc:	79fb      	ldrb	r3, [r7, #7]
   116de:	4619      	mov	r1, r3
   116e0:	4821      	ldr	r0, [pc, #132]	; (11768 <_gpio_set_direction+0xd0>)
   116e2:	4b23      	ldr	r3, [pc, #140]	; (11770 <_gpio_set_direction+0xd8>)
   116e4:	4798      	blx	r3
		break;
   116e6:	e03a      	b.n	1175e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   116e8:	79fb      	ldrb	r3, [r7, #7]
   116ea:	683a      	ldr	r2, [r7, #0]
   116ec:	4619      	mov	r1, r3
   116ee:	481e      	ldr	r0, [pc, #120]	; (11768 <_gpio_set_direction+0xd0>)
   116f0:	4b1e      	ldr	r3, [pc, #120]	; (1176c <_gpio_set_direction+0xd4>)
   116f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   116f4:	683b      	ldr	r3, [r7, #0]
   116f6:	b29b      	uxth	r3, r3
   116f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   116fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11700:	79f9      	ldrb	r1, [r7, #7]
   11702:	461a      	mov	r2, r3
   11704:	4818      	ldr	r0, [pc, #96]	; (11768 <_gpio_set_direction+0xd0>)
   11706:	4b1a      	ldr	r3, [pc, #104]	; (11770 <_gpio_set_direction+0xd8>)
   11708:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1170a:	683b      	ldr	r3, [r7, #0]
   1170c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   1170e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   11712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11716:	79f9      	ldrb	r1, [r7, #7]
   11718:	461a      	mov	r2, r3
   1171a:	4813      	ldr	r0, [pc, #76]	; (11768 <_gpio_set_direction+0xd0>)
   1171c:	4b14      	ldr	r3, [pc, #80]	; (11770 <_gpio_set_direction+0xd8>)
   1171e:	4798      	blx	r3
		break;
   11720:	e01d      	b.n	1175e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   11722:	79fb      	ldrb	r3, [r7, #7]
   11724:	683a      	ldr	r2, [r7, #0]
   11726:	4619      	mov	r1, r3
   11728:	480f      	ldr	r0, [pc, #60]	; (11768 <_gpio_set_direction+0xd0>)
   1172a:	4b12      	ldr	r3, [pc, #72]	; (11774 <_gpio_set_direction+0xdc>)
   1172c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1172e:	683b      	ldr	r3, [r7, #0]
   11730:	b29b      	uxth	r3, r3
   11732:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   11736:	79fb      	ldrb	r3, [r7, #7]
   11738:	4619      	mov	r1, r3
   1173a:	480b      	ldr	r0, [pc, #44]	; (11768 <_gpio_set_direction+0xd0>)
   1173c:	4b0c      	ldr	r3, [pc, #48]	; (11770 <_gpio_set_direction+0xd8>)
   1173e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   11740:	683b      	ldr	r3, [r7, #0]
   11742:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   11744:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   11748:	79fb      	ldrb	r3, [r7, #7]
   1174a:	4619      	mov	r1, r3
   1174c:	4806      	ldr	r0, [pc, #24]	; (11768 <_gpio_set_direction+0xd0>)
   1174e:	4b08      	ldr	r3, [pc, #32]	; (11770 <_gpio_set_direction+0xd8>)
   11750:	4798      	blx	r3
		break;
   11752:	e004      	b.n	1175e <_gpio_set_direction+0xc6>
		ASSERT(false);
   11754:	2246      	movs	r2, #70	; 0x46
   11756:	4908      	ldr	r1, [pc, #32]	; (11778 <_gpio_set_direction+0xe0>)
   11758:	2000      	movs	r0, #0
   1175a:	4b08      	ldr	r3, [pc, #32]	; (1177c <_gpio_set_direction+0xe4>)
   1175c:	4798      	blx	r3
}
   1175e:	bf00      	nop
   11760:	3708      	adds	r7, #8
   11762:	46bd      	mov	sp, r7
   11764:	bd80      	pop	{r7, pc}
   11766:	bf00      	nop
   11768:	41008000 	.word	0x41008000
   1176c:	000114e1 	.word	0x000114e1
   11770:	00011671 	.word	0x00011671
   11774:	000114b9 	.word	0x000114b9
   11778:	00015328 	.word	0x00015328
   1177c:	000099f1 	.word	0x000099f1

00011780 <_gpio_set_level>:
{
   11780:	b580      	push	{r7, lr}
   11782:	b082      	sub	sp, #8
   11784:	af00      	add	r7, sp, #0
   11786:	4603      	mov	r3, r0
   11788:	6039      	str	r1, [r7, #0]
   1178a:	71fb      	strb	r3, [r7, #7]
   1178c:	4613      	mov	r3, r2
   1178e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11790:	79bb      	ldrb	r3, [r7, #6]
   11792:	2b00      	cmp	r3, #0
   11794:	d006      	beq.n	117a4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11796:	79fb      	ldrb	r3, [r7, #7]
   11798:	683a      	ldr	r2, [r7, #0]
   1179a:	4619      	mov	r1, r3
   1179c:	4806      	ldr	r0, [pc, #24]	; (117b8 <_gpio_set_level+0x38>)
   1179e:	4b07      	ldr	r3, [pc, #28]	; (117bc <_gpio_set_level+0x3c>)
   117a0:	4798      	blx	r3
}
   117a2:	e005      	b.n	117b0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   117a4:	79fb      	ldrb	r3, [r7, #7]
   117a6:	683a      	ldr	r2, [r7, #0]
   117a8:	4619      	mov	r1, r3
   117aa:	4803      	ldr	r0, [pc, #12]	; (117b8 <_gpio_set_level+0x38>)
   117ac:	4b04      	ldr	r3, [pc, #16]	; (117c0 <_gpio_set_level+0x40>)
   117ae:	4798      	blx	r3
}
   117b0:	bf00      	nop
   117b2:	3708      	adds	r7, #8
   117b4:	46bd      	mov	sp, r7
   117b6:	bd80      	pop	{r7, pc}
   117b8:	41008000 	.word	0x41008000
   117bc:	00011509 	.word	0x00011509
   117c0:	00011531 	.word	0x00011531

000117c4 <_gpio_set_pin_function>:
{
   117c4:	b590      	push	{r4, r7, lr}
   117c6:	b085      	sub	sp, #20
   117c8:	af00      	add	r7, sp, #0
   117ca:	6078      	str	r0, [r7, #4]
   117cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   117ce:	687b      	ldr	r3, [r7, #4]
   117d0:	095b      	lsrs	r3, r3, #5
   117d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   117d4:	687b      	ldr	r3, [r7, #4]
   117d6:	b2db      	uxtb	r3, r3
   117d8:	f003 031f 	and.w	r3, r3, #31
   117dc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   117de:	683b      	ldr	r3, [r7, #0]
   117e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   117e4:	d106      	bne.n	117f4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   117e6:	7bba      	ldrb	r2, [r7, #14]
   117e8:	7bf9      	ldrb	r1, [r7, #15]
   117ea:	2300      	movs	r3, #0
   117ec:	4812      	ldr	r0, [pc, #72]	; (11838 <_gpio_set_pin_function+0x74>)
   117ee:	4c13      	ldr	r4, [pc, #76]	; (1183c <_gpio_set_pin_function+0x78>)
   117f0:	47a0      	blx	r4
}
   117f2:	e01d      	b.n	11830 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   117f4:	7bba      	ldrb	r2, [r7, #14]
   117f6:	7bf9      	ldrb	r1, [r7, #15]
   117f8:	2301      	movs	r3, #1
   117fa:	480f      	ldr	r0, [pc, #60]	; (11838 <_gpio_set_pin_function+0x74>)
   117fc:	4c0f      	ldr	r4, [pc, #60]	; (1183c <_gpio_set_pin_function+0x78>)
   117fe:	47a0      	blx	r4
		if (pin & 1) {
   11800:	7bbb      	ldrb	r3, [r7, #14]
   11802:	f003 0301 	and.w	r3, r3, #1
   11806:	2b00      	cmp	r3, #0
   11808:	d009      	beq.n	1181e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   1180a:	7bbb      	ldrb	r3, [r7, #14]
   1180c:	085b      	lsrs	r3, r3, #1
   1180e:	b2da      	uxtb	r2, r3
   11810:	683b      	ldr	r3, [r7, #0]
   11812:	b2db      	uxtb	r3, r3
   11814:	7bf9      	ldrb	r1, [r7, #15]
   11816:	4808      	ldr	r0, [pc, #32]	; (11838 <_gpio_set_pin_function+0x74>)
   11818:	4c09      	ldr	r4, [pc, #36]	; (11840 <_gpio_set_pin_function+0x7c>)
   1181a:	47a0      	blx	r4
}
   1181c:	e008      	b.n	11830 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   1181e:	7bbb      	ldrb	r3, [r7, #14]
   11820:	085b      	lsrs	r3, r3, #1
   11822:	b2da      	uxtb	r2, r3
   11824:	683b      	ldr	r3, [r7, #0]
   11826:	b2db      	uxtb	r3, r3
   11828:	7bf9      	ldrb	r1, [r7, #15]
   1182a:	4803      	ldr	r0, [pc, #12]	; (11838 <_gpio_set_pin_function+0x74>)
   1182c:	4c05      	ldr	r4, [pc, #20]	; (11844 <_gpio_set_pin_function+0x80>)
   1182e:	47a0      	blx	r4
}
   11830:	bf00      	nop
   11832:	3714      	adds	r7, #20
   11834:	46bd      	mov	sp, r7
   11836:	bd90      	pop	{r4, r7, pc}
   11838:	41008000 	.word	0x41008000
   1183c:	00011617 	.word	0x00011617
   11840:	000115b9 	.word	0x000115b9
   11844:	00011559 	.word	0x00011559

00011848 <gpio_set_pin_function>:
{
   11848:	b580      	push	{r7, lr}
   1184a:	b082      	sub	sp, #8
   1184c:	af00      	add	r7, sp, #0
   1184e:	6078      	str	r0, [r7, #4]
   11850:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   11852:	6839      	ldr	r1, [r7, #0]
   11854:	6878      	ldr	r0, [r7, #4]
   11856:	4b03      	ldr	r3, [pc, #12]	; (11864 <gpio_set_pin_function+0x1c>)
   11858:	4798      	blx	r3
}
   1185a:	bf00      	nop
   1185c:	3708      	adds	r7, #8
   1185e:	46bd      	mov	sp, r7
   11860:	bd80      	pop	{r7, pc}
   11862:	bf00      	nop
   11864:	000117c5 	.word	0x000117c5

00011868 <gpio_set_pin_direction>:
{
   11868:	b580      	push	{r7, lr}
   1186a:	b082      	sub	sp, #8
   1186c:	af00      	add	r7, sp, #0
   1186e:	4603      	mov	r3, r0
   11870:	460a      	mov	r2, r1
   11872:	71fb      	strb	r3, [r7, #7]
   11874:	4613      	mov	r3, r2
   11876:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   11878:	79fb      	ldrb	r3, [r7, #7]
   1187a:	095b      	lsrs	r3, r3, #5
   1187c:	b2d8      	uxtb	r0, r3
   1187e:	79fb      	ldrb	r3, [r7, #7]
   11880:	f003 031f 	and.w	r3, r3, #31
   11884:	2201      	movs	r2, #1
   11886:	fa02 f303 	lsl.w	r3, r2, r3
   1188a:	79ba      	ldrb	r2, [r7, #6]
   1188c:	4619      	mov	r1, r3
   1188e:	4b03      	ldr	r3, [pc, #12]	; (1189c <gpio_set_pin_direction+0x34>)
   11890:	4798      	blx	r3
}
   11892:	bf00      	nop
   11894:	3708      	adds	r7, #8
   11896:	46bd      	mov	sp, r7
   11898:	bd80      	pop	{r7, pc}
   1189a:	bf00      	nop
   1189c:	00011699 	.word	0x00011699

000118a0 <gpio_set_pin_level>:
{
   118a0:	b580      	push	{r7, lr}
   118a2:	b082      	sub	sp, #8
   118a4:	af00      	add	r7, sp, #0
   118a6:	4603      	mov	r3, r0
   118a8:	460a      	mov	r2, r1
   118aa:	71fb      	strb	r3, [r7, #7]
   118ac:	4613      	mov	r3, r2
   118ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   118b0:	79fb      	ldrb	r3, [r7, #7]
   118b2:	095b      	lsrs	r3, r3, #5
   118b4:	b2d8      	uxtb	r0, r3
   118b6:	79fb      	ldrb	r3, [r7, #7]
   118b8:	f003 031f 	and.w	r3, r3, #31
   118bc:	2201      	movs	r2, #1
   118be:	fa02 f303 	lsl.w	r3, r2, r3
   118c2:	79ba      	ldrb	r2, [r7, #6]
   118c4:	4619      	mov	r1, r3
   118c6:	4b03      	ldr	r3, [pc, #12]	; (118d4 <gpio_set_pin_level+0x34>)
   118c8:	4798      	blx	r3
}
   118ca:	bf00      	nop
   118cc:	3708      	adds	r7, #8
   118ce:	46bd      	mov	sp, r7
   118d0:	bd80      	pop	{r7, pc}
   118d2:	bf00      	nop
   118d4:	00011781 	.word	0x00011781

000118d8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   118d8:	b580      	push	{r7, lr}
   118da:	b082      	sub	sp, #8
   118dc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   118de:	2100      	movs	r1, #0
   118e0:	2008      	movs	r0, #8
   118e2:	4b24      	ldr	r3, [pc, #144]	; (11974 <QSPI_N25Q256_exit_xip+0x9c>)
   118e4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   118e6:	2100      	movs	r1, #0
   118e8:	202b      	movs	r0, #43	; 0x2b
   118ea:	4b22      	ldr	r3, [pc, #136]	; (11974 <QSPI_N25Q256_exit_xip+0x9c>)
   118ec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   118ee:	2100      	movs	r1, #0
   118f0:	202a      	movs	r0, #42	; 0x2a
   118f2:	4b20      	ldr	r3, [pc, #128]	; (11974 <QSPI_N25Q256_exit_xip+0x9c>)
   118f4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   118f6:	2102      	movs	r1, #2
   118f8:	2008      	movs	r0, #8
   118fa:	4b1f      	ldr	r3, [pc, #124]	; (11978 <QSPI_N25Q256_exit_xip+0xa0>)
   118fc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   118fe:	2102      	movs	r1, #2
   11900:	202b      	movs	r0, #43	; 0x2b
   11902:	4b1d      	ldr	r3, [pc, #116]	; (11978 <QSPI_N25Q256_exit_xip+0xa0>)
   11904:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   11906:	2102      	movs	r1, #2
   11908:	202a      	movs	r0, #42	; 0x2a
   1190a:	4b1b      	ldr	r3, [pc, #108]	; (11978 <QSPI_N25Q256_exit_xip+0xa0>)
   1190c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   1190e:	2101      	movs	r1, #1
   11910:	2008      	movs	r0, #8
   11912:	4b1a      	ldr	r3, [pc, #104]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   11914:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   11916:	2100      	movs	r1, #0
   11918:	202b      	movs	r0, #43	; 0x2b
   1191a:	4b18      	ldr	r3, [pc, #96]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   1191c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1191e:	2100      	movs	r1, #0
   11920:	202a      	movs	r0, #42	; 0x2a
   11922:	4b16      	ldr	r3, [pc, #88]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   11924:	4798      	blx	r3

	delay_us(1);
   11926:	2001      	movs	r0, #1
   11928:	4b15      	ldr	r3, [pc, #84]	; (11980 <QSPI_N25Q256_exit_xip+0xa8>)
   1192a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   1192c:	2300      	movs	r3, #0
   1192e:	607b      	str	r3, [r7, #4]
   11930:	e010      	b.n	11954 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   11932:	2101      	movs	r1, #1
   11934:	202a      	movs	r0, #42	; 0x2a
   11936:	4b11      	ldr	r3, [pc, #68]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   11938:	4798      	blx	r3
		delay_us(1);
   1193a:	2001      	movs	r0, #1
   1193c:	4b10      	ldr	r3, [pc, #64]	; (11980 <QSPI_N25Q256_exit_xip+0xa8>)
   1193e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   11940:	2100      	movs	r1, #0
   11942:	202a      	movs	r0, #42	; 0x2a
   11944:	4b0d      	ldr	r3, [pc, #52]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   11946:	4798      	blx	r3
		delay_us(1);
   11948:	2001      	movs	r0, #1
   1194a:	4b0d      	ldr	r3, [pc, #52]	; (11980 <QSPI_N25Q256_exit_xip+0xa8>)
   1194c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1194e:	687b      	ldr	r3, [r7, #4]
   11950:	3301      	adds	r3, #1
   11952:	607b      	str	r3, [r7, #4]
   11954:	687b      	ldr	r3, [r7, #4]
   11956:	2b06      	cmp	r3, #6
   11958:	ddeb      	ble.n	11932 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1195a:	2101      	movs	r1, #1
   1195c:	202b      	movs	r0, #43	; 0x2b
   1195e:	4b07      	ldr	r3, [pc, #28]	; (1197c <QSPI_N25Q256_exit_xip+0xa4>)
   11960:	4798      	blx	r3
	delay_us(1);
   11962:	2001      	movs	r0, #1
   11964:	4b06      	ldr	r3, [pc, #24]	; (11980 <QSPI_N25Q256_exit_xip+0xa8>)
   11966:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   11968:	4b06      	ldr	r3, [pc, #24]	; (11984 <QSPI_N25Q256_exit_xip+0xac>)
   1196a:	4798      	blx	r3
}
   1196c:	bf00      	nop
   1196e:	3708      	adds	r7, #8
   11970:	46bd      	mov	sp, r7
   11972:	bd80      	pop	{r7, pc}
   11974:	00011849 	.word	0x00011849
   11978:	00011869 	.word	0x00011869
   1197c:	000118a1 	.word	0x000118a1
   11980:	00008659 	.word	0x00008659
   11984:	00007819 	.word	0x00007819

00011988 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   11988:	b598      	push	{r3, r4, r7, lr}
   1198a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   1198c:	4806      	ldr	r0, [pc, #24]	; (119a8 <spi_nor_flash_init+0x20>)
   1198e:	4b07      	ldr	r3, [pc, #28]	; (119ac <spi_nor_flash_init+0x24>)
   11990:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   11992:	2300      	movs	r3, #0
   11994:	4a06      	ldr	r2, [pc, #24]	; (119b0 <spi_nor_flash_init+0x28>)
   11996:	4904      	ldr	r1, [pc, #16]	; (119a8 <spi_nor_flash_init+0x20>)
   11998:	4806      	ldr	r0, [pc, #24]	; (119b4 <spi_nor_flash_init+0x2c>)
   1199a:	4c07      	ldr	r4, [pc, #28]	; (119b8 <spi_nor_flash_init+0x30>)
   1199c:	47a0      	blx	r4
   1199e:	4602      	mov	r2, r0
   119a0:	4b06      	ldr	r3, [pc, #24]	; (119bc <spi_nor_flash_init+0x34>)
   119a2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   119a4:	bf00      	nop
   119a6:	bd98      	pop	{r3, r4, r7, pc}
   119a8:	200024b8 	.word	0x200024b8
   119ac:	00008a19 	.word	0x00008a19
   119b0:	000118d9 	.word	0x000118d9
   119b4:	20001ecc 	.word	0x20001ecc
   119b8:	00011df5 	.word	0x00011df5
   119bc:	200026b8 	.word	0x200026b8

000119c0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   119c0:	b580      	push	{r7, lr}
   119c2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   119c4:	4805      	ldr	r0, [pc, #20]	; (119dc <cdc_device_acm_init+0x1c>)
   119c6:	4b06      	ldr	r3, [pc, #24]	; (119e0 <cdc_device_acm_init+0x20>)
   119c8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   119ca:	4b06      	ldr	r3, [pc, #24]	; (119e4 <cdc_device_acm_init+0x24>)
   119cc:	4798      	blx	r3

	usbdc_start(single_desc);
   119ce:	4806      	ldr	r0, [pc, #24]	; (119e8 <cdc_device_acm_init+0x28>)
   119d0:	4b06      	ldr	r3, [pc, #24]	; (119ec <cdc_device_acm_init+0x2c>)
   119d2:	4798      	blx	r3
	usbdc_attach();
   119d4:	4b06      	ldr	r3, [pc, #24]	; (119f0 <cdc_device_acm_init+0x30>)
   119d6:	4798      	blx	r3
}
   119d8:	bf00      	nop
   119da:	bd80      	pop	{r7, pc}
   119dc:	20001f1c 	.word	0x20001f1c
   119e0:	000133e1 	.word	0x000133e1
   119e4:	00012795 	.word	0x00012795
   119e8:	200005f8 	.word	0x200005f8
   119ec:	0001347d 	.word	0x0001347d
   119f0:	000134cd 	.word	0x000134cd

000119f4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   119f4:	b580      	push	{r7, lr}
   119f6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   119f8:	4b01      	ldr	r3, [pc, #4]	; (11a00 <usb_init+0xc>)
   119fa:	4798      	blx	r3
}
   119fc:	bf00      	nop
   119fe:	bd80      	pop	{r7, pc}
   11a00:	000119c1 	.word	0x000119c1

00011a04 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   11a04:	b480      	push	{r7}
   11a06:	b085      	sub	sp, #20
   11a08:	af00      	add	r7, sp, #0
   11a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11a0c:	f3ef 8310 	mrs	r3, PRIMASK
   11a10:	60fb      	str	r3, [r7, #12]
  return(result);
   11a12:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   11a14:	687b      	ldr	r3, [r7, #4]
   11a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   11a18:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11a1a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   11a1e:	bf00      	nop
   11a20:	3714      	adds	r7, #20
   11a22:	46bd      	mov	sp, r7
   11a24:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a28:	4770      	bx	lr

00011a2a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   11a2a:	b480      	push	{r7}
   11a2c:	b085      	sub	sp, #20
   11a2e:	af00      	add	r7, sp, #0
   11a30:	6078      	str	r0, [r7, #4]
   11a32:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   11a36:	687b      	ldr	r3, [r7, #4]
   11a38:	681b      	ldr	r3, [r3, #0]
   11a3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   11a3c:	68fb      	ldr	r3, [r7, #12]
   11a3e:	f383 8810 	msr	PRIMASK, r3
}
   11a42:	bf00      	nop
   11a44:	3714      	adds	r7, #20
   11a46:	46bd      	mov	sp, r7
   11a48:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a4c:	4770      	bx	lr
	...

00011a50 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   11a50:	b580      	push	{r7, lr}
   11a52:	b08c      	sub	sp, #48	; 0x30
   11a54:	af00      	add	r7, sp, #0
   11a56:	6078      	str	r0, [r7, #4]
   11a58:	460b      	mov	r3, r1
   11a5a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11a5c:	687b      	ldr	r3, [r7, #4]
   11a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11a60:	687b      	ldr	r3, [r7, #4]
   11a62:	681b      	ldr	r3, [r3, #0]
   11a64:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   11a66:	f107 030c 	add.w	r3, r7, #12
   11a6a:	2200      	movs	r2, #0
   11a6c:	601a      	str	r2, [r3, #0]
   11a6e:	605a      	str	r2, [r3, #4]
   11a70:	609a      	str	r2, [r3, #8]
   11a72:	60da      	str	r2, [r3, #12]
   11a74:	611a      	str	r2, [r3, #16]
   11a76:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   11a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a7a:	7b1b      	ldrb	r3, [r3, #12]
   11a7c:	2b00      	cmp	r3, #0
   11a7e:	d001      	beq.n	11a84 <n25q256a_xip_confirm+0x34>
   11a80:	2206      	movs	r2, #6
   11a82:	e000      	b.n	11a86 <n25q256a_xip_confirm+0x36>
   11a84:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   11a86:	7b3b      	ldrb	r3, [r7, #12]
   11a88:	f362 0302 	bfi	r3, r2, #0, #3
   11a8c:	733b      	strb	r3, [r7, #12]
   11a8e:	7b3b      	ldrb	r3, [r7, #12]
   11a90:	f043 0310 	orr.w	r3, r3, #16
   11a94:	733b      	strb	r3, [r7, #12]
   11a96:	7b3b      	ldrb	r3, [r7, #12]
   11a98:	f043 0320 	orr.w	r3, r3, #32
   11a9c:	733b      	strb	r3, [r7, #12]
   11a9e:	7b3b      	ldrb	r3, [r7, #12]
   11aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11aa4:	733b      	strb	r3, [r7, #12]
   11aa6:	7b3b      	ldrb	r3, [r7, #12]
   11aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11aac:	733b      	strb	r3, [r7, #12]
   11aae:	7b7b      	ldrb	r3, [r7, #13]
   11ab0:	f043 0303 	orr.w	r3, r3, #3
   11ab4:	737b      	strb	r3, [r7, #13]
   11ab6:	7b7b      	ldrb	r3, [r7, #13]
   11ab8:	2201      	movs	r2, #1
   11aba:	f362 1305 	bfi	r3, r2, #4, #2
   11abe:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   11ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ac2:	7b1b      	ldrb	r3, [r3, #12]
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	d001      	beq.n	11acc <n25q256a_xip_confirm+0x7c>
   11ac8:	2208      	movs	r2, #8
   11aca:	e000      	b.n	11ace <n25q256a_xip_confirm+0x7e>
   11acc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   11ace:	7bbb      	ldrb	r3, [r7, #14]
   11ad0:	f362 0304 	bfi	r3, r2, #0, #5
   11ad4:	73bb      	strb	r3, [r7, #14]
   11ad6:	230b      	movs	r3, #11
   11ad8:	743b      	strb	r3, [r7, #16]
   11ada:	78fb      	ldrb	r3, [r7, #3]
   11adc:	2b00      	cmp	r3, #0
   11ade:	d001      	beq.n	11ae4 <n25q256a_xip_confirm+0x94>
   11ae0:	2300      	movs	r3, #0
   11ae2:	e000      	b.n	11ae6 <n25q256a_xip_confirm+0x96>
   11ae4:	23ff      	movs	r3, #255	; 0xff
   11ae6:	747b      	strb	r3, [r7, #17]
   11ae8:	2301      	movs	r3, #1
   11aea:	61bb      	str	r3, [r7, #24]
   11aec:	f107 0327 	add.w	r3, r7, #39	; 0x27
   11af0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   11af2:	f107 030c 	add.w	r3, r7, #12
   11af6:	4619      	mov	r1, r3
   11af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11afa:	4b07      	ldr	r3, [pc, #28]	; (11b18 <n25q256a_xip_confirm+0xc8>)
   11afc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   11afe:	78fb      	ldrb	r3, [r7, #3]
   11b00:	2b00      	cmp	r3, #0
   11b02:	d001      	beq.n	11b08 <n25q256a_xip_confirm+0xb8>
   11b04:	2202      	movs	r2, #2
   11b06:	e000      	b.n	11b0a <n25q256a_xip_confirm+0xba>
   11b08:	2201      	movs	r2, #1
   11b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11b0c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   11b0e:	2300      	movs	r3, #0
}
   11b10:	4618      	mov	r0, r3
   11b12:	3730      	adds	r7, #48	; 0x30
   11b14:	46bd      	mov	sp, r7
   11b16:	bd80      	pop	{r7, pc}
   11b18:	00008a91 	.word	0x00008a91

00011b1c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   11b1c:	b580      	push	{r7, lr}
   11b1e:	b08c      	sub	sp, #48	; 0x30
   11b20:	af00      	add	r7, sp, #0
   11b22:	6078      	str	r0, [r7, #4]
   11b24:	460b      	mov	r3, r1
   11b26:	70fb      	strb	r3, [r7, #3]
   11b28:	4613      	mov	r3, r2
   11b2a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   11b2c:	2300      	movs	r3, #0
   11b2e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   11b30:	687b      	ldr	r3, [r7, #4]
   11b32:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   11b34:	687b      	ldr	r3, [r7, #4]
   11b36:	681b      	ldr	r3, [r3, #0]
   11b38:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   11b3a:	f107 030c 	add.w	r3, r7, #12
   11b3e:	2200      	movs	r2, #0
   11b40:	601a      	str	r2, [r3, #0]
   11b42:	605a      	str	r2, [r3, #4]
   11b44:	609a      	str	r2, [r3, #8]
   11b46:	60da      	str	r2, [r3, #12]
   11b48:	611a      	str	r2, [r3, #16]
   11b4a:	615a      	str	r2, [r3, #20]
   11b4c:	78fb      	ldrb	r3, [r7, #3]
   11b4e:	f003 0307 	and.w	r3, r3, #7
   11b52:	b2da      	uxtb	r2, r3
   11b54:	7b3b      	ldrb	r3, [r7, #12]
   11b56:	f362 0302 	bfi	r3, r2, #0, #3
   11b5a:	733b      	strb	r3, [r7, #12]
   11b5c:	7b3b      	ldrb	r3, [r7, #12]
   11b5e:	f043 0310 	orr.w	r3, r3, #16
   11b62:	733b      	strb	r3, [r7, #12]
   11b64:	7b3b      	ldrb	r3, [r7, #12]
   11b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11b6a:	733b      	strb	r3, [r7, #12]
   11b6c:	78bb      	ldrb	r3, [r7, #2]
   11b6e:	743b      	strb	r3, [r7, #16]
   11b70:	2301      	movs	r3, #1
   11b72:	61bb      	str	r3, [r7, #24]
   11b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
   11b78:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   11b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11b7c:	7b5b      	ldrb	r3, [r3, #13]
   11b7e:	2b00      	cmp	r3, #0
   11b80:	d003      	beq.n	11b8a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   11b82:	2100      	movs	r1, #0
   11b84:	6878      	ldr	r0, [r7, #4]
   11b86:	4b0a      	ldr	r3, [pc, #40]	; (11bb0 <n25q256a_read_reg+0x94>)
   11b88:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   11b8a:	f107 030c 	add.w	r3, r7, #12
   11b8e:	4619      	mov	r1, r3
   11b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11b92:	4b08      	ldr	r3, [pc, #32]	; (11bb4 <n25q256a_read_reg+0x98>)
   11b94:	4798      	blx	r3
	if (n25q->xip_mode) {
   11b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11b98:	7b5b      	ldrb	r3, [r3, #13]
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d003      	beq.n	11ba6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   11b9e:	2101      	movs	r1, #1
   11ba0:	6878      	ldr	r0, [r7, #4]
   11ba2:	4b03      	ldr	r3, [pc, #12]	; (11bb0 <n25q256a_read_reg+0x94>)
   11ba4:	4798      	blx	r3
	}
	return status;
   11ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   11ba8:	4618      	mov	r0, r3
   11baa:	3730      	adds	r7, #48	; 0x30
   11bac:	46bd      	mov	sp, r7
   11bae:	bd80      	pop	{r7, pc}
   11bb0:	00011a51 	.word	0x00011a51
   11bb4:	00008a91 	.word	0x00008a91

00011bb8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   11bb8:	b580      	push	{r7, lr}
   11bba:	b08c      	sub	sp, #48	; 0x30
   11bbc:	af00      	add	r7, sp, #0
   11bbe:	60f8      	str	r0, [r7, #12]
   11bc0:	607b      	str	r3, [r7, #4]
   11bc2:	460b      	mov	r3, r1
   11bc4:	72fb      	strb	r3, [r7, #11]
   11bc6:	4613      	mov	r3, r2
   11bc8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11bca:	68fb      	ldr	r3, [r7, #12]
   11bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11bce:	68fb      	ldr	r3, [r7, #12]
   11bd0:	681b      	ldr	r3, [r3, #0]
   11bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   11bd4:	f107 0310 	add.w	r3, r7, #16
   11bd8:	2200      	movs	r2, #0
   11bda:	601a      	str	r2, [r3, #0]
   11bdc:	605a      	str	r2, [r3, #4]
   11bde:	609a      	str	r2, [r3, #8]
   11be0:	60da      	str	r2, [r3, #12]
   11be2:	611a      	str	r2, [r3, #16]
   11be4:	615a      	str	r2, [r3, #20]
   11be6:	7afb      	ldrb	r3, [r7, #11]
   11be8:	f003 0307 	and.w	r3, r3, #7
   11bec:	b2da      	uxtb	r2, r3
   11bee:	7c3b      	ldrb	r3, [r7, #16]
   11bf0:	f362 0302 	bfi	r3, r2, #0, #3
   11bf4:	743b      	strb	r3, [r7, #16]
   11bf6:	7c3b      	ldrb	r3, [r7, #16]
   11bf8:	f043 0310 	orr.w	r3, r3, #16
   11bfc:	743b      	strb	r3, [r7, #16]
   11bfe:	7c3b      	ldrb	r3, [r7, #16]
   11c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11c04:	743b      	strb	r3, [r7, #16]
   11c06:	7c7b      	ldrb	r3, [r7, #17]
   11c08:	2202      	movs	r2, #2
   11c0a:	f362 1305 	bfi	r3, r2, #4, #2
   11c0e:	747b      	strb	r3, [r7, #17]
   11c10:	7abb      	ldrb	r3, [r7, #10]
   11c12:	753b      	strb	r3, [r7, #20]
   11c14:	2301      	movs	r3, #1
   11c16:	61fb      	str	r3, [r7, #28]
   11c18:	1d3b      	adds	r3, r7, #4
   11c1a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   11c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c1e:	7b5b      	ldrb	r3, [r3, #13]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d003      	beq.n	11c2c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   11c24:	2100      	movs	r1, #0
   11c26:	68f8      	ldr	r0, [r7, #12]
   11c28:	4b09      	ldr	r3, [pc, #36]	; (11c50 <n25q256a_write_reg+0x98>)
   11c2a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   11c2c:	f107 0310 	add.w	r3, r7, #16
   11c30:	4619      	mov	r1, r3
   11c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11c34:	4b07      	ldr	r3, [pc, #28]	; (11c54 <n25q256a_write_reg+0x9c>)
   11c36:	4798      	blx	r3
	if (n25q->xip_mode) {
   11c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c3a:	7b5b      	ldrb	r3, [r3, #13]
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d003      	beq.n	11c48 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   11c40:	2101      	movs	r1, #1
   11c42:	68f8      	ldr	r0, [r7, #12]
   11c44:	4b02      	ldr	r3, [pc, #8]	; (11c50 <n25q256a_write_reg+0x98>)
   11c46:	4798      	blx	r3
	}
}
   11c48:	bf00      	nop
   11c4a:	3730      	adds	r7, #48	; 0x30
   11c4c:	46bd      	mov	sp, r7
   11c4e:	bd80      	pop	{r7, pc}
   11c50:	00011a51 	.word	0x00011a51
   11c54:	00008a91 	.word	0x00008a91

00011c58 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   11c58:	b580      	push	{r7, lr}
   11c5a:	b090      	sub	sp, #64	; 0x40
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
   11c60:	460b      	mov	r3, r1
   11c62:	70fb      	strb	r3, [r7, #3]
   11c64:	4613      	mov	r3, r2
   11c66:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11c68:	687b      	ldr	r3, [r7, #4]
   11c6a:	681b      	ldr	r3, [r3, #0]
   11c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   11c6e:	78bb      	ldrb	r3, [r7, #2]
   11c70:	2b00      	cmp	r3, #0
   11c72:	d001      	beq.n	11c78 <n25q256a_write_enable+0x20>
   11c74:	2306      	movs	r3, #6
   11c76:	e000      	b.n	11c7a <n25q256a_write_enable+0x22>
   11c78:	2304      	movs	r3, #4
   11c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   11c7e:	f107 0320 	add.w	r3, r7, #32
   11c82:	2200      	movs	r2, #0
   11c84:	601a      	str	r2, [r3, #0]
   11c86:	605a      	str	r2, [r3, #4]
   11c88:	609a      	str	r2, [r3, #8]
   11c8a:	60da      	str	r2, [r3, #12]
   11c8c:	611a      	str	r2, [r3, #16]
   11c8e:	615a      	str	r2, [r3, #20]
   11c90:	78fb      	ldrb	r3, [r7, #3]
   11c92:	f003 0307 	and.w	r3, r3, #7
   11c96:	b2da      	uxtb	r2, r3
   11c98:	f897 3020 	ldrb.w	r3, [r7, #32]
   11c9c:	f362 0302 	bfi	r3, r2, #0, #3
   11ca0:	f887 3020 	strb.w	r3, [r7, #32]
   11ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
   11ca8:	f043 0310 	orr.w	r3, r3, #16
   11cac:	f887 3020 	strb.w	r3, [r7, #32]
   11cb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   11cb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   11cb8:	f107 0308 	add.w	r3, r7, #8
   11cbc:	2200      	movs	r2, #0
   11cbe:	601a      	str	r2, [r3, #0]
   11cc0:	605a      	str	r2, [r3, #4]
   11cc2:	609a      	str	r2, [r3, #8]
   11cc4:	60da      	str	r2, [r3, #12]
   11cc6:	611a      	str	r2, [r3, #16]
   11cc8:	615a      	str	r2, [r3, #20]
   11cca:	78fb      	ldrb	r3, [r7, #3]
   11ccc:	f003 0307 	and.w	r3, r3, #7
   11cd0:	b2da      	uxtb	r2, r3
   11cd2:	7a3b      	ldrb	r3, [r7, #8]
   11cd4:	f362 0302 	bfi	r3, r2, #0, #3
   11cd8:	723b      	strb	r3, [r7, #8]
   11cda:	7a3b      	ldrb	r3, [r7, #8]
   11cdc:	f043 0310 	orr.w	r3, r3, #16
   11ce0:	723b      	strb	r3, [r7, #8]
   11ce2:	7a3b      	ldrb	r3, [r7, #8]
   11ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11ce8:	723b      	strb	r3, [r7, #8]
   11cea:	2305      	movs	r3, #5
   11cec:	733b      	strb	r3, [r7, #12]
   11cee:	2301      	movs	r3, #1
   11cf0:	617b      	str	r3, [r7, #20]
   11cf2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   11cf6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   11cf8:	f107 0320 	add.w	r3, r7, #32
   11cfc:	4619      	mov	r1, r3
   11cfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   11d00:	4b08      	ldr	r3, [pc, #32]	; (11d24 <n25q256a_write_enable+0xcc>)
   11d02:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   11d04:	f107 0308 	add.w	r3, r7, #8
   11d08:	4619      	mov	r1, r3
   11d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   11d0c:	4b05      	ldr	r3, [pc, #20]	; (11d24 <n25q256a_write_enable+0xcc>)
   11d0e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   11d10:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   11d14:	f003 0302 	and.w	r3, r3, #2
   11d18:	2b00      	cmp	r3, #0
   11d1a:	d0ed      	beq.n	11cf8 <n25q256a_write_enable+0xa0>
}
   11d1c:	bf00      	nop
   11d1e:	3740      	adds	r7, #64	; 0x40
   11d20:	46bd      	mov	sp, r7
   11d22:	bd80      	pop	{r7, pc}
   11d24:	00008a91 	.word	0x00008a91

00011d28 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   11d28:	b590      	push	{r4, r7, lr}
   11d2a:	b087      	sub	sp, #28
   11d2c:	af00      	add	r7, sp, #0
   11d2e:	6078      	str	r0, [r7, #4]
   11d30:	460b      	mov	r3, r1
   11d32:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   11d34:	687b      	ldr	r3, [r7, #4]
   11d36:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11d38:	68fb      	ldr	r3, [r7, #12]
   11d3a:	7b1b      	ldrb	r3, [r3, #12]
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	d001      	beq.n	11d44 <n25q256a_switch_mode+0x1c>
   11d40:	2306      	movs	r3, #6
   11d42:	e000      	b.n	11d46 <n25q256a_switch_mode+0x1e>
   11d44:	2300      	movs	r3, #0
   11d46:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   11d48:	7afb      	ldrb	r3, [r7, #11]
   11d4a:	2265      	movs	r2, #101	; 0x65
   11d4c:	4619      	mov	r1, r3
   11d4e:	6878      	ldr	r0, [r7, #4]
   11d50:	4b25      	ldr	r3, [pc, #148]	; (11de8 <n25q256a_switch_mode+0xc0>)
   11d52:	4798      	blx	r3
   11d54:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   11d56:	2300      	movs	r3, #0
   11d58:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   11d5a:	68fb      	ldr	r3, [r7, #12]
   11d5c:	7b1b      	ldrb	r3, [r3, #12]
   11d5e:	78fa      	ldrb	r2, [r7, #3]
   11d60:	429a      	cmp	r2, r3
   11d62:	d03d      	beq.n	11de0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   11d64:	78fb      	ldrb	r3, [r7, #3]
   11d66:	2b00      	cmp	r3, #0
   11d68:	d00b      	beq.n	11d82 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   11d6a:	697b      	ldr	r3, [r7, #20]
   11d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11d70:	2b00      	cmp	r3, #0
   11d72:	d011      	beq.n	11d98 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   11d74:	697b      	ldr	r3, [r7, #20]
   11d76:	f003 031f 	and.w	r3, r3, #31
   11d7a:	617b      	str	r3, [r7, #20]
			modify = 1;
   11d7c:	2301      	movs	r3, #1
   11d7e:	74fb      	strb	r3, [r7, #19]
   11d80:	e00a      	b.n	11d98 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   11d82:	697b      	ldr	r3, [r7, #20]
   11d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11d88:	2b00      	cmp	r3, #0
   11d8a:	d105      	bne.n	11d98 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   11d8c:	697b      	ldr	r3, [r7, #20]
   11d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   11d92:	617b      	str	r3, [r7, #20]
			modify = 1;
   11d94:	2301      	movs	r3, #1
   11d96:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   11d98:	7cfb      	ldrb	r3, [r7, #19]
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	d021      	beq.n	11de2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   11d9e:	68fb      	ldr	r3, [r7, #12]
   11da0:	78fa      	ldrb	r2, [r7, #3]
   11da2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   11da4:	7afb      	ldrb	r3, [r7, #11]
   11da6:	2201      	movs	r2, #1
   11da8:	4619      	mov	r1, r3
   11daa:	6878      	ldr	r0, [r7, #4]
   11dac:	4b0f      	ldr	r3, [pc, #60]	; (11dec <n25q256a_switch_mode+0xc4>)
   11dae:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   11db0:	7af9      	ldrb	r1, [r7, #11]
   11db2:	697b      	ldr	r3, [r7, #20]
   11db4:	2261      	movs	r2, #97	; 0x61
   11db6:	6878      	ldr	r0, [r7, #4]
   11db8:	4c0d      	ldr	r4, [pc, #52]	; (11df0 <n25q256a_switch_mode+0xc8>)
   11dba:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11dbc:	78fb      	ldrb	r3, [r7, #3]
   11dbe:	2b00      	cmp	r3, #0
   11dc0:	d001      	beq.n	11dc6 <n25q256a_switch_mode+0x9e>
   11dc2:	2306      	movs	r3, #6
   11dc4:	e000      	b.n	11dc8 <n25q256a_switch_mode+0xa0>
   11dc6:	2300      	movs	r3, #0
   11dc8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   11dca:	7afb      	ldrb	r3, [r7, #11]
   11dcc:	2265      	movs	r2, #101	; 0x65
   11dce:	4619      	mov	r1, r3
   11dd0:	6878      	ldr	r0, [r7, #4]
   11dd2:	4b05      	ldr	r3, [pc, #20]	; (11de8 <n25q256a_switch_mode+0xc0>)
   11dd4:	4798      	blx	r3
   11dd6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   11dd8:	68fb      	ldr	r3, [r7, #12]
   11dda:	78fa      	ldrb	r2, [r7, #3]
   11ddc:	731a      	strb	r2, [r3, #12]
   11dde:	e000      	b.n	11de2 <n25q256a_switch_mode+0xba>
		return;
   11de0:	bf00      	nop
	}
}
   11de2:	371c      	adds	r7, #28
   11de4:	46bd      	mov	sp, r7
   11de6:	bd90      	pop	{r4, r7, pc}
   11de8:	00011b1d 	.word	0x00011b1d
   11dec:	00011c59 	.word	0x00011c59
   11df0:	00011bb9 	.word	0x00011bb9

00011df4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   11df4:	b580      	push	{r7, lr}
   11df6:	b086      	sub	sp, #24
   11df8:	af00      	add	r7, sp, #0
   11dfa:	60f8      	str	r0, [r7, #12]
   11dfc:	60b9      	str	r1, [r7, #8]
   11dfe:	607a      	str	r2, [r7, #4]
   11e00:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   11e02:	68fb      	ldr	r3, [r7, #12]
   11e04:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   11e06:	4a0c      	ldr	r2, [pc, #48]	; (11e38 <n25q256a_construct+0x44>)
   11e08:	68b9      	ldr	r1, [r7, #8]
   11e0a:	68f8      	ldr	r0, [r7, #12]
   11e0c:	4b0b      	ldr	r3, [pc, #44]	; (11e3c <n25q256a_construct+0x48>)
   11e0e:	4798      	blx	r3
	n25q->quad_mode    = 0;
   11e10:	697b      	ldr	r3, [r7, #20]
   11e12:	2200      	movs	r2, #0
   11e14:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   11e16:	697b      	ldr	r3, [r7, #20]
   11e18:	2200      	movs	r2, #0
   11e1a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   11e1c:	697b      	ldr	r3, [r7, #20]
   11e1e:	687a      	ldr	r2, [r7, #4]
   11e20:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   11e22:	78fb      	ldrb	r3, [r7, #3]
   11e24:	4619      	mov	r1, r3
   11e26:	68f8      	ldr	r0, [r7, #12]
   11e28:	4b05      	ldr	r3, [pc, #20]	; (11e40 <n25q256a_construct+0x4c>)
   11e2a:	4798      	blx	r3
	return me;
   11e2c:	68fb      	ldr	r3, [r7, #12]
}
   11e2e:	4618      	mov	r0, r3
   11e30:	3718      	adds	r7, #24
   11e32:	46bd      	mov	sp, r7
   11e34:	bd80      	pop	{r7, pc}
   11e36:	bf00      	nop
   11e38:	00015344 	.word	0x00015344
   11e3c:	000122d1 	.word	0x000122d1
   11e40:	00011d29 	.word	0x00011d29

00011e44 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11e44:	b580      	push	{r7, lr}
   11e46:	b08c      	sub	sp, #48	; 0x30
   11e48:	af00      	add	r7, sp, #0
   11e4a:	60f8      	str	r0, [r7, #12]
   11e4c:	60b9      	str	r1, [r7, #8]
   11e4e:	607a      	str	r2, [r7, #4]
   11e50:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11e52:	68fb      	ldr	r3, [r7, #12]
   11e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11e56:	68fb      	ldr	r3, [r7, #12]
   11e58:	681b      	ldr	r3, [r3, #0]
   11e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   11e5c:	f107 0310 	add.w	r3, r7, #16
   11e60:	2200      	movs	r2, #0
   11e62:	601a      	str	r2, [r3, #0]
   11e64:	605a      	str	r2, [r3, #4]
   11e66:	609a      	str	r2, [r3, #8]
   11e68:	60da      	str	r2, [r3, #12]
   11e6a:	611a      	str	r2, [r3, #16]
   11e6c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   11e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11e70:	7b1b      	ldrb	r3, [r3, #12]
   11e72:	2b00      	cmp	r3, #0
   11e74:	d001      	beq.n	11e7a <n25q256a_read+0x36>
   11e76:	2206      	movs	r2, #6
   11e78:	e000      	b.n	11e7c <n25q256a_read+0x38>
   11e7a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   11e7c:	7c3b      	ldrb	r3, [r7, #16]
   11e7e:	f362 0302 	bfi	r3, r2, #0, #3
   11e82:	743b      	strb	r3, [r7, #16]
   11e84:	7c3b      	ldrb	r3, [r7, #16]
   11e86:	f043 0310 	orr.w	r3, r3, #16
   11e8a:	743b      	strb	r3, [r7, #16]
   11e8c:	7c3b      	ldrb	r3, [r7, #16]
   11e8e:	f043 0320 	orr.w	r3, r3, #32
   11e92:	743b      	strb	r3, [r7, #16]
   11e94:	7c3b      	ldrb	r3, [r7, #16]
   11e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11e9a:	743b      	strb	r3, [r7, #16]
   11e9c:	7c7b      	ldrb	r3, [r7, #17]
   11e9e:	2201      	movs	r2, #1
   11ea0:	f362 1305 	bfi	r3, r2, #4, #2
   11ea4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   11ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ea8:	7b1b      	ldrb	r3, [r3, #12]
   11eaa:	2b00      	cmp	r3, #0
   11eac:	d001      	beq.n	11eb2 <n25q256a_read+0x6e>
   11eae:	220a      	movs	r2, #10
   11eb0:	e000      	b.n	11eb4 <n25q256a_read+0x70>
   11eb2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   11eb4:	7cbb      	ldrb	r3, [r7, #18]
   11eb6:	f362 0304 	bfi	r3, r2, #0, #5
   11eba:	74bb      	strb	r3, [r7, #18]
   11ebc:	230b      	movs	r3, #11
   11ebe:	753b      	strb	r3, [r7, #20]
   11ec0:	687b      	ldr	r3, [r7, #4]
   11ec2:	61bb      	str	r3, [r7, #24]
   11ec4:	683b      	ldr	r3, [r7, #0]
   11ec6:	61fb      	str	r3, [r7, #28]
   11ec8:	68bb      	ldr	r3, [r7, #8]
   11eca:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   11ecc:	f107 0310 	add.w	r3, r7, #16
   11ed0:	4619      	mov	r1, r3
   11ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11ed4:	4b03      	ldr	r3, [pc, #12]	; (11ee4 <n25q256a_read+0xa0>)
   11ed6:	4798      	blx	r3
	return ERR_NONE;
   11ed8:	2300      	movs	r3, #0
}
   11eda:	4618      	mov	r0, r3
   11edc:	3730      	adds	r7, #48	; 0x30
   11ede:	46bd      	mov	sp, r7
   11ee0:	bd80      	pop	{r7, pc}
   11ee2:	bf00      	nop
   11ee4:	00008a91 	.word	0x00008a91

00011ee8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11ee8:	b580      	push	{r7, lr}
   11eea:	b08c      	sub	sp, #48	; 0x30
   11eec:	af00      	add	r7, sp, #0
   11eee:	60f8      	str	r0, [r7, #12]
   11ef0:	60b9      	str	r1, [r7, #8]
   11ef2:	607a      	str	r2, [r7, #4]
   11ef4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11ef6:	68fb      	ldr	r3, [r7, #12]
   11ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	681b      	ldr	r3, [r3, #0]
   11efe:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   11f00:	f107 0310 	add.w	r3, r7, #16
   11f04:	2200      	movs	r2, #0
   11f06:	601a      	str	r2, [r3, #0]
   11f08:	605a      	str	r2, [r3, #4]
   11f0a:	609a      	str	r2, [r3, #8]
   11f0c:	60da      	str	r2, [r3, #12]
   11f0e:	611a      	str	r2, [r3, #16]
   11f10:	615a      	str	r2, [r3, #20]
   11f12:	7c3b      	ldrb	r3, [r7, #16]
   11f14:	f043 0310 	orr.w	r3, r3, #16
   11f18:	743b      	strb	r3, [r7, #16]
   11f1a:	7c3b      	ldrb	r3, [r7, #16]
   11f1c:	f043 0320 	orr.w	r3, r3, #32
   11f20:	743b      	strb	r3, [r7, #16]
   11f22:	7c3b      	ldrb	r3, [r7, #16]
   11f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11f28:	743b      	strb	r3, [r7, #16]
   11f2a:	7c7b      	ldrb	r3, [r7, #17]
   11f2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   11f30:	747b      	strb	r3, [r7, #17]
   11f32:	2302      	movs	r3, #2
   11f34:	753b      	strb	r3, [r7, #20]
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	61bb      	str	r3, [r7, #24]
   11f3a:	683b      	ldr	r3, [r7, #0]
   11f3c:	61fb      	str	r3, [r7, #28]
   11f3e:	68bb      	ldr	r3, [r7, #8]
   11f40:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11f44:	7b1b      	ldrb	r3, [r3, #12]
   11f46:	2b00      	cmp	r3, #0
   11f48:	d001      	beq.n	11f4e <n25q256a_write+0x66>
   11f4a:	2206      	movs	r2, #6
   11f4c:	e000      	b.n	11f50 <n25q256a_write+0x68>
   11f4e:	2200      	movs	r2, #0
   11f50:	7c3b      	ldrb	r3, [r7, #16]
   11f52:	f362 0302 	bfi	r3, r2, #0, #3
   11f56:	743b      	strb	r3, [r7, #16]
	while (length) {
   11f58:	e035      	b.n	11fc6 <n25q256a_write+0xde>
		cmd.address = address;
   11f5a:	687b      	ldr	r3, [r7, #4]
   11f5c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   11f5e:	683b      	ldr	r3, [r7, #0]
   11f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11f64:	d802      	bhi.n	11f6c <n25q256a_write+0x84>
			cmd.buf_len = length;
   11f66:	683b      	ldr	r3, [r7, #0]
   11f68:	61fb      	str	r3, [r7, #28]
   11f6a:	e002      	b.n	11f72 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   11f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
   11f70:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11f72:	7c3b      	ldrb	r3, [r7, #16]
   11f74:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f78:	b2db      	uxtb	r3, r3
   11f7a:	2201      	movs	r2, #1
   11f7c:	4619      	mov	r1, r3
   11f7e:	68f8      	ldr	r0, [r7, #12]
   11f80:	4b19      	ldr	r3, [pc, #100]	; (11fe8 <n25q256a_write+0x100>)
   11f82:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   11f84:	f107 0310 	add.w	r3, r7, #16
   11f88:	4619      	mov	r1, r3
   11f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11f8c:	4b17      	ldr	r3, [pc, #92]	; (11fec <n25q256a_write+0x104>)
   11f8e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11f90:	bf00      	nop
   11f92:	7c3b      	ldrb	r3, [r7, #16]
   11f94:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f98:	b2db      	uxtb	r3, r3
   11f9a:	2270      	movs	r2, #112	; 0x70
   11f9c:	4619      	mov	r1, r3
   11f9e:	68f8      	ldr	r0, [r7, #12]
   11fa0:	4b13      	ldr	r3, [pc, #76]	; (11ff0 <n25q256a_write+0x108>)
   11fa2:	4798      	blx	r3
   11fa4:	4603      	mov	r3, r0
   11fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11faa:	2b00      	cmp	r3, #0
   11fac:	d0f1      	beq.n	11f92 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   11fae:	6a3a      	ldr	r2, [r7, #32]
   11fb0:	69fb      	ldr	r3, [r7, #28]
   11fb2:	4413      	add	r3, r2
   11fb4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   11fb6:	69fb      	ldr	r3, [r7, #28]
   11fb8:	683a      	ldr	r2, [r7, #0]
   11fba:	1ad3      	subs	r3, r2, r3
   11fbc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   11fbe:	69fb      	ldr	r3, [r7, #28]
   11fc0:	687a      	ldr	r2, [r7, #4]
   11fc2:	4413      	add	r3, r2
   11fc4:	607b      	str	r3, [r7, #4]
	while (length) {
   11fc6:	683b      	ldr	r3, [r7, #0]
   11fc8:	2b00      	cmp	r3, #0
   11fca:	d1c6      	bne.n	11f5a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   11fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11fce:	7b5b      	ldrb	r3, [r3, #13]
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	d003      	beq.n	11fdc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   11fd4:	2101      	movs	r1, #1
   11fd6:	68f8      	ldr	r0, [r7, #12]
   11fd8:	4b06      	ldr	r3, [pc, #24]	; (11ff4 <n25q256a_write+0x10c>)
   11fda:	4798      	blx	r3
	}
	return ERR_NONE;
   11fdc:	2300      	movs	r3, #0
}
   11fde:	4618      	mov	r0, r3
   11fe0:	3730      	adds	r7, #48	; 0x30
   11fe2:	46bd      	mov	sp, r7
   11fe4:	bd80      	pop	{r7, pc}
   11fe6:	bf00      	nop
   11fe8:	00011c59 	.word	0x00011c59
   11fec:	00008a91 	.word	0x00008a91
   11ff0:	00011b1d 	.word	0x00011b1d
   11ff4:	00011a51 	.word	0x00011a51

00011ff8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   11ff8:	b580      	push	{r7, lr}
   11ffa:	b090      	sub	sp, #64	; 0x40
   11ffc:	af00      	add	r7, sp, #0
   11ffe:	60f8      	str	r0, [r7, #12]
   12000:	60b9      	str	r1, [r7, #8]
   12002:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   12004:	68fb      	ldr	r3, [r7, #12]
   12006:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   1200e:	f107 0314 	add.w	r3, r7, #20
   12012:	2200      	movs	r2, #0
   12014:	601a      	str	r2, [r3, #0]
   12016:	605a      	str	r2, [r3, #4]
   12018:	609a      	str	r2, [r3, #8]
   1201a:	60da      	str	r2, [r3, #12]
   1201c:	611a      	str	r2, [r3, #16]
   1201e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   12020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12022:	7b1b      	ldrb	r3, [r3, #12]
   12024:	2b00      	cmp	r3, #0
   12026:	d001      	beq.n	1202c <n25q256a_erase+0x34>
   12028:	2206      	movs	r2, #6
   1202a:	e000      	b.n	1202e <n25q256a_erase+0x36>
   1202c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   1202e:	7d3b      	ldrb	r3, [r7, #20]
   12030:	f362 0302 	bfi	r3, r2, #0, #3
   12034:	753b      	strb	r3, [r7, #20]
   12036:	7d3b      	ldrb	r3, [r7, #20]
   12038:	f043 0310 	orr.w	r3, r3, #16
   1203c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   1203e:	687b      	ldr	r3, [r7, #4]
   12040:	4a56      	ldr	r2, [pc, #344]	; (1219c <n25q256a_erase+0x1a4>)
   12042:	4293      	cmp	r3, r2
   12044:	bf94      	ite	ls
   12046:	2301      	movls	r3, #1
   12048:	2300      	movhi	r3, #0
   1204a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   1204c:	7d3b      	ldrb	r3, [r7, #20]
   1204e:	f362 1345 	bfi	r3, r2, #5, #1
   12052:	753b      	strb	r3, [r7, #20]
   12054:	7d7b      	ldrb	r3, [r7, #21]
   12056:	2202      	movs	r2, #2
   12058:	f362 1305 	bfi	r3, r2, #4, #2
   1205c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   1205e:	68bb      	ldr	r3, [r7, #8]
   12060:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   12062:	687b      	ldr	r3, [r7, #4]
   12064:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   12066:	2300      	movs	r3, #0
   12068:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   1206a:	687b      	ldr	r3, [r7, #4]
   1206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   12070:	2b00      	cmp	r3, #0
   12072:	d104      	bne.n	1207e <n25q256a_erase+0x86>
   12074:	68bb      	ldr	r3, [r7, #8]
   12076:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1207a:	2b00      	cmp	r3, #0
   1207c:	d002      	beq.n	12084 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   1207e:	f06f 030c 	mvn.w	r3, #12
   12082:	e087      	b.n	12194 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   12084:	687b      	ldr	r3, [r7, #4]
   12086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1208a:	d368      	bcc.n	1215e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   1208c:	23c7      	movs	r3, #199	; 0xc7
   1208e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   12090:	7d3b      	ldrb	r3, [r7, #20]
   12092:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12096:	b2db      	uxtb	r3, r3
   12098:	2201      	movs	r2, #1
   1209a:	4619      	mov	r1, r3
   1209c:	68f8      	ldr	r0, [r7, #12]
   1209e:	4b40      	ldr	r3, [pc, #256]	; (121a0 <n25q256a_erase+0x1a8>)
   120a0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   120a2:	f107 0314 	add.w	r3, r7, #20
   120a6:	4619      	mov	r1, r3
   120a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   120aa:	4b3e      	ldr	r3, [pc, #248]	; (121a4 <n25q256a_erase+0x1ac>)
   120ac:	4798      	blx	r3
   120ae:	e059      	b.n	12164 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   120b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   120b2:	b29b      	uxth	r3, r3
   120b4:	2b00      	cmp	r3, #0
   120b6:	d11f      	bne.n	120f8 <n25q256a_erase+0x100>
   120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   120ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   120be:	d31b      	bcc.n	120f8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   120c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   120c2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   120c4:	23d8      	movs	r3, #216	; 0xd8
   120c6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   120c8:	7d3b      	ldrb	r3, [r7, #20]
   120ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
   120ce:	b2db      	uxtb	r3, r3
   120d0:	2201      	movs	r2, #1
   120d2:	4619      	mov	r1, r3
   120d4:	68f8      	ldr	r0, [r7, #12]
   120d6:	4b32      	ldr	r3, [pc, #200]	; (121a0 <n25q256a_erase+0x1a8>)
   120d8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   120da:	f107 0314 	add.w	r3, r7, #20
   120de:	4619      	mov	r1, r3
   120e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   120e2:	4b30      	ldr	r3, [pc, #192]	; (121a4 <n25q256a_erase+0x1ac>)
   120e4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   120e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   120e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   120ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   120ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   120f0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   120f4:	63bb      	str	r3, [r7, #56]	; 0x38
   120f6:	e023      	b.n	12140 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   120fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   120fe:	d31b      	bcc.n	12138 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   12100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12102:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   12104:	2320      	movs	r3, #32
   12106:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   12108:	7d3b      	ldrb	r3, [r7, #20]
   1210a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1210e:	b2db      	uxtb	r3, r3
   12110:	2201      	movs	r2, #1
   12112:	4619      	mov	r1, r3
   12114:	68f8      	ldr	r0, [r7, #12]
   12116:	4b22      	ldr	r3, [pc, #136]	; (121a0 <n25q256a_erase+0x1a8>)
   12118:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1211a:	f107 0314 	add.w	r3, r7, #20
   1211e:	4619      	mov	r1, r3
   12120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12122:	4b20      	ldr	r3, [pc, #128]	; (121a4 <n25q256a_erase+0x1ac>)
   12124:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   12126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1212c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   1212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12130:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   12134:	63bb      	str	r3, [r7, #56]	; 0x38
   12136:	e003      	b.n	12140 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   12138:	f06f 030c 	mvn.w	r3, #12
   1213c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   1213e:	e011      	b.n	12164 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   12140:	bf00      	nop
   12142:	7d3b      	ldrb	r3, [r7, #20]
   12144:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12148:	b2db      	uxtb	r3, r3
   1214a:	2270      	movs	r2, #112	; 0x70
   1214c:	4619      	mov	r1, r3
   1214e:	68f8      	ldr	r0, [r7, #12]
   12150:	4b15      	ldr	r3, [pc, #84]	; (121a8 <n25q256a_erase+0x1b0>)
   12152:	4798      	blx	r3
   12154:	4603      	mov	r3, r0
   12156:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1215a:	2b00      	cmp	r3, #0
   1215c:	d0f1      	beq.n	12142 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   1215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12160:	2b00      	cmp	r3, #0
   12162:	d1a5      	bne.n	120b0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   12164:	bf00      	nop
   12166:	7d3b      	ldrb	r3, [r7, #20]
   12168:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1216c:	b2db      	uxtb	r3, r3
   1216e:	2270      	movs	r2, #112	; 0x70
   12170:	4619      	mov	r1, r3
   12172:	68f8      	ldr	r0, [r7, #12]
   12174:	4b0c      	ldr	r3, [pc, #48]	; (121a8 <n25q256a_erase+0x1b0>)
   12176:	4798      	blx	r3
   12178:	4603      	mov	r3, r0
   1217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1217e:	2b00      	cmp	r3, #0
   12180:	d0f1      	beq.n	12166 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   12182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12184:	7b5b      	ldrb	r3, [r3, #13]
   12186:	2b00      	cmp	r3, #0
   12188:	d003      	beq.n	12192 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   1218a:	2101      	movs	r1, #1
   1218c:	68f8      	ldr	r0, [r7, #12]
   1218e:	4b07      	ldr	r3, [pc, #28]	; (121ac <n25q256a_erase+0x1b4>)
   12190:	4798      	blx	r3
	}
	return rc;
   12192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   12194:	4618      	mov	r0, r3
   12196:	3740      	adds	r7, #64	; 0x40
   12198:	46bd      	mov	sp, r7
   1219a:	bd80      	pop	{r7, pc}
   1219c:	001fffff 	.word	0x001fffff
   121a0:	00011c59 	.word	0x00011c59
   121a4:	00008a91 	.word	0x00008a91
   121a8:	00011b1d 	.word	0x00011b1d
   121ac:	00011a51 	.word	0x00011a51

000121b0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   121b0:	b590      	push	{r4, r7, lr}
   121b2:	b085      	sub	sp, #20
   121b4:	af00      	add	r7, sp, #0
   121b6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   121b8:	687b      	ldr	r3, [r7, #4]
   121ba:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	7b1b      	ldrb	r3, [r3, #12]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d001      	beq.n	121c8 <n25q256a_enable_xip+0x18>
   121c4:	2306      	movs	r3, #6
   121c6:	e000      	b.n	121ca <n25q256a_enable_xip+0x1a>
   121c8:	2300      	movs	r3, #0
   121ca:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   121cc:	68fb      	ldr	r3, [r7, #12]
   121ce:	7b5b      	ldrb	r3, [r3, #13]
   121d0:	2b00      	cmp	r3, #0
   121d2:	d129      	bne.n	12228 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   121d4:	7afb      	ldrb	r3, [r7, #11]
   121d6:	2285      	movs	r2, #133	; 0x85
   121d8:	4619      	mov	r1, r3
   121da:	6878      	ldr	r0, [r7, #4]
   121dc:	4b15      	ldr	r3, [pc, #84]	; (12234 <n25q256a_enable_xip+0x84>)
   121de:	4798      	blx	r3
   121e0:	4603      	mov	r3, r0
   121e2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   121e4:	7abb      	ldrb	r3, [r7, #10]
   121e6:	f003 0308 	and.w	r3, r3, #8
   121ea:	2b00      	cmp	r3, #0
   121ec:	d015      	beq.n	1221a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   121ee:	7abb      	ldrb	r3, [r7, #10]
   121f0:	f023 0308 	bic.w	r3, r3, #8
   121f4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   121f6:	7abb      	ldrb	r3, [r7, #10]
   121f8:	7af9      	ldrb	r1, [r7, #11]
   121fa:	2281      	movs	r2, #129	; 0x81
   121fc:	6878      	ldr	r0, [r7, #4]
   121fe:	4c0e      	ldr	r4, [pc, #56]	; (12238 <n25q256a_enable_xip+0x88>)
   12200:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   12202:	bf00      	nop
   12204:	7afb      	ldrb	r3, [r7, #11]
   12206:	2270      	movs	r2, #112	; 0x70
   12208:	4619      	mov	r1, r3
   1220a:	6878      	ldr	r0, [r7, #4]
   1220c:	4b09      	ldr	r3, [pc, #36]	; (12234 <n25q256a_enable_xip+0x84>)
   1220e:	4798      	blx	r3
   12210:	4603      	mov	r3, r0
   12212:	f003 0380 	and.w	r3, r3, #128	; 0x80
   12216:	2b00      	cmp	r3, #0
   12218:	d0f4      	beq.n	12204 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   1221a:	68fb      	ldr	r3, [r7, #12]
   1221c:	2201      	movs	r2, #1
   1221e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   12220:	2101      	movs	r1, #1
   12222:	6878      	ldr	r0, [r7, #4]
   12224:	4b05      	ldr	r3, [pc, #20]	; (1223c <n25q256a_enable_xip+0x8c>)
   12226:	4798      	blx	r3
	}
	return ERR_NONE;
   12228:	2300      	movs	r3, #0
}
   1222a:	4618      	mov	r0, r3
   1222c:	3714      	adds	r7, #20
   1222e:	46bd      	mov	sp, r7
   12230:	bd90      	pop	{r4, r7, pc}
   12232:	bf00      	nop
   12234:	00011b1d 	.word	0x00011b1d
   12238:	00011bb9 	.word	0x00011bb9
   1223c:	00011a51 	.word	0x00011a51

00012240 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   12240:	b580      	push	{r7, lr}
   12242:	b086      	sub	sp, #24
   12244:	af00      	add	r7, sp, #0
   12246:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   12248:	687b      	ldr	r3, [r7, #4]
   1224a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1224c:	687b      	ldr	r3, [r7, #4]
   1224e:	681b      	ldr	r3, [r3, #0]
   12250:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   12252:	697b      	ldr	r3, [r7, #20]
   12254:	7b1b      	ldrb	r3, [r3, #12]
   12256:	2b00      	cmp	r3, #0
   12258:	d001      	beq.n	1225e <n25q256a_disable_xip+0x1e>
   1225a:	2306      	movs	r3, #6
   1225c:	e000      	b.n	12260 <n25q256a_disable_xip+0x20>
   1225e:	2300      	movs	r3, #0
   12260:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   12262:	2100      	movs	r1, #0
   12264:	6878      	ldr	r0, [r7, #4]
   12266:	4b15      	ldr	r3, [pc, #84]	; (122bc <n25q256a_disable_xip+0x7c>)
   12268:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   1226a:	7bfb      	ldrb	r3, [r7, #15]
   1226c:	2285      	movs	r2, #133	; 0x85
   1226e:	4619      	mov	r1, r3
   12270:	6878      	ldr	r0, [r7, #4]
   12272:	4b13      	ldr	r3, [pc, #76]	; (122c0 <n25q256a_disable_xip+0x80>)
   12274:	4798      	blx	r3
   12276:	4603      	mov	r3, r0
   12278:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   1227a:	7bbb      	ldrb	r3, [r7, #14]
   1227c:	f003 0308 	and.w	r3, r3, #8
   12280:	2b00      	cmp	r3, #0
   12282:	d113      	bne.n	122ac <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   12284:	697b      	ldr	r3, [r7, #20]
   12286:	689b      	ldr	r3, [r3, #8]
   12288:	2b00      	cmp	r3, #0
   1228a:	d00f      	beq.n	122ac <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   1228c:	693b      	ldr	r3, [r7, #16]
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   12292:	6938      	ldr	r0, [r7, #16]
   12294:	4b0b      	ldr	r3, [pc, #44]	; (122c4 <n25q256a_disable_xip+0x84>)
   12296:	4798      	blx	r3
			n25q->pin_exit_xip();
   12298:	697b      	ldr	r3, [r7, #20]
   1229a:	689b      	ldr	r3, [r3, #8]
   1229c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   1229e:	68b9      	ldr	r1, [r7, #8]
   122a0:	6938      	ldr	r0, [r7, #16]
   122a2:	4b09      	ldr	r3, [pc, #36]	; (122c8 <n25q256a_disable_xip+0x88>)
   122a4:	4798      	blx	r3
			qspi_sync_enable(descr);
   122a6:	6938      	ldr	r0, [r7, #16]
   122a8:	4b08      	ldr	r3, [pc, #32]	; (122cc <n25q256a_disable_xip+0x8c>)
   122aa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   122ac:	697b      	ldr	r3, [r7, #20]
   122ae:	2200      	movs	r2, #0
   122b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   122b2:	2300      	movs	r3, #0
}
   122b4:	4618      	mov	r0, r3
   122b6:	3718      	adds	r7, #24
   122b8:	46bd      	mov	sp, r7
   122ba:	bd80      	pop	{r7, pc}
   122bc:	00011a51 	.word	0x00011a51
   122c0:	00011b1d 	.word	0x00011b1d
   122c4:	00008a55 	.word	0x00008a55
   122c8:	000089cd 	.word	0x000089cd
   122cc:	00008a19 	.word	0x00008a19

000122d0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   122d0:	b480      	push	{r7}
   122d2:	b085      	sub	sp, #20
   122d4:	af00      	add	r7, sp, #0
   122d6:	60f8      	str	r0, [r7, #12]
   122d8:	60b9      	str	r1, [r7, #8]
   122da:	607a      	str	r2, [r7, #4]
	me->io        = io;
   122dc:	68fb      	ldr	r3, [r7, #12]
   122de:	68ba      	ldr	r2, [r7, #8]
   122e0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   122e2:	68fb      	ldr	r3, [r7, #12]
   122e4:	687a      	ldr	r2, [r7, #4]
   122e6:	605a      	str	r2, [r3, #4]

	return me;
   122e8:	68fb      	ldr	r3, [r7, #12]
}
   122ea:	4618      	mov	r0, r3
   122ec:	3714      	adds	r7, #20
   122ee:	46bd      	mov	sp, r7
   122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   122f4:	4770      	bx	lr

000122f6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   122f6:	b480      	push	{r7}
   122f8:	b083      	sub	sp, #12
   122fa:	af00      	add	r7, sp, #0
   122fc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   122fe:	687b      	ldr	r3, [r7, #4]
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	b29a      	uxth	r2, r3
   12304:	687b      	ldr	r3, [r7, #4]
   12306:	3301      	adds	r3, #1
   12308:	781b      	ldrb	r3, [r3, #0]
   1230a:	b29b      	uxth	r3, r3
   1230c:	021b      	lsls	r3, r3, #8
   1230e:	b29b      	uxth	r3, r3
   12310:	4413      	add	r3, r2
   12312:	b29b      	uxth	r3, r3
}
   12314:	4618      	mov	r0, r3
   12316:	370c      	adds	r7, #12
   12318:	46bd      	mov	sp, r7
   1231a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1231e:	4770      	bx	lr

00012320 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   12320:	b480      	push	{r7}
   12322:	b083      	sub	sp, #12
   12324:	af00      	add	r7, sp, #0
   12326:	6078      	str	r0, [r7, #4]
	return desc[0];
   12328:	687b      	ldr	r3, [r7, #4]
   1232a:	781b      	ldrb	r3, [r3, #0]
}
   1232c:	4618      	mov	r0, r3
   1232e:	370c      	adds	r7, #12
   12330:	46bd      	mov	sp, r7
   12332:	f85d 7b04 	ldr.w	r7, [sp], #4
   12336:	4770      	bx	lr

00012338 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   12338:	b580      	push	{r7, lr}
   1233a:	b082      	sub	sp, #8
   1233c:	af00      	add	r7, sp, #0
   1233e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12340:	6878      	ldr	r0, [r7, #4]
   12342:	4b05      	ldr	r3, [pc, #20]	; (12358 <usb_desc_next+0x20>)
   12344:	4798      	blx	r3
   12346:	4603      	mov	r3, r0
   12348:	461a      	mov	r2, r3
   1234a:	687b      	ldr	r3, [r7, #4]
   1234c:	4413      	add	r3, r2
}
   1234e:	4618      	mov	r0, r3
   12350:	3708      	adds	r7, #8
   12352:	46bd      	mov	sp, r7
   12354:	bd80      	pop	{r7, pc}
   12356:	bf00      	nop
   12358:	00012321 	.word	0x00012321

0001235c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   1235c:	b580      	push	{r7, lr}
   1235e:	b08c      	sub	sp, #48	; 0x30
   12360:	af00      	add	r7, sp, #0
   12362:	6078      	str	r0, [r7, #4]
   12364:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   12366:	687b      	ldr	r3, [r7, #4]
   12368:	689b      	ldr	r3, [r3, #8]
   1236a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   1236c:	683b      	ldr	r3, [r7, #0]
   1236e:	681b      	ldr	r3, [r3, #0]
   12370:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   12372:	2300      	movs	r3, #0
   12374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   12378:	e08f      	b.n	1249a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   1237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1237c:	2b00      	cmp	r3, #0
   1237e:	d102      	bne.n	12386 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   12380:	f06f 0309 	mvn.w	r3, #9
   12384:	e092      	b.n	124ac <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   12386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12388:	789b      	ldrb	r3, [r3, #2]
   1238a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   1238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1238e:	795b      	ldrb	r3, [r3, #5]
   12390:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   12392:	7c7b      	ldrb	r3, [r7, #17]
   12394:	2b02      	cmp	r3, #2
   12396:	d002      	beq.n	1239e <cdcdf_acm_enable+0x42>
   12398:	7c7b      	ldrb	r3, [r7, #17]
   1239a:	2b0a      	cmp	r3, #10
   1239c:	d121      	bne.n	123e2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   1239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   123a2:	6a3a      	ldr	r2, [r7, #32]
   123a4:	5cd2      	ldrb	r2, [r2, r3]
   123a6:	7bbb      	ldrb	r3, [r7, #14]
   123a8:	429a      	cmp	r2, r3
   123aa:	d102      	bne.n	123b2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   123ac:	f06f 0311 	mvn.w	r3, #17
   123b0:	e07c      	b.n	124ac <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   123b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   123b6:	6a3a      	ldr	r2, [r7, #32]
   123b8:	5cd3      	ldrb	r3, [r2, r3]
   123ba:	2bff      	cmp	r3, #255	; 0xff
   123bc:	d002      	beq.n	123c4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   123be:	f06f 031b 	mvn.w	r3, #27
   123c2:	e073      	b.n	124ac <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   123c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   123c8:	7bb9      	ldrb	r1, [r7, #14]
   123ca:	6a3a      	ldr	r2, [r7, #32]
   123cc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   123ce:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   123d0:	683b      	ldr	r3, [r7, #0]
   123d2:	685b      	ldr	r3, [r3, #4]
   123d4:	2205      	movs	r2, #5
   123d6:	4619      	mov	r1, r3
   123d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   123da:	4b36      	ldr	r3, [pc, #216]	; (124b4 <cdcdf_acm_enable+0x158>)
   123dc:	4798      	blx	r3
   123de:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   123e0:	e047      	b.n	12472 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   123e2:	f06f 0309 	mvn.w	r3, #9
   123e6:	e061      	b.n	124ac <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   123e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   123ea:	789b      	ldrb	r3, [r3, #2]
   123ec:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   123ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   123f0:	78db      	ldrb	r3, [r3, #3]
   123f2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   123f6:	3304      	adds	r3, #4
   123f8:	4618      	mov	r0, r3
   123fa:	4b2f      	ldr	r3, [pc, #188]	; (124b8 <cdcdf_acm_enable+0x15c>)
   123fc:	4798      	blx	r3
   123fe:	4603      	mov	r3, r0
   12400:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   12402:	7ebb      	ldrb	r3, [r7, #26]
   12404:	7ef9      	ldrb	r1, [r7, #27]
   12406:	8bba      	ldrh	r2, [r7, #28]
   12408:	4618      	mov	r0, r3
   1240a:	4b2c      	ldr	r3, [pc, #176]	; (124bc <cdcdf_acm_enable+0x160>)
   1240c:	4798      	blx	r3
   1240e:	4603      	mov	r3, r0
   12410:	2b00      	cmp	r3, #0
   12412:	d002      	beq.n	1241a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   12414:	f06f 0313 	mvn.w	r3, #19
   12418:	e048      	b.n	124ac <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   1241a:	7ebb      	ldrb	r3, [r7, #26]
   1241c:	b25b      	sxtb	r3, r3
   1241e:	2b00      	cmp	r3, #0
   12420:	da0f      	bge.n	12442 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   12422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12426:	7eb9      	ldrb	r1, [r7, #26]
   12428:	6a3a      	ldr	r2, [r7, #32]
   1242a:	4413      	add	r3, r2
   1242c:	460a      	mov	r2, r1
   1242e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   12430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12434:	6a3a      	ldr	r2, [r7, #32]
   12436:	4413      	add	r3, r2
   12438:	789b      	ldrb	r3, [r3, #2]
   1243a:	4618      	mov	r0, r3
   1243c:	4b20      	ldr	r3, [pc, #128]	; (124c0 <cdcdf_acm_enable+0x164>)
   1243e:	4798      	blx	r3
   12440:	e007      	b.n	12452 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   12442:	7eba      	ldrb	r2, [r7, #26]
   12444:	6a3b      	ldr	r3, [r7, #32]
   12446:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   12448:	6a3b      	ldr	r3, [r7, #32]
   1244a:	791b      	ldrb	r3, [r3, #4]
   1244c:	4618      	mov	r0, r3
   1244e:	4b1c      	ldr	r3, [pc, #112]	; (124c0 <cdcdf_acm_enable+0x164>)
   12450:	4798      	blx	r3
			}
			desc->sod = ep;
   12452:	683b      	ldr	r3, [r7, #0]
   12454:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12456:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   12458:	683b      	ldr	r3, [r7, #0]
   1245a:	681b      	ldr	r3, [r3, #0]
   1245c:	4618      	mov	r0, r3
   1245e:	4b19      	ldr	r3, [pc, #100]	; (124c4 <cdcdf_acm_enable+0x168>)
   12460:	4798      	blx	r3
   12462:	4602      	mov	r2, r0
   12464:	683b      	ldr	r3, [r7, #0]
   12466:	685b      	ldr	r3, [r3, #4]
   12468:	4619      	mov	r1, r3
   1246a:	4610      	mov	r0, r2
   1246c:	4b16      	ldr	r3, [pc, #88]	; (124c8 <cdcdf_acm_enable+0x16c>)
   1246e:	4798      	blx	r3
   12470:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   12472:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12474:	2b00      	cmp	r3, #0
   12476:	d1b7      	bne.n	123e8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   12478:	683b      	ldr	r3, [r7, #0]
   1247a:	681b      	ldr	r3, [r3, #0]
   1247c:	4618      	mov	r0, r3
   1247e:	4b11      	ldr	r3, [pc, #68]	; (124c4 <cdcdf_acm_enable+0x168>)
   12480:	4798      	blx	r3
   12482:	683b      	ldr	r3, [r7, #0]
   12484:	685b      	ldr	r3, [r3, #4]
   12486:	2204      	movs	r2, #4
   12488:	4619      	mov	r1, r3
   1248a:	4b0a      	ldr	r3, [pc, #40]	; (124b4 <cdcdf_acm_enable+0x158>)
   1248c:	4798      	blx	r3
   1248e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   12490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12494:	3301      	adds	r3, #1
   12496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1249a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1249e:	2b01      	cmp	r3, #1
   124a0:	f67f af6b 	bls.w	1237a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   124a4:	4b09      	ldr	r3, [pc, #36]	; (124cc <cdcdf_acm_enable+0x170>)
   124a6:	2201      	movs	r2, #1
   124a8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   124aa:	2300      	movs	r3, #0
}
   124ac:	4618      	mov	r0, r3
   124ae:	3730      	adds	r7, #48	; 0x30
   124b0:	46bd      	mov	sp, r7
   124b2:	bd80      	pop	{r7, pc}
   124b4:	000135e1 	.word	0x000135e1
   124b8:	000122f7 	.word	0x000122f7
   124bc:	000095d9 	.word	0x000095d9
   124c0:	000096c5 	.word	0x000096c5
   124c4:	00012339 	.word	0x00012339
   124c8:	0001363d 	.word	0x0001363d
   124cc:	20001f68 	.word	0x20001f68

000124d0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   124d0:	b580      	push	{r7, lr}
   124d2:	b088      	sub	sp, #32
   124d4:	af00      	add	r7, sp, #0
   124d6:	6078      	str	r0, [r7, #4]
   124d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   124da:	687b      	ldr	r3, [r7, #4]
   124dc:	689b      	ldr	r3, [r3, #8]
   124de:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   124e0:	683b      	ldr	r3, [r7, #0]
   124e2:	2b00      	cmp	r3, #0
   124e4:	d00c      	beq.n	12500 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   124e6:	683b      	ldr	r3, [r7, #0]
   124e8:	681b      	ldr	r3, [r3, #0]
   124ea:	795b      	ldrb	r3, [r3, #5]
   124ec:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   124ee:	7c7b      	ldrb	r3, [r7, #17]
   124f0:	2b02      	cmp	r3, #2
   124f2:	d005      	beq.n	12500 <cdcdf_acm_disable+0x30>
   124f4:	7c7b      	ldrb	r3, [r7, #17]
   124f6:	2b0a      	cmp	r3, #10
   124f8:	d002      	beq.n	12500 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   124fa:	f06f 0309 	mvn.w	r3, #9
   124fe:	e035      	b.n	1256c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   12500:	2300      	movs	r3, #0
   12502:	77fb      	strb	r3, [r7, #31]
   12504:	e01f      	b.n	12546 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   12506:	7ffb      	ldrb	r3, [r7, #31]
   12508:	69ba      	ldr	r2, [r7, #24]
   1250a:	5cd3      	ldrb	r3, [r2, r3]
   1250c:	2bff      	cmp	r3, #255	; 0xff
   1250e:	d016      	beq.n	1253e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   12510:	7ffb      	ldrb	r3, [r7, #31]
   12512:	69ba      	ldr	r2, [r7, #24]
   12514:	21ff      	movs	r1, #255	; 0xff
   12516:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   12518:	7ffb      	ldrb	r3, [r7, #31]
   1251a:	69ba      	ldr	r2, [r7, #24]
   1251c:	4413      	add	r3, r2
   1251e:	789b      	ldrb	r3, [r3, #2]
   12520:	2bff      	cmp	r3, #255	; 0xff
   12522:	d00d      	beq.n	12540 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   12524:	7ffb      	ldrb	r3, [r7, #31]
   12526:	69ba      	ldr	r2, [r7, #24]
   12528:	4413      	add	r3, r2
   1252a:	789b      	ldrb	r3, [r3, #2]
   1252c:	4618      	mov	r0, r3
   1252e:	4b11      	ldr	r3, [pc, #68]	; (12574 <cdcdf_acm_disable+0xa4>)
   12530:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   12532:	7ffb      	ldrb	r3, [r7, #31]
   12534:	69ba      	ldr	r2, [r7, #24]
   12536:	4413      	add	r3, r2
   12538:	22ff      	movs	r2, #255	; 0xff
   1253a:	709a      	strb	r2, [r3, #2]
   1253c:	e000      	b.n	12540 <cdcdf_acm_disable+0x70>
			continue;
   1253e:	bf00      	nop
	for (i = 0; i < 2; i++) {
   12540:	7ffb      	ldrb	r3, [r7, #31]
   12542:	3301      	adds	r3, #1
   12544:	77fb      	strb	r3, [r7, #31]
   12546:	7ffb      	ldrb	r3, [r7, #31]
   12548:	2b01      	cmp	r3, #1
   1254a:	d9dc      	bls.n	12506 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   1254c:	69bb      	ldr	r3, [r7, #24]
   1254e:	791b      	ldrb	r3, [r3, #4]
   12550:	2bff      	cmp	r3, #255	; 0xff
   12552:	d007      	beq.n	12564 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   12554:	69bb      	ldr	r3, [r7, #24]
   12556:	791b      	ldrb	r3, [r3, #4]
   12558:	4618      	mov	r0, r3
   1255a:	4b06      	ldr	r3, [pc, #24]	; (12574 <cdcdf_acm_disable+0xa4>)
   1255c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   1255e:	69bb      	ldr	r3, [r7, #24]
   12560:	22ff      	movs	r2, #255	; 0xff
   12562:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   12564:	4b04      	ldr	r3, [pc, #16]	; (12578 <cdcdf_acm_disable+0xa8>)
   12566:	2200      	movs	r2, #0
   12568:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   1256a:	2300      	movs	r3, #0
}
   1256c:	4618      	mov	r0, r3
   1256e:	3720      	adds	r7, #32
   12570:	46bd      	mov	sp, r7
   12572:	bd80      	pop	{r7, pc}
   12574:	00009675 	.word	0x00009675
   12578:	20001f68 	.word	0x20001f68

0001257c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   1257c:	b580      	push	{r7, lr}
   1257e:	b084      	sub	sp, #16
   12580:	af00      	add	r7, sp, #0
   12582:	60f8      	str	r0, [r7, #12]
   12584:	460b      	mov	r3, r1
   12586:	607a      	str	r2, [r7, #4]
   12588:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   1258a:	7afb      	ldrb	r3, [r7, #11]
   1258c:	2b01      	cmp	r3, #1
   1258e:	d009      	beq.n	125a4 <cdcdf_acm_ctrl+0x28>
   12590:	2b02      	cmp	r3, #2
   12592:	d00d      	beq.n	125b0 <cdcdf_acm_ctrl+0x34>
   12594:	2b00      	cmp	r3, #0
   12596:	d10e      	bne.n	125b6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   12598:	6879      	ldr	r1, [r7, #4]
   1259a:	68f8      	ldr	r0, [r7, #12]
   1259c:	4b09      	ldr	r3, [pc, #36]	; (125c4 <cdcdf_acm_ctrl+0x48>)
   1259e:	4798      	blx	r3
   125a0:	4603      	mov	r3, r0
   125a2:	e00a      	b.n	125ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   125a4:	6879      	ldr	r1, [r7, #4]
   125a6:	68f8      	ldr	r0, [r7, #12]
   125a8:	4b07      	ldr	r3, [pc, #28]	; (125c8 <cdcdf_acm_ctrl+0x4c>)
   125aa:	4798      	blx	r3
   125ac:	4603      	mov	r3, r0
   125ae:	e004      	b.n	125ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   125b0:	f06f 031a 	mvn.w	r3, #26
   125b4:	e001      	b.n	125ba <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   125b6:	f06f 030c 	mvn.w	r3, #12
	}
}
   125ba:	4618      	mov	r0, r3
   125bc:	3710      	adds	r7, #16
   125be:	46bd      	mov	sp, r7
   125c0:	bd80      	pop	{r7, pc}
   125c2:	bf00      	nop
   125c4:	0001235d 	.word	0x0001235d
   125c8:	000124d1 	.word	0x000124d1

000125cc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   125cc:	b590      	push	{r4, r7, lr}
   125ce:	b087      	sub	sp, #28
   125d0:	af00      	add	r7, sp, #0
   125d2:	4603      	mov	r3, r0
   125d4:	6039      	str	r1, [r7, #0]
   125d6:	71fb      	strb	r3, [r7, #7]
   125d8:	4613      	mov	r3, r2
   125da:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   125dc:	683b      	ldr	r3, [r7, #0]
   125de:	799a      	ldrb	r2, [r3, #6]
   125e0:	79db      	ldrb	r3, [r3, #7]
   125e2:	021b      	lsls	r3, r3, #8
   125e4:	4313      	orrs	r3, r2
   125e6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   125e8:	4b2b      	ldr	r3, [pc, #172]	; (12698 <cdcdf_acm_set_req+0xcc>)
   125ea:	4798      	blx	r3
   125ec:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   125ee:	683b      	ldr	r3, [r7, #0]
   125f0:	785b      	ldrb	r3, [r3, #1]
   125f2:	2b20      	cmp	r3, #32
   125f4:	d002      	beq.n	125fc <cdcdf_acm_set_req+0x30>
   125f6:	2b22      	cmp	r3, #34	; 0x22
   125f8:	d034      	beq.n	12664 <cdcdf_acm_set_req+0x98>
   125fa:	e046      	b.n	1268a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   125fc:	8afb      	ldrh	r3, [r7, #22]
   125fe:	2b07      	cmp	r3, #7
   12600:	d002      	beq.n	12608 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   12602:	f04f 33ff 	mov.w	r3, #4294967295
   12606:	e042      	b.n	1268e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   12608:	79bb      	ldrb	r3, [r7, #6]
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   1260e:	8afa      	ldrh	r2, [r7, #22]
   12610:	79f8      	ldrb	r0, [r7, #7]
   12612:	2300      	movs	r3, #0
   12614:	6939      	ldr	r1, [r7, #16]
   12616:	4c21      	ldr	r4, [pc, #132]	; (1269c <cdcdf_acm_set_req+0xd0>)
   12618:	47a0      	blx	r4
   1261a:	4603      	mov	r3, r0
   1261c:	e037      	b.n	1268e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   1261e:	693a      	ldr	r2, [r7, #16]
   12620:	f107 0308 	add.w	r3, r7, #8
   12624:	6810      	ldr	r0, [r2, #0]
   12626:	6018      	str	r0, [r3, #0]
   12628:	8891      	ldrh	r1, [r2, #4]
   1262a:	7992      	ldrb	r2, [r2, #6]
   1262c:	8099      	strh	r1, [r3, #4]
   1262e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   12630:	4b1b      	ldr	r3, [pc, #108]	; (126a0 <cdcdf_acm_set_req+0xd4>)
   12632:	681b      	ldr	r3, [r3, #0]
   12634:	2b00      	cmp	r3, #0
   12636:	d008      	beq.n	1264a <cdcdf_acm_set_req+0x7e>
   12638:	4b19      	ldr	r3, [pc, #100]	; (126a0 <cdcdf_acm_set_req+0xd4>)
   1263a:	681b      	ldr	r3, [r3, #0]
   1263c:	f107 0208 	add.w	r2, r7, #8
   12640:	4610      	mov	r0, r2
   12642:	4798      	blx	r3
   12644:	4603      	mov	r3, r0
   12646:	2b00      	cmp	r3, #0
   12648:	d00a      	beq.n	12660 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   1264a:	4b16      	ldr	r3, [pc, #88]	; (126a4 <cdcdf_acm_set_req+0xd8>)
   1264c:	f107 0208 	add.w	r2, r7, #8
   12650:	e892 0003 	ldmia.w	r2, {r0, r1}
   12654:	6018      	str	r0, [r3, #0]
   12656:	3304      	adds	r3, #4
   12658:	8019      	strh	r1, [r3, #0]
   1265a:	3302      	adds	r3, #2
   1265c:	0c0a      	lsrs	r2, r1, #16
   1265e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   12660:	2300      	movs	r3, #0
   12662:	e014      	b.n	1268e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   12664:	2300      	movs	r3, #0
   12666:	2200      	movs	r2, #0
   12668:	2100      	movs	r1, #0
   1266a:	2000      	movs	r0, #0
   1266c:	4c0b      	ldr	r4, [pc, #44]	; (1269c <cdcdf_acm_set_req+0xd0>)
   1266e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   12670:	4b0d      	ldr	r3, [pc, #52]	; (126a8 <cdcdf_acm_set_req+0xdc>)
   12672:	681b      	ldr	r3, [r3, #0]
   12674:	2b00      	cmp	r3, #0
   12676:	d006      	beq.n	12686 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   12678:	4b0b      	ldr	r3, [pc, #44]	; (126a8 <cdcdf_acm_set_req+0xdc>)
   1267a:	681b      	ldr	r3, [r3, #0]
   1267c:	683a      	ldr	r2, [r7, #0]
   1267e:	8852      	ldrh	r2, [r2, #2]
   12680:	b292      	uxth	r2, r2
   12682:	4610      	mov	r0, r2
   12684:	4798      	blx	r3
		}
		return ERR_NONE;
   12686:	2300      	movs	r3, #0
   12688:	e001      	b.n	1268e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   1268a:	f06f 030c 	mvn.w	r3, #12
	}
}
   1268e:	4618      	mov	r0, r3
   12690:	371c      	adds	r7, #28
   12692:	46bd      	mov	sp, r7
   12694:	bd90      	pop	{r4, r7, pc}
   12696:	bf00      	nop
   12698:	000134dd 	.word	0x000134dd
   1269c:	00013351 	.word	0x00013351
   126a0:	20001f7c 	.word	0x20001f7c
   126a4:	20001f70 	.word	0x20001f70
   126a8:	20001f78 	.word	0x20001f78

000126ac <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   126ac:	b590      	push	{r4, r7, lr}
   126ae:	b085      	sub	sp, #20
   126b0:	af00      	add	r7, sp, #0
   126b2:	4603      	mov	r3, r0
   126b4:	6039      	str	r1, [r7, #0]
   126b6:	71fb      	strb	r3, [r7, #7]
   126b8:	4613      	mov	r3, r2
   126ba:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   126bc:	683b      	ldr	r3, [r7, #0]
   126be:	799a      	ldrb	r2, [r3, #6]
   126c0:	79db      	ldrb	r3, [r3, #7]
   126c2:	021b      	lsls	r3, r3, #8
   126c4:	4313      	orrs	r3, r2
   126c6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   126c8:	79bb      	ldrb	r3, [r7, #6]
   126ca:	2b01      	cmp	r3, #1
   126cc:	d101      	bne.n	126d2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   126ce:	2300      	movs	r3, #0
   126d0:	e013      	b.n	126fa <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   126d2:	683b      	ldr	r3, [r7, #0]
   126d4:	785b      	ldrb	r3, [r3, #1]
   126d6:	2b21      	cmp	r3, #33	; 0x21
   126d8:	d10d      	bne.n	126f6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   126da:	89fb      	ldrh	r3, [r7, #14]
   126dc:	2b07      	cmp	r3, #7
   126de:	d002      	beq.n	126e6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   126e0:	f04f 33ff 	mov.w	r3, #4294967295
   126e4:	e009      	b.n	126fa <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   126e6:	89fa      	ldrh	r2, [r7, #14]
   126e8:	79f8      	ldrb	r0, [r7, #7]
   126ea:	2300      	movs	r3, #0
   126ec:	4905      	ldr	r1, [pc, #20]	; (12704 <cdcdf_acm_get_req+0x58>)
   126ee:	4c06      	ldr	r4, [pc, #24]	; (12708 <cdcdf_acm_get_req+0x5c>)
   126f0:	47a0      	blx	r4
   126f2:	4603      	mov	r3, r0
   126f4:	e001      	b.n	126fa <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   126f6:	f06f 030c 	mvn.w	r3, #12
	}
}
   126fa:	4618      	mov	r0, r3
   126fc:	3714      	adds	r7, #20
   126fe:	46bd      	mov	sp, r7
   12700:	bd90      	pop	{r4, r7, pc}
   12702:	bf00      	nop
   12704:	20001f70 	.word	0x20001f70
   12708:	00013351 	.word	0x00013351

0001270c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1270c:	b580      	push	{r7, lr}
   1270e:	b082      	sub	sp, #8
   12710:	af00      	add	r7, sp, #0
   12712:	4603      	mov	r3, r0
   12714:	6039      	str	r1, [r7, #0]
   12716:	71fb      	strb	r3, [r7, #7]
   12718:	4613      	mov	r3, r2
   1271a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   1271c:	683b      	ldr	r3, [r7, #0]
   1271e:	781b      	ldrb	r3, [r3, #0]
   12720:	095b      	lsrs	r3, r3, #5
   12722:	b2db      	uxtb	r3, r3
   12724:	f003 0303 	and.w	r3, r3, #3
   12728:	2b01      	cmp	r3, #1
   1272a:	d002      	beq.n	12732 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   1272c:	f06f 0309 	mvn.w	r3, #9
   12730:	e026      	b.n	12780 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   12732:	683b      	ldr	r3, [r7, #0]
   12734:	889b      	ldrh	r3, [r3, #4]
   12736:	b29a      	uxth	r2, r3
   12738:	4b13      	ldr	r3, [pc, #76]	; (12788 <cdcdf_acm_req+0x7c>)
   1273a:	781b      	ldrb	r3, [r3, #0]
   1273c:	b29b      	uxth	r3, r3
   1273e:	429a      	cmp	r2, r3
   12740:	d007      	beq.n	12752 <cdcdf_acm_req+0x46>
   12742:	683b      	ldr	r3, [r7, #0]
   12744:	889b      	ldrh	r3, [r3, #4]
   12746:	b29a      	uxth	r2, r3
   12748:	4b0f      	ldr	r3, [pc, #60]	; (12788 <cdcdf_acm_req+0x7c>)
   1274a:	785b      	ldrb	r3, [r3, #1]
   1274c:	b29b      	uxth	r3, r3
   1274e:	429a      	cmp	r2, r3
   12750:	d114      	bne.n	1277c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   12752:	683b      	ldr	r3, [r7, #0]
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	b25b      	sxtb	r3, r3
   12758:	2b00      	cmp	r3, #0
   1275a:	da07      	bge.n	1276c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   1275c:	79ba      	ldrb	r2, [r7, #6]
   1275e:	79fb      	ldrb	r3, [r7, #7]
   12760:	6839      	ldr	r1, [r7, #0]
   12762:	4618      	mov	r0, r3
   12764:	4b09      	ldr	r3, [pc, #36]	; (1278c <cdcdf_acm_req+0x80>)
   12766:	4798      	blx	r3
   12768:	4603      	mov	r3, r0
   1276a:	e009      	b.n	12780 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   1276c:	79ba      	ldrb	r2, [r7, #6]
   1276e:	79fb      	ldrb	r3, [r7, #7]
   12770:	6839      	ldr	r1, [r7, #0]
   12772:	4618      	mov	r0, r3
   12774:	4b06      	ldr	r3, [pc, #24]	; (12790 <cdcdf_acm_req+0x84>)
   12776:	4798      	blx	r3
   12778:	4603      	mov	r3, r0
   1277a:	e001      	b.n	12780 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   1277c:	f06f 0309 	mvn.w	r3, #9
	}
}
   12780:	4618      	mov	r0, r3
   12782:	3708      	adds	r7, #8
   12784:	46bd      	mov	sp, r7
   12786:	bd80      	pop	{r7, pc}
   12788:	20001f68 	.word	0x20001f68
   1278c:	000126ad 	.word	0x000126ad
   12790:	000125cd 	.word	0x000125cd

00012794 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   12794:	b580      	push	{r7, lr}
   12796:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   12798:	4b0b      	ldr	r3, [pc, #44]	; (127c8 <cdcdf_acm_init+0x34>)
   1279a:	4798      	blx	r3
   1279c:	4603      	mov	r3, r0
   1279e:	2b01      	cmp	r3, #1
   127a0:	d902      	bls.n	127a8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   127a2:	f06f 0310 	mvn.w	r3, #16
   127a6:	e00d      	b.n	127c4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <cdcdf_acm_init+0x38>)
   127aa:	4a09      	ldr	r2, [pc, #36]	; (127d0 <cdcdf_acm_init+0x3c>)
   127ac:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   127ae:	4b07      	ldr	r3, [pc, #28]	; (127cc <cdcdf_acm_init+0x38>)
   127b0:	4a08      	ldr	r2, [pc, #32]	; (127d4 <cdcdf_acm_init+0x40>)
   127b2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   127b4:	4805      	ldr	r0, [pc, #20]	; (127cc <cdcdf_acm_init+0x38>)
   127b6:	4b08      	ldr	r3, [pc, #32]	; (127d8 <cdcdf_acm_init+0x44>)
   127b8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   127ba:	4908      	ldr	r1, [pc, #32]	; (127dc <cdcdf_acm_init+0x48>)
   127bc:	2001      	movs	r0, #1
   127be:	4b08      	ldr	r3, [pc, #32]	; (127e0 <cdcdf_acm_init+0x4c>)
   127c0:	4798      	blx	r3
	return ERR_NONE;
   127c2:	2300      	movs	r3, #0
}
   127c4:	4618      	mov	r0, r3
   127c6:	bd80      	pop	{r7, pc}
   127c8:	000134f5 	.word	0x000134f5
   127cc:	20001f5c 	.word	0x20001f5c
   127d0:	0001257d 	.word	0x0001257d
   127d4:	20001f68 	.word	0x20001f68
   127d8:	0001345d 	.word	0x0001345d
   127dc:	20000600 	.word	0x20000600
   127e0:	0001338d 	.word	0x0001338d

000127e4 <usb_get_u16>:
{
   127e4:	b480      	push	{r7}
   127e6:	b083      	sub	sp, #12
   127e8:	af00      	add	r7, sp, #0
   127ea:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	781b      	ldrb	r3, [r3, #0]
   127f0:	b29a      	uxth	r2, r3
   127f2:	687b      	ldr	r3, [r7, #4]
   127f4:	3301      	adds	r3, #1
   127f6:	781b      	ldrb	r3, [r3, #0]
   127f8:	b29b      	uxth	r3, r3
   127fa:	021b      	lsls	r3, r3, #8
   127fc:	b29b      	uxth	r3, r3
   127fe:	4413      	add	r3, r2
   12800:	b29b      	uxth	r3, r3
}
   12802:	4618      	mov	r0, r3
   12804:	370c      	adds	r7, #12
   12806:	46bd      	mov	sp, r7
   12808:	f85d 7b04 	ldr.w	r7, [sp], #4
   1280c:	4770      	bx	lr

0001280e <usb_desc_len>:
{
   1280e:	b480      	push	{r7}
   12810:	b083      	sub	sp, #12
   12812:	af00      	add	r7, sp, #0
   12814:	6078      	str	r0, [r7, #4]
	return desc[0];
   12816:	687b      	ldr	r3, [r7, #4]
   12818:	781b      	ldrb	r3, [r3, #0]
}
   1281a:	4618      	mov	r0, r3
   1281c:	370c      	adds	r7, #12
   1281e:	46bd      	mov	sp, r7
   12820:	f85d 7b04 	ldr.w	r7, [sp], #4
   12824:	4770      	bx	lr
	...

00012828 <usb_desc_next>:
{
   12828:	b580      	push	{r7, lr}
   1282a:	b082      	sub	sp, #8
   1282c:	af00      	add	r7, sp, #0
   1282e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12830:	6878      	ldr	r0, [r7, #4]
   12832:	4b05      	ldr	r3, [pc, #20]	; (12848 <usb_desc_next+0x20>)
   12834:	4798      	blx	r3
   12836:	4603      	mov	r3, r0
   12838:	461a      	mov	r2, r3
   1283a:	687b      	ldr	r3, [r7, #4]
   1283c:	4413      	add	r3, r2
}
   1283e:	4618      	mov	r0, r3
   12840:	3708      	adds	r7, #8
   12842:	46bd      	mov	sp, r7
   12844:	bd80      	pop	{r7, pc}
   12846:	bf00      	nop
   12848:	0001280f 	.word	0x0001280f

0001284c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b082      	sub	sp, #8
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	3302      	adds	r3, #2
   12858:	4618      	mov	r0, r3
   1285a:	4b03      	ldr	r3, [pc, #12]	; (12868 <usb_cfg_desc_total_len+0x1c>)
   1285c:	4798      	blx	r3
   1285e:	4603      	mov	r3, r0
}
   12860:	4618      	mov	r0, r3
   12862:	3708      	adds	r7, #8
   12864:	46bd      	mov	sp, r7
   12866:	bd80      	pop	{r7, pc}
   12868:	000127e5 	.word	0x000127e5

0001286c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   1286c:	b590      	push	{r4, r7, lr}
   1286e:	b085      	sub	sp, #20
   12870:	af00      	add	r7, sp, #0
   12872:	4603      	mov	r3, r0
   12874:	6039      	str	r1, [r7, #0]
   12876:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   12878:	2300      	movs	r3, #0
   1287a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   1287c:	683b      	ldr	r3, [r7, #0]
   1287e:	799a      	ldrb	r2, [r3, #6]
   12880:	79db      	ldrb	r3, [r3, #7]
   12882:	021b      	lsls	r3, r3, #8
   12884:	4313      	orrs	r3, r2
   12886:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   12888:	897b      	ldrh	r3, [r7, #10]
   1288a:	2b12      	cmp	r3, #18
   1288c:	d901      	bls.n	12892 <usbdc_get_dev_desc+0x26>
		length = 0x12;
   1288e:	2312      	movs	r3, #18
   12890:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   12892:	68fb      	ldr	r3, [r7, #12]
   12894:	2b00      	cmp	r3, #0
   12896:	d10a      	bne.n	128ae <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   12898:	4b0f      	ldr	r3, [pc, #60]	; (128d8 <usbdc_get_dev_desc+0x6c>)
   1289a:	681b      	ldr	r3, [r3, #0]
   1289c:	6818      	ldr	r0, [r3, #0]
   1289e:	4b0e      	ldr	r3, [pc, #56]	; (128d8 <usbdc_get_dev_desc+0x6c>)
   128a0:	681b      	ldr	r3, [r3, #0]
   128a2:	685b      	ldr	r3, [r3, #4]
   128a4:	2201      	movs	r2, #1
   128a6:	4619      	mov	r1, r3
   128a8:	4b0c      	ldr	r3, [pc, #48]	; (128dc <usbdc_get_dev_desc+0x70>)
   128aa:	4798      	blx	r3
   128ac:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	2b00      	cmp	r3, #0
   128b2:	d101      	bne.n	128b8 <usbdc_get_dev_desc+0x4c>
		return false;
   128b4:	2300      	movs	r3, #0
   128b6:	e00b      	b.n	128d0 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   128b8:	897a      	ldrh	r2, [r7, #10]
   128ba:	79f8      	ldrb	r0, [r7, #7]
   128bc:	2300      	movs	r3, #0
   128be:	68f9      	ldr	r1, [r7, #12]
   128c0:	4c07      	ldr	r4, [pc, #28]	; (128e0 <usbdc_get_dev_desc+0x74>)
   128c2:	47a0      	blx	r4
   128c4:	4603      	mov	r3, r0
   128c6:	2b00      	cmp	r3, #0
   128c8:	d001      	beq.n	128ce <usbdc_get_dev_desc+0x62>
		return false;
   128ca:	2300      	movs	r3, #0
   128cc:	e000      	b.n	128d0 <usbdc_get_dev_desc+0x64>
	}
	return true;
   128ce:	2301      	movs	r3, #1
}
   128d0:	4618      	mov	r0, r3
   128d2:	3714      	adds	r7, #20
   128d4:	46bd      	mov	sp, r7
   128d6:	bd90      	pop	{r4, r7, pc}
   128d8:	20001f80 	.word	0x20001f80
   128dc:	000135e1 	.word	0x000135e1
   128e0:	00013351 	.word	0x00013351

000128e4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   128e4:	b590      	push	{r4, r7, lr}
   128e6:	b087      	sub	sp, #28
   128e8:	af00      	add	r7, sp, #0
   128ea:	4603      	mov	r3, r0
   128ec:	6039      	str	r1, [r7, #0]
   128ee:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   128f0:	2300      	movs	r3, #0
   128f2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   128f4:	683b      	ldr	r3, [r7, #0]
   128f6:	799a      	ldrb	r2, [r3, #6]
   128f8:	79db      	ldrb	r3, [r3, #7]
   128fa:	021b      	lsls	r3, r3, #8
   128fc:	4313      	orrs	r3, r2
   128fe:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   12900:	683b      	ldr	r3, [r7, #0]
   12902:	885b      	ldrh	r3, [r3, #2]
   12904:	b29b      	uxth	r3, r3
   12906:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   12908:	8a7a      	ldrh	r2, [r7, #18]
   1290a:	4b1e      	ldr	r3, [pc, #120]	; (12984 <usbdc_get_cfg_desc+0xa0>)
   1290c:	7f1b      	ldrb	r3, [r3, #28]
   1290e:	3b01      	subs	r3, #1
   12910:	4013      	ands	r3, r2
   12912:	2b00      	cmp	r3, #0
   12914:	bf0c      	ite	eq
   12916:	2301      	moveq	r3, #1
   12918:	2300      	movne	r3, #0
   1291a:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   1291c:	697b      	ldr	r3, [r7, #20]
   1291e:	2b00      	cmp	r3, #0
   12920:	d10c      	bne.n	1293c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   12922:	4b18      	ldr	r3, [pc, #96]	; (12984 <usbdc_get_cfg_desc+0xa0>)
   12924:	681b      	ldr	r3, [r3, #0]
   12926:	6818      	ldr	r0, [r3, #0]
   12928:	4b16      	ldr	r3, [pc, #88]	; (12984 <usbdc_get_cfg_desc+0xa0>)
   1292a:	681b      	ldr	r3, [r3, #0]
   1292c:	6859      	ldr	r1, [r3, #4]
   1292e:	7c3b      	ldrb	r3, [r7, #16]
   12930:	3301      	adds	r3, #1
   12932:	b2db      	uxtb	r3, r3
   12934:	461a      	mov	r2, r3
   12936:	4b14      	ldr	r3, [pc, #80]	; (12988 <usbdc_get_cfg_desc+0xa4>)
   12938:	4798      	blx	r3
   1293a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   1293c:	697b      	ldr	r3, [r7, #20]
   1293e:	2b00      	cmp	r3, #0
   12940:	d101      	bne.n	12946 <usbdc_get_cfg_desc+0x62>
		return false;
   12942:	2300      	movs	r3, #0
   12944:	e019      	b.n	1297a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   12946:	6978      	ldr	r0, [r7, #20]
   12948:	4b10      	ldr	r3, [pc, #64]	; (1298c <usbdc_get_cfg_desc+0xa8>)
   1294a:	4798      	blx	r3
   1294c:	4603      	mov	r3, r0
   1294e:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   12950:	8a7a      	ldrh	r2, [r7, #18]
   12952:	89fb      	ldrh	r3, [r7, #14]
   12954:	429a      	cmp	r2, r3
   12956:	d802      	bhi.n	1295e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   12958:	2300      	movs	r3, #0
   1295a:	747b      	strb	r3, [r7, #17]
   1295c:	e001      	b.n	12962 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   1295e:	89fb      	ldrh	r3, [r7, #14]
   12960:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   12962:	8a7a      	ldrh	r2, [r7, #18]
   12964:	7c7b      	ldrb	r3, [r7, #17]
   12966:	79f8      	ldrb	r0, [r7, #7]
   12968:	6979      	ldr	r1, [r7, #20]
   1296a:	4c09      	ldr	r4, [pc, #36]	; (12990 <usbdc_get_cfg_desc+0xac>)
   1296c:	47a0      	blx	r4
   1296e:	4603      	mov	r3, r0
   12970:	2b00      	cmp	r3, #0
   12972:	d001      	beq.n	12978 <usbdc_get_cfg_desc+0x94>
		return false;
   12974:	2300      	movs	r3, #0
   12976:	e000      	b.n	1297a <usbdc_get_cfg_desc+0x96>
	}
	return true;
   12978:	2301      	movs	r3, #1
}
   1297a:	4618      	mov	r0, r3
   1297c:	371c      	adds	r7, #28
   1297e:	46bd      	mov	sp, r7
   12980:	bd90      	pop	{r4, r7, pc}
   12982:	bf00      	nop
   12984:	20001f80 	.word	0x20001f80
   12988:	000136a1 	.word	0x000136a1
   1298c:	0001284d 	.word	0x0001284d
   12990:	00013351 	.word	0x00013351

00012994 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   12994:	b590      	push	{r4, r7, lr}
   12996:	b085      	sub	sp, #20
   12998:	af00      	add	r7, sp, #0
   1299a:	4603      	mov	r3, r0
   1299c:	6039      	str	r1, [r7, #0]
   1299e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   129a0:	683b      	ldr	r3, [r7, #0]
   129a2:	799a      	ldrb	r2, [r3, #6]
   129a4:	79db      	ldrb	r3, [r3, #7]
   129a6:	021b      	lsls	r3, r3, #8
   129a8:	4313      	orrs	r3, r2
   129aa:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   129ac:	683b      	ldr	r3, [r7, #0]
   129ae:	885b      	ldrh	r3, [r3, #2]
   129b0:	b29b      	uxth	r3, r3
   129b2:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   129b4:	89fa      	ldrh	r2, [r7, #14]
   129b6:	4b1a      	ldr	r3, [pc, #104]	; (12a20 <usbdc_get_str_desc+0x8c>)
   129b8:	7f1b      	ldrb	r3, [r3, #28]
   129ba:	3b01      	subs	r3, #1
   129bc:	4013      	ands	r3, r2
   129be:	2b00      	cmp	r3, #0
   129c0:	bf0c      	ite	eq
   129c2:	2301      	moveq	r3, #1
   129c4:	2300      	movne	r3, #0
   129c6:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   129c8:	4b15      	ldr	r3, [pc, #84]	; (12a20 <usbdc_get_str_desc+0x8c>)
   129ca:	681b      	ldr	r3, [r3, #0]
   129cc:	6818      	ldr	r0, [r3, #0]
   129ce:	4b14      	ldr	r3, [pc, #80]	; (12a20 <usbdc_get_str_desc+0x8c>)
   129d0:	681b      	ldr	r3, [r3, #0]
   129d2:	685b      	ldr	r3, [r3, #4]
   129d4:	7b3a      	ldrb	r2, [r7, #12]
   129d6:	4619      	mov	r1, r3
   129d8:	4b12      	ldr	r3, [pc, #72]	; (12a24 <usbdc_get_str_desc+0x90>)
   129da:	4798      	blx	r3
   129dc:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   129de:	68bb      	ldr	r3, [r7, #8]
   129e0:	2b00      	cmp	r3, #0
   129e2:	d101      	bne.n	129e8 <usbdc_get_str_desc+0x54>
		return false;
   129e4:	2300      	movs	r3, #0
   129e6:	e017      	b.n	12a18 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   129e8:	68bb      	ldr	r3, [r7, #8]
   129ea:	781b      	ldrb	r3, [r3, #0]
   129ec:	b29b      	uxth	r3, r3
   129ee:	89fa      	ldrh	r2, [r7, #14]
   129f0:	429a      	cmp	r2, r3
   129f2:	d802      	bhi.n	129fa <usbdc_get_str_desc+0x66>
		need_zlp = false;
   129f4:	2300      	movs	r3, #0
   129f6:	737b      	strb	r3, [r7, #13]
   129f8:	e002      	b.n	12a00 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   129fa:	68bb      	ldr	r3, [r7, #8]
   129fc:	781b      	ldrb	r3, [r3, #0]
   129fe:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   12a00:	89fa      	ldrh	r2, [r7, #14]
   12a02:	7b7b      	ldrb	r3, [r7, #13]
   12a04:	79f8      	ldrb	r0, [r7, #7]
   12a06:	68b9      	ldr	r1, [r7, #8]
   12a08:	4c07      	ldr	r4, [pc, #28]	; (12a28 <usbdc_get_str_desc+0x94>)
   12a0a:	47a0      	blx	r4
   12a0c:	4603      	mov	r3, r0
   12a0e:	2b00      	cmp	r3, #0
   12a10:	d001      	beq.n	12a16 <usbdc_get_str_desc+0x82>
		return false;
   12a12:	2300      	movs	r3, #0
   12a14:	e000      	b.n	12a18 <usbdc_get_str_desc+0x84>
	}
	return true;
   12a16:	2301      	movs	r3, #1
}
   12a18:	4618      	mov	r0, r3
   12a1a:	3714      	adds	r7, #20
   12a1c:	46bd      	mov	sp, r7
   12a1e:	bd90      	pop	{r4, r7, pc}
   12a20:	20001f80 	.word	0x20001f80
   12a24:	00013719 	.word	0x00013719
   12a28:	00013351 	.word	0x00013351

00012a2c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   12a2c:	b580      	push	{r7, lr}
   12a2e:	b084      	sub	sp, #16
   12a30:	af00      	add	r7, sp, #0
   12a32:	4603      	mov	r3, r0
   12a34:	6039      	str	r1, [r7, #0]
   12a36:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   12a38:	683b      	ldr	r3, [r7, #0]
   12a3a:	885b      	ldrh	r3, [r3, #2]
   12a3c:	b29b      	uxth	r3, r3
   12a3e:	0a1b      	lsrs	r3, r3, #8
   12a40:	b29b      	uxth	r3, r3
   12a42:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   12a44:	7bfb      	ldrb	r3, [r7, #15]
   12a46:	2b02      	cmp	r3, #2
   12a48:	d00d      	beq.n	12a66 <usbdc_get_desc_req+0x3a>
   12a4a:	2b03      	cmp	r3, #3
   12a4c:	d012      	beq.n	12a74 <usbdc_get_desc_req+0x48>
   12a4e:	2b01      	cmp	r3, #1
   12a50:	d002      	beq.n	12a58 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   12a52:	bf00      	nop
	}
	return false;
   12a54:	2300      	movs	r3, #0
   12a56:	e013      	b.n	12a80 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   12a58:	79fb      	ldrb	r3, [r7, #7]
   12a5a:	6839      	ldr	r1, [r7, #0]
   12a5c:	4618      	mov	r0, r3
   12a5e:	4b0a      	ldr	r3, [pc, #40]	; (12a88 <usbdc_get_desc_req+0x5c>)
   12a60:	4798      	blx	r3
   12a62:	4603      	mov	r3, r0
   12a64:	e00c      	b.n	12a80 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   12a66:	79fb      	ldrb	r3, [r7, #7]
   12a68:	6839      	ldr	r1, [r7, #0]
   12a6a:	4618      	mov	r0, r3
   12a6c:	4b07      	ldr	r3, [pc, #28]	; (12a8c <usbdc_get_desc_req+0x60>)
   12a6e:	4798      	blx	r3
   12a70:	4603      	mov	r3, r0
   12a72:	e005      	b.n	12a80 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   12a74:	79fb      	ldrb	r3, [r7, #7]
   12a76:	6839      	ldr	r1, [r7, #0]
   12a78:	4618      	mov	r0, r3
   12a7a:	4b05      	ldr	r3, [pc, #20]	; (12a90 <usbdc_get_desc_req+0x64>)
   12a7c:	4798      	blx	r3
   12a7e:	4603      	mov	r3, r0
}
   12a80:	4618      	mov	r0, r3
   12a82:	3710      	adds	r7, #16
   12a84:	46bd      	mov	sp, r7
   12a86:	bd80      	pop	{r7, pc}
   12a88:	0001286d 	.word	0x0001286d
   12a8c:	000128e5 	.word	0x000128e5
   12a90:	00012995 	.word	0x00012995

00012a94 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   12a94:	b590      	push	{r4, r7, lr}
   12a96:	b085      	sub	sp, #20
   12a98:	af00      	add	r7, sp, #0
   12a9a:	4603      	mov	r3, r0
   12a9c:	6039      	str	r1, [r7, #0]
   12a9e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12aa0:	683b      	ldr	r3, [r7, #0]
   12aa2:	781b      	ldrb	r3, [r3, #0]
   12aa4:	f003 031f 	and.w	r3, r3, #31
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	db1b      	blt.n	12ae4 <usbdc_get_status_req+0x50>
   12aac:	2b01      	cmp	r3, #1
   12aae:	dd02      	ble.n	12ab6 <usbdc_get_status_req+0x22>
   12ab0:	2b02      	cmp	r3, #2
   12ab2:	d003      	beq.n	12abc <usbdc_get_status_req+0x28>
   12ab4:	e016      	b.n	12ae4 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   12ab6:	2300      	movs	r3, #0
   12ab8:	60fb      	str	r3, [r7, #12]
		break;
   12aba:	e015      	b.n	12ae8 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   12abc:	683b      	ldr	r3, [r7, #0]
   12abe:	889b      	ldrh	r3, [r3, #4]
   12ac0:	b29b      	uxth	r3, r3
   12ac2:	b2db      	uxtb	r3, r3
   12ac4:	2102      	movs	r1, #2
   12ac6:	4618      	mov	r0, r3
   12ac8:	4b0f      	ldr	r3, [pc, #60]	; (12b08 <usbdc_get_status_req+0x74>)
   12aca:	4798      	blx	r3
   12acc:	4603      	mov	r3, r0
   12ace:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   12ad0:	68fb      	ldr	r3, [r7, #12]
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <usbdc_get_status_req+0x46>
			return false;
   12ad6:	2300      	movs	r3, #0
   12ad8:	e012      	b.n	12b00 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	f003 0301 	and.w	r3, r3, #1
   12ae0:	60fb      	str	r3, [r7, #12]
		break;
   12ae2:	e001      	b.n	12ae8 <usbdc_get_status_req+0x54>
	default:
		return false;
   12ae4:	2300      	movs	r3, #0
   12ae6:	e00b      	b.n	12b00 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   12ae8:	4b08      	ldr	r3, [pc, #32]	; (12b0c <usbdc_get_status_req+0x78>)
   12aea:	695b      	ldr	r3, [r3, #20]
   12aec:	89ba      	ldrh	r2, [r7, #12]
   12aee:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   12af0:	4b06      	ldr	r3, [pc, #24]	; (12b0c <usbdc_get_status_req+0x78>)
   12af2:	6959      	ldr	r1, [r3, #20]
   12af4:	79f8      	ldrb	r0, [r7, #7]
   12af6:	2300      	movs	r3, #0
   12af8:	2202      	movs	r2, #2
   12afa:	4c05      	ldr	r4, [pc, #20]	; (12b10 <usbdc_get_status_req+0x7c>)
   12afc:	47a0      	blx	r4
	return true;
   12afe:	2301      	movs	r3, #1
}
   12b00:	4618      	mov	r0, r3
   12b02:	3714      	adds	r7, #20
   12b04:	46bd      	mov	sp, r7
   12b06:	bd90      	pop	{r4, r7, pc}
   12b08:	00009921 	.word	0x00009921
   12b0c:	20001f80 	.word	0x20001f80
   12b10:	00013351 	.word	0x00013351

00012b14 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   12b14:	b590      	push	{r4, r7, lr}
   12b16:	b085      	sub	sp, #20
   12b18:	af00      	add	r7, sp, #0
   12b1a:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   12b1c:	4b1f      	ldr	r3, [pc, #124]	; (12b9c <usbdc_get_interface+0x88>)
   12b1e:	691b      	ldr	r3, [r3, #16]
   12b20:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   12b22:	4b1e      	ldr	r3, [pc, #120]	; (12b9c <usbdc_get_interface+0x88>)
   12b24:	7f5b      	ldrb	r3, [r3, #29]
   12b26:	461a      	mov	r2, r3
   12b28:	687b      	ldr	r3, [r7, #4]
   12b2a:	889b      	ldrh	r3, [r3, #4]
   12b2c:	b29b      	uxth	r3, r3
   12b2e:	fa42 f303 	asr.w	r3, r2, r3
   12b32:	f003 0301 	and.w	r3, r3, #1
   12b36:	2b00      	cmp	r3, #0
   12b38:	d128      	bne.n	12b8c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   12b3a:	4b18      	ldr	r3, [pc, #96]	; (12b9c <usbdc_get_interface+0x88>)
   12b3c:	695b      	ldr	r3, [r3, #20]
   12b3e:	2200      	movs	r2, #0
   12b40:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   12b42:	4b16      	ldr	r3, [pc, #88]	; (12b9c <usbdc_get_interface+0x88>)
   12b44:	6959      	ldr	r1, [r3, #20]
   12b46:	2300      	movs	r3, #0
   12b48:	2201      	movs	r2, #1
   12b4a:	2000      	movs	r0, #0
   12b4c:	4c14      	ldr	r4, [pc, #80]	; (12ba0 <usbdc_get_interface+0x8c>)
   12b4e:	47a0      	blx	r4
		return true;
   12b50:	2301      	movs	r3, #1
   12b52:	e01f      	b.n	12b94 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   12b54:	68fb      	ldr	r3, [r7, #12]
   12b56:	685b      	ldr	r3, [r3, #4]
   12b58:	687a      	ldr	r2, [r7, #4]
   12b5a:	2102      	movs	r1, #2
   12b5c:	68f8      	ldr	r0, [r7, #12]
   12b5e:	4798      	blx	r3
   12b60:	60b8      	str	r0, [r7, #8]
   12b62:	68bb      	ldr	r3, [r7, #8]
   12b64:	2b00      	cmp	r3, #0
   12b66:	da03      	bge.n	12b70 <usbdc_get_interface+0x5c>
			func = func->next;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	60fb      	str	r3, [r7, #12]
   12b6e:	e00d      	b.n	12b8c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   12b70:	4b0a      	ldr	r3, [pc, #40]	; (12b9c <usbdc_get_interface+0x88>)
   12b72:	695b      	ldr	r3, [r3, #20]
   12b74:	68ba      	ldr	r2, [r7, #8]
   12b76:	b2d2      	uxtb	r2, r2
   12b78:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   12b7a:	4b08      	ldr	r3, [pc, #32]	; (12b9c <usbdc_get_interface+0x88>)
   12b7c:	6959      	ldr	r1, [r3, #20]
   12b7e:	2300      	movs	r3, #0
   12b80:	2201      	movs	r2, #1
   12b82:	2000      	movs	r0, #0
   12b84:	4c06      	ldr	r4, [pc, #24]	; (12ba0 <usbdc_get_interface+0x8c>)
   12b86:	47a0      	blx	r4
			return true;
   12b88:	2301      	movs	r3, #1
   12b8a:	e003      	b.n	12b94 <usbdc_get_interface+0x80>
	while (NULL != func) {
   12b8c:	68fb      	ldr	r3, [r7, #12]
   12b8e:	2b00      	cmp	r3, #0
   12b90:	d1e0      	bne.n	12b54 <usbdc_get_interface+0x40>
		}
	}
	return false;
   12b92:	2300      	movs	r3, #0
}
   12b94:	4618      	mov	r0, r3
   12b96:	3714      	adds	r7, #20
   12b98:	46bd      	mov	sp, r7
   12b9a:	bd90      	pop	{r4, r7, pc}
   12b9c:	20001f80 	.word	0x20001f80
   12ba0:	00013351 	.word	0x00013351

00012ba4 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   12ba4:	b590      	push	{r4, r7, lr}
   12ba6:	b083      	sub	sp, #12
   12ba8:	af00      	add	r7, sp, #0
   12baa:	4603      	mov	r3, r0
   12bac:	6039      	str	r1, [r7, #0]
   12bae:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12bb0:	683b      	ldr	r3, [r7, #0]
   12bb2:	785b      	ldrb	r3, [r3, #1]
   12bb4:	2b0a      	cmp	r3, #10
   12bb6:	d83a      	bhi.n	12c2e <usbdc_get_req+0x8a>
   12bb8:	a201      	add	r2, pc, #4	; (adr r2, 12bc0 <usbdc_get_req+0x1c>)
   12bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12bbe:	bf00      	nop
   12bc0:	00012c17 	.word	0x00012c17
   12bc4:	00012c2f 	.word	0x00012c2f
   12bc8:	00012c2f 	.word	0x00012c2f
   12bcc:	00012c2f 	.word	0x00012c2f
   12bd0:	00012c2f 	.word	0x00012c2f
   12bd4:	00012c2f 	.word	0x00012c2f
   12bd8:	00012bed 	.word	0x00012bed
   12bdc:	00012c2f 	.word	0x00012c2f
   12be0:	00012bfb 	.word	0x00012bfb
   12be4:	00012c2f 	.word	0x00012c2f
   12be8:	00012c25 	.word	0x00012c25
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   12bec:	79fb      	ldrb	r3, [r7, #7]
   12bee:	6839      	ldr	r1, [r7, #0]
   12bf0:	4618      	mov	r0, r3
   12bf2:	4b11      	ldr	r3, [pc, #68]	; (12c38 <usbdc_get_req+0x94>)
   12bf4:	4798      	blx	r3
   12bf6:	4603      	mov	r3, r0
   12bf8:	e01a      	b.n	12c30 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   12bfa:	4b10      	ldr	r3, [pc, #64]	; (12c3c <usbdc_get_req+0x98>)
   12bfc:	695b      	ldr	r3, [r3, #20]
   12bfe:	4a0f      	ldr	r2, [pc, #60]	; (12c3c <usbdc_get_req+0x98>)
   12c00:	7ed2      	ldrb	r2, [r2, #27]
   12c02:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   12c04:	4b0d      	ldr	r3, [pc, #52]	; (12c3c <usbdc_get_req+0x98>)
   12c06:	6959      	ldr	r1, [r3, #20]
   12c08:	79f8      	ldrb	r0, [r7, #7]
   12c0a:	2300      	movs	r3, #0
   12c0c:	2201      	movs	r2, #1
   12c0e:	4c0c      	ldr	r4, [pc, #48]	; (12c40 <usbdc_get_req+0x9c>)
   12c10:	47a0      	blx	r4
		return true;
   12c12:	2301      	movs	r3, #1
   12c14:	e00c      	b.n	12c30 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   12c16:	79fb      	ldrb	r3, [r7, #7]
   12c18:	6839      	ldr	r1, [r7, #0]
   12c1a:	4618      	mov	r0, r3
   12c1c:	4b09      	ldr	r3, [pc, #36]	; (12c44 <usbdc_get_req+0xa0>)
   12c1e:	4798      	blx	r3
   12c20:	4603      	mov	r3, r0
   12c22:	e005      	b.n	12c30 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   12c24:	6838      	ldr	r0, [r7, #0]
   12c26:	4b08      	ldr	r3, [pc, #32]	; (12c48 <usbdc_get_req+0xa4>)
   12c28:	4798      	blx	r3
   12c2a:	4603      	mov	r3, r0
   12c2c:	e000      	b.n	12c30 <usbdc_get_req+0x8c>
	default:
		return false;
   12c2e:	2300      	movs	r3, #0
	}
}
   12c30:	4618      	mov	r0, r3
   12c32:	370c      	adds	r7, #12
   12c34:	46bd      	mov	sp, r7
   12c36:	bd90      	pop	{r4, r7, pc}
   12c38:	00012a2d 	.word	0x00012a2d
   12c3c:	20001f80 	.word	0x20001f80
   12c40:	00013351 	.word	0x00013351
   12c44:	00012a95 	.word	0x00012a95
   12c48:	00012b15 	.word	0x00012b15

00012c4c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12c4c:	b590      	push	{r4, r7, lr}
   12c4e:	b083      	sub	sp, #12
   12c50:	af00      	add	r7, sp, #0
   12c52:	4603      	mov	r3, r0
   12c54:	6039      	str	r1, [r7, #0]
   12c56:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12c58:	683b      	ldr	r3, [r7, #0]
   12c5a:	781b      	ldrb	r3, [r3, #0]
   12c5c:	f003 031f 	and.w	r3, r3, #31
   12c60:	2b02      	cmp	r3, #2
   12c62:	d116      	bne.n	12c92 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12c64:	683b      	ldr	r3, [r7, #0]
   12c66:	88db      	ldrh	r3, [r3, #6]
   12c68:	b29b      	uxth	r3, r3
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d001      	beq.n	12c72 <usbdc_clear_ftr_req+0x26>
			return false;
   12c6e:	2300      	movs	r3, #0
   12c70:	e010      	b.n	12c94 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   12c72:	683b      	ldr	r3, [r7, #0]
   12c74:	889b      	ldrh	r3, [r3, #4]
   12c76:	b29b      	uxth	r3, r3
   12c78:	b2db      	uxtb	r3, r3
   12c7a:	2100      	movs	r1, #0
   12c7c:	4618      	mov	r0, r3
   12c7e:	4b07      	ldr	r3, [pc, #28]	; (12c9c <usbdc_clear_ftr_req+0x50>)
   12c80:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12c82:	79f8      	ldrb	r0, [r7, #7]
   12c84:	2301      	movs	r3, #1
   12c86:	2200      	movs	r2, #0
   12c88:	2100      	movs	r1, #0
   12c8a:	4c05      	ldr	r4, [pc, #20]	; (12ca0 <usbdc_clear_ftr_req+0x54>)
   12c8c:	47a0      	blx	r4
		return true;
   12c8e:	2301      	movs	r3, #1
   12c90:	e000      	b.n	12c94 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   12c92:	2300      	movs	r3, #0
	}
}
   12c94:	4618      	mov	r0, r3
   12c96:	370c      	adds	r7, #12
   12c98:	46bd      	mov	sp, r7
   12c9a:	bd90      	pop	{r4, r7, pc}
   12c9c:	00009921 	.word	0x00009921
   12ca0:	00013351 	.word	0x00013351

00012ca4 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12ca4:	b590      	push	{r4, r7, lr}
   12ca6:	b083      	sub	sp, #12
   12ca8:	af00      	add	r7, sp, #0
   12caa:	4603      	mov	r3, r0
   12cac:	6039      	str	r1, [r7, #0]
   12cae:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12cb0:	683b      	ldr	r3, [r7, #0]
   12cb2:	781b      	ldrb	r3, [r3, #0]
   12cb4:	f003 031f 	and.w	r3, r3, #31
   12cb8:	2b02      	cmp	r3, #2
   12cba:	d116      	bne.n	12cea <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12cbc:	683b      	ldr	r3, [r7, #0]
   12cbe:	88db      	ldrh	r3, [r3, #6]
   12cc0:	b29b      	uxth	r3, r3
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d001      	beq.n	12cca <usbdc_set_ftr_req+0x26>
			return false;
   12cc6:	2300      	movs	r3, #0
   12cc8:	e010      	b.n	12cec <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   12cca:	683b      	ldr	r3, [r7, #0]
   12ccc:	889b      	ldrh	r3, [r3, #4]
   12cce:	b29b      	uxth	r3, r3
   12cd0:	b2db      	uxtb	r3, r3
   12cd2:	2101      	movs	r1, #1
   12cd4:	4618      	mov	r0, r3
   12cd6:	4b07      	ldr	r3, [pc, #28]	; (12cf4 <usbdc_set_ftr_req+0x50>)
   12cd8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12cda:	79f8      	ldrb	r0, [r7, #7]
   12cdc:	2301      	movs	r3, #1
   12cde:	2200      	movs	r2, #0
   12ce0:	2100      	movs	r1, #0
   12ce2:	4c05      	ldr	r4, [pc, #20]	; (12cf8 <usbdc_set_ftr_req+0x54>)
   12ce4:	47a0      	blx	r4
		return true;
   12ce6:	2301      	movs	r3, #1
   12ce8:	e000      	b.n	12cec <usbdc_set_ftr_req+0x48>
	default:
		return false;
   12cea:	2300      	movs	r3, #0
	}
}
   12cec:	4618      	mov	r0, r3
   12cee:	370c      	adds	r7, #12
   12cf0:	46bd      	mov	sp, r7
   12cf2:	bd90      	pop	{r4, r7, pc}
   12cf4:	00009921 	.word	0x00009921
   12cf8:	00013351 	.word	0x00013351

00012cfc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   12cfc:	b580      	push	{r7, lr}
   12cfe:	b082      	sub	sp, #8
   12d00:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   12d02:	4b0a      	ldr	r3, [pc, #40]	; (12d2c <usbdc_unconfig+0x30>)
   12d04:	691b      	ldr	r3, [r3, #16]
   12d06:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   12d08:	e008      	b.n	12d1c <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   12d0a:	687b      	ldr	r3, [r7, #4]
   12d0c:	685b      	ldr	r3, [r3, #4]
   12d0e:	2200      	movs	r2, #0
   12d10:	2101      	movs	r1, #1
   12d12:	6878      	ldr	r0, [r7, #4]
   12d14:	4798      	blx	r3
		func = func->next;
   12d16:	687b      	ldr	r3, [r7, #4]
   12d18:	681b      	ldr	r3, [r3, #0]
   12d1a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   12d1c:	687b      	ldr	r3, [r7, #4]
   12d1e:	2b00      	cmp	r3, #0
   12d20:	d1f3      	bne.n	12d0a <usbdc_unconfig+0xe>
	}
}
   12d22:	bf00      	nop
   12d24:	3708      	adds	r7, #8
   12d26:	46bd      	mov	sp, r7
   12d28:	bd80      	pop	{r7, pc}
   12d2a:	bf00      	nop
   12d2c:	20001f80 	.word	0x20001f80

00012d30 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   12d30:	b580      	push	{r7, lr}
   12d32:	b088      	sub	sp, #32
   12d34:	af00      	add	r7, sp, #0
   12d36:	4603      	mov	r3, r0
   12d38:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   12d3a:	2300      	movs	r3, #0
   12d3c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   12d3e:	23ff      	movs	r3, #255	; 0xff
   12d40:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   12d42:	79fb      	ldrb	r3, [r7, #7]
   12d44:	2b00      	cmp	r3, #0
   12d46:	d103      	bne.n	12d50 <usbdc_set_config+0x20>
		usbdc_unconfig();
   12d48:	4b2e      	ldr	r3, [pc, #184]	; (12e04 <usbdc_set_config+0xd4>)
   12d4a:	4798      	blx	r3
		return true;
   12d4c:	2301      	movs	r3, #1
   12d4e:	e055      	b.n	12dfc <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   12d50:	69bb      	ldr	r3, [r7, #24]
   12d52:	2b00      	cmp	r3, #0
   12d54:	d10a      	bne.n	12d6c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   12d56:	4b2c      	ldr	r3, [pc, #176]	; (12e08 <usbdc_set_config+0xd8>)
   12d58:	681b      	ldr	r3, [r3, #0]
   12d5a:	6818      	ldr	r0, [r3, #0]
   12d5c:	4b2a      	ldr	r3, [pc, #168]	; (12e08 <usbdc_set_config+0xd8>)
   12d5e:	681b      	ldr	r3, [r3, #0]
   12d60:	685b      	ldr	r3, [r3, #4]
   12d62:	79fa      	ldrb	r2, [r7, #7]
   12d64:	4619      	mov	r1, r3
   12d66:	4b29      	ldr	r3, [pc, #164]	; (12e0c <usbdc_set_config+0xdc>)
   12d68:	4798      	blx	r3
   12d6a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   12d6c:	69bb      	ldr	r3, [r7, #24]
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d101      	bne.n	12d76 <usbdc_set_config+0x46>
		return false;
   12d72:	2300      	movs	r3, #0
   12d74:	e042      	b.n	12dfc <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   12d76:	69b8      	ldr	r0, [r7, #24]
   12d78:	4b25      	ldr	r3, [pc, #148]	; (12e10 <usbdc_set_config+0xe0>)
   12d7a:	4798      	blx	r3
   12d7c:	4603      	mov	r3, r0
   12d7e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   12d80:	8abb      	ldrh	r3, [r7, #20]
   12d82:	69ba      	ldr	r2, [r7, #24]
   12d84:	4413      	add	r3, r2
   12d86:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   12d88:	693b      	ldr	r3, [r7, #16]
   12d8a:	2204      	movs	r2, #4
   12d8c:	4619      	mov	r1, r3
   12d8e:	69b8      	ldr	r0, [r7, #24]
   12d90:	4b20      	ldr	r3, [pc, #128]	; (12e14 <usbdc_set_config+0xe4>)
   12d92:	4798      	blx	r3
   12d94:	4603      	mov	r3, r0
   12d96:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   12d98:	e02c      	b.n	12df4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   12d9a:	68fb      	ldr	r3, [r7, #12]
   12d9c:	3302      	adds	r3, #2
   12d9e:	781b      	ldrb	r3, [r3, #0]
   12da0:	7dfa      	ldrb	r2, [r7, #23]
   12da2:	429a      	cmp	r2, r3
   12da4:	d018      	beq.n	12dd8 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   12da6:	68fb      	ldr	r3, [r7, #12]
   12da8:	789b      	ldrb	r3, [r3, #2]
   12daa:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   12dac:	4b16      	ldr	r3, [pc, #88]	; (12e08 <usbdc_set_config+0xd8>)
   12dae:	691b      	ldr	r3, [r3, #16]
   12db0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12db2:	e00c      	b.n	12dce <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   12db4:	69fb      	ldr	r3, [r7, #28]
   12db6:	685b      	ldr	r3, [r3, #4]
   12db8:	f107 020c 	add.w	r2, r7, #12
   12dbc:	2100      	movs	r1, #0
   12dbe:	69f8      	ldr	r0, [r7, #28]
   12dc0:	4798      	blx	r3
   12dc2:	4603      	mov	r3, r0
   12dc4:	2b00      	cmp	r3, #0
   12dc6:	d006      	beq.n	12dd6 <usbdc_set_config+0xa6>
					func = func->next;
   12dc8:	69fb      	ldr	r3, [r7, #28]
   12dca:	681b      	ldr	r3, [r3, #0]
   12dcc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12dce:	69fb      	ldr	r3, [r7, #28]
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d1ef      	bne.n	12db4 <usbdc_set_config+0x84>
   12dd4:	e000      	b.n	12dd8 <usbdc_set_config+0xa8>
				} else {
					break;
   12dd6:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   12dd8:	68fb      	ldr	r3, [r7, #12]
   12dda:	4618      	mov	r0, r3
   12ddc:	4b0e      	ldr	r3, [pc, #56]	; (12e18 <usbdc_set_config+0xe8>)
   12dde:	4798      	blx	r3
   12de0:	4603      	mov	r3, r0
   12de2:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12de4:	68fb      	ldr	r3, [r7, #12]
   12de6:	6939      	ldr	r1, [r7, #16]
   12de8:	2204      	movs	r2, #4
   12dea:	4618      	mov	r0, r3
   12dec:	4b09      	ldr	r3, [pc, #36]	; (12e14 <usbdc_set_config+0xe4>)
   12dee:	4798      	blx	r3
   12df0:	4603      	mov	r3, r0
   12df2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   12df4:	68fb      	ldr	r3, [r7, #12]
   12df6:	2b00      	cmp	r3, #0
   12df8:	d1cf      	bne.n	12d9a <usbdc_set_config+0x6a>
	}
	return true;
   12dfa:	2301      	movs	r3, #1
}
   12dfc:	4618      	mov	r0, r3
   12dfe:	3720      	adds	r7, #32
   12e00:	46bd      	mov	sp, r7
   12e02:	bd80      	pop	{r7, pc}
   12e04:	00012cfd 	.word	0x00012cfd
   12e08:	20001f80 	.word	0x20001f80
   12e0c:	000136a1 	.word	0x000136a1
   12e10:	0001284d 	.word	0x0001284d
   12e14:	000135e1 	.word	0x000135e1
   12e18:	00012829 	.word	0x00012829

00012e1c <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   12e1c:	b580      	push	{r7, lr}
   12e1e:	b082      	sub	sp, #8
   12e20:	af00      	add	r7, sp, #0
   12e22:	4603      	mov	r3, r0
   12e24:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   12e26:	79fb      	ldrb	r3, [r7, #7]
   12e28:	4618      	mov	r0, r3
   12e2a:	4b03      	ldr	r3, [pc, #12]	; (12e38 <usbdc_set_address+0x1c>)
   12e2c:	4798      	blx	r3
}
   12e2e:	bf00      	nop
   12e30:	3708      	adds	r7, #8
   12e32:	46bd      	mov	sp, r7
   12e34:	bd80      	pop	{r7, pc}
   12e36:	bf00      	nop
   12e38:	00009591 	.word	0x00009591

00012e3c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   12e3c:	b590      	push	{r4, r7, lr}
   12e3e:	b087      	sub	sp, #28
   12e40:	af00      	add	r7, sp, #0
   12e42:	4603      	mov	r3, r0
   12e44:	460a      	mov	r2, r1
   12e46:	80fb      	strh	r3, [r7, #6]
   12e48:	4613      	mov	r3, r2
   12e4a:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   12e4c:	2300      	movs	r3, #0
   12e4e:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   12e50:	693b      	ldr	r3, [r7, #16]
   12e52:	2b00      	cmp	r3, #0
   12e54:	d10b      	bne.n	12e6e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   12e56:	4b43      	ldr	r3, [pc, #268]	; (12f64 <usbdc_set_interface+0x128>)
   12e58:	681b      	ldr	r3, [r3, #0]
   12e5a:	6818      	ldr	r0, [r3, #0]
   12e5c:	4b41      	ldr	r3, [pc, #260]	; (12f64 <usbdc_set_interface+0x128>)
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	6859      	ldr	r1, [r3, #4]
   12e62:	4b40      	ldr	r3, [pc, #256]	; (12f64 <usbdc_set_interface+0x128>)
   12e64:	7edb      	ldrb	r3, [r3, #27]
   12e66:	461a      	mov	r2, r3
   12e68:	4b3f      	ldr	r3, [pc, #252]	; (12f68 <usbdc_set_interface+0x12c>)
   12e6a:	4798      	blx	r3
   12e6c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   12e6e:	693b      	ldr	r3, [r7, #16]
   12e70:	2b00      	cmp	r3, #0
   12e72:	d101      	bne.n	12e78 <usbdc_set_interface+0x3c>
		return false;
   12e74:	2300      	movs	r3, #0
   12e76:	e071      	b.n	12f5c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   12e7c:	6938      	ldr	r0, [r7, #16]
   12e7e:	4b3b      	ldr	r3, [pc, #236]	; (12f6c <usbdc_set_interface+0x130>)
   12e80:	4798      	blx	r3
   12e82:	4603      	mov	r3, r0
   12e84:	461a      	mov	r2, r3
   12e86:	693b      	ldr	r3, [r7, #16]
   12e88:	4413      	add	r3, r2
   12e8a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   12e8c:	68bb      	ldr	r3, [r7, #8]
   12e8e:	68f9      	ldr	r1, [r7, #12]
   12e90:	2204      	movs	r2, #4
   12e92:	4618      	mov	r0, r3
   12e94:	4b36      	ldr	r3, [pc, #216]	; (12f70 <usbdc_set_interface+0x134>)
   12e96:	4798      	blx	r3
   12e98:	6138      	str	r0, [r7, #16]
   12e9a:	693b      	ldr	r3, [r7, #16]
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d113      	bne.n	12ec8 <usbdc_set_interface+0x8c>
		return false;
   12ea0:	2300      	movs	r3, #0
   12ea2:	e05b      	b.n	12f5c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   12ea4:	68bb      	ldr	r3, [r7, #8]
   12ea6:	4618      	mov	r0, r3
   12ea8:	4b32      	ldr	r3, [pc, #200]	; (12f74 <usbdc_set_interface+0x138>)
   12eaa:	4798      	blx	r3
   12eac:	4603      	mov	r3, r0
   12eae:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12eb0:	68bb      	ldr	r3, [r7, #8]
   12eb2:	68f9      	ldr	r1, [r7, #12]
   12eb4:	2204      	movs	r2, #4
   12eb6:	4618      	mov	r0, r3
   12eb8:	4b2d      	ldr	r3, [pc, #180]	; (12f70 <usbdc_set_interface+0x134>)
   12eba:	4798      	blx	r3
   12ebc:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   12ebe:	693b      	ldr	r3, [r7, #16]
   12ec0:	2b00      	cmp	r3, #0
   12ec2:	d101      	bne.n	12ec8 <usbdc_set_interface+0x8c>
			return false;
   12ec4:	2300      	movs	r3, #0
   12ec6:	e049      	b.n	12f5c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   12ec8:	693b      	ldr	r3, [r7, #16]
   12eca:	3302      	adds	r3, #2
   12ecc:	781b      	ldrb	r3, [r3, #0]
   12ece:	b29b      	uxth	r3, r3
   12ed0:	88ba      	ldrh	r2, [r7, #4]
   12ed2:	429a      	cmp	r2, r3
   12ed4:	d1e6      	bne.n	12ea4 <usbdc_set_interface+0x68>
   12ed6:	693b      	ldr	r3, [r7, #16]
   12ed8:	3303      	adds	r3, #3
   12eda:	781b      	ldrb	r3, [r3, #0]
   12edc:	b29b      	uxth	r3, r3
   12ede:	88fa      	ldrh	r2, [r7, #6]
   12ee0:	429a      	cmp	r2, r3
   12ee2:	d1df      	bne.n	12ea4 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   12ee8:	4b1e      	ldr	r3, [pc, #120]	; (12f64 <usbdc_set_interface+0x128>)
   12eea:	691b      	ldr	r3, [r3, #16]
   12eec:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   12eee:	e031      	b.n	12f54 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   12ef0:	697b      	ldr	r3, [r7, #20]
   12ef2:	685b      	ldr	r3, [r3, #4]
   12ef4:	f107 0208 	add.w	r2, r7, #8
   12ef8:	2101      	movs	r1, #1
   12efa:	6978      	ldr	r0, [r7, #20]
   12efc:	4798      	blx	r3
   12efe:	4603      	mov	r3, r0
   12f00:	2b00      	cmp	r3, #0
   12f02:	d003      	beq.n	12f0c <usbdc_set_interface+0xd0>
			func = func->next;
   12f04:	697b      	ldr	r3, [r7, #20]
   12f06:	681b      	ldr	r3, [r3, #0]
   12f08:	617b      	str	r3, [r7, #20]
   12f0a:	e023      	b.n	12f54 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   12f0c:	697b      	ldr	r3, [r7, #20]
   12f0e:	685b      	ldr	r3, [r3, #4]
   12f10:	f107 0208 	add.w	r2, r7, #8
   12f14:	2100      	movs	r1, #0
   12f16:	6978      	ldr	r0, [r7, #20]
   12f18:	4798      	blx	r3
   12f1a:	4603      	mov	r3, r0
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	d117      	bne.n	12f50 <usbdc_set_interface+0x114>
			if (alt_set) {
   12f20:	88fb      	ldrh	r3, [r7, #6]
   12f22:	2b00      	cmp	r3, #0
   12f24:	d00c      	beq.n	12f40 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   12f26:	4b0f      	ldr	r3, [pc, #60]	; (12f64 <usbdc_set_interface+0x128>)
   12f28:	7f5b      	ldrb	r3, [r3, #29]
   12f2a:	b25a      	sxtb	r2, r3
   12f2c:	88bb      	ldrh	r3, [r7, #4]
   12f2e:	2101      	movs	r1, #1
   12f30:	fa01 f303 	lsl.w	r3, r1, r3
   12f34:	b25b      	sxtb	r3, r3
   12f36:	4313      	orrs	r3, r2
   12f38:	b25b      	sxtb	r3, r3
   12f3a:	b2da      	uxtb	r2, r3
   12f3c:	4b09      	ldr	r3, [pc, #36]	; (12f64 <usbdc_set_interface+0x128>)
   12f3e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   12f40:	2300      	movs	r3, #0
   12f42:	2200      	movs	r2, #0
   12f44:	2100      	movs	r1, #0
   12f46:	2000      	movs	r0, #0
   12f48:	4c0b      	ldr	r4, [pc, #44]	; (12f78 <usbdc_set_interface+0x13c>)
   12f4a:	47a0      	blx	r4
			return true;
   12f4c:	2301      	movs	r3, #1
   12f4e:	e005      	b.n	12f5c <usbdc_set_interface+0x120>
		} else {
			return false;
   12f50:	2300      	movs	r3, #0
   12f52:	e003      	b.n	12f5c <usbdc_set_interface+0x120>
	while (NULL != func) {
   12f54:	697b      	ldr	r3, [r7, #20]
   12f56:	2b00      	cmp	r3, #0
   12f58:	d1ca      	bne.n	12ef0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   12f5a:	2300      	movs	r3, #0
}
   12f5c:	4618      	mov	r0, r3
   12f5e:	371c      	adds	r7, #28
   12f60:	46bd      	mov	sp, r7
   12f62:	bd90      	pop	{r4, r7, pc}
   12f64:	20001f80 	.word	0x20001f80
   12f68:	000136a1 	.word	0x000136a1
   12f6c:	0001284d 	.word	0x0001284d
   12f70:	000135e1 	.word	0x000135e1
   12f74:	00012829 	.word	0x00012829
   12f78:	00013351 	.word	0x00013351

00012f7c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   12f7c:	b590      	push	{r4, r7, lr}
   12f7e:	b083      	sub	sp, #12
   12f80:	af00      	add	r7, sp, #0
   12f82:	4603      	mov	r3, r0
   12f84:	6039      	str	r1, [r7, #0]
   12f86:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12f88:	683b      	ldr	r3, [r7, #0]
   12f8a:	785b      	ldrb	r3, [r3, #1]
   12f8c:	3b01      	subs	r3, #1
   12f8e:	2b0a      	cmp	r3, #10
   12f90:	d85b      	bhi.n	1304a <usbdc_set_req+0xce>
   12f92:	a201      	add	r2, pc, #4	; (adr r2, 12f98 <usbdc_set_req+0x1c>)
   12f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12f98:	00013017 	.word	0x00013017
   12f9c:	0001304b 	.word	0x0001304b
   12fa0:	00013025 	.word	0x00013025
   12fa4:	0001304b 	.word	0x0001304b
   12fa8:	00012fc5 	.word	0x00012fc5
   12fac:	0001304b 	.word	0x0001304b
   12fb0:	0001304b 	.word	0x0001304b
   12fb4:	0001304b 	.word	0x0001304b
   12fb8:	00012fdf 	.word	0x00012fdf
   12fbc:	0001304b 	.word	0x0001304b
   12fc0:	00013033 	.word	0x00013033
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12fc4:	79f8      	ldrb	r0, [r7, #7]
   12fc6:	2301      	movs	r3, #1
   12fc8:	2200      	movs	r2, #0
   12fca:	2100      	movs	r1, #0
   12fcc:	4c21      	ldr	r4, [pc, #132]	; (13054 <usbdc_set_req+0xd8>)
   12fce:	47a0      	blx	r4
   12fd0:	4603      	mov	r3, r0
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	bf0c      	ite	eq
   12fd6:	2301      	moveq	r3, #1
   12fd8:	2300      	movne	r3, #0
   12fda:	b2db      	uxtb	r3, r3
   12fdc:	e036      	b.n	1304c <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   12fde:	683b      	ldr	r3, [r7, #0]
   12fe0:	885b      	ldrh	r3, [r3, #2]
   12fe2:	b29b      	uxth	r3, r3
   12fe4:	b2db      	uxtb	r3, r3
   12fe6:	4618      	mov	r0, r3
   12fe8:	4b1b      	ldr	r3, [pc, #108]	; (13058 <usbdc_set_req+0xdc>)
   12fea:	4798      	blx	r3
   12fec:	4603      	mov	r3, r0
   12fee:	f083 0301 	eor.w	r3, r3, #1
   12ff2:	b2db      	uxtb	r3, r3
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d001      	beq.n	12ffc <usbdc_set_req+0x80>
			return false;
   12ff8:	2300      	movs	r3, #0
   12ffa:	e027      	b.n	1304c <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12ffc:	79f8      	ldrb	r0, [r7, #7]
   12ffe:	2301      	movs	r3, #1
   13000:	2200      	movs	r2, #0
   13002:	2100      	movs	r1, #0
   13004:	4c13      	ldr	r4, [pc, #76]	; (13054 <usbdc_set_req+0xd8>)
   13006:	47a0      	blx	r4
   13008:	4603      	mov	r3, r0
   1300a:	2b00      	cmp	r3, #0
   1300c:	bf0c      	ite	eq
   1300e:	2301      	moveq	r3, #1
   13010:	2300      	movne	r3, #0
   13012:	b2db      	uxtb	r3, r3
   13014:	e01a      	b.n	1304c <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   13016:	79fb      	ldrb	r3, [r7, #7]
   13018:	6839      	ldr	r1, [r7, #0]
   1301a:	4618      	mov	r0, r3
   1301c:	4b0f      	ldr	r3, [pc, #60]	; (1305c <usbdc_set_req+0xe0>)
   1301e:	4798      	blx	r3
   13020:	4603      	mov	r3, r0
   13022:	e013      	b.n	1304c <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   13024:	79fb      	ldrb	r3, [r7, #7]
   13026:	6839      	ldr	r1, [r7, #0]
   13028:	4618      	mov	r0, r3
   1302a:	4b0d      	ldr	r3, [pc, #52]	; (13060 <usbdc_set_req+0xe4>)
   1302c:	4798      	blx	r3
   1302e:	4603      	mov	r3, r0
   13030:	e00c      	b.n	1304c <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   13032:	683b      	ldr	r3, [r7, #0]
   13034:	885b      	ldrh	r3, [r3, #2]
   13036:	b29a      	uxth	r2, r3
   13038:	683b      	ldr	r3, [r7, #0]
   1303a:	889b      	ldrh	r3, [r3, #4]
   1303c:	b29b      	uxth	r3, r3
   1303e:	4619      	mov	r1, r3
   13040:	4610      	mov	r0, r2
   13042:	4b08      	ldr	r3, [pc, #32]	; (13064 <usbdc_set_req+0xe8>)
   13044:	4798      	blx	r3
   13046:	4603      	mov	r3, r0
   13048:	e000      	b.n	1304c <usbdc_set_req+0xd0>
	default:
		return false;
   1304a:	2300      	movs	r3, #0
	}
}
   1304c:	4618      	mov	r0, r3
   1304e:	370c      	adds	r7, #12
   13050:	46bd      	mov	sp, r7
   13052:	bd90      	pop	{r4, r7, pc}
   13054:	00013351 	.word	0x00013351
   13058:	00012d31 	.word	0x00012d31
   1305c:	00012c4d 	.word	0x00012c4d
   13060:	00012ca5 	.word	0x00012ca5
   13064:	00012e3d 	.word	0x00012e3d

00013068 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   13068:	b580      	push	{r7, lr}
   1306a:	b082      	sub	sp, #8
   1306c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1306e:	4b0a      	ldr	r3, [pc, #40]	; (13098 <usbdc_sof_notify+0x30>)
   13070:	685b      	ldr	r3, [r3, #4]
   13072:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   13074:	e009      	b.n	1308a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   13076:	687b      	ldr	r3, [r7, #4]
   13078:	685b      	ldr	r3, [r3, #4]
   1307a:	2b00      	cmp	r3, #0
   1307c:	d002      	beq.n	13084 <usbdc_sof_notify+0x1c>
			sof->cb();
   1307e:	687b      	ldr	r3, [r7, #4]
   13080:	685b      	ldr	r3, [r3, #4]
   13082:	4798      	blx	r3
		}
		sof = sof->next;
   13084:	687b      	ldr	r3, [r7, #4]
   13086:	681b      	ldr	r3, [r3, #0]
   13088:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   1308a:	687b      	ldr	r3, [r7, #4]
   1308c:	2b00      	cmp	r3, #0
   1308e:	d1f2      	bne.n	13076 <usbdc_sof_notify+0xe>
	}
}
   13090:	bf00      	nop
   13092:	3708      	adds	r7, #8
   13094:	46bd      	mov	sp, r7
   13096:	bd80      	pop	{r7, pc}
   13098:	20001f80 	.word	0x20001f80

0001309c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   1309c:	b580      	push	{r7, lr}
   1309e:	b084      	sub	sp, #16
   130a0:	af00      	add	r7, sp, #0
   130a2:	4603      	mov	r3, r0
   130a4:	6039      	str	r1, [r7, #0]
   130a6:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   130a8:	4b0b      	ldr	r3, [pc, #44]	; (130d8 <usbdc_change_notify+0x3c>)
   130aa:	68db      	ldr	r3, [r3, #12]
   130ac:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   130ae:	e00c      	b.n	130ca <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   130b0:	68fb      	ldr	r3, [r7, #12]
   130b2:	685b      	ldr	r3, [r3, #4]
   130b4:	2b00      	cmp	r3, #0
   130b6:	d005      	beq.n	130c4 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   130b8:	68fb      	ldr	r3, [r7, #12]
   130ba:	685b      	ldr	r3, [r3, #4]
   130bc:	79fa      	ldrb	r2, [r7, #7]
   130be:	6839      	ldr	r1, [r7, #0]
   130c0:	4610      	mov	r0, r2
   130c2:	4798      	blx	r3
		}
		cg = cg->next;
   130c4:	68fb      	ldr	r3, [r7, #12]
   130c6:	681b      	ldr	r3, [r3, #0]
   130c8:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   130ca:	68fb      	ldr	r3, [r7, #12]
   130cc:	2b00      	cmp	r3, #0
   130ce:	d1ef      	bne.n	130b0 <usbdc_change_notify+0x14>
	}
}
   130d0:	bf00      	nop
   130d2:	3710      	adds	r7, #16
   130d4:	46bd      	mov	sp, r7
   130d6:	bd80      	pop	{r7, pc}
   130d8:	20001f80 	.word	0x20001f80

000130dc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   130dc:	b580      	push	{r7, lr}
   130de:	b084      	sub	sp, #16
   130e0:	af00      	add	r7, sp, #0
   130e2:	4603      	mov	r3, r0
   130e4:	6039      	str	r1, [r7, #0]
   130e6:	71fb      	strb	r3, [r7, #7]
   130e8:	4613      	mov	r3, r2
   130ea:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   130ec:	4b12      	ldr	r3, [pc, #72]	; (13138 <usbdc_request_handler+0x5c>)
   130ee:	689b      	ldr	r3, [r3, #8]
   130f0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   130f2:	e019      	b.n	13128 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2b00      	cmp	r3, #0
   130fa:	d012      	beq.n	13122 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   130fc:	68fb      	ldr	r3, [r7, #12]
   130fe:	685b      	ldr	r3, [r3, #4]
   13100:	79ba      	ldrb	r2, [r7, #6]
   13102:	79f8      	ldrb	r0, [r7, #7]
   13104:	6839      	ldr	r1, [r7, #0]
   13106:	4798      	blx	r3
   13108:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   1310a:	68bb      	ldr	r3, [r7, #8]
   1310c:	2b00      	cmp	r3, #0
   1310e:	d101      	bne.n	13114 <usbdc_request_handler+0x38>
				return true;
   13110:	2301      	movs	r3, #1
   13112:	e00d      	b.n	13130 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   13114:	68bb      	ldr	r3, [r7, #8]
   13116:	f113 0f0a 	cmn.w	r3, #10
   1311a:	d002      	beq.n	13122 <usbdc_request_handler+0x46>
				return -1;
   1311c:	f04f 33ff 	mov.w	r3, #4294967295
   13120:	e006      	b.n	13130 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   13122:	68fb      	ldr	r3, [r7, #12]
   13124:	681b      	ldr	r3, [r3, #0]
   13126:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   13128:	68fb      	ldr	r3, [r7, #12]
   1312a:	2b00      	cmp	r3, #0
   1312c:	d1e2      	bne.n	130f4 <usbdc_request_handler+0x18>
	}
	return false;
   1312e:	2300      	movs	r3, #0
}
   13130:	4618      	mov	r0, r3
   13132:	3710      	adds	r7, #16
   13134:	46bd      	mov	sp, r7
   13136:	bd80      	pop	{r7, pc}
   13138:	20001f80 	.word	0x20001f80

0001313c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   1313c:	b580      	push	{r7, lr}
   1313e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   13140:	4b01      	ldr	r3, [pc, #4]	; (13148 <usbd_sof_cb+0xc>)
   13142:	4798      	blx	r3
}
   13144:	bf00      	nop
   13146:	bd80      	pop	{r7, pc}
   13148:	00013069 	.word	0x00013069

0001314c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   1314c:	b580      	push	{r7, lr}
   1314e:	b082      	sub	sp, #8
   13150:	af00      	add	r7, sp, #0
   13152:	4603      	mov	r3, r0
   13154:	6039      	str	r1, [r7, #0]
   13156:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   13158:	79fb      	ldrb	r3, [r7, #7]
   1315a:	2200      	movs	r2, #0
   1315c:	6839      	ldr	r1, [r7, #0]
   1315e:	4618      	mov	r0, r3
   13160:	4b14      	ldr	r3, [pc, #80]	; (131b4 <usbdc_cb_ctl_req+0x68>)
   13162:	4798      	blx	r3
   13164:	4603      	mov	r3, r0
   13166:	f1b3 3fff 	cmp.w	r3, #4294967295
   1316a:	d00b      	beq.n	13184 <usbdc_cb_ctl_req+0x38>
   1316c:	2b01      	cmp	r3, #1
   1316e:	d007      	beq.n	13180 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   13170:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   13172:	683b      	ldr	r3, [r7, #0]
   13174:	781b      	ldrb	r3, [r3, #0]
   13176:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1317a:	2b00      	cmp	r3, #0
   1317c:	d007      	beq.n	1318e <usbdc_cb_ctl_req+0x42>
   1317e:	e003      	b.n	13188 <usbdc_cb_ctl_req+0x3c>
		return true;
   13180:	2301      	movs	r3, #1
   13182:	e013      	b.n	131ac <usbdc_cb_ctl_req+0x60>
		return false;
   13184:	2300      	movs	r3, #0
   13186:	e011      	b.n	131ac <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   13188:	2b80      	cmp	r3, #128	; 0x80
   1318a:	d007      	beq.n	1319c <usbdc_cb_ctl_req+0x50>
   1318c:	e00d      	b.n	131aa <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   1318e:	79fb      	ldrb	r3, [r7, #7]
   13190:	6839      	ldr	r1, [r7, #0]
   13192:	4618      	mov	r0, r3
   13194:	4b08      	ldr	r3, [pc, #32]	; (131b8 <usbdc_cb_ctl_req+0x6c>)
   13196:	4798      	blx	r3
   13198:	4603      	mov	r3, r0
   1319a:	e007      	b.n	131ac <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   1319c:	79fb      	ldrb	r3, [r7, #7]
   1319e:	6839      	ldr	r1, [r7, #0]
   131a0:	4618      	mov	r0, r3
   131a2:	4b06      	ldr	r3, [pc, #24]	; (131bc <usbdc_cb_ctl_req+0x70>)
   131a4:	4798      	blx	r3
   131a6:	4603      	mov	r3, r0
   131a8:	e000      	b.n	131ac <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   131aa:	2300      	movs	r3, #0
	}
}
   131ac:	4618      	mov	r0, r3
   131ae:	3708      	adds	r7, #8
   131b0:	46bd      	mov	sp, r7
   131b2:	bd80      	pop	{r7, pc}
   131b4:	000130dd 	.word	0x000130dd
   131b8:	00012f7d 	.word	0x00012f7d
   131bc:	00012ba5 	.word	0x00012ba5

000131c0 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   131c0:	b580      	push	{r7, lr}
   131c2:	b082      	sub	sp, #8
   131c4:	af00      	add	r7, sp, #0
   131c6:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   131c8:	687b      	ldr	r3, [r7, #4]
   131ca:	781b      	ldrb	r3, [r3, #0]
   131cc:	2b00      	cmp	r3, #0
   131ce:	d135      	bne.n	1323c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   131d0:	687b      	ldr	r3, [r7, #4]
   131d2:	785b      	ldrb	r3, [r3, #1]
   131d4:	2b05      	cmp	r3, #5
   131d6:	d019      	beq.n	1320c <usbdc_ctrl_status_end+0x4c>
   131d8:	2b09      	cmp	r3, #9
   131da:	d000      	beq.n	131de <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   131dc:	e02f      	b.n	1323e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   131de:	687b      	ldr	r3, [r7, #4]
   131e0:	885b      	ldrh	r3, [r3, #2]
   131e2:	b29b      	uxth	r3, r3
   131e4:	b2da      	uxtb	r2, r3
   131e6:	4b17      	ldr	r3, [pc, #92]	; (13244 <usbdc_ctrl_status_end+0x84>)
   131e8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	885b      	ldrh	r3, [r3, #2]
   131ee:	b29b      	uxth	r3, r3
   131f0:	2b00      	cmp	r3, #0
   131f2:	d001      	beq.n	131f8 <usbdc_ctrl_status_end+0x38>
   131f4:	2204      	movs	r2, #4
   131f6:	e000      	b.n	131fa <usbdc_ctrl_status_end+0x3a>
   131f8:	2203      	movs	r2, #3
   131fa:	4b12      	ldr	r3, [pc, #72]	; (13244 <usbdc_ctrl_status_end+0x84>)
   131fc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   131fe:	4b11      	ldr	r3, [pc, #68]	; (13244 <usbdc_ctrl_status_end+0x84>)
   13200:	7e9b      	ldrb	r3, [r3, #26]
   13202:	4619      	mov	r1, r3
   13204:	2001      	movs	r0, #1
   13206:	4b10      	ldr	r3, [pc, #64]	; (13248 <usbdc_ctrl_status_end+0x88>)
   13208:	4798      	blx	r3
		break;
   1320a:	e018      	b.n	1323e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   1320c:	687b      	ldr	r3, [r7, #4]
   1320e:	885b      	ldrh	r3, [r3, #2]
   13210:	b29b      	uxth	r3, r3
   13212:	b2db      	uxtb	r3, r3
   13214:	4618      	mov	r0, r3
   13216:	4b0d      	ldr	r3, [pc, #52]	; (1324c <usbdc_ctrl_status_end+0x8c>)
   13218:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   1321a:	687b      	ldr	r3, [r7, #4]
   1321c:	885b      	ldrh	r3, [r3, #2]
   1321e:	b29b      	uxth	r3, r3
   13220:	2b00      	cmp	r3, #0
   13222:	d001      	beq.n	13228 <usbdc_ctrl_status_end+0x68>
   13224:	2203      	movs	r2, #3
   13226:	e000      	b.n	1322a <usbdc_ctrl_status_end+0x6a>
   13228:	2202      	movs	r2, #2
   1322a:	4b06      	ldr	r3, [pc, #24]	; (13244 <usbdc_ctrl_status_end+0x84>)
   1322c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1322e:	4b05      	ldr	r3, [pc, #20]	; (13244 <usbdc_ctrl_status_end+0x84>)
   13230:	7e9b      	ldrb	r3, [r3, #26]
   13232:	4619      	mov	r1, r3
   13234:	2001      	movs	r0, #1
   13236:	4b04      	ldr	r3, [pc, #16]	; (13248 <usbdc_ctrl_status_end+0x88>)
   13238:	4798      	blx	r3
		break;
   1323a:	e000      	b.n	1323e <usbdc_ctrl_status_end+0x7e>
		return;
   1323c:	bf00      	nop
	}
}
   1323e:	3708      	adds	r7, #8
   13240:	46bd      	mov	sp, r7
   13242:	bd80      	pop	{r7, pc}
   13244:	20001f80 	.word	0x20001f80
   13248:	0001309d 	.word	0x0001309d
   1324c:	00012e1d 	.word	0x00012e1d

00013250 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   13250:	b580      	push	{r7, lr}
   13252:	b082      	sub	sp, #8
   13254:	af00      	add	r7, sp, #0
   13256:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   13258:	2201      	movs	r2, #1
   1325a:	6879      	ldr	r1, [r7, #4]
   1325c:	2000      	movs	r0, #0
   1325e:	4b03      	ldr	r3, [pc, #12]	; (1326c <usbdc_ctrl_data_end+0x1c>)
   13260:	4798      	blx	r3
	return false;
   13262:	2300      	movs	r3, #0
}
   13264:	4618      	mov	r0, r3
   13266:	3708      	adds	r7, #8
   13268:	46bd      	mov	sp, r7
   1326a:	bd80      	pop	{r7, pc}
   1326c:	000130dd 	.word	0x000130dd

00013270 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   13270:	b580      	push	{r7, lr}
   13272:	b082      	sub	sp, #8
   13274:	af00      	add	r7, sp, #0
   13276:	4603      	mov	r3, r0
   13278:	603a      	str	r2, [r7, #0]
   1327a:	71fb      	strb	r3, [r7, #7]
   1327c:	460b      	mov	r3, r1
   1327e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   13280:	79bb      	ldrb	r3, [r7, #6]
   13282:	2b00      	cmp	r3, #0
   13284:	d002      	beq.n	1328c <usbdc_cb_ctl_done+0x1c>
   13286:	2b01      	cmp	r3, #1
   13288:	d004      	beq.n	13294 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   1328a:	e008      	b.n	1329e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   1328c:	6838      	ldr	r0, [r7, #0]
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <usbdc_cb_ctl_done+0x38>)
   13290:	4798      	blx	r3
		break;
   13292:	e004      	b.n	1329e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   13294:	6838      	ldr	r0, [r7, #0]
   13296:	4b05      	ldr	r3, [pc, #20]	; (132ac <usbdc_cb_ctl_done+0x3c>)
   13298:	4798      	blx	r3
   1329a:	4603      	mov	r3, r0
   1329c:	e000      	b.n	132a0 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   1329e:	2300      	movs	r3, #0
}
   132a0:	4618      	mov	r0, r3
   132a2:	3708      	adds	r7, #8
   132a4:	46bd      	mov	sp, r7
   132a6:	bd80      	pop	{r7, pc}
   132a8:	000131c1 	.word	0x000131c1
   132ac:	00013251 	.word	0x00013251

000132b0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   132b4:	4b10      	ldr	r3, [pc, #64]	; (132f8 <usbdc_reset+0x48>)
   132b6:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   132b8:	4b10      	ldr	r3, [pc, #64]	; (132fc <usbdc_reset+0x4c>)
   132ba:	2202      	movs	r2, #2
   132bc:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   132be:	4b0f      	ldr	r3, [pc, #60]	; (132fc <usbdc_reset+0x4c>)
   132c0:	2200      	movs	r2, #0
   132c2:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   132c4:	4b0d      	ldr	r3, [pc, #52]	; (132fc <usbdc_reset+0x4c>)
   132c6:	2200      	movs	r2, #0
   132c8:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   132ca:	2000      	movs	r0, #0
   132cc:	4b0c      	ldr	r3, [pc, #48]	; (13300 <usbdc_reset+0x50>)
   132ce:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   132d0:	4b0a      	ldr	r3, [pc, #40]	; (132fc <usbdc_reset+0x4c>)
   132d2:	7f1b      	ldrb	r3, [r3, #28]
   132d4:	4618      	mov	r0, r3
   132d6:	4b0b      	ldr	r3, [pc, #44]	; (13304 <usbdc_reset+0x54>)
   132d8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   132da:	4a0b      	ldr	r2, [pc, #44]	; (13308 <usbdc_reset+0x58>)
   132dc:	2100      	movs	r1, #0
   132de:	2000      	movs	r0, #0
   132e0:	4b0a      	ldr	r3, [pc, #40]	; (1330c <usbdc_reset+0x5c>)
   132e2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   132e4:	4a0a      	ldr	r2, [pc, #40]	; (13310 <usbdc_reset+0x60>)
   132e6:	2102      	movs	r1, #2
   132e8:	2000      	movs	r0, #0
   132ea:	4b08      	ldr	r3, [pc, #32]	; (1330c <usbdc_reset+0x5c>)
   132ec:	4798      	blx	r3
	usb_d_ep_enable(0);
   132ee:	2000      	movs	r0, #0
   132f0:	4b08      	ldr	r3, [pc, #32]	; (13314 <usbdc_reset+0x64>)
   132f2:	4798      	blx	r3
}
   132f4:	bf00      	nop
   132f6:	bd80      	pop	{r7, pc}
   132f8:	00012cfd 	.word	0x00012cfd
   132fc:	20001f80 	.word	0x20001f80
   13300:	00009675 	.word	0x00009675
   13304:	000095b1 	.word	0x000095b1
   13308:	0001314d 	.word	0x0001314d
   1330c:	00009975 	.word	0x00009975
   13310:	00013271 	.word	0x00013271
   13314:	000096c5 	.word	0x000096c5

00013318 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   13318:	b580      	push	{r7, lr}
   1331a:	b082      	sub	sp, #8
   1331c:	af00      	add	r7, sp, #0
   1331e:	4603      	mov	r3, r0
   13320:	6039      	str	r1, [r7, #0]
   13322:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   13324:	79fb      	ldrb	r3, [r7, #7]
   13326:	2b00      	cmp	r3, #0
   13328:	d002      	beq.n	13330 <usbd_event_cb+0x18>
   1332a:	2b01      	cmp	r3, #1
   1332c:	d005      	beq.n	1333a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   1332e:	e007      	b.n	13340 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   13330:	6839      	ldr	r1, [r7, #0]
   13332:	2000      	movs	r0, #0
   13334:	4b04      	ldr	r3, [pc, #16]	; (13348 <usbd_event_cb+0x30>)
   13336:	4798      	blx	r3
		break;
   13338:	e002      	b.n	13340 <usbd_event_cb+0x28>
		usbdc_reset();
   1333a:	4b04      	ldr	r3, [pc, #16]	; (1334c <usbd_event_cb+0x34>)
   1333c:	4798      	blx	r3
		break;
   1333e:	bf00      	nop
	}
}
   13340:	bf00      	nop
   13342:	3708      	adds	r7, #8
   13344:	46bd      	mov	sp, r7
   13346:	bd80      	pop	{r7, pc}
   13348:	0001309d 	.word	0x0001309d
   1334c:	000132b1 	.word	0x000132b1

00013350 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   13350:	b580      	push	{r7, lr}
   13352:	b088      	sub	sp, #32
   13354:	af00      	add	r7, sp, #0
   13356:	60b9      	str	r1, [r7, #8]
   13358:	607a      	str	r2, [r7, #4]
   1335a:	461a      	mov	r2, r3
   1335c:	4603      	mov	r3, r0
   1335e:	73fb      	strb	r3, [r7, #15]
   13360:	4613      	mov	r3, r2
   13362:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   13364:	68bb      	ldr	r3, [r7, #8]
   13366:	617b      	str	r3, [r7, #20]
   13368:	687b      	ldr	r3, [r7, #4]
   1336a:	61bb      	str	r3, [r7, #24]
   1336c:	7bfb      	ldrb	r3, [r7, #15]
   1336e:	773b      	strb	r3, [r7, #28]
   13370:	7bbb      	ldrb	r3, [r7, #14]
   13372:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   13374:	f107 0314 	add.w	r3, r7, #20
   13378:	4618      	mov	r0, r3
   1337a:	4b03      	ldr	r3, [pc, #12]	; (13388 <usbdc_xfer+0x38>)
   1337c:	4798      	blx	r3
   1337e:	4603      	mov	r3, r0
}
   13380:	4618      	mov	r0, r3
   13382:	3720      	adds	r7, #32
   13384:	46bd      	mov	sp, r7
   13386:	bd80      	pop	{r7, pc}
   13388:	00009735 	.word	0x00009735

0001338c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   1338c:	b580      	push	{r7, lr}
   1338e:	b082      	sub	sp, #8
   13390:	af00      	add	r7, sp, #0
   13392:	4603      	mov	r3, r0
   13394:	6039      	str	r1, [r7, #0]
   13396:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   13398:	79fb      	ldrb	r3, [r7, #7]
   1339a:	2b01      	cmp	r3, #1
   1339c:	d009      	beq.n	133b2 <usbdc_register_handler+0x26>
   1339e:	2b02      	cmp	r3, #2
   133a0:	d00c      	beq.n	133bc <usbdc_register_handler+0x30>
   133a2:	2b00      	cmp	r3, #0
   133a4:	d000      	beq.n	133a8 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   133a6:	e00e      	b.n	133c6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   133a8:	6839      	ldr	r1, [r7, #0]
   133aa:	4809      	ldr	r0, [pc, #36]	; (133d0 <usbdc_register_handler+0x44>)
   133ac:	4b09      	ldr	r3, [pc, #36]	; (133d4 <usbdc_register_handler+0x48>)
   133ae:	4798      	blx	r3
		break;
   133b0:	e009      	b.n	133c6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   133b2:	6839      	ldr	r1, [r7, #0]
   133b4:	4808      	ldr	r0, [pc, #32]	; (133d8 <usbdc_register_handler+0x4c>)
   133b6:	4b07      	ldr	r3, [pc, #28]	; (133d4 <usbdc_register_handler+0x48>)
   133b8:	4798      	blx	r3
		break;
   133ba:	e004      	b.n	133c6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   133bc:	6839      	ldr	r1, [r7, #0]
   133be:	4807      	ldr	r0, [pc, #28]	; (133dc <usbdc_register_handler+0x50>)
   133c0:	4b04      	ldr	r3, [pc, #16]	; (133d4 <usbdc_register_handler+0x48>)
   133c2:	4798      	blx	r3
		break;
   133c4:	bf00      	nop
	}
}
   133c6:	bf00      	nop
   133c8:	3708      	adds	r7, #8
   133ca:	46bd      	mov	sp, r7
   133cc:	bd80      	pop	{r7, pc}
   133ce:	bf00      	nop
   133d0:	20001f84 	.word	0x20001f84
   133d4:	00009acd 	.word	0x00009acd
   133d8:	20001f88 	.word	0x20001f88
   133dc:	20001f8c 	.word	0x20001f8c

000133e0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   133e0:	b580      	push	{r7, lr}
   133e2:	b084      	sub	sp, #16
   133e4:	af00      	add	r7, sp, #0
   133e6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   133e8:	687b      	ldr	r3, [r7, #4]
   133ea:	2b00      	cmp	r3, #0
   133ec:	bf14      	ite	ne
   133ee:	2301      	movne	r3, #1
   133f0:	2300      	moveq	r3, #0
   133f2:	b2db      	uxtb	r3, r3
   133f4:	f240 3255 	movw	r2, #853	; 0x355
   133f8:	4910      	ldr	r1, [pc, #64]	; (1343c <usbdc_init+0x5c>)
   133fa:	4618      	mov	r0, r3
   133fc:	4b10      	ldr	r3, [pc, #64]	; (13440 <usbdc_init+0x60>)
   133fe:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   13400:	4b10      	ldr	r3, [pc, #64]	; (13444 <usbdc_init+0x64>)
   13402:	4798      	blx	r3
   13404:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   13406:	68fb      	ldr	r3, [r7, #12]
   13408:	2b00      	cmp	r3, #0
   1340a:	da01      	bge.n	13410 <usbdc_init+0x30>
		return rc;
   1340c:	68fb      	ldr	r3, [r7, #12]
   1340e:	e010      	b.n	13432 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   13410:	2220      	movs	r2, #32
   13412:	2100      	movs	r1, #0
   13414:	480c      	ldr	r0, [pc, #48]	; (13448 <usbdc_init+0x68>)
   13416:	4b0d      	ldr	r3, [pc, #52]	; (1344c <usbdc_init+0x6c>)
   13418:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   1341a:	4a0b      	ldr	r2, [pc, #44]	; (13448 <usbdc_init+0x68>)
   1341c:	687b      	ldr	r3, [r7, #4]
   1341e:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   13420:	490b      	ldr	r1, [pc, #44]	; (13450 <usbdc_init+0x70>)
   13422:	2000      	movs	r0, #0
   13424:	4b0b      	ldr	r3, [pc, #44]	; (13454 <usbdc_init+0x74>)
   13426:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   13428:	490b      	ldr	r1, [pc, #44]	; (13458 <usbdc_init+0x78>)
   1342a:	2001      	movs	r0, #1
   1342c:	4b09      	ldr	r3, [pc, #36]	; (13454 <usbdc_init+0x74>)
   1342e:	4798      	blx	r3

	return 0;
   13430:	2300      	movs	r3, #0
}
   13432:	4618      	mov	r0, r3
   13434:	3710      	adds	r7, #16
   13436:	46bd      	mov	sp, r7
   13438:	bd80      	pop	{r7, pc}
   1343a:	bf00      	nop
   1343c:	00015358 	.word	0x00015358
   13440:	000099f1 	.word	0x000099f1
   13444:	0000949d 	.word	0x0000949d
   13448:	20001f80 	.word	0x20001f80
   1344c:	00014109 	.word	0x00014109
   13450:	0001313d 	.word	0x0001313d
   13454:	00009549 	.word	0x00009549
   13458:	00013319 	.word	0x00013319

0001345c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   1345c:	b580      	push	{r7, lr}
   1345e:	b082      	sub	sp, #8
   13460:	af00      	add	r7, sp, #0
   13462:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   13464:	6879      	ldr	r1, [r7, #4]
   13466:	4803      	ldr	r0, [pc, #12]	; (13474 <usbdc_register_function+0x18>)
   13468:	4b03      	ldr	r3, [pc, #12]	; (13478 <usbdc_register_function+0x1c>)
   1346a:	4798      	blx	r3
}
   1346c:	bf00      	nop
   1346e:	3708      	adds	r7, #8
   13470:	46bd      	mov	sp, r7
   13472:	bd80      	pop	{r7, pc}
   13474:	20001f90 	.word	0x20001f90
   13478:	00009acd 	.word	0x00009acd

0001347c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   1347c:	b580      	push	{r7, lr}
   1347e:	b082      	sub	sp, #8
   13480:	af00      	add	r7, sp, #0
   13482:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   13484:	4b0f      	ldr	r3, [pc, #60]	; (134c4 <usbdc_start+0x48>)
   13486:	7e9b      	ldrb	r3, [r3, #26]
   13488:	2b00      	cmp	r3, #0
   1348a:	d002      	beq.n	13492 <usbdc_start+0x16>
		return ERR_BUSY;
   1348c:	f06f 0303 	mvn.w	r3, #3
   13490:	e013      	b.n	134ba <usbdc_start+0x3e>
	}

	if (desces) {
   13492:	687b      	ldr	r3, [r7, #4]
   13494:	2b00      	cmp	r3, #0
   13496:	d00e      	beq.n	134b6 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   13498:	4a0a      	ldr	r2, [pc, #40]	; (134c4 <usbdc_start+0x48>)
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   1349e:	687b      	ldr	r3, [r7, #4]
   134a0:	681b      	ldr	r3, [r3, #0]
   134a2:	79da      	ldrb	r2, [r3, #7]
   134a4:	4b07      	ldr	r3, [pc, #28]	; (134c4 <usbdc_start+0x48>)
   134a6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   134a8:	4b06      	ldr	r3, [pc, #24]	; (134c4 <usbdc_start+0x48>)
   134aa:	2201      	movs	r2, #1
   134ac:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   134ae:	4b06      	ldr	r3, [pc, #24]	; (134c8 <usbdc_start+0x4c>)
   134b0:	4798      	blx	r3
	return ERR_NONE;
   134b2:	2300      	movs	r3, #0
   134b4:	e001      	b.n	134ba <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   134b6:	f06f 0308 	mvn.w	r3, #8
}
   134ba:	4618      	mov	r0, r3
   134bc:	3708      	adds	r7, #8
   134be:	46bd      	mov	sp, r7
   134c0:	bd80      	pop	{r7, pc}
   134c2:	bf00      	nop
   134c4:	20001f80 	.word	0x20001f80
   134c8:	0000956d 	.word	0x0000956d

000134cc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   134cc:	b580      	push	{r7, lr}
   134ce:	af00      	add	r7, sp, #0
	usb_d_attach();
   134d0:	4b01      	ldr	r3, [pc, #4]	; (134d8 <usbdc_attach+0xc>)
   134d2:	4798      	blx	r3
}
   134d4:	bf00      	nop
   134d6:	bd80      	pop	{r7, pc}
   134d8:	00009581 	.word	0x00009581

000134dc <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   134dc:	b480      	push	{r7}
   134de:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   134e0:	4b03      	ldr	r3, [pc, #12]	; (134f0 <usbdc_get_ctrl_buffer+0x14>)
   134e2:	695b      	ldr	r3, [r3, #20]
}
   134e4:	4618      	mov	r0, r3
   134e6:	46bd      	mov	sp, r7
   134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   134ec:	4770      	bx	lr
   134ee:	bf00      	nop
   134f0:	20001f80 	.word	0x20001f80

000134f4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   134f4:	b480      	push	{r7}
   134f6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   134f8:	4b07      	ldr	r3, [pc, #28]	; (13518 <usbdc_get_state+0x24>)
   134fa:	7e9b      	ldrb	r3, [r3, #26]
   134fc:	f003 0310 	and.w	r3, r3, #16
   13500:	2b00      	cmp	r3, #0
   13502:	d001      	beq.n	13508 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   13504:	2310      	movs	r3, #16
   13506:	e001      	b.n	1350c <usbdc_get_state+0x18>
	}
	return usbdc.state;
   13508:	4b03      	ldr	r3, [pc, #12]	; (13518 <usbdc_get_state+0x24>)
   1350a:	7e9b      	ldrb	r3, [r3, #26]
}
   1350c:	4618      	mov	r0, r3
   1350e:	46bd      	mov	sp, r7
   13510:	f85d 7b04 	ldr.w	r7, [sp], #4
   13514:	4770      	bx	lr
   13516:	bf00      	nop
   13518:	20001f80 	.word	0x20001f80

0001351c <usb_get_u16>:
{
   1351c:	b480      	push	{r7}
   1351e:	b083      	sub	sp, #12
   13520:	af00      	add	r7, sp, #0
   13522:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   13524:	687b      	ldr	r3, [r7, #4]
   13526:	781b      	ldrb	r3, [r3, #0]
   13528:	b29a      	uxth	r2, r3
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	3301      	adds	r3, #1
   1352e:	781b      	ldrb	r3, [r3, #0]
   13530:	b29b      	uxth	r3, r3
   13532:	021b      	lsls	r3, r3, #8
   13534:	b29b      	uxth	r3, r3
   13536:	4413      	add	r3, r2
   13538:	b29b      	uxth	r3, r3
}
   1353a:	4618      	mov	r0, r3
   1353c:	370c      	adds	r7, #12
   1353e:	46bd      	mov	sp, r7
   13540:	f85d 7b04 	ldr.w	r7, [sp], #4
   13544:	4770      	bx	lr

00013546 <usb_desc_len>:
{
   13546:	b480      	push	{r7}
   13548:	b083      	sub	sp, #12
   1354a:	af00      	add	r7, sp, #0
   1354c:	6078      	str	r0, [r7, #4]
	return desc[0];
   1354e:	687b      	ldr	r3, [r7, #4]
   13550:	781b      	ldrb	r3, [r3, #0]
}
   13552:	4618      	mov	r0, r3
   13554:	370c      	adds	r7, #12
   13556:	46bd      	mov	sp, r7
   13558:	f85d 7b04 	ldr.w	r7, [sp], #4
   1355c:	4770      	bx	lr

0001355e <usb_desc_type>:
{
   1355e:	b480      	push	{r7}
   13560:	b083      	sub	sp, #12
   13562:	af00      	add	r7, sp, #0
   13564:	6078      	str	r0, [r7, #4]
	return desc[1];
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	3301      	adds	r3, #1
   1356a:	781b      	ldrb	r3, [r3, #0]
}
   1356c:	4618      	mov	r0, r3
   1356e:	370c      	adds	r7, #12
   13570:	46bd      	mov	sp, r7
   13572:	f85d 7b04 	ldr.w	r7, [sp], #4
   13576:	4770      	bx	lr

00013578 <usb_desc_next>:
{
   13578:	b580      	push	{r7, lr}
   1357a:	b082      	sub	sp, #8
   1357c:	af00      	add	r7, sp, #0
   1357e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   13580:	6878      	ldr	r0, [r7, #4]
   13582:	4b05      	ldr	r3, [pc, #20]	; (13598 <usb_desc_next+0x20>)
   13584:	4798      	blx	r3
   13586:	4603      	mov	r3, r0
   13588:	461a      	mov	r2, r3
   1358a:	687b      	ldr	r3, [r7, #4]
   1358c:	4413      	add	r3, r2
}
   1358e:	4618      	mov	r0, r3
   13590:	3708      	adds	r7, #8
   13592:	46bd      	mov	sp, r7
   13594:	bd80      	pop	{r7, pc}
   13596:	bf00      	nop
   13598:	00013547 	.word	0x00013547

0001359c <usb_cfg_desc_total_len>:
{
   1359c:	b580      	push	{r7, lr}
   1359e:	b082      	sub	sp, #8
   135a0:	af00      	add	r7, sp, #0
   135a2:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	3302      	adds	r3, #2
   135a8:	4618      	mov	r0, r3
   135aa:	4b03      	ldr	r3, [pc, #12]	; (135b8 <usb_cfg_desc_total_len+0x1c>)
   135ac:	4798      	blx	r3
   135ae:	4603      	mov	r3, r0
}
   135b0:	4618      	mov	r0, r3
   135b2:	3708      	adds	r7, #8
   135b4:	46bd      	mov	sp, r7
   135b6:	bd80      	pop	{r7, pc}
   135b8:	0001351d 	.word	0x0001351d

000135bc <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   135bc:	b580      	push	{r7, lr}
   135be:	b082      	sub	sp, #8
   135c0:	af00      	add	r7, sp, #0
   135c2:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   135c4:	6878      	ldr	r0, [r7, #4]
   135c6:	4b05      	ldr	r3, [pc, #20]	; (135dc <usb_cfg_desc_next+0x20>)
   135c8:	4798      	blx	r3
   135ca:	4603      	mov	r3, r0
   135cc:	461a      	mov	r2, r3
   135ce:	687b      	ldr	r3, [r7, #4]
   135d0:	4413      	add	r3, r2
}
   135d2:	4618      	mov	r0, r3
   135d4:	3708      	adds	r7, #8
   135d6:	46bd      	mov	sp, r7
   135d8:	bd80      	pop	{r7, pc}
   135da:	bf00      	nop
   135dc:	0001359d 	.word	0x0001359d

000135e0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   135e0:	b580      	push	{r7, lr}
   135e2:	b084      	sub	sp, #16
   135e4:	af00      	add	r7, sp, #0
   135e6:	60f8      	str	r0, [r7, #12]
   135e8:	60b9      	str	r1, [r7, #8]
   135ea:	4613      	mov	r3, r2
   135ec:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   135ee:	e015      	b.n	1361c <usb_find_desc+0x3c>
		_desc_len_check();
   135f0:	68f8      	ldr	r0, [r7, #12]
   135f2:	4b0f      	ldr	r3, [pc, #60]	; (13630 <usb_find_desc+0x50>)
   135f4:	4798      	blx	r3
   135f6:	4603      	mov	r3, r0
   135f8:	2b01      	cmp	r3, #1
   135fa:	d801      	bhi.n	13600 <usb_find_desc+0x20>
   135fc:	2300      	movs	r3, #0
   135fe:	e012      	b.n	13626 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   13600:	68f8      	ldr	r0, [r7, #12]
   13602:	4b0c      	ldr	r3, [pc, #48]	; (13634 <usb_find_desc+0x54>)
   13604:	4798      	blx	r3
   13606:	4603      	mov	r3, r0
   13608:	461a      	mov	r2, r3
   1360a:	79fb      	ldrb	r3, [r7, #7]
   1360c:	4293      	cmp	r3, r2
   1360e:	d101      	bne.n	13614 <usb_find_desc+0x34>
			return desc;
   13610:	68fb      	ldr	r3, [r7, #12]
   13612:	e008      	b.n	13626 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   13614:	68f8      	ldr	r0, [r7, #12]
   13616:	4b08      	ldr	r3, [pc, #32]	; (13638 <usb_find_desc+0x58>)
   13618:	4798      	blx	r3
   1361a:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   1361c:	68fa      	ldr	r2, [r7, #12]
   1361e:	68bb      	ldr	r3, [r7, #8]
   13620:	429a      	cmp	r2, r3
   13622:	d3e5      	bcc.n	135f0 <usb_find_desc+0x10>
	}
	return NULL;
   13624:	2300      	movs	r3, #0
}
   13626:	4618      	mov	r0, r3
   13628:	3710      	adds	r7, #16
   1362a:	46bd      	mov	sp, r7
   1362c:	bd80      	pop	{r7, pc}
   1362e:	bf00      	nop
   13630:	00013547 	.word	0x00013547
   13634:	0001355f 	.word	0x0001355f
   13638:	00013579 	.word	0x00013579

0001363c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   1363c:	b580      	push	{r7, lr}
   1363e:	b082      	sub	sp, #8
   13640:	af00      	add	r7, sp, #0
   13642:	6078      	str	r0, [r7, #4]
   13644:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   13646:	e019      	b.n	1367c <usb_find_ep_desc+0x40>
		_desc_len_check();
   13648:	6878      	ldr	r0, [r7, #4]
   1364a:	4b12      	ldr	r3, [pc, #72]	; (13694 <usb_find_ep_desc+0x58>)
   1364c:	4798      	blx	r3
   1364e:	4603      	mov	r3, r0
   13650:	2b01      	cmp	r3, #1
   13652:	d801      	bhi.n	13658 <usb_find_ep_desc+0x1c>
   13654:	2300      	movs	r3, #0
   13656:	e018      	b.n	1368a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   13658:	6878      	ldr	r0, [r7, #4]
   1365a:	4b0f      	ldr	r3, [pc, #60]	; (13698 <usb_find_ep_desc+0x5c>)
   1365c:	4798      	blx	r3
   1365e:	4603      	mov	r3, r0
   13660:	2b04      	cmp	r3, #4
   13662:	d010      	beq.n	13686 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   13664:	6878      	ldr	r0, [r7, #4]
   13666:	4b0c      	ldr	r3, [pc, #48]	; (13698 <usb_find_ep_desc+0x5c>)
   13668:	4798      	blx	r3
   1366a:	4603      	mov	r3, r0
   1366c:	2b05      	cmp	r3, #5
   1366e:	d101      	bne.n	13674 <usb_find_ep_desc+0x38>
			return desc;
   13670:	687b      	ldr	r3, [r7, #4]
   13672:	e00a      	b.n	1368a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   13674:	6878      	ldr	r0, [r7, #4]
   13676:	4b09      	ldr	r3, [pc, #36]	; (1369c <usb_find_ep_desc+0x60>)
   13678:	4798      	blx	r3
   1367a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   1367c:	687a      	ldr	r2, [r7, #4]
   1367e:	683b      	ldr	r3, [r7, #0]
   13680:	429a      	cmp	r2, r3
   13682:	d3e1      	bcc.n	13648 <usb_find_ep_desc+0xc>
   13684:	e000      	b.n	13688 <usb_find_ep_desc+0x4c>
			break;
   13686:	bf00      	nop
	}
	return NULL;
   13688:	2300      	movs	r3, #0
}
   1368a:	4618      	mov	r0, r3
   1368c:	3708      	adds	r7, #8
   1368e:	46bd      	mov	sp, r7
   13690:	bd80      	pop	{r7, pc}
   13692:	bf00      	nop
   13694:	00013547 	.word	0x00013547
   13698:	0001355f 	.word	0x0001355f
   1369c:	00013579 	.word	0x00013579

000136a0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   136a0:	b580      	push	{r7, lr}
   136a2:	b084      	sub	sp, #16
   136a4:	af00      	add	r7, sp, #0
   136a6:	60f8      	str	r0, [r7, #12]
   136a8:	60b9      	str	r1, [r7, #8]
   136aa:	4613      	mov	r3, r2
   136ac:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   136ae:	2202      	movs	r2, #2
   136b0:	68b9      	ldr	r1, [r7, #8]
   136b2:	68f8      	ldr	r0, [r7, #12]
   136b4:	4b15      	ldr	r3, [pc, #84]	; (1370c <usb_find_cfg_desc+0x6c>)
   136b6:	4798      	blx	r3
   136b8:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   136ba:	68fb      	ldr	r3, [r7, #12]
   136bc:	2b00      	cmp	r3, #0
   136be:	d11a      	bne.n	136f6 <usb_find_cfg_desc+0x56>
		return NULL;
   136c0:	2300      	movs	r3, #0
   136c2:	e01f      	b.n	13704 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   136c4:	68f8      	ldr	r0, [r7, #12]
   136c6:	4b12      	ldr	r3, [pc, #72]	; (13710 <usb_find_cfg_desc+0x70>)
   136c8:	4798      	blx	r3
   136ca:	4603      	mov	r3, r0
   136cc:	2b01      	cmp	r3, #1
   136ce:	d801      	bhi.n	136d4 <usb_find_cfg_desc+0x34>
   136d0:	2300      	movs	r3, #0
   136d2:	e017      	b.n	13704 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   136d4:	68fb      	ldr	r3, [r7, #12]
   136d6:	3301      	adds	r3, #1
   136d8:	781b      	ldrb	r3, [r3, #0]
   136da:	2b02      	cmp	r3, #2
   136dc:	d110      	bne.n	13700 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   136de:	68fb      	ldr	r3, [r7, #12]
   136e0:	3305      	adds	r3, #5
   136e2:	781b      	ldrb	r3, [r3, #0]
   136e4:	79fa      	ldrb	r2, [r7, #7]
   136e6:	429a      	cmp	r2, r3
   136e8:	d101      	bne.n	136ee <usb_find_cfg_desc+0x4e>
			return desc;
   136ea:	68fb      	ldr	r3, [r7, #12]
   136ec:	e00a      	b.n	13704 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   136ee:	68f8      	ldr	r0, [r7, #12]
   136f0:	4b08      	ldr	r3, [pc, #32]	; (13714 <usb_find_cfg_desc+0x74>)
   136f2:	4798      	blx	r3
   136f4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   136f6:	68fa      	ldr	r2, [r7, #12]
   136f8:	68bb      	ldr	r3, [r7, #8]
   136fa:	429a      	cmp	r2, r3
   136fc:	d3e2      	bcc.n	136c4 <usb_find_cfg_desc+0x24>
   136fe:	e000      	b.n	13702 <usb_find_cfg_desc+0x62>
			break;
   13700:	bf00      	nop
	}
	return NULL;
   13702:	2300      	movs	r3, #0
}
   13704:	4618      	mov	r0, r3
   13706:	3710      	adds	r7, #16
   13708:	46bd      	mov	sp, r7
   1370a:	bd80      	pop	{r7, pc}
   1370c:	000135e1 	.word	0x000135e1
   13710:	00013547 	.word	0x00013547
   13714:	000135bd 	.word	0x000135bd

00013718 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   13718:	b580      	push	{r7, lr}
   1371a:	b086      	sub	sp, #24
   1371c:	af00      	add	r7, sp, #0
   1371e:	60f8      	str	r0, [r7, #12]
   13720:	60b9      	str	r1, [r7, #8]
   13722:	4613      	mov	r3, r2
   13724:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   13726:	2300      	movs	r3, #0
   13728:	75fb      	strb	r3, [r7, #23]
   1372a:	e020      	b.n	1376e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   1372c:	2203      	movs	r2, #3
   1372e:	68b9      	ldr	r1, [r7, #8]
   13730:	68f8      	ldr	r0, [r7, #12]
   13732:	4b13      	ldr	r3, [pc, #76]	; (13780 <usb_find_str_desc+0x68>)
   13734:	4798      	blx	r3
   13736:	60f8      	str	r0, [r7, #12]
		if (desc) {
   13738:	68fb      	ldr	r3, [r7, #12]
   1373a:	2b00      	cmp	r3, #0
   1373c:	d015      	beq.n	1376a <usb_find_str_desc+0x52>
			_desc_len_check();
   1373e:	68f8      	ldr	r0, [r7, #12]
   13740:	4b10      	ldr	r3, [pc, #64]	; (13784 <usb_find_str_desc+0x6c>)
   13742:	4798      	blx	r3
   13744:	4603      	mov	r3, r0
   13746:	2b01      	cmp	r3, #1
   13748:	d801      	bhi.n	1374e <usb_find_str_desc+0x36>
   1374a:	2300      	movs	r3, #0
   1374c:	e014      	b.n	13778 <usb_find_str_desc+0x60>
			if (i == str_index) {
   1374e:	7dfa      	ldrb	r2, [r7, #23]
   13750:	79fb      	ldrb	r3, [r7, #7]
   13752:	429a      	cmp	r2, r3
   13754:	d101      	bne.n	1375a <usb_find_str_desc+0x42>
				return desc;
   13756:	68fb      	ldr	r3, [r7, #12]
   13758:	e00e      	b.n	13778 <usb_find_str_desc+0x60>
			}
			i++;
   1375a:	7dfb      	ldrb	r3, [r7, #23]
   1375c:	3301      	adds	r3, #1
   1375e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   13760:	68f8      	ldr	r0, [r7, #12]
   13762:	4b09      	ldr	r3, [pc, #36]	; (13788 <usb_find_str_desc+0x70>)
   13764:	4798      	blx	r3
   13766:	60f8      	str	r0, [r7, #12]
   13768:	e001      	b.n	1376e <usb_find_str_desc+0x56>
		} else {
			return NULL;
   1376a:	2300      	movs	r3, #0
   1376c:	e004      	b.n	13778 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   1376e:	68fa      	ldr	r2, [r7, #12]
   13770:	68bb      	ldr	r3, [r7, #8]
   13772:	429a      	cmp	r2, r3
   13774:	d3da      	bcc.n	1372c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   13776:	2300      	movs	r3, #0
}
   13778:	4618      	mov	r0, r3
   1377a:	3718      	adds	r7, #24
   1377c:	46bd      	mov	sp, r7
   1377e:	bd80      	pop	{r7, pc}
   13780:	000135e1 	.word	0x000135e1
   13784:	00013547 	.word	0x00013547
   13788:	00013579 	.word	0x00013579

0001378c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   1378c:	b480      	push	{r7}
   1378e:	b083      	sub	sp, #12
   13790:	af00      	add	r7, sp, #0
   13792:	6078      	str	r0, [r7, #4]
   13794:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	683a      	ldr	r2, [r7, #0]
   1379a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   1379c:	687b      	ldr	r3, [r7, #4]
   1379e:	4618      	mov	r0, r3
   137a0:	370c      	adds	r7, #12
   137a2:	46bd      	mov	sp, r7
   137a4:	bc80      	pop	{r7}
   137a6:	4770      	bx	lr

000137a8 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   137a8:	b480      	push	{r7}
   137aa:	b083      	sub	sp, #12
   137ac:	af00      	add	r7, sp, #0
   137ae:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   137b0:	687b      	ldr	r3, [r7, #4]
   137b2:	4618      	mov	r0, r3
   137b4:	370c      	adds	r7, #12
   137b6:	46bd      	mov	sp, r7
   137b8:	bc80      	pop	{r7}
   137ba:	4770      	bx	lr

000137bc <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   137bc:	b580      	push	{r7, lr}
   137be:	b084      	sub	sp, #16
   137c0:	af00      	add	r7, sp, #0
   137c2:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   137c4:	687b      	ldr	r3, [r7, #4]
   137c6:	4a14      	ldr	r2, [pc, #80]	; (13818 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   137c8:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   137ca:	687b      	ldr	r3, [r7, #4]
   137cc:	4a12      	ldr	r2, [pc, #72]	; (13818 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   137ce:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   137d0:	687b      	ldr	r3, [r7, #4]
   137d2:	691a      	ldr	r2, [r3, #16]
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	330c      	adds	r3, #12
   137d8:	4619      	mov	r1, r3
   137da:	4610      	mov	r0, r2
   137dc:	4b0f      	ldr	r3, [pc, #60]	; (1381c <_ZN14I2C_Sync_Class4InitEv+0x60>)
   137de:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   137e0:	687b      	ldr	r3, [r7, #4]
   137e2:	691b      	ldr	r3, [r3, #16]
   137e4:	4618      	mov	r0, r3
   137e6:	4b0e      	ldr	r3, [pc, #56]	; (13820 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   137e8:	4798      	blx	r3
   137ea:	4603      	mov	r3, r0
   137ec:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   137ee:	7bfb      	ldrb	r3, [r7, #15]
   137f0:	2b00      	cmp	r3, #0
   137f2:	bf0c      	ite	eq
   137f4:	2301      	moveq	r3, #1
   137f6:	2300      	movne	r3, #0
   137f8:	b2da      	uxtb	r2, r3
   137fa:	687b      	ldr	r3, [r7, #4]
   137fc:	725a      	strb	r2, [r3, #9]
	i2c_initiated=isOK;
   137fe:	687b      	ldr	r3, [r7, #4]
   13800:	7a5b      	ldrb	r3, [r3, #9]
   13802:	b2da      	uxtb	r2, r3
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	721a      	strb	r2, [r3, #8]
	return isOK;
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	7a5b      	ldrb	r3, [r3, #9]
   1380c:	b2db      	uxtb	r3, r3
	
}
   1380e:	4618      	mov	r0, r3
   13810:	3710      	adds	r7, #16
   13812:	46bd      	mov	sp, r7
   13814:	bd80      	pop	{r7, pc}
   13816:	bf00      	nop
   13818:	20001fa0 	.word	0x20001fa0
   1381c:	000088ff 	.word	0x000088ff
   13820:	000088a5 	.word	0x000088a5

00013824 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   13824:	b580      	push	{r7, lr}
   13826:	b082      	sub	sp, #8
   13828:	af00      	add	r7, sp, #0
   1382a:	6078      	str	r0, [r7, #4]
   1382c:	460b      	mov	r3, r1
   1382e:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   13830:	687b      	ldr	r3, [r7, #4]
   13832:	691b      	ldr	r3, [r3, #16]
   13834:	78fa      	ldrb	r2, [r7, #3]
   13836:	b211      	sxth	r1, r2
   13838:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1383c:	4618      	mov	r0, r3
   1383e:	4b03      	ldr	r3, [pc, #12]	; (1384c <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   13840:	4798      	blx	r3
   13842:	4603      	mov	r3, r0
}
   13844:	4618      	mov	r0, r3
   13846:	3708      	adds	r7, #8
   13848:	46bd      	mov	sp, r7
   1384a:	bd80      	pop	{r7, pc}
   1384c:	000088c5 	.word	0x000088c5

00013850 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   13850:	b580      	push	{r7, lr}
   13852:	b086      	sub	sp, #24
   13854:	af00      	add	r7, sp, #0
   13856:	60f8      	str	r0, [r7, #12]
   13858:	60b9      	str	r1, [r7, #8]
   1385a:	4613      	mov	r3, r2
   1385c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   1385e:	68fb      	ldr	r3, [r7, #12]
   13860:	68db      	ldr	r3, [r3, #12]
   13862:	88fa      	ldrh	r2, [r7, #6]
   13864:	68b9      	ldr	r1, [r7, #8]
   13866:	4618      	mov	r0, r3
   13868:	4b03      	ldr	r3, [pc, #12]	; (13878 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   1386a:	4798      	blx	r3
   1386c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   1386e:	697b      	ldr	r3, [r7, #20]
}
   13870:	4618      	mov	r0, r3
   13872:	3718      	adds	r7, #24
   13874:	46bd      	mov	sp, r7
   13876:	bd80      	pop	{r7, pc}
   13878:	00013eb1 	.word	0x00013eb1

0001387c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   1387c:	b580      	push	{r7, lr}
   1387e:	b086      	sub	sp, #24
   13880:	af00      	add	r7, sp, #0
   13882:	60f8      	str	r0, [r7, #12]
   13884:	60b9      	str	r1, [r7, #8]
   13886:	4613      	mov	r3, r2
   13888:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   1388a:	68fb      	ldr	r3, [r7, #12]
   1388c:	68db      	ldr	r3, [r3, #12]
   1388e:	88fa      	ldrh	r2, [r7, #6]
   13890:	68b9      	ldr	r1, [r7, #8]
   13892:	4618      	mov	r0, r3
   13894:	4b03      	ldr	r3, [pc, #12]	; (138a4 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   13896:	4798      	blx	r3
   13898:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   1389a:	697b      	ldr	r3, [r7, #20]
}
   1389c:	4618      	mov	r0, r3
   1389e:	3718      	adds	r7, #24
   138a0:	46bd      	mov	sp, r7
   138a2:	bd80      	pop	{r7, pc}
   138a4:	00013f01 	.word	0x00013f01

000138a8 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   138a8:	b480      	push	{r7}
   138aa:	b083      	sub	sp, #12
   138ac:	af00      	add	r7, sp, #0
   138ae:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   138b0:	687b      	ldr	r3, [r7, #4]
   138b2:	4618      	mov	r0, r3
   138b4:	370c      	adds	r7, #12
   138b6:	46bd      	mov	sp, r7
   138b8:	bc80      	pop	{r7}
   138ba:	4770      	bx	lr

000138bc <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   138bc:	b480      	push	{r7}
   138be:	b083      	sub	sp, #12
   138c0:	af00      	add	r7, sp, #0
   138c2:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	4618      	mov	r0, r3
   138c8:	370c      	adds	r7, #12
   138ca:	46bd      	mov	sp, r7
   138cc:	bc80      	pop	{r7}
   138ce:	4770      	bx	lr

000138d0 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   138d0:	b480      	push	{r7}
   138d2:	b085      	sub	sp, #20
   138d4:	af00      	add	r7, sp, #0
   138d6:	60f8      	str	r0, [r7, #12]
   138d8:	460b      	mov	r3, r1
   138da:	607a      	str	r2, [r7, #4]
   138dc:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   138de:	687b      	ldr	r3, [r7, #4]
   138e0:	681a      	ldr	r2, [r3, #0]
   138e2:	68fb      	ldr	r3, [r7, #12]
   138e4:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   138e6:	687b      	ldr	r3, [r7, #4]
   138e8:	685a      	ldr	r2, [r3, #4]
   138ea:	68fb      	ldr	r3, [r7, #12]
   138ec:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   138ee:	68fb      	ldr	r3, [r7, #12]
   138f0:	7afa      	ldrb	r2, [r7, #11]
   138f2:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   138f4:	68fb      	ldr	r3, [r7, #12]
   138f6:	687a      	ldr	r2, [r7, #4]
   138f8:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   138fa:	68fb      	ldr	r3, [r7, #12]
   138fc:	68db      	ldr	r3, [r3, #12]
   138fe:	7a5b      	ldrb	r3, [r3, #9]
   13900:	b2da      	uxtb	r2, r3
   13902:	68fb      	ldr	r3, [r7, #12]
   13904:	719a      	strb	r2, [r3, #6]
	return isOK;
   13906:	68fb      	ldr	r3, [r7, #12]
   13908:	799b      	ldrb	r3, [r3, #6]
   1390a:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   1390c:	4618      	mov	r0, r3
   1390e:	3714      	adds	r7, #20
   13910:	46bd      	mov	sp, r7
   13912:	bc80      	pop	{r7}
   13914:	4770      	bx	lr

00013916 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   13916:	b480      	push	{r7}
   13918:	b083      	sub	sp, #12
   1391a:	af00      	add	r7, sp, #0
   1391c:	6078      	str	r0, [r7, #4]
   1391e:	460b      	mov	r3, r1
   13920:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   13922:	78fb      	ldrb	r3, [r7, #3]
   13924:	f003 0307 	and.w	r3, r3, #7
   13928:	b2db      	uxtb	r3, r3
}
   1392a:	4618      	mov	r0, r3
   1392c:	370c      	adds	r7, #12
   1392e:	46bd      	mov	sp, r7
   13930:	bc80      	pop	{r7}
   13932:	4770      	bx	lr

00013934 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   13934:	b580      	push	{r7, lr}
   13936:	b082      	sub	sp, #8
   13938:	af00      	add	r7, sp, #0
   1393a:	6078      	str	r0, [r7, #4]
   1393c:	460b      	mov	r3, r1
   1393e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   13940:	687b      	ldr	r3, [r7, #4]
   13942:	68da      	ldr	r2, [r3, #12]
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	7a1b      	ldrb	r3, [r3, #8]
   13948:	4619      	mov	r1, r3
   1394a:	4610      	mov	r0, r2
   1394c:	4b0a      	ldr	r3, [pc, #40]	; (13978 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   1394e:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   13950:	687b      	ldr	r3, [r7, #4]
   13952:	68db      	ldr	r3, [r3, #12]
   13954:	1cf9      	adds	r1, r7, #3
   13956:	2201      	movs	r2, #1
   13958:	4618      	mov	r0, r3
   1395a:	4b08      	ldr	r3, [pc, #32]	; (1397c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   1395c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	68db      	ldr	r3, [r3, #12]
   13962:	6879      	ldr	r1, [r7, #4]
   13964:	2201      	movs	r2, #1
   13966:	4618      	mov	r0, r3
   13968:	4b05      	ldr	r3, [pc, #20]	; (13980 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   1396a:	4798      	blx	r3

	return registerValue;
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	781b      	ldrb	r3, [r3, #0]
}
   13970:	4618      	mov	r0, r3
   13972:	3708      	adds	r7, #8
   13974:	46bd      	mov	sp, r7
   13976:	bd80      	pop	{r7, pc}
   13978:	00013825 	.word	0x00013825
   1397c:	00013851 	.word	0x00013851
   13980:	0001387d 	.word	0x0001387d

00013984 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   13984:	b580      	push	{r7, lr}
   13986:	b084      	sub	sp, #16
   13988:	af00      	add	r7, sp, #0
   1398a:	6078      	str	r0, [r7, #4]
   1398c:	460b      	mov	r3, r1
   1398e:	70fb      	strb	r3, [r7, #3]
   13990:	4613      	mov	r3, r2
   13992:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	68da      	ldr	r2, [r3, #12]
   13998:	687b      	ldr	r3, [r7, #4]
   1399a:	7a1b      	ldrb	r3, [r3, #8]
   1399c:	4619      	mov	r1, r3
   1399e:	4610      	mov	r0, r2
   139a0:	4b09      	ldr	r3, [pc, #36]	; (139c8 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   139a2:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   139a4:	78fb      	ldrb	r3, [r7, #3]
   139a6:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   139a8:	78bb      	ldrb	r3, [r7, #2]
   139aa:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   139ac:	687b      	ldr	r3, [r7, #4]
   139ae:	68db      	ldr	r3, [r3, #12]
   139b0:	f107 010c 	add.w	r1, r7, #12
   139b4:	2202      	movs	r2, #2
   139b6:	4618      	mov	r0, r3
   139b8:	4b04      	ldr	r3, [pc, #16]	; (139cc <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   139ba:	4798      	blx	r3
   139bc:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   139be:	4618      	mov	r0, r3
   139c0:	3710      	adds	r7, #16
   139c2:	46bd      	mov	sp, r7
   139c4:	bd80      	pop	{r7, pc}
   139c6:	bf00      	nop
   139c8:	00013825 	.word	0x00013825
   139cc:	00013851 	.word	0x00013851

000139d0 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   139d0:	b580      	push	{r7, lr}
   139d2:	b082      	sub	sp, #8
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
   139d8:	460b      	mov	r3, r1
   139da:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   139dc:	687b      	ldr	r3, [r7, #4]
   139de:	68da      	ldr	r2, [r3, #12]
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	7a1b      	ldrb	r3, [r3, #8]
   139e4:	4619      	mov	r1, r3
   139e6:	4610      	mov	r0, r2
   139e8:	4b06      	ldr	r3, [pc, #24]	; (13a04 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   139ea:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   139ec:	78fb      	ldrb	r3, [r7, #3]
   139ee:	461a      	mov	r2, r3
   139f0:	2109      	movs	r1, #9
   139f2:	6878      	ldr	r0, [r7, #4]
   139f4:	4b04      	ldr	r3, [pc, #16]	; (13a08 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   139f6:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   139f8:	78fb      	ldrb	r3, [r7, #3]
}
   139fa:	4618      	mov	r0, r3
   139fc:	3708      	adds	r7, #8
   139fe:	46bd      	mov	sp, r7
   13a00:	bd80      	pop	{r7, pc}
   13a02:	bf00      	nop
   13a04:	00013825 	.word	0x00013825
   13a08:	00013985 	.word	0x00013985

00013a0c <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
   13a0c:	b580      	push	{r7, lr}
   13a0e:	b084      	sub	sp, #16
   13a10:	af00      	add	r7, sp, #0
   13a12:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   13a14:	2300      	movs	r3, #0
   13a16:	73fb      	strb	r3, [r7, #15]
   13a18:	7bfb      	ldrb	r3, [r7, #15]
   13a1a:	2b07      	cmp	r3, #7
   13a1c:	dc09      	bgt.n	13a32 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   13a1e:	7bfb      	ldrb	r3, [r7, #15]
   13a20:	2200      	movs	r2, #0
   13a22:	4619      	mov	r1, r3
   13a24:	6878      	ldr	r0, [r7, #4]
   13a26:	4b05      	ldr	r3, [pc, #20]	; (13a3c <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   13a28:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   13a2a:	7bfb      	ldrb	r3, [r7, #15]
   13a2c:	3301      	adds	r3, #1
   13a2e:	73fb      	strb	r3, [r7, #15]
   13a30:	e7f2      	b.n	13a18 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   13a32:	bf00      	nop
   13a34:	3710      	adds	r7, #16
   13a36:	46bd      	mov	sp, r7
   13a38:	bd80      	pop	{r7, pc}
   13a3a:	bf00      	nop
   13a3c:	00013acd 	.word	0x00013acd

00013a40 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   13a40:	b580      	push	{r7, lr}
   13a42:	b084      	sub	sp, #16
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
   13a48:	4608      	mov	r0, r1
   13a4a:	4611      	mov	r1, r2
   13a4c:	461a      	mov	r2, r3
   13a4e:	4603      	mov	r3, r0
   13a50:	70fb      	strb	r3, [r7, #3]
   13a52:	460b      	mov	r3, r1
   13a54:	70bb      	strb	r3, [r7, #2]
   13a56:	4613      	mov	r3, r2
   13a58:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   13a5a:	787b      	ldrb	r3, [r7, #1]
   13a5c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   13a5e:	78fb      	ldrb	r3, [r7, #3]
   13a60:	4619      	mov	r1, r3
   13a62:	6878      	ldr	r0, [r7, #4]
   13a64:	4b16      	ldr	r3, [pc, #88]	; (13ac0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   13a66:	4798      	blx	r3
   13a68:	4603      	mov	r3, r0
   13a6a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   13a6c:	7bfb      	ldrb	r3, [r7, #15]
   13a6e:	4619      	mov	r1, r3
   13a70:	6878      	ldr	r0, [r7, #4]
   13a72:	4b14      	ldr	r3, [pc, #80]	; (13ac4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   13a74:	4798      	blx	r3
   13a76:	4603      	mov	r3, r0
   13a78:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   13a7a:	78bb      	ldrb	r3, [r7, #2]
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d009      	beq.n	13a94 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   13a80:	7bba      	ldrb	r2, [r7, #14]
   13a82:	7b7b      	ldrb	r3, [r7, #13]
   13a84:	4619      	mov	r1, r3
   13a86:	2301      	movs	r3, #1
   13a88:	408b      	lsls	r3, r1
   13a8a:	b2db      	uxtb	r3, r3
   13a8c:	4313      	orrs	r3, r2
   13a8e:	b2db      	uxtb	r3, r3
   13a90:	73bb      	strb	r3, [r7, #14]
   13a92:	e00a      	b.n	13aaa <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   13a94:	7bba      	ldrb	r2, [r7, #14]
   13a96:	7b7b      	ldrb	r3, [r7, #13]
   13a98:	4619      	mov	r1, r3
   13a9a:	2301      	movs	r3, #1
   13a9c:	408b      	lsls	r3, r1
   13a9e:	b2db      	uxtb	r3, r3
   13aa0:	43db      	mvns	r3, r3
   13aa2:	b2db      	uxtb	r3, r3
   13aa4:	4013      	ands	r3, r2
   13aa6:	b2db      	uxtb	r3, r3
   13aa8:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   13aaa:	7bba      	ldrb	r2, [r7, #14]
   13aac:	7bfb      	ldrb	r3, [r7, #15]
   13aae:	4619      	mov	r1, r3
   13ab0:	6878      	ldr	r0, [r7, #4]
   13ab2:	4b05      	ldr	r3, [pc, #20]	; (13ac8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   13ab4:	4798      	blx	r3
}
   13ab6:	bf00      	nop
   13ab8:	3710      	adds	r7, #16
   13aba:	46bd      	mov	sp, r7
   13abc:	bd80      	pop	{r7, pc}
   13abe:	bf00      	nop
   13ac0:	00013917 	.word	0x00013917
   13ac4:	00013935 	.word	0x00013935
   13ac8:	00013985 	.word	0x00013985

00013acc <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   13acc:	b590      	push	{r4, r7, lr}
   13ace:	b085      	sub	sp, #20
   13ad0:	af02      	add	r7, sp, #8
   13ad2:	6078      	str	r0, [r7, #4]
   13ad4:	460b      	mov	r3, r1
   13ad6:	70fb      	strb	r3, [r7, #3]
   13ad8:	4613      	mov	r3, r2
   13ada:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   13adc:	78bb      	ldrb	r3, [r7, #2]
   13ade:	2b01      	cmp	r3, #1
   13ae0:	bf0c      	ite	eq
   13ae2:	2301      	moveq	r3, #1
   13ae4:	2300      	movne	r3, #0
   13ae6:	b2db      	uxtb	r3, r3
   13ae8:	461a      	mov	r2, r3
   13aea:	78f9      	ldrb	r1, [r7, #3]
   13aec:	2300      	movs	r3, #0
   13aee:	9300      	str	r3, [sp, #0]
   13af0:	2300      	movs	r3, #0
   13af2:	6878      	ldr	r0, [r7, #4]
   13af4:	4c02      	ldr	r4, [pc, #8]	; (13b00 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   13af6:	47a0      	blx	r4
}
   13af8:	bf00      	nop
   13afa:	370c      	adds	r7, #12
   13afc:	46bd      	mov	sp, r7
   13afe:	bd90      	pop	{r4, r7, pc}
   13b00:	00013a41 	.word	0x00013a41

00013b04 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   13b04:	b480      	push	{r7}
   13b06:	b083      	sub	sp, #12
   13b08:	af00      	add	r7, sp, #0
   13b0a:	6078      	str	r0, [r7, #4]
   13b0c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   13b0e:	687b      	ldr	r3, [r7, #4]
   13b10:	683a      	ldr	r2, [r7, #0]
   13b12:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   13b14:	687b      	ldr	r3, [r7, #4]
   13b16:	68db      	ldr	r3, [r3, #12]
   13b18:	2200      	movs	r2, #0
   13b1a:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   13b1c:	4a06      	ldr	r2, [pc, #24]	; (13b38 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   13b1e:	687b      	ldr	r3, [r7, #4]
   13b20:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13b22:	687b      	ldr	r3, [r7, #4]
   13b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13b28:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   13b2a:	687b      	ldr	r3, [r7, #4]
   13b2c:	4618      	mov	r0, r3
   13b2e:	370c      	adds	r7, #12
   13b30:	46bd      	mov	sp, r7
   13b32:	bc80      	pop	{r7}
   13b34:	4770      	bx	lr
   13b36:	bf00      	nop
   13b38:	20002120 	.word	0x20002120

00013b3c <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   13b3c:	b480      	push	{r7}
   13b3e:	b083      	sub	sp, #12
   13b40:	af00      	add	r7, sp, #0
   13b42:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   13b44:	687b      	ldr	r3, [r7, #4]
   13b46:	2200      	movs	r2, #0
   13b48:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   13b4a:	687b      	ldr	r3, [r7, #4]
   13b4c:	4618      	mov	r0, r3
   13b4e:	370c      	adds	r7, #12
   13b50:	46bd      	mov	sp, r7
   13b52:	bc80      	pop	{r7}
   13b54:	4770      	bx	lr
	...

00013b58 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13b58:	b580      	push	{r7, lr}
   13b5a:	b086      	sub	sp, #24
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	60f8      	str	r0, [r7, #12]
   13b60:	60b9      	str	r1, [r7, #8]
   13b62:	607a      	str	r2, [r7, #4]
   13b64:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   13b66:	68b9      	ldr	r1, [r7, #8]
   13b68:	68f8      	ldr	r0, [r7, #12]
   13b6a:	4b0e      	ldr	r3, [pc, #56]	; (13ba4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   13b6c:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   13b6e:	68fb      	ldr	r3, [r7, #12]
   13b70:	699b      	ldr	r3, [r3, #24]
   13b72:	687a      	ldr	r2, [r7, #4]
   13b74:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   13b76:	68fb      	ldr	r3, [r7, #12]
   13b78:	699b      	ldr	r3, [r3, #24]
   13b7a:	68ba      	ldr	r2, [r7, #8]
   13b7c:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   13b7e:	68fb      	ldr	r3, [r7, #12]
   13b80:	699b      	ldr	r3, [r3, #24]
   13b82:	78fa      	ldrb	r2, [r7, #3]
   13b84:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   13b86:	68fb      	ldr	r3, [r7, #12]
   13b88:	68da      	ldr	r2, [r3, #12]
   13b8a:	68fb      	ldr	r3, [r7, #12]
   13b8c:	699b      	ldr	r3, [r3, #24]
   13b8e:	4619      	mov	r1, r3
   13b90:	4610      	mov	r0, r2
   13b92:	4b05      	ldr	r3, [pc, #20]	; (13ba8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   13b94:	4798      	blx	r3
   13b96:	6178      	str	r0, [r7, #20]
	
	return status;
   13b98:	697b      	ldr	r3, [r7, #20]
}
   13b9a:	4618      	mov	r0, r3
   13b9c:	3718      	adds	r7, #24
   13b9e:	46bd      	mov	sp, r7
   13ba0:	bd80      	pop	{r7, pc}
   13ba2:	bf00      	nop
   13ba4:	00013cc1 	.word	0x00013cc1
   13ba8:	00008d81 	.word	0x00008d81

00013bac <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   13bac:	b580      	push	{r7, lr}
   13bae:	b082      	sub	sp, #8
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	6078      	str	r0, [r7, #4]
   13bb4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   13bb6:	6839      	ldr	r1, [r7, #0]
   13bb8:	6878      	ldr	r0, [r7, #4]
   13bba:	4b0f      	ldr	r3, [pc, #60]	; (13bf8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   13bbc:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   13bbe:	687b      	ldr	r3, [r7, #4]
   13bc0:	68db      	ldr	r3, [r3, #12]
   13bc2:	f103 0218 	add.w	r2, r3, #24
   13bc6:	687b      	ldr	r3, [r7, #4]
   13bc8:	699b      	ldr	r3, [r3, #24]
   13bca:	4619      	mov	r1, r3
   13bcc:	4610      	mov	r0, r2
   13bce:	4b0b      	ldr	r3, [pc, #44]	; (13bfc <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   13bd0:	4798      	blx	r3
   13bd2:	4603      	mov	r3, r0
   13bd4:	2b00      	cmp	r3, #0
   13bd6:	d007      	beq.n	13be8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   13bd8:	687b      	ldr	r3, [r7, #4]
   13bda:	68da      	ldr	r2, [r3, #12]
   13bdc:	687b      	ldr	r3, [r7, #4]
   13bde:	699b      	ldr	r3, [r3, #24]
   13be0:	4619      	mov	r1, r3
   13be2:	4610      	mov	r0, r2
   13be4:	4b06      	ldr	r3, [pc, #24]	; (13c00 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   13be6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	699b      	ldr	r3, [r3, #24]
   13bec:	2200      	movs	r2, #0
   13bee:	60da      	str	r2, [r3, #12]
}
   13bf0:	bf00      	nop
   13bf2:	3708      	adds	r7, #8
   13bf4:	46bd      	mov	sp, r7
   13bf6:	bd80      	pop	{r7, pc}
   13bf8:	00013d41 	.word	0x00013d41
   13bfc:	00009a19 	.word	0x00009a19
   13c00:	00008e85 	.word	0x00008e85

00013c04 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   13c04:	b590      	push	{r4, r7, lr}
   13c06:	b087      	sub	sp, #28
   13c08:	af00      	add	r7, sp, #0
   13c0a:	60f8      	str	r0, [r7, #12]
   13c0c:	60b9      	str	r1, [r7, #8]
   13c0e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   13c10:	2300      	movs	r3, #0
   13c12:	687a      	ldr	r2, [r7, #4]
   13c14:	68b9      	ldr	r1, [r7, #8]
   13c16:	68f8      	ldr	r0, [r7, #12]
   13c18:	4c0c      	ldr	r4, [pc, #48]	; (13c4c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   13c1a:	47a0      	blx	r4
   13c1c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   13c1e:	68fb      	ldr	r3, [r7, #12]
   13c20:	68db      	ldr	r3, [r3, #12]
   13c22:	681b      	ldr	r3, [r3, #0]
   13c24:	699b      	ldr	r3, [r3, #24]
   13c26:	68fa      	ldr	r2, [r7, #12]
   13c28:	68d2      	ldr	r2, [r2, #12]
   13c2a:	3204      	adds	r2, #4
   13c2c:	4610      	mov	r0, r2
   13c2e:	4798      	blx	r3
   13c30:	4603      	mov	r3, r0
   13c32:	2b00      	cmp	r3, #0
   13c34:	d105      	bne.n	13c42 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   13c36:	68fb      	ldr	r3, [r7, #12]
   13c38:	68db      	ldr	r3, [r3, #12]
   13c3a:	4618      	mov	r0, r3
   13c3c:	4b04      	ldr	r3, [pc, #16]	; (13c50 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   13c3e:	4798      	blx	r3
   13c40:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   13c42:	697b      	ldr	r3, [r7, #20]
}
   13c44:	4618      	mov	r0, r3
   13c46:	371c      	adds	r7, #28
   13c48:	46bd      	mov	sp, r7
   13c4a:	bd90      	pop	{r4, r7, pc}
   13c4c:	00013b59 	.word	0x00013b59
   13c50:	00008d19 	.word	0x00008d19

00013c54 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   13c54:	b480      	push	{r7}
   13c56:	b085      	sub	sp, #20
   13c58:	af00      	add	r7, sp, #0
   13c5a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13c5c:	2300      	movs	r3, #0
   13c5e:	73fb      	strb	r3, [r7, #15]
   13c60:	7bfb      	ldrb	r3, [r7, #15]
   13c62:	2b1f      	cmp	r3, #31
   13c64:	dc23      	bgt.n	13cae <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   13c66:	687b      	ldr	r3, [r7, #4]
   13c68:	7f1a      	ldrb	r2, [r3, #28]
   13c6a:	7bfb      	ldrb	r3, [r7, #15]
   13c6c:	4413      	add	r3, r2
   13c6e:	b2db      	uxtb	r3, r3
   13c70:	f003 031f 	and.w	r3, r3, #31
   13c74:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   13c76:	7bba      	ldrb	r2, [r7, #14]
   13c78:	4910      	ldr	r1, [pc, #64]	; (13cbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   13c7a:	4613      	mov	r3, r2
   13c7c:	009b      	lsls	r3, r3, #2
   13c7e:	4413      	add	r3, r2
   13c80:	009b      	lsls	r3, r3, #2
   13c82:	440b      	add	r3, r1
   13c84:	330c      	adds	r3, #12
   13c86:	681b      	ldr	r3, [r3, #0]
   13c88:	2b00      	cmp	r3, #0
   13c8a:	d10c      	bne.n	13ca6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   13c8c:	7bba      	ldrb	r2, [r7, #14]
   13c8e:	4613      	mov	r3, r2
   13c90:	009b      	lsls	r3, r3, #2
   13c92:	4413      	add	r3, r2
   13c94:	009b      	lsls	r3, r3, #2
   13c96:	4a09      	ldr	r2, [pc, #36]	; (13cbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   13c98:	441a      	add	r2, r3
   13c9a:	687b      	ldr	r3, [r7, #4]
   13c9c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   13c9e:	687b      	ldr	r3, [r7, #4]
   13ca0:	7bba      	ldrb	r2, [r7, #14]
   13ca2:	771a      	strb	r2, [r3, #28]
			return;
   13ca4:	e006      	b.n	13cb4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13ca6:	7bfb      	ldrb	r3, [r7, #15]
   13ca8:	3301      	adds	r3, #1
   13caa:	73fb      	strb	r3, [r7, #15]
   13cac:	e7d8      	b.n	13c60 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   13cae:	687b      	ldr	r3, [r7, #4]
   13cb0:	4a02      	ldr	r2, [pc, #8]	; (13cbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   13cb2:	619a      	str	r2, [r3, #24]

}
   13cb4:	3714      	adds	r7, #20
   13cb6:	46bd      	mov	sp, r7
   13cb8:	bc80      	pop	{r7}
   13cba:	4770      	bx	lr
   13cbc:	20002124 	.word	0x20002124

00013cc0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   13cc0:	b580      	push	{r7, lr}
   13cc2:	b084      	sub	sp, #16
   13cc4:	af00      	add	r7, sp, #0
   13cc6:	6078      	str	r0, [r7, #4]
   13cc8:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13cca:	2300      	movs	r3, #0
   13ccc:	73fb      	strb	r3, [r7, #15]
   13cce:	7bfb      	ldrb	r3, [r7, #15]
   13cd0:	2b1f      	cmp	r3, #31
   13cd2:	dc28      	bgt.n	13d26 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   13cd4:	687b      	ldr	r3, [r7, #4]
   13cd6:	7f1a      	ldrb	r2, [r3, #28]
   13cd8:	7bfb      	ldrb	r3, [r7, #15]
   13cda:	4413      	add	r3, r2
   13cdc:	b2db      	uxtb	r3, r3
   13cde:	f003 031f 	and.w	r3, r3, #31
   13ce2:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   13ce4:	7bba      	ldrb	r2, [r7, #14]
   13ce6:	4913      	ldr	r1, [pc, #76]	; (13d34 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   13ce8:	4613      	mov	r3, r2
   13cea:	009b      	lsls	r3, r3, #2
   13cec:	4413      	add	r3, r2
   13cee:	009b      	lsls	r3, r3, #2
   13cf0:	440b      	add	r3, r1
   13cf2:	330c      	adds	r3, #12
   13cf4:	681a      	ldr	r2, [r3, #0]
   13cf6:	683b      	ldr	r3, [r7, #0]
   13cf8:	429a      	cmp	r2, r3
   13cfa:	d110      	bne.n	13d1e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   13cfc:	6839      	ldr	r1, [r7, #0]
   13cfe:	6878      	ldr	r0, [r7, #4]
   13d00:	4b0d      	ldr	r3, [pc, #52]	; (13d38 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   13d02:	4798      	blx	r3
			task=&taskArray[j];
   13d04:	7bba      	ldrb	r2, [r7, #14]
   13d06:	4613      	mov	r3, r2
   13d08:	009b      	lsls	r3, r3, #2
   13d0a:	4413      	add	r3, r2
   13d0c:	009b      	lsls	r3, r3, #2
   13d0e:	4a09      	ldr	r2, [pc, #36]	; (13d34 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   13d10:	441a      	add	r2, r3
   13d12:	687b      	ldr	r3, [r7, #4]
   13d14:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   13d16:	687b      	ldr	r3, [r7, #4]
   13d18:	7bba      	ldrb	r2, [r7, #14]
   13d1a:	771a      	strb	r2, [r3, #28]
			return;
   13d1c:	e006      	b.n	13d2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13d1e:	7bfb      	ldrb	r3, [r7, #15]
   13d20:	3301      	adds	r3, #1
   13d22:	73fb      	strb	r3, [r7, #15]
   13d24:	e7d3      	b.n	13cce <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   13d26:	6878      	ldr	r0, [r7, #4]
   13d28:	4b04      	ldr	r3, [pc, #16]	; (13d3c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   13d2a:	4798      	blx	r3
	//task=&taskArray[0];

}
   13d2c:	3710      	adds	r7, #16
   13d2e:	46bd      	mov	sp, r7
   13d30:	bd80      	pop	{r7, pc}
   13d32:	bf00      	nop
   13d34:	20002124 	.word	0x20002124
   13d38:	00013bad 	.word	0x00013bad
   13d3c:	00013c55 	.word	0x00013c55

00013d40 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   13d40:	b480      	push	{r7}
   13d42:	b085      	sub	sp, #20
   13d44:	af00      	add	r7, sp, #0
   13d46:	6078      	str	r0, [r7, #4]
   13d48:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13d4a:	2300      	movs	r3, #0
   13d4c:	73fb      	strb	r3, [r7, #15]
   13d4e:	7bfb      	ldrb	r3, [r7, #15]
   13d50:	2b1f      	cmp	r3, #31
   13d52:	dc19      	bgt.n	13d88 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   13d54:	7bfa      	ldrb	r2, [r7, #15]
   13d56:	490f      	ldr	r1, [pc, #60]	; (13d94 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   13d58:	4613      	mov	r3, r2
   13d5a:	009b      	lsls	r3, r3, #2
   13d5c:	4413      	add	r3, r2
   13d5e:	009b      	lsls	r3, r3, #2
   13d60:	440b      	add	r3, r1
   13d62:	330c      	adds	r3, #12
   13d64:	681a      	ldr	r2, [r3, #0]
   13d66:	683b      	ldr	r3, [r7, #0]
   13d68:	429a      	cmp	r2, r3
   13d6a:	d109      	bne.n	13d80 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   13d6c:	7bfa      	ldrb	r2, [r7, #15]
   13d6e:	4613      	mov	r3, r2
   13d70:	009b      	lsls	r3, r3, #2
   13d72:	4413      	add	r3, r2
   13d74:	009b      	lsls	r3, r3, #2
   13d76:	4a07      	ldr	r2, [pc, #28]	; (13d94 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   13d78:	441a      	add	r2, r3
   13d7a:	687b      	ldr	r3, [r7, #4]
   13d7c:	619a      	str	r2, [r3, #24]
			return;
   13d7e:	e004      	b.n	13d8a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   13d80:	7bfb      	ldrb	r3, [r7, #15]
   13d82:	3301      	adds	r3, #1
   13d84:	73fb      	strb	r3, [r7, #15]
   13d86:	e7e2      	b.n	13d4e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   13d88:	bf00      	nop
}
   13d8a:	3714      	adds	r7, #20
   13d8c:	46bd      	mov	sp, r7
   13d8e:	bc80      	pop	{r7}
   13d90:	4770      	bx	lr
   13d92:	bf00      	nop
   13d94:	20002124 	.word	0x20002124

00013d98 <_Z41__static_initialization_and_destruction_0ii>:
   13d98:	b580      	push	{r7, lr}
   13d9a:	b082      	sub	sp, #8
   13d9c:	af00      	add	r7, sp, #0
   13d9e:	6078      	str	r0, [r7, #4]
   13da0:	6039      	str	r1, [r7, #0]
   13da2:	687b      	ldr	r3, [r7, #4]
   13da4:	2b01      	cmp	r3, #1
   13da6:	d14c      	bne.n	13e42 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   13da8:	683b      	ldr	r3, [r7, #0]
   13daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13dae:	4293      	cmp	r3, r2
   13db0:	d147      	bne.n	13e42 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13db2:	4926      	ldr	r1, [pc, #152]	; (13e4c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   13db4:	4826      	ldr	r0, [pc, #152]	; (13e50 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   13db6:	4b27      	ldr	r3, [pc, #156]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13db8:	4798      	blx	r3
   13dba:	4a27      	ldr	r2, [pc, #156]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13dbc:	4927      	ldr	r1, [pc, #156]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13dbe:	4824      	ldr	r0, [pc, #144]	; (13e50 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   13dc0:	4b27      	ldr	r3, [pc, #156]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13dc2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13dc4:	4927      	ldr	r1, [pc, #156]	; (13e64 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   13dc6:	4828      	ldr	r0, [pc, #160]	; (13e68 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   13dc8:	4b22      	ldr	r3, [pc, #136]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13dca:	4798      	blx	r3
   13dcc:	4a22      	ldr	r2, [pc, #136]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13dce:	4923      	ldr	r1, [pc, #140]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13dd0:	4825      	ldr	r0, [pc, #148]	; (13e68 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   13dd2:	4b23      	ldr	r3, [pc, #140]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13dd4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13dd6:	4925      	ldr	r1, [pc, #148]	; (13e6c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   13dd8:	4825      	ldr	r0, [pc, #148]	; (13e70 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   13dda:	4b1e      	ldr	r3, [pc, #120]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13ddc:	4798      	blx	r3
   13dde:	4a1e      	ldr	r2, [pc, #120]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13de0:	491e      	ldr	r1, [pc, #120]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13de2:	4823      	ldr	r0, [pc, #140]	; (13e70 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   13de4:	4b1e      	ldr	r3, [pc, #120]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13de6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13de8:	4922      	ldr	r1, [pc, #136]	; (13e74 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   13dea:	4823      	ldr	r0, [pc, #140]	; (13e78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   13dec:	4b19      	ldr	r3, [pc, #100]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13dee:	4798      	blx	r3
   13df0:	4a19      	ldr	r2, [pc, #100]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13df2:	491a      	ldr	r1, [pc, #104]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13df4:	4820      	ldr	r0, [pc, #128]	; (13e78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   13df6:	4b1a      	ldr	r3, [pc, #104]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13df8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13dfa:	4920      	ldr	r1, [pc, #128]	; (13e7c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   13dfc:	4820      	ldr	r0, [pc, #128]	; (13e80 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   13dfe:	4b15      	ldr	r3, [pc, #84]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13e00:	4798      	blx	r3
   13e02:	4a15      	ldr	r2, [pc, #84]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13e04:	4915      	ldr	r1, [pc, #84]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13e06:	481e      	ldr	r0, [pc, #120]	; (13e80 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   13e08:	4b15      	ldr	r3, [pc, #84]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13e0a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   13e0c:	491d      	ldr	r1, [pc, #116]	; (13e84 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   13e0e:	481e      	ldr	r0, [pc, #120]	; (13e88 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   13e10:	4b10      	ldr	r3, [pc, #64]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13e12:	4798      	blx	r3
   13e14:	4a10      	ldr	r2, [pc, #64]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13e16:	4911      	ldr	r1, [pc, #68]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13e18:	481b      	ldr	r0, [pc, #108]	; (13e88 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   13e1a:	4b11      	ldr	r3, [pc, #68]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13e1c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13e1e:	491b      	ldr	r1, [pc, #108]	; (13e8c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   13e20:	481b      	ldr	r0, [pc, #108]	; (13e90 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13e22:	4b0c      	ldr	r3, [pc, #48]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13e24:	4798      	blx	r3
   13e26:	4a0c      	ldr	r2, [pc, #48]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13e28:	490c      	ldr	r1, [pc, #48]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13e2a:	4819      	ldr	r0, [pc, #100]	; (13e90 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13e2c:	4b0c      	ldr	r3, [pc, #48]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13e2e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13e30:	4918      	ldr	r1, [pc, #96]	; (13e94 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   13e32:	4819      	ldr	r0, [pc, #100]	; (13e98 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13e34:	4b07      	ldr	r3, [pc, #28]	; (13e54 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   13e36:	4798      	blx	r3
   13e38:	4a07      	ldr	r2, [pc, #28]	; (13e58 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   13e3a:	4908      	ldr	r1, [pc, #32]	; (13e5c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   13e3c:	4816      	ldr	r0, [pc, #88]	; (13e98 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13e3e:	4b08      	ldr	r3, [pc, #32]	; (13e60 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   13e40:	4798      	blx	r3
   13e42:	bf00      	nop
   13e44:	3708      	adds	r7, #8
   13e46:	46bd      	mov	sp, r7
   13e48:	bd80      	pop	{r7, pc}
   13e4a:	bf00      	nop
   13e4c:	20002428 	.word	0x20002428
   13e50:	20002020 	.word	0x20002020
   13e54:	00013b05 	.word	0x00013b05
   13e58:	20000000 	.word	0x20000000
   13e5c:	00013b3d 	.word	0x00013b3d
   13e60:	00013f51 	.word	0x00013f51
   13e64:	200024bc 	.word	0x200024bc
   13e68:	20002040 	.word	0x20002040
   13e6c:	200025e0 	.word	0x200025e0
   13e70:	20002060 	.word	0x20002060
   13e74:	200024dc 	.word	0x200024dc
   13e78:	20002080 	.word	0x20002080
   13e7c:	200025a0 	.word	0x200025a0
   13e80:	200020a0 	.word	0x200020a0
   13e84:	200025c0 	.word	0x200025c0
   13e88:	200020c0 	.word	0x200020c0
   13e8c:	20002498 	.word	0x20002498
   13e90:	200020e0 	.word	0x200020e0
   13e94:	20002538 	.word	0x20002538
   13e98:	20002100 	.word	0x20002100

00013e9c <_GLOBAL__sub_I_ptrTimerClass>:
   13e9c:	b580      	push	{r7, lr}
   13e9e:	af00      	add	r7, sp, #0
   13ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13ea4:	2001      	movs	r0, #1
   13ea6:	4b01      	ldr	r3, [pc, #4]	; (13eac <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   13ea8:	4798      	blx	r3
   13eaa:	bd80      	pop	{r7, pc}
   13eac:	00013d99 	.word	0x00013d99

00013eb0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   13eb0:	b580      	push	{r7, lr}
   13eb2:	b084      	sub	sp, #16
   13eb4:	af00      	add	r7, sp, #0
   13eb6:	60f8      	str	r0, [r7, #12]
   13eb8:	60b9      	str	r1, [r7, #8]
   13eba:	4613      	mov	r3, r2
   13ebc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   13ebe:	68fb      	ldr	r3, [r7, #12]
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	d004      	beq.n	13ece <io_write+0x1e>
   13ec4:	68bb      	ldr	r3, [r7, #8]
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d001      	beq.n	13ece <io_write+0x1e>
   13eca:	2301      	movs	r3, #1
   13ecc:	e000      	b.n	13ed0 <io_write+0x20>
   13ece:	2300      	movs	r3, #0
   13ed0:	f003 0301 	and.w	r3, r3, #1
   13ed4:	b2db      	uxtb	r3, r3
   13ed6:	2234      	movs	r2, #52	; 0x34
   13ed8:	4907      	ldr	r1, [pc, #28]	; (13ef8 <io_write+0x48>)
   13eda:	4618      	mov	r0, r3
   13edc:	4b07      	ldr	r3, [pc, #28]	; (13efc <io_write+0x4c>)
   13ede:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   13ee0:	68fb      	ldr	r3, [r7, #12]
   13ee2:	681b      	ldr	r3, [r3, #0]
   13ee4:	88fa      	ldrh	r2, [r7, #6]
   13ee6:	68b9      	ldr	r1, [r7, #8]
   13ee8:	68f8      	ldr	r0, [r7, #12]
   13eea:	4798      	blx	r3
   13eec:	4603      	mov	r3, r0
}
   13eee:	4618      	mov	r0, r3
   13ef0:	3710      	adds	r7, #16
   13ef2:	46bd      	mov	sp, r7
   13ef4:	bd80      	pop	{r7, pc}
   13ef6:	bf00      	nop
   13ef8:	00015370 	.word	0x00015370
   13efc:	000099f1 	.word	0x000099f1

00013f00 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   13f00:	b580      	push	{r7, lr}
   13f02:	b084      	sub	sp, #16
   13f04:	af00      	add	r7, sp, #0
   13f06:	60f8      	str	r0, [r7, #12]
   13f08:	60b9      	str	r1, [r7, #8]
   13f0a:	4613      	mov	r3, r2
   13f0c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   13f0e:	68fb      	ldr	r3, [r7, #12]
   13f10:	2b00      	cmp	r3, #0
   13f12:	d004      	beq.n	13f1e <io_read+0x1e>
   13f14:	68bb      	ldr	r3, [r7, #8]
   13f16:	2b00      	cmp	r3, #0
   13f18:	d001      	beq.n	13f1e <io_read+0x1e>
   13f1a:	2301      	movs	r3, #1
   13f1c:	e000      	b.n	13f20 <io_read+0x20>
   13f1e:	2300      	movs	r3, #0
   13f20:	f003 0301 	and.w	r3, r3, #1
   13f24:	b2db      	uxtb	r3, r3
   13f26:	223d      	movs	r2, #61	; 0x3d
   13f28:	4907      	ldr	r1, [pc, #28]	; (13f48 <io_read+0x48>)
   13f2a:	4618      	mov	r0, r3
   13f2c:	4b07      	ldr	r3, [pc, #28]	; (13f4c <io_read+0x4c>)
   13f2e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   13f30:	68fb      	ldr	r3, [r7, #12]
   13f32:	685b      	ldr	r3, [r3, #4]
   13f34:	88fa      	ldrh	r2, [r7, #6]
   13f36:	68b9      	ldr	r1, [r7, #8]
   13f38:	68f8      	ldr	r0, [r7, #12]
   13f3a:	4798      	blx	r3
   13f3c:	4603      	mov	r3, r0
}
   13f3e:	4618      	mov	r0, r3
   13f40:	3710      	adds	r7, #16
   13f42:	46bd      	mov	sp, r7
   13f44:	bd80      	pop	{r7, pc}
   13f46:	bf00      	nop
   13f48:	00015370 	.word	0x00015370
   13f4c:	000099f1 	.word	0x000099f1

00013f50 <__aeabi_atexit>:
   13f50:	460b      	mov	r3, r1
   13f52:	4601      	mov	r1, r0
   13f54:	4618      	mov	r0, r3
   13f56:	f000 b801 	b.w	13f5c <__cxa_atexit>
   13f5a:	bf00      	nop

00013f5c <__cxa_atexit>:
   13f5c:	4613      	mov	r3, r2
   13f5e:	460a      	mov	r2, r1
   13f60:	4601      	mov	r1, r0
   13f62:	2002      	movs	r0, #2
   13f64:	f000 b91e 	b.w	141a4 <__register_exitproc>

00013f68 <ffs>:
   13f68:	b140      	cbz	r0, 13f7c <ffs+0x14>
   13f6a:	2300      	movs	r3, #0
   13f6c:	fa40 f103 	asr.w	r1, r0, r3
   13f70:	1c5a      	adds	r2, r3, #1
   13f72:	07c9      	lsls	r1, r1, #31
   13f74:	4613      	mov	r3, r2
   13f76:	d5f9      	bpl.n	13f6c <ffs+0x4>
   13f78:	4610      	mov	r0, r2
   13f7a:	4770      	bx	lr
   13f7c:	4602      	mov	r2, r0
   13f7e:	4610      	mov	r0, r2
   13f80:	4770      	bx	lr
   13f82:	bf00      	nop

00013f84 <__libc_init_array>:
   13f84:	b570      	push	{r4, r5, r6, lr}
   13f86:	4e0f      	ldr	r6, [pc, #60]	; (13fc4 <__libc_init_array+0x40>)
   13f88:	4d0f      	ldr	r5, [pc, #60]	; (13fc8 <__libc_init_array+0x44>)
   13f8a:	1b76      	subs	r6, r6, r5
   13f8c:	10b6      	asrs	r6, r6, #2
   13f8e:	bf18      	it	ne
   13f90:	2400      	movne	r4, #0
   13f92:	d005      	beq.n	13fa0 <__libc_init_array+0x1c>
   13f94:	3401      	adds	r4, #1
   13f96:	f855 3b04 	ldr.w	r3, [r5], #4
   13f9a:	4798      	blx	r3
   13f9c:	42a6      	cmp	r6, r4
   13f9e:	d1f9      	bne.n	13f94 <__libc_init_array+0x10>
   13fa0:	4e0a      	ldr	r6, [pc, #40]	; (13fcc <__libc_init_array+0x48>)
   13fa2:	4d0b      	ldr	r5, [pc, #44]	; (13fd0 <__libc_init_array+0x4c>)
   13fa4:	1b76      	subs	r6, r6, r5
   13fa6:	f001 f9ef 	bl	15388 <_init>
   13faa:	10b6      	asrs	r6, r6, #2
   13fac:	bf18      	it	ne
   13fae:	2400      	movne	r4, #0
   13fb0:	d006      	beq.n	13fc0 <__libc_init_array+0x3c>
   13fb2:	3401      	adds	r4, #1
   13fb4:	f855 3b04 	ldr.w	r3, [r5], #4
   13fb8:	4798      	blx	r3
   13fba:	42a6      	cmp	r6, r4
   13fbc:	d1f9      	bne.n	13fb2 <__libc_init_array+0x2e>
   13fbe:	bd70      	pop	{r4, r5, r6, pc}
   13fc0:	bd70      	pop	{r4, r5, r6, pc}
   13fc2:	bf00      	nop
   13fc4:	00015394 	.word	0x00015394
   13fc8:	00015394 	.word	0x00015394
   13fcc:	000153b0 	.word	0x000153b0
   13fd0:	00015394 	.word	0x00015394

00013fd4 <memcpy>:
   13fd4:	4684      	mov	ip, r0
   13fd6:	ea41 0300 	orr.w	r3, r1, r0
   13fda:	f013 0303 	ands.w	r3, r3, #3
   13fde:	d16d      	bne.n	140bc <memcpy+0xe8>
   13fe0:	3a40      	subs	r2, #64	; 0x40
   13fe2:	d341      	bcc.n	14068 <memcpy+0x94>
   13fe4:	f851 3b04 	ldr.w	r3, [r1], #4
   13fe8:	f840 3b04 	str.w	r3, [r0], #4
   13fec:	f851 3b04 	ldr.w	r3, [r1], #4
   13ff0:	f840 3b04 	str.w	r3, [r0], #4
   13ff4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ff8:	f840 3b04 	str.w	r3, [r0], #4
   13ffc:	f851 3b04 	ldr.w	r3, [r1], #4
   14000:	f840 3b04 	str.w	r3, [r0], #4
   14004:	f851 3b04 	ldr.w	r3, [r1], #4
   14008:	f840 3b04 	str.w	r3, [r0], #4
   1400c:	f851 3b04 	ldr.w	r3, [r1], #4
   14010:	f840 3b04 	str.w	r3, [r0], #4
   14014:	f851 3b04 	ldr.w	r3, [r1], #4
   14018:	f840 3b04 	str.w	r3, [r0], #4
   1401c:	f851 3b04 	ldr.w	r3, [r1], #4
   14020:	f840 3b04 	str.w	r3, [r0], #4
   14024:	f851 3b04 	ldr.w	r3, [r1], #4
   14028:	f840 3b04 	str.w	r3, [r0], #4
   1402c:	f851 3b04 	ldr.w	r3, [r1], #4
   14030:	f840 3b04 	str.w	r3, [r0], #4
   14034:	f851 3b04 	ldr.w	r3, [r1], #4
   14038:	f840 3b04 	str.w	r3, [r0], #4
   1403c:	f851 3b04 	ldr.w	r3, [r1], #4
   14040:	f840 3b04 	str.w	r3, [r0], #4
   14044:	f851 3b04 	ldr.w	r3, [r1], #4
   14048:	f840 3b04 	str.w	r3, [r0], #4
   1404c:	f851 3b04 	ldr.w	r3, [r1], #4
   14050:	f840 3b04 	str.w	r3, [r0], #4
   14054:	f851 3b04 	ldr.w	r3, [r1], #4
   14058:	f840 3b04 	str.w	r3, [r0], #4
   1405c:	f851 3b04 	ldr.w	r3, [r1], #4
   14060:	f840 3b04 	str.w	r3, [r0], #4
   14064:	3a40      	subs	r2, #64	; 0x40
   14066:	d2bd      	bcs.n	13fe4 <memcpy+0x10>
   14068:	3230      	adds	r2, #48	; 0x30
   1406a:	d311      	bcc.n	14090 <memcpy+0xbc>
   1406c:	f851 3b04 	ldr.w	r3, [r1], #4
   14070:	f840 3b04 	str.w	r3, [r0], #4
   14074:	f851 3b04 	ldr.w	r3, [r1], #4
   14078:	f840 3b04 	str.w	r3, [r0], #4
   1407c:	f851 3b04 	ldr.w	r3, [r1], #4
   14080:	f840 3b04 	str.w	r3, [r0], #4
   14084:	f851 3b04 	ldr.w	r3, [r1], #4
   14088:	f840 3b04 	str.w	r3, [r0], #4
   1408c:	3a10      	subs	r2, #16
   1408e:	d2ed      	bcs.n	1406c <memcpy+0x98>
   14090:	320c      	adds	r2, #12
   14092:	d305      	bcc.n	140a0 <memcpy+0xcc>
   14094:	f851 3b04 	ldr.w	r3, [r1], #4
   14098:	f840 3b04 	str.w	r3, [r0], #4
   1409c:	3a04      	subs	r2, #4
   1409e:	d2f9      	bcs.n	14094 <memcpy+0xc0>
   140a0:	3204      	adds	r2, #4
   140a2:	d008      	beq.n	140b6 <memcpy+0xe2>
   140a4:	07d2      	lsls	r2, r2, #31
   140a6:	bf1c      	itt	ne
   140a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   140ac:	f800 3b01 	strbne.w	r3, [r0], #1
   140b0:	d301      	bcc.n	140b6 <memcpy+0xe2>
   140b2:	880b      	ldrh	r3, [r1, #0]
   140b4:	8003      	strh	r3, [r0, #0]
   140b6:	4660      	mov	r0, ip
   140b8:	4770      	bx	lr
   140ba:	bf00      	nop
   140bc:	2a08      	cmp	r2, #8
   140be:	d313      	bcc.n	140e8 <memcpy+0x114>
   140c0:	078b      	lsls	r3, r1, #30
   140c2:	d08d      	beq.n	13fe0 <memcpy+0xc>
   140c4:	f010 0303 	ands.w	r3, r0, #3
   140c8:	d08a      	beq.n	13fe0 <memcpy+0xc>
   140ca:	f1c3 0304 	rsb	r3, r3, #4
   140ce:	1ad2      	subs	r2, r2, r3
   140d0:	07db      	lsls	r3, r3, #31
   140d2:	bf1c      	itt	ne
   140d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   140d8:	f800 3b01 	strbne.w	r3, [r0], #1
   140dc:	d380      	bcc.n	13fe0 <memcpy+0xc>
   140de:	f831 3b02 	ldrh.w	r3, [r1], #2
   140e2:	f820 3b02 	strh.w	r3, [r0], #2
   140e6:	e77b      	b.n	13fe0 <memcpy+0xc>
   140e8:	3a04      	subs	r2, #4
   140ea:	d3d9      	bcc.n	140a0 <memcpy+0xcc>
   140ec:	3a01      	subs	r2, #1
   140ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   140f2:	f800 3b01 	strb.w	r3, [r0], #1
   140f6:	d2f9      	bcs.n	140ec <memcpy+0x118>
   140f8:	780b      	ldrb	r3, [r1, #0]
   140fa:	7003      	strb	r3, [r0, #0]
   140fc:	784b      	ldrb	r3, [r1, #1]
   140fe:	7043      	strb	r3, [r0, #1]
   14100:	788b      	ldrb	r3, [r1, #2]
   14102:	7083      	strb	r3, [r0, #2]
   14104:	4660      	mov	r0, ip
   14106:	4770      	bx	lr

00014108 <memset>:
   14108:	b470      	push	{r4, r5, r6}
   1410a:	0786      	lsls	r6, r0, #30
   1410c:	d046      	beq.n	1419c <memset+0x94>
   1410e:	1e54      	subs	r4, r2, #1
   14110:	2a00      	cmp	r2, #0
   14112:	d041      	beq.n	14198 <memset+0x90>
   14114:	b2ca      	uxtb	r2, r1
   14116:	4603      	mov	r3, r0
   14118:	e002      	b.n	14120 <memset+0x18>
   1411a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1411e:	d33b      	bcc.n	14198 <memset+0x90>
   14120:	f803 2b01 	strb.w	r2, [r3], #1
   14124:	079d      	lsls	r5, r3, #30
   14126:	d1f8      	bne.n	1411a <memset+0x12>
   14128:	2c03      	cmp	r4, #3
   1412a:	d92e      	bls.n	1418a <memset+0x82>
   1412c:	b2cd      	uxtb	r5, r1
   1412e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   14132:	2c0f      	cmp	r4, #15
   14134:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   14138:	d919      	bls.n	1416e <memset+0x66>
   1413a:	f103 0210 	add.w	r2, r3, #16
   1413e:	4626      	mov	r6, r4
   14140:	3e10      	subs	r6, #16
   14142:	2e0f      	cmp	r6, #15
   14144:	f842 5c10 	str.w	r5, [r2, #-16]
   14148:	f842 5c0c 	str.w	r5, [r2, #-12]
   1414c:	f842 5c08 	str.w	r5, [r2, #-8]
   14150:	f842 5c04 	str.w	r5, [r2, #-4]
   14154:	f102 0210 	add.w	r2, r2, #16
   14158:	d8f2      	bhi.n	14140 <memset+0x38>
   1415a:	f1a4 0210 	sub.w	r2, r4, #16
   1415e:	f022 020f 	bic.w	r2, r2, #15
   14162:	f004 040f 	and.w	r4, r4, #15
   14166:	3210      	adds	r2, #16
   14168:	2c03      	cmp	r4, #3
   1416a:	4413      	add	r3, r2
   1416c:	d90d      	bls.n	1418a <memset+0x82>
   1416e:	461e      	mov	r6, r3
   14170:	4622      	mov	r2, r4
   14172:	3a04      	subs	r2, #4
   14174:	2a03      	cmp	r2, #3
   14176:	f846 5b04 	str.w	r5, [r6], #4
   1417a:	d8fa      	bhi.n	14172 <memset+0x6a>
   1417c:	1f22      	subs	r2, r4, #4
   1417e:	f022 0203 	bic.w	r2, r2, #3
   14182:	3204      	adds	r2, #4
   14184:	4413      	add	r3, r2
   14186:	f004 0403 	and.w	r4, r4, #3
   1418a:	b12c      	cbz	r4, 14198 <memset+0x90>
   1418c:	b2c9      	uxtb	r1, r1
   1418e:	441c      	add	r4, r3
   14190:	f803 1b01 	strb.w	r1, [r3], #1
   14194:	429c      	cmp	r4, r3
   14196:	d1fb      	bne.n	14190 <memset+0x88>
   14198:	bc70      	pop	{r4, r5, r6}
   1419a:	4770      	bx	lr
   1419c:	4614      	mov	r4, r2
   1419e:	4603      	mov	r3, r0
   141a0:	e7c2      	b.n	14128 <memset+0x20>
   141a2:	bf00      	nop

000141a4 <__register_exitproc>:
   141a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   141a8:	4d2c      	ldr	r5, [pc, #176]	; (1425c <__register_exitproc+0xb8>)
   141aa:	4606      	mov	r6, r0
   141ac:	6828      	ldr	r0, [r5, #0]
   141ae:	4698      	mov	r8, r3
   141b0:	460f      	mov	r7, r1
   141b2:	4691      	mov	r9, r2
   141b4:	f000 f882 	bl	142bc <__retarget_lock_acquire_recursive>
   141b8:	4b29      	ldr	r3, [pc, #164]	; (14260 <__register_exitproc+0xbc>)
   141ba:	681c      	ldr	r4, [r3, #0]
   141bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   141c0:	2b00      	cmp	r3, #0
   141c2:	d03e      	beq.n	14242 <__register_exitproc+0x9e>
   141c4:	685a      	ldr	r2, [r3, #4]
   141c6:	2a1f      	cmp	r2, #31
   141c8:	dc1c      	bgt.n	14204 <__register_exitproc+0x60>
   141ca:	f102 0e01 	add.w	lr, r2, #1
   141ce:	b176      	cbz	r6, 141ee <__register_exitproc+0x4a>
   141d0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   141d4:	2401      	movs	r4, #1
   141d6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   141da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   141de:	4094      	lsls	r4, r2
   141e0:	4320      	orrs	r0, r4
   141e2:	2e02      	cmp	r6, #2
   141e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   141e8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   141ec:	d023      	beq.n	14236 <__register_exitproc+0x92>
   141ee:	3202      	adds	r2, #2
   141f0:	f8c3 e004 	str.w	lr, [r3, #4]
   141f4:	6828      	ldr	r0, [r5, #0]
   141f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   141fa:	f000 f861 	bl	142c0 <__retarget_lock_release_recursive>
   141fe:	2000      	movs	r0, #0
   14200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14204:	4b17      	ldr	r3, [pc, #92]	; (14264 <__register_exitproc+0xc0>)
   14206:	b30b      	cbz	r3, 1424c <__register_exitproc+0xa8>
   14208:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1420c:	f3af 8000 	nop.w
   14210:	4603      	mov	r3, r0
   14212:	b1d8      	cbz	r0, 1424c <__register_exitproc+0xa8>
   14214:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   14218:	6002      	str	r2, [r0, #0]
   1421a:	2100      	movs	r1, #0
   1421c:	6041      	str	r1, [r0, #4]
   1421e:	460a      	mov	r2, r1
   14220:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   14224:	f04f 0e01 	mov.w	lr, #1
   14228:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1422c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   14230:	2e00      	cmp	r6, #0
   14232:	d0dc      	beq.n	141ee <__register_exitproc+0x4a>
   14234:	e7cc      	b.n	141d0 <__register_exitproc+0x2c>
   14236:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1423a:	430c      	orrs	r4, r1
   1423c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   14240:	e7d5      	b.n	141ee <__register_exitproc+0x4a>
   14242:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   14246:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1424a:	e7bb      	b.n	141c4 <__register_exitproc+0x20>
   1424c:	6828      	ldr	r0, [r5, #0]
   1424e:	f000 f837 	bl	142c0 <__retarget_lock_release_recursive>
   14252:	f04f 30ff 	mov.w	r0, #4294967295
   14256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1425a:	bf00      	nop
   1425c:	20000a30 	.word	0x20000a30
   14260:	00015384 	.word	0x00015384
   14264:	00000000 	.word	0x00000000

00014268 <register_fini>:
   14268:	4b02      	ldr	r3, [pc, #8]	; (14274 <register_fini+0xc>)
   1426a:	b113      	cbz	r3, 14272 <register_fini+0xa>
   1426c:	4802      	ldr	r0, [pc, #8]	; (14278 <register_fini+0x10>)
   1426e:	f000 b805 	b.w	1427c <atexit>
   14272:	4770      	bx	lr
   14274:	00000000 	.word	0x00000000
   14278:	00014289 	.word	0x00014289

0001427c <atexit>:
   1427c:	2300      	movs	r3, #0
   1427e:	4601      	mov	r1, r0
   14280:	461a      	mov	r2, r3
   14282:	4618      	mov	r0, r3
   14284:	f7ff bf8e 	b.w	141a4 <__register_exitproc>

00014288 <__libc_fini_array>:
   14288:	b538      	push	{r3, r4, r5, lr}
   1428a:	4c0a      	ldr	r4, [pc, #40]	; (142b4 <__libc_fini_array+0x2c>)
   1428c:	4d0a      	ldr	r5, [pc, #40]	; (142b8 <__libc_fini_array+0x30>)
   1428e:	1b64      	subs	r4, r4, r5
   14290:	10a4      	asrs	r4, r4, #2
   14292:	d00a      	beq.n	142aa <__libc_fini_array+0x22>
   14294:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   14298:	3b01      	subs	r3, #1
   1429a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1429e:	3c01      	subs	r4, #1
   142a0:	f855 3904 	ldr.w	r3, [r5], #-4
   142a4:	4798      	blx	r3
   142a6:	2c00      	cmp	r4, #0
   142a8:	d1f9      	bne.n	1429e <__libc_fini_array+0x16>
   142aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   142ae:	f001 b87f 	b.w	153b0 <_fini>
   142b2:	bf00      	nop
   142b4:	000153c0 	.word	0x000153c0
   142b8:	000153bc 	.word	0x000153bc

000142bc <__retarget_lock_acquire_recursive>:
   142bc:	4770      	bx	lr
   142be:	bf00      	nop

000142c0 <__retarget_lock_release_recursive>:
   142c0:	4770      	bx	lr
   142c2:	bf00      	nop

000142c4 <_ZTV20Compresor_Controller>:
	...
   142cc:	1f41 0000                                   A...

000142d0 <_ZTV28Compressor_CANOpen_Interface>:
	...
   142d8:	1f41 0000                                   A...

000142dc <_ZTV13CANOpen_Class>:
	...
   142e4:	1f41 0000                                   A...

000142e8 <_ZTV8CO_Class>:
	...
   142f0:	1f41 0000                                   A...

000142f4 <_ZTV15CO_Driver_Class>:
	...
   142fc:	1f41 0000                                   A...

00014300 <_ZL13OD_record1018>:
   14300:	01c8 2000 0005 0000 0001 0000 01cc 2000     ... ........... 
   14310:	0085 0000 0004 0000 01d0 2000 0085 0000     ........... ....
   14320:	0004 0000 01d4 2000 0085 0000 0004 0000     ....... ........
   14330:	01d8 2000 0085 0000 0004 0000               ... ........

0001433c <_ZL13OD_record1200>:
   1433c:	01e4 2000 0005 0000 0001 0000 01e8 2000     ... ........... 
   1434c:	0085 0000 0004 0000 01ec 2000 0085 0000     ........... ....
   1435c:	0004 0000                                   ....

00014360 <_ZL13OD_record1400>:
   14360:	01f0 2000 0005 0000 0001 0000 01f4 2000     ... ........... 
   14370:	008d 0000 0004 0000 01f8 2000 000d 0000     ........... ....
   14380:	0001 0000                                   ....

00014384 <_ZL13OD_record1401>:
   14384:	01fc 2000 0005 0000 0001 0000 0200 2000     ... ........... 
   14394:	008d 0000 0004 0000 0204 2000 000d 0000     ........... ....
   143a4:	0001 0000                                   ....

000143a8 <_ZL13OD_record1402>:
   143a8:	0208 2000 0005 0000 0001 0000 020c 2000     ... ........... 
   143b8:	008d 0000 0004 0000 0210 2000 000d 0000     ........... ....
   143c8:	0001 0000                                   ....

000143cc <_ZL13OD_record1403>:
   143cc:	0214 2000 0005 0000 0001 0000 0218 2000     ... ........... 
   143dc:	008d 0000 0004 0000 021c 2000 000d 0000     ........... ....
   143ec:	0001 0000                                   ....

000143f0 <_ZL13OD_record1600>:
   143f0:	0220 2000 000d 0000 0001 0000 0224 2000      .. ........$.. 
   14400:	008d 0000 0004 0000 0228 2000 008d 0000     ........(.. ....
   14410:	0004 0000 022c 2000 008d 0000 0004 0000     ....,.. ........
   14420:	0230 2000 008d 0000 0004 0000 0234 2000     0.. ........4.. 
   14430:	008d 0000 0004 0000 0238 2000 008d 0000     ........8.. ....
   14440:	0004 0000 023c 2000 008d 0000 0004 0000     ....<.. ........
   14450:	0240 2000 008d 0000 0004 0000               @.. ........

0001445c <_ZL13OD_record1601>:
   1445c:	0244 2000 000d 0000 0001 0000 0248 2000     D.. ........H.. 
   1446c:	008d 0000 0004 0000 024c 2000 008d 0000     ........L.. ....
   1447c:	0004 0000 0250 2000 008d 0000 0004 0000     ....P.. ........
   1448c:	0254 2000 008d 0000 0004 0000 0258 2000     T.. ........X.. 
   1449c:	008d 0000 0004 0000 025c 2000 008d 0000     ........\.. ....
   144ac:	0004 0000 0260 2000 008d 0000 0004 0000     ....`.. ........
   144bc:	0264 2000 008d 0000 0004 0000               d.. ........

000144c8 <_ZL13OD_record1602>:
   144c8:	0268 2000 000d 0000 0001 0000 026c 2000     h.. ........l.. 
   144d8:	008d 0000 0004 0000 0270 2000 008d 0000     ........p.. ....
   144e8:	0004 0000 0274 2000 008d 0000 0004 0000     ....t.. ........
   144f8:	0278 2000 008d 0000 0004 0000 027c 2000     x.. ........|.. 
   14508:	008d 0000 0004 0000 0280 2000 008d 0000     ........... ....
   14518:	0004 0000 0284 2000 008d 0000 0004 0000     ....... ........
   14528:	0288 2000 008d 0000 0004 0000               ... ........

00014534 <_ZL13OD_record1603>:
   14534:	028c 2000 000d 0000 0001 0000 0290 2000     ... ........... 
   14544:	008d 0000 0004 0000 0294 2000 008d 0000     ........... ....
   14554:	0004 0000 0298 2000 008d 0000 0004 0000     ....... ........
   14564:	029c 2000 008d 0000 0004 0000 02a0 2000     ... ........... 
   14574:	008d 0000 0004 0000 02a4 2000 008d 0000     ........... ....
   14584:	0004 0000 02a8 2000 008d 0000 0004 0000     ....... ........
   14594:	02ac 2000 008d 0000 0004 0000               ... ........

000145a0 <_ZL13OD_record1800>:
   145a0:	02b0 2000 0005 0000 0001 0000 02b4 2000     ... ........... 
   145b0:	008d 0000 0004 0000 02b8 2000 000d 0000     ........... ....
   145c0:	0001 0000 02bc 2000 008d 0000 0002 0000     ....... ........
   145d0:	02c0 2000 000d 0000 0001 0000 02c4 2000     ... ........... 
   145e0:	008d 0000 0002 0000 02c8 2000 000d 0000     ........... ....
   145f0:	0001 0000                                   ....

000145f4 <_ZL13OD_record1801>:
   145f4:	02cc 2000 0005 0000 0001 0000 02d0 2000     ... ........... 
   14604:	008d 0000 0004 0000 02d4 2000 000d 0000     ........... ....
   14614:	0001 0000 02d8 2000 008d 0000 0002 0000     ....... ........
   14624:	02dc 2000 000d 0000 0001 0000 02e0 2000     ... ........... 
   14634:	008d 0000 0002 0000 02e4 2000 000d 0000     ........... ....
   14644:	0001 0000                                   ....

00014648 <_ZL13OD_record1802>:
   14648:	02e8 2000 0005 0000 0001 0000 02ec 2000     ... ........... 
   14658:	008d 0000 0004 0000 02f0 2000 000d 0000     ........... ....
   14668:	0001 0000 02f4 2000 008d 0000 0002 0000     ....... ........
   14678:	02f8 2000 000d 0000 0001 0000 02fc 2000     ... ........... 
   14688:	008d 0000 0002 0000 0300 2000 000d 0000     ........... ....
   14698:	0001 0000                                   ....

0001469c <_ZL13OD_record1803>:
   1469c:	0304 2000 0005 0000 0001 0000 0308 2000     ... ........... 
   146ac:	008d 0000 0004 0000 030c 2000 000d 0000     ........... ....
   146bc:	0001 0000 0310 2000 008d 0000 0002 0000     ....... ........
   146cc:	0314 2000 000d 0000 0001 0000 0318 2000     ... ........... 
   146dc:	008d 0000 0002 0000 031c 2000 000d 0000     ........... ....
   146ec:	0001 0000                                   ....

000146f0 <_ZL13OD_record1A00>:
   146f0:	0320 2000 000d 0000 0001 0000 0324 2000      .. ........$.. 
   14700:	008d 0000 0004 0000 0328 2000 008d 0000     ........(.. ....
   14710:	0004 0000 032c 2000 008d 0000 0004 0000     ....,.. ........
   14720:	0330 2000 008d 0000 0004 0000 0334 2000     0.. ........4.. 
   14730:	008d 0000 0004 0000 0338 2000 008d 0000     ........8.. ....
   14740:	0004 0000 033c 2000 008d 0000 0004 0000     ....<.. ........
   14750:	0340 2000 008d 0000 0004 0000               @.. ........

0001475c <_ZL13OD_record1A01>:
   1475c:	0344 2000 000d 0000 0001 0000 0348 2000     D.. ........H.. 
   1476c:	008d 0000 0004 0000 034c 2000 008d 0000     ........L.. ....
   1477c:	0004 0000 0350 2000 008d 0000 0004 0000     ....P.. ........
   1478c:	0354 2000 008d 0000 0004 0000 0358 2000     T.. ........X.. 
   1479c:	008d 0000 0004 0000 035c 2000 008d 0000     ........\.. ....
   147ac:	0004 0000 0360 2000 008d 0000 0004 0000     ....`.. ........
   147bc:	0364 2000 008d 0000 0004 0000               d.. ........

000147c8 <_ZL13OD_record1A02>:
   147c8:	0368 2000 000d 0000 0001 0000 036c 2000     h.. ........l.. 
   147d8:	008d 0000 0004 0000 0370 2000 008d 0000     ........p.. ....
   147e8:	0004 0000 0374 2000 008d 0000 0004 0000     ....t.. ........
   147f8:	0378 2000 008d 0000 0004 0000 037c 2000     x.. ........|.. 
   14808:	008d 0000 0004 0000 0380 2000 008d 0000     ........... ....
   14818:	0004 0000 0384 2000 008d 0000 0004 0000     ....... ........
   14828:	0388 2000 008d 0000 0004 0000               ... ........

00014834 <_ZL13OD_record1A03>:
   14834:	038c 2000 000d 0000 0001 0000 0390 2000     ... ........... 
   14844:	008d 0000 0004 0000 0394 2000 008d 0000     ........... ....
   14854:	0004 0000 0398 2000 008d 0000 0004 0000     ....... ........
   14864:	039c 2000 008d 0000 0004 0000 03a0 2000     ... ........... 
   14874:	008d 0000 0004 0000 03a4 2000 008d 0000     ........... ....
   14884:	0004 0000 03a8 2000 008d 0000 0004 0000     ....... ........
   14894:	03ac 2000 008d 0000 0004 0000               ... ........

000148a0 <_ZL13OD_record2120>:
   148a0:	0098 2000 0006 0000 0001 0000 00a0 2000     ... ........... 
   148b0:	00be 0000 0008 0000 00a8 2000 00be 0000     ........... ....
   148c0:	0008 0000 00b0 2000 00be 0000 0004 0000     ....... ........
   148d0:	00b8 2000 00be 0000 0008 0000 0000 0000     ... ............
   148e0:	000e 0000 0000 0000                         ........

000148e8 <_ZL13OD_record2130>:
   148e8:	00c8 2000 0006 0000 0001 0000 00c9 2000     ... ........... 
   148f8:	0006 0000 001e 0000 00e8 2000 008e 0000     ........... ....
   14908:	0008 0000 00f0 2000 00be 0000 0004 0000     ....... ........

00014918 <CO_ObjDict>:
   14918:	1000 0000 0000 0000 0085 0000 0004 0000     ................
   14928:	0188 2000 1001 0000 0000 0000 0036 0000     ... ........6...
   14938:	0001 0000 000c 2000 1002 0000 0000 0000     ....... ........
   14948:	00b6 0000 0004 0000 0010 2000 1003 0000     ........... ....
   14958:	0008 0000 008e 0000 0004 0000 0014 2000     ............... 
   14968:	1005 0000 0000 0000 008d 0000 0004 0000     ................
   14978:	018c 2000 1006 0000 0000 0000 008d 0000     ... ............
   14988:	0004 0000 0190 2000 1007 0000 0000 0000     ....... ........
   14998:	008d 0000 0004 0000 0194 2000 1008 0000     ........... ....
   149a8:	0000 0000 0005 0000 000b 0000 0198 2000     ............... 
   149b8:	1009 0000 0000 0000 0005 0000 0004 0000     ................
   149c8:	01a3 2000 100a 0000 0000 0000 0005 0000     ... ............
   149d8:	0004 0000 01a7 2000 1010 0000 0001 0000     ....... ........
   149e8:	008e 0000 0004 0000 0034 2000 1011 0000     ........4.. ....
   149f8:	0001 0000 008e 0000 0004 0000 0038 2000     ............8.. 
   14a08:	1014 0000 0000 0000 0085 0000 0004 0000     ................
   14a18:	01ac 2000 1015 0000 0000 0000 008d 0000     ... ............
   14a28:	0002 0000 01b0 2000 1016 0000 0004 0000     ....... ........
   14a38:	008d 0000 0004 0000 01b4 2000 1017 0000     ........... ....
   14a48:	0000 0000 008d 0000 0002 0000 01c4 2000     ............... 
   14a58:	1018 0000 0004 0000 0000 0000 0000 0000     ................
   14a68:	4300 0001 1019 0000 0000 0000 000d 0000     .C..............
   14a78:	0001 0000 01dc 2000 1029 0000 0006 0000     ....... ).......
   14a88:	000d 0000 0001 0000 01dd 2000 1200 0000     ........... ....
   14a98:	0002 0000 0000 0000 0000 0000 433c 0001     ............<C..
   14aa8:	1400 0000 0002 0000 0000 0000 0000 0000     ................
   14ab8:	4360 0001 1401 0000 0002 0000 0000 0000     `C..............
   14ac8:	0000 0000 4384 0001 1402 0000 0002 0000     .....C..........
	...
   14ae0:	43a8 0001 1403 0000 0002 0000 0000 0000     .C..............
   14af0:	0000 0000 43cc 0001 1600 0000 0008 0000     .....C..........
	...
   14b08:	43f0 0001 1601 0000 0008 0000 0000 0000     .C..............
   14b18:	0000 0000 445c 0001 1602 0000 0008 0000     ....\D..........
	...
   14b30:	44c8 0001 1603 0000 0008 0000 0000 0000     .D..............
   14b40:	0000 0000 4534 0001 1800 0000 0006 0000     ....4E..........
	...
   14b58:	45a0 0001 1801 0000 0006 0000 0000 0000     .E..............
   14b68:	0000 0000 45f4 0001 1802 0000 0006 0000     .....E..........
	...
   14b80:	4648 0001 1803 0000 0006 0000 0000 0000     HF..............
   14b90:	0000 0000 469c 0001 1a00 0000 0008 0000     .....F..........
	...
   14ba8:	46f0 0001 1a01 0000 0008 0000 0000 0000     .F..............
   14bb8:	0000 0000 475c 0001 1a02 0000 0008 0000     ....\G..........
	...
   14bd0:	47c8 0001 1a03 0000 0008 0000 0000 0000     .G..............
   14be0:	0000 0000 4834 0001 1f80 0000 0000 0000     ....4H..........
   14bf0:	008d 0000 0004 0000 03b0 2000 2100 0000     ........... .!..
   14c00:	0000 0000 0036 0000 000a 0000 003c 2000     ....6.......<.. 
   14c10:	2101 0000 0000 0000 000d 0000 0001 0000     .!..............
   14c20:	03b4 2000 2102 0000 0000 0000 008d 0000     ... .!..........
   14c30:	0002 0000 03b6 2000 2103 0000 0000 0000     ....... .!......
   14c40:	008e 0000 0002 0000 0046 2000 2104 0000     ........F.. .!..
   14c50:	0000 0000 0086 0000 0002 0000 0048 2000     ............H.. 
   14c60:	2106 0000 0000 0000 0087 0000 0004 0000     .!..............
   14c70:	013c 2000 2107 0000 0005 0000 00be 0000     <.. .!..........
   14c80:	0002 0000 004a 2000 2108 0000 0001 0000     ....J.. .!......
   14c90:	00b6 0000 0002 0000 0054 2000 2109 0000     ........T.. .!..
   14ca0:	0001 0000 00b6 0000 0002 0000 0056 2000     ............V.. 
   14cb0:	2110 0000 0010 0000 00fe 0000 0004 0000     .!..............
   14cc0:	0058 2000 2111 0000 0010 0000 00fd 0000     X.. .!..........
   14cd0:	0004 0000 03b8 2000 2112 0000 0010 0000     ....... .!......
   14ce0:	00ff 0000 0004 0000 0140 2000 2120 0000     ........@..  !..
   14cf0:	0005 0000 0000 0000 0000 0000 48a0 0001     .............H..
   14d00:	2130 0000 0003 0000 0000 0000 0000 0000     0!..............
   14d10:	48e8 0001 6000 0000 0008 0000 0076 0000     .H...`......v...
   14d20:	0001 0000 00f8 2000 6200 0000 0008 0000     ....... .b......
   14d30:	003e 0000 0001 0000 0100 2000 6401 0000     >.......... .d..
   14d40:	000c 0000 00b6 0000 0002 0000 0108 2000     ............... 
   14d50:	6411 0000 0008 0000 00be 0000 0002 0000     .d..............
   14d60:	0120 2000                                    .. 

00014d64 <_ZL17crc16_ccitt_table>:
   14d64:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   14d74:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   14d84:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   14d94:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   14da4:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   14db4:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   14dc4:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   14dd4:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   14de4:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   14df4:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   14e04:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   14e14:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   14e24:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   14e34:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   14e44:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   14e54:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   14e64:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   14e74:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   14e84:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   14e94:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   14ea4:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   14eb4:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   14ec4:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   14ed4:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   14ee4:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   14ef4:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   14f04:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   14f14:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   14f24:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   14f34:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   14f44:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   14f54:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....
   14f64:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   14f74:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   14f84:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   14f94:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   14fa4:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   14fb4:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   14fc4:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   14fd4:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   14fe4:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   14ff4:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   15004:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
   15014:	6372 682f 6c61 705f 6d77 632e 0000 0000     rc/hal_pwm.c....
   15024:	2e2e 682f 6c61 732f 6372 682f 6c61 715f     ../hal/src/hal_q
   15034:	7073 5f69 7973 636e 632e 0000 2e2e 682f     spi_sync.c..../h
   15044:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
   15054:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
   15064:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
   15074:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
   15084:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...
   15094:	0100 0302 0504 0706 0c08 1410 2018 4030     ............. 0@

000150a4 <_map>:
   150a4:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   150b4:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   150c4:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   150d4:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   150e4:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   150f4:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00015104 <user_mux_confs>:
   15104:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00015148 <channel_confs>:
   15148:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00015188 <interrupt_cfg>:
	...
   15208:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   15218:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   15228:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   15238:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   15248:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   15258:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   15268:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00015274 <sercomspi_regs>:
   15274:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   15284:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   15294:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   152a4:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   152b4:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   152c4:	1400 4300 1800 4300                         ...C...C

000152cc <_usb_ep_cfgs>:
   152cc:	1b24 2000 0000 0000 0040 0000 1b64 2000     $.. ....@...d.. 
   152dc:	1ba4 2000 0040 0040 1be4 2000 1c24 2000     ... @.@.... $.. 
   152ec:	0040 0040 1c64 2000 1ca4 2000 0040 0040     @.@.d.. ... @.@.
   152fc:	1ce4 2000 1d24 2000 0040 0040 0804 0000     ... $.. @.@.....
   1530c:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   1531c:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   1532c:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   1533c:	625f 7361 2e65 0068                         _base.h.

00015344 <n25q256a_interface>:
   15344:	1e45 0001 1ee9 0001 1ff9 0001 21b1 0001     E............!..
   15354:	2241 0001 2e2e 752f 6273 642f 7665 6369     A"..../usb/devic
   15364:	2f65 7375 6462 2e63 0063 0000 2e2e 682f     e/usbdc.c...../h
   15374:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

00015384 <_global_impure_ptr>:
   15384:	0608 2000                                   ... 

00015388 <_init>:
   15388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1538a:	bf00      	nop
   1538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1538e:	bc08      	pop	{r3}
   15390:	469e      	mov	lr, r3
   15392:	4770      	bx	lr

00015394 <__init_array_start>:
   15394:	00014269 	.word	0x00014269

00015398 <__frame_dummy_init_array_entry>:
   15398:	00000289 00000355 000004bd 00000639     ....U.......9...
   153a8:	00000819 00013e9d                       .....>..

000153b0 <_fini>:
   153b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153b2:	bf00      	nop
   153b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   153b6:	bc08      	pop	{r3}
   153b8:	469e      	mov	lr, r3
   153ba:	4770      	bx	lr

000153bc <__fini_array_start>:
   153bc:	00000265 	.word	0x00000265
