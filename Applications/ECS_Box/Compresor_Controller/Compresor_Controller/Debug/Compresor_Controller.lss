
Compresor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012d0c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012d0c  00012d0c  00022d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a34  20000000  00012d14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a34  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a34  2**0
                  CONTENTS
  5 .bss          00001d8c  20000a34  00013748  00030a34  2**2
                  ALLOC
  6 .stack        00010000  200027c0  000154d4  00030a34  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a34  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a62  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008348c  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a83b  00000000  00000000  000b3f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b32a  00000000  00000000  000be782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000030e8  00000000  00000000  000d9aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d60  00000000  00000000  000dcb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000503aa  00000000  00000000  000df8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f09d  00000000  00000000  0012fc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013ce72  00000000  00000000  0016ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cd14  00000000  00000000  002abbb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 27 01 20 19 0b 00 00 9d 0b 00 00 9d 0b 00 00     .'. ............
      10:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 00 00 00 00     ................
	...
      2c:	9d 0b 00 00 9d 0b 00 00 00 00 00 00 9d 0b 00 00     ................
      3c:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      4c:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      5c:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      6c:	d5 9c 00 00 d9 8a 00 00 e9 8a 00 00 9d 0b 00 00     ................
      7c:	f9 8a 00 00 09 8b 00 00 19 8b 00 00 29 8b 00 00     ............)...
      8c:	39 8b 00 00 49 8b 00 00 59 8b 00 00 9d 0b 00 00     9...I...Y.......
      9c:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      ac:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      bc:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      cc:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
      dc:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 00 00 00 00     ................
	...
      f4:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     104:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     114:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     124:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     134:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     144:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     154:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     164:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     174:	9d 0b 00 00 9d 0b 00 00 f5 7f 00 00 bd eb 00 00     ................
     184:	cd eb 00 00 dd eb 00 00 ed eb 00 00 9d 0b 00 00     ................
     194:	51 b6 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     Q...............
     1a4:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 6d b6 00 00     ............m...
     1b4:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     1c4:	89 b6 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     1d4:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     1e4:	9d 0b 00 00 9d 0b 00 00 0d c3 00 00 9d 0b 00 00     ................
     1f4:	29 c3 00 00 9d 0b 00 00 45 c3 00 00 61 c3 00 00     ).......E...a...
     204:	7d c3 00 00 99 c3 00 00 9d 0b 00 00 9d 0b 00 00     }...............
     214:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     224:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     234:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     244:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................
     254:	9d 0b 00 00 9d 0b 00 00 9d 0b 00 00 9d 0b 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a34 	.word	0x20000a34
     280:	00000000 	.word	0x00000000
     284:	00012d14 	.word	0x00012d14

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00012d14 	.word	0x00012d14
     2c4:	20000a38 	.word	0x20000a38
     2c8:	00012d14 	.word	0x00012d14
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN20Compresor_ControllerC1Ev>:


#include "Compresor_Controller.h"

// default constructor
Compresor_Controller::Compresor_Controller()
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	f503 73ca 	add.w	r3, r3, #404	; 0x194
     2de:	4618      	mov	r0, r3
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <_ZN20Compresor_ControllerC1Ev+0x2c>)
     2e2:	4798      	blx	r3
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	4618      	mov	r0, r3
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <_ZN20Compresor_ControllerC1Ev+0x30>)
     2ea:	4798      	blx	r3
     2ec:	4a05      	ldr	r2, [pc, #20]	; (304 <_ZN20Compresor_ControllerC1Ev+0x34>)
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	4618      	mov	r0, r3
     2f6:	3708      	adds	r7, #8
     2f8:	46bd      	mov	sp, r7
     2fa:	bd80      	pop	{r7, pc}
     2fc:	000004fd 	.word	0x000004fd
     300:	00000731 	.word	0x00000731
     304:	00011e10 	.word	0x00011e10

00000308 <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
     310:	4a08      	ldr	r2, [pc, #32]	; (334 <_ZN20Compresor_ControllerD1Ev+0x2c>)
     312:	687b      	ldr	r3, [r7, #4]
     314:	601a      	str	r2, [r3, #0]
     316:	687b      	ldr	r3, [r7, #4]
     318:	4618      	mov	r0, r3
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <_ZN20Compresor_ControllerD1Ev+0x30>)
     31c:	4798      	blx	r3
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f503 73ca 	add.w	r3, r3, #404	; 0x194
     324:	4618      	mov	r0, r3
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <_ZN20Compresor_ControllerD1Ev+0x34>)
     328:	4798      	blx	r3
{
} //~Compresor_Controller
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	4618      	mov	r0, r3
     32e:	3708      	adds	r7, #8
     330:	46bd      	mov	sp, r7
     332:	bd80      	pop	{r7, pc}
     334:	00011e10 	.word	0x00011e10
     338:	0000076d 	.word	0x0000076d
     33c:	0000051d 	.word	0x0000051d

00000340 <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	isOK=InitExpander();
     348:	687b      	ldr	r3, [r7, #4]
     34a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
     34e:	4618      	mov	r0, r3
     350:	4b12      	ldr	r3, [pc, #72]	; (39c <_ZN20Compresor_Controller4InitEv+0x5c>)
     352:	4798      	blx	r3
     354:	4603      	mov	r3, r0
     356:	461a      	mov	r2, r3
     358:	687b      	ldr	r3, [r7, #4]
     35a:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
	if (isOK)
     35e:	687b      	ldr	r3, [r7, #4]
     360:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
     364:	b2db      	uxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	d00f      	beq.n	38a <_ZN20Compresor_Controller4InitEv+0x4a>
	{
		if (InitCANOpen())
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	4618      	mov	r0, r3
     36e:	4b0c      	ldr	r3, [pc, #48]	; (3a0 <_ZN20Compresor_Controller4InitEv+0x60>)
     370:	4798      	blx	r3
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	d008      	beq.n	38a <_ZN20Compresor_Controller4InitEv+0x4a>
		{
			canopen_driver->canopen_ready=true;
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <_ZN20Compresor_Controller4InitEv+0x64>)
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	2201      	movs	r2, #1
     37e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			isOK=true;
     382:	687b      	ldr	r3, [r7, #4]
     384:	2201      	movs	r2, #1
     386:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
		}
	} 
	else
	{
	}
	return isOK;
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
     390:	b2db      	uxtb	r3, r3
}
     392:	4618      	mov	r0, r3
     394:	3708      	adds	r7, #8
     396:	46bd      	mov	sp, r7
     398:	bd80      	pop	{r7, pc}
     39a:	bf00      	nop
     39c:	00000531 	.word	0x00000531
     3a0:	00000795 	.word	0x00000795
     3a4:	200019e4 	.word	0x200019e4

000003a8 <_Z41__static_initialization_and_destruction_0ii>:
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	2b01      	cmp	r3, #1
     3b6:	d15d      	bne.n	474 <_Z41__static_initialization_and_destruction_0ii+0xcc>
     3b8:	683b      	ldr	r3, [r7, #0]
     3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3be:	4293      	cmp	r3, r2
     3c0:	d158      	bne.n	474 <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     3c2:	492e      	ldr	r1, [pc, #184]	; (47c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     3c4:	482e      	ldr	r0, [pc, #184]	; (480 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     3c6:	4b2f      	ldr	r3, [pc, #188]	; (484 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     3c8:	4798      	blx	r3
     3ca:	4a2f      	ldr	r2, [pc, #188]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     3cc:	492f      	ldr	r1, [pc, #188]	; (48c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     3ce:	482c      	ldr	r0, [pc, #176]	; (480 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     3d0:	4b2f      	ldr	r3, [pc, #188]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     3d2:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     3d4:	492f      	ldr	r1, [pc, #188]	; (494 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     3d6:	4830      	ldr	r0, [pc, #192]	; (498 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     3d8:	4b30      	ldr	r3, [pc, #192]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     3da:	4798      	blx	r3
     3dc:	4a2a      	ldr	r2, [pc, #168]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     3de:	4930      	ldr	r1, [pc, #192]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     3e0:	482d      	ldr	r0, [pc, #180]	; (498 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     3e2:	4b2b      	ldr	r3, [pc, #172]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     3e4:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     3e6:	492f      	ldr	r1, [pc, #188]	; (4a4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     3e8:	482f      	ldr	r0, [pc, #188]	; (4a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     3ea:	4b2c      	ldr	r3, [pc, #176]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     3ec:	4798      	blx	r3
     3ee:	4a26      	ldr	r2, [pc, #152]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     3f0:	492b      	ldr	r1, [pc, #172]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     3f2:	482d      	ldr	r0, [pc, #180]	; (4a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     3f4:	4b26      	ldr	r3, [pc, #152]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     3f6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     3f8:	492c      	ldr	r1, [pc, #176]	; (4ac <_Z41__static_initialization_and_destruction_0ii+0x104>)
     3fa:	482d      	ldr	r0, [pc, #180]	; (4b0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     3fc:	4b27      	ldr	r3, [pc, #156]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     3fe:	4798      	blx	r3
     400:	4a21      	ldr	r2, [pc, #132]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     402:	4927      	ldr	r1, [pc, #156]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     404:	482a      	ldr	r0, [pc, #168]	; (4b0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     406:	4b22      	ldr	r3, [pc, #136]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     408:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     40a:	492a      	ldr	r1, [pc, #168]	; (4b4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     40c:	482a      	ldr	r0, [pc, #168]	; (4b8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     40e:	4b23      	ldr	r3, [pc, #140]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     410:	4798      	blx	r3
     412:	4a1d      	ldr	r2, [pc, #116]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     414:	4922      	ldr	r1, [pc, #136]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     416:	4828      	ldr	r0, [pc, #160]	; (4b8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     418:	4b1d      	ldr	r3, [pc, #116]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     41a:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     41c:	4927      	ldr	r1, [pc, #156]	; (4bc <_Z41__static_initialization_and_destruction_0ii+0x114>)
     41e:	4828      	ldr	r0, [pc, #160]	; (4c0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     420:	4b1e      	ldr	r3, [pc, #120]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     422:	4798      	blx	r3
     424:	4a18      	ldr	r2, [pc, #96]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     426:	491e      	ldr	r1, [pc, #120]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     428:	4825      	ldr	r0, [pc, #148]	; (4c0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     42a:	4b19      	ldr	r3, [pc, #100]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     42c:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     42e:	4925      	ldr	r1, [pc, #148]	; (4c4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     430:	4825      	ldr	r0, [pc, #148]	; (4c8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     432:	4b1a      	ldr	r3, [pc, #104]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     434:	4798      	blx	r3
     436:	4a14      	ldr	r2, [pc, #80]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     438:	4919      	ldr	r1, [pc, #100]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     43a:	4823      	ldr	r0, [pc, #140]	; (4c8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     43c:	4b14      	ldr	r3, [pc, #80]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     43e:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     440:	4922      	ldr	r1, [pc, #136]	; (4cc <_Z41__static_initialization_and_destruction_0ii+0x124>)
     442:	4823      	ldr	r0, [pc, #140]	; (4d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     444:	4b15      	ldr	r3, [pc, #84]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     446:	4798      	blx	r3
     448:	4a0f      	ldr	r2, [pc, #60]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     44a:	4915      	ldr	r1, [pc, #84]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     44c:	4820      	ldr	r0, [pc, #128]	; (4d0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     44e:	4b10      	ldr	r3, [pc, #64]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     450:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     452:	4920      	ldr	r1, [pc, #128]	; (4d4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     454:	4820      	ldr	r0, [pc, #128]	; (4d8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     456:	4b11      	ldr	r3, [pc, #68]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     458:	4798      	blx	r3
     45a:	4a0b      	ldr	r2, [pc, #44]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     45c:	4910      	ldr	r1, [pc, #64]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     45e:	481e      	ldr	r0, [pc, #120]	; (4d8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     460:	4b0b      	ldr	r3, [pc, #44]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     462:	4798      	blx	r3
     464:	481d      	ldr	r0, [pc, #116]	; (4dc <_Z41__static_initialization_and_destruction_0ii+0x134>)
     466:	4b1e      	ldr	r3, [pc, #120]	; (4e0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     468:	4798      	blx	r3
     46a:	4a07      	ldr	r2, [pc, #28]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     46c:	491d      	ldr	r1, [pc, #116]	; (4e4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     46e:	481b      	ldr	r0, [pc, #108]	; (4dc <_Z41__static_initialization_and_destruction_0ii+0x134>)
     470:	4b07      	ldr	r3, [pc, #28]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     472:	4798      	blx	r3
     474:	bf00      	nop
     476:	3708      	adds	r7, #8
     478:	46bd      	mov	sp, r7
     47a:	bd80      	pop	{r7, pc}
     47c:	20002638 	.word	0x20002638
     480:	20000a50 	.word	0x20000a50
     484:	00011059 	.word	0x00011059
     488:	20000000 	.word	0x20000000
     48c:	00011075 	.word	0x00011075
     490:	00011a95 	.word	0x00011a95
     494:	20002508 	.word	0x20002508
     498:	20000a68 	.word	0x20000a68
     49c:	00011649 	.word	0x00011649
     4a0:	00011681 	.word	0x00011681
     4a4:	2000259c 	.word	0x2000259c
     4a8:	20000a88 	.word	0x20000a88
     4ac:	200026c0 	.word	0x200026c0
     4b0:	20000aa8 	.word	0x20000aa8
     4b4:	200025bc 	.word	0x200025bc
     4b8:	20000ac8 	.word	0x20000ac8
     4bc:	20002680 	.word	0x20002680
     4c0:	20000ae8 	.word	0x20000ae8
     4c4:	200026a0 	.word	0x200026a0
     4c8:	20000b08 	.word	0x20000b08
     4cc:	20002578 	.word	0x20002578
     4d0:	20000b28 	.word	0x20000b28
     4d4:	20002618 	.word	0x20002618
     4d8:	20000b48 	.word	0x20000b48
     4dc:	20000b68 	.word	0x20000b68
     4e0:	000002d1 	.word	0x000002d1
     4e4:	00000309 	.word	0x00000309

000004e8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
     4e8:	b580      	push	{r7, lr}
     4ea:	af00      	add	r7, sp, #0
     4ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
     4f0:	2001      	movs	r0, #1
     4f2:	4b01      	ldr	r3, [pc, #4]	; (4f8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
     4f4:	4798      	blx	r3
     4f6:	bd80      	pop	{r7, pc}
     4f8:	000003a9 	.word	0x000003a9

000004fc <_ZN23Compresor_I2C_InterfaceC1Ev>:

#include "Compresor_I2C_Interface.h"

static	MCP23008_Class expandersCompresorStatic;
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
     4fc:	b480      	push	{r7}
     4fe:	b083      	sub	sp, #12
     500:	af00      	add	r7, sp, #0
     502:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
     504:	687b      	ldr	r3, [r7, #4]
     506:	4a04      	ldr	r2, [pc, #16]	; (518 <_ZN23Compresor_I2C_InterfaceC1Ev+0x1c>)
     508:	60da      	str	r2, [r3, #12]
} //Compresor_I2C_Interface
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	4618      	mov	r0, r3
     50e:	370c      	adds	r7, #12
     510:	46bd      	mov	sp, r7
     512:	bc80      	pop	{r7}
     514:	4770      	bx	lr
     516:	bf00      	nop
     518:	20000d10 	.word	0x20000d10

0000051c <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
     51c:	b480      	push	{r7}
     51e:	b083      	sub	sp, #12
     520:	af00      	add	r7, sp, #0
     522:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
     524:	687b      	ldr	r3, [r7, #4]
     526:	4618      	mov	r0, r3
     528:	370c      	adds	r7, #12
     52a:	46bd      	mov	sp, r7
     52c:	bc80      	pop	{r7}
     52e:	4770      	bx	lr

00000530 <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
     530:	b580      	push	{r7, lr}
     532:	b082      	sub	sp, #8
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
     538:	687b      	ldr	r3, [r7, #4]
     53a:	68db      	ldr	r3, [r3, #12]
     53c:	7a1b      	ldrb	r3, [r3, #8]
     53e:	b2db      	uxtb	r3, r3
     540:	2b00      	cmp	r3, #0
     542:	d104      	bne.n	54e <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
     544:	687b      	ldr	r3, [r7, #4]
     546:	68db      	ldr	r3, [r3, #12]
     548:	4618      	mov	r0, r3
     54a:	4b17      	ldr	r3, [pc, #92]	; (5a8 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x78>)
     54c:	4798      	blx	r3
	}
	if (i2c->isOK)
     54e:	687b      	ldr	r3, [r7, #4]
     550:	68db      	ldr	r3, [r3, #12]
     552:	7a5b      	ldrb	r3, [r3, #9]
     554:	b2db      	uxtb	r3, r3
     556:	2b00      	cmp	r3, #0
     558:	d018      	beq.n	58c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x5c>
	{
		expander=&expandersCompresorStatic;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	4a13      	ldr	r2, [pc, #76]	; (5ac <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>)
     55e:	609a      	str	r2, [r3, #8]
		expander->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
     560:	687b      	ldr	r3, [r7, #4]
     562:	6898      	ldr	r0, [r3, #8]
     564:	687b      	ldr	r3, [r7, #4]
     566:	68db      	ldr	r3, [r3, #12]
     568:	461a      	mov	r2, r3
     56a:	2125      	movs	r1, #37	; 0x25
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x80>)
     56e:	4798      	blx	r3
		expander->SetPortInput(0xf0);
     570:	687b      	ldr	r3, [r7, #4]
     572:	689b      	ldr	r3, [r3, #8]
     574:	21f0      	movs	r1, #240	; 0xf0
     576:	4618      	mov	r0, r3
     578:	4b0e      	ldr	r3, [pc, #56]	; (5b4 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x84>)
     57a:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
     57c:	6878      	ldr	r0, [r7, #4]
     57e:	4b0e      	ldr	r3, [pc, #56]	; (5b8 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x88>)
     580:	4798      	blx	r3
     582:	4603      	mov	r3, r0
     584:	461a      	mov	r2, r3
     586:	687b      	ldr	r3, [r7, #4]
     588:	741a      	strb	r2, [r3, #16]
     58a:	e000      	b.n	58e <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x5e>
	}
	else
	{
		asm("nop");
     58c:	bf00      	nop
	}
	isOK=i2c->isOK;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	68db      	ldr	r3, [r3, #12]
     592:	7a5b      	ldrb	r3, [r3, #9]
     594:	b2da      	uxtb	r2, r3
     596:	687b      	ldr	r3, [r7, #4]
     598:	741a      	strb	r2, [r3, #16]
		return isOK;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	7c1b      	ldrb	r3, [r3, #16]
}
     59e:	4618      	mov	r0, r3
     5a0:	3708      	adds	r7, #8
     5a2:	46bd      	mov	sp, r7
     5a4:	bd80      	pop	{r7, pc}
     5a6:	bf00      	nop
     5a8:	00011089 	.word	0x00011089
     5ac:	20000d28 	.word	0x20000d28
     5b0:	0001123d 	.word	0x0001123d
     5b4:	000113a5 	.word	0x000113a5
     5b8:	00000669 	.word	0x00000669

000005bc <_ZN23Compresor_I2C_Interface9SetEnableEb>:
	uint8_t r=expander->ReadGPIORegister();
	
	return r;
	
}
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
     5bc:	b580      	push	{r7, lr}
     5be:	b082      	sub	sp, #8
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
     5c4:	460b      	mov	r3, r1
     5c6:	70fb      	strb	r3, [r7, #3]

	enabled=expander->WriteDigit(0,state);
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	689b      	ldr	r3, [r3, #8]
     5cc:	78fa      	ldrb	r2, [r7, #3]
     5ce:	2100      	movs	r1, #0
     5d0:	4618      	mov	r0, r3
     5d2:	4b06      	ldr	r3, [pc, #24]	; (5ec <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
     5d4:	4798      	blx	r3
     5d6:	4603      	mov	r3, r0
     5d8:	461a      	mov	r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	745a      	strb	r2, [r3, #17]
	return uint8_t(enabled);
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	7c5b      	ldrb	r3, [r3, #17]
}
     5e2:	4618      	mov	r0, r3
     5e4:	3708      	adds	r7, #8
     5e6:	46bd      	mov	sp, r7
     5e8:	bd80      	pop	{r7, pc}
     5ea:	bf00      	nop
     5ec:	00011511 	.word	0x00011511

000005f0 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
     5f0:	b580      	push	{r7, lr}
     5f2:	b084      	sub	sp, #16
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]

	uint8_t value=expander->ReadGPIORegister();
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	689b      	ldr	r3, [r3, #8]
     5fc:	4618      	mov	r0, r3
     5fe:	4b0a      	ldr	r3, [pc, #40]	; (628 <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
     600:	4798      	blx	r3
     602:	4603      	mov	r3, r0
     604:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
     606:	7bfb      	ldrb	r3, [r7, #15]
     608:	f003 0301 	and.w	r3, r3, #1
     60c:	2b00      	cmp	r3, #0
     60e:	bf14      	ite	ne
     610:	2301      	movne	r3, #1
     612:	2300      	moveq	r3, #0
     614:	b2da      	uxtb	r2, r3
     616:	687b      	ldr	r3, [r7, #4]
     618:	745a      	strb	r2, [r3, #17]
	return enabled;
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	7c5b      	ldrb	r3, [r3, #17]
}
     61e:	4618      	mov	r0, r3
     620:	3710      	adds	r7, #16
     622:	46bd      	mov	sp, r7
     624:	bd80      	pop	{r7, pc}
     626:	bf00      	nop
     628:	00011321 	.word	0x00011321

0000062c <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
     62c:	b580      	push	{r7, lr}
     62e:	b084      	sub	sp, #16
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]

	uint8_t value=expander->ReadGPIORegister();
     634:	687b      	ldr	r3, [r7, #4]
     636:	689b      	ldr	r3, [r3, #8]
     638:	4618      	mov	r0, r3
     63a:	4b0a      	ldr	r3, [pc, #40]	; (664 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
     63c:	4798      	blx	r3
     63e:	4603      	mov	r3, r0
     640:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
     642:	7bfb      	ldrb	r3, [r7, #15]
     644:	f003 0301 	and.w	r3, r3, #1
     648:	2b00      	cmp	r3, #0
     64a:	bf14      	ite	ne
     64c:	2301      	movne	r3, #1
     64e:	2300      	moveq	r3, #0
     650:	b2da      	uxtb	r2, r3
     652:	687b      	ldr	r3, [r7, #4]
     654:	745a      	strb	r2, [r3, #17]
	return &enabled;
     656:	687b      	ldr	r3, [r7, #4]
     658:	3311      	adds	r3, #17
}
     65a:	4618      	mov	r0, r3
     65c:	3710      	adds	r7, #16
     65e:	46bd      	mov	sp, r7
     660:	bd80      	pop	{r7, pc}
     662:	bf00      	nop
     664:	00011321 	.word	0x00011321

00000668 <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
     668:	b480      	push	{r7}
     66a:	b085      	sub	sp, #20
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
	bool result=true;
     670:	2301      	movs	r3, #1
     672:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
     674:	2300      	movs	r3, #0
     676:	73fb      	strb	r3, [r7, #15]
     678:	7bfb      	ldrb	r3, [r7, #15]
     67a:	2b03      	cmp	r3, #3
     67c:	dc03      	bgt.n	686 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
     67e:	7bfb      	ldrb	r3, [r7, #15]
     680:	3301      	adds	r3, #1
     682:	73fb      	strb	r3, [r7, #15]
     684:	e7f8      	b.n	678 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
     686:	7bbb      	ldrb	r3, [r7, #14]
     688:	4618      	mov	r0, r3
     68a:	3714      	adds	r7, #20
     68c:	46bd      	mov	sp, r7
     68e:	bc80      	pop	{r7}
     690:	4770      	bx	lr
	...

00000694 <_Z41__static_initialization_and_destruction_0ii>:
     694:	b580      	push	{r7, lr}
     696:	b082      	sub	sp, #8
     698:	af00      	add	r7, sp, #0
     69a:	6078      	str	r0, [r7, #4]
     69c:	6039      	str	r1, [r7, #0]
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2b01      	cmp	r3, #1
     6a2:	d115      	bne.n	6d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
     6a4:	683b      	ldr	r3, [r7, #0]
     6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     6aa:	4293      	cmp	r3, r2
     6ac:	d110      	bne.n	6d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
     6ae:	490a      	ldr	r1, [pc, #40]	; (6d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     6b0:	480a      	ldr	r0, [pc, #40]	; (6dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
     6b2:	4b0b      	ldr	r3, [pc, #44]	; (6e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     6b4:	4798      	blx	r3
     6b6:	4a0b      	ldr	r2, [pc, #44]	; (6e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     6b8:	490b      	ldr	r1, [pc, #44]	; (6e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     6ba:	4808      	ldr	r0, [pc, #32]	; (6dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
     6bc:	4b0b      	ldr	r3, [pc, #44]	; (6ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
     6be:	4798      	blx	r3
static	MCP23008_Class expandersCompresorStatic;
     6c0:	480b      	ldr	r0, [pc, #44]	; (6f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     6c2:	4b0c      	ldr	r3, [pc, #48]	; (6f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     6c4:	4798      	blx	r3
     6c6:	4a07      	ldr	r2, [pc, #28]	; (6e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     6c8:	490b      	ldr	r1, [pc, #44]	; (6f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     6ca:	4809      	ldr	r0, [pc, #36]	; (6f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     6cc:	4b07      	ldr	r3, [pc, #28]	; (6ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
     6ce:	4798      	blx	r3
     6d0:	bf00      	nop
     6d2:	3708      	adds	r7, #8
     6d4:	46bd      	mov	sp, r7
     6d6:	bd80      	pop	{r7, pc}
     6d8:	20002638 	.word	0x20002638
     6dc:	20000d10 	.word	0x20000d10
     6e0:	00011059 	.word	0x00011059
     6e4:	20000000 	.word	0x20000000
     6e8:	00011075 	.word	0x00011075
     6ec:	00011a95 	.word	0x00011a95
     6f0:	20000d28 	.word	0x20000d28
     6f4:	00011215 	.word	0x00011215
     6f8:	00011229 	.word	0x00011229

000006fc <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
     6fc:	b580      	push	{r7, lr}
     6fe:	af00      	add	r7, sp, #0
     700:	f64f 71ff 	movw	r1, #65535	; 0xffff
     704:	2001      	movs	r0, #1
     706:	4b01      	ldr	r3, [pc, #4]	; (70c <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
     708:	4798      	blx	r3
     70a:	bd80      	pop	{r7, pc}
     70c:	00000695 	.word	0x00000695

00000710 <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
     710:	b480      	push	{r7}
     712:	b083      	sub	sp, #12
     714:	af00      	add	r7, sp, #0
     716:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
     718:	4b04      	ldr	r3, [pc, #16]	; (72c <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
     71a:	2201      	movs	r2, #1
     71c:	701a      	strb	r2, [r3, #0]
	asm("nop" );
     71e:	bf00      	nop
}
     720:	bf00      	nop
     722:	370c      	adds	r7, #12
     724:	46bd      	mov	sp, r7
     726:	bc80      	pop	{r7}
     728:	4770      	bx	lr
     72a:	bf00      	nop
     72c:	20000fd4 	.word	0x20000fd4

00000730 <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
     730:	b580      	push	{r7, lr}
     732:	b082      	sub	sp, #8
     734:	af00      	add	r7, sp, #0
     736:	6078      	str	r0, [r7, #4]
     738:	687b      	ldr	r3, [r7, #4]
     73a:	4618      	mov	r0, r3
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
     73e:	4798      	blx	r3
     740:	4a08      	ldr	r2, [pc, #32]	; (764 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
     742:	687b      	ldr	r3, [r7, #4]
     744:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     746:	687b      	ldr	r3, [r7, #4]
     748:	4a07      	ldr	r2, [pc, #28]	; (768 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
     74a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     74e:	687b      	ldr	r3, [r7, #4]
     750:	2201      	movs	r2, #1
     752:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
} //Compressor_Can_Interface
     756:	687b      	ldr	r3, [r7, #4]
     758:	4618      	mov	r0, r3
     75a:	3708      	adds	r7, #8
     75c:	46bd      	mov	sp, r7
     75e:	bd80      	pop	{r7, pc}
     760:	00000e91 	.word	0x00000e91
     764:	00011e1c 	.word	0x00011e1c
     768:	20000fd4 	.word	0x20000fd4

0000076c <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
     774:	4a05      	ldr	r2, [pc, #20]	; (78c <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
     776:	687b      	ldr	r3, [r7, #4]
     778:	601a      	str	r2, [r3, #0]
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	4618      	mov	r0, r3
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
     780:	4798      	blx	r3
{
} //~Compressor_Can_Interface
     782:	687b      	ldr	r3, [r7, #4]
     784:	4618      	mov	r0, r3
     786:	3708      	adds	r7, #8
     788:	46bd      	mov	sp, r7
     78a:	bd80      	pop	{r7, pc}
     78c:	00011e1c 	.word	0x00011e1c
     790:	00000f01 	.word	0x00000f01

00000794 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
     794:	b580      	push	{r7, lr}
     796:	b082      	sub	sp, #8
     798:	af00      	add	r7, sp, #0
     79a:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	4a1e      	ldr	r2, [pc, #120]	; (818 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
     7a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	speed=&local_speed;
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	4a1d      	ldr	r2, [pc, #116]	; (81c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
     7a8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	4a1c      	ldr	r2, [pc, #112]	; (820 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
     7b0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	2201      	movs	r2, #1
     7b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	cano=&canoStatic;
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	4a19      	ldr	r2, [pc, #100]	; (824 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
     7c0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	int_result=cano->Init(NMT_MASTER_NODE);
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     7ca:	2101      	movs	r1, #1
     7cc:	4618      	mov	r0, r3
     7ce:	4b16      	ldr	r3, [pc, #88]	; (828 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
     7d0:	4798      	blx	r3
     7d2:	4602      	mov	r2, r0
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	if (int_result==0)
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
     7e0:	2b00      	cmp	r3, #0
     7e2:	d10b      	bne.n	7fc <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     7ea:	2102      	movs	r1, #2
     7ec:	4618      	mov	r0, r3
     7ee:	4b0f      	ldr	r3, [pc, #60]	; (82c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
     7f0:	4798      	blx	r3
     7f2:	4603      	mov	r3, r0
     7f4:	461a      	mov	r2, r3
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     800:	490b      	ldr	r1, [pc, #44]	; (830 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
     802:	480c      	ldr	r0, [pc, #48]	; (834 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
     804:	4b0c      	ldr	r3, [pc, #48]	; (838 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
     806:	4798      	blx	r3
	
	return boolResult;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	
}
     80e:	4618      	mov	r0, r3
     810:	3708      	adds	r7, #8
     812:	46bd      	mov	sp, r7
     814:	bd80      	pop	{r7, pc}
     816:	bf00      	nop
     818:	20000fcc 	.word	0x20000fcc
     81c:	20000fd6 	.word	0x20000fd6
     820:	20000fd4 	.word	0x20000fd4
     824:	20000e5c 	.word	0x20000e5c
     828:	00000f29 	.word	0x00000f29
     82c:	00000fed 	.word	0x00000fed
     830:	00000711 	.word	0x00000711
     834:	20000e3c 	.word	0x20000e3c
     838:	00011749 	.word	0x00011749

0000083c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
     83c:	b580      	push	{r7, lr}
     83e:	b082      	sub	sp, #8
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
     844:	4b2c      	ldr	r3, [pc, #176]	; (8f8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xbc>)
     846:	781b      	ldrb	r3, [r3, #0]
     848:	2b00      	cmp	r3, #0
     84a:	d050      	beq.n	8ee <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb2>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     852:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
     856:	681b      	ldr	r3, [r3, #0]
     858:	7d1b      	ldrb	r3, [r3, #20]
     85a:	b2db      	uxtb	r3, r3
     85c:	2b00      	cmp	r3, #0
     85e:	bf14      	ite	ne
     860:	2301      	movne	r3, #1
     862:	2300      	moveq	r3, #0
     864:	b2db      	uxtb	r3, r3
     866:	2b00      	cmp	r3, #0
     868:	d038      	beq.n	8dc <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
		{
				syncWas=cano->Send_SYNC_Signal();
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     870:	330c      	adds	r3, #12
     872:	4618      	mov	r0, r3
     874:	4b21      	ldr	r3, [pc, #132]	; (8fc <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xc0>)
     876:	4798      	blx	r3
     878:	4603      	mov	r3, r0
     87a:	461a      	mov	r2, r3
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
				is_enabled=ccu.IsEnabled();
     882:	481f      	ldr	r0, [pc, #124]	; (900 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xc4>)
     884:	4b1f      	ldr	r3, [pc, #124]	; (904 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xc8>)
     886:	4798      	blx	r3
     888:	4603      	mov	r3, r0
     88a:	461a      	mov	r2, r3
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
				if ((is_enabled))
     892:	687b      	ldr	r3, [r7, #4]
     894:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
     898:	2b00      	cmp	r3, #0
     89a:	d00b      	beq.n	8b4 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x78>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
     8a2:	8819      	ldrh	r1, [r3, #0]
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
     8aa:	461a      	mov	r2, r3
     8ac:	6878      	ldr	r0, [r7, #4]
     8ae:	4b16      	ldr	r3, [pc, #88]	; (908 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xcc>)
     8b0:	4798      	blx	r3
     8b2:	e007      	b.n	8c4 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x88>
					
				}else{
					
					Convert_Uint16_Array(0,tx_can_buffer);
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
     8ba:	461a      	mov	r2, r3
     8bc:	2100      	movs	r1, #0
     8be:	6878      	ldr	r0, [r7, #4]
     8c0:	4b11      	ldr	r3, [pc, #68]	; (908 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xcc>)
     8c2:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     8ca:	f103 0014 	add.w	r0, r3, #20
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
     8d4:	2202      	movs	r2, #2
     8d6:	4619      	mov	r1, r3
     8d8:	4b0c      	ldr	r3, [pc, #48]	; (90c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd0>)
     8da:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
     8dc:	4b06      	ldr	r3, [pc, #24]	; (8f8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xbc>)
     8de:	2200      	movs	r2, #0
     8e0:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     8e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8e6:	490a      	ldr	r1, [pc, #40]	; (910 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd4>)
     8e8:	480a      	ldr	r0, [pc, #40]	; (914 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd8>)
     8ea:	4b0b      	ldr	r3, [pc, #44]	; (918 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xdc>)
     8ec:	4798      	blx	r3
	} 
	else
	{
	}

}
     8ee:	bf00      	nop
     8f0:	3708      	adds	r7, #8
     8f2:	46bd      	mov	sp, r7
     8f4:	bd80      	pop	{r7, pc}
     8f6:	bf00      	nop
     8f8:	20000fd4 	.word	0x20000fd4
     8fc:	00004521 	.word	0x00004521
     900:	20000cfc 	.word	0x20000cfc
     904:	000005f1 	.word	0x000005f1
     908:	0000091d 	.word	0x0000091d
     90c:	00003819 	.word	0x00003819
     910:	00000711 	.word	0x00000711
     914:	20000e3c 	.word	0x20000e3c
     918:	00011749 	.word	0x00011749

0000091c <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
     91c:	b480      	push	{r7}
     91e:	b087      	sub	sp, #28
     920:	af00      	add	r7, sp, #0
     922:	60f8      	str	r0, [r7, #12]
     924:	460b      	mov	r3, r1
     926:	607a      	str	r2, [r7, #4]
     928:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
     92a:	2300      	movs	r3, #0
     92c:	75fb      	strb	r3, [r7, #23]
     92e:	7dfb      	ldrb	r3, [r7, #23]
     930:	2b07      	cmp	r3, #7
     932:	dc18      	bgt.n	966 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
     934:	7dfb      	ldrb	r3, [r7, #23]
     936:	2b01      	cmp	r3, #1
     938:	dc0d      	bgt.n	956 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
     93a:	7dfb      	ldrb	r3, [r7, #23]
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	f8d2 218c 	ldr.w	r2, [r2, #396]	; 0x18c
     942:	8812      	ldrh	r2, [r2, #0]
     944:	4611      	mov	r1, r2
     946:	7dfa      	ldrb	r2, [r7, #23]
     948:	00d2      	lsls	r2, r2, #3
     94a:	fa41 f202 	asr.w	r2, r1, r2
     94e:	b2d1      	uxtb	r1, r2
     950:	4a08      	ldr	r2, [pc, #32]	; (974 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     952:	54d1      	strb	r1, [r2, r3]
     954:	e003      	b.n	95e <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
     956:	7dfb      	ldrb	r3, [r7, #23]
     958:	4a06      	ldr	r2, [pc, #24]	; (974 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     95a:	2100      	movs	r1, #0
     95c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
     95e:	7dfb      	ldrb	r3, [r7, #23]
     960:	3301      	adds	r3, #1
     962:	75fb      	strb	r3, [r7, #23]
     964:	e7e3      	b.n	92e <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
     966:	4b03      	ldr	r3, [pc, #12]	; (974 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     968:	607b      	str	r3, [r7, #4]
}
     96a:	bf00      	nop
     96c:	371c      	adds	r7, #28
     96e:	46bd      	mov	sp, r7
     970:	bc80      	pop	{r7}
     972:	4770      	bx	lr
     974:	20000fcc 	.word	0x20000fcc

00000978 <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
     978:	b480      	push	{r7}
     97a:	b083      	sub	sp, #12
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
     980:	6039      	str	r1, [r7, #0]
	enable=st;
     982:	687b      	ldr	r3, [r7, #4]
     984:	683a      	ldr	r2, [r7, #0]
     986:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	return  *enable;
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     990:	781b      	ldrb	r3, [r3, #0]
}
     992:	4618      	mov	r0, r3
     994:	370c      	adds	r7, #12
     996:	46bd      	mov	sp, r7
     998:	bc80      	pop	{r7}
     99a:	4770      	bx	lr

0000099c <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
     9a4:	460b      	mov	r3, r1
     9a6:	807b      	strh	r3, [r7, #2]
	*speed=sp;
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
     9ae:	887a      	ldrh	r2, [r7, #2]
     9b0:	801a      	strh	r2, [r3, #0]
}
     9b2:	bf00      	nop
     9b4:	370c      	adds	r7, #12
     9b6:	46bd      	mov	sp, r7
     9b8:	bc80      	pop	{r7}
     9ba:	4770      	bx	lr

000009bc <_Z41__static_initialization_and_destruction_0ii>:
     9bc:	b580      	push	{r7, lr}
     9be:	b082      	sub	sp, #8
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	6039      	str	r1, [r7, #0]
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	2b01      	cmp	r3, #1
     9ca:	d15e      	bne.n	a8a <_Z41__static_initialization_and_destruction_0ii+0xce>
     9cc:	683b      	ldr	r3, [r7, #0]
     9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9d2:	4293      	cmp	r3, r2
     9d4:	d159      	bne.n	a8a <_Z41__static_initialization_and_destruction_0ii+0xce>
     9d6:	492f      	ldr	r1, [pc, #188]	; (a94 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     9d8:	482f      	ldr	r0, [pc, #188]	; (a98 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     9da:	4b30      	ldr	r3, [pc, #192]	; (a9c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     9dc:	4798      	blx	r3
     9de:	4a30      	ldr	r2, [pc, #192]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     9e0:	4930      	ldr	r1, [pc, #192]	; (aa4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     9e2:	482d      	ldr	r0, [pc, #180]	; (a98 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     9e4:	4b30      	ldr	r3, [pc, #192]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     9e6:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     9e8:	4930      	ldr	r1, [pc, #192]	; (aac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     9ea:	4831      	ldr	r0, [pc, #196]	; (ab0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     9ec:	4b31      	ldr	r3, [pc, #196]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     9ee:	4798      	blx	r3
     9f0:	4a2b      	ldr	r2, [pc, #172]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     9f2:	4931      	ldr	r1, [pc, #196]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     9f4:	482e      	ldr	r0, [pc, #184]	; (ab0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     9f6:	4b2c      	ldr	r3, [pc, #176]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     9f8:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     9fa:	4930      	ldr	r1, [pc, #192]	; (abc <_Z41__static_initialization_and_destruction_0ii+0x100>)
     9fc:	4830      	ldr	r0, [pc, #192]	; (ac0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     9fe:	4b2d      	ldr	r3, [pc, #180]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a00:	4798      	blx	r3
     a02:	4a27      	ldr	r2, [pc, #156]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a04:	492c      	ldr	r1, [pc, #176]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a06:	482e      	ldr	r0, [pc, #184]	; (ac0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     a08:	4b27      	ldr	r3, [pc, #156]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a0a:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     a0c:	492d      	ldr	r1, [pc, #180]	; (ac4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     a0e:	482e      	ldr	r0, [pc, #184]	; (ac8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     a10:	4b28      	ldr	r3, [pc, #160]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a12:	4798      	blx	r3
     a14:	4a22      	ldr	r2, [pc, #136]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a16:	4928      	ldr	r1, [pc, #160]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a18:	482b      	ldr	r0, [pc, #172]	; (ac8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     a1a:	4b23      	ldr	r3, [pc, #140]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a1c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     a1e:	492b      	ldr	r1, [pc, #172]	; (acc <_Z41__static_initialization_and_destruction_0ii+0x110>)
     a20:	482b      	ldr	r0, [pc, #172]	; (ad0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     a22:	4b24      	ldr	r3, [pc, #144]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a24:	4798      	blx	r3
     a26:	4a1e      	ldr	r2, [pc, #120]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a28:	4923      	ldr	r1, [pc, #140]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a2a:	4829      	ldr	r0, [pc, #164]	; (ad0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     a2c:	4b1e      	ldr	r3, [pc, #120]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a2e:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     a30:	4928      	ldr	r1, [pc, #160]	; (ad4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     a32:	4829      	ldr	r0, [pc, #164]	; (ad8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     a34:	4b1f      	ldr	r3, [pc, #124]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a36:	4798      	blx	r3
     a38:	4a19      	ldr	r2, [pc, #100]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a3a:	491f      	ldr	r1, [pc, #124]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a3c:	4826      	ldr	r0, [pc, #152]	; (ad8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     a3e:	4b1a      	ldr	r3, [pc, #104]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a40:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     a42:	4926      	ldr	r1, [pc, #152]	; (adc <_Z41__static_initialization_and_destruction_0ii+0x120>)
     a44:	4826      	ldr	r0, [pc, #152]	; (ae0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     a46:	4b1b      	ldr	r3, [pc, #108]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a48:	4798      	blx	r3
     a4a:	4a15      	ldr	r2, [pc, #84]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a4c:	491a      	ldr	r1, [pc, #104]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a4e:	4824      	ldr	r0, [pc, #144]	; (ae0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     a50:	4b15      	ldr	r3, [pc, #84]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a52:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     a54:	4923      	ldr	r1, [pc, #140]	; (ae4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     a56:	4824      	ldr	r0, [pc, #144]	; (ae8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     a58:	4b16      	ldr	r3, [pc, #88]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a5a:	4798      	blx	r3
     a5c:	4a10      	ldr	r2, [pc, #64]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a5e:	4916      	ldr	r1, [pc, #88]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a60:	4821      	ldr	r0, [pc, #132]	; (ae8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     a62:	4b11      	ldr	r3, [pc, #68]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a64:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     a66:	4921      	ldr	r1, [pc, #132]	; (aec <_Z41__static_initialization_and_destruction_0ii+0x130>)
     a68:	4821      	ldr	r0, [pc, #132]	; (af0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     a6a:	4b12      	ldr	r3, [pc, #72]	; (ab4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a6c:	4798      	blx	r3
     a6e:	4a0c      	ldr	r2, [pc, #48]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a70:	4911      	ldr	r1, [pc, #68]	; (ab8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a72:	481f      	ldr	r0, [pc, #124]	; (af0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     a74:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a76:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
     a78:	491e      	ldr	r1, [pc, #120]	; (af4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     a7a:	481f      	ldr	r0, [pc, #124]	; (af8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     a7c:	4b1f      	ldr	r3, [pc, #124]	; (afc <_Z41__static_initialization_and_destruction_0ii+0x140>)
     a7e:	4798      	blx	r3
     a80:	4a07      	ldr	r2, [pc, #28]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a82:	491f      	ldr	r1, [pc, #124]	; (b00 <_Z41__static_initialization_and_destruction_0ii+0x144>)
     a84:	481c      	ldr	r0, [pc, #112]	; (af8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     a86:	4b08      	ldr	r3, [pc, #32]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a88:	4798      	blx	r3
}
     a8a:	bf00      	nop
     a8c:	3708      	adds	r7, #8
     a8e:	46bd      	mov	sp, r7
     a90:	bd80      	pop	{r7, pc}
     a92:	bf00      	nop
     a94:	20002638 	.word	0x20002638
     a98:	20000d44 	.word	0x20000d44
     a9c:	00011059 	.word	0x00011059
     aa0:	20000000 	.word	0x20000000
     aa4:	00011075 	.word	0x00011075
     aa8:	00011a95 	.word	0x00011a95
     aac:	20002508 	.word	0x20002508
     ab0:	20000d5c 	.word	0x20000d5c
     ab4:	00011649 	.word	0x00011649
     ab8:	00011681 	.word	0x00011681
     abc:	2000259c 	.word	0x2000259c
     ac0:	20000d7c 	.word	0x20000d7c
     ac4:	200026c0 	.word	0x200026c0
     ac8:	20000d9c 	.word	0x20000d9c
     acc:	200025bc 	.word	0x200025bc
     ad0:	20000dbc 	.word	0x20000dbc
     ad4:	20002680 	.word	0x20002680
     ad8:	20000ddc 	.word	0x20000ddc
     adc:	200026a0 	.word	0x200026a0
     ae0:	20000dfc 	.word	0x20000dfc
     ae4:	20002578 	.word	0x20002578
     ae8:	20000e1c 	.word	0x20000e1c
     aec:	20002618 	.word	0x20002618
     af0:	20000e3c 	.word	0x20000e3c
     af4:	20002658 	.word	0x20002658
     af8:	20000e5c 	.word	0x20000e5c
     afc:	00000ec5 	.word	0x00000ec5
     b00:	00000f01 	.word	0x00000f01

00000b04 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
     b04:	b580      	push	{r7, lr}
     b06:	af00      	add	r7, sp, #0
     b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b0c:	2001      	movs	r0, #1
     b0e:	4b01      	ldr	r3, [pc, #4]	; (b14 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
     b10:	4798      	blx	r3
     b12:	bd80      	pop	{r7, pc}
     b14:	000009bd 	.word	0x000009bd

00000b18 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     b18:	b580      	push	{r7, lr}
     b1a:	b082      	sub	sp, #8
     b1c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     b1e:	4b16      	ldr	r3, [pc, #88]	; (b78 <Reset_Handler+0x60>)
     b20:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     b22:	4b16      	ldr	r3, [pc, #88]	; (b7c <Reset_Handler+0x64>)
     b24:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     b26:	687a      	ldr	r2, [r7, #4]
     b28:	683b      	ldr	r3, [r7, #0]
     b2a:	429a      	cmp	r2, r3
     b2c:	d00c      	beq.n	b48 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     b2e:	e007      	b.n	b40 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     b30:	683b      	ldr	r3, [r7, #0]
     b32:	1d1a      	adds	r2, r3, #4
     b34:	603a      	str	r2, [r7, #0]
     b36:	687a      	ldr	r2, [r7, #4]
     b38:	1d11      	adds	r1, r2, #4
     b3a:	6079      	str	r1, [r7, #4]
     b3c:	6812      	ldr	r2, [r2, #0]
     b3e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	4a0f      	ldr	r2, [pc, #60]	; (b80 <Reset_Handler+0x68>)
     b44:	4293      	cmp	r3, r2
     b46:	d3f3      	bcc.n	b30 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b48:	4b0e      	ldr	r3, [pc, #56]	; (b84 <Reset_Handler+0x6c>)
     b4a:	603b      	str	r3, [r7, #0]
     b4c:	e004      	b.n	b58 <Reset_Handler+0x40>
                *pDest++ = 0;
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	1d1a      	adds	r2, r3, #4
     b52:	603a      	str	r2, [r7, #0]
     b54:	2200      	movs	r2, #0
     b56:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	4a0b      	ldr	r2, [pc, #44]	; (b88 <Reset_Handler+0x70>)
     b5c:	4293      	cmp	r3, r2
     b5e:	d3f6      	bcc.n	b4e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     b60:	4b0a      	ldr	r3, [pc, #40]	; (b8c <Reset_Handler+0x74>)
     b62:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b64:	4a0a      	ldr	r2, [pc, #40]	; (b90 <Reset_Handler+0x78>)
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b6c:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <Reset_Handler+0x7c>)
     b70:	4798      	blx	r3

        /* Branch to main function */
        main();
     b72:	4b09      	ldr	r3, [pc, #36]	; (b98 <Reset_Handler+0x80>)
     b74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     b76:	e7fe      	b.n	b76 <Reset_Handler+0x5e>
     b78:	00012d14 	.word	0x00012d14
     b7c:	20000000 	.word	0x20000000
     b80:	20000a34 	.word	0x20000a34
     b84:	20000a34 	.word	0x20000a34
     b88:	200027c0 	.word	0x200027c0
     b8c:	00000000 	.word	0x00000000
     b90:	e000ed00 	.word	0xe000ed00
     b94:	00011ac9 	.word	0x00011ac9
     b98:	00000c6d 	.word	0x00000c6d

00000b9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     b9c:	b480      	push	{r7}
     b9e:	af00      	add	r7, sp, #0
        while (1) {
			asm("nop");
     ba0:	bf00      	nop
     ba2:	e7fd      	b.n	ba0 <Dummy_Handler+0x4>

00000ba4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     ba4:	b480      	push	{r7}
     ba6:	b085      	sub	sp, #20
     ba8:	af00      	add	r7, sp, #0
     baa:	60f8      	str	r0, [r7, #12]
     bac:	460b      	mov	r3, r1
     bae:	607a      	str	r2, [r7, #4]
     bb0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bb2:	7afb      	ldrb	r3, [r7, #11]
     bb4:	68fa      	ldr	r2, [r7, #12]
     bb6:	01db      	lsls	r3, r3, #7
     bb8:	4413      	add	r3, r2
     bba:	3318      	adds	r3, #24
     bbc:	687a      	ldr	r2, [r7, #4]
     bbe:	601a      	str	r2, [r3, #0]
}
     bc0:	bf00      	nop
     bc2:	3714      	adds	r7, #20
     bc4:	46bd      	mov	sp, r7
     bc6:	bc80      	pop	{r7}
     bc8:	4770      	bx	lr

00000bca <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     bca:	b480      	push	{r7}
     bcc:	b085      	sub	sp, #20
     bce:	af00      	add	r7, sp, #0
     bd0:	60f8      	str	r0, [r7, #12]
     bd2:	460b      	mov	r3, r1
     bd4:	607a      	str	r2, [r7, #4]
     bd6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd8:	7afb      	ldrb	r3, [r7, #11]
     bda:	68fa      	ldr	r2, [r7, #12]
     bdc:	01db      	lsls	r3, r3, #7
     bde:	4413      	add	r3, r2
     be0:	3314      	adds	r3, #20
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	601a      	str	r2, [r3, #0]
}
     be6:	bf00      	nop
     be8:	3714      	adds	r7, #20
     bea:	46bd      	mov	sp, r7
     bec:	bc80      	pop	{r7}
     bee:	4770      	bx	lr

00000bf0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	6039      	str	r1, [r7, #0]
     bfa:	71fb      	strb	r3, [r7, #7]
     bfc:	4613      	mov	r3, r2
     bfe:	71bb      	strb	r3, [r7, #6]
	if (level) {
     c00:	79bb      	ldrb	r3, [r7, #6]
     c02:	2b00      	cmp	r3, #0
     c04:	d006      	beq.n	c14 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     c06:	79fb      	ldrb	r3, [r7, #7]
     c08:	683a      	ldr	r2, [r7, #0]
     c0a:	4619      	mov	r1, r3
     c0c:	4806      	ldr	r0, [pc, #24]	; (c28 <_gpio_set_level+0x38>)
     c0e:	4b07      	ldr	r3, [pc, #28]	; (c2c <_gpio_set_level+0x3c>)
     c10:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     c12:	e005      	b.n	c20 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     c14:	79fb      	ldrb	r3, [r7, #7]
     c16:	683a      	ldr	r2, [r7, #0]
     c18:	4619      	mov	r1, r3
     c1a:	4803      	ldr	r0, [pc, #12]	; (c28 <_gpio_set_level+0x38>)
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <_gpio_set_level+0x40>)
     c1e:	4798      	blx	r3
}
     c20:	bf00      	nop
     c22:	3708      	adds	r7, #8
     c24:	46bd      	mov	sp, r7
     c26:	bd80      	pop	{r7, pc}
     c28:	41008000 	.word	0x41008000
     c2c:	00000ba5 	.word	0x00000ba5
     c30:	00000bcb 	.word	0x00000bcb

00000c34 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
     c3a:	4603      	mov	r3, r0
     c3c:	460a      	mov	r2, r1
     c3e:	71fb      	strb	r3, [r7, #7]
     c40:	4613      	mov	r3, r2
     c42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c44:	79fb      	ldrb	r3, [r7, #7]
     c46:	115b      	asrs	r3, r3, #5
     c48:	b2d8      	uxtb	r0, r3
     c4a:	79fb      	ldrb	r3, [r7, #7]
     c4c:	f003 031f 	and.w	r3, r3, #31
     c50:	2201      	movs	r2, #1
     c52:	fa02 f303 	lsl.w	r3, r2, r3
     c56:	79ba      	ldrb	r2, [r7, #6]
     c58:	4619      	mov	r1, r3
     c5a:	4b03      	ldr	r3, [pc, #12]	; (c68 <gpio_set_pin_level+0x34>)
     c5c:	4798      	blx	r3
}
     c5e:	bf00      	nop
     c60:	3708      	adds	r7, #8
     c62:	46bd      	mov	sp, r7
     c64:	bd80      	pop	{r7, pc}
     c66:	bf00      	nop
     c68:	00000bf1 	.word	0x00000bf1

00000c6c <main>:
#include "Compresor_Controller.h"



int main(void)
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b084      	sub	sp, #16
     c70:	af00      	add	r7, sp, #0
	atmel_start_init();
     c72:	4b2e      	ldr	r3, [pc, #184]	; (d2c <main+0xc0>)
     c74:	4798      	blx	r3
	
	ccu.Init();
     c76:	482e      	ldr	r0, [pc, #184]	; (d30 <main+0xc4>)
     c78:	4b2e      	ldr	r3, [pc, #184]	; (d34 <main+0xc8>)
     c7a:	4798      	blx	r3
	ccu.Set_CAN_Enable(ccu.IsEnabledPointer());
     c7c:	482e      	ldr	r0, [pc, #184]	; (d38 <main+0xcc>)
     c7e:	4b2f      	ldr	r3, [pc, #188]	; (d3c <main+0xd0>)
     c80:	4798      	blx	r3
     c82:	4603      	mov	r3, r0
     c84:	4619      	mov	r1, r3
     c86:	482a      	ldr	r0, [pc, #168]	; (d30 <main+0xc4>)
     c88:	4b2d      	ldr	r3, [pc, #180]	; (d40 <main+0xd4>)
     c8a:	4798      	blx	r3
	ccu.SetEnable(false);
     c8c:	2100      	movs	r1, #0
     c8e:	482a      	ldr	r0, [pc, #168]	; (d38 <main+0xcc>)
     c90:	4b2c      	ldr	r3, [pc, #176]	; (d44 <main+0xd8>)
     c92:	4798      	blx	r3
// 		{
// 			ccu.Periodic_Task();
// 			
// 				
// 		}
		ccu.SetEnable(true);
     c94:	2101      	movs	r1, #1
     c96:	4828      	ldr	r0, [pc, #160]	; (d38 <main+0xcc>)
     c98:	4b2a      	ldr	r3, [pc, #168]	; (d44 <main+0xd8>)
     c9a:	4798      	blx	r3
		
		for (int dir = 1; dir > -2; dir=dir-2)
     c9c:	2301      	movs	r3, #1
     c9e:	60bb      	str	r3, [r7, #8]
     ca0:	68bb      	ldr	r3, [r7, #8]
     ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
     ca6:	db37      	blt.n	d18 <main+0xac>
		{
			
			for (uint16_t i = (1-dir)*0x7fff; i < (dir+1)*0x7fff; i=i+dir*1)
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	f1c3 0301 	rsb	r3, r3, #1
     cae:	b29b      	uxth	r3, r3
     cb0:	461a      	mov	r2, r3
     cb2:	03d2      	lsls	r2, r2, #15
     cb4:	1ad3      	subs	r3, r2, r3
     cb6:	80fb      	strh	r3, [r7, #6]
     cb8:	88f9      	ldrh	r1, [r7, #6]
     cba:	68bb      	ldr	r3, [r7, #8]
     cbc:	1c5a      	adds	r2, r3, #1
     cbe:	4613      	mov	r3, r2
     cc0:	03db      	lsls	r3, r3, #15
     cc2:	1a9b      	subs	r3, r3, r2
     cc4:	4299      	cmp	r1, r3
     cc6:	da23      	bge.n	d10 <main+0xa4>
			//for (uint16_t i = 0; i <0xffff ; i++)
			{
				ccu.Set_Motor_Speed(i);
     cc8:	88fb      	ldrh	r3, [r7, #6]
     cca:	4619      	mov	r1, r3
     ccc:	4818      	ldr	r0, [pc, #96]	; (d30 <main+0xc4>)
     cce:	4b1e      	ldr	r3, [pc, #120]	; (d48 <main+0xdc>)
     cd0:	4798      	blx	r3
				timeout=*ccu.syncCANOpenTimeout;
     cd2:	4b17      	ldr	r3, [pc, #92]	; (d30 <main+0xc4>)
     cd4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	73fb      	strb	r3, [r7, #15]
				while (!timeout)
     cdc:	7bfb      	ldrb	r3, [r7, #15]
     cde:	2b00      	cmp	r3, #0
     ce0:	d109      	bne.n	cf6 <main+0x8a>
				{
					gpio_set_pin_level(LED0,false);
     ce2:	2100      	movs	r1, #0
     ce4:	2052      	movs	r0, #82	; 0x52
     ce6:	4b19      	ldr	r3, [pc, #100]	; (d4c <main+0xe0>)
     ce8:	4798      	blx	r3
					timeout=*ccu.syncCANOpenTimeout;
     cea:	4b11      	ldr	r3, [pc, #68]	; (d30 <main+0xc4>)
     cec:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	73fb      	strb	r3, [r7, #15]
				while (!timeout)
     cf4:	e7f2      	b.n	cdc <main+0x70>
				}
				ccu.Periodic_Task();
     cf6:	480e      	ldr	r0, [pc, #56]	; (d30 <main+0xc4>)
     cf8:	4b15      	ldr	r3, [pc, #84]	; (d50 <main+0xe4>)
     cfa:	4798      	blx	r3
				gpio_set_pin_level(LED0,true);
     cfc:	2101      	movs	r1, #1
     cfe:	2052      	movs	r0, #82	; 0x52
     d00:	4b12      	ldr	r3, [pc, #72]	; (d4c <main+0xe0>)
     d02:	4798      	blx	r3
			for (uint16_t i = (1-dir)*0x7fff; i < (dir+1)*0x7fff; i=i+dir*1)
     d04:	68bb      	ldr	r3, [r7, #8]
     d06:	b29a      	uxth	r2, r3
     d08:	88fb      	ldrh	r3, [r7, #6]
     d0a:	4413      	add	r3, r2
     d0c:	80fb      	strh	r3, [r7, #6]
     d0e:	e7d3      	b.n	cb8 <main+0x4c>
		for (int dir = 1; dir > -2; dir=dir-2)
     d10:	68bb      	ldr	r3, [r7, #8]
     d12:	3b02      	subs	r3, #2
     d14:	60bb      	str	r3, [r7, #8]
     d16:	e7c3      	b.n	ca0 <main+0x34>
			}
				
				
		}
		ccu.SetEnable(true);
     d18:	2101      	movs	r1, #1
     d1a:	4807      	ldr	r0, [pc, #28]	; (d38 <main+0xcc>)
     d1c:	4b09      	ldr	r3, [pc, #36]	; (d44 <main+0xd8>)
     d1e:	4798      	blx	r3
		delay_ms(1000);
     d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d24:	4b0b      	ldr	r3, [pc, #44]	; (d54 <main+0xe8>)
     d26:	4798      	blx	r3
// 
// 		cano.Process();
// 		delay_ms(1);
		// 		cano.Periodic_Process();
		//  		delay_ms(1);
	}
     d28:	e7b4      	b.n	c94 <main+0x28>
     d2a:	bf00      	nop
     d2c:	00004575 	.word	0x00004575
     d30:	20000b68 	.word	0x20000b68
     d34:	00000341 	.word	0x00000341
     d38:	20000cfc 	.word	0x20000cfc
     d3c:	0000062d 	.word	0x0000062d
     d40:	00000979 	.word	0x00000979
     d44:	000005bd 	.word	0x000005bd
     d48:	0000099d 	.word	0x0000099d
     d4c:	00000c35 	.word	0x00000c35
     d50:	0000083d 	.word	0x0000083d
     d54:	00005edd 	.word	0x00005edd

00000d58 <_Z41__static_initialization_and_destruction_0ii>:
     d58:	b580      	push	{r7, lr}
     d5a:	b082      	sub	sp, #8
     d5c:	af00      	add	r7, sp, #0
     d5e:	6078      	str	r0, [r7, #4]
     d60:	6039      	str	r1, [r7, #0]
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	2b01      	cmp	r3, #1
     d66:	d155      	bne.n	e14 <_Z41__static_initialization_and_destruction_0ii+0xbc>
     d68:	683b      	ldr	r3, [r7, #0]
     d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d6e:	4293      	cmp	r3, r2
     d70:	d150      	bne.n	e14 <_Z41__static_initialization_and_destruction_0ii+0xbc>
     d72:	492a      	ldr	r1, [pc, #168]	; (e1c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     d74:	482a      	ldr	r0, [pc, #168]	; (e20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     d76:	4b2b      	ldr	r3, [pc, #172]	; (e24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     d78:	4798      	blx	r3
     d7a:	4a2b      	ldr	r2, [pc, #172]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     d7c:	492b      	ldr	r1, [pc, #172]	; (e2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     d7e:	4828      	ldr	r0, [pc, #160]	; (e20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     d80:	4b2b      	ldr	r3, [pc, #172]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     d82:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     d84:	492b      	ldr	r1, [pc, #172]	; (e34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     d86:	482c      	ldr	r0, [pc, #176]	; (e38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     d88:	4b2c      	ldr	r3, [pc, #176]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     d8a:	4798      	blx	r3
     d8c:	4a26      	ldr	r2, [pc, #152]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     d8e:	492c      	ldr	r1, [pc, #176]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     d90:	4829      	ldr	r0, [pc, #164]	; (e38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     d92:	4b27      	ldr	r3, [pc, #156]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     d94:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     d96:	492b      	ldr	r1, [pc, #172]	; (e44 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     d98:	482b      	ldr	r0, [pc, #172]	; (e48 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     d9a:	4b28      	ldr	r3, [pc, #160]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     d9c:	4798      	blx	r3
     d9e:	4a22      	ldr	r2, [pc, #136]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     da0:	4927      	ldr	r1, [pc, #156]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     da2:	4829      	ldr	r0, [pc, #164]	; (e48 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     da4:	4b22      	ldr	r3, [pc, #136]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     da6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     da8:	4928      	ldr	r1, [pc, #160]	; (e4c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     daa:	4829      	ldr	r0, [pc, #164]	; (e50 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     dac:	4b23      	ldr	r3, [pc, #140]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     dae:	4798      	blx	r3
     db0:	4a1d      	ldr	r2, [pc, #116]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     db2:	4923      	ldr	r1, [pc, #140]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     db4:	4826      	ldr	r0, [pc, #152]	; (e50 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     db6:	4b1e      	ldr	r3, [pc, #120]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     db8:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     dba:	4926      	ldr	r1, [pc, #152]	; (e54 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     dbc:	4826      	ldr	r0, [pc, #152]	; (e58 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     dbe:	4b1f      	ldr	r3, [pc, #124]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     dc0:	4798      	blx	r3
     dc2:	4a19      	ldr	r2, [pc, #100]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     dc4:	491e      	ldr	r1, [pc, #120]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     dc6:	4824      	ldr	r0, [pc, #144]	; (e58 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     dc8:	4b19      	ldr	r3, [pc, #100]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     dca:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     dcc:	4923      	ldr	r1, [pc, #140]	; (e5c <_Z41__static_initialization_and_destruction_0ii+0x104>)
     dce:	4824      	ldr	r0, [pc, #144]	; (e60 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     dd0:	4b1a      	ldr	r3, [pc, #104]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     dd2:	4798      	blx	r3
     dd4:	4a14      	ldr	r2, [pc, #80]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     dd6:	491a      	ldr	r1, [pc, #104]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     dd8:	4821      	ldr	r0, [pc, #132]	; (e60 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     dda:	4b15      	ldr	r3, [pc, #84]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     ddc:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     dde:	4921      	ldr	r1, [pc, #132]	; (e64 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     de0:	4821      	ldr	r0, [pc, #132]	; (e68 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     de2:	4b16      	ldr	r3, [pc, #88]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     de4:	4798      	blx	r3
     de6:	4a10      	ldr	r2, [pc, #64]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     de8:	4915      	ldr	r1, [pc, #84]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     dea:	481f      	ldr	r0, [pc, #124]	; (e68 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     dec:	4b10      	ldr	r3, [pc, #64]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     dee:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     df0:	491e      	ldr	r1, [pc, #120]	; (e6c <_Z41__static_initialization_and_destruction_0ii+0x114>)
     df2:	481f      	ldr	r0, [pc, #124]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     df4:	4b11      	ldr	r3, [pc, #68]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     df6:	4798      	blx	r3
     df8:	4a0b      	ldr	r2, [pc, #44]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     dfa:	4911      	ldr	r1, [pc, #68]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     dfc:	481c      	ldr	r0, [pc, #112]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     dfe:	4b0c      	ldr	r3, [pc, #48]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e00:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     e02:	491c      	ldr	r1, [pc, #112]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     e04:	481c      	ldr	r0, [pc, #112]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     e06:	4b0d      	ldr	r3, [pc, #52]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e08:	4798      	blx	r3
     e0a:	4a07      	ldr	r2, [pc, #28]	; (e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e0c:	490c      	ldr	r1, [pc, #48]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e0e:	481a      	ldr	r0, [pc, #104]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     e10:	4b07      	ldr	r3, [pc, #28]	; (e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e12:	4798      	blx	r3
     e14:	bf00      	nop
     e16:	3708      	adds	r7, #8
     e18:	46bd      	mov	sp, r7
     e1a:	bd80      	pop	{r7, pc}
     e1c:	20002638 	.word	0x20002638
     e20:	20000fd8 	.word	0x20000fd8
     e24:	00011059 	.word	0x00011059
     e28:	20000000 	.word	0x20000000
     e2c:	00011075 	.word	0x00011075
     e30:	00011a95 	.word	0x00011a95
     e34:	20002508 	.word	0x20002508
     e38:	20000ff0 	.word	0x20000ff0
     e3c:	00011649 	.word	0x00011649
     e40:	00011681 	.word	0x00011681
     e44:	2000259c 	.word	0x2000259c
     e48:	20001010 	.word	0x20001010
     e4c:	200026c0 	.word	0x200026c0
     e50:	20001030 	.word	0x20001030
     e54:	200025bc 	.word	0x200025bc
     e58:	20001050 	.word	0x20001050
     e5c:	20002680 	.word	0x20002680
     e60:	20001070 	.word	0x20001070
     e64:	200026a0 	.word	0x200026a0
     e68:	20001090 	.word	0x20001090
     e6c:	20002578 	.word	0x20002578
     e70:	200010b0 	.word	0x200010b0
     e74:	20002618 	.word	0x20002618
     e78:	200010d0 	.word	0x200010d0

00000e7c <_GLOBAL__sub_I_main>:
     e7c:	b580      	push	{r7, lr}
     e7e:	af00      	add	r7, sp, #0
     e80:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e84:	2001      	movs	r0, #1
     e86:	4b01      	ldr	r3, [pc, #4]	; (e8c <_GLOBAL__sub_I_main+0x10>)
     e88:	4798      	blx	r3
     e8a:	bd80      	pop	{r7, pc}
     e8c:	00000d59 	.word	0x00000d59

00000e90 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
     e90:	b580      	push	{r7, lr}
     e92:	b082      	sub	sp, #8
     e94:	af00      	add	r7, sp, #0
     e96:	6078      	str	r0, [r7, #4]
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	4618      	mov	r0, r3
     e9c:	4b06      	ldr	r3, [pc, #24]	; (eb8 <_ZN13CANOpen_ClassC1Ev+0x28>)
     e9e:	4798      	blx	r3
     ea0:	4a06      	ldr	r2, [pc, #24]	; (ebc <_ZN13CANOpen_ClassC1Ev+0x2c>)
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     ea6:	4a06      	ldr	r2, [pc, #24]	; (ec0 <_ZN13CANOpen_ClassC1Ev+0x30>)
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	4618      	mov	r0, r3
     eb0:	3708      	adds	r7, #8
     eb2:	46bd      	mov	sp, r7
     eb4:	bd80      	pop	{r7, pc}
     eb6:	bf00      	nop
     eb8:	00001045 	.word	0x00001045
     ebc:	00011e28 	.word	0x00011e28
     ec0:	200010f0 	.word	0x200010f0

00000ec4 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
     ec4:	b580      	push	{r7, lr}
     ec6:	b082      	sub	sp, #8
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	6039      	str	r1, [r7, #0]
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	4618      	mov	r0, r3
     ed2:	4b08      	ldr	r3, [pc, #32]	; (ef4 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
     ed4:	4798      	blx	r3
     ed6:	4a08      	ldr	r2, [pc, #32]	; (ef8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     edc:	4a07      	ldr	r2, [pc, #28]	; (efc <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	6013      	str	r3, [r2, #0]
	canDescr=descr;
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	683a      	ldr	r2, [r7, #0]
     ee6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
} //CANOpen_Class
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	4618      	mov	r0, r3
     eee:	3708      	adds	r7, #8
     ef0:	46bd      	mov	sp, r7
     ef2:	bd80      	pop	{r7, pc}
     ef4:	00001045 	.word	0x00001045
     ef8:	00011e28 	.word	0x00011e28
     efc:	200010f0 	.word	0x200010f0

00000f00 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
     f00:	b580      	push	{r7, lr}
     f02:	b082      	sub	sp, #8
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	4a05      	ldr	r2, [pc, #20]	; (f20 <_ZN13CANOpen_ClassD1Ev+0x20>)
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	601a      	str	r2, [r3, #0]
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	4618      	mov	r0, r3
     f12:	4b04      	ldr	r3, [pc, #16]	; (f24 <_ZN13CANOpen_ClassD1Ev+0x24>)
     f14:	4798      	blx	r3
{
} //~CANOpen_Class
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	4618      	mov	r0, r3
     f1a:	3708      	adds	r7, #8
     f1c:	46bd      	mov	sp, r7
     f1e:	bd80      	pop	{r7, pc}
     f20:	00011e28 	.word	0x00011e28
     f24:	000010a5 	.word	0x000010a5

00000f28 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
     f28:	b590      	push	{r4, r7, lr}
     f2a:	b083      	sub	sp, #12
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
     f30:	460b      	mov	r3, r1
     f32:	70fb      	strb	r3, [r7, #3]
	coNode=node;
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	78fa      	ldrb	r2, [r7, #3]
     f38:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
     f3c:	6878      	ldr	r0, [r7, #4]
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
     f44:	78fa      	ldrb	r2, [r7, #3]
     f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     f4a:	4c17      	ldr	r4, [pc, #92]	; (fa8 <_ZN13CANOpen_Class4InitEh+0x80>)
     f4c:	47a0      	blx	r4
     f4e:	4603      	mov	r3, r0
     f50:	461a      	mov	r2, r3
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	
	if (err==0)
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
     f5e:	2b00      	cmp	r3, #0
     f60:	d116      	bne.n	f90 <_ZN13CANOpen_Class4InitEh+0x68>
	{
		canopen_driver->canopen_ready=true;
     f62:	4b12      	ldr	r3, [pc, #72]	; (fac <_ZN13CANOpen_Class4InitEh+0x84>)
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	2201      	movs	r2, #1
     f68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
     f6c:	6878      	ldr	r0, [r7, #4]
     f6e:	4b10      	ldr	r3, [pc, #64]	; (fb0 <_ZN13CANOpen_Class4InitEh+0x88>)
     f70:	4798      	blx	r3
     f72:	4603      	mov	r3, r0
     f74:	b25a      	sxtb	r2, r3
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		if (node==1)
     f7c:	78fb      	ldrb	r3, [r7, #3]
     f7e:	2b01      	cmp	r3, #1
     f80:	d10a      	bne.n	f98 <_ZN13CANOpen_Class4InitEh+0x70>
		{
			CO_sendNMTcommand(1,0);
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	2200      	movs	r2, #0
     f86:	2101      	movs	r1, #1
     f88:	4618      	mov	r0, r3
     f8a:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <_ZN13CANOpen_Class4InitEh+0x8c>)
     f8c:	4798      	blx	r3
     f8e:	e003      	b.n	f98 <_ZN13CANOpen_Class4InitEh+0x70>
		}
			

		
	}else{
		return	(int)err;
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
     f96:	e002      	b.n	f9e <_ZN13CANOpen_Class4InitEh+0x76>
	}
	return	(int)err;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
}
     f9e:	4618      	mov	r0, r3
     fa0:	370c      	adds	r7, #12
     fa2:	46bd      	mov	sp, r7
     fa4:	bd90      	pop	{r4, r7, pc}
     fa6:	bf00      	nop
     fa8:	000011b5 	.word	0x000011b5
     fac:	200019e4 	.word	0x200019e4
     fb0:	00000fb9 	.word	0x00000fb9
     fb4:	000010dd 	.word	0x000010dd

00000fb8 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
     fb8:	b580      	push	{r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	4618      	mov	r0, r3
     fc4:	4b08      	ldr	r3, [pc, #32]	; (fe8 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
     fc6:	4798      	blx	r3
     fc8:	4603      	mov	r3, r0
     fca:	461a      	mov	r2, r3
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	2200      	movs	r2, #0
     fd6:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	return	(int)err;
     fda:	687b      	ldr	r3, [r7, #4]
     fdc:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
}
     fe0:	4618      	mov	r0, r3
     fe2:	3708      	adds	r7, #8
     fe4:	46bd      	mov	sp, r7
     fe6:	bd80      	pop	{r7, pc}
     fe8:	00001bc5 	.word	0x00001bc5

00000fec <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
     fec:	b580      	push	{r7, lr}
     fee:	b084      	sub	sp, #16
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
     ff4:	460b      	mov	r3, r1
     ff6:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
     ff8:	2300      	movs	r3, #0
     ffa:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	78fa      	ldrb	r2, [r7, #3]
    1000:	2101      	movs	r1, #1
    1002:	4618      	mov	r0, r3
    1004:	4b0d      	ldr	r3, [pc, #52]	; (103c <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
    1006:	4798      	blx	r3
		delay_ms(100);
    1008:	2064      	movs	r0, #100	; 0x64
    100a:	4b0d      	ldr	r3, [pc, #52]	; (1040 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
    100c:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
    100e:	687b      	ldr	r3, [r7, #4]
    1010:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    1014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1016:	689a      	ldr	r2, [r3, #8]
    1018:	78fb      	ldrb	r3, [r7, #3]
    101a:	011b      	lsls	r3, r3, #4
    101c:	4413      	add	r3, r2
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2b05      	cmp	r3, #5
    1022:	bf0c      	ite	eq
    1024:	2301      	moveq	r3, #1
    1026:	2300      	movne	r3, #0
    1028:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	7bfa      	ldrb	r2, [r7, #15]
    102e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
//	}
	return	localOperational;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3710      	adds	r7, #16
    1038:	46bd      	mov	sp, r7
    103a:	bd80      	pop	{r7, pc}
    103c:	000010dd 	.word	0x000010dd
    1040:	00005edd 	.word	0x00005edd

00001044 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    1044:	b580      	push	{r7, lr}
    1046:	b082      	sub	sp, #8
    1048:	af00      	add	r7, sp, #0
    104a:	6078      	str	r0, [r7, #4]
    104c:	687b      	ldr	r3, [r7, #4]
    104e:	4618      	mov	r0, r3
    1050:	4b10      	ldr	r3, [pc, #64]	; (1094 <_ZN8CO_ClassC1Ev+0x50>)
    1052:	4798      	blx	r3
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	f503 739a 	add.w	r3, r3, #308	; 0x134
    105a:	4618      	mov	r0, r3
    105c:	4b0e      	ldr	r3, [pc, #56]	; (1098 <_ZN8CO_ClassC1Ev+0x54>)
    105e:	4798      	blx	r3
    1060:	4a0e      	ldr	r2, [pc, #56]	; (109c <_ZN8CO_ClassC1Ev+0x58>)
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    1066:	4b0e      	ldr	r3, [pc, #56]	; (10a0 <_ZN8CO_ClassC1Ev+0x5c>)
    1068:	681a      	ldr	r2, [r3, #0]
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	coCanDescr=NULL;
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	2200      	movs	r2, #0
    1074:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	CO_memoryUsed=sizeof(COO);
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	223c      	movs	r2, #60	; 0x3c
    107c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	timer_next=NULL;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	2200      	movs	r2, #0
    1084:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
} //CO_Class
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	4618      	mov	r0, r3
    108c:	3708      	adds	r7, #8
    108e:	46bd      	mov	sp, r7
    1090:	bd80      	pop	{r7, pc}
    1092:	bf00      	nop
    1094:	00001a3d 	.word	0x00001a3d
    1098:	000029d9 	.word	0x000029d9
    109c:	00011e34 	.word	0x00011e34
    10a0:	20001130 	.word	0x20001130

000010a4 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    10a4:	b580      	push	{r7, lr}
    10a6:	b082      	sub	sp, #8
    10a8:	af00      	add	r7, sp, #0
    10aa:	6078      	str	r0, [r7, #4]
    10ac:	4a08      	ldr	r2, [pc, #32]	; (10d0 <_ZN8CO_ClassD1Ev+0x2c>)
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	601a      	str	r2, [r3, #0]
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	f503 739a 	add.w	r3, r3, #308	; 0x134
    10b8:	4618      	mov	r0, r3
    10ba:	4b06      	ldr	r3, [pc, #24]	; (10d4 <_ZN8CO_ClassD1Ev+0x30>)
    10bc:	4798      	blx	r3
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	4618      	mov	r0, r3
    10c2:	4b05      	ldr	r3, [pc, #20]	; (10d8 <_ZN8CO_ClassD1Ev+0x34>)
    10c4:	4798      	blx	r3
{
} //~CO_Class
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	4618      	mov	r0, r3
    10ca:	3708      	adds	r7, #8
    10cc:	46bd      	mov	sp, r7
    10ce:	bd80      	pop	{r7, pc}
    10d0:	00011e34 	.word	0x00011e34
    10d4:	000029ed 	.word	0x000029ed
    10d8:	00001ab5 	.word	0x00001ab5

000010dc <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    10dc:	b580      	push	{r7, lr}
    10de:	b082      	sub	sp, #8
    10e0:	af00      	add	r7, sp, #0
    10e2:	6078      	str	r0, [r7, #4]
    10e4:	460b      	mov	r3, r1
    10e6:	70fb      	strb	r3, [r7, #3]
    10e8:	4613      	mov	r3, r2
    10ea:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    10f2:	2b00      	cmp	r3, #0
    10f4:	d101      	bne.n	10fa <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    10f6:	23f5      	movs	r3, #245	; 0xf5
    10f8:	e053      	b.n	11a2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    1100:	78fa      	ldrb	r2, [r7, #3]
    1102:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    110a:	78ba      	ldrb	r2, [r7, #2]
    110c:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    110e:	78bb      	ldrb	r3, [r7, #2]
    1110:	2b00      	cmp	r3, #0
    1112:	d006      	beq.n	1122 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    1114:	4b25      	ldr	r3, [pc, #148]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	691b      	ldr	r3, [r3, #16]
    111a:	7a9b      	ldrb	r3, [r3, #10]
    111c:	78ba      	ldrb	r2, [r7, #2]
    111e:	429a      	cmp	r2, r3
    1120:	d135      	bne.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    1122:	78fb      	ldrb	r3, [r7, #3]
    1124:	2b80      	cmp	r3, #128	; 0x80
    1126:	d01f      	beq.n	1168 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    1128:	2b80      	cmp	r3, #128	; 0x80
    112a:	dc04      	bgt.n	1136 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    112c:	2b01      	cmp	r3, #1
    112e:	d007      	beq.n	1140 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    1130:	2b02      	cmp	r3, #2
    1132:	d013      	beq.n	115c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    1134:	e02b      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    1136:	2b81      	cmp	r3, #129	; 0x81
    1138:	d01c      	beq.n	1174 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    113a:	2b82      	cmp	r3, #130	; 0x82
    113c:	d020      	beq.n	1180 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    113e:	e026      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    1140:	4b1a      	ldr	r3, [pc, #104]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    1142:	681b      	ldr	r3, [r3, #0]
    1144:	691b      	ldr	r3, [r3, #16]
    1146:	695b      	ldr	r3, [r3, #20]
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	781b      	ldrb	r3, [r3, #0]
    114c:	2b00      	cmp	r3, #0
    114e:	d11d      	bne.n	118c <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    1150:	4b16      	ldr	r3, [pc, #88]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	691b      	ldr	r3, [r3, #16]
    1156:	2205      	movs	r2, #5
    1158:	701a      	strb	r2, [r3, #0]
			}
			break;
    115a:	e017      	b.n	118c <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    115c:	4b13      	ldr	r3, [pc, #76]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	691b      	ldr	r3, [r3, #16]
    1162:	2204      	movs	r2, #4
    1164:	701a      	strb	r2, [r3, #0]
			break;
    1166:	e012      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    1168:	4b10      	ldr	r3, [pc, #64]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	691b      	ldr	r3, [r3, #16]
    116e:	227f      	movs	r2, #127	; 0x7f
    1170:	701a      	strb	r2, [r3, #0]
			break;
    1172:	e00c      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    1174:	4b0d      	ldr	r3, [pc, #52]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	691b      	ldr	r3, [r3, #16]
    117a:	2202      	movs	r2, #2
    117c:	725a      	strb	r2, [r3, #9]
			break;
    117e:	e006      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	691b      	ldr	r3, [r3, #16]
    1186:	2201      	movs	r2, #1
    1188:	725a      	strb	r2, [r3, #9]
			break;
    118a:	e000      	b.n	118e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    118c:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    118e:	687a      	ldr	r2, [r7, #4]
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    1196:	4619      	mov	r1, r3
    1198:	4610      	mov	r0, r2
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    119c:	4798      	blx	r3
    119e:	4603      	mov	r3, r0
    11a0:	b2db      	uxtb	r3, r3
}
    11a2:	4618      	mov	r0, r3
    11a4:	3708      	adds	r7, #8
    11a6:	46bd      	mov	sp, r7
    11a8:	bd80      	pop	{r7, pc}
    11aa:	bf00      	nop
    11ac:	20001130 	.word	0x20001130
    11b0:	00001f25 	.word	0x00001f25

000011b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    11b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11b6:	b099      	sub	sp, #100	; 0x64
    11b8:	af0c      	add	r7, sp, #48	; 0x30
    11ba:	61f8      	str	r0, [r7, #28]
    11bc:	61b9      	str	r1, [r7, #24]
    11be:	613b      	str	r3, [r7, #16]
    11c0:	4613      	mov	r3, r2
    11c2:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    11c4:	69fb      	ldr	r3, [r7, #28]
    11c6:	69ba      	ldr	r2, [r7, #24]
    11c8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	coNode=nodeId;
    11cc:	69fb      	ldr	r3, [r7, #28]
    11ce:	7dfa      	ldrb	r2, [r7, #23]
    11d0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    11d4:	4ba3      	ldr	r3, [pc, #652]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    11d6:	4aa4      	ldr	r2, [pc, #656]	; (1468 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    11d8:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    11da:	4ba2      	ldr	r3, [pc, #648]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	4aa3      	ldr	r2, [pc, #652]	; (146c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    11e0:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    11e2:	4ba3      	ldr	r3, [pc, #652]	; (1470 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    11e4:	4aa3      	ldr	r2, [pc, #652]	; (1474 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    11e6:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    11e8:	4ba3      	ldr	r3, [pc, #652]	; (1478 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    11ea:	4aa4      	ldr	r2, [pc, #656]	; (147c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    11ec:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    11ee:	69fb      	ldr	r3, [r7, #28]
    11f0:	2200      	movs	r2, #0
    11f2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    11f6:	69fb      	ldr	r3, [r7, #28]
    11f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    11fc:	2b00      	cmp	r3, #0
    11fe:	d118      	bne.n	1232 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    1200:	4b98      	ldr	r3, [pc, #608]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1202:	6819      	ldr	r1, [r3, #0]
    1204:	69fb      	ldr	r3, [r7, #28]
    1206:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
    120a:	69fb      	ldr	r3, [r7, #28]
    120c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    1210:	4613      	mov	r3, r2
    1212:	011b      	lsls	r3, r3, #4
    1214:	4413      	add	r3, r2
    1216:	00db      	lsls	r3, r3, #3
    1218:	4a99      	ldr	r2, [pc, #612]	; (1480 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    121a:	441a      	add	r2, r3
    121c:	0083      	lsls	r3, r0, #2
    121e:	440b      	add	r3, r1
    1220:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    1222:	69fb      	ldr	r3, [r7, #28]
    1224:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1228:	1c5a      	adds	r2, r3, #1
    122a:	69fb      	ldr	r3, [r7, #28]
    122c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1230:	e7e1      	b.n	11f6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    1232:	4b94      	ldr	r3, [pc, #592]	; (1484 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    1234:	4a94      	ldr	r2, [pc, #592]	; (1488 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    1236:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    1238:	4b8a      	ldr	r3, [pc, #552]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	4a93      	ldr	r2, [pc, #588]	; (148c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    123e:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    1240:	4b88      	ldr	r3, [pc, #544]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	4a92      	ldr	r2, [pc, #584]	; (1490 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    1246:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    1248:	4b86      	ldr	r3, [pc, #536]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	4a91      	ldr	r2, [pc, #580]	; (1494 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    124e:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    1250:	4b84      	ldr	r3, [pc, #528]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	4a90      	ldr	r2, [pc, #576]	; (1498 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    1256:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    1258:	69fb      	ldr	r3, [r7, #28]
    125a:	2200      	movs	r2, #0
    125c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1260:	69fb      	ldr	r3, [r7, #28]
    1262:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1266:	2b03      	cmp	r3, #3
    1268:	d818      	bhi.n	129c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    126a:	4b7e      	ldr	r3, [pc, #504]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    126c:	6819      	ldr	r1, [r3, #0]
    126e:	69fb      	ldr	r3, [r7, #28]
    1270:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
    1274:	69fb      	ldr	r3, [r7, #28]
    1276:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    127a:	4613      	mov	r3, r2
    127c:	005b      	lsls	r3, r3, #1
    127e:	4413      	add	r3, r2
    1280:	015b      	lsls	r3, r3, #5
    1282:	4a86      	ldr	r2, [pc, #536]	; (149c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    1284:	441a      	add	r2, r3
    1286:	1d83      	adds	r3, r0, #6
    1288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    128c:	69fb      	ldr	r3, [r7, #28]
    128e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1292:	1c5a      	adds	r2, r3, #1
    1294:	69fb      	ldr	r3, [r7, #28]
    1296:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    129a:	e7e1      	b.n	1260 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    129c:	69fb      	ldr	r3, [r7, #28]
    129e:	2200      	movs	r2, #0
    12a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    12a4:	69fb      	ldr	r3, [r7, #28]
    12a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    12aa:	2b03      	cmp	r3, #3
    12ac:	d817      	bhi.n	12de <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    12ae:	4b6d      	ldr	r3, [pc, #436]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	69fa      	ldr	r2, [r7, #28]
    12b4:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
    12b8:	69f9      	ldr	r1, [r7, #28]
    12ba:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
    12be:	2058      	movs	r0, #88	; 0x58
    12c0:	fb00 f101 	mul.w	r1, r0, r1
    12c4:	4876      	ldr	r0, [pc, #472]	; (14a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    12c6:	4401      	add	r1, r0
    12c8:	320a      	adds	r2, #10
    12ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    12ce:	69fb      	ldr	r3, [r7, #28]
    12d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    12d4:	1c5a      	adds	r2, r3, #1
    12d6:	69fb      	ldr	r3, [r7, #28]
    12d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    12dc:	e7e2      	b.n	12a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    12de:	4b61      	ldr	r3, [pc, #388]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	4a70      	ldr	r2, [pc, #448]	; (14a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    12e4:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    12e6:	4b70      	ldr	r3, [pc, #448]	; (14a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    12e8:	4a70      	ldr	r2, [pc, #448]	; (14ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    12ea:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    12ec:	4b5d      	ldr	r3, [pc, #372]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	2200      	movs	r2, #0
    12f4:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    12f6:	69fa      	ldr	r2, [r7, #28]
    12f8:	69fb      	ldr	r3, [r7, #28]
    12fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    12fe:	4619      	mov	r1, r3
    1300:	4610      	mov	r0, r2
    1302:	4b6b      	ldr	r3, [pc, #428]	; (14b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    1304:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    1306:	7dfb      	ldrb	r3, [r7, #23]
    1308:	2b00      	cmp	r3, #0
    130a:	dd02      	ble.n	1312 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    130c:	7dfb      	ldrb	r3, [r7, #23]
    130e:	2b7f      	cmp	r3, #127	; 0x7f
    1310:	dd05      	ble.n	131e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    1312:	69f8      	ldr	r0, [r7, #28]
    1314:	4b67      	ldr	r3, [pc, #412]	; (14b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    1316:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    1318:	f06f 030b 	mvn.w	r3, #11
    131c:	e2fc      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
    131e:	69f8      	ldr	r0, [r7, #28]
    1320:	4b50      	ldr	r3, [pc, #320]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	6819      	ldr	r1, [r3, #0]
    1326:	69fb      	ldr	r3, [r7, #28]
    1328:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    132c:	4b50      	ldr	r3, [pc, #320]	; (1470 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    132e:	681d      	ldr	r5, [r3, #0]
    1330:	4b51      	ldr	r3, [pc, #324]	; (1478 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	693a      	ldr	r2, [r7, #16]
    1336:	9203      	str	r2, [sp, #12]
    1338:	2209      	movs	r2, #9
    133a:	9202      	str	r2, [sp, #8]
    133c:	9301      	str	r3, [sp, #4]
    133e:	230b      	movs	r3, #11
    1340:	9300      	str	r3, [sp, #0]
    1342:	462b      	mov	r3, r5
    1344:	4622      	mov	r2, r4
    1346:	4c5c      	ldr	r4, [pc, #368]	; (14b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    1348:	47a0      	blx	r4
    134a:	4603      	mov	r3, r0
    134c:	461a      	mov	r2, r3
    134e:	69fb      	ldr	r3, [r7, #28]
    1350:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    1354:	69fb      	ldr	r3, [r7, #28]
    1356:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    135a:	2b00      	cmp	r3, #0
    135c:	d006      	beq.n	136c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    135e:	69f8      	ldr	r0, [r7, #28]
    1360:	4b54      	ldr	r3, [pc, #336]	; (14b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    1362:	4798      	blx	r3
    1364:	69fb      	ldr	r3, [r7, #28]
    1366:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    136a:	e2d5      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    136c:	69fb      	ldr	r3, [r7, #28]
    136e:	2200      	movs	r2, #0
    1370:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1374:	69fb      	ldr	r3, [r7, #28]
    1376:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    137a:	2b00      	cmp	r3, #0
    137c:	f040 80a4 	bne.w	14c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    1380:	69fb      	ldr	r3, [r7, #28]
    1382:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1386:	2b00      	cmp	r3, #0
    1388:	d108      	bne.n	139c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    138a:	7dfb      	ldrb	r3, [r7, #23]
    138c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    1390:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    1392:	7dfb      	ldrb	r3, [r7, #23]
    1394:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    1398:	62bb      	str	r3, [r7, #40]	; 0x28
    139a:	e017      	b.n	13cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    139c:	69fb      	ldr	r3, [r7, #28]
    139e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    13a2:	4946      	ldr	r1, [pc, #280]	; (14bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    13a4:	4613      	mov	r3, r2
    13a6:	005b      	lsls	r3, r3, #1
    13a8:	4413      	add	r3, r2
    13aa:	009b      	lsls	r3, r3, #2
    13ac:	440b      	add	r3, r1
    13ae:	3364      	adds	r3, #100	; 0x64
    13b0:	681b      	ldr	r3, [r3, #0]
    13b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    13b4:	69fb      	ldr	r3, [r7, #28]
    13b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    13ba:	4940      	ldr	r1, [pc, #256]	; (14bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    13bc:	4613      	mov	r3, r2
    13be:	005b      	lsls	r3, r3, #1
    13c0:	4413      	add	r3, r2
    13c2:	009b      	lsls	r3, r3, #2
    13c4:	440b      	add	r3, r1
    13c6:	3368      	adds	r3, #104	; 0x68
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    13cc:	69fb      	ldr	r3, [r7, #28]
    13ce:	f103 0e04 	add.w	lr, r3, #4
    13d2:	4b24      	ldr	r3, [pc, #144]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    13d4:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    13d6:	69fb      	ldr	r3, [r7, #28]
    13d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    13dc:	009b      	lsls	r3, r3, #2
    13de:	4413      	add	r3, r2
    13e0:	685b      	ldr	r3, [r3, #4]
    13e2:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    13e4:	69fb      	ldr	r3, [r7, #28]
    13e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    13ea:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    13ee:	69fb      	ldr	r3, [r7, #28]
    13f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    13f4:	2b00      	cmp	r3, #0
    13f6:	d003      	beq.n	1400 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    13f8:	4b1a      	ldr	r3, [pc, #104]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    13fa:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    13fc:	685b      	ldr	r3, [r3, #4]
    13fe:	e000      	b.n	1402 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    1400:	2300      	movs	r3, #0
    1402:	4920      	ldr	r1, [pc, #128]	; (1484 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    1404:	6809      	ldr	r1, [r1, #0]
    1406:	4817      	ldr	r0, [pc, #92]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1408:	6800      	ldr	r0, [r0, #0]
    140a:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    140c:	69fc      	ldr	r4, [r7, #28]
    140e:	f8d4 4150 	ldr.w	r4, [r4, #336]	; 0x150
		err = CO_SDO_init(
    1412:	3406      	adds	r4, #6
    1414:	4d13      	ldr	r5, [pc, #76]	; (1464 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1416:	682d      	ldr	r5, [r5, #0]
    1418:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    141a:	69fe      	ldr	r6, [r7, #28]
    141c:	f8d6 6150 	ldr.w	r6, [r6, #336]	; 0x150
		err = CO_SDO_init(
    1420:	3607      	adds	r6, #7
    1422:	9609      	str	r6, [sp, #36]	; 0x24
    1424:	9508      	str	r5, [sp, #32]
    1426:	9407      	str	r4, [sp, #28]
    1428:	9006      	str	r0, [sp, #24]
    142a:	7df8      	ldrb	r0, [r7, #23]
    142c:	9005      	str	r0, [sp, #20]
    142e:	9104      	str	r1, [sp, #16]
    1430:	2137      	movs	r1, #55	; 0x37
    1432:	9103      	str	r1, [sp, #12]
    1434:	4922      	ldr	r1, [pc, #136]	; (14c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    1436:	9102      	str	r1, [sp, #8]
    1438:	9301      	str	r3, [sp, #4]
    143a:	9200      	str	r2, [sp, #0]
    143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    143e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1440:	68f9      	ldr	r1, [r7, #12]
    1442:	4670      	mov	r0, lr
    1444:	4c1f      	ldr	r4, [pc, #124]	; (14c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    1446:	47a0      	blx	r4
    1448:	4603      	mov	r3, r0
    144a:	461a      	mov	r2, r3
    144c:	69fb      	ldr	r3, [r7, #28]
    144e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    1452:	69fb      	ldr	r3, [r7, #28]
    1454:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1458:	1c5a      	adds	r2, r3, #1
    145a:	69fb      	ldr	r3, [r7, #28]
    145c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1460:	e788      	b.n	1374 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    1462:	bf00      	nop
    1464:	20001130 	.word	0x20001130
    1468:	200010f4 	.word	0x200010f4
    146c:	20001144 	.word	0x20001144
    1470:	20001134 	.word	0x20001134
    1474:	20001168 	.word	0x20001168
    1478:	20001138 	.word	0x20001138
    147c:	20001218 	.word	0x20001218
    1480:	200012a8 	.word	0x200012a8
    1484:	2000113c 	.word	0x2000113c
    1488:	20001330 	.word	0x20001330
    148c:	200015c4 	.word	0x200015c4
    1490:	20001630 	.word	0x20001630
    1494:	2000164c 	.word	0x2000164c
    1498:	20001670 	.word	0x20001670
    149c:	200016ac 	.word	0x200016ac
    14a0:	2000182c 	.word	0x2000182c
    14a4:	2000198c 	.word	0x2000198c
    14a8:	20001140 	.word	0x20001140
    14ac:	200019a4 	.word	0x200019a4
    14b0:	00001ba9 	.word	0x00001ba9
    14b4:	00001945 	.word	0x00001945
    14b8:	00001c0d 	.word	0x00001c0d
    14bc:	20000184 	.word	0x20000184
    14c0:	0001245c 	.word	0x0001245c
    14c4:	00003bb5 	.word	0x00003bb5
	}

	if(err){CO_delete(); return err;}
    14c8:	69fb      	ldr	r3, [r7, #28]
    14ca:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    14ce:	2b00      	cmp	r3, #0
    14d0:	d006      	beq.n	14e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    14d2:	69f8      	ldr	r0, [r7, #28]
    14d4:	4b7c      	ldr	r3, [pc, #496]	; (16c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    14d6:	4798      	blx	r3
    14d8:	69fb      	ldr	r3, [r7, #28]
    14da:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    14de:	e21b      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
    14e0:	69fb      	ldr	r3, [r7, #28]
    14e2:	1d18      	adds	r0, r3, #4
    14e4:	4b79      	ldr	r3, [pc, #484]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	6899      	ldr	r1, [r3, #8]
    14ea:	4b78      	ldr	r3, [pc, #480]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	68dc      	ldr	r4, [r3, #12]
    14f0:	4b76      	ldr	r3, [pc, #472]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	685d      	ldr	r5, [r3, #4]
    14f6:	4b75      	ldr	r3, [pc, #468]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    14fc:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    14fe:	3280      	adds	r2, #128	; 0x80
    1500:	9207      	str	r2, [sp, #28]
    1502:	2202      	movs	r2, #2
    1504:	9206      	str	r2, [sp, #24]
    1506:	9305      	str	r3, [sp, #20]
    1508:	2308      	movs	r3, #8
    150a:	9304      	str	r3, [sp, #16]
    150c:	4b70      	ldr	r3, [pc, #448]	; (16d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    150e:	9303      	str	r3, [sp, #12]
    1510:	4b70      	ldr	r3, [pc, #448]	; (16d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    1512:	9302      	str	r3, [sp, #8]
    1514:	230a      	movs	r3, #10
    1516:	9301      	str	r3, [sp, #4]
    1518:	4b6f      	ldr	r3, [pc, #444]	; (16d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    151a:	9300      	str	r3, [sp, #0]
    151c:	462b      	mov	r3, r5
    151e:	4622      	mov	r2, r4
    1520:	4c6e      	ldr	r4, [pc, #440]	; (16dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    1522:	47a0      	blx	r4
    1524:	4603      	mov	r3, r0
    1526:	461a      	mov	r2, r3
    1528:	69fb      	ldr	r3, [r7, #28]
    152a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

	if(err){CO_delete(); return err;}
    152e:	69fb      	ldr	r3, [r7, #28]
    1530:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1534:	2b00      	cmp	r3, #0
    1536:	d006      	beq.n	1546 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    1538:	69f8      	ldr	r0, [r7, #28]
    153a:	4b63      	ldr	r3, [pc, #396]	; (16c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    153c:	4798      	blx	r3
    153e:	69fb      	ldr	r3, [r7, #28]
    1540:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1544:	e1e8      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
    1546:	4b61      	ldr	r3, [pc, #388]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1548:	681b      	ldr	r3, [r3, #0]
    154a:	6918      	ldr	r0, [r3, #16]
    154c:	4b5f      	ldr	r3, [pc, #380]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	68dc      	ldr	r4, [r3, #12]
    1552:	4b5e      	ldr	r3, [pc, #376]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1554:	681b      	ldr	r3, [r3, #0]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	4a5c      	ldr	r2, [pc, #368]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    155a:	6812      	ldr	r2, [r2, #0]
    155c:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    155e:	7df9      	ldrb	r1, [r7, #23]
    1560:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    1564:	7dfd      	ldrb	r5, [r7, #23]
    1566:	9106      	str	r1, [sp, #24]
    1568:	2108      	movs	r1, #8
    156a:	9105      	str	r1, [sp, #20]
    156c:	9204      	str	r2, [sp, #16]
    156e:	2200      	movs	r2, #0
    1570:	9203      	str	r2, [sp, #12]
    1572:	2200      	movs	r2, #0
    1574:	9202      	str	r2, [sp, #8]
    1576:	9301      	str	r3, [sp, #4]
    1578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    157c:	9300      	str	r3, [sp, #0]
    157e:	462b      	mov	r3, r5
    1580:	4622      	mov	r2, r4
    1582:	4601      	mov	r1, r0
    1584:	69f8      	ldr	r0, [r7, #28]
    1586:	4c56      	ldr	r4, [pc, #344]	; (16e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    1588:	47a0      	blx	r4
    158a:	4603      	mov	r3, r0
    158c:	461a      	mov	r2, r3
    158e:	69fb      	ldr	r3, [r7, #28]
    1590:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

	if(err){CO_delete(); return err;}
    1594:	69fb      	ldr	r3, [r7, #28]
    1596:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    159a:	2b00      	cmp	r3, #0
    159c:	d006      	beq.n	15ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
    159e:	69f8      	ldr	r0, [r7, #28]
    15a0:	4b49      	ldr	r3, [pc, #292]	; (16c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    15a2:	4798      	blx	r3
    15a4:	69fb      	ldr	r3, [r7, #28]
    15a6:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    15aa:	e1b5      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
    15ac:	7dfb      	ldrb	r3, [r7, #23]
    15ae:	2b01      	cmp	r3, #1
    15b0:	d10d      	bne.n	15ce <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    15b2:	69f8      	ldr	r0, [r7, #28]
    15b4:	2300      	movs	r3, #0
    15b6:	9301      	str	r3, [sp, #4]
    15b8:	2302      	movs	r3, #2
    15ba:	9300      	str	r3, [sp, #0]
    15bc:	2300      	movs	r3, #0
    15be:	2200      	movs	r2, #0
    15c0:	2100      	movs	r1, #0
    15c2:	4c48      	ldr	r4, [pc, #288]	; (16e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    15c4:	47a0      	blx	r4
    15c6:	4602      	mov	r2, r0
    15c8:	69fb      	ldr	r3, [r7, #28]
    15ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	}else{

	}
       
	err = SYNC_Init(
    15ce:	69fb      	ldr	r3, [r7, #28]
    15d0:	f103 060c 	add.w	r6, r3, #12
    15d4:	4b3d      	ldr	r3, [pc, #244]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15d6:	681b      	ldr	r3, [r3, #0]
    15d8:	695b      	ldr	r3, [r3, #20]
    15da:	60fb      	str	r3, [r7, #12]
    15dc:	4b3b      	ldr	r3, [pc, #236]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	689a      	ldr	r2, [r3, #8]
    15e2:	60ba      	str	r2, [r7, #8]
    15e4:	4b39      	ldr	r3, [pc, #228]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	6858      	ldr	r0, [r3, #4]
    15ea:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    15ec:	4b37      	ldr	r3, [pc, #220]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    15f2:	603b      	str	r3, [r7, #0]
    15f4:	4b3c      	ldr	r3, [pc, #240]	; (16e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    15f6:	689b      	ldr	r3, [r3, #8]
    15f8:	4a3b      	ldr	r2, [pc, #236]	; (16e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    15fa:	68d2      	ldr	r2, [r2, #12]
    15fc:	493a      	ldr	r1, [pc, #232]	; (16e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    15fe:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    1602:	4832      	ldr	r0, [pc, #200]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1604:	6800      	ldr	r0, [r0, #0]
    1606:	6800      	ldr	r0, [r0, #0]
    1608:	4c30      	ldr	r4, [pc, #192]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    160a:	6824      	ldr	r4, [r4, #0]
    160c:	6824      	ldr	r4, [r4, #0]
    160e:	2501      	movs	r5, #1
    1610:	9507      	str	r5, [sp, #28]
    1612:	9406      	str	r4, [sp, #24]
    1614:	2401      	movs	r4, #1
    1616:	9405      	str	r4, [sp, #20]
    1618:	9004      	str	r0, [sp, #16]
    161a:	9103      	str	r1, [sp, #12]
    161c:	9202      	str	r2, [sp, #8]
    161e:	9301      	str	r3, [sp, #4]
    1620:	683c      	ldr	r4, [r7, #0]
    1622:	9400      	str	r4, [sp, #0]
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	68ba      	ldr	r2, [r7, #8]
    1628:	68f9      	ldr	r1, [r7, #12]
    162a:	4630      	mov	r0, r6
    162c:	4c2f      	ldr	r4, [pc, #188]	; (16ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    162e:	47a0      	blx	r4
    1630:	4603      	mov	r3, r0
    1632:	461a      	mov	r2, r3
    1634:	69fb      	ldr	r3, [r7, #28]
    1636:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    163a:	69fb      	ldr	r3, [r7, #28]
    163c:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1640:	2b00      	cmp	r3, #0
    1642:	d006      	beq.n	1652 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
    1644:	69f8      	ldr	r0, [r7, #28]
    1646:	4b20      	ldr	r3, [pc, #128]	; (16c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    1648:	4798      	blx	r3
    164a:	69fb      	ldr	r3, [r7, #28]
    164c:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1650:	e162      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
    1652:	69fb      	ldr	r3, [r7, #28]
    1654:	2200      	movs	r2, #0
    1656:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    165a:	69fb      	ldr	r3, [r7, #28]
    165c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1660:	2b03      	cmp	r3, #3
    1662:	f200 8097 	bhi.w	1794 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    1666:	4b19      	ldr	r3, [pc, #100]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    166e:	69fb      	ldr	r3, [r7, #28]
    1670:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1674:	1c9a      	adds	r2, r3, #2
    1676:	69fb      	ldr	r3, [r7, #28]
    1678:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		err = CO_RPDO_init(
    167c:	69fb      	ldr	r3, [r7, #28]
    167e:	f103 0e14 	add.w	lr, r3, #20
    1682:	4b12      	ldr	r3, [pc, #72]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1684:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    1686:	69fa      	ldr	r2, [r7, #28]
    1688:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
		err = CO_RPDO_init(
    168c:	3206      	adds	r2, #6
    168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1692:	60fb      	str	r3, [r7, #12]
    1694:	4b0d      	ldr	r3, [pc, #52]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	689b      	ldr	r3, [r3, #8]
    169a:	60bb      	str	r3, [r7, #8]
    169c:	4b0b      	ldr	r3, [pc, #44]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	685b      	ldr	r3, [r3, #4]
    16a2:	607b      	str	r3, [r7, #4]
    16a4:	4b09      	ldr	r3, [pc, #36]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    16aa:	4b08      	ldr	r3, [pc, #32]	; (16cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    16b0:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    16b2:	69fb      	ldr	r3, [r7, #28]
    16b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_RPDO_init(
    16b8:	2b03      	cmp	r3, #3
    16ba:	d819      	bhi.n	16f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    16bc:	69fb      	ldr	r3, [r7, #28]
    16be:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_RPDO_init(
    16c2:	3302      	adds	r3, #2
    16c4:	021a      	lsls	r2, r3, #8
    16c6:	e014      	b.n	16f2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
    16c8:	00001945 	.word	0x00001945
    16cc:	20001130 	.word	0x20001130
    16d0:	20000014 	.word	0x20000014
    16d4:	2000000c 	.word	0x2000000c
    16d8:	2000003c 	.word	0x2000003c
    16dc:	00002275 	.word	0x00002275
    16e0:	000028c9 	.word	0x000028c9
    16e4:	00001e79 	.word	0x00001e79
    16e8:	20000184 	.word	0x20000184
    16ec:	00004385 	.word	0x00004385
    16f0:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    16f2:	69fb      	ldr	r3, [r7, #28]
    16f4:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    16f8:	460b      	mov	r3, r1
    16fa:	005b      	lsls	r3, r3, #1
    16fc:	440b      	add	r3, r1
    16fe:	009b      	lsls	r3, r3, #2
    1700:	3368      	adds	r3, #104	; 0x68
    1702:	4987      	ldr	r1, [pc, #540]	; (1920 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    1704:	440b      	add	r3, r1
    1706:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    1708:	69fb      	ldr	r3, [r7, #28]
    170a:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    170e:	460b      	mov	r3, r1
    1710:	00db      	lsls	r3, r3, #3
    1712:	440b      	add	r3, r1
    1714:	009b      	lsls	r3, r3, #2
    1716:	3398      	adds	r3, #152	; 0x98
    1718:	4981      	ldr	r1, [pc, #516]	; (1920 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    171a:	440b      	add	r3, r1
    171c:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    171e:	69f9      	ldr	r1, [r7, #28]
    1720:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
		err = CO_RPDO_init(
    1724:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    1728:	69fd      	ldr	r5, [r7, #28]
    172a:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
		err = CO_RPDO_init(
    172e:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    1732:	69fe      	ldr	r6, [r7, #28]
    1734:	f8d6 6148 	ldr.w	r6, [r6, #328]	; 0x148
    1738:	960a      	str	r6, [sp, #40]	; 0x28
    173a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    173c:	9609      	str	r6, [sp, #36]	; 0x24
    173e:	9508      	str	r5, [sp, #32]
    1740:	9107      	str	r1, [sp, #28]
    1742:	9306      	str	r3, [sp, #24]
    1744:	9405      	str	r4, [sp, #20]
    1746:	2300      	movs	r3, #0
    1748:	9304      	str	r3, [sp, #16]
    174a:	9203      	str	r2, [sp, #12]
    174c:	7dfb      	ldrb	r3, [r7, #23]
    174e:	9302      	str	r3, [sp, #8]
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	9301      	str	r3, [sp, #4]
    1754:	9000      	str	r0, [sp, #0]
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	68ba      	ldr	r2, [r7, #8]
    175a:	68f9      	ldr	r1, [r7, #12]
    175c:	4670      	mov	r0, lr
    175e:	4c71      	ldr	r4, [pc, #452]	; (1924 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    1760:	47a0      	blx	r4
    1762:	4603      	mov	r3, r0
    1764:	461a      	mov	r2, r3
    1766:	69fb      	ldr	r3, [r7, #28]
    1768:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    176c:	69fb      	ldr	r3, [r7, #28]
    176e:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1772:	2b00      	cmp	r3, #0
    1774:	d006      	beq.n	1784 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
    1776:	69f8      	ldr	r0, [r7, #28]
    1778:	4b6b      	ldr	r3, [pc, #428]	; (1928 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    177a:	4798      	blx	r3
    177c:	69fb      	ldr	r3, [r7, #28]
    177e:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1782:	e0c9      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
    1784:	69fb      	ldr	r3, [r7, #28]
    1786:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    178a:	1c5a      	adds	r2, r3, #1
    178c:	69fb      	ldr	r3, [r7, #28]
    178e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1792:	e762      	b.n	165a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    1794:	69fb      	ldr	r3, [r7, #28]
    1796:	2200      	movs	r2, #0
    1798:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    179c:	69fb      	ldr	r3, [r7, #28]
    179e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    17a2:	2b03      	cmp	r3, #3
    17a4:	d879      	bhi.n	189a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
    17a6:	69fb      	ldr	r3, [r7, #28]
    17a8:	f103 0e14 	add.w	lr, r3, #20
    17ac:	4b5f      	ldr	r3, [pc, #380]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    17ae:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    17b0:	69fa      	ldr	r2, [r7, #28]
    17b2:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
		err = CO_TPDO_init(
    17b6:	320a      	adds	r2, #10
    17b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    17bc:	60fb      	str	r3, [r7, #12]
    17be:	4b5b      	ldr	r3, [pc, #364]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	689b      	ldr	r3, [r3, #8]
    17c4:	60bb      	str	r3, [r7, #8]
    17c6:	4b59      	ldr	r3, [pc, #356]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	685b      	ldr	r3, [r3, #4]
    17cc:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    17ce:	4b57      	ldr	r3, [pc, #348]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    17d4:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    17d6:	69fb      	ldr	r3, [r7, #28]
    17d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_TPDO_init(
    17dc:	2b03      	cmp	r3, #3
    17de:	d806      	bhi.n	17ee <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    17e0:	69fb      	ldr	r3, [r7, #28]
    17e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    17e6:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    17e8:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    17ec:	e000      	b.n	17f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
    17ee:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    17f0:	69fb      	ldr	r3, [r7, #28]
    17f2:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    17f6:	460b      	mov	r3, r1
    17f8:	00db      	lsls	r3, r3, #3
    17fa:	1a5b      	subs	r3, r3, r1
    17fc:	009b      	lsls	r3, r3, #2
    17fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
    1802:	4947      	ldr	r1, [pc, #284]	; (1920 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    1804:	440b      	add	r3, r1
    1806:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    1808:	69fb      	ldr	r3, [r7, #28]
    180a:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    180e:	460b      	mov	r3, r1
    1810:	00db      	lsls	r3, r3, #3
    1812:	440b      	add	r3, r1
    1814:	009b      	lsls	r3, r3, #2
    1816:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    181a:	4941      	ldr	r1, [pc, #260]	; (1920 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    181c:	440b      	add	r3, r1
    181e:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    1820:	69f9      	ldr	r1, [r7, #28]
    1822:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
		err = CO_TPDO_init(
    1826:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    182a:	69fc      	ldr	r4, [r7, #28]
    182c:	f8d4 4150 	ldr.w	r4, [r4, #336]	; 0x150
		err = CO_TPDO_init(
    1830:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    1834:	4d3d      	ldr	r5, [pc, #244]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1836:	682d      	ldr	r5, [r5, #0]
    1838:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    183a:	69fe      	ldr	r6, [r7, #28]
    183c:	f8d6 6150 	ldr.w	r6, [r6, #336]	; 0x150
		err = CO_TPDO_init(
    1840:	3603      	adds	r6, #3
    1842:	9609      	str	r6, [sp, #36]	; 0x24
    1844:	9508      	str	r5, [sp, #32]
    1846:	9407      	str	r4, [sp, #28]
    1848:	9106      	str	r1, [sp, #24]
    184a:	9305      	str	r3, [sp, #20]
    184c:	9004      	str	r0, [sp, #16]
    184e:	2300      	movs	r3, #0
    1850:	9303      	str	r3, [sp, #12]
    1852:	9202      	str	r2, [sp, #8]
    1854:	7dfb      	ldrb	r3, [r7, #23]
    1856:	9301      	str	r3, [sp, #4]
    1858:	683b      	ldr	r3, [r7, #0]
    185a:	9300      	str	r3, [sp, #0]
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	68ba      	ldr	r2, [r7, #8]
    1860:	68f9      	ldr	r1, [r7, #12]
    1862:	4670      	mov	r0, lr
    1864:	4c32      	ldr	r4, [pc, #200]	; (1930 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    1866:	47a0      	blx	r4
    1868:	4603      	mov	r3, r0
    186a:	461a      	mov	r2, r3
    186c:	69fb      	ldr	r3, [r7, #28]
    186e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
		if(err){CO_delete(); return err;}
    1872:	69fb      	ldr	r3, [r7, #28]
    1874:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1878:	2b00      	cmp	r3, #0
    187a:	d006      	beq.n	188a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
    187c:	69f8      	ldr	r0, [r7, #28]
    187e:	4b2a      	ldr	r3, [pc, #168]	; (1928 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    1880:	4798      	blx	r3
    1882:	69fb      	ldr	r3, [r7, #28]
    1884:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    1888:	e046      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
    188a:	69fb      	ldr	r3, [r7, #28]
    188c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    1890:	1c5a      	adds	r2, r3, #1
    1892:	69fb      	ldr	r3, [r7, #28]
    1894:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    1898:	e780      	b.n	179c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
    189a:	69fb      	ldr	r3, [r7, #28]
    189c:	f103 0220 	add.w	r2, r3, #32
    18a0:	69fb      	ldr	r3, [r7, #28]
    18a2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
    18a6:	4619      	mov	r1, r3
    18a8:	4610      	mov	r0, r2
    18aa:	4b22      	ldr	r3, [pc, #136]	; (1934 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
    18ac:	4798      	blx	r3
	err = CO_HBconsumer_init(
    18ae:	69fb      	ldr	r3, [r7, #28]
    18b0:	f103 0020 	add.w	r0, r3, #32
    18b4:	4b1d      	ldr	r3, [pc, #116]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    18ba:	4b1c      	ldr	r3, [pc, #112]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	689d      	ldr	r5, [r3, #8]
    18c0:	4b1a      	ldr	r3, [pc, #104]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    18c2:	681b      	ldr	r3, [r3, #0]
    18c4:	685e      	ldr	r6, [r3, #4]
    18c6:	4b1c      	ldr	r3, [pc, #112]	; (1938 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	4a18      	ldr	r2, [pc, #96]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    18cc:	6812      	ldr	r2, [r2, #0]
    18ce:	6812      	ldr	r2, [r2, #0]
    18d0:	2107      	movs	r1, #7
    18d2:	9104      	str	r1, [sp, #16]
    18d4:	9203      	str	r2, [sp, #12]
    18d6:	2204      	movs	r2, #4
    18d8:	9202      	str	r2, [sp, #8]
    18da:	9301      	str	r3, [sp, #4]
    18dc:	4b17      	ldr	r3, [pc, #92]	; (193c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
    18de:	9300      	str	r3, [sp, #0]
    18e0:	4633      	mov	r3, r6
    18e2:	462a      	mov	r2, r5
    18e4:	4621      	mov	r1, r4
    18e6:	4c16      	ldr	r4, [pc, #88]	; (1940 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
    18e8:	47a0      	blx	r4
    18ea:	4603      	mov	r3, r0
    18ec:	461a      	mov	r2, r3
    18ee:	69fb      	ldr	r3, [r7, #28]
    18f0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    18f4:	69fb      	ldr	r3, [r7, #28]
    18f6:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    18fa:	2b00      	cmp	r3, #0
    18fc:	d006      	beq.n	190c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
    18fe:	69f8      	ldr	r0, [r7, #28]
    1900:	4b09      	ldr	r3, [pc, #36]	; (1928 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    1902:	4798      	blx	r3
    1904:	69fb      	ldr	r3, [r7, #28]
    1906:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    190a:	e005      	b.n	1918 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    190c:	4b07      	ldr	r3, [pc, #28]	; (192c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    190e:	681a      	ldr	r2, [r3, #0]
    1910:	69fb      	ldr	r3, [r7, #28]
    1912:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	return CO_ERROR_NO;
    1916:	2300      	movs	r3, #0
}
    1918:	4618      	mov	r0, r3
    191a:	3734      	adds	r7, #52	; 0x34
    191c:	46bd      	mov	sp, r7
    191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1920:	20000184 	.word	0x20000184
    1924:	000035ad 	.word	0x000035ad
    1928:	00001945 	.word	0x00001945
    192c:	20001130 	.word	0x20001130
    1930:	000036b5 	.word	0x000036b5
    1934:	000027d1 	.word	0x000027d1
    1938:	20001140 	.word	0x20001140
    193c:	200001b4 	.word	0x200001b4
    1940:	00002701 	.word	0x00002701

00001944 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    194c:	687a      	ldr	r2, [r7, #4]
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    1954:	4619      	mov	r1, r3
    1956:	4610      	mov	r0, r2
    1958:	4b04      	ldr	r3, [pc, #16]	; (196c <_ZN8CO_Class9CO_deleteEv+0x28>)
    195a:	4798      	blx	r3
	CANmodule_Disable();
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	4618      	mov	r0, r3
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    1962:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    1964:	bf00      	nop
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}
    196c:	00001ba9 	.word	0x00001ba9
    1970:	00001d65 	.word	0x00001d65

00001974 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    1980:	4618      	mov	r0, r3
    1982:	370c      	adds	r7, #12
    1984:	46bd      	mov	sp, r7
    1986:	bc80      	pop	{r7}
    1988:	4770      	bx	lr
	...

0000198c <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen_driver;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    198c:	b580      	push	{r7, lr}
    198e:	b082      	sub	sp, #8
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
    1994:	4b12      	ldr	r3, [pc, #72]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	4a11      	ldr	r2, [pc, #68]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    199a:	6812      	ldr	r2, [r2, #0]
    199c:	3230      	adds	r2, #48	; 0x30
    199e:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
    19a0:	4b0f      	ldr	r3, [pc, #60]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	3370      	adds	r3, #112	; 0x70
    19a6:	4619      	mov	r1, r3
    19a8:	6878      	ldr	r0, [r7, #4]
    19aa:	4b0e      	ldr	r3, [pc, #56]	; (19e4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
    19ac:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
    19ae:	4b0c      	ldr	r3, [pc, #48]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    19b6:	b2db      	uxtb	r3, r3
    19b8:	2b00      	cmp	r3, #0
    19ba:	d007      	beq.n	19cc <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
    19bc:	4b08      	ldr	r3, [pc, #32]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	681b      	ldr	r3, [r3, #0]
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	4a06      	ldr	r2, [pc, #24]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    19c6:	6812      	ldr	r2, [r2, #0]
    19c8:	4610      	mov	r0, r2
    19ca:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	2201      	movs	r2, #1
    19d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    19d6:	bf00      	nop
    19d8:	3708      	adds	r7, #8
    19da:	46bd      	mov	sp, r7
    19dc:	bd80      	pop	{r7, pc}
    19de:	bf00      	nop
    19e0:	200019e4 	.word	0x200019e4
    19e4:	00005c89 	.word	0x00005c89

000019e8 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    19e8:	b590      	push	{r4, r7, lr}
    19ea:	b083      	sub	sp, #12
    19ec:	af00      	add	r7, sp, #0
    19ee:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    19f2:	681c      	ldr	r4, [r3, #0]
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	4618      	mov	r0, r3
    19fa:	4b07      	ldr	r3, [pc, #28]	; (1a18 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    19fc:	4798      	blx	r3
    19fe:	4603      	mov	r3, r0
    1a00:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
    1a02:	4b04      	ldr	r3, [pc, #16]	; (1a14 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	2201      	movs	r2, #1
    1a08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    1a0c:	bf00      	nop
    1a0e:	370c      	adds	r7, #12
    1a10:	46bd      	mov	sp, r7
    1a12:	bd90      	pop	{r4, r7, pc}
    1a14:	200019e4 	.word	0x200019e4
    1a18:	00001975 	.word	0x00001975

00001a1c <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b083      	sub	sp, #12
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
    1a24:	4b04      	ldr	r3, [pc, #16]	; (1a38 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	2201      	movs	r2, #1
    1a2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
    1a2e:	bf00      	nop
    1a30:	370c      	adds	r7, #12
    1a32:	46bd      	mov	sp, r7
    1a34:	bc80      	pop	{r7}
    1a36:	4770      	bx	lr
    1a38:	200019e4 	.word	0x200019e4

00001a3c <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	3304      	adds	r3, #4
    1a48:	4618      	mov	r0, r3
    1a4a:	4b13      	ldr	r3, [pc, #76]	; (1a98 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    1a4c:	4798      	blx	r3
    1a4e:	6878      	ldr	r0, [r7, #4]
    1a50:	4b12      	ldr	r3, [pc, #72]	; (1a9c <_ZN15CO_Driver_ClassC1Ev+0x60>)
    1a52:	4798      	blx	r3
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	330c      	adds	r3, #12
    1a58:	4618      	mov	r0, r3
    1a5a:	4b11      	ldr	r3, [pc, #68]	; (1aa0 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    1a5c:	4798      	blx	r3
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	3314      	adds	r3, #20
    1a62:	4618      	mov	r0, r3
    1a64:	4b0f      	ldr	r3, [pc, #60]	; (1aa4 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    1a66:	4798      	blx	r3
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	3320      	adds	r3, #32
    1a6c:	4618      	mov	r0, r3
    1a6e:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <_ZN15CO_Driver_ClassC1Ev+0x6c>)
    1a70:	4798      	blx	r3
    1a72:	4a0e      	ldr	r2, [pc, #56]	; (1aac <_ZN15CO_Driver_ClassC1Ev+0x70>)
    1a74:	687b      	ldr	r3, [r7, #4]
    1a76:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	2200      	movs	r2, #0
    1a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
    1a80:	4a0b      	ldr	r2, [pc, #44]	; (1ab0 <_ZN15CO_Driver_ClassC1Ev+0x74>)
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	2200      	movs	r2, #0
    1a8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
} //CO_Driver_Class
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	4618      	mov	r0, r3
    1a92:	3708      	adds	r7, #8
    1a94:	46bd      	mov	sp, r7
    1a96:	bd80      	pop	{r7, pc}
    1a98:	00002149 	.word	0x00002149
    1a9c:	0000289f 	.word	0x0000289f
    1aa0:	000040ad 	.word	0x000040ad
    1aa4:	00002a01 	.word	0x00002a01
    1aa8:	000026cd 	.word	0x000026cd
    1aac:	00011e40 	.word	0x00011e40
    1ab0:	200019e4 	.word	0x200019e4

00001ab4 <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
    1ab4:	b580      	push	{r7, lr}
    1ab6:	b082      	sub	sp, #8
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
    1abc:	4a0f      	ldr	r2, [pc, #60]	; (1afc <_ZN15CO_Driver_ClassD1Ev+0x48>)
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	601a      	str	r2, [r3, #0]
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	3320      	adds	r3, #32
    1ac6:	4618      	mov	r0, r3
    1ac8:	4b0d      	ldr	r3, [pc, #52]	; (1b00 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    1aca:	4798      	blx	r3
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	3314      	adds	r3, #20
    1ad0:	4618      	mov	r0, r3
    1ad2:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    1ad4:	4798      	blx	r3
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	330c      	adds	r3, #12
    1ada:	4618      	mov	r0, r3
    1adc:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    1ade:	4798      	blx	r3
    1ae0:	6878      	ldr	r0, [r7, #4]
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <_ZN15CO_Driver_ClassD1Ev+0x58>)
    1ae4:	4798      	blx	r3
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	3304      	adds	r3, #4
    1aea:	4618      	mov	r0, r3
    1aec:	4b08      	ldr	r3, [pc, #32]	; (1b10 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
    1aee:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	4618      	mov	r0, r3
    1af4:	3708      	adds	r7, #8
    1af6:	46bd      	mov	sp, r7
    1af8:	bd80      	pop	{r7, pc}
    1afa:	bf00      	nop
    1afc:	00011e40 	.word	0x00011e40
    1b00:	000026ed 	.word	0x000026ed
    1b04:	00002a15 	.word	0x00002a15
    1b08:	000040c1 	.word	0x000040c1
    1b0c:	000028b3 	.word	0x000028b3
    1b10:	00002171 	.word	0x00002171

00001b14 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    1b14:	b480      	push	{r7}
    1b16:	b085      	sub	sp, #20
    1b18:	af00      	add	r7, sp, #0
    1b1a:	60f8      	str	r0, [r7, #12]
    1b1c:	60b9      	str	r1, [r7, #8]
    1b1e:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    1b20:	68bb      	ldr	r3, [r7, #8]
    1b22:	2200      	movs	r2, #0
    1b24:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    1b26:	68bb      	ldr	r3, [r7, #8]
    1b28:	2200      	movs	r2, #0
    1b2a:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	791a      	ldrb	r2, [r3, #4]
    1b30:	68bb      	ldr	r3, [r7, #8]
    1b32:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	089a      	lsrs	r2, r3, #2
    1b3a:	68bb      	ldr	r3, [r7, #8]
    1b3c:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	b2db      	uxtb	r3, r3
    1b44:	f003 0302 	and.w	r3, r3, #2
    1b48:	b2da      	uxtb	r2, r3
    1b4a:	68bb      	ldr	r3, [r7, #8]
    1b4c:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	1d5a      	adds	r2, r3, #5
    1b52:	68bb      	ldr	r3, [r7, #8]
    1b54:	609a      	str	r2, [r3, #8]
}
    1b56:	bf00      	nop
    1b58:	3714      	adds	r7, #20
    1b5a:	46bd      	mov	sp, r7
    1b5c:	bc80      	pop	{r7}
    1b5e:	4770      	bx	lr

00001b60 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    1b60:	b590      	push	{r4, r7, lr}
    1b62:	b085      	sub	sp, #20
    1b64:	af00      	add	r7, sp, #0
    1b66:	60f8      	str	r0, [r7, #12]
    1b68:	60b9      	str	r1, [r7, #8]
    1b6a:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    1b6c:	687a      	ldr	r2, [r7, #4]
    1b6e:	68bb      	ldr	r3, [r7, #8]
    1b70:	4614      	mov	r4, r2
    1b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    1b78:	68bb      	ldr	r3, [r7, #8]
    1b7a:	7b1a      	ldrb	r2, [r3, #12]
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    1b80:	68bb      	ldr	r3, [r7, #8]
    1b82:	681a      	ldr	r2, [r3, #0]
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	f103 0015 	add.w	r0, r3, #21
    1b8e:	68bb      	ldr	r3, [r7, #8]
    1b90:	6899      	ldr	r1, [r3, #8]
    1b92:	68bb      	ldr	r3, [r7, #8]
    1b94:	7b1b      	ldrb	r3, [r3, #12]
    1b96:	461a      	mov	r2, r3
    1b98:	4b02      	ldr	r3, [pc, #8]	; (1ba4 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    1b9a:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    1b9c:	bf00      	nop
    1b9e:	3714      	adds	r7, #20
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd90      	pop	{r4, r7, pc}
    1ba4:	00011b19 	.word	0x00011b19

00001ba8 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    1ba8:	b480      	push	{r7}
    1baa:	b083      	sub	sp, #12
    1bac:	af00      	add	r7, sp, #0
    1bae:	6078      	str	r0, [r7, #4]
    1bb0:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	683a      	ldr	r2, [r7, #0]
    1bb6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    1bba:	bf00      	nop
    1bbc:	370c      	adds	r7, #12
    1bbe:	46bd      	mov	sp, r7
    1bc0:	bc80      	pop	{r7}
    1bc2:	4770      	bx	lr

00001bc4 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    1bc4:	b580      	push	{r7, lr}
    1bc6:	b084      	sub	sp, #16
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	2200      	movs	r2, #0
    1bd0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	4618      	mov	r0, r3
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    1be0:	4798      	blx	r3
    1be2:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d002      	beq.n	1bf0 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1bea:	f06f 030e 	mvn.w	r3, #14
    1bee:	e007      	b.n	1c00 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1bf6:	2201      	movs	r2, #1
    1bf8:	751a      	strb	r2, [r3, #20]
	return Error;
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	f993 30a8 	ldrsb.w	r3, [r3, #168]	; 0xa8
}
    1c00:	4618      	mov	r0, r3
    1c02:	3710      	adds	r7, #16
    1c04:	46bd      	mov	sp, r7
    1c06:	bd80      	pop	{r7, pc}
    1c08:	00005c4d 	.word	0x00005c4d

00001c0c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b086      	sub	sp, #24
    1c10:	af00      	add	r7, sp, #0
    1c12:	60f8      	str	r0, [r7, #12]
    1c14:	60b9      	str	r1, [r7, #8]
    1c16:	607a      	str	r2, [r7, #4]
    1c18:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    1c1a:	68fb      	ldr	r3, [r7, #12]
    1c1c:	687a      	ldr	r2, [r7, #4]
    1c1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    1c22:	68bb      	ldr	r3, [r7, #8]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d005      	beq.n	1c34 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d002      	beq.n	1c34 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c30:	2b00      	cmp	r3, #0
    1c32:	d102      	bne.n	1c3a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    1c34:	f04f 33ff 	mov.w	r3, #4294967295
    1c38:	e085      	b.n	1d46 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    1c3a:	68fb      	ldr	r3, [r7, #12]
    1c3c:	68ba      	ldr	r2, [r7, #8]
    1c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    1c42:	68bb      	ldr	r3, [r7, #8]
    1c44:	687a      	ldr	r2, [r7, #4]
    1c46:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    1c48:	68bb      	ldr	r3, [r7, #8]
    1c4a:	683a      	ldr	r2, [r7, #0]
    1c4c:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    1c4e:	68bb      	ldr	r3, [r7, #8]
    1c50:	6a3a      	ldr	r2, [r7, #32]
    1c52:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    1c54:	68bb      	ldr	r3, [r7, #8]
    1c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c58:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    1c5a:	68bb      	ldr	r3, [r7, #8]
    1c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1c5e:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    1c60:	68bb      	ldr	r3, [r7, #8]
    1c62:	2200      	movs	r2, #0
    1c64:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    1c66:	68bb      	ldr	r3, [r7, #8]
    1c68:	2200      	movs	r2, #0
    1c6a:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    1c6c:	68bb      	ldr	r3, [r7, #8]
    1c6e:	2200      	movs	r2, #0
    1c70:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    1c72:	68bb      	ldr	r3, [r7, #8]
    1c74:	2201      	movs	r2, #1
    1c76:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    1c78:	68bb      	ldr	r3, [r7, #8]
    1c7a:	2200      	movs	r2, #0
    1c7c:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    1c7e:	68bb      	ldr	r3, [r7, #8]
    1c80:	2200      	movs	r2, #0
    1c82:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    1c84:	68bb      	ldr	r3, [r7, #8]
    1c86:	2200      	movs	r2, #0
    1c88:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    1c8a:	68fb      	ldr	r3, [r7, #12]
    1c8c:	2200      	movs	r2, #0
    1c8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1c92:	68fb      	ldr	r3, [r7, #12]
    1c94:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1c98:	6a3b      	ldr	r3, [r7, #32]
    1c9a:	429a      	cmp	r2, r3
    1c9c:	d217      	bcs.n	1cce <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
    1c9e:	68fb      	ldr	r3, [r7, #12]
    1ca0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1ca4:	011b      	lsls	r3, r3, #4
    1ca6:	683a      	ldr	r2, [r7, #0]
    1ca8:	4413      	add	r3, r2
    1caa:	2200      	movs	r2, #0
    1cac:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    1cae:	68fb      	ldr	r3, [r7, #12]
    1cb0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1cb4:	011b      	lsls	r3, r3, #4
    1cb6:	683a      	ldr	r2, [r7, #0]
    1cb8:	4413      	add	r3, r2
    1cba:	2200      	movs	r2, #0
    1cbc:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1cc4:	1c5a      	adds	r2, r3, #1
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1ccc:	e7e1      	b.n	1c92 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
    1cce:	68fb      	ldr	r3, [r7, #12]
    1cd0:	2200      	movs	r2, #0
    1cd2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1cd6:	68fb      	ldr	r3, [r7, #12]
    1cd8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1cde:	429a      	cmp	r2, r3
    1ce0:	d20f      	bcs.n	1d02 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
    1ce2:	68fb      	ldr	r3, [r7, #12]
    1ce4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1ce8:	011b      	lsls	r3, r3, #4
    1cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cec:	4413      	add	r3, r2
    1cee:	2200      	movs	r2, #0
    1cf0:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    1cf2:	68fb      	ldr	r3, [r7, #12]
    1cf4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1cf8:	1c5a      	adds	r2, r3, #1
    1cfa:	68fb      	ldr	r3, [r7, #12]
    1cfc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1d00:	e7e9      	b.n	1cd6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
    1d02:	68f8      	ldr	r0, [r7, #12]
    1d04:	4b12      	ldr	r3, [pc, #72]	; (1d50 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    1d06:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    1d08:	68fb      	ldr	r3, [r7, #12]
    1d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1d0e:	4a11      	ldr	r2, [pc, #68]	; (1d54 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    1d10:	2100      	movs	r1, #0
    1d12:	4618      	mov	r0, r3
    1d14:	4b10      	ldr	r3, [pc, #64]	; (1d58 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1d16:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    1d18:	68fb      	ldr	r3, [r7, #12]
    1d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1d1e:	4a0f      	ldr	r2, [pc, #60]	; (1d5c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    1d20:	2102      	movs	r1, #2
    1d22:	4618      	mov	r0, r3
    1d24:	4b0c      	ldr	r3, [pc, #48]	; (1d58 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1d26:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    1d28:	6878      	ldr	r0, [r7, #4]
    1d2a:	4b0d      	ldr	r3, [pc, #52]	; (1d60 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
    1d2c:	4798      	blx	r3
    1d2e:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    1d30:	697b      	ldr	r3, [r7, #20]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d002      	beq.n	1d3c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1d36:	f06f 030e 	mvn.w	r3, #14
    1d3a:	e004      	b.n	1d46 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	}
	CAN_Module=CANmodule;
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	68ba      	ldr	r2, [r7, #8]
    1d40:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    1d44:	2300      	movs	r3, #0
}
    1d46:	4618      	mov	r0, r3
    1d48:	3718      	adds	r7, #24
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	00001d65 	.word	0x00001d65
    1d54:	0000198d 	.word	0x0000198d
    1d58:	00005d21 	.word	0x00005d21
    1d5c:	000019e9 	.word	0x000019e9
    1d60:	00005c4d 	.word	0x00005c4d

00001d64 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    1d64:	b480      	push	{r7}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    1d6c:	bf00      	nop
    1d6e:	370c      	adds	r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	bc80      	pop	{r7}
    1d74:	4770      	bx	lr
	...

00001d78 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    1d78:	b590      	push	{r4, r7, lr}
    1d7a:	b087      	sub	sp, #28
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	60f8      	str	r0, [r7, #12]
    1d80:	60b9      	str	r1, [r7, #8]
    1d82:	607a      	str	r2, [r7, #4]
    1d84:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	2200      	movs	r2, #0
    1d8a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    1d8e:	68fb      	ldr	r3, [r7, #12]
    1d90:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1d94:	2b00      	cmp	r3, #0
    1d96:	d060      	beq.n	1e5a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d05d      	beq.n	1e5a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1da0:	2b00      	cmp	r3, #0
    1da2:	d05a      	beq.n	1e5a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1daa:	689a      	ldr	r2, [r3, #8]
    1dac:	68bb      	ldr	r3, [r7, #8]
    1dae:	429a      	cmp	r2, r3
    1db0:	d953      	bls.n	1e5a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    1db2:	68fb      	ldr	r3, [r7, #12]
    1db4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1db8:	685a      	ldr	r2, [r3, #4]
    1dba:	68bb      	ldr	r3, [r7, #8]
    1dbc:	011b      	lsls	r3, r3, #4
    1dbe:	4413      	add	r3, r2
    1dc0:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    1dc2:	697b      	ldr	r3, [r7, #20]
    1dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1dc6:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    1dc8:	697b      	ldr	r3, [r7, #20]
    1dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1dcc:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	009a      	lsls	r2, r3, #2
    1dd2:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    1dd6:	4013      	ands	r3, r2
    1dd8:	697a      	ldr	r2, [r7, #20]
    1dda:	6013      	str	r3, [r2, #0]
		if (rtr)
    1ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1de0:	2b00      	cmp	r3, #0
    1de2:	d005      	beq.n	1df0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    1de4:	697b      	ldr	r3, [r7, #20]
    1de6:	681b      	ldr	r3, [r3, #0]
    1de8:	f043 0202 	orr.w	r2, r3, #2
    1dec:	697b      	ldr	r3, [r7, #20]
    1dee:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	009a      	lsls	r2, r3, #2
    1df4:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    1df8:	4013      	ands	r3, r2
    1dfa:	697a      	ldr	r2, [r7, #20]
    1dfc:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    1dfe:	697b      	ldr	r3, [r7, #20]
    1e00:	685b      	ldr	r3, [r3, #4]
    1e02:	f043 0202 	orr.w	r2, r3, #2
    1e06:	697b      	ldr	r3, [r7, #20]
    1e08:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    1e0a:	68fb      	ldr	r3, [r7, #12]
    1e0c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e10:	7d5b      	ldrb	r3, [r3, #21]
    1e12:	b2db      	uxtb	r3, r3
    1e14:	2b00      	cmp	r3, #0
    1e16:	bf14      	ite	ne
    1e18:	2301      	movne	r3, #1
    1e1a:	2300      	moveq	r3, #0
    1e1c:	b2db      	uxtb	r3, r3
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d120      	bne.n	1e64 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    1e22:	697b      	ldr	r3, [r7, #20]
    1e24:	681a      	ldr	r2, [r3, #0]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			CO_Filter.mask = buffer->mask;
    1e2c:	697b      	ldr	r3, [r7, #20]
    1e2e:	685a      	ldr	r2, [r3, #4]
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e3c:	6818      	ldr	r0, [r3, #0]
    1e3e:	68bb      	ldr	r3, [r7, #8]
    1e40:	b2d9      	uxtb	r1, r3
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    1e48:	2200      	movs	r2, #0
    1e4a:	4c0a      	ldr	r4, [pc, #40]	; (1e74 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    1e4c:	47a0      	blx	r4
    1e4e:	4603      	mov	r3, r0
    1e50:	b25a      	sxtb	r2, r3
    1e52:	68fb      	ldr	r3, [r7, #12]
    1e54:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		}
    1e58:	e004      	b.n	1e64 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    1e5a:	68fb      	ldr	r3, [r7, #12]
    1e5c:	22ff      	movs	r2, #255	; 0xff
    1e5e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    1e62:	e000      	b.n	1e66 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    1e64:	bf00      	nop
	}
	return ret;
    1e66:	68fb      	ldr	r3, [r7, #12]
    1e68:	f993 30a9 	ldrsb.w	r3, [r3, #169]	; 0xa9
}
    1e6c:	4618      	mov	r0, r3
    1e6e:	371c      	adds	r7, #28
    1e70:	46bd      	mov	sp, r7
    1e72:	bd90      	pop	{r4, r7, pc}
    1e74:	00005d9d 	.word	0x00005d9d

00001e78 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    1e78:	b480      	push	{r7}
    1e7a:	b085      	sub	sp, #20
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	60f8      	str	r0, [r7, #12]
    1e80:	60b9      	str	r1, [r7, #8]
    1e82:	607a      	str	r2, [r7, #4]
    1e84:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    1e86:	68fb      	ldr	r3, [r7, #12]
    1e88:	2200      	movs	r2, #0
    1e8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    1e8e:	68fb      	ldr	r3, [r7, #12]
    1e90:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e94:	2b00      	cmp	r3, #0
    1e96:	d03c      	beq.n	1f12 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    1e98:	68fb      	ldr	r3, [r7, #12]
    1e9a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e9e:	691a      	ldr	r2, [r3, #16]
    1ea0:	68bb      	ldr	r3, [r7, #8]
    1ea2:	429a      	cmp	r2, r3
    1ea4:	d935      	bls.n	1f12 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1eac:	68da      	ldr	r2, [r3, #12]
    1eae:	68bb      	ldr	r3, [r7, #8]
    1eb0:	011b      	lsls	r3, r3, #4
    1eb2:	441a      	add	r2, r3
    1eb4:	68fb      	ldr	r3, [r7, #12]
    1eb6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    1eba:	68fb      	ldr	r3, [r7, #12]
    1ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1ec0:	68fa      	ldr	r2, [r7, #12]
    1ec2:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    1ec6:	6812      	ldr	r2, [r2, #0]
    1ec8:	f3c2 020a 	ubfx	r2, r2, #0, #11
    1ecc:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1ed4:	687a      	ldr	r2, [r7, #4]
    1ed6:	0092      	lsls	r2, r2, #2
    1ed8:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    1eda:	78fb      	ldrb	r3, [r7, #3]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d009      	beq.n	1ef4 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1ee6:	68fa      	ldr	r2, [r7, #12]
    1ee8:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    1eec:	6812      	ldr	r2, [r2, #0]
    1eee:	f042 0202 	orr.w	r2, r2, #2
    1ef2:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1efa:	7e3a      	ldrb	r2, [r7, #24]
    1efc:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    1efe:	68fb      	ldr	r3, [r7, #12]
    1f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1f04:	2200      	movs	r2, #0
    1f06:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1f0e:	7f3a      	ldrb	r2, [r7, #28]
    1f10:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
    1f18:	4618      	mov	r0, r3
    1f1a:	3714      	adds	r7, #20
    1f1c:	46bd      	mov	sp, r7
    1f1e:	bc80      	pop	{r7}
    1f20:	4770      	bx	lr
	...

00001f24 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    1f24:	b590      	push	{r4, r7, lr}
    1f26:	b089      	sub	sp, #36	; 0x24
    1f28:	af02      	add	r7, sp, #8
    1f2a:	6078      	str	r0, [r7, #4]
    1f2c:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	2200      	movs	r2, #0
    1f32:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	if(buffer->bufferFull){
    1f36:	683b      	ldr	r3, [r7, #0]
    1f38:	7b5b      	ldrb	r3, [r3, #13]
    1f3a:	b2db      	uxtb	r3, r3
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	bf14      	ite	ne
    1f40:	2301      	movne	r3, #1
    1f42:	2300      	moveq	r3, #0
    1f44:	b2db      	uxtb	r3, r3
    1f46:	2b00      	cmp	r3, #0
    1f48:	d01d      	beq.n	1f86 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f50:	7ddb      	ldrb	r3, [r3, #23]
    1f52:	b2db      	uxtb	r3, r3
    1f54:	2b00      	cmp	r3, #0
    1f56:	bf0c      	ite	eq
    1f58:	2301      	moveq	r3, #1
    1f5a:	2300      	movne	r3, #0
    1f5c:	b2db      	uxtb	r3, r3
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d00d      	beq.n	1f7e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	1d18      	adds	r0, r3, #4
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f6c:	6a19      	ldr	r1, [r3, #32]
    1f6e:	683b      	ldr	r3, [r7, #0]
    1f70:	681b      	ldr	r3, [r3, #0]
    1f72:	9300      	str	r3, [sp, #0]
    1f74:	f248 1310 	movw	r3, #33040	; 0x8110
    1f78:	2214      	movs	r2, #20
    1f7a:	4c35      	ldr	r4, [pc, #212]	; (2050 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    1f7c:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	22f7      	movs	r2, #247	; 0xf7
    1f82:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	3384      	adds	r3, #132	; 0x84
    1f8a:	683a      	ldr	r2, [r7, #0]
    1f8c:	4619      	mov	r1, r3
    1f8e:	6878      	ldr	r0, [r7, #4]
    1f90:	4b30      	ldr	r3, [pc, #192]	; (2054 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    1f92:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f9a:	699b      	ldr	r3, [r3, #24]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	bf0c      	ite	eq
    1fa0:	2301      	moveq	r3, #1
    1fa2:	2300      	movne	r3, #0
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d041      	beq.n	202e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1fb0:	683a      	ldr	r2, [r7, #0]
    1fb2:	7b92      	ldrb	r2, [r2, #14]
    1fb4:	b2d2      	uxtb	r2, r2
    1fb6:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	4a25      	ldr	r2, [pc, #148]	; (2058 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    1fc2:	2101      	movs	r1, #1
    1fc4:	4618      	mov	r0, r3
    1fc6:	4b25      	ldr	r3, [pc, #148]	; (205c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    1fc8:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1fd0:	681b      	ldr	r3, [r3, #0]
    1fd2:	4618      	mov	r0, r3
    1fd4:	4b22      	ldr	r3, [pc, #136]	; (2060 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    1fd6:	4798      	blx	r3
		receivedtxCOCallback=false;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	2200      	movs	r2, #0
    1fdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1fe0:	f3ef 8310 	mrs	r3, PRIMASK
    1fe4:	60fb      	str	r3, [r7, #12]
  return(result);
    1fe6:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    1fe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1fea:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1ff2:	681a      	ldr	r2, [r3, #0]
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	3384      	adds	r3, #132	; 0x84
    1ff8:	4619      	mov	r1, r3
    1ffa:	4610      	mov	r0, r2
    1ffc:	4b19      	ldr	r3, [pc, #100]	; (2064 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    1ffe:	4798      	blx	r3
    2000:	4603      	mov	r3, r0
    2002:	461a      	mov	r2, r3
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	629a      	str	r2, [r3, #40]	; 0x28
    2008:	697b      	ldr	r3, [r7, #20]
    200a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    200c:	693b      	ldr	r3, [r7, #16]
    200e:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2016:	2b00      	cmp	r3, #0
    2018:	bf14      	ite	ne
    201a:	2301      	movne	r3, #1
    201c:	2300      	moveq	r3, #0
    201e:	b2db      	uxtb	r3, r3
    2020:	2b00      	cmp	r3, #0
    2022:	d00d      	beq.n	2040 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    2024:	687b      	ldr	r3, [r7, #4]
    2026:	22f1      	movs	r2, #241	; 0xf1
    2028:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    202c:	e008      	b.n	2040 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    202e:	683b      	ldr	r3, [r7, #0]
    2030:	2201      	movs	r2, #1
    2032:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    203a:	699a      	ldr	r2, [r3, #24]
    203c:	3201      	adds	r2, #1
    203e:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	f993 30aa 	ldrsb.w	r3, [r3, #170]	; 0xaa
}
    2046:	4618      	mov	r0, r3
    2048:	371c      	adds	r7, #28
    204a:	46bd      	mov	sp, r7
    204c:	bd90      	pop	{r4, r7, pc}
    204e:	bf00      	nop
    2050:	000023bd 	.word	0x000023bd
    2054:	00001b15 	.word	0x00001b15
    2058:	00001a1d 	.word	0x00001a1d
    205c:	00005d21 	.word	0x00005d21
    2060:	00005c4d 	.word	0x00005c4d
    2064:	00005cd5 	.word	0x00005cd5

00002068 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	f103 0170 	add.w	r1, r3, #112	; 0x70
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	f503 7380 	add.w	r3, r3, #256	; 0x100
    207c:	461a      	mov	r2, r3
    207e:	6878      	ldr	r0, [r7, #4]
    2080:	4b30      	ldr	r3, [pc, #192]	; (2144 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xdc>)
    2082:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    208a:	685a      	ldr	r2, [r3, #4]
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    2092:	687b      	ldr	r3, [r7, #4]
    2094:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    2098:	009b      	lsls	r3, r3, #2
    209a:	687a      	ldr	r2, [r7, #4]
    209c:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
    20a0:	4313      	orrs	r3, r2
    20a2:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	2200      	movs	r2, #0
    20a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    20b8:	689b      	ldr	r3, [r3, #8]
    20ba:	429a      	cmp	r2, r3
    20bc:	d221      	bcs.n	2102 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x9a>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    20c4:	681a      	ldr	r2, [r3, #0]
    20c6:	68fb      	ldr	r3, [r7, #12]
    20c8:	405a      	eors	r2, r3
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    20d0:	685b      	ldr	r3, [r3, #4]
    20d2:	4013      	ands	r3, r2
    20d4:	2b00      	cmp	r3, #0
    20d6:	d104      	bne.n	20e2 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x7a>
		{
			msgMatched = true;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	2201      	movs	r2, #1
    20dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			break;
    20e0:	e00f      	b.n	2102 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x9a>
		}
		MsgBuff++;
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    20e8:	f103 0210 	add.w	r2, r3, #16
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    20f8:	1c5a      	adds	r2, r3, #1
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2100:	e7d4      	b.n	20ac <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x44>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2108:	2b00      	cmp	r3, #0
    210a:	d017      	beq.n	213c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    2112:	2b00      	cmp	r3, #0
    2114:	d012      	beq.n	213c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    211c:	68db      	ldr	r3, [r3, #12]
    211e:	2b00      	cmp	r3, #0
    2120:	d00c      	beq.n	213c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    2128:	68db      	ldr	r3, [r3, #12]
    212a:	687a      	ldr	r2, [r7, #4]
    212c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
    2130:	6890      	ldr	r0, [r2, #8]
    2132:	687a      	ldr	r2, [r7, #4]
    2134:	f502 7280 	add.w	r2, r2, #256	; 0x100
    2138:	4611      	mov	r1, r2
    213a:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    213c:	bf00      	nop
    213e:	3710      	adds	r7, #16
    2140:	46bd      	mov	sp, r7
    2142:	bd80      	pop	{r7, pc}
    2144:	00001b61 	.word	0x00001b61

00002148 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    2148:	b580      	push	{r7, lr}
    214a:	b082      	sub	sp, #8
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
    2150:	6878      	ldr	r0, [r7, #4]
    2152:	4b05      	ldr	r3, [pc, #20]	; (2168 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    2154:	4798      	blx	r3
{
	ptrCOEMClass=this;
    2156:	4a05      	ldr	r2, [pc, #20]	; (216c <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	4618      	mov	r0, r3
    2160:	3708      	adds	r7, #8
    2162:	46bd      	mov	sp, r7
    2164:	bd80      	pop	{r7, pc}
    2166:	bf00      	nop
    2168:	00003885 	.word	0x00003885
    216c:	200019e8 	.word	0x200019e8

00002170 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    2170:	b580      	push	{r7, lr}
    2172:	b082      	sub	sp, #8
    2174:	af00      	add	r7, sp, #0
    2176:	6078      	str	r0, [r7, #4]
    2178:	6878      	ldr	r0, [r7, #4]
    217a:	4b03      	ldr	r3, [pc, #12]	; (2188 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
    217c:	4798      	blx	r3
{
} //~CO_Emergency_Class
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	4618      	mov	r0, r3
    2182:	3708      	adds	r7, #8
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	000038ad 	.word	0x000038ad

0000218c <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    218c:	b480      	push	{r7}
    218e:	b087      	sub	sp, #28
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    2194:	2300      	movs	r3, #0
    2196:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	681b      	ldr	r3, [r3, #0]
    219c:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	685b      	ldr	r3, [r3, #4]
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	7f5b      	ldrb	r3, [r3, #29]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d017      	beq.n	21de <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    21ae:	693b      	ldr	r3, [r7, #16]
    21b0:	7a5b      	ldrb	r3, [r3, #9]
    21b2:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	7f1b      	ldrb	r3, [r3, #28]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d104      	bne.n	21c6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	685b      	ldr	r3, [r3, #4]
    21c0:	7bba      	ldrb	r2, [r7, #14]
    21c2:	701a      	strb	r2, [r3, #0]
    21c4:	e01b      	b.n	21fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	7f1b      	ldrb	r3, [r3, #28]
    21ca:	461a      	mov	r2, r3
    21cc:	7bbb      	ldrb	r3, [r7, #14]
    21ce:	429a      	cmp	r2, r3
    21d0:	dd02      	ble.n	21d8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    21d2:	4b0e      	ldr	r3, [pc, #56]	; (220c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    21d4:	617b      	str	r3, [r7, #20]
    21d6:	e012      	b.n	21fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    21d8:	2300      	movs	r3, #0
    21da:	617b      	str	r3, [r7, #20]
    21dc:	e00f      	b.n	21fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	7f1b      	ldrb	r3, [r3, #28]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d109      	bne.n	21fa <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    21e6:	7bfb      	ldrb	r3, [r7, #15]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d103      	bne.n	21f4 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    21ec:	693b      	ldr	r3, [r7, #16]
    21ee:	2200      	movs	r2, #0
    21f0:	725a      	strb	r2, [r3, #9]
    21f2:	e004      	b.n	21fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    21f4:	4b06      	ldr	r3, [pc, #24]	; (2210 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    21f6:	617b      	str	r3, [r7, #20]
    21f8:	e001      	b.n	21fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    21fa:	4b06      	ldr	r3, [pc, #24]	; (2214 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    21fc:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    21fe:	697b      	ldr	r3, [r7, #20]
}
    2200:	4618      	mov	r0, r3
    2202:	371c      	adds	r7, #28
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	bf00      	nop
    220c:	08000024 	.word	0x08000024
    2210:	06090030 	.word	0x06090030
    2214:	06010002 	.word	0x06010002

00002218 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    2218:	b580      	push	{r7, lr}
    221a:	b086      	sub	sp, #24
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    2220:	2300      	movs	r3, #0
    2222:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    222a:	4b0f      	ldr	r3, [pc, #60]	; (2268 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    222c:	681a      	ldr	r2, [r3, #0]
    222e:	687b      	ldr	r3, [r7, #4]
    2230:	685b      	ldr	r3, [r3, #4]
    2232:	4619      	mov	r1, r3
    2234:	4610      	mov	r0, r2
    2236:	4b0d      	ldr	r3, [pc, #52]	; (226c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    2238:	4798      	blx	r3
    223a:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	7f5b      	ldrb	r3, [r3, #29]
    2240:	2b00      	cmp	r3, #0
    2242:	d00b      	beq.n	225c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    2244:	4b08      	ldr	r3, [pc, #32]	; (2268 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    2246:	6818      	ldr	r0, [r3, #0]
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	6859      	ldr	r1, [r3, #4]
    224c:	693b      	ldr	r3, [r7, #16]
    224e:	781b      	ldrb	r3, [r3, #0]
    2250:	461a      	mov	r2, r3
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	4413      	add	r3, r2
    2256:	461a      	mov	r2, r3
    2258:	4b05      	ldr	r3, [pc, #20]	; (2270 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    225a:	4798      	blx	r3
    }

    return ret;
    225c:	697b      	ldr	r3, [r7, #20]
}
    225e:	4618      	mov	r0, r3
    2260:	3718      	adds	r7, #24
    2262:	46bd      	mov	sp, r7
    2264:	bd80      	pop	{r7, pc}
    2266:	bf00      	nop
    2268:	200019e8 	.word	0x200019e8
    226c:	00003905 	.word	0x00003905
    2270:	00003939 	.word	0x00003939

00002274 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    2274:	b590      	push	{r4, r7, lr}
    2276:	b089      	sub	sp, #36	; 0x24
    2278:	af02      	add	r7, sp, #8
    227a:	60f8      	str	r0, [r7, #12]
    227c:	60b9      	str	r1, [r7, #8]
    227e:	607a      	str	r2, [r7, #4]
    2280:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    2282:	68bb      	ldr	r3, [r7, #8]
    2284:	2b00      	cmp	r3, #0
    2286:	d015      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	2b00      	cmp	r3, #0
    228c:	d012      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    228e:	683b      	ldr	r3, [r7, #0]
    2290:	2b00      	cmp	r3, #0
    2292:	d00f      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    2294:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2296:	2b00      	cmp	r3, #0
    2298:	d00c      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    229a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    229e:	2b05      	cmp	r3, #5
    22a0:	d908      	bls.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    22a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22a4:	2b00      	cmp	r3, #0
    22a6:	d005      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22aa:	2b00      	cmp	r3, #0
    22ac:	d002      	beq.n	22b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    22ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22b0:	2b00      	cmp	r3, #0
    22b2:	d102      	bne.n	22ba <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    22b4:	f04f 33ff 	mov.w	r3, #4294967295
    22b8:	e072      	b.n	23a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    22ba:	68bb      	ldr	r3, [r7, #8]
    22bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    22be:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    22c0:	68bb      	ldr	r3, [r7, #8]
    22c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    22c6:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    22c8:	68bb      	ldr	r3, [r7, #8]
    22ca:	3305      	adds	r3, #5
    22cc:	f103 0250 	add.w	r2, r3, #80	; 0x50
    22d0:	68bb      	ldr	r3, [r7, #8]
    22d2:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    22d4:	68bb      	ldr	r3, [r7, #8]
    22d6:	1d5a      	adds	r2, r3, #5
    22d8:	68bb      	ldr	r3, [r7, #8]
    22da:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    22dc:	68bb      	ldr	r3, [r7, #8]
    22de:	1d5a      	adds	r2, r3, #5
    22e0:	68bb      	ldr	r3, [r7, #8]
    22e2:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    22e4:	68bb      	ldr	r3, [r7, #8]
    22e6:	2200      	movs	r2, #0
    22e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    22ec:	68bb      	ldr	r3, [r7, #8]
    22ee:	2200      	movs	r2, #0
    22f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    22f4:	68bb      	ldr	r3, [r7, #8]
    22f6:	2200      	movs	r2, #0
    22f8:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	68ba      	ldr	r2, [r7, #8]
    22fe:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2304:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    230a:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    2312:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	2200      	movs	r2, #0
    2318:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	2200      	movs	r2, #0
    231e:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    2320:	2300      	movs	r3, #0
    2322:	75fb      	strb	r3, [r7, #23]
    2324:	7dfa      	ldrb	r2, [r7, #23]
    2326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    232a:	429a      	cmp	r2, r3
    232c:	da09      	bge.n	2342 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    232e:	68bb      	ldr	r3, [r7, #8]
    2330:	681a      	ldr	r2, [r3, #0]
    2332:	7dfb      	ldrb	r3, [r7, #23]
    2334:	4413      	add	r3, r2
    2336:	2200      	movs	r2, #0
    2338:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    233a:	7dfb      	ldrb	r3, [r7, #23]
    233c:	3301      	adds	r3, #1
    233e:	75fb      	strb	r3, [r7, #23]
    2340:	e7f0      	b.n	2324 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    2342:	2300      	movs	r3, #0
    2344:	9301      	str	r3, [sp, #4]
    2346:	2300      	movs	r3, #0
    2348:	9300      	str	r3, [sp, #0]
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	4a16      	ldr	r2, [pc, #88]	; (23a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    234e:	f241 0103 	movw	r1, #4099	; 0x1003
    2352:	68f8      	ldr	r0, [r7, #12]
    2354:	4c15      	ldr	r4, [pc, #84]	; (23ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    2356:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    2358:	683b      	ldr	r3, [r7, #0]
    235a:	f103 0268 	add.w	r2, r3, #104	; 0x68
    235e:	2300      	movs	r3, #0
    2360:	9301      	str	r3, [sp, #4]
    2362:	2300      	movs	r3, #0
    2364:	9300      	str	r3, [sp, #0]
    2366:	4613      	mov	r3, r2
    2368:	4a11      	ldr	r2, [pc, #68]	; (23b0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    236a:	f241 0114 	movw	r1, #4116	; 0x1014
    236e:	68f8      	ldr	r0, [r7, #12]
    2370:	4c0e      	ldr	r4, [pc, #56]	; (23ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    2372:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2378:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	695b      	ldr	r3, [r3, #20]
    237e:	68ba      	ldr	r2, [r7, #8]
    2380:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
    2382:	4b0c      	ldr	r3, [pc, #48]	; (23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    2384:	6818      	ldr	r0, [r3, #0]
    2386:	2300      	movs	r3, #0
    2388:	9301      	str	r3, [sp, #4]
    238a:	2308      	movs	r3, #8
    238c:	9300      	str	r3, [sp, #0]
    238e:	2300      	movs	r3, #0
    2390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2392:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2394:	4c08      	ldr	r4, [pc, #32]	; (23b8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    2396:	47a0      	blx	r4
    2398:	4602      	mov	r2, r0
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    239e:	2300      	movs	r3, #0
}
    23a0:	4618      	mov	r0, r3
    23a2:	371c      	adds	r7, #28
    23a4:	46bd      	mov	sp, r7
    23a6:	bd90      	pop	{r4, r7, pc}
    23a8:	0000218d 	.word	0x0000218d
    23ac:	00003d59 	.word	0x00003d59
    23b0:	00002219 	.word	0x00002219
    23b4:	200019e4 	.word	0x200019e4
    23b8:	00001e79 	.word	0x00001e79

000023bc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    23bc:	b590      	push	{r4, r7, lr}
    23be:	b08d      	sub	sp, #52	; 0x34
    23c0:	af00      	add	r7, sp, #0
    23c2:	60f8      	str	r0, [r7, #12]
    23c4:	60b9      	str	r1, [r7, #8]
    23c6:	603b      	str	r3, [r7, #0]
    23c8:	4613      	mov	r3, r2
    23ca:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    23cc:	79fb      	ldrb	r3, [r7, #7]
    23ce:	10db      	asrs	r3, r3, #3
    23d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    23d4:	79fb      	ldrb	r3, [r7, #7]
    23d6:	f003 0307 	and.w	r3, r3, #7
    23da:	2201      	movs	r2, #1
    23dc:	fa02 f303 	lsl.w	r3, r2, r3
    23e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    23e4:	2300      	movs	r3, #0
    23e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    23e8:	2301      	movs	r3, #1
    23ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    23ee:	68bb      	ldr	r3, [r7, #8]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d103      	bne.n	23fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    23f4:	2300      	movs	r3, #0
    23f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    23fa:	e01e      	b.n	243a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    23fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2400:	68ba      	ldr	r2, [r7, #8]
    2402:	7912      	ldrb	r2, [r2, #4]
    2404:	4293      	cmp	r3, r2
    2406:	db07      	blt.n	2418 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    2408:	68bb      	ldr	r3, [r7, #8]
    240a:	79fa      	ldrb	r2, [r7, #7]
    240c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    2410:	2300      	movs	r3, #0
    2412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2416:	e010      	b.n	243a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    2418:	68bb      	ldr	r3, [r7, #8]
    241a:	681a      	ldr	r2, [r3, #0]
    241c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2420:	4413      	add	r3, r2
    2422:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    2424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2426:	781a      	ldrb	r2, [r3, #0]
    2428:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    242c:	4013      	ands	r3, r2
    242e:	b2db      	uxtb	r3, r3
    2430:	2b00      	cmp	r3, #0
    2432:	d002      	beq.n	243a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    2434:	2300      	movs	r3, #0
    2436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    243a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    243e:	2b00      	cmp	r3, #0
    2440:	d05c      	beq.n	24fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    2442:	79fb      	ldrb	r3, [r7, #7]
    2444:	2b00      	cmp	r3, #0
    2446:	d007      	beq.n	2458 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    2448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    244a:	781a      	ldrb	r2, [r3, #0]
    244c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2450:	4313      	orrs	r3, r2
    2452:	b2da      	uxtb	r2, r3
    2454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2456:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    2458:	68bb      	ldr	r3, [r7, #8]
    245a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    245e:	2b00      	cmp	r3, #0
    2460:	d004      	beq.n	246c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    2462:	68bb      	ldr	r3, [r7, #8]
    2464:	2202      	movs	r2, #2
    2466:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    246a:	e047      	b.n	24fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    246c:	463a      	mov	r2, r7
    246e:	f107 0318 	add.w	r3, r7, #24
    2472:	4619      	mov	r1, r3
    2474:	68f8      	ldr	r0, [r7, #12]
    2476:	4b23      	ldr	r3, [pc, #140]	; (2504 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    2478:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    247a:	2300      	movs	r3, #0
    247c:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    247e:	79fb      	ldrb	r3, [r7, #7]
    2480:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    2482:	f107 0318 	add.w	r3, r7, #24
    2486:	3304      	adds	r3, #4
    2488:	f107 0240 	add.w	r2, r7, #64	; 0x40
    248c:	4619      	mov	r1, r3
    248e:	68f8      	ldr	r0, [r7, #12]
    2490:	4b1d      	ldr	r3, [pc, #116]	; (2508 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    2492:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2494:	f3ef 8310 	mrs	r3, PRIMASK
    2498:	617b      	str	r3, [r7, #20]
  return(result);
    249a:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    249c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    249e:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    24a0:	68bb      	ldr	r3, [r7, #8]
    24a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    24a4:	f107 0218 	add.w	r2, r7, #24
    24a8:	2308      	movs	r3, #8
    24aa:	68f8      	ldr	r0, [r7, #12]
    24ac:	4c17      	ldr	r4, [pc, #92]	; (250c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    24ae:	47a0      	blx	r4
            em->bufWritePtr += 8;
    24b0:	68bb      	ldr	r3, [r7, #8]
    24b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    24b4:	f103 0208 	add.w	r2, r3, #8
    24b8:	68bb      	ldr	r3, [r7, #8]
    24ba:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    24bc:	68bb      	ldr	r3, [r7, #8]
    24be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    24c0:	68bb      	ldr	r3, [r7, #8]
    24c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    24c4:	429a      	cmp	r2, r3
    24c6:	d103      	bne.n	24d0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    24c8:	68bb      	ldr	r3, [r7, #8]
    24ca:	1d5a      	adds	r2, r3, #5
    24cc:	68bb      	ldr	r3, [r7, #8]
    24ce:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    24d0:	68bb      	ldr	r3, [r7, #8]
    24d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    24d4:	68bb      	ldr	r3, [r7, #8]
    24d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    24d8:	429a      	cmp	r2, r3
    24da:	d103      	bne.n	24e4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    24dc:	68bb      	ldr	r3, [r7, #8]
    24de:	2201      	movs	r2, #1
    24e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    24e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24e8:	6a3b      	ldr	r3, [r7, #32]
    24ea:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    24ee:	68bb      	ldr	r3, [r7, #8]
    24f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    24f2:	2b00      	cmp	r3, #0
    24f4:	d002      	beq.n	24fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    24f6:	68bb      	ldr	r3, [r7, #8]
    24f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    24fa:	4798      	blx	r3
}
    24fc:	bf00      	nop
    24fe:	3734      	adds	r7, #52	; 0x34
    2500:	46bd      	mov	sp, r7
    2502:	bd90      	pop	{r4, r7, pc}
    2504:	00003971 	.word	0x00003971
    2508:	000039a1 	.word	0x000039a1
    250c:	000038c9 	.word	0x000038c9

00002510 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    2510:	b480      	push	{r7}
    2512:	b085      	sub	sp, #20
    2514:	af00      	add	r7, sp, #0
    2516:	6078      	str	r0, [r7, #4]
    2518:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    251e:	683b      	ldr	r3, [r7, #0]
    2520:	7d1b      	ldrb	r3, [r3, #20]
    2522:	2b01      	cmp	r3, #1
    2524:	d106      	bne.n	2534 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    2526:	683b      	ldr	r3, [r7, #0]
    2528:	7d5a      	ldrb	r2, [r3, #21]
    252a:	68fb      	ldr	r3, [r7, #12]
    252c:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    252e:	68fb      	ldr	r3, [r7, #12]
    2530:	2201      	movs	r2, #1
    2532:	731a      	strb	r2, [r3, #12]
	}
	
	
}
    2534:	bf00      	nop
    2536:	3714      	adds	r7, #20
    2538:	46bd      	mov	sp, r7
    253a:	bc80      	pop	{r7}
    253c:	4770      	bx	lr
	...

00002540 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    2540:	b590      	push	{r4, r7, lr}
    2542:	b08d      	sub	sp, #52	; 0x34
    2544:	af04      	add	r7, sp, #16
    2546:	60f8      	str	r0, [r7, #12]
    2548:	460b      	mov	r3, r1
    254a:	607a      	str	r2, [r7, #4]
    254c:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    254e:	7afb      	ldrb	r3, [r7, #11]
    2550:	461a      	mov	r2, r3
    2552:	68fb      	ldr	r3, [r7, #12]
    2554:	7b1b      	ldrb	r3, [r3, #12]
    2556:	429a      	cmp	r2, r3
    2558:	da37      	bge.n	25ca <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
    255a:	7afb      	ldrb	r3, [r7, #11]
    255c:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    255e:	68fb      	ldr	r3, [r7, #12]
    2560:	689a      	ldr	r2, [r3, #8]
    2562:	7afb      	ldrb	r3, [r7, #11]
    2564:	011b      	lsls	r3, r3, #4
    2566:	4413      	add	r3, r2
    2568:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    256a:	697b      	ldr	r3, [r7, #20]
    256c:	687a      	ldr	r2, [r7, #4]
    256e:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    2570:	697b      	ldr	r3, [r7, #20]
    2572:	2200      	movs	r2, #0
    2574:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    2576:	697b      	ldr	r3, [r7, #20]
    2578:	2200      	movs	r2, #0
    257a:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
    257c:	69bb      	ldr	r3, [r7, #24]
    257e:	2b00      	cmp	r3, #0
    2580:	d008      	beq.n	2594 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
    2582:	697b      	ldr	r3, [r7, #20]
    2584:	689b      	ldr	r3, [r3, #8]
    2586:	2b00      	cmp	r3, #0
    2588:	d004      	beq.n	2594 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
    258a:	69bb      	ldr	r3, [r7, #24]
    258c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    2590:	61fb      	str	r3, [r7, #28]
    2592:	e004      	b.n	259e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
    2594:	2300      	movs	r3, #0
    2596:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    2598:	697b      	ldr	r3, [r7, #20]
    259a:	2200      	movs	r2, #0
    259c:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
    259e:	4b0d      	ldr	r3, [pc, #52]	; (25d4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    25a0:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    25a2:	68fb      	ldr	r3, [r7, #12]
    25a4:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
    25a6:	7afa      	ldrb	r2, [r7, #11]
    25a8:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    25aa:	68fb      	ldr	r3, [r7, #12]
    25ac:	689a      	ldr	r2, [r3, #8]
    25ae:	7afb      	ldrb	r3, [r7, #11]
    25b0:	011b      	lsls	r3, r3, #4
    25b2:	4413      	add	r3, r2
	CO_HBcons_receive);
    25b4:	4a08      	ldr	r2, [pc, #32]	; (25d8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    25b6:	9202      	str	r2, [sp, #8]
    25b8:	9301      	str	r3, [sp, #4]
    25ba:	2300      	movs	r3, #0
    25bc:	9300      	str	r3, [sp, #0]
    25be:	f240 73ff 	movw	r3, #2047	; 0x7ff
    25c2:	69fa      	ldr	r2, [r7, #28]
    25c4:	4c05      	ldr	r4, [pc, #20]	; (25dc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    25c6:	47a0      	blx	r4
    25c8:	e000      	b.n	25cc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    25ca:	bf00      	nop
}
    25cc:	3724      	adds	r7, #36	; 0x24
    25ce:	46bd      	mov	sp, r7
    25d0:	bd90      	pop	{r4, r7, pc}
    25d2:	bf00      	nop
    25d4:	200019e4 	.word	0x200019e4
    25d8:	00002511 	.word	0x00002511
    25dc:	00001d79 	.word	0x00001d79

000025e0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    25e0:	b580      	push	{r7, lr}
    25e2:	b08c      	sub	sp, #48	; 0x30
    25e4:	af00      	add	r7, sp, #0
    25e6:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    25e8:	2300      	movs	r3, #0
    25ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
    25f2:	4b32      	ldr	r3, [pc, #200]	; (26bc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	1d1a      	adds	r2, r3, #4
    25f8:	687b      	ldr	r3, [r7, #4]
    25fa:	685b      	ldr	r3, [r3, #4]
    25fc:	4619      	mov	r1, r3
    25fe:	4610      	mov	r0, r2
    2600:	4b2f      	ldr	r3, [pc, #188]	; (26c0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    2602:	4798      	blx	r3
    2604:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	7f5b      	ldrb	r3, [r3, #29]
    260a:	2b00      	cmp	r3, #0
    260c:	d150      	bne.n	26b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    260e:	6a3b      	ldr	r3, [r7, #32]
    2610:	0c1b      	lsrs	r3, r3, #16
    2612:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    2614:	6a3b      	ldr	r3, [r7, #32]
    2616:	b29b      	uxth	r3, r3
    2618:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    261a:	6a3b      	ldr	r3, [r7, #32]
    261c:	0ddb      	lsrs	r3, r3, #23
    261e:	05db      	lsls	r3, r3, #23
    2620:	2b00      	cmp	r3, #0
    2622:	d002      	beq.n	262a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    2624:	4b27      	ldr	r3, [pc, #156]	; (26c4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2626:	62fb      	str	r3, [r7, #44]	; 0x2c
    2628:	e036      	b.n	2698 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    262a:	69bb      	ldr	r3, [r7, #24]
    262c:	2b00      	cmp	r3, #0
    262e:	d02f      	beq.n	2690 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    2630:	7ffb      	ldrb	r3, [r7, #31]
    2632:	2b00      	cmp	r3, #0
    2634:	d02c      	beq.n	2690 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2636:	2300      	movs	r3, #0
    2638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    263c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2642:	7b12      	ldrb	r2, [r2, #12]
    2644:	4293      	cmp	r3, r2
    2646:	da26      	bge.n	2696 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    2648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    264a:	685a      	ldr	r2, [r3, #4]
    264c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2650:	009b      	lsls	r3, r3, #2
    2652:	4413      	add	r3, r2
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    2658:	697b      	ldr	r3, [r7, #20]
    265a:	0c1b      	lsrs	r3, r3, #16
    265c:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    265e:	697b      	ldr	r3, [r7, #20]
    2660:	b29b      	uxth	r3, r3
    2662:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	7f1b      	ldrb	r3, [r3, #28]
    2668:	1e5a      	subs	r2, r3, #1
    266a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    266e:	429a      	cmp	r2, r3
    2670:	d008      	beq.n	2684 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2672:	68fb      	ldr	r3, [r7, #12]
    2674:	2b00      	cmp	r3, #0
    2676:	d005      	beq.n	2684 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2678:	7ffa      	ldrb	r2, [r7, #31]
    267a:	7cfb      	ldrb	r3, [r7, #19]
    267c:	429a      	cmp	r2, r3
    267e:	d101      	bne.n	2684 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    2680:	4b10      	ldr	r3, [pc, #64]	; (26c4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2682:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2688:	3301      	adds	r3, #1
    268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    268e:	e7d5      	b.n	263c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    2690:	2300      	movs	r3, #0
    2692:	62fb      	str	r3, [r7, #44]	; 0x2c
    2694:	e000      	b.n	2698 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    2696:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    2698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    269a:	2b00      	cmp	r3, #0
    269c:	d108      	bne.n	26b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	7f1b      	ldrb	r3, [r3, #28]
    26a2:	3b01      	subs	r3, #1
    26a4:	b2db      	uxtb	r3, r3
    26a6:	6a3a      	ldr	r2, [r7, #32]
    26a8:	4619      	mov	r1, r3
    26aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    26ac:	4b06      	ldr	r3, [pc, #24]	; (26c8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    26ae:	4798      	blx	r3
		}
	}

	return ret;
    26b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    26b2:	4618      	mov	r0, r3
    26b4:	3730      	adds	r7, #48	; 0x30
    26b6:	46bd      	mov	sp, r7
    26b8:	bd80      	pop	{r7, pc}
    26ba:	bf00      	nop
    26bc:	200019e4 	.word	0x200019e4
    26c0:	00003905 	.word	0x00003905
    26c4:	06040043 	.word	0x06040043
    26c8:	00002541 	.word	0x00002541

000026cc <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    26cc:	b480      	push	{r7}
    26ce:	b083      	sub	sp, #12
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
    26d4:	4a04      	ldr	r2, [pc, #16]	; (26e8 <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	4618      	mov	r0, r3
    26de:	370c      	adds	r7, #12
    26e0:	46bd      	mov	sp, r7
    26e2:	bc80      	pop	{r7}
    26e4:	4770      	bx	lr
    26e6:	bf00      	nop
    26e8:	200019ec 	.word	0x200019ec

000026ec <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    26ec:	b480      	push	{r7}
    26ee:	b083      	sub	sp, #12
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	4618      	mov	r0, r3
    26f8:	370c      	adds	r7, #12
    26fa:	46bd      	mov	sp, r7
    26fc:	bc80      	pop	{r7}
    26fe:	4770      	bx	lr

00002700 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    2700:	b590      	push	{r4, r7, lr}
    2702:	b089      	sub	sp, #36	; 0x24
    2704:	af02      	add	r7, sp, #8
    2706:	60f8      	str	r0, [r7, #12]
    2708:	60b9      	str	r1, [r7, #8]
    270a:	607a      	str	r2, [r7, #4]
    270c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
    270e:	4a2b      	ldr	r2, [pc, #172]	; (27bc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    2710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2712:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    2714:	68bb      	ldr	r3, [r7, #8]
    2716:	2b00      	cmp	r3, #0
    2718:	d00e      	beq.n	2738 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	2b00      	cmp	r3, #0
    271e:	d00b      	beq.n	2738 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2720:	683b      	ldr	r3, [r7, #0]
    2722:	2b00      	cmp	r3, #0
    2724:	d008      	beq.n	2738 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2728:	2b00      	cmp	r3, #0
    272a:	d005      	beq.n	2738 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    272e:	2b00      	cmp	r3, #0
    2730:	d002      	beq.n	2738 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
    2732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2734:	2b00      	cmp	r3, #0
    2736:	d102      	bne.n	273e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    2738:	f04f 33ff 	mov.w	r3, #4294967295
    273c:	e039      	b.n	27b2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
    273e:	68bb      	ldr	r3, [r7, #8]
    2740:	687a      	ldr	r2, [r7, #4]
    2742:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    2744:	68bb      	ldr	r3, [r7, #8]
    2746:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2748:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    274a:	68bb      	ldr	r3, [r7, #8]
    274c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    274e:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    2750:	68bb      	ldr	r3, [r7, #8]
    2752:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    2756:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    2758:	68bb      	ldr	r3, [r7, #8]
    275a:	2200      	movs	r2, #0
    275c:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    275e:	68bb      	ldr	r3, [r7, #8]
    2760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2762:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    2764:	68bb      	ldr	r3, [r7, #8]
    2766:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2768:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    276a:	2300      	movs	r3, #0
    276c:	75fb      	strb	r3, [r7, #23]
    276e:	7dfb      	ldrb	r3, [r7, #23]
    2770:	68ba      	ldr	r2, [r7, #8]
    2772:	7b12      	ldrb	r2, [r2, #12]
    2774:	4293      	cmp	r3, r2
    2776:	da0e      	bge.n	2796 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    2778:	68bb      	ldr	r3, [r7, #8]
    277a:	685a      	ldr	r2, [r3, #4]
    277c:	7dfb      	ldrb	r3, [r7, #23]
    277e:	009b      	lsls	r3, r3, #2
    2780:	4413      	add	r3, r2
    2782:	681a      	ldr	r2, [r3, #0]
    2784:	7dfb      	ldrb	r3, [r7, #23]
    2786:	4619      	mov	r1, r3
    2788:	68b8      	ldr	r0, [r7, #8]
    278a:	4b0d      	ldr	r3, [pc, #52]	; (27c0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    278c:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    278e:	7dfb      	ldrb	r3, [r7, #23]
    2790:	3301      	adds	r3, #1
    2792:	75fb      	strb	r3, [r7, #23]
    2794:	e7eb      	b.n	276e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    2796:	4b0b      	ldr	r3, [pc, #44]	; (27c4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	1d18      	adds	r0, r3, #4
    279c:	2300      	movs	r3, #0
    279e:	9301      	str	r3, [sp, #4]
    27a0:	2300      	movs	r3, #0
    27a2:	9300      	str	r3, [sp, #0]
    27a4:	68bb      	ldr	r3, [r7, #8]
    27a6:	4a08      	ldr	r2, [pc, #32]	; (27c8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
    27a8:	f241 0116 	movw	r1, #4118	; 0x1016
    27ac:	4c07      	ldr	r4, [pc, #28]	; (27cc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
    27ae:	47a0      	blx	r4

	return CO_ERROR_NO;
    27b0:	2300      	movs	r3, #0
}
    27b2:	4618      	mov	r0, r3
    27b4:	371c      	adds	r7, #28
    27b6:	46bd      	mov	sp, r7
    27b8:	bd90      	pop	{r4, r7, pc}
    27ba:	bf00      	nop
    27bc:	200019f0 	.word	0x200019f0
    27c0:	00002541 	.word	0x00002541
    27c4:	200019e4 	.word	0x200019e4
    27c8:	000025e1 	.word	0x000025e1
    27cc:	00003d59 	.word	0x00003d59

000027d0 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    27d0:	b480      	push	{r7}
    27d2:	b083      	sub	sp, #12
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
    27d8:	460b      	mov	r3, r1
    27da:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	78fa      	ldrb	r2, [r7, #3]
    27e0:	711a      	strb	r2, [r3, #4]
}
    27e2:	bf00      	nop
    27e4:	370c      	adds	r7, #12
    27e6:	46bd      	mov	sp, r7
    27e8:	bc80      	pop	{r7}
    27ea:	4770      	bx	lr

000027ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    27ec:	b580      	push	{r7, lr}
    27ee:	b084      	sub	sp, #16
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
    27f4:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    27fa:	683b      	ldr	r3, [r7, #0]
    27fc:	7d9b      	ldrb	r3, [r3, #22]
    27fe:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    2800:	683b      	ldr	r3, [r7, #0]
    2802:	7d1b      	ldrb	r3, [r3, #20]
    2804:	2b02      	cmp	r3, #2
    2806:	d146      	bne.n	2896 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2808:	7afb      	ldrb	r3, [r7, #11]
    280a:	2b00      	cmp	r3, #0
    280c:	d004      	beq.n	2818 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    280e:	68fb      	ldr	r3, [r7, #12]
    2810:	7a9b      	ldrb	r3, [r3, #10]
    2812:	7afa      	ldrb	r2, [r7, #11]
    2814:	429a      	cmp	r2, r3
    2816:	d13e      	bne.n	2896 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    2818:	683b      	ldr	r3, [r7, #0]
    281a:	7d5b      	ldrb	r3, [r3, #21]
    281c:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    281e:	68fb      	ldr	r3, [r7, #12]
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	727b      	strb	r3, [r7, #9]

        switch(command){
    2824:	7abb      	ldrb	r3, [r7, #10]
    2826:	2b80      	cmp	r3, #128	; 0x80
    2828:	d019      	beq.n	285e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    282a:	2b80      	cmp	r3, #128	; 0x80
    282c:	dc04      	bgt.n	2838 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    282e:	2b01      	cmp	r3, #1
    2830:	d007      	beq.n	2842 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    2832:	2b02      	cmp	r3, #2
    2834:	d00f      	beq.n	2856 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    2836:	e01f      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    2838:	2b81      	cmp	r3, #129	; 0x81
    283a:	d014      	beq.n	2866 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    283c:	2b82      	cmp	r3, #130	; 0x82
    283e:	d016      	beq.n	286e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    2840:	e01a      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    2842:	68fb      	ldr	r3, [r7, #12]
    2844:	695b      	ldr	r3, [r3, #20]
    2846:	681b      	ldr	r3, [r3, #0]
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	2b00      	cmp	r3, #0
    284c:	d113      	bne.n	2876 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    284e:	68fb      	ldr	r3, [r7, #12]
    2850:	2205      	movs	r2, #5
    2852:	701a      	strb	r2, [r3, #0]
                }
                break;
    2854:	e00f      	b.n	2876 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    2856:	68fb      	ldr	r3, [r7, #12]
    2858:	2204      	movs	r2, #4
    285a:	701a      	strb	r2, [r3, #0]
                break;
    285c:	e00c      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	227f      	movs	r2, #127	; 0x7f
    2862:	701a      	strb	r2, [r3, #0]
                break;
    2864:	e008      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	2202      	movs	r2, #2
    286a:	725a      	strb	r2, [r3, #9]
                break;
    286c:	e004      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    286e:	68fb      	ldr	r3, [r7, #12]
    2870:	2201      	movs	r2, #1
    2872:	725a      	strb	r2, [r3, #9]
                break;
    2874:	e000      	b.n	2878 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    2876:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    2878:	68fb      	ldr	r3, [r7, #12]
    287a:	69db      	ldr	r3, [r3, #28]
    287c:	2b00      	cmp	r3, #0
    287e:	d00a      	beq.n	2896 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2880:	68fb      	ldr	r3, [r7, #12]
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	7a7a      	ldrb	r2, [r7, #9]
    2886:	429a      	cmp	r2, r3
    2888:	d005      	beq.n	2896 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    288a:	68fb      	ldr	r3, [r7, #12]
    288c:	69db      	ldr	r3, [r3, #28]
    288e:	68fa      	ldr	r2, [r7, #12]
    2890:	7812      	ldrb	r2, [r2, #0]
    2892:	4610      	mov	r0, r2
    2894:	4798      	blx	r3
        }
    }
}
    2896:	bf00      	nop
    2898:	3710      	adds	r7, #16
    289a:	46bd      	mov	sp, r7
    289c:	bd80      	pop	{r7, pc}

0000289e <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    289e:	b480      	push	{r7}
    28a0:	b083      	sub	sp, #12
    28a2:	af00      	add	r7, sp, #0
    28a4:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	4618      	mov	r0, r3
    28aa:	370c      	adds	r7, #12
    28ac:	46bd      	mov	sp, r7
    28ae:	bc80      	pop	{r7}
    28b0:	4770      	bx	lr

000028b2 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    28b2:	b480      	push	{r7}
    28b4:	b083      	sub	sp, #12
    28b6:	af00      	add	r7, sp, #0
    28b8:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	4618      	mov	r0, r3
    28be:	370c      	adds	r7, #12
    28c0:	46bd      	mov	sp, r7
    28c2:	bc80      	pop	{r7}
    28c4:	4770      	bx	lr
	...

000028c8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    28c8:	b5b0      	push	{r4, r5, r7, lr}
    28ca:	b088      	sub	sp, #32
    28cc:	af04      	add	r7, sp, #16
    28ce:	60f8      	str	r0, [r7, #12]
    28d0:	60b9      	str	r1, [r7, #8]
    28d2:	607a      	str	r2, [r7, #4]
    28d4:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    28d6:	68bb      	ldr	r3, [r7, #8]
    28d8:	2b00      	cmp	r3, #0
    28da:	d008      	beq.n	28ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	2b00      	cmp	r3, #0
    28e0:	d005      	beq.n	28ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    28e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28e4:	2b00      	cmp	r3, #0
    28e6:	d002      	beq.n	28ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    28e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    28ea:	2b00      	cmp	r3, #0
    28ec:	d102      	bne.n	28f4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    28ee:	f04f 33ff 	mov.w	r3, #4294967295
    28f2:	e062      	b.n	29ba <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    28f4:	4a33      	ldr	r2, [pc, #204]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    28fa:	4b32      	ldr	r3, [pc, #200]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    28fc:	681b      	ldr	r3, [r3, #0]
    28fe:	2200      	movs	r2, #0
    2900:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    2902:	4b30      	ldr	r3, [pc, #192]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2904:	681b      	ldr	r3, [r3, #0]
    2906:	2200      	movs	r2, #0
    2908:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    290a:	4b2e      	ldr	r3, [pc, #184]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	2200      	movs	r2, #0
    2910:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    2912:	4b2c      	ldr	r3, [pc, #176]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	2200      	movs	r2, #0
    2918:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    291a:	4b2a      	ldr	r3, [pc, #168]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	2200      	movs	r2, #0
    2920:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    2922:	4b28      	ldr	r3, [pc, #160]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	2200      	movs	r2, #0
    2928:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    292a:	4b26      	ldr	r3, [pc, #152]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    292c:	681b      	ldr	r3, [r3, #0]
    292e:	2200      	movs	r2, #0
    2930:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    2932:	4b24      	ldr	r3, [pc, #144]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2934:	681b      	ldr	r3, [r3, #0]
    2936:	22ff      	movs	r2, #255	; 0xff
    2938:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    293a:	4b22      	ldr	r3, [pc, #136]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	2201      	movs	r2, #1
    2940:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    2942:	4b20      	ldr	r3, [pc, #128]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2944:	681b      	ldr	r3, [r3, #0]
    2946:	78fa      	ldrb	r2, [r7, #3]
    2948:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    294a:	4b1e      	ldr	r3, [pc, #120]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	6a3a      	ldr	r2, [r7, #32]
    2950:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    2952:	4b1c      	ldr	r3, [pc, #112]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2954:	681b      	ldr	r3, [r3, #0]
    2956:	2200      	movs	r2, #0
    2958:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    295a:	4b1a      	ldr	r3, [pc, #104]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2962:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    2964:	4b17      	ldr	r3, [pc, #92]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	687a      	ldr	r2, [r7, #4]
    296a:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    296c:	4b15      	ldr	r3, [pc, #84]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    296e:	681b      	ldr	r3, [r3, #0]
    2970:	2200      	movs	r2, #0
    2972:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
    2974:	4b14      	ldr	r3, [pc, #80]	; (29c8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    2976:	6818      	ldr	r0, [r3, #0]
    2978:	4b12      	ldr	r3, [pc, #72]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    297a:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
    297c:	4a13      	ldr	r2, [pc, #76]	; (29cc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    297e:	9202      	str	r2, [sp, #8]
    2980:	9301      	str	r3, [sp, #4]
    2982:	2300      	movs	r3, #0
    2984:	9300      	str	r3, [sp, #0]
    2986:	f240 73ff 	movw	r3, #2047	; 0x7ff
    298a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    298c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    298e:	4c10      	ldr	r4, [pc, #64]	; (29d0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    2990:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    2992:	4b0c      	ldr	r3, [pc, #48]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2994:	681b      	ldr	r3, [r3, #0]
    2996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2998:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
    299a:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    299c:	681c      	ldr	r4, [r3, #0]
    299e:	4b0a      	ldr	r3, [pc, #40]	; (29c8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    29a0:	6818      	ldr	r0, [r3, #0]
    29a2:	2300      	movs	r3, #0
    29a4:	9301      	str	r3, [sp, #4]
    29a6:	2301      	movs	r3, #1
    29a8:	9300      	str	r3, [sp, #0]
    29aa:	2300      	movs	r3, #0
    29ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    29ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
    29b0:	4d08      	ldr	r5, [pc, #32]	; (29d4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
    29b2:	47a8      	blx	r5
    29b4:	4603      	mov	r3, r0
    29b6:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    29b8:	2300      	movs	r3, #0
}
    29ba:	4618      	mov	r0, r3
    29bc:	3710      	adds	r7, #16
    29be:	46bd      	mov	sp, r7
    29c0:	bdb0      	pop	{r4, r5, r7, pc}
    29c2:	bf00      	nop
    29c4:	200019f4 	.word	0x200019f4
    29c8:	200019e4 	.word	0x200019e4
    29cc:	000027ed 	.word	0x000027ed
    29d0:	00001d79 	.word	0x00001d79
    29d4:	00001e79 	.word	0x00001e79

000029d8 <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
    29d8:	b480      	push	{r7}
    29da:	b083      	sub	sp, #12
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
{
} //CO_OD
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	4618      	mov	r0, r3
    29e4:	370c      	adds	r7, #12
    29e6:	46bd      	mov	sp, r7
    29e8:	bc80      	pop	{r7}
    29ea:	4770      	bx	lr

000029ec <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
    29ec:	b480      	push	{r7}
    29ee:	b083      	sub	sp, #12
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	4618      	mov	r0, r3
    29f8:	370c      	adds	r7, #12
    29fa:	46bd      	mov	sp, r7
    29fc:	bc80      	pop	{r7}
    29fe:	4770      	bx	lr

00002a00 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
    2a00:	b480      	push	{r7}
    2a02:	b083      	sub	sp, #12
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	4618      	mov	r0, r3
    2a0c:	370c      	adds	r7, #12
    2a0e:	46bd      	mov	sp, r7
    2a10:	bc80      	pop	{r7}
    2a12:	4770      	bx	lr

00002a14 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    2a14:	b480      	push	{r7}
    2a16:	b083      	sub	sp, #12
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	4618      	mov	r0, r3
    2a20:	370c      	adds	r7, #12
    2a22:	46bd      	mov	sp, r7
    2a24:	bc80      	pop	{r7}
    2a26:	4770      	bx	lr

00002a28 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    2a28:	b580      	push	{r7, lr}
    2a2a:	b084      	sub	sp, #16
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	6078      	str	r0, [r7, #4]
    2a30:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    2a36:	68fb      	ldr	r3, [r7, #12]
    2a38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d076      	beq.n	2b2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	695b      	ldr	r3, [r3, #20]
    2a44:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    2a46:	2b05      	cmp	r3, #5
    2a48:	d171      	bne.n	2b2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
    2a4a:	683b      	ldr	r3, [r7, #0]
    2a4c:	7d1b      	ldrb	r3, [r3, #20]
    2a4e:	461a      	mov	r2, r3
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2a56:	429a      	cmp	r2, r3
    2a58:	db69      	blt.n	2b2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    2a60:	2b00      	cmp	r3, #0
    2a62:	d031      	beq.n	2ac8 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
    2a64:	68fb      	ldr	r3, [r7, #12]
    2a66:	689b      	ldr	r3, [r3, #8]
    2a68:	7edb      	ldrb	r3, [r3, #27]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d02c      	beq.n	2ac8 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    2a6e:	683b      	ldr	r3, [r7, #0]
    2a70:	7d5a      	ldrb	r2, [r3, #21]
    2a72:	68fb      	ldr	r3, [r7, #12]
    2a74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    2a78:	683b      	ldr	r3, [r7, #0]
    2a7a:	7d9a      	ldrb	r2, [r3, #22]
    2a7c:	68fb      	ldr	r3, [r7, #12]
    2a7e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    2a82:	683b      	ldr	r3, [r7, #0]
    2a84:	7dda      	ldrb	r2, [r3, #23]
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    2a8c:	683b      	ldr	r3, [r7, #0]
    2a8e:	7e1a      	ldrb	r2, [r3, #24]
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    2a96:	683b      	ldr	r3, [r7, #0]
    2a98:	7e5a      	ldrb	r2, [r3, #25]
    2a9a:	68fb      	ldr	r3, [r7, #12]
    2a9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    2aa0:	683b      	ldr	r3, [r7, #0]
    2aa2:	7e9a      	ldrb	r2, [r3, #26]
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    2aaa:	683b      	ldr	r3, [r7, #0]
    2aac:	7eda      	ldrb	r2, [r3, #27]
    2aae:	68fb      	ldr	r3, [r7, #12]
    2ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    2ab4:	683b      	ldr	r3, [r7, #0]
    2ab6:	7f1a      	ldrb	r2, [r3, #28]
    2ab8:	68fb      	ldr	r3, [r7, #12]
    2aba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    2abe:	68fb      	ldr	r3, [r7, #12]
    2ac0:	2201      	movs	r2, #1
    2ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2ac6:	e02b      	b.n	2b20 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
    2ac8:	683b      	ldr	r3, [r7, #0]
    2aca:	7d5a      	ldrb	r2, [r3, #21]
    2acc:	68fb      	ldr	r3, [r7, #12]
    2ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    2ad2:	683b      	ldr	r3, [r7, #0]
    2ad4:	7d9a      	ldrb	r2, [r3, #22]
    2ad6:	68fb      	ldr	r3, [r7, #12]
    2ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	7dda      	ldrb	r2, [r3, #23]
    2ae0:	68fb      	ldr	r3, [r7, #12]
    2ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    2ae6:	683b      	ldr	r3, [r7, #0]
    2ae8:	7e1a      	ldrb	r2, [r3, #24]
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    2af0:	683b      	ldr	r3, [r7, #0]
    2af2:	7e5a      	ldrb	r2, [r3, #25]
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    2afa:	683b      	ldr	r3, [r7, #0]
    2afc:	7e9a      	ldrb	r2, [r3, #26]
    2afe:	68fb      	ldr	r3, [r7, #12]
    2b00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    2b04:	683b      	ldr	r3, [r7, #0]
    2b06:	7eda      	ldrb	r2, [r3, #27]
    2b08:	68fb      	ldr	r3, [r7, #12]
    2b0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    2b0e:	683b      	ldr	r3, [r7, #0]
    2b10:	7f1a      	ldrb	r2, [r3, #28]
    2b12:	68fb      	ldr	r3, [r7, #12]
    2b14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	2201      	movs	r2, #1
    2b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	3315      	adds	r3, #21
    2b24:	2208      	movs	r2, #8
    2b26:	4619      	mov	r1, r3
    2b28:	4803      	ldr	r0, [pc, #12]	; (2b38 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
    2b2a:	4b04      	ldr	r3, [pc, #16]	; (2b3c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
    2b2c:	4798      	blx	r3
    }
}
    2b2e:	bf00      	nop
    2b30:	3710      	adds	r7, #16
    2b32:	46bd      	mov	sp, r7
    2b34:	bd80      	pop	{r7, pc}
    2b36:	bf00      	nop
    2b38:	20001a0d 	.word	0x20001a0d
    2b3c:	00011b19 	.word	0x00011b19

00002b40 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    2b40:	b590      	push	{r4, r7, lr}
    2b42:	b089      	sub	sp, #36	; 0x24
    2b44:	af04      	add	r7, sp, #16
    2b46:	6078      	str	r0, [r7, #4]
    2b48:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    2b4e:	683a      	ldr	r2, [r7, #0]
    2b50:	4b2d      	ldr	r3, [pc, #180]	; (2c08 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    2b52:	4013      	ands	r3, r2
    2b54:	2b00      	cmp	r3, #0
    2b56:	d123      	bne.n	2ba0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d01e      	beq.n	2ba0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    2b62:	68fb      	ldr	r3, [r7, #12]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d01b      	beq.n	2ba0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	69da      	ldr	r2, [r3, #28]
    2b6c:	68fb      	ldr	r3, [r7, #12]
    2b6e:	429a      	cmp	r2, r3
    2b70:	d105      	bne.n	2b7e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	7e1b      	ldrb	r3, [r3, #24]
    2b76:	461a      	mov	r2, r3
    2b78:	68fb      	ldr	r3, [r7, #12]
    2b7a:	4413      	add	r3, r2
    2b7c:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	2201      	movs	r2, #1
    2b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	68db      	ldr	r3, [r3, #12]
    2b8a:	7a1b      	ldrb	r3, [r3, #8]
    2b8c:	2bf0      	cmp	r3, #240	; 0xf0
    2b8e:	bfd4      	ite	le
    2b90:	2301      	movle	r3, #1
    2b92:	2300      	movgt	r3, #0
    2b94:	b2db      	uxtb	r3, r3
    2b96:	461a      	mov	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    2b9e:	e00d      	b.n	2bbc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    2ba0:	2300      	movs	r3, #0
    2ba2:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	2200      	movs	r2, #0
    2ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	2200      	movs	r2, #0
    2bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	2200      	movs	r2, #0
    2bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
    2bbc:	4b13      	ldr	r3, [pc, #76]	; (2c0c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    2bbe:	6818      	ldr	r0, [r3, #0]
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    2bc4:	4b12      	ldr	r3, [pc, #72]	; (2c10 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    2bc6:	9302      	str	r3, [sp, #8]
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	9301      	str	r3, [sp, #4]
    2bcc:	2300      	movs	r3, #0
    2bce:	9300      	str	r3, [sp, #0]
    2bd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2bd4:	68fa      	ldr	r2, [r7, #12]
    2bd6:	4c0f      	ldr	r4, [pc, #60]	; (2c14 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    2bd8:	47a0      	blx	r4
    2bda:	4603      	mov	r3, r0
    2bdc:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    2bde:	f997 300b 	ldrsb.w	r3, [r7, #11]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d00b      	beq.n	2bfe <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	2200      	movs	r2, #0
    2bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	2200      	movs	r2, #0
    2bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	2200      	movs	r2, #0
    2bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    2bfe:	bf00      	nop
    2c00:	3714      	adds	r7, #20
    2c02:	46bd      	mov	sp, r7
    2c04:	bd90      	pop	{r4, r7, pc}
    2c06:	bf00      	nop
    2c08:	bffff800 	.word	0xbffff800
    2c0c:	200019e4 	.word	0x200019e4
    2c10:	00002a29 	.word	0x00002a29
    2c14:	00001d79 	.word	0x00001d79

00002c18 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    2c18:	b590      	push	{r4, r7, lr}
    2c1a:	b089      	sub	sp, #36	; 0x24
    2c1c:	af02      	add	r7, sp, #8
    2c1e:	60f8      	str	r0, [r7, #12]
    2c20:	60b9      	str	r1, [r7, #8]
    2c22:	4613      	mov	r3, r2
    2c24:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    2c26:	68bb      	ldr	r3, [r7, #8]
    2c28:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    2c2a:	68ba      	ldr	r2, [r7, #8]
    2c2c:	4b1c      	ldr	r3, [pc, #112]	; (2ca0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    2c2e:	4013      	ands	r3, r2
    2c30:	2b00      	cmp	r3, #0
    2c32:	d115      	bne.n	2c60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    2c34:	68fb      	ldr	r3, [r7, #12]
    2c36:	7f9b      	ldrb	r3, [r3, #30]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d011      	beq.n	2c60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d00e      	beq.n	2c60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    2c42:	68fb      	ldr	r3, [r7, #12]
    2c44:	699a      	ldr	r2, [r3, #24]
    2c46:	697b      	ldr	r3, [r7, #20]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d105      	bne.n	2c58 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    2c4c:	68fb      	ldr	r3, [r7, #12]
    2c4e:	7d1b      	ldrb	r3, [r3, #20]
    2c50:	461a      	mov	r2, r3
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	4413      	add	r3, r2
    2c56:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    2c58:	68fb      	ldr	r3, [r7, #12]
    2c5a:	2201      	movs	r2, #1
    2c5c:	775a      	strb	r2, [r3, #29]
    2c5e:	e004      	b.n	2c6a <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    2c60:	2300      	movs	r3, #0
    2c62:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    2c64:	68fb      	ldr	r3, [r7, #12]
    2c66:	2200      	movs	r2, #0
    2c68:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    2c6a:	4b0e      	ldr	r3, [pc, #56]	; (2ca4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    2c6c:	6818      	ldr	r0, [r3, #0]
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	7f9b      	ldrb	r3, [r3, #30]
    2c76:	79fa      	ldrb	r2, [r7, #7]
    2c78:	9201      	str	r2, [sp, #4]
    2c7a:	9300      	str	r3, [sp, #0]
    2c7c:	2300      	movs	r3, #0
    2c7e:	697a      	ldr	r2, [r7, #20]
    2c80:	4c09      	ldr	r4, [pc, #36]	; (2ca8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    2c82:	47a0      	blx	r4
    2c84:	4602      	mov	r2, r0
    2c86:	68fb      	ldr	r3, [r7, #12]
    2c88:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d102      	bne.n	2c98 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    2c92:	68fb      	ldr	r3, [r7, #12]
    2c94:	2200      	movs	r2, #0
    2c96:	775a      	strb	r2, [r3, #29]
    }
}
    2c98:	bf00      	nop
    2c9a:	371c      	adds	r7, #28
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd90      	pop	{r4, r7, pc}
    2ca0:	bffff800 	.word	0xbffff800
    2ca4:	200019e4 	.word	0x200019e4
    2ca8:	00001e79 	.word	0x00001e79

00002cac <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b08a      	sub	sp, #40	; 0x28
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	60f8      	str	r0, [r7, #12]
    2cb4:	60b9      	str	r1, [r7, #8]
    2cb6:	603b      	str	r3, [r7, #0]
    2cb8:	4613      	mov	r3, r2
    2cba:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	0c1b      	lsrs	r3, r3, #16
    2cc0:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    2cc2:	68bb      	ldr	r3, [r7, #8]
    2cc4:	0a1b      	lsrs	r3, r3, #8
    2cc6:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    2cc8:	68bb      	ldr	r3, [r7, #8]
    2cca:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2ccc:	7ebb      	ldrb	r3, [r7, #26]
    2cce:	f003 0307 	and.w	r3, r3, #7
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d001      	beq.n	2cda <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    2cd6:	4b6b      	ldr	r3, [pc, #428]	; (2e84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2cd8:	e0cf      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    2cda:	7ebb      	ldrb	r3, [r7, #26]
    2cdc:	10db      	asrs	r3, r3, #3
    2cde:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    2ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ce2:	781a      	ldrb	r2, [r3, #0]
    2ce4:	7ebb      	ldrb	r3, [r7, #26]
    2ce6:	4413      	add	r3, r2
    2ce8:	b2da      	uxtb	r2, r3
    2cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2cec:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    2cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b08      	cmp	r3, #8
    2cf4:	dd01      	ble.n	2cfa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    2cf6:	4b64      	ldr	r3, [pc, #400]	; (2e88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    2cf8:	e0bf      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    2cfa:	69fb      	ldr	r3, [r7, #28]
    2cfc:	2b07      	cmp	r3, #7
    2cfe:	d832      	bhi.n	2d66 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    2d00:	7efb      	ldrb	r3, [r7, #27]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d12f      	bne.n	2d66 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    2d06:	2304      	movs	r3, #4
    2d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    2d0c:	69fb      	ldr	r3, [r7, #28]
    2d0e:	2b01      	cmp	r3, #1
    2d10:	d803      	bhi.n	2d1a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    2d12:	2300      	movs	r3, #0
    2d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d18:	e012      	b.n	2d40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    2d1a:	69fb      	ldr	r3, [r7, #28]
    2d1c:	2b02      	cmp	r3, #2
    2d1e:	d002      	beq.n	2d26 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    2d20:	69fb      	ldr	r3, [r7, #28]
    2d22:	2b05      	cmp	r3, #5
    2d24:	d103      	bne.n	2d2e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    2d26:	2301      	movs	r3, #1
    2d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d2c:	e008      	b.n	2d40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    2d2e:	69fb      	ldr	r3, [r7, #28]
    2d30:	2b03      	cmp	r3, #3
    2d32:	d002      	beq.n	2d3a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    2d34:	69fb      	ldr	r3, [r7, #28]
    2d36:	2b06      	cmp	r3, #6
    2d38:	d102      	bne.n	2d40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    2d3a:	2302      	movs	r3, #2
    2d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2d40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2d44:	7ebb      	ldrb	r3, [r7, #26]
    2d46:	429a      	cmp	r2, r3
    2d48:	da01      	bge.n	2d4e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    2d4a:	4b4e      	ldr	r3, [pc, #312]	; (2e84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2d4c:	e095      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    2d4e:	79fb      	ldrb	r3, [r7, #7]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d103      	bne.n	2d5c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    2d54:	683b      	ldr	r3, [r7, #0]
    2d56:	4a4d      	ldr	r2, [pc, #308]	; (2e8c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    2d58:	601a      	str	r2, [r3, #0]
    2d5a:	e002      	b.n	2d62 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    2d5c:	683b      	ldr	r3, [r7, #0]
    2d5e:	4a4c      	ldr	r2, [pc, #304]	; (2e90 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    2d60:	601a      	str	r2, [r3, #0]

        return 0;
    2d62:	2300      	movs	r3, #0
    2d64:	e089      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
    2d66:	4b4b      	ldr	r3, [pc, #300]	; (2e94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	3304      	adds	r3, #4
    2d6c:	69f9      	ldr	r1, [r7, #28]
    2d6e:	4618      	mov	r0, r3
    2d70:	4b49      	ldr	r3, [pc, #292]	; (2e98 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    2d72:	4798      	blx	r3
    2d74:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    2d76:	697b      	ldr	r3, [r7, #20]
    2d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d7c:	4293      	cmp	r3, r2
    2d7e:	d00b      	beq.n	2d98 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    2d80:	7ef9      	ldrb	r1, [r7, #27]
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2d86:	697a      	ldr	r2, [r7, #20]
    2d88:	4613      	mov	r3, r2
    2d8a:	009b      	lsls	r3, r3, #2
    2d8c:	4413      	add	r3, r2
    2d8e:	009b      	lsls	r3, r3, #2
    2d90:	4403      	add	r3, r0
    2d92:	791b      	ldrb	r3, [r3, #4]
    2d94:	4299      	cmp	r1, r3
    2d96:	dd01      	ble.n	2d9c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    2d98:	4b40      	ldr	r3, [pc, #256]	; (2e9c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    2d9a:	e06e      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
    2d9c:	4b3d      	ldr	r3, [pc, #244]	; (2e94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	3304      	adds	r3, #4
    2da2:	7efa      	ldrb	r2, [r7, #27]
    2da4:	6979      	ldr	r1, [r7, #20]
    2da6:	4618      	mov	r0, r3
    2da8:	4b3d      	ldr	r3, [pc, #244]	; (2ea0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    2daa:	4798      	blx	r3
    2dac:	4603      	mov	r3, r0
    2dae:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2db0:	79fb      	ldrb	r3, [r7, #7]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d10b      	bne.n	2dce <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    2db6:	7cfb      	ldrb	r3, [r7, #19]
    2db8:	f003 0310 	and.w	r3, r3, #16
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d004      	beq.n	2dca <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    2dc0:	7cfb      	ldrb	r3, [r7, #19]
    2dc2:	f003 0308 	and.w	r3, r3, #8
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d101      	bne.n	2dce <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    2dca:	4b2e      	ldr	r3, [pc, #184]	; (2e84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2dcc:	e055      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2dce:	79fb      	ldrb	r3, [r7, #7]
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d00b      	beq.n	2dec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    2dd4:	7cfb      	ldrb	r3, [r7, #19]
    2dd6:	f003 0320 	and.w	r3, r3, #32
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d004      	beq.n	2de8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    2dde:	7cfb      	ldrb	r3, [r7, #19]
    2de0:	f003 0304 	and.w	r3, r3, #4
    2de4:	2b00      	cmp	r3, #0
    2de6:	d101      	bne.n	2dec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    2de8:	4b26      	ldr	r3, [pc, #152]	; (2e84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2dea:	e046      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
    2dec:	4b29      	ldr	r3, [pc, #164]	; (2e94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	3304      	adds	r3, #4
    2df2:	7efa      	ldrb	r2, [r7, #27]
    2df4:	6979      	ldr	r1, [r7, #20]
    2df6:	4618      	mov	r0, r3
    2df8:	4b2a      	ldr	r3, [pc, #168]	; (2ea4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    2dfa:	4798      	blx	r3
    2dfc:	4603      	mov	r3, r0
    2dfe:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2e00:	7cba      	ldrb	r2, [r7, #18]
    2e02:	7ebb      	ldrb	r3, [r7, #26]
    2e04:	429a      	cmp	r2, r3
    2e06:	da01      	bge.n	2e0c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    2e08:	4b1e      	ldr	r3, [pc, #120]	; (2e84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2e0a:	e036      	b.n	2e7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    2e0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
    2e10:	2b00      	cmp	r3, #0
    2e12:	da01      	bge.n	2e18 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    2e14:	2201      	movs	r2, #1
    2e16:	e000      	b.n	2e1a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    2e18:	2200      	movs	r2, #0
    2e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e1c:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
    2e1e:	4b1d      	ldr	r3, [pc, #116]	; (2e94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2e20:	681b      	ldr	r3, [r3, #0]
    2e22:	3304      	adds	r3, #4
    2e24:	7efa      	ldrb	r2, [r7, #27]
    2e26:	6979      	ldr	r1, [r7, #20]
    2e28:	4618      	mov	r0, r3
    2e2a:	4b1f      	ldr	r3, [pc, #124]	; (2ea8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    2e2c:	4798      	blx	r3
    2e2e:	4602      	mov	r2, r0
    2e30:	683b      	ldr	r3, [r7, #0]
    2e32:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    2e34:	7cfb      	ldrb	r3, [r7, #19]
    2e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d01c      	beq.n	2e78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    2e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e40:	781b      	ldrb	r3, [r3, #0]
    2e42:	461a      	mov	r2, r3
    2e44:	7ebb      	ldrb	r3, [r7, #26]
    2e46:	1ad3      	subs	r3, r2, r3
    2e48:	623b      	str	r3, [r7, #32]
    2e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	461a      	mov	r2, r3
    2e50:	6a3b      	ldr	r3, [r7, #32]
    2e52:	429a      	cmp	r2, r3
    2e54:	d910      	bls.n	2e78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    2e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e58:	781b      	ldrb	r3, [r3, #0]
    2e5a:	b25a      	sxtb	r2, r3
    2e5c:	2101      	movs	r1, #1
    2e5e:	6a3b      	ldr	r3, [r7, #32]
    2e60:	fa01 f303 	lsl.w	r3, r1, r3
    2e64:	b25b      	sxtb	r3, r3
    2e66:	4313      	orrs	r3, r2
    2e68:	b25b      	sxtb	r3, r3
    2e6a:	b2da      	uxtb	r2, r3
    2e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e6e:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    2e70:	6a3b      	ldr	r3, [r7, #32]
    2e72:	3301      	adds	r3, #1
    2e74:	623b      	str	r3, [r7, #32]
    2e76:	e7e8      	b.n	2e4a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    2e78:	2300      	movs	r3, #0
}
    2e7a:	4618      	mov	r0, r3
    2e7c:	3728      	adds	r7, #40	; 0x28
    2e7e:	46bd      	mov	sp, r7
    2e80:	bd80      	pop	{r7, pc}
    2e82:	bf00      	nop
    2e84:	06040041 	.word	0x06040041
    2e88:	06040042 	.word	0x06040042
    2e8c:	20001a1c 	.word	0x20001a1c
    2e90:	20001a18 	.word	0x20001a18
    2e94:	200019e4 	.word	0x200019e4
    2e98:	00003e15 	.word	0x00003e15
    2e9c:	06020000 	.word	0x06020000
    2ea0:	00003f69 	.word	0x00003f69
    2ea4:	00003ec1 	.word	0x00003ec1
    2ea8:	00004019 	.word	0x00004019

00002eac <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    2eac:	b590      	push	{r4, r7, lr}
    2eae:	b091      	sub	sp, #68	; 0x44
    2eb0:	af04      	add	r7, sp, #16
    2eb2:	6078      	str	r0, [r7, #4]
    2eb4:	460b      	mov	r3, r1
    2eb6:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    2eb8:	2300      	movs	r3, #0
    2eba:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    2ebc:	2300      	movs	r3, #0
    2ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	691b      	ldr	r3, [r3, #16]
    2ec4:	3304      	adds	r3, #4
    2ec6:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    2ec8:	78fb      	ldrb	r3, [r7, #3]
    2eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d045      	beq.n	2f5e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    2ed2:	2300      	movs	r3, #0
    2ed4:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    2ed6:	7dfb      	ldrb	r3, [r7, #23]
    2ed8:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    2eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2edc:	1d1a      	adds	r2, r3, #4
    2ede:	627a      	str	r2, [r7, #36]	; 0x24
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    2ee8:	f107 0210 	add.w	r2, r7, #16
    2eec:	f107 030e 	add.w	r3, r7, #14
    2ef0:	9302      	str	r3, [sp, #8]
    2ef2:	f107 030f 	add.w	r3, r7, #15
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	f107 0317 	add.w	r3, r7, #23
    2efc:	9300      	str	r3, [sp, #0]
    2efe:	4613      	mov	r3, r2
    2f00:	2200      	movs	r2, #0
    2f02:	69b9      	ldr	r1, [r7, #24]
    2f04:	4c1a      	ldr	r4, [pc, #104]	; (2f70 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    2f06:	47a0      	blx	r4
    2f08:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    2f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d00e      	beq.n	2f2e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    2f10:	2300      	movs	r3, #0
    2f12:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    2f14:	4b17      	ldr	r3, [pc, #92]	; (2f74 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	1d18      	adds	r0, r3, #4
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	6819      	ldr	r1, [r3, #0]
    2f1e:	69bb      	ldr	r3, [r7, #24]
    2f20:	9300      	str	r3, [sp, #0]
    2f22:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    2f26:	221a      	movs	r2, #26
    2f28:	4c13      	ldr	r4, [pc, #76]	; (2f78 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    2f2a:	47a0      	blx	r4
    2f2c:	e017      	b.n	2f5e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    2f2e:	7ffb      	ldrb	r3, [r7, #31]
    2f30:	623b      	str	r3, [r7, #32]
    2f32:	7dfb      	ldrb	r3, [r7, #23]
    2f34:	461a      	mov	r2, r3
    2f36:	6a3b      	ldr	r3, [r7, #32]
    2f38:	429a      	cmp	r2, r3
    2f3a:	d90c      	bls.n	2f56 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    2f3c:	693a      	ldr	r2, [r7, #16]
    2f3e:	1c53      	adds	r3, r2, #1
    2f40:	613b      	str	r3, [r7, #16]
    2f42:	6879      	ldr	r1, [r7, #4]
    2f44:	6a3b      	ldr	r3, [r7, #32]
    2f46:	3308      	adds	r3, #8
    2f48:	009b      	lsls	r3, r3, #2
    2f4a:	440b      	add	r3, r1
    2f4c:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    2f4e:	6a3b      	ldr	r3, [r7, #32]
    2f50:	3301      	adds	r3, #1
    2f52:	623b      	str	r3, [r7, #32]
    2f54:	e7ed      	b.n	2f32 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    2f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f58:	3b01      	subs	r3, #1
    2f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f5c:	e7b6      	b.n	2ecc <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    2f5e:	7dfa      	ldrb	r2, [r7, #23]
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    2f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3734      	adds	r7, #52	; 0x34
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd90      	pop	{r4, r7, pc}
    2f70:	00002cad 	.word	0x00002cad
    2f74:	200019e4 	.word	0x200019e4
    2f78:	000023bd 	.word	0x000023bd

00002f7c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    2f7c:	b590      	push	{r4, r7, lr}
    2f7e:	b091      	sub	sp, #68	; 0x44
    2f80:	af04      	add	r7, sp, #16
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	460b      	mov	r3, r1
    2f86:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    2f88:	2300      	movs	r3, #0
    2f8a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    2f8c:	2300      	movs	r3, #0
    2f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	68db      	ldr	r3, [r3, #12]
    2f94:	3304      	adds	r3, #4
    2f96:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	2200      	movs	r2, #0
    2f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    2fa0:	78fb      	ldrb	r3, [r7, #3]
    2fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d042      	beq.n	3030 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    2faa:	7dfb      	ldrb	r3, [r7, #23]
    2fac:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    2fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fb0:	1d1a      	adds	r2, r3, #4
    2fb2:	627a      	str	r2, [r7, #36]	; 0x24
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    2fb8:	687b      	ldr	r3, [r7, #4]
    2fba:	6858      	ldr	r0, [r3, #4]
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    2fc0:	f107 0110 	add.w	r1, r7, #16
    2fc4:	f107 020f 	add.w	r2, r7, #15
    2fc8:	9202      	str	r2, [sp, #8]
    2fca:	9301      	str	r3, [sp, #4]
    2fcc:	f107 0317 	add.w	r3, r7, #23
    2fd0:	9300      	str	r3, [sp, #0]
    2fd2:	460b      	mov	r3, r1
    2fd4:	2201      	movs	r2, #1
    2fd6:	69b9      	ldr	r1, [r7, #24]
    2fd8:	4c19      	ldr	r4, [pc, #100]	; (3040 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    2fda:	47a0      	blx	r4
    2fdc:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    2fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d00e      	beq.n	3002 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    2fe4:	2300      	movs	r3, #0
    2fe6:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    2fe8:	4b16      	ldr	r3, [pc, #88]	; (3044 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	1d18      	adds	r0, r3, #4
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	6819      	ldr	r1, [r3, #0]
    2ff2:	69bb      	ldr	r3, [r7, #24]
    2ff4:	9300      	str	r3, [sp, #0]
    2ff6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    2ffa:	221a      	movs	r2, #26
    2ffc:	4c12      	ldr	r4, [pc, #72]	; (3048 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    2ffe:	47a0      	blx	r4
    3000:	e016      	b.n	3030 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    3002:	7ffb      	ldrb	r3, [r7, #31]
    3004:	623b      	str	r3, [r7, #32]
    3006:	7dfb      	ldrb	r3, [r7, #23]
    3008:	461a      	mov	r2, r3
    300a:	6a3b      	ldr	r3, [r7, #32]
    300c:	429a      	cmp	r2, r3
    300e:	d90b      	bls.n	3028 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    3010:	693b      	ldr	r3, [r7, #16]
    3012:	1c5a      	adds	r2, r3, #1
    3014:	613a      	str	r2, [r7, #16]
    3016:	687a      	ldr	r2, [r7, #4]
    3018:	6a39      	ldr	r1, [r7, #32]
    301a:	3108      	adds	r1, #8
    301c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    3020:	6a3b      	ldr	r3, [r7, #32]
    3022:	3301      	adds	r3, #1
    3024:	623b      	str	r3, [r7, #32]
    3026:	e7ee      	b.n	3006 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    3028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    302a:	3b01      	subs	r3, #1
    302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    302e:	e7b9      	b.n	2fa4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    3030:	7dfa      	ldrb	r2, [r7, #23]
    3032:	687b      	ldr	r3, [r7, #4]
    3034:	779a      	strb	r2, [r3, #30]

    return ret;
    3036:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    3038:	4618      	mov	r0, r3
    303a:	3734      	adds	r7, #52	; 0x34
    303c:	46bd      	mov	sp, r7
    303e:	bd90      	pop	{r4, r7, pc}
    3040:	00002cad 	.word	0x00002cad
    3044:	200019e4 	.word	0x200019e4
    3048:	000023bd 	.word	0x000023bd

0000304c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    304c:	b580      	push	{r7, lr}
    304e:	b088      	sub	sp, #32
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	7f5b      	ldrb	r3, [r3, #29]
    305e:	2b00      	cmp	r3, #0
    3060:	d025      	beq.n	30ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    3062:	687b      	ldr	r3, [r7, #4]
    3064:	7f1b      	ldrb	r3, [r3, #28]
    3066:	2b01      	cmp	r3, #1
    3068:	d11f      	bne.n	30aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	685b      	ldr	r3, [r3, #4]
    306e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    3070:	69bb      	ldr	r3, [r7, #24]
    3072:	681b      	ldr	r3, [r3, #0]
    3074:	b29a      	uxth	r2, r3
    3076:	69fb      	ldr	r3, [r7, #28]
    3078:	69db      	ldr	r3, [r3, #28]
    307a:	429a      	cmp	r2, r3
    307c:	d10a      	bne.n	3094 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    307e:	69fb      	ldr	r3, [r7, #28]
    3080:	69db      	ldr	r3, [r3, #28]
    3082:	2b00      	cmp	r3, #0
    3084:	d006      	beq.n	3094 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    3086:	69bb      	ldr	r3, [r7, #24]
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	69fa      	ldr	r2, [r7, #28]
    308c:	7e12      	ldrb	r2, [r2, #24]
    308e:	441a      	add	r2, r3
    3090:	69bb      	ldr	r3, [r7, #24]
    3092:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    3094:	69fb      	ldr	r3, [r7, #28]
    3096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    309a:	2b00      	cmp	r3, #0
    309c:	d105      	bne.n	30aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    309e:	69bb      	ldr	r3, [r7, #24]
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    30a6:	69bb      	ldr	r3, [r7, #24]
    30a8:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    30aa:	2300      	movs	r3, #0
    30ac:	e07f      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    30ae:	69fb      	ldr	r3, [r7, #28]
    30b0:	f893 3020 	ldrb.w	r3, [r3, #32]
    30b4:	f003 0304 	and.w	r3, r3, #4
    30b8:	2b00      	cmp	r3, #0
    30ba:	d001      	beq.n	30c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    30bc:	4b3e      	ldr	r3, [pc, #248]	; (31b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    30be:	e076      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    30c0:	69fb      	ldr	r3, [r7, #28]
    30c2:	695b      	ldr	r3, [r3, #20]
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	2b05      	cmp	r3, #5
    30c8:	d108      	bne.n	30dc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    30ca:	69fb      	ldr	r3, [r7, #28]
    30cc:	f893 3020 	ldrb.w	r3, [r3, #32]
    30d0:	f003 0301 	and.w	r3, r3, #1
    30d4:	2b00      	cmp	r3, #0
    30d6:	d001      	beq.n	30dc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    30d8:	4b38      	ldr	r3, [pc, #224]	; (31bc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    30da:	e068      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	7f1b      	ldrb	r3, [r3, #28]
    30e0:	2b01      	cmp	r3, #1
    30e2:	d139      	bne.n	3158 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	685b      	ldr	r3, [r3, #4]
    30e8:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    30ea:	697b      	ldr	r3, [r7, #20]
    30ec:	681a      	ldr	r2, [r3, #0]
    30ee:	4b34      	ldr	r3, [pc, #208]	; (31c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    30f0:	4013      	ands	r3, r2
    30f2:	2b00      	cmp	r3, #0
    30f4:	d001      	beq.n	30fa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    30f6:	4b33      	ldr	r3, [pc, #204]	; (31c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    30f8:	e059      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    30fa:	697b      	ldr	r3, [r7, #20]
    30fc:	681b      	ldr	r3, [r3, #0]
    30fe:	b29a      	uxth	r2, r3
    3100:	69fb      	ldr	r3, [r7, #28]
    3102:	69db      	ldr	r3, [r3, #28]
    3104:	69f9      	ldr	r1, [r7, #28]
    3106:	7e09      	ldrb	r1, [r1, #24]
    3108:	440b      	add	r3, r1
    310a:	429a      	cmp	r2, r3
    310c:	d10c      	bne.n	3128 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    310e:	697b      	ldr	r3, [r7, #20]
    3110:	681b      	ldr	r3, [r3, #0]
    3112:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    3116:	697b      	ldr	r3, [r7, #20]
    3118:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    311a:	697b      	ldr	r3, [r7, #20]
    311c:	681a      	ldr	r2, [r3, #0]
    311e:	69fb      	ldr	r3, [r7, #28]
    3120:	69db      	ldr	r3, [r3, #28]
    3122:	441a      	add	r2, r3
    3124:	697b      	ldr	r3, [r7, #20]
    3126:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    3128:	69fb      	ldr	r3, [r7, #28]
    312a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    312e:	2b00      	cmp	r3, #0
    3130:	d00b      	beq.n	314a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    3132:	697b      	ldr	r3, [r7, #20]
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	69fb      	ldr	r3, [r7, #28]
    3138:	68db      	ldr	r3, [r3, #12]
    313a:	685b      	ldr	r3, [r3, #4]
    313c:	4053      	eors	r3, r2
    313e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3142:	2b00      	cmp	r3, #0
    3144:	d001      	beq.n	314a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3146:	4b1f      	ldr	r3, [pc, #124]	; (31c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3148:	e031      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
    314a:	697b      	ldr	r3, [r7, #20]
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	4619      	mov	r1, r3
    3150:	69f8      	ldr	r0, [r7, #28]
    3152:	4b1d      	ldr	r3, [pc, #116]	; (31c8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    3154:	4798      	blx	r3
    3156:	e029      	b.n	31ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	7f1b      	ldrb	r3, [r3, #28]
    315c:	2b02      	cmp	r3, #2
    315e:	d125      	bne.n	31ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	685b      	ldr	r3, [r3, #4]
    3164:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    3166:	69fb      	ldr	r3, [r7, #28]
    3168:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    316c:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    316e:	693b      	ldr	r3, [r7, #16]
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	2bf0      	cmp	r3, #240	; 0xf0
    3174:	dd05      	ble.n	3182 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    3176:	693b      	ldr	r3, [r7, #16]
    3178:	781b      	ldrb	r3, [r3, #0]
    317a:	2bfd      	cmp	r3, #253	; 0xfd
    317c:	dc01      	bgt.n	3182 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    317e:	4b11      	ldr	r3, [pc, #68]	; (31c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3180:	e015      	b.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    3182:	693b      	ldr	r3, [r7, #16]
    3184:	781b      	ldrb	r3, [r3, #0]
    3186:	2bf0      	cmp	r3, #240	; 0xf0
    3188:	bfd4      	ite	le
    318a:	2301      	movle	r3, #1
    318c:	2300      	movgt	r3, #0
    318e:	b2db      	uxtb	r3, r3
    3190:	461a      	mov	r2, r3
    3192:	69fb      	ldr	r3, [r7, #28]
    3194:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    3198:	69fb      	ldr	r3, [r7, #28]
    319a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    319e:	7bfa      	ldrb	r2, [r7, #15]
    31a0:	429a      	cmp	r2, r3
    31a2:	d003      	beq.n	31ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    31a4:	69fb      	ldr	r3, [r7, #28]
    31a6:	2200      	movs	r2, #0
    31a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    31ac:	2300      	movs	r3, #0
}
    31ae:	4618      	mov	r0, r3
    31b0:	3720      	adds	r7, #32
    31b2:	46bd      	mov	sp, r7
    31b4:	bd80      	pop	{r7, pc}
    31b6:	bf00      	nop
    31b8:	06010002 	.word	0x06010002
    31bc:	08000022 	.word	0x08000022
    31c0:	3fff8000 	.word	0x3fff8000
    31c4:	06090030 	.word	0x06090030
    31c8:	00002b41 	.word	0x00002b41

000031cc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    31cc:	b580      	push	{r7, lr}
    31ce:	b088      	sub	sp, #32
    31d0:	af00      	add	r7, sp, #0
    31d2:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	7f1b      	ldrb	r3, [r3, #28]
    31de:	2b04      	cmp	r3, #4
    31e0:	d101      	bne.n	31e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    31e2:	4b6d      	ldr	r3, [pc, #436]	; (3398 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    31e4:	e0d4      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	7f5b      	ldrb	r3, [r3, #29]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d024      	beq.n	3238 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	7f1b      	ldrb	r3, [r3, #28]
    31f2:	2b01      	cmp	r3, #1
    31f4:	d11e      	bne.n	3234 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	685b      	ldr	r3, [r3, #4]
    31fa:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    31fc:	69bb      	ldr	r3, [r7, #24]
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	b29a      	uxth	r2, r3
    3202:	69fb      	ldr	r3, [r7, #28]
    3204:	699b      	ldr	r3, [r3, #24]
    3206:	429a      	cmp	r2, r3
    3208:	d10a      	bne.n	3220 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    320a:	69fb      	ldr	r3, [r7, #28]
    320c:	699b      	ldr	r3, [r3, #24]
    320e:	2b00      	cmp	r3, #0
    3210:	d006      	beq.n	3220 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    3212:	69bb      	ldr	r3, [r7, #24]
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	69fa      	ldr	r2, [r7, #28]
    3218:	7d12      	ldrb	r2, [r2, #20]
    321a:	441a      	add	r2, r3
    321c:	69bb      	ldr	r3, [r7, #24]
    321e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    3220:	69fb      	ldr	r3, [r7, #28]
    3222:	7f5b      	ldrb	r3, [r3, #29]
    3224:	2b00      	cmp	r3, #0
    3226:	d105      	bne.n	3234 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    3228:	69bb      	ldr	r3, [r7, #24]
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    3230:	69bb      	ldr	r3, [r7, #24]
    3232:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3234:	2300      	movs	r3, #0
    3236:	e0ab      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    3238:	69fb      	ldr	r3, [r7, #28]
    323a:	7f1b      	ldrb	r3, [r3, #28]
    323c:	f003 0304 	and.w	r3, r3, #4
    3240:	2b00      	cmp	r3, #0
    3242:	d001      	beq.n	3248 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3244:	4b55      	ldr	r3, [pc, #340]	; (339c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    3246:	e0a3      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    3248:	69fb      	ldr	r3, [r7, #28]
    324a:	691b      	ldr	r3, [r3, #16]
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	2b05      	cmp	r3, #5
    3250:	d107      	bne.n	3262 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    3252:	69fb      	ldr	r3, [r7, #28]
    3254:	7f1b      	ldrb	r3, [r3, #28]
    3256:	f003 0301 	and.w	r3, r3, #1
    325a:	2b00      	cmp	r3, #0
    325c:	d001      	beq.n	3262 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    325e:	4b50      	ldr	r3, [pc, #320]	; (33a0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    3260:	e096      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	7f1b      	ldrb	r3, [r3, #28]
    3266:	2b01      	cmp	r3, #1
    3268:	d140      	bne.n	32ec <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	685b      	ldr	r3, [r3, #4]
    326e:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    3270:	697b      	ldr	r3, [r7, #20]
    3272:	681a      	ldr	r2, [r3, #0]
    3274:	4b4b      	ldr	r3, [pc, #300]	; (33a4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    3276:	4013      	ands	r3, r2
    3278:	2b00      	cmp	r3, #0
    327a:	d001      	beq.n	3280 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    327c:	4b4a      	ldr	r3, [pc, #296]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    327e:	e087      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    3280:	697b      	ldr	r3, [r7, #20]
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	b29a      	uxth	r2, r3
    3286:	69fb      	ldr	r3, [r7, #28]
    3288:	699b      	ldr	r3, [r3, #24]
    328a:	69f9      	ldr	r1, [r7, #28]
    328c:	7d09      	ldrb	r1, [r1, #20]
    328e:	440b      	add	r3, r1
    3290:	429a      	cmp	r2, r3
    3292:	d10c      	bne.n	32ae <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    3294:	697b      	ldr	r3, [r7, #20]
    3296:	681b      	ldr	r3, [r3, #0]
    3298:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    329c:	697b      	ldr	r3, [r7, #20]
    329e:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    32a0:	697b      	ldr	r3, [r7, #20]
    32a2:	681a      	ldr	r2, [r3, #0]
    32a4:	69fb      	ldr	r3, [r7, #28]
    32a6:	699b      	ldr	r3, [r3, #24]
    32a8:	441a      	add	r2, r3
    32aa:	697b      	ldr	r3, [r7, #20]
    32ac:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    32ae:	69fb      	ldr	r3, [r7, #28]
    32b0:	7f5b      	ldrb	r3, [r3, #29]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d00b      	beq.n	32ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    32b6:	697b      	ldr	r3, [r7, #20]
    32b8:	681a      	ldr	r2, [r3, #0]
    32ba:	69fb      	ldr	r3, [r7, #28]
    32bc:	689b      	ldr	r3, [r3, #8]
    32be:	685b      	ldr	r3, [r3, #4]
    32c0:	4053      	eors	r3, r2
    32c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    32c6:	2b00      	cmp	r3, #0
    32c8:	d001      	beq.n	32ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    32ca:	4b37      	ldr	r3, [pc, #220]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    32cc:	e060      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    32ce:	697b      	ldr	r3, [r7, #20]
    32d0:	6819      	ldr	r1, [r3, #0]
    32d2:	69fb      	ldr	r3, [r7, #28]
    32d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    32d6:	7b9b      	ldrb	r3, [r3, #14]
    32d8:	b2db      	uxtb	r3, r3
    32da:	461a      	mov	r2, r3
    32dc:	69f8      	ldr	r0, [r7, #28]
    32de:	4b33      	ldr	r3, [pc, #204]	; (33ac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    32e0:	4798      	blx	r3
        TPDO->syncCounter = 255;
    32e2:	69fb      	ldr	r3, [r7, #28]
    32e4:	22ff      	movs	r2, #255	; 0xff
    32e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    32ea:	e050      	b.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	7f1b      	ldrb	r3, [r3, #28]
    32f0:	2b02      	cmp	r3, #2
    32f2:	d11b      	bne.n	332c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	685b      	ldr	r3, [r3, #4]
    32f8:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    32fa:	693b      	ldr	r3, [r7, #16]
    32fc:	781b      	ldrb	r3, [r3, #0]
    32fe:	2bf0      	cmp	r3, #240	; 0xf0
    3300:	dd05      	ble.n	330e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    3302:	693b      	ldr	r3, [r7, #16]
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	2bfd      	cmp	r3, #253	; 0xfd
    3308:	dc01      	bgt.n	330e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    330a:	4b27      	ldr	r3, [pc, #156]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    330c:	e040      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    330e:	69fb      	ldr	r3, [r7, #28]
    3310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3312:	693a      	ldr	r2, [r7, #16]
    3314:	7812      	ldrb	r2, [r2, #0]
    3316:	2af0      	cmp	r2, #240	; 0xf0
    3318:	dc01      	bgt.n	331e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    331a:	2201      	movs	r2, #1
    331c:	e000      	b.n	3320 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    331e:	2200      	movs	r2, #0
    3320:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    3322:	69fb      	ldr	r3, [r7, #28]
    3324:	22ff      	movs	r2, #255	; 0xff
    3326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    332a:	e030      	b.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	7f1b      	ldrb	r3, [r3, #28]
    3330:	2b03      	cmp	r3, #3
    3332:	d109      	bne.n	3348 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3334:	69fb      	ldr	r3, [r7, #28]
    3336:	7f5b      	ldrb	r3, [r3, #29]
    3338:	2b00      	cmp	r3, #0
    333a:	d001      	beq.n	3340 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    333c:	4b1a      	ldr	r3, [pc, #104]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    333e:	e027      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    3340:	69fb      	ldr	r3, [r7, #28]
    3342:	2200      	movs	r2, #0
    3344:	645a      	str	r2, [r3, #68]	; 0x44
    3346:	e022      	b.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	7f1b      	ldrb	r3, [r3, #28]
    334c:	2b05      	cmp	r3, #5
    334e:	d10b      	bne.n	3368 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	685b      	ldr	r3, [r3, #4]
    3354:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    3356:	68bb      	ldr	r3, [r7, #8]
    3358:	681b      	ldr	r3, [r3, #0]
    335a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    335e:	fb02 f203 	mul.w	r2, r2, r3
    3362:	69fb      	ldr	r3, [r7, #28]
    3364:	649a      	str	r2, [r3, #72]	; 0x48
    3366:	e012      	b.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	7f1b      	ldrb	r3, [r3, #28]
    336c:	2b06      	cmp	r3, #6
    336e:	d10e      	bne.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	685b      	ldr	r3, [r3, #4]
    3374:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3376:	69fb      	ldr	r3, [r7, #28]
    3378:	7f5b      	ldrb	r3, [r3, #29]
    337a:	2b00      	cmp	r3, #0
    337c:	d001      	beq.n	3382 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    337e:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3380:	e006      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    3382:	68fb      	ldr	r3, [r7, #12]
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	2bf0      	cmp	r3, #240	; 0xf0
    3388:	dd01      	ble.n	338e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    338a:	4b07      	ldr	r3, [pc, #28]	; (33a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    338c:	e000      	b.n	3390 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    338e:	2300      	movs	r3, #0
}
    3390:	4618      	mov	r0, r3
    3392:	3720      	adds	r7, #32
    3394:	46bd      	mov	sp, r7
    3396:	bd80      	pop	{r7, pc}
    3398:	06090011 	.word	0x06090011
    339c:	06010002 	.word	0x06010002
    33a0:	08000022 	.word	0x08000022
    33a4:	3fff8000 	.word	0x3fff8000
    33a8:	06090030 	.word	0x06090030
    33ac:	00002c19 	.word	0x00002c19

000033b0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    33b0:	b590      	push	{r4, r7, lr}
    33b2:	b08d      	sub	sp, #52	; 0x34
    33b4:	af04      	add	r7, sp, #16
    33b6:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	7f5b      	ldrb	r3, [r3, #29]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d010      	beq.n	33e8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	685b      	ldr	r3, [r3, #4]
    33ca:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	7f1b      	ldrb	r3, [r3, #28]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d107      	bne.n	33e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    33d4:	69fb      	ldr	r3, [r7, #28]
    33d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    33da:	2b00      	cmp	r3, #0
    33dc:	d102      	bne.n	33e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    33de:	69bb      	ldr	r3, [r7, #24]
    33e0:	2200      	movs	r2, #0
    33e2:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    33e4:	2300      	movs	r3, #0
    33e6:	e054      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    33e8:	69fb      	ldr	r3, [r7, #28]
    33ea:	f893 3020 	ldrb.w	r3, [r3, #32]
    33ee:	f003 0308 	and.w	r3, r3, #8
    33f2:	2b00      	cmp	r3, #0
    33f4:	d001      	beq.n	33fa <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    33f6:	4b29      	ldr	r3, [pc, #164]	; (349c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    33f8:	e04b      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    33fa:	69fb      	ldr	r3, [r7, #28]
    33fc:	695b      	ldr	r3, [r3, #20]
    33fe:	781b      	ldrb	r3, [r3, #0]
    3400:	2b05      	cmp	r3, #5
    3402:	d108      	bne.n	3416 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    3404:	69fb      	ldr	r3, [r7, #28]
    3406:	f893 3020 	ldrb.w	r3, [r3, #32]
    340a:	f003 0302 	and.w	r3, r3, #2
    340e:	2b00      	cmp	r3, #0
    3410:	d001      	beq.n	3416 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3412:	4b23      	ldr	r3, [pc, #140]	; (34a0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    3414:	e03d      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    3416:	69fb      	ldr	r3, [r7, #28]
    3418:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    341c:	2b00      	cmp	r3, #0
    341e:	d001      	beq.n	3424 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3420:	4b20      	ldr	r3, [pc, #128]	; (34a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3422:	e036      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	7f1b      	ldrb	r3, [r3, #28]
    3428:	2b00      	cmp	r3, #0
    342a:	d110      	bne.n	344e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	685b      	ldr	r3, [r3, #4]
    3430:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    3432:	697b      	ldr	r3, [r7, #20]
    3434:	781b      	ldrb	r3, [r3, #0]
    3436:	2b08      	cmp	r3, #8
    3438:	dd01      	ble.n	343e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    343a:	4b1b      	ldr	r3, [pc, #108]	; (34a8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    343c:	e029      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    343e:	697b      	ldr	r3, [r7, #20]
    3440:	781b      	ldrb	r3, [r3, #0]
    3442:	4619      	mov	r1, r3
    3444:	69f8      	ldr	r0, [r7, #28]
    3446:	4b19      	ldr	r3, [pc, #100]	; (34ac <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    3448:	4798      	blx	r3
    344a:	4603      	mov	r3, r0
    344c:	e021      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	685b      	ldr	r3, [r3, #4]
    3452:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3454:	2300      	movs	r3, #0
    3456:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3458:	2300      	movs	r3, #0
    345a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    345c:	69fb      	ldr	r3, [r7, #28]
    345e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3462:	2b00      	cmp	r3, #0
    3464:	d001      	beq.n	346a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3466:	4b0f      	ldr	r3, [pc, #60]	; (34a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3468:	e013      	b.n	3492 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    346a:	69fb      	ldr	r3, [r7, #28]
    346c:	6858      	ldr	r0, [r3, #4]
    346e:	693b      	ldr	r3, [r7, #16]
    3470:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    3472:	f107 020c 	add.w	r2, r7, #12
    3476:	f107 0309 	add.w	r3, r7, #9
    347a:	9302      	str	r3, [sp, #8]
    347c:	f107 030a 	add.w	r3, r7, #10
    3480:	9301      	str	r3, [sp, #4]
    3482:	f107 030b 	add.w	r3, r7, #11
    3486:	9300      	str	r3, [sp, #0]
    3488:	4613      	mov	r3, r2
    348a:	2200      	movs	r2, #0
    348c:	4c08      	ldr	r4, [pc, #32]	; (34b0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    348e:	47a0      	blx	r4
    3490:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    3492:	4618      	mov	r0, r3
    3494:	3724      	adds	r7, #36	; 0x24
    3496:	46bd      	mov	sp, r7
    3498:	bd90      	pop	{r4, r7, pc}
    349a:	bf00      	nop
    349c:	06010002 	.word	0x06010002
    34a0:	08000022 	.word	0x08000022
    34a4:	06010000 	.word	0x06010000
    34a8:	06040042 	.word	0x06040042
    34ac:	00002ead 	.word	0x00002ead
    34b0:	00002cad 	.word	0x00002cad

000034b4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    34b4:	b590      	push	{r4, r7, lr}
    34b6:	b08d      	sub	sp, #52	; 0x34
    34b8:	af04      	add	r7, sp, #16
    34ba:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	7f5b      	ldrb	r3, [r3, #29]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d00f      	beq.n	34ea <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	685b      	ldr	r3, [r3, #4]
    34ce:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	7f1b      	ldrb	r3, [r3, #28]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d106      	bne.n	34e6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    34d8:	69fb      	ldr	r3, [r7, #28]
    34da:	7f9b      	ldrb	r3, [r3, #30]
    34dc:	2b00      	cmp	r3, #0
    34de:	d102      	bne.n	34e6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    34e0:	69bb      	ldr	r3, [r7, #24]
    34e2:	2200      	movs	r2, #0
    34e4:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    34e6:	2300      	movs	r3, #0
    34e8:	e050      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    34ea:	69fb      	ldr	r3, [r7, #28]
    34ec:	7f1b      	ldrb	r3, [r3, #28]
    34ee:	f003 0308 	and.w	r3, r3, #8
    34f2:	2b00      	cmp	r3, #0
    34f4:	d001      	beq.n	34fa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    34f6:	4b27      	ldr	r3, [pc, #156]	; (3594 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    34f8:	e048      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    34fa:	69fb      	ldr	r3, [r7, #28]
    34fc:	691b      	ldr	r3, [r3, #16]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	2b05      	cmp	r3, #5
    3502:	d107      	bne.n	3514 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    3504:	69fb      	ldr	r3, [r7, #28]
    3506:	7f1b      	ldrb	r3, [r3, #28]
    3508:	f003 0302 	and.w	r3, r3, #2
    350c:	2b00      	cmp	r3, #0
    350e:	d001      	beq.n	3514 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3510:	4b21      	ldr	r3, [pc, #132]	; (3598 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    3512:	e03b      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    3514:	69fb      	ldr	r3, [r7, #28]
    3516:	7f5b      	ldrb	r3, [r3, #29]
    3518:	2b00      	cmp	r3, #0
    351a:	d001      	beq.n	3520 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    351c:	4b1f      	ldr	r3, [pc, #124]	; (359c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    351e:	e035      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	7f1b      	ldrb	r3, [r3, #28]
    3524:	2b00      	cmp	r3, #0
    3526:	d110      	bne.n	354a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	685b      	ldr	r3, [r3, #4]
    352c:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    352e:	697b      	ldr	r3, [r7, #20]
    3530:	781b      	ldrb	r3, [r3, #0]
    3532:	2b08      	cmp	r3, #8
    3534:	dd01      	ble.n	353a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3536:	4b1a      	ldr	r3, [pc, #104]	; (35a0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    3538:	e028      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    353a:	697b      	ldr	r3, [r7, #20]
    353c:	781b      	ldrb	r3, [r3, #0]
    353e:	4619      	mov	r1, r3
    3540:	69f8      	ldr	r0, [r7, #28]
    3542:	4b18      	ldr	r3, [pc, #96]	; (35a4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    3544:	4798      	blx	r3
    3546:	4603      	mov	r3, r0
    3548:	e020      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	685b      	ldr	r3, [r3, #4]
    354e:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3550:	2300      	movs	r3, #0
    3552:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3554:	2300      	movs	r3, #0
    3556:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    3558:	69fb      	ldr	r3, [r7, #28]
    355a:	7f9b      	ldrb	r3, [r3, #30]
    355c:	2b00      	cmp	r3, #0
    355e:	d001      	beq.n	3564 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3560:	4b0e      	ldr	r3, [pc, #56]	; (359c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3562:	e013      	b.n	358c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    3564:	69fb      	ldr	r3, [r7, #28]
    3566:	6858      	ldr	r0, [r3, #4]
    3568:	693b      	ldr	r3, [r7, #16]
    356a:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    356c:	f107 020c 	add.w	r2, r7, #12
    3570:	f107 0309 	add.w	r3, r7, #9
    3574:	9302      	str	r3, [sp, #8]
    3576:	f107 030a 	add.w	r3, r7, #10
    357a:	9301      	str	r3, [sp, #4]
    357c:	f107 030b 	add.w	r3, r7, #11
    3580:	9300      	str	r3, [sp, #0]
    3582:	4613      	mov	r3, r2
    3584:	2201      	movs	r2, #1
    3586:	4c08      	ldr	r4, [pc, #32]	; (35a8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    3588:	47a0      	blx	r4
    358a:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    358c:	4618      	mov	r0, r3
    358e:	3724      	adds	r7, #36	; 0x24
    3590:	46bd      	mov	sp, r7
    3592:	bd90      	pop	{r4, r7, pc}
    3594:	06010002 	.word	0x06010002
    3598:	08000022 	.word	0x08000022
    359c:	06010000 	.word	0x06010000
    35a0:	06040042 	.word	0x06040042
    35a4:	00002f7d 	.word	0x00002f7d
    35a8:	00002cad 	.word	0x00002cad

000035ac <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    35ac:	b590      	push	{r4, r7, lr}
    35ae:	b087      	sub	sp, #28
    35b0:	af02      	add	r7, sp, #8
    35b2:	60f8      	str	r0, [r7, #12]
    35b4:	60b9      	str	r1, [r7, #8]
    35b6:	607a      	str	r2, [r7, #4]
    35b8:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    35ba:	68bb      	ldr	r3, [r7, #8]
    35bc:	2b00      	cmp	r3, #0
    35be:	d014      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d011      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35c6:	683b      	ldr	r3, [r7, #0]
    35c8:	2b00      	cmp	r3, #0
    35ca:	d00e      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35cc:	6a3b      	ldr	r3, [r7, #32]
    35ce:	2b00      	cmp	r3, #0
    35d0:	d00b      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35d4:	2b00      	cmp	r3, #0
    35d6:	d008      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35da:	2b00      	cmp	r3, #0
    35dc:	d005      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    35de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35e0:	2b00      	cmp	r3, #0
    35e2:	d002      	beq.n	35ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    35e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35e6:	2b00      	cmp	r3, #0
    35e8:	d102      	bne.n	35f0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    35ea:	f04f 33ff 	mov.w	r3, #4294967295
    35ee:	e050      	b.n	3692 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    35f0:	68bb      	ldr	r3, [r7, #8]
    35f2:	687a      	ldr	r2, [r7, #4]
    35f4:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    35f6:	68bb      	ldr	r3, [r7, #8]
    35f8:	683a      	ldr	r2, [r7, #0]
    35fa:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    35fc:	68bb      	ldr	r3, [r7, #8]
    35fe:	6a3a      	ldr	r2, [r7, #32]
    3600:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    3602:	68bb      	ldr	r3, [r7, #8]
    3604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3606:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    3608:	68bb      	ldr	r3, [r7, #8]
    360a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    360c:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    360e:	68bb      	ldr	r3, [r7, #8]
    3610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3612:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    3614:	68bb      	ldr	r3, [r7, #8]
    3616:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    361a:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    361c:	68bb      	ldr	r3, [r7, #8]
    361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3620:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    3622:	68bb      	ldr	r3, [r7, #8]
    3624:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    3628:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    362c:	4b1b      	ldr	r3, [pc, #108]	; (369c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    362e:	681b      	ldr	r3, [r3, #0]
    3630:	1d18      	adds	r0, r3, #4
    3632:	2300      	movs	r3, #0
    3634:	9301      	str	r3, [sp, #4]
    3636:	2300      	movs	r3, #0
    3638:	9300      	str	r3, [sp, #0]
    363a:	68bb      	ldr	r3, [r7, #8]
    363c:	4a18      	ldr	r2, [pc, #96]	; (36a0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    363e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3640:	4c18      	ldr	r4, [pc, #96]	; (36a4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3642:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    3644:	4b15      	ldr	r3, [pc, #84]	; (369c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	1d18      	adds	r0, r3, #4
    364a:	2300      	movs	r3, #0
    364c:	9301      	str	r3, [sp, #4]
    364e:	2300      	movs	r3, #0
    3650:	9300      	str	r3, [sp, #0]
    3652:	68bb      	ldr	r3, [r7, #8]
    3654:	4a14      	ldr	r2, [pc, #80]	; (36a8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    3656:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3658:	4c12      	ldr	r4, [pc, #72]	; (36a4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    365a:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    365c:	68bb      	ldr	r3, [r7, #8]
    365e:	2200      	movs	r2, #0
    3660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3664:	68bb      	ldr	r3, [r7, #8]
    3666:	2200      	movs	r2, #0
    3668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    366c:	68bb      	ldr	r3, [r7, #8]
    366e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3670:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    3672:	68bb      	ldr	r3, [r7, #8]
    3674:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3676:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    3678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    367a:	781b      	ldrb	r3, [r3, #0]
    367c:	4619      	mov	r1, r3
    367e:	68b8      	ldr	r0, [r7, #8]
    3680:	4b0a      	ldr	r3, [pc, #40]	; (36ac <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    3682:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    3684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3686:	685b      	ldr	r3, [r3, #4]
    3688:	4619      	mov	r1, r3
    368a:	68b8      	ldr	r0, [r7, #8]
    368c:	4b08      	ldr	r3, [pc, #32]	; (36b0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    368e:	4798      	blx	r3

    return CO_ERROR_NO;
    3690:	2300      	movs	r3, #0
}
    3692:	4618      	mov	r0, r3
    3694:	3714      	adds	r7, #20
    3696:	46bd      	mov	sp, r7
    3698:	bd90      	pop	{r4, r7, pc}
    369a:	bf00      	nop
    369c:	200019e4 	.word	0x200019e4
    36a0:	0000304d 	.word	0x0000304d
    36a4:	00003d59 	.word	0x00003d59
    36a8:	000033b1 	.word	0x000033b1
    36ac:	00002ead 	.word	0x00002ead
    36b0:	00002b41 	.word	0x00002b41

000036b4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    36b4:	b590      	push	{r4, r7, lr}
    36b6:	b087      	sub	sp, #28
    36b8:	af02      	add	r7, sp, #8
    36ba:	60f8      	str	r0, [r7, #12]
    36bc:	60b9      	str	r1, [r7, #8]
    36be:	607a      	str	r2, [r7, #4]
    36c0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    36c2:	68bb      	ldr	r3, [r7, #8]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d011      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	2b00      	cmp	r3, #0
    36cc:	d00e      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d00b      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    36d4:	6a3b      	ldr	r3, [r7, #32]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d008      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    36da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36dc:	2b00      	cmp	r3, #0
    36de:	d005      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    36e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36e2:	2b00      	cmp	r3, #0
    36e4:	d002      	beq.n	36ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    36e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    36e8:	2b00      	cmp	r3, #0
    36ea:	d102      	bne.n	36f2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    36ec:	f04f 33ff 	mov.w	r3, #4294967295
    36f0:	e07e      	b.n	37f0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
    36f2:	68bb      	ldr	r3, [r7, #8]
    36f4:	687a      	ldr	r2, [r7, #4]
    36f6:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    36f8:	68bb      	ldr	r3, [r7, #8]
    36fa:	683a      	ldr	r2, [r7, #0]
    36fc:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    36fe:	68bb      	ldr	r3, [r7, #8]
    3700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3702:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    3704:	68bb      	ldr	r3, [r7, #8]
    3706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3708:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    370a:	68bb      	ldr	r3, [r7, #8]
    370c:	6a3a      	ldr	r2, [r7, #32]
    370e:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    3710:	68bb      	ldr	r3, [r7, #8]
    3712:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    3716:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    3718:	68bb      	ldr	r3, [r7, #8]
    371a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    371c:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    371e:	68bb      	ldr	r3, [r7, #8]
    3720:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    3724:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    3726:	4b34      	ldr	r3, [pc, #208]	; (37f8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	1d18      	adds	r0, r3, #4
    372c:	2300      	movs	r3, #0
    372e:	9301      	str	r3, [sp, #4]
    3730:	2300      	movs	r3, #0
    3732:	9300      	str	r3, [sp, #0]
    3734:	68bb      	ldr	r3, [r7, #8]
    3736:	4a31      	ldr	r2, [pc, #196]	; (37fc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
    3738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    373a:	4c31      	ldr	r4, [pc, #196]	; (3800 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
    373c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    373e:	4b2e      	ldr	r3, [pc, #184]	; (37f8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
    3740:	681b      	ldr	r3, [r3, #0]
    3742:	1d18      	adds	r0, r3, #4
    3744:	2300      	movs	r3, #0
    3746:	9301      	str	r3, [sp, #4]
    3748:	2300      	movs	r3, #0
    374a:	9300      	str	r3, [sp, #0]
    374c:	68bb      	ldr	r3, [r7, #8]
    374e:	4a2d      	ldr	r2, [pc, #180]	; (3804 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
    3750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3752:	4c2b      	ldr	r4, [pc, #172]	; (3800 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
    3754:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    3756:	68bb      	ldr	r3, [r7, #8]
    3758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    375a:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    375c:	68bb      	ldr	r3, [r7, #8]
    375e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3760:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    3762:	68bb      	ldr	r3, [r7, #8]
    3764:	22ff      	movs	r2, #255	; 0xff
    3766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    376a:	68bb      	ldr	r3, [r7, #8]
    376c:	2200      	movs	r2, #0
    376e:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    3770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3772:	695b      	ldr	r3, [r3, #20]
    3774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3778:	fb02 f203 	mul.w	r2, r2, r3
    377c:	68bb      	ldr	r3, [r7, #8]
    377e:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    3780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3782:	7a1b      	ldrb	r3, [r3, #8]
    3784:	2bfd      	cmp	r3, #253	; 0xfd
    3786:	dd02      	ble.n	378e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    3788:	68bb      	ldr	r3, [r7, #8]
    378a:	2201      	movs	r2, #1
    378c:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3790:	781b      	ldrb	r3, [r3, #0]
    3792:	4619      	mov	r1, r3
    3794:	68b8      	ldr	r0, [r7, #8]
    3796:	4b1c      	ldr	r3, [pc, #112]	; (3808 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
    3798:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    379c:	6859      	ldr	r1, [r3, #4]
    379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37a0:	7a1b      	ldrb	r3, [r3, #8]
    37a2:	2bf0      	cmp	r3, #240	; 0xf0
    37a4:	dc01      	bgt.n	37aa <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    37a6:	2301      	movs	r3, #1
    37a8:	e000      	b.n	37ac <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    37aa:	2300      	movs	r3, #0
    37ac:	461a      	mov	r2, r3
    37ae:	68b8      	ldr	r0, [r7, #8]
    37b0:	4b16      	ldr	r3, [pc, #88]	; (380c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
    37b2:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    37b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37b6:	7a1b      	ldrb	r3, [r3, #8]
    37b8:	2bf0      	cmp	r3, #240	; 0xf0
    37ba:	dd03      	ble.n	37c4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    37bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37be:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    37c0:	2bfd      	cmp	r3, #253	; 0xfd
    37c2:	dd03      	ble.n	37cc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    37c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37c6:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    37c8:	2bf0      	cmp	r3, #240	; 0xf0
    37ca:	dd02      	ble.n	37d2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    37cc:	68bb      	ldr	r3, [r7, #8]
    37ce:	2200      	movs	r2, #0
    37d0:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
    37d2:	68fb      	ldr	r3, [r7, #12]
    37d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    37d8:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
    37da:	68bb      	ldr	r3, [r7, #8]
    37dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    37de:	2210      	movs	r2, #16
    37e0:	4619      	mov	r1, r3
    37e2:	480b      	ldr	r0, [pc, #44]	; (3810 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
    37e4:	4b0b      	ldr	r3, [pc, #44]	; (3814 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
    37e6:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	4a09      	ldr	r2, [pc, #36]	; (3810 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
    37ec:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
    37ee:	2300      	movs	r3, #0
}
    37f0:	4618      	mov	r0, r3
    37f2:	3714      	adds	r7, #20
    37f4:	46bd      	mov	sp, r7
    37f6:	bd90      	pop	{r4, r7, pc}
    37f8:	200019e4 	.word	0x200019e4
    37fc:	000031cd 	.word	0x000031cd
    3800:	00003d59 	.word	0x00003d59
    3804:	000034b5 	.word	0x000034b5
    3808:	00002f7d 	.word	0x00002f7d
    380c:	00002c19 	.word	0x00002c19
    3810:	200019f8 	.word	0x200019f8
    3814:	00011b19 	.word	0x00011b19

00003818 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
    3818:	b580      	push	{r7, lr}
    381a:	b086      	sub	sp, #24
    381c:	af00      	add	r7, sp, #0
    381e:	60f8      	str	r0, [r7, #12]
    3820:	60b9      	str	r1, [r7, #8]
    3822:	4613      	mov	r3, r2
    3824:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
    3826:	68fb      	ldr	r3, [r7, #12]
    3828:	681b      	ldr	r3, [r3, #0]
    382a:	79fa      	ldrb	r2, [r7, #7]
    382c:	f502 7200 	add.w	r2, r2, #512	; 0x200
    3830:	0092      	lsls	r2, r2, #2
    3832:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
    3834:	2300      	movs	r3, #0
    3836:	75fb      	strb	r3, [r7, #23]
    3838:	7dfb      	ldrb	r3, [r7, #23]
    383a:	2b07      	cmp	r3, #7
    383c:	dc0d      	bgt.n	385a <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	681a      	ldr	r2, [r3, #0]
    3842:	7dfb      	ldrb	r3, [r7, #23]
    3844:	7df9      	ldrb	r1, [r7, #23]
    3846:	68b8      	ldr	r0, [r7, #8]
    3848:	4401      	add	r1, r0
    384a:	7809      	ldrb	r1, [r1, #0]
    384c:	4413      	add	r3, r2
    384e:	460a      	mov	r2, r1
    3850:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
    3852:	7dfb      	ldrb	r3, [r7, #23]
    3854:	3301      	adds	r3, #1
    3856:	75fb      	strb	r3, [r7, #23]
    3858:	e7ee      	b.n	3838 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
    385a:	68fb      	ldr	r3, [r7, #12]
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	2204      	movs	r2, #4
    3860:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
    3862:	4b06      	ldr	r3, [pc, #24]	; (387c <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
    3864:	681a      	ldr	r2, [r3, #0]
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	681b      	ldr	r3, [r3, #0]
    386a:	4619      	mov	r1, r3
    386c:	4610      	mov	r0, r2
    386e:	4b04      	ldr	r3, [pc, #16]	; (3880 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
    3870:	4798      	blx	r3
    3872:	4603      	mov	r3, r0
}
    3874:	4618      	mov	r0, r3
    3876:	3718      	adds	r7, #24
    3878:	46bd      	mov	sp, r7
    387a:	bd80      	pop	{r7, pc}
    387c:	200019e4 	.word	0x200019e4
    3880:	00001f25 	.word	0x00001f25

00003884 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
    388c:	6878      	ldr	r0, [r7, #4]
    388e:	4b05      	ldr	r3, [pc, #20]	; (38a4 <_ZN12CO_SDO_ClassC1Ev+0x20>)
    3890:	4798      	blx	r3
{
	ptrCOSDOClass=this;
    3892:	4a05      	ldr	r2, [pc, #20]	; (38a8 <_ZN12CO_SDO_ClassC1Ev+0x24>)
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	4618      	mov	r0, r3
    389c:	3708      	adds	r7, #8
    389e:	46bd      	mov	sp, r7
    38a0:	bd80      	pop	{r7, pc}
    38a2:	bf00      	nop
    38a4:	0000454d 	.word	0x0000454d
    38a8:	20001a20 	.word	0x20001a20

000038ac <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
    38ac:	b580      	push	{r7, lr}
    38ae:	b082      	sub	sp, #8
    38b0:	af00      	add	r7, sp, #0
    38b2:	6078      	str	r0, [r7, #4]
    38b4:	6878      	ldr	r0, [r7, #4]
    38b6:	4b03      	ldr	r3, [pc, #12]	; (38c4 <_ZN12CO_SDO_ClassD1Ev+0x18>)
    38b8:	4798      	blx	r3
{
} //~CO_SDO_Class
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	4618      	mov	r0, r3
    38be:	3708      	adds	r7, #8
    38c0:	46bd      	mov	sp, r7
    38c2:	bd80      	pop	{r7, pc}
    38c4:	00004561 	.word	0x00004561

000038c8 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
    38c8:	b480      	push	{r7}
    38ca:	b087      	sub	sp, #28
    38cc:	af00      	add	r7, sp, #0
    38ce:	60f8      	str	r0, [r7, #12]
    38d0:	60b9      	str	r1, [r7, #8]
    38d2:	607a      	str	r2, [r7, #4]
    38d4:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
    38d6:	2300      	movs	r3, #0
    38d8:	617b      	str	r3, [r7, #20]
    38da:	697a      	ldr	r2, [r7, #20]
    38dc:	683b      	ldr	r3, [r7, #0]
    38de:	429a      	cmp	r2, r3
    38e0:	d20b      	bcs.n	38fa <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
    38e2:	68ba      	ldr	r2, [r7, #8]
    38e4:	697b      	ldr	r3, [r7, #20]
    38e6:	4413      	add	r3, r2
    38e8:	6879      	ldr	r1, [r7, #4]
    38ea:	697a      	ldr	r2, [r7, #20]
    38ec:	440a      	add	r2, r1
    38ee:	7812      	ldrb	r2, [r2, #0]
    38f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
    38f2:	697b      	ldr	r3, [r7, #20]
    38f4:	3301      	adds	r3, #1
    38f6:	617b      	str	r3, [r7, #20]
    38f8:	e7ef      	b.n	38da <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
    38fa:	bf00      	nop
    38fc:	371c      	adds	r7, #28
    38fe:	46bd      	mov	sp, r7
    3900:	bc80      	pop	{r7}
    3902:	4770      	bx	lr

00003904 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
    3904:	b480      	push	{r7}
    3906:	b087      	sub	sp, #28
    3908:	af00      	add	r7, sp, #0
    390a:	6078      	str	r0, [r7, #4]
    390c:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
    390e:	683b      	ldr	r3, [r7, #0]
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	3301      	adds	r3, #1
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
    391c:	683b      	ldr	r3, [r7, #0]
    391e:	3302      	adds	r3, #2
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
    3924:	683b      	ldr	r3, [r7, #0]
    3926:	3303      	adds	r3, #3
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
    392c:	68bb      	ldr	r3, [r7, #8]
}
    392e:	4618      	mov	r0, r3
    3930:	371c      	adds	r7, #28
    3932:	46bd      	mov	sp, r7
    3934:	bc80      	pop	{r7}
    3936:	4770      	bx	lr

00003938 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
    3938:	b480      	push	{r7}
    393a:	b089      	sub	sp, #36	; 0x24
    393c:	af00      	add	r7, sp, #0
    393e:	60f8      	str	r0, [r7, #12]
    3940:	60b9      	str	r1, [r7, #8]
    3942:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
    3948:	7c3a      	ldrb	r2, [r7, #16]
    394a:	68bb      	ldr	r3, [r7, #8]
    394c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
    394e:	68bb      	ldr	r3, [r7, #8]
    3950:	3301      	adds	r3, #1
    3952:	7c7a      	ldrb	r2, [r7, #17]
    3954:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
    3956:	68bb      	ldr	r3, [r7, #8]
    3958:	3302      	adds	r3, #2
    395a:	7cba      	ldrb	r2, [r7, #18]
    395c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
    395e:	68bb      	ldr	r3, [r7, #8]
    3960:	3303      	adds	r3, #3
    3962:	7cfa      	ldrb	r2, [r7, #19]
    3964:	701a      	strb	r2, [r3, #0]
}
    3966:	bf00      	nop
    3968:	3724      	adds	r7, #36	; 0x24
    396a:	46bd      	mov	sp, r7
    396c:	bc80      	pop	{r7}
    396e:	4770      	bx	lr

00003970 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
    3970:	b480      	push	{r7}
    3972:	b087      	sub	sp, #28
    3974:	af00      	add	r7, sp, #0
    3976:	60f8      	str	r0, [r7, #12]
    3978:	60b9      	str	r1, [r7, #8]
    397a:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    397c:	68bb      	ldr	r3, [r7, #8]
    397e:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    3980:	687b      	ldr	r3, [r7, #4]
    3982:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    3984:	693b      	ldr	r3, [r7, #16]
    3986:	781a      	ldrb	r2, [r3, #0]
    3988:	697b      	ldr	r3, [r7, #20]
    398a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    398c:	697b      	ldr	r3, [r7, #20]
    398e:	3301      	adds	r3, #1
    3990:	693a      	ldr	r2, [r7, #16]
    3992:	7852      	ldrb	r2, [r2, #1]
    3994:	701a      	strb	r2, [r3, #0]
}
    3996:	bf00      	nop
    3998:	371c      	adds	r7, #28
    399a:	46bd      	mov	sp, r7
    399c:	bc80      	pop	{r7}
    399e:	4770      	bx	lr

000039a0 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
    39a0:	b480      	push	{r7}
    39a2:	b087      	sub	sp, #28
    39a4:	af00      	add	r7, sp, #0
    39a6:	60f8      	str	r0, [r7, #12]
    39a8:	60b9      	str	r1, [r7, #8]
    39aa:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    39ac:	68bb      	ldr	r3, [r7, #8]
    39ae:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    39b4:	693b      	ldr	r3, [r7, #16]
    39b6:	781a      	ldrb	r2, [r3, #0]
    39b8:	697b      	ldr	r3, [r7, #20]
    39ba:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    39bc:	697b      	ldr	r3, [r7, #20]
    39be:	3301      	adds	r3, #1
    39c0:	693a      	ldr	r2, [r7, #16]
    39c2:	7852      	ldrb	r2, [r2, #1]
    39c4:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
    39c6:	697b      	ldr	r3, [r7, #20]
    39c8:	3302      	adds	r3, #2
    39ca:	693a      	ldr	r2, [r7, #16]
    39cc:	7892      	ldrb	r2, [r2, #2]
    39ce:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
    39d0:	697b      	ldr	r3, [r7, #20]
    39d2:	3303      	adds	r3, #3
    39d4:	693a      	ldr	r2, [r7, #16]
    39d6:	78d2      	ldrb	r2, [r2, #3]
    39d8:	701a      	strb	r2, [r3, #0]
}
    39da:	bf00      	nop
    39dc:	371c      	adds	r7, #28
    39de:	46bd      	mov	sp, r7
    39e0:	bc80      	pop	{r7}
    39e2:	4770      	bx	lr

000039e4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
    39e4:	b580      	push	{r7, lr}
    39e6:	b086      	sub	sp, #24
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
    39ec:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
    39f2:	683b      	ldr	r3, [r7, #0]
    39f4:	7d1b      	ldrb	r3, [r3, #20]
    39f6:	2b08      	cmp	r3, #8
    39f8:	f040 80a4 	bne.w	3b44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    39fc:	693b      	ldr	r3, [r7, #16]
    39fe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    3a02:	2b00      	cmp	r3, #0
    3a04:	f040 809e 	bne.w	3b44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    3a0e:	2b15      	cmp	r3, #21
    3a10:	d024      	beq.n	3a5c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
    3a12:	683b      	ldr	r3, [r7, #0]
    3a14:	7d5a      	ldrb	r2, [r3, #21]
    3a16:	693b      	ldr	r3, [r7, #16]
    3a18:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
    3a1a:	683b      	ldr	r3, [r7, #0]
    3a1c:	7d9a      	ldrb	r2, [r3, #22]
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
    3a22:	683b      	ldr	r3, [r7, #0]
    3a24:	7dda      	ldrb	r2, [r3, #23]
    3a26:	693b      	ldr	r3, [r7, #16]
    3a28:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
    3a2a:	683b      	ldr	r3, [r7, #0]
    3a2c:	7e1a      	ldrb	r2, [r3, #24]
    3a2e:	693b      	ldr	r3, [r7, #16]
    3a30:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
    3a32:	683b      	ldr	r3, [r7, #0]
    3a34:	7e5a      	ldrb	r2, [r3, #25]
    3a36:	693b      	ldr	r3, [r7, #16]
    3a38:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
    3a3a:	683b      	ldr	r3, [r7, #0]
    3a3c:	7e9a      	ldrb	r2, [r3, #26]
    3a3e:	693b      	ldr	r3, [r7, #16]
    3a40:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
    3a42:	683b      	ldr	r3, [r7, #0]
    3a44:	7eda      	ldrb	r2, [r3, #27]
    3a46:	693b      	ldr	r3, [r7, #16]
    3a48:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
    3a4a:	683b      	ldr	r3, [r7, #0]
    3a4c:	7f1a      	ldrb	r2, [r3, #28]
    3a4e:	693b      	ldr	r3, [r7, #16]
    3a50:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
    3a52:	693b      	ldr	r3, [r7, #16]
    3a54:	2201      	movs	r2, #1
    3a56:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    3a5a:	e067      	b.n	3b2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	7d5a      	ldrb	r2, [r3, #21]
    3a60:	693b      	ldr	r3, [r7, #16]
    3a62:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
    3a64:	693b      	ldr	r3, [r7, #16]
    3a66:	781b      	ldrb	r3, [r3, #0]
    3a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a6c:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
    3a6e:	693b      	ldr	r3, [r7, #16]
    3a70:	2200      	movs	r2, #0
    3a72:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
    3a74:	7bfa      	ldrb	r2, [r7, #15]
    3a76:	693b      	ldr	r3, [r7, #16]
    3a78:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3a7c:	3301      	adds	r3, #1
    3a7e:	429a      	cmp	r2, r3
    3a80:	d141      	bne.n	3b06 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
    3a82:	693b      	ldr	r3, [r7, #16]
    3a84:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3a88:	3301      	adds	r3, #1
    3a8a:	b2da      	uxtb	r2, r3
    3a8c:	693b      	ldr	r3, [r7, #16]
    3a8e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
    3a92:	2301      	movs	r3, #1
    3a94:	75fb      	strb	r3, [r7, #23]
    3a96:	7dfb      	ldrb	r3, [r7, #23]
    3a98:	2b07      	cmp	r3, #7
    3a9a:	dc1d      	bgt.n	3ad8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
    3a9c:	693b      	ldr	r3, [r7, #16]
    3a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3aa0:	693b      	ldr	r3, [r7, #16]
    3aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3aa4:	1c58      	adds	r0, r3, #1
    3aa6:	6939      	ldr	r1, [r7, #16]
    3aa8:	6388      	str	r0, [r1, #56]	; 0x38
    3aaa:	4413      	add	r3, r2
    3aac:	7dfa      	ldrb	r2, [r7, #23]
    3aae:	6839      	ldr	r1, [r7, #0]
    3ab0:	440a      	add	r2, r1
    3ab2:	7d52      	ldrb	r2, [r2, #21]
    3ab4:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    3ab6:	693b      	ldr	r3, [r7, #16]
    3ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3aba:	2b1f      	cmp	r3, #31
    3abc:	d908      	bls.n	3ad0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3abe:	693b      	ldr	r3, [r7, #16]
    3ac0:	2216      	movs	r2, #22
    3ac2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
    3ac6:	693b      	ldr	r3, [r7, #16]
    3ac8:	2201      	movs	r2, #1
    3aca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
    3ace:	e003      	b.n	3ad8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
    3ad0:	7dfb      	ldrb	r3, [r7, #23]
    3ad2:	3301      	adds	r3, #1
    3ad4:	75fb      	strb	r3, [r7, #23]
    3ad6:	e7de      	b.n	3a96 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
    3ad8:	693b      	ldr	r3, [r7, #16]
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	b25b      	sxtb	r3, r3
    3ade:	2b00      	cmp	r3, #0
    3ae0:	db08      	blt.n	3af4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
    3ae2:	693b      	ldr	r3, [r7, #16]
    3ae4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3ae8:	461a      	mov	r2, r3
    3aea:	693b      	ldr	r3, [r7, #16]
    3aec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    3af0:	429a      	cmp	r2, r3
    3af2:	db1b      	blt.n	3b2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3af4:	693b      	ldr	r3, [r7, #16]
    3af6:	2216      	movs	r2, #22
    3af8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
    3afc:	693b      	ldr	r3, [r7, #16]
    3afe:	2201      	movs	r2, #1
    3b00:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    3b04:	e012      	b.n	3b2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
    3b06:	693b      	ldr	r3, [r7, #16]
    3b08:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3b0c:	7bfa      	ldrb	r2, [r7, #15]
    3b0e:	429a      	cmp	r2, r3
    3b10:	d00c      	beq.n	3b2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d007      	beq.n	3b2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3b1c:	693b      	ldr	r3, [r7, #16]
    3b1e:	2216      	movs	r2, #22
    3b20:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
    3b24:	693b      	ldr	r3, [r7, #16]
    3b26:	2201      	movs	r2, #1
    3b28:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
    3b2c:	693b      	ldr	r3, [r7, #16]
    3b2e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    3b32:	2b00      	cmp	r3, #0
    3b34:	d006      	beq.n	3b44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    3b36:	693b      	ldr	r3, [r7, #16]
    3b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d002      	beq.n	3b44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
    3b3e:	693b      	ldr	r3, [r7, #16]
    3b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3b42:	4798      	blx	r3
        }
    }
}
    3b44:	bf00      	nop
    3b46:	3718      	adds	r7, #24
    3b48:	46bd      	mov	sp, r7
    3b4a:	bd80      	pop	{r7, pc}

00003b4c <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b086      	sub	sp, #24
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    3b54:	2300      	movs	r3, #0
    3b56:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
    3b5e:	4b12      	ldr	r3, [pc, #72]	; (3ba8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	1d1a      	adds	r2, r3, #4
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	685b      	ldr	r3, [r3, #4]
    3b68:	4619      	mov	r1, r3
    3b6a:	4610      	mov	r0, r2
    3b6c:	4b0f      	ldr	r3, [pc, #60]	; (3bac <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
    3b6e:	4798      	blx	r3
    3b70:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	7f5b      	ldrb	r3, [r3, #29]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d010      	beq.n	3b9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	7f1b      	ldrb	r3, [r3, #28]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d00c      	beq.n	3b9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
    3b82:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	1d18      	adds	r0, r3, #4
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	6859      	ldr	r1, [r3, #4]
    3b8c:	693b      	ldr	r3, [r7, #16]
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	461a      	mov	r2, r3
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	4413      	add	r3, r2
    3b96:	461a      	mov	r2, r3
    3b98:	4b05      	ldr	r3, [pc, #20]	; (3bb0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
    3b9a:	4798      	blx	r3
    }

    return ret;
    3b9c:	697b      	ldr	r3, [r7, #20]
}
    3b9e:	4618      	mov	r0, r3
    3ba0:	3718      	adds	r7, #24
    3ba2:	46bd      	mov	sp, r7
    3ba4:	bd80      	pop	{r7, pc}
    3ba6:	bf00      	nop
    3ba8:	200019e4 	.word	0x200019e4
    3bac:	00003905 	.word	0x00003905
    3bb0:	00003939 	.word	0x00003939

00003bb4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    3bb4:	b5b0      	push	{r4, r5, r7, lr}
    3bb6:	b08a      	sub	sp, #40	; 0x28
    3bb8:	af04      	add	r7, sp, #16
    3bba:	60f8      	str	r0, [r7, #12]
    3bbc:	60b9      	str	r1, [r7, #8]
    3bbe:	607a      	str	r2, [r7, #4]
    3bc0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
    3bc2:	68bb      	ldr	r3, [r7, #8]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d005      	beq.n	3bd4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    3bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d002      	beq.n	3bd4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    3bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d102      	bne.n	3bda <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    3bd4:	f04f 33ff 	mov.w	r3, #4294967295
    3bd8:	e0ac      	b.n	3d34 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
    3bda:	4a58      	ldr	r2, [pc, #352]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
    3be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3be2:	2b00      	cmp	r3, #0
    3be4:	d13b      	bne.n	3c5e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
    3be6:	4b55      	ldr	r3, [pc, #340]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	2201      	movs	r2, #1
    3bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
    3bf0:	4b52      	ldr	r3, [pc, #328]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3bf6:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
    3bf8:	4b50      	ldr	r3, [pc, #320]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3bfe:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
    3c00:	4b4e      	ldr	r3, [pc, #312]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c06:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
    3c08:	2300      	movs	r3, #0
    3c0a:	617b      	str	r3, [r7, #20]
    3c0c:	697a      	ldr	r2, [r7, #20]
    3c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c10:	429a      	cmp	r2, r3
    3c12:	d238      	bcs.n	3c86 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
    3c14:	4b49      	ldr	r3, [pc, #292]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3c1a:	697a      	ldr	r2, [r7, #20]
    3c1c:	4613      	mov	r3, r2
    3c1e:	005b      	lsls	r3, r3, #1
    3c20:	4413      	add	r3, r2
    3c22:	009b      	lsls	r3, r3, #2
    3c24:	440b      	add	r3, r1
    3c26:	2200      	movs	r2, #0
    3c28:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
    3c2a:	4b44      	ldr	r3, [pc, #272]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3c30:	697a      	ldr	r2, [r7, #20]
    3c32:	4613      	mov	r3, r2
    3c34:	005b      	lsls	r3, r3, #1
    3c36:	4413      	add	r3, r2
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	440b      	add	r3, r1
    3c3c:	2200      	movs	r2, #0
    3c3e:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
    3c40:	4b3e      	ldr	r3, [pc, #248]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3c46:	697a      	ldr	r2, [r7, #20]
    3c48:	4613      	mov	r3, r2
    3c4a:	005b      	lsls	r3, r3, #1
    3c4c:	4413      	add	r3, r2
    3c4e:	009b      	lsls	r3, r3, #2
    3c50:	440b      	add	r3, r1
    3c52:	2200      	movs	r2, #0
    3c54:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
    3c56:	697b      	ldr	r3, [r7, #20]
    3c58:	3301      	adds	r3, #1
    3c5a:	617b      	str	r3, [r7, #20]
    3c5c:	e7d6      	b.n	3c0c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
    3c5e:	4b37      	ldr	r3, [pc, #220]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	2200      	movs	r2, #0
    3c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
    3c68:	4b34      	ldr	r3, [pc, #208]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3c6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3c70:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
    3c72:	4b32      	ldr	r3, [pc, #200]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
    3c7a:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
    3c7c:	4b2f      	ldr	r3, [pc, #188]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c7e:	681b      	ldr	r3, [r3, #0]
    3c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
    3c84:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
    3c86:	4b2d      	ldr	r3, [pc, #180]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    3c8e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
    3c92:	4b2a      	ldr	r3, [pc, #168]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	2200      	movs	r2, #0
    3c98:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    3c9c:	4b27      	ldr	r3, [pc, #156]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	2200      	movs	r2, #0
    3ca2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
    3ca6:	4b25      	ldr	r3, [pc, #148]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	2200      	movs	r2, #0
    3cac:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
    3cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cb0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    3cb4:	d10f      	bne.n	3cd6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
    3cb6:	4b22      	ldr	r3, [pc, #136]	; (3d40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	1d18      	adds	r0, r3, #4
    3cbc:	4b1f      	ldr	r3, [pc, #124]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	f103 0268 	add.w	r2, r3, #104	; 0x68
    3cc4:	2300      	movs	r3, #0
    3cc6:	9301      	str	r3, [sp, #4]
    3cc8:	2300      	movs	r3, #0
    3cca:	9300      	str	r3, [sp, #0]
    3ccc:	4613      	mov	r3, r2
    3cce:	4a1d      	ldr	r2, [pc, #116]	; (3d44 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
    3cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3cd2:	4c1d      	ldr	r4, [pc, #116]	; (3d48 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
    3cd4:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	2b00      	cmp	r3, #0
    3cda:	db02      	blt.n	3ce2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	da03      	bge.n	3cea <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
    3ce2:	2300      	movs	r3, #0
    3ce4:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
    3ce6:	2300      	movs	r3, #0
    3ce8:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
    3cea:	4b15      	ldr	r3, [pc, #84]	; (3d40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3cec:	6818      	ldr	r0, [r3, #0]
    3cee:	4b13      	ldr	r3, [pc, #76]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3cf0:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
    3cf2:	4a16      	ldr	r2, [pc, #88]	; (3d4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
    3cf4:	9202      	str	r2, [sp, #8]
    3cf6:	9301      	str	r3, [sp, #4]
    3cf8:	2300      	movs	r3, #0
    3cfa:	9300      	str	r3, [sp, #0]
    3cfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3d00:	687a      	ldr	r2, [r7, #4]
    3d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
    3d04:	4c12      	ldr	r4, [pc, #72]	; (3d50 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
    3d06:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
    3d08:	4b0c      	ldr	r3, [pc, #48]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    3d12:	4b0a      	ldr	r3, [pc, #40]	; (3d3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d14:	681c      	ldr	r4, [r3, #0]
    3d16:	4b0a      	ldr	r3, [pc, #40]	; (3d40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3d18:	6818      	ldr	r0, [r3, #0]
    3d1a:	2300      	movs	r3, #0
    3d1c:	9301      	str	r3, [sp, #4]
    3d1e:	2308      	movs	r3, #8
    3d20:	9300      	str	r3, [sp, #0]
    3d22:	2300      	movs	r3, #0
    3d24:	683a      	ldr	r2, [r7, #0]
    3d26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3d28:	4d0a      	ldr	r5, [pc, #40]	; (3d54 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
    3d2a:	47a8      	blx	r5
    3d2c:	4603      	mov	r3, r0
    3d2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
    3d32:	2300      	movs	r3, #0
}
    3d34:	4618      	mov	r0, r3
    3d36:	3718      	adds	r7, #24
    3d38:	46bd      	mov	sp, r7
    3d3a:	bdb0      	pop	{r4, r5, r7, pc}
    3d3c:	20001a24 	.word	0x20001a24
    3d40:	200019e4 	.word	0x200019e4
    3d44:	00003b4d 	.word	0x00003b4d
    3d48:	00003d59 	.word	0x00003d59
    3d4c:	000039e5 	.word	0x000039e5
    3d50:	00001d79 	.word	0x00001d79
    3d54:	00001e79 	.word	0x00001e79

00003d58 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b088      	sub	sp, #32
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	60f8      	str	r0, [r7, #12]
    3d60:	60b9      	str	r1, [r7, #8]
    3d62:	607a      	str	r2, [r7, #4]
    3d64:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
    3d66:	4b28      	ldr	r3, [pc, #160]	; (3e08 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
    3d68:	681b      	ldr	r3, [r3, #0]
    3d6a:	3304      	adds	r3, #4
    3d6c:	68b9      	ldr	r1, [r7, #8]
    3d6e:	4618      	mov	r0, r3
    3d70:	4b26      	ldr	r3, [pc, #152]	; (3e0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
    3d72:	4798      	blx	r3
    3d74:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
    3d76:	69bb      	ldr	r3, [r7, #24]
    3d78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    3d7c:	4293      	cmp	r3, r2
    3d7e:	d83e      	bhi.n	3dfe <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
    3d80:	4b23      	ldr	r3, [pc, #140]	; (3e10 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    3d82:	681b      	ldr	r3, [r3, #0]
    3d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3d86:	69ba      	ldr	r2, [r7, #24]
    3d88:	4613      	mov	r3, r2
    3d8a:	005b      	lsls	r3, r3, #1
    3d8c:	4413      	add	r3, r2
    3d8e:	009b      	lsls	r3, r3, #2
    3d90:	440b      	add	r3, r1
    3d92:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
    3d94:	4b1e      	ldr	r3, [pc, #120]	; (3e10 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    3d96:	681b      	ldr	r3, [r3, #0]
    3d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3d9a:	69ba      	ldr	r2, [r7, #24]
    3d9c:	4613      	mov	r3, r2
    3d9e:	009b      	lsls	r3, r3, #2
    3da0:	4413      	add	r3, r2
    3da2:	009b      	lsls	r3, r3, #2
    3da4:	440b      	add	r3, r1
    3da6:	791b      	ldrb	r3, [r3, #4]
    3da8:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
    3daa:	697b      	ldr	r3, [r7, #20]
    3dac:	687a      	ldr	r2, [r7, #4]
    3dae:	601a      	str	r2, [r3, #0]
        ext->object = object;
    3db0:	697b      	ldr	r3, [r7, #20]
    3db2:	683a      	ldr	r2, [r7, #0]
    3db4:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
    3db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3db8:	2b00      	cmp	r3, #0
    3dba:	d01b      	beq.n	3df4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    3dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d017      	beq.n	3df4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    3dc4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    3dc8:	7cfb      	ldrb	r3, [r7, #19]
    3dca:	429a      	cmp	r2, r3
    3dcc:	d112      	bne.n	3df4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
    3dce:	697b      	ldr	r3, [r7, #20]
    3dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dd2:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
    3dd4:	2300      	movs	r3, #0
    3dd6:	61fb      	str	r3, [r7, #28]
    3dd8:	7cfa      	ldrb	r2, [r7, #19]
    3dda:	69fb      	ldr	r3, [r7, #28]
    3ddc:	429a      	cmp	r2, r3
    3dde:	d30d      	bcc.n	3dfc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
    3de0:	697b      	ldr	r3, [r7, #20]
    3de2:	689a      	ldr	r2, [r3, #8]
    3de4:	69fb      	ldr	r3, [r7, #28]
    3de6:	4413      	add	r3, r2
    3de8:	2200      	movs	r2, #0
    3dea:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
    3dec:	69fb      	ldr	r3, [r7, #28]
    3dee:	3301      	adds	r3, #1
    3df0:	61fb      	str	r3, [r7, #28]
    3df2:	e7f1      	b.n	3dd8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
    3df4:	697b      	ldr	r3, [r7, #20]
    3df6:	2200      	movs	r2, #0
    3df8:	609a      	str	r2, [r3, #8]
        }
    }
}
    3dfa:	e000      	b.n	3dfe <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
    3dfc:	bf00      	nop
}
    3dfe:	bf00      	nop
    3e00:	3720      	adds	r7, #32
    3e02:	46bd      	mov	sp, r7
    3e04:	bd80      	pop	{r7, pc}
    3e06:	bf00      	nop
    3e08:	200019e4 	.word	0x200019e4
    3e0c:	00003e15 	.word	0x00003e15
    3e10:	20001a24 	.word	0x20001a24

00003e14 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
    3e14:	b480      	push	{r7}
    3e16:	b087      	sub	sp, #28
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    3e1c:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
    3e1e:	2300      	movs	r3, #0
    3e20:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
    3e22:	4b26      	ldr	r3, [pc, #152]	; (3ebc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e28:	3b01      	subs	r3, #1
    3e2a:	613b      	str	r3, [r7, #16]
    while(min < max){
    3e2c:	697a      	ldr	r2, [r7, #20]
    3e2e:	693b      	ldr	r3, [r7, #16]
    3e30:	429a      	cmp	r2, r3
    3e32:	d227      	bcs.n	3e84 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
    3e34:	697a      	ldr	r2, [r7, #20]
    3e36:	693b      	ldr	r3, [r7, #16]
    3e38:	4413      	add	r3, r2
    3e3a:	085b      	lsrs	r3, r3, #1
    3e3c:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
    3e3e:	4b1f      	ldr	r3, [pc, #124]	; (3ebc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3e40:	681b      	ldr	r3, [r3, #0]
    3e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3e44:	68fa      	ldr	r2, [r7, #12]
    3e46:	4613      	mov	r3, r2
    3e48:	009b      	lsls	r3, r3, #2
    3e4a:	4413      	add	r3, r2
    3e4c:	009b      	lsls	r3, r3, #2
    3e4e:	440b      	add	r3, r1
    3e50:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    3e52:	68bb      	ldr	r3, [r7, #8]
    3e54:	681a      	ldr	r2, [r3, #0]
    3e56:	683b      	ldr	r3, [r7, #0]
    3e58:	429a      	cmp	r2, r3
    3e5a:	d101      	bne.n	3e60 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
    3e5c:	68fb      	ldr	r3, [r7, #12]
    3e5e:	e028      	b.n	3eb2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
    3e60:	68bb      	ldr	r3, [r7, #8]
    3e62:	681a      	ldr	r2, [r3, #0]
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	429a      	cmp	r2, r3
    3e68:	d908      	bls.n	3e7c <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	613b      	str	r3, [r7, #16]
            if(max) max--;
    3e6e:	693b      	ldr	r3, [r7, #16]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d0db      	beq.n	3e2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    3e74:	693b      	ldr	r3, [r7, #16]
    3e76:	3b01      	subs	r3, #1
    3e78:	613b      	str	r3, [r7, #16]
    3e7a:	e7d7      	b.n	3e2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	3301      	adds	r3, #1
    3e80:	617b      	str	r3, [r7, #20]
    while(min < max){
    3e82:	e7d3      	b.n	3e2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
    3e84:	697a      	ldr	r2, [r7, #20]
    3e86:	693b      	ldr	r3, [r7, #16]
    3e88:	429a      	cmp	r2, r3
    3e8a:	d110      	bne.n	3eae <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
    3e8c:	4b0b      	ldr	r3, [pc, #44]	; (3ebc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3e92:	697a      	ldr	r2, [r7, #20]
    3e94:	4613      	mov	r3, r2
    3e96:	009b      	lsls	r3, r3, #2
    3e98:	4413      	add	r3, r2
    3e9a:	009b      	lsls	r3, r3, #2
    3e9c:	440b      	add	r3, r1
    3e9e:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    3ea0:	68bb      	ldr	r3, [r7, #8]
    3ea2:	681a      	ldr	r2, [r3, #0]
    3ea4:	683b      	ldr	r3, [r7, #0]
    3ea6:	429a      	cmp	r2, r3
    3ea8:	d101      	bne.n	3eae <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
    3eaa:	697b      	ldr	r3, [r7, #20]
    3eac:	e001      	b.n	3eb2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
    3eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    3eb2:	4618      	mov	r0, r3
    3eb4:	371c      	adds	r7, #28
    3eb6:	46bd      	mov	sp, r7
    3eb8:	bc80      	pop	{r7}
    3eba:	4770      	bx	lr
    3ebc:	20001a24 	.word	0x20001a24

00003ec0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
    3ec0:	b480      	push	{r7}
    3ec2:	b087      	sub	sp, #28
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	60f8      	str	r0, [r7, #12]
    3ec8:	60b9      	str	r1, [r7, #8]
    3eca:	4613      	mov	r3, r2
    3ecc:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    3ece:	4b25      	ldr	r3, [pc, #148]	; (3f64 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
    3ed0:	681b      	ldr	r3, [r3, #0]
    3ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3ed4:	68ba      	ldr	r2, [r7, #8]
    3ed6:	4613      	mov	r3, r2
    3ed8:	009b      	lsls	r3, r3, #2
    3eda:	4413      	add	r3, r2
    3edc:	009b      	lsls	r3, r3, #2
    3ede:	440b      	add	r3, r1
    3ee0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    3ee2:	68bb      	ldr	r3, [r7, #8]
    3ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ee8:	4293      	cmp	r3, r2
    3eea:	d101      	bne.n	3ef0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
    3eec:	2300      	movs	r3, #0
    3eee:	e034      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
    3ef0:	697b      	ldr	r3, [r7, #20]
    3ef2:	791b      	ldrb	r3, [r3, #4]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d108      	bne.n	3f0a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
    3ef8:	697b      	ldr	r3, [r7, #20]
    3efa:	691b      	ldr	r3, [r3, #16]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d101      	bne.n	3f04 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
    3f00:	2320      	movs	r3, #32
    3f02:	e02a      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    3f04:	697b      	ldr	r3, [r7, #20]
    3f06:	68db      	ldr	r3, [r3, #12]
    3f08:	e027      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
    3f0a:	697b      	ldr	r3, [r7, #20]
    3f0c:	689b      	ldr	r3, [r3, #8]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d00d      	beq.n	3f2e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
    3f12:	79fb      	ldrb	r3, [r7, #7]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d101      	bne.n	3f1c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
    3f18:	2301      	movs	r3, #1
    3f1a:	e01e      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
    3f1c:	697b      	ldr	r3, [r7, #20]
    3f1e:	691b      	ldr	r3, [r3, #16]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d101      	bne.n	3f28 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    3f24:	2320      	movs	r3, #32
    3f26:	e018      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    3f28:	697b      	ldr	r3, [r7, #20]
    3f2a:	68db      	ldr	r3, [r3, #12]
    3f2c:	e015      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
    3f2e:	697b      	ldr	r3, [r7, #20]
    3f30:	6919      	ldr	r1, [r3, #16]
    3f32:	79fa      	ldrb	r2, [r7, #7]
    3f34:	4613      	mov	r3, r2
    3f36:	005b      	lsls	r3, r3, #1
    3f38:	4413      	add	r3, r2
    3f3a:	009b      	lsls	r3, r3, #2
    3f3c:	440b      	add	r3, r1
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d101      	bne.n	3f48 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    3f44:	2320      	movs	r3, #32
    3f46:	e008      	b.n	3f5a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
    3f48:	697b      	ldr	r3, [r7, #20]
    3f4a:	6919      	ldr	r1, [r3, #16]
    3f4c:	79fa      	ldrb	r2, [r7, #7]
    3f4e:	4613      	mov	r3, r2
    3f50:	005b      	lsls	r3, r3, #1
    3f52:	4413      	add	r3, r2
    3f54:	009b      	lsls	r3, r3, #2
    3f56:	440b      	add	r3, r1
    3f58:	689b      	ldr	r3, [r3, #8]
        }
    }
}
    3f5a:	4618      	mov	r0, r3
    3f5c:	371c      	adds	r7, #28
    3f5e:	46bd      	mov	sp, r7
    3f60:	bc80      	pop	{r7}
    3f62:	4770      	bx	lr
    3f64:	20001a24 	.word	0x20001a24

00003f68 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
    3f68:	b480      	push	{r7}
    3f6a:	b089      	sub	sp, #36	; 0x24
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	60f8      	str	r0, [r7, #12]
    3f70:	60b9      	str	r1, [r7, #8]
    3f72:	4613      	mov	r3, r2
    3f74:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    3f76:	4b27      	ldr	r3, [pc, #156]	; (4014 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3f7c:	68ba      	ldr	r2, [r7, #8]
    3f7e:	4613      	mov	r3, r2
    3f80:	009b      	lsls	r3, r3, #2
    3f82:	4413      	add	r3, r2
    3f84:	009b      	lsls	r3, r3, #2
    3f86:	440b      	add	r3, r1
    3f88:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    3f8a:	68bb      	ldr	r3, [r7, #8]
    3f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f90:	4293      	cmp	r3, r2
    3f92:	d101      	bne.n	3f98 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
    3f94:	2300      	movs	r3, #0
    3f96:	e037      	b.n	4008 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    3f98:	697b      	ldr	r3, [r7, #20]
    3f9a:	791b      	ldrb	r3, [r3, #4]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d102      	bne.n	3fa6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
    3fa0:	697b      	ldr	r3, [r7, #20]
    3fa2:	689b      	ldr	r3, [r3, #8]
    3fa4:	e030      	b.n	4008 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    3fa6:	697b      	ldr	r3, [r7, #20]
    3fa8:	689b      	ldr	r3, [r3, #8]
    3faa:	2b00      	cmp	r3, #0
    3fac:	d023      	beq.n	3ff6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
    3fae:	2300      	movs	r3, #0
    3fb0:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
    3fb2:	697b      	ldr	r3, [r7, #20]
    3fb4:	689b      	ldr	r3, [r3, #8]
    3fb6:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
    3fb8:	697b      	ldr	r3, [r7, #20]
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	f241 0203 	movw	r2, #4099	; 0x1003
    3fc0:	4293      	cmp	r3, r2
    3fc2:	d108      	bne.n	3fd6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
    3fc4:	79fb      	ldrb	r3, [r7, #7]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d105      	bne.n	3fd6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
    3fca:	2301      	movs	r3, #1
    3fcc:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
    3fce:	69bb      	ldr	r3, [r7, #24]
    3fd0:	f043 0308 	orr.w	r3, r3, #8
    3fd4:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
    3fd6:	79fb      	ldrb	r3, [r7, #7]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d10a      	bne.n	3ff2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
    3fdc:	7ffb      	ldrb	r3, [r7, #31]
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d107      	bne.n	3ff2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
    3fe2:	69bb      	ldr	r3, [r7, #24]
    3fe4:	f023 0318 	bic.w	r3, r3, #24
    3fe8:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
    3fea:	69bb      	ldr	r3, [r7, #24]
    3fec:	f043 0304 	orr.w	r3, r3, #4
    3ff0:	61bb      	str	r3, [r7, #24]
        }
        return attr;
    3ff2:	69bb      	ldr	r3, [r7, #24]
    3ff4:	e008      	b.n	4008 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
    3ff6:	697b      	ldr	r3, [r7, #20]
    3ff8:	6919      	ldr	r1, [r3, #16]
    3ffa:	79fa      	ldrb	r2, [r7, #7]
    3ffc:	4613      	mov	r3, r2
    3ffe:	005b      	lsls	r3, r3, #1
    4000:	4413      	add	r3, r2
    4002:	009b      	lsls	r3, r3, #2
    4004:	440b      	add	r3, r1
    4006:	685b      	ldr	r3, [r3, #4]
    }
}
    4008:	4618      	mov	r0, r3
    400a:	3724      	adds	r7, #36	; 0x24
    400c:	46bd      	mov	sp, r7
    400e:	bc80      	pop	{r7}
    4010:	4770      	bx	lr
    4012:	bf00      	nop
    4014:	20001a24 	.word	0x20001a24

00004018 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
    4018:	b480      	push	{r7}
    401a:	b087      	sub	sp, #28
    401c:	af00      	add	r7, sp, #0
    401e:	60f8      	str	r0, [r7, #12]
    4020:	60b9      	str	r1, [r7, #8]
    4022:	4613      	mov	r3, r2
    4024:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4026:	4b20      	ldr	r3, [pc, #128]	; (40a8 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    402c:	68ba      	ldr	r2, [r7, #8]
    402e:	4613      	mov	r3, r2
    4030:	009b      	lsls	r3, r3, #2
    4032:	4413      	add	r3, r2
    4034:	009b      	lsls	r3, r3, #2
    4036:	440b      	add	r3, r1
    4038:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    403a:	68bb      	ldr	r3, [r7, #8]
    403c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4040:	4293      	cmp	r3, r2
    4042:	d101      	bne.n	4048 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
    4044:	2300      	movs	r3, #0
    4046:	e02a      	b.n	409e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    4048:	697b      	ldr	r3, [r7, #20]
    404a:	791b      	ldrb	r3, [r3, #4]
    404c:	2b00      	cmp	r3, #0
    404e:	d102      	bne.n	4056 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
    4050:	697b      	ldr	r3, [r7, #20]
    4052:	691b      	ldr	r3, [r3, #16]
    4054:	e023      	b.n	409e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    4056:	697b      	ldr	r3, [r7, #20]
    4058:	689b      	ldr	r3, [r3, #8]
    405a:	2b00      	cmp	r3, #0
    405c:	d016      	beq.n	408c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
    405e:	79fb      	ldrb	r3, [r7, #7]
    4060:	2b00      	cmp	r3, #0
    4062:	d102      	bne.n	406a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
    4064:	697b      	ldr	r3, [r7, #20]
    4066:	3304      	adds	r3, #4
    4068:	e019      	b.n	409e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
    406a:	697b      	ldr	r3, [r7, #20]
    406c:	691b      	ldr	r3, [r3, #16]
    406e:	2b00      	cmp	r3, #0
    4070:	d101      	bne.n	4076 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
    4072:	2300      	movs	r3, #0
    4074:	e013      	b.n	409e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
    4076:	697b      	ldr	r3, [r7, #20]
    4078:	691a      	ldr	r2, [r3, #16]
    407a:	79fb      	ldrb	r3, [r7, #7]
    407c:	3b01      	subs	r3, #1
    407e:	4619      	mov	r1, r3
    4080:	697b      	ldr	r3, [r7, #20]
    4082:	68db      	ldr	r3, [r3, #12]
    4084:	fb03 f301 	mul.w	r3, r3, r1
    4088:	4413      	add	r3, r2
    408a:	e008      	b.n	409e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
    408c:	697b      	ldr	r3, [r7, #20]
    408e:	6919      	ldr	r1, [r3, #16]
    4090:	79fa      	ldrb	r2, [r7, #7]
    4092:	4613      	mov	r3, r2
    4094:	005b      	lsls	r3, r3, #1
    4096:	4413      	add	r3, r2
    4098:	009b      	lsls	r3, r3, #2
    409a:	440b      	add	r3, r1
    409c:	681b      	ldr	r3, [r3, #0]
    }
}
    409e:	4618      	mov	r0, r3
    40a0:	371c      	adds	r7, #28
    40a2:	46bd      	mov	sp, r7
    40a4:	bc80      	pop	{r7}
    40a6:	4770      	bx	lr
    40a8:	20001a24 	.word	0x20001a24

000040ac <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	4618      	mov	r0, r3
    40b8:	370c      	adds	r7, #12
    40ba:	46bd      	mov	sp, r7
    40bc:	bc80      	pop	{r7}
    40be:	4770      	bx	lr

000040c0 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	4618      	mov	r0, r3
    40cc:	370c      	adds	r7, #12
    40ce:	46bd      	mov	sp, r7
    40d0:	bc80      	pop	{r7}
    40d2:	4770      	bx	lr

000040d4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
    40d4:	b480      	push	{r7}
    40d6:	b085      	sub	sp, #20
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]
    40dc:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	685b      	ldr	r3, [r3, #4]
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
    40ea:	7afb      	ldrb	r3, [r7, #11]
    40ec:	2b05      	cmp	r3, #5
    40ee:	d002      	beq.n	40f6 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
    40f0:	7afb      	ldrb	r3, [r7, #11]
    40f2:	2b7f      	cmp	r3, #127	; 0x7f
    40f4:	d132      	bne.n	415c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
    40f6:	68fb      	ldr	r3, [r7, #12]
    40f8:	7e1b      	ldrb	r3, [r3, #24]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d10e      	bne.n	411c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
    40fe:	683b      	ldr	r3, [r7, #0]
    4100:	7d1b      	ldrb	r3, [r3, #20]
    4102:	2b00      	cmp	r3, #0
    4104:	d103      	bne.n	410e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
    4106:	68fb      	ldr	r3, [r7, #12]
    4108:	2201      	movs	r2, #1
    410a:	769a      	strb	r2, [r3, #26]
    410c:	e018      	b.n	4140 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
    410e:	683b      	ldr	r3, [r7, #0]
    4110:	7d1b      	ldrb	r3, [r3, #20]
    4112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4116:	68fb      	ldr	r3, [r7, #12]
    4118:	625a      	str	r2, [r3, #36]	; 0x24
    411a:	e011      	b.n	4140 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
    411c:	683b      	ldr	r3, [r7, #0]
    411e:	7d1b      	ldrb	r3, [r3, #20]
    4120:	2b01      	cmp	r3, #1
    4122:	d107      	bne.n	4134 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	7d5a      	ldrb	r2, [r3, #21]
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
    412c:	68fb      	ldr	r3, [r7, #12]
    412e:	2201      	movs	r2, #1
    4130:	769a      	strb	r2, [r3, #26]
    4132:	e005      	b.n	4140 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
    4134:	683b      	ldr	r3, [r7, #0]
    4136:	7d1b      	ldrb	r3, [r3, #20]
    4138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    413c:	68fb      	ldr	r3, [r7, #12]
    413e:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	7e9b      	ldrb	r3, [r3, #26]
    4144:	2b00      	cmp	r3, #0
    4146:	d009      	beq.n	415c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    4148:	68fb      	ldr	r3, [r7, #12]
    414a:	7edb      	ldrb	r3, [r3, #27]
    414c:	2b00      	cmp	r3, #0
    414e:	bf0c      	ite	eq
    4150:	2301      	moveq	r3, #1
    4152:	2300      	movne	r3, #0
    4154:	b2db      	uxtb	r3, r3
    4156:	461a      	mov	r2, r3
    4158:	68fb      	ldr	r3, [r7, #12]
    415a:	76da      	strb	r2, [r3, #27]
        }
    }
}
    415c:	bf00      	nop
    415e:	3714      	adds	r7, #20
    4160:	46bd      	mov	sp, r7
    4162:	bc80      	pop	{r7}
    4164:	4770      	bx	lr
	...

00004168 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
    4168:	b590      	push	{r4, r7, lr}
    416a:	b08b      	sub	sp, #44	; 0x2c
    416c:	af04      	add	r7, sp, #16
    416e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    4170:	2300      	movs	r3, #0
    4172:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	681b      	ldr	r3, [r3, #0]
    4178:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
    417a:	4b35      	ldr	r3, [pc, #212]	; (4250 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	1d1a      	adds	r2, r3, #4
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	685b      	ldr	r3, [r3, #4]
    4184:	4619      	mov	r1, r3
    4186:	4610      	mov	r0, r2
    4188:	4b32      	ldr	r3, [pc, #200]	; (4254 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
    418a:	4798      	blx	r3
    418c:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	7f5b      	ldrb	r3, [r3, #29]
    4192:	2b00      	cmp	r3, #0
    4194:	d157      	bne.n	4246 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
    4196:	2300      	movs	r3, #0
    4198:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
    419a:	68bb      	ldr	r3, [r7, #8]
    419c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    41a0:	2b00      	cmp	r3, #0
    41a2:	d002      	beq.n	41aa <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
    41a4:	4b2c      	ldr	r3, [pc, #176]	; (4258 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
    41a6:	617b      	str	r3, [r7, #20]
    41a8:	e00d      	b.n	41c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
    41aa:	68bb      	ldr	r3, [r7, #8]
    41ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    41b0:	2b00      	cmp	r3, #0
    41b2:	d008      	beq.n	41c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	7a1b      	ldrb	r3, [r3, #8]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d002      	beq.n	41c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
    41bc:	4b27      	ldr	r3, [pc, #156]	; (425c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
    41be:	617b      	str	r3, [r7, #20]
    41c0:	e001      	b.n	41c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
    41c2:	2301      	movs	r3, #1
    41c4:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
    41c6:	697b      	ldr	r3, [r7, #20]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d13c      	bne.n	4246 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
    41cc:	68bb      	ldr	r3, [r7, #8]
    41ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
    41d2:	68fb      	ldr	r3, [r7, #12]
    41d4:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
    41d6:	7cfb      	ldrb	r3, [r7, #19]
    41d8:	2b00      	cmp	r3, #0
    41da:	d021      	beq.n	4220 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
    41dc:	2300      	movs	r3, #0
    41de:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	7e1b      	ldrb	r3, [r3, #24]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d007      	beq.n	41f8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
    41e8:	2301      	movs	r3, #1
    41ea:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
    41ec:	68fb      	ldr	r3, [r7, #12]
    41ee:	2200      	movs	r2, #0
    41f0:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
    41f2:	68fb      	ldr	r3, [r7, #12]
    41f4:	2200      	movs	r2, #0
    41f6:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    41f8:	4b15      	ldr	r3, [pc, #84]	; (4250 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    41fa:	6818      	ldr	r0, [r3, #0]
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4200:	68fb      	ldr	r3, [r7, #12]
    4202:	68da      	ldr	r2, [r3, #12]
    4204:	2300      	movs	r3, #0
    4206:	9301      	str	r3, [sp, #4]
    4208:	7cbb      	ldrb	r3, [r7, #18]
    420a:	9300      	str	r3, [sp, #0]
    420c:	2300      	movs	r3, #0
    420e:	4c14      	ldr	r4, [pc, #80]	; (4260 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
    4210:	47a0      	blx	r4
    4212:	4602      	mov	r2, r0
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
    4218:	68fb      	ldr	r3, [r7, #12]
    421a:	2201      	movs	r2, #1
    421c:	721a      	strb	r2, [r3, #8]
    421e:	e002      	b.n	4226 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	2200      	movs	r2, #0
    4224:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
    4226:	4b0a      	ldr	r3, [pc, #40]	; (4250 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    4228:	6818      	ldr	r0, [r3, #0]
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
    4232:	4b0c      	ldr	r3, [pc, #48]	; (4264 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
    4234:	9302      	str	r3, [sp, #8]
    4236:	68fb      	ldr	r3, [r7, #12]
    4238:	9301      	str	r3, [sp, #4]
    423a:	2300      	movs	r3, #0
    423c:	9300      	str	r3, [sp, #0]
    423e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    4242:	4c09      	ldr	r4, [pc, #36]	; (4268 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
    4244:	47a0      	blx	r4
        }
    }

    return ret;
    4246:	697b      	ldr	r3, [r7, #20]
}
    4248:	4618      	mov	r0, r3
    424a:	371c      	adds	r7, #28
    424c:	46bd      	mov	sp, r7
    424e:	bd90      	pop	{r4, r7, pc}
    4250:	200019e4 	.word	0x200019e4
    4254:	00003905 	.word	0x00003905
    4258:	06090030 	.word	0x06090030
    425c:	08000022 	.word	0x08000022
    4260:	00001e79 	.word	0x00001e79
    4264:	000040d5 	.word	0x000040d5
    4268:	00001d79 	.word	0x00001d79

0000426c <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
    426c:	b580      	push	{r7, lr}
    426e:	b086      	sub	sp, #24
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    4274:	2300      	movs	r3, #0
    4276:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	681b      	ldr	r3, [r3, #0]
    427c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
    427e:	4b19      	ldr	r3, [pc, #100]	; (42e4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	1d1a      	adds	r2, r3, #4
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	685b      	ldr	r3, [r3, #4]
    4288:	4619      	mov	r1, r3
    428a:	4610      	mov	r0, r2
    428c:	4b16      	ldr	r3, [pc, #88]	; (42e8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
    428e:	4798      	blx	r3
    4290:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	7f5b      	ldrb	r3, [r3, #29]
    4296:	2b00      	cmp	r3, #0
    4298:	d11f      	bne.n	42da <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
    429a:	693b      	ldr	r3, [r7, #16]
    429c:	691b      	ldr	r3, [r3, #16]
    429e:	2b00      	cmp	r3, #0
    42a0:	d105      	bne.n	42ae <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d002      	beq.n	42ae <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
    42a8:	693b      	ldr	r3, [r7, #16]
    42aa:	2200      	movs	r2, #0
    42ac:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
    42ae:	693b      	ldr	r3, [r7, #16]
    42b0:	68fa      	ldr	r2, [r7, #12]
    42b2:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	085a      	lsrs	r2, r3, #1
    42b8:	4613      	mov	r3, r2
    42ba:	005b      	lsls	r3, r3, #1
    42bc:	441a      	add	r2, r3
    42be:	693b      	ldr	r3, [r7, #16]
    42c0:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
    42c2:	693b      	ldr	r3, [r7, #16]
    42c4:	695a      	ldr	r2, [r3, #20]
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	429a      	cmp	r2, r3
    42ca:	d203      	bcs.n	42d4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
    42cc:	693b      	ldr	r3, [r7, #16]
    42ce:	f04f 32ff 	mov.w	r2, #4294967295
    42d2:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
    42d4:	693b      	ldr	r3, [r7, #16]
    42d6:	2200      	movs	r2, #0
    42d8:	621a      	str	r2, [r3, #32]
    }

    return ret;
    42da:	697b      	ldr	r3, [r7, #20]
}
    42dc:	4618      	mov	r0, r3
    42de:	3718      	adds	r7, #24
    42e0:	46bd      	mov	sp, r7
    42e2:	bd80      	pop	{r7, pc}
    42e4:	200019e4 	.word	0x200019e4
    42e8:	00003905 	.word	0x00003905

000042ec <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
    42ec:	b590      	push	{r4, r7, lr}
    42ee:	b089      	sub	sp, #36	; 0x24
    42f0:	af02      	add	r7, sp, #8
    42f2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    42f4:	2300      	movs	r3, #0
    42f6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	685b      	ldr	r3, [r3, #4]
    4302:	781b      	ldrb	r3, [r3, #0]
    4304:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	7f5b      	ldrb	r3, [r3, #29]
    430a:	2b00      	cmp	r3, #0
    430c:	d12c      	bne.n	4368 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
    430e:	2300      	movs	r3, #0
    4310:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	691b      	ldr	r3, [r3, #16]
    4316:	2b00      	cmp	r3, #0
    4318:	d002      	beq.n	4320 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
    431a:	4b16      	ldr	r3, [pc, #88]	; (4374 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
    431c:	617b      	str	r3, [r7, #20]
    431e:	e023      	b.n	4368 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
    4320:	7afb      	ldrb	r3, [r7, #11]
    4322:	2b01      	cmp	r3, #1
    4324:	d005      	beq.n	4332 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
    4326:	7afb      	ldrb	r3, [r7, #11]
    4328:	2bf0      	cmp	r3, #240	; 0xf0
    432a:	dd05      	ble.n	4338 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
    432c:	7afb      	ldrb	r3, [r7, #11]
    432e:	2bff      	cmp	r3, #255	; 0xff
    4330:	dc02      	bgt.n	4338 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
    4332:	4b11      	ldr	r3, [pc, #68]	; (4378 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
    4334:	617b      	str	r3, [r7, #20]
    4336:	e017      	b.n	4368 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
    4338:	68fb      	ldr	r3, [r7, #12]
    433a:	7afa      	ldrb	r2, [r7, #11]
    433c:	761a      	strb	r2, [r3, #24]
            if(value != 0){
    433e:	7afb      	ldrb	r3, [r7, #11]
    4340:	2b00      	cmp	r3, #0
    4342:	d001      	beq.n	4348 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
    4344:	2301      	movs	r3, #1
    4346:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
    4348:	4b0c      	ldr	r3, [pc, #48]	; (437c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
    434a:	6818      	ldr	r0, [r3, #0]
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4350:	68fb      	ldr	r3, [r7, #12]
    4352:	68da      	ldr	r2, [r3, #12]
    4354:	2300      	movs	r3, #0
    4356:	9301      	str	r3, [sp, #4]
    4358:	7cfb      	ldrb	r3, [r7, #19]
    435a:	9300      	str	r3, [sp, #0]
    435c:	2300      	movs	r3, #0
    435e:	4c08      	ldr	r4, [pc, #32]	; (4380 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
    4360:	47a0      	blx	r4
    4362:	4602      	mov	r2, r0
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
    4368:	697b      	ldr	r3, [r7, #20]
}
    436a:	4618      	mov	r0, r3
    436c:	371c      	adds	r7, #28
    436e:	46bd      	mov	sp, r7
    4370:	bd90      	pop	{r4, r7, pc}
    4372:	bf00      	nop
    4374:	08000022 	.word	0x08000022
    4378:	06090030 	.word	0x06090030
    437c:	200019e4 	.word	0x200019e4
    4380:	00001e79 	.word	0x00001e79

00004384 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    4384:	b590      	push	{r4, r7, lr}
    4386:	b08b      	sub	sp, #44	; 0x2c
    4388:	af04      	add	r7, sp, #16
    438a:	60f8      	str	r0, [r7, #12]
    438c:	60b9      	str	r1, [r7, #8]
    438e:	607a      	str	r2, [r7, #4]
    4390:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
    4392:	2300      	movs	r3, #0
    4394:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    4396:	68bb      	ldr	r3, [r7, #8]
    4398:	2b00      	cmp	r3, #0
    439a:	d00e      	beq.n	43ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	2b00      	cmp	r3, #0
    43a0:	d00b      	beq.n	43ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    43a2:	683b      	ldr	r3, [r7, #0]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d008      	beq.n	43ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    43a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43aa:	2b00      	cmp	r3, #0
    43ac:	d005      	beq.n	43ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    43ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43b0:	2b00      	cmp	r3, #0
    43b2:	d002      	beq.n	43ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
    43b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43b6:	2b00      	cmp	r3, #0
    43b8:	d102      	bne.n	43c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    43ba:	f04f 33ff 	mov.w	r3, #4294967295
    43be:	e097      	b.n	44f0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
    43c0:	68bb      	ldr	r3, [r7, #8]
    43c2:	2200      	movs	r2, #0
    43c4:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
    43c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
    43cc:	68bb      	ldr	r3, [r7, #8]
    43ce:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
    43d0:	68bb      	ldr	r3, [r7, #8]
    43d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    43d4:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
    43d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    43d8:	4613      	mov	r3, r2
    43da:	005b      	lsls	r3, r3, #1
    43dc:	441a      	add	r2, r3
    43de:	68bb      	ldr	r3, [r7, #8]
    43e0:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
    43e2:	68bb      	ldr	r3, [r7, #8]
    43e4:	695a      	ldr	r2, [r3, #20]
    43e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    43e8:	429a      	cmp	r2, r3
    43ea:	d203      	bcs.n	43f4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
    43ec:	68bb      	ldr	r3, [r7, #8]
    43ee:	f04f 32ff 	mov.w	r2, #4294967295
    43f2:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
    43f4:	68bb      	ldr	r3, [r7, #8]
    43f6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    43fa:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
    43fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    4400:	2b00      	cmp	r3, #0
    4402:	d001      	beq.n	4408 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
    4404:	2301      	movs	r3, #1
    4406:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
    4408:	68bb      	ldr	r3, [r7, #8]
    440a:	2201      	movs	r2, #1
    440c:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
    440e:	68bb      	ldr	r3, [r7, #8]
    4410:	2200      	movs	r2, #0
    4412:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
    4414:	68bb      	ldr	r3, [r7, #8]
    4416:	2200      	movs	r2, #0
    4418:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
    441a:	68bb      	ldr	r3, [r7, #8]
    441c:	2200      	movs	r2, #0
    441e:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
    4420:	68bb      	ldr	r3, [r7, #8]
    4422:	2200      	movs	r2, #0
    4424:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
    4426:	68bb      	ldr	r3, [r7, #8]
    4428:	2200      	movs	r2, #0
    442a:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
    442c:	68bb      	ldr	r3, [r7, #8]
    442e:	687a      	ldr	r2, [r7, #4]
    4430:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
    4432:	68bb      	ldr	r3, [r7, #8]
    4434:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4436:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
    4438:	68bb      	ldr	r3, [r7, #8]
    443a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    443c:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
    443e:	68bb      	ldr	r3, [r7, #8]
    4440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4442:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
    4444:	4b2c      	ldr	r3, [pc, #176]	; (44f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4446:	681b      	ldr	r3, [r3, #0]
    4448:	1d18      	adds	r0, r3, #4
    444a:	2300      	movs	r3, #0
    444c:	9301      	str	r3, [sp, #4]
    444e:	2300      	movs	r3, #0
    4450:	9300      	str	r3, [sp, #0]
    4452:	68bb      	ldr	r3, [r7, #8]
    4454:	4a29      	ldr	r2, [pc, #164]	; (44fc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
    4456:	f241 0105 	movw	r1, #4101	; 0x1005
    445a:	4c29      	ldr	r4, [pc, #164]	; (4500 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    445c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
    445e:	4b26      	ldr	r3, [pc, #152]	; (44f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	1d18      	adds	r0, r3, #4
    4464:	2300      	movs	r3, #0
    4466:	9301      	str	r3, [sp, #4]
    4468:	2300      	movs	r3, #0
    446a:	9300      	str	r3, [sp, #0]
    446c:	68bb      	ldr	r3, [r7, #8]
    446e:	4a25      	ldr	r2, [pc, #148]	; (4504 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
    4470:	f241 0106 	movw	r1, #4102	; 0x1006
    4474:	4c22      	ldr	r4, [pc, #136]	; (4500 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    4476:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
    4478:	4b1f      	ldr	r3, [pc, #124]	; (44f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	1d18      	adds	r0, r3, #4
    447e:	2300      	movs	r3, #0
    4480:	9301      	str	r3, [sp, #4]
    4482:	2300      	movs	r3, #0
    4484:	9300      	str	r3, [sp, #0]
    4486:	68bb      	ldr	r3, [r7, #8]
    4488:	4a1f      	ldr	r2, [pc, #124]	; (4508 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
    448a:	f241 0119 	movw	r1, #4121	; 0x1019
    448e:	4c1c      	ldr	r4, [pc, #112]	; (4500 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    4490:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
    4492:	4b19      	ldr	r3, [pc, #100]	; (44f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4494:	6818      	ldr	r0, [r3, #0]
    4496:	68bb      	ldr	r3, [r7, #8]
    4498:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
    449a:	4b1c      	ldr	r3, [pc, #112]	; (450c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
    449c:	9302      	str	r3, [sp, #8]
    449e:	68bb      	ldr	r3, [r7, #8]
    44a0:	9301      	str	r3, [sp, #4]
    44a2:	2300      	movs	r3, #0
    44a4:	9300      	str	r3, [sp, #0]
    44a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
    44aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    44ac:	4c18      	ldr	r4, [pc, #96]	; (4510 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
    44ae:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
    44b0:	68bb      	ldr	r3, [r7, #8]
    44b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    44b4:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
    44b6:	68bb      	ldr	r3, [r7, #8]
    44b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44ba:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
    44bc:	4b0e      	ldr	r3, [pc, #56]	; (44f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    44be:	6818      	ldr	r0, [r3, #0]
    44c0:	68bb      	ldr	r3, [r7, #8]
    44c2:	68da      	ldr	r2, [r3, #12]
    44c4:	2300      	movs	r3, #0
    44c6:	9301      	str	r3, [sp, #4]
    44c8:	7dfb      	ldrb	r3, [r7, #23]
    44ca:	9300      	str	r3, [sp, #0]
    44cc:	2300      	movs	r3, #0
    44ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
    44d0:	4c10      	ldr	r4, [pc, #64]	; (4514 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
    44d2:	47a0      	blx	r4
    44d4:	4602      	mov	r2, r0
    44d6:	68bb      	ldr	r3, [r7, #8]
    44d8:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
    44da:	68bb      	ldr	r3, [r7, #8]
    44dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    44de:	2210      	movs	r2, #16
    44e0:	4619      	mov	r1, r3
    44e2:	480d      	ldr	r0, [pc, #52]	; (4518 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
    44e4:	4b0d      	ldr	r3, [pc, #52]	; (451c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
    44e6:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	4a0b      	ldr	r2, [pc, #44]	; (4518 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
    44ec:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
    44ee:	2300      	movs	r3, #0
}
    44f0:	4618      	mov	r0, r3
    44f2:	371c      	adds	r7, #28
    44f4:	46bd      	mov	sp, r7
    44f6:	bd90      	pop	{r4, r7, pc}
    44f8:	200019e4 	.word	0x200019e4
    44fc:	00004169 	.word	0x00004169
    4500:	00003d59 	.word	0x00003d59
    4504:	0000426d 	.word	0x0000426d
    4508:	000042ed 	.word	0x000042ed
    450c:	000040d5 	.word	0x000040d5
    4510:	00001d79 	.word	0x00001d79
    4514:	00001e79 	.word	0x00001e79
    4518:	20001a28 	.word	0x20001a28
    451c:	00011b19 	.word	0x00011b19

00004520 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
    4520:	b580      	push	{r7, lr}
    4522:	b082      	sub	sp, #8
    4524:	af00      	add	r7, sp, #0
    4526:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
    4528:	4b06      	ldr	r3, [pc, #24]	; (4544 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
    452a:	681a      	ldr	r2, [r3, #0]
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	4619      	mov	r1, r3
    4532:	4610      	mov	r0, r2
    4534:	4b04      	ldr	r3, [pc, #16]	; (4548 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
    4536:	4798      	blx	r3
    4538:	4603      	mov	r3, r0
    453a:	b2db      	uxtb	r3, r3
}
    453c:	4618      	mov	r0, r3
    453e:	3708      	adds	r7, #8
    4540:	46bd      	mov	sp, r7
    4542:	bd80      	pop	{r7, pc}
    4544:	200019e4 	.word	0x200019e4
    4548:	00001f25 	.word	0x00001f25

0000454c <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
    454c:	b480      	push	{r7}
    454e:	b083      	sub	sp, #12
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	4618      	mov	r0, r3
    4558:	370c      	adds	r7, #12
    455a:	46bd      	mov	sp, r7
    455c:	bc80      	pop	{r7}
    455e:	4770      	bx	lr

00004560 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
    4560:	b480      	push	{r7}
    4562:	b083      	sub	sp, #12
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	4618      	mov	r0, r3
    456c:	370c      	adds	r7, #12
    456e:	46bd      	mov	sp, r7
    4570:	bc80      	pop	{r7}
    4572:	4770      	bx	lr

00004574 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4574:	b580      	push	{r7, lr}
    4576:	af00      	add	r7, sp, #0
	system_init();
    4578:	4b03      	ldr	r3, [pc, #12]	; (4588 <atmel_start_init+0x14>)
    457a:	4798      	blx	r3
	usb_init();
    457c:	4b03      	ldr	r3, [pc, #12]	; (458c <atmel_start_init+0x18>)
    457e:	4798      	blx	r3
	spi_nor_flash_init();
    4580:	4b03      	ldr	r3, [pc, #12]	; (4590 <atmel_start_init+0x1c>)
    4582:	4798      	blx	r3
}
    4584:	bf00      	nop
    4586:	bd80      	pop	{r7, pc}
    4588:	00005975 	.word	0x00005975
    458c:	0000f2c1 	.word	0x0000f2c1
    4590:	0000f255 	.word	0x0000f255

00004594 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4594:	b480      	push	{r7}
    4596:	b085      	sub	sp, #20
    4598:	af00      	add	r7, sp, #0
    459a:	60f8      	str	r0, [r7, #12]
    459c:	460b      	mov	r3, r1
    459e:	607a      	str	r2, [r7, #4]
    45a0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    45a2:	7afa      	ldrb	r2, [r7, #11]
    45a4:	68fb      	ldr	r3, [r7, #12]
    45a6:	3220      	adds	r2, #32
    45a8:	6879      	ldr	r1, [r7, #4]
    45aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    45ae:	bf00      	nop
    45b0:	3714      	adds	r7, #20
    45b2:	46bd      	mov	sp, r7
    45b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b8:	4770      	bx	lr

000045ba <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    45ba:	b480      	push	{r7}
    45bc:	b083      	sub	sp, #12
    45be:	af00      	add	r7, sp, #0
    45c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	691b      	ldr	r3, [r3, #16]
    45c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45ce:	bf00      	nop
    45d0:	370c      	adds	r7, #12
    45d2:	46bd      	mov	sp, r7
    45d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d8:	4770      	bx	lr

000045da <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    45da:	b480      	push	{r7}
    45dc:	b083      	sub	sp, #12
    45de:	af00      	add	r7, sp, #0
    45e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	691b      	ldr	r3, [r3, #16]
    45e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45ee:	bf00      	nop
    45f0:	370c      	adds	r7, #12
    45f2:	46bd      	mov	sp, r7
    45f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f8:	4770      	bx	lr

000045fa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    45fa:	b480      	push	{r7}
    45fc:	b083      	sub	sp, #12
    45fe:	af00      	add	r7, sp, #0
    4600:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	691b      	ldr	r3, [r3, #16]
    4606:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    460e:	bf00      	nop
    4610:	370c      	adds	r7, #12
    4612:	46bd      	mov	sp, r7
    4614:	f85d 7b04 	ldr.w	r7, [sp], #4
    4618:	4770      	bx	lr

0000461a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    461a:	b480      	push	{r7}
    461c:	b083      	sub	sp, #12
    461e:	af00      	add	r7, sp, #0
    4620:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	691b      	ldr	r3, [r3, #16]
    4626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    462e:	bf00      	nop
    4630:	370c      	adds	r7, #12
    4632:	46bd      	mov	sp, r7
    4634:	f85d 7b04 	ldr.w	r7, [sp], #4
    4638:	4770      	bx	lr

0000463a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    463a:	b480      	push	{r7}
    463c:	b083      	sub	sp, #12
    463e:	af00      	add	r7, sp, #0
    4640:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	695b      	ldr	r3, [r3, #20]
    4646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    464e:	bf00      	nop
    4650:	370c      	adds	r7, #12
    4652:	46bd      	mov	sp, r7
    4654:	f85d 7b04 	ldr.w	r7, [sp], #4
    4658:	4770      	bx	lr

0000465a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    465a:	b480      	push	{r7}
    465c:	b083      	sub	sp, #12
    465e:	af00      	add	r7, sp, #0
    4660:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	695b      	ldr	r3, [r3, #20]
    4666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    466e:	bf00      	nop
    4670:	370c      	adds	r7, #12
    4672:	46bd      	mov	sp, r7
    4674:	f85d 7b04 	ldr.w	r7, [sp], #4
    4678:	4770      	bx	lr

0000467a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    467a:	b480      	push	{r7}
    467c:	b083      	sub	sp, #12
    467e:	af00      	add	r7, sp, #0
    4680:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	695b      	ldr	r3, [r3, #20]
    4686:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    468e:	bf00      	nop
    4690:	370c      	adds	r7, #12
    4692:	46bd      	mov	sp, r7
    4694:	f85d 7b04 	ldr.w	r7, [sp], #4
    4698:	4770      	bx	lr

0000469a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    469a:	b480      	push	{r7}
    469c:	b083      	sub	sp, #12
    469e:	af00      	add	r7, sp, #0
    46a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	695b      	ldr	r3, [r3, #20]
    46a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ae:	bf00      	nop
    46b0:	370c      	adds	r7, #12
    46b2:	46bd      	mov	sp, r7
    46b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b8:	4770      	bx	lr

000046ba <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    46ba:	b480      	push	{r7}
    46bc:	b083      	sub	sp, #12
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	695b      	ldr	r3, [r3, #20]
    46c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ce:	bf00      	nop
    46d0:	370c      	adds	r7, #12
    46d2:	46bd      	mov	sp, r7
    46d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d8:	4770      	bx	lr

000046da <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    46da:	b480      	push	{r7}
    46dc:	b083      	sub	sp, #12
    46de:	af00      	add	r7, sp, #0
    46e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	699b      	ldr	r3, [r3, #24]
    46e6:	f043 0201 	orr.w	r2, r3, #1
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ee:	bf00      	nop
    46f0:	370c      	adds	r7, #12
    46f2:	46bd      	mov	sp, r7
    46f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f8:	4770      	bx	lr

000046fa <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    46fa:	b480      	push	{r7}
    46fc:	b083      	sub	sp, #12
    46fe:	af00      	add	r7, sp, #0
    4700:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	699b      	ldr	r3, [r3, #24]
    4706:	f043 0202 	orr.w	r2, r3, #2
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    470e:	bf00      	nop
    4710:	370c      	adds	r7, #12
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    471a:	b480      	push	{r7}
    471c:	b083      	sub	sp, #12
    471e:	af00      	add	r7, sp, #0
    4720:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	699b      	ldr	r3, [r3, #24]
    4726:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    472e:	bf00      	nop
    4730:	370c      	adds	r7, #12
    4732:	46bd      	mov	sp, r7
    4734:	f85d 7b04 	ldr.w	r7, [sp], #4
    4738:	4770      	bx	lr

0000473a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    473a:	b480      	push	{r7}
    473c:	b083      	sub	sp, #12
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4742:	687b      	ldr	r3, [r7, #4]
    4744:	699b      	ldr	r3, [r3, #24]
    4746:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    474e:	bf00      	nop
    4750:	370c      	adds	r7, #12
    4752:	46bd      	mov	sp, r7
    4754:	f85d 7b04 	ldr.w	r7, [sp], #4
    4758:	4770      	bx	lr

0000475a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    475a:	b480      	push	{r7}
    475c:	b083      	sub	sp, #12
    475e:	af00      	add	r7, sp, #0
    4760:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	699b      	ldr	r3, [r3, #24]
    4766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    476e:	bf00      	nop
    4770:	370c      	adds	r7, #12
    4772:	46bd      	mov	sp, r7
    4774:	f85d 7b04 	ldr.w	r7, [sp], #4
    4778:	4770      	bx	lr

0000477a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    477a:	b480      	push	{r7}
    477c:	b083      	sub	sp, #12
    477e:	af00      	add	r7, sp, #0
    4780:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	699b      	ldr	r3, [r3, #24]
    4786:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    478e:	bf00      	nop
    4790:	370c      	adds	r7, #12
    4792:	46bd      	mov	sp, r7
    4794:	f85d 7b04 	ldr.w	r7, [sp], #4
    4798:	4770      	bx	lr

0000479a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    479a:	b480      	push	{r7}
    479c:	b083      	sub	sp, #12
    479e:	af00      	add	r7, sp, #0
    47a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	69db      	ldr	r3, [r3, #28]
    47a6:	f043 0208 	orr.w	r2, r3, #8
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	370c      	adds	r7, #12
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    47ba:	b480      	push	{r7}
    47bc:	b083      	sub	sp, #12
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	69db      	ldr	r3, [r3, #28]
    47c6:	f043 0220 	orr.w	r2, r3, #32
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ce:	bf00      	nop
    47d0:	370c      	adds	r7, #12
    47d2:	46bd      	mov	sp, r7
    47d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47d8:	4770      	bx	lr

000047da <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    47da:	b480      	push	{r7}
    47dc:	b083      	sub	sp, #12
    47de:	af00      	add	r7, sp, #0
    47e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	69db      	ldr	r3, [r3, #28]
    47e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr

000047fa <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    47fa:	b480      	push	{r7}
    47fc:	b083      	sub	sp, #12
    47fe:	af00      	add	r7, sp, #0
    4800:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	69db      	ldr	r3, [r3, #28]
    4806:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    480e:	bf00      	nop
    4810:	370c      	adds	r7, #12
    4812:	46bd      	mov	sp, r7
    4814:	f85d 7b04 	ldr.w	r7, [sp], #4
    4818:	4770      	bx	lr

0000481a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    481a:	b480      	push	{r7}
    481c:	b083      	sub	sp, #12
    481e:	af00      	add	r7, sp, #0
    4820:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	6a1b      	ldr	r3, [r3, #32]
    4826:	f043 0201 	orr.w	r2, r3, #1
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    482e:	bf00      	nop
    4830:	370c      	adds	r7, #12
    4832:	46bd      	mov	sp, r7
    4834:	f85d 7b04 	ldr.w	r7, [sp], #4
    4838:	4770      	bx	lr

0000483a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    483a:	b480      	push	{r7}
    483c:	b083      	sub	sp, #12
    483e:	af00      	add	r7, sp, #0
    4840:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	6a1b      	ldr	r3, [r3, #32]
    4846:	f043 0202 	orr.w	r2, r3, #2
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    484e:	bf00      	nop
    4850:	370c      	adds	r7, #12
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr

0000485a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    485a:	b480      	push	{r7}
    485c:	b083      	sub	sp, #12
    485e:	af00      	add	r7, sp, #0
    4860:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	6a1b      	ldr	r3, [r3, #32]
    4866:	f043 0204 	orr.w	r2, r3, #4
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    486e:	bf00      	nop
    4870:	370c      	adds	r7, #12
    4872:	46bd      	mov	sp, r7
    4874:	f85d 7b04 	ldr.w	r7, [sp], #4
    4878:	4770      	bx	lr

0000487a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    487a:	b480      	push	{r7}
    487c:	b083      	sub	sp, #12
    487e:	af00      	add	r7, sp, #0
    4880:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	6a1b      	ldr	r3, [r3, #32]
    4886:	f043 0208 	orr.w	r2, r3, #8
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    488e:	bf00      	nop
    4890:	370c      	adds	r7, #12
    4892:	46bd      	mov	sp, r7
    4894:	f85d 7b04 	ldr.w	r7, [sp], #4
    4898:	4770      	bx	lr

0000489a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    489a:	b480      	push	{r7}
    489c:	b083      	sub	sp, #12
    489e:	af00      	add	r7, sp, #0
    48a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	6a1b      	ldr	r3, [r3, #32]
    48a6:	f043 0220 	orr.w	r2, r3, #32
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48ae:	bf00      	nop
    48b0:	370c      	adds	r7, #12
    48b2:	46bd      	mov	sp, r7
    48b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b8:	4770      	bx	lr

000048ba <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    48ba:	b480      	push	{r7}
    48bc:	b083      	sub	sp, #12
    48be:	af00      	add	r7, sp, #0
    48c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	6a1b      	ldr	r3, [r3, #32]
    48c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48ce:	bf00      	nop
    48d0:	370c      	adds	r7, #12
    48d2:	46bd      	mov	sp, r7
    48d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d8:	4770      	bx	lr

000048da <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    48da:	b480      	push	{r7}
    48dc:	b085      	sub	sp, #20
    48de:	af00      	add	r7, sp, #0
    48e0:	60f8      	str	r0, [r7, #12]
    48e2:	460b      	mov	r3, r1
    48e4:	607a      	str	r2, [r7, #4]
    48e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    48e8:	7afb      	ldrb	r3, [r7, #11]
    48ea:	68fa      	ldr	r2, [r7, #12]
    48ec:	01db      	lsls	r3, r3, #7
    48ee:	4413      	add	r3, r2
    48f0:	3308      	adds	r3, #8
    48f2:	687a      	ldr	r2, [r7, #4]
    48f4:	601a      	str	r2, [r3, #0]
}
    48f6:	bf00      	nop
    48f8:	3714      	adds	r7, #20
    48fa:	46bd      	mov	sp, r7
    48fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4900:	4770      	bx	lr

00004902 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4902:	b480      	push	{r7}
    4904:	b085      	sub	sp, #20
    4906:	af00      	add	r7, sp, #0
    4908:	60f8      	str	r0, [r7, #12]
    490a:	460b      	mov	r3, r1
    490c:	607a      	str	r2, [r7, #4]
    490e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4910:	7afb      	ldrb	r3, [r7, #11]
    4912:	68fa      	ldr	r2, [r7, #12]
    4914:	01db      	lsls	r3, r3, #7
    4916:	4413      	add	r3, r2
    4918:	3304      	adds	r3, #4
    491a:	687a      	ldr	r2, [r7, #4]
    491c:	601a      	str	r2, [r3, #0]
}
    491e:	bf00      	nop
    4920:	3714      	adds	r7, #20
    4922:	46bd      	mov	sp, r7
    4924:	f85d 7b04 	ldr.w	r7, [sp], #4
    4928:	4770      	bx	lr

0000492a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    492a:	b480      	push	{r7}
    492c:	b085      	sub	sp, #20
    492e:	af00      	add	r7, sp, #0
    4930:	60f8      	str	r0, [r7, #12]
    4932:	460b      	mov	r3, r1
    4934:	607a      	str	r2, [r7, #4]
    4936:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4938:	7afb      	ldrb	r3, [r7, #11]
    493a:	68fa      	ldr	r2, [r7, #12]
    493c:	01db      	lsls	r3, r3, #7
    493e:	4413      	add	r3, r2
    4940:	3318      	adds	r3, #24
    4942:	687a      	ldr	r2, [r7, #4]
    4944:	601a      	str	r2, [r3, #0]
}
    4946:	bf00      	nop
    4948:	3714      	adds	r7, #20
    494a:	46bd      	mov	sp, r7
    494c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4950:	4770      	bx	lr

00004952 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4952:	b480      	push	{r7}
    4954:	b085      	sub	sp, #20
    4956:	af00      	add	r7, sp, #0
    4958:	60f8      	str	r0, [r7, #12]
    495a:	460b      	mov	r3, r1
    495c:	607a      	str	r2, [r7, #4]
    495e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4960:	7afb      	ldrb	r3, [r7, #11]
    4962:	68fa      	ldr	r2, [r7, #12]
    4964:	01db      	lsls	r3, r3, #7
    4966:	4413      	add	r3, r2
    4968:	3314      	adds	r3, #20
    496a:	687a      	ldr	r2, [r7, #4]
    496c:	601a      	str	r2, [r3, #0]
}
    496e:	bf00      	nop
    4970:	3714      	adds	r7, #20
    4972:	46bd      	mov	sp, r7
    4974:	f85d 7b04 	ldr.w	r7, [sp], #4
    4978:	4770      	bx	lr

0000497a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    497a:	b480      	push	{r7}
    497c:	b085      	sub	sp, #20
    497e:	af00      	add	r7, sp, #0
    4980:	6078      	str	r0, [r7, #4]
    4982:	4608      	mov	r0, r1
    4984:	4611      	mov	r1, r2
    4986:	461a      	mov	r2, r3
    4988:	4603      	mov	r3, r0
    498a:	70fb      	strb	r3, [r7, #3]
    498c:	460b      	mov	r3, r1
    498e:	70bb      	strb	r3, [r7, #2]
    4990:	4613      	mov	r3, r2
    4992:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4994:	78fa      	ldrb	r2, [r7, #3]
    4996:	78bb      	ldrb	r3, [r7, #2]
    4998:	6879      	ldr	r1, [r7, #4]
    499a:	01d2      	lsls	r2, r2, #7
    499c:	440a      	add	r2, r1
    499e:	4413      	add	r3, r2
    49a0:	3330      	adds	r3, #48	; 0x30
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    49a6:	7bfb      	ldrb	r3, [r7, #15]
    49a8:	f023 030f 	bic.w	r3, r3, #15
    49ac:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    49ae:	787b      	ldrb	r3, [r7, #1]
    49b0:	f003 030f 	and.w	r3, r3, #15
    49b4:	b2da      	uxtb	r2, r3
    49b6:	7bfb      	ldrb	r3, [r7, #15]
    49b8:	4313      	orrs	r3, r2
    49ba:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    49bc:	78fa      	ldrb	r2, [r7, #3]
    49be:	78bb      	ldrb	r3, [r7, #2]
    49c0:	6879      	ldr	r1, [r7, #4]
    49c2:	01d2      	lsls	r2, r2, #7
    49c4:	440a      	add	r2, r1
    49c6:	4413      	add	r3, r2
    49c8:	3330      	adds	r3, #48	; 0x30
    49ca:	7bfa      	ldrb	r2, [r7, #15]
    49cc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    49ce:	bf00      	nop
    49d0:	3714      	adds	r7, #20
    49d2:	46bd      	mov	sp, r7
    49d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d8:	4770      	bx	lr

000049da <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    49da:	b480      	push	{r7}
    49dc:	b085      	sub	sp, #20
    49de:	af00      	add	r7, sp, #0
    49e0:	6078      	str	r0, [r7, #4]
    49e2:	4608      	mov	r0, r1
    49e4:	4611      	mov	r1, r2
    49e6:	461a      	mov	r2, r3
    49e8:	4603      	mov	r3, r0
    49ea:	70fb      	strb	r3, [r7, #3]
    49ec:	460b      	mov	r3, r1
    49ee:	70bb      	strb	r3, [r7, #2]
    49f0:	4613      	mov	r3, r2
    49f2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    49f4:	78fa      	ldrb	r2, [r7, #3]
    49f6:	78bb      	ldrb	r3, [r7, #2]
    49f8:	6879      	ldr	r1, [r7, #4]
    49fa:	01d2      	lsls	r2, r2, #7
    49fc:	440a      	add	r2, r1
    49fe:	4413      	add	r3, r2
    4a00:	3330      	adds	r3, #48	; 0x30
    4a02:	781b      	ldrb	r3, [r3, #0]
    4a04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4a06:	7bfb      	ldrb	r3, [r7, #15]
    4a08:	f003 030f 	and.w	r3, r3, #15
    4a0c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4a0e:	787b      	ldrb	r3, [r7, #1]
    4a10:	011b      	lsls	r3, r3, #4
    4a12:	b2da      	uxtb	r2, r3
    4a14:	7bfb      	ldrb	r3, [r7, #15]
    4a16:	4313      	orrs	r3, r2
    4a18:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a1a:	78fa      	ldrb	r2, [r7, #3]
    4a1c:	78bb      	ldrb	r3, [r7, #2]
    4a1e:	6879      	ldr	r1, [r7, #4]
    4a20:	01d2      	lsls	r2, r2, #7
    4a22:	440a      	add	r2, r1
    4a24:	4413      	add	r3, r2
    4a26:	3330      	adds	r3, #48	; 0x30
    4a28:	7bfa      	ldrb	r2, [r7, #15]
    4a2a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4a2c:	bf00      	nop
    4a2e:	3714      	adds	r7, #20
    4a30:	46bd      	mov	sp, r7
    4a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a36:	4770      	bx	lr

00004a38 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4a38:	b480      	push	{r7}
    4a3a:	b085      	sub	sp, #20
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
    4a40:	4608      	mov	r0, r1
    4a42:	4611      	mov	r1, r2
    4a44:	461a      	mov	r2, r3
    4a46:	4603      	mov	r3, r0
    4a48:	70fb      	strb	r3, [r7, #3]
    4a4a:	460b      	mov	r3, r1
    4a4c:	70bb      	strb	r3, [r7, #2]
    4a4e:	4613      	mov	r3, r2
    4a50:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a52:	78fa      	ldrb	r2, [r7, #3]
    4a54:	78bb      	ldrb	r3, [r7, #2]
    4a56:	6879      	ldr	r1, [r7, #4]
    4a58:	01d2      	lsls	r2, r2, #7
    4a5a:	440a      	add	r2, r1
    4a5c:	4413      	add	r3, r2
    4a5e:	3340      	adds	r3, #64	; 0x40
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a64:	7bfb      	ldrb	r3, [r7, #15]
    4a66:	f023 0301 	bic.w	r3, r3, #1
    4a6a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a6c:	787a      	ldrb	r2, [r7, #1]
    4a6e:	7bfb      	ldrb	r3, [r7, #15]
    4a70:	4313      	orrs	r3, r2
    4a72:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a74:	78fa      	ldrb	r2, [r7, #3]
    4a76:	78bb      	ldrb	r3, [r7, #2]
    4a78:	6879      	ldr	r1, [r7, #4]
    4a7a:	01d2      	lsls	r2, r2, #7
    4a7c:	440a      	add	r2, r1
    4a7e:	4413      	add	r3, r2
    4a80:	3340      	adds	r3, #64	; 0x40
    4a82:	7bfa      	ldrb	r2, [r7, #15]
    4a84:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4a86:	bf00      	nop
    4a88:	3714      	adds	r7, #20
    4a8a:	46bd      	mov	sp, r7
    4a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a90:	4770      	bx	lr

00004a92 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4a92:	b490      	push	{r4, r7}
    4a94:	b082      	sub	sp, #8
    4a96:	af00      	add	r7, sp, #0
    4a98:	6078      	str	r0, [r7, #4]
    4a9a:	460b      	mov	r3, r1
    4a9c:	70fb      	strb	r3, [r7, #3]
    4a9e:	4613      	mov	r3, r2
    4aa0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4aa2:	78fa      	ldrb	r2, [r7, #3]
    4aa4:	78bb      	ldrb	r3, [r7, #2]
    4aa6:	78f8      	ldrb	r0, [r7, #3]
    4aa8:	78b9      	ldrb	r1, [r7, #2]
    4aaa:	687c      	ldr	r4, [r7, #4]
    4aac:	01c0      	lsls	r0, r0, #7
    4aae:	4420      	add	r0, r4
    4ab0:	4401      	add	r1, r0
    4ab2:	3140      	adds	r1, #64	; 0x40
    4ab4:	7809      	ldrb	r1, [r1, #0]
    4ab6:	b2c9      	uxtb	r1, r1
    4ab8:	f041 0104 	orr.w	r1, r1, #4
    4abc:	b2c8      	uxtb	r0, r1
    4abe:	6879      	ldr	r1, [r7, #4]
    4ac0:	01d2      	lsls	r2, r2, #7
    4ac2:	440a      	add	r2, r1
    4ac4:	4413      	add	r3, r2
    4ac6:	3340      	adds	r3, #64	; 0x40
    4ac8:	4602      	mov	r2, r0
    4aca:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4acc:	bf00      	nop
    4ace:	3708      	adds	r7, #8
    4ad0:	46bd      	mov	sp, r7
    4ad2:	bc90      	pop	{r4, r7}
    4ad4:	4770      	bx	lr

00004ad6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4ad6:	b490      	push	{r4, r7}
    4ad8:	b082      	sub	sp, #8
    4ada:	af00      	add	r7, sp, #0
    4adc:	6078      	str	r0, [r7, #4]
    4ade:	460b      	mov	r3, r1
    4ae0:	70fb      	strb	r3, [r7, #3]
    4ae2:	4613      	mov	r3, r2
    4ae4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ae6:	78fa      	ldrb	r2, [r7, #3]
    4ae8:	78bb      	ldrb	r3, [r7, #2]
    4aea:	78f8      	ldrb	r0, [r7, #3]
    4aec:	78b9      	ldrb	r1, [r7, #2]
    4aee:	687c      	ldr	r4, [r7, #4]
    4af0:	01c0      	lsls	r0, r0, #7
    4af2:	4420      	add	r0, r4
    4af4:	4401      	add	r1, r0
    4af6:	3140      	adds	r1, #64	; 0x40
    4af8:	7809      	ldrb	r1, [r1, #0]
    4afa:	b2c9      	uxtb	r1, r1
    4afc:	f021 0104 	bic.w	r1, r1, #4
    4b00:	b2c8      	uxtb	r0, r1
    4b02:	6879      	ldr	r1, [r7, #4]
    4b04:	01d2      	lsls	r2, r2, #7
    4b06:	440a      	add	r2, r1
    4b08:	4413      	add	r3, r2
    4b0a:	3340      	adds	r3, #64	; 0x40
    4b0c:	4602      	mov	r2, r0
    4b0e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4b10:	bf00      	nop
    4b12:	3708      	adds	r7, #8
    4b14:	46bd      	mov	sp, r7
    4b16:	bc90      	pop	{r4, r7}
    4b18:	4770      	bx	lr

00004b1a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    4b1a:	b480      	push	{r7}
    4b1c:	b085      	sub	sp, #20
    4b1e:	af00      	add	r7, sp, #0
    4b20:	60f8      	str	r0, [r7, #12]
    4b22:	460b      	mov	r3, r1
    4b24:	607a      	str	r2, [r7, #4]
    4b26:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4b28:	7afb      	ldrb	r3, [r7, #11]
    4b2a:	68fa      	ldr	r2, [r7, #12]
    4b2c:	01db      	lsls	r3, r3, #7
    4b2e:	4413      	add	r3, r2
    4b30:	3328      	adds	r3, #40	; 0x28
    4b32:	687a      	ldr	r2, [r7, #4]
    4b34:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4b36:	bf00      	nop
    4b38:	3714      	adds	r7, #20
    4b3a:	46bd      	mov	sp, r7
    4b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b40:	4770      	bx	lr
	...

00004b44 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4b44:	b580      	push	{r7, lr}
    4b46:	b082      	sub	sp, #8
    4b48:	af00      	add	r7, sp, #0
    4b4a:	4603      	mov	r3, r0
    4b4c:	6039      	str	r1, [r7, #0]
    4b4e:	71fb      	strb	r3, [r7, #7]
    4b50:	4613      	mov	r3, r2
    4b52:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4b54:	79bb      	ldrb	r3, [r7, #6]
    4b56:	2b01      	cmp	r3, #1
    4b58:	d01c      	beq.n	4b94 <_gpio_set_direction+0x50>
    4b5a:	2b02      	cmp	r3, #2
    4b5c:	d037      	beq.n	4bce <_gpio_set_direction+0x8a>
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d14e      	bne.n	4c00 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4b62:	79fb      	ldrb	r3, [r7, #7]
    4b64:	683a      	ldr	r2, [r7, #0]
    4b66:	4619      	mov	r1, r3
    4b68:	482a      	ldr	r0, [pc, #168]	; (4c14 <_gpio_set_direction+0xd0>)
    4b6a:	4b2b      	ldr	r3, [pc, #172]	; (4c18 <_gpio_set_direction+0xd4>)
    4b6c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4b6e:	683b      	ldr	r3, [r7, #0]
    4b70:	b29b      	uxth	r3, r3
    4b72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4b76:	79fb      	ldrb	r3, [r7, #7]
    4b78:	4619      	mov	r1, r3
    4b7a:	4826      	ldr	r0, [pc, #152]	; (4c14 <_gpio_set_direction+0xd0>)
    4b7c:	4b27      	ldr	r3, [pc, #156]	; (4c1c <_gpio_set_direction+0xd8>)
    4b7e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4b80:	683b      	ldr	r3, [r7, #0]
    4b82:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4b84:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4b88:	79fb      	ldrb	r3, [r7, #7]
    4b8a:	4619      	mov	r1, r3
    4b8c:	4821      	ldr	r0, [pc, #132]	; (4c14 <_gpio_set_direction+0xd0>)
    4b8e:	4b23      	ldr	r3, [pc, #140]	; (4c1c <_gpio_set_direction+0xd8>)
    4b90:	4798      	blx	r3
		break;
    4b92:	e03a      	b.n	4c0a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4b94:	79fb      	ldrb	r3, [r7, #7]
    4b96:	683a      	ldr	r2, [r7, #0]
    4b98:	4619      	mov	r1, r3
    4b9a:	481e      	ldr	r0, [pc, #120]	; (4c14 <_gpio_set_direction+0xd0>)
    4b9c:	4b1e      	ldr	r3, [pc, #120]	; (4c18 <_gpio_set_direction+0xd4>)
    4b9e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4ba0:	683b      	ldr	r3, [r7, #0]
    4ba2:	b29b      	uxth	r3, r3
    4ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4bac:	79f9      	ldrb	r1, [r7, #7]
    4bae:	461a      	mov	r2, r3
    4bb0:	4818      	ldr	r0, [pc, #96]	; (4c14 <_gpio_set_direction+0xd0>)
    4bb2:	4b1a      	ldr	r3, [pc, #104]	; (4c1c <_gpio_set_direction+0xd8>)
    4bb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    4bb6:	683b      	ldr	r3, [r7, #0]
    4bb8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4bba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4bc2:	79f9      	ldrb	r1, [r7, #7]
    4bc4:	461a      	mov	r2, r3
    4bc6:	4813      	ldr	r0, [pc, #76]	; (4c14 <_gpio_set_direction+0xd0>)
    4bc8:	4b14      	ldr	r3, [pc, #80]	; (4c1c <_gpio_set_direction+0xd8>)
    4bca:	4798      	blx	r3
		break;
    4bcc:	e01d      	b.n	4c0a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    4bce:	79fb      	ldrb	r3, [r7, #7]
    4bd0:	683a      	ldr	r2, [r7, #0]
    4bd2:	4619      	mov	r1, r3
    4bd4:	480f      	ldr	r0, [pc, #60]	; (4c14 <_gpio_set_direction+0xd0>)
    4bd6:	4b12      	ldr	r3, [pc, #72]	; (4c20 <_gpio_set_direction+0xdc>)
    4bd8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4bda:	683b      	ldr	r3, [r7, #0]
    4bdc:	b29b      	uxth	r3, r3
    4bde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4be2:	79fb      	ldrb	r3, [r7, #7]
    4be4:	4619      	mov	r1, r3
    4be6:	480b      	ldr	r0, [pc, #44]	; (4c14 <_gpio_set_direction+0xd0>)
    4be8:	4b0c      	ldr	r3, [pc, #48]	; (4c1c <_gpio_set_direction+0xd8>)
    4bea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4bec:	683b      	ldr	r3, [r7, #0]
    4bee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4bf0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4bf4:	79fb      	ldrb	r3, [r7, #7]
    4bf6:	4619      	mov	r1, r3
    4bf8:	4806      	ldr	r0, [pc, #24]	; (4c14 <_gpio_set_direction+0xd0>)
    4bfa:	4b08      	ldr	r3, [pc, #32]	; (4c1c <_gpio_set_direction+0xd8>)
    4bfc:	4798      	blx	r3
		break;
    4bfe:	e004      	b.n	4c0a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    4c00:	2246      	movs	r2, #70	; 0x46
    4c02:	4908      	ldr	r1, [pc, #32]	; (4c24 <_gpio_set_direction+0xe0>)
    4c04:	2000      	movs	r0, #0
    4c06:	4b08      	ldr	r3, [pc, #32]	; (4c28 <_gpio_set_direction+0xe4>)
    4c08:	4798      	blx	r3
	}
}
    4c0a:	bf00      	nop
    4c0c:	3708      	adds	r7, #8
    4c0e:	46bd      	mov	sp, r7
    4c10:	bd80      	pop	{r7, pc}
    4c12:	bf00      	nop
    4c14:	41008000 	.word	0x41008000
    4c18:	00004903 	.word	0x00004903
    4c1c:	00004b1b 	.word	0x00004b1b
    4c20:	000048db 	.word	0x000048db
    4c24:	000128a8 	.word	0x000128a8
    4c28:	00007261 	.word	0x00007261

00004c2c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4c2c:	b580      	push	{r7, lr}
    4c2e:	b082      	sub	sp, #8
    4c30:	af00      	add	r7, sp, #0
    4c32:	4603      	mov	r3, r0
    4c34:	6039      	str	r1, [r7, #0]
    4c36:	71fb      	strb	r3, [r7, #7]
    4c38:	4613      	mov	r3, r2
    4c3a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4c3c:	79bb      	ldrb	r3, [r7, #6]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d006      	beq.n	4c50 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4c42:	79fb      	ldrb	r3, [r7, #7]
    4c44:	683a      	ldr	r2, [r7, #0]
    4c46:	4619      	mov	r1, r3
    4c48:	4806      	ldr	r0, [pc, #24]	; (4c64 <_gpio_set_level+0x38>)
    4c4a:	4b07      	ldr	r3, [pc, #28]	; (4c68 <_gpio_set_level+0x3c>)
    4c4c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4c4e:	e005      	b.n	4c5c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4c50:	79fb      	ldrb	r3, [r7, #7]
    4c52:	683a      	ldr	r2, [r7, #0]
    4c54:	4619      	mov	r1, r3
    4c56:	4803      	ldr	r0, [pc, #12]	; (4c64 <_gpio_set_level+0x38>)
    4c58:	4b04      	ldr	r3, [pc, #16]	; (4c6c <_gpio_set_level+0x40>)
    4c5a:	4798      	blx	r3
}
    4c5c:	bf00      	nop
    4c5e:	3708      	adds	r7, #8
    4c60:	46bd      	mov	sp, r7
    4c62:	bd80      	pop	{r7, pc}
    4c64:	41008000 	.word	0x41008000
    4c68:	0000492b 	.word	0x0000492b
    4c6c:	00004953 	.word	0x00004953

00004c70 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b082      	sub	sp, #8
    4c74:	af00      	add	r7, sp, #0
    4c76:	4603      	mov	r3, r0
    4c78:	71fb      	strb	r3, [r7, #7]
    4c7a:	460b      	mov	r3, r1
    4c7c:	71bb      	strb	r3, [r7, #6]
    4c7e:	4613      	mov	r3, r2
    4c80:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    4c82:	797b      	ldrb	r3, [r7, #5]
    4c84:	2b01      	cmp	r3, #1
    4c86:	d00a      	beq.n	4c9e <_gpio_set_pin_pull_mode+0x2e>
    4c88:	2b02      	cmp	r3, #2
    4c8a:	d01f      	beq.n	4ccc <_gpio_set_pin_pull_mode+0x5c>
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d134      	bne.n	4cfa <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4c90:	79ba      	ldrb	r2, [r7, #6]
    4c92:	79fb      	ldrb	r3, [r7, #7]
    4c94:	4619      	mov	r1, r3
    4c96:	481e      	ldr	r0, [pc, #120]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4c98:	4b1e      	ldr	r3, [pc, #120]	; (4d14 <_gpio_set_pin_pull_mode+0xa4>)
    4c9a:	4798      	blx	r3
		break;
    4c9c:	e033      	b.n	4d06 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4c9e:	79bb      	ldrb	r3, [r7, #6]
    4ca0:	2201      	movs	r2, #1
    4ca2:	409a      	lsls	r2, r3
    4ca4:	79fb      	ldrb	r3, [r7, #7]
    4ca6:	4619      	mov	r1, r3
    4ca8:	4819      	ldr	r0, [pc, #100]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4caa:	4b1b      	ldr	r3, [pc, #108]	; (4d18 <_gpio_set_pin_pull_mode+0xa8>)
    4cac:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4cae:	79ba      	ldrb	r2, [r7, #6]
    4cb0:	79fb      	ldrb	r3, [r7, #7]
    4cb2:	4619      	mov	r1, r3
    4cb4:	4816      	ldr	r0, [pc, #88]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4cb6:	4b19      	ldr	r3, [pc, #100]	; (4d1c <_gpio_set_pin_pull_mode+0xac>)
    4cb8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4cba:	79bb      	ldrb	r3, [r7, #6]
    4cbc:	2201      	movs	r2, #1
    4cbe:	409a      	lsls	r2, r3
    4cc0:	79fb      	ldrb	r3, [r7, #7]
    4cc2:	4619      	mov	r1, r3
    4cc4:	4812      	ldr	r0, [pc, #72]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4cc6:	4b16      	ldr	r3, [pc, #88]	; (4d20 <_gpio_set_pin_pull_mode+0xb0>)
    4cc8:	4798      	blx	r3
		break;
    4cca:	e01c      	b.n	4d06 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4ccc:	79bb      	ldrb	r3, [r7, #6]
    4cce:	2201      	movs	r2, #1
    4cd0:	409a      	lsls	r2, r3
    4cd2:	79fb      	ldrb	r3, [r7, #7]
    4cd4:	4619      	mov	r1, r3
    4cd6:	480e      	ldr	r0, [pc, #56]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4cd8:	4b0f      	ldr	r3, [pc, #60]	; (4d18 <_gpio_set_pin_pull_mode+0xa8>)
    4cda:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4cdc:	79ba      	ldrb	r2, [r7, #6]
    4cde:	79fb      	ldrb	r3, [r7, #7]
    4ce0:	4619      	mov	r1, r3
    4ce2:	480b      	ldr	r0, [pc, #44]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4ce4:	4b0d      	ldr	r3, [pc, #52]	; (4d1c <_gpio_set_pin_pull_mode+0xac>)
    4ce6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    4ce8:	79bb      	ldrb	r3, [r7, #6]
    4cea:	2201      	movs	r2, #1
    4cec:	409a      	lsls	r2, r3
    4cee:	79fb      	ldrb	r3, [r7, #7]
    4cf0:	4619      	mov	r1, r3
    4cf2:	4807      	ldr	r0, [pc, #28]	; (4d10 <_gpio_set_pin_pull_mode+0xa0>)
    4cf4:	4b0b      	ldr	r3, [pc, #44]	; (4d24 <_gpio_set_pin_pull_mode+0xb4>)
    4cf6:	4798      	blx	r3
		break;
    4cf8:	e005      	b.n	4d06 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    4cfa:	2289      	movs	r2, #137	; 0x89
    4cfc:	490a      	ldr	r1, [pc, #40]	; (4d28 <_gpio_set_pin_pull_mode+0xb8>)
    4cfe:	2000      	movs	r0, #0
    4d00:	4b0a      	ldr	r3, [pc, #40]	; (4d2c <_gpio_set_pin_pull_mode+0xbc>)
    4d02:	4798      	blx	r3
		break;
    4d04:	bf00      	nop
	}
}
    4d06:	bf00      	nop
    4d08:	3708      	adds	r7, #8
    4d0a:	46bd      	mov	sp, r7
    4d0c:	bd80      	pop	{r7, pc}
    4d0e:	bf00      	nop
    4d10:	41008000 	.word	0x41008000
    4d14:	00004ad7 	.word	0x00004ad7
    4d18:	00004903 	.word	0x00004903
    4d1c:	00004a93 	.word	0x00004a93
    4d20:	0000492b 	.word	0x0000492b
    4d24:	00004953 	.word	0x00004953
    4d28:	000128a8 	.word	0x000128a8
    4d2c:	00007261 	.word	0x00007261

00004d30 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4d30:	b590      	push	{r4, r7, lr}
    4d32:	b085      	sub	sp, #20
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
    4d38:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	095b      	lsrs	r3, r3, #5
    4d3e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	b2db      	uxtb	r3, r3
    4d44:	f003 031f 	and.w	r3, r3, #31
    4d48:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4d4a:	683b      	ldr	r3, [r7, #0]
    4d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d50:	d106      	bne.n	4d60 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4d52:	7bba      	ldrb	r2, [r7, #14]
    4d54:	7bf9      	ldrb	r1, [r7, #15]
    4d56:	2300      	movs	r3, #0
    4d58:	4812      	ldr	r0, [pc, #72]	; (4da4 <_gpio_set_pin_function+0x74>)
    4d5a:	4c13      	ldr	r4, [pc, #76]	; (4da8 <_gpio_set_pin_function+0x78>)
    4d5c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4d5e:	e01d      	b.n	4d9c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4d60:	7bba      	ldrb	r2, [r7, #14]
    4d62:	7bf9      	ldrb	r1, [r7, #15]
    4d64:	2301      	movs	r3, #1
    4d66:	480f      	ldr	r0, [pc, #60]	; (4da4 <_gpio_set_pin_function+0x74>)
    4d68:	4c0f      	ldr	r4, [pc, #60]	; (4da8 <_gpio_set_pin_function+0x78>)
    4d6a:	47a0      	blx	r4
		if (pin & 1) {
    4d6c:	7bbb      	ldrb	r3, [r7, #14]
    4d6e:	f003 0301 	and.w	r3, r3, #1
    4d72:	2b00      	cmp	r3, #0
    4d74:	d009      	beq.n	4d8a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4d76:	7bbb      	ldrb	r3, [r7, #14]
    4d78:	085b      	lsrs	r3, r3, #1
    4d7a:	b2da      	uxtb	r2, r3
    4d7c:	683b      	ldr	r3, [r7, #0]
    4d7e:	b2db      	uxtb	r3, r3
    4d80:	7bf9      	ldrb	r1, [r7, #15]
    4d82:	4808      	ldr	r0, [pc, #32]	; (4da4 <_gpio_set_pin_function+0x74>)
    4d84:	4c09      	ldr	r4, [pc, #36]	; (4dac <_gpio_set_pin_function+0x7c>)
    4d86:	47a0      	blx	r4
}
    4d88:	e008      	b.n	4d9c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4d8a:	7bbb      	ldrb	r3, [r7, #14]
    4d8c:	085b      	lsrs	r3, r3, #1
    4d8e:	b2da      	uxtb	r2, r3
    4d90:	683b      	ldr	r3, [r7, #0]
    4d92:	b2db      	uxtb	r3, r3
    4d94:	7bf9      	ldrb	r1, [r7, #15]
    4d96:	4803      	ldr	r0, [pc, #12]	; (4da4 <_gpio_set_pin_function+0x74>)
    4d98:	4c05      	ldr	r4, [pc, #20]	; (4db0 <_gpio_set_pin_function+0x80>)
    4d9a:	47a0      	blx	r4
}
    4d9c:	bf00      	nop
    4d9e:	3714      	adds	r7, #20
    4da0:	46bd      	mov	sp, r7
    4da2:	bd90      	pop	{r4, r7, pc}
    4da4:	41008000 	.word	0x41008000
    4da8:	00004a39 	.word	0x00004a39
    4dac:	000049db 	.word	0x000049db
    4db0:	0000497b 	.word	0x0000497b

00004db4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4db4:	b580      	push	{r7, lr}
    4db6:	b082      	sub	sp, #8
    4db8:	af00      	add	r7, sp, #0
    4dba:	4603      	mov	r3, r0
    4dbc:	460a      	mov	r2, r1
    4dbe:	71fb      	strb	r3, [r7, #7]
    4dc0:	4613      	mov	r3, r2
    4dc2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4dc4:	79fb      	ldrb	r3, [r7, #7]
    4dc6:	095b      	lsrs	r3, r3, #5
    4dc8:	b2d8      	uxtb	r0, r3
    4dca:	79fb      	ldrb	r3, [r7, #7]
    4dcc:	f003 031f 	and.w	r3, r3, #31
    4dd0:	b2db      	uxtb	r3, r3
    4dd2:	79ba      	ldrb	r2, [r7, #6]
    4dd4:	4619      	mov	r1, r3
    4dd6:	4b03      	ldr	r3, [pc, #12]	; (4de4 <gpio_set_pin_pull_mode+0x30>)
    4dd8:	4798      	blx	r3
}
    4dda:	bf00      	nop
    4ddc:	3708      	adds	r7, #8
    4dde:	46bd      	mov	sp, r7
    4de0:	bd80      	pop	{r7, pc}
    4de2:	bf00      	nop
    4de4:	00004c71 	.word	0x00004c71

00004de8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
    4df0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4df2:	6839      	ldr	r1, [r7, #0]
    4df4:	6878      	ldr	r0, [r7, #4]
    4df6:	4b03      	ldr	r3, [pc, #12]	; (4e04 <gpio_set_pin_function+0x1c>)
    4df8:	4798      	blx	r3
}
    4dfa:	bf00      	nop
    4dfc:	3708      	adds	r7, #8
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop
    4e04:	00004d31 	.word	0x00004d31

00004e08 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	4603      	mov	r3, r0
    4e10:	460a      	mov	r2, r1
    4e12:	71fb      	strb	r3, [r7, #7]
    4e14:	4613      	mov	r3, r2
    4e16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4e18:	79fb      	ldrb	r3, [r7, #7]
    4e1a:	095b      	lsrs	r3, r3, #5
    4e1c:	b2d8      	uxtb	r0, r3
    4e1e:	79fb      	ldrb	r3, [r7, #7]
    4e20:	f003 031f 	and.w	r3, r3, #31
    4e24:	2201      	movs	r2, #1
    4e26:	fa02 f303 	lsl.w	r3, r2, r3
    4e2a:	79ba      	ldrb	r2, [r7, #6]
    4e2c:	4619      	mov	r1, r3
    4e2e:	4b03      	ldr	r3, [pc, #12]	; (4e3c <gpio_set_pin_direction+0x34>)
    4e30:	4798      	blx	r3
}
    4e32:	bf00      	nop
    4e34:	3708      	adds	r7, #8
    4e36:	46bd      	mov	sp, r7
    4e38:	bd80      	pop	{r7, pc}
    4e3a:	bf00      	nop
    4e3c:	00004b45 	.word	0x00004b45

00004e40 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4e40:	b580      	push	{r7, lr}
    4e42:	b082      	sub	sp, #8
    4e44:	af00      	add	r7, sp, #0
    4e46:	4603      	mov	r3, r0
    4e48:	460a      	mov	r2, r1
    4e4a:	71fb      	strb	r3, [r7, #7]
    4e4c:	4613      	mov	r3, r2
    4e4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4e50:	79fb      	ldrb	r3, [r7, #7]
    4e52:	095b      	lsrs	r3, r3, #5
    4e54:	b2d8      	uxtb	r0, r3
    4e56:	79fb      	ldrb	r3, [r7, #7]
    4e58:	f003 031f 	and.w	r3, r3, #31
    4e5c:	2201      	movs	r2, #1
    4e5e:	fa02 f303 	lsl.w	r3, r2, r3
    4e62:	79ba      	ldrb	r2, [r7, #6]
    4e64:	4619      	mov	r1, r3
    4e66:	4b03      	ldr	r3, [pc, #12]	; (4e74 <gpio_set_pin_level+0x34>)
    4e68:	4798      	blx	r3
}
    4e6a:	bf00      	nop
    4e6c:	3708      	adds	r7, #8
    4e6e:	46bd      	mov	sp, r7
    4e70:	bd80      	pop	{r7, pc}
    4e72:	bf00      	nop
    4e74:	00004c2d 	.word	0x00004c2d

00004e78 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	af00      	add	r7, sp, #0
	_init_chip();
    4e7c:	4b01      	ldr	r3, [pc, #4]	; (4e84 <init_mcu+0xc>)
    4e7e:	4798      	blx	r3
}
    4e80:	bf00      	nop
    4e82:	bd80      	pop	{r7, pc}
    4e84:	000084bd 	.word	0x000084bd

00004e88 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
    4e90:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d004      	beq.n	4ea2 <wdt_init+0x1a>
    4e98:	683b      	ldr	r3, [r7, #0]
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d001      	beq.n	4ea2 <wdt_init+0x1a>
    4e9e:	2301      	movs	r3, #1
    4ea0:	e000      	b.n	4ea4 <wdt_init+0x1c>
    4ea2:	2300      	movs	r3, #0
    4ea4:	f003 0301 	and.w	r3, r3, #1
    4ea8:	b2db      	uxtb	r3, r3
    4eaa:	2248      	movs	r2, #72	; 0x48
    4eac:	4907      	ldr	r1, [pc, #28]	; (4ecc <wdt_init+0x44>)
    4eae:	4618      	mov	r0, r3
    4eb0:	4b07      	ldr	r3, [pc, #28]	; (4ed0 <wdt_init+0x48>)
    4eb2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	683a      	ldr	r2, [r7, #0]
    4eb8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	4618      	mov	r0, r3
    4ebe:	4b05      	ldr	r3, [pc, #20]	; (4ed4 <wdt_init+0x4c>)
    4ec0:	4798      	blx	r3
    4ec2:	4603      	mov	r3, r0
}
    4ec4:	4618      	mov	r0, r3
    4ec6:	3708      	adds	r7, #8
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}
    4ecc:	000128c4 	.word	0x000128c4
    4ed0:	00007261 	.word	0x00007261
    4ed4:	0000ecf9 	.word	0x0000ecf9

00004ed8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    4ed8:	b580      	push	{r7, lr}
    4eda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    4edc:	4804      	ldr	r0, [pc, #16]	; (4ef0 <CRC_CALC_init+0x18>)
    4ede:	4b05      	ldr	r3, [pc, #20]	; (4ef4 <CRC_CALC_init+0x1c>)
    4ee0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    4ee2:	4905      	ldr	r1, [pc, #20]	; (4ef8 <CRC_CALC_init+0x20>)
    4ee4:	4805      	ldr	r0, [pc, #20]	; (4efc <CRC_CALC_init+0x24>)
    4ee6:	4b06      	ldr	r3, [pc, #24]	; (4f00 <CRC_CALC_init+0x28>)
    4ee8:	4798      	blx	r3
}
    4eea:	bf00      	nop
    4eec:	bd80      	pop	{r7, pc}
    4eee:	bf00      	nop
    4ef0:	40000800 	.word	0x40000800
    4ef4:	000046fb 	.word	0x000046fb
    4ef8:	41002000 	.word	0x41002000
    4efc:	20002704 	.word	0x20002704
    4f00:	00005e5d 	.word	0x00005e5d

00004f04 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4f08:	2244      	movs	r2, #68	; 0x44
    4f0a:	2104      	movs	r1, #4
    4f0c:	483f      	ldr	r0, [pc, #252]	; (500c <EXTERNAL_IRQ_0_init+0x108>)
    4f0e:	4b40      	ldr	r3, [pc, #256]	; (5010 <EXTERNAL_IRQ_0_init+0x10c>)
    4f10:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    4f12:	4840      	ldr	r0, [pc, #256]	; (5014 <EXTERNAL_IRQ_0_init+0x110>)
    4f14:	4b40      	ldr	r3, [pc, #256]	; (5018 <EXTERNAL_IRQ_0_init+0x114>)
    4f16:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    4f18:	2101      	movs	r1, #1
    4f1a:	2040      	movs	r0, #64	; 0x40
    4f1c:	4b3f      	ldr	r3, [pc, #252]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4f1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    4f20:	2100      	movs	r1, #0
    4f22:	2040      	movs	r0, #64	; 0x40
    4f24:	4b3e      	ldr	r3, [pc, #248]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4f26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    4f28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4f2c:	2040      	movs	r0, #64	; 0x40
    4f2e:	4b3d      	ldr	r3, [pc, #244]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4f30:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    4f32:	2101      	movs	r1, #1
    4f34:	2021      	movs	r0, #33	; 0x21
    4f36:	4b39      	ldr	r3, [pc, #228]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4f38:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    4f3a:	2100      	movs	r1, #0
    4f3c:	2021      	movs	r0, #33	; 0x21
    4f3e:	4b38      	ldr	r3, [pc, #224]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4f40:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    4f42:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    4f46:	2021      	movs	r0, #33	; 0x21
    4f48:	4b36      	ldr	r3, [pc, #216]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4f4a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    4f4c:	2101      	movs	r1, #1
    4f4e:	2003      	movs	r0, #3
    4f50:	4b32      	ldr	r3, [pc, #200]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4f52:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    4f54:	2102      	movs	r1, #2
    4f56:	2003      	movs	r0, #3
    4f58:	4b31      	ldr	r3, [pc, #196]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4f5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    4f5c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    4f60:	2003      	movs	r0, #3
    4f62:	4b30      	ldr	r3, [pc, #192]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4f64:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    4f66:	2101      	movs	r1, #1
    4f68:	2004      	movs	r0, #4
    4f6a:	4b2c      	ldr	r3, [pc, #176]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4f6c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    4f6e:	2102      	movs	r1, #2
    4f70:	2004      	movs	r0, #4
    4f72:	4b2b      	ldr	r3, [pc, #172]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4f74:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    4f76:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4f7a:	2004      	movs	r0, #4
    4f7c:	4b29      	ldr	r3, [pc, #164]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4f7e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    4f80:	2101      	movs	r1, #1
    4f82:	2005      	movs	r0, #5
    4f84:	4b25      	ldr	r3, [pc, #148]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4f86:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    4f88:	2102      	movs	r1, #2
    4f8a:	2005      	movs	r0, #5
    4f8c:	4b24      	ldr	r3, [pc, #144]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4f8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    4f90:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    4f94:	2005      	movs	r0, #5
    4f96:	4b23      	ldr	r3, [pc, #140]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4f98:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    4f9a:	2101      	movs	r1, #1
    4f9c:	2056      	movs	r0, #86	; 0x56
    4f9e:	4b1f      	ldr	r3, [pc, #124]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4fa0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    4fa2:	2102      	movs	r1, #2
    4fa4:	2056      	movs	r0, #86	; 0x56
    4fa6:	4b1e      	ldr	r3, [pc, #120]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4fa8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    4faa:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    4fae:	2056      	movs	r0, #86	; 0x56
    4fb0:	4b1c      	ldr	r3, [pc, #112]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4fb2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    4fb4:	2101      	movs	r1, #1
    4fb6:	2057      	movs	r0, #87	; 0x57
    4fb8:	4b18      	ldr	r3, [pc, #96]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4fba:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    4fbc:	2102      	movs	r1, #2
    4fbe:	2057      	movs	r0, #87	; 0x57
    4fc0:	4b17      	ldr	r3, [pc, #92]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4fc2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    4fc4:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    4fc8:	2057      	movs	r0, #87	; 0x57
    4fca:	4b16      	ldr	r3, [pc, #88]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4fcc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    4fce:	2101      	movs	r1, #1
    4fd0:	2028      	movs	r0, #40	; 0x28
    4fd2:	4b12      	ldr	r3, [pc, #72]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4fd4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    4fd6:	2100      	movs	r1, #0
    4fd8:	2028      	movs	r0, #40	; 0x28
    4fda:	4b11      	ldr	r3, [pc, #68]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4fdc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    4fde:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4fe2:	2028      	movs	r0, #40	; 0x28
    4fe4:	4b0f      	ldr	r3, [pc, #60]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    4fe6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    4fe8:	2101      	movs	r1, #1
    4fea:	2029      	movs	r0, #41	; 0x29
    4fec:	4b0b      	ldr	r3, [pc, #44]	; (501c <EXTERNAL_IRQ_0_init+0x118>)
    4fee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    4ff0:	2100      	movs	r1, #0
    4ff2:	2029      	movs	r0, #41	; 0x29
    4ff4:	4b0a      	ldr	r3, [pc, #40]	; (5020 <EXTERNAL_IRQ_0_init+0x11c>)
    4ff6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    4ff8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    4ffc:	2029      	movs	r0, #41	; 0x29
    4ffe:	4b09      	ldr	r3, [pc, #36]	; (5024 <EXTERNAL_IRQ_0_init+0x120>)
    5000:	4798      	blx	r3

	ext_irq_init();
    5002:	4b09      	ldr	r3, [pc, #36]	; (5028 <EXTERNAL_IRQ_0_init+0x124>)
    5004:	4798      	blx	r3
}
    5006:	bf00      	nop
    5008:	bd80      	pop	{r7, pc}
    500a:	bf00      	nop
    500c:	40001c00 	.word	0x40001c00
    5010:	00004595 	.word	0x00004595
    5014:	40000800 	.word	0x40000800
    5018:	0000467b 	.word	0x0000467b
    501c:	00004e09 	.word	0x00004e09
    5020:	00004db5 	.word	0x00004db5
    5024:	00004de9 	.word	0x00004de9
    5028:	00005f25 	.word	0x00005f25

0000502c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    502c:	b580      	push	{r7, lr}
    502e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5030:	2244      	movs	r2, #68	; 0x44
    5032:	210b      	movs	r1, #11
    5034:	4807      	ldr	r0, [pc, #28]	; (5054 <EVENT_SYSTEM_0_init+0x28>)
    5036:	4b08      	ldr	r3, [pc, #32]	; (5058 <EVENT_SYSTEM_0_init+0x2c>)
    5038:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    503a:	2244      	movs	r2, #68	; 0x44
    503c:	210c      	movs	r1, #12
    503e:	4805      	ldr	r0, [pc, #20]	; (5054 <EVENT_SYSTEM_0_init+0x28>)
    5040:	4b05      	ldr	r3, [pc, #20]	; (5058 <EVENT_SYSTEM_0_init+0x2c>)
    5042:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    5044:	4805      	ldr	r0, [pc, #20]	; (505c <EVENT_SYSTEM_0_init+0x30>)
    5046:	4b06      	ldr	r3, [pc, #24]	; (5060 <EVENT_SYSTEM_0_init+0x34>)
    5048:	4798      	blx	r3

	event_system_init();
    504a:	4b06      	ldr	r3, [pc, #24]	; (5064 <EVENT_SYSTEM_0_init+0x38>)
    504c:	4798      	blx	r3
}
    504e:	bf00      	nop
    5050:	bd80      	pop	{r7, pc}
    5052:	bf00      	nop
    5054:	40001c00 	.word	0x40001c00
    5058:	00004595 	.word	0x00004595
    505c:	40000800 	.word	0x40000800
    5060:	0000471b 	.word	0x0000471b
    5064:	00005f11 	.word	0x00005f11

00005068 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    5068:	b580      	push	{r7, lr}
    506a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    506c:	2101      	movs	r1, #1
    506e:	202b      	movs	r0, #43	; 0x2b
    5070:	4b2b      	ldr	r3, [pc, #172]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    5072:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    5074:	2100      	movs	r1, #0
    5076:	202b      	movs	r0, #43	; 0x2b
    5078:	4b2a      	ldr	r3, [pc, #168]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    507a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    507c:	492a      	ldr	r1, [pc, #168]	; (5128 <QSPI_N25Q256_PORT_init+0xc0>)
    507e:	202b      	movs	r0, #43	; 0x2b
    5080:	4b2a      	ldr	r3, [pc, #168]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    5082:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    5084:	2102      	movs	r1, #2
    5086:	2008      	movs	r0, #8
    5088:	4b25      	ldr	r3, [pc, #148]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    508a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    508c:	2100      	movs	r1, #0
    508e:	2008      	movs	r0, #8
    5090:	4b27      	ldr	r3, [pc, #156]	; (5130 <QSPI_N25Q256_PORT_init+0xc8>)
    5092:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    5094:	2100      	movs	r1, #0
    5096:	2008      	movs	r0, #8
    5098:	4b22      	ldr	r3, [pc, #136]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    509a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    509c:	4925      	ldr	r1, [pc, #148]	; (5134 <QSPI_N25Q256_PORT_init+0xcc>)
    509e:	2008      	movs	r0, #8
    50a0:	4b22      	ldr	r3, [pc, #136]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    50a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    50a4:	2102      	movs	r1, #2
    50a6:	2009      	movs	r0, #9
    50a8:	4b1d      	ldr	r3, [pc, #116]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    50aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    50ac:	2100      	movs	r1, #0
    50ae:	2009      	movs	r0, #9
    50b0:	4b1f      	ldr	r3, [pc, #124]	; (5130 <QSPI_N25Q256_PORT_init+0xc8>)
    50b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    50b4:	2100      	movs	r1, #0
    50b6:	2009      	movs	r0, #9
    50b8:	4b1a      	ldr	r3, [pc, #104]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    50ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    50bc:	491e      	ldr	r1, [pc, #120]	; (5138 <QSPI_N25Q256_PORT_init+0xd0>)
    50be:	2009      	movs	r0, #9
    50c0:	4b1a      	ldr	r3, [pc, #104]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    50c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    50c4:	2102      	movs	r1, #2
    50c6:	200a      	movs	r0, #10
    50c8:	4b15      	ldr	r3, [pc, #84]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    50ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    50cc:	2100      	movs	r1, #0
    50ce:	200a      	movs	r0, #10
    50d0:	4b17      	ldr	r3, [pc, #92]	; (5130 <QSPI_N25Q256_PORT_init+0xc8>)
    50d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    50d4:	2100      	movs	r1, #0
    50d6:	200a      	movs	r0, #10
    50d8:	4b12      	ldr	r3, [pc, #72]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    50da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    50dc:	4917      	ldr	r1, [pc, #92]	; (513c <QSPI_N25Q256_PORT_init+0xd4>)
    50de:	200a      	movs	r0, #10
    50e0:	4b12      	ldr	r3, [pc, #72]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    50e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    50e4:	2102      	movs	r1, #2
    50e6:	200b      	movs	r0, #11
    50e8:	4b0d      	ldr	r3, [pc, #52]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    50ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    50ec:	2100      	movs	r1, #0
    50ee:	200b      	movs	r0, #11
    50f0:	4b0f      	ldr	r3, [pc, #60]	; (5130 <QSPI_N25Q256_PORT_init+0xc8>)
    50f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    50f4:	2100      	movs	r1, #0
    50f6:	200b      	movs	r0, #11
    50f8:	4b0a      	ldr	r3, [pc, #40]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    50fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    50fc:	4910      	ldr	r1, [pc, #64]	; (5140 <QSPI_N25Q256_PORT_init+0xd8>)
    50fe:	200b      	movs	r0, #11
    5100:	4b0a      	ldr	r3, [pc, #40]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    5102:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    5104:	2101      	movs	r1, #1
    5106:	202a      	movs	r0, #42	; 0x2a
    5108:	4b05      	ldr	r3, [pc, #20]	; (5120 <QSPI_N25Q256_PORT_init+0xb8>)
    510a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    510c:	2100      	movs	r1, #0
    510e:	202a      	movs	r0, #42	; 0x2a
    5110:	4b04      	ldr	r3, [pc, #16]	; (5124 <QSPI_N25Q256_PORT_init+0xbc>)
    5112:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    5114:	490b      	ldr	r1, [pc, #44]	; (5144 <QSPI_N25Q256_PORT_init+0xdc>)
    5116:	202a      	movs	r0, #42	; 0x2a
    5118:	4b04      	ldr	r3, [pc, #16]	; (512c <QSPI_N25Q256_PORT_init+0xc4>)
    511a:	4798      	blx	r3
}
    511c:	bf00      	nop
    511e:	bd80      	pop	{r7, pc}
    5120:	00004e09 	.word	0x00004e09
    5124:	00004db5 	.word	0x00004db5
    5128:	002b0007 	.word	0x002b0007
    512c:	00004de9 	.word	0x00004de9
    5130:	00004e41 	.word	0x00004e41
    5134:	00080007 	.word	0x00080007
    5138:	00090007 	.word	0x00090007
    513c:	000a0007 	.word	0x000a0007
    5140:	000b0007 	.word	0x000b0007
    5144:	002a0007 	.word	0x002a0007

00005148 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    5148:	b580      	push	{r7, lr}
    514a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    514c:	4805      	ldr	r0, [pc, #20]	; (5164 <QSPI_N25Q256_CLOCK_init+0x1c>)
    514e:	4b06      	ldr	r3, [pc, #24]	; (5168 <QSPI_N25Q256_CLOCK_init+0x20>)
    5150:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    5152:	4804      	ldr	r0, [pc, #16]	; (5164 <QSPI_N25Q256_CLOCK_init+0x1c>)
    5154:	4b05      	ldr	r3, [pc, #20]	; (516c <QSPI_N25Q256_CLOCK_init+0x24>)
    5156:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    5158:	4802      	ldr	r0, [pc, #8]	; (5164 <QSPI_N25Q256_CLOCK_init+0x1c>)
    515a:	4b05      	ldr	r3, [pc, #20]	; (5170 <QSPI_N25Q256_CLOCK_init+0x28>)
    515c:	4798      	blx	r3
}
    515e:	bf00      	nop
    5160:	bd80      	pop	{r7, pc}
    5162:	bf00      	nop
    5164:	40000800 	.word	0x40000800
    5168:	000045db 	.word	0x000045db
    516c:	0000461b 	.word	0x0000461b
    5170:	000047fb 	.word	0x000047fb

00005174 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    5174:	b580      	push	{r7, lr}
    5176:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    5178:	4b04      	ldr	r3, [pc, #16]	; (518c <QSPI_N25Q256_init+0x18>)
    517a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    517c:	4904      	ldr	r1, [pc, #16]	; (5190 <QSPI_N25Q256_init+0x1c>)
    517e:	4805      	ldr	r0, [pc, #20]	; (5194 <QSPI_N25Q256_init+0x20>)
    5180:	4b05      	ldr	r3, [pc, #20]	; (5198 <QSPI_N25Q256_init+0x24>)
    5182:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    5184:	4b05      	ldr	r3, [pc, #20]	; (519c <QSPI_N25Q256_init+0x28>)
    5186:	4798      	blx	r3
}
    5188:	bf00      	nop
    518a:	bd80      	pop	{r7, pc}
    518c:	00005149 	.word	0x00005149
    5190:	42003400 	.word	0x42003400
    5194:	20002598 	.word	0x20002598
    5198:	0000623d 	.word	0x0000623d
    519c:	00005069 	.word	0x00005069

000051a0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    51a0:	b580      	push	{r7, lr}
    51a2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    51a4:	4802      	ldr	r0, [pc, #8]	; (51b0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    51a6:	4b03      	ldr	r3, [pc, #12]	; (51b4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    51a8:	4798      	blx	r3
}
    51aa:	bf00      	nop
    51ac:	bd80      	pop	{r7, pc}
    51ae:	bf00      	nop
    51b0:	40000800 	.word	0x40000800
    51b4:	0000465b 	.word	0x0000465b

000051b8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    51bc:	4b03      	ldr	r3, [pc, #12]	; (51cc <DATETIME_CLOCK_init+0x14>)
    51be:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    51c0:	4903      	ldr	r1, [pc, #12]	; (51d0 <DATETIME_CLOCK_init+0x18>)
    51c2:	4804      	ldr	r0, [pc, #16]	; (51d4 <DATETIME_CLOCK_init+0x1c>)
    51c4:	4b04      	ldr	r3, [pc, #16]	; (51d8 <DATETIME_CLOCK_init+0x20>)
    51c6:	4798      	blx	r3
}
    51c8:	bf00      	nop
    51ca:	bd80      	pop	{r7, pc}
    51cc:	000051a1 	.word	0x000051a1
    51d0:	40002400 	.word	0x40002400
    51d4:	200026e0 	.word	0x200026e0
    51d8:	00005b65 	.word	0x00005b65

000051dc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    51dc:	b580      	push	{r7, lr}
    51de:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    51e0:	2101      	movs	r1, #1
    51e2:	2010      	movs	r0, #16
    51e4:	4b07      	ldr	r3, [pc, #28]	; (5204 <I2C_HEATERS_PORT_init+0x28>)
    51e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    51e8:	4907      	ldr	r1, [pc, #28]	; (5208 <I2C_HEATERS_PORT_init+0x2c>)
    51ea:	2010      	movs	r0, #16
    51ec:	4b07      	ldr	r3, [pc, #28]	; (520c <I2C_HEATERS_PORT_init+0x30>)
    51ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    51f0:	2101      	movs	r1, #1
    51f2:	2011      	movs	r0, #17
    51f4:	4b03      	ldr	r3, [pc, #12]	; (5204 <I2C_HEATERS_PORT_init+0x28>)
    51f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    51f8:	4905      	ldr	r1, [pc, #20]	; (5210 <I2C_HEATERS_PORT_init+0x34>)
    51fa:	2011      	movs	r0, #17
    51fc:	4b03      	ldr	r3, [pc, #12]	; (520c <I2C_HEATERS_PORT_init+0x30>)
    51fe:	4798      	blx	r3
}
    5200:	bf00      	nop
    5202:	bd80      	pop	{r7, pc}
    5204:	00004db5 	.word	0x00004db5
    5208:	00100002 	.word	0x00100002
    520c:	00004de9 	.word	0x00004de9
    5210:	00110002 	.word	0x00110002

00005214 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    5214:	b580      	push	{r7, lr}
    5216:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5218:	2242      	movs	r2, #66	; 0x42
    521a:	2108      	movs	r1, #8
    521c:	4806      	ldr	r0, [pc, #24]	; (5238 <I2C_HEATERS_CLOCK_init+0x24>)
    521e:	4b07      	ldr	r3, [pc, #28]	; (523c <I2C_HEATERS_CLOCK_init+0x28>)
    5220:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5222:	224a      	movs	r2, #74	; 0x4a
    5224:	2103      	movs	r1, #3
    5226:	4804      	ldr	r0, [pc, #16]	; (5238 <I2C_HEATERS_CLOCK_init+0x24>)
    5228:	4b04      	ldr	r3, [pc, #16]	; (523c <I2C_HEATERS_CLOCK_init+0x28>)
    522a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    522c:	4804      	ldr	r0, [pc, #16]	; (5240 <I2C_HEATERS_CLOCK_init+0x2c>)
    522e:	4b05      	ldr	r3, [pc, #20]	; (5244 <I2C_HEATERS_CLOCK_init+0x30>)
    5230:	4798      	blx	r3
}
    5232:	bf00      	nop
    5234:	bd80      	pop	{r7, pc}
    5236:	bf00      	nop
    5238:	40001c00 	.word	0x40001c00
    523c:	00004595 	.word	0x00004595
    5240:	40000800 	.word	0x40000800
    5244:	0000469b 	.word	0x0000469b

00005248 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    5248:	b580      	push	{r7, lr}
    524a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    524c:	4b04      	ldr	r3, [pc, #16]	; (5260 <I2C_HEATERS_init+0x18>)
    524e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    5250:	4904      	ldr	r1, [pc, #16]	; (5264 <I2C_HEATERS_init+0x1c>)
    5252:	4805      	ldr	r0, [pc, #20]	; (5268 <I2C_HEATERS_init+0x20>)
    5254:	4b05      	ldr	r3, [pc, #20]	; (526c <I2C_HEATERS_init+0x24>)
    5256:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    5258:	4b05      	ldr	r3, [pc, #20]	; (5270 <I2C_HEATERS_init+0x28>)
    525a:	4798      	blx	r3
}
    525c:	bf00      	nop
    525e:	bd80      	pop	{r7, pc}
    5260:	00005215 	.word	0x00005215
    5264:	40003400 	.word	0x40003400
    5268:	20002638 	.word	0x20002638
    526c:	00006095 	.word	0x00006095
    5270:	000051dd 	.word	0x000051dd

00005274 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    5274:	b580      	push	{r7, lr}
    5276:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    5278:	2100      	movs	r1, #0
    527a:	203b      	movs	r0, #59	; 0x3b
    527c:	4b11      	ldr	r3, [pc, #68]	; (52c4 <SPI_TEMP_PORT_init+0x50>)
    527e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    5280:	2102      	movs	r1, #2
    5282:	203b      	movs	r0, #59	; 0x3b
    5284:	4b10      	ldr	r3, [pc, #64]	; (52c8 <SPI_TEMP_PORT_init+0x54>)
    5286:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    5288:	4910      	ldr	r1, [pc, #64]	; (52cc <SPI_TEMP_PORT_init+0x58>)
    528a:	203b      	movs	r0, #59	; 0x3b
    528c:	4b10      	ldr	r3, [pc, #64]	; (52d0 <SPI_TEMP_PORT_init+0x5c>)
    528e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5290:	2100      	movs	r1, #0
    5292:	203a      	movs	r0, #58	; 0x3a
    5294:	4b0b      	ldr	r3, [pc, #44]	; (52c4 <SPI_TEMP_PORT_init+0x50>)
    5296:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5298:	2102      	movs	r1, #2
    529a:	203a      	movs	r0, #58	; 0x3a
    529c:	4b0a      	ldr	r3, [pc, #40]	; (52c8 <SPI_TEMP_PORT_init+0x54>)
    529e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    52a0:	490c      	ldr	r1, [pc, #48]	; (52d4 <SPI_TEMP_PORT_init+0x60>)
    52a2:	203a      	movs	r0, #58	; 0x3a
    52a4:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <SPI_TEMP_PORT_init+0x5c>)
    52a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    52a8:	2101      	movs	r1, #1
    52aa:	203c      	movs	r0, #60	; 0x3c
    52ac:	4b06      	ldr	r3, [pc, #24]	; (52c8 <SPI_TEMP_PORT_init+0x54>)
    52ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    52b0:	2100      	movs	r1, #0
    52b2:	203c      	movs	r0, #60	; 0x3c
    52b4:	4b08      	ldr	r3, [pc, #32]	; (52d8 <SPI_TEMP_PORT_init+0x64>)
    52b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    52b8:	4908      	ldr	r1, [pc, #32]	; (52dc <SPI_TEMP_PORT_init+0x68>)
    52ba:	203c      	movs	r0, #60	; 0x3c
    52bc:	4b04      	ldr	r3, [pc, #16]	; (52d0 <SPI_TEMP_PORT_init+0x5c>)
    52be:	4798      	blx	r3
}
    52c0:	bf00      	nop
    52c2:	bd80      	pop	{r7, pc}
    52c4:	00004e41 	.word	0x00004e41
    52c8:	00004e09 	.word	0x00004e09
    52cc:	003b0003 	.word	0x003b0003
    52d0:	00004de9 	.word	0x00004de9
    52d4:	003a0003 	.word	0x003a0003
    52d8:	00004db5 	.word	0x00004db5
    52dc:	003c0003 	.word	0x003c0003

000052e0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52e4:	2245      	movs	r2, #69	; 0x45
    52e6:	2122      	movs	r1, #34	; 0x22
    52e8:	4806      	ldr	r0, [pc, #24]	; (5304 <SPI_TEMP_CLOCK_init+0x24>)
    52ea:	4b07      	ldr	r3, [pc, #28]	; (5308 <SPI_TEMP_CLOCK_init+0x28>)
    52ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52ee:	224a      	movs	r2, #74	; 0x4a
    52f0:	2103      	movs	r1, #3
    52f2:	4804      	ldr	r0, [pc, #16]	; (5304 <SPI_TEMP_CLOCK_init+0x24>)
    52f4:	4b04      	ldr	r3, [pc, #16]	; (5308 <SPI_TEMP_CLOCK_init+0x28>)
    52f6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    52f8:	4804      	ldr	r0, [pc, #16]	; (530c <SPI_TEMP_CLOCK_init+0x2c>)
    52fa:	4b05      	ldr	r3, [pc, #20]	; (5310 <SPI_TEMP_CLOCK_init+0x30>)
    52fc:	4798      	blx	r3
}
    52fe:	bf00      	nop
    5300:	bd80      	pop	{r7, pc}
    5302:	bf00      	nop
    5304:	40001c00 	.word	0x40001c00
    5308:	00004595 	.word	0x00004595
    530c:	40000800 	.word	0x40000800
    5310:	0000481b 	.word	0x0000481b

00005314 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5314:	b580      	push	{r7, lr}
    5316:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5318:	4b05      	ldr	r3, [pc, #20]	; (5330 <SPI_TEMP_init+0x1c>)
    531a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    531c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5320:	4804      	ldr	r0, [pc, #16]	; (5334 <SPI_TEMP_init+0x20>)
    5322:	4b05      	ldr	r3, [pc, #20]	; (5338 <SPI_TEMP_init+0x24>)
    5324:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    5326:	4b05      	ldr	r3, [pc, #20]	; (533c <SPI_TEMP_init+0x28>)
    5328:	4798      	blx	r3
}
    532a:	bf00      	nop
    532c:	bd80      	pop	{r7, pc}
    532e:	bf00      	nop
    5330:	000052e1 	.word	0x000052e1
    5334:	20002540 	.word	0x20002540
    5338:	0000634d 	.word	0x0000634d
    533c:	00005275 	.word	0x00005275

00005340 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    5340:	b580      	push	{r7, lr}
    5342:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    5344:	2100      	movs	r1, #0
    5346:	2017      	movs	r0, #23
    5348:	4b07      	ldr	r3, [pc, #28]	; (5368 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    534a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    534c:	4907      	ldr	r1, [pc, #28]	; (536c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    534e:	2017      	movs	r0, #23
    5350:	4b07      	ldr	r3, [pc, #28]	; (5370 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    5352:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    5354:	2100      	movs	r1, #0
    5356:	2016      	movs	r0, #22
    5358:	4b03      	ldr	r3, [pc, #12]	; (5368 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    535a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    535c:	4905      	ldr	r1, [pc, #20]	; (5374 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    535e:	2016      	movs	r0, #22
    5360:	4b03      	ldr	r3, [pc, #12]	; (5370 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    5362:	4798      	blx	r3
}
    5364:	bf00      	nop
    5366:	bd80      	pop	{r7, pc}
    5368:	00004db5 	.word	0x00004db5
    536c:	00170003 	.word	0x00170003
    5370:	00004de9 	.word	0x00004de9
    5374:	00160003 	.word	0x00160003

00005378 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    5378:	b580      	push	{r7, lr}
    537a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    537c:	2244      	movs	r2, #68	; 0x44
    537e:	2123      	movs	r1, #35	; 0x23
    5380:	4806      	ldr	r0, [pc, #24]	; (539c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    5382:	4b07      	ldr	r3, [pc, #28]	; (53a0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    5384:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5386:	224a      	movs	r2, #74	; 0x4a
    5388:	2103      	movs	r1, #3
    538a:	4804      	ldr	r0, [pc, #16]	; (539c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    538c:	4b04      	ldr	r3, [pc, #16]	; (53a0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    538e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5390:	4804      	ldr	r0, [pc, #16]	; (53a4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    5392:	4b05      	ldr	r3, [pc, #20]	; (53a8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    5394:	4798      	blx	r3
}
    5396:	bf00      	nop
    5398:	bd80      	pop	{r7, pc}
    539a:	bf00      	nop
    539c:	40001c00 	.word	0x40001c00
    53a0:	00004595 	.word	0x00004595
    53a4:	40000800 	.word	0x40000800
    53a8:	0000483b 	.word	0x0000483b

000053ac <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    53ac:	b580      	push	{r7, lr}
    53ae:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    53b0:	4b04      	ldr	r3, [pc, #16]	; (53c4 <I2C_FLAPPER_VALVE_init+0x18>)
    53b2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    53b4:	4904      	ldr	r1, [pc, #16]	; (53c8 <I2C_FLAPPER_VALVE_init+0x1c>)
    53b6:	4805      	ldr	r0, [pc, #20]	; (53cc <I2C_FLAPPER_VALVE_init+0x20>)
    53b8:	4b05      	ldr	r3, [pc, #20]	; (53d0 <I2C_FLAPPER_VALVE_init+0x24>)
    53ba:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    53bc:	4b05      	ldr	r3, [pc, #20]	; (53d4 <I2C_FLAPPER_VALVE_init+0x28>)
    53be:	4798      	blx	r3
}
    53c0:	bf00      	nop
    53c2:	bd80      	pop	{r7, pc}
    53c4:	00005379 	.word	0x00005379
    53c8:	43000400 	.word	0x43000400
    53cc:	200025dc 	.word	0x200025dc
    53d0:	00006095 	.word	0x00006095
    53d4:	00005341 	.word	0x00005341

000053d8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    53d8:	b580      	push	{r7, lr}
    53da:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    53dc:	2100      	movs	r1, #0
    53de:	2044      	movs	r0, #68	; 0x44
    53e0:	4b11      	ldr	r3, [pc, #68]	; (5428 <SPI_HI3593_PORT_init+0x50>)
    53e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    53e4:	2102      	movs	r1, #2
    53e6:	2044      	movs	r0, #68	; 0x44
    53e8:	4b10      	ldr	r3, [pc, #64]	; (542c <SPI_HI3593_PORT_init+0x54>)
    53ea:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    53ec:	4910      	ldr	r1, [pc, #64]	; (5430 <SPI_HI3593_PORT_init+0x58>)
    53ee:	2044      	movs	r0, #68	; 0x44
    53f0:	4b10      	ldr	r3, [pc, #64]	; (5434 <SPI_HI3593_PORT_init+0x5c>)
    53f2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    53f4:	2100      	movs	r1, #0
    53f6:	2045      	movs	r0, #69	; 0x45
    53f8:	4b0b      	ldr	r3, [pc, #44]	; (5428 <SPI_HI3593_PORT_init+0x50>)
    53fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    53fc:	2102      	movs	r1, #2
    53fe:	2045      	movs	r0, #69	; 0x45
    5400:	4b0a      	ldr	r3, [pc, #40]	; (542c <SPI_HI3593_PORT_init+0x54>)
    5402:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5404:	490c      	ldr	r1, [pc, #48]	; (5438 <SPI_HI3593_PORT_init+0x60>)
    5406:	2045      	movs	r0, #69	; 0x45
    5408:	4b0a      	ldr	r3, [pc, #40]	; (5434 <SPI_HI3593_PORT_init+0x5c>)
    540a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    540c:	2101      	movs	r1, #1
    540e:	2047      	movs	r0, #71	; 0x47
    5410:	4b06      	ldr	r3, [pc, #24]	; (542c <SPI_HI3593_PORT_init+0x54>)
    5412:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5414:	2100      	movs	r1, #0
    5416:	2047      	movs	r0, #71	; 0x47
    5418:	4b08      	ldr	r3, [pc, #32]	; (543c <SPI_HI3593_PORT_init+0x64>)
    541a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    541c:	4908      	ldr	r1, [pc, #32]	; (5440 <SPI_HI3593_PORT_init+0x68>)
    541e:	2047      	movs	r0, #71	; 0x47
    5420:	4b04      	ldr	r3, [pc, #16]	; (5434 <SPI_HI3593_PORT_init+0x5c>)
    5422:	4798      	blx	r3
}
    5424:	bf00      	nop
    5426:	bd80      	pop	{r7, pc}
    5428:	00004e41 	.word	0x00004e41
    542c:	00004e09 	.word	0x00004e09
    5430:	00440002 	.word	0x00440002
    5434:	00004de9 	.word	0x00004de9
    5438:	00450002 	.word	0x00450002
    543c:	00004db5 	.word	0x00004db5
    5440:	00470002 	.word	0x00470002

00005444 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    5444:	b580      	push	{r7, lr}
    5446:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5448:	2242      	movs	r2, #66	; 0x42
    544a:	2124      	movs	r1, #36	; 0x24
    544c:	4806      	ldr	r0, [pc, #24]	; (5468 <SPI_HI3593_CLOCK_init+0x24>)
    544e:	4b07      	ldr	r3, [pc, #28]	; (546c <SPI_HI3593_CLOCK_init+0x28>)
    5450:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5452:	224a      	movs	r2, #74	; 0x4a
    5454:	2103      	movs	r1, #3
    5456:	4804      	ldr	r0, [pc, #16]	; (5468 <SPI_HI3593_CLOCK_init+0x24>)
    5458:	4b04      	ldr	r3, [pc, #16]	; (546c <SPI_HI3593_CLOCK_init+0x28>)
    545a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    545c:	4804      	ldr	r0, [pc, #16]	; (5470 <SPI_HI3593_CLOCK_init+0x2c>)
    545e:	4b05      	ldr	r3, [pc, #20]	; (5474 <SPI_HI3593_CLOCK_init+0x30>)
    5460:	4798      	blx	r3
}
    5462:	bf00      	nop
    5464:	bd80      	pop	{r7, pc}
    5466:	bf00      	nop
    5468:	40001c00 	.word	0x40001c00
    546c:	00004595 	.word	0x00004595
    5470:	40000800 	.word	0x40000800
    5474:	0000485b 	.word	0x0000485b

00005478 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    5478:	b580      	push	{r7, lr}
    547a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    547c:	4b04      	ldr	r3, [pc, #16]	; (5490 <SPI_HI3593_init+0x18>)
    547e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    5480:	4904      	ldr	r1, [pc, #16]	; (5494 <SPI_HI3593_init+0x1c>)
    5482:	4805      	ldr	r0, [pc, #20]	; (5498 <SPI_HI3593_init+0x20>)
    5484:	4b05      	ldr	r3, [pc, #20]	; (549c <SPI_HI3593_init+0x24>)
    5486:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    5488:	4b05      	ldr	r3, [pc, #20]	; (54a0 <SPI_HI3593_init+0x28>)
    548a:	4798      	blx	r3
}
    548c:	bf00      	nop
    548e:	bd80      	pop	{r7, pc}
    5490:	00005445 	.word	0x00005445
    5494:	43000800 	.word	0x43000800
    5498:	20002528 	.word	0x20002528
    549c:	0000634d 	.word	0x0000634d
    54a0:	000053d9 	.word	0x000053d9

000054a4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    54a8:	2100      	movs	r1, #0
    54aa:	2068      	movs	r0, #104	; 0x68
    54ac:	4b07      	ldr	r3, [pc, #28]	; (54cc <I2C_FANS_PORT_init+0x28>)
    54ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    54b0:	4907      	ldr	r1, [pc, #28]	; (54d0 <I2C_FANS_PORT_init+0x2c>)
    54b2:	2068      	movs	r0, #104	; 0x68
    54b4:	4b07      	ldr	r3, [pc, #28]	; (54d4 <I2C_FANS_PORT_init+0x30>)
    54b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    54b8:	2100      	movs	r1, #0
    54ba:	2069      	movs	r0, #105	; 0x69
    54bc:	4b03      	ldr	r3, [pc, #12]	; (54cc <I2C_FANS_PORT_init+0x28>)
    54be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    54c0:	4905      	ldr	r1, [pc, #20]	; (54d8 <I2C_FANS_PORT_init+0x34>)
    54c2:	2069      	movs	r0, #105	; 0x69
    54c4:	4b03      	ldr	r3, [pc, #12]	; (54d4 <I2C_FANS_PORT_init+0x30>)
    54c6:	4798      	blx	r3
}
    54c8:	bf00      	nop
    54ca:	bd80      	pop	{r7, pc}
    54cc:	00004db5 	.word	0x00004db5
    54d0:	00680002 	.word	0x00680002
    54d4:	00004de9 	.word	0x00004de9
    54d8:	00690002 	.word	0x00690002

000054dc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    54dc:	b580      	push	{r7, lr}
    54de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54e0:	2244      	movs	r2, #68	; 0x44
    54e2:	2125      	movs	r1, #37	; 0x25
    54e4:	4806      	ldr	r0, [pc, #24]	; (5500 <I2C_FANS_CLOCK_init+0x24>)
    54e6:	4b07      	ldr	r3, [pc, #28]	; (5504 <I2C_FANS_CLOCK_init+0x28>)
    54e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54ea:	224a      	movs	r2, #74	; 0x4a
    54ec:	2103      	movs	r1, #3
    54ee:	4804      	ldr	r0, [pc, #16]	; (5500 <I2C_FANS_CLOCK_init+0x24>)
    54f0:	4b04      	ldr	r3, [pc, #16]	; (5504 <I2C_FANS_CLOCK_init+0x28>)
    54f2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    54f4:	4804      	ldr	r0, [pc, #16]	; (5508 <I2C_FANS_CLOCK_init+0x2c>)
    54f6:	4b05      	ldr	r3, [pc, #20]	; (550c <I2C_FANS_CLOCK_init+0x30>)
    54f8:	4798      	blx	r3
}
    54fa:	bf00      	nop
    54fc:	bd80      	pop	{r7, pc}
    54fe:	bf00      	nop
    5500:	40001c00 	.word	0x40001c00
    5504:	00004595 	.word	0x00004595
    5508:	40000800 	.word	0x40000800
    550c:	0000487b 	.word	0x0000487b

00005510 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    5510:	b580      	push	{r7, lr}
    5512:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    5514:	4b04      	ldr	r3, [pc, #16]	; (5528 <I2C_FANS_init+0x18>)
    5516:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    5518:	4904      	ldr	r1, [pc, #16]	; (552c <I2C_FANS_init+0x1c>)
    551a:	4805      	ldr	r0, [pc, #20]	; (5530 <I2C_FANS_init+0x20>)
    551c:	4b05      	ldr	r3, [pc, #20]	; (5534 <I2C_FANS_init+0x24>)
    551e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    5520:	4b05      	ldr	r3, [pc, #20]	; (5538 <I2C_FANS_init+0x28>)
    5522:	4798      	blx	r3
}
    5524:	bf00      	nop
    5526:	bd80      	pop	{r7, pc}
    5528:	000054dd 	.word	0x000054dd
    552c:	43000c00 	.word	0x43000c00
    5530:	20002558 	.word	0x20002558
    5534:	00006095 	.word	0x00006095
    5538:	000054a5 	.word	0x000054a5

0000553c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    553c:	b580      	push	{r7, lr}
    553e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    5540:	4808      	ldr	r0, [pc, #32]	; (5564 <TIMER_USB_init+0x28>)
    5542:	4b09      	ldr	r3, [pc, #36]	; (5568 <TIMER_USB_init+0x2c>)
    5544:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5546:	2243      	movs	r2, #67	; 0x43
    5548:	2109      	movs	r1, #9
    554a:	4808      	ldr	r0, [pc, #32]	; (556c <TIMER_USB_init+0x30>)
    554c:	4b08      	ldr	r3, [pc, #32]	; (5570 <TIMER_USB_init+0x34>)
    554e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    5550:	4b08      	ldr	r3, [pc, #32]	; (5574 <TIMER_USB_init+0x38>)
    5552:	4798      	blx	r3
    5554:	4603      	mov	r3, r0
    5556:	461a      	mov	r2, r3
    5558:	4907      	ldr	r1, [pc, #28]	; (5578 <TIMER_USB_init+0x3c>)
    555a:	4808      	ldr	r0, [pc, #32]	; (557c <TIMER_USB_init+0x40>)
    555c:	4b08      	ldr	r3, [pc, #32]	; (5580 <TIMER_USB_init+0x44>)
    555e:	4798      	blx	r3
}
    5560:	bf00      	nop
    5562:	bd80      	pop	{r7, pc}
    5564:	40000800 	.word	0x40000800
    5568:	000046bb 	.word	0x000046bb
    556c:	40001c00 	.word	0x40001c00
    5570:	00004595 	.word	0x00004595
    5574:	0000c1e5 	.word	0x0000c1e5
    5578:	40003800 	.word	0x40003800
    557c:	200026a0 	.word	0x200026a0
    5580:	0000651d 	.word	0x0000651d

00005584 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5584:	b580      	push	{r7, lr}
    5586:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5588:	4808      	ldr	r0, [pc, #32]	; (55ac <TIMER_ARINC_init+0x28>)
    558a:	4b09      	ldr	r3, [pc, #36]	; (55b0 <TIMER_ARINC_init+0x2c>)
    558c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    558e:	2244      	movs	r2, #68	; 0x44
    5590:	211a      	movs	r1, #26
    5592:	4808      	ldr	r0, [pc, #32]	; (55b4 <TIMER_ARINC_init+0x30>)
    5594:	4b08      	ldr	r3, [pc, #32]	; (55b8 <TIMER_ARINC_init+0x34>)
    5596:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5598:	4b08      	ldr	r3, [pc, #32]	; (55bc <TIMER_ARINC_init+0x38>)
    559a:	4798      	blx	r3
    559c:	4603      	mov	r3, r0
    559e:	461a      	mov	r2, r3
    55a0:	4907      	ldr	r1, [pc, #28]	; (55c0 <TIMER_ARINC_init+0x3c>)
    55a2:	4808      	ldr	r0, [pc, #32]	; (55c4 <TIMER_ARINC_init+0x40>)
    55a4:	4b08      	ldr	r3, [pc, #32]	; (55c8 <TIMER_ARINC_init+0x44>)
    55a6:	4798      	blx	r3
}
    55a8:	bf00      	nop
    55aa:	bd80      	pop	{r7, pc}
    55ac:	40000800 	.word	0x40000800
    55b0:	0000477b 	.word	0x0000477b
    55b4:	40001c00 	.word	0x40001c00
    55b8:	00004595 	.word	0x00004595
    55bc:	0000c1e5 	.word	0x0000c1e5
    55c0:	4101a000 	.word	0x4101a000
    55c4:	20002680 	.word	0x20002680
    55c8:	0000651d 	.word	0x0000651d

000055cc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    55d0:	4808      	ldr	r0, [pc, #32]	; (55f4 <TIMER_MAINTENANCE_init+0x28>)
    55d2:	4b09      	ldr	r3, [pc, #36]	; (55f8 <TIMER_MAINTENANCE_init+0x2c>)
    55d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55d6:	2246      	movs	r2, #70	; 0x46
    55d8:	211e      	movs	r1, #30
    55da:	4808      	ldr	r0, [pc, #32]	; (55fc <TIMER_MAINTENANCE_init+0x30>)
    55dc:	4b08      	ldr	r3, [pc, #32]	; (5600 <TIMER_MAINTENANCE_init+0x34>)
    55de:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    55e0:	4b08      	ldr	r3, [pc, #32]	; (5604 <TIMER_MAINTENANCE_init+0x38>)
    55e2:	4798      	blx	r3
    55e4:	4603      	mov	r3, r0
    55e6:	461a      	mov	r2, r3
    55e8:	4907      	ldr	r1, [pc, #28]	; (5608 <TIMER_MAINTENANCE_init+0x3c>)
    55ea:	4808      	ldr	r0, [pc, #32]	; (560c <TIMER_MAINTENANCE_init+0x40>)
    55ec:	4b08      	ldr	r3, [pc, #32]	; (5610 <TIMER_MAINTENANCE_init+0x44>)
    55ee:	4798      	blx	r3
}
    55f0:	bf00      	nop
    55f2:	bd80      	pop	{r7, pc}
    55f4:	40000800 	.word	0x40000800
    55f8:	000047bb 	.word	0x000047bb
    55fc:	40001c00 	.word	0x40001c00
    5600:	00004595 	.word	0x00004595
    5604:	0000c1e5 	.word	0x0000c1e5
    5608:	42001400 	.word	0x42001400
    560c:	20002578 	.word	0x20002578
    5610:	0000651d 	.word	0x0000651d

00005614 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5614:	b580      	push	{r7, lr}
    5616:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5618:	4808      	ldr	r0, [pc, #32]	; (563c <TIMER_INTERFACE_init+0x28>)
    561a:	4b09      	ldr	r3, [pc, #36]	; (5640 <TIMER_INTERFACE_init+0x2c>)
    561c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    561e:	2246      	movs	r2, #70	; 0x46
    5620:	211e      	movs	r1, #30
    5622:	4808      	ldr	r0, [pc, #32]	; (5644 <TIMER_INTERFACE_init+0x30>)
    5624:	4b08      	ldr	r3, [pc, #32]	; (5648 <TIMER_INTERFACE_init+0x34>)
    5626:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5628:	4b08      	ldr	r3, [pc, #32]	; (564c <TIMER_INTERFACE_init+0x38>)
    562a:	4798      	blx	r3
    562c:	4603      	mov	r3, r0
    562e:	461a      	mov	r2, r3
    5630:	4907      	ldr	r1, [pc, #28]	; (5650 <TIMER_INTERFACE_init+0x3c>)
    5632:	4808      	ldr	r0, [pc, #32]	; (5654 <TIMER_INTERFACE_init+0x40>)
    5634:	4b08      	ldr	r3, [pc, #32]	; (5658 <TIMER_INTERFACE_init+0x44>)
    5636:	4798      	blx	r3
}
    5638:	bf00      	nop
    563a:	bd80      	pop	{r7, pc}
    563c:	40000800 	.word	0x40000800
    5640:	000047db 	.word	0x000047db
    5644:	40001c00 	.word	0x40001c00
    5648:	00004595 	.word	0x00004595
    564c:	0000c1e5 	.word	0x0000c1e5
    5650:	42001800 	.word	0x42001800
    5654:	200025bc 	.word	0x200025bc
    5658:	0000651d 	.word	0x0000651d

0000565c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    565c:	b580      	push	{r7, lr}
    565e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5660:	4808      	ldr	r0, [pc, #32]	; (5684 <TIMER_EVENT_init+0x28>)
    5662:	4b09      	ldr	r3, [pc, #36]	; (5688 <TIMER_EVENT_init+0x2c>)
    5664:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5666:	2246      	movs	r2, #70	; 0x46
    5668:	2127      	movs	r1, #39	; 0x27
    566a:	4808      	ldr	r0, [pc, #32]	; (568c <TIMER_EVENT_init+0x30>)
    566c:	4b08      	ldr	r3, [pc, #32]	; (5690 <TIMER_EVENT_init+0x34>)
    566e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5670:	4b08      	ldr	r3, [pc, #32]	; (5694 <TIMER_EVENT_init+0x38>)
    5672:	4798      	blx	r3
    5674:	4603      	mov	r3, r0
    5676:	461a      	mov	r2, r3
    5678:	4907      	ldr	r1, [pc, #28]	; (5698 <TIMER_EVENT_init+0x3c>)
    567a:	4808      	ldr	r0, [pc, #32]	; (569c <TIMER_EVENT_init+0x40>)
    567c:	4b08      	ldr	r3, [pc, #32]	; (56a0 <TIMER_EVENT_init+0x44>)
    567e:	4798      	blx	r3
}
    5680:	bf00      	nop
    5682:	bd80      	pop	{r7, pc}
    5684:	40000800 	.word	0x40000800
    5688:	0000489b 	.word	0x0000489b
    568c:	40001c00 	.word	0x40001c00
    5690:	00004595 	.word	0x00004595
    5694:	0000c1e5 	.word	0x0000c1e5
    5698:	43001400 	.word	0x43001400
    569c:	2000259c 	.word	0x2000259c
    56a0:	0000651d 	.word	0x0000651d

000056a4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    56a4:	b480      	push	{r7}
    56a6:	af00      	add	r7, sp, #0
}
    56a8:	bf00      	nop
    56aa:	46bd      	mov	sp, r7
    56ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b0:	4770      	bx	lr
	...

000056b4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    56b8:	4804      	ldr	r0, [pc, #16]	; (56cc <LIVE_PULSE_CLOCK_init+0x18>)
    56ba:	4b05      	ldr	r3, [pc, #20]	; (56d0 <LIVE_PULSE_CLOCK_init+0x1c>)
    56bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56be:	2240      	movs	r2, #64	; 0x40
    56c0:	2127      	movs	r1, #39	; 0x27
    56c2:	4804      	ldr	r0, [pc, #16]	; (56d4 <LIVE_PULSE_CLOCK_init+0x20>)
    56c4:	4b04      	ldr	r3, [pc, #16]	; (56d8 <LIVE_PULSE_CLOCK_init+0x24>)
    56c6:	4798      	blx	r3
}
    56c8:	bf00      	nop
    56ca:	bd80      	pop	{r7, pc}
    56cc:	40000800 	.word	0x40000800
    56d0:	000048bb 	.word	0x000048bb
    56d4:	40001c00 	.word	0x40001c00
    56d8:	00004595 	.word	0x00004595

000056dc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    56dc:	b580      	push	{r7, lr}
    56de:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    56e0:	4b06      	ldr	r3, [pc, #24]	; (56fc <LIVE_PULSE_init+0x20>)
    56e2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    56e4:	4b06      	ldr	r3, [pc, #24]	; (5700 <LIVE_PULSE_init+0x24>)
    56e6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    56e8:	4b06      	ldr	r3, [pc, #24]	; (5704 <LIVE_PULSE_init+0x28>)
    56ea:	4798      	blx	r3
    56ec:	4603      	mov	r3, r0
    56ee:	461a      	mov	r2, r3
    56f0:	4905      	ldr	r1, [pc, #20]	; (5708 <LIVE_PULSE_init+0x2c>)
    56f2:	4806      	ldr	r0, [pc, #24]	; (570c <LIVE_PULSE_init+0x30>)
    56f4:	4b06      	ldr	r3, [pc, #24]	; (5710 <LIVE_PULSE_init+0x34>)
    56f6:	4798      	blx	r3
}
    56f8:	bf00      	nop
    56fa:	bd80      	pop	{r7, pc}
    56fc:	000056b5 	.word	0x000056b5
    5700:	000056a5 	.word	0x000056a5
    5704:	0000c1f9 	.word	0x0000c1f9
    5708:	43001800 	.word	0x43001800
    570c:	200025fc 	.word	0x200025fc
    5710:	00006191 	.word	0x00006191

00005714 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5714:	b580      	push	{r7, lr}
    5716:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5718:	4804      	ldr	r0, [pc, #16]	; (572c <TIMER_HVAC_CLOCK_init+0x18>)
    571a:	4b05      	ldr	r3, [pc, #20]	; (5730 <TIMER_HVAC_CLOCK_init+0x1c>)
    571c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    571e:	2244      	movs	r2, #68	; 0x44
    5720:	2119      	movs	r1, #25
    5722:	4804      	ldr	r0, [pc, #16]	; (5734 <TIMER_HVAC_CLOCK_init+0x20>)
    5724:	4b04      	ldr	r3, [pc, #16]	; (5738 <TIMER_HVAC_CLOCK_init+0x24>)
    5726:	4798      	blx	r3
}
    5728:	bf00      	nop
    572a:	bd80      	pop	{r7, pc}
    572c:	40000800 	.word	0x40000800
    5730:	0000473b 	.word	0x0000473b
    5734:	40001c00 	.word	0x40001c00
    5738:	00004595 	.word	0x00004595

0000573c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    573c:	b580      	push	{r7, lr}
    573e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    5740:	4b05      	ldr	r3, [pc, #20]	; (5758 <TIMER_HVAC_init+0x1c>)
    5742:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    5744:	4b05      	ldr	r3, [pc, #20]	; (575c <TIMER_HVAC_init+0x20>)
    5746:	4798      	blx	r3
    5748:	4603      	mov	r3, r0
    574a:	461a      	mov	r2, r3
    574c:	4904      	ldr	r1, [pc, #16]	; (5760 <TIMER_HVAC_init+0x24>)
    574e:	4805      	ldr	r0, [pc, #20]	; (5764 <TIMER_HVAC_init+0x28>)
    5750:	4b05      	ldr	r3, [pc, #20]	; (5768 <TIMER_HVAC_init+0x2c>)
    5752:	4798      	blx	r3
}
    5754:	bf00      	nop
    5756:	bd80      	pop	{r7, pc}
    5758:	00005715 	.word	0x00005715
    575c:	0000b5c9 	.word	0x0000b5c9
    5760:	41016000 	.word	0x41016000
    5764:	200026c0 	.word	0x200026c0
    5768:	0000651d 	.word	0x0000651d

0000576c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    576c:	b580      	push	{r7, lr}
    576e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    5770:	4804      	ldr	r0, [pc, #16]	; (5784 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    5772:	4b05      	ldr	r3, [pc, #20]	; (5788 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    5774:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5776:	2244      	movs	r2, #68	; 0x44
    5778:	2119      	movs	r1, #25
    577a:	4804      	ldr	r0, [pc, #16]	; (578c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    577c:	4b04      	ldr	r3, [pc, #16]	; (5790 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    577e:	4798      	blx	r3
}
    5780:	bf00      	nop
    5782:	bd80      	pop	{r7, pc}
    5784:	40000800 	.word	0x40000800
    5788:	0000475b 	.word	0x0000475b
    578c:	40001c00 	.word	0x40001c00
    5790:	00004595 	.word	0x00004595

00005794 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5794:	b580      	push	{r7, lr}
    5796:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5798:	4b05      	ldr	r3, [pc, #20]	; (57b0 <TIMER_TEMPERATURES_init+0x1c>)
    579a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    579c:	4b05      	ldr	r3, [pc, #20]	; (57b4 <TIMER_TEMPERATURES_init+0x20>)
    579e:	4798      	blx	r3
    57a0:	4603      	mov	r3, r0
    57a2:	461a      	mov	r2, r3
    57a4:	4904      	ldr	r1, [pc, #16]	; (57b8 <TIMER_TEMPERATURES_init+0x24>)
    57a6:	4805      	ldr	r0, [pc, #20]	; (57bc <TIMER_TEMPERATURES_init+0x28>)
    57a8:	4b05      	ldr	r3, [pc, #20]	; (57c0 <TIMER_TEMPERATURES_init+0x2c>)
    57aa:	4798      	blx	r3
}
    57ac:	bf00      	nop
    57ae:	bd80      	pop	{r7, pc}
    57b0:	0000576d 	.word	0x0000576d
    57b4:	0000b5c9 	.word	0x0000b5c9
    57b8:	41018000 	.word	0x41018000
    57bc:	20002508 	.word	0x20002508
    57c0:	0000651d 	.word	0x0000651d

000057c4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    57c4:	b580      	push	{r7, lr}
    57c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    57c8:	4804      	ldr	r0, [pc, #16]	; (57dc <TIMER_CCU_CLOCK_init+0x18>)
    57ca:	4b05      	ldr	r3, [pc, #20]	; (57e0 <TIMER_CCU_CLOCK_init+0x1c>)
    57cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    57ce:	2240      	movs	r2, #64	; 0x40
    57d0:	211d      	movs	r1, #29
    57d2:	4804      	ldr	r0, [pc, #16]	; (57e4 <TIMER_CCU_CLOCK_init+0x20>)
    57d4:	4b04      	ldr	r3, [pc, #16]	; (57e8 <TIMER_CCU_CLOCK_init+0x24>)
    57d6:	4798      	blx	r3
}
    57d8:	bf00      	nop
    57da:	bd80      	pop	{r7, pc}
    57dc:	40000800 	.word	0x40000800
    57e0:	0000479b 	.word	0x0000479b
    57e4:	40001c00 	.word	0x40001c00
    57e8:	00004595 	.word	0x00004595

000057ec <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    57ec:	b580      	push	{r7, lr}
    57ee:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    57f0:	4b05      	ldr	r3, [pc, #20]	; (5808 <TIMER_CCU_init+0x1c>)
    57f2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    57f4:	4b05      	ldr	r3, [pc, #20]	; (580c <TIMER_CCU_init+0x20>)
    57f6:	4798      	blx	r3
    57f8:	4603      	mov	r3, r0
    57fa:	461a      	mov	r2, r3
    57fc:	4904      	ldr	r1, [pc, #16]	; (5810 <TIMER_CCU_init+0x24>)
    57fe:	4805      	ldr	r0, [pc, #20]	; (5814 <TIMER_CCU_init+0x28>)
    5800:	4b05      	ldr	r3, [pc, #20]	; (5818 <TIMER_CCU_init+0x2c>)
    5802:	4798      	blx	r3
}
    5804:	bf00      	nop
    5806:	bd80      	pop	{r7, pc}
    5808:	000057c5 	.word	0x000057c5
    580c:	0000b5c9 	.word	0x0000b5c9
    5810:	42000c00 	.word	0x42000c00
    5814:	20002618 	.word	0x20002618
    5818:	0000651d 	.word	0x0000651d

0000581c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    581c:	b580      	push	{r7, lr}
    581e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5820:	2102      	movs	r1, #2
    5822:	2018      	movs	r0, #24
    5824:	4b0f      	ldr	r3, [pc, #60]	; (5864 <CDCUSB_PORT_init+0x48>)
    5826:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5828:	2100      	movs	r1, #0
    582a:	2018      	movs	r0, #24
    582c:	4b0e      	ldr	r3, [pc, #56]	; (5868 <CDCUSB_PORT_init+0x4c>)
    582e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5830:	2100      	movs	r1, #0
    5832:	2018      	movs	r0, #24
    5834:	4b0d      	ldr	r3, [pc, #52]	; (586c <CDCUSB_PORT_init+0x50>)
    5836:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5838:	490d      	ldr	r1, [pc, #52]	; (5870 <CDCUSB_PORT_init+0x54>)
    583a:	2018      	movs	r0, #24
    583c:	4b0d      	ldr	r3, [pc, #52]	; (5874 <CDCUSB_PORT_init+0x58>)
    583e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5840:	2102      	movs	r1, #2
    5842:	2019      	movs	r0, #25
    5844:	4b07      	ldr	r3, [pc, #28]	; (5864 <CDCUSB_PORT_init+0x48>)
    5846:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5848:	2100      	movs	r1, #0
    584a:	2019      	movs	r0, #25
    584c:	4b06      	ldr	r3, [pc, #24]	; (5868 <CDCUSB_PORT_init+0x4c>)
    584e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5850:	2100      	movs	r1, #0
    5852:	2019      	movs	r0, #25
    5854:	4b05      	ldr	r3, [pc, #20]	; (586c <CDCUSB_PORT_init+0x50>)
    5856:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5858:	4907      	ldr	r1, [pc, #28]	; (5878 <CDCUSB_PORT_init+0x5c>)
    585a:	2019      	movs	r0, #25
    585c:	4b05      	ldr	r3, [pc, #20]	; (5874 <CDCUSB_PORT_init+0x58>)
    585e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5860:	bf00      	nop
    5862:	bd80      	pop	{r7, pc}
    5864:	00004e09 	.word	0x00004e09
    5868:	00004e41 	.word	0x00004e41
    586c:	00004db5 	.word	0x00004db5
    5870:	00180007 	.word	0x00180007
    5874:	00004de9 	.word	0x00004de9
    5878:	00190007 	.word	0x00190007

0000587c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    587c:	b580      	push	{r7, lr}
    587e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5880:	2242      	movs	r2, #66	; 0x42
    5882:	210a      	movs	r1, #10
    5884:	4805      	ldr	r0, [pc, #20]	; (589c <CDCUSB_CLOCK_init+0x20>)
    5886:	4b06      	ldr	r3, [pc, #24]	; (58a0 <CDCUSB_CLOCK_init+0x24>)
    5888:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    588a:	4806      	ldr	r0, [pc, #24]	; (58a4 <CDCUSB_CLOCK_init+0x28>)
    588c:	4b06      	ldr	r3, [pc, #24]	; (58a8 <CDCUSB_CLOCK_init+0x2c>)
    588e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5890:	4804      	ldr	r0, [pc, #16]	; (58a4 <CDCUSB_CLOCK_init+0x28>)
    5892:	4b06      	ldr	r3, [pc, #24]	; (58ac <CDCUSB_CLOCK_init+0x30>)
    5894:	4798      	blx	r3
}
    5896:	bf00      	nop
    5898:	bd80      	pop	{r7, pc}
    589a:	bf00      	nop
    589c:	40001c00 	.word	0x40001c00
    58a0:	00004595 	.word	0x00004595
    58a4:	40000800 	.word	0x40000800
    58a8:	000045bb 	.word	0x000045bb
    58ac:	000046db 	.word	0x000046db

000058b0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    58b0:	b580      	push	{r7, lr}
    58b2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    58b4:	4b03      	ldr	r3, [pc, #12]	; (58c4 <CDCUSB_init+0x14>)
    58b6:	4798      	blx	r3
	usb_d_init();
    58b8:	4b03      	ldr	r3, [pc, #12]	; (58c8 <CDCUSB_init+0x18>)
    58ba:	4798      	blx	r3
	CDCUSB_PORT_init();
    58bc:	4b03      	ldr	r3, [pc, #12]	; (58cc <CDCUSB_init+0x1c>)
    58be:	4798      	blx	r3
}
    58c0:	bf00      	nop
    58c2:	bd80      	pop	{r7, pc}
    58c4:	0000587d 	.word	0x0000587d
    58c8:	00006d0d 	.word	0x00006d0d
    58cc:	0000581d 	.word	0x0000581d

000058d0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    58d0:	b580      	push	{r7, lr}
    58d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    58d4:	4802      	ldr	r0, [pc, #8]	; (58e0 <WATCHDOG_CLOCK_init+0x10>)
    58d6:	4b03      	ldr	r3, [pc, #12]	; (58e4 <WATCHDOG_CLOCK_init+0x14>)
    58d8:	4798      	blx	r3
}
    58da:	bf00      	nop
    58dc:	bd80      	pop	{r7, pc}
    58de:	bf00      	nop
    58e0:	40000800 	.word	0x40000800
    58e4:	0000463b 	.word	0x0000463b

000058e8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    58e8:	b580      	push	{r7, lr}
    58ea:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    58ec:	4b03      	ldr	r3, [pc, #12]	; (58fc <WATCHDOG_init+0x14>)
    58ee:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    58f0:	4903      	ldr	r1, [pc, #12]	; (5900 <WATCHDOG_init+0x18>)
    58f2:	4804      	ldr	r0, [pc, #16]	; (5904 <WATCHDOG_init+0x1c>)
    58f4:	4b04      	ldr	r3, [pc, #16]	; (5908 <WATCHDOG_init+0x20>)
    58f6:	4798      	blx	r3
}
    58f8:	bf00      	nop
    58fa:	bd80      	pop	{r7, pc}
    58fc:	000058d1 	.word	0x000058d1
    5900:	40002000 	.word	0x40002000
    5904:	20002700 	.word	0x20002700
    5908:	00004e89 	.word	0x00004e89

0000590c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    590c:	b580      	push	{r7, lr}
    590e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5910:	4904      	ldr	r1, [pc, #16]	; (5924 <CAN_CCU_PORT_init+0x18>)
    5912:	202d      	movs	r0, #45	; 0x2d
    5914:	4b04      	ldr	r3, [pc, #16]	; (5928 <CAN_CCU_PORT_init+0x1c>)
    5916:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5918:	4904      	ldr	r1, [pc, #16]	; (592c <CAN_CCU_PORT_init+0x20>)
    591a:	202c      	movs	r0, #44	; 0x2c
    591c:	4b02      	ldr	r3, [pc, #8]	; (5928 <CAN_CCU_PORT_init+0x1c>)
    591e:	4798      	blx	r3
}
    5920:	bf00      	nop
    5922:	bd80      	pop	{r7, pc}
    5924:	002d0007 	.word	0x002d0007
    5928:	00004de9 	.word	0x00004de9
    592c:	002c0007 	.word	0x002c0007

00005930 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5930:	b580      	push	{r7, lr}
    5932:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5934:	4807      	ldr	r0, [pc, #28]	; (5954 <CAN_CCU_init+0x24>)
    5936:	4b08      	ldr	r3, [pc, #32]	; (5958 <CAN_CCU_init+0x28>)
    5938:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    593a:	2249      	movs	r2, #73	; 0x49
    593c:	211c      	movs	r1, #28
    593e:	4807      	ldr	r0, [pc, #28]	; (595c <CAN_CCU_init+0x2c>)
    5940:	4b07      	ldr	r3, [pc, #28]	; (5960 <CAN_CCU_init+0x30>)
    5942:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5944:	4907      	ldr	r1, [pc, #28]	; (5964 <CAN_CCU_init+0x34>)
    5946:	4808      	ldr	r0, [pc, #32]	; (5968 <CAN_CCU_init+0x38>)
    5948:	4b08      	ldr	r3, [pc, #32]	; (596c <CAN_CCU_init+0x3c>)
    594a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    594c:	4b08      	ldr	r3, [pc, #32]	; (5970 <CAN_CCU_init+0x40>)
    594e:	4798      	blx	r3
}
    5950:	bf00      	nop
    5952:	bd80      	pop	{r7, pc}
    5954:	40000800 	.word	0x40000800
    5958:	000045fb 	.word	0x000045fb
    595c:	40001c00 	.word	0x40001c00
    5960:	00004595 	.word	0x00004595
    5964:	42000400 	.word	0x42000400
    5968:	20002658 	.word	0x20002658
    596c:	00005bd5 	.word	0x00005bd5
    5970:	0000590d 	.word	0x0000590d

00005974 <system_init>:

void system_init(void)
{
    5974:	b580      	push	{r7, lr}
    5976:	af00      	add	r7, sp, #0
	init_mcu();
    5978:	4b5f      	ldr	r3, [pc, #380]	; (5af8 <system_init+0x184>)
    597a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    597c:	2100      	movs	r1, #0
    597e:	2007      	movs	r0, #7
    5980:	4b5e      	ldr	r3, [pc, #376]	; (5afc <system_init+0x188>)
    5982:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    5984:	2102      	movs	r1, #2
    5986:	2007      	movs	r0, #7
    5988:	4b5d      	ldr	r3, [pc, #372]	; (5b00 <system_init+0x18c>)
    598a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    598c:	f04f 31ff 	mov.w	r1, #4294967295
    5990:	2007      	movs	r0, #7
    5992:	4b5c      	ldr	r3, [pc, #368]	; (5b04 <system_init+0x190>)
    5994:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5996:	2101      	movs	r1, #1
    5998:	200f      	movs	r0, #15
    599a:	4b58      	ldr	r3, [pc, #352]	; (5afc <system_init+0x188>)
    599c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    599e:	2102      	movs	r1, #2
    59a0:	200f      	movs	r0, #15
    59a2:	4b57      	ldr	r3, [pc, #348]	; (5b00 <system_init+0x18c>)
    59a4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    59a6:	f04f 31ff 	mov.w	r1, #4294967295
    59aa:	200f      	movs	r0, #15
    59ac:	4b55      	ldr	r3, [pc, #340]	; (5b04 <system_init+0x190>)
    59ae:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    59b0:	2101      	movs	r1, #1
    59b2:	2013      	movs	r0, #19
    59b4:	4b51      	ldr	r3, [pc, #324]	; (5afc <system_init+0x188>)
    59b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    59b8:	2102      	movs	r1, #2
    59ba:	2013      	movs	r0, #19
    59bc:	4b50      	ldr	r3, [pc, #320]	; (5b00 <system_init+0x18c>)
    59be:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    59c0:	f04f 31ff 	mov.w	r1, #4294967295
    59c4:	2013      	movs	r0, #19
    59c6:	4b4f      	ldr	r3, [pc, #316]	; (5b04 <system_init+0x190>)
    59c8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    59ca:	2101      	movs	r1, #1
    59cc:	201b      	movs	r0, #27
    59ce:	4b4b      	ldr	r3, [pc, #300]	; (5afc <system_init+0x188>)
    59d0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    59d2:	2102      	movs	r1, #2
    59d4:	201b      	movs	r0, #27
    59d6:	4b4a      	ldr	r3, [pc, #296]	; (5b00 <system_init+0x18c>)
    59d8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    59da:	f04f 31ff 	mov.w	r1, #4294967295
    59de:	201b      	movs	r0, #27
    59e0:	4b48      	ldr	r3, [pc, #288]	; (5b04 <system_init+0x190>)
    59e2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    59e4:	2101      	movs	r1, #1
    59e6:	2027      	movs	r0, #39	; 0x27
    59e8:	4b44      	ldr	r3, [pc, #272]	; (5afc <system_init+0x188>)
    59ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    59ec:	2102      	movs	r1, #2
    59ee:	2027      	movs	r0, #39	; 0x27
    59f0:	4b43      	ldr	r3, [pc, #268]	; (5b00 <system_init+0x18c>)
    59f2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    59f4:	f04f 31ff 	mov.w	r1, #4294967295
    59f8:	2027      	movs	r0, #39	; 0x27
    59fa:	4b42      	ldr	r3, [pc, #264]	; (5b04 <system_init+0x190>)
    59fc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    59fe:	2101      	movs	r1, #1
    5a00:	203d      	movs	r0, #61	; 0x3d
    5a02:	4b3e      	ldr	r3, [pc, #248]	; (5afc <system_init+0x188>)
    5a04:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5a06:	2102      	movs	r1, #2
    5a08:	203d      	movs	r0, #61	; 0x3d
    5a0a:	4b3d      	ldr	r3, [pc, #244]	; (5b00 <system_init+0x18c>)
    5a0c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5a0e:	f04f 31ff 	mov.w	r1, #4294967295
    5a12:	203d      	movs	r0, #61	; 0x3d
    5a14:	4b3b      	ldr	r3, [pc, #236]	; (5b04 <system_init+0x190>)
    5a16:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5a18:	2101      	movs	r1, #1
    5a1a:	203f      	movs	r0, #63	; 0x3f
    5a1c:	4b38      	ldr	r3, [pc, #224]	; (5b00 <system_init+0x18c>)
    5a1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5a20:	2101      	movs	r1, #1
    5a22:	203f      	movs	r0, #63	; 0x3f
    5a24:	4b38      	ldr	r3, [pc, #224]	; (5b08 <system_init+0x194>)
    5a26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5a28:	f04f 31ff 	mov.w	r1, #4294967295
    5a2c:	203f      	movs	r0, #63	; 0x3f
    5a2e:	4b35      	ldr	r3, [pc, #212]	; (5b04 <system_init+0x190>)
    5a30:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5a32:	2100      	movs	r1, #0
    5a34:	204d      	movs	r0, #77	; 0x4d
    5a36:	4b31      	ldr	r3, [pc, #196]	; (5afc <system_init+0x188>)
    5a38:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5a3a:	2102      	movs	r1, #2
    5a3c:	204d      	movs	r0, #77	; 0x4d
    5a3e:	4b30      	ldr	r3, [pc, #192]	; (5b00 <system_init+0x18c>)
    5a40:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5a42:	f04f 31ff 	mov.w	r1, #4294967295
    5a46:	204d      	movs	r0, #77	; 0x4d
    5a48:	4b2e      	ldr	r3, [pc, #184]	; (5b04 <system_init+0x190>)
    5a4a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5a4c:	2101      	movs	r1, #1
    5a4e:	204e      	movs	r0, #78	; 0x4e
    5a50:	4b2a      	ldr	r3, [pc, #168]	; (5afc <system_init+0x188>)
    5a52:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5a54:	2102      	movs	r1, #2
    5a56:	204e      	movs	r0, #78	; 0x4e
    5a58:	4b29      	ldr	r3, [pc, #164]	; (5b00 <system_init+0x18c>)
    5a5a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5a5c:	f04f 31ff 	mov.w	r1, #4294967295
    5a60:	204e      	movs	r0, #78	; 0x4e
    5a62:	4b28      	ldr	r3, [pc, #160]	; (5b04 <system_init+0x190>)
    5a64:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5a66:	2100      	movs	r1, #0
    5a68:	204f      	movs	r0, #79	; 0x4f
    5a6a:	4b24      	ldr	r3, [pc, #144]	; (5afc <system_init+0x188>)
    5a6c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5a6e:	2102      	movs	r1, #2
    5a70:	204f      	movs	r0, #79	; 0x4f
    5a72:	4b23      	ldr	r3, [pc, #140]	; (5b00 <system_init+0x18c>)
    5a74:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5a76:	f04f 31ff 	mov.w	r1, #4294967295
    5a7a:	204f      	movs	r0, #79	; 0x4f
    5a7c:	4b21      	ldr	r3, [pc, #132]	; (5b04 <system_init+0x190>)
    5a7e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5a80:	2100      	movs	r1, #0
    5a82:	2052      	movs	r0, #82	; 0x52
    5a84:	4b1d      	ldr	r3, [pc, #116]	; (5afc <system_init+0x188>)
    5a86:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5a88:	2102      	movs	r1, #2
    5a8a:	2052      	movs	r0, #82	; 0x52
    5a8c:	4b1c      	ldr	r3, [pc, #112]	; (5b00 <system_init+0x18c>)
    5a8e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5a90:	f04f 31ff 	mov.w	r1, #4294967295
    5a94:	2052      	movs	r0, #82	; 0x52
    5a96:	4b1b      	ldr	r3, [pc, #108]	; (5b04 <system_init+0x190>)
    5a98:	4798      	blx	r3

	CRC_CALC_init();
    5a9a:	4b1c      	ldr	r3, [pc, #112]	; (5b0c <system_init+0x198>)
    5a9c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5a9e:	4b1c      	ldr	r3, [pc, #112]	; (5b10 <system_init+0x19c>)
    5aa0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5aa2:	4b1c      	ldr	r3, [pc, #112]	; (5b14 <system_init+0x1a0>)
    5aa4:	4798      	blx	r3

	QSPI_N25Q256_init();
    5aa6:	4b1c      	ldr	r3, [pc, #112]	; (5b18 <system_init+0x1a4>)
    5aa8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5aaa:	4b1c      	ldr	r3, [pc, #112]	; (5b1c <system_init+0x1a8>)
    5aac:	4798      	blx	r3

	I2C_HEATERS_init();
    5aae:	4b1c      	ldr	r3, [pc, #112]	; (5b20 <system_init+0x1ac>)
    5ab0:	4798      	blx	r3

	SPI_TEMP_init();
    5ab2:	4b1c      	ldr	r3, [pc, #112]	; (5b24 <system_init+0x1b0>)
    5ab4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    5ab6:	4b1c      	ldr	r3, [pc, #112]	; (5b28 <system_init+0x1b4>)
    5ab8:	4798      	blx	r3

	SPI_HI3593_init();
    5aba:	4b1c      	ldr	r3, [pc, #112]	; (5b2c <system_init+0x1b8>)
    5abc:	4798      	blx	r3

	I2C_FANS_init();
    5abe:	4b1c      	ldr	r3, [pc, #112]	; (5b30 <system_init+0x1bc>)
    5ac0:	4798      	blx	r3

	TIMER_USB_init();
    5ac2:	4b1c      	ldr	r3, [pc, #112]	; (5b34 <system_init+0x1c0>)
    5ac4:	4798      	blx	r3
	TIMER_ARINC_init();
    5ac6:	4b1c      	ldr	r3, [pc, #112]	; (5b38 <system_init+0x1c4>)
    5ac8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    5aca:	4b1c      	ldr	r3, [pc, #112]	; (5b3c <system_init+0x1c8>)
    5acc:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5ace:	4b1c      	ldr	r3, [pc, #112]	; (5b40 <system_init+0x1cc>)
    5ad0:	4798      	blx	r3
	TIMER_EVENT_init();
    5ad2:	4b1c      	ldr	r3, [pc, #112]	; (5b44 <system_init+0x1d0>)
    5ad4:	4798      	blx	r3
	LIVE_PULSE_init();
    5ad6:	4b1c      	ldr	r3, [pc, #112]	; (5b48 <system_init+0x1d4>)
    5ad8:	4798      	blx	r3

	TIMER_HVAC_init();
    5ada:	4b1c      	ldr	r3, [pc, #112]	; (5b4c <system_init+0x1d8>)
    5adc:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    5ade:	4b1c      	ldr	r3, [pc, #112]	; (5b50 <system_init+0x1dc>)
    5ae0:	4798      	blx	r3

	TIMER_CCU_init();
    5ae2:	4b1c      	ldr	r3, [pc, #112]	; (5b54 <system_init+0x1e0>)
    5ae4:	4798      	blx	r3

	CDCUSB_init();
    5ae6:	4b1c      	ldr	r3, [pc, #112]	; (5b58 <system_init+0x1e4>)
    5ae8:	4798      	blx	r3

	WATCHDOG_init();
    5aea:	4b1c      	ldr	r3, [pc, #112]	; (5b5c <system_init+0x1e8>)
    5aec:	4798      	blx	r3
	CAN_CCU_init();
    5aee:	4b1c      	ldr	r3, [pc, #112]	; (5b60 <system_init+0x1ec>)
    5af0:	4798      	blx	r3
}
    5af2:	bf00      	nop
    5af4:	bd80      	pop	{r7, pc}
    5af6:	bf00      	nop
    5af8:	00004e79 	.word	0x00004e79
    5afc:	00004e41 	.word	0x00004e41
    5b00:	00004e09 	.word	0x00004e09
    5b04:	00004de9 	.word	0x00004de9
    5b08:	00004db5 	.word	0x00004db5
    5b0c:	00004ed9 	.word	0x00004ed9
    5b10:	00004f05 	.word	0x00004f05
    5b14:	0000502d 	.word	0x0000502d
    5b18:	00005175 	.word	0x00005175
    5b1c:	000051b9 	.word	0x000051b9
    5b20:	00005249 	.word	0x00005249
    5b24:	00005315 	.word	0x00005315
    5b28:	000053ad 	.word	0x000053ad
    5b2c:	00005479 	.word	0x00005479
    5b30:	00005511 	.word	0x00005511
    5b34:	0000553d 	.word	0x0000553d
    5b38:	00005585 	.word	0x00005585
    5b3c:	000055cd 	.word	0x000055cd
    5b40:	00005615 	.word	0x00005615
    5b44:	0000565d 	.word	0x0000565d
    5b48:	000056dd 	.word	0x000056dd
    5b4c:	0000573d 	.word	0x0000573d
    5b50:	00005795 	.word	0x00005795
    5b54:	000057ed 	.word	0x000057ed
    5b58:	000058b1 	.word	0x000058b1
    5b5c:	000058e9 	.word	0x000058e9
    5b60:	00005931 	.word	0x00005931

00005b64 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b084      	sub	sp, #16
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
    5b6c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    5b6e:	2300      	movs	r3, #0
    5b70:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	2b00      	cmp	r3, #0
    5b76:	bf14      	ite	ne
    5b78:	2301      	movne	r3, #1
    5b7a:	2300      	moveq	r3, #0
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5b82:	4911      	ldr	r1, [pc, #68]	; (5bc8 <calendar_init+0x64>)
    5b84:	4618      	mov	r0, r3
    5b86:	4b11      	ldr	r3, [pc, #68]	; (5bcc <calendar_init+0x68>)
    5b88:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	681a      	ldr	r2, [r3, #0]
    5b8e:	683b      	ldr	r3, [r7, #0]
    5b90:	429a      	cmp	r2, r3
    5b92:	d101      	bne.n	5b98 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    5b94:	2300      	movs	r3, #0
    5b96:	e013      	b.n	5bc0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d002      	beq.n	5ba6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    5ba0:	f06f 0311 	mvn.w	r3, #17
    5ba4:	e00c      	b.n	5bc0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	683a      	ldr	r2, [r7, #0]
    5baa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	4618      	mov	r0, r3
    5bb0:	4b07      	ldr	r3, [pc, #28]	; (5bd0 <calendar_init+0x6c>)
    5bb2:	4798      	blx	r3
    5bb4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    5bbc:	619a      	str	r2, [r3, #24]

	return ret;
    5bbe:	68fb      	ldr	r3, [r7, #12]
}
    5bc0:	4618      	mov	r0, r3
    5bc2:	3710      	adds	r7, #16
    5bc4:	46bd      	mov	sp, r7
    5bc6:	bd80      	pop	{r7, pc}
    5bc8:	000128e0 	.word	0x000128e0
    5bcc:	00007261 	.word	0x00007261
    5bd0:	00009b99 	.word	0x00009b99

00005bd4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    5bd4:	b580      	push	{r7, lr}
    5bd6:	b084      	sub	sp, #16
    5bd8:	af00      	add	r7, sp, #0
    5bda:	6078      	str	r0, [r7, #4]
    5bdc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	2b00      	cmp	r3, #0
    5be2:	d004      	beq.n	5bee <can_async_init+0x1a>
    5be4:	683b      	ldr	r3, [r7, #0]
    5be6:	2b00      	cmp	r3, #0
    5be8:	d001      	beq.n	5bee <can_async_init+0x1a>
    5bea:	2301      	movs	r3, #1
    5bec:	e000      	b.n	5bf0 <can_async_init+0x1c>
    5bee:	2300      	movs	r3, #0
    5bf0:	f003 0301 	and.w	r3, r3, #1
    5bf4:	b2db      	uxtb	r3, r3
    5bf6:	2241      	movs	r2, #65	; 0x41
    5bf8:	490e      	ldr	r1, [pc, #56]	; (5c34 <can_async_init+0x60>)
    5bfa:	4618      	mov	r0, r3
    5bfc:	4b0e      	ldr	r3, [pc, #56]	; (5c38 <can_async_init+0x64>)
    5bfe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	6839      	ldr	r1, [r7, #0]
    5c04:	4618      	mov	r0, r3
    5c06:	4b0d      	ldr	r3, [pc, #52]	; (5c3c <can_async_init+0x68>)
    5c08:	4798      	blx	r3
    5c0a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    5c0c:	68fb      	ldr	r3, [r7, #12]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d001      	beq.n	5c16 <can_async_init+0x42>
		return rc;
    5c12:	68fb      	ldr	r3, [r7, #12]
    5c14:	e009      	b.n	5c2a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	4a09      	ldr	r2, [pc, #36]	; (5c40 <can_async_init+0x6c>)
    5c1a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    5c1c:	687b      	ldr	r3, [r7, #4]
    5c1e:	4a09      	ldr	r2, [pc, #36]	; (5c44 <can_async_init+0x70>)
    5c20:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	4a08      	ldr	r2, [pc, #32]	; (5c48 <can_async_init+0x74>)
    5c26:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5c28:	2300      	movs	r3, #0
}
    5c2a:	4618      	mov	r0, r3
    5c2c:	3710      	adds	r7, #16
    5c2e:	46bd      	mov	sp, r7
    5c30:	bd80      	pop	{r7, pc}
    5c32:	bf00      	nop
    5c34:	000128fc 	.word	0x000128fc
    5c38:	00007261 	.word	0x00007261
    5c3c:	000079c9 	.word	0x000079c9
    5c40:	00005de9 	.word	0x00005de9
    5c44:	00005e0d 	.word	0x00005e0d
    5c48:	00005e31 	.word	0x00005e31

00005c4c <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b082      	sub	sp, #8
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	2b00      	cmp	r3, #0
    5c58:	bf14      	ite	ne
    5c5a:	2301      	movne	r3, #1
    5c5c:	2300      	moveq	r3, #0
    5c5e:	b2db      	uxtb	r3, r3
    5c60:	225c      	movs	r2, #92	; 0x5c
    5c62:	4906      	ldr	r1, [pc, #24]	; (5c7c <can_async_enable+0x30>)
    5c64:	4618      	mov	r0, r3
    5c66:	4b06      	ldr	r3, [pc, #24]	; (5c80 <can_async_enable+0x34>)
    5c68:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	4618      	mov	r0, r3
    5c6e:	4b05      	ldr	r3, [pc, #20]	; (5c84 <can_async_enable+0x38>)
    5c70:	4798      	blx	r3
    5c72:	4603      	mov	r3, r0
}
    5c74:	4618      	mov	r0, r3
    5c76:	3708      	adds	r7, #8
    5c78:	46bd      	mov	sp, r7
    5c7a:	bd80      	pop	{r7, pc}
    5c7c:	000128fc 	.word	0x000128fc
    5c80:	00007261 	.word	0x00007261
    5c84:	00007bb1 	.word	0x00007bb1

00005c88 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b082      	sub	sp, #8
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
    5c90:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d004      	beq.n	5ca2 <can_async_read+0x1a>
    5c98:	683b      	ldr	r3, [r7, #0]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d001      	beq.n	5ca2 <can_async_read+0x1a>
    5c9e:	2301      	movs	r3, #1
    5ca0:	e000      	b.n	5ca4 <can_async_read+0x1c>
    5ca2:	2300      	movs	r3, #0
    5ca4:	f003 0301 	and.w	r3, r3, #1
    5ca8:	b2db      	uxtb	r3, r3
    5caa:	226e      	movs	r2, #110	; 0x6e
    5cac:	4906      	ldr	r1, [pc, #24]	; (5cc8 <can_async_read+0x40>)
    5cae:	4618      	mov	r0, r3
    5cb0:	4b06      	ldr	r3, [pc, #24]	; (5ccc <can_async_read+0x44>)
    5cb2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	6839      	ldr	r1, [r7, #0]
    5cb8:	4618      	mov	r0, r3
    5cba:	4b05      	ldr	r3, [pc, #20]	; (5cd0 <can_async_read+0x48>)
    5cbc:	4798      	blx	r3
    5cbe:	4603      	mov	r3, r0
}
    5cc0:	4618      	mov	r0, r3
    5cc2:	3708      	adds	r7, #8
    5cc4:	46bd      	mov	sp, r7
    5cc6:	bd80      	pop	{r7, pc}
    5cc8:	000128fc 	.word	0x000128fc
    5ccc:	00007261 	.word	0x00007261
    5cd0:	00007bd1 	.word	0x00007bd1

00005cd4 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b082      	sub	sp, #8
    5cd8:	af00      	add	r7, sp, #0
    5cda:	6078      	str	r0, [r7, #4]
    5cdc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d004      	beq.n	5cee <can_async_write+0x1a>
    5ce4:	683b      	ldr	r3, [r7, #0]
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d001      	beq.n	5cee <can_async_write+0x1a>
    5cea:	2301      	movs	r3, #1
    5cec:	e000      	b.n	5cf0 <can_async_write+0x1c>
    5cee:	2300      	movs	r3, #0
    5cf0:	f003 0301 	and.w	r3, r3, #1
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	2277      	movs	r2, #119	; 0x77
    5cf8:	4906      	ldr	r1, [pc, #24]	; (5d14 <can_async_write+0x40>)
    5cfa:	4618      	mov	r0, r3
    5cfc:	4b06      	ldr	r3, [pc, #24]	; (5d18 <can_async_write+0x44>)
    5cfe:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	6839      	ldr	r1, [r7, #0]
    5d04:	4618      	mov	r0, r3
    5d06:	4b05      	ldr	r3, [pc, #20]	; (5d1c <can_async_write+0x48>)
    5d08:	4798      	blx	r3
    5d0a:	4603      	mov	r3, r0
}
    5d0c:	4618      	mov	r0, r3
    5d0e:	3708      	adds	r7, #8
    5d10:	46bd      	mov	sp, r7
    5d12:	bd80      	pop	{r7, pc}
    5d14:	000128fc 	.word	0x000128fc
    5d18:	00007261 	.word	0x00007261
    5d1c:	00007ce1 	.word	0x00007ce1

00005d20 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b084      	sub	sp, #16
    5d24:	af00      	add	r7, sp, #0
    5d26:	60f8      	str	r0, [r7, #12]
    5d28:	460b      	mov	r3, r1
    5d2a:	607a      	str	r2, [r7, #4]
    5d2c:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    5d2e:	68fb      	ldr	r3, [r7, #12]
    5d30:	2b00      	cmp	r3, #0
    5d32:	bf14      	ite	ne
    5d34:	2301      	movne	r3, #1
    5d36:	2300      	moveq	r3, #0
    5d38:	b2db      	uxtb	r3, r3
    5d3a:	2281      	movs	r2, #129	; 0x81
    5d3c:	4914      	ldr	r1, [pc, #80]	; (5d90 <can_async_register_callback+0x70>)
    5d3e:	4618      	mov	r0, r3
    5d40:	4b14      	ldr	r3, [pc, #80]	; (5d94 <can_async_register_callback+0x74>)
    5d42:	4798      	blx	r3

	switch (type) {
    5d44:	7afb      	ldrb	r3, [r7, #11]
    5d46:	2b01      	cmp	r3, #1
    5d48:	d007      	beq.n	5d5a <can_async_register_callback+0x3a>
    5d4a:	2b02      	cmp	r3, #2
    5d4c:	d009      	beq.n	5d62 <can_async_register_callback+0x42>
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d10b      	bne.n	5d6a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	687a      	ldr	r2, [r7, #4]
    5d56:	621a      	str	r2, [r3, #32]
		break;
    5d58:	e00a      	b.n	5d70 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    5d5a:	68fb      	ldr	r3, [r7, #12]
    5d5c:	687a      	ldr	r2, [r7, #4]
    5d5e:	61da      	str	r2, [r3, #28]
		break;
    5d60:	e006      	b.n	5d70 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    5d62:	68fb      	ldr	r3, [r7, #12]
    5d64:	687a      	ldr	r2, [r7, #4]
    5d66:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    5d68:	e002      	b.n	5d70 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    5d6a:	f06f 030c 	mvn.w	r3, #12
    5d6e:	e00b      	b.n	5d88 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    5d70:	68f8      	ldr	r0, [r7, #12]
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	2b00      	cmp	r3, #0
    5d76:	bf14      	ite	ne
    5d78:	2301      	movne	r3, #1
    5d7a:	2300      	moveq	r3, #0
    5d7c:	b2da      	uxtb	r2, r3
    5d7e:	7afb      	ldrb	r3, [r7, #11]
    5d80:	4619      	mov	r1, r3
    5d82:	4b05      	ldr	r3, [pc, #20]	; (5d98 <can_async_register_callback+0x78>)
    5d84:	4798      	blx	r3

	return ERR_NONE;
    5d86:	2300      	movs	r3, #0
}
    5d88:	4618      	mov	r0, r3
    5d8a:	3710      	adds	r7, #16
    5d8c:	46bd      	mov	sp, r7
    5d8e:	bd80      	pop	{r7, pc}
    5d90:	000128fc 	.word	0x000128fc
    5d94:	00007261 	.word	0x00007261
    5d98:	00007e9d 	.word	0x00007e9d

00005d9c <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    5d9c:	b590      	push	{r4, r7, lr}
    5d9e:	b085      	sub	sp, #20
    5da0:	af00      	add	r7, sp, #0
    5da2:	60f8      	str	r0, [r7, #12]
    5da4:	607b      	str	r3, [r7, #4]
    5da6:	460b      	mov	r3, r1
    5da8:	72fb      	strb	r3, [r7, #11]
    5daa:	4613      	mov	r3, r2
    5dac:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    5dae:	68fb      	ldr	r3, [r7, #12]
    5db0:	2b00      	cmp	r3, #0
    5db2:	bf14      	ite	ne
    5db4:	2301      	movne	r3, #1
    5db6:	2300      	moveq	r3, #0
    5db8:	b2db      	uxtb	r3, r3
    5dba:	22b8      	movs	r2, #184	; 0xb8
    5dbc:	4907      	ldr	r1, [pc, #28]	; (5ddc <can_async_set_filter+0x40>)
    5dbe:	4618      	mov	r0, r3
    5dc0:	4b07      	ldr	r3, [pc, #28]	; (5de0 <can_async_set_filter+0x44>)
    5dc2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    5dc4:	68f8      	ldr	r0, [r7, #12]
    5dc6:	7aba      	ldrb	r2, [r7, #10]
    5dc8:	7af9      	ldrb	r1, [r7, #11]
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	4c05      	ldr	r4, [pc, #20]	; (5de4 <can_async_set_filter+0x48>)
    5dce:	47a0      	blx	r4
    5dd0:	4603      	mov	r3, r0
}
    5dd2:	4618      	mov	r0, r3
    5dd4:	3714      	adds	r7, #20
    5dd6:	46bd      	mov	sp, r7
    5dd8:	bd90      	pop	{r4, r7, pc}
    5dda:	bf00      	nop
    5ddc:	000128fc 	.word	0x000128fc
    5de0:	00007261 	.word	0x00007261
    5de4:	00007f2d 	.word	0x00007f2d

00005de8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    5df4:	68fb      	ldr	r3, [r7, #12]
    5df6:	69db      	ldr	r3, [r3, #28]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d003      	beq.n	5e04 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    5dfc:	68fb      	ldr	r3, [r7, #12]
    5dfe:	69db      	ldr	r3, [r3, #28]
    5e00:	68f8      	ldr	r0, [r7, #12]
    5e02:	4798      	blx	r3
	}
}
    5e04:	bf00      	nop
    5e06:	3710      	adds	r7, #16
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}

00005e0c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b084      	sub	sp, #16
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    5e18:	68fb      	ldr	r3, [r7, #12]
    5e1a:	6a1b      	ldr	r3, [r3, #32]
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d003      	beq.n	5e28 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    5e20:	68fb      	ldr	r3, [r7, #12]
    5e22:	6a1b      	ldr	r3, [r3, #32]
    5e24:	68f8      	ldr	r0, [r7, #12]
    5e26:	4798      	blx	r3
	}
}
    5e28:	bf00      	nop
    5e2a:	3710      	adds	r7, #16
    5e2c:	46bd      	mov	sp, r7
    5e2e:	bd80      	pop	{r7, pc}

00005e30 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b084      	sub	sp, #16
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
    5e38:	460b      	mov	r3, r1
    5e3a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    5e40:	68fb      	ldr	r3, [r7, #12]
    5e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e44:	2b00      	cmp	r3, #0
    5e46:	d005      	beq.n	5e54 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e4c:	78fa      	ldrb	r2, [r7, #3]
    5e4e:	4611      	mov	r1, r2
    5e50:	68f8      	ldr	r0, [r7, #12]
    5e52:	4798      	blx	r3
	}
}
    5e54:	bf00      	nop
    5e56:	3710      	adds	r7, #16
    5e58:	46bd      	mov	sp, r7
    5e5a:	bd80      	pop	{r7, pc}

00005e5c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b082      	sub	sp, #8
    5e60:	af00      	add	r7, sp, #0
    5e62:	6078      	str	r0, [r7, #4]
    5e64:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d004      	beq.n	5e76 <crc_sync_init+0x1a>
    5e6c:	683b      	ldr	r3, [r7, #0]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d001      	beq.n	5e76 <crc_sync_init+0x1a>
    5e72:	2301      	movs	r3, #1
    5e74:	e000      	b.n	5e78 <crc_sync_init+0x1c>
    5e76:	2300      	movs	r3, #0
    5e78:	f003 0301 	and.w	r3, r3, #1
    5e7c:	b2db      	uxtb	r3, r3
    5e7e:	222b      	movs	r2, #43	; 0x2b
    5e80:	4906      	ldr	r1, [pc, #24]	; (5e9c <crc_sync_init+0x40>)
    5e82:	4618      	mov	r0, r3
    5e84:	4b06      	ldr	r3, [pc, #24]	; (5ea0 <crc_sync_init+0x44>)
    5e86:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	6839      	ldr	r1, [r7, #0]
    5e8c:	4618      	mov	r0, r3
    5e8e:	4b05      	ldr	r3, [pc, #20]	; (5ea4 <crc_sync_init+0x48>)
    5e90:	4798      	blx	r3
    5e92:	4603      	mov	r3, r0
}
    5e94:	4618      	mov	r0, r3
    5e96:	3708      	adds	r7, #8
    5e98:	46bd      	mov	sp, r7
    5e9a:	bd80      	pop	{r7, pc}
    5e9c:	00012918 	.word	0x00012918
    5ea0:	00007261 	.word	0x00007261
    5ea4:	00008511 	.word	0x00008511

00005ea8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5ea8:	b590      	push	{r4, r7, lr}
    5eaa:	b083      	sub	sp, #12
    5eac:	af00      	add	r7, sp, #0
    5eae:	4603      	mov	r3, r0
    5eb0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5eb2:	4b07      	ldr	r3, [pc, #28]	; (5ed0 <delay_us+0x28>)
    5eb4:	681c      	ldr	r4, [r3, #0]
    5eb6:	88fb      	ldrh	r3, [r7, #6]
    5eb8:	4618      	mov	r0, r3
    5eba:	4b06      	ldr	r3, [pc, #24]	; (5ed4 <delay_us+0x2c>)
    5ebc:	4798      	blx	r3
    5ebe:	4603      	mov	r3, r0
    5ec0:	4619      	mov	r1, r3
    5ec2:	4620      	mov	r0, r4
    5ec4:	4b04      	ldr	r3, [pc, #16]	; (5ed8 <delay_us+0x30>)
    5ec6:	4798      	blx	r3
}
    5ec8:	bf00      	nop
    5eca:	370c      	adds	r7, #12
    5ecc:	46bd      	mov	sp, r7
    5ece:	bd90      	pop	{r4, r7, pc}
    5ed0:	20001a38 	.word	0x20001a38
    5ed4:	00008261 	.word	0x00008261
    5ed8:	000083f9 	.word	0x000083f9

00005edc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5edc:	b590      	push	{r4, r7, lr}
    5ede:	b083      	sub	sp, #12
    5ee0:	af00      	add	r7, sp, #0
    5ee2:	4603      	mov	r3, r0
    5ee4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5ee6:	4b07      	ldr	r3, [pc, #28]	; (5f04 <delay_ms+0x28>)
    5ee8:	681c      	ldr	r4, [r3, #0]
    5eea:	88fb      	ldrh	r3, [r7, #6]
    5eec:	4618      	mov	r0, r3
    5eee:	4b06      	ldr	r3, [pc, #24]	; (5f08 <delay_ms+0x2c>)
    5ef0:	4798      	blx	r3
    5ef2:	4603      	mov	r3, r0
    5ef4:	4619      	mov	r1, r3
    5ef6:	4620      	mov	r0, r4
    5ef8:	4b04      	ldr	r3, [pc, #16]	; (5f0c <delay_ms+0x30>)
    5efa:	4798      	blx	r3
}
    5efc:	bf00      	nop
    5efe:	370c      	adds	r7, #12
    5f00:	46bd      	mov	sp, r7
    5f02:	bd90      	pop	{r4, r7, pc}
    5f04:	20001a38 	.word	0x20001a38
    5f08:	000083cd 	.word	0x000083cd
    5f0c:	000083f9 	.word	0x000083f9

00005f10 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	af00      	add	r7, sp, #0
	return _event_system_init();
    5f14:	4b02      	ldr	r3, [pc, #8]	; (5f20 <event_system_init+0x10>)
    5f16:	4798      	blx	r3
    5f18:	4603      	mov	r3, r0
}
    5f1a:	4618      	mov	r0, r3
    5f1c:	bd80      	pop	{r7, pc}
    5f1e:	bf00      	nop
    5f20:	00008bf5 	.word	0x00008bf5

00005f24 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    5f2a:	2300      	movs	r3, #0
    5f2c:	80fb      	strh	r3, [r7, #6]
    5f2e:	e00e      	b.n	5f4e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    5f30:	88fb      	ldrh	r3, [r7, #6]
    5f32:	4a0c      	ldr	r2, [pc, #48]	; (5f64 <ext_irq_init+0x40>)
    5f34:	00db      	lsls	r3, r3, #3
    5f36:	4413      	add	r3, r2
    5f38:	f04f 32ff 	mov.w	r2, #4294967295
    5f3c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    5f3e:	88fb      	ldrh	r3, [r7, #6]
    5f40:	4a08      	ldr	r2, [pc, #32]	; (5f64 <ext_irq_init+0x40>)
    5f42:	2100      	movs	r1, #0
    5f44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    5f48:	88fb      	ldrh	r3, [r7, #6]
    5f4a:	3301      	adds	r3, #1
    5f4c:	80fb      	strh	r3, [r7, #6]
    5f4e:	88fb      	ldrh	r3, [r7, #6]
    5f50:	2b08      	cmp	r3, #8
    5f52:	d9ed      	bls.n	5f30 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    5f54:	4804      	ldr	r0, [pc, #16]	; (5f68 <ext_irq_init+0x44>)
    5f56:	4b05      	ldr	r3, [pc, #20]	; (5f6c <ext_irq_init+0x48>)
    5f58:	4798      	blx	r3
    5f5a:	4603      	mov	r3, r0
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	3708      	adds	r7, #8
    5f60:	46bd      	mov	sp, r7
    5f62:	bd80      	pop	{r7, pc}
    5f64:	20001a3c 	.word	0x20001a3c
    5f68:	00005f71 	.word	0x00005f71
    5f6c:	00008819 	.word	0x00008819

00005f70 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    5f70:	b580      	push	{r7, lr}
    5f72:	b084      	sub	sp, #16
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5f78:	2300      	movs	r3, #0
    5f7a:	73fb      	strb	r3, [r7, #15]
    5f7c:	2309      	movs	r3, #9
    5f7e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    5f80:	e02a      	b.n	5fd8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    5f82:	7bba      	ldrb	r2, [r7, #14]
    5f84:	7bfb      	ldrb	r3, [r7, #15]
    5f86:	4413      	add	r3, r2
    5f88:	105b      	asrs	r3, r3, #1
    5f8a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    5f8c:	7b7b      	ldrb	r3, [r7, #13]
    5f8e:	2b08      	cmp	r3, #8
    5f90:	d827      	bhi.n	5fe2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    5f92:	7b7b      	ldrb	r3, [r7, #13]
    5f94:	4a16      	ldr	r2, [pc, #88]	; (5ff0 <process_ext_irq+0x80>)
    5f96:	00db      	lsls	r3, r3, #3
    5f98:	4413      	add	r3, r2
    5f9a:	685a      	ldr	r2, [r3, #4]
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	429a      	cmp	r2, r3
    5fa0:	d10b      	bne.n	5fba <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    5fa2:	7b7b      	ldrb	r3, [r7, #13]
    5fa4:	4a12      	ldr	r2, [pc, #72]	; (5ff0 <process_ext_irq+0x80>)
    5fa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d01b      	beq.n	5fe6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    5fae:	7b7b      	ldrb	r3, [r7, #13]
    5fb0:	4a0f      	ldr	r2, [pc, #60]	; (5ff0 <process_ext_irq+0x80>)
    5fb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5fb6:	4798      	blx	r3
			}
			return;
    5fb8:	e015      	b.n	5fe6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    5fba:	7b7b      	ldrb	r3, [r7, #13]
    5fbc:	4a0c      	ldr	r2, [pc, #48]	; (5ff0 <process_ext_irq+0x80>)
    5fbe:	00db      	lsls	r3, r3, #3
    5fc0:	4413      	add	r3, r2
    5fc2:	685a      	ldr	r2, [r3, #4]
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	429a      	cmp	r2, r3
    5fc8:	d203      	bcs.n	5fd2 <process_ext_irq+0x62>
			lower = middle + 1;
    5fca:	7b7b      	ldrb	r3, [r7, #13]
    5fcc:	3301      	adds	r3, #1
    5fce:	73fb      	strb	r3, [r7, #15]
    5fd0:	e002      	b.n	5fd8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    5fd2:	7b7b      	ldrb	r3, [r7, #13]
    5fd4:	3b01      	subs	r3, #1
    5fd6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    5fd8:	7bba      	ldrb	r2, [r7, #14]
    5fda:	7bfb      	ldrb	r3, [r7, #15]
    5fdc:	429a      	cmp	r2, r3
    5fde:	d2d0      	bcs.n	5f82 <process_ext_irq+0x12>
    5fe0:	e002      	b.n	5fe8 <process_ext_irq+0x78>
			return;
    5fe2:	bf00      	nop
    5fe4:	e000      	b.n	5fe8 <process_ext_irq+0x78>
			return;
    5fe6:	bf00      	nop
		}
	}
}
    5fe8:	3710      	adds	r7, #16
    5fea:	46bd      	mov	sp, r7
    5fec:	bd80      	pop	{r7, pc}
    5fee:	bf00      	nop
    5ff0:	20001a3c 	.word	0x20001a3c

00005ff4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	b08a      	sub	sp, #40	; 0x28
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	60f8      	str	r0, [r7, #12]
    5ffc:	60b9      	str	r1, [r7, #8]
    5ffe:	4613      	mov	r3, r2
    6000:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	3b14      	subs	r3, #20
    6006:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600a:	8b9b      	ldrh	r3, [r3, #28]
    600c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    600e:	88fb      	ldrh	r3, [r7, #6]
    6010:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6012:	f248 0301 	movw	r3, #32769	; 0x8001
    6016:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6018:	68bb      	ldr	r3, [r7, #8]
    601a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601e:	f107 0214 	add.w	r2, r7, #20
    6022:	4611      	mov	r1, r2
    6024:	4618      	mov	r0, r3
    6026:	4b06      	ldr	r3, [pc, #24]	; (6040 <i2c_m_sync_read+0x4c>)
    6028:	4798      	blx	r3
    602a:	6238      	str	r0, [r7, #32]

	if (ret) {
    602c:	6a3b      	ldr	r3, [r7, #32]
    602e:	2b00      	cmp	r3, #0
    6030:	d001      	beq.n	6036 <i2c_m_sync_read+0x42>
		return ret;
    6032:	6a3b      	ldr	r3, [r7, #32]
    6034:	e000      	b.n	6038 <i2c_m_sync_read+0x44>
	}

	return n;
    6036:	88fb      	ldrh	r3, [r7, #6]
}
    6038:	4618      	mov	r0, r3
    603a:	3728      	adds	r7, #40	; 0x28
    603c:	46bd      	mov	sp, r7
    603e:	bd80      	pop	{r7, pc}
    6040:	0000a855 	.word	0x0000a855

00006044 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6044:	b580      	push	{r7, lr}
    6046:	b08a      	sub	sp, #40	; 0x28
    6048:	af00      	add	r7, sp, #0
    604a:	60f8      	str	r0, [r7, #12]
    604c:	60b9      	str	r1, [r7, #8]
    604e:	4613      	mov	r3, r2
    6050:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6052:	68fb      	ldr	r3, [r7, #12]
    6054:	3b14      	subs	r3, #20
    6056:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    605a:	8b9b      	ldrh	r3, [r3, #28]
    605c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    605e:	88fb      	ldrh	r3, [r7, #6]
    6060:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6066:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6068:	68bb      	ldr	r3, [r7, #8]
    606a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    606e:	f107 0214 	add.w	r2, r7, #20
    6072:	4611      	mov	r1, r2
    6074:	4618      	mov	r0, r3
    6076:	4b06      	ldr	r3, [pc, #24]	; (6090 <i2c_m_sync_write+0x4c>)
    6078:	4798      	blx	r3
    607a:	6238      	str	r0, [r7, #32]

	if (ret) {
    607c:	6a3b      	ldr	r3, [r7, #32]
    607e:	2b00      	cmp	r3, #0
    6080:	d001      	beq.n	6086 <i2c_m_sync_write+0x42>
		return ret;
    6082:	6a3b      	ldr	r3, [r7, #32]
    6084:	e000      	b.n	6088 <i2c_m_sync_write+0x44>
	}

	return n;
    6086:	88fb      	ldrh	r3, [r7, #6]
}
    6088:	4618      	mov	r0, r3
    608a:	3728      	adds	r7, #40	; 0x28
    608c:	46bd      	mov	sp, r7
    608e:	bd80      	pop	{r7, pc}
    6090:	0000a855 	.word	0x0000a855

00006094 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6094:	b580      	push	{r7, lr}
    6096:	b084      	sub	sp, #16
    6098:	af00      	add	r7, sp, #0
    609a:	6078      	str	r0, [r7, #4]
    609c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    609e:	687b      	ldr	r3, [r7, #4]
    60a0:	2b00      	cmp	r3, #0
    60a2:	bf14      	ite	ne
    60a4:	2301      	movne	r3, #1
    60a6:	2300      	moveq	r3, #0
    60a8:	b2db      	uxtb	r3, r3
    60aa:	225e      	movs	r2, #94	; 0x5e
    60ac:	490c      	ldr	r1, [pc, #48]	; (60e0 <i2c_m_sync_init+0x4c>)
    60ae:	4618      	mov	r0, r3
    60b0:	4b0c      	ldr	r3, [pc, #48]	; (60e4 <i2c_m_sync_init+0x50>)
    60b2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	6839      	ldr	r1, [r7, #0]
    60b8:	4618      	mov	r0, r3
    60ba:	4b0b      	ldr	r3, [pc, #44]	; (60e8 <i2c_m_sync_init+0x54>)
    60bc:	4798      	blx	r3
    60be:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    60c0:	68fb      	ldr	r3, [r7, #12]
    60c2:	2b00      	cmp	r3, #0
    60c4:	d001      	beq.n	60ca <i2c_m_sync_init+0x36>
		return init_status;
    60c6:	68fb      	ldr	r3, [r7, #12]
    60c8:	e006      	b.n	60d8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	4a07      	ldr	r2, [pc, #28]	; (60ec <i2c_m_sync_init+0x58>)
    60ce:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	4a07      	ldr	r2, [pc, #28]	; (60f0 <i2c_m_sync_init+0x5c>)
    60d4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    60d6:	2300      	movs	r3, #0
}
    60d8:	4618      	mov	r0, r3
    60da:	3710      	adds	r7, #16
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00012934 	.word	0x00012934
    60e4:	00007261 	.word	0x00007261
    60e8:	0000a5f5 	.word	0x0000a5f5
    60ec:	00005ff5 	.word	0x00005ff5
    60f0:	00006045 	.word	0x00006045

000060f4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b082      	sub	sp, #8
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	4618      	mov	r0, r3
    6100:	4b03      	ldr	r3, [pc, #12]	; (6110 <i2c_m_sync_enable+0x1c>)
    6102:	4798      	blx	r3
    6104:	4603      	mov	r3, r0
}
    6106:	4618      	mov	r0, r3
    6108:	3708      	adds	r7, #8
    610a:	46bd      	mov	sp, r7
    610c:	bd80      	pop	{r7, pc}
    610e:	bf00      	nop
    6110:	0000a63d 	.word	0x0000a63d

00006114 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    6114:	b580      	push	{r7, lr}
    6116:	b082      	sub	sp, #8
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	4618      	mov	r0, r3
    6120:	4b03      	ldr	r3, [pc, #12]	; (6130 <i2c_m_sync_disable+0x1c>)
    6122:	4798      	blx	r3
    6124:	4603      	mov	r3, r0
}
    6126:	4618      	mov	r0, r3
    6128:	3708      	adds	r7, #8
    612a:	46bd      	mov	sp, r7
    612c:	bd80      	pop	{r7, pc}
    612e:	bf00      	nop
    6130:	0000a67d 	.word	0x0000a67d

00006134 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    6134:	b480      	push	{r7}
    6136:	b085      	sub	sp, #20
    6138:	af00      	add	r7, sp, #0
    613a:	60f8      	str	r0, [r7, #12]
    613c:	460b      	mov	r3, r1
    613e:	607a      	str	r2, [r7, #4]
    6140:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6142:	897b      	ldrh	r3, [r7, #10]
    6144:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6148:	b21a      	sxth	r2, r3
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	b21b      	sxth	r3, r3
    614e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6152:	b21b      	sxth	r3, r3
    6154:	4313      	orrs	r3, r2
    6156:	b21b      	sxth	r3, r3
    6158:	b29a      	uxth	r2, r3
    615a:	68fb      	ldr	r3, [r7, #12]
    615c:	839a      	strh	r2, [r3, #28]
    615e:	68fb      	ldr	r3, [r7, #12]
    6160:	8b9b      	ldrh	r3, [r3, #28]
}
    6162:	4618      	mov	r0, r3
    6164:	3714      	adds	r7, #20
    6166:	46bd      	mov	sp, r7
    6168:	f85d 7b04 	ldr.w	r7, [sp], #4
    616c:	4770      	bx	lr

0000616e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    616e:	b480      	push	{r7}
    6170:	b083      	sub	sp, #12
    6172:	af00      	add	r7, sp, #0
    6174:	6078      	str	r0, [r7, #4]
    6176:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	f103 0214 	add.w	r2, r3, #20
    617e:	683b      	ldr	r3, [r7, #0]
    6180:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6182:	2300      	movs	r3, #0
}
    6184:	4618      	mov	r0, r3
    6186:	370c      	adds	r7, #12
    6188:	46bd      	mov	sp, r7
    618a:	f85d 7b04 	ldr.w	r7, [sp], #4
    618e:	4770      	bx	lr

00006190 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6190:	b580      	push	{r7, lr}
    6192:	b084      	sub	sp, #16
    6194:	af00      	add	r7, sp, #0
    6196:	60f8      	str	r0, [r7, #12]
    6198:	60b9      	str	r1, [r7, #8]
    619a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    619c:	68fb      	ldr	r3, [r7, #12]
    619e:	2b00      	cmp	r3, #0
    61a0:	d004      	beq.n	61ac <pwm_init+0x1c>
    61a2:	68bb      	ldr	r3, [r7, #8]
    61a4:	2b00      	cmp	r3, #0
    61a6:	d001      	beq.n	61ac <pwm_init+0x1c>
    61a8:	2301      	movs	r3, #1
    61aa:	e000      	b.n	61ae <pwm_init+0x1e>
    61ac:	2300      	movs	r3, #0
    61ae:	f003 0301 	and.w	r3, r3, #1
    61b2:	b2db      	uxtb	r3, r3
    61b4:	2233      	movs	r2, #51	; 0x33
    61b6:	490a      	ldr	r1, [pc, #40]	; (61e0 <pwm_init+0x50>)
    61b8:	4618      	mov	r0, r3
    61ba:	4b0a      	ldr	r3, [pc, #40]	; (61e4 <pwm_init+0x54>)
    61bc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    61be:	68fb      	ldr	r3, [r7, #12]
    61c0:	68b9      	ldr	r1, [r7, #8]
    61c2:	4618      	mov	r0, r3
    61c4:	4b08      	ldr	r3, [pc, #32]	; (61e8 <pwm_init+0x58>)
    61c6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    61c8:	68fb      	ldr	r3, [r7, #12]
    61ca:	4a08      	ldr	r2, [pc, #32]	; (61ec <pwm_init+0x5c>)
    61cc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    61ce:	68fb      	ldr	r3, [r7, #12]
    61d0:	4a07      	ldr	r2, [pc, #28]	; (61f0 <pwm_init+0x60>)
    61d2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    61d4:	2300      	movs	r3, #0
}
    61d6:	4618      	mov	r0, r3
    61d8:	3710      	adds	r7, #16
    61da:	46bd      	mov	sp, r7
    61dc:	bd80      	pop	{r7, pc}
    61de:	bf00      	nop
    61e0:	00012950 	.word	0x00012950
    61e4:	00007261 	.word	0x00007261
    61e8:	0000be15 	.word	0x0000be15
    61ec:	000061f5 	.word	0x000061f5
    61f0:	00006219 	.word	0x00006219

000061f4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b084      	sub	sp, #16
    61f8:	af00      	add	r7, sp, #0
    61fa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6200:	68fb      	ldr	r3, [r7, #12]
    6202:	695b      	ldr	r3, [r3, #20]
    6204:	2b00      	cmp	r3, #0
    6206:	d003      	beq.n	6210 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	695b      	ldr	r3, [r3, #20]
    620c:	68f8      	ldr	r0, [r7, #12]
    620e:	4798      	blx	r3
	}
}
    6210:	bf00      	nop
    6212:	3710      	adds	r7, #16
    6214:	46bd      	mov	sp, r7
    6216:	bd80      	pop	{r7, pc}

00006218 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6218:	b580      	push	{r7, lr}
    621a:	b084      	sub	sp, #16
    621c:	af00      	add	r7, sp, #0
    621e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6224:	68fb      	ldr	r3, [r7, #12]
    6226:	699b      	ldr	r3, [r3, #24]
    6228:	2b00      	cmp	r3, #0
    622a:	d003      	beq.n	6234 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    622c:	68fb      	ldr	r3, [r7, #12]
    622e:	699b      	ldr	r3, [r3, #24]
    6230:	68f8      	ldr	r0, [r7, #12]
    6232:	4798      	blx	r3
	}
}
    6234:	bf00      	nop
    6236:	3710      	adds	r7, #16
    6238:	46bd      	mov	sp, r7
    623a:	bd80      	pop	{r7, pc}

0000623c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    623c:	b580      	push	{r7, lr}
    623e:	b082      	sub	sp, #8
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
    6244:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	2b00      	cmp	r3, #0
    624a:	d004      	beq.n	6256 <qspi_sync_init+0x1a>
    624c:	683b      	ldr	r3, [r7, #0]
    624e:	2b00      	cmp	r3, #0
    6250:	d001      	beq.n	6256 <qspi_sync_init+0x1a>
    6252:	2301      	movs	r3, #1
    6254:	e000      	b.n	6258 <qspi_sync_init+0x1c>
    6256:	2300      	movs	r3, #0
    6258:	f003 0301 	and.w	r3, r3, #1
    625c:	b2db      	uxtb	r3, r3
    625e:	2231      	movs	r2, #49	; 0x31
    6260:	4906      	ldr	r1, [pc, #24]	; (627c <qspi_sync_init+0x40>)
    6262:	4618      	mov	r0, r3
    6264:	4b06      	ldr	r3, [pc, #24]	; (6280 <qspi_sync_init+0x44>)
    6266:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	6839      	ldr	r1, [r7, #0]
    626c:	4618      	mov	r0, r3
    626e:	4b05      	ldr	r3, [pc, #20]	; (6284 <qspi_sync_init+0x48>)
    6270:	4798      	blx	r3
    6272:	4603      	mov	r3, r0
}
    6274:	4618      	mov	r0, r3
    6276:	3708      	adds	r7, #8
    6278:	46bd      	mov	sp, r7
    627a:	bd80      	pop	{r7, pc}
    627c:	00012968 	.word	0x00012968
    6280:	00007261 	.word	0x00007261
    6284:	000097d5 	.word	0x000097d5

00006288 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6288:	b580      	push	{r7, lr}
    628a:	b082      	sub	sp, #8
    628c:	af00      	add	r7, sp, #0
    628e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	2b00      	cmp	r3, #0
    6294:	bf14      	ite	ne
    6296:	2301      	movne	r3, #1
    6298:	2300      	moveq	r3, #0
    629a:	b2db      	uxtb	r3, r3
    629c:	223f      	movs	r2, #63	; 0x3f
    629e:	4906      	ldr	r1, [pc, #24]	; (62b8 <qspi_sync_enable+0x30>)
    62a0:	4618      	mov	r0, r3
    62a2:	4b06      	ldr	r3, [pc, #24]	; (62bc <qspi_sync_enable+0x34>)
    62a4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	4618      	mov	r0, r3
    62aa:	4b05      	ldr	r3, [pc, #20]	; (62c0 <qspi_sync_enable+0x38>)
    62ac:	4798      	blx	r3
    62ae:	4603      	mov	r3, r0
}
    62b0:	4618      	mov	r0, r3
    62b2:	3708      	adds	r7, #8
    62b4:	46bd      	mov	sp, r7
    62b6:	bd80      	pop	{r7, pc}
    62b8:	00012968 	.word	0x00012968
    62bc:	00007261 	.word	0x00007261
    62c0:	00009849 	.word	0x00009849

000062c4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	b082      	sub	sp, #8
    62c8:	af00      	add	r7, sp, #0
    62ca:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	2b00      	cmp	r3, #0
    62d0:	bf14      	ite	ne
    62d2:	2301      	movne	r3, #1
    62d4:	2300      	moveq	r3, #0
    62d6:	b2db      	uxtb	r3, r3
    62d8:	2246      	movs	r2, #70	; 0x46
    62da:	4906      	ldr	r1, [pc, #24]	; (62f4 <qspi_sync_disable+0x30>)
    62dc:	4618      	mov	r0, r3
    62de:	4b06      	ldr	r3, [pc, #24]	; (62f8 <qspi_sync_disable+0x34>)
    62e0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	4618      	mov	r0, r3
    62e6:	4b05      	ldr	r3, [pc, #20]	; (62fc <qspi_sync_disable+0x38>)
    62e8:	4798      	blx	r3
    62ea:	4603      	mov	r3, r0
}
    62ec:	4618      	mov	r0, r3
    62ee:	3708      	adds	r7, #8
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}
    62f4:	00012968 	.word	0x00012968
    62f8:	00007261 	.word	0x00007261
    62fc:	0000986d 	.word	0x0000986d

00006300 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6300:	b580      	push	{r7, lr}
    6302:	b082      	sub	sp, #8
    6304:	af00      	add	r7, sp, #0
    6306:	6078      	str	r0, [r7, #4]
    6308:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	2b00      	cmp	r3, #0
    630e:	d004      	beq.n	631a <qspi_sync_serial_run_command+0x1a>
    6310:	683b      	ldr	r3, [r7, #0]
    6312:	2b00      	cmp	r3, #0
    6314:	d001      	beq.n	631a <qspi_sync_serial_run_command+0x1a>
    6316:	2301      	movs	r3, #1
    6318:	e000      	b.n	631c <qspi_sync_serial_run_command+0x1c>
    631a:	2300      	movs	r3, #0
    631c:	f003 0301 	and.w	r3, r3, #1
    6320:	b2db      	uxtb	r3, r3
    6322:	224d      	movs	r2, #77	; 0x4d
    6324:	4906      	ldr	r1, [pc, #24]	; (6340 <qspi_sync_serial_run_command+0x40>)
    6326:	4618      	mov	r0, r3
    6328:	4b06      	ldr	r3, [pc, #24]	; (6344 <qspi_sync_serial_run_command+0x44>)
    632a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	6839      	ldr	r1, [r7, #0]
    6330:	4618      	mov	r0, r3
    6332:	4b05      	ldr	r3, [pc, #20]	; (6348 <qspi_sync_serial_run_command+0x48>)
    6334:	4798      	blx	r3
    6336:	4603      	mov	r3, r0
}
    6338:	4618      	mov	r0, r3
    633a:	3708      	adds	r7, #8
    633c:	46bd      	mov	sp, r7
    633e:	bd80      	pop	{r7, pc}
    6340:	00012968 	.word	0x00012968
    6344:	00007261 	.word	0x00007261
    6348:	000099b9 	.word	0x000099b9

0000634c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	6078      	str	r0, [r7, #4]
    6354:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6356:	2300      	movs	r3, #0
    6358:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    635a:	687b      	ldr	r3, [r7, #4]
    635c:	2b00      	cmp	r3, #0
    635e:	d004      	beq.n	636a <spi_m_sync_init+0x1e>
    6360:	683b      	ldr	r3, [r7, #0]
    6362:	2b00      	cmp	r3, #0
    6364:	d001      	beq.n	636a <spi_m_sync_init+0x1e>
    6366:	2301      	movs	r3, #1
    6368:	e000      	b.n	636c <spi_m_sync_init+0x20>
    636a:	2300      	movs	r3, #0
    636c:	f003 0301 	and.w	r3, r3, #1
    6370:	b2db      	uxtb	r3, r3
    6372:	2240      	movs	r2, #64	; 0x40
    6374:	4910      	ldr	r1, [pc, #64]	; (63b8 <spi_m_sync_init+0x6c>)
    6376:	4618      	mov	r0, r3
    6378:	4b10      	ldr	r3, [pc, #64]	; (63bc <spi_m_sync_init+0x70>)
    637a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	683a      	ldr	r2, [r7, #0]
    6380:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	3304      	adds	r3, #4
    6386:	6839      	ldr	r1, [r7, #0]
    6388:	4618      	mov	r0, r3
    638a:	4b0d      	ldr	r3, [pc, #52]	; (63c0 <spi_m_sync_init+0x74>)
    638c:	4798      	blx	r3
    638e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6390:	68fb      	ldr	r3, [r7, #12]
    6392:	2b00      	cmp	r3, #0
    6394:	da01      	bge.n	639a <spi_m_sync_init+0x4e>
		return rc;
    6396:	68fb      	ldr	r3, [r7, #12]
    6398:	e00a      	b.n	63b0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    63a0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	4a07      	ldr	r2, [pc, #28]	; (63c4 <spi_m_sync_init+0x78>)
    63a6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	4a07      	ldr	r2, [pc, #28]	; (63c8 <spi_m_sync_init+0x7c>)
    63ac:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    63ae:	2300      	movs	r3, #0
}
    63b0:	4618      	mov	r0, r3
    63b2:	3710      	adds	r7, #16
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	00012984 	.word	0x00012984
    63bc:	00007261 	.word	0x00007261
    63c0:	0000ace9 	.word	0x0000ace9
    63c4:	000063cd 	.word	0x000063cd
    63c8:	00006425 	.word	0x00006425

000063cc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    63cc:	b580      	push	{r7, lr}
    63ce:	b088      	sub	sp, #32
    63d0:	af00      	add	r7, sp, #0
    63d2:	60f8      	str	r0, [r7, #12]
    63d4:	60b9      	str	r1, [r7, #8]
    63d6:	4613      	mov	r3, r2
    63d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    63da:	68fb      	ldr	r3, [r7, #12]
    63dc:	2b00      	cmp	r3, #0
    63de:	bf14      	ite	ne
    63e0:	2301      	movne	r3, #1
    63e2:	2300      	moveq	r3, #0
    63e4:	b2db      	uxtb	r3, r3
    63e6:	2287      	movs	r2, #135	; 0x87
    63e8:	490b      	ldr	r1, [pc, #44]	; (6418 <_spi_m_sync_io_read+0x4c>)
    63ea:	4618      	mov	r0, r3
    63ec:	4b0b      	ldr	r3, [pc, #44]	; (641c <_spi_m_sync_io_read+0x50>)
    63ee:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    63f0:	68fb      	ldr	r3, [r7, #12]
    63f2:	3b0c      	subs	r3, #12
    63f4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    63f6:	68bb      	ldr	r3, [r7, #8]
    63f8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    63fa:	2300      	movs	r3, #0
    63fc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    63fe:	88fb      	ldrh	r3, [r7, #6]
    6400:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6402:	f107 0310 	add.w	r3, r7, #16
    6406:	4619      	mov	r1, r3
    6408:	69f8      	ldr	r0, [r7, #28]
    640a:	4b05      	ldr	r3, [pc, #20]	; (6420 <_spi_m_sync_io_read+0x54>)
    640c:	4798      	blx	r3
    640e:	4603      	mov	r3, r0
}
    6410:	4618      	mov	r0, r3
    6412:	3720      	adds	r7, #32
    6414:	46bd      	mov	sp, r7
    6416:	bd80      	pop	{r7, pc}
    6418:	00012984 	.word	0x00012984
    641c:	00007261 	.word	0x00007261
    6420:	0000647d 	.word	0x0000647d

00006424 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6424:	b580      	push	{r7, lr}
    6426:	b088      	sub	sp, #32
    6428:	af00      	add	r7, sp, #0
    642a:	60f8      	str	r0, [r7, #12]
    642c:	60b9      	str	r1, [r7, #8]
    642e:	4613      	mov	r3, r2
    6430:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6432:	68fb      	ldr	r3, [r7, #12]
    6434:	2b00      	cmp	r3, #0
    6436:	bf14      	ite	ne
    6438:	2301      	movne	r3, #1
    643a:	2300      	moveq	r3, #0
    643c:	b2db      	uxtb	r3, r3
    643e:	22a3      	movs	r2, #163	; 0xa3
    6440:	490b      	ldr	r1, [pc, #44]	; (6470 <_spi_m_sync_io_write+0x4c>)
    6442:	4618      	mov	r0, r3
    6444:	4b0b      	ldr	r3, [pc, #44]	; (6474 <_spi_m_sync_io_write+0x50>)
    6446:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6448:	68fb      	ldr	r3, [r7, #12]
    644a:	3b0c      	subs	r3, #12
    644c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    644e:	2300      	movs	r3, #0
    6450:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6452:	68bb      	ldr	r3, [r7, #8]
    6454:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6456:	88fb      	ldrh	r3, [r7, #6]
    6458:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    645a:	f107 0310 	add.w	r3, r7, #16
    645e:	4619      	mov	r1, r3
    6460:	69f8      	ldr	r0, [r7, #28]
    6462:	4b05      	ldr	r3, [pc, #20]	; (6478 <_spi_m_sync_io_write+0x54>)
    6464:	4798      	blx	r3
    6466:	4603      	mov	r3, r0
}
    6468:	4618      	mov	r0, r3
    646a:	3720      	adds	r7, #32
    646c:	46bd      	mov	sp, r7
    646e:	bd80      	pop	{r7, pc}
    6470:	00012984 	.word	0x00012984
    6474:	00007261 	.word	0x00007261
    6478:	0000647d 	.word	0x0000647d

0000647c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    647c:	b580      	push	{r7, lr}
    647e:	b086      	sub	sp, #24
    6480:	af00      	add	r7, sp, #0
    6482:	6078      	str	r0, [r7, #4]
    6484:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	2b00      	cmp	r3, #0
    648a:	d004      	beq.n	6496 <spi_m_sync_transfer+0x1a>
    648c:	683b      	ldr	r3, [r7, #0]
    648e:	2b00      	cmp	r3, #0
    6490:	d001      	beq.n	6496 <spi_m_sync_transfer+0x1a>
    6492:	2301      	movs	r3, #1
    6494:	e000      	b.n	6498 <spi_m_sync_transfer+0x1c>
    6496:	2300      	movs	r3, #0
    6498:	f003 0301 	and.w	r3, r3, #1
    649c:	b2db      	uxtb	r3, r3
    649e:	22b3      	movs	r2, #179	; 0xb3
    64a0:	490c      	ldr	r1, [pc, #48]	; (64d4 <spi_m_sync_transfer+0x58>)
    64a2:	4618      	mov	r0, r3
    64a4:	4b0c      	ldr	r3, [pc, #48]	; (64d8 <spi_m_sync_transfer+0x5c>)
    64a6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    64a8:	683b      	ldr	r3, [r7, #0]
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    64ae:	683b      	ldr	r3, [r7, #0]
    64b0:	685b      	ldr	r3, [r3, #4]
    64b2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    64b4:	683b      	ldr	r3, [r7, #0]
    64b6:	689b      	ldr	r3, [r3, #8]
    64b8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	3304      	adds	r3, #4
    64be:	f107 020c 	add.w	r2, r7, #12
    64c2:	4611      	mov	r1, r2
    64c4:	4618      	mov	r0, r3
    64c6:	4b05      	ldr	r3, [pc, #20]	; (64dc <spi_m_sync_transfer+0x60>)
    64c8:	4798      	blx	r3
    64ca:	4603      	mov	r3, r0
}
    64cc:	4618      	mov	r0, r3
    64ce:	3718      	adds	r7, #24
    64d0:	46bd      	mov	sp, r7
    64d2:	bd80      	pop	{r7, pc}
    64d4:	00012984 	.word	0x00012984
    64d8:	00007261 	.word	0x00007261
    64dc:	0000af49 	.word	0x0000af49

000064e0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    64e0:	b480      	push	{r7}
    64e2:	b083      	sub	sp, #12
    64e4:	af00      	add	r7, sp, #0
    64e6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	681b      	ldr	r3, [r3, #0]
}
    64ec:	4618      	mov	r0, r3
    64ee:	370c      	adds	r7, #12
    64f0:	46bd      	mov	sp, r7
    64f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64f6:	4770      	bx	lr

000064f8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    64f8:	b480      	push	{r7}
    64fa:	b083      	sub	sp, #12
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6500:	687b      	ldr	r3, [r7, #4]
    6502:	2b00      	cmp	r3, #0
    6504:	d002      	beq.n	650c <list_get_next_element+0x14>
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	681b      	ldr	r3, [r3, #0]
    650a:	e000      	b.n	650e <list_get_next_element+0x16>
    650c:	2300      	movs	r3, #0
}
    650e:	4618      	mov	r0, r3
    6510:	370c      	adds	r7, #12
    6512:	46bd      	mov	sp, r7
    6514:	f85d 7b04 	ldr.w	r7, [sp], #4
    6518:	4770      	bx	lr
	...

0000651c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    651c:	b580      	push	{r7, lr}
    651e:	b084      	sub	sp, #16
    6520:	af00      	add	r7, sp, #0
    6522:	60f8      	str	r0, [r7, #12]
    6524:	60b9      	str	r1, [r7, #8]
    6526:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	2b00      	cmp	r3, #0
    652c:	d007      	beq.n	653e <timer_init+0x22>
    652e:	68bb      	ldr	r3, [r7, #8]
    6530:	2b00      	cmp	r3, #0
    6532:	d004      	beq.n	653e <timer_init+0x22>
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	2b00      	cmp	r3, #0
    6538:	d001      	beq.n	653e <timer_init+0x22>
    653a:	2301      	movs	r3, #1
    653c:	e000      	b.n	6540 <timer_init+0x24>
    653e:	2300      	movs	r3, #0
    6540:	f003 0301 	and.w	r3, r3, #1
    6544:	b2db      	uxtb	r3, r3
    6546:	223b      	movs	r2, #59	; 0x3b
    6548:	490c      	ldr	r1, [pc, #48]	; (657c <timer_init+0x60>)
    654a:	4618      	mov	r0, r3
    654c:	4b0c      	ldr	r3, [pc, #48]	; (6580 <timer_init+0x64>)
    654e:	4798      	blx	r3
	descr->func = func;
    6550:	68fb      	ldr	r3, [r7, #12]
    6552:	687a      	ldr	r2, [r7, #4]
    6554:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    6556:	68fb      	ldr	r3, [r7, #12]
    6558:	681b      	ldr	r3, [r3, #0]
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	68fa      	ldr	r2, [r7, #12]
    655e:	3204      	adds	r2, #4
    6560:	68b9      	ldr	r1, [r7, #8]
    6562:	4610      	mov	r0, r2
    6564:	4798      	blx	r3
	descr->time                           = 0;
    6566:	68fb      	ldr	r3, [r7, #12]
    6568:	2200      	movs	r2, #0
    656a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	4a05      	ldr	r2, [pc, #20]	; (6584 <timer_init+0x68>)
    6570:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    6572:	2300      	movs	r3, #0
}
    6574:	4618      	mov	r0, r3
    6576:	3710      	adds	r7, #16
    6578:	46bd      	mov	sp, r7
    657a:	bd80      	pop	{r7, pc}
    657c:	000129a0 	.word	0x000129a0
    6580:	00007261 	.word	0x00007261
    6584:	000068a1 	.word	0x000068a1

00006588 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    6588:	b580      	push	{r7, lr}
    658a:	b082      	sub	sp, #8
    658c:	af00      	add	r7, sp, #0
    658e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	2b00      	cmp	r3, #0
    6594:	d005      	beq.n	65a2 <timer_start+0x1a>
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	681b      	ldr	r3, [r3, #0]
    659a:	2b00      	cmp	r3, #0
    659c:	d001      	beq.n	65a2 <timer_start+0x1a>
    659e:	2301      	movs	r3, #1
    65a0:	e000      	b.n	65a4 <timer_start+0x1c>
    65a2:	2300      	movs	r3, #0
    65a4:	f003 0301 	and.w	r3, r3, #1
    65a8:	b2db      	uxtb	r3, r3
    65aa:	2254      	movs	r2, #84	; 0x54
    65ac:	490e      	ldr	r1, [pc, #56]	; (65e8 <timer_start+0x60>)
    65ae:	4618      	mov	r0, r3
    65b0:	4b0e      	ldr	r3, [pc, #56]	; (65ec <timer_start+0x64>)
    65b2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    65b4:	687b      	ldr	r3, [r7, #4]
    65b6:	681b      	ldr	r3, [r3, #0]
    65b8:	699b      	ldr	r3, [r3, #24]
    65ba:	687a      	ldr	r2, [r7, #4]
    65bc:	3204      	adds	r2, #4
    65be:	4610      	mov	r0, r2
    65c0:	4798      	blx	r3
    65c2:	4603      	mov	r3, r0
    65c4:	2b00      	cmp	r3, #0
    65c6:	d002      	beq.n	65ce <timer_start+0x46>
		return ERR_DENIED;
    65c8:	f06f 0310 	mvn.w	r3, #16
    65cc:	e007      	b.n	65de <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	689b      	ldr	r3, [r3, #8]
    65d4:	687a      	ldr	r2, [r7, #4]
    65d6:	3204      	adds	r2, #4
    65d8:	4610      	mov	r0, r2
    65da:	4798      	blx	r3

	return ERR_NONE;
    65dc:	2300      	movs	r3, #0
}
    65de:	4618      	mov	r0, r3
    65e0:	3708      	adds	r7, #8
    65e2:	46bd      	mov	sp, r7
    65e4:	bd80      	pop	{r7, pc}
    65e6:	bf00      	nop
    65e8:	000129a0 	.word	0x000129a0
    65ec:	00007261 	.word	0x00007261

000065f0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b084      	sub	sp, #16
    65f4:	af00      	add	r7, sp, #0
    65f6:	6078      	str	r0, [r7, #4]
    65f8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	2b00      	cmp	r3, #0
    65fe:	d008      	beq.n	6612 <timer_add_task+0x22>
    6600:	683b      	ldr	r3, [r7, #0]
    6602:	2b00      	cmp	r3, #0
    6604:	d005      	beq.n	6612 <timer_add_task+0x22>
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	2b00      	cmp	r3, #0
    660c:	d001      	beq.n	6612 <timer_add_task+0x22>
    660e:	2301      	movs	r3, #1
    6610:	e000      	b.n	6614 <timer_add_task+0x24>
    6612:	2300      	movs	r3, #0
    6614:	f003 0301 	and.w	r3, r3, #1
    6618:	b2db      	uxtb	r3, r3
    661a:	227b      	movs	r2, #123	; 0x7b
    661c:	492f      	ldr	r1, [pc, #188]	; (66dc <timer_add_task+0xec>)
    661e:	4618      	mov	r0, r3
    6620:	4b2f      	ldr	r3, [pc, #188]	; (66e0 <timer_add_task+0xf0>)
    6622:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	7f1b      	ldrb	r3, [r3, #28]
    6628:	b2db      	uxtb	r3, r3
    662a:	f043 0301 	orr.w	r3, r3, #1
    662e:	b2da      	uxtb	r2, r3
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	3318      	adds	r3, #24
    6638:	6839      	ldr	r1, [r7, #0]
    663a:	4618      	mov	r0, r3
    663c:	4b29      	ldr	r3, [pc, #164]	; (66e4 <timer_add_task+0xf4>)
    663e:	4798      	blx	r3
    6640:	4603      	mov	r3, r0
    6642:	2b00      	cmp	r3, #0
    6644:	d00f      	beq.n	6666 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6646:	687b      	ldr	r3, [r7, #4]
    6648:	7f1b      	ldrb	r3, [r3, #28]
    664a:	b2db      	uxtb	r3, r3
    664c:	f023 0301 	bic.w	r3, r3, #1
    6650:	b2da      	uxtb	r2, r3
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6656:	2280      	movs	r2, #128	; 0x80
    6658:	4920      	ldr	r1, [pc, #128]	; (66dc <timer_add_task+0xec>)
    665a:	2000      	movs	r0, #0
    665c:	4b20      	ldr	r3, [pc, #128]	; (66e0 <timer_add_task+0xf0>)
    665e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6660:	f06f 0311 	mvn.w	r3, #17
    6664:	e035      	b.n	66d2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	695a      	ldr	r2, [r3, #20]
    666a:	683b      	ldr	r3, [r7, #0]
    666c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    666e:	687b      	ldr	r3, [r7, #4]
    6670:	f103 0018 	add.w	r0, r3, #24
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	695b      	ldr	r3, [r3, #20]
    6678:	461a      	mov	r2, r3
    667a:	6839      	ldr	r1, [r7, #0]
    667c:	4b1a      	ldr	r3, [pc, #104]	; (66e8 <timer_add_task+0xf8>)
    667e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	7f1b      	ldrb	r3, [r3, #28]
    6684:	b2db      	uxtb	r3, r3
    6686:	f023 0301 	bic.w	r3, r3, #1
    668a:	b2da      	uxtb	r2, r3
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	7f1b      	ldrb	r3, [r3, #28]
    6694:	b2db      	uxtb	r3, r3
    6696:	f003 0302 	and.w	r3, r3, #2
    669a:	2b00      	cmp	r3, #0
    669c:	d018      	beq.n	66d0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    669e:	f107 030c 	add.w	r3, r7, #12
    66a2:	4618      	mov	r0, r3
    66a4:	4b11      	ldr	r3, [pc, #68]	; (66ec <timer_add_task+0xfc>)
    66a6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	7f1b      	ldrb	r3, [r3, #28]
    66ac:	b2db      	uxtb	r3, r3
    66ae:	f023 0302 	bic.w	r3, r3, #2
    66b2:	b2da      	uxtb	r2, r3
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	69db      	ldr	r3, [r3, #28]
    66be:	687a      	ldr	r2, [r7, #4]
    66c0:	3204      	adds	r2, #4
    66c2:	4610      	mov	r0, r2
    66c4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    66c6:	f107 030c 	add.w	r3, r7, #12
    66ca:	4618      	mov	r0, r3
    66cc:	4b08      	ldr	r3, [pc, #32]	; (66f0 <timer_add_task+0x100>)
    66ce:	4798      	blx	r3
	}

	return ERR_NONE;
    66d0:	2300      	movs	r3, #0
}
    66d2:	4618      	mov	r0, r3
    66d4:	3710      	adds	r7, #16
    66d6:	46bd      	mov	sp, r7
    66d8:	bd80      	pop	{r7, pc}
    66da:	bf00      	nop
    66dc:	000129a0 	.word	0x000129a0
    66e0:	00007261 	.word	0x00007261
    66e4:	00007289 	.word	0x00007289
    66e8:	000067f1 	.word	0x000067f1
    66ec:	0000f2d1 	.word	0x0000f2d1
    66f0:	0000f2f7 	.word	0x0000f2f7

000066f4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b084      	sub	sp, #16
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
    66fc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	2b00      	cmp	r3, #0
    6702:	d008      	beq.n	6716 <timer_remove_task+0x22>
    6704:	683b      	ldr	r3, [r7, #0]
    6706:	2b00      	cmp	r3, #0
    6708:	d005      	beq.n	6716 <timer_remove_task+0x22>
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	681b      	ldr	r3, [r3, #0]
    670e:	2b00      	cmp	r3, #0
    6710:	d001      	beq.n	6716 <timer_remove_task+0x22>
    6712:	2301      	movs	r3, #1
    6714:	e000      	b.n	6718 <timer_remove_task+0x24>
    6716:	2300      	movs	r3, #0
    6718:	f003 0301 	and.w	r3, r3, #1
    671c:	b2db      	uxtb	r3, r3
    671e:	2296      	movs	r2, #150	; 0x96
    6720:	492d      	ldr	r1, [pc, #180]	; (67d8 <timer_remove_task+0xe4>)
    6722:	4618      	mov	r0, r3
    6724:	4b2d      	ldr	r3, [pc, #180]	; (67dc <timer_remove_task+0xe8>)
    6726:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	7f1b      	ldrb	r3, [r3, #28]
    672c:	b2db      	uxtb	r3, r3
    672e:	f043 0301 	orr.w	r3, r3, #1
    6732:	b2da      	uxtb	r2, r3
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	3318      	adds	r3, #24
    673c:	6839      	ldr	r1, [r7, #0]
    673e:	4618      	mov	r0, r3
    6740:	4b27      	ldr	r3, [pc, #156]	; (67e0 <timer_remove_task+0xec>)
    6742:	4798      	blx	r3
    6744:	4603      	mov	r3, r0
    6746:	f083 0301 	eor.w	r3, r3, #1
    674a:	b2db      	uxtb	r3, r3
    674c:	2b00      	cmp	r3, #0
    674e:	d00f      	beq.n	6770 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	7f1b      	ldrb	r3, [r3, #28]
    6754:	b2db      	uxtb	r3, r3
    6756:	f023 0301 	bic.w	r3, r3, #1
    675a:	b2da      	uxtb	r2, r3
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6760:	229b      	movs	r2, #155	; 0x9b
    6762:	491d      	ldr	r1, [pc, #116]	; (67d8 <timer_remove_task+0xe4>)
    6764:	2000      	movs	r0, #0
    6766:	4b1d      	ldr	r3, [pc, #116]	; (67dc <timer_remove_task+0xe8>)
    6768:	4798      	blx	r3
		return ERR_NOT_FOUND;
    676a:	f06f 0309 	mvn.w	r3, #9
    676e:	e02e      	b.n	67ce <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	3318      	adds	r3, #24
    6774:	6839      	ldr	r1, [r7, #0]
    6776:	4618      	mov	r0, r3
    6778:	4b1a      	ldr	r3, [pc, #104]	; (67e4 <timer_remove_task+0xf0>)
    677a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    677c:	687b      	ldr	r3, [r7, #4]
    677e:	7f1b      	ldrb	r3, [r3, #28]
    6780:	b2db      	uxtb	r3, r3
    6782:	f023 0301 	bic.w	r3, r3, #1
    6786:	b2da      	uxtb	r2, r3
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	7f1b      	ldrb	r3, [r3, #28]
    6790:	b2db      	uxtb	r3, r3
    6792:	f003 0302 	and.w	r3, r3, #2
    6796:	2b00      	cmp	r3, #0
    6798:	d018      	beq.n	67cc <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    679a:	f107 030c 	add.w	r3, r7, #12
    679e:	4618      	mov	r0, r3
    67a0:	4b11      	ldr	r3, [pc, #68]	; (67e8 <timer_remove_task+0xf4>)
    67a2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    67a4:	687b      	ldr	r3, [r7, #4]
    67a6:	7f1b      	ldrb	r3, [r3, #28]
    67a8:	b2db      	uxtb	r3, r3
    67aa:	f023 0302 	bic.w	r3, r3, #2
    67ae:	b2da      	uxtb	r2, r3
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	681b      	ldr	r3, [r3, #0]
    67b8:	69db      	ldr	r3, [r3, #28]
    67ba:	687a      	ldr	r2, [r7, #4]
    67bc:	3204      	adds	r2, #4
    67be:	4610      	mov	r0, r2
    67c0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    67c2:	f107 030c 	add.w	r3, r7, #12
    67c6:	4618      	mov	r0, r3
    67c8:	4b08      	ldr	r3, [pc, #32]	; (67ec <timer_remove_task+0xf8>)
    67ca:	4798      	blx	r3
	}

	return ERR_NONE;
    67cc:	2300      	movs	r3, #0
}
    67ce:	4618      	mov	r0, r3
    67d0:	3710      	adds	r7, #16
    67d2:	46bd      	mov	sp, r7
    67d4:	bd80      	pop	{r7, pc}
    67d6:	bf00      	nop
    67d8:	000129a0 	.word	0x000129a0
    67dc:	00007261 	.word	0x00007261
    67e0:	00007289 	.word	0x00007289
    67e4:	000073eb 	.word	0x000073eb
    67e8:	0000f2d1 	.word	0x0000f2d1
    67ec:	0000f2f7 	.word	0x0000f2f7

000067f0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    67f0:	b580      	push	{r7, lr}
    67f2:	b088      	sub	sp, #32
    67f4:	af00      	add	r7, sp, #0
    67f6:	60f8      	str	r0, [r7, #12]
    67f8:	60b9      	str	r1, [r7, #8]
    67fa:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    67fc:	2300      	movs	r3, #0
    67fe:	61bb      	str	r3, [r7, #24]
    6800:	68f8      	ldr	r0, [r7, #12]
    6802:	4b23      	ldr	r3, [pc, #140]	; (6890 <timer_add_timer_task+0xa0>)
    6804:	4798      	blx	r3
    6806:	6138      	str	r0, [r7, #16]

	if (!head) {
    6808:	693b      	ldr	r3, [r7, #16]
    680a:	2b00      	cmp	r3, #0
    680c:	d104      	bne.n	6818 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    680e:	68b9      	ldr	r1, [r7, #8]
    6810:	68f8      	ldr	r0, [r7, #12]
    6812:	4b20      	ldr	r3, [pc, #128]	; (6894 <timer_add_timer_task+0xa4>)
    6814:	4798      	blx	r3
		return;
    6816:	e037      	b.n	6888 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6818:	693b      	ldr	r3, [r7, #16]
    681a:	61fb      	str	r3, [r7, #28]
    681c:	e022      	b.n	6864 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    681e:	69fb      	ldr	r3, [r7, #28]
    6820:	685a      	ldr	r2, [r3, #4]
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	429a      	cmp	r2, r3
    6826:	d808      	bhi.n	683a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    6828:	69fb      	ldr	r3, [r7, #28]
    682a:	689a      	ldr	r2, [r3, #8]
    682c:	69fb      	ldr	r3, [r7, #28]
    682e:	6859      	ldr	r1, [r3, #4]
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	1acb      	subs	r3, r1, r3
    6834:	4413      	add	r3, r2
    6836:	617b      	str	r3, [r7, #20]
    6838:	e009      	b.n	684e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    683a:	69fb      	ldr	r3, [r7, #28]
    683c:	689a      	ldr	r2, [r3, #8]
    683e:	69fb      	ldr	r3, [r7, #28]
    6840:	685b      	ldr	r3, [r3, #4]
    6842:	441a      	add	r2, r3
    6844:	687b      	ldr	r3, [r7, #4]
    6846:	425b      	negs	r3, r3
    6848:	4413      	add	r3, r2
    684a:	3301      	adds	r3, #1
    684c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    684e:	68bb      	ldr	r3, [r7, #8]
    6850:	689a      	ldr	r2, [r3, #8]
    6852:	697b      	ldr	r3, [r7, #20]
    6854:	429a      	cmp	r2, r3
    6856:	d909      	bls.n	686c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    6858:	69fb      	ldr	r3, [r7, #28]
    685a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    685c:	69f8      	ldr	r0, [r7, #28]
    685e:	4b0e      	ldr	r3, [pc, #56]	; (6898 <timer_add_timer_task+0xa8>)
    6860:	4798      	blx	r3
    6862:	61f8      	str	r0, [r7, #28]
    6864:	69fb      	ldr	r3, [r7, #28]
    6866:	2b00      	cmp	r3, #0
    6868:	d1d9      	bne.n	681e <timer_add_timer_task+0x2e>
    686a:	e000      	b.n	686e <timer_add_timer_task+0x7e>
			break;
    686c:	bf00      	nop
	}

	if (it == head) {
    686e:	69fa      	ldr	r2, [r7, #28]
    6870:	693b      	ldr	r3, [r7, #16]
    6872:	429a      	cmp	r2, r3
    6874:	d104      	bne.n	6880 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    6876:	68b9      	ldr	r1, [r7, #8]
    6878:	68f8      	ldr	r0, [r7, #12]
    687a:	4b06      	ldr	r3, [pc, #24]	; (6894 <timer_add_timer_task+0xa4>)
    687c:	4798      	blx	r3
    687e:	e003      	b.n	6888 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    6880:	68b9      	ldr	r1, [r7, #8]
    6882:	69b8      	ldr	r0, [r7, #24]
    6884:	4b05      	ldr	r3, [pc, #20]	; (689c <timer_add_timer_task+0xac>)
    6886:	4798      	blx	r3
	}
}
    6888:	3720      	adds	r7, #32
    688a:	46bd      	mov	sp, r7
    688c:	bd80      	pop	{r7, pc}
    688e:	bf00      	nop
    6890:	000064e1 	.word	0x000064e1
    6894:	000072c1 	.word	0x000072c1
    6898:	000064f9 	.word	0x000064f9
    689c:	00007319 	.word	0x00007319

000068a0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b086      	sub	sp, #24
    68a4:	af00      	add	r7, sp, #0
    68a6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	3b04      	subs	r3, #4
    68ac:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    68ae:	693b      	ldr	r3, [r7, #16]
    68b0:	3318      	adds	r3, #24
    68b2:	4618      	mov	r0, r3
    68b4:	4b27      	ldr	r3, [pc, #156]	; (6954 <timer_process_counted+0xb4>)
    68b6:	4798      	blx	r3
    68b8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    68ba:	693b      	ldr	r3, [r7, #16]
    68bc:	695b      	ldr	r3, [r3, #20]
    68be:	1c5a      	adds	r2, r3, #1
    68c0:	693b      	ldr	r3, [r7, #16]
    68c2:	615a      	str	r2, [r3, #20]
    68c4:	693b      	ldr	r3, [r7, #16]
    68c6:	695b      	ldr	r3, [r3, #20]
    68c8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    68ca:	693b      	ldr	r3, [r7, #16]
    68cc:	7f1b      	ldrb	r3, [r3, #28]
    68ce:	b2db      	uxtb	r3, r3
    68d0:	f003 0301 	and.w	r3, r3, #1
    68d4:	2b00      	cmp	r3, #0
    68d6:	d106      	bne.n	68e6 <timer_process_counted+0x46>
    68d8:	693b      	ldr	r3, [r7, #16]
    68da:	7f1b      	ldrb	r3, [r3, #28]
    68dc:	b2db      	uxtb	r3, r3
    68de:	f003 0302 	and.w	r3, r3, #2
    68e2:	2b00      	cmp	r3, #0
    68e4:	d027      	beq.n	6936 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    68e6:	693b      	ldr	r3, [r7, #16]
    68e8:	7f1b      	ldrb	r3, [r3, #28]
    68ea:	b2db      	uxtb	r3, r3
    68ec:	f043 0302 	orr.w	r3, r3, #2
    68f0:	b2da      	uxtb	r2, r3
    68f2:	693b      	ldr	r3, [r7, #16]
    68f4:	771a      	strb	r2, [r3, #28]
		return;
    68f6:	e029      	b.n	694c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    68f8:	697b      	ldr	r3, [r7, #20]
    68fa:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    68fc:	693b      	ldr	r3, [r7, #16]
    68fe:	3318      	adds	r3, #24
    6900:	4618      	mov	r0, r3
    6902:	4b15      	ldr	r3, [pc, #84]	; (6958 <timer_process_counted+0xb8>)
    6904:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6906:	68bb      	ldr	r3, [r7, #8]
    6908:	7c1b      	ldrb	r3, [r3, #16]
    690a:	2b01      	cmp	r3, #1
    690c:	d109      	bne.n	6922 <timer_process_counted+0x82>
			tmp->time_label = time;
    690e:	68bb      	ldr	r3, [r7, #8]
    6910:	68fa      	ldr	r2, [r7, #12]
    6912:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    6914:	693b      	ldr	r3, [r7, #16]
    6916:	3318      	adds	r3, #24
    6918:	68fa      	ldr	r2, [r7, #12]
    691a:	68b9      	ldr	r1, [r7, #8]
    691c:	4618      	mov	r0, r3
    691e:	4b0f      	ldr	r3, [pc, #60]	; (695c <timer_process_counted+0xbc>)
    6920:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6922:	693b      	ldr	r3, [r7, #16]
    6924:	3318      	adds	r3, #24
    6926:	4618      	mov	r0, r3
    6928:	4b0a      	ldr	r3, [pc, #40]	; (6954 <timer_process_counted+0xb4>)
    692a:	4798      	blx	r3
    692c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    692e:	68bb      	ldr	r3, [r7, #8]
    6930:	68db      	ldr	r3, [r3, #12]
    6932:	68b8      	ldr	r0, [r7, #8]
    6934:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6936:	697b      	ldr	r3, [r7, #20]
    6938:	2b00      	cmp	r3, #0
    693a:	d007      	beq.n	694c <timer_process_counted+0xac>
    693c:	697b      	ldr	r3, [r7, #20]
    693e:	685b      	ldr	r3, [r3, #4]
    6940:	68fa      	ldr	r2, [r7, #12]
    6942:	1ad2      	subs	r2, r2, r3
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	689b      	ldr	r3, [r3, #8]
    6948:	429a      	cmp	r2, r3
    694a:	d2d5      	bcs.n	68f8 <timer_process_counted+0x58>
	}
}
    694c:	3718      	adds	r7, #24
    694e:	46bd      	mov	sp, r7
    6950:	bd80      	pop	{r7, pc}
    6952:	bf00      	nop
    6954:	000064e1 	.word	0x000064e1
    6958:	000073b9 	.word	0x000073b9
    695c:	000067f1 	.word	0x000067f1

00006960 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    6960:	b480      	push	{r7}
    6962:	b085      	sub	sp, #20
    6964:	af00      	add	r7, sp, #0
    6966:	4603      	mov	r3, r0
    6968:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    696a:	2300      	movs	r3, #0
    696c:	73fb      	strb	r3, [r7, #15]
    696e:	e029      	b.n	69c4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6970:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6974:	4a19      	ldr	r2, [pc, #100]	; (69dc <_usb_d_find_ep+0x7c>)
    6976:	015b      	lsls	r3, r3, #5
    6978:	4413      	add	r3, r2
    697a:	3301      	adds	r3, #1
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	79fa      	ldrb	r2, [r7, #7]
    6980:	429a      	cmp	r2, r3
    6982:	d102      	bne.n	698a <_usb_d_find_ep+0x2a>
			return i;
    6984:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6988:	e022      	b.n	69d0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    698a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    698e:	4a13      	ldr	r2, [pc, #76]	; (69dc <_usb_d_find_ep+0x7c>)
    6990:	015b      	lsls	r3, r3, #5
    6992:	4413      	add	r3, r2
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	2b00      	cmp	r3, #0
    6998:	d10e      	bne.n	69b8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    699a:	79fb      	ldrb	r3, [r7, #7]
    699c:	f003 030f 	and.w	r3, r3, #15
    69a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    69a4:	490d      	ldr	r1, [pc, #52]	; (69dc <_usb_d_find_ep+0x7c>)
    69a6:	0152      	lsls	r2, r2, #5
    69a8:	440a      	add	r2, r1
    69aa:	3201      	adds	r2, #1
    69ac:	7812      	ldrb	r2, [r2, #0]
    69ae:	4293      	cmp	r3, r2
    69b0:	d102      	bne.n	69b8 <_usb_d_find_ep+0x58>
			return i;
    69b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69b6:	e00b      	b.n	69d0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    69b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69bc:	b2db      	uxtb	r3, r3
    69be:	3301      	adds	r3, #1
    69c0:	b2db      	uxtb	r3, r3
    69c2:	73fb      	strb	r3, [r7, #15]
    69c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69c8:	2b03      	cmp	r3, #3
    69ca:	ddd1      	ble.n	6970 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    69cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    69d0:	4618      	mov	r0, r3
    69d2:	3714      	adds	r7, #20
    69d4:	46bd      	mov	sp, r7
    69d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    69da:	4770      	bx	lr
    69dc:	20001a84 	.word	0x20001a84

000069e0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	b088      	sub	sp, #32
    69e4:	af00      	add	r7, sp, #0
    69e6:	60ba      	str	r2, [r7, #8]
    69e8:	607b      	str	r3, [r7, #4]
    69ea:	4603      	mov	r3, r0
    69ec:	73fb      	strb	r3, [r7, #15]
    69ee:	460b      	mov	r3, r1
    69f0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    69f2:	68bb      	ldr	r3, [r7, #8]
    69f4:	617b      	str	r3, [r7, #20]
    69f6:	687b      	ldr	r3, [r7, #4]
    69f8:	61bb      	str	r3, [r7, #24]
    69fa:	7bbb      	ldrb	r3, [r7, #14]
    69fc:	2b00      	cmp	r3, #0
    69fe:	d004      	beq.n	6a0a <_usb_d_trans+0x2a>
    6a00:	7bfb      	ldrb	r3, [r7, #15]
    6a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a06:	b2db      	uxtb	r3, r3
    6a08:	e003      	b.n	6a12 <_usb_d_trans+0x32>
    6a0a:	7bfb      	ldrb	r3, [r7, #15]
    6a0c:	f003 030f 	and.w	r3, r3, #15
    6a10:	b2db      	uxtb	r3, r3
    6a12:	773b      	strb	r3, [r7, #28]
    6a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    6a18:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    6a1a:	f107 0314 	add.w	r3, r7, #20
    6a1e:	4618      	mov	r0, r3
    6a20:	4b03      	ldr	r3, [pc, #12]	; (6a30 <_usb_d_trans+0x50>)
    6a22:	4798      	blx	r3
    6a24:	4603      	mov	r3, r0
}
    6a26:	4618      	mov	r0, r3
    6a28:	3720      	adds	r7, #32
    6a2a:	46bd      	mov	sp, r7
    6a2c:	bd80      	pop	{r7, pc}
    6a2e:	bf00      	nop
    6a30:	0000e959 	.word	0x0000e959

00006a34 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    6a34:	b480      	push	{r7}
    6a36:	b085      	sub	sp, #20
    6a38:	af00      	add	r7, sp, #0
    6a3a:	60f8      	str	r0, [r7, #12]
    6a3c:	60b9      	str	r1, [r7, #8]
    6a3e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    6a40:	2300      	movs	r3, #0
}
    6a42:	4618      	mov	r0, r3
    6a44:	3714      	adds	r7, #20
    6a46:	46bd      	mov	sp, r7
    6a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a4c:	4770      	bx	lr
	...

00006a50 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    6a50:	b580      	push	{r7, lr}
    6a52:	b086      	sub	sp, #24
    6a54:	af00      	add	r7, sp, #0
    6a56:	4603      	mov	r3, r0
    6a58:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a5a:	79fb      	ldrb	r3, [r7, #7]
    6a5c:	4618      	mov	r0, r3
    6a5e:	4b2a      	ldr	r3, [pc, #168]	; (6b08 <usb_d_cb_trans_setup+0xb8>)
    6a60:	4798      	blx	r3
    6a62:	4603      	mov	r3, r0
    6a64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6a6a:	015b      	lsls	r3, r3, #5
    6a6c:	4a27      	ldr	r2, [pc, #156]	; (6b0c <usb_d_cb_trans_setup+0xbc>)
    6a6e:	4413      	add	r3, r2
    6a70:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    6a72:	693b      	ldr	r3, [r7, #16]
    6a74:	330c      	adds	r3, #12
    6a76:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6a78:	79fb      	ldrb	r3, [r7, #7]
    6a7a:	68f9      	ldr	r1, [r7, #12]
    6a7c:	4618      	mov	r0, r3
    6a7e:	4b24      	ldr	r3, [pc, #144]	; (6b10 <usb_d_cb_trans_setup+0xc0>)
    6a80:	4798      	blx	r3
    6a82:	4603      	mov	r3, r0
    6a84:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    6a86:	7afb      	ldrb	r3, [r7, #11]
    6a88:	2b08      	cmp	r3, #8
    6a8a:	d00d      	beq.n	6aa8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6a8c:	79fb      	ldrb	r3, [r7, #7]
    6a8e:	2101      	movs	r1, #1
    6a90:	4618      	mov	r0, r3
    6a92:	4b20      	ldr	r3, [pc, #128]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6a94:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6a96:	79fb      	ldrb	r3, [r7, #7]
    6a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a9c:	b2db      	uxtb	r3, r3
    6a9e:	2101      	movs	r1, #1
    6aa0:	4618      	mov	r0, r3
    6aa2:	4b1c      	ldr	r3, [pc, #112]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6aa4:	4798      	blx	r3
		return;
    6aa6:	e02b      	b.n	6b00 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6aa8:	79fb      	ldrb	r3, [r7, #7]
    6aaa:	2100      	movs	r1, #0
    6aac:	4618      	mov	r0, r3
    6aae:	4b19      	ldr	r3, [pc, #100]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6ab0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6ab2:	79fb      	ldrb	r3, [r7, #7]
    6ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	2100      	movs	r1, #0
    6abc:	4618      	mov	r0, r3
    6abe:	4b15      	ldr	r3, [pc, #84]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6ac0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6ac2:	693b      	ldr	r3, [r7, #16]
    6ac4:	2201      	movs	r2, #1
    6ac6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    6ac8:	693b      	ldr	r3, [r7, #16]
    6aca:	695b      	ldr	r3, [r3, #20]
    6acc:	79fa      	ldrb	r2, [r7, #7]
    6ace:	68f9      	ldr	r1, [r7, #12]
    6ad0:	4610      	mov	r0, r2
    6ad2:	4798      	blx	r3
    6ad4:	4603      	mov	r3, r0
    6ad6:	f083 0301 	eor.w	r3, r3, #1
    6ada:	b2db      	uxtb	r3, r3
    6adc:	2b00      	cmp	r3, #0
    6ade:	d00f      	beq.n	6b00 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6ae0:	693b      	ldr	r3, [r7, #16]
    6ae2:	2205      	movs	r2, #5
    6ae4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6ae6:	79fb      	ldrb	r3, [r7, #7]
    6ae8:	2101      	movs	r1, #1
    6aea:	4618      	mov	r0, r3
    6aec:	4b09      	ldr	r3, [pc, #36]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6aee:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6af0:	79fb      	ldrb	r3, [r7, #7]
    6af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6af6:	b2db      	uxtb	r3, r3
    6af8:	2101      	movs	r1, #1
    6afa:	4618      	mov	r0, r3
    6afc:	4b05      	ldr	r3, [pc, #20]	; (6b14 <usb_d_cb_trans_setup+0xc4>)
    6afe:	4798      	blx	r3
	}
}
    6b00:	3718      	adds	r7, #24
    6b02:	46bd      	mov	sp, r7
    6b04:	bd80      	pop	{r7, pc}
    6b06:	bf00      	nop
    6b08:	00006961 	.word	0x00006961
    6b0c:	20001a84 	.word	0x20001a84
    6b10:	0000e8b1 	.word	0x0000e8b1
    6b14:	0000e729 	.word	0x0000e729

00006b18 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	b084      	sub	sp, #16
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	4603      	mov	r3, r0
    6b20:	6039      	str	r1, [r7, #0]
    6b22:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b24:	79fb      	ldrb	r3, [r7, #7]
    6b26:	4618      	mov	r0, r3
    6b28:	4b0d      	ldr	r3, [pc, #52]	; (6b60 <usb_d_cb_trans_more+0x48>)
    6b2a:	4798      	blx	r3
    6b2c:	4603      	mov	r3, r0
    6b2e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6b34:	015b      	lsls	r3, r3, #5
    6b36:	4a0b      	ldr	r2, [pc, #44]	; (6b64 <usb_d_cb_trans_more+0x4c>)
    6b38:	4413      	add	r3, r2
    6b3a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6b3c:	68bb      	ldr	r3, [r7, #8]
    6b3e:	789b      	ldrb	r3, [r3, #2]
    6b40:	2b03      	cmp	r3, #3
    6b42:	d107      	bne.n	6b54 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    6b44:	68bb      	ldr	r3, [r7, #8]
    6b46:	699b      	ldr	r3, [r3, #24]
    6b48:	79fa      	ldrb	r2, [r7, #7]
    6b4a:	6839      	ldr	r1, [r7, #0]
    6b4c:	4610      	mov	r0, r2
    6b4e:	4798      	blx	r3
    6b50:	4603      	mov	r3, r0
    6b52:	e000      	b.n	6b56 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    6b54:	2300      	movs	r3, #0
}
    6b56:	4618      	mov	r0, r3
    6b58:	3710      	adds	r7, #16
    6b5a:	46bd      	mov	sp, r7
    6b5c:	bd80      	pop	{r7, pc}
    6b5e:	bf00      	nop
    6b60:	00006961 	.word	0x00006961
    6b64:	20001a84 	.word	0x20001a84

00006b68 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    6b68:	b590      	push	{r4, r7, lr}
    6b6a:	b087      	sub	sp, #28
    6b6c:	af02      	add	r7, sp, #8
    6b6e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	789b      	ldrb	r3, [r3, #2]
    6b74:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	7b1b      	ldrb	r3, [r3, #12]
    6b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6b7e:	2b00      	cmp	r3, #0
    6b80:	bf14      	ite	ne
    6b82:	2301      	movne	r3, #1
    6b84:	2300      	moveq	r3, #0
    6b86:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    6b88:	7bfb      	ldrb	r3, [r7, #15]
    6b8a:	2b03      	cmp	r3, #3
    6b8c:	d13a      	bne.n	6c04 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	69db      	ldr	r3, [r3, #28]
    6b92:	687a      	ldr	r2, [r7, #4]
    6b94:	7850      	ldrb	r0, [r2, #1]
    6b96:	687a      	ldr	r2, [r7, #4]
    6b98:	320c      	adds	r2, #12
    6b9a:	2101      	movs	r1, #1
    6b9c:	4798      	blx	r3
    6b9e:	4603      	mov	r3, r0
    6ba0:	737b      	strb	r3, [r7, #13]
		if (err) {
    6ba2:	7b7b      	ldrb	r3, [r7, #13]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d015      	beq.n	6bd4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	2205      	movs	r2, #5
    6bac:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	2202      	movs	r2, #2
    6bb2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6bb4:	7bbb      	ldrb	r3, [r7, #14]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d002      	beq.n	6bc0 <usb_d_ctrl_trans_done+0x58>
    6bba:	687b      	ldr	r3, [r7, #4]
    6bbc:	785b      	ldrb	r3, [r3, #1]
    6bbe:	e004      	b.n	6bca <usb_d_ctrl_trans_done+0x62>
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	785b      	ldrb	r3, [r3, #1]
    6bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	2101      	movs	r1, #1
    6bcc:	4618      	mov	r0, r3
    6bce:	4b15      	ldr	r3, [pc, #84]	; (6c24 <usb_d_ctrl_trans_done+0xbc>)
    6bd0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    6bd2:	e022      	b.n	6c1a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	2204      	movs	r2, #4
    6bd8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	7858      	ldrb	r0, [r3, #1]
    6bde:	7bbb      	ldrb	r3, [r7, #14]
    6be0:	2b00      	cmp	r3, #0
    6be2:	bf14      	ite	ne
    6be4:	2301      	movne	r3, #1
    6be6:	2300      	moveq	r3, #0
    6be8:	b2db      	uxtb	r3, r3
    6bea:	f083 0301 	eor.w	r3, r3, #1
    6bee:	b2db      	uxtb	r3, r3
    6bf0:	f003 0301 	and.w	r3, r3, #1
    6bf4:	b2d9      	uxtb	r1, r3
    6bf6:	2301      	movs	r3, #1
    6bf8:	9300      	str	r3, [sp, #0]
    6bfa:	2300      	movs	r3, #0
    6bfc:	2200      	movs	r2, #0
    6bfe:	4c0a      	ldr	r4, [pc, #40]	; (6c28 <usb_d_ctrl_trans_done+0xc0>)
    6c00:	47a0      	blx	r4
}
    6c02:	e00a      	b.n	6c1a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	69db      	ldr	r3, [r3, #28]
    6c08:	687a      	ldr	r2, [r7, #4]
    6c0a:	7850      	ldrb	r0, [r2, #1]
    6c0c:	687a      	ldr	r2, [r7, #4]
    6c0e:	320c      	adds	r2, #12
    6c10:	2100      	movs	r1, #0
    6c12:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	2202      	movs	r2, #2
    6c18:	709a      	strb	r2, [r3, #2]
}
    6c1a:	bf00      	nop
    6c1c:	3714      	adds	r7, #20
    6c1e:	46bd      	mov	sp, r7
    6c20:	bd90      	pop	{r4, r7, pc}
    6c22:	bf00      	nop
    6c24:	0000e729 	.word	0x0000e729
    6c28:	000069e1 	.word	0x000069e1

00006c2c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b086      	sub	sp, #24
    6c30:	af00      	add	r7, sp, #0
    6c32:	4603      	mov	r3, r0
    6c34:	60b9      	str	r1, [r7, #8]
    6c36:	607a      	str	r2, [r7, #4]
    6c38:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6c3a:	7bfb      	ldrb	r3, [r7, #15]
    6c3c:	4618      	mov	r0, r3
    6c3e:	4b2f      	ldr	r3, [pc, #188]	; (6cfc <_usb_d_cb_trans_done+0xd0>)
    6c40:	4798      	blx	r3
    6c42:	4603      	mov	r3, r0
    6c44:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6c4a:	015b      	lsls	r3, r3, #5
    6c4c:	4a2c      	ldr	r2, [pc, #176]	; (6d00 <_usb_d_cb_trans_done+0xd4>)
    6c4e:	4413      	add	r3, r2
    6c50:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    6c52:	68bb      	ldr	r3, [r7, #8]
    6c54:	2b00      	cmp	r3, #0
    6c56:	d10e      	bne.n	6c76 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6c58:	693b      	ldr	r3, [r7, #16]
    6c5a:	2200      	movs	r2, #0
    6c5c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6c5e:	693b      	ldr	r3, [r7, #16]
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d103      	bne.n	6c6e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    6c66:	6938      	ldr	r0, [r7, #16]
    6c68:	4b26      	ldr	r3, [pc, #152]	; (6d04 <_usb_d_cb_trans_done+0xd8>)
    6c6a:	4798      	blx	r3
			return;
    6c6c:	e043      	b.n	6cf6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6c6e:	693b      	ldr	r3, [r7, #16]
    6c70:	2201      	movs	r2, #1
    6c72:	709a      	strb	r2, [r3, #2]
    6c74:	e038      	b.n	6ce8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    6c76:	68bb      	ldr	r3, [r7, #8]
    6c78:	2b01      	cmp	r3, #1
    6c7a:	d113      	bne.n	6ca4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6c7c:	693b      	ldr	r3, [r7, #16]
    6c7e:	2202      	movs	r2, #2
    6c80:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6c82:	693b      	ldr	r3, [r7, #16]
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d108      	bne.n	6c9c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6c8a:	693b      	ldr	r3, [r7, #16]
    6c8c:	2202      	movs	r2, #2
    6c8e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6c90:	7bfb      	ldrb	r3, [r7, #15]
    6c92:	2100      	movs	r1, #0
    6c94:	4618      	mov	r0, r3
    6c96:	4b1c      	ldr	r3, [pc, #112]	; (6d08 <_usb_d_cb_trans_done+0xdc>)
    6c98:	4798      	blx	r3
    6c9a:	e025      	b.n	6ce8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6c9c:	693b      	ldr	r3, [r7, #16]
    6c9e:	2205      	movs	r2, #5
    6ca0:	709a      	strb	r2, [r3, #2]
    6ca2:	e021      	b.n	6ce8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    6ca4:	68bb      	ldr	r3, [r7, #8]
    6ca6:	2b02      	cmp	r3, #2
    6ca8:	d10e      	bne.n	6cc8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6caa:	693b      	ldr	r3, [r7, #16]
    6cac:	2204      	movs	r2, #4
    6cae:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6cb0:	693b      	ldr	r3, [r7, #16]
    6cb2:	781b      	ldrb	r3, [r3, #0]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d103      	bne.n	6cc0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6cb8:	693b      	ldr	r3, [r7, #16]
    6cba:	2202      	movs	r2, #2
    6cbc:	709a      	strb	r2, [r3, #2]
			return;
    6cbe:	e01a      	b.n	6cf6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6cc0:	693b      	ldr	r3, [r7, #16]
    6cc2:	2201      	movs	r2, #1
    6cc4:	709a      	strb	r2, [r3, #2]
    6cc6:	e00f      	b.n	6ce8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    6cc8:	68bb      	ldr	r3, [r7, #8]
    6cca:	2b03      	cmp	r3, #3
    6ccc:	d106      	bne.n	6cdc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6cce:	693b      	ldr	r3, [r7, #16]
    6cd0:	2200      	movs	r2, #0
    6cd2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6cd4:	693b      	ldr	r3, [r7, #16]
    6cd6:	2205      	movs	r2, #5
    6cd8:	70da      	strb	r2, [r3, #3]
    6cda:	e005      	b.n	6ce8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6cdc:	693b      	ldr	r3, [r7, #16]
    6cde:	2206      	movs	r2, #6
    6ce0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6ce2:	693b      	ldr	r3, [r7, #16]
    6ce4:	2206      	movs	r2, #6
    6ce6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6ce8:	693b      	ldr	r3, [r7, #16]
    6cea:	69db      	ldr	r3, [r3, #28]
    6cec:	693a      	ldr	r2, [r7, #16]
    6cee:	78d1      	ldrb	r1, [r2, #3]
    6cf0:	687a      	ldr	r2, [r7, #4]
    6cf2:	7bf8      	ldrb	r0, [r7, #15]
    6cf4:	4798      	blx	r3
}
    6cf6:	3718      	adds	r7, #24
    6cf8:	46bd      	mov	sp, r7
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	00006961 	.word	0x00006961
    6d00:	20001a84 	.word	0x20001a84
    6d04:	00006b69 	.word	0x00006b69
    6d08:	0000e729 	.word	0x0000e729

00006d0c <usb_d_init>:

int32_t usb_d_init(void)
{
    6d0c:	b580      	push	{r7, lr}
    6d0e:	b082      	sub	sp, #8
    6d10:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    6d12:	4b21      	ldr	r3, [pc, #132]	; (6d98 <usb_d_init+0x8c>)
    6d14:	4798      	blx	r3
    6d16:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    6d18:	683b      	ldr	r3, [r7, #0]
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	da01      	bge.n	6d22 <usb_d_init+0x16>
		return rc;
    6d1e:	683b      	ldr	r3, [r7, #0]
    6d20:	e036      	b.n	6d90 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6d22:	2280      	movs	r2, #128	; 0x80
    6d24:	2100      	movs	r1, #0
    6d26:	481d      	ldr	r0, [pc, #116]	; (6d9c <usb_d_init+0x90>)
    6d28:	4b1d      	ldr	r3, [pc, #116]	; (6da0 <usb_d_init+0x94>)
    6d2a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6d2c:	2300      	movs	r3, #0
    6d2e:	71fb      	strb	r3, [r7, #7]
    6d30:	e01e      	b.n	6d70 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6d32:	79fb      	ldrb	r3, [r7, #7]
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <usb_d_init+0x90>)
    6d36:	015b      	lsls	r3, r3, #5
    6d38:	4413      	add	r3, r2
    6d3a:	3301      	adds	r3, #1
    6d3c:	22ff      	movs	r2, #255	; 0xff
    6d3e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6d40:	79fb      	ldrb	r3, [r7, #7]
    6d42:	4a16      	ldr	r2, [pc, #88]	; (6d9c <usb_d_init+0x90>)
    6d44:	015b      	lsls	r3, r3, #5
    6d46:	4413      	add	r3, r2
    6d48:	3314      	adds	r3, #20
    6d4a:	4a16      	ldr	r2, [pc, #88]	; (6da4 <usb_d_init+0x98>)
    6d4c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6d4e:	79fb      	ldrb	r3, [r7, #7]
    6d50:	4a12      	ldr	r2, [pc, #72]	; (6d9c <usb_d_init+0x90>)
    6d52:	015b      	lsls	r3, r3, #5
    6d54:	4413      	add	r3, r2
    6d56:	3318      	adds	r3, #24
    6d58:	4a12      	ldr	r2, [pc, #72]	; (6da4 <usb_d_init+0x98>)
    6d5a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6d5c:	79fb      	ldrb	r3, [r7, #7]
    6d5e:	4a0f      	ldr	r2, [pc, #60]	; (6d9c <usb_d_init+0x90>)
    6d60:	015b      	lsls	r3, r3, #5
    6d62:	4413      	add	r3, r2
    6d64:	331c      	adds	r3, #28
    6d66:	4a0f      	ldr	r2, [pc, #60]	; (6da4 <usb_d_init+0x98>)
    6d68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6d6a:	79fb      	ldrb	r3, [r7, #7]
    6d6c:	3301      	adds	r3, #1
    6d6e:	71fb      	strb	r3, [r7, #7]
    6d70:	79fb      	ldrb	r3, [r7, #7]
    6d72:	2b03      	cmp	r3, #3
    6d74:	d9dd      	bls.n	6d32 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6d76:	490c      	ldr	r1, [pc, #48]	; (6da8 <usb_d_init+0x9c>)
    6d78:	2000      	movs	r0, #0
    6d7a:	4b0c      	ldr	r3, [pc, #48]	; (6dac <usb_d_init+0xa0>)
    6d7c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    6d7e:	490c      	ldr	r1, [pc, #48]	; (6db0 <usb_d_init+0xa4>)
    6d80:	2001      	movs	r0, #1
    6d82:	4b0a      	ldr	r3, [pc, #40]	; (6dac <usb_d_init+0xa0>)
    6d84:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6d86:	490b      	ldr	r1, [pc, #44]	; (6db4 <usb_d_init+0xa8>)
    6d88:	2002      	movs	r0, #2
    6d8a:	4b08      	ldr	r3, [pc, #32]	; (6dac <usb_d_init+0xa0>)
    6d8c:	4798      	blx	r3
	return ERR_NONE;
    6d8e:	2300      	movs	r3, #0
}
    6d90:	4618      	mov	r0, r3
    6d92:	3708      	adds	r7, #8
    6d94:	46bd      	mov	sp, r7
    6d96:	bd80      	pop	{r7, pc}
    6d98:	0000df71 	.word	0x0000df71
    6d9c:	20001a84 	.word	0x20001a84
    6da0:	00011c4d 	.word	0x00011c4d
    6da4:	00006a35 	.word	0x00006a35
    6da8:	00006a51 	.word	0x00006a51
    6dac:	0000eb65 	.word	0x0000eb65
    6db0:	00006b19 	.word	0x00006b19
    6db4:	00006c2d 	.word	0x00006c2d

00006db8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b082      	sub	sp, #8
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	4603      	mov	r3, r0
    6dc0:	6039      	str	r1, [r7, #0]
    6dc2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6dc4:	79fb      	ldrb	r3, [r7, #7]
    6dc6:	6839      	ldr	r1, [r7, #0]
    6dc8:	4618      	mov	r0, r3
    6dca:	4b03      	ldr	r3, [pc, #12]	; (6dd8 <usb_d_register_callback+0x20>)
    6dcc:	4798      	blx	r3
}
    6dce:	bf00      	nop
    6dd0:	3708      	adds	r7, #8
    6dd2:	46bd      	mov	sp, r7
    6dd4:	bd80      	pop	{r7, pc}
    6dd6:	bf00      	nop
    6dd8:	0000eb1d 	.word	0x0000eb1d

00006ddc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <usb_d_enable+0x10>)
    6de2:	4798      	blx	r3
    6de4:	4603      	mov	r3, r0
}
    6de6:	4618      	mov	r0, r3
    6de8:	bd80      	pop	{r7, pc}
    6dea:	bf00      	nop
    6dec:	0000e061 	.word	0x0000e061

00006df0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    6df4:	4b01      	ldr	r3, [pc, #4]	; (6dfc <usb_d_attach+0xc>)
    6df6:	4798      	blx	r3
}
    6df8:	bf00      	nop
    6dfa:	bd80      	pop	{r7, pc}
    6dfc:	0000e0e5 	.word	0x0000e0e5

00006e00 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b082      	sub	sp, #8
    6e04:	af00      	add	r7, sp, #0
    6e06:	4603      	mov	r3, r0
    6e08:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    6e0a:	79fb      	ldrb	r3, [r7, #7]
    6e0c:	4618      	mov	r0, r3
    6e0e:	4b03      	ldr	r3, [pc, #12]	; (6e1c <usb_d_set_address+0x1c>)
    6e10:	4798      	blx	r3
}
    6e12:	bf00      	nop
    6e14:	3708      	adds	r7, #8
    6e16:	46bd      	mov	sp, r7
    6e18:	bd80      	pop	{r7, pc}
    6e1a:	bf00      	nop
    6e1c:	0000e0f9 	.word	0x0000e0f9

00006e20 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    6e20:	b580      	push	{r7, lr}
    6e22:	b082      	sub	sp, #8
    6e24:	af00      	add	r7, sp, #0
    6e26:	4603      	mov	r3, r0
    6e28:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    6e2a:	79fb      	ldrb	r3, [r7, #7]
    6e2c:	b29b      	uxth	r3, r3
    6e2e:	461a      	mov	r2, r3
    6e30:	2100      	movs	r1, #0
    6e32:	2000      	movs	r0, #0
    6e34:	4b03      	ldr	r3, [pc, #12]	; (6e44 <usb_d_ep0_init+0x24>)
    6e36:	4798      	blx	r3
    6e38:	4603      	mov	r3, r0
}
    6e3a:	4618      	mov	r0, r3
    6e3c:	3708      	adds	r7, #8
    6e3e:	46bd      	mov	sp, r7
    6e40:	bd80      	pop	{r7, pc}
    6e42:	bf00      	nop
    6e44:	00006e49 	.word	0x00006e49

00006e48 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	b086      	sub	sp, #24
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	4603      	mov	r3, r0
    6e50:	71fb      	strb	r3, [r7, #7]
    6e52:	460b      	mov	r3, r1
    6e54:	71bb      	strb	r3, [r7, #6]
    6e56:	4613      	mov	r3, r2
    6e58:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e5a:	79fb      	ldrb	r3, [r7, #7]
    6e5c:	4618      	mov	r0, r3
    6e5e:	4b1e      	ldr	r3, [pc, #120]	; (6ed8 <usb_d_ep_init+0x90>)
    6e60:	4798      	blx	r3
    6e62:	4603      	mov	r3, r0
    6e64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6e6a:	015b      	lsls	r3, r3, #5
    6e6c:	4a1b      	ldr	r2, [pc, #108]	; (6edc <usb_d_ep_init+0x94>)
    6e6e:	4413      	add	r3, r2
    6e70:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    6e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6e76:	2b00      	cmp	r3, #0
    6e78:	db02      	blt.n	6e80 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    6e7a:	f06f 0313 	mvn.w	r3, #19
    6e7e:	e027      	b.n	6ed0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6e80:	20ff      	movs	r0, #255	; 0xff
    6e82:	4b15      	ldr	r3, [pc, #84]	; (6ed8 <usb_d_ep_init+0x90>)
    6e84:	4798      	blx	r3
    6e86:	4603      	mov	r3, r0
    6e88:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    6e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	da02      	bge.n	6e98 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    6e92:	f06f 0314 	mvn.w	r3, #20
    6e96:	e01b      	b.n	6ed0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    6e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6e9c:	015b      	lsls	r3, r3, #5
    6e9e:	4a0f      	ldr	r2, [pc, #60]	; (6edc <usb_d_ep_init+0x94>)
    6ea0:	4413      	add	r3, r2
    6ea2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6ea4:	88ba      	ldrh	r2, [r7, #4]
    6ea6:	79b9      	ldrb	r1, [r7, #6]
    6ea8:	79fb      	ldrb	r3, [r7, #7]
    6eaa:	4618      	mov	r0, r3
    6eac:	4b0c      	ldr	r3, [pc, #48]	; (6ee0 <usb_d_ep_init+0x98>)
    6eae:	4798      	blx	r3
    6eb0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    6eb2:	68fb      	ldr	r3, [r7, #12]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	da01      	bge.n	6ebc <usb_d_ep_init+0x74>
		return rc;
    6eb8:	68fb      	ldr	r3, [r7, #12]
    6eba:	e009      	b.n	6ed0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    6ebc:	693b      	ldr	r3, [r7, #16]
    6ebe:	79fa      	ldrb	r2, [r7, #7]
    6ec0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6ec2:	79bb      	ldrb	r3, [r7, #6]
    6ec4:	f003 0303 	and.w	r3, r3, #3
    6ec8:	b2da      	uxtb	r2, r3
    6eca:	693b      	ldr	r3, [r7, #16]
    6ecc:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    6ece:	2300      	movs	r3, #0
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	3718      	adds	r7, #24
    6ed4:	46bd      	mov	sp, r7
    6ed6:	bd80      	pop	{r7, pc}
    6ed8:	00006961 	.word	0x00006961
    6edc:	20001a84 	.word	0x20001a84
    6ee0:	0000e199 	.word	0x0000e199

00006ee4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b084      	sub	sp, #16
    6ee8:	af00      	add	r7, sp, #0
    6eea:	4603      	mov	r3, r0
    6eec:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6eee:	79fb      	ldrb	r3, [r7, #7]
    6ef0:	4618      	mov	r0, r3
    6ef2:	4b0d      	ldr	r3, [pc, #52]	; (6f28 <usb_d_ep_deinit+0x44>)
    6ef4:	4798      	blx	r3
    6ef6:	4603      	mov	r3, r0
    6ef8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6efe:	015b      	lsls	r3, r3, #5
    6f00:	4a0a      	ldr	r2, [pc, #40]	; (6f2c <usb_d_ep_deinit+0x48>)
    6f02:	4413      	add	r3, r2
    6f04:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    6f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	db07      	blt.n	6f1e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    6f0e:	79fb      	ldrb	r3, [r7, #7]
    6f10:	4618      	mov	r0, r3
    6f12:	4b07      	ldr	r3, [pc, #28]	; (6f30 <usb_d_ep_deinit+0x4c>)
    6f14:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    6f16:	68bb      	ldr	r3, [r7, #8]
    6f18:	22ff      	movs	r2, #255	; 0xff
    6f1a:	705a      	strb	r2, [r3, #1]
    6f1c:	e000      	b.n	6f20 <usb_d_ep_deinit+0x3c>
		return;
    6f1e:	bf00      	nop
}
    6f20:	3710      	adds	r7, #16
    6f22:	46bd      	mov	sp, r7
    6f24:	bd80      	pop	{r7, pc}
    6f26:	bf00      	nop
    6f28:	00006961 	.word	0x00006961
    6f2c:	20001a84 	.word	0x20001a84
    6f30:	0000e2cd 	.word	0x0000e2cd

00006f34 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b086      	sub	sp, #24
    6f38:	af00      	add	r7, sp, #0
    6f3a:	4603      	mov	r3, r0
    6f3c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6f3e:	79fb      	ldrb	r3, [r7, #7]
    6f40:	4618      	mov	r0, r3
    6f42:	4b15      	ldr	r3, [pc, #84]	; (6f98 <usb_d_ep_enable+0x64>)
    6f44:	4798      	blx	r3
    6f46:	4603      	mov	r3, r0
    6f48:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f4e:	015b      	lsls	r3, r3, #5
    6f50:	4a12      	ldr	r2, [pc, #72]	; (6f9c <usb_d_ep_enable+0x68>)
    6f52:	4413      	add	r3, r2
    6f54:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    6f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	da02      	bge.n	6f64 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    6f5e:	f06f 0311 	mvn.w	r3, #17
    6f62:	e014      	b.n	6f8e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6f64:	693b      	ldr	r3, [r7, #16]
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d101      	bne.n	6f70 <usb_d_ep_enable+0x3c>
    6f6c:	2202      	movs	r2, #2
    6f6e:	e000      	b.n	6f72 <usb_d_ep_enable+0x3e>
    6f70:	2201      	movs	r2, #1
    6f72:	693b      	ldr	r3, [r7, #16]
    6f74:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    6f76:	79fb      	ldrb	r3, [r7, #7]
    6f78:	4618      	mov	r0, r3
    6f7a:	4b09      	ldr	r3, [pc, #36]	; (6fa0 <usb_d_ep_enable+0x6c>)
    6f7c:	4798      	blx	r3
    6f7e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    6f80:	68fb      	ldr	r3, [r7, #12]
    6f82:	2b00      	cmp	r3, #0
    6f84:	da02      	bge.n	6f8c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6f86:	693b      	ldr	r3, [r7, #16]
    6f88:	2200      	movs	r2, #0
    6f8a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    6f8c:	68fb      	ldr	r3, [r7, #12]
}
    6f8e:	4618      	mov	r0, r3
    6f90:	3718      	adds	r7, #24
    6f92:	46bd      	mov	sp, r7
    6f94:	bd80      	pop	{r7, pc}
    6f96:	bf00      	nop
    6f98:	00006961 	.word	0x00006961
    6f9c:	20001a84 	.word	0x20001a84
    6fa0:	0000e3b1 	.word	0x0000e3b1

00006fa4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6fa4:	b590      	push	{r4, r7, lr}
    6fa6:	b08d      	sub	sp, #52	; 0x34
    6fa8:	af02      	add	r7, sp, #8
    6faa:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	7a1b      	ldrb	r3, [r3, #8]
    6fb0:	4618      	mov	r0, r3
    6fb2:	4b51      	ldr	r3, [pc, #324]	; (70f8 <usb_d_ep_transfer+0x154>)
    6fb4:	4798      	blx	r3
    6fb6:	4603      	mov	r3, r0
    6fb8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    6fba:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6fbe:	015b      	lsls	r3, r3, #5
    6fc0:	4a4e      	ldr	r2, [pc, #312]	; (70fc <usb_d_ep_transfer+0x158>)
    6fc2:	4413      	add	r3, r2
    6fc4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	7a1b      	ldrb	r3, [r3, #8]
    6fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6fce:	2b00      	cmp	r3, #0
    6fd0:	bf14      	ite	ne
    6fd2:	2301      	movne	r3, #1
    6fd4:	2300      	moveq	r3, #0
    6fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	7a5b      	ldrb	r3, [r3, #9]
    6fde:	2b00      	cmp	r3, #0
    6fe0:	bf14      	ite	ne
    6fe2:	2301      	movne	r3, #1
    6fe4:	2300      	moveq	r3, #0
    6fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    6fea:	687b      	ldr	r3, [r7, #4]
    6fec:	685b      	ldr	r3, [r3, #4]
    6fee:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    6ff0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	da02      	bge.n	6ffe <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    6ff8:	f06f 0311 	mvn.w	r3, #17
    6ffc:	e077      	b.n	70ee <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    6ffe:	f107 0308 	add.w	r3, r7, #8
    7002:	4618      	mov	r0, r3
    7004:	4b3e      	ldr	r3, [pc, #248]	; (7100 <usb_d_ep_transfer+0x15c>)
    7006:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7008:	69bb      	ldr	r3, [r7, #24]
    700a:	789b      	ldrb	r3, [r3, #2]
    700c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    700e:	7bfb      	ldrb	r3, [r7, #15]
    7010:	b2db      	uxtb	r3, r3
    7012:	2b01      	cmp	r3, #1
    7014:	d10c      	bne.n	7030 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7016:	69bb      	ldr	r3, [r7, #24]
    7018:	2203      	movs	r2, #3
    701a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    701c:	f107 0308 	add.w	r3, r7, #8
    7020:	4618      	mov	r0, r3
    7022:	4b38      	ldr	r3, [pc, #224]	; (7104 <usb_d_ep_transfer+0x160>)
    7024:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7026:	69bb      	ldr	r3, [r7, #24]
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	2b00      	cmp	r3, #0
    702c:	d151      	bne.n	70d2 <usb_d_ep_transfer+0x12e>
    702e:	e017      	b.n	7060 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7030:	f107 0308 	add.w	r3, r7, #8
    7034:	4618      	mov	r0, r3
    7036:	4b33      	ldr	r3, [pc, #204]	; (7104 <usb_d_ep_transfer+0x160>)
    7038:	4798      	blx	r3
		switch (state) {
    703a:	7bfb      	ldrb	r3, [r7, #15]
    703c:	b2db      	uxtb	r3, r3
    703e:	2b05      	cmp	r3, #5
    7040:	d004      	beq.n	704c <usb_d_ep_transfer+0xa8>
    7042:	2b06      	cmp	r3, #6
    7044:	d004      	beq.n	7050 <usb_d_ep_transfer+0xac>
    7046:	2b00      	cmp	r3, #0
    7048:	d005      	beq.n	7056 <usb_d_ep_transfer+0xb2>
    704a:	e007      	b.n	705c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    704c:	2302      	movs	r3, #2
    704e:	e04e      	b.n	70ee <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7050:	f06f 030f 	mvn.w	r3, #15
    7054:	e04b      	b.n	70ee <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7056:	f06f 0312 	mvn.w	r3, #18
    705a:	e048      	b.n	70ee <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    705c:	2301      	movs	r3, #1
    705e:	e046      	b.n	70ee <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7060:	69bb      	ldr	r3, [r7, #24]
    7062:	7c9b      	ldrb	r3, [r3, #18]
    7064:	b29a      	uxth	r2, r3
    7066:	69bb      	ldr	r3, [r7, #24]
    7068:	7cdb      	ldrb	r3, [r3, #19]
    706a:	b29b      	uxth	r3, r3
    706c:	021b      	lsls	r3, r3, #8
    706e:	b29b      	uxth	r3, r3
    7070:	4413      	add	r3, r2
    7072:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7074:	8afb      	ldrh	r3, [r7, #22]
    7076:	2b00      	cmp	r3, #0
    7078:	d10b      	bne.n	7092 <usb_d_ep_transfer+0xee>
			dir                 = true;
    707a:	2301      	movs	r3, #1
    707c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7080:	2300      	movs	r3, #0
    7082:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7084:	2301      	movs	r3, #1
    7086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    708a:	69bb      	ldr	r3, [r7, #24]
    708c:	2204      	movs	r2, #4
    708e:	709a      	strb	r2, [r3, #2]
    7090:	e01f      	b.n	70d2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7092:	69bb      	ldr	r3, [r7, #24]
    7094:	7b1b      	ldrb	r3, [r3, #12]
    7096:	f003 0380 	and.w	r3, r3, #128	; 0x80
    709a:	2b00      	cmp	r3, #0
    709c:	bf14      	ite	ne
    709e:	2301      	movne	r3, #1
    70a0:	2300      	moveq	r3, #0
    70a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    70a6:	8afa      	ldrh	r2, [r7, #22]
    70a8:	6a3b      	ldr	r3, [r7, #32]
    70aa:	429a      	cmp	r2, r3
    70ac:	d201      	bcs.n	70b2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    70ae:	8afb      	ldrh	r3, [r7, #22]
    70b0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    70b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    70b6:	2b00      	cmp	r3, #0
    70b8:	d008      	beq.n	70cc <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    70ba:	8afa      	ldrh	r2, [r7, #22]
    70bc:	6a3b      	ldr	r3, [r7, #32]
    70be:	429a      	cmp	r2, r3
    70c0:	bf8c      	ite	hi
    70c2:	2301      	movhi	r3, #1
    70c4:	2300      	movls	r3, #0
    70c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    70ca:	e002      	b.n	70d2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    70cc:	2300      	movs	r3, #0
    70ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    70d2:	687b      	ldr	r3, [r7, #4]
    70d4:	7a18      	ldrb	r0, [r3, #8]
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	681a      	ldr	r2, [r3, #0]
    70da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    70de:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    70e2:	9300      	str	r3, [sp, #0]
    70e4:	6a3b      	ldr	r3, [r7, #32]
    70e6:	4c08      	ldr	r4, [pc, #32]	; (7108 <usb_d_ep_transfer+0x164>)
    70e8:	47a0      	blx	r4
    70ea:	6138      	str	r0, [r7, #16]
	return rc;
    70ec:	693b      	ldr	r3, [r7, #16]
}
    70ee:	4618      	mov	r0, r3
    70f0:	372c      	adds	r7, #44	; 0x2c
    70f2:	46bd      	mov	sp, r7
    70f4:	bd90      	pop	{r4, r7, pc}
    70f6:	bf00      	nop
    70f8:	00006961 	.word	0x00006961
    70fc:	20001a84 	.word	0x20001a84
    7100:	0000f2d1 	.word	0x0000f2d1
    7104:	0000f2f7 	.word	0x0000f2f7
    7108:	000069e1 	.word	0x000069e1

0000710c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    710c:	b580      	push	{r7, lr}
    710e:	b086      	sub	sp, #24
    7110:	af00      	add	r7, sp, #0
    7112:	4603      	mov	r3, r0
    7114:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7116:	79fb      	ldrb	r3, [r7, #7]
    7118:	4618      	mov	r0, r3
    711a:	4b1a      	ldr	r3, [pc, #104]	; (7184 <_usb_d_ep_halt_clr+0x78>)
    711c:	4798      	blx	r3
    711e:	4603      	mov	r3, r0
    7120:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7122:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7126:	015b      	lsls	r3, r3, #5
    7128:	4a17      	ldr	r2, [pc, #92]	; (7188 <_usb_d_ep_halt_clr+0x7c>)
    712a:	4413      	add	r3, r2
    712c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    712e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7132:	2b00      	cmp	r3, #0
    7134:	da02      	bge.n	713c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7136:	f06f 0311 	mvn.w	r3, #17
    713a:	e01f      	b.n	717c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    713c:	79fb      	ldrb	r3, [r7, #7]
    713e:	2102      	movs	r1, #2
    7140:	4618      	mov	r0, r3
    7142:	4b12      	ldr	r3, [pc, #72]	; (718c <_usb_d_ep_halt_clr+0x80>)
    7144:	4798      	blx	r3
    7146:	4603      	mov	r3, r0
    7148:	2b00      	cmp	r3, #0
    714a:	d016      	beq.n	717a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    714c:	79fb      	ldrb	r3, [r7, #7]
    714e:	2100      	movs	r1, #0
    7150:	4618      	mov	r0, r3
    7152:	4b0e      	ldr	r3, [pc, #56]	; (718c <_usb_d_ep_halt_clr+0x80>)
    7154:	4798      	blx	r3
    7156:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7158:	68fb      	ldr	r3, [r7, #12]
    715a:	2b00      	cmp	r3, #0
    715c:	da01      	bge.n	7162 <_usb_d_ep_halt_clr+0x56>
			return rc;
    715e:	68fb      	ldr	r3, [r7, #12]
    7160:	e00c      	b.n	717c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7162:	693b      	ldr	r3, [r7, #16]
    7164:	2201      	movs	r2, #1
    7166:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7168:	693b      	ldr	r3, [r7, #16]
    716a:	2203      	movs	r2, #3
    716c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    716e:	693b      	ldr	r3, [r7, #16]
    7170:	69db      	ldr	r3, [r3, #28]
    7172:	79f8      	ldrb	r0, [r7, #7]
    7174:	2200      	movs	r2, #0
    7176:	2103      	movs	r1, #3
    7178:	4798      	blx	r3
	}
	return ERR_NONE;
    717a:	2300      	movs	r3, #0
}
    717c:	4618      	mov	r0, r3
    717e:	3718      	adds	r7, #24
    7180:	46bd      	mov	sp, r7
    7182:	bd80      	pop	{r7, pc}
    7184:	00006961 	.word	0x00006961
    7188:	20001a84 	.word	0x20001a84
    718c:	0000e729 	.word	0x0000e729

00007190 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7190:	b580      	push	{r7, lr}
    7192:	b082      	sub	sp, #8
    7194:	af00      	add	r7, sp, #0
    7196:	4603      	mov	r3, r0
    7198:	460a      	mov	r2, r1
    719a:	71fb      	strb	r3, [r7, #7]
    719c:	4613      	mov	r3, r2
    719e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    71a0:	79bb      	ldrb	r3, [r7, #6]
    71a2:	2b00      	cmp	r3, #0
    71a4:	d105      	bne.n	71b2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    71a6:	79fb      	ldrb	r3, [r7, #7]
    71a8:	4618      	mov	r0, r3
    71aa:	4b0c      	ldr	r3, [pc, #48]	; (71dc <usb_d_ep_halt+0x4c>)
    71ac:	4798      	blx	r3
    71ae:	4603      	mov	r3, r0
    71b0:	e00f      	b.n	71d2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    71b2:	79bb      	ldrb	r3, [r7, #6]
    71b4:	2b01      	cmp	r3, #1
    71b6:	d106      	bne.n	71c6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    71b8:	79fb      	ldrb	r3, [r7, #7]
    71ba:	2101      	movs	r1, #1
    71bc:	4618      	mov	r0, r3
    71be:	4b08      	ldr	r3, [pc, #32]	; (71e0 <usb_d_ep_halt+0x50>)
    71c0:	4798      	blx	r3
    71c2:	4603      	mov	r3, r0
    71c4:	e005      	b.n	71d2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    71c6:	79fb      	ldrb	r3, [r7, #7]
    71c8:	2102      	movs	r1, #2
    71ca:	4618      	mov	r0, r3
    71cc:	4b04      	ldr	r3, [pc, #16]	; (71e0 <usb_d_ep_halt+0x50>)
    71ce:	4798      	blx	r3
    71d0:	4603      	mov	r3, r0
	}
}
    71d2:	4618      	mov	r0, r3
    71d4:	3708      	adds	r7, #8
    71d6:	46bd      	mov	sp, r7
    71d8:	bd80      	pop	{r7, pc}
    71da:	bf00      	nop
    71dc:	0000710d 	.word	0x0000710d
    71e0:	0000e729 	.word	0x0000e729

000071e4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    71e4:	b580      	push	{r7, lr}
    71e6:	b086      	sub	sp, #24
    71e8:	af00      	add	r7, sp, #0
    71ea:	4603      	mov	r3, r0
    71ec:	603a      	str	r2, [r7, #0]
    71ee:	71fb      	strb	r3, [r7, #7]
    71f0:	460b      	mov	r3, r1
    71f2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    71f4:	79fb      	ldrb	r3, [r7, #7]
    71f6:	4618      	mov	r0, r3
    71f8:	4b16      	ldr	r3, [pc, #88]	; (7254 <usb_d_ep_register_callback+0x70>)
    71fa:	4798      	blx	r3
    71fc:	4603      	mov	r3, r0
    71fe:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7200:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7204:	015b      	lsls	r3, r3, #5
    7206:	4a14      	ldr	r2, [pc, #80]	; (7258 <usb_d_ep_register_callback+0x74>)
    7208:	4413      	add	r3, r2
    720a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    720c:	683b      	ldr	r3, [r7, #0]
    720e:	2b00      	cmp	r3, #0
    7210:	d001      	beq.n	7216 <usb_d_ep_register_callback+0x32>
    7212:	683b      	ldr	r3, [r7, #0]
    7214:	e000      	b.n	7218 <usb_d_ep_register_callback+0x34>
    7216:	4b11      	ldr	r3, [pc, #68]	; (725c <usb_d_ep_register_callback+0x78>)
    7218:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    721a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    721e:	2b00      	cmp	r3, #0
    7220:	db13      	blt.n	724a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7222:	79bb      	ldrb	r3, [r7, #6]
    7224:	2b01      	cmp	r3, #1
    7226:	d008      	beq.n	723a <usb_d_ep_register_callback+0x56>
    7228:	2b02      	cmp	r3, #2
    722a:	d00a      	beq.n	7242 <usb_d_ep_register_callback+0x5e>
    722c:	2b00      	cmp	r3, #0
    722e:	d000      	beq.n	7232 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7230:	e00c      	b.n	724c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7232:	693b      	ldr	r3, [r7, #16]
    7234:	68fa      	ldr	r2, [r7, #12]
    7236:	615a      	str	r2, [r3, #20]
		break;
    7238:	e008      	b.n	724c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    723a:	693b      	ldr	r3, [r7, #16]
    723c:	68fa      	ldr	r2, [r7, #12]
    723e:	619a      	str	r2, [r3, #24]
		break;
    7240:	e004      	b.n	724c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7242:	693b      	ldr	r3, [r7, #16]
    7244:	68fa      	ldr	r2, [r7, #12]
    7246:	61da      	str	r2, [r3, #28]
		break;
    7248:	e000      	b.n	724c <usb_d_ep_register_callback+0x68>
		return;
    724a:	bf00      	nop
	}
}
    724c:	3718      	adds	r7, #24
    724e:	46bd      	mov	sp, r7
    7250:	bd80      	pop	{r7, pc}
    7252:	bf00      	nop
    7254:	00006961 	.word	0x00006961
    7258:	20001a84 	.word	0x20001a84
    725c:	00006a35 	.word	0x00006a35

00007260 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7260:	b480      	push	{r7}
    7262:	b085      	sub	sp, #20
    7264:	af00      	add	r7, sp, #0
    7266:	4603      	mov	r3, r0
    7268:	60b9      	str	r1, [r7, #8]
    726a:	607a      	str	r2, [r7, #4]
    726c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    726e:	7bfb      	ldrb	r3, [r7, #15]
    7270:	f083 0301 	eor.w	r3, r3, #1
    7274:	b2db      	uxtb	r3, r3
    7276:	2b00      	cmp	r3, #0
    7278:	d000      	beq.n	727c <assert+0x1c>
		__asm("BKPT #0");
    727a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    727c:	bf00      	nop
    727e:	3714      	adds	r7, #20
    7280:	46bd      	mov	sp, r7
    7282:	f85d 7b04 	ldr.w	r7, [sp], #4
    7286:	4770      	bx	lr

00007288 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7288:	b480      	push	{r7}
    728a:	b085      	sub	sp, #20
    728c:	af00      	add	r7, sp, #0
    728e:	6078      	str	r0, [r7, #4]
    7290:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	60fb      	str	r3, [r7, #12]
    7298:	e008      	b.n	72ac <is_list_element+0x24>
		if (it == element) {
    729a:	68fa      	ldr	r2, [r7, #12]
    729c:	683b      	ldr	r3, [r7, #0]
    729e:	429a      	cmp	r2, r3
    72a0:	d101      	bne.n	72a6 <is_list_element+0x1e>
			return true;
    72a2:	2301      	movs	r3, #1
    72a4:	e006      	b.n	72b4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    72a6:	68fb      	ldr	r3, [r7, #12]
    72a8:	681b      	ldr	r3, [r3, #0]
    72aa:	60fb      	str	r3, [r7, #12]
    72ac:	68fb      	ldr	r3, [r7, #12]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d1f3      	bne.n	729a <is_list_element+0x12>
		}
	}

	return false;
    72b2:	2300      	movs	r3, #0
}
    72b4:	4618      	mov	r0, r3
    72b6:	3714      	adds	r7, #20
    72b8:	46bd      	mov	sp, r7
    72ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    72be:	4770      	bx	lr

000072c0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    72c0:	b580      	push	{r7, lr}
    72c2:	b082      	sub	sp, #8
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
    72c8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    72ca:	6839      	ldr	r1, [r7, #0]
    72cc:	6878      	ldr	r0, [r7, #4]
    72ce:	4b0f      	ldr	r3, [pc, #60]	; (730c <list_insert_as_head+0x4c>)
    72d0:	4798      	blx	r3
    72d2:	4603      	mov	r3, r0
    72d4:	2b00      	cmp	r3, #0
    72d6:	bf14      	ite	ne
    72d8:	2301      	movne	r3, #1
    72da:	2300      	moveq	r3, #0
    72dc:	b2db      	uxtb	r3, r3
    72de:	f083 0301 	eor.w	r3, r3, #1
    72e2:	b2db      	uxtb	r3, r3
    72e4:	f003 0301 	and.w	r3, r3, #1
    72e8:	b2db      	uxtb	r3, r3
    72ea:	2239      	movs	r2, #57	; 0x39
    72ec:	4908      	ldr	r1, [pc, #32]	; (7310 <list_insert_as_head+0x50>)
    72ee:	4618      	mov	r0, r3
    72f0:	4b08      	ldr	r3, [pc, #32]	; (7314 <list_insert_as_head+0x54>)
    72f2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	681a      	ldr	r2, [r3, #0]
    72f8:	683b      	ldr	r3, [r7, #0]
    72fa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    72fc:	687b      	ldr	r3, [r7, #4]
    72fe:	683a      	ldr	r2, [r7, #0]
    7300:	601a      	str	r2, [r3, #0]
}
    7302:	bf00      	nop
    7304:	3708      	adds	r7, #8
    7306:	46bd      	mov	sp, r7
    7308:	bd80      	pop	{r7, pc}
    730a:	bf00      	nop
    730c:	00007289 	.word	0x00007289
    7310:	000129b8 	.word	0x000129b8
    7314:	00007261 	.word	0x00007261

00007318 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7318:	b480      	push	{r7}
    731a:	b083      	sub	sp, #12
    731c:	af00      	add	r7, sp, #0
    731e:	6078      	str	r0, [r7, #4]
    7320:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7322:	687b      	ldr	r3, [r7, #4]
    7324:	681a      	ldr	r2, [r3, #0]
    7326:	683b      	ldr	r3, [r7, #0]
    7328:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	683a      	ldr	r2, [r7, #0]
    732e:	601a      	str	r2, [r3, #0]
}
    7330:	bf00      	nop
    7332:	370c      	adds	r7, #12
    7334:	46bd      	mov	sp, r7
    7336:	f85d 7b04 	ldr.w	r7, [sp], #4
    733a:	4770      	bx	lr

0000733c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    733c:	b580      	push	{r7, lr}
    733e:	b084      	sub	sp, #16
    7340:	af00      	add	r7, sp, #0
    7342:	6078      	str	r0, [r7, #4]
    7344:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	681b      	ldr	r3, [r3, #0]
    734a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    734c:	6839      	ldr	r1, [r7, #0]
    734e:	6878      	ldr	r0, [r7, #4]
    7350:	4b16      	ldr	r3, [pc, #88]	; (73ac <list_insert_at_end+0x70>)
    7352:	4798      	blx	r3
    7354:	4603      	mov	r3, r0
    7356:	2b00      	cmp	r3, #0
    7358:	bf14      	ite	ne
    735a:	2301      	movne	r3, #1
    735c:	2300      	moveq	r3, #0
    735e:	b2db      	uxtb	r3, r3
    7360:	f083 0301 	eor.w	r3, r3, #1
    7364:	b2db      	uxtb	r3, r3
    7366:	f003 0301 	and.w	r3, r3, #1
    736a:	b2db      	uxtb	r3, r3
    736c:	224f      	movs	r2, #79	; 0x4f
    736e:	4910      	ldr	r1, [pc, #64]	; (73b0 <list_insert_at_end+0x74>)
    7370:	4618      	mov	r0, r3
    7372:	4b10      	ldr	r3, [pc, #64]	; (73b4 <list_insert_at_end+0x78>)
    7374:	4798      	blx	r3

	if (!list->head) {
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	d109      	bne.n	7392 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	683a      	ldr	r2, [r7, #0]
    7382:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7384:	683b      	ldr	r3, [r7, #0]
    7386:	2200      	movs	r2, #0
    7388:	601a      	str	r2, [r3, #0]
		return;
    738a:	e00c      	b.n	73a6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    738c:	68fb      	ldr	r3, [r7, #12]
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7392:	68fb      	ldr	r3, [r7, #12]
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	2b00      	cmp	r3, #0
    7398:	d1f8      	bne.n	738c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	683a      	ldr	r2, [r7, #0]
    739e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    73a0:	683b      	ldr	r3, [r7, #0]
    73a2:	2200      	movs	r2, #0
    73a4:	601a      	str	r2, [r3, #0]
}
    73a6:	3710      	adds	r7, #16
    73a8:	46bd      	mov	sp, r7
    73aa:	bd80      	pop	{r7, pc}
    73ac:	00007289 	.word	0x00007289
    73b0:	000129b8 	.word	0x000129b8
    73b4:	00007261 	.word	0x00007261

000073b8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    73b8:	b480      	push	{r7}
    73ba:	b085      	sub	sp, #20
    73bc:	af00      	add	r7, sp, #0
    73be:	6078      	str	r0, [r7, #4]
	if (list->head) {
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	681b      	ldr	r3, [r3, #0]
    73c4:	2b00      	cmp	r3, #0
    73c6:	d009      	beq.n	73dc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	681b      	ldr	r3, [r3, #0]
    73cc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	681b      	ldr	r3, [r3, #0]
    73d2:	681a      	ldr	r2, [r3, #0]
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    73d8:	68fb      	ldr	r3, [r7, #12]
    73da:	e000      	b.n	73de <list_remove_head+0x26>
	}

	return NULL;
    73dc:	2300      	movs	r3, #0
}
    73de:	4618      	mov	r0, r3
    73e0:	3714      	adds	r7, #20
    73e2:	46bd      	mov	sp, r7
    73e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73e8:	4770      	bx	lr

000073ea <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    73ea:	b480      	push	{r7}
    73ec:	b085      	sub	sp, #20
    73ee:	af00      	add	r7, sp, #0
    73f0:	6078      	str	r0, [r7, #4]
    73f2:	6039      	str	r1, [r7, #0]
	if (!element) {
    73f4:	683b      	ldr	r3, [r7, #0]
    73f6:	2b00      	cmp	r3, #0
    73f8:	d101      	bne.n	73fe <list_delete_element+0x14>
		return false;
    73fa:	2300      	movs	r3, #0
    73fc:	e024      	b.n	7448 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	681a      	ldr	r2, [r3, #0]
    7402:	683b      	ldr	r3, [r7, #0]
    7404:	429a      	cmp	r2, r3
    7406:	d106      	bne.n	7416 <list_delete_element+0x2c>
		list->head = list->head->next;
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	681b      	ldr	r3, [r3, #0]
    740c:	681a      	ldr	r2, [r3, #0]
    740e:	687b      	ldr	r3, [r7, #4]
    7410:	601a      	str	r2, [r3, #0]
		return true;
    7412:	2301      	movs	r3, #1
    7414:	e018      	b.n	7448 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	681b      	ldr	r3, [r3, #0]
    741a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    741c:	e002      	b.n	7424 <list_delete_element+0x3a>
			it = it->next;
    741e:	68fb      	ldr	r3, [r7, #12]
    7420:	681b      	ldr	r3, [r3, #0]
    7422:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7424:	68fb      	ldr	r3, [r7, #12]
    7426:	2b00      	cmp	r3, #0
    7428:	d004      	beq.n	7434 <list_delete_element+0x4a>
    742a:	68fb      	ldr	r3, [r7, #12]
    742c:	681a      	ldr	r2, [r3, #0]
    742e:	683b      	ldr	r3, [r7, #0]
    7430:	429a      	cmp	r2, r3
    7432:	d1f4      	bne.n	741e <list_delete_element+0x34>
		}
		if (it) {
    7434:	68fb      	ldr	r3, [r7, #12]
    7436:	2b00      	cmp	r3, #0
    7438:	d005      	beq.n	7446 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    743a:	683b      	ldr	r3, [r7, #0]
    743c:	681a      	ldr	r2, [r3, #0]
    743e:	68fb      	ldr	r3, [r7, #12]
    7440:	601a      	str	r2, [r3, #0]
			return true;
    7442:	2301      	movs	r3, #1
    7444:	e000      	b.n	7448 <list_delete_element+0x5e>
		}
	}

	return false;
    7446:	2300      	movs	r3, #0
}
    7448:	4618      	mov	r0, r3
    744a:	3714      	adds	r7, #20
    744c:	46bd      	mov	sp, r7
    744e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7452:	4770      	bx	lr

00007454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7454:	b480      	push	{r7}
    7456:	b083      	sub	sp, #12
    7458:	af00      	add	r7, sp, #0
    745a:	4603      	mov	r3, r0
    745c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    745e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7462:	2b00      	cmp	r3, #0
    7464:	db0b      	blt.n	747e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7466:	4909      	ldr	r1, [pc, #36]	; (748c <__NVIC_EnableIRQ+0x38>)
    7468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    746c:	095b      	lsrs	r3, r3, #5
    746e:	88fa      	ldrh	r2, [r7, #6]
    7470:	f002 021f 	and.w	r2, r2, #31
    7474:	2001      	movs	r0, #1
    7476:	fa00 f202 	lsl.w	r2, r0, r2
    747a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    747e:	bf00      	nop
    7480:	370c      	adds	r7, #12
    7482:	46bd      	mov	sp, r7
    7484:	f85d 7b04 	ldr.w	r7, [sp], #4
    7488:	4770      	bx	lr
    748a:	bf00      	nop
    748c:	e000e100 	.word	0xe000e100

00007490 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7490:	b480      	push	{r7}
    7492:	b083      	sub	sp, #12
    7494:	af00      	add	r7, sp, #0
    7496:	4603      	mov	r3, r0
    7498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    749a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    749e:	2b00      	cmp	r3, #0
    74a0:	db10      	blt.n	74c4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74a2:	490b      	ldr	r1, [pc, #44]	; (74d0 <__NVIC_DisableIRQ+0x40>)
    74a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74a8:	095b      	lsrs	r3, r3, #5
    74aa:	88fa      	ldrh	r2, [r7, #6]
    74ac:	f002 021f 	and.w	r2, r2, #31
    74b0:	2001      	movs	r0, #1
    74b2:	fa00 f202 	lsl.w	r2, r0, r2
    74b6:	3320      	adds	r3, #32
    74b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    74bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    74c4:	bf00      	nop
    74c6:	370c      	adds	r7, #12
    74c8:	46bd      	mov	sp, r7
    74ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ce:	4770      	bx	lr
    74d0:	e000e100 	.word	0xe000e100

000074d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    74d4:	b480      	push	{r7}
    74d6:	b083      	sub	sp, #12
    74d8:	af00      	add	r7, sp, #0
    74da:	4603      	mov	r3, r0
    74dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74e2:	2b00      	cmp	r3, #0
    74e4:	db0c      	blt.n	7500 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74e6:	4909      	ldr	r1, [pc, #36]	; (750c <__NVIC_ClearPendingIRQ+0x38>)
    74e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74ec:	095b      	lsrs	r3, r3, #5
    74ee:	88fa      	ldrh	r2, [r7, #6]
    74f0:	f002 021f 	and.w	r2, r2, #31
    74f4:	2001      	movs	r0, #1
    74f6:	fa00 f202 	lsl.w	r2, r0, r2
    74fa:	3360      	adds	r3, #96	; 0x60
    74fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7500:	bf00      	nop
    7502:	370c      	adds	r7, #12
    7504:	46bd      	mov	sp, r7
    7506:	f85d 7b04 	ldr.w	r7, [sp], #4
    750a:	4770      	bx	lr
    750c:	e000e100 	.word	0xe000e100

00007510 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    7510:	b480      	push	{r7}
    7512:	b083      	sub	sp, #12
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    751c:	095b      	lsrs	r3, r3, #5
    751e:	f003 0301 	and.w	r3, r3, #1
    7522:	2b00      	cmp	r3, #0
    7524:	bf14      	ite	ne
    7526:	2301      	movne	r3, #1
    7528:	2300      	moveq	r3, #0
    752a:	b2db      	uxtb	r3, r3
}
    752c:	4618      	mov	r0, r3
    752e:	370c      	adds	r7, #12
    7530:	46bd      	mov	sp, r7
    7532:	f85d 7b04 	ldr.w	r7, [sp], #4
    7536:	4770      	bx	lr

00007538 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    7538:	b480      	push	{r7}
    753a:	b083      	sub	sp, #12
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    7540:	687b      	ldr	r3, [r7, #4]
    7542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    754a:	4618      	mov	r0, r3
    754c:	370c      	adds	r7, #12
    754e:	46bd      	mov	sp, r7
    7550:	f85d 7b04 	ldr.w	r7, [sp], #4
    7554:	4770      	bx	lr

00007556 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    7556:	b480      	push	{r7}
    7558:	b083      	sub	sp, #12
    755a:	af00      	add	r7, sp, #0
    755c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    755e:	687b      	ldr	r3, [r7, #4]
    7560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7564:	0a1b      	lsrs	r3, r3, #8
    7566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    756a:	4618      	mov	r0, r3
    756c:	370c      	adds	r7, #12
    756e:	46bd      	mov	sp, r7
    7570:	f85d 7b04 	ldr.w	r7, [sp], #4
    7574:	4770      	bx	lr

00007576 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    7576:	b480      	push	{r7}
    7578:	b083      	sub	sp, #12
    757a:	af00      	add	r7, sp, #0
    757c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7584:	0d5b      	lsrs	r3, r3, #21
    7586:	f003 0301 	and.w	r3, r3, #1
    758a:	2b00      	cmp	r3, #0
    758c:	bf14      	ite	ne
    758e:	2301      	movne	r3, #1
    7590:	2300      	moveq	r3, #0
    7592:	b2db      	uxtb	r3, r3
}
    7594:	4618      	mov	r0, r3
    7596:	370c      	adds	r7, #12
    7598:	46bd      	mov	sp, r7
    759a:	f85d 7b04 	ldr.w	r7, [sp], #4
    759e:	4770      	bx	lr

000075a0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    75a0:	b480      	push	{r7}
    75a2:	b083      	sub	sp, #12
    75a4:	af00      	add	r7, sp, #0
    75a6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    75ae:	0c1b      	lsrs	r3, r3, #16
    75b0:	f003 031f 	and.w	r3, r3, #31
}
    75b4:	4618      	mov	r0, r3
    75b6:	370c      	adds	r7, #12
    75b8:	46bd      	mov	sp, r7
    75ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    75be:	4770      	bx	lr

000075c0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    75c0:	b480      	push	{r7}
    75c2:	b083      	sub	sp, #12
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
    75c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	683a      	ldr	r2, [r7, #0]
    75ce:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    75d0:	bf00      	nop
    75d2:	370c      	adds	r7, #12
    75d4:	46bd      	mov	sp, r7
    75d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75da:	4770      	bx	lr

000075dc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    75dc:	b480      	push	{r7}
    75de:	b083      	sub	sp, #12
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
    75e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	683a      	ldr	r2, [r7, #0]
    75ea:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    75ec:	bf00      	nop
    75ee:	370c      	adds	r7, #12
    75f0:	46bd      	mov	sp, r7
    75f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75f6:	4770      	bx	lr

000075f8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    75f8:	b480      	push	{r7}
    75fa:	b083      	sub	sp, #12
    75fc:	af00      	add	r7, sp, #0
    75fe:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	699b      	ldr	r3, [r3, #24]
    7604:	f043 0201 	orr.w	r2, r3, #1
    7608:	687b      	ldr	r3, [r7, #4]
    760a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    760c:	bf00      	nop
    760e:	370c      	adds	r7, #12
    7610:	46bd      	mov	sp, r7
    7612:	f85d 7b04 	ldr.w	r7, [sp], #4
    7616:	4770      	bx	lr

00007618 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    7618:	b480      	push	{r7}
    761a:	b085      	sub	sp, #20
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	699b      	ldr	r3, [r3, #24]
    7624:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    7626:	68fb      	ldr	r3, [r7, #12]
    7628:	f003 0301 	and.w	r3, r3, #1
    762c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    762e:	68fb      	ldr	r3, [r7, #12]
    7630:	2b00      	cmp	r3, #0
    7632:	bf14      	ite	ne
    7634:	2301      	movne	r3, #1
    7636:	2300      	moveq	r3, #0
    7638:	b2db      	uxtb	r3, r3
}
    763a:	4618      	mov	r0, r3
    763c:	3714      	adds	r7, #20
    763e:	46bd      	mov	sp, r7
    7640:	f85d 7b04 	ldr.w	r7, [sp], #4
    7644:	4770      	bx	lr

00007646 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    7646:	b480      	push	{r7}
    7648:	b083      	sub	sp, #12
    764a:	af00      	add	r7, sp, #0
    764c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    764e:	687b      	ldr	r3, [r7, #4]
    7650:	699b      	ldr	r3, [r3, #24]
    7652:	f023 0201 	bic.w	r2, r3, #1
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    765a:	bf00      	nop
    765c:	370c      	adds	r7, #12
    765e:	46bd      	mov	sp, r7
    7660:	f85d 7b04 	ldr.w	r7, [sp], #4
    7664:	4770      	bx	lr

00007666 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    7666:	b480      	push	{r7}
    7668:	b083      	sub	sp, #12
    766a:	af00      	add	r7, sp, #0
    766c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	699b      	ldr	r3, [r3, #24]
    7672:	f043 0202 	orr.w	r2, r3, #2
    7676:	687b      	ldr	r3, [r7, #4]
    7678:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    767a:	bf00      	nop
    767c:	370c      	adds	r7, #12
    767e:	46bd      	mov	sp, r7
    7680:	f85d 7b04 	ldr.w	r7, [sp], #4
    7684:	4770      	bx	lr

00007686 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    7686:	b480      	push	{r7}
    7688:	b083      	sub	sp, #12
    768a:	af00      	add	r7, sp, #0
    768c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	699b      	ldr	r3, [r3, #24]
    7692:	f023 0202 	bic.w	r2, r3, #2
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    769a:	bf00      	nop
    769c:	370c      	adds	r7, #12
    769e:	46bd      	mov	sp, r7
    76a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    76a4:	4770      	bx	lr

000076a6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    76a6:	b480      	push	{r7}
    76a8:	b085      	sub	sp, #20
    76aa:	af00      	add	r7, sp, #0
    76ac:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	699b      	ldr	r3, [r3, #24]
    76b2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    76b4:	68fb      	ldr	r3, [r7, #12]
    76b6:	0a1b      	lsrs	r3, r3, #8
    76b8:	f003 0301 	and.w	r3, r3, #1
    76bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76be:	68fb      	ldr	r3, [r7, #12]
    76c0:	2b00      	cmp	r3, #0
    76c2:	bf14      	ite	ne
    76c4:	2301      	movne	r3, #1
    76c6:	2300      	moveq	r3, #0
    76c8:	b2db      	uxtb	r3, r3
}
    76ca:	4618      	mov	r0, r3
    76cc:	3714      	adds	r7, #20
    76ce:	46bd      	mov	sp, r7
    76d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    76d4:	4770      	bx	lr

000076d6 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    76d6:	b480      	push	{r7}
    76d8:	b085      	sub	sp, #20
    76da:	af00      	add	r7, sp, #0
    76dc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	699b      	ldr	r3, [r3, #24]
    76e2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    76e4:	68fb      	ldr	r3, [r7, #12]
    76e6:	0a5b      	lsrs	r3, r3, #9
    76e8:	f003 0301 	and.w	r3, r3, #1
    76ec:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76ee:	68fb      	ldr	r3, [r7, #12]
    76f0:	2b00      	cmp	r3, #0
    76f2:	bf14      	ite	ne
    76f4:	2301      	movne	r3, #1
    76f6:	2300      	moveq	r3, #0
    76f8:	b2db      	uxtb	r3, r3
}
    76fa:	4618      	mov	r0, r3
    76fc:	3714      	adds	r7, #20
    76fe:	46bd      	mov	sp, r7
    7700:	f85d 7b04 	ldr.w	r7, [sp], #4
    7704:	4770      	bx	lr

00007706 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    7706:	b480      	push	{r7}
    7708:	b083      	sub	sp, #12
    770a:	af00      	add	r7, sp, #0
    770c:	6078      	str	r0, [r7, #4]
    770e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	699a      	ldr	r2, [r3, #24]
    7714:	683b      	ldr	r3, [r7, #0]
    7716:	431a      	orrs	r2, r3
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    771c:	bf00      	nop
    771e:	370c      	adds	r7, #12
    7720:	46bd      	mov	sp, r7
    7722:	f85d 7b04 	ldr.w	r7, [sp], #4
    7726:	4770      	bx	lr

00007728 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    7728:	b480      	push	{r7}
    772a:	b083      	sub	sp, #12
    772c:	af00      	add	r7, sp, #0
    772e:	6078      	str	r0, [r7, #4]
    7730:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	683a      	ldr	r2, [r7, #0]
    7736:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7738:	bf00      	nop
    773a:	370c      	adds	r7, #12
    773c:	46bd      	mov	sp, r7
    773e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7742:	4770      	bx	lr

00007744 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    7744:	b480      	push	{r7}
    7746:	b083      	sub	sp, #12
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
    774c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    774e:	687b      	ldr	r3, [r7, #4]
    7750:	683a      	ldr	r2, [r7, #0]
    7752:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    7754:	bf00      	nop
    7756:	370c      	adds	r7, #12
    7758:	46bd      	mov	sp, r7
    775a:	f85d 7b04 	ldr.w	r7, [sp], #4
    775e:	4770      	bx	lr

00007760 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    7760:	b480      	push	{r7}
    7762:	b083      	sub	sp, #12
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    776c:	4618      	mov	r0, r3
    776e:	370c      	adds	r7, #12
    7770:	46bd      	mov	sp, r7
    7772:	f85d 7b04 	ldr.w	r7, [sp], #4
    7776:	4770      	bx	lr

00007778 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    7778:	b480      	push	{r7}
    777a:	b085      	sub	sp, #20
    777c:	af00      	add	r7, sp, #0
    777e:	6078      	str	r0, [r7, #4]
    7780:	460b      	mov	r3, r1
    7782:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7788:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    778a:	68fb      	ldr	r3, [r7, #12]
    778c:	f023 0301 	bic.w	r3, r3, #1
    7790:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    7792:	78fb      	ldrb	r3, [r7, #3]
    7794:	68fa      	ldr	r2, [r7, #12]
    7796:	4313      	orrs	r3, r2
    7798:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	68fa      	ldr	r2, [r7, #12]
    779e:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    77a0:	bf00      	nop
    77a2:	3714      	adds	r7, #20
    77a4:	46bd      	mov	sp, r7
    77a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77aa:	4770      	bx	lr

000077ac <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    77ac:	b480      	push	{r7}
    77ae:	b085      	sub	sp, #20
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	460b      	mov	r3, r1
    77b6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    77bc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    77be:	68fb      	ldr	r3, [r7, #12]
    77c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    77c4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    77c6:	78fb      	ldrb	r3, [r7, #3]
    77c8:	025b      	lsls	r3, r3, #9
    77ca:	461a      	mov	r2, r3
    77cc:	68fb      	ldr	r3, [r7, #12]
    77ce:	4313      	orrs	r3, r2
    77d0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    77d2:	687b      	ldr	r3, [r7, #4]
    77d4:	68fa      	ldr	r2, [r7, #12]
    77d6:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    77d8:	bf00      	nop
    77da:	3714      	adds	r7, #20
    77dc:	46bd      	mov	sp, r7
    77de:	f85d 7b04 	ldr.w	r7, [sp], #4
    77e2:	4770      	bx	lr

000077e4 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    77e4:	b480      	push	{r7}
    77e6:	b085      	sub	sp, #20
    77e8:	af00      	add	r7, sp, #0
    77ea:	6078      	str	r0, [r7, #4]
    77ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    77f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    77f4:	68fa      	ldr	r2, [r7, #12]
    77f6:	683b      	ldr	r3, [r7, #0]
    77f8:	4013      	ands	r3, r2
    77fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    77fc:	68fb      	ldr	r3, [r7, #12]
}
    77fe:	4618      	mov	r0, r3
    7800:	3714      	adds	r7, #20
    7802:	46bd      	mov	sp, r7
    7804:	f85d 7b04 	ldr.w	r7, [sp], #4
    7808:	4770      	bx	lr

0000780a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    780a:	b480      	push	{r7}
    780c:	b083      	sub	sp, #12
    780e:	af00      	add	r7, sp, #0
    7810:	6078      	str	r0, [r7, #4]
    7812:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	683a      	ldr	r2, [r7, #0]
    7818:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    781a:	bf00      	nop
    781c:	370c      	adds	r7, #12
    781e:	46bd      	mov	sp, r7
    7820:	f85d 7b04 	ldr.w	r7, [sp], #4
    7824:	4770      	bx	lr

00007826 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    7826:	b480      	push	{r7}
    7828:	b083      	sub	sp, #12
    782a:	af00      	add	r7, sp, #0
    782c:	6078      	str	r0, [r7, #4]
    782e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	683a      	ldr	r2, [r7, #0]
    7834:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    7836:	bf00      	nop
    7838:	370c      	adds	r7, #12
    783a:	46bd      	mov	sp, r7
    783c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7840:	4770      	bx	lr

00007842 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    7842:	b480      	push	{r7}
    7844:	b083      	sub	sp, #12
    7846:	af00      	add	r7, sp, #0
    7848:	6078      	str	r0, [r7, #4]
    784a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    784c:	687b      	ldr	r3, [r7, #4]
    784e:	683a      	ldr	r2, [r7, #0]
    7850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    7854:	bf00      	nop
    7856:	370c      	adds	r7, #12
    7858:	46bd      	mov	sp, r7
    785a:	f85d 7b04 	ldr.w	r7, [sp], #4
    785e:	4770      	bx	lr

00007860 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    7860:	b480      	push	{r7}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]
    7868:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	683a      	ldr	r2, [r7, #0]
    786e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    7872:	bf00      	nop
    7874:	370c      	adds	r7, #12
    7876:	46bd      	mov	sp, r7
    7878:	f85d 7b04 	ldr.w	r7, [sp], #4
    787c:	4770      	bx	lr

0000787e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    787e:	b480      	push	{r7}
    7880:	b083      	sub	sp, #12
    7882:	af00      	add	r7, sp, #0
    7884:	6078      	str	r0, [r7, #4]
    7886:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	683a      	ldr	r2, [r7, #0]
    788c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    7890:	bf00      	nop
    7892:	370c      	adds	r7, #12
    7894:	46bd      	mov	sp, r7
    7896:	f85d 7b04 	ldr.w	r7, [sp], #4
    789a:	4770      	bx	lr

0000789c <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    789c:	b480      	push	{r7}
    789e:	b083      	sub	sp, #12
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
    78a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	683a      	ldr	r2, [r7, #0]
    78aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    78ae:	bf00      	nop
    78b0:	370c      	adds	r7, #12
    78b2:	46bd      	mov	sp, r7
    78b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b8:	4770      	bx	lr

000078ba <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    78ba:	b480      	push	{r7}
    78bc:	b083      	sub	sp, #12
    78be:	af00      	add	r7, sp, #0
    78c0:	6078      	str	r0, [r7, #4]
    78c2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	683a      	ldr	r2, [r7, #0]
    78c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    78cc:	bf00      	nop
    78ce:	370c      	adds	r7, #12
    78d0:	46bd      	mov	sp, r7
    78d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d6:	4770      	bx	lr

000078d8 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    78d8:	b480      	push	{r7}
    78da:	b085      	sub	sp, #20
    78dc:	af00      	add	r7, sp, #0
    78de:	6078      	str	r0, [r7, #4]
    78e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    78e2:	687b      	ldr	r3, [r7, #4]
    78e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    78e8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    78ea:	68fb      	ldr	r3, [r7, #12]
    78ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    78f0:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    78f8:	68fa      	ldr	r2, [r7, #12]
    78fa:	4313      	orrs	r3, r2
    78fc:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    78fe:	687b      	ldr	r3, [r7, #4]
    7900:	68fa      	ldr	r2, [r7, #12]
    7902:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    7906:	bf00      	nop
    7908:	3714      	adds	r7, #20
    790a:	46bd      	mov	sp, r7
    790c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7910:	4770      	bx	lr

00007912 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    7912:	b480      	push	{r7}
    7914:	b083      	sub	sp, #12
    7916:	af00      	add	r7, sp, #0
    7918:	6078      	str	r0, [r7, #4]
    791a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	683a      	ldr	r2, [r7, #0]
    7920:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    7924:	bf00      	nop
    7926:	370c      	adds	r7, #12
    7928:	46bd      	mov	sp, r7
    792a:	f85d 7b04 	ldr.w	r7, [sp], #4
    792e:	4770      	bx	lr

00007930 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    7930:	b480      	push	{r7}
    7932:	b083      	sub	sp, #12
    7934:	af00      	add	r7, sp, #0
    7936:	6078      	str	r0, [r7, #4]
    7938:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	683a      	ldr	r2, [r7, #0]
    793e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7942:	bf00      	nop
    7944:	370c      	adds	r7, #12
    7946:	46bd      	mov	sp, r7
    7948:	f85d 7b04 	ldr.w	r7, [sp], #4
    794c:	4770      	bx	lr

0000794e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    794e:	b480      	push	{r7}
    7950:	b083      	sub	sp, #12
    7952:	af00      	add	r7, sp, #0
    7954:	6078      	str	r0, [r7, #4]
    7956:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	683a      	ldr	r2, [r7, #0]
    795c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    7960:	bf00      	nop
    7962:	370c      	adds	r7, #12
    7964:	46bd      	mov	sp, r7
    7966:	f85d 7b04 	ldr.w	r7, [sp], #4
    796a:	4770      	bx	lr

0000796c <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    796c:	b480      	push	{r7}
    796e:	b083      	sub	sp, #12
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
    7974:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    7976:	687b      	ldr	r3, [r7, #4]
    7978:	683a      	ldr	r2, [r7, #0]
    797a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    797e:	bf00      	nop
    7980:	370c      	adds	r7, #12
    7982:	46bd      	mov	sp, r7
    7984:	f85d 7b04 	ldr.w	r7, [sp], #4
    7988:	4770      	bx	lr

0000798a <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    798a:	b480      	push	{r7}
    798c:	b083      	sub	sp, #12
    798e:	af00      	add	r7, sp, #0
    7990:	6078      	str	r0, [r7, #4]
    7992:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	683a      	ldr	r2, [r7, #0]
    7998:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    799c:	bf00      	nop
    799e:	370c      	adds	r7, #12
    79a0:	46bd      	mov	sp, r7
    79a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a6:	4770      	bx	lr

000079a8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    79a8:	b480      	push	{r7}
    79aa:	b083      	sub	sp, #12
    79ac:	af00      	add	r7, sp, #0
    79ae:	6078      	str	r0, [r7, #4]
    79b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	683a      	ldr	r2, [r7, #0]
    79b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    79ba:	bf00      	nop
    79bc:	370c      	adds	r7, #12
    79be:	46bd      	mov	sp, r7
    79c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c4:	4770      	bx	lr
	...

000079c8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    79c8:	b580      	push	{r7, lr}
    79ca:	b082      	sub	sp, #8
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
    79d0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	683a      	ldr	r2, [r7, #0]
    79d6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	4618      	mov	r0, r3
    79de:	4b56      	ldr	r3, [pc, #344]	; (7b38 <_can_async_init+0x170>)
    79e0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    79e2:	bf00      	nop
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	4618      	mov	r0, r3
    79ea:	4b54      	ldr	r3, [pc, #336]	; (7b3c <_can_async_init+0x174>)
    79ec:	4798      	blx	r3
    79ee:	4603      	mov	r3, r0
    79f0:	f083 0301 	eor.w	r3, r3, #1
    79f4:	b2db      	uxtb	r3, r3
    79f6:	2b00      	cmp	r3, #0
    79f8:	d1f4      	bne.n	79e4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	681b      	ldr	r3, [r3, #0]
    79fe:	4618      	mov	r0, r3
    7a00:	4b4f      	ldr	r3, [pc, #316]	; (7b40 <_can_async_init+0x178>)
    7a02:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    7a04:	683b      	ldr	r3, [r7, #0]
    7a06:	4a4f      	ldr	r2, [pc, #316]	; (7b44 <_can_async_init+0x17c>)
    7a08:	4293      	cmp	r3, r2
    7a0a:	d17c      	bne.n	7b06 <_can_async_init+0x13e>
		_can1_dev    = dev;
    7a0c:	4a4e      	ldr	r2, [pc, #312]	; (7b48 <_can_async_init+0x180>)
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	4a4d      	ldr	r2, [pc, #308]	; (7b4c <_can_async_init+0x184>)
    7a16:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	681b      	ldr	r3, [r3, #0]
    7a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
    7a20:	4618      	mov	r0, r3
    7a22:	4b4b      	ldr	r3, [pc, #300]	; (7b50 <_can_async_init+0x188>)
    7a24:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	681b      	ldr	r3, [r3, #0]
    7a2a:	2102      	movs	r1, #2
    7a2c:	4618      	mov	r0, r3
    7a2e:	4b49      	ldr	r3, [pc, #292]	; (7b54 <_can_async_init+0x18c>)
    7a30:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	f640 2103 	movw	r1, #2563	; 0xa03
    7a3a:	4618      	mov	r0, r3
    7a3c:	4b46      	ldr	r3, [pc, #280]	; (7b58 <_can_async_init+0x190>)
    7a3e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    7a48:	4618      	mov	r0, r3
    7a4a:	4b44      	ldr	r3, [pc, #272]	; (7b5c <_can_async_init+0x194>)
    7a4c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	681a      	ldr	r2, [r3, #0]
    7a52:	4b43      	ldr	r3, [pc, #268]	; (7b60 <_can_async_init+0x198>)
    7a54:	b29b      	uxth	r3, r3
    7a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7a5e:	4619      	mov	r1, r3
    7a60:	4610      	mov	r0, r2
    7a62:	4b40      	ldr	r3, [pc, #256]	; (7b64 <_can_async_init+0x19c>)
    7a64:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	681b      	ldr	r3, [r3, #0]
    7a6a:	2107      	movs	r1, #7
    7a6c:	4618      	mov	r0, r3
    7a6e:	4b3e      	ldr	r3, [pc, #248]	; (7b68 <_can_async_init+0x1a0>)
    7a70:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	681b      	ldr	r3, [r3, #0]
    7a76:	2107      	movs	r1, #7
    7a78:	4618      	mov	r0, r3
    7a7a:	4b3c      	ldr	r3, [pc, #240]	; (7b6c <_can_async_init+0x1a4>)
    7a7c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	681a      	ldr	r2, [r3, #0]
    7a82:	4b3b      	ldr	r3, [pc, #236]	; (7b70 <_can_async_init+0x1a8>)
    7a84:	b29b      	uxth	r3, r3
    7a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7a8a:	4619      	mov	r1, r3
    7a8c:	4610      	mov	r0, r2
    7a8e:	4b39      	ldr	r3, [pc, #228]	; (7b74 <_can_async_init+0x1ac>)
    7a90:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    7a92:	687b      	ldr	r3, [r7, #4]
    7a94:	681a      	ldr	r2, [r3, #0]
    7a96:	4b38      	ldr	r3, [pc, #224]	; (7b78 <_can_async_init+0x1b0>)
    7a98:	b29b      	uxth	r3, r3
    7a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7a9e:	4619      	mov	r1, r3
    7aa0:	4610      	mov	r0, r2
    7aa2:	4b36      	ldr	r3, [pc, #216]	; (7b7c <_can_async_init+0x1b4>)
    7aa4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    7aa6:	687b      	ldr	r3, [r7, #4]
    7aa8:	681b      	ldr	r3, [r3, #0]
    7aaa:	2108      	movs	r1, #8
    7aac:	4618      	mov	r0, r3
    7aae:	4b34      	ldr	r3, [pc, #208]	; (7b80 <_can_async_init+0x1b8>)
    7ab0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	681a      	ldr	r2, [r3, #0]
    7ab6:	4b33      	ldr	r3, [pc, #204]	; (7b84 <_can_async_init+0x1bc>)
    7ab8:	b29b      	uxth	r3, r3
    7aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    7abe:	4619      	mov	r1, r3
    7ac0:	4610      	mov	r0, r2
    7ac2:	4b31      	ldr	r3, [pc, #196]	; (7b88 <_can_async_init+0x1c0>)
    7ac4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	681a      	ldr	r2, [r3, #0]
    7aca:	4b30      	ldr	r3, [pc, #192]	; (7b8c <_can_async_init+0x1c4>)
    7acc:	b29b      	uxth	r3, r3
    7ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7ad2:	4619      	mov	r1, r3
    7ad4:	4610      	mov	r0, r2
    7ad6:	4b2e      	ldr	r3, [pc, #184]	; (7b90 <_can_async_init+0x1c8>)
    7ad8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	681b      	ldr	r3, [r3, #0]
    7ade:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    7ae2:	4618      	mov	r0, r3
    7ae4:	4b2b      	ldr	r3, [pc, #172]	; (7b94 <_can_async_init+0x1cc>)
    7ae6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    7ae8:	204f      	movs	r0, #79	; 0x4f
    7aea:	4b2b      	ldr	r3, [pc, #172]	; (7b98 <_can_async_init+0x1d0>)
    7aec:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    7aee:	204f      	movs	r0, #79	; 0x4f
    7af0:	4b2a      	ldr	r3, [pc, #168]	; (7b9c <_can_async_init+0x1d4>)
    7af2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    7af4:	204f      	movs	r0, #79	; 0x4f
    7af6:	4b2a      	ldr	r3, [pc, #168]	; (7ba0 <_can_async_init+0x1d8>)
    7af8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	681b      	ldr	r3, [r3, #0]
    7afe:	2101      	movs	r1, #1
    7b00:	4618      	mov	r0, r3
    7b02:	4b28      	ldr	r3, [pc, #160]	; (7ba4 <_can_async_init+0x1dc>)
    7b04:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	681b      	ldr	r3, [r3, #0]
    7b0a:	4618      	mov	r0, r3
    7b0c:	4b26      	ldr	r3, [pc, #152]	; (7ba8 <_can_async_init+0x1e0>)
    7b0e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	681b      	ldr	r3, [r3, #0]
    7b14:	4618      	mov	r0, r3
    7b16:	4b25      	ldr	r3, [pc, #148]	; (7bac <_can_async_init+0x1e4>)
    7b18:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    7b1a:	bf00      	nop
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	4618      	mov	r0, r3
    7b22:	4b06      	ldr	r3, [pc, #24]	; (7b3c <_can_async_init+0x174>)
    7b24:	4798      	blx	r3
    7b26:	4603      	mov	r3, r0
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d1f7      	bne.n	7b1c <_can_async_init+0x154>
	};

	return ERR_NONE;
    7b2c:	2300      	movs	r3, #0
}
    7b2e:	4618      	mov	r0, r3
    7b30:	3708      	adds	r7, #8
    7b32:	46bd      	mov	sp, r7
    7b34:	bd80      	pop	{r7, pc}
    7b36:	bf00      	nop
    7b38:	000075f9 	.word	0x000075f9
    7b3c:	00007619 	.word	0x00007619
    7b40:	00007667 	.word	0x00007667
    7b44:	42000400 	.word	0x42000400
    7b48:	20001ba4 	.word	0x20001ba4
    7b4c:	200003fc 	.word	0x200003fc
    7b50:	00007707 	.word	0x00007707
    7b54:	000075c1 	.word	0x000075c1
    7b58:	00007729 	.word	0x00007729
    7b5c:	000075dd 	.word	0x000075dd
    7b60:	20002750 	.word	0x20002750
    7b64:	000078bb 	.word	0x000078bb
    7b68:	00007913 	.word	0x00007913
    7b6c:	0000794f 	.word	0x0000794f
    7b70:	20002708 	.word	0x20002708
    7b74:	00007931 	.word	0x00007931
    7b78:	20001b04 	.word	0x20001b04
    7b7c:	000079a9 	.word	0x000079a9
    7b80:	00007843 	.word	0x00007843
    7b84:	20001b14 	.word	0x20001b14
    7b88:	00007861 	.word	0x00007861
    7b8c:	20001b94 	.word	0x20001b94
    7b90:	0000787f 	.word	0x0000787f
    7b94:	0000789d 	.word	0x0000789d
    7b98:	00007491 	.word	0x00007491
    7b9c:	000074d5 	.word	0x000074d5
    7ba0:	00007455 	.word	0x00007455
    7ba4:	00007827 	.word	0x00007827
    7ba8:	00007687 	.word	0x00007687
    7bac:	00007647 	.word	0x00007647

00007bb0 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    7bb0:	b580      	push	{r7, lr}
    7bb2:	b082      	sub	sp, #8
    7bb4:	af00      	add	r7, sp, #0
    7bb6:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	4618      	mov	r0, r3
    7bbe:	4b03      	ldr	r3, [pc, #12]	; (7bcc <_can_async_enable+0x1c>)
    7bc0:	4798      	blx	r3
	return ERR_NONE;
    7bc2:	2300      	movs	r3, #0
}
    7bc4:	4618      	mov	r0, r3
    7bc6:	3708      	adds	r7, #8
    7bc8:	46bd      	mov	sp, r7
    7bca:	bd80      	pop	{r7, pc}
    7bcc:	00007647 	.word	0x00007647

00007bd0 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    7bd0:	b590      	push	{r4, r7, lr}
    7bd2:	b089      	sub	sp, #36	; 0x24
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
    7bd8:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    7bda:	2300      	movs	r3, #0
    7bdc:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    7bde:	687b      	ldr	r3, [r7, #4]
    7be0:	681b      	ldr	r3, [r3, #0]
    7be2:	4618      	mov	r0, r3
    7be4:	4b37      	ldr	r3, [pc, #220]	; (7cc4 <_can_async_read+0xf4>)
    7be6:	4798      	blx	r3
    7be8:	4603      	mov	r3, r0
    7bea:	2b00      	cmp	r3, #0
    7bec:	d102      	bne.n	7bf4 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    7bee:	f06f 0309 	mvn.w	r3, #9
    7bf2:	e063      	b.n	7cbc <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	681b      	ldr	r3, [r3, #0]
    7bf8:	4618      	mov	r0, r3
    7bfa:	4b33      	ldr	r3, [pc, #204]	; (7cc8 <_can_async_read+0xf8>)
    7bfc:	4798      	blx	r3
    7bfe:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	681b      	ldr	r3, [r3, #0]
    7c04:	4a31      	ldr	r2, [pc, #196]	; (7ccc <_can_async_read+0xfc>)
    7c06:	4293      	cmp	r3, r2
    7c08:	d108      	bne.n	7c1c <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    7c0a:	69ba      	ldr	r2, [r7, #24]
    7c0c:	4613      	mov	r3, r2
    7c0e:	00db      	lsls	r3, r3, #3
    7c10:	4413      	add	r3, r2
    7c12:	00db      	lsls	r3, r3, #3
    7c14:	461a      	mov	r2, r3
    7c16:	4b2e      	ldr	r3, [pc, #184]	; (7cd0 <_can_async_read+0x100>)
    7c18:	4413      	add	r3, r2
    7c1a:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    7c1c:	69fb      	ldr	r3, [r7, #28]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d102      	bne.n	7c28 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    7c22:	f06f 031b 	mvn.w	r3, #27
    7c26:	e049      	b.n	7cbc <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    7c28:	69fb      	ldr	r3, [r7, #28]
    7c2a:	681b      	ldr	r3, [r3, #0]
    7c2c:	f3c3 7380 	ubfx	r3, r3, #30, #1
    7c30:	b2db      	uxtb	r3, r3
    7c32:	2b01      	cmp	r3, #1
    7c34:	d10a      	bne.n	7c4c <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    7c36:	683b      	ldr	r3, [r7, #0]
    7c38:	2201      	movs	r2, #1
    7c3a:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    7c3c:	69fb      	ldr	r3, [r7, #28]
    7c3e:	681b      	ldr	r3, [r3, #0]
    7c40:	f3c3 031c 	ubfx	r3, r3, #0, #29
    7c44:	461a      	mov	r2, r3
    7c46:	683b      	ldr	r3, [r7, #0]
    7c48:	601a      	str	r2, [r3, #0]
    7c4a:	e00a      	b.n	7c62 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    7c4c:	683b      	ldr	r3, [r7, #0]
    7c4e:	2200      	movs	r2, #0
    7c50:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    7c52:	69fb      	ldr	r3, [r7, #28]
    7c54:	681b      	ldr	r3, [r3, #0]
    7c56:	f3c3 031c 	ubfx	r3, r3, #0, #29
    7c5a:	149b      	asrs	r3, r3, #18
    7c5c:	461a      	mov	r2, r3
    7c5e:	683b      	ldr	r3, [r7, #0]
    7c60:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    7c62:	69fb      	ldr	r3, [r7, #28]
    7c64:	681b      	ldr	r3, [r3, #0]
    7c66:	f3c3 7340 	ubfx	r3, r3, #29, #1
    7c6a:	b2db      	uxtb	r3, r3
    7c6c:	2b01      	cmp	r3, #1
    7c6e:	d102      	bne.n	7c76 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	2201      	movs	r2, #1
    7c74:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    7c76:	4b17      	ldr	r3, [pc, #92]	; (7cd4 <_can_async_read+0x104>)
    7c78:	f107 0408 	add.w	r4, r7, #8
    7c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    7c82:	69fb      	ldr	r3, [r7, #28]
    7c84:	685b      	ldr	r3, [r3, #4]
    7c86:	f3c3 4303 	ubfx	r3, r3, #16, #4
    7c8a:	b2db      	uxtb	r3, r3
    7c8c:	f107 0220 	add.w	r2, r7, #32
    7c90:	4413      	add	r3, r2
    7c92:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    7c96:	683b      	ldr	r3, [r7, #0]
    7c98:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    7c9a:	683b      	ldr	r3, [r7, #0]
    7c9c:	6898      	ldr	r0, [r3, #8]
    7c9e:	69fb      	ldr	r3, [r7, #28]
    7ca0:	f103 0108 	add.w	r1, r3, #8
    7ca4:	683b      	ldr	r3, [r7, #0]
    7ca6:	7b1b      	ldrb	r3, [r3, #12]
    7ca8:	461a      	mov	r2, r3
    7caa:	4b0b      	ldr	r3, [pc, #44]	; (7cd8 <_can_async_read+0x108>)
    7cac:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    7cae:	687b      	ldr	r3, [r7, #4]
    7cb0:	681b      	ldr	r3, [r3, #0]
    7cb2:	69b9      	ldr	r1, [r7, #24]
    7cb4:	4618      	mov	r0, r3
    7cb6:	4b09      	ldr	r3, [pc, #36]	; (7cdc <_can_async_read+0x10c>)
    7cb8:	4798      	blx	r3

	return ERR_NONE;
    7cba:	2300      	movs	r3, #0
}
    7cbc:	4618      	mov	r0, r3
    7cbe:	3724      	adds	r7, #36	; 0x24
    7cc0:	46bd      	mov	sp, r7
    7cc2:	bd90      	pop	{r4, r7, pc}
    7cc4:	00007539 	.word	0x00007539
    7cc8:	00007557 	.word	0x00007557
    7ccc:	42000400 	.word	0x42000400
    7cd0:	20002750 	.word	0x20002750
    7cd4:	000129d8 	.word	0x000129d8
    7cd8:	00011b19 	.word	0x00011b19
    7cdc:	000078d9 	.word	0x000078d9

00007ce0 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    7ce0:	b590      	push	{r4, r7, lr}
    7ce2:	b085      	sub	sp, #20
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
    7ce8:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    7cea:	2300      	movs	r3, #0
    7cec:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	681b      	ldr	r3, [r3, #0]
    7cf2:	4618      	mov	r0, r3
    7cf4:	4b61      	ldr	r3, [pc, #388]	; (7e7c <_can_async_write+0x19c>)
    7cf6:	4798      	blx	r3
    7cf8:	4603      	mov	r3, r0
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d002      	beq.n	7d04 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    7cfe:	f06f 031b 	mvn.w	r3, #27
    7d02:	e0b7      	b.n	7e74 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    7d04:	687b      	ldr	r3, [r7, #4]
    7d06:	681b      	ldr	r3, [r3, #0]
    7d08:	4618      	mov	r0, r3
    7d0a:	4b5d      	ldr	r3, [pc, #372]	; (7e80 <_can_async_write+0x1a0>)
    7d0c:	4798      	blx	r3
    7d0e:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	681b      	ldr	r3, [r3, #0]
    7d14:	4a5b      	ldr	r2, [pc, #364]	; (7e84 <_can_async_write+0x1a4>)
    7d16:	4293      	cmp	r3, r2
    7d18:	d108      	bne.n	7d2c <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    7d1a:	68ba      	ldr	r2, [r7, #8]
    7d1c:	4613      	mov	r3, r2
    7d1e:	00db      	lsls	r3, r3, #3
    7d20:	4413      	add	r3, r2
    7d22:	00db      	lsls	r3, r3, #3
    7d24:	461a      	mov	r2, r3
    7d26:	4b58      	ldr	r3, [pc, #352]	; (7e88 <_can_async_write+0x1a8>)
    7d28:	4413      	add	r3, r2
    7d2a:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    7d2c:	68fb      	ldr	r3, [r7, #12]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d102      	bne.n	7d38 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    7d32:	f06f 031b 	mvn.w	r3, #27
    7d36:	e09d      	b.n	7e74 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    7d38:	683b      	ldr	r3, [r7, #0]
    7d3a:	7b5b      	ldrb	r3, [r3, #13]
    7d3c:	2b01      	cmp	r3, #1
    7d3e:	d109      	bne.n	7d54 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    7d40:	683b      	ldr	r3, [r7, #0]
    7d42:	681a      	ldr	r2, [r3, #0]
    7d44:	68fb      	ldr	r3, [r7, #12]
    7d46:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    7d48:	68fa      	ldr	r2, [r7, #12]
    7d4a:	6813      	ldr	r3, [r2, #0]
    7d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    7d50:	6013      	str	r3, [r2, #0]
    7d52:	e004      	b.n	7d5e <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    7d54:	683b      	ldr	r3, [r7, #0]
    7d56:	681b      	ldr	r3, [r3, #0]
    7d58:	049a      	lsls	r2, r3, #18
    7d5a:	68fb      	ldr	r3, [r7, #12]
    7d5c:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	7b1b      	ldrb	r3, [r3, #12]
    7d62:	2b08      	cmp	r3, #8
    7d64:	d80a      	bhi.n	7d7c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    7d66:	683b      	ldr	r3, [r7, #0]
    7d68:	7b1b      	ldrb	r3, [r3, #12]
    7d6a:	f003 030f 	and.w	r3, r3, #15
    7d6e:	b2d9      	uxtb	r1, r3
    7d70:	68fa      	ldr	r2, [r7, #12]
    7d72:	6853      	ldr	r3, [r2, #4]
    7d74:	f361 4313 	bfi	r3, r1, #16, #4
    7d78:	6053      	str	r3, [r2, #4]
    7d7a:	e04a      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    7d7c:	683b      	ldr	r3, [r7, #0]
    7d7e:	7b1b      	ldrb	r3, [r3, #12]
    7d80:	2b0c      	cmp	r3, #12
    7d82:	d806      	bhi.n	7d92 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    7d84:	68fa      	ldr	r2, [r7, #12]
    7d86:	6853      	ldr	r3, [r2, #4]
    7d88:	2109      	movs	r1, #9
    7d8a:	f361 4313 	bfi	r3, r1, #16, #4
    7d8e:	6053      	str	r3, [r2, #4]
    7d90:	e03f      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    7d92:	683b      	ldr	r3, [r7, #0]
    7d94:	7b1b      	ldrb	r3, [r3, #12]
    7d96:	2b10      	cmp	r3, #16
    7d98:	d806      	bhi.n	7da8 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    7d9a:	68fa      	ldr	r2, [r7, #12]
    7d9c:	6853      	ldr	r3, [r2, #4]
    7d9e:	210a      	movs	r1, #10
    7da0:	f361 4313 	bfi	r3, r1, #16, #4
    7da4:	6053      	str	r3, [r2, #4]
    7da6:	e034      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    7da8:	683b      	ldr	r3, [r7, #0]
    7daa:	7b1b      	ldrb	r3, [r3, #12]
    7dac:	2b14      	cmp	r3, #20
    7dae:	d806      	bhi.n	7dbe <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    7db0:	68fa      	ldr	r2, [r7, #12]
    7db2:	6853      	ldr	r3, [r2, #4]
    7db4:	210b      	movs	r1, #11
    7db6:	f361 4313 	bfi	r3, r1, #16, #4
    7dba:	6053      	str	r3, [r2, #4]
    7dbc:	e029      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    7dbe:	683b      	ldr	r3, [r7, #0]
    7dc0:	7b1b      	ldrb	r3, [r3, #12]
    7dc2:	2b18      	cmp	r3, #24
    7dc4:	d806      	bhi.n	7dd4 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    7dc6:	68fa      	ldr	r2, [r7, #12]
    7dc8:	6853      	ldr	r3, [r2, #4]
    7dca:	210c      	movs	r1, #12
    7dcc:	f361 4313 	bfi	r3, r1, #16, #4
    7dd0:	6053      	str	r3, [r2, #4]
    7dd2:	e01e      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    7dd4:	683b      	ldr	r3, [r7, #0]
    7dd6:	7b1b      	ldrb	r3, [r3, #12]
    7dd8:	2b20      	cmp	r3, #32
    7dda:	d806      	bhi.n	7dea <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    7ddc:	68fa      	ldr	r2, [r7, #12]
    7dde:	6853      	ldr	r3, [r2, #4]
    7de0:	210d      	movs	r1, #13
    7de2:	f361 4313 	bfi	r3, r1, #16, #4
    7de6:	6053      	str	r3, [r2, #4]
    7de8:	e013      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    7dea:	683b      	ldr	r3, [r7, #0]
    7dec:	7b1b      	ldrb	r3, [r3, #12]
    7dee:	2b30      	cmp	r3, #48	; 0x30
    7df0:	d806      	bhi.n	7e00 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    7df2:	68fa      	ldr	r2, [r7, #12]
    7df4:	6853      	ldr	r3, [r2, #4]
    7df6:	210e      	movs	r1, #14
    7df8:	f361 4313 	bfi	r3, r1, #16, #4
    7dfc:	6053      	str	r3, [r2, #4]
    7dfe:	e008      	b.n	7e12 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    7e00:	683b      	ldr	r3, [r7, #0]
    7e02:	7b1b      	ldrb	r3, [r3, #12]
    7e04:	2b40      	cmp	r3, #64	; 0x40
    7e06:	d804      	bhi.n	7e12 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    7e08:	68fa      	ldr	r2, [r7, #12]
    7e0a:	6853      	ldr	r3, [r2, #4]
    7e0c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    7e10:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    7e12:	687b      	ldr	r3, [r7, #4]
    7e14:	681b      	ldr	r3, [r3, #0]
    7e16:	4618      	mov	r0, r3
    7e18:	4b1c      	ldr	r3, [pc, #112]	; (7e8c <_can_async_write+0x1ac>)
    7e1a:	4798      	blx	r3
    7e1c:	4603      	mov	r3, r0
    7e1e:	4619      	mov	r1, r3
    7e20:	68fa      	ldr	r2, [r7, #12]
    7e22:	6853      	ldr	r3, [r2, #4]
    7e24:	f361 5355 	bfi	r3, r1, #21, #1
    7e28:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	681b      	ldr	r3, [r3, #0]
    7e2e:	4618      	mov	r0, r3
    7e30:	4b17      	ldr	r3, [pc, #92]	; (7e90 <_can_async_write+0x1b0>)
    7e32:	4798      	blx	r3
    7e34:	4603      	mov	r3, r0
    7e36:	4619      	mov	r1, r3
    7e38:	68fa      	ldr	r2, [r7, #12]
    7e3a:	6853      	ldr	r3, [r2, #4]
    7e3c:	f361 5314 	bfi	r3, r1, #20, #1
    7e40:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    7e42:	68fb      	ldr	r3, [r7, #12]
    7e44:	f103 0008 	add.w	r0, r3, #8
    7e48:	683b      	ldr	r3, [r7, #0]
    7e4a:	6899      	ldr	r1, [r3, #8]
    7e4c:	683b      	ldr	r3, [r7, #0]
    7e4e:	7b1b      	ldrb	r3, [r3, #12]
    7e50:	461a      	mov	r2, r3
    7e52:	4b10      	ldr	r3, [pc, #64]	; (7e94 <_can_async_write+0x1b4>)
    7e54:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	681c      	ldr	r4, [r3, #0]
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	4618      	mov	r0, r3
    7e60:	4b07      	ldr	r3, [pc, #28]	; (7e80 <_can_async_write+0x1a0>)
    7e62:	4798      	blx	r3
    7e64:	4602      	mov	r2, r0
    7e66:	2301      	movs	r3, #1
    7e68:	4093      	lsls	r3, r2
    7e6a:	4619      	mov	r1, r3
    7e6c:	4620      	mov	r0, r4
    7e6e:	4b0a      	ldr	r3, [pc, #40]	; (7e98 <_can_async_write+0x1b8>)
    7e70:	4798      	blx	r3
	return ERR_NONE;
    7e72:	2300      	movs	r3, #0
}
    7e74:	4618      	mov	r0, r3
    7e76:	3714      	adds	r7, #20
    7e78:	46bd      	mov	sp, r7
    7e7a:	bd90      	pop	{r4, r7, pc}
    7e7c:	00007577 	.word	0x00007577
    7e80:	000075a1 	.word	0x000075a1
    7e84:	42000400 	.word	0x42000400
    7e88:	20002708 	.word	0x20002708
    7e8c:	000076a7 	.word	0x000076a7
    7e90:	000076d7 	.word	0x000076d7
    7e94:	00011b19 	.word	0x00011b19
    7e98:	0000796d 	.word	0x0000796d

00007e9c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	b084      	sub	sp, #16
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
    7ea4:	460b      	mov	r3, r1
    7ea6:	70fb      	strb	r3, [r7, #3]
    7ea8:	4613      	mov	r3, r2
    7eaa:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    7eac:	78fb      	ldrb	r3, [r7, #3]
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d107      	bne.n	7ec2 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	78ba      	ldrb	r2, [r7, #2]
    7eb8:	4611      	mov	r1, r2
    7eba:	4618      	mov	r0, r3
    7ebc:	4b16      	ldr	r3, [pc, #88]	; (7f18 <_can_async_set_irq_state+0x7c>)
    7ebe:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    7ec0:	e026      	b.n	7f10 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    7ec2:	78fb      	ldrb	r3, [r7, #3]
    7ec4:	2b01      	cmp	r3, #1
    7ec6:	d10e      	bne.n	7ee6 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	78ba      	ldrb	r2, [r7, #2]
    7ece:	4611      	mov	r1, r2
    7ed0:	4618      	mov	r0, r3
    7ed2:	4b12      	ldr	r3, [pc, #72]	; (7f1c <_can_async_set_irq_state+0x80>)
    7ed4:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	f04f 31ff 	mov.w	r1, #4294967295
    7ede:	4618      	mov	r0, r3
    7ee0:	4b0f      	ldr	r3, [pc, #60]	; (7f20 <_can_async_set_irq_state+0x84>)
    7ee2:	4798      	blx	r3
	return;
    7ee4:	e014      	b.n	7f10 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    7ee6:	78fb      	ldrb	r3, [r7, #3]
    7ee8:	2b02      	cmp	r3, #2
    7eea:	d111      	bne.n	7f10 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	681b      	ldr	r3, [r3, #0]
    7ef0:	f240 2101 	movw	r1, #513	; 0x201
    7ef4:	4618      	mov	r0, r3
    7ef6:	4b0b      	ldr	r3, [pc, #44]	; (7f24 <_can_async_set_irq_state+0x88>)
    7ef8:	4798      	blx	r3
    7efa:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    7efc:	687b      	ldr	r3, [r7, #4]
    7efe:	681a      	ldr	r2, [r3, #0]
    7f00:	68fb      	ldr	r3, [r7, #12]
    7f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    7f06:	4619      	mov	r1, r3
    7f08:	4610      	mov	r0, r2
    7f0a:	4b07      	ldr	r3, [pc, #28]	; (7f28 <_can_async_set_irq_state+0x8c>)
    7f0c:	4798      	blx	r3
	return;
    7f0e:	bf00      	nop
    7f10:	bf00      	nop
}
    7f12:	3710      	adds	r7, #16
    7f14:	46bd      	mov	sp, r7
    7f16:	bd80      	pop	{r7, pc}
    7f18:	00007779 	.word	0x00007779
    7f1c:	000077ad 	.word	0x000077ad
    7f20:	0000798b 	.word	0x0000798b
    7f24:	000077e5 	.word	0x000077e5
    7f28:	0000780b 	.word	0x0000780b

00007f2c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    7f2c:	b480      	push	{r7}
    7f2e:	b087      	sub	sp, #28
    7f30:	af00      	add	r7, sp, #0
    7f32:	60f8      	str	r0, [r7, #12]
    7f34:	607b      	str	r3, [r7, #4]
    7f36:	460b      	mov	r3, r1
    7f38:	72fb      	strb	r3, [r7, #11]
    7f3a:	4613      	mov	r3, r2
    7f3c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    7f3e:	68fb      	ldr	r3, [r7, #12]
    7f40:	699b      	ldr	r3, [r3, #24]
    7f42:	68da      	ldr	r2, [r3, #12]
    7f44:	7afb      	ldrb	r3, [r7, #11]
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	4413      	add	r3, r2
    7f4a:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	699b      	ldr	r3, [r3, #24]
    7f50:	691a      	ldr	r2, [r3, #16]
    7f52:	7afb      	ldrb	r3, [r7, #11]
    7f54:	00db      	lsls	r3, r3, #3
    7f56:	4413      	add	r3, r2
    7f58:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    7f5a:	7abb      	ldrb	r3, [r7, #10]
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d123      	bne.n	7fa8 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	2b00      	cmp	r3, #0
    7f64:	d104      	bne.n	7f70 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    7f66:	697b      	ldr	r3, [r7, #20]
    7f68:	2200      	movs	r2, #0
    7f6a:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    7f6c:	2300      	movs	r3, #0
    7f6e:	e03b      	b.n	7fe8 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	685a      	ldr	r2, [r3, #4]
    7f74:	697b      	ldr	r3, [r7, #20]
    7f76:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	b29b      	uxth	r3, r3
    7f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    7f82:	b299      	uxth	r1, r3
    7f84:	697a      	ldr	r2, [r7, #20]
    7f86:	6813      	ldr	r3, [r2, #0]
    7f88:	f361 431a 	bfi	r3, r1, #16, #11
    7f8c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    7f8e:	697a      	ldr	r2, [r7, #20]
    7f90:	6813      	ldr	r3, [r2, #0]
    7f92:	2102      	movs	r1, #2
    7f94:	f361 739f 	bfi	r3, r1, #30, #2
    7f98:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    7f9a:	697a      	ldr	r2, [r7, #20]
    7f9c:	6813      	ldr	r3, [r2, #0]
    7f9e:	2101      	movs	r1, #1
    7fa0:	f361 63dd 	bfi	r3, r1, #27, #3
    7fa4:	6013      	str	r3, [r2, #0]
    7fa6:	e01e      	b.n	7fe6 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    7fa8:	7abb      	ldrb	r3, [r7, #10]
    7faa:	2b01      	cmp	r3, #1
    7fac:	d11b      	bne.n	7fe6 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    7fae:	687b      	ldr	r3, [r7, #4]
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d104      	bne.n	7fbe <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    7fb4:	693b      	ldr	r3, [r7, #16]
    7fb6:	2200      	movs	r2, #0
    7fb8:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    7fba:	2300      	movs	r3, #0
    7fbc:	e014      	b.n	7fe8 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	681a      	ldr	r2, [r3, #0]
    7fc2:	693b      	ldr	r3, [r7, #16]
    7fc4:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    7fc6:	693a      	ldr	r2, [r7, #16]
    7fc8:	6813      	ldr	r3, [r2, #0]
    7fca:	2101      	movs	r1, #1
    7fcc:	f361 735f 	bfi	r3, r1, #29, #3
    7fd0:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	685a      	ldr	r2, [r3, #4]
    7fd6:	693b      	ldr	r3, [r7, #16]
    7fd8:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    7fda:	693a      	ldr	r2, [r7, #16]
    7fdc:	6853      	ldr	r3, [r2, #4]
    7fde:	2102      	movs	r1, #2
    7fe0:	f361 739f 	bfi	r3, r1, #30, #2
    7fe4:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    7fe6:	2300      	movs	r3, #0
}
    7fe8:	4618      	mov	r0, r3
    7fea:	371c      	adds	r7, #28
    7fec:	46bd      	mov	sp, r7
    7fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff2:	4770      	bx	lr

00007ff4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    7ff4:	b590      	push	{r4, r7, lr}
    7ff6:	b083      	sub	sp, #12
    7ff8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    7ffa:	4b2c      	ldr	r3, [pc, #176]	; (80ac <CAN1_Handler+0xb8>)
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	681b      	ldr	r3, [r3, #0]
    8004:	4618      	mov	r0, r3
    8006:	4b2a      	ldr	r3, [pc, #168]	; (80b0 <CAN1_Handler+0xbc>)
    8008:	4798      	blx	r3
    800a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    800c:	683b      	ldr	r3, [r7, #0]
    800e:	f003 0301 	and.w	r3, r3, #1
    8012:	2b00      	cmp	r3, #0
    8014:	d003      	beq.n	801e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	689b      	ldr	r3, [r3, #8]
    801a:	6878      	ldr	r0, [r7, #4]
    801c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    801e:	683b      	ldr	r3, [r7, #0]
    8020:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8024:	2b00      	cmp	r3, #0
    8026:	d003      	beq.n	8030 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    8028:	687b      	ldr	r3, [r7, #4]
    802a:	685b      	ldr	r3, [r3, #4]
    802c:	6878      	ldr	r0, [r7, #4]
    802e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8030:	683b      	ldr	r3, [r7, #0]
    8032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8036:	2b00      	cmp	r3, #0
    8038:	d004      	beq.n	8044 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	68db      	ldr	r3, [r3, #12]
    803e:	2103      	movs	r1, #3
    8040:	6878      	ldr	r0, [r7, #4]
    8042:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    804a:	2b00      	cmp	r3, #0
    804c:	d004      	beq.n	8058 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    804e:	687b      	ldr	r3, [r7, #4]
    8050:	68db      	ldr	r3, [r3, #12]
    8052:	2100      	movs	r1, #0
    8054:	6878      	ldr	r0, [r7, #4]
    8056:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    8058:	683b      	ldr	r3, [r7, #0]
    805a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    805e:	2b00      	cmp	r3, #0
    8060:	d00f      	beq.n	8082 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8062:	687b      	ldr	r3, [r7, #4]
    8064:	68dc      	ldr	r4, [r3, #12]
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	681b      	ldr	r3, [r3, #0]
    806a:	4618      	mov	r0, r3
    806c:	4b11      	ldr	r3, [pc, #68]	; (80b4 <CAN1_Handler+0xc0>)
    806e:	4798      	blx	r3
    8070:	4603      	mov	r3, r0
    8072:	2b00      	cmp	r3, #0
    8074:	d001      	beq.n	807a <CAN1_Handler+0x86>
    8076:	2302      	movs	r3, #2
    8078:	e000      	b.n	807c <CAN1_Handler+0x88>
    807a:	2301      	movs	r3, #1
    807c:	4619      	mov	r1, r3
    807e:	6878      	ldr	r0, [r7, #4]
    8080:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    8082:	683b      	ldr	r3, [r7, #0]
    8084:	f003 0308 	and.w	r3, r3, #8
    8088:	2b00      	cmp	r3, #0
    808a:	d004      	beq.n	8096 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	68db      	ldr	r3, [r3, #12]
    8090:	2104      	movs	r1, #4
    8092:	6878      	ldr	r0, [r7, #4]
    8094:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	6839      	ldr	r1, [r7, #0]
    809c:	4618      	mov	r0, r3
    809e:	4b06      	ldr	r3, [pc, #24]	; (80b8 <CAN1_Handler+0xc4>)
    80a0:	4798      	blx	r3
}
    80a2:	bf00      	nop
    80a4:	370c      	adds	r7, #12
    80a6:	46bd      	mov	sp, r7
    80a8:	bd90      	pop	{r4, r7, pc}
    80aa:	bf00      	nop
    80ac:	20001ba4 	.word	0x20001ba4
    80b0:	00007761 	.word	0x00007761
    80b4:	00007511 	.word	0x00007511
    80b8:	00007745 	.word	0x00007745

000080bc <__NVIC_SetPendingIRQ>:
{
    80bc:	b480      	push	{r7}
    80be:	b083      	sub	sp, #12
    80c0:	af00      	add	r7, sp, #0
    80c2:	4603      	mov	r3, r0
    80c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80ca:	2b00      	cmp	r3, #0
    80cc:	db0c      	blt.n	80e8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80ce:	4909      	ldr	r1, [pc, #36]	; (80f4 <__NVIC_SetPendingIRQ+0x38>)
    80d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80d4:	095b      	lsrs	r3, r3, #5
    80d6:	88fa      	ldrh	r2, [r7, #6]
    80d8:	f002 021f 	and.w	r2, r2, #31
    80dc:	2001      	movs	r0, #1
    80de:	fa00 f202 	lsl.w	r2, r0, r2
    80e2:	3340      	adds	r3, #64	; 0x40
    80e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80e8:	bf00      	nop
    80ea:	370c      	adds	r7, #12
    80ec:	46bd      	mov	sp, r7
    80ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f2:	4770      	bx	lr
    80f4:	e000e100 	.word	0xe000e100

000080f8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    80f8:	b580      	push	{r7, lr}
    80fa:	b082      	sub	sp, #8
    80fc:	af00      	add	r7, sp, #0
    80fe:	4603      	mov	r3, r0
    8100:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    8102:	79fb      	ldrb	r3, [r7, #7]
    8104:	b21b      	sxth	r3, r3
    8106:	4618      	mov	r0, r3
    8108:	4b02      	ldr	r3, [pc, #8]	; (8114 <_irq_set+0x1c>)
    810a:	4798      	blx	r3
}
    810c:	bf00      	nop
    810e:	3708      	adds	r7, #8
    8110:	46bd      	mov	sp, r7
    8112:	bd80      	pop	{r7, pc}
    8114:	000080bd 	.word	0x000080bd

00008118 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    8118:	b480      	push	{r7}
    811a:	b083      	sub	sp, #12
    811c:	af00      	add	r7, sp, #0
    811e:	4603      	mov	r3, r0
    8120:	6039      	str	r1, [r7, #0]
    8122:	80fb      	strh	r3, [r7, #6]
    8124:	4613      	mov	r3, r2
    8126:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8128:	797b      	ldrb	r3, [r7, #5]
    812a:	3b04      	subs	r3, #4
    812c:	2b05      	cmp	r3, #5
    812e:	d86b      	bhi.n	8208 <_get_cycles_for_us_internal+0xf0>
    8130:	a201      	add	r2, pc, #4	; (adr r2, 8138 <_get_cycles_for_us_internal+0x20>)
    8132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8136:	bf00      	nop
    8138:	000081e7 	.word	0x000081e7
    813c:	000081c7 	.word	0x000081c7
    8140:	000081a9 	.word	0x000081a9
    8144:	0000818b 	.word	0x0000818b
    8148:	0000816d 	.word	0x0000816d
    814c:	00008151 	.word	0x00008151
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8150:	88fb      	ldrh	r3, [r7, #6]
    8152:	683a      	ldr	r2, [r7, #0]
    8154:	4935      	ldr	r1, [pc, #212]	; (822c <_get_cycles_for_us_internal+0x114>)
    8156:	fba1 1202 	umull	r1, r2, r1, r2
    815a:	0c92      	lsrs	r2, r2, #18
    815c:	fb02 f303 	mul.w	r3, r2, r3
    8160:	3302      	adds	r3, #2
    8162:	4a33      	ldr	r2, [pc, #204]	; (8230 <_get_cycles_for_us_internal+0x118>)
    8164:	fba2 2303 	umull	r2, r3, r2, r3
    8168:	085b      	lsrs	r3, r3, #1
    816a:	e059      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    816c:	88fb      	ldrh	r3, [r7, #6]
    816e:	683a      	ldr	r2, [r7, #0]
    8170:	0952      	lsrs	r2, r2, #5
    8172:	4930      	ldr	r1, [pc, #192]	; (8234 <_get_cycles_for_us_internal+0x11c>)
    8174:	fba1 1202 	umull	r1, r2, r1, r2
    8178:	09d2      	lsrs	r2, r2, #7
    817a:	fb02 f303 	mul.w	r3, r2, r3
    817e:	331d      	adds	r3, #29
    8180:	4a2d      	ldr	r2, [pc, #180]	; (8238 <_get_cycles_for_us_internal+0x120>)
    8182:	fba2 2303 	umull	r2, r3, r2, r3
    8186:	091b      	lsrs	r3, r3, #4
    8188:	e04a      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    818a:	88fb      	ldrh	r3, [r7, #6]
    818c:	683a      	ldr	r2, [r7, #0]
    818e:	492b      	ldr	r1, [pc, #172]	; (823c <_get_cycles_for_us_internal+0x124>)
    8190:	fba1 1202 	umull	r1, r2, r1, r2
    8194:	0b52      	lsrs	r2, r2, #13
    8196:	fb02 f303 	mul.w	r3, r2, r3
    819a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    819e:	4a28      	ldr	r2, [pc, #160]	; (8240 <_get_cycles_for_us_internal+0x128>)
    81a0:	fba2 2303 	umull	r2, r3, r2, r3
    81a4:	095b      	lsrs	r3, r3, #5
    81a6:	e03b      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    81a8:	88fb      	ldrh	r3, [r7, #6]
    81aa:	683a      	ldr	r2, [r7, #0]
    81ac:	4925      	ldr	r1, [pc, #148]	; (8244 <_get_cycles_for_us_internal+0x12c>)
    81ae:	fba1 1202 	umull	r1, r2, r1, r2
    81b2:	0992      	lsrs	r2, r2, #6
    81b4:	fb02 f303 	mul.w	r3, r2, r3
    81b8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    81bc:	4a22      	ldr	r2, [pc, #136]	; (8248 <_get_cycles_for_us_internal+0x130>)
    81be:	fba2 2303 	umull	r2, r3, r2, r3
    81c2:	099b      	lsrs	r3, r3, #6
    81c4:	e02c      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    81c6:	88fb      	ldrh	r3, [r7, #6]
    81c8:	683a      	ldr	r2, [r7, #0]
    81ca:	4920      	ldr	r1, [pc, #128]	; (824c <_get_cycles_for_us_internal+0x134>)
    81cc:	fba1 1202 	umull	r1, r2, r1, r2
    81d0:	0952      	lsrs	r2, r2, #5
    81d2:	fb02 f303 	mul.w	r3, r2, r3
    81d6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    81da:	332f      	adds	r3, #47	; 0x2f
    81dc:	4a1c      	ldr	r2, [pc, #112]	; (8250 <_get_cycles_for_us_internal+0x138>)
    81de:	fba2 2303 	umull	r2, r3, r2, r3
    81e2:	0b5b      	lsrs	r3, r3, #13
    81e4:	e01c      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    81e6:	88fb      	ldrh	r3, [r7, #6]
    81e8:	683a      	ldr	r2, [r7, #0]
    81ea:	491a      	ldr	r1, [pc, #104]	; (8254 <_get_cycles_for_us_internal+0x13c>)
    81ec:	fba1 1202 	umull	r1, r2, r1, r2
    81f0:	08d2      	lsrs	r2, r2, #3
    81f2:	fb02 f303 	mul.w	r3, r2, r3
    81f6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    81fa:	f203 33df 	addw	r3, r3, #991	; 0x3df
    81fe:	4a16      	ldr	r2, [pc, #88]	; (8258 <_get_cycles_for_us_internal+0x140>)
    8200:	fba2 2303 	umull	r2, r3, r2, r3
    8204:	0c5b      	lsrs	r3, r3, #17
    8206:	e00b      	b.n	8220 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    8208:	88fb      	ldrh	r3, [r7, #6]
    820a:	683a      	ldr	r2, [r7, #0]
    820c:	fb02 f303 	mul.w	r3, r2, r3
    8210:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8214:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8218:	4a10      	ldr	r2, [pc, #64]	; (825c <_get_cycles_for_us_internal+0x144>)
    821a:	fba2 2303 	umull	r2, r3, r2, r3
    821e:	0c9b      	lsrs	r3, r3, #18
	}
}
    8220:	4618      	mov	r0, r3
    8222:	370c      	adds	r7, #12
    8224:	46bd      	mov	sp, r7
    8226:	f85d 7b04 	ldr.w	r7, [sp], #4
    822a:	4770      	bx	lr
    822c:	431bde83 	.word	0x431bde83
    8230:	aaaaaaab 	.word	0xaaaaaaab
    8234:	0a7c5ac5 	.word	0x0a7c5ac5
    8238:	88888889 	.word	0x88888889
    823c:	d1b71759 	.word	0xd1b71759
    8240:	1b4e81b5 	.word	0x1b4e81b5
    8244:	10624dd3 	.word	0x10624dd3
    8248:	057619f1 	.word	0x057619f1
    824c:	51eb851f 	.word	0x51eb851f
    8250:	45e7b273 	.word	0x45e7b273
    8254:	cccccccd 	.word	0xcccccccd
    8258:	6fd91d85 	.word	0x6fd91d85
    825c:	165e9f81 	.word	0x165e9f81

00008260 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8260:	b580      	push	{r7, lr}
    8262:	b082      	sub	sp, #8
    8264:	af00      	add	r7, sp, #0
    8266:	4603      	mov	r3, r0
    8268:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    826a:	88fb      	ldrh	r3, [r7, #6]
    826c:	2209      	movs	r2, #9
    826e:	4904      	ldr	r1, [pc, #16]	; (8280 <_get_cycles_for_us+0x20>)
    8270:	4618      	mov	r0, r3
    8272:	4b04      	ldr	r3, [pc, #16]	; (8284 <_get_cycles_for_us+0x24>)
    8274:	4798      	blx	r3
    8276:	4603      	mov	r3, r0
}
    8278:	4618      	mov	r0, r3
    827a:	3708      	adds	r7, #8
    827c:	46bd      	mov	sp, r7
    827e:	bd80      	pop	{r7, pc}
    8280:	07270e00 	.word	0x07270e00
    8284:	00008119 	.word	0x00008119

00008288 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8288:	b480      	push	{r7}
    828a:	b083      	sub	sp, #12
    828c:	af00      	add	r7, sp, #0
    828e:	4603      	mov	r3, r0
    8290:	6039      	str	r1, [r7, #0]
    8292:	80fb      	strh	r3, [r7, #6]
    8294:	4613      	mov	r3, r2
    8296:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8298:	797b      	ldrb	r3, [r7, #5]
    829a:	3b04      	subs	r3, #4
    829c:	2b05      	cmp	r3, #5
    829e:	d870      	bhi.n	8382 <_get_cycles_for_ms_internal+0xfa>
    82a0:	a201      	add	r2, pc, #4	; (adr r2, 82a8 <_get_cycles_for_ms_internal+0x20>)
    82a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    82a6:	bf00      	nop
    82a8:	00008365 	.word	0x00008365
    82ac:	00008349 	.word	0x00008349
    82b0:	0000832d 	.word	0x0000832d
    82b4:	00008309 	.word	0x00008309
    82b8:	000082e5 	.word	0x000082e5
    82bc:	000082c1 	.word	0x000082c1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    82c0:	88fb      	ldrh	r3, [r7, #6]
    82c2:	683a      	ldr	r2, [r7, #0]
    82c4:	4937      	ldr	r1, [pc, #220]	; (83a4 <_get_cycles_for_ms_internal+0x11c>)
    82c6:	fba1 1202 	umull	r1, r2, r1, r2
    82ca:	0c92      	lsrs	r2, r2, #18
    82cc:	fb02 f303 	mul.w	r3, r2, r3
    82d0:	3302      	adds	r3, #2
    82d2:	4a35      	ldr	r2, [pc, #212]	; (83a8 <_get_cycles_for_ms_internal+0x120>)
    82d4:	fba2 2303 	umull	r2, r3, r2, r3
    82d8:	085b      	lsrs	r3, r3, #1
    82da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    82de:	fb02 f303 	mul.w	r3, r2, r3
    82e2:	e058      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    82e4:	88fb      	ldrh	r3, [r7, #6]
    82e6:	683a      	ldr	r2, [r7, #0]
    82e8:	0952      	lsrs	r2, r2, #5
    82ea:	4930      	ldr	r1, [pc, #192]	; (83ac <_get_cycles_for_ms_internal+0x124>)
    82ec:	fba1 1202 	umull	r1, r2, r1, r2
    82f0:	09d2      	lsrs	r2, r2, #7
    82f2:	fb02 f303 	mul.w	r3, r2, r3
    82f6:	3302      	adds	r3, #2
    82f8:	4a2b      	ldr	r2, [pc, #172]	; (83a8 <_get_cycles_for_ms_internal+0x120>)
    82fa:	fba2 2303 	umull	r2, r3, r2, r3
    82fe:	085b      	lsrs	r3, r3, #1
    8300:	2264      	movs	r2, #100	; 0x64
    8302:	fb02 f303 	mul.w	r3, r2, r3
    8306:	e046      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    8308:	88fb      	ldrh	r3, [r7, #6]
    830a:	683a      	ldr	r2, [r7, #0]
    830c:	4928      	ldr	r1, [pc, #160]	; (83b0 <_get_cycles_for_ms_internal+0x128>)
    830e:	fba1 1202 	umull	r1, r2, r1, r2
    8312:	0b52      	lsrs	r2, r2, #13
    8314:	fb02 f303 	mul.w	r3, r2, r3
    8318:	3302      	adds	r3, #2
    831a:	4a23      	ldr	r2, [pc, #140]	; (83a8 <_get_cycles_for_ms_internal+0x120>)
    831c:	fba2 2303 	umull	r2, r3, r2, r3
    8320:	085a      	lsrs	r2, r3, #1
    8322:	4613      	mov	r3, r2
    8324:	009b      	lsls	r3, r3, #2
    8326:	4413      	add	r3, r2
    8328:	005b      	lsls	r3, r3, #1
    832a:	e034      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    832c:	88fb      	ldrh	r3, [r7, #6]
    832e:	683a      	ldr	r2, [r7, #0]
    8330:	4920      	ldr	r1, [pc, #128]	; (83b4 <_get_cycles_for_ms_internal+0x12c>)
    8332:	fba1 1202 	umull	r1, r2, r1, r2
    8336:	0992      	lsrs	r2, r2, #6
    8338:	fb02 f303 	mul.w	r3, r2, r3
    833c:	3302      	adds	r3, #2
    833e:	4a1a      	ldr	r2, [pc, #104]	; (83a8 <_get_cycles_for_ms_internal+0x120>)
    8340:	fba2 2303 	umull	r2, r3, r2, r3
    8344:	085b      	lsrs	r3, r3, #1
    8346:	e026      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    8348:	88fb      	ldrh	r3, [r7, #6]
    834a:	683a      	ldr	r2, [r7, #0]
    834c:	491a      	ldr	r1, [pc, #104]	; (83b8 <_get_cycles_for_ms_internal+0x130>)
    834e:	fba1 1202 	umull	r1, r2, r1, r2
    8352:	0952      	lsrs	r2, r2, #5
    8354:	fb02 f303 	mul.w	r3, r2, r3
    8358:	331d      	adds	r3, #29
    835a:	4a18      	ldr	r2, [pc, #96]	; (83bc <_get_cycles_for_ms_internal+0x134>)
    835c:	fba2 2303 	umull	r2, r3, r2, r3
    8360:	091b      	lsrs	r3, r3, #4
    8362:	e018      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8364:	88fb      	ldrh	r3, [r7, #6]
    8366:	683a      	ldr	r2, [r7, #0]
    8368:	4915      	ldr	r1, [pc, #84]	; (83c0 <_get_cycles_for_ms_internal+0x138>)
    836a:	fba1 1202 	umull	r1, r2, r1, r2
    836e:	08d2      	lsrs	r2, r2, #3
    8370:	fb02 f303 	mul.w	r3, r2, r3
    8374:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8378:	4a12      	ldr	r2, [pc, #72]	; (83c4 <_get_cycles_for_ms_internal+0x13c>)
    837a:	fba2 2303 	umull	r2, r3, r2, r3
    837e:	095b      	lsrs	r3, r3, #5
    8380:	e009      	b.n	8396 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8382:	88fb      	ldrh	r3, [r7, #6]
    8384:	683a      	ldr	r2, [r7, #0]
    8386:	fb02 f303 	mul.w	r3, r2, r3
    838a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    838e:	4a0e      	ldr	r2, [pc, #56]	; (83c8 <_get_cycles_for_ms_internal+0x140>)
    8390:	fba2 2303 	umull	r2, r3, r2, r3
    8394:	099b      	lsrs	r3, r3, #6
	}
}
    8396:	4618      	mov	r0, r3
    8398:	370c      	adds	r7, #12
    839a:	46bd      	mov	sp, r7
    839c:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a0:	4770      	bx	lr
    83a2:	bf00      	nop
    83a4:	431bde83 	.word	0x431bde83
    83a8:	aaaaaaab 	.word	0xaaaaaaab
    83ac:	0a7c5ac5 	.word	0x0a7c5ac5
    83b0:	d1b71759 	.word	0xd1b71759
    83b4:	10624dd3 	.word	0x10624dd3
    83b8:	51eb851f 	.word	0x51eb851f
    83bc:	88888889 	.word	0x88888889
    83c0:	cccccccd 	.word	0xcccccccd
    83c4:	1b4e81b5 	.word	0x1b4e81b5
    83c8:	057619f1 	.word	0x057619f1

000083cc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    83cc:	b580      	push	{r7, lr}
    83ce:	b082      	sub	sp, #8
    83d0:	af00      	add	r7, sp, #0
    83d2:	4603      	mov	r3, r0
    83d4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    83d6:	88fb      	ldrh	r3, [r7, #6]
    83d8:	2209      	movs	r2, #9
    83da:	4904      	ldr	r1, [pc, #16]	; (83ec <_get_cycles_for_ms+0x20>)
    83dc:	4618      	mov	r0, r3
    83de:	4b04      	ldr	r3, [pc, #16]	; (83f0 <_get_cycles_for_ms+0x24>)
    83e0:	4798      	blx	r3
    83e2:	4603      	mov	r3, r0
}
    83e4:	4618      	mov	r0, r3
    83e6:	3708      	adds	r7, #8
    83e8:	46bd      	mov	sp, r7
    83ea:	bd80      	pop	{r7, pc}
    83ec:	07270e00 	.word	0x07270e00
    83f0:	00008289 	.word	0x00008289
    83f4:	00000000 	.word	0x00000000

000083f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    83f8:	b480      	push	{r7}
    83fa:	b083      	sub	sp, #12
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
    8400:	6039      	str	r1, [r7, #0]
    8402:	bf00      	nop
    8404:	f3af 8000 	nop.w

00008408 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8408:	3901      	subs	r1, #1
    840a:	d8fd      	bhi.n	8408 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    840c:	bf00      	nop
    840e:	370c      	adds	r7, #12
    8410:	46bd      	mov	sp, r7
    8412:	f85d 7b04 	ldr.w	r7, [sp], #4
    8416:	4770      	bx	lr

00008418 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8418:	b480      	push	{r7}
    841a:	b083      	sub	sp, #12
    841c:	af00      	add	r7, sp, #0
    841e:	6078      	str	r0, [r7, #4]
    8420:	460b      	mov	r3, r1
    8422:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8424:	687b      	ldr	r3, [r7, #4]
    8426:	881b      	ldrh	r3, [r3, #0]
    8428:	b29a      	uxth	r2, r3
    842a:	887b      	ldrh	r3, [r7, #2]
    842c:	021b      	lsls	r3, r3, #8
    842e:	b29b      	uxth	r3, r3
    8430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8434:	b29b      	uxth	r3, r3
    8436:	4313      	orrs	r3, r2
    8438:	b29a      	uxth	r2, r3
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    843e:	bf00      	nop
    8440:	370c      	adds	r7, #12
    8442:	46bd      	mov	sp, r7
    8444:	f85d 7b04 	ldr.w	r7, [sp], #4
    8448:	4770      	bx	lr

0000844a <hri_port_set_EVCTRL_reg>:
{
    844a:	b480      	push	{r7}
    844c:	b085      	sub	sp, #20
    844e:	af00      	add	r7, sp, #0
    8450:	60f8      	str	r0, [r7, #12]
    8452:	460b      	mov	r3, r1
    8454:	607a      	str	r2, [r7, #4]
    8456:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8458:	7afb      	ldrb	r3, [r7, #11]
    845a:	7afa      	ldrb	r2, [r7, #11]
    845c:	68f9      	ldr	r1, [r7, #12]
    845e:	01d2      	lsls	r2, r2, #7
    8460:	440a      	add	r2, r1
    8462:	322c      	adds	r2, #44	; 0x2c
    8464:	6811      	ldr	r1, [r2, #0]
    8466:	687a      	ldr	r2, [r7, #4]
    8468:	430a      	orrs	r2, r1
    846a:	68f9      	ldr	r1, [r7, #12]
    846c:	01db      	lsls	r3, r3, #7
    846e:	440b      	add	r3, r1
    8470:	332c      	adds	r3, #44	; 0x2c
    8472:	601a      	str	r2, [r3, #0]
}
    8474:	bf00      	nop
    8476:	3714      	adds	r7, #20
    8478:	46bd      	mov	sp, r7
    847a:	f85d 7b04 	ldr.w	r7, [sp], #4
    847e:	4770      	bx	lr

00008480 <_port_event_init>:

static inline void _port_event_init()
{
    8480:	b580      	push	{r7, lr}
    8482:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8484:	2200      	movs	r2, #0
    8486:	2100      	movs	r1, #0
    8488:	480a      	ldr	r0, [pc, #40]	; (84b4 <_port_event_init+0x34>)
    848a:	4b0b      	ldr	r3, [pc, #44]	; (84b8 <_port_event_init+0x38>)
    848c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    848e:	2200      	movs	r2, #0
    8490:	2101      	movs	r1, #1
    8492:	4808      	ldr	r0, [pc, #32]	; (84b4 <_port_event_init+0x34>)
    8494:	4b08      	ldr	r3, [pc, #32]	; (84b8 <_port_event_init+0x38>)
    8496:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8498:	f64e 72ef 	movw	r2, #61423	; 0xefef
    849c:	2102      	movs	r1, #2
    849e:	4805      	ldr	r0, [pc, #20]	; (84b4 <_port_event_init+0x34>)
    84a0:	4b05      	ldr	r3, [pc, #20]	; (84b8 <_port_event_init+0x38>)
    84a2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    84a4:	2200      	movs	r2, #0
    84a6:	2103      	movs	r1, #3
    84a8:	4802      	ldr	r0, [pc, #8]	; (84b4 <_port_event_init+0x34>)
    84aa:	4b03      	ldr	r3, [pc, #12]	; (84b8 <_port_event_init+0x38>)
    84ac:	4798      	blx	r3
}
    84ae:	bf00      	nop
    84b0:	bd80      	pop	{r7, pc}
    84b2:	bf00      	nop
    84b4:	41008000 	.word	0x41008000
    84b8:	0000844b 	.word	0x0000844b

000084bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    84bc:	b580      	push	{r7, lr}
    84be:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    84c0:	2104      	movs	r1, #4
    84c2:	480b      	ldr	r0, [pc, #44]	; (84f0 <_init_chip+0x34>)
    84c4:	4b0b      	ldr	r3, [pc, #44]	; (84f4 <_init_chip+0x38>)
    84c6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    84c8:	4b0b      	ldr	r3, [pc, #44]	; (84f8 <_init_chip+0x3c>)
    84ca:	4798      	blx	r3
	_oscctrl_init_sources();
    84cc:	4b0b      	ldr	r3, [pc, #44]	; (84fc <_init_chip+0x40>)
    84ce:	4798      	blx	r3
	_mclk_init();
    84d0:	4b0b      	ldr	r3, [pc, #44]	; (8500 <_init_chip+0x44>)
    84d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    84d4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    84d8:	4b0a      	ldr	r3, [pc, #40]	; (8504 <_init_chip+0x48>)
    84da:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    84dc:	4b0a      	ldr	r3, [pc, #40]	; (8508 <_init_chip+0x4c>)
    84de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    84e0:	f640 30df 	movw	r0, #3039	; 0xbdf
    84e4:	4b07      	ldr	r3, [pc, #28]	; (8504 <_init_chip+0x48>)
    84e6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    84e8:	4b08      	ldr	r3, [pc, #32]	; (850c <_init_chip+0x50>)
    84ea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    84ec:	bf00      	nop
    84ee:	bd80      	pop	{r7, pc}
    84f0:	41004000 	.word	0x41004000
    84f4:	00008419 	.word	0x00008419
    84f8:	00008f0d 	.word	0x00008f0d
    84fc:	000093d5 	.word	0x000093d5
    8500:	00008e2d 	.word	0x00008e2d
    8504:	00008cd5 	.word	0x00008cd5
    8508:	00009415 	.word	0x00009415
    850c:	00008481 	.word	0x00008481

00008510 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8510:	b480      	push	{r7}
    8512:	b083      	sub	sp, #12
    8514:	af00      	add	r7, sp, #0
    8516:	6078      	str	r0, [r7, #4]
    8518:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	683a      	ldr	r2, [r7, #0]
    851e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8520:	2300      	movs	r3, #0
}
    8522:	4618      	mov	r0, r3
    8524:	370c      	adds	r7, #12
    8526:	46bd      	mov	sp, r7
    8528:	f85d 7b04 	ldr.w	r7, [sp], #4
    852c:	4770      	bx	lr
	...

00008530 <__NVIC_EnableIRQ>:
{
    8530:	b480      	push	{r7}
    8532:	b083      	sub	sp, #12
    8534:	af00      	add	r7, sp, #0
    8536:	4603      	mov	r3, r0
    8538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    853a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    853e:	2b00      	cmp	r3, #0
    8540:	db0b      	blt.n	855a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8542:	4909      	ldr	r1, [pc, #36]	; (8568 <__NVIC_EnableIRQ+0x38>)
    8544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8548:	095b      	lsrs	r3, r3, #5
    854a:	88fa      	ldrh	r2, [r7, #6]
    854c:	f002 021f 	and.w	r2, r2, #31
    8550:	2001      	movs	r0, #1
    8552:	fa00 f202 	lsl.w	r2, r0, r2
    8556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    855a:	bf00      	nop
    855c:	370c      	adds	r7, #12
    855e:	46bd      	mov	sp, r7
    8560:	f85d 7b04 	ldr.w	r7, [sp], #4
    8564:	4770      	bx	lr
    8566:	bf00      	nop
    8568:	e000e100 	.word	0xe000e100

0000856c <__NVIC_DisableIRQ>:
{
    856c:	b480      	push	{r7}
    856e:	b083      	sub	sp, #12
    8570:	af00      	add	r7, sp, #0
    8572:	4603      	mov	r3, r0
    8574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    857a:	2b00      	cmp	r3, #0
    857c:	db10      	blt.n	85a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    857e:	490b      	ldr	r1, [pc, #44]	; (85ac <__NVIC_DisableIRQ+0x40>)
    8580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8584:	095b      	lsrs	r3, r3, #5
    8586:	88fa      	ldrh	r2, [r7, #6]
    8588:	f002 021f 	and.w	r2, r2, #31
    858c:	2001      	movs	r0, #1
    858e:	fa00 f202 	lsl.w	r2, r0, r2
    8592:	3320      	adds	r3, #32
    8594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859c:	f3bf 8f6f 	isb	sy
}
    85a0:	bf00      	nop
    85a2:	370c      	adds	r7, #12
    85a4:	46bd      	mov	sp, r7
    85a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85aa:	4770      	bx	lr
    85ac:	e000e100 	.word	0xe000e100

000085b0 <__NVIC_ClearPendingIRQ>:
{
    85b0:	b480      	push	{r7}
    85b2:	b083      	sub	sp, #12
    85b4:	af00      	add	r7, sp, #0
    85b6:	4603      	mov	r3, r0
    85b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    85ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    85be:	2b00      	cmp	r3, #0
    85c0:	db0c      	blt.n	85dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    85c2:	4909      	ldr	r1, [pc, #36]	; (85e8 <__NVIC_ClearPendingIRQ+0x38>)
    85c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    85c8:	095b      	lsrs	r3, r3, #5
    85ca:	88fa      	ldrh	r2, [r7, #6]
    85cc:	f002 021f 	and.w	r2, r2, #31
    85d0:	2001      	movs	r0, #1
    85d2:	fa00 f202 	lsl.w	r2, r0, r2
    85d6:	3360      	adds	r3, #96	; 0x60
    85d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85dc:	bf00      	nop
    85de:	370c      	adds	r7, #12
    85e0:	46bd      	mov	sp, r7
    85e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e6:	4770      	bx	lr
    85e8:	e000e100 	.word	0xe000e100

000085ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    85ec:	b480      	push	{r7}
    85ee:	b083      	sub	sp, #12
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
    85f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    85f6:	bf00      	nop
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	685a      	ldr	r2, [r3, #4]
    85fc:	683b      	ldr	r3, [r7, #0]
    85fe:	4013      	ands	r3, r2
    8600:	2b00      	cmp	r3, #0
    8602:	d1f9      	bne.n	85f8 <hri_eic_wait_for_sync+0xc>
	};
}
    8604:	bf00      	nop
    8606:	370c      	adds	r7, #12
    8608:	46bd      	mov	sp, r7
    860a:	f85d 7b04 	ldr.w	r7, [sp], #4
    860e:	4770      	bx	lr

00008610 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8610:	b480      	push	{r7}
    8612:	b083      	sub	sp, #12
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
    8618:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    861a:	687b      	ldr	r3, [r7, #4]
    861c:	685a      	ldr	r2, [r3, #4]
    861e:	683b      	ldr	r3, [r7, #0]
    8620:	4013      	ands	r3, r2
    8622:	2b00      	cmp	r3, #0
    8624:	bf14      	ite	ne
    8626:	2301      	movne	r3, #1
    8628:	2300      	moveq	r3, #0
    862a:	b2db      	uxtb	r3, r3
}
    862c:	4618      	mov	r0, r3
    862e:	370c      	adds	r7, #12
    8630:	46bd      	mov	sp, r7
    8632:	f85d 7b04 	ldr.w	r7, [sp], #4
    8636:	4770      	bx	lr

00008638 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8638:	b480      	push	{r7}
    863a:	b083      	sub	sp, #12
    863c:	af00      	add	r7, sp, #0
    863e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	695b      	ldr	r3, [r3, #20]
}
    8644:	4618      	mov	r0, r3
    8646:	370c      	adds	r7, #12
    8648:	46bd      	mov	sp, r7
    864a:	f85d 7b04 	ldr.w	r7, [sp], #4
    864e:	4770      	bx	lr

00008650 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8650:	b480      	push	{r7}
    8652:	b083      	sub	sp, #12
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
    8658:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	683a      	ldr	r2, [r7, #0]
    865e:	615a      	str	r2, [r3, #20]
}
    8660:	bf00      	nop
    8662:	370c      	adds	r7, #12
    8664:	46bd      	mov	sp, r7
    8666:	f85d 7b04 	ldr.w	r7, [sp], #4
    866a:	4770      	bx	lr

0000866c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    866c:	b580      	push	{r7, lr}
    866e:	b082      	sub	sp, #8
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	b2db      	uxtb	r3, r3
    867a:	f043 0302 	orr.w	r3, r3, #2
    867e:	b2da      	uxtb	r2, r3
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8684:	2103      	movs	r1, #3
    8686:	6878      	ldr	r0, [r7, #4]
    8688:	4b02      	ldr	r3, [pc, #8]	; (8694 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    868a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    868c:	bf00      	nop
    868e:	3708      	adds	r7, #8
    8690:	46bd      	mov	sp, r7
    8692:	bd80      	pop	{r7, pc}
    8694:	000085ed 	.word	0x000085ed

00008698 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8698:	b580      	push	{r7, lr}
    869a:	b082      	sub	sp, #8
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	b2db      	uxtb	r3, r3
    86a6:	f023 0302 	bic.w	r3, r3, #2
    86aa:	b2da      	uxtb	r2, r3
    86ac:	687b      	ldr	r3, [r7, #4]
    86ae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    86b0:	2103      	movs	r1, #3
    86b2:	6878      	ldr	r0, [r7, #4]
    86b4:	4b02      	ldr	r3, [pc, #8]	; (86c0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    86b6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    86b8:	bf00      	nop
    86ba:	3708      	adds	r7, #8
    86bc:	46bd      	mov	sp, r7
    86be:	bd80      	pop	{r7, pc}
    86c0:	000085ed 	.word	0x000085ed

000086c4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b084      	sub	sp, #16
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
    86cc:	460b      	mov	r3, r1
    86ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	781b      	ldrb	r3, [r3, #0]
    86d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    86d6:	7bfb      	ldrb	r3, [r7, #15]
    86d8:	f023 0310 	bic.w	r3, r3, #16
    86dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    86de:	78fb      	ldrb	r3, [r7, #3]
    86e0:	011b      	lsls	r3, r3, #4
    86e2:	b25a      	sxtb	r2, r3
    86e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    86e8:	4313      	orrs	r3, r2
    86ea:	b25b      	sxtb	r3, r3
    86ec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    86ee:	687b      	ldr	r3, [r7, #4]
    86f0:	7bfa      	ldrb	r2, [r7, #15]
    86f2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    86f4:	2103      	movs	r1, #3
    86f6:	6878      	ldr	r0, [r7, #4]
    86f8:	4b02      	ldr	r3, [pc, #8]	; (8704 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    86fa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    86fc:	bf00      	nop
    86fe:	3710      	adds	r7, #16
    8700:	46bd      	mov	sp, r7
    8702:	bd80      	pop	{r7, pc}
    8704:	000085ed 	.word	0x000085ed

00008708 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8708:	b580      	push	{r7, lr}
    870a:	b084      	sub	sp, #16
    870c:	af00      	add	r7, sp, #0
    870e:	6078      	str	r0, [r7, #4]
    8710:	460b      	mov	r3, r1
    8712:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8714:	2103      	movs	r1, #3
    8716:	6878      	ldr	r0, [r7, #4]
    8718:	4b06      	ldr	r3, [pc, #24]	; (8734 <hri_eic_get_CTRLA_reg+0x2c>)
    871a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8722:	7bfa      	ldrb	r2, [r7, #15]
    8724:	78fb      	ldrb	r3, [r7, #3]
    8726:	4013      	ands	r3, r2
    8728:	73fb      	strb	r3, [r7, #15]
	return tmp;
    872a:	7bfb      	ldrb	r3, [r7, #15]
}
    872c:	4618      	mov	r0, r3
    872e:	3710      	adds	r7, #16
    8730:	46bd      	mov	sp, r7
    8732:	bd80      	pop	{r7, pc}
    8734:	000085ed 	.word	0x000085ed

00008738 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8738:	b580      	push	{r7, lr}
    873a:	b082      	sub	sp, #8
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
    8740:	460b      	mov	r3, r1
    8742:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	78fa      	ldrb	r2, [r7, #3]
    8748:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    874a:	2103      	movs	r1, #3
    874c:	6878      	ldr	r0, [r7, #4]
    874e:	4b03      	ldr	r3, [pc, #12]	; (875c <hri_eic_write_CTRLA_reg+0x24>)
    8750:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8752:	bf00      	nop
    8754:	3708      	adds	r7, #8
    8756:	46bd      	mov	sp, r7
    8758:	bd80      	pop	{r7, pc}
    875a:	bf00      	nop
    875c:	000085ed 	.word	0x000085ed

00008760 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8760:	b480      	push	{r7}
    8762:	b083      	sub	sp, #12
    8764:	af00      	add	r7, sp, #0
    8766:	6078      	str	r0, [r7, #4]
    8768:	460b      	mov	r3, r1
    876a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	78fa      	ldrb	r2, [r7, #3]
    8770:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8772:	bf00      	nop
    8774:	370c      	adds	r7, #12
    8776:	46bd      	mov	sp, r7
    8778:	f85d 7b04 	ldr.w	r7, [sp], #4
    877c:	4770      	bx	lr

0000877e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    877e:	b480      	push	{r7}
    8780:	b083      	sub	sp, #12
    8782:	af00      	add	r7, sp, #0
    8784:	6078      	str	r0, [r7, #4]
    8786:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	683a      	ldr	r2, [r7, #0]
    878c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    878e:	bf00      	nop
    8790:	370c      	adds	r7, #12
    8792:	46bd      	mov	sp, r7
    8794:	f85d 7b04 	ldr.w	r7, [sp], #4
    8798:	4770      	bx	lr

0000879a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    879a:	b480      	push	{r7}
    879c:	b083      	sub	sp, #12
    879e:	af00      	add	r7, sp, #0
    87a0:	6078      	str	r0, [r7, #4]
    87a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    87a4:	687b      	ldr	r3, [r7, #4]
    87a6:	683a      	ldr	r2, [r7, #0]
    87a8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    87aa:	bf00      	nop
    87ac:	370c      	adds	r7, #12
    87ae:	46bd      	mov	sp, r7
    87b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    87b4:	4770      	bx	lr

000087b6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    87b6:	b480      	push	{r7}
    87b8:	b085      	sub	sp, #20
    87ba:	af00      	add	r7, sp, #0
    87bc:	60f8      	str	r0, [r7, #12]
    87be:	460b      	mov	r3, r1
    87c0:	607a      	str	r2, [r7, #4]
    87c2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    87c4:	7afb      	ldrb	r3, [r7, #11]
    87c6:	68fa      	ldr	r2, [r7, #12]
    87c8:	3306      	adds	r3, #6
    87ca:	009b      	lsls	r3, r3, #2
    87cc:	4413      	add	r3, r2
    87ce:	687a      	ldr	r2, [r7, #4]
    87d0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    87d2:	bf00      	nop
    87d4:	3714      	adds	r7, #20
    87d6:	46bd      	mov	sp, r7
    87d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87dc:	4770      	bx	lr

000087de <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    87de:	b480      	push	{r7}
    87e0:	b083      	sub	sp, #12
    87e2:	af00      	add	r7, sp, #0
    87e4:	6078      	str	r0, [r7, #4]
    87e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	683a      	ldr	r2, [r7, #0]
    87ec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    87ee:	bf00      	nop
    87f0:	370c      	adds	r7, #12
    87f2:	46bd      	mov	sp, r7
    87f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f8:	4770      	bx	lr

000087fa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    87fa:	b480      	push	{r7}
    87fc:	b083      	sub	sp, #12
    87fe:	af00      	add	r7, sp, #0
    8800:	6078      	str	r0, [r7, #4]
    8802:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	683a      	ldr	r2, [r7, #0]
    8808:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    880a:	bf00      	nop
    880c:	370c      	adds	r7, #12
    880e:	46bd      	mov	sp, r7
    8810:	f85d 7b04 	ldr.w	r7, [sp], #4
    8814:	4770      	bx	lr
	...

00008818 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8818:	b580      	push	{r7, lr}
    881a:	b082      	sub	sp, #8
    881c:	af00      	add	r7, sp, #0
    881e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8820:	2101      	movs	r1, #1
    8822:	484f      	ldr	r0, [pc, #316]	; (8960 <_ext_irq_init+0x148>)
    8824:	4b4f      	ldr	r3, [pc, #316]	; (8964 <_ext_irq_init+0x14c>)
    8826:	4798      	blx	r3
    8828:	4603      	mov	r3, r0
    882a:	f083 0301 	eor.w	r3, r3, #1
    882e:	b2db      	uxtb	r3, r3
    8830:	2b00      	cmp	r3, #0
    8832:	d011      	beq.n	8858 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8834:	2102      	movs	r1, #2
    8836:	484a      	ldr	r0, [pc, #296]	; (8960 <_ext_irq_init+0x148>)
    8838:	4b4b      	ldr	r3, [pc, #300]	; (8968 <_ext_irq_init+0x150>)
    883a:	4798      	blx	r3
    883c:	4603      	mov	r3, r0
    883e:	2b00      	cmp	r3, #0
    8840:	d006      	beq.n	8850 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8842:	4847      	ldr	r0, [pc, #284]	; (8960 <_ext_irq_init+0x148>)
    8844:	4b49      	ldr	r3, [pc, #292]	; (896c <_ext_irq_init+0x154>)
    8846:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8848:	2102      	movs	r1, #2
    884a:	4845      	ldr	r0, [pc, #276]	; (8960 <_ext_irq_init+0x148>)
    884c:	4b48      	ldr	r3, [pc, #288]	; (8970 <_ext_irq_init+0x158>)
    884e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8850:	2101      	movs	r1, #1
    8852:	4843      	ldr	r0, [pc, #268]	; (8960 <_ext_irq_init+0x148>)
    8854:	4b47      	ldr	r3, [pc, #284]	; (8974 <_ext_irq_init+0x15c>)
    8856:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8858:	2101      	movs	r1, #1
    885a:	4841      	ldr	r0, [pc, #260]	; (8960 <_ext_irq_init+0x148>)
    885c:	4b44      	ldr	r3, [pc, #272]	; (8970 <_ext_irq_init+0x158>)
    885e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8860:	2100      	movs	r1, #0
    8862:	483f      	ldr	r0, [pc, #252]	; (8960 <_ext_irq_init+0x148>)
    8864:	4b44      	ldr	r3, [pc, #272]	; (8978 <_ext_irq_init+0x160>)
    8866:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8868:	2100      	movs	r1, #0
    886a:	483d      	ldr	r0, [pc, #244]	; (8960 <_ext_irq_init+0x148>)
    886c:	4b43      	ldr	r3, [pc, #268]	; (897c <_ext_irq_init+0x164>)
    886e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8870:	2100      	movs	r1, #0
    8872:	483b      	ldr	r0, [pc, #236]	; (8960 <_ext_irq_init+0x148>)
    8874:	4b42      	ldr	r3, [pc, #264]	; (8980 <_ext_irq_init+0x168>)
    8876:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8878:	f240 31bb 	movw	r1, #955	; 0x3bb
    887c:	4838      	ldr	r0, [pc, #224]	; (8960 <_ext_irq_init+0x148>)
    887e:	4b41      	ldr	r3, [pc, #260]	; (8984 <_ext_irq_init+0x16c>)
    8880:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8882:	f240 313b 	movw	r1, #827	; 0x33b
    8886:	4836      	ldr	r0, [pc, #216]	; (8960 <_ext_irq_init+0x148>)
    8888:	4b3f      	ldr	r3, [pc, #252]	; (8988 <_ext_irq_init+0x170>)
    888a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    888c:	2100      	movs	r1, #0
    888e:	4834      	ldr	r0, [pc, #208]	; (8960 <_ext_irq_init+0x148>)
    8890:	4b3e      	ldr	r3, [pc, #248]	; (898c <_ext_irq_init+0x174>)
    8892:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8894:	4a3e      	ldr	r2, [pc, #248]	; (8990 <_ext_irq_init+0x178>)
    8896:	2100      	movs	r1, #0
    8898:	4831      	ldr	r0, [pc, #196]	; (8960 <_ext_irq_init+0x148>)
    889a:	4b3e      	ldr	r3, [pc, #248]	; (8994 <_ext_irq_init+0x17c>)
    889c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    889e:	2211      	movs	r2, #17
    88a0:	2101      	movs	r1, #1
    88a2:	482f      	ldr	r0, [pc, #188]	; (8960 <_ext_irq_init+0x148>)
    88a4:	4b3b      	ldr	r3, [pc, #236]	; (8994 <_ext_irq_init+0x17c>)
    88a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    88a8:	482d      	ldr	r0, [pc, #180]	; (8960 <_ext_irq_init+0x148>)
    88aa:	4b3b      	ldr	r3, [pc, #236]	; (8998 <_ext_irq_init+0x180>)
    88ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    88ae:	200c      	movs	r0, #12
    88b0:	4b3a      	ldr	r3, [pc, #232]	; (899c <_ext_irq_init+0x184>)
    88b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    88b4:	200c      	movs	r0, #12
    88b6:	4b3a      	ldr	r3, [pc, #232]	; (89a0 <_ext_irq_init+0x188>)
    88b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    88ba:	200c      	movs	r0, #12
    88bc:	4b39      	ldr	r3, [pc, #228]	; (89a4 <_ext_irq_init+0x18c>)
    88be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    88c0:	200d      	movs	r0, #13
    88c2:	4b36      	ldr	r3, [pc, #216]	; (899c <_ext_irq_init+0x184>)
    88c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    88c6:	200d      	movs	r0, #13
    88c8:	4b35      	ldr	r3, [pc, #212]	; (89a0 <_ext_irq_init+0x188>)
    88ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    88cc:	200d      	movs	r0, #13
    88ce:	4b35      	ldr	r3, [pc, #212]	; (89a4 <_ext_irq_init+0x18c>)
    88d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    88d2:	200f      	movs	r0, #15
    88d4:	4b31      	ldr	r3, [pc, #196]	; (899c <_ext_irq_init+0x184>)
    88d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    88d8:	200f      	movs	r0, #15
    88da:	4b31      	ldr	r3, [pc, #196]	; (89a0 <_ext_irq_init+0x188>)
    88dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    88de:	200f      	movs	r0, #15
    88e0:	4b30      	ldr	r3, [pc, #192]	; (89a4 <_ext_irq_init+0x18c>)
    88e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    88e4:	2010      	movs	r0, #16
    88e6:	4b2d      	ldr	r3, [pc, #180]	; (899c <_ext_irq_init+0x184>)
    88e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    88ea:	2010      	movs	r0, #16
    88ec:	4b2c      	ldr	r3, [pc, #176]	; (89a0 <_ext_irq_init+0x188>)
    88ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    88f0:	2010      	movs	r0, #16
    88f2:	4b2c      	ldr	r3, [pc, #176]	; (89a4 <_ext_irq_init+0x18c>)
    88f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    88f6:	2011      	movs	r0, #17
    88f8:	4b28      	ldr	r3, [pc, #160]	; (899c <_ext_irq_init+0x184>)
    88fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    88fc:	2011      	movs	r0, #17
    88fe:	4b28      	ldr	r3, [pc, #160]	; (89a0 <_ext_irq_init+0x188>)
    8900:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    8902:	2011      	movs	r0, #17
    8904:	4b27      	ldr	r3, [pc, #156]	; (89a4 <_ext_irq_init+0x18c>)
    8906:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    8908:	2012      	movs	r0, #18
    890a:	4b24      	ldr	r3, [pc, #144]	; (899c <_ext_irq_init+0x184>)
    890c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    890e:	2012      	movs	r0, #18
    8910:	4b23      	ldr	r3, [pc, #140]	; (89a0 <_ext_irq_init+0x188>)
    8912:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    8914:	2012      	movs	r0, #18
    8916:	4b23      	ldr	r3, [pc, #140]	; (89a4 <_ext_irq_init+0x18c>)
    8918:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    891a:	2013      	movs	r0, #19
    891c:	4b1f      	ldr	r3, [pc, #124]	; (899c <_ext_irq_init+0x184>)
    891e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    8920:	2013      	movs	r0, #19
    8922:	4b1f      	ldr	r3, [pc, #124]	; (89a0 <_ext_irq_init+0x188>)
    8924:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    8926:	2013      	movs	r0, #19
    8928:	4b1e      	ldr	r3, [pc, #120]	; (89a4 <_ext_irq_init+0x18c>)
    892a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    892c:	2014      	movs	r0, #20
    892e:	4b1b      	ldr	r3, [pc, #108]	; (899c <_ext_irq_init+0x184>)
    8930:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    8932:	2014      	movs	r0, #20
    8934:	4b1a      	ldr	r3, [pc, #104]	; (89a0 <_ext_irq_init+0x188>)
    8936:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    8938:	2014      	movs	r0, #20
    893a:	4b1a      	ldr	r3, [pc, #104]	; (89a4 <_ext_irq_init+0x18c>)
    893c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    893e:	2015      	movs	r0, #21
    8940:	4b16      	ldr	r3, [pc, #88]	; (899c <_ext_irq_init+0x184>)
    8942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    8944:	2015      	movs	r0, #21
    8946:	4b16      	ldr	r3, [pc, #88]	; (89a0 <_ext_irq_init+0x188>)
    8948:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    894a:	2015      	movs	r0, #21
    894c:	4b15      	ldr	r3, [pc, #84]	; (89a4 <_ext_irq_init+0x18c>)
    894e:	4798      	blx	r3

	callback = cb;
    8950:	4a15      	ldr	r2, [pc, #84]	; (89a8 <_ext_irq_init+0x190>)
    8952:	687b      	ldr	r3, [r7, #4]
    8954:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    8956:	2300      	movs	r3, #0
}
    8958:	4618      	mov	r0, r3
    895a:	3708      	adds	r7, #8
    895c:	46bd      	mov	sp, r7
    895e:	bd80      	pop	{r7, pc}
    8960:	40002800 	.word	0x40002800
    8964:	00008611 	.word	0x00008611
    8968:	00008709 	.word	0x00008709
    896c:	00008699 	.word	0x00008699
    8970:	000085ed 	.word	0x000085ed
    8974:	00008739 	.word	0x00008739
    8978:	000086c5 	.word	0x000086c5
    897c:	00008761 	.word	0x00008761
    8980:	0000877f 	.word	0x0000877f
    8984:	0000879b 	.word	0x0000879b
    8988:	000087df 	.word	0x000087df
    898c:	000087fb 	.word	0x000087fb
    8990:	90999013 	.word	0x90999013
    8994:	000087b7 	.word	0x000087b7
    8998:	0000866d 	.word	0x0000866d
    899c:	0000856d 	.word	0x0000856d
    89a0:	000085b1 	.word	0x000085b1
    89a4:	00008531 	.word	0x00008531
    89a8:	20001ba8 	.word	0x20001ba8

000089ac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b084      	sub	sp, #16
    89b0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    89b2:	4841      	ldr	r0, [pc, #260]	; (8ab8 <_ext_irq_handler+0x10c>)
    89b4:	4b41      	ldr	r3, [pc, #260]	; (8abc <_ext_irq_handler+0x110>)
    89b6:	4798      	blx	r3
    89b8:	4603      	mov	r3, r0
    89ba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    89bc:	f04f 33ff 	mov.w	r3, #4294967295
    89c0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    89c2:	683b      	ldr	r3, [r7, #0]
    89c4:	4619      	mov	r1, r3
    89c6:	483c      	ldr	r0, [pc, #240]	; (8ab8 <_ext_irq_handler+0x10c>)
    89c8:	4b3d      	ldr	r3, [pc, #244]	; (8ac0 <_ext_irq_handler+0x114>)
    89ca:	4798      	blx	r3

	ASSERT(callback);
    89cc:	4b3d      	ldr	r3, [pc, #244]	; (8ac4 <_ext_irq_handler+0x118>)
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	2b00      	cmp	r3, #0
    89d2:	bf14      	ite	ne
    89d4:	2301      	movne	r3, #1
    89d6:	2300      	moveq	r3, #0
    89d8:	b2db      	uxtb	r3, r3
    89da:	f44f 7284 	mov.w	r2, #264	; 0x108
    89de:	493a      	ldr	r1, [pc, #232]	; (8ac8 <_ext_irq_handler+0x11c>)
    89e0:	4618      	mov	r0, r3
    89e2:	4b3a      	ldr	r3, [pc, #232]	; (8acc <_ext_irq_handler+0x120>)
    89e4:	4798      	blx	r3

	while (flags) {
    89e6:	e060      	b.n	8aaa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    89e8:	683b      	ldr	r3, [r7, #0]
    89ea:	4618      	mov	r0, r3
    89ec:	4b38      	ldr	r3, [pc, #224]	; (8ad0 <_ext_irq_handler+0x124>)
    89ee:	4798      	blx	r3
    89f0:	4603      	mov	r3, r0
    89f2:	b2db      	uxtb	r3, r3
    89f4:	3b01      	subs	r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    89fa:	e047      	b.n	8a8c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    89fc:	2300      	movs	r3, #0
    89fe:	71fb      	strb	r3, [r7, #7]
    8a00:	2309      	movs	r3, #9
    8a02:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    8a04:	e024      	b.n	8a50 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    8a06:	79ba      	ldrb	r2, [r7, #6]
    8a08:	79fb      	ldrb	r3, [r7, #7]
    8a0a:	4413      	add	r3, r2
    8a0c:	105b      	asrs	r3, r3, #1
    8a0e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    8a10:	797b      	ldrb	r3, [r7, #5]
    8a12:	4a30      	ldr	r2, [pc, #192]	; (8ad4 <_ext_irq_handler+0x128>)
    8a14:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8a18:	461a      	mov	r2, r3
    8a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a1e:	429a      	cmp	r2, r3
    8a20:	d106      	bne.n	8a30 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    8a22:	797b      	ldrb	r3, [r7, #5]
    8a24:	4a2b      	ldr	r2, [pc, #172]	; (8ad4 <_ext_irq_handler+0x128>)
    8a26:	00db      	lsls	r3, r3, #3
    8a28:	4413      	add	r3, r2
    8a2a:	685b      	ldr	r3, [r3, #4]
    8a2c:	60bb      	str	r3, [r7, #8]
					break;
    8a2e:	e013      	b.n	8a58 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    8a30:	797b      	ldrb	r3, [r7, #5]
    8a32:	4a28      	ldr	r2, [pc, #160]	; (8ad4 <_ext_irq_handler+0x128>)
    8a34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8a38:	461a      	mov	r2, r3
    8a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a3e:	429a      	cmp	r2, r3
    8a40:	da03      	bge.n	8a4a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    8a42:	797b      	ldrb	r3, [r7, #5]
    8a44:	3301      	adds	r3, #1
    8a46:	71fb      	strb	r3, [r7, #7]
    8a48:	e002      	b.n	8a50 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    8a4a:	797b      	ldrb	r3, [r7, #5]
    8a4c:	3b01      	subs	r3, #1
    8a4e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    8a50:	79ba      	ldrb	r2, [r7, #6]
    8a52:	79fb      	ldrb	r3, [r7, #7]
    8a54:	429a      	cmp	r2, r3
    8a56:	d2d6      	bcs.n	8a06 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    8a58:	68bb      	ldr	r3, [r7, #8]
    8a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    8a5e:	d003      	beq.n	8a68 <_ext_irq_handler+0xbc>
				callback(pin);
    8a60:	4b18      	ldr	r3, [pc, #96]	; (8ac4 <_ext_irq_handler+0x118>)
    8a62:	681b      	ldr	r3, [r3, #0]
    8a64:	68b8      	ldr	r0, [r7, #8]
    8a66:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    8a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a6c:	2201      	movs	r2, #1
    8a6e:	fa02 f303 	lsl.w	r3, r2, r3
    8a72:	43da      	mvns	r2, r3
    8a74:	683b      	ldr	r3, [r7, #0]
    8a76:	4013      	ands	r3, r2
    8a78:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    8a7a:	683b      	ldr	r3, [r7, #0]
    8a7c:	4618      	mov	r0, r3
    8a7e:	4b14      	ldr	r3, [pc, #80]	; (8ad0 <_ext_irq_handler+0x124>)
    8a80:	4798      	blx	r3
    8a82:	4603      	mov	r3, r0
    8a84:	b2db      	uxtb	r3, r3
    8a86:	3b01      	subs	r3, #1
    8a88:	b2db      	uxtb	r3, r3
    8a8a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a90:	f1b3 3fff 	cmp.w	r3, #4294967295
    8a94:	d1b2      	bne.n	89fc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    8a96:	4808      	ldr	r0, [pc, #32]	; (8ab8 <_ext_irq_handler+0x10c>)
    8a98:	4b08      	ldr	r3, [pc, #32]	; (8abc <_ext_irq_handler+0x110>)
    8a9a:	4798      	blx	r3
    8a9c:	4603      	mov	r3, r0
    8a9e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	4619      	mov	r1, r3
    8aa4:	4804      	ldr	r0, [pc, #16]	; (8ab8 <_ext_irq_handler+0x10c>)
    8aa6:	4b06      	ldr	r3, [pc, #24]	; (8ac0 <_ext_irq_handler+0x114>)
    8aa8:	4798      	blx	r3
	while (flags) {
    8aaa:	683b      	ldr	r3, [r7, #0]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d19b      	bne.n	89e8 <_ext_irq_handler+0x3c>
	}
}
    8ab0:	bf00      	nop
    8ab2:	3710      	adds	r7, #16
    8ab4:	46bd      	mov	sp, r7
    8ab6:	bd80      	pop	{r7, pc}
    8ab8:	40002800 	.word	0x40002800
    8abc:	00008639 	.word	0x00008639
    8ac0:	00008651 	.word	0x00008651
    8ac4:	20001ba8 	.word	0x20001ba8
    8ac8:	00012a30 	.word	0x00012a30
    8acc:	00007261 	.word	0x00007261
    8ad0:	00011aad 	.word	0x00011aad
    8ad4:	000129e8 	.word	0x000129e8

00008ad8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    8ad8:	b580      	push	{r7, lr}
    8ada:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8adc:	4b01      	ldr	r3, [pc, #4]	; (8ae4 <EIC_0_Handler+0xc>)
    8ade:	4798      	blx	r3
} /**
    8ae0:	bf00      	nop
    8ae2:	bd80      	pop	{r7, pc}
    8ae4:	000089ad 	.word	0x000089ad

00008ae8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    8ae8:	b580      	push	{r7, lr}
    8aea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8aec:	4b01      	ldr	r3, [pc, #4]	; (8af4 <EIC_1_Handler+0xc>)
    8aee:	4798      	blx	r3
} /**
    8af0:	bf00      	nop
    8af2:	bd80      	pop	{r7, pc}
    8af4:	000089ad 	.word	0x000089ad

00008af8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    8af8:	b580      	push	{r7, lr}
    8afa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8afc:	4b01      	ldr	r3, [pc, #4]	; (8b04 <EIC_3_Handler+0xc>)
    8afe:	4798      	blx	r3
} /**
    8b00:	bf00      	nop
    8b02:	bd80      	pop	{r7, pc}
    8b04:	000089ad 	.word	0x000089ad

00008b08 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b0c:	4b01      	ldr	r3, [pc, #4]	; (8b14 <EIC_4_Handler+0xc>)
    8b0e:	4798      	blx	r3
} /**
    8b10:	bf00      	nop
    8b12:	bd80      	pop	{r7, pc}
    8b14:	000089ad 	.word	0x000089ad

00008b18 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b1c:	4b01      	ldr	r3, [pc, #4]	; (8b24 <EIC_5_Handler+0xc>)
    8b1e:	4798      	blx	r3
} /**
    8b20:	bf00      	nop
    8b22:	bd80      	pop	{r7, pc}
    8b24:	000089ad 	.word	0x000089ad

00008b28 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    8b28:	b580      	push	{r7, lr}
    8b2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b2c:	4b01      	ldr	r3, [pc, #4]	; (8b34 <EIC_6_Handler+0xc>)
    8b2e:	4798      	blx	r3
} /**
    8b30:	bf00      	nop
    8b32:	bd80      	pop	{r7, pc}
    8b34:	000089ad 	.word	0x000089ad

00008b38 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    8b38:	b580      	push	{r7, lr}
    8b3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b3c:	4b01      	ldr	r3, [pc, #4]	; (8b44 <EIC_7_Handler+0xc>)
    8b3e:	4798      	blx	r3
} /**
    8b40:	bf00      	nop
    8b42:	bd80      	pop	{r7, pc}
    8b44:	000089ad 	.word	0x000089ad

00008b48 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    8b48:	b580      	push	{r7, lr}
    8b4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b4c:	4b01      	ldr	r3, [pc, #4]	; (8b54 <EIC_8_Handler+0xc>)
    8b4e:	4798      	blx	r3
} /**
    8b50:	bf00      	nop
    8b52:	bd80      	pop	{r7, pc}
    8b54:	000089ad 	.word	0x000089ad

00008b58 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    8b58:	b580      	push	{r7, lr}
    8b5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8b5c:	4b01      	ldr	r3, [pc, #4]	; (8b64 <EIC_9_Handler+0xc>)
    8b5e:	4798      	blx	r3
}
    8b60:	bf00      	nop
    8b62:	bd80      	pop	{r7, pc}
    8b64:	000089ad 	.word	0x000089ad

00008b68 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    8b68:	b480      	push	{r7}
    8b6a:	b085      	sub	sp, #20
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	60f8      	str	r0, [r7, #12]
    8b70:	460b      	mov	r3, r1
    8b72:	607a      	str	r2, [r7, #4]
    8b74:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    8b76:	7afa      	ldrb	r2, [r7, #11]
    8b78:	68fb      	ldr	r3, [r7, #12]
    8b7a:	3248      	adds	r2, #72	; 0x48
    8b7c:	6879      	ldr	r1, [r7, #4]
    8b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8b82:	bf00      	nop
    8b84:	3714      	adds	r7, #20
    8b86:	46bd      	mov	sp, r7
    8b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b8c:	4770      	bx	lr

00008b8e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    8b8e:	b480      	push	{r7}
    8b90:	b083      	sub	sp, #12
    8b92:	af00      	add	r7, sp, #0
    8b94:	6078      	str	r0, [r7, #4]
    8b96:	460b      	mov	r3, r1
    8b98:	70fb      	strb	r3, [r7, #3]
    8b9a:	4613      	mov	r3, r2
    8b9c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    8b9e:	78fb      	ldrb	r3, [r7, #3]
    8ba0:	687a      	ldr	r2, [r7, #4]
    8ba2:	3304      	adds	r3, #4
    8ba4:	00db      	lsls	r3, r3, #3
    8ba6:	4413      	add	r3, r2
    8ba8:	78ba      	ldrb	r2, [r7, #2]
    8baa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    8bac:	78fb      	ldrb	r3, [r7, #3]
    8bae:	78ba      	ldrb	r2, [r7, #2]
    8bb0:	43d2      	mvns	r2, r2
    8bb2:	b2d1      	uxtb	r1, r2
    8bb4:	687a      	ldr	r2, [r7, #4]
    8bb6:	3304      	adds	r3, #4
    8bb8:	00db      	lsls	r3, r3, #3
    8bba:	4413      	add	r3, r2
    8bbc:	460a      	mov	r2, r1
    8bbe:	711a      	strb	r2, [r3, #4]
}
    8bc0:	bf00      	nop
    8bc2:	370c      	adds	r7, #12
    8bc4:	46bd      	mov	sp, r7
    8bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bca:	4770      	bx	lr

00008bcc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    8bcc:	b480      	push	{r7}
    8bce:	b085      	sub	sp, #20
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	60f8      	str	r0, [r7, #12]
    8bd4:	460b      	mov	r3, r1
    8bd6:	607a      	str	r2, [r7, #4]
    8bd8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    8bda:	7afa      	ldrb	r2, [r7, #11]
    8bdc:	68fb      	ldr	r3, [r7, #12]
    8bde:	3204      	adds	r2, #4
    8be0:	6879      	ldr	r1, [r7, #4]
    8be2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8be6:	bf00      	nop
    8be8:	3714      	adds	r7, #20
    8bea:	46bd      	mov	sp, r7
    8bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf0:	4770      	bx	lr
	...

00008bf4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b082      	sub	sp, #8
    8bf8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    8bfa:	2300      	movs	r3, #0
    8bfc:	71fb      	strb	r3, [r7, #7]
    8bfe:	e00b      	b.n	8c18 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    8c00:	79fb      	ldrb	r3, [r7, #7]
    8c02:	4a18      	ldr	r2, [pc, #96]	; (8c64 <_event_system_init+0x70>)
    8c04:	5cd3      	ldrb	r3, [r2, r3]
    8c06:	461a      	mov	r2, r3
    8c08:	79fb      	ldrb	r3, [r7, #7]
    8c0a:	4619      	mov	r1, r3
    8c0c:	4816      	ldr	r0, [pc, #88]	; (8c68 <_event_system_init+0x74>)
    8c0e:	4b17      	ldr	r3, [pc, #92]	; (8c6c <_event_system_init+0x78>)
    8c10:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    8c12:	79fb      	ldrb	r3, [r7, #7]
    8c14:	3301      	adds	r3, #1
    8c16:	71fb      	strb	r3, [r7, #7]
    8c18:	79fb      	ldrb	r3, [r7, #7]
    8c1a:	2b42      	cmp	r3, #66	; 0x42
    8c1c:	d9f0      	bls.n	8c00 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    8c1e:	2300      	movs	r3, #0
    8c20:	71fb      	strb	r3, [r7, #7]
    8c22:	e016      	b.n	8c52 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    8c24:	79fb      	ldrb	r3, [r7, #7]
    8c26:	4a12      	ldr	r2, [pc, #72]	; (8c70 <_event_system_init+0x7c>)
    8c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8c2c:	461a      	mov	r2, r3
    8c2e:	79fb      	ldrb	r3, [r7, #7]
    8c30:	4619      	mov	r1, r3
    8c32:	480d      	ldr	r0, [pc, #52]	; (8c68 <_event_system_init+0x74>)
    8c34:	4b0f      	ldr	r3, [pc, #60]	; (8c74 <_event_system_init+0x80>)
    8c36:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    8c38:	79fb      	ldrb	r3, [r7, #7]
    8c3a:	4a0f      	ldr	r2, [pc, #60]	; (8c78 <_event_system_init+0x84>)
    8c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c40:	b2da      	uxtb	r2, r3
    8c42:	79fb      	ldrb	r3, [r7, #7]
    8c44:	4619      	mov	r1, r3
    8c46:	4808      	ldr	r0, [pc, #32]	; (8c68 <_event_system_init+0x74>)
    8c48:	4b0c      	ldr	r3, [pc, #48]	; (8c7c <_event_system_init+0x88>)
    8c4a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    8c4c:	79fb      	ldrb	r3, [r7, #7]
    8c4e:	3301      	adds	r3, #1
    8c50:	71fb      	strb	r3, [r7, #7]
    8c52:	79fb      	ldrb	r3, [r7, #7]
    8c54:	2b1f      	cmp	r3, #31
    8c56:	d9e5      	bls.n	8c24 <_event_system_init+0x30>
	}

	return ERR_NONE;
    8c58:	2300      	movs	r3, #0
}
    8c5a:	4618      	mov	r0, r3
    8c5c:	3708      	adds	r7, #8
    8c5e:	46bd      	mov	sp, r7
    8c60:	bd80      	pop	{r7, pc}
    8c62:	bf00      	nop
    8c64:	00012a48 	.word	0x00012a48
    8c68:	4100e000 	.word	0x4100e000
    8c6c:	00008b69 	.word	0x00008b69
    8c70:	00012a8c 	.word	0x00012a8c
    8c74:	00008bcd 	.word	0x00008bcd
    8c78:	00012acc 	.word	0x00012acc
    8c7c:	00008b8f 	.word	0x00008b8f

00008c80 <hri_gclk_wait_for_sync>:
{
    8c80:	b480      	push	{r7}
    8c82:	b083      	sub	sp, #12
    8c84:	af00      	add	r7, sp, #0
    8c86:	6078      	str	r0, [r7, #4]
    8c88:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    8c8a:	bf00      	nop
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	685a      	ldr	r2, [r3, #4]
    8c90:	683b      	ldr	r3, [r7, #0]
    8c92:	4013      	ands	r3, r2
    8c94:	2b00      	cmp	r3, #0
    8c96:	d1f9      	bne.n	8c8c <hri_gclk_wait_for_sync+0xc>
}
    8c98:	bf00      	nop
    8c9a:	370c      	adds	r7, #12
    8c9c:	46bd      	mov	sp, r7
    8c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca2:	4770      	bx	lr

00008ca4 <hri_gclk_write_GENCTRL_reg>:
{
    8ca4:	b580      	push	{r7, lr}
    8ca6:	b084      	sub	sp, #16
    8ca8:	af00      	add	r7, sp, #0
    8caa:	60f8      	str	r0, [r7, #12]
    8cac:	460b      	mov	r3, r1
    8cae:	607a      	str	r2, [r7, #4]
    8cb0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    8cb2:	7afa      	ldrb	r2, [r7, #11]
    8cb4:	68fb      	ldr	r3, [r7, #12]
    8cb6:	3208      	adds	r2, #8
    8cb8:	6879      	ldr	r1, [r7, #4]
    8cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    8cbe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    8cc2:	68f8      	ldr	r0, [r7, #12]
    8cc4:	4b02      	ldr	r3, [pc, #8]	; (8cd0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    8cc6:	4798      	blx	r3
}
    8cc8:	bf00      	nop
    8cca:	3710      	adds	r7, #16
    8ccc:	46bd      	mov	sp, r7
    8cce:	bd80      	pop	{r7, pc}
    8cd0:	00008c81 	.word	0x00008c81

00008cd4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    8cd4:	b580      	push	{r7, lr}
    8cd6:	b082      	sub	sp, #8
    8cd8:	af00      	add	r7, sp, #0
    8cda:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    8cdc:	687b      	ldr	r3, [r7, #4]
    8cde:	f003 0301 	and.w	r3, r3, #1
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d004      	beq.n	8cf0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    8ce6:	4a3b      	ldr	r2, [pc, #236]	; (8dd4 <_gclk_init_generators_by_fref+0x100>)
    8ce8:	2100      	movs	r1, #0
    8cea:	483b      	ldr	r0, [pc, #236]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8cec:	4b3b      	ldr	r3, [pc, #236]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8cee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	f003 0302 	and.w	r3, r3, #2
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d004      	beq.n	8d04 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    8cfa:	4a39      	ldr	r2, [pc, #228]	; (8de0 <_gclk_init_generators_by_fref+0x10c>)
    8cfc:	2101      	movs	r1, #1
    8cfe:	4836      	ldr	r0, [pc, #216]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d00:	4b36      	ldr	r3, [pc, #216]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d02:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	f003 0304 	and.w	r3, r3, #4
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d004      	beq.n	8d18 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    8d0e:	4a35      	ldr	r2, [pc, #212]	; (8de4 <_gclk_init_generators_by_fref+0x110>)
    8d10:	2102      	movs	r1, #2
    8d12:	4831      	ldr	r0, [pc, #196]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d14:	4b31      	ldr	r3, [pc, #196]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d16:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	f003 0308 	and.w	r3, r3, #8
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d004      	beq.n	8d2c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    8d22:	4a31      	ldr	r2, [pc, #196]	; (8de8 <_gclk_init_generators_by_fref+0x114>)
    8d24:	2103      	movs	r1, #3
    8d26:	482c      	ldr	r0, [pc, #176]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d28:	4b2c      	ldr	r3, [pc, #176]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d2a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    8d2c:	687b      	ldr	r3, [r7, #4]
    8d2e:	f003 0310 	and.w	r3, r3, #16
    8d32:	2b00      	cmp	r3, #0
    8d34:	d004      	beq.n	8d40 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    8d36:	4a2d      	ldr	r2, [pc, #180]	; (8dec <_gclk_init_generators_by_fref+0x118>)
    8d38:	2104      	movs	r1, #4
    8d3a:	4827      	ldr	r0, [pc, #156]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d3c:	4b27      	ldr	r3, [pc, #156]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d3e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    8d40:	687b      	ldr	r3, [r7, #4]
    8d42:	f003 0320 	and.w	r3, r3, #32
    8d46:	2b00      	cmp	r3, #0
    8d48:	d004      	beq.n	8d54 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    8d4a:	4a29      	ldr	r2, [pc, #164]	; (8df0 <_gclk_init_generators_by_fref+0x11c>)
    8d4c:	2105      	movs	r1, #5
    8d4e:	4822      	ldr	r0, [pc, #136]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d50:	4b22      	ldr	r3, [pc, #136]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d52:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    8d54:	687b      	ldr	r3, [r7, #4]
    8d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d004      	beq.n	8d68 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    8d5e:	4a25      	ldr	r2, [pc, #148]	; (8df4 <_gclk_init_generators_by_fref+0x120>)
    8d60:	2106      	movs	r1, #6
    8d62:	481d      	ldr	r0, [pc, #116]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d64:	4b1d      	ldr	r3, [pc, #116]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d66:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    8d68:	687b      	ldr	r3, [r7, #4]
    8d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8d6e:	2b00      	cmp	r3, #0
    8d70:	d004      	beq.n	8d7c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    8d72:	4a21      	ldr	r2, [pc, #132]	; (8df8 <_gclk_init_generators_by_fref+0x124>)
    8d74:	2107      	movs	r1, #7
    8d76:	4818      	ldr	r0, [pc, #96]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d78:	4b18      	ldr	r3, [pc, #96]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d7a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    8d7c:	687b      	ldr	r3, [r7, #4]
    8d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8d82:	2b00      	cmp	r3, #0
    8d84:	d004      	beq.n	8d90 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    8d86:	4a1d      	ldr	r2, [pc, #116]	; (8dfc <_gclk_init_generators_by_fref+0x128>)
    8d88:	2108      	movs	r1, #8
    8d8a:	4813      	ldr	r0, [pc, #76]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8d8c:	4b13      	ldr	r3, [pc, #76]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8d8e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    8d90:	687b      	ldr	r3, [r7, #4]
    8d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8d96:	2b00      	cmp	r3, #0
    8d98:	d004      	beq.n	8da4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    8d9a:	4a19      	ldr	r2, [pc, #100]	; (8e00 <_gclk_init_generators_by_fref+0x12c>)
    8d9c:	2109      	movs	r1, #9
    8d9e:	480e      	ldr	r0, [pc, #56]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8da0:	4b0e      	ldr	r3, [pc, #56]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8da2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8daa:	2b00      	cmp	r3, #0
    8dac:	d004      	beq.n	8db8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    8dae:	4a15      	ldr	r2, [pc, #84]	; (8e04 <_gclk_init_generators_by_fref+0x130>)
    8db0:	210a      	movs	r1, #10
    8db2:	4809      	ldr	r0, [pc, #36]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8db4:	4b09      	ldr	r3, [pc, #36]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8db6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d004      	beq.n	8dcc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    8dc2:	4a11      	ldr	r2, [pc, #68]	; (8e08 <_gclk_init_generators_by_fref+0x134>)
    8dc4:	210b      	movs	r1, #11
    8dc6:	4804      	ldr	r0, [pc, #16]	; (8dd8 <_gclk_init_generators_by_fref+0x104>)
    8dc8:	4b04      	ldr	r3, [pc, #16]	; (8ddc <_gclk_init_generators_by_fref+0x108>)
    8dca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    8dcc:	bf00      	nop
    8dce:	3708      	adds	r7, #8
    8dd0:	46bd      	mov	sp, r7
    8dd2:	bd80      	pop	{r7, pc}
    8dd4:	00010107 	.word	0x00010107
    8dd8:	40001c00 	.word	0x40001c00
    8ddc:	00008ca5 	.word	0x00008ca5
    8de0:	00010907 	.word	0x00010907
    8de4:	00010906 	.word	0x00010906
    8de8:	00020908 	.word	0x00020908
    8dec:	00010901 	.word	0x00010901
    8df0:	00062901 	.word	0x00062901
    8df4:	000c2901 	.word	0x000c2901
    8df8:	00082908 	.word	0x00082908
    8dfc:	00032901 	.word	0x00032901
    8e00:	00011908 	.word	0x00011908
    8e04:	00010905 	.word	0x00010905
    8e08:	00041905 	.word	0x00041905

00008e0c <hri_mclk_write_CPUDIV_reg>:
{
    8e0c:	b480      	push	{r7}
    8e0e:	b083      	sub	sp, #12
    8e10:	af00      	add	r7, sp, #0
    8e12:	6078      	str	r0, [r7, #4]
    8e14:	460b      	mov	r3, r1
    8e16:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	78fa      	ldrb	r2, [r7, #3]
    8e1c:	715a      	strb	r2, [r3, #5]
}
    8e1e:	bf00      	nop
    8e20:	370c      	adds	r7, #12
    8e22:	46bd      	mov	sp, r7
    8e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e28:	4770      	bx	lr
	...

00008e2c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	b082      	sub	sp, #8
    8e30:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    8e32:	4b05      	ldr	r3, [pc, #20]	; (8e48 <_mclk_init+0x1c>)
    8e34:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    8e36:	2101      	movs	r1, #1
    8e38:	6878      	ldr	r0, [r7, #4]
    8e3a:	4b04      	ldr	r3, [pc, #16]	; (8e4c <_mclk_init+0x20>)
    8e3c:	4798      	blx	r3
}
    8e3e:	bf00      	nop
    8e40:	3708      	adds	r7, #8
    8e42:	46bd      	mov	sp, r7
    8e44:	bd80      	pop	{r7, pc}
    8e46:	bf00      	nop
    8e48:	40000800 	.word	0x40000800
    8e4c:	00008e0d 	.word	0x00008e0d

00008e50 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    8e50:	b480      	push	{r7}
    8e52:	b083      	sub	sp, #12
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
    8e58:	460b      	mov	r3, r1
    8e5a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	78fa      	ldrb	r2, [r7, #3]
    8e60:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8e62:	bf00      	nop
    8e64:	370c      	adds	r7, #12
    8e66:	46bd      	mov	sp, r7
    8e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6c:	4770      	bx	lr

00008e6e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    8e6e:	b480      	push	{r7}
    8e70:	b083      	sub	sp, #12
    8e72:	af00      	add	r7, sp, #0
    8e74:	6078      	str	r0, [r7, #4]
    8e76:	460b      	mov	r3, r1
    8e78:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	887a      	ldrh	r2, [r7, #2]
    8e7e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8e80:	bf00      	nop
    8e82:	370c      	adds	r7, #12
    8e84:	46bd      	mov	sp, r7
    8e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e8a:	4770      	bx	lr

00008e8c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    8e8c:	b480      	push	{r7}
    8e8e:	b083      	sub	sp, #12
    8e90:	af00      	add	r7, sp, #0
    8e92:	6078      	str	r0, [r7, #4]
    8e94:	460b      	mov	r3, r1
    8e96:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	78fa      	ldrb	r2, [r7, #3]
    8e9c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8e9e:	bf00      	nop
    8ea0:	370c      	adds	r7, #12
    8ea2:	46bd      	mov	sp, r7
    8ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ea8:	4770      	bx	lr

00008eaa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    8eaa:	b480      	push	{r7}
    8eac:	b083      	sub	sp, #12
    8eae:	af00      	add	r7, sp, #0
    8eb0:	6078      	str	r0, [r7, #4]
    8eb2:	460b      	mov	r3, r1
    8eb4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	78fa      	ldrb	r2, [r7, #3]
    8eba:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8ebc:	bf00      	nop
    8ebe:	370c      	adds	r7, #12
    8ec0:	46bd      	mov	sp, r7
    8ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec6:	4770      	bx	lr

00008ec8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    8ec8:	b480      	push	{r7}
    8eca:	b085      	sub	sp, #20
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    8ed0:	687b      	ldr	r3, [r7, #4]
    8ed2:	69db      	ldr	r3, [r3, #28]
    8ed4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    8ed6:	68fb      	ldr	r3, [r7, #12]
    8ed8:	0a1b      	lsrs	r3, r3, #8
    8eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8ede:	60fb      	str	r3, [r7, #12]
	return tmp;
    8ee0:	68fb      	ldr	r3, [r7, #12]
}
    8ee2:	4618      	mov	r0, r3
    8ee4:	3714      	adds	r7, #20
    8ee6:	46bd      	mov	sp, r7
    8ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eec:	4770      	bx	lr

00008eee <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    8eee:	b480      	push	{r7}
    8ef0:	b083      	sub	sp, #12
    8ef2:	af00      	add	r7, sp, #0
    8ef4:	6078      	str	r0, [r7, #4]
    8ef6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	683a      	ldr	r2, [r7, #0]
    8efc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8efe:	bf00      	nop
    8f00:	370c      	adds	r7, #12
    8f02:	46bd      	mov	sp, r7
    8f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f08:	4770      	bx	lr
	...

00008f0c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    8f0c:	b580      	push	{r7, lr}
    8f0e:	b082      	sub	sp, #8
    8f10:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    8f12:	4b13      	ldr	r3, [pc, #76]	; (8f60 <_osc32kctrl_init_sources+0x54>)
    8f14:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    8f16:	2300      	movs	r3, #0
    8f18:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    8f1a:	f242 018e 	movw	r1, #8334	; 0x208e
    8f1e:	6878      	ldr	r0, [r7, #4]
    8f20:	4b10      	ldr	r3, [pc, #64]	; (8f64 <_osc32kctrl_init_sources+0x58>)
    8f22:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    8f24:	2100      	movs	r1, #0
    8f26:	6878      	ldr	r0, [r7, #4]
    8f28:	4b0f      	ldr	r3, [pc, #60]	; (8f68 <_osc32kctrl_init_sources+0x5c>)
    8f2a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    8f2c:	2100      	movs	r1, #0
    8f2e:	6878      	ldr	r0, [r7, #4]
    8f30:	4b0e      	ldr	r3, [pc, #56]	; (8f6c <_osc32kctrl_init_sources+0x60>)
    8f32:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    8f34:	6878      	ldr	r0, [r7, #4]
    8f36:	4b0e      	ldr	r3, [pc, #56]	; (8f70 <_osc32kctrl_init_sources+0x64>)
    8f38:	4798      	blx	r3
    8f3a:	4603      	mov	r3, r0
    8f3c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    8f3e:	887b      	ldrh	r3, [r7, #2]
    8f40:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    8f42:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    8f46:	4619      	mov	r1, r3
    8f48:	6878      	ldr	r0, [r7, #4]
    8f4a:	4b0a      	ldr	r3, [pc, #40]	; (8f74 <_osc32kctrl_init_sources+0x68>)
    8f4c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    8f4e:	2100      	movs	r1, #0
    8f50:	6878      	ldr	r0, [r7, #4]
    8f52:	4b09      	ldr	r3, [pc, #36]	; (8f78 <_osc32kctrl_init_sources+0x6c>)
    8f54:	4798      	blx	r3
	(void)calib;
}
    8f56:	bf00      	nop
    8f58:	3708      	adds	r7, #8
    8f5a:	46bd      	mov	sp, r7
    8f5c:	bd80      	pop	{r7, pc}
    8f5e:	bf00      	nop
    8f60:	40001400 	.word	0x40001400
    8f64:	00008e6f 	.word	0x00008e6f
    8f68:	00008e8d 	.word	0x00008e8d
    8f6c:	00008eab 	.word	0x00008eab
    8f70:	00008ec9 	.word	0x00008ec9
    8f74:	00008eef 	.word	0x00008eef
    8f78:	00008e51 	.word	0x00008e51

00008f7c <hri_gclk_wait_for_sync>:
{
    8f7c:	b480      	push	{r7}
    8f7e:	b083      	sub	sp, #12
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
    8f84:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    8f86:	bf00      	nop
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	685a      	ldr	r2, [r3, #4]
    8f8c:	683b      	ldr	r3, [r7, #0]
    8f8e:	4013      	ands	r3, r2
    8f90:	2b00      	cmp	r3, #0
    8f92:	d1f9      	bne.n	8f88 <hri_gclk_wait_for_sync+0xc>
}
    8f94:	bf00      	nop
    8f96:	370c      	adds	r7, #12
    8f98:	46bd      	mov	sp, r7
    8f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9e:	4770      	bx	lr

00008fa0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    8fa0:	b480      	push	{r7}
    8fa2:	b083      	sub	sp, #12
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    8fa8:	687b      	ldr	r3, [r7, #4]
    8faa:	685b      	ldr	r3, [r3, #4]
    8fac:	089b      	lsrs	r3, r3, #2
    8fae:	f003 0301 	and.w	r3, r3, #1
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	bf14      	ite	ne
    8fb6:	2301      	movne	r3, #1
    8fb8:	2300      	moveq	r3, #0
    8fba:	b2db      	uxtb	r3, r3
}
    8fbc:	4618      	mov	r0, r3
    8fbe:	370c      	adds	r7, #12
    8fc0:	46bd      	mov	sp, r7
    8fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc6:	4770      	bx	lr

00008fc8 <hri_gclk_read_SYNCBUSY_reg>:
{
    8fc8:	b480      	push	{r7}
    8fca:	b083      	sub	sp, #12
    8fcc:	af00      	add	r7, sp, #0
    8fce:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	685b      	ldr	r3, [r3, #4]
}
    8fd4:	4618      	mov	r0, r3
    8fd6:	370c      	adds	r7, #12
    8fd8:	46bd      	mov	sp, r7
    8fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fde:	4770      	bx	lr

00008fe0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    8fe0:	b580      	push	{r7, lr}
    8fe2:	b086      	sub	sp, #24
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	60f8      	str	r0, [r7, #12]
    8fe8:	460b      	mov	r3, r1
    8fea:	607a      	str	r2, [r7, #4]
    8fec:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    8fee:	7afa      	ldrb	r2, [r7, #11]
    8ff0:	68fb      	ldr	r3, [r7, #12]
    8ff2:	3208      	adds	r2, #8
    8ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ff8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    8ffa:	697b      	ldr	r3, [r7, #20]
    8ffc:	f023 030f 	bic.w	r3, r3, #15
    9000:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9002:	687b      	ldr	r3, [r7, #4]
    9004:	f003 030f 	and.w	r3, r3, #15
    9008:	697a      	ldr	r2, [r7, #20]
    900a:	4313      	orrs	r3, r2
    900c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    900e:	7afa      	ldrb	r2, [r7, #11]
    9010:	68fb      	ldr	r3, [r7, #12]
    9012:	3208      	adds	r2, #8
    9014:	6979      	ldr	r1, [r7, #20]
    9016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    901a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    901e:	68f8      	ldr	r0, [r7, #12]
    9020:	4b02      	ldr	r3, [pc, #8]	; (902c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    9022:	4798      	blx	r3
}
    9024:	bf00      	nop
    9026:	3718      	adds	r7, #24
    9028:	46bd      	mov	sp, r7
    902a:	bd80      	pop	{r7, pc}
    902c:	00008f7d 	.word	0x00008f7d

00009030 <hri_gclk_write_PCHCTRL_reg>:
{
    9030:	b480      	push	{r7}
    9032:	b085      	sub	sp, #20
    9034:	af00      	add	r7, sp, #0
    9036:	60f8      	str	r0, [r7, #12]
    9038:	460b      	mov	r3, r1
    903a:	607a      	str	r2, [r7, #4]
    903c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    903e:	7afa      	ldrb	r2, [r7, #11]
    9040:	68fb      	ldr	r3, [r7, #12]
    9042:	3220      	adds	r2, #32
    9044:	6879      	ldr	r1, [r7, #4]
    9046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    904a:	bf00      	nop
    904c:	3714      	adds	r7, #20
    904e:	46bd      	mov	sp, r7
    9050:	f85d 7b04 	ldr.w	r7, [sp], #4
    9054:	4770      	bx	lr

00009056 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    9056:	b480      	push	{r7}
    9058:	b085      	sub	sp, #20
    905a:	af00      	add	r7, sp, #0
    905c:	60f8      	str	r0, [r7, #12]
    905e:	460b      	mov	r3, r1
    9060:	607a      	str	r2, [r7, #4]
    9062:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9064:	bf00      	nop
    9066:	7afa      	ldrb	r2, [r7, #11]
    9068:	68f9      	ldr	r1, [r7, #12]
    906a:	4613      	mov	r3, r2
    906c:	009b      	lsls	r3, r3, #2
    906e:	4413      	add	r3, r2
    9070:	009b      	lsls	r3, r3, #2
    9072:	440b      	add	r3, r1
    9074:	333c      	adds	r3, #60	; 0x3c
    9076:	681a      	ldr	r2, [r3, #0]
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	4013      	ands	r3, r2
    907c:	2b00      	cmp	r3, #0
    907e:	d1f2      	bne.n	9066 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9080:	bf00      	nop
    9082:	3714      	adds	r7, #20
    9084:	46bd      	mov	sp, r7
    9086:	f85d 7b04 	ldr.w	r7, [sp], #4
    908a:	4770      	bx	lr

0000908c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    908c:	b480      	push	{r7}
    908e:	b083      	sub	sp, #12
    9090:	af00      	add	r7, sp, #0
    9092:	6078      	str	r0, [r7, #4]
    9094:	460b      	mov	r3, r1
    9096:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    9098:	78fa      	ldrb	r2, [r7, #3]
    909a:	6879      	ldr	r1, [r7, #4]
    909c:	4613      	mov	r3, r2
    909e:	009b      	lsls	r3, r3, #2
    90a0:	4413      	add	r3, r2
    90a2:	009b      	lsls	r3, r3, #2
    90a4:	440b      	add	r3, r1
    90a6:	3340      	adds	r3, #64	; 0x40
    90a8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    90aa:	f003 0301 	and.w	r3, r3, #1
    90ae:	2b00      	cmp	r3, #0
    90b0:	bf14      	ite	ne
    90b2:	2301      	movne	r3, #1
    90b4:	2300      	moveq	r3, #0
    90b6:	b2db      	uxtb	r3, r3
}
    90b8:	4618      	mov	r0, r3
    90ba:	370c      	adds	r7, #12
    90bc:	46bd      	mov	sp, r7
    90be:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c2:	4770      	bx	lr

000090c4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    90c4:	b480      	push	{r7}
    90c6:	b083      	sub	sp, #12
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	460b      	mov	r3, r1
    90ce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    90d0:	78fa      	ldrb	r2, [r7, #3]
    90d2:	6879      	ldr	r1, [r7, #4]
    90d4:	4613      	mov	r3, r2
    90d6:	009b      	lsls	r3, r3, #2
    90d8:	4413      	add	r3, r2
    90da:	009b      	lsls	r3, r3, #2
    90dc:	440b      	add	r3, r1
    90de:	3340      	adds	r3, #64	; 0x40
    90e0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    90e2:	085b      	lsrs	r3, r3, #1
    90e4:	f003 0301 	and.w	r3, r3, #1
    90e8:	2b00      	cmp	r3, #0
    90ea:	bf14      	ite	ne
    90ec:	2301      	movne	r3, #1
    90ee:	2300      	moveq	r3, #0
    90f0:	b2db      	uxtb	r3, r3
}
    90f2:	4618      	mov	r0, r3
    90f4:	370c      	adds	r7, #12
    90f6:	46bd      	mov	sp, r7
    90f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fc:	4770      	bx	lr
	...

00009100 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9100:	b580      	push	{r7, lr}
    9102:	b082      	sub	sp, #8
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	460b      	mov	r3, r1
    910a:	70fb      	strb	r3, [r7, #3]
    910c:	4613      	mov	r3, r2
    910e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9110:	78fa      	ldrb	r2, [r7, #3]
    9112:	6879      	ldr	r1, [r7, #4]
    9114:	4613      	mov	r3, r2
    9116:	009b      	lsls	r3, r3, #2
    9118:	4413      	add	r3, r2
    911a:	009b      	lsls	r3, r3, #2
    911c:	440b      	add	r3, r1
    911e:	3330      	adds	r3, #48	; 0x30
    9120:	78ba      	ldrb	r2, [r7, #2]
    9122:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    9124:	78fb      	ldrb	r3, [r7, #3]
    9126:	2202      	movs	r2, #2
    9128:	4619      	mov	r1, r3
    912a:	6878      	ldr	r0, [r7, #4]
    912c:	4b02      	ldr	r3, [pc, #8]	; (9138 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    912e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9130:	bf00      	nop
    9132:	3708      	adds	r7, #8
    9134:	46bd      	mov	sp, r7
    9136:	bd80      	pop	{r7, pc}
    9138:	00009057 	.word	0x00009057

0000913c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    913c:	b580      	push	{r7, lr}
    913e:	b084      	sub	sp, #16
    9140:	af00      	add	r7, sp, #0
    9142:	60f8      	str	r0, [r7, #12]
    9144:	460b      	mov	r3, r1
    9146:	607a      	str	r2, [r7, #4]
    9148:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    914a:	7afa      	ldrb	r2, [r7, #11]
    914c:	68f9      	ldr	r1, [r7, #12]
    914e:	4613      	mov	r3, r2
    9150:	009b      	lsls	r3, r3, #2
    9152:	4413      	add	r3, r2
    9154:	009b      	lsls	r3, r3, #2
    9156:	440b      	add	r3, r1
    9158:	3334      	adds	r3, #52	; 0x34
    915a:	687a      	ldr	r2, [r7, #4]
    915c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    915e:	7afb      	ldrb	r3, [r7, #11]
    9160:	2206      	movs	r2, #6
    9162:	4619      	mov	r1, r3
    9164:	68f8      	ldr	r0, [r7, #12]
    9166:	4b03      	ldr	r3, [pc, #12]	; (9174 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    9168:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    916a:	bf00      	nop
    916c:	3710      	adds	r7, #16
    916e:	46bd      	mov	sp, r7
    9170:	bd80      	pop	{r7, pc}
    9172:	bf00      	nop
    9174:	00009057 	.word	0x00009057

00009178 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    9178:	b480      	push	{r7}
    917a:	b085      	sub	sp, #20
    917c:	af00      	add	r7, sp, #0
    917e:	60f8      	str	r0, [r7, #12]
    9180:	460b      	mov	r3, r1
    9182:	607a      	str	r2, [r7, #4]
    9184:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    9186:	7afa      	ldrb	r2, [r7, #11]
    9188:	68f9      	ldr	r1, [r7, #12]
    918a:	4613      	mov	r3, r2
    918c:	009b      	lsls	r3, r3, #2
    918e:	4413      	add	r3, r2
    9190:	009b      	lsls	r3, r3, #2
    9192:	440b      	add	r3, r1
    9194:	3338      	adds	r3, #56	; 0x38
    9196:	687a      	ldr	r2, [r7, #4]
    9198:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    919a:	bf00      	nop
    919c:	3714      	adds	r7, #20
    919e:	46bd      	mov	sp, r7
    91a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91a4:	4770      	bx	lr

000091a6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    91a6:	b480      	push	{r7}
    91a8:	b083      	sub	sp, #12
    91aa:	af00      	add	r7, sp, #0
    91ac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	691b      	ldr	r3, [r3, #16]
    91b2:	085b      	lsrs	r3, r3, #1
    91b4:	f003 0301 	and.w	r3, r3, #1
    91b8:	2b00      	cmp	r3, #0
    91ba:	bf14      	ite	ne
    91bc:	2301      	movne	r3, #1
    91be:	2300      	moveq	r3, #0
    91c0:	b2db      	uxtb	r3, r3
}
    91c2:	4618      	mov	r0, r3
    91c4:	370c      	adds	r7, #12
    91c6:	46bd      	mov	sp, r7
    91c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    91cc:	4770      	bx	lr

000091ce <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    91ce:	b480      	push	{r7}
    91d0:	b083      	sub	sp, #12
    91d2:	af00      	add	r7, sp, #0
    91d4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	691b      	ldr	r3, [r3, #16]
    91da:	0a1b      	lsrs	r3, r3, #8
    91dc:	f003 0301 	and.w	r3, r3, #1
    91e0:	2b00      	cmp	r3, #0
    91e2:	bf14      	ite	ne
    91e4:	2301      	movne	r3, #1
    91e6:	2300      	moveq	r3, #0
    91e8:	b2db      	uxtb	r3, r3
}
    91ea:	4618      	mov	r0, r3
    91ec:	370c      	adds	r7, #12
    91ee:	46bd      	mov	sp, r7
    91f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91f4:	4770      	bx	lr

000091f6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    91f6:	b480      	push	{r7}
    91f8:	b085      	sub	sp, #20
    91fa:	af00      	add	r7, sp, #0
    91fc:	6078      	str	r0, [r7, #4]
    91fe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	691b      	ldr	r3, [r3, #16]
    9204:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9206:	68fa      	ldr	r2, [r7, #12]
    9208:	683b      	ldr	r3, [r7, #0]
    920a:	4013      	ands	r3, r2
    920c:	60fb      	str	r3, [r7, #12]
	return tmp;
    920e:	68fb      	ldr	r3, [r7, #12]
}
    9210:	4618      	mov	r0, r3
    9212:	3714      	adds	r7, #20
    9214:	46bd      	mov	sp, r7
    9216:	f85d 7b04 	ldr.w	r7, [sp], #4
    921a:	4770      	bx	lr

0000921c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    921c:	b480      	push	{r7}
    921e:	b085      	sub	sp, #20
    9220:	af00      	add	r7, sp, #0
    9222:	60f8      	str	r0, [r7, #12]
    9224:	460b      	mov	r3, r1
    9226:	607a      	str	r2, [r7, #4]
    9228:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    922a:	7afb      	ldrb	r3, [r7, #11]
    922c:	68fa      	ldr	r2, [r7, #12]
    922e:	3304      	adds	r3, #4
    9230:	009b      	lsls	r3, r3, #2
    9232:	4413      	add	r3, r2
    9234:	687a      	ldr	r2, [r7, #4]
    9236:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9238:	bf00      	nop
    923a:	3714      	adds	r7, #20
    923c:	46bd      	mov	sp, r7
    923e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9242:	4770      	bx	lr

00009244 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9244:	b480      	push	{r7}
    9246:	b083      	sub	sp, #12
    9248:	af00      	add	r7, sp, #0
    924a:	6078      	str	r0, [r7, #4]
    924c:	460b      	mov	r3, r1
    924e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	78fa      	ldrb	r2, [r7, #3]
    9254:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9256:	bf00      	nop
    9258:	370c      	adds	r7, #12
    925a:	46bd      	mov	sp, r7
    925c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9260:	4770      	bx	lr

00009262 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9262:	b480      	push	{r7}
    9264:	b085      	sub	sp, #20
    9266:	af00      	add	r7, sp, #0
    9268:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	f893 3020 	ldrb.w	r3, [r3, #32]
    9270:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9272:	7bfb      	ldrb	r3, [r7, #15]
    9274:	f003 0301 	and.w	r3, r3, #1
    9278:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    927a:	7bfb      	ldrb	r3, [r7, #15]
    927c:	2b00      	cmp	r3, #0
    927e:	bf14      	ite	ne
    9280:	2301      	movne	r3, #1
    9282:	2300      	moveq	r3, #0
    9284:	b2db      	uxtb	r3, r3
}
    9286:	4618      	mov	r0, r3
    9288:	3714      	adds	r7, #20
    928a:	46bd      	mov	sp, r7
    928c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9290:	4770      	bx	lr

00009292 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9292:	b480      	push	{r7}
    9294:	b083      	sub	sp, #12
    9296:	af00      	add	r7, sp, #0
    9298:	6078      	str	r0, [r7, #4]
    929a:	460b      	mov	r3, r1
    929c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    929e:	687b      	ldr	r3, [r7, #4]
    92a0:	78fa      	ldrb	r2, [r7, #3]
    92a2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    92a6:	bf00      	nop
    92a8:	370c      	adds	r7, #12
    92aa:	46bd      	mov	sp, r7
    92ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b0:	4770      	bx	lr

000092b2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    92b2:	b480      	push	{r7}
    92b4:	b083      	sub	sp, #12
    92b6:	af00      	add	r7, sp, #0
    92b8:	6078      	str	r0, [r7, #4]
    92ba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	683a      	ldr	r2, [r7, #0]
    92c0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    92c2:	bf00      	nop
    92c4:	370c      	adds	r7, #12
    92c6:	46bd      	mov	sp, r7
    92c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92cc:	4770      	bx	lr

000092ce <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    92ce:	b480      	push	{r7}
    92d0:	b083      	sub	sp, #12
    92d2:	af00      	add	r7, sp, #0
    92d4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    92da:	4618      	mov	r0, r3
    92dc:	370c      	adds	r7, #12
    92de:	46bd      	mov	sp, r7
    92e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92e4:	4770      	bx	lr

000092e6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    92e6:	b480      	push	{r7}
    92e8:	b083      	sub	sp, #12
    92ea:	af00      	add	r7, sp, #0
    92ec:	6078      	str	r0, [r7, #4]
    92ee:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	683a      	ldr	r2, [r7, #0]
    92f4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    92f6:	bf00      	nop
    92f8:	370c      	adds	r7, #12
    92fa:	46bd      	mov	sp, r7
    92fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9300:	4770      	bx	lr

00009302 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9302:	b480      	push	{r7}
    9304:	b085      	sub	sp, #20
    9306:	af00      	add	r7, sp, #0
    9308:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    930a:	687b      	ldr	r3, [r7, #4]
    930c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9310:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9312:	7bfb      	ldrb	r3, [r7, #15]
    9314:	085b      	lsrs	r3, r3, #1
    9316:	b2db      	uxtb	r3, r3
    9318:	f003 0301 	and.w	r3, r3, #1
    931c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    931e:	7bfb      	ldrb	r3, [r7, #15]
    9320:	2b00      	cmp	r3, #0
    9322:	bf14      	ite	ne
    9324:	2301      	movne	r3, #1
    9326:	2300      	moveq	r3, #0
    9328:	b2db      	uxtb	r3, r3
}
    932a:	4618      	mov	r0, r3
    932c:	3714      	adds	r7, #20
    932e:	46bd      	mov	sp, r7
    9330:	f85d 7b04 	ldr.w	r7, [sp], #4
    9334:	4770      	bx	lr

00009336 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9336:	b480      	push	{r7}
    9338:	b085      	sub	sp, #20
    933a:	af00      	add	r7, sp, #0
    933c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9344:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9346:	7bfb      	ldrb	r3, [r7, #15]
    9348:	089b      	lsrs	r3, r3, #2
    934a:	b2db      	uxtb	r3, r3
    934c:	f003 0301 	and.w	r3, r3, #1
    9350:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9352:	7bfb      	ldrb	r3, [r7, #15]
    9354:	2b00      	cmp	r3, #0
    9356:	bf14      	ite	ne
    9358:	2301      	movne	r3, #1
    935a:	2300      	moveq	r3, #0
    935c:	b2db      	uxtb	r3, r3
}
    935e:	4618      	mov	r0, r3
    9360:	3714      	adds	r7, #20
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr

0000936a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    936a:	b480      	push	{r7}
    936c:	b085      	sub	sp, #20
    936e:	af00      	add	r7, sp, #0
    9370:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9378:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    937a:	7bfb      	ldrb	r3, [r7, #15]
    937c:	08db      	lsrs	r3, r3, #3
    937e:	b2db      	uxtb	r3, r3
    9380:	f003 0301 	and.w	r3, r3, #1
    9384:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9386:	7bfb      	ldrb	r3, [r7, #15]
    9388:	2b00      	cmp	r3, #0
    938a:	bf14      	ite	ne
    938c:	2301      	movne	r3, #1
    938e:	2300      	moveq	r3, #0
    9390:	b2db      	uxtb	r3, r3
}
    9392:	4618      	mov	r0, r3
    9394:	3714      	adds	r7, #20
    9396:	46bd      	mov	sp, r7
    9398:	f85d 7b04 	ldr.w	r7, [sp], #4
    939c:	4770      	bx	lr

0000939e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    939e:	b480      	push	{r7}
    93a0:	b085      	sub	sp, #20
    93a2:	af00      	add	r7, sp, #0
    93a4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    93ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    93ae:	7bfb      	ldrb	r3, [r7, #15]
    93b0:	091b      	lsrs	r3, r3, #4
    93b2:	b2db      	uxtb	r3, r3
    93b4:	f003 0301 	and.w	r3, r3, #1
    93b8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    93ba:	7bfb      	ldrb	r3, [r7, #15]
    93bc:	2b00      	cmp	r3, #0
    93be:	bf14      	ite	ne
    93c0:	2301      	movne	r3, #1
    93c2:	2300      	moveq	r3, #0
    93c4:	b2db      	uxtb	r3, r3
}
    93c6:	4618      	mov	r0, r3
    93c8:	3714      	adds	r7, #20
    93ca:	46bd      	mov	sp, r7
    93cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    93d0:	4770      	bx	lr
	...

000093d4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    93d4:	b580      	push	{r7, lr}
    93d6:	b082      	sub	sp, #8
    93d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    93da:	4b0a      	ldr	r3, [pc, #40]	; (9404 <_oscctrl_init_sources+0x30>)
    93dc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    93de:	4a0a      	ldr	r2, [pc, #40]	; (9408 <_oscctrl_init_sources+0x34>)
    93e0:	2101      	movs	r1, #1
    93e2:	6878      	ldr	r0, [r7, #4]
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <_oscctrl_init_sources+0x38>)
    93e6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    93e8:	bf00      	nop
    93ea:	6878      	ldr	r0, [r7, #4]
    93ec:	4b08      	ldr	r3, [pc, #32]	; (9410 <_oscctrl_init_sources+0x3c>)
    93ee:	4798      	blx	r3
    93f0:	4603      	mov	r3, r0
    93f2:	f083 0301 	eor.w	r3, r3, #1
    93f6:	b2db      	uxtb	r3, r3
    93f8:	2b00      	cmp	r3, #0
    93fa:	d1f6      	bne.n	93ea <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    93fc:	bf00      	nop
    93fe:	3708      	adds	r7, #8
    9400:	46bd      	mov	sp, r7
    9402:	bd80      	pop	{r7, pc}
    9404:	40001000 	.word	0x40001000
    9408:	03002646 	.word	0x03002646
    940c:	0000921d 	.word	0x0000921d
    9410:	000091a7 	.word	0x000091a7

00009414 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9414:	b580      	push	{r7, lr}
    9416:	b084      	sub	sp, #16
    9418:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    941a:	4b6b      	ldr	r3, [pc, #428]	; (95c8 <_oscctrl_init_referenced_generators+0x1b4>)
    941c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    941e:	2204      	movs	r2, #4
    9420:	2100      	movs	r1, #0
    9422:	486a      	ldr	r0, [pc, #424]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    9424:	4b6a      	ldr	r3, [pc, #424]	; (95d0 <_oscctrl_init_referenced_generators+0x1bc>)
    9426:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9428:	bf00      	nop
    942a:	4868      	ldr	r0, [pc, #416]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    942c:	4b69      	ldr	r3, [pc, #420]	; (95d4 <_oscctrl_init_referenced_generators+0x1c0>)
    942e:	4798      	blx	r3
    9430:	4603      	mov	r3, r0
    9432:	2b00      	cmp	r3, #0
    9434:	d1f9      	bne.n	942a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9436:	2100      	movs	r1, #0
    9438:	68f8      	ldr	r0, [r7, #12]
    943a:	4b67      	ldr	r3, [pc, #412]	; (95d8 <_oscctrl_init_referenced_generators+0x1c4>)
    943c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    943e:	4967      	ldr	r1, [pc, #412]	; (95dc <_oscctrl_init_referenced_generators+0x1c8>)
    9440:	68f8      	ldr	r0, [r7, #12]
    9442:	4b67      	ldr	r3, [pc, #412]	; (95e0 <_oscctrl_init_referenced_generators+0x1cc>)
    9444:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9446:	bf00      	nop
    9448:	68f8      	ldr	r0, [r7, #12]
    944a:	4b66      	ldr	r3, [pc, #408]	; (95e4 <_oscctrl_init_referenced_generators+0x1d0>)
    944c:	4798      	blx	r3
    944e:	4603      	mov	r3, r0
    9450:	2b00      	cmp	r3, #0
    9452:	d1f9      	bne.n	9448 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9454:	2100      	movs	r1, #0
    9456:	68f8      	ldr	r0, [r7, #12]
    9458:	4b63      	ldr	r3, [pc, #396]	; (95e8 <_oscctrl_init_referenced_generators+0x1d4>)
    945a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    945c:	bf00      	nop
    945e:	68f8      	ldr	r0, [r7, #12]
    9460:	4b62      	ldr	r3, [pc, #392]	; (95ec <_oscctrl_init_referenced_generators+0x1d8>)
    9462:	4798      	blx	r3
    9464:	4603      	mov	r3, r0
    9466:	2b00      	cmp	r3, #0
    9468:	d1f9      	bne.n	945e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    946a:	2302      	movs	r3, #2
    946c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    946e:	7afb      	ldrb	r3, [r7, #11]
    9470:	4619      	mov	r1, r3
    9472:	68f8      	ldr	r0, [r7, #12]
    9474:	4b58      	ldr	r3, [pc, #352]	; (95d8 <_oscctrl_init_referenced_generators+0x1c4>)
    9476:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9478:	bf00      	nop
    947a:	68f8      	ldr	r0, [r7, #12]
    947c:	4b5c      	ldr	r3, [pc, #368]	; (95f0 <_oscctrl_init_referenced_generators+0x1dc>)
    947e:	4798      	blx	r3
    9480:	4603      	mov	r3, r0
    9482:	2b00      	cmp	r3, #0
    9484:	d1f9      	bne.n	947a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9486:	68f8      	ldr	r0, [r7, #12]
    9488:	4b5a      	ldr	r3, [pc, #360]	; (95f4 <_oscctrl_init_referenced_generators+0x1e0>)
    948a:	4798      	blx	r3
    948c:	4603      	mov	r3, r0
    948e:	4619      	mov	r1, r3
    9490:	68f8      	ldr	r0, [r7, #12]
    9492:	4b59      	ldr	r3, [pc, #356]	; (95f8 <_oscctrl_init_referenced_generators+0x1e4>)
    9494:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9496:	bf00      	nop
    9498:	68f8      	ldr	r0, [r7, #12]
    949a:	4b58      	ldr	r3, [pc, #352]	; (95fc <_oscctrl_init_referenced_generators+0x1e8>)
    949c:	4798      	blx	r3
    949e:	4603      	mov	r3, r0
    94a0:	2b00      	cmp	r3, #0
    94a2:	d1f9      	bne.n	9498 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    94a4:	2319      	movs	r3, #25
    94a6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    94a8:	7afb      	ldrb	r3, [r7, #11]
    94aa:	4619      	mov	r1, r3
    94ac:	68f8      	ldr	r0, [r7, #12]
    94ae:	4b4e      	ldr	r3, [pc, #312]	; (95e8 <_oscctrl_init_referenced_generators+0x1d4>)
    94b0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    94b2:	bf00      	nop
    94b4:	68f8      	ldr	r0, [r7, #12]
    94b6:	4b4d      	ldr	r3, [pc, #308]	; (95ec <_oscctrl_init_referenced_generators+0x1d8>)
    94b8:	4798      	blx	r3
    94ba:	4603      	mov	r3, r0
    94bc:	2b00      	cmp	r3, #0
    94be:	d1f9      	bne.n	94b4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    94c0:	2245      	movs	r2, #69	; 0x45
    94c2:	2101      	movs	r1, #1
    94c4:	4841      	ldr	r0, [pc, #260]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    94c6:	4b4e      	ldr	r3, [pc, #312]	; (9600 <_oscctrl_init_referenced_generators+0x1ec>)
    94c8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    94ca:	223b      	movs	r2, #59	; 0x3b
    94cc:	2100      	movs	r1, #0
    94ce:	68f8      	ldr	r0, [r7, #12]
    94d0:	4b4c      	ldr	r3, [pc, #304]	; (9604 <_oscctrl_init_referenced_generators+0x1f0>)
    94d2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    94d4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    94d8:	2100      	movs	r1, #0
    94da:	68f8      	ldr	r0, [r7, #12]
    94dc:	4b4a      	ldr	r3, [pc, #296]	; (9608 <_oscctrl_init_referenced_generators+0x1f4>)
    94de:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    94e0:	2242      	movs	r2, #66	; 0x42
    94e2:	2100      	movs	r1, #0
    94e4:	68f8      	ldr	r0, [r7, #12]
    94e6:	4b49      	ldr	r3, [pc, #292]	; (960c <_oscctrl_init_referenced_generators+0x1f8>)
    94e8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    94ea:	4a49      	ldr	r2, [pc, #292]	; (9610 <_oscctrl_init_referenced_generators+0x1fc>)
    94ec:	2101      	movs	r1, #1
    94ee:	68f8      	ldr	r0, [r7, #12]
    94f0:	4b44      	ldr	r3, [pc, #272]	; (9604 <_oscctrl_init_referenced_generators+0x1f0>)
    94f2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    94f4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    94f8:	2101      	movs	r1, #1
    94fa:	68f8      	ldr	r0, [r7, #12]
    94fc:	4b42      	ldr	r3, [pc, #264]	; (9608 <_oscctrl_init_referenced_generators+0x1f4>)
    94fe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9500:	2202      	movs	r2, #2
    9502:	2101      	movs	r1, #1
    9504:	68f8      	ldr	r0, [r7, #12]
    9506:	4b41      	ldr	r3, [pc, #260]	; (960c <_oscctrl_init_referenced_generators+0x1f8>)
    9508:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    950a:	68f8      	ldr	r0, [r7, #12]
    950c:	4b41      	ldr	r3, [pc, #260]	; (9614 <_oscctrl_init_referenced_generators+0x200>)
    950e:	4798      	blx	r3
    9510:	4603      	mov	r3, r0
    9512:	2b00      	cmp	r3, #0
    9514:	d00c      	beq.n	9530 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9516:	f44f 6310 	mov.w	r3, #2304	; 0x900
    951a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    951c:	bf00      	nop
    951e:	6879      	ldr	r1, [r7, #4]
    9520:	68f8      	ldr	r0, [r7, #12]
    9522:	4b3d      	ldr	r3, [pc, #244]	; (9618 <_oscctrl_init_referenced_generators+0x204>)
    9524:	4798      	blx	r3
    9526:	4602      	mov	r2, r0
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	429a      	cmp	r2, r3
    952c:	d1f7      	bne.n	951e <_oscctrl_init_referenced_generators+0x10a>
    952e:	e009      	b.n	9544 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9530:	bf00      	nop
    9532:	68f8      	ldr	r0, [r7, #12]
    9534:	4b39      	ldr	r3, [pc, #228]	; (961c <_oscctrl_init_referenced_generators+0x208>)
    9536:	4798      	blx	r3
    9538:	4603      	mov	r3, r0
    953a:	f083 0301 	eor.w	r3, r3, #1
    953e:	b2db      	uxtb	r3, r3
    9540:	2b00      	cmp	r3, #0
    9542:	d1f6      	bne.n	9532 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9544:	bf00      	nop
    9546:	2100      	movs	r1, #0
    9548:	68f8      	ldr	r0, [r7, #12]
    954a:	4b35      	ldr	r3, [pc, #212]	; (9620 <_oscctrl_init_referenced_generators+0x20c>)
    954c:	4798      	blx	r3
    954e:	4603      	mov	r3, r0
    9550:	f083 0301 	eor.w	r3, r3, #1
    9554:	b2db      	uxtb	r3, r3
    9556:	2b00      	cmp	r3, #0
    9558:	d009      	beq.n	956e <_oscctrl_init_referenced_generators+0x15a>
    955a:	2100      	movs	r1, #0
    955c:	68f8      	ldr	r0, [r7, #12]
    955e:	4b31      	ldr	r3, [pc, #196]	; (9624 <_oscctrl_init_referenced_generators+0x210>)
    9560:	4798      	blx	r3
    9562:	4603      	mov	r3, r0
    9564:	f083 0301 	eor.w	r3, r3, #1
    9568:	b2db      	uxtb	r3, r3
    956a:	2b00      	cmp	r3, #0
    956c:	d1eb      	bne.n	9546 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    956e:	bf00      	nop
    9570:	2101      	movs	r1, #1
    9572:	68f8      	ldr	r0, [r7, #12]
    9574:	4b2a      	ldr	r3, [pc, #168]	; (9620 <_oscctrl_init_referenced_generators+0x20c>)
    9576:	4798      	blx	r3
    9578:	4603      	mov	r3, r0
    957a:	f083 0301 	eor.w	r3, r3, #1
    957e:	b2db      	uxtb	r3, r3
    9580:	2b00      	cmp	r3, #0
    9582:	d009      	beq.n	9598 <_oscctrl_init_referenced_generators+0x184>
    9584:	2101      	movs	r1, #1
    9586:	68f8      	ldr	r0, [r7, #12]
    9588:	4b26      	ldr	r3, [pc, #152]	; (9624 <_oscctrl_init_referenced_generators+0x210>)
    958a:	4798      	blx	r3
    958c:	4603      	mov	r3, r0
    958e:	f083 0301 	eor.w	r3, r3, #1
    9592:	b2db      	uxtb	r3, r3
    9594:	2b00      	cmp	r3, #0
    9596:	d1eb      	bne.n	9570 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9598:	bf00      	nop
    959a:	480c      	ldr	r0, [pc, #48]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    959c:	4b22      	ldr	r3, [pc, #136]	; (9628 <_oscctrl_init_referenced_generators+0x214>)
    959e:	4798      	blx	r3
    95a0:	4603      	mov	r3, r0
    95a2:	2b00      	cmp	r3, #0
    95a4:	d1f9      	bne.n	959a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    95a6:	2207      	movs	r2, #7
    95a8:	2100      	movs	r1, #0
    95aa:	4808      	ldr	r0, [pc, #32]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    95ac:	4b08      	ldr	r3, [pc, #32]	; (95d0 <_oscctrl_init_referenced_generators+0x1bc>)
    95ae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    95b0:	bf00      	nop
    95b2:	4806      	ldr	r0, [pc, #24]	; (95cc <_oscctrl_init_referenced_generators+0x1b8>)
    95b4:	4b07      	ldr	r3, [pc, #28]	; (95d4 <_oscctrl_init_referenced_generators+0x1c0>)
    95b6:	4798      	blx	r3
    95b8:	4603      	mov	r3, r0
    95ba:	2b00      	cmp	r3, #0
    95bc:	d1f9      	bne.n	95b2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    95be:	bf00      	nop
    95c0:	3710      	adds	r7, #16
    95c2:	46bd      	mov	sp, r7
    95c4:	bd80      	pop	{r7, pc}
    95c6:	bf00      	nop
    95c8:	40001000 	.word	0x40001000
    95cc:	40001c00 	.word	0x40001c00
    95d0:	00008fe1 	.word	0x00008fe1
    95d4:	00008fa1 	.word	0x00008fa1
    95d8:	00009245 	.word	0x00009245
    95dc:	0401bb80 	.word	0x0401bb80
    95e0:	000092e7 	.word	0x000092e7
    95e4:	0000939f 	.word	0x0000939f
    95e8:	00009293 	.word	0x00009293
    95ec:	00009337 	.word	0x00009337
    95f0:	00009303 	.word	0x00009303
    95f4:	000092cf 	.word	0x000092cf
    95f8:	000092b3 	.word	0x000092b3
    95fc:	0000936b 	.word	0x0000936b
    9600:	00009031 	.word	0x00009031
    9604:	0000913d 	.word	0x0000913d
    9608:	00009179 	.word	0x00009179
    960c:	00009101 	.word	0x00009101
    9610:	000407a0 	.word	0x000407a0
    9614:	00009263 	.word	0x00009263
    9618:	000091f7 	.word	0x000091f7
    961c:	000091cf 	.word	0x000091cf
    9620:	0000908d 	.word	0x0000908d
    9624:	000090c5 	.word	0x000090c5
    9628:	00008fc9 	.word	0x00008fc9

0000962c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    962c:	b480      	push	{r7}
    962e:	b083      	sub	sp, #12
    9630:	af00      	add	r7, sp, #0
    9632:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	69db      	ldr	r3, [r3, #28]
    9638:	0a9b      	lsrs	r3, r3, #10
    963a:	f003 0301 	and.w	r3, r3, #1
    963e:	2b00      	cmp	r3, #0
    9640:	bf14      	ite	ne
    9642:	2301      	movne	r3, #1
    9644:	2300      	moveq	r3, #0
    9646:	b2db      	uxtb	r3, r3
}
    9648:	4618      	mov	r0, r3
    964a:	370c      	adds	r7, #12
    964c:	46bd      	mov	sp, r7
    964e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9652:	4770      	bx	lr

00009654 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    9654:	b480      	push	{r7}
    9656:	b083      	sub	sp, #12
    9658:	af00      	add	r7, sp, #0
    965a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9662:	61da      	str	r2, [r3, #28]
}
    9664:	bf00      	nop
    9666:	370c      	adds	r7, #12
    9668:	46bd      	mov	sp, r7
    966a:	f85d 7b04 	ldr.w	r7, [sp], #4
    966e:	4770      	bx	lr

00009670 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    9670:	b480      	push	{r7}
    9672:	b083      	sub	sp, #12
    9674:	af00      	add	r7, sp, #0
    9676:	6078      	str	r0, [r7, #4]
    9678:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    967a:	687b      	ldr	r3, [r7, #4]
    967c:	683a      	ldr	r2, [r7, #0]
    967e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9680:	bf00      	nop
    9682:	370c      	adds	r7, #12
    9684:	46bd      	mov	sp, r7
    9686:	f85d 7b04 	ldr.w	r7, [sp], #4
    968a:	4770      	bx	lr

0000968c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    968c:	b480      	push	{r7}
    968e:	b083      	sub	sp, #12
    9690:	af00      	add	r7, sp, #0
    9692:	6078      	str	r0, [r7, #4]
    9694:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	683a      	ldr	r2, [r7, #0]
    969a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    969c:	bf00      	nop
    969e:	370c      	adds	r7, #12
    96a0:	46bd      	mov	sp, r7
    96a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a6:	4770      	bx	lr

000096a8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    96a8:	b480      	push	{r7}
    96aa:	b083      	sub	sp, #12
    96ac:	af00      	add	r7, sp, #0
    96ae:	6078      	str	r0, [r7, #4]
    96b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	683a      	ldr	r2, [r7, #0]
    96b6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    96b8:	bf00      	nop
    96ba:	370c      	adds	r7, #12
    96bc:	46bd      	mov	sp, r7
    96be:	f85d 7b04 	ldr.w	r7, [sp], #4
    96c2:	4770      	bx	lr

000096c4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    96c4:	b480      	push	{r7}
    96c6:	b083      	sub	sp, #12
    96c8:	af00      	add	r7, sp, #0
    96ca:	6078      	str	r0, [r7, #4]
    96cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    96ce:	687b      	ldr	r3, [r7, #4]
    96d0:	683a      	ldr	r2, [r7, #0]
    96d2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    96d4:	bf00      	nop
    96d6:	370c      	adds	r7, #12
    96d8:	46bd      	mov	sp, r7
    96da:	f85d 7b04 	ldr.w	r7, [sp], #4
    96de:	4770      	bx	lr

000096e0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    96e0:	b480      	push	{r7}
    96e2:	b085      	sub	sp, #20
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
    96e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    96ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    96f0:	68fb      	ldr	r3, [r7, #12]
    96f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    96f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    96f8:	683b      	ldr	r3, [r7, #0]
    96fa:	b2db      	uxtb	r3, r3
    96fc:	68fa      	ldr	r2, [r7, #12]
    96fe:	4313      	orrs	r3, r2
    9700:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	68fa      	ldr	r2, [r7, #12]
    9706:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9708:	bf00      	nop
    970a:	3714      	adds	r7, #20
    970c:	46bd      	mov	sp, r7
    970e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9712:	4770      	bx	lr

00009714 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9714:	b480      	push	{r7}
    9716:	b085      	sub	sp, #20
    9718:	af00      	add	r7, sp, #0
    971a:	6078      	str	r0, [r7, #4]
    971c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9722:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    9724:	68fb      	ldr	r3, [r7, #12]
    9726:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    972a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    972c:	683b      	ldr	r3, [r7, #0]
    972e:	041b      	lsls	r3, r3, #16
    9730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    9734:	68fa      	ldr	r2, [r7, #12]
    9736:	4313      	orrs	r3, r2
    9738:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    973a:	687b      	ldr	r3, [r7, #4]
    973c:	68fa      	ldr	r2, [r7, #12]
    973e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9740:	bf00      	nop
    9742:	3714      	adds	r7, #20
    9744:	46bd      	mov	sp, r7
    9746:	f85d 7b04 	ldr.w	r7, [sp], #4
    974a:	4770      	bx	lr

0000974c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    974c:	b480      	push	{r7}
    974e:	b083      	sub	sp, #12
    9750:	af00      	add	r7, sp, #0
    9752:	6078      	str	r0, [r7, #4]
    9754:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    9756:	687b      	ldr	r3, [r7, #4]
    9758:	683a      	ldr	r2, [r7, #0]
    975a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    975c:	bf00      	nop
    975e:	370c      	adds	r7, #12
    9760:	46bd      	mov	sp, r7
    9762:	f85d 7b04 	ldr.w	r7, [sp], #4
    9766:	4770      	bx	lr

00009768 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    9768:	b480      	push	{r7}
    976a:	b083      	sub	sp, #12
    976c:	af00      	add	r7, sp, #0
    976e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    9774:	4618      	mov	r0, r3
    9776:	370c      	adds	r7, #12
    9778:	46bd      	mov	sp, r7
    977a:	f85d 7b04 	ldr.w	r7, [sp], #4
    977e:	4770      	bx	lr

00009780 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    9780:	b480      	push	{r7}
    9782:	b085      	sub	sp, #20
    9784:	af00      	add	r7, sp, #0
    9786:	60f8      	str	r0, [r7, #12]
    9788:	60b9      	str	r1, [r7, #8]
    978a:	607a      	str	r2, [r7, #4]
	while (count--) {
    978c:	e007      	b.n	979e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    978e:	68fb      	ldr	r3, [r7, #12]
    9790:	1c5a      	adds	r2, r3, #1
    9792:	60fa      	str	r2, [r7, #12]
    9794:	68ba      	ldr	r2, [r7, #8]
    9796:	1c51      	adds	r1, r2, #1
    9798:	60b9      	str	r1, [r7, #8]
    979a:	7812      	ldrb	r2, [r2, #0]
    979c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    979e:	687b      	ldr	r3, [r7, #4]
    97a0:	1e5a      	subs	r2, r3, #1
    97a2:	607a      	str	r2, [r7, #4]
    97a4:	2b00      	cmp	r3, #0
    97a6:	d1f2      	bne.n	978e <_qspi_memcpy+0xe>
	}
}
    97a8:	bf00      	nop
    97aa:	3714      	adds	r7, #20
    97ac:	46bd      	mov	sp, r7
    97ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    97b2:	4770      	bx	lr

000097b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    97b4:	b580      	push	{r7, lr}
    97b6:	b082      	sub	sp, #8
    97b8:	af00      	add	r7, sp, #0
    97ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    97bc:	4903      	ldr	r1, [pc, #12]	; (97cc <_qspi_end_transfer+0x18>)
    97be:	6878      	ldr	r0, [r7, #4]
    97c0:	4b03      	ldr	r3, [pc, #12]	; (97d0 <_qspi_end_transfer+0x1c>)
    97c2:	4798      	blx	r3
}
    97c4:	bf00      	nop
    97c6:	3708      	adds	r7, #8
    97c8:	46bd      	mov	sp, r7
    97ca:	bd80      	pop	{r7, pc}
    97cc:	01000002 	.word	0x01000002
    97d0:	00009671 	.word	0x00009671

000097d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    97d4:	b580      	push	{r7, lr}
    97d6:	b082      	sub	sp, #8
    97d8:	af00      	add	r7, sp, #0
    97da:	6078      	str	r0, [r7, #4]
    97dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	2b00      	cmp	r3, #0
    97e2:	d004      	beq.n	97ee <_qspi_sync_init+0x1a>
    97e4:	683b      	ldr	r3, [r7, #0]
    97e6:	2b00      	cmp	r3, #0
    97e8:	d001      	beq.n	97ee <_qspi_sync_init+0x1a>
    97ea:	2301      	movs	r3, #1
    97ec:	e000      	b.n	97f0 <_qspi_sync_init+0x1c>
    97ee:	2300      	movs	r3, #0
    97f0:	f003 0301 	and.w	r3, r3, #1
    97f4:	b2db      	uxtb	r3, r3
    97f6:	2240      	movs	r2, #64	; 0x40
    97f8:	490c      	ldr	r1, [pc, #48]	; (982c <_qspi_sync_init+0x58>)
    97fa:	4618      	mov	r0, r3
    97fc:	4b0c      	ldr	r3, [pc, #48]	; (9830 <_qspi_sync_init+0x5c>)
    97fe:	4798      	blx	r3
	dev->prvt = hw;
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	683a      	ldr	r2, [r7, #0]
    9804:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    9806:	687b      	ldr	r3, [r7, #4]
    9808:	681b      	ldr	r3, [r3, #0]
    980a:	2101      	movs	r1, #1
    980c:	4618      	mov	r0, r3
    980e:	4b09      	ldr	r3, [pc, #36]	; (9834 <_qspi_sync_init+0x60>)
    9810:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    9812:	4909      	ldr	r1, [pc, #36]	; (9838 <_qspi_sync_init+0x64>)
    9814:	6838      	ldr	r0, [r7, #0]
    9816:	4b09      	ldr	r3, [pc, #36]	; (983c <_qspi_sync_init+0x68>)
    9818:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    981a:	4909      	ldr	r1, [pc, #36]	; (9840 <_qspi_sync_init+0x6c>)
    981c:	6838      	ldr	r0, [r7, #0]
    981e:	4b09      	ldr	r3, [pc, #36]	; (9844 <_qspi_sync_init+0x70>)
    9820:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    9822:	2300      	movs	r3, #0
}
    9824:	4618      	mov	r0, r3
    9826:	3708      	adds	r7, #8
    9828:	46bd      	mov	sp, r7
    982a:	bd80      	pop	{r7, pc}
    982c:	00012b4c 	.word	0x00012b4c
    9830:	00007261 	.word	0x00007261
    9834:	00009671 	.word	0x00009671
    9838:	06000011 	.word	0x06000011
    983c:	0000968d 	.word	0x0000968d
    9840:	00241300 	.word	0x00241300
    9844:	000096a9 	.word	0x000096a9

00009848 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    9848:	b580      	push	{r7, lr}
    984a:	b082      	sub	sp, #8
    984c:	af00      	add	r7, sp, #0
    984e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	681b      	ldr	r3, [r3, #0]
    9854:	2102      	movs	r1, #2
    9856:	4618      	mov	r0, r3
    9858:	4b03      	ldr	r3, [pc, #12]	; (9868 <_qspi_sync_enable+0x20>)
    985a:	4798      	blx	r3
	return ERR_NONE;
    985c:	2300      	movs	r3, #0
}
    985e:	4618      	mov	r0, r3
    9860:	3708      	adds	r7, #8
    9862:	46bd      	mov	sp, r7
    9864:	bd80      	pop	{r7, pc}
    9866:	bf00      	nop
    9868:	00009671 	.word	0x00009671

0000986c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    986c:	b580      	push	{r7, lr}
    986e:	b082      	sub	sp, #8
    9870:	af00      	add	r7, sp, #0
    9872:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    9874:	687b      	ldr	r3, [r7, #4]
    9876:	681b      	ldr	r3, [r3, #0]
    9878:	2100      	movs	r1, #0
    987a:	4618      	mov	r0, r3
    987c:	4b03      	ldr	r3, [pc, #12]	; (988c <_qspi_sync_disable+0x20>)
    987e:	4798      	blx	r3
	return ERR_NONE;
    9880:	2300      	movs	r3, #0
}
    9882:	4618      	mov	r0, r3
    9884:	3708      	adds	r7, #8
    9886:	46bd      	mov	sp, r7
    9888:	bd80      	pop	{r7, pc}
    988a:	bf00      	nop
    988c:	00009671 	.word	0x00009671

00009890 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9890:	b580      	push	{r7, lr}
    9892:	b084      	sub	sp, #16
    9894:	af00      	add	r7, sp, #0
    9896:	6078      	str	r0, [r7, #4]
    9898:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	681b      	ldr	r3, [r3, #0]
    989e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    98a0:	683b      	ldr	r3, [r7, #0]
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	f003 0320 	and.w	r3, r3, #32
    98a8:	b2db      	uxtb	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	d005      	beq.n	98ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    98ae:	683b      	ldr	r3, [r7, #0]
    98b0:	689b      	ldr	r3, [r3, #8]
    98b2:	4619      	mov	r1, r3
    98b4:	68f8      	ldr	r0, [r7, #12]
    98b6:	4b13      	ldr	r3, [pc, #76]	; (9904 <_qspi_sync_command_set_ifr+0x74>)
    98b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    98ba:	683b      	ldr	r3, [r7, #0]
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	f003 0310 	and.w	r3, r3, #16
    98c2:	b2db      	uxtb	r3, r3
    98c4:	2b00      	cmp	r3, #0
    98c6:	d005      	beq.n	98d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    98c8:	683b      	ldr	r3, [r7, #0]
    98ca:	791b      	ldrb	r3, [r3, #4]
    98cc:	4619      	mov	r1, r3
    98ce:	68f8      	ldr	r0, [r7, #12]
    98d0:	4b0d      	ldr	r3, [pc, #52]	; (9908 <_qspi_sync_command_set_ifr+0x78>)
    98d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    98d4:	683b      	ldr	r3, [r7, #0]
    98d6:	781b      	ldrb	r3, [r3, #0]
    98d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98dc:	b2db      	uxtb	r3, r3
    98de:	2b00      	cmp	r3, #0
    98e0:	d005      	beq.n	98ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    98e2:	683b      	ldr	r3, [r7, #0]
    98e4:	795b      	ldrb	r3, [r3, #5]
    98e6:	4619      	mov	r1, r3
    98e8:	68f8      	ldr	r0, [r7, #12]
    98ea:	4b08      	ldr	r3, [pc, #32]	; (990c <_qspi_sync_command_set_ifr+0x7c>)
    98ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    98ee:	683b      	ldr	r3, [r7, #0]
    98f0:	681b      	ldr	r3, [r3, #0]
    98f2:	4619      	mov	r1, r3
    98f4:	68f8      	ldr	r0, [r7, #12]
    98f6:	4b06      	ldr	r3, [pc, #24]	; (9910 <_qspi_sync_command_set_ifr+0x80>)
    98f8:	4798      	blx	r3
}
    98fa:	bf00      	nop
    98fc:	3710      	adds	r7, #16
    98fe:	46bd      	mov	sp, r7
    9900:	bd80      	pop	{r7, pc}
    9902:	bf00      	nop
    9904:	000096c5 	.word	0x000096c5
    9908:	000096e1 	.word	0x000096e1
    990c:	00009715 	.word	0x00009715
    9910:	0000974d 	.word	0x0000974d

00009914 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9914:	b580      	push	{r7, lr}
    9916:	b084      	sub	sp, #16
    9918:	af00      	add	r7, sp, #0
    991a:	6078      	str	r0, [r7, #4]
    991c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    9924:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9928:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    992a:	683b      	ldr	r3, [r7, #0]
    992c:	781b      	ldrb	r3, [r3, #0]
    992e:	f003 0320 	and.w	r3, r3, #32
    9932:	b2db      	uxtb	r3, r3
    9934:	2b00      	cmp	r3, #0
    9936:	d004      	beq.n	9942 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    9938:	683b      	ldr	r3, [r7, #0]
    993a:	689b      	ldr	r3, [r3, #8]
    993c:	68fa      	ldr	r2, [r7, #12]
    993e:	4413      	add	r3, r2
    9940:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    9942:	68b8      	ldr	r0, [r7, #8]
    9944:	4b18      	ldr	r3, [pc, #96]	; (99a8 <_qspi_sync_run_transfer+0x94>)
    9946:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    9948:	683b      	ldr	r3, [r7, #0]
    994a:	691b      	ldr	r3, [r3, #16]
    994c:	2b00      	cmp	r3, #0
    994e:	d103      	bne.n	9958 <_qspi_sync_run_transfer+0x44>
    9950:	683b      	ldr	r3, [r7, #0]
    9952:	695b      	ldr	r3, [r3, #20]
    9954:	2b00      	cmp	r3, #0
    9956:	d001      	beq.n	995c <_qspi_sync_run_transfer+0x48>
    9958:	2301      	movs	r3, #1
    995a:	e000      	b.n	995e <_qspi_sync_run_transfer+0x4a>
    995c:	2300      	movs	r3, #0
    995e:	f003 0301 	and.w	r3, r3, #1
    9962:	b2db      	uxtb	r3, r3
    9964:	2282      	movs	r2, #130	; 0x82
    9966:	4911      	ldr	r1, [pc, #68]	; (99ac <_qspi_sync_run_transfer+0x98>)
    9968:	4618      	mov	r0, r3
    996a:	4b11      	ldr	r3, [pc, #68]	; (99b0 <_qspi_sync_run_transfer+0x9c>)
    996c:	4798      	blx	r3

	if (cmd->tx_buf) {
    996e:	683b      	ldr	r3, [r7, #0]
    9970:	691b      	ldr	r3, [r3, #16]
    9972:	2b00      	cmp	r3, #0
    9974:	d008      	beq.n	9988 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    9976:	683b      	ldr	r3, [r7, #0]
    9978:	6919      	ldr	r1, [r3, #16]
    997a:	683b      	ldr	r3, [r7, #0]
    997c:	68db      	ldr	r3, [r3, #12]
    997e:	461a      	mov	r2, r3
    9980:	68f8      	ldr	r0, [r7, #12]
    9982:	4b0c      	ldr	r3, [pc, #48]	; (99b4 <_qspi_sync_run_transfer+0xa0>)
    9984:	4798      	blx	r3
    9986:	e007      	b.n	9998 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    9988:	683b      	ldr	r3, [r7, #0]
    998a:	6958      	ldr	r0, [r3, #20]
    998c:	683b      	ldr	r3, [r7, #0]
    998e:	68db      	ldr	r3, [r3, #12]
    9990:	461a      	mov	r2, r3
    9992:	68f9      	ldr	r1, [r7, #12]
    9994:	4b07      	ldr	r3, [pc, #28]	; (99b4 <_qspi_sync_run_transfer+0xa0>)
    9996:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    9998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    999c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    99a0:	bf00      	nop
    99a2:	3710      	adds	r7, #16
    99a4:	46bd      	mov	sp, r7
    99a6:	bd80      	pop	{r7, pc}
    99a8:	00009769 	.word	0x00009769
    99ac:	00012b4c 	.word	0x00012b4c
    99b0:	00007261 	.word	0x00007261
    99b4:	00009781 	.word	0x00009781

000099b8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    99b8:	b580      	push	{r7, lr}
    99ba:	b082      	sub	sp, #8
    99bc:	af00      	add	r7, sp, #0
    99be:	6078      	str	r0, [r7, #4]
    99c0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    99c2:	6839      	ldr	r1, [r7, #0]
    99c4:	6878      	ldr	r0, [r7, #4]
    99c6:	4b14      	ldr	r3, [pc, #80]	; (9a18 <_qspi_sync_serial_run_command+0x60>)
    99c8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    99ca:	683b      	ldr	r3, [r7, #0]
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    99d2:	b2db      	uxtb	r3, r3
    99d4:	2b00      	cmp	r3, #0
    99d6:	d003      	beq.n	99e0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    99d8:	6839      	ldr	r1, [r7, #0]
    99da:	6878      	ldr	r0, [r7, #4]
    99dc:	4b0f      	ldr	r3, [pc, #60]	; (9a1c <_qspi_sync_serial_run_command+0x64>)
    99de:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	681b      	ldr	r3, [r3, #0]
    99e4:	4618      	mov	r0, r3
    99e6:	4b0e      	ldr	r3, [pc, #56]	; (9a20 <_qspi_sync_serial_run_command+0x68>)
    99e8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    99ea:	bf00      	nop
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	681b      	ldr	r3, [r3, #0]
    99f0:	4618      	mov	r0, r3
    99f2:	4b0c      	ldr	r3, [pc, #48]	; (9a24 <_qspi_sync_serial_run_command+0x6c>)
    99f4:	4798      	blx	r3
    99f6:	4603      	mov	r3, r0
    99f8:	f083 0301 	eor.w	r3, r3, #1
    99fc:	b2db      	uxtb	r3, r3
    99fe:	2b00      	cmp	r3, #0
    9a00:	d1f4      	bne.n	99ec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    9a02:	687b      	ldr	r3, [r7, #4]
    9a04:	681b      	ldr	r3, [r3, #0]
    9a06:	4618      	mov	r0, r3
    9a08:	4b07      	ldr	r3, [pc, #28]	; (9a28 <_qspi_sync_serial_run_command+0x70>)
    9a0a:	4798      	blx	r3
	return ERR_NONE;
    9a0c:	2300      	movs	r3, #0
}
    9a0e:	4618      	mov	r0, r3
    9a10:	3708      	adds	r7, #8
    9a12:	46bd      	mov	sp, r7
    9a14:	bd80      	pop	{r7, pc}
    9a16:	bf00      	nop
    9a18:	00009891 	.word	0x00009891
    9a1c:	00009915 	.word	0x00009915
    9a20:	000097b5 	.word	0x000097b5
    9a24:	0000962d 	.word	0x0000962d
    9a28:	00009655 	.word	0x00009655

00009a2c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    9a2c:	b480      	push	{r7}
    9a2e:	b083      	sub	sp, #12
    9a30:	af00      	add	r7, sp, #0
    9a32:	6078      	str	r0, [r7, #4]
    9a34:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9a36:	bf00      	nop
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	691a      	ldr	r2, [r3, #16]
    9a3c:	683b      	ldr	r3, [r7, #0]
    9a3e:	4013      	ands	r3, r2
    9a40:	2b00      	cmp	r3, #0
    9a42:	d1f9      	bne.n	9a38 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    9a44:	bf00      	nop
    9a46:	370c      	adds	r7, #12
    9a48:	46bd      	mov	sp, r7
    9a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a4e:	4770      	bx	lr

00009a50 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    9a50:	b480      	push	{r7}
    9a52:	b083      	sub	sp, #12
    9a54:	af00      	add	r7, sp, #0
    9a56:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    9a58:	687b      	ldr	r3, [r7, #4]
    9a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a5e:	819a      	strh	r2, [r3, #12]
}
    9a60:	bf00      	nop
    9a62:	370c      	adds	r7, #12
    9a64:	46bd      	mov	sp, r7
    9a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a6a:	4770      	bx	lr

00009a6c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    9a6c:	b480      	push	{r7}
    9a6e:	b083      	sub	sp, #12
    9a70:	af00      	add	r7, sp, #0
    9a72:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9a7a:	819a      	strh	r2, [r3, #12]
}
    9a7c:	bf00      	nop
    9a7e:	370c      	adds	r7, #12
    9a80:	46bd      	mov	sp, r7
    9a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a86:	4770      	bx	lr

00009a88 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    9a88:	b480      	push	{r7}
    9a8a:	b083      	sub	sp, #12
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	899b      	ldrh	r3, [r3, #12]
    9a94:	b29b      	uxth	r3, r3
}
    9a96:	4618      	mov	r0, r3
    9a98:	370c      	adds	r7, #12
    9a9a:	46bd      	mov	sp, r7
    9a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa0:	4770      	bx	lr

00009aa2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    9aa2:	b480      	push	{r7}
    9aa4:	b083      	sub	sp, #12
    9aa6:	af00      	add	r7, sp, #0
    9aa8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    9aaa:	687b      	ldr	r3, [r7, #4]
    9aac:	895b      	ldrh	r3, [r3, #10]
    9aae:	b29b      	uxth	r3, r3
}
    9ab0:	4618      	mov	r0, r3
    9ab2:	370c      	adds	r7, #12
    9ab4:	46bd      	mov	sp, r7
    9ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aba:	4770      	bx	lr

00009abc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    9abc:	b580      	push	{r7, lr}
    9abe:	b082      	sub	sp, #8
    9ac0:	af00      	add	r7, sp, #0
    9ac2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    9ac4:	687b      	ldr	r3, [r7, #4]
    9ac6:	881b      	ldrh	r3, [r3, #0]
    9ac8:	b29b      	uxth	r3, r3
    9aca:	f043 0301 	orr.w	r3, r3, #1
    9ace:	b29a      	uxth	r2, r3
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    9ad4:	2101      	movs	r1, #1
    9ad6:	6878      	ldr	r0, [r7, #4]
    9ad8:	4b02      	ldr	r3, [pc, #8]	; (9ae4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    9ada:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9adc:	bf00      	nop
    9ade:	3708      	adds	r7, #8
    9ae0:	46bd      	mov	sp, r7
    9ae2:	bd80      	pop	{r7, pc}
    9ae4:	00009a2d 	.word	0x00009a2d

00009ae8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	b084      	sub	sp, #16
    9aec:	af00      	add	r7, sp, #0
    9aee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9af0:	f248 0103 	movw	r1, #32771	; 0x8003
    9af4:	6878      	ldr	r0, [r7, #4]
    9af6:	4b0a      	ldr	r3, [pc, #40]	; (9b20 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    9af8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	881b      	ldrh	r3, [r3, #0]
    9afe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    9b00:	89fb      	ldrh	r3, [r7, #14]
    9b02:	085b      	lsrs	r3, r3, #1
    9b04:	b29b      	uxth	r3, r3
    9b06:	f003 0301 	and.w	r3, r3, #1
    9b0a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    9b0c:	89fb      	ldrh	r3, [r7, #14]
    9b0e:	2b00      	cmp	r3, #0
    9b10:	bf14      	ite	ne
    9b12:	2301      	movne	r3, #1
    9b14:	2300      	moveq	r3, #0
    9b16:	b2db      	uxtb	r3, r3
}
    9b18:	4618      	mov	r0, r3
    9b1a:	3710      	adds	r7, #16
    9b1c:	46bd      	mov	sp, r7
    9b1e:	bd80      	pop	{r7, pc}
    9b20:	00009a2d 	.word	0x00009a2d

00009b24 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9b24:	b580      	push	{r7, lr}
    9b26:	b082      	sub	sp, #8
    9b28:	af00      	add	r7, sp, #0
    9b2a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	881b      	ldrh	r3, [r3, #0]
    9b30:	b29b      	uxth	r3, r3
    9b32:	f023 0302 	bic.w	r3, r3, #2
    9b36:	b29a      	uxth	r2, r3
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9b3c:	f248 0103 	movw	r1, #32771	; 0x8003
    9b40:	6878      	ldr	r0, [r7, #4]
    9b42:	4b03      	ldr	r3, [pc, #12]	; (9b50 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    9b44:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9b46:	bf00      	nop
    9b48:	3708      	adds	r7, #8
    9b4a:	46bd      	mov	sp, r7
    9b4c:	bd80      	pop	{r7, pc}
    9b4e:	bf00      	nop
    9b50:	00009a2d 	.word	0x00009a2d

00009b54 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    9b54:	b580      	push	{r7, lr}
    9b56:	b082      	sub	sp, #8
    9b58:	af00      	add	r7, sp, #0
    9b5a:	6078      	str	r0, [r7, #4]
    9b5c:	460b      	mov	r3, r1
    9b5e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    9b60:	687b      	ldr	r3, [r7, #4]
    9b62:	887a      	ldrh	r2, [r7, #2]
    9b64:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9b66:	f248 0103 	movw	r1, #32771	; 0x8003
    9b6a:	6878      	ldr	r0, [r7, #4]
    9b6c:	4b02      	ldr	r3, [pc, #8]	; (9b78 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    9b6e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9b70:	bf00      	nop
    9b72:	3708      	adds	r7, #8
    9b74:	46bd      	mov	sp, r7
    9b76:	bd80      	pop	{r7, pc}
    9b78:	00009a2d 	.word	0x00009a2d

00009b7c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    9b7c:	b480      	push	{r7}
    9b7e:	b083      	sub	sp, #12
    9b80:	af00      	add	r7, sp, #0
    9b82:	6078      	str	r0, [r7, #4]
    9b84:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    9b86:	687b      	ldr	r3, [r7, #4]
    9b88:	683a      	ldr	r2, [r7, #0]
    9b8a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    9b8c:	bf00      	nop
    9b8e:	370c      	adds	r7, #12
    9b90:	46bd      	mov	sp, r7
    9b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b96:	4770      	bx	lr

00009b98 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b082      	sub	sp, #8
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    9ba0:	687b      	ldr	r3, [r7, #4]
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d005      	beq.n	9bb2 <_calendar_init+0x1a>
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	681b      	ldr	r3, [r3, #0]
    9baa:	2b00      	cmp	r3, #0
    9bac:	d001      	beq.n	9bb2 <_calendar_init+0x1a>
    9bae:	2301      	movs	r3, #1
    9bb0:	e000      	b.n	9bb4 <_calendar_init+0x1c>
    9bb2:	2300      	movs	r3, #0
    9bb4:	f003 0301 	and.w	r3, r3, #1
    9bb8:	b2db      	uxtb	r3, r3
    9bba:	222f      	movs	r2, #47	; 0x2f
    9bbc:	491b      	ldr	r1, [pc, #108]	; (9c2c <_calendar_init+0x94>)
    9bbe:	4618      	mov	r0, r3
    9bc0:	4b1b      	ldr	r3, [pc, #108]	; (9c30 <_calendar_init+0x98>)
    9bc2:	4798      	blx	r3

	_rtc_dev = dev;
    9bc4:	4a1b      	ldr	r2, [pc, #108]	; (9c34 <_calendar_init+0x9c>)
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	681b      	ldr	r3, [r3, #0]
    9bce:	4618      	mov	r0, r3
    9bd0:	4b19      	ldr	r3, [pc, #100]	; (9c38 <_calendar_init+0xa0>)
    9bd2:	4798      	blx	r3
    9bd4:	4603      	mov	r3, r0
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d00a      	beq.n	9bf0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	681b      	ldr	r3, [r3, #0]
    9bde:	4618      	mov	r0, r3
    9be0:	4b16      	ldr	r3, [pc, #88]	; (9c3c <_calendar_init+0xa4>)
    9be2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	681b      	ldr	r3, [r3, #0]
    9be8:	2102      	movs	r1, #2
    9bea:	4618      	mov	r0, r3
    9bec:	4b14      	ldr	r3, [pc, #80]	; (9c40 <_calendar_init+0xa8>)
    9bee:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	681b      	ldr	r3, [r3, #0]
    9bf4:	4618      	mov	r0, r3
    9bf6:	4b13      	ldr	r3, [pc, #76]	; (9c44 <_calendar_init+0xac>)
    9bf8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    9bfa:	687b      	ldr	r3, [r7, #4]
    9bfc:	681b      	ldr	r3, [r3, #0]
    9bfe:	2101      	movs	r1, #1
    9c00:	4618      	mov	r0, r3
    9c02:	4b0f      	ldr	r3, [pc, #60]	; (9c40 <_calendar_init+0xa8>)
    9c04:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	681b      	ldr	r3, [r3, #0]
    9c0a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    9c0e:	4618      	mov	r0, r3
    9c10:	4b0d      	ldr	r3, [pc, #52]	; (9c48 <_calendar_init+0xb0>)
    9c12:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    9c18:	2100      	movs	r1, #0
    9c1a:	4618      	mov	r0, r3
    9c1c:	4b0b      	ldr	r3, [pc, #44]	; (9c4c <_calendar_init+0xb4>)
    9c1e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    9c20:	2300      	movs	r3, #0
}
    9c22:	4618      	mov	r0, r3
    9c24:	3708      	adds	r7, #8
    9c26:	46bd      	mov	sp, r7
    9c28:	bd80      	pop	{r7, pc}
    9c2a:	bf00      	nop
    9c2c:	00012b64 	.word	0x00012b64
    9c30:	00007261 	.word	0x00007261
    9c34:	20001bac 	.word	0x20001bac
    9c38:	00009ae9 	.word	0x00009ae9
    9c3c:	00009b25 	.word	0x00009b25
    9c40:	00009a2d 	.word	0x00009a2d
    9c44:	00009abd 	.word	0x00009abd
    9c48:	00009b55 	.word	0x00009b55
    9c4c:	00009b7d 	.word	0x00009b7d

00009c50 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    9c50:	b580      	push	{r7, lr}
    9c52:	b084      	sub	sp, #16
    9c54:	af00      	add	r7, sp, #0
    9c56:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    9c58:	687b      	ldr	r3, [r7, #4]
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	4618      	mov	r0, r3
    9c5e:	4b19      	ldr	r3, [pc, #100]	; (9cc4 <_rtc_interrupt_handler+0x74>)
    9c60:	4798      	blx	r3
    9c62:	4603      	mov	r3, r0
    9c64:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	681b      	ldr	r3, [r3, #0]
    9c6a:	4618      	mov	r0, r3
    9c6c:	4b16      	ldr	r3, [pc, #88]	; (9cc8 <_rtc_interrupt_handler+0x78>)
    9c6e:	4798      	blx	r3
    9c70:	4603      	mov	r3, r0
    9c72:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    9c74:	89fa      	ldrh	r2, [r7, #14]
    9c76:	89bb      	ldrh	r3, [r7, #12]
    9c78:	4013      	ands	r3, r2
    9c7a:	b29b      	uxth	r3, r3
    9c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9c80:	2b00      	cmp	r3, #0
    9c82:	d009      	beq.n	9c98 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    9c84:	687b      	ldr	r3, [r7, #4]
    9c86:	685b      	ldr	r3, [r3, #4]
    9c88:	6878      	ldr	r0, [r7, #4]
    9c8a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    9c8c:	687b      	ldr	r3, [r7, #4]
    9c8e:	681b      	ldr	r3, [r3, #0]
    9c90:	4618      	mov	r0, r3
    9c92:	4b0e      	ldr	r3, [pc, #56]	; (9ccc <_rtc_interrupt_handler+0x7c>)
    9c94:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    9c96:	e010      	b.n	9cba <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    9c98:	89fa      	ldrh	r2, [r7, #14]
    9c9a:	89bb      	ldrh	r3, [r7, #12]
    9c9c:	4013      	ands	r3, r2
    9c9e:	b29b      	uxth	r3, r3
    9ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	d008      	beq.n	9cba <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	689b      	ldr	r3, [r3, #8]
    9cac:	6878      	ldr	r0, [r7, #4]
    9cae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	4618      	mov	r0, r3
    9cb6:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <_rtc_interrupt_handler+0x80>)
    9cb8:	4798      	blx	r3
}
    9cba:	bf00      	nop
    9cbc:	3710      	adds	r7, #16
    9cbe:	46bd      	mov	sp, r7
    9cc0:	bd80      	pop	{r7, pc}
    9cc2:	bf00      	nop
    9cc4:	00009a89 	.word	0x00009a89
    9cc8:	00009aa3 	.word	0x00009aa3
    9ccc:	00009a51 	.word	0x00009a51
    9cd0:	00009a6d 	.word	0x00009a6d

00009cd4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    9cd4:	b580      	push	{r7, lr}
    9cd6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    9cd8:	4b03      	ldr	r3, [pc, #12]	; (9ce8 <RTC_Handler+0x14>)
    9cda:	681b      	ldr	r3, [r3, #0]
    9cdc:	4618      	mov	r0, r3
    9cde:	4b03      	ldr	r3, [pc, #12]	; (9cec <RTC_Handler+0x18>)
    9ce0:	4798      	blx	r3
}
    9ce2:	bf00      	nop
    9ce4:	bd80      	pop	{r7, pc}
    9ce6:	bf00      	nop
    9ce8:	20001bac 	.word	0x20001bac
    9cec:	00009c51 	.word	0x00009c51

00009cf0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9cf0:	b480      	push	{r7}
    9cf2:	b083      	sub	sp, #12
    9cf4:	af00      	add	r7, sp, #0
    9cf6:	6078      	str	r0, [r7, #4]
    9cf8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9cfa:	bf00      	nop
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	69da      	ldr	r2, [r3, #28]
    9d00:	683b      	ldr	r3, [r7, #0]
    9d02:	4013      	ands	r3, r2
    9d04:	2b00      	cmp	r3, #0
    9d06:	d1f9      	bne.n	9cfc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    9d08:	bf00      	nop
    9d0a:	370c      	adds	r7, #12
    9d0c:	46bd      	mov	sp, r7
    9d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d12:	4770      	bx	lr

00009d14 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9d14:	b480      	push	{r7}
    9d16:	b083      	sub	sp, #12
    9d18:	af00      	add	r7, sp, #0
    9d1a:	6078      	str	r0, [r7, #4]
    9d1c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	69da      	ldr	r2, [r3, #28]
    9d22:	683b      	ldr	r3, [r7, #0]
    9d24:	4013      	ands	r3, r2
    9d26:	2b00      	cmp	r3, #0
    9d28:	bf14      	ite	ne
    9d2a:	2301      	movne	r3, #1
    9d2c:	2300      	moveq	r3, #0
    9d2e:	b2db      	uxtb	r3, r3
}
    9d30:	4618      	mov	r0, r3
    9d32:	370c      	adds	r7, #12
    9d34:	46bd      	mov	sp, r7
    9d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d3a:	4770      	bx	lr

00009d3c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9d3c:	b480      	push	{r7}
    9d3e:	b083      	sub	sp, #12
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
    9d44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9d46:	bf00      	nop
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	69da      	ldr	r2, [r3, #28]
    9d4c:	683b      	ldr	r3, [r7, #0]
    9d4e:	4013      	ands	r3, r2
    9d50:	2b00      	cmp	r3, #0
    9d52:	d1f9      	bne.n	9d48 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    9d54:	bf00      	nop
    9d56:	370c      	adds	r7, #12
    9d58:	46bd      	mov	sp, r7
    9d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5e:	4770      	bx	lr

00009d60 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9d60:	b480      	push	{r7}
    9d62:	b083      	sub	sp, #12
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
    9d68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	69da      	ldr	r2, [r3, #28]
    9d6e:	683b      	ldr	r3, [r7, #0]
    9d70:	4013      	ands	r3, r2
    9d72:	2b00      	cmp	r3, #0
    9d74:	bf14      	ite	ne
    9d76:	2301      	movne	r3, #1
    9d78:	2300      	moveq	r3, #0
    9d7a:	b2db      	uxtb	r3, r3
}
    9d7c:	4618      	mov	r0, r3
    9d7e:	370c      	adds	r7, #12
    9d80:	46bd      	mov	sp, r7
    9d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d86:	4770      	bx	lr

00009d88 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    9d88:	b480      	push	{r7}
    9d8a:	b083      	sub	sp, #12
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	2201      	movs	r2, #1
    9d94:	761a      	strb	r2, [r3, #24]
}
    9d96:	bf00      	nop
    9d98:	370c      	adds	r7, #12
    9d9a:	46bd      	mov	sp, r7
    9d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9da0:	4770      	bx	lr

00009da2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    9da2:	b480      	push	{r7}
    9da4:	b083      	sub	sp, #12
    9da6:	af00      	add	r7, sp, #0
    9da8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    9daa:	687b      	ldr	r3, [r7, #4]
    9dac:	2202      	movs	r2, #2
    9dae:	761a      	strb	r2, [r3, #24]
}
    9db0:	bf00      	nop
    9db2:	370c      	adds	r7, #12
    9db4:	46bd      	mov	sp, r7
    9db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dba:	4770      	bx	lr

00009dbc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    9dbc:	b480      	push	{r7}
    9dbe:	b083      	sub	sp, #12
    9dc0:	af00      	add	r7, sp, #0
    9dc2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	7e1b      	ldrb	r3, [r3, #24]
    9dc8:	b2db      	uxtb	r3, r3
}
    9dca:	4618      	mov	r0, r3
    9dcc:	370c      	adds	r7, #12
    9dce:	46bd      	mov	sp, r7
    9dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd4:	4770      	bx	lr

00009dd6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    9dd6:	b480      	push	{r7}
    9dd8:	b085      	sub	sp, #20
    9dda:	af00      	add	r7, sp, #0
    9ddc:	6078      	str	r0, [r7, #4]
    9dde:	460b      	mov	r3, r1
    9de0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	7e1b      	ldrb	r3, [r3, #24]
    9de6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9de8:	7bfa      	ldrb	r2, [r7, #15]
    9dea:	78fb      	ldrb	r3, [r7, #3]
    9dec:	4013      	ands	r3, r2
    9dee:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9df0:	7bfb      	ldrb	r3, [r7, #15]
}
    9df2:	4618      	mov	r0, r3
    9df4:	3714      	adds	r7, #20
    9df6:	46bd      	mov	sp, r7
    9df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dfc:	4770      	bx	lr

00009dfe <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    9dfe:	b480      	push	{r7}
    9e00:	b083      	sub	sp, #12
    9e02:	af00      	add	r7, sp, #0
    9e04:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	7e1b      	ldrb	r3, [r3, #24]
    9e0a:	b2db      	uxtb	r3, r3
}
    9e0c:	4618      	mov	r0, r3
    9e0e:	370c      	adds	r7, #12
    9e10:	46bd      	mov	sp, r7
    9e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e16:	4770      	bx	lr

00009e18 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    9e18:	b480      	push	{r7}
    9e1a:	b083      	sub	sp, #12
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	6078      	str	r0, [r7, #4]
    9e20:	460b      	mov	r3, r1
    9e22:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	78fa      	ldrb	r2, [r7, #3]
    9e28:	761a      	strb	r2, [r3, #24]
}
    9e2a:	bf00      	nop
    9e2c:	370c      	adds	r7, #12
    9e2e:	46bd      	mov	sp, r7
    9e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e34:	4770      	bx	lr
	...

00009e38 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	f043 0202 	orr.w	r2, r3, #2
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9e4c:	2103      	movs	r1, #3
    9e4e:	6878      	ldr	r0, [r7, #4]
    9e50:	4b02      	ldr	r3, [pc, #8]	; (9e5c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    9e52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9e54:	bf00      	nop
    9e56:	3708      	adds	r7, #8
    9e58:	46bd      	mov	sp, r7
    9e5a:	bd80      	pop	{r7, pc}
    9e5c:	00009cf1 	.word	0x00009cf1

00009e60 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	b082      	sub	sp, #8
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9e68:	687b      	ldr	r3, [r7, #4]
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	f023 0202 	bic.w	r2, r3, #2
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9e74:	2103      	movs	r1, #3
    9e76:	6878      	ldr	r0, [r7, #4]
    9e78:	4b02      	ldr	r3, [pc, #8]	; (9e84 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9e7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9e7c:	bf00      	nop
    9e7e:	3708      	adds	r7, #8
    9e80:	46bd      	mov	sp, r7
    9e82:	bd80      	pop	{r7, pc}
    9e84:	00009cf1 	.word	0x00009cf1

00009e88 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9e88:	b480      	push	{r7}
    9e8a:	b085      	sub	sp, #20
    9e8c:	af00      	add	r7, sp, #0
    9e8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    9e96:	68fb      	ldr	r3, [r7, #12]
    9e98:	0edb      	lsrs	r3, r3, #27
    9e9a:	f003 0301 	and.w	r3, r3, #1
    9e9e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9ea0:	68fb      	ldr	r3, [r7, #12]
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	bf14      	ite	ne
    9ea6:	2301      	movne	r3, #1
    9ea8:	2300      	moveq	r3, #0
    9eaa:	b2db      	uxtb	r3, r3
}
    9eac:	4618      	mov	r0, r3
    9eae:	3714      	adds	r7, #20
    9eb0:	46bd      	mov	sp, r7
    9eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eb6:	4770      	bx	lr

00009eb8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b084      	sub	sp, #16
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	6078      	str	r0, [r7, #4]
    9ec0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9ec2:	2103      	movs	r1, #3
    9ec4:	6878      	ldr	r0, [r7, #4]
    9ec6:	4b07      	ldr	r3, [pc, #28]	; (9ee4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9ec8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	681b      	ldr	r3, [r3, #0]
    9ece:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9ed0:	68fa      	ldr	r2, [r7, #12]
    9ed2:	683b      	ldr	r3, [r7, #0]
    9ed4:	4013      	ands	r3, r2
    9ed6:	60fb      	str	r3, [r7, #12]
	return tmp;
    9ed8:	68fb      	ldr	r3, [r7, #12]
}
    9eda:	4618      	mov	r0, r3
    9edc:	3710      	adds	r7, #16
    9ede:	46bd      	mov	sp, r7
    9ee0:	bd80      	pop	{r7, pc}
    9ee2:	bf00      	nop
    9ee4:	00009cf1 	.word	0x00009cf1

00009ee8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    9ee8:	b580      	push	{r7, lr}
    9eea:	b082      	sub	sp, #8
    9eec:	af00      	add	r7, sp, #0
    9eee:	6078      	str	r0, [r7, #4]
    9ef0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    9ef2:	687b      	ldr	r3, [r7, #4]
    9ef4:	683a      	ldr	r2, [r7, #0]
    9ef6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9ef8:	2103      	movs	r1, #3
    9efa:	6878      	ldr	r0, [r7, #4]
    9efc:	4b02      	ldr	r3, [pc, #8]	; (9f08 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    9efe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9f00:	bf00      	nop
    9f02:	3708      	adds	r7, #8
    9f04:	46bd      	mov	sp, r7
    9f06:	bd80      	pop	{r7, pc}
    9f08:	00009cf1 	.word	0x00009cf1

00009f0c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b084      	sub	sp, #16
    9f10:	af00      	add	r7, sp, #0
    9f12:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9f14:	2103      	movs	r1, #3
    9f16:	6878      	ldr	r0, [r7, #4]
    9f18:	4b09      	ldr	r3, [pc, #36]	; (9f40 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    9f1a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9f22:	68fb      	ldr	r3, [r7, #12]
    9f24:	085b      	lsrs	r3, r3, #1
    9f26:	f003 0301 	and.w	r3, r3, #1
    9f2a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9f2c:	68fb      	ldr	r3, [r7, #12]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	bf14      	ite	ne
    9f32:	2301      	movne	r3, #1
    9f34:	2300      	moveq	r3, #0
    9f36:	b2db      	uxtb	r3, r3
}
    9f38:	4618      	mov	r0, r3
    9f3a:	3710      	adds	r7, #16
    9f3c:	46bd      	mov	sp, r7
    9f3e:	bd80      	pop	{r7, pc}
    9f40:	00009d3d 	.word	0x00009d3d

00009f44 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9f44:	b580      	push	{r7, lr}
    9f46:	b082      	sub	sp, #8
    9f48:	af00      	add	r7, sp, #0
    9f4a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	f023 0202 	bic.w	r2, r3, #2
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9f58:	2103      	movs	r1, #3
    9f5a:	6878      	ldr	r0, [r7, #4]
    9f5c:	4b02      	ldr	r3, [pc, #8]	; (9f68 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    9f5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9f60:	bf00      	nop
    9f62:	3708      	adds	r7, #8
    9f64:	46bd      	mov	sp, r7
    9f66:	bd80      	pop	{r7, pc}
    9f68:	00009d3d 	.word	0x00009d3d

00009f6c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    9f6c:	b580      	push	{r7, lr}
    9f6e:	b084      	sub	sp, #16
    9f70:	af00      	add	r7, sp, #0
    9f72:	6078      	str	r0, [r7, #4]
    9f74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9f76:	2103      	movs	r1, #3
    9f78:	6878      	ldr	r0, [r7, #4]
    9f7a:	4b07      	ldr	r3, [pc, #28]	; (9f98 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    9f7c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9f84:	68fa      	ldr	r2, [r7, #12]
    9f86:	683b      	ldr	r3, [r7, #0]
    9f88:	4013      	ands	r3, r2
    9f8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    9f8c:	68fb      	ldr	r3, [r7, #12]
}
    9f8e:	4618      	mov	r0, r3
    9f90:	3710      	adds	r7, #16
    9f92:	46bd      	mov	sp, r7
    9f94:	bd80      	pop	{r7, pc}
    9f96:	bf00      	nop
    9f98:	00009d3d 	.word	0x00009d3d

00009f9c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    9f9c:	b580      	push	{r7, lr}
    9f9e:	b082      	sub	sp, #8
    9fa0:	af00      	add	r7, sp, #0
    9fa2:	6078      	str	r0, [r7, #4]
    9fa4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    9fa6:	687b      	ldr	r3, [r7, #4]
    9fa8:	683a      	ldr	r2, [r7, #0]
    9faa:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9fac:	2103      	movs	r1, #3
    9fae:	6878      	ldr	r0, [r7, #4]
    9fb0:	4b02      	ldr	r3, [pc, #8]	; (9fbc <hri_sercomspi_write_CTRLA_reg+0x20>)
    9fb2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9fb4:	bf00      	nop
    9fb6:	3708      	adds	r7, #8
    9fb8:	46bd      	mov	sp, r7
    9fba:	bd80      	pop	{r7, pc}
    9fbc:	00009d3d 	.word	0x00009d3d

00009fc0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    9fc0:	b580      	push	{r7, lr}
    9fc2:	b082      	sub	sp, #8
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	685b      	ldr	r3, [r3, #4]
    9fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    9fd0:	687b      	ldr	r3, [r7, #4]
    9fd2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9fd4:	2104      	movs	r1, #4
    9fd6:	6878      	ldr	r0, [r7, #4]
    9fd8:	4b02      	ldr	r3, [pc, #8]	; (9fe4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    9fda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9fdc:	bf00      	nop
    9fde:	3708      	adds	r7, #8
    9fe0:	46bd      	mov	sp, r7
    9fe2:	bd80      	pop	{r7, pc}
    9fe4:	00009cf1 	.word	0x00009cf1

00009fe8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    9fe8:	b580      	push	{r7, lr}
    9fea:	b082      	sub	sp, #8
    9fec:	af00      	add	r7, sp, #0
    9fee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    9ff0:	687b      	ldr	r3, [r7, #4]
    9ff2:	685b      	ldr	r3, [r3, #4]
    9ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9ffc:	2104      	movs	r1, #4
    9ffe:	6878      	ldr	r0, [r7, #4]
    a000:	4b02      	ldr	r3, [pc, #8]	; (a00c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    a002:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a004:	bf00      	nop
    a006:	3708      	adds	r7, #8
    a008:	46bd      	mov	sp, r7
    a00a:	bd80      	pop	{r7, pc}
    a00c:	00009cf1 	.word	0x00009cf1

0000a010 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    a010:	b580      	push	{r7, lr}
    a012:	b082      	sub	sp, #8
    a014:	af00      	add	r7, sp, #0
    a016:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	685b      	ldr	r3, [r3, #4]
    a01c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a024:	2104      	movs	r1, #4
    a026:	6878      	ldr	r0, [r7, #4]
    a028:	4b02      	ldr	r3, [pc, #8]	; (a034 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    a02a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a02c:	bf00      	nop
    a02e:	3708      	adds	r7, #8
    a030:	46bd      	mov	sp, r7
    a032:	bd80      	pop	{r7, pc}
    a034:	00009cf1 	.word	0x00009cf1

0000a038 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    a038:	b580      	push	{r7, lr}
    a03a:	b082      	sub	sp, #8
    a03c:	af00      	add	r7, sp, #0
    a03e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a040:	687b      	ldr	r3, [r7, #4]
    a042:	685b      	ldr	r3, [r3, #4]
    a044:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a04c:	2104      	movs	r1, #4
    a04e:	6878      	ldr	r0, [r7, #4]
    a050:	4b02      	ldr	r3, [pc, #8]	; (a05c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    a052:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a054:	bf00      	nop
    a056:	3708      	adds	r7, #8
    a058:	46bd      	mov	sp, r7
    a05a:	bd80      	pop	{r7, pc}
    a05c:	00009cf1 	.word	0x00009cf1

0000a060 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    a060:	b580      	push	{r7, lr}
    a062:	b082      	sub	sp, #8
    a064:	af00      	add	r7, sp, #0
    a066:	6078      	str	r0, [r7, #4]
    a068:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a06a:	687b      	ldr	r3, [r7, #4]
    a06c:	685a      	ldr	r2, [r3, #4]
    a06e:	683b      	ldr	r3, [r7, #0]
    a070:	041b      	lsls	r3, r3, #16
    a072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    a076:	431a      	orrs	r2, r3
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a07c:	2104      	movs	r1, #4
    a07e:	6878      	ldr	r0, [r7, #4]
    a080:	4b02      	ldr	r3, [pc, #8]	; (a08c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    a082:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a084:	bf00      	nop
    a086:	3708      	adds	r7, #8
    a088:	46bd      	mov	sp, r7
    a08a:	bd80      	pop	{r7, pc}
    a08c:	00009cf1 	.word	0x00009cf1

0000a090 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    a090:	b580      	push	{r7, lr}
    a092:	b082      	sub	sp, #8
    a094:	af00      	add	r7, sp, #0
    a096:	6078      	str	r0, [r7, #4]
    a098:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    a09a:	687b      	ldr	r3, [r7, #4]
    a09c:	683a      	ldr	r2, [r7, #0]
    a09e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a0a0:	2104      	movs	r1, #4
    a0a2:	6878      	ldr	r0, [r7, #4]
    a0a4:	4b02      	ldr	r3, [pc, #8]	; (a0b0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    a0a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a0a8:	bf00      	nop
    a0aa:	3708      	adds	r7, #8
    a0ac:	46bd      	mov	sp, r7
    a0ae:	bd80      	pop	{r7, pc}
    a0b0:	00009cf1 	.word	0x00009cf1

0000a0b4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b082      	sub	sp, #8
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
    a0bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	683a      	ldr	r2, [r7, #0]
    a0c2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    a0c4:	2117      	movs	r1, #23
    a0c6:	6878      	ldr	r0, [r7, #4]
    a0c8:	4b02      	ldr	r3, [pc, #8]	; (a0d4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    a0ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a0cc:	bf00      	nop
    a0ce:	3708      	adds	r7, #8
    a0d0:	46bd      	mov	sp, r7
    a0d2:	bd80      	pop	{r7, pc}
    a0d4:	00009d3d 	.word	0x00009d3d

0000a0d8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    a0d8:	b480      	push	{r7}
    a0da:	b083      	sub	sp, #12
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
    a0e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	683a      	ldr	r2, [r7, #0]
    a0e6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a0e8:	bf00      	nop
    a0ea:	370c      	adds	r7, #12
    a0ec:	46bd      	mov	sp, r7
    a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0f2:	4770      	bx	lr

0000a0f4 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    a0f4:	b480      	push	{r7}
    a0f6:	b083      	sub	sp, #12
    a0f8:	af00      	add	r7, sp, #0
    a0fa:	6078      	str	r0, [r7, #4]
    a0fc:	460b      	mov	r3, r1
    a0fe:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	78fa      	ldrb	r2, [r7, #3]
    a104:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a106:	bf00      	nop
    a108:	370c      	adds	r7, #12
    a10a:	46bd      	mov	sp, r7
    a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a110:	4770      	bx	lr
	...

0000a114 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    a114:	b580      	push	{r7, lr}
    a116:	b084      	sub	sp, #16
    a118:	af00      	add	r7, sp, #0
    a11a:	6078      	str	r0, [r7, #4]
    a11c:	460b      	mov	r3, r1
    a11e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a124:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    a126:	68fb      	ldr	r3, [r7, #12]
    a128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    a12c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    a12e:	78fb      	ldrb	r3, [r7, #3]
    a130:	039b      	lsls	r3, r3, #14
    a132:	461a      	mov	r2, r3
    a134:	68fb      	ldr	r3, [r7, #12]
    a136:	4313      	orrs	r3, r2
    a138:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	68fa      	ldr	r2, [r7, #12]
    a13e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a140:	2104      	movs	r1, #4
    a142:	6878      	ldr	r0, [r7, #4]
    a144:	4b02      	ldr	r3, [pc, #8]	; (a150 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    a146:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a148:	bf00      	nop
    a14a:	3710      	adds	r7, #16
    a14c:	46bd      	mov	sp, r7
    a14e:	bd80      	pop	{r7, pc}
    a150:	00009cf1 	.word	0x00009cf1

0000a154 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    a154:	b580      	push	{r7, lr}
    a156:	b082      	sub	sp, #8
    a158:	af00      	add	r7, sp, #0
    a15a:	6078      	str	r0, [r7, #4]
    a15c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	683a      	ldr	r2, [r7, #0]
    a162:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a164:	2104      	movs	r1, #4
    a166:	6878      	ldr	r0, [r7, #4]
    a168:	4b02      	ldr	r3, [pc, #8]	; (a174 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    a16a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a16c:	bf00      	nop
    a16e:	3708      	adds	r7, #8
    a170:	46bd      	mov	sp, r7
    a172:	bd80      	pop	{r7, pc}
    a174:	00009cf1 	.word	0x00009cf1

0000a178 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    a178:	b580      	push	{r7, lr}
    a17a:	b082      	sub	sp, #8
    a17c:	af00      	add	r7, sp, #0
    a17e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a180:	2104      	movs	r1, #4
    a182:	6878      	ldr	r0, [r7, #4]
    a184:	4b03      	ldr	r3, [pc, #12]	; (a194 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    a186:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    a18c:	4618      	mov	r0, r3
    a18e:	3708      	adds	r7, #8
    a190:	46bd      	mov	sp, r7
    a192:	bd80      	pop	{r7, pc}
    a194:	00009cf1 	.word	0x00009cf1

0000a198 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    a198:	b480      	push	{r7}
    a19a:	b083      	sub	sp, #12
    a19c:	af00      	add	r7, sp, #0
    a19e:	6078      	str	r0, [r7, #4]
    a1a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	683a      	ldr	r2, [r7, #0]
    a1a6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a1a8:	bf00      	nop
    a1aa:	370c      	adds	r7, #12
    a1ac:	46bd      	mov	sp, r7
    a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b2:	4770      	bx	lr

0000a1b4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b082      	sub	sp, #8
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
    a1bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	683a      	ldr	r2, [r7, #0]
    a1c2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a1c4:	2104      	movs	r1, #4
    a1c6:	6878      	ldr	r0, [r7, #4]
    a1c8:	4b02      	ldr	r3, [pc, #8]	; (a1d4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    a1ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a1cc:	bf00      	nop
    a1ce:	3708      	adds	r7, #8
    a1d0:	46bd      	mov	sp, r7
    a1d2:	bd80      	pop	{r7, pc}
    a1d4:	00009cf1 	.word	0x00009cf1

0000a1d8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    a1d8:	b580      	push	{r7, lr}
    a1da:	b082      	sub	sp, #8
    a1dc:	af00      	add	r7, sp, #0
    a1de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a1e0:	2104      	movs	r1, #4
    a1e2:	6878      	ldr	r0, [r7, #4]
    a1e4:	4b03      	ldr	r3, [pc, #12]	; (a1f4 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    a1e6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    a1e8:	687b      	ldr	r3, [r7, #4]
    a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    a1ec:	4618      	mov	r0, r3
    a1ee:	3708      	adds	r7, #8
    a1f0:	46bd      	mov	sp, r7
    a1f2:	bd80      	pop	{r7, pc}
    a1f4:	00009cf1 	.word	0x00009cf1

0000a1f8 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    a1f8:	b480      	push	{r7}
    a1fa:	b083      	sub	sp, #12
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	6078      	str	r0, [r7, #4]
    a200:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	683a      	ldr	r2, [r7, #0]
    a206:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a208:	bf00      	nop
    a20a:	370c      	adds	r7, #12
    a20c:	46bd      	mov	sp, r7
    a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a212:	4770      	bx	lr

0000a214 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    a214:	b480      	push	{r7}
    a216:	b083      	sub	sp, #12
    a218:	af00      	add	r7, sp, #0
    a21a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    a21c:	687b      	ldr	r3, [r7, #4]
    a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    a220:	4618      	mov	r0, r3
    a222:	370c      	adds	r7, #12
    a224:	46bd      	mov	sp, r7
    a226:	f85d 7b04 	ldr.w	r7, [sp], #4
    a22a:	4770      	bx	lr

0000a22c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    a22c:	b480      	push	{r7}
    a22e:	b083      	sub	sp, #12
    a230:	af00      	add	r7, sp, #0
    a232:	6078      	str	r0, [r7, #4]
    a234:	460b      	mov	r3, r1
    a236:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	78fa      	ldrb	r2, [r7, #3]
    a23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a240:	bf00      	nop
    a242:	370c      	adds	r7, #12
    a244:	46bd      	mov	sp, r7
    a246:	f85d 7b04 	ldr.w	r7, [sp], #4
    a24a:	4770      	bx	lr

0000a24c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    a24c:	b480      	push	{r7}
    a24e:	b083      	sub	sp, #12
    a250:	af00      	add	r7, sp, #0
    a252:	6078      	str	r0, [r7, #4]
    a254:	460b      	mov	r3, r1
    a256:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    a258:	687b      	ldr	r3, [r7, #4]
    a25a:	887a      	ldrh	r2, [r7, #2]
    a25c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a25e:	bf00      	nop
    a260:	370c      	adds	r7, #12
    a262:	46bd      	mov	sp, r7
    a264:	f85d 7b04 	ldr.w	r7, [sp], #4
    a268:	4770      	bx	lr
	...

0000a26c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    a26c:	b580      	push	{r7, lr}
    a26e:	b082      	sub	sp, #8
    a270:	af00      	add	r7, sp, #0
    a272:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a274:	2104      	movs	r1, #4
    a276:	6878      	ldr	r0, [r7, #4]
    a278:	4b06      	ldr	r3, [pc, #24]	; (a294 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    a27a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	8b5b      	ldrh	r3, [r3, #26]
    a280:	b29b      	uxth	r3, r3
    a282:	091b      	lsrs	r3, r3, #4
    a284:	b29b      	uxth	r3, r3
    a286:	f003 0303 	and.w	r3, r3, #3
    a28a:	b29b      	uxth	r3, r3
}
    a28c:	4618      	mov	r0, r3
    a28e:	3708      	adds	r7, #8
    a290:	46bd      	mov	sp, r7
    a292:	bd80      	pop	{r7, pc}
    a294:	00009cf1 	.word	0x00009cf1

0000a298 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    a298:	b580      	push	{r7, lr}
    a29a:	b082      	sub	sp, #8
    a29c:	af00      	add	r7, sp, #0
    a29e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a2a0:	2104      	movs	r1, #4
    a2a2:	6878      	ldr	r0, [r7, #4]
    a2a4:	4b04      	ldr	r3, [pc, #16]	; (a2b8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    a2a6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	8b5b      	ldrh	r3, [r3, #26]
    a2ac:	b29b      	uxth	r3, r3
}
    a2ae:	4618      	mov	r0, r3
    a2b0:	3708      	adds	r7, #8
    a2b2:	46bd      	mov	sp, r7
    a2b4:	bd80      	pop	{r7, pc}
    a2b6:	bf00      	nop
    a2b8:	00009cf1 	.word	0x00009cf1

0000a2bc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    a2bc:	b580      	push	{r7, lr}
    a2be:	b082      	sub	sp, #8
    a2c0:	af00      	add	r7, sp, #0
    a2c2:	6078      	str	r0, [r7, #4]
    a2c4:	460b      	mov	r3, r1
    a2c6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	887a      	ldrh	r2, [r7, #2]
    a2cc:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a2ce:	2104      	movs	r1, #4
    a2d0:	6878      	ldr	r0, [r7, #4]
    a2d2:	4b03      	ldr	r3, [pc, #12]	; (a2e0 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    a2d4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a2d6:	bf00      	nop
    a2d8:	3708      	adds	r7, #8
    a2da:	46bd      	mov	sp, r7
    a2dc:	bd80      	pop	{r7, pc}
    a2de:	bf00      	nop
    a2e0:	00009cf1 	.word	0x00009cf1

0000a2e4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    a2e4:	b4b0      	push	{r4, r5, r7}
    a2e6:	b08d      	sub	sp, #52	; 0x34
    a2e8:	af00      	add	r7, sp, #0
    a2ea:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    a2ec:	4b13      	ldr	r3, [pc, #76]	; (a33c <_sercom_get_hardware_index+0x58>)
    a2ee:	f107 040c 	add.w	r4, r7, #12
    a2f2:	461d      	mov	r5, r3
    a2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a2f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a2fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a300:	2300      	movs	r3, #0
    a302:	62fb      	str	r3, [r7, #44]	; 0x2c
    a304:	e010      	b.n	a328 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a308:	009b      	lsls	r3, r3, #2
    a30a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a30e:	4413      	add	r3, r2
    a310:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a314:	461a      	mov	r2, r3
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	429a      	cmp	r2, r3
    a31a:	d102      	bne.n	a322 <_sercom_get_hardware_index+0x3e>
			return i;
    a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a31e:	b2db      	uxtb	r3, r3
    a320:	e006      	b.n	a330 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a324:	3301      	adds	r3, #1
    a326:	62fb      	str	r3, [r7, #44]	; 0x2c
    a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a32a:	2b07      	cmp	r3, #7
    a32c:	d9eb      	bls.n	a306 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    a32e:	2300      	movs	r3, #0
}
    a330:	4618      	mov	r0, r3
    a332:	3734      	adds	r7, #52	; 0x34
    a334:	46bd      	mov	sp, r7
    a336:	bcb0      	pop	{r4, r5, r7}
    a338:	4770      	bx	lr
    a33a:	bf00      	nop
    a33c:	00012b98 	.word	0x00012b98

0000a340 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    a340:	b580      	push	{r7, lr}
    a342:	b084      	sub	sp, #16
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    a348:	6878      	ldr	r0, [r7, #4]
    a34a:	4b13      	ldr	r3, [pc, #76]	; (a398 <_get_i2cm_index+0x58>)
    a34c:	4798      	blx	r3
    a34e:	4603      	mov	r3, r0
    a350:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    a352:	2300      	movs	r3, #0
    a354:	73fb      	strb	r3, [r7, #15]
    a356:	e010      	b.n	a37a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    a358:	7bfa      	ldrb	r2, [r7, #15]
    a35a:	4910      	ldr	r1, [pc, #64]	; (a39c <_get_i2cm_index+0x5c>)
    a35c:	4613      	mov	r3, r2
    a35e:	005b      	lsls	r3, r3, #1
    a360:	4413      	add	r3, r2
    a362:	00db      	lsls	r3, r3, #3
    a364:	440b      	add	r3, r1
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	7bba      	ldrb	r2, [r7, #14]
    a36a:	429a      	cmp	r2, r3
    a36c:	d102      	bne.n	a374 <_get_i2cm_index+0x34>
			return i;
    a36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a372:	e00d      	b.n	a390 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    a374:	7bfb      	ldrb	r3, [r7, #15]
    a376:	3301      	adds	r3, #1
    a378:	73fb      	strb	r3, [r7, #15]
    a37a:	7bfb      	ldrb	r3, [r7, #15]
    a37c:	2b02      	cmp	r3, #2
    a37e:	d9eb      	bls.n	a358 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    a380:	f240 32a6 	movw	r2, #934	; 0x3a6
    a384:	4906      	ldr	r1, [pc, #24]	; (a3a0 <_get_i2cm_index+0x60>)
    a386:	2000      	movs	r0, #0
    a388:	4b06      	ldr	r3, [pc, #24]	; (a3a4 <_get_i2cm_index+0x64>)
    a38a:	4798      	blx	r3
	return -1;
    a38c:	f04f 33ff 	mov.w	r3, #4294967295
}
    a390:	4618      	mov	r0, r3
    a392:	3710      	adds	r7, #16
    a394:	46bd      	mov	sp, r7
    a396:	bd80      	pop	{r7, pc}
    a398:	0000a2e5 	.word	0x0000a2e5
    a39c:	20000410 	.word	0x20000410
    a3a0:	00012b7c 	.word	0x00012b7c
    a3a4:	00007261 	.word	0x00007261

0000a3a8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b082      	sub	sp, #8
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    a3b0:	2103      	movs	r1, #3
    a3b2:	6878      	ldr	r0, [r7, #4]
    a3b4:	4b02      	ldr	r3, [pc, #8]	; (a3c0 <_sercom_i2c_send_stop+0x18>)
    a3b6:	4798      	blx	r3
}
    a3b8:	bf00      	nop
    a3ba:	3708      	adds	r7, #8
    a3bc:	46bd      	mov	sp, r7
    a3be:	bd80      	pop	{r7, pc}
    a3c0:	0000a061 	.word	0x0000a061

0000a3c4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    a3c4:	b590      	push	{r4, r7, lr}
    a3c6:	b087      	sub	sp, #28
    a3c8:	af00      	add	r7, sp, #0
    a3ca:	60f8      	str	r0, [r7, #12]
    a3cc:	60b9      	str	r1, [r7, #8]
    a3ce:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a3d0:	68f8      	ldr	r0, [r7, #12]
    a3d2:	4b7d      	ldr	r3, [pc, #500]	; (a5c8 <_sercom_i2c_sync_analyse_flags+0x204>)
    a3d4:	4798      	blx	r3
    a3d6:	4603      	mov	r3, r0
    a3d8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    a3da:	68f8      	ldr	r0, [r7, #12]
    a3dc:	4b7b      	ldr	r3, [pc, #492]	; (a5cc <_sercom_i2c_sync_analyse_flags+0x208>)
    a3de:	4798      	blx	r3
    a3e0:	4603      	mov	r3, r0
    a3e2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    a3e4:	68bb      	ldr	r3, [r7, #8]
    a3e6:	f003 0301 	and.w	r3, r3, #1
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	f000 8095 	beq.w	a51a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    a3f0:	8a7b      	ldrh	r3, [r7, #18]
    a3f2:	f003 0302 	and.w	r3, r3, #2
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d01d      	beq.n	a436 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    a3fa:	68f8      	ldr	r0, [r7, #12]
    a3fc:	4b74      	ldr	r3, [pc, #464]	; (a5d0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    a3fe:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    a400:	687b      	ldr	r3, [r7, #4]
    a402:	885b      	ldrh	r3, [r3, #2]
    a404:	b29b      	uxth	r3, r3
    a406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a40a:	b29a      	uxth	r2, r3
    a40c:	687b      	ldr	r3, [r7, #4]
    a40e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    a410:	687b      	ldr	r3, [r7, #4]
    a412:	885b      	ldrh	r3, [r3, #2]
    a414:	b29b      	uxth	r3, r3
    a416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a41a:	b29a      	uxth	r2, r3
    a41c:	687b      	ldr	r3, [r7, #4]
    a41e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    a420:	8a7b      	ldrh	r3, [r7, #18]
    a422:	f003 0301 	and.w	r3, r3, #1
    a426:	2b00      	cmp	r3, #0
    a428:	d002      	beq.n	a430 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    a42a:	f06f 0304 	mvn.w	r3, #4
    a42e:	e0c6      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    a430:	f06f 0303 	mvn.w	r3, #3
    a434:	e0c3      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    a436:	8a7b      	ldrh	r3, [r7, #18]
    a438:	f003 0304 	and.w	r3, r3, #4
    a43c:	2b00      	cmp	r3, #0
    a43e:	d01f      	beq.n	a480 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    a440:	687b      	ldr	r3, [r7, #4]
    a442:	685b      	ldr	r3, [r3, #4]
    a444:	2b00      	cmp	r3, #0
    a446:	dd07      	ble.n	a458 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    a448:	687b      	ldr	r3, [r7, #4]
    a44a:	885b      	ldrh	r3, [r3, #2]
    a44c:	b29b      	uxth	r3, r3
    a44e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a452:	b29a      	uxth	r2, r3
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	885b      	ldrh	r3, [r3, #2]
    a45c:	b29b      	uxth	r3, r3
    a45e:	b21b      	sxth	r3, r3
    a460:	2b00      	cmp	r3, #0
    a462:	da02      	bge.n	a46a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    a464:	68f8      	ldr	r0, [r7, #12]
    a466:	4b5b      	ldr	r3, [pc, #364]	; (a5d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a468:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a46a:	687b      	ldr	r3, [r7, #4]
    a46c:	885b      	ldrh	r3, [r3, #2]
    a46e:	b29b      	uxth	r3, r3
    a470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a474:	b29a      	uxth	r2, r3
    a476:	687b      	ldr	r3, [r7, #4]
    a478:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    a47a:	f06f 0301 	mvn.w	r3, #1
    a47e:	e09e      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    a480:	687b      	ldr	r3, [r7, #4]
    a482:	885b      	ldrh	r3, [r3, #2]
    a484:	b29b      	uxth	r3, r3
    a486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a48a:	2b00      	cmp	r3, #0
    a48c:	d01c      	beq.n	a4c8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    a48e:	687b      	ldr	r3, [r7, #4]
    a490:	881b      	ldrh	r3, [r3, #0]
    a492:	121b      	asrs	r3, r3, #8
    a494:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a496:	f003 0406 	and.w	r4, r3, #6
    a49a:	68f8      	ldr	r0, [r7, #12]
    a49c:	4b4e      	ldr	r3, [pc, #312]	; (a5d8 <_sercom_i2c_sync_analyse_flags+0x214>)
    a49e:	4798      	blx	r3
    a4a0:	4603      	mov	r3, r0
    a4a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a4a6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    a4a8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    a4ac:	4619      	mov	r1, r3
    a4ae:	68f8      	ldr	r0, [r7, #12]
    a4b0:	4b4a      	ldr	r3, [pc, #296]	; (a5dc <_sercom_i2c_sync_analyse_flags+0x218>)
    a4b2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	885b      	ldrh	r3, [r3, #2]
    a4b8:	b29b      	uxth	r3, r3
    a4ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    a4be:	b29a      	uxth	r2, r3
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    a4c4:	2300      	movs	r3, #0
    a4c6:	e07a      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	685b      	ldr	r3, [r3, #4]
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	d111      	bne.n	a4f4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	885b      	ldrh	r3, [r3, #2]
    a4d4:	b29b      	uxth	r3, r3
    a4d6:	b21b      	sxth	r3, r3
    a4d8:	2b00      	cmp	r3, #0
    a4da:	da02      	bge.n	a4e2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    a4dc:	68f8      	ldr	r0, [r7, #12]
    a4de:	4b3d      	ldr	r3, [pc, #244]	; (a5d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a4e0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	885b      	ldrh	r3, [r3, #2]
    a4e6:	b29b      	uxth	r3, r3
    a4e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a4ec:	b29a      	uxth	r2, r3
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	805a      	strh	r2, [r3, #2]
    a4f2:	e010      	b.n	a516 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	689b      	ldr	r3, [r3, #8]
    a4f8:	781b      	ldrb	r3, [r3, #0]
    a4fa:	4619      	mov	r1, r3
    a4fc:	68f8      	ldr	r0, [r7, #12]
    a4fe:	4b38      	ldr	r3, [pc, #224]	; (a5e0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    a500:	4798      	blx	r3
				msg->buffer++;
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	689b      	ldr	r3, [r3, #8]
    a506:	1c5a      	adds	r2, r3, #1
    a508:	687b      	ldr	r3, [r7, #4]
    a50a:	609a      	str	r2, [r3, #8]
				msg->len--;
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	685b      	ldr	r3, [r3, #4]
    a510:	1e5a      	subs	r2, r3, #1
    a512:	687b      	ldr	r3, [r7, #4]
    a514:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    a516:	2300      	movs	r3, #0
    a518:	e051      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    a51a:	68bb      	ldr	r3, [r7, #8]
    a51c:	f003 0302 	and.w	r3, r3, #2
    a520:	2b00      	cmp	r3, #0
    a522:	d04b      	beq.n	a5bc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	685b      	ldr	r3, [r3, #4]
    a528:	2b00      	cmp	r3, #0
    a52a:	d041      	beq.n	a5b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    a52c:	8a7b      	ldrh	r3, [r7, #18]
    a52e:	f003 0304 	and.w	r3, r3, #4
    a532:	2b00      	cmp	r3, #0
    a534:	d13c      	bne.n	a5b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	685b      	ldr	r3, [r3, #4]
    a53a:	1e5a      	subs	r2, r3, #1
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a540:	687b      	ldr	r3, [r7, #4]
    a542:	685b      	ldr	r3, [r3, #4]
    a544:	2b00      	cmp	r3, #0
    a546:	d102      	bne.n	a54e <_sercom_i2c_sync_analyse_flags+0x18a>
    a548:	697b      	ldr	r3, [r7, #20]
    a54a:	2b00      	cmp	r3, #0
    a54c:	d006      	beq.n	a55c <_sercom_i2c_sync_analyse_flags+0x198>
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	685b      	ldr	r3, [r3, #4]
    a552:	2b01      	cmp	r3, #1
    a554:	d105      	bne.n	a562 <_sercom_i2c_sync_analyse_flags+0x19e>
    a556:	697b      	ldr	r3, [r7, #20]
    a558:	2b00      	cmp	r3, #0
    a55a:	d002      	beq.n	a562 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a55c:	68f8      	ldr	r0, [r7, #12]
    a55e:	4b21      	ldr	r3, [pc, #132]	; (a5e4 <_sercom_i2c_sync_analyse_flags+0x220>)
    a560:	4798      	blx	r3
			}

			if (msg->len == 0) {
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	685b      	ldr	r3, [r3, #4]
    a566:	2b00      	cmp	r3, #0
    a568:	d113      	bne.n	a592 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	885b      	ldrh	r3, [r3, #2]
    a56e:	b29b      	uxth	r3, r3
    a570:	b21b      	sxth	r3, r3
    a572:	2b00      	cmp	r3, #0
    a574:	da05      	bge.n	a582 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    a576:	68f8      	ldr	r0, [r7, #12]
    a578:	4b1b      	ldr	r3, [pc, #108]	; (a5e8 <_sercom_i2c_sync_analyse_flags+0x224>)
    a57a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    a57c:	68f8      	ldr	r0, [r7, #12]
    a57e:	4b15      	ldr	r3, [pc, #84]	; (a5d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a580:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a582:	687b      	ldr	r3, [r7, #4]
    a584:	885b      	ldrh	r3, [r3, #2]
    a586:	b29b      	uxth	r3, r3
    a588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a58c:	b29a      	uxth	r2, r3
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    a592:	687b      	ldr	r3, [r7, #4]
    a594:	689c      	ldr	r4, [r3, #8]
    a596:	1c62      	adds	r2, r4, #1
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	609a      	str	r2, [r3, #8]
    a59c:	68f8      	ldr	r0, [r7, #12]
    a59e:	4b13      	ldr	r3, [pc, #76]	; (a5ec <_sercom_i2c_sync_analyse_flags+0x228>)
    a5a0:	4798      	blx	r3
    a5a2:	4603      	mov	r3, r0
    a5a4:	b2db      	uxtb	r3, r3
    a5a6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a5a8:	68f8      	ldr	r0, [r7, #12]
    a5aa:	4b11      	ldr	r3, [pc, #68]	; (a5f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a5ac:	4798      	blx	r3
    a5ae:	e005      	b.n	a5bc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a5b0:	68f8      	ldr	r0, [r7, #12]
    a5b2:	4b0f      	ldr	r3, [pc, #60]	; (a5f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a5b4:	4798      	blx	r3
			return I2C_NACK;
    a5b6:	f06f 0301 	mvn.w	r3, #1
    a5ba:	e000      	b.n	a5be <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    a5bc:	2300      	movs	r3, #0
}
    a5be:	4618      	mov	r0, r3
    a5c0:	371c      	adds	r7, #28
    a5c2:	46bd      	mov	sp, r7
    a5c4:	bd90      	pop	{r4, r7, pc}
    a5c6:	bf00      	nop
    a5c8:	00009e89 	.word	0x00009e89
    a5cc:	0000a299 	.word	0x0000a299
    a5d0:	00009d89 	.word	0x00009d89
    a5d4:	0000a3a9 	.word	0x0000a3a9
    a5d8:	0000a179 	.word	0x0000a179
    a5dc:	0000a155 	.word	0x0000a155
    a5e0:	0000a1b5 	.word	0x0000a1b5
    a5e4:	0000a011 	.word	0x0000a011
    a5e8:	00009fe9 	.word	0x00009fe9
    a5ec:	0000a1d9 	.word	0x0000a1d9
    a5f0:	00009da3 	.word	0x00009da3

0000a5f4 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b082      	sub	sp, #8
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	6078      	str	r0, [r7, #4]
    a5fc:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    a5fe:	687b      	ldr	r3, [r7, #4]
    a600:	2b00      	cmp	r3, #0
    a602:	bf14      	ite	ne
    a604:	2301      	movne	r3, #1
    a606:	2300      	moveq	r3, #0
    a608:	b2db      	uxtb	r3, r3
    a60a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    a60e:	4908      	ldr	r1, [pc, #32]	; (a630 <_i2c_m_sync_init+0x3c>)
    a610:	4618      	mov	r0, r3
    a612:	4b08      	ldr	r3, [pc, #32]	; (a634 <_i2c_m_sync_init+0x40>)
    a614:	4798      	blx	r3

	i2c_dev->hw = hw;
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	683a      	ldr	r2, [r7, #0]
    a61a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    a61c:	687b      	ldr	r3, [r7, #4]
    a61e:	6839      	ldr	r1, [r7, #0]
    a620:	4618      	mov	r0, r3
    a622:	4b05      	ldr	r3, [pc, #20]	; (a638 <_i2c_m_sync_init+0x44>)
    a624:	4798      	blx	r3
    a626:	4603      	mov	r3, r0
}
    a628:	4618      	mov	r0, r3
    a62a:	3708      	adds	r7, #8
    a62c:	46bd      	mov	sp, r7
    a62e:	bd80      	pop	{r7, pc}
    a630:	00012b7c 	.word	0x00012b7c
    a634:	00007261 	.word	0x00007261
    a638:	0000aa0d 	.word	0x0000aa0d

0000a63c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    a63c:	b580      	push	{r7, lr}
    a63e:	b082      	sub	sp, #8
    a640:	af00      	add	r7, sp, #0
    a642:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	2b00      	cmp	r3, #0
    a648:	bf14      	ite	ne
    a64a:	2301      	movne	r3, #1
    a64c:	2300      	moveq	r3, #0
    a64e:	b2db      	uxtb	r3, r3
    a650:	f240 5235 	movw	r2, #1333	; 0x535
    a654:	4906      	ldr	r1, [pc, #24]	; (a670 <_i2c_m_sync_enable+0x34>)
    a656:	4618      	mov	r0, r3
    a658:	4b06      	ldr	r3, [pc, #24]	; (a674 <_i2c_m_sync_enable+0x38>)
    a65a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	691b      	ldr	r3, [r3, #16]
    a660:	4618      	mov	r0, r3
    a662:	4b05      	ldr	r3, [pc, #20]	; (a678 <_i2c_m_sync_enable+0x3c>)
    a664:	4798      	blx	r3
    a666:	4603      	mov	r3, r0
}
    a668:	4618      	mov	r0, r3
    a66a:	3708      	adds	r7, #8
    a66c:	46bd      	mov	sp, r7
    a66e:	bd80      	pop	{r7, pc}
    a670:	00012b7c 	.word	0x00012b7c
    a674:	00007261 	.word	0x00007261
    a678:	0000a981 	.word	0x0000a981

0000a67c <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    a67c:	b580      	push	{r7, lr}
    a67e:	b084      	sub	sp, #16
    a680:	af00      	add	r7, sp, #0
    a682:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    a684:	687b      	ldr	r3, [r7, #4]
    a686:	691b      	ldr	r3, [r3, #16]
    a688:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	2b00      	cmp	r3, #0
    a68e:	bf14      	ite	ne
    a690:	2301      	movne	r3, #1
    a692:	2300      	moveq	r3, #0
    a694:	b2db      	uxtb	r3, r3
    a696:	f240 5243 	movw	r2, #1347	; 0x543
    a69a:	490c      	ldr	r1, [pc, #48]	; (a6cc <_i2c_m_sync_disable+0x50>)
    a69c:	4618      	mov	r0, r3
    a69e:	4b0c      	ldr	r3, [pc, #48]	; (a6d0 <_i2c_m_sync_disable+0x54>)
    a6a0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	691b      	ldr	r3, [r3, #16]
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	bf14      	ite	ne
    a6aa:	2301      	movne	r3, #1
    a6ac:	2300      	moveq	r3, #0
    a6ae:	b2db      	uxtb	r3, r3
    a6b0:	f240 5244 	movw	r2, #1348	; 0x544
    a6b4:	4905      	ldr	r1, [pc, #20]	; (a6cc <_i2c_m_sync_disable+0x50>)
    a6b6:	4618      	mov	r0, r3
    a6b8:	4b05      	ldr	r3, [pc, #20]	; (a6d0 <_i2c_m_sync_disable+0x54>)
    a6ba:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    a6bc:	68f8      	ldr	r0, [r7, #12]
    a6be:	4b05      	ldr	r3, [pc, #20]	; (a6d4 <_i2c_m_sync_disable+0x58>)
    a6c0:	4798      	blx	r3

	return ERR_NONE;
    a6c2:	2300      	movs	r3, #0
}
    a6c4:	4618      	mov	r0, r3
    a6c6:	3710      	adds	r7, #16
    a6c8:	46bd      	mov	sp, r7
    a6ca:	bd80      	pop	{r7, pc}
    a6cc:	00012b7c 	.word	0x00012b7c
    a6d0:	00007261 	.word	0x00007261
    a6d4:	00009e61 	.word	0x00009e61

0000a6d8 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    a6d8:	b580      	push	{r7, lr}
    a6da:	b084      	sub	sp, #16
    a6dc:	af00      	add	r7, sp, #0
    a6de:	6078      	str	r0, [r7, #4]
    a6e0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    a6e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a6e6:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	691b      	ldr	r3, [r3, #16]
    a6ec:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    a6ee:	68b8      	ldr	r0, [r7, #8]
    a6f0:	4b0f      	ldr	r3, [pc, #60]	; (a730 <_sercom_i2c_sync_wait_bus+0x58>)
    a6f2:	4798      	blx	r3
    a6f4:	4603      	mov	r3, r0
    a6f6:	461a      	mov	r2, r3
    a6f8:	683b      	ldr	r3, [r7, #0]
    a6fa:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    a6fc:	68fb      	ldr	r3, [r7, #12]
    a6fe:	1e5a      	subs	r2, r3, #1
    a700:	60fa      	str	r2, [r7, #12]
    a702:	2b00      	cmp	r3, #0
    a704:	d102      	bne.n	a70c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    a706:	f06f 0304 	mvn.w	r3, #4
    a70a:	e00c      	b.n	a726 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a70c:	683b      	ldr	r3, [r7, #0]
    a70e:	681b      	ldr	r3, [r3, #0]
    a710:	f003 0301 	and.w	r3, r3, #1
    a714:	2b00      	cmp	r3, #0
    a716:	d105      	bne.n	a724 <_sercom_i2c_sync_wait_bus+0x4c>
    a718:	683b      	ldr	r3, [r7, #0]
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	f003 0302 	and.w	r3, r3, #2
    a720:	2b00      	cmp	r3, #0
    a722:	d0e4      	beq.n	a6ee <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    a724:	2300      	movs	r3, #0
}
    a726:	4618      	mov	r0, r3
    a728:	3710      	adds	r7, #16
    a72a:	46bd      	mov	sp, r7
    a72c:	bd80      	pop	{r7, pc}
    a72e:	bf00      	nop
    a730:	00009dbd 	.word	0x00009dbd

0000a734 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    a734:	b590      	push	{r4, r7, lr}
    a736:	b087      	sub	sp, #28
    a738:	af00      	add	r7, sp, #0
    a73a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    a73c:	687b      	ldr	r3, [r7, #4]
    a73e:	691b      	ldr	r3, [r3, #16]
    a740:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    a742:	687b      	ldr	r3, [r7, #4]
    a744:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a746:	6978      	ldr	r0, [r7, #20]
    a748:	4b39      	ldr	r3, [pc, #228]	; (a830 <_sercom_i2c_sync_send_address+0xfc>)
    a74a:	4798      	blx	r3
    a74c:	4603      	mov	r3, r0
    a74e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	2b00      	cmp	r3, #0
    a754:	bf14      	ite	ne
    a756:	2301      	movne	r3, #1
    a758:	2300      	moveq	r3, #0
    a75a:	b2db      	uxtb	r3, r3
    a75c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    a760:	4934      	ldr	r1, [pc, #208]	; (a834 <_sercom_i2c_sync_send_address+0x100>)
    a762:	4618      	mov	r0, r3
    a764:	4b34      	ldr	r3, [pc, #208]	; (a838 <_sercom_i2c_sync_send_address+0x104>)
    a766:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    a768:	693b      	ldr	r3, [r7, #16]
    a76a:	685b      	ldr	r3, [r3, #4]
    a76c:	2b01      	cmp	r3, #1
    a76e:	d106      	bne.n	a77e <_sercom_i2c_sync_send_address+0x4a>
    a770:	68fb      	ldr	r3, [r7, #12]
    a772:	2b00      	cmp	r3, #0
    a774:	d003      	beq.n	a77e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a776:	6978      	ldr	r0, [r7, #20]
    a778:	4b30      	ldr	r3, [pc, #192]	; (a83c <_sercom_i2c_sync_send_address+0x108>)
    a77a:	4798      	blx	r3
    a77c:	e002      	b.n	a784 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    a77e:	6978      	ldr	r0, [r7, #20]
    a780:	4b2f      	ldr	r3, [pc, #188]	; (a840 <_sercom_i2c_sync_send_address+0x10c>)
    a782:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    a784:	693b      	ldr	r3, [r7, #16]
    a786:	881b      	ldrh	r3, [r3, #0]
    a788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a78c:	2b00      	cmp	r3, #0
    a78e:	d022      	beq.n	a7d6 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    a790:	693b      	ldr	r3, [r7, #16]
    a792:	885b      	ldrh	r3, [r3, #2]
    a794:	b29b      	uxth	r3, r3
    a796:	f003 0301 	and.w	r3, r3, #1
    a79a:	2b00      	cmp	r3, #0
    a79c:	d007      	beq.n	a7ae <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    a79e:	693b      	ldr	r3, [r7, #16]
    a7a0:	885b      	ldrh	r3, [r3, #2]
    a7a2:	b29b      	uxth	r3, r3
    a7a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a7a8:	b29a      	uxth	r2, r3
    a7aa:	693b      	ldr	r3, [r7, #16]
    a7ac:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    a7ae:	693b      	ldr	r3, [r7, #16]
    a7b0:	881b      	ldrh	r3, [r3, #0]
    a7b2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a7b4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    a7b8:	401c      	ands	r4, r3
    a7ba:	6978      	ldr	r0, [r7, #20]
    a7bc:	4b21      	ldr	r3, [pc, #132]	; (a844 <_sercom_i2c_sync_send_address+0x110>)
    a7be:	4798      	blx	r3
    a7c0:	4603      	mov	r3, r0
    a7c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a7c6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    a7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a7cc:	4619      	mov	r1, r3
    a7ce:	6978      	ldr	r0, [r7, #20]
    a7d0:	4b1d      	ldr	r3, [pc, #116]	; (a848 <_sercom_i2c_sync_send_address+0x114>)
    a7d2:	4798      	blx	r3
    a7d4:	e01a      	b.n	a80c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    a7d6:	693b      	ldr	r3, [r7, #16]
    a7d8:	881b      	ldrh	r3, [r3, #0]
    a7da:	005b      	lsls	r3, r3, #1
    a7dc:	b2db      	uxtb	r3, r3
    a7de:	693a      	ldr	r2, [r7, #16]
    a7e0:	8852      	ldrh	r2, [r2, #2]
    a7e2:	b292      	uxth	r2, r2
    a7e4:	f002 0201 	and.w	r2, r2, #1
    a7e8:	2a00      	cmp	r2, #0
    a7ea:	bf14      	ite	ne
    a7ec:	2201      	movne	r2, #1
    a7ee:	2200      	moveq	r2, #0
    a7f0:	b2d2      	uxtb	r2, r2
    a7f2:	4313      	orrs	r3, r2
    a7f4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a7f6:	6978      	ldr	r0, [r7, #20]
    a7f8:	4b12      	ldr	r3, [pc, #72]	; (a844 <_sercom_i2c_sync_send_address+0x110>)
    a7fa:	4798      	blx	r3
    a7fc:	4603      	mov	r3, r0
    a7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    a802:	4323      	orrs	r3, r4
    a804:	4619      	mov	r1, r3
    a806:	6978      	ldr	r0, [r7, #20]
    a808:	4b0f      	ldr	r3, [pc, #60]	; (a848 <_sercom_i2c_sync_send_address+0x114>)
    a80a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a80c:	f107 0308 	add.w	r3, r7, #8
    a810:	4619      	mov	r1, r3
    a812:	6878      	ldr	r0, [r7, #4]
    a814:	4b0d      	ldr	r3, [pc, #52]	; (a84c <_sercom_i2c_sync_send_address+0x118>)
    a816:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    a818:	68bb      	ldr	r3, [r7, #8]
    a81a:	693a      	ldr	r2, [r7, #16]
    a81c:	4619      	mov	r1, r3
    a81e:	6978      	ldr	r0, [r7, #20]
    a820:	4b0b      	ldr	r3, [pc, #44]	; (a850 <_sercom_i2c_sync_send_address+0x11c>)
    a822:	4798      	blx	r3
    a824:	4603      	mov	r3, r0
}
    a826:	4618      	mov	r0, r3
    a828:	371c      	adds	r7, #28
    a82a:	46bd      	mov	sp, r7
    a82c:	bd90      	pop	{r4, r7, pc}
    a82e:	bf00      	nop
    a830:	00009e89 	.word	0x00009e89
    a834:	00012b7c 	.word	0x00012b7c
    a838:	00007261 	.word	0x00007261
    a83c:	0000a011 	.word	0x0000a011
    a840:	0000a039 	.word	0x0000a039
    a844:	0000a179 	.word	0x0000a179
    a848:	0000a155 	.word	0x0000a155
    a84c:	0000a6d9 	.word	0x0000a6d9
    a850:	0000a3c5 	.word	0x0000a3c5

0000a854 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    a854:	b580      	push	{r7, lr}
    a856:	b086      	sub	sp, #24
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
    a85c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    a85e:	687b      	ldr	r3, [r7, #4]
    a860:	691b      	ldr	r3, [r3, #16]
    a862:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    a864:	687b      	ldr	r3, [r7, #4]
    a866:	2b00      	cmp	r3, #0
    a868:	bf14      	ite	ne
    a86a:	2301      	movne	r3, #1
    a86c:	2300      	moveq	r3, #0
    a86e:	b2db      	uxtb	r3, r3
    a870:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    a874:	493b      	ldr	r1, [pc, #236]	; (a964 <_i2c_m_sync_transfer+0x110>)
    a876:	4618      	mov	r0, r3
    a878:	4b3b      	ldr	r3, [pc, #236]	; (a968 <_i2c_m_sync_transfer+0x114>)
    a87a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	691b      	ldr	r3, [r3, #16]
    a880:	2b00      	cmp	r3, #0
    a882:	bf14      	ite	ne
    a884:	2301      	movne	r3, #1
    a886:	2300      	moveq	r3, #0
    a888:	b2db      	uxtb	r3, r3
    a88a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    a88e:	4935      	ldr	r1, [pc, #212]	; (a964 <_i2c_m_sync_transfer+0x110>)
    a890:	4618      	mov	r0, r3
    a892:	4b35      	ldr	r3, [pc, #212]	; (a968 <_i2c_m_sync_transfer+0x114>)
    a894:	4798      	blx	r3
	ASSERT(msg);
    a896:	683b      	ldr	r3, [r7, #0]
    a898:	2b00      	cmp	r3, #0
    a89a:	bf14      	ite	ne
    a89c:	2301      	movne	r3, #1
    a89e:	2300      	moveq	r3, #0
    a8a0:	b2db      	uxtb	r3, r3
    a8a2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    a8a6:	492f      	ldr	r1, [pc, #188]	; (a964 <_i2c_m_sync_transfer+0x110>)
    a8a8:	4618      	mov	r0, r3
    a8aa:	4b2f      	ldr	r3, [pc, #188]	; (a968 <_i2c_m_sync_transfer+0x114>)
    a8ac:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a8ae:	687b      	ldr	r3, [r7, #4]
    a8b0:	885b      	ldrh	r3, [r3, #2]
    a8b2:	b29b      	uxth	r3, r3
    a8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d002      	beq.n	a8c2 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    a8bc:	f06f 0305 	mvn.w	r3, #5
    a8c0:	e04c      	b.n	a95c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    a8c2:	683b      	ldr	r3, [r7, #0]
    a8c4:	885b      	ldrh	r3, [r3, #2]
    a8c6:	b29b      	uxth	r3, r3
    a8c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a8cc:	b29a      	uxth	r2, r3
    a8ce:	683b      	ldr	r3, [r7, #0]
    a8d0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a8d2:	687b      	ldr	r3, [r7, #4]
    a8d4:	683a      	ldr	r2, [r7, #0]
    a8d6:	ca07      	ldmia	r2, {r0, r1, r2}
    a8d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    a8dc:	6938      	ldr	r0, [r7, #16]
    a8de:	4b23      	ldr	r3, [pc, #140]	; (a96c <_i2c_m_sync_transfer+0x118>)
    a8e0:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    a8e2:	6878      	ldr	r0, [r7, #4]
    a8e4:	4b22      	ldr	r3, [pc, #136]	; (a970 <_i2c_m_sync_transfer+0x11c>)
    a8e6:	4798      	blx	r3
    a8e8:	6178      	str	r0, [r7, #20]

	if (ret) {
    a8ea:	697b      	ldr	r3, [r7, #20]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d02d      	beq.n	a94c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a8f0:	687b      	ldr	r3, [r7, #4]
    a8f2:	885b      	ldrh	r3, [r3, #2]
    a8f4:	b29b      	uxth	r3, r3
    a8f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a8fa:	b29a      	uxth	r2, r3
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	805a      	strh	r2, [r3, #2]

		return ret;
    a900:	697b      	ldr	r3, [r7, #20]
    a902:	e02b      	b.n	a95c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a904:	f107 030c 	add.w	r3, r7, #12
    a908:	4619      	mov	r1, r3
    a90a:	6878      	ldr	r0, [r7, #4]
    a90c:	4b19      	ldr	r3, [pc, #100]	; (a974 <_i2c_m_sync_transfer+0x120>)
    a90e:	4798      	blx	r3
    a910:	6178      	str	r0, [r7, #20]

		if (ret) {
    a912:	697b      	ldr	r3, [r7, #20]
    a914:	2b00      	cmp	r3, #0
    a916:	d012      	beq.n	a93e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    a918:	683b      	ldr	r3, [r7, #0]
    a91a:	885b      	ldrh	r3, [r3, #2]
    a91c:	b29b      	uxth	r3, r3
    a91e:	b21b      	sxth	r3, r3
    a920:	2b00      	cmp	r3, #0
    a922:	da02      	bge.n	a92a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    a924:	6938      	ldr	r0, [r7, #16]
    a926:	4b14      	ldr	r3, [pc, #80]	; (a978 <_i2c_m_sync_transfer+0x124>)
    a928:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	885b      	ldrh	r3, [r3, #2]
    a92e:	b29b      	uxth	r3, r3
    a930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a934:	b29a      	uxth	r2, r3
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	805a      	strh	r2, [r3, #2]

			return ret;
    a93a:	697b      	ldr	r3, [r7, #20]
    a93c:	e00e      	b.n	a95c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    a93e:	68fb      	ldr	r3, [r7, #12]
    a940:	687a      	ldr	r2, [r7, #4]
    a942:	4619      	mov	r1, r3
    a944:	6938      	ldr	r0, [r7, #16]
    a946:	4b0d      	ldr	r3, [pc, #52]	; (a97c <_i2c_m_sync_transfer+0x128>)
    a948:	4798      	blx	r3
    a94a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a94c:	687b      	ldr	r3, [r7, #4]
    a94e:	885b      	ldrh	r3, [r3, #2]
    a950:	b29b      	uxth	r3, r3
    a952:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a956:	2b00      	cmp	r3, #0
    a958:	d1d4      	bne.n	a904 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    a95a:	697b      	ldr	r3, [r7, #20]
}
    a95c:	4618      	mov	r0, r3
    a95e:	3718      	adds	r7, #24
    a960:	46bd      	mov	sp, r7
    a962:	bd80      	pop	{r7, pc}
    a964:	00012b7c 	.word	0x00012b7c
    a968:	00007261 	.word	0x00007261
    a96c:	00009fc1 	.word	0x00009fc1
    a970:	0000a735 	.word	0x0000a735
    a974:	0000a6d9 	.word	0x0000a6d9
    a978:	0000a3a9 	.word	0x0000a3a9
    a97c:	0000a3c5 	.word	0x0000a3c5

0000a980 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    a980:	b580      	push	{r7, lr}
    a982:	b084      	sub	sp, #16
    a984:	af00      	add	r7, sp, #0
    a986:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    a988:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a98c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    a98e:	2304      	movs	r3, #4
    a990:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    a992:	687b      	ldr	r3, [r7, #4]
    a994:	2b00      	cmp	r3, #0
    a996:	bf14      	ite	ne
    a998:	2301      	movne	r3, #1
    a99a:	2300      	moveq	r3, #0
    a99c:	b2db      	uxtb	r3, r3
    a99e:	f240 6205 	movw	r2, #1541	; 0x605
    a9a2:	4915      	ldr	r1, [pc, #84]	; (a9f8 <_i2c_m_enable_implementation+0x78>)
    a9a4:	4618      	mov	r0, r3
    a9a6:	4b15      	ldr	r3, [pc, #84]	; (a9fc <_i2c_m_enable_implementation+0x7c>)
    a9a8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    a9aa:	6878      	ldr	r0, [r7, #4]
    a9ac:	4b14      	ldr	r3, [pc, #80]	; (aa00 <_i2c_m_enable_implementation+0x80>)
    a9ae:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a9b0:	e016      	b.n	a9e0 <_i2c_m_enable_implementation+0x60>
		timeout--;
    a9b2:	68fb      	ldr	r3, [r7, #12]
    a9b4:	3b01      	subs	r3, #1
    a9b6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    a9b8:	68fb      	ldr	r3, [r7, #12]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	dc10      	bgt.n	a9e0 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    a9be:	68bb      	ldr	r3, [r7, #8]
    a9c0:	3b01      	subs	r3, #1
    a9c2:	60bb      	str	r3, [r7, #8]
    a9c4:	68bb      	ldr	r3, [r7, #8]
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	d007      	beq.n	a9da <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    a9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9ce:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    a9d0:	2110      	movs	r1, #16
    a9d2:	6878      	ldr	r0, [r7, #4]
    a9d4:	4b0b      	ldr	r3, [pc, #44]	; (aa04 <_i2c_m_enable_implementation+0x84>)
    a9d6:	4798      	blx	r3
    a9d8:	e002      	b.n	a9e0 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    a9da:	f06f 0305 	mvn.w	r3, #5
    a9de:	e006      	b.n	a9ee <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a9e0:	6878      	ldr	r0, [r7, #4]
    a9e2:	4b09      	ldr	r3, [pc, #36]	; (aa08 <_i2c_m_enable_implementation+0x88>)
    a9e4:	4798      	blx	r3
    a9e6:	4603      	mov	r3, r0
    a9e8:	2b01      	cmp	r3, #1
    a9ea:	d1e2      	bne.n	a9b2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    a9ec:	2300      	movs	r3, #0
}
    a9ee:	4618      	mov	r0, r3
    a9f0:	3710      	adds	r7, #16
    a9f2:	46bd      	mov	sp, r7
    a9f4:	bd80      	pop	{r7, pc}
    a9f6:	bf00      	nop
    a9f8:	00012b7c 	.word	0x00012b7c
    a9fc:	00007261 	.word	0x00007261
    aa00:	00009e39 	.word	0x00009e39
    aa04:	0000a2bd 	.word	0x0000a2bd
    aa08:	0000a26d 	.word	0x0000a26d

0000aa0c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b084      	sub	sp, #16
    aa10:	af00      	add	r7, sp, #0
    aa12:	6078      	str	r0, [r7, #4]
    aa14:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    aa16:	6838      	ldr	r0, [r7, #0]
    aa18:	4b42      	ldr	r3, [pc, #264]	; (ab24 <_i2c_m_sync_init_impl+0x118>)
    aa1a:	4798      	blx	r3
    aa1c:	4603      	mov	r3, r0
    aa1e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    aa20:	2101      	movs	r1, #1
    aa22:	6838      	ldr	r0, [r7, #0]
    aa24:	4b40      	ldr	r3, [pc, #256]	; (ab28 <_i2c_m_sync_init_impl+0x11c>)
    aa26:	4798      	blx	r3
    aa28:	4603      	mov	r3, r0
    aa2a:	f083 0301 	eor.w	r3, r3, #1
    aa2e:	b2db      	uxtb	r3, r3
    aa30:	2b00      	cmp	r3, #0
    aa32:	d020      	beq.n	aa76 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    aa34:	7bfa      	ldrb	r2, [r7, #15]
    aa36:	493d      	ldr	r1, [pc, #244]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    aa38:	4613      	mov	r3, r2
    aa3a:	005b      	lsls	r3, r3, #1
    aa3c:	4413      	add	r3, r2
    aa3e:	00db      	lsls	r3, r3, #3
    aa40:	440b      	add	r3, r1
    aa42:	3304      	adds	r3, #4
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	f003 031c 	and.w	r3, r3, #28
    aa4a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    aa4c:	2102      	movs	r1, #2
    aa4e:	6838      	ldr	r0, [r7, #0]
    aa50:	4b37      	ldr	r3, [pc, #220]	; (ab30 <_i2c_m_sync_init_impl+0x124>)
    aa52:	4798      	blx	r3
    aa54:	4603      	mov	r3, r0
    aa56:	2b00      	cmp	r3, #0
    aa58:	d006      	beq.n	aa68 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    aa5a:	6838      	ldr	r0, [r7, #0]
    aa5c:	4b35      	ldr	r3, [pc, #212]	; (ab34 <_i2c_m_sync_init_impl+0x128>)
    aa5e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    aa60:	2102      	movs	r1, #2
    aa62:	6838      	ldr	r0, [r7, #0]
    aa64:	4b34      	ldr	r3, [pc, #208]	; (ab38 <_i2c_m_sync_init_impl+0x12c>)
    aa66:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    aa68:	68bb      	ldr	r3, [r7, #8]
    aa6a:	f043 0301 	orr.w	r3, r3, #1
    aa6e:	4619      	mov	r1, r3
    aa70:	6838      	ldr	r0, [r7, #0]
    aa72:	4b32      	ldr	r3, [pc, #200]	; (ab3c <_i2c_m_sync_init_impl+0x130>)
    aa74:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    aa76:	2101      	movs	r1, #1
    aa78:	6838      	ldr	r0, [r7, #0]
    aa7a:	4b2f      	ldr	r3, [pc, #188]	; (ab38 <_i2c_m_sync_init_impl+0x12c>)
    aa7c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    aa7e:	7bfa      	ldrb	r2, [r7, #15]
    aa80:	492a      	ldr	r1, [pc, #168]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    aa82:	4613      	mov	r3, r2
    aa84:	005b      	lsls	r3, r3, #1
    aa86:	4413      	add	r3, r2
    aa88:	00db      	lsls	r3, r3, #3
    aa8a:	440b      	add	r3, r1
    aa8c:	3304      	adds	r3, #4
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	4619      	mov	r1, r3
    aa92:	6838      	ldr	r0, [r7, #0]
    aa94:	4b29      	ldr	r3, [pc, #164]	; (ab3c <_i2c_m_sync_init_impl+0x130>)
    aa96:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    aa98:	7bfa      	ldrb	r2, [r7, #15]
    aa9a:	4924      	ldr	r1, [pc, #144]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    aa9c:	4613      	mov	r3, r2
    aa9e:	005b      	lsls	r3, r3, #1
    aaa0:	4413      	add	r3, r2
    aaa2:	00db      	lsls	r3, r3, #3
    aaa4:	440b      	add	r3, r1
    aaa6:	3308      	adds	r3, #8
    aaa8:	681b      	ldr	r3, [r3, #0]
    aaaa:	4619      	mov	r1, r3
    aaac:	6838      	ldr	r0, [r7, #0]
    aaae:	4b24      	ldr	r3, [pc, #144]	; (ab40 <_i2c_m_sync_init_impl+0x134>)
    aab0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    aab2:	7bfa      	ldrb	r2, [r7, #15]
    aab4:	491d      	ldr	r1, [pc, #116]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    aab6:	4613      	mov	r3, r2
    aab8:	005b      	lsls	r3, r3, #1
    aaba:	4413      	add	r3, r2
    aabc:	00db      	lsls	r3, r3, #3
    aabe:	440b      	add	r3, r1
    aac0:	330c      	adds	r3, #12
    aac2:	681b      	ldr	r3, [r3, #0]
    aac4:	4619      	mov	r1, r3
    aac6:	6838      	ldr	r0, [r7, #0]
    aac8:	4b1e      	ldr	r3, [pc, #120]	; (ab44 <_i2c_m_sync_init_impl+0x138>)
    aaca:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    aacc:	7bfa      	ldrb	r2, [r7, #15]
    aace:	4917      	ldr	r1, [pc, #92]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    aad0:	4613      	mov	r3, r2
    aad2:	005b      	lsls	r3, r3, #1
    aad4:	4413      	add	r3, r2
    aad6:	00db      	lsls	r3, r3, #3
    aad8:	440b      	add	r3, r1
    aada:	3304      	adds	r3, #4
    aadc:	681b      	ldr	r3, [r3, #0]
    aade:	0e1b      	lsrs	r3, r3, #24
    aae0:	b29b      	uxth	r3, r3
    aae2:	f003 0303 	and.w	r3, r3, #3
    aae6:	b29a      	uxth	r2, r3
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    aaec:	687b      	ldr	r3, [r7, #4]
    aaee:	899b      	ldrh	r3, [r3, #12]
    aaf0:	2b01      	cmp	r3, #1
    aaf2:	bf8c      	ite	hi
    aaf4:	2301      	movhi	r3, #1
    aaf6:	2300      	movls	r3, #0
    aaf8:	b2db      	uxtb	r3, r3
    aafa:	4619      	mov	r1, r3
    aafc:	6838      	ldr	r0, [r7, #0]
    aafe:	4b12      	ldr	r3, [pc, #72]	; (ab48 <_i2c_m_sync_init_impl+0x13c>)
    ab00:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    ab02:	7bfa      	ldrb	r2, [r7, #15]
    ab04:	4909      	ldr	r1, [pc, #36]	; (ab2c <_i2c_m_sync_init_impl+0x120>)
    ab06:	4613      	mov	r3, r2
    ab08:	005b      	lsls	r3, r3, #1
    ab0a:	4413      	add	r3, r2
    ab0c:	00db      	lsls	r3, r3, #3
    ab0e:	440b      	add	r3, r1
    ab10:	3312      	adds	r3, #18
    ab12:	881a      	ldrh	r2, [r3, #0]
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    ab18:	2300      	movs	r3, #0
}
    ab1a:	4618      	mov	r0, r3
    ab1c:	3710      	adds	r7, #16
    ab1e:	46bd      	mov	sp, r7
    ab20:	bd80      	pop	{r7, pc}
    ab22:	bf00      	nop
    ab24:	0000a341 	.word	0x0000a341
    ab28:	00009d15 	.word	0x00009d15
    ab2c:	20000410 	.word	0x20000410
    ab30:	00009eb9 	.word	0x00009eb9
    ab34:	00009e61 	.word	0x00009e61
    ab38:	00009cf1 	.word	0x00009cf1
    ab3c:	00009ee9 	.word	0x00009ee9
    ab40:	0000a091 	.word	0x0000a091
    ab44:	0000a0d9 	.word	0x0000a0d9
    ab48:	0000a115 	.word	0x0000a115

0000ab4c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    ab4c:	b580      	push	{r7, lr}
    ab4e:	b082      	sub	sp, #8
    ab50:	af00      	add	r7, sp, #0
    ab52:	6078      	str	r0, [r7, #4]
    ab54:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    ab56:	687b      	ldr	r3, [r7, #4]
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d004      	beq.n	ab66 <_spi_load_regs_master+0x1a>
    ab5c:	683b      	ldr	r3, [r7, #0]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d001      	beq.n	ab66 <_spi_load_regs_master+0x1a>
    ab62:	2301      	movs	r3, #1
    ab64:	e000      	b.n	ab68 <_spi_load_regs_master+0x1c>
    ab66:	2300      	movs	r3, #0
    ab68:	f003 0301 	and.w	r3, r3, #1
    ab6c:	b2db      	uxtb	r3, r3
    ab6e:	f640 1209 	movw	r2, #2313	; 0x909
    ab72:	4915      	ldr	r1, [pc, #84]	; (abc8 <_spi_load_regs_master+0x7c>)
    ab74:	4618      	mov	r0, r3
    ab76:	4b15      	ldr	r3, [pc, #84]	; (abcc <_spi_load_regs_master+0x80>)
    ab78:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ab7a:	683b      	ldr	r3, [r7, #0]
    ab7c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ab7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ab82:	f023 0301 	bic.w	r3, r3, #1
    ab86:	4619      	mov	r1, r3
    ab88:	6878      	ldr	r0, [r7, #4]
    ab8a:	4b11      	ldr	r3, [pc, #68]	; (abd0 <_spi_load_regs_master+0x84>)
    ab8c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    ab8e:	683b      	ldr	r3, [r7, #0]
    ab90:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    ab92:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    ab96:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    ab9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab9e:	4619      	mov	r1, r3
    aba0:	6878      	ldr	r0, [r7, #4]
    aba2:	4b0c      	ldr	r3, [pc, #48]	; (abd4 <_spi_load_regs_master+0x88>)
    aba4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    aba6:	683b      	ldr	r3, [r7, #0]
    aba8:	7b1b      	ldrb	r3, [r3, #12]
    abaa:	4619      	mov	r1, r3
    abac:	6878      	ldr	r0, [r7, #4]
    abae:	4b0a      	ldr	r3, [pc, #40]	; (abd8 <_spi_load_regs_master+0x8c>)
    abb0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    abb2:	683b      	ldr	r3, [r7, #0]
    abb4:	7b5b      	ldrb	r3, [r3, #13]
    abb6:	4619      	mov	r1, r3
    abb8:	6878      	ldr	r0, [r7, #4]
    abba:	4b08      	ldr	r3, [pc, #32]	; (abdc <_spi_load_regs_master+0x90>)
    abbc:	4798      	blx	r3
}
    abbe:	bf00      	nop
    abc0:	3708      	adds	r7, #8
    abc2:	46bd      	mov	sp, r7
    abc4:	bd80      	pop	{r7, pc}
    abc6:	bf00      	nop
    abc8:	00012b7c 	.word	0x00012b7c
    abcc:	00007261 	.word	0x00007261
    abd0:	00009f9d 	.word	0x00009f9d
    abd4:	0000a0b5 	.word	0x0000a0b5
    abd8:	0000a0f5 	.word	0x0000a0f5
    abdc:	0000a22d 	.word	0x0000a22d

0000abe0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    abe0:	b580      	push	{r7, lr}
    abe2:	b082      	sub	sp, #8
    abe4:	af00      	add	r7, sp, #0
    abe6:	6078      	str	r0, [r7, #4]
    abe8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    abea:	687b      	ldr	r3, [r7, #4]
    abec:	2b00      	cmp	r3, #0
    abee:	d004      	beq.n	abfa <_spi_load_regs_slave+0x1a>
    abf0:	683b      	ldr	r3, [r7, #0]
    abf2:	2b00      	cmp	r3, #0
    abf4:	d001      	beq.n	abfa <_spi_load_regs_slave+0x1a>
    abf6:	2301      	movs	r3, #1
    abf8:	e000      	b.n	abfc <_spi_load_regs_slave+0x1c>
    abfa:	2300      	movs	r3, #0
    abfc:	f003 0301 	and.w	r3, r3, #1
    ac00:	b2db      	uxtb	r3, r3
    ac02:	f640 121d 	movw	r2, #2333	; 0x91d
    ac06:	491a      	ldr	r1, [pc, #104]	; (ac70 <_spi_load_regs_slave+0x90>)
    ac08:	4618      	mov	r0, r3
    ac0a:	4b1a      	ldr	r3, [pc, #104]	; (ac74 <_spi_load_regs_slave+0x94>)
    ac0c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ac0e:	683b      	ldr	r3, [r7, #0]
    ac10:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ac12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ac16:	f023 0301 	bic.w	r3, r3, #1
    ac1a:	4619      	mov	r1, r3
    ac1c:	6878      	ldr	r0, [r7, #4]
    ac1e:	4b16      	ldr	r3, [pc, #88]	; (ac78 <_spi_load_regs_slave+0x98>)
    ac20:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    ac22:	683b      	ldr	r3, [r7, #0]
    ac24:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    ac26:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    ac2a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    ac2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ac32:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    ac36:	4619      	mov	r1, r3
    ac38:	6878      	ldr	r0, [r7, #4]
    ac3a:	4b10      	ldr	r3, [pc, #64]	; (ac7c <_spi_load_regs_slave+0x9c>)
    ac3c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    ac3e:	683b      	ldr	r3, [r7, #0]
    ac40:	689b      	ldr	r3, [r3, #8]
    ac42:	4619      	mov	r1, r3
    ac44:	6878      	ldr	r0, [r7, #4]
    ac46:	4b0e      	ldr	r3, [pc, #56]	; (ac80 <_spi_load_regs_slave+0xa0>)
    ac48:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ac4a:	683b      	ldr	r3, [r7, #0]
    ac4c:	7b5b      	ldrb	r3, [r3, #13]
    ac4e:	4619      	mov	r1, r3
    ac50:	6878      	ldr	r0, [r7, #4]
    ac52:	4b0c      	ldr	r3, [pc, #48]	; (ac84 <_spi_load_regs_slave+0xa4>)
    ac54:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    ac56:	bf00      	nop
    ac58:	f04f 31ff 	mov.w	r1, #4294967295
    ac5c:	6878      	ldr	r0, [r7, #4]
    ac5e:	4b0a      	ldr	r3, [pc, #40]	; (ac88 <_spi_load_regs_slave+0xa8>)
    ac60:	4798      	blx	r3
    ac62:	4603      	mov	r3, r0
    ac64:	2b00      	cmp	r3, #0
    ac66:	d1f7      	bne.n	ac58 <_spi_load_regs_slave+0x78>
		;
}
    ac68:	bf00      	nop
    ac6a:	3708      	adds	r7, #8
    ac6c:	46bd      	mov	sp, r7
    ac6e:	bd80      	pop	{r7, pc}
    ac70:	00012b7c 	.word	0x00012b7c
    ac74:	00007261 	.word	0x00007261
    ac78:	00009f9d 	.word	0x00009f9d
    ac7c:	0000a0b5 	.word	0x0000a0b5
    ac80:	0000a199 	.word	0x0000a199
    ac84:	0000a22d 	.word	0x0000a22d
    ac88:	00009d61 	.word	0x00009d61

0000ac8c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b084      	sub	sp, #16
    ac90:	af00      	add	r7, sp, #0
    ac92:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	4618      	mov	r0, r3
    ac98:	4b11      	ldr	r3, [pc, #68]	; (ace0 <_spi_get_regs+0x54>)
    ac9a:	4798      	blx	r3
    ac9c:	4603      	mov	r3, r0
    ac9e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    aca0:	2300      	movs	r3, #0
    aca2:	73fb      	strb	r3, [r7, #15]
    aca4:	e014      	b.n	acd0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    aca6:	7bfa      	ldrb	r2, [r7, #15]
    aca8:	490e      	ldr	r1, [pc, #56]	; (ace4 <_spi_get_regs+0x58>)
    acaa:	4613      	mov	r3, r2
    acac:	011b      	lsls	r3, r3, #4
    acae:	4413      	add	r3, r2
    acb0:	440b      	add	r3, r1
    acb2:	3310      	adds	r3, #16
    acb4:	781b      	ldrb	r3, [r3, #0]
    acb6:	7bba      	ldrb	r2, [r7, #14]
    acb8:	429a      	cmp	r2, r3
    acba:	d106      	bne.n	acca <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    acbc:	7bfa      	ldrb	r2, [r7, #15]
    acbe:	4613      	mov	r3, r2
    acc0:	011b      	lsls	r3, r3, #4
    acc2:	4413      	add	r3, r2
    acc4:	4a07      	ldr	r2, [pc, #28]	; (ace4 <_spi_get_regs+0x58>)
    acc6:	4413      	add	r3, r2
    acc8:	e006      	b.n	acd8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    acca:	7bfb      	ldrb	r3, [r7, #15]
    accc:	3301      	adds	r3, #1
    acce:	73fb      	strb	r3, [r7, #15]
    acd0:	7bfb      	ldrb	r3, [r7, #15]
    acd2:	2b01      	cmp	r3, #1
    acd4:	d9e7      	bls.n	aca6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    acd6:	2300      	movs	r3, #0
}
    acd8:	4618      	mov	r0, r3
    acda:	3710      	adds	r7, #16
    acdc:	46bd      	mov	sp, r7
    acde:	bd80      	pop	{r7, pc}
    ace0:	0000a2e5 	.word	0x0000a2e5
    ace4:	00012bb8 	.word	0x00012bb8

0000ace8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    ace8:	b580      	push	{r7, lr}
    acea:	b084      	sub	sp, #16
    acec:	af00      	add	r7, sp, #0
    acee:	6078      	str	r0, [r7, #4]
    acf0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    acf2:	683b      	ldr	r3, [r7, #0]
    acf4:	4618      	mov	r0, r3
    acf6:	4b35      	ldr	r3, [pc, #212]	; (adcc <_spi_m_sync_init+0xe4>)
    acf8:	4798      	blx	r3
    acfa:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    acfc:	687b      	ldr	r3, [r7, #4]
    acfe:	2b00      	cmp	r3, #0
    ad00:	d004      	beq.n	ad0c <_spi_m_sync_init+0x24>
    ad02:	683b      	ldr	r3, [r7, #0]
    ad04:	2b00      	cmp	r3, #0
    ad06:	d001      	beq.n	ad0c <_spi_m_sync_init+0x24>
    ad08:	2301      	movs	r3, #1
    ad0a:	e000      	b.n	ad0e <_spi_m_sync_init+0x26>
    ad0c:	2300      	movs	r3, #0
    ad0e:	f003 0301 	and.w	r3, r3, #1
    ad12:	b2db      	uxtb	r3, r3
    ad14:	f640 123f 	movw	r2, #2367	; 0x93f
    ad18:	492d      	ldr	r1, [pc, #180]	; (add0 <_spi_m_sync_init+0xe8>)
    ad1a:	4618      	mov	r0, r3
    ad1c:	4b2d      	ldr	r3, [pc, #180]	; (add4 <_spi_m_sync_init+0xec>)
    ad1e:	4798      	blx	r3

	if (regs == NULL) {
    ad20:	68fb      	ldr	r3, [r7, #12]
    ad22:	2b00      	cmp	r3, #0
    ad24:	d102      	bne.n	ad2c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    ad26:	f06f 030c 	mvn.w	r3, #12
    ad2a:	e04a      	b.n	adc2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    ad2c:	2101      	movs	r1, #1
    ad2e:	6838      	ldr	r0, [r7, #0]
    ad30:	4b29      	ldr	r3, [pc, #164]	; (add8 <_spi_m_sync_init+0xf0>)
    ad32:	4798      	blx	r3
    ad34:	4603      	mov	r3, r0
    ad36:	f083 0301 	eor.w	r3, r3, #1
    ad3a:	b2db      	uxtb	r3, r3
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d019      	beq.n	ad74 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    ad40:	68fb      	ldr	r3, [r7, #12]
    ad42:	681b      	ldr	r3, [r3, #0]
    ad44:	f003 031c 	and.w	r3, r3, #28
    ad48:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    ad4a:	2102      	movs	r1, #2
    ad4c:	6838      	ldr	r0, [r7, #0]
    ad4e:	4b23      	ldr	r3, [pc, #140]	; (addc <_spi_m_sync_init+0xf4>)
    ad50:	4798      	blx	r3
    ad52:	4603      	mov	r3, r0
    ad54:	2b00      	cmp	r3, #0
    ad56:	d006      	beq.n	ad66 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    ad58:	6838      	ldr	r0, [r7, #0]
    ad5a:	4b21      	ldr	r3, [pc, #132]	; (ade0 <_spi_m_sync_init+0xf8>)
    ad5c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    ad5e:	2102      	movs	r1, #2
    ad60:	6838      	ldr	r0, [r7, #0]
    ad62:	4b20      	ldr	r3, [pc, #128]	; (ade4 <_spi_m_sync_init+0xfc>)
    ad64:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    ad66:	68bb      	ldr	r3, [r7, #8]
    ad68:	f043 0301 	orr.w	r3, r3, #1
    ad6c:	4619      	mov	r1, r3
    ad6e:	6838      	ldr	r0, [r7, #0]
    ad70:	4b1d      	ldr	r3, [pc, #116]	; (ade8 <_spi_m_sync_init+0x100>)
    ad72:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    ad74:	2101      	movs	r1, #1
    ad76:	6838      	ldr	r0, [r7, #0]
    ad78:	4b1a      	ldr	r3, [pc, #104]	; (ade4 <_spi_m_sync_init+0xfc>)
    ad7a:	4798      	blx	r3

	dev->prvt = hw;
    ad7c:	687b      	ldr	r3, [r7, #4]
    ad7e:	683a      	ldr	r2, [r7, #0]
    ad80:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    ad82:	68fb      	ldr	r3, [r7, #12]
    ad84:	681b      	ldr	r3, [r3, #0]
    ad86:	f003 031c 	and.w	r3, r3, #28
    ad8a:	2b08      	cmp	r3, #8
    ad8c:	d104      	bne.n	ad98 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    ad8e:	68f9      	ldr	r1, [r7, #12]
    ad90:	6838      	ldr	r0, [r7, #0]
    ad92:	4b16      	ldr	r3, [pc, #88]	; (adec <_spi_m_sync_init+0x104>)
    ad94:	4798      	blx	r3
    ad96:	e003      	b.n	ada0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    ad98:	68f9      	ldr	r1, [r7, #12]
    ad9a:	6838      	ldr	r0, [r7, #0]
    ad9c:	4b14      	ldr	r3, [pc, #80]	; (adf0 <_spi_m_sync_init+0x108>)
    ad9e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    ada0:	68fb      	ldr	r3, [r7, #12]
    ada2:	685b      	ldr	r3, [r3, #4]
    ada4:	f003 0307 	and.w	r3, r3, #7
    ada8:	2b00      	cmp	r3, #0
    adaa:	d101      	bne.n	adb0 <_spi_m_sync_init+0xc8>
    adac:	2201      	movs	r2, #1
    adae:	e000      	b.n	adb2 <_spi_m_sync_init+0xca>
    adb0:	2202      	movs	r2, #2
    adb2:	687b      	ldr	r3, [r7, #4]
    adb4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    adb6:	68fb      	ldr	r3, [r7, #12]
    adb8:	89db      	ldrh	r3, [r3, #14]
    adba:	b29a      	uxth	r2, r3
    adbc:	687b      	ldr	r3, [r7, #4]
    adbe:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    adc0:	2300      	movs	r3, #0
}
    adc2:	4618      	mov	r0, r3
    adc4:	3710      	adds	r7, #16
    adc6:	46bd      	mov	sp, r7
    adc8:	bd80      	pop	{r7, pc}
    adca:	bf00      	nop
    adcc:	0000ac8d 	.word	0x0000ac8d
    add0:	00012b7c 	.word	0x00012b7c
    add4:	00007261 	.word	0x00007261
    add8:	00009d61 	.word	0x00009d61
    addc:	00009f6d 	.word	0x00009f6d
    ade0:	00009f45 	.word	0x00009f45
    ade4:	00009d3d 	.word	0x00009d3d
    ade8:	00009f9d 	.word	0x00009f9d
    adec:	0000abe1 	.word	0x0000abe1
    adf0:	0000ab4d 	.word	0x0000ab4d

0000adf4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    adf4:	b580      	push	{r7, lr}
    adf6:	b082      	sub	sp, #8
    adf8:	af00      	add	r7, sp, #0
    adfa:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    adfc:	bf00      	nop
    adfe:	2103      	movs	r1, #3
    ae00:	6878      	ldr	r0, [r7, #4]
    ae02:	4b06      	ldr	r3, [pc, #24]	; (ae1c <_spi_wait_bus_idle+0x28>)
    ae04:	4798      	blx	r3
    ae06:	4603      	mov	r3, r0
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d0f8      	beq.n	adfe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    ae0c:	2103      	movs	r1, #3
    ae0e:	6878      	ldr	r0, [r7, #4]
    ae10:	4b03      	ldr	r3, [pc, #12]	; (ae20 <_spi_wait_bus_idle+0x2c>)
    ae12:	4798      	blx	r3
}
    ae14:	bf00      	nop
    ae16:	3708      	adds	r7, #8
    ae18:	46bd      	mov	sp, r7
    ae1a:	bd80      	pop	{r7, pc}
    ae1c:	00009dd7 	.word	0x00009dd7
    ae20:	00009e19 	.word	0x00009e19

0000ae24 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b086      	sub	sp, #24
    ae28:	af00      	add	r7, sp, #0
    ae2a:	60f8      	str	r0, [r7, #12]
    ae2c:	60b9      	str	r1, [r7, #8]
    ae2e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    ae30:	68bb      	ldr	r3, [r7, #8]
    ae32:	f003 0304 	and.w	r3, r3, #4
    ae36:	2b00      	cmp	r3, #0
    ae38:	d101      	bne.n	ae3e <_spi_rx_check_and_receive+0x1a>
		return false;
    ae3a:	2300      	movs	r3, #0
    ae3c:	e022      	b.n	ae84 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    ae3e:	68f8      	ldr	r0, [r7, #12]
    ae40:	4b12      	ldr	r3, [pc, #72]	; (ae8c <_spi_rx_check_and_receive+0x68>)
    ae42:	4798      	blx	r3
    ae44:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    ae46:	687b      	ldr	r3, [r7, #4]
    ae48:	685b      	ldr	r3, [r3, #4]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d014      	beq.n	ae78 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    ae4e:	687b      	ldr	r3, [r7, #4]
    ae50:	685b      	ldr	r3, [r3, #4]
    ae52:	1c59      	adds	r1, r3, #1
    ae54:	687a      	ldr	r2, [r7, #4]
    ae56:	6051      	str	r1, [r2, #4]
    ae58:	697a      	ldr	r2, [r7, #20]
    ae5a:	b2d2      	uxtb	r2, r2
    ae5c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    ae5e:	687b      	ldr	r3, [r7, #4]
    ae60:	7c1b      	ldrb	r3, [r3, #16]
    ae62:	2b01      	cmp	r3, #1
    ae64:	d908      	bls.n	ae78 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    ae66:	687b      	ldr	r3, [r7, #4]
    ae68:	685b      	ldr	r3, [r3, #4]
    ae6a:	1c59      	adds	r1, r3, #1
    ae6c:	687a      	ldr	r2, [r7, #4]
    ae6e:	6051      	str	r1, [r2, #4]
    ae70:	697a      	ldr	r2, [r7, #20]
    ae72:	0a12      	lsrs	r2, r2, #8
    ae74:	b2d2      	uxtb	r2, r2
    ae76:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	68db      	ldr	r3, [r3, #12]
    ae7c:	1c5a      	adds	r2, r3, #1
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	60da      	str	r2, [r3, #12]

	return true;
    ae82:	2301      	movs	r3, #1
}
    ae84:	4618      	mov	r0, r3
    ae86:	3718      	adds	r7, #24
    ae88:	46bd      	mov	sp, r7
    ae8a:	bd80      	pop	{r7, pc}
    ae8c:	0000a215 	.word	0x0000a215

0000ae90 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    ae90:	b580      	push	{r7, lr}
    ae92:	b086      	sub	sp, #24
    ae94:	af00      	add	r7, sp, #0
    ae96:	60f8      	str	r0, [r7, #12]
    ae98:	60b9      	str	r1, [r7, #8]
    ae9a:	607a      	str	r2, [r7, #4]
    ae9c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    ae9e:	68bb      	ldr	r3, [r7, #8]
    aea0:	f003 0301 	and.w	r3, r3, #1
    aea4:	2b00      	cmp	r3, #0
    aea6:	d028      	beq.n	aefa <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    aea8:	687b      	ldr	r3, [r7, #4]
    aeaa:	681b      	ldr	r3, [r3, #0]
    aeac:	2b00      	cmp	r3, #0
    aeae:	d018      	beq.n	aee2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    aeb0:	687b      	ldr	r3, [r7, #4]
    aeb2:	681b      	ldr	r3, [r3, #0]
    aeb4:	1c59      	adds	r1, r3, #1
    aeb6:	687a      	ldr	r2, [r7, #4]
    aeb8:	6011      	str	r1, [r2, #0]
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    aebe:	687b      	ldr	r3, [r7, #4]
    aec0:	7c1b      	ldrb	r3, [r3, #16]
    aec2:	2b01      	cmp	r3, #1
    aec4:	d90f      	bls.n	aee6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    aec6:	687b      	ldr	r3, [r7, #4]
    aec8:	681b      	ldr	r3, [r3, #0]
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	021b      	lsls	r3, r3, #8
    aece:	461a      	mov	r2, r3
    aed0:	697b      	ldr	r3, [r7, #20]
    aed2:	4313      	orrs	r3, r2
    aed4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    aed6:	687b      	ldr	r3, [r7, #4]
    aed8:	681b      	ldr	r3, [r3, #0]
    aeda:	1c5a      	adds	r2, r3, #1
    aedc:	687b      	ldr	r3, [r7, #4]
    aede:	601a      	str	r2, [r3, #0]
    aee0:	e001      	b.n	aee6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    aee2:	887b      	ldrh	r3, [r7, #2]
    aee4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    aee6:	687b      	ldr	r3, [r7, #4]
    aee8:	689b      	ldr	r3, [r3, #8]
    aeea:	1c5a      	adds	r2, r3, #1
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    aef0:	6979      	ldr	r1, [r7, #20]
    aef2:	68f8      	ldr	r0, [r7, #12]
    aef4:	4b03      	ldr	r3, [pc, #12]	; (af04 <_spi_tx_check_and_send+0x74>)
    aef6:	4798      	blx	r3
    aef8:	e000      	b.n	aefc <_spi_tx_check_and_send+0x6c>
		return;
    aefa:	bf00      	nop
}
    aefc:	3718      	adds	r7, #24
    aefe:	46bd      	mov	sp, r7
    af00:	bd80      	pop	{r7, pc}
    af02:	bf00      	nop
    af04:	0000a1f9 	.word	0x0000a1f9

0000af08 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    af08:	b580      	push	{r7, lr}
    af0a:	b082      	sub	sp, #8
    af0c:	af00      	add	r7, sp, #0
    af0e:	6078      	str	r0, [r7, #4]
    af10:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af18:	2b00      	cmp	r3, #0
    af1a:	d00b      	beq.n	af34 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    af1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    af20:	6838      	ldr	r0, [r7, #0]
    af22:	4b07      	ldr	r3, [pc, #28]	; (af40 <_spi_err_check+0x38>)
    af24:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    af26:	2180      	movs	r1, #128	; 0x80
    af28:	6838      	ldr	r0, [r7, #0]
    af2a:	4b06      	ldr	r3, [pc, #24]	; (af44 <_spi_err_check+0x3c>)
    af2c:	4798      	blx	r3
		return ERR_OVERFLOW;
    af2e:	f06f 0312 	mvn.w	r3, #18
    af32:	e000      	b.n	af36 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    af34:	2300      	movs	r3, #0
}
    af36:	4618      	mov	r0, r3
    af38:	3708      	adds	r7, #8
    af3a:	46bd      	mov	sp, r7
    af3c:	bd80      	pop	{r7, pc}
    af3e:	bf00      	nop
    af40:	0000a24d 	.word	0x0000a24d
    af44:	00009e19 	.word	0x00009e19

0000af48 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    af48:	b590      	push	{r4, r7, lr}
    af4a:	b08b      	sub	sp, #44	; 0x2c
    af4c:	af00      	add	r7, sp, #0
    af4e:	6078      	str	r0, [r7, #4]
    af50:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    af58:	2300      	movs	r3, #0
    af5a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    af5c:	683b      	ldr	r3, [r7, #0]
    af5e:	681b      	ldr	r3, [r3, #0]
    af60:	60bb      	str	r3, [r7, #8]
    af62:	683b      	ldr	r3, [r7, #0]
    af64:	685b      	ldr	r3, [r3, #4]
    af66:	60fb      	str	r3, [r7, #12]
    af68:	2300      	movs	r3, #0
    af6a:	613b      	str	r3, [r7, #16]
    af6c:	2300      	movs	r3, #0
    af6e:	617b      	str	r3, [r7, #20]
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	791b      	ldrb	r3, [r3, #4]
    af74:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    af76:	687b      	ldr	r3, [r7, #4]
    af78:	2b00      	cmp	r3, #0
    af7a:	d004      	beq.n	af86 <_spi_m_sync_trans+0x3e>
    af7c:	6a3b      	ldr	r3, [r7, #32]
    af7e:	2b00      	cmp	r3, #0
    af80:	d001      	beq.n	af86 <_spi_m_sync_trans+0x3e>
    af82:	2301      	movs	r3, #1
    af84:	e000      	b.n	af88 <_spi_m_sync_trans+0x40>
    af86:	2300      	movs	r3, #0
    af88:	f003 0301 	and.w	r3, r3, #1
    af8c:	b2db      	uxtb	r3, r3
    af8e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    af92:	492b      	ldr	r1, [pc, #172]	; (b040 <_spi_m_sync_trans+0xf8>)
    af94:	4618      	mov	r0, r3
    af96:	4b2b      	ldr	r3, [pc, #172]	; (b044 <_spi_m_sync_trans+0xfc>)
    af98:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    af9a:	2107      	movs	r1, #7
    af9c:	6a38      	ldr	r0, [r7, #32]
    af9e:	4b2a      	ldr	r3, [pc, #168]	; (b048 <_spi_m_sync_trans+0x100>)
    afa0:	4798      	blx	r3
    afa2:	4603      	mov	r3, r0
    afa4:	2b00      	cmp	r3, #0
    afa6:	d002      	beq.n	afae <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    afa8:	f06f 0303 	mvn.w	r3, #3
    afac:	e043      	b.n	b036 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    afae:	6a38      	ldr	r0, [r7, #32]
    afb0:	4b26      	ldr	r3, [pc, #152]	; (b04c <_spi_m_sync_trans+0x104>)
    afb2:	4798      	blx	r3
    afb4:	4603      	mov	r3, r0
    afb6:	f083 0301 	eor.w	r3, r3, #1
    afba:	b2db      	uxtb	r3, r3
    afbc:	2b00      	cmp	r3, #0
    afbe:	d002      	beq.n	afc6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    afc0:	f06f 0313 	mvn.w	r3, #19
    afc4:	e037      	b.n	b036 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    afc6:	6a38      	ldr	r0, [r7, #32]
    afc8:	4b21      	ldr	r3, [pc, #132]	; (b050 <_spi_m_sync_trans+0x108>)
    afca:	4798      	blx	r3
    afcc:	4603      	mov	r3, r0
    afce:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    afd0:	f107 0308 	add.w	r3, r7, #8
    afd4:	461a      	mov	r2, r3
    afd6:	69f9      	ldr	r1, [r7, #28]
    afd8:	6a38      	ldr	r0, [r7, #32]
    afda:	4b1e      	ldr	r3, [pc, #120]	; (b054 <_spi_m_sync_trans+0x10c>)
    afdc:	4798      	blx	r3
    afde:	4603      	mov	r3, r0
    afe0:	f083 0301 	eor.w	r3, r3, #1
    afe4:	b2db      	uxtb	r3, r3
    afe6:	2b00      	cmp	r3, #0
    afe8:	d00b      	beq.n	b002 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    afea:	697a      	ldr	r2, [r7, #20]
    afec:	693b      	ldr	r3, [r7, #16]
    afee:	429a      	cmp	r2, r3
    aff0:	d307      	bcc.n	b002 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    aff2:	687b      	ldr	r3, [r7, #4]
    aff4:	88db      	ldrh	r3, [r3, #6]
    aff6:	f107 0208 	add.w	r2, r7, #8
    affa:	69f9      	ldr	r1, [r7, #28]
    affc:	6a38      	ldr	r0, [r7, #32]
    affe:	4c16      	ldr	r4, [pc, #88]	; (b058 <_spi_m_sync_trans+0x110>)
    b000:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    b002:	6a39      	ldr	r1, [r7, #32]
    b004:	69f8      	ldr	r0, [r7, #28]
    b006:	4b15      	ldr	r3, [pc, #84]	; (b05c <_spi_m_sync_trans+0x114>)
    b008:	4798      	blx	r3
    b00a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b00e:	2b00      	cmp	r3, #0
    b010:	db0c      	blt.n	b02c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    b012:	693a      	ldr	r2, [r7, #16]
    b014:	683b      	ldr	r3, [r7, #0]
    b016:	689b      	ldr	r3, [r3, #8]
    b018:	429a      	cmp	r2, r3
    b01a:	d3d4      	bcc.n	afc6 <_spi_m_sync_trans+0x7e>
    b01c:	697a      	ldr	r2, [r7, #20]
    b01e:	683b      	ldr	r3, [r7, #0]
    b020:	689b      	ldr	r3, [r3, #8]
    b022:	429a      	cmp	r2, r3
    b024:	d3cf      	bcc.n	afc6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    b026:	693b      	ldr	r3, [r7, #16]
    b028:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    b02a:	e000      	b.n	b02e <_spi_m_sync_trans+0xe6>
			break;
    b02c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    b02e:	6a38      	ldr	r0, [r7, #32]
    b030:	4b0b      	ldr	r3, [pc, #44]	; (b060 <_spi_m_sync_trans+0x118>)
    b032:	4798      	blx	r3

	return rc;
    b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b036:	4618      	mov	r0, r3
    b038:	372c      	adds	r7, #44	; 0x2c
    b03a:	46bd      	mov	sp, r7
    b03c:	bd90      	pop	{r4, r7, pc}
    b03e:	bf00      	nop
    b040:	00012b7c 	.word	0x00012b7c
    b044:	00007261 	.word	0x00007261
    b048:	00009d61 	.word	0x00009d61
    b04c:	00009f0d 	.word	0x00009f0d
    b050:	00009dff 	.word	0x00009dff
    b054:	0000ae25 	.word	0x0000ae25
    b058:	0000ae91 	.word	0x0000ae91
    b05c:	0000af09 	.word	0x0000af09
    b060:	0000adf5 	.word	0x0000adf5

0000b064 <__NVIC_EnableIRQ>:
{
    b064:	b480      	push	{r7}
    b066:	b083      	sub	sp, #12
    b068:	af00      	add	r7, sp, #0
    b06a:	4603      	mov	r3, r0
    b06c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b06e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b072:	2b00      	cmp	r3, #0
    b074:	db0b      	blt.n	b08e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b076:	4909      	ldr	r1, [pc, #36]	; (b09c <__NVIC_EnableIRQ+0x38>)
    b078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b07c:	095b      	lsrs	r3, r3, #5
    b07e:	88fa      	ldrh	r2, [r7, #6]
    b080:	f002 021f 	and.w	r2, r2, #31
    b084:	2001      	movs	r0, #1
    b086:	fa00 f202 	lsl.w	r2, r0, r2
    b08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b08e:	bf00      	nop
    b090:	370c      	adds	r7, #12
    b092:	46bd      	mov	sp, r7
    b094:	f85d 7b04 	ldr.w	r7, [sp], #4
    b098:	4770      	bx	lr
    b09a:	bf00      	nop
    b09c:	e000e100 	.word	0xe000e100

0000b0a0 <__NVIC_DisableIRQ>:
{
    b0a0:	b480      	push	{r7}
    b0a2:	b083      	sub	sp, #12
    b0a4:	af00      	add	r7, sp, #0
    b0a6:	4603      	mov	r3, r0
    b0a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b0aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0ae:	2b00      	cmp	r3, #0
    b0b0:	db10      	blt.n	b0d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b0b2:	490b      	ldr	r1, [pc, #44]	; (b0e0 <__NVIC_DisableIRQ+0x40>)
    b0b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0b8:	095b      	lsrs	r3, r3, #5
    b0ba:	88fa      	ldrh	r2, [r7, #6]
    b0bc:	f002 021f 	and.w	r2, r2, #31
    b0c0:	2001      	movs	r0, #1
    b0c2:	fa00 f202 	lsl.w	r2, r0, r2
    b0c6:	3320      	adds	r3, #32
    b0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    b0cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b0d0:	f3bf 8f6f 	isb	sy
}
    b0d4:	bf00      	nop
    b0d6:	370c      	adds	r7, #12
    b0d8:	46bd      	mov	sp, r7
    b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0de:	4770      	bx	lr
    b0e0:	e000e100 	.word	0xe000e100

0000b0e4 <__NVIC_ClearPendingIRQ>:
{
    b0e4:	b480      	push	{r7}
    b0e6:	b083      	sub	sp, #12
    b0e8:	af00      	add	r7, sp, #0
    b0ea:	4603      	mov	r3, r0
    b0ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b0ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	db0c      	blt.n	b110 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b0f6:	4909      	ldr	r1, [pc, #36]	; (b11c <__NVIC_ClearPendingIRQ+0x38>)
    b0f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0fc:	095b      	lsrs	r3, r3, #5
    b0fe:	88fa      	ldrh	r2, [r7, #6]
    b100:	f002 021f 	and.w	r2, r2, #31
    b104:	2001      	movs	r0, #1
    b106:	fa00 f202 	lsl.w	r2, r0, r2
    b10a:	3360      	adds	r3, #96	; 0x60
    b10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b110:	bf00      	nop
    b112:	370c      	adds	r7, #12
    b114:	46bd      	mov	sp, r7
    b116:	f85d 7b04 	ldr.w	r7, [sp], #4
    b11a:	4770      	bx	lr
    b11c:	e000e100 	.word	0xe000e100

0000b120 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    b120:	b480      	push	{r7}
    b122:	b083      	sub	sp, #12
    b124:	af00      	add	r7, sp, #0
    b126:	6078      	str	r0, [r7, #4]
    b128:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    b12a:	bf00      	nop
    b12c:	687b      	ldr	r3, [r7, #4]
    b12e:	689a      	ldr	r2, [r3, #8]
    b130:	683b      	ldr	r3, [r7, #0]
    b132:	4013      	ands	r3, r2
    b134:	2b00      	cmp	r3, #0
    b136:	d1f9      	bne.n	b12c <hri_tcc_wait_for_sync+0xc>
	};
}
    b138:	bf00      	nop
    b13a:	370c      	adds	r7, #12
    b13c:	46bd      	mov	sp, r7
    b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b142:	4770      	bx	lr

0000b144 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    b144:	b480      	push	{r7}
    b146:	b083      	sub	sp, #12
    b148:	af00      	add	r7, sp, #0
    b14a:	6078      	str	r0, [r7, #4]
    b14c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	689a      	ldr	r2, [r3, #8]
    b152:	683b      	ldr	r3, [r7, #0]
    b154:	4013      	ands	r3, r2
    b156:	2b00      	cmp	r3, #0
    b158:	bf14      	ite	ne
    b15a:	2301      	movne	r3, #1
    b15c:	2300      	moveq	r3, #0
    b15e:	b2db      	uxtb	r3, r3
}
    b160:	4618      	mov	r0, r3
    b162:	370c      	adds	r7, #12
    b164:	46bd      	mov	sp, r7
    b166:	f85d 7b04 	ldr.w	r7, [sp], #4
    b16a:	4770      	bx	lr

0000b16c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    b16c:	b480      	push	{r7}
    b16e:	b083      	sub	sp, #12
    b170:	af00      	add	r7, sp, #0
    b172:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b178:	f003 0301 	and.w	r3, r3, #1
    b17c:	2b00      	cmp	r3, #0
    b17e:	bf14      	ite	ne
    b180:	2301      	movne	r3, #1
    b182:	2300      	moveq	r3, #0
    b184:	b2db      	uxtb	r3, r3
}
    b186:	4618      	mov	r0, r3
    b188:	370c      	adds	r7, #12
    b18a:	46bd      	mov	sp, r7
    b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b190:	4770      	bx	lr

0000b192 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    b192:	b480      	push	{r7}
    b194:	b083      	sub	sp, #12
    b196:	af00      	add	r7, sp, #0
    b198:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    b19a:	687b      	ldr	r3, [r7, #4]
    b19c:	2201      	movs	r2, #1
    b19e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    b1a0:	bf00      	nop
    b1a2:	370c      	adds	r7, #12
    b1a4:	46bd      	mov	sp, r7
    b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1aa:	4770      	bx	lr

0000b1ac <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    b1ac:	b480      	push	{r7}
    b1ae:	b083      	sub	sp, #12
    b1b0:	af00      	add	r7, sp, #0
    b1b2:	6078      	str	r0, [r7, #4]
    b1b4:	460b      	mov	r3, r1
    b1b6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	78fa      	ldrb	r2, [r7, #3]
    b1bc:	715a      	strb	r2, [r3, #5]
}
    b1be:	bf00      	nop
    b1c0:	370c      	adds	r7, #12
    b1c2:	46bd      	mov	sp, r7
    b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1c8:	4770      	bx	lr

0000b1ca <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    b1ca:	b480      	push	{r7}
    b1cc:	b083      	sub	sp, #12
    b1ce:	af00      	add	r7, sp, #0
    b1d0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    b1d2:	687b      	ldr	r3, [r7, #4]
    b1d4:	2201      	movs	r2, #1
    b1d6:	629a      	str	r2, [r3, #40]	; 0x28
}
    b1d8:	bf00      	nop
    b1da:	370c      	adds	r7, #12
    b1dc:	46bd      	mov	sp, r7
    b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1e2:	4770      	bx	lr

0000b1e4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b082      	sub	sp, #8
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    b1ec:	687b      	ldr	r3, [r7, #4]
    b1ee:	681b      	ldr	r3, [r3, #0]
    b1f0:	f043 0201 	orr.w	r2, r3, #1
    b1f4:	687b      	ldr	r3, [r7, #4]
    b1f6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    b1f8:	2101      	movs	r1, #1
    b1fa:	6878      	ldr	r0, [r7, #4]
    b1fc:	4b02      	ldr	r3, [pc, #8]	; (b208 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    b1fe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b200:	bf00      	nop
    b202:	3708      	adds	r7, #8
    b204:	46bd      	mov	sp, r7
    b206:	bd80      	pop	{r7, pc}
    b208:	0000b121 	.word	0x0000b121

0000b20c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b20c:	b580      	push	{r7, lr}
    b20e:	b082      	sub	sp, #8
    b210:	af00      	add	r7, sp, #0
    b212:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	f043 0202 	orr.w	r2, r3, #2
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b220:	2103      	movs	r1, #3
    b222:	6878      	ldr	r0, [r7, #4]
    b224:	4b02      	ldr	r3, [pc, #8]	; (b230 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    b226:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b228:	bf00      	nop
    b22a:	3708      	adds	r7, #8
    b22c:	46bd      	mov	sp, r7
    b22e:	bd80      	pop	{r7, pc}
    b230:	0000b121 	.word	0x0000b121

0000b234 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b234:	b580      	push	{r7, lr}
    b236:	b084      	sub	sp, #16
    b238:	af00      	add	r7, sp, #0
    b23a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b23c:	2103      	movs	r1, #3
    b23e:	6878      	ldr	r0, [r7, #4]
    b240:	4b09      	ldr	r3, [pc, #36]	; (b268 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    b242:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	681b      	ldr	r3, [r3, #0]
    b248:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    b24a:	68fb      	ldr	r3, [r7, #12]
    b24c:	085b      	lsrs	r3, r3, #1
    b24e:	f003 0301 	and.w	r3, r3, #1
    b252:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b254:	68fb      	ldr	r3, [r7, #12]
    b256:	2b00      	cmp	r3, #0
    b258:	bf14      	ite	ne
    b25a:	2301      	movne	r3, #1
    b25c:	2300      	moveq	r3, #0
    b25e:	b2db      	uxtb	r3, r3
}
    b260:	4618      	mov	r0, r3
    b262:	3710      	adds	r7, #16
    b264:	46bd      	mov	sp, r7
    b266:	bd80      	pop	{r7, pc}
    b268:	0000b121 	.word	0x0000b121

0000b26c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b26c:	b580      	push	{r7, lr}
    b26e:	b082      	sub	sp, #8
    b270:	af00      	add	r7, sp, #0
    b272:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	681b      	ldr	r3, [r3, #0]
    b278:	f023 0202 	bic.w	r2, r3, #2
    b27c:	687b      	ldr	r3, [r7, #4]
    b27e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b280:	2103      	movs	r1, #3
    b282:	6878      	ldr	r0, [r7, #4]
    b284:	4b02      	ldr	r3, [pc, #8]	; (b290 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    b286:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b288:	bf00      	nop
    b28a:	3708      	adds	r7, #8
    b28c:	46bd      	mov	sp, r7
    b28e:	bd80      	pop	{r7, pc}
    b290:	0000b121 	.word	0x0000b121

0000b294 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    b294:	b580      	push	{r7, lr}
    b296:	b084      	sub	sp, #16
    b298:	af00      	add	r7, sp, #0
    b29a:	6078      	str	r0, [r7, #4]
    b29c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b29e:	2103      	movs	r1, #3
    b2a0:	6878      	ldr	r0, [r7, #4]
    b2a2:	4b07      	ldr	r3, [pc, #28]	; (b2c0 <hri_tcc_get_CTRLA_reg+0x2c>)
    b2a4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    b2a6:	687b      	ldr	r3, [r7, #4]
    b2a8:	681b      	ldr	r3, [r3, #0]
    b2aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b2ac:	68fa      	ldr	r2, [r7, #12]
    b2ae:	683b      	ldr	r3, [r7, #0]
    b2b0:	4013      	ands	r3, r2
    b2b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    b2b4:	68fb      	ldr	r3, [r7, #12]
}
    b2b6:	4618      	mov	r0, r3
    b2b8:	3710      	adds	r7, #16
    b2ba:	46bd      	mov	sp, r7
    b2bc:	bd80      	pop	{r7, pc}
    b2be:	bf00      	nop
    b2c0:	0000b121 	.word	0x0000b121

0000b2c4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    b2c4:	b580      	push	{r7, lr}
    b2c6:	b082      	sub	sp, #8
    b2c8:	af00      	add	r7, sp, #0
    b2ca:	6078      	str	r0, [r7, #4]
    b2cc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	683a      	ldr	r2, [r7, #0]
    b2d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b2d4:	2103      	movs	r1, #3
    b2d6:	6878      	ldr	r0, [r7, #4]
    b2d8:	4b02      	ldr	r3, [pc, #8]	; (b2e4 <hri_tcc_write_CTRLA_reg+0x20>)
    b2da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b2dc:	bf00      	nop
    b2de:	3708      	adds	r7, #8
    b2e0:	46bd      	mov	sp, r7
    b2e2:	bd80      	pop	{r7, pc}
    b2e4:	0000b121 	.word	0x0000b121

0000b2e8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    b2e8:	b480      	push	{r7}
    b2ea:	b083      	sub	sp, #12
    b2ec:	af00      	add	r7, sp, #0
    b2ee:	6078      	str	r0, [r7, #4]
    b2f0:	460b      	mov	r3, r1
    b2f2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	78fa      	ldrb	r2, [r7, #3]
    b2f8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    b2fa:	bf00      	nop
    b2fc:	370c      	adds	r7, #12
    b2fe:	46bd      	mov	sp, r7
    b300:	f85d 7b04 	ldr.w	r7, [sp], #4
    b304:	4770      	bx	lr

0000b306 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    b306:	b480      	push	{r7}
    b308:	b083      	sub	sp, #12
    b30a:	af00      	add	r7, sp, #0
    b30c:	6078      	str	r0, [r7, #4]
    b30e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	683a      	ldr	r2, [r7, #0]
    b314:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    b316:	bf00      	nop
    b318:	370c      	adds	r7, #12
    b31a:	46bd      	mov	sp, r7
    b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b320:	4770      	bx	lr
	...

0000b324 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    b324:	b580      	push	{r7, lr}
    b326:	b082      	sub	sp, #8
    b328:	af00      	add	r7, sp, #0
    b32a:	6078      	str	r0, [r7, #4]
    b32c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    b32e:	687b      	ldr	r3, [r7, #4]
    b330:	683a      	ldr	r2, [r7, #0]
    b332:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    b334:	2180      	movs	r1, #128	; 0x80
    b336:	6878      	ldr	r0, [r7, #4]
    b338:	4b02      	ldr	r3, [pc, #8]	; (b344 <hri_tcc_write_PER_reg+0x20>)
    b33a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b33c:	bf00      	nop
    b33e:	3708      	adds	r7, #8
    b340:	46bd      	mov	sp, r7
    b342:	bd80      	pop	{r7, pc}
    b344:	0000b121 	.word	0x0000b121

0000b348 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    b348:	b580      	push	{r7, lr}
    b34a:	b082      	sub	sp, #8
    b34c:	af00      	add	r7, sp, #0
    b34e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    b350:	2180      	movs	r1, #128	; 0x80
    b352:	6878      	ldr	r0, [r7, #4]
    b354:	4b03      	ldr	r3, [pc, #12]	; (b364 <hri_tcc_read_PER_reg+0x1c>)
    b356:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    b358:	687b      	ldr	r3, [r7, #4]
    b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    b35c:	4618      	mov	r0, r3
    b35e:	3708      	adds	r7, #8
    b360:	46bd      	mov	sp, r7
    b362:	bd80      	pop	{r7, pc}
    b364:	0000b121 	.word	0x0000b121

0000b368 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    b368:	b480      	push	{r7}
    b36a:	b083      	sub	sp, #12
    b36c:	af00      	add	r7, sp, #0
    b36e:	6078      	str	r0, [r7, #4]
    b370:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	4a0c      	ldr	r2, [pc, #48]	; (b3a8 <_tcc_init_irq_param+0x40>)
    b376:	4293      	cmp	r3, r2
    b378:	d102      	bne.n	b380 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    b37a:	4a0c      	ldr	r2, [pc, #48]	; (b3ac <_tcc_init_irq_param+0x44>)
    b37c:	683b      	ldr	r3, [r7, #0]
    b37e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	4a0b      	ldr	r2, [pc, #44]	; (b3b0 <_tcc_init_irq_param+0x48>)
    b384:	4293      	cmp	r3, r2
    b386:	d102      	bne.n	b38e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    b388:	4a0a      	ldr	r2, [pc, #40]	; (b3b4 <_tcc_init_irq_param+0x4c>)
    b38a:	683b      	ldr	r3, [r7, #0]
    b38c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	4a09      	ldr	r2, [pc, #36]	; (b3b8 <_tcc_init_irq_param+0x50>)
    b392:	4293      	cmp	r3, r2
    b394:	d102      	bne.n	b39c <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    b396:	4a09      	ldr	r2, [pc, #36]	; (b3bc <_tcc_init_irq_param+0x54>)
    b398:	683b      	ldr	r3, [r7, #0]
    b39a:	6013      	str	r3, [r2, #0]
	}
}
    b39c:	bf00      	nop
    b39e:	370c      	adds	r7, #12
    b3a0:	46bd      	mov	sp, r7
    b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a6:	4770      	bx	lr
    b3a8:	41016000 	.word	0x41016000
    b3ac:	20001bb0 	.word	0x20001bb0
    b3b0:	41018000 	.word	0x41018000
    b3b4:	20001bb4 	.word	0x20001bb4
    b3b8:	42000c00 	.word	0x42000c00
    b3bc:	20001bb8 	.word	0x20001bb8

0000b3c0 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    b3c0:	b580      	push	{r7, lr}
    b3c2:	b084      	sub	sp, #16
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
    b3c8:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b3ca:	6838      	ldr	r0, [r7, #0]
    b3cc:	4b33      	ldr	r3, [pc, #204]	; (b49c <_tcc_timer_init+0xdc>)
    b3ce:	4798      	blx	r3
    b3d0:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    b3d2:	68fb      	ldr	r3, [r7, #12]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d102      	bne.n	b3de <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    b3d8:	f06f 0309 	mvn.w	r3, #9
    b3dc:	e05a      	b.n	b494 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	683a      	ldr	r2, [r7, #0]
    b3e2:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    b3e4:	2101      	movs	r1, #1
    b3e6:	6838      	ldr	r0, [r7, #0]
    b3e8:	4b2d      	ldr	r3, [pc, #180]	; (b4a0 <_tcc_timer_init+0xe0>)
    b3ea:	4798      	blx	r3
    b3ec:	4603      	mov	r3, r0
    b3ee:	f083 0301 	eor.w	r3, r3, #1
    b3f2:	b2db      	uxtb	r3, r3
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d011      	beq.n	b41c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    b3f8:	2102      	movs	r1, #2
    b3fa:	6838      	ldr	r0, [r7, #0]
    b3fc:	4b29      	ldr	r3, [pc, #164]	; (b4a4 <_tcc_timer_init+0xe4>)
    b3fe:	4798      	blx	r3
    b400:	4603      	mov	r3, r0
    b402:	2b00      	cmp	r3, #0
    b404:	d006      	beq.n	b414 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    b406:	6838      	ldr	r0, [r7, #0]
    b408:	4b27      	ldr	r3, [pc, #156]	; (b4a8 <_tcc_timer_init+0xe8>)
    b40a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    b40c:	2102      	movs	r1, #2
    b40e:	6838      	ldr	r0, [r7, #0]
    b410:	4b26      	ldr	r3, [pc, #152]	; (b4ac <_tcc_timer_init+0xec>)
    b412:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    b414:	2101      	movs	r1, #1
    b416:	6838      	ldr	r0, [r7, #0]
    b418:	4b25      	ldr	r3, [pc, #148]	; (b4b0 <_tcc_timer_init+0xf0>)
    b41a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    b41c:	2101      	movs	r1, #1
    b41e:	6838      	ldr	r0, [r7, #0]
    b420:	4b22      	ldr	r3, [pc, #136]	; (b4ac <_tcc_timer_init+0xec>)
    b422:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    b424:	68fb      	ldr	r3, [r7, #12]
    b426:	689b      	ldr	r3, [r3, #8]
    b428:	4619      	mov	r1, r3
    b42a:	6838      	ldr	r0, [r7, #0]
    b42c:	4b20      	ldr	r3, [pc, #128]	; (b4b0 <_tcc_timer_init+0xf0>)
    b42e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    b430:	68fb      	ldr	r3, [r7, #12]
    b432:	7b1b      	ldrb	r3, [r3, #12]
    b434:	4619      	mov	r1, r3
    b436:	6838      	ldr	r0, [r7, #0]
    b438:	4b1e      	ldr	r3, [pc, #120]	; (b4b4 <_tcc_timer_init+0xf4>)
    b43a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    b43c:	68fb      	ldr	r3, [r7, #12]
    b43e:	7b5b      	ldrb	r3, [r3, #13]
    b440:	4619      	mov	r1, r3
    b442:	6838      	ldr	r0, [r7, #0]
    b444:	4b1c      	ldr	r3, [pc, #112]	; (b4b8 <_tcc_timer_init+0xf8>)
    b446:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    b448:	68fb      	ldr	r3, [r7, #12]
    b44a:	691b      	ldr	r3, [r3, #16]
    b44c:	4619      	mov	r1, r3
    b44e:	6838      	ldr	r0, [r7, #0]
    b450:	4b1a      	ldr	r3, [pc, #104]	; (b4bc <_tcc_timer_init+0xfc>)
    b452:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    b454:	68fb      	ldr	r3, [r7, #12]
    b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b458:	4619      	mov	r1, r3
    b45a:	6838      	ldr	r0, [r7, #0]
    b45c:	4b18      	ldr	r3, [pc, #96]	; (b4c0 <_tcc_timer_init+0x100>)
    b45e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    b460:	6838      	ldr	r0, [r7, #0]
    b462:	4b18      	ldr	r3, [pc, #96]	; (b4c4 <_tcc_timer_init+0x104>)
    b464:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    b466:	6879      	ldr	r1, [r7, #4]
    b468:	6838      	ldr	r0, [r7, #0]
    b46a:	4b17      	ldr	r3, [pc, #92]	; (b4c8 <_tcc_timer_init+0x108>)
    b46c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    b46e:	68fb      	ldr	r3, [r7, #12]
    b470:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b474:	4618      	mov	r0, r3
    b476:	4b15      	ldr	r3, [pc, #84]	; (b4cc <_tcc_timer_init+0x10c>)
    b478:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    b47a:	68fb      	ldr	r3, [r7, #12]
    b47c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b480:	4618      	mov	r0, r3
    b482:	4b13      	ldr	r3, [pc, #76]	; (b4d0 <_tcc_timer_init+0x110>)
    b484:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    b486:	68fb      	ldr	r3, [r7, #12]
    b488:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b48c:	4618      	mov	r0, r3
    b48e:	4b11      	ldr	r3, [pc, #68]	; (b4d4 <_tcc_timer_init+0x114>)
    b490:	4798      	blx	r3

	return ERR_NONE;
    b492:	2300      	movs	r3, #0
}
    b494:	4618      	mov	r0, r3
    b496:	3710      	adds	r7, #16
    b498:	46bd      	mov	sp, r7
    b49a:	bd80      	pop	{r7, pc}
    b49c:	0000b6a5 	.word	0x0000b6a5
    b4a0:	0000b145 	.word	0x0000b145
    b4a4:	0000b295 	.word	0x0000b295
    b4a8:	0000b26d 	.word	0x0000b26d
    b4ac:	0000b121 	.word	0x0000b121
    b4b0:	0000b2c5 	.word	0x0000b2c5
    b4b4:	0000b1ad 	.word	0x0000b1ad
    b4b8:	0000b2e9 	.word	0x0000b2e9
    b4bc:	0000b307 	.word	0x0000b307
    b4c0:	0000b325 	.word	0x0000b325
    b4c4:	0000b1cb 	.word	0x0000b1cb
    b4c8:	0000b369 	.word	0x0000b369
    b4cc:	0000b0a1 	.word	0x0000b0a1
    b4d0:	0000b0e5 	.word	0x0000b0e5
    b4d4:	0000b065 	.word	0x0000b065

0000b4d8 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    b4d8:	b580      	push	{r7, lr}
    b4da:	b084      	sub	sp, #16
    b4dc:	af00      	add	r7, sp, #0
    b4de:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    b4e0:	687b      	ldr	r3, [r7, #4]
    b4e2:	68db      	ldr	r3, [r3, #12]
    b4e4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b4e6:	68f8      	ldr	r0, [r7, #12]
    b4e8:	4b0a      	ldr	r3, [pc, #40]	; (b514 <_tcc_timer_deinit+0x3c>)
    b4ea:	4798      	blx	r3
    b4ec:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    b4ee:	68bb      	ldr	r3, [r7, #8]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d00b      	beq.n	b50c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    b4f4:	68bb      	ldr	r3, [r7, #8]
    b4f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b4fa:	4618      	mov	r0, r3
    b4fc:	4b06      	ldr	r3, [pc, #24]	; (b518 <_tcc_timer_deinit+0x40>)
    b4fe:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    b500:	68f8      	ldr	r0, [r7, #12]
    b502:	4b06      	ldr	r3, [pc, #24]	; (b51c <_tcc_timer_deinit+0x44>)
    b504:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    b506:	68f8      	ldr	r0, [r7, #12]
    b508:	4b05      	ldr	r3, [pc, #20]	; (b520 <_tcc_timer_deinit+0x48>)
    b50a:	4798      	blx	r3
	}
}
    b50c:	bf00      	nop
    b50e:	3710      	adds	r7, #16
    b510:	46bd      	mov	sp, r7
    b512:	bd80      	pop	{r7, pc}
    b514:	0000b6a5 	.word	0x0000b6a5
    b518:	0000b0a1 	.word	0x0000b0a1
    b51c:	0000b26d 	.word	0x0000b26d
    b520:	0000b1e5 	.word	0x0000b1e5

0000b524 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    b524:	b580      	push	{r7, lr}
    b526:	b082      	sub	sp, #8
    b528:	af00      	add	r7, sp, #0
    b52a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	68db      	ldr	r3, [r3, #12]
    b530:	4618      	mov	r0, r3
    b532:	4b03      	ldr	r3, [pc, #12]	; (b540 <_tcc_timer_start+0x1c>)
    b534:	4798      	blx	r3
}
    b536:	bf00      	nop
    b538:	3708      	adds	r7, #8
    b53a:	46bd      	mov	sp, r7
    b53c:	bd80      	pop	{r7, pc}
    b53e:	bf00      	nop
    b540:	0000b20d 	.word	0x0000b20d

0000b544 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    b544:	b580      	push	{r7, lr}
    b546:	b082      	sub	sp, #8
    b548:	af00      	add	r7, sp, #0
    b54a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	68db      	ldr	r3, [r3, #12]
    b550:	4618      	mov	r0, r3
    b552:	4b03      	ldr	r3, [pc, #12]	; (b560 <_tcc_timer_stop+0x1c>)
    b554:	4798      	blx	r3
}
    b556:	bf00      	nop
    b558:	3708      	adds	r7, #8
    b55a:	46bd      	mov	sp, r7
    b55c:	bd80      	pop	{r7, pc}
    b55e:	bf00      	nop
    b560:	0000b26d 	.word	0x0000b26d

0000b564 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    b564:	b580      	push	{r7, lr}
    b566:	b082      	sub	sp, #8
    b568:	af00      	add	r7, sp, #0
    b56a:	6078      	str	r0, [r7, #4]
    b56c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    b56e:	687b      	ldr	r3, [r7, #4]
    b570:	68db      	ldr	r3, [r3, #12]
    b572:	6839      	ldr	r1, [r7, #0]
    b574:	4618      	mov	r0, r3
    b576:	4b03      	ldr	r3, [pc, #12]	; (b584 <_tcc_timer_set_period+0x20>)
    b578:	4798      	blx	r3
}
    b57a:	bf00      	nop
    b57c:	3708      	adds	r7, #8
    b57e:	46bd      	mov	sp, r7
    b580:	bd80      	pop	{r7, pc}
    b582:	bf00      	nop
    b584:	0000b325 	.word	0x0000b325

0000b588 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    b588:	b580      	push	{r7, lr}
    b58a:	b082      	sub	sp, #8
    b58c:	af00      	add	r7, sp, #0
    b58e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    b590:	687b      	ldr	r3, [r7, #4]
    b592:	68db      	ldr	r3, [r3, #12]
    b594:	4618      	mov	r0, r3
    b596:	4b03      	ldr	r3, [pc, #12]	; (b5a4 <_tcc_timer_get_period+0x1c>)
    b598:	4798      	blx	r3
    b59a:	4603      	mov	r3, r0
}
    b59c:	4618      	mov	r0, r3
    b59e:	3708      	adds	r7, #8
    b5a0:	46bd      	mov	sp, r7
    b5a2:	bd80      	pop	{r7, pc}
    b5a4:	0000b349 	.word	0x0000b349

0000b5a8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    b5a8:	b580      	push	{r7, lr}
    b5aa:	b082      	sub	sp, #8
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    b5b0:	687b      	ldr	r3, [r7, #4]
    b5b2:	68db      	ldr	r3, [r3, #12]
    b5b4:	4618      	mov	r0, r3
    b5b6:	4b03      	ldr	r3, [pc, #12]	; (b5c4 <_tcc_timer_is_started+0x1c>)
    b5b8:	4798      	blx	r3
    b5ba:	4603      	mov	r3, r0
}
    b5bc:	4618      	mov	r0, r3
    b5be:	3708      	adds	r7, #8
    b5c0:	46bd      	mov	sp, r7
    b5c2:	bd80      	pop	{r7, pc}
    b5c4:	0000b235 	.word	0x0000b235

0000b5c8 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    b5c8:	b480      	push	{r7}
    b5ca:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    b5cc:	4b02      	ldr	r3, [pc, #8]	; (b5d8 <_tcc_get_timer+0x10>)
}
    b5ce:	4618      	mov	r0, r3
    b5d0:	46bd      	mov	sp, r7
    b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5d6:	4770      	bx	lr
    b5d8:	200004e8 	.word	0x200004e8

0000b5dc <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    b5dc:	b580      	push	{r7, lr}
    b5de:	b084      	sub	sp, #16
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    b5e4:	687b      	ldr	r3, [r7, #4]
    b5e6:	68db      	ldr	r3, [r3, #12]
    b5e8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b5ea:	68f8      	ldr	r0, [r7, #12]
    b5ec:	4b08      	ldr	r3, [pc, #32]	; (b610 <_tcc_timer_set_irq+0x34>)
    b5ee:	4798      	blx	r3
    b5f0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    b5f2:	68bb      	ldr	r3, [r7, #8]
    b5f4:	2b00      	cmp	r3, #0
    b5f6:	d006      	beq.n	b606 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    b5f8:	68bb      	ldr	r3, [r7, #8]
    b5fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b5fe:	b2db      	uxtb	r3, r3
    b600:	4618      	mov	r0, r3
    b602:	4b04      	ldr	r3, [pc, #16]	; (b614 <_tcc_timer_set_irq+0x38>)
    b604:	4798      	blx	r3
	}
}
    b606:	bf00      	nop
    b608:	3710      	adds	r7, #16
    b60a:	46bd      	mov	sp, r7
    b60c:	bd80      	pop	{r7, pc}
    b60e:	bf00      	nop
    b610:	0000b6a5 	.word	0x0000b6a5
    b614:	000080f9 	.word	0x000080f9

0000b618 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    b618:	b580      	push	{r7, lr}
    b61a:	b084      	sub	sp, #16
    b61c:	af00      	add	r7, sp, #0
    b61e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	68db      	ldr	r3, [r3, #12]
    b624:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    b626:	68f8      	ldr	r0, [r7, #12]
    b628:	4b07      	ldr	r3, [pc, #28]	; (b648 <tcc_interrupt_handler+0x30>)
    b62a:	4798      	blx	r3
    b62c:	4603      	mov	r3, r0
    b62e:	2b00      	cmp	r3, #0
    b630:	d006      	beq.n	b640 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    b632:	68f8      	ldr	r0, [r7, #12]
    b634:	4b05      	ldr	r3, [pc, #20]	; (b64c <tcc_interrupt_handler+0x34>)
    b636:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b638:	687b      	ldr	r3, [r7, #4]
    b63a:	681b      	ldr	r3, [r3, #0]
    b63c:	6878      	ldr	r0, [r7, #4]
    b63e:	4798      	blx	r3
	}
}
    b640:	bf00      	nop
    b642:	3710      	adds	r7, #16
    b644:	46bd      	mov	sp, r7
    b646:	bd80      	pop	{r7, pc}
    b648:	0000b16d 	.word	0x0000b16d
    b64c:	0000b193 	.word	0x0000b193

0000b650 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    b650:	b580      	push	{r7, lr}
    b652:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    b654:	4b03      	ldr	r3, [pc, #12]	; (b664 <TCC0_0_Handler+0x14>)
    b656:	681b      	ldr	r3, [r3, #0]
    b658:	4618      	mov	r0, r3
    b65a:	4b03      	ldr	r3, [pc, #12]	; (b668 <TCC0_0_Handler+0x18>)
    b65c:	4798      	blx	r3
}
    b65e:	bf00      	nop
    b660:	bd80      	pop	{r7, pc}
    b662:	bf00      	nop
    b664:	20001bb0 	.word	0x20001bb0
    b668:	0000b619 	.word	0x0000b619

0000b66c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    b66c:	b580      	push	{r7, lr}
    b66e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    b670:	4b03      	ldr	r3, [pc, #12]	; (b680 <TCC1_0_Handler+0x14>)
    b672:	681b      	ldr	r3, [r3, #0]
    b674:	4618      	mov	r0, r3
    b676:	4b03      	ldr	r3, [pc, #12]	; (b684 <TCC1_0_Handler+0x18>)
    b678:	4798      	blx	r3
}
    b67a:	bf00      	nop
    b67c:	bd80      	pop	{r7, pc}
    b67e:	bf00      	nop
    b680:	20001bb4 	.word	0x20001bb4
    b684:	0000b619 	.word	0x0000b619

0000b688 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    b688:	b580      	push	{r7, lr}
    b68a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    b68c:	4b03      	ldr	r3, [pc, #12]	; (b69c <TCC2_0_Handler+0x14>)
    b68e:	681b      	ldr	r3, [r3, #0]
    b690:	4618      	mov	r0, r3
    b692:	4b03      	ldr	r3, [pc, #12]	; (b6a0 <TCC2_0_Handler+0x18>)
    b694:	4798      	blx	r3
}
    b696:	bf00      	nop
    b698:	bd80      	pop	{r7, pc}
    b69a:	bf00      	nop
    b69c:	20001bb8 	.word	0x20001bb8
    b6a0:	0000b619 	.word	0x0000b619

0000b6a4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    b6a4:	b480      	push	{r7}
    b6a6:	b085      	sub	sp, #20
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    b6ac:	2300      	movs	r3, #0
    b6ae:	73fb      	strb	r3, [r7, #15]
    b6b0:	e015      	b.n	b6de <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    b6b2:	7bfa      	ldrb	r2, [r7, #15]
    b6b4:	490f      	ldr	r1, [pc, #60]	; (b6f4 <_get_tcc_cfg+0x50>)
    b6b6:	4613      	mov	r3, r2
    b6b8:	005b      	lsls	r3, r3, #1
    b6ba:	4413      	add	r3, r2
    b6bc:	011b      	lsls	r3, r3, #4
    b6be:	440b      	add	r3, r1
    b6c0:	681a      	ldr	r2, [r3, #0]
    b6c2:	687b      	ldr	r3, [r7, #4]
    b6c4:	429a      	cmp	r2, r3
    b6c6:	d107      	bne.n	b6d8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    b6c8:	7bfa      	ldrb	r2, [r7, #15]
    b6ca:	4613      	mov	r3, r2
    b6cc:	005b      	lsls	r3, r3, #1
    b6ce:	4413      	add	r3, r2
    b6d0:	011b      	lsls	r3, r3, #4
    b6d2:	4a08      	ldr	r2, [pc, #32]	; (b6f4 <_get_tcc_cfg+0x50>)
    b6d4:	4413      	add	r3, r2
    b6d6:	e006      	b.n	b6e6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    b6d8:	7bfb      	ldrb	r3, [r7, #15]
    b6da:	3301      	adds	r3, #1
    b6dc:	73fb      	strb	r3, [r7, #15]
    b6de:	7bfb      	ldrb	r3, [r7, #15]
    b6e0:	2b02      	cmp	r3, #2
    b6e2:	d9e6      	bls.n	b6b2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    b6e4:	2300      	movs	r3, #0
}
    b6e6:	4618      	mov	r0, r3
    b6e8:	3714      	adds	r7, #20
    b6ea:	46bd      	mov	sp, r7
    b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6f0:	4770      	bx	lr
    b6f2:	bf00      	nop
    b6f4:	20000458 	.word	0x20000458

0000b6f8 <__NVIC_EnableIRQ>:
{
    b6f8:	b480      	push	{r7}
    b6fa:	b083      	sub	sp, #12
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	4603      	mov	r3, r0
    b700:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b706:	2b00      	cmp	r3, #0
    b708:	db0b      	blt.n	b722 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b70a:	4909      	ldr	r1, [pc, #36]	; (b730 <__NVIC_EnableIRQ+0x38>)
    b70c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b710:	095b      	lsrs	r3, r3, #5
    b712:	88fa      	ldrh	r2, [r7, #6]
    b714:	f002 021f 	and.w	r2, r2, #31
    b718:	2001      	movs	r0, #1
    b71a:	fa00 f202 	lsl.w	r2, r0, r2
    b71e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b722:	bf00      	nop
    b724:	370c      	adds	r7, #12
    b726:	46bd      	mov	sp, r7
    b728:	f85d 7b04 	ldr.w	r7, [sp], #4
    b72c:	4770      	bx	lr
    b72e:	bf00      	nop
    b730:	e000e100 	.word	0xe000e100

0000b734 <__NVIC_DisableIRQ>:
{
    b734:	b480      	push	{r7}
    b736:	b083      	sub	sp, #12
    b738:	af00      	add	r7, sp, #0
    b73a:	4603      	mov	r3, r0
    b73c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b73e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b742:	2b00      	cmp	r3, #0
    b744:	db10      	blt.n	b768 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b746:	490b      	ldr	r1, [pc, #44]	; (b774 <__NVIC_DisableIRQ+0x40>)
    b748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b74c:	095b      	lsrs	r3, r3, #5
    b74e:	88fa      	ldrh	r2, [r7, #6]
    b750:	f002 021f 	and.w	r2, r2, #31
    b754:	2001      	movs	r0, #1
    b756:	fa00 f202 	lsl.w	r2, r0, r2
    b75a:	3320      	adds	r3, #32
    b75c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    b760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b764:	f3bf 8f6f 	isb	sy
}
    b768:	bf00      	nop
    b76a:	370c      	adds	r7, #12
    b76c:	46bd      	mov	sp, r7
    b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b772:	4770      	bx	lr
    b774:	e000e100 	.word	0xe000e100

0000b778 <__NVIC_ClearPendingIRQ>:
{
    b778:	b480      	push	{r7}
    b77a:	b083      	sub	sp, #12
    b77c:	af00      	add	r7, sp, #0
    b77e:	4603      	mov	r3, r0
    b780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b786:	2b00      	cmp	r3, #0
    b788:	db0c      	blt.n	b7a4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b78a:	4909      	ldr	r1, [pc, #36]	; (b7b0 <__NVIC_ClearPendingIRQ+0x38>)
    b78c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b790:	095b      	lsrs	r3, r3, #5
    b792:	88fa      	ldrh	r2, [r7, #6]
    b794:	f002 021f 	and.w	r2, r2, #31
    b798:	2001      	movs	r0, #1
    b79a:	fa00 f202 	lsl.w	r2, r0, r2
    b79e:	3360      	adds	r3, #96	; 0x60
    b7a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7a4:	bf00      	nop
    b7a6:	370c      	adds	r7, #12
    b7a8:	46bd      	mov	sp, r7
    b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7ae:	4770      	bx	lr
    b7b0:	e000e100 	.word	0xe000e100

0000b7b4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b7b4:	b480      	push	{r7}
    b7b6:	b083      	sub	sp, #12
    b7b8:	af00      	add	r7, sp, #0
    b7ba:	6078      	str	r0, [r7, #4]
    b7bc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    b7be:	bf00      	nop
    b7c0:	687b      	ldr	r3, [r7, #4]
    b7c2:	691a      	ldr	r2, [r3, #16]
    b7c4:	683b      	ldr	r3, [r7, #0]
    b7c6:	4013      	ands	r3, r2
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d1f9      	bne.n	b7c0 <hri_tc_wait_for_sync+0xc>
	};
}
    b7cc:	bf00      	nop
    b7ce:	370c      	adds	r7, #12
    b7d0:	46bd      	mov	sp, r7
    b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7d6:	4770      	bx	lr

0000b7d8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b7d8:	b480      	push	{r7}
    b7da:	b083      	sub	sp, #12
    b7dc:	af00      	add	r7, sp, #0
    b7de:	6078      	str	r0, [r7, #4]
    b7e0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    b7e2:	687b      	ldr	r3, [r7, #4]
    b7e4:	691a      	ldr	r2, [r3, #16]
    b7e6:	683b      	ldr	r3, [r7, #0]
    b7e8:	4013      	ands	r3, r2
    b7ea:	2b00      	cmp	r3, #0
    b7ec:	bf14      	ite	ne
    b7ee:	2301      	movne	r3, #1
    b7f0:	2300      	moveq	r3, #0
    b7f2:	b2db      	uxtb	r3, r3
}
    b7f4:	4618      	mov	r0, r3
    b7f6:	370c      	adds	r7, #12
    b7f8:	46bd      	mov	sp, r7
    b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7fe:	4770      	bx	lr

0000b800 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    b800:	b480      	push	{r7}
    b802:	b083      	sub	sp, #12
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	7a9b      	ldrb	r3, [r3, #10]
    b80c:	b2db      	uxtb	r3, r3
    b80e:	f003 0301 	and.w	r3, r3, #1
    b812:	2b00      	cmp	r3, #0
    b814:	bf14      	ite	ne
    b816:	2301      	movne	r3, #1
    b818:	2300      	moveq	r3, #0
    b81a:	b2db      	uxtb	r3, r3
}
    b81c:	4618      	mov	r0, r3
    b81e:	370c      	adds	r7, #12
    b820:	46bd      	mov	sp, r7
    b822:	f85d 7b04 	ldr.w	r7, [sp], #4
    b826:	4770      	bx	lr

0000b828 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    b828:	b480      	push	{r7}
    b82a:	b083      	sub	sp, #12
    b82c:	af00      	add	r7, sp, #0
    b82e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    b830:	687b      	ldr	r3, [r7, #4]
    b832:	2201      	movs	r2, #1
    b834:	729a      	strb	r2, [r3, #10]
}
    b836:	bf00      	nop
    b838:	370c      	adds	r7, #12
    b83a:	46bd      	mov	sp, r7
    b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b840:	4770      	bx	lr

0000b842 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    b842:	b480      	push	{r7}
    b844:	b083      	sub	sp, #12
    b846:	af00      	add	r7, sp, #0
    b848:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    b84a:	687b      	ldr	r3, [r7, #4]
    b84c:	2202      	movs	r2, #2
    b84e:	729a      	strb	r2, [r3, #10]
}
    b850:	bf00      	nop
    b852:	370c      	adds	r7, #12
    b854:	46bd      	mov	sp, r7
    b856:	f85d 7b04 	ldr.w	r7, [sp], #4
    b85a:	4770      	bx	lr

0000b85c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    b85c:	b480      	push	{r7}
    b85e:	b083      	sub	sp, #12
    b860:	af00      	add	r7, sp, #0
    b862:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	2201      	movs	r2, #1
    b868:	725a      	strb	r2, [r3, #9]
}
    b86a:	bf00      	nop
    b86c:	370c      	adds	r7, #12
    b86e:	46bd      	mov	sp, r7
    b870:	f85d 7b04 	ldr.w	r7, [sp], #4
    b874:	4770      	bx	lr

0000b876 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    b876:	b480      	push	{r7}
    b878:	b083      	sub	sp, #12
    b87a:	af00      	add	r7, sp, #0
    b87c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    b87e:	687b      	ldr	r3, [r7, #4]
    b880:	7a5b      	ldrb	r3, [r3, #9]
    b882:	b2db      	uxtb	r3, r3
    b884:	085b      	lsrs	r3, r3, #1
    b886:	f003 0301 	and.w	r3, r3, #1
    b88a:	2b00      	cmp	r3, #0
    b88c:	bf14      	ite	ne
    b88e:	2301      	movne	r3, #1
    b890:	2300      	moveq	r3, #0
    b892:	b2db      	uxtb	r3, r3
}
    b894:	4618      	mov	r0, r3
    b896:	370c      	adds	r7, #12
    b898:	46bd      	mov	sp, r7
    b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b89e:	4770      	bx	lr

0000b8a0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b082      	sub	sp, #8
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    b8a8:	687b      	ldr	r3, [r7, #4]
    b8aa:	681b      	ldr	r3, [r3, #0]
    b8ac:	f043 0201 	orr.w	r2, r3, #1
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b8b4:	2101      	movs	r1, #1
    b8b6:	6878      	ldr	r0, [r7, #4]
    b8b8:	4b02      	ldr	r3, [pc, #8]	; (b8c4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    b8ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b8bc:	bf00      	nop
    b8be:	3708      	adds	r7, #8
    b8c0:	46bd      	mov	sp, r7
    b8c2:	bd80      	pop	{r7, pc}
    b8c4:	0000b7b5 	.word	0x0000b7b5

0000b8c8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b8c8:	b580      	push	{r7, lr}
    b8ca:	b082      	sub	sp, #8
    b8cc:	af00      	add	r7, sp, #0
    b8ce:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    b8d0:	687b      	ldr	r3, [r7, #4]
    b8d2:	681b      	ldr	r3, [r3, #0]
    b8d4:	f043 0202 	orr.w	r2, r3, #2
    b8d8:	687b      	ldr	r3, [r7, #4]
    b8da:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b8dc:	2103      	movs	r1, #3
    b8de:	6878      	ldr	r0, [r7, #4]
    b8e0:	4b02      	ldr	r3, [pc, #8]	; (b8ec <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    b8e2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b8e4:	bf00      	nop
    b8e6:	3708      	adds	r7, #8
    b8e8:	46bd      	mov	sp, r7
    b8ea:	bd80      	pop	{r7, pc}
    b8ec:	0000b7b5 	.word	0x0000b7b5

0000b8f0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b084      	sub	sp, #16
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b8f8:	2103      	movs	r1, #3
    b8fa:	6878      	ldr	r0, [r7, #4]
    b8fc:	4b09      	ldr	r3, [pc, #36]	; (b924 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    b8fe:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b900:	687b      	ldr	r3, [r7, #4]
    b902:	681b      	ldr	r3, [r3, #0]
    b904:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    b906:	68fb      	ldr	r3, [r7, #12]
    b908:	085b      	lsrs	r3, r3, #1
    b90a:	f003 0301 	and.w	r3, r3, #1
    b90e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b910:	68fb      	ldr	r3, [r7, #12]
    b912:	2b00      	cmp	r3, #0
    b914:	bf14      	ite	ne
    b916:	2301      	movne	r3, #1
    b918:	2300      	moveq	r3, #0
    b91a:	b2db      	uxtb	r3, r3
}
    b91c:	4618      	mov	r0, r3
    b91e:	3710      	adds	r7, #16
    b920:	46bd      	mov	sp, r7
    b922:	bd80      	pop	{r7, pc}
    b924:	0000b7b5 	.word	0x0000b7b5

0000b928 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b928:	b580      	push	{r7, lr}
    b92a:	b082      	sub	sp, #8
    b92c:	af00      	add	r7, sp, #0
    b92e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	681b      	ldr	r3, [r3, #0]
    b934:	f023 0202 	bic.w	r2, r3, #2
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b93c:	2103      	movs	r1, #3
    b93e:	6878      	ldr	r0, [r7, #4]
    b940:	4b02      	ldr	r3, [pc, #8]	; (b94c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    b942:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b944:	bf00      	nop
    b946:	3708      	adds	r7, #8
    b948:	46bd      	mov	sp, r7
    b94a:	bd80      	pop	{r7, pc}
    b94c:	0000b7b5 	.word	0x0000b7b5

0000b950 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    b950:	b480      	push	{r7}
    b952:	b085      	sub	sp, #20
    b954:	af00      	add	r7, sp, #0
    b956:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b958:	687b      	ldr	r3, [r7, #4]
    b95a:	681b      	ldr	r3, [r3, #0]
    b95c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    b95e:	68fb      	ldr	r3, [r7, #12]
    b960:	089b      	lsrs	r3, r3, #2
    b962:	f003 0303 	and.w	r3, r3, #3
    b966:	60fb      	str	r3, [r7, #12]
	return tmp;
    b968:	68fb      	ldr	r3, [r7, #12]
}
    b96a:	4618      	mov	r0, r3
    b96c:	3714      	adds	r7, #20
    b96e:	46bd      	mov	sp, r7
    b970:	f85d 7b04 	ldr.w	r7, [sp], #4
    b974:	4770      	bx	lr
	...

0000b978 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    b978:	b580      	push	{r7, lr}
    b97a:	b084      	sub	sp, #16
    b97c:	af00      	add	r7, sp, #0
    b97e:	6078      	str	r0, [r7, #4]
    b980:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b982:	2103      	movs	r1, #3
    b984:	6878      	ldr	r0, [r7, #4]
    b986:	4b07      	ldr	r3, [pc, #28]	; (b9a4 <hri_tc_get_CTRLA_reg+0x2c>)
    b988:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    b98a:	687b      	ldr	r3, [r7, #4]
    b98c:	681b      	ldr	r3, [r3, #0]
    b98e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b990:	68fa      	ldr	r2, [r7, #12]
    b992:	683b      	ldr	r3, [r7, #0]
    b994:	4013      	ands	r3, r2
    b996:	60fb      	str	r3, [r7, #12]
	return tmp;
    b998:	68fb      	ldr	r3, [r7, #12]
}
    b99a:	4618      	mov	r0, r3
    b99c:	3710      	adds	r7, #16
    b99e:	46bd      	mov	sp, r7
    b9a0:	bd80      	pop	{r7, pc}
    b9a2:	bf00      	nop
    b9a4:	0000b7b5 	.word	0x0000b7b5

0000b9a8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    b9a8:	b580      	push	{r7, lr}
    b9aa:	b082      	sub	sp, #8
    b9ac:	af00      	add	r7, sp, #0
    b9ae:	6078      	str	r0, [r7, #4]
    b9b0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    b9b2:	687b      	ldr	r3, [r7, #4]
    b9b4:	683a      	ldr	r2, [r7, #0]
    b9b6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b9b8:	2103      	movs	r1, #3
    b9ba:	6878      	ldr	r0, [r7, #4]
    b9bc:	4b02      	ldr	r3, [pc, #8]	; (b9c8 <hri_tc_write_CTRLA_reg+0x20>)
    b9be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b9c0:	bf00      	nop
    b9c2:	3708      	adds	r7, #8
    b9c4:	46bd      	mov	sp, r7
    b9c6:	bd80      	pop	{r7, pc}
    b9c8:	0000b7b5 	.word	0x0000b7b5

0000b9cc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    b9cc:	b480      	push	{r7}
    b9ce:	b083      	sub	sp, #12
    b9d0:	af00      	add	r7, sp, #0
    b9d2:	6078      	str	r0, [r7, #4]
    b9d4:	460b      	mov	r3, r1
    b9d6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    b9d8:	687b      	ldr	r3, [r7, #4]
    b9da:	887a      	ldrh	r2, [r7, #2]
    b9dc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    b9de:	bf00      	nop
    b9e0:	370c      	adds	r7, #12
    b9e2:	46bd      	mov	sp, r7
    b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e8:	4770      	bx	lr

0000b9ea <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    b9ea:	b480      	push	{r7}
    b9ec:	b083      	sub	sp, #12
    b9ee:	af00      	add	r7, sp, #0
    b9f0:	6078      	str	r0, [r7, #4]
    b9f2:	460b      	mov	r3, r1
    b9f4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    b9f6:	687b      	ldr	r3, [r7, #4]
    b9f8:	78fa      	ldrb	r2, [r7, #3]
    b9fa:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    b9fc:	bf00      	nop
    b9fe:	370c      	adds	r7, #12
    ba00:	46bd      	mov	sp, r7
    ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba06:	4770      	bx	lr

0000ba08 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    ba08:	b480      	push	{r7}
    ba0a:	b083      	sub	sp, #12
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
    ba10:	460b      	mov	r3, r1
    ba12:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	78fa      	ldrb	r2, [r7, #3]
    ba18:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    ba1a:	bf00      	nop
    ba1c:	370c      	adds	r7, #12
    ba1e:	46bd      	mov	sp, r7
    ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba24:	4770      	bx	lr
	...

0000ba28 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    ba28:	b580      	push	{r7, lr}
    ba2a:	b082      	sub	sp, #8
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	6078      	str	r0, [r7, #4]
    ba30:	460b      	mov	r3, r1
    ba32:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    ba34:	687b      	ldr	r3, [r7, #4]
    ba36:	78fa      	ldrb	r2, [r7, #3]
    ba38:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ba3a:	2120      	movs	r1, #32
    ba3c:	6878      	ldr	r0, [r7, #4]
    ba3e:	4b03      	ldr	r3, [pc, #12]	; (ba4c <hri_tccount8_write_PER_reg+0x24>)
    ba40:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ba42:	bf00      	nop
    ba44:	3708      	adds	r7, #8
    ba46:	46bd      	mov	sp, r7
    ba48:	bd80      	pop	{r7, pc}
    ba4a:	bf00      	nop
    ba4c:	0000b7b5 	.word	0x0000b7b5

0000ba50 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ba50:	b580      	push	{r7, lr}
    ba52:	b082      	sub	sp, #8
    ba54:	af00      	add	r7, sp, #0
    ba56:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ba58:	2120      	movs	r1, #32
    ba5a:	6878      	ldr	r0, [r7, #4]
    ba5c:	4b04      	ldr	r3, [pc, #16]	; (ba70 <hri_tccount8_read_PER_reg+0x20>)
    ba5e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    ba60:	687b      	ldr	r3, [r7, #4]
    ba62:	7edb      	ldrb	r3, [r3, #27]
    ba64:	b2db      	uxtb	r3, r3
}
    ba66:	4618      	mov	r0, r3
    ba68:	3708      	adds	r7, #8
    ba6a:	46bd      	mov	sp, r7
    ba6c:	bd80      	pop	{r7, pc}
    ba6e:	bf00      	nop
    ba70:	0000b7b5 	.word	0x0000b7b5

0000ba74 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    ba74:	b580      	push	{r7, lr}
    ba76:	b082      	sub	sp, #8
    ba78:	af00      	add	r7, sp, #0
    ba7a:	6078      	str	r0, [r7, #4]
    ba7c:	460b      	mov	r3, r1
    ba7e:	70fb      	strb	r3, [r7, #3]
    ba80:	4613      	mov	r3, r2
    ba82:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    ba84:	78fb      	ldrb	r3, [r7, #3]
    ba86:	687a      	ldr	r2, [r7, #4]
    ba88:	4413      	add	r3, r2
    ba8a:	78ba      	ldrb	r2, [r7, #2]
    ba8c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ba8e:	21c0      	movs	r1, #192	; 0xc0
    ba90:	6878      	ldr	r0, [r7, #4]
    ba92:	4b03      	ldr	r3, [pc, #12]	; (baa0 <hri_tccount8_write_CC_reg+0x2c>)
    ba94:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ba96:	bf00      	nop
    ba98:	3708      	adds	r7, #8
    ba9a:	46bd      	mov	sp, r7
    ba9c:	bd80      	pop	{r7, pc}
    ba9e:	bf00      	nop
    baa0:	0000b7b5 	.word	0x0000b7b5

0000baa4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    baa4:	b580      	push	{r7, lr}
    baa6:	b082      	sub	sp, #8
    baa8:	af00      	add	r7, sp, #0
    baaa:	6078      	str	r0, [r7, #4]
    baac:	460b      	mov	r3, r1
    baae:	70fb      	strb	r3, [r7, #3]
    bab0:	4613      	mov	r3, r2
    bab2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    bab4:	78fb      	ldrb	r3, [r7, #3]
    bab6:	687a      	ldr	r2, [r7, #4]
    bab8:	330c      	adds	r3, #12
    baba:	005b      	lsls	r3, r3, #1
    babc:	4413      	add	r3, r2
    babe:	883a      	ldrh	r2, [r7, #0]
    bac0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bac2:	21c0      	movs	r1, #192	; 0xc0
    bac4:	6878      	ldr	r0, [r7, #4]
    bac6:	4b03      	ldr	r3, [pc, #12]	; (bad4 <hri_tccount16_write_CC_reg+0x30>)
    bac8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    baca:	bf00      	nop
    bacc:	3708      	adds	r7, #8
    bace:	46bd      	mov	sp, r7
    bad0:	bd80      	pop	{r7, pc}
    bad2:	bf00      	nop
    bad4:	0000b7b5 	.word	0x0000b7b5

0000bad8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    bad8:	b580      	push	{r7, lr}
    bada:	b082      	sub	sp, #8
    badc:	af00      	add	r7, sp, #0
    bade:	6078      	str	r0, [r7, #4]
    bae0:	460b      	mov	r3, r1
    bae2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bae4:	21c0      	movs	r1, #192	; 0xc0
    bae6:	6878      	ldr	r0, [r7, #4]
    bae8:	4b06      	ldr	r3, [pc, #24]	; (bb04 <hri_tccount16_read_CC_reg+0x2c>)
    baea:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    baec:	78fb      	ldrb	r3, [r7, #3]
    baee:	687a      	ldr	r2, [r7, #4]
    baf0:	330c      	adds	r3, #12
    baf2:	005b      	lsls	r3, r3, #1
    baf4:	4413      	add	r3, r2
    baf6:	889b      	ldrh	r3, [r3, #4]
    baf8:	b29b      	uxth	r3, r3
}
    bafa:	4618      	mov	r0, r3
    bafc:	3708      	adds	r7, #8
    bafe:	46bd      	mov	sp, r7
    bb00:	bd80      	pop	{r7, pc}
    bb02:	bf00      	nop
    bb04:	0000b7b5 	.word	0x0000b7b5

0000bb08 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    bb08:	b580      	push	{r7, lr}
    bb0a:	b084      	sub	sp, #16
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	60f8      	str	r0, [r7, #12]
    bb10:	460b      	mov	r3, r1
    bb12:	607a      	str	r2, [r7, #4]
    bb14:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    bb16:	7afb      	ldrb	r3, [r7, #11]
    bb18:	68fa      	ldr	r2, [r7, #12]
    bb1a:	3306      	adds	r3, #6
    bb1c:	009b      	lsls	r3, r3, #2
    bb1e:	4413      	add	r3, r2
    bb20:	687a      	ldr	r2, [r7, #4]
    bb22:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bb24:	21c0      	movs	r1, #192	; 0xc0
    bb26:	68f8      	ldr	r0, [r7, #12]
    bb28:	4b02      	ldr	r3, [pc, #8]	; (bb34 <hri_tccount32_write_CC_reg+0x2c>)
    bb2a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bb2c:	bf00      	nop
    bb2e:	3710      	adds	r7, #16
    bb30:	46bd      	mov	sp, r7
    bb32:	bd80      	pop	{r7, pc}
    bb34:	0000b7b5 	.word	0x0000b7b5

0000bb38 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    bb38:	b580      	push	{r7, lr}
    bb3a:	b082      	sub	sp, #8
    bb3c:	af00      	add	r7, sp, #0
    bb3e:	6078      	str	r0, [r7, #4]
    bb40:	460b      	mov	r3, r1
    bb42:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bb44:	21c0      	movs	r1, #192	; 0xc0
    bb46:	6878      	ldr	r0, [r7, #4]
    bb48:	4b05      	ldr	r3, [pc, #20]	; (bb60 <hri_tccount32_read_CC_reg+0x28>)
    bb4a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    bb4c:	78fb      	ldrb	r3, [r7, #3]
    bb4e:	687a      	ldr	r2, [r7, #4]
    bb50:	3306      	adds	r3, #6
    bb52:	009b      	lsls	r3, r3, #2
    bb54:	4413      	add	r3, r2
    bb56:	685b      	ldr	r3, [r3, #4]
}
    bb58:	4618      	mov	r0, r3
    bb5a:	3708      	adds	r7, #8
    bb5c:	46bd      	mov	sp, r7
    bb5e:	bd80      	pop	{r7, pc}
    bb60:	0000b7b5 	.word	0x0000b7b5

0000bb64 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    bb64:	b580      	push	{r7, lr}
    bb66:	b084      	sub	sp, #16
    bb68:	af00      	add	r7, sp, #0
    bb6a:	6078      	str	r0, [r7, #4]
    bb6c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    bb6e:	6838      	ldr	r0, [r7, #0]
    bb70:	4b93      	ldr	r3, [pc, #588]	; (bdc0 <_tc_timer_init+0x25c>)
    bb72:	4798      	blx	r3
    bb74:	4603      	mov	r3, r0
    bb76:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    bb78:	687b      	ldr	r3, [r7, #4]
    bb7a:	683a      	ldr	r2, [r7, #0]
    bb7c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    bb7e:	22a4      	movs	r2, #164	; 0xa4
    bb80:	4990      	ldr	r1, [pc, #576]	; (bdc4 <_tc_timer_init+0x260>)
    bb82:	2001      	movs	r0, #1
    bb84:	4b90      	ldr	r3, [pc, #576]	; (bdc8 <_tc_timer_init+0x264>)
    bb86:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    bb88:	2101      	movs	r1, #1
    bb8a:	6838      	ldr	r0, [r7, #0]
    bb8c:	4b8f      	ldr	r3, [pc, #572]	; (bdcc <_tc_timer_init+0x268>)
    bb8e:	4798      	blx	r3
    bb90:	4603      	mov	r3, r0
    bb92:	f083 0301 	eor.w	r3, r3, #1
    bb96:	b2db      	uxtb	r3, r3
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d011      	beq.n	bbc0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    bb9c:	2102      	movs	r1, #2
    bb9e:	6838      	ldr	r0, [r7, #0]
    bba0:	4b8b      	ldr	r3, [pc, #556]	; (bdd0 <_tc_timer_init+0x26c>)
    bba2:	4798      	blx	r3
    bba4:	4603      	mov	r3, r0
    bba6:	2b00      	cmp	r3, #0
    bba8:	d006      	beq.n	bbb8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    bbaa:	6838      	ldr	r0, [r7, #0]
    bbac:	4b89      	ldr	r3, [pc, #548]	; (bdd4 <_tc_timer_init+0x270>)
    bbae:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    bbb0:	2102      	movs	r1, #2
    bbb2:	6838      	ldr	r0, [r7, #0]
    bbb4:	4b88      	ldr	r3, [pc, #544]	; (bdd8 <_tc_timer_init+0x274>)
    bbb6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    bbb8:	2101      	movs	r1, #1
    bbba:	6838      	ldr	r0, [r7, #0]
    bbbc:	4b87      	ldr	r3, [pc, #540]	; (bddc <_tc_timer_init+0x278>)
    bbbe:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    bbc0:	2101      	movs	r1, #1
    bbc2:	6838      	ldr	r0, [r7, #0]
    bbc4:	4b84      	ldr	r3, [pc, #528]	; (bdd8 <_tc_timer_init+0x274>)
    bbc6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    bbc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bbcc:	4984      	ldr	r1, [pc, #528]	; (bde0 <_tc_timer_init+0x27c>)
    bbce:	4613      	mov	r3, r2
    bbd0:	009b      	lsls	r3, r3, #2
    bbd2:	4413      	add	r3, r2
    bbd4:	009b      	lsls	r3, r3, #2
    bbd6:	440b      	add	r3, r1
    bbd8:	3304      	adds	r3, #4
    bbda:	681b      	ldr	r3, [r3, #0]
    bbdc:	4619      	mov	r1, r3
    bbde:	6838      	ldr	r0, [r7, #0]
    bbe0:	4b7e      	ldr	r3, [pc, #504]	; (bddc <_tc_timer_init+0x278>)
    bbe2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    bbe4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bbe8:	497d      	ldr	r1, [pc, #500]	; (bde0 <_tc_timer_init+0x27c>)
    bbea:	4613      	mov	r3, r2
    bbec:	009b      	lsls	r3, r3, #2
    bbee:	4413      	add	r3, r2
    bbf0:	009b      	lsls	r3, r3, #2
    bbf2:	440b      	add	r3, r1
    bbf4:	330a      	adds	r3, #10
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	4619      	mov	r1, r3
    bbfa:	6838      	ldr	r0, [r7, #0]
    bbfc:	4b79      	ldr	r3, [pc, #484]	; (bde4 <_tc_timer_init+0x280>)
    bbfe:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bc00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc04:	4976      	ldr	r1, [pc, #472]	; (bde0 <_tc_timer_init+0x27c>)
    bc06:	4613      	mov	r3, r2
    bc08:	009b      	lsls	r3, r3, #2
    bc0a:	4413      	add	r3, r2
    bc0c:	009b      	lsls	r3, r3, #2
    bc0e:	440b      	add	r3, r1
    bc10:	3308      	adds	r3, #8
    bc12:	881b      	ldrh	r3, [r3, #0]
    bc14:	4619      	mov	r1, r3
    bc16:	6838      	ldr	r0, [r7, #0]
    bc18:	4b73      	ldr	r3, [pc, #460]	; (bde8 <_tc_timer_init+0x284>)
    bc1a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    bc1c:	2101      	movs	r1, #1
    bc1e:	6838      	ldr	r0, [r7, #0]
    bc20:	4b72      	ldr	r3, [pc, #456]	; (bdec <_tc_timer_init+0x288>)
    bc22:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    bc24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc28:	496d      	ldr	r1, [pc, #436]	; (bde0 <_tc_timer_init+0x27c>)
    bc2a:	4613      	mov	r3, r2
    bc2c:	009b      	lsls	r3, r3, #2
    bc2e:	4413      	add	r3, r2
    bc30:	009b      	lsls	r3, r3, #2
    bc32:	440b      	add	r3, r1
    bc34:	3304      	adds	r3, #4
    bc36:	681b      	ldr	r3, [r3, #0]
    bc38:	f003 030c 	and.w	r3, r3, #12
    bc3c:	2b08      	cmp	r3, #8
    bc3e:	d11e      	bne.n	bc7e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bc40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc44:	4966      	ldr	r1, [pc, #408]	; (bde0 <_tc_timer_init+0x27c>)
    bc46:	4613      	mov	r3, r2
    bc48:	009b      	lsls	r3, r3, #2
    bc4a:	4413      	add	r3, r2
    bc4c:	009b      	lsls	r3, r3, #2
    bc4e:	440b      	add	r3, r1
    bc50:	330c      	adds	r3, #12
    bc52:	681b      	ldr	r3, [r3, #0]
    bc54:	461a      	mov	r2, r3
    bc56:	2100      	movs	r1, #0
    bc58:	6838      	ldr	r0, [r7, #0]
    bc5a:	4b65      	ldr	r3, [pc, #404]	; (bdf0 <_tc_timer_init+0x28c>)
    bc5c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    bc5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc62:	495f      	ldr	r1, [pc, #380]	; (bde0 <_tc_timer_init+0x27c>)
    bc64:	4613      	mov	r3, r2
    bc66:	009b      	lsls	r3, r3, #2
    bc68:	4413      	add	r3, r2
    bc6a:	009b      	lsls	r3, r3, #2
    bc6c:	440b      	add	r3, r1
    bc6e:	3310      	adds	r3, #16
    bc70:	681b      	ldr	r3, [r3, #0]
    bc72:	461a      	mov	r2, r3
    bc74:	2101      	movs	r1, #1
    bc76:	6838      	ldr	r0, [r7, #0]
    bc78:	4b5d      	ldr	r3, [pc, #372]	; (bdf0 <_tc_timer_init+0x28c>)
    bc7a:	4798      	blx	r3
    bc7c:	e06a      	b.n	bd54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    bc7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc82:	4957      	ldr	r1, [pc, #348]	; (bde0 <_tc_timer_init+0x27c>)
    bc84:	4613      	mov	r3, r2
    bc86:	009b      	lsls	r3, r3, #2
    bc88:	4413      	add	r3, r2
    bc8a:	009b      	lsls	r3, r3, #2
    bc8c:	440b      	add	r3, r1
    bc8e:	3304      	adds	r3, #4
    bc90:	681b      	ldr	r3, [r3, #0]
    bc92:	f003 030c 	and.w	r3, r3, #12
    bc96:	2b00      	cmp	r3, #0
    bc98:	d120      	bne.n	bcdc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    bc9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bc9e:	4950      	ldr	r1, [pc, #320]	; (bde0 <_tc_timer_init+0x27c>)
    bca0:	4613      	mov	r3, r2
    bca2:	009b      	lsls	r3, r3, #2
    bca4:	4413      	add	r3, r2
    bca6:	009b      	lsls	r3, r3, #2
    bca8:	440b      	add	r3, r1
    bcaa:	330c      	adds	r3, #12
    bcac:	681b      	ldr	r3, [r3, #0]
    bcae:	b29b      	uxth	r3, r3
    bcb0:	461a      	mov	r2, r3
    bcb2:	2100      	movs	r1, #0
    bcb4:	6838      	ldr	r0, [r7, #0]
    bcb6:	4b4f      	ldr	r3, [pc, #316]	; (bdf4 <_tc_timer_init+0x290>)
    bcb8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    bcba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bcbe:	4948      	ldr	r1, [pc, #288]	; (bde0 <_tc_timer_init+0x27c>)
    bcc0:	4613      	mov	r3, r2
    bcc2:	009b      	lsls	r3, r3, #2
    bcc4:	4413      	add	r3, r2
    bcc6:	009b      	lsls	r3, r3, #2
    bcc8:	440b      	add	r3, r1
    bcca:	3310      	adds	r3, #16
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	b29b      	uxth	r3, r3
    bcd0:	461a      	mov	r2, r3
    bcd2:	2101      	movs	r1, #1
    bcd4:	6838      	ldr	r0, [r7, #0]
    bcd6:	4b47      	ldr	r3, [pc, #284]	; (bdf4 <_tc_timer_init+0x290>)
    bcd8:	4798      	blx	r3
    bcda:	e03b      	b.n	bd54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    bcdc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bce0:	493f      	ldr	r1, [pc, #252]	; (bde0 <_tc_timer_init+0x27c>)
    bce2:	4613      	mov	r3, r2
    bce4:	009b      	lsls	r3, r3, #2
    bce6:	4413      	add	r3, r2
    bce8:	009b      	lsls	r3, r3, #2
    bcea:	440b      	add	r3, r1
    bcec:	3304      	adds	r3, #4
    bcee:	681b      	ldr	r3, [r3, #0]
    bcf0:	f003 030c 	and.w	r3, r3, #12
    bcf4:	2b04      	cmp	r3, #4
    bcf6:	d12d      	bne.n	bd54 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    bcf8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bcfc:	4938      	ldr	r1, [pc, #224]	; (bde0 <_tc_timer_init+0x27c>)
    bcfe:	4613      	mov	r3, r2
    bd00:	009b      	lsls	r3, r3, #2
    bd02:	4413      	add	r3, r2
    bd04:	009b      	lsls	r3, r3, #2
    bd06:	440b      	add	r3, r1
    bd08:	330c      	adds	r3, #12
    bd0a:	681b      	ldr	r3, [r3, #0]
    bd0c:	b2db      	uxtb	r3, r3
    bd0e:	461a      	mov	r2, r3
    bd10:	2100      	movs	r1, #0
    bd12:	6838      	ldr	r0, [r7, #0]
    bd14:	4b38      	ldr	r3, [pc, #224]	; (bdf8 <_tc_timer_init+0x294>)
    bd16:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    bd18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd1c:	4930      	ldr	r1, [pc, #192]	; (bde0 <_tc_timer_init+0x27c>)
    bd1e:	4613      	mov	r3, r2
    bd20:	009b      	lsls	r3, r3, #2
    bd22:	4413      	add	r3, r2
    bd24:	009b      	lsls	r3, r3, #2
    bd26:	440b      	add	r3, r1
    bd28:	3310      	adds	r3, #16
    bd2a:	681b      	ldr	r3, [r3, #0]
    bd2c:	b2db      	uxtb	r3, r3
    bd2e:	461a      	mov	r2, r3
    bd30:	2101      	movs	r1, #1
    bd32:	6838      	ldr	r0, [r7, #0]
    bd34:	4b30      	ldr	r3, [pc, #192]	; (bdf8 <_tc_timer_init+0x294>)
    bd36:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    bd38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd3c:	4928      	ldr	r1, [pc, #160]	; (bde0 <_tc_timer_init+0x27c>)
    bd3e:	4613      	mov	r3, r2
    bd40:	009b      	lsls	r3, r3, #2
    bd42:	4413      	add	r3, r2
    bd44:	009b      	lsls	r3, r3, #2
    bd46:	440b      	add	r3, r1
    bd48:	330b      	adds	r3, #11
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	4619      	mov	r1, r3
    bd4e:	6838      	ldr	r0, [r7, #0]
    bd50:	4b2a      	ldr	r3, [pc, #168]	; (bdfc <_tc_timer_init+0x298>)
    bd52:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    bd54:	6838      	ldr	r0, [r7, #0]
    bd56:	4b2a      	ldr	r3, [pc, #168]	; (be00 <_tc_timer_init+0x29c>)
    bd58:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    bd5a:	6879      	ldr	r1, [r7, #4]
    bd5c:	6838      	ldr	r0, [r7, #0]
    bd5e:	4b29      	ldr	r3, [pc, #164]	; (be04 <_tc_timer_init+0x2a0>)
    bd60:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    bd62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd66:	491e      	ldr	r1, [pc, #120]	; (bde0 <_tc_timer_init+0x27c>)
    bd68:	4613      	mov	r3, r2
    bd6a:	009b      	lsls	r3, r3, #2
    bd6c:	4413      	add	r3, r2
    bd6e:	009b      	lsls	r3, r3, #2
    bd70:	440b      	add	r3, r1
    bd72:	3302      	adds	r3, #2
    bd74:	f9b3 3000 	ldrsh.w	r3, [r3]
    bd78:	4618      	mov	r0, r3
    bd7a:	4b23      	ldr	r3, [pc, #140]	; (be08 <_tc_timer_init+0x2a4>)
    bd7c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    bd7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd82:	4917      	ldr	r1, [pc, #92]	; (bde0 <_tc_timer_init+0x27c>)
    bd84:	4613      	mov	r3, r2
    bd86:	009b      	lsls	r3, r3, #2
    bd88:	4413      	add	r3, r2
    bd8a:	009b      	lsls	r3, r3, #2
    bd8c:	440b      	add	r3, r1
    bd8e:	3302      	adds	r3, #2
    bd90:	f9b3 3000 	ldrsh.w	r3, [r3]
    bd94:	4618      	mov	r0, r3
    bd96:	4b1d      	ldr	r3, [pc, #116]	; (be0c <_tc_timer_init+0x2a8>)
    bd98:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    bd9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd9e:	4910      	ldr	r1, [pc, #64]	; (bde0 <_tc_timer_init+0x27c>)
    bda0:	4613      	mov	r3, r2
    bda2:	009b      	lsls	r3, r3, #2
    bda4:	4413      	add	r3, r2
    bda6:	009b      	lsls	r3, r3, #2
    bda8:	440b      	add	r3, r1
    bdaa:	3302      	adds	r3, #2
    bdac:	f9b3 3000 	ldrsh.w	r3, [r3]
    bdb0:	4618      	mov	r0, r3
    bdb2:	4b17      	ldr	r3, [pc, #92]	; (be10 <_tc_timer_init+0x2ac>)
    bdb4:	4798      	blx	r3

	return ERR_NONE;
    bdb6:	2300      	movs	r3, #0
}
    bdb8:	4618      	mov	r0, r3
    bdba:	3710      	adds	r7, #16
    bdbc:	46bd      	mov	sp, r7
    bdbe:	bd80      	pop	{r7, pc}
    bdc0:	0000c3b5 	.word	0x0000c3b5
    bdc4:	00012bdc 	.word	0x00012bdc
    bdc8:	00007261 	.word	0x00007261
    bdcc:	0000b7d9 	.word	0x0000b7d9
    bdd0:	0000b979 	.word	0x0000b979
    bdd4:	0000b929 	.word	0x0000b929
    bdd8:	0000b7b5 	.word	0x0000b7b5
    bddc:	0000b9a9 	.word	0x0000b9a9
    bde0:	20000508 	.word	0x20000508
    bde4:	0000ba09 	.word	0x0000ba09
    bde8:	0000b9cd 	.word	0x0000b9cd
    bdec:	0000b9eb 	.word	0x0000b9eb
    bdf0:	0000bb09 	.word	0x0000bb09
    bdf4:	0000baa5 	.word	0x0000baa5
    bdf8:	0000ba75 	.word	0x0000ba75
    bdfc:	0000ba29 	.word	0x0000ba29
    be00:	0000b85d 	.word	0x0000b85d
    be04:	0000c41d 	.word	0x0000c41d
    be08:	0000b735 	.word	0x0000b735
    be0c:	0000b779 	.word	0x0000b779
    be10:	0000b6f9 	.word	0x0000b6f9

0000be14 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    be14:	b580      	push	{r7, lr}
    be16:	b084      	sub	sp, #16
    be18:	af00      	add	r7, sp, #0
    be1a:	6078      	str	r0, [r7, #4]
    be1c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    be1e:	6838      	ldr	r0, [r7, #0]
    be20:	4b73      	ldr	r3, [pc, #460]	; (bff0 <_pwm_init+0x1dc>)
    be22:	4798      	blx	r3
    be24:	4603      	mov	r3, r0
    be26:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	683a      	ldr	r2, [r7, #0]
    be2c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    be2e:	2101      	movs	r1, #1
    be30:	6838      	ldr	r0, [r7, #0]
    be32:	4b70      	ldr	r3, [pc, #448]	; (bff4 <_pwm_init+0x1e0>)
    be34:	4798      	blx	r3
    be36:	4603      	mov	r3, r0
    be38:	f083 0301 	eor.w	r3, r3, #1
    be3c:	b2db      	uxtb	r3, r3
    be3e:	2b00      	cmp	r3, #0
    be40:	d011      	beq.n	be66 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    be42:	2102      	movs	r1, #2
    be44:	6838      	ldr	r0, [r7, #0]
    be46:	4b6c      	ldr	r3, [pc, #432]	; (bff8 <_pwm_init+0x1e4>)
    be48:	4798      	blx	r3
    be4a:	4603      	mov	r3, r0
    be4c:	2b00      	cmp	r3, #0
    be4e:	d006      	beq.n	be5e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    be50:	6838      	ldr	r0, [r7, #0]
    be52:	4b6a      	ldr	r3, [pc, #424]	; (bffc <_pwm_init+0x1e8>)
    be54:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    be56:	2102      	movs	r1, #2
    be58:	6838      	ldr	r0, [r7, #0]
    be5a:	4b69      	ldr	r3, [pc, #420]	; (c000 <_pwm_init+0x1ec>)
    be5c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    be5e:	2101      	movs	r1, #1
    be60:	6838      	ldr	r0, [r7, #0]
    be62:	4b68      	ldr	r3, [pc, #416]	; (c004 <_pwm_init+0x1f0>)
    be64:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    be66:	2101      	movs	r1, #1
    be68:	6838      	ldr	r0, [r7, #0]
    be6a:	4b65      	ldr	r3, [pc, #404]	; (c000 <_pwm_init+0x1ec>)
    be6c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    be6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be72:	4965      	ldr	r1, [pc, #404]	; (c008 <_pwm_init+0x1f4>)
    be74:	4613      	mov	r3, r2
    be76:	009b      	lsls	r3, r3, #2
    be78:	4413      	add	r3, r2
    be7a:	009b      	lsls	r3, r3, #2
    be7c:	440b      	add	r3, r1
    be7e:	3304      	adds	r3, #4
    be80:	681b      	ldr	r3, [r3, #0]
    be82:	4619      	mov	r1, r3
    be84:	6838      	ldr	r0, [r7, #0]
    be86:	4b5f      	ldr	r3, [pc, #380]	; (c004 <_pwm_init+0x1f0>)
    be88:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    be8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be8e:	495e      	ldr	r1, [pc, #376]	; (c008 <_pwm_init+0x1f4>)
    be90:	4613      	mov	r3, r2
    be92:	009b      	lsls	r3, r3, #2
    be94:	4413      	add	r3, r2
    be96:	009b      	lsls	r3, r3, #2
    be98:	440b      	add	r3, r1
    be9a:	330a      	adds	r3, #10
    be9c:	781b      	ldrb	r3, [r3, #0]
    be9e:	4619      	mov	r1, r3
    bea0:	6838      	ldr	r0, [r7, #0]
    bea2:	4b5a      	ldr	r3, [pc, #360]	; (c00c <_pwm_init+0x1f8>)
    bea4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bea6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    beaa:	4957      	ldr	r1, [pc, #348]	; (c008 <_pwm_init+0x1f4>)
    beac:	4613      	mov	r3, r2
    beae:	009b      	lsls	r3, r3, #2
    beb0:	4413      	add	r3, r2
    beb2:	009b      	lsls	r3, r3, #2
    beb4:	440b      	add	r3, r1
    beb6:	3308      	adds	r3, #8
    beb8:	881b      	ldrh	r3, [r3, #0]
    beba:	4619      	mov	r1, r3
    bebc:	6838      	ldr	r0, [r7, #0]
    bebe:	4b54      	ldr	r3, [pc, #336]	; (c010 <_pwm_init+0x1fc>)
    bec0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    bec2:	2103      	movs	r1, #3
    bec4:	6838      	ldr	r0, [r7, #0]
    bec6:	4b53      	ldr	r3, [pc, #332]	; (c014 <_pwm_init+0x200>)
    bec8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    beca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bece:	494e      	ldr	r1, [pc, #312]	; (c008 <_pwm_init+0x1f4>)
    bed0:	4613      	mov	r3, r2
    bed2:	009b      	lsls	r3, r3, #2
    bed4:	4413      	add	r3, r2
    bed6:	009b      	lsls	r3, r3, #2
    bed8:	440b      	add	r3, r1
    beda:	3304      	adds	r3, #4
    bedc:	681b      	ldr	r3, [r3, #0]
    bede:	f003 030c 	and.w	r3, r3, #12
    bee2:	2b08      	cmp	r3, #8
    bee4:	d11e      	bne.n	bf24 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bee6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    beea:	4947      	ldr	r1, [pc, #284]	; (c008 <_pwm_init+0x1f4>)
    beec:	4613      	mov	r3, r2
    beee:	009b      	lsls	r3, r3, #2
    bef0:	4413      	add	r3, r2
    bef2:	009b      	lsls	r3, r3, #2
    bef4:	440b      	add	r3, r1
    bef6:	330c      	adds	r3, #12
    bef8:	681b      	ldr	r3, [r3, #0]
    befa:	461a      	mov	r2, r3
    befc:	2100      	movs	r1, #0
    befe:	6838      	ldr	r0, [r7, #0]
    bf00:	4b45      	ldr	r3, [pc, #276]	; (c018 <_pwm_init+0x204>)
    bf02:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    bf04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf08:	493f      	ldr	r1, [pc, #252]	; (c008 <_pwm_init+0x1f4>)
    bf0a:	4613      	mov	r3, r2
    bf0c:	009b      	lsls	r3, r3, #2
    bf0e:	4413      	add	r3, r2
    bf10:	009b      	lsls	r3, r3, #2
    bf12:	440b      	add	r3, r1
    bf14:	3310      	adds	r3, #16
    bf16:	681b      	ldr	r3, [r3, #0]
    bf18:	461a      	mov	r2, r3
    bf1a:	2101      	movs	r1, #1
    bf1c:	6838      	ldr	r0, [r7, #0]
    bf1e:	4b3e      	ldr	r3, [pc, #248]	; (c018 <_pwm_init+0x204>)
    bf20:	4798      	blx	r3
    bf22:	e031      	b.n	bf88 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    bf24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf28:	4937      	ldr	r1, [pc, #220]	; (c008 <_pwm_init+0x1f4>)
    bf2a:	4613      	mov	r3, r2
    bf2c:	009b      	lsls	r3, r3, #2
    bf2e:	4413      	add	r3, r2
    bf30:	009b      	lsls	r3, r3, #2
    bf32:	440b      	add	r3, r1
    bf34:	3304      	adds	r3, #4
    bf36:	681b      	ldr	r3, [r3, #0]
    bf38:	f003 030c 	and.w	r3, r3, #12
    bf3c:	2b00      	cmp	r3, #0
    bf3e:	d120      	bne.n	bf82 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    bf40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf44:	4930      	ldr	r1, [pc, #192]	; (c008 <_pwm_init+0x1f4>)
    bf46:	4613      	mov	r3, r2
    bf48:	009b      	lsls	r3, r3, #2
    bf4a:	4413      	add	r3, r2
    bf4c:	009b      	lsls	r3, r3, #2
    bf4e:	440b      	add	r3, r1
    bf50:	330c      	adds	r3, #12
    bf52:	681b      	ldr	r3, [r3, #0]
    bf54:	b29b      	uxth	r3, r3
    bf56:	461a      	mov	r2, r3
    bf58:	2100      	movs	r1, #0
    bf5a:	6838      	ldr	r0, [r7, #0]
    bf5c:	4b2f      	ldr	r3, [pc, #188]	; (c01c <_pwm_init+0x208>)
    bf5e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    bf60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf64:	4928      	ldr	r1, [pc, #160]	; (c008 <_pwm_init+0x1f4>)
    bf66:	4613      	mov	r3, r2
    bf68:	009b      	lsls	r3, r3, #2
    bf6a:	4413      	add	r3, r2
    bf6c:	009b      	lsls	r3, r3, #2
    bf6e:	440b      	add	r3, r1
    bf70:	3310      	adds	r3, #16
    bf72:	681b      	ldr	r3, [r3, #0]
    bf74:	b29b      	uxth	r3, r3
    bf76:	461a      	mov	r2, r3
    bf78:	2101      	movs	r1, #1
    bf7a:	6838      	ldr	r0, [r7, #0]
    bf7c:	4b27      	ldr	r3, [pc, #156]	; (c01c <_pwm_init+0x208>)
    bf7e:	4798      	blx	r3
    bf80:	e002      	b.n	bf88 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    bf82:	f04f 33ff 	mov.w	r3, #4294967295
    bf86:	e02e      	b.n	bfe6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    bf88:	6879      	ldr	r1, [r7, #4]
    bf8a:	6838      	ldr	r0, [r7, #0]
    bf8c:	4b24      	ldr	r3, [pc, #144]	; (c020 <_pwm_init+0x20c>)
    bf8e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    bf90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf94:	491c      	ldr	r1, [pc, #112]	; (c008 <_pwm_init+0x1f4>)
    bf96:	4613      	mov	r3, r2
    bf98:	009b      	lsls	r3, r3, #2
    bf9a:	4413      	add	r3, r2
    bf9c:	009b      	lsls	r3, r3, #2
    bf9e:	440b      	add	r3, r1
    bfa0:	3302      	adds	r3, #2
    bfa2:	f9b3 3000 	ldrsh.w	r3, [r3]
    bfa6:	4618      	mov	r0, r3
    bfa8:	4b1e      	ldr	r3, [pc, #120]	; (c024 <_pwm_init+0x210>)
    bfaa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    bfac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bfb0:	4915      	ldr	r1, [pc, #84]	; (c008 <_pwm_init+0x1f4>)
    bfb2:	4613      	mov	r3, r2
    bfb4:	009b      	lsls	r3, r3, #2
    bfb6:	4413      	add	r3, r2
    bfb8:	009b      	lsls	r3, r3, #2
    bfba:	440b      	add	r3, r1
    bfbc:	3302      	adds	r3, #2
    bfbe:	f9b3 3000 	ldrsh.w	r3, [r3]
    bfc2:	4618      	mov	r0, r3
    bfc4:	4b18      	ldr	r3, [pc, #96]	; (c028 <_pwm_init+0x214>)
    bfc6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    bfc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bfcc:	490e      	ldr	r1, [pc, #56]	; (c008 <_pwm_init+0x1f4>)
    bfce:	4613      	mov	r3, r2
    bfd0:	009b      	lsls	r3, r3, #2
    bfd2:	4413      	add	r3, r2
    bfd4:	009b      	lsls	r3, r3, #2
    bfd6:	440b      	add	r3, r1
    bfd8:	3302      	adds	r3, #2
    bfda:	f9b3 3000 	ldrsh.w	r3, [r3]
    bfde:	4618      	mov	r0, r3
    bfe0:	4b12      	ldr	r3, [pc, #72]	; (c02c <_pwm_init+0x218>)
    bfe2:	4798      	blx	r3

	return 0;
    bfe4:	2300      	movs	r3, #0
}
    bfe6:	4618      	mov	r0, r3
    bfe8:	3710      	adds	r7, #16
    bfea:	46bd      	mov	sp, r7
    bfec:	bd80      	pop	{r7, pc}
    bfee:	bf00      	nop
    bff0:	0000c3b5 	.word	0x0000c3b5
    bff4:	0000b7d9 	.word	0x0000b7d9
    bff8:	0000b979 	.word	0x0000b979
    bffc:	0000b929 	.word	0x0000b929
    c000:	0000b7b5 	.word	0x0000b7b5
    c004:	0000b9a9 	.word	0x0000b9a9
    c008:	20000508 	.word	0x20000508
    c00c:	0000ba09 	.word	0x0000ba09
    c010:	0000b9cd 	.word	0x0000b9cd
    c014:	0000b9eb 	.word	0x0000b9eb
    c018:	0000bb09 	.word	0x0000bb09
    c01c:	0000baa5 	.word	0x0000baa5
    c020:	0000c41d 	.word	0x0000c41d
    c024:	0000b735 	.word	0x0000b735
    c028:	0000b779 	.word	0x0000b779
    c02c:	0000b6f9 	.word	0x0000b6f9

0000c030 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    c030:	b580      	push	{r7, lr}
    c032:	b084      	sub	sp, #16
    c034:	af00      	add	r7, sp, #0
    c036:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c038:	687b      	ldr	r3, [r7, #4]
    c03a:	68db      	ldr	r3, [r3, #12]
    c03c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    c03e:	68f8      	ldr	r0, [r7, #12]
    c040:	4b10      	ldr	r3, [pc, #64]	; (c084 <_tc_timer_deinit+0x54>)
    c042:	4798      	blx	r3
    c044:	4603      	mov	r3, r0
    c046:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    c048:	22f9      	movs	r2, #249	; 0xf9
    c04a:	490f      	ldr	r1, [pc, #60]	; (c088 <_tc_timer_deinit+0x58>)
    c04c:	2001      	movs	r0, #1
    c04e:	4b0f      	ldr	r3, [pc, #60]	; (c08c <_tc_timer_deinit+0x5c>)
    c050:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    c052:	f997 200b 	ldrsb.w	r2, [r7, #11]
    c056:	490e      	ldr	r1, [pc, #56]	; (c090 <_tc_timer_deinit+0x60>)
    c058:	4613      	mov	r3, r2
    c05a:	009b      	lsls	r3, r3, #2
    c05c:	4413      	add	r3, r2
    c05e:	009b      	lsls	r3, r3, #2
    c060:	440b      	add	r3, r1
    c062:	3302      	adds	r3, #2
    c064:	f9b3 3000 	ldrsh.w	r3, [r3]
    c068:	4618      	mov	r0, r3
    c06a:	4b0a      	ldr	r3, [pc, #40]	; (c094 <_tc_timer_deinit+0x64>)
    c06c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    c06e:	68f8      	ldr	r0, [r7, #12]
    c070:	4b09      	ldr	r3, [pc, #36]	; (c098 <_tc_timer_deinit+0x68>)
    c072:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    c074:	68f8      	ldr	r0, [r7, #12]
    c076:	4b09      	ldr	r3, [pc, #36]	; (c09c <_tc_timer_deinit+0x6c>)
    c078:	4798      	blx	r3
}
    c07a:	bf00      	nop
    c07c:	3710      	adds	r7, #16
    c07e:	46bd      	mov	sp, r7
    c080:	bd80      	pop	{r7, pc}
    c082:	bf00      	nop
    c084:	0000c3b5 	.word	0x0000c3b5
    c088:	00012bdc 	.word	0x00012bdc
    c08c:	00007261 	.word	0x00007261
    c090:	20000508 	.word	0x20000508
    c094:	0000b735 	.word	0x0000b735
    c098:	0000b929 	.word	0x0000b929
    c09c:	0000b8a1 	.word	0x0000b8a1

0000c0a0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    c0a0:	b580      	push	{r7, lr}
    c0a2:	b082      	sub	sp, #8
    c0a4:	af00      	add	r7, sp, #0
    c0a6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    c0a8:	687b      	ldr	r3, [r7, #4]
    c0aa:	68db      	ldr	r3, [r3, #12]
    c0ac:	4618      	mov	r0, r3
    c0ae:	4b03      	ldr	r3, [pc, #12]	; (c0bc <_tc_timer_start+0x1c>)
    c0b0:	4798      	blx	r3
}
    c0b2:	bf00      	nop
    c0b4:	3708      	adds	r7, #8
    c0b6:	46bd      	mov	sp, r7
    c0b8:	bd80      	pop	{r7, pc}
    c0ba:	bf00      	nop
    c0bc:	0000b8c9 	.word	0x0000b8c9

0000c0c0 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    c0c0:	b580      	push	{r7, lr}
    c0c2:	b082      	sub	sp, #8
    c0c4:	af00      	add	r7, sp, #0
    c0c6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	68db      	ldr	r3, [r3, #12]
    c0cc:	4618      	mov	r0, r3
    c0ce:	4b03      	ldr	r3, [pc, #12]	; (c0dc <_tc_timer_stop+0x1c>)
    c0d0:	4798      	blx	r3
}
    c0d2:	bf00      	nop
    c0d4:	3708      	adds	r7, #8
    c0d6:	46bd      	mov	sp, r7
    c0d8:	bd80      	pop	{r7, pc}
    c0da:	bf00      	nop
    c0dc:	0000b929 	.word	0x0000b929

0000c0e0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b084      	sub	sp, #16
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	6078      	str	r0, [r7, #4]
    c0e8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    c0ea:	687b      	ldr	r3, [r7, #4]
    c0ec:	68db      	ldr	r3, [r3, #12]
    c0ee:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c0f0:	68f8      	ldr	r0, [r7, #12]
    c0f2:	4b14      	ldr	r3, [pc, #80]	; (c144 <_tc_timer_set_period+0x64>)
    c0f4:	4798      	blx	r3
    c0f6:	4603      	mov	r3, r0
    c0f8:	2b02      	cmp	r3, #2
    c0fa:	d105      	bne.n	c108 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    c0fc:	683a      	ldr	r2, [r7, #0]
    c0fe:	2100      	movs	r1, #0
    c100:	68f8      	ldr	r0, [r7, #12]
    c102:	4b11      	ldr	r3, [pc, #68]	; (c148 <_tc_timer_set_period+0x68>)
    c104:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    c106:	e019      	b.n	c13c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c108:	68f8      	ldr	r0, [r7, #12]
    c10a:	4b0e      	ldr	r3, [pc, #56]	; (c144 <_tc_timer_set_period+0x64>)
    c10c:	4798      	blx	r3
    c10e:	4603      	mov	r3, r0
    c110:	2b00      	cmp	r3, #0
    c112:	d107      	bne.n	c124 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    c114:	683b      	ldr	r3, [r7, #0]
    c116:	b29b      	uxth	r3, r3
    c118:	461a      	mov	r2, r3
    c11a:	2100      	movs	r1, #0
    c11c:	68f8      	ldr	r0, [r7, #12]
    c11e:	4b0b      	ldr	r3, [pc, #44]	; (c14c <_tc_timer_set_period+0x6c>)
    c120:	4798      	blx	r3
}
    c122:	e00b      	b.n	c13c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c124:	68f8      	ldr	r0, [r7, #12]
    c126:	4b07      	ldr	r3, [pc, #28]	; (c144 <_tc_timer_set_period+0x64>)
    c128:	4798      	blx	r3
    c12a:	4603      	mov	r3, r0
    c12c:	2b01      	cmp	r3, #1
    c12e:	d105      	bne.n	c13c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    c130:	683b      	ldr	r3, [r7, #0]
    c132:	b2db      	uxtb	r3, r3
    c134:	4619      	mov	r1, r3
    c136:	68f8      	ldr	r0, [r7, #12]
    c138:	4b05      	ldr	r3, [pc, #20]	; (c150 <_tc_timer_set_period+0x70>)
    c13a:	4798      	blx	r3
}
    c13c:	bf00      	nop
    c13e:	3710      	adds	r7, #16
    c140:	46bd      	mov	sp, r7
    c142:	bd80      	pop	{r7, pc}
    c144:	0000b951 	.word	0x0000b951
    c148:	0000bb09 	.word	0x0000bb09
    c14c:	0000baa5 	.word	0x0000baa5
    c150:	0000ba29 	.word	0x0000ba29

0000c154 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    c154:	b580      	push	{r7, lr}
    c156:	b084      	sub	sp, #16
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	68db      	ldr	r3, [r3, #12]
    c160:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c162:	68f8      	ldr	r0, [r7, #12]
    c164:	4b13      	ldr	r3, [pc, #76]	; (c1b4 <_tc_timer_get_period+0x60>)
    c166:	4798      	blx	r3
    c168:	4603      	mov	r3, r0
    c16a:	2b02      	cmp	r3, #2
    c16c:	d105      	bne.n	c17a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    c16e:	2100      	movs	r1, #0
    c170:	68f8      	ldr	r0, [r7, #12]
    c172:	4b11      	ldr	r3, [pc, #68]	; (c1b8 <_tc_timer_get_period+0x64>)
    c174:	4798      	blx	r3
    c176:	4603      	mov	r3, r0
    c178:	e017      	b.n	c1aa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c17a:	68f8      	ldr	r0, [r7, #12]
    c17c:	4b0d      	ldr	r3, [pc, #52]	; (c1b4 <_tc_timer_get_period+0x60>)
    c17e:	4798      	blx	r3
    c180:	4603      	mov	r3, r0
    c182:	2b00      	cmp	r3, #0
    c184:	d105      	bne.n	c192 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    c186:	2100      	movs	r1, #0
    c188:	68f8      	ldr	r0, [r7, #12]
    c18a:	4b0c      	ldr	r3, [pc, #48]	; (c1bc <_tc_timer_get_period+0x68>)
    c18c:	4798      	blx	r3
    c18e:	4603      	mov	r3, r0
    c190:	e00b      	b.n	c1aa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c192:	68f8      	ldr	r0, [r7, #12]
    c194:	4b07      	ldr	r3, [pc, #28]	; (c1b4 <_tc_timer_get_period+0x60>)
    c196:	4798      	blx	r3
    c198:	4603      	mov	r3, r0
    c19a:	2b01      	cmp	r3, #1
    c19c:	d104      	bne.n	c1a8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    c19e:	68f8      	ldr	r0, [r7, #12]
    c1a0:	4b07      	ldr	r3, [pc, #28]	; (c1c0 <_tc_timer_get_period+0x6c>)
    c1a2:	4798      	blx	r3
    c1a4:	4603      	mov	r3, r0
    c1a6:	e000      	b.n	c1aa <_tc_timer_get_period+0x56>
	}

	return 0;
    c1a8:	2300      	movs	r3, #0
}
    c1aa:	4618      	mov	r0, r3
    c1ac:	3710      	adds	r7, #16
    c1ae:	46bd      	mov	sp, r7
    c1b0:	bd80      	pop	{r7, pc}
    c1b2:	bf00      	nop
    c1b4:	0000b951 	.word	0x0000b951
    c1b8:	0000bb39 	.word	0x0000bb39
    c1bc:	0000bad9 	.word	0x0000bad9
    c1c0:	0000ba51 	.word	0x0000ba51

0000c1c4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    c1cc:	687b      	ldr	r3, [r7, #4]
    c1ce:	68db      	ldr	r3, [r3, #12]
    c1d0:	4618      	mov	r0, r3
    c1d2:	4b03      	ldr	r3, [pc, #12]	; (c1e0 <_tc_timer_is_started+0x1c>)
    c1d4:	4798      	blx	r3
    c1d6:	4603      	mov	r3, r0
}
    c1d8:	4618      	mov	r0, r3
    c1da:	3708      	adds	r7, #8
    c1dc:	46bd      	mov	sp, r7
    c1de:	bd80      	pop	{r7, pc}
    c1e0:	0000b8f1 	.word	0x0000b8f1

0000c1e4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    c1e4:	b480      	push	{r7}
    c1e6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    c1e8:	4b02      	ldr	r3, [pc, #8]	; (c1f4 <_tc_get_timer+0x10>)
}
    c1ea:	4618      	mov	r0, r3
    c1ec:	46bd      	mov	sp, r7
    c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1f2:	4770      	bx	lr
    c1f4:	20000580 	.word	0x20000580

0000c1f8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    c1f8:	b480      	push	{r7}
    c1fa:	af00      	add	r7, sp, #0
	return NULL;
    c1fc:	2300      	movs	r3, #0
}
    c1fe:	4618      	mov	r0, r3
    c200:	46bd      	mov	sp, r7
    c202:	f85d 7b04 	ldr.w	r7, [sp], #4
    c206:	4770      	bx	lr

0000c208 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    c208:	b580      	push	{r7, lr}
    c20a:	b084      	sub	sp, #16
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	68db      	ldr	r3, [r3, #12]
    c214:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    c216:	68f8      	ldr	r0, [r7, #12]
    c218:	4b0e      	ldr	r3, [pc, #56]	; (c254 <_tc_timer_set_irq+0x4c>)
    c21a:	4798      	blx	r3
    c21c:	4603      	mov	r3, r0
    c21e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    c220:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    c224:	490c      	ldr	r1, [pc, #48]	; (c258 <_tc_timer_set_irq+0x50>)
    c226:	2001      	movs	r0, #1
    c228:	4b0c      	ldr	r3, [pc, #48]	; (c25c <_tc_timer_set_irq+0x54>)
    c22a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    c22c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    c230:	490b      	ldr	r1, [pc, #44]	; (c260 <_tc_timer_set_irq+0x58>)
    c232:	4613      	mov	r3, r2
    c234:	009b      	lsls	r3, r3, #2
    c236:	4413      	add	r3, r2
    c238:	009b      	lsls	r3, r3, #2
    c23a:	440b      	add	r3, r1
    c23c:	3302      	adds	r3, #2
    c23e:	f9b3 3000 	ldrsh.w	r3, [r3]
    c242:	b2db      	uxtb	r3, r3
    c244:	4618      	mov	r0, r3
    c246:	4b07      	ldr	r3, [pc, #28]	; (c264 <_tc_timer_set_irq+0x5c>)
    c248:	4798      	blx	r3
}
    c24a:	bf00      	nop
    c24c:	3710      	adds	r7, #16
    c24e:	46bd      	mov	sp, r7
    c250:	bd80      	pop	{r7, pc}
    c252:	bf00      	nop
    c254:	0000c3b5 	.word	0x0000c3b5
    c258:	00012bdc 	.word	0x00012bdc
    c25c:	00007261 	.word	0x00007261
    c260:	20000508 	.word	0x20000508
    c264:	000080f9 	.word	0x000080f9

0000c268 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    c268:	b580      	push	{r7, lr}
    c26a:	b084      	sub	sp, #16
    c26c:	af00      	add	r7, sp, #0
    c26e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c270:	687b      	ldr	r3, [r7, #4]
    c272:	68db      	ldr	r3, [r3, #12]
    c274:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    c276:	68f8      	ldr	r0, [r7, #12]
    c278:	4b07      	ldr	r3, [pc, #28]	; (c298 <tc_interrupt_handler+0x30>)
    c27a:	4798      	blx	r3
    c27c:	4603      	mov	r3, r0
    c27e:	2b00      	cmp	r3, #0
    c280:	d006      	beq.n	c290 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    c282:	68f8      	ldr	r0, [r7, #12]
    c284:	4b05      	ldr	r3, [pc, #20]	; (c29c <tc_interrupt_handler+0x34>)
    c286:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    c288:	687b      	ldr	r3, [r7, #4]
    c28a:	681b      	ldr	r3, [r3, #0]
    c28c:	6878      	ldr	r0, [r7, #4]
    c28e:	4798      	blx	r3
	}
}
    c290:	bf00      	nop
    c292:	3710      	adds	r7, #16
    c294:	46bd      	mov	sp, r7
    c296:	bd80      	pop	{r7, pc}
    c298:	0000b801 	.word	0x0000b801
    c29c:	0000b829 	.word	0x0000b829

0000c2a0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    c2a0:	b580      	push	{r7, lr}
    c2a2:	b084      	sub	sp, #16
    c2a4:	af00      	add	r7, sp, #0
    c2a6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c2a8:	687b      	ldr	r3, [r7, #4]
    c2aa:	691b      	ldr	r3, [r3, #16]
    c2ac:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    c2ae:	68f8      	ldr	r0, [r7, #12]
    c2b0:	4b12      	ldr	r3, [pc, #72]	; (c2fc <tc_pwm_interrupt_handler+0x5c>)
    c2b2:	4798      	blx	r3
    c2b4:	4603      	mov	r3, r0
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d00a      	beq.n	c2d0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    c2ba:	68f8      	ldr	r0, [r7, #12]
    c2bc:	4b10      	ldr	r3, [pc, #64]	; (c300 <tc_pwm_interrupt_handler+0x60>)
    c2be:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	681b      	ldr	r3, [r3, #0]
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d003      	beq.n	c2d0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	681b      	ldr	r3, [r3, #0]
    c2cc:	6878      	ldr	r0, [r7, #4]
    c2ce:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    c2d0:	68f8      	ldr	r0, [r7, #12]
    c2d2:	4b0c      	ldr	r3, [pc, #48]	; (c304 <tc_pwm_interrupt_handler+0x64>)
    c2d4:	4798      	blx	r3
    c2d6:	4603      	mov	r3, r0
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d00a      	beq.n	c2f2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    c2dc:	68f8      	ldr	r0, [r7, #12]
    c2de:	4b0a      	ldr	r3, [pc, #40]	; (c308 <tc_pwm_interrupt_handler+0x68>)
    c2e0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    c2e2:	687b      	ldr	r3, [r7, #4]
    c2e4:	685b      	ldr	r3, [r3, #4]
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d003      	beq.n	c2f2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	685b      	ldr	r3, [r3, #4]
    c2ee:	6878      	ldr	r0, [r7, #4]
    c2f0:	4798      	blx	r3
		}
	}
}
    c2f2:	bf00      	nop
    c2f4:	3710      	adds	r7, #16
    c2f6:	46bd      	mov	sp, r7
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	bf00      	nop
    c2fc:	0000b801 	.word	0x0000b801
    c300:	0000b829 	.word	0x0000b829
    c304:	0000b877 	.word	0x0000b877
    c308:	0000b843 	.word	0x0000b843

0000c30c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    c310:	4b03      	ldr	r3, [pc, #12]	; (c320 <TC0_Handler+0x14>)
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	4618      	mov	r0, r3
    c316:	4b03      	ldr	r3, [pc, #12]	; (c324 <TC0_Handler+0x18>)
    c318:	4798      	blx	r3
}
    c31a:	bf00      	nop
    c31c:	bd80      	pop	{r7, pc}
    c31e:	bf00      	nop
    c320:	20001bbc 	.word	0x20001bbc
    c324:	0000c269 	.word	0x0000c269

0000c328 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    c328:	b580      	push	{r7, lr}
    c32a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    c32c:	4b03      	ldr	r3, [pc, #12]	; (c33c <TC2_Handler+0x14>)
    c32e:	681b      	ldr	r3, [r3, #0]
    c330:	4618      	mov	r0, r3
    c332:	4b03      	ldr	r3, [pc, #12]	; (c340 <TC2_Handler+0x18>)
    c334:	4798      	blx	r3
}
    c336:	bf00      	nop
    c338:	bd80      	pop	{r7, pc}
    c33a:	bf00      	nop
    c33c:	20001bc0 	.word	0x20001bc0
    c340:	0000c269 	.word	0x0000c269

0000c344 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    c344:	b580      	push	{r7, lr}
    c346:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    c348:	4b03      	ldr	r3, [pc, #12]	; (c358 <TC4_Handler+0x14>)
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	4618      	mov	r0, r3
    c34e:	4b03      	ldr	r3, [pc, #12]	; (c35c <TC4_Handler+0x18>)
    c350:	4798      	blx	r3
}
    c352:	bf00      	nop
    c354:	bd80      	pop	{r7, pc}
    c356:	bf00      	nop
    c358:	20001bc4 	.word	0x20001bc4
    c35c:	0000c269 	.word	0x0000c269

0000c360 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    c360:	b580      	push	{r7, lr}
    c362:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    c364:	4b03      	ldr	r3, [pc, #12]	; (c374 <TC5_Handler+0x14>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4618      	mov	r0, r3
    c36a:	4b03      	ldr	r3, [pc, #12]	; (c378 <TC5_Handler+0x18>)
    c36c:	4798      	blx	r3
}
    c36e:	bf00      	nop
    c370:	bd80      	pop	{r7, pc}
    c372:	bf00      	nop
    c374:	20001bc8 	.word	0x20001bc8
    c378:	0000c269 	.word	0x0000c269

0000c37c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    c380:	4b03      	ldr	r3, [pc, #12]	; (c390 <TC6_Handler+0x14>)
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	4618      	mov	r0, r3
    c386:	4b03      	ldr	r3, [pc, #12]	; (c394 <TC6_Handler+0x18>)
    c388:	4798      	blx	r3
}
    c38a:	bf00      	nop
    c38c:	bd80      	pop	{r7, pc}
    c38e:	bf00      	nop
    c390:	20001bcc 	.word	0x20001bcc
    c394:	0000c269 	.word	0x0000c269

0000c398 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    c398:	b580      	push	{r7, lr}
    c39a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    c39c:	4b03      	ldr	r3, [pc, #12]	; (c3ac <TC7_Handler+0x14>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	4618      	mov	r0, r3
    c3a2:	4b03      	ldr	r3, [pc, #12]	; (c3b0 <TC7_Handler+0x18>)
    c3a4:	4798      	blx	r3
}
    c3a6:	bf00      	nop
    c3a8:	bd80      	pop	{r7, pc}
    c3aa:	bf00      	nop
    c3ac:	20001bd0 	.word	0x20001bd0
    c3b0:	0000c2a1 	.word	0x0000c2a1

0000c3b4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    c3b4:	b580      	push	{r7, lr}
    c3b6:	b084      	sub	sp, #16
    c3b8:	af00      	add	r7, sp, #0
    c3ba:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    c3bc:	6878      	ldr	r0, [r7, #4]
    c3be:	4b13      	ldr	r3, [pc, #76]	; (c40c <get_tc_index+0x58>)
    c3c0:	4798      	blx	r3
    c3c2:	4603      	mov	r3, r0
    c3c4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    c3c6:	2300      	movs	r3, #0
    c3c8:	73fb      	strb	r3, [r7, #15]
    c3ca:	e010      	b.n	c3ee <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    c3cc:	7bfa      	ldrb	r2, [r7, #15]
    c3ce:	4910      	ldr	r1, [pc, #64]	; (c410 <get_tc_index+0x5c>)
    c3d0:	4613      	mov	r3, r2
    c3d2:	009b      	lsls	r3, r3, #2
    c3d4:	4413      	add	r3, r2
    c3d6:	009b      	lsls	r3, r3, #2
    c3d8:	440b      	add	r3, r1
    c3da:	781b      	ldrb	r3, [r3, #0]
    c3dc:	7bba      	ldrb	r2, [r7, #14]
    c3de:	429a      	cmp	r2, r3
    c3e0:	d102      	bne.n	c3e8 <get_tc_index+0x34>
			return i;
    c3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    c3e6:	e00d      	b.n	c404 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    c3e8:	7bfb      	ldrb	r3, [r7, #15]
    c3ea:	3301      	adds	r3, #1
    c3ec:	73fb      	strb	r3, [r7, #15]
    c3ee:	7bfb      	ldrb	r3, [r7, #15]
    c3f0:	2b05      	cmp	r3, #5
    c3f2:	d9eb      	bls.n	c3cc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    c3f4:	f240 221d 	movw	r2, #541	; 0x21d
    c3f8:	4906      	ldr	r1, [pc, #24]	; (c414 <get_tc_index+0x60>)
    c3fa:	2000      	movs	r0, #0
    c3fc:	4b06      	ldr	r3, [pc, #24]	; (c418 <get_tc_index+0x64>)
    c3fe:	4798      	blx	r3
	return -1;
    c400:	f04f 33ff 	mov.w	r3, #4294967295
}
    c404:	4618      	mov	r0, r3
    c406:	3710      	adds	r7, #16
    c408:	46bd      	mov	sp, r7
    c40a:	bd80      	pop	{r7, pc}
    c40c:	0000c4b9 	.word	0x0000c4b9
    c410:	20000508 	.word	0x20000508
    c414:	00012bdc 	.word	0x00012bdc
    c418:	00007261 	.word	0x00007261

0000c41c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    c41c:	b480      	push	{r7}
    c41e:	b083      	sub	sp, #12
    c420:	af00      	add	r7, sp, #0
    c422:	6078      	str	r0, [r7, #4]
    c424:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    c426:	687b      	ldr	r3, [r7, #4]
    c428:	4a17      	ldr	r2, [pc, #92]	; (c488 <_tc_init_irq_param+0x6c>)
    c42a:	4293      	cmp	r3, r2
    c42c:	d102      	bne.n	c434 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    c42e:	4a17      	ldr	r2, [pc, #92]	; (c48c <_tc_init_irq_param+0x70>)
    c430:	683b      	ldr	r3, [r7, #0]
    c432:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    c434:	687b      	ldr	r3, [r7, #4]
    c436:	4a16      	ldr	r2, [pc, #88]	; (c490 <_tc_init_irq_param+0x74>)
    c438:	4293      	cmp	r3, r2
    c43a:	d102      	bne.n	c442 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    c43c:	4a15      	ldr	r2, [pc, #84]	; (c494 <_tc_init_irq_param+0x78>)
    c43e:	683b      	ldr	r3, [r7, #0]
    c440:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    c442:	687b      	ldr	r3, [r7, #4]
    c444:	4a14      	ldr	r2, [pc, #80]	; (c498 <_tc_init_irq_param+0x7c>)
    c446:	4293      	cmp	r3, r2
    c448:	d102      	bne.n	c450 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    c44a:	4a14      	ldr	r2, [pc, #80]	; (c49c <_tc_init_irq_param+0x80>)
    c44c:	683b      	ldr	r3, [r7, #0]
    c44e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	4a13      	ldr	r2, [pc, #76]	; (c4a0 <_tc_init_irq_param+0x84>)
    c454:	4293      	cmp	r3, r2
    c456:	d102      	bne.n	c45e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    c458:	4a12      	ldr	r2, [pc, #72]	; (c4a4 <_tc_init_irq_param+0x88>)
    c45a:	683b      	ldr	r3, [r7, #0]
    c45c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    c45e:	687b      	ldr	r3, [r7, #4]
    c460:	4a11      	ldr	r2, [pc, #68]	; (c4a8 <_tc_init_irq_param+0x8c>)
    c462:	4293      	cmp	r3, r2
    c464:	d102      	bne.n	c46c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    c466:	4a11      	ldr	r2, [pc, #68]	; (c4ac <_tc_init_irq_param+0x90>)
    c468:	683b      	ldr	r3, [r7, #0]
    c46a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	4a10      	ldr	r2, [pc, #64]	; (c4b0 <_tc_init_irq_param+0x94>)
    c470:	4293      	cmp	r3, r2
    c472:	d102      	bne.n	c47a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    c474:	4a0f      	ldr	r2, [pc, #60]	; (c4b4 <_tc_init_irq_param+0x98>)
    c476:	683b      	ldr	r3, [r7, #0]
    c478:	6013      	str	r3, [r2, #0]
	}
}
    c47a:	bf00      	nop
    c47c:	370c      	adds	r7, #12
    c47e:	46bd      	mov	sp, r7
    c480:	f85d 7b04 	ldr.w	r7, [sp], #4
    c484:	4770      	bx	lr
    c486:	bf00      	nop
    c488:	40003800 	.word	0x40003800
    c48c:	20001bbc 	.word	0x20001bbc
    c490:	4101a000 	.word	0x4101a000
    c494:	20001bc0 	.word	0x20001bc0
    c498:	42001400 	.word	0x42001400
    c49c:	20001bc4 	.word	0x20001bc4
    c4a0:	42001800 	.word	0x42001800
    c4a4:	20001bc8 	.word	0x20001bc8
    c4a8:	43001400 	.word	0x43001400
    c4ac:	20001bcc 	.word	0x20001bcc
    c4b0:	43001800 	.word	0x43001800
    c4b4:	20001bd0 	.word	0x20001bd0

0000c4b8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    c4b8:	b4b0      	push	{r4, r5, r7}
    c4ba:	b08d      	sub	sp, #52	; 0x34
    c4bc:	af00      	add	r7, sp, #0
    c4be:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c4c0:	4b13      	ldr	r3, [pc, #76]	; (c510 <_get_hardware_offset+0x58>)
    c4c2:	f107 040c 	add.w	r4, r7, #12
    c4c6:	461d      	mov	r5, r3
    c4c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c4ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c4cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c4d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c4d4:	2300      	movs	r3, #0
    c4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4d8:	e010      	b.n	c4fc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4dc:	009b      	lsls	r3, r3, #2
    c4de:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c4e2:	4413      	add	r3, r2
    c4e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    c4e8:	461a      	mov	r2, r3
    c4ea:	687b      	ldr	r3, [r7, #4]
    c4ec:	429a      	cmp	r2, r3
    c4ee:	d102      	bne.n	c4f6 <_get_hardware_offset+0x3e>
			return i;
    c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4f2:	b2db      	uxtb	r3, r3
    c4f4:	e006      	b.n	c504 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4f8:	3301      	adds	r3, #1
    c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4fe:	2b07      	cmp	r3, #7
    c500:	d9eb      	bls.n	c4da <_get_hardware_offset+0x22>
		}
	}
	return 0;
    c502:	2300      	movs	r3, #0
}
    c504:	4618      	mov	r0, r3
    c506:	3734      	adds	r7, #52	; 0x34
    c508:	46bd      	mov	sp, r7
    c50a:	bcb0      	pop	{r4, r5, r7}
    c50c:	4770      	bx	lr
    c50e:	bf00      	nop
    c510:	00012bf0 	.word	0x00012bf0

0000c514 <__NVIC_EnableIRQ>:
{
    c514:	b480      	push	{r7}
    c516:	b083      	sub	sp, #12
    c518:	af00      	add	r7, sp, #0
    c51a:	4603      	mov	r3, r0
    c51c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c51e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c522:	2b00      	cmp	r3, #0
    c524:	db0b      	blt.n	c53e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c526:	4909      	ldr	r1, [pc, #36]	; (c54c <__NVIC_EnableIRQ+0x38>)
    c528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c52c:	095b      	lsrs	r3, r3, #5
    c52e:	88fa      	ldrh	r2, [r7, #6]
    c530:	f002 021f 	and.w	r2, r2, #31
    c534:	2001      	movs	r0, #1
    c536:	fa00 f202 	lsl.w	r2, r0, r2
    c53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c53e:	bf00      	nop
    c540:	370c      	adds	r7, #12
    c542:	46bd      	mov	sp, r7
    c544:	f85d 7b04 	ldr.w	r7, [sp], #4
    c548:	4770      	bx	lr
    c54a:	bf00      	nop
    c54c:	e000e100 	.word	0xe000e100

0000c550 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    c550:	b480      	push	{r7}
    c552:	b087      	sub	sp, #28
    c554:	af00      	add	r7, sp, #0
    c556:	60f8      	str	r0, [r7, #12]
    c558:	460b      	mov	r3, r1
    c55a:	607a      	str	r2, [r7, #4]
    c55c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    c55e:	7afa      	ldrb	r2, [r7, #11]
    c560:	68f9      	ldr	r1, [r7, #12]
    c562:	4613      	mov	r3, r2
    c564:	009b      	lsls	r3, r3, #2
    c566:	4413      	add	r3, r2
    c568:	009b      	lsls	r3, r3, #2
    c56a:	440b      	add	r3, r1
    c56c:	3340      	adds	r3, #64	; 0x40
    c56e:	681b      	ldr	r3, [r3, #0]
    c570:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    c572:	697a      	ldr	r2, [r7, #20]
    c574:	687b      	ldr	r3, [r7, #4]
    c576:	4013      	ands	r3, r2
    c578:	617b      	str	r3, [r7, #20]
	return tmp;
    c57a:	697b      	ldr	r3, [r7, #20]
}
    c57c:	4618      	mov	r0, r3
    c57e:	371c      	adds	r7, #28
    c580:	46bd      	mov	sp, r7
    c582:	f85d 7b04 	ldr.w	r7, [sp], #4
    c586:	4770      	bx	lr

0000c588 <hri_oscctrl_get_STATUS_reg>:
{
    c588:	b480      	push	{r7}
    c58a:	b085      	sub	sp, #20
    c58c:	af00      	add	r7, sp, #0
    c58e:	6078      	str	r0, [r7, #4]
    c590:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	691b      	ldr	r3, [r3, #16]
    c596:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c598:	68fa      	ldr	r2, [r7, #12]
    c59a:	683b      	ldr	r3, [r7, #0]
    c59c:	4013      	ands	r3, r2
    c59e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c5a0:	68fb      	ldr	r3, [r7, #12]
}
    c5a2:	4618      	mov	r0, r3
    c5a4:	3714      	adds	r7, #20
    c5a6:	46bd      	mov	sp, r7
    c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ac:	4770      	bx	lr

0000c5ae <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    c5ae:	b480      	push	{r7}
    c5b0:	b085      	sub	sp, #20
    c5b2:	af00      	add	r7, sp, #0
    c5b4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c5b6:	687b      	ldr	r3, [r7, #4]
    c5b8:	f893 3020 	ldrb.w	r3, [r3, #32]
    c5bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    c5be:	7bfb      	ldrb	r3, [r7, #15]
    c5c0:	f003 0301 	and.w	r3, r3, #1
    c5c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c5c6:	7bfb      	ldrb	r3, [r7, #15]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	bf14      	ite	ne
    c5cc:	2301      	movne	r3, #1
    c5ce:	2300      	moveq	r3, #0
    c5d0:	b2db      	uxtb	r3, r3
}
    c5d2:	4618      	mov	r0, r3
    c5d4:	3714      	adds	r7, #20
    c5d6:	46bd      	mov	sp, r7
    c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5dc:	4770      	bx	lr

0000c5de <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c5de:	b480      	push	{r7}
    c5e0:	b083      	sub	sp, #12
    c5e2:	af00      	add	r7, sp, #0
    c5e4:	6078      	str	r0, [r7, #4]
    c5e6:	460b      	mov	r3, r1
    c5e8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c5ea:	bf00      	nop
    c5ec:	687b      	ldr	r3, [r7, #4]
    c5ee:	789b      	ldrb	r3, [r3, #2]
    c5f0:	b2da      	uxtb	r2, r3
    c5f2:	78fb      	ldrb	r3, [r7, #3]
    c5f4:	4013      	ands	r3, r2
    c5f6:	b2db      	uxtb	r3, r3
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d1f7      	bne.n	c5ec <hri_usb_wait_for_sync+0xe>
	};
}
    c5fc:	bf00      	nop
    c5fe:	370c      	adds	r7, #12
    c600:	46bd      	mov	sp, r7
    c602:	f85d 7b04 	ldr.w	r7, [sp], #4
    c606:	4770      	bx	lr

0000c608 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c608:	b480      	push	{r7}
    c60a:	b083      	sub	sp, #12
    c60c:	af00      	add	r7, sp, #0
    c60e:	6078      	str	r0, [r7, #4]
    c610:	460b      	mov	r3, r1
    c612:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	789b      	ldrb	r3, [r3, #2]
    c618:	b2da      	uxtb	r2, r3
    c61a:	78fb      	ldrb	r3, [r7, #3]
    c61c:	4013      	ands	r3, r2
    c61e:	b2db      	uxtb	r3, r3
    c620:	2b00      	cmp	r3, #0
    c622:	bf14      	ite	ne
    c624:	2301      	movne	r3, #1
    c626:	2300      	moveq	r3, #0
    c628:	b2db      	uxtb	r3, r3
}
    c62a:	4618      	mov	r0, r3
    c62c:	370c      	adds	r7, #12
    c62e:	46bd      	mov	sp, r7
    c630:	f85d 7b04 	ldr.w	r7, [sp], #4
    c634:	4770      	bx	lr

0000c636 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    c636:	b480      	push	{r7}
    c638:	b085      	sub	sp, #20
    c63a:	af00      	add	r7, sp, #0
    c63c:	6078      	str	r0, [r7, #4]
    c63e:	460b      	mov	r3, r1
    c640:	70fb      	strb	r3, [r7, #3]
    c642:	4613      	mov	r3, r2
    c644:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c646:	78fb      	ldrb	r3, [r7, #3]
    c648:	687a      	ldr	r2, [r7, #4]
    c64a:	3308      	adds	r3, #8
    c64c:	015b      	lsls	r3, r3, #5
    c64e:	4413      	add	r3, r2
    c650:	3307      	adds	r3, #7
    c652:	781b      	ldrb	r3, [r3, #0]
    c654:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c656:	7bfa      	ldrb	r2, [r7, #15]
    c658:	78bb      	ldrb	r3, [r7, #2]
    c65a:	4013      	ands	r3, r2
    c65c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c65e:	7bfb      	ldrb	r3, [r7, #15]
}
    c660:	4618      	mov	r0, r3
    c662:	3714      	adds	r7, #20
    c664:	46bd      	mov	sp, r7
    c666:	f85d 7b04 	ldr.w	r7, [sp], #4
    c66a:	4770      	bx	lr

0000c66c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    c66c:	b480      	push	{r7}
    c66e:	b083      	sub	sp, #12
    c670:	af00      	add	r7, sp, #0
    c672:	6078      	str	r0, [r7, #4]
    c674:	460b      	mov	r3, r1
    c676:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c678:	78fb      	ldrb	r3, [r7, #3]
    c67a:	687a      	ldr	r2, [r7, #4]
    c67c:	3308      	adds	r3, #8
    c67e:	015b      	lsls	r3, r3, #5
    c680:	4413      	add	r3, r2
    c682:	3307      	adds	r3, #7
    c684:	781b      	ldrb	r3, [r3, #0]
    c686:	b2db      	uxtb	r3, r3
}
    c688:	4618      	mov	r0, r3
    c68a:	370c      	adds	r7, #12
    c68c:	46bd      	mov	sp, r7
    c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c692:	4770      	bx	lr

0000c694 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    c694:	b480      	push	{r7}
    c696:	b083      	sub	sp, #12
    c698:	af00      	add	r7, sp, #0
    c69a:	6078      	str	r0, [r7, #4]
    c69c:	460b      	mov	r3, r1
    c69e:	70fb      	strb	r3, [r7, #3]
    c6a0:	4613      	mov	r3, r2
    c6a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c6a4:	78fb      	ldrb	r3, [r7, #3]
    c6a6:	687a      	ldr	r2, [r7, #4]
    c6a8:	3308      	adds	r3, #8
    c6aa:	015b      	lsls	r3, r3, #5
    c6ac:	4413      	add	r3, r2
    c6ae:	3307      	adds	r3, #7
    c6b0:	78ba      	ldrb	r2, [r7, #2]
    c6b2:	701a      	strb	r2, [r3, #0]
}
    c6b4:	bf00      	nop
    c6b6:	370c      	adds	r7, #12
    c6b8:	46bd      	mov	sp, r7
    c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6be:	4770      	bx	lr

0000c6c0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    c6c0:	b480      	push	{r7}
    c6c2:	b083      	sub	sp, #12
    c6c4:	af00      	add	r7, sp, #0
    c6c6:	6078      	str	r0, [r7, #4]
    c6c8:	460b      	mov	r3, r1
    c6ca:	70fb      	strb	r3, [r7, #3]
    c6cc:	4613      	mov	r3, r2
    c6ce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c6d0:	78fb      	ldrb	r3, [r7, #3]
    c6d2:	687a      	ldr	r2, [r7, #4]
    c6d4:	3308      	adds	r3, #8
    c6d6:	015b      	lsls	r3, r3, #5
    c6d8:	4413      	add	r3, r2
    c6da:	3305      	adds	r3, #5
    c6dc:	78ba      	ldrb	r2, [r7, #2]
    c6de:	701a      	strb	r2, [r3, #0]
}
    c6e0:	bf00      	nop
    c6e2:	370c      	adds	r7, #12
    c6e4:	46bd      	mov	sp, r7
    c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6ea:	4770      	bx	lr

0000c6ec <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    c6ec:	b480      	push	{r7}
    c6ee:	b083      	sub	sp, #12
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	6078      	str	r0, [r7, #4]
    c6f4:	460b      	mov	r3, r1
    c6f6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    c6f8:	78fb      	ldrb	r3, [r7, #3]
    c6fa:	687a      	ldr	r2, [r7, #4]
    c6fc:	3308      	adds	r3, #8
    c6fe:	015b      	lsls	r3, r3, #5
    c700:	4413      	add	r3, r2
    c702:	3306      	adds	r3, #6
    c704:	781b      	ldrb	r3, [r3, #0]
    c706:	b2db      	uxtb	r3, r3
}
    c708:	4618      	mov	r0, r3
    c70a:	370c      	adds	r7, #12
    c70c:	46bd      	mov	sp, r7
    c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c712:	4770      	bx	lr

0000c714 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    c714:	b480      	push	{r7}
    c716:	b083      	sub	sp, #12
    c718:	af00      	add	r7, sp, #0
    c71a:	6078      	str	r0, [r7, #4]
    c71c:	460b      	mov	r3, r1
    c71e:	70fb      	strb	r3, [r7, #3]
    c720:	4613      	mov	r3, r2
    c722:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c724:	78fb      	ldrb	r3, [r7, #3]
    c726:	687a      	ldr	r2, [r7, #4]
    c728:	3308      	adds	r3, #8
    c72a:	015b      	lsls	r3, r3, #5
    c72c:	4413      	add	r3, r2
    c72e:	3304      	adds	r3, #4
    c730:	78ba      	ldrb	r2, [r7, #2]
    c732:	701a      	strb	r2, [r3, #0]
}
    c734:	bf00      	nop
    c736:	370c      	adds	r7, #12
    c738:	46bd      	mov	sp, r7
    c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c73e:	4770      	bx	lr

0000c740 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    c740:	b480      	push	{r7}
    c742:	b083      	sub	sp, #12
    c744:	af00      	add	r7, sp, #0
    c746:	6078      	str	r0, [r7, #4]
    c748:	460b      	mov	r3, r1
    c74a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c74c:	78fb      	ldrb	r3, [r7, #3]
    c74e:	687a      	ldr	r2, [r7, #4]
    c750:	015b      	lsls	r3, r3, #5
    c752:	4413      	add	r3, r2
    c754:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c758:	2210      	movs	r2, #16
    c75a:	701a      	strb	r2, [r3, #0]
}
    c75c:	bf00      	nop
    c75e:	370c      	adds	r7, #12
    c760:	46bd      	mov	sp, r7
    c762:	f85d 7b04 	ldr.w	r7, [sp], #4
    c766:	4770      	bx	lr

0000c768 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    c768:	b480      	push	{r7}
    c76a:	b083      	sub	sp, #12
    c76c:	af00      	add	r7, sp, #0
    c76e:	6078      	str	r0, [r7, #4]
    c770:	460b      	mov	r3, r1
    c772:	70fb      	strb	r3, [r7, #3]
    c774:	4613      	mov	r3, r2
    c776:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c778:	78fb      	ldrb	r3, [r7, #3]
    c77a:	687a      	ldr	r2, [r7, #4]
    c77c:	015b      	lsls	r3, r3, #5
    c77e:	4413      	add	r3, r2
    c780:	f203 1309 	addw	r3, r3, #265	; 0x109
    c784:	78ba      	ldrb	r2, [r7, #2]
    c786:	701a      	strb	r2, [r3, #0]
}
    c788:	bf00      	nop
    c78a:	370c      	adds	r7, #12
    c78c:	46bd      	mov	sp, r7
    c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c792:	4770      	bx	lr

0000c794 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    c794:	b480      	push	{r7}
    c796:	b083      	sub	sp, #12
    c798:	af00      	add	r7, sp, #0
    c79a:	6078      	str	r0, [r7, #4]
    c79c:	460b      	mov	r3, r1
    c79e:	70fb      	strb	r3, [r7, #3]
    c7a0:	4613      	mov	r3, r2
    c7a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c7a4:	78fb      	ldrb	r3, [r7, #3]
    c7a6:	687a      	ldr	r2, [r7, #4]
    c7a8:	015b      	lsls	r3, r3, #5
    c7aa:	4413      	add	r3, r2
    c7ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c7b0:	78ba      	ldrb	r2, [r7, #2]
    c7b2:	701a      	strb	r2, [r3, #0]
}
    c7b4:	bf00      	nop
    c7b6:	370c      	adds	r7, #12
    c7b8:	46bd      	mov	sp, r7
    c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7be:	4770      	bx	lr

0000c7c0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c7c0:	b480      	push	{r7}
    c7c2:	b085      	sub	sp, #20
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	6078      	str	r0, [r7, #4]
    c7c8:	460b      	mov	r3, r1
    c7ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c7cc:	78fb      	ldrb	r3, [r7, #3]
    c7ce:	687a      	ldr	r2, [r7, #4]
    c7d0:	3308      	adds	r3, #8
    c7d2:	015b      	lsls	r3, r3, #5
    c7d4:	4413      	add	r3, r2
    c7d6:	781b      	ldrb	r3, [r3, #0]
    c7d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c7da:	7bfb      	ldrb	r3, [r7, #15]
    c7dc:	f003 0307 	and.w	r3, r3, #7
    c7e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c7e2:	7bfb      	ldrb	r3, [r7, #15]
}
    c7e4:	4618      	mov	r0, r3
    c7e6:	3714      	adds	r7, #20
    c7e8:	46bd      	mov	sp, r7
    c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ee:	4770      	bx	lr

0000c7f0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c7f0:	b480      	push	{r7}
    c7f2:	b085      	sub	sp, #20
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
    c7f8:	460b      	mov	r3, r1
    c7fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c7fc:	78fb      	ldrb	r3, [r7, #3]
    c7fe:	687a      	ldr	r2, [r7, #4]
    c800:	3308      	adds	r3, #8
    c802:	015b      	lsls	r3, r3, #5
    c804:	4413      	add	r3, r2
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c80a:	7bfb      	ldrb	r3, [r7, #15]
    c80c:	091b      	lsrs	r3, r3, #4
    c80e:	b2db      	uxtb	r3, r3
    c810:	f003 0307 	and.w	r3, r3, #7
    c814:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c816:	7bfb      	ldrb	r3, [r7, #15]
}
    c818:	4618      	mov	r0, r3
    c81a:	3714      	adds	r7, #20
    c81c:	46bd      	mov	sp, r7
    c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c822:	4770      	bx	lr

0000c824 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    c824:	b480      	push	{r7}
    c826:	b083      	sub	sp, #12
    c828:	af00      	add	r7, sp, #0
    c82a:	6078      	str	r0, [r7, #4]
    c82c:	460b      	mov	r3, r1
    c82e:	70fb      	strb	r3, [r7, #3]
    c830:	4613      	mov	r3, r2
    c832:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c834:	78fb      	ldrb	r3, [r7, #3]
    c836:	687a      	ldr	r2, [r7, #4]
    c838:	3308      	adds	r3, #8
    c83a:	015b      	lsls	r3, r3, #5
    c83c:	4413      	add	r3, r2
    c83e:	78ba      	ldrb	r2, [r7, #2]
    c840:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    c842:	bf00      	nop
    c844:	370c      	adds	r7, #12
    c846:	46bd      	mov	sp, r7
    c848:	f85d 7b04 	ldr.w	r7, [sp], #4
    c84c:	4770      	bx	lr

0000c84e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    c84e:	b480      	push	{r7}
    c850:	b083      	sub	sp, #12
    c852:	af00      	add	r7, sp, #0
    c854:	6078      	str	r0, [r7, #4]
    c856:	460b      	mov	r3, r1
    c858:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c85a:	78fb      	ldrb	r3, [r7, #3]
    c85c:	687a      	ldr	r2, [r7, #4]
    c85e:	3308      	adds	r3, #8
    c860:	015b      	lsls	r3, r3, #5
    c862:	4413      	add	r3, r2
    c864:	781b      	ldrb	r3, [r3, #0]
    c866:	b2db      	uxtb	r3, r3
}
    c868:	4618      	mov	r0, r3
    c86a:	370c      	adds	r7, #12
    c86c:	46bd      	mov	sp, r7
    c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c872:	4770      	bx	lr

0000c874 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    c874:	b480      	push	{r7}
    c876:	b083      	sub	sp, #12
    c878:	af00      	add	r7, sp, #0
    c87a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c87c:	687b      	ldr	r3, [r7, #4]
    c87e:	8b9b      	ldrh	r3, [r3, #28]
    c880:	b29b      	uxth	r3, r3
}
    c882:	4618      	mov	r0, r3
    c884:	370c      	adds	r7, #12
    c886:	46bd      	mov	sp, r7
    c888:	f85d 7b04 	ldr.w	r7, [sp], #4
    c88c:	4770      	bx	lr

0000c88e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    c88e:	b480      	push	{r7}
    c890:	b083      	sub	sp, #12
    c892:	af00      	add	r7, sp, #0
    c894:	6078      	str	r0, [r7, #4]
    c896:	460b      	mov	r3, r1
    c898:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	887a      	ldrh	r2, [r7, #2]
    c89e:	839a      	strh	r2, [r3, #28]
}
    c8a0:	bf00      	nop
    c8a2:	370c      	adds	r7, #12
    c8a4:	46bd      	mov	sp, r7
    c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8aa:	4770      	bx	lr

0000c8ac <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c8ac:	b480      	push	{r7}
    c8ae:	b083      	sub	sp, #12
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
    c8b4:	460b      	mov	r3, r1
    c8b6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	887a      	ldrh	r2, [r7, #2]
    c8bc:	831a      	strh	r2, [r3, #24]
}
    c8be:	bf00      	nop
    c8c0:	370c      	adds	r7, #12
    c8c2:	46bd      	mov	sp, r7
    c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8c8:	4770      	bx	lr

0000c8ca <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    c8ca:	b480      	push	{r7}
    c8cc:	b083      	sub	sp, #12
    c8ce:	af00      	add	r7, sp, #0
    c8d0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c8d2:	687b      	ldr	r3, [r7, #4]
    c8d4:	8b1b      	ldrh	r3, [r3, #24]
    c8d6:	b29b      	uxth	r3, r3
}
    c8d8:	4618      	mov	r0, r3
    c8da:	370c      	adds	r7, #12
    c8dc:	46bd      	mov	sp, r7
    c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e2:	4770      	bx	lr

0000c8e4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c8e4:	b480      	push	{r7}
    c8e6:	b083      	sub	sp, #12
    c8e8:	af00      	add	r7, sp, #0
    c8ea:	6078      	str	r0, [r7, #4]
    c8ec:	460b      	mov	r3, r1
    c8ee:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c8f0:	687b      	ldr	r3, [r7, #4]
    c8f2:	887a      	ldrh	r2, [r7, #2]
    c8f4:	829a      	strh	r2, [r3, #20]
}
    c8f6:	bf00      	nop
    c8f8:	370c      	adds	r7, #12
    c8fa:	46bd      	mov	sp, r7
    c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c900:	4770      	bx	lr

0000c902 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    c902:	b480      	push	{r7}
    c904:	b085      	sub	sp, #20
    c906:	af00      	add	r7, sp, #0
    c908:	6078      	str	r0, [r7, #4]
    c90a:	460b      	mov	r3, r1
    c90c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    c90e:	687b      	ldr	r3, [r7, #4]
    c910:	789b      	ldrb	r3, [r3, #2]
    c912:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c914:	7bfa      	ldrb	r2, [r7, #15]
    c916:	78fb      	ldrb	r3, [r7, #3]
    c918:	4013      	ands	r3, r2
    c91a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c91c:	7bfb      	ldrb	r3, [r7, #15]
}
    c91e:	4618      	mov	r0, r3
    c920:	3714      	adds	r7, #20
    c922:	46bd      	mov	sp, r7
    c924:	f85d 7b04 	ldr.w	r7, [sp], #4
    c928:	4770      	bx	lr
	...

0000c92c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c92c:	b580      	push	{r7, lr}
    c92e:	b082      	sub	sp, #8
    c930:	af00      	add	r7, sp, #0
    c932:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    c934:	687b      	ldr	r3, [r7, #4]
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	b2db      	uxtb	r3, r3
    c93a:	f023 0302 	bic.w	r3, r3, #2
    c93e:	b2da      	uxtb	r2, r3
    c940:	687b      	ldr	r3, [r7, #4]
    c942:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    c944:	2103      	movs	r1, #3
    c946:	6878      	ldr	r0, [r7, #4]
    c948:	4b02      	ldr	r3, [pc, #8]	; (c954 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    c94a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    c94c:	bf00      	nop
    c94e:	3708      	adds	r7, #8
    c950:	46bd      	mov	sp, r7
    c952:	bd80      	pop	{r7, pc}
    c954:	0000c5df 	.word	0x0000c5df

0000c958 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    c958:	b580      	push	{r7, lr}
    c95a:	b084      	sub	sp, #16
    c95c:	af00      	add	r7, sp, #0
    c95e:	6078      	str	r0, [r7, #4]
    c960:	460b      	mov	r3, r1
    c962:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c964:	2103      	movs	r1, #3
    c966:	6878      	ldr	r0, [r7, #4]
    c968:	4b06      	ldr	r3, [pc, #24]	; (c984 <hri_usb_get_CTRLA_reg+0x2c>)
    c96a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c972:	7bfa      	ldrb	r2, [r7, #15]
    c974:	78fb      	ldrb	r3, [r7, #3]
    c976:	4013      	ands	r3, r2
    c978:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c97a:	7bfb      	ldrb	r3, [r7, #15]
}
    c97c:	4618      	mov	r0, r3
    c97e:	3710      	adds	r7, #16
    c980:	46bd      	mov	sp, r7
    c982:	bd80      	pop	{r7, pc}
    c984:	0000c5df 	.word	0x0000c5df

0000c988 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    c988:	b580      	push	{r7, lr}
    c98a:	b082      	sub	sp, #8
    c98c:	af00      	add	r7, sp, #0
    c98e:	6078      	str	r0, [r7, #4]
    c990:	460b      	mov	r3, r1
    c992:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c994:	687b      	ldr	r3, [r7, #4]
    c996:	78fa      	ldrb	r2, [r7, #3]
    c998:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c99a:	2103      	movs	r1, #3
    c99c:	6878      	ldr	r0, [r7, #4]
    c99e:	4b03      	ldr	r3, [pc, #12]	; (c9ac <hri_usb_write_CTRLA_reg+0x24>)
    c9a0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    c9a2:	bf00      	nop
    c9a4:	3708      	adds	r7, #8
    c9a6:	46bd      	mov	sp, r7
    c9a8:	bd80      	pop	{r7, pc}
    c9aa:	bf00      	nop
    c9ac:	0000c5df 	.word	0x0000c5df

0000c9b0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    c9b0:	b580      	push	{r7, lr}
    c9b2:	b082      	sub	sp, #8
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    c9b8:	2103      	movs	r1, #3
    c9ba:	6878      	ldr	r0, [r7, #4]
    c9bc:	4b04      	ldr	r3, [pc, #16]	; (c9d0 <hri_usb_read_CTRLA_reg+0x20>)
    c9be:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    c9c0:	687b      	ldr	r3, [r7, #4]
    c9c2:	781b      	ldrb	r3, [r3, #0]
    c9c4:	b2db      	uxtb	r3, r3
}
    c9c6:	4618      	mov	r0, r3
    c9c8:	3708      	adds	r7, #8
    c9ca:	46bd      	mov	sp, r7
    c9cc:	bd80      	pop	{r7, pc}
    c9ce:	bf00      	nop
    c9d0:	0000c5df 	.word	0x0000c5df

0000c9d4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    c9d4:	b480      	push	{r7}
    c9d6:	b083      	sub	sp, #12
    c9d8:	af00      	add	r7, sp, #0
    c9da:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    c9dc:	687b      	ldr	r3, [r7, #4]
    c9de:	891b      	ldrh	r3, [r3, #8]
    c9e0:	b29b      	uxth	r3, r3
    c9e2:	f023 0301 	bic.w	r3, r3, #1
    c9e6:	b29a      	uxth	r2, r3
    c9e8:	687b      	ldr	r3, [r7, #4]
    c9ea:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    c9ec:	bf00      	nop
    c9ee:	370c      	adds	r7, #12
    c9f0:	46bd      	mov	sp, r7
    c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f6:	4770      	bx	lr

0000c9f8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    c9f8:	b480      	push	{r7}
    c9fa:	b083      	sub	sp, #12
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
    ca00:	460b      	mov	r3, r1
    ca02:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	887a      	ldrh	r2, [r7, #2]
    ca08:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    ca0a:	bf00      	nop
    ca0c:	370c      	adds	r7, #12
    ca0e:	46bd      	mov	sp, r7
    ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca14:	4770      	bx	lr

0000ca16 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    ca16:	b480      	push	{r7}
    ca18:	b083      	sub	sp, #12
    ca1a:	af00      	add	r7, sp, #0
    ca1c:	6078      	str	r0, [r7, #4]
    ca1e:	460b      	mov	r3, r1
    ca20:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	78fa      	ldrb	r2, [r7, #3]
    ca26:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    ca28:	bf00      	nop
    ca2a:	370c      	adds	r7, #12
    ca2c:	46bd      	mov	sp, r7
    ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca32:	4770      	bx	lr

0000ca34 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    ca34:	b480      	push	{r7}
    ca36:	b083      	sub	sp, #12
    ca38:	af00      	add	r7, sp, #0
    ca3a:	6078      	str	r0, [r7, #4]
    ca3c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    ca3e:	687b      	ldr	r3, [r7, #4]
    ca40:	683a      	ldr	r2, [r7, #0]
    ca42:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    ca44:	bf00      	nop
    ca46:	370c      	adds	r7, #12
    ca48:	46bd      	mov	sp, r7
    ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca4e:	4770      	bx	lr

0000ca50 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    ca50:	b480      	push	{r7}
    ca52:	b083      	sub	sp, #12
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
    ca58:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    ca5a:	2300      	movs	r3, #0
}
    ca5c:	4618      	mov	r0, r3
    ca5e:	370c      	adds	r7, #12
    ca60:	46bd      	mov	sp, r7
    ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca66:	4770      	bx	lr

0000ca68 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    ca68:	b480      	push	{r7}
    ca6a:	b085      	sub	sp, #20
    ca6c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    ca6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca72:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    ca74:	4b28      	ldr	r3, [pc, #160]	; (cb18 <_usb_load_calib+0xb0>)
    ca76:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    ca78:	f003 031f 	and.w	r3, r3, #31
    ca7c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    ca7e:	4b26      	ldr	r3, [pc, #152]	; (cb18 <_usb_load_calib+0xb0>)
    ca80:	681b      	ldr	r3, [r3, #0]
    ca82:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    ca84:	f003 031f 	and.w	r3, r3, #31
    ca88:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    ca8a:	4b23      	ldr	r3, [pc, #140]	; (cb18 <_usb_load_calib+0xb0>)
    ca8c:	681b      	ldr	r3, [r3, #0]
    ca8e:	0a9b      	lsrs	r3, r3, #10
    ca90:	f003 0307 	and.w	r3, r3, #7
    ca94:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    ca96:	68fb      	ldr	r3, [r7, #12]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d002      	beq.n	caa2 <_usb_load_calib+0x3a>
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	2b1f      	cmp	r3, #31
    caa0:	d101      	bne.n	caa6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    caa2:	2309      	movs	r3, #9
    caa4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    caa6:	68bb      	ldr	r3, [r7, #8]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d002      	beq.n	cab2 <_usb_load_calib+0x4a>
    caac:	68bb      	ldr	r3, [r7, #8]
    caae:	2b1f      	cmp	r3, #31
    cab0:	d101      	bne.n	cab6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    cab2:	2319      	movs	r3, #25
    cab4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	2b00      	cmp	r3, #0
    caba:	d002      	beq.n	cac2 <_usb_load_calib+0x5a>
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	2b07      	cmp	r3, #7
    cac0:	d101      	bne.n	cac6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    cac2:	2306      	movs	r3, #6
    cac4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    cac6:	68fb      	ldr	r3, [r7, #12]
    cac8:	b29b      	uxth	r3, r3
    caca:	019b      	lsls	r3, r3, #6
    cacc:	b29b      	uxth	r3, r3
    cace:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    cad2:	b29a      	uxth	r2, r3
    cad4:	68bb      	ldr	r3, [r7, #8]
    cad6:	b29b      	uxth	r3, r3
    cad8:	f003 031f 	and.w	r3, r3, #31
    cadc:	b29b      	uxth	r3, r3
    cade:	4313      	orrs	r3, r2
    cae0:	b29a      	uxth	r2, r3
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	b29b      	uxth	r3, r3
    cae6:	031b      	lsls	r3, r3, #12
    cae8:	b29b      	uxth	r3, r3
    caea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    caee:	b29b      	uxth	r3, r3
    caf0:	4313      	orrs	r3, r2
    caf2:	b29a      	uxth	r2, r3
    caf4:	683b      	ldr	r3, [r7, #0]
    caf6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    caf8:	683a      	ldr	r2, [r7, #0]
    cafa:	78d3      	ldrb	r3, [r2, #3]
    cafc:	f043 0303 	orr.w	r3, r3, #3
    cb00:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    cb02:	683a      	ldr	r2, [r7, #0]
    cb04:	78d3      	ldrb	r3, [r2, #3]
    cb06:	f043 030c 	orr.w	r3, r3, #12
    cb0a:	70d3      	strb	r3, [r2, #3]
}
    cb0c:	bf00      	nop
    cb0e:	3714      	adds	r7, #20
    cb10:	46bd      	mov	sp, r7
    cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb16:	4770      	bx	lr
    cb18:	00800084 	.word	0x00800084

0000cb1c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    cb1c:	b580      	push	{r7, lr}
    cb1e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    cb20:	bf00      	nop
    cb22:	2203      	movs	r2, #3
    cb24:	2100      	movs	r1, #0
    cb26:	4804      	ldr	r0, [pc, #16]	; (cb38 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    cb28:	4b04      	ldr	r3, [pc, #16]	; (cb3c <_usb_d_dev_wait_dpll_rdy+0x20>)
    cb2a:	4798      	blx	r3
    cb2c:	4603      	mov	r3, r0
    cb2e:	2b03      	cmp	r3, #3
    cb30:	d1f7      	bne.n	cb22 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    cb32:	bf00      	nop
    cb34:	bd80      	pop	{r7, pc}
    cb36:	bf00      	nop
    cb38:	40001000 	.word	0x40001000
    cb3c:	0000c551 	.word	0x0000c551

0000cb40 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    cb40:	b580      	push	{r7, lr}
    cb42:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    cb44:	480e      	ldr	r0, [pc, #56]	; (cb80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cb46:	4b0f      	ldr	r3, [pc, #60]	; (cb84 <_usb_d_dev_wait_dfll_rdy+0x44>)
    cb48:	4798      	blx	r3
    cb4a:	4603      	mov	r3, r0
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d00a      	beq.n	cb66 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    cb50:	bf00      	nop
    cb52:	f44f 6110 	mov.w	r1, #2304	; 0x900
    cb56:	480a      	ldr	r0, [pc, #40]	; (cb80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cb58:	4b0b      	ldr	r3, [pc, #44]	; (cb88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    cb5a:	4798      	blx	r3
    cb5c:	4603      	mov	r3, r0
    cb5e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    cb62:	d1f6      	bne.n	cb52 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    cb64:	e009      	b.n	cb7a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    cb66:	bf00      	nop
    cb68:	f44f 7180 	mov.w	r1, #256	; 0x100
    cb6c:	4804      	ldr	r0, [pc, #16]	; (cb80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cb6e:	4b06      	ldr	r3, [pc, #24]	; (cb88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    cb70:	4798      	blx	r3
    cb72:	4603      	mov	r3, r0
    cb74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    cb78:	d1f6      	bne.n	cb68 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    cb7a:	bf00      	nop
    cb7c:	bd80      	pop	{r7, pc}
    cb7e:	bf00      	nop
    cb80:	40001000 	.word	0x40001000
    cb84:	0000c5af 	.word	0x0000c5af
    cb88:	0000c589 	.word	0x0000c589

0000cb8c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    cb8c:	b580      	push	{r7, lr}
    cb8e:	b082      	sub	sp, #8
    cb90:	af00      	add	r7, sp, #0
    cb92:	4603      	mov	r3, r0
    cb94:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    cb96:	79fb      	ldrb	r3, [r7, #7]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d102      	bne.n	cba2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    cb9c:	4b05      	ldr	r3, [pc, #20]	; (cbb4 <_usb_d_dev_wait_clk_rdy+0x28>)
    cb9e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    cba0:	e004      	b.n	cbac <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    cba2:	79fb      	ldrb	r3, [r7, #7]
    cba4:	2b01      	cmp	r3, #1
    cba6:	d101      	bne.n	cbac <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    cba8:	4b03      	ldr	r3, [pc, #12]	; (cbb8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    cbaa:	4798      	blx	r3
}
    cbac:	bf00      	nop
    cbae:	3708      	adds	r7, #8
    cbb0:	46bd      	mov	sp, r7
    cbb2:	bd80      	pop	{r7, pc}
    cbb4:	0000cb41 	.word	0x0000cb41
    cbb8:	0000cb1d 	.word	0x0000cb1d

0000cbbc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    cbbc:	b580      	push	{r7, lr}
    cbbe:	b082      	sub	sp, #8
    cbc0:	af00      	add	r7, sp, #0
    cbc2:	4603      	mov	r3, r0
    cbc4:	6039      	str	r1, [r7, #0]
    cbc6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    cbc8:	683b      	ldr	r3, [r7, #0]
    cbca:	b2da      	uxtb	r2, r3
    cbcc:	79fb      	ldrb	r3, [r7, #7]
    cbce:	4619      	mov	r1, r3
    cbd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cbd4:	4b02      	ldr	r3, [pc, #8]	; (cbe0 <_usbd_ep_int_ack+0x24>)
    cbd6:	4798      	blx	r3
}
    cbd8:	bf00      	nop
    cbda:	3708      	adds	r7, #8
    cbdc:	46bd      	mov	sp, r7
    cbde:	bd80      	pop	{r7, pc}
    cbe0:	0000c695 	.word	0x0000c695

0000cbe4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b082      	sub	sp, #8
    cbe8:	af00      	add	r7, sp, #0
    cbea:	4603      	mov	r3, r0
    cbec:	6039      	str	r1, [r7, #0]
    cbee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    cbf0:	683b      	ldr	r3, [r7, #0]
    cbf2:	b2da      	uxtb	r2, r3
    cbf4:	79fb      	ldrb	r3, [r7, #7]
    cbf6:	4619      	mov	r1, r3
    cbf8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cbfc:	4b02      	ldr	r3, [pc, #8]	; (cc08 <_usbd_ep_int_en+0x24>)
    cbfe:	4798      	blx	r3
}
    cc00:	bf00      	nop
    cc02:	3708      	adds	r7, #8
    cc04:	46bd      	mov	sp, r7
    cc06:	bd80      	pop	{r7, pc}
    cc08:	0000c769 	.word	0x0000c769

0000cc0c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    cc0c:	b580      	push	{r7, lr}
    cc0e:	b082      	sub	sp, #8
    cc10:	af00      	add	r7, sp, #0
    cc12:	4603      	mov	r3, r0
    cc14:	6039      	str	r1, [r7, #0]
    cc16:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    cc18:	683b      	ldr	r3, [r7, #0]
    cc1a:	b2da      	uxtb	r2, r3
    cc1c:	79fb      	ldrb	r3, [r7, #7]
    cc1e:	4619      	mov	r1, r3
    cc20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cc24:	4b02      	ldr	r3, [pc, #8]	; (cc30 <_usbd_ep_int_dis+0x24>)
    cc26:	4798      	blx	r3
}
    cc28:	bf00      	nop
    cc2a:	3708      	adds	r7, #8
    cc2c:	46bd      	mov	sp, r7
    cc2e:	bd80      	pop	{r7, pc}
    cc30:	0000c795 	.word	0x0000c795

0000cc34 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    cc34:	b580      	push	{r7, lr}
    cc36:	b082      	sub	sp, #8
    cc38:	af00      	add	r7, sp, #0
    cc3a:	4603      	mov	r3, r0
    cc3c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    cc3e:	79fb      	ldrb	r3, [r7, #7]
    cc40:	4619      	mov	r1, r3
    cc42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cc46:	4b06      	ldr	r3, [pc, #24]	; (cc60 <_usbd_ep_is_ctrl+0x2c>)
    cc48:	4798      	blx	r3
    cc4a:	4603      	mov	r3, r0
    cc4c:	2b11      	cmp	r3, #17
    cc4e:	bf0c      	ite	eq
    cc50:	2301      	moveq	r3, #1
    cc52:	2300      	movne	r3, #0
    cc54:	b2db      	uxtb	r3, r3
}
    cc56:	4618      	mov	r0, r3
    cc58:	3708      	adds	r7, #8
    cc5a:	46bd      	mov	sp, r7
    cc5c:	bd80      	pop	{r7, pc}
    cc5e:	bf00      	nop
    cc60:	0000c84f 	.word	0x0000c84f

0000cc64 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    cc64:	b580      	push	{r7, lr}
    cc66:	b082      	sub	sp, #8
    cc68:	af00      	add	r7, sp, #0
    cc6a:	4603      	mov	r3, r0
    cc6c:	71fb      	strb	r3, [r7, #7]
    cc6e:	460b      	mov	r3, r1
    cc70:	71bb      	strb	r3, [r7, #6]
    cc72:	4613      	mov	r3, r2
    cc74:	717b      	strb	r3, [r7, #5]
	if (st) {
    cc76:	797b      	ldrb	r3, [r7, #5]
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d00b      	beq.n	cc94 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cc7c:	79bb      	ldrb	r3, [r7, #6]
    cc7e:	2210      	movs	r2, #16
    cc80:	fa02 f303 	lsl.w	r3, r2, r3
    cc84:	b2da      	uxtb	r2, r3
    cc86:	79fb      	ldrb	r3, [r7, #7]
    cc88:	4619      	mov	r1, r3
    cc8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cc8e:	4b09      	ldr	r3, [pc, #36]	; (ccb4 <_usbd_ep_set_stall+0x50>)
    cc90:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    cc92:	e00a      	b.n	ccaa <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cc94:	79bb      	ldrb	r3, [r7, #6]
    cc96:	2210      	movs	r2, #16
    cc98:	fa02 f303 	lsl.w	r3, r2, r3
    cc9c:	b2da      	uxtb	r2, r3
    cc9e:	79fb      	ldrb	r3, [r7, #7]
    cca0:	4619      	mov	r1, r3
    cca2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cca6:	4b04      	ldr	r3, [pc, #16]	; (ccb8 <_usbd_ep_set_stall+0x54>)
    cca8:	4798      	blx	r3
}
    ccaa:	bf00      	nop
    ccac:	3708      	adds	r7, #8
    ccae:	46bd      	mov	sp, r7
    ccb0:	bd80      	pop	{r7, pc}
    ccb2:	bf00      	nop
    ccb4:	0000c6c1 	.word	0x0000c6c1
    ccb8:	0000c715 	.word	0x0000c715

0000ccbc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b084      	sub	sp, #16
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	4603      	mov	r3, r0
    ccc4:	460a      	mov	r2, r1
    ccc6:	71fb      	strb	r3, [r7, #7]
    ccc8:	4613      	mov	r3, r2
    ccca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    cccc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ccd0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ccd2:	79fb      	ldrb	r3, [r7, #7]
    ccd4:	4619      	mov	r1, r3
    ccd6:	68f8      	ldr	r0, [r7, #12]
    ccd8:	4b08      	ldr	r3, [pc, #32]	; (ccfc <_usbd_ep_is_stalled+0x40>)
    ccda:	4798      	blx	r3
    ccdc:	4603      	mov	r3, r0
    ccde:	4619      	mov	r1, r3
    cce0:	79bb      	ldrb	r3, [r7, #6]
    cce2:	2210      	movs	r2, #16
    cce4:	fa02 f303 	lsl.w	r3, r2, r3
    cce8:	400b      	ands	r3, r1
    ccea:	2b00      	cmp	r3, #0
    ccec:	bf14      	ite	ne
    ccee:	2301      	movne	r3, #1
    ccf0:	2300      	moveq	r3, #0
    ccf2:	b2db      	uxtb	r3, r3
}
    ccf4:	4618      	mov	r0, r3
    ccf6:	3710      	adds	r7, #16
    ccf8:	46bd      	mov	sp, r7
    ccfa:	bd80      	pop	{r7, pc}
    ccfc:	0000c6ed 	.word	0x0000c6ed

0000cd00 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	b084      	sub	sp, #16
    cd04:	af00      	add	r7, sp, #0
    cd06:	4603      	mov	r3, r0
    cd08:	460a      	mov	r2, r1
    cd0a:	71fb      	strb	r3, [r7, #7]
    cd0c:	4613      	mov	r3, r2
    cd0e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    cd10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cd14:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    cd16:	79fb      	ldrb	r3, [r7, #7]
    cd18:	4619      	mov	r1, r3
    cd1a:	68f8      	ldr	r0, [r7, #12]
    cd1c:	4b08      	ldr	r3, [pc, #32]	; (cd40 <_usbd_ep_is_stall_sent+0x40>)
    cd1e:	4798      	blx	r3
    cd20:	4603      	mov	r3, r0
    cd22:	4619      	mov	r1, r3
    cd24:	79bb      	ldrb	r3, [r7, #6]
    cd26:	2220      	movs	r2, #32
    cd28:	fa02 f303 	lsl.w	r3, r2, r3
    cd2c:	400b      	ands	r3, r1
    cd2e:	2b00      	cmp	r3, #0
    cd30:	bf14      	ite	ne
    cd32:	2301      	movne	r3, #1
    cd34:	2300      	moveq	r3, #0
    cd36:	b2db      	uxtb	r3, r3
}
    cd38:	4618      	mov	r0, r3
    cd3a:	3710      	adds	r7, #16
    cd3c:	46bd      	mov	sp, r7
    cd3e:	bd80      	pop	{r7, pc}
    cd40:	0000c66d 	.word	0x0000c66d

0000cd44 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    cd44:	b580      	push	{r7, lr}
    cd46:	b082      	sub	sp, #8
    cd48:	af00      	add	r7, sp, #0
    cd4a:	4603      	mov	r3, r0
    cd4c:	460a      	mov	r2, r1
    cd4e:	71fb      	strb	r3, [r7, #7]
    cd50:	4613      	mov	r3, r2
    cd52:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    cd54:	79bb      	ldrb	r3, [r7, #6]
    cd56:	2220      	movs	r2, #32
    cd58:	409a      	lsls	r2, r3
    cd5a:	79fb      	ldrb	r3, [r7, #7]
    cd5c:	4611      	mov	r1, r2
    cd5e:	4618      	mov	r0, r3
    cd60:	4b02      	ldr	r3, [pc, #8]	; (cd6c <_usbd_ep_ack_stall+0x28>)
    cd62:	4798      	blx	r3
}
    cd64:	bf00      	nop
    cd66:	3708      	adds	r7, #8
    cd68:	46bd      	mov	sp, r7
    cd6a:	bd80      	pop	{r7, pc}
    cd6c:	0000cbbd 	.word	0x0000cbbd

0000cd70 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b082      	sub	sp, #8
    cd74:	af00      	add	r7, sp, #0
    cd76:	4603      	mov	r3, r0
    cd78:	71fb      	strb	r3, [r7, #7]
    cd7a:	460b      	mov	r3, r1
    cd7c:	71bb      	strb	r3, [r7, #6]
    cd7e:	4613      	mov	r3, r2
    cd80:	717b      	strb	r3, [r7, #5]
	if (en) {
    cd82:	797b      	ldrb	r3, [r7, #5]
    cd84:	2b00      	cmp	r3, #0
    cd86:	d008      	beq.n	cd9a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    cd88:	79bb      	ldrb	r3, [r7, #6]
    cd8a:	2220      	movs	r2, #32
    cd8c:	409a      	lsls	r2, r3
    cd8e:	79fb      	ldrb	r3, [r7, #7]
    cd90:	4611      	mov	r1, r2
    cd92:	4618      	mov	r0, r3
    cd94:	4b07      	ldr	r3, [pc, #28]	; (cdb4 <_usbd_ep_int_stall_en+0x44>)
    cd96:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    cd98:	e007      	b.n	cdaa <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    cd9a:	79bb      	ldrb	r3, [r7, #6]
    cd9c:	2220      	movs	r2, #32
    cd9e:	409a      	lsls	r2, r3
    cda0:	79fb      	ldrb	r3, [r7, #7]
    cda2:	4611      	mov	r1, r2
    cda4:	4618      	mov	r0, r3
    cda6:	4b04      	ldr	r3, [pc, #16]	; (cdb8 <_usbd_ep_int_stall_en+0x48>)
    cda8:	4798      	blx	r3
}
    cdaa:	bf00      	nop
    cdac:	3708      	adds	r7, #8
    cdae:	46bd      	mov	sp, r7
    cdb0:	bd80      	pop	{r7, pc}
    cdb2:	bf00      	nop
    cdb4:	0000cbe5 	.word	0x0000cbe5
    cdb8:	0000cc0d 	.word	0x0000cc0d

0000cdbc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    cdbc:	b580      	push	{r7, lr}
    cdbe:	b082      	sub	sp, #8
    cdc0:	af00      	add	r7, sp, #0
    cdc2:	4603      	mov	r3, r0
    cdc4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    cdc6:	79fb      	ldrb	r3, [r7, #7]
    cdc8:	4619      	mov	r1, r3
    cdca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cdce:	4b03      	ldr	r3, [pc, #12]	; (cddc <_usbd_ep_stop_setup+0x20>)
    cdd0:	4798      	blx	r3
}
    cdd2:	bf00      	nop
    cdd4:	3708      	adds	r7, #8
    cdd6:	46bd      	mov	sp, r7
    cdd8:	bd80      	pop	{r7, pc}
    cdda:	bf00      	nop
    cddc:	0000c741 	.word	0x0000c741

0000cde0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    cde0:	b580      	push	{r7, lr}
    cde2:	b082      	sub	sp, #8
    cde4:	af00      	add	r7, sp, #0
    cde6:	4603      	mov	r3, r0
    cde8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    cdea:	79fb      	ldrb	r3, [r7, #7]
    cdec:	2210      	movs	r2, #16
    cdee:	4619      	mov	r1, r3
    cdf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cdf4:	4b05      	ldr	r3, [pc, #20]	; (ce0c <_usbd_ep_is_setup+0x2c>)
    cdf6:	4798      	blx	r3
    cdf8:	4603      	mov	r3, r0
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	bf14      	ite	ne
    cdfe:	2301      	movne	r3, #1
    ce00:	2300      	moveq	r3, #0
    ce02:	b2db      	uxtb	r3, r3
}
    ce04:	4618      	mov	r0, r3
    ce06:	3708      	adds	r7, #8
    ce08:	46bd      	mov	sp, r7
    ce0a:	bd80      	pop	{r7, pc}
    ce0c:	0000c637 	.word	0x0000c637

0000ce10 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    ce10:	b580      	push	{r7, lr}
    ce12:	b082      	sub	sp, #8
    ce14:	af00      	add	r7, sp, #0
    ce16:	4603      	mov	r3, r0
    ce18:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ce1a:	79fb      	ldrb	r3, [r7, #7]
    ce1c:	2110      	movs	r1, #16
    ce1e:	4618      	mov	r0, r3
    ce20:	4b02      	ldr	r3, [pc, #8]	; (ce2c <_usbd_ep_ack_setup+0x1c>)
    ce22:	4798      	blx	r3
}
    ce24:	bf00      	nop
    ce26:	3708      	adds	r7, #8
    ce28:	46bd      	mov	sp, r7
    ce2a:	bd80      	pop	{r7, pc}
    ce2c:	0000cbbd 	.word	0x0000cbbd

0000ce30 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    ce30:	b580      	push	{r7, lr}
    ce32:	b082      	sub	sp, #8
    ce34:	af00      	add	r7, sp, #0
    ce36:	4603      	mov	r3, r0
    ce38:	71fb      	strb	r3, [r7, #7]
    ce3a:	460b      	mov	r3, r1
    ce3c:	71bb      	strb	r3, [r7, #6]
    ce3e:	4613      	mov	r3, r2
    ce40:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    ce42:	797b      	ldrb	r3, [r7, #5]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d00b      	beq.n	ce60 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ce48:	79bb      	ldrb	r3, [r7, #6]
    ce4a:	2201      	movs	r2, #1
    ce4c:	fa02 f303 	lsl.w	r3, r2, r3
    ce50:	b2da      	uxtb	r2, r3
    ce52:	79fb      	ldrb	r3, [r7, #7]
    ce54:	4619      	mov	r1, r3
    ce56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce5a:	4b09      	ldr	r3, [pc, #36]	; (ce80 <_usbd_ep_set_toggle+0x50>)
    ce5c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    ce5e:	e00a      	b.n	ce76 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ce60:	79bb      	ldrb	r3, [r7, #6]
    ce62:	2201      	movs	r2, #1
    ce64:	fa02 f303 	lsl.w	r3, r2, r3
    ce68:	b2da      	uxtb	r2, r3
    ce6a:	79fb      	ldrb	r3, [r7, #7]
    ce6c:	4619      	mov	r1, r3
    ce6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce72:	4b04      	ldr	r3, [pc, #16]	; (ce84 <_usbd_ep_set_toggle+0x54>)
    ce74:	4798      	blx	r3
}
    ce76:	bf00      	nop
    ce78:	3708      	adds	r7, #8
    ce7a:	46bd      	mov	sp, r7
    ce7c:	bd80      	pop	{r7, pc}
    ce7e:	bf00      	nop
    ce80:	0000c6c1 	.word	0x0000c6c1
    ce84:	0000c715 	.word	0x0000c715

0000ce88 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    ce88:	b580      	push	{r7, lr}
    ce8a:	b082      	sub	sp, #8
    ce8c:	af00      	add	r7, sp, #0
    ce8e:	4603      	mov	r3, r0
    ce90:	460a      	mov	r2, r1
    ce92:	71fb      	strb	r3, [r7, #7]
    ce94:	4613      	mov	r3, r2
    ce96:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ce98:	79bb      	ldrb	r3, [r7, #6]
    ce9a:	2201      	movs	r2, #1
    ce9c:	409a      	lsls	r2, r3
    ce9e:	79fb      	ldrb	r3, [r7, #7]
    cea0:	4611      	mov	r1, r2
    cea2:	4618      	mov	r0, r3
    cea4:	4b02      	ldr	r3, [pc, #8]	; (ceb0 <_usbd_ep_ack_io_cpt+0x28>)
    cea6:	4798      	blx	r3
}
    cea8:	bf00      	nop
    ceaa:	3708      	adds	r7, #8
    ceac:	46bd      	mov	sp, r7
    ceae:	bd80      	pop	{r7, pc}
    ceb0:	0000cbbd 	.word	0x0000cbbd

0000ceb4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    ceb4:	b480      	push	{r7}
    ceb6:	b085      	sub	sp, #20
    ceb8:	af00      	add	r7, sp, #0
    ceba:	4603      	mov	r3, r0
    cebc:	603a      	str	r2, [r7, #0]
    cebe:	71fb      	strb	r3, [r7, #7]
    cec0:	460b      	mov	r3, r1
    cec2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cec4:	79fa      	ldrb	r2, [r7, #7]
    cec6:	79bb      	ldrb	r3, [r7, #6]
    cec8:	0052      	lsls	r2, r2, #1
    ceca:	4413      	add	r3, r2
    cecc:	011b      	lsls	r3, r3, #4
    cece:	4a06      	ldr	r2, [pc, #24]	; (cee8 <_usbd_ep_set_buf+0x34>)
    ced0:	4413      	add	r3, r2
    ced2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    ced4:	68fb      	ldr	r3, [r7, #12]
    ced6:	683a      	ldr	r2, [r7, #0]
    ced8:	601a      	str	r2, [r3, #0]
}
    ceda:	bf00      	nop
    cedc:	3714      	adds	r7, #20
    cede:	46bd      	mov	sp, r7
    cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cee4:	4770      	bx	lr
    cee6:	bf00      	nop
    cee8:	20001edc 	.word	0x20001edc

0000ceec <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ceec:	b480      	push	{r7}
    ceee:	b085      	sub	sp, #20
    cef0:	af00      	add	r7, sp, #0
    cef2:	4603      	mov	r3, r0
    cef4:	71fb      	strb	r3, [r7, #7]
    cef6:	460b      	mov	r3, r1
    cef8:	71bb      	strb	r3, [r7, #6]
    cefa:	4613      	mov	r3, r2
    cefc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cefe:	79fa      	ldrb	r2, [r7, #7]
    cf00:	79bb      	ldrb	r3, [r7, #6]
    cf02:	0052      	lsls	r2, r2, #1
    cf04:	4413      	add	r3, r2
    cf06:	011b      	lsls	r3, r3, #4
    cf08:	4a08      	ldr	r2, [pc, #32]	; (cf2c <_usbd_ep_set_in_count+0x40>)
    cf0a:	4413      	add	r3, r2
    cf0c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    cf0e:	88bb      	ldrh	r3, [r7, #4]
    cf10:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cf14:	b299      	uxth	r1, r3
    cf16:	68fa      	ldr	r2, [r7, #12]
    cf18:	6853      	ldr	r3, [r2, #4]
    cf1a:	f361 339b 	bfi	r3, r1, #14, #14
    cf1e:	6053      	str	r3, [r2, #4]
}
    cf20:	bf00      	nop
    cf22:	3714      	adds	r7, #20
    cf24:	46bd      	mov	sp, r7
    cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf2a:	4770      	bx	lr
    cf2c:	20001edc 	.word	0x20001edc

0000cf30 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    cf30:	b480      	push	{r7}
    cf32:	b085      	sub	sp, #20
    cf34:	af00      	add	r7, sp, #0
    cf36:	4603      	mov	r3, r0
    cf38:	71fb      	strb	r3, [r7, #7]
    cf3a:	460b      	mov	r3, r1
    cf3c:	71bb      	strb	r3, [r7, #6]
    cf3e:	4613      	mov	r3, r2
    cf40:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cf42:	79fa      	ldrb	r2, [r7, #7]
    cf44:	79bb      	ldrb	r3, [r7, #6]
    cf46:	0052      	lsls	r2, r2, #1
    cf48:	4413      	add	r3, r2
    cf4a:	011b      	lsls	r3, r3, #4
    cf4c:	4a08      	ldr	r2, [pc, #32]	; (cf70 <_usbd_ep_set_in_size+0x40>)
    cf4e:	4413      	add	r3, r2
    cf50:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    cf52:	88bb      	ldrh	r3, [r7, #4]
    cf54:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cf58:	b299      	uxth	r1, r3
    cf5a:	68fa      	ldr	r2, [r7, #12]
    cf5c:	6853      	ldr	r3, [r2, #4]
    cf5e:	f361 030d 	bfi	r3, r1, #0, #14
    cf62:	6053      	str	r3, [r2, #4]
}
    cf64:	bf00      	nop
    cf66:	3714      	adds	r7, #20
    cf68:	46bd      	mov	sp, r7
    cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf6e:	4770      	bx	lr
    cf70:	20001edc 	.word	0x20001edc

0000cf74 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    cf74:	b480      	push	{r7}
    cf76:	b085      	sub	sp, #20
    cf78:	af00      	add	r7, sp, #0
    cf7a:	4603      	mov	r3, r0
    cf7c:	71fb      	strb	r3, [r7, #7]
    cf7e:	460b      	mov	r3, r1
    cf80:	71bb      	strb	r3, [r7, #6]
    cf82:	4613      	mov	r3, r2
    cf84:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cf86:	79fa      	ldrb	r2, [r7, #7]
    cf88:	79bb      	ldrb	r3, [r7, #6]
    cf8a:	0052      	lsls	r2, r2, #1
    cf8c:	4413      	add	r3, r2
    cf8e:	011b      	lsls	r3, r3, #4
    cf90:	4a08      	ldr	r2, [pc, #32]	; (cfb4 <_usbd_ep_set_out_count+0x40>)
    cf92:	4413      	add	r3, r2
    cf94:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cf96:	88bb      	ldrh	r3, [r7, #4]
    cf98:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cf9c:	b299      	uxth	r1, r3
    cf9e:	68fa      	ldr	r2, [r7, #12]
    cfa0:	6853      	ldr	r3, [r2, #4]
    cfa2:	f361 030d 	bfi	r3, r1, #0, #14
    cfa6:	6053      	str	r3, [r2, #4]
}
    cfa8:	bf00      	nop
    cfaa:	3714      	adds	r7, #20
    cfac:	46bd      	mov	sp, r7
    cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfb2:	4770      	bx	lr
    cfb4:	20001edc 	.word	0x20001edc

0000cfb8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    cfb8:	b480      	push	{r7}
    cfba:	b085      	sub	sp, #20
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	4603      	mov	r3, r0
    cfc0:	71fb      	strb	r3, [r7, #7]
    cfc2:	460b      	mov	r3, r1
    cfc4:	71bb      	strb	r3, [r7, #6]
    cfc6:	4613      	mov	r3, r2
    cfc8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cfca:	79fa      	ldrb	r2, [r7, #7]
    cfcc:	79bb      	ldrb	r3, [r7, #6]
    cfce:	0052      	lsls	r2, r2, #1
    cfd0:	4413      	add	r3, r2
    cfd2:	011b      	lsls	r3, r3, #4
    cfd4:	4a08      	ldr	r2, [pc, #32]	; (cff8 <_usbd_ep_set_out_size+0x40>)
    cfd6:	4413      	add	r3, r2
    cfd8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    cfda:	88bb      	ldrh	r3, [r7, #4]
    cfdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cfe0:	b299      	uxth	r1, r3
    cfe2:	68fa      	ldr	r2, [r7, #12]
    cfe4:	6853      	ldr	r3, [r2, #4]
    cfe6:	f361 339b 	bfi	r3, r1, #14, #14
    cfea:	6053      	str	r3, [r2, #4]
}
    cfec:	bf00      	nop
    cfee:	3714      	adds	r7, #20
    cff0:	46bd      	mov	sp, r7
    cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cff6:	4770      	bx	lr
    cff8:	20001edc 	.word	0x20001edc

0000cffc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    cffc:	b580      	push	{r7, lr}
    cffe:	b084      	sub	sp, #16
    d000:	af00      	add	r7, sp, #0
    d002:	60ba      	str	r2, [r7, #8]
    d004:	607b      	str	r3, [r7, #4]
    d006:	4603      	mov	r3, r0
    d008:	73fb      	strb	r3, [r7, #15]
    d00a:	460b      	mov	r3, r1
    d00c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    d00e:	68bb      	ldr	r3, [r7, #8]
    d010:	b29a      	uxth	r2, r3
    d012:	7bb9      	ldrb	r1, [r7, #14]
    d014:	7bfb      	ldrb	r3, [r7, #15]
    d016:	4618      	mov	r0, r3
    d018:	4b06      	ldr	r3, [pc, #24]	; (d034 <_usbd_ep_set_in_trans+0x38>)
    d01a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    d01c:	687b      	ldr	r3, [r7, #4]
    d01e:	b29a      	uxth	r2, r3
    d020:	7bb9      	ldrb	r1, [r7, #14]
    d022:	7bfb      	ldrb	r3, [r7, #15]
    d024:	4618      	mov	r0, r3
    d026:	4b04      	ldr	r3, [pc, #16]	; (d038 <_usbd_ep_set_in_trans+0x3c>)
    d028:	4798      	blx	r3
}
    d02a:	bf00      	nop
    d02c:	3710      	adds	r7, #16
    d02e:	46bd      	mov	sp, r7
    d030:	bd80      	pop	{r7, pc}
    d032:	bf00      	nop
    d034:	0000cf31 	.word	0x0000cf31
    d038:	0000ceed 	.word	0x0000ceed

0000d03c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    d03c:	b580      	push	{r7, lr}
    d03e:	b084      	sub	sp, #16
    d040:	af00      	add	r7, sp, #0
    d042:	60ba      	str	r2, [r7, #8]
    d044:	607b      	str	r3, [r7, #4]
    d046:	4603      	mov	r3, r0
    d048:	73fb      	strb	r3, [r7, #15]
    d04a:	460b      	mov	r3, r1
    d04c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    d04e:	68bb      	ldr	r3, [r7, #8]
    d050:	b29a      	uxth	r2, r3
    d052:	7bb9      	ldrb	r1, [r7, #14]
    d054:	7bfb      	ldrb	r3, [r7, #15]
    d056:	4618      	mov	r0, r3
    d058:	4b06      	ldr	r3, [pc, #24]	; (d074 <_usbd_ep_set_out_trans+0x38>)
    d05a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	b29a      	uxth	r2, r3
    d060:	7bb9      	ldrb	r1, [r7, #14]
    d062:	7bfb      	ldrb	r3, [r7, #15]
    d064:	4618      	mov	r0, r3
    d066:	4b04      	ldr	r3, [pc, #16]	; (d078 <_usbd_ep_set_out_trans+0x3c>)
    d068:	4798      	blx	r3
}
    d06a:	bf00      	nop
    d06c:	3710      	adds	r7, #16
    d06e:	46bd      	mov	sp, r7
    d070:	bd80      	pop	{r7, pc}
    d072:	bf00      	nop
    d074:	0000cfb9 	.word	0x0000cfb9
    d078:	0000cf75 	.word	0x0000cf75

0000d07c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    d07c:	b480      	push	{r7}
    d07e:	b085      	sub	sp, #20
    d080:	af00      	add	r7, sp, #0
    d082:	4603      	mov	r3, r0
    d084:	460a      	mov	r2, r1
    d086:	71fb      	strb	r3, [r7, #7]
    d088:	4613      	mov	r3, r2
    d08a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d08c:	79fa      	ldrb	r2, [r7, #7]
    d08e:	79bb      	ldrb	r3, [r7, #6]
    d090:	0052      	lsls	r2, r2, #1
    d092:	4413      	add	r3, r2
    d094:	011b      	lsls	r3, r3, #4
    d096:	4a06      	ldr	r2, [pc, #24]	; (d0b0 <_usbd_ep_clear_bank_status+0x34>)
    d098:	4413      	add	r3, r2
    d09a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    d09c:	68fb      	ldr	r3, [r7, #12]
    d09e:	2200      	movs	r2, #0
    d0a0:	729a      	strb	r2, [r3, #10]
}
    d0a2:	bf00      	nop
    d0a4:	3714      	adds	r7, #20
    d0a6:	46bd      	mov	sp, r7
    d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0ac:	4770      	bx	lr
    d0ae:	bf00      	nop
    d0b0:	20001edc 	.word	0x20001edc

0000d0b4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	4603      	mov	r3, r0
    d0bc:	71fb      	strb	r3, [r7, #7]
    d0be:	460b      	mov	r3, r1
    d0c0:	71bb      	strb	r3, [r7, #6]
    d0c2:	4613      	mov	r3, r2
    d0c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    d0c6:	797b      	ldrb	r3, [r7, #5]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d00b      	beq.n	d0e4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d0cc:	79bb      	ldrb	r3, [r7, #6]
    d0ce:	2240      	movs	r2, #64	; 0x40
    d0d0:	fa02 f303 	lsl.w	r3, r2, r3
    d0d4:	b2da      	uxtb	r2, r3
    d0d6:	79fb      	ldrb	r3, [r7, #7]
    d0d8:	4619      	mov	r1, r3
    d0da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d0de:	4b09      	ldr	r3, [pc, #36]	; (d104 <_usbd_ep_set_in_rdy+0x50>)
    d0e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    d0e2:	e00a      	b.n	d0fa <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d0e4:	79bb      	ldrb	r3, [r7, #6]
    d0e6:	2240      	movs	r2, #64	; 0x40
    d0e8:	fa02 f303 	lsl.w	r3, r2, r3
    d0ec:	b2da      	uxtb	r2, r3
    d0ee:	79fb      	ldrb	r3, [r7, #7]
    d0f0:	4619      	mov	r1, r3
    d0f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d0f6:	4b04      	ldr	r3, [pc, #16]	; (d108 <_usbd_ep_set_in_rdy+0x54>)
    d0f8:	4798      	blx	r3
}
    d0fa:	bf00      	nop
    d0fc:	3708      	adds	r7, #8
    d0fe:	46bd      	mov	sp, r7
    d100:	bd80      	pop	{r7, pc}
    d102:	bf00      	nop
    d104:	0000c6c1 	.word	0x0000c6c1
    d108:	0000c715 	.word	0x0000c715

0000d10c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    d10c:	b580      	push	{r7, lr}
    d10e:	b082      	sub	sp, #8
    d110:	af00      	add	r7, sp, #0
    d112:	4603      	mov	r3, r0
    d114:	71fb      	strb	r3, [r7, #7]
    d116:	460b      	mov	r3, r1
    d118:	71bb      	strb	r3, [r7, #6]
    d11a:	4613      	mov	r3, r2
    d11c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    d11e:	797b      	ldrb	r3, [r7, #5]
    d120:	2b00      	cmp	r3, #0
    d122:	d00b      	beq.n	d13c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d124:	79bb      	ldrb	r3, [r7, #6]
    d126:	2240      	movs	r2, #64	; 0x40
    d128:	fa02 f303 	lsl.w	r3, r2, r3
    d12c:	b2da      	uxtb	r2, r3
    d12e:	79fb      	ldrb	r3, [r7, #7]
    d130:	4619      	mov	r1, r3
    d132:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d136:	4b09      	ldr	r3, [pc, #36]	; (d15c <_usbd_ep_set_out_rdy+0x50>)
    d138:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    d13a:	e00a      	b.n	d152 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d13c:	79bb      	ldrb	r3, [r7, #6]
    d13e:	2240      	movs	r2, #64	; 0x40
    d140:	fa02 f303 	lsl.w	r3, r2, r3
    d144:	b2da      	uxtb	r2, r3
    d146:	79fb      	ldrb	r3, [r7, #7]
    d148:	4619      	mov	r1, r3
    d14a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d14e:	4b04      	ldr	r3, [pc, #16]	; (d160 <_usbd_ep_set_out_rdy+0x54>)
    d150:	4798      	blx	r3
}
    d152:	bf00      	nop
    d154:	3708      	adds	r7, #8
    d156:	46bd      	mov	sp, r7
    d158:	bd80      	pop	{r7, pc}
    d15a:	bf00      	nop
    d15c:	0000c715 	.word	0x0000c715
    d160:	0000c6c1 	.word	0x0000c6c1

0000d164 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    d164:	b480      	push	{r7}
    d166:	b083      	sub	sp, #12
    d168:	af00      	add	r7, sp, #0
    d16a:	4603      	mov	r3, r0
    d16c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    d16e:	88fb      	ldrh	r3, [r7, #6]
    d170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d174:	d820      	bhi.n	d1b8 <_usbd_ep_pcksize_size+0x54>
    d176:	88fb      	ldrh	r3, [r7, #6]
    d178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d17c:	d81a      	bhi.n	d1b4 <_usbd_ep_pcksize_size+0x50>
    d17e:	88fb      	ldrh	r3, [r7, #6]
    d180:	2b80      	cmp	r3, #128	; 0x80
    d182:	d815      	bhi.n	d1b0 <_usbd_ep_pcksize_size+0x4c>
    d184:	88fb      	ldrh	r3, [r7, #6]
    d186:	2b40      	cmp	r3, #64	; 0x40
    d188:	d810      	bhi.n	d1ac <_usbd_ep_pcksize_size+0x48>
    d18a:	88fb      	ldrh	r3, [r7, #6]
    d18c:	2b20      	cmp	r3, #32
    d18e:	d80b      	bhi.n	d1a8 <_usbd_ep_pcksize_size+0x44>
    d190:	88fb      	ldrh	r3, [r7, #6]
    d192:	2b10      	cmp	r3, #16
    d194:	d806      	bhi.n	d1a4 <_usbd_ep_pcksize_size+0x40>
    d196:	88fb      	ldrh	r3, [r7, #6]
    d198:	2b08      	cmp	r3, #8
    d19a:	bf8c      	ite	hi
    d19c:	2301      	movhi	r3, #1
    d19e:	2300      	movls	r3, #0
    d1a0:	b2db      	uxtb	r3, r3
    d1a2:	e00a      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1a4:	2302      	movs	r3, #2
    d1a6:	e008      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1a8:	2303      	movs	r3, #3
    d1aa:	e006      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1ac:	2304      	movs	r3, #4
    d1ae:	e004      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1b0:	2305      	movs	r3, #5
    d1b2:	e002      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1b4:	2306      	movs	r3, #6
    d1b6:	e000      	b.n	d1ba <_usbd_ep_pcksize_size+0x56>
    d1b8:	2307      	movs	r3, #7
}
    d1ba:	4618      	mov	r0, r3
    d1bc:	370c      	adds	r7, #12
    d1be:	46bd      	mov	sp, r7
    d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1c4:	4770      	bx	lr
	...

0000d1c8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    d1c8:	b480      	push	{r7}
    d1ca:	b085      	sub	sp, #20
    d1cc:	af00      	add	r7, sp, #0
    d1ce:	4603      	mov	r3, r0
    d1d0:	460a      	mov	r2, r1
    d1d2:	71fb      	strb	r3, [r7, #7]
    d1d4:	4613      	mov	r3, r2
    d1d6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    d1d8:	79fb      	ldrb	r3, [r7, #7]
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d008      	beq.n	d1f0 <_usb_d_dev_ept+0x28>
    d1de:	79bb      	ldrb	r3, [r7, #6]
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d003      	beq.n	d1ec <_usb_d_dev_ept+0x24>
    d1e4:	79fb      	ldrb	r3, [r7, #7]
    d1e6:	3304      	adds	r3, #4
    d1e8:	b2db      	uxtb	r3, r3
    d1ea:	e002      	b.n	d1f2 <_usb_d_dev_ept+0x2a>
    d1ec:	79fb      	ldrb	r3, [r7, #7]
    d1ee:	e000      	b.n	d1f2 <_usb_d_dev_ept+0x2a>
    d1f0:	2300      	movs	r3, #0
    d1f2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    d1f4:	7bfa      	ldrb	r2, [r7, #15]
    d1f6:	4613      	mov	r3, r2
    d1f8:	009b      	lsls	r3, r3, #2
    d1fa:	4413      	add	r3, r2
    d1fc:	009b      	lsls	r3, r3, #2
    d1fe:	3310      	adds	r3, #16
    d200:	4a04      	ldr	r2, [pc, #16]	; (d214 <_usb_d_dev_ept+0x4c>)
    d202:	4413      	add	r3, r2
    d204:	3304      	adds	r3, #4
}
    d206:	4618      	mov	r0, r3
    d208:	3714      	adds	r7, #20
    d20a:	46bd      	mov	sp, r7
    d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d210:	4770      	bx	lr
    d212:	bf00      	nop
    d214:	20001e14 	.word	0x20001e14

0000d218 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    d218:	b580      	push	{r7, lr}
    d21a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    d21c:	2104      	movs	r1, #4
    d21e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d222:	4b03      	ldr	r3, [pc, #12]	; (d230 <_usb_d_dev_sof+0x18>)
    d224:	4798      	blx	r3
	dev_inst.callbacks.sof();
    d226:	4b03      	ldr	r3, [pc, #12]	; (d234 <_usb_d_dev_sof+0x1c>)
    d228:	681b      	ldr	r3, [r3, #0]
    d22a:	4798      	blx	r3
}
    d22c:	bf00      	nop
    d22e:	bd80      	pop	{r7, pc}
    d230:	0000c88f 	.word	0x0000c88f
    d234:	20001e14 	.word	0x20001e14

0000d238 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    d238:	b580      	push	{r7, lr}
    d23a:	b084      	sub	sp, #16
    d23c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    d23e:	2300      	movs	r3, #0
    d240:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d242:	f240 2101 	movw	r1, #513	; 0x201
    d246:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d24a:	4b1a      	ldr	r3, [pc, #104]	; (d2b4 <_usb_d_dev_lpmsusp+0x7c>)
    d24c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d24e:	f240 2101 	movw	r1, #513	; 0x201
    d252:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d256:	4b18      	ldr	r3, [pc, #96]	; (d2b8 <_usb_d_dev_lpmsusp+0x80>)
    d258:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d25a:	2170      	movs	r1, #112	; 0x70
    d25c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d260:	4b16      	ldr	r3, [pc, #88]	; (d2bc <_usb_d_dev_lpmsusp+0x84>)
    d262:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    d264:	2300      	movs	r3, #0
    d266:	73fb      	strb	r3, [r7, #15]
    d268:	e018      	b.n	d29c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    d26a:	7bfb      	ldrb	r3, [r7, #15]
    d26c:	015b      	lsls	r3, r3, #5
    d26e:	4a14      	ldr	r2, [pc, #80]	; (d2c0 <_usb_d_dev_lpmsusp+0x88>)
    d270:	4413      	add	r3, r2
    d272:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    d274:	687b      	ldr	r3, [r7, #4]
    d276:	891b      	ldrh	r3, [r3, #8]
    d278:	f3c3 0303 	ubfx	r3, r3, #0, #4
    d27c:	b2db      	uxtb	r3, r3
    d27e:	2b03      	cmp	r3, #3
    d280:	d109      	bne.n	d296 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    d282:	687b      	ldr	r3, [r7, #4]
    d284:	891b      	ldrh	r3, [r3, #8]
    d286:	f3c3 130a 	ubfx	r3, r3, #4, #11
    d28a:	b29b      	uxth	r3, r3
    d28c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    d28e:	687b      	ldr	r3, [r7, #4]
    d290:	2200      	movs	r2, #0
    d292:	811a      	strh	r2, [r3, #8]
			break;
    d294:	e005      	b.n	d2a2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    d296:	7bfb      	ldrb	r3, [r7, #15]
    d298:	3301      	adds	r3, #1
    d29a:	73fb      	strb	r3, [r7, #15]
    d29c:	7bfb      	ldrb	r3, [r7, #15]
    d29e:	2b03      	cmp	r3, #3
    d2a0:	d9e3      	bls.n	d26a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    d2a2:	4b08      	ldr	r3, [pc, #32]	; (d2c4 <_usb_d_dev_lpmsusp+0x8c>)
    d2a4:	685b      	ldr	r3, [r3, #4]
    d2a6:	68b9      	ldr	r1, [r7, #8]
    d2a8:	2003      	movs	r0, #3
    d2aa:	4798      	blx	r3
}
    d2ac:	bf00      	nop
    d2ae:	3710      	adds	r7, #16
    d2b0:	46bd      	mov	sp, r7
    d2b2:	bd80      	pop	{r7, pc}
    d2b4:	0000c88f 	.word	0x0000c88f
    d2b8:	0000c8e5 	.word	0x0000c8e5
    d2bc:	0000c8ad 	.word	0x0000c8ad
    d2c0:	20001edc 	.word	0x20001edc
    d2c4:	20001e14 	.word	0x20001e14

0000d2c8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    d2c8:	b580      	push	{r7, lr}
    d2ca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    d2cc:	2180      	movs	r1, #128	; 0x80
    d2ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d2d2:	4b04      	ldr	r3, [pc, #16]	; (d2e4 <_usb_d_dev_ramerr+0x1c>)
    d2d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    d2d6:	4b04      	ldr	r3, [pc, #16]	; (d2e8 <_usb_d_dev_ramerr+0x20>)
    d2d8:	685b      	ldr	r3, [r3, #4]
    d2da:	2100      	movs	r1, #0
    d2dc:	2005      	movs	r0, #5
    d2de:	4798      	blx	r3
}
    d2e0:	bf00      	nop
    d2e2:	bd80      	pop	{r7, pc}
    d2e4:	0000c88f 	.word	0x0000c88f
    d2e8:	20001e14 	.word	0x20001e14

0000d2ec <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    d2ec:	b580      	push	{r7, lr}
    d2ee:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d2f0:	2170      	movs	r1, #112	; 0x70
    d2f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d2f6:	4b0b      	ldr	r3, [pc, #44]	; (d324 <_usb_d_dev_wakeup+0x38>)
    d2f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d2fa:	2170      	movs	r1, #112	; 0x70
    d2fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d300:	4b09      	ldr	r3, [pc, #36]	; (d328 <_usb_d_dev_wakeup+0x3c>)
    d302:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d304:	f240 2101 	movw	r1, #513	; 0x201
    d308:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d30c:	4b07      	ldr	r3, [pc, #28]	; (d32c <_usb_d_dev_wakeup+0x40>)
    d30e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    d310:	2000      	movs	r0, #0
    d312:	4b07      	ldr	r3, [pc, #28]	; (d330 <_usb_d_dev_wakeup+0x44>)
    d314:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    d316:	4b07      	ldr	r3, [pc, #28]	; (d334 <_usb_d_dev_wakeup+0x48>)
    d318:	685b      	ldr	r3, [r3, #4]
    d31a:	2100      	movs	r1, #0
    d31c:	2002      	movs	r0, #2
    d31e:	4798      	blx	r3
}
    d320:	bf00      	nop
    d322:	bd80      	pop	{r7, pc}
    d324:	0000c88f 	.word	0x0000c88f
    d328:	0000c8e5 	.word	0x0000c8e5
    d32c:	0000c8ad 	.word	0x0000c8ad
    d330:	0000cb8d 	.word	0x0000cb8d
    d334:	20001e14 	.word	0x20001e14

0000d338 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    d338:	b580      	push	{r7, lr}
    d33a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    d33c:	2200      	movs	r2, #0
    d33e:	2100      	movs	r1, #0
    d340:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d344:	4b0d      	ldr	r3, [pc, #52]	; (d37c <_usb_d_dev_reset+0x44>)
    d346:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    d348:	2108      	movs	r1, #8
    d34a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d34e:	4b0c      	ldr	r3, [pc, #48]	; (d380 <_usb_d_dev_reset+0x48>)
    d350:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d352:	2170      	movs	r1, #112	; 0x70
    d354:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d358:	4b0a      	ldr	r3, [pc, #40]	; (d384 <_usb_d_dev_reset+0x4c>)
    d35a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d35c:	f240 2101 	movw	r1, #513	; 0x201
    d360:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d364:	4b08      	ldr	r3, [pc, #32]	; (d388 <_usb_d_dev_reset+0x50>)
    d366:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    d368:	4b08      	ldr	r3, [pc, #32]	; (d38c <_usb_d_dev_reset+0x54>)
    d36a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    d36c:	4b08      	ldr	r3, [pc, #32]	; (d390 <_usb_d_dev_reset+0x58>)
    d36e:	685b      	ldr	r3, [r3, #4]
    d370:	2100      	movs	r1, #0
    d372:	2001      	movs	r0, #1
    d374:	4798      	blx	r3
}
    d376:	bf00      	nop
    d378:	bd80      	pop	{r7, pc}
    d37a:	bf00      	nop
    d37c:	0000c825 	.word	0x0000c825
    d380:	0000c88f 	.word	0x0000c88f
    d384:	0000c8e5 	.word	0x0000c8e5
    d388:	0000c8ad 	.word	0x0000c8ad
    d38c:	0000def5 	.word	0x0000def5
    d390:	20001e14 	.word	0x20001e14

0000d394 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    d394:	b580      	push	{r7, lr}
    d396:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d398:	f240 2101 	movw	r1, #513	; 0x201
    d39c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3a0:	4b09      	ldr	r3, [pc, #36]	; (d3c8 <_usb_d_dev_suspend+0x34>)
    d3a2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d3a4:	f240 2101 	movw	r1, #513	; 0x201
    d3a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3ac:	4b07      	ldr	r3, [pc, #28]	; (d3cc <_usb_d_dev_suspend+0x38>)
    d3ae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d3b0:	2170      	movs	r1, #112	; 0x70
    d3b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3b6:	4b06      	ldr	r3, [pc, #24]	; (d3d0 <_usb_d_dev_suspend+0x3c>)
    d3b8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    d3ba:	4b06      	ldr	r3, [pc, #24]	; (d3d4 <_usb_d_dev_suspend+0x40>)
    d3bc:	685b      	ldr	r3, [r3, #4]
    d3be:	2100      	movs	r1, #0
    d3c0:	2004      	movs	r0, #4
    d3c2:	4798      	blx	r3
}
    d3c4:	bf00      	nop
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	0000c88f 	.word	0x0000c88f
    d3cc:	0000c8e5 	.word	0x0000c8e5
    d3d0:	0000c8ad 	.word	0x0000c8ad
    d3d4:	20001e14 	.word	0x20001e14

0000d3d8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    d3d8:	b580      	push	{r7, lr}
    d3da:	b082      	sub	sp, #8
    d3dc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    d3de:	2301      	movs	r3, #1
    d3e0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    d3e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3e6:	4b22      	ldr	r3, [pc, #136]	; (d470 <_usb_d_dev_handle_nep+0x98>)
    d3e8:	4798      	blx	r3
    d3ea:	4603      	mov	r3, r0
    d3ec:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    d3ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3f2:	4b20      	ldr	r3, [pc, #128]	; (d474 <_usb_d_dev_handle_nep+0x9c>)
    d3f4:	4798      	blx	r3
    d3f6:	4603      	mov	r3, r0
    d3f8:	461a      	mov	r2, r3
    d3fa:	88bb      	ldrh	r3, [r7, #4]
    d3fc:	4013      	ands	r3, r2
    d3fe:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    d400:	88bb      	ldrh	r3, [r7, #4]
    d402:	f003 0304 	and.w	r3, r3, #4
    d406:	2b00      	cmp	r3, #0
    d408:	d003      	beq.n	d412 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    d40a:	4b1b      	ldr	r3, [pc, #108]	; (d478 <_usb_d_dev_handle_nep+0xa0>)
    d40c:	4798      	blx	r3
		return true;
    d40e:	2301      	movs	r3, #1
    d410:	e02a      	b.n	d468 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    d412:	88bb      	ldrh	r3, [r7, #4]
    d414:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d418:	2b00      	cmp	r3, #0
    d41a:	d002      	beq.n	d422 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    d41c:	4b17      	ldr	r3, [pc, #92]	; (d47c <_usb_d_dev_handle_nep+0xa4>)
    d41e:	4798      	blx	r3
    d420:	e021      	b.n	d466 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    d422:	88bb      	ldrh	r3, [r7, #4]
    d424:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d428:	2b00      	cmp	r3, #0
    d42a:	d002      	beq.n	d432 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    d42c:	4b14      	ldr	r3, [pc, #80]	; (d480 <_usb_d_dev_handle_nep+0xa8>)
    d42e:	4798      	blx	r3
    d430:	e019      	b.n	d466 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    d432:	88bb      	ldrh	r3, [r7, #4]
    d434:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d438:	2b00      	cmp	r3, #0
    d43a:	d002      	beq.n	d442 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    d43c:	4b11      	ldr	r3, [pc, #68]	; (d484 <_usb_d_dev_handle_nep+0xac>)
    d43e:	4798      	blx	r3
    d440:	e011      	b.n	d466 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    d442:	88bb      	ldrh	r3, [r7, #4]
    d444:	f003 0308 	and.w	r3, r3, #8
    d448:	2b00      	cmp	r3, #0
    d44a:	d002      	beq.n	d452 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    d44c:	4b0e      	ldr	r3, [pc, #56]	; (d488 <_usb_d_dev_handle_nep+0xb0>)
    d44e:	4798      	blx	r3
    d450:	e009      	b.n	d466 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    d452:	88bb      	ldrh	r3, [r7, #4]
    d454:	f003 0301 	and.w	r3, r3, #1
    d458:	2b00      	cmp	r3, #0
    d45a:	d002      	beq.n	d462 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    d45c:	4b0b      	ldr	r3, [pc, #44]	; (d48c <_usb_d_dev_handle_nep+0xb4>)
    d45e:	4798      	blx	r3
    d460:	e001      	b.n	d466 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    d462:	2300      	movs	r3, #0
    d464:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    d466:	79fb      	ldrb	r3, [r7, #7]
}
    d468:	4618      	mov	r0, r3
    d46a:	3708      	adds	r7, #8
    d46c:	46bd      	mov	sp, r7
    d46e:	bd80      	pop	{r7, pc}
    d470:	0000c875 	.word	0x0000c875
    d474:	0000c8cb 	.word	0x0000c8cb
    d478:	0000d219 	.word	0x0000d219
    d47c:	0000d239 	.word	0x0000d239
    d480:	0000d2c9 	.word	0x0000d2c9
    d484:	0000d2ed 	.word	0x0000d2ed
    d488:	0000d339 	.word	0x0000d339
    d48c:	0000d395 	.word	0x0000d395

0000d490 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d490:	b590      	push	{r4, r7, lr}
    d492:	b089      	sub	sp, #36	; 0x24
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    d498:	460b      	mov	r3, r1
    d49a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    d49c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d4a0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	7c9b      	ldrb	r3, [r3, #18]
    d4a6:	f003 030f 	and.w	r3, r3, #15
    d4aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d4ac:	7dfb      	ldrb	r3, [r7, #23]
    d4ae:	015b      	lsls	r3, r3, #5
    d4b0:	4a73      	ldr	r2, [pc, #460]	; (d680 <_usb_d_dev_in_next+0x1f0>)
    d4b2:	4413      	add	r3, r2
    d4b4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    d4b6:	78fb      	ldrb	r3, [r7, #3]
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	d006      	beq.n	d4ca <_usb_d_dev_in_next+0x3a>
    d4bc:	693b      	ldr	r3, [r7, #16]
    d4be:	3310      	adds	r3, #16
    d4c0:	685b      	ldr	r3, [r3, #4]
    d4c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d4c6:	b29b      	uxth	r3, r3
    d4c8:	e000      	b.n	d4cc <_usb_d_dev_in_next+0x3c>
    d4ca:	2300      	movs	r3, #0
    d4cc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	8a1b      	ldrh	r3, [r3, #16]
    d4d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d4d6:	4293      	cmp	r3, r2
    d4d8:	d103      	bne.n	d4e2 <_usb_d_dev_in_next+0x52>
    d4da:	687b      	ldr	r3, [r7, #4]
    d4dc:	8a1b      	ldrh	r3, [r3, #16]
    d4de:	b21b      	sxth	r3, r3
    d4e0:	e004      	b.n	d4ec <_usb_d_dev_in_next+0x5c>
    d4e2:	687b      	ldr	r3, [r7, #4]
    d4e4:	8a1b      	ldrh	r3, [r3, #16]
    d4e6:	3b01      	subs	r3, #1
    d4e8:	b29b      	uxth	r3, r3
    d4ea:	b21b      	sxth	r3, r3
    d4ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    d4f0:	4013      	ands	r3, r2
    d4f2:	b21b      	sxth	r3, r3
    d4f4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    d4f6:	2300      	movs	r3, #0
    d4f8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	7cdb      	ldrb	r3, [r3, #19]
    d4fe:	f003 0307 	and.w	r3, r3, #7
    d502:	b2db      	uxtb	r3, r3
    d504:	2b01      	cmp	r3, #1
    d506:	bf0c      	ite	eq
    d508:	2301      	moveq	r3, #1
    d50a:	2300      	movne	r3, #0
    d50c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    d50e:	78fb      	ldrb	r3, [r7, #3]
    d510:	2b00      	cmp	r3, #0
    d512:	d004      	beq.n	d51e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    d514:	7dfb      	ldrb	r3, [r7, #23]
    d516:	2101      	movs	r1, #1
    d518:	4618      	mov	r0, r3
    d51a:	4b5a      	ldr	r3, [pc, #360]	; (d684 <_usb_d_dev_in_next+0x1f4>)
    d51c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    d51e:	687b      	ldr	r3, [r7, #4]
    d520:	689a      	ldr	r2, [r3, #8]
    d522:	89fb      	ldrh	r3, [r7, #14]
    d524:	441a      	add	r2, r3
    d526:	687b      	ldr	r3, [r7, #4]
    d528:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    d52a:	687b      	ldr	r3, [r7, #4]
    d52c:	689a      	ldr	r2, [r3, #8]
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	685b      	ldr	r3, [r3, #4]
    d532:	429a      	cmp	r2, r3
    d534:	d243      	bcs.n	d5be <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    d536:	687b      	ldr	r3, [r7, #4]
    d538:	685b      	ldr	r3, [r3, #4]
    d53a:	b29a      	uxth	r2, r3
    d53c:	687b      	ldr	r3, [r7, #4]
    d53e:	689b      	ldr	r3, [r3, #8]
    d540:	b29b      	uxth	r3, r3
    d542:	1ad3      	subs	r3, r2, r3
    d544:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    d546:	687b      	ldr	r3, [r7, #4]
    d548:	7cdb      	ldrb	r3, [r3, #19]
    d54a:	f003 0320 	and.w	r3, r3, #32
    d54e:	b2db      	uxtb	r3, r3
    d550:	2b00      	cmp	r3, #0
    d552:	d01b      	beq.n	d58c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	8a1b      	ldrh	r3, [r3, #16]
    d558:	8bfa      	ldrh	r2, [r7, #30]
    d55a:	429a      	cmp	r2, r3
    d55c:	d902      	bls.n	d564 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    d55e:	687b      	ldr	r3, [r7, #4]
    d560:	8a1b      	ldrh	r3, [r3, #16]
    d562:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	68d8      	ldr	r0, [r3, #12]
    d568:	687b      	ldr	r3, [r7, #4]
    d56a:	681a      	ldr	r2, [r3, #0]
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	689b      	ldr	r3, [r3, #8]
    d570:	4413      	add	r3, r2
    d572:	8bfa      	ldrh	r2, [r7, #30]
    d574:	4619      	mov	r1, r3
    d576:	4b44      	ldr	r3, [pc, #272]	; (d688 <_usb_d_dev_in_next+0x1f8>)
    d578:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    d57a:	687b      	ldr	r3, [r7, #4]
    d57c:	68db      	ldr	r3, [r3, #12]
    d57e:	461a      	mov	r2, r3
    d580:	7dfb      	ldrb	r3, [r7, #23]
    d582:	2101      	movs	r1, #1
    d584:	4618      	mov	r0, r3
    d586:	4b41      	ldr	r3, [pc, #260]	; (d68c <_usb_d_dev_in_next+0x1fc>)
    d588:	4798      	blx	r3
    d58a:	e011      	b.n	d5b0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    d58c:	8bfb      	ldrh	r3, [r7, #30]
    d58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d592:	d902      	bls.n	d59a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    d594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d598:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	681a      	ldr	r2, [r3, #0]
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	689b      	ldr	r3, [r3, #8]
    d5a2:	4413      	add	r3, r2
    d5a4:	461a      	mov	r2, r3
    d5a6:	7dfb      	ldrb	r3, [r7, #23]
    d5a8:	2101      	movs	r1, #1
    d5aa:	4618      	mov	r0, r3
    d5ac:	4b37      	ldr	r3, [pc, #220]	; (d68c <_usb_d_dev_in_next+0x1fc>)
    d5ae:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    d5b0:	8bfa      	ldrh	r2, [r7, #30]
    d5b2:	7df8      	ldrb	r0, [r7, #23]
    d5b4:	2300      	movs	r3, #0
    d5b6:	2101      	movs	r1, #1
    d5b8:	4c35      	ldr	r4, [pc, #212]	; (d690 <_usb_d_dev_in_next+0x200>)
    d5ba:	47a0      	blx	r4
		goto _in_tx_exec;
    d5bc:	e041      	b.n	d642 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    d5be:	687b      	ldr	r3, [r7, #4]
    d5c0:	7cdb      	ldrb	r3, [r3, #19]
    d5c2:	f003 0310 	and.w	r3, r3, #16
    d5c6:	b2db      	uxtb	r3, r3
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	d00b      	beq.n	d5e4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    d5cc:	687a      	ldr	r2, [r7, #4]
    d5ce:	7cd3      	ldrb	r3, [r2, #19]
    d5d0:	f36f 1304 	bfc	r3, #4, #1
    d5d4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    d5d6:	7df8      	ldrb	r0, [r7, #23]
    d5d8:	2300      	movs	r3, #0
    d5da:	2200      	movs	r2, #0
    d5dc:	2101      	movs	r1, #1
    d5de:	4c2c      	ldr	r4, [pc, #176]	; (d690 <_usb_d_dev_in_next+0x200>)
    d5e0:	47a0      	blx	r4
		goto _in_tx_exec;
    d5e2:	e02e      	b.n	d642 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    d5e4:	7afb      	ldrb	r3, [r7, #11]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d006      	beq.n	d5f8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    d5ea:	7dfb      	ldrb	r3, [r7, #23]
    d5ec:	224b      	movs	r2, #75	; 0x4b
    d5ee:	4619      	mov	r1, r3
    d5f0:	69b8      	ldr	r0, [r7, #24]
    d5f2:	4b28      	ldr	r3, [pc, #160]	; (d694 <_usb_d_dev_in_next+0x204>)
    d5f4:	4798      	blx	r3
    d5f6:	e005      	b.n	d604 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    d5f8:	7dfb      	ldrb	r3, [r7, #23]
    d5fa:	224a      	movs	r2, #74	; 0x4a
    d5fc:	4619      	mov	r1, r3
    d5fe:	69b8      	ldr	r0, [r7, #24]
    d600:	4b24      	ldr	r3, [pc, #144]	; (d694 <_usb_d_dev_in_next+0x204>)
    d602:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    d604:	687b      	ldr	r3, [r7, #4]
    d606:	8a1b      	ldrh	r3, [r3, #16]
    d608:	89ba      	ldrh	r2, [r7, #12]
    d60a:	429a      	cmp	r2, r3
    d60c:	d114      	bne.n	d638 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    d60e:	687a      	ldr	r2, [r7, #4]
    d610:	7cd3      	ldrb	r3, [r2, #19]
    d612:	f36f 1386 	bfc	r3, #6, #1
    d616:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    d618:	4b1f      	ldr	r3, [pc, #124]	; (d698 <_usb_d_dev_in_next+0x208>)
    d61a:	68db      	ldr	r3, [r3, #12]
    d61c:	687a      	ldr	r2, [r7, #4]
    d61e:	7c90      	ldrb	r0, [r2, #18]
    d620:	687a      	ldr	r2, [r7, #4]
    d622:	6892      	ldr	r2, [r2, #8]
    d624:	4611      	mov	r1, r2
    d626:	4798      	blx	r3
    d628:	4603      	mov	r3, r0
    d62a:	2b00      	cmp	r3, #0
    d62c:	d124      	bne.n	d678 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    d62e:	687a      	ldr	r2, [r7, #4]
    d630:	7cd3      	ldrb	r3, [r2, #19]
    d632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d636:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d638:	2100      	movs	r1, #0
    d63a:	6878      	ldr	r0, [r7, #4]
    d63c:	4b17      	ldr	r3, [pc, #92]	; (d69c <_usb_d_dev_in_next+0x20c>)
    d63e:	4798      	blx	r3
	return;
    d640:	e01b      	b.n	d67a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    d642:	78fb      	ldrb	r3, [r7, #3]
    d644:	f083 0301 	eor.w	r3, r3, #1
    d648:	b2db      	uxtb	r3, r3
    d64a:	2b00      	cmp	r3, #0
    d64c:	d00d      	beq.n	d66a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    d64e:	7afb      	ldrb	r3, [r7, #11]
    d650:	2b00      	cmp	r3, #0
    d652:	d002      	beq.n	d65a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    d654:	234e      	movs	r3, #78	; 0x4e
    d656:	777b      	strb	r3, [r7, #29]
    d658:	e001      	b.n	d65e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    d65a:	234a      	movs	r3, #74	; 0x4a
    d65c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    d65e:	7f7a      	ldrb	r2, [r7, #29]
    d660:	7dfb      	ldrb	r3, [r7, #23]
    d662:	4619      	mov	r1, r3
    d664:	69b8      	ldr	r0, [r7, #24]
    d666:	4b0e      	ldr	r3, [pc, #56]	; (d6a0 <_usb_d_dev_in_next+0x210>)
    d668:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    d66a:	7dfb      	ldrb	r3, [r7, #23]
    d66c:	2201      	movs	r2, #1
    d66e:	2101      	movs	r1, #1
    d670:	4618      	mov	r0, r3
    d672:	4b0c      	ldr	r3, [pc, #48]	; (d6a4 <_usb_d_dev_in_next+0x214>)
    d674:	4798      	blx	r3
    d676:	e000      	b.n	d67a <_usb_d_dev_in_next+0x1ea>
			return;
    d678:	bf00      	nop
}
    d67a:	3724      	adds	r7, #36	; 0x24
    d67c:	46bd      	mov	sp, r7
    d67e:	bd90      	pop	{r4, r7, pc}
    d680:	20001edc 	.word	0x20001edc
    d684:	0000ce89 	.word	0x0000ce89
    d688:	00011b19 	.word	0x00011b19
    d68c:	0000ceb5 	.word	0x0000ceb5
    d690:	0000cffd 	.word	0x0000cffd
    d694:	0000c795 	.word	0x0000c795
    d698:	20001e14 	.word	0x20001e14
    d69c:	0000e7b9 	.word	0x0000e7b9
    d6a0:	0000c769 	.word	0x0000c769
    d6a4:	0000d0b5 	.word	0x0000d0b5

0000d6a8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d6a8:	b590      	push	{r4, r7, lr}
    d6aa:	b08b      	sub	sp, #44	; 0x2c
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	6078      	str	r0, [r7, #4]
    d6b0:	460b      	mov	r3, r1
    d6b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    d6b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d6b8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    d6ba:	687b      	ldr	r3, [r7, #4]
    d6bc:	7c9b      	ldrb	r3, [r3, #18]
    d6be:	f003 030f 	and.w	r3, r3, #15
    d6c2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d6c4:	7ffb      	ldrb	r3, [r7, #31]
    d6c6:	015b      	lsls	r3, r3, #5
    d6c8:	4a94      	ldr	r2, [pc, #592]	; (d91c <_usb_d_dev_out_next+0x274>)
    d6ca:	4413      	add	r3, r2
    d6cc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    d6ce:	78fb      	ldrb	r3, [r7, #3]
    d6d0:	2b00      	cmp	r3, #0
    d6d2:	d005      	beq.n	d6e0 <_usb_d_dev_out_next+0x38>
    d6d4:	69bb      	ldr	r3, [r7, #24]
    d6d6:	685b      	ldr	r3, [r3, #4]
    d6d8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    d6dc:	b29b      	uxth	r3, r3
    d6de:	e000      	b.n	d6e2 <_usb_d_dev_out_next+0x3a>
    d6e0:	2300      	movs	r3, #0
    d6e2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    d6e4:	78fb      	ldrb	r3, [r7, #3]
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d005      	beq.n	d6f6 <_usb_d_dev_out_next+0x4e>
    d6ea:	69bb      	ldr	r3, [r7, #24]
    d6ec:	685b      	ldr	r3, [r3, #4]
    d6ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d6f2:	b29b      	uxth	r3, r3
    d6f4:	e000      	b.n	d6f8 <_usb_d_dev_out_next+0x50>
    d6f6:	2300      	movs	r3, #0
    d6f8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	8a1b      	ldrh	r3, [r3, #16]
    d6fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d702:	4293      	cmp	r3, r2
    d704:	d004      	beq.n	d710 <_usb_d_dev_out_next+0x68>
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	8a1b      	ldrh	r3, [r3, #16]
    d70a:	3b01      	subs	r3, #1
    d70c:	b29b      	uxth	r3, r3
    d70e:	e001      	b.n	d714 <_usb_d_dev_out_next+0x6c>
    d710:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d714:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    d716:	8aba      	ldrh	r2, [r7, #20]
    d718:	8a7b      	ldrh	r3, [r7, #18]
    d71a:	4013      	ands	r3, r2
    d71c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d71e:	687b      	ldr	r3, [r7, #4]
    d720:	7cdb      	ldrb	r3, [r3, #19]
    d722:	f003 0307 	and.w	r3, r3, #7
    d726:	b2db      	uxtb	r3, r3
    d728:	2b01      	cmp	r3, #1
    d72a:	bf0c      	ite	eq
    d72c:	2301      	moveq	r3, #1
    d72e:	2300      	movne	r3, #0
    d730:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    d732:	78fb      	ldrb	r3, [r7, #3]
    d734:	2b00      	cmp	r3, #0
    d736:	d004      	beq.n	d742 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    d738:	7ffb      	ldrb	r3, [r7, #31]
    d73a:	2100      	movs	r1, #0
    d73c:	4618      	mov	r0, r3
    d73e:	4b78      	ldr	r3, [pc, #480]	; (d920 <_usb_d_dev_out_next+0x278>)
    d740:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    d742:	687b      	ldr	r3, [r7, #4]
    d744:	7cdb      	ldrb	r3, [r3, #19]
    d746:	f003 0320 	and.w	r3, r3, #32
    d74a:	b2db      	uxtb	r3, r3
    d74c:	2b00      	cmp	r3, #0
    d74e:	d01c      	beq.n	d78a <_usb_d_dev_out_next+0xe2>
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	685b      	ldr	r3, [r3, #4]
    d754:	2b00      	cmp	r3, #0
    d756:	d018      	beq.n	d78a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    d758:	687b      	ldr	r3, [r7, #4]
    d75a:	685b      	ldr	r3, [r3, #4]
    d75c:	b29a      	uxth	r2, r3
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	689b      	ldr	r3, [r3, #8]
    d762:	b29b      	uxth	r3, r3
    d764:	1ad3      	subs	r3, r2, r3
    d766:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    d768:	687b      	ldr	r3, [r7, #4]
    d76a:	681a      	ldr	r2, [r3, #0]
    d76c:	687b      	ldr	r3, [r7, #4]
    d76e:	689b      	ldr	r3, [r3, #8]
    d770:	18d0      	adds	r0, r2, r3
    d772:	687b      	ldr	r3, [r7, #4]
    d774:	68d9      	ldr	r1, [r3, #12]
    d776:	89ba      	ldrh	r2, [r7, #12]
    d778:	8a3b      	ldrh	r3, [r7, #16]
    d77a:	429a      	cmp	r2, r3
    d77c:	d901      	bls.n	d782 <_usb_d_dev_out_next+0xda>
    d77e:	8a3b      	ldrh	r3, [r7, #16]
    d780:	e000      	b.n	d784 <_usb_d_dev_out_next+0xdc>
    d782:	89bb      	ldrh	r3, [r7, #12]
    d784:	461a      	mov	r2, r3
    d786:	4b67      	ldr	r3, [pc, #412]	; (d924 <_usb_d_dev_out_next+0x27c>)
    d788:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    d78a:	687b      	ldr	r3, [r7, #4]
    d78c:	685b      	ldr	r3, [r3, #4]
    d78e:	2b00      	cmp	r3, #0
    d790:	d121      	bne.n	d7d6 <_usb_d_dev_out_next+0x12e>
    d792:	687b      	ldr	r3, [r7, #4]
    d794:	7cdb      	ldrb	r3, [r3, #19]
    d796:	f003 0310 	and.w	r3, r3, #16
    d79a:	b2db      	uxtb	r3, r3
    d79c:	2b00      	cmp	r3, #0
    d79e:	d01a      	beq.n	d7d6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    d7a0:	687a      	ldr	r2, [r7, #4]
    d7a2:	7cd3      	ldrb	r3, [r2, #19]
    d7a4:	f36f 1304 	bfc	r3, #4, #1
    d7a8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    d7aa:	687a      	ldr	r2, [r7, #4]
    d7ac:	7cd3      	ldrb	r3, [r2, #19]
    d7ae:	f043 0320 	orr.w	r3, r3, #32
    d7b2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d7b4:	687b      	ldr	r3, [r7, #4]
    d7b6:	68db      	ldr	r3, [r3, #12]
    d7b8:	461a      	mov	r2, r3
    d7ba:	7ffb      	ldrb	r3, [r7, #31]
    d7bc:	2100      	movs	r1, #0
    d7be:	4618      	mov	r0, r3
    d7c0:	4b59      	ldr	r3, [pc, #356]	; (d928 <_usb_d_dev_out_next+0x280>)
    d7c2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d7c4:	687b      	ldr	r3, [r7, #4]
    d7c6:	8a1b      	ldrh	r3, [r3, #16]
    d7c8:	461a      	mov	r2, r3
    d7ca:	7ff8      	ldrb	r0, [r7, #31]
    d7cc:	2300      	movs	r3, #0
    d7ce:	2100      	movs	r1, #0
    d7d0:	4c56      	ldr	r4, [pc, #344]	; (d92c <_usb_d_dev_out_next+0x284>)
    d7d2:	47a0      	blx	r4
		goto _out_rx_exec;
    d7d4:	e090      	b.n	d8f8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    d7d6:	78fb      	ldrb	r3, [r7, #3]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d010      	beq.n	d7fe <_usb_d_dev_out_next+0x156>
    d7dc:	687b      	ldr	r3, [r7, #4]
    d7de:	8a1b      	ldrh	r3, [r3, #16]
    d7e0:	8a3a      	ldrh	r2, [r7, #16]
    d7e2:	429a      	cmp	r2, r3
    d7e4:	d20b      	bcs.n	d7fe <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    d7e6:	687a      	ldr	r2, [r7, #4]
    d7e8:	7cd3      	ldrb	r3, [r2, #19]
    d7ea:	f36f 1304 	bfc	r3, #4, #1
    d7ee:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	689a      	ldr	r2, [r3, #8]
    d7f4:	8abb      	ldrh	r3, [r7, #20]
    d7f6:	441a      	add	r2, r3
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	609a      	str	r2, [r3, #8]
    d7fc:	e05c      	b.n	d8b8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    d7fe:	687b      	ldr	r3, [r7, #4]
    d800:	689a      	ldr	r2, [r3, #8]
    d802:	8afb      	ldrh	r3, [r7, #22]
    d804:	441a      	add	r2, r3
    d806:	687b      	ldr	r3, [r7, #4]
    d808:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    d80a:	687b      	ldr	r3, [r7, #4]
    d80c:	689a      	ldr	r2, [r3, #8]
    d80e:	687b      	ldr	r3, [r7, #4]
    d810:	685b      	ldr	r3, [r3, #4]
    d812:	429a      	cmp	r2, r3
    d814:	d250      	bcs.n	d8b8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	685b      	ldr	r3, [r3, #4]
    d81a:	b29a      	uxth	r2, r3
    d81c:	687b      	ldr	r3, [r7, #4]
    d81e:	689b      	ldr	r3, [r3, #8]
    d820:	b29b      	uxth	r3, r3
    d822:	1ad3      	subs	r3, r2, r3
    d824:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    d826:	687b      	ldr	r3, [r7, #4]
    d828:	7cdb      	ldrb	r3, [r3, #19]
    d82a:	f003 0320 	and.w	r3, r3, #32
    d82e:	b2db      	uxtb	r3, r3
    d830:	2b00      	cmp	r3, #0
    d832:	d010      	beq.n	d856 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    d834:	687b      	ldr	r3, [r7, #4]
    d836:	8a1b      	ldrh	r3, [r3, #16]
    d838:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d83a:	429a      	cmp	r2, r3
    d83c:	d902      	bls.n	d844 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    d83e:	687b      	ldr	r3, [r7, #4]
    d840:	8a1b      	ldrh	r3, [r3, #16]
    d842:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d844:	687b      	ldr	r3, [r7, #4]
    d846:	68db      	ldr	r3, [r3, #12]
    d848:	461a      	mov	r2, r3
    d84a:	7ffb      	ldrb	r3, [r7, #31]
    d84c:	2100      	movs	r1, #0
    d84e:	4618      	mov	r0, r3
    d850:	4b35      	ldr	r3, [pc, #212]	; (d928 <_usb_d_dev_out_next+0x280>)
    d852:	4798      	blx	r3
    d854:	e029      	b.n	d8aa <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    d856:	687b      	ldr	r3, [r7, #4]
    d858:	8a1b      	ldrh	r3, [r3, #16]
    d85a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d85c:	429a      	cmp	r2, r3
    d85e:	d90f      	bls.n	d880 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    d860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    d862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d866:	d903      	bls.n	d870 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    d868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d86c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d86e:	e011      	b.n	d894 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    d870:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d872:	8a7b      	ldrh	r3, [r7, #18]
    d874:	4013      	ands	r3, r2
    d876:	b29b      	uxth	r3, r3
    d878:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d87a:	1ad3      	subs	r3, r2, r3
    d87c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d87e:	e009      	b.n	d894 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	8a1b      	ldrh	r3, [r3, #16]
    d884:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d886:	429a      	cmp	r2, r3
    d888:	d204      	bcs.n	d894 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    d88a:	687a      	ldr	r2, [r7, #4]
    d88c:	7cd3      	ldrb	r3, [r2, #19]
    d88e:	f043 0320 	orr.w	r3, r3, #32
    d892:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d894:	687b      	ldr	r3, [r7, #4]
    d896:	681a      	ldr	r2, [r3, #0]
    d898:	687b      	ldr	r3, [r7, #4]
    d89a:	689b      	ldr	r3, [r3, #8]
    d89c:	4413      	add	r3, r2
    d89e:	461a      	mov	r2, r3
    d8a0:	7ffb      	ldrb	r3, [r7, #31]
    d8a2:	2100      	movs	r1, #0
    d8a4:	4618      	mov	r0, r3
    d8a6:	4b20      	ldr	r3, [pc, #128]	; (d928 <_usb_d_dev_out_next+0x280>)
    d8a8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    d8aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d8ac:	7ff8      	ldrb	r0, [r7, #31]
    d8ae:	2300      	movs	r3, #0
    d8b0:	2100      	movs	r1, #0
    d8b2:	4c1e      	ldr	r4, [pc, #120]	; (d92c <_usb_d_dev_out_next+0x284>)
    d8b4:	47a0      	blx	r4
			goto _out_rx_exec;
    d8b6:	e01f      	b.n	d8f8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    d8b8:	7bfb      	ldrb	r3, [r7, #15]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d006      	beq.n	d8cc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    d8be:	7ffb      	ldrb	r3, [r7, #31]
    d8c0:	222d      	movs	r2, #45	; 0x2d
    d8c2:	4619      	mov	r1, r3
    d8c4:	6a38      	ldr	r0, [r7, #32]
    d8c6:	4b1a      	ldr	r3, [pc, #104]	; (d930 <_usb_d_dev_out_next+0x288>)
    d8c8:	4798      	blx	r3
    d8ca:	e005      	b.n	d8d8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    d8cc:	7ffb      	ldrb	r3, [r7, #31]
    d8ce:	2225      	movs	r2, #37	; 0x25
    d8d0:	4619      	mov	r1, r3
    d8d2:	6a38      	ldr	r0, [r7, #32]
    d8d4:	4b16      	ldr	r3, [pc, #88]	; (d930 <_usb_d_dev_out_next+0x288>)
    d8d6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    d8d8:	7ffb      	ldrb	r3, [r7, #31]
    d8da:	2b00      	cmp	r3, #0
    d8dc:	d107      	bne.n	d8ee <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	68db      	ldr	r3, [r3, #12]
    d8e2:	461a      	mov	r2, r3
    d8e4:	7ffb      	ldrb	r3, [r7, #31]
    d8e6:	2100      	movs	r1, #0
    d8e8:	4618      	mov	r0, r3
    d8ea:	4b0f      	ldr	r3, [pc, #60]	; (d928 <_usb_d_dev_out_next+0x280>)
    d8ec:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d8ee:	2100      	movs	r1, #0
    d8f0:	6878      	ldr	r0, [r7, #4]
    d8f2:	4b10      	ldr	r3, [pc, #64]	; (d934 <_usb_d_dev_out_next+0x28c>)
    d8f4:	4798      	blx	r3
	return;
    d8f6:	e031      	b.n	d95c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    d8f8:	78fb      	ldrb	r3, [r7, #3]
    d8fa:	f083 0301 	eor.w	r3, r3, #1
    d8fe:	b2db      	uxtb	r3, r3
    d900:	2b00      	cmp	r3, #0
    d902:	d025      	beq.n	d950 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    d904:	7bfb      	ldrb	r3, [r7, #15]
    d906:	2b00      	cmp	r3, #0
    d908:	d018      	beq.n	d93c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    d90a:	7ffb      	ldrb	r3, [r7, #31]
    d90c:	2101      	movs	r1, #1
    d90e:	4618      	mov	r0, r3
    d910:	4b09      	ldr	r3, [pc, #36]	; (d938 <_usb_d_dev_out_next+0x290>)
    d912:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    d914:	232d      	movs	r3, #45	; 0x2d
    d916:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    d91a:	e012      	b.n	d942 <_usb_d_dev_out_next+0x29a>
    d91c:	20001edc 	.word	0x20001edc
    d920:	0000ce89 	.word	0x0000ce89
    d924:	00011b19 	.word	0x00011b19
    d928:	0000ceb5 	.word	0x0000ceb5
    d92c:	0000d03d 	.word	0x0000d03d
    d930:	0000c795 	.word	0x0000c795
    d934:	0000e7b9 	.word	0x0000e7b9
    d938:	0000d07d 	.word	0x0000d07d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    d93c:	2325      	movs	r3, #37	; 0x25
    d93e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    d942:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    d946:	7ffb      	ldrb	r3, [r7, #31]
    d948:	4619      	mov	r1, r3
    d94a:	6a38      	ldr	r0, [r7, #32]
    d94c:	4b05      	ldr	r3, [pc, #20]	; (d964 <_usb_d_dev_out_next+0x2bc>)
    d94e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    d950:	7ffb      	ldrb	r3, [r7, #31]
    d952:	2201      	movs	r2, #1
    d954:	2100      	movs	r1, #0
    d956:	4618      	mov	r0, r3
    d958:	4b03      	ldr	r3, [pc, #12]	; (d968 <_usb_d_dev_out_next+0x2c0>)
    d95a:	4798      	blx	r3
}
    d95c:	372c      	adds	r7, #44	; 0x2c
    d95e:	46bd      	mov	sp, r7
    d960:	bd90      	pop	{r4, r7, pc}
    d962:	bf00      	nop
    d964:	0000c769 	.word	0x0000c769
    d968:	0000d10d 	.word	0x0000d10d

0000d96c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    d96c:	b580      	push	{r7, lr}
    d96e:	b084      	sub	sp, #16
    d970:	af00      	add	r7, sp, #0
    d972:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    d974:	687b      	ldr	r3, [r7, #4]
    d976:	7c9b      	ldrb	r3, [r3, #18]
    d978:	f003 030f 	and.w	r3, r3, #15
    d97c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	7cdb      	ldrb	r3, [r3, #19]
    d982:	f003 0307 	and.w	r3, r3, #7
    d986:	b2db      	uxtb	r3, r3
    d988:	2b01      	cmp	r3, #1
    d98a:	bf0c      	ite	eq
    d98c:	2301      	moveq	r3, #1
    d98e:	2300      	movne	r3, #0
    d990:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    d992:	7bbb      	ldrb	r3, [r7, #14]
    d994:	f083 0301 	eor.w	r3, r3, #1
    d998:	b2db      	uxtb	r3, r3
    d99a:	2b00      	cmp	r3, #0
    d99c:	d008      	beq.n	d9b0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    d99e:	7bfb      	ldrb	r3, [r7, #15]
    d9a0:	4618      	mov	r0, r3
    d9a2:	4b20      	ldr	r3, [pc, #128]	; (da24 <_usb_d_dev_handle_setup+0xb8>)
    d9a4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    d9a6:	7bfb      	ldrb	r3, [r7, #15]
    d9a8:	4618      	mov	r0, r3
    d9aa:	4b1f      	ldr	r3, [pc, #124]	; (da28 <_usb_d_dev_handle_setup+0xbc>)
    d9ac:	4798      	blx	r3
		return;
    d9ae:	e036      	b.n	da1e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	7cdb      	ldrb	r3, [r3, #19]
    d9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d9b8:	b2db      	uxtb	r3, r3
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d010      	beq.n	d9e0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    d9be:	687a      	ldr	r2, [r7, #4]
    d9c0:	7cd3      	ldrb	r3, [r2, #19]
    d9c2:	f36f 1386 	bfc	r3, #6, #1
    d9c6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d9c8:	7bfb      	ldrb	r3, [r7, #15]
    d9ca:	2200      	movs	r2, #0
    d9cc:	2101      	movs	r1, #1
    d9ce:	4618      	mov	r0, r3
    d9d0:	4b16      	ldr	r3, [pc, #88]	; (da2c <_usb_d_dev_handle_setup+0xc0>)
    d9d2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    d9d4:	7bfb      	ldrb	r3, [r7, #15]
    d9d6:	2200      	movs	r2, #0
    d9d8:	2100      	movs	r1, #0
    d9da:	4618      	mov	r0, r3
    d9dc:	4b14      	ldr	r3, [pc, #80]	; (da30 <_usb_d_dev_handle_setup+0xc4>)
    d9de:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    d9e0:	687a      	ldr	r2, [r7, #4]
    d9e2:	7cd3      	ldrb	r3, [r2, #19]
    d9e4:	f36f 03c3 	bfc	r3, #3, #1
    d9e8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    d9ea:	7bfb      	ldrb	r3, [r7, #15]
    d9ec:	2100      	movs	r1, #0
    d9ee:	4618      	mov	r0, r3
    d9f0:	4b10      	ldr	r3, [pc, #64]	; (da34 <_usb_d_dev_handle_setup+0xc8>)
    d9f2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    d9f4:	7bfb      	ldrb	r3, [r7, #15]
    d9f6:	2101      	movs	r1, #1
    d9f8:	4618      	mov	r0, r3
    d9fa:	4b0e      	ldr	r3, [pc, #56]	; (da34 <_usb_d_dev_handle_setup+0xc8>)
    d9fc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    d9fe:	7bfb      	ldrb	r3, [r7, #15]
    da00:	216f      	movs	r1, #111	; 0x6f
    da02:	4618      	mov	r0, r3
    da04:	4b0c      	ldr	r3, [pc, #48]	; (da38 <_usb_d_dev_handle_setup+0xcc>)
    da06:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    da08:	7bfb      	ldrb	r3, [r7, #15]
    da0a:	216f      	movs	r1, #111	; 0x6f
    da0c:	4618      	mov	r0, r3
    da0e:	4b0b      	ldr	r3, [pc, #44]	; (da3c <_usb_d_dev_handle_setup+0xd0>)
    da10:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    da12:	4b0b      	ldr	r3, [pc, #44]	; (da40 <_usb_d_dev_handle_setup+0xd4>)
    da14:	689b      	ldr	r3, [r3, #8]
    da16:	687a      	ldr	r2, [r7, #4]
    da18:	7c92      	ldrb	r2, [r2, #18]
    da1a:	4610      	mov	r0, r2
    da1c:	4798      	blx	r3
}
    da1e:	3710      	adds	r7, #16
    da20:	46bd      	mov	sp, r7
    da22:	bd80      	pop	{r7, pc}
    da24:	0000ce11 	.word	0x0000ce11
    da28:	0000cdbd 	.word	0x0000cdbd
    da2c:	0000d0b5 	.word	0x0000d0b5
    da30:	0000d10d 	.word	0x0000d10d
    da34:	0000d07d 	.word	0x0000d07d
    da38:	0000cbbd 	.word	0x0000cbbd
    da3c:	0000cc0d 	.word	0x0000cc0d
    da40:	20001e14 	.word	0x20001e14

0000da44 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    da44:	b580      	push	{r7, lr}
    da46:	b084      	sub	sp, #16
    da48:	af00      	add	r7, sp, #0
    da4a:	6078      	str	r0, [r7, #4]
    da4c:	460b      	mov	r3, r1
    da4e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	7c9b      	ldrb	r3, [r3, #18]
    da54:	f003 030f 	and.w	r3, r3, #15
    da58:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    da5a:	78f9      	ldrb	r1, [r7, #3]
    da5c:	7bfb      	ldrb	r3, [r7, #15]
    da5e:	2200      	movs	r2, #0
    da60:	4618      	mov	r0, r3
    da62:	4b07      	ldr	r3, [pc, #28]	; (da80 <_usb_d_dev_handle_stall+0x3c>)
    da64:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    da66:	4b07      	ldr	r3, [pc, #28]	; (da84 <_usb_d_dev_handle_stall+0x40>)
    da68:	691b      	ldr	r3, [r3, #16]
    da6a:	687a      	ldr	r2, [r7, #4]
    da6c:	7c90      	ldrb	r0, [r2, #18]
    da6e:	687a      	ldr	r2, [r7, #4]
    da70:	6892      	ldr	r2, [r2, #8]
    da72:	2101      	movs	r1, #1
    da74:	4798      	blx	r3
}
    da76:	bf00      	nop
    da78:	3710      	adds	r7, #16
    da7a:	46bd      	mov	sp, r7
    da7c:	bd80      	pop	{r7, pc}
    da7e:	bf00      	nop
    da80:	0000cd71 	.word	0x0000cd71
    da84:	20001e14 	.word	0x20001e14

0000da88 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b088      	sub	sp, #32
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
    da90:	460b      	mov	r3, r1
    da92:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    da94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    da98:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    da9a:	687b      	ldr	r3, [r7, #4]
    da9c:	7c9b      	ldrb	r3, [r3, #18]
    da9e:	f003 030f 	and.w	r3, r3, #15
    daa2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    daa4:	4b61      	ldr	r3, [pc, #388]	; (dc2c <_usb_d_dev_handle_trfail+0x1a4>)
    daa6:	881b      	ldrh	r3, [r3, #0]
    daa8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    daaa:	7efb      	ldrb	r3, [r7, #27]
    daac:	015b      	lsls	r3, r3, #5
    daae:	4a60      	ldr	r2, [pc, #384]	; (dc30 <_usb_d_dev_handle_trfail+0x1a8>)
    dab0:	4413      	add	r3, r2
    dab2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    dab4:	78fb      	ldrb	r3, [r7, #3]
    dab6:	2b00      	cmp	r3, #0
    dab8:	d006      	beq.n	dac8 <_usb_d_dev_handle_trfail+0x40>
    daba:	7efb      	ldrb	r3, [r7, #27]
    dabc:	4619      	mov	r1, r3
    dabe:	69f8      	ldr	r0, [r7, #28]
    dac0:	4b5c      	ldr	r3, [pc, #368]	; (dc34 <_usb_d_dev_handle_trfail+0x1ac>)
    dac2:	4798      	blx	r3
    dac4:	4603      	mov	r3, r0
    dac6:	e005      	b.n	dad4 <_usb_d_dev_handle_trfail+0x4c>
    dac8:	7efb      	ldrb	r3, [r7, #27]
    daca:	4619      	mov	r1, r3
    dacc:	69f8      	ldr	r0, [r7, #28]
    dace:	4b5a      	ldr	r3, [pc, #360]	; (dc38 <_usb_d_dev_handle_trfail+0x1b0>)
    dad0:	4798      	blx	r3
    dad2:	4603      	mov	r3, r0
    dad4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    dad6:	687b      	ldr	r3, [r7, #4]
    dad8:	7cdb      	ldrb	r3, [r3, #19]
    dada:	f003 0307 	and.w	r3, r3, #7
    dade:	b2db      	uxtb	r3, r3
    dae0:	2b01      	cmp	r3, #1
    dae2:	bf0c      	ite	eq
    dae4:	2301      	moveq	r3, #1
    dae6:	2300      	movne	r3, #0
    dae8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    daea:	78fb      	ldrb	r3, [r7, #3]
    daec:	011b      	lsls	r3, r3, #4
    daee:	697a      	ldr	r2, [r7, #20]
    daf0:	4413      	add	r3, r2
    daf2:	7a9b      	ldrb	r3, [r3, #10]
    daf4:	b2db      	uxtb	r3, r3
    daf6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    daf8:	7cfb      	ldrb	r3, [r7, #19]
    dafa:	2b02      	cmp	r3, #2
    dafc:	d12f      	bne.n	db5e <_usb_d_dev_handle_trfail+0xd6>
    dafe:	7b3b      	ldrb	r3, [r7, #12]
    db00:	f003 0301 	and.w	r3, r3, #1
    db04:	b2db      	uxtb	r3, r3
    db06:	2b00      	cmp	r3, #0
    db08:	d029      	beq.n	db5e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    db0a:	78fb      	ldrb	r3, [r7, #3]
    db0c:	011b      	lsls	r3, r3, #4
    db0e:	697a      	ldr	r2, [r7, #20]
    db10:	441a      	add	r2, r3
    db12:	7a93      	ldrb	r3, [r2, #10]
    db14:	f36f 0300 	bfc	r3, #0, #1
    db18:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    db1a:	78fb      	ldrb	r3, [r7, #3]
    db1c:	f107 0220 	add.w	r2, r7, #32
    db20:	4413      	add	r3, r2
    db22:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    db26:	7efb      	ldrb	r3, [r7, #27]
    db28:	4619      	mov	r1, r3
    db2a:	69f8      	ldr	r0, [r7, #28]
    db2c:	4b43      	ldr	r3, [pc, #268]	; (dc3c <_usb_d_dev_handle_trfail+0x1b4>)
    db2e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    db30:	78fb      	ldrb	r3, [r7, #3]
    db32:	f107 0220 	add.w	r2, r7, #32
    db36:	4413      	add	r3, r2
    db38:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    db3c:	7efb      	ldrb	r3, [r7, #27]
    db3e:	4619      	mov	r1, r3
    db40:	69f8      	ldr	r0, [r7, #28]
    db42:	4b3f      	ldr	r3, [pc, #252]	; (dc40 <_usb_d_dev_handle_trfail+0x1b8>)
    db44:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    db46:	78fb      	ldrb	r3, [r7, #3]
    db48:	2b00      	cmp	r3, #0
    db4a:	bf14      	ite	ne
    db4c:	2301      	movne	r3, #1
    db4e:	2300      	moveq	r3, #0
    db50:	b2db      	uxtb	r3, r3
    db52:	2204      	movs	r2, #4
    db54:	4619      	mov	r1, r3
    db56:	6878      	ldr	r0, [r7, #4]
    db58:	4b3a      	ldr	r3, [pc, #232]	; (dc44 <_usb_d_dev_handle_trfail+0x1bc>)
    db5a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    db5c:	e062      	b.n	dc24 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    db5e:	7b3b      	ldrb	r3, [r7, #12]
    db60:	f003 0302 	and.w	r3, r3, #2
    db64:	b2db      	uxtb	r3, r3
    db66:	2b00      	cmp	r3, #0
    db68:	d040      	beq.n	dbec <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    db6a:	78fb      	ldrb	r3, [r7, #3]
    db6c:	011b      	lsls	r3, r3, #4
    db6e:	697a      	ldr	r2, [r7, #20]
    db70:	441a      	add	r2, r3
    db72:	7a93      	ldrb	r3, [r2, #10]
    db74:	f36f 0341 	bfc	r3, #1, #1
    db78:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    db7a:	78fb      	ldrb	r3, [r7, #3]
    db7c:	f107 0220 	add.w	r2, r7, #32
    db80:	4413      	add	r3, r2
    db82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    db86:	7efb      	ldrb	r3, [r7, #27]
    db88:	4619      	mov	r1, r3
    db8a:	69f8      	ldr	r0, [r7, #28]
    db8c:	4b2b      	ldr	r3, [pc, #172]	; (dc3c <_usb_d_dev_handle_trfail+0x1b4>)
    db8e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    db90:	78fb      	ldrb	r3, [r7, #3]
    db92:	f107 0220 	add.w	r2, r7, #32
    db96:	4413      	add	r3, r2
    db98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    db9c:	7efb      	ldrb	r3, [r7, #27]
    db9e:	4619      	mov	r1, r3
    dba0:	69f8      	ldr	r0, [r7, #28]
    dba2:	4b27      	ldr	r3, [pc, #156]	; (dc40 <_usb_d_dev_handle_trfail+0x1b8>)
    dba4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    dba6:	7cbb      	ldrb	r3, [r7, #18]
    dba8:	2b00      	cmp	r3, #0
    dbaa:	d03b      	beq.n	dc24 <_usb_d_dev_handle_trfail+0x19c>
    dbac:	687b      	ldr	r3, [r7, #4]
    dbae:	7cdb      	ldrb	r3, [r3, #19]
    dbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dbb4:	b2db      	uxtb	r3, r3
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d034      	beq.n	dc24 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    dbba:	687b      	ldr	r3, [r7, #4]
    dbbc:	7cdb      	ldrb	r3, [r3, #19]
    dbbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    dbc2:	b2db      	uxtb	r3, r3
    dbc4:	461a      	mov	r2, r3
    dbc6:	78fb      	ldrb	r3, [r7, #3]
    dbc8:	4293      	cmp	r3, r2
    dbca:	d02b      	beq.n	dc24 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	7cdb      	ldrb	r3, [r3, #19]
    dbd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    dbd4:	b2db      	uxtb	r3, r3
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	bf14      	ite	ne
    dbda:	2301      	movne	r3, #1
    dbdc:	2300      	moveq	r3, #0
    dbde:	b2db      	uxtb	r3, r3
    dbe0:	2200      	movs	r2, #0
    dbe2:	4619      	mov	r1, r3
    dbe4:	6878      	ldr	r0, [r7, #4]
    dbe6:	4b17      	ldr	r3, [pc, #92]	; (dc44 <_usb_d_dev_handle_trfail+0x1bc>)
    dbe8:	4798      	blx	r3
}
    dbea:	e01b      	b.n	dc24 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    dbec:	78fa      	ldrb	r2, [r7, #3]
    dbee:	7efb      	ldrb	r3, [r7, #27]
    dbf0:	4611      	mov	r1, r2
    dbf2:	4618      	mov	r0, r3
    dbf4:	4b14      	ldr	r3, [pc, #80]	; (dc48 <_usb_d_dev_handle_trfail+0x1c0>)
    dbf6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    dbf8:	78fb      	ldrb	r3, [r7, #3]
    dbfa:	f107 0220 	add.w	r2, r7, #32
    dbfe:	4413      	add	r3, r2
    dc00:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc04:	7efb      	ldrb	r3, [r7, #27]
    dc06:	4619      	mov	r1, r3
    dc08:	69f8      	ldr	r0, [r7, #28]
    dc0a:	4b0c      	ldr	r3, [pc, #48]	; (dc3c <_usb_d_dev_handle_trfail+0x1b4>)
    dc0c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    dc0e:	78fb      	ldrb	r3, [r7, #3]
    dc10:	f107 0220 	add.w	r2, r7, #32
    dc14:	4413      	add	r3, r2
    dc16:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc1a:	7efb      	ldrb	r3, [r7, #27]
    dc1c:	4619      	mov	r1, r3
    dc1e:	69f8      	ldr	r0, [r7, #28]
    dc20:	4b07      	ldr	r3, [pc, #28]	; (dc40 <_usb_d_dev_handle_trfail+0x1b8>)
    dc22:	4798      	blx	r3
}
    dc24:	bf00      	nop
    dc26:	3720      	adds	r7, #32
    dc28:	46bd      	mov	sp, r7
    dc2a:	bd80      	pop	{r7, pc}
    dc2c:	00012c4c 	.word	0x00012c4c
    dc30:	20001edc 	.word	0x20001edc
    dc34:	0000c7f1 	.word	0x0000c7f1
    dc38:	0000c7c1 	.word	0x0000c7c1
    dc3c:	0000c695 	.word	0x0000c695
    dc40:	0000c795 	.word	0x0000c795
    dc44:	0000e801 	.word	0x0000e801
    dc48:	0000d07d 	.word	0x0000d07d

0000dc4c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    dc4c:	b580      	push	{r7, lr}
    dc4e:	b082      	sub	sp, #8
    dc50:	af00      	add	r7, sp, #0
    dc52:	6078      	str	r0, [r7, #4]
    dc54:	460b      	mov	r3, r1
    dc56:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    dc58:	78fb      	ldrb	r3, [r7, #3]
    dc5a:	f003 0310 	and.w	r3, r3, #16
    dc5e:	2b00      	cmp	r3, #0
    dc60:	d003      	beq.n	dc6a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    dc62:	6878      	ldr	r0, [r7, #4]
    dc64:	4b0c      	ldr	r3, [pc, #48]	; (dc98 <_usb_d_dev_trans_setup_isr+0x4c>)
    dc66:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    dc68:	e012      	b.n	dc90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    dc6a:	78fb      	ldrb	r3, [r7, #3]
    dc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dc70:	2b00      	cmp	r3, #0
    dc72:	d004      	beq.n	dc7e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    dc74:	2101      	movs	r1, #1
    dc76:	6878      	ldr	r0, [r7, #4]
    dc78:	4b08      	ldr	r3, [pc, #32]	; (dc9c <_usb_d_dev_trans_setup_isr+0x50>)
    dc7a:	4798      	blx	r3
}
    dc7c:	e008      	b.n	dc90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    dc7e:	78fb      	ldrb	r3, [r7, #3]
    dc80:	f003 0320 	and.w	r3, r3, #32
    dc84:	2b00      	cmp	r3, #0
    dc86:	d003      	beq.n	dc90 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    dc88:	2100      	movs	r1, #0
    dc8a:	6878      	ldr	r0, [r7, #4]
    dc8c:	4b03      	ldr	r3, [pc, #12]	; (dc9c <_usb_d_dev_trans_setup_isr+0x50>)
    dc8e:	4798      	blx	r3
}
    dc90:	bf00      	nop
    dc92:	3708      	adds	r7, #8
    dc94:	46bd      	mov	sp, r7
    dc96:	bd80      	pop	{r7, pc}
    dc98:	0000d96d 	.word	0x0000d96d
    dc9c:	0000da45 	.word	0x0000da45

0000dca0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    dca0:	b580      	push	{r7, lr}
    dca2:	b082      	sub	sp, #8
    dca4:	af00      	add	r7, sp, #0
    dca6:	6078      	str	r0, [r7, #4]
    dca8:	460b      	mov	r3, r1
    dcaa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    dcac:	78fb      	ldrb	r3, [r7, #3]
    dcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d004      	beq.n	dcc0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    dcb6:	2101      	movs	r1, #1
    dcb8:	6878      	ldr	r0, [r7, #4]
    dcba:	4b1a      	ldr	r3, [pc, #104]	; (dd24 <_usb_d_dev_trans_in_isr+0x84>)
    dcbc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    dcbe:	e02c      	b.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    dcc0:	78fb      	ldrb	r3, [r7, #3]
    dcc2:	f003 0308 	and.w	r3, r3, #8
    dcc6:	2b00      	cmp	r3, #0
    dcc8:	d004      	beq.n	dcd4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    dcca:	2101      	movs	r1, #1
    dccc:	6878      	ldr	r0, [r7, #4]
    dcce:	4b16      	ldr	r3, [pc, #88]	; (dd28 <_usb_d_dev_trans_in_isr+0x88>)
    dcd0:	4798      	blx	r3
}
    dcd2:	e022      	b.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    dcd4:	78fb      	ldrb	r3, [r7, #3]
    dcd6:	f003 0302 	and.w	r3, r3, #2
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d004      	beq.n	dce8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    dcde:	2101      	movs	r1, #1
    dce0:	6878      	ldr	r0, [r7, #4]
    dce2:	4b12      	ldr	r3, [pc, #72]	; (dd2c <_usb_d_dev_trans_in_isr+0x8c>)
    dce4:	4798      	blx	r3
}
    dce6:	e018      	b.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	7cdb      	ldrb	r3, [r3, #19]
    dcec:	f003 0307 	and.w	r3, r3, #7
    dcf0:	b2db      	uxtb	r3, r3
    dcf2:	2b01      	cmp	r3, #1
    dcf4:	d111      	bne.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    dcf6:	78fb      	ldrb	r3, [r7, #3]
    dcf8:	f003 0304 	and.w	r3, r3, #4
    dcfc:	2b00      	cmp	r3, #0
    dcfe:	d004      	beq.n	dd0a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    dd00:	2100      	movs	r1, #0
    dd02:	6878      	ldr	r0, [r7, #4]
    dd04:	4b08      	ldr	r3, [pc, #32]	; (dd28 <_usb_d_dev_trans_in_isr+0x88>)
    dd06:	4798      	blx	r3
}
    dd08:	e007      	b.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    dd0a:	78fb      	ldrb	r3, [r7, #3]
    dd0c:	f003 0310 	and.w	r3, r3, #16
    dd10:	2b00      	cmp	r3, #0
    dd12:	d002      	beq.n	dd1a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    dd14:	6878      	ldr	r0, [r7, #4]
    dd16:	4b06      	ldr	r3, [pc, #24]	; (dd30 <_usb_d_dev_trans_in_isr+0x90>)
    dd18:	4798      	blx	r3
}
    dd1a:	bf00      	nop
    dd1c:	3708      	adds	r7, #8
    dd1e:	46bd      	mov	sp, r7
    dd20:	bd80      	pop	{r7, pc}
    dd22:	bf00      	nop
    dd24:	0000da45 	.word	0x0000da45
    dd28:	0000da89 	.word	0x0000da89
    dd2c:	0000d491 	.word	0x0000d491
    dd30:	0000d96d 	.word	0x0000d96d

0000dd34 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    dd34:	b580      	push	{r7, lr}
    dd36:	b082      	sub	sp, #8
    dd38:	af00      	add	r7, sp, #0
    dd3a:	6078      	str	r0, [r7, #4]
    dd3c:	460b      	mov	r3, r1
    dd3e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    dd40:	78fb      	ldrb	r3, [r7, #3]
    dd42:	f003 0320 	and.w	r3, r3, #32
    dd46:	2b00      	cmp	r3, #0
    dd48:	d004      	beq.n	dd54 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    dd4a:	2100      	movs	r1, #0
    dd4c:	6878      	ldr	r0, [r7, #4]
    dd4e:	4b1a      	ldr	r3, [pc, #104]	; (ddb8 <_usb_d_dev_trans_out_isr+0x84>)
    dd50:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    dd52:	e02c      	b.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    dd54:	78fb      	ldrb	r3, [r7, #3]
    dd56:	f003 0304 	and.w	r3, r3, #4
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	d004      	beq.n	dd68 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    dd5e:	2100      	movs	r1, #0
    dd60:	6878      	ldr	r0, [r7, #4]
    dd62:	4b16      	ldr	r3, [pc, #88]	; (ddbc <_usb_d_dev_trans_out_isr+0x88>)
    dd64:	4798      	blx	r3
}
    dd66:	e022      	b.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    dd68:	78fb      	ldrb	r3, [r7, #3]
    dd6a:	f003 0301 	and.w	r3, r3, #1
    dd6e:	2b00      	cmp	r3, #0
    dd70:	d004      	beq.n	dd7c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    dd72:	2101      	movs	r1, #1
    dd74:	6878      	ldr	r0, [r7, #4]
    dd76:	4b12      	ldr	r3, [pc, #72]	; (ddc0 <_usb_d_dev_trans_out_isr+0x8c>)
    dd78:	4798      	blx	r3
}
    dd7a:	e018      	b.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    dd7c:	687b      	ldr	r3, [r7, #4]
    dd7e:	7cdb      	ldrb	r3, [r3, #19]
    dd80:	f003 0307 	and.w	r3, r3, #7
    dd84:	b2db      	uxtb	r3, r3
    dd86:	2b01      	cmp	r3, #1
    dd88:	d111      	bne.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    dd8a:	78fb      	ldrb	r3, [r7, #3]
    dd8c:	f003 0308 	and.w	r3, r3, #8
    dd90:	2b00      	cmp	r3, #0
    dd92:	d004      	beq.n	dd9e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    dd94:	2101      	movs	r1, #1
    dd96:	6878      	ldr	r0, [r7, #4]
    dd98:	4b08      	ldr	r3, [pc, #32]	; (ddbc <_usb_d_dev_trans_out_isr+0x88>)
    dd9a:	4798      	blx	r3
}
    dd9c:	e007      	b.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    dd9e:	78fb      	ldrb	r3, [r7, #3]
    dda0:	f003 0310 	and.w	r3, r3, #16
    dda4:	2b00      	cmp	r3, #0
    dda6:	d002      	beq.n	ddae <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    dda8:	6878      	ldr	r0, [r7, #4]
    ddaa:	4b06      	ldr	r3, [pc, #24]	; (ddc4 <_usb_d_dev_trans_out_isr+0x90>)
    ddac:	4798      	blx	r3
}
    ddae:	bf00      	nop
    ddb0:	3708      	adds	r7, #8
    ddb2:	46bd      	mov	sp, r7
    ddb4:	bd80      	pop	{r7, pc}
    ddb6:	bf00      	nop
    ddb8:	0000da45 	.word	0x0000da45
    ddbc:	0000da89 	.word	0x0000da89
    ddc0:	0000d6a9 	.word	0x0000d6a9
    ddc4:	0000d96d 	.word	0x0000d96d

0000ddc8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    ddc8:	b580      	push	{r7, lr}
    ddca:	b084      	sub	sp, #16
    ddcc:	af00      	add	r7, sp, #0
    ddce:	6078      	str	r0, [r7, #4]
    ddd0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    ddd2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ddd6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ddd8:	683b      	ldr	r3, [r7, #0]
    ddda:	7c9b      	ldrb	r3, [r3, #18]
    dddc:	f003 030f 	and.w	r3, r3, #15
    dde0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    dde2:	7afb      	ldrb	r3, [r7, #11]
    dde4:	2201      	movs	r2, #1
    dde6:	409a      	lsls	r2, r3
    dde8:	687b      	ldr	r3, [r7, #4]
    ddea:	4013      	ands	r3, r2
    ddec:	2b00      	cmp	r3, #0
    ddee:	d03d      	beq.n	de6c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    ddf0:	7afb      	ldrb	r3, [r7, #11]
    ddf2:	68fa      	ldr	r2, [r7, #12]
    ddf4:	3308      	adds	r3, #8
    ddf6:	015b      	lsls	r3, r3, #5
    ddf8:	4413      	add	r3, r2
    ddfa:	3307      	adds	r3, #7
    ddfc:	781b      	ldrb	r3, [r3, #0]
    ddfe:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    de00:	7afb      	ldrb	r3, [r7, #11]
    de02:	68fa      	ldr	r2, [r7, #12]
    de04:	015b      	lsls	r3, r3, #5
    de06:	4413      	add	r3, r2
    de08:	f203 1309 	addw	r3, r3, #265	; 0x109
    de0c:	781b      	ldrb	r3, [r3, #0]
    de0e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    de10:	7aba      	ldrb	r2, [r7, #10]
    de12:	7a7b      	ldrb	r3, [r7, #9]
    de14:	4013      	ands	r3, r2
    de16:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    de18:	7abb      	ldrb	r3, [r7, #10]
    de1a:	2b00      	cmp	r3, #0
    de1c:	d027      	beq.n	de6e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    de1e:	683b      	ldr	r3, [r7, #0]
    de20:	7cdb      	ldrb	r3, [r3, #19]
    de22:	f003 0307 	and.w	r3, r3, #7
    de26:	b2db      	uxtb	r3, r3
    de28:	2b01      	cmp	r3, #1
    de2a:	d10c      	bne.n	de46 <_usb_d_dev_handle_eps+0x7e>
    de2c:	683b      	ldr	r3, [r7, #0]
    de2e:	7cdb      	ldrb	r3, [r3, #19]
    de30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    de34:	b2db      	uxtb	r3, r3
    de36:	2b00      	cmp	r3, #0
    de38:	d105      	bne.n	de46 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    de3a:	7abb      	ldrb	r3, [r7, #10]
    de3c:	4619      	mov	r1, r3
    de3e:	6838      	ldr	r0, [r7, #0]
    de40:	4b0c      	ldr	r3, [pc, #48]	; (de74 <_usb_d_dev_handle_eps+0xac>)
    de42:	4798      	blx	r3
    de44:	e013      	b.n	de6e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    de46:	683b      	ldr	r3, [r7, #0]
    de48:	7cdb      	ldrb	r3, [r3, #19]
    de4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    de4e:	b2db      	uxtb	r3, r3
    de50:	2b00      	cmp	r3, #0
    de52:	d005      	beq.n	de60 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    de54:	7abb      	ldrb	r3, [r7, #10]
    de56:	4619      	mov	r1, r3
    de58:	6838      	ldr	r0, [r7, #0]
    de5a:	4b07      	ldr	r3, [pc, #28]	; (de78 <_usb_d_dev_handle_eps+0xb0>)
    de5c:	4798      	blx	r3
    de5e:	e006      	b.n	de6e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    de60:	7abb      	ldrb	r3, [r7, #10]
    de62:	4619      	mov	r1, r3
    de64:	6838      	ldr	r0, [r7, #0]
    de66:	4b05      	ldr	r3, [pc, #20]	; (de7c <_usb_d_dev_handle_eps+0xb4>)
    de68:	4798      	blx	r3
    de6a:	e000      	b.n	de6e <_usb_d_dev_handle_eps+0xa6>
		return;
    de6c:	bf00      	nop
		}
	}
}
    de6e:	3710      	adds	r7, #16
    de70:	46bd      	mov	sp, r7
    de72:	bd80      	pop	{r7, pc}
    de74:	0000dc4d 	.word	0x0000dc4d
    de78:	0000dca1 	.word	0x0000dca1
    de7c:	0000dd35 	.word	0x0000dd35

0000de80 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    de80:	b580      	push	{r7, lr}
    de82:	b084      	sub	sp, #16
    de84:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    de86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    de8a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    de8c:	68bb      	ldr	r3, [r7, #8]
    de8e:	8c1b      	ldrh	r3, [r3, #32]
    de90:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    de92:	88fb      	ldrh	r3, [r7, #6]
    de94:	2b00      	cmp	r3, #0
    de96:	d104      	bne.n	dea2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    de98:	4b13      	ldr	r3, [pc, #76]	; (dee8 <_usb_d_dev_handler+0x68>)
    de9a:	4798      	blx	r3
    de9c:	4603      	mov	r3, r0
    de9e:	2b00      	cmp	r3, #0
    dea0:	d11e      	bne.n	dee0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    dea2:	2300      	movs	r3, #0
    dea4:	73fb      	strb	r3, [r7, #15]
    dea6:	e017      	b.n	ded8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    dea8:	7bfa      	ldrb	r2, [r7, #15]
    deaa:	4613      	mov	r3, r2
    deac:	009b      	lsls	r3, r3, #2
    deae:	4413      	add	r3, r2
    deb0:	009b      	lsls	r3, r3, #2
    deb2:	3310      	adds	r3, #16
    deb4:	4a0d      	ldr	r2, [pc, #52]	; (deec <_usb_d_dev_handler+0x6c>)
    deb6:	4413      	add	r3, r2
    deb8:	3304      	adds	r3, #4
    deba:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    debc:	683b      	ldr	r3, [r7, #0]
    debe:	7c9b      	ldrb	r3, [r3, #18]
    dec0:	2bff      	cmp	r3, #255	; 0xff
    dec2:	d005      	beq.n	ded0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    dec4:	88fb      	ldrh	r3, [r7, #6]
    dec6:	6839      	ldr	r1, [r7, #0]
    dec8:	4618      	mov	r0, r3
    deca:	4b09      	ldr	r3, [pc, #36]	; (def0 <_usb_d_dev_handler+0x70>)
    decc:	4798      	blx	r3
    dece:	e000      	b.n	ded2 <_usb_d_dev_handler+0x52>
			continue;
    ded0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    ded2:	7bfb      	ldrb	r3, [r7, #15]
    ded4:	3301      	adds	r3, #1
    ded6:	73fb      	strb	r3, [r7, #15]
    ded8:	7bfb      	ldrb	r3, [r7, #15]
    deda:	2b08      	cmp	r3, #8
    dedc:	d9e4      	bls.n	dea8 <_usb_d_dev_handler+0x28>
    dede:	e000      	b.n	dee2 <_usb_d_dev_handler+0x62>
			return;
    dee0:	bf00      	nop
	}
}
    dee2:	3710      	adds	r7, #16
    dee4:	46bd      	mov	sp, r7
    dee6:	bd80      	pop	{r7, pc}
    dee8:	0000d3d9 	.word	0x0000d3d9
    deec:	20001e14 	.word	0x20001e14
    def0:	0000ddc9 	.word	0x0000ddc9

0000def4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    def4:	b580      	push	{r7, lr}
    def6:	b082      	sub	sp, #8
    def8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    defa:	2300      	movs	r3, #0
    defc:	71fb      	strb	r3, [r7, #7]
    defe:	e023      	b.n	df48 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    df00:	79fa      	ldrb	r2, [r7, #7]
    df02:	4613      	mov	r3, r2
    df04:	009b      	lsls	r3, r3, #2
    df06:	4413      	add	r3, r2
    df08:	009b      	lsls	r3, r3, #2
    df0a:	3310      	adds	r3, #16
    df0c:	4a14      	ldr	r2, [pc, #80]	; (df60 <_usb_d_dev_reset_epts+0x6c>)
    df0e:	4413      	add	r3, r2
    df10:	3304      	adds	r3, #4
    df12:	2103      	movs	r1, #3
    df14:	4618      	mov	r0, r3
    df16:	4b13      	ldr	r3, [pc, #76]	; (df64 <_usb_d_dev_reset_epts+0x70>)
    df18:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    df1a:	79fa      	ldrb	r2, [r7, #7]
    df1c:	4910      	ldr	r1, [pc, #64]	; (df60 <_usb_d_dev_reset_epts+0x6c>)
    df1e:	4613      	mov	r3, r2
    df20:	009b      	lsls	r3, r3, #2
    df22:	4413      	add	r3, r2
    df24:	009b      	lsls	r3, r3, #2
    df26:	440b      	add	r3, r1
    df28:	3326      	adds	r3, #38	; 0x26
    df2a:	22ff      	movs	r2, #255	; 0xff
    df2c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    df2e:	79fa      	ldrb	r2, [r7, #7]
    df30:	490b      	ldr	r1, [pc, #44]	; (df60 <_usb_d_dev_reset_epts+0x6c>)
    df32:	4613      	mov	r3, r2
    df34:	009b      	lsls	r3, r3, #2
    df36:	4413      	add	r3, r2
    df38:	009b      	lsls	r3, r3, #2
    df3a:	440b      	add	r3, r1
    df3c:	3327      	adds	r3, #39	; 0x27
    df3e:	2200      	movs	r2, #0
    df40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    df42:	79fb      	ldrb	r3, [r7, #7]
    df44:	3301      	adds	r3, #1
    df46:	71fb      	strb	r3, [r7, #7]
    df48:	79fb      	ldrb	r3, [r7, #7]
    df4a:	2b08      	cmp	r3, #8
    df4c:	d9d8      	bls.n	df00 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    df4e:	22a0      	movs	r2, #160	; 0xa0
    df50:	2100      	movs	r1, #0
    df52:	4805      	ldr	r0, [pc, #20]	; (df68 <_usb_d_dev_reset_epts+0x74>)
    df54:	4b05      	ldr	r3, [pc, #20]	; (df6c <_usb_d_dev_reset_epts+0x78>)
    df56:	4798      	blx	r3
}
    df58:	bf00      	nop
    df5a:	3708      	adds	r7, #8
    df5c:	46bd      	mov	sp, r7
    df5e:	bd80      	pop	{r7, pc}
    df60:	20001e14 	.word	0x20001e14
    df64:	0000e7b9 	.word	0x0000e7b9
    df68:	20001edc 	.word	0x20001edc
    df6c:	00011c4d 	.word	0x00011c4d

0000df70 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    df70:	b580      	push	{r7, lr}
    df72:	b084      	sub	sp, #16
    df74:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    df76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    df7a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    df7c:	2301      	movs	r3, #1
    df7e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    df80:	2304      	movs	r3, #4
    df82:	713b      	strb	r3, [r7, #4]
    df84:	2300      	movs	r3, #0
    df86:	717b      	strb	r3, [r7, #5]
    df88:	2300      	movs	r3, #0
    df8a:	71bb      	strb	r3, [r7, #6]
    df8c:	2300      	movs	r3, #0
    df8e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    df90:	2101      	movs	r1, #1
    df92:	68f8      	ldr	r0, [r7, #12]
    df94:	4b26      	ldr	r3, [pc, #152]	; (e030 <_usb_d_dev_init+0xc0>)
    df96:	4798      	blx	r3
    df98:	4603      	mov	r3, r0
    df9a:	f083 0301 	eor.w	r3, r3, #1
    df9e:	b2db      	uxtb	r3, r3
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d011      	beq.n	dfc8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    dfa4:	2102      	movs	r1, #2
    dfa6:	68f8      	ldr	r0, [r7, #12]
    dfa8:	4b22      	ldr	r3, [pc, #136]	; (e034 <_usb_d_dev_init+0xc4>)
    dfaa:	4798      	blx	r3
    dfac:	4603      	mov	r3, r0
    dfae:	2b00      	cmp	r3, #0
    dfb0:	d006      	beq.n	dfc0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    dfb2:	68f8      	ldr	r0, [r7, #12]
    dfb4:	4b20      	ldr	r3, [pc, #128]	; (e038 <_usb_d_dev_init+0xc8>)
    dfb6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    dfb8:	2102      	movs	r1, #2
    dfba:	68f8      	ldr	r0, [r7, #12]
    dfbc:	4b1f      	ldr	r3, [pc, #124]	; (e03c <_usb_d_dev_init+0xcc>)
    dfbe:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    dfc0:	2101      	movs	r1, #1
    dfc2:	68f8      	ldr	r0, [r7, #12]
    dfc4:	4b1e      	ldr	r3, [pc, #120]	; (e040 <_usb_d_dev_init+0xd0>)
    dfc6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    dfc8:	2101      	movs	r1, #1
    dfca:	68f8      	ldr	r0, [r7, #12]
    dfcc:	4b1b      	ldr	r3, [pc, #108]	; (e03c <_usb_d_dev_init+0xcc>)
    dfce:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    dfd0:	4b1c      	ldr	r3, [pc, #112]	; (e044 <_usb_d_dev_init+0xd4>)
    dfd2:	4a1d      	ldr	r2, [pc, #116]	; (e048 <_usb_d_dev_init+0xd8>)
    dfd4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    dfd6:	4b1b      	ldr	r3, [pc, #108]	; (e044 <_usb_d_dev_init+0xd4>)
    dfd8:	4a1b      	ldr	r2, [pc, #108]	; (e048 <_usb_d_dev_init+0xd8>)
    dfda:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    dfdc:	4b19      	ldr	r3, [pc, #100]	; (e044 <_usb_d_dev_init+0xd4>)
    dfde:	4a1a      	ldr	r2, [pc, #104]	; (e048 <_usb_d_dev_init+0xd8>)
    dfe0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    dfe2:	4b18      	ldr	r3, [pc, #96]	; (e044 <_usb_d_dev_init+0xd4>)
    dfe4:	4a18      	ldr	r2, [pc, #96]	; (e048 <_usb_d_dev_init+0xd8>)
    dfe6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    dfe8:	4b16      	ldr	r3, [pc, #88]	; (e044 <_usb_d_dev_init+0xd4>)
    dfea:	4a17      	ldr	r2, [pc, #92]	; (e048 <_usb_d_dev_init+0xd8>)
    dfec:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    dfee:	4b17      	ldr	r3, [pc, #92]	; (e04c <_usb_d_dev_init+0xdc>)
    dff0:	4798      	blx	r3

	_usb_load_calib();
    dff2:	4b17      	ldr	r3, [pc, #92]	; (e050 <_usb_d_dev_init+0xe0>)
    dff4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    dff6:	2104      	movs	r1, #4
    dff8:	68f8      	ldr	r0, [r7, #12]
    dffa:	4b11      	ldr	r3, [pc, #68]	; (e040 <_usb_d_dev_init+0xd0>)
    dffc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    dffe:	4b15      	ldr	r3, [pc, #84]	; (e054 <_usb_d_dev_init+0xe4>)
    e000:	4619      	mov	r1, r3
    e002:	68f8      	ldr	r0, [r7, #12]
    e004:	4b14      	ldr	r3, [pc, #80]	; (e058 <_usb_d_dev_init+0xe8>)
    e006:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    e008:	7afb      	ldrb	r3, [r7, #11]
    e00a:	f107 0210 	add.w	r2, r7, #16
    e00e:	4413      	add	r3, r2
    e010:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    e014:	f043 0301 	orr.w	r3, r3, #1
    e018:	b2db      	uxtb	r3, r3
    e01a:	b29b      	uxth	r3, r3
    e01c:	4619      	mov	r1, r3
    e01e:	68f8      	ldr	r0, [r7, #12]
    e020:	4b0e      	ldr	r3, [pc, #56]	; (e05c <_usb_d_dev_init+0xec>)
    e022:	4798      	blx	r3

	return ERR_NONE;
    e024:	2300      	movs	r3, #0
}
    e026:	4618      	mov	r0, r3
    e028:	3710      	adds	r7, #16
    e02a:	46bd      	mov	sp, r7
    e02c:	bd80      	pop	{r7, pc}
    e02e:	bf00      	nop
    e030:	0000c609 	.word	0x0000c609
    e034:	0000c959 	.word	0x0000c959
    e038:	0000c92d 	.word	0x0000c92d
    e03c:	0000c5df 	.word	0x0000c5df
    e040:	0000c989 	.word	0x0000c989
    e044:	20001e14 	.word	0x20001e14
    e048:	0000ca51 	.word	0x0000ca51
    e04c:	0000def5 	.word	0x0000def5
    e050:	0000ca69 	.word	0x0000ca69
    e054:	20001edc 	.word	0x20001edc
    e058:	0000ca35 	.word	0x0000ca35
    e05c:	0000c9f9 	.word	0x0000c9f9

0000e060 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    e060:	b580      	push	{r7, lr}
    e062:	b082      	sub	sp, #8
    e064:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    e066:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e06a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    e06c:	2103      	movs	r1, #3
    e06e:	6878      	ldr	r0, [r7, #4]
    e070:	4b17      	ldr	r3, [pc, #92]	; (e0d0 <_usb_d_dev_enable+0x70>)
    e072:	4798      	blx	r3
    e074:	4603      	mov	r3, r0
    e076:	2b00      	cmp	r3, #0
    e078:	d002      	beq.n	e080 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    e07a:	f06f 0310 	mvn.w	r3, #16
    e07e:	e023      	b.n	e0c8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    e080:	6878      	ldr	r0, [r7, #4]
    e082:	4b14      	ldr	r3, [pc, #80]	; (e0d4 <_usb_d_dev_enable+0x74>)
    e084:	4798      	blx	r3
    e086:	4603      	mov	r3, r0
    e088:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    e08a:	78fb      	ldrb	r3, [r7, #3]
    e08c:	f003 0302 	and.w	r3, r3, #2
    e090:	2b00      	cmp	r3, #0
    e092:	d107      	bne.n	e0a4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    e094:	78fb      	ldrb	r3, [r7, #3]
    e096:	f043 0302 	orr.w	r3, r3, #2
    e09a:	b2db      	uxtb	r3, r3
    e09c:	4619      	mov	r1, r3
    e09e:	6878      	ldr	r0, [r7, #4]
    e0a0:	4b0d      	ldr	r3, [pc, #52]	; (e0d8 <_usb_d_dev_enable+0x78>)
    e0a2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    e0a4:	2050      	movs	r0, #80	; 0x50
    e0a6:	4b0d      	ldr	r3, [pc, #52]	; (e0dc <_usb_d_dev_enable+0x7c>)
    e0a8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    e0aa:	2051      	movs	r0, #81	; 0x51
    e0ac:	4b0b      	ldr	r3, [pc, #44]	; (e0dc <_usb_d_dev_enable+0x7c>)
    e0ae:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    e0b0:	2052      	movs	r0, #82	; 0x52
    e0b2:	4b0a      	ldr	r3, [pc, #40]	; (e0dc <_usb_d_dev_enable+0x7c>)
    e0b4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    e0b6:	2053      	movs	r0, #83	; 0x53
    e0b8:	4b08      	ldr	r3, [pc, #32]	; (e0dc <_usb_d_dev_enable+0x7c>)
    e0ba:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    e0bc:	f240 218d 	movw	r1, #653	; 0x28d
    e0c0:	6878      	ldr	r0, [r7, #4]
    e0c2:	4b07      	ldr	r3, [pc, #28]	; (e0e0 <_usb_d_dev_enable+0x80>)
    e0c4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    e0c6:	2300      	movs	r3, #0
}
    e0c8:	4618      	mov	r0, r3
    e0ca:	3708      	adds	r7, #8
    e0cc:	46bd      	mov	sp, r7
    e0ce:	bd80      	pop	{r7, pc}
    e0d0:	0000c903 	.word	0x0000c903
    e0d4:	0000c9b1 	.word	0x0000c9b1
    e0d8:	0000c989 	.word	0x0000c989
    e0dc:	0000c515 	.word	0x0000c515
    e0e0:	0000c8ad 	.word	0x0000c8ad

0000e0e4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    e0e4:	b580      	push	{r7, lr}
    e0e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    e0e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e0ec:	4b01      	ldr	r3, [pc, #4]	; (e0f4 <_usb_d_dev_attach+0x10>)
    e0ee:	4798      	blx	r3
}
    e0f0:	bf00      	nop
    e0f2:	bd80      	pop	{r7, pc}
    e0f4:	0000c9d5 	.word	0x0000c9d5

0000e0f8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b082      	sub	sp, #8
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	4603      	mov	r3, r0
    e100:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    e102:	79fb      	ldrb	r3, [r7, #7]
    e104:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e108:	b2db      	uxtb	r3, r3
    e10a:	4619      	mov	r1, r3
    e10c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e110:	4b02      	ldr	r3, [pc, #8]	; (e11c <_usb_d_dev_set_address+0x24>)
    e112:	4798      	blx	r3
}
    e114:	bf00      	nop
    e116:	3708      	adds	r7, #8
    e118:	46bd      	mov	sp, r7
    e11a:	bd80      	pop	{r7, pc}
    e11c:	0000ca17 	.word	0x0000ca17

0000e120 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    e120:	b590      	push	{r4, r7, lr}
    e122:	b085      	sub	sp, #20
    e124:	af00      	add	r7, sp, #0
    e126:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    e128:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e12c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	7c9b      	ldrb	r3, [r3, #18]
    e132:	f003 030f 	and.w	r3, r3, #15
    e136:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e138:	687b      	ldr	r3, [r7, #4]
    e13a:	68db      	ldr	r3, [r3, #12]
    e13c:	461a      	mov	r2, r3
    e13e:	7afb      	ldrb	r3, [r7, #11]
    e140:	2100      	movs	r1, #0
    e142:	4618      	mov	r0, r3
    e144:	4b0f      	ldr	r3, [pc, #60]	; (e184 <_usb_d_dev_trans_setup+0x64>)
    e146:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    e148:	687b      	ldr	r3, [r7, #4]
    e14a:	8a1b      	ldrh	r3, [r3, #16]
    e14c:	461a      	mov	r2, r3
    e14e:	7af8      	ldrb	r0, [r7, #11]
    e150:	2300      	movs	r3, #0
    e152:	2100      	movs	r1, #0
    e154:	4c0c      	ldr	r4, [pc, #48]	; (e188 <_usb_d_dev_trans_setup+0x68>)
    e156:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    e158:	7afb      	ldrb	r3, [r7, #11]
    e15a:	22b0      	movs	r2, #176	; 0xb0
    e15c:	4619      	mov	r1, r3
    e15e:	68f8      	ldr	r0, [r7, #12]
    e160:	4b0a      	ldr	r3, [pc, #40]	; (e18c <_usb_d_dev_trans_setup+0x6c>)
    e162:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    e164:	7afb      	ldrb	r3, [r7, #11]
    e166:	2200      	movs	r2, #0
    e168:	2100      	movs	r1, #0
    e16a:	4618      	mov	r0, r3
    e16c:	4b08      	ldr	r3, [pc, #32]	; (e190 <_usb_d_dev_trans_setup+0x70>)
    e16e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    e170:	7afb      	ldrb	r3, [r7, #11]
    e172:	2210      	movs	r2, #16
    e174:	4619      	mov	r1, r3
    e176:	68f8      	ldr	r0, [r7, #12]
    e178:	4b06      	ldr	r3, [pc, #24]	; (e194 <_usb_d_dev_trans_setup+0x74>)
    e17a:	4798      	blx	r3
}
    e17c:	bf00      	nop
    e17e:	3714      	adds	r7, #20
    e180:	46bd      	mov	sp, r7
    e182:	bd90      	pop	{r4, r7, pc}
    e184:	0000ceb5 	.word	0x0000ceb5
    e188:	0000d03d 	.word	0x0000d03d
    e18c:	0000c715 	.word	0x0000c715
    e190:	0000d10d 	.word	0x0000d10d
    e194:	0000c769 	.word	0x0000c769

0000e198 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    e198:	b580      	push	{r7, lr}
    e19a:	b088      	sub	sp, #32
    e19c:	af00      	add	r7, sp, #0
    e19e:	4603      	mov	r3, r0
    e1a0:	71fb      	strb	r3, [r7, #7]
    e1a2:	460b      	mov	r3, r1
    e1a4:	71bb      	strb	r3, [r7, #6]
    e1a6:	4613      	mov	r3, r2
    e1a8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    e1aa:	79fb      	ldrb	r3, [r7, #7]
    e1ac:	f003 030f 	and.w	r3, r3, #15
    e1b0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    e1b2:	79fb      	ldrb	r3, [r7, #7]
    e1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e1b8:	2b00      	cmp	r3, #0
    e1ba:	bf14      	ite	ne
    e1bc:	2301      	movne	r3, #1
    e1be:	2300      	moveq	r3, #0
    e1c0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e1c2:	7fba      	ldrb	r2, [r7, #30]
    e1c4:	7ffb      	ldrb	r3, [r7, #31]
    e1c6:	4611      	mov	r1, r2
    e1c8:	4618      	mov	r0, r3
    e1ca:	4b3e      	ldr	r3, [pc, #248]	; (e2c4 <_usb_d_dev_ep_init+0x12c>)
    e1cc:	4798      	blx	r3
    e1ce:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    e1d0:	79bb      	ldrb	r3, [r7, #6]
    e1d2:	f003 0303 	and.w	r3, r3, #3
    e1d6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    e1d8:	7ffa      	ldrb	r2, [r7, #31]
    e1da:	4613      	mov	r3, r2
    e1dc:	005b      	lsls	r3, r3, #1
    e1de:	4413      	add	r3, r2
    e1e0:	009b      	lsls	r3, r3, #2
    e1e2:	4a39      	ldr	r2, [pc, #228]	; (e2c8 <_usb_d_dev_ep_init+0x130>)
    e1e4:	4413      	add	r3, r2
    e1e6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    e1e8:	7ffb      	ldrb	r3, [r7, #31]
    e1ea:	2b04      	cmp	r3, #4
    e1ec:	d902      	bls.n	e1f4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    e1ee:	f06f 0311 	mvn.w	r3, #17
    e1f2:	e063      	b.n	e2bc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    e1f4:	69bb      	ldr	r3, [r7, #24]
    e1f6:	7c9b      	ldrb	r3, [r3, #18]
    e1f8:	2bff      	cmp	r3, #255	; 0xff
    e1fa:	d002      	beq.n	e202 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    e1fc:	f06f 0313 	mvn.w	r3, #19
    e200:	e05c      	b.n	e2bc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    e202:	7dfb      	ldrb	r3, [r7, #23]
    e204:	2b00      	cmp	r3, #0
    e206:	d11f      	bne.n	e248 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    e208:	7fbb      	ldrb	r3, [r7, #30]
    e20a:	2b00      	cmp	r3, #0
    e20c:	bf14      	ite	ne
    e20e:	2301      	movne	r3, #1
    e210:	2300      	moveq	r3, #0
    e212:	b2db      	uxtb	r3, r3
    e214:	f083 0301 	eor.w	r3, r3, #1
    e218:	b2db      	uxtb	r3, r3
    e21a:	f003 0301 	and.w	r3, r3, #1
    e21e:	b2da      	uxtb	r2, r3
    e220:	7ffb      	ldrb	r3, [r7, #31]
    e222:	4611      	mov	r1, r2
    e224:	4618      	mov	r0, r3
    e226:	4b27      	ldr	r3, [pc, #156]	; (e2c4 <_usb_d_dev_ep_init+0x12c>)
    e228:	4798      	blx	r3
    e22a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    e22c:	68fb      	ldr	r3, [r7, #12]
    e22e:	7c9b      	ldrb	r3, [r3, #18]
    e230:	2bff      	cmp	r3, #255	; 0xff
    e232:	d002      	beq.n	e23a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    e234:	f06f 0313 	mvn.w	r3, #19
    e238:	e040      	b.n	e2bc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    e23a:	693b      	ldr	r3, [r7, #16]
    e23c:	681b      	ldr	r3, [r3, #0]
    e23e:	2b00      	cmp	r3, #0
    e240:	d102      	bne.n	e248 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    e242:	f06f 0312 	mvn.w	r3, #18
    e246:	e039      	b.n	e2bc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    e248:	7fbb      	ldrb	r3, [r7, #30]
    e24a:	2b00      	cmp	r3, #0
    e24c:	d007      	beq.n	e25e <_usb_d_dev_ep_init+0xc6>
    e24e:	693b      	ldr	r3, [r7, #16]
    e250:	685b      	ldr	r3, [r3, #4]
    e252:	2b00      	cmp	r3, #0
    e254:	bf14      	ite	ne
    e256:	2301      	movne	r3, #1
    e258:	2300      	moveq	r3, #0
    e25a:	b2db      	uxtb	r3, r3
    e25c:	e006      	b.n	e26c <_usb_d_dev_ep_init+0xd4>
    e25e:	693b      	ldr	r3, [r7, #16]
    e260:	681b      	ldr	r3, [r3, #0]
    e262:	2b00      	cmp	r3, #0
    e264:	bf14      	ite	ne
    e266:	2301      	movne	r3, #1
    e268:	2300      	moveq	r3, #0
    e26a:	b2db      	uxtb	r3, r3
    e26c:	2b00      	cmp	r3, #0
    e26e:	d00f      	beq.n	e290 <_usb_d_dev_ep_init+0xf8>
    e270:	7fbb      	ldrb	r3, [r7, #30]
    e272:	2b00      	cmp	r3, #0
    e274:	d003      	beq.n	e27e <_usb_d_dev_ep_init+0xe6>
    e276:	693b      	ldr	r3, [r7, #16]
    e278:	895b      	ldrh	r3, [r3, #10]
    e27a:	461a      	mov	r2, r3
    e27c:	e002      	b.n	e284 <_usb_d_dev_ep_init+0xec>
    e27e:	693b      	ldr	r3, [r7, #16]
    e280:	891b      	ldrh	r3, [r3, #8]
    e282:	461a      	mov	r2, r3
    e284:	88bb      	ldrh	r3, [r7, #4]
    e286:	429a      	cmp	r2, r3
    e288:	da02      	bge.n	e290 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    e28a:	f06f 0312 	mvn.w	r3, #18
    e28e:	e015      	b.n	e2bc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    e290:	7fbb      	ldrb	r3, [r7, #30]
    e292:	2b00      	cmp	r3, #0
    e294:	d002      	beq.n	e29c <_usb_d_dev_ep_init+0x104>
    e296:	693b      	ldr	r3, [r7, #16]
    e298:	685b      	ldr	r3, [r3, #4]
    e29a:	e001      	b.n	e2a0 <_usb_d_dev_ep_init+0x108>
    e29c:	693b      	ldr	r3, [r7, #16]
    e29e:	681b      	ldr	r3, [r3, #0]
    e2a0:	69ba      	ldr	r2, [r7, #24]
    e2a2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    e2a4:	69bb      	ldr	r3, [r7, #24]
    e2a6:	88ba      	ldrh	r2, [r7, #4]
    e2a8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    e2aa:	7dfb      	ldrb	r3, [r7, #23]
    e2ac:	3301      	adds	r3, #1
    e2ae:	b2da      	uxtb	r2, r3
    e2b0:	69bb      	ldr	r3, [r7, #24]
    e2b2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    e2b4:	69bb      	ldr	r3, [r7, #24]
    e2b6:	79fa      	ldrb	r2, [r7, #7]
    e2b8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    e2ba:	2300      	movs	r3, #0
}
    e2bc:	4618      	mov	r0, r3
    e2be:	3720      	adds	r7, #32
    e2c0:	46bd      	mov	sp, r7
    e2c2:	bd80      	pop	{r7, pc}
    e2c4:	0000d1c9 	.word	0x0000d1c9
    e2c8:	00012c10 	.word	0x00012c10

0000e2cc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    e2cc:	b580      	push	{r7, lr}
    e2ce:	b086      	sub	sp, #24
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	4603      	mov	r3, r0
    e2d4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    e2d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e2da:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    e2dc:	79fb      	ldrb	r3, [r7, #7]
    e2de:	f003 030f 	and.w	r3, r3, #15
    e2e2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    e2e4:	79fb      	ldrb	r3, [r7, #7]
    e2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	bf14      	ite	ne
    e2ee:	2301      	movne	r3, #1
    e2f0:	2300      	moveq	r3, #0
    e2f2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e2f4:	7cba      	ldrb	r2, [r7, #18]
    e2f6:	7cfb      	ldrb	r3, [r7, #19]
    e2f8:	4611      	mov	r1, r2
    e2fa:	4618      	mov	r0, r3
    e2fc:	4b2a      	ldr	r3, [pc, #168]	; (e3a8 <_usb_d_dev_ep_deinit+0xdc>)
    e2fe:	4798      	blx	r3
    e300:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    e302:	7cfb      	ldrb	r3, [r7, #19]
    e304:	2b04      	cmp	r3, #4
    e306:	d84a      	bhi.n	e39e <_usb_d_dev_ep_deinit+0xd2>
    e308:	68fb      	ldr	r3, [r7, #12]
    e30a:	7c9b      	ldrb	r3, [r3, #18]
    e30c:	2bff      	cmp	r3, #255	; 0xff
    e30e:	d046      	beq.n	e39e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    e310:	7cbb      	ldrb	r3, [r7, #18]
    e312:	2203      	movs	r2, #3
    e314:	4619      	mov	r1, r3
    e316:	68f8      	ldr	r0, [r7, #12]
    e318:	4b24      	ldr	r3, [pc, #144]	; (e3ac <_usb_d_dev_ep_deinit+0xe0>)
    e31a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    e31c:	68fb      	ldr	r3, [r7, #12]
    e31e:	7cdb      	ldrb	r3, [r3, #19]
    e320:	f003 0307 	and.w	r3, r3, #7
    e324:	b2db      	uxtb	r3, r3
    e326:	2b01      	cmp	r3, #1
    e328:	d107      	bne.n	e33a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    e32a:	79fb      	ldrb	r3, [r7, #7]
    e32c:	697a      	ldr	r2, [r7, #20]
    e32e:	3308      	adds	r3, #8
    e330:	015b      	lsls	r3, r3, #5
    e332:	4413      	add	r3, r2
    e334:	2200      	movs	r2, #0
    e336:	701a      	strb	r2, [r3, #0]
    e338:	e02a      	b.n	e390 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    e33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e33e:	2b00      	cmp	r3, #0
    e340:	da15      	bge.n	e36e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    e342:	79fb      	ldrb	r3, [r7, #7]
    e344:	f003 030f 	and.w	r3, r3, #15
    e348:	79fa      	ldrb	r2, [r7, #7]
    e34a:	f002 020f 	and.w	r2, r2, #15
    e34e:	6979      	ldr	r1, [r7, #20]
    e350:	3208      	adds	r2, #8
    e352:	0152      	lsls	r2, r2, #5
    e354:	440a      	add	r2, r1
    e356:	7812      	ldrb	r2, [r2, #0]
    e358:	b2d2      	uxtb	r2, r2
    e35a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    e35e:	b2d1      	uxtb	r1, r2
    e360:	697a      	ldr	r2, [r7, #20]
    e362:	3308      	adds	r3, #8
    e364:	015b      	lsls	r3, r3, #5
    e366:	4413      	add	r3, r2
    e368:	460a      	mov	r2, r1
    e36a:	701a      	strb	r2, [r3, #0]
    e36c:	e010      	b.n	e390 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    e36e:	79fb      	ldrb	r3, [r7, #7]
    e370:	79fa      	ldrb	r2, [r7, #7]
    e372:	6979      	ldr	r1, [r7, #20]
    e374:	3208      	adds	r2, #8
    e376:	0152      	lsls	r2, r2, #5
    e378:	440a      	add	r2, r1
    e37a:	7812      	ldrb	r2, [r2, #0]
    e37c:	b2d2      	uxtb	r2, r2
    e37e:	f022 0207 	bic.w	r2, r2, #7
    e382:	b2d1      	uxtb	r1, r2
    e384:	697a      	ldr	r2, [r7, #20]
    e386:	3308      	adds	r3, #8
    e388:	015b      	lsls	r3, r3, #5
    e38a:	4413      	add	r3, r2
    e38c:	460a      	mov	r2, r1
    e38e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    e390:	68fb      	ldr	r3, [r7, #12]
    e392:	2200      	movs	r2, #0
    e394:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    e396:	68fb      	ldr	r3, [r7, #12]
    e398:	22ff      	movs	r2, #255	; 0xff
    e39a:	749a      	strb	r2, [r3, #18]
    e39c:	e000      	b.n	e3a0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    e39e:	bf00      	nop
}
    e3a0:	3718      	adds	r7, #24
    e3a2:	46bd      	mov	sp, r7
    e3a4:	bd80      	pop	{r7, pc}
    e3a6:	bf00      	nop
    e3a8:	0000d1c9 	.word	0x0000d1c9
    e3ac:	0000e801 	.word	0x0000e801

0000e3b0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    e3b0:	b5b0      	push	{r4, r5, r7, lr}
    e3b2:	b088      	sub	sp, #32
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	4603      	mov	r3, r0
    e3b8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    e3ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e3be:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    e3c0:	79fb      	ldrb	r3, [r7, #7]
    e3c2:	f003 030f 	and.w	r3, r3, #15
    e3c6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    e3c8:	79fb      	ldrb	r3, [r7, #7]
    e3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	bf14      	ite	ne
    e3d2:	2301      	movne	r3, #1
    e3d4:	2300      	moveq	r3, #0
    e3d6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    e3d8:	7eba      	ldrb	r2, [r7, #26]
    e3da:	7efb      	ldrb	r3, [r7, #27]
    e3dc:	4611      	mov	r1, r2
    e3de:	4618      	mov	r0, r3
    e3e0:	4b70      	ldr	r3, [pc, #448]	; (e5a4 <_usb_d_dev_ep_enable+0x1f4>)
    e3e2:	4798      	blx	r3
    e3e4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    e3e6:	7efb      	ldrb	r3, [r7, #27]
    e3e8:	4619      	mov	r1, r3
    e3ea:	69f8      	ldr	r0, [r7, #28]
    e3ec:	4b6e      	ldr	r3, [pc, #440]	; (e5a8 <_usb_d_dev_ep_enable+0x1f8>)
    e3ee:	4798      	blx	r3
    e3f0:	4603      	mov	r3, r0
    e3f2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    e3f4:	7efb      	ldrb	r3, [r7, #27]
    e3f6:	2b04      	cmp	r3, #4
    e3f8:	d803      	bhi.n	e402 <_usb_d_dev_ep_enable+0x52>
    e3fa:	697b      	ldr	r3, [r7, #20]
    e3fc:	7c9b      	ldrb	r3, [r3, #18]
    e3fe:	2bff      	cmp	r3, #255	; 0xff
    e400:	d102      	bne.n	e408 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    e402:	f06f 0311 	mvn.w	r3, #17
    e406:	e0c8      	b.n	e59a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    e408:	7efb      	ldrb	r3, [r7, #27]
    e40a:	015b      	lsls	r3, r3, #5
    e40c:	4a67      	ldr	r2, [pc, #412]	; (e5ac <_usb_d_dev_ep_enable+0x1fc>)
    e40e:	4413      	add	r3, r2
    e410:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    e412:	697b      	ldr	r3, [r7, #20]
    e414:	7cdb      	ldrb	r3, [r3, #19]
    e416:	f003 0307 	and.w	r3, r3, #7
    e41a:	b2db      	uxtb	r3, r3
    e41c:	2b01      	cmp	r3, #1
    e41e:	d14b      	bne.n	e4b8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    e420:	7cfb      	ldrb	r3, [r7, #19]
    e422:	f003 0377 	and.w	r3, r3, #119	; 0x77
    e426:	2b00      	cmp	r3, #0
    e428:	d002      	beq.n	e430 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    e42a:	f06f 0313 	mvn.w	r3, #19
    e42e:	e0b4      	b.n	e59a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    e430:	7efb      	ldrb	r3, [r7, #27]
    e432:	2211      	movs	r2, #17
    e434:	4619      	mov	r1, r3
    e436:	69f8      	ldr	r0, [r7, #28]
    e438:	4b5d      	ldr	r3, [pc, #372]	; (e5b0 <_usb_d_dev_ep_enable+0x200>)
    e43a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e43c:	697b      	ldr	r3, [r7, #20]
    e43e:	8a1b      	ldrh	r3, [r3, #16]
    e440:	039b      	lsls	r3, r3, #14
    e442:	4c5c      	ldr	r4, [pc, #368]	; (e5b4 <_usb_d_dev_ep_enable+0x204>)
    e444:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e446:	697b      	ldr	r3, [r7, #20]
    e448:	8a1b      	ldrh	r3, [r3, #16]
    e44a:	4618      	mov	r0, r3
    e44c:	4b5a      	ldr	r3, [pc, #360]	; (e5b8 <_usb_d_dev_ep_enable+0x208>)
    e44e:	4798      	blx	r3
    e450:	4603      	mov	r3, r0
    e452:	071b      	lsls	r3, r3, #28
    e454:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e458:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e45c:	68fb      	ldr	r3, [r7, #12]
    e45e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    e460:	68fb      	ldr	r3, [r7, #12]
    e462:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e466:	697b      	ldr	r3, [r7, #20]
    e468:	8a1b      	ldrh	r3, [r3, #16]
    e46a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e46e:	697b      	ldr	r3, [r7, #20]
    e470:	8a1b      	ldrh	r3, [r3, #16]
    e472:	4618      	mov	r0, r3
    e474:	4b50      	ldr	r3, [pc, #320]	; (e5b8 <_usb_d_dev_ep_enable+0x208>)
    e476:	4798      	blx	r3
    e478:	4603      	mov	r3, r0
    e47a:	071b      	lsls	r3, r3, #28
    e47c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e480:	432b      	orrs	r3, r5
    e482:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e484:	7efb      	ldrb	r3, [r7, #27]
    e486:	2200      	movs	r2, #0
    e488:	2100      	movs	r1, #0
    e48a:	4618      	mov	r0, r3
    e48c:	4b4b      	ldr	r3, [pc, #300]	; (e5bc <_usb_d_dev_ep_enable+0x20c>)
    e48e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    e490:	7efb      	ldrb	r3, [r7, #27]
    e492:	2200      	movs	r2, #0
    e494:	2101      	movs	r1, #1
    e496:	4618      	mov	r0, r3
    e498:	4b49      	ldr	r3, [pc, #292]	; (e5c0 <_usb_d_dev_ep_enable+0x210>)
    e49a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    e49c:	7efb      	ldrb	r3, [r7, #27]
    e49e:	2100      	movs	r1, #0
    e4a0:	4618      	mov	r0, r3
    e4a2:	4b48      	ldr	r3, [pc, #288]	; (e5c4 <_usb_d_dev_ep_enable+0x214>)
    e4a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e4a6:	7efb      	ldrb	r3, [r7, #27]
    e4a8:	2101      	movs	r1, #1
    e4aa:	4618      	mov	r0, r3
    e4ac:	4b45      	ldr	r3, [pc, #276]	; (e5c4 <_usb_d_dev_ep_enable+0x214>)
    e4ae:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    e4b0:	6978      	ldr	r0, [r7, #20]
    e4b2:	4b45      	ldr	r3, [pc, #276]	; (e5c8 <_usb_d_dev_ep_enable+0x218>)
    e4b4:	4798      	blx	r3
    e4b6:	e06f      	b.n	e598 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    e4b8:	7ebb      	ldrb	r3, [r7, #26]
    e4ba:	2b00      	cmp	r3, #0
    e4bc:	d038      	beq.n	e530 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    e4be:	7cfb      	ldrb	r3, [r7, #19]
    e4c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d002      	beq.n	e4ce <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    e4c8:	f06f 0313 	mvn.w	r3, #19
    e4cc:	e065      	b.n	e59a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    e4ce:	697b      	ldr	r3, [r7, #20]
    e4d0:	7cdb      	ldrb	r3, [r3, #19]
    e4d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4d6:	b2db      	uxtb	r3, r3
    e4d8:	011b      	lsls	r3, r3, #4
    e4da:	b2db      	uxtb	r3, r3
    e4dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e4e0:	b2da      	uxtb	r2, r3
    e4e2:	7cfb      	ldrb	r3, [r7, #19]
    e4e4:	4313      	orrs	r3, r2
    e4e6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e4e8:	7cfa      	ldrb	r2, [r7, #19]
    e4ea:	7efb      	ldrb	r3, [r7, #27]
    e4ec:	4619      	mov	r1, r3
    e4ee:	69f8      	ldr	r0, [r7, #28]
    e4f0:	4b2f      	ldr	r3, [pc, #188]	; (e5b0 <_usb_d_dev_ep_enable+0x200>)
    e4f2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    e4f4:	68fb      	ldr	r3, [r7, #12]
    e4f6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e4fa:	697b      	ldr	r3, [r7, #20]
    e4fc:	8a1b      	ldrh	r3, [r3, #16]
    e4fe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e502:	697b      	ldr	r3, [r7, #20]
    e504:	8a1b      	ldrh	r3, [r3, #16]
    e506:	4618      	mov	r0, r3
    e508:	4b2b      	ldr	r3, [pc, #172]	; (e5b8 <_usb_d_dev_ep_enable+0x208>)
    e50a:	4798      	blx	r3
    e50c:	4603      	mov	r3, r0
    e50e:	071b      	lsls	r3, r3, #28
    e510:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e514:	432b      	orrs	r3, r5
    e516:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e518:	7efb      	ldrb	r3, [r7, #27]
    e51a:	2200      	movs	r2, #0
    e51c:	2101      	movs	r1, #1
    e51e:	4618      	mov	r0, r3
    e520:	4b27      	ldr	r3, [pc, #156]	; (e5c0 <_usb_d_dev_ep_enable+0x210>)
    e522:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e524:	7efb      	ldrb	r3, [r7, #27]
    e526:	2101      	movs	r1, #1
    e528:	4618      	mov	r0, r3
    e52a:	4b26      	ldr	r3, [pc, #152]	; (e5c4 <_usb_d_dev_ep_enable+0x214>)
    e52c:	4798      	blx	r3
    e52e:	e033      	b.n	e598 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    e530:	7cfb      	ldrb	r3, [r7, #19]
    e532:	f003 0307 	and.w	r3, r3, #7
    e536:	2b00      	cmp	r3, #0
    e538:	d002      	beq.n	e540 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    e53a:	f06f 0313 	mvn.w	r3, #19
    e53e:	e02c      	b.n	e59a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    e540:	697b      	ldr	r3, [r7, #20]
    e542:	7cdb      	ldrb	r3, [r3, #19]
    e544:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e548:	b2db      	uxtb	r3, r3
    e54a:	461a      	mov	r2, r3
    e54c:	7cfb      	ldrb	r3, [r7, #19]
    e54e:	4313      	orrs	r3, r2
    e550:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e552:	7cfa      	ldrb	r2, [r7, #19]
    e554:	7efb      	ldrb	r3, [r7, #27]
    e556:	4619      	mov	r1, r3
    e558:	69f8      	ldr	r0, [r7, #28]
    e55a:	4b15      	ldr	r3, [pc, #84]	; (e5b0 <_usb_d_dev_ep_enable+0x200>)
    e55c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e55e:	697b      	ldr	r3, [r7, #20]
    e560:	8a1b      	ldrh	r3, [r3, #16]
    e562:	039b      	lsls	r3, r3, #14
    e564:	4c13      	ldr	r4, [pc, #76]	; (e5b4 <_usb_d_dev_ep_enable+0x204>)
    e566:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e568:	697b      	ldr	r3, [r7, #20]
    e56a:	8a1b      	ldrh	r3, [r3, #16]
    e56c:	4618      	mov	r0, r3
    e56e:	4b12      	ldr	r3, [pc, #72]	; (e5b8 <_usb_d_dev_ep_enable+0x208>)
    e570:	4798      	blx	r3
    e572:	4603      	mov	r3, r0
    e574:	071b      	lsls	r3, r3, #28
    e576:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e57a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e57e:	68fb      	ldr	r3, [r7, #12]
    e580:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e582:	7efb      	ldrb	r3, [r7, #27]
    e584:	2200      	movs	r2, #0
    e586:	2100      	movs	r1, #0
    e588:	4618      	mov	r0, r3
    e58a:	4b0c      	ldr	r3, [pc, #48]	; (e5bc <_usb_d_dev_ep_enable+0x20c>)
    e58c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    e58e:	7efb      	ldrb	r3, [r7, #27]
    e590:	2100      	movs	r1, #0
    e592:	4618      	mov	r0, r3
    e594:	4b0b      	ldr	r3, [pc, #44]	; (e5c4 <_usb_d_dev_ep_enable+0x214>)
    e596:	4798      	blx	r3
	}

	return USB_OK;
    e598:	2300      	movs	r3, #0
}
    e59a:	4618      	mov	r0, r3
    e59c:	3720      	adds	r7, #32
    e59e:	46bd      	mov	sp, r7
    e5a0:	bdb0      	pop	{r4, r5, r7, pc}
    e5a2:	bf00      	nop
    e5a4:	0000d1c9 	.word	0x0000d1c9
    e5a8:	0000c84f 	.word	0x0000c84f
    e5ac:	20001edc 	.word	0x20001edc
    e5b0:	0000c825 	.word	0x0000c825
    e5b4:	0fffc000 	.word	0x0fffc000
    e5b8:	0000d165 	.word	0x0000d165
    e5bc:	0000d10d 	.word	0x0000d10d
    e5c0:	0000d0b5 	.word	0x0000d0b5
    e5c4:	0000d07d 	.word	0x0000d07d
    e5c8:	0000e121 	.word	0x0000e121

0000e5cc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    e5cc:	b580      	push	{r7, lr}
    e5ce:	b084      	sub	sp, #16
    e5d0:	af00      	add	r7, sp, #0
    e5d2:	6078      	str	r0, [r7, #4]
    e5d4:	460b      	mov	r3, r1
    e5d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	7c9b      	ldrb	r3, [r3, #18]
    e5dc:	f003 030f 	and.w	r3, r3, #15
    e5e0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    e5e2:	78fa      	ldrb	r2, [r7, #3]
    e5e4:	7bfb      	ldrb	r3, [r7, #15]
    e5e6:	4611      	mov	r1, r2
    e5e8:	4618      	mov	r0, r3
    e5ea:	4b03      	ldr	r3, [pc, #12]	; (e5f8 <_usb_d_dev_ep_stall_get+0x2c>)
    e5ec:	4798      	blx	r3
    e5ee:	4603      	mov	r3, r0
}
    e5f0:	4618      	mov	r0, r3
    e5f2:	3710      	adds	r7, #16
    e5f4:	46bd      	mov	sp, r7
    e5f6:	bd80      	pop	{r7, pc}
    e5f8:	0000ccbd 	.word	0x0000ccbd

0000e5fc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b084      	sub	sp, #16
    e600:	af00      	add	r7, sp, #0
    e602:	6078      	str	r0, [r7, #4]
    e604:	460b      	mov	r3, r1
    e606:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e608:	687b      	ldr	r3, [r7, #4]
    e60a:	7c9b      	ldrb	r3, [r3, #18]
    e60c:	f003 030f 	and.w	r3, r3, #15
    e610:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    e612:	78f9      	ldrb	r1, [r7, #3]
    e614:	7bfb      	ldrb	r3, [r7, #15]
    e616:	2201      	movs	r2, #1
    e618:	4618      	mov	r0, r3
    e61a:	4b0a      	ldr	r3, [pc, #40]	; (e644 <_usb_d_dev_ep_stall_set+0x48>)
    e61c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e61e:	78fb      	ldrb	r3, [r7, #3]
    e620:	2220      	movs	r2, #32
    e622:	409a      	lsls	r2, r3
    e624:	7bfb      	ldrb	r3, [r7, #15]
    e626:	4611      	mov	r1, r2
    e628:	4618      	mov	r0, r3
    e62a:	4b07      	ldr	r3, [pc, #28]	; (e648 <_usb_d_dev_ep_stall_set+0x4c>)
    e62c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    e62e:	687a      	ldr	r2, [r7, #4]
    e630:	7cd3      	ldrb	r3, [r2, #19]
    e632:	f043 0308 	orr.w	r3, r3, #8
    e636:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    e638:	2300      	movs	r3, #0
}
    e63a:	4618      	mov	r0, r3
    e63c:	3710      	adds	r7, #16
    e63e:	46bd      	mov	sp, r7
    e640:	bd80      	pop	{r7, pc}
    e642:	bf00      	nop
    e644:	0000cc65 	.word	0x0000cc65
    e648:	0000cbe5 	.word	0x0000cbe5

0000e64c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    e64c:	b580      	push	{r7, lr}
    e64e:	b084      	sub	sp, #16
    e650:	af00      	add	r7, sp, #0
    e652:	6078      	str	r0, [r7, #4]
    e654:	460b      	mov	r3, r1
    e656:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    e658:	687b      	ldr	r3, [r7, #4]
    e65a:	7c9b      	ldrb	r3, [r3, #18]
    e65c:	f003 030f 	and.w	r3, r3, #15
    e660:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    e662:	78fa      	ldrb	r2, [r7, #3]
    e664:	7bfb      	ldrb	r3, [r7, #15]
    e666:	4611      	mov	r1, r2
    e668:	4618      	mov	r0, r3
    e66a:	4b28      	ldr	r3, [pc, #160]	; (e70c <_usb_d_dev_ep_stall_clr+0xc0>)
    e66c:	4798      	blx	r3
    e66e:	4603      	mov	r3, r0
    e670:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    e672:	7bbb      	ldrb	r3, [r7, #14]
    e674:	f083 0301 	eor.w	r3, r3, #1
    e678:	b2db      	uxtb	r3, r3
    e67a:	2b00      	cmp	r3, #0
    e67c:	d001      	beq.n	e682 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    e67e:	2300      	movs	r3, #0
    e680:	e040      	b.n	e704 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    e682:	78f9      	ldrb	r1, [r7, #3]
    e684:	7bfb      	ldrb	r3, [r7, #15]
    e686:	2200      	movs	r2, #0
    e688:	4618      	mov	r0, r3
    e68a:	4b21      	ldr	r3, [pc, #132]	; (e710 <_usb_d_dev_ep_stall_clr+0xc4>)
    e68c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e68e:	78fb      	ldrb	r3, [r7, #3]
    e690:	2220      	movs	r2, #32
    e692:	409a      	lsls	r2, r3
    e694:	7bfb      	ldrb	r3, [r7, #15]
    e696:	4611      	mov	r1, r2
    e698:	4618      	mov	r0, r3
    e69a:	4b1e      	ldr	r3, [pc, #120]	; (e714 <_usb_d_dev_ep_stall_clr+0xc8>)
    e69c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    e69e:	78fa      	ldrb	r2, [r7, #3]
    e6a0:	7bfb      	ldrb	r3, [r7, #15]
    e6a2:	4611      	mov	r1, r2
    e6a4:	4618      	mov	r0, r3
    e6a6:	4b1c      	ldr	r3, [pc, #112]	; (e718 <_usb_d_dev_ep_stall_clr+0xcc>)
    e6a8:	4798      	blx	r3
    e6aa:	4603      	mov	r3, r0
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d00b      	beq.n	e6c8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    e6b0:	78fa      	ldrb	r2, [r7, #3]
    e6b2:	7bfb      	ldrb	r3, [r7, #15]
    e6b4:	4611      	mov	r1, r2
    e6b6:	4618      	mov	r0, r3
    e6b8:	4b18      	ldr	r3, [pc, #96]	; (e71c <_usb_d_dev_ep_stall_clr+0xd0>)
    e6ba:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    e6bc:	78f9      	ldrb	r1, [r7, #3]
    e6be:	7bfb      	ldrb	r3, [r7, #15]
    e6c0:	2200      	movs	r2, #0
    e6c2:	4618      	mov	r0, r3
    e6c4:	4b16      	ldr	r3, [pc, #88]	; (e720 <_usb_d_dev_ep_stall_clr+0xd4>)
    e6c6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	7cdb      	ldrb	r3, [r3, #19]
    e6cc:	f003 0307 	and.w	r3, r3, #7
    e6d0:	b2db      	uxtb	r3, r3
    e6d2:	2b01      	cmp	r3, #1
    e6d4:	d110      	bne.n	e6f8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    e6d6:	7bfb      	ldrb	r3, [r7, #15]
    e6d8:	4619      	mov	r1, r3
    e6da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e6de:	4b11      	ldr	r3, [pc, #68]	; (e724 <_usb_d_dev_ep_stall_clr+0xd8>)
    e6e0:	4798      	blx	r3
    e6e2:	4603      	mov	r3, r0
    e6e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	d10a      	bne.n	e702 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    e6ec:	687a      	ldr	r2, [r7, #4]
    e6ee:	7cd3      	ldrb	r3, [r2, #19]
    e6f0:	f36f 03c3 	bfc	r3, #3, #1
    e6f4:	74d3      	strb	r3, [r2, #19]
    e6f6:	e004      	b.n	e702 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    e6f8:	687a      	ldr	r2, [r7, #4]
    e6fa:	7cd3      	ldrb	r3, [r2, #19]
    e6fc:	f36f 03c3 	bfc	r3, #3, #1
    e700:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    e702:	2300      	movs	r3, #0
}
    e704:	4618      	mov	r0, r3
    e706:	3710      	adds	r7, #16
    e708:	46bd      	mov	sp, r7
    e70a:	bd80      	pop	{r7, pc}
    e70c:	0000ccbd 	.word	0x0000ccbd
    e710:	0000cc65 	.word	0x0000cc65
    e714:	0000cc0d 	.word	0x0000cc0d
    e718:	0000cd01 	.word	0x0000cd01
    e71c:	0000cd45 	.word	0x0000cd45
    e720:	0000ce31 	.word	0x0000ce31
    e724:	0000c6ed 	.word	0x0000c6ed

0000e728 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    e728:	b580      	push	{r7, lr}
    e72a:	b086      	sub	sp, #24
    e72c:	af00      	add	r7, sp, #0
    e72e:	4603      	mov	r3, r0
    e730:	460a      	mov	r2, r1
    e732:	71fb      	strb	r3, [r7, #7]
    e734:	4613      	mov	r3, r2
    e736:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    e738:	79fb      	ldrb	r3, [r7, #7]
    e73a:	f003 030f 	and.w	r3, r3, #15
    e73e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    e740:	79fb      	ldrb	r3, [r7, #7]
    e742:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e746:	2b00      	cmp	r3, #0
    e748:	bf14      	ite	ne
    e74a:	2301      	movne	r3, #1
    e74c:	2300      	moveq	r3, #0
    e74e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e750:	7cba      	ldrb	r2, [r7, #18]
    e752:	7cfb      	ldrb	r3, [r7, #19]
    e754:	4611      	mov	r1, r2
    e756:	4618      	mov	r0, r3
    e758:	4b13      	ldr	r3, [pc, #76]	; (e7a8 <_usb_d_dev_ep_stall+0x80>)
    e75a:	4798      	blx	r3
    e75c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    e75e:	7cfb      	ldrb	r3, [r7, #19]
    e760:	2b04      	cmp	r3, #4
    e762:	d902      	bls.n	e76a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    e764:	f06f 0311 	mvn.w	r3, #17
    e768:	e01a      	b.n	e7a0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    e76a:	79bb      	ldrb	r3, [r7, #6]
    e76c:	2b01      	cmp	r3, #1
    e76e:	d106      	bne.n	e77e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    e770:	7cbb      	ldrb	r3, [r7, #18]
    e772:	4619      	mov	r1, r3
    e774:	68f8      	ldr	r0, [r7, #12]
    e776:	4b0d      	ldr	r3, [pc, #52]	; (e7ac <_usb_d_dev_ep_stall+0x84>)
    e778:	4798      	blx	r3
    e77a:	6178      	str	r0, [r7, #20]
    e77c:	e00f      	b.n	e79e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    e77e:	79bb      	ldrb	r3, [r7, #6]
    e780:	2b00      	cmp	r3, #0
    e782:	d106      	bne.n	e792 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    e784:	7cbb      	ldrb	r3, [r7, #18]
    e786:	4619      	mov	r1, r3
    e788:	68f8      	ldr	r0, [r7, #12]
    e78a:	4b09      	ldr	r3, [pc, #36]	; (e7b0 <_usb_d_dev_ep_stall+0x88>)
    e78c:	4798      	blx	r3
    e78e:	6178      	str	r0, [r7, #20]
    e790:	e005      	b.n	e79e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    e792:	7cbb      	ldrb	r3, [r7, #18]
    e794:	4619      	mov	r1, r3
    e796:	68f8      	ldr	r0, [r7, #12]
    e798:	4b06      	ldr	r3, [pc, #24]	; (e7b4 <_usb_d_dev_ep_stall+0x8c>)
    e79a:	4798      	blx	r3
    e79c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    e79e:	697b      	ldr	r3, [r7, #20]
}
    e7a0:	4618      	mov	r0, r3
    e7a2:	3718      	adds	r7, #24
    e7a4:	46bd      	mov	sp, r7
    e7a6:	bd80      	pop	{r7, pc}
    e7a8:	0000d1c9 	.word	0x0000d1c9
    e7ac:	0000e5fd 	.word	0x0000e5fd
    e7b0:	0000e64d 	.word	0x0000e64d
    e7b4:	0000e5cd 	.word	0x0000e5cd

0000e7b8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    e7b8:	b580      	push	{r7, lr}
    e7ba:	b082      	sub	sp, #8
    e7bc:	af00      	add	r7, sp, #0
    e7be:	6078      	str	r0, [r7, #4]
    e7c0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e7c2:	687b      	ldr	r3, [r7, #4]
    e7c4:	7c9b      	ldrb	r3, [r3, #18]
    e7c6:	2bff      	cmp	r3, #255	; 0xff
    e7c8:	d014      	beq.n	e7f4 <_usb_d_dev_trans_done+0x3c>
    e7ca:	687b      	ldr	r3, [r7, #4]
    e7cc:	7cdb      	ldrb	r3, [r3, #19]
    e7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e7d2:	b2db      	uxtb	r3, r3
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	d00d      	beq.n	e7f4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    e7d8:	687a      	ldr	r2, [r7, #4]
    e7da:	7cd3      	ldrb	r3, [r2, #19]
    e7dc:	f36f 1386 	bfc	r3, #6, #1
    e7e0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    e7e2:	4b06      	ldr	r3, [pc, #24]	; (e7fc <_usb_d_dev_trans_done+0x44>)
    e7e4:	691b      	ldr	r3, [r3, #16]
    e7e6:	687a      	ldr	r2, [r7, #4]
    e7e8:	7c90      	ldrb	r0, [r2, #18]
    e7ea:	687a      	ldr	r2, [r7, #4]
    e7ec:	6892      	ldr	r2, [r2, #8]
    e7ee:	6839      	ldr	r1, [r7, #0]
    e7f0:	4798      	blx	r3
    e7f2:	e000      	b.n	e7f6 <_usb_d_dev_trans_done+0x3e>
		return;
    e7f4:	bf00      	nop
}
    e7f6:	3708      	adds	r7, #8
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd80      	pop	{r7, pc}
    e7fc:	20001e14 	.word	0x20001e14

0000e800 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    e800:	b580      	push	{r7, lr}
    e802:	b086      	sub	sp, #24
    e804:	af00      	add	r7, sp, #0
    e806:	60f8      	str	r0, [r7, #12]
    e808:	460b      	mov	r3, r1
    e80a:	607a      	str	r2, [r7, #4]
    e80c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e80e:	68fb      	ldr	r3, [r7, #12]
    e810:	7c9b      	ldrb	r3, [r3, #18]
    e812:	f003 030f 	and.w	r3, r3, #15
    e816:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    e818:	4b1f      	ldr	r3, [pc, #124]	; (e898 <_usb_d_dev_trans_stop+0x98>)
    e81a:	881b      	ldrh	r3, [r3, #0]
    e81c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e81e:	68fb      	ldr	r3, [r7, #12]
    e820:	7c9b      	ldrb	r3, [r3, #18]
    e822:	2bff      	cmp	r3, #255	; 0xff
    e824:	d033      	beq.n	e88e <_usb_d_dev_trans_stop+0x8e>
    e826:	68fb      	ldr	r3, [r7, #12]
    e828:	7cdb      	ldrb	r3, [r3, #19]
    e82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e82e:	b2db      	uxtb	r3, r3
    e830:	2b00      	cmp	r3, #0
    e832:	d02c      	beq.n	e88e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    e834:	7afb      	ldrb	r3, [r7, #11]
    e836:	2b00      	cmp	r3, #0
    e838:	d006      	beq.n	e848 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e83a:	7dfb      	ldrb	r3, [r7, #23]
    e83c:	2200      	movs	r2, #0
    e83e:	2101      	movs	r1, #1
    e840:	4618      	mov	r0, r3
    e842:	4b16      	ldr	r3, [pc, #88]	; (e89c <_usb_d_dev_trans_stop+0x9c>)
    e844:	4798      	blx	r3
    e846:	e005      	b.n	e854 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e848:	7dfb      	ldrb	r3, [r7, #23]
    e84a:	2200      	movs	r2, #0
    e84c:	2100      	movs	r1, #0
    e84e:	4618      	mov	r0, r3
    e850:	4b13      	ldr	r3, [pc, #76]	; (e8a0 <_usb_d_dev_trans_stop+0xa0>)
    e852:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    e854:	7afb      	ldrb	r3, [r7, #11]
    e856:	f107 0218 	add.w	r2, r7, #24
    e85a:	4413      	add	r3, r2
    e85c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e860:	461a      	mov	r2, r3
    e862:	7dfb      	ldrb	r3, [r7, #23]
    e864:	4611      	mov	r1, r2
    e866:	4618      	mov	r0, r3
    e868:	4b0e      	ldr	r3, [pc, #56]	; (e8a4 <_usb_d_dev_trans_stop+0xa4>)
    e86a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    e86c:	7afb      	ldrb	r3, [r7, #11]
    e86e:	f107 0218 	add.w	r2, r7, #24
    e872:	4413      	add	r3, r2
    e874:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e878:	461a      	mov	r2, r3
    e87a:	7dfb      	ldrb	r3, [r7, #23]
    e87c:	4611      	mov	r1, r2
    e87e:	4618      	mov	r0, r3
    e880:	4b09      	ldr	r3, [pc, #36]	; (e8a8 <_usb_d_dev_trans_stop+0xa8>)
    e882:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    e884:	6879      	ldr	r1, [r7, #4]
    e886:	68f8      	ldr	r0, [r7, #12]
    e888:	4b08      	ldr	r3, [pc, #32]	; (e8ac <_usb_d_dev_trans_stop+0xac>)
    e88a:	4798      	blx	r3
    e88c:	e000      	b.n	e890 <_usb_d_dev_trans_stop+0x90>
		return;
    e88e:	bf00      	nop
}
    e890:	3718      	adds	r7, #24
    e892:	46bd      	mov	sp, r7
    e894:	bd80      	pop	{r7, pc}
    e896:	bf00      	nop
    e898:	00012c50 	.word	0x00012c50
    e89c:	0000d0b5 	.word	0x0000d0b5
    e8a0:	0000d10d 	.word	0x0000d10d
    e8a4:	0000cbbd 	.word	0x0000cbbd
    e8a8:	0000cc0d 	.word	0x0000cc0d
    e8ac:	0000e7b9 	.word	0x0000e7b9

0000e8b0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    e8b0:	b580      	push	{r7, lr}
    e8b2:	b086      	sub	sp, #24
    e8b4:	af00      	add	r7, sp, #0
    e8b6:	4603      	mov	r3, r0
    e8b8:	6039      	str	r1, [r7, #0]
    e8ba:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    e8bc:	79fb      	ldrb	r3, [r7, #7]
    e8be:	f003 030f 	and.w	r3, r3, #15
    e8c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    e8c4:	7dfb      	ldrb	r3, [r7, #23]
    e8c6:	015b      	lsls	r3, r3, #5
    e8c8:	4a1e      	ldr	r2, [pc, #120]	; (e944 <_usb_d_dev_ep_read_req+0x94>)
    e8ca:	4413      	add	r3, r2
    e8cc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    e8ce:	693b      	ldr	r3, [r7, #16]
    e8d0:	681b      	ldr	r3, [r3, #0]
    e8d2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    e8d4:	693b      	ldr	r3, [r7, #16]
    e8d6:	685b      	ldr	r3, [r3, #4]
    e8d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e8dc:	b29b      	uxth	r3, r3
    e8de:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    e8e0:	7dfb      	ldrb	r3, [r7, #23]
    e8e2:	2b04      	cmp	r3, #4
    e8e4:	d802      	bhi.n	e8ec <_usb_d_dev_ep_read_req+0x3c>
    e8e6:	683b      	ldr	r3, [r7, #0]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d102      	bne.n	e8f2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    e8ec:	f06f 0311 	mvn.w	r3, #17
    e8f0:	e023      	b.n	e93a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    e8f2:	7dfb      	ldrb	r3, [r7, #23]
    e8f4:	4618      	mov	r0, r3
    e8f6:	4b14      	ldr	r3, [pc, #80]	; (e948 <_usb_d_dev_ep_read_req+0x98>)
    e8f8:	4798      	blx	r3
    e8fa:	4603      	mov	r3, r0
    e8fc:	f083 0301 	eor.w	r3, r3, #1
    e900:	b2db      	uxtb	r3, r3
    e902:	2b00      	cmp	r3, #0
    e904:	d002      	beq.n	e90c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    e906:	f06f 0312 	mvn.w	r3, #18
    e90a:	e016      	b.n	e93a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    e90c:	7dfb      	ldrb	r3, [r7, #23]
    e90e:	4618      	mov	r0, r3
    e910:	4b0e      	ldr	r3, [pc, #56]	; (e94c <_usb_d_dev_ep_read_req+0x9c>)
    e912:	4798      	blx	r3
    e914:	4603      	mov	r3, r0
    e916:	f083 0301 	eor.w	r3, r3, #1
    e91a:	b2db      	uxtb	r3, r3
    e91c:	2b00      	cmp	r3, #0
    e91e:	d001      	beq.n	e924 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    e920:	2300      	movs	r3, #0
    e922:	e00a      	b.n	e93a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    e924:	68fb      	ldr	r3, [r7, #12]
    e926:	2208      	movs	r2, #8
    e928:	4619      	mov	r1, r3
    e92a:	6838      	ldr	r0, [r7, #0]
    e92c:	4b08      	ldr	r3, [pc, #32]	; (e950 <_usb_d_dev_ep_read_req+0xa0>)
    e92e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    e930:	7dfb      	ldrb	r3, [r7, #23]
    e932:	4618      	mov	r0, r3
    e934:	4b07      	ldr	r3, [pc, #28]	; (e954 <_usb_d_dev_ep_read_req+0xa4>)
    e936:	4798      	blx	r3

	return bytes;
    e938:	897b      	ldrh	r3, [r7, #10]
}
    e93a:	4618      	mov	r0, r3
    e93c:	3718      	adds	r7, #24
    e93e:	46bd      	mov	sp, r7
    e940:	bd80      	pop	{r7, pc}
    e942:	bf00      	nop
    e944:	20001edc 	.word	0x20001edc
    e948:	0000cc35 	.word	0x0000cc35
    e94c:	0000cde1 	.word	0x0000cde1
    e950:	00011b19 	.word	0x00011b19
    e954:	0000ce11 	.word	0x0000ce11

0000e958 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    e958:	b580      	push	{r7, lr}
    e95a:	b086      	sub	sp, #24
    e95c:	af00      	add	r7, sp, #0
    e95e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	7a1b      	ldrb	r3, [r3, #8]
    e964:	f003 030f 	and.w	r3, r3, #15
    e968:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    e96a:	687b      	ldr	r3, [r7, #4]
    e96c:	7a1b      	ldrb	r3, [r3, #8]
    e96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e972:	2b00      	cmp	r3, #0
    e974:	bf14      	ite	ne
    e976:	2301      	movne	r3, #1
    e978:	2300      	moveq	r3, #0
    e97a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e97c:	7d7a      	ldrb	r2, [r7, #21]
    e97e:	7dbb      	ldrb	r3, [r7, #22]
    e980:	4611      	mov	r1, r2
    e982:	4618      	mov	r0, r3
    e984:	4b5f      	ldr	r3, [pc, #380]	; (eb04 <_usb_d_dev_ep_trans+0x1ac>)
    e986:	4798      	blx	r3
    e988:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    e98a:	693b      	ldr	r3, [r7, #16]
    e98c:	8a1b      	ldrh	r3, [r3, #16]
    e98e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e992:	4293      	cmp	r3, r2
    e994:	d004      	beq.n	e9a0 <_usb_d_dev_ep_trans+0x48>
    e996:	693b      	ldr	r3, [r7, #16]
    e998:	8a1b      	ldrh	r3, [r3, #16]
    e99a:	3b01      	subs	r3, #1
    e99c:	b29b      	uxth	r3, r3
    e99e:	e001      	b.n	e9a4 <_usb_d_dev_ep_trans+0x4c>
    e9a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e9a4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    e9a6:	687b      	ldr	r3, [r7, #4]
    e9a8:	685a      	ldr	r2, [r3, #4]
    e9aa:	89fb      	ldrh	r3, [r7, #14]
    e9ac:	4013      	ands	r3, r2
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	bf14      	ite	ne
    e9b2:	2301      	movne	r3, #1
    e9b4:	2300      	moveq	r3, #0
    e9b6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    e9b8:	2300      	movs	r3, #0
    e9ba:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    e9bc:	7dbb      	ldrb	r3, [r7, #22]
    e9be:	2b04      	cmp	r3, #4
    e9c0:	d902      	bls.n	e9c8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    e9c2:	f06f 0311 	mvn.w	r3, #17
    e9c6:	e098      	b.n	eafa <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    e9c8:	687b      	ldr	r3, [r7, #4]
    e9ca:	681b      	ldr	r3, [r3, #0]
    e9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e9d0:	d31a      	bcc.n	ea08 <_usb_d_dev_ep_trans+0xb0>
    e9d2:	687b      	ldr	r3, [r7, #4]
    e9d4:	681b      	ldr	r3, [r3, #0]
    e9d6:	461a      	mov	r2, r3
    e9d8:	687b      	ldr	r3, [r7, #4]
    e9da:	685b      	ldr	r3, [r3, #4]
    e9dc:	4413      	add	r3, r2
    e9de:	4a4a      	ldr	r2, [pc, #296]	; (eb08 <_usb_d_dev_ep_trans+0x1b0>)
    e9e0:	4293      	cmp	r3, r2
    e9e2:	d811      	bhi.n	ea08 <_usb_d_dev_ep_trans+0xb0>
    e9e4:	687b      	ldr	r3, [r7, #4]
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	f003 0303 	and.w	r3, r3, #3
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	d10b      	bne.n	ea08 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    e9f0:	7d7b      	ldrb	r3, [r7, #21]
    e9f2:	f083 0301 	eor.w	r3, r3, #1
    e9f6:	b2db      	uxtb	r3, r3
    e9f8:	2b00      	cmp	r3, #0
    e9fa:	d00e      	beq.n	ea1a <_usb_d_dev_ep_trans+0xc2>
    e9fc:	687b      	ldr	r3, [r7, #4]
    e9fe:	685b      	ldr	r3, [r3, #4]
    ea00:	693a      	ldr	r2, [r7, #16]
    ea02:	8a12      	ldrh	r2, [r2, #16]
    ea04:	4293      	cmp	r3, r2
    ea06:	d208      	bcs.n	ea1a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    ea08:	693b      	ldr	r3, [r7, #16]
    ea0a:	68db      	ldr	r3, [r3, #12]
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	d102      	bne.n	ea16 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    ea10:	f06f 0312 	mvn.w	r3, #18
    ea14:	e071      	b.n	eafa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ea16:	2301      	movs	r3, #1
    ea18:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ea1a:	7d7b      	ldrb	r3, [r7, #21]
    ea1c:	f083 0301 	eor.w	r3, r3, #1
    ea20:	b2db      	uxtb	r3, r3
    ea22:	2b00      	cmp	r3, #0
    ea24:	d009      	beq.n	ea3a <_usb_d_dev_ep_trans+0xe2>
    ea26:	7b7b      	ldrb	r3, [r7, #13]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d006      	beq.n	ea3a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    ea2c:	693b      	ldr	r3, [r7, #16]
    ea2e:	68db      	ldr	r3, [r3, #12]
    ea30:	2b00      	cmp	r3, #0
    ea32:	d102      	bne.n	ea3a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ea34:	f06f 0311 	mvn.w	r3, #17
    ea38:	e05f      	b.n	eafa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ea3a:	693b      	ldr	r3, [r7, #16]
    ea3c:	7cdb      	ldrb	r3, [r3, #19]
    ea3e:	f003 0308 	and.w	r3, r3, #8
    ea42:	b2db      	uxtb	r3, r3
    ea44:	2b00      	cmp	r3, #0
    ea46:	d001      	beq.n	ea4c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ea48:	2302      	movs	r3, #2
    ea4a:	e056      	b.n	eafa <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ea4c:	f107 0308 	add.w	r3, r7, #8
    ea50:	4618      	mov	r0, r3
    ea52:	4b2e      	ldr	r3, [pc, #184]	; (eb0c <_usb_d_dev_ep_trans+0x1b4>)
    ea54:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ea56:	693b      	ldr	r3, [r7, #16]
    ea58:	7cdb      	ldrb	r3, [r3, #19]
    ea5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ea5e:	b2db      	uxtb	r3, r3
    ea60:	2b00      	cmp	r3, #0
    ea62:	d006      	beq.n	ea72 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ea64:	f107 0308 	add.w	r3, r7, #8
    ea68:	4618      	mov	r0, r3
    ea6a:	4b29      	ldr	r3, [pc, #164]	; (eb10 <_usb_d_dev_ep_trans+0x1b8>)
    ea6c:	4798      	blx	r3
		return USB_BUSY;
    ea6e:	2301      	movs	r3, #1
    ea70:	e043      	b.n	eafa <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ea72:	693a      	ldr	r2, [r7, #16]
    ea74:	7cd3      	ldrb	r3, [r2, #19]
    ea76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea7a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ea7c:	f107 0308 	add.w	r3, r7, #8
    ea80:	4618      	mov	r0, r3
    ea82:	4b23      	ldr	r3, [pc, #140]	; (eb10 <_usb_d_dev_ep_trans+0x1b8>)
    ea84:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ea86:	687b      	ldr	r3, [r7, #4]
    ea88:	681a      	ldr	r2, [r3, #0]
    ea8a:	693b      	ldr	r3, [r7, #16]
    ea8c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ea8e:	687b      	ldr	r3, [r7, #4]
    ea90:	685a      	ldr	r2, [r3, #4]
    ea92:	693b      	ldr	r3, [r7, #16]
    ea94:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    ea96:	693b      	ldr	r3, [r7, #16]
    ea98:	2200      	movs	r2, #0
    ea9a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    ea9c:	693a      	ldr	r2, [r7, #16]
    ea9e:	7cd3      	ldrb	r3, [r2, #19]
    eaa0:	7d79      	ldrb	r1, [r7, #21]
    eaa2:	f361 13c7 	bfi	r3, r1, #7, #1
    eaa6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    eaa8:	693a      	ldr	r2, [r7, #16]
    eaaa:	7cd3      	ldrb	r3, [r2, #19]
    eaac:	7df9      	ldrb	r1, [r7, #23]
    eaae:	f361 1345 	bfi	r3, r1, #5, #1
    eab2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    eab4:	687b      	ldr	r3, [r7, #4]
    eab6:	7a5b      	ldrb	r3, [r3, #9]
    eab8:	2b00      	cmp	r3, #0
    eaba:	d007      	beq.n	eacc <_usb_d_dev_ep_trans+0x174>
    eabc:	7b7b      	ldrb	r3, [r7, #13]
    eabe:	f083 0301 	eor.w	r3, r3, #1
    eac2:	b2db      	uxtb	r3, r3
    eac4:	2b00      	cmp	r3, #0
    eac6:	d001      	beq.n	eacc <_usb_d_dev_ep_trans+0x174>
    eac8:	2301      	movs	r3, #1
    eaca:	e000      	b.n	eace <_usb_d_dev_ep_trans+0x176>
    eacc:	2300      	movs	r3, #0
    eace:	b2db      	uxtb	r3, r3
    ead0:	f003 0301 	and.w	r3, r3, #1
    ead4:	b2d9      	uxtb	r1, r3
    ead6:	693a      	ldr	r2, [r7, #16]
    ead8:	7cd3      	ldrb	r3, [r2, #19]
    eada:	f361 1304 	bfi	r3, r1, #4, #1
    eade:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    eae0:	7d7b      	ldrb	r3, [r7, #21]
    eae2:	2b00      	cmp	r3, #0
    eae4:	d004      	beq.n	eaf0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    eae6:	2100      	movs	r1, #0
    eae8:	6938      	ldr	r0, [r7, #16]
    eaea:	4b0a      	ldr	r3, [pc, #40]	; (eb14 <_usb_d_dev_ep_trans+0x1bc>)
    eaec:	4798      	blx	r3
    eaee:	e003      	b.n	eaf8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    eaf0:	2100      	movs	r1, #0
    eaf2:	6938      	ldr	r0, [r7, #16]
    eaf4:	4b08      	ldr	r3, [pc, #32]	; (eb18 <_usb_d_dev_ep_trans+0x1c0>)
    eaf6:	4798      	blx	r3
	}

	return ERR_NONE;
    eaf8:	2300      	movs	r3, #0
}
    eafa:	4618      	mov	r0, r3
    eafc:	3718      	adds	r7, #24
    eafe:	46bd      	mov	sp, r7
    eb00:	bd80      	pop	{r7, pc}
    eb02:	bf00      	nop
    eb04:	0000d1c9 	.word	0x0000d1c9
    eb08:	20041fff 	.word	0x20041fff
    eb0c:	0000f2d1 	.word	0x0000f2d1
    eb10:	0000f2f7 	.word	0x0000f2f7
    eb14:	0000d491 	.word	0x0000d491
    eb18:	0000d6a9 	.word	0x0000d6a9

0000eb1c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    eb1c:	b480      	push	{r7}
    eb1e:	b085      	sub	sp, #20
    eb20:	af00      	add	r7, sp, #0
    eb22:	4603      	mov	r3, r0
    eb24:	6039      	str	r1, [r7, #0]
    eb26:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    eb28:	683b      	ldr	r3, [r7, #0]
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d001      	beq.n	eb32 <_usb_d_dev_register_callback+0x16>
    eb2e:	683b      	ldr	r3, [r7, #0]
    eb30:	e000      	b.n	eb34 <_usb_d_dev_register_callback+0x18>
    eb32:	4b0a      	ldr	r3, [pc, #40]	; (eb5c <_usb_d_dev_register_callback+0x40>)
    eb34:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    eb36:	79fb      	ldrb	r3, [r7, #7]
    eb38:	2b01      	cmp	r3, #1
    eb3a:	d103      	bne.n	eb44 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    eb3c:	4a08      	ldr	r2, [pc, #32]	; (eb60 <_usb_d_dev_register_callback+0x44>)
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    eb42:	e005      	b.n	eb50 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    eb44:	79fb      	ldrb	r3, [r7, #7]
    eb46:	2b00      	cmp	r3, #0
    eb48:	d102      	bne.n	eb50 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    eb4a:	4a05      	ldr	r2, [pc, #20]	; (eb60 <_usb_d_dev_register_callback+0x44>)
    eb4c:	68fb      	ldr	r3, [r7, #12]
    eb4e:	6013      	str	r3, [r2, #0]
}
    eb50:	bf00      	nop
    eb52:	3714      	adds	r7, #20
    eb54:	46bd      	mov	sp, r7
    eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb5a:	4770      	bx	lr
    eb5c:	0000ca51 	.word	0x0000ca51
    eb60:	20001e14 	.word	0x20001e14

0000eb64 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    eb64:	b480      	push	{r7}
    eb66:	b085      	sub	sp, #20
    eb68:	af00      	add	r7, sp, #0
    eb6a:	4603      	mov	r3, r0
    eb6c:	6039      	str	r1, [r7, #0]
    eb6e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    eb70:	683b      	ldr	r3, [r7, #0]
    eb72:	2b00      	cmp	r3, #0
    eb74:	d001      	beq.n	eb7a <_usb_d_dev_register_ep_callback+0x16>
    eb76:	683b      	ldr	r3, [r7, #0]
    eb78:	e000      	b.n	eb7c <_usb_d_dev_register_ep_callback+0x18>
    eb7a:	4b0e      	ldr	r3, [pc, #56]	; (ebb4 <_usb_d_dev_register_ep_callback+0x50>)
    eb7c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    eb7e:	79fb      	ldrb	r3, [r7, #7]
    eb80:	2b00      	cmp	r3, #0
    eb82:	d103      	bne.n	eb8c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    eb84:	4a0c      	ldr	r2, [pc, #48]	; (ebb8 <_usb_d_dev_register_ep_callback+0x54>)
    eb86:	68fb      	ldr	r3, [r7, #12]
    eb88:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    eb8a:	e00c      	b.n	eba6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    eb8c:	79fb      	ldrb	r3, [r7, #7]
    eb8e:	2b01      	cmp	r3, #1
    eb90:	d103      	bne.n	eb9a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    eb92:	4a09      	ldr	r2, [pc, #36]	; (ebb8 <_usb_d_dev_register_ep_callback+0x54>)
    eb94:	68fb      	ldr	r3, [r7, #12]
    eb96:	60d3      	str	r3, [r2, #12]
}
    eb98:	e005      	b.n	eba6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    eb9a:	79fb      	ldrb	r3, [r7, #7]
    eb9c:	2b02      	cmp	r3, #2
    eb9e:	d102      	bne.n	eba6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    eba0:	4a05      	ldr	r2, [pc, #20]	; (ebb8 <_usb_d_dev_register_ep_callback+0x54>)
    eba2:	68fb      	ldr	r3, [r7, #12]
    eba4:	6113      	str	r3, [r2, #16]
}
    eba6:	bf00      	nop
    eba8:	3714      	adds	r7, #20
    ebaa:	46bd      	mov	sp, r7
    ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebb0:	4770      	bx	lr
    ebb2:	bf00      	nop
    ebb4:	0000ca51 	.word	0x0000ca51
    ebb8:	20001e14 	.word	0x20001e14

0000ebbc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ebbc:	b580      	push	{r7, lr}
    ebbe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ebc0:	4b01      	ldr	r3, [pc, #4]	; (ebc8 <USB_0_Handler+0xc>)
    ebc2:	4798      	blx	r3
}
    ebc4:	bf00      	nop
    ebc6:	bd80      	pop	{r7, pc}
    ebc8:	0000de81 	.word	0x0000de81

0000ebcc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ebcc:	b580      	push	{r7, lr}
    ebce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ebd0:	4b01      	ldr	r3, [pc, #4]	; (ebd8 <USB_1_Handler+0xc>)
    ebd2:	4798      	blx	r3
}
    ebd4:	bf00      	nop
    ebd6:	bd80      	pop	{r7, pc}
    ebd8:	0000de81 	.word	0x0000de81

0000ebdc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ebdc:	b580      	push	{r7, lr}
    ebde:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ebe0:	4b01      	ldr	r3, [pc, #4]	; (ebe8 <USB_2_Handler+0xc>)
    ebe2:	4798      	blx	r3
}
    ebe4:	bf00      	nop
    ebe6:	bd80      	pop	{r7, pc}
    ebe8:	0000de81 	.word	0x0000de81

0000ebec <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ebec:	b580      	push	{r7, lr}
    ebee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ebf0:	4b01      	ldr	r3, [pc, #4]	; (ebf8 <USB_3_Handler+0xc>)
    ebf2:	4798      	blx	r3
}
    ebf4:	bf00      	nop
    ebf6:	bd80      	pop	{r7, pc}
    ebf8:	0000de81 	.word	0x0000de81

0000ebfc <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ebfc:	b480      	push	{r7}
    ebfe:	b083      	sub	sp, #12
    ec00:	af00      	add	r7, sp, #0
    ec02:	6078      	str	r0, [r7, #4]
    ec04:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ec06:	bf00      	nop
    ec08:	687b      	ldr	r3, [r7, #4]
    ec0a:	689a      	ldr	r2, [r3, #8]
    ec0c:	683b      	ldr	r3, [r7, #0]
    ec0e:	4013      	ands	r3, r2
    ec10:	2b00      	cmp	r3, #0
    ec12:	d1f9      	bne.n	ec08 <hri_wdt_wait_for_sync+0xc>
	};
}
    ec14:	bf00      	nop
    ec16:	370c      	adds	r7, #12
    ec18:	46bd      	mov	sp, r7
    ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec1e:	4770      	bx	lr

0000ec20 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ec20:	b580      	push	{r7, lr}
    ec22:	b084      	sub	sp, #16
    ec24:	af00      	add	r7, sp, #0
    ec26:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ec28:	210e      	movs	r1, #14
    ec2a:	6878      	ldr	r0, [r7, #4]
    ec2c:	4b0a      	ldr	r3, [pc, #40]	; (ec58 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ec2e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	781b      	ldrb	r3, [r3, #0]
    ec34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ec36:	7bfb      	ldrb	r3, [r7, #15]
    ec38:	085b      	lsrs	r3, r3, #1
    ec3a:	b2db      	uxtb	r3, r3
    ec3c:	f003 0301 	and.w	r3, r3, #1
    ec40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ec42:	7bfb      	ldrb	r3, [r7, #15]
    ec44:	2b00      	cmp	r3, #0
    ec46:	bf14      	ite	ne
    ec48:	2301      	movne	r3, #1
    ec4a:	2300      	moveq	r3, #0
    ec4c:	b2db      	uxtb	r3, r3
}
    ec4e:	4618      	mov	r0, r3
    ec50:	3710      	adds	r7, #16
    ec52:	46bd      	mov	sp, r7
    ec54:	bd80      	pop	{r7, pc}
    ec56:	bf00      	nop
    ec58:	0000ebfd 	.word	0x0000ebfd

0000ec5c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ec5c:	b580      	push	{r7, lr}
    ec5e:	b082      	sub	sp, #8
    ec60:	af00      	add	r7, sp, #0
    ec62:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ec64:	687b      	ldr	r3, [r7, #4]
    ec66:	781b      	ldrb	r3, [r3, #0]
    ec68:	b2db      	uxtb	r3, r3
    ec6a:	f023 0304 	bic.w	r3, r3, #4
    ec6e:	b2da      	uxtb	r2, r3
    ec70:	687b      	ldr	r3, [r7, #4]
    ec72:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ec74:	210e      	movs	r1, #14
    ec76:	6878      	ldr	r0, [r7, #4]
    ec78:	4b02      	ldr	r3, [pc, #8]	; (ec84 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ec7a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ec7c:	bf00      	nop
    ec7e:	3708      	adds	r7, #8
    ec80:	46bd      	mov	sp, r7
    ec82:	bd80      	pop	{r7, pc}
    ec84:	0000ebfd 	.word	0x0000ebfd

0000ec88 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ec88:	b580      	push	{r7, lr}
    ec8a:	b084      	sub	sp, #16
    ec8c:	af00      	add	r7, sp, #0
    ec8e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ec90:	210e      	movs	r1, #14
    ec92:	6878      	ldr	r0, [r7, #4]
    ec94:	4b08      	ldr	r3, [pc, #32]	; (ecb8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ec96:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ec98:	687b      	ldr	r3, [r7, #4]
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ec9e:	7bfb      	ldrb	r3, [r7, #15]
    eca0:	09db      	lsrs	r3, r3, #7
    eca2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    eca4:	7bfb      	ldrb	r3, [r7, #15]
    eca6:	2b00      	cmp	r3, #0
    eca8:	bf14      	ite	ne
    ecaa:	2301      	movne	r3, #1
    ecac:	2300      	moveq	r3, #0
    ecae:	b2db      	uxtb	r3, r3
}
    ecb0:	4618      	mov	r0, r3
    ecb2:	3710      	adds	r7, #16
    ecb4:	46bd      	mov	sp, r7
    ecb6:	bd80      	pop	{r7, pc}
    ecb8:	0000ebfd 	.word	0x0000ebfd

0000ecbc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ecbc:	b480      	push	{r7}
    ecbe:	b085      	sub	sp, #20
    ecc0:	af00      	add	r7, sp, #0
    ecc2:	6078      	str	r0, [r7, #4]
    ecc4:	460b      	mov	r3, r1
    ecc6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ecc8:	687b      	ldr	r3, [r7, #4]
    ecca:	785b      	ldrb	r3, [r3, #1]
    eccc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ecce:	7bfb      	ldrb	r3, [r7, #15]
    ecd0:	f023 030f 	bic.w	r3, r3, #15
    ecd4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ecd6:	78fb      	ldrb	r3, [r7, #3]
    ecd8:	f003 030f 	and.w	r3, r3, #15
    ecdc:	b2da      	uxtb	r2, r3
    ecde:	7bfb      	ldrb	r3, [r7, #15]
    ece0:	4313      	orrs	r3, r2
    ece2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	7bfa      	ldrb	r2, [r7, #15]
    ece8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ecea:	bf00      	nop
    ecec:	3714      	adds	r7, #20
    ecee:	46bd      	mov	sp, r7
    ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecf4:	4770      	bx	lr
	...

0000ecf8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b082      	sub	sp, #8
    ecfc:	af00      	add	r7, sp, #0
    ecfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ed00:	687b      	ldr	r3, [r7, #4]
    ed02:	2b00      	cmp	r3, #0
    ed04:	d005      	beq.n	ed12 <_wdt_init+0x1a>
    ed06:	687b      	ldr	r3, [r7, #4]
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d001      	beq.n	ed12 <_wdt_init+0x1a>
    ed0e:	2301      	movs	r3, #1
    ed10:	e000      	b.n	ed14 <_wdt_init+0x1c>
    ed12:	2300      	movs	r3, #0
    ed14:	f003 0301 	and.w	r3, r3, #1
    ed18:	b2db      	uxtb	r3, r3
    ed1a:	2250      	movs	r2, #80	; 0x50
    ed1c:	4913      	ldr	r1, [pc, #76]	; (ed6c <_wdt_init+0x74>)
    ed1e:	4618      	mov	r0, r3
    ed20:	4b13      	ldr	r3, [pc, #76]	; (ed70 <_wdt_init+0x78>)
    ed22:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ed24:	687b      	ldr	r3, [r7, #4]
    ed26:	681b      	ldr	r3, [r3, #0]
    ed28:	4618      	mov	r0, r3
    ed2a:	4b12      	ldr	r3, [pc, #72]	; (ed74 <_wdt_init+0x7c>)
    ed2c:	4798      	blx	r3
    ed2e:	4603      	mov	r3, r0
    ed30:	2b00      	cmp	r3, #0
    ed32:	d107      	bne.n	ed44 <_wdt_init+0x4c>
    ed34:	687b      	ldr	r3, [r7, #4]
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	4618      	mov	r0, r3
    ed3a:	4b0f      	ldr	r3, [pc, #60]	; (ed78 <_wdt_init+0x80>)
    ed3c:	4798      	blx	r3
    ed3e:	4603      	mov	r3, r0
    ed40:	2b00      	cmp	r3, #0
    ed42:	d002      	beq.n	ed4a <_wdt_init+0x52>
		return ERR_DENIED;
    ed44:	f06f 0310 	mvn.w	r3, #16
    ed48:	e00b      	b.n	ed62 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	681b      	ldr	r3, [r3, #0]
    ed4e:	4618      	mov	r0, r3
    ed50:	4b0a      	ldr	r3, [pc, #40]	; (ed7c <_wdt_init+0x84>)
    ed52:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ed54:	687b      	ldr	r3, [r7, #4]
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	210b      	movs	r1, #11
    ed5a:	4618      	mov	r0, r3
    ed5c:	4b08      	ldr	r3, [pc, #32]	; (ed80 <_wdt_init+0x88>)
    ed5e:	4798      	blx	r3
	}

	return ERR_NONE;
    ed60:	2300      	movs	r3, #0
}
    ed62:	4618      	mov	r0, r3
    ed64:	3708      	adds	r7, #8
    ed66:	46bd      	mov	sp, r7
    ed68:	bd80      	pop	{r7, pc}
    ed6a:	bf00      	nop
    ed6c:	00012c54 	.word	0x00012c54
    ed70:	00007261 	.word	0x00007261
    ed74:	0000ec89 	.word	0x0000ec89
    ed78:	0000ec21 	.word	0x0000ec21
    ed7c:	0000ec5d 	.word	0x0000ec5d
    ed80:	0000ecbd 	.word	0x0000ecbd

0000ed84 <hri_port_set_DIR_reg>:
{
    ed84:	b480      	push	{r7}
    ed86:	b085      	sub	sp, #20
    ed88:	af00      	add	r7, sp, #0
    ed8a:	60f8      	str	r0, [r7, #12]
    ed8c:	460b      	mov	r3, r1
    ed8e:	607a      	str	r2, [r7, #4]
    ed90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ed92:	7afb      	ldrb	r3, [r7, #11]
    ed94:	68fa      	ldr	r2, [r7, #12]
    ed96:	01db      	lsls	r3, r3, #7
    ed98:	4413      	add	r3, r2
    ed9a:	3308      	adds	r3, #8
    ed9c:	687a      	ldr	r2, [r7, #4]
    ed9e:	601a      	str	r2, [r3, #0]
}
    eda0:	bf00      	nop
    eda2:	3714      	adds	r7, #20
    eda4:	46bd      	mov	sp, r7
    eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
    edaa:	4770      	bx	lr

0000edac <hri_port_clear_DIR_reg>:
{
    edac:	b480      	push	{r7}
    edae:	b085      	sub	sp, #20
    edb0:	af00      	add	r7, sp, #0
    edb2:	60f8      	str	r0, [r7, #12]
    edb4:	460b      	mov	r3, r1
    edb6:	607a      	str	r2, [r7, #4]
    edb8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    edba:	7afb      	ldrb	r3, [r7, #11]
    edbc:	68fa      	ldr	r2, [r7, #12]
    edbe:	01db      	lsls	r3, r3, #7
    edc0:	4413      	add	r3, r2
    edc2:	3304      	adds	r3, #4
    edc4:	687a      	ldr	r2, [r7, #4]
    edc6:	601a      	str	r2, [r3, #0]
}
    edc8:	bf00      	nop
    edca:	3714      	adds	r7, #20
    edcc:	46bd      	mov	sp, r7
    edce:	f85d 7b04 	ldr.w	r7, [sp], #4
    edd2:	4770      	bx	lr

0000edd4 <hri_port_set_OUT_reg>:
{
    edd4:	b480      	push	{r7}
    edd6:	b085      	sub	sp, #20
    edd8:	af00      	add	r7, sp, #0
    edda:	60f8      	str	r0, [r7, #12]
    eddc:	460b      	mov	r3, r1
    edde:	607a      	str	r2, [r7, #4]
    ede0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ede2:	7afb      	ldrb	r3, [r7, #11]
    ede4:	68fa      	ldr	r2, [r7, #12]
    ede6:	01db      	lsls	r3, r3, #7
    ede8:	4413      	add	r3, r2
    edea:	3318      	adds	r3, #24
    edec:	687a      	ldr	r2, [r7, #4]
    edee:	601a      	str	r2, [r3, #0]
}
    edf0:	bf00      	nop
    edf2:	3714      	adds	r7, #20
    edf4:	46bd      	mov	sp, r7
    edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    edfa:	4770      	bx	lr

0000edfc <hri_port_clear_OUT_reg>:
{
    edfc:	b480      	push	{r7}
    edfe:	b085      	sub	sp, #20
    ee00:	af00      	add	r7, sp, #0
    ee02:	60f8      	str	r0, [r7, #12]
    ee04:	460b      	mov	r3, r1
    ee06:	607a      	str	r2, [r7, #4]
    ee08:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ee0a:	7afb      	ldrb	r3, [r7, #11]
    ee0c:	68fa      	ldr	r2, [r7, #12]
    ee0e:	01db      	lsls	r3, r3, #7
    ee10:	4413      	add	r3, r2
    ee12:	3314      	adds	r3, #20
    ee14:	687a      	ldr	r2, [r7, #4]
    ee16:	601a      	str	r2, [r3, #0]
}
    ee18:	bf00      	nop
    ee1a:	3714      	adds	r7, #20
    ee1c:	46bd      	mov	sp, r7
    ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee22:	4770      	bx	lr

0000ee24 <hri_port_write_PMUX_PMUXE_bf>:
{
    ee24:	b480      	push	{r7}
    ee26:	b085      	sub	sp, #20
    ee28:	af00      	add	r7, sp, #0
    ee2a:	6078      	str	r0, [r7, #4]
    ee2c:	4608      	mov	r0, r1
    ee2e:	4611      	mov	r1, r2
    ee30:	461a      	mov	r2, r3
    ee32:	4603      	mov	r3, r0
    ee34:	70fb      	strb	r3, [r7, #3]
    ee36:	460b      	mov	r3, r1
    ee38:	70bb      	strb	r3, [r7, #2]
    ee3a:	4613      	mov	r3, r2
    ee3c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ee3e:	78fa      	ldrb	r2, [r7, #3]
    ee40:	78bb      	ldrb	r3, [r7, #2]
    ee42:	6879      	ldr	r1, [r7, #4]
    ee44:	01d2      	lsls	r2, r2, #7
    ee46:	440a      	add	r2, r1
    ee48:	4413      	add	r3, r2
    ee4a:	3330      	adds	r3, #48	; 0x30
    ee4c:	781b      	ldrb	r3, [r3, #0]
    ee4e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ee50:	7bfb      	ldrb	r3, [r7, #15]
    ee52:	f023 030f 	bic.w	r3, r3, #15
    ee56:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ee58:	787b      	ldrb	r3, [r7, #1]
    ee5a:	f003 030f 	and.w	r3, r3, #15
    ee5e:	b2da      	uxtb	r2, r3
    ee60:	7bfb      	ldrb	r3, [r7, #15]
    ee62:	4313      	orrs	r3, r2
    ee64:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ee66:	78fa      	ldrb	r2, [r7, #3]
    ee68:	78bb      	ldrb	r3, [r7, #2]
    ee6a:	6879      	ldr	r1, [r7, #4]
    ee6c:	01d2      	lsls	r2, r2, #7
    ee6e:	440a      	add	r2, r1
    ee70:	4413      	add	r3, r2
    ee72:	3330      	adds	r3, #48	; 0x30
    ee74:	7bfa      	ldrb	r2, [r7, #15]
    ee76:	701a      	strb	r2, [r3, #0]
}
    ee78:	bf00      	nop
    ee7a:	3714      	adds	r7, #20
    ee7c:	46bd      	mov	sp, r7
    ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee82:	4770      	bx	lr

0000ee84 <hri_port_write_PMUX_PMUXO_bf>:
{
    ee84:	b480      	push	{r7}
    ee86:	b085      	sub	sp, #20
    ee88:	af00      	add	r7, sp, #0
    ee8a:	6078      	str	r0, [r7, #4]
    ee8c:	4608      	mov	r0, r1
    ee8e:	4611      	mov	r1, r2
    ee90:	461a      	mov	r2, r3
    ee92:	4603      	mov	r3, r0
    ee94:	70fb      	strb	r3, [r7, #3]
    ee96:	460b      	mov	r3, r1
    ee98:	70bb      	strb	r3, [r7, #2]
    ee9a:	4613      	mov	r3, r2
    ee9c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ee9e:	78fa      	ldrb	r2, [r7, #3]
    eea0:	78bb      	ldrb	r3, [r7, #2]
    eea2:	6879      	ldr	r1, [r7, #4]
    eea4:	01d2      	lsls	r2, r2, #7
    eea6:	440a      	add	r2, r1
    eea8:	4413      	add	r3, r2
    eeaa:	3330      	adds	r3, #48	; 0x30
    eeac:	781b      	ldrb	r3, [r3, #0]
    eeae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    eeb0:	7bfb      	ldrb	r3, [r7, #15]
    eeb2:	f003 030f 	and.w	r3, r3, #15
    eeb6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    eeb8:	787b      	ldrb	r3, [r7, #1]
    eeba:	011b      	lsls	r3, r3, #4
    eebc:	b2da      	uxtb	r2, r3
    eebe:	7bfb      	ldrb	r3, [r7, #15]
    eec0:	4313      	orrs	r3, r2
    eec2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    eec4:	78fa      	ldrb	r2, [r7, #3]
    eec6:	78bb      	ldrb	r3, [r7, #2]
    eec8:	6879      	ldr	r1, [r7, #4]
    eeca:	01d2      	lsls	r2, r2, #7
    eecc:	440a      	add	r2, r1
    eece:	4413      	add	r3, r2
    eed0:	3330      	adds	r3, #48	; 0x30
    eed2:	7bfa      	ldrb	r2, [r7, #15]
    eed4:	701a      	strb	r2, [r3, #0]
}
    eed6:	bf00      	nop
    eed8:	3714      	adds	r7, #20
    eeda:	46bd      	mov	sp, r7
    eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
    eee0:	4770      	bx	lr

0000eee2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    eee2:	b480      	push	{r7}
    eee4:	b085      	sub	sp, #20
    eee6:	af00      	add	r7, sp, #0
    eee8:	6078      	str	r0, [r7, #4]
    eeea:	4608      	mov	r0, r1
    eeec:	4611      	mov	r1, r2
    eeee:	461a      	mov	r2, r3
    eef0:	4603      	mov	r3, r0
    eef2:	70fb      	strb	r3, [r7, #3]
    eef4:	460b      	mov	r3, r1
    eef6:	70bb      	strb	r3, [r7, #2]
    eef8:	4613      	mov	r3, r2
    eefa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    eefc:	78fa      	ldrb	r2, [r7, #3]
    eefe:	78bb      	ldrb	r3, [r7, #2]
    ef00:	6879      	ldr	r1, [r7, #4]
    ef02:	01d2      	lsls	r2, r2, #7
    ef04:	440a      	add	r2, r1
    ef06:	4413      	add	r3, r2
    ef08:	3340      	adds	r3, #64	; 0x40
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ef0e:	7bfb      	ldrb	r3, [r7, #15]
    ef10:	f023 0301 	bic.w	r3, r3, #1
    ef14:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ef16:	787a      	ldrb	r2, [r7, #1]
    ef18:	7bfb      	ldrb	r3, [r7, #15]
    ef1a:	4313      	orrs	r3, r2
    ef1c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ef1e:	78fa      	ldrb	r2, [r7, #3]
    ef20:	78bb      	ldrb	r3, [r7, #2]
    ef22:	6879      	ldr	r1, [r7, #4]
    ef24:	01d2      	lsls	r2, r2, #7
    ef26:	440a      	add	r2, r1
    ef28:	4413      	add	r3, r2
    ef2a:	3340      	adds	r3, #64	; 0x40
    ef2c:	7bfa      	ldrb	r2, [r7, #15]
    ef2e:	701a      	strb	r2, [r3, #0]
}
    ef30:	bf00      	nop
    ef32:	3714      	adds	r7, #20
    ef34:	46bd      	mov	sp, r7
    ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef3a:	4770      	bx	lr

0000ef3c <hri_port_write_WRCONFIG_reg>:
{
    ef3c:	b480      	push	{r7}
    ef3e:	b085      	sub	sp, #20
    ef40:	af00      	add	r7, sp, #0
    ef42:	60f8      	str	r0, [r7, #12]
    ef44:	460b      	mov	r3, r1
    ef46:	607a      	str	r2, [r7, #4]
    ef48:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ef4a:	7afb      	ldrb	r3, [r7, #11]
    ef4c:	68fa      	ldr	r2, [r7, #12]
    ef4e:	01db      	lsls	r3, r3, #7
    ef50:	4413      	add	r3, r2
    ef52:	3328      	adds	r3, #40	; 0x28
    ef54:	687a      	ldr	r2, [r7, #4]
    ef56:	601a      	str	r2, [r3, #0]
}
    ef58:	bf00      	nop
    ef5a:	3714      	adds	r7, #20
    ef5c:	46bd      	mov	sp, r7
    ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef62:	4770      	bx	lr

0000ef64 <_gpio_set_direction>:
{
    ef64:	b580      	push	{r7, lr}
    ef66:	b082      	sub	sp, #8
    ef68:	af00      	add	r7, sp, #0
    ef6a:	4603      	mov	r3, r0
    ef6c:	6039      	str	r1, [r7, #0]
    ef6e:	71fb      	strb	r3, [r7, #7]
    ef70:	4613      	mov	r3, r2
    ef72:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ef74:	79bb      	ldrb	r3, [r7, #6]
    ef76:	2b01      	cmp	r3, #1
    ef78:	d01c      	beq.n	efb4 <_gpio_set_direction+0x50>
    ef7a:	2b02      	cmp	r3, #2
    ef7c:	d037      	beq.n	efee <_gpio_set_direction+0x8a>
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d14e      	bne.n	f020 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ef82:	79fb      	ldrb	r3, [r7, #7]
    ef84:	683a      	ldr	r2, [r7, #0]
    ef86:	4619      	mov	r1, r3
    ef88:	482a      	ldr	r0, [pc, #168]	; (f034 <_gpio_set_direction+0xd0>)
    ef8a:	4b2b      	ldr	r3, [pc, #172]	; (f038 <_gpio_set_direction+0xd4>)
    ef8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ef8e:	683b      	ldr	r3, [r7, #0]
    ef90:	b29b      	uxth	r3, r3
    ef92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ef96:	79fb      	ldrb	r3, [r7, #7]
    ef98:	4619      	mov	r1, r3
    ef9a:	4826      	ldr	r0, [pc, #152]	; (f034 <_gpio_set_direction+0xd0>)
    ef9c:	4b27      	ldr	r3, [pc, #156]	; (f03c <_gpio_set_direction+0xd8>)
    ef9e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    efa0:	683b      	ldr	r3, [r7, #0]
    efa2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    efa4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    efa8:	79fb      	ldrb	r3, [r7, #7]
    efaa:	4619      	mov	r1, r3
    efac:	4821      	ldr	r0, [pc, #132]	; (f034 <_gpio_set_direction+0xd0>)
    efae:	4b23      	ldr	r3, [pc, #140]	; (f03c <_gpio_set_direction+0xd8>)
    efb0:	4798      	blx	r3
		break;
    efb2:	e03a      	b.n	f02a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    efb4:	79fb      	ldrb	r3, [r7, #7]
    efb6:	683a      	ldr	r2, [r7, #0]
    efb8:	4619      	mov	r1, r3
    efba:	481e      	ldr	r0, [pc, #120]	; (f034 <_gpio_set_direction+0xd0>)
    efbc:	4b1e      	ldr	r3, [pc, #120]	; (f038 <_gpio_set_direction+0xd4>)
    efbe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    efc0:	683b      	ldr	r3, [r7, #0]
    efc2:	b29b      	uxth	r3, r3
    efc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    efc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    efcc:	79f9      	ldrb	r1, [r7, #7]
    efce:	461a      	mov	r2, r3
    efd0:	4818      	ldr	r0, [pc, #96]	; (f034 <_gpio_set_direction+0xd0>)
    efd2:	4b1a      	ldr	r3, [pc, #104]	; (f03c <_gpio_set_direction+0xd8>)
    efd4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    efd6:	683b      	ldr	r3, [r7, #0]
    efd8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    efda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    efde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    efe2:	79f9      	ldrb	r1, [r7, #7]
    efe4:	461a      	mov	r2, r3
    efe6:	4813      	ldr	r0, [pc, #76]	; (f034 <_gpio_set_direction+0xd0>)
    efe8:	4b14      	ldr	r3, [pc, #80]	; (f03c <_gpio_set_direction+0xd8>)
    efea:	4798      	blx	r3
		break;
    efec:	e01d      	b.n	f02a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    efee:	79fb      	ldrb	r3, [r7, #7]
    eff0:	683a      	ldr	r2, [r7, #0]
    eff2:	4619      	mov	r1, r3
    eff4:	480f      	ldr	r0, [pc, #60]	; (f034 <_gpio_set_direction+0xd0>)
    eff6:	4b12      	ldr	r3, [pc, #72]	; (f040 <_gpio_set_direction+0xdc>)
    eff8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    effa:	683b      	ldr	r3, [r7, #0]
    effc:	b29b      	uxth	r3, r3
    effe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    f002:	79fb      	ldrb	r3, [r7, #7]
    f004:	4619      	mov	r1, r3
    f006:	480b      	ldr	r0, [pc, #44]	; (f034 <_gpio_set_direction+0xd0>)
    f008:	4b0c      	ldr	r3, [pc, #48]	; (f03c <_gpio_set_direction+0xd8>)
    f00a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    f00c:	683b      	ldr	r3, [r7, #0]
    f00e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    f010:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    f014:	79fb      	ldrb	r3, [r7, #7]
    f016:	4619      	mov	r1, r3
    f018:	4806      	ldr	r0, [pc, #24]	; (f034 <_gpio_set_direction+0xd0>)
    f01a:	4b08      	ldr	r3, [pc, #32]	; (f03c <_gpio_set_direction+0xd8>)
    f01c:	4798      	blx	r3
		break;
    f01e:	e004      	b.n	f02a <_gpio_set_direction+0xc6>
		ASSERT(false);
    f020:	2246      	movs	r2, #70	; 0x46
    f022:	4908      	ldr	r1, [pc, #32]	; (f044 <_gpio_set_direction+0xe0>)
    f024:	2000      	movs	r0, #0
    f026:	4b08      	ldr	r3, [pc, #32]	; (f048 <_gpio_set_direction+0xe4>)
    f028:	4798      	blx	r3
}
    f02a:	bf00      	nop
    f02c:	3708      	adds	r7, #8
    f02e:	46bd      	mov	sp, r7
    f030:	bd80      	pop	{r7, pc}
    f032:	bf00      	nop
    f034:	41008000 	.word	0x41008000
    f038:	0000edad 	.word	0x0000edad
    f03c:	0000ef3d 	.word	0x0000ef3d
    f040:	0000ed85 	.word	0x0000ed85
    f044:	00012c6c 	.word	0x00012c6c
    f048:	00007261 	.word	0x00007261

0000f04c <_gpio_set_level>:
{
    f04c:	b580      	push	{r7, lr}
    f04e:	b082      	sub	sp, #8
    f050:	af00      	add	r7, sp, #0
    f052:	4603      	mov	r3, r0
    f054:	6039      	str	r1, [r7, #0]
    f056:	71fb      	strb	r3, [r7, #7]
    f058:	4613      	mov	r3, r2
    f05a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    f05c:	79bb      	ldrb	r3, [r7, #6]
    f05e:	2b00      	cmp	r3, #0
    f060:	d006      	beq.n	f070 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    f062:	79fb      	ldrb	r3, [r7, #7]
    f064:	683a      	ldr	r2, [r7, #0]
    f066:	4619      	mov	r1, r3
    f068:	4806      	ldr	r0, [pc, #24]	; (f084 <_gpio_set_level+0x38>)
    f06a:	4b07      	ldr	r3, [pc, #28]	; (f088 <_gpio_set_level+0x3c>)
    f06c:	4798      	blx	r3
}
    f06e:	e005      	b.n	f07c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    f070:	79fb      	ldrb	r3, [r7, #7]
    f072:	683a      	ldr	r2, [r7, #0]
    f074:	4619      	mov	r1, r3
    f076:	4803      	ldr	r0, [pc, #12]	; (f084 <_gpio_set_level+0x38>)
    f078:	4b04      	ldr	r3, [pc, #16]	; (f08c <_gpio_set_level+0x40>)
    f07a:	4798      	blx	r3
}
    f07c:	bf00      	nop
    f07e:	3708      	adds	r7, #8
    f080:	46bd      	mov	sp, r7
    f082:	bd80      	pop	{r7, pc}
    f084:	41008000 	.word	0x41008000
    f088:	0000edd5 	.word	0x0000edd5
    f08c:	0000edfd 	.word	0x0000edfd

0000f090 <_gpio_set_pin_function>:
{
    f090:	b590      	push	{r4, r7, lr}
    f092:	b085      	sub	sp, #20
    f094:	af00      	add	r7, sp, #0
    f096:	6078      	str	r0, [r7, #4]
    f098:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    f09a:	687b      	ldr	r3, [r7, #4]
    f09c:	095b      	lsrs	r3, r3, #5
    f09e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	b2db      	uxtb	r3, r3
    f0a4:	f003 031f 	and.w	r3, r3, #31
    f0a8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    f0aa:	683b      	ldr	r3, [r7, #0]
    f0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    f0b0:	d106      	bne.n	f0c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    f0b2:	7bba      	ldrb	r2, [r7, #14]
    f0b4:	7bf9      	ldrb	r1, [r7, #15]
    f0b6:	2300      	movs	r3, #0
    f0b8:	4812      	ldr	r0, [pc, #72]	; (f104 <_gpio_set_pin_function+0x74>)
    f0ba:	4c13      	ldr	r4, [pc, #76]	; (f108 <_gpio_set_pin_function+0x78>)
    f0bc:	47a0      	blx	r4
}
    f0be:	e01d      	b.n	f0fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    f0c0:	7bba      	ldrb	r2, [r7, #14]
    f0c2:	7bf9      	ldrb	r1, [r7, #15]
    f0c4:	2301      	movs	r3, #1
    f0c6:	480f      	ldr	r0, [pc, #60]	; (f104 <_gpio_set_pin_function+0x74>)
    f0c8:	4c0f      	ldr	r4, [pc, #60]	; (f108 <_gpio_set_pin_function+0x78>)
    f0ca:	47a0      	blx	r4
		if (pin & 1) {
    f0cc:	7bbb      	ldrb	r3, [r7, #14]
    f0ce:	f003 0301 	and.w	r3, r3, #1
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d009      	beq.n	f0ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    f0d6:	7bbb      	ldrb	r3, [r7, #14]
    f0d8:	085b      	lsrs	r3, r3, #1
    f0da:	b2da      	uxtb	r2, r3
    f0dc:	683b      	ldr	r3, [r7, #0]
    f0de:	b2db      	uxtb	r3, r3
    f0e0:	7bf9      	ldrb	r1, [r7, #15]
    f0e2:	4808      	ldr	r0, [pc, #32]	; (f104 <_gpio_set_pin_function+0x74>)
    f0e4:	4c09      	ldr	r4, [pc, #36]	; (f10c <_gpio_set_pin_function+0x7c>)
    f0e6:	47a0      	blx	r4
}
    f0e8:	e008      	b.n	f0fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    f0ea:	7bbb      	ldrb	r3, [r7, #14]
    f0ec:	085b      	lsrs	r3, r3, #1
    f0ee:	b2da      	uxtb	r2, r3
    f0f0:	683b      	ldr	r3, [r7, #0]
    f0f2:	b2db      	uxtb	r3, r3
    f0f4:	7bf9      	ldrb	r1, [r7, #15]
    f0f6:	4803      	ldr	r0, [pc, #12]	; (f104 <_gpio_set_pin_function+0x74>)
    f0f8:	4c05      	ldr	r4, [pc, #20]	; (f110 <_gpio_set_pin_function+0x80>)
    f0fa:	47a0      	blx	r4
}
    f0fc:	bf00      	nop
    f0fe:	3714      	adds	r7, #20
    f100:	46bd      	mov	sp, r7
    f102:	bd90      	pop	{r4, r7, pc}
    f104:	41008000 	.word	0x41008000
    f108:	0000eee3 	.word	0x0000eee3
    f10c:	0000ee85 	.word	0x0000ee85
    f110:	0000ee25 	.word	0x0000ee25

0000f114 <gpio_set_pin_function>:
{
    f114:	b580      	push	{r7, lr}
    f116:	b082      	sub	sp, #8
    f118:	af00      	add	r7, sp, #0
    f11a:	6078      	str	r0, [r7, #4]
    f11c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    f11e:	6839      	ldr	r1, [r7, #0]
    f120:	6878      	ldr	r0, [r7, #4]
    f122:	4b03      	ldr	r3, [pc, #12]	; (f130 <gpio_set_pin_function+0x1c>)
    f124:	4798      	blx	r3
}
    f126:	bf00      	nop
    f128:	3708      	adds	r7, #8
    f12a:	46bd      	mov	sp, r7
    f12c:	bd80      	pop	{r7, pc}
    f12e:	bf00      	nop
    f130:	0000f091 	.word	0x0000f091

0000f134 <gpio_set_pin_direction>:
{
    f134:	b580      	push	{r7, lr}
    f136:	b082      	sub	sp, #8
    f138:	af00      	add	r7, sp, #0
    f13a:	4603      	mov	r3, r0
    f13c:	460a      	mov	r2, r1
    f13e:	71fb      	strb	r3, [r7, #7]
    f140:	4613      	mov	r3, r2
    f142:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f144:	79fb      	ldrb	r3, [r7, #7]
    f146:	095b      	lsrs	r3, r3, #5
    f148:	b2d8      	uxtb	r0, r3
    f14a:	79fb      	ldrb	r3, [r7, #7]
    f14c:	f003 031f 	and.w	r3, r3, #31
    f150:	2201      	movs	r2, #1
    f152:	fa02 f303 	lsl.w	r3, r2, r3
    f156:	79ba      	ldrb	r2, [r7, #6]
    f158:	4619      	mov	r1, r3
    f15a:	4b03      	ldr	r3, [pc, #12]	; (f168 <gpio_set_pin_direction+0x34>)
    f15c:	4798      	blx	r3
}
    f15e:	bf00      	nop
    f160:	3708      	adds	r7, #8
    f162:	46bd      	mov	sp, r7
    f164:	bd80      	pop	{r7, pc}
    f166:	bf00      	nop
    f168:	0000ef65 	.word	0x0000ef65

0000f16c <gpio_set_pin_level>:
{
    f16c:	b580      	push	{r7, lr}
    f16e:	b082      	sub	sp, #8
    f170:	af00      	add	r7, sp, #0
    f172:	4603      	mov	r3, r0
    f174:	460a      	mov	r2, r1
    f176:	71fb      	strb	r3, [r7, #7]
    f178:	4613      	mov	r3, r2
    f17a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    f17c:	79fb      	ldrb	r3, [r7, #7]
    f17e:	095b      	lsrs	r3, r3, #5
    f180:	b2d8      	uxtb	r0, r3
    f182:	79fb      	ldrb	r3, [r7, #7]
    f184:	f003 031f 	and.w	r3, r3, #31
    f188:	2201      	movs	r2, #1
    f18a:	fa02 f303 	lsl.w	r3, r2, r3
    f18e:	79ba      	ldrb	r2, [r7, #6]
    f190:	4619      	mov	r1, r3
    f192:	4b03      	ldr	r3, [pc, #12]	; (f1a0 <gpio_set_pin_level+0x34>)
    f194:	4798      	blx	r3
}
    f196:	bf00      	nop
    f198:	3708      	adds	r7, #8
    f19a:	46bd      	mov	sp, r7
    f19c:	bd80      	pop	{r7, pc}
    f19e:	bf00      	nop
    f1a0:	0000f04d 	.word	0x0000f04d

0000f1a4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    f1a4:	b580      	push	{r7, lr}
    f1a6:	b082      	sub	sp, #8
    f1a8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    f1aa:	2100      	movs	r1, #0
    f1ac:	2008      	movs	r0, #8
    f1ae:	4b24      	ldr	r3, [pc, #144]	; (f240 <QSPI_N25Q256_exit_xip+0x9c>)
    f1b0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    f1b2:	2100      	movs	r1, #0
    f1b4:	202b      	movs	r0, #43	; 0x2b
    f1b6:	4b22      	ldr	r3, [pc, #136]	; (f240 <QSPI_N25Q256_exit_xip+0x9c>)
    f1b8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    f1ba:	2100      	movs	r1, #0
    f1bc:	202a      	movs	r0, #42	; 0x2a
    f1be:	4b20      	ldr	r3, [pc, #128]	; (f240 <QSPI_N25Q256_exit_xip+0x9c>)
    f1c0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    f1c2:	2102      	movs	r1, #2
    f1c4:	2008      	movs	r0, #8
    f1c6:	4b1f      	ldr	r3, [pc, #124]	; (f244 <QSPI_N25Q256_exit_xip+0xa0>)
    f1c8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    f1ca:	2102      	movs	r1, #2
    f1cc:	202b      	movs	r0, #43	; 0x2b
    f1ce:	4b1d      	ldr	r3, [pc, #116]	; (f244 <QSPI_N25Q256_exit_xip+0xa0>)
    f1d0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    f1d2:	2102      	movs	r1, #2
    f1d4:	202a      	movs	r0, #42	; 0x2a
    f1d6:	4b1b      	ldr	r3, [pc, #108]	; (f244 <QSPI_N25Q256_exit_xip+0xa0>)
    f1d8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    f1da:	2101      	movs	r1, #1
    f1dc:	2008      	movs	r0, #8
    f1de:	4b1a      	ldr	r3, [pc, #104]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f1e0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    f1e2:	2100      	movs	r1, #0
    f1e4:	202b      	movs	r0, #43	; 0x2b
    f1e6:	4b18      	ldr	r3, [pc, #96]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f1e8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    f1ea:	2100      	movs	r1, #0
    f1ec:	202a      	movs	r0, #42	; 0x2a
    f1ee:	4b16      	ldr	r3, [pc, #88]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f1f0:	4798      	blx	r3

	delay_us(1);
    f1f2:	2001      	movs	r0, #1
    f1f4:	4b15      	ldr	r3, [pc, #84]	; (f24c <QSPI_N25Q256_exit_xip+0xa8>)
    f1f6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    f1f8:	2300      	movs	r3, #0
    f1fa:	607b      	str	r3, [r7, #4]
    f1fc:	e010      	b.n	f220 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    f1fe:	2101      	movs	r1, #1
    f200:	202a      	movs	r0, #42	; 0x2a
    f202:	4b11      	ldr	r3, [pc, #68]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f204:	4798      	blx	r3
		delay_us(1);
    f206:	2001      	movs	r0, #1
    f208:	4b10      	ldr	r3, [pc, #64]	; (f24c <QSPI_N25Q256_exit_xip+0xa8>)
    f20a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    f20c:	2100      	movs	r1, #0
    f20e:	202a      	movs	r0, #42	; 0x2a
    f210:	4b0d      	ldr	r3, [pc, #52]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f212:	4798      	blx	r3
		delay_us(1);
    f214:	2001      	movs	r0, #1
    f216:	4b0d      	ldr	r3, [pc, #52]	; (f24c <QSPI_N25Q256_exit_xip+0xa8>)
    f218:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    f21a:	687b      	ldr	r3, [r7, #4]
    f21c:	3301      	adds	r3, #1
    f21e:	607b      	str	r3, [r7, #4]
    f220:	687b      	ldr	r3, [r7, #4]
    f222:	2b06      	cmp	r3, #6
    f224:	ddeb      	ble.n	f1fe <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    f226:	2101      	movs	r1, #1
    f228:	202b      	movs	r0, #43	; 0x2b
    f22a:	4b07      	ldr	r3, [pc, #28]	; (f248 <QSPI_N25Q256_exit_xip+0xa4>)
    f22c:	4798      	blx	r3
	delay_us(1);
    f22e:	2001      	movs	r0, #1
    f230:	4b06      	ldr	r3, [pc, #24]	; (f24c <QSPI_N25Q256_exit_xip+0xa8>)
    f232:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    f234:	4b06      	ldr	r3, [pc, #24]	; (f250 <QSPI_N25Q256_exit_xip+0xac>)
    f236:	4798      	blx	r3
}
    f238:	bf00      	nop
    f23a:	3708      	adds	r7, #8
    f23c:	46bd      	mov	sp, r7
    f23e:	bd80      	pop	{r7, pc}
    f240:	0000f115 	.word	0x0000f115
    f244:	0000f135 	.word	0x0000f135
    f248:	0000f16d 	.word	0x0000f16d
    f24c:	00005ea9 	.word	0x00005ea9
    f250:	00005069 	.word	0x00005069

0000f254 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    f254:	b598      	push	{r3, r4, r7, lr}
    f256:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    f258:	4806      	ldr	r0, [pc, #24]	; (f274 <spi_nor_flash_init+0x20>)
    f25a:	4b07      	ldr	r3, [pc, #28]	; (f278 <spi_nor_flash_init+0x24>)
    f25c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    f25e:	2300      	movs	r3, #0
    f260:	4a06      	ldr	r2, [pc, #24]	; (f27c <spi_nor_flash_init+0x28>)
    f262:	4904      	ldr	r1, [pc, #16]	; (f274 <spi_nor_flash_init+0x20>)
    f264:	4806      	ldr	r0, [pc, #24]	; (f280 <spi_nor_flash_init+0x2c>)
    f266:	4c07      	ldr	r4, [pc, #28]	; (f284 <spi_nor_flash_init+0x30>)
    f268:	47a0      	blx	r4
    f26a:	4602      	mov	r2, r0
    f26c:	4b06      	ldr	r3, [pc, #24]	; (f288 <spi_nor_flash_init+0x34>)
    f26e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    f270:	bf00      	nop
    f272:	bd98      	pop	{r3, r4, r7, pc}
    f274:	20002598 	.word	0x20002598
    f278:	00006289 	.word	0x00006289
    f27c:	0000f1a5 	.word	0x0000f1a5
    f280:	20001f7c 	.word	0x20001f7c
    f284:	0000f6c1 	.word	0x0000f6c1
    f288:	20002798 	.word	0x20002798

0000f28c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    f28c:	b580      	push	{r7, lr}
    f28e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    f290:	4805      	ldr	r0, [pc, #20]	; (f2a8 <cdc_device_acm_init+0x1c>)
    f292:	4b06      	ldr	r3, [pc, #24]	; (f2ac <cdc_device_acm_init+0x20>)
    f294:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    f296:	4b06      	ldr	r3, [pc, #24]	; (f2b0 <cdc_device_acm_init+0x24>)
    f298:	4798      	blx	r3

	usbdc_start(single_desc);
    f29a:	4806      	ldr	r0, [pc, #24]	; (f2b4 <cdc_device_acm_init+0x28>)
    f29c:	4b06      	ldr	r3, [pc, #24]	; (f2b8 <cdc_device_acm_init+0x2c>)
    f29e:	4798      	blx	r3
	usbdc_attach();
    f2a0:	4b06      	ldr	r3, [pc, #24]	; (f2bc <cdc_device_acm_init+0x30>)
    f2a2:	4798      	blx	r3
}
    f2a4:	bf00      	nop
    f2a6:	bd80      	pop	{r7, pc}
    f2a8:	20001fcc 	.word	0x20001fcc
    f2ac:	00010cad 	.word	0x00010cad
    f2b0:	00010061 	.word	0x00010061
    f2b4:	200005f8 	.word	0x200005f8
    f2b8:	00010d49 	.word	0x00010d49
    f2bc:	00010d99 	.word	0x00010d99

0000f2c0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    f2c0:	b580      	push	{r7, lr}
    f2c2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    f2c4:	4b01      	ldr	r3, [pc, #4]	; (f2cc <usb_init+0xc>)
    f2c6:	4798      	blx	r3
}
    f2c8:	bf00      	nop
    f2ca:	bd80      	pop	{r7, pc}
    f2cc:	0000f28d 	.word	0x0000f28d

0000f2d0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    f2d0:	b480      	push	{r7}
    f2d2:	b085      	sub	sp, #20
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f2d8:	f3ef 8310 	mrs	r3, PRIMASK
    f2dc:	60fb      	str	r3, [r7, #12]
  return(result);
    f2de:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    f2e0:	687b      	ldr	r3, [r7, #4]
    f2e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    f2e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f2e6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    f2ea:	bf00      	nop
    f2ec:	3714      	adds	r7, #20
    f2ee:	46bd      	mov	sp, r7
    f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    f2f4:	4770      	bx	lr

0000f2f6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    f2f6:	b480      	push	{r7}
    f2f8:	b085      	sub	sp, #20
    f2fa:	af00      	add	r7, sp, #0
    f2fc:	6078      	str	r0, [r7, #4]
    f2fe:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    f302:	687b      	ldr	r3, [r7, #4]
    f304:	681b      	ldr	r3, [r3, #0]
    f306:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    f308:	68fb      	ldr	r3, [r7, #12]
    f30a:	f383 8810 	msr	PRIMASK, r3
}
    f30e:	bf00      	nop
    f310:	3714      	adds	r7, #20
    f312:	46bd      	mov	sp, r7
    f314:	f85d 7b04 	ldr.w	r7, [sp], #4
    f318:	4770      	bx	lr
	...

0000f31c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    f31c:	b580      	push	{r7, lr}
    f31e:	b08c      	sub	sp, #48	; 0x30
    f320:	af00      	add	r7, sp, #0
    f322:	6078      	str	r0, [r7, #4]
    f324:	460b      	mov	r3, r1
    f326:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f328:	687b      	ldr	r3, [r7, #4]
    f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f32c:	687b      	ldr	r3, [r7, #4]
    f32e:	681b      	ldr	r3, [r3, #0]
    f330:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    f332:	f107 030c 	add.w	r3, r7, #12
    f336:	2200      	movs	r2, #0
    f338:	601a      	str	r2, [r3, #0]
    f33a:	605a      	str	r2, [r3, #4]
    f33c:	609a      	str	r2, [r3, #8]
    f33e:	60da      	str	r2, [r3, #12]
    f340:	611a      	str	r2, [r3, #16]
    f342:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f346:	7b1b      	ldrb	r3, [r3, #12]
    f348:	2b00      	cmp	r3, #0
    f34a:	d001      	beq.n	f350 <n25q256a_xip_confirm+0x34>
    f34c:	2206      	movs	r2, #6
    f34e:	e000      	b.n	f352 <n25q256a_xip_confirm+0x36>
    f350:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f352:	7b3b      	ldrb	r3, [r7, #12]
    f354:	f362 0302 	bfi	r3, r2, #0, #3
    f358:	733b      	strb	r3, [r7, #12]
    f35a:	7b3b      	ldrb	r3, [r7, #12]
    f35c:	f043 0310 	orr.w	r3, r3, #16
    f360:	733b      	strb	r3, [r7, #12]
    f362:	7b3b      	ldrb	r3, [r7, #12]
    f364:	f043 0320 	orr.w	r3, r3, #32
    f368:	733b      	strb	r3, [r7, #12]
    f36a:	7b3b      	ldrb	r3, [r7, #12]
    f36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f370:	733b      	strb	r3, [r7, #12]
    f372:	7b3b      	ldrb	r3, [r7, #12]
    f374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f378:	733b      	strb	r3, [r7, #12]
    f37a:	7b7b      	ldrb	r3, [r7, #13]
    f37c:	f043 0303 	orr.w	r3, r3, #3
    f380:	737b      	strb	r3, [r7, #13]
    f382:	7b7b      	ldrb	r3, [r7, #13]
    f384:	2201      	movs	r2, #1
    f386:	f362 1305 	bfi	r3, r2, #4, #2
    f38a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f38e:	7b1b      	ldrb	r3, [r3, #12]
    f390:	2b00      	cmp	r3, #0
    f392:	d001      	beq.n	f398 <n25q256a_xip_confirm+0x7c>
    f394:	2208      	movs	r2, #8
    f396:	e000      	b.n	f39a <n25q256a_xip_confirm+0x7e>
    f398:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f39a:	7bbb      	ldrb	r3, [r7, #14]
    f39c:	f362 0304 	bfi	r3, r2, #0, #5
    f3a0:	73bb      	strb	r3, [r7, #14]
    f3a2:	230b      	movs	r3, #11
    f3a4:	743b      	strb	r3, [r7, #16]
    f3a6:	78fb      	ldrb	r3, [r7, #3]
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	d001      	beq.n	f3b0 <n25q256a_xip_confirm+0x94>
    f3ac:	2300      	movs	r3, #0
    f3ae:	e000      	b.n	f3b2 <n25q256a_xip_confirm+0x96>
    f3b0:	23ff      	movs	r3, #255	; 0xff
    f3b2:	747b      	strb	r3, [r7, #17]
    f3b4:	2301      	movs	r3, #1
    f3b6:	61bb      	str	r3, [r7, #24]
    f3b8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    f3bc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    f3be:	f107 030c 	add.w	r3, r7, #12
    f3c2:	4619      	mov	r1, r3
    f3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f3c6:	4b07      	ldr	r3, [pc, #28]	; (f3e4 <n25q256a_xip_confirm+0xc8>)
    f3c8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    f3ca:	78fb      	ldrb	r3, [r7, #3]
    f3cc:	2b00      	cmp	r3, #0
    f3ce:	d001      	beq.n	f3d4 <n25q256a_xip_confirm+0xb8>
    f3d0:	2202      	movs	r2, #2
    f3d2:	e000      	b.n	f3d6 <n25q256a_xip_confirm+0xba>
    f3d4:	2201      	movs	r2, #1
    f3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f3d8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    f3da:	2300      	movs	r3, #0
}
    f3dc:	4618      	mov	r0, r3
    f3de:	3730      	adds	r7, #48	; 0x30
    f3e0:	46bd      	mov	sp, r7
    f3e2:	bd80      	pop	{r7, pc}
    f3e4:	00006301 	.word	0x00006301

0000f3e8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    f3e8:	b580      	push	{r7, lr}
    f3ea:	b08c      	sub	sp, #48	; 0x30
    f3ec:	af00      	add	r7, sp, #0
    f3ee:	6078      	str	r0, [r7, #4]
    f3f0:	460b      	mov	r3, r1
    f3f2:	70fb      	strb	r3, [r7, #3]
    f3f4:	4613      	mov	r3, r2
    f3f6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    f3f8:	2300      	movs	r3, #0
    f3fa:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    f3fc:	687b      	ldr	r3, [r7, #4]
    f3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	681b      	ldr	r3, [r3, #0]
    f404:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    f406:	f107 030c 	add.w	r3, r7, #12
    f40a:	2200      	movs	r2, #0
    f40c:	601a      	str	r2, [r3, #0]
    f40e:	605a      	str	r2, [r3, #4]
    f410:	609a      	str	r2, [r3, #8]
    f412:	60da      	str	r2, [r3, #12]
    f414:	611a      	str	r2, [r3, #16]
    f416:	615a      	str	r2, [r3, #20]
    f418:	78fb      	ldrb	r3, [r7, #3]
    f41a:	f003 0307 	and.w	r3, r3, #7
    f41e:	b2da      	uxtb	r2, r3
    f420:	7b3b      	ldrb	r3, [r7, #12]
    f422:	f362 0302 	bfi	r3, r2, #0, #3
    f426:	733b      	strb	r3, [r7, #12]
    f428:	7b3b      	ldrb	r3, [r7, #12]
    f42a:	f043 0310 	orr.w	r3, r3, #16
    f42e:	733b      	strb	r3, [r7, #12]
    f430:	7b3b      	ldrb	r3, [r7, #12]
    f432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f436:	733b      	strb	r3, [r7, #12]
    f438:	78bb      	ldrb	r3, [r7, #2]
    f43a:	743b      	strb	r3, [r7, #16]
    f43c:	2301      	movs	r3, #1
    f43e:	61bb      	str	r3, [r7, #24]
    f440:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f444:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f448:	7b5b      	ldrb	r3, [r3, #13]
    f44a:	2b00      	cmp	r3, #0
    f44c:	d003      	beq.n	f456 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    f44e:	2100      	movs	r1, #0
    f450:	6878      	ldr	r0, [r7, #4]
    f452:	4b0a      	ldr	r3, [pc, #40]	; (f47c <n25q256a_read_reg+0x94>)
    f454:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f456:	f107 030c 	add.w	r3, r7, #12
    f45a:	4619      	mov	r1, r3
    f45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f45e:	4b08      	ldr	r3, [pc, #32]	; (f480 <n25q256a_read_reg+0x98>)
    f460:	4798      	blx	r3
	if (n25q->xip_mode) {
    f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f464:	7b5b      	ldrb	r3, [r3, #13]
    f466:	2b00      	cmp	r3, #0
    f468:	d003      	beq.n	f472 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    f46a:	2101      	movs	r1, #1
    f46c:	6878      	ldr	r0, [r7, #4]
    f46e:	4b03      	ldr	r3, [pc, #12]	; (f47c <n25q256a_read_reg+0x94>)
    f470:	4798      	blx	r3
	}
	return status;
    f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    f474:	4618      	mov	r0, r3
    f476:	3730      	adds	r7, #48	; 0x30
    f478:	46bd      	mov	sp, r7
    f47a:	bd80      	pop	{r7, pc}
    f47c:	0000f31d 	.word	0x0000f31d
    f480:	00006301 	.word	0x00006301

0000f484 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    f484:	b580      	push	{r7, lr}
    f486:	b08c      	sub	sp, #48	; 0x30
    f488:	af00      	add	r7, sp, #0
    f48a:	60f8      	str	r0, [r7, #12]
    f48c:	607b      	str	r3, [r7, #4]
    f48e:	460b      	mov	r3, r1
    f490:	72fb      	strb	r3, [r7, #11]
    f492:	4613      	mov	r3, r2
    f494:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f496:	68fb      	ldr	r3, [r7, #12]
    f498:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f49a:	68fb      	ldr	r3, [r7, #12]
    f49c:	681b      	ldr	r3, [r3, #0]
    f49e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    f4a0:	f107 0310 	add.w	r3, r7, #16
    f4a4:	2200      	movs	r2, #0
    f4a6:	601a      	str	r2, [r3, #0]
    f4a8:	605a      	str	r2, [r3, #4]
    f4aa:	609a      	str	r2, [r3, #8]
    f4ac:	60da      	str	r2, [r3, #12]
    f4ae:	611a      	str	r2, [r3, #16]
    f4b0:	615a      	str	r2, [r3, #20]
    f4b2:	7afb      	ldrb	r3, [r7, #11]
    f4b4:	f003 0307 	and.w	r3, r3, #7
    f4b8:	b2da      	uxtb	r2, r3
    f4ba:	7c3b      	ldrb	r3, [r7, #16]
    f4bc:	f362 0302 	bfi	r3, r2, #0, #3
    f4c0:	743b      	strb	r3, [r7, #16]
    f4c2:	7c3b      	ldrb	r3, [r7, #16]
    f4c4:	f043 0310 	orr.w	r3, r3, #16
    f4c8:	743b      	strb	r3, [r7, #16]
    f4ca:	7c3b      	ldrb	r3, [r7, #16]
    f4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f4d0:	743b      	strb	r3, [r7, #16]
    f4d2:	7c7b      	ldrb	r3, [r7, #17]
    f4d4:	2202      	movs	r2, #2
    f4d6:	f362 1305 	bfi	r3, r2, #4, #2
    f4da:	747b      	strb	r3, [r7, #17]
    f4dc:	7abb      	ldrb	r3, [r7, #10]
    f4de:	753b      	strb	r3, [r7, #20]
    f4e0:	2301      	movs	r3, #1
    f4e2:	61fb      	str	r3, [r7, #28]
    f4e4:	1d3b      	adds	r3, r7, #4
    f4e6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4ea:	7b5b      	ldrb	r3, [r3, #13]
    f4ec:	2b00      	cmp	r3, #0
    f4ee:	d003      	beq.n	f4f8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    f4f0:	2100      	movs	r1, #0
    f4f2:	68f8      	ldr	r0, [r7, #12]
    f4f4:	4b09      	ldr	r3, [pc, #36]	; (f51c <n25q256a_write_reg+0x98>)
    f4f6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f4f8:	f107 0310 	add.w	r3, r7, #16
    f4fc:	4619      	mov	r1, r3
    f4fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f500:	4b07      	ldr	r3, [pc, #28]	; (f520 <n25q256a_write_reg+0x9c>)
    f502:	4798      	blx	r3
	if (n25q->xip_mode) {
    f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f506:	7b5b      	ldrb	r3, [r3, #13]
    f508:	2b00      	cmp	r3, #0
    f50a:	d003      	beq.n	f514 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    f50c:	2101      	movs	r1, #1
    f50e:	68f8      	ldr	r0, [r7, #12]
    f510:	4b02      	ldr	r3, [pc, #8]	; (f51c <n25q256a_write_reg+0x98>)
    f512:	4798      	blx	r3
	}
}
    f514:	bf00      	nop
    f516:	3730      	adds	r7, #48	; 0x30
    f518:	46bd      	mov	sp, r7
    f51a:	bd80      	pop	{r7, pc}
    f51c:	0000f31d 	.word	0x0000f31d
    f520:	00006301 	.word	0x00006301

0000f524 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    f524:	b580      	push	{r7, lr}
    f526:	b090      	sub	sp, #64	; 0x40
    f528:	af00      	add	r7, sp, #0
    f52a:	6078      	str	r0, [r7, #4]
    f52c:	460b      	mov	r3, r1
    f52e:	70fb      	strb	r3, [r7, #3]
    f530:	4613      	mov	r3, r2
    f532:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f534:	687b      	ldr	r3, [r7, #4]
    f536:	681b      	ldr	r3, [r3, #0]
    f538:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    f53a:	78bb      	ldrb	r3, [r7, #2]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d001      	beq.n	f544 <n25q256a_write_enable+0x20>
    f540:	2306      	movs	r3, #6
    f542:	e000      	b.n	f546 <n25q256a_write_enable+0x22>
    f544:	2304      	movs	r3, #4
    f546:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    f54a:	f107 0320 	add.w	r3, r7, #32
    f54e:	2200      	movs	r2, #0
    f550:	601a      	str	r2, [r3, #0]
    f552:	605a      	str	r2, [r3, #4]
    f554:	609a      	str	r2, [r3, #8]
    f556:	60da      	str	r2, [r3, #12]
    f558:	611a      	str	r2, [r3, #16]
    f55a:	615a      	str	r2, [r3, #20]
    f55c:	78fb      	ldrb	r3, [r7, #3]
    f55e:	f003 0307 	and.w	r3, r3, #7
    f562:	b2da      	uxtb	r2, r3
    f564:	f897 3020 	ldrb.w	r3, [r7, #32]
    f568:	f362 0302 	bfi	r3, r2, #0, #3
    f56c:	f887 3020 	strb.w	r3, [r7, #32]
    f570:	f897 3020 	ldrb.w	r3, [r7, #32]
    f574:	f043 0310 	orr.w	r3, r3, #16
    f578:	f887 3020 	strb.w	r3, [r7, #32]
    f57c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    f580:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    f584:	f107 0308 	add.w	r3, r7, #8
    f588:	2200      	movs	r2, #0
    f58a:	601a      	str	r2, [r3, #0]
    f58c:	605a      	str	r2, [r3, #4]
    f58e:	609a      	str	r2, [r3, #8]
    f590:	60da      	str	r2, [r3, #12]
    f592:	611a      	str	r2, [r3, #16]
    f594:	615a      	str	r2, [r3, #20]
    f596:	78fb      	ldrb	r3, [r7, #3]
    f598:	f003 0307 	and.w	r3, r3, #7
    f59c:	b2da      	uxtb	r2, r3
    f59e:	7a3b      	ldrb	r3, [r7, #8]
    f5a0:	f362 0302 	bfi	r3, r2, #0, #3
    f5a4:	723b      	strb	r3, [r7, #8]
    f5a6:	7a3b      	ldrb	r3, [r7, #8]
    f5a8:	f043 0310 	orr.w	r3, r3, #16
    f5ac:	723b      	strb	r3, [r7, #8]
    f5ae:	7a3b      	ldrb	r3, [r7, #8]
    f5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f5b4:	723b      	strb	r3, [r7, #8]
    f5b6:	2305      	movs	r3, #5
    f5b8:	733b      	strb	r3, [r7, #12]
    f5ba:	2301      	movs	r3, #1
    f5bc:	617b      	str	r3, [r7, #20]
    f5be:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    f5c2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    f5c4:	f107 0320 	add.w	r3, r7, #32
    f5c8:	4619      	mov	r1, r3
    f5ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f5cc:	4b08      	ldr	r3, [pc, #32]	; (f5f0 <n25q256a_write_enable+0xcc>)
    f5ce:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    f5d0:	f107 0308 	add.w	r3, r7, #8
    f5d4:	4619      	mov	r1, r3
    f5d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f5d8:	4b05      	ldr	r3, [pc, #20]	; (f5f0 <n25q256a_write_enable+0xcc>)
    f5da:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    f5dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    f5e0:	f003 0302 	and.w	r3, r3, #2
    f5e4:	2b00      	cmp	r3, #0
    f5e6:	d0ed      	beq.n	f5c4 <n25q256a_write_enable+0xa0>
}
    f5e8:	bf00      	nop
    f5ea:	3740      	adds	r7, #64	; 0x40
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	00006301 	.word	0x00006301

0000f5f4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    f5f4:	b590      	push	{r4, r7, lr}
    f5f6:	b087      	sub	sp, #28
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]
    f5fc:	460b      	mov	r3, r1
    f5fe:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f604:	68fb      	ldr	r3, [r7, #12]
    f606:	7b1b      	ldrb	r3, [r3, #12]
    f608:	2b00      	cmp	r3, #0
    f60a:	d001      	beq.n	f610 <n25q256a_switch_mode+0x1c>
    f60c:	2306      	movs	r3, #6
    f60e:	e000      	b.n	f612 <n25q256a_switch_mode+0x1e>
    f610:	2300      	movs	r3, #0
    f612:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f614:	7afb      	ldrb	r3, [r7, #11]
    f616:	2265      	movs	r2, #101	; 0x65
    f618:	4619      	mov	r1, r3
    f61a:	6878      	ldr	r0, [r7, #4]
    f61c:	4b25      	ldr	r3, [pc, #148]	; (f6b4 <n25q256a_switch_mode+0xc0>)
    f61e:	4798      	blx	r3
    f620:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    f622:	2300      	movs	r3, #0
    f624:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    f626:	68fb      	ldr	r3, [r7, #12]
    f628:	7b1b      	ldrb	r3, [r3, #12]
    f62a:	78fa      	ldrb	r2, [r7, #3]
    f62c:	429a      	cmp	r2, r3
    f62e:	d03d      	beq.n	f6ac <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    f630:	78fb      	ldrb	r3, [r7, #3]
    f632:	2b00      	cmp	r3, #0
    f634:	d00b      	beq.n	f64e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    f636:	697b      	ldr	r3, [r7, #20]
    f638:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f63c:	2b00      	cmp	r3, #0
    f63e:	d011      	beq.n	f664 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    f640:	697b      	ldr	r3, [r7, #20]
    f642:	f003 031f 	and.w	r3, r3, #31
    f646:	617b      	str	r3, [r7, #20]
			modify = 1;
    f648:	2301      	movs	r3, #1
    f64a:	74fb      	strb	r3, [r7, #19]
    f64c:	e00a      	b.n	f664 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    f64e:	697b      	ldr	r3, [r7, #20]
    f650:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f654:	2b00      	cmp	r3, #0
    f656:	d105      	bne.n	f664 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    f658:	697b      	ldr	r3, [r7, #20]
    f65a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    f65e:	617b      	str	r3, [r7, #20]
			modify = 1;
    f660:	2301      	movs	r3, #1
    f662:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    f664:	7cfb      	ldrb	r3, [r7, #19]
    f666:	2b00      	cmp	r3, #0
    f668:	d021      	beq.n	f6ae <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    f66a:	68fb      	ldr	r3, [r7, #12]
    f66c:	78fa      	ldrb	r2, [r7, #3]
    f66e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    f670:	7afb      	ldrb	r3, [r7, #11]
    f672:	2201      	movs	r2, #1
    f674:	4619      	mov	r1, r3
    f676:	6878      	ldr	r0, [r7, #4]
    f678:	4b0f      	ldr	r3, [pc, #60]	; (f6b8 <n25q256a_switch_mode+0xc4>)
    f67a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    f67c:	7af9      	ldrb	r1, [r7, #11]
    f67e:	697b      	ldr	r3, [r7, #20]
    f680:	2261      	movs	r2, #97	; 0x61
    f682:	6878      	ldr	r0, [r7, #4]
    f684:	4c0d      	ldr	r4, [pc, #52]	; (f6bc <n25q256a_switch_mode+0xc8>)
    f686:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f688:	78fb      	ldrb	r3, [r7, #3]
    f68a:	2b00      	cmp	r3, #0
    f68c:	d001      	beq.n	f692 <n25q256a_switch_mode+0x9e>
    f68e:	2306      	movs	r3, #6
    f690:	e000      	b.n	f694 <n25q256a_switch_mode+0xa0>
    f692:	2300      	movs	r3, #0
    f694:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f696:	7afb      	ldrb	r3, [r7, #11]
    f698:	2265      	movs	r2, #101	; 0x65
    f69a:	4619      	mov	r1, r3
    f69c:	6878      	ldr	r0, [r7, #4]
    f69e:	4b05      	ldr	r3, [pc, #20]	; (f6b4 <n25q256a_switch_mode+0xc0>)
    f6a0:	4798      	blx	r3
    f6a2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    f6a4:	68fb      	ldr	r3, [r7, #12]
    f6a6:	78fa      	ldrb	r2, [r7, #3]
    f6a8:	731a      	strb	r2, [r3, #12]
    f6aa:	e000      	b.n	f6ae <n25q256a_switch_mode+0xba>
		return;
    f6ac:	bf00      	nop
	}
}
    f6ae:	371c      	adds	r7, #28
    f6b0:	46bd      	mov	sp, r7
    f6b2:	bd90      	pop	{r4, r7, pc}
    f6b4:	0000f3e9 	.word	0x0000f3e9
    f6b8:	0000f525 	.word	0x0000f525
    f6bc:	0000f485 	.word	0x0000f485

0000f6c0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    f6c0:	b580      	push	{r7, lr}
    f6c2:	b086      	sub	sp, #24
    f6c4:	af00      	add	r7, sp, #0
    f6c6:	60f8      	str	r0, [r7, #12]
    f6c8:	60b9      	str	r1, [r7, #8]
    f6ca:	607a      	str	r2, [r7, #4]
    f6cc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    f6ce:	68fb      	ldr	r3, [r7, #12]
    f6d0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    f6d2:	4a0c      	ldr	r2, [pc, #48]	; (f704 <n25q256a_construct+0x44>)
    f6d4:	68b9      	ldr	r1, [r7, #8]
    f6d6:	68f8      	ldr	r0, [r7, #12]
    f6d8:	4b0b      	ldr	r3, [pc, #44]	; (f708 <n25q256a_construct+0x48>)
    f6da:	4798      	blx	r3
	n25q->quad_mode    = 0;
    f6dc:	697b      	ldr	r3, [r7, #20]
    f6de:	2200      	movs	r2, #0
    f6e0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    f6e2:	697b      	ldr	r3, [r7, #20]
    f6e4:	2200      	movs	r2, #0
    f6e6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    f6e8:	697b      	ldr	r3, [r7, #20]
    f6ea:	687a      	ldr	r2, [r7, #4]
    f6ec:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    f6ee:	78fb      	ldrb	r3, [r7, #3]
    f6f0:	4619      	mov	r1, r3
    f6f2:	68f8      	ldr	r0, [r7, #12]
    f6f4:	4b05      	ldr	r3, [pc, #20]	; (f70c <n25q256a_construct+0x4c>)
    f6f6:	4798      	blx	r3
	return me;
    f6f8:	68fb      	ldr	r3, [r7, #12]
}
    f6fa:	4618      	mov	r0, r3
    f6fc:	3718      	adds	r7, #24
    f6fe:	46bd      	mov	sp, r7
    f700:	bd80      	pop	{r7, pc}
    f702:	bf00      	nop
    f704:	00012c88 	.word	0x00012c88
    f708:	0000fb9d 	.word	0x0000fb9d
    f70c:	0000f5f5 	.word	0x0000f5f5

0000f710 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f710:	b580      	push	{r7, lr}
    f712:	b08c      	sub	sp, #48	; 0x30
    f714:	af00      	add	r7, sp, #0
    f716:	60f8      	str	r0, [r7, #12]
    f718:	60b9      	str	r1, [r7, #8]
    f71a:	607a      	str	r2, [r7, #4]
    f71c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f71e:	68fb      	ldr	r3, [r7, #12]
    f720:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f722:	68fb      	ldr	r3, [r7, #12]
    f724:	681b      	ldr	r3, [r3, #0]
    f726:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    f728:	f107 0310 	add.w	r3, r7, #16
    f72c:	2200      	movs	r2, #0
    f72e:	601a      	str	r2, [r3, #0]
    f730:	605a      	str	r2, [r3, #4]
    f732:	609a      	str	r2, [r3, #8]
    f734:	60da      	str	r2, [r3, #12]
    f736:	611a      	str	r2, [r3, #16]
    f738:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f73c:	7b1b      	ldrb	r3, [r3, #12]
    f73e:	2b00      	cmp	r3, #0
    f740:	d001      	beq.n	f746 <n25q256a_read+0x36>
    f742:	2206      	movs	r2, #6
    f744:	e000      	b.n	f748 <n25q256a_read+0x38>
    f746:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    f748:	7c3b      	ldrb	r3, [r7, #16]
    f74a:	f362 0302 	bfi	r3, r2, #0, #3
    f74e:	743b      	strb	r3, [r7, #16]
    f750:	7c3b      	ldrb	r3, [r7, #16]
    f752:	f043 0310 	orr.w	r3, r3, #16
    f756:	743b      	strb	r3, [r7, #16]
    f758:	7c3b      	ldrb	r3, [r7, #16]
    f75a:	f043 0320 	orr.w	r3, r3, #32
    f75e:	743b      	strb	r3, [r7, #16]
    f760:	7c3b      	ldrb	r3, [r7, #16]
    f762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f766:	743b      	strb	r3, [r7, #16]
    f768:	7c7b      	ldrb	r3, [r7, #17]
    f76a:	2201      	movs	r2, #1
    f76c:	f362 1305 	bfi	r3, r2, #4, #2
    f770:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    f772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f774:	7b1b      	ldrb	r3, [r3, #12]
    f776:	2b00      	cmp	r3, #0
    f778:	d001      	beq.n	f77e <n25q256a_read+0x6e>
    f77a:	220a      	movs	r2, #10
    f77c:	e000      	b.n	f780 <n25q256a_read+0x70>
    f77e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    f780:	7cbb      	ldrb	r3, [r7, #18]
    f782:	f362 0304 	bfi	r3, r2, #0, #5
    f786:	74bb      	strb	r3, [r7, #18]
    f788:	230b      	movs	r3, #11
    f78a:	753b      	strb	r3, [r7, #20]
    f78c:	687b      	ldr	r3, [r7, #4]
    f78e:	61bb      	str	r3, [r7, #24]
    f790:	683b      	ldr	r3, [r7, #0]
    f792:	61fb      	str	r3, [r7, #28]
    f794:	68bb      	ldr	r3, [r7, #8]
    f796:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    f798:	f107 0310 	add.w	r3, r7, #16
    f79c:	4619      	mov	r1, r3
    f79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f7a0:	4b03      	ldr	r3, [pc, #12]	; (f7b0 <n25q256a_read+0xa0>)
    f7a2:	4798      	blx	r3
	return ERR_NONE;
    f7a4:	2300      	movs	r3, #0
}
    f7a6:	4618      	mov	r0, r3
    f7a8:	3730      	adds	r7, #48	; 0x30
    f7aa:	46bd      	mov	sp, r7
    f7ac:	bd80      	pop	{r7, pc}
    f7ae:	bf00      	nop
    f7b0:	00006301 	.word	0x00006301

0000f7b4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f7b4:	b580      	push	{r7, lr}
    f7b6:	b08c      	sub	sp, #48	; 0x30
    f7b8:	af00      	add	r7, sp, #0
    f7ba:	60f8      	str	r0, [r7, #12]
    f7bc:	60b9      	str	r1, [r7, #8]
    f7be:	607a      	str	r2, [r7, #4]
    f7c0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f7c2:	68fb      	ldr	r3, [r7, #12]
    f7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f7c6:	68fb      	ldr	r3, [r7, #12]
    f7c8:	681b      	ldr	r3, [r3, #0]
    f7ca:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    f7cc:	f107 0310 	add.w	r3, r7, #16
    f7d0:	2200      	movs	r2, #0
    f7d2:	601a      	str	r2, [r3, #0]
    f7d4:	605a      	str	r2, [r3, #4]
    f7d6:	609a      	str	r2, [r3, #8]
    f7d8:	60da      	str	r2, [r3, #12]
    f7da:	611a      	str	r2, [r3, #16]
    f7dc:	615a      	str	r2, [r3, #20]
    f7de:	7c3b      	ldrb	r3, [r7, #16]
    f7e0:	f043 0310 	orr.w	r3, r3, #16
    f7e4:	743b      	strb	r3, [r7, #16]
    f7e6:	7c3b      	ldrb	r3, [r7, #16]
    f7e8:	f043 0320 	orr.w	r3, r3, #32
    f7ec:	743b      	strb	r3, [r7, #16]
    f7ee:	7c3b      	ldrb	r3, [r7, #16]
    f7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f7f4:	743b      	strb	r3, [r7, #16]
    f7f6:	7c7b      	ldrb	r3, [r7, #17]
    f7f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    f7fc:	747b      	strb	r3, [r7, #17]
    f7fe:	2302      	movs	r3, #2
    f800:	753b      	strb	r3, [r7, #20]
    f802:	687b      	ldr	r3, [r7, #4]
    f804:	61bb      	str	r3, [r7, #24]
    f806:	683b      	ldr	r3, [r7, #0]
    f808:	61fb      	str	r3, [r7, #28]
    f80a:	68bb      	ldr	r3, [r7, #8]
    f80c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f810:	7b1b      	ldrb	r3, [r3, #12]
    f812:	2b00      	cmp	r3, #0
    f814:	d001      	beq.n	f81a <n25q256a_write+0x66>
    f816:	2206      	movs	r2, #6
    f818:	e000      	b.n	f81c <n25q256a_write+0x68>
    f81a:	2200      	movs	r2, #0
    f81c:	7c3b      	ldrb	r3, [r7, #16]
    f81e:	f362 0302 	bfi	r3, r2, #0, #3
    f822:	743b      	strb	r3, [r7, #16]
	while (length) {
    f824:	e035      	b.n	f892 <n25q256a_write+0xde>
		cmd.address = address;
    f826:	687b      	ldr	r3, [r7, #4]
    f828:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    f82a:	683b      	ldr	r3, [r7, #0]
    f82c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f830:	d802      	bhi.n	f838 <n25q256a_write+0x84>
			cmd.buf_len = length;
    f832:	683b      	ldr	r3, [r7, #0]
    f834:	61fb      	str	r3, [r7, #28]
    f836:	e002      	b.n	f83e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    f838:	f44f 7380 	mov.w	r3, #256	; 0x100
    f83c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f83e:	7c3b      	ldrb	r3, [r7, #16]
    f840:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f844:	b2db      	uxtb	r3, r3
    f846:	2201      	movs	r2, #1
    f848:	4619      	mov	r1, r3
    f84a:	68f8      	ldr	r0, [r7, #12]
    f84c:	4b19      	ldr	r3, [pc, #100]	; (f8b4 <n25q256a_write+0x100>)
    f84e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    f850:	f107 0310 	add.w	r3, r7, #16
    f854:	4619      	mov	r1, r3
    f856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f858:	4b17      	ldr	r3, [pc, #92]	; (f8b8 <n25q256a_write+0x104>)
    f85a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f85c:	bf00      	nop
    f85e:	7c3b      	ldrb	r3, [r7, #16]
    f860:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f864:	b2db      	uxtb	r3, r3
    f866:	2270      	movs	r2, #112	; 0x70
    f868:	4619      	mov	r1, r3
    f86a:	68f8      	ldr	r0, [r7, #12]
    f86c:	4b13      	ldr	r3, [pc, #76]	; (f8bc <n25q256a_write+0x108>)
    f86e:	4798      	blx	r3
    f870:	4603      	mov	r3, r0
    f872:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f876:	2b00      	cmp	r3, #0
    f878:	d0f1      	beq.n	f85e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    f87a:	6a3a      	ldr	r2, [r7, #32]
    f87c:	69fb      	ldr	r3, [r7, #28]
    f87e:	4413      	add	r3, r2
    f880:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    f882:	69fb      	ldr	r3, [r7, #28]
    f884:	683a      	ldr	r2, [r7, #0]
    f886:	1ad3      	subs	r3, r2, r3
    f888:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    f88a:	69fb      	ldr	r3, [r7, #28]
    f88c:	687a      	ldr	r2, [r7, #4]
    f88e:	4413      	add	r3, r2
    f890:	607b      	str	r3, [r7, #4]
	while (length) {
    f892:	683b      	ldr	r3, [r7, #0]
    f894:	2b00      	cmp	r3, #0
    f896:	d1c6      	bne.n	f826 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f89a:	7b5b      	ldrb	r3, [r3, #13]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d003      	beq.n	f8a8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    f8a0:	2101      	movs	r1, #1
    f8a2:	68f8      	ldr	r0, [r7, #12]
    f8a4:	4b06      	ldr	r3, [pc, #24]	; (f8c0 <n25q256a_write+0x10c>)
    f8a6:	4798      	blx	r3
	}
	return ERR_NONE;
    f8a8:	2300      	movs	r3, #0
}
    f8aa:	4618      	mov	r0, r3
    f8ac:	3730      	adds	r7, #48	; 0x30
    f8ae:	46bd      	mov	sp, r7
    f8b0:	bd80      	pop	{r7, pc}
    f8b2:	bf00      	nop
    f8b4:	0000f525 	.word	0x0000f525
    f8b8:	00006301 	.word	0x00006301
    f8bc:	0000f3e9 	.word	0x0000f3e9
    f8c0:	0000f31d 	.word	0x0000f31d

0000f8c4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    f8c4:	b580      	push	{r7, lr}
    f8c6:	b090      	sub	sp, #64	; 0x40
    f8c8:	af00      	add	r7, sp, #0
    f8ca:	60f8      	str	r0, [r7, #12]
    f8cc:	60b9      	str	r1, [r7, #8]
    f8ce:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f8d0:	68fb      	ldr	r3, [r7, #12]
    f8d2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f8d4:	68fb      	ldr	r3, [r7, #12]
    f8d6:	681b      	ldr	r3, [r3, #0]
    f8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    f8da:	f107 0314 	add.w	r3, r7, #20
    f8de:	2200      	movs	r2, #0
    f8e0:	601a      	str	r2, [r3, #0]
    f8e2:	605a      	str	r2, [r3, #4]
    f8e4:	609a      	str	r2, [r3, #8]
    f8e6:	60da      	str	r2, [r3, #12]
    f8e8:	611a      	str	r2, [r3, #16]
    f8ea:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f8ee:	7b1b      	ldrb	r3, [r3, #12]
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d001      	beq.n	f8f8 <n25q256a_erase+0x34>
    f8f4:	2206      	movs	r2, #6
    f8f6:	e000      	b.n	f8fa <n25q256a_erase+0x36>
    f8f8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    f8fa:	7d3b      	ldrb	r3, [r7, #20]
    f8fc:	f362 0302 	bfi	r3, r2, #0, #3
    f900:	753b      	strb	r3, [r7, #20]
    f902:	7d3b      	ldrb	r3, [r7, #20]
    f904:	f043 0310 	orr.w	r3, r3, #16
    f908:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    f90a:	687b      	ldr	r3, [r7, #4]
    f90c:	4a56      	ldr	r2, [pc, #344]	; (fa68 <n25q256a_erase+0x1a4>)
    f90e:	4293      	cmp	r3, r2
    f910:	bf94      	ite	ls
    f912:	2301      	movls	r3, #1
    f914:	2300      	movhi	r3, #0
    f916:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    f918:	7d3b      	ldrb	r3, [r7, #20]
    f91a:	f362 1345 	bfi	r3, r2, #5, #1
    f91e:	753b      	strb	r3, [r7, #20]
    f920:	7d7b      	ldrb	r3, [r7, #21]
    f922:	2202      	movs	r2, #2
    f924:	f362 1305 	bfi	r3, r2, #4, #2
    f928:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    f92a:	68bb      	ldr	r3, [r7, #8]
    f92c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    f92e:	687b      	ldr	r3, [r7, #4]
    f930:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    f932:	2300      	movs	r3, #0
    f934:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    f936:	687b      	ldr	r3, [r7, #4]
    f938:	f3c3 030b 	ubfx	r3, r3, #0, #12
    f93c:	2b00      	cmp	r3, #0
    f93e:	d104      	bne.n	f94a <n25q256a_erase+0x86>
    f940:	68bb      	ldr	r3, [r7, #8]
    f942:	f3c3 030b 	ubfx	r3, r3, #0, #12
    f946:	2b00      	cmp	r3, #0
    f948:	d002      	beq.n	f950 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    f94a:	f06f 030c 	mvn.w	r3, #12
    f94e:	e087      	b.n	fa60 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    f950:	687b      	ldr	r3, [r7, #4]
    f952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f956:	d368      	bcc.n	fa2a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    f958:	23c7      	movs	r3, #199	; 0xc7
    f95a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f95c:	7d3b      	ldrb	r3, [r7, #20]
    f95e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f962:	b2db      	uxtb	r3, r3
    f964:	2201      	movs	r2, #1
    f966:	4619      	mov	r1, r3
    f968:	68f8      	ldr	r0, [r7, #12]
    f96a:	4b40      	ldr	r3, [pc, #256]	; (fa6c <n25q256a_erase+0x1a8>)
    f96c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    f96e:	f107 0314 	add.w	r3, r7, #20
    f972:	4619      	mov	r1, r3
    f974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f976:	4b3e      	ldr	r3, [pc, #248]	; (fa70 <n25q256a_erase+0x1ac>)
    f978:	4798      	blx	r3
    f97a:	e059      	b.n	fa30 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    f97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f97e:	b29b      	uxth	r3, r3
    f980:	2b00      	cmp	r3, #0
    f982:	d11f      	bne.n	f9c4 <n25q256a_erase+0x100>
    f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    f98a:	d31b      	bcc.n	f9c4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    f98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f98e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    f990:	23d8      	movs	r3, #216	; 0xd8
    f992:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f994:	7d3b      	ldrb	r3, [r7, #20]
    f996:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f99a:	b2db      	uxtb	r3, r3
    f99c:	2201      	movs	r2, #1
    f99e:	4619      	mov	r1, r3
    f9a0:	68f8      	ldr	r0, [r7, #12]
    f9a2:	4b32      	ldr	r3, [pc, #200]	; (fa6c <n25q256a_erase+0x1a8>)
    f9a4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    f9a6:	f107 0314 	add.w	r3, r7, #20
    f9aa:	4619      	mov	r1, r3
    f9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f9ae:	4b30      	ldr	r3, [pc, #192]	; (fa70 <n25q256a_erase+0x1ac>)
    f9b0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    f9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f9b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    f9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f9bc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    f9c0:	63bb      	str	r3, [r7, #56]	; 0x38
    f9c2:	e023      	b.n	fa0c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    f9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    f9ca:	d31b      	bcc.n	fa04 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    f9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f9ce:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    f9d0:	2320      	movs	r3, #32
    f9d2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f9d4:	7d3b      	ldrb	r3, [r7, #20]
    f9d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f9da:	b2db      	uxtb	r3, r3
    f9dc:	2201      	movs	r2, #1
    f9de:	4619      	mov	r1, r3
    f9e0:	68f8      	ldr	r0, [r7, #12]
    f9e2:	4b22      	ldr	r3, [pc, #136]	; (fa6c <n25q256a_erase+0x1a8>)
    f9e4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    f9e6:	f107 0314 	add.w	r3, r7, #20
    f9ea:	4619      	mov	r1, r3
    f9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f9ee:	4b20      	ldr	r3, [pc, #128]	; (fa70 <n25q256a_erase+0x1ac>)
    f9f0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    f9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    f9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f9fc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    fa00:	63bb      	str	r3, [r7, #56]	; 0x38
    fa02:	e003      	b.n	fa0c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    fa04:	f06f 030c 	mvn.w	r3, #12
    fa08:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    fa0a:	e011      	b.n	fa30 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    fa0c:	bf00      	nop
    fa0e:	7d3b      	ldrb	r3, [r7, #20]
    fa10:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fa14:	b2db      	uxtb	r3, r3
    fa16:	2270      	movs	r2, #112	; 0x70
    fa18:	4619      	mov	r1, r3
    fa1a:	68f8      	ldr	r0, [r7, #12]
    fa1c:	4b15      	ldr	r3, [pc, #84]	; (fa74 <n25q256a_erase+0x1b0>)
    fa1e:	4798      	blx	r3
    fa20:	4603      	mov	r3, r0
    fa22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fa26:	2b00      	cmp	r3, #0
    fa28:	d0f1      	beq.n	fa0e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d1a5      	bne.n	f97c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    fa30:	bf00      	nop
    fa32:	7d3b      	ldrb	r3, [r7, #20]
    fa34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fa38:	b2db      	uxtb	r3, r3
    fa3a:	2270      	movs	r2, #112	; 0x70
    fa3c:	4619      	mov	r1, r3
    fa3e:	68f8      	ldr	r0, [r7, #12]
    fa40:	4b0c      	ldr	r3, [pc, #48]	; (fa74 <n25q256a_erase+0x1b0>)
    fa42:	4798      	blx	r3
    fa44:	4603      	mov	r3, r0
    fa46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d0f1      	beq.n	fa32 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fa50:	7b5b      	ldrb	r3, [r3, #13]
    fa52:	2b00      	cmp	r3, #0
    fa54:	d003      	beq.n	fa5e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    fa56:	2101      	movs	r1, #1
    fa58:	68f8      	ldr	r0, [r7, #12]
    fa5a:	4b07      	ldr	r3, [pc, #28]	; (fa78 <n25q256a_erase+0x1b4>)
    fa5c:	4798      	blx	r3
	}
	return rc;
    fa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    fa60:	4618      	mov	r0, r3
    fa62:	3740      	adds	r7, #64	; 0x40
    fa64:	46bd      	mov	sp, r7
    fa66:	bd80      	pop	{r7, pc}
    fa68:	001fffff 	.word	0x001fffff
    fa6c:	0000f525 	.word	0x0000f525
    fa70:	00006301 	.word	0x00006301
    fa74:	0000f3e9 	.word	0x0000f3e9
    fa78:	0000f31d 	.word	0x0000f31d

0000fa7c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    fa7c:	b590      	push	{r4, r7, lr}
    fa7e:	b085      	sub	sp, #20
    fa80:	af00      	add	r7, sp, #0
    fa82:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    fa84:	687b      	ldr	r3, [r7, #4]
    fa86:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    fa88:	68fb      	ldr	r3, [r7, #12]
    fa8a:	7b1b      	ldrb	r3, [r3, #12]
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	d001      	beq.n	fa94 <n25q256a_enable_xip+0x18>
    fa90:	2306      	movs	r3, #6
    fa92:	e000      	b.n	fa96 <n25q256a_enable_xip+0x1a>
    fa94:	2300      	movs	r3, #0
    fa96:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    fa98:	68fb      	ldr	r3, [r7, #12]
    fa9a:	7b5b      	ldrb	r3, [r3, #13]
    fa9c:	2b00      	cmp	r3, #0
    fa9e:	d129      	bne.n	faf4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    faa0:	7afb      	ldrb	r3, [r7, #11]
    faa2:	2285      	movs	r2, #133	; 0x85
    faa4:	4619      	mov	r1, r3
    faa6:	6878      	ldr	r0, [r7, #4]
    faa8:	4b15      	ldr	r3, [pc, #84]	; (fb00 <n25q256a_enable_xip+0x84>)
    faaa:	4798      	blx	r3
    faac:	4603      	mov	r3, r0
    faae:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    fab0:	7abb      	ldrb	r3, [r7, #10]
    fab2:	f003 0308 	and.w	r3, r3, #8
    fab6:	2b00      	cmp	r3, #0
    fab8:	d015      	beq.n	fae6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    faba:	7abb      	ldrb	r3, [r7, #10]
    fabc:	f023 0308 	bic.w	r3, r3, #8
    fac0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    fac2:	7abb      	ldrb	r3, [r7, #10]
    fac4:	7af9      	ldrb	r1, [r7, #11]
    fac6:	2281      	movs	r2, #129	; 0x81
    fac8:	6878      	ldr	r0, [r7, #4]
    faca:	4c0e      	ldr	r4, [pc, #56]	; (fb04 <n25q256a_enable_xip+0x88>)
    facc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    face:	bf00      	nop
    fad0:	7afb      	ldrb	r3, [r7, #11]
    fad2:	2270      	movs	r2, #112	; 0x70
    fad4:	4619      	mov	r1, r3
    fad6:	6878      	ldr	r0, [r7, #4]
    fad8:	4b09      	ldr	r3, [pc, #36]	; (fb00 <n25q256a_enable_xip+0x84>)
    fada:	4798      	blx	r3
    fadc:	4603      	mov	r3, r0
    fade:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fae2:	2b00      	cmp	r3, #0
    fae4:	d0f4      	beq.n	fad0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    fae6:	68fb      	ldr	r3, [r7, #12]
    fae8:	2201      	movs	r2, #1
    faea:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    faec:	2101      	movs	r1, #1
    faee:	6878      	ldr	r0, [r7, #4]
    faf0:	4b05      	ldr	r3, [pc, #20]	; (fb08 <n25q256a_enable_xip+0x8c>)
    faf2:	4798      	blx	r3
	}
	return ERR_NONE;
    faf4:	2300      	movs	r3, #0
}
    faf6:	4618      	mov	r0, r3
    faf8:	3714      	adds	r7, #20
    fafa:	46bd      	mov	sp, r7
    fafc:	bd90      	pop	{r4, r7, pc}
    fafe:	bf00      	nop
    fb00:	0000f3e9 	.word	0x0000f3e9
    fb04:	0000f485 	.word	0x0000f485
    fb08:	0000f31d 	.word	0x0000f31d

0000fb0c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    fb0c:	b580      	push	{r7, lr}
    fb0e:	b086      	sub	sp, #24
    fb10:	af00      	add	r7, sp, #0
    fb12:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	681b      	ldr	r3, [r3, #0]
    fb1c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    fb1e:	697b      	ldr	r3, [r7, #20]
    fb20:	7b1b      	ldrb	r3, [r3, #12]
    fb22:	2b00      	cmp	r3, #0
    fb24:	d001      	beq.n	fb2a <n25q256a_disable_xip+0x1e>
    fb26:	2306      	movs	r3, #6
    fb28:	e000      	b.n	fb2c <n25q256a_disable_xip+0x20>
    fb2a:	2300      	movs	r3, #0
    fb2c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    fb2e:	2100      	movs	r1, #0
    fb30:	6878      	ldr	r0, [r7, #4]
    fb32:	4b15      	ldr	r3, [pc, #84]	; (fb88 <n25q256a_disable_xip+0x7c>)
    fb34:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    fb36:	7bfb      	ldrb	r3, [r7, #15]
    fb38:	2285      	movs	r2, #133	; 0x85
    fb3a:	4619      	mov	r1, r3
    fb3c:	6878      	ldr	r0, [r7, #4]
    fb3e:	4b13      	ldr	r3, [pc, #76]	; (fb8c <n25q256a_disable_xip+0x80>)
    fb40:	4798      	blx	r3
    fb42:	4603      	mov	r3, r0
    fb44:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    fb46:	7bbb      	ldrb	r3, [r7, #14]
    fb48:	f003 0308 	and.w	r3, r3, #8
    fb4c:	2b00      	cmp	r3, #0
    fb4e:	d113      	bne.n	fb78 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    fb50:	697b      	ldr	r3, [r7, #20]
    fb52:	689b      	ldr	r3, [r3, #8]
    fb54:	2b00      	cmp	r3, #0
    fb56:	d00f      	beq.n	fb78 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    fb58:	693b      	ldr	r3, [r7, #16]
    fb5a:	681b      	ldr	r3, [r3, #0]
    fb5c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    fb5e:	6938      	ldr	r0, [r7, #16]
    fb60:	4b0b      	ldr	r3, [pc, #44]	; (fb90 <n25q256a_disable_xip+0x84>)
    fb62:	4798      	blx	r3
			n25q->pin_exit_xip();
    fb64:	697b      	ldr	r3, [r7, #20]
    fb66:	689b      	ldr	r3, [r3, #8]
    fb68:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    fb6a:	68b9      	ldr	r1, [r7, #8]
    fb6c:	6938      	ldr	r0, [r7, #16]
    fb6e:	4b09      	ldr	r3, [pc, #36]	; (fb94 <n25q256a_disable_xip+0x88>)
    fb70:	4798      	blx	r3
			qspi_sync_enable(descr);
    fb72:	6938      	ldr	r0, [r7, #16]
    fb74:	4b08      	ldr	r3, [pc, #32]	; (fb98 <n25q256a_disable_xip+0x8c>)
    fb76:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    fb78:	697b      	ldr	r3, [r7, #20]
    fb7a:	2200      	movs	r2, #0
    fb7c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    fb7e:	2300      	movs	r3, #0
}
    fb80:	4618      	mov	r0, r3
    fb82:	3718      	adds	r7, #24
    fb84:	46bd      	mov	sp, r7
    fb86:	bd80      	pop	{r7, pc}
    fb88:	0000f31d 	.word	0x0000f31d
    fb8c:	0000f3e9 	.word	0x0000f3e9
    fb90:	000062c5 	.word	0x000062c5
    fb94:	0000623d 	.word	0x0000623d
    fb98:	00006289 	.word	0x00006289

0000fb9c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    fb9c:	b480      	push	{r7}
    fb9e:	b085      	sub	sp, #20
    fba0:	af00      	add	r7, sp, #0
    fba2:	60f8      	str	r0, [r7, #12]
    fba4:	60b9      	str	r1, [r7, #8]
    fba6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    fba8:	68fb      	ldr	r3, [r7, #12]
    fbaa:	68ba      	ldr	r2, [r7, #8]
    fbac:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    fbae:	68fb      	ldr	r3, [r7, #12]
    fbb0:	687a      	ldr	r2, [r7, #4]
    fbb2:	605a      	str	r2, [r3, #4]

	return me;
    fbb4:	68fb      	ldr	r3, [r7, #12]
}
    fbb6:	4618      	mov	r0, r3
    fbb8:	3714      	adds	r7, #20
    fbba:	46bd      	mov	sp, r7
    fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbc0:	4770      	bx	lr

0000fbc2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    fbc2:	b480      	push	{r7}
    fbc4:	b083      	sub	sp, #12
    fbc6:	af00      	add	r7, sp, #0
    fbc8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    fbca:	687b      	ldr	r3, [r7, #4]
    fbcc:	781b      	ldrb	r3, [r3, #0]
    fbce:	b29a      	uxth	r2, r3
    fbd0:	687b      	ldr	r3, [r7, #4]
    fbd2:	3301      	adds	r3, #1
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	b29b      	uxth	r3, r3
    fbd8:	021b      	lsls	r3, r3, #8
    fbda:	b29b      	uxth	r3, r3
    fbdc:	4413      	add	r3, r2
    fbde:	b29b      	uxth	r3, r3
}
    fbe0:	4618      	mov	r0, r3
    fbe2:	370c      	adds	r7, #12
    fbe4:	46bd      	mov	sp, r7
    fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbea:	4770      	bx	lr

0000fbec <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    fbec:	b480      	push	{r7}
    fbee:	b083      	sub	sp, #12
    fbf0:	af00      	add	r7, sp, #0
    fbf2:	6078      	str	r0, [r7, #4]
	return desc[0];
    fbf4:	687b      	ldr	r3, [r7, #4]
    fbf6:	781b      	ldrb	r3, [r3, #0]
}
    fbf8:	4618      	mov	r0, r3
    fbfa:	370c      	adds	r7, #12
    fbfc:	46bd      	mov	sp, r7
    fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc02:	4770      	bx	lr

0000fc04 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    fc04:	b580      	push	{r7, lr}
    fc06:	b082      	sub	sp, #8
    fc08:	af00      	add	r7, sp, #0
    fc0a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    fc0c:	6878      	ldr	r0, [r7, #4]
    fc0e:	4b05      	ldr	r3, [pc, #20]	; (fc24 <usb_desc_next+0x20>)
    fc10:	4798      	blx	r3
    fc12:	4603      	mov	r3, r0
    fc14:	461a      	mov	r2, r3
    fc16:	687b      	ldr	r3, [r7, #4]
    fc18:	4413      	add	r3, r2
}
    fc1a:	4618      	mov	r0, r3
    fc1c:	3708      	adds	r7, #8
    fc1e:	46bd      	mov	sp, r7
    fc20:	bd80      	pop	{r7, pc}
    fc22:	bf00      	nop
    fc24:	0000fbed 	.word	0x0000fbed

0000fc28 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    fc28:	b580      	push	{r7, lr}
    fc2a:	b08c      	sub	sp, #48	; 0x30
    fc2c:	af00      	add	r7, sp, #0
    fc2e:	6078      	str	r0, [r7, #4]
    fc30:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    fc32:	687b      	ldr	r3, [r7, #4]
    fc34:	689b      	ldr	r3, [r3, #8]
    fc36:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    fc38:	683b      	ldr	r3, [r7, #0]
    fc3a:	681b      	ldr	r3, [r3, #0]
    fc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    fc3e:	2300      	movs	r3, #0
    fc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fc44:	e08f      	b.n	fd66 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d102      	bne.n	fc52 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    fc4c:	f06f 0309 	mvn.w	r3, #9
    fc50:	e092      	b.n	fd78 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc54:	789b      	ldrb	r3, [r3, #2]
    fc56:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc5a:	795b      	ldrb	r3, [r3, #5]
    fc5c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    fc5e:	7c7b      	ldrb	r3, [r7, #17]
    fc60:	2b02      	cmp	r3, #2
    fc62:	d002      	beq.n	fc6a <cdcdf_acm_enable+0x42>
    fc64:	7c7b      	ldrb	r3, [r7, #17]
    fc66:	2b0a      	cmp	r3, #10
    fc68:	d121      	bne.n	fcae <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    fc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fc6e:	6a3a      	ldr	r2, [r7, #32]
    fc70:	5cd2      	ldrb	r2, [r2, r3]
    fc72:	7bbb      	ldrb	r3, [r7, #14]
    fc74:	429a      	cmp	r2, r3
    fc76:	d102      	bne.n	fc7e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    fc78:	f06f 0311 	mvn.w	r3, #17
    fc7c:	e07c      	b.n	fd78 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    fc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fc82:	6a3a      	ldr	r2, [r7, #32]
    fc84:	5cd3      	ldrb	r3, [r2, r3]
    fc86:	2bff      	cmp	r3, #255	; 0xff
    fc88:	d002      	beq.n	fc90 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    fc8a:	f06f 031b 	mvn.w	r3, #27
    fc8e:	e073      	b.n	fd78 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    fc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fc94:	7bb9      	ldrb	r1, [r7, #14]
    fc96:	6a3a      	ldr	r2, [r7, #32]
    fc98:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    fc9a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    fc9c:	683b      	ldr	r3, [r7, #0]
    fc9e:	685b      	ldr	r3, [r3, #4]
    fca0:	2205      	movs	r2, #5
    fca2:	4619      	mov	r1, r3
    fca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fca6:	4b36      	ldr	r3, [pc, #216]	; (fd80 <cdcdf_acm_enable+0x158>)
    fca8:	4798      	blx	r3
    fcaa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    fcac:	e047      	b.n	fd3e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    fcae:	f06f 0309 	mvn.w	r3, #9
    fcb2:	e061      	b.n	fd78 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fcb6:	789b      	ldrb	r3, [r3, #2]
    fcb8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fcbc:	78db      	ldrb	r3, [r3, #3]
    fcbe:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fcc2:	3304      	adds	r3, #4
    fcc4:	4618      	mov	r0, r3
    fcc6:	4b2f      	ldr	r3, [pc, #188]	; (fd84 <cdcdf_acm_enable+0x15c>)
    fcc8:	4798      	blx	r3
    fcca:	4603      	mov	r3, r0
    fccc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    fcce:	7ebb      	ldrb	r3, [r7, #26]
    fcd0:	7ef9      	ldrb	r1, [r7, #27]
    fcd2:	8bba      	ldrh	r2, [r7, #28]
    fcd4:	4618      	mov	r0, r3
    fcd6:	4b2c      	ldr	r3, [pc, #176]	; (fd88 <cdcdf_acm_enable+0x160>)
    fcd8:	4798      	blx	r3
    fcda:	4603      	mov	r3, r0
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d002      	beq.n	fce6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    fce0:	f06f 0313 	mvn.w	r3, #19
    fce4:	e048      	b.n	fd78 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    fce6:	7ebb      	ldrb	r3, [r7, #26]
    fce8:	b25b      	sxtb	r3, r3
    fcea:	2b00      	cmp	r3, #0
    fcec:	da0f      	bge.n	fd0e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    fcee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fcf2:	7eb9      	ldrb	r1, [r7, #26]
    fcf4:	6a3a      	ldr	r2, [r7, #32]
    fcf6:	4413      	add	r3, r2
    fcf8:	460a      	mov	r2, r1
    fcfa:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    fcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd00:	6a3a      	ldr	r2, [r7, #32]
    fd02:	4413      	add	r3, r2
    fd04:	789b      	ldrb	r3, [r3, #2]
    fd06:	4618      	mov	r0, r3
    fd08:	4b20      	ldr	r3, [pc, #128]	; (fd8c <cdcdf_acm_enable+0x164>)
    fd0a:	4798      	blx	r3
    fd0c:	e007      	b.n	fd1e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    fd0e:	7eba      	ldrb	r2, [r7, #26]
    fd10:	6a3b      	ldr	r3, [r7, #32]
    fd12:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    fd14:	6a3b      	ldr	r3, [r7, #32]
    fd16:	791b      	ldrb	r3, [r3, #4]
    fd18:	4618      	mov	r0, r3
    fd1a:	4b1c      	ldr	r3, [pc, #112]	; (fd8c <cdcdf_acm_enable+0x164>)
    fd1c:	4798      	blx	r3
			}
			desc->sod = ep;
    fd1e:	683b      	ldr	r3, [r7, #0]
    fd20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fd22:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    fd24:	683b      	ldr	r3, [r7, #0]
    fd26:	681b      	ldr	r3, [r3, #0]
    fd28:	4618      	mov	r0, r3
    fd2a:	4b19      	ldr	r3, [pc, #100]	; (fd90 <cdcdf_acm_enable+0x168>)
    fd2c:	4798      	blx	r3
    fd2e:	4602      	mov	r2, r0
    fd30:	683b      	ldr	r3, [r7, #0]
    fd32:	685b      	ldr	r3, [r3, #4]
    fd34:	4619      	mov	r1, r3
    fd36:	4610      	mov	r0, r2
    fd38:	4b16      	ldr	r3, [pc, #88]	; (fd94 <cdcdf_acm_enable+0x16c>)
    fd3a:	4798      	blx	r3
    fd3c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    fd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd40:	2b00      	cmp	r3, #0
    fd42:	d1b7      	bne.n	fcb4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    fd44:	683b      	ldr	r3, [r7, #0]
    fd46:	681b      	ldr	r3, [r3, #0]
    fd48:	4618      	mov	r0, r3
    fd4a:	4b11      	ldr	r3, [pc, #68]	; (fd90 <cdcdf_acm_enable+0x168>)
    fd4c:	4798      	blx	r3
    fd4e:	683b      	ldr	r3, [r7, #0]
    fd50:	685b      	ldr	r3, [r3, #4]
    fd52:	2204      	movs	r2, #4
    fd54:	4619      	mov	r1, r3
    fd56:	4b0a      	ldr	r3, [pc, #40]	; (fd80 <cdcdf_acm_enable+0x158>)
    fd58:	4798      	blx	r3
    fd5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    fd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd60:	3301      	adds	r3, #1
    fd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd6a:	2b01      	cmp	r3, #1
    fd6c:	f67f af6b 	bls.w	fc46 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    fd70:	4b09      	ldr	r3, [pc, #36]	; (fd98 <cdcdf_acm_enable+0x170>)
    fd72:	2201      	movs	r2, #1
    fd74:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    fd76:	2300      	movs	r3, #0
}
    fd78:	4618      	mov	r0, r3
    fd7a:	3730      	adds	r7, #48	; 0x30
    fd7c:	46bd      	mov	sp, r7
    fd7e:	bd80      	pop	{r7, pc}
    fd80:	00010ead 	.word	0x00010ead
    fd84:	0000fbc3 	.word	0x0000fbc3
    fd88:	00006e49 	.word	0x00006e49
    fd8c:	00006f35 	.word	0x00006f35
    fd90:	0000fc05 	.word	0x0000fc05
    fd94:	00010f09 	.word	0x00010f09
    fd98:	20002018 	.word	0x20002018

0000fd9c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    fd9c:	b580      	push	{r7, lr}
    fd9e:	b088      	sub	sp, #32
    fda0:	af00      	add	r7, sp, #0
    fda2:	6078      	str	r0, [r7, #4]
    fda4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    fda6:	687b      	ldr	r3, [r7, #4]
    fda8:	689b      	ldr	r3, [r3, #8]
    fdaa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    fdac:	683b      	ldr	r3, [r7, #0]
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d00c      	beq.n	fdcc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    fdb2:	683b      	ldr	r3, [r7, #0]
    fdb4:	681b      	ldr	r3, [r3, #0]
    fdb6:	795b      	ldrb	r3, [r3, #5]
    fdb8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    fdba:	7c7b      	ldrb	r3, [r7, #17]
    fdbc:	2b02      	cmp	r3, #2
    fdbe:	d005      	beq.n	fdcc <cdcdf_acm_disable+0x30>
    fdc0:	7c7b      	ldrb	r3, [r7, #17]
    fdc2:	2b0a      	cmp	r3, #10
    fdc4:	d002      	beq.n	fdcc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    fdc6:	f06f 0309 	mvn.w	r3, #9
    fdca:	e035      	b.n	fe38 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    fdcc:	2300      	movs	r3, #0
    fdce:	77fb      	strb	r3, [r7, #31]
    fdd0:	e01f      	b.n	fe12 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    fdd2:	7ffb      	ldrb	r3, [r7, #31]
    fdd4:	69ba      	ldr	r2, [r7, #24]
    fdd6:	5cd3      	ldrb	r3, [r2, r3]
    fdd8:	2bff      	cmp	r3, #255	; 0xff
    fdda:	d016      	beq.n	fe0a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    fddc:	7ffb      	ldrb	r3, [r7, #31]
    fdde:	69ba      	ldr	r2, [r7, #24]
    fde0:	21ff      	movs	r1, #255	; 0xff
    fde2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    fde4:	7ffb      	ldrb	r3, [r7, #31]
    fde6:	69ba      	ldr	r2, [r7, #24]
    fde8:	4413      	add	r3, r2
    fdea:	789b      	ldrb	r3, [r3, #2]
    fdec:	2bff      	cmp	r3, #255	; 0xff
    fdee:	d00d      	beq.n	fe0c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    fdf0:	7ffb      	ldrb	r3, [r7, #31]
    fdf2:	69ba      	ldr	r2, [r7, #24]
    fdf4:	4413      	add	r3, r2
    fdf6:	789b      	ldrb	r3, [r3, #2]
    fdf8:	4618      	mov	r0, r3
    fdfa:	4b11      	ldr	r3, [pc, #68]	; (fe40 <cdcdf_acm_disable+0xa4>)
    fdfc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    fdfe:	7ffb      	ldrb	r3, [r7, #31]
    fe00:	69ba      	ldr	r2, [r7, #24]
    fe02:	4413      	add	r3, r2
    fe04:	22ff      	movs	r2, #255	; 0xff
    fe06:	709a      	strb	r2, [r3, #2]
    fe08:	e000      	b.n	fe0c <cdcdf_acm_disable+0x70>
			continue;
    fe0a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    fe0c:	7ffb      	ldrb	r3, [r7, #31]
    fe0e:	3301      	adds	r3, #1
    fe10:	77fb      	strb	r3, [r7, #31]
    fe12:	7ffb      	ldrb	r3, [r7, #31]
    fe14:	2b01      	cmp	r3, #1
    fe16:	d9dc      	bls.n	fdd2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    fe18:	69bb      	ldr	r3, [r7, #24]
    fe1a:	791b      	ldrb	r3, [r3, #4]
    fe1c:	2bff      	cmp	r3, #255	; 0xff
    fe1e:	d007      	beq.n	fe30 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    fe20:	69bb      	ldr	r3, [r7, #24]
    fe22:	791b      	ldrb	r3, [r3, #4]
    fe24:	4618      	mov	r0, r3
    fe26:	4b06      	ldr	r3, [pc, #24]	; (fe40 <cdcdf_acm_disable+0xa4>)
    fe28:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    fe2a:	69bb      	ldr	r3, [r7, #24]
    fe2c:	22ff      	movs	r2, #255	; 0xff
    fe2e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    fe30:	4b04      	ldr	r3, [pc, #16]	; (fe44 <cdcdf_acm_disable+0xa8>)
    fe32:	2200      	movs	r2, #0
    fe34:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    fe36:	2300      	movs	r3, #0
}
    fe38:	4618      	mov	r0, r3
    fe3a:	3720      	adds	r7, #32
    fe3c:	46bd      	mov	sp, r7
    fe3e:	bd80      	pop	{r7, pc}
    fe40:	00006ee5 	.word	0x00006ee5
    fe44:	20002018 	.word	0x20002018

0000fe48 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    fe48:	b580      	push	{r7, lr}
    fe4a:	b084      	sub	sp, #16
    fe4c:	af00      	add	r7, sp, #0
    fe4e:	60f8      	str	r0, [r7, #12]
    fe50:	460b      	mov	r3, r1
    fe52:	607a      	str	r2, [r7, #4]
    fe54:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    fe56:	7afb      	ldrb	r3, [r7, #11]
    fe58:	2b01      	cmp	r3, #1
    fe5a:	d009      	beq.n	fe70 <cdcdf_acm_ctrl+0x28>
    fe5c:	2b02      	cmp	r3, #2
    fe5e:	d00d      	beq.n	fe7c <cdcdf_acm_ctrl+0x34>
    fe60:	2b00      	cmp	r3, #0
    fe62:	d10e      	bne.n	fe82 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    fe64:	6879      	ldr	r1, [r7, #4]
    fe66:	68f8      	ldr	r0, [r7, #12]
    fe68:	4b09      	ldr	r3, [pc, #36]	; (fe90 <cdcdf_acm_ctrl+0x48>)
    fe6a:	4798      	blx	r3
    fe6c:	4603      	mov	r3, r0
    fe6e:	e00a      	b.n	fe86 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    fe70:	6879      	ldr	r1, [r7, #4]
    fe72:	68f8      	ldr	r0, [r7, #12]
    fe74:	4b07      	ldr	r3, [pc, #28]	; (fe94 <cdcdf_acm_ctrl+0x4c>)
    fe76:	4798      	blx	r3
    fe78:	4603      	mov	r3, r0
    fe7a:	e004      	b.n	fe86 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    fe7c:	f06f 031a 	mvn.w	r3, #26
    fe80:	e001      	b.n	fe86 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    fe82:	f06f 030c 	mvn.w	r3, #12
	}
}
    fe86:	4618      	mov	r0, r3
    fe88:	3710      	adds	r7, #16
    fe8a:	46bd      	mov	sp, r7
    fe8c:	bd80      	pop	{r7, pc}
    fe8e:	bf00      	nop
    fe90:	0000fc29 	.word	0x0000fc29
    fe94:	0000fd9d 	.word	0x0000fd9d

0000fe98 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fe98:	b590      	push	{r4, r7, lr}
    fe9a:	b087      	sub	sp, #28
    fe9c:	af00      	add	r7, sp, #0
    fe9e:	4603      	mov	r3, r0
    fea0:	6039      	str	r1, [r7, #0]
    fea2:	71fb      	strb	r3, [r7, #7]
    fea4:	4613      	mov	r3, r2
    fea6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    fea8:	683b      	ldr	r3, [r7, #0]
    feaa:	799a      	ldrb	r2, [r3, #6]
    feac:	79db      	ldrb	r3, [r3, #7]
    feae:	021b      	lsls	r3, r3, #8
    feb0:	4313      	orrs	r3, r2
    feb2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    feb4:	4b2b      	ldr	r3, [pc, #172]	; (ff64 <cdcdf_acm_set_req+0xcc>)
    feb6:	4798      	blx	r3
    feb8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    feba:	683b      	ldr	r3, [r7, #0]
    febc:	785b      	ldrb	r3, [r3, #1]
    febe:	2b20      	cmp	r3, #32
    fec0:	d002      	beq.n	fec8 <cdcdf_acm_set_req+0x30>
    fec2:	2b22      	cmp	r3, #34	; 0x22
    fec4:	d034      	beq.n	ff30 <cdcdf_acm_set_req+0x98>
    fec6:	e046      	b.n	ff56 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    fec8:	8afb      	ldrh	r3, [r7, #22]
    feca:	2b07      	cmp	r3, #7
    fecc:	d002      	beq.n	fed4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    fece:	f04f 33ff 	mov.w	r3, #4294967295
    fed2:	e042      	b.n	ff5a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    fed4:	79bb      	ldrb	r3, [r7, #6]
    fed6:	2b00      	cmp	r3, #0
    fed8:	d107      	bne.n	feea <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    feda:	8afa      	ldrh	r2, [r7, #22]
    fedc:	79f8      	ldrb	r0, [r7, #7]
    fede:	2300      	movs	r3, #0
    fee0:	6939      	ldr	r1, [r7, #16]
    fee2:	4c21      	ldr	r4, [pc, #132]	; (ff68 <cdcdf_acm_set_req+0xd0>)
    fee4:	47a0      	blx	r4
    fee6:	4603      	mov	r3, r0
    fee8:	e037      	b.n	ff5a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    feea:	693a      	ldr	r2, [r7, #16]
    feec:	f107 0308 	add.w	r3, r7, #8
    fef0:	6810      	ldr	r0, [r2, #0]
    fef2:	6018      	str	r0, [r3, #0]
    fef4:	8891      	ldrh	r1, [r2, #4]
    fef6:	7992      	ldrb	r2, [r2, #6]
    fef8:	8099      	strh	r1, [r3, #4]
    fefa:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    fefc:	4b1b      	ldr	r3, [pc, #108]	; (ff6c <cdcdf_acm_set_req+0xd4>)
    fefe:	681b      	ldr	r3, [r3, #0]
    ff00:	2b00      	cmp	r3, #0
    ff02:	d008      	beq.n	ff16 <cdcdf_acm_set_req+0x7e>
    ff04:	4b19      	ldr	r3, [pc, #100]	; (ff6c <cdcdf_acm_set_req+0xd4>)
    ff06:	681b      	ldr	r3, [r3, #0]
    ff08:	f107 0208 	add.w	r2, r7, #8
    ff0c:	4610      	mov	r0, r2
    ff0e:	4798      	blx	r3
    ff10:	4603      	mov	r3, r0
    ff12:	2b00      	cmp	r3, #0
    ff14:	d00a      	beq.n	ff2c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    ff16:	4b16      	ldr	r3, [pc, #88]	; (ff70 <cdcdf_acm_set_req+0xd8>)
    ff18:	f107 0208 	add.w	r2, r7, #8
    ff1c:	e892 0003 	ldmia.w	r2, {r0, r1}
    ff20:	6018      	str	r0, [r3, #0]
    ff22:	3304      	adds	r3, #4
    ff24:	8019      	strh	r1, [r3, #0]
    ff26:	3302      	adds	r3, #2
    ff28:	0c0a      	lsrs	r2, r1, #16
    ff2a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    ff2c:	2300      	movs	r3, #0
    ff2e:	e014      	b.n	ff5a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    ff30:	2300      	movs	r3, #0
    ff32:	2200      	movs	r2, #0
    ff34:	2100      	movs	r1, #0
    ff36:	2000      	movs	r0, #0
    ff38:	4c0b      	ldr	r4, [pc, #44]	; (ff68 <cdcdf_acm_set_req+0xd0>)
    ff3a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    ff3c:	4b0d      	ldr	r3, [pc, #52]	; (ff74 <cdcdf_acm_set_req+0xdc>)
    ff3e:	681b      	ldr	r3, [r3, #0]
    ff40:	2b00      	cmp	r3, #0
    ff42:	d006      	beq.n	ff52 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    ff44:	4b0b      	ldr	r3, [pc, #44]	; (ff74 <cdcdf_acm_set_req+0xdc>)
    ff46:	681b      	ldr	r3, [r3, #0]
    ff48:	683a      	ldr	r2, [r7, #0]
    ff4a:	8852      	ldrh	r2, [r2, #2]
    ff4c:	b292      	uxth	r2, r2
    ff4e:	4610      	mov	r0, r2
    ff50:	4798      	blx	r3
		}
		return ERR_NONE;
    ff52:	2300      	movs	r3, #0
    ff54:	e001      	b.n	ff5a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    ff56:	f06f 030c 	mvn.w	r3, #12
	}
}
    ff5a:	4618      	mov	r0, r3
    ff5c:	371c      	adds	r7, #28
    ff5e:	46bd      	mov	sp, r7
    ff60:	bd90      	pop	{r4, r7, pc}
    ff62:	bf00      	nop
    ff64:	00010da9 	.word	0x00010da9
    ff68:	00010c1d 	.word	0x00010c1d
    ff6c:	2000202c 	.word	0x2000202c
    ff70:	20002020 	.word	0x20002020
    ff74:	20002028 	.word	0x20002028

0000ff78 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ff78:	b590      	push	{r4, r7, lr}
    ff7a:	b085      	sub	sp, #20
    ff7c:	af00      	add	r7, sp, #0
    ff7e:	4603      	mov	r3, r0
    ff80:	6039      	str	r1, [r7, #0]
    ff82:	71fb      	strb	r3, [r7, #7]
    ff84:	4613      	mov	r3, r2
    ff86:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    ff88:	683b      	ldr	r3, [r7, #0]
    ff8a:	799a      	ldrb	r2, [r3, #6]
    ff8c:	79db      	ldrb	r3, [r3, #7]
    ff8e:	021b      	lsls	r3, r3, #8
    ff90:	4313      	orrs	r3, r2
    ff92:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    ff94:	79bb      	ldrb	r3, [r7, #6]
    ff96:	2b01      	cmp	r3, #1
    ff98:	d101      	bne.n	ff9e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ff9a:	2300      	movs	r3, #0
    ff9c:	e013      	b.n	ffc6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ff9e:	683b      	ldr	r3, [r7, #0]
    ffa0:	785b      	ldrb	r3, [r3, #1]
    ffa2:	2b21      	cmp	r3, #33	; 0x21
    ffa4:	d10d      	bne.n	ffc2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ffa6:	89fb      	ldrh	r3, [r7, #14]
    ffa8:	2b07      	cmp	r3, #7
    ffaa:	d002      	beq.n	ffb2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    ffac:	f04f 33ff 	mov.w	r3, #4294967295
    ffb0:	e009      	b.n	ffc6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    ffb2:	89fa      	ldrh	r2, [r7, #14]
    ffb4:	79f8      	ldrb	r0, [r7, #7]
    ffb6:	2300      	movs	r3, #0
    ffb8:	4905      	ldr	r1, [pc, #20]	; (ffd0 <cdcdf_acm_get_req+0x58>)
    ffba:	4c06      	ldr	r4, [pc, #24]	; (ffd4 <cdcdf_acm_get_req+0x5c>)
    ffbc:	47a0      	blx	r4
    ffbe:	4603      	mov	r3, r0
    ffc0:	e001      	b.n	ffc6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ffc2:	f06f 030c 	mvn.w	r3, #12
	}
}
    ffc6:	4618      	mov	r0, r3
    ffc8:	3714      	adds	r7, #20
    ffca:	46bd      	mov	sp, r7
    ffcc:	bd90      	pop	{r4, r7, pc}
    ffce:	bf00      	nop
    ffd0:	20002020 	.word	0x20002020
    ffd4:	00010c1d 	.word	0x00010c1d

0000ffd8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ffd8:	b580      	push	{r7, lr}
    ffda:	b082      	sub	sp, #8
    ffdc:	af00      	add	r7, sp, #0
    ffde:	4603      	mov	r3, r0
    ffe0:	6039      	str	r1, [r7, #0]
    ffe2:	71fb      	strb	r3, [r7, #7]
    ffe4:	4613      	mov	r3, r2
    ffe6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ffe8:	683b      	ldr	r3, [r7, #0]
    ffea:	781b      	ldrb	r3, [r3, #0]
    ffec:	095b      	lsrs	r3, r3, #5
    ffee:	b2db      	uxtb	r3, r3
    fff0:	f003 0303 	and.w	r3, r3, #3
    fff4:	2b01      	cmp	r3, #1
    fff6:	d002      	beq.n	fffe <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    fff8:	f06f 0309 	mvn.w	r3, #9
    fffc:	e026      	b.n	1004c <STACK_SIZE+0x4c>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    fffe:	683b      	ldr	r3, [r7, #0]
   10000:	889b      	ldrh	r3, [r3, #4]
   10002:	b29a      	uxth	r2, r3
   10004:	4b13      	ldr	r3, [pc, #76]	; (10054 <STACK_SIZE+0x54>)
   10006:	781b      	ldrb	r3, [r3, #0]
   10008:	b29b      	uxth	r3, r3
   1000a:	429a      	cmp	r2, r3
   1000c:	d007      	beq.n	1001e <STACK_SIZE+0x1e>
   1000e:	683b      	ldr	r3, [r7, #0]
   10010:	889b      	ldrh	r3, [r3, #4]
   10012:	b29a      	uxth	r2, r3
   10014:	4b0f      	ldr	r3, [pc, #60]	; (10054 <STACK_SIZE+0x54>)
   10016:	785b      	ldrb	r3, [r3, #1]
   10018:	b29b      	uxth	r3, r3
   1001a:	429a      	cmp	r2, r3
   1001c:	d114      	bne.n	10048 <STACK_SIZE+0x48>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   1001e:	683b      	ldr	r3, [r7, #0]
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	b25b      	sxtb	r3, r3
   10024:	2b00      	cmp	r3, #0
   10026:	da07      	bge.n	10038 <STACK_SIZE+0x38>
			return cdcdf_acm_get_req(ep, req, stage);
   10028:	79ba      	ldrb	r2, [r7, #6]
   1002a:	79fb      	ldrb	r3, [r7, #7]
   1002c:	6839      	ldr	r1, [r7, #0]
   1002e:	4618      	mov	r0, r3
   10030:	4b09      	ldr	r3, [pc, #36]	; (10058 <STACK_SIZE+0x58>)
   10032:	4798      	blx	r3
   10034:	4603      	mov	r3, r0
   10036:	e009      	b.n	1004c <STACK_SIZE+0x4c>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   10038:	79ba      	ldrb	r2, [r7, #6]
   1003a:	79fb      	ldrb	r3, [r7, #7]
   1003c:	6839      	ldr	r1, [r7, #0]
   1003e:	4618      	mov	r0, r3
   10040:	4b06      	ldr	r3, [pc, #24]	; (1005c <STACK_SIZE+0x5c>)
   10042:	4798      	blx	r3
   10044:	4603      	mov	r3, r0
   10046:	e001      	b.n	1004c <STACK_SIZE+0x4c>
		}
	} else {
		return ERR_NOT_FOUND;
   10048:	f06f 0309 	mvn.w	r3, #9
	}
}
   1004c:	4618      	mov	r0, r3
   1004e:	3708      	adds	r7, #8
   10050:	46bd      	mov	sp, r7
   10052:	bd80      	pop	{r7, pc}
   10054:	20002018 	.word	0x20002018
   10058:	0000ff79 	.word	0x0000ff79
   1005c:	0000fe99 	.word	0x0000fe99

00010060 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   10060:	b580      	push	{r7, lr}
   10062:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   10064:	4b0b      	ldr	r3, [pc, #44]	; (10094 <cdcdf_acm_init+0x34>)
   10066:	4798      	blx	r3
   10068:	4603      	mov	r3, r0
   1006a:	2b01      	cmp	r3, #1
   1006c:	d902      	bls.n	10074 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   1006e:	f06f 0310 	mvn.w	r3, #16
   10072:	e00d      	b.n	10090 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   10074:	4b08      	ldr	r3, [pc, #32]	; (10098 <cdcdf_acm_init+0x38>)
   10076:	4a09      	ldr	r2, [pc, #36]	; (1009c <cdcdf_acm_init+0x3c>)
   10078:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   1007a:	4b07      	ldr	r3, [pc, #28]	; (10098 <cdcdf_acm_init+0x38>)
   1007c:	4a08      	ldr	r2, [pc, #32]	; (100a0 <cdcdf_acm_init+0x40>)
   1007e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   10080:	4805      	ldr	r0, [pc, #20]	; (10098 <cdcdf_acm_init+0x38>)
   10082:	4b08      	ldr	r3, [pc, #32]	; (100a4 <cdcdf_acm_init+0x44>)
   10084:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   10086:	4908      	ldr	r1, [pc, #32]	; (100a8 <cdcdf_acm_init+0x48>)
   10088:	2001      	movs	r0, #1
   1008a:	4b08      	ldr	r3, [pc, #32]	; (100ac <cdcdf_acm_init+0x4c>)
   1008c:	4798      	blx	r3
	return ERR_NONE;
   1008e:	2300      	movs	r3, #0
}
   10090:	4618      	mov	r0, r3
   10092:	bd80      	pop	{r7, pc}
   10094:	00010dc1 	.word	0x00010dc1
   10098:	2000200c 	.word	0x2000200c
   1009c:	0000fe49 	.word	0x0000fe49
   100a0:	20002018 	.word	0x20002018
   100a4:	00010d29 	.word	0x00010d29
   100a8:	20000600 	.word	0x20000600
   100ac:	00010c59 	.word	0x00010c59

000100b0 <usb_get_u16>:
{
   100b0:	b480      	push	{r7}
   100b2:	b083      	sub	sp, #12
   100b4:	af00      	add	r7, sp, #0
   100b6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	b29a      	uxth	r2, r3
   100be:	687b      	ldr	r3, [r7, #4]
   100c0:	3301      	adds	r3, #1
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	b29b      	uxth	r3, r3
   100c6:	021b      	lsls	r3, r3, #8
   100c8:	b29b      	uxth	r3, r3
   100ca:	4413      	add	r3, r2
   100cc:	b29b      	uxth	r3, r3
}
   100ce:	4618      	mov	r0, r3
   100d0:	370c      	adds	r7, #12
   100d2:	46bd      	mov	sp, r7
   100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   100d8:	4770      	bx	lr

000100da <usb_desc_len>:
{
   100da:	b480      	push	{r7}
   100dc:	b083      	sub	sp, #12
   100de:	af00      	add	r7, sp, #0
   100e0:	6078      	str	r0, [r7, #4]
	return desc[0];
   100e2:	687b      	ldr	r3, [r7, #4]
   100e4:	781b      	ldrb	r3, [r3, #0]
}
   100e6:	4618      	mov	r0, r3
   100e8:	370c      	adds	r7, #12
   100ea:	46bd      	mov	sp, r7
   100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   100f0:	4770      	bx	lr
	...

000100f4 <usb_desc_next>:
{
   100f4:	b580      	push	{r7, lr}
   100f6:	b082      	sub	sp, #8
   100f8:	af00      	add	r7, sp, #0
   100fa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   100fc:	6878      	ldr	r0, [r7, #4]
   100fe:	4b05      	ldr	r3, [pc, #20]	; (10114 <usb_desc_next+0x20>)
   10100:	4798      	blx	r3
   10102:	4603      	mov	r3, r0
   10104:	461a      	mov	r2, r3
   10106:	687b      	ldr	r3, [r7, #4]
   10108:	4413      	add	r3, r2
}
   1010a:	4618      	mov	r0, r3
   1010c:	3708      	adds	r7, #8
   1010e:	46bd      	mov	sp, r7
   10110:	bd80      	pop	{r7, pc}
   10112:	bf00      	nop
   10114:	000100db 	.word	0x000100db

00010118 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   10118:	b580      	push	{r7, lr}
   1011a:	b082      	sub	sp, #8
   1011c:	af00      	add	r7, sp, #0
   1011e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10120:	687b      	ldr	r3, [r7, #4]
   10122:	3302      	adds	r3, #2
   10124:	4618      	mov	r0, r3
   10126:	4b03      	ldr	r3, [pc, #12]	; (10134 <usb_cfg_desc_total_len+0x1c>)
   10128:	4798      	blx	r3
   1012a:	4603      	mov	r3, r0
}
   1012c:	4618      	mov	r0, r3
   1012e:	3708      	adds	r7, #8
   10130:	46bd      	mov	sp, r7
   10132:	bd80      	pop	{r7, pc}
   10134:	000100b1 	.word	0x000100b1

00010138 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   10138:	b590      	push	{r4, r7, lr}
   1013a:	b085      	sub	sp, #20
   1013c:	af00      	add	r7, sp, #0
   1013e:	4603      	mov	r3, r0
   10140:	6039      	str	r1, [r7, #0]
   10142:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   10144:	2300      	movs	r3, #0
   10146:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   10148:	683b      	ldr	r3, [r7, #0]
   1014a:	799a      	ldrb	r2, [r3, #6]
   1014c:	79db      	ldrb	r3, [r3, #7]
   1014e:	021b      	lsls	r3, r3, #8
   10150:	4313      	orrs	r3, r2
   10152:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   10154:	897b      	ldrh	r3, [r7, #10]
   10156:	2b12      	cmp	r3, #18
   10158:	d901      	bls.n	1015e <usbdc_get_dev_desc+0x26>
		length = 0x12;
   1015a:	2312      	movs	r3, #18
   1015c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   1015e:	68fb      	ldr	r3, [r7, #12]
   10160:	2b00      	cmp	r3, #0
   10162:	d10a      	bne.n	1017a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   10164:	4b0f      	ldr	r3, [pc, #60]	; (101a4 <usbdc_get_dev_desc+0x6c>)
   10166:	681b      	ldr	r3, [r3, #0]
   10168:	6818      	ldr	r0, [r3, #0]
   1016a:	4b0e      	ldr	r3, [pc, #56]	; (101a4 <usbdc_get_dev_desc+0x6c>)
   1016c:	681b      	ldr	r3, [r3, #0]
   1016e:	685b      	ldr	r3, [r3, #4]
   10170:	2201      	movs	r2, #1
   10172:	4619      	mov	r1, r3
   10174:	4b0c      	ldr	r3, [pc, #48]	; (101a8 <usbdc_get_dev_desc+0x70>)
   10176:	4798      	blx	r3
   10178:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	2b00      	cmp	r3, #0
   1017e:	d101      	bne.n	10184 <usbdc_get_dev_desc+0x4c>
		return false;
   10180:	2300      	movs	r3, #0
   10182:	e00b      	b.n	1019c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   10184:	897a      	ldrh	r2, [r7, #10]
   10186:	79f8      	ldrb	r0, [r7, #7]
   10188:	2300      	movs	r3, #0
   1018a:	68f9      	ldr	r1, [r7, #12]
   1018c:	4c07      	ldr	r4, [pc, #28]	; (101ac <usbdc_get_dev_desc+0x74>)
   1018e:	47a0      	blx	r4
   10190:	4603      	mov	r3, r0
   10192:	2b00      	cmp	r3, #0
   10194:	d001      	beq.n	1019a <usbdc_get_dev_desc+0x62>
		return false;
   10196:	2300      	movs	r3, #0
   10198:	e000      	b.n	1019c <usbdc_get_dev_desc+0x64>
	}
	return true;
   1019a:	2301      	movs	r3, #1
}
   1019c:	4618      	mov	r0, r3
   1019e:	3714      	adds	r7, #20
   101a0:	46bd      	mov	sp, r7
   101a2:	bd90      	pop	{r4, r7, pc}
   101a4:	20002030 	.word	0x20002030
   101a8:	00010ead 	.word	0x00010ead
   101ac:	00010c1d 	.word	0x00010c1d

000101b0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   101b0:	b590      	push	{r4, r7, lr}
   101b2:	b087      	sub	sp, #28
   101b4:	af00      	add	r7, sp, #0
   101b6:	4603      	mov	r3, r0
   101b8:	6039      	str	r1, [r7, #0]
   101ba:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   101bc:	2300      	movs	r3, #0
   101be:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   101c0:	683b      	ldr	r3, [r7, #0]
   101c2:	799a      	ldrb	r2, [r3, #6]
   101c4:	79db      	ldrb	r3, [r3, #7]
   101c6:	021b      	lsls	r3, r3, #8
   101c8:	4313      	orrs	r3, r2
   101ca:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   101cc:	683b      	ldr	r3, [r7, #0]
   101ce:	885b      	ldrh	r3, [r3, #2]
   101d0:	b29b      	uxth	r3, r3
   101d2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   101d4:	8a7a      	ldrh	r2, [r7, #18]
   101d6:	4b1e      	ldr	r3, [pc, #120]	; (10250 <usbdc_get_cfg_desc+0xa0>)
   101d8:	7f1b      	ldrb	r3, [r3, #28]
   101da:	3b01      	subs	r3, #1
   101dc:	4013      	ands	r3, r2
   101de:	2b00      	cmp	r3, #0
   101e0:	bf0c      	ite	eq
   101e2:	2301      	moveq	r3, #1
   101e4:	2300      	movne	r3, #0
   101e6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   101e8:	697b      	ldr	r3, [r7, #20]
   101ea:	2b00      	cmp	r3, #0
   101ec:	d10c      	bne.n	10208 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   101ee:	4b18      	ldr	r3, [pc, #96]	; (10250 <usbdc_get_cfg_desc+0xa0>)
   101f0:	681b      	ldr	r3, [r3, #0]
   101f2:	6818      	ldr	r0, [r3, #0]
   101f4:	4b16      	ldr	r3, [pc, #88]	; (10250 <usbdc_get_cfg_desc+0xa0>)
   101f6:	681b      	ldr	r3, [r3, #0]
   101f8:	6859      	ldr	r1, [r3, #4]
   101fa:	7c3b      	ldrb	r3, [r7, #16]
   101fc:	3301      	adds	r3, #1
   101fe:	b2db      	uxtb	r3, r3
   10200:	461a      	mov	r2, r3
   10202:	4b14      	ldr	r3, [pc, #80]	; (10254 <usbdc_get_cfg_desc+0xa4>)
   10204:	4798      	blx	r3
   10206:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   10208:	697b      	ldr	r3, [r7, #20]
   1020a:	2b00      	cmp	r3, #0
   1020c:	d101      	bne.n	10212 <usbdc_get_cfg_desc+0x62>
		return false;
   1020e:	2300      	movs	r3, #0
   10210:	e019      	b.n	10246 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   10212:	6978      	ldr	r0, [r7, #20]
   10214:	4b10      	ldr	r3, [pc, #64]	; (10258 <usbdc_get_cfg_desc+0xa8>)
   10216:	4798      	blx	r3
   10218:	4603      	mov	r3, r0
   1021a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   1021c:	8a7a      	ldrh	r2, [r7, #18]
   1021e:	89fb      	ldrh	r3, [r7, #14]
   10220:	429a      	cmp	r2, r3
   10222:	d802      	bhi.n	1022a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   10224:	2300      	movs	r3, #0
   10226:	747b      	strb	r3, [r7, #17]
   10228:	e001      	b.n	1022e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   1022a:	89fb      	ldrh	r3, [r7, #14]
   1022c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   1022e:	8a7a      	ldrh	r2, [r7, #18]
   10230:	7c7b      	ldrb	r3, [r7, #17]
   10232:	79f8      	ldrb	r0, [r7, #7]
   10234:	6979      	ldr	r1, [r7, #20]
   10236:	4c09      	ldr	r4, [pc, #36]	; (1025c <usbdc_get_cfg_desc+0xac>)
   10238:	47a0      	blx	r4
   1023a:	4603      	mov	r3, r0
   1023c:	2b00      	cmp	r3, #0
   1023e:	d001      	beq.n	10244 <usbdc_get_cfg_desc+0x94>
		return false;
   10240:	2300      	movs	r3, #0
   10242:	e000      	b.n	10246 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   10244:	2301      	movs	r3, #1
}
   10246:	4618      	mov	r0, r3
   10248:	371c      	adds	r7, #28
   1024a:	46bd      	mov	sp, r7
   1024c:	bd90      	pop	{r4, r7, pc}
   1024e:	bf00      	nop
   10250:	20002030 	.word	0x20002030
   10254:	00010f6d 	.word	0x00010f6d
   10258:	00010119 	.word	0x00010119
   1025c:	00010c1d 	.word	0x00010c1d

00010260 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   10260:	b590      	push	{r4, r7, lr}
   10262:	b085      	sub	sp, #20
   10264:	af00      	add	r7, sp, #0
   10266:	4603      	mov	r3, r0
   10268:	6039      	str	r1, [r7, #0]
   1026a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   1026c:	683b      	ldr	r3, [r7, #0]
   1026e:	799a      	ldrb	r2, [r3, #6]
   10270:	79db      	ldrb	r3, [r3, #7]
   10272:	021b      	lsls	r3, r3, #8
   10274:	4313      	orrs	r3, r2
   10276:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   10278:	683b      	ldr	r3, [r7, #0]
   1027a:	885b      	ldrh	r3, [r3, #2]
   1027c:	b29b      	uxth	r3, r3
   1027e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   10280:	89fa      	ldrh	r2, [r7, #14]
   10282:	4b1a      	ldr	r3, [pc, #104]	; (102ec <usbdc_get_str_desc+0x8c>)
   10284:	7f1b      	ldrb	r3, [r3, #28]
   10286:	3b01      	subs	r3, #1
   10288:	4013      	ands	r3, r2
   1028a:	2b00      	cmp	r3, #0
   1028c:	bf0c      	ite	eq
   1028e:	2301      	moveq	r3, #1
   10290:	2300      	movne	r3, #0
   10292:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   10294:	4b15      	ldr	r3, [pc, #84]	; (102ec <usbdc_get_str_desc+0x8c>)
   10296:	681b      	ldr	r3, [r3, #0]
   10298:	6818      	ldr	r0, [r3, #0]
   1029a:	4b14      	ldr	r3, [pc, #80]	; (102ec <usbdc_get_str_desc+0x8c>)
   1029c:	681b      	ldr	r3, [r3, #0]
   1029e:	685b      	ldr	r3, [r3, #4]
   102a0:	7b3a      	ldrb	r2, [r7, #12]
   102a2:	4619      	mov	r1, r3
   102a4:	4b12      	ldr	r3, [pc, #72]	; (102f0 <usbdc_get_str_desc+0x90>)
   102a6:	4798      	blx	r3
   102a8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   102aa:	68bb      	ldr	r3, [r7, #8]
   102ac:	2b00      	cmp	r3, #0
   102ae:	d101      	bne.n	102b4 <usbdc_get_str_desc+0x54>
		return false;
   102b0:	2300      	movs	r3, #0
   102b2:	e017      	b.n	102e4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   102b4:	68bb      	ldr	r3, [r7, #8]
   102b6:	781b      	ldrb	r3, [r3, #0]
   102b8:	b29b      	uxth	r3, r3
   102ba:	89fa      	ldrh	r2, [r7, #14]
   102bc:	429a      	cmp	r2, r3
   102be:	d802      	bhi.n	102c6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   102c0:	2300      	movs	r3, #0
   102c2:	737b      	strb	r3, [r7, #13]
   102c4:	e002      	b.n	102cc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   102c6:	68bb      	ldr	r3, [r7, #8]
   102c8:	781b      	ldrb	r3, [r3, #0]
   102ca:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   102cc:	89fa      	ldrh	r2, [r7, #14]
   102ce:	7b7b      	ldrb	r3, [r7, #13]
   102d0:	79f8      	ldrb	r0, [r7, #7]
   102d2:	68b9      	ldr	r1, [r7, #8]
   102d4:	4c07      	ldr	r4, [pc, #28]	; (102f4 <usbdc_get_str_desc+0x94>)
   102d6:	47a0      	blx	r4
   102d8:	4603      	mov	r3, r0
   102da:	2b00      	cmp	r3, #0
   102dc:	d001      	beq.n	102e2 <usbdc_get_str_desc+0x82>
		return false;
   102de:	2300      	movs	r3, #0
   102e0:	e000      	b.n	102e4 <usbdc_get_str_desc+0x84>
	}
	return true;
   102e2:	2301      	movs	r3, #1
}
   102e4:	4618      	mov	r0, r3
   102e6:	3714      	adds	r7, #20
   102e8:	46bd      	mov	sp, r7
   102ea:	bd90      	pop	{r4, r7, pc}
   102ec:	20002030 	.word	0x20002030
   102f0:	00010fe5 	.word	0x00010fe5
   102f4:	00010c1d 	.word	0x00010c1d

000102f8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   102f8:	b580      	push	{r7, lr}
   102fa:	b084      	sub	sp, #16
   102fc:	af00      	add	r7, sp, #0
   102fe:	4603      	mov	r3, r0
   10300:	6039      	str	r1, [r7, #0]
   10302:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   10304:	683b      	ldr	r3, [r7, #0]
   10306:	885b      	ldrh	r3, [r3, #2]
   10308:	b29b      	uxth	r3, r3
   1030a:	0a1b      	lsrs	r3, r3, #8
   1030c:	b29b      	uxth	r3, r3
   1030e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   10310:	7bfb      	ldrb	r3, [r7, #15]
   10312:	2b02      	cmp	r3, #2
   10314:	d00d      	beq.n	10332 <usbdc_get_desc_req+0x3a>
   10316:	2b03      	cmp	r3, #3
   10318:	d012      	beq.n	10340 <usbdc_get_desc_req+0x48>
   1031a:	2b01      	cmp	r3, #1
   1031c:	d002      	beq.n	10324 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   1031e:	bf00      	nop
	}
	return false;
   10320:	2300      	movs	r3, #0
   10322:	e013      	b.n	1034c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   10324:	79fb      	ldrb	r3, [r7, #7]
   10326:	6839      	ldr	r1, [r7, #0]
   10328:	4618      	mov	r0, r3
   1032a:	4b0a      	ldr	r3, [pc, #40]	; (10354 <usbdc_get_desc_req+0x5c>)
   1032c:	4798      	blx	r3
   1032e:	4603      	mov	r3, r0
   10330:	e00c      	b.n	1034c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   10332:	79fb      	ldrb	r3, [r7, #7]
   10334:	6839      	ldr	r1, [r7, #0]
   10336:	4618      	mov	r0, r3
   10338:	4b07      	ldr	r3, [pc, #28]	; (10358 <usbdc_get_desc_req+0x60>)
   1033a:	4798      	blx	r3
   1033c:	4603      	mov	r3, r0
   1033e:	e005      	b.n	1034c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   10340:	79fb      	ldrb	r3, [r7, #7]
   10342:	6839      	ldr	r1, [r7, #0]
   10344:	4618      	mov	r0, r3
   10346:	4b05      	ldr	r3, [pc, #20]	; (1035c <usbdc_get_desc_req+0x64>)
   10348:	4798      	blx	r3
   1034a:	4603      	mov	r3, r0
}
   1034c:	4618      	mov	r0, r3
   1034e:	3710      	adds	r7, #16
   10350:	46bd      	mov	sp, r7
   10352:	bd80      	pop	{r7, pc}
   10354:	00010139 	.word	0x00010139
   10358:	000101b1 	.word	0x000101b1
   1035c:	00010261 	.word	0x00010261

00010360 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   10360:	b590      	push	{r4, r7, lr}
   10362:	b085      	sub	sp, #20
   10364:	af00      	add	r7, sp, #0
   10366:	4603      	mov	r3, r0
   10368:	6039      	str	r1, [r7, #0]
   1036a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1036c:	683b      	ldr	r3, [r7, #0]
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	f003 031f 	and.w	r3, r3, #31
   10374:	2b00      	cmp	r3, #0
   10376:	db1b      	blt.n	103b0 <usbdc_get_status_req+0x50>
   10378:	2b01      	cmp	r3, #1
   1037a:	dd02      	ble.n	10382 <usbdc_get_status_req+0x22>
   1037c:	2b02      	cmp	r3, #2
   1037e:	d003      	beq.n	10388 <usbdc_get_status_req+0x28>
   10380:	e016      	b.n	103b0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   10382:	2300      	movs	r3, #0
   10384:	60fb      	str	r3, [r7, #12]
		break;
   10386:	e015      	b.n	103b4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   10388:	683b      	ldr	r3, [r7, #0]
   1038a:	889b      	ldrh	r3, [r3, #4]
   1038c:	b29b      	uxth	r3, r3
   1038e:	b2db      	uxtb	r3, r3
   10390:	2102      	movs	r1, #2
   10392:	4618      	mov	r0, r3
   10394:	4b0f      	ldr	r3, [pc, #60]	; (103d4 <usbdc_get_status_req+0x74>)
   10396:	4798      	blx	r3
   10398:	4603      	mov	r3, r0
   1039a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   1039c:	68fb      	ldr	r3, [r7, #12]
   1039e:	2b00      	cmp	r3, #0
   103a0:	da01      	bge.n	103a6 <usbdc_get_status_req+0x46>
			return false;
   103a2:	2300      	movs	r3, #0
   103a4:	e012      	b.n	103cc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   103a6:	68fb      	ldr	r3, [r7, #12]
   103a8:	f003 0301 	and.w	r3, r3, #1
   103ac:	60fb      	str	r3, [r7, #12]
		break;
   103ae:	e001      	b.n	103b4 <usbdc_get_status_req+0x54>
	default:
		return false;
   103b0:	2300      	movs	r3, #0
   103b2:	e00b      	b.n	103cc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   103b4:	4b08      	ldr	r3, [pc, #32]	; (103d8 <usbdc_get_status_req+0x78>)
   103b6:	695b      	ldr	r3, [r3, #20]
   103b8:	89ba      	ldrh	r2, [r7, #12]
   103ba:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   103bc:	4b06      	ldr	r3, [pc, #24]	; (103d8 <usbdc_get_status_req+0x78>)
   103be:	6959      	ldr	r1, [r3, #20]
   103c0:	79f8      	ldrb	r0, [r7, #7]
   103c2:	2300      	movs	r3, #0
   103c4:	2202      	movs	r2, #2
   103c6:	4c05      	ldr	r4, [pc, #20]	; (103dc <usbdc_get_status_req+0x7c>)
   103c8:	47a0      	blx	r4
	return true;
   103ca:	2301      	movs	r3, #1
}
   103cc:	4618      	mov	r0, r3
   103ce:	3714      	adds	r7, #20
   103d0:	46bd      	mov	sp, r7
   103d2:	bd90      	pop	{r4, r7, pc}
   103d4:	00007191 	.word	0x00007191
   103d8:	20002030 	.word	0x20002030
   103dc:	00010c1d 	.word	0x00010c1d

000103e0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   103e0:	b590      	push	{r4, r7, lr}
   103e2:	b085      	sub	sp, #20
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   103e8:	4b1f      	ldr	r3, [pc, #124]	; (10468 <usbdc_get_interface+0x88>)
   103ea:	691b      	ldr	r3, [r3, #16]
   103ec:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   103ee:	4b1e      	ldr	r3, [pc, #120]	; (10468 <usbdc_get_interface+0x88>)
   103f0:	7f5b      	ldrb	r3, [r3, #29]
   103f2:	461a      	mov	r2, r3
   103f4:	687b      	ldr	r3, [r7, #4]
   103f6:	889b      	ldrh	r3, [r3, #4]
   103f8:	b29b      	uxth	r3, r3
   103fa:	fa42 f303 	asr.w	r3, r2, r3
   103fe:	f003 0301 	and.w	r3, r3, #1
   10402:	2b00      	cmp	r3, #0
   10404:	d128      	bne.n	10458 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   10406:	4b18      	ldr	r3, [pc, #96]	; (10468 <usbdc_get_interface+0x88>)
   10408:	695b      	ldr	r3, [r3, #20]
   1040a:	2200      	movs	r2, #0
   1040c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1040e:	4b16      	ldr	r3, [pc, #88]	; (10468 <usbdc_get_interface+0x88>)
   10410:	6959      	ldr	r1, [r3, #20]
   10412:	2300      	movs	r3, #0
   10414:	2201      	movs	r2, #1
   10416:	2000      	movs	r0, #0
   10418:	4c14      	ldr	r4, [pc, #80]	; (1046c <usbdc_get_interface+0x8c>)
   1041a:	47a0      	blx	r4
		return true;
   1041c:	2301      	movs	r3, #1
   1041e:	e01f      	b.n	10460 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   10420:	68fb      	ldr	r3, [r7, #12]
   10422:	685b      	ldr	r3, [r3, #4]
   10424:	687a      	ldr	r2, [r7, #4]
   10426:	2102      	movs	r1, #2
   10428:	68f8      	ldr	r0, [r7, #12]
   1042a:	4798      	blx	r3
   1042c:	60b8      	str	r0, [r7, #8]
   1042e:	68bb      	ldr	r3, [r7, #8]
   10430:	2b00      	cmp	r3, #0
   10432:	da03      	bge.n	1043c <usbdc_get_interface+0x5c>
			func = func->next;
   10434:	68fb      	ldr	r3, [r7, #12]
   10436:	681b      	ldr	r3, [r3, #0]
   10438:	60fb      	str	r3, [r7, #12]
   1043a:	e00d      	b.n	10458 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   1043c:	4b0a      	ldr	r3, [pc, #40]	; (10468 <usbdc_get_interface+0x88>)
   1043e:	695b      	ldr	r3, [r3, #20]
   10440:	68ba      	ldr	r2, [r7, #8]
   10442:	b2d2      	uxtb	r2, r2
   10444:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   10446:	4b08      	ldr	r3, [pc, #32]	; (10468 <usbdc_get_interface+0x88>)
   10448:	6959      	ldr	r1, [r3, #20]
   1044a:	2300      	movs	r3, #0
   1044c:	2201      	movs	r2, #1
   1044e:	2000      	movs	r0, #0
   10450:	4c06      	ldr	r4, [pc, #24]	; (1046c <usbdc_get_interface+0x8c>)
   10452:	47a0      	blx	r4
			return true;
   10454:	2301      	movs	r3, #1
   10456:	e003      	b.n	10460 <usbdc_get_interface+0x80>
	while (NULL != func) {
   10458:	68fb      	ldr	r3, [r7, #12]
   1045a:	2b00      	cmp	r3, #0
   1045c:	d1e0      	bne.n	10420 <usbdc_get_interface+0x40>
		}
	}
	return false;
   1045e:	2300      	movs	r3, #0
}
   10460:	4618      	mov	r0, r3
   10462:	3714      	adds	r7, #20
   10464:	46bd      	mov	sp, r7
   10466:	bd90      	pop	{r4, r7, pc}
   10468:	20002030 	.word	0x20002030
   1046c:	00010c1d 	.word	0x00010c1d

00010470 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   10470:	b590      	push	{r4, r7, lr}
   10472:	b083      	sub	sp, #12
   10474:	af00      	add	r7, sp, #0
   10476:	4603      	mov	r3, r0
   10478:	6039      	str	r1, [r7, #0]
   1047a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   1047c:	683b      	ldr	r3, [r7, #0]
   1047e:	785b      	ldrb	r3, [r3, #1]
   10480:	2b0a      	cmp	r3, #10
   10482:	d83a      	bhi.n	104fa <usbdc_get_req+0x8a>
   10484:	a201      	add	r2, pc, #4	; (adr r2, 1048c <usbdc_get_req+0x1c>)
   10486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1048a:	bf00      	nop
   1048c:	000104e3 	.word	0x000104e3
   10490:	000104fb 	.word	0x000104fb
   10494:	000104fb 	.word	0x000104fb
   10498:	000104fb 	.word	0x000104fb
   1049c:	000104fb 	.word	0x000104fb
   104a0:	000104fb 	.word	0x000104fb
   104a4:	000104b9 	.word	0x000104b9
   104a8:	000104fb 	.word	0x000104fb
   104ac:	000104c7 	.word	0x000104c7
   104b0:	000104fb 	.word	0x000104fb
   104b4:	000104f1 	.word	0x000104f1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   104b8:	79fb      	ldrb	r3, [r7, #7]
   104ba:	6839      	ldr	r1, [r7, #0]
   104bc:	4618      	mov	r0, r3
   104be:	4b11      	ldr	r3, [pc, #68]	; (10504 <usbdc_get_req+0x94>)
   104c0:	4798      	blx	r3
   104c2:	4603      	mov	r3, r0
   104c4:	e01a      	b.n	104fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   104c6:	4b10      	ldr	r3, [pc, #64]	; (10508 <usbdc_get_req+0x98>)
   104c8:	695b      	ldr	r3, [r3, #20]
   104ca:	4a0f      	ldr	r2, [pc, #60]	; (10508 <usbdc_get_req+0x98>)
   104cc:	7ed2      	ldrb	r2, [r2, #27]
   104ce:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   104d0:	4b0d      	ldr	r3, [pc, #52]	; (10508 <usbdc_get_req+0x98>)
   104d2:	6959      	ldr	r1, [r3, #20]
   104d4:	79f8      	ldrb	r0, [r7, #7]
   104d6:	2300      	movs	r3, #0
   104d8:	2201      	movs	r2, #1
   104da:	4c0c      	ldr	r4, [pc, #48]	; (1050c <usbdc_get_req+0x9c>)
   104dc:	47a0      	blx	r4
		return true;
   104de:	2301      	movs	r3, #1
   104e0:	e00c      	b.n	104fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   104e2:	79fb      	ldrb	r3, [r7, #7]
   104e4:	6839      	ldr	r1, [r7, #0]
   104e6:	4618      	mov	r0, r3
   104e8:	4b09      	ldr	r3, [pc, #36]	; (10510 <usbdc_get_req+0xa0>)
   104ea:	4798      	blx	r3
   104ec:	4603      	mov	r3, r0
   104ee:	e005      	b.n	104fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   104f0:	6838      	ldr	r0, [r7, #0]
   104f2:	4b08      	ldr	r3, [pc, #32]	; (10514 <usbdc_get_req+0xa4>)
   104f4:	4798      	blx	r3
   104f6:	4603      	mov	r3, r0
   104f8:	e000      	b.n	104fc <usbdc_get_req+0x8c>
	default:
		return false;
   104fa:	2300      	movs	r3, #0
	}
}
   104fc:	4618      	mov	r0, r3
   104fe:	370c      	adds	r7, #12
   10500:	46bd      	mov	sp, r7
   10502:	bd90      	pop	{r4, r7, pc}
   10504:	000102f9 	.word	0x000102f9
   10508:	20002030 	.word	0x20002030
   1050c:	00010c1d 	.word	0x00010c1d
   10510:	00010361 	.word	0x00010361
   10514:	000103e1 	.word	0x000103e1

00010518 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   10518:	b590      	push	{r4, r7, lr}
   1051a:	b083      	sub	sp, #12
   1051c:	af00      	add	r7, sp, #0
   1051e:	4603      	mov	r3, r0
   10520:	6039      	str	r1, [r7, #0]
   10522:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   10524:	683b      	ldr	r3, [r7, #0]
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	f003 031f 	and.w	r3, r3, #31
   1052c:	2b02      	cmp	r3, #2
   1052e:	d116      	bne.n	1055e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   10530:	683b      	ldr	r3, [r7, #0]
   10532:	88db      	ldrh	r3, [r3, #6]
   10534:	b29b      	uxth	r3, r3
   10536:	2b00      	cmp	r3, #0
   10538:	d001      	beq.n	1053e <usbdc_clear_ftr_req+0x26>
			return false;
   1053a:	2300      	movs	r3, #0
   1053c:	e010      	b.n	10560 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   1053e:	683b      	ldr	r3, [r7, #0]
   10540:	889b      	ldrh	r3, [r3, #4]
   10542:	b29b      	uxth	r3, r3
   10544:	b2db      	uxtb	r3, r3
   10546:	2100      	movs	r1, #0
   10548:	4618      	mov	r0, r3
   1054a:	4b07      	ldr	r3, [pc, #28]	; (10568 <usbdc_clear_ftr_req+0x50>)
   1054c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1054e:	79f8      	ldrb	r0, [r7, #7]
   10550:	2301      	movs	r3, #1
   10552:	2200      	movs	r2, #0
   10554:	2100      	movs	r1, #0
   10556:	4c05      	ldr	r4, [pc, #20]	; (1056c <usbdc_clear_ftr_req+0x54>)
   10558:	47a0      	blx	r4
		return true;
   1055a:	2301      	movs	r3, #1
   1055c:	e000      	b.n	10560 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   1055e:	2300      	movs	r3, #0
	}
}
   10560:	4618      	mov	r0, r3
   10562:	370c      	adds	r7, #12
   10564:	46bd      	mov	sp, r7
   10566:	bd90      	pop	{r4, r7, pc}
   10568:	00007191 	.word	0x00007191
   1056c:	00010c1d 	.word	0x00010c1d

00010570 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   10570:	b590      	push	{r4, r7, lr}
   10572:	b083      	sub	sp, #12
   10574:	af00      	add	r7, sp, #0
   10576:	4603      	mov	r3, r0
   10578:	6039      	str	r1, [r7, #0]
   1057a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1057c:	683b      	ldr	r3, [r7, #0]
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	f003 031f 	and.w	r3, r3, #31
   10584:	2b02      	cmp	r3, #2
   10586:	d116      	bne.n	105b6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   10588:	683b      	ldr	r3, [r7, #0]
   1058a:	88db      	ldrh	r3, [r3, #6]
   1058c:	b29b      	uxth	r3, r3
   1058e:	2b00      	cmp	r3, #0
   10590:	d001      	beq.n	10596 <usbdc_set_ftr_req+0x26>
			return false;
   10592:	2300      	movs	r3, #0
   10594:	e010      	b.n	105b8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   10596:	683b      	ldr	r3, [r7, #0]
   10598:	889b      	ldrh	r3, [r3, #4]
   1059a:	b29b      	uxth	r3, r3
   1059c:	b2db      	uxtb	r3, r3
   1059e:	2101      	movs	r1, #1
   105a0:	4618      	mov	r0, r3
   105a2:	4b07      	ldr	r3, [pc, #28]	; (105c0 <usbdc_set_ftr_req+0x50>)
   105a4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   105a6:	79f8      	ldrb	r0, [r7, #7]
   105a8:	2301      	movs	r3, #1
   105aa:	2200      	movs	r2, #0
   105ac:	2100      	movs	r1, #0
   105ae:	4c05      	ldr	r4, [pc, #20]	; (105c4 <usbdc_set_ftr_req+0x54>)
   105b0:	47a0      	blx	r4
		return true;
   105b2:	2301      	movs	r3, #1
   105b4:	e000      	b.n	105b8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   105b6:	2300      	movs	r3, #0
	}
}
   105b8:	4618      	mov	r0, r3
   105ba:	370c      	adds	r7, #12
   105bc:	46bd      	mov	sp, r7
   105be:	bd90      	pop	{r4, r7, pc}
   105c0:	00007191 	.word	0x00007191
   105c4:	00010c1d 	.word	0x00010c1d

000105c8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   105c8:	b580      	push	{r7, lr}
   105ca:	b082      	sub	sp, #8
   105cc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   105ce:	4b0a      	ldr	r3, [pc, #40]	; (105f8 <usbdc_unconfig+0x30>)
   105d0:	691b      	ldr	r3, [r3, #16]
   105d2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   105d4:	e008      	b.n	105e8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	685b      	ldr	r3, [r3, #4]
   105da:	2200      	movs	r2, #0
   105dc:	2101      	movs	r1, #1
   105de:	6878      	ldr	r0, [r7, #4]
   105e0:	4798      	blx	r3
		func = func->next;
   105e2:	687b      	ldr	r3, [r7, #4]
   105e4:	681b      	ldr	r3, [r3, #0]
   105e6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   105e8:	687b      	ldr	r3, [r7, #4]
   105ea:	2b00      	cmp	r3, #0
   105ec:	d1f3      	bne.n	105d6 <usbdc_unconfig+0xe>
	}
}
   105ee:	bf00      	nop
   105f0:	3708      	adds	r7, #8
   105f2:	46bd      	mov	sp, r7
   105f4:	bd80      	pop	{r7, pc}
   105f6:	bf00      	nop
   105f8:	20002030 	.word	0x20002030

000105fc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   105fc:	b580      	push	{r7, lr}
   105fe:	b088      	sub	sp, #32
   10600:	af00      	add	r7, sp, #0
   10602:	4603      	mov	r3, r0
   10604:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   10606:	2300      	movs	r3, #0
   10608:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   1060a:	23ff      	movs	r3, #255	; 0xff
   1060c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   1060e:	79fb      	ldrb	r3, [r7, #7]
   10610:	2b00      	cmp	r3, #0
   10612:	d103      	bne.n	1061c <usbdc_set_config+0x20>
		usbdc_unconfig();
   10614:	4b2e      	ldr	r3, [pc, #184]	; (106d0 <usbdc_set_config+0xd4>)
   10616:	4798      	blx	r3
		return true;
   10618:	2301      	movs	r3, #1
   1061a:	e055      	b.n	106c8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   1061c:	69bb      	ldr	r3, [r7, #24]
   1061e:	2b00      	cmp	r3, #0
   10620:	d10a      	bne.n	10638 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   10622:	4b2c      	ldr	r3, [pc, #176]	; (106d4 <usbdc_set_config+0xd8>)
   10624:	681b      	ldr	r3, [r3, #0]
   10626:	6818      	ldr	r0, [r3, #0]
   10628:	4b2a      	ldr	r3, [pc, #168]	; (106d4 <usbdc_set_config+0xd8>)
   1062a:	681b      	ldr	r3, [r3, #0]
   1062c:	685b      	ldr	r3, [r3, #4]
   1062e:	79fa      	ldrb	r2, [r7, #7]
   10630:	4619      	mov	r1, r3
   10632:	4b29      	ldr	r3, [pc, #164]	; (106d8 <usbdc_set_config+0xdc>)
   10634:	4798      	blx	r3
   10636:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   10638:	69bb      	ldr	r3, [r7, #24]
   1063a:	2b00      	cmp	r3, #0
   1063c:	d101      	bne.n	10642 <usbdc_set_config+0x46>
		return false;
   1063e:	2300      	movs	r3, #0
   10640:	e042      	b.n	106c8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   10642:	69b8      	ldr	r0, [r7, #24]
   10644:	4b25      	ldr	r3, [pc, #148]	; (106dc <usbdc_set_config+0xe0>)
   10646:	4798      	blx	r3
   10648:	4603      	mov	r3, r0
   1064a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   1064c:	8abb      	ldrh	r3, [r7, #20]
   1064e:	69ba      	ldr	r2, [r7, #24]
   10650:	4413      	add	r3, r2
   10652:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   10654:	693b      	ldr	r3, [r7, #16]
   10656:	2204      	movs	r2, #4
   10658:	4619      	mov	r1, r3
   1065a:	69b8      	ldr	r0, [r7, #24]
   1065c:	4b20      	ldr	r3, [pc, #128]	; (106e0 <usbdc_set_config+0xe4>)
   1065e:	4798      	blx	r3
   10660:	4603      	mov	r3, r0
   10662:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   10664:	e02c      	b.n	106c0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   10666:	68fb      	ldr	r3, [r7, #12]
   10668:	3302      	adds	r3, #2
   1066a:	781b      	ldrb	r3, [r3, #0]
   1066c:	7dfa      	ldrb	r2, [r7, #23]
   1066e:	429a      	cmp	r2, r3
   10670:	d018      	beq.n	106a4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   10672:	68fb      	ldr	r3, [r7, #12]
   10674:	789b      	ldrb	r3, [r3, #2]
   10676:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   10678:	4b16      	ldr	r3, [pc, #88]	; (106d4 <usbdc_set_config+0xd8>)
   1067a:	691b      	ldr	r3, [r3, #16]
   1067c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1067e:	e00c      	b.n	1069a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   10680:	69fb      	ldr	r3, [r7, #28]
   10682:	685b      	ldr	r3, [r3, #4]
   10684:	f107 020c 	add.w	r2, r7, #12
   10688:	2100      	movs	r1, #0
   1068a:	69f8      	ldr	r0, [r7, #28]
   1068c:	4798      	blx	r3
   1068e:	4603      	mov	r3, r0
   10690:	2b00      	cmp	r3, #0
   10692:	d006      	beq.n	106a2 <usbdc_set_config+0xa6>
					func = func->next;
   10694:	69fb      	ldr	r3, [r7, #28]
   10696:	681b      	ldr	r3, [r3, #0]
   10698:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1069a:	69fb      	ldr	r3, [r7, #28]
   1069c:	2b00      	cmp	r3, #0
   1069e:	d1ef      	bne.n	10680 <usbdc_set_config+0x84>
   106a0:	e000      	b.n	106a4 <usbdc_set_config+0xa8>
				} else {
					break;
   106a2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   106a4:	68fb      	ldr	r3, [r7, #12]
   106a6:	4618      	mov	r0, r3
   106a8:	4b0e      	ldr	r3, [pc, #56]	; (106e4 <usbdc_set_config+0xe8>)
   106aa:	4798      	blx	r3
   106ac:	4603      	mov	r3, r0
   106ae:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   106b0:	68fb      	ldr	r3, [r7, #12]
   106b2:	6939      	ldr	r1, [r7, #16]
   106b4:	2204      	movs	r2, #4
   106b6:	4618      	mov	r0, r3
   106b8:	4b09      	ldr	r3, [pc, #36]	; (106e0 <usbdc_set_config+0xe4>)
   106ba:	4798      	blx	r3
   106bc:	4603      	mov	r3, r0
   106be:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   106c0:	68fb      	ldr	r3, [r7, #12]
   106c2:	2b00      	cmp	r3, #0
   106c4:	d1cf      	bne.n	10666 <usbdc_set_config+0x6a>
	}
	return true;
   106c6:	2301      	movs	r3, #1
}
   106c8:	4618      	mov	r0, r3
   106ca:	3720      	adds	r7, #32
   106cc:	46bd      	mov	sp, r7
   106ce:	bd80      	pop	{r7, pc}
   106d0:	000105c9 	.word	0x000105c9
   106d4:	20002030 	.word	0x20002030
   106d8:	00010f6d 	.word	0x00010f6d
   106dc:	00010119 	.word	0x00010119
   106e0:	00010ead 	.word	0x00010ead
   106e4:	000100f5 	.word	0x000100f5

000106e8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   106e8:	b580      	push	{r7, lr}
   106ea:	b082      	sub	sp, #8
   106ec:	af00      	add	r7, sp, #0
   106ee:	4603      	mov	r3, r0
   106f0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   106f2:	79fb      	ldrb	r3, [r7, #7]
   106f4:	4618      	mov	r0, r3
   106f6:	4b03      	ldr	r3, [pc, #12]	; (10704 <usbdc_set_address+0x1c>)
   106f8:	4798      	blx	r3
}
   106fa:	bf00      	nop
   106fc:	3708      	adds	r7, #8
   106fe:	46bd      	mov	sp, r7
   10700:	bd80      	pop	{r7, pc}
   10702:	bf00      	nop
   10704:	00006e01 	.word	0x00006e01

00010708 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   10708:	b590      	push	{r4, r7, lr}
   1070a:	b087      	sub	sp, #28
   1070c:	af00      	add	r7, sp, #0
   1070e:	4603      	mov	r3, r0
   10710:	460a      	mov	r2, r1
   10712:	80fb      	strh	r3, [r7, #6]
   10714:	4613      	mov	r3, r2
   10716:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   10718:	2300      	movs	r3, #0
   1071a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   1071c:	693b      	ldr	r3, [r7, #16]
   1071e:	2b00      	cmp	r3, #0
   10720:	d10b      	bne.n	1073a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   10722:	4b43      	ldr	r3, [pc, #268]	; (10830 <usbdc_set_interface+0x128>)
   10724:	681b      	ldr	r3, [r3, #0]
   10726:	6818      	ldr	r0, [r3, #0]
   10728:	4b41      	ldr	r3, [pc, #260]	; (10830 <usbdc_set_interface+0x128>)
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	6859      	ldr	r1, [r3, #4]
   1072e:	4b40      	ldr	r3, [pc, #256]	; (10830 <usbdc_set_interface+0x128>)
   10730:	7edb      	ldrb	r3, [r3, #27]
   10732:	461a      	mov	r2, r3
   10734:	4b3f      	ldr	r3, [pc, #252]	; (10834 <usbdc_set_interface+0x12c>)
   10736:	4798      	blx	r3
   10738:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   1073a:	693b      	ldr	r3, [r7, #16]
   1073c:	2b00      	cmp	r3, #0
   1073e:	d101      	bne.n	10744 <usbdc_set_interface+0x3c>
		return false;
   10740:	2300      	movs	r3, #0
   10742:	e071      	b.n	10828 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   10744:	693b      	ldr	r3, [r7, #16]
   10746:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   10748:	6938      	ldr	r0, [r7, #16]
   1074a:	4b3b      	ldr	r3, [pc, #236]	; (10838 <usbdc_set_interface+0x130>)
   1074c:	4798      	blx	r3
   1074e:	4603      	mov	r3, r0
   10750:	461a      	mov	r2, r3
   10752:	693b      	ldr	r3, [r7, #16]
   10754:	4413      	add	r3, r2
   10756:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   10758:	68bb      	ldr	r3, [r7, #8]
   1075a:	68f9      	ldr	r1, [r7, #12]
   1075c:	2204      	movs	r2, #4
   1075e:	4618      	mov	r0, r3
   10760:	4b36      	ldr	r3, [pc, #216]	; (1083c <usbdc_set_interface+0x134>)
   10762:	4798      	blx	r3
   10764:	6138      	str	r0, [r7, #16]
   10766:	693b      	ldr	r3, [r7, #16]
   10768:	2b00      	cmp	r3, #0
   1076a:	d113      	bne.n	10794 <usbdc_set_interface+0x8c>
		return false;
   1076c:	2300      	movs	r3, #0
   1076e:	e05b      	b.n	10828 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   10770:	68bb      	ldr	r3, [r7, #8]
   10772:	4618      	mov	r0, r3
   10774:	4b32      	ldr	r3, [pc, #200]	; (10840 <usbdc_set_interface+0x138>)
   10776:	4798      	blx	r3
   10778:	4603      	mov	r3, r0
   1077a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1077c:	68bb      	ldr	r3, [r7, #8]
   1077e:	68f9      	ldr	r1, [r7, #12]
   10780:	2204      	movs	r2, #4
   10782:	4618      	mov	r0, r3
   10784:	4b2d      	ldr	r3, [pc, #180]	; (1083c <usbdc_set_interface+0x134>)
   10786:	4798      	blx	r3
   10788:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   1078a:	693b      	ldr	r3, [r7, #16]
   1078c:	2b00      	cmp	r3, #0
   1078e:	d101      	bne.n	10794 <usbdc_set_interface+0x8c>
			return false;
   10790:	2300      	movs	r3, #0
   10792:	e049      	b.n	10828 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   10794:	693b      	ldr	r3, [r7, #16]
   10796:	3302      	adds	r3, #2
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	b29b      	uxth	r3, r3
   1079c:	88ba      	ldrh	r2, [r7, #4]
   1079e:	429a      	cmp	r2, r3
   107a0:	d1e6      	bne.n	10770 <usbdc_set_interface+0x68>
   107a2:	693b      	ldr	r3, [r7, #16]
   107a4:	3303      	adds	r3, #3
   107a6:	781b      	ldrb	r3, [r3, #0]
   107a8:	b29b      	uxth	r3, r3
   107aa:	88fa      	ldrh	r2, [r7, #6]
   107ac:	429a      	cmp	r2, r3
   107ae:	d1df      	bne.n	10770 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   107b0:	693b      	ldr	r3, [r7, #16]
   107b2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   107b4:	4b1e      	ldr	r3, [pc, #120]	; (10830 <usbdc_set_interface+0x128>)
   107b6:	691b      	ldr	r3, [r3, #16]
   107b8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   107ba:	e031      	b.n	10820 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   107bc:	697b      	ldr	r3, [r7, #20]
   107be:	685b      	ldr	r3, [r3, #4]
   107c0:	f107 0208 	add.w	r2, r7, #8
   107c4:	2101      	movs	r1, #1
   107c6:	6978      	ldr	r0, [r7, #20]
   107c8:	4798      	blx	r3
   107ca:	4603      	mov	r3, r0
   107cc:	2b00      	cmp	r3, #0
   107ce:	d003      	beq.n	107d8 <usbdc_set_interface+0xd0>
			func = func->next;
   107d0:	697b      	ldr	r3, [r7, #20]
   107d2:	681b      	ldr	r3, [r3, #0]
   107d4:	617b      	str	r3, [r7, #20]
   107d6:	e023      	b.n	10820 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   107d8:	697b      	ldr	r3, [r7, #20]
   107da:	685b      	ldr	r3, [r3, #4]
   107dc:	f107 0208 	add.w	r2, r7, #8
   107e0:	2100      	movs	r1, #0
   107e2:	6978      	ldr	r0, [r7, #20]
   107e4:	4798      	blx	r3
   107e6:	4603      	mov	r3, r0
   107e8:	2b00      	cmp	r3, #0
   107ea:	d117      	bne.n	1081c <usbdc_set_interface+0x114>
			if (alt_set) {
   107ec:	88fb      	ldrh	r3, [r7, #6]
   107ee:	2b00      	cmp	r3, #0
   107f0:	d00c      	beq.n	1080c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   107f2:	4b0f      	ldr	r3, [pc, #60]	; (10830 <usbdc_set_interface+0x128>)
   107f4:	7f5b      	ldrb	r3, [r3, #29]
   107f6:	b25a      	sxtb	r2, r3
   107f8:	88bb      	ldrh	r3, [r7, #4]
   107fa:	2101      	movs	r1, #1
   107fc:	fa01 f303 	lsl.w	r3, r1, r3
   10800:	b25b      	sxtb	r3, r3
   10802:	4313      	orrs	r3, r2
   10804:	b25b      	sxtb	r3, r3
   10806:	b2da      	uxtb	r2, r3
   10808:	4b09      	ldr	r3, [pc, #36]	; (10830 <usbdc_set_interface+0x128>)
   1080a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   1080c:	2300      	movs	r3, #0
   1080e:	2200      	movs	r2, #0
   10810:	2100      	movs	r1, #0
   10812:	2000      	movs	r0, #0
   10814:	4c0b      	ldr	r4, [pc, #44]	; (10844 <usbdc_set_interface+0x13c>)
   10816:	47a0      	blx	r4
			return true;
   10818:	2301      	movs	r3, #1
   1081a:	e005      	b.n	10828 <usbdc_set_interface+0x120>
		} else {
			return false;
   1081c:	2300      	movs	r3, #0
   1081e:	e003      	b.n	10828 <usbdc_set_interface+0x120>
	while (NULL != func) {
   10820:	697b      	ldr	r3, [r7, #20]
   10822:	2b00      	cmp	r3, #0
   10824:	d1ca      	bne.n	107bc <usbdc_set_interface+0xb4>
		}
	}

	return false;
   10826:	2300      	movs	r3, #0
}
   10828:	4618      	mov	r0, r3
   1082a:	371c      	adds	r7, #28
   1082c:	46bd      	mov	sp, r7
   1082e:	bd90      	pop	{r4, r7, pc}
   10830:	20002030 	.word	0x20002030
   10834:	00010f6d 	.word	0x00010f6d
   10838:	00010119 	.word	0x00010119
   1083c:	00010ead 	.word	0x00010ead
   10840:	000100f5 	.word	0x000100f5
   10844:	00010c1d 	.word	0x00010c1d

00010848 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   10848:	b590      	push	{r4, r7, lr}
   1084a:	b083      	sub	sp, #12
   1084c:	af00      	add	r7, sp, #0
   1084e:	4603      	mov	r3, r0
   10850:	6039      	str	r1, [r7, #0]
   10852:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   10854:	683b      	ldr	r3, [r7, #0]
   10856:	785b      	ldrb	r3, [r3, #1]
   10858:	3b01      	subs	r3, #1
   1085a:	2b0a      	cmp	r3, #10
   1085c:	d85b      	bhi.n	10916 <usbdc_set_req+0xce>
   1085e:	a201      	add	r2, pc, #4	; (adr r2, 10864 <usbdc_set_req+0x1c>)
   10860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10864:	000108e3 	.word	0x000108e3
   10868:	00010917 	.word	0x00010917
   1086c:	000108f1 	.word	0x000108f1
   10870:	00010917 	.word	0x00010917
   10874:	00010891 	.word	0x00010891
   10878:	00010917 	.word	0x00010917
   1087c:	00010917 	.word	0x00010917
   10880:	00010917 	.word	0x00010917
   10884:	000108ab 	.word	0x000108ab
   10888:	00010917 	.word	0x00010917
   1088c:	000108ff 	.word	0x000108ff
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   10890:	79f8      	ldrb	r0, [r7, #7]
   10892:	2301      	movs	r3, #1
   10894:	2200      	movs	r2, #0
   10896:	2100      	movs	r1, #0
   10898:	4c21      	ldr	r4, [pc, #132]	; (10920 <usbdc_set_req+0xd8>)
   1089a:	47a0      	blx	r4
   1089c:	4603      	mov	r3, r0
   1089e:	2b00      	cmp	r3, #0
   108a0:	bf0c      	ite	eq
   108a2:	2301      	moveq	r3, #1
   108a4:	2300      	movne	r3, #0
   108a6:	b2db      	uxtb	r3, r3
   108a8:	e036      	b.n	10918 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   108aa:	683b      	ldr	r3, [r7, #0]
   108ac:	885b      	ldrh	r3, [r3, #2]
   108ae:	b29b      	uxth	r3, r3
   108b0:	b2db      	uxtb	r3, r3
   108b2:	4618      	mov	r0, r3
   108b4:	4b1b      	ldr	r3, [pc, #108]	; (10924 <usbdc_set_req+0xdc>)
   108b6:	4798      	blx	r3
   108b8:	4603      	mov	r3, r0
   108ba:	f083 0301 	eor.w	r3, r3, #1
   108be:	b2db      	uxtb	r3, r3
   108c0:	2b00      	cmp	r3, #0
   108c2:	d001      	beq.n	108c8 <usbdc_set_req+0x80>
			return false;
   108c4:	2300      	movs	r3, #0
   108c6:	e027      	b.n	10918 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   108c8:	79f8      	ldrb	r0, [r7, #7]
   108ca:	2301      	movs	r3, #1
   108cc:	2200      	movs	r2, #0
   108ce:	2100      	movs	r1, #0
   108d0:	4c13      	ldr	r4, [pc, #76]	; (10920 <usbdc_set_req+0xd8>)
   108d2:	47a0      	blx	r4
   108d4:	4603      	mov	r3, r0
   108d6:	2b00      	cmp	r3, #0
   108d8:	bf0c      	ite	eq
   108da:	2301      	moveq	r3, #1
   108dc:	2300      	movne	r3, #0
   108de:	b2db      	uxtb	r3, r3
   108e0:	e01a      	b.n	10918 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   108e2:	79fb      	ldrb	r3, [r7, #7]
   108e4:	6839      	ldr	r1, [r7, #0]
   108e6:	4618      	mov	r0, r3
   108e8:	4b0f      	ldr	r3, [pc, #60]	; (10928 <usbdc_set_req+0xe0>)
   108ea:	4798      	blx	r3
   108ec:	4603      	mov	r3, r0
   108ee:	e013      	b.n	10918 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   108f0:	79fb      	ldrb	r3, [r7, #7]
   108f2:	6839      	ldr	r1, [r7, #0]
   108f4:	4618      	mov	r0, r3
   108f6:	4b0d      	ldr	r3, [pc, #52]	; (1092c <usbdc_set_req+0xe4>)
   108f8:	4798      	blx	r3
   108fa:	4603      	mov	r3, r0
   108fc:	e00c      	b.n	10918 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   108fe:	683b      	ldr	r3, [r7, #0]
   10900:	885b      	ldrh	r3, [r3, #2]
   10902:	b29a      	uxth	r2, r3
   10904:	683b      	ldr	r3, [r7, #0]
   10906:	889b      	ldrh	r3, [r3, #4]
   10908:	b29b      	uxth	r3, r3
   1090a:	4619      	mov	r1, r3
   1090c:	4610      	mov	r0, r2
   1090e:	4b08      	ldr	r3, [pc, #32]	; (10930 <usbdc_set_req+0xe8>)
   10910:	4798      	blx	r3
   10912:	4603      	mov	r3, r0
   10914:	e000      	b.n	10918 <usbdc_set_req+0xd0>
	default:
		return false;
   10916:	2300      	movs	r3, #0
	}
}
   10918:	4618      	mov	r0, r3
   1091a:	370c      	adds	r7, #12
   1091c:	46bd      	mov	sp, r7
   1091e:	bd90      	pop	{r4, r7, pc}
   10920:	00010c1d 	.word	0x00010c1d
   10924:	000105fd 	.word	0x000105fd
   10928:	00010519 	.word	0x00010519
   1092c:	00010571 	.word	0x00010571
   10930:	00010709 	.word	0x00010709

00010934 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   10934:	b580      	push	{r7, lr}
   10936:	b082      	sub	sp, #8
   10938:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1093a:	4b0a      	ldr	r3, [pc, #40]	; (10964 <usbdc_sof_notify+0x30>)
   1093c:	685b      	ldr	r3, [r3, #4]
   1093e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   10940:	e009      	b.n	10956 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   10942:	687b      	ldr	r3, [r7, #4]
   10944:	685b      	ldr	r3, [r3, #4]
   10946:	2b00      	cmp	r3, #0
   10948:	d002      	beq.n	10950 <usbdc_sof_notify+0x1c>
			sof->cb();
   1094a:	687b      	ldr	r3, [r7, #4]
   1094c:	685b      	ldr	r3, [r3, #4]
   1094e:	4798      	blx	r3
		}
		sof = sof->next;
   10950:	687b      	ldr	r3, [r7, #4]
   10952:	681b      	ldr	r3, [r3, #0]
   10954:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   10956:	687b      	ldr	r3, [r7, #4]
   10958:	2b00      	cmp	r3, #0
   1095a:	d1f2      	bne.n	10942 <usbdc_sof_notify+0xe>
	}
}
   1095c:	bf00      	nop
   1095e:	3708      	adds	r7, #8
   10960:	46bd      	mov	sp, r7
   10962:	bd80      	pop	{r7, pc}
   10964:	20002030 	.word	0x20002030

00010968 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   10968:	b580      	push	{r7, lr}
   1096a:	b084      	sub	sp, #16
   1096c:	af00      	add	r7, sp, #0
   1096e:	4603      	mov	r3, r0
   10970:	6039      	str	r1, [r7, #0]
   10972:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   10974:	4b0b      	ldr	r3, [pc, #44]	; (109a4 <usbdc_change_notify+0x3c>)
   10976:	68db      	ldr	r3, [r3, #12]
   10978:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   1097a:	e00c      	b.n	10996 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   1097c:	68fb      	ldr	r3, [r7, #12]
   1097e:	685b      	ldr	r3, [r3, #4]
   10980:	2b00      	cmp	r3, #0
   10982:	d005      	beq.n	10990 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   10984:	68fb      	ldr	r3, [r7, #12]
   10986:	685b      	ldr	r3, [r3, #4]
   10988:	79fa      	ldrb	r2, [r7, #7]
   1098a:	6839      	ldr	r1, [r7, #0]
   1098c:	4610      	mov	r0, r2
   1098e:	4798      	blx	r3
		}
		cg = cg->next;
   10990:	68fb      	ldr	r3, [r7, #12]
   10992:	681b      	ldr	r3, [r3, #0]
   10994:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   10996:	68fb      	ldr	r3, [r7, #12]
   10998:	2b00      	cmp	r3, #0
   1099a:	d1ef      	bne.n	1097c <usbdc_change_notify+0x14>
	}
}
   1099c:	bf00      	nop
   1099e:	3710      	adds	r7, #16
   109a0:	46bd      	mov	sp, r7
   109a2:	bd80      	pop	{r7, pc}
   109a4:	20002030 	.word	0x20002030

000109a8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   109a8:	b580      	push	{r7, lr}
   109aa:	b084      	sub	sp, #16
   109ac:	af00      	add	r7, sp, #0
   109ae:	4603      	mov	r3, r0
   109b0:	6039      	str	r1, [r7, #0]
   109b2:	71fb      	strb	r3, [r7, #7]
   109b4:	4613      	mov	r3, r2
   109b6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   109b8:	4b12      	ldr	r3, [pc, #72]	; (10a04 <usbdc_request_handler+0x5c>)
   109ba:	689b      	ldr	r3, [r3, #8]
   109bc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   109be:	e019      	b.n	109f4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   109c0:	68fb      	ldr	r3, [r7, #12]
   109c2:	685b      	ldr	r3, [r3, #4]
   109c4:	2b00      	cmp	r3, #0
   109c6:	d012      	beq.n	109ee <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   109c8:	68fb      	ldr	r3, [r7, #12]
   109ca:	685b      	ldr	r3, [r3, #4]
   109cc:	79ba      	ldrb	r2, [r7, #6]
   109ce:	79f8      	ldrb	r0, [r7, #7]
   109d0:	6839      	ldr	r1, [r7, #0]
   109d2:	4798      	blx	r3
   109d4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   109d6:	68bb      	ldr	r3, [r7, #8]
   109d8:	2b00      	cmp	r3, #0
   109da:	d101      	bne.n	109e0 <usbdc_request_handler+0x38>
				return true;
   109dc:	2301      	movs	r3, #1
   109de:	e00d      	b.n	109fc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   109e0:	68bb      	ldr	r3, [r7, #8]
   109e2:	f113 0f0a 	cmn.w	r3, #10
   109e6:	d002      	beq.n	109ee <usbdc_request_handler+0x46>
				return -1;
   109e8:	f04f 33ff 	mov.w	r3, #4294967295
   109ec:	e006      	b.n	109fc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   109ee:	68fb      	ldr	r3, [r7, #12]
   109f0:	681b      	ldr	r3, [r3, #0]
   109f2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   109f4:	68fb      	ldr	r3, [r7, #12]
   109f6:	2b00      	cmp	r3, #0
   109f8:	d1e2      	bne.n	109c0 <usbdc_request_handler+0x18>
	}
	return false;
   109fa:	2300      	movs	r3, #0
}
   109fc:	4618      	mov	r0, r3
   109fe:	3710      	adds	r7, #16
   10a00:	46bd      	mov	sp, r7
   10a02:	bd80      	pop	{r7, pc}
   10a04:	20002030 	.word	0x20002030

00010a08 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   10a08:	b580      	push	{r7, lr}
   10a0a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   10a0c:	4b01      	ldr	r3, [pc, #4]	; (10a14 <usbd_sof_cb+0xc>)
   10a0e:	4798      	blx	r3
}
   10a10:	bf00      	nop
   10a12:	bd80      	pop	{r7, pc}
   10a14:	00010935 	.word	0x00010935

00010a18 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   10a18:	b580      	push	{r7, lr}
   10a1a:	b082      	sub	sp, #8
   10a1c:	af00      	add	r7, sp, #0
   10a1e:	4603      	mov	r3, r0
   10a20:	6039      	str	r1, [r7, #0]
   10a22:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   10a24:	79fb      	ldrb	r3, [r7, #7]
   10a26:	2200      	movs	r2, #0
   10a28:	6839      	ldr	r1, [r7, #0]
   10a2a:	4618      	mov	r0, r3
   10a2c:	4b14      	ldr	r3, [pc, #80]	; (10a80 <usbdc_cb_ctl_req+0x68>)
   10a2e:	4798      	blx	r3
   10a30:	4603      	mov	r3, r0
   10a32:	f1b3 3fff 	cmp.w	r3, #4294967295
   10a36:	d00b      	beq.n	10a50 <usbdc_cb_ctl_req+0x38>
   10a38:	2b01      	cmp	r3, #1
   10a3a:	d007      	beq.n	10a4c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   10a3c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   10a3e:	683b      	ldr	r3, [r7, #0]
   10a40:	781b      	ldrb	r3, [r3, #0]
   10a42:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   10a46:	2b00      	cmp	r3, #0
   10a48:	d007      	beq.n	10a5a <usbdc_cb_ctl_req+0x42>
   10a4a:	e003      	b.n	10a54 <usbdc_cb_ctl_req+0x3c>
		return true;
   10a4c:	2301      	movs	r3, #1
   10a4e:	e013      	b.n	10a78 <usbdc_cb_ctl_req+0x60>
		return false;
   10a50:	2300      	movs	r3, #0
   10a52:	e011      	b.n	10a78 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   10a54:	2b80      	cmp	r3, #128	; 0x80
   10a56:	d007      	beq.n	10a68 <usbdc_cb_ctl_req+0x50>
   10a58:	e00d      	b.n	10a76 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   10a5a:	79fb      	ldrb	r3, [r7, #7]
   10a5c:	6839      	ldr	r1, [r7, #0]
   10a5e:	4618      	mov	r0, r3
   10a60:	4b08      	ldr	r3, [pc, #32]	; (10a84 <usbdc_cb_ctl_req+0x6c>)
   10a62:	4798      	blx	r3
   10a64:	4603      	mov	r3, r0
   10a66:	e007      	b.n	10a78 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   10a68:	79fb      	ldrb	r3, [r7, #7]
   10a6a:	6839      	ldr	r1, [r7, #0]
   10a6c:	4618      	mov	r0, r3
   10a6e:	4b06      	ldr	r3, [pc, #24]	; (10a88 <usbdc_cb_ctl_req+0x70>)
   10a70:	4798      	blx	r3
   10a72:	4603      	mov	r3, r0
   10a74:	e000      	b.n	10a78 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   10a76:	2300      	movs	r3, #0
	}
}
   10a78:	4618      	mov	r0, r3
   10a7a:	3708      	adds	r7, #8
   10a7c:	46bd      	mov	sp, r7
   10a7e:	bd80      	pop	{r7, pc}
   10a80:	000109a9 	.word	0x000109a9
   10a84:	00010849 	.word	0x00010849
   10a88:	00010471 	.word	0x00010471

00010a8c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   10a8c:	b580      	push	{r7, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	af00      	add	r7, sp, #0
   10a92:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   10a94:	687b      	ldr	r3, [r7, #4]
   10a96:	781b      	ldrb	r3, [r3, #0]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d135      	bne.n	10b08 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   10a9c:	687b      	ldr	r3, [r7, #4]
   10a9e:	785b      	ldrb	r3, [r3, #1]
   10aa0:	2b05      	cmp	r3, #5
   10aa2:	d019      	beq.n	10ad8 <usbdc_ctrl_status_end+0x4c>
   10aa4:	2b09      	cmp	r3, #9
   10aa6:	d000      	beq.n	10aaa <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   10aa8:	e02f      	b.n	10b0a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   10aaa:	687b      	ldr	r3, [r7, #4]
   10aac:	885b      	ldrh	r3, [r3, #2]
   10aae:	b29b      	uxth	r3, r3
   10ab0:	b2da      	uxtb	r2, r3
   10ab2:	4b17      	ldr	r3, [pc, #92]	; (10b10 <usbdc_ctrl_status_end+0x84>)
   10ab4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   10ab6:	687b      	ldr	r3, [r7, #4]
   10ab8:	885b      	ldrh	r3, [r3, #2]
   10aba:	b29b      	uxth	r3, r3
   10abc:	2b00      	cmp	r3, #0
   10abe:	d001      	beq.n	10ac4 <usbdc_ctrl_status_end+0x38>
   10ac0:	2204      	movs	r2, #4
   10ac2:	e000      	b.n	10ac6 <usbdc_ctrl_status_end+0x3a>
   10ac4:	2203      	movs	r2, #3
   10ac6:	4b12      	ldr	r3, [pc, #72]	; (10b10 <usbdc_ctrl_status_end+0x84>)
   10ac8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   10aca:	4b11      	ldr	r3, [pc, #68]	; (10b10 <usbdc_ctrl_status_end+0x84>)
   10acc:	7e9b      	ldrb	r3, [r3, #26]
   10ace:	4619      	mov	r1, r3
   10ad0:	2001      	movs	r0, #1
   10ad2:	4b10      	ldr	r3, [pc, #64]	; (10b14 <usbdc_ctrl_status_end+0x88>)
   10ad4:	4798      	blx	r3
		break;
   10ad6:	e018      	b.n	10b0a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   10ad8:	687b      	ldr	r3, [r7, #4]
   10ada:	885b      	ldrh	r3, [r3, #2]
   10adc:	b29b      	uxth	r3, r3
   10ade:	b2db      	uxtb	r3, r3
   10ae0:	4618      	mov	r0, r3
   10ae2:	4b0d      	ldr	r3, [pc, #52]	; (10b18 <usbdc_ctrl_status_end+0x8c>)
   10ae4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	885b      	ldrh	r3, [r3, #2]
   10aea:	b29b      	uxth	r3, r3
   10aec:	2b00      	cmp	r3, #0
   10aee:	d001      	beq.n	10af4 <usbdc_ctrl_status_end+0x68>
   10af0:	2203      	movs	r2, #3
   10af2:	e000      	b.n	10af6 <usbdc_ctrl_status_end+0x6a>
   10af4:	2202      	movs	r2, #2
   10af6:	4b06      	ldr	r3, [pc, #24]	; (10b10 <usbdc_ctrl_status_end+0x84>)
   10af8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   10afa:	4b05      	ldr	r3, [pc, #20]	; (10b10 <usbdc_ctrl_status_end+0x84>)
   10afc:	7e9b      	ldrb	r3, [r3, #26]
   10afe:	4619      	mov	r1, r3
   10b00:	2001      	movs	r0, #1
   10b02:	4b04      	ldr	r3, [pc, #16]	; (10b14 <usbdc_ctrl_status_end+0x88>)
   10b04:	4798      	blx	r3
		break;
   10b06:	e000      	b.n	10b0a <usbdc_ctrl_status_end+0x7e>
		return;
   10b08:	bf00      	nop
	}
}
   10b0a:	3708      	adds	r7, #8
   10b0c:	46bd      	mov	sp, r7
   10b0e:	bd80      	pop	{r7, pc}
   10b10:	20002030 	.word	0x20002030
   10b14:	00010969 	.word	0x00010969
   10b18:	000106e9 	.word	0x000106e9

00010b1c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   10b1c:	b580      	push	{r7, lr}
   10b1e:	b082      	sub	sp, #8
   10b20:	af00      	add	r7, sp, #0
   10b22:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   10b24:	2201      	movs	r2, #1
   10b26:	6879      	ldr	r1, [r7, #4]
   10b28:	2000      	movs	r0, #0
   10b2a:	4b03      	ldr	r3, [pc, #12]	; (10b38 <usbdc_ctrl_data_end+0x1c>)
   10b2c:	4798      	blx	r3
	return false;
   10b2e:	2300      	movs	r3, #0
}
   10b30:	4618      	mov	r0, r3
   10b32:	3708      	adds	r7, #8
   10b34:	46bd      	mov	sp, r7
   10b36:	bd80      	pop	{r7, pc}
   10b38:	000109a9 	.word	0x000109a9

00010b3c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   10b3c:	b580      	push	{r7, lr}
   10b3e:	b082      	sub	sp, #8
   10b40:	af00      	add	r7, sp, #0
   10b42:	4603      	mov	r3, r0
   10b44:	603a      	str	r2, [r7, #0]
   10b46:	71fb      	strb	r3, [r7, #7]
   10b48:	460b      	mov	r3, r1
   10b4a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   10b4c:	79bb      	ldrb	r3, [r7, #6]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d002      	beq.n	10b58 <usbdc_cb_ctl_done+0x1c>
   10b52:	2b01      	cmp	r3, #1
   10b54:	d004      	beq.n	10b60 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   10b56:	e008      	b.n	10b6a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   10b58:	6838      	ldr	r0, [r7, #0]
   10b5a:	4b06      	ldr	r3, [pc, #24]	; (10b74 <usbdc_cb_ctl_done+0x38>)
   10b5c:	4798      	blx	r3
		break;
   10b5e:	e004      	b.n	10b6a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   10b60:	6838      	ldr	r0, [r7, #0]
   10b62:	4b05      	ldr	r3, [pc, #20]	; (10b78 <usbdc_cb_ctl_done+0x3c>)
   10b64:	4798      	blx	r3
   10b66:	4603      	mov	r3, r0
   10b68:	e000      	b.n	10b6c <usbdc_cb_ctl_done+0x30>
	}
	return false;
   10b6a:	2300      	movs	r3, #0
}
   10b6c:	4618      	mov	r0, r3
   10b6e:	3708      	adds	r7, #8
   10b70:	46bd      	mov	sp, r7
   10b72:	bd80      	pop	{r7, pc}
   10b74:	00010a8d 	.word	0x00010a8d
   10b78:	00010b1d 	.word	0x00010b1d

00010b7c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   10b7c:	b580      	push	{r7, lr}
   10b7e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   10b80:	4b10      	ldr	r3, [pc, #64]	; (10bc4 <usbdc_reset+0x48>)
   10b82:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   10b84:	4b10      	ldr	r3, [pc, #64]	; (10bc8 <usbdc_reset+0x4c>)
   10b86:	2202      	movs	r2, #2
   10b88:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   10b8a:	4b0f      	ldr	r3, [pc, #60]	; (10bc8 <usbdc_reset+0x4c>)
   10b8c:	2200      	movs	r2, #0
   10b8e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   10b90:	4b0d      	ldr	r3, [pc, #52]	; (10bc8 <usbdc_reset+0x4c>)
   10b92:	2200      	movs	r2, #0
   10b94:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   10b96:	2000      	movs	r0, #0
   10b98:	4b0c      	ldr	r3, [pc, #48]	; (10bcc <usbdc_reset+0x50>)
   10b9a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   10b9c:	4b0a      	ldr	r3, [pc, #40]	; (10bc8 <usbdc_reset+0x4c>)
   10b9e:	7f1b      	ldrb	r3, [r3, #28]
   10ba0:	4618      	mov	r0, r3
   10ba2:	4b0b      	ldr	r3, [pc, #44]	; (10bd0 <usbdc_reset+0x54>)
   10ba4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   10ba6:	4a0b      	ldr	r2, [pc, #44]	; (10bd4 <usbdc_reset+0x58>)
   10ba8:	2100      	movs	r1, #0
   10baa:	2000      	movs	r0, #0
   10bac:	4b0a      	ldr	r3, [pc, #40]	; (10bd8 <usbdc_reset+0x5c>)
   10bae:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   10bb0:	4a0a      	ldr	r2, [pc, #40]	; (10bdc <usbdc_reset+0x60>)
   10bb2:	2102      	movs	r1, #2
   10bb4:	2000      	movs	r0, #0
   10bb6:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <usbdc_reset+0x5c>)
   10bb8:	4798      	blx	r3
	usb_d_ep_enable(0);
   10bba:	2000      	movs	r0, #0
   10bbc:	4b08      	ldr	r3, [pc, #32]	; (10be0 <usbdc_reset+0x64>)
   10bbe:	4798      	blx	r3
}
   10bc0:	bf00      	nop
   10bc2:	bd80      	pop	{r7, pc}
   10bc4:	000105c9 	.word	0x000105c9
   10bc8:	20002030 	.word	0x20002030
   10bcc:	00006ee5 	.word	0x00006ee5
   10bd0:	00006e21 	.word	0x00006e21
   10bd4:	00010a19 	.word	0x00010a19
   10bd8:	000071e5 	.word	0x000071e5
   10bdc:	00010b3d 	.word	0x00010b3d
   10be0:	00006f35 	.word	0x00006f35

00010be4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	4603      	mov	r3, r0
   10bec:	6039      	str	r1, [r7, #0]
   10bee:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   10bf0:	79fb      	ldrb	r3, [r7, #7]
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d002      	beq.n	10bfc <usbd_event_cb+0x18>
   10bf6:	2b01      	cmp	r3, #1
   10bf8:	d005      	beq.n	10c06 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   10bfa:	e007      	b.n	10c0c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   10bfc:	6839      	ldr	r1, [r7, #0]
   10bfe:	2000      	movs	r0, #0
   10c00:	4b04      	ldr	r3, [pc, #16]	; (10c14 <usbd_event_cb+0x30>)
   10c02:	4798      	blx	r3
		break;
   10c04:	e002      	b.n	10c0c <usbd_event_cb+0x28>
		usbdc_reset();
   10c06:	4b04      	ldr	r3, [pc, #16]	; (10c18 <usbd_event_cb+0x34>)
   10c08:	4798      	blx	r3
		break;
   10c0a:	bf00      	nop
	}
}
   10c0c:	bf00      	nop
   10c0e:	3708      	adds	r7, #8
   10c10:	46bd      	mov	sp, r7
   10c12:	bd80      	pop	{r7, pc}
   10c14:	00010969 	.word	0x00010969
   10c18:	00010b7d 	.word	0x00010b7d

00010c1c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   10c1c:	b580      	push	{r7, lr}
   10c1e:	b088      	sub	sp, #32
   10c20:	af00      	add	r7, sp, #0
   10c22:	60b9      	str	r1, [r7, #8]
   10c24:	607a      	str	r2, [r7, #4]
   10c26:	461a      	mov	r2, r3
   10c28:	4603      	mov	r3, r0
   10c2a:	73fb      	strb	r3, [r7, #15]
   10c2c:	4613      	mov	r3, r2
   10c2e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10c30:	68bb      	ldr	r3, [r7, #8]
   10c32:	617b      	str	r3, [r7, #20]
   10c34:	687b      	ldr	r3, [r7, #4]
   10c36:	61bb      	str	r3, [r7, #24]
   10c38:	7bfb      	ldrb	r3, [r7, #15]
   10c3a:	773b      	strb	r3, [r7, #28]
   10c3c:	7bbb      	ldrb	r3, [r7, #14]
   10c3e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   10c40:	f107 0314 	add.w	r3, r7, #20
   10c44:	4618      	mov	r0, r3
   10c46:	4b03      	ldr	r3, [pc, #12]	; (10c54 <usbdc_xfer+0x38>)
   10c48:	4798      	blx	r3
   10c4a:	4603      	mov	r3, r0
}
   10c4c:	4618      	mov	r0, r3
   10c4e:	3720      	adds	r7, #32
   10c50:	46bd      	mov	sp, r7
   10c52:	bd80      	pop	{r7, pc}
   10c54:	00006fa5 	.word	0x00006fa5

00010c58 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10c58:	b580      	push	{r7, lr}
   10c5a:	b082      	sub	sp, #8
   10c5c:	af00      	add	r7, sp, #0
   10c5e:	4603      	mov	r3, r0
   10c60:	6039      	str	r1, [r7, #0]
   10c62:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   10c64:	79fb      	ldrb	r3, [r7, #7]
   10c66:	2b01      	cmp	r3, #1
   10c68:	d009      	beq.n	10c7e <usbdc_register_handler+0x26>
   10c6a:	2b02      	cmp	r3, #2
   10c6c:	d00c      	beq.n	10c88 <usbdc_register_handler+0x30>
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d000      	beq.n	10c74 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   10c72:	e00e      	b.n	10c92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   10c74:	6839      	ldr	r1, [r7, #0]
   10c76:	4809      	ldr	r0, [pc, #36]	; (10c9c <usbdc_register_handler+0x44>)
   10c78:	4b09      	ldr	r3, [pc, #36]	; (10ca0 <usbdc_register_handler+0x48>)
   10c7a:	4798      	blx	r3
		break;
   10c7c:	e009      	b.n	10c92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10c7e:	6839      	ldr	r1, [r7, #0]
   10c80:	4808      	ldr	r0, [pc, #32]	; (10ca4 <usbdc_register_handler+0x4c>)
   10c82:	4b07      	ldr	r3, [pc, #28]	; (10ca0 <usbdc_register_handler+0x48>)
   10c84:	4798      	blx	r3
		break;
   10c86:	e004      	b.n	10c92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10c88:	6839      	ldr	r1, [r7, #0]
   10c8a:	4807      	ldr	r0, [pc, #28]	; (10ca8 <usbdc_register_handler+0x50>)
   10c8c:	4b04      	ldr	r3, [pc, #16]	; (10ca0 <usbdc_register_handler+0x48>)
   10c8e:	4798      	blx	r3
		break;
   10c90:	bf00      	nop
	}
}
   10c92:	bf00      	nop
   10c94:	3708      	adds	r7, #8
   10c96:	46bd      	mov	sp, r7
   10c98:	bd80      	pop	{r7, pc}
   10c9a:	bf00      	nop
   10c9c:	20002034 	.word	0x20002034
   10ca0:	0000733d 	.word	0x0000733d
   10ca4:	20002038 	.word	0x20002038
   10ca8:	2000203c 	.word	0x2000203c

00010cac <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10cac:	b580      	push	{r7, lr}
   10cae:	b084      	sub	sp, #16
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   10cb4:	687b      	ldr	r3, [r7, #4]
   10cb6:	2b00      	cmp	r3, #0
   10cb8:	bf14      	ite	ne
   10cba:	2301      	movne	r3, #1
   10cbc:	2300      	moveq	r3, #0
   10cbe:	b2db      	uxtb	r3, r3
   10cc0:	f240 3255 	movw	r2, #853	; 0x355
   10cc4:	4910      	ldr	r1, [pc, #64]	; (10d08 <usbdc_init+0x5c>)
   10cc6:	4618      	mov	r0, r3
   10cc8:	4b10      	ldr	r3, [pc, #64]	; (10d0c <usbdc_init+0x60>)
   10cca:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   10ccc:	4b10      	ldr	r3, [pc, #64]	; (10d10 <usbdc_init+0x64>)
   10cce:	4798      	blx	r3
   10cd0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   10cd2:	68fb      	ldr	r3, [r7, #12]
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	da01      	bge.n	10cdc <usbdc_init+0x30>
		return rc;
   10cd8:	68fb      	ldr	r3, [r7, #12]
   10cda:	e010      	b.n	10cfe <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   10cdc:	2220      	movs	r2, #32
   10cde:	2100      	movs	r1, #0
   10ce0:	480c      	ldr	r0, [pc, #48]	; (10d14 <usbdc_init+0x68>)
   10ce2:	4b0d      	ldr	r3, [pc, #52]	; (10d18 <usbdc_init+0x6c>)
   10ce4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   10ce6:	4a0b      	ldr	r2, [pc, #44]	; (10d14 <usbdc_init+0x68>)
   10ce8:	687b      	ldr	r3, [r7, #4]
   10cea:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   10cec:	490b      	ldr	r1, [pc, #44]	; (10d1c <usbdc_init+0x70>)
   10cee:	2000      	movs	r0, #0
   10cf0:	4b0b      	ldr	r3, [pc, #44]	; (10d20 <usbdc_init+0x74>)
   10cf2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   10cf4:	490b      	ldr	r1, [pc, #44]	; (10d24 <usbdc_init+0x78>)
   10cf6:	2001      	movs	r0, #1
   10cf8:	4b09      	ldr	r3, [pc, #36]	; (10d20 <usbdc_init+0x74>)
   10cfa:	4798      	blx	r3

	return 0;
   10cfc:	2300      	movs	r3, #0
}
   10cfe:	4618      	mov	r0, r3
   10d00:	3710      	adds	r7, #16
   10d02:	46bd      	mov	sp, r7
   10d04:	bd80      	pop	{r7, pc}
   10d06:	bf00      	nop
   10d08:	00012c9c 	.word	0x00012c9c
   10d0c:	00007261 	.word	0x00007261
   10d10:	00006d0d 	.word	0x00006d0d
   10d14:	20002030 	.word	0x20002030
   10d18:	00011c4d 	.word	0x00011c4d
   10d1c:	00010a09 	.word	0x00010a09
   10d20:	00006db9 	.word	0x00006db9
   10d24:	00010be5 	.word	0x00010be5

00010d28 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10d28:	b580      	push	{r7, lr}
   10d2a:	b082      	sub	sp, #8
   10d2c:	af00      	add	r7, sp, #0
   10d2e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10d30:	6879      	ldr	r1, [r7, #4]
   10d32:	4803      	ldr	r0, [pc, #12]	; (10d40 <usbdc_register_function+0x18>)
   10d34:	4b03      	ldr	r3, [pc, #12]	; (10d44 <usbdc_register_function+0x1c>)
   10d36:	4798      	blx	r3
}
   10d38:	bf00      	nop
   10d3a:	3708      	adds	r7, #8
   10d3c:	46bd      	mov	sp, r7
   10d3e:	bd80      	pop	{r7, pc}
   10d40:	20002040 	.word	0x20002040
   10d44:	0000733d 	.word	0x0000733d

00010d48 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   10d48:	b580      	push	{r7, lr}
   10d4a:	b082      	sub	sp, #8
   10d4c:	af00      	add	r7, sp, #0
   10d4e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   10d50:	4b0f      	ldr	r3, [pc, #60]	; (10d90 <usbdc_start+0x48>)
   10d52:	7e9b      	ldrb	r3, [r3, #26]
   10d54:	2b00      	cmp	r3, #0
   10d56:	d002      	beq.n	10d5e <usbdc_start+0x16>
		return ERR_BUSY;
   10d58:	f06f 0303 	mvn.w	r3, #3
   10d5c:	e013      	b.n	10d86 <usbdc_start+0x3e>
	}

	if (desces) {
   10d5e:	687b      	ldr	r3, [r7, #4]
   10d60:	2b00      	cmp	r3, #0
   10d62:	d00e      	beq.n	10d82 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   10d64:	4a0a      	ldr	r2, [pc, #40]	; (10d90 <usbdc_start+0x48>)
   10d66:	687b      	ldr	r3, [r7, #4]
   10d68:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10d6a:	687b      	ldr	r3, [r7, #4]
   10d6c:	681b      	ldr	r3, [r3, #0]
   10d6e:	79da      	ldrb	r2, [r3, #7]
   10d70:	4b07      	ldr	r3, [pc, #28]	; (10d90 <usbdc_start+0x48>)
   10d72:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   10d74:	4b06      	ldr	r3, [pc, #24]	; (10d90 <usbdc_start+0x48>)
   10d76:	2201      	movs	r2, #1
   10d78:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10d7a:	4b06      	ldr	r3, [pc, #24]	; (10d94 <usbdc_start+0x4c>)
   10d7c:	4798      	blx	r3
	return ERR_NONE;
   10d7e:	2300      	movs	r3, #0
   10d80:	e001      	b.n	10d86 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   10d82:	f06f 0308 	mvn.w	r3, #8
}
   10d86:	4618      	mov	r0, r3
   10d88:	3708      	adds	r7, #8
   10d8a:	46bd      	mov	sp, r7
   10d8c:	bd80      	pop	{r7, pc}
   10d8e:	bf00      	nop
   10d90:	20002030 	.word	0x20002030
   10d94:	00006ddd 	.word	0x00006ddd

00010d98 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10d98:	b580      	push	{r7, lr}
   10d9a:	af00      	add	r7, sp, #0
	usb_d_attach();
   10d9c:	4b01      	ldr	r3, [pc, #4]	; (10da4 <usbdc_attach+0xc>)
   10d9e:	4798      	blx	r3
}
   10da0:	bf00      	nop
   10da2:	bd80      	pop	{r7, pc}
   10da4:	00006df1 	.word	0x00006df1

00010da8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10da8:	b480      	push	{r7}
   10daa:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10dac:	4b03      	ldr	r3, [pc, #12]	; (10dbc <usbdc_get_ctrl_buffer+0x14>)
   10dae:	695b      	ldr	r3, [r3, #20]
}
   10db0:	4618      	mov	r0, r3
   10db2:	46bd      	mov	sp, r7
   10db4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10db8:	4770      	bx	lr
   10dba:	bf00      	nop
   10dbc:	20002030 	.word	0x20002030

00010dc0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10dc0:	b480      	push	{r7}
   10dc2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   10dc4:	4b07      	ldr	r3, [pc, #28]	; (10de4 <usbdc_get_state+0x24>)
   10dc6:	7e9b      	ldrb	r3, [r3, #26]
   10dc8:	f003 0310 	and.w	r3, r3, #16
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d001      	beq.n	10dd4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10dd0:	2310      	movs	r3, #16
   10dd2:	e001      	b.n	10dd8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   10dd4:	4b03      	ldr	r3, [pc, #12]	; (10de4 <usbdc_get_state+0x24>)
   10dd6:	7e9b      	ldrb	r3, [r3, #26]
}
   10dd8:	4618      	mov	r0, r3
   10dda:	46bd      	mov	sp, r7
   10ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10de0:	4770      	bx	lr
   10de2:	bf00      	nop
   10de4:	20002030 	.word	0x20002030

00010de8 <usb_get_u16>:
{
   10de8:	b480      	push	{r7}
   10dea:	b083      	sub	sp, #12
   10dec:	af00      	add	r7, sp, #0
   10dee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10df0:	687b      	ldr	r3, [r7, #4]
   10df2:	781b      	ldrb	r3, [r3, #0]
   10df4:	b29a      	uxth	r2, r3
   10df6:	687b      	ldr	r3, [r7, #4]
   10df8:	3301      	adds	r3, #1
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	b29b      	uxth	r3, r3
   10dfe:	021b      	lsls	r3, r3, #8
   10e00:	b29b      	uxth	r3, r3
   10e02:	4413      	add	r3, r2
   10e04:	b29b      	uxth	r3, r3
}
   10e06:	4618      	mov	r0, r3
   10e08:	370c      	adds	r7, #12
   10e0a:	46bd      	mov	sp, r7
   10e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e10:	4770      	bx	lr

00010e12 <usb_desc_len>:
{
   10e12:	b480      	push	{r7}
   10e14:	b083      	sub	sp, #12
   10e16:	af00      	add	r7, sp, #0
   10e18:	6078      	str	r0, [r7, #4]
	return desc[0];
   10e1a:	687b      	ldr	r3, [r7, #4]
   10e1c:	781b      	ldrb	r3, [r3, #0]
}
   10e1e:	4618      	mov	r0, r3
   10e20:	370c      	adds	r7, #12
   10e22:	46bd      	mov	sp, r7
   10e24:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e28:	4770      	bx	lr

00010e2a <usb_desc_type>:
{
   10e2a:	b480      	push	{r7}
   10e2c:	b083      	sub	sp, #12
   10e2e:	af00      	add	r7, sp, #0
   10e30:	6078      	str	r0, [r7, #4]
	return desc[1];
   10e32:	687b      	ldr	r3, [r7, #4]
   10e34:	3301      	adds	r3, #1
   10e36:	781b      	ldrb	r3, [r3, #0]
}
   10e38:	4618      	mov	r0, r3
   10e3a:	370c      	adds	r7, #12
   10e3c:	46bd      	mov	sp, r7
   10e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e42:	4770      	bx	lr

00010e44 <usb_desc_next>:
{
   10e44:	b580      	push	{r7, lr}
   10e46:	b082      	sub	sp, #8
   10e48:	af00      	add	r7, sp, #0
   10e4a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10e4c:	6878      	ldr	r0, [r7, #4]
   10e4e:	4b05      	ldr	r3, [pc, #20]	; (10e64 <usb_desc_next+0x20>)
   10e50:	4798      	blx	r3
   10e52:	4603      	mov	r3, r0
   10e54:	461a      	mov	r2, r3
   10e56:	687b      	ldr	r3, [r7, #4]
   10e58:	4413      	add	r3, r2
}
   10e5a:	4618      	mov	r0, r3
   10e5c:	3708      	adds	r7, #8
   10e5e:	46bd      	mov	sp, r7
   10e60:	bd80      	pop	{r7, pc}
   10e62:	bf00      	nop
   10e64:	00010e13 	.word	0x00010e13

00010e68 <usb_cfg_desc_total_len>:
{
   10e68:	b580      	push	{r7, lr}
   10e6a:	b082      	sub	sp, #8
   10e6c:	af00      	add	r7, sp, #0
   10e6e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	3302      	adds	r3, #2
   10e74:	4618      	mov	r0, r3
   10e76:	4b03      	ldr	r3, [pc, #12]	; (10e84 <usb_cfg_desc_total_len+0x1c>)
   10e78:	4798      	blx	r3
   10e7a:	4603      	mov	r3, r0
}
   10e7c:	4618      	mov	r0, r3
   10e7e:	3708      	adds	r7, #8
   10e80:	46bd      	mov	sp, r7
   10e82:	bd80      	pop	{r7, pc}
   10e84:	00010de9 	.word	0x00010de9

00010e88 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10e88:	b580      	push	{r7, lr}
   10e8a:	b082      	sub	sp, #8
   10e8c:	af00      	add	r7, sp, #0
   10e8e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10e90:	6878      	ldr	r0, [r7, #4]
   10e92:	4b05      	ldr	r3, [pc, #20]	; (10ea8 <usb_cfg_desc_next+0x20>)
   10e94:	4798      	blx	r3
   10e96:	4603      	mov	r3, r0
   10e98:	461a      	mov	r2, r3
   10e9a:	687b      	ldr	r3, [r7, #4]
   10e9c:	4413      	add	r3, r2
}
   10e9e:	4618      	mov	r0, r3
   10ea0:	3708      	adds	r7, #8
   10ea2:	46bd      	mov	sp, r7
   10ea4:	bd80      	pop	{r7, pc}
   10ea6:	bf00      	nop
   10ea8:	00010e69 	.word	0x00010e69

00010eac <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10eac:	b580      	push	{r7, lr}
   10eae:	b084      	sub	sp, #16
   10eb0:	af00      	add	r7, sp, #0
   10eb2:	60f8      	str	r0, [r7, #12]
   10eb4:	60b9      	str	r1, [r7, #8]
   10eb6:	4613      	mov	r3, r2
   10eb8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10eba:	e015      	b.n	10ee8 <usb_find_desc+0x3c>
		_desc_len_check();
   10ebc:	68f8      	ldr	r0, [r7, #12]
   10ebe:	4b0f      	ldr	r3, [pc, #60]	; (10efc <usb_find_desc+0x50>)
   10ec0:	4798      	blx	r3
   10ec2:	4603      	mov	r3, r0
   10ec4:	2b01      	cmp	r3, #1
   10ec6:	d801      	bhi.n	10ecc <usb_find_desc+0x20>
   10ec8:	2300      	movs	r3, #0
   10eca:	e012      	b.n	10ef2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   10ecc:	68f8      	ldr	r0, [r7, #12]
   10ece:	4b0c      	ldr	r3, [pc, #48]	; (10f00 <usb_find_desc+0x54>)
   10ed0:	4798      	blx	r3
   10ed2:	4603      	mov	r3, r0
   10ed4:	461a      	mov	r2, r3
   10ed6:	79fb      	ldrb	r3, [r7, #7]
   10ed8:	4293      	cmp	r3, r2
   10eda:	d101      	bne.n	10ee0 <usb_find_desc+0x34>
			return desc;
   10edc:	68fb      	ldr	r3, [r7, #12]
   10ede:	e008      	b.n	10ef2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10ee0:	68f8      	ldr	r0, [r7, #12]
   10ee2:	4b08      	ldr	r3, [pc, #32]	; (10f04 <usb_find_desc+0x58>)
   10ee4:	4798      	blx	r3
   10ee6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10ee8:	68fa      	ldr	r2, [r7, #12]
   10eea:	68bb      	ldr	r3, [r7, #8]
   10eec:	429a      	cmp	r2, r3
   10eee:	d3e5      	bcc.n	10ebc <usb_find_desc+0x10>
	}
	return NULL;
   10ef0:	2300      	movs	r3, #0
}
   10ef2:	4618      	mov	r0, r3
   10ef4:	3710      	adds	r7, #16
   10ef6:	46bd      	mov	sp, r7
   10ef8:	bd80      	pop	{r7, pc}
   10efa:	bf00      	nop
   10efc:	00010e13 	.word	0x00010e13
   10f00:	00010e2b 	.word	0x00010e2b
   10f04:	00010e45 	.word	0x00010e45

00010f08 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   10f08:	b580      	push	{r7, lr}
   10f0a:	b082      	sub	sp, #8
   10f0c:	af00      	add	r7, sp, #0
   10f0e:	6078      	str	r0, [r7, #4]
   10f10:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10f12:	e019      	b.n	10f48 <usb_find_ep_desc+0x40>
		_desc_len_check();
   10f14:	6878      	ldr	r0, [r7, #4]
   10f16:	4b12      	ldr	r3, [pc, #72]	; (10f60 <usb_find_ep_desc+0x58>)
   10f18:	4798      	blx	r3
   10f1a:	4603      	mov	r3, r0
   10f1c:	2b01      	cmp	r3, #1
   10f1e:	d801      	bhi.n	10f24 <usb_find_ep_desc+0x1c>
   10f20:	2300      	movs	r3, #0
   10f22:	e018      	b.n	10f56 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   10f24:	6878      	ldr	r0, [r7, #4]
   10f26:	4b0f      	ldr	r3, [pc, #60]	; (10f64 <usb_find_ep_desc+0x5c>)
   10f28:	4798      	blx	r3
   10f2a:	4603      	mov	r3, r0
   10f2c:	2b04      	cmp	r3, #4
   10f2e:	d010      	beq.n	10f52 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   10f30:	6878      	ldr	r0, [r7, #4]
   10f32:	4b0c      	ldr	r3, [pc, #48]	; (10f64 <usb_find_ep_desc+0x5c>)
   10f34:	4798      	blx	r3
   10f36:	4603      	mov	r3, r0
   10f38:	2b05      	cmp	r3, #5
   10f3a:	d101      	bne.n	10f40 <usb_find_ep_desc+0x38>
			return desc;
   10f3c:	687b      	ldr	r3, [r7, #4]
   10f3e:	e00a      	b.n	10f56 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   10f40:	6878      	ldr	r0, [r7, #4]
   10f42:	4b09      	ldr	r3, [pc, #36]	; (10f68 <usb_find_ep_desc+0x60>)
   10f44:	4798      	blx	r3
   10f46:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   10f48:	687a      	ldr	r2, [r7, #4]
   10f4a:	683b      	ldr	r3, [r7, #0]
   10f4c:	429a      	cmp	r2, r3
   10f4e:	d3e1      	bcc.n	10f14 <usb_find_ep_desc+0xc>
   10f50:	e000      	b.n	10f54 <usb_find_ep_desc+0x4c>
			break;
   10f52:	bf00      	nop
	}
	return NULL;
   10f54:	2300      	movs	r3, #0
}
   10f56:	4618      	mov	r0, r3
   10f58:	3708      	adds	r7, #8
   10f5a:	46bd      	mov	sp, r7
   10f5c:	bd80      	pop	{r7, pc}
   10f5e:	bf00      	nop
   10f60:	00010e13 	.word	0x00010e13
   10f64:	00010e2b 	.word	0x00010e2b
   10f68:	00010e45 	.word	0x00010e45

00010f6c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   10f6c:	b580      	push	{r7, lr}
   10f6e:	b084      	sub	sp, #16
   10f70:	af00      	add	r7, sp, #0
   10f72:	60f8      	str	r0, [r7, #12]
   10f74:	60b9      	str	r1, [r7, #8]
   10f76:	4613      	mov	r3, r2
   10f78:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10f7a:	2202      	movs	r2, #2
   10f7c:	68b9      	ldr	r1, [r7, #8]
   10f7e:	68f8      	ldr	r0, [r7, #12]
   10f80:	4b15      	ldr	r3, [pc, #84]	; (10fd8 <usb_find_cfg_desc+0x6c>)
   10f82:	4798      	blx	r3
   10f84:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   10f86:	68fb      	ldr	r3, [r7, #12]
   10f88:	2b00      	cmp	r3, #0
   10f8a:	d11a      	bne.n	10fc2 <usb_find_cfg_desc+0x56>
		return NULL;
   10f8c:	2300      	movs	r3, #0
   10f8e:	e01f      	b.n	10fd0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10f90:	68f8      	ldr	r0, [r7, #12]
   10f92:	4b12      	ldr	r3, [pc, #72]	; (10fdc <usb_find_cfg_desc+0x70>)
   10f94:	4798      	blx	r3
   10f96:	4603      	mov	r3, r0
   10f98:	2b01      	cmp	r3, #1
   10f9a:	d801      	bhi.n	10fa0 <usb_find_cfg_desc+0x34>
   10f9c:	2300      	movs	r3, #0
   10f9e:	e017      	b.n	10fd0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10fa0:	68fb      	ldr	r3, [r7, #12]
   10fa2:	3301      	adds	r3, #1
   10fa4:	781b      	ldrb	r3, [r3, #0]
   10fa6:	2b02      	cmp	r3, #2
   10fa8:	d110      	bne.n	10fcc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   10faa:	68fb      	ldr	r3, [r7, #12]
   10fac:	3305      	adds	r3, #5
   10fae:	781b      	ldrb	r3, [r3, #0]
   10fb0:	79fa      	ldrb	r2, [r7, #7]
   10fb2:	429a      	cmp	r2, r3
   10fb4:	d101      	bne.n	10fba <usb_find_cfg_desc+0x4e>
			return desc;
   10fb6:	68fb      	ldr	r3, [r7, #12]
   10fb8:	e00a      	b.n	10fd0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   10fba:	68f8      	ldr	r0, [r7, #12]
   10fbc:	4b08      	ldr	r3, [pc, #32]	; (10fe0 <usb_find_cfg_desc+0x74>)
   10fbe:	4798      	blx	r3
   10fc0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10fc2:	68fa      	ldr	r2, [r7, #12]
   10fc4:	68bb      	ldr	r3, [r7, #8]
   10fc6:	429a      	cmp	r2, r3
   10fc8:	d3e2      	bcc.n	10f90 <usb_find_cfg_desc+0x24>
   10fca:	e000      	b.n	10fce <usb_find_cfg_desc+0x62>
			break;
   10fcc:	bf00      	nop
	}
	return NULL;
   10fce:	2300      	movs	r3, #0
}
   10fd0:	4618      	mov	r0, r3
   10fd2:	3710      	adds	r7, #16
   10fd4:	46bd      	mov	sp, r7
   10fd6:	bd80      	pop	{r7, pc}
   10fd8:	00010ead 	.word	0x00010ead
   10fdc:	00010e13 	.word	0x00010e13
   10fe0:	00010e89 	.word	0x00010e89

00010fe4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   10fe4:	b580      	push	{r7, lr}
   10fe6:	b086      	sub	sp, #24
   10fe8:	af00      	add	r7, sp, #0
   10fea:	60f8      	str	r0, [r7, #12]
   10fec:	60b9      	str	r1, [r7, #8]
   10fee:	4613      	mov	r3, r2
   10ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   10ff2:	2300      	movs	r3, #0
   10ff4:	75fb      	strb	r3, [r7, #23]
   10ff6:	e020      	b.n	1103a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   10ff8:	2203      	movs	r2, #3
   10ffa:	68b9      	ldr	r1, [r7, #8]
   10ffc:	68f8      	ldr	r0, [r7, #12]
   10ffe:	4b13      	ldr	r3, [pc, #76]	; (1104c <usb_find_str_desc+0x68>)
   11000:	4798      	blx	r3
   11002:	60f8      	str	r0, [r7, #12]
		if (desc) {
   11004:	68fb      	ldr	r3, [r7, #12]
   11006:	2b00      	cmp	r3, #0
   11008:	d015      	beq.n	11036 <usb_find_str_desc+0x52>
			_desc_len_check();
   1100a:	68f8      	ldr	r0, [r7, #12]
   1100c:	4b10      	ldr	r3, [pc, #64]	; (11050 <usb_find_str_desc+0x6c>)
   1100e:	4798      	blx	r3
   11010:	4603      	mov	r3, r0
   11012:	2b01      	cmp	r3, #1
   11014:	d801      	bhi.n	1101a <usb_find_str_desc+0x36>
   11016:	2300      	movs	r3, #0
   11018:	e014      	b.n	11044 <usb_find_str_desc+0x60>
			if (i == str_index) {
   1101a:	7dfa      	ldrb	r2, [r7, #23]
   1101c:	79fb      	ldrb	r3, [r7, #7]
   1101e:	429a      	cmp	r2, r3
   11020:	d101      	bne.n	11026 <usb_find_str_desc+0x42>
				return desc;
   11022:	68fb      	ldr	r3, [r7, #12]
   11024:	e00e      	b.n	11044 <usb_find_str_desc+0x60>
			}
			i++;
   11026:	7dfb      	ldrb	r3, [r7, #23]
   11028:	3301      	adds	r3, #1
   1102a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   1102c:	68f8      	ldr	r0, [r7, #12]
   1102e:	4b09      	ldr	r3, [pc, #36]	; (11054 <usb_find_str_desc+0x70>)
   11030:	4798      	blx	r3
   11032:	60f8      	str	r0, [r7, #12]
   11034:	e001      	b.n	1103a <usb_find_str_desc+0x56>
		} else {
			return NULL;
   11036:	2300      	movs	r3, #0
   11038:	e004      	b.n	11044 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   1103a:	68fa      	ldr	r2, [r7, #12]
   1103c:	68bb      	ldr	r3, [r7, #8]
   1103e:	429a      	cmp	r2, r3
   11040:	d3da      	bcc.n	10ff8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   11042:	2300      	movs	r3, #0
}
   11044:	4618      	mov	r0, r3
   11046:	3718      	adds	r7, #24
   11048:	46bd      	mov	sp, r7
   1104a:	bd80      	pop	{r7, pc}
   1104c:	00010ead 	.word	0x00010ead
   11050:	00010e13 	.word	0x00010e13
   11054:	00010e45 	.word	0x00010e45

00011058 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   11058:	b480      	push	{r7}
   1105a:	b083      	sub	sp, #12
   1105c:	af00      	add	r7, sp, #0
   1105e:	6078      	str	r0, [r7, #4]
   11060:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   11062:	687b      	ldr	r3, [r7, #4]
   11064:	683a      	ldr	r2, [r7, #0]
   11066:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   11068:	687b      	ldr	r3, [r7, #4]
   1106a:	4618      	mov	r0, r3
   1106c:	370c      	adds	r7, #12
   1106e:	46bd      	mov	sp, r7
   11070:	bc80      	pop	{r7}
   11072:	4770      	bx	lr

00011074 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   11074:	b480      	push	{r7}
   11076:	b083      	sub	sp, #12
   11078:	af00      	add	r7, sp, #0
   1107a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   1107c:	687b      	ldr	r3, [r7, #4]
   1107e:	4618      	mov	r0, r3
   11080:	370c      	adds	r7, #12
   11082:	46bd      	mov	sp, r7
   11084:	bc80      	pop	{r7}
   11086:	4770      	bx	lr

00011088 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   11088:	b580      	push	{r7, lr}
   1108a:	b082      	sub	sp, #8
   1108c:	af00      	add	r7, sp, #0
   1108e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   11090:	687b      	ldr	r3, [r7, #4]
   11092:	4a23      	ldr	r2, [pc, #140]	; (11120 <_ZN14I2C_Sync_Class4InitEv+0x98>)
   11094:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   11096:	687b      	ldr	r3, [r7, #4]
   11098:	4a21      	ldr	r2, [pc, #132]	; (11120 <_ZN14I2C_Sync_Class4InitEv+0x98>)
   1109a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   1109c:	687b      	ldr	r3, [r7, #4]
   1109e:	691a      	ldr	r2, [r3, #16]
   110a0:	687b      	ldr	r3, [r7, #4]
   110a2:	330c      	adds	r3, #12
   110a4:	4619      	mov	r1, r3
   110a6:	4610      	mov	r0, r2
   110a8:	4b1e      	ldr	r3, [pc, #120]	; (11124 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
   110aa:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   110ac:	687b      	ldr	r3, [r7, #4]
   110ae:	691b      	ldr	r3, [r3, #16]
   110b0:	4618      	mov	r0, r3
   110b2:	4b1d      	ldr	r3, [pc, #116]	; (11128 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
   110b4:	4798      	blx	r3
   110b6:	4603      	mov	r3, r0
   110b8:	b2da      	uxtb	r2, r3
   110ba:	687b      	ldr	r3, [r7, #4]
   110bc:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
   110be:	687b      	ldr	r3, [r7, #4]
   110c0:	7d1b      	ldrb	r3, [r3, #20]
   110c2:	2b00      	cmp	r3, #0
   110c4:	bf0c      	ite	eq
   110c6:	2301      	moveq	r3, #1
   110c8:	2300      	movne	r3, #0
   110ca:	b2da      	uxtb	r2, r3
   110cc:	687b      	ldr	r3, [r7, #4]
   110ce:	725a      	strb	r2, [r3, #9]
	if (isOK)
   110d0:	687b      	ldr	r3, [r7, #4]
   110d2:	7a5b      	ldrb	r3, [r3, #9]
   110d4:	b2db      	uxtb	r3, r3
   110d6:	2b00      	cmp	r3, #0
   110d8:	d116      	bne.n	11108 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
   110da:	687b      	ldr	r3, [r7, #4]
   110dc:	691b      	ldr	r3, [r3, #16]
   110de:	4618      	mov	r0, r3
   110e0:	4b12      	ldr	r3, [pc, #72]	; (1112c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
   110e2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   110e4:	687b      	ldr	r3, [r7, #4]
   110e6:	691b      	ldr	r3, [r3, #16]
   110e8:	4618      	mov	r0, r3
   110ea:	4b0f      	ldr	r3, [pc, #60]	; (11128 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
   110ec:	4798      	blx	r3
   110ee:	4603      	mov	r3, r0
   110f0:	b2da      	uxtb	r2, r3
   110f2:	687b      	ldr	r3, [r7, #4]
   110f4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
   110f6:	687b      	ldr	r3, [r7, #4]
   110f8:	7d1b      	ldrb	r3, [r3, #20]
   110fa:	2b00      	cmp	r3, #0
   110fc:	bf0c      	ite	eq
   110fe:	2301      	moveq	r3, #1
   11100:	2300      	movne	r3, #0
   11102:	b2da      	uxtb	r2, r3
   11104:	687b      	ldr	r3, [r7, #4]
   11106:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
   11108:	687b      	ldr	r3, [r7, #4]
   1110a:	7a5b      	ldrb	r3, [r3, #9]
   1110c:	b2da      	uxtb	r2, r3
   1110e:	687b      	ldr	r3, [r7, #4]
   11110:	721a      	strb	r2, [r3, #8]
	return isOK;
   11112:	687b      	ldr	r3, [r7, #4]
   11114:	7a5b      	ldrb	r3, [r3, #9]
   11116:	b2db      	uxtb	r3, r3
	
}
   11118:	4618      	mov	r0, r3
   1111a:	3708      	adds	r7, #8
   1111c:	46bd      	mov	sp, r7
   1111e:	bd80      	pop	{r7, pc}
   11120:	20002068 	.word	0x20002068
   11124:	0000616f 	.word	0x0000616f
   11128:	000060f5 	.word	0x000060f5
   1112c:	00006115 	.word	0x00006115

00011130 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   11130:	b580      	push	{r7, lr}
   11132:	b082      	sub	sp, #8
   11134:	af00      	add	r7, sp, #0
   11136:	6078      	str	r0, [r7, #4]
   11138:	460b      	mov	r3, r1
   1113a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   1113c:	687b      	ldr	r3, [r7, #4]
   1113e:	691b      	ldr	r3, [r3, #16]
   11140:	78fa      	ldrb	r2, [r7, #3]
   11142:	b211      	sxth	r1, r2
   11144:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11148:	4618      	mov	r0, r3
   1114a:	4b03      	ldr	r3, [pc, #12]	; (11158 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   1114c:	4798      	blx	r3
   1114e:	4603      	mov	r3, r0
}
   11150:	4618      	mov	r0, r3
   11152:	3708      	adds	r7, #8
   11154:	46bd      	mov	sp, r7
   11156:	bd80      	pop	{r7, pc}
   11158:	00006135 	.word	0x00006135

0001115c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   1115c:	b580      	push	{r7, lr}
   1115e:	b086      	sub	sp, #24
   11160:	af00      	add	r7, sp, #0
   11162:	60f8      	str	r0, [r7, #12]
   11164:	60b9      	str	r1, [r7, #8]
   11166:	4613      	mov	r3, r2
   11168:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   1116a:	68fb      	ldr	r3, [r7, #12]
   1116c:	68db      	ldr	r3, [r3, #12]
   1116e:	88fa      	ldrh	r2, [r7, #6]
   11170:	68b9      	ldr	r1, [r7, #8]
   11172:	4618      	mov	r0, r3
   11174:	4b03      	ldr	r3, [pc, #12]	; (11184 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   11176:	4798      	blx	r3
   11178:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   1117a:	697b      	ldr	r3, [r7, #20]
}
   1117c:	4618      	mov	r0, r3
   1117e:	3718      	adds	r7, #24
   11180:	46bd      	mov	sp, r7
   11182:	bd80      	pop	{r7, pc}
   11184:	000119f5 	.word	0x000119f5

00011188 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   11188:	b580      	push	{r7, lr}
   1118a:	b086      	sub	sp, #24
   1118c:	af00      	add	r7, sp, #0
   1118e:	60f8      	str	r0, [r7, #12]
   11190:	60b9      	str	r1, [r7, #8]
   11192:	4613      	mov	r3, r2
   11194:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   11196:	68fb      	ldr	r3, [r7, #12]
   11198:	68db      	ldr	r3, [r3, #12]
   1119a:	88fa      	ldrh	r2, [r7, #6]
   1119c:	68b9      	ldr	r1, [r7, #8]
   1119e:	4618      	mov	r0, r3
   111a0:	4b03      	ldr	r3, [pc, #12]	; (111b0 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   111a2:	4798      	blx	r3
   111a4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   111a6:	697b      	ldr	r3, [r7, #20]
}
   111a8:	4618      	mov	r0, r3
   111aa:	3718      	adds	r7, #24
   111ac:	46bd      	mov	sp, r7
   111ae:	bd80      	pop	{r7, pc}
   111b0:	00011a45 	.word	0x00011a45

000111b4 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
   111b4:	b580      	push	{r7, lr}
   111b6:	b082      	sub	sp, #8
   111b8:	af00      	add	r7, sp, #0
   111ba:	6078      	str	r0, [r7, #4]
   111bc:	6039      	str	r1, [r7, #0]
   111be:	687b      	ldr	r3, [r7, #4]
   111c0:	2b01      	cmp	r3, #1
   111c2:	d10d      	bne.n	111e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   111c4:	683b      	ldr	r3, [r7, #0]
   111c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   111ca:	4293      	cmp	r3, r2
   111cc:	d108      	bne.n	111e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   111ce:	4906      	ldr	r1, [pc, #24]	; (111e8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   111d0:	4806      	ldr	r0, [pc, #24]	; (111ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   111d2:	4b07      	ldr	r3, [pc, #28]	; (111f0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   111d4:	4798      	blx	r3
   111d6:	4a07      	ldr	r2, [pc, #28]	; (111f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   111d8:	4907      	ldr	r1, [pc, #28]	; (111f8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   111da:	4804      	ldr	r0, [pc, #16]	; (111ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   111dc:	4b07      	ldr	r3, [pc, #28]	; (111fc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   111de:	4798      	blx	r3
   111e0:	bf00      	nop
   111e2:	3708      	adds	r7, #8
   111e4:	46bd      	mov	sp, r7
   111e6:	bd80      	pop	{r7, pc}
   111e8:	20002638 	.word	0x20002638
   111ec:	20002050 	.word	0x20002050
   111f0:	00011059 	.word	0x00011059
   111f4:	20000000 	.word	0x20000000
   111f8:	00011075 	.word	0x00011075
   111fc:	00011a95 	.word	0x00011a95

00011200 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
   11200:	b580      	push	{r7, lr}
   11202:	af00      	add	r7, sp, #0
   11204:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11208:	2001      	movs	r0, #1
   1120a:	4b01      	ldr	r3, [pc, #4]	; (11210 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
   1120c:	4798      	blx	r3
   1120e:	bd80      	pop	{r7, pc}
   11210:	000111b5 	.word	0x000111b5

00011214 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   11214:	b480      	push	{r7}
   11216:	b083      	sub	sp, #12
   11218:	af00      	add	r7, sp, #0
   1121a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	4618      	mov	r0, r3
   11220:	370c      	adds	r7, #12
   11222:	46bd      	mov	sp, r7
   11224:	bc80      	pop	{r7}
   11226:	4770      	bx	lr

00011228 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   11228:	b480      	push	{r7}
   1122a:	b083      	sub	sp, #12
   1122c:	af00      	add	r7, sp, #0
   1122e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   11230:	687b      	ldr	r3, [r7, #4]
   11232:	4618      	mov	r0, r3
   11234:	370c      	adds	r7, #12
   11236:	46bd      	mov	sp, r7
   11238:	bc80      	pop	{r7}
   1123a:	4770      	bx	lr

0001123c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   1123c:	b480      	push	{r7}
   1123e:	b085      	sub	sp, #20
   11240:	af00      	add	r7, sp, #0
   11242:	60f8      	str	r0, [r7, #12]
   11244:	460b      	mov	r3, r1
   11246:	607a      	str	r2, [r7, #4]
   11248:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   1124a:	687b      	ldr	r3, [r7, #4]
   1124c:	681a      	ldr	r2, [r3, #0]
   1124e:	68fb      	ldr	r3, [r7, #12]
   11250:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   11252:	687b      	ldr	r3, [r7, #4]
   11254:	685a      	ldr	r2, [r3, #4]
   11256:	68fb      	ldr	r3, [r7, #12]
   11258:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   1125a:	68fb      	ldr	r3, [r7, #12]
   1125c:	7afa      	ldrb	r2, [r7, #11]
   1125e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   11260:	68fb      	ldr	r3, [r7, #12]
   11262:	687a      	ldr	r2, [r7, #4]
   11264:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11266:	68fb      	ldr	r3, [r7, #12]
   11268:	68db      	ldr	r3, [r3, #12]
   1126a:	7a5b      	ldrb	r3, [r3, #9]
   1126c:	b2da      	uxtb	r2, r3
   1126e:	68fb      	ldr	r3, [r7, #12]
   11270:	719a      	strb	r2, [r3, #6]
	return isOK;
   11272:	68fb      	ldr	r3, [r7, #12]
   11274:	799b      	ldrb	r3, [r3, #6]
   11276:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   11278:	4618      	mov	r0, r3
   1127a:	3714      	adds	r7, #20
   1127c:	46bd      	mov	sp, r7
   1127e:	bc80      	pop	{r7}
   11280:	4770      	bx	lr

00011282 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   11282:	b480      	push	{r7}
   11284:	b083      	sub	sp, #12
   11286:	af00      	add	r7, sp, #0
   11288:	6078      	str	r0, [r7, #4]
   1128a:	460b      	mov	r3, r1
   1128c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   1128e:	78fb      	ldrb	r3, [r7, #3]
   11290:	f003 0307 	and.w	r3, r3, #7
   11294:	b2db      	uxtb	r3, r3
}
   11296:	4618      	mov	r0, r3
   11298:	370c      	adds	r7, #12
   1129a:	46bd      	mov	sp, r7
   1129c:	bc80      	pop	{r7}
   1129e:	4770      	bx	lr

000112a0 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   112a0:	b480      	push	{r7}
   112a2:	b083      	sub	sp, #12
   112a4:	af00      	add	r7, sp, #0
   112a6:	6078      	str	r0, [r7, #4]
   112a8:	4608      	mov	r0, r1
   112aa:	4611      	mov	r1, r2
   112ac:	461a      	mov	r2, r3
   112ae:	4603      	mov	r3, r0
   112b0:	70fb      	strb	r3, [r7, #3]
   112b2:	460b      	mov	r3, r1
   112b4:	70bb      	strb	r3, [r7, #2]
   112b6:	4613      	mov	r3, r2
   112b8:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   112ba:	78fb      	ldrb	r3, [r7, #3]
   112bc:	2b07      	cmp	r3, #7
   112be:	dc01      	bgt.n	112c4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   112c0:	78bb      	ldrb	r3, [r7, #2]
   112c2:	e000      	b.n	112c6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   112c4:	787b      	ldrb	r3, [r7, #1]
}
   112c6:	4618      	mov	r0, r3
   112c8:	370c      	adds	r7, #12
   112ca:	46bd      	mov	sp, r7
   112cc:	bc80      	pop	{r7}
   112ce:	4770      	bx	lr

000112d0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   112d0:	b580      	push	{r7, lr}
   112d2:	b082      	sub	sp, #8
   112d4:	af00      	add	r7, sp, #0
   112d6:	6078      	str	r0, [r7, #4]
   112d8:	460b      	mov	r3, r1
   112da:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   112dc:	687b      	ldr	r3, [r7, #4]
   112de:	68da      	ldr	r2, [r3, #12]
   112e0:	687b      	ldr	r3, [r7, #4]
   112e2:	7a1b      	ldrb	r3, [r3, #8]
   112e4:	4619      	mov	r1, r3
   112e6:	4610      	mov	r0, r2
   112e8:	4b0a      	ldr	r3, [pc, #40]	; (11314 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   112ea:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   112ec:	687b      	ldr	r3, [r7, #4]
   112ee:	68db      	ldr	r3, [r3, #12]
   112f0:	1cf9      	adds	r1, r7, #3
   112f2:	2201      	movs	r2, #1
   112f4:	4618      	mov	r0, r3
   112f6:	4b08      	ldr	r3, [pc, #32]	; (11318 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   112f8:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   112fa:	687b      	ldr	r3, [r7, #4]
   112fc:	68db      	ldr	r3, [r3, #12]
   112fe:	6879      	ldr	r1, [r7, #4]
   11300:	2201      	movs	r2, #1
   11302:	4618      	mov	r0, r3
   11304:	4b05      	ldr	r3, [pc, #20]	; (1131c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   11306:	4798      	blx	r3

	return registerValue;
   11308:	687b      	ldr	r3, [r7, #4]
   1130a:	781b      	ldrb	r3, [r3, #0]
}
   1130c:	4618      	mov	r0, r3
   1130e:	3708      	adds	r7, #8
   11310:	46bd      	mov	sp, r7
   11312:	bd80      	pop	{r7, pc}
   11314:	00011131 	.word	0x00011131
   11318:	0001115d 	.word	0x0001115d
   1131c:	00011189 	.word	0x00011189

00011320 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   11320:	b580      	push	{r7, lr}
   11322:	b084      	sub	sp, #16
   11324:	af00      	add	r7, sp, #0
   11326:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11328:	687b      	ldr	r3, [r7, #4]
   1132a:	68da      	ldr	r2, [r3, #12]
   1132c:	687b      	ldr	r3, [r7, #4]
   1132e:	7a1b      	ldrb	r3, [r3, #8]
   11330:	4619      	mov	r1, r3
   11332:	4610      	mov	r0, r2
   11334:	4b06      	ldr	r3, [pc, #24]	; (11350 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   11336:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   11338:	2109      	movs	r1, #9
   1133a:	6878      	ldr	r0, [r7, #4]
   1133c:	4b05      	ldr	r3, [pc, #20]	; (11354 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   1133e:	4798      	blx	r3
   11340:	4603      	mov	r3, r0
   11342:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11344:	7bfb      	ldrb	r3, [r7, #15]
}
   11346:	4618      	mov	r0, r3
   11348:	3710      	adds	r7, #16
   1134a:	46bd      	mov	sp, r7
   1134c:	bd80      	pop	{r7, pc}
   1134e:	bf00      	nop
   11350:	00011131 	.word	0x00011131
   11354:	000112d1 	.word	0x000112d1

00011358 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   11358:	b580      	push	{r7, lr}
   1135a:	b084      	sub	sp, #16
   1135c:	af00      	add	r7, sp, #0
   1135e:	6078      	str	r0, [r7, #4]
   11360:	460b      	mov	r3, r1
   11362:	70fb      	strb	r3, [r7, #3]
   11364:	4613      	mov	r3, r2
   11366:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   11368:	687b      	ldr	r3, [r7, #4]
   1136a:	68da      	ldr	r2, [r3, #12]
   1136c:	687b      	ldr	r3, [r7, #4]
   1136e:	7a1b      	ldrb	r3, [r3, #8]
   11370:	4619      	mov	r1, r3
   11372:	4610      	mov	r0, r2
   11374:	4b09      	ldr	r3, [pc, #36]	; (1139c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   11376:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   11378:	78fb      	ldrb	r3, [r7, #3]
   1137a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   1137c:	78bb      	ldrb	r3, [r7, #2]
   1137e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   11380:	687b      	ldr	r3, [r7, #4]
   11382:	68db      	ldr	r3, [r3, #12]
   11384:	f107 010c 	add.w	r1, r7, #12
   11388:	2202      	movs	r2, #2
   1138a:	4618      	mov	r0, r3
   1138c:	4b04      	ldr	r3, [pc, #16]	; (113a0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   1138e:	4798      	blx	r3
   11390:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   11392:	4618      	mov	r0, r3
   11394:	3710      	adds	r7, #16
   11396:	46bd      	mov	sp, r7
   11398:	bd80      	pop	{r7, pc}
   1139a:	bf00      	nop
   1139c:	00011131 	.word	0x00011131
   113a0:	0001115d 	.word	0x0001115d

000113a4 <_ZN14MCP23008_Class12SetPortInputEh>:
	{
		pinMode(i,MCP23008_INPUT);
		pullUp(i,MCP23008_HIGH);
	}
}
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   113a4:	b580      	push	{r7, lr}
   113a6:	b084      	sub	sp, #16
   113a8:	af00      	add	r7, sp, #0
   113aa:	6078      	str	r0, [r7, #4]
   113ac:	460b      	mov	r3, r1
   113ae:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   113b0:	78fb      	ldrb	r3, [r7, #3]
   113b2:	2b00      	cmp	r3, #0
   113b4:	dd23      	ble.n	113fe <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   113b6:	2300      	movs	r3, #0
   113b8:	73fb      	strb	r3, [r7, #15]
   113ba:	7bfb      	ldrb	r3, [r7, #15]
   113bc:	2b07      	cmp	r3, #7
   113be:	dc21      	bgt.n	11404 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   113c0:	78fa      	ldrb	r2, [r7, #3]
   113c2:	7bfb      	ldrb	r3, [r7, #15]
   113c4:	fa42 f303 	asr.w	r3, r2, r3
   113c8:	f003 0301 	and.w	r3, r3, #1
   113cc:	2b00      	cmp	r3, #0
   113ce:	d00c      	beq.n	113ea <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   113d0:	7bfb      	ldrb	r3, [r7, #15]
   113d2:	2201      	movs	r2, #1
   113d4:	4619      	mov	r1, r3
   113d6:	6878      	ldr	r0, [r7, #4]
   113d8:	4b0c      	ldr	r3, [pc, #48]	; (1140c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   113da:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   113dc:	7bfb      	ldrb	r3, [r7, #15]
   113de:	2201      	movs	r2, #1
   113e0:	4619      	mov	r1, r3
   113e2:	6878      	ldr	r0, [r7, #4]
   113e4:	4b0a      	ldr	r3, [pc, #40]	; (11410 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   113e6:	4798      	blx	r3
   113e8:	e005      	b.n	113f6 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   113ea:	7bfb      	ldrb	r3, [r7, #15]
   113ec:	2200      	movs	r2, #0
   113ee:	4619      	mov	r1, r3
   113f0:	6878      	ldr	r0, [r7, #4]
   113f2:	4b06      	ldr	r3, [pc, #24]	; (1140c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   113f4:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   113f6:	7bfb      	ldrb	r3, [r7, #15]
   113f8:	3301      	adds	r3, #1
   113fa:	73fb      	strb	r3, [r7, #15]
   113fc:	e7dd      	b.n	113ba <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   113fe:	6878      	ldr	r0, [r7, #4]
   11400:	4b04      	ldr	r3, [pc, #16]	; (11414 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11402:	4798      	blx	r3
	}
	
}
   11404:	bf00      	nop
   11406:	3710      	adds	r7, #16
   11408:	46bd      	mov	sp, r7
   1140a:	bd80      	pop	{r7, pc}
   1140c:	000114d9 	.word	0x000114d9
   11410:	000115bd 	.word	0x000115bd
   11414:	00011419 	.word	0x00011419

00011418 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11418:	b580      	push	{r7, lr}
   1141a:	b084      	sub	sp, #16
   1141c:	af00      	add	r7, sp, #0
   1141e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11420:	2300      	movs	r3, #0
   11422:	73fb      	strb	r3, [r7, #15]
   11424:	7bfb      	ldrb	r3, [r7, #15]
   11426:	2b07      	cmp	r3, #7
   11428:	dc09      	bgt.n	1143e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   1142a:	7bfb      	ldrb	r3, [r7, #15]
   1142c:	2200      	movs	r2, #0
   1142e:	4619      	mov	r1, r3
   11430:	6878      	ldr	r0, [r7, #4]
   11432:	4b05      	ldr	r3, [pc, #20]	; (11448 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11434:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11436:	7bfb      	ldrb	r3, [r7, #15]
   11438:	3301      	adds	r3, #1
   1143a:	73fb      	strb	r3, [r7, #15]
   1143c:	e7f2      	b.n	11424 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1143e:	bf00      	nop
   11440:	3710      	adds	r7, #16
   11442:	46bd      	mov	sp, r7
   11444:	bd80      	pop	{r7, pc}
   11446:	bf00      	nop
   11448:	000114d9 	.word	0x000114d9

0001144c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   1144c:	b580      	push	{r7, lr}
   1144e:	b084      	sub	sp, #16
   11450:	af00      	add	r7, sp, #0
   11452:	6078      	str	r0, [r7, #4]
   11454:	4608      	mov	r0, r1
   11456:	4611      	mov	r1, r2
   11458:	461a      	mov	r2, r3
   1145a:	4603      	mov	r3, r0
   1145c:	70fb      	strb	r3, [r7, #3]
   1145e:	460b      	mov	r3, r1
   11460:	70bb      	strb	r3, [r7, #2]
   11462:	4613      	mov	r3, r2
   11464:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   11466:	787b      	ldrb	r3, [r7, #1]
   11468:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   1146a:	78fb      	ldrb	r3, [r7, #3]
   1146c:	4619      	mov	r1, r3
   1146e:	6878      	ldr	r0, [r7, #4]
   11470:	4b16      	ldr	r3, [pc, #88]	; (114cc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   11472:	4798      	blx	r3
   11474:	4603      	mov	r3, r0
   11476:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   11478:	7bfb      	ldrb	r3, [r7, #15]
   1147a:	4619      	mov	r1, r3
   1147c:	6878      	ldr	r0, [r7, #4]
   1147e:	4b14      	ldr	r3, [pc, #80]	; (114d0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11480:	4798      	blx	r3
   11482:	4603      	mov	r3, r0
   11484:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   11486:	78bb      	ldrb	r3, [r7, #2]
   11488:	2b00      	cmp	r3, #0
   1148a:	d009      	beq.n	114a0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   1148c:	7bba      	ldrb	r2, [r7, #14]
   1148e:	7b7b      	ldrb	r3, [r7, #13]
   11490:	4619      	mov	r1, r3
   11492:	2301      	movs	r3, #1
   11494:	408b      	lsls	r3, r1
   11496:	b2db      	uxtb	r3, r3
   11498:	4313      	orrs	r3, r2
   1149a:	b2db      	uxtb	r3, r3
   1149c:	73bb      	strb	r3, [r7, #14]
   1149e:	e00a      	b.n	114b6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   114a0:	7bba      	ldrb	r2, [r7, #14]
   114a2:	7b7b      	ldrb	r3, [r7, #13]
   114a4:	4619      	mov	r1, r3
   114a6:	2301      	movs	r3, #1
   114a8:	408b      	lsls	r3, r1
   114aa:	b2db      	uxtb	r3, r3
   114ac:	43db      	mvns	r3, r3
   114ae:	b2db      	uxtb	r3, r3
   114b0:	4013      	ands	r3, r2
   114b2:	b2db      	uxtb	r3, r3
   114b4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   114b6:	7bba      	ldrb	r2, [r7, #14]
   114b8:	7bfb      	ldrb	r3, [r7, #15]
   114ba:	4619      	mov	r1, r3
   114bc:	6878      	ldr	r0, [r7, #4]
   114be:	4b05      	ldr	r3, [pc, #20]	; (114d4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   114c0:	4798      	blx	r3
}
   114c2:	bf00      	nop
   114c4:	3710      	adds	r7, #16
   114c6:	46bd      	mov	sp, r7
   114c8:	bd80      	pop	{r7, pc}
   114ca:	bf00      	nop
   114cc:	00011283 	.word	0x00011283
   114d0:	000112d1 	.word	0x000112d1
   114d4:	00011359 	.word	0x00011359

000114d8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   114d8:	b590      	push	{r4, r7, lr}
   114da:	b085      	sub	sp, #20
   114dc:	af02      	add	r7, sp, #8
   114de:	6078      	str	r0, [r7, #4]
   114e0:	460b      	mov	r3, r1
   114e2:	70fb      	strb	r3, [r7, #3]
   114e4:	4613      	mov	r3, r2
   114e6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   114e8:	78bb      	ldrb	r3, [r7, #2]
   114ea:	2b01      	cmp	r3, #1
   114ec:	bf0c      	ite	eq
   114ee:	2301      	moveq	r3, #1
   114f0:	2300      	movne	r3, #0
   114f2:	b2db      	uxtb	r3, r3
   114f4:	461a      	mov	r2, r3
   114f6:	78f9      	ldrb	r1, [r7, #3]
   114f8:	2300      	movs	r3, #0
   114fa:	9300      	str	r3, [sp, #0]
   114fc:	2300      	movs	r3, #0
   114fe:	6878      	ldr	r0, [r7, #4]
   11500:	4c02      	ldr	r4, [pc, #8]	; (1150c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11502:	47a0      	blx	r4
}
   11504:	bf00      	nop
   11506:	370c      	adds	r7, #12
   11508:	46bd      	mov	sp, r7
   1150a:	bd90      	pop	{r4, r7, pc}
   1150c:	0001144d 	.word	0x0001144d

00011510 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11510:	b590      	push	{r4, r7, lr}
   11512:	b085      	sub	sp, #20
   11514:	af00      	add	r7, sp, #0
   11516:	6078      	str	r0, [r7, #4]
   11518:	460b      	mov	r3, r1
   1151a:	70fb      	strb	r3, [r7, #3]
   1151c:	4613      	mov	r3, r2
   1151e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11520:	78fb      	ldrb	r3, [r7, #3]
   11522:	4619      	mov	r1, r3
   11524:	6878      	ldr	r0, [r7, #4]
   11526:	4b21      	ldr	r3, [pc, #132]	; (115ac <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11528:	4798      	blx	r3
   1152a:	4603      	mov	r3, r0
   1152c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1152e:	78f9      	ldrb	r1, [r7, #3]
   11530:	230a      	movs	r3, #10
   11532:	220a      	movs	r2, #10
   11534:	6878      	ldr	r0, [r7, #4]
   11536:	4c1e      	ldr	r4, [pc, #120]	; (115b0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11538:	47a0      	blx	r4
   1153a:	4603      	mov	r3, r0
   1153c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1153e:	7bfb      	ldrb	r3, [r7, #15]
   11540:	4619      	mov	r1, r3
   11542:	6878      	ldr	r0, [r7, #4]
   11544:	4b1b      	ldr	r3, [pc, #108]	; (115b4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11546:	4798      	blx	r3
   11548:	4603      	mov	r3, r0
   1154a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   1154c:	78bb      	ldrb	r3, [r7, #2]
   1154e:	2b00      	cmp	r3, #0
   11550:	d009      	beq.n	11566 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11552:	7bba      	ldrb	r2, [r7, #14]
   11554:	7b7b      	ldrb	r3, [r7, #13]
   11556:	4619      	mov	r1, r3
   11558:	2301      	movs	r3, #1
   1155a:	408b      	lsls	r3, r1
   1155c:	b2db      	uxtb	r3, r3
   1155e:	4313      	orrs	r3, r2
   11560:	b2db      	uxtb	r3, r3
   11562:	73bb      	strb	r3, [r7, #14]
   11564:	e00a      	b.n	1157c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11566:	7bba      	ldrb	r2, [r7, #14]
   11568:	7b7b      	ldrb	r3, [r7, #13]
   1156a:	4619      	mov	r1, r3
   1156c:	2301      	movs	r3, #1
   1156e:	408b      	lsls	r3, r1
   11570:	b2db      	uxtb	r3, r3
   11572:	43db      	mvns	r3, r3
   11574:	b2db      	uxtb	r3, r3
   11576:	4013      	ands	r3, r2
   11578:	b2db      	uxtb	r3, r3
   1157a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   1157c:	78f9      	ldrb	r1, [r7, #3]
   1157e:	2309      	movs	r3, #9
   11580:	2209      	movs	r2, #9
   11582:	6878      	ldr	r0, [r7, #4]
   11584:	4c0a      	ldr	r4, [pc, #40]	; (115b0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11586:	47a0      	blx	r4
   11588:	4603      	mov	r3, r0
   1158a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   1158c:	7bba      	ldrb	r2, [r7, #14]
   1158e:	7bfb      	ldrb	r3, [r7, #15]
   11590:	4619      	mov	r1, r3
   11592:	6878      	ldr	r0, [r7, #4]
   11594:	4b08      	ldr	r3, [pc, #32]	; (115b8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   11596:	4798      	blx	r3
   11598:	4603      	mov	r3, r0
   1159a:	2b00      	cmp	r3, #0
   1159c:	bf0c      	ite	eq
   1159e:	2301      	moveq	r3, #1
   115a0:	2300      	movne	r3, #0
   115a2:	b2db      	uxtb	r3, r3
}
   115a4:	4618      	mov	r0, r3
   115a6:	3714      	adds	r7, #20
   115a8:	46bd      	mov	sp, r7
   115aa:	bd90      	pop	{r4, r7, pc}
   115ac:	00011283 	.word	0x00011283
   115b0:	000112a1 	.word	0x000112a1
   115b4:	000112d1 	.word	0x000112d1
   115b8:	00011359 	.word	0x00011359

000115bc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   115bc:	b590      	push	{r4, r7, lr}
   115be:	b085      	sub	sp, #20
   115c0:	af02      	add	r7, sp, #8
   115c2:	6078      	str	r0, [r7, #4]
   115c4:	460b      	mov	r3, r1
   115c6:	70fb      	strb	r3, [r7, #3]
   115c8:	4613      	mov	r3, r2
   115ca:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   115cc:	78ba      	ldrb	r2, [r7, #2]
   115ce:	78f9      	ldrb	r1, [r7, #3]
   115d0:	2306      	movs	r3, #6
   115d2:	9300      	str	r3, [sp, #0]
   115d4:	2306      	movs	r3, #6
   115d6:	6878      	ldr	r0, [r7, #4]
   115d8:	4c02      	ldr	r4, [pc, #8]	; (115e4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   115da:	47a0      	blx	r4
}
   115dc:	bf00      	nop
   115de:	370c      	adds	r7, #12
   115e0:	46bd      	mov	sp, r7
   115e2:	bd90      	pop	{r4, r7, pc}
   115e4:	0001144d 	.word	0x0001144d

000115e8 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   115e8:	b580      	push	{r7, lr}
   115ea:	b082      	sub	sp, #8
   115ec:	af00      	add	r7, sp, #0
   115ee:	6078      	str	r0, [r7, #4]
   115f0:	6039      	str	r1, [r7, #0]
   115f2:	687b      	ldr	r3, [r7, #4]
   115f4:	2b01      	cmp	r3, #1
   115f6:	d10d      	bne.n	11614 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   115f8:	683b      	ldr	r3, [r7, #0]
   115fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   115fe:	4293      	cmp	r3, r2
   11600:	d108      	bne.n	11614 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11602:	4906      	ldr	r1, [pc, #24]	; (1161c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11604:	4806      	ldr	r0, [pc, #24]	; (11620 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11606:	4b07      	ldr	r3, [pc, #28]	; (11624 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11608:	4798      	blx	r3
   1160a:	4a07      	ldr	r2, [pc, #28]	; (11628 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1160c:	4907      	ldr	r1, [pc, #28]	; (1162c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1160e:	4804      	ldr	r0, [pc, #16]	; (11620 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11610:	4b07      	ldr	r3, [pc, #28]	; (11630 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11612:	4798      	blx	r3
   11614:	bf00      	nop
   11616:	3708      	adds	r7, #8
   11618:	46bd      	mov	sp, r7
   1161a:	bd80      	pop	{r7, pc}
   1161c:	20002638 	.word	0x20002638
   11620:	200020e8 	.word	0x200020e8
   11624:	00011059 	.word	0x00011059
   11628:	20000000 	.word	0x20000000
   1162c:	00011075 	.word	0x00011075
   11630:	00011a95 	.word	0x00011a95

00011634 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   11634:	b580      	push	{r7, lr}
   11636:	af00      	add	r7, sp, #0
   11638:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1163c:	2001      	movs	r0, #1
   1163e:	4b01      	ldr	r3, [pc, #4]	; (11644 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   11640:	4798      	blx	r3
   11642:	bd80      	pop	{r7, pc}
   11644:	000115e9 	.word	0x000115e9

00011648 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   11648:	b480      	push	{r7}
   1164a:	b083      	sub	sp, #12
   1164c:	af00      	add	r7, sp, #0
   1164e:	6078      	str	r0, [r7, #4]
   11650:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   11652:	687b      	ldr	r3, [r7, #4]
   11654:	683a      	ldr	r2, [r7, #0]
   11656:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   11658:	687b      	ldr	r3, [r7, #4]
   1165a:	68db      	ldr	r3, [r3, #12]
   1165c:	2200      	movs	r2, #0
   1165e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   11660:	4a06      	ldr	r2, [pc, #24]	; (1167c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   11662:	687b      	ldr	r3, [r7, #4]
   11664:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   11666:	687b      	ldr	r3, [r7, #4]
   11668:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1166c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   1166e:	687b      	ldr	r3, [r7, #4]
   11670:	4618      	mov	r0, r3
   11672:	370c      	adds	r7, #12
   11674:	46bd      	mov	sp, r7
   11676:	bc80      	pop	{r7}
   11678:	4770      	bx	lr
   1167a:	bf00      	nop
   1167c:	20002200 	.word	0x20002200

00011680 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   11680:	b480      	push	{r7}
   11682:	b083      	sub	sp, #12
   11684:	af00      	add	r7, sp, #0
   11686:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   11688:	687b      	ldr	r3, [r7, #4]
   1168a:	2200      	movs	r2, #0
   1168c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1168e:	687b      	ldr	r3, [r7, #4]
   11690:	4618      	mov	r0, r3
   11692:	370c      	adds	r7, #12
   11694:	46bd      	mov	sp, r7
   11696:	bc80      	pop	{r7}
   11698:	4770      	bx	lr
	...

0001169c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   1169c:	b580      	push	{r7, lr}
   1169e:	b086      	sub	sp, #24
   116a0:	af00      	add	r7, sp, #0
   116a2:	60f8      	str	r0, [r7, #12]
   116a4:	60b9      	str	r1, [r7, #8]
   116a6:	607a      	str	r2, [r7, #4]
   116a8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   116aa:	68b9      	ldr	r1, [r7, #8]
   116ac:	68f8      	ldr	r0, [r7, #12]
   116ae:	4b0e      	ldr	r3, [pc, #56]	; (116e8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   116b0:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   116b2:	68fb      	ldr	r3, [r7, #12]
   116b4:	699b      	ldr	r3, [r3, #24]
   116b6:	687a      	ldr	r2, [r7, #4]
   116b8:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   116ba:	68fb      	ldr	r3, [r7, #12]
   116bc:	699b      	ldr	r3, [r3, #24]
   116be:	68ba      	ldr	r2, [r7, #8]
   116c0:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   116c2:	68fb      	ldr	r3, [r7, #12]
   116c4:	699b      	ldr	r3, [r3, #24]
   116c6:	78fa      	ldrb	r2, [r7, #3]
   116c8:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   116ca:	68fb      	ldr	r3, [r7, #12]
   116cc:	68da      	ldr	r2, [r3, #12]
   116ce:	68fb      	ldr	r3, [r7, #12]
   116d0:	699b      	ldr	r3, [r3, #24]
   116d2:	4619      	mov	r1, r3
   116d4:	4610      	mov	r0, r2
   116d6:	4b05      	ldr	r3, [pc, #20]	; (116ec <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   116d8:	4798      	blx	r3
   116da:	6178      	str	r0, [r7, #20]
	
	return status;
   116dc:	697b      	ldr	r3, [r7, #20]
}
   116de:	4618      	mov	r0, r3
   116e0:	3718      	adds	r7, #24
   116e2:	46bd      	mov	sp, r7
   116e4:	bd80      	pop	{r7, pc}
   116e6:	bf00      	nop
   116e8:	00011805 	.word	0x00011805
   116ec:	000065f1 	.word	0x000065f1

000116f0 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   116f0:	b580      	push	{r7, lr}
   116f2:	b082      	sub	sp, #8
   116f4:	af00      	add	r7, sp, #0
   116f6:	6078      	str	r0, [r7, #4]
   116f8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   116fa:	6839      	ldr	r1, [r7, #0]
   116fc:	6878      	ldr	r0, [r7, #4]
   116fe:	4b0f      	ldr	r3, [pc, #60]	; (1173c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   11700:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   11702:	687b      	ldr	r3, [r7, #4]
   11704:	68db      	ldr	r3, [r3, #12]
   11706:	f103 0218 	add.w	r2, r3, #24
   1170a:	687b      	ldr	r3, [r7, #4]
   1170c:	699b      	ldr	r3, [r3, #24]
   1170e:	4619      	mov	r1, r3
   11710:	4610      	mov	r0, r2
   11712:	4b0b      	ldr	r3, [pc, #44]	; (11740 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   11714:	4798      	blx	r3
   11716:	4603      	mov	r3, r0
   11718:	2b00      	cmp	r3, #0
   1171a:	d007      	beq.n	1172c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   1171c:	687b      	ldr	r3, [r7, #4]
   1171e:	68da      	ldr	r2, [r3, #12]
   11720:	687b      	ldr	r3, [r7, #4]
   11722:	699b      	ldr	r3, [r3, #24]
   11724:	4619      	mov	r1, r3
   11726:	4610      	mov	r0, r2
   11728:	4b06      	ldr	r3, [pc, #24]	; (11744 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   1172a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   1172c:	687b      	ldr	r3, [r7, #4]
   1172e:	699b      	ldr	r3, [r3, #24]
   11730:	2200      	movs	r2, #0
   11732:	60da      	str	r2, [r3, #12]
}
   11734:	bf00      	nop
   11736:	3708      	adds	r7, #8
   11738:	46bd      	mov	sp, r7
   1173a:	bd80      	pop	{r7, pc}
   1173c:	00011885 	.word	0x00011885
   11740:	00007289 	.word	0x00007289
   11744:	000066f5 	.word	0x000066f5

00011748 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   11748:	b590      	push	{r4, r7, lr}
   1174a:	b087      	sub	sp, #28
   1174c:	af00      	add	r7, sp, #0
   1174e:	60f8      	str	r0, [r7, #12]
   11750:	60b9      	str	r1, [r7, #8]
   11752:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   11754:	2300      	movs	r3, #0
   11756:	687a      	ldr	r2, [r7, #4]
   11758:	68b9      	ldr	r1, [r7, #8]
   1175a:	68f8      	ldr	r0, [r7, #12]
   1175c:	4c0c      	ldr	r4, [pc, #48]	; (11790 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   1175e:	47a0      	blx	r4
   11760:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   11762:	68fb      	ldr	r3, [r7, #12]
   11764:	68db      	ldr	r3, [r3, #12]
   11766:	681b      	ldr	r3, [r3, #0]
   11768:	699b      	ldr	r3, [r3, #24]
   1176a:	68fa      	ldr	r2, [r7, #12]
   1176c:	68d2      	ldr	r2, [r2, #12]
   1176e:	3204      	adds	r2, #4
   11770:	4610      	mov	r0, r2
   11772:	4798      	blx	r3
   11774:	4603      	mov	r3, r0
   11776:	2b00      	cmp	r3, #0
   11778:	d105      	bne.n	11786 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   1177a:	68fb      	ldr	r3, [r7, #12]
   1177c:	68db      	ldr	r3, [r3, #12]
   1177e:	4618      	mov	r0, r3
   11780:	4b04      	ldr	r3, [pc, #16]	; (11794 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   11782:	4798      	blx	r3
   11784:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   11786:	697b      	ldr	r3, [r7, #20]
}
   11788:	4618      	mov	r0, r3
   1178a:	371c      	adds	r7, #28
   1178c:	46bd      	mov	sp, r7
   1178e:	bd90      	pop	{r4, r7, pc}
   11790:	0001169d 	.word	0x0001169d
   11794:	00006589 	.word	0x00006589

00011798 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   11798:	b480      	push	{r7}
   1179a:	b085      	sub	sp, #20
   1179c:	af00      	add	r7, sp, #0
   1179e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   117a0:	2300      	movs	r3, #0
   117a2:	73fb      	strb	r3, [r7, #15]
   117a4:	7bfb      	ldrb	r3, [r7, #15]
   117a6:	2b1f      	cmp	r3, #31
   117a8:	dc23      	bgt.n	117f2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   117aa:	687b      	ldr	r3, [r7, #4]
   117ac:	7f1a      	ldrb	r2, [r3, #28]
   117ae:	7bfb      	ldrb	r3, [r7, #15]
   117b0:	4413      	add	r3, r2
   117b2:	b2db      	uxtb	r3, r3
   117b4:	f003 031f 	and.w	r3, r3, #31
   117b8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   117ba:	7bba      	ldrb	r2, [r7, #14]
   117bc:	4910      	ldr	r1, [pc, #64]	; (11800 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   117be:	4613      	mov	r3, r2
   117c0:	009b      	lsls	r3, r3, #2
   117c2:	4413      	add	r3, r2
   117c4:	009b      	lsls	r3, r3, #2
   117c6:	440b      	add	r3, r1
   117c8:	330c      	adds	r3, #12
   117ca:	681b      	ldr	r3, [r3, #0]
   117cc:	2b00      	cmp	r3, #0
   117ce:	d10c      	bne.n	117ea <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   117d0:	7bba      	ldrb	r2, [r7, #14]
   117d2:	4613      	mov	r3, r2
   117d4:	009b      	lsls	r3, r3, #2
   117d6:	4413      	add	r3, r2
   117d8:	009b      	lsls	r3, r3, #2
   117da:	4a09      	ldr	r2, [pc, #36]	; (11800 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   117dc:	441a      	add	r2, r3
   117de:	687b      	ldr	r3, [r7, #4]
   117e0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   117e2:	687b      	ldr	r3, [r7, #4]
   117e4:	7bba      	ldrb	r2, [r7, #14]
   117e6:	771a      	strb	r2, [r3, #28]
			return;
   117e8:	e006      	b.n	117f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   117ea:	7bfb      	ldrb	r3, [r7, #15]
   117ec:	3301      	adds	r3, #1
   117ee:	73fb      	strb	r3, [r7, #15]
   117f0:	e7d8      	b.n	117a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   117f2:	687b      	ldr	r3, [r7, #4]
   117f4:	4a02      	ldr	r2, [pc, #8]	; (11800 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   117f6:	619a      	str	r2, [r3, #24]

}
   117f8:	3714      	adds	r7, #20
   117fa:	46bd      	mov	sp, r7
   117fc:	bc80      	pop	{r7}
   117fe:	4770      	bx	lr
   11800:	20002204 	.word	0x20002204

00011804 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   11804:	b580      	push	{r7, lr}
   11806:	b084      	sub	sp, #16
   11808:	af00      	add	r7, sp, #0
   1180a:	6078      	str	r0, [r7, #4]
   1180c:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1180e:	2300      	movs	r3, #0
   11810:	73fb      	strb	r3, [r7, #15]
   11812:	7bfb      	ldrb	r3, [r7, #15]
   11814:	2b1f      	cmp	r3, #31
   11816:	dc28      	bgt.n	1186a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   11818:	687b      	ldr	r3, [r7, #4]
   1181a:	7f1a      	ldrb	r2, [r3, #28]
   1181c:	7bfb      	ldrb	r3, [r7, #15]
   1181e:	4413      	add	r3, r2
   11820:	b2db      	uxtb	r3, r3
   11822:	f003 031f 	and.w	r3, r3, #31
   11826:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   11828:	7bba      	ldrb	r2, [r7, #14]
   1182a:	4913      	ldr	r1, [pc, #76]	; (11878 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   1182c:	4613      	mov	r3, r2
   1182e:	009b      	lsls	r3, r3, #2
   11830:	4413      	add	r3, r2
   11832:	009b      	lsls	r3, r3, #2
   11834:	440b      	add	r3, r1
   11836:	330c      	adds	r3, #12
   11838:	681a      	ldr	r2, [r3, #0]
   1183a:	683b      	ldr	r3, [r7, #0]
   1183c:	429a      	cmp	r2, r3
   1183e:	d110      	bne.n	11862 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   11840:	6839      	ldr	r1, [r7, #0]
   11842:	6878      	ldr	r0, [r7, #4]
   11844:	4b0d      	ldr	r3, [pc, #52]	; (1187c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   11846:	4798      	blx	r3
			task=&taskArray[j];
   11848:	7bba      	ldrb	r2, [r7, #14]
   1184a:	4613      	mov	r3, r2
   1184c:	009b      	lsls	r3, r3, #2
   1184e:	4413      	add	r3, r2
   11850:	009b      	lsls	r3, r3, #2
   11852:	4a09      	ldr	r2, [pc, #36]	; (11878 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   11854:	441a      	add	r2, r3
   11856:	687b      	ldr	r3, [r7, #4]
   11858:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   1185a:	687b      	ldr	r3, [r7, #4]
   1185c:	7bba      	ldrb	r2, [r7, #14]
   1185e:	771a      	strb	r2, [r3, #28]
			return;
   11860:	e006      	b.n	11870 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   11862:	7bfb      	ldrb	r3, [r7, #15]
   11864:	3301      	adds	r3, #1
   11866:	73fb      	strb	r3, [r7, #15]
   11868:	e7d3      	b.n	11812 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   1186a:	6878      	ldr	r0, [r7, #4]
   1186c:	4b04      	ldr	r3, [pc, #16]	; (11880 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   1186e:	4798      	blx	r3
	//task=&taskArray[0];

}
   11870:	3710      	adds	r7, #16
   11872:	46bd      	mov	sp, r7
   11874:	bd80      	pop	{r7, pc}
   11876:	bf00      	nop
   11878:	20002204 	.word	0x20002204
   1187c:	000116f1 	.word	0x000116f1
   11880:	00011799 	.word	0x00011799

00011884 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   11884:	b480      	push	{r7}
   11886:	b085      	sub	sp, #20
   11888:	af00      	add	r7, sp, #0
   1188a:	6078      	str	r0, [r7, #4]
   1188c:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1188e:	2300      	movs	r3, #0
   11890:	73fb      	strb	r3, [r7, #15]
   11892:	7bfb      	ldrb	r3, [r7, #15]
   11894:	2b1f      	cmp	r3, #31
   11896:	dc19      	bgt.n	118cc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   11898:	7bfa      	ldrb	r2, [r7, #15]
   1189a:	490f      	ldr	r1, [pc, #60]	; (118d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   1189c:	4613      	mov	r3, r2
   1189e:	009b      	lsls	r3, r3, #2
   118a0:	4413      	add	r3, r2
   118a2:	009b      	lsls	r3, r3, #2
   118a4:	440b      	add	r3, r1
   118a6:	330c      	adds	r3, #12
   118a8:	681a      	ldr	r2, [r3, #0]
   118aa:	683b      	ldr	r3, [r7, #0]
   118ac:	429a      	cmp	r2, r3
   118ae:	d109      	bne.n	118c4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   118b0:	7bfa      	ldrb	r2, [r7, #15]
   118b2:	4613      	mov	r3, r2
   118b4:	009b      	lsls	r3, r3, #2
   118b6:	4413      	add	r3, r2
   118b8:	009b      	lsls	r3, r3, #2
   118ba:	4a07      	ldr	r2, [pc, #28]	; (118d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   118bc:	441a      	add	r2, r3
   118be:	687b      	ldr	r3, [r7, #4]
   118c0:	619a      	str	r2, [r3, #24]
			return;
   118c2:	e004      	b.n	118ce <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   118c4:	7bfb      	ldrb	r3, [r7, #15]
   118c6:	3301      	adds	r3, #1
   118c8:	73fb      	strb	r3, [r7, #15]
   118ca:	e7e2      	b.n	11892 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   118cc:	bf00      	nop
}
   118ce:	3714      	adds	r7, #20
   118d0:	46bd      	mov	sp, r7
   118d2:	bc80      	pop	{r7}
   118d4:	4770      	bx	lr
   118d6:	bf00      	nop
   118d8:	20002204 	.word	0x20002204

000118dc <_Z41__static_initialization_and_destruction_0ii>:
   118dc:	b580      	push	{r7, lr}
   118de:	b082      	sub	sp, #8
   118e0:	af00      	add	r7, sp, #0
   118e2:	6078      	str	r0, [r7, #4]
   118e4:	6039      	str	r1, [r7, #0]
   118e6:	687b      	ldr	r3, [r7, #4]
   118e8:	2b01      	cmp	r3, #1
   118ea:	d14c      	bne.n	11986 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   118ec:	683b      	ldr	r3, [r7, #0]
   118ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   118f2:	4293      	cmp	r3, r2
   118f4:	d147      	bne.n	11986 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   118f6:	4926      	ldr	r1, [pc, #152]	; (11990 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   118f8:	4826      	ldr	r0, [pc, #152]	; (11994 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   118fa:	4b27      	ldr	r3, [pc, #156]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   118fc:	4798      	blx	r3
   118fe:	4a27      	ldr	r2, [pc, #156]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11900:	4927      	ldr	r1, [pc, #156]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11902:	4824      	ldr	r0, [pc, #144]	; (11994 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   11904:	4b27      	ldr	r3, [pc, #156]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11906:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   11908:	4927      	ldr	r1, [pc, #156]	; (119a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1190a:	4828      	ldr	r0, [pc, #160]	; (119ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1190c:	4b22      	ldr	r3, [pc, #136]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1190e:	4798      	blx	r3
   11910:	4a22      	ldr	r2, [pc, #136]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11912:	4923      	ldr	r1, [pc, #140]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11914:	4825      	ldr	r0, [pc, #148]	; (119ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11916:	4b23      	ldr	r3, [pc, #140]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11918:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1191a:	4925      	ldr	r1, [pc, #148]	; (119b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1191c:	4825      	ldr	r0, [pc, #148]	; (119b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1191e:	4b1e      	ldr	r3, [pc, #120]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11920:	4798      	blx	r3
   11922:	4a1e      	ldr	r2, [pc, #120]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11924:	491e      	ldr	r1, [pc, #120]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11926:	4823      	ldr	r0, [pc, #140]	; (119b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11928:	4b1e      	ldr	r3, [pc, #120]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1192a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1192c:	4922      	ldr	r1, [pc, #136]	; (119b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1192e:	4823      	ldr	r0, [pc, #140]	; (119bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11930:	4b19      	ldr	r3, [pc, #100]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11932:	4798      	blx	r3
   11934:	4a19      	ldr	r2, [pc, #100]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11936:	491a      	ldr	r1, [pc, #104]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11938:	4820      	ldr	r0, [pc, #128]	; (119bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1193a:	4b1a      	ldr	r3, [pc, #104]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1193c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1193e:	4920      	ldr	r1, [pc, #128]	; (119c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   11940:	4820      	ldr	r0, [pc, #128]	; (119c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11942:	4b15      	ldr	r3, [pc, #84]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11944:	4798      	blx	r3
   11946:	4a15      	ldr	r2, [pc, #84]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11948:	4915      	ldr	r1, [pc, #84]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1194a:	481e      	ldr	r0, [pc, #120]	; (119c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1194c:	4b15      	ldr	r3, [pc, #84]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1194e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11950:	491d      	ldr	r1, [pc, #116]	; (119c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   11952:	481e      	ldr	r0, [pc, #120]	; (119cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11954:	4b10      	ldr	r3, [pc, #64]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11956:	4798      	blx	r3
   11958:	4a10      	ldr	r2, [pc, #64]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1195a:	4911      	ldr	r1, [pc, #68]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1195c:	481b      	ldr	r0, [pc, #108]	; (119cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1195e:	4b11      	ldr	r3, [pc, #68]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11960:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11962:	491b      	ldr	r1, [pc, #108]	; (119d0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11964:	481b      	ldr	r0, [pc, #108]	; (119d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11966:	4b0c      	ldr	r3, [pc, #48]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11968:	4798      	blx	r3
   1196a:	4a0c      	ldr	r2, [pc, #48]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1196c:	490c      	ldr	r1, [pc, #48]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1196e:	4819      	ldr	r0, [pc, #100]	; (119d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11970:	4b0c      	ldr	r3, [pc, #48]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11972:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11974:	4918      	ldr	r1, [pc, #96]	; (119d8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   11976:	4819      	ldr	r0, [pc, #100]	; (119dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11978:	4b07      	ldr	r3, [pc, #28]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1197a:	4798      	blx	r3
   1197c:	4a07      	ldr	r2, [pc, #28]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1197e:	4908      	ldr	r1, [pc, #32]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11980:	4816      	ldr	r0, [pc, #88]	; (119dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11982:	4b08      	ldr	r3, [pc, #32]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11984:	4798      	blx	r3
   11986:	bf00      	nop
   11988:	3708      	adds	r7, #8
   1198a:	46bd      	mov	sp, r7
   1198c:	bd80      	pop	{r7, pc}
   1198e:	bf00      	nop
   11990:	20002508 	.word	0x20002508
   11994:	20002100 	.word	0x20002100
   11998:	00011649 	.word	0x00011649
   1199c:	20000000 	.word	0x20000000
   119a0:	00011681 	.word	0x00011681
   119a4:	00011a95 	.word	0x00011a95
   119a8:	2000259c 	.word	0x2000259c
   119ac:	20002120 	.word	0x20002120
   119b0:	200026c0 	.word	0x200026c0
   119b4:	20002140 	.word	0x20002140
   119b8:	200025bc 	.word	0x200025bc
   119bc:	20002160 	.word	0x20002160
   119c0:	20002680 	.word	0x20002680
   119c4:	20002180 	.word	0x20002180
   119c8:	200026a0 	.word	0x200026a0
   119cc:	200021a0 	.word	0x200021a0
   119d0:	20002578 	.word	0x20002578
   119d4:	200021c0 	.word	0x200021c0
   119d8:	20002618 	.word	0x20002618
   119dc:	200021e0 	.word	0x200021e0

000119e0 <_GLOBAL__sub_I_ptrTimerClass>:
   119e0:	b580      	push	{r7, lr}
   119e2:	af00      	add	r7, sp, #0
   119e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   119e8:	2001      	movs	r0, #1
   119ea:	4b01      	ldr	r3, [pc, #4]	; (119f0 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   119ec:	4798      	blx	r3
   119ee:	bd80      	pop	{r7, pc}
   119f0:	000118dd 	.word	0x000118dd

000119f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   119f4:	b580      	push	{r7, lr}
   119f6:	b084      	sub	sp, #16
   119f8:	af00      	add	r7, sp, #0
   119fa:	60f8      	str	r0, [r7, #12]
   119fc:	60b9      	str	r1, [r7, #8]
   119fe:	4613      	mov	r3, r2
   11a00:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11a02:	68fb      	ldr	r3, [r7, #12]
   11a04:	2b00      	cmp	r3, #0
   11a06:	d004      	beq.n	11a12 <io_write+0x1e>
   11a08:	68bb      	ldr	r3, [r7, #8]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d001      	beq.n	11a12 <io_write+0x1e>
   11a0e:	2301      	movs	r3, #1
   11a10:	e000      	b.n	11a14 <io_write+0x20>
   11a12:	2300      	movs	r3, #0
   11a14:	f003 0301 	and.w	r3, r3, #1
   11a18:	b2db      	uxtb	r3, r3
   11a1a:	2234      	movs	r2, #52	; 0x34
   11a1c:	4907      	ldr	r1, [pc, #28]	; (11a3c <io_write+0x48>)
   11a1e:	4618      	mov	r0, r3
   11a20:	4b07      	ldr	r3, [pc, #28]	; (11a40 <io_write+0x4c>)
   11a22:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11a24:	68fb      	ldr	r3, [r7, #12]
   11a26:	681b      	ldr	r3, [r3, #0]
   11a28:	88fa      	ldrh	r2, [r7, #6]
   11a2a:	68b9      	ldr	r1, [r7, #8]
   11a2c:	68f8      	ldr	r0, [r7, #12]
   11a2e:	4798      	blx	r3
   11a30:	4603      	mov	r3, r0
}
   11a32:	4618      	mov	r0, r3
   11a34:	3710      	adds	r7, #16
   11a36:	46bd      	mov	sp, r7
   11a38:	bd80      	pop	{r7, pc}
   11a3a:	bf00      	nop
   11a3c:	00012cb4 	.word	0x00012cb4
   11a40:	00007261 	.word	0x00007261

00011a44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   11a44:	b580      	push	{r7, lr}
   11a46:	b084      	sub	sp, #16
   11a48:	af00      	add	r7, sp, #0
   11a4a:	60f8      	str	r0, [r7, #12]
   11a4c:	60b9      	str	r1, [r7, #8]
   11a4e:	4613      	mov	r3, r2
   11a50:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11a52:	68fb      	ldr	r3, [r7, #12]
   11a54:	2b00      	cmp	r3, #0
   11a56:	d004      	beq.n	11a62 <io_read+0x1e>
   11a58:	68bb      	ldr	r3, [r7, #8]
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	d001      	beq.n	11a62 <io_read+0x1e>
   11a5e:	2301      	movs	r3, #1
   11a60:	e000      	b.n	11a64 <io_read+0x20>
   11a62:	2300      	movs	r3, #0
   11a64:	f003 0301 	and.w	r3, r3, #1
   11a68:	b2db      	uxtb	r3, r3
   11a6a:	223d      	movs	r2, #61	; 0x3d
   11a6c:	4907      	ldr	r1, [pc, #28]	; (11a8c <io_read+0x48>)
   11a6e:	4618      	mov	r0, r3
   11a70:	4b07      	ldr	r3, [pc, #28]	; (11a90 <io_read+0x4c>)
   11a72:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   11a74:	68fb      	ldr	r3, [r7, #12]
   11a76:	685b      	ldr	r3, [r3, #4]
   11a78:	88fa      	ldrh	r2, [r7, #6]
   11a7a:	68b9      	ldr	r1, [r7, #8]
   11a7c:	68f8      	ldr	r0, [r7, #12]
   11a7e:	4798      	blx	r3
   11a80:	4603      	mov	r3, r0
}
   11a82:	4618      	mov	r0, r3
   11a84:	3710      	adds	r7, #16
   11a86:	46bd      	mov	sp, r7
   11a88:	bd80      	pop	{r7, pc}
   11a8a:	bf00      	nop
   11a8c:	00012cb4 	.word	0x00012cb4
   11a90:	00007261 	.word	0x00007261

00011a94 <__aeabi_atexit>:
   11a94:	460b      	mov	r3, r1
   11a96:	4601      	mov	r1, r0
   11a98:	4618      	mov	r0, r3
   11a9a:	f000 b801 	b.w	11aa0 <__cxa_atexit>
   11a9e:	bf00      	nop

00011aa0 <__cxa_atexit>:
   11aa0:	4613      	mov	r3, r2
   11aa2:	460a      	mov	r2, r1
   11aa4:	4601      	mov	r1, r0
   11aa6:	2002      	movs	r0, #2
   11aa8:	f000 b91e 	b.w	11ce8 <__register_exitproc>

00011aac <ffs>:
   11aac:	b140      	cbz	r0, 11ac0 <ffs+0x14>
   11aae:	2300      	movs	r3, #0
   11ab0:	fa40 f103 	asr.w	r1, r0, r3
   11ab4:	1c5a      	adds	r2, r3, #1
   11ab6:	07c9      	lsls	r1, r1, #31
   11ab8:	4613      	mov	r3, r2
   11aba:	d5f9      	bpl.n	11ab0 <ffs+0x4>
   11abc:	4610      	mov	r0, r2
   11abe:	4770      	bx	lr
   11ac0:	4602      	mov	r2, r0
   11ac2:	4610      	mov	r0, r2
   11ac4:	4770      	bx	lr
   11ac6:	bf00      	nop

00011ac8 <__libc_init_array>:
   11ac8:	b570      	push	{r4, r5, r6, lr}
   11aca:	4e0f      	ldr	r6, [pc, #60]	; (11b08 <__libc_init_array+0x40>)
   11acc:	4d0f      	ldr	r5, [pc, #60]	; (11b0c <__libc_init_array+0x44>)
   11ace:	1b76      	subs	r6, r6, r5
   11ad0:	10b6      	asrs	r6, r6, #2
   11ad2:	bf18      	it	ne
   11ad4:	2400      	movne	r4, #0
   11ad6:	d005      	beq.n	11ae4 <__libc_init_array+0x1c>
   11ad8:	3401      	adds	r4, #1
   11ada:	f855 3b04 	ldr.w	r3, [r5], #4
   11ade:	4798      	blx	r3
   11ae0:	42a6      	cmp	r6, r4
   11ae2:	d1f9      	bne.n	11ad8 <__libc_init_array+0x10>
   11ae4:	4e0a      	ldr	r6, [pc, #40]	; (11b10 <__libc_init_array+0x48>)
   11ae6:	4d0b      	ldr	r5, [pc, #44]	; (11b14 <__libc_init_array+0x4c>)
   11ae8:	1b76      	subs	r6, r6, r5
   11aea:	f001 f8ef 	bl	12ccc <_init>
   11aee:	10b6      	asrs	r6, r6, #2
   11af0:	bf18      	it	ne
   11af2:	2400      	movne	r4, #0
   11af4:	d006      	beq.n	11b04 <__libc_init_array+0x3c>
   11af6:	3401      	adds	r4, #1
   11af8:	f855 3b04 	ldr.w	r3, [r5], #4
   11afc:	4798      	blx	r3
   11afe:	42a6      	cmp	r6, r4
   11b00:	d1f9      	bne.n	11af6 <__libc_init_array+0x2e>
   11b02:	bd70      	pop	{r4, r5, r6, pc}
   11b04:	bd70      	pop	{r4, r5, r6, pc}
   11b06:	bf00      	nop
   11b08:	00012cd8 	.word	0x00012cd8
   11b0c:	00012cd8 	.word	0x00012cd8
   11b10:	00012cfc 	.word	0x00012cfc
   11b14:	00012cd8 	.word	0x00012cd8

00011b18 <memcpy>:
   11b18:	4684      	mov	ip, r0
   11b1a:	ea41 0300 	orr.w	r3, r1, r0
   11b1e:	f013 0303 	ands.w	r3, r3, #3
   11b22:	d16d      	bne.n	11c00 <memcpy+0xe8>
   11b24:	3a40      	subs	r2, #64	; 0x40
   11b26:	d341      	bcc.n	11bac <memcpy+0x94>
   11b28:	f851 3b04 	ldr.w	r3, [r1], #4
   11b2c:	f840 3b04 	str.w	r3, [r0], #4
   11b30:	f851 3b04 	ldr.w	r3, [r1], #4
   11b34:	f840 3b04 	str.w	r3, [r0], #4
   11b38:	f851 3b04 	ldr.w	r3, [r1], #4
   11b3c:	f840 3b04 	str.w	r3, [r0], #4
   11b40:	f851 3b04 	ldr.w	r3, [r1], #4
   11b44:	f840 3b04 	str.w	r3, [r0], #4
   11b48:	f851 3b04 	ldr.w	r3, [r1], #4
   11b4c:	f840 3b04 	str.w	r3, [r0], #4
   11b50:	f851 3b04 	ldr.w	r3, [r1], #4
   11b54:	f840 3b04 	str.w	r3, [r0], #4
   11b58:	f851 3b04 	ldr.w	r3, [r1], #4
   11b5c:	f840 3b04 	str.w	r3, [r0], #4
   11b60:	f851 3b04 	ldr.w	r3, [r1], #4
   11b64:	f840 3b04 	str.w	r3, [r0], #4
   11b68:	f851 3b04 	ldr.w	r3, [r1], #4
   11b6c:	f840 3b04 	str.w	r3, [r0], #4
   11b70:	f851 3b04 	ldr.w	r3, [r1], #4
   11b74:	f840 3b04 	str.w	r3, [r0], #4
   11b78:	f851 3b04 	ldr.w	r3, [r1], #4
   11b7c:	f840 3b04 	str.w	r3, [r0], #4
   11b80:	f851 3b04 	ldr.w	r3, [r1], #4
   11b84:	f840 3b04 	str.w	r3, [r0], #4
   11b88:	f851 3b04 	ldr.w	r3, [r1], #4
   11b8c:	f840 3b04 	str.w	r3, [r0], #4
   11b90:	f851 3b04 	ldr.w	r3, [r1], #4
   11b94:	f840 3b04 	str.w	r3, [r0], #4
   11b98:	f851 3b04 	ldr.w	r3, [r1], #4
   11b9c:	f840 3b04 	str.w	r3, [r0], #4
   11ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   11ba4:	f840 3b04 	str.w	r3, [r0], #4
   11ba8:	3a40      	subs	r2, #64	; 0x40
   11baa:	d2bd      	bcs.n	11b28 <memcpy+0x10>
   11bac:	3230      	adds	r2, #48	; 0x30
   11bae:	d311      	bcc.n	11bd4 <memcpy+0xbc>
   11bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   11bb4:	f840 3b04 	str.w	r3, [r0], #4
   11bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   11bbc:	f840 3b04 	str.w	r3, [r0], #4
   11bc0:	f851 3b04 	ldr.w	r3, [r1], #4
   11bc4:	f840 3b04 	str.w	r3, [r0], #4
   11bc8:	f851 3b04 	ldr.w	r3, [r1], #4
   11bcc:	f840 3b04 	str.w	r3, [r0], #4
   11bd0:	3a10      	subs	r2, #16
   11bd2:	d2ed      	bcs.n	11bb0 <memcpy+0x98>
   11bd4:	320c      	adds	r2, #12
   11bd6:	d305      	bcc.n	11be4 <memcpy+0xcc>
   11bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   11bdc:	f840 3b04 	str.w	r3, [r0], #4
   11be0:	3a04      	subs	r2, #4
   11be2:	d2f9      	bcs.n	11bd8 <memcpy+0xc0>
   11be4:	3204      	adds	r2, #4
   11be6:	d008      	beq.n	11bfa <memcpy+0xe2>
   11be8:	07d2      	lsls	r2, r2, #31
   11bea:	bf1c      	itt	ne
   11bec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11bf0:	f800 3b01 	strbne.w	r3, [r0], #1
   11bf4:	d301      	bcc.n	11bfa <memcpy+0xe2>
   11bf6:	880b      	ldrh	r3, [r1, #0]
   11bf8:	8003      	strh	r3, [r0, #0]
   11bfa:	4660      	mov	r0, ip
   11bfc:	4770      	bx	lr
   11bfe:	bf00      	nop
   11c00:	2a08      	cmp	r2, #8
   11c02:	d313      	bcc.n	11c2c <memcpy+0x114>
   11c04:	078b      	lsls	r3, r1, #30
   11c06:	d08d      	beq.n	11b24 <memcpy+0xc>
   11c08:	f010 0303 	ands.w	r3, r0, #3
   11c0c:	d08a      	beq.n	11b24 <memcpy+0xc>
   11c0e:	f1c3 0304 	rsb	r3, r3, #4
   11c12:	1ad2      	subs	r2, r2, r3
   11c14:	07db      	lsls	r3, r3, #31
   11c16:	bf1c      	itt	ne
   11c18:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11c1c:	f800 3b01 	strbne.w	r3, [r0], #1
   11c20:	d380      	bcc.n	11b24 <memcpy+0xc>
   11c22:	f831 3b02 	ldrh.w	r3, [r1], #2
   11c26:	f820 3b02 	strh.w	r3, [r0], #2
   11c2a:	e77b      	b.n	11b24 <memcpy+0xc>
   11c2c:	3a04      	subs	r2, #4
   11c2e:	d3d9      	bcc.n	11be4 <memcpy+0xcc>
   11c30:	3a01      	subs	r2, #1
   11c32:	f811 3b01 	ldrb.w	r3, [r1], #1
   11c36:	f800 3b01 	strb.w	r3, [r0], #1
   11c3a:	d2f9      	bcs.n	11c30 <memcpy+0x118>
   11c3c:	780b      	ldrb	r3, [r1, #0]
   11c3e:	7003      	strb	r3, [r0, #0]
   11c40:	784b      	ldrb	r3, [r1, #1]
   11c42:	7043      	strb	r3, [r0, #1]
   11c44:	788b      	ldrb	r3, [r1, #2]
   11c46:	7083      	strb	r3, [r0, #2]
   11c48:	4660      	mov	r0, ip
   11c4a:	4770      	bx	lr

00011c4c <memset>:
   11c4c:	b470      	push	{r4, r5, r6}
   11c4e:	0786      	lsls	r6, r0, #30
   11c50:	d046      	beq.n	11ce0 <memset+0x94>
   11c52:	1e54      	subs	r4, r2, #1
   11c54:	2a00      	cmp	r2, #0
   11c56:	d041      	beq.n	11cdc <memset+0x90>
   11c58:	b2ca      	uxtb	r2, r1
   11c5a:	4603      	mov	r3, r0
   11c5c:	e002      	b.n	11c64 <memset+0x18>
   11c5e:	f114 34ff 	adds.w	r4, r4, #4294967295
   11c62:	d33b      	bcc.n	11cdc <memset+0x90>
   11c64:	f803 2b01 	strb.w	r2, [r3], #1
   11c68:	079d      	lsls	r5, r3, #30
   11c6a:	d1f8      	bne.n	11c5e <memset+0x12>
   11c6c:	2c03      	cmp	r4, #3
   11c6e:	d92e      	bls.n	11cce <memset+0x82>
   11c70:	b2cd      	uxtb	r5, r1
   11c72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11c76:	2c0f      	cmp	r4, #15
   11c78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11c7c:	d919      	bls.n	11cb2 <memset+0x66>
   11c7e:	f103 0210 	add.w	r2, r3, #16
   11c82:	4626      	mov	r6, r4
   11c84:	3e10      	subs	r6, #16
   11c86:	2e0f      	cmp	r6, #15
   11c88:	f842 5c10 	str.w	r5, [r2, #-16]
   11c8c:	f842 5c0c 	str.w	r5, [r2, #-12]
   11c90:	f842 5c08 	str.w	r5, [r2, #-8]
   11c94:	f842 5c04 	str.w	r5, [r2, #-4]
   11c98:	f102 0210 	add.w	r2, r2, #16
   11c9c:	d8f2      	bhi.n	11c84 <memset+0x38>
   11c9e:	f1a4 0210 	sub.w	r2, r4, #16
   11ca2:	f022 020f 	bic.w	r2, r2, #15
   11ca6:	f004 040f 	and.w	r4, r4, #15
   11caa:	3210      	adds	r2, #16
   11cac:	2c03      	cmp	r4, #3
   11cae:	4413      	add	r3, r2
   11cb0:	d90d      	bls.n	11cce <memset+0x82>
   11cb2:	461e      	mov	r6, r3
   11cb4:	4622      	mov	r2, r4
   11cb6:	3a04      	subs	r2, #4
   11cb8:	2a03      	cmp	r2, #3
   11cba:	f846 5b04 	str.w	r5, [r6], #4
   11cbe:	d8fa      	bhi.n	11cb6 <memset+0x6a>
   11cc0:	1f22      	subs	r2, r4, #4
   11cc2:	f022 0203 	bic.w	r2, r2, #3
   11cc6:	3204      	adds	r2, #4
   11cc8:	4413      	add	r3, r2
   11cca:	f004 0403 	and.w	r4, r4, #3
   11cce:	b12c      	cbz	r4, 11cdc <memset+0x90>
   11cd0:	b2c9      	uxtb	r1, r1
   11cd2:	441c      	add	r4, r3
   11cd4:	f803 1b01 	strb.w	r1, [r3], #1
   11cd8:	429c      	cmp	r4, r3
   11cda:	d1fb      	bne.n	11cd4 <memset+0x88>
   11cdc:	bc70      	pop	{r4, r5, r6}
   11cde:	4770      	bx	lr
   11ce0:	4614      	mov	r4, r2
   11ce2:	4603      	mov	r3, r0
   11ce4:	e7c2      	b.n	11c6c <memset+0x20>
   11ce6:	bf00      	nop

00011ce8 <__register_exitproc>:
   11ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11cec:	4d2c      	ldr	r5, [pc, #176]	; (11da0 <__register_exitproc+0xb8>)
   11cee:	4606      	mov	r6, r0
   11cf0:	6828      	ldr	r0, [r5, #0]
   11cf2:	4698      	mov	r8, r3
   11cf4:	460f      	mov	r7, r1
   11cf6:	4691      	mov	r9, r2
   11cf8:	f000 f882 	bl	11e00 <__retarget_lock_acquire_recursive>
   11cfc:	4b29      	ldr	r3, [pc, #164]	; (11da4 <__register_exitproc+0xbc>)
   11cfe:	681c      	ldr	r4, [r3, #0]
   11d00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11d04:	2b00      	cmp	r3, #0
   11d06:	d03e      	beq.n	11d86 <__register_exitproc+0x9e>
   11d08:	685a      	ldr	r2, [r3, #4]
   11d0a:	2a1f      	cmp	r2, #31
   11d0c:	dc1c      	bgt.n	11d48 <__register_exitproc+0x60>
   11d0e:	f102 0e01 	add.w	lr, r2, #1
   11d12:	b176      	cbz	r6, 11d32 <__register_exitproc+0x4a>
   11d14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   11d18:	2401      	movs	r4, #1
   11d1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11d1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11d22:	4094      	lsls	r4, r2
   11d24:	4320      	orrs	r0, r4
   11d26:	2e02      	cmp	r6, #2
   11d28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11d2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11d30:	d023      	beq.n	11d7a <__register_exitproc+0x92>
   11d32:	3202      	adds	r2, #2
   11d34:	f8c3 e004 	str.w	lr, [r3, #4]
   11d38:	6828      	ldr	r0, [r5, #0]
   11d3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11d3e:	f000 f861 	bl	11e04 <__retarget_lock_release_recursive>
   11d42:	2000      	movs	r0, #0
   11d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d48:	4b17      	ldr	r3, [pc, #92]	; (11da8 <__register_exitproc+0xc0>)
   11d4a:	b30b      	cbz	r3, 11d90 <__register_exitproc+0xa8>
   11d4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11d50:	f3af 8000 	nop.w
   11d54:	4603      	mov	r3, r0
   11d56:	b1d8      	cbz	r0, 11d90 <__register_exitproc+0xa8>
   11d58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11d5c:	6002      	str	r2, [r0, #0]
   11d5e:	2100      	movs	r1, #0
   11d60:	6041      	str	r1, [r0, #4]
   11d62:	460a      	mov	r2, r1
   11d64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   11d68:	f04f 0e01 	mov.w	lr, #1
   11d6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11d70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11d74:	2e00      	cmp	r6, #0
   11d76:	d0dc      	beq.n	11d32 <__register_exitproc+0x4a>
   11d78:	e7cc      	b.n	11d14 <__register_exitproc+0x2c>
   11d7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11d7e:	430c      	orrs	r4, r1
   11d80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11d84:	e7d5      	b.n	11d32 <__register_exitproc+0x4a>
   11d86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   11d8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11d8e:	e7bb      	b.n	11d08 <__register_exitproc+0x20>
   11d90:	6828      	ldr	r0, [r5, #0]
   11d92:	f000 f837 	bl	11e04 <__retarget_lock_release_recursive>
   11d96:	f04f 30ff 	mov.w	r0, #4294967295
   11d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d9e:	bf00      	nop
   11da0:	20000a30 	.word	0x20000a30
   11da4:	00012cc8 	.word	0x00012cc8
   11da8:	00000000 	.word	0x00000000

00011dac <register_fini>:
   11dac:	4b02      	ldr	r3, [pc, #8]	; (11db8 <register_fini+0xc>)
   11dae:	b113      	cbz	r3, 11db6 <register_fini+0xa>
   11db0:	4802      	ldr	r0, [pc, #8]	; (11dbc <register_fini+0x10>)
   11db2:	f000 b805 	b.w	11dc0 <atexit>
   11db6:	4770      	bx	lr
   11db8:	00000000 	.word	0x00000000
   11dbc:	00011dcd 	.word	0x00011dcd

00011dc0 <atexit>:
   11dc0:	2300      	movs	r3, #0
   11dc2:	4601      	mov	r1, r0
   11dc4:	461a      	mov	r2, r3
   11dc6:	4618      	mov	r0, r3
   11dc8:	f7ff bf8e 	b.w	11ce8 <__register_exitproc>

00011dcc <__libc_fini_array>:
   11dcc:	b538      	push	{r3, r4, r5, lr}
   11dce:	4c0a      	ldr	r4, [pc, #40]	; (11df8 <__libc_fini_array+0x2c>)
   11dd0:	4d0a      	ldr	r5, [pc, #40]	; (11dfc <__libc_fini_array+0x30>)
   11dd2:	1b64      	subs	r4, r4, r5
   11dd4:	10a4      	asrs	r4, r4, #2
   11dd6:	d00a      	beq.n	11dee <__libc_fini_array+0x22>
   11dd8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11ddc:	3b01      	subs	r3, #1
   11dde:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11de2:	3c01      	subs	r4, #1
   11de4:	f855 3904 	ldr.w	r3, [r5], #-4
   11de8:	4798      	blx	r3
   11dea:	2c00      	cmp	r4, #0
   11dec:	d1f9      	bne.n	11de2 <__libc_fini_array+0x16>
   11dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11df2:	f000 bf83 	b.w	12cfc <_fini>
   11df6:	bf00      	nop
   11df8:	00012d0c 	.word	0x00012d0c
   11dfc:	00012d08 	.word	0x00012d08

00011e00 <__retarget_lock_acquire_recursive>:
   11e00:	4770      	bx	lr
   11e02:	bf00      	nop

00011e04 <__retarget_lock_release_recursive>:
   11e04:	4770      	bx	lr
   11e06:	bf00      	nop

00011e08 <_ZTV20Compresor_Controller>:
	...
   11e10:	2069 0000                                   i ..

00011e14 <_ZTV28Compressor_CANOpen_Interface>:
	...
   11e1c:	2069 0000                                   i ..

00011e20 <_ZTV13CANOpen_Class>:
	...
   11e28:	2069 0000                                   i ..

00011e2c <_ZTV8CO_Class>:
	...
   11e34:	2069 0000                                   i ..

00011e38 <_ZTV15CO_Driver_Class>:
	...
   11e40:	2069 0000                                   i ..

00011e44 <_ZL13OD_record1018>:
   11e44:	01c8 2000 0005 0000 0001 0000 01cc 2000     ... ........... 
   11e54:	0085 0000 0004 0000 01d0 2000 0085 0000     ........... ....
   11e64:	0004 0000 01d4 2000 0085 0000 0004 0000     ....... ........
   11e74:	01d8 2000 0085 0000 0004 0000               ... ........

00011e80 <_ZL13OD_record1200>:
   11e80:	01e4 2000 0005 0000 0001 0000 01e8 2000     ... ........... 
   11e90:	0085 0000 0004 0000 01ec 2000 0085 0000     ........... ....
   11ea0:	0004 0000                                   ....

00011ea4 <_ZL13OD_record1400>:
   11ea4:	01f0 2000 0005 0000 0001 0000 01f4 2000     ... ........... 
   11eb4:	008d 0000 0004 0000 01f8 2000 000d 0000     ........... ....
   11ec4:	0001 0000                                   ....

00011ec8 <_ZL13OD_record1401>:
   11ec8:	01fc 2000 0005 0000 0001 0000 0200 2000     ... ........... 
   11ed8:	008d 0000 0004 0000 0204 2000 000d 0000     ........... ....
   11ee8:	0001 0000                                   ....

00011eec <_ZL13OD_record1402>:
   11eec:	0208 2000 0005 0000 0001 0000 020c 2000     ... ........... 
   11efc:	008d 0000 0004 0000 0210 2000 000d 0000     ........... ....
   11f0c:	0001 0000                                   ....

00011f10 <_ZL13OD_record1403>:
   11f10:	0214 2000 0005 0000 0001 0000 0218 2000     ... ........... 
   11f20:	008d 0000 0004 0000 021c 2000 000d 0000     ........... ....
   11f30:	0001 0000                                   ....

00011f34 <_ZL13OD_record1600>:
   11f34:	0220 2000 000d 0000 0001 0000 0224 2000      .. ........$.. 
   11f44:	008d 0000 0004 0000 0228 2000 008d 0000     ........(.. ....
   11f54:	0004 0000 022c 2000 008d 0000 0004 0000     ....,.. ........
   11f64:	0230 2000 008d 0000 0004 0000 0234 2000     0.. ........4.. 
   11f74:	008d 0000 0004 0000 0238 2000 008d 0000     ........8.. ....
   11f84:	0004 0000 023c 2000 008d 0000 0004 0000     ....<.. ........
   11f94:	0240 2000 008d 0000 0004 0000               @.. ........

00011fa0 <_ZL13OD_record1601>:
   11fa0:	0244 2000 000d 0000 0001 0000 0248 2000     D.. ........H.. 
   11fb0:	008d 0000 0004 0000 024c 2000 008d 0000     ........L.. ....
   11fc0:	0004 0000 0250 2000 008d 0000 0004 0000     ....P.. ........
   11fd0:	0254 2000 008d 0000 0004 0000 0258 2000     T.. ........X.. 
   11fe0:	008d 0000 0004 0000 025c 2000 008d 0000     ........\.. ....
   11ff0:	0004 0000 0260 2000 008d 0000 0004 0000     ....`.. ........
   12000:	0264 2000 008d 0000 0004 0000               d.. ........

0001200c <_ZL13OD_record1602>:
   1200c:	0268 2000 000d 0000 0001 0000 026c 2000     h.. ........l.. 
   1201c:	008d 0000 0004 0000 0270 2000 008d 0000     ........p.. ....
   1202c:	0004 0000 0274 2000 008d 0000 0004 0000     ....t.. ........
   1203c:	0278 2000 008d 0000 0004 0000 027c 2000     x.. ........|.. 
   1204c:	008d 0000 0004 0000 0280 2000 008d 0000     ........... ....
   1205c:	0004 0000 0284 2000 008d 0000 0004 0000     ....... ........
   1206c:	0288 2000 008d 0000 0004 0000               ... ........

00012078 <_ZL13OD_record1603>:
   12078:	028c 2000 000d 0000 0001 0000 0290 2000     ... ........... 
   12088:	008d 0000 0004 0000 0294 2000 008d 0000     ........... ....
   12098:	0004 0000 0298 2000 008d 0000 0004 0000     ....... ........
   120a8:	029c 2000 008d 0000 0004 0000 02a0 2000     ... ........... 
   120b8:	008d 0000 0004 0000 02a4 2000 008d 0000     ........... ....
   120c8:	0004 0000 02a8 2000 008d 0000 0004 0000     ....... ........
   120d8:	02ac 2000 008d 0000 0004 0000               ... ........

000120e4 <_ZL13OD_record1800>:
   120e4:	02b0 2000 0005 0000 0001 0000 02b4 2000     ... ........... 
   120f4:	008d 0000 0004 0000 02b8 2000 000d 0000     ........... ....
   12104:	0001 0000 02bc 2000 008d 0000 0002 0000     ....... ........
   12114:	02c0 2000 000d 0000 0001 0000 02c4 2000     ... ........... 
   12124:	008d 0000 0002 0000 02c8 2000 000d 0000     ........... ....
   12134:	0001 0000                                   ....

00012138 <_ZL13OD_record1801>:
   12138:	02cc 2000 0005 0000 0001 0000 02d0 2000     ... ........... 
   12148:	008d 0000 0004 0000 02d4 2000 000d 0000     ........... ....
   12158:	0001 0000 02d8 2000 008d 0000 0002 0000     ....... ........
   12168:	02dc 2000 000d 0000 0001 0000 02e0 2000     ... ........... 
   12178:	008d 0000 0002 0000 02e4 2000 000d 0000     ........... ....
   12188:	0001 0000                                   ....

0001218c <_ZL13OD_record1802>:
   1218c:	02e8 2000 0005 0000 0001 0000 02ec 2000     ... ........... 
   1219c:	008d 0000 0004 0000 02f0 2000 000d 0000     ........... ....
   121ac:	0001 0000 02f4 2000 008d 0000 0002 0000     ....... ........
   121bc:	02f8 2000 000d 0000 0001 0000 02fc 2000     ... ........... 
   121cc:	008d 0000 0002 0000 0300 2000 000d 0000     ........... ....
   121dc:	0001 0000                                   ....

000121e0 <_ZL13OD_record1803>:
   121e0:	0304 2000 0005 0000 0001 0000 0308 2000     ... ........... 
   121f0:	008d 0000 0004 0000 030c 2000 000d 0000     ........... ....
   12200:	0001 0000 0310 2000 008d 0000 0002 0000     ....... ........
   12210:	0314 2000 000d 0000 0001 0000 0318 2000     ... ........... 
   12220:	008d 0000 0002 0000 031c 2000 000d 0000     ........... ....
   12230:	0001 0000                                   ....

00012234 <_ZL13OD_record1A00>:
   12234:	0320 2000 000d 0000 0001 0000 0324 2000      .. ........$.. 
   12244:	008d 0000 0004 0000 0328 2000 008d 0000     ........(.. ....
   12254:	0004 0000 032c 2000 008d 0000 0004 0000     ....,.. ........
   12264:	0330 2000 008d 0000 0004 0000 0334 2000     0.. ........4.. 
   12274:	008d 0000 0004 0000 0338 2000 008d 0000     ........8.. ....
   12284:	0004 0000 033c 2000 008d 0000 0004 0000     ....<.. ........
   12294:	0340 2000 008d 0000 0004 0000               @.. ........

000122a0 <_ZL13OD_record1A01>:
   122a0:	0344 2000 000d 0000 0001 0000 0348 2000     D.. ........H.. 
   122b0:	008d 0000 0004 0000 034c 2000 008d 0000     ........L.. ....
   122c0:	0004 0000 0350 2000 008d 0000 0004 0000     ....P.. ........
   122d0:	0354 2000 008d 0000 0004 0000 0358 2000     T.. ........X.. 
   122e0:	008d 0000 0004 0000 035c 2000 008d 0000     ........\.. ....
   122f0:	0004 0000 0360 2000 008d 0000 0004 0000     ....`.. ........
   12300:	0364 2000 008d 0000 0004 0000               d.. ........

0001230c <_ZL13OD_record1A02>:
   1230c:	0368 2000 000d 0000 0001 0000 036c 2000     h.. ........l.. 
   1231c:	008d 0000 0004 0000 0370 2000 008d 0000     ........p.. ....
   1232c:	0004 0000 0374 2000 008d 0000 0004 0000     ....t.. ........
   1233c:	0378 2000 008d 0000 0004 0000 037c 2000     x.. ........|.. 
   1234c:	008d 0000 0004 0000 0380 2000 008d 0000     ........... ....
   1235c:	0004 0000 0384 2000 008d 0000 0004 0000     ....... ........
   1236c:	0388 2000 008d 0000 0004 0000               ... ........

00012378 <_ZL13OD_record1A03>:
   12378:	038c 2000 000d 0000 0001 0000 0390 2000     ... ........... 
   12388:	008d 0000 0004 0000 0394 2000 008d 0000     ........... ....
   12398:	0004 0000 0398 2000 008d 0000 0004 0000     ....... ........
   123a8:	039c 2000 008d 0000 0004 0000 03a0 2000     ... ........... 
   123b8:	008d 0000 0004 0000 03a4 2000 008d 0000     ........... ....
   123c8:	0004 0000 03a8 2000 008d 0000 0004 0000     ....... ........
   123d8:	03ac 2000 008d 0000 0004 0000               ... ........

000123e4 <_ZL13OD_record2120>:
   123e4:	0098 2000 0006 0000 0001 0000 00a0 2000     ... ........... 
   123f4:	00be 0000 0008 0000 00a8 2000 00be 0000     ........... ....
   12404:	0008 0000 00b0 2000 00be 0000 0004 0000     ....... ........
   12414:	00b8 2000 00be 0000 0008 0000 0000 0000     ... ............
   12424:	000e 0000 0000 0000                         ........

0001242c <_ZL13OD_record2130>:
   1242c:	00c8 2000 0006 0000 0001 0000 00c9 2000     ... ........... 
   1243c:	0006 0000 001e 0000 00e8 2000 008e 0000     ........... ....
   1244c:	0008 0000 00f0 2000 00be 0000 0004 0000     ....... ........

0001245c <CO_ObjDict>:
   1245c:	1000 0000 0000 0000 0085 0000 0004 0000     ................
   1246c:	0188 2000 1001 0000 0000 0000 0036 0000     ... ........6...
   1247c:	0001 0000 000c 2000 1002 0000 0000 0000     ....... ........
   1248c:	00b6 0000 0004 0000 0010 2000 1003 0000     ........... ....
   1249c:	0008 0000 008e 0000 0004 0000 0014 2000     ............... 
   124ac:	1005 0000 0000 0000 008d 0000 0004 0000     ................
   124bc:	018c 2000 1006 0000 0000 0000 008d 0000     ... ............
   124cc:	0004 0000 0190 2000 1007 0000 0000 0000     ....... ........
   124dc:	008d 0000 0004 0000 0194 2000 1008 0000     ........... ....
   124ec:	0000 0000 0005 0000 000b 0000 0198 2000     ............... 
   124fc:	1009 0000 0000 0000 0005 0000 0004 0000     ................
   1250c:	01a3 2000 100a 0000 0000 0000 0005 0000     ... ............
   1251c:	0004 0000 01a7 2000 1010 0000 0001 0000     ....... ........
   1252c:	008e 0000 0004 0000 0034 2000 1011 0000     ........4.. ....
   1253c:	0001 0000 008e 0000 0004 0000 0038 2000     ............8.. 
   1254c:	1014 0000 0000 0000 0085 0000 0004 0000     ................
   1255c:	01ac 2000 1015 0000 0000 0000 008d 0000     ... ............
   1256c:	0002 0000 01b0 2000 1016 0000 0004 0000     ....... ........
   1257c:	008d 0000 0004 0000 01b4 2000 1017 0000     ........... ....
   1258c:	0000 0000 008d 0000 0002 0000 01c4 2000     ............... 
   1259c:	1018 0000 0004 0000 0000 0000 0000 0000     ................
   125ac:	1e44 0001 1019 0000 0000 0000 000d 0000     D...............
   125bc:	0001 0000 01dc 2000 1029 0000 0006 0000     ....... ).......
   125cc:	000d 0000 0001 0000 01dd 2000 1200 0000     ........... ....
   125dc:	0002 0000 0000 0000 0000 0000 1e80 0001     ................
   125ec:	1400 0000 0002 0000 0000 0000 0000 0000     ................
   125fc:	1ea4 0001 1401 0000 0002 0000 0000 0000     ................
   1260c:	0000 0000 1ec8 0001 1402 0000 0002 0000     ................
	...
   12624:	1eec 0001 1403 0000 0002 0000 0000 0000     ................
   12634:	0000 0000 1f10 0001 1600 0000 0008 0000     ................
	...
   1264c:	1f34 0001 1601 0000 0008 0000 0000 0000     4...............
   1265c:	0000 0000 1fa0 0001 1602 0000 0008 0000     ................
	...
   12674:	200c 0001 1603 0000 0008 0000 0000 0000     . ..............
   12684:	0000 0000 2078 0001 1800 0000 0006 0000     ....x ..........
	...
   1269c:	20e4 0001 1801 0000 0006 0000 0000 0000     . ..............
   126ac:	0000 0000 2138 0001 1802 0000 0006 0000     ....8!..........
	...
   126c4:	218c 0001 1803 0000 0006 0000 0000 0000     .!..............
   126d4:	0000 0000 21e0 0001 1a00 0000 0008 0000     .....!..........
	...
   126ec:	2234 0001 1a01 0000 0008 0000 0000 0000     4"..............
   126fc:	0000 0000 22a0 0001 1a02 0000 0008 0000     ....."..........
	...
   12714:	230c 0001 1a03 0000 0008 0000 0000 0000     .#..............
   12724:	0000 0000 2378 0001 1f80 0000 0000 0000     ....x#..........
   12734:	008d 0000 0004 0000 03b0 2000 2100 0000     ........... .!..
   12744:	0000 0000 0036 0000 000a 0000 003c 2000     ....6.......<.. 
   12754:	2101 0000 0000 0000 000d 0000 0001 0000     .!..............
   12764:	03b4 2000 2102 0000 0000 0000 008d 0000     ... .!..........
   12774:	0002 0000 03b6 2000 2103 0000 0000 0000     ....... .!......
   12784:	008e 0000 0002 0000 0046 2000 2104 0000     ........F.. .!..
   12794:	0000 0000 0086 0000 0002 0000 0048 2000     ............H.. 
   127a4:	2106 0000 0000 0000 0087 0000 0004 0000     .!..............
   127b4:	013c 2000 2107 0000 0005 0000 00be 0000     <.. .!..........
   127c4:	0002 0000 004a 2000 2108 0000 0001 0000     ....J.. .!......
   127d4:	00fd 0000 0008 0000 0054 2000 2109 0000     ........T.. .!..
   127e4:	0001 0000 00fd 0000 0008 0000 0056 2000     ............V.. 
   127f4:	2110 0000 0010 0000 00fe 0000 0004 0000     .!..............
   12804:	0058 2000 2111 0000 0010 0000 00fd 0000     X.. .!..........
   12814:	0004 0000 03b8 2000 2112 0000 0010 0000     ....... .!......
   12824:	00ff 0000 0004 0000 0140 2000 2120 0000     ........@..  !..
   12834:	0005 0000 007d 0000 0008 0000 23e4 0001     ....}........#..
   12844:	2130 0000 0003 0000 0000 0000 0000 0000     0!..............
   12854:	242c 0001 6000 0000 0008 0000 0076 0000     ,$...`......v...
   12864:	0001 0000 00f8 2000 6200 0000 0008 0000     ....... .b......
   12874:	003e 0000 0001 0000 0100 2000 6401 0000     >.......... .d..
   12884:	000c 0000 00b6 0000 0002 0000 0108 2000     ............... 
   12894:	6411 0000 0008 0000 00be 0000 0002 0000     .d..............
   128a4:	0120 2000 2e2e 682f 6c70 702f 726f 2f74      .. ../hpl/port/
   128b4:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   128c4:	2e2e 682f 6c61 692f 636e 756c 6564 682f     ../hal/include/h
   128d4:	6c61 775f 7464 682e 0000 0000 2e2e 682f     al_wdt.h....../h
   128e4:	6c61 732f 6372 682f 6c61 635f 6c61 6e65     al/src/hal_calen
   128f4:	6164 2e72 0063 0000 2e2e 682f 6c61 732f     dar.c...../hal/s
   12904:	6372 682f 6c61 635f 6e61 615f 7973 636e     rc/hal_can_async
   12914:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   12924:	6c61 635f 6372 735f 6e79 2e63 0063 0000     al_crc_sync.c...
   12934:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
   12944:	6332 6d5f 735f 6e79 2e63 0063 2e2e 682f     2c_m_sync.c.../h
   12954:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
   12964:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   12974:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
   12984:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   12994:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
   129a4:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
   129b4:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
   129c4:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
   129d4:	0063 0000 0100 0302 0504 0706 0c08 1410     c...............
   129e4:	2018 4030                                   . 0@

000129e8 <_map>:
   129e8:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   129f8:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   12a08:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   12a18:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   12a28:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   12a38:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00012a48 <user_mux_confs>:
   12a48:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00012a8c <channel_confs>:
   12a8c:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00012acc <interrupt_cfg>:
	...
   12b4c:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   12b5c:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   12b6c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   12b7c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   12b8c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   12b9c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   12bac:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00012bb8 <sercomspi_regs>:
   12bb8:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   12bc8:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   12bd8:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   12be8:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   12bf8:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   12c08:	1400 4300 1800 4300                         ...C...C

00012c10 <_usb_ep_cfgs>:
   12c10:	1bd4 2000 0000 0000 0040 0000 1c14 2000     ... ....@...... 
   12c20:	1c54 2000 0040 0040 1c94 2000 1cd4 2000     T.. @.@.... ... 
   12c30:	0040 0040 1d14 2000 1d54 2000 0040 0040     @.@.... T.. @.@.
   12c40:	1d94 2000 1dd4 2000 0040 0040 0804 0000     ... ... @.@.....
   12c50:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   12c60:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   12c70:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   12c80:	625f 7361 2e65 0068                         _base.h.

00012c88 <n25q256a_interface>:
   12c88:	f711 0000 f7b5 0000 f8c5 0000 fa7d 0000     ............}...
   12c98:	fb0d 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   12ca8:	2f65 7375 6462 2e63 0063 0000 2e2e 682f     e/usbdc.c...../h
   12cb8:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

00012cc8 <_global_impure_ptr>:
   12cc8:	0608 2000                                   ... 

00012ccc <_init>:
   12ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cce:	bf00      	nop
   12cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12cd2:	bc08      	pop	{r3}
   12cd4:	469e      	mov	lr, r3
   12cd6:	4770      	bx	lr

00012cd8 <__init_array_start>:
   12cd8:	00011dad 	.word	0x00011dad

00012cdc <__frame_dummy_init_array_entry>:
   12cdc:	00000289 000004e9 000006fd 00000b05     ................
   12cec:	00000e7d 00011201 00011635 000119e1     }.......5.......

00012cfc <_fini>:
   12cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cfe:	bf00      	nop
   12d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12d02:	bc08      	pop	{r3}
   12d04:	469e      	mov	lr, r3
   12d06:	4770      	bx	lr

00012d08 <__fini_array_start>:
   12d08:	00000265 	.word	0x00000265
